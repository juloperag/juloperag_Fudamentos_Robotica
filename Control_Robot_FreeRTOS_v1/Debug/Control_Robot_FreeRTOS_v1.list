
Control_Robot_FreeRTOS_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  08014140  08014140  00024140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b18  08014b18  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08014b18  08014b18  00024b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b20  08014b20  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b20  08014b20  00024b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014b24  08014b24  00024b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08014b28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013960  20000210  08014d38  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20013b70  08014d38  00033b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffe6  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd5  00000000  00000000  00040226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00043000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00043c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c34  00000000  00000000  000447b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011968  00000000  00000000  000583ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062df9  00000000  00000000  00069d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccb4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005060  00000000  00000000  000ccba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014124 	.word	0x08014124

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	08014124 	.word	0x08014124

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_frsub>:
 8000cb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	e002      	b.n	8000cc4 <__addsf3>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fsub>:
 8000cc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cc4 <__addsf3>:
 8000cc4:	0042      	lsls	r2, r0, #1
 8000cc6:	bf1f      	itttt	ne
 8000cc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ccc:	ea92 0f03 	teqne	r2, r3
 8000cd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd8:	d06a      	beq.n	8000db0 <__addsf3+0xec>
 8000cda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ce2:	bfc1      	itttt	gt
 8000ce4:	18d2      	addgt	r2, r2, r3
 8000ce6:	4041      	eorgt	r1, r0
 8000ce8:	4048      	eorgt	r0, r1
 8000cea:	4041      	eorgt	r1, r0
 8000cec:	bfb8      	it	lt
 8000cee:	425b      	neglt	r3, r3
 8000cf0:	2b19      	cmp	r3, #25
 8000cf2:	bf88      	it	hi
 8000cf4:	4770      	bxhi	lr
 8000cf6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4249      	negne	r1, r1
 8000d16:	ea92 0f03 	teq	r2, r3
 8000d1a:	d03f      	beq.n	8000d9c <__addsf3+0xd8>
 8000d1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d20:	fa41 fc03 	asr.w	ip, r1, r3
 8000d24:	eb10 000c 	adds.w	r0, r0, ip
 8000d28:	f1c3 0320 	rsb	r3, r3, #32
 8000d2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__addsf3+0x78>
 8000d36:	4249      	negs	r1, r1
 8000d38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d40:	d313      	bcc.n	8000d6a <__addsf3+0xa6>
 8000d42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d46:	d306      	bcc.n	8000d56 <__addsf3+0x92>
 8000d48:	0840      	lsrs	r0, r0, #1
 8000d4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d4e:	f102 0201 	add.w	r2, r2, #1
 8000d52:	2afe      	cmp	r2, #254	; 0xfe
 8000d54:	d251      	bcs.n	8000dfa <__addsf3+0x136>
 8000d56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5e:	bf08      	it	eq
 8000d60:	f020 0001 	biceq.w	r0, r0, #1
 8000d64:	ea40 0003 	orr.w	r0, r0, r3
 8000d68:	4770      	bx	lr
 8000d6a:	0049      	lsls	r1, r1, #1
 8000d6c:	eb40 0000 	adc.w	r0, r0, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	bf28      	it	cs
 8000d74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d78:	d2ed      	bcs.n	8000d56 <__addsf3+0x92>
 8000d7a:	fab0 fc80 	clz	ip, r0
 8000d7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d82:	ebb2 020c 	subs.w	r2, r2, ip
 8000d86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d8a:	bfaa      	itet	ge
 8000d8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d90:	4252      	neglt	r2, r2
 8000d92:	4318      	orrge	r0, r3
 8000d94:	bfbc      	itt	lt
 8000d96:	40d0      	lsrlt	r0, r2
 8000d98:	4318      	orrlt	r0, r3
 8000d9a:	4770      	bx	lr
 8000d9c:	f092 0f00 	teq	r2, #0
 8000da0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000da4:	bf06      	itte	eq
 8000da6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000daa:	3201      	addeq	r2, #1
 8000dac:	3b01      	subne	r3, #1
 8000dae:	e7b5      	b.n	8000d1c <__addsf3+0x58>
 8000db0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db8:	bf18      	it	ne
 8000dba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dbe:	d021      	beq.n	8000e04 <__addsf3+0x140>
 8000dc0:	ea92 0f03 	teq	r2, r3
 8000dc4:	d004      	beq.n	8000dd0 <__addsf3+0x10c>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	bf08      	it	eq
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	4770      	bx	lr
 8000dd0:	ea90 0f01 	teq	r0, r1
 8000dd4:	bf1c      	itt	ne
 8000dd6:	2000      	movne	r0, #0
 8000dd8:	4770      	bxne	lr
 8000dda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dde:	d104      	bne.n	8000dea <__addsf3+0x126>
 8000de0:	0040      	lsls	r0, r0, #1
 8000de2:	bf28      	it	cs
 8000de4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dee:	bf3c      	itt	cc
 8000df0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000df4:	4770      	bxcc	lr
 8000df6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	4770      	bx	lr
 8000e04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e08:	bf16      	itet	ne
 8000e0a:	4608      	movne	r0, r1
 8000e0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e10:	4601      	movne	r1, r0
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	bf06      	itte	eq
 8000e16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e1a:	ea90 0f01 	teqeq	r0, r1
 8000e1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_ui2f>:
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e004      	b.n	8000e34 <__aeabi_i2f+0x8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_i2f>:
 8000e2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e30:	bf48      	it	mi
 8000e32:	4240      	negmi	r0, r0
 8000e34:	ea5f 0c00 	movs.w	ip, r0
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e40:	4601      	mov	r1, r0
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	e01c      	b.n	8000e82 <__aeabi_l2f+0x2a>

08000e48 <__aeabi_ul2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e00a      	b.n	8000e6c <__aeabi_l2f+0x14>
 8000e56:	bf00      	nop

08000e58 <__aeabi_l2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_l2f+0x14>
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	ea5f 0c01 	movs.w	ip, r1
 8000e70:	bf02      	ittt	eq
 8000e72:	4684      	moveq	ip, r0
 8000e74:	4601      	moveq	r1, r0
 8000e76:	2000      	moveq	r0, #0
 8000e78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e7c:	bf08      	it	eq
 8000e7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e86:	fabc f28c 	clz	r2, ip
 8000e8a:	3a08      	subs	r2, #8
 8000e8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e90:	db10      	blt.n	8000eb4 <__aeabi_l2f+0x5c>
 8000e92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e96:	4463      	add	r3, ip
 8000e98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ea4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f102 0220 	add.w	r2, r2, #32
 8000eb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ec4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_ldivmod>:
 8000ed4:	b97b      	cbnz	r3, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed6:	b972      	cbnz	r2, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	bfbe      	ittt	lt
 8000edc:	2000      	movlt	r0, #0
 8000ede:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ee2:	e006      	blt.n	8000ef2 <__aeabi_ldivmod+0x1e>
 8000ee4:	bf08      	it	eq
 8000ee6:	2800      	cmpeq	r0, #0
 8000ee8:	bf1c      	itt	ne
 8000eea:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000eee:	f04f 30ff 	movne.w	r0, #4294967295
 8000ef2:	f000 b9dd 	b.w	80012b0 <__aeabi_idiv0>
 8000ef6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000efa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000efe:	2900      	cmp	r1, #0
 8000f00:	db09      	blt.n	8000f16 <__aeabi_ldivmod+0x42>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db1a      	blt.n	8000f3c <__aeabi_ldivmod+0x68>
 8000f06:	f000 f86b 	bl	8000fe0 <__udivmoddi4>
 8000f0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f12:	b004      	add	sp, #16
 8000f14:	4770      	bx	lr
 8000f16:	4240      	negs	r0, r0
 8000f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db1b      	blt.n	8000f58 <__aeabi_ldivmod+0x84>
 8000f20:	f000 f85e 	bl	8000fe0 <__udivmoddi4>
 8000f24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2c:	b004      	add	sp, #16
 8000f2e:	4240      	negs	r0, r0
 8000f30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f34:	4252      	negs	r2, r2
 8000f36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f3a:	4770      	bx	lr
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	f000 f84d 	bl	8000fe0 <__udivmoddi4>
 8000f46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f4e:	b004      	add	sp, #16
 8000f50:	4240      	negs	r0, r0
 8000f52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f56:	4770      	bx	lr
 8000f58:	4252      	negs	r2, r2
 8000f5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f5e:	f000 f83f 	bl	8000fe0 <__udivmoddi4>
 8000f62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f6a:	b004      	add	sp, #16
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_d2lz>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	2200      	movs	r2, #0
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	f7ff fdc5 	bl	8000b0c <__aeabi_dcmplt>
 8000f82:	b928      	cbnz	r0, 8000f90 <__aeabi_d2lz+0x1c>
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f8c:	f000 b80a 	b.w	8000fa4 <__aeabi_d2ulz>
 8000f90:	4620      	mov	r0, r4
 8000f92:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f96:	f000 f805 	bl	8000fa4 <__aeabi_d2ulz>
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_d2ulz>:
 8000fa4:	b5d0      	push	{r4, r6, r7, lr}
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__aeabi_d2ulz+0x34>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4606      	mov	r6, r0
 8000fac:	460f      	mov	r7, r1
 8000fae:	f7ff fb3b 	bl	8000628 <__aeabi_dmul>
 8000fb2:	f7ff fe11 	bl	8000bd8 <__aeabi_d2uiz>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	f7ff fabc 	bl	8000534 <__aeabi_ui2d>
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <__aeabi_d2ulz+0x38>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f7ff fb32 	bl	8000628 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4630      	mov	r0, r6
 8000fca:	4639      	mov	r1, r7
 8000fcc:	f7ff f974 	bl	80002b8 <__aeabi_dsub>
 8000fd0:	f7ff fe02 	bl	8000bd8 <__aeabi_d2uiz>
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	bdd0      	pop	{r4, r6, r7, pc}
 8000fd8:	3df00000 	.word	0x3df00000
 8000fdc:	41f00000 	.word	0x41f00000

08000fe0 <__udivmoddi4>:
 8000fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe4:	9d08      	ldr	r5, [sp, #32]
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	468e      	mov	lr, r1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d14d      	bne.n	800108a <__udivmoddi4+0xaa>
 8000fee:	428a      	cmp	r2, r1
 8000ff0:	4694      	mov	ip, r2
 8000ff2:	d969      	bls.n	80010c8 <__udivmoddi4+0xe8>
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	b152      	cbz	r2, 8001010 <__udivmoddi4+0x30>
 8000ffa:	fa01 f302 	lsl.w	r3, r1, r2
 8000ffe:	f1c2 0120 	rsb	r1, r2, #32
 8001002:	fa20 f101 	lsr.w	r1, r0, r1
 8001006:	fa0c fc02 	lsl.w	ip, ip, r2
 800100a:	ea41 0e03 	orr.w	lr, r1, r3
 800100e:	4094      	lsls	r4, r2
 8001010:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001014:	0c21      	lsrs	r1, r4, #16
 8001016:	fbbe f6f8 	udiv	r6, lr, r8
 800101a:	fa1f f78c 	uxth.w	r7, ip
 800101e:	fb08 e316 	mls	r3, r8, r6, lr
 8001022:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001026:	fb06 f107 	mul.w	r1, r6, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d90a      	bls.n	8001044 <__udivmoddi4+0x64>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f106 30ff 	add.w	r0, r6, #4294967295
 8001036:	f080 811f 	bcs.w	8001278 <__udivmoddi4+0x298>
 800103a:	4299      	cmp	r1, r3
 800103c:	f240 811c 	bls.w	8001278 <__udivmoddi4+0x298>
 8001040:	3e02      	subs	r6, #2
 8001042:	4463      	add	r3, ip
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	b2a4      	uxth	r4, r4
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3310 	mls	r3, r8, r0, r3
 8001050:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001054:	fb00 f707 	mul.w	r7, r0, r7
 8001058:	42a7      	cmp	r7, r4
 800105a:	d90a      	bls.n	8001072 <__udivmoddi4+0x92>
 800105c:	eb1c 0404 	adds.w	r4, ip, r4
 8001060:	f100 33ff 	add.w	r3, r0, #4294967295
 8001064:	f080 810a 	bcs.w	800127c <__udivmoddi4+0x29c>
 8001068:	42a7      	cmp	r7, r4
 800106a:	f240 8107 	bls.w	800127c <__udivmoddi4+0x29c>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001076:	1be4      	subs	r4, r4, r7
 8001078:	2600      	movs	r6, #0
 800107a:	b11d      	cbz	r5, 8001084 <__udivmoddi4+0xa4>
 800107c:	40d4      	lsrs	r4, r2
 800107e:	2300      	movs	r3, #0
 8001080:	e9c5 4300 	strd	r4, r3, [r5]
 8001084:	4631      	mov	r1, r6
 8001086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108a:	428b      	cmp	r3, r1
 800108c:	d909      	bls.n	80010a2 <__udivmoddi4+0xc2>
 800108e:	2d00      	cmp	r5, #0
 8001090:	f000 80ef 	beq.w	8001272 <__udivmoddi4+0x292>
 8001094:	2600      	movs	r6, #0
 8001096:	e9c5 0100 	strd	r0, r1, [r5]
 800109a:	4630      	mov	r0, r6
 800109c:	4631      	mov	r1, r6
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	fab3 f683 	clz	r6, r3
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d14a      	bne.n	8001140 <__udivmoddi4+0x160>
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d302      	bcc.n	80010b4 <__udivmoddi4+0xd4>
 80010ae:	4282      	cmp	r2, r0
 80010b0:	f200 80f9 	bhi.w	80012a6 <__udivmoddi4+0x2c6>
 80010b4:	1a84      	subs	r4, r0, r2
 80010b6:	eb61 0303 	sbc.w	r3, r1, r3
 80010ba:	2001      	movs	r0, #1
 80010bc:	469e      	mov	lr, r3
 80010be:	2d00      	cmp	r5, #0
 80010c0:	d0e0      	beq.n	8001084 <__udivmoddi4+0xa4>
 80010c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80010c6:	e7dd      	b.n	8001084 <__udivmoddi4+0xa4>
 80010c8:	b902      	cbnz	r2, 80010cc <__udivmoddi4+0xec>
 80010ca:	deff      	udf	#255	; 0xff
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f040 8092 	bne.w	80011fa <__udivmoddi4+0x21a>
 80010d6:	eba1 010c 	sub.w	r1, r1, ip
 80010da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010de:	fa1f fe8c 	uxth.w	lr, ip
 80010e2:	2601      	movs	r6, #1
 80010e4:	0c20      	lsrs	r0, r4, #16
 80010e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80010ea:	fb07 1113 	mls	r1, r7, r3, r1
 80010ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010f2:	fb0e f003 	mul.w	r0, lr, r3
 80010f6:	4288      	cmp	r0, r1
 80010f8:	d908      	bls.n	800110c <__udivmoddi4+0x12c>
 80010fa:	eb1c 0101 	adds.w	r1, ip, r1
 80010fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8001102:	d202      	bcs.n	800110a <__udivmoddi4+0x12a>
 8001104:	4288      	cmp	r0, r1
 8001106:	f200 80cb 	bhi.w	80012a0 <__udivmoddi4+0x2c0>
 800110a:	4643      	mov	r3, r8
 800110c:	1a09      	subs	r1, r1, r0
 800110e:	b2a4      	uxth	r4, r4
 8001110:	fbb1 f0f7 	udiv	r0, r1, r7
 8001114:	fb07 1110 	mls	r1, r7, r0, r1
 8001118:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800111c:	fb0e fe00 	mul.w	lr, lr, r0
 8001120:	45a6      	cmp	lr, r4
 8001122:	d908      	bls.n	8001136 <__udivmoddi4+0x156>
 8001124:	eb1c 0404 	adds.w	r4, ip, r4
 8001128:	f100 31ff 	add.w	r1, r0, #4294967295
 800112c:	d202      	bcs.n	8001134 <__udivmoddi4+0x154>
 800112e:	45a6      	cmp	lr, r4
 8001130:	f200 80bb 	bhi.w	80012aa <__udivmoddi4+0x2ca>
 8001134:	4608      	mov	r0, r1
 8001136:	eba4 040e 	sub.w	r4, r4, lr
 800113a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800113e:	e79c      	b.n	800107a <__udivmoddi4+0x9a>
 8001140:	f1c6 0720 	rsb	r7, r6, #32
 8001144:	40b3      	lsls	r3, r6
 8001146:	fa22 fc07 	lsr.w	ip, r2, r7
 800114a:	ea4c 0c03 	orr.w	ip, ip, r3
 800114e:	fa20 f407 	lsr.w	r4, r0, r7
 8001152:	fa01 f306 	lsl.w	r3, r1, r6
 8001156:	431c      	orrs	r4, r3
 8001158:	40f9      	lsrs	r1, r7
 800115a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800115e:	fa00 f306 	lsl.w	r3, r0, r6
 8001162:	fbb1 f8f9 	udiv	r8, r1, r9
 8001166:	0c20      	lsrs	r0, r4, #16
 8001168:	fa1f fe8c 	uxth.w	lr, ip
 800116c:	fb09 1118 	mls	r1, r9, r8, r1
 8001170:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001174:	fb08 f00e 	mul.w	r0, r8, lr
 8001178:	4288      	cmp	r0, r1
 800117a:	fa02 f206 	lsl.w	r2, r2, r6
 800117e:	d90b      	bls.n	8001198 <__udivmoddi4+0x1b8>
 8001180:	eb1c 0101 	adds.w	r1, ip, r1
 8001184:	f108 3aff 	add.w	sl, r8, #4294967295
 8001188:	f080 8088 	bcs.w	800129c <__udivmoddi4+0x2bc>
 800118c:	4288      	cmp	r0, r1
 800118e:	f240 8085 	bls.w	800129c <__udivmoddi4+0x2bc>
 8001192:	f1a8 0802 	sub.w	r8, r8, #2
 8001196:	4461      	add	r1, ip
 8001198:	1a09      	subs	r1, r1, r0
 800119a:	b2a4      	uxth	r4, r4
 800119c:	fbb1 f0f9 	udiv	r0, r1, r9
 80011a0:	fb09 1110 	mls	r1, r9, r0, r1
 80011a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ac:	458e      	cmp	lr, r1
 80011ae:	d908      	bls.n	80011c2 <__udivmoddi4+0x1e2>
 80011b0:	eb1c 0101 	adds.w	r1, ip, r1
 80011b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011b8:	d26c      	bcs.n	8001294 <__udivmoddi4+0x2b4>
 80011ba:	458e      	cmp	lr, r1
 80011bc:	d96a      	bls.n	8001294 <__udivmoddi4+0x2b4>
 80011be:	3802      	subs	r0, #2
 80011c0:	4461      	add	r1, ip
 80011c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011c6:	fba0 9402 	umull	r9, r4, r0, r2
 80011ca:	eba1 010e 	sub.w	r1, r1, lr
 80011ce:	42a1      	cmp	r1, r4
 80011d0:	46c8      	mov	r8, r9
 80011d2:	46a6      	mov	lr, r4
 80011d4:	d356      	bcc.n	8001284 <__udivmoddi4+0x2a4>
 80011d6:	d053      	beq.n	8001280 <__udivmoddi4+0x2a0>
 80011d8:	b15d      	cbz	r5, 80011f2 <__udivmoddi4+0x212>
 80011da:	ebb3 0208 	subs.w	r2, r3, r8
 80011de:	eb61 010e 	sbc.w	r1, r1, lr
 80011e2:	fa01 f707 	lsl.w	r7, r1, r7
 80011e6:	fa22 f306 	lsr.w	r3, r2, r6
 80011ea:	40f1      	lsrs	r1, r6
 80011ec:	431f      	orrs	r7, r3
 80011ee:	e9c5 7100 	strd	r7, r1, [r5]
 80011f2:	2600      	movs	r6, #0
 80011f4:	4631      	mov	r1, r6
 80011f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011fa:	f1c2 0320 	rsb	r3, r2, #32
 80011fe:	40d8      	lsrs	r0, r3
 8001200:	fa0c fc02 	lsl.w	ip, ip, r2
 8001204:	fa21 f303 	lsr.w	r3, r1, r3
 8001208:	4091      	lsls	r1, r2
 800120a:	4301      	orrs	r1, r0
 800120c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001210:	fa1f fe8c 	uxth.w	lr, ip
 8001214:	fbb3 f0f7 	udiv	r0, r3, r7
 8001218:	fb07 3610 	mls	r6, r7, r0, r3
 800121c:	0c0b      	lsrs	r3, r1, #16
 800121e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001222:	fb00 f60e 	mul.w	r6, r0, lr
 8001226:	429e      	cmp	r6, r3
 8001228:	fa04 f402 	lsl.w	r4, r4, r2
 800122c:	d908      	bls.n	8001240 <__udivmoddi4+0x260>
 800122e:	eb1c 0303 	adds.w	r3, ip, r3
 8001232:	f100 38ff 	add.w	r8, r0, #4294967295
 8001236:	d22f      	bcs.n	8001298 <__udivmoddi4+0x2b8>
 8001238:	429e      	cmp	r6, r3
 800123a:	d92d      	bls.n	8001298 <__udivmoddi4+0x2b8>
 800123c:	3802      	subs	r0, #2
 800123e:	4463      	add	r3, ip
 8001240:	1b9b      	subs	r3, r3, r6
 8001242:	b289      	uxth	r1, r1
 8001244:	fbb3 f6f7 	udiv	r6, r3, r7
 8001248:	fb07 3316 	mls	r3, r7, r6, r3
 800124c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001250:	fb06 f30e 	mul.w	r3, r6, lr
 8001254:	428b      	cmp	r3, r1
 8001256:	d908      	bls.n	800126a <__udivmoddi4+0x28a>
 8001258:	eb1c 0101 	adds.w	r1, ip, r1
 800125c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001260:	d216      	bcs.n	8001290 <__udivmoddi4+0x2b0>
 8001262:	428b      	cmp	r3, r1
 8001264:	d914      	bls.n	8001290 <__udivmoddi4+0x2b0>
 8001266:	3e02      	subs	r6, #2
 8001268:	4461      	add	r1, ip
 800126a:	1ac9      	subs	r1, r1, r3
 800126c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001270:	e738      	b.n	80010e4 <__udivmoddi4+0x104>
 8001272:	462e      	mov	r6, r5
 8001274:	4628      	mov	r0, r5
 8001276:	e705      	b.n	8001084 <__udivmoddi4+0xa4>
 8001278:	4606      	mov	r6, r0
 800127a:	e6e3      	b.n	8001044 <__udivmoddi4+0x64>
 800127c:	4618      	mov	r0, r3
 800127e:	e6f8      	b.n	8001072 <__udivmoddi4+0x92>
 8001280:	454b      	cmp	r3, r9
 8001282:	d2a9      	bcs.n	80011d8 <__udivmoddi4+0x1f8>
 8001284:	ebb9 0802 	subs.w	r8, r9, r2
 8001288:	eb64 0e0c 	sbc.w	lr, r4, ip
 800128c:	3801      	subs	r0, #1
 800128e:	e7a3      	b.n	80011d8 <__udivmoddi4+0x1f8>
 8001290:	4646      	mov	r6, r8
 8001292:	e7ea      	b.n	800126a <__udivmoddi4+0x28a>
 8001294:	4620      	mov	r0, r4
 8001296:	e794      	b.n	80011c2 <__udivmoddi4+0x1e2>
 8001298:	4640      	mov	r0, r8
 800129a:	e7d1      	b.n	8001240 <__udivmoddi4+0x260>
 800129c:	46d0      	mov	r8, sl
 800129e:	e77b      	b.n	8001198 <__udivmoddi4+0x1b8>
 80012a0:	3b02      	subs	r3, #2
 80012a2:	4461      	add	r1, ip
 80012a4:	e732      	b.n	800110c <__udivmoddi4+0x12c>
 80012a6:	4630      	mov	r0, r6
 80012a8:	e709      	b.n	80010be <__udivmoddi4+0xde>
 80012aa:	4464      	add	r4, ip
 80012ac:	3802      	subs	r0, #2
 80012ae:	e742      	b.n	8001136 <__udivmoddi4+0x156>

080012b0 <__aeabi_idiv0>:
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop

080012b4 <aplicattion_A_Star>:
#include "A_Star.h"
#include <float.h>
#include <math.h>

//-----------------------------------------------Funciones para la implementacion de A Star------------------------------------------------------------------
file_cell_t* aplicattion_A_Star(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float start_x, float start_y, float goal_x, float goal_y) {
 80012b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b8:	f5ad 4dd5 	sub.w	sp, sp, #27264	; 0x6a80
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012c4:	f6a3 2374 	subw	r3, r3, #2676	; 0xa74
 80012c8:	6018      	str	r0, [r3, #0]
 80012ca:	4608      	mov	r0, r1
 80012cc:	4611      	mov	r1, r2
 80012ce:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012d2:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 80012d6:	ed83 0a00 	vstr	s0, [r3]
 80012da:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012de:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 80012e2:	edc3 0a00 	vstr	s1, [r3]
 80012e6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012ea:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 80012ee:	ed83 1a00 	vstr	s2, [r3]
 80012f2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012f6:	f6a3 2388 	subw	r3, r3, #2696	; 0xa88
 80012fa:	edc3 1a00 	vstr	s3, [r3]
 80012fe:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001302:	f6a3 2375 	subw	r3, r3, #2677	; 0xa75
 8001306:	4602      	mov	r2, r0
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800130e:	f6a3 2376 	subw	r3, r3, #2678	; 0xa76
 8001312:	460a      	mov	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
  //Variables
  file_cell_t *ptrFile;                           //Puntero a la ficha de la secuencia actual de A Star
  file_cell_t file_Open[100] = {0};               //Arreglo de fichas abiertas
 8001316:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800131a:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 800131e:	4618      	mov	r0, r3
 8001320:	f646 2340 	movw	r3, #27200	; 0x6a40
 8001324:	461a      	mov	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	f00b f980 	bl	800c62c <memset>
  uint64_t file_Open_Availability = 0b1;          //Conjunto de bits que indica que fichas abiertas estan disponibles para la comparacion
 800132c:	f04f 0201 	mov.w	r2, #1
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	f507 41d5 	add.w	r1, r7, #27264	; 0x6a80
 8001338:	f101 0108 	add.w	r1, r1, #8
 800133c:	e9c1 2300 	strd	r2, r3, [r1]
  uint8_t bit_file_cell = 0;                      //bit de una ficha que indica su disponibilidad
 8001340:	2300      	movs	r3, #0
 8001342:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001346:	f102 0270 	add.w	r2, r2, #112	; 0x70
 800134a:	7013      	strb	r3, [r2, #0]
  uint8_t index_ptr = 0;                          //Indice de la ficha de la secuencia actual de A Star
 800134c:	2300      	movs	r3, #0
 800134e:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001352:	f102 0207 	add.w	r2, r2, #7
 8001356:	7013      	strb	r3, [r2, #0]
  float min_h;                                    //Valor minimo de la heuristica H
  uint8_t index_file_Open;                        //Indice de la ficha de la ficha abierta a crear

  //----------------Se crea la ficha inicial----------------
  //Se crea la ficha inicial
  file_Open[0].num_parent = 0;
 8001358:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800135c:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  file_Open[0].cost_g = 0.0f;
 8001366:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800136a:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  //Por medio de un puntero se asigna la ficha inicial
  ptrFile = &file_Open[0];
 8001376:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800137a:	3b6c      	subs	r3, #108	; 0x6c
 800137c:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001380:	f102 0214 	add.w	r2, r2, #20
 8001384:	6013      	str	r3, [r2, #0]
  
  // ------------- Se identifica la celda inicial -----------
  for (int i = 0; i < row; i++) 
 8001386:	2300      	movs	r3, #0
 8001388:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800138c:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e09d      	b.n	80014d0 <aplicattion_A_Star+0x21c>
  {
    for (int j = 0; j < colum; j++) 
 8001394:	2300      	movs	r3, #0
 8001396:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800139a:	f102 0274 	add.w	r2, r2, #116	; 0x74
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e07e      	b.n	80014a0 <aplicattion_A_Star+0x1ec>
    {
      if (grid[i][j].coor_x == start_x && grid[i][j].coor_y == start_y) 
 80013a2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80013a6:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 80013b8:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	441a      	add	r2, r3
 80013c0:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80013c4:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2158      	movs	r1, #88	; 0x58
 80013cc:	fb01 f303 	mul.w	r3, r1, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	3304      	adds	r3, #4
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80013dc:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 80013e0:	ed93 7a00 	vldr	s14, [r3]
 80013e4:	eeb4 7a67 	vcmp.f32	s14, s15
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	d14d      	bne.n	800148a <aplicattion_A_Star+0x1d6>
 80013ee:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80013f2:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80013fc:	fb02 f303 	mul.w	r3, r2, r3
 8001400:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 8001404:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	441a      	add	r2, r3
 800140c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001410:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2158      	movs	r1, #88	; 0x58
 8001418:	fb01 f303 	mul.w	r3, r1, r3
 800141c:	4413      	add	r3, r2
 800141e:	3308      	adds	r3, #8
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001428:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 800142c:	ed93 7a00 	vldr	s14, [r3]
 8001430:	eeb4 7a67 	vcmp.f32	s14, s15
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	d127      	bne.n	800148a <aplicattion_A_Star+0x1d6>
      {
        ptrFile->ptrCell_file = &grid[i][j];  
 800143a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800143e:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 8001450:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	441a      	add	r2, r3
 8001458:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800145c:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2158      	movs	r1, #88	; 0x58
 8001464:	fb01 f303 	mul.w	r3, r1, r3
 8001468:	441a      	add	r2, r3
 800146a:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800146e:	f103 0314 	add.w	r3, r3, #20
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	601a      	str	r2, [r3, #0]
        ptrFile->ptrCell_file->status  = OPEN;
 8001476:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800147a:	f103 0314 	add.w	r3, r3, #20
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        break;
 8001488:	e017      	b.n	80014ba <aplicattion_A_Star+0x206>
    for (int j = 0; j < colum; j++) 
 800148a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800148e:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800149a:	f102 0274 	add.w	r2, r2, #116	; 0x74
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80014a4:	f6a3 2376 	subw	r3, r3, #2678	; 0xa76
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80014ae:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	f6ff af74 	blt.w	80013a2 <aplicattion_A_Star+0xee>
  for (int i = 0; i < row; i++) 
 80014ba:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80014be:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80014ca:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80014d4:	f6a3 2375 	subw	r3, r3, #2677	; 0xa75
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80014de:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f6ff af55 	blt.w	8001394 <aplicattion_A_Star+0xe0>
    }
  }

  while (1) {
    // Inicializamos variables
    min_f = DBL_MAX;
 80014ea:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80014ee:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80014f2:	6013      	str	r3, [r2, #0]
    min_h = DBL_MAX;
 80014f4:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80014f8:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80014fc:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001500:	6013      	str	r3, [r2, #0]

    //---------------------Creacion de las diferentes fichas de las celdas vecinas-----------------
    for(uint8_t k = 0; k < 8; k++) 
 8001502:	2300      	movs	r3, #0
 8001504:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001508:	f102 0273 	add.w	r2, r2, #115	; 0x73
 800150c:	7013      	strb	r3, [r2, #0]
 800150e:	e1a4      	b.n	800185a <aplicattion_A_Star+0x5a6>
    {
      if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k] != NULL) 
 8001510:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001514:	f103 0314 	add.w	r3, r3, #20
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001520:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	3302      	adds	r3, #2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8188 	beq.w	8001844 <aplicattion_A_Star+0x590>
      {
        if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h != -1.0f && ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status < OPEN)
 8001534:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001538:	f103 0314 	add.w	r3, r3, #20
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001544:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	3302      	adds	r3, #2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001556:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800155a:	eef4 7a47 	vcmp.f32	s15, s14
 800155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001562:	f000 816f 	beq.w	8001844 <aplicattion_A_Star+0x590>
 8001566:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800156a:	f103 0314 	add.w	r3, r3, #20
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001576:	f103 0373 	add.w	r3, r3, #115	; 0x73
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	3302      	adds	r3, #2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001588:	2b00      	cmp	r3, #0
 800158a:	f040 815b 	bne.w	8001844 <aplicattion_A_Star+0x590>
        {
          //Se busca la posicion que ocupada la nueva ficha en la lista de fichas abiertas
          index_file_Open = search_position_file_Open(file_Open, file_Open_Availability);
 800158e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001592:	396c      	subs	r1, #108	; 0x6c
 8001594:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001598:	f103 0308 	add.w	r3, r3, #8
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	4608      	mov	r0, r1
 80015a2:	f000 fae2 	bl	8001b6a <search_position_file_Open>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80015ac:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 80015b0:	7013      	strb	r3, [r2, #0]
          //Se abre la celda
          ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status = OPEN;
 80015b2:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80015b6:	f103 0314 	add.w	r3, r3, #20
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80015c2:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	3302      	adds	r3, #2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          //Se crea la ficha
          file_Open[index_file_Open].ptrCell_file = ptrFile->ptrCell_file->neighbors.ptrCellMap[k];
 80015d6:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80015da:	f103 0314 	add.w	r3, r3, #20
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80015e6:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	f507 41d4 	add.w	r1, r7, #27136	; 0x6a00
 80015f0:	f101 016f 	add.w	r1, r1, #111	; 0x6f
 80015f4:	7809      	ldrb	r1, [r1, #0]
 80015f6:	3302      	adds	r3, #2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001602:	f6a3 206c 	subw	r0, r3, #2668	; 0xa6c
 8001606:	460b      	mov	r3, r1
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	440b      	add	r3, r1
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	4403      	add	r3, r0
 8001610:	601a      	str	r2, [r3, #0]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 8001612:	2300      	movs	r3, #0
 8001614:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001618:	f102 0272 	add.w	r2, r2, #114	; 0x72
 800161c:	7013      	strb	r3, [r2, #0]
 800161e:	e02d      	b.n	800167c <aplicattion_A_Star+0x3c8>
          {
            file_Open[index_file_Open].ptrCell_parent[u] = ptrFile->ptrCell_parent[u];
 8001620:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001624:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800162e:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 8001632:	7811      	ldrb	r1, [r2, #0]
 8001634:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001638:	f102 0272 	add.w	r2, r2, #114	; 0x72
 800163c:	7814      	ldrb	r4, [r2, #0]
 800163e:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001642:	f102 0214 	add.w	r2, r2, #20
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	6858      	ldr	r0, [r3, #4]
 800164e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001652:	f6a3 226c 	subw	r2, r3, #2668	; 0xa6c
 8001656:	460b      	mov	r3, r1
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	440b      	add	r3, r1
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4423      	add	r3, r4
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	6058      	str	r0, [r3, #4]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 8001666:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800166a:	f103 0372 	add.w	r3, r3, #114	; 0x72
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001676:	f102 0272 	add.w	r2, r2, #114	; 0x72
 800167a:	7013      	strb	r3, [r2, #0]
 800167c:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001680:	f103 0314 	add.w	r3, r3, #20
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800168a:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800168e:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d3c3      	bcc.n	8001620 <aplicattion_A_Star+0x36c>
          }
          file_Open[index_file_Open].ptrCell_parent[ptrFile->num_parent] = ptrFile->ptrCell_file;
 8001698:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800169c:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80016a6:	f103 0314 	add.w	r3, r3, #20
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80016b0:	461c      	mov	r4, r3
 80016b2:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80016b6:	f103 0314 	add.w	r3, r3, #20
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80016c2:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80016c6:	4613      	mov	r3, r2
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4423      	add	r3, r4
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	6058      	str	r0, [r3, #4]
          file_Open[index_file_Open].ptrCell_parent[(ptrFile->num_parent+1)] = NULL;
 80016d6:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80016da:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80016de:	781a      	ldrb	r2, [r3, #0]
 80016e0:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80016e4:	f103 0314 	add.w	r3, r3, #20
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80016ee:	1c58      	adds	r0, r3, #1
 80016f0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80016f4:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80016f8:	4613      	mov	r3, r2
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4403      	add	r3, r0
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	2200      	movs	r2, #0
 8001708:	605a      	str	r2, [r3, #4]
          file_Open[index_file_Open].num_parent = ptrFile->num_parent+1;
 800170a:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800170e:	f103 0314 	add.w	r3, r3, #20
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8001718:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800171c:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 8001720:	7812      	ldrb	r2, [r2, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	b2d8      	uxtb	r0, r3
 8001726:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800172a:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800172e:	4613      	mov	r3, r2
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	4413      	add	r3, r2
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	440b      	add	r3, r1
 8001738:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800173c:	4602      	mov	r2, r0
 800173e:	701a      	strb	r2, [r3, #0]
          file_Open[index_file_Open].cost_g = ptrFile->ptrCell_file->neighbors.distance_neigh[k]+ptrFile->cost_g;
 8001740:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001744:	f103 0314 	add.w	r3, r3, #20
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001750:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	330a      	adds	r3, #10
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	3304      	adds	r3, #4
 800175e:	ed93 7a00 	vldr	s14, [r3]
 8001762:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001766:	f103 0314 	add.w	r3, r3, #20
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8001770:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001774:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001782:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001786:	4613      	mov	r3, r2
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4413      	add	r3, r2
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	440b      	add	r3, r1
 8001790:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001794:	edc3 7a00 	vstr	s15, [r3]
          file_Open[index_file_Open].function_F = file_Open[index_file_Open].cost_g + ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h;
 8001798:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800179c:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80017a0:	781a      	ldrb	r2, [r3, #0]
 80017a2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80017a6:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80017aa:	4613      	mov	r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	4413      	add	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	440b      	add	r3, r1
 80017b4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80017b8:	ed93 7a00 	vldr	s14, [r3]
 80017bc:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80017c0:	f103 0314 	add.w	r3, r3, #20
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80017cc:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	3302      	adds	r3, #2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80017de:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80017e2:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ec:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80017f0:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80017f4:	4613      	mov	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	4413      	add	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	440b      	add	r3, r1
 80017fe:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001802:	edc3 7a00 	vstr	s15, [r3]
          //Indicacion de la disponibilidad de la ficha
          file_Open_Availability |= (0b1 << index_file_Open);
 8001806:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800180a:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	17da      	asrs	r2, r3, #31
 8001818:	469a      	mov	sl, r3
 800181a:	4693      	mov	fp, r2
 800181c:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001820:	f103 0308 	add.w	r3, r3, #8
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	ea42 010a 	orr.w	r1, r2, sl
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	ea43 030b 	orr.w	r3, r3, fp
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001838:	f102 0208 	add.w	r2, r2, #8
 800183c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001840:	e9c2 3400 	strd	r3, r4, [r2]
    for(uint8_t k = 0; k < 8; k++) 
 8001844:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001848:	f103 0373 	add.w	r3, r3, #115	; 0x73
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001854:	f102 0273 	add.w	r2, r2, #115	; 0x73
 8001858:	7013      	strb	r3, [r2, #0]
 800185a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800185e:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b07      	cmp	r3, #7
 8001866:	f67f ae53 	bls.w	8001510 <aplicattion_A_Star+0x25c>
      }
    }
    
    //-----------------Cerramos la ficha actual del puntero----------------------
    //indicamos el nuevo estado de la celda
    ptrFile->ptrCell_file->status = CLOSED;
 800186a:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800186e:	f103 0314 	add.w	r3, r3, #20
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    //Indicacion de la no disponibilidad de la ficha
    file_Open_Availability &=  ~(0b1 << index_ptr);
 800187c:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001880:	f103 0307 	add.w	r3, r3, #7
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2201      	movs	r2, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	17da      	asrs	r2, r3, #31
 8001890:	461d      	mov	r5, r3
 8001892:	4616      	mov	r6, r2
 8001894:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001898:	f103 0308 	add.w	r3, r3, #8
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	ea02 0105 	and.w	r1, r2, r5
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	4033      	ands	r3, r6
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80018ae:	f102 0208 	add.w	r2, r2, #8
 80018b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018b6:	e9c2 3400 	strd	r3, r4, [r2]
     
    //---------------- Comparación función F ---------------------
    for (uint8_t k = 0; k < 64; k++) {
 80018ba:	2300      	movs	r3, #0
 80018bc:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80018c0:	f102 0271 	add.w	r2, r2, #113	; 0x71
 80018c4:	7013      	strb	r3, [r2, #0]
 80018c6:	e101      	b.n	8001acc <aplicattion_A_Star+0x818>
      //Recorrido
      bit_file_cell = (file_Open_Availability >> k) & 0b1;
 80018c8:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80018cc:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80018d0:	7818      	ldrb	r0, [r3, #0]
 80018d2:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80018d6:	f103 0308 	add.w	r3, r3, #8
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f1c0 0420 	rsb	r4, r0, #32
 80018e2:	f1a0 0120 	sub.w	r1, r0, #32
 80018e6:	fa22 f800 	lsr.w	r8, r2, r0
 80018ea:	fa03 f404 	lsl.w	r4, r3, r4
 80018ee:	ea48 0804 	orr.w	r8, r8, r4
 80018f2:	fa23 f101 	lsr.w	r1, r3, r1
 80018f6:	ea48 0801 	orr.w	r8, r8, r1
 80018fa:	fa23 f900 	lsr.w	r9, r3, r0
 80018fe:	fa5f f388 	uxtb.w	r3, r8
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800190a:	f102 0270 	add.w	r2, r2, #112	; 0x70
 800190e:	7013      	strb	r3, [r2, #0]
      //Se el bit es un valor logico de 1 entonces la ficha esta disponible para su comparacion con las demas
      if(bit_file_cell==1 && file_Open[k].ptrCell_file != NULL)
 8001910:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001914:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b01      	cmp	r3, #1
 800191c:	f040 80cb 	bne.w	8001ab6 <aplicattion_A_Star+0x802>
 8001920:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001924:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001928:	781a      	ldrb	r2, [r3, #0]
 800192a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800192e:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001932:	4613      	mov	r3, r2
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	4413      	add	r3, r2
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	440b      	add	r3, r1
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80b9 	beq.w	8001ab6 <aplicattion_A_Star+0x802>
      {
        // Verificar que la función F sea menor al valor anterior
        if (file_Open[k].function_F < min_f) {
 8001944:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001948:	f103 0371 	add.w	r3, r3, #113	; 0x71
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001952:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4413      	add	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	440b      	add	r3, r1
 8001960:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800196c:	ed93 7a00 	vldr	s14, [r3]
 8001970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001978:	dd33      	ble.n	80019e2 <aplicattion_A_Star+0x72e>
          // Reemplazamos valores
          min_f = file_Open[k].function_F;
 800197a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800197e:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001988:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	4413      	add	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	440b      	add	r3, r1
 8001996:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80019a0:	6013      	str	r3, [r2, #0]
          min_h = file_Open[k].ptrCell_file->h;
 80019a2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80019a6:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80019b0:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80019b4:	4613      	mov	r3, r2
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	440b      	add	r3, r1
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c2:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80019c6:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80019ca:	6013      	str	r3, [r2, #0]
          index_ptr = k;
 80019cc:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80019d0:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80019da:	f102 0207 	add.w	r2, r2, #7
 80019de:	7013      	strb	r3, [r2, #0]
 80019e0:	e069      	b.n	8001ab6 <aplicattion_A_Star+0x802>
        }
        // Verificar que la función F sea igual al valor anterior, si es así se desempata con el valor h
        else if (file_Open[k].function_F == min_f) {
 80019e2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80019e6:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80019ea:	781a      	ldrb	r2, [r3, #0]
 80019ec:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80019f0:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80019f4:	4613      	mov	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	440b      	add	r3, r1
 80019fe:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001a0a:	ed93 7a00 	vldr	s14, [r3]
 8001a0e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	d14e      	bne.n	8001ab6 <aplicattion_A_Star+0x802>
          if (file_Open[k].ptrCell_file->h < min_h) {
 8001a18:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001a1c:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001a26:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4413      	add	r3, r2
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	440b      	add	r3, r1
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001a3a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001a3e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8001a42:	ed93 7a00 	vldr	s14, [r3]
 8001a46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4e:	dd32      	ble.n	8001ab6 <aplicattion_A_Star+0x802>
              // Reemplazamos valores
              min_f = file_Open[k].function_F;
 8001a50:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001a54:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001a5e:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001a62:	4613      	mov	r3, r2
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4413      	add	r3, r2
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001a76:	6013      	str	r3, [r2, #0]
              min_h = file_Open[k].ptrCell_file->h;
 8001a78:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001a7c:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001a86:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	440b      	add	r3, r1
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a98:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001a9c:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001aa0:	6013      	str	r3, [r2, #0]
              index_ptr = k;         
 8001aa2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001aa6:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001ab0:	f102 0207 	add.w	r2, r2, #7
 8001ab4:	7013      	strb	r3, [r2, #0]
    for (uint8_t k = 0; k < 64; k++) {
 8001ab6:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001aba:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001ac6:	f102 0271 	add.w	r2, r2, #113	; 0x71
 8001aca:	7013      	strb	r3, [r2, #0]
 8001acc:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001ad0:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b3f      	cmp	r3, #63	; 0x3f
 8001ad8:	f67f aef6 	bls.w	80018c8 <aplicattion_A_Star+0x614>
        }
      }
    }
    
    //--------------- Seleccionamos nueva ficha para el puntero--------------------
    ptrFile = &file_Open[index_ptr];
 8001adc:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001ae0:	f103 0307 	add.w	r3, r3, #7
 8001ae4:	7819      	ldrb	r1, [r3, #0]
 8001ae6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001aea:	3a6c      	subs	r2, #108	; 0x6c
 8001aec:	460b      	mov	r3, r1
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	440b      	add	r3, r1
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4413      	add	r3, r2
 8001af6:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001afa:	f102 0214 	add.w	r2, r2, #20
 8001afe:	6013      	str	r3, [r2, #0]
    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrFile->ptrCell_file->coor_x == goal_x && ptrFile->ptrCell_file->coor_y == goal_y) {
 8001b00:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001b04:	f103 0314 	add.w	r3, r3, #20
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b10:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001b14:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 8001b18:	ed93 7a00 	vldr	s14, [r3]
 8001b1c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	f47f ace1 	bne.w	80014ea <aplicattion_A_Star+0x236>
 8001b28:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001b2c:	f103 0314 	add.w	r3, r3, #20
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b38:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001b3c:	f6a3 2388 	subw	r3, r3, #2696	; 0xa88
 8001b40:	ed93 7a00 	vldr	s14, [r3]
 8001b44:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	d000      	beq.n	8001b50 <aplicattion_A_Star+0x89c>
    min_f = DBL_MAX;
 8001b4e:	e4cc      	b.n	80014ea <aplicattion_A_Star+0x236>
        break;
 8001b50:	bf00      	nop
    }
  }
  return ptrFile;
 8001b52:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001b56:	f103 0314 	add.w	r3, r3, #20
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f507 47d5 	add.w	r7, r7, #27264	; 0x6a80
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001b6a <search_position_file_Open>:


uint8_t search_position_file_Open(file_cell_t list_file[64], uint64_t avan_file)
{
 8001b6a:	b4f0      	push	{r4, r5, r6, r7}
 8001b6c:	b08a      	sub	sp, #40	; 0x28
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	e9c7 2300 	strd	r2, r3, [r7]
  //Variables
  uint8_t bit_list = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 110;
 8001b7a:	236e      	movs	r3, #110	; 0x6e
 8001b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  float value_f = 0;
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  //bucle para recorrer la lista de bits
  for(int i = 0; i<110; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	e01e      	b.n	8001bca <search_position_file_Open+0x60>
  {
    //Recorrido
    bit_list = (avan_file >> i) & 0b1;
 8001b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b90:	69f9      	ldr	r1, [r7, #28]
 8001b92:	f1c1 0620 	rsb	r6, r1, #32
 8001b96:	f1a1 0020 	sub.w	r0, r1, #32
 8001b9a:	fa22 f401 	lsr.w	r4, r2, r1
 8001b9e:	fa03 f606 	lsl.w	r6, r3, r6
 8001ba2:	4334      	orrs	r4, r6
 8001ba4:	fa23 f000 	lsr.w	r0, r3, r0
 8001ba8:	4304      	orrs	r4, r0
 8001baa:	fa23 f501 	lsr.w	r5, r3, r1
 8001bae:	b2e3      	uxtb	r3, r4
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	75fb      	strb	r3, [r7, #23]
    //Se comprueba el bit de correspondiente a la disponibilidad de la ficha
    if(bit_list  == 0)
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d103      	bne.n	8001bc4 <search_position_file_Open+0x5a>
    {
      index = i;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001bc2:	e005      	b.n	8001bd0 <search_position_file_Open+0x66>
  for(int i = 0; i<110; i++)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	2b6d      	cmp	r3, #109	; 0x6d
 8001bce:	dddd      	ble.n	8001b8c <search_position_file_Open+0x22>
    }
  }
  /*En caso que no se indico un valor diferente a 100 para el indice, se busca una ubicacion dentro 
  de la lista de fichas abiertas, seleccionando aquella ubicacion donde el valor de la funcion f
  sea la mayor*/
  if (index == 110)
 8001bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bd4:	2b6e      	cmp	r3, #110	; 0x6e
 8001bd6:	d132      	bne.n	8001c3e <search_position_file_Open+0xd4>
  {  
    //Recorrido del arreglo de fichas abiertas
    for(int k = 0; k<64; k++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	e02c      	b.n	8001c38 <search_position_file_Open+0xce>
    {  
      //Se busca el mayor valor de la funcion f
      if(list_file[k].ptrCell_file != NULL && list_file[k].function_F > value_f)
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	4413      	add	r3, r2
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	461a      	mov	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01e      	beq.n	8001c32 <search_position_file_Open+0xc8>
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	4413      	add	r3, r2
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 8001c08:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	d50d      	bpl.n	8001c32 <search_position_file_Open+0xc8>
      {
        value_f = list_file[k].function_F;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	4413      	add	r3, r2
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	461a      	mov	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4413      	add	r3, r2
 8001c26:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c2a:	623b      	str	r3, [r7, #32]
        index = k;
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(int k = 0; k<64; k++)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61bb      	str	r3, [r7, #24]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2b3f      	cmp	r3, #63	; 0x3f
 8001c3c:	ddcf      	ble.n	8001bde <search_position_file_Open+0x74>
      }
    }
  }
  
  return index;
 8001c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bcf0      	pop	{r4, r5, r6, r7}
 8001c4a:	4770      	bx	lr

08001c4c <heuristic_cell_map>:



//-----------------------------------------------Funciones calculo heuristica----------------------------------------------------------------
void heuristic_cell_map(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float goal_x, float goal_y){
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	460b      	mov	r3, r1
 8001c56:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c5a:	edc7 0a00 	vstr	s1, [r7]
 8001c5e:	72fb      	strb	r3, [r7, #11]
 8001c60:	4613      	mov	r3, r2
 8001c62:	72bb      	strb	r3, [r7, #10]
  //Recorrido por cada una de las celdas
  for (int i = 0; i < row; i++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e071      	b.n	8001d4e <heuristic_cell_map+0x102>
  {
    for (int j = 0; j < colum; j++) 
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	e067      	b.n	8001d40 <heuristic_cell_map+0xf4>
    {
      //Calculo heuristica
      if(grid[i][j].feature =='G')
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	441a      	add	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2158      	movs	r1, #88	; 0x58
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	334c      	adds	r3, #76	; 0x4c
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b47      	cmp	r3, #71	; 0x47
 8001c8e:	d110      	bne.n	8001cb2 <heuristic_cell_map+0x66>
      {
        grid[i][j].h = 0.0f;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	441a      	add	r2, r3
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2158      	movs	r1, #88	; 0x58
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3350      	adds	r3, #80	; 0x50
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e043      	b.n	8001d3a <heuristic_cell_map+0xee>
      }
      else if(grid[i][j].feature=='#')
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	441a      	add	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2158      	movs	r1, #88	; 0x58
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	334c      	adds	r3, #76	; 0x4c
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b23      	cmp	r3, #35	; 0x23
 8001cd0:	d10f      	bne.n	8001cf2 <heuristic_cell_map+0xa6>
      {
        grid[i][j].h = -1.0f;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	441a      	add	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	2158      	movs	r1, #88	; 0x58
 8001ce4:	fb01 f303 	mul.w	r3, r1, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	3350      	adds	r3, #80	; 0x50
 8001cec:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <heuristic_cell_map+0x114>)
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	e023      	b.n	8001d3a <heuristic_cell_map+0xee>
      }
      else
      {
        grid[i][j].h = heuristic_single_cell(&grid[i][j], goal_x, goal_y); 
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	441a      	add	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2158      	movs	r1, #88	; 0x58
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	18d1      	adds	r1, r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001d10:	fb02 f303 	mul.w	r3, r2, r3
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	18d4      	adds	r4, r2, r3
 8001d18:	edd7 0a00 	vldr	s1, [r7]
 8001d1c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d20:	4608      	mov	r0, r1
 8001d22:	f000 f821 	bl	8001d68 <heuristic_single_cell>
 8001d26:	eef0 7a40 	vmov.f32	s15, s0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2258      	movs	r2, #88	; 0x58
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	4423      	add	r3, r4
 8001d34:	3350      	adds	r3, #80	; 0x50
 8001d36:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < colum; j++) 
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	7abb      	ldrb	r3, [r7, #10]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	db93      	blt.n	8001c70 <heuristic_cell_map+0x24>
  for (int i = 0; i < row; i++)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	db89      	blt.n	8001c6a <heuristic_cell_map+0x1e>
      }   
    }
  }  
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd90      	pop	{r4, r7, pc}
 8001d60:	bf800000 	.word	0xbf800000
 8001d64:	00000000 	.word	0x00000000

08001d68 <heuristic_single_cell>:


float heuristic_single_cell(Cell_map_t *cell, float  goal_x, float goal_y)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	ed2d 8b02 	vpush	{d8}
 8001d6e:	b0a3      	sub	sp, #140	; 0x8c
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d78:	edc7 0a01 	vstr	s1, [r7, #4]
  //---------Definicion de variables--------
  //Variables del calculo heuristica
  Cell_map_t *ptrCell = cell;                 //Puntero a la celda actual
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  float total_distante = 0;                   //Distancia total entre la celda actual y la celda del gol
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  float dis[8];                               //Distancia entre la celda vecina y la recta
  uint8_t best_index;                         //Mejor indice de las celdas vecinas
  float min_distance;                         //Distancia minima entre la celda vecina y la recta
  //Variables Recta
  float A_recta;                              //Parametros de la recta
  float B_recta = -1.0f;
 8001d8a:	4be3      	ldr	r3, [pc, #908]	; (8002118 <heuristic_single_cell+0x3b0>)
 8001d8c:	673b      	str	r3, [r7, #112]	; 0x70
  float delta_x;                              //Diferencia la coordenada x entre la celda inicial y la final
  float mag_delta;                            //Magnitud del vector resultante de la diferencia de las coordenadas

  
   //---------------Calculos parametros de la recta-----------------
  delta_y = goal_y - cell->coor_y;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d94:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d9c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
  delta_x = goal_x - cell->coor_x;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dae:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
  mag_delta = sqrtf(delta_x * delta_x + delta_y * delta_y);
 8001db2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001db6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001dba:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001dbe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dca:	f00f feab 	bl	8011b24 <sqrtf>
 8001dce:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
  A_recta =  delta_y / delta_x;
 8001dd2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001dd6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dde:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  C_recta = cell->coor_y - A_recta * cell->coor_x;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	edd3 6a01 	vldr	s13, [r3, #4]
 8001dee:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

  while (1)
  { 
    //Inicializamos variables
    best_index = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    min_distance = DBL_MAX;
 8001e04:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8001e08:	67bb      	str	r3, [r7, #120]	; 0x78

    //------------------Calculo parametros de cada una de las celdas vecinas--------------------
    for (uint8_t k = 0; k < 8; k++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001e10:	e0fc      	b.n	800200c <heuristic_single_cell+0x2a4>
    {
      //Verificamos que el puntero al vecino no es nulo
      if (ptrCell->neighbors.ptrCellMap[k] == NULL)
 8001e12:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e16:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d110      	bne.n	8001e48 <heuristic_single_cell+0xe0>
      {
        ang_between_vector[k] = -1.0f;
 8001e26:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	3388      	adds	r3, #136	; 0x88
 8001e2e:	443b      	add	r3, r7
 8001e30:	3b58      	subs	r3, #88	; 0x58
 8001e32:	4ab9      	ldr	r2, [pc, #740]	; (8002118 <heuristic_single_cell+0x3b0>)
 8001e34:	601a      	str	r2, [r3, #0]
        dis[k] = -1.0f;          
 8001e36:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	3388      	adds	r3, #136	; 0x88
 8001e3e:	443b      	add	r3, r7
 8001e40:	3b78      	subs	r3, #120	; 0x78
 8001e42:	4ab5      	ldr	r2, [pc, #724]	; (8002118 <heuristic_single_cell+0x3b0>)
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e0dc      	b.n	8002002 <heuristic_single_cell+0x29a>
      }
      else
      {
        //Calculo vector relativo
        rel_x = ptrCell->neighbors.ptrCellMap[k]->coor_x - ptrCell->coor_x;
 8001e48:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e50:	3302      	adds	r3, #2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e68:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        rel_y = ptrCell->neighbors.ptrCellMap[k]->coor_y - ptrCell->coor_y;
 8001e6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e70:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e74:	3302      	adds	r3, #2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e84:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        //Calculo parametros
        res = round(((rel_x*delta_x + rel_y*delta_y) / (ptrCell->neighbors.distance_neigh[k] * mag_delta)) * 10000) / 10000;
 8001e90:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001e94:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e9c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001ea0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea8:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001eac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001eb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001eb4:	330a      	adds	r3, #10
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3304      	adds	r3, #4
 8001ebc:	ed93 7a00 	vldr	s14, [r3]
 8001ec0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ecc:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800211c <heuristic_single_cell+0x3b4>
 8001ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed4:	ee17 0a90 	vmov	r0, s15
 8001ed8:	f7fe fb4e 	bl	8000578 <__aeabi_f2d>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	ec43 2b10 	vmov	d0, r2, r3
 8001ee4:	f00f fcac 	bl	8011840 <round>
 8001ee8:	ec51 0b10 	vmov	r0, r1, d0
 8001eec:	a388      	add	r3, pc, #544	; (adr r3, 8002110 <heuristic_single_cell+0x3a8>)
 8001eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef2:	f7fe fcc3 	bl	800087c <__aeabi_ddiv>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7fe fe8b 	bl	8000c18 <__aeabi_d2f>
 8001f02:	4603      	mov	r3, r0
 8001f04:	653b      	str	r3, [r7, #80]	; 0x50
        ang_between_vector[k] = acos(res);
 8001f06:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001f08:	f7fe fb36 	bl	8000578 <__aeabi_f2d>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	ec43 2b10 	vmov	d0, r2, r3
 8001f14:	f00f fd34 	bl	8011980 <acos>
 8001f18:	ec53 2b10 	vmov	r2, r3, d0
 8001f1c:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fe78 	bl	8000c18 <__aeabi_d2f>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	00a3      	lsls	r3, r4, #2
 8001f2c:	3388      	adds	r3, #136	; 0x88
 8001f2e:	443b      	add	r3, r7
 8001f30:	3b58      	subs	r3, #88	; 0x58
 8001f32:	601a      	str	r2, [r3, #0]
        if(A_recta != INFINITY && A_recta != -INFINITY)
 8001f34:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f38:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002120 <heuristic_single_cell+0x3b8>
 8001f3c:	eef4 7a47 	vcmp.f32	s15, s14
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	dc45      	bgt.n	8001fd2 <heuristic_single_cell+0x26a>
 8001f46:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f4a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002124 <heuristic_single_cell+0x3bc>
 8001f4e:	eef4 7a47 	vcmp.f32	s15, s14
 8001f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f56:	d43c      	bmi.n	8001fd2 <heuristic_single_cell+0x26a>
        {
          dis[k] = fabsf(A_recta * ptrCell->neighbors.ptrCellMap[k]->coor_x + B_recta * ptrCell->neighbors.ptrCellMap[k]->coor_y + C_recta) / sqrtf(A_recta * A_recta + 1);  
 8001f58:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001f5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f60:	3302      	adds	r3, #2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f6c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f74:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001f78:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f88:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f94:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9c:	eeb0 8ae7 	vabs.f32	s16, s15
 8001fa0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001fa4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb4:	f00f fdb6 	bl	8011b24 <sqrtf>
 8001fb8:	eeb0 7a40 	vmov.f32	s14, s0
 8001fbc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001fc0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	3388      	adds	r3, #136	; 0x88
 8001fc8:	443b      	add	r3, r7
 8001fca:	3b78      	subs	r3, #120	; 0x78
 8001fcc:	edc3 7a00 	vstr	s15, [r3]
 8001fd0:	e017      	b.n	8002002 <heuristic_single_cell+0x29a>
        }
        else
        {
          dis[k] = fabsf(ptrCell->neighbors.ptrCellMap[k]->coor_x-goal_x);
 8001fd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001fd6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001fda:	3302      	adds	r3, #2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001ff2:	eef0 7ae7 	vabs.f32	s15, s15
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	3388      	adds	r3, #136	; 0x88
 8001ffa:	443b      	add	r3, r7
 8001ffc:	3b78      	subs	r3, #120	; 0x78
 8001ffe:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t k = 0; k < 8; k++)
 8002002:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002006:	3301      	adds	r3, #1
 8002008:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800200c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002010:	2b07      	cmp	r3, #7
 8002012:	f67f aefe 	bls.w	8001e12 <heuristic_single_cell+0xaa>
      }            
    }

    //----------------Buscamos la celda vecina mas cercana a la recta y que este en la misma direccion que la recta---------------------
    //Recorremos los parametros para encontrar la mejor celda
    for (uint8_t k = 0; k < 8; k++)
 8002016:	2300      	movs	r3, #0
 8002018:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800201c:	e03f      	b.n	800209e <heuristic_single_cell+0x336>
    {
      //Verificamos que no sea -1
      if (ptrCell->neighbors.distance_neigh[k] != -1.0f)
 800201e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002022:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002026:	330a      	adds	r3, #10
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	3304      	adds	r3, #4
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002036:	eef4 7a47 	vcmp.f32	s15, s14
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	d029      	beq.n	8002094 <heuristic_single_cell+0x32c>
      {
        //Verificamos que la diferencia entre los angulos no sea superior a 45°
        if (ang_between_vector[k] <= 1.5f)
 8002040:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3388      	adds	r3, #136	; 0x88
 8002048:	443b      	add	r3, r7
 800204a:	3b58      	subs	r3, #88	; 0x58
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002054:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205c:	d81a      	bhi.n	8002094 <heuristic_single_cell+0x32c>
        {
          //Verificar que la distancia sea menor a la anterior menor distancia
          if (dis[k] < min_distance)
 800205e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	3388      	adds	r3, #136	; 0x88
 8002066:	443b      	add	r3, r7
 8002068:	3b78      	subs	r3, #120	; 0x78
 800206a:	edd3 7a00 	vldr	s15, [r3]
 800206e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	dd0b      	ble.n	8002094 <heuristic_single_cell+0x32c>
          {
            min_distance = dis[k];
 800207c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	3388      	adds	r3, #136	; 0x88
 8002084:	443b      	add	r3, r7
 8002086:	3b78      	subs	r3, #120	; 0x78
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	67bb      	str	r3, [r7, #120]	; 0x78
            best_index = k;
 800208c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002090:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    for (uint8_t k = 0; k < 8; k++)
 8002094:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002098:	3301      	adds	r3, #1
 800209a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800209e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80020a2:	2b07      	cmp	r3, #7
 80020a4:	d9bb      	bls.n	800201e <heuristic_single_cell+0x2b6>
      }        
    }

    
    //--------------Seleccionamos la celda vecina y sumamos su distancia--------------------
    total_distante = total_distante + ptrCell->neighbors.distance_neigh[best_index];
 80020a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80020aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020ae:	330a      	adds	r3, #10
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80020be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    ptrCell = ptrCell->neighbors.ptrCellMap[best_index];    
 80020c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80020ca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020ce:	3302      	adds	r3, #2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrCell->coor_x == goal_x && ptrCell->coor_y == goal_y)
 80020da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020de:	edd3 7a01 	vldr	s15, [r3, #4]
 80020e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80020e6:	eeb4 7a67 	vcmp.f32	s14, s15
 80020ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ee:	f47f ae86 	bne.w	8001dfe <heuristic_single_cell+0x96>
 80020f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80020fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80020fe:	eeb4 7a67 	vcmp.f32	s14, s15
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	d00f      	beq.n	8002128 <heuristic_single_cell+0x3c0>
    best_index = 0;
 8002108:	e679      	b.n	8001dfe <heuristic_single_cell+0x96>
 800210a:	bf00      	nop
 800210c:	f3af 8000 	nop.w
 8002110:	00000000 	.word	0x00000000
 8002114:	40c38800 	.word	0x40c38800
 8002118:	bf800000 	.word	0xbf800000
 800211c:	461c4000 	.word	0x461c4000
 8002120:	7f7fffff 	.word	0x7f7fffff
 8002124:	ff7fffff 	.word	0xff7fffff
    {
      break;
 8002128:	bf00      	nop
    }
  }

  return total_distante;
 800212a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800212e:	ee07 3a90 	vmov	s15, r3
}
 8002132:	eeb0 0a67 	vmov.f32	s0, s15
 8002136:	378c      	adds	r7, #140	; 0x8c
 8002138:	46bd      	mov	sp, r7
 800213a:	ecbd 8b02 	vpop	{d8}
 800213e:	bd90      	pop	{r4, r7, pc}

08002140 <configMPUAccel>:
//Importacio de librerias
#include "MPUAccel.h"
//#include <SysTickDriver.h>

void configMPUAccel(MPUAccel_Handler_t *ptrMPUAccel, BasicTimer_Handler_t *ptrBTimerHandler, uint16_t *ptrcountingTimer){
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]

	uint8_t rdy  = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	75fb      	strb	r3, [r7, #23]
	uint8_t byte = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	75bb      	strb	r3, [r7, #22]

	//------------Verificamos comunicacion con el MPU----------------
	while(!rdy){
 8002154:	e004      	b.n	8002160 <configMPUAccel+0x20>

		rdy = WHOIAM(ptrMPUAccel);
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f855 	bl	8002206 <WHOIAM>
 800215c:	4603      	mov	r3, r0
 800215e:	75fb      	strb	r3, [r7, #23]
	while(!rdy){
 8002160:	7dfb      	ldrb	r3, [r7, #23]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f7      	beq.n	8002156 <configMPUAccel+0x16>
	}

	//------------------Reiniciamos el MPU--------------------------
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, PWR_MGMT_l, 0x00);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	216b      	movs	r1, #107	; 0x6b
 800216e:	4618      	mov	r0, r3
 8002170:	f009 f973 	bl	800b45a <i2c_WriteSingleRegister>
	//Pausa
	timer_delay(ptrBTimerHandler, ptrcountingTimer, 1);
 8002174:	2201      	movs	r2, #1
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	68b8      	ldr	r0, [r7, #8]
 800217a:	f007 fc83 	bl	8009a84 <timer_delay>

	//---------------Configuracion Accel----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	211c      	movs	r1, #28
 8002184:	4618      	mov	r0, r3
 8002186:	f009 f937 	bl	800b3f8 <i2c_ReadSingleRegister>
 800218a:	4603      	mov	r3, r0
 800218c:	75bb      	strb	r3, [r7, #22]
	byte &= ~(0b00011000);
 800218e:	7dbb      	ldrb	r3, [r7, #22]
 8002190:	f023 0318 	bic.w	r3, r3, #24
 8002194:	75bb      	strb	r3, [r7, #22]
	//Pausa
	timer_delay(ptrBTimerHandler, ptrcountingTimer, 1);
 8002196:	2201      	movs	r2, #1
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	68b8      	ldr	r0, [r7, #8]
 800219c:	f007 fc72 	bl	8009a84 <timer_delay>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL<<3));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6858      	ldr	r0, [r3, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	b25a      	sxtb	r2, r3
 80021ac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	211c      	movs	r1, #28
 80021ba:	f009 f94e 	bl	800b45a <i2c_WriteSingleRegister>

	//---------------Configuracion Giro----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	211b      	movs	r1, #27
 80021c4:	4618      	mov	r0, r3
 80021c6:	f009 f917 	bl	800b3f8 <i2c_ReadSingleRegister>
 80021ca:	4603      	mov	r3, r0
 80021cc:	75bb      	strb	r3, [r7, #22]
	byte &= ~(0b00011000);
 80021ce:	7dbb      	ldrb	r3, [r7, #22]
 80021d0:	f023 0318 	bic.w	r3, r3, #24
 80021d4:	75bb      	strb	r3, [r7, #22]
	//Pausa
	timer_delay(ptrBTimerHandler, ptrcountingTimer, 1);
 80021d6:	2201      	movs	r2, #1
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	68b8      	ldr	r0, [r7, #8]
 80021dc:	f007 fc52 	bl	8009a84 <timer_delay>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL <<3));
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6858      	ldr	r0, [r3, #4]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	b25a      	sxtb	r2, r3
 80021ec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	211b      	movs	r1, #27
 80021fa:	f009 f92e 	bl	800b45a <i2c_WriteSingleRegister>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <WHOIAM>:



//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Handler_t *ptrMPUAccel){
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
	//Variables auxiliares
	uint8_t whoami = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	73bb      	strb	r3, [r7, #14]
	//leemos el registro WHO_AM_I correspondiente
	whoami =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, WHO_AM_I);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2175      	movs	r1, #117	; 0x75
 800221c:	4618      	mov	r0, r3
 800221e:	f009 f8eb 	bl	800b3f8 <i2c_ReadSingleRegister>
 8002222:	4603      	mov	r3, r0
 8002224:	73fb      	strb	r3, [r7, #15]
	//verificamos la transacción
	whoami &= ~(0b10000001);
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800222c:	73fb      	strb	r3, [r7, #15]
	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	085b      	lsrs	r3, r3, #1
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	bf14      	ite	ne
 8002238:	2301      	movne	r3, #1
 800223a:	2300      	moveq	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8002240:	7bbb      	ldrb	r3, [r7, #14]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	0000      	movs	r0, r0
 800224c:	0000      	movs	r0, r0
	...

08002250 <readMPU>:


//Funcion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
float readMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead, int16_t offset)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	70fb      	strb	r3, [r7, #3]
 800225c:	4613      	mov	r3, r2
 800225e:	803b      	strh	r3, [r7, #0]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	75fb      	strb	r3, [r7, #23]
	uint8_t address_L = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	75bb      	strb	r3, [r7, #22]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	81fb      	strh	r3, [r7, #14]
	uint16_t aux_L = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	81bb      	strh	r3, [r7, #12]
	int16_t   aux  = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	817b      	strh	r3, [r7, #10]
	float res  = 0;
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	2b05      	cmp	r3, #5
 800227e:	d82d      	bhi.n	80022dc <readMPU+0x8c>
 8002280:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <readMPU+0x38>)
 8002282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002286:	bf00      	nop
 8002288:	080022a1 	.word	0x080022a1
 800228c:	080022ab 	.word	0x080022ab
 8002290:	080022b5 	.word	0x080022b5
 8002294:	080022bf 	.word	0x080022bf
 8002298:	080022c9 	.word	0x080022c9
 800229c:	080022d3 	.word	0x080022d3
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 80022a0:	233b      	movs	r3, #59	; 0x3b
 80022a2:	75fb      	strb	r3, [r7, #23]
 80022a4:	233c      	movs	r3, #60	; 0x3c
 80022a6:	75bb      	strb	r3, [r7, #22]
 80022a8:	e019      	b.n	80022de <readMPU+0x8e>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 80022aa:	233d      	movs	r3, #61	; 0x3d
 80022ac:	75fb      	strb	r3, [r7, #23]
 80022ae:	233e      	movs	r3, #62	; 0x3e
 80022b0:	75bb      	strb	r3, [r7, #22]
 80022b2:	e014      	b.n	80022de <readMPU+0x8e>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 80022b4:	233f      	movs	r3, #63	; 0x3f
 80022b6:	75fb      	strb	r3, [r7, #23]
 80022b8:	2340      	movs	r3, #64	; 0x40
 80022ba:	75bb      	strb	r3, [r7, #22]
 80022bc:	e00f      	b.n	80022de <readMPU+0x8e>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 80022be:	2343      	movs	r3, #67	; 0x43
 80022c0:	75fb      	strb	r3, [r7, #23]
 80022c2:	2344      	movs	r3, #68	; 0x44
 80022c4:	75bb      	strb	r3, [r7, #22]
 80022c6:	e00a      	b.n	80022de <readMPU+0x8e>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 80022c8:	2345      	movs	r3, #69	; 0x45
 80022ca:	75fb      	strb	r3, [r7, #23]
 80022cc:	2346      	movs	r3, #70	; 0x46
 80022ce:	75bb      	strb	r3, [r7, #22]
 80022d0:	e005      	b.n	80022de <readMPU+0x8e>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 80022d2:	2347      	movs	r3, #71	; 0x47
 80022d4:	75fb      	strb	r3, [r7, #23]
 80022d6:	2348      	movs	r3, #72	; 0x48
 80022d8:	75bb      	strb	r3, [r7, #22]
 80022da:	e000      	b.n	80022de <readMPU+0x8e>
		default:{ break; }
 80022dc:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	7dfa      	ldrb	r2, [r7, #23]
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f009 f886 	bl	800b3f8 <i2c_ReadSingleRegister>
 80022ec:	4603      	mov	r3, r0
 80022ee:	81fb      	strh	r3, [r7, #14]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	7dba      	ldrb	r2, [r7, #22]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f009 f87d 	bl	800b3f8 <i2c_ReadSingleRegister>
 80022fe:	4603      	mov	r3, r0
 8002300:	81bb      	strh	r3, [r7, #12]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = ((int16_t) ((aux_H << 8) | (aux_L))) - offset;
 8002302:	89fb      	ldrh	r3, [r7, #14]
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	b21a      	sxth	r2, r3
 8002308:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	b21b      	sxth	r3, r3
 8002310:	b29a      	uxth	r2, r3
 8002312:	883b      	ldrh	r3, [r7, #0]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	b29b      	uxth	r3, r3
 8002318:	817b      	strh	r3, [r7, #10]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje
	switch(elementRead)
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	2b02      	cmp	r3, #2
 800231e:	dc02      	bgt.n	8002326 <readMPU+0xd6>
 8002320:	2b00      	cmp	r3, #0
 8002322:	da05      	bge.n	8002330 <readMPU+0xe0>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
				default:{ break; }
			}
			break;
		}
		default:{ break; }
 8002324:	e0d6      	b.n	80024d4 <readMPU+0x284>
 8002326:	3b03      	subs	r3, #3
	switch(elementRead)
 8002328:	2b02      	cmp	r3, #2
 800232a:	f200 80d3 	bhi.w	80024d4 <readMPU+0x284>
 800232e:	e081      	b.n	8002434 <readMPU+0x1e4>
			switch (ptrMPUAccel->fullScaleACCEL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d87b      	bhi.n	8002430 <readMPU+0x1e0>
 8002338:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <readMPU+0xf0>)
 800233a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233e:	bf00      	nop
 8002340:	08002351 	.word	0x08002351
 8002344:	08002389 	.word	0x08002389
 8002348:	080023c1 	.word	0x080023c1
 800234c:	080023f9 	.word	0x080023f9
				case ACCEL_2G :{res = (aux*9.77)/ACCEL_2G_SENS; break;}
 8002350:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f8fd 	bl	8000554 <__aeabi_i2d>
 800235a:	a363      	add	r3, pc, #396	; (adr r3, 80024e8 <readMPU+0x298>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	f7fe f962 	bl	8000628 <__aeabi_dmul>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	4b5f      	ldr	r3, [pc, #380]	; (80024f0 <readMPU+0x2a0>)
 8002372:	f7fe fa83 	bl	800087c <__aeabi_ddiv>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f7fe fc4b 	bl	8000c18 <__aeabi_d2f>
 8002382:	4603      	mov	r3, r0
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	e054      	b.n	8002432 <readMPU+0x1e2>
				case ACCEL_4G :{res = (aux*9.77)/ACCEL_4G_SENS; break;}
 8002388:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f8e1 	bl	8000554 <__aeabi_i2d>
 8002392:	a355      	add	r3, pc, #340	; (adr r3, 80024e8 <readMPU+0x298>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	f7fe f946 	bl	8000628 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	4b52      	ldr	r3, [pc, #328]	; (80024f4 <readMPU+0x2a4>)
 80023aa:	f7fe fa67 	bl	800087c <__aeabi_ddiv>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	f7fe fc2f 	bl	8000c18 <__aeabi_d2f>
 80023ba:	4603      	mov	r3, r0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e038      	b.n	8002432 <readMPU+0x1e2>
				case ACCEL_8G :{res = (aux*9.77)/ACCEL_8G_SENS; break;}
 80023c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f8c5 	bl	8000554 <__aeabi_i2d>
 80023ca:	a347      	add	r3, pc, #284	; (adr r3, 80024e8 <readMPU+0x298>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f7fe f92a 	bl	8000628 <__aeabi_dmul>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	4b45      	ldr	r3, [pc, #276]	; (80024f8 <readMPU+0x2a8>)
 80023e2:	f7fe fa4b 	bl	800087c <__aeabi_ddiv>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fc13 	bl	8000c18 <__aeabi_d2f>
 80023f2:	4603      	mov	r3, r0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	e01c      	b.n	8002432 <readMPU+0x1e2>
				case ACCEL_16G :{res = (aux*9.77)/ACCEL_16G_SENS; break;}
 80023f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f8a9 	bl	8000554 <__aeabi_i2d>
 8002402:	a339      	add	r3, pc, #228	; (adr r3, 80024e8 <readMPU+0x298>)
 8002404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002408:	f7fe f90e 	bl	8000628 <__aeabi_dmul>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	4b38      	ldr	r3, [pc, #224]	; (80024fc <readMPU+0x2ac>)
 800241a:	f7fe fa2f 	bl	800087c <__aeabi_ddiv>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe fbf7 	bl	8000c18 <__aeabi_d2f>
 800242a:	4603      	mov	r3, r0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	e000      	b.n	8002432 <readMPU+0x1e2>
				default:{ break; }
 8002430:	bf00      	nop
			break;
 8002432:	e050      	b.n	80024d6 <readMPU+0x286>
			switch (ptrMPUAccel->fullScaleGYRO)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	785b      	ldrb	r3, [r3, #1]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d849      	bhi.n	80024d0 <readMPU+0x280>
 800243c:	a201      	add	r2, pc, #4	; (adr r2, 8002444 <readMPU+0x1f4>)
 800243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002442:	bf00      	nop
 8002444:	08002455 	.word	0x08002455
 8002448:	08002475 	.word	0x08002475
 800244c:	08002495 	.word	0x08002495
 8002450:	080024b5 	.word	0x080024b5
				case GYRO_250 :{ res = aux/GYRO_250_SENS; break;}
 8002454:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002458:	4a29      	ldr	r2, [pc, #164]	; (8002500 <readMPU+0x2b0>)
 800245a:	fb82 1203 	smull	r1, r2, r2, r3
 800245e:	1152      	asrs	r2, r2, #5
 8002460:	17db      	asrs	r3, r3, #31
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	b21b      	sxth	r3, r3
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800246e:	edc7 7a04 	vstr	s15, [r7, #16]
 8002472:	e02e      	b.n	80024d2 <readMPU+0x282>
				case GYRO_500 :{ res = aux/GYRO_500_SENS; break;}
 8002474:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002478:	4a22      	ldr	r2, [pc, #136]	; (8002504 <readMPU+0x2b4>)
 800247a:	fb82 1203 	smull	r1, r2, r2, r3
 800247e:	1112      	asrs	r2, r2, #4
 8002480:	17db      	asrs	r3, r3, #31
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	b21b      	sxth	r3, r3
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248e:	edc7 7a04 	vstr	s15, [r7, #16]
 8002492:	e01e      	b.n	80024d2 <readMPU+0x282>
				case GYRO_1000 :{ res = aux/GYRO_1000_SENS; break;}
 8002494:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002498:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <readMPU+0x2b4>)
 800249a:	fb82 1203 	smull	r1, r2, r2, r3
 800249e:	10d2      	asrs	r2, r2, #3
 80024a0:	17db      	asrs	r3, r3, #31
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	b21b      	sxth	r3, r3
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ae:	edc7 7a04 	vstr	s15, [r7, #16]
 80024b2:	e00e      	b.n	80024d2 <readMPU+0x282>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
 80024b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	da00      	bge.n	80024be <readMPU+0x26e>
 80024bc:	330f      	adds	r3, #15
 80024be:	111b      	asrs	r3, r3, #4
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ca:	edc7 7a04 	vstr	s15, [r7, #16]
 80024ce:	e000      	b.n	80024d2 <readMPU+0x282>
				default:{ break; }
 80024d0:	bf00      	nop
			break;
 80024d2:	e000      	b.n	80024d6 <readMPU+0x286>
		default:{ break; }
 80024d4:	bf00      	nop
	}
	//Retornamos valor
	return res;
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	ee07 3a90 	vmov	s15, r3
}
 80024dc:	eeb0 0a67 	vmov.f32	s0, s15
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	70a3d70a 	.word	0x70a3d70a
 80024ec:	40238a3d 	.word	0x40238a3d
 80024f0:	40d00000 	.word	0x40d00000
 80024f4:	40c00000 	.word	0x40c00000
 80024f8:	40b00000 	.word	0x40b00000
 80024fc:	40a00000 	.word	0x40a00000
 8002500:	3e88cb3d 	.word	0x3e88cb3d
 8002504:	3e0f83e1 	.word	0x3e0f83e1

08002508 <readCalibrationMPU>:

//Funcion para en el modo de calibracion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
int16_t readCalibrationMPU(MPUAccel_Handler_t *ptrMPUAccel,  uint8_t elementRead)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	70fb      	strb	r3, [r7, #3]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]
	uint8_t address_L = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	73bb      	strb	r3, [r7, #14]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_L = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	817b      	strh	r3, [r7, #10]
	int16_t   aux  = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	813b      	strh	r3, [r7, #8]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	2b05      	cmp	r3, #5
 800252c:	d82c      	bhi.n	8002588 <readCalibrationMPU+0x80>
 800252e:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <readCalibrationMPU+0x2c>)
 8002530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002534:	0800254d 	.word	0x0800254d
 8002538:	08002557 	.word	0x08002557
 800253c:	08002561 	.word	0x08002561
 8002540:	0800256b 	.word	0x0800256b
 8002544:	08002575 	.word	0x08002575
 8002548:	0800257f 	.word	0x0800257f
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 800254c:	233b      	movs	r3, #59	; 0x3b
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	233c      	movs	r3, #60	; 0x3c
 8002552:	73bb      	strb	r3, [r7, #14]
 8002554:	e019      	b.n	800258a <readCalibrationMPU+0x82>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 8002556:	233d      	movs	r3, #61	; 0x3d
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	233e      	movs	r3, #62	; 0x3e
 800255c:	73bb      	strb	r3, [r7, #14]
 800255e:	e014      	b.n	800258a <readCalibrationMPU+0x82>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 8002560:	233f      	movs	r3, #63	; 0x3f
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	2340      	movs	r3, #64	; 0x40
 8002566:	73bb      	strb	r3, [r7, #14]
 8002568:	e00f      	b.n	800258a <readCalibrationMPU+0x82>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 800256a:	2343      	movs	r3, #67	; 0x43
 800256c:	73fb      	strb	r3, [r7, #15]
 800256e:	2344      	movs	r3, #68	; 0x44
 8002570:	73bb      	strb	r3, [r7, #14]
 8002572:	e00a      	b.n	800258a <readCalibrationMPU+0x82>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 8002574:	2345      	movs	r3, #69	; 0x45
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	2346      	movs	r3, #70	; 0x46
 800257a:	73bb      	strb	r3, [r7, #14]
 800257c:	e005      	b.n	800258a <readCalibrationMPU+0x82>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 800257e:	2347      	movs	r3, #71	; 0x47
 8002580:	73fb      	strb	r3, [r7, #15]
 8002582:	2348      	movs	r3, #72	; 0x48
 8002584:	73bb      	strb	r3, [r7, #14]
 8002586:	e000      	b.n	800258a <readCalibrationMPU+0x82>
		default:{ break; }
 8002588:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f008 ff30 	bl	800b3f8 <i2c_ReadSingleRegister>
 8002598:	4603      	mov	r3, r0
 800259a:	81bb      	strh	r3, [r7, #12]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	7bba      	ldrb	r2, [r7, #14]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f008 ff27 	bl	800b3f8 <i2c_ReadSingleRegister>
 80025aa:	4603      	mov	r3, r0
 80025ac:	817b      	strh	r3, [r7, #10]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = (int16_t) ((aux_H << 8) | (aux_L));
 80025ae:	89bb      	ldrh	r3, [r7, #12]
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	b21a      	sxth	r2, r3
 80025b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	813b      	strh	r3, [r7, #8]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje

	//Retornamos valor
	return aux;
 80025bc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <calibrationMPU>:


//Funcion para la calibracion de las mediciones realizadas
float calibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, BasicTimer_Handler_t *ptrBTimerHandler, uint16_t *ptrcountingTimer, uint8_t elementCalibration)
{
 80025c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025cc:	b08a      	sub	sp, #40	; 0x28
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	70fb      	strb	r3, [r7, #3]
	//Variables la ejecucion de la calibracion
	int64_t aux_sum = 0;
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint16_t num_samples = 200;
 80025e4:	23c8      	movs	r3, #200	; 0xc8
 80025e6:	837b      	strh	r3, [r7, #26]
	float offset = 0;
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
	//Realizacion acumulacion de valores
	for (int i = 0; i < num_samples; i++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	e019      	b.n	8002628 <calibrationMPU+0x60>
	{
		//Lectura del registro respectivo y acumulacion
		aux_sum += readCalibrationMPU(ptrMPUAccel, elementCalibration);
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	4619      	mov	r1, r3
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f7ff ff85 	bl	8002508 <readCalibrationMPU>
 80025fe:	4603      	mov	r3, r0
 8002600:	b21b      	sxth	r3, r3
 8002602:	17da      	asrs	r2, r3, #31
 8002604:	461c      	mov	r4, r3
 8002606:	4615      	mov	r5, r2
 8002608:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800260c:	eb12 0804 	adds.w	r8, r2, r4
 8002610:	eb43 0905 	adc.w	r9, r3, r5
 8002614:	e9c7 8908 	strd	r8, r9, [r7, #32]
		//Pausa
		timer_delay(ptrBTimerHandler, ptrcountingTimer, 1);
 8002618:	2201      	movs	r2, #1
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	68b8      	ldr	r0, [r7, #8]
 800261e:	f007 fa31 	bl	8009a84 <timer_delay>
	for (int i = 0; i < num_samples; i++)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3301      	adds	r3, #1
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	8b7b      	ldrh	r3, [r7, #26]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	429a      	cmp	r2, r3
 800262e:	dbe1      	blt.n	80025f4 <calibrationMPU+0x2c>
	}
	//Promedio del eje medido
	 offset = aux_sum/num_samples;
 8002630:	8b7b      	ldrh	r3, [r7, #26]
 8002632:	2200      	movs	r2, #0
 8002634:	469a      	mov	sl, r3
 8002636:	4693      	mov	fp, r2
 8002638:	4652      	mov	r2, sl
 800263a:	465b      	mov	r3, fp
 800263c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002640:	f7fe fc48 	bl	8000ed4 <__aeabi_ldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	f7fe fc04 	bl	8000e58 <__aeabi_l2f>
 8002650:	4603      	mov	r3, r0
 8002652:	617b      	str	r3, [r7, #20]
	//Retornar valor
	return offset;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	ee07 3a90 	vmov	s15, r3
}
 800265a:	eeb0 0a67 	vmov.f32	s0, s15
 800265e:	3728      	adds	r7, #40	; 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002668 <getAngle>:


//Funcion para calcular el nuevo angulo de uno de los ejes del girsocopio
float getAngle(MPUAccel_Handler_t *ptrMPUAccel, uint8_t timer, float ang_init, uint8_t axis, int16_t offset_Axis)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	4608      	mov	r0, r1
 8002672:	ed87 0a01 	vstr	s0, [r7, #4]
 8002676:	4611      	mov	r1, r2
 8002678:	461a      	mov	r2, r3
 800267a:	4603      	mov	r3, r0
 800267c:	72fb      	strb	r3, [r7, #11]
 800267e:	460b      	mov	r3, r1
 8002680:	72bb      	strb	r3, [r7, #10]
 8002682:	4613      	mov	r3, r2
 8002684:	813b      	strh	r3, [r7, #8]
	//Lectura velocidad angular
	float w_Angular= readMPU(ptrMPUAccel, axis, offset_Axis);
 8002686:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800268a:	7abb      	ldrb	r3, [r7, #10]
 800268c:	4619      	mov	r1, r3
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f7ff fdde 	bl	8002250 <readMPU>
 8002694:	ed87 0a05 	vstr	s0, [r7, #20]
	//Calculo angulo
	float ang = ang_init + (w_Angular*timer)/1000;
 8002698:	7afb      	ldrb	r3, [r7, #11]
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026aa:	eddf 6a09 	vldr	s13, [pc, #36]	; 80026d0 <getAngle+0x68>
 80026ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80026b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ba:	edc7 7a04 	vstr	s15, [r7, #16]

	return ang;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	ee07 3a90 	vmov	s15, r3
}
 80026c4:	eeb0 0a67 	vmov.f32	s0, s15
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	447a0000 	.word	0x447a0000

080026d4 <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80026f0:	eeb0 0a67 	vmov.f32	s0, s15
 80026f4:	4610      	mov	r0, r2
 80026f6:	f009 fa3d 	bl	800bb74 <updateDuttyCyclePercentageFloat>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf0c      	ite	eq
 8002718:	2301      	moveq	r3, #1
 800271a:	2300      	movne	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	4619      	mov	r1, r3
 8002738:	4610      	mov	r0, r2
 800273a:	f008 fc67 	bl	800b00c <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	b2db      	uxtb	r3, r3
 800274e:	4619      	mov	r1, r3
 8002750:	4610      	mov	r0, r2
 8002752:	f009 f949 	bl	800b9e8 <statusPolarityPWM>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <build_Operation>:
#include <math.h>


//-------------------------Funcion para la definicion de operaciones--------------------------
void build_Operation(Parameters_Operation_t *prtList, Parameter_build_t *prtbuild, double finishline_x, double finishline_y)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08c      	sub	sp, #48	; 0x30
 8002764:	af00      	add	r7, sp, #0
 8002766:	6178      	str	r0, [r7, #20]
 8002768:	6139      	str	r1, [r7, #16]
 800276a:	ed87 0b02 	vstr	d0, [r7, #8]
 800276e:	ed87 1b00 	vstr	d1, [r7]
	//Definicion el vector director
	double delta[2] = {finishline_x - prtbuild->initline_x, finishline_y - prtbuild->initline_y};
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800277c:	f7fd fd9c 	bl	80002b8 <__aeabi_dsub>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800278e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002792:	f7fd fd91 	bl	80002b8 <__aeabi_dsub>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	//Calculo angululo entre vectores directores
	double grad_turn_res = calculed_ang_turn(prtbuild->delta_before, delta);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	3310      	adds	r3, #16
 80027a2:	f107 0218 	add.w	r2, r7, #24
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fad1 	bl	8002d50 <calculed_ang_turn>
 80027ae:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	//condicional de cambio de angulo
	if(grad_turn_res == 0)
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027be:	f7fe f99b 	bl	8000af8 <__aeabi_dcmpeq>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00e      	beq.n	80027e6 <build_Operation+0x86>
	{
		//agregar operacion de linea recta
		 add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80027ce:	ed9f 2b2a 	vldr	d2, [pc, #168]	; 8002878 <build_Operation+0x118>
 80027d2:	ed97 1b00 	vldr	d1, [r7]
 80027d6:	ed97 0b02 	vldr	d0, [r7, #8]
 80027da:	2201      	movs	r2, #1
 80027dc:	4619      	mov	r1, r3
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f000 f84e 	bl	8002880 <add_Operation>
 80027e4:	e030      	b.n	8002848 <build_Operation+0xe8>
	}
	else
	{
		//Agregar operacion de rotacion
		if(prtbuild->routelist>0){ prtbuild->number_operation++; }
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <build_Operation+0xa0>
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80027f6:	3301      	adds	r3, #1
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		add_Operation(prtList, prtbuild->number_operation, TURN, 0, 0, grad_turn_res);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002806:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800280a:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8002878 <build_Operation+0x118>
 800280e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8002878 <build_Operation+0x118>
 8002812:	2202      	movs	r2, #2
 8002814:	4619      	mov	r1, r3
 8002816:	6978      	ldr	r0, [r7, #20]
 8002818:	f000 f832 	bl	8002880 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002822:	3301      	adds	r3, #1
 8002824:	b2da      	uxtb	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002832:	ed9f 2b11 	vldr	d2, [pc, #68]	; 8002878 <build_Operation+0x118>
 8002836:	ed97 1b00 	vldr	d1, [r7]
 800283a:	ed97 0b02 	vldr	d0, [r7, #8]
 800283e:	2201      	movs	r2, #1
 8002840:	4619      	mov	r1, r3
 8002842:	6978      	ldr	r0, [r7, #20]
 8002844:	f000 f81c 	bl	8002880 <add_Operation>
	}
	//Se redefine los valores iniciales
	prtbuild->delta_before[0] = delta[0];
 8002848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800284c:	6939      	ldr	r1, [r7, #16]
 800284e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtbuild->delta_before[1] = delta[1];
 8002852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002856:	6939      	ldr	r1, [r7, #16]
 8002858:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prtbuild->initline_x = finishline_x;
 800285c:	6939      	ldr	r1, [r7, #16]
 800285e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002862:	e9c1 2300 	strd	r2, r3, [r1]
	prtbuild->initline_y = finishline_y;
 8002866:	6939      	ldr	r1, [r7, #16]
 8002868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800286c:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002870:	bf00      	nop
 8002872:	3730      	adds	r7, #48	; 0x30
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
	...

08002880 <add_Operation>:

void add_Operation(Parameters_Operation_t *prtList, uint8_t num_operation, uint8_t type_operation, double coor_x, double coor_y, double grad_turn)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	61f8      	str	r0, [r7, #28]
 8002888:	460b      	mov	r3, r1
 800288a:	ed87 0b04 	vstr	d0, [r7, #16]
 800288e:	ed87 1b02 	vstr	d1, [r7, #8]
 8002892:	ed87 2b00 	vstr	d2, [r7]
 8002896:	76fb      	strb	r3, [r7, #27]
 8002898:	4613      	mov	r3, r2
 800289a:	76bb      	strb	r3, [r7, #26]
	prtList[num_operation].operacion = type_operation;
 800289c:	7efb      	ldrb	r3, [r7, #27]
 800289e:	015b      	lsls	r3, r3, #5
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	4413      	add	r3, r2
 80028a4:	7eba      	ldrb	r2, [r7, #26]
 80028a6:	701a      	strb	r2, [r3, #0]
	prtList[num_operation].x_destination = coor_x;
 80028a8:	7efb      	ldrb	r3, [r7, #27]
 80028aa:	015b      	lsls	r3, r3, #5
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	18d1      	adds	r1, r2, r3
 80028b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prtList[num_operation].y_destination = coor_y;
 80028b8:	7efb      	ldrb	r3, [r7, #27]
 80028ba:	015b      	lsls	r3, r3, #5
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	18d1      	adds	r1, r2, r3
 80028c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtList[num_operation].grad_Rotative = grad_turn;
 80028c8:	7efb      	ldrb	r3, [r7, #27]
 80028ca:	015b      	lsls	r3, r3, #5
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	18d1      	adds	r1, r2, r3
 80028d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80028d8:	bf00      	nop
 80028da:	3724      	adds	r7, #36	; 0x24
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	0000      	movs	r0, r0
	...

080028e8 <change_position>:


//-----------------Funciones para definir los parametros de la poscion teorica--------------
void change_position(Parameters_Path_t *ptrParameterPath, int distance, double starcoor_x, double starcoor_y)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6178      	str	r0, [r7, #20]
 80028f0:	6139      	str	r1, [r7, #16]
 80028f2:	ed87 0b02 	vstr	d0, [r7, #8]
 80028f6:	ed87 1b00 	vstr	d1, [r7]
	//Definimos la distancia
	 ptrParameterPath->line_Distance = distance;                  //[mm]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
	//Calculamos la posicicion
	double pot_x = ptrParameterPath->line_Distance*cos((ptrParameterPath->rotative_Grad*M_PI)/180);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fe25 	bl	8000554 <__aeabi_i2d>
 800290a:	4604      	mov	r4, r0
 800290c:	460d      	mov	r5, r1
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002912:	4618      	mov	r0, r3
 8002914:	f7fd fe1e 	bl	8000554 <__aeabi_i2d>
 8002918:	a33b      	add	r3, pc, #236	; (adr r3, 8002a08 <change_position+0x120>)
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	f7fd fe83 	bl	8000628 <__aeabi_dmul>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4610      	mov	r0, r2
 8002928:	4619      	mov	r1, r3
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <change_position+0x128>)
 8002930:	f7fd ffa4 	bl	800087c <__aeabi_ddiv>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	ec43 2b17 	vmov	d7, r2, r3
 800293c:	eeb0 0a47 	vmov.f32	s0, s14
 8002940:	eef0 0a67 	vmov.f32	s1, s15
 8002944:	f00e ff28 	bl	8011798 <cos>
 8002948:	ec53 2b10 	vmov	r2, r3, d0
 800294c:	4620      	mov	r0, r4
 800294e:	4629      	mov	r1, r5
 8002950:	f7fd fe6a 	bl	8000628 <__aeabi_dmul>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double pot_y = ptrParameterPath->line_Distance*sin((ptrParameterPath->rotative_Grad*M_PI)/180);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fdf7 	bl	8000554 <__aeabi_i2d>
 8002966:	4604      	mov	r4, r0
 8002968:	460d      	mov	r5, r1
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fdf0 	bl	8000554 <__aeabi_i2d>
 8002974:	a324      	add	r3, pc, #144	; (adr r3, 8002a08 <change_position+0x120>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fe55 	bl	8000628 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <change_position+0x128>)
 800298c:	f7fd ff76 	bl	800087c <__aeabi_ddiv>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	ec43 2b17 	vmov	d7, r2, r3
 8002998:	eeb0 0a47 	vmov.f32	s0, s14
 800299c:	eef0 0a67 	vmov.f32	s1, s15
 80029a0:	f00e ff96 	bl	80118d0 <sin>
 80029a4:	ec53 2b10 	vmov	r2, r3, d0
 80029a8:	4620      	mov	r0, r4
 80029aa:	4629      	mov	r1, r5
 80029ac:	f7fd fe3c 	bl	8000628 <__aeabi_dmul>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Guardamos Coordenadas iniciales
	ptrParameterPath->start_position_x = starcoor_x;
 80029b8:	6979      	ldr	r1, [r7, #20]
 80029ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029be:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrParameterPath->start_position_y = starcoor_y;
 80029c2:	6979      	ldr	r1, [r7, #20]
 80029c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029c8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x += pot_x;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80029d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029d6:	f7fd fc71 	bl	80002bc <__adddf3>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	6979      	ldr	r1, [r7, #20]
 80029e0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrParameterPath->goal_Position_y += pot_y;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80029ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ee:	f7fd fc65 	bl	80002bc <__adddf3>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	6979      	ldr	r1, [r7, #20]
 80029f8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 80029fc:	bf00      	nop
 80029fe:	3728      	adds	r7, #40	; 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bdb0      	pop	{r4, r5, r7, pc}
 8002a04:	f3af 8000 	nop.w
 8002a08:	54442d18 	.word	0x54442d18
 8002a0c:	400921fb 	.word	0x400921fb
 8002a10:	40668000 	.word	0x40668000
 8002a14:	00000000 	.word	0x00000000

08002a18 <change_coordinates_position>:

void change_coordinates_position(Parameters_Path_t *ptrParameterPath, double goalcoor_x, double goalcoor_y, double starcoor_x, double starcoor_y)
{
 8002a18:	b5b0      	push	{r4, r5, r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6278      	str	r0, [r7, #36]	; 0x24
 8002a20:	ed87 0b06 	vstr	d0, [r7, #24]
 8002a24:	ed87 1b04 	vstr	d1, [r7, #16]
 8002a28:	ed87 2b02 	vstr	d2, [r7, #8]
 8002a2c:	ed87 3b00 	vstr	d3, [r7]
	//Guardamos Coordenadas iniciales
	ptrParameterPath->start_position_x = starcoor_x;
 8002a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a36:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrParameterPath->start_position_y = starcoor_y;
 8002a3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a40:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x = goalcoor_x;
 8002a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a4a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrParameterPath->goal_Position_y = goalcoor_y;
 8002a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a54:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	//Definimos la distancia
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002a64:	f7fd fc28 	bl	80002b8 <__aeabi_dsub>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	ec43 2b17 	vmov	d7, r2, r3
 8002a70:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8002ae8 <change_coordinates_position+0xd0>
 8002a74:	eeb0 0a47 	vmov.f32	s0, s14
 8002a78:	eef0 0a67 	vmov.f32	s1, s15
 8002a7c:	f00e ffb6 	bl	80119ec <pow>
 8002a80:	ec55 4b10 	vmov	r4, r5, d0
			pow(ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y,2));;                  //[mm]
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002a90:	f7fd fc12 	bl	80002b8 <__aeabi_dsub>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	ec43 2b17 	vmov	d7, r2, r3
 8002a9c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002ae8 <change_coordinates_position+0xd0>
 8002aa0:	eeb0 0a47 	vmov.f32	s0, s14
 8002aa4:	eef0 0a67 	vmov.f32	s1, s15
 8002aa8:	f00e ffa0 	bl	80119ec <pow>
 8002aac:	ec53 2b10 	vmov	r2, r3, d0
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	4629      	mov	r1, r5
 8002ab4:	f7fd fc02 	bl	80002bc <__adddf3>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	ec43 2b17 	vmov	d7, r2, r3
 8002ac0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ac4:	eef0 0a67 	vmov.f32	s1, s15
 8002ac8:	f00f f800 	bl	8011acc <sqrt>
 8002acc:	ec53 2b10 	vmov	r2, r3, d0
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f7fe f858 	bl	8000b88 <__aeabi_d2iz>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40

}
 8002ade:	bf00      	nop
 8002ae0:	3728      	adds	r7, #40	; 0x28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	00000000 	.word	0x00000000
 8002aec:	40000000 	.word	0x40000000

08002af0 <calculation_parameter_distance>:

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8002af0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002af4:	b08a      	sub	sp, #40	; 0x28
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6178      	str	r0, [r7, #20]
	//Calculo del vector director de la recta
	double a = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002b06:	f7fd fbd7 	bl	80002b8 <__aeabi_dsub>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double b = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002b1e:	f7fd fbcb 	bl	80002b8 <__aeabi_dsub>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->parametersStraight.magnitude_d = sqrt(pow(a,2)+pow(b,2));
 8002b2a:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8002c38 <calculation_parameter_distance+0x148>
 8002b2e:	ed97 0b08 	vldr	d0, [r7, #32]
 8002b32:	f00e ff5b 	bl	80119ec <pow>
 8002b36:	ec59 8b10 	vmov	r8, r9, d0
 8002b3a:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8002c38 <calculation_parameter_distance+0x148>
 8002b3e:	ed97 0b06 	vldr	d0, [r7, #24]
 8002b42:	f00e ff53 	bl	80119ec <pow>
 8002b46:	ec53 2b10 	vmov	r2, r3, d0
 8002b4a:	4640      	mov	r0, r8
 8002b4c:	4649      	mov	r1, r9
 8002b4e:	f7fd fbb5 	bl	80002bc <__adddf3>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	ec43 2b17 	vmov	d7, r2, r3
 8002b5a:	eeb0 0a47 	vmov.f32	s0, s14
 8002b5e:	eef0 0a67 	vmov.f32	s1, s15
 8002b62:	f00e ffb3 	bl	8011acc <sqrt>
 8002b66:	eeb0 7a40 	vmov.f32	s14, s0
 8002b6a:	eef0 7a60 	vmov.f32	s15, s1
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->parametersStraight.proy_A = a;
 8002b74:	6979      	ldr	r1, [r7, #20]
 8002b76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->parametersStraight.proy_B = b;
 8002b7e:	6979      	ldr	r1, [r7, #20]
 8002b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b84:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->parametersStraight.proy_C = -1*a*ptrParameterPath->start_position_x - b*ptrParameterPath->start_position_y;
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002b9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b9e:	f7fd fd43 	bl	8000628 <__aeabi_dmul>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4690      	mov	r8, r2
 8002ba8:	4699      	mov	r9, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bb4:	f7fd fd38 	bl	8000628 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4640      	mov	r0, r8
 8002bbe:	4649      	mov	r1, r9
 8002bc0:	f7fd fb7a 	bl	80002b8 <__aeabi_dsub>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	6979      	ldr	r1, [r7, #20]
 8002bca:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->parametersStraight.dis_point_A = b;
 8002bce:	6979      	ldr	r1, [r7, #20]
 8002bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->parametersStraight.dis_point_B = -1*a;
 8002bd8:	6a3c      	ldr	r4, [r7, #32]
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->parametersStraight.dis_point_C = -1*b*ptrParameterPath->start_position_x + a*ptrParameterPath->start_position_y;
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002bf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bfc:	f7fd fd14 	bl	8000628 <__aeabi_dmul>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4614      	mov	r4, r2
 8002c06:	461d      	mov	r5, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002c0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c12:	f7fd fd09 	bl	8000628 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f7fd fb4d 	bl	80002bc <__adddf3>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	6979      	ldr	r1, [r7, #20]
 8002c28:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8002c2c:	bf00      	nop
 8002c2e:	3728      	adds	r7, #40	; 0x28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c36:	bf00      	nop
 8002c38:	00000000 	.word	0x00000000
 8002c3c:	40000000 	.word	0x40000000

08002c40 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double position_x, double position_y)
{
 8002c40:	b5b0      	push	{r4, r5, r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6178      	str	r0, [r7, #20]
 8002c48:	ed87 0b02 	vstr	d0, [r7, #8]
 8002c4c:	ed87 1b00 	vstr	d1, [r7]
	//Calculo
	double distance = -1*((ptrParameterPath->parametersStraight.dis_point_A*position_x + ptrParameterPath->parametersStraight.dis_point_B*position_y
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002c56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c5a:	f7fd fce5 	bl	8000628 <__aeabi_dmul>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4614      	mov	r4, r2
 8002c64:	461d      	mov	r5, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c70:	f7fd fcda 	bl	8000628 <__aeabi_dmul>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4620      	mov	r0, r4
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	f7fd fb1e 	bl	80002bc <__adddf3>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
			+ ptrParameterPath->parametersStraight.dis_point_C)/ptrParameterPath->parametersStraight.magnitude_d);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c8e:	f7fd fb15 	bl	80002bc <__adddf3>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4610      	mov	r0, r2
 8002c98:	4619      	mov	r1, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca0:	f7fd fdec 	bl	800087c <__aeabi_ddiv>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->parametersStraight.dis_point_A*position_x + ptrParameterPath->parametersStraight.dis_point_B*position_y
 8002ca8:	4611      	mov	r1, r2
 8002caa:	61b9      	str	r1, [r7, #24]
 8002cac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002cb0:	61fb      	str	r3, [r7, #28]
	//Retornar
	return distance;
 8002cb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb6:	ec43 2b17 	vmov	d7, r2, r3
}
 8002cba:	eeb0 0a47 	vmov.f32	s0, s14
 8002cbe:	eef0 0a67 	vmov.f32	s1, s15
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bdb0      	pop	{r4, r5, r7, pc}

08002cc8 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double position_x, double position_y)
{
 8002cc8:	b5b0      	push	{r4, r5, r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6178      	str	r0, [r7, #20]
 8002cd0:	ed87 0b02 	vstr	d0, [r7, #8]
 8002cd4:	ed87 1b00 	vstr	d1, [r7]
	//Calculo
	double distance_Tra = (ptrParameterPath->parametersStraight.proy_A*position_x + ptrParameterPath->parametersStraight.proy_B*position_y
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ce2:	f7fd fca1 	bl	8000628 <__aeabi_dmul>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4614      	mov	r4, r2
 8002cec:	461d      	mov	r5, r3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cf8:	f7fd fc96 	bl	8000628 <__aeabi_dmul>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4620      	mov	r0, r4
 8002d02:	4629      	mov	r1, r5
 8002d04:	f7fd fada 	bl	80002bc <__adddf3>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
			+ ptrParameterPath->parametersStraight.proy_C)/ptrParameterPath->parametersStraight.magnitude_d;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d16:	f7fd fad1 	bl	80002bc <__adddf3>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->parametersStraight.proy_A*position_x + ptrParameterPath->parametersStraight.proy_B*position_y
 8002d28:	f7fd fda8 	bl	800087c <__aeabi_ddiv>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 8002d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d38:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d3c:	eeb0 0a47 	vmov.f32	s0, s14
 8002d40:	eef0 0a67 	vmov.f32	s1, s15
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bdb0      	pop	{r4, r5, r7, pc}
 8002d4a:	0000      	movs	r0, r0
 8002d4c:	0000      	movs	r0, r0
	...

08002d50 <calculed_ang_turn>:


//------------------------------Funciones auxiliares-----------------------------

double calculed_ang_turn(double vector_a[2], double vector_b[2])
{
 8002d50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d54:	b08a      	sub	sp, #40	; 0x28
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
    //Calculo de los diferentes elementos
    double dot = vector_a[0]*vector_b[1]-vector_b[0]*vector_b[1];
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	3308      	adds	r3, #8
 8002d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6a:	f7fd fc5d 	bl	8000628 <__aeabi_dmul>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4690      	mov	r8, r2
 8002d74:	4699      	mov	r9, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	3308      	adds	r3, #8
 8002d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d84:	f7fd fc50 	bl	8000628 <__aeabi_dmul>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4640      	mov	r0, r8
 8002d8e:	4649      	mov	r1, r9
 8002d90:	f7fd fa92 	bl	80002b8 <__aeabi_dsub>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double magvector_a = sqrt(pow(vector_a[0],2)+pow(vector_a[1],2));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	ed93 7b00 	vldr	d7, [r3]
 8002da2:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8002f20 <calculed_ang_turn+0x1d0>
 8002da6:	eeb0 0a47 	vmov.f32	s0, s14
 8002daa:	eef0 0a67 	vmov.f32	s1, s15
 8002dae:	f00e fe1d 	bl	80119ec <pow>
 8002db2:	ec59 8b10 	vmov	r8, r9, d0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3308      	adds	r3, #8
 8002dba:	ed93 7b00 	vldr	d7, [r3]
 8002dbe:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8002f20 <calculed_ang_turn+0x1d0>
 8002dc2:	eeb0 0a47 	vmov.f32	s0, s14
 8002dc6:	eef0 0a67 	vmov.f32	s1, s15
 8002dca:	f00e fe0f 	bl	80119ec <pow>
 8002dce:	ec53 2b10 	vmov	r2, r3, d0
 8002dd2:	4640      	mov	r0, r8
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	f7fd fa71 	bl	80002bc <__adddf3>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	ec43 2b17 	vmov	d7, r2, r3
 8002de2:	eeb0 0a47 	vmov.f32	s0, s14
 8002de6:	eef0 0a67 	vmov.f32	s1, s15
 8002dea:	f00e fe6f 	bl	8011acc <sqrt>
 8002dee:	ed87 0b04 	vstr	d0, [r7, #16]
    double magvector_b = sqrt(pow(vector_b[0],2)+pow(vector_b[1],2));
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	ed93 7b00 	vldr	d7, [r3]
 8002df8:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8002f20 <calculed_ang_turn+0x1d0>
 8002dfc:	eeb0 0a47 	vmov.f32	s0, s14
 8002e00:	eef0 0a67 	vmov.f32	s1, s15
 8002e04:	f00e fdf2 	bl	80119ec <pow>
 8002e08:	ec59 8b10 	vmov	r8, r9, d0
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	3308      	adds	r3, #8
 8002e10:	ed93 7b00 	vldr	d7, [r3]
 8002e14:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8002f20 <calculed_ang_turn+0x1d0>
 8002e18:	eeb0 0a47 	vmov.f32	s0, s14
 8002e1c:	eef0 0a67 	vmov.f32	s1, s15
 8002e20:	f00e fde4 	bl	80119ec <pow>
 8002e24:	ec53 2b10 	vmov	r2, r3, d0
 8002e28:	4640      	mov	r0, r8
 8002e2a:	4649      	mov	r1, r9
 8002e2c:	f7fd fa46 	bl	80002bc <__adddf3>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	ec43 2b17 	vmov	d7, r2, r3
 8002e38:	eeb0 0a47 	vmov.f32	s0, s14
 8002e3c:	eef0 0a67 	vmov.f32	s1, s15
 8002e40:	f00e fe44 	bl	8011acc <sqrt>
 8002e44:	ed87 0b02 	vstr	d0, [r7, #8]
    double ang_between_vector = acos((vector_a[0]*vector_b[0]+vector_a[1]*vector_b[1])/(magvector_b*magvector_a));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	f7fd fbe8 	bl	8000628 <__aeabi_dmul>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4690      	mov	r8, r2
 8002e5e:	4699      	mov	r9, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3308      	adds	r3, #8
 8002e64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e70:	f7fd fbda 	bl	8000628 <__aeabi_dmul>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4640      	mov	r0, r8
 8002e7a:	4649      	mov	r1, r9
 8002e7c:	f7fd fa1e 	bl	80002bc <__adddf3>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4690      	mov	r8, r2
 8002e86:	4699      	mov	r9, r3
 8002e88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e90:	f7fd fbca 	bl	8000628 <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4640      	mov	r0, r8
 8002e9a:	4649      	mov	r1, r9
 8002e9c:	f7fd fcee 	bl	800087c <__aeabi_ddiv>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	ec43 2b17 	vmov	d7, r2, r3
 8002ea8:	eeb0 0a47 	vmov.f32	s0, s14
 8002eac:	eef0 0a67 	vmov.f32	s1, s15
 8002eb0:	f00e fd66 	bl	8011980 <acos>
 8002eb4:	ed87 0b08 	vstr	d0, [r7, #32]
    //conversion a grados
    ang_between_vector = (ang_between_vector*180)/M_PI;
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <calculed_ang_turn+0x1e0>)
 8002ebe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ec2:	f7fd fbb1 	bl	8000628 <__aeabi_dmul>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4610      	mov	r0, r2
 8002ecc:	4619      	mov	r1, r3
 8002ece:	a316      	add	r3, pc, #88	; (adr r3, 8002f28 <calculed_ang_turn+0x1d8>)
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f7fd fcd2 	bl	800087c <__aeabi_ddiv>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //agregamos la direccion de giro
    if(dot<0){ ang_between_vector = -ang_between_vector;}
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002eec:	f7fd fe0e 	bl	8000b0c <__aeabi_dcmplt>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <calculed_ang_turn+0x1b2>
 8002ef6:	6a3c      	ldr	r4, [r7, #32]
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002efe:	e9c7 4508 	strd	r4, r5, [r7, #32]
    //Retornar valor
    return ang_between_vector;
 8002f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f06:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f0a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f0e:	eef0 0a67 	vmov.f32	s1, s15
 8002f12:	3728      	adds	r7, #40	; 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f1a:	bf00      	nop
 8002f1c:	f3af 8000 	nop.w
 8002f20:	00000000 	.word	0x00000000
 8002f24:	40000000 	.word	0x40000000
 8002f28:	54442d18 	.word	0x54442d18
 8002f2c:	400921fb 	.word	0x400921fb
 8002f30:	40668000 	.word	0x40668000

08002f34 <build_grid_map>:
int8_t ne_pos_x[8] = {-1, 0, 1, 1, 1, 0, -1, -1};
int8_t ne_pos_y[8] = {1, 1, 1, 0, -1, -1, -1, 0};

// Función para crear la malla de celdas
void build_grid_map(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float separation)
{  
 8002f34:	b5b0      	push	{r4, r5, r7, lr}
 8002f36:	b08e      	sub	sp, #56	; 0x38
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f42:	72fb      	strb	r3, [r7, #11]
 8002f44:	4613      	mov	r3, r2
 8002f46:	72bb      	strb	r3, [r7, #10]
    float rel_x;
    float rel_y;

    //---------------------Asignacion de informacion------------------------
    // Llenar la matriz de celdas con valores predeterminados
    for (int i = 0; i < row; i++) {
 8002f48:	2300      	movs	r3, #0
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4c:	e0fa      	b.n	8003144 <build_grid_map+0x210>
        for (int j = 0; j < colum; j++) {
 8002f4e:	2300      	movs	r3, #0
 8002f50:	633b      	str	r3, [r7, #48]	; 0x30
 8002f52:	e0ef      	b.n	8003134 <build_grid_map+0x200>
            // Asignar valores a la celda
            grid[i][j].id[0] = 'A' + j;             // Asignar un identificador simple, 'A', 'B', ...
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f5a:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8002f5e:	fb01 f202 	mul.w	r2, r1, r2
 8002f62:	68f9      	ldr	r1, [r7, #12]
 8002f64:	440a      	add	r2, r1
 8002f66:	3341      	adds	r3, #65	; 0x41
 8002f68:	b2d8      	uxtb	r0, r3
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	2158      	movs	r1, #88	; 0x58
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	4602      	mov	r2, r0
 8002f76:	701a      	strb	r2, [r3, #0]
            grid[i][j].id[1] = '0' + i;             // Asignar una cifra simple, '0', '1', '2', ...
 8002f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f7e:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8002f82:	fb01 f202 	mul.w	r2, r1, r2
 8002f86:	68f9      	ldr	r1, [r7, #12]
 8002f88:	440a      	add	r2, r1
 8002f8a:	3330      	adds	r3, #48	; 0x30
 8002f8c:	b2d8      	uxtb	r0, r3
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	2158      	movs	r1, #88	; 0x58
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	3301      	adds	r3, #1
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	701a      	strb	r2, [r3, #0]
            grid[i][j].index_row = i;               // Asignar el indice de la fila
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa0:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002fa4:	fb02 f303 	mul.w	r3, r2, r3
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	441a      	add	r2, r3
 8002fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fae:	b2d8      	uxtb	r0, r3
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	2158      	movs	r1, #88	; 0x58
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	701a      	strb	r2, [r3, #0]
            grid[i][j].index_col = j;               // Asignar el indice de la columna
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc2:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	441a      	add	r2, r3
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	b2d8      	uxtb	r0, r3
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	2158      	movs	r1, #88	; 0x58
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3303      	adds	r3, #3
 8002fde:	4602      	mov	r2, r0
 8002fe0:	701a      	strb	r2, [r3, #0]
            grid[i][j].coor_x = separation * j;     // Asignar la posición x de la celda
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	ee07 3a90 	vmov	s15, r3
 8002fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fee:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	441a      	add	r2, r3
 8002ffa:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	2158      	movs	r1, #88	; 0x58
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	3304      	adds	r3, #4
 800300e:	edc3 7a00 	vstr	s15, [r3]
            grid[i][j].coor_y = separation * i;     // Asignar la posición y de la celda
 8003012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301e:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	441a      	add	r2, r3
 800302a:	edd7 7a01 	vldr	s15, [r7, #4]
 800302e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	2158      	movs	r1, #88	; 0x58
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	3308      	adds	r3, #8
 800303e:	edc3 7a00 	vstr	s15, [r3]
            grid[i][j].status = 0;                  // Inicializar el estado de la celda;             
 8003042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003044:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	441a      	add	r2, r3
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	2158      	movs	r1, #88	; 0x58
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3354      	adds	r3, #84	; 0x54
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
            // Asignacion de vecinos a la celda actual
            for (uint8_t k = 0; k < 8; k++) {
 8003060:	2300      	movs	r3, #0
 8003062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003066:	e05e      	b.n	8003126 <build_grid_map+0x1f2>
                int8_t index_row_ne = i + ne_pos_x[k]; 
 8003068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800306c:	4a9a      	ldr	r2, [pc, #616]	; (80032d8 <build_grid_map+0x3a4>)
 800306e:	56d3      	ldrsb	r3, [r2, r3]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	b2db      	uxtb	r3, r3
 8003076:	4413      	add	r3, r2
 8003078:	b2db      	uxtb	r3, r3
 800307a:	75fb      	strb	r3, [r7, #23]
                int8_t index_colum_ne = j + ne_pos_y[k]; 
 800307c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003080:	4a96      	ldr	r2, [pc, #600]	; (80032dc <build_grid_map+0x3a8>)
 8003082:	56d3      	ldrsb	r3, [r2, r3]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	b2db      	uxtb	r3, r3
 800308a:	4413      	add	r3, r2
 800308c:	b2db      	uxtb	r3, r3
 800308e:	75bb      	strb	r3, [r7, #22]
                // Se evalua si el indice esta dentro de la malla
                if (index_row_ne >= 0 && index_row_ne < row && index_colum_ne >= 0 && index_colum_ne < colum) 
 8003090:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003094:	2b00      	cmp	r3, #0
 8003096:	db2e      	blt.n	80030f6 <build_grid_map+0x1c2>
 8003098:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800309c:	7afb      	ldrb	r3, [r7, #11]
 800309e:	429a      	cmp	r2, r3
 80030a0:	da29      	bge.n	80030f6 <build_grid_map+0x1c2>
 80030a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db25      	blt.n	80030f6 <build_grid_map+0x1c2>
 80030aa:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80030ae:	7abb      	ldrb	r3, [r7, #10]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	da20      	bge.n	80030f6 <build_grid_map+0x1c2>
                {
                    grid[i][j].neighbors.ptrCellMap[k] = &grid[index_row_ne][index_colum_ne];
 80030b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030b8:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80030bc:	fb02 f303 	mul.w	r3, r2, r3
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	18d0      	adds	r0, r2, r3
 80030c4:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80030c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ca:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	68f9      	ldr	r1, [r7, #12]
 80030d4:	4419      	add	r1, r3
 80030d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030da:	2458      	movs	r4, #88	; 0x58
 80030dc:	fb04 f202 	mul.w	r2, r4, r2
 80030e0:	4402      	add	r2, r0
 80030e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030e4:	2416      	movs	r4, #22
 80030e6:	fb04 f000 	mul.w	r0, r4, r0
 80030ea:	4403      	add	r3, r0
 80030ec:	3302      	adds	r3, #2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	e012      	b.n	800311c <build_grid_map+0x1e8>
                } 
                else 
                {
                    grid[i][j].neighbors.ptrCellMap[k] = NULL;                    
 80030f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f8:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80030fc:	fb02 f303 	mul.w	r3, r2, r3
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	441a      	add	r2, r3
 8003104:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800310a:	2016      	movs	r0, #22
 800310c:	fb00 f101 	mul.w	r1, r0, r1
 8003110:	440b      	add	r3, r1
 8003112:	3302      	adds	r3, #2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	2200      	movs	r2, #0
 800311a:	605a      	str	r2, [r3, #4]
            for (uint8_t k = 0; k < 8; k++) {
 800311c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003120:	3301      	adds	r3, #1
 8003122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800312a:	2b07      	cmp	r3, #7
 800312c:	d99c      	bls.n	8003068 <build_grid_map+0x134>
        for (int j = 0; j < colum; j++) {
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	3301      	adds	r3, #1
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
 8003134:	7abb      	ldrb	r3, [r7, #10]
 8003136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003138:	429a      	cmp	r2, r3
 800313a:	f6ff af0b 	blt.w	8002f54 <build_grid_map+0x20>
    for (int i = 0; i < row; i++) {
 800313e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003140:	3301      	adds	r3, #1
 8003142:	637b      	str	r3, [r7, #52]	; 0x34
 8003144:	7afb      	ldrb	r3, [r7, #11]
 8003146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003148:	429a      	cmp	r2, r3
 800314a:	f6ff af00 	blt.w	8002f4e <build_grid_map+0x1a>
        }
    }
    
    //------------------Distancias entre celdas------------------------
    //Se calcula la distancia de cada celda vecina
    for (int i = 0; i < row; i++) {
 800314e:	2300      	movs	r3, #0
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28
 8003152:	e0b6      	b.n	80032c2 <build_grid_map+0x38e>
        for (int j = 0; j < colum; j++) {
 8003154:	2300      	movs	r3, #0
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
 8003158:	e0ab      	b.n	80032b2 <build_grid_map+0x37e>
            for (uint8_t k = 0; k < 8; k++)
 800315a:	2300      	movs	r3, #0
 800315c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003160:	e09f      	b.n	80032a2 <build_grid_map+0x36e>
            {    
                if(grid[i][j].neighbors.ptrCellMap[k] != NULL)
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003168:	fb02 f303 	mul.w	r3, r2, r3
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	441a      	add	r2, r3
 8003170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003176:	2016      	movs	r0, #22
 8003178:	fb00 f101 	mul.w	r1, r0, r1
 800317c:	440b      	add	r3, r1
 800317e:	3302      	adds	r3, #2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d072      	beq.n	8003270 <build_grid_map+0x33c>
                {
                    //Calculo vector relativo
                    rel_x = grid[i][j].neighbors.ptrCellMap[k]->coor_x - grid[i][j].coor_x;
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	441a      	add	r2, r3
 8003198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800319c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800319e:	2016      	movs	r0, #22
 80031a0:	fb00 f101 	mul.w	r1, r0, r1
 80031a4:	440b      	add	r3, r1
 80031a6:	3302      	adds	r3, #2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80031b8:	fb02 f303 	mul.w	r3, r2, r3
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	441a      	add	r2, r3
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	2158      	movs	r1, #88	; 0x58
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	3304      	adds	r3, #4
 80031cc:	edd3 7a00 	vldr	s15, [r3]
 80031d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d4:	edc7 7a07 	vstr	s15, [r7, #28]
                    rel_y = grid[i][j].neighbors.ptrCellMap[k]->coor_y - grid[i][j].coor_y;
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	441a      	add	r2, r3
 80031e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ec:	2016      	movs	r0, #22
 80031ee:	fb00 f101 	mul.w	r1, r0, r1
 80031f2:	440b      	add	r3, r1
 80031f4:	3302      	adds	r3, #2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	441a      	add	r2, r3
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	2158      	movs	r1, #88	; 0x58
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3308      	adds	r3, #8
 800321a:	edd3 7a00 	vldr	s15, [r3]
 800321e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003222:	edc7 7a06 	vstr	s15, [r7, #24]
                    //Ingresamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = sqrtf(rel_x * rel_x + rel_y * rel_y);
 8003226:	edd7 7a07 	vldr	s15, [r7, #28]
 800322a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800322e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003232:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	18d4      	adds	r4, r2, r3
 8003248:	f897 5023 	ldrb.w	r5, [r7, #35]	; 0x23
 800324c:	eeb0 0a67 	vmov.f32	s0, s15
 8003250:	f00e fc68 	bl	8011b24 <sqrtf>
 8003254:	eef0 7a40 	vmov.f32	s15, s0
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	2216      	movs	r2, #22
 800325c:	fb02 f303 	mul.w	r3, r2, r3
 8003260:	442b      	add	r3, r5
 8003262:	330a      	adds	r3, #10
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4423      	add	r3, r4
 8003268:	3304      	adds	r3, #4
 800326a:	edc3 7a00 	vstr	s15, [r3]
 800326e:	e013      	b.n	8003298 <build_grid_map+0x364>
                }
                else
                {
                    //Ingreamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = -1.0f;
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	441a      	add	r2, r3
 800327e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003282:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003284:	2016      	movs	r0, #22
 8003286:	fb00 f101 	mul.w	r1, r0, r1
 800328a:	440b      	add	r3, r1
 800328c:	330a      	adds	r3, #10
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	3304      	adds	r3, #4
 8003294:	4a12      	ldr	r2, [pc, #72]	; (80032e0 <build_grid_map+0x3ac>)
 8003296:	601a      	str	r2, [r3, #0]
            for (uint8_t k = 0; k < 8; k++)
 8003298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800329c:	3301      	adds	r3, #1
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032a6:	2b07      	cmp	r3, #7
 80032a8:	f67f af5b 	bls.w	8003162 <build_grid_map+0x22e>
        for (int j = 0; j < colum; j++) {
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	3301      	adds	r3, #1
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
 80032b2:	7abb      	ldrb	r3, [r7, #10]
 80032b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b6:	429a      	cmp	r2, r3
 80032b8:	f6ff af4f 	blt.w	800315a <build_grid_map+0x226>
    for (int i = 0; i < row; i++) {
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	3301      	adds	r3, #1
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c2:	7afb      	ldrb	r3, [r7, #11]
 80032c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032c6:	429a      	cmp	r2, r3
 80032c8:	f6ff af44 	blt.w	8003154 <build_grid_map+0x220>
                }                
            }
        }
    }
}
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
 80032d0:	3738      	adds	r7, #56	; 0x38
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bdb0      	pop	{r4, r5, r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000000 	.word	0x20000000
 80032dc:	20000008 	.word	0x20000008
 80032e0:	bf800000 	.word	0xbf800000
 80032e4:	00000000 	.word	0x00000000

080032e8 <main>:
//Variables adicionales aplicacion
state_t next_state = sMenuOperation;


int main(void)
{
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b099      	sub	sp, #100	; 0x64
 80032ec:	af02      	add	r7, sp, #8
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 80032ee:	2364      	movs	r3, #100	; 0x64
 80032f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	configPLL(clock);
 80032f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80032f8:	4618      	mov	r0, r3
 80032fa:	f008 f8d1 	bl	800b4a0 <configPLL>
	//Configuracion inicial del sistema
	initSystem();
 80032fe:	f000 fb37 	bl	8003970 <initSystem>
	//Activamos la unidad de punto flotante (FPU)
	SCB->CPACR    |= (0xF << 20);
 8003302:	4ba3      	ldr	r3, [pc, #652]	; (8003590 <main+0x2a8>)
 8003304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003308:	4aa1      	ldr	r2, [pc, #644]	; (8003590 <main+0x2a8>)
 800330a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800330e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Activamos del contador de Ticks
	DWT->CTRL    |= (1 << 0);
 8003312:	4ba0      	ldr	r3, [pc, #640]	; (8003594 <main+0x2ac>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a9f      	ldr	r2, [pc, #636]	; (8003594 <main+0x2ac>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6013      	str	r3, [r2, #0]
	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 800331e:	2101      	movs	r1, #1
 8003320:	489d      	ldr	r0, [pc, #628]	; (8003598 <main+0x2b0>)
 8003322:	f007 fe73 	bl	800b00c <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8003326:	2101      	movs	r1, #1
 8003328:	489c      	ldr	r0, [pc, #624]	; (800359c <main+0x2b4>)
 800332a:	f007 fe6f 	bl	800b00c <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 800332e:	2101      	movs	r1, #1
 8003330:	489b      	ldr	r0, [pc, #620]	; (80035a0 <main+0x2b8>)
 8003332:	f007 fe6b 	bl	800b00c <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8003336:	2101      	movs	r1, #1
 8003338:	489a      	ldr	r0, [pc, #616]	; (80035a4 <main+0x2bc>)
 800333a:	f007 fe67 	bl	800b00c <GPIO_writePin>
	int_Config_Motor();
 800333e:	f000 fd03 	bl	8003d48 <int_Config_Motor>
	//Calculo inicial de parametro
	cm_L = ((M_PI*DL)/(100*Ce));  //[mm/cuentas]
 8003342:	4b99      	ldr	r3, [pc, #612]	; (80035a8 <main+0x2c0>)
 8003344:	4a99      	ldr	r2, [pc, #612]	; (80035ac <main+0x2c4>)
 8003346:	601a      	str	r2, [r3, #0]
	cm_R =	((M_PI*DR)/(100*Ce));  //[mm/cuentas]
 8003348:	4b99      	ldr	r3, [pc, #612]	; (80035b0 <main+0x2c8>)
 800334a:	4a9a      	ldr	r2, [pc, #616]	; (80035b4 <main+0x2cc>)
 800334c:	601a      	str	r2, [r3, #0]
	//Calculamos el setpoint
	velSetPoint = (0.00169*duttySetPoint + 0.0619);
 800334e:	4b9a      	ldr	r3, [pc, #616]	; (80035b8 <main+0x2d0>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f8fe 	bl	8000554 <__aeabi_i2d>
 8003358:	a389      	add	r3, pc, #548	; (adr r3, 8003580 <main+0x298>)
 800335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335e:	f7fd f963 	bl	8000628 <__aeabi_dmul>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	a387      	add	r3, pc, #540	; (adr r3, 8003588 <main+0x2a0>)
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	f7fc ffa4 	bl	80002bc <__adddf3>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f7fd fc4c 	bl	8000c18 <__aeabi_d2f>
 8003380:	4603      	mov	r3, r0
 8003382:	4a8e      	ldr	r2, [pc, #568]	; (80035bc <main+0x2d4>)
 8003384:	6013      	str	r3, [r2, #0]
	//Calculo periodo de accion
	time_accion = period_sampling*timeAction_TIMER_Sampling;
 8003386:	4b8e      	ldr	r3, [pc, #568]	; (80035c0 <main+0x2d8>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	b2da      	uxtb	r2, r3
 800338c:	4b8d      	ldr	r3, [pc, #564]	; (80035c4 <main+0x2dc>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	fb12 f303 	smulbb	r3, r2, r3
 8003394:	b2da      	uxtb	r2, r3
 8003396:	4b8c      	ldr	r3, [pc, #560]	; (80035c8 <main+0x2e0>)
 8003398:	701a      	strb	r2, [r3, #0]
	//--------------------------Configuramos inicia el MPU----------------------
	//Configuracion MPU
	int_MPU();
 800339a:	f000 fcbb 	bl	8003d14 <int_MPU>
	//Calibracion del eje Z del giroscopio
	gyro_offset = calibrationMPU(&handler_MPUAccel_MPU6050, &handler_TIMER_Delay, &countingTimer, CAL_GYRO_Z);
 800339e:	2305      	movs	r3, #5
 80033a0:	4a8a      	ldr	r2, [pc, #552]	; (80035cc <main+0x2e4>)
 80033a2:	498b      	ldr	r1, [pc, #556]	; (80035d0 <main+0x2e8>)
 80033a4:	488b      	ldr	r0, [pc, #556]	; (80035d4 <main+0x2ec>)
 80033a6:	f7ff f90f 	bl	80025c8 <calibrationMPU>
 80033aa:	eef0 7a40 	vmov.f32	s15, s0
 80033ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033b2:	ee17 3a90 	vmov	r3, s15
 80033b6:	b21a      	sxth	r2, r3
 80033b8:	4b87      	ldr	r3, [pc, #540]	; (80035d8 <main+0x2f0>)
 80033ba:	801a      	strh	r2, [r3, #0]

	//-----------------------Inicio cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//-------------------Configuracion Task--------------
	//Tarea de mediciones de la linea recta
	xReturned = xTaskCreate(
 80033bc:	4b87      	ldr	r3, [pc, #540]	; (80035dc <main+0x2f4>)
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	2303      	movs	r3, #3
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2300      	movs	r3, #0
 80033c6:	22c8      	movs	r2, #200	; 0xc8
 80033c8:	4985      	ldr	r1, [pc, #532]	; (80035e0 <main+0x2f8>)
 80033ca:	4886      	ldr	r0, [pc, #536]	; (80035e4 <main+0x2fc>)
 80033cc:	f004 f84a 	bl	8007464 <xTaskCreate>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4a85      	ldr	r2, [pc, #532]	; (80035e8 <main+0x300>)
 80033d4:	6013      	str	r3, [r2, #0]
	                    "Task_Measure",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    3,/* Priority at which the task is created. */
	                    &xHandleTask_Measure);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80033d6:	4b84      	ldr	r3, [pc, #528]	; (80035e8 <main+0x300>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d00a      	beq.n	80033f4 <main+0x10c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	653b      	str	r3, [r7, #80]	; 0x50
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80033f0:	bf00      	nop
 80033f2:	e7fe      	b.n	80033f2 <main+0x10a>
	//Tarea de la aplicaciones de las medicciones PID de la linea recta
	xReturned = xTaskCreate(
 80033f4:	4b7d      	ldr	r3, [pc, #500]	; (80035ec <main+0x304>)
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	2303      	movs	r3, #3
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2300      	movs	r3, #0
 80033fe:	22c8      	movs	r2, #200	; 0xc8
 8003400:	497b      	ldr	r1, [pc, #492]	; (80035f0 <main+0x308>)
 8003402:	487c      	ldr	r0, [pc, #496]	; (80035f4 <main+0x30c>)
 8003404:	f004 f82e 	bl	8007464 <xTaskCreate>
 8003408:	4603      	mov	r3, r0
 800340a:	4a77      	ldr	r2, [pc, #476]	; (80035e8 <main+0x300>)
 800340c:	6013      	str	r3, [r2, #0]
	                    "Task_Line_PID",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    3,/* Priority at which the task is created. */
	                    &xHandleTask_Line_PID);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800340e:	4b76      	ldr	r3, [pc, #472]	; (80035e8 <main+0x300>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d00a      	beq.n	800342c <main+0x144>
        __asm volatile
 8003416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341a:	f383 8811 	msr	BASEPRI, r3
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
 8003428:	bf00      	nop
 800342a:	e7fe      	b.n	800342a <main+0x142>
	//Tarea que verifica si se llego a la condiccion de parada
	xReturned = xTaskCreate(
 800342c:	4b72      	ldr	r3, [pc, #456]	; (80035f8 <main+0x310>)
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	2303      	movs	r3, #3
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2300      	movs	r3, #0
 8003436:	22c8      	movs	r2, #200	; 0xc8
 8003438:	4970      	ldr	r1, [pc, #448]	; (80035fc <main+0x314>)
 800343a:	4871      	ldr	r0, [pc, #452]	; (8003600 <main+0x318>)
 800343c:	f004 f812 	bl	8007464 <xTaskCreate>
 8003440:	4603      	mov	r3, r0
 8003442:	4a69      	ldr	r2, [pc, #420]	; (80035e8 <main+0x300>)
 8003444:	6013      	str	r3, [r2, #0]
	                    "Task_Stop_Execute",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    3,/* Priority at which the task is created. */
	                    &xHandleTask_Stop_Execute);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8003446:	4b68      	ldr	r3, [pc, #416]	; (80035e8 <main+0x300>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d00a      	beq.n	8003464 <main+0x17c>
        __asm volatile
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	64bb      	str	r3, [r7, #72]	; 0x48
    }
 8003460:	bf00      	nop
 8003462:	e7fe      	b.n	8003462 <main+0x17a>

	//Tarea comandos
	xReturned = xTaskCreate(
 8003464:	4b67      	ldr	r3, [pc, #412]	; (8003604 <main+0x31c>)
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	2304      	movs	r3, #4
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	2300      	movs	r3, #0
 800346e:	22c8      	movs	r2, #200	; 0xc8
 8003470:	4965      	ldr	r1, [pc, #404]	; (8003608 <main+0x320>)
 8003472:	4866      	ldr	r0, [pc, #408]	; (800360c <main+0x324>)
 8003474:	f003 fff6 	bl	8007464 <xTaskCreate>
 8003478:	4603      	mov	r3, r0
 800347a:	4a5b      	ldr	r2, [pc, #364]	; (80035e8 <main+0x300>)
 800347c:	6013      	str	r3, [r2, #0]
	                    "Task_Commands",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    4,/* Priority at which the task is created. */
	                    &xHandleTask_Commands);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800347e:	4b5a      	ldr	r3, [pc, #360]	; (80035e8 <main+0x300>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d00a      	beq.n	800349c <main+0x1b4>
        __asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	647b      	str	r3, [r7, #68]	; 0x44
    }
 8003498:	bf00      	nop
 800349a:	e7fe      	b.n	800349a <main+0x1b2>
	//Tarea Print
	xReturned = xTaskCreate(
 800349c:	4b5c      	ldr	r3, [pc, #368]	; (8003610 <main+0x328>)
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	2304      	movs	r3, #4
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2300      	movs	r3, #0
 80034a6:	22c8      	movs	r2, #200	; 0xc8
 80034a8:	495a      	ldr	r1, [pc, #360]	; (8003614 <main+0x32c>)
 80034aa:	485b      	ldr	r0, [pc, #364]	; (8003618 <main+0x330>)
 80034ac:	f003 ffda 	bl	8007464 <xTaskCreate>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4a4d      	ldr	r2, [pc, #308]	; (80035e8 <main+0x300>)
 80034b4:	6013      	str	r3, [r2, #0]
	                    "Task_Print",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    4,/* Priority at which the task is created. */
	                    &xHandleTask_Print);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80034b6:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <main+0x300>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d00a      	beq.n	80034d4 <main+0x1ec>
        __asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	643b      	str	r3, [r7, #64]	; 0x40
    }
 80034d0:	bf00      	nop
 80034d2:	e7fe      	b.n	80034d2 <main+0x1ea>

	//Tarea Menu
	xReturned = xTaskCreate(
 80034d4:	4b51      	ldr	r3, [pc, #324]	; (800361c <main+0x334>)
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	2302      	movs	r3, #2
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2300      	movs	r3, #0
 80034de:	22c8      	movs	r2, #200	; 0xc8
 80034e0:	494f      	ldr	r1, [pc, #316]	; (8003620 <main+0x338>)
 80034e2:	4850      	ldr	r0, [pc, #320]	; (8003624 <main+0x33c>)
 80034e4:	f003 ffbe 	bl	8007464 <xTaskCreate>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4a3f      	ldr	r2, [pc, #252]	; (80035e8 <main+0x300>)
 80034ec:	6013      	str	r3, [r2, #0]
	                    "Task_Menu",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Menu);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80034ee:	4b3e      	ldr	r3, [pc, #248]	; (80035e8 <main+0x300>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d00a      	beq.n	800350c <main+0x224>
        __asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
 8003508:	bf00      	nop
 800350a:	e7fe      	b.n	800350a <main+0x222>
	//Tarea execute Operation
	xReturned = xTaskCreate(
 800350c:	4b46      	ldr	r3, [pc, #280]	; (8003628 <main+0x340>)
 800350e:	9301      	str	r3, [sp, #4]
 8003510:	2302      	movs	r3, #2
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	2300      	movs	r3, #0
 8003516:	22c8      	movs	r2, #200	; 0xc8
 8003518:	4944      	ldr	r1, [pc, #272]	; (800362c <main+0x344>)
 800351a:	4845      	ldr	r0, [pc, #276]	; (8003630 <main+0x348>)
 800351c:	f003 ffa2 	bl	8007464 <xTaskCreate>
 8003520:	4603      	mov	r3, r0
 8003522:	4a31      	ldr	r2, [pc, #196]	; (80035e8 <main+0x300>)
 8003524:	6013      	str	r3, [r2, #0]
	                    "Task_Execute_Operation",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Execute_Operation);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8003526:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <main+0x300>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d00a      	beq.n	8003544 <main+0x25c>
        __asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	63bb      	str	r3, [r7, #56]	; 0x38
    }
 8003540:	bf00      	nop
 8003542:	e7fe      	b.n	8003542 <main+0x25a>
	//Tarea Line
	xReturned = xTaskCreate(
 8003544:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <main+0x34c>)
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	2302      	movs	r3, #2
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2300      	movs	r3, #0
 800354e:	22c8      	movs	r2, #200	; 0xc8
 8003550:	4939      	ldr	r1, [pc, #228]	; (8003638 <main+0x350>)
 8003552:	483a      	ldr	r0, [pc, #232]	; (800363c <main+0x354>)
 8003554:	f003 ff86 	bl	8007464 <xTaskCreate>
 8003558:	4603      	mov	r3, r0
 800355a:	4a23      	ldr	r2, [pc, #140]	; (80035e8 <main+0x300>)
 800355c:	6013      	str	r3, [r2, #0]
	                    "Task_Line",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Line);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800355e:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <main+0x300>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d06c      	beq.n	8003640 <main+0x358>
        __asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
    }
 8003578:	bf00      	nop
 800357a:	e7fe      	b.n	800357a <main+0x292>
 800357c:	f3af 8000 	nop.w
 8003580:	aebc408e 	.word	0xaebc408e
 8003584:	3f5bb05f 	.word	0x3f5bb05f
 8003588:	573eab36 	.word	0x573eab36
 800358c:	3fafb15b 	.word	0x3fafb15b
 8003590:	e000ed00 	.word	0xe000ed00
 8003594:	e0001000 	.word	0xe0001000
 8003598:	200002b8 	.word	0x200002b8
 800359c:	2000032c 	.word	0x2000032c
 80035a0:	200002c4 	.word	0x200002c4
 80035a4:	20000338 	.word	0x20000338
 80035a8:	200003cc 	.word	0x200003cc
 80035ac:	40105fa7 	.word	0x40105fa7
 80035b0:	200003d0 	.word	0x200003d0
 80035b4:	400facee 	.word	0x400facee
 80035b8:	20000018 	.word	0x20000018
 80035bc:	200003c8 	.word	0x200003c8
 80035c0:	20000012 	.word	0x20000012
 80035c4:	20000011 	.word	0x20000011
 80035c8:	200003f0 	.word	0x200003f0
 80035cc:	200003c4 	.word	0x200003c4
 80035d0:	200003b4 	.word	0x200003b4
 80035d4:	200002a4 	.word	0x200002a4
 80035d8:	200003c6 	.word	0x200003c6
 80035dc:	2000040c 	.word	0x2000040c
 80035e0:	08014140 	.word	0x08014140
 80035e4:	08004941 	.word	0x08004941
 80035e8:	200003f4 	.word	0x200003f4
 80035ec:	20000410 	.word	0x20000410
 80035f0:	08014150 	.word	0x08014150
 80035f4:	08004c95 	.word	0x08004c95
 80035f8:	2000042c 	.word	0x2000042c
 80035fc:	08014160 	.word	0x08014160
 8003600:	08004819 	.word	0x08004819
 8003604:	20000400 	.word	0x20000400
 8003608:	08014174 	.word	0x08014174
 800360c:	08003fbd 	.word	0x08003fbd
 8003610:	200003fc 	.word	0x200003fc
 8003614:	08014184 	.word	0x08014184
 8003618:	08003f8d 	.word	0x08003f8d
 800361c:	200003f8 	.word	0x200003f8
 8003620:	08014190 	.word	0x08014190
 8003624:	08004001 	.word	0x08004001
 8003628:	20000428 	.word	0x20000428
 800362c:	0801419c 	.word	0x0801419c
 8003630:	08004181 	.word	0x08004181
 8003634:	20000404 	.word	0x20000404
 8003638:	080141b4 	.word	0x080141b4
 800363c:	080042ad 	.word	0x080042ad
	//Tarea turn itself
	xReturned = xTaskCreate(
 8003640:	4b99      	ldr	r3, [pc, #612]	; (80038a8 <main+0x5c0>)
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	2302      	movs	r3, #2
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2300      	movs	r3, #0
 800364a:	22c8      	movs	r2, #200	; 0xc8
 800364c:	4997      	ldr	r1, [pc, #604]	; (80038ac <main+0x5c4>)
 800364e:	4898      	ldr	r0, [pc, #608]	; (80038b0 <main+0x5c8>)
 8003650:	f003 ff08 	bl	8007464 <xTaskCreate>
 8003654:	4603      	mov	r3, r0
 8003656:	4a97      	ldr	r2, [pc, #604]	; (80038b4 <main+0x5cc>)
 8003658:	6013      	str	r3, [r2, #0]
	                    "Task_Turn",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Turn_itself);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800365a:	4b96      	ldr	r3, [pc, #600]	; (80038b4 <main+0x5cc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d00a      	beq.n	8003678 <main+0x390>
        __asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	633b      	str	r3, [r7, #48]	; 0x30
    }
 8003674:	bf00      	nop
 8003676:	e7fe      	b.n	8003676 <main+0x38e>
	//Tarea Square
	xReturned = xTaskCreate(
 8003678:	4b8f      	ldr	r3, [pc, #572]	; (80038b8 <main+0x5d0>)
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	2302      	movs	r3, #2
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2300      	movs	r3, #0
 8003682:	22c8      	movs	r2, #200	; 0xc8
 8003684:	498d      	ldr	r1, [pc, #564]	; (80038bc <main+0x5d4>)
 8003686:	488e      	ldr	r0, [pc, #568]	; (80038c0 <main+0x5d8>)
 8003688:	f003 feec 	bl	8007464 <xTaskCreate>
 800368c:	4603      	mov	r3, r0
 800368e:	4a89      	ldr	r2, [pc, #548]	; (80038b4 <main+0x5cc>)
 8003690:	6013      	str	r3, [r2, #0]
	                    "Task_Square",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Square);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8003692:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <main+0x5cc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d00a      	beq.n	80036b0 <main+0x3c8>
        __asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80036ac:	bf00      	nop
 80036ae:	e7fe      	b.n	80036ae <main+0x3c6>
	//Tarea execute Operation
	xReturned = xTaskCreate(
 80036b0:	4b84      	ldr	r3, [pc, #528]	; (80038c4 <main+0x5dc>)
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	2302      	movs	r3, #2
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	2300      	movs	r3, #0
 80036ba:	22c8      	movs	r2, #200	; 0xc8
 80036bc:	4982      	ldr	r1, [pc, #520]	; (80038c8 <main+0x5e0>)
 80036be:	4883      	ldr	r0, [pc, #524]	; (80038cc <main+0x5e4>)
 80036c0:	f003 fed0 	bl	8007464 <xTaskCreate>
 80036c4:	4603      	mov	r3, r0
 80036c6:	4a7b      	ldr	r2, [pc, #492]	; (80038b4 <main+0x5cc>)
 80036c8:	6013      	str	r3, [r2, #0]
	                    "Task_Apply_Astar",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Apply_Astar);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80036ca:	4b7a      	ldr	r3, [pc, #488]	; (80038b4 <main+0x5cc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d00a      	beq.n	80036e8 <main+0x400>
        __asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80036e4:	bf00      	nop
 80036e6:	e7fe      	b.n	80036e6 <main+0x3fe>
	//Tarea execute Operation
	xReturned = xTaskCreate(
 80036e8:	4b79      	ldr	r3, [pc, #484]	; (80038d0 <main+0x5e8>)
 80036ea:	9301      	str	r3, [sp, #4]
 80036ec:	2302      	movs	r3, #2
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2300      	movs	r3, #0
 80036f2:	22c8      	movs	r2, #200	; 0xc8
 80036f4:	4977      	ldr	r1, [pc, #476]	; (80038d4 <main+0x5ec>)
 80036f6:	4878      	ldr	r0, [pc, #480]	; (80038d8 <main+0x5f0>)
 80036f8:	f003 feb4 	bl	8007464 <xTaskCreate>
 80036fc:	4603      	mov	r3, r0
 80036fe:	4a6d      	ldr	r2, [pc, #436]	; (80038b4 <main+0x5cc>)
 8003700:	6013      	str	r3, [r2, #0]
	                    "Task_Separate_GripMap",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Separate_GridMap);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8003702:	4b6c      	ldr	r3, [pc, #432]	; (80038b4 <main+0x5cc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d00a      	beq.n	8003720 <main+0x438>
        __asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800371c:	bf00      	nop
 800371e:	e7fe      	b.n	800371e <main+0x436>
	//Tarea Execute_AStar
	xReturned = xTaskCreate(
 8003720:	4b6e      	ldr	r3, [pc, #440]	; (80038dc <main+0x5f4>)
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	2302      	movs	r3, #2
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	2300      	movs	r3, #0
 800372a:	22c8      	movs	r2, #200	; 0xc8
 800372c:	496c      	ldr	r1, [pc, #432]	; (80038e0 <main+0x5f8>)
 800372e:	486d      	ldr	r0, [pc, #436]	; (80038e4 <main+0x5fc>)
 8003730:	f003 fe98 	bl	8007464 <xTaskCreate>
 8003734:	4603      	mov	r3, r0
 8003736:	4a5f      	ldr	r2, [pc, #380]	; (80038b4 <main+0x5cc>)
 8003738:	6013      	str	r3, [r2, #0]
	                    "Task_Execute_AStar",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Execute_Astar);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800373a:	4b5e      	ldr	r3, [pc, #376]	; (80038b4 <main+0x5cc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d00a      	beq.n	8003758 <main+0x470>
        __asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	623b      	str	r3, [r7, #32]
    }
 8003754:	bf00      	nop
 8003756:	e7fe      	b.n	8003756 <main+0x46e>
	//Tarea Stop
	xReturned = xTaskCreate(
 8003758:	4b63      	ldr	r3, [pc, #396]	; (80038e8 <main+0x600>)
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	2302      	movs	r3, #2
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2300      	movs	r3, #0
 8003762:	22c8      	movs	r2, #200	; 0xc8
 8003764:	4961      	ldr	r1, [pc, #388]	; (80038ec <main+0x604>)
 8003766:	4862      	ldr	r0, [pc, #392]	; (80038f0 <main+0x608>)
 8003768:	f003 fe7c 	bl	8007464 <xTaskCreate>
 800376c:	4603      	mov	r3, r0
 800376e:	4a51      	ldr	r2, [pc, #324]	; (80038b4 <main+0x5cc>)
 8003770:	6013      	str	r3, [r2, #0]
	                    "Task_Stop",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Stop);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8003772:	4b50      	ldr	r3, [pc, #320]	; (80038b4 <main+0x5cc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d00a      	beq.n	8003790 <main+0x4a8>
        __asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	61fb      	str	r3, [r7, #28]
    }
 800378c:	bf00      	nop
 800378e:	e7fe      	b.n	800378e <main+0x4a6>

	//-------------------Configuracion Queue--------------
	//Cola para recibir datos por consola
	xQueue_InputData = xQueueCreate(500, sizeof(char ) );
 8003790:	2200      	movs	r2, #0
 8003792:	2101      	movs	r1, #1
 8003794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003798:	f003 f836 	bl	8006808 <xQueueGenericCreate>
 800379c:	4603      	mov	r3, r0
 800379e:	4a55      	ldr	r2, [pc, #340]	; (80038f4 <main+0x60c>)
 80037a0:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_InputData != NULL);
 80037a2:	4b54      	ldr	r3, [pc, #336]	; (80038f4 <main+0x60c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <main+0x4d8>
        __asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	61bb      	str	r3, [r7, #24]
    }
 80037bc:	bf00      	nop
 80037be:	e7fe      	b.n	80037be <main+0x4d6>
	//Cola para recibir datos por consola
	xQueue_StructCommand = xQueueCreate(10, sizeof(command_t));
 80037c0:	2200      	movs	r2, #0
 80037c2:	2114      	movs	r1, #20
 80037c4:	200a      	movs	r0, #10
 80037c6:	f003 f81f 	bl	8006808 <xQueueGenericCreate>
 80037ca:	4603      	mov	r3, r0
 80037cc:	4a4a      	ldr	r2, [pc, #296]	; (80038f8 <main+0x610>)
 80037ce:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_StructCommand != NULL);
 80037d0:	4b49      	ldr	r3, [pc, #292]	; (80038f8 <main+0x610>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <main+0x506>
        __asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	617b      	str	r3, [r7, #20]
    }
 80037ea:	bf00      	nop
 80037ec:	e7fe      	b.n	80037ec <main+0x504>
	//cola para enviar datos por consola
	xQueue_Print = xQueueCreate(10, sizeof(char *) );
 80037ee:	2200      	movs	r2, #0
 80037f0:	2104      	movs	r1, #4
 80037f2:	200a      	movs	r0, #10
 80037f4:	f003 f808 	bl	8006808 <xQueueGenericCreate>
 80037f8:	4603      	mov	r3, r0
 80037fa:	4a40      	ldr	r2, [pc, #256]	; (80038fc <main+0x614>)
 80037fc:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_Print != NULL);
 80037fe:	4b3f      	ldr	r3, [pc, #252]	; (80038fc <main+0x614>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <main+0x534>
        __asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	613b      	str	r3, [r7, #16]
    }
 8003818:	bf00      	nop
 800381a:	e7fe      	b.n	800381a <main+0x532>
	//Buzon para definir el modo de operacion
	xMailbox_Mode = xQueueCreate(1, sizeof( uint8_t ));
 800381c:	2200      	movs	r2, #0
 800381e:	2101      	movs	r1, #1
 8003820:	2001      	movs	r0, #1
 8003822:	f002 fff1 	bl	8006808 <xQueueGenericCreate>
 8003826:	4603      	mov	r3, r0
 8003828:	4a35      	ldr	r2, [pc, #212]	; (8003900 <main+0x618>)
 800382a:	6013      	str	r3, [r2, #0]
	configASSERT(xMailbox_Mode != NULL);
 800382c:	4b34      	ldr	r3, [pc, #208]	; (8003900 <main+0x618>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10a      	bne.n	800384a <main+0x562>
        __asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	60fb      	str	r3, [r7, #12]
    }
 8003846:	bf00      	nop
 8003848:	e7fe      	b.n	8003848 <main+0x560>
	//Buzon para pasar el string del grid map
	xMailbox_Path = xQueueCreate(1, sizeof(file_cell_t * ));
 800384a:	2200      	movs	r2, #0
 800384c:	2104      	movs	r1, #4
 800384e:	2001      	movs	r0, #1
 8003850:	f002 ffda 	bl	8006808 <xQueueGenericCreate>
 8003854:	4603      	mov	r3, r0
 8003856:	4a2b      	ldr	r2, [pc, #172]	; (8003904 <main+0x61c>)
 8003858:	6013      	str	r3, [r2, #0]
	configASSERT(xMailbox_Path  != NULL);
 800385a:	4b2a      	ldr	r3, [pc, #168]	; (8003904 <main+0x61c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <main+0x590>
        __asm volatile
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	60bb      	str	r3, [r7, #8]
    }
 8003874:	bf00      	nop
 8003876:	e7fe      	b.n	8003876 <main+0x58e>
	//Cola para almacenar las operaciones
	xQueue_Operation = xQueueCreate(30, sizeof(Parameters_Operation_t) );
 8003878:	2200      	movs	r2, #0
 800387a:	2120      	movs	r1, #32
 800387c:	201e      	movs	r0, #30
 800387e:	f002 ffc3 	bl	8006808 <xQueueGenericCreate>
 8003882:	4603      	mov	r3, r0
 8003884:	4a20      	ldr	r2, [pc, #128]	; (8003908 <main+0x620>)
 8003886:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_Operation != NULL);
 8003888:	4b1f      	ldr	r3, [pc, #124]	; (8003908 <main+0x620>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d13d      	bne.n	800390c <main+0x624>
        __asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	607b      	str	r3, [r7, #4]
    }
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <main+0x5bc>
 80038a6:	bf00      	nop
 80038a8:	20000414 	.word	0x20000414
 80038ac:	080141c0 	.word	0x080141c0
 80038b0:	0800431d 	.word	0x0800431d
 80038b4:	200003f4 	.word	0x200003f4
 80038b8:	20000418 	.word	0x20000418
 80038bc:	080141cc 	.word	0x080141cc
 80038c0:	08004375 	.word	0x08004375
 80038c4:	20000424 	.word	0x20000424
 80038c8:	080141d8 	.word	0x080141d8
 80038cc:	08004635 	.word	0x08004635
 80038d0:	20000420 	.word	0x20000420
 80038d4:	080141ec 	.word	0x080141ec
 80038d8:	080044f9 	.word	0x080044f9
 80038dc:	2000041c 	.word	0x2000041c
 80038e0:	08014204 	.word	0x08014204
 80038e4:	08004405 	.word	0x08004405
 80038e8:	20000408 	.word	0x20000408
 80038ec:	08014218 	.word	0x08014218
 80038f0:	0800475d 	.word	0x0800475d
 80038f4:	20000438 	.word	0x20000438
 80038f8:	20000434 	.word	0x20000434
 80038fc:	20000430 	.word	0x20000430
 8003900:	20000440 	.word	0x20000440
 8003904:	20000444 	.word	0x20000444
 8003908:	2000043c 	.word	0x2000043c

	//-------------------Configuracion Even Group-------------
	//Grupo de eventos para ejecutar las operaciones
	xEventGroup_Execute_Operation = xEventGroupCreate();
 800390c:	f002 fc94 	bl	8006238 <xEventGroupCreate>
 8003910:	4603      	mov	r3, r0
 8003912:	4a12      	ldr	r2, [pc, #72]	; (800395c <main+0x674>)
 8003914:	6013      	str	r3, [r2, #0]
	//Grupo de eventos para ejecutar de A star
	xEventGroup_Execute_Astar = xEventGroupCreate();
 8003916:	f002 fc8f 	bl	8006238 <xEventGroupCreate>
 800391a:	4603      	mov	r3, r0
 800391c:	4a10      	ldr	r2, [pc, #64]	; (8003960 <main+0x678>)
 800391e:	6013      	str	r3, [r2, #0]

	//-------------------Configuracion Timer--------------
	//Software Timer para el blink
	handler_led_timer = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, 0, led_state_callback);
 8003920:	4b10      	ldr	r3, [pc, #64]	; (8003964 <main+0x67c>)
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	2300      	movs	r3, #0
 8003926:	2201      	movs	r2, #1
 8003928:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800392c:	480e      	ldr	r0, [pc, #56]	; (8003968 <main+0x680>)
 800392e:	f004 ff33 	bl	8008798 <xTimerCreate>
 8003932:	4603      	mov	r3, r0
 8003934:	4a0d      	ldr	r2, [pc, #52]	; (800396c <main+0x684>)
 8003936:	6013      	str	r3, [r2, #0]
	xTimerStart(handler_led_timer, portMAX_DELAY);
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <main+0x684>)
 800393a:	681c      	ldr	r4, [r3, #0]
 800393c:	f003 ffd4 	bl	80078e8 <xTaskGetTickCount>
 8003940:	4602      	mov	r2, r0
 8003942:	f04f 33ff 	mov.w	r3, #4294967295
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2300      	movs	r3, #0
 800394a:	2101      	movs	r1, #1
 800394c:	4620      	mov	r0, r4
 800394e:	f004 ff7f 	bl	8008850 <xTimerGenericCommand>

	//-------------------Inicializacion Scheduler--------------
	//Inicia le Scheduler a funcionar
	vTaskStartScheduler();
 8003952:	f003 fecd 	bl	80076f0 <vTaskStartScheduler>
	//-----------------------Fin cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//Si el scheduler se inicia correctamente no se ejecutada este while
	while(1)
	{
		__NOP();
 8003956:	bf00      	nop
 8003958:	e7fd      	b.n	8003956 <main+0x66e>
 800395a:	bf00      	nop
 800395c:	20000448 	.word	0x20000448
 8003960:	2000044c 	.word	0x2000044c
 8003964:	08005015 	.word	0x08005015
 8003968:	08014224 	.word	0x08014224
 800396c:	20000450 	.word	0x20000450

08003970 <initSystem>:
}


//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void initSystem(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af02      	add	r7, sp, #8
	//---------------------------------Inicio de Configuracion GPIOx---------------------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_BlinkyPin.pGPIOx = GPIOA;
 8003976:	4baf      	ldr	r3, [pc, #700]	; (8003c34 <initSystem+0x2c4>)
 8003978:	4aaf      	ldr	r2, [pc, #700]	; (8003c38 <initSystem+0x2c8>)
 800397a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 800397c:	4bad      	ldr	r3, [pc, #692]	; (8003c34 <initSystem+0x2c4>)
 800397e:	2205      	movs	r2, #5
 8003980:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003982:	2300      	movs	r3, #0
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	2300      	movs	r3, #0
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	2301      	movs	r3, #1
 800398c:	2200      	movs	r2, #0
 800398e:	2101      	movs	r1, #1
 8003990:	48a8      	ldr	r0, [pc, #672]	; (8003c34 <initSystem+0x2c4>)
 8003992:	f007 f9ef 	bl	800ad74 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_BlinkyPin);
 8003996:	48a7      	ldr	r0, [pc, #668]	; (8003c34 <initSystem+0x2c4>)
 8003998:	f007 fa0e 	bl	800adb8 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_CommTerm_TX.pGPIOx = GPIOA;
 800399c:	4ba7      	ldr	r3, [pc, #668]	; (8003c3c <initSystem+0x2cc>)
 800399e:	4aa6      	ldr	r2, [pc, #664]	; (8003c38 <initSystem+0x2c8>)
 80039a0:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_CommTerm_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 80039a2:	4ba6      	ldr	r3, [pc, #664]	; (8003c3c <initSystem+0x2cc>)
 80039a4:	2209      	movs	r2, #9
 80039a6:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_CommTerm_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80039a8:	2307      	movs	r3, #7
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	2300      	movs	r3, #0
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2301      	movs	r3, #1
 80039b2:	2200      	movs	r2, #0
 80039b4:	2102      	movs	r1, #2
 80039b6:	48a1      	ldr	r0, [pc, #644]	; (8003c3c <initSystem+0x2cc>)
 80039b8:	f007 f9dc 	bl	800ad74 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_CommTerm_TX);
 80039bc:	489f      	ldr	r0, [pc, #636]	; (8003c3c <initSystem+0x2cc>)
 80039be:	f007 f9fb 	bl	800adb8 <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_CommTerm_RX.pGPIOx = GPIOA;
 80039c2:	4b9f      	ldr	r3, [pc, #636]	; (8003c40 <initSystem+0x2d0>)
 80039c4:	4a9c      	ldr	r2, [pc, #624]	; (8003c38 <initSystem+0x2c8>)
 80039c6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_CommTerm_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80039c8:	4b9d      	ldr	r3, [pc, #628]	; (8003c40 <initSystem+0x2d0>)
 80039ca:	220a      	movs	r2, #10
 80039cc:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_CommTerm_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80039ce:	2307      	movs	r3, #7
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	2300      	movs	r3, #0
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2301      	movs	r3, #1
 80039d8:	2200      	movs	r2, #0
 80039da:	2102      	movs	r1, #2
 80039dc:	4898      	ldr	r0, [pc, #608]	; (8003c40 <initSystem+0x2d0>)
 80039de:	f007 f9c9 	bl	800ad74 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_CommTerm_RX);
 80039e2:	4897      	ldr	r0, [pc, #604]	; (8003c40 <initSystem+0x2d0>)
 80039e4:	f007 f9e8 	bl	800adb8 <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 80039e8:	4b96      	ldr	r3, [pc, #600]	; (8003c44 <initSystem+0x2d4>)
 80039ea:	4a93      	ldr	r2, [pc, #588]	; (8003c38 <initSystem+0x2c8>)
 80039ec:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 80039ee:	4b95      	ldr	r3, [pc, #596]	; (8003c44 <initSystem+0x2d4>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 80039f4:	2302      	movs	r3, #2
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	2300      	movs	r3, #0
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	2301      	movs	r3, #1
 80039fe:	2200      	movs	r2, #0
 8003a00:	2102      	movs	r1, #2
 8003a02:	4890      	ldr	r0, [pc, #576]	; (8003c44 <initSystem+0x2d4>)
 8003a04:	f007 f9b6 	bl	800ad74 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8003a08:	488e      	ldr	r0, [pc, #568]	; (8003c44 <initSystem+0x2d4>)
 8003a0a:	f007 f9d5 	bl	800adb8 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8003a0e:	4b8e      	ldr	r3, [pc, #568]	; (8003c48 <initSystem+0x2d8>)
 8003a10:	4a8e      	ldr	r2, [pc, #568]	; (8003c4c <initSystem+0x2dc>)
 8003a12:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 8003a14:	4b8c      	ldr	r3, [pc, #560]	; (8003c48 <initSystem+0x2d8>)
 8003a16:	220c      	movs	r2, #12
 8003a18:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2301      	movs	r3, #1
 8003a24:	2200      	movs	r2, #0
 8003a26:	2101      	movs	r1, #1
 8003a28:	4887      	ldr	r0, [pc, #540]	; (8003c48 <initSystem+0x2d8>)
 8003a2a:	f007 f9a3 	bl	800ad74 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 8003a2e:	4886      	ldr	r0, [pc, #536]	; (8003c48 <initSystem+0x2d8>)
 8003a30:	f007 f9c2 	bl	800adb8 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 8003a34:	4b86      	ldr	r3, [pc, #536]	; (8003c50 <initSystem+0x2e0>)
 8003a36:	4a85      	ldr	r2, [pc, #532]	; (8003c4c <initSystem+0x2dc>)
 8003a38:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8003a3a:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <initSystem+0x2e0>)
 8003a3c:	220a      	movs	r2, #10
 8003a3e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003a40:	2300      	movs	r3, #0
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	2300      	movs	r3, #0
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2301      	movs	r3, #1
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	4880      	ldr	r0, [pc, #512]	; (8003c50 <initSystem+0x2e0>)
 8003a50:	f007 f990 	bl	800ad74 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 8003a54:	487e      	ldr	r0, [pc, #504]	; (8003c50 <initSystem+0x2e0>)
 8003a56:	f007 f9af 	bl	800adb8 <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 8003a5a:	4b7e      	ldr	r3, [pc, #504]	; (8003c54 <initSystem+0x2e4>)
 8003a5c:	4a76      	ldr	r2, [pc, #472]	; (8003c38 <initSystem+0x2c8>)
 8003a5e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 8003a60:	4b7c      	ldr	r3, [pc, #496]	; (8003c54 <initSystem+0x2e4>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8003a66:	2302      	movs	r3, #2
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	2301      	movs	r3, #1
 8003a70:	2200      	movs	r2, #0
 8003a72:	2102      	movs	r1, #2
 8003a74:	4877      	ldr	r0, [pc, #476]	; (8003c54 <initSystem+0x2e4>)
 8003a76:	f007 f97d 	bl	800ad74 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8003a7a:	4876      	ldr	r0, [pc, #472]	; (8003c54 <initSystem+0x2e4>)
 8003a7c:	f007 f99c 	bl	800adb8 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 8003a80:	4b75      	ldr	r3, [pc, #468]	; (8003c58 <initSystem+0x2e8>)
 8003a82:	4a76      	ldr	r2, [pc, #472]	; (8003c5c <initSystem+0x2ec>)
 8003a84:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8003a86:	4b74      	ldr	r3, [pc, #464]	; (8003c58 <initSystem+0x2e8>)
 8003a88:	2202      	movs	r2, #2
 8003a8a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	2300      	movs	r3, #0
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2301      	movs	r3, #1
 8003a96:	2200      	movs	r2, #0
 8003a98:	2101      	movs	r1, #1
 8003a9a:	486f      	ldr	r0, [pc, #444]	; (8003c58 <initSystem+0x2e8>)
 8003a9c:	f007 f96a 	bl	800ad74 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 8003aa0:	486d      	ldr	r0, [pc, #436]	; (8003c58 <initSystem+0x2e8>)
 8003aa2:	f007 f989 	bl	800adb8 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8003aa6:	4b6e      	ldr	r3, [pc, #440]	; (8003c60 <initSystem+0x2f0>)
 8003aa8:	4a68      	ldr	r2, [pc, #416]	; (8003c4c <initSystem+0x2dc>)
 8003aaa:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8003aac:	4b6c      	ldr	r3, [pc, #432]	; (8003c60 <initSystem+0x2f0>)
 8003aae:	220b      	movs	r2, #11
 8003ab0:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2301      	movs	r3, #1
 8003abc:	2200      	movs	r2, #0
 8003abe:	2101      	movs	r1, #1
 8003ac0:	4867      	ldr	r0, [pc, #412]	; (8003c60 <initSystem+0x2f0>)
 8003ac2:	f007 f957 	bl	800ad74 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8003ac6:	4866      	ldr	r0, [pc, #408]	; (8003c60 <initSystem+0x2f0>)
 8003ac8:	f007 f976 	bl	800adb8 <GPIO_Config>

	//---------------------------I2C--------------------------------
	//---------------PIN: PB8----------------
	//------------AF4: I2C1_SCL----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SCL_MPU6050.pGPIOx = GPIOB;
 8003acc:	4b65      	ldr	r3, [pc, #404]	; (8003c64 <initSystem+0x2f4>)
 8003ace:	4a66      	ldr	r2, [pc, #408]	; (8003c68 <initSystem+0x2f8>)
 8003ad0:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SCL_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 8003ad2:	4b64      	ldr	r3, [pc, #400]	; (8003c64 <initSystem+0x2f4>)
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SCL_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8003ad8:	2304      	movs	r3, #4
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	2300      	movs	r3, #0
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	485f      	ldr	r0, [pc, #380]	; (8003c64 <initSystem+0x2f4>)
 8003ae8:	f007 f944 	bl	800ad74 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SCL_MPU6050);
 8003aec:	485d      	ldr	r0, [pc, #372]	; (8003c64 <initSystem+0x2f4>)
 8003aee:	f007 f963 	bl	800adb8 <GPIO_Config>

	//---------------PIN: PB9----------------
	//------------AF4: I2C1_SDA----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SDA_MPU6050.pGPIOx = GPIOB;
 8003af2:	4b5e      	ldr	r3, [pc, #376]	; (8003c6c <initSystem+0x2fc>)
 8003af4:	4a5c      	ldr	r2, [pc, #368]	; (8003c68 <initSystem+0x2f8>)
 8003af6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SDA_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8003af8:	4b5c      	ldr	r3, [pc, #368]	; (8003c6c <initSystem+0x2fc>)
 8003afa:	2209      	movs	r2, #9
 8003afc:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SDA_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8003afe:	2304      	movs	r3, #4
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	2300      	movs	r3, #0
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2302      	movs	r3, #2
 8003b08:	2201      	movs	r2, #1
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	4857      	ldr	r0, [pc, #348]	; (8003c6c <initSystem+0x2fc>)
 8003b0e:	f007 f931 	bl	800ad74 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SDA_MPU6050);
 8003b12:	4856      	ldr	r0, [pc, #344]	; (8003c6c <initSystem+0x2fc>)
 8003b14:	f007 f950 	bl	800adb8 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_CommTerm.ptrUSARTx = USART1;
 8003b18:	4b55      	ldr	r3, [pc, #340]	; (8003c70 <initSystem+0x300>)
 8003b1a:	4a56      	ldr	r2, [pc, #344]	; (8003c74 <initSystem+0x304>)
 8003b1c:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_CommTerm.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8003b1e:	4b54      	ldr	r3, [pc, #336]	; (8003c70 <initSystem+0x300>)
 8003b20:	2202      	movs	r2, #2
 8003b22:	701a      	strb	r2, [r3, #0]
	handler_USART_CommTerm.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8003b24:	4b52      	ldr	r3, [pc, #328]	; (8003c70 <initSystem+0x300>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	705a      	strb	r2, [r3, #1]
	handler_USART_CommTerm.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8003b2a:	4b51      	ldr	r3, [pc, #324]	; (8003c70 <initSystem+0x300>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	709a      	strb	r2, [r3, #2]
	handler_USART_CommTerm.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 8003b30:	4b4f      	ldr	r3, [pc, #316]	; (8003c70 <initSystem+0x300>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	70da      	strb	r2, [r3, #3]
	handler_USART_CommTerm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8003b36:	4b4e      	ldr	r3, [pc, #312]	; (8003c70 <initSystem+0x300>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	711a      	strb	r2, [r3, #4]
	handler_USART_CommTerm.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_DISABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 8003b3c:	4b4c      	ldr	r3, [pc, #304]	; (8003c70 <initSystem+0x300>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	usart_Config_Init_Priority(&handler_USART_CommTerm, e_USART_PRIOPITY_6);
 8003b42:	2106      	movs	r1, #6
 8003b44:	484a      	ldr	r0, [pc, #296]	; (8003c70 <initSystem+0x300>)
 8003b46:	f008 faa1 	bl	800c08c <usart_Config_Init_Priority>
	USART_Config(&handler_USART_CommTerm);
 8003b4a:	4849      	ldr	r0, [pc, #292]	; (8003c70 <initSystem+0x300>)
 8003b4c:	f008 f880 	bl	800bc50 <USART_Config>

	//-------------------Fin de Configuracion USARTx-----------------------

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Sampling.ptrTIMx = TIM3;
 8003b50:	4b49      	ldr	r3, [pc, #292]	; (8003c78 <initSystem+0x308>)
 8003b52:	4a4a      	ldr	r2, [pc, #296]	; (8003c7c <initSystem+0x30c>)
 8003b54:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Sampling.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8003b56:	4b48      	ldr	r3, [pc, #288]	; (8003c78 <initSystem+0x308>)
 8003b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b5c:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Sampling.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8003b5e:	4b46      	ldr	r3, [pc, #280]	; (8003c78 <initSystem+0x308>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Sampling.TIMx_Config.TIMX_period = period_sampling;   //Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8003b64:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <initSystem+0x310>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b43      	ldr	r3, [pc, #268]	; (8003c78 <initSystem+0x308>)
 8003b6c:	605a      	str	r2, [r3, #4]
	handler_TIMER_Sampling.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8003b6e:	4b42      	ldr	r3, [pc, #264]	; (8003c78 <initSystem+0x308>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	timer_Config_Init_Priority(&handler_TIMER_Sampling, e_TIMER_PRIOPITY_6);
 8003b74:	2106      	movs	r1, #6
 8003b76:	4840      	ldr	r0, [pc, #256]	; (8003c78 <initSystem+0x308>)
 8003b78:	f005 febc 	bl	80098f4 <timer_Config_Init_Priority>
	BasicTimer_Config(&handler_TIMER_Sampling);
 8003b7c:	483e      	ldr	r0, [pc, #248]	; (8003c78 <initSystem+0x308>)
 8003b7e:	f005 fddb 	bl	8009738 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Delay.ptrTIMx = TIM4;
 8003b82:	4b40      	ldr	r3, [pc, #256]	; (8003c84 <initSystem+0x314>)
 8003b84:	4a40      	ldr	r2, [pc, #256]	; (8003c88 <initSystem+0x318>)
 8003b86:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Delay.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_100us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8003b88:	4b3e      	ldr	r3, [pc, #248]	; (8003c84 <initSystem+0x314>)
 8003b8a:	2264      	movs	r2, #100	; 0x64
 8003b8c:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Delay.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8003b8e:	4b3d      	ldr	r3, [pc, #244]	; (8003c84 <initSystem+0x314>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Delay.TIMx_Config.TIMX_period = 10;   //Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8003b94:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <initSystem+0x314>)
 8003b96:	220a      	movs	r2, #10
 8003b98:	605a      	str	r2, [r3, #4]
	handler_TIMER_Delay.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8003b9a:	4b3a      	ldr	r3, [pc, #232]	; (8003c84 <initSystem+0x314>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	timer_Config_Init_Priority(&handler_TIMER_Delay, e_TIMER_PRIOPITY_6);
 8003ba0:	2106      	movs	r1, #6
 8003ba2:	4838      	ldr	r0, [pc, #224]	; (8003c84 <initSystem+0x314>)
 8003ba4:	f005 fea6 	bl	80098f4 <timer_Config_Init_Priority>
	BasicTimer_Config(&handler_TIMER_Delay);
 8003ba8:	4836      	ldr	r0, [pc, #216]	; (8003c84 <initSystem+0x314>)
 8003baa:	f005 fdc5 	bl	8009738 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 8003bae:	4b37      	ldr	r3, [pc, #220]	; (8003c8c <initSystem+0x31c>)
 8003bb0:	4a37      	ldr	r2, [pc, #220]	; (8003c90 <initSystem+0x320>)
 8003bb2:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8003bb4:	4b35      	ldr	r3, [pc, #212]	; (8003c8c <initSystem+0x31c>)
 8003bb6:	220a      	movs	r2, #10
 8003bb8:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8003bba:	4b34      	ldr	r3, [pc, #208]	; (8003c8c <initSystem+0x31c>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <initSystem+0x31c>)
 8003bc2:	2264      	movs	r2, #100	; 0x64
 8003bc4:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8003bc6:	4b31      	ldr	r3, [pc, #196]	; (8003c8c <initSystem+0x31c>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 8003bcc:	482f      	ldr	r0, [pc, #188]	; (8003c8c <initSystem+0x31c>)
 8003bce:	f005 fdb3 	bl	8009738 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 8003bd2:	4b30      	ldr	r3, [pc, #192]	; (8003c94 <initSystem+0x324>)
 8003bd4:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <initSystem+0x2dc>)
 8003bd6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8003bd8:	4b2e      	ldr	r3, [pc, #184]	; (8003c94 <initSystem+0x324>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8003bde:	4b2e      	ldr	r3, [pc, #184]	; (8003c98 <initSystem+0x328>)
 8003be0:	4a2c      	ldr	r2, [pc, #176]	; (8003c94 <initSystem+0x324>)
 8003be2:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8003be4:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <initSystem+0x328>)
 8003be6:	2202      	movs	r2, #2
 8003be8:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	exti_Config_Int_Priority(&handler_EXTI_FotoR, e_EXTI_PRIOPITY_7);
 8003bea:	2107      	movs	r1, #7
 8003bec:	482a      	ldr	r0, [pc, #168]	; (8003c98 <initSystem+0x328>)
 8003bee:	f006 febd 	bl	800a96c <exti_Config_Int_Priority>
	extInt_Config(&handler_EXTI_FotoR);
 8003bf2:	4829      	ldr	r0, [pc, #164]	; (8003c98 <initSystem+0x328>)
 8003bf4:	f005 ffac 	bl	8009b50 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8003bf8:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <initSystem+0x32c>)
 8003bfa:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <initSystem+0x2dc>)
 8003bfc:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8003bfe:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <initSystem+0x32c>)
 8003c00:	2203      	movs	r2, #3
 8003c02:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8003c04:	4b26      	ldr	r3, [pc, #152]	; (8003ca0 <initSystem+0x330>)
 8003c06:	4a25      	ldr	r2, [pc, #148]	; (8003c9c <initSystem+0x32c>)
 8003c08:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8003c0a:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <initSystem+0x330>)
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	exti_Config_Int_Priority(&handler_EXTI_FotoL, e_EXTI_PRIOPITY_7);
 8003c10:	2107      	movs	r1, #7
 8003c12:	4823      	ldr	r0, [pc, #140]	; (8003ca0 <initSystem+0x330>)
 8003c14:	f006 feaa 	bl	800a96c <exti_Config_Int_Priority>
	extInt_Config(& handler_EXTI_FotoL);
 8003c18:	4821      	ldr	r0, [pc, #132]	; (8003ca0 <initSystem+0x330>)
 8003c1a:	f005 ff99 	bl	8009b50 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8003c1e:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <initSystem+0x334>)
 8003c20:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <initSystem+0x320>)
 8003c22:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 8003c24:	4b1f      	ldr	r3, [pc, #124]	; (8003ca4 <initSystem+0x334>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8003c2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <initSystem+0x334>)
 8003c2c:	220a      	movs	r2, #10
 8003c2e:	805a      	strh	r2, [r3, #2]
 8003c30:	e03a      	b.n	8003ca8 <initSystem+0x338>
 8003c32:	bf00      	nop
 8003c34:	2000022c 	.word	0x2000022c
 8003c38:	40020000 	.word	0x40020000
 8003c3c:	20000238 	.word	0x20000238
 8003c40:	20000244 	.word	0x20000244
 8003c44:	200002ac 	.word	0x200002ac
 8003c48:	200002b8 	.word	0x200002b8
 8003c4c:	40020800 	.word	0x40020800
 8003c50:	200002c4 	.word	0x200002c4
 8003c54:	20000320 	.word	0x20000320
 8003c58:	2000032c 	.word	0x2000032c
 8003c5c:	40020c00 	.word	0x40020c00
 8003c60:	20000338 	.word	0x20000338
 8003c64:	20000284 	.word	0x20000284
 8003c68:	40020400 	.word	0x40020400
 8003c6c:	20000290 	.word	0x20000290
 8003c70:	20000250 	.word	0x20000250
 8003c74:	40011000 	.word	0x40011000
 8003c78:	200003a4 	.word	0x200003a4
 8003c7c:	40000400 	.word	0x40000400
 8003c80:	20000011 	.word	0x20000011
 8003c84:	200003b4 	.word	0x200003b4
 8003c88:	40000800 	.word	0x40000800
 8003c8c:	20000394 	.word	0x20000394
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	2000025c 	.word	0x2000025c
 8003c98:	20000268 	.word	0x20000268
 8003c9c:	20000270 	.word	0x20000270
 8003ca0:	2000027c 	.word	0x2000027c
 8003ca4:	200002d0 	.word	0x200002d0
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8003ca8:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <initSystem+0x390>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 8003cae:	4814      	ldr	r0, [pc, #80]	; (8003d00 <initSystem+0x390>)
 8003cb0:	f007 fca8 	bl	800b604 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	4812      	ldr	r0, [pc, #72]	; (8003d00 <initSystem+0x390>)
 8003cb8:	f007 fe04 	bl	800b8c4 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 8003cbc:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <initSystem+0x394>)
 8003cbe:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <initSystem+0x398>)
 8003cc0:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8003cc2:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <initSystem+0x394>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <initSystem+0x394>)
 8003cca:	220a      	movs	r2, #10
 8003ccc:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8003cce:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <initSystem+0x394>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8003cd4:	480b      	ldr	r0, [pc, #44]	; (8003d04 <initSystem+0x394>)
 8003cd6:	f007 fc95 	bl	800b604 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4809      	ldr	r0, [pc, #36]	; (8003d04 <initSystem+0x394>)
 8003cde:	f007 fdf1 	bl	800b8c4 <statusInOutPWM>

	//-------------------Inicio de Configuracion I2Cx----------------------

	//---------------I2C1----------------
	//Definimos el I2Cx a usar
	handler_I2C_MPU6050.prtI2Cx = I2C1;
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <initSystem+0x39c>)
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <initSystem+0x3a0>)
 8003ce6:	601a      	str	r2, [r3, #0]
	//Definimos la configuracion para el I2C
	handler_I2C_MPU6050.modeI2C = I2C_MODE_FM;               //I2C_MODE_x  x->SM,FM
 8003ce8:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <initSystem+0x39c>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	715a      	strb	r2, [r3, #5]
	handler_I2C_MPU6050.slaveAddress = ADDRESS_DOWN;         //Direccion del Sclave
 8003cee:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <initSystem+0x39c>)
 8003cf0:	2268      	movs	r2, #104	; 0x68
 8003cf2:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	i2c_Config(&handler_I2C_MPU6050);
 8003cf4:	4805      	ldr	r0, [pc, #20]	; (8003d0c <initSystem+0x39c>)
 8003cf6:	f007 f9cb 	bl	800b090 <i2c_Config>

	//---------------------Fin de Configuracion I2Cx----------------------

}
 8003cfa:	bf00      	nop
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	200002d0 	.word	0x200002d0
 8003d04:	20000344 	.word	0x20000344
 8003d08:	40000c00 	.word	0x40000c00
 8003d0c:	2000029c 	.word	0x2000029c
 8003d10:	40005400 	.word	0x40005400

08003d14 <int_MPU>:



//------------------------------Inicio configuracion del MPU------------------------------------------
void int_MPU(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
	//Definimos la escala de las diferentes magnitudes fisicas
	handler_MPUAccel_MPU6050.fullScaleACCEL = ACCEL_2G;
 8003d18:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <int_MPU+0x24>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_MPU6050.fullScaleGYRO = GYRO_250;
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <int_MPU+0x24>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	705a      	strb	r2, [r3, #1]
	//Definimos el handler correspondiente al I2C
	handler_MPUAccel_MPU6050.ptrI2Chandler = &handler_I2C_MPU6050;
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <int_MPU+0x24>)
 8003d26:	4a05      	ldr	r2, [pc, #20]	; (8003d3c <int_MPU+0x28>)
 8003d28:	605a      	str	r2, [r3, #4]
	//Cargamos configuracion
	configMPUAccel(&handler_MPUAccel_MPU6050, &handler_TIMER_Delay, &countingTimer);
 8003d2a:	4a05      	ldr	r2, [pc, #20]	; (8003d40 <int_MPU+0x2c>)
 8003d2c:	4905      	ldr	r1, [pc, #20]	; (8003d44 <int_MPU+0x30>)
 8003d2e:	4802      	ldr	r0, [pc, #8]	; (8003d38 <int_MPU+0x24>)
 8003d30:	f7fe fa06 	bl	8002140 <configMPUAccel>

}
 8003d34:	bf00      	nop
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	200002a4 	.word	0x200002a4
 8003d3c:	2000029c 	.word	0x2000029c
 8003d40:	200003c4 	.word	0x200003c4
 8003d44:	200003b4 	.word	0x200003b4

08003d48 <int_Config_Motor>:

//------------------------------Fin configuracion del MPU------------------------------------------

//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  28;
 8003d4c:	4b3c      	ldr	r3, [pc, #240]	; (8003e40 <int_Config_Motor+0xf8>)
 8003d4e:	4a3d      	ldr	r2, [pc, #244]	; (8003e44 <int_Config_Motor+0xfc>)
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_R.configMotor.frecuency = &value_period;
 8003d52:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <int_Config_Motor+0xf8>)
 8003d54:	4a3c      	ldr	r2, [pc, #240]	; (8003e48 <int_Config_Motor+0x100>)
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_R.configMotor.dir = SET;
 8003d58:	4b39      	ldr	r3, [pc, #228]	; (8003e40 <int_Config_Motor+0xf8>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 8003d60:	4b37      	ldr	r3, [pc, #220]	; (8003e40 <int_Config_Motor+0xf8>)
 8003d62:	4a3a      	ldr	r2, [pc, #232]	; (8003e4c <int_Config_Motor+0x104>)
 8003d64:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <int_Config_Motor+0xf8>)
 8003d68:	4a39      	ldr	r2, [pc, #228]	; (8003e50 <int_Config_Motor+0x108>)
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 8003d6c:	4b34      	ldr	r3, [pc, #208]	; (8003e40 <int_Config_Motor+0xf8>)
 8003d6e:	4a39      	ldr	r2, [pc, #228]	; (8003e54 <int_Config_Motor+0x10c>)
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 8003d72:	4b33      	ldr	r3, [pc, #204]	; (8003e40 <int_Config_Motor+0xf8>)
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	60da      	str	r2, [r3, #12]
 8003d7a:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <int_Config_Motor+0xf8>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	4a30      	ldr	r2, [pc, #192]	; (8003e40 <int_Config_Motor+0xf8>)
 8003d80:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 8003d82:	4b2f      	ldr	r3, [pc, #188]	; (8003e40 <int_Config_Motor+0xf8>)
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	4b2d      	ldr	r3, [pc, #180]	; (8003e40 <int_Config_Motor+0xf8>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	4a2c      	ldr	r2, [pc, #176]	; (8003e40 <int_Config_Motor+0xf8>)
 8003d90:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_R.parametersMotor.parametersPID.kp = 250;
 8003d92:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <int_Config_Motor+0xf8>)
 8003d94:	4a30      	ldr	r2, [pc, #192]	; (8003e58 <int_Config_Motor+0x110>)
 8003d96:	611a      	str	r2, [r3, #16]
	handler_Motor_R.parametersMotor.parametersPID.ki = 0;
 8003d98:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <int_Config_Motor+0xf8>)
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	615a      	str	r2, [r3, #20]
	handler_Motor_R.parametersMotor.parametersPID.kd = 100;
 8003da0:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <int_Config_Motor+0xf8>)
 8003da2:	4a2e      	ldr	r2, [pc, #184]	; (8003e5c <int_Config_Motor+0x114>)
 8003da4:	619a      	str	r2, [r3, #24]

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  28;
 8003da6:	4b2e      	ldr	r3, [pc, #184]	; (8003e60 <int_Config_Motor+0x118>)
 8003da8:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <int_Config_Motor+0xfc>)
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_L.configMotor.frecuency = &value_period;
 8003dac:	4b2c      	ldr	r3, [pc, #176]	; (8003e60 <int_Config_Motor+0x118>)
 8003dae:	4a26      	ldr	r2, [pc, #152]	; (8003e48 <int_Config_Motor+0x100>)
 8003db0:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_L.configMotor.dir = SET;
 8003db2:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <int_Config_Motor+0x118>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 8003dba:	4b29      	ldr	r3, [pc, #164]	; (8003e60 <int_Config_Motor+0x118>)
 8003dbc:	4a29      	ldr	r2, [pc, #164]	; (8003e64 <int_Config_Motor+0x11c>)
 8003dbe:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 8003dc0:	4b27      	ldr	r3, [pc, #156]	; (8003e60 <int_Config_Motor+0x118>)
 8003dc2:	4a29      	ldr	r2, [pc, #164]	; (8003e68 <int_Config_Motor+0x120>)
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 8003dc6:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <int_Config_Motor+0x118>)
 8003dc8:	4a28      	ldr	r2, [pc, #160]	; (8003e6c <int_Config_Motor+0x124>)
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 8003dcc:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <int_Config_Motor+0x118>)
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	60da      	str	r2, [r3, #12]
 8003dd4:	4b22      	ldr	r3, [pc, #136]	; (8003e60 <int_Config_Motor+0x118>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a21      	ldr	r2, [pc, #132]	; (8003e60 <int_Config_Motor+0x118>)
 8003dda:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 8003ddc:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <int_Config_Motor+0x118>)
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <int_Config_Motor+0x118>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <int_Config_Motor+0x118>)
 8003dea:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_L.parametersMotor.parametersPID.kp = 250;
 8003dec:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <int_Config_Motor+0x118>)
 8003dee:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <int_Config_Motor+0x110>)
 8003df0:	611a      	str	r2, [r3, #16]
	handler_Motor_L.parametersMotor.parametersPID.ki = 0;
 8003df2:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <int_Config_Motor+0x118>)
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	615a      	str	r2, [r3, #20]
	handler_Motor_L.parametersMotor.parametersPID.kd = 100;
 8003dfa:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <int_Config_Motor+0x118>)
 8003dfc:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <int_Config_Motor+0x114>)
 8003dfe:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distace.e = parameter_PID_distace.e_prev = 0;
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <int_Config_Motor+0x128>)
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <int_Config_Motor+0x128>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <int_Config_Motor+0x128>)
 8003e0e:	6053      	str	r3, [r2, #4]
	parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 8003e10:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <int_Config_Motor+0x128>)
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <int_Config_Motor+0x128>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <int_Config_Motor+0x128>)
 8003e1e:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	parameter_PID_distace.kp = 1.0;
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <int_Config_Motor+0x128>)
 8003e22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e26:	611a      	str	r2, [r3, #16]
	parameter_PID_distace.ki = 0.1;
 8003e28:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <int_Config_Motor+0x128>)
 8003e2a:	4a12      	ldr	r2, [pc, #72]	; (8003e74 <int_Config_Motor+0x12c>)
 8003e2c:	615a      	str	r2, [r3, #20]
	parameter_PID_distace.kd = 0.8;
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <int_Config_Motor+0x128>)
 8003e30:	4a11      	ldr	r2, [pc, #68]	; (8003e78 <int_Config_Motor+0x130>)
 8003e32:	619a      	str	r2, [r3, #24]
};
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	200002dc 	.word	0x200002dc
 8003e44:	41e00000 	.word	0x41e00000
 8003e48:	20000014 	.word	0x20000014
 8003e4c:	200002c4 	.word	0x200002c4
 8003e50:	200002b8 	.word	0x200002b8
 8003e54:	200002d0 	.word	0x200002d0
 8003e58:	437a0000 	.word	0x437a0000
 8003e5c:	42c80000 	.word	0x42c80000
 8003e60:	20000350 	.word	0x20000350
 8003e64:	20000338 	.word	0x20000338
 8003e68:	2000032c 	.word	0x2000032c
 8003e6c:	20000344 	.word	0x20000344
 8003e70:	200003d4 	.word	0x200003d4
 8003e74:	3dcccccd 	.word	0x3dcccccd
 8003e78:	3f4ccccd 	.word	0x3f4ccccd

08003e7c <BasicUSART1_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART1_Callback(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af02      	add	r7, sp, #8
	usartData = getRxData();
 8003e82:	f008 f9c9 	bl	800c218 <getRxData>
 8003e86:	4603      	mov	r3, r0
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4b22      	ldr	r3, [pc, #136]	; (8003f14 <BasicUSART1_Callback+0x98>)
 8003e8c:	701a      	strb	r2, [r3, #0]

	//Se define variable para verificar si una tarea de mayor proridad esta lista para Running
	BaseType_t pxHigherPriorityTaskWoken;
	(void) pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 8003e92:	4b21      	ldr	r3, [pc, #132]	; (8003f18 <BasicUSART1_Callback+0x9c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f003 fa5f 	bl	800735a <xQueueIsQueueFullFromISR>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <BasicUSART1_Callback+0xa0>)
 8003ea0:	6013      	str	r3, [r2, #0]

	//Por tanto si es True entonces aun no hay espacio
	if(xReturned != pdTRUE)
 8003ea2:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <BasicUSART1_Callback+0xa0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d00f      	beq.n	8003eca <BasicUSART1_Callback+0x4e>
	{
		if(usartData != '\r' && usartData != '\n')
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <BasicUSART1_Callback+0x98>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b0d      	cmp	r3, #13
 8003eb0:	d01d      	beq.n	8003eee <BasicUSART1_Callback+0x72>
 8003eb2:	4b18      	ldr	r3, [pc, #96]	; (8003f14 <BasicUSART1_Callback+0x98>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b0a      	cmp	r3, #10
 8003eb8:	d019      	beq.n	8003eee <BasicUSART1_Callback+0x72>
		{
			//Se envia caracter a la cola
			xQueueSendToBackFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8003eba:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <BasicUSART1_Callback+0x9c>)
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	4914      	ldr	r1, [pc, #80]	; (8003f14 <BasicUSART1_Callback+0x98>)
 8003ec4:	f002 fe20 	bl	8006b08 <xQueueGenericSendFromISR>
 8003ec8:	e011      	b.n	8003eee <BasicUSART1_Callback+0x72>
		}
	}
	else
	{
		if(usartData == '@')
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <BasicUSART1_Callback+0x98>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d10d      	bne.n	8003eee <BasicUSART1_Callback+0x72>
		{
			//Se recibe mensaje de la cola
			xQueueReceiveFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8003ed2:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <BasicUSART1_Callback+0x9c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	490e      	ldr	r1, [pc, #56]	; (8003f14 <BasicUSART1_Callback+0x98>)
 8003eda:	4618      	mov	r0, r3
 8003edc:	f003 f880 	bl	8006fe0 <xQueueReceiveFromISR>
			//Se envia mensaje a la cola
			xQueueSendToBackFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8003ee0:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <BasicUSART1_Callback+0x9c>)
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	490a      	ldr	r1, [pc, #40]	; (8003f14 <BasicUSART1_Callback+0x98>)
 8003eea:	f002 fe0d 	bl	8006b08 <xQueueGenericSendFromISR>
		}
	}
	//Se envia notificacion al command Task
	if(usartData == '@')
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <BasicUSART1_Callback+0x98>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b40      	cmp	r3, #64	; 0x40
 8003ef4:	d10a      	bne.n	8003f0c <BasicUSART1_Callback+0x90>
	{
		xTaskNotifyFromISR(xHandleTask_Commands, 0, eNoAction, NULL);
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <BasicUSART1_Callback+0xa4>)
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	2300      	movs	r3, #0
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	2300      	movs	r3, #0
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	2300      	movs	r3, #0
 8003f04:	2200      	movs	r2, #0
 8003f06:	2100      	movs	r1, #0
 8003f08:	f004 faac 	bl	8008464 <xTaskGenericNotifyFromISR>
	}
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000010 	.word	0x20000010
 8003f18:	20000438 	.word	0x20000438
 8003f1c:	200003f4 	.word	0x200003f4
 8003f20:	20000400 	.word	0x20000400

08003f24 <BasicTimer3_Callback>:

//-------------------------Muestreo--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af02      	add	r7, sp, #8
	//Se define variable para verificar si una tarea de mayor proridad esta lista para Running
	BaseType_t pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]
	//Notificamos a la tarea respectiva
	xTaskNotifyFromISR(xHandleTask_Measure, 0, eNoAction, &pxHigherPriorityTaskWoken);
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <BasicTimer3_Callback+0x40>)
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	9301      	str	r3, [sp, #4]
 8003f36:	2300      	movs	r3, #0
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2100      	movs	r1, #0
 8003f40:	f004 fa90 	bl	8008464 <xTaskGenericNotifyFromISR>
   	//Realizamos cambio de contexto
   	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <BasicTimer3_Callback+0x36>
 8003f4a:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <BasicTimer3_Callback+0x44>)
 8003f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	f3bf 8f6f 	isb	sy
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	2000040c 	.word	0x2000040c
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <BasicTimer4_Callback>:

//-------------------------Muestreo--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer4_Callback(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
	countingTimer++;
 8003f70:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <BasicTimer4_Callback+0x1c>)
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <BasicTimer4_Callback+0x1c>)
 8003f7a:	801a      	strh	r2, [r3, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	200003c4 	.word	0x200003c4

08003f8c <vTask_Print>:
//-----------------------Inicio definicion funciones de las Task---------------------------

//------------Tareas de para recepcion y envio de informacion------------------
//-------Tarea de Imprimir-------
void vTask_Print(void * pvParameters)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
	char *msg;

	while(1)
	{
		//Se espera por el puntero del mensaje
		xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8003f94:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <vTask_Print+0x28>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f107 010c 	add.w	r1, r7, #12
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f002 fe5b 	bl	8006c5c <xQueueReceive>
		//Enviamos por puerto serial dicho mensaje
		writeMsg(&handler_USART_CommTerm, msg);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4803      	ldr	r0, [pc, #12]	; (8003fb8 <vTask_Print+0x2c>)
 8003fac:	f008 f915 	bl	800c1da <writeMsg>
		xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8003fb0:	e7f0      	b.n	8003f94 <vTask_Print+0x8>
 8003fb2:	bf00      	nop
 8003fb4:	20000430 	.word	0x20000430
 8003fb8:	20000250 	.word	0x20000250

08003fbc <vTask_Commands>:
	}
}
//-------Tarea de los comando-------
void vTask_Commands(void * pvParameters)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003fc2:	af02      	add	r7, sp, #8
 8003fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fcc:	6018      	str	r0, [r3, #0]
	BaseType_t notify_status = {0};
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	char stringsend[500];

	while(1)
	{
		//Se espera por la notificacion de la interrupcion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8003fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2100      	movs	r1, #0
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f004 f8df 	bl	80081a4 <xTaskGenericNotifyWait>
 8003fe6:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8003fea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d1f0      	bne.n	8003fd4 <vTask_Commands+0x18>
		{
			//Se procesa el comando recibido
			process_stringsend(stringsend);
 8003ff2:	f107 0308 	add.w	r3, r7, #8
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 f81a 	bl	8005030 <process_stringsend>
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8003ffc:	e7ea      	b.n	8003fd4 <vTask_Commands+0x18>
	...

08004000 <vTask_Menu>:
		}
	}
}
//------Tarea Menu-------
void vTask_Menu(void * pvParameters)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08c      	sub	sp, #48	; 0x30
 8004004:	af02      	add	r7, sp, #8
 8004006:	6078      	str	r0, [r7, #4]
	//Variables para la recepcion
	command_t xReceivedStructure;
	BaseType_t notify_status;
	//Mensaje inicial del menu
	const char* msg_menu = "=======================\n"
 8004008:	4b4e      	ldr	r3, [pc, #312]	; (8004144 <vTask_Menu+0x144>)
 800400a:	60fb      	str	r3, [r7, #12]
						   "line ---> inicia \n";

	while(1)
	{
		//Se envia el mensaje del menu de opciones
		if(next_state == sMenuOperation){ xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY); }
 800400c:	4b4e      	ldr	r3, [pc, #312]	; (8004148 <vTask_Menu+0x148>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d108      	bne.n	8004026 <vTask_Menu+0x26>
 8004014:	4b4d      	ldr	r3, [pc, #308]	; (800414c <vTask_Menu+0x14c>)
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	f107 010c 	add.w	r1, r7, #12
 800401c:	2300      	movs	r3, #0
 800401e:	f04f 32ff 	mov.w	r2, #4294967295
 8004022:	f002 fc73 	bl	800690c <xQueueGenericSend>
		//Se espera por la recepcion de un comando
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2300      	movs	r3, #0
 800402e:	2200      	movs	r2, #0
 8004030:	2100      	movs	r1, #0
 8004032:	2000      	movs	r0, #0
 8004034:	f004 f8b6 	bl	80081a4 <xTaskGenericNotifyWait>
		//Se verificamos recibe el comando
		notify_status = xQueueReceive(xQueue_StructCommand, &xReceivedStructure, 0 );
 8004038:	4b45      	ldr	r3, [pc, #276]	; (8004150 <vTask_Menu+0x150>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f107 0110 	add.w	r1, r7, #16
 8004040:	2200      	movs	r2, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f002 fe0a 	bl	8006c5c <xQueueReceive>
 8004048:	6278      	str	r0, [r7, #36]	; 0x24
		//Se verificamos el tipo de comando
		if(notify_status == pdTRUE)
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	2b01      	cmp	r3, #1
 800404e:	d1dd      	bne.n	800400c <vTask_Menu+0xc>
		{
			if(strcmp(xReceivedStructure.send_cmd, "line") == 0)
 8004050:	f107 0310 	add.w	r3, r7, #16
 8004054:	493f      	ldr	r1, [pc, #252]	; (8004154 <vTask_Menu+0x154>)
 8004056:	4618      	mov	r0, r3
 8004058:	f7fc f8c2 	bl	80001e0 <strcmp>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <vTask_Menu+0x78>
			{
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Line, (uint32_t) xReceivedStructure.firtparameter, eSetValueWithoutOverwrite);
 8004062:	4b3d      	ldr	r3, [pc, #244]	; (8004158 <vTask_Menu+0x158>)
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	461a      	mov	r2, r3
 800406a:	2300      	movs	r3, #0
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	2304      	movs	r3, #4
 8004070:	2100      	movs	r1, #0
 8004072:	f004 f917 	bl	80082a4 <xTaskGenericNotify>
 8004076:	e7c9      	b.n	800400c <vTask_Menu+0xc>
			}
			else if(strcmp(xReceivedStructure.send_cmd, "turn") == 0)
 8004078:	f107 0310 	add.w	r3, r7, #16
 800407c:	4937      	ldr	r1, [pc, #220]	; (800415c <vTask_Menu+0x15c>)
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc f8ae 	bl	80001e0 <strcmp>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <vTask_Menu+0xa0>
			{
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Turn_itself, (uint32_t) &xReceivedStructure, eSetValueWithoutOverwrite);
 800408a:	4b35      	ldr	r3, [pc, #212]	; (8004160 <vTask_Menu+0x160>)
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	f107 0210 	add.w	r2, r7, #16
 8004092:	2300      	movs	r3, #0
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	2304      	movs	r3, #4
 8004098:	2100      	movs	r1, #0
 800409a:	f004 f903 	bl	80082a4 <xTaskGenericNotify>
 800409e:	e7b5      	b.n	800400c <vTask_Menu+0xc>
			}
			else if(strcmp(xReceivedStructure.send_cmd, "square") == 0)
 80040a0:	f107 0310 	add.w	r3, r7, #16
 80040a4:	492f      	ldr	r1, [pc, #188]	; (8004164 <vTask_Menu+0x164>)
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc f89a 	bl	80001e0 <strcmp>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <vTask_Menu+0xc8>
			{
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Square, (uint32_t) &xReceivedStructure, eSetValueWithoutOverwrite);
 80040b2:	4b2d      	ldr	r3, [pc, #180]	; (8004168 <vTask_Menu+0x168>)
 80040b4:	6818      	ldr	r0, [r3, #0]
 80040b6:	f107 0210 	add.w	r2, r7, #16
 80040ba:	2300      	movs	r3, #0
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	2304      	movs	r3, #4
 80040c0:	2100      	movs	r1, #0
 80040c2:	f004 f8ef 	bl	80082a4 <xTaskGenericNotify>
 80040c6:	e7a1      	b.n	800400c <vTask_Menu+0xc>
			}
			else if(strcmp(xReceivedStructure.send_cmd, "applyastar") == 0)
 80040c8:	f107 0310 	add.w	r3, r7, #16
 80040cc:	4927      	ldr	r1, [pc, #156]	; (800416c <vTask_Menu+0x16c>)
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc f886 	bl	80001e0 <strcmp>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <vTask_Menu+0xe2>
			{
				//Cambio de state
				next_state = sAStar;
 80040da:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <vTask_Menu+0x148>)
 80040dc:	2203      	movs	r2, #3
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	e794      	b.n	800400c <vTask_Menu+0xc>
			}
			else if(strcmp(xReceivedStructure.send_cmd, "exepathastar") == 0)
 80040e2:	f107 0310 	add.w	r3, r7, #16
 80040e6:	4922      	ldr	r1, [pc, #136]	; (8004170 <vTask_Menu+0x170>)
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fc f879 	bl	80001e0 <strcmp>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <vTask_Menu+0x108>
			{
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Execute_Astar, 0, eNoAction);
 80040f4:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <vTask_Menu+0x174>)
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	2300      	movs	r3, #0
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	2300      	movs	r3, #0
 80040fe:	2200      	movs	r2, #0
 8004100:	2100      	movs	r1, #0
 8004102:	f004 f8cf 	bl	80082a4 <xTaskGenericNotify>
 8004106:	e781      	b.n	800400c <vTask_Menu+0xc>
			}
			else
			{
				//Cambio de state
				next_state = sMenuOperation;
 8004108:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <vTask_Menu+0x148>)
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_com_invalid, portMAX_DELAY);
 800410e:	4b0f      	ldr	r3, [pc, #60]	; (800414c <vTask_Menu+0x14c>)
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	f04f 32ff 	mov.w	r2, #4294967295
 8004118:	4917      	ldr	r1, [pc, #92]	; (8004178 <vTask_Menu+0x178>)
 800411a:	f002 fbf7 	bl	800690c <xQueueGenericSend>
				/*Se envia una notificacion previa con la finalidad de desbloquear
				 la tarea, la cual se bloquea para que se envie el mensaje por USART*/
				xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 800411e:	4b17      	ldr	r3, [pc, #92]	; (800417c <vTask_Menu+0x17c>)
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	2300      	movs	r3, #0
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2300      	movs	r3, #0
 8004128:	2200      	movs	r2, #0
 800412a:	2100      	movs	r1, #0
 800412c:	f004 f8ba 	bl	80082a4 <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8004130:	f04f 33ff 	mov.w	r3, #4294967295
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	2300      	movs	r3, #0
 8004138:	2200      	movs	r2, #0
 800413a:	2100      	movs	r1, #0
 800413c:	2000      	movs	r0, #0
 800413e:	f004 f831 	bl	80081a4 <xTaskGenericNotifyWait>
		if(next_state == sMenuOperation){ xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY); }
 8004142:	e763      	b.n	800400c <vTask_Menu+0xc>
 8004144:	080142b4 	.word	0x080142b4
 8004148:	20000020 	.word	0x20000020
 800414c:	20000430 	.word	0x20000430
 8004150:	20000434 	.word	0x20000434
 8004154:	08014310 	.word	0x08014310
 8004158:	20000404 	.word	0x20000404
 800415c:	08014318 	.word	0x08014318
 8004160:	20000414 	.word	0x20000414
 8004164:	08014320 	.word	0x08014320
 8004168:	20000418 	.word	0x20000418
 800416c:	08014328 	.word	0x08014328
 8004170:	08014334 	.word	0x08014334
 8004174:	2000041c 	.word	0x2000041c
 8004178:	20000024 	.word	0x20000024
 800417c:	200003f8 	.word	0x200003f8

08004180 <vTask_Execute_Operation>:
}

//-----------------------Tareas de Operaciones--------------------
//------------Tarea grupo de eventos---------------
void vTask_Execute_Operation(void *pvParameters)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08e      	sub	sp, #56	; 0x38
 8004184:	af02      	add	r7, sp, #8
 8004186:	6078      	str	r0, [r7, #4]
	//Definicion de variables
	Parameters_Operation_t option_operation;
	const EventBits_t xBitsToWaitFor = (ENABLE_OPERATION_BIT | EXECUTE_OPERATION_BIT);
 8004188:	2303      	movs	r3, #3
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
	BaseType_t status;
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por lis bit eventos para generar una condicion de desbloqueo
		xEventGroupWaitBits(xEventGroup_Execute_Operation, xBitsToWaitFor, pdFALSE, pdTRUE, portMAX_DELAY);
 800418c:	4b3d      	ldr	r3, [pc, #244]	; (8004284 <vTask_Execute_Operation+0x104>)
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	f04f 33ff 	mov.w	r3, #4294967295
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	2301      	movs	r3, #1
 8004198:	2200      	movs	r2, #0
 800419a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800419c:	f002 f864 	bl	8006268 <xEventGroupWaitBits>
		//Impiamos el bit correspondiente a la ejecucion
		xEventGroupClearBits(xEventGroup_Execute_Operation, EXECUTE_OPERATION_BIT);
 80041a0:	4b38      	ldr	r3, [pc, #224]	; (8004284 <vTask_Execute_Operation+0x104>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2102      	movs	r1, #2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f002 f92c 	bl	8006404 <xEventGroupClearBits>
		//Recibimos las opciones de las operaciones
		status = xQueueReceive(xQueue_Operation, &option_operation, 0);
 80041ac:	4b36      	ldr	r3, [pc, #216]	; (8004288 <vTask_Execute_Operation+0x108>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f107 0108 	add.w	r1, r7, #8
 80041b4:	2200      	movs	r2, #0
 80041b6:	4618      	mov	r0, r3
 80041b8:	f002 fd50 	bl	8006c5c <xQueueReceive>
 80041bc:	62b8      	str	r0, [r7, #40]	; 0x28
		//Si se presenta una operacion se ejecuta
		if(status ==pdTRUE)
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d13a      	bne.n	800423a <vTask_Execute_Operation+0xba>
		{
			//Delay para espera la finalizacion del modo
			timer_delay(&handler_TIMER_Delay, &countingTimer, 500);
 80041c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041c8:	4930      	ldr	r1, [pc, #192]	; (800428c <vTask_Execute_Operation+0x10c>)
 80041ca:	4831      	ldr	r0, [pc, #196]	; (8004290 <vTask_Execute_Operation+0x110>)
 80041cc:	f005 fc5a 	bl	8009a84 <timer_delay>
			//Deacuerdo a la operacion se configura
			switch(option_operation.operacion)
 80041d0:	7a3b      	ldrb	r3, [r7, #8]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d002      	beq.n	80041dc <vTask_Execute_Operation+0x5c>
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d023      	beq.n	8004222 <vTask_Execute_Operation+0xa2>
				case TURN:{
					//Configuracion inicial del giro
					turn_itself(option_operation.grad_Rotative);
					break;
				}
				default:{ break; }
 80041da:	e051      	b.n	8004280 <vTask_Execute_Operation+0x100>
					change_coordinates_position(&parameter_Path_Robot, option_operation.x_destination, option_operation.y_destination,
 80041dc:	ed97 7b04 	vldr	d7, [r7, #16]
 80041e0:	ed97 6b06 	vldr	d6, [r7, #24]
 80041e4:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <vTask_Execute_Operation+0x114>)
 80041e6:	ed93 5b16 	vldr	d5, [r3, #88]	; 0x58
 80041ea:	4b2a      	ldr	r3, [pc, #168]	; (8004294 <vTask_Execute_Operation+0x114>)
 80041ec:	ed93 4b18 	vldr	d4, [r3, #96]	; 0x60
 80041f0:	eeb0 3a44 	vmov.f32	s6, s8
 80041f4:	eef0 3a64 	vmov.f32	s7, s9
 80041f8:	eeb0 2a45 	vmov.f32	s4, s10
 80041fc:	eef0 2a65 	vmov.f32	s5, s11
 8004200:	eeb0 1a46 	vmov.f32	s2, s12
 8004204:	eef0 1a66 	vmov.f32	s3, s13
 8004208:	eeb0 0a47 	vmov.f32	s0, s14
 800420c:	eef0 0a67 	vmov.f32	s1, s15
 8004210:	4820      	ldr	r0, [pc, #128]	; (8004294 <vTask_Execute_Operation+0x114>)
 8004212:	f7fe fc01 	bl	8002a18 <change_coordinates_position>
					straight_line(duttySetPoint);
 8004216:	4b20      	ldr	r3, [pc, #128]	; (8004298 <vTask_Execute_Operation+0x118>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f001 f990 	bl	8005540 <straight_line>
					break;
 8004220:	e02e      	b.n	8004280 <vTask_Execute_Operation+0x100>
					turn_itself(option_operation.grad_Rotative);
 8004222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	f7fc fcad 	bl	8000b88 <__aeabi_d2iz>
 800422e:	4603      	mov	r3, r0
 8004230:	b21b      	sxth	r3, r3
 8004232:	4618      	mov	r0, r3
 8004234:	f001 fa7c 	bl	8005730 <turn_itself>
					break;
 8004238:	e022      	b.n	8004280 <vTask_Execute_Operation+0x100>
			}
		}
		else
		{
			//Impiamos el bit correspondiente a la habilitacion
			xEventGroupClearBits(xEventGroup_Execute_Operation, ENABLE_OPERATION_BIT);
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <vTask_Execute_Operation+0x104>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2101      	movs	r1, #1
 8004240:	4618      	mov	r0, r3
 8004242:	f002 f8df 	bl	8006404 <xEventGroupClearBits>
			//cambio de status
			next_state = sMenuOperation;
 8004246:	4b15      	ldr	r3, [pc, #84]	; (800429c <vTask_Execute_Operation+0x11c>)
 8004248:	2201      	movs	r2, #1
 800424a:	701a      	strb	r2, [r3, #0]
			//Se envia la opcion especificada
			xQueueSend(xQueue_Print, &msg_finish_Operation, portMAX_DELAY);
 800424c:	4b14      	ldr	r3, [pc, #80]	; (80042a0 <vTask_Execute_Operation+0x120>)
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	2300      	movs	r3, #0
 8004252:	f04f 32ff 	mov.w	r2, #4294967295
 8004256:	4913      	ldr	r1, [pc, #76]	; (80042a4 <vTask_Execute_Operation+0x124>)
 8004258:	f002 fb58 	bl	800690c <xQueueGenericSend>
			/*Se envia una notificacion previa con la finalidad de desbloquear
			 la tarea, la cual se bloquea para que se envie el mensaje por USART*/
			xTaskNotify(xHandleTask_Execute_Operation, 0, eNoAction);
 800425c:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <vTask_Execute_Operation+0x128>)
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	2300      	movs	r3, #0
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	2300      	movs	r3, #0
 8004266:	2200      	movs	r2, #0
 8004268:	2100      	movs	r1, #0
 800426a:	f004 f81b 	bl	80082a4 <xTaskGenericNotify>
			xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 800426e:	f04f 33ff 	mov.w	r3, #4294967295
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	2300      	movs	r3, #0
 8004276:	2200      	movs	r2, #0
 8004278:	2100      	movs	r1, #0
 800427a:	2000      	movs	r0, #0
 800427c:	f003 ff92 	bl	80081a4 <xTaskGenericNotifyWait>
		xEventGroupWaitBits(xEventGroup_Execute_Operation, xBitsToWaitFor, pdFALSE, pdTRUE, portMAX_DELAY);
 8004280:	e784      	b.n	800418c <vTask_Execute_Operation+0xc>
 8004282:	bf00      	nop
 8004284:	20000448 	.word	0x20000448
 8004288:	2000043c 	.word	0x2000043c
 800428c:	200003c4 	.word	0x200003c4
 8004290:	200003b4 	.word	0x200003b4
 8004294:	20000458 	.word	0x20000458
 8004298:	20000018 	.word	0x20000018
 800429c:	20000020 	.word	0x20000020
 80042a0:	20000430 	.word	0x20000430
 80042a4:	2000002c 	.word	0x2000002c
 80042a8:	20000428 	.word	0x20000428

080042ac <vTask_Line>:
		}
	}
}
//------------Tarea linea---------------
void vTask_Line(void * pvParameters)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	6078      	str	r0, [r7, #4]
	//Definicion de variable de notificacion
	BaseType_t notify_status = {0};
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
	uint32_t parameter;

	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&parameter, portMAX_DELAY);
 80042b8:	f107 0308 	add.w	r3, r7, #8
 80042bc:	f04f 32ff 	mov.w	r2, #4294967295
 80042c0:	9200      	str	r2, [sp, #0]
 80042c2:	2200      	movs	r2, #0
 80042c4:	2100      	movs	r1, #0
 80042c6:	2000      	movs	r0, #0
 80042c8:	f003 ff6c 	bl	80081a4 <xTaskGenericNotifyWait>
 80042cc:	60f8      	str	r0, [r7, #12]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d1f1      	bne.n	80042b8 <vTask_Line+0xc>
		{
			//Definicion de parametros
			change_position(&parameter_Path_Robot, parameter, parameter_Path_Robot.goal_Position_x, parameter_Path_Robot.goal_Position_y);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	461a      	mov	r2, r3
 80042d8:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <vTask_Line+0x64>)
 80042da:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <vTask_Line+0x64>)
 80042e0:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 80042e4:	eeb0 1a46 	vmov.f32	s2, s12
 80042e8:	eef0 1a66 	vmov.f32	s3, s13
 80042ec:	eeb0 0a47 	vmov.f32	s0, s14
 80042f0:	eef0 0a67 	vmov.f32	s1, s15
 80042f4:	4611      	mov	r1, r2
 80042f6:	4806      	ldr	r0, [pc, #24]	; (8004310 <vTask_Line+0x64>)
 80042f8:	f7fe faf6 	bl	80028e8 <change_position>
			//Configuracion inicial linea recta
			straight_line(duttySetPoint);
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <vTask_Line+0x68>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f001 f91d 	bl	8005540 <straight_line>
			//Cambio de state
			next_state = sExecution;
 8004306:	4b04      	ldr	r3, [pc, #16]	; (8004318 <vTask_Line+0x6c>)
 8004308:	2202      	movs	r2, #2
 800430a:	701a      	strb	r2, [r3, #0]
		notify_status = xTaskNotifyWait(0,0,&parameter, portMAX_DELAY);
 800430c:	e7d4      	b.n	80042b8 <vTask_Line+0xc>
 800430e:	bf00      	nop
 8004310:	20000458 	.word	0x20000458
 8004314:	20000018 	.word	0x20000018
 8004318:	20000020 	.word	0x20000020

0800431c <vTask_Turn>:
		}
	}
}
//------Tarea de Turn------------
void vTask_Turn(void *pvParameters)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af02      	add	r7, sp, #8
 8004322:	6078      	str	r0, [r7, #4]
	//Definicion de variable
	BaseType_t notify_status = {0};
 8004324:	2300      	movs	r3, #0
 8004326:	613b      	str	r3, [r7, #16]
	uint32_t data;
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 8004328:	f107 0308 	add.w	r3, r7, #8
 800432c:	f04f 32ff 	mov.w	r2, #4294967295
 8004330:	9200      	str	r2, [sp, #0]
 8004332:	2200      	movs	r2, #0
 8004334:	2100      	movs	r1, #0
 8004336:	2000      	movs	r0, #0
 8004338:	f003 ff34 	bl	80081a4 <xTaskGenericNotifyWait>
 800433c:	6138      	str	r0, [r7, #16]
		xReceivedStructure = (command_t*)  data;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	60fb      	str	r3, [r7, #12]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d1ef      	bne.n	8004328 <vTask_Turn+0xc>
		{
			//Cambio de signo si e giro es hacia la derecha
			if(xReceivedStructure->secondparameter==1){ degrees = -1*xReceivedStructure->firtparameter;}
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d105      	bne.n	800435c <vTask_Turn+0x40>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	b29b      	uxth	r3, r3
 8004356:	425b      	negs	r3, r3
 8004358:	b29b      	uxth	r3, r3
 800435a:	82fb      	strh	r3, [r7, #22]
			//Configuracion inicial del giro
			turn_itself(degrees);
 800435c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004360:	4618      	mov	r0, r3
 8004362:	f001 f9e5 	bl	8005730 <turn_itself>
			//Cambio de state
			next_state = sExecution;
 8004366:	4b02      	ldr	r3, [pc, #8]	; (8004370 <vTask_Turn+0x54>)
 8004368:	2202      	movs	r2, #2
 800436a:	701a      	strb	r2, [r3, #0]
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 800436c:	e7dc      	b.n	8004328 <vTask_Turn+0xc>
 800436e:	bf00      	nop
 8004370:	20000020 	.word	0x20000020

08004374 <vTask_Square>:
		}
	}
}
//--------Tarea de Square------------
void vTask_Square(void *pvParameters)
{
 8004374:	b5b0      	push	{r4, r5, r7, lr}
 8004376:	f5ad 7d78 	sub.w	sp, sp, #992	; 0x3e0
 800437a:	af02      	add	r7, sp, #8
 800437c:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8004380:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8004384:	6018      	str	r0, [r3, #0]
	//Definicion de variable
	BaseType_t notify_status = {0};
 8004386:	2300      	movs	r3, #0
 8004388:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
	uint32_t data;
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 800438c:	f107 030c 	add.w	r3, r7, #12
 8004390:	f04f 32ff 	mov.w	r2, #4294967295
 8004394:	9200      	str	r2, [sp, #0]
 8004396:	2200      	movs	r2, #0
 8004398:	2100      	movs	r1, #0
 800439a:	2000      	movs	r0, #0
 800439c:	f003 ff02 	bl	80081a4 <xTaskGenericNotifyWait>
 80043a0:	f8c7 03d4 	str.w	r0, [r7, #980]	; 0x3d4
		xReceivedStructure = (command_t*)  data;
 80043a4:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80043a8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 80043b2:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d1e8      	bne.n	800438c <vTask_Square+0x18>
		{
			//Restablecimiento de coordenadas
			init_coordinates();
 80043ba:	f001 fa23 	bl	8005804 <init_coordinates>
			//Configuracion de operaciones
			set_operation_square(list_operation, xReceivedStructure->firtparameter, xReceivedStructure->secondparameter);
 80043be:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fc f8c5 	bl	8000554 <__aeabi_i2d>
 80043ca:	4604      	mov	r4, r0
 80043cc:	460d      	mov	r5, r1
 80043ce:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fc f8bd 	bl	8000554 <__aeabi_i2d>
 80043da:	f107 0310 	add.w	r3, r7, #16
 80043de:	ec41 0b11 	vmov	d1, r0, r1
 80043e2:	ec45 4b10 	vmov	d0, r4, r5
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fecc 	bl	8005184 <set_operation_square>
			//Definir operaciones en la cola de operaciones
			set_operation_in_queue(list_operation);
 80043ec:	f107 0310 	add.w	r3, r7, #16
 80043f0:	4618      	mov	r0, r3
 80043f2:	f001 f869 	bl	80054c8 <set_operation_in_queue>
			//Cambio de state
			next_state = sExecution;
 80043f6:	4b02      	ldr	r3, [pc, #8]	; (8004400 <vTask_Square+0x8c>)
 80043f8:	2202      	movs	r2, #2
 80043fa:	701a      	strb	r2, [r3, #0]
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 80043fc:	e7c6      	b.n	800438c <vTask_Square+0x18>
 80043fe:	bf00      	nop
 8004400:	20000020 	.word	0x20000020

08004404 <vTask_Execute_AStar>:
		}
	}
}
//------------Tarea execute Astar--------------
void vTask_Execute_AStar(void * pvParameters)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 800440a:	af02      	add	r7, sp, #8
 800440c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004410:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8004414:	6018      	str	r0, [r3, #0]
	//Definicion de variable de notificacion
	BaseType_t notify_status = {0};
 8004416:	2300      	movs	r3, #0
 8004418:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
	uint8_t status = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db
	const char *msg_Fail_Execute_Path = "El path generado por AStar no se a establecido \n";
 8004422:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <vTask_Execute_AStar+0xd4>)
 8004424:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
	Parameters_Operation_t list_operation[30];
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&parameter, portMAX_DELAY);
 8004428:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800442c:	f04f 32ff 	mov.w	r2, #4294967295
 8004430:	9200      	str	r2, [sp, #0]
 8004432:	2200      	movs	r2, #0
 8004434:	2100      	movs	r1, #0
 8004436:	2000      	movs	r0, #0
 8004438:	f003 feb4 	bl	80081a4 <xTaskGenericNotifyWait>
 800443c:	f8c7 03dc 	str.w	r0, [r7, #988]	; 0x3dc
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8004440:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8004444:	2b01      	cmp	r3, #1
 8004446:	d1ef      	bne.n	8004428 <vTask_Execute_AStar+0x24>
		{
			//Se verifica si hay un path ya disponible en el Mailbox
			status = uxQueueMessagesWaiting(xMailbox_Path);
 8004448:	4b24      	ldr	r3, [pc, #144]	; (80044dc <vTask_Execute_AStar+0xd8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f002 fe56 	bl	80070fe <uxQueueMessagesWaiting>
 8004452:	4603      	mov	r3, r0
 8004454:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db
			if(status != 0)
 8004458:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01b      	beq.n	8004498 <vTask_Execute_AStar+0x94>
			{
				//Recepccion del Path
				xQueuePeek(xMailbox_Mode, &file_path, portMAX_DELAY);
 8004460:	4b1f      	ldr	r3, [pc, #124]	; (80044e0 <vTask_Execute_AStar+0xdc>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f507 7173 	add.w	r1, r7, #972	; 0x3cc
 8004468:	f04f 32ff 	mov.w	r2, #4294967295
 800446c:	4618      	mov	r0, r3
 800446e:	f002 fcd5 	bl	8006e1c <xQueuePeek>
				//Restablecimiento de coordenadas
				init_coordinates();
 8004472:	f001 f9c7 	bl	8005804 <init_coordinates>
				//Configuracion de operaciones
				set_operation_AStar(list_operation, file_path, &parameter_Posicion_Robot, &parameter_Path_Robot);
 8004476:	f8d7 13cc 	ldr.w	r1, [r7, #972]	; 0x3cc
 800447a:	f107 0008 	add.w	r0, r7, #8
 800447e:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <vTask_Execute_AStar+0xe0>)
 8004480:	4a19      	ldr	r2, [pc, #100]	; (80044e8 <vTask_Execute_AStar+0xe4>)
 8004482:	f000 ff3d 	bl	8005300 <set_operation_AStar>
				//Definir operaciones en la cola de operaciones
				set_operation_in_queue(list_operation);
 8004486:	f107 0308 	add.w	r3, r7, #8
 800448a:	4618      	mov	r0, r3
 800448c:	f001 f81c 	bl	80054c8 <set_operation_in_queue>
				//Cambio de state
				next_state = sExecution;
 8004490:	4b16      	ldr	r3, [pc, #88]	; (80044ec <vTask_Execute_AStar+0xe8>)
 8004492:	2202      	movs	r2, #2
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	e7c7      	b.n	8004428 <vTask_Execute_AStar+0x24>
			}
			else
			{
				  //Se envia la opcion especificada
				  xQueueSend(xQueue_Print, &msg_Fail_Execute_Path, portMAX_DELAY);
 8004498:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <vTask_Execute_AStar+0xec>)
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	f507 7175 	add.w	r1, r7, #980	; 0x3d4
 80044a0:	2300      	movs	r3, #0
 80044a2:	f04f 32ff 	mov.w	r2, #4294967295
 80044a6:	f002 fa31 	bl	800690c <xQueueGenericSend>
				  /*Se envia una notificacion previa con la finalidad de desbloquear
					 la tarea, la cual se bloquea para que se envie el mensaje por USART*/
				  xTaskNotify(xHandleTask_Execute_Astar, 0, eNoAction);
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <vTask_Execute_AStar+0xf0>)
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	2300      	movs	r3, #0
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	2300      	movs	r3, #0
 80044b4:	2200      	movs	r2, #0
 80044b6:	2100      	movs	r1, #0
 80044b8:	f003 fef4 	bl	80082a4 <xTaskGenericNotify>
				  xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 80044bc:	f04f 33ff 	mov.w	r3, #4294967295
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	2300      	movs	r3, #0
 80044c4:	2200      	movs	r2, #0
 80044c6:	2100      	movs	r1, #0
 80044c8:	2000      	movs	r0, #0
 80044ca:	f003 fe6b 	bl	80081a4 <xTaskGenericNotifyWait>
				  //cambio de status
				  next_state = sMenuOperation;
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <vTask_Execute_AStar+0xe8>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	701a      	strb	r2, [r3, #0]
		notify_status = xTaskNotifyWait(0,0,&parameter, portMAX_DELAY);
 80044d4:	e7a8      	b.n	8004428 <vTask_Execute_AStar+0x24>
 80044d6:	bf00      	nop
 80044d8:	08014344 	.word	0x08014344
 80044dc:	20000444 	.word	0x20000444
 80044e0:	20000440 	.word	0x20000440
 80044e4:	20000458 	.word	0x20000458
 80044e8:	200004d8 	.word	0x200004d8
 80044ec:	20000020 	.word	0x20000020
 80044f0:	20000430 	.word	0x20000430
 80044f4:	2000041c 	.word	0x2000041c

080044f8 <vTask_Separate_GripMap>:


//--------------Tareas de aplicacion de AStar---------------
//------Tarea de separacion del grip map------------
void vTask_Separate_GripMap(void *pvParameters)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	f5ad 4d0b 	sub.w	sp, sp, #35584	; 0x8b00
 80044fe:	b0ac      	sub	sp, #176	; 0xb0
 8004500:	af02      	add	r7, sp, #8
 8004502:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 8004506:	f6a3 33a4 	subw	r3, r3, #2980	; 0xba4
 800450a:	6018      	str	r0, [r3, #0]
	//Definicion de variable
	BaseType_t notify_status = {0};
 800450c:	2300      	movs	r3, #0
 800450e:	f507 420b 	add.w	r2, r7, #35584	; 0x8b00
 8004512:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8004516:	6013      	str	r3, [r2, #0]
	char *xReceivedString;
	char parameterStringGM[500];
	uint32_t data;
	item_A_Star_t xitemAStar = {0};
 8004518:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 800451c:	f6a3 339c 	subw	r3, r3, #2972	; 0xb9c
 8004520:	4618      	mov	r0, r3
 8004522:	f648 1398 	movw	r3, #35224	; 0x8998
 8004526:	461a      	mov	r2, r3
 8004528:	2100      	movs	r1, #0
 800452a:	f008 f87f 	bl	800c62c <memset>
	uint8_t status_separate;
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 800452e:	f507 4309 	add.w	r3, r7, #35072	; 0x8900
 8004532:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8004536:	f04f 32ff 	mov.w	r2, #4294967295
 800453a:	9200      	str	r2, [sp, #0]
 800453c:	2200      	movs	r2, #0
 800453e:	2100      	movs	r1, #0
 8004540:	2000      	movs	r0, #0
 8004542:	f003 fe2f 	bl	80081a4 <xTaskGenericNotifyWait>
 8004546:	f507 430b 	add.w	r3, r7, #35584	; 0x8b00
 800454a:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800454e:	6018      	str	r0, [r3, #0]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8004550:	f507 430b 	add.w	r3, r7, #35584	; 0x8b00
 8004554:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d1e7      	bne.n	800452e <vTask_Separate_GripMap+0x36>
		{
			//Se realiza un casting
			xReceivedString = (char*)  data;
 800455e:	f507 430b 	add.w	r3, r7, #35584	; 0x8b00
 8004562:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8004566:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f507 420b 	add.w	r2, r7, #35584	; 0x8b00
 8004570:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 8004574:	6013      	str	r3, [r2, #0]
			//Se realiza una copia del string
		    memcpy(parameterStringGM, xReceivedString, 500 * sizeof(char));
 8004576:	f507 430b 	add.w	r3, r7, #35584	; 0x8b00
 800457a:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 800457e:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8004582:	f507 430b 	add.w	r3, r7, #35584	; 0x8b00
 8004586:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004594:	461a      	mov	r2, r3
 8004596:	f008 f83b 	bl	800c610 <memcpy>
			//-------------Separar el String en los parametros del grid map-------------
		    status_separate = Separate_parameters(&xitemAStar, parameterStringGM);
 800459a:	f507 4209 	add.w	r2, r7, #35072	; 0x8900
 800459e:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 80045a2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80045a6:	3b9c      	subs	r3, #156	; 0x9c
 80045a8:	4611      	mov	r1, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 faf2 	bl	8005b94 <Separate_parameters>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f507 420b 	add.w	r2, r7, #35584	; 0x8b00
 80045b6:	f102 029f 	add.w	r2, r2, #159	; 0x9f
 80045ba:	7013      	strb	r3, [r2, #0]
		    //Se verifica el estado de la separacion
		    if(status_separate)
 80045bc:	f507 430b 	add.w	r3, r7, #35584	; 0x8b00
 80045c0:	f103 039f 	add.w	r3, r3, #159	; 0x9f
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <vTask_Separate_GripMap+0xea>
		    {
		    	//Notificamos a la tarea respectiva
		    	xTaskNotify(xHandleTask_Apply_Astar, (uint32_t) &xitemAStar, eSetValueWithoutOverwrite);
 80045ca:	4b15      	ldr	r3, [pc, #84]	; (8004620 <vTask_Separate_GripMap+0x128>)
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80045d2:	3a9c      	subs	r2, #156	; 0x9c
 80045d4:	2300      	movs	r3, #0
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2304      	movs	r3, #4
 80045da:	2100      	movs	r1, #0
 80045dc:	f003 fe62 	bl	80082a4 <xTaskGenericNotify>
 80045e0:	e7a5      	b.n	800452e <vTask_Separate_GripMap+0x36>
		    }
		    else
		    {
				//cambio de status
				next_state = sMenuOperation;
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <vTask_Separate_GripMap+0x12c>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_fail, portMAX_DELAY);
 80045e8:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <vTask_Separate_GripMap+0x130>)
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	2300      	movs	r3, #0
 80045ee:	f04f 32ff 	mov.w	r2, #4294967295
 80045f2:	490e      	ldr	r1, [pc, #56]	; (800462c <vTask_Separate_GripMap+0x134>)
 80045f4:	f002 f98a 	bl	800690c <xQueueGenericSend>
				/*Se envia una notificacion previa con la finalidad de desbloquear
				 la tarea, la cual se bloquea para que se envie el mensaje por USART*/
				xTaskNotify(xHandleTask_Separate_GridMap, 0, eNoAction);
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <vTask_Separate_GripMap+0x138>)
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	2300      	movs	r3, #0
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	2300      	movs	r3, #0
 8004602:	2200      	movs	r2, #0
 8004604:	2100      	movs	r1, #0
 8004606:	f003 fe4d 	bl	80082a4 <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 800460a:	f04f 33ff 	mov.w	r3, #4294967295
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2300      	movs	r3, #0
 8004612:	2200      	movs	r2, #0
 8004614:	2100      	movs	r1, #0
 8004616:	2000      	movs	r0, #0
 8004618:	f003 fdc4 	bl	80081a4 <xTaskGenericNotifyWait>
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 800461c:	e787      	b.n	800452e <vTask_Separate_GripMap+0x36>
 800461e:	bf00      	nop
 8004620:	20000424 	.word	0x20000424
 8004624:	20000020 	.word	0x20000020
 8004628:	20000430 	.word	0x20000430
 800462c:	20000030 	.word	0x20000030
 8004630:	20000420 	.word	0x20000420

08004634 <vTask_Apply_Astar>:
		}
	}
}
//------Tarea de Aplicacion de A Star------------
void vTask_Apply_Astar(void * pvParameters)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af02      	add	r7, sp, #8
 800463a:	6078      	str	r0, [r7, #4]
	//Definicion de variable
	BaseType_t notify_status = {0};
 800463c:	2300      	movs	r3, #0
 800463e:	61fb      	str	r3, [r7, #28]
	uint32_t data;
	item_A_Star_t *xReceivedItemGripMap;
	file_cell_t *file_path;
	const char *msg_Finish_AStar = "Calculo de A Star Finalizado \n";
 8004640:	4b41      	ldr	r3, [pc, #260]	; (8004748 <vTask_Apply_Astar+0x114>)
 8004642:	60fb      	str	r3, [r7, #12]
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	f04f 32ff 	mov.w	r2, #4294967295
 800464c:	9200      	str	r2, [sp, #0]
 800464e:	2200      	movs	r2, #0
 8004650:	2100      	movs	r1, #0
 8004652:	2000      	movs	r0, #0
 8004654:	f003 fda6 	bl	80081a4 <xTaskGenericNotifyWait>
 8004658:	61f8      	str	r0, [r7, #28]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d1f1      	bne.n	8004644 <vTask_Apply_Astar+0x10>
		{
		  //Se realiza un casting
		  xReceivedItemGripMap = (item_A_Star_t*)  data;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	61bb      	str	r3, [r7, #24]
		  //----------------------------------Inicio A Star----------------------------------
		  //---------Creacion de la malla con cada una de sus celdas-----------
		  build_grid_map(xReceivedItemGripMap->grid_map, xReceivedItemGripMap->grid_map_row,
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	f103 0018 	add.w	r0, r3, #24
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	7819      	ldrb	r1, [r3, #0]
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	785a      	ldrb	r2, [r3, #1]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	edd3 7a01 	vldr	s15, [r3, #4]
 8004678:	eeb0 0a67 	vmov.f32	s0, s15
 800467c:	f7fe fc5a 	bl	8002f34 <build_grid_map>
				  xReceivedItemGripMap->grid_map_colum, xReceivedItemGripMap->cell_separation);
		  //-------Calculo de la heuristica de la celda de acuerdo a la posicion objetivo-------
		  heuristic_cell_map(xReceivedItemGripMap->grid_map, xReceivedItemGripMap->grid_map_row,
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f103 0018 	add.w	r0, r3, #24
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	7819      	ldrb	r1, [r3, #0]
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	785a      	ldrb	r2, [r3, #1]
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	edd3 7a04 	vldr	s15, [r3, #16]
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	ed93 7a05 	vldr	s14, [r3, #20]
 800469a:	eef0 0a47 	vmov.f32	s1, s14
 800469e:	eeb0 0a67 	vmov.f32	s0, s15
 80046a2:	f7fd fad3 	bl	8001c4c <heuristic_cell_map>
				  xReceivedItemGripMap->grid_map_colum, xReceivedItemGripMap->goal_x, xReceivedItemGripMap->goal_y);
		  //------------------Aplicacion del algoritmo A star------------------
		  file_path = aplicattion_A_Star(xReceivedItemGripMap->grid_map, xReceivedItemGripMap->grid_map_row, xReceivedItemGripMap->grid_map_colum,
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	f103 0018 	add.w	r0, r3, #24
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	7819      	ldrb	r1, [r3, #0]
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	785a      	ldrb	r2, [r3, #1]
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	ed93 7a03 	vldr	s14, [r3, #12]
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	edd3 6a04 	vldr	s13, [r3, #16]
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	ed93 6a05 	vldr	s12, [r3, #20]
 80046cc:	eef0 1a46 	vmov.f32	s3, s12
 80046d0:	eeb0 1a66 	vmov.f32	s2, s13
 80046d4:	eef0 0a47 	vmov.f32	s1, s14
 80046d8:	eeb0 0a67 	vmov.f32	s0, s15
 80046dc:	f7fc fdea 	bl	80012b4 <aplicattion_A_Star>
 80046e0:	4603      	mov	r3, r0
 80046e2:	613b      	str	r3, [r7, #16]
				  xReceivedItemGripMap->start_x, xReceivedItemGripMap->start_y, xReceivedItemGripMap->goal_x, xReceivedItemGripMap->goal_y);
		  //-----------------Impresion de la ruta encontrada--------------------
		  send_path(file_path, xReceivedItemGripMap->grid_map, xReceivedItemGripMap->grid_map_row, xReceivedItemGripMap->grid_map_colum);
 80046e4:	6938      	ldr	r0, [r7, #16]
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	f103 0118 	add.w	r1, r3, #24
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	781a      	ldrb	r2, [r3, #0]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	f001 fbc0 	bl	8005e78 <send_path>
		  //----------------------------------Fin A Star----------------------------------
		  //Envio de file path a MailBox
		  xQueueOverwrite(xMailbox_Path, &file_path);
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <vTask_Apply_Astar+0x118>)
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	f107 0110 	add.w	r1, r7, #16
 8004700:	2302      	movs	r3, #2
 8004702:	2200      	movs	r2, #0
 8004704:	f002 f902 	bl	800690c <xQueueGenericSend>
		  //Se envia la opcion especificada
		  xQueueSend(xQueue_Print, &msg_Finish_AStar, portMAX_DELAY);
 8004708:	4b11      	ldr	r3, [pc, #68]	; (8004750 <vTask_Apply_Astar+0x11c>)
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	f107 010c 	add.w	r1, r7, #12
 8004710:	2300      	movs	r3, #0
 8004712:	f04f 32ff 	mov.w	r2, #4294967295
 8004716:	f002 f8f9 	bl	800690c <xQueueGenericSend>
		  /*Se envia una notificacion previa con la finalidad de desbloquear
			 la tarea, la cual se bloquea para que se envie el mensaje por USART*/
		  xTaskNotify(xHandleTask_Apply_Astar, 0, eNoAction);
 800471a:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <vTask_Apply_Astar+0x120>)
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	2300      	movs	r3, #0
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	2300      	movs	r3, #0
 8004724:	2200      	movs	r2, #0
 8004726:	2100      	movs	r1, #0
 8004728:	f003 fdbc 	bl	80082a4 <xTaskGenericNotify>
		  xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 800472c:	f04f 33ff 	mov.w	r3, #4294967295
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	2300      	movs	r3, #0
 8004734:	2200      	movs	r2, #0
 8004736:	2100      	movs	r1, #0
 8004738:	2000      	movs	r0, #0
 800473a:	f003 fd33 	bl	80081a4 <xTaskGenericNotifyWait>
		  //cambio de status
		  next_state = sMenuOperation;
 800473e:	4b06      	ldr	r3, [pc, #24]	; (8004758 <vTask_Apply_Astar+0x124>)
 8004740:	2201      	movs	r2, #1
 8004742:	701a      	strb	r2, [r3, #0]
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 8004744:	e77e      	b.n	8004644 <vTask_Apply_Astar+0x10>
 8004746:	bf00      	nop
 8004748:	08014378 	.word	0x08014378
 800474c:	20000444 	.word	0x20000444
 8004750:	20000430 	.word	0x20000430
 8004754:	20000424 	.word	0x20000424
 8004758:	20000020 	.word	0x20000020

0800475c <vTask_Stop>:


//--------------Tareas de parada de operacion---------------
//------------Tarea de Stop---------------
void vTask_Stop(void * pvParameters)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	; 0x30
 8004760:	af02      	add	r7, sp, #8
 8004762:	6078      	str	r0, [r7, #4]
	//Variables para la recepcion
	command_t xReceivedStructure;
	BaseType_t notify_status;
	const EventBits_t xBitsToWaitFor = (ENABLE_OPERATION_BIT | EXECUTE_OPERATION_BIT);
 8004764:	2303      	movs	r3, #3
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la recepcion de un comando
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004768:	f04f 33ff 	mov.w	r3, #4294967295
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	2300      	movs	r3, #0
 8004770:	2200      	movs	r2, #0
 8004772:	2100      	movs	r1, #0
 8004774:	2000      	movs	r0, #0
 8004776:	f003 fd15 	bl	80081a4 <xTaskGenericNotifyWait>
		//Se verificamos recibe el comando
		notify_status = xQueueReceive(xQueue_StructCommand, &xReceivedStructure, 0 );
 800477a:	4b20      	ldr	r3, [pc, #128]	; (80047fc <vTask_Stop+0xa0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f107 010c 	add.w	r1, r7, #12
 8004782:	2200      	movs	r2, #0
 8004784:	4618      	mov	r0, r3
 8004786:	f002 fa69 	bl	8006c5c <xQueueReceive>
 800478a:	6238      	str	r0, [r7, #32]
		//Se verificamos el tipo de comando
		if(notify_status == pdTRUE)
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d1ea      	bne.n	8004768 <vTask_Stop+0xc>
		{
			if(strcmp(xReceivedStructure.send_cmd, "stop") == 0)
 8004792:	f107 030c 	add.w	r3, r7, #12
 8004796:	491a      	ldr	r1, [pc, #104]	; (8004800 <vTask_Stop+0xa4>)
 8004798:	4618      	mov	r0, r3
 800479a:	f7fb fd21 	bl	80001e0 <strcmp>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d126      	bne.n	80047f2 <vTask_Stop+0x96>
			{
				//Se lee el grupo de eventos para limpiar posibles eventos si fuera necesario
			    xEventGroupClearBits(xEventGroup_Execute_Operation, xBitsToWaitFor);
 80047a4:	4b17      	ldr	r3, [pc, #92]	; (8004804 <vTask_Stop+0xa8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 fe2a 	bl	8006404 <xEventGroupClearBits>
				//Paramos los motores
				status_motor(RESET);
 80047b0:	2000      	movs	r0, #0
 80047b2:	f001 f8a9 	bl	8005908 <status_motor>
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_stop, portMAX_DELAY);
 80047b6:	4b14      	ldr	r3, [pc, #80]	; (8004808 <vTask_Stop+0xac>)
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	2300      	movs	r3, #0
 80047bc:	f04f 32ff 	mov.w	r2, #4294967295
 80047c0:	4912      	ldr	r1, [pc, #72]	; (800480c <vTask_Stop+0xb0>)
 80047c2:	f002 f8a3 	bl	800690c <xQueueGenericSend>
				/*Se envia una notificacion previa con la finalidad de desbloquear
				 la tarea, la cual se bloquea para que se envie el mensaje por USART*/
				xTaskNotify(xHandleTask_Stop, 0, eNoAction);
 80047c6:	4b12      	ldr	r3, [pc, #72]	; (8004810 <vTask_Stop+0xb4>)
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	2300      	movs	r3, #0
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	2300      	movs	r3, #0
 80047d0:	2200      	movs	r2, #0
 80047d2:	2100      	movs	r1, #0
 80047d4:	f003 fd66 	bl	80082a4 <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 80047d8:	f04f 33ff 	mov.w	r3, #4294967295
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	2300      	movs	r3, #0
 80047e0:	2200      	movs	r2, #0
 80047e2:	2100      	movs	r1, #0
 80047e4:	2000      	movs	r0, #0
 80047e6:	f003 fcdd 	bl	80081a4 <xTaskGenericNotifyWait>
				//cambio de status
				next_state = sMenuOperation;
 80047ea:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <vTask_Stop+0xb8>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	e7ba      	b.n	8004768 <vTask_Stop+0xc>
			}
			else
			{
				//cambio de status
				next_state = sExecution;
 80047f2:	4b08      	ldr	r3, [pc, #32]	; (8004814 <vTask_Stop+0xb8>)
 80047f4:	2202      	movs	r2, #2
 80047f6:	701a      	strb	r2, [r3, #0]
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80047f8:	e7b6      	b.n	8004768 <vTask_Stop+0xc>
 80047fa:	bf00      	nop
 80047fc:	20000434 	.word	0x20000434
 8004800:	08014398 	.word	0x08014398
 8004804:	20000448 	.word	0x20000448
 8004808:	20000430 	.word	0x20000430
 800480c:	20000028 	.word	0x20000028
 8004810:	20000408 	.word	0x20000408
 8004814:	20000020 	.word	0x20000020

08004818 <vTask_Stop_Execute>:
		}
	}
}
//------------Tarea de parada en ejecucccion---------------
void vTask_Stop_Execute(void * pvParameters)
{
 8004818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800481c:	b086      	sub	sp, #24
 800481e:	af02      	add	r7, sp, #8
 8004820:	6078      	str	r0, [r7, #4]
	//Definicion de variable
	BaseType_t notify_status = {0};
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
	uint8_t mode = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	72fb      	strb	r3, [r7, #11]

	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800482a:	f04f 33ff 	mov.w	r3, #4294967295
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	2300      	movs	r3, #0
 8004832:	2200      	movs	r2, #0
 8004834:	2100      	movs	r1, #0
 8004836:	2000      	movs	r0, #0
 8004838:	f003 fcb4 	bl	80081a4 <xTaskGenericNotifyWait>
 800483c:	60f8      	str	r0, [r7, #12]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d1f2      	bne.n	800482a <vTask_Stop_Execute+0x12>
		{
			//verificamos el modo
			xQueuePeek(xMailbox_Mode, &mode, portMAX_DELAY);
 8004844:	4b37      	ldr	r3, [pc, #220]	; (8004924 <vTask_Stop_Execute+0x10c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f107 010b 	add.w	r1, r7, #11
 800484c:	f04f 32ff 	mov.w	r2, #4294967295
 8004850:	4618      	mov	r0, r3
 8004852:	f002 fae3 	bl	8006e1c <xQueuePeek>
			//Verificamos las condiciones de parada
			if(mode==1)
 8004856:	7afb      	ldrb	r3, [r7, #11]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d136      	bne.n	80048ca <vTask_Stop_Execute+0xb2>
			{
				if(distance_traveled(&parameter_Path_Robot, parameter_Posicion_Robot.xg_position, parameter_Posicion_Robot.yg_position)>parameter_Path_Robot.line_Distance){
 800485c:	4b32      	ldr	r3, [pc, #200]	; (8004928 <vTask_Stop_Execute+0x110>)
 800485e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8004862:	4b31      	ldr	r3, [pc, #196]	; (8004928 <vTask_Stop_Execute+0x110>)
 8004864:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8004868:	eeb0 1a46 	vmov.f32	s2, s12
 800486c:	eef0 1a66 	vmov.f32	s3, s13
 8004870:	eeb0 0a47 	vmov.f32	s0, s14
 8004874:	eef0 0a67 	vmov.f32	s1, s15
 8004878:	482c      	ldr	r0, [pc, #176]	; (800492c <vTask_Stop_Execute+0x114>)
 800487a:	f7fe fa25 	bl	8002cc8 <distance_traveled>
 800487e:	ec5b ab10 	vmov	sl, fp, d0
 8004882:	4b2a      	ldr	r3, [pc, #168]	; (800492c <vTask_Stop_Execute+0x114>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	4618      	mov	r0, r3
 8004888:	f7fb fe64 	bl	8000554 <__aeabi_i2d>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4650      	mov	r0, sl
 8004892:	4659      	mov	r1, fp
 8004894:	f7fc f958 	bl	8000b48 <__aeabi_dcmpgt>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d041      	beq.n	8004922 <vTask_Stop_Execute+0x10a>
					//desactivamos los motores
					status_motor(RESET);
 800489e:	2000      	movs	r0, #0
 80048a0:	f001 f832 	bl	8005908 <status_motor>
					//Guardamos la posicion final
					parameter_Posicion_Robot.xg_position_inicial = parameter_Posicion_Robot.xg_position;
 80048a4:	4b20      	ldr	r3, [pc, #128]	; (8004928 <vTask_Stop_Execute+0x110>)
 80048a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80048aa:	491f      	ldr	r1, [pc, #124]	; (8004928 <vTask_Stop_Execute+0x110>)
 80048ac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
					parameter_Posicion_Robot.yg_position_inicial = parameter_Posicion_Robot.yg_position;
 80048b0:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <vTask_Stop_Execute+0x110>)
 80048b2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80048b6:	491c      	ldr	r1, [pc, #112]	; (8004928 <vTask_Stop_Execute+0x110>)
 80048b8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
					//Se establece un Event Flag
					xEventGroupSetBits(xEventGroup_Execute_Operation, EXECUTE_OPERATION_BIT);
 80048bc:	4b1c      	ldr	r3, [pc, #112]	; (8004930 <vTask_Stop_Execute+0x118>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2102      	movs	r1, #2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 fdd6 	bl	8006474 <xEventGroupSetBits>
 80048c8:	e7af      	b.n	800482a <vTask_Stop_Execute+0x12>
				}
			}
			else if(mode==2)
 80048ca:	7afb      	ldrb	r3, [r7, #11]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d127      	bne.n	8004920 <vTask_Stop_Execute+0x108>
			{
				if(fabs(ang_complementary) > fabs(parameter_Path_Robot.rotative_Grad_Relative)){
 80048d0:	4b18      	ldr	r3, [pc, #96]	; (8004934 <vTask_Stop_Execute+0x11c>)
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	4614      	mov	r4, r2
 80048d8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80048dc:	4b13      	ldr	r3, [pc, #76]	; (800492c <vTask_Stop_Execute+0x114>)
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fb fe37 	bl	8000554 <__aeabi_i2d>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4690      	mov	r8, r2
 80048ec:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	4620      	mov	r0, r4
 80048f6:	4629      	mov	r1, r5
 80048f8:	f7fc f926 	bl	8000b48 <__aeabi_dcmpgt>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00f      	beq.n	8004922 <vTask_Stop_Execute+0x10a>
					//Paramos los motores
					status_motor(RESET);
 8004902:	2000      	movs	r0, #0
 8004904:	f001 f800 	bl	8005908 <status_motor>
					updateDirMotor(handler_Motor_Execute);
 8004908:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <vTask_Stop_Execute+0x120>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7fd fef8 	bl	8002702 <updateDirMotor>
					//Se establece un Event Flag
					xEventGroupSetBits(xEventGroup_Execute_Operation, EXECUTE_OPERATION_BIT);
 8004912:	4b07      	ldr	r3, [pc, #28]	; (8004930 <vTask_Stop_Execute+0x118>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2102      	movs	r1, #2
 8004918:	4618      	mov	r0, r3
 800491a:	f001 fdab 	bl	8006474 <xEventGroupSetBits>
 800491e:	e784      	b.n	800482a <vTask_Stop_Execute+0x12>
				}
			}
			else{ __NOP(); }
 8004920:	bf00      	nop
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004922:	e782      	b.n	800482a <vTask_Stop_Execute+0x12>
 8004924:	20000440 	.word	0x20000440
 8004928:	200004d8 	.word	0x200004d8
 800492c:	20000458 	.word	0x20000458
 8004930:	20000448 	.word	0x20000448
 8004934:	200004d0 	.word	0x200004d0
 8004938:	20000454 	.word	0x20000454
 800493c:	00000000 	.word	0x00000000

08004940 <vTask_Measure>:


//-----------Tareas correspondientes durante la ejecucion de operaciones--------
//------------Tarea de mediciones---------------
void vTask_Measure(void * pvParameters)
{
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	ed2d 8b02 	vpush	{d8}
 8004946:	b087      	sub	sp, #28
 8004948:	af02      	add	r7, sp, #8
 800494a:	6078      	str	r0, [r7, #4]
	//Definicion de variable
	BaseType_t notify_status = {0};
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
	uint8_t mode = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	72fb      	strb	r3, [r7, #11]
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004954:	f04f 33ff 	mov.w	r3, #4294967295
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	2300      	movs	r3, #0
 800495c:	2200      	movs	r2, #0
 800495e:	2100      	movs	r1, #0
 8004960:	2000      	movs	r0, #0
 8004962:	f003 fc1f 	bl	80081a4 <xTaskGenericNotifyWait>
 8004966:	60f8      	str	r0, [r7, #12]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d1f2      	bne.n	8004954 <vTask_Measure+0x14>
		{
			//----------------Accion a Realizar con el tiempo del TIMER--------------------
			//Leemos el angulo
			parameter_Posicion_Robot.grad_relativo = getAngle(&handler_MPUAccel_MPU6050, period_sampling, parameter_Posicion_Robot.grad_relativo, READ_GYRO_Z, gyro_offset);
 800496e:	4bb4      	ldr	r3, [pc, #720]	; (8004c40 <vTask_Measure+0x300>)
 8004970:	781c      	ldrb	r4, [r3, #0]
 8004972:	4bb4      	ldr	r3, [pc, #720]	; (8004c44 <vTask_Measure+0x304>)
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	4610      	mov	r0, r2
 800497a:	4619      	mov	r1, r3
 800497c:	f7fc f94c 	bl	8000c18 <__aeabi_d2f>
 8004980:	4601      	mov	r1, r0
 8004982:	4bb1      	ldr	r3, [pc, #708]	; (8004c48 <vTask_Measure+0x308>)
 8004984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004988:	2205      	movs	r2, #5
 800498a:	ee00 1a10 	vmov	s0, r1
 800498e:	4621      	mov	r1, r4
 8004990:	48ae      	ldr	r0, [pc, #696]	; (8004c4c <vTask_Measure+0x30c>)
 8004992:	f7fd fe69 	bl	8002668 <getAngle>
 8004996:	ee10 3a10 	vmov	r3, s0
 800499a:	4618      	mov	r0, r3
 800499c:	f7fb fdec 	bl	8000578 <__aeabi_f2d>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	49a7      	ldr	r1, [pc, #668]	; (8004c44 <vTask_Measure+0x304>)
 80049a6:	e9c1 2300 	strd	r2, r3, [r1]
			//verificamos el modo
			xQueuePeek(xMailbox_Mode, &mode, 0);
 80049aa:	4ba9      	ldr	r3, [pc, #676]	; (8004c50 <vTask_Measure+0x310>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f107 010b 	add.w	r1, r7, #11
 80049b2:	2200      	movs	r2, #0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f002 fa31 	bl	8006e1c <xQueuePeek>
			if(mode == 1 )
 80049ba:	7afb      	ldrb	r3, [r7, #11]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	f040 80c2 	bne.w	8004b46 <vTask_Measure+0x206>
			{
				//Acumulamos los angulos
				sum_ang += parameter_Posicion_Robot.grad_relativo;
 80049c2:	4ba4      	ldr	r3, [pc, #656]	; (8004c54 <vTask_Measure+0x314>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fb fdd6 	bl	8000578 <__aeabi_f2d>
 80049cc:	4b9d      	ldr	r3, [pc, #628]	; (8004c44 <vTask_Measure+0x304>)
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	f7fb fc73 	bl	80002bc <__adddf3>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	f7fc f91b 	bl	8000c18 <__aeabi_d2f>
 80049e2:	4603      	mov	r3, r0
 80049e4:	4a9b      	ldr	r2, [pc, #620]	; (8004c54 <vTask_Measure+0x314>)
 80049e6:	6013      	str	r3, [r2, #0]
				//----------------Accion a realizar con un tiempo especifico--------------------
				if(counting_action>=timeAction_TIMER_Sampling)
 80049e8:	4b9b      	ldr	r3, [pc, #620]	; (8004c58 <vTask_Measure+0x318>)
 80049ea:	881a      	ldrh	r2, [r3, #0]
 80049ec:	4b9b      	ldr	r3, [pc, #620]	; (8004c5c <vTask_Measure+0x31c>)
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	f0c0 80a1 	bcc.w	8004b38 <vTask_Measure+0x1f8>
				{
					//Calculamos el angulo promedio y la establecemis como el angulo relativo
					prom_ang = sum_ang/counting_action;
 80049f6:	4b97      	ldr	r3, [pc, #604]	; (8004c54 <vTask_Measure+0x314>)
 80049f8:	edd3 6a00 	vldr	s13, [r3]
 80049fc:	4b96      	ldr	r3, [pc, #600]	; (8004c58 <vTask_Measure+0x318>)
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	ee07 3a90 	vmov	s15, r3
 8004a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a0c:	4b94      	ldr	r3, [pc, #592]	; (8004c60 <vTask_Measure+0x320>)
 8004a0e:	edc3 7a00 	vstr	s15, [r3]
					parameter_Posicion_Robot.phi_relativo = (prom_ang*M_PI)/180;          //[rad]
 8004a12:	4b93      	ldr	r3, [pc, #588]	; (8004c60 <vTask_Measure+0x320>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fb fdae 	bl	8000578 <__aeabi_f2d>
 8004a1c:	a384      	add	r3, pc, #528	; (adr r3, 8004c30 <vTask_Measure+0x2f0>)
 8004a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a22:	f7fb fe01 	bl	8000628 <__aeabi_dmul>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	4b8c      	ldr	r3, [pc, #560]	; (8004c64 <vTask_Measure+0x324>)
 8004a34:	f7fb ff22 	bl	800087c <__aeabi_ddiv>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4981      	ldr	r1, [pc, #516]	; (8004c44 <vTask_Measure+0x304>)
 8004a3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
					parameter_Posicion_Robot.phi_relativo = atan2(sin(parameter_Posicion_Robot.phi_relativo),cos(parameter_Posicion_Robot.phi_relativo));
 8004a42:	4b80      	ldr	r3, [pc, #512]	; (8004c44 <vTask_Measure+0x304>)
 8004a44:	ed93 7b02 	vldr	d7, [r3, #8]
 8004a48:	eeb0 0a47 	vmov.f32	s0, s14
 8004a4c:	eef0 0a67 	vmov.f32	s1, s15
 8004a50:	f00c ff3e 	bl	80118d0 <sin>
 8004a54:	eeb0 8a40 	vmov.f32	s16, s0
 8004a58:	eef0 8a60 	vmov.f32	s17, s1
 8004a5c:	4b79      	ldr	r3, [pc, #484]	; (8004c44 <vTask_Measure+0x304>)
 8004a5e:	ed93 7b02 	vldr	d7, [r3, #8]
 8004a62:	eeb0 0a47 	vmov.f32	s0, s14
 8004a66:	eef0 0a67 	vmov.f32	s1, s15
 8004a6a:	f00c fe95 	bl	8011798 <cos>
 8004a6e:	eeb0 7a40 	vmov.f32	s14, s0
 8004a72:	eef0 7a60 	vmov.f32	s15, s1
 8004a76:	eeb0 1a47 	vmov.f32	s2, s14
 8004a7a:	eef0 1a67 	vmov.f32	s3, s15
 8004a7e:	eeb0 0a48 	vmov.f32	s0, s16
 8004a82:	eef0 0a68 	vmov.f32	s1, s17
 8004a86:	f00c ffaf 	bl	80119e8 <atan2>
 8004a8a:	eeb0 7a40 	vmov.f32	s14, s0
 8004a8e:	eef0 7a60 	vmov.f32	s15, s1
 8004a92:	4b6c      	ldr	r3, [pc, #432]	; (8004c44 <vTask_Measure+0x304>)
 8004a94:	ed83 7b02 	vstr	d7, [r3, #8]
					//Calculamos la velocidad
					handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 8004a98:	4b73      	ldr	r3, [pc, #460]	; (8004c68 <vTask_Measure+0x328>)
 8004a9a:	8b9b      	ldrh	r3, [r3, #28]
 8004a9c:	ee07 3a90 	vmov	s15, r3
 8004aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004aa4:	4b71      	ldr	r3, [pc, #452]	; (8004c6c <vTask_Measure+0x32c>)
 8004aa6:	edd3 7a00 	vldr	s15, [r3]
 8004aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aae:	4b6e      	ldr	r3, [pc, #440]	; (8004c68 <vTask_Measure+0x328>)
 8004ab0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 8004ab4:	4b6e      	ldr	r3, [pc, #440]	; (8004c70 <vTask_Measure+0x330>)
 8004ab6:	8b9b      	ldrh	r3, [r3, #28]
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ac0:	4b6c      	ldr	r3, [pc, #432]	; (8004c74 <vTask_Measure+0x334>)
 8004ac2:	edd3 7a00 	vldr	s15, [r3]
 8004ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aca:	4b69      	ldr	r3, [pc, #420]	; (8004c70 <vTask_Measure+0x330>)
 8004acc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/time_accion;      //[m/s]
 8004ad0:	4b65      	ldr	r3, [pc, #404]	; (8004c68 <vTask_Measure+0x328>)
 8004ad2:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004ad6:	4b68      	ldr	r3, [pc, #416]	; (8004c78 <vTask_Measure+0x338>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ae6:	4b60      	ldr	r3, [pc, #384]	; (8004c68 <vTask_Measure+0x328>)
 8004ae8:	edc3 7a08 	vstr	s15, [r3, #32]
					handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/time_accion;      //[m/s]
 8004aec:	4b60      	ldr	r3, [pc, #384]	; (8004c70 <vTask_Measure+0x330>)
 8004aee:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004af2:	4b61      	ldr	r3, [pc, #388]	; (8004c78 <vTask_Measure+0x338>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b02:	4b5b      	ldr	r3, [pc, #364]	; (8004c70 <vTask_Measure+0x330>)
 8004b04:	edc3 7a08 	vstr	s15, [r3, #32]
					//Reiniciamos el numero de conteos
					handler_Motor_R.parametersMotor.count = handler_Motor_L.parametersMotor.count = 0;
 8004b08:	4b57      	ldr	r3, [pc, #348]	; (8004c68 <vTask_Measure+0x328>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	839a      	strh	r2, [r3, #28]
 8004b0e:	4b56      	ldr	r3, [pc, #344]	; (8004c68 <vTask_Measure+0x328>)
 8004b10:	8b9a      	ldrh	r2, [r3, #28]
 8004b12:	4b57      	ldr	r3, [pc, #348]	; (8004c70 <vTask_Measure+0x330>)
 8004b14:	839a      	strh	r2, [r3, #28]
					//Reiniciamos variable
					sum_ang = counting_action = 0;
 8004b16:	4b50      	ldr	r3, [pc, #320]	; (8004c58 <vTask_Measure+0x318>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	4b4d      	ldr	r3, [pc, #308]	; (8004c54 <vTask_Measure+0x314>)
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
					//Notificamos a la tarea respectiva
					xTaskNotify(xHandleTask_Line_PID, 0, eNoAction);
 8004b24:	4b55      	ldr	r3, [pc, #340]	; (8004c7c <vTask_Measure+0x33c>)
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2100      	movs	r1, #0
 8004b32:	f003 fbb7 	bl	80082a4 <xTaskGenericNotify>
 8004b36:	e70d      	b.n	8004954 <vTask_Measure+0x14>
				}
				else{ counting_action++;}
 8004b38:	4b47      	ldr	r3, [pc, #284]	; (8004c58 <vTask_Measure+0x318>)
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	4b45      	ldr	r3, [pc, #276]	; (8004c58 <vTask_Measure+0x318>)
 8004b42:	801a      	strh	r2, [r3, #0]
 8004b44:	e706      	b.n	8004954 <vTask_Measure+0x14>
			}
			else if(mode == 2)
 8004b46:	7afb      	ldrb	r3, [r7, #11]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d16f      	bne.n	8004c2c <vTask_Measure+0x2ec>
			{
				//----------------Accion a realizar con un tiempo especifico--------------------
				if(counting_action>=timeAction_TIMER_Sampling)
 8004b4c:	4b42      	ldr	r3, [pc, #264]	; (8004c58 <vTask_Measure+0x318>)
 8004b4e:	881a      	ldrh	r2, [r3, #0]
 8004b50:	4b42      	ldr	r3, [pc, #264]	; (8004c5c <vTask_Measure+0x31c>)
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d34c      	bcc.n	8004bf2 <vTask_Measure+0x2b2>
				{
					//Calculo de la distancia recorrida por cada rueda
					handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 8004b58:	4b43      	ldr	r3, [pc, #268]	; (8004c68 <vTask_Measure+0x328>)
 8004b5a:	8b9b      	ldrh	r3, [r3, #28]
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b64:	4b41      	ldr	r3, [pc, #260]	; (8004c6c <vTask_Measure+0x32c>)
 8004b66:	edd3 7a00 	vldr	s15, [r3]
 8004b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6e:	4b3e      	ldr	r3, [pc, #248]	; (8004c68 <vTask_Measure+0x328>)
 8004b70:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 8004b74:	4b3e      	ldr	r3, [pc, #248]	; (8004c70 <vTask_Measure+0x330>)
 8004b76:	8b9b      	ldrh	r3, [r3, #28]
 8004b78:	ee07 3a90 	vmov	s15, r3
 8004b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b80:	4b3c      	ldr	r3, [pc, #240]	; (8004c74 <vTask_Measure+0x334>)
 8004b82:	edd3 7a00 	vldr	s15, [r3]
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	4b39      	ldr	r3, [pc, #228]	; (8004c70 <vTask_Measure+0x330>)
 8004b8c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					//Reiniciamos el numero de conteos
					handler_Motor_R.parametersMotor.count = 0;
 8004b90:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <vTask_Measure+0x330>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	839a      	strh	r2, [r3, #28]
					handler_Motor_L.parametersMotor.count = 0;
 8004b96:	4b34      	ldr	r3, [pc, #208]	; (8004c68 <vTask_Measure+0x328>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	839a      	strh	r2, [r3, #28]
					//Calculo angulo debido al desplazamiento del ICR
					ang_for_Displament_ICR += (((handler_Motor_R.parametersMotor.distance - handler_Motor_L.parametersMotor.distance)*100)
 8004b9c:	4b34      	ldr	r3, [pc, #208]	; (8004c70 <vTask_Measure+0x330>)
 8004b9e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004ba2:	4b31      	ldr	r3, [pc, #196]	; (8004c68 <vTask_Measure+0x328>)
 8004ba4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bac:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004c80 <vTask_Measure+0x340>
 8004bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
							/distanceBetweenWheels)*(180/M_PI); //[rad]
 8004bb4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8004c84 <vTask_Measure+0x344>
 8004bb8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004bbc:	ee16 0a90 	vmov	r0, s13
 8004bc0:	f7fb fcda 	bl	8000578 <__aeabi_f2d>
 8004bc4:	a31c      	add	r3, pc, #112	; (adr r3, 8004c38 <vTask_Measure+0x2f8>)
 8004bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bca:	f7fb fd2d 	bl	8000628 <__aeabi_dmul>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	4619      	mov	r1, r3
					ang_for_Displament_ICR += (((handler_Motor_R.parametersMotor.distance - handler_Motor_L.parametersMotor.distance)*100)
 8004bd6:	4b2c      	ldr	r3, [pc, #176]	; (8004c88 <vTask_Measure+0x348>)
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f7fb fb6e 	bl	80002bc <__adddf3>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4928      	ldr	r1, [pc, #160]	; (8004c88 <vTask_Measure+0x348>)
 8004be6:	e9c1 2300 	strd	r2, r3, [r1]
					//Reiniciamos el contador de accion
					counting_action = 0;
 8004bea:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <vTask_Measure+0x318>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	801a      	strh	r2, [r3, #0]
 8004bf0:	e005      	b.n	8004bfe <vTask_Measure+0x2be>
				}
				else{counting_action++;}
 8004bf2:	4b19      	ldr	r3, [pc, #100]	; (8004c58 <vTask_Measure+0x318>)
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	4b17      	ldr	r3, [pc, #92]	; (8004c58 <vTask_Measure+0x318>)
 8004bfc:	801a      	strh	r2, [r3, #0]
				//Combinar ambos ángulos
				ang_complementary = parameter_Posicion_Robot.grad_relativo + ang_for_Displament_ICR;
 8004bfe:	4b11      	ldr	r3, [pc, #68]	; (8004c44 <vTask_Measure+0x304>)
 8004c00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c04:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <vTask_Measure+0x348>)
 8004c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0a:	f7fb fb57 	bl	80002bc <__adddf3>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	491e      	ldr	r1, [pc, #120]	; (8004c8c <vTask_Measure+0x34c>)
 8004c14:	e9c1 2300 	strd	r2, r3, [r1]
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Stop_Execute, 0, eNoAction);
 8004c18:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <vTask_Measure+0x350>)
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	2300      	movs	r3, #0
 8004c22:	2200      	movs	r2, #0
 8004c24:	2100      	movs	r1, #0
 8004c26:	f003 fb3d 	bl	80082a4 <xTaskGenericNotify>
 8004c2a:	e693      	b.n	8004954 <vTask_Measure+0x14>
			}
			else{ __NOP(); }
 8004c2c:	bf00      	nop
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004c2e:	e691      	b.n	8004954 <vTask_Measure+0x14>
 8004c30:	54442d18 	.word	0x54442d18
 8004c34:	400921fb 	.word	0x400921fb
 8004c38:	1a63c1f8 	.word	0x1a63c1f8
 8004c3c:	404ca5dc 	.word	0x404ca5dc
 8004c40:	20000011 	.word	0x20000011
 8004c44:	200004d8 	.word	0x200004d8
 8004c48:	200003c6 	.word	0x200003c6
 8004c4c:	200002a4 	.word	0x200002a4
 8004c50:	20000440 	.word	0x20000440
 8004c54:	20000520 	.word	0x20000520
 8004c58:	200003f2 	.word	0x200003f2
 8004c5c:	20000012 	.word	0x20000012
 8004c60:	20000524 	.word	0x20000524
 8004c64:	40668000 	.word	0x40668000
 8004c68:	20000350 	.word	0x20000350
 8004c6c:	200003cc 	.word	0x200003cc
 8004c70:	200002dc 	.word	0x200002dc
 8004c74:	200003d0 	.word	0x200003d0
 8004c78:	200003f0 	.word	0x200003f0
 8004c7c:	20000410 	.word	0x20000410
 8004c80:	42c80000 	.word	0x42c80000
 8004c84:	4625a000 	.word	0x4625a000
 8004c88:	200004c8 	.word	0x200004c8
 8004c8c:	200004d0 	.word	0x200004d0
 8004c90:	2000042c 	.word	0x2000042c

08004c94 <vTask_Line_PID>:
		}
	}
}
//------------Tarea Line PID---------------
void vTask_Line_PID(void * pvParameters)
{
 8004c94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c98:	b08e      	sub	sp, #56	; 0x38
 8004c9a:	af02      	add	r7, sp, #8
 8004c9c:	6078      	str	r0, [r7, #4]
	//Definicion de variable
	BaseType_t notify_status = {0};
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
	float sampling_timer = ((float) time_accion/1000);
 8004ca2:	4bc6      	ldr	r3, [pc, #792]	; (8004fbc <vTask_Line_PID+0x328>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cae:	eddf 6ac4 	vldr	s13, [pc, #784]	; 8004fc0 <vTask_Line_PID+0x32c>
 8004cb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cb6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float distance_c = 0;
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
	char bufferMsg[20] = {0};
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	f107 0310 	add.w	r3, r7, #16
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	609a      	str	r2, [r3, #8]
 8004cd0:	60da      	str	r2, [r3, #12]
	char *prtbuffer = bufferMsg;
 8004cd2:	f107 030c 	add.w	r3, r7, #12
 8004cd6:	60bb      	str	r3, [r7, #8]
	float distance_recta = 0;
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	623b      	str	r3, [r7, #32]

	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2100      	movs	r1, #0
 8004cea:	2000      	movs	r0, #0
 8004cec:	f003 fa5a 	bl	80081a4 <xTaskGenericNotifyWait>
 8004cf0:	62f8      	str	r0, [r7, #44]	; 0x2c
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d1f2      	bne.n	8004cde <vTask_Line_PID+0x4a>
		{
			//Calculo odometria
			distance_c = (handler_Motor_R.parametersMotor.distance+handler_Motor_L.parametersMotor.distance)/2;  	//[mm]
 8004cf8:	4bb2      	ldr	r3, [pc, #712]	; (8004fc4 <vTask_Line_PID+0x330>)
 8004cfa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004cfe:	4bb2      	ldr	r3, [pc, #712]	; (8004fc8 <vTask_Line_PID+0x334>)
 8004d00:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004d04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d08:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004d0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			parameter_Posicion_Robot.xr_position += distance_c*(cos(parameter_Posicion_Robot.phi_relativo));        //[mm]
 8004d14:	4bad      	ldr	r3, [pc, #692]	; (8004fcc <vTask_Line_PID+0x338>)
 8004d16:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004d1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d1c:	f7fb fc2c 	bl	8000578 <__aeabi_f2d>
 8004d20:	4680      	mov	r8, r0
 8004d22:	4689      	mov	r9, r1
 8004d24:	4ba9      	ldr	r3, [pc, #676]	; (8004fcc <vTask_Line_PID+0x338>)
 8004d26:	ed93 7b02 	vldr	d7, [r3, #8]
 8004d2a:	eeb0 0a47 	vmov.f32	s0, s14
 8004d2e:	eef0 0a67 	vmov.f32	s1, s15
 8004d32:	f00c fd31 	bl	8011798 <cos>
 8004d36:	ec53 2b10 	vmov	r2, r3, d0
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	f7fb fc73 	bl	8000628 <__aeabi_dmul>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4620      	mov	r0, r4
 8004d48:	4629      	mov	r1, r5
 8004d4a:	f7fb fab7 	bl	80002bc <__adddf3>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	499e      	ldr	r1, [pc, #632]	; (8004fcc <vTask_Line_PID+0x338>)
 8004d54:	e9c1 2306 	strd	r2, r3, [r1, #24]
			parameter_Posicion_Robot.yr_position += distance_c*(sin(parameter_Posicion_Robot.phi_relativo));       //[mm]
 8004d58:	4b9c      	ldr	r3, [pc, #624]	; (8004fcc <vTask_Line_PID+0x338>)
 8004d5a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8004d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d60:	f7fb fc0a 	bl	8000578 <__aeabi_f2d>
 8004d64:	4680      	mov	r8, r0
 8004d66:	4689      	mov	r9, r1
 8004d68:	4b98      	ldr	r3, [pc, #608]	; (8004fcc <vTask_Line_PID+0x338>)
 8004d6a:	ed93 7b02 	vldr	d7, [r3, #8]
 8004d6e:	eeb0 0a47 	vmov.f32	s0, s14
 8004d72:	eef0 0a67 	vmov.f32	s1, s15
 8004d76:	f00c fdab 	bl	80118d0 <sin>
 8004d7a:	ec53 2b10 	vmov	r2, r3, d0
 8004d7e:	4640      	mov	r0, r8
 8004d80:	4649      	mov	r1, r9
 8004d82:	f7fb fc51 	bl	8000628 <__aeabi_dmul>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	f7fb fa95 	bl	80002bc <__adddf3>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	498d      	ldr	r1, [pc, #564]	; (8004fcc <vTask_Line_PID+0x338>)
 8004d98:	e9c1 2308 	strd	r2, r3, [r1, #32]
			//Paso de c.relativa a c.globales
			parameter_Posicion_Robot.xg_position = parameter_Posicion_Robot.xg_position_inicial + parameter_Posicion_Robot.xr_position*cos_cal - parameter_Posicion_Robot.yr_position*sin_cal;
 8004d9c:	4b8b      	ldr	r3, [pc, #556]	; (8004fcc <vTask_Line_PID+0x338>)
 8004d9e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8004da2:	4b8a      	ldr	r3, [pc, #552]	; (8004fcc <vTask_Line_PID+0x338>)
 8004da4:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8004da8:	4b89      	ldr	r3, [pc, #548]	; (8004fd0 <vTask_Line_PID+0x33c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fb fbe3 	bl	8000578 <__aeabi_f2d>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4640      	mov	r0, r8
 8004db8:	4649      	mov	r1, r9
 8004dba:	f7fb fc35 	bl	8000628 <__aeabi_dmul>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	f7fb fa79 	bl	80002bc <__adddf3>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4690      	mov	r8, r2
 8004dd0:	4699      	mov	r9, r3
 8004dd2:	4b7e      	ldr	r3, [pc, #504]	; (8004fcc <vTask_Line_PID+0x338>)
 8004dd4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8004dd8:	4b7e      	ldr	r3, [pc, #504]	; (8004fd4 <vTask_Line_PID+0x340>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fb fbcb 	bl	8000578 <__aeabi_f2d>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4620      	mov	r0, r4
 8004de8:	4629      	mov	r1, r5
 8004dea:	f7fb fc1d 	bl	8000628 <__aeabi_dmul>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4640      	mov	r0, r8
 8004df4:	4649      	mov	r1, r9
 8004df6:	f7fb fa5f 	bl	80002b8 <__aeabi_dsub>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4973      	ldr	r1, [pc, #460]	; (8004fcc <vTask_Line_PID+0x338>)
 8004e00:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			parameter_Posicion_Robot.yg_position = parameter_Posicion_Robot.yg_position_inicial + parameter_Posicion_Robot.xr_position*sin_cal + parameter_Posicion_Robot.yr_position*cos_cal;
 8004e04:	4b71      	ldr	r3, [pc, #452]	; (8004fcc <vTask_Line_PID+0x338>)
 8004e06:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8004e0a:	4b70      	ldr	r3, [pc, #448]	; (8004fcc <vTask_Line_PID+0x338>)
 8004e0c:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8004e10:	4b70      	ldr	r3, [pc, #448]	; (8004fd4 <vTask_Line_PID+0x340>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fb fbaf 	bl	8000578 <__aeabi_f2d>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4640      	mov	r0, r8
 8004e20:	4649      	mov	r1, r9
 8004e22:	f7fb fc01 	bl	8000628 <__aeabi_dmul>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	4629      	mov	r1, r5
 8004e2e:	f7fb fa45 	bl	80002bc <__adddf3>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	4690      	mov	r8, r2
 8004e38:	4699      	mov	r9, r3
 8004e3a:	4b64      	ldr	r3, [pc, #400]	; (8004fcc <vTask_Line_PID+0x338>)
 8004e3c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8004e40:	4b63      	ldr	r3, [pc, #396]	; (8004fd0 <vTask_Line_PID+0x33c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fb fb97 	bl	8000578 <__aeabi_f2d>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4620      	mov	r0, r4
 8004e50:	4629      	mov	r1, r5
 8004e52:	f7fb fbe9 	bl	8000628 <__aeabi_dmul>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	f7fb fa2d 	bl	80002bc <__adddf3>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4959      	ldr	r1, [pc, #356]	; (8004fcc <vTask_Line_PID+0x338>)
 8004e68:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			//Convertimos el valor y imprimemos
			sprintf(bufferMsg,"&%#.4f\t%#.4f\n", parameter_Posicion_Robot.xg_position , parameter_Posicion_Robot.yg_position);
 8004e6c:	4b57      	ldr	r3, [pc, #348]	; (8004fcc <vTask_Line_PID+0x338>)
 8004e6e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004e72:	4b56      	ldr	r3, [pc, #344]	; (8004fcc <vTask_Line_PID+0x338>)
 8004e74:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004e78:	f107 040c 	add.w	r4, r7, #12
 8004e7c:	e9cd 2300 	strd	r2, r3, [sp]
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4954      	ldr	r1, [pc, #336]	; (8004fd8 <vTask_Line_PID+0x344>)
 8004e86:	4620      	mov	r0, r4
 8004e88:	f008 fa58 	bl	800d33c <siprintf>
			xQueueSend(xQueue_Print, &prtbuffer, portMAX_DELAY);
 8004e8c:	4b53      	ldr	r3, [pc, #332]	; (8004fdc <vTask_Line_PID+0x348>)
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	f107 0108 	add.w	r1, r7, #8
 8004e94:	2300      	movs	r3, #0
 8004e96:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9a:	f001 fd37 	bl	800690c <xQueueGenericSend>
			/*Se envia una notificacion previa con la finalidad de desbloquear
			 la tarea, la cual se bloquea para que se envie el mensaje por USART*/
			xTaskNotify(xHandleTask_Line_PID, 0, eNoAction);
 8004e9e:	4b50      	ldr	r3, [pc, #320]	; (8004fe0 <vTask_Line_PID+0x34c>)
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2100      	movs	r1, #0
 8004eac:	f003 f9fa 	bl	80082a4 <xTaskGenericNotify>
			xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8004eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2100      	movs	r1, #0
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	f003 f971 	bl	80081a4 <xTaskGenericNotifyWait>
			//Control PID para la distancia
			distance_recta = (distance_to_straight_line(&parameter_Path_Robot, parameter_Posicion_Robot.xg_position, parameter_Posicion_Robot.yg_position))/1000;
 8004ec2:	4b42      	ldr	r3, [pc, #264]	; (8004fcc <vTask_Line_PID+0x338>)
 8004ec4:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8004ec8:	4b40      	ldr	r3, [pc, #256]	; (8004fcc <vTask_Line_PID+0x338>)
 8004eca:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8004ece:	eeb0 1a46 	vmov.f32	s2, s12
 8004ed2:	eef0 1a66 	vmov.f32	s3, s13
 8004ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8004eda:	eef0 0a67 	vmov.f32	s1, s15
 8004ede:	4841      	ldr	r0, [pc, #260]	; (8004fe4 <vTask_Line_PID+0x350>)
 8004ee0:	f7fd feae 	bl	8002c40 <distance_to_straight_line>
 8004ee4:	ec51 0b10 	vmov	r0, r1, d0
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	4b3e      	ldr	r3, [pc, #248]	; (8004fe8 <vTask_Line_PID+0x354>)
 8004eee:	f7fb fcc5 	bl	800087c <__aeabi_ddiv>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	4619      	mov	r1, r3
 8004efa:	f7fb fe8d 	bl	8000c18 <__aeabi_d2f>
 8004efe:	4603      	mov	r3, r0
 8004f00:	623b      	str	r3, [r7, #32]
			PID_simple(&parameter_PID_distace, sampling_timer, 0,  distance_recta);
 8004f02:	ed97 1a08 	vldr	s2, [r7, #32]
 8004f06:	eddf 0a39 	vldr	s1, [pc, #228]	; 8004fec <vTask_Line_PID+0x358>
 8004f0a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004f0e:	4838      	ldr	r0, [pc, #224]	; (8004ff0 <vTask_Line_PID+0x35c>)
 8004f10:	f000 fda6 	bl	8005a60 <PID_simple>
			//Aplicacndo correcion
			vel_Setpoint_L = velSetPoint - parameter_PID_distace.u;
 8004f14:	4b37      	ldr	r3, [pc, #220]	; (8004ff4 <vTask_Line_PID+0x360>)
 8004f16:	ed93 7a00 	vldr	s14, [r3]
 8004f1a:	4b35      	ldr	r3, [pc, #212]	; (8004ff0 <vTask_Line_PID+0x35c>)
 8004f1c:	edd3 7a00 	vldr	s15, [r3]
 8004f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f24:	4b34      	ldr	r3, [pc, #208]	; (8004ff8 <vTask_Line_PID+0x364>)
 8004f26:	edc3 7a00 	vstr	s15, [r3]
			vel_Setpoint_R = velSetPoint + parameter_PID_distace.u;
 8004f2a:	4b31      	ldr	r3, [pc, #196]	; (8004ff0 <vTask_Line_PID+0x35c>)
 8004f2c:	ed93 7a00 	vldr	s14, [r3]
 8004f30:	4b30      	ldr	r3, [pc, #192]	; (8004ff4 <vTask_Line_PID+0x360>)
 8004f32:	edd3 7a00 	vldr	s15, [r3]
 8004f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f3a:	4b30      	ldr	r3, [pc, #192]	; (8004ffc <vTask_Line_PID+0x368>)
 8004f3c:	edc3 7a00 	vstr	s15, [r3]
			//Aplicacion del PID
			PID_simple(&handler_Motor_L.parametersMotor.parametersPID, sampling_timer, vel_Setpoint_L,  handler_Motor_L.parametersMotor.velocity);
 8004f40:	4b2d      	ldr	r3, [pc, #180]	; (8004ff8 <vTask_Line_PID+0x364>)
 8004f42:	edd3 7a00 	vldr	s15, [r3]
 8004f46:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <vTask_Line_PID+0x334>)
 8004f48:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f4c:	eeb0 1a47 	vmov.f32	s2, s14
 8004f50:	eef0 0a67 	vmov.f32	s1, s15
 8004f54:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004f58:	481b      	ldr	r0, [pc, #108]	; (8004fc8 <vTask_Line_PID+0x334>)
 8004f5a:	f000 fd81 	bl	8005a60 <PID_simple>
			PID_simple(&handler_Motor_R.parametersMotor.parametersPID, sampling_timer, vel_Setpoint_R,  handler_Motor_R.parametersMotor.velocity);
 8004f5e:	4b27      	ldr	r3, [pc, #156]	; (8004ffc <vTask_Line_PID+0x368>)
 8004f60:	edd3 7a00 	vldr	s15, [r3]
 8004f64:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <vTask_Line_PID+0x330>)
 8004f66:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f6a:	eeb0 1a47 	vmov.f32	s2, s14
 8004f6e:	eef0 0a67 	vmov.f32	s1, s15
 8004f72:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004f76:	4813      	ldr	r0, [pc, #76]	; (8004fc4 <vTask_Line_PID+0x330>)
 8004f78:	f000 fd72 	bl	8005a60 <PID_simple>
			//Cambiamos valores
			handler_Motor_L.configMotor.new_dutty += handler_Motor_L.parametersMotor.parametersPID.u;
 8004f7c:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <vTask_Line_PID+0x334>)
 8004f7e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004f82:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <vTask_Line_PID+0x334>)
 8004f84:	edd3 7a00 	vldr	s15, [r3]
 8004f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <vTask_Line_PID+0x334>)
 8004f8e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			handler_Motor_R.configMotor.new_dutty += handler_Motor_R.parametersMotor.parametersPID.u;
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <vTask_Line_PID+0x330>)
 8004f94:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <vTask_Line_PID+0x330>)
 8004f9a:	edd3 7a00 	vldr	s15, [r3]
 8004f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fa2:	4b08      	ldr	r3, [pc, #32]	; (8004fc4 <vTask_Line_PID+0x330>)
 8004fa4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			//Correccion del dutty
			correction(&handler_Motor_L);
 8004fa8:	4807      	ldr	r0, [pc, #28]	; (8004fc8 <vTask_Line_PID+0x334>)
 8004faa:	f000 fdb5 	bl	8005b18 <correction>
			correction(&handler_Motor_R);
 8004fae:	4805      	ldr	r0, [pc, #20]	; (8004fc4 <vTask_Line_PID+0x330>)
 8004fb0:	f000 fdb2 	bl	8005b18 <correction>
			//Notificamos a la tarea respectiva
			xTaskNotify(xHandleTask_Stop_Execute, 0, eNoAction);
 8004fb4:	4b12      	ldr	r3, [pc, #72]	; (8005000 <vTask_Line_PID+0x36c>)
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	e024      	b.n	8005004 <vTask_Line_PID+0x370>
 8004fba:	bf00      	nop
 8004fbc:	200003f0 	.word	0x200003f0
 8004fc0:	447a0000 	.word	0x447a0000
 8004fc4:	200002dc 	.word	0x200002dc
 8004fc8:	20000350 	.word	0x20000350
 8004fcc:	200004d8 	.word	0x200004d8
 8004fd0:	200004c0 	.word	0x200004c0
 8004fd4:	200004c4 	.word	0x200004c4
 8004fd8:	080143a0 	.word	0x080143a0
 8004fdc:	20000430 	.word	0x20000430
 8004fe0:	20000410 	.word	0x20000410
 8004fe4:	20000458 	.word	0x20000458
 8004fe8:	408f4000 	.word	0x408f4000
 8004fec:	00000000 	.word	0x00000000
 8004ff0:	200003d4 	.word	0x200003d4
 8004ff4:	200003c8 	.word	0x200003c8
 8004ff8:	2000052c 	.word	0x2000052c
 8004ffc:	20000528 	.word	0x20000528
 8005000:	2000042c 	.word	0x2000042c
 8005004:	2300      	movs	r3, #0
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	2300      	movs	r3, #0
 800500a:	2200      	movs	r2, #0
 800500c:	2100      	movs	r1, #0
 800500e:	f003 f949 	bl	80082a4 <xTaskGenericNotify>
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8005012:	e664      	b.n	8004cde <vTask_Line_PID+0x4a>

08005014 <led_state_callback>:


//-----------------------Inicio definicion funciones del Software Timer---------------------------

void led_state_callback(TimerHandle_t xTimer)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	//Cambio estado opuesto Led
	GPIOxTooglePin(&handler_GPIO_BlinkyPin);
 800501c:	4803      	ldr	r0, [pc, #12]	; (800502c <led_state_callback+0x18>)
 800501e:	f006 f820 	bl	800b062 <GPIOxTooglePin>
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	2000022c 	.word	0x2000022c

08005030 <process_stringsend>:


//-----------------------Inicio definicion funciones para recepcion de mensaje---------------------------
//Funcion que ayuda en el procesamiento del comando
void process_stringsend(char stringsend[500])
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af02      	add	r7, sp, #8
 8005036:	6078      	str	r0, [r7, #4]
	//Definicion de structura del comando
	command_t structcmd = {0};
 8005038:	f107 030c 	add.w	r3, r7, #12
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	611a      	str	r2, [r3, #16]
	//Extraemos el string enviado
	extract_stringsend(stringsend);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f863 	bl	8005114 <extract_stringsend>
	//De acuerdo al state se procesa el mensaje
	if(next_state==sMenuOperation || next_state==sExecution)
 800504e:	4b2b      	ldr	r3, [pc, #172]	; (80050fc <process_stringsend+0xcc>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d003      	beq.n	800505e <process_stringsend+0x2e>
 8005056:	4b29      	ldr	r3, [pc, #164]	; (80050fc <process_stringsend+0xcc>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d138      	bne.n	80050d0 <process_stringsend+0xa0>
	{
		//cambio de status
		next_state = sNullReception;
 800505e:	4b27      	ldr	r3, [pc, #156]	; (80050fc <process_stringsend+0xcc>)
 8005060:	2200      	movs	r2, #0
 8005062:	701a      	strb	r2, [r3, #0]
		//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
		sscanf(stringsend, "%s %u %u", structcmd.send_cmd, &structcmd.firtparameter, &structcmd.secondparameter);
 8005064:	f107 030c 	add.w	r3, r7, #12
 8005068:	f103 010c 	add.w	r1, r3, #12
 800506c:	f107 020c 	add.w	r2, r7, #12
 8005070:	f107 030c 	add.w	r3, r7, #12
 8005074:	3310      	adds	r3, #16
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	460b      	mov	r3, r1
 800507a:	4921      	ldr	r1, [pc, #132]	; (8005100 <process_stringsend+0xd0>)
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f008 f97d 	bl	800d37c <siscanf>
		//Envio de struct a la cola
		xQueueSend(xQueue_StructCommand, &structcmd, 0);
 8005082:	4b20      	ldr	r3, [pc, #128]	; (8005104 <process_stringsend+0xd4>)
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	f107 010c 	add.w	r1, r7, #12
 800508a:	2300      	movs	r3, #0
 800508c:	2200      	movs	r2, #0
 800508e:	f001 fc3d 	bl	800690c <xQueueGenericSend>
		//De al state se ejecuta una respectiva tarea
		switch(next_state)
 8005092:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <process_stringsend+0xcc>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d002      	beq.n	80050a0 <process_stringsend+0x70>
 800509a:	2b02      	cmp	r3, #2
 800509c:	d00a      	beq.n	80050b4 <process_stringsend+0x84>
 800509e:	e013      	b.n	80050c8 <process_stringsend+0x98>
		{
		case sMenuOperation:
			//Notificamos a la tarea respectiva
			xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 80050a0:	4b19      	ldr	r3, [pc, #100]	; (8005108 <process_stringsend+0xd8>)
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	2300      	movs	r3, #0
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2300      	movs	r3, #0
 80050aa:	2200      	movs	r2, #0
 80050ac:	2100      	movs	r1, #0
 80050ae:	f003 f8f9 	bl	80082a4 <xTaskGenericNotify>
			break;
 80050b2:	e00b      	b.n	80050cc <process_stringsend+0x9c>
		case sExecution:
			//Notificamos a la tarea respectiva
			xTaskNotify(xHandleTask_Stop, 0, eNoAction);
 80050b4:	4b15      	ldr	r3, [pc, #84]	; (800510c <process_stringsend+0xdc>)
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	2300      	movs	r3, #0
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	2300      	movs	r3, #0
 80050be:	2200      	movs	r2, #0
 80050c0:	2100      	movs	r1, #0
 80050c2:	f003 f8ef 	bl	80082a4 <xTaskGenericNotify>
			break;
 80050c6:	e001      	b.n	80050cc <process_stringsend+0x9c>
		default:
			__NOP();
 80050c8:	bf00      	nop
			break;
 80050ca:	bf00      	nop
		switch(next_state)
 80050cc:	bf00      	nop
		next_state = sNullReception;
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Separate_GridMap, (uint32_t) stringsend, eSetValueWithoutOverwrite);
	}
	else{ __NOP(); }
}
 80050ce:	e011      	b.n	80050f4 <process_stringsend+0xc4>
	else if(next_state==sAStar)
 80050d0:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <process_stringsend+0xcc>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d10c      	bne.n	80050f2 <process_stringsend+0xc2>
		next_state = sNullReception;
 80050d8:	4b08      	ldr	r3, [pc, #32]	; (80050fc <process_stringsend+0xcc>)
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
		xTaskNotify(xHandleTask_Separate_GridMap, (uint32_t) stringsend, eSetValueWithoutOverwrite);
 80050de:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <process_stringsend+0xe0>)
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	2300      	movs	r3, #0
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2304      	movs	r3, #4
 80050ea:	2100      	movs	r1, #0
 80050ec:	f003 f8da 	bl	80082a4 <xTaskGenericNotify>
}
 80050f0:	e000      	b.n	80050f4 <process_stringsend+0xc4>
	else{ __NOP(); }
 80050f2:	bf00      	nop
}
 80050f4:	bf00      	nop
 80050f6:	3720      	adds	r7, #32
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000020 	.word	0x20000020
 8005100:	080143b0 	.word	0x080143b0
 8005104:	20000434 	.word	0x20000434
 8005108:	200003f8 	.word	0x200003f8
 800510c:	20000408 	.word	0x20000408
 8005110:	20000420 	.word	0x20000420

08005114 <extract_stringsend>:
//Funcion para obtener el comando
int extract_stringsend(char cmd[500])
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
	//Definicion de variables
	uint8_t item;
	uint8_t counter_j = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;
	//Se verifica si hay un nuevo mensaje
	status = uxQueueMessagesWaiting(xQueue_InputData);
 8005120:	4b17      	ldr	r3, [pc, #92]	; (8005180 <extract_stringsend+0x6c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f001 ffea 	bl	80070fe <uxQueueMessagesWaiting>
 800512a:	4603      	mov	r3, r0
 800512c:	613b      	str	r3, [r7, #16]
	if(status == 0)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d102      	bne.n	800513a <extract_stringsend+0x26>
	{
		return -1;
 8005134:	f04f 33ff 	mov.w	r3, #4294967295
 8005138:	e01d      	b.n	8005176 <extract_stringsend+0x62>
	}
	do{
		//Recibimos un elemento y lo montamos en item
		status = xQueueReceive(xQueue_InputData, &item, 0);
 800513a:	4b11      	ldr	r3, [pc, #68]	; (8005180 <extract_stringsend+0x6c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f107 010f 	add.w	r1, r7, #15
 8005142:	2200      	movs	r2, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f001 fd89 	bl	8006c5c <xQueueReceive>
 800514a:	6138      	str	r0, [r7, #16]
		if(status ==pdTRUE){
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d107      	bne.n	8005162 <extract_stringsend+0x4e>
			//Vamos llenando el arreglo del comando
			cmd[counter_j++] = item;
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	75fa      	strb	r2, [r7, #23]
 8005158:	461a      	mov	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4413      	add	r3, r2
 800515e:	7bfa      	ldrb	r2, [r7, #15]
 8005160:	701a      	strb	r2, [r3, #0]
		}
	}while(item != '@');
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	2b40      	cmp	r3, #64	; 0x40
 8005166:	d1e8      	bne.n	800513a <extract_stringsend+0x26>

	//Agregamos el elemento nulo y ademas definimos el largo del mensaje
	cmd[counter_j - 1] = '\0';
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	3b01      	subs	r3, #1
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	4413      	add	r3, r2
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]

	return 0;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000438 	.word	0x20000438

08005184 <set_operation_square>:


//-------------Inicio de la definicion de las funciones para la contruccion de la lista de operaciones ----------------------------------
//Operaciones del Cuadrado
void set_operation_square(Parameters_Operation_t *prtList, double dis_side, double direction_square)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b0a8      	sub	sp, #160	; 0xa0
 8005188:	af00      	add	r7, sp, #0
 800518a:	6178      	str	r0, [r7, #20]
 800518c:	ed87 0b02 	vstr	d0, [r7, #8]
 8005190:	ed87 1b00 	vstr	d1, [r7]
	//Definicion de variables
	Parameter_build_t parameter_build = {0};
 8005194:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005198:	2230      	movs	r2, #48	; 0x30
 800519a:	2100      	movs	r1, #0
 800519c:	4618      	mov	r0, r3
 800519e:	f007 fa45 	bl	800c62c <memset>
	int8_t value_side = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	//Definicion de las coordenadas del cuadrado
	if(direction_square == 0){value_side = 1;}
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051b4:	f7fb fca0 	bl	8000af8 <__aeabi_dcmpeq>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <set_operation_square+0x42>
 80051be:	2301      	movs	r3, #1
 80051c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80051c4:	e002      	b.n	80051cc <set_operation_square+0x48>
	else{ value_side = -1;}
 80051c6:	23ff      	movs	r3, #255	; 0xff
 80051c8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	double coordination_position_square[2][5] = {{0, dis_side, dis_side, 0, 0},{0, 0, value_side*dis_side,value_side*dis_side,0}};
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80051d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80051e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8005218:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800521c:	4618      	mov	r0, r3
 800521e:	f7fb f999 	bl	8000554 <__aeabi_i2d>
 8005222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005226:	f7fb f9ff 	bl	8000628 <__aeabi_dmul>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8005232:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8005236:	4618      	mov	r0, r3
 8005238:	f7fb f98c 	bl	8000554 <__aeabi_i2d>
 800523c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005240:	f7fb f9f2 	bl	8000628 <__aeabi_dmul>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	//Definimos la posicion inicial del cuadrado
	parameter_build.initline_x = coordination_position_square[0][0]; parameter_build.initline_y = coordination_position_square[0][0];
 8005258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800525c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8005260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005264:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	parameter_build.grad_vector_init = 0; parameter_build.number_operation = 0;
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	parameter_build.delta_before[0] = dis_side; parameter_build.delta_before[1] = 0;
 800527a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800527e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	f04f 0300 	mov.w	r3, #0
 800528a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	//Construccion de las operaciones
	for(uint8_t i=1; i<5; i++)
 800528e:	2301      	movs	r3, #1
 8005290:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8005294:	e023      	b.n	80052de <set_operation_square+0x15a>
	{
		build_Operation(prtList, &parameter_build, coordination_position_square[0][i], coordination_position_square[1][i]);
 8005296:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	33a0      	adds	r3, #160	; 0xa0
 800529e:	443b      	add	r3, r7
 80052a0:	3b88      	subs	r3, #136	; 0x88
 80052a2:	ed93 7b00 	vldr	d7, [r3]
 80052a6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80052aa:	3305      	adds	r3, #5
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	33a0      	adds	r3, #160	; 0xa0
 80052b0:	443b      	add	r3, r7
 80052b2:	3b88      	subs	r3, #136	; 0x88
 80052b4:	ed93 6b00 	vldr	d6, [r3]
 80052b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80052bc:	eeb0 1a46 	vmov.f32	s2, s12
 80052c0:	eef0 1a66 	vmov.f32	s3, s13
 80052c4:	eeb0 0a47 	vmov.f32	s0, s14
 80052c8:	eef0 0a67 	vmov.f32	s1, s15
 80052cc:	4619      	mov	r1, r3
 80052ce:	6978      	ldr	r0, [r7, #20]
 80052d0:	f7fd fa46 	bl	8002760 <build_Operation>
	for(uint8_t i=1; i<5; i++)
 80052d4:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80052d8:	3301      	adds	r3, #1
 80052da:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80052de:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d9d7      	bls.n	8005296 <set_operation_square+0x112>
	}
	//Agregamos indicador de la operacion final
	prtList[parameter_build.number_operation+1].operacion = NULL_OPERATION;
 80052e6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80052ea:	3301      	adds	r3, #1
 80052ec:	015b      	lsls	r3, r3, #5
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4413      	add	r3, r2
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
}
 80052f6:	bf00      	nop
 80052f8:	37a0      	adds	r7, #160	; 0xa0
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <set_operation_AStar>:

//Operaciones del AStar
void set_operation_AStar(Parameters_Operation_t *prtList, file_cell_t *file_cell, Parameters_Position_t *ptrParameterPosition, Parameters_Path_t *ptrParameterPath)
{
 8005300:	b5b0      	push	{r4, r5, r7, lr}
 8005302:	b092      	sub	sp, #72	; 0x48
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
	//Definicion de variables
	Parameter_build_t parameter_build = {0};
 800530e:	f107 0310 	add.w	r3, r7, #16
 8005312:	2230      	movs	r2, #48	; 0x30
 8005314:	2100      	movs	r1, #0
 8005316:	4618      	mov	r0, r3
 8005318:	f007 f988 	bl	800c62c <memset>
	//Definimos la posicion inicial del cuadrado
	//-----------------NOTA: RECORDAR QUE EL OPPY ESTA INICIALMENTE ORIENTADO 90 GRADOS CON RESPECTO AL EJE X---------------
	ptrParameterPath->rotative_Grad = ptrParameterPosition->grad_grobal = 90;
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	4b67      	ldr	r3, [pc, #412]	; (80054c0 <set_operation_AStar+0x1c0>)
 8005324:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	225a      	movs	r2, #90	; 0x5a
 800532c:	63da      	str	r2, [r3, #60]	; 0x3c
	parameter_build.initline_x = ptrParameterPosition->xg_position_inicial = ptrParameterPath->goal_Position_x = (file_cell->ptrCell_parent[0]->coor_x)*10;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	edd3 7a01 	vldr	s15, [r3, #4]
 8005336:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800533a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800533e:	ee17 0a90 	vmov	r0, s15
 8005342:	f7fb f919 	bl	8000578 <__aeabi_f2d>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	6839      	ldr	r1, [r7, #0]
 800534c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005362:	e9c7 2304 	strd	r2, r3, [r7, #16]
	parameter_build.initline_y = ptrParameterPosition->yg_position_inicial = ptrParameterPath->goal_Position_y = (file_cell->ptrCell_parent[0]->coor_y)*10;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	edd3 7a02 	vldr	s15, [r3, #8]
 800536e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005376:	ee17 0a90 	vmov	r0, s15
 800537a:	f7fb f8fd 	bl	8000578 <__aeabi_f2d>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	6839      	ldr	r1, [r7, #0]
 8005384:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800539a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	parameter_build.grad_vector_init = 0; parameter_build.number_operation = parameter_build.routelist = 0;
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80053aa:	2300      	movs	r3, #0
 80053ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80053b0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80053b4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	parameter_build.delta_before[0] = 0; parameter_build.delta_before[1] = 10;
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	4b3e      	ldr	r3, [pc, #248]	; (80054c4 <set_operation_AStar+0x1c4>)
 80053ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	//Construccion de las operaciones
	for(uint8_t i=1; i<100; i++)
 80053ce:	2301      	movs	r3, #1
 80053d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80053d4:	e03e      	b.n	8005454 <set_operation_AStar+0x154>
	{
		//Comprobamos si la celda no es un elemento nulo
		if(file_cell->ptrCell_parent[i] != NULL)
 80053d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d03b      	beq.n	800545e <set_operation_AStar+0x15e>
		{
			//Construimos la operacion
			build_Operation(prtList, &parameter_build, (file_cell->ptrCell_parent[i]->coor_x)*10, (file_cell->ptrCell_parent[i]->coor_y)*10);
 80053e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80053f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80053fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053fe:	ee17 0a90 	vmov	r0, s15
 8005402:	f7fb f8b9 	bl	8000578 <__aeabi_f2d>
 8005406:	4604      	mov	r4, r0
 8005408:	460d      	mov	r5, r1
 800540a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	edd3 7a02 	vldr	s15, [r3, #8]
 800541a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800541e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005422:	ee17 0a90 	vmov	r0, s15
 8005426:	f7fb f8a7 	bl	8000578 <__aeabi_f2d>
 800542a:	f107 0310 	add.w	r3, r7, #16
 800542e:	ec41 0b11 	vmov	d1, r0, r1
 8005432:	ec45 4b10 	vmov	d0, r4, r5
 8005436:	4619      	mov	r1, r3
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7fd f991 	bl	8002760 <build_Operation>
			//Aumentamos el valor en el recorrido
			parameter_build.routelist++;
 800543e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005442:	3301      	adds	r3, #1
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	for(uint8_t i=1; i<100; i++)
 800544a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800544e:	3301      	adds	r3, #1
 8005450:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005454:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005458:	2b63      	cmp	r3, #99	; 0x63
 800545a:	d9bc      	bls.n	80053d6 <set_operation_AStar+0xd6>
 800545c:	e000      	b.n	8005460 <set_operation_AStar+0x160>
		}
		else{break;}
 800545e:	bf00      	nop
	}
	//Se Agrega la operacion final para llegar al goal
	//Construimos la operacion
	build_Operation(prtList, &parameter_build, (file_cell->ptrCell_file->coor_x)*10, (file_cell->ptrCell_file->coor_y)*10);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	edd3 7a01 	vldr	s15, [r3, #4]
 8005468:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800546c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005470:	ee17 0a90 	vmov	r0, s15
 8005474:	f7fb f880 	bl	8000578 <__aeabi_f2d>
 8005478:	4604      	mov	r4, r0
 800547a:	460d      	mov	r5, r1
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	edd3 7a02 	vldr	s15, [r3, #8]
 8005484:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800548c:	ee17 0a90 	vmov	r0, s15
 8005490:	f7fb f872 	bl	8000578 <__aeabi_f2d>
 8005494:	f107 0310 	add.w	r3, r7, #16
 8005498:	ec41 0b11 	vmov	d1, r0, r1
 800549c:	ec45 4b10 	vmov	d0, r4, r5
 80054a0:	4619      	mov	r1, r3
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7fd f95c 	bl	8002760 <build_Operation>
	//Agregamos indicador de la operacion final
	prtList[parameter_build.number_operation+1].operacion = NULL_OPERATION;
 80054a8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80054ac:	3301      	adds	r3, #1
 80054ae:	015b      	lsls	r3, r3, #5
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	2200      	movs	r2, #0
 80054b6:	701a      	strb	r2, [r3, #0]
}
 80054b8:	bf00      	nop
 80054ba:	3748      	adds	r7, #72	; 0x48
 80054bc:	46bd      	mov	sp, r7
 80054be:	bdb0      	pop	{r4, r5, r7, pc}
 80054c0:	40568000 	.word	0x40568000
 80054c4:	40240000 	.word	0x40240000

080054c8 <set_operation_in_queue>:


//------------------------------Inicio de la definicion de funciones del modo----------------------------------------
//-----Establecer Operaciones-----
void set_operation_in_queue(Parameters_Operation_t list[30])
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	//Definicion bits
	const EventBits_t xBitsSet = (ENABLE_OPERATION_BIT | EXECUTE_OPERATION_BIT);
 80054d0:	2303      	movs	r3, #3
 80054d2:	60bb      	str	r3, [r7, #8]
	//Limpiamos la cola de operaciones
	while(xQueueReceive(xQueue_Operation, NULL, 0) == pdPASS){__NOP();}
 80054d4:	e000      	b.n	80054d8 <set_operation_in_queue+0x10>
 80054d6:	bf00      	nop
 80054d8:	4b17      	ldr	r3, [pc, #92]	; (8005538 <set_operation_in_queue+0x70>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2200      	movs	r2, #0
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 fbbb 	bl	8006c5c <xQueueReceive>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d0f4      	beq.n	80054d6 <set_operation_in_queue+0xe>
	//Recorremos la lista de operaciones
	for(uint8_t i=0; i<30; i++)
 80054ec:	2300      	movs	r3, #0
 80054ee:	73fb      	strb	r3, [r7, #15]
 80054f0:	e013      	b.n	800551a <set_operation_in_queue+0x52>
	{
		//Verificamos que la operacion en la lista no sea nula
		if(list[i].operacion != NULL_OPERATION)
 80054f2:	7bfb      	ldrb	r3, [r7, #15]
 80054f4:	015b      	lsls	r3, r3, #5
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4413      	add	r3, r2
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d010      	beq.n	8005522 <set_operation_in_queue+0x5a>
		{
			//Agregamos configuraciones de operaciones a la cola
			xQueueSendToBack(xQueue_Operation, &list[i], 0);
 8005500:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <set_operation_in_queue+0x70>)
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	015b      	lsls	r3, r3, #5
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	18d1      	adds	r1, r2, r3
 800550c:	2300      	movs	r3, #0
 800550e:	2200      	movs	r2, #0
 8005510:	f001 f9fc 	bl	800690c <xQueueGenericSend>
	for(uint8_t i=0; i<30; i++)
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	3301      	adds	r3, #1
 8005518:	73fb      	strb	r3, [r7, #15]
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	2b1d      	cmp	r3, #29
 800551e:	d9e8      	bls.n	80054f2 <set_operation_in_queue+0x2a>
 8005520:	e000      	b.n	8005524 <set_operation_in_queue+0x5c>
		}
		else{ break;}
 8005522:	bf00      	nop
	}
	//Establecemos Event Flag para ejecutar la funcion encargada de las operaciones
	xEventGroupSetBits(xEventGroup_Execute_Operation, xBitsSet);
 8005524:	4b05      	ldr	r3, [pc, #20]	; (800553c <set_operation_in_queue+0x74>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 ffa2 	bl	8006474 <xEventGroupSetBits>
}
 8005530:	bf00      	nop
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	2000043c 	.word	0x2000043c
 800553c:	20000448 	.word	0x20000448

08005540 <straight_line>:
//------linea recta------
void straight_line(uint8_t dutty)   //a = [mm]
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	4603      	mov	r3, r0
 8005548:	71fb      	strb	r3, [r7, #7]
	//---------Calculo parametros de la linea recta---------
	calculation_parameter_distance(&parameter_Path_Robot);
 800554a:	486d      	ldr	r0, [pc, #436]	; (8005700 <straight_line+0x1c0>)
 800554c:	f7fd fad0 	bl	8002af0 <calculation_parameter_distance>
	//---------Configuracion coordenadas medidas---------
	//Coordenadas Globales
	parameter_Posicion_Robot.grad_grobal += ang_complementary;
 8005550:	4b6c      	ldr	r3, [pc, #432]	; (8005704 <straight_line+0x1c4>)
 8005552:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005556:	4b6c      	ldr	r3, [pc, #432]	; (8005708 <straight_line+0x1c8>)
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	f7fa feae 	bl	80002bc <__adddf3>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4967      	ldr	r1, [pc, #412]	; (8005704 <straight_line+0x1c4>)
 8005566:	e9c1 2304 	strd	r2, r3, [r1, #16]
	//Reiniciaos Coordenadas relativas
	parameter_Posicion_Robot.xr_position = parameter_Posicion_Robot.yr_position = 0;
 800556a:	4966      	ldr	r1, [pc, #408]	; (8005704 <straight_line+0x1c4>)
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8005578:	4b62      	ldr	r3, [pc, #392]	; (8005704 <straight_line+0x1c4>)
 800557a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800557e:	4961      	ldr	r1, [pc, #388]	; (8005704 <straight_line+0x1c4>)
 8005580:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.phi_relativo = 0;
 8005584:	495f      	ldr	r1, [pc, #380]	; (8005704 <straight_line+0x1c4>)
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.grad_relativo = 0;
 8005592:	495c      	ldr	r1, [pc, #368]	; (8005704 <straight_line+0x1c4>)
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	e9c1 2300 	strd	r2, r3, [r1]
	ang_for_Displament_ICR = 0;
 80055a0:	495a      	ldr	r1, [pc, #360]	; (800570c <straight_line+0x1cc>)
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	e9c1 2300 	strd	r2, r3, [r1]
	//---------Configuracion coordenadas teoricas---------
	parameter_Path_Robot.rotative_Grad_Relative = 0;
 80055ae:	4b54      	ldr	r3, [pc, #336]	; (8005700 <straight_line+0x1c0>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	639a      	str	r2, [r3, #56]	; 0x38
	//Calculos extra
	cos_cal = cos(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 80055b4:	4b53      	ldr	r3, [pc, #332]	; (8005704 <straight_line+0x1c4>)
 80055b6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80055ba:	a34f      	add	r3, pc, #316	; (adr r3, 80056f8 <straight_line+0x1b8>)
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f7fb f832 	bl	8000628 <__aeabi_dmul>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4610      	mov	r0, r2
 80055ca:	4619      	mov	r1, r3
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	4b4f      	ldr	r3, [pc, #316]	; (8005710 <straight_line+0x1d0>)
 80055d2:	f7fb f953 	bl	800087c <__aeabi_ddiv>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	ec43 2b17 	vmov	d7, r2, r3
 80055de:	eeb0 0a47 	vmov.f32	s0, s14
 80055e2:	eef0 0a67 	vmov.f32	s1, s15
 80055e6:	f00c f8d7 	bl	8011798 <cos>
 80055ea:	ec53 2b10 	vmov	r2, r3, d0
 80055ee:	4610      	mov	r0, r2
 80055f0:	4619      	mov	r1, r3
 80055f2:	f7fb fb11 	bl	8000c18 <__aeabi_d2f>
 80055f6:	4603      	mov	r3, r0
 80055f8:	4a46      	ldr	r2, [pc, #280]	; (8005714 <straight_line+0x1d4>)
 80055fa:	6013      	str	r3, [r2, #0]
	sin_cal = sin(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 80055fc:	4b41      	ldr	r3, [pc, #260]	; (8005704 <straight_line+0x1c4>)
 80055fe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005602:	a33d      	add	r3, pc, #244	; (adr r3, 80056f8 <straight_line+0x1b8>)
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f7fb f80e 	bl	8000628 <__aeabi_dmul>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4610      	mov	r0, r2
 8005612:	4619      	mov	r1, r3
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	4b3d      	ldr	r3, [pc, #244]	; (8005710 <straight_line+0x1d0>)
 800561a:	f7fb f92f 	bl	800087c <__aeabi_ddiv>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	ec43 2b17 	vmov	d7, r2, r3
 8005626:	eeb0 0a47 	vmov.f32	s0, s14
 800562a:	eef0 0a67 	vmov.f32	s1, s15
 800562e:	f00c f94f 	bl	80118d0 <sin>
 8005632:	ec53 2b10 	vmov	r2, r3, d0
 8005636:	4610      	mov	r0, r2
 8005638:	4619      	mov	r1, r3
 800563a:	f7fb faed 	bl	8000c18 <__aeabi_d2f>
 800563e:	4603      	mov	r3, r0
 8005640:	4a35      	ldr	r2, [pc, #212]	; (8005718 <straight_line+0x1d8>)
 8005642:	6013      	str	r3, [r2, #0]
	//-----------------PID-------------------------
	//Establecemos valores iniciales
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 8005644:	4b35      	ldr	r3, [pc, #212]	; (800571c <straight_line+0x1dc>)
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	60da      	str	r2, [r3, #12]
 800564c:	4b33      	ldr	r3, [pc, #204]	; (800571c <straight_line+0x1dc>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4a32      	ldr	r2, [pc, #200]	; (800571c <straight_line+0x1dc>)
 8005652:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 8005654:	4b31      	ldr	r3, [pc, #196]	; (800571c <straight_line+0x1dc>)
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	609a      	str	r2, [r3, #8]
 800565c:	4b2f      	ldr	r3, [pc, #188]	; (800571c <straight_line+0x1dc>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	4a2e      	ldr	r2, [pc, #184]	; (800571c <straight_line+0x1dc>)
 8005662:	6013      	str	r3, [r2, #0]
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 8005664:	4b2e      	ldr	r3, [pc, #184]	; (8005720 <straight_line+0x1e0>)
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	60da      	str	r2, [r3, #12]
 800566c:	4b2c      	ldr	r3, [pc, #176]	; (8005720 <straight_line+0x1e0>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	4a2b      	ldr	r2, [pc, #172]	; (8005720 <straight_line+0x1e0>)
 8005672:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 8005674:	4b2a      	ldr	r3, [pc, #168]	; (8005720 <straight_line+0x1e0>)
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	609a      	str	r2, [r3, #8]
 800567c:	4b28      	ldr	r3, [pc, #160]	; (8005720 <straight_line+0x1e0>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	4a27      	ldr	r2, [pc, #156]	; (8005720 <straight_line+0x1e0>)
 8005682:	6013      	str	r3, [r2, #0]
	parameter_PID_distace.e = parameter_PID_distace.e_prev = parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 8005684:	4b27      	ldr	r3, [pc, #156]	; (8005724 <straight_line+0x1e4>)
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	609a      	str	r2, [r3, #8]
 800568c:	4b25      	ldr	r3, [pc, #148]	; (8005724 <straight_line+0x1e4>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	4a24      	ldr	r2, [pc, #144]	; (8005724 <straight_line+0x1e4>)
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b23      	ldr	r3, [pc, #140]	; (8005724 <straight_line+0x1e4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a22      	ldr	r2, [pc, #136]	; (8005724 <straight_line+0x1e4>)
 800569a:	60d3      	str	r3, [r2, #12]
 800569c:	4b21      	ldr	r3, [pc, #132]	; (8005724 <straight_line+0x1e4>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4a20      	ldr	r2, [pc, #128]	; (8005724 <straight_line+0x1e4>)
 80056a2:	6053      	str	r3, [r2, #4]
	//-------------Configruacion Modo--------------
	//Definimos el dutty inicial
	handler_Motor_L.configMotor.new_dutty = duttySetPoint;
 80056a4:	4b20      	ldr	r3, [pc, #128]	; (8005728 <straight_line+0x1e8>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	ee07 3a90 	vmov	s15, r3
 80056ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b0:	4b1a      	ldr	r3, [pc, #104]	; (800571c <straight_line+0x1dc>)
 80056b2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	handler_Motor_R.configMotor.new_dutty = duttySetPoint;
 80056b6:	4b1c      	ldr	r3, [pc, #112]	; (8005728 <straight_line+0x1e8>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	ee07 3a90 	vmov	s15, r3
 80056be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c2:	4b17      	ldr	r3, [pc, #92]	; (8005720 <straight_line+0x1e0>)
 80056c4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	//Reiniciamos variables
	counting_action = 0;
 80056c8:	4b18      	ldr	r3, [pc, #96]	; (800572c <straight_line+0x1ec>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	801a      	strh	r2, [r3, #0]
	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(1, dutty, dutty);
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	ee07 3a90 	vmov	s15, r3
 80056d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	ee07 3a10 	vmov	s14, r3
 80056de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80056e2:	eef0 0a47 	vmov.f32	s1, s14
 80056e6:	eeb0 0a67 	vmov.f32	s0, s15
 80056ea:	2001      	movs	r0, #1
 80056ec:	f000 f85c 	bl	80057a8 <config_mode>
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	54442d18 	.word	0x54442d18
 80056fc:	400921fb 	.word	0x400921fb
 8005700:	20000458 	.word	0x20000458
 8005704:	200004d8 	.word	0x200004d8
 8005708:	200004d0 	.word	0x200004d0
 800570c:	200004c8 	.word	0x200004c8
 8005710:	40668000 	.word	0x40668000
 8005714:	200004c0 	.word	0x200004c0
 8005718:	200004c4 	.word	0x200004c4
 800571c:	20000350 	.word	0x20000350
 8005720:	200002dc 	.word	0x200002dc
 8005724:	200003d4 	.word	0x200003d4
 8005728:	20000018 	.word	0x20000018
 800572c:	200003f2 	.word	0x200003f2

08005730 <turn_itself>:
//---------Giro sobre si mismo---------
void turn_itself(int16_t turn_grad)     //a = [grados], b = direccion giro
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	80fb      	strh	r3, [r7, #6]
	//-------------Configruacion Modo--------------
	//Definicion del angulo de giro
	parameter_Path_Robot.rotative_Grad += parameter_Path_Robot.rotative_Grad_Relative += turn_grad;
 800573a:	4b17      	ldr	r3, [pc, #92]	; (8005798 <turn_itself+0x68>)
 800573c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800573e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005742:	4413      	add	r3, r2
 8005744:	4a14      	ldr	r2, [pc, #80]	; (8005798 <turn_itself+0x68>)
 8005746:	6393      	str	r3, [r2, #56]	; 0x38
 8005748:	4b13      	ldr	r3, [pc, #76]	; (8005798 <turn_itself+0x68>)
 800574a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800574c:	4b12      	ldr	r3, [pc, #72]	; (8005798 <turn_itself+0x68>)
 800574e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005750:	4413      	add	r3, r2
 8005752:	4a11      	ldr	r2, [pc, #68]	; (8005798 <turn_itself+0x68>)
 8005754:	63d3      	str	r3, [r2, #60]	; 0x3c
	//Cambiamso la direccion del motor
	if(turn_grad<0)
 8005756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800575a:	2b00      	cmp	r3, #0
 800575c:	da08      	bge.n	8005770 <turn_itself+0x40>
	{
		//Seleccionamos el motor derecho
		handler_Motor_Execute = &handler_Motor_R;
 800575e:	4b0f      	ldr	r3, [pc, #60]	; (800579c <turn_itself+0x6c>)
 8005760:	4a0f      	ldr	r2, [pc, #60]	; (80057a0 <turn_itself+0x70>)
 8005762:	601a      	str	r2, [r3, #0]
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <turn_itself+0x6c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f7fc ffca 	bl	8002702 <updateDirMotor>
 800576e:	e007      	b.n	8005780 <turn_itself+0x50>
	}
	else
	{
		//Seleccionamos el motor izquierdo
		handler_Motor_Execute = &handler_Motor_L;
 8005770:	4b0a      	ldr	r3, [pc, #40]	; (800579c <turn_itself+0x6c>)
 8005772:	4a0c      	ldr	r2, [pc, #48]	; (80057a4 <turn_itself+0x74>)
 8005774:	601a      	str	r2, [r3, #0]
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8005776:	4b09      	ldr	r3, [pc, #36]	; (800579c <turn_itself+0x6c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f7fc ffc1 	bl	8002702 <updateDirMotor>
	}

	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(2,20,21);
 8005780:	eef3 0a05 	vmov.f32	s1, #53	; 0x41a80000  21.0
 8005784:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8005788:	2002      	movs	r0, #2
 800578a:	f000 f80d 	bl	80057a8 <config_mode>
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000458 	.word	0x20000458
 800579c:	20000454 	.word	0x20000454
 80057a0:	200002dc 	.word	0x200002dc
 80057a4:	20000350 	.word	0x20000350

080057a8 <config_mode>:
//Configuracion del modo
void config_mode(uint8_t status, float dutty_L, float dutty_R)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80057b4:	edc7 0a01 	vstr	s1, [r7, #4]
 80057b8:	73fb      	strb	r3, [r7, #15]
	//Especificar el modo de operacion por medio de una Mailbox
	xQueueOverwrite(xMailbox_Mode, &status);
 80057ba:	4b10      	ldr	r3, [pc, #64]	; (80057fc <config_mode+0x54>)
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	f107 010f 	add.w	r1, r7, #15
 80057c2:	2302      	movs	r3, #2
 80057c4:	2200      	movs	r2, #0
 80057c6:	f001 f8a1 	bl	800690c <xQueueGenericSend>
	//Cargamos la configuracion
	config_motor(dutty_L, dutty_R, frequency_PWM_Motor); //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
 80057ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80057ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80057d2:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <config_mode+0x58>)
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057de:	eef0 0a67 	vmov.f32	s1, s15
 80057e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80057e6:	ee17 0a10 	vmov	r0, s14
 80057ea:	f000 f8fd 	bl	80059e8 <config_motor>
	//Iniciamos los motores
	status_motor(SET);
 80057ee:	2001      	movs	r0, #1
 80057f0:	f000 f88a 	bl	8005908 <status_motor>
}
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20000440 	.word	0x20000440
 8005800:	20000016 	.word	0x20000016

08005804 <init_coordinates>:
//Reinicio de coordenadas
void init_coordinates(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
	//Reinicio de varibable
	ang_for_Displament_ICR = 0;
 8005808:	493b      	ldr	r1, [pc, #236]	; (80058f8 <init_coordinates+0xf4>)
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	e9c1 2300 	strd	r2, r3, [r1]
	ang_complementary = 0;
 8005816:	4939      	ldr	r1, [pc, #228]	; (80058fc <init_coordinates+0xf8>)
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	e9c1 2300 	strd	r2, r3, [r1]
	//Reinicio de parametros de la structura de la posicion del robot
	parameter_Posicion_Robot.grad_grobal = 0; parameter_Posicion_Robot.grad_relativo = 0; parameter_Posicion_Robot.phi_relativo = 0;
 8005824:	4936      	ldr	r1, [pc, #216]	; (8005900 <init_coordinates+0xfc>)
 8005826:	f04f 0200 	mov.w	r2, #0
 800582a:	f04f 0300 	mov.w	r3, #0
 800582e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005832:	4933      	ldr	r1, [pc, #204]	; (8005900 <init_coordinates+0xfc>)
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	e9c1 2300 	strd	r2, r3, [r1]
 8005840:	492f      	ldr	r1, [pc, #188]	; (8005900 <init_coordinates+0xfc>)
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.xg_position = 0; parameter_Posicion_Robot.xg_position_inicial = 0; parameter_Posicion_Robot.xr_position = 0;
 800584e:	492c      	ldr	r1, [pc, #176]	; (8005900 <init_coordinates+0xfc>)
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800585c:	4928      	ldr	r1, [pc, #160]	; (8005900 <init_coordinates+0xfc>)
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800586a:	4925      	ldr	r1, [pc, #148]	; (8005900 <init_coordinates+0xfc>)
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.yg_position = 0; parameter_Posicion_Robot.yg_position_inicial = 0; parameter_Posicion_Robot.yr_position = 0;
 8005878:	4921      	ldr	r1, [pc, #132]	; (8005900 <init_coordinates+0xfc>)
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8005886:	491e      	ldr	r1, [pc, #120]	; (8005900 <init_coordinates+0xfc>)
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8005894:	491a      	ldr	r1, [pc, #104]	; (8005900 <init_coordinates+0xfc>)
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Reinicio de parametros de la structura de path
	parameter_Path_Robot.goal_Position_x = 0; parameter_Path_Robot.goal_Position_y = 0;
 80058a2:	4918      	ldr	r1, [pc, #96]	; (8005904 <init_coordinates+0x100>)
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 80058b0:	4914      	ldr	r1, [pc, #80]	; (8005904 <init_coordinates+0x100>)
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	parameter_Path_Robot.line_Distance = 0;
 80058be:	4b11      	ldr	r3, [pc, #68]	; (8005904 <init_coordinates+0x100>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	641a      	str	r2, [r3, #64]	; 0x40
	parameter_Path_Robot.rotative_Grad = 0; parameter_Path_Robot.rotative_Grad_Relative = 0;
 80058c4:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <init_coordinates+0x100>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80058ca:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <init_coordinates+0x100>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38
	parameter_Path_Robot.start_position_x = 0; parameter_Path_Robot.start_position_y = 0;
 80058d0:	490c      	ldr	r1, [pc, #48]	; (8005904 <init_coordinates+0x100>)
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 80058de:	4909      	ldr	r1, [pc, #36]	; (8005904 <init_coordinates+0x100>)
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80058ec:	bf00      	nop
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	200004c8 	.word	0x200004c8
 80058fc:	200004d0 	.word	0x200004d0
 8005900:	200004d8 	.word	0x200004d8
 8005904:	20000458 	.word	0x20000458

08005908 <status_motor>:
//-----------------------------Fin de la definicio de funciones del modo--------------------------------------------


//----------------------Iinicio definicion de las funciones de la Operacion Motor---------------------------------
void status_motor(uint8_t status)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d134      	bne.n	8005982 <status_motor+0x7a>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8005918:	4b30      	ldr	r3, [pc, #192]	; (80059dc <status_motor+0xd4>)
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	2101      	movs	r1, #1
 800591e:	4618      	mov	r0, r3
 8005920:	f005 ffd0 	bl	800b8c4 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8005924:	4b2e      	ldr	r3, [pc, #184]	; (80059e0 <status_motor+0xd8>)
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	2101      	movs	r1, #1
 800592a:	4618      	mov	r0, r3
 800592c:	f005 ffca 	bl	800b8c4 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 8005930:	4b2a      	ldr	r3, [pc, #168]	; (80059dc <status_motor+0xd4>)
 8005932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005934:	4b29      	ldr	r3, [pc, #164]	; (80059dc <status_motor+0xd4>)
 8005936:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	b2db      	uxtb	r3, r3
 8005940:	4619      	mov	r1, r3
 8005942:	4610      	mov	r0, r2
 8005944:	f005 fb62 	bl	800b00c <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 8005948:	4b25      	ldr	r3, [pc, #148]	; (80059e0 <status_motor+0xd8>)
 800594a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800594c:	4b24      	ldr	r3, [pc, #144]	; (80059e0 <status_motor+0xd8>)
 800594e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	b2db      	uxtb	r3, r3
 8005958:	4619      	mov	r1, r3
 800595a:	4610      	mov	r0, r2
 800595c:	f005 fb56 	bl	800b00c <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 8005960:	4b1e      	ldr	r3, [pc, #120]	; (80059dc <status_motor+0xd4>)
 8005962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005964:	2100      	movs	r1, #0
 8005966:	4618      	mov	r0, r3
 8005968:	f005 fb50 	bl	800b00c <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 800596c:	4b1c      	ldr	r3, [pc, #112]	; (80059e0 <status_motor+0xd8>)
 800596e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005970:	2100      	movs	r1, #0
 8005972:	4618      	mov	r0, r3
 8005974:	f005 fb4a 	bl	800b00c <GPIO_writePin>
		//Activamos la interrupcion
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_ENABLE);
 8005978:	2101      	movs	r1, #1
 800597a:	481a      	ldr	r0, [pc, #104]	; (80059e4 <status_motor+0xdc>)
 800597c:	f004 f84a 	bl	8009a14 <statusiInterruptionTimer>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Desactivamos interrupcion
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
	}
}
 8005980:	e027      	b.n	80059d2 <status_motor+0xca>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 8005982:	4b16      	ldr	r3, [pc, #88]	; (80059dc <status_motor+0xd4>)
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	2100      	movs	r1, #0
 8005988:	4618      	mov	r0, r3
 800598a:	f005 ff9b 	bl	800b8c4 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 800598e:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <status_motor+0xd8>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	2100      	movs	r1, #0
 8005994:	4618      	mov	r0, r3
 8005996:	f005 ff95 	bl	800b8c4 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 800599a:	4b10      	ldr	r3, [pc, #64]	; (80059dc <status_motor+0xd4>)
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	2100      	movs	r1, #0
 80059a0:	4618      	mov	r0, r3
 80059a2:	f005 fb33 	bl	800b00c <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 80059a6:	4b0e      	ldr	r3, [pc, #56]	; (80059e0 <status_motor+0xd8>)
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	2100      	movs	r1, #0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f005 fb2d 	bl	800b00c <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 80059b2:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <status_motor+0xd4>)
 80059b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b6:	2101      	movs	r1, #1
 80059b8:	4618      	mov	r0, r3
 80059ba:	f005 fb27 	bl	800b00c <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 80059be:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <status_motor+0xd8>)
 80059c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c2:	2101      	movs	r1, #1
 80059c4:	4618      	mov	r0, r3
 80059c6:	f005 fb21 	bl	800b00c <GPIO_writePin>
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
 80059ca:	2100      	movs	r1, #0
 80059cc:	4805      	ldr	r0, [pc, #20]	; (80059e4 <status_motor+0xdc>)
 80059ce:	f004 f821 	bl	8009a14 <statusiInterruptionTimer>
}
 80059d2:	bf00      	nop
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000350 	.word	0x20000350
 80059e0:	200002dc 	.word	0x200002dc
 80059e4:	200003a4 	.word	0x200003a4

080059e8 <config_motor>:
//Funcion para al configuracion de los motores
void config_motor(int firth, float second, float third)  //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80059f4:	edc7 0a01 	vstr	s1, [r7, #4]
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 80059f8:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <config_motor+0x68>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	839a      	strh	r2, [r3, #28]
	handler_Motor_L.parametersMotor.count = 0;
 80059fe:	4b15      	ldr	r3, [pc, #84]	; (8005a54 <config_motor+0x6c>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	839a      	strh	r2, [r3, #28]
	//Actualizamos el valor del dutty y frecuencia
	float value_period = 100000/third;
 8005a04:	eddf 6a14 	vldr	s13, [pc, #80]	; 8005a58 <config_motor+0x70>
 8005a08:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a10:	edc7 7a05 	vstr	s15, [r7, #20]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 8005a14:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a1c:	ee17 3a90 	vmov	r3, s15
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	4619      	mov	r1, r3
 8005a24:	480d      	ldr	r0, [pc, #52]	; (8005a5c <config_motor+0x74>)
 8005a26:	f004 f815 	bl	8009a54 <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, second);
 8005a2a:	ed97 0a02 	vldr	s0, [r7, #8]
 8005a2e:	4808      	ldr	r0, [pc, #32]	; (8005a50 <config_motor+0x68>)
 8005a30:	f7fc fe50 	bl	80026d4 <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, firth);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a42:	4804      	ldr	r0, [pc, #16]	; (8005a54 <config_motor+0x6c>)
 8005a44:	f7fc fe46 	bl	80026d4 <updateDuttyMotor>
}
 8005a48:	bf00      	nop
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	200002dc 	.word	0x200002dc
 8005a54:	20000350 	.word	0x20000350
 8005a58:	47c35000 	.word	0x47c35000
 8005a5c:	20000394 	.word	0x20000394

08005a60 <PID_simple>:



//----------------------------Inicio de la definicion de las funciones para el PID-----------------------------------------
void PID_simple(Parameters_PID_t *ptrPIDHandler, float timer, float setpoint, float measure)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a6c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005a70:	ed87 1a00 	vstr	s2, [r7]
	//Calculo del error
	ptrPIDHandler->e = setpoint-measure;
 8005a74:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a78:	edd7 7a00 	vldr	s15, [r7]
 8005a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float pro =  ptrPIDHandler->kp*ptrPIDHandler->e;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	ed93 7a04 	vldr	s14, [r3, #16]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a96:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->e_intel +=  ptrPIDHandler->e*timer;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	edd3 6a01 	vldr	s13, [r3, #4]
 8005aa6:	edd7 7a02 	vldr	s15, [r7, #8]
 8005aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	edc3 7a02 	vstr	s15, [r3, #8]
	float deriv =  ptrPIDHandler->kd*(ptrPIDHandler->e - ptrPIDHandler->e_prev)/timer;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	ed93 7a06 	vldr	s14, [r3, #24]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	edd3 7a03 	vldr	s15, [r3, #12]
 8005aca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ace:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005ad2:	ed97 7a02 	vldr	s14, [r7, #8]
 8005ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ada:	edc7 7a04 	vstr	s15, [r7, #16]
	ptrPIDHandler->u =  pro + ptrPIDHandler->ki*ptrPIDHandler->e_intel + deriv;        //Ley del controlador PID discreto
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	ed93 7a05 	vldr	s14, [r3, #20]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	edd3 7a02 	vldr	s15, [r3, #8]
 8005aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aee:	edd7 7a05 	vldr	s15, [r7, #20]
 8005af2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005af6:	edd7 7a04 	vldr	s15, [r7, #16]
 8005afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	edc3 7a00 	vstr	s15, [r3]
     //Retorno a los valores reales
	ptrPIDHandler->e_prev = ptrPIDHandler->e;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	60da      	str	r2, [r3, #12]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <correction>:

void correction(Motor_Handler_t *ptrMotorHandler)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
	//Definimos variables auxiliares
	float port_dutty = 0;
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
	//Guardamos valor
	port_dutty = ptrMotorHandler->configMotor.new_dutty;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2a:	60fb      	str	r3, [r7, #12]
    //Saturo el porcentaje de dutty en un tope maximo y minimo
    if (port_dutty >= 60) { port_dutty = 60; }
 8005b2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b30:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005b88 <correction+0x70>
 8005b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3c:	db02      	blt.n	8005b44 <correction+0x2c>
 8005b3e:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <correction+0x74>)
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	e018      	b.n	8005b76 <correction+0x5e>
    else if(port_dutty <= duttySetPoint-5) { port_dutty = duttySetPoint-5; }
 8005b44:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <correction+0x78>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	3b05      	subs	r3, #5
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b52:	ed97 7a03 	vldr	s14, [r7, #12]
 8005b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b5e:	d809      	bhi.n	8005b74 <correction+0x5c>
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <correction+0x78>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	3b05      	subs	r3, #5
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b6e:	edc7 7a03 	vstr	s15, [r7, #12]
 8005b72:	e000      	b.n	8005b76 <correction+0x5e>
    else{ __NOP();}
 8005b74:	bf00      	nop

    //Actualizamoe el valor del dutty
    updateDuttyMotor(ptrMotorHandler, port_dutty);
 8005b76:	ed97 0a03 	vldr	s0, [r7, #12]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fc fdaa 	bl	80026d4 <updateDuttyMotor>
}
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	42700000 	.word	0x42700000
 8005b8c:	42700000 	.word	0x42700000
 8005b90:	20000018 	.word	0x20000018

08005b94 <Separate_parameters>:



//Funcion para separar los diferentes parametros del string
uint8_t Separate_parameters(item_A_Star_t* ptritem, char *parameter_string)
{
 8005b94:	b590      	push	{r4, r7, lr}
 8005b96:	b08b      	sub	sp, #44	; 0x2c
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  //Definicion de variables
  char buffercharSeparate[10];
  uint8_t index_charSeparate = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t flag_Separate = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t status_parameter = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t index_init_Grid_map = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t findStart = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t findGoal = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  //---------------Definicion de los parametros iniciales---------------
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	843b      	strh	r3, [r7, #32]
 8005bc6:	e087      	b.n	8005cd8 <Separate_parameters+0x144>
  {
    //Verificacion del estado
    if(status_parameter<3)
 8005bc8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d876      	bhi.n	8005cbe <Separate_parameters+0x12a>
    {
      //Busqueda de la separacion dentro del string
      if (parameter_string[i] == ':')
 8005bd0:	8c3b      	ldrh	r3, [r7, #32]
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b3a      	cmp	r3, #58	; 0x3a
 8005bda:	d10d      	bne.n	8005bf8 <Separate_parameters+0x64>
      {
        buffercharSeparate[index_charSeparate] = '\0';
 8005bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005be0:	3328      	adds	r3, #40	; 0x28
 8005be2:	443b      	add	r3, r7
 8005be4:	2200      	movs	r2, #0
 8005be6:	f803 2c20 	strb.w	r2, [r3, #-32]
        index_charSeparate = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        flag_Separate = 1;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005bf6:	e00e      	b.n	8005c16 <Separate_parameters+0x82>
      }
      else
      {
        buffercharSeparate[index_charSeparate] = parameter_string[i];
 8005bf8:	8c3b      	ldrh	r3, [r7, #32]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	441a      	add	r2, r3
 8005bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c02:	7812      	ldrb	r2, [r2, #0]
 8005c04:	3328      	adds	r3, #40	; 0x28
 8005c06:	443b      	add	r3, r7
 8005c08:	f803 2c20 	strb.w	r2, [r3, #-32]
        index_charSeparate++;
 8005c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c10:	3301      	adds	r3, #1
 8005c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      //Si la bandera se levanta se asigna el valor correspondiente al parametro
      if(flag_Separate == 1)
 8005c16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d153      	bne.n	8005cc6 <Separate_parameters+0x132>
      {
        switch(status_parameter)
 8005c1e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d024      	beq.n	8005c70 <Separate_parameters+0xdc>
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	dc40      	bgt.n	8005cac <Separate_parameters+0x118>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <Separate_parameters+0xa0>
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d00f      	beq.n	8005c52 <Separate_parameters+0xbe>
 8005c32:	e03b      	b.n	8005cac <Separate_parameters+0x118>
        {
          case 0:
          {
        	//Convertimos valor y lo almacenamos
        	ptritem->grid_map_row = atoi(buffercharSeparate);
 8005c34:	f107 0308 	add.w	r3, r7, #8
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f006 fcba 	bl	800c5b2 <atoi>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	701a      	strb	r2, [r3, #0]
            //Verificacion parametros mal enviados
            if(ptritem->grid_map_row>19){ return SGMFALSE; }
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b13      	cmp	r3, #19
 8005c4c:	d92b      	bls.n	8005ca6 <Separate_parameters+0x112>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e10b      	b.n	8005e6a <Separate_parameters+0x2d6>
            break;
          }
          case 1:
          {
          	//Convertimos valor y lo almacenamos
        	ptritem->grid_map_colum = atoi(buffercharSeparate);
 8005c52:	f107 0308 	add.w	r3, r7, #8
 8005c56:	4618      	mov	r0, r3
 8005c58:	f006 fcab 	bl	800c5b2 <atoi>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	705a      	strb	r2, [r3, #1]
            //Verificacion parametros mal enviados
            if(ptritem->grid_map_colum>19){ return SGMFALSE; }
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	785b      	ldrb	r3, [r3, #1]
 8005c68:	2b13      	cmp	r3, #19
 8005c6a:	d91e      	bls.n	8005caa <Separate_parameters+0x116>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e0fc      	b.n	8005e6a <Separate_parameters+0x2d6>
            break;
          }
          case 2:
          {
            //Convertimos valor y lo almacenamos
        	ptritem->cell_separation = atof(buffercharSeparate);
 8005c70:	f107 0308 	add.w	r3, r7, #8
 8005c74:	4618      	mov	r0, r3
 8005c76:	f006 fc99 	bl	800c5ac <atof>
 8005c7a:	ec53 2b10 	vmov	r2, r3, d0
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4619      	mov	r1, r3
 8005c82:	f7fa ffc9 	bl	8000c18 <__aeabi_d2f>
 8005c86:	4602      	mov	r2, r0
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	605a      	str	r2, [r3, #4]
            //Verificacion parametros mal enviados
            if(ptritem->cell_separation>100){ return SGMFALSE; }
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c92:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8005e74 <Separate_parameters+0x2e0>
 8005c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9e:	dc00      	bgt.n	8005ca2 <Separate_parameters+0x10e>
            break;
 8005ca0:	e004      	b.n	8005cac <Separate_parameters+0x118>
            if(ptritem->cell_separation>100){ return SGMFALSE; }
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e0e1      	b.n	8005e6a <Separate_parameters+0x2d6>
            break;
 8005ca6:	bf00      	nop
 8005ca8:	e000      	b.n	8005cac <Separate_parameters+0x118>
            break;
 8005caa:	bf00      	nop
          }
        }
        //Aumentamos y reiniciamos bandera
        status_parameter++;
 8005cac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        flag_Separate = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005cbc:	e003      	b.n	8005cc6 <Separate_parameters+0x132>
      }
    }
    else
    {
      index_init_Grid_map = i;
 8005cbe:	8c3b      	ldrh	r3, [r7, #32]
 8005cc0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      break;
 8005cc4:	e00f      	b.n	8005ce6 <Separate_parameters+0x152>
    }
    //Verificacion parametros mal enviados
    if(index_charSeparate>5){ return SGMFALSE; }
 8005cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cca:	2b05      	cmp	r3, #5
 8005ccc:	d901      	bls.n	8005cd2 <Separate_parameters+0x13e>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e0cb      	b.n	8005e6a <Separate_parameters+0x2d6>
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 8005cd2:	8c3b      	ldrh	r3, [r7, #32]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	843b      	strh	r3, [r7, #32]
 8005cd8:	8c3b      	ldrh	r3, [r7, #32]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	4413      	add	r3, r2
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f47f af71 	bne.w	8005bc8 <Separate_parameters+0x34>
  }
  //---------------transformacion del string grid map en un array---------------
  //Variables para los indices
  uint8_t index_row = 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	77fb      	strb	r3, [r7, #31]
  uint8_t index_col = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	77bb      	strb	r3, [r7, #30]

  //Separacion de cada caracter
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 8005cee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cf2:	83bb      	strh	r3, [r7, #28]
 8005cf4:	e031      	b.n	8005d5a <Separate_parameters+0x1c6>
  {
    if (parameter_string[i] == ';')
 8005cf6:	8bbb      	ldrh	r3, [r7, #28]
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b3b      	cmp	r3, #59	; 0x3b
 8005d00:	d10b      	bne.n	8005d1a <Separate_parameters+0x186>
    {
      //Se aumenta el indice de la fila y se reinicia el indice de la columna
      index_row++;
 8005d02:	7ffb      	ldrb	r3, [r7, #31]
 8005d04:	3301      	adds	r3, #1
 8005d06:	77fb      	strb	r3, [r7, #31]
      index_col = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	77bb      	strb	r3, [r7, #30]
      //Verificacion parametros mal enviados
      if(index_row>ptritem->grid_map_row){ return SGMFALSE; }
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	7ffa      	ldrb	r2, [r7, #31]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d91e      	bls.n	8005d54 <Separate_parameters+0x1c0>
 8005d16:	2300      	movs	r3, #0
 8005d18:	e0a7      	b.n	8005e6a <Separate_parameters+0x2d6>
    }
    else
    {
      //Se guarda el caracter
      ptritem->grid_map[index_row][index_col].feature = parameter_string[i];
 8005d1a:	8bbb      	ldrh	r3, [r7, #28]
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	441a      	add	r2, r3
 8005d20:	7ffb      	ldrb	r3, [r7, #31]
 8005d22:	7fb9      	ldrb	r1, [r7, #30]
 8005d24:	7814      	ldrb	r4, [r2, #0]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	2058      	movs	r0, #88	; 0x58
 8005d2a:	fb00 f101 	mul.w	r1, r0, r1
 8005d2e:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8005d32:	fb00 f303 	mul.w	r3, r0, r3
 8005d36:	440b      	add	r3, r1
 8005d38:	4413      	add	r3, r2
 8005d3a:	3364      	adds	r3, #100	; 0x64
 8005d3c:	4622      	mov	r2, r4
 8005d3e:	701a      	strb	r2, [r3, #0]
      //se aumenta el indice de la columna
      index_col++;
 8005d40:	7fbb      	ldrb	r3, [r7, #30]
 8005d42:	3301      	adds	r3, #1
 8005d44:	77bb      	strb	r3, [r7, #30]
      //Verificacion parametros mal enviados
      if(index_col>ptritem->grid_map_colum){ return SGMFALSE; }
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	7fba      	ldrb	r2, [r7, #30]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d901      	bls.n	8005d54 <Separate_parameters+0x1c0>
 8005d50:	2300      	movs	r3, #0
 8005d52:	e08a      	b.n	8005e6a <Separate_parameters+0x2d6>
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 8005d54:	8bbb      	ldrh	r3, [r7, #28]
 8005d56:	3301      	adds	r3, #1
 8005d58:	83bb      	strh	r3, [r7, #28]
 8005d5a:	8bbb      	ldrh	r3, [r7, #28]
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	4413      	add	r3, r2
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1c7      	bne.n	8005cf6 <Separate_parameters+0x162>
    }
  }
  //---------------Definicion del start y del goal---------------
  //Recorremo el array creado para encontrar la posicion de los objetivos
  for(int i = 0; i < ptritem->grid_map_row; i++)
 8005d66:	2300      	movs	r3, #0
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	e06d      	b.n	8005e48 <Separate_parameters+0x2b4>
  {
    for(int j = 0; j < ptritem->grid_map_colum; j++)
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	e061      	b.n	8005e36 <Separate_parameters+0x2a2>
    {
      if(ptritem->grid_map[i][j].feature == 'S')
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6979      	ldr	r1, [r7, #20]
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	2058      	movs	r0, #88	; 0x58
 8005d7a:	fb00 f101 	mul.w	r1, r0, r1
 8005d7e:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8005d82:	fb00 f303 	mul.w	r3, r0, r3
 8005d86:	440b      	add	r3, r1
 8005d88:	4413      	add	r3, r2
 8005d8a:	3364      	adds	r3, #100	; 0x64
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b53      	cmp	r3, #83	; 0x53
 8005d90:	d11f      	bne.n	8005dd2 <Separate_parameters+0x23e>
      {
        //Definimos su posicion
    	ptritem->start_x = j*ptritem->cell_separation;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	ee07 3a90 	vmov	s15, r3
 8005d98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	edc3 7a02 	vstr	s15, [r3, #8]
    	ptritem->start_y = i*ptritem->cell_separation;
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	edc3 7a03 	vstr	s15, [r3, #12]
    	//Aumentamos valor
    	findStart++;
 8005dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dca:	3301      	adds	r3, #1
 8005dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd0:	e02e      	b.n	8005e30 <Separate_parameters+0x29c>
      }
      else if (ptritem->grid_map[i][j].feature == 'G')
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6979      	ldr	r1, [r7, #20]
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	2058      	movs	r0, #88	; 0x58
 8005dda:	fb00 f101 	mul.w	r1, r0, r1
 8005dde:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8005de2:	fb00 f303 	mul.w	r3, r0, r3
 8005de6:	440b      	add	r3, r1
 8005de8:	4413      	add	r3, r2
 8005dea:	3364      	adds	r3, #100	; 0x64
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b47      	cmp	r3, #71	; 0x47
 8005df0:	d11e      	bne.n	8005e30 <Separate_parameters+0x29c>
      {
		  //Definimos su posicion
		  ptritem->goal_x= j*ptritem->cell_separation;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	ee07 3a90 	vmov	s15, r3
 8005df8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	edc3 7a04 	vstr	s15, [r3, #16]
		  ptritem->goal_y= i*ptritem->cell_separation;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	edc3 7a05 	vstr	s15, [r3, #20]
		  //Aumentamos valor
		  findGoal++;
 8005e26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    for(int j = 0; j < ptritem->grid_map_colum; j++)
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	3301      	adds	r3, #1
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	db97      	blt.n	8005d72 <Separate_parameters+0x1de>
  for(int i = 0; i < ptritem->grid_map_row; i++)
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	3301      	adds	r3, #1
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	4293      	cmp	r3, r2
 8005e52:	db8b      	blt.n	8005d6c <Separate_parameters+0x1d8>
      }
    }
  }
  /*Si el codigo llego hasta aqui falta un ultima verificacion, con lo cual
  se envia un TRUE o FALSe*/
  if(findStart==1 && findGoal==1){ return SGMTRUE;}
 8005e54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d105      	bne.n	8005e68 <Separate_parameters+0x2d4>
 8005e5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <Separate_parameters+0x2d4>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <Separate_parameters+0x2d6>
  else{ return SGMFALSE; }
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	372c      	adds	r7, #44	; 0x2c
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd90      	pop	{r4, r7, pc}
 8005e72:	bf00      	nop
 8005e74:	42c80000 	.word	0x42c80000

08005e78 <send_path>:


//Funcion para imprimir la ruta encontrada
void send_path(file_cell_t *file_cell, Cell_map_t array_string[20][20], uint8_t row, uint8_t colum)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b090      	sub	sp, #64	; 0x40
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	4611      	mov	r1, r2
 8005e84:	461a      	mov	r2, r3
 8005e86:	460b      	mov	r3, r1
 8005e88:	71fb      	strb	r3, [r7, #7]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	71bb      	strb	r3, [r7, #6]
  //Variables
  uint8_t index = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  char buffermsg[22] = {0};
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	f107 0318 	add.w	r3, r7, #24
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	605a      	str	r2, [r3, #4]
 8005ea2:	609a      	str	r2, [r3, #8]
 8005ea4:	60da      	str	r2, [r3, #12]
 8005ea6:	821a      	strh	r2, [r3, #16]
  char *ptrmsg = buffermsg;
 8005ea8:	f107 0314 	add.w	r3, r7, #20
 8005eac:	613b      	str	r3, [r7, #16]

  //Cambiamos los caracteres de la malla de strings por caracteres que indican la ruta establecida con A Star
  while(1)
  {
	if(file_cell->ptrCell_parent[index] != NULL)
 8005eae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d022      	beq.n	8005f04 <send_path+0x8c>
	{
	   array_string[file_cell->ptrCell_parent[index]->index_row][file_cell->ptrCell_parent[index]->index_col].feature = '+';
 8005ebe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	789b      	ldrb	r3, [r3, #2]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	441a      	add	r2, r3
 8005eda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	78db      	ldrb	r3, [r3, #3]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	2358      	movs	r3, #88	; 0x58
 8005eec:	fb01 f303 	mul.w	r3, r1, r3
 8005ef0:	4413      	add	r3, r2
 8005ef2:	334c      	adds	r3, #76	; 0x4c
 8005ef4:	222b      	movs	r2, #43	; 0x2b
 8005ef6:	701a      	strb	r2, [r3, #0]
	  index++;
 8005ef8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005efc:	3301      	adds	r3, #1
 8005efe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(file_cell->ptrCell_parent[index] != NULL)
 8005f02:	e7d4      	b.n	8005eae <send_path+0x36>
	}
	else
	{
	  break;
 8005f04:	bf00      	nop
	}
  }
  //Indica de nuevo el inicio del recorrido
   array_string[file_cell->ptrCell_parent[0]->index_row][file_cell->ptrCell_parent[0]->index_col].feature = 'S';
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	789b      	ldrb	r3, [r3, #2]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8005f12:	fb02 f303 	mul.w	r3, r2, r3
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	441a      	add	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	78db      	ldrb	r3, [r3, #3]
 8005f20:	4619      	mov	r1, r3
 8005f22:	2358      	movs	r3, #88	; 0x58
 8005f24:	fb01 f303 	mul.w	r3, r1, r3
 8005f28:	4413      	add	r3, r2
 8005f2a:	334c      	adds	r3, #76	; 0x4c
 8005f2c:	2253      	movs	r2, #83	; 0x53
 8005f2e:	701a      	strb	r2, [r3, #0]

  //Envio de caracter para indicar que se trata del grid map
  buffermsg[0] = '$'; buffermsg[1] = '\0';
 8005f30:	2324      	movs	r3, #36	; 0x24
 8005f32:	753b      	strb	r3, [r7, #20]
 8005f34:	2300      	movs	r3, #0
 8005f36:	757b      	strb	r3, [r7, #21]
  //Se envia la opcion especificada
  xQueueSend(xQueue_Print, &ptrmsg, portMAX_DELAY);
 8005f38:	4b31      	ldr	r3, [pc, #196]	; (8006000 <send_path+0x188>)
 8005f3a:	6818      	ldr	r0, [r3, #0]
 8005f3c:	f107 0110 	add.w	r1, r7, #16
 8005f40:	2300      	movs	r3, #0
 8005f42:	f04f 32ff 	mov.w	r2, #4294967295
 8005f46:	f000 fce1 	bl	800690c <xQueueGenericSend>
  //Imprimir la malla modificada
  for(int i=0;i<row;i++)
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f4e:	e03c      	b.n	8005fca <send_path+0x152>
  {
	for(int j=0;j<colum;j++)
 8005f50:	2300      	movs	r3, #0
 8005f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f54:	e019      	b.n	8005f8a <send_path+0x112>
	{
	  //Agregamos las caracteristicas por fila a un buffer
	  buffermsg[j] = array_string[i][j].feature;
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8005f5c:	fb02 f303 	mul.w	r3, r2, r3
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	441a      	add	r2, r3
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	2158      	movs	r1, #88	; 0x58
 8005f68:	fb01 f303 	mul.w	r3, r1, r3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	334c      	adds	r3, #76	; 0x4c
 8005f70:	7819      	ldrb	r1, [r3, #0]
 8005f72:	f107 0214 	add.w	r2, r7, #20
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	4413      	add	r3, r2
 8005f7a:	460a      	mov	r2, r1
 8005f7c:	701a      	strb	r2, [r3, #0]
	  index = j;
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for(int j=0;j<colum;j++)
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	3301      	adds	r3, #1
 8005f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f8a:	79bb      	ldrb	r3, [r7, #6]
 8005f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	dbe1      	blt.n	8005f56 <send_path+0xde>
	}
	//Agragamos el valor nullo al final del string
	buffermsg[index+1] = ';';
 8005f92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f96:	3301      	adds	r3, #1
 8005f98:	3338      	adds	r3, #56	; 0x38
 8005f9a:	443b      	add	r3, r7
 8005f9c:	223b      	movs	r2, #59	; 0x3b
 8005f9e:	f803 2c24 	strb.w	r2, [r3, #-36]
	buffermsg[index+2] = '\0';
 8005fa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fa6:	3302      	adds	r3, #2
 8005fa8:	3338      	adds	r3, #56	; 0x38
 8005faa:	443b      	add	r3, r7
 8005fac:	2200      	movs	r2, #0
 8005fae:	f803 2c24 	strb.w	r2, [r3, #-36]
	//Se envia la opcion especificada
	xQueueSend(xQueue_Print, &ptrmsg, portMAX_DELAY);
 8005fb2:	4b13      	ldr	r3, [pc, #76]	; (8006000 <send_path+0x188>)
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	f107 0110 	add.w	r1, r7, #16
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc0:	f000 fca4 	bl	800690c <xQueueGenericSend>
  for(int i=0;i<row;i++)
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	dbbe      	blt.n	8005f50 <send_path+0xd8>
  }
	/*Se envia una notificacion previa con la finalidad de desbloquear
	 la tarea, la cual se bloquea para que se envie el mensaje por USART*/
	xTaskNotify(xHandleTask_Apply_Astar, 0, eNoAction);
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <send_path+0x18c>)
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2100      	movs	r1, #0
 8005fe0:	f002 f960 	bl	80082a4 <xTaskGenericNotify>
	xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8005fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	2300      	movs	r3, #0
 8005fec:	2200      	movs	r2, #0
 8005fee:	2100      	movs	r1, #0
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	f002 f8d7 	bl	80081a4 <xTaskGenericNotifyWait>
}
 8005ff6:	bf00      	nop
 8005ff8:	3738      	adds	r7, #56	; 0x38
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000430 	.word	0x20000430
 8006004:	20000424 	.word	0x20000424

08006008 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006008:	480d      	ldr	r0, [pc, #52]	; (8006040 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800600a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800600c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006010:	480c      	ldr	r0, [pc, #48]	; (8006044 <LoopForever+0x6>)
  ldr r1, =_edata
 8006012:	490d      	ldr	r1, [pc, #52]	; (8006048 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006014:	4a0d      	ldr	r2, [pc, #52]	; (800604c <LoopForever+0xe>)
  movs r3, #0
 8006016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006018:	e002      	b.n	8006020 <LoopCopyDataInit>

0800601a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800601a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800601c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800601e:	3304      	adds	r3, #4

08006020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006024:	d3f9      	bcc.n	800601a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006026:	4a0a      	ldr	r2, [pc, #40]	; (8006050 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006028:	4c0a      	ldr	r4, [pc, #40]	; (8006054 <LoopForever+0x16>)
  movs r3, #0
 800602a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800602c:	e001      	b.n	8006032 <LoopFillZerobss>

0800602e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800602e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006030:	3204      	adds	r2, #4

08006032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006034:	d3fb      	bcc.n	800602e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006036:	f006 fac7 	bl	800c5c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800603a:	f7fd f955 	bl	80032e8 <main>

0800603e <LoopForever>:

LoopForever:
    b LoopForever
 800603e:	e7fe      	b.n	800603e <LoopForever>
  ldr   r0, =_estack
 8006040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006048:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 800604c:	08014b28 	.word	0x08014b28
  ldr r2, =_sbss
 8006050:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8006054:	20013b70 	.word	0x20013b70

08006058 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006058:	e7fe      	b.n	8006058 <ADC_IRQHandler>
	...

0800605c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	4603      	mov	r3, r0
 8006064:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8006066:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <ITM_SendChar+0x48>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a0e      	ldr	r2, [pc, #56]	; (80060a4 <ITM_SendChar+0x48>)
 800606c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006070:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8006072:	4b0d      	ldr	r3, [pc, #52]	; (80060a8 <ITM_SendChar+0x4c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a0c      	ldr	r2, [pc, #48]	; (80060a8 <ITM_SendChar+0x4c>)
 8006078:	f043 0301 	orr.w	r3, r3, #1
 800607c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800607e:	bf00      	nop
 8006080:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0f8      	beq.n	8006080 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800608e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	6013      	str	r3, [r2, #0]
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	e000edfc 	.word	0xe000edfc
 80060a8:	e0000e00 	.word	0xe0000e00

080060ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
	return 1;
 80060b0:	2301      	movs	r3, #1
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <_kill>:

int _kill(int pid, int sig)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80060c6:	f006 fa79 	bl	800c5bc <__errno>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2216      	movs	r2, #22
 80060ce:	601a      	str	r2, [r3, #0]
	return -1;
 80060d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <_exit>:

void _exit (int status)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80060e4:	f04f 31ff 	mov.w	r1, #4294967295
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff ffe7 	bl	80060bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80060ee:	e7fe      	b.n	80060ee <_exit+0x12>

080060f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	e00a      	b.n	8006118 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006102:	f3af 8000 	nop.w
 8006106:	4601      	mov	r1, r0
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	60ba      	str	r2, [r7, #8]
 800610e:	b2ca      	uxtb	r2, r1
 8006110:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	3301      	adds	r3, #1
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	429a      	cmp	r2, r3
 800611e:	dbf0      	blt.n	8006102 <_read+0x12>
	}

return len;
 8006120:	687b      	ldr	r3, [r7, #4]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b086      	sub	sp, #24
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	e009      	b.n	8006150 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	60ba      	str	r2, [r7, #8]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff ff89 	bl	800605c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	3301      	adds	r3, #1
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	429a      	cmp	r2, r3
 8006156:	dbf1      	blt.n	800613c <_write+0x12>
	}
	return len;
 8006158:	687b      	ldr	r3, [r7, #4]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <_close>:

int _close(int file)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
	return -1;
 800616a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800618a:	605a      	str	r2, [r3, #4]
	return 0;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <_isatty>:

int _isatty(int file)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
	return 1;
 80061a2:	2301      	movs	r3, #1
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
	return 0;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80061d4:	4a14      	ldr	r2, [pc, #80]	; (8006228 <_sbrk+0x5c>)
 80061d6:	4b15      	ldr	r3, [pc, #84]	; (800622c <_sbrk+0x60>)
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80061e0:	4b13      	ldr	r3, [pc, #76]	; (8006230 <_sbrk+0x64>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d102      	bne.n	80061ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80061e8:	4b11      	ldr	r3, [pc, #68]	; (8006230 <_sbrk+0x64>)
 80061ea:	4a12      	ldr	r2, [pc, #72]	; (8006234 <_sbrk+0x68>)
 80061ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80061ee:	4b10      	ldr	r3, [pc, #64]	; (8006230 <_sbrk+0x64>)
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4413      	add	r3, r2
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d207      	bcs.n	800620c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80061fc:	f006 f9de 	bl	800c5bc <__errno>
 8006200:	4603      	mov	r3, r0
 8006202:	220c      	movs	r2, #12
 8006204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006206:	f04f 33ff 	mov.w	r3, #4294967295
 800620a:	e009      	b.n	8006220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800620c:	4b08      	ldr	r3, [pc, #32]	; (8006230 <_sbrk+0x64>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006212:	4b07      	ldr	r3, [pc, #28]	; (8006230 <_sbrk+0x64>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4413      	add	r3, r2
 800621a:	4a05      	ldr	r2, [pc, #20]	; (8006230 <_sbrk+0x64>)
 800621c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800621e:	68fb      	ldr	r3, [r7, #12]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20020000 	.word	0x20020000
 800622c:	00000400 	.word	0x00000400
 8006230:	20000530 	.word	0x20000530
 8006234:	20013b70 	.word	0x20013b70

08006238 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800623e:	201c      	movs	r0, #28
 8006240:	f003 f834 	bl	80092ac <pvPortMalloc>
 8006244:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d007      	beq.n	800625c <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3304      	adds	r3, #4
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f9b9 	bl	80065ce <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 800625c:	687b      	ldr	r3, [r7, #4]
    }
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b090      	sub	sp, #64	; 0x40
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	637b      	str	r3, [r7, #52]	; 0x34
    EventBits_t uxReturn, uxControlBits = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	63bb      	str	r3, [r7, #56]	; 0x38
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 800627e:	2300      	movs	r3, #0
 8006280:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <xEventGroupWaitBits+0x36>
        __asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	623b      	str	r3, [r7, #32]
    }
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <xEventGroupWaitBits+0x34>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <xEventGroupWaitBits+0x56>
        __asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	61fb      	str	r3, [r7, #28]
    }
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xEventGroupWaitBits+0x54>
    configASSERT( uxBitsToWaitFor != 0 );
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <xEventGroupWaitBits+0x72>
        __asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	61bb      	str	r3, [r7, #24]
    }
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <xEventGroupWaitBits+0x70>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062da:	f001 feb3 	bl	8008044 <xTaskGetSchedulerState>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d102      	bne.n	80062ea <xEventGroupWaitBits+0x82>
 80062e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <xEventGroupWaitBits+0x86>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <xEventGroupWaitBits+0x88>
 80062ee:	2300      	movs	r3, #0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <xEventGroupWaitBits+0xa2>
        __asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	617b      	str	r3, [r7, #20]
    }
 8006306:	bf00      	nop
 8006308:	e7fe      	b.n	8006308 <xEventGroupWaitBits+0xa0>
        }
    #endif

    vTaskSuspendAll();
 800630a:	f001 fa43 	bl	8007794 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800630e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800631a:	f000 f936 	bl	800658a <prvTestWaitCondition>
 800631e:	62b8      	str	r0, [r7, #40]	; 0x28

        if( xWaitConditionMet != pdFALSE )
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00e      	beq.n	8006344 <xEventGroupWaitBits+0xdc>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTicksToWait = ( TickType_t ) 0;
 800632a:	2300      	movs	r3, #0
 800632c:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d028      	beq.n	8006386 <xEventGroupWaitBits+0x11e>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	43db      	mvns	r3, r3
 800633c:	401a      	ands	r2, r3
 800633e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e020      	b.n	8006386 <xEventGroupWaitBits+0x11e>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8006344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <xEventGroupWaitBits+0xec>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 800634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTimeoutOccurred = pdTRUE;
 800634e:	2301      	movs	r3, #1
 8006350:	633b      	str	r3, [r7, #48]	; 0x30
 8006352:	e018      	b.n	8006386 <xEventGroupWaitBits+0x11e>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <xEventGroupWaitBits+0xfa>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006360:	63bb      	str	r3, [r7, #56]	; 0x38
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <xEventGroupWaitBits+0x108>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800636e:	63bb      	str	r3, [r7, #56]	; 0x38
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006372:	1d18      	adds	r0, r3, #4
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	4313      	orrs	r3, r2
 800637a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800637c:	4619      	mov	r1, r3
 800637e:	f001 fbfb 	bl	8007b78 <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8006382:	2300      	movs	r3, #0
 8006384:	63fb      	str	r3, [r7, #60]	; 0x3c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8006386:	f001 fa13 	bl	80077b0 <xTaskResumeAll>
 800638a:	6278      	str	r0, [r7, #36]	; 0x24

    if( xTicksToWait != ( TickType_t ) 0 )
 800638c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800638e:	2b00      	cmp	r3, #0
 8006390:	d031      	beq.n	80063f6 <xEventGroupWaitBits+0x18e>
    {
        if( xAlreadyYielded == pdFALSE )
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	2b00      	cmp	r3, #0
 8006396:	d107      	bne.n	80063a8 <xEventGroupWaitBits+0x140>
        {
            portYIELD_WITHIN_API();
 8006398:	4b19      	ldr	r3, [pc, #100]	; (8006400 <xEventGroupWaitBits+0x198>)
 800639a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 80063a8:	f001 fee4 	bl	8008174 <uxTaskResetEventItemValue>
 80063ac:	63f8      	str	r0, [r7, #60]	; 0x3c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80063ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d11a      	bne.n	80063ee <xEventGroupWaitBits+0x186>
        {
            taskENTER_CRITICAL();
 80063b8:	f002 fe56 	bl	8009068 <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 80063bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80063c8:	f000 f8df 	bl	800658a <prvTestWaitCondition>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <xEventGroupWaitBits+0x17e>
                {
                    if( xClearOnExit != pdFALSE )
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d006      	beq.n	80063e6 <xEventGroupWaitBits+0x17e>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80063d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	43db      	mvns	r3, r3
 80063e0:	401a      	ands	r2, r3
 80063e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e4:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 80063e6:	2301      	movs	r3, #1
 80063e8:	633b      	str	r3, [r7, #48]	; 0x30
            }
            taskEXIT_CRITICAL();
 80063ea:	f002 fe6d 	bl	80090c8 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80063ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 80063f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3740      	adds	r7, #64	; 0x40
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	e000ed04 	.word	0xe000ed04

08006404 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	617b      	str	r3, [r7, #20]
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10a      	bne.n	800642e <xEventGroupClearBits+0x2a>
        __asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	60fb      	str	r3, [r7, #12]
    }
 800642a:	bf00      	nop
 800642c:	e7fe      	b.n	800642c <xEventGroupClearBits+0x28>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <xEventGroupClearBits+0x4a>
        __asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	60bb      	str	r3, [r7, #8]
    }
 800644a:	bf00      	nop
 800644c:	e7fe      	b.n	800644c <xEventGroupClearBits+0x48>

    taskENTER_CRITICAL();
 800644e:	f002 fe0b 	bl	8009068 <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	613b      	str	r3, [r7, #16]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	43db      	mvns	r3, r3
 8006460:	401a      	ands	r2, r3
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 8006466:	f002 fe2f 	bl	80090c8 <vPortExitCritical>

    return uxReturn;
 800646a:	693b      	ldr	r3, [r7, #16]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08e      	sub	sp, #56	; 0x38
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800647e:	2300      	movs	r3, #0
 8006480:	633b      	str	r3, [r7, #48]	; 0x30
    EventGroup_t * pxEventBits = xEventGroup;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xMatchFound = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <xEventGroupSetBits+0x32>
        __asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	613b      	str	r3, [r7, #16]
    }
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <xEventGroupSetBits+0x30>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <xEventGroupSetBits+0x52>
        __asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	60fb      	str	r3, [r7, #12]
    }
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xEventGroupSetBits+0x50>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	3304      	adds	r3, #4
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	3308      	adds	r3, #8
 80064d0:	623b      	str	r3, [r7, #32]
    vTaskSuspendAll();
 80064d2:	f001 f95f 	bl	8007794 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	637b      	str	r3, [r7, #52]	; 0x34

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 80064e8:	e03c      	b.n	8006564 <xEventGroupSetBits+0xf0>
        {
            pxNext = listGET_NEXT( pxListItem );
 80064ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	61fb      	str	r3, [r7, #28]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80064f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	61bb      	str	r3, [r7, #24]
            xMatchFound = pdFALSE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006500:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006508:	61bb      	str	r3, [r7, #24]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d108      	bne.n	8006526 <xEventGroupSetBits+0xb2>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	4013      	ands	r3, r2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00b      	beq.n	8006538 <xEventGroupSetBits+0xc4>
                {
                    xMatchFound = pdTRUE;
 8006520:	2301      	movs	r3, #1
 8006522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006524:	e008      	b.n	8006538 <xEventGroupSetBits+0xc4>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	4013      	ands	r3, r2
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	429a      	cmp	r2, r3
 8006532:	d101      	bne.n	8006538 <xEventGroupSetBits+0xc4>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8006534:	2301      	movs	r3, #1
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d010      	beq.n	8006560 <xEventGroupSetBits+0xec>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <xEventGroupSetBits+0xdc>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8006548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	4313      	orrs	r3, r2
 800654e:	633b      	str	r3, [r7, #48]	; 0x30
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006558:	4619      	mov	r1, r3
 800655a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800655c:	f001 fbd6 	bl	8007d0c <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	637b      	str	r3, [r7, #52]	; 0x34
        while( pxListItem != pxListEnd )
 8006564:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	429a      	cmp	r2, r3
 800656a:	d1be      	bne.n	80064ea <xEventGroupSetBits+0x76>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	43db      	mvns	r3, r3
 8006574:	401a      	ands	r2, r3
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 800657a:	f001 f919 	bl	80077b0 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	681b      	ldr	r3, [r3, #0]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3738      	adds	r7, #56	; 0x38
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 800658a:	b480      	push	{r7}
 800658c:	b087      	sub	sp, #28
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 8006596:	2300      	movs	r3, #0
 8006598:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d107      	bne.n	80065b0 <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	4013      	ands	r3, r2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 80065aa:	2301      	movs	r3, #1
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	e007      	b.n	80065c0 <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4013      	ands	r3, r2
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d101      	bne.n	80065c0 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 80065bc:	2301      	movs	r3, #1
 80065be:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 80065c0:	697b      	ldr	r3, [r7, #20]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	371c      	adds	r7, #28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f103 0208 	add.w	r2, r3, #8
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f04f 32ff 	mov.w	r2, #4294967295
 80065e6:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f103 0208 	add.w	r2, r3, #8
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f103 0208 	add.w	r2, r3, #8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	601a      	str	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d103      	bne.n	8006690 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	e00c      	b.n	80066aa <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3308      	adds	r3, #8
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	e002      	b.n	800669e <vListInsert+0x2e>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d2f6      	bcs.n	8006698 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	601a      	str	r2, [r3, #0]
}
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066e2:	b480      	push	{r7}
 80066e4:	b085      	sub	sp, #20
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6892      	ldr	r2, [r2, #8]
 80066f8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6852      	ldr	r2, [r2, #4]
 8006702:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	d103      	bne.n	8006716 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	1e5a      	subs	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <xQueueGenericReset+0x2a>
        __asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	60bb      	str	r3, [r7, #8]
    }
 800675e:	bf00      	nop
 8006760:	e7fe      	b.n	8006760 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8006762:	f002 fc81 	bl	8009068 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676e:	68f9      	ldr	r1, [r7, #12]
 8006770:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	441a      	add	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	3b01      	subs	r3, #1
 8006794:	68f9      	ldr	r1, [r7, #12]
 8006796:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	441a      	add	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	22ff      	movs	r2, #255	; 0xff
 80067a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	22ff      	movs	r2, #255	; 0xff
 80067ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d114      	bne.n	80067e2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01a      	beq.n	80067f6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3310      	adds	r3, #16
 80067c4:	4618      	mov	r0, r3
 80067c6:	f001 fa3f 	bl	8007c48 <xTaskRemoveFromEventList>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d012      	beq.n	80067f6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80067d0:	4b0c      	ldr	r3, [pc, #48]	; (8006804 <xQueueGenericReset+0xcc>)
 80067d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	e009      	b.n	80067f6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3310      	adds	r3, #16
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff fef1 	bl	80065ce <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3324      	adds	r3, #36	; 0x24
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff feec 	bl	80065ce <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80067f6:	f002 fc67 	bl	80090c8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80067fa:	2301      	movs	r3, #1
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	e000ed04 	.word	0xe000ed04

08006808 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006808:	b580      	push	{r7, lr}
 800680a:	b08c      	sub	sp, #48	; 0x30
 800680c:	af02      	add	r7, sp, #8
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	4613      	mov	r3, r2
 8006814:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <xQueueGenericCreate+0x2a>
        __asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	61bb      	str	r3, [r7, #24]
    }
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	fb02 f303 	mul.w	r3, r2, r3
 800683a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d006      	beq.n	8006850 <xQueueGenericCreate+0x48>
 8006842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	fbb2 f3f3 	udiv	r3, r2, r3
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	429a      	cmp	r2, r3
 800684e:	d101      	bne.n	8006854 <xQueueGenericCreate+0x4c>
 8006850:	2301      	movs	r3, #1
 8006852:	e000      	b.n	8006856 <xQueueGenericCreate+0x4e>
 8006854:	2300      	movs	r3, #0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <xQueueGenericCreate+0x68>
        __asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	617b      	str	r3, [r7, #20]
    }
 800686c:	bf00      	nop
 800686e:	e7fe      	b.n	800686e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8006876:	d90a      	bls.n	800688e <xQueueGenericCreate+0x86>
        __asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	613b      	str	r3, [r7, #16]
    }
 800688a:	bf00      	nop
 800688c:	e7fe      	b.n	800688c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	3350      	adds	r3, #80	; 0x50
 8006892:	4618      	mov	r0, r3
 8006894:	f002 fd0a 	bl	80092ac <pvPortMalloc>
 8006898:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00d      	beq.n	80068bc <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	3350      	adds	r3, #80	; 0x50
 80068a8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068aa:	79fa      	ldrb	r2, [r7, #7]
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	4613      	mov	r3, r2
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f805 	bl	80068c6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80068bc:	6a3b      	ldr	r3, [r7, #32]
    }
 80068be:	4618      	mov	r0, r3
 80068c0:	3728      	adds	r7, #40	; 0x28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d103      	bne.n	80068e2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	e002      	b.n	80068e8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068f4:	2101      	movs	r1, #1
 80068f6:	69b8      	ldr	r0, [r7, #24]
 80068f8:	f7ff ff1e 	bl	8006738 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	78fa      	ldrb	r2, [r7, #3]
 8006900:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08e      	sub	sp, #56	; 0x38
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800691a:	2300      	movs	r3, #0
 800691c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8006922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <xQueueGenericSend+0x32>
        __asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800693a:	bf00      	nop
 800693c:	e7fe      	b.n	800693c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d103      	bne.n	800694c <xQueueGenericSend+0x40>
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <xQueueGenericSend+0x44>
 800694c:	2301      	movs	r3, #1
 800694e:	e000      	b.n	8006952 <xQueueGenericSend+0x46>
 8006950:	2300      	movs	r3, #0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <xQueueGenericSend+0x60>
        __asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2b02      	cmp	r3, #2
 8006970:	d103      	bne.n	800697a <xQueueGenericSend+0x6e>
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <xQueueGenericSend+0x72>
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <xQueueGenericSend+0x74>
 800697e:	2300      	movs	r3, #0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <xQueueGenericSend+0x8e>
        __asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	623b      	str	r3, [r7, #32]
    }
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800699a:	f001 fb53 	bl	8008044 <xTaskGetSchedulerState>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <xQueueGenericSend+0x9e>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <xQueueGenericSend+0xa2>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <xQueueGenericSend+0xa4>
 80069ae:	2300      	movs	r3, #0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <xQueueGenericSend+0xbe>
        __asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	61fb      	str	r3, [r7, #28]
    }
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80069ca:	f002 fb4d 	bl	8009068 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d302      	bcc.n	80069e0 <xQueueGenericSend+0xd4>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d129      	bne.n	8006a34 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069e6:	f000 fba8 	bl	800713a <prvCopyDataToQueue>
 80069ea:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d010      	beq.n	8006a16 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	3324      	adds	r3, #36	; 0x24
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 f925 	bl	8007c48 <xTaskRemoveFromEventList>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d013      	beq.n	8006a2c <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8006a04:	4b3f      	ldr	r3, [pc, #252]	; (8006b04 <xQueueGenericSend+0x1f8>)
 8006a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	e00a      	b.n	8006a2c <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d007      	beq.n	8006a2c <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006a1c:	4b39      	ldr	r3, [pc, #228]	; (8006b04 <xQueueGenericSend+0x1f8>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006a2c:	f002 fb4c 	bl	80090c8 <vPortExitCritical>
                return pdPASS;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e063      	b.n	8006afc <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d103      	bne.n	8006a42 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006a3a:	f002 fb45 	bl	80090c8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e05c      	b.n	8006afc <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d106      	bne.n	8006a56 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006a48:	f107 0314 	add.w	r3, r7, #20
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 f9bf 	bl	8007dd0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006a52:	2301      	movs	r3, #1
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006a56:	f002 fb37 	bl	80090c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006a5a:	f000 fe9b 	bl	8007794 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006a5e:	f002 fb03 	bl	8009068 <vPortEnterCritical>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a68:	b25b      	sxtb	r3, r3
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d103      	bne.n	8006a78 <xQueueGenericSend+0x16c>
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a7e:	b25b      	sxtb	r3, r3
 8006a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a84:	d103      	bne.n	8006a8e <xQueueGenericSend+0x182>
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a8e:	f002 fb1b 	bl	80090c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a92:	1d3a      	adds	r2, r7, #4
 8006a94:	f107 0314 	add.w	r3, r7, #20
 8006a98:	4611      	mov	r1, r2
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f001 f9ae 	bl	8007dfc <xTaskCheckForTimeOut>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d124      	bne.n	8006af0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006aa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aa8:	f000 fc3f 	bl	800732a <prvIsQueueFull>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d018      	beq.n	8006ae4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	3310      	adds	r3, #16
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f001 f838 	bl	8007b30 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8006ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ac2:	f000 fbca 	bl	800725a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8006ac6:	f000 fe73 	bl	80077b0 <xTaskResumeAll>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f47f af7c 	bne.w	80069ca <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8006ad2:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <xQueueGenericSend+0x1f8>)
 8006ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	e772      	b.n	80069ca <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ae6:	f000 fbb8 	bl	800725a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006aea:	f000 fe61 	bl	80077b0 <xTaskResumeAll>
 8006aee:	e76c      	b.n	80069ca <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006af2:	f000 fbb2 	bl	800725a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006af6:	f000 fe5b 	bl	80077b0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8006afa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3738      	adds	r7, #56	; 0x38
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b090      	sub	sp, #64	; 0x40
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d103      	bne.n	8006b44 <xQueueGenericSendFromISR+0x3c>
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <xQueueGenericSendFromISR+0x40>
 8006b44:	2301      	movs	r3, #1
 8006b46:	e000      	b.n	8006b4a <xQueueGenericSendFromISR+0x42>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10a      	bne.n	8006b64 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d103      	bne.n	8006b72 <xQueueGenericSendFromISR+0x6a>
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <xQueueGenericSendFromISR+0x6e>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <xQueueGenericSendFromISR+0x70>
 8006b76:	2300      	movs	r3, #0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10a      	bne.n	8006b92 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	623b      	str	r3, [r7, #32]
    }
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b92:	f002 fb4b 	bl	800922c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006b96:	f3ef 8211 	mrs	r2, BASEPRI
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	61fa      	str	r2, [r7, #28]
 8006bac:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006bae:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d302      	bcc.n	8006bc4 <xQueueGenericSendFromISR+0xbc>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d13e      	bne.n	8006c42 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bda:	f000 faae 	bl	800713a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006bde:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be6:	d112      	bne.n	8006c0e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d025      	beq.n	8006c3c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	3324      	adds	r3, #36	; 0x24
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f001 f827 	bl	8007c48 <xTaskRemoveFromEventList>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01d      	beq.n	8006c3c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d01a      	beq.n	8006c3c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	e016      	b.n	8006c3c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8006c0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c12:	2b7f      	cmp	r3, #127	; 0x7f
 8006c14:	d10a      	bne.n	8006c2c <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	617b      	str	r3, [r7, #20]
    }
 8006c28:	bf00      	nop
 8006c2a:	e7fe      	b.n	8006c2a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c30:	3301      	adds	r3, #1
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	b25a      	sxtb	r2, r3
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8006c40:	e001      	b.n	8006c46 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006c42:	2300      	movs	r3, #0
 8006c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c48:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006c50:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3740      	adds	r7, #64	; 0x40
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08c      	sub	sp, #48	; 0x30
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <xQueueReceive+0x30>
        __asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	623b      	str	r3, [r7, #32]
    }
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d103      	bne.n	8006c9a <xQueueReceive+0x3e>
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <xQueueReceive+0x42>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e000      	b.n	8006ca0 <xQueueReceive+0x44>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <xQueueReceive+0x5e>
        __asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	61fb      	str	r3, [r7, #28]
    }
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cba:	f001 f9c3 	bl	8008044 <xTaskGetSchedulerState>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d102      	bne.n	8006cca <xQueueReceive+0x6e>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <xQueueReceive+0x72>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e000      	b.n	8006cd0 <xQueueReceive+0x74>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <xQueueReceive+0x8e>
        __asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	61bb      	str	r3, [r7, #24]
    }
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006cea:	f002 f9bd 	bl	8009068 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d01f      	beq.n	8006d3a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cfa:	68b9      	ldr	r1, [r7, #8]
 8006cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cfe:	f000 fa86 	bl	800720e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	1e5a      	subs	r2, r3, #1
 8006d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d08:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00f      	beq.n	8006d32 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	3310      	adds	r3, #16
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 ff96 	bl	8007c48 <xTaskRemoveFromEventList>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d007      	beq.n	8006d32 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006d22:	4b3d      	ldr	r3, [pc, #244]	; (8006e18 <xQueueReceive+0x1bc>)
 8006d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006d32:	f002 f9c9 	bl	80090c8 <vPortExitCritical>
                return pdPASS;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e069      	b.n	8006e0e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d103      	bne.n	8006d48 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006d40:	f002 f9c2 	bl	80090c8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006d44:	2300      	movs	r3, #0
 8006d46:	e062      	b.n	8006e0e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006d4e:	f107 0310 	add.w	r3, r7, #16
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 f83c 	bl	8007dd0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006d5c:	f002 f9b4 	bl	80090c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006d60:	f000 fd18 	bl	8007794 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006d64:	f002 f980 	bl	8009068 <vPortEnterCritical>
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d6e:	b25b      	sxtb	r3, r3
 8006d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d74:	d103      	bne.n	8006d7e <xQueueReceive+0x122>
 8006d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d84:	b25b      	sxtb	r3, r3
 8006d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8a:	d103      	bne.n	8006d94 <xQueueReceive+0x138>
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d94:	f002 f998 	bl	80090c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d98:	1d3a      	adds	r2, r7, #4
 8006d9a:	f107 0310 	add.w	r3, r7, #16
 8006d9e:	4611      	mov	r1, r2
 8006da0:	4618      	mov	r0, r3
 8006da2:	f001 f82b 	bl	8007dfc <xTaskCheckForTimeOut>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d123      	bne.n	8006df4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dae:	f000 faa6 	bl	80072fe <prvIsQueueEmpty>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d017      	beq.n	8006de8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	3324      	adds	r3, #36	; 0x24
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 feb5 	bl	8007b30 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc8:	f000 fa47 	bl	800725a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006dcc:	f000 fcf0 	bl	80077b0 <xTaskResumeAll>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d189      	bne.n	8006cea <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006dd6:	4b10      	ldr	r3, [pc, #64]	; (8006e18 <xQueueReceive+0x1bc>)
 8006dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	e780      	b.n	8006cea <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dea:	f000 fa36 	bl	800725a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006dee:	f000 fcdf 	bl	80077b0 <xTaskResumeAll>
 8006df2:	e77a      	b.n	8006cea <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006df6:	f000 fa30 	bl	800725a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006dfa:	f000 fcd9 	bl	80077b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e00:	f000 fa7d 	bl	80072fe <prvIsQueueEmpty>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f43f af6f 	beq.w	8006cea <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006e0c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3730      	adds	r7, #48	; 0x30
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	e000ed04 	.word	0xe000ed04

08006e1c <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08e      	sub	sp, #56	; 0x38
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <xQueuePeek+0x30>
        __asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006e48:	bf00      	nop
 8006e4a:	e7fe      	b.n	8006e4a <xQueuePeek+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d103      	bne.n	8006e5a <xQueuePeek+0x3e>
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <xQueuePeek+0x42>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e000      	b.n	8006e60 <xQueuePeek+0x44>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <xQueuePeek+0x5e>
        __asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	623b      	str	r3, [r7, #32]
    }
 8006e76:	bf00      	nop
 8006e78:	e7fe      	b.n	8006e78 <xQueuePeek+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e7a:	f001 f8e3 	bl	8008044 <xTaskGetSchedulerState>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <xQueuePeek+0x6e>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <xQueuePeek+0x72>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e000      	b.n	8006e90 <xQueuePeek+0x74>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <xQueuePeek+0x8e>
        __asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	61fb      	str	r3, [r7, #28]
    }
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <xQueuePeek+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006eaa:	f002 f8dd 	bl	8009068 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d021      	beq.n	8006efe <xQueuePeek+0xe2>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	62bb      	str	r3, [r7, #40]	; 0x28

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ec0:	68b9      	ldr	r1, [r7, #8]
 8006ec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ec4:	f000 f9a3 	bl	800720e <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ecc:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00f      	beq.n	8006ef6 <xQueuePeek+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed8:	3324      	adds	r3, #36	; 0x24
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 feb4 	bl	8007c48 <xTaskRemoveFromEventList>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d007      	beq.n	8006ef6 <xQueuePeek+0xda>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 8006ee6:	4b3d      	ldr	r3, [pc, #244]	; (8006fdc <xQueuePeek+0x1c0>)
 8006ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006ef6:	f002 f8e7 	bl	80090c8 <vPortExitCritical>
                return pdPASS;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e069      	b.n	8006fd2 <xQueuePeek+0x1b6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d103      	bne.n	8006f0c <xQueuePeek+0xf0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006f04:	f002 f8e0 	bl	80090c8 <vPortExitCritical>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e062      	b.n	8006fd2 <xQueuePeek+0x1b6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <xQueuePeek+0x104>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006f12:	f107 0314 	add.w	r3, r7, #20
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 ff5a 	bl	8007dd0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006f20:	f002 f8d2 	bl	80090c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006f24:	f000 fc36 	bl	8007794 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006f28:	f002 f89e 	bl	8009068 <vPortEnterCritical>
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f32:	b25b      	sxtb	r3, r3
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f38:	d103      	bne.n	8006f42 <xQueuePeek+0x126>
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f48:	b25b      	sxtb	r3, r3
 8006f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4e:	d103      	bne.n	8006f58 <xQueuePeek+0x13c>
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f58:	f002 f8b6 	bl	80090c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f5c:	1d3a      	adds	r2, r7, #4
 8006f5e:	f107 0314 	add.w	r3, r7, #20
 8006f62:	4611      	mov	r1, r2
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 ff49 	bl	8007dfc <xTaskCheckForTimeOut>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d123      	bne.n	8006fb8 <xQueuePeek+0x19c>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f72:	f000 f9c4 	bl	80072fe <prvIsQueueEmpty>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d017      	beq.n	8006fac <xQueuePeek+0x190>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7e:	3324      	adds	r3, #36	; 0x24
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	4611      	mov	r1, r2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 fdd3 	bl	8007b30 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f8c:	f000 f965 	bl	800725a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006f90:	f000 fc0e 	bl	80077b0 <xTaskResumeAll>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d187      	bne.n	8006eaa <xQueuePeek+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006f9a:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <xQueuePeek+0x1c0>)
 8006f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	e77e      	b.n	8006eaa <xQueuePeek+0x8e>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 8006fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fae:	f000 f954 	bl	800725a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006fb2:	f000 fbfd 	bl	80077b0 <xTaskResumeAll>
 8006fb6:	e778      	b.n	8006eaa <xQueuePeek+0x8e>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 8006fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fba:	f000 f94e 	bl	800725a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006fbe:	f000 fbf7 	bl	80077b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fc4:	f000 f99b 	bl	80072fe <prvIsQueueEmpty>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f43f af6d 	beq.w	8006eaa <xQueuePeek+0x8e>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006fd0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3738      	adds	r7, #56	; 0x38
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	e000ed04 	.word	0xe000ed04

08006fe0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b090      	sub	sp, #64	; 0x40
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d103      	bne.n	800701a <xQueueReceiveFromISR+0x3a>
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <xQueueReceiveFromISR+0x3e>
 800701a:	2301      	movs	r3, #1
 800701c:	e000      	b.n	8007020 <xQueueReceiveFromISR+0x40>
 800701e:	2300      	movs	r3, #0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10a      	bne.n	800703a <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8007036:	bf00      	nop
 8007038:	e7fe      	b.n	8007038 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800703a:	f002 f8f7 	bl	800922c <vPortValidateInterruptPriority>
        __asm volatile
 800703e:	f3ef 8211 	mrs	r2, BASEPRI
 8007042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	623a      	str	r2, [r7, #32]
 8007054:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8007056:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007058:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	2b00      	cmp	r3, #0
 8007064:	d03e      	beq.n	80070e4 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800706c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007070:	68b9      	ldr	r1, [r7, #8]
 8007072:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007074:	f000 f8cb 	bl	800720e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	1e5a      	subs	r2, r3, #1
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8007080:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007088:	d112      	bne.n	80070b0 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d025      	beq.n	80070de <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	3310      	adds	r3, #16
 8007096:	4618      	mov	r0, r3
 8007098:	f000 fdd6 	bl	8007c48 <xTaskRemoveFromEventList>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d01d      	beq.n	80070de <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d01a      	beq.n	80070de <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	e016      	b.n	80070de <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80070b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80070b4:	2b7f      	cmp	r3, #127	; 0x7f
 80070b6:	d10a      	bne.n	80070ce <xQueueReceiveFromISR+0xee>
        __asm volatile
 80070b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	61bb      	str	r3, [r7, #24]
    }
 80070ca:	bf00      	nop
 80070cc:	e7fe      	b.n	80070cc <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80070ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070d2:	3301      	adds	r3, #1
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	b25a      	sxtb	r2, r3
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80070de:	2301      	movs	r3, #1
 80070e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e2:	e001      	b.n	80070e8 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80070e4:	2300      	movs	r3, #0
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ea:	617b      	str	r3, [r7, #20]
        __asm volatile
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f383 8811 	msr	BASEPRI, r3
    }
 80070f2:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80070f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3740      	adds	r7, #64	; 0x40
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	60bb      	str	r3, [r7, #8]
    }
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8007122:	f001 ffa1 	bl	8009068 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712a:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800712c:	f001 ffcc 	bl	80090c8 <vPortExitCritical>

    return uxReturn;
 8007130:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b086      	sub	sp, #24
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8007146:	2300      	movs	r3, #0
 8007148:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10d      	bne.n	8007174 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d14d      	bne.n	80071fc <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	4618      	mov	r0, r3
 8007166:	f000 ff8b 	bl	8008080 <xTaskPriorityDisinherit>
 800716a:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	609a      	str	r2, [r3, #8]
 8007172:	e043      	b.n	80071fc <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d119      	bne.n	80071ae <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6858      	ldr	r0, [r3, #4]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	461a      	mov	r2, r3
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	f005 fa43 	bl	800c610 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	441a      	add	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d32b      	bcc.n	80071fc <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	605a      	str	r2, [r3, #4]
 80071ac:	e026      	b.n	80071fc <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	68d8      	ldr	r0, [r3, #12]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	461a      	mov	r2, r3
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	f005 fa29 	bl	800c610 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	425b      	negs	r3, r3
 80071c8:	441a      	add	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d207      	bcs.n	80071ea <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	689a      	ldr	r2, [r3, #8]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	425b      	negs	r3, r3
 80071e4:	441a      	add	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d105      	bne.n	80071fc <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8007204:	697b      	ldr	r3, [r7, #20]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	2b00      	cmp	r3, #0
 800721e:	d018      	beq.n	8007252 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68da      	ldr	r2, [r3, #12]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	441a      	add	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	429a      	cmp	r2, r3
 8007238:	d303      	bcc.n	8007242 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68d9      	ldr	r1, [r3, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	461a      	mov	r2, r3
 800724c:	6838      	ldr	r0, [r7, #0]
 800724e:	f005 f9df 	bl	800c610 <memcpy>
    }
}
 8007252:	bf00      	nop
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b084      	sub	sp, #16
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8007262:	f001 ff01 	bl	8009068 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800726c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800726e:	e011      	b.n	8007294 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	2b00      	cmp	r3, #0
 8007276:	d012      	beq.n	800729e <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3324      	adds	r3, #36	; 0x24
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fce3 	bl	8007c48 <xTaskRemoveFromEventList>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8007288:	f000 fe1e 	bl	8007ec8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	3b01      	subs	r3, #1
 8007290:	b2db      	uxtb	r3, r3
 8007292:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007298:	2b00      	cmp	r3, #0
 800729a:	dce9      	bgt.n	8007270 <prvUnlockQueue+0x16>
 800729c:	e000      	b.n	80072a0 <prvUnlockQueue+0x46>
                        break;
 800729e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	22ff      	movs	r2, #255	; 0xff
 80072a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80072a8:	f001 ff0e 	bl	80090c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80072ac:	f001 fedc 	bl	8009068 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072b6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80072b8:	e011      	b.n	80072de <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d012      	beq.n	80072e8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3310      	adds	r3, #16
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fcbe 	bl	8007c48 <xTaskRemoveFromEventList>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80072d2:	f000 fdf9 	bl	8007ec8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	3b01      	subs	r3, #1
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80072de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	dce9      	bgt.n	80072ba <prvUnlockQueue+0x60>
 80072e6:	e000      	b.n	80072ea <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80072e8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	22ff      	movs	r2, #255	; 0xff
 80072ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80072f2:	f001 fee9 	bl	80090c8 <vPortExitCritical>
}
 80072f6:	bf00      	nop
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007306:	f001 feaf 	bl	8009068 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	2b00      	cmp	r3, #0
 8007310:	d102      	bne.n	8007318 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8007312:	2301      	movs	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e001      	b.n	800731c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8007318:	2300      	movs	r3, #0
 800731a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800731c:	f001 fed4 	bl	80090c8 <vPortExitCritical>

    return xReturn;
 8007320:	68fb      	ldr	r3, [r7, #12]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007332:	f001 fe99 	bl	8009068 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	429a      	cmp	r2, r3
 8007340:	d102      	bne.n	8007348 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8007342:	2301      	movs	r3, #1
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	e001      	b.n	800734c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800734c:	f001 febc 	bl	80090c8 <vPortExitCritical>

    return xReturn;
 8007350:	68fb      	ldr	r3, [r7, #12]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800735a:	b480      	push	{r7}
 800735c:	b087      	sub	sp, #28
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	60fb      	str	r3, [r7, #12]
    }
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738a:	429a      	cmp	r2, r3
 800738c:	d102      	bne.n	8007394 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800738e:	2301      	movs	r3, #1
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	e001      	b.n	8007398 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8007398:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800739a:	4618      	mov	r0, r3
 800739c:	371c      	adds	r7, #28
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
	...

080073a8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	e014      	b.n	80073e2 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80073b8:	4a0f      	ldr	r2, [pc, #60]	; (80073f8 <vQueueAddToRegistry+0x50>)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10b      	bne.n	80073dc <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80073c4:	490c      	ldr	r1, [pc, #48]	; (80073f8 <vQueueAddToRegistry+0x50>)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80073ce:	4a0a      	ldr	r2, [pc, #40]	; (80073f8 <vQueueAddToRegistry+0x50>)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	4413      	add	r3, r2
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80073da:	e006      	b.n	80073ea <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3301      	adds	r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b07      	cmp	r3, #7
 80073e6:	d9e7      	bls.n	80073b8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80073e8:	bf00      	nop
 80073ea:	bf00      	nop
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	20000534 	.word	0x20000534

080073fc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800740c:	f001 fe2c 	bl	8009068 <vPortEnterCritical>
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007416:	b25b      	sxtb	r3, r3
 8007418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741c:	d103      	bne.n	8007426 <vQueueWaitForMessageRestricted+0x2a>
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800742c:	b25b      	sxtb	r3, r3
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007432:	d103      	bne.n	800743c <vQueueWaitForMessageRestricted+0x40>
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800743c:	f001 fe44 	bl	80090c8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007444:	2b00      	cmp	r3, #0
 8007446:	d106      	bne.n	8007456 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	3324      	adds	r3, #36	; 0x24
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	68b9      	ldr	r1, [r7, #8]
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fbcd 	bl	8007bf0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8007456:	6978      	ldr	r0, [r7, #20]
 8007458:	f7ff feff 	bl	800725a <prvUnlockQueue>
    }
 800745c:	bf00      	nop
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8007464:	b580      	push	{r7, lr}
 8007466:	b08c      	sub	sp, #48	; 0x30
 8007468:	af04      	add	r7, sp, #16
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	4613      	mov	r3, r2
 8007472:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007474:	88fb      	ldrh	r3, [r7, #6]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4618      	mov	r0, r3
 800747a:	f001 ff17 	bl	80092ac <pvPortMalloc>
 800747e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00e      	beq.n	80074a4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007486:	2058      	movs	r0, #88	; 0x58
 8007488:	f001 ff10 	bl	80092ac <pvPortMalloc>
 800748c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	631a      	str	r2, [r3, #48]	; 0x30
 800749a:	e005      	b.n	80074a8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800749c:	6978      	ldr	r0, [r7, #20]
 800749e:	f001 ffe5 	bl	800946c <vPortFree>
 80074a2:	e001      	b.n	80074a8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80074a4:	2300      	movs	r3, #0
 80074a6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d013      	beq.n	80074d6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074ae:	88fa      	ldrh	r2, [r7, #6]
 80074b0:	2300      	movs	r3, #0
 80074b2:	9303      	str	r3, [sp, #12]
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	9302      	str	r3, [sp, #8]
 80074b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	68b9      	ldr	r1, [r7, #8]
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 f80e 	bl	80074e6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80074ca:	69f8      	ldr	r0, [r7, #28]
 80074cc:	f000 f8a2 	bl	8007614 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80074d0:	2301      	movs	r3, #1
 80074d2:	61bb      	str	r3, [r7, #24]
 80074d4:	e002      	b.n	80074dc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074d6:	f04f 33ff 	mov.w	r3, #4294967295
 80074da:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80074dc:	69bb      	ldr	r3, [r7, #24]
    }
 80074de:	4618      	mov	r0, r3
 80074e0:	3720      	adds	r7, #32
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b088      	sub	sp, #32
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
 80074f2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	461a      	mov	r2, r3
 80074fe:	21a5      	movs	r1, #165	; 0xa5
 8007500:	f005 f894 	bl	800c62c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800750e:	3b01      	subs	r3, #1
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	f023 0307 	bic.w	r3, r3, #7
 800751c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	f003 0307 	and.w	r3, r3, #7
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <prvInitialiseNewTask+0x58>
        __asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	617b      	str	r3, [r7, #20]
    }
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01f      	beq.n	8007584 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007544:	2300      	movs	r3, #0
 8007546:	61fb      	str	r3, [r7, #28]
 8007548:	e012      	b.n	8007570 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	4413      	add	r3, r2
 8007550:	7819      	ldrb	r1, [r3, #0]
 8007552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	4413      	add	r3, r2
 8007558:	3334      	adds	r3, #52	; 0x34
 800755a:	460a      	mov	r2, r1
 800755c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	4413      	add	r3, r2
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d006      	beq.n	8007578 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	3301      	adds	r3, #1
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	2b09      	cmp	r3, #9
 8007574:	d9e9      	bls.n	800754a <prvInitialiseNewTask+0x64>
 8007576:	e000      	b.n	800757a <prvInitialiseNewTask+0x94>
            {
                break;
 8007578:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	2200      	movs	r2, #0
 800757e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007582:	e003      	b.n	800758c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	2b06      	cmp	r3, #6
 8007590:	d901      	bls.n	8007596 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007592:	2306      	movs	r3, #6
 8007594:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800759a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075a0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	2200      	movs	r2, #0
 80075a6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	3304      	adds	r3, #4
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff f82e 	bl	800660e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	3318      	adds	r3, #24
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff f829 	bl	800660e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	f1c3 0207 	rsb	r2, r3, #7
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075d0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	3350      	adds	r3, #80	; 0x50
 80075d6:	2204      	movs	r2, #4
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f005 f826 	bl	800c62c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	3354      	adds	r3, #84	; 0x54
 80075e4:	2201      	movs	r2, #1
 80075e6:	2100      	movs	r1, #0
 80075e8:	4618      	mov	r0, r3
 80075ea:	f005 f81f 	bl	800c62c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	68f9      	ldr	r1, [r7, #12]
 80075f2:	69b8      	ldr	r0, [r7, #24]
 80075f4:	f001 fc0c 	bl	8008e10 <pxPortInitialiseStack>
 80075f8:	4602      	mov	r2, r0
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007608:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800760a:	bf00      	nop
 800760c:	3720      	adds	r7, #32
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800761c:	f001 fd24 	bl	8009068 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007620:	4b2c      	ldr	r3, [pc, #176]	; (80076d4 <prvAddNewTaskToReadyList+0xc0>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3301      	adds	r3, #1
 8007626:	4a2b      	ldr	r2, [pc, #172]	; (80076d4 <prvAddNewTaskToReadyList+0xc0>)
 8007628:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800762a:	4b2b      	ldr	r3, [pc, #172]	; (80076d8 <prvAddNewTaskToReadyList+0xc4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8007632:	4a29      	ldr	r2, [pc, #164]	; (80076d8 <prvAddNewTaskToReadyList+0xc4>)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007638:	4b26      	ldr	r3, [pc, #152]	; (80076d4 <prvAddNewTaskToReadyList+0xc0>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d110      	bne.n	8007662 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007640:	f000 fc66 	bl	8007f10 <prvInitialiseTaskLists>
 8007644:	e00d      	b.n	8007662 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8007646:	4b25      	ldr	r3, [pc, #148]	; (80076dc <prvAddNewTaskToReadyList+0xc8>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d109      	bne.n	8007662 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800764e:	4b22      	ldr	r3, [pc, #136]	; (80076d8 <prvAddNewTaskToReadyList+0xc4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	429a      	cmp	r2, r3
 800765a:	d802      	bhi.n	8007662 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800765c:	4a1e      	ldr	r2, [pc, #120]	; (80076d8 <prvAddNewTaskToReadyList+0xc4>)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8007662:	4b1f      	ldr	r3, [pc, #124]	; (80076e0 <prvAddNewTaskToReadyList+0xcc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3301      	adds	r3, #1
 8007668:	4a1d      	ldr	r2, [pc, #116]	; (80076e0 <prvAddNewTaskToReadyList+0xcc>)
 800766a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800766c:	4b1c      	ldr	r3, [pc, #112]	; (80076e0 <prvAddNewTaskToReadyList+0xcc>)
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	2201      	movs	r2, #1
 800767a:	409a      	lsls	r2, r3
 800767c:	4b19      	ldr	r3, [pc, #100]	; (80076e4 <prvAddNewTaskToReadyList+0xd0>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4313      	orrs	r3, r2
 8007682:	4a18      	ldr	r2, [pc, #96]	; (80076e4 <prvAddNewTaskToReadyList+0xd0>)
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4a15      	ldr	r2, [pc, #84]	; (80076e8 <prvAddNewTaskToReadyList+0xd4>)
 8007694:	441a      	add	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3304      	adds	r3, #4
 800769a:	4619      	mov	r1, r3
 800769c:	4610      	mov	r0, r2
 800769e:	f7fe ffc3 	bl	8006628 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80076a2:	f001 fd11 	bl	80090c8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80076a6:	4b0d      	ldr	r3, [pc, #52]	; (80076dc <prvAddNewTaskToReadyList+0xc8>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00e      	beq.n	80076cc <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076ae:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <prvAddNewTaskToReadyList+0xc4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d207      	bcs.n	80076cc <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80076bc:	4b0b      	ldr	r3, [pc, #44]	; (80076ec <prvAddNewTaskToReadyList+0xd8>)
 80076be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	20000674 	.word	0x20000674
 80076d8:	20000574 	.word	0x20000574
 80076dc:	20000680 	.word	0x20000680
 80076e0:	20000690 	.word	0x20000690
 80076e4:	2000067c 	.word	0x2000067c
 80076e8:	20000578 	.word	0x20000578
 80076ec:	e000ed04 	.word	0xe000ed04

080076f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80076f6:	4b20      	ldr	r3, [pc, #128]	; (8007778 <vTaskStartScheduler+0x88>)
 80076f8:	9301      	str	r3, [sp, #4]
 80076fa:	2300      	movs	r3, #0
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	2300      	movs	r3, #0
 8007700:	2282      	movs	r2, #130	; 0x82
 8007702:	491e      	ldr	r1, [pc, #120]	; (800777c <vTaskStartScheduler+0x8c>)
 8007704:	481e      	ldr	r0, [pc, #120]	; (8007780 <vTaskStartScheduler+0x90>)
 8007706:	f7ff fead 	bl	8007464 <xTaskCreate>
 800770a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d102      	bne.n	8007718 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8007712:	f001 f80f 	bl	8008734 <xTimerCreateTimerTask>
 8007716:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d116      	bne.n	800774c <vTaskStartScheduler+0x5c>
        __asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	60bb      	str	r3, [r7, #8]
    }
 8007730:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8007732:	4b14      	ldr	r3, [pc, #80]	; (8007784 <vTaskStartScheduler+0x94>)
 8007734:	f04f 32ff 	mov.w	r2, #4294967295
 8007738:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800773a:	4b13      	ldr	r3, [pc, #76]	; (8007788 <vTaskStartScheduler+0x98>)
 800773c:	2201      	movs	r2, #1
 800773e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007740:	4b12      	ldr	r3, [pc, #72]	; (800778c <vTaskStartScheduler+0x9c>)
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8007746:	f001 fbed 	bl	8008f24 <xPortStartScheduler>
 800774a:	e00e      	b.n	800776a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007752:	d10a      	bne.n	800776a <vTaskStartScheduler+0x7a>
        __asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	607b      	str	r3, [r7, #4]
    }
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800776a:	4b09      	ldr	r3, [pc, #36]	; (8007790 <vTaskStartScheduler+0xa0>)
 800776c:	681b      	ldr	r3, [r3, #0]
}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20000698 	.word	0x20000698
 800777c:	080143bc 	.word	0x080143bc
 8007780:	08007ee1 	.word	0x08007ee1
 8007784:	20000694 	.word	0x20000694
 8007788:	20000680 	.word	0x20000680
 800778c:	20000678 	.word	0x20000678
 8007790:	20000034 	.word	0x20000034

08007794 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007798:	4b04      	ldr	r3, [pc, #16]	; (80077ac <vTaskSuspendAll+0x18>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3301      	adds	r3, #1
 800779e:	4a03      	ldr	r2, [pc, #12]	; (80077ac <vTaskSuspendAll+0x18>)
 80077a0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80077a2:	bf00      	nop
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	2000069c 	.word	0x2000069c

080077b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80077be:	4b41      	ldr	r3, [pc, #260]	; (80078c4 <xTaskResumeAll+0x114>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10a      	bne.n	80077dc <xTaskResumeAll+0x2c>
        __asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	603b      	str	r3, [r7, #0]
    }
 80077d8:	bf00      	nop
 80077da:	e7fe      	b.n	80077da <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80077dc:	f001 fc44 	bl	8009068 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80077e0:	4b38      	ldr	r3, [pc, #224]	; (80078c4 <xTaskResumeAll+0x114>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	4a37      	ldr	r2, [pc, #220]	; (80078c4 <xTaskResumeAll+0x114>)
 80077e8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ea:	4b36      	ldr	r3, [pc, #216]	; (80078c4 <xTaskResumeAll+0x114>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d161      	bne.n	80078b6 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077f2:	4b35      	ldr	r3, [pc, #212]	; (80078c8 <xTaskResumeAll+0x118>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d05d      	beq.n	80078b6 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077fa:	e02e      	b.n	800785a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077fc:	4b33      	ldr	r3, [pc, #204]	; (80078cc <xTaskResumeAll+0x11c>)
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3318      	adds	r3, #24
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe ff6a 	bl	80066e2 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3304      	adds	r3, #4
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe ff65 	bl	80066e2 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781c:	2201      	movs	r2, #1
 800781e:	409a      	lsls	r2, r3
 8007820:	4b2b      	ldr	r3, [pc, #172]	; (80078d0 <xTaskResumeAll+0x120>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4313      	orrs	r3, r2
 8007826:	4a2a      	ldr	r2, [pc, #168]	; (80078d0 <xTaskResumeAll+0x120>)
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782e:	4613      	mov	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4a27      	ldr	r2, [pc, #156]	; (80078d4 <xTaskResumeAll+0x124>)
 8007838:	441a      	add	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3304      	adds	r3, #4
 800783e:	4619      	mov	r1, r3
 8007840:	4610      	mov	r0, r2
 8007842:	f7fe fef1 	bl	8006628 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784a:	4b23      	ldr	r3, [pc, #140]	; (80078d8 <xTaskResumeAll+0x128>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	429a      	cmp	r2, r3
 8007852:	d302      	bcc.n	800785a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8007854:	4b21      	ldr	r3, [pc, #132]	; (80078dc <xTaskResumeAll+0x12c>)
 8007856:	2201      	movs	r2, #1
 8007858:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800785a:	4b1c      	ldr	r3, [pc, #112]	; (80078cc <xTaskResumeAll+0x11c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1cc      	bne.n	80077fc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007868:	f000 fbd0 	bl	800800c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800786c:	4b1c      	ldr	r3, [pc, #112]	; (80078e0 <xTaskResumeAll+0x130>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d010      	beq.n	800789a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007878:	f000 f846 	bl	8007908 <xTaskIncrementTick>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d002      	beq.n	8007888 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8007882:	4b16      	ldr	r3, [pc, #88]	; (80078dc <xTaskResumeAll+0x12c>)
 8007884:	2201      	movs	r2, #1
 8007886:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3b01      	subs	r3, #1
 800788c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1f1      	bne.n	8007878 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8007894:	4b12      	ldr	r3, [pc, #72]	; (80078e0 <xTaskResumeAll+0x130>)
 8007896:	2200      	movs	r2, #0
 8007898:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800789a:	4b10      	ldr	r3, [pc, #64]	; (80078dc <xTaskResumeAll+0x12c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d009      	beq.n	80078b6 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80078a2:	2301      	movs	r3, #1
 80078a4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80078a6:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <xTaskResumeAll+0x134>)
 80078a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80078b6:	f001 fc07 	bl	80090c8 <vPortExitCritical>

    return xAlreadyYielded;
 80078ba:	68bb      	ldr	r3, [r7, #8]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	2000069c 	.word	0x2000069c
 80078c8:	20000674 	.word	0x20000674
 80078cc:	20000634 	.word	0x20000634
 80078d0:	2000067c 	.word	0x2000067c
 80078d4:	20000578 	.word	0x20000578
 80078d8:	20000574 	.word	0x20000574
 80078dc:	20000688 	.word	0x20000688
 80078e0:	20000684 	.word	0x20000684
 80078e4:	e000ed04 	.word	0xe000ed04

080078e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <xTaskGetTickCount+0x1c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80078f4:	687b      	ldr	r3, [r7, #4]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20000678 	.word	0x20000678

08007908 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800790e:	2300      	movs	r3, #0
 8007910:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007912:	4b4e      	ldr	r3, [pc, #312]	; (8007a4c <xTaskIncrementTick+0x144>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	f040 808e 	bne.w	8007a38 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800791c:	4b4c      	ldr	r3, [pc, #304]	; (8007a50 <xTaskIncrementTick+0x148>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3301      	adds	r3, #1
 8007922:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007924:	4a4a      	ldr	r2, [pc, #296]	; (8007a50 <xTaskIncrementTick+0x148>)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d120      	bne.n	8007972 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8007930:	4b48      	ldr	r3, [pc, #288]	; (8007a54 <xTaskIncrementTick+0x14c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <xTaskIncrementTick+0x48>
        __asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	603b      	str	r3, [r7, #0]
    }
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <xTaskIncrementTick+0x46>
 8007950:	4b40      	ldr	r3, [pc, #256]	; (8007a54 <xTaskIncrementTick+0x14c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	4b40      	ldr	r3, [pc, #256]	; (8007a58 <xTaskIncrementTick+0x150>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a3e      	ldr	r2, [pc, #248]	; (8007a54 <xTaskIncrementTick+0x14c>)
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	4a3e      	ldr	r2, [pc, #248]	; (8007a58 <xTaskIncrementTick+0x150>)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	4b3d      	ldr	r3, [pc, #244]	; (8007a5c <xTaskIncrementTick+0x154>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3301      	adds	r3, #1
 800796a:	4a3c      	ldr	r2, [pc, #240]	; (8007a5c <xTaskIncrementTick+0x154>)
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	f000 fb4d 	bl	800800c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007972:	4b3b      	ldr	r3, [pc, #236]	; (8007a60 <xTaskIncrementTick+0x158>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	429a      	cmp	r2, r3
 800797a:	d348      	bcc.n	8007a0e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800797c:	4b35      	ldr	r3, [pc, #212]	; (8007a54 <xTaskIncrementTick+0x14c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d104      	bne.n	8007990 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007986:	4b36      	ldr	r3, [pc, #216]	; (8007a60 <xTaskIncrementTick+0x158>)
 8007988:	f04f 32ff 	mov.w	r2, #4294967295
 800798c:	601a      	str	r2, [r3, #0]
                    break;
 800798e:	e03e      	b.n	8007a0e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007990:	4b30      	ldr	r3, [pc, #192]	; (8007a54 <xTaskIncrementTick+0x14c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d203      	bcs.n	80079b0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80079a8:	4a2d      	ldr	r2, [pc, #180]	; (8007a60 <xTaskIncrementTick+0x158>)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079ae:	e02e      	b.n	8007a0e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	3304      	adds	r3, #4
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe fe94 	bl	80066e2 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	3318      	adds	r3, #24
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fe fe8b 	bl	80066e2 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d0:	2201      	movs	r2, #1
 80079d2:	409a      	lsls	r2, r3
 80079d4:	4b23      	ldr	r3, [pc, #140]	; (8007a64 <xTaskIncrementTick+0x15c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4313      	orrs	r3, r2
 80079da:	4a22      	ldr	r2, [pc, #136]	; (8007a64 <xTaskIncrementTick+0x15c>)
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e2:	4613      	mov	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4a1f      	ldr	r2, [pc, #124]	; (8007a68 <xTaskIncrementTick+0x160>)
 80079ec:	441a      	add	r2, r3
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	3304      	adds	r3, #4
 80079f2:	4619      	mov	r1, r3
 80079f4:	4610      	mov	r0, r2
 80079f6:	f7fe fe17 	bl	8006628 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fe:	4b1b      	ldr	r3, [pc, #108]	; (8007a6c <xTaskIncrementTick+0x164>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d3b9      	bcc.n	800797c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a0c:	e7b6      	b.n	800797c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a0e:	4b17      	ldr	r3, [pc, #92]	; (8007a6c <xTaskIncrementTick+0x164>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a14:	4914      	ldr	r1, [pc, #80]	; (8007a68 <xTaskIncrementTick+0x160>)
 8007a16:	4613      	mov	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	440b      	add	r3, r1
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d901      	bls.n	8007a2a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8007a26:	2301      	movs	r3, #1
 8007a28:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8007a2a:	4b11      	ldr	r3, [pc, #68]	; (8007a70 <xTaskIncrementTick+0x168>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d007      	beq.n	8007a42 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8007a32:	2301      	movs	r3, #1
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	e004      	b.n	8007a42 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007a38:	4b0e      	ldr	r3, [pc, #56]	; (8007a74 <xTaskIncrementTick+0x16c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	4a0d      	ldr	r2, [pc, #52]	; (8007a74 <xTaskIncrementTick+0x16c>)
 8007a40:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8007a42:	697b      	ldr	r3, [r7, #20]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	2000069c 	.word	0x2000069c
 8007a50:	20000678 	.word	0x20000678
 8007a54:	2000062c 	.word	0x2000062c
 8007a58:	20000630 	.word	0x20000630
 8007a5c:	2000068c 	.word	0x2000068c
 8007a60:	20000694 	.word	0x20000694
 8007a64:	2000067c 	.word	0x2000067c
 8007a68:	20000578 	.word	0x20000578
 8007a6c:	20000574 	.word	0x20000574
 8007a70:	20000688 	.word	0x20000688
 8007a74:	20000684 	.word	0x20000684

08007a78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a7e:	4b27      	ldr	r3, [pc, #156]	; (8007b1c <vTaskSwitchContext+0xa4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007a86:	4b26      	ldr	r3, [pc, #152]	; (8007b20 <vTaskSwitchContext+0xa8>)
 8007a88:	2201      	movs	r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8007a8c:	e03f      	b.n	8007b0e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8007a8e:	4b24      	ldr	r3, [pc, #144]	; (8007b20 <vTaskSwitchContext+0xa8>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a94:	4b23      	ldr	r3, [pc, #140]	; (8007b24 <vTaskSwitchContext+0xac>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	fab3 f383 	clz	r3, r3
 8007aa0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8007aa2:	7afb      	ldrb	r3, [r7, #11]
 8007aa4:	f1c3 031f 	rsb	r3, r3, #31
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	491f      	ldr	r1, [pc, #124]	; (8007b28 <vTaskSwitchContext+0xb0>)
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	607b      	str	r3, [r7, #4]
    }
 8007ad0:	bf00      	nop
 8007ad2:	e7fe      	b.n	8007ad2 <vTaskSwitchContext+0x5a>
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4a12      	ldr	r2, [pc, #72]	; (8007b28 <vTaskSwitchContext+0xb0>)
 8007ae0:	4413      	add	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	605a      	str	r2, [r3, #4]
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	3308      	adds	r3, #8
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d104      	bne.n	8007b04 <vTaskSwitchContext+0x8c>
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	605a      	str	r2, [r3, #4]
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	4a08      	ldr	r2, [pc, #32]	; (8007b2c <vTaskSwitchContext+0xb4>)
 8007b0c:	6013      	str	r3, [r2, #0]
}
 8007b0e:	bf00      	nop
 8007b10:	371c      	adds	r7, #28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	2000069c 	.word	0x2000069c
 8007b20:	20000688 	.word	0x20000688
 8007b24:	2000067c 	.word	0x2000067c
 8007b28:	20000578 	.word	0x20000578
 8007b2c:	20000574 	.word	0x20000574

08007b30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10a      	bne.n	8007b56 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	60fb      	str	r3, [r7, #12]
    }
 8007b52:	bf00      	nop
 8007b54:	e7fe      	b.n	8007b54 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b56:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <vTaskPlaceOnEventList+0x44>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3318      	adds	r3, #24
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7fe fd86 	bl	8006670 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b64:	2101      	movs	r1, #1
 8007b66:	6838      	ldr	r0, [r7, #0]
 8007b68:	f000 fd7e 	bl	8008668 <prvAddCurrentTaskToDelayedList>
}
 8007b6c:	bf00      	nop
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20000574 	.word	0x20000574

08007b78 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10a      	bne.n	8007ba0 <vTaskPlaceOnUnorderedEventList+0x28>
        __asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	617b      	str	r3, [r7, #20]
    }
 8007b9c:	bf00      	nop
 8007b9e:	e7fe      	b.n	8007b9e <vTaskPlaceOnUnorderedEventList+0x26>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
 8007ba0:	4b11      	ldr	r3, [pc, #68]	; (8007be8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10a      	bne.n	8007bbe <vTaskPlaceOnUnorderedEventList+0x46>
        __asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	613b      	str	r3, [r7, #16]
    }
 8007bba:	bf00      	nop
 8007bbc:	e7fe      	b.n	8007bbc <vTaskPlaceOnUnorderedEventList+0x44>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007bbe:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <vTaskPlaceOnUnorderedEventList+0x74>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007bc8:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bca:	4b08      	ldr	r3, [pc, #32]	; (8007bec <vTaskPlaceOnUnorderedEventList+0x74>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3318      	adds	r3, #24
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7fe fd28 	bl	8006628 <vListInsertEnd>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bd8:	2101      	movs	r1, #1
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fd44 	bl	8008668 <prvAddCurrentTaskToDelayedList>
}
 8007be0:	bf00      	nop
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	2000069c 	.word	0x2000069c
 8007bec:	20000574 	.word	0x20000574

08007bf0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10a      	bne.n	8007c18 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	617b      	str	r3, [r7, #20]
    }
 8007c14:	bf00      	nop
 8007c16:	e7fe      	b.n	8007c16 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c18:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3318      	adds	r3, #24
 8007c1e:	4619      	mov	r1, r3
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f7fe fd01 	bl	8006628 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8007c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c30:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	68b8      	ldr	r0, [r7, #8]
 8007c36:	f000 fd17 	bl	8008668 <prvAddCurrentTaskToDelayedList>
    }
 8007c3a:	bf00      	nop
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20000574 	.word	0x20000574

08007c48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10a      	bne.n	8007c74 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	60fb      	str	r3, [r7, #12]
    }
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	3318      	adds	r3, #24
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe fd32 	bl	80066e2 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c7e:	4b1d      	ldr	r3, [pc, #116]	; (8007cf4 <xTaskRemoveFromEventList+0xac>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d11c      	bne.n	8007cc0 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fd29 	bl	80066e2 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	2201      	movs	r2, #1
 8007c96:	409a      	lsls	r2, r3
 8007c98:	4b17      	ldr	r3, [pc, #92]	; (8007cf8 <xTaskRemoveFromEventList+0xb0>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	4a16      	ldr	r2, [pc, #88]	; (8007cf8 <xTaskRemoveFromEventList+0xb0>)
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4a13      	ldr	r2, [pc, #76]	; (8007cfc <xTaskRemoveFromEventList+0xb4>)
 8007cb0:	441a      	add	r2, r3
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4610      	mov	r0, r2
 8007cba:	f7fe fcb5 	bl	8006628 <vListInsertEnd>
 8007cbe:	e005      	b.n	8007ccc <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	3318      	adds	r3, #24
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	480e      	ldr	r0, [pc, #56]	; (8007d00 <xTaskRemoveFromEventList+0xb8>)
 8007cc8:	f7fe fcae 	bl	8006628 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd0:	4b0c      	ldr	r3, [pc, #48]	; (8007d04 <xTaskRemoveFromEventList+0xbc>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d905      	bls.n	8007ce6 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007cde:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <xTaskRemoveFromEventList+0xc0>)
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	e001      	b.n	8007cea <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8007cea:	697b      	ldr	r3, [r7, #20]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	2000069c 	.word	0x2000069c
 8007cf8:	2000067c 	.word	0x2000067c
 8007cfc:	20000578 	.word	0x20000578
 8007d00:	20000634 	.word	0x20000634
 8007d04:	20000574 	.word	0x20000574
 8007d08:	20000688 	.word	0x20000688

08007d0c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 8007d16:	4b29      	ldr	r3, [pc, #164]	; (8007dbc <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10a      	bne.n	8007d34 <vTaskRemoveFromUnorderedEventList+0x28>
        __asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	613b      	str	r3, [r7, #16]
    }
 8007d30:	bf00      	nop
 8007d32:	e7fe      	b.n	8007d32 <vTaskRemoveFromUnorderedEventList+0x26>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10a      	bne.n	8007d60 <vTaskRemoveFromUnorderedEventList+0x54>
        __asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	60fb      	str	r3, [r7, #12]
    }
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <vTaskRemoveFromUnorderedEventList+0x52>
    ( void ) uxListRemove( pxEventListItem );
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7fe fcbe 	bl	80066e2 <uxListRemove>
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fcb9 	bl	80066e2 <uxListRemove>
    prvAddTaskToReadyList( pxUnblockedTCB );
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	2201      	movs	r2, #1
 8007d76:	409a      	lsls	r2, r3
 8007d78:	4b11      	ldr	r3, [pc, #68]	; (8007dc0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	4a10      	ldr	r2, [pc, #64]	; (8007dc0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d86:	4613      	mov	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4a0d      	ldr	r2, [pc, #52]	; (8007dc4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007d90:	441a      	add	r2, r3
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	3304      	adds	r3, #4
 8007d96:	4619      	mov	r1, r3
 8007d98:	4610      	mov	r0, r2
 8007d9a:	f7fe fc45 	bl	8006628 <vListInsertEnd>

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da2:	4b09      	ldr	r3, [pc, #36]	; (8007dc8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d902      	bls.n	8007db2 <vTaskRemoveFromUnorderedEventList+0xa6>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 8007dac:	4b07      	ldr	r3, [pc, #28]	; (8007dcc <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007dae:	2201      	movs	r2, #1
 8007db0:	601a      	str	r2, [r3, #0]
    }
}
 8007db2:	bf00      	nop
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	2000069c 	.word	0x2000069c
 8007dc0:	2000067c 	.word	0x2000067c
 8007dc4:	20000578 	.word	0x20000578
 8007dc8:	20000574 	.word	0x20000574
 8007dcc:	20000688 	.word	0x20000688

08007dd0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007dd8:	4b06      	ldr	r3, [pc, #24]	; (8007df4 <vTaskInternalSetTimeOutState+0x24>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007de0:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <vTaskInternalSetTimeOutState+0x28>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	605a      	str	r2, [r3, #4]
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	2000068c 	.word	0x2000068c
 8007df8:	20000678 	.word	0x20000678

08007dfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10a      	bne.n	8007e22 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	613b      	str	r3, [r7, #16]
    }
 8007e1e:	bf00      	nop
 8007e20:	e7fe      	b.n	8007e20 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10a      	bne.n	8007e3e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8007e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	60fb      	str	r3, [r7, #12]
    }
 8007e3a:	bf00      	nop
 8007e3c:	e7fe      	b.n	8007e3c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8007e3e:	f001 f913 	bl	8009068 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007e42:	4b1f      	ldr	r3, [pc, #124]	; (8007ec0 <xTaskCheckForTimeOut+0xc4>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5a:	d102      	bne.n	8007e62 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	e026      	b.n	8007eb0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	4b17      	ldr	r3, [pc, #92]	; (8007ec4 <xTaskCheckForTimeOut+0xc8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d00a      	beq.n	8007e84 <xTaskCheckForTimeOut+0x88>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d305      	bcc.n	8007e84 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	e015      	b.n	8007eb0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d20b      	bcs.n	8007ea6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	1ad2      	subs	r2, r2, r3
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7ff ff98 	bl	8007dd0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	61fb      	str	r3, [r7, #28]
 8007ea4:	e004      	b.n	8007eb0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007eac:	2301      	movs	r3, #1
 8007eae:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007eb0:	f001 f90a 	bl	80090c8 <vPortExitCritical>

    return xReturn;
 8007eb4:	69fb      	ldr	r3, [r7, #28]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3720      	adds	r7, #32
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20000678 	.word	0x20000678
 8007ec4:	2000068c 	.word	0x2000068c

08007ec8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ec8:	b480      	push	{r7}
 8007eca:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007ecc:	4b03      	ldr	r3, [pc, #12]	; (8007edc <vTaskMissedYield+0x14>)
 8007ece:	2201      	movs	r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]
}
 8007ed2:	bf00      	nop
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	20000688 	.word	0x20000688

08007ee0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007ee8:	f000 f852 	bl	8007f90 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007eec:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <prvIdleTask+0x28>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d9f9      	bls.n	8007ee8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8007ef4:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <prvIdleTask+0x2c>)
 8007ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007f04:	e7f0      	b.n	8007ee8 <prvIdleTask+0x8>
 8007f06:	bf00      	nop
 8007f08:	20000578 	.word	0x20000578
 8007f0c:	e000ed04 	.word	0xe000ed04

08007f10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f16:	2300      	movs	r3, #0
 8007f18:	607b      	str	r3, [r7, #4]
 8007f1a:	e00c      	b.n	8007f36 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4a12      	ldr	r2, [pc, #72]	; (8007f70 <prvInitialiseTaskLists+0x60>)
 8007f28:	4413      	add	r3, r2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fe fb4f 	bl	80065ce <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3301      	adds	r3, #1
 8007f34:	607b      	str	r3, [r7, #4]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b06      	cmp	r3, #6
 8007f3a:	d9ef      	bls.n	8007f1c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007f3c:	480d      	ldr	r0, [pc, #52]	; (8007f74 <prvInitialiseTaskLists+0x64>)
 8007f3e:	f7fe fb46 	bl	80065ce <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007f42:	480d      	ldr	r0, [pc, #52]	; (8007f78 <prvInitialiseTaskLists+0x68>)
 8007f44:	f7fe fb43 	bl	80065ce <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007f48:	480c      	ldr	r0, [pc, #48]	; (8007f7c <prvInitialiseTaskLists+0x6c>)
 8007f4a:	f7fe fb40 	bl	80065ce <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8007f4e:	480c      	ldr	r0, [pc, #48]	; (8007f80 <prvInitialiseTaskLists+0x70>)
 8007f50:	f7fe fb3d 	bl	80065ce <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8007f54:	480b      	ldr	r0, [pc, #44]	; (8007f84 <prvInitialiseTaskLists+0x74>)
 8007f56:	f7fe fb3a 	bl	80065ce <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <prvInitialiseTaskLists+0x78>)
 8007f5c:	4a05      	ldr	r2, [pc, #20]	; (8007f74 <prvInitialiseTaskLists+0x64>)
 8007f5e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f60:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <prvInitialiseTaskLists+0x7c>)
 8007f62:	4a05      	ldr	r2, [pc, #20]	; (8007f78 <prvInitialiseTaskLists+0x68>)
 8007f64:	601a      	str	r2, [r3, #0]
}
 8007f66:	bf00      	nop
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20000578 	.word	0x20000578
 8007f74:	20000604 	.word	0x20000604
 8007f78:	20000618 	.word	0x20000618
 8007f7c:	20000634 	.word	0x20000634
 8007f80:	20000648 	.word	0x20000648
 8007f84:	20000660 	.word	0x20000660
 8007f88:	2000062c 	.word	0x2000062c
 8007f8c:	20000630 	.word	0x20000630

08007f90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f96:	e019      	b.n	8007fcc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007f98:	f001 f866 	bl	8009068 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f9c:	4b10      	ldr	r3, [pc, #64]	; (8007fe0 <prvCheckTasksWaitingTermination+0x50>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fe fb9a 	bl	80066e2 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007fae:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <prvCheckTasksWaitingTermination+0x54>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	4a0b      	ldr	r2, [pc, #44]	; (8007fe4 <prvCheckTasksWaitingTermination+0x54>)
 8007fb6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007fb8:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <prvCheckTasksWaitingTermination+0x58>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	4a0a      	ldr	r2, [pc, #40]	; (8007fe8 <prvCheckTasksWaitingTermination+0x58>)
 8007fc0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8007fc2:	f001 f881 	bl	80090c8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f810 	bl	8007fec <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fcc:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <prvCheckTasksWaitingTermination+0x58>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e1      	bne.n	8007f98 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000648 	.word	0x20000648
 8007fe4:	20000674 	.word	0x20000674
 8007fe8:	2000065c 	.word	0x2000065c

08007fec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f001 fa37 	bl	800946c <vPortFree>
                vPortFree( pxTCB );
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 fa34 	bl	800946c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8008004:	bf00      	nop
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008010:	4b0a      	ldr	r3, [pc, #40]	; (800803c <prvResetNextTaskUnblockTime+0x30>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d104      	bne.n	8008024 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800801a:	4b09      	ldr	r3, [pc, #36]	; (8008040 <prvResetNextTaskUnblockTime+0x34>)
 800801c:	f04f 32ff 	mov.w	r2, #4294967295
 8008020:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008022:	e005      	b.n	8008030 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008024:	4b05      	ldr	r3, [pc, #20]	; (800803c <prvResetNextTaskUnblockTime+0x30>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a04      	ldr	r2, [pc, #16]	; (8008040 <prvResetNextTaskUnblockTime+0x34>)
 800802e:	6013      	str	r3, [r2, #0]
}
 8008030:	bf00      	nop
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	2000062c 	.word	0x2000062c
 8008040:	20000694 	.word	0x20000694

08008044 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800804a:	4b0b      	ldr	r3, [pc, #44]	; (8008078 <xTaskGetSchedulerState+0x34>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d102      	bne.n	8008058 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8008052:	2301      	movs	r3, #1
 8008054:	607b      	str	r3, [r7, #4]
 8008056:	e008      	b.n	800806a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008058:	4b08      	ldr	r3, [pc, #32]	; (800807c <xTaskGetSchedulerState+0x38>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d102      	bne.n	8008066 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8008060:	2302      	movs	r3, #2
 8008062:	607b      	str	r3, [r7, #4]
 8008064:	e001      	b.n	800806a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8008066:	2300      	movs	r3, #0
 8008068:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800806a:	687b      	ldr	r3, [r7, #4]
    }
 800806c:	4618      	mov	r0, r3
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	20000680 	.word	0x20000680
 800807c:	2000069c 	.word	0x2000069c

08008080 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800808c:	2300      	movs	r3, #0
 800808e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d063      	beq.n	800815e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8008096:	4b34      	ldr	r3, [pc, #208]	; (8008168 <xTaskPriorityDisinherit+0xe8>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	429a      	cmp	r2, r3
 800809e:	d00a      	beq.n	80080b6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	60fb      	str	r3, [r7, #12]
    }
 80080b2:	bf00      	nop
 80080b4:	e7fe      	b.n	80080b4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	60bb      	str	r3, [r7, #8]
    }
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d8:	1e5a      	subs	r2, r3, #1
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d039      	beq.n	800815e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d135      	bne.n	800815e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	3304      	adds	r3, #4
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe faf3 	bl	80066e2 <uxListRemove>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10a      	bne.n	8008118 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008106:	2201      	movs	r2, #1
 8008108:	fa02 f303 	lsl.w	r3, r2, r3
 800810c:	43da      	mvns	r2, r3
 800810e:	4b17      	ldr	r3, [pc, #92]	; (800816c <xTaskPriorityDisinherit+0xec>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4013      	ands	r3, r2
 8008114:	4a15      	ldr	r2, [pc, #84]	; (800816c <xTaskPriorityDisinherit+0xec>)
 8008116:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008124:	f1c3 0207 	rsb	r2, r3, #7
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008130:	2201      	movs	r2, #1
 8008132:	409a      	lsls	r2, r3
 8008134:	4b0d      	ldr	r3, [pc, #52]	; (800816c <xTaskPriorityDisinherit+0xec>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4313      	orrs	r3, r2
 800813a:	4a0c      	ldr	r2, [pc, #48]	; (800816c <xTaskPriorityDisinherit+0xec>)
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4a09      	ldr	r2, [pc, #36]	; (8008170 <xTaskPriorityDisinherit+0xf0>)
 800814c:	441a      	add	r2, r3
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	3304      	adds	r3, #4
 8008152:	4619      	mov	r1, r3
 8008154:	4610      	mov	r0, r2
 8008156:	f7fe fa67 	bl	8006628 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800815a:	2301      	movs	r3, #1
 800815c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800815e:	697b      	ldr	r3, [r7, #20]
    }
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	20000574 	.word	0x20000574
 800816c:	2000067c 	.word	0x2000067c
 8008170:	20000578 	.word	0x20000578

08008174 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800817a:	4b09      	ldr	r3, [pc, #36]	; (80081a0 <uxTaskResetEventItemValue+0x2c>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008182:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <uxTaskResetEventItemValue+0x2c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008188:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <uxTaskResetEventItemValue+0x2c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f1c2 0207 	rsb	r2, r2, #7
 8008190:	619a      	str	r2, [r3, #24]

    return uxReturn;
 8008192:	687b      	ldr	r3, [r7, #4]
}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	20000574 	.word	0x20000574

080081a4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	613b      	str	r3, [r7, #16]
    }
 80081ca:	bf00      	nop
 80081cc:	e7fe      	b.n	80081cc <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80081ce:	f000 ff4b 	bl	8009068 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80081d2:	4b32      	ldr	r3, [pc, #200]	; (800829c <xTaskGenericNotifyWait+0xf8>)
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	4413      	add	r3, r2
 80081da:	3354      	adds	r3, #84	; 0x54
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d022      	beq.n	800822a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80081e4:	4b2d      	ldr	r3, [pc, #180]	; (800829c <xTaskGenericNotifyWait+0xf8>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	3214      	adds	r2, #20
 80081ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	43d2      	mvns	r2, r2
 80081f4:	4011      	ands	r1, r2
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	3214      	adds	r2, #20
 80081fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80081fe:	4b27      	ldr	r3, [pc, #156]	; (800829c <xTaskGenericNotifyWait+0xf8>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	4413      	add	r3, r2
 8008206:	3354      	adds	r3, #84	; 0x54
 8008208:	2201      	movs	r2, #1
 800820a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00b      	beq.n	800822a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008212:	2101      	movs	r1, #1
 8008214:	6a38      	ldr	r0, [r7, #32]
 8008216:	f000 fa27 	bl	8008668 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800821a:	4b21      	ldr	r3, [pc, #132]	; (80082a0 <xTaskGenericNotifyWait+0xfc>)
 800821c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800822a:	f000 ff4d 	bl	80090c8 <vPortExitCritical>

        taskENTER_CRITICAL();
 800822e:	f000 ff1b 	bl	8009068 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d007      	beq.n	8008248 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8008238:	4b18      	ldr	r3, [pc, #96]	; (800829c <xTaskGenericNotifyWait+0xf8>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	3214      	adds	r2, #20
 8008240:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8008248:	4b14      	ldr	r3, [pc, #80]	; (800829c <xTaskGenericNotifyWait+0xf8>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4413      	add	r3, r2
 8008250:	3354      	adds	r3, #84	; 0x54
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d002      	beq.n	8008260 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800825a:	2300      	movs	r3, #0
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	e00e      	b.n	800827e <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8008260:	4b0e      	ldr	r3, [pc, #56]	; (800829c <xTaskGenericNotifyWait+0xf8>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	3214      	adds	r2, #20
 8008268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	43d2      	mvns	r2, r2
 8008270:	4011      	ands	r1, r2
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	3214      	adds	r2, #20
 8008276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800827a:	2301      	movs	r3, #1
 800827c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800827e:	4b07      	ldr	r3, [pc, #28]	; (800829c <xTaskGenericNotifyWait+0xf8>)
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	4413      	add	r3, r2
 8008286:	3354      	adds	r3, #84	; 0x54
 8008288:	2200      	movs	r2, #0
 800828a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800828c:	f000 ff1c 	bl	80090c8 <vPortExitCritical>

        return xReturn;
 8008290:	697b      	ldr	r3, [r7, #20]
    }
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20000574 	.word	0x20000574
 80082a0:	e000ed04 	.word	0xe000ed04

080082a4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08c      	sub	sp, #48	; 0x30
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80082b2:	2301      	movs	r3, #1
 80082b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <xTaskGenericNotify+0x2e>
        __asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	623b      	str	r3, [r7, #32]
    }
 80082ce:	bf00      	nop
 80082d0:	e7fe      	b.n	80082d0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10a      	bne.n	80082ee <xTaskGenericNotify+0x4a>
        __asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	61fb      	str	r3, [r7, #28]
    }
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80082f2:	f000 feb9 	bl	8009068 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80082f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d006      	beq.n	800830a <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80082fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	3214      	adds	r2, #20
 8008302:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008308:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800830a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	4413      	add	r3, r2
 8008310:	3354      	adds	r3, #84	; 0x54
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8008318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	4413      	add	r3, r2
 800831e:	3354      	adds	r3, #84	; 0x54
 8008320:	2202      	movs	r2, #2
 8008322:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	2b04      	cmp	r3, #4
 8008328:	d83b      	bhi.n	80083a2 <xTaskGenericNotify+0xfe>
 800832a:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <xTaskGenericNotify+0x8c>)
 800832c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008330:	080083c1 	.word	0x080083c1
 8008334:	08008345 	.word	0x08008345
 8008338:	08008361 	.word	0x08008361
 800833c:	08008379 	.word	0x08008379
 8008340:	08008387 	.word	0x08008387
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	3214      	adds	r2, #20
 800834a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	ea42 0103 	orr.w	r1, r2, r3
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	3214      	adds	r2, #20
 800835a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800835e:	e032      	b.n	80083c6 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	3214      	adds	r2, #20
 8008366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836a:	1c59      	adds	r1, r3, #1
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	3214      	adds	r2, #20
 8008372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8008376:	e026      	b.n	80083c6 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	3214      	adds	r2, #20
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8008384:	e01f      	b.n	80083c6 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800838a:	2b02      	cmp	r3, #2
 800838c:	d006      	beq.n	800839c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	3214      	adds	r2, #20
 8008394:	6879      	ldr	r1, [r7, #4]
 8008396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800839a:	e014      	b.n	80083c6 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800839c:	2300      	movs	r3, #0
 800839e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80083a0:	e011      	b.n	80083c6 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80083a2:	4b2b      	ldr	r3, [pc, #172]	; (8008450 <xTaskGenericNotify+0x1ac>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00c      	beq.n	80083c4 <xTaskGenericNotify+0x120>
        __asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	61bb      	str	r3, [r7, #24]
    }
 80083bc:	bf00      	nop
 80083be:	e7fe      	b.n	80083be <xTaskGenericNotify+0x11a>
                    break;
 80083c0:	bf00      	nop
 80083c2:	e000      	b.n	80083c6 <xTaskGenericNotify+0x122>

                    break;
 80083c4:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80083c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d139      	bne.n	8008442 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	3304      	adds	r3, #4
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fe f985 	bl	80066e2 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80083d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083dc:	2201      	movs	r2, #1
 80083de:	409a      	lsls	r2, r3
 80083e0:	4b1c      	ldr	r3, [pc, #112]	; (8008454 <xTaskGenericNotify+0x1b0>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	4a1b      	ldr	r2, [pc, #108]	; (8008454 <xTaskGenericNotify+0x1b0>)
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ee:	4613      	mov	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4a18      	ldr	r2, [pc, #96]	; (8008458 <xTaskGenericNotify+0x1b4>)
 80083f8:	441a      	add	r2, r3
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	3304      	adds	r3, #4
 80083fe:	4619      	mov	r1, r3
 8008400:	4610      	mov	r0, r2
 8008402:	f7fe f911 	bl	8006628 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <xTaskGenericNotify+0x180>
        __asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	617b      	str	r3, [r7, #20]
    }
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008428:	4b0c      	ldr	r3, [pc, #48]	; (800845c <xTaskGenericNotify+0x1b8>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842e:	429a      	cmp	r2, r3
 8008430:	d907      	bls.n	8008442 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8008432:	4b0b      	ldr	r3, [pc, #44]	; (8008460 <xTaskGenericNotify+0x1bc>)
 8008434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008442:	f000 fe41 	bl	80090c8 <vPortExitCritical>

        return xReturn;
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8008448:	4618      	mov	r0, r3
 800844a:	3730      	adds	r7, #48	; 0x30
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	20000678 	.word	0x20000678
 8008454:	2000067c 	.word	0x2000067c
 8008458:	20000578 	.word	0x20000578
 800845c:	20000574 	.word	0x20000574
 8008460:	e000ed04 	.word	0xe000ed04

08008464 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8008464:	b580      	push	{r7, lr}
 8008466:	b090      	sub	sp, #64	; 0x40
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8008472:	2301      	movs	r3, #1
 8008474:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00a      	beq.n	80084ae <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084ae:	f000 febd 	bl	800922c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80084b6:	f3ef 8211 	mrs	r2, BASEPRI
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	627a      	str	r2, [r7, #36]	; 0x24
 80084cc:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084d0:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80084d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d006      	beq.n	80084e6 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80084d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	3214      	adds	r2, #20
 80084de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80084e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084e4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80084e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4413      	add	r3, r2
 80084ec:	3354      	adds	r3, #84	; 0x54
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80084f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	4413      	add	r3, r2
 80084fa:	3354      	adds	r3, #84	; 0x54
 80084fc:	2202      	movs	r2, #2
 80084fe:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	2b04      	cmp	r3, #4
 8008504:	d83b      	bhi.n	800857e <xTaskGenericNotifyFromISR+0x11a>
 8008506:	a201      	add	r2, pc, #4	; (adr r2, 800850c <xTaskGenericNotifyFromISR+0xa8>)
 8008508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850c:	0800859d 	.word	0x0800859d
 8008510:	08008521 	.word	0x08008521
 8008514:	0800853d 	.word	0x0800853d
 8008518:	08008555 	.word	0x08008555
 800851c:	08008563 	.word	0x08008563
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	3214      	adds	r2, #20
 8008526:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	ea42 0103 	orr.w	r1, r2, r3
 8008530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	3214      	adds	r2, #20
 8008536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800853a:	e032      	b.n	80085a2 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800853c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	3214      	adds	r2, #20
 8008542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008546:	1c59      	adds	r1, r3, #1
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	3214      	adds	r2, #20
 800854e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8008552:	e026      	b.n	80085a2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	3214      	adds	r2, #20
 800855a:	6879      	ldr	r1, [r7, #4]
 800855c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8008560:	e01f      	b.n	80085a2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008562:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008566:	2b02      	cmp	r3, #2
 8008568:	d006      	beq.n	8008578 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800856a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	3214      	adds	r2, #20
 8008570:	6879      	ldr	r1, [r7, #4]
 8008572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8008576:	e014      	b.n	80085a2 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8008578:	2300      	movs	r3, #0
 800857a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800857c:	e011      	b.n	80085a2 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800857e:	4b33      	ldr	r3, [pc, #204]	; (800864c <xTaskGenericNotifyFromISR+0x1e8>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00c      	beq.n	80085a0 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	61fb      	str	r3, [r7, #28]
    }
 8008598:	bf00      	nop
 800859a:	e7fe      	b.n	800859a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800859c:	bf00      	nop
 800859e:	e000      	b.n	80085a2 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80085a0:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80085a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d145      	bne.n	8008636 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80085aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00a      	beq.n	80085c8 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	61bb      	str	r3, [r7, #24]
    }
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085c8:	4b21      	ldr	r3, [pc, #132]	; (8008650 <xTaskGenericNotifyFromISR+0x1ec>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d11c      	bne.n	800860a <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	3304      	adds	r3, #4
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fe f884 	bl	80066e2 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085de:	2201      	movs	r2, #1
 80085e0:	409a      	lsls	r2, r3
 80085e2:	4b1c      	ldr	r3, [pc, #112]	; (8008654 <xTaskGenericNotifyFromISR+0x1f0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	4a1a      	ldr	r2, [pc, #104]	; (8008654 <xTaskGenericNotifyFromISR+0x1f0>)
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f0:	4613      	mov	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4a17      	ldr	r2, [pc, #92]	; (8008658 <xTaskGenericNotifyFromISR+0x1f4>)
 80085fa:	441a      	add	r2, r3
 80085fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fe:	3304      	adds	r3, #4
 8008600:	4619      	mov	r1, r3
 8008602:	4610      	mov	r0, r2
 8008604:	f7fe f810 	bl	8006628 <vListInsertEnd>
 8008608:	e005      	b.n	8008616 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800860a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860c:	3318      	adds	r3, #24
 800860e:	4619      	mov	r1, r3
 8008610:	4812      	ldr	r0, [pc, #72]	; (800865c <xTaskGenericNotifyFromISR+0x1f8>)
 8008612:	f7fe f809 	bl	8006628 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861a:	4b11      	ldr	r3, [pc, #68]	; (8008660 <xTaskGenericNotifyFromISR+0x1fc>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	429a      	cmp	r2, r3
 8008622:	d908      	bls.n	8008636 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8008624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800862a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862c:	2201      	movs	r2, #1
 800862e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8008630:	4b0c      	ldr	r3, [pc, #48]	; (8008664 <xTaskGenericNotifyFromISR+0x200>)
 8008632:	2201      	movs	r2, #1
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008638:	617b      	str	r3, [r7, #20]
        __asm volatile
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f383 8811 	msr	BASEPRI, r3
    }
 8008640:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8008642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8008644:	4618      	mov	r0, r3
 8008646:	3740      	adds	r7, #64	; 0x40
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	20000678 	.word	0x20000678
 8008650:	2000069c 	.word	0x2000069c
 8008654:	2000067c 	.word	0x2000067c
 8008658:	20000578 	.word	0x20000578
 800865c:	20000634 	.word	0x20000634
 8008660:	20000574 	.word	0x20000574
 8008664:	20000688 	.word	0x20000688

08008668 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8008672:	4b29      	ldr	r3, [pc, #164]	; (8008718 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008678:	4b28      	ldr	r3, [pc, #160]	; (800871c <prvAddCurrentTaskToDelayedList+0xb4>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3304      	adds	r3, #4
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe f82f 	bl	80066e2 <uxListRemove>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10b      	bne.n	80086a2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800868a:	4b24      	ldr	r3, [pc, #144]	; (800871c <prvAddCurrentTaskToDelayedList+0xb4>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	2201      	movs	r2, #1
 8008692:	fa02 f303 	lsl.w	r3, r2, r3
 8008696:	43da      	mvns	r2, r3
 8008698:	4b21      	ldr	r3, [pc, #132]	; (8008720 <prvAddCurrentTaskToDelayedList+0xb8>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4013      	ands	r3, r2
 800869e:	4a20      	ldr	r2, [pc, #128]	; (8008720 <prvAddCurrentTaskToDelayedList+0xb8>)
 80086a0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a8:	d10a      	bne.n	80086c0 <prvAddCurrentTaskToDelayedList+0x58>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d007      	beq.n	80086c0 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086b0:	4b1a      	ldr	r3, [pc, #104]	; (800871c <prvAddCurrentTaskToDelayedList+0xb4>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3304      	adds	r3, #4
 80086b6:	4619      	mov	r1, r3
 80086b8:	481a      	ldr	r0, [pc, #104]	; (8008724 <prvAddCurrentTaskToDelayedList+0xbc>)
 80086ba:	f7fd ffb5 	bl	8006628 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80086be:	e026      	b.n	800870e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4413      	add	r3, r2
 80086c6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086c8:	4b14      	ldr	r3, [pc, #80]	; (800871c <prvAddCurrentTaskToDelayedList+0xb4>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d209      	bcs.n	80086ec <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086d8:	4b13      	ldr	r3, [pc, #76]	; (8008728 <prvAddCurrentTaskToDelayedList+0xc0>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	4b0f      	ldr	r3, [pc, #60]	; (800871c <prvAddCurrentTaskToDelayedList+0xb4>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3304      	adds	r3, #4
 80086e2:	4619      	mov	r1, r3
 80086e4:	4610      	mov	r0, r2
 80086e6:	f7fd ffc3 	bl	8006670 <vListInsert>
}
 80086ea:	e010      	b.n	800870e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086ec:	4b0f      	ldr	r3, [pc, #60]	; (800872c <prvAddCurrentTaskToDelayedList+0xc4>)
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	4b0a      	ldr	r3, [pc, #40]	; (800871c <prvAddCurrentTaskToDelayedList+0xb4>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3304      	adds	r3, #4
 80086f6:	4619      	mov	r1, r3
 80086f8:	4610      	mov	r0, r2
 80086fa:	f7fd ffb9 	bl	8006670 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80086fe:	4b0c      	ldr	r3, [pc, #48]	; (8008730 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	429a      	cmp	r2, r3
 8008706:	d202      	bcs.n	800870e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8008708:	4a09      	ldr	r2, [pc, #36]	; (8008730 <prvAddCurrentTaskToDelayedList+0xc8>)
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	6013      	str	r3, [r2, #0]
}
 800870e:	bf00      	nop
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20000678 	.word	0x20000678
 800871c:	20000574 	.word	0x20000574
 8008720:	2000067c 	.word	0x2000067c
 8008724:	20000660 	.word	0x20000660
 8008728:	20000630 	.word	0x20000630
 800872c:	2000062c 	.word	0x2000062c
 8008730:	20000694 	.word	0x20000694

08008734 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800873a:	2300      	movs	r3, #0
 800873c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800873e:	f000 fb31 	bl	8008da4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8008742:	4b11      	ldr	r3, [pc, #68]	; (8008788 <xTimerCreateTimerTask+0x54>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00b      	beq.n	8008762 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800874a:	4b10      	ldr	r3, [pc, #64]	; (800878c <xTimerCreateTimerTask+0x58>)
 800874c:	9301      	str	r3, [sp, #4]
 800874e:	2302      	movs	r3, #2
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	2300      	movs	r3, #0
 8008754:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008758:	490d      	ldr	r1, [pc, #52]	; (8008790 <xTimerCreateTimerTask+0x5c>)
 800875a:	480e      	ldr	r0, [pc, #56]	; (8008794 <xTimerCreateTimerTask+0x60>)
 800875c:	f7fe fe82 	bl	8007464 <xTaskCreate>
 8008760:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10a      	bne.n	800877e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	603b      	str	r3, [r7, #0]
    }
 800877a:	bf00      	nop
 800877c:	e7fe      	b.n	800877c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800877e:	687b      	ldr	r3, [r7, #4]
    }
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	200006d0 	.word	0x200006d0
 800878c:	200006d4 	.word	0x200006d4
 8008790:	080143c4 	.word	0x080143c4
 8008794:	08008985 	.word	0x08008985

08008798 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8008798:	b580      	push	{r7, lr}
 800879a:	b088      	sub	sp, #32
 800879c:	af02      	add	r7, sp, #8
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80087a6:	202c      	movs	r0, #44	; 0x2c
 80087a8:	f000 fd80 	bl	80092ac <pvPortMalloc>
 80087ac:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00d      	beq.n	80087d0 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	9301      	str	r3, [sp, #4]
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	68b9      	ldr	r1, [r7, #8]
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f000 f805 	bl	80087da <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80087d0:	697b      	ldr	r3, [r7, #20]
        }
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80087da:	b580      	push	{r7, lr}
 80087dc:	b086      	sub	sp, #24
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	607a      	str	r2, [r7, #4]
 80087e6:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10a      	bne.n	8008804 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	617b      	str	r3, [r7, #20]
    }
 8008800:	bf00      	nop
 8008802:	e7fe      	b.n	8008802 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	2b00      	cmp	r3, #0
 8008808:	d01e      	beq.n	8008848 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800880a:	f000 facb 	bl	8008da4 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008822:	6a3a      	ldr	r2, [r7, #32]
 8008824:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	3304      	adds	r3, #4
 800882a:	4618      	mov	r0, r3
 800882c:	f7fd feef 	bl	800660e <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d008      	beq.n	8008848 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800883c:	f043 0304 	orr.w	r3, r3, #4
 8008840:	b2da      	uxtb	r2, r3
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8008848:	bf00      	nop
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8008850:	b580      	push	{r7, lr}
 8008852:	b08a      	sub	sp, #40	; 0x28
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800885e:	2300      	movs	r3, #0
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10a      	bne.n	800887e <xTimerGenericCommand+0x2e>
        __asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	623b      	str	r3, [r7, #32]
    }
 800887a:	bf00      	nop
 800887c:	e7fe      	b.n	800887c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800887e:	4b1a      	ldr	r3, [pc, #104]	; (80088e8 <xTimerGenericCommand+0x98>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d02a      	beq.n	80088dc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2b05      	cmp	r3, #5
 8008896:	dc18      	bgt.n	80088ca <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008898:	f7ff fbd4 	bl	8008044 <xTaskGetSchedulerState>
 800889c:	4603      	mov	r3, r0
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d109      	bne.n	80088b6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80088a2:	4b11      	ldr	r3, [pc, #68]	; (80088e8 <xTimerGenericCommand+0x98>)
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	f107 0114 	add.w	r1, r7, #20
 80088aa:	2300      	movs	r3, #0
 80088ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ae:	f7fe f82d 	bl	800690c <xQueueGenericSend>
 80088b2:	6278      	str	r0, [r7, #36]	; 0x24
 80088b4:	e012      	b.n	80088dc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80088b6:	4b0c      	ldr	r3, [pc, #48]	; (80088e8 <xTimerGenericCommand+0x98>)
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	f107 0114 	add.w	r1, r7, #20
 80088be:	2300      	movs	r3, #0
 80088c0:	2200      	movs	r2, #0
 80088c2:	f7fe f823 	bl	800690c <xQueueGenericSend>
 80088c6:	6278      	str	r0, [r7, #36]	; 0x24
 80088c8:	e008      	b.n	80088dc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088ca:	4b07      	ldr	r3, [pc, #28]	; (80088e8 <xTimerGenericCommand+0x98>)
 80088cc:	6818      	ldr	r0, [r3, #0]
 80088ce:	f107 0114 	add.w	r1, r7, #20
 80088d2:	2300      	movs	r3, #0
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	f7fe f917 	bl	8006b08 <xQueueGenericSendFromISR>
 80088da:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80088de:	4618      	mov	r0, r3
 80088e0:	3728      	adds	r7, #40	; 0x28
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	200006d0 	.word	0x200006d0

080088ec <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af02      	add	r7, sp, #8
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088f6:	4b22      	ldr	r3, [pc, #136]	; (8008980 <prvProcessExpiredTimer+0x94>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	3304      	adds	r3, #4
 8008904:	4618      	mov	r0, r3
 8008906:	f7fd feec 	bl	80066e2 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008910:	f003 0304 	and.w	r3, r3, #4
 8008914:	2b00      	cmp	r3, #0
 8008916:	d022      	beq.n	800895e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	699a      	ldr	r2, [r3, #24]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	18d1      	adds	r1, r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	6978      	ldr	r0, [r7, #20]
 8008926:	f000 f8d1 	bl	8008acc <prvInsertTimerInActiveList>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01f      	beq.n	8008970 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008930:	2300      	movs	r3, #0
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	2300      	movs	r3, #0
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	2100      	movs	r1, #0
 800893a:	6978      	ldr	r0, [r7, #20]
 800893c:	f7ff ff88 	bl	8008850 <xTimerGenericCommand>
 8008940:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d113      	bne.n	8008970 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	60fb      	str	r3, [r7, #12]
    }
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008964:	f023 0301 	bic.w	r3, r3, #1
 8008968:	b2da      	uxtb	r2, r3
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	6a1b      	ldr	r3, [r3, #32]
 8008974:	6978      	ldr	r0, [r7, #20]
 8008976:	4798      	blx	r3
    }
 8008978:	bf00      	nop
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	200006c8 	.word	0x200006c8

08008984 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800898c:	f107 0308 	add.w	r3, r7, #8
 8008990:	4618      	mov	r0, r3
 8008992:	f000 f857 	bl	8008a44 <prvGetNextExpireTime>
 8008996:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	4619      	mov	r1, r3
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 f803 	bl	80089a8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80089a2:	f000 f8d5 	bl	8008b50 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089a6:	e7f1      	b.n	800898c <prvTimerTask+0x8>

080089a8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80089b2:	f7fe feef 	bl	8007794 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089b6:	f107 0308 	add.w	r3, r7, #8
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 f866 	bl	8008a8c <prvSampleTimeNow>
 80089c0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d130      	bne.n	8008a2a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10a      	bne.n	80089e4 <prvProcessTimerOrBlockTask+0x3c>
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d806      	bhi.n	80089e4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80089d6:	f7fe feeb 	bl	80077b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80089da:	68f9      	ldr	r1, [r7, #12]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff ff85 	bl	80088ec <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80089e2:	e024      	b.n	8008a2e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d008      	beq.n	80089fc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80089ea:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <prvProcessTimerOrBlockTask+0x90>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <prvProcessTimerOrBlockTask+0x50>
 80089f4:	2301      	movs	r3, #1
 80089f6:	e000      	b.n	80089fa <prvProcessTimerOrBlockTask+0x52>
 80089f8:	2300      	movs	r3, #0
 80089fa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089fc:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <prvProcessTimerOrBlockTask+0x94>)
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	f7fe fcf7 	bl	80073fc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8008a0e:	f7fe fecf 	bl	80077b0 <xTaskResumeAll>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10a      	bne.n	8008a2e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8008a18:	4b09      	ldr	r3, [pc, #36]	; (8008a40 <prvProcessTimerOrBlockTask+0x98>)
 8008a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1e:	601a      	str	r2, [r3, #0]
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	f3bf 8f6f 	isb	sy
    }
 8008a28:	e001      	b.n	8008a2e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8008a2a:	f7fe fec1 	bl	80077b0 <xTaskResumeAll>
    }
 8008a2e:	bf00      	nop
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	200006cc 	.word	0x200006cc
 8008a3c:	200006d0 	.word	0x200006d0
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a4c:	4b0e      	ldr	r3, [pc, #56]	; (8008a88 <prvGetNextExpireTime+0x44>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <prvGetNextExpireTime+0x16>
 8008a56:	2201      	movs	r2, #1
 8008a58:	e000      	b.n	8008a5c <prvGetNextExpireTime+0x18>
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d105      	bne.n	8008a74 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a68:	4b07      	ldr	r3, [pc, #28]	; (8008a88 <prvGetNextExpireTime+0x44>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	60fb      	str	r3, [r7, #12]
 8008a72:	e001      	b.n	8008a78 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008a78:	68fb      	ldr	r3, [r7, #12]
    }
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	200006c8 	.word	0x200006c8

08008a8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008a94:	f7fe ff28 	bl	80078e8 <xTaskGetTickCount>
 8008a98:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008a9a:	4b0b      	ldr	r3, [pc, #44]	; (8008ac8 <prvSampleTimeNow+0x3c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d205      	bcs.n	8008ab0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008aa4:	f000 f91a 	bl	8008cdc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	e002      	b.n	8008ab6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8008ab6:	4a04      	ldr	r2, [pc, #16]	; (8008ac8 <prvSampleTimeNow+0x3c>)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008abc:	68fb      	ldr	r3, [r7, #12]
    }
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	200006d8 	.word	0x200006d8

08008acc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8008ada:	2300      	movs	r3, #0
 8008adc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d812      	bhi.n	8008b18 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	1ad2      	subs	r2, r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d302      	bcc.n	8008b06 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008b00:	2301      	movs	r3, #1
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	e01b      	b.n	8008b3e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b06:	4b10      	ldr	r3, [pc, #64]	; (8008b48 <prvInsertTimerInActiveList+0x7c>)
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4619      	mov	r1, r3
 8008b10:	4610      	mov	r0, r2
 8008b12:	f7fd fdad 	bl	8006670 <vListInsert>
 8008b16:	e012      	b.n	8008b3e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d206      	bcs.n	8008b2e <prvInsertTimerInActiveList+0x62>
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d302      	bcc.n	8008b2e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	e007      	b.n	8008b3e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b2e:	4b07      	ldr	r3, [pc, #28]	; (8008b4c <prvInsertTimerInActiveList+0x80>)
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3304      	adds	r3, #4
 8008b36:	4619      	mov	r1, r3
 8008b38:	4610      	mov	r0, r2
 8008b3a:	f7fd fd99 	bl	8006670 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8008b3e:	697b      	ldr	r3, [r7, #20]
    }
 8008b40:	4618      	mov	r0, r3
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	200006cc 	.word	0x200006cc
 8008b4c:	200006c8 	.word	0x200006c8

08008b50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08c      	sub	sp, #48	; 0x30
 8008b54:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b56:	e0ae      	b.n	8008cb6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f2c0 80aa 	blt.w	8008cb4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6e:	3304      	adds	r3, #4
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fd fdb6 	bl	80066e2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b76:	1d3b      	adds	r3, r7, #4
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7ff ff87 	bl	8008a8c <prvSampleTimeNow>
 8008b7e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2b09      	cmp	r3, #9
 8008b84:	f200 8097 	bhi.w	8008cb6 <prvProcessReceivedCommands+0x166>
 8008b88:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <prvProcessReceivedCommands+0x40>)
 8008b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8e:	bf00      	nop
 8008b90:	08008bb9 	.word	0x08008bb9
 8008b94:	08008bb9 	.word	0x08008bb9
 8008b98:	08008bb9 	.word	0x08008bb9
 8008b9c:	08008c2d 	.word	0x08008c2d
 8008ba0:	08008c41 	.word	0x08008c41
 8008ba4:	08008c8b 	.word	0x08008c8b
 8008ba8:	08008bb9 	.word	0x08008bb9
 8008bac:	08008bb9 	.word	0x08008bb9
 8008bb0:	08008c2d 	.word	0x08008c2d
 8008bb4:	08008c41 	.word	0x08008c41
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bbe:	f043 0301 	orr.w	r3, r3, #1
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	18d1      	adds	r1, r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6a3a      	ldr	r2, [r7, #32]
 8008bd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bd8:	f7ff ff78 	bl	8008acc <prvInsertTimerInActiveList>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d069      	beq.n	8008cb6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008be8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d05e      	beq.n	8008cb6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	441a      	add	r2, r3
 8008c00:	2300      	movs	r3, #0
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	2300      	movs	r3, #0
 8008c06:	2100      	movs	r1, #0
 8008c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c0a:	f7ff fe21 	bl	8008850 <xTimerGenericCommand>
 8008c0e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d14f      	bne.n	8008cb6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	61bb      	str	r3, [r7, #24]
    }
 8008c28:	bf00      	nop
 8008c2a:	e7fe      	b.n	8008c2a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c32:	f023 0301 	bic.w	r3, r3, #1
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8008c3e:	e03a      	b.n	8008cb6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c46:	f043 0301 	orr.w	r3, r3, #1
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10a      	bne.n	8008c76 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	617b      	str	r3, [r7, #20]
    }
 8008c72:	bf00      	nop
 8008c74:	e7fe      	b.n	8008c74 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	699a      	ldr	r2, [r3, #24]
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	18d1      	adds	r1, r2, r3
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	6a3a      	ldr	r2, [r7, #32]
 8008c82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c84:	f7ff ff22 	bl	8008acc <prvInsertTimerInActiveList>
                        break;
 8008c88:	e015      	b.n	8008cb6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d103      	bne.n	8008ca0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8008c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c9a:	f000 fbe7 	bl	800946c <vPortFree>
 8008c9e:	e00a      	b.n	8008cb6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ca6:	f023 0301 	bic.w	r3, r3, #1
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008cb2:	e000      	b.n	8008cb6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8008cb4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cb6:	4b08      	ldr	r3, [pc, #32]	; (8008cd8 <prvProcessReceivedCommands+0x188>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f107 0108 	add.w	r1, r7, #8
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fd ffcb 	bl	8006c5c <xQueueReceive>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f47f af45 	bne.w	8008b58 <prvProcessReceivedCommands+0x8>
        }
    }
 8008cce:	bf00      	nop
 8008cd0:	bf00      	nop
 8008cd2:	3728      	adds	r7, #40	; 0x28
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	200006d0 	.word	0x200006d0

08008cdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b088      	sub	sp, #32
 8008ce0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ce2:	e048      	b.n	8008d76 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ce4:	4b2d      	ldr	r3, [pc, #180]	; (8008d9c <prvSwitchTimerLists+0xc0>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cee:	4b2b      	ldr	r3, [pc, #172]	; (8008d9c <prvSwitchTimerLists+0xc0>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fd fcf0 	bl	80066e2 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d10:	f003 0304 	and.w	r3, r3, #4
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d02e      	beq.n	8008d76 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	4413      	add	r3, r2
 8008d20:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d90e      	bls.n	8008d48 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d36:	4b19      	ldr	r3, [pc, #100]	; (8008d9c <prvSwitchTimerLists+0xc0>)
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	4619      	mov	r1, r3
 8008d40:	4610      	mov	r0, r2
 8008d42:	f7fd fc95 	bl	8006670 <vListInsert>
 8008d46:	e016      	b.n	8008d76 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d48:	2300      	movs	r3, #0
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	2100      	movs	r1, #0
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f7ff fd7c 	bl	8008850 <xTimerGenericCommand>
 8008d58:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10a      	bne.n	8008d76 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8008d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	603b      	str	r3, [r7, #0]
    }
 8008d72:	bf00      	nop
 8008d74:	e7fe      	b.n	8008d74 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d76:	4b09      	ldr	r3, [pc, #36]	; (8008d9c <prvSwitchTimerLists+0xc0>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1b1      	bne.n	8008ce4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8008d80:	4b06      	ldr	r3, [pc, #24]	; (8008d9c <prvSwitchTimerLists+0xc0>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8008d86:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <prvSwitchTimerLists+0xc4>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a04      	ldr	r2, [pc, #16]	; (8008d9c <prvSwitchTimerLists+0xc0>)
 8008d8c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008d8e:	4a04      	ldr	r2, [pc, #16]	; (8008da0 <prvSwitchTimerLists+0xc4>)
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	6013      	str	r3, [r2, #0]
    }
 8008d94:	bf00      	nop
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	200006c8 	.word	0x200006c8
 8008da0:	200006cc 	.word	0x200006cc

08008da4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008da4:	b580      	push	{r7, lr}
 8008da6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008da8:	f000 f95e 	bl	8009068 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008dac:	4b12      	ldr	r3, [pc, #72]	; (8008df8 <prvCheckForValidListAndQueue+0x54>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d11d      	bne.n	8008df0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008db4:	4811      	ldr	r0, [pc, #68]	; (8008dfc <prvCheckForValidListAndQueue+0x58>)
 8008db6:	f7fd fc0a 	bl	80065ce <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008dba:	4811      	ldr	r0, [pc, #68]	; (8008e00 <prvCheckForValidListAndQueue+0x5c>)
 8008dbc:	f7fd fc07 	bl	80065ce <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008dc0:	4b10      	ldr	r3, [pc, #64]	; (8008e04 <prvCheckForValidListAndQueue+0x60>)
 8008dc2:	4a0e      	ldr	r2, [pc, #56]	; (8008dfc <prvCheckForValidListAndQueue+0x58>)
 8008dc4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008dc6:	4b10      	ldr	r3, [pc, #64]	; (8008e08 <prvCheckForValidListAndQueue+0x64>)
 8008dc8:	4a0d      	ldr	r2, [pc, #52]	; (8008e00 <prvCheckForValidListAndQueue+0x5c>)
 8008dca:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008dcc:	2200      	movs	r2, #0
 8008dce:	210c      	movs	r1, #12
 8008dd0:	200a      	movs	r0, #10
 8008dd2:	f7fd fd19 	bl	8006808 <xQueueGenericCreate>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	4a07      	ldr	r2, [pc, #28]	; (8008df8 <prvCheckForValidListAndQueue+0x54>)
 8008dda:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8008ddc:	4b06      	ldr	r3, [pc, #24]	; (8008df8 <prvCheckForValidListAndQueue+0x54>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d005      	beq.n	8008df0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008de4:	4b04      	ldr	r3, [pc, #16]	; (8008df8 <prvCheckForValidListAndQueue+0x54>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4908      	ldr	r1, [pc, #32]	; (8008e0c <prvCheckForValidListAndQueue+0x68>)
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fe fadc 	bl	80073a8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008df0:	f000 f96a 	bl	80090c8 <vPortExitCritical>
    }
 8008df4:	bf00      	nop
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	200006d0 	.word	0x200006d0
 8008dfc:	200006a0 	.word	0x200006a0
 8008e00:	200006b4 	.word	0x200006b4
 8008e04:	200006c8 	.word	0x200006c8
 8008e08:	200006cc 	.word	0x200006cc
 8008e0c:	080143cc 	.word	0x080143cc

08008e10 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3b04      	subs	r3, #4
 8008e20:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3b04      	subs	r3, #4
 8008e2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f023 0201 	bic.w	r2, r3, #1
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3b04      	subs	r3, #4
 8008e3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008e40:	4a0c      	ldr	r2, [pc, #48]	; (8008e74 <pxPortInitialiseStack+0x64>)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	3b14      	subs	r3, #20
 8008e4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3b04      	subs	r3, #4
 8008e56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f06f 0202 	mvn.w	r2, #2
 8008e5e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3b20      	subs	r3, #32
 8008e64:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008e66:	68fb      	ldr	r3, [r7, #12]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	08008e79 	.word	0x08008e79

08008e78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008e82:	4b12      	ldr	r3, [pc, #72]	; (8008ecc <prvTaskExitError+0x54>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8a:	d00a      	beq.n	8008ea2 <prvTaskExitError+0x2a>
        __asm volatile
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	60fb      	str	r3, [r7, #12]
    }
 8008e9e:	bf00      	nop
 8008ea0:	e7fe      	b.n	8008ea0 <prvTaskExitError+0x28>
        __asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	60bb      	str	r3, [r7, #8]
    }
 8008eb4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008eb6:	bf00      	nop
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0fc      	beq.n	8008eb8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008ebe:	bf00      	nop
 8008ec0:	bf00      	nop
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	20000038 	.word	0x20000038

08008ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <pxCurrentTCBConst2>)
 8008ed2:	6819      	ldr	r1, [r3, #0]
 8008ed4:	6808      	ldr	r0, [r1, #0]
 8008ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eda:	f380 8809 	msr	PSP, r0
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f04f 0000 	mov.w	r0, #0
 8008ee6:	f380 8811 	msr	BASEPRI, r0
 8008eea:	4770      	bx	lr
 8008eec:	f3af 8000 	nop.w

08008ef0 <pxCurrentTCBConst2>:
 8008ef0:	20000574 	.word	0x20000574
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop

08008ef8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008ef8:	4808      	ldr	r0, [pc, #32]	; (8008f1c <prvPortStartFirstTask+0x24>)
 8008efa:	6800      	ldr	r0, [r0, #0]
 8008efc:	6800      	ldr	r0, [r0, #0]
 8008efe:	f380 8808 	msr	MSP, r0
 8008f02:	f04f 0000 	mov.w	r0, #0
 8008f06:	f380 8814 	msr	CONTROL, r0
 8008f0a:	b662      	cpsie	i
 8008f0c:	b661      	cpsie	f
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	df00      	svc	0
 8008f18:	bf00      	nop
 8008f1a:	0000      	.short	0x0000
 8008f1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008f20:	bf00      	nop
 8008f22:	bf00      	nop

08008f24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f2a:	4b46      	ldr	r3, [pc, #280]	; (8009044 <xPortStartScheduler+0x120>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a46      	ldr	r2, [pc, #280]	; (8009048 <xPortStartScheduler+0x124>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d10a      	bne.n	8008f4a <xPortStartScheduler+0x26>
        __asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	613b      	str	r3, [r7, #16]
    }
 8008f46:	bf00      	nop
 8008f48:	e7fe      	b.n	8008f48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f4a:	4b3e      	ldr	r3, [pc, #248]	; (8009044 <xPortStartScheduler+0x120>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a3f      	ldr	r2, [pc, #252]	; (800904c <xPortStartScheduler+0x128>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d10a      	bne.n	8008f6a <xPortStartScheduler+0x46>
        __asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	60fb      	str	r3, [r7, #12]
    }
 8008f66:	bf00      	nop
 8008f68:	e7fe      	b.n	8008f68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f6a:	4b39      	ldr	r3, [pc, #228]	; (8009050 <xPortStartScheduler+0x12c>)
 8008f6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	22ff      	movs	r2, #255	; 0xff
 8008f7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f84:	78fb      	ldrb	r3, [r7, #3]
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	4b31      	ldr	r3, [pc, #196]	; (8009054 <xPortStartScheduler+0x130>)
 8008f90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f92:	4b31      	ldr	r3, [pc, #196]	; (8009058 <xPortStartScheduler+0x134>)
 8008f94:	2207      	movs	r2, #7
 8008f96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f98:	e009      	b.n	8008fae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8008f9a:	4b2f      	ldr	r3, [pc, #188]	; (8009058 <xPortStartScheduler+0x134>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	4a2d      	ldr	r2, [pc, #180]	; (8009058 <xPortStartScheduler+0x134>)
 8008fa2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fa4:	78fb      	ldrb	r3, [r7, #3]
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fae:	78fb      	ldrb	r3, [r7, #3]
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb6:	2b80      	cmp	r3, #128	; 0x80
 8008fb8:	d0ef      	beq.n	8008f9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fba:	4b27      	ldr	r3, [pc, #156]	; (8009058 <xPortStartScheduler+0x134>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f1c3 0307 	rsb	r3, r3, #7
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d00a      	beq.n	8008fdc <xPortStartScheduler+0xb8>
        __asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	60bb      	str	r3, [r7, #8]
    }
 8008fd8:	bf00      	nop
 8008fda:	e7fe      	b.n	8008fda <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fdc:	4b1e      	ldr	r3, [pc, #120]	; (8009058 <xPortStartScheduler+0x134>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	021b      	lsls	r3, r3, #8
 8008fe2:	4a1d      	ldr	r2, [pc, #116]	; (8009058 <xPortStartScheduler+0x134>)
 8008fe4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fe6:	4b1c      	ldr	r3, [pc, #112]	; (8009058 <xPortStartScheduler+0x134>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fee:	4a1a      	ldr	r2, [pc, #104]	; (8009058 <xPortStartScheduler+0x134>)
 8008ff0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008ffa:	4b18      	ldr	r3, [pc, #96]	; (800905c <xPortStartScheduler+0x138>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a17      	ldr	r2, [pc, #92]	; (800905c <xPortStartScheduler+0x138>)
 8009000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009004:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009006:	4b15      	ldr	r3, [pc, #84]	; (800905c <xPortStartScheduler+0x138>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a14      	ldr	r2, [pc, #80]	; (800905c <xPortStartScheduler+0x138>)
 800900c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009010:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009012:	f000 f8db 	bl	80091cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8009016:	4b12      	ldr	r3, [pc, #72]	; (8009060 <xPortStartScheduler+0x13c>)
 8009018:	2200      	movs	r2, #0
 800901a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800901c:	f000 f8fa 	bl	8009214 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009020:	4b10      	ldr	r3, [pc, #64]	; (8009064 <xPortStartScheduler+0x140>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a0f      	ldr	r2, [pc, #60]	; (8009064 <xPortStartScheduler+0x140>)
 8009026:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800902a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800902c:	f7ff ff64 	bl	8008ef8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009030:	f7fe fd22 	bl	8007a78 <vTaskSwitchContext>
    prvTaskExitError();
 8009034:	f7ff ff20 	bl	8008e78 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	e000ed00 	.word	0xe000ed00
 8009048:	410fc271 	.word	0x410fc271
 800904c:	410fc270 	.word	0x410fc270
 8009050:	e000e400 	.word	0xe000e400
 8009054:	200006dc 	.word	0x200006dc
 8009058:	200006e0 	.word	0x200006e0
 800905c:	e000ed20 	.word	0xe000ed20
 8009060:	20000038 	.word	0x20000038
 8009064:	e000ef34 	.word	0xe000ef34

08009068 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
        __asm volatile
 800906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	607b      	str	r3, [r7, #4]
    }
 8009080:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8009082:	4b0f      	ldr	r3, [pc, #60]	; (80090c0 <vPortEnterCritical+0x58>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3301      	adds	r3, #1
 8009088:	4a0d      	ldr	r2, [pc, #52]	; (80090c0 <vPortEnterCritical+0x58>)
 800908a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800908c:	4b0c      	ldr	r3, [pc, #48]	; (80090c0 <vPortEnterCritical+0x58>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d10f      	bne.n	80090b4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009094:	4b0b      	ldr	r3, [pc, #44]	; (80090c4 <vPortEnterCritical+0x5c>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00a      	beq.n	80090b4 <vPortEnterCritical+0x4c>
        __asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	603b      	str	r3, [r7, #0]
    }
 80090b0:	bf00      	nop
 80090b2:	e7fe      	b.n	80090b2 <vPortEnterCritical+0x4a>
    }
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	20000038 	.word	0x20000038
 80090c4:	e000ed04 	.word	0xe000ed04

080090c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80090ce:	4b12      	ldr	r3, [pc, #72]	; (8009118 <vPortExitCritical+0x50>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10a      	bne.n	80090ec <vPortExitCritical+0x24>
        __asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	607b      	str	r3, [r7, #4]
    }
 80090e8:	bf00      	nop
 80090ea:	e7fe      	b.n	80090ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80090ec:	4b0a      	ldr	r3, [pc, #40]	; (8009118 <vPortExitCritical+0x50>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3b01      	subs	r3, #1
 80090f2:	4a09      	ldr	r2, [pc, #36]	; (8009118 <vPortExitCritical+0x50>)
 80090f4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80090f6:	4b08      	ldr	r3, [pc, #32]	; (8009118 <vPortExitCritical+0x50>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d105      	bne.n	800910a <vPortExitCritical+0x42>
 80090fe:	2300      	movs	r3, #0
 8009100:	603b      	str	r3, [r7, #0]
        __asm volatile
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	f383 8811 	msr	BASEPRI, r3
    }
 8009108:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800910a:	bf00      	nop
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	20000038 	.word	0x20000038
 800911c:	00000000 	.word	0x00000000

08009120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009120:	f3ef 8009 	mrs	r0, PSP
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	4b15      	ldr	r3, [pc, #84]	; (8009180 <pxCurrentTCBConst>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	f01e 0f10 	tst.w	lr, #16
 8009130:	bf08      	it	eq
 8009132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913a:	6010      	str	r0, [r2, #0]
 800913c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009144:	f380 8811 	msr	BASEPRI, r0
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	f3bf 8f6f 	isb	sy
 8009150:	f7fe fc92 	bl	8007a78 <vTaskSwitchContext>
 8009154:	f04f 0000 	mov.w	r0, #0
 8009158:	f380 8811 	msr	BASEPRI, r0
 800915c:	bc09      	pop	{r0, r3}
 800915e:	6819      	ldr	r1, [r3, #0]
 8009160:	6808      	ldr	r0, [r1, #0]
 8009162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009166:	f01e 0f10 	tst.w	lr, #16
 800916a:	bf08      	it	eq
 800916c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009170:	f380 8809 	msr	PSP, r0
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	f3af 8000 	nop.w

08009180 <pxCurrentTCBConst>:
 8009180:	20000574 	.word	0x20000574
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009184:	bf00      	nop
 8009186:	bf00      	nop

08009188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
        __asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	607b      	str	r3, [r7, #4]
    }
 80091a0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80091a2:	f7fe fbb1 	bl	8007908 <xTaskIncrementTick>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091ac:	4b06      	ldr	r3, [pc, #24]	; (80091c8 <SysTick_Handler+0x40>)
 80091ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	2300      	movs	r3, #0
 80091b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	f383 8811 	msr	BASEPRI, r3
    }
 80091be:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	e000ed04 	.word	0xe000ed04

080091cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80091cc:	b480      	push	{r7}
 80091ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091d0:	4b0b      	ldr	r3, [pc, #44]	; (8009200 <vPortSetupTimerInterrupt+0x34>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091d6:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <vPortSetupTimerInterrupt+0x38>)
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091dc:	4b0a      	ldr	r3, [pc, #40]	; (8009208 <vPortSetupTimerInterrupt+0x3c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a0a      	ldr	r2, [pc, #40]	; (800920c <vPortSetupTimerInterrupt+0x40>)
 80091e2:	fba2 2303 	umull	r2, r3, r2, r3
 80091e6:	099b      	lsrs	r3, r3, #6
 80091e8:	4a09      	ldr	r2, [pc, #36]	; (8009210 <vPortSetupTimerInterrupt+0x44>)
 80091ea:	3b01      	subs	r3, #1
 80091ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091ee:	4b04      	ldr	r3, [pc, #16]	; (8009200 <vPortSetupTimerInterrupt+0x34>)
 80091f0:	2207      	movs	r2, #7
 80091f2:	601a      	str	r2, [r3, #0]
}
 80091f4:	bf00      	nop
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	e000e010 	.word	0xe000e010
 8009204:	e000e018 	.word	0xe000e018
 8009208:	2000001c 	.word	0x2000001c
 800920c:	10624dd3 	.word	0x10624dd3
 8009210:	e000e014 	.word	0xe000e014

08009214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009214:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009224 <vPortEnableVFP+0x10>
 8009218:	6801      	ldr	r1, [r0, #0]
 800921a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800921e:	6001      	str	r1, [r0, #0]
 8009220:	4770      	bx	lr
 8009222:	0000      	.short	0x0000
 8009224:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009228:	bf00      	nop
 800922a:	bf00      	nop

0800922c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009232:	f3ef 8305 	mrs	r3, IPSR
 8009236:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2b0f      	cmp	r3, #15
 800923c:	d914      	bls.n	8009268 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800923e:	4a17      	ldr	r2, [pc, #92]	; (800929c <vPortValidateInterruptPriority+0x70>)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4413      	add	r3, r2
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009248:	4b15      	ldr	r3, [pc, #84]	; (80092a0 <vPortValidateInterruptPriority+0x74>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	7afa      	ldrb	r2, [r7, #11]
 800924e:	429a      	cmp	r2, r3
 8009250:	d20a      	bcs.n	8009268 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	607b      	str	r3, [r7, #4]
    }
 8009264:	bf00      	nop
 8009266:	e7fe      	b.n	8009266 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009268:	4b0e      	ldr	r3, [pc, #56]	; (80092a4 <vPortValidateInterruptPriority+0x78>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009270:	4b0d      	ldr	r3, [pc, #52]	; (80092a8 <vPortValidateInterruptPriority+0x7c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	429a      	cmp	r2, r3
 8009276:	d90a      	bls.n	800928e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8009278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	603b      	str	r3, [r7, #0]
    }
 800928a:	bf00      	nop
 800928c:	e7fe      	b.n	800928c <vPortValidateInterruptPriority+0x60>
    }
 800928e:	bf00      	nop
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	e000e3f0 	.word	0xe000e3f0
 80092a0:	200006dc 	.word	0x200006dc
 80092a4:	e000ed0c 	.word	0xe000ed0c
 80092a8:	200006e0 	.word	0x200006e0

080092ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08a      	sub	sp, #40	; 0x28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80092b4:	2300      	movs	r3, #0
 80092b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80092b8:	f7fe fa6c 	bl	8007794 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80092bc:	4b65      	ldr	r3, [pc, #404]	; (8009454 <pvPortMalloc+0x1a8>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80092c4:	f000 f934 	bl	8009530 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092c8:	4b63      	ldr	r3, [pc, #396]	; (8009458 <pvPortMalloc+0x1ac>)
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4013      	ands	r3, r2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f040 80a7 	bne.w	8009424 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d02d      	beq.n	8009338 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80092dc:	2208      	movs	r2, #8
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d227      	bcs.n	8009338 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80092e8:	2208      	movs	r2, #8
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4413      	add	r3, r2
 80092ee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d021      	beq.n	800933e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f023 0307 	bic.w	r3, r3, #7
 8009300:	3308      	adds	r3, #8
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	429a      	cmp	r2, r3
 8009306:	d214      	bcs.n	8009332 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f023 0307 	bic.w	r3, r3, #7
 800930e:	3308      	adds	r3, #8
 8009310:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f003 0307 	and.w	r3, r3, #7
 8009318:	2b00      	cmp	r3, #0
 800931a:	d010      	beq.n	800933e <pvPortMalloc+0x92>
        __asm volatile
 800931c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009320:	f383 8811 	msr	BASEPRI, r3
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	617b      	str	r3, [r7, #20]
    }
 800932e:	bf00      	nop
 8009330:	e7fe      	b.n	8009330 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009336:	e002      	b.n	800933e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8009338:	2300      	movs	r3, #0
 800933a:	607b      	str	r3, [r7, #4]
 800933c:	e000      	b.n	8009340 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800933e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d06e      	beq.n	8009424 <pvPortMalloc+0x178>
 8009346:	4b45      	ldr	r3, [pc, #276]	; (800945c <pvPortMalloc+0x1b0>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	429a      	cmp	r2, r3
 800934e:	d869      	bhi.n	8009424 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009350:	4b43      	ldr	r3, [pc, #268]	; (8009460 <pvPortMalloc+0x1b4>)
 8009352:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8009354:	4b42      	ldr	r3, [pc, #264]	; (8009460 <pvPortMalloc+0x1b4>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800935a:	e004      	b.n	8009366 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	429a      	cmp	r2, r3
 800936e:	d903      	bls.n	8009378 <pvPortMalloc+0xcc>
 8009370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1f1      	bne.n	800935c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8009378:	4b36      	ldr	r3, [pc, #216]	; (8009454 <pvPortMalloc+0x1a8>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800937e:	429a      	cmp	r2, r3
 8009380:	d050      	beq.n	8009424 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009382:	6a3b      	ldr	r3, [r7, #32]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2208      	movs	r2, #8
 8009388:	4413      	add	r3, r2
 800938a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	6a3b      	ldr	r3, [r7, #32]
 8009392:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	1ad2      	subs	r2, r2, r3
 800939c:	2308      	movs	r3, #8
 800939e:	005b      	lsls	r3, r3, #1
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d91f      	bls.n	80093e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4413      	add	r3, r2
 80093aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <pvPortMalloc+0x120>
        __asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	613b      	str	r3, [r7, #16]
    }
 80093c8:	bf00      	nop
 80093ca:	e7fe      	b.n	80093ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	1ad2      	subs	r2, r2, r3
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093de:	69b8      	ldr	r0, [r7, #24]
 80093e0:	f000 f908 	bl	80095f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093e4:	4b1d      	ldr	r3, [pc, #116]	; (800945c <pvPortMalloc+0x1b0>)
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	4a1b      	ldr	r2, [pc, #108]	; (800945c <pvPortMalloc+0x1b0>)
 80093f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093f2:	4b1a      	ldr	r3, [pc, #104]	; (800945c <pvPortMalloc+0x1b0>)
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	4b1b      	ldr	r3, [pc, #108]	; (8009464 <pvPortMalloc+0x1b8>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d203      	bcs.n	8009406 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093fe:	4b17      	ldr	r3, [pc, #92]	; (800945c <pvPortMalloc+0x1b0>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a18      	ldr	r2, [pc, #96]	; (8009464 <pvPortMalloc+0x1b8>)
 8009404:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	4b13      	ldr	r3, [pc, #76]	; (8009458 <pvPortMalloc+0x1ac>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	431a      	orrs	r2, r3
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	2200      	movs	r2, #0
 8009418:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800941a:	4b13      	ldr	r3, [pc, #76]	; (8009468 <pvPortMalloc+0x1bc>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3301      	adds	r3, #1
 8009420:	4a11      	ldr	r2, [pc, #68]	; (8009468 <pvPortMalloc+0x1bc>)
 8009422:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009424:	f7fe f9c4 	bl	80077b0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	f003 0307 	and.w	r3, r3, #7
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00a      	beq.n	8009448 <pvPortMalloc+0x19c>
        __asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	60fb      	str	r3, [r7, #12]
    }
 8009444:	bf00      	nop
 8009446:	e7fe      	b.n	8009446 <pvPortMalloc+0x19a>
    return pvReturn;
 8009448:	69fb      	ldr	r3, [r7, #28]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3728      	adds	r7, #40	; 0x28
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	200132ec 	.word	0x200132ec
 8009458:	20013300 	.word	0x20013300
 800945c:	200132f0 	.word	0x200132f0
 8009460:	200132e4 	.word	0x200132e4
 8009464:	200132f4 	.word	0x200132f4
 8009468:	200132f8 	.word	0x200132f8

0800946c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d04d      	beq.n	800951a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800947e:	2308      	movs	r3, #8
 8009480:	425b      	negs	r3, r3
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	4413      	add	r3, r2
 8009486:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	685a      	ldr	r2, [r3, #4]
 8009490:	4b24      	ldr	r3, [pc, #144]	; (8009524 <vPortFree+0xb8>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4013      	ands	r3, r2
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10a      	bne.n	80094b0 <vPortFree+0x44>
        __asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	60fb      	str	r3, [r7, #12]
    }
 80094ac:	bf00      	nop
 80094ae:	e7fe      	b.n	80094ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00a      	beq.n	80094ce <vPortFree+0x62>
        __asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	60bb      	str	r3, [r7, #8]
    }
 80094ca:	bf00      	nop
 80094cc:	e7fe      	b.n	80094cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	685a      	ldr	r2, [r3, #4]
 80094d2:	4b14      	ldr	r3, [pc, #80]	; (8009524 <vPortFree+0xb8>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4013      	ands	r3, r2
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d01e      	beq.n	800951a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d11a      	bne.n	800951a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	685a      	ldr	r2, [r3, #4]
 80094e8:	4b0e      	ldr	r3, [pc, #56]	; (8009524 <vPortFree+0xb8>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	43db      	mvns	r3, r3
 80094ee:	401a      	ands	r2, r3
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80094f4:	f7fe f94e 	bl	8007794 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	4b0a      	ldr	r3, [pc, #40]	; (8009528 <vPortFree+0xbc>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4413      	add	r3, r2
 8009502:	4a09      	ldr	r2, [pc, #36]	; (8009528 <vPortFree+0xbc>)
 8009504:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009506:	6938      	ldr	r0, [r7, #16]
 8009508:	f000 f874 	bl	80095f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800950c:	4b07      	ldr	r3, [pc, #28]	; (800952c <vPortFree+0xc0>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	3301      	adds	r3, #1
 8009512:	4a06      	ldr	r2, [pc, #24]	; (800952c <vPortFree+0xc0>)
 8009514:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8009516:	f7fe f94b 	bl	80077b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800951a:	bf00      	nop
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	20013300 	.word	0x20013300
 8009528:	200132f0 	.word	0x200132f0
 800952c:	200132fc 	.word	0x200132fc

08009530 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009536:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800953a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800953c:	4b27      	ldr	r3, [pc, #156]	; (80095dc <prvHeapInit+0xac>)
 800953e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f003 0307 	and.w	r3, r3, #7
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00c      	beq.n	8009564 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	3307      	adds	r3, #7
 800954e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f023 0307 	bic.w	r3, r3, #7
 8009556:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	4a1f      	ldr	r2, [pc, #124]	; (80095dc <prvHeapInit+0xac>)
 8009560:	4413      	add	r3, r2
 8009562:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009568:	4a1d      	ldr	r2, [pc, #116]	; (80095e0 <prvHeapInit+0xb0>)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800956e:	4b1c      	ldr	r3, [pc, #112]	; (80095e0 <prvHeapInit+0xb0>)
 8009570:	2200      	movs	r2, #0
 8009572:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	4413      	add	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800957c:	2208      	movs	r2, #8
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	1a9b      	subs	r3, r3, r2
 8009582:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f023 0307 	bic.w	r3, r3, #7
 800958a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4a15      	ldr	r2, [pc, #84]	; (80095e4 <prvHeapInit+0xb4>)
 8009590:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009592:	4b14      	ldr	r3, [pc, #80]	; (80095e4 <prvHeapInit+0xb4>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2200      	movs	r2, #0
 8009598:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800959a:	4b12      	ldr	r3, [pc, #72]	; (80095e4 <prvHeapInit+0xb4>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2200      	movs	r2, #0
 80095a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	1ad2      	subs	r2, r2, r3
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80095b0:	4b0c      	ldr	r3, [pc, #48]	; (80095e4 <prvHeapInit+0xb4>)
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	4a0a      	ldr	r2, [pc, #40]	; (80095e8 <prvHeapInit+0xb8>)
 80095be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	4a09      	ldr	r2, [pc, #36]	; (80095ec <prvHeapInit+0xbc>)
 80095c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095c8:	4b09      	ldr	r3, [pc, #36]	; (80095f0 <prvHeapInit+0xc0>)
 80095ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80095ce:	601a      	str	r2, [r3, #0]
}
 80095d0:	bf00      	nop
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	200006e4 	.word	0x200006e4
 80095e0:	200132e4 	.word	0x200132e4
 80095e4:	200132ec 	.word	0x200132ec
 80095e8:	200132f4 	.word	0x200132f4
 80095ec:	200132f0 	.word	0x200132f0
 80095f0:	20013300 	.word	0x20013300

080095f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095fc:	4b28      	ldr	r3, [pc, #160]	; (80096a0 <prvInsertBlockIntoFreeList+0xac>)
 80095fe:	60fb      	str	r3, [r7, #12]
 8009600:	e002      	b.n	8009608 <prvInsertBlockIntoFreeList+0x14>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	429a      	cmp	r2, r3
 8009610:	d8f7      	bhi.n	8009602 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	4413      	add	r3, r2
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	429a      	cmp	r2, r3
 8009622:	d108      	bne.n	8009636 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	441a      	add	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	441a      	add	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	429a      	cmp	r2, r3
 8009648:	d118      	bne.n	800967c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	4b15      	ldr	r3, [pc, #84]	; (80096a4 <prvInsertBlockIntoFreeList+0xb0>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	429a      	cmp	r2, r3
 8009654:	d00d      	beq.n	8009672 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685a      	ldr	r2, [r3, #4]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	441a      	add	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	e008      	b.n	8009684 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009672:	4b0c      	ldr	r3, [pc, #48]	; (80096a4 <prvInsertBlockIntoFreeList+0xb0>)
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	601a      	str	r2, [r3, #0]
 800967a:	e003      	b.n	8009684 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	429a      	cmp	r2, r3
 800968a:	d002      	beq.n	8009692 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009692:	bf00      	nop
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	200132e4 	.word	0x200132e4
 80096a4:	200132ec 	.word	0x200132ec

080096a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	4603      	mov	r3, r0
 80096b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	db0b      	blt.n	80096d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80096ba:	79fb      	ldrb	r3, [r7, #7]
 80096bc:	f003 021f 	and.w	r2, r3, #31
 80096c0:	4907      	ldr	r1, [pc, #28]	; (80096e0 <__NVIC_EnableIRQ+0x38>)
 80096c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096c6:	095b      	lsrs	r3, r3, #5
 80096c8:	2001      	movs	r0, #1
 80096ca:	fa00 f202 	lsl.w	r2, r0, r2
 80096ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80096d2:	bf00      	nop
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	e000e100 	.word	0xe000e100

080096e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	4603      	mov	r3, r0
 80096ec:	6039      	str	r1, [r7, #0]
 80096ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	db0a      	blt.n	800970e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	490c      	ldr	r1, [pc, #48]	; (8009730 <__NVIC_SetPriority+0x4c>)
 80096fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009702:	0112      	lsls	r2, r2, #4
 8009704:	b2d2      	uxtb	r2, r2
 8009706:	440b      	add	r3, r1
 8009708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800970c:	e00a      	b.n	8009724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	b2da      	uxtb	r2, r3
 8009712:	4908      	ldr	r1, [pc, #32]	; (8009734 <__NVIC_SetPriority+0x50>)
 8009714:	79fb      	ldrb	r3, [r7, #7]
 8009716:	f003 030f 	and.w	r3, r3, #15
 800971a:	3b04      	subs	r3, #4
 800971c:	0112      	lsls	r2, r2, #4
 800971e:	b2d2      	uxtb	r2, r2
 8009720:	440b      	add	r3, r1
 8009722:	761a      	strb	r2, [r3, #24]
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	e000e100 	.word	0xe000e100
 8009734:	e000ed00 	.word	0xe000ed00

08009738 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009748:	d10a      	bne.n	8009760 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800974a:	4b62      	ldr	r3, [pc, #392]	; (80098d4 <BasicTimer_Config+0x19c>)
 800974c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974e:	4a61      	ldr	r2, [pc, #388]	; (80098d4 <BasicTimer_Config+0x19c>)
 8009750:	f043 0301 	orr.w	r3, r3, #1
 8009754:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	4a5f      	ldr	r2, [pc, #380]	; (80098d8 <BasicTimer_Config+0x1a0>)
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	e02e      	b.n	80097be <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	4a5d      	ldr	r2, [pc, #372]	; (80098dc <BasicTimer_Config+0x1a4>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d10a      	bne.n	8009780 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800976a:	4b5a      	ldr	r3, [pc, #360]	; (80098d4 <BasicTimer_Config+0x19c>)
 800976c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976e:	4a59      	ldr	r2, [pc, #356]	; (80098d4 <BasicTimer_Config+0x19c>)
 8009770:	f043 0302 	orr.w	r3, r3, #2
 8009774:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	4a59      	ldr	r2, [pc, #356]	; (80098e0 <BasicTimer_Config+0x1a8>)
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	e01e      	b.n	80097be <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	4a57      	ldr	r2, [pc, #348]	; (80098e4 <BasicTimer_Config+0x1ac>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d10a      	bne.n	80097a0 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800978a:	4b52      	ldr	r3, [pc, #328]	; (80098d4 <BasicTimer_Config+0x19c>)
 800978c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978e:	4a51      	ldr	r2, [pc, #324]	; (80098d4 <BasicTimer_Config+0x19c>)
 8009790:	f043 0304 	orr.w	r3, r3, #4
 8009794:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	4a53      	ldr	r2, [pc, #332]	; (80098e8 <BasicTimer_Config+0x1b0>)
 800979c:	6013      	str	r3, [r2, #0]
 800979e:	e00e      	b.n	80097be <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	4a51      	ldr	r2, [pc, #324]	; (80098ec <BasicTimer_Config+0x1b4>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d109      	bne.n	80097be <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80097aa:	4b4a      	ldr	r3, [pc, #296]	; (80098d4 <BasicTimer_Config+0x19c>)
 80097ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ae:	4a49      	ldr	r2, [pc, #292]	; (80098d4 <BasicTimer_Config+0x19c>)
 80097b0:	f043 0308 	orr.w	r3, r3, #8
 80097b4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	4a4d      	ldr	r2, [pc, #308]	; (80098f0 <BasicTimer_Config+0x1b8>)
 80097bc:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 80097be:	f001 feed 	bl	800b59c <getConfigPLL>
 80097c2:	4603      	mov	r3, r0
 80097c4:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80097c6:	f001 ff05 	bl	800b5d4 <getClockAPB1>
 80097ca:	4603      	mov	r3, r0
 80097cc:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	2b31      	cmp	r3, #49	; 0x31
 80097d2:	d903      	bls.n	80097dc <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	73fb      	strb	r3, [r7, #15]
 80097da:	e000      	b.n	80097de <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 80097dc:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 80097de:	7bfb      	ldrb	r3, [r7, #15]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	8852      	ldrh	r2, [r2, #2]
 80097e4:	fb02 f303 	mul.w	r3, r2, r3
 80097e8:	1e5a      	subs	r2, r3, #1
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d112      	bne.n	800981e <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	f022 0210 	bic.w	r2, r2, #16
 8009806:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	3201      	adds	r2, #1
 8009812:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	625a      	str	r2, [r3, #36]	; 0x24
 800981c:	e018      	b.n	8009850 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	f022 0210 	bic.w	r2, r2, #16
 800982c:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	f042 0210 	orr.w	r2, r2, #16
 800983c:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	6852      	ldr	r2, [r2, #4]
 800984e:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009850:	b672      	cpsid	i
}
 8009852:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800985c:	d103      	bne.n	8009866 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800985e:	201c      	movs	r0, #28
 8009860:	f7ff ff22 	bl	80096a8 <__NVIC_EnableIRQ>
 8009864:	e019      	b.n	800989a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	4a1c      	ldr	r2, [pc, #112]	; (80098dc <BasicTimer_Config+0x1a4>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d103      	bne.n	8009878 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8009870:	201d      	movs	r0, #29
 8009872:	f7ff ff19 	bl	80096a8 <__NVIC_EnableIRQ>
 8009876:	e010      	b.n	800989a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	4a19      	ldr	r2, [pc, #100]	; (80098e4 <BasicTimer_Config+0x1ac>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d103      	bne.n	800988a <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8009882:	201e      	movs	r0, #30
 8009884:	f7ff ff10 	bl	80096a8 <__NVIC_EnableIRQ>
 8009888:	e007      	b.n	800989a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	4a17      	ldr	r2, [pc, #92]	; (80098ec <BasicTimer_Config+0x1b4>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d102      	bne.n	800989a <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8009894:	2032      	movs	r0, #50	; 0x32
 8009896:	f7ff ff07 	bl	80096a8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800989a:	b662      	cpsie	i
}
 800989c:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	7a1b      	ldrb	r3, [r3, #8]
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f8b5 	bl	8009a14 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	f022 0201 	bic.w	r2, r2, #1
 80098b8:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	f042 0201 	orr.w	r2, r2, #1
 80098c8:	601a      	str	r2, [r3, #0]
}
 80098ca:	bf00      	nop
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	40023800 	.word	0x40023800
 80098d8:	20013304 	.word	0x20013304
 80098dc:	40000400 	.word	0x40000400
 80098e0:	20013308 	.word	0x20013308
 80098e4:	40000800 	.word	0x40000800
 80098e8:	2001330c 	.word	0x2001330c
 80098ec:	40000c00 	.word	0x40000c00
 80098f0:	20013310 	.word	0x20013310

080098f4 <timer_Config_Init_Priority>:

//------------Funcion para configurar las interrupciones------------------
void timer_Config_Init_Priority(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8009900:	b672      	cpsid	i
}
 8009902:	bf00      	nop
	//Desactivamos las interupciones globales
	__disable_irq();
	//Matriculamos la interrupcion en el NVIC
	if(ptrBTimerHandler->ptrTIMx == TIM2)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800990c:	d105      	bne.n	800991a <timer_Config_Init_Priority+0x26>
	{
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 800990e:	78fb      	ldrb	r3, [r7, #3]
 8009910:	4619      	mov	r1, r3
 8009912:	201c      	movs	r0, #28
 8009914:	f7ff fee6 	bl	80096e4 <__NVIC_SetPriority>
 8009918:	e01f      	b.n	800995a <timer_Config_Init_Priority+0x66>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	4a12      	ldr	r2, [pc, #72]	; (8009968 <timer_Config_Init_Priority+0x74>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d105      	bne.n	8009930 <timer_Config_Init_Priority+0x3c>
	{
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	4619      	mov	r1, r3
 8009928:	201d      	movs	r0, #29
 800992a:	f7ff fedb 	bl	80096e4 <__NVIC_SetPriority>
 800992e:	e014      	b.n	800995a <timer_Config_Init_Priority+0x66>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	4a0d      	ldr	r2, [pc, #52]	; (800996c <timer_Config_Init_Priority+0x78>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d105      	bne.n	8009946 <timer_Config_Init_Priority+0x52>
	{
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 800993a:	78fb      	ldrb	r3, [r7, #3]
 800993c:	4619      	mov	r1, r3
 800993e:	201e      	movs	r0, #30
 8009940:	f7ff fed0 	bl	80096e4 <__NVIC_SetPriority>
 8009944:	e009      	b.n	800995a <timer_Config_Init_Priority+0x66>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	4a09      	ldr	r2, [pc, #36]	; (8009970 <timer_Config_Init_Priority+0x7c>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d104      	bne.n	800995a <timer_Config_Init_Priority+0x66>
	{
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	4619      	mov	r1, r3
 8009954:	2032      	movs	r0, #50	; 0x32
 8009956:	f7ff fec5 	bl	80096e4 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800995a:	b662      	cpsie	i
}
 800995c:	bf00      	nop
	}
	//Activamos las interupciones globales
	__enable_irq();
}
 800995e:	bf00      	nop
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	40000400 	.word	0x40000400
 800996c:	40000800 	.word	0x40000800
 8009970:	40000c00 	.word	0x40000c00

08009974 <BasicTimer2_Callback>:

//Definimos las funciones para cuando se genera una interrupcion del TIM2-3
__attribute__((weak)) void BasicTimer2_Callback(void)
{
 8009974:	b480      	push	{r7}
 8009976:	af00      	add	r7, sp, #0
	__NOP();
 8009978:	bf00      	nop
}
 800997a:	bf00      	nop
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <BasicTimer5_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8009984:	b480      	push	{r7}
 8009986:	af00      	add	r7, sp, #0
	__NOP();
 8009988:	bf00      	nop
}
 800998a:	bf00      	nop
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8009998:	4b05      	ldr	r3, [pc, #20]	; (80099b0 <TIM2_IRQHandler+0x1c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	691a      	ldr	r2, [r3, #16]
 800999e:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <TIM2_IRQHandler+0x1c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f022 0201 	bic.w	r2, r2, #1
 80099a6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 80099a8:	f7ff ffe4 	bl	8009974 <BasicTimer2_Callback>

}
 80099ac:	bf00      	nop
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	20013304 	.word	0x20013304

080099b4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 80099b8:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <TIM3_IRQHandler+0x1c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	691a      	ldr	r2, [r3, #16]
 80099be:	4b04      	ldr	r3, [pc, #16]	; (80099d0 <TIM3_IRQHandler+0x1c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f022 0201 	bic.w	r2, r2, #1
 80099c6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 80099c8:	f7fa faac 	bl	8003f24 <BasicTimer3_Callback>

}
 80099cc:	bf00      	nop
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	20013308 	.word	0x20013308

080099d4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 80099d8:	4b05      	ldr	r3, [pc, #20]	; (80099f0 <TIM4_IRQHandler+0x1c>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	691a      	ldr	r2, [r3, #16]
 80099de:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <TIM4_IRQHandler+0x1c>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f022 0201 	bic.w	r2, r2, #1
 80099e6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 80099e8:	f7fa fac0 	bl	8003f6c <BasicTimer4_Callback>

}
 80099ec:	bf00      	nop
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	2001330c 	.word	0x2001330c

080099f4 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 80099f8:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <TIM5_IRQHandler+0x1c>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	691a      	ldr	r2, [r3, #16]
 80099fe:	4b04      	ldr	r3, [pc, #16]	; (8009a10 <TIM5_IRQHandler+0x1c>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f022 0201 	bic.w	r2, r2, #1
 8009a06:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8009a08:	f7ff ffbc 	bl	8009984 <BasicTimer5_Callback>

}
 8009a0c:	bf00      	nop
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	20013310 	.word	0x20013310

08009a14 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8009a20:	78fb      	ldrb	r3, [r7, #3]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d108      	bne.n	8009a38 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	68da      	ldr	r2, [r3, #12]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	f042 0201 	orr.w	r2, r2, #1
 8009a34:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8009a36:	e007      	b.n	8009a48 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	f022 0201 	bic.w	r2, r2, #1
 8009a46:	60da      	str	r2, [r3, #12]
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 8009a60:	887a      	ldrh	r2, [r7, #2]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	6852      	ldr	r2, [r2, #4]
 8009a76:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <timer_delay>:

//Funcion para realizar un delay con un timer
void timer_delay(BasicTimer_Handler_t *ptrBTimerHandler,uint16_t *countingTimer, uint16_t maxCountinegTimer)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	80fb      	strh	r3, [r7, #6]
	//Aseguramos que el valor de las cuestas se reinicio
	*countingTimer = 0;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2200      	movs	r2, #0
 8009a96:	801a      	strh	r2, [r3, #0]
	//Activamos la interrupcion del Timer
	statusiInterruptionTimer(ptrBTimerHandler, SET);
 8009a98:	2101      	movs	r1, #1
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f7ff ffba 	bl	8009a14 <statusiInterruptionTimer>
	//El programa se queda aqui hasta que se cumple la condiccion
	while(*countingTimer<maxCountinegTimer)
 8009aa0:	e000      	b.n	8009aa4 <timer_delay+0x20>
	{
		__NOP();
 8009aa2:	bf00      	nop
	while(*countingTimer<maxCountinegTimer)
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	881b      	ldrh	r3, [r3, #0]
 8009aa8:	88fa      	ldrh	r2, [r7, #6]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d8f9      	bhi.n	8009aa2 <timer_delay+0x1e>
	}
	//Desactivamos la interrupcion del Timer
	statusiInterruptionTimer(ptrBTimerHandler, RESET);
 8009aae:	2100      	movs	r1, #0
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f7ff ffaf 	bl	8009a14 <statusiInterruptionTimer>
}
 8009ab6:	bf00      	nop
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
	...

08009ac0 <__NVIC_EnableIRQ>:
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	db0b      	blt.n	8009aea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	f003 021f 	and.w	r2, r3, #31
 8009ad8:	4907      	ldr	r1, [pc, #28]	; (8009af8 <__NVIC_EnableIRQ+0x38>)
 8009ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ade:	095b      	lsrs	r3, r3, #5
 8009ae0:	2001      	movs	r0, #1
 8009ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8009ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009aea:	bf00      	nop
 8009aec:	370c      	adds	r7, #12
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	e000e100 	.word	0xe000e100

08009afc <__NVIC_SetPriority>:
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	6039      	str	r1, [r7, #0]
 8009b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	db0a      	blt.n	8009b26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	490c      	ldr	r1, [pc, #48]	; (8009b48 <__NVIC_SetPriority+0x4c>)
 8009b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b1a:	0112      	lsls	r2, r2, #4
 8009b1c:	b2d2      	uxtb	r2, r2
 8009b1e:	440b      	add	r3, r1
 8009b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009b24:	e00a      	b.n	8009b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	4908      	ldr	r1, [pc, #32]	; (8009b4c <__NVIC_SetPriority+0x50>)
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	f003 030f 	and.w	r3, r3, #15
 8009b32:	3b04      	subs	r3, #4
 8009b34:	0112      	lsls	r2, r2, #4
 8009b36:	b2d2      	uxtb	r2, r2
 8009b38:	440b      	add	r3, r1
 8009b3a:	761a      	strb	r2, [r3, #24]
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	e000e100 	.word	0xe000e100
 8009b4c:	e000ed00 	.word	0xe000ed00

08009b50 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af02      	add	r7, sp, #8
 8009b56:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6818      	ldr	r0, [r3, #0]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	9301      	str	r3, [sp, #4]
 8009b60:	2300      	movs	r3, #0
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	2301      	movs	r3, #1
 8009b66:	2200      	movs	r2, #0
 8009b68:	2100      	movs	r1, #0
 8009b6a:	f001 f903 	bl	800ad74 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f001 f920 	bl	800adb8 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8009b78:	4b97      	ldr	r3, [pc, #604]	; (8009dd8 <extInt_Config+0x288>)
 8009b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7c:	4a96      	ldr	r2, [pc, #600]	; (8009dd8 <extInt_Config+0x288>)
 8009b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b82:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	2b0f      	cmp	r3, #15
 8009b8c:	f200 85cf 	bhi.w	800a72e <extInt_Config+0xbde>
 8009b90:	a201      	add	r2, pc, #4	; (adr r2, 8009b98 <extInt_Config+0x48>)
 8009b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b96:	bf00      	nop
 8009b98:	08009bd9 	.word	0x08009bd9
 8009b9c:	08009c8f 	.word	0x08009c8f
 8009ba0:	08009d45 	.word	0x08009d45
 8009ba4:	08009e1b 	.word	0x08009e1b
 8009ba8:	08009ed1 	.word	0x08009ed1
 8009bac:	08009f7f 	.word	0x08009f7f
 8009bb0:	0800a045 	.word	0x0800a045
 8009bb4:	0800a0ed 	.word	0x0800a0ed
 8009bb8:	0800a195 	.word	0x0800a195
 8009bbc:	0800a23d 	.word	0x0800a23d
 8009bc0:	0800a303 	.word	0x0800a303
 8009bc4:	0800a3ab 	.word	0x0800a3ab
 8009bc8:	0800a453 	.word	0x0800a453
 8009bcc:	0800a519 	.word	0x0800a519
 8009bd0:	0800a5c1 	.word	0x0800a5c1
 8009bd4:	0800a669 	.word	0x0800a669
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 8009bd8:	4b80      	ldr	r3, [pc, #512]	; (8009ddc <extInt_Config+0x28c>)
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	4a7f      	ldr	r2, [pc, #508]	; (8009ddc <extInt_Config+0x28c>)
 8009bde:	f023 030f 	bic.w	r3, r3, #15
 8009be2:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	4a7d      	ldr	r2, [pc, #500]	; (8009de0 <extInt_Config+0x290>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d105      	bne.n	8009bfc <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8009bf0:	4b7a      	ldr	r3, [pc, #488]	; (8009ddc <extInt_Config+0x28c>)
 8009bf2:	4a7a      	ldr	r2, [pc, #488]	; (8009ddc <extInt_Config+0x28c>)
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8009bf8:	f000 bd9b 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	4a78      	ldr	r2, [pc, #480]	; (8009de4 <extInt_Config+0x294>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d107      	bne.n	8009c18 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8009c08:	4b74      	ldr	r3, [pc, #464]	; (8009ddc <extInt_Config+0x28c>)
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	4a73      	ldr	r2, [pc, #460]	; (8009ddc <extInt_Config+0x28c>)
 8009c0e:	f043 0301 	orr.w	r3, r3, #1
 8009c12:	6093      	str	r3, [r2, #8]
		break;
 8009c14:	f000 bd8d 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	4a72      	ldr	r2, [pc, #456]	; (8009de8 <extInt_Config+0x298>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d107      	bne.n	8009c34 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8009c24:	4b6d      	ldr	r3, [pc, #436]	; (8009ddc <extInt_Config+0x28c>)
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	4a6c      	ldr	r2, [pc, #432]	; (8009ddc <extInt_Config+0x28c>)
 8009c2a:	f043 0302 	orr.w	r3, r3, #2
 8009c2e:	6093      	str	r3, [r2, #8]
		break;
 8009c30:	f000 bd7f 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	4a6c      	ldr	r2, [pc, #432]	; (8009dec <extInt_Config+0x29c>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d107      	bne.n	8009c50 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8009c40:	4b66      	ldr	r3, [pc, #408]	; (8009ddc <extInt_Config+0x28c>)
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	4a65      	ldr	r2, [pc, #404]	; (8009ddc <extInt_Config+0x28c>)
 8009c46:	f043 0303 	orr.w	r3, r3, #3
 8009c4a:	6093      	str	r3, [r2, #8]
		break;
 8009c4c:	f000 bd71 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	4a66      	ldr	r2, [pc, #408]	; (8009df0 <extInt_Config+0x2a0>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d107      	bne.n	8009c6c <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8009c5c:	4b5f      	ldr	r3, [pc, #380]	; (8009ddc <extInt_Config+0x28c>)
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	4a5e      	ldr	r2, [pc, #376]	; (8009ddc <extInt_Config+0x28c>)
 8009c62:	f043 0304 	orr.w	r3, r3, #4
 8009c66:	6093      	str	r3, [r2, #8]
		break;
 8009c68:	f000 bd63 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	4a60      	ldr	r2, [pc, #384]	; (8009df4 <extInt_Config+0x2a4>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d107      	bne.n	8009c88 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8009c78:	4b58      	ldr	r3, [pc, #352]	; (8009ddc <extInt_Config+0x28c>)
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	4a57      	ldr	r2, [pc, #348]	; (8009ddc <extInt_Config+0x28c>)
 8009c7e:	f043 0307 	orr.w	r3, r3, #7
 8009c82:	6093      	str	r3, [r2, #8]
		break;
 8009c84:	f000 bd55 	b.w	800a732 <extInt_Config+0xbe2>
			__NOP();
 8009c88:	bf00      	nop
		break;
 8009c8a:	f000 bd52 	b.w	800a732 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8009c8e:	4b53      	ldr	r3, [pc, #332]	; (8009ddc <extInt_Config+0x28c>)
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	4a52      	ldr	r2, [pc, #328]	; (8009ddc <extInt_Config+0x28c>)
 8009c94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c98:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	4a4f      	ldr	r2, [pc, #316]	; (8009de0 <extInt_Config+0x290>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d105      	bne.n	8009cb2 <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8009ca6:	4b4d      	ldr	r3, [pc, #308]	; (8009ddc <extInt_Config+0x28c>)
 8009ca8:	4a4c      	ldr	r2, [pc, #304]	; (8009ddc <extInt_Config+0x28c>)
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8009cae:	f000 bd40 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	4a4a      	ldr	r2, [pc, #296]	; (8009de4 <extInt_Config+0x294>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d107      	bne.n	8009cce <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8009cbe:	4b47      	ldr	r3, [pc, #284]	; (8009ddc <extInt_Config+0x28c>)
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	4a46      	ldr	r2, [pc, #280]	; (8009ddc <extInt_Config+0x28c>)
 8009cc4:	f043 0310 	orr.w	r3, r3, #16
 8009cc8:	6093      	str	r3, [r2, #8]
		break;
 8009cca:	f000 bd32 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	4a44      	ldr	r2, [pc, #272]	; (8009de8 <extInt_Config+0x298>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d107      	bne.n	8009cea <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8009cda:	4b40      	ldr	r3, [pc, #256]	; (8009ddc <extInt_Config+0x28c>)
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	4a3f      	ldr	r2, [pc, #252]	; (8009ddc <extInt_Config+0x28c>)
 8009ce0:	f043 0320 	orr.w	r3, r3, #32
 8009ce4:	6093      	str	r3, [r2, #8]
		break;
 8009ce6:	f000 bd24 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	4a3e      	ldr	r2, [pc, #248]	; (8009dec <extInt_Config+0x29c>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d107      	bne.n	8009d06 <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8009cf6:	4b39      	ldr	r3, [pc, #228]	; (8009ddc <extInt_Config+0x28c>)
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	4a38      	ldr	r2, [pc, #224]	; (8009ddc <extInt_Config+0x28c>)
 8009cfc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009d00:	6093      	str	r3, [r2, #8]
		break;
 8009d02:	f000 bd16 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	4a38      	ldr	r2, [pc, #224]	; (8009df0 <extInt_Config+0x2a0>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d107      	bne.n	8009d22 <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8009d12:	4b32      	ldr	r3, [pc, #200]	; (8009ddc <extInt_Config+0x28c>)
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	4a31      	ldr	r2, [pc, #196]	; (8009ddc <extInt_Config+0x28c>)
 8009d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d1c:	6093      	str	r3, [r2, #8]
		break;
 8009d1e:	f000 bd08 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	4a32      	ldr	r2, [pc, #200]	; (8009df4 <extInt_Config+0x2a4>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d107      	bne.n	8009d3e <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8009d2e:	4b2b      	ldr	r3, [pc, #172]	; (8009ddc <extInt_Config+0x28c>)
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	4a2a      	ldr	r2, [pc, #168]	; (8009ddc <extInt_Config+0x28c>)
 8009d34:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009d38:	6093      	str	r3, [r2, #8]
		break;
 8009d3a:	f000 bcfa 	b.w	800a732 <extInt_Config+0xbe2>
			__NOP();
 8009d3e:	bf00      	nop
		break;
 8009d40:	f000 bcf7 	b.w	800a732 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8009d44:	4b25      	ldr	r3, [pc, #148]	; (8009ddc <extInt_Config+0x28c>)
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	4a24      	ldr	r2, [pc, #144]	; (8009ddc <extInt_Config+0x28c>)
 8009d4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009d4e:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	4a22      	ldr	r2, [pc, #136]	; (8009de0 <extInt_Config+0x290>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d105      	bne.n	8009d68 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8009d5c:	4b1f      	ldr	r3, [pc, #124]	; (8009ddc <extInt_Config+0x28c>)
 8009d5e:	4a1f      	ldr	r2, [pc, #124]	; (8009ddc <extInt_Config+0x28c>)
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8009d64:	f000 bce5 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	4a1d      	ldr	r2, [pc, #116]	; (8009de4 <extInt_Config+0x294>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d107      	bne.n	8009d84 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8009d74:	4b19      	ldr	r3, [pc, #100]	; (8009ddc <extInt_Config+0x28c>)
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	4a18      	ldr	r2, [pc, #96]	; (8009ddc <extInt_Config+0x28c>)
 8009d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d7e:	6093      	str	r3, [r2, #8]
		break;
 8009d80:	f000 bcd7 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	4a17      	ldr	r2, [pc, #92]	; (8009de8 <extInt_Config+0x298>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d107      	bne.n	8009da0 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8009d90:	4b12      	ldr	r3, [pc, #72]	; (8009ddc <extInt_Config+0x28c>)
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	4a11      	ldr	r2, [pc, #68]	; (8009ddc <extInt_Config+0x28c>)
 8009d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d9a:	6093      	str	r3, [r2, #8]
		break;
 8009d9c:	f000 bcc9 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	4a11      	ldr	r2, [pc, #68]	; (8009dec <extInt_Config+0x29c>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d107      	bne.n	8009dbc <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8009dac:	4b0b      	ldr	r3, [pc, #44]	; (8009ddc <extInt_Config+0x28c>)
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	4a0a      	ldr	r2, [pc, #40]	; (8009ddc <extInt_Config+0x28c>)
 8009db2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009db6:	6093      	str	r3, [r2, #8]
		break;
 8009db8:	f000 bcbb 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	4a0b      	ldr	r2, [pc, #44]	; (8009df0 <extInt_Config+0x2a0>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d117      	bne.n	8009df8 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8009dc8:	4b04      	ldr	r3, [pc, #16]	; (8009ddc <extInt_Config+0x28c>)
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	4a03      	ldr	r2, [pc, #12]	; (8009ddc <extInt_Config+0x28c>)
 8009dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009dd2:	6093      	str	r3, [r2, #8]
		break;
 8009dd4:	f000 bcad 	b.w	800a732 <extInt_Config+0xbe2>
 8009dd8:	40023800 	.word	0x40023800
 8009ddc:	40013800 	.word	0x40013800
 8009de0:	40020000 	.word	0x40020000
 8009de4:	40020400 	.word	0x40020400
 8009de8:	40020800 	.word	0x40020800
 8009dec:	40020c00 	.word	0x40020c00
 8009df0:	40021000 	.word	0x40021000
 8009df4:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	4a8a      	ldr	r2, [pc, #552]	; (800a028 <extInt_Config+0x4d8>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d107      	bne.n	8009e14 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8009e04:	4b89      	ldr	r3, [pc, #548]	; (800a02c <extInt_Config+0x4dc>)
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	4a88      	ldr	r2, [pc, #544]	; (800a02c <extInt_Config+0x4dc>)
 8009e0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009e0e:	6093      	str	r3, [r2, #8]
		break;
 8009e10:	f000 bc8f 	b.w	800a732 <extInt_Config+0xbe2>
			__NOP();
 8009e14:	bf00      	nop
		break;
 8009e16:	f000 bc8c 	b.w	800a732 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8009e1a:	4b84      	ldr	r3, [pc, #528]	; (800a02c <extInt_Config+0x4dc>)
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	4a83      	ldr	r2, [pc, #524]	; (800a02c <extInt_Config+0x4dc>)
 8009e20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e24:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	4a80      	ldr	r2, [pc, #512]	; (800a030 <extInt_Config+0x4e0>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d105      	bne.n	8009e3e <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8009e32:	4b7e      	ldr	r3, [pc, #504]	; (800a02c <extInt_Config+0x4dc>)
 8009e34:	4a7d      	ldr	r2, [pc, #500]	; (800a02c <extInt_Config+0x4dc>)
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8009e3a:	f000 bc7a 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	4a7b      	ldr	r2, [pc, #492]	; (800a034 <extInt_Config+0x4e4>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d107      	bne.n	8009e5a <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8009e4a:	4b78      	ldr	r3, [pc, #480]	; (800a02c <extInt_Config+0x4dc>)
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	4a77      	ldr	r2, [pc, #476]	; (800a02c <extInt_Config+0x4dc>)
 8009e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e54:	6093      	str	r3, [r2, #8]
		break;
 8009e56:	f000 bc6c 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	4a75      	ldr	r2, [pc, #468]	; (800a038 <extInt_Config+0x4e8>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d107      	bne.n	8009e76 <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8009e66:	4b71      	ldr	r3, [pc, #452]	; (800a02c <extInt_Config+0x4dc>)
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	4a70      	ldr	r2, [pc, #448]	; (800a02c <extInt_Config+0x4dc>)
 8009e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009e70:	6093      	str	r3, [r2, #8]
		break;
 8009e72:	f000 bc5e 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	4a6f      	ldr	r2, [pc, #444]	; (800a03c <extInt_Config+0x4ec>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d107      	bne.n	8009e92 <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8009e82:	4b6a      	ldr	r3, [pc, #424]	; (800a02c <extInt_Config+0x4dc>)
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	4a69      	ldr	r2, [pc, #420]	; (800a02c <extInt_Config+0x4dc>)
 8009e88:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8009e8c:	6093      	str	r3, [r2, #8]
		break;
 8009e8e:	f000 bc50 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	4a69      	ldr	r2, [pc, #420]	; (800a040 <extInt_Config+0x4f0>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d107      	bne.n	8009eae <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8009e9e:	4b63      	ldr	r3, [pc, #396]	; (800a02c <extInt_Config+0x4dc>)
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	4a62      	ldr	r2, [pc, #392]	; (800a02c <extInt_Config+0x4dc>)
 8009ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ea8:	6093      	str	r3, [r2, #8]
		break;
 8009eaa:	f000 bc42 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	4a5c      	ldr	r2, [pc, #368]	; (800a028 <extInt_Config+0x4d8>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d107      	bne.n	8009eca <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8009eba:	4b5c      	ldr	r3, [pc, #368]	; (800a02c <extInt_Config+0x4dc>)
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	4a5b      	ldr	r2, [pc, #364]	; (800a02c <extInt_Config+0x4dc>)
 8009ec0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8009ec4:	6093      	str	r3, [r2, #8]
		break;
 8009ec6:	f000 bc34 	b.w	800a732 <extInt_Config+0xbe2>
			__NOP();
 8009eca:	bf00      	nop
		break;
 8009ecc:	f000 bc31 	b.w	800a732 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 8009ed0:	4b56      	ldr	r3, [pc, #344]	; (800a02c <extInt_Config+0x4dc>)
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	4a55      	ldr	r2, [pc, #340]	; (800a02c <extInt_Config+0x4dc>)
 8009ed6:	f023 030f 	bic.w	r3, r3, #15
 8009eda:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	4a53      	ldr	r2, [pc, #332]	; (800a030 <extInt_Config+0x4e0>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d105      	bne.n	8009ef4 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8009ee8:	4b50      	ldr	r3, [pc, #320]	; (800a02c <extInt_Config+0x4dc>)
 8009eea:	4a50      	ldr	r2, [pc, #320]	; (800a02c <extInt_Config+0x4dc>)
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8009ef0:	f000 bc1f 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	4a4e      	ldr	r2, [pc, #312]	; (800a034 <extInt_Config+0x4e4>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d107      	bne.n	8009f10 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8009f00:	4b4a      	ldr	r3, [pc, #296]	; (800a02c <extInt_Config+0x4dc>)
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	4a49      	ldr	r2, [pc, #292]	; (800a02c <extInt_Config+0x4dc>)
 8009f06:	f043 0301 	orr.w	r3, r3, #1
 8009f0a:	60d3      	str	r3, [r2, #12]
		break;
 8009f0c:	f000 bc11 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	4a48      	ldr	r2, [pc, #288]	; (800a038 <extInt_Config+0x4e8>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d107      	bne.n	8009f2c <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8009f1c:	4b43      	ldr	r3, [pc, #268]	; (800a02c <extInt_Config+0x4dc>)
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	4a42      	ldr	r2, [pc, #264]	; (800a02c <extInt_Config+0x4dc>)
 8009f22:	f043 0302 	orr.w	r3, r3, #2
 8009f26:	60d3      	str	r3, [r2, #12]
		break;
 8009f28:	f000 bc03 	b.w	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	4a42      	ldr	r2, [pc, #264]	; (800a03c <extInt_Config+0x4ec>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d106      	bne.n	8009f46 <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8009f38:	4b3c      	ldr	r3, [pc, #240]	; (800a02c <extInt_Config+0x4dc>)
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	4a3b      	ldr	r2, [pc, #236]	; (800a02c <extInt_Config+0x4dc>)
 8009f3e:	f043 0303 	orr.w	r3, r3, #3
 8009f42:	60d3      	str	r3, [r2, #12]
		break;
 8009f44:	e3f5      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	4a3c      	ldr	r2, [pc, #240]	; (800a040 <extInt_Config+0x4f0>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d106      	bne.n	8009f60 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8009f52:	4b36      	ldr	r3, [pc, #216]	; (800a02c <extInt_Config+0x4dc>)
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	4a35      	ldr	r2, [pc, #212]	; (800a02c <extInt_Config+0x4dc>)
 8009f58:	f043 0304 	orr.w	r3, r3, #4
 8009f5c:	60d3      	str	r3, [r2, #12]
		break;
 8009f5e:	e3e8      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	4a30      	ldr	r2, [pc, #192]	; (800a028 <extInt_Config+0x4d8>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d106      	bne.n	8009f7a <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8009f6c:	4b2f      	ldr	r3, [pc, #188]	; (800a02c <extInt_Config+0x4dc>)
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	4a2e      	ldr	r2, [pc, #184]	; (800a02c <extInt_Config+0x4dc>)
 8009f72:	f043 0307 	orr.w	r3, r3, #7
 8009f76:	60d3      	str	r3, [r2, #12]
		break;
 8009f78:	e3db      	b.n	800a732 <extInt_Config+0xbe2>
			__NOP();
 8009f7a:	bf00      	nop
		break;
 8009f7c:	e3d9      	b.n	800a732 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8009f7e:	4b2b      	ldr	r3, [pc, #172]	; (800a02c <extInt_Config+0x4dc>)
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	4a2a      	ldr	r2, [pc, #168]	; (800a02c <extInt_Config+0x4dc>)
 8009f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f88:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	4a27      	ldr	r2, [pc, #156]	; (800a030 <extInt_Config+0x4e0>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d104      	bne.n	8009fa0 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8009f96:	4b25      	ldr	r3, [pc, #148]	; (800a02c <extInt_Config+0x4dc>)
 8009f98:	4a24      	ldr	r2, [pc, #144]	; (800a02c <extInt_Config+0x4dc>)
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8009f9e:	e3c8      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	4a23      	ldr	r2, [pc, #140]	; (800a034 <extInt_Config+0x4e4>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d106      	bne.n	8009fba <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8009fac:	4b1f      	ldr	r3, [pc, #124]	; (800a02c <extInt_Config+0x4dc>)
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	4a1e      	ldr	r2, [pc, #120]	; (800a02c <extInt_Config+0x4dc>)
 8009fb2:	f043 0310 	orr.w	r3, r3, #16
 8009fb6:	60d3      	str	r3, [r2, #12]
		break;
 8009fb8:	e3bb      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	4a1d      	ldr	r2, [pc, #116]	; (800a038 <extInt_Config+0x4e8>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d106      	bne.n	8009fd4 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8009fc6:	4b19      	ldr	r3, [pc, #100]	; (800a02c <extInt_Config+0x4dc>)
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	4a18      	ldr	r2, [pc, #96]	; (800a02c <extInt_Config+0x4dc>)
 8009fcc:	f043 0320 	orr.w	r3, r3, #32
 8009fd0:	60d3      	str	r3, [r2, #12]
		break;
 8009fd2:	e3ae      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	4a18      	ldr	r2, [pc, #96]	; (800a03c <extInt_Config+0x4ec>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d106      	bne.n	8009fee <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8009fe0:	4b12      	ldr	r3, [pc, #72]	; (800a02c <extInt_Config+0x4dc>)
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	4a11      	ldr	r2, [pc, #68]	; (800a02c <extInt_Config+0x4dc>)
 8009fe6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009fea:	60d3      	str	r3, [r2, #12]
		break;
 8009fec:	e3a1      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	4a12      	ldr	r2, [pc, #72]	; (800a040 <extInt_Config+0x4f0>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d106      	bne.n	800a008 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8009ffa:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <extInt_Config+0x4dc>)
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	4a0b      	ldr	r2, [pc, #44]	; (800a02c <extInt_Config+0x4dc>)
 800a000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a004:	60d3      	str	r3, [r2, #12]
		break;
 800a006:	e394      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	4a06      	ldr	r2, [pc, #24]	; (800a028 <extInt_Config+0x4d8>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d106      	bne.n	800a022 <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 800a014:	4b05      	ldr	r3, [pc, #20]	; (800a02c <extInt_Config+0x4dc>)
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	4a04      	ldr	r2, [pc, #16]	; (800a02c <extInt_Config+0x4dc>)
 800a01a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800a01e:	60d3      	str	r3, [r2, #12]
		break;
 800a020:	e387      	b.n	800a732 <extInt_Config+0xbe2>
			__NOP();
 800a022:	bf00      	nop
		break;
 800a024:	e385      	b.n	800a732 <extInt_Config+0xbe2>
 800a026:	bf00      	nop
 800a028:	40021c00 	.word	0x40021c00
 800a02c:	40013800 	.word	0x40013800
 800a030:	40020000 	.word	0x40020000
 800a034:	40020400 	.word	0x40020400
 800a038:	40020800 	.word	0x40020800
 800a03c:	40020c00 	.word	0x40020c00
 800a040:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 800a044:	4b86      	ldr	r3, [pc, #536]	; (800a260 <extInt_Config+0x710>)
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	4a85      	ldr	r2, [pc, #532]	; (800a260 <extInt_Config+0x710>)
 800a04a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a04e:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	4a83      	ldr	r2, [pc, #524]	; (800a264 <extInt_Config+0x714>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d104      	bne.n	800a066 <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 800a05c:	4b80      	ldr	r3, [pc, #512]	; (800a260 <extInt_Config+0x710>)
 800a05e:	4a80      	ldr	r2, [pc, #512]	; (800a260 <extInt_Config+0x710>)
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800a064:	e365      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	4a7e      	ldr	r2, [pc, #504]	; (800a268 <extInt_Config+0x718>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d106      	bne.n	800a080 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800a072:	4b7b      	ldr	r3, [pc, #492]	; (800a260 <extInt_Config+0x710>)
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	4a7a      	ldr	r2, [pc, #488]	; (800a260 <extInt_Config+0x710>)
 800a078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a07c:	60d3      	str	r3, [r2, #12]
		break;
 800a07e:	e358      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	4a79      	ldr	r2, [pc, #484]	; (800a26c <extInt_Config+0x71c>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d106      	bne.n	800a09a <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 800a08c:	4b74      	ldr	r3, [pc, #464]	; (800a260 <extInt_Config+0x710>)
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	4a73      	ldr	r2, [pc, #460]	; (800a260 <extInt_Config+0x710>)
 800a092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a096:	60d3      	str	r3, [r2, #12]
		break;
 800a098:	e34b      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	4a73      	ldr	r2, [pc, #460]	; (800a270 <extInt_Config+0x720>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d106      	bne.n	800a0b4 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800a0a6:	4b6e      	ldr	r3, [pc, #440]	; (800a260 <extInt_Config+0x710>)
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	4a6d      	ldr	r2, [pc, #436]	; (800a260 <extInt_Config+0x710>)
 800a0ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a0b0:	60d3      	str	r3, [r2, #12]
		break;
 800a0b2:	e33e      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	4a6e      	ldr	r2, [pc, #440]	; (800a274 <extInt_Config+0x724>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d106      	bne.n	800a0ce <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 800a0c0:	4b67      	ldr	r3, [pc, #412]	; (800a260 <extInt_Config+0x710>)
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	4a66      	ldr	r2, [pc, #408]	; (800a260 <extInt_Config+0x710>)
 800a0c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a0ca:	60d3      	str	r3, [r2, #12]
		break;
 800a0cc:	e331      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	4a68      	ldr	r2, [pc, #416]	; (800a278 <extInt_Config+0x728>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d106      	bne.n	800a0e8 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 800a0da:	4b61      	ldr	r3, [pc, #388]	; (800a260 <extInt_Config+0x710>)
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	4a60      	ldr	r2, [pc, #384]	; (800a260 <extInt_Config+0x710>)
 800a0e0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a0e4:	60d3      	str	r3, [r2, #12]
		break;
 800a0e6:	e324      	b.n	800a732 <extInt_Config+0xbe2>
			__NOP();
 800a0e8:	bf00      	nop
		break;
 800a0ea:	e322      	b.n	800a732 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 800a0ec:	4b5c      	ldr	r3, [pc, #368]	; (800a260 <extInt_Config+0x710>)
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	4a5b      	ldr	r2, [pc, #364]	; (800a260 <extInt_Config+0x710>)
 800a0f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0f6:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	4a59      	ldr	r2, [pc, #356]	; (800a264 <extInt_Config+0x714>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d104      	bne.n	800a10e <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 800a104:	4b56      	ldr	r3, [pc, #344]	; (800a260 <extInt_Config+0x710>)
 800a106:	4a56      	ldr	r2, [pc, #344]	; (800a260 <extInt_Config+0x710>)
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800a10c:	e311      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	4a54      	ldr	r2, [pc, #336]	; (800a268 <extInt_Config+0x718>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d106      	bne.n	800a128 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 800a11a:	4b51      	ldr	r3, [pc, #324]	; (800a260 <extInt_Config+0x710>)
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	4a50      	ldr	r2, [pc, #320]	; (800a260 <extInt_Config+0x710>)
 800a120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a124:	60d3      	str	r3, [r2, #12]
		break;
 800a126:	e304      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	4a4f      	ldr	r2, [pc, #316]	; (800a26c <extInt_Config+0x71c>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d106      	bne.n	800a142 <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 800a134:	4b4a      	ldr	r3, [pc, #296]	; (800a260 <extInt_Config+0x710>)
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	4a49      	ldr	r2, [pc, #292]	; (800a260 <extInt_Config+0x710>)
 800a13a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a13e:	60d3      	str	r3, [r2, #12]
		break;
 800a140:	e2f7      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	4a49      	ldr	r2, [pc, #292]	; (800a270 <extInt_Config+0x720>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d106      	bne.n	800a15c <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 800a14e:	4b44      	ldr	r3, [pc, #272]	; (800a260 <extInt_Config+0x710>)
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	4a43      	ldr	r2, [pc, #268]	; (800a260 <extInt_Config+0x710>)
 800a154:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a158:	60d3      	str	r3, [r2, #12]
		break;
 800a15a:	e2ea      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	4a44      	ldr	r2, [pc, #272]	; (800a274 <extInt_Config+0x724>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d106      	bne.n	800a176 <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 800a168:	4b3d      	ldr	r3, [pc, #244]	; (800a260 <extInt_Config+0x710>)
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	4a3c      	ldr	r2, [pc, #240]	; (800a260 <extInt_Config+0x710>)
 800a16e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a172:	60d3      	str	r3, [r2, #12]
		break;
 800a174:	e2dd      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	4a3e      	ldr	r2, [pc, #248]	; (800a278 <extInt_Config+0x728>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d106      	bne.n	800a190 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800a182:	4b37      	ldr	r3, [pc, #220]	; (800a260 <extInt_Config+0x710>)
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	4a36      	ldr	r2, [pc, #216]	; (800a260 <extInt_Config+0x710>)
 800a188:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a18c:	60d3      	str	r3, [r2, #12]
		break;
 800a18e:	e2d0      	b.n	800a732 <extInt_Config+0xbe2>
			__NOP();
 800a190:	bf00      	nop
		break;
 800a192:	e2ce      	b.n	800a732 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 800a194:	4b32      	ldr	r3, [pc, #200]	; (800a260 <extInt_Config+0x710>)
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	4a31      	ldr	r2, [pc, #196]	; (800a260 <extInt_Config+0x710>)
 800a19a:	f023 030f 	bic.w	r3, r3, #15
 800a19e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	4a2f      	ldr	r2, [pc, #188]	; (800a264 <extInt_Config+0x714>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d104      	bne.n	800a1b6 <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 800a1ac:	4b2c      	ldr	r3, [pc, #176]	; (800a260 <extInt_Config+0x710>)
 800a1ae:	4a2c      	ldr	r2, [pc, #176]	; (800a260 <extInt_Config+0x710>)
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800a1b4:	e2bd      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	4a2a      	ldr	r2, [pc, #168]	; (800a268 <extInt_Config+0x718>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d106      	bne.n	800a1d0 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800a1c2:	4b27      	ldr	r3, [pc, #156]	; (800a260 <extInt_Config+0x710>)
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	4a26      	ldr	r2, [pc, #152]	; (800a260 <extInt_Config+0x710>)
 800a1c8:	f043 0301 	orr.w	r3, r3, #1
 800a1cc:	6113      	str	r3, [r2, #16]
		break;
 800a1ce:	e2b0      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	4a25      	ldr	r2, [pc, #148]	; (800a26c <extInt_Config+0x71c>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d106      	bne.n	800a1ea <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 800a1dc:	4b20      	ldr	r3, [pc, #128]	; (800a260 <extInt_Config+0x710>)
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	4a1f      	ldr	r2, [pc, #124]	; (800a260 <extInt_Config+0x710>)
 800a1e2:	f043 0302 	orr.w	r3, r3, #2
 800a1e6:	6113      	str	r3, [r2, #16]
		break;
 800a1e8:	e2a3      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	4a1f      	ldr	r2, [pc, #124]	; (800a270 <extInt_Config+0x720>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d106      	bne.n	800a204 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 800a1f6:	4b1a      	ldr	r3, [pc, #104]	; (800a260 <extInt_Config+0x710>)
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	4a19      	ldr	r2, [pc, #100]	; (800a260 <extInt_Config+0x710>)
 800a1fc:	f043 0303 	orr.w	r3, r3, #3
 800a200:	6113      	str	r3, [r2, #16]
		break;
 800a202:	e296      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	4a1a      	ldr	r2, [pc, #104]	; (800a274 <extInt_Config+0x724>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d106      	bne.n	800a21e <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 800a210:	4b13      	ldr	r3, [pc, #76]	; (800a260 <extInt_Config+0x710>)
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	4a12      	ldr	r2, [pc, #72]	; (800a260 <extInt_Config+0x710>)
 800a216:	f043 0304 	orr.w	r3, r3, #4
 800a21a:	6113      	str	r3, [r2, #16]
		break;
 800a21c:	e289      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	4a14      	ldr	r2, [pc, #80]	; (800a278 <extInt_Config+0x728>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d106      	bne.n	800a238 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 800a22a:	4b0d      	ldr	r3, [pc, #52]	; (800a260 <extInt_Config+0x710>)
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	4a0c      	ldr	r2, [pc, #48]	; (800a260 <extInt_Config+0x710>)
 800a230:	f043 0307 	orr.w	r3, r3, #7
 800a234:	6113      	str	r3, [r2, #16]
		break;
 800a236:	e27c      	b.n	800a732 <extInt_Config+0xbe2>
			__NOP();
 800a238:	bf00      	nop
		break;
 800a23a:	e27a      	b.n	800a732 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 800a23c:	4b08      	ldr	r3, [pc, #32]	; (800a260 <extInt_Config+0x710>)
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	4a07      	ldr	r2, [pc, #28]	; (800a260 <extInt_Config+0x710>)
 800a242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a246:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	4a05      	ldr	r2, [pc, #20]	; (800a264 <extInt_Config+0x714>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d113      	bne.n	800a27c <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 800a254:	4b02      	ldr	r3, [pc, #8]	; (800a260 <extInt_Config+0x710>)
 800a256:	4a02      	ldr	r2, [pc, #8]	; (800a260 <extInt_Config+0x710>)
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800a25c:	e269      	b.n	800a732 <extInt_Config+0xbe2>
 800a25e:	bf00      	nop
 800a260:	40013800 	.word	0x40013800
 800a264:	40020000 	.word	0x40020000
 800a268:	40020400 	.word	0x40020400
 800a26c:	40020800 	.word	0x40020800
 800a270:	40020c00 	.word	0x40020c00
 800a274:	40021000 	.word	0x40021000
 800a278:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	4a83      	ldr	r2, [pc, #524]	; (800a490 <extInt_Config+0x940>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d106      	bne.n	800a296 <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 800a288:	4b82      	ldr	r3, [pc, #520]	; (800a494 <extInt_Config+0x944>)
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	4a81      	ldr	r2, [pc, #516]	; (800a494 <extInt_Config+0x944>)
 800a28e:	f043 0310 	orr.w	r3, r3, #16
 800a292:	6113      	str	r3, [r2, #16]
		break;
 800a294:	e24d      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	4a7e      	ldr	r2, [pc, #504]	; (800a498 <extInt_Config+0x948>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d106      	bne.n	800a2b0 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800a2a2:	4b7c      	ldr	r3, [pc, #496]	; (800a494 <extInt_Config+0x944>)
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	4a7b      	ldr	r2, [pc, #492]	; (800a494 <extInt_Config+0x944>)
 800a2a8:	f043 0320 	orr.w	r3, r3, #32
 800a2ac:	6113      	str	r3, [r2, #16]
		break;
 800a2ae:	e240      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	4a79      	ldr	r2, [pc, #484]	; (800a49c <extInt_Config+0x94c>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d106      	bne.n	800a2ca <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 800a2bc:	4b75      	ldr	r3, [pc, #468]	; (800a494 <extInt_Config+0x944>)
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	4a74      	ldr	r2, [pc, #464]	; (800a494 <extInt_Config+0x944>)
 800a2c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a2c6:	6113      	str	r3, [r2, #16]
		break;
 800a2c8:	e233      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	4a73      	ldr	r2, [pc, #460]	; (800a4a0 <extInt_Config+0x950>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d106      	bne.n	800a2e4 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800a2d6:	4b6f      	ldr	r3, [pc, #444]	; (800a494 <extInt_Config+0x944>)
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	4a6e      	ldr	r2, [pc, #440]	; (800a494 <extInt_Config+0x944>)
 800a2dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2e0:	6113      	str	r3, [r2, #16]
		break;
 800a2e2:	e226      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	4a6e      	ldr	r2, [pc, #440]	; (800a4a4 <extInt_Config+0x954>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d106      	bne.n	800a2fe <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 800a2f0:	4b68      	ldr	r3, [pc, #416]	; (800a494 <extInt_Config+0x944>)
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	4a67      	ldr	r2, [pc, #412]	; (800a494 <extInt_Config+0x944>)
 800a2f6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800a2fa:	6113      	str	r3, [r2, #16]
		break;
 800a2fc:	e219      	b.n	800a732 <extInt_Config+0xbe2>
			__NOP();
 800a2fe:	bf00      	nop
		break;
 800a300:	e217      	b.n	800a732 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 800a302:	4b64      	ldr	r3, [pc, #400]	; (800a494 <extInt_Config+0x944>)
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	4a63      	ldr	r2, [pc, #396]	; (800a494 <extInt_Config+0x944>)
 800a308:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a30c:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	4a64      	ldr	r2, [pc, #400]	; (800a4a8 <extInt_Config+0x958>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d104      	bne.n	800a324 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 800a31a:	4b5e      	ldr	r3, [pc, #376]	; (800a494 <extInt_Config+0x944>)
 800a31c:	4a5d      	ldr	r2, [pc, #372]	; (800a494 <extInt_Config+0x944>)
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800a322:	e206      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	4a59      	ldr	r2, [pc, #356]	; (800a490 <extInt_Config+0x940>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d106      	bne.n	800a33e <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 800a330:	4b58      	ldr	r3, [pc, #352]	; (800a494 <extInt_Config+0x944>)
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	4a57      	ldr	r2, [pc, #348]	; (800a494 <extInt_Config+0x944>)
 800a336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a33a:	6113      	str	r3, [r2, #16]
		break;
 800a33c:	e1f9      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	4a54      	ldr	r2, [pc, #336]	; (800a498 <extInt_Config+0x948>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d106      	bne.n	800a358 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 800a34a:	4b52      	ldr	r3, [pc, #328]	; (800a494 <extInt_Config+0x944>)
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	4a51      	ldr	r2, [pc, #324]	; (800a494 <extInt_Config+0x944>)
 800a350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a354:	6113      	str	r3, [r2, #16]
		break;
 800a356:	e1ec      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	4a4f      	ldr	r2, [pc, #316]	; (800a49c <extInt_Config+0x94c>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d106      	bne.n	800a372 <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800a364:	4b4b      	ldr	r3, [pc, #300]	; (800a494 <extInt_Config+0x944>)
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	4a4a      	ldr	r2, [pc, #296]	; (800a494 <extInt_Config+0x944>)
 800a36a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a36e:	6113      	str	r3, [r2, #16]
		break;
 800a370:	e1df      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	4a49      	ldr	r2, [pc, #292]	; (800a4a0 <extInt_Config+0x950>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d106      	bne.n	800a38c <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 800a37e:	4b45      	ldr	r3, [pc, #276]	; (800a494 <extInt_Config+0x944>)
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	4a44      	ldr	r2, [pc, #272]	; (800a494 <extInt_Config+0x944>)
 800a384:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a388:	6113      	str	r3, [r2, #16]
		break;
 800a38a:	e1d2      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	4a44      	ldr	r2, [pc, #272]	; (800a4a4 <extInt_Config+0x954>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d106      	bne.n	800a3a6 <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 800a398:	4b3e      	ldr	r3, [pc, #248]	; (800a494 <extInt_Config+0x944>)
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	4a3d      	ldr	r2, [pc, #244]	; (800a494 <extInt_Config+0x944>)
 800a39e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a3a2:	6113      	str	r3, [r2, #16]
		break;
 800a3a4:	e1c5      	b.n	800a732 <extInt_Config+0xbe2>
			__NOP();
 800a3a6:	bf00      	nop
		break;
 800a3a8:	e1c3      	b.n	800a732 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 800a3aa:	4b3a      	ldr	r3, [pc, #232]	; (800a494 <extInt_Config+0x944>)
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	4a39      	ldr	r2, [pc, #228]	; (800a494 <extInt_Config+0x944>)
 800a3b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3b4:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	4a3a      	ldr	r2, [pc, #232]	; (800a4a8 <extInt_Config+0x958>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d104      	bne.n	800a3cc <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800a3c2:	4b34      	ldr	r3, [pc, #208]	; (800a494 <extInt_Config+0x944>)
 800a3c4:	4a33      	ldr	r2, [pc, #204]	; (800a494 <extInt_Config+0x944>)
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800a3ca:	e1b2      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	4a2f      	ldr	r2, [pc, #188]	; (800a490 <extInt_Config+0x940>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d106      	bne.n	800a3e6 <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 800a3d8:	4b2e      	ldr	r3, [pc, #184]	; (800a494 <extInt_Config+0x944>)
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	4a2d      	ldr	r2, [pc, #180]	; (800a494 <extInt_Config+0x944>)
 800a3de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3e2:	6113      	str	r3, [r2, #16]
		break;
 800a3e4:	e1a5      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	4a2a      	ldr	r2, [pc, #168]	; (800a498 <extInt_Config+0x948>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d106      	bne.n	800a400 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 800a3f2:	4b28      	ldr	r3, [pc, #160]	; (800a494 <extInt_Config+0x944>)
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	4a27      	ldr	r2, [pc, #156]	; (800a494 <extInt_Config+0x944>)
 800a3f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a3fc:	6113      	str	r3, [r2, #16]
		break;
 800a3fe:	e198      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	4a25      	ldr	r2, [pc, #148]	; (800a49c <extInt_Config+0x94c>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d106      	bne.n	800a41a <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 800a40c:	4b21      	ldr	r3, [pc, #132]	; (800a494 <extInt_Config+0x944>)
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	4a20      	ldr	r2, [pc, #128]	; (800a494 <extInt_Config+0x944>)
 800a412:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a416:	6113      	str	r3, [r2, #16]
		break;
 800a418:	e18b      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	4a1f      	ldr	r2, [pc, #124]	; (800a4a0 <extInt_Config+0x950>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d106      	bne.n	800a434 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800a426:	4b1b      	ldr	r3, [pc, #108]	; (800a494 <extInt_Config+0x944>)
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	4a1a      	ldr	r2, [pc, #104]	; (800a494 <extInt_Config+0x944>)
 800a42c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a430:	6113      	str	r3, [r2, #16]
		break;
 800a432:	e17e      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	4a1a      	ldr	r2, [pc, #104]	; (800a4a4 <extInt_Config+0x954>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d106      	bne.n	800a44e <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 800a440:	4b14      	ldr	r3, [pc, #80]	; (800a494 <extInt_Config+0x944>)
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	4a13      	ldr	r2, [pc, #76]	; (800a494 <extInt_Config+0x944>)
 800a446:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a44a:	6113      	str	r3, [r2, #16]
		break;
 800a44c:	e171      	b.n	800a732 <extInt_Config+0xbe2>
			__NOP();
 800a44e:	bf00      	nop
		break;
 800a450:	e16f      	b.n	800a732 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 800a452:	4b10      	ldr	r3, [pc, #64]	; (800a494 <extInt_Config+0x944>)
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	4a0f      	ldr	r2, [pc, #60]	; (800a494 <extInt_Config+0x944>)
 800a458:	f023 030f 	bic.w	r3, r3, #15
 800a45c:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	4a10      	ldr	r2, [pc, #64]	; (800a4a8 <extInt_Config+0x958>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d104      	bne.n	800a474 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 800a46a:	4b0a      	ldr	r3, [pc, #40]	; (800a494 <extInt_Config+0x944>)
 800a46c:	4a09      	ldr	r2, [pc, #36]	; (800a494 <extInt_Config+0x944>)
 800a46e:	695b      	ldr	r3, [r3, #20]
 800a470:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800a472:	e15e      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	4a05      	ldr	r2, [pc, #20]	; (800a490 <extInt_Config+0x940>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d115      	bne.n	800a4ac <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 800a480:	4b04      	ldr	r3, [pc, #16]	; (800a494 <extInt_Config+0x944>)
 800a482:	695b      	ldr	r3, [r3, #20]
 800a484:	4a03      	ldr	r2, [pc, #12]	; (800a494 <extInt_Config+0x944>)
 800a486:	f043 0301 	orr.w	r3, r3, #1
 800a48a:	6153      	str	r3, [r2, #20]
		break;
 800a48c:	e151      	b.n	800a732 <extInt_Config+0xbe2>
 800a48e:	bf00      	nop
 800a490:	40020400 	.word	0x40020400
 800a494:	40013800 	.word	0x40013800
 800a498:	40020800 	.word	0x40020800
 800a49c:	40020c00 	.word	0x40020c00
 800a4a0:	40021000 	.word	0x40021000
 800a4a4:	40021c00 	.word	0x40021c00
 800a4a8:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	4a83      	ldr	r2, [pc, #524]	; (800a6c0 <extInt_Config+0xb70>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d106      	bne.n	800a4c6 <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 800a4b8:	4b82      	ldr	r3, [pc, #520]	; (800a6c4 <extInt_Config+0xb74>)
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	4a81      	ldr	r2, [pc, #516]	; (800a6c4 <extInt_Config+0xb74>)
 800a4be:	f043 0302 	orr.w	r3, r3, #2
 800a4c2:	6153      	str	r3, [r2, #20]
		break;
 800a4c4:	e135      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	4a7e      	ldr	r2, [pc, #504]	; (800a6c8 <extInt_Config+0xb78>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d106      	bne.n	800a4e0 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800a4d2:	4b7c      	ldr	r3, [pc, #496]	; (800a6c4 <extInt_Config+0xb74>)
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	4a7b      	ldr	r2, [pc, #492]	; (800a6c4 <extInt_Config+0xb74>)
 800a4d8:	f043 0303 	orr.w	r3, r3, #3
 800a4dc:	6153      	str	r3, [r2, #20]
		break;
 800a4de:	e128      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	4a79      	ldr	r2, [pc, #484]	; (800a6cc <extInt_Config+0xb7c>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d106      	bne.n	800a4fa <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 800a4ec:	4b75      	ldr	r3, [pc, #468]	; (800a6c4 <extInt_Config+0xb74>)
 800a4ee:	695b      	ldr	r3, [r3, #20]
 800a4f0:	4a74      	ldr	r2, [pc, #464]	; (800a6c4 <extInt_Config+0xb74>)
 800a4f2:	f043 0304 	orr.w	r3, r3, #4
 800a4f6:	6153      	str	r3, [r2, #20]
		break;
 800a4f8:	e11b      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	4a73      	ldr	r2, [pc, #460]	; (800a6d0 <extInt_Config+0xb80>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d106      	bne.n	800a514 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 800a506:	4b6f      	ldr	r3, [pc, #444]	; (800a6c4 <extInt_Config+0xb74>)
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	4a6e      	ldr	r2, [pc, #440]	; (800a6c4 <extInt_Config+0xb74>)
 800a50c:	f043 0307 	orr.w	r3, r3, #7
 800a510:	6153      	str	r3, [r2, #20]
		break;
 800a512:	e10e      	b.n	800a732 <extInt_Config+0xbe2>
			__NOP();
 800a514:	bf00      	nop
		break;
 800a516:	e10c      	b.n	800a732 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 800a518:	4b6a      	ldr	r3, [pc, #424]	; (800a6c4 <extInt_Config+0xb74>)
 800a51a:	695b      	ldr	r3, [r3, #20]
 800a51c:	4a69      	ldr	r2, [pc, #420]	; (800a6c4 <extInt_Config+0xb74>)
 800a51e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a522:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	4a6a      	ldr	r2, [pc, #424]	; (800a6d4 <extInt_Config+0xb84>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d104      	bne.n	800a53a <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 800a530:	4b64      	ldr	r3, [pc, #400]	; (800a6c4 <extInt_Config+0xb74>)
 800a532:	4a64      	ldr	r2, [pc, #400]	; (800a6c4 <extInt_Config+0xb74>)
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800a538:	e0fb      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	4a65      	ldr	r2, [pc, #404]	; (800a6d8 <extInt_Config+0xb88>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d106      	bne.n	800a554 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800a546:	4b5f      	ldr	r3, [pc, #380]	; (800a6c4 <extInt_Config+0xb74>)
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	4a5e      	ldr	r2, [pc, #376]	; (800a6c4 <extInt_Config+0xb74>)
 800a54c:	f043 0310 	orr.w	r3, r3, #16
 800a550:	6153      	str	r3, [r2, #20]
		break;
 800a552:	e0ee      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	4a59      	ldr	r2, [pc, #356]	; (800a6c0 <extInt_Config+0xb70>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d106      	bne.n	800a56e <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 800a560:	4b58      	ldr	r3, [pc, #352]	; (800a6c4 <extInt_Config+0xb74>)
 800a562:	695b      	ldr	r3, [r3, #20]
 800a564:	4a57      	ldr	r2, [pc, #348]	; (800a6c4 <extInt_Config+0xb74>)
 800a566:	f043 0320 	orr.w	r3, r3, #32
 800a56a:	6153      	str	r3, [r2, #20]
		break;
 800a56c:	e0e1      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	4a54      	ldr	r2, [pc, #336]	; (800a6c8 <extInt_Config+0xb78>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d106      	bne.n	800a588 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800a57a:	4b52      	ldr	r3, [pc, #328]	; (800a6c4 <extInt_Config+0xb74>)
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	4a51      	ldr	r2, [pc, #324]	; (800a6c4 <extInt_Config+0xb74>)
 800a580:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a584:	6153      	str	r3, [r2, #20]
		break;
 800a586:	e0d4      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	4a4f      	ldr	r2, [pc, #316]	; (800a6cc <extInt_Config+0xb7c>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d106      	bne.n	800a5a2 <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800a594:	4b4b      	ldr	r3, [pc, #300]	; (800a6c4 <extInt_Config+0xb74>)
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	4a4a      	ldr	r2, [pc, #296]	; (800a6c4 <extInt_Config+0xb74>)
 800a59a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a59e:	6153      	str	r3, [r2, #20]
		break;
 800a5a0:	e0c7      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	4a49      	ldr	r2, [pc, #292]	; (800a6d0 <extInt_Config+0xb80>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d106      	bne.n	800a5bc <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800a5ae:	4b45      	ldr	r3, [pc, #276]	; (800a6c4 <extInt_Config+0xb74>)
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	4a44      	ldr	r2, [pc, #272]	; (800a6c4 <extInt_Config+0xb74>)
 800a5b4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800a5b8:	6153      	str	r3, [r2, #20]
		break;
 800a5ba:	e0ba      	b.n	800a732 <extInt_Config+0xbe2>
			__NOP();
 800a5bc:	bf00      	nop
		break;
 800a5be:	e0b8      	b.n	800a732 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 800a5c0:	4b40      	ldr	r3, [pc, #256]	; (800a6c4 <extInt_Config+0xb74>)
 800a5c2:	695b      	ldr	r3, [r3, #20]
 800a5c4:	4a3f      	ldr	r2, [pc, #252]	; (800a6c4 <extInt_Config+0xb74>)
 800a5c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a5ca:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	4a40      	ldr	r2, [pc, #256]	; (800a6d4 <extInt_Config+0xb84>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d104      	bne.n	800a5e2 <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 800a5d8:	4b3a      	ldr	r3, [pc, #232]	; (800a6c4 <extInt_Config+0xb74>)
 800a5da:	4a3a      	ldr	r2, [pc, #232]	; (800a6c4 <extInt_Config+0xb74>)
 800a5dc:	695b      	ldr	r3, [r3, #20]
 800a5de:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800a5e0:	e0a7      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	4a3b      	ldr	r2, [pc, #236]	; (800a6d8 <extInt_Config+0xb88>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d106      	bne.n	800a5fc <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 800a5ee:	4b35      	ldr	r3, [pc, #212]	; (800a6c4 <extInt_Config+0xb74>)
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	4a34      	ldr	r2, [pc, #208]	; (800a6c4 <extInt_Config+0xb74>)
 800a5f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5f8:	6153      	str	r3, [r2, #20]
		break;
 800a5fa:	e09a      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	4a2f      	ldr	r2, [pc, #188]	; (800a6c0 <extInt_Config+0xb70>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d106      	bne.n	800a616 <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 800a608:	4b2e      	ldr	r3, [pc, #184]	; (800a6c4 <extInt_Config+0xb74>)
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	4a2d      	ldr	r2, [pc, #180]	; (800a6c4 <extInt_Config+0xb74>)
 800a60e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a612:	6153      	str	r3, [r2, #20]
		break;
 800a614:	e08d      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	4a2a      	ldr	r2, [pc, #168]	; (800a6c8 <extInt_Config+0xb78>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d106      	bne.n	800a630 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 800a622:	4b28      	ldr	r3, [pc, #160]	; (800a6c4 <extInt_Config+0xb74>)
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	4a27      	ldr	r2, [pc, #156]	; (800a6c4 <extInt_Config+0xb74>)
 800a628:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a62c:	6153      	str	r3, [r2, #20]
		break;
 800a62e:	e080      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	4a25      	ldr	r2, [pc, #148]	; (800a6cc <extInt_Config+0xb7c>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d106      	bne.n	800a64a <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 800a63c:	4b21      	ldr	r3, [pc, #132]	; (800a6c4 <extInt_Config+0xb74>)
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	4a20      	ldr	r2, [pc, #128]	; (800a6c4 <extInt_Config+0xb74>)
 800a642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a646:	6153      	str	r3, [r2, #20]
		break;
 800a648:	e073      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	4a1f      	ldr	r2, [pc, #124]	; (800a6d0 <extInt_Config+0xb80>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d106      	bne.n	800a664 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 800a656:	4b1b      	ldr	r3, [pc, #108]	; (800a6c4 <extInt_Config+0xb74>)
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	4a1a      	ldr	r2, [pc, #104]	; (800a6c4 <extInt_Config+0xb74>)
 800a65c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a660:	6153      	str	r3, [r2, #20]
		break;
 800a662:	e066      	b.n	800a732 <extInt_Config+0xbe2>
			__NOP();
 800a664:	bf00      	nop
		break;
 800a666:	e064      	b.n	800a732 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 800a668:	4b16      	ldr	r3, [pc, #88]	; (800a6c4 <extInt_Config+0xb74>)
 800a66a:	695b      	ldr	r3, [r3, #20]
 800a66c:	4a15      	ldr	r2, [pc, #84]	; (800a6c4 <extInt_Config+0xb74>)
 800a66e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a672:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	4a16      	ldr	r2, [pc, #88]	; (800a6d4 <extInt_Config+0xb84>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d104      	bne.n	800a68a <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 800a680:	4b10      	ldr	r3, [pc, #64]	; (800a6c4 <extInt_Config+0xb74>)
 800a682:	4a10      	ldr	r2, [pc, #64]	; (800a6c4 <extInt_Config+0xb74>)
 800a684:	695b      	ldr	r3, [r3, #20]
 800a686:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800a688:	e053      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	4a11      	ldr	r2, [pc, #68]	; (800a6d8 <extInt_Config+0xb88>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d106      	bne.n	800a6a4 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800a696:	4b0b      	ldr	r3, [pc, #44]	; (800a6c4 <extInt_Config+0xb74>)
 800a698:	695b      	ldr	r3, [r3, #20]
 800a69a:	4a0a      	ldr	r2, [pc, #40]	; (800a6c4 <extInt_Config+0xb74>)
 800a69c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a6a0:	6153      	str	r3, [r2, #20]
		break;
 800a6a2:	e046      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	4a05      	ldr	r2, [pc, #20]	; (800a6c0 <extInt_Config+0xb70>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d115      	bne.n	800a6dc <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 800a6b0:	4b04      	ldr	r3, [pc, #16]	; (800a6c4 <extInt_Config+0xb74>)
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	4a03      	ldr	r2, [pc, #12]	; (800a6c4 <extInt_Config+0xb74>)
 800a6b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a6ba:	6153      	str	r3, [r2, #20]
		break;
 800a6bc:	e039      	b.n	800a732 <extInt_Config+0xbe2>
 800a6be:	bf00      	nop
 800a6c0:	40020800 	.word	0x40020800
 800a6c4:	40013800 	.word	0x40013800
 800a6c8:	40020c00 	.word	0x40020c00
 800a6cc:	40021000 	.word	0x40021000
 800a6d0:	40021c00 	.word	0x40021c00
 800a6d4:	40020000 	.word	0x40020000
 800a6d8:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	4a9d      	ldr	r2, [pc, #628]	; (800a958 <extInt_Config+0xe08>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d106      	bne.n	800a6f6 <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 800a6e8:	4b9c      	ldr	r3, [pc, #624]	; (800a95c <extInt_Config+0xe0c>)
 800a6ea:	695b      	ldr	r3, [r3, #20]
 800a6ec:	4a9b      	ldr	r2, [pc, #620]	; (800a95c <extInt_Config+0xe0c>)
 800a6ee:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a6f2:	6153      	str	r3, [r2, #20]
		break;
 800a6f4:	e01d      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	4a98      	ldr	r2, [pc, #608]	; (800a960 <extInt_Config+0xe10>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d106      	bne.n	800a710 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 800a702:	4b96      	ldr	r3, [pc, #600]	; (800a95c <extInt_Config+0xe0c>)
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	4a95      	ldr	r2, [pc, #596]	; (800a95c <extInt_Config+0xe0c>)
 800a708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a70c:	6153      	str	r3, [r2, #20]
		break;
 800a70e:	e010      	b.n	800a732 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	4a93      	ldr	r2, [pc, #588]	; (800a964 <extInt_Config+0xe14>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d106      	bne.n	800a72a <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 800a71c:	4b8f      	ldr	r3, [pc, #572]	; (800a95c <extInt_Config+0xe0c>)
 800a71e:	695b      	ldr	r3, [r3, #20]
 800a720:	4a8e      	ldr	r2, [pc, #568]	; (800a95c <extInt_Config+0xe0c>)
 800a722:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a726:	6153      	str	r3, [r2, #20]
		break;
 800a728:	e003      	b.n	800a732 <extInt_Config+0xbe2>
			__NOP();
 800a72a:	bf00      	nop
		break;
 800a72c:	e001      	b.n	800a732 <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 800a72e:	bf00      	nop
		break;
 800a730:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	791b      	ldrb	r3, [r3, #4]
 800a736:	2b01      	cmp	r3, #1
 800a738:	d126      	bne.n	800a788 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a73a:	4b8b      	ldr	r3, [pc, #556]	; (800a968 <extInt_Config+0xe18>)
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	6812      	ldr	r2, [r2, #0]
 800a742:	7812      	ldrb	r2, [r2, #0]
 800a744:	4611      	mov	r1, r2
 800a746:	2201      	movs	r2, #1
 800a748:	408a      	lsls	r2, r1
 800a74a:	43d2      	mvns	r2, r2
 800a74c:	4611      	mov	r1, r2
 800a74e:	4a86      	ldr	r2, [pc, #536]	; (800a968 <extInt_Config+0xe18>)
 800a750:	400b      	ands	r3, r1
 800a752:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a754:	4b84      	ldr	r3, [pc, #528]	; (800a968 <extInt_Config+0xe18>)
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	6812      	ldr	r2, [r2, #0]
 800a75c:	7812      	ldrb	r2, [r2, #0]
 800a75e:	4611      	mov	r1, r2
 800a760:	2201      	movs	r2, #1
 800a762:	408a      	lsls	r2, r1
 800a764:	43d2      	mvns	r2, r2
 800a766:	4611      	mov	r1, r2
 800a768:	4a7f      	ldr	r2, [pc, #508]	; (800a968 <extInt_Config+0xe18>)
 800a76a:	400b      	ands	r3, r1
 800a76c:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a76e:	4b7e      	ldr	r3, [pc, #504]	; (800a968 <extInt_Config+0xe18>)
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	6812      	ldr	r2, [r2, #0]
 800a776:	7812      	ldrb	r2, [r2, #0]
 800a778:	4611      	mov	r1, r2
 800a77a:	2201      	movs	r2, #1
 800a77c:	408a      	lsls	r2, r1
 800a77e:	4611      	mov	r1, r2
 800a780:	4a79      	ldr	r2, [pc, #484]	; (800a968 <extInt_Config+0xe18>)
 800a782:	430b      	orrs	r3, r1
 800a784:	6093      	str	r3, [r2, #8]
 800a786:	e05c      	b.n	800a842 <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	791b      	ldrb	r3, [r3, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d126      	bne.n	800a7de <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a790:	4b75      	ldr	r3, [pc, #468]	; (800a968 <extInt_Config+0xe18>)
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	7812      	ldrb	r2, [r2, #0]
 800a79a:	4611      	mov	r1, r2
 800a79c:	2201      	movs	r2, #1
 800a79e:	408a      	lsls	r2, r1
 800a7a0:	43d2      	mvns	r2, r2
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4a70      	ldr	r2, [pc, #448]	; (800a968 <extInt_Config+0xe18>)
 800a7a6:	400b      	ands	r3, r1
 800a7a8:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a7aa:	4b6f      	ldr	r3, [pc, #444]	; (800a968 <extInt_Config+0xe18>)
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	6812      	ldr	r2, [r2, #0]
 800a7b2:	7812      	ldrb	r2, [r2, #0]
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	408a      	lsls	r2, r1
 800a7ba:	43d2      	mvns	r2, r2
 800a7bc:	4611      	mov	r1, r2
 800a7be:	4a6a      	ldr	r2, [pc, #424]	; (800a968 <extInt_Config+0xe18>)
 800a7c0:	400b      	ands	r3, r1
 800a7c2:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a7c4:	4b68      	ldr	r3, [pc, #416]	; (800a968 <extInt_Config+0xe18>)
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	6812      	ldr	r2, [r2, #0]
 800a7cc:	7812      	ldrb	r2, [r2, #0]
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	408a      	lsls	r2, r1
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	4a64      	ldr	r2, [pc, #400]	; (800a968 <extInt_Config+0xe18>)
 800a7d8:	430b      	orrs	r3, r1
 800a7da:	60d3      	str	r3, [r2, #12]
 800a7dc:	e031      	b.n	800a842 <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a7de:	4b62      	ldr	r3, [pc, #392]	; (800a968 <extInt_Config+0xe18>)
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	6812      	ldr	r2, [r2, #0]
 800a7e6:	7812      	ldrb	r2, [r2, #0]
 800a7e8:	4611      	mov	r1, r2
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	408a      	lsls	r2, r1
 800a7ee:	43d2      	mvns	r2, r2
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	4a5d      	ldr	r2, [pc, #372]	; (800a968 <extInt_Config+0xe18>)
 800a7f4:	400b      	ands	r3, r1
 800a7f6:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a7f8:	4b5b      	ldr	r3, [pc, #364]	; (800a968 <extInt_Config+0xe18>)
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	6812      	ldr	r2, [r2, #0]
 800a800:	7812      	ldrb	r2, [r2, #0]
 800a802:	4611      	mov	r1, r2
 800a804:	2201      	movs	r2, #1
 800a806:	408a      	lsls	r2, r1
 800a808:	43d2      	mvns	r2, r2
 800a80a:	4611      	mov	r1, r2
 800a80c:	4a56      	ldr	r2, [pc, #344]	; (800a968 <extInt_Config+0xe18>)
 800a80e:	400b      	ands	r3, r1
 800a810:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a812:	4b55      	ldr	r3, [pc, #340]	; (800a968 <extInt_Config+0xe18>)
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	6812      	ldr	r2, [r2, #0]
 800a81a:	7812      	ldrb	r2, [r2, #0]
 800a81c:	4611      	mov	r1, r2
 800a81e:	2201      	movs	r2, #1
 800a820:	408a      	lsls	r2, r1
 800a822:	4611      	mov	r1, r2
 800a824:	4a50      	ldr	r2, [pc, #320]	; (800a968 <extInt_Config+0xe18>)
 800a826:	430b      	orrs	r3, r1
 800a828:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a82a:	4b4f      	ldr	r3, [pc, #316]	; (800a968 <extInt_Config+0xe18>)
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	6812      	ldr	r2, [r2, #0]
 800a832:	7812      	ldrb	r2, [r2, #0]
 800a834:	4611      	mov	r1, r2
 800a836:	2201      	movs	r2, #1
 800a838:	408a      	lsls	r2, r1
 800a83a:	4611      	mov	r1, r2
 800a83c:	4a4a      	ldr	r2, [pc, #296]	; (800a968 <extInt_Config+0xe18>)
 800a83e:	430b      	orrs	r3, r1
 800a840:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a842:	4b49      	ldr	r3, [pc, #292]	; (800a968 <extInt_Config+0xe18>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	6812      	ldr	r2, [r2, #0]
 800a84a:	7812      	ldrb	r2, [r2, #0]
 800a84c:	4611      	mov	r1, r2
 800a84e:	2201      	movs	r2, #1
 800a850:	408a      	lsls	r2, r1
 800a852:	43d2      	mvns	r2, r2
 800a854:	4611      	mov	r1, r2
 800a856:	4a44      	ldr	r2, [pc, #272]	; (800a968 <extInt_Config+0xe18>)
 800a858:	400b      	ands	r3, r1
 800a85a:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a85c:	4b42      	ldr	r3, [pc, #264]	; (800a968 <extInt_Config+0xe18>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	6812      	ldr	r2, [r2, #0]
 800a864:	7812      	ldrb	r2, [r2, #0]
 800a866:	4611      	mov	r1, r2
 800a868:	2201      	movs	r2, #1
 800a86a:	408a      	lsls	r2, r1
 800a86c:	4611      	mov	r1, r2
 800a86e:	4a3e      	ldr	r2, [pc, #248]	; (800a968 <extInt_Config+0xe18>)
 800a870:	430b      	orrs	r3, r1
 800a872:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a874:	b672      	cpsid	i
}
 800a876:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	2b0f      	cmp	r3, #15
 800a880:	d862      	bhi.n	800a948 <extInt_Config+0xdf8>
 800a882:	a201      	add	r2, pc, #4	; (adr r2, 800a888 <extInt_Config+0xd38>)
 800a884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a888:	0800a8c9 	.word	0x0800a8c9
 800a88c:	0800a8d1 	.word	0x0800a8d1
 800a890:	0800a8d9 	.word	0x0800a8d9
 800a894:	0800a8e1 	.word	0x0800a8e1
 800a898:	0800a8e9 	.word	0x0800a8e9
 800a89c:	0800a8f1 	.word	0x0800a8f1
 800a8a0:	0800a8f9 	.word	0x0800a8f9
 800a8a4:	0800a901 	.word	0x0800a901
 800a8a8:	0800a909 	.word	0x0800a909
 800a8ac:	0800a911 	.word	0x0800a911
 800a8b0:	0800a919 	.word	0x0800a919
 800a8b4:	0800a921 	.word	0x0800a921
 800a8b8:	0800a929 	.word	0x0800a929
 800a8bc:	0800a931 	.word	0x0800a931
 800a8c0:	0800a939 	.word	0x0800a939
 800a8c4:	0800a941 	.word	0x0800a941
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 800a8c8:	2006      	movs	r0, #6
 800a8ca:	f7ff f8f9 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a8ce:	e03c      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 800a8d0:	2007      	movs	r0, #7
 800a8d2:	f7ff f8f5 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a8d6:	e038      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 800a8d8:	2008      	movs	r0, #8
 800a8da:	f7ff f8f1 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a8de:	e034      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 800a8e0:	2009      	movs	r0, #9
 800a8e2:	f7ff f8ed 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a8e6:	e030      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 800a8e8:	200a      	movs	r0, #10
 800a8ea:	f7ff f8e9 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a8ee:	e02c      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a8f0:	2017      	movs	r0, #23
 800a8f2:	f7ff f8e5 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a8f6:	e028      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a8f8:	2017      	movs	r0, #23
 800a8fa:	f7ff f8e1 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a8fe:	e024      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a900:	2017      	movs	r0, #23
 800a902:	f7ff f8dd 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a906:	e020      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a908:	2017      	movs	r0, #23
 800a90a:	f7ff f8d9 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a90e:	e01c      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a910:	2017      	movs	r0, #23
 800a912:	f7ff f8d5 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a916:	e018      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a918:	2028      	movs	r0, #40	; 0x28
 800a91a:	f7ff f8d1 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a91e:	e014      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a920:	2028      	movs	r0, #40	; 0x28
 800a922:	f7ff f8cd 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a926:	e010      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a928:	2028      	movs	r0, #40	; 0x28
 800a92a:	f7ff f8c9 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a92e:	e00c      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a930:	2028      	movs	r0, #40	; 0x28
 800a932:	f7ff f8c5 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a936:	e008      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a938:	2028      	movs	r0, #40	; 0x28
 800a93a:	f7ff f8c1 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a93e:	e004      	b.n	800a94a <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a940:	2028      	movs	r0, #40	; 0x28
 800a942:	f7ff f8bd 	bl	8009ac0 <__NVIC_EnableIRQ>
		break;
 800a946:	e000      	b.n	800a94a <extInt_Config+0xdfa>
	}

	default: {
		break;
 800a948:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800a94a:	b662      	cpsie	i
}
 800a94c:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 800a94e:	bf00      	nop
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	40020c00 	.word	0x40020c00
 800a95c:	40013800 	.word	0x40013800
 800a960:	40021000 	.word	0x40021000
 800a964:	40021c00 	.word	0x40021c00
 800a968:	40013c00 	.word	0x40013c00

0800a96c <exti_Config_Int_Priority>:


void exti_Config_Int_Priority(EXTI_Config_t *extiConfig, uint8_t newPriority)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	460b      	mov	r3, r1
 800a976:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800a978:	b672      	cpsid	i
}
 800a97a:	bf00      	nop
	//Desabilitamos las interrupciones globales
	__disable_irq();
	//Configuramos la nueva prioridad
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	2b0f      	cmp	r3, #15
 800a984:	d84c      	bhi.n	800aa20 <exti_Config_Int_Priority+0xb4>
 800a986:	a201      	add	r2, pc, #4	; (adr r2, 800a98c <exti_Config_Int_Priority+0x20>)
 800a988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98c:	0800a9cd 	.word	0x0800a9cd
 800a990:	0800a9d9 	.word	0x0800a9d9
 800a994:	0800a9e5 	.word	0x0800a9e5
 800a998:	0800a9f1 	.word	0x0800a9f1
 800a99c:	0800a9fd 	.word	0x0800a9fd
 800a9a0:	0800aa09 	.word	0x0800aa09
 800a9a4:	0800aa09 	.word	0x0800aa09
 800a9a8:	0800aa09 	.word	0x0800aa09
 800a9ac:	0800aa09 	.word	0x0800aa09
 800a9b0:	0800aa09 	.word	0x0800aa09
 800a9b4:	0800aa15 	.word	0x0800aa15
 800a9b8:	0800aa15 	.word	0x0800aa15
 800a9bc:	0800aa15 	.word	0x0800aa15
 800a9c0:	0800aa15 	.word	0x0800aa15
 800a9c4:	0800aa15 	.word	0x0800aa15
 800a9c8:	0800aa15 	.word	0x0800aa15
	{
	case 0:
	{
		NVIC_SetPriority(EXTI0_IRQn, newPriority);
 800a9cc:	78fb      	ldrb	r3, [r7, #3]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	2006      	movs	r0, #6
 800a9d2:	f7ff f893 	bl	8009afc <__NVIC_SetPriority>
		break;
 800a9d6:	e024      	b.n	800aa22 <exti_Config_Int_Priority+0xb6>
	}
	case 1:
	{
		NVIC_SetPriority(EXTI1_IRQn, newPriority);
 800a9d8:	78fb      	ldrb	r3, [r7, #3]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	2007      	movs	r0, #7
 800a9de:	f7ff f88d 	bl	8009afc <__NVIC_SetPriority>
		break;
 800a9e2:	e01e      	b.n	800aa22 <exti_Config_Int_Priority+0xb6>
	}
	case 2:
	{
		NVIC_SetPriority(EXTI2_IRQn, newPriority);
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	2008      	movs	r0, #8
 800a9ea:	f7ff f887 	bl	8009afc <__NVIC_SetPriority>
		break;
 800a9ee:	e018      	b.n	800aa22 <exti_Config_Int_Priority+0xb6>
	}
	case 3:
	{
		NVIC_SetPriority(EXTI3_IRQn, newPriority);
 800a9f0:	78fb      	ldrb	r3, [r7, #3]
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	2009      	movs	r0, #9
 800a9f6:	f7ff f881 	bl	8009afc <__NVIC_SetPriority>
		break;
 800a9fa:	e012      	b.n	800aa22 <exti_Config_Int_Priority+0xb6>
	}
	case 4:
	{
		NVIC_SetPriority(EXTI4_IRQn, newPriority);
 800a9fc:	78fb      	ldrb	r3, [r7, #3]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	200a      	movs	r0, #10
 800aa02:	f7ff f87b 	bl	8009afc <__NVIC_SetPriority>
		break;
 800aa06:	e00c      	b.n	800aa22 <exti_Config_Int_Priority+0xb6>
	case 6:
	case 7:
	case 8:
	case 9:
	{
		NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800aa08:	78fb      	ldrb	r3, [r7, #3]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	2017      	movs	r0, #23
 800aa0e:	f7ff f875 	bl	8009afc <__NVIC_SetPriority>
		break;
 800aa12:	e006      	b.n	800aa22 <exti_Config_Int_Priority+0xb6>
	case 12:
	case 13:
	case 14:
	case 15:
	{
		NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800aa14:	78fb      	ldrb	r3, [r7, #3]
 800aa16:	4619      	mov	r1, r3
 800aa18:	2028      	movs	r0, #40	; 0x28
 800aa1a:	f7ff f86f 	bl	8009afc <__NVIC_SetPriority>
		break;
 800aa1e:	e000      	b.n	800aa22 <exti_Config_Int_Priority+0xb6>
	}
	default:{  break;  }
 800aa20:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800aa22:	b662      	cpsie	i
}
 800aa24:	bf00      	nop
	}
	//Activamos las interrupciones globales
	__enable_irq();
}
 800aa26:	bf00      	nop
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop

0800aa30 <callback_extInt0>:


//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 800aa30:	b480      	push	{r7}
 800aa32:	af00      	add	r7, sp, #0
	__NOP();
 800aa34:	bf00      	nop
}
 800aa36:	bf00      	nop
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <callback_extInt1>:

__attribute__ ((weak)) void callback_extInt1(void){
 800aa40:	b480      	push	{r7}
 800aa42:	af00      	add	r7, sp, #0
	__NOP();
 800aa44:	bf00      	nop
}
 800aa46:	bf00      	nop
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt2(void){
 800aa50:	b480      	push	{r7}
 800aa52:	af00      	add	r7, sp, #0
	__NOP();
 800aa54:	bf00      	nop
}
 800aa56:	bf00      	nop
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <callback_extInt3>:

__attribute__ ((weak)) void callback_extInt3(void){
 800aa60:	b480      	push	{r7}
 800aa62:	af00      	add	r7, sp, #0
	__NOP();
 800aa64:	bf00      	nop
}
 800aa66:	bf00      	nop
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt4(void){
 800aa70:	b480      	push	{r7}
 800aa72:	af00      	add	r7, sp, #0
	__NOP();
 800aa74:	bf00      	nop
}
 800aa76:	bf00      	nop
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 800aa80:	b480      	push	{r7}
 800aa82:	af00      	add	r7, sp, #0
	__NOP();
 800aa84:	bf00      	nop
}
 800aa86:	bf00      	nop
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 800aa90:	b480      	push	{r7}
 800aa92:	af00      	add	r7, sp, #0
	__NOP();
 800aa94:	bf00      	nop
}
 800aa96:	bf00      	nop
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 800aaa0:	b480      	push	{r7}
 800aaa2:	af00      	add	r7, sp, #0
	__NOP();
 800aaa4:	bf00      	nop
}
 800aaa6:	bf00      	nop
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 800aab0:	b480      	push	{r7}
 800aab2:	af00      	add	r7, sp, #0
	__NOP();
 800aab4:	bf00      	nop
}
 800aab6:	bf00      	nop
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 800aac0:	b480      	push	{r7}
 800aac2:	af00      	add	r7, sp, #0
	__NOP();
 800aac4:	bf00      	nop
}
 800aac6:	bf00      	nop
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 800aad0:	b480      	push	{r7}
 800aad2:	af00      	add	r7, sp, #0
	__NOP();
 800aad4:	bf00      	nop
}
 800aad6:	bf00      	nop
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 800aae0:	b480      	push	{r7}
 800aae2:	af00      	add	r7, sp, #0
	__NOP();
 800aae4:	bf00      	nop
}
 800aae6:	bf00      	nop
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 800aaf0:	b480      	push	{r7}
 800aaf2:	af00      	add	r7, sp, #0
	__NOP();
 800aaf4:	bf00      	nop
}
 800aaf6:	bf00      	nop
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 800ab00:	b480      	push	{r7}
 800ab02:	af00      	add	r7, sp, #0
	__NOP();
 800ab04:	bf00      	nop
}
 800ab06:	bf00      	nop
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 800ab10:	b480      	push	{r7}
 800ab12:	af00      	add	r7, sp, #0
	__NOP();
 800ab14:	bf00      	nop
}
 800ab16:	bf00      	nop
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 800ab20:	b480      	push	{r7}
 800ab22:	af00      	add	r7, sp, #0
	__NOP();
 800ab24:	bf00      	nop
}
 800ab26:	bf00      	nop
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 800ab34:	4b08      	ldr	r3, [pc, #32]	; (800ab58 <EXTI0_IRQHandler+0x28>)
 800ab36:	695b      	ldr	r3, [r3, #20]
 800ab38:	f003 0301 	and.w	r3, r3, #1
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d008      	beq.n	800ab52 <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 800ab40:	4b05      	ldr	r3, [pc, #20]	; (800ab58 <EXTI0_IRQHandler+0x28>)
 800ab42:	695b      	ldr	r3, [r3, #20]
 800ab44:	4a04      	ldr	r2, [pc, #16]	; (800ab58 <EXTI0_IRQHandler+0x28>)
 800ab46:	f043 0301 	orr.w	r3, r3, #1
 800ab4a:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 800ab4c:	f7ff ff70 	bl	800aa30 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 800ab50:	e000      	b.n	800ab54 <EXTI0_IRQHandler+0x24>
		__NOP();
 800ab52:	bf00      	nop
}
 800ab54:	bf00      	nop
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	40013c00 	.word	0x40013c00

0800ab5c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 800ab60:	4b08      	ldr	r3, [pc, #32]	; (800ab84 <EXTI1_IRQHandler+0x28>)
 800ab62:	695b      	ldr	r3, [r3, #20]
 800ab64:	f003 0302 	and.w	r3, r3, #2
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d008      	beq.n	800ab7e <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 800ab6c:	4b05      	ldr	r3, [pc, #20]	; (800ab84 <EXTI1_IRQHandler+0x28>)
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	4a04      	ldr	r2, [pc, #16]	; (800ab84 <EXTI1_IRQHandler+0x28>)
 800ab72:	f043 0302 	orr.w	r3, r3, #2
 800ab76:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 800ab78:	f7ff ff62 	bl	800aa40 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 800ab7c:	e000      	b.n	800ab80 <EXTI1_IRQHandler+0x24>
		__NOP();
 800ab7e:	bf00      	nop
}
 800ab80:	bf00      	nop
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	40013c00 	.word	0x40013c00

0800ab88 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 800ab8c:	4b08      	ldr	r3, [pc, #32]	; (800abb0 <EXTI2_IRQHandler+0x28>)
 800ab8e:	695b      	ldr	r3, [r3, #20]
 800ab90:	f003 0304 	and.w	r3, r3, #4
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d008      	beq.n	800abaa <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 800ab98:	4b05      	ldr	r3, [pc, #20]	; (800abb0 <EXTI2_IRQHandler+0x28>)
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	4a04      	ldr	r2, [pc, #16]	; (800abb0 <EXTI2_IRQHandler+0x28>)
 800ab9e:	f043 0304 	orr.w	r3, r3, #4
 800aba2:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 800aba4:	f7ff ff54 	bl	800aa50 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 800aba8:	e000      	b.n	800abac <EXTI2_IRQHandler+0x24>
		__NOP();
 800abaa:	bf00      	nop
}
 800abac:	bf00      	nop
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	40013c00 	.word	0x40013c00

0800abb4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 800abb8:	4b08      	ldr	r3, [pc, #32]	; (800abdc <EXTI3_IRQHandler+0x28>)
 800abba:	695b      	ldr	r3, [r3, #20]
 800abbc:	f003 0308 	and.w	r3, r3, #8
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d008      	beq.n	800abd6 <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 800abc4:	4b05      	ldr	r3, [pc, #20]	; (800abdc <EXTI3_IRQHandler+0x28>)
 800abc6:	695b      	ldr	r3, [r3, #20]
 800abc8:	4a04      	ldr	r2, [pc, #16]	; (800abdc <EXTI3_IRQHandler+0x28>)
 800abca:	f043 0308 	orr.w	r3, r3, #8
 800abce:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 800abd0:	f7ff ff46 	bl	800aa60 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 800abd4:	e000      	b.n	800abd8 <EXTI3_IRQHandler+0x24>
		__NOP();
 800abd6:	bf00      	nop
}
 800abd8:	bf00      	nop
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	40013c00 	.word	0x40013c00

0800abe0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 800abe4:	4b08      	ldr	r3, [pc, #32]	; (800ac08 <EXTI4_IRQHandler+0x28>)
 800abe6:	695b      	ldr	r3, [r3, #20]
 800abe8:	f003 0310 	and.w	r3, r3, #16
 800abec:	2b00      	cmp	r3, #0
 800abee:	d008      	beq.n	800ac02 <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 800abf0:	4b05      	ldr	r3, [pc, #20]	; (800ac08 <EXTI4_IRQHandler+0x28>)
 800abf2:	695b      	ldr	r3, [r3, #20]
 800abf4:	4a04      	ldr	r2, [pc, #16]	; (800ac08 <EXTI4_IRQHandler+0x28>)
 800abf6:	f043 0310 	orr.w	r3, r3, #16
 800abfa:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 800abfc:	f7ff ff38 	bl	800aa70 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 800ac00:	e000      	b.n	800ac04 <EXTI4_IRQHandler+0x24>
		__NOP();
 800ac02:	bf00      	nop
}
 800ac04:	bf00      	nop
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	40013c00 	.word	0x40013c00

0800ac0c <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 800ac10:	4b26      	ldr	r3, [pc, #152]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	f003 0320 	and.w	r3, r3, #32
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d008      	beq.n	800ac2e <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 800ac1c:	4b23      	ldr	r3, [pc, #140]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	4a22      	ldr	r2, [pc, #136]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac22:	f043 0320 	orr.w	r3, r3, #32
 800ac26:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 800ac28:	f7ff ff2a 	bl	800aa80 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 800ac2c:	e03c      	b.n	800aca8 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 800ac2e:	4b1f      	ldr	r3, [pc, #124]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac30:	695b      	ldr	r3, [r3, #20]
 800ac32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d008      	beq.n	800ac4c <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 800ac3a:	4b1c      	ldr	r3, [pc, #112]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac3c:	695b      	ldr	r3, [r3, #20]
 800ac3e:	4a1b      	ldr	r2, [pc, #108]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac44:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 800ac46:	f7ff ff23 	bl	800aa90 <callback_extInt6>
}
 800ac4a:	e02d      	b.n	800aca8 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 800ac4c:	4b17      	ldr	r3, [pc, #92]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac4e:	695b      	ldr	r3, [r3, #20]
 800ac50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d008      	beq.n	800ac6a <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 800ac58:	4b14      	ldr	r3, [pc, #80]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac5a:	695b      	ldr	r3, [r3, #20]
 800ac5c:	4a13      	ldr	r2, [pc, #76]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac62:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 800ac64:	f7ff ff1c 	bl	800aaa0 <callback_extInt7>
}
 800ac68:	e01e      	b.n	800aca8 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 800ac6a:	4b10      	ldr	r3, [pc, #64]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d008      	beq.n	800ac88 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 800ac76:	4b0d      	ldr	r3, [pc, #52]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	4a0c      	ldr	r2, [pc, #48]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac80:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 800ac82:	f7ff ff15 	bl	800aab0 <callback_extInt8>
}
 800ac86:	e00f      	b.n	800aca8 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 800ac88:	4b08      	ldr	r3, [pc, #32]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac8a:	695b      	ldr	r3, [r3, #20]
 800ac8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d008      	beq.n	800aca6 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 800ac94:	4b05      	ldr	r3, [pc, #20]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac96:	695b      	ldr	r3, [r3, #20]
 800ac98:	4a04      	ldr	r2, [pc, #16]	; (800acac <EXTI9_5_IRQHandler+0xa0>)
 800ac9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac9e:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 800aca0:	f7ff ff0e 	bl	800aac0 <callback_extInt9>
}
 800aca4:	e000      	b.n	800aca8 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800aca6:	bf00      	nop
}
 800aca8:	bf00      	nop
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	40013c00 	.word	0x40013c00

0800acb0 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 800acb4:	4b2e      	ldr	r3, [pc, #184]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800acb6:	695b      	ldr	r3, [r3, #20]
 800acb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d008      	beq.n	800acd2 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 800acc0:	4b2b      	ldr	r3, [pc, #172]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	4a2a      	ldr	r2, [pc, #168]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800acc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800acca:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 800accc:	f7ff ff00 	bl	800aad0 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 800acd0:	e04b      	b.n	800ad6a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 800acd2:	4b27      	ldr	r3, [pc, #156]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800acd4:	695b      	ldr	r3, [r3, #20]
 800acd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d008      	beq.n	800acf0 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 800acde:	4b24      	ldr	r3, [pc, #144]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800ace0:	695b      	ldr	r3, [r3, #20]
 800ace2:	4a23      	ldr	r2, [pc, #140]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800ace4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ace8:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 800acea:	f7ff fef9 	bl	800aae0 <callback_extInt11>
}
 800acee:	e03c      	b.n	800ad6a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 800acf0:	4b1f      	ldr	r3, [pc, #124]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d008      	beq.n	800ad0e <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 800acfc:	4b1c      	ldr	r3, [pc, #112]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	4a1b      	ldr	r2, [pc, #108]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800ad02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ad06:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 800ad08:	f7ff fef2 	bl	800aaf0 <callback_extInt12>
}
 800ad0c:	e02d      	b.n	800ad6a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 800ad0e:	4b18      	ldr	r3, [pc, #96]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d008      	beq.n	800ad2c <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 800ad1a:	4b15      	ldr	r3, [pc, #84]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	4a14      	ldr	r2, [pc, #80]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800ad20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ad24:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 800ad26:	f7ff feeb 	bl	800ab00 <callback_extInt13>
}
 800ad2a:	e01e      	b.n	800ad6a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 800ad2c:	4b10      	ldr	r3, [pc, #64]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d008      	beq.n	800ad4a <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 800ad38:	4b0d      	ldr	r3, [pc, #52]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800ad3a:	695b      	ldr	r3, [r3, #20]
 800ad3c:	4a0c      	ldr	r2, [pc, #48]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800ad3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad42:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 800ad44:	f7ff fee4 	bl	800ab10 <callback_extInt14>
}
 800ad48:	e00f      	b.n	800ad6a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 800ad4a:	4b09      	ldr	r3, [pc, #36]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800ad4c:	695b      	ldr	r3, [r3, #20]
 800ad4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d008      	beq.n	800ad68 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 800ad56:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	4a05      	ldr	r2, [pc, #20]	; (800ad70 <EXTI15_10_IRQHandler+0xc0>)
 800ad5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad60:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 800ad62:	f7ff fedd 	bl	800ab20 <callback_extInt15>
}
 800ad66:	e000      	b.n	800ad6a <EXTI15_10_IRQHandler+0xba>
		__NOP();
 800ad68:	bf00      	nop
}
 800ad6a:	bf00      	nop
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	40013c00 	.word	0x40013c00

0800ad74 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	4611      	mov	r1, r2
 800ad80:	461a      	mov	r2, r3
 800ad82:	4603      	mov	r3, r0
 800ad84:	70fb      	strb	r3, [r7, #3]
 800ad86:	460b      	mov	r3, r1
 800ad88:	70bb      	strb	r3, [r7, #2]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	78fa      	ldrb	r2, [r7, #3]
 800ad92:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	78ba      	ldrb	r2, [r7, #2]
 800ad98:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	787a      	ldrb	r2, [r7, #1]
 800ad9e:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	7c3a      	ldrb	r2, [r7, #16]
 800ada4:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	7d3a      	ldrb	r2, [r7, #20]
 800adaa:	715a      	strb	r2, [r3, #5]
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	4a88      	ldr	r2, [pc, #544]	; (800aff0 <GPIO_Config+0x238>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d106      	bne.n	800ade0 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 800add2:	4b88      	ldr	r3, [pc, #544]	; (800aff4 <GPIO_Config+0x23c>)
 800add4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add6:	4a87      	ldr	r2, [pc, #540]	; (800aff4 <GPIO_Config+0x23c>)
 800add8:	f043 0301 	orr.w	r3, r3, #1
 800addc:	6313      	str	r3, [r2, #48]	; 0x30
 800adde:	e03a      	b.n	800ae56 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	4a84      	ldr	r2, [pc, #528]	; (800aff8 <GPIO_Config+0x240>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d106      	bne.n	800adf8 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 800adea:	4b82      	ldr	r3, [pc, #520]	; (800aff4 <GPIO_Config+0x23c>)
 800adec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adee:	4a81      	ldr	r2, [pc, #516]	; (800aff4 <GPIO_Config+0x23c>)
 800adf0:	f043 0302 	orr.w	r3, r3, #2
 800adf4:	6313      	str	r3, [r2, #48]	; 0x30
 800adf6:	e02e      	b.n	800ae56 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	4a7f      	ldr	r2, [pc, #508]	; (800affc <GPIO_Config+0x244>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d106      	bne.n	800ae10 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 800ae02:	4b7c      	ldr	r3, [pc, #496]	; (800aff4 <GPIO_Config+0x23c>)
 800ae04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae06:	4a7b      	ldr	r2, [pc, #492]	; (800aff4 <GPIO_Config+0x23c>)
 800ae08:	f043 0304 	orr.w	r3, r3, #4
 800ae0c:	6313      	str	r3, [r2, #48]	; 0x30
 800ae0e:	e022      	b.n	800ae56 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	4a7a      	ldr	r2, [pc, #488]	; (800b000 <GPIO_Config+0x248>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d106      	bne.n	800ae28 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 800ae1a:	4b76      	ldr	r3, [pc, #472]	; (800aff4 <GPIO_Config+0x23c>)
 800ae1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1e:	4a75      	ldr	r2, [pc, #468]	; (800aff4 <GPIO_Config+0x23c>)
 800ae20:	f043 0308 	orr.w	r3, r3, #8
 800ae24:	6313      	str	r3, [r2, #48]	; 0x30
 800ae26:	e016      	b.n	800ae56 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	4a75      	ldr	r2, [pc, #468]	; (800b004 <GPIO_Config+0x24c>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d106      	bne.n	800ae40 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 800ae32:	4b70      	ldr	r3, [pc, #448]	; (800aff4 <GPIO_Config+0x23c>)
 800ae34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae36:	4a6f      	ldr	r2, [pc, #444]	; (800aff4 <GPIO_Config+0x23c>)
 800ae38:	f043 0310 	orr.w	r3, r3, #16
 800ae3c:	6313      	str	r3, [r2, #48]	; 0x30
 800ae3e:	e00a      	b.n	800ae56 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	4a70      	ldr	r2, [pc, #448]	; (800b008 <GPIO_Config+0x250>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d105      	bne.n	800ae56 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 800ae4a:	4b6a      	ldr	r3, [pc, #424]	; (800aff4 <GPIO_Config+0x23c>)
 800ae4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae4e:	4a69      	ldr	r2, [pc, #420]	; (800aff4 <GPIO_Config+0x23c>)
 800ae50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae54:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	785b      	ldrb	r3, [r3, #1]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	005b      	lsls	r3, r3, #1
 800ae62:	fa02 f303 	lsl.w	r3, r2, r3
 800ae66:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	005b      	lsls	r3, r3, #1
 800ae74:	2103      	movs	r1, #3
 800ae76:	fa01 f303 	lsl.w	r3, r1, r3
 800ae7a:	43db      	mvns	r3, r3
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	400a      	ands	r2, r1
 800ae84:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	6819      	ldr	r1, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	430a      	orrs	r2, r1
 800ae94:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	789b      	ldrb	r3, [r3, #2]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	fa02 f303 	lsl.w	r3, r2, r3
 800aea4:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	685a      	ldr	r2, [r3, #4]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	408b      	lsls	r3, r1
 800aeb6:	43db      	mvns	r3, r3
 800aeb8:	4619      	mov	r1, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	400a      	ands	r2, r1
 800aec0:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	6859      	ldr	r1, [r3, #4]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	430a      	orrs	r2, r1
 800aed0:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	78db      	ldrb	r3, [r3, #3]
 800aed6:	461a      	mov	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	005b      	lsls	r3, r3, #1
 800aede:	fa02 f303 	lsl.w	r3, r2, r3
 800aee2:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	689a      	ldr	r2, [r3, #8]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	005b      	lsls	r3, r3, #1
 800aef0:	2103      	movs	r1, #3
 800aef2:	fa01 f303 	lsl.w	r3, r1, r3
 800aef6:	43db      	mvns	r3, r3
 800aef8:	4619      	mov	r1, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	400a      	ands	r2, r1
 800af00:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	6899      	ldr	r1, [r3, #8]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	430a      	orrs	r2, r1
 800af10:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	791b      	ldrb	r3, [r3, #4]
 800af16:	461a      	mov	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	005b      	lsls	r3, r3, #1
 800af1e:	fa02 f303 	lsl.w	r3, r2, r3
 800af22:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	68da      	ldr	r2, [r3, #12]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	005b      	lsls	r3, r3, #1
 800af30:	2103      	movs	r1, #3
 800af32:	fa01 f303 	lsl.w	r3, r1, r3
 800af36:	43db      	mvns	r3, r3
 800af38:	4619      	mov	r1, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	400a      	ands	r2, r1
 800af40:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	68d9      	ldr	r1, [r3, #12]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	430a      	orrs	r2, r1
 800af50:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	785b      	ldrb	r3, [r3, #1]
 800af56:	2b02      	cmp	r3, #2
 800af58:	d143      	bne.n	800afe2 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	2b07      	cmp	r3, #7
 800af60:	d81f      	bhi.n	800afa2 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	6a1a      	ldr	r2, [r3, #32]
 800af70:	210f      	movs	r1, #15
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	fa01 f303 	lsl.w	r3, r1, r3
 800af78:	43db      	mvns	r3, r3
 800af7a:	4619      	mov	r1, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	400a      	ands	r2, r1
 800af82:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	6a1a      	ldr	r2, [r3, #32]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	795b      	ldrb	r3, [r3, #5]
 800af8e:	4619      	mov	r1, r3
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	fa01 f303 	lsl.w	r3, r1, r3
 800af96:	4619      	mov	r1, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	430a      	orrs	r2, r1
 800af9e:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 800afa0:	e01f      	b.n	800afe2 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	3b08      	subs	r3, #8
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afb2:	210f      	movs	r1, #15
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	fa01 f303 	lsl.w	r3, r1, r3
 800afba:	43db      	mvns	r3, r3
 800afbc:	4619      	mov	r1, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	400a      	ands	r2, r1
 800afc4:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	795b      	ldrb	r3, [r3, #5]
 800afd0:	4619      	mov	r1, r3
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	fa01 f303 	lsl.w	r3, r1, r3
 800afd8:	4619      	mov	r1, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	430a      	orrs	r2, r1
 800afe0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800afe2:	bf00      	nop
 800afe4:	3714      	adds	r7, #20
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop
 800aff0:	40020000 	.word	0x40020000
 800aff4:	40023800 	.word	0x40023800
 800aff8:	40020400 	.word	0x40020400
 800affc:	40020800 	.word	0x40020800
 800b000:	40020c00 	.word	0x40020c00
 800b004:	40021000 	.word	0x40021000
 800b008:	40021c00 	.word	0x40021c00

0800b00c <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	460b      	mov	r3, r1
 800b016:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 800b018:	78fb      	ldrb	r3, [r7, #3]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d10d      	bne.n	800b03a <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	699a      	ldr	r2, [r3, #24]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	4619      	mov	r1, r3
 800b02a:	2301      	movs	r3, #1
 800b02c:	408b      	lsls	r3, r1
 800b02e:	4619      	mov	r1, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	430a      	orrs	r2, r1
 800b036:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 800b038:	e00d      	b.n	800b056 <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	699a      	ldr	r2, [r3, #24]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	3310      	adds	r3, #16
 800b046:	2101      	movs	r1, #1
 800b048:	fa01 f303 	lsl.w	r3, r1, r3
 800b04c:	4619      	mov	r1, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	430a      	orrs	r2, r1
 800b054:	619a      	str	r2, [r3, #24]
}
 800b056:	bf00      	nop
 800b058:	370c      	adds	r7, #12
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 800b062:	b480      	push	{r7}
 800b064:	b083      	sub	sp, #12
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	695a      	ldr	r2, [r3, #20]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	4619      	mov	r1, r3
 800b076:	2301      	movs	r3, #1
 800b078:	408b      	lsls	r3, r1
 800b07a:	4619      	mov	r1, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	404a      	eors	r2, r1
 800b082:	615a      	str	r2, [r3, #20]
}
 800b084:	bf00      	nop
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <i2c_Config>:
 * Recordar de configurar los pines GPIOx por medio de las funciones alternativas,
 * Ademas de configurar dichos pines como open_drain
 */

void i2c_Config(I2C_Handler_t *ptrHandlerI2C)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
	uint8_t clockAPB1 = getClockAPB1();     //Variable que guarda la velocidad de reloj entregada al bus APB1
 800b098:	f000 fa9c 	bl	800b5d4 <getClockAPB1>
 800b09c:	4603      	mov	r3, r0
 800b09e:	73fb      	strb	r3, [r7, #15]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	if(ptrHandlerI2C->prtI2Cx == I2C1)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a60      	ldr	r2, [pc, #384]	; (800b228 <i2c_Config+0x198>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d106      	bne.n	800b0b8 <i2c_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800b0aa:	4b60      	ldr	r3, [pc, #384]	; (800b22c <i2c_Config+0x19c>)
 800b0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ae:	4a5f      	ldr	r2, [pc, #380]	; (800b22c <i2c_Config+0x19c>)
 800b0b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b0b4:	6413      	str	r3, [r2, #64]	; 0x40
 800b0b6:	e016      	b.n	800b0e6 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C2)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a5c      	ldr	r2, [pc, #368]	; (800b230 <i2c_Config+0x1a0>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d106      	bne.n	800b0d0 <i2c_Config+0x40>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 800b0c2:	4b5a      	ldr	r3, [pc, #360]	; (800b22c <i2c_Config+0x19c>)
 800b0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c6:	4a59      	ldr	r2, [pc, #356]	; (800b22c <i2c_Config+0x19c>)
 800b0c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b0cc:	6413      	str	r3, [r2, #64]	; 0x40
 800b0ce:	e00a      	b.n	800b0e6 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C3)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a57      	ldr	r2, [pc, #348]	; (800b234 <i2c_Config+0x1a4>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d105      	bne.n	800b0e6 <i2c_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800b0da:	4b54      	ldr	r3, [pc, #336]	; (800b22c <i2c_Config+0x19c>)
 800b0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0de:	4a53      	ldr	r2, [pc, #332]	; (800b22c <i2c_Config+0x19c>)
 800b0e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b0e4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//---------------------------------2) Reiniciamos el periferico------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_SWRST;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b0f4:	601a      	str	r2, [r3, #0]
	__NOP();
 800b0f6:	bf00      	nop
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_SWRST;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b106:	601a      	str	r2, [r3, #0]

	//-----------------------------------3) Valor del reloj principal------------------------------------------
	//Registro: CR2

	ptrHandlerI2C->prtI2Cx->CR2 &= ~(0b111111<<I2C_CR2_FREQ_Pos);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	685a      	ldr	r2, [r3, #4]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800b116:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->prtI2Cx->CR2 |= (clockAPB1<<I2C_CR2_FREQ_Pos);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6859      	ldr	r1, [r3, #4]
 800b11e:	7bfa      	ldrb	r2, [r7, #15]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	430a      	orrs	r2, r1
 800b126:	605a      	str	r2, [r3, #4]
	//-------------------------------------4) Configuracion del I2C------------------------------------------
	//Registro: CCR
	//Registro: TRISE

	//Variables que almacenan el respectivo valor a cargar en los registros CRR y Trise
	uint16_t valueCRR = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	81bb      	strh	r3, [r7, #12]
	uint8_t valueTrise = 0;
 800b12c:	2300      	movs	r3, #0
 800b12e:	72fb      	strb	r3, [r7, #11]

	//definimos inicialmente los registro en 0
	ptrHandlerI2C->prtI2Cx->CCR = 0;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2200      	movs	r2, #0
 800b136:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->prtI2Cx->TRISE = 0;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2200      	movs	r2, #0
 800b13e:	621a      	str	r2, [r3, #32]

	//Configuramos el I2C deacuerdo al modo selsecionado
	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	795b      	ldrb	r3, [r3, #5]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d121      	bne.n	800b18c <i2c_Config+0xfc>
	{
		//Seleccionamos el modo estandar
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	69da      	ldr	r2, [r3, #28]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b156:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (5000*clockAPB1)/1000;
 800b158:	7bfb      	ldrb	r3, [r7, #15]
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	461a      	mov	r2, r3
 800b15e:	0092      	lsls	r2, r2, #2
 800b160:	4413      	add	r3, r2
 800b162:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	69d9      	ldr	r1, [r3, #28]
 800b16a:	89ba      	ldrh	r2, [r7, #12]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	430a      	orrs	r2, r1
 800b172:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((1000*clockAPB1)/1000)+1;
 800b174:	7bfb      	ldrb	r3, [r7, #15]
 800b176:	3301      	adds	r3, #1
 800b178:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6a19      	ldr	r1, [r3, #32]
 800b180:	7afa      	ldrb	r2, [r7, #11]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	430a      	orrs	r2, r1
 800b188:	621a      	str	r2, [r3, #32]
 800b18a:	e039      	b.n	800b200 <i2c_Config+0x170>
	}
	else
	{
		//Seleccionamos el modo Fast
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	69da      	ldr	r2, [r3, #28]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b19a:	61da      	str	r2, [r3, #28]
		ptrHandlerI2C->prtI2Cx->CCR |= I2C_CCR_FS;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	69da      	ldr	r2, [r3, #28]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1aa:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (2500*clockAPB1)/3000;
 800b1ac:	7bfb      	ldrb	r3, [r7, #15]
 800b1ae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b1b2:	fb02 f303 	mul.w	r3, r2, r3
 800b1b6:	4a20      	ldr	r2, [pc, #128]	; (800b238 <i2c_Config+0x1a8>)
 800b1b8:	fb82 1203 	smull	r1, r2, r2, r3
 800b1bc:	1192      	asrs	r2, r2, #6
 800b1be:	17db      	asrs	r3, r3, #31
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	69d9      	ldr	r1, [r3, #28]
 800b1ca:	89ba      	ldrh	r2, [r7, #12]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	430a      	orrs	r2, r1
 800b1d2:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((300*clockAPB1)/1000)+1;
 800b1d4:	7bfb      	ldrb	r3, [r7, #15]
 800b1d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b1da:	fb02 f303 	mul.w	r3, r2, r3
 800b1de:	4a17      	ldr	r2, [pc, #92]	; (800b23c <i2c_Config+0x1ac>)
 800b1e0:	fb82 1203 	smull	r1, r2, r2, r3
 800b1e4:	1192      	asrs	r2, r2, #6
 800b1e6:	17db      	asrs	r3, r3, #31
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	6a19      	ldr	r1, [r3, #32]
 800b1f6:	7afa      	ldrb	r2, [r7, #11]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	621a      	str	r2, [r3, #32]
	}

	//-----------------------------------5) Activamos el modulo I2C------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_PE;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f022 0201 	bic.w	r2, r2, #1
 800b20e:	601a      	str	r2, [r3, #0]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_PE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f042 0201 	orr.w	r2, r2, #1
 800b21e:	601a      	str	r2, [r3, #0]
}
 800b220:	bf00      	nop
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	40005400 	.word	0x40005400
 800b22c:	40023800 	.word	0x40023800
 800b230:	40005800 	.word	0x40005800
 800b234:	40005c00 	.word	0x40005c00
 800b238:	057619f1 	.word	0x057619f1
 800b23c:	10624dd3 	.word	0x10624dd3

0800b240 <i2c_StartTrasaction>:

//----------------------------------------Funciones para la Transaccion----------------------------------------
//Funcion para empezar la Transaccion
void i2c_StartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
	/*verificamos que la linea no esta ocupada
	 * bit "busy" en I2C
	 */
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 800b248:	e000      	b.n	800b24c <i2c_StartTrasaction+0xc>
	{
		__NOP();
 800b24a:	bf00      	nop
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	699b      	ldr	r3, [r3, #24]
 800b252:	f003 0302 	and.w	r3, r3, #2
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1f7      	bne.n	800b24a <i2c_StartTrasaction+0xa>
	}
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b268:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800b26a:	e000      	b.n	800b26e <i2c_StartTrasaction+0x2e>
	{
		__NOP();
 800b26c:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	695b      	ldr	r3, [r3, #20]
 800b274:	f003 0301 	and.w	r3, r3, #1
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d0f7      	beq.n	800b26c <i2c_StartTrasaction+0x2c>
	}
}
 800b27c:	bf00      	nop
 800b27e:	bf00      	nop
 800b280:	370c      	adds	r7, #12
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <i2c_ReStartTrasaction>:

//Generar de nuevo una señal para empazar la Transaccion
void i2c_ReStartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 800b28a:	b480      	push	{r7}
 800b28c:	b083      	sub	sp, #12
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2a0:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800b2a2:	e000      	b.n	800b2a6 <i2c_ReStartTrasaction+0x1c>
	{
		__NOP();
 800b2a4:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	f003 0301 	and.w	r3, r3, #1
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d0f7      	beq.n	800b2a4 <i2c_ReStartTrasaction+0x1a>
	}
}
 800b2b4:	bf00      	nop
 800b2b6:	bf00      	nop
 800b2b8:	370c      	adds	r7, #12
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr

0800b2c2 <i2c_SendSlaveAddressRW>:

//Funcion para enviar la direcion de Slave ademas de definir la lectura o escritura del Sclave
void i2c_SendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite)
{
 800b2c2:	b480      	push	{r7}
 800b2c4:	b085      	sub	sp, #20
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	70fb      	strb	r3, [r7, #3]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	70bb      	strb	r3, [r7, #2]
	//Definimos una variable auxiliar
	uint8_t auxByte = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	//Cargamos la direccion del Sclave, ademas cargamos el bit de lectura o escritura
	ptrHandlerI2C->prtI2Cx->DR = (slaveAddress<<1) | readOrWrite;
 800b2d6:	78fb      	ldrb	r3, [r7, #3]
 800b2d8:	005a      	lsls	r2, r3, #1
 800b2da:	78bb      	ldrb	r3, [r7, #2]
 800b2dc:	431a      	orrs	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "ADDR" del evento "Address" se levante
	//Se limpia la bandera "ADDR" leyendo SR1->leyendo en SR2
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 800b2e4:	e000      	b.n	800b2e8 <i2c_SendSlaveAddressRW+0x26>
	{
		__NOP();
 800b2e6:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	695b      	ldr	r3, [r3, #20]
 800b2ee:	f003 0302 	and.w	r3, r3, #2
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d0f7      	beq.n	800b2e6 <i2c_SendSlaveAddressRW+0x24>
	}
	//Se limpia la bandera "ADDR"
	auxByte = ptrHandlerI2C->prtI2Cx->SR1;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	695b      	ldr	r3, [r3, #20]
 800b2fc:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->prtI2Cx->SR2;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	73fb      	strb	r3, [r7, #15]
}
 800b306:	bf00      	nop
 800b308:	3714      	adds	r7, #20
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr

0800b312 <i2c_SendMemoryAddress>:

//Enviamos la direccion de memoria que deseamos leer o escribir
void i2c_SendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr)
{
 800b312:	b480      	push	{r7}
 800b314:	b083      	sub	sp, #12
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	460b      	mov	r3, r1
 800b31c:	70fb      	strb	r3, [r7, #3]
	//Enviamos la direccion de memoria que desamos leer
	ptrHandlerI2C->prtI2Cx->DR = memAddr;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	78fa      	ldrb	r2, [r7, #3]
 800b324:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "TXE" del evento "Data1" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 800b326:	e000      	b.n	800b32a <i2c_SendMemoryAddress+0x18>
	{
		__NOP();
 800b328:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	695b      	ldr	r3, [r3, #20]
 800b330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b334:	2b00      	cmp	r3, #0
 800b336:	d0f7      	beq.n	800b328 <i2c_SendMemoryAddress+0x16>
	}
}
 800b338:	bf00      	nop
 800b33a:	bf00      	nop
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <i2c_SendDataByte>:

//Escritura de datos
void i2c_SendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite)
{
 800b346:	b480      	push	{r7}
 800b348:	b083      	sub	sp, #12
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	460b      	mov	r3, r1
 800b350:	70fb      	strb	r3, [r7, #3]
	//Cargamos el valor que desasmos escribir
	ptrHandlerI2C->prtI2Cx->DR = dataToWrite;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	78fa      	ldrb	r2, [r7, #3]
 800b358:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "BTF" del evento "Transmision" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 800b35a:	e000      	b.n	800b35e <i2c_SendDataByte+0x18>
	{
		__NOP();
 800b35c:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	695b      	ldr	r3, [r3, #20]
 800b364:	f003 0304 	and.w	r3, r3, #4
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d0f7      	beq.n	800b35c <i2c_SendDataByte+0x16>
	}
}
 800b36c:	bf00      	nop
 800b36e:	bf00      	nop
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <i2c_ReadDataByte>:

//Lectura de datos
uint8_t i2c_ReadDataByte(I2C_Handler_t *ptrHandlerI2C)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b083      	sub	sp, #12
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
	//Esperamos a que la bandera "RxNE" del evento "Recepcion" se levante
	//Se limpia la bandera "RxNE" leyendo el registro DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 800b382:	e000      	b.n	800b386 <i2c_ReadDataByte+0xc>
	{
		__NOP();
 800b384:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	695b      	ldr	r3, [r3, #20]
 800b38c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b390:	2b00      	cmp	r3, #0
 800b392:	d0f7      	beq.n	800b384 <i2c_ReadDataByte+0xa>
	}
	//guardamos los datos recibimos
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->prtI2Cx->DR;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	b2da      	uxtb	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C ;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	799b      	ldrb	r3, [r3, #6]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <i2c_SendNoAck>:

//Funcion para activar la indicaicon de NoACK(indicacion para el Sclave de terminar la transmision de datos)
void i2c_SendNoAck(I2C_Handler_t *ptrHandlerI2C)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
	//Esribimos cero en el bit Ack del registro CR1
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_ACK;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3c6:	601a      	str	r2, [r3, #0]

}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <i2c_StopTrasaction>:
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_ACK;
}

//Funcion para generar el Stop bit
void i2c_StopTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_STOP;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3ea:	601a      	str	r2, [r3, #0]
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <i2c_ReadSingleRegister>:

//------------------------------------Funciones para la comunicacion por I2C----------------------------------------

uint8_t i2c_ReadSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	460b      	mov	r3, r1
 800b402:	70fb      	strb	r3, [r7, #3]
	//0. Creacion de una variable auxiliara para recibir el dato leido
	uint8_t auxRead = 0;
 800b404:	2300      	movs	r3, #0
 800b406:	73fb      	strb	r3, [r7, #15]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f7ff ff19 	bl	800b240 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	791b      	ldrb	r3, [r3, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7ff ff53 	bl	800b2c2 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos leer
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 800b41c:	78fb      	ldrb	r3, [r7, #3]
 800b41e:	4619      	mov	r1, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f7ff ff76 	bl	800b312 <i2c_SendMemoryAddress>
	//4. Creamos una condicion de re start
	i2c_ReStartTrasaction(ptrHandlerI2C);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f7ff ff2f 	bl	800b28a <i2c_ReStartTrasaction>
	//5. Enviamos la direccion del Sclavo e indicamos que se desea leer el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	791b      	ldrb	r3, [r3, #4]
 800b430:	2201      	movs	r2, #1
 800b432:	4619      	mov	r1, r3
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7ff ff44 	bl	800b2c2 <i2c_SendSlaveAddressRW>
	//6. Leemos el dato que envia el Sclavo
	auxRead = i2c_ReadDataByte(ptrHandlerI2C);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7ff ff9d 	bl	800b37a <i2c_ReadDataByte>
 800b440:	4603      	mov	r3, r0
 800b442:	73fb      	strb	r3, [r7, #15]
	//7. Generamso la condicio de NoAck
	i2c_SendNoAck(ptrHandlerI2C);
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f7ff ffb3 	bl	800b3b0 <i2c_SendNoAck>
	//8. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7ff ffc2 	bl	800b3d4 <i2c_StopTrasaction>

	return auxRead;
 800b450:	7bfb      	ldrb	r3, [r7, #15]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <i2c_WriteSingleRegister>:

void i2c_WriteSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b082      	sub	sp, #8
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	460b      	mov	r3, r1
 800b464:	70fb      	strb	r3, [r7, #3]
 800b466:	4613      	mov	r3, r2
 800b468:	70bb      	strb	r3, [r7, #2]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f7ff fee8 	bl	800b240 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	791b      	ldrb	r3, [r3, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	4619      	mov	r1, r3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7ff ff22 	bl	800b2c2 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos escribir
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 800b47e:	78fb      	ldrb	r3, [r7, #3]
 800b480:	4619      	mov	r1, r3
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7ff ff45 	bl	800b312 <i2c_SendMemoryAddress>
	//4. Enviamos el dato que se desea escribir en el Sclave
	i2c_SendDataByte(ptrHandlerI2C, newValue);
 800b488:	78bb      	ldrb	r3, [r7, #2]
 800b48a:	4619      	mov	r1, r3
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7ff ff5a 	bl	800b346 <i2c_SendDataByte>
	//5. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff ff9e 	bl	800b3d4 <i2c_StopTrasaction>
}
 800b498:	bf00      	nop
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 800b4aa:	4a39      	ldr	r2, [pc, #228]	; (800b590 <configPLL+0xf0>)
 800b4ac:	79fb      	ldrb	r3, [r7, #7]
 800b4ae:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 800b4b0:	79fb      	ldrb	r3, [r7, #7]
 800b4b2:	2b31      	cmp	r3, #49	; 0x31
 800b4b4:	d804      	bhi.n	800b4c0 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800b4b6:	4b37      	ldr	r3, [pc, #220]	; (800b594 <configPLL+0xf4>)
 800b4b8:	4a36      	ldr	r2, [pc, #216]	; (800b594 <configPLL+0xf4>)
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	6093      	str	r3, [r2, #8]
 800b4be:	e005      	b.n	800b4cc <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800b4c0:	4b34      	ldr	r3, [pc, #208]	; (800b594 <configPLL+0xf4>)
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	4a33      	ldr	r2, [pc, #204]	; (800b594 <configPLL+0xf4>)
 800b4c6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800b4ca:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 800b4cc:	4b31      	ldr	r3, [pc, #196]	; (800b594 <configPLL+0xf4>)
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	4a30      	ldr	r2, [pc, #192]	; (800b594 <configPLL+0xf4>)
 800b4d2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800b4d6:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 800b4d8:	4b2e      	ldr	r3, [pc, #184]	; (800b594 <configPLL+0xf4>)
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	4a2d      	ldr	r2, [pc, #180]	; (800b594 <configPLL+0xf4>)
 800b4de:	f043 0312 	orr.w	r3, r3, #18
 800b4e2:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 800b4e4:	4b2b      	ldr	r3, [pc, #172]	; (800b594 <configPLL+0xf4>)
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	79fa      	ldrb	r2, [r7, #7]
 800b4ea:	0092      	lsls	r2, r2, #2
 800b4ec:	3a0e      	subs	r2, #14
 800b4ee:	0192      	lsls	r2, r2, #6
 800b4f0:	4611      	mov	r1, r2
 800b4f2:	4a28      	ldr	r2, [pc, #160]	; (800b594 <configPLL+0xf4>)
 800b4f4:	430b      	orrs	r3, r1
 800b4f6:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 800b4f8:	4b26      	ldr	r3, [pc, #152]	; (800b594 <configPLL+0xf4>)
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	4a25      	ldr	r2, [pc, #148]	; (800b594 <configPLL+0xf4>)
 800b4fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b502:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 800b504:	4b23      	ldr	r3, [pc, #140]	; (800b594 <configPLL+0xf4>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a22      	ldr	r2, [pc, #136]	; (800b594 <configPLL+0xf4>)
 800b50a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b50e:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 800b510:	e000      	b.n	800b514 <configPLL+0x74>
	{
		__NOP();
 800b512:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 800b514:	4b1f      	ldr	r3, [pc, #124]	; (800b594 <configPLL+0xf4>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d0f8      	beq.n	800b512 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 800b520:	79fb      	ldrb	r3, [r7, #7]
 800b522:	2b5a      	cmp	r3, #90	; 0x5a
 800b524:	d909      	bls.n	800b53a <configPLL+0x9a>
 800b526:	79fb      	ldrb	r3, [r7, #7]
 800b528:	2b64      	cmp	r3, #100	; 0x64
 800b52a:	d806      	bhi.n	800b53a <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 800b52c:	4b1a      	ldr	r3, [pc, #104]	; (800b598 <configPLL+0xf8>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a19      	ldr	r2, [pc, #100]	; (800b598 <configPLL+0xf8>)
 800b532:	f043 0303 	orr.w	r3, r3, #3
 800b536:	6013      	str	r3, [r2, #0]
 800b538:	e01d      	b.n	800b576 <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 800b53a:	79fb      	ldrb	r3, [r7, #7]
 800b53c:	2b40      	cmp	r3, #64	; 0x40
 800b53e:	d909      	bls.n	800b554 <configPLL+0xb4>
 800b540:	79fb      	ldrb	r3, [r7, #7]
 800b542:	2b5a      	cmp	r3, #90	; 0x5a
 800b544:	d806      	bhi.n	800b554 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 800b546:	4b14      	ldr	r3, [pc, #80]	; (800b598 <configPLL+0xf8>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a13      	ldr	r2, [pc, #76]	; (800b598 <configPLL+0xf8>)
 800b54c:	f043 0302 	orr.w	r3, r3, #2
 800b550:	6013      	str	r3, [r2, #0]
 800b552:	e010      	b.n	800b576 <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 800b554:	79fb      	ldrb	r3, [r7, #7]
 800b556:	2b1e      	cmp	r3, #30
 800b558:	d909      	bls.n	800b56e <configPLL+0xce>
 800b55a:	79fb      	ldrb	r3, [r7, #7]
 800b55c:	2b40      	cmp	r3, #64	; 0x40
 800b55e:	d806      	bhi.n	800b56e <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 800b560:	4b0d      	ldr	r3, [pc, #52]	; (800b598 <configPLL+0xf8>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a0c      	ldr	r2, [pc, #48]	; (800b598 <configPLL+0xf8>)
 800b566:	f043 0301 	orr.w	r3, r3, #1
 800b56a:	6013      	str	r3, [r2, #0]
 800b56c:	e003      	b.n	800b576 <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 800b56e:	4b0a      	ldr	r3, [pc, #40]	; (800b598 <configPLL+0xf8>)
 800b570:	4a09      	ldr	r2, [pc, #36]	; (800b598 <configPLL+0xf8>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 800b576:	4b07      	ldr	r3, [pc, #28]	; (800b594 <configPLL+0xf4>)
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	4a06      	ldr	r2, [pc, #24]	; (800b594 <configPLL+0xf4>)
 800b57c:	f043 0302 	orr.w	r3, r3, #2
 800b580:	6093      	str	r3, [r2, #8]

}
 800b582:	bf00      	nop
 800b584:	370c      	adds	r7, #12
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	20013314 	.word	0x20013314
 800b594:	40023800 	.word	0x40023800
 800b598:	40023c00 	.word	0x40023c00

0800b59c <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 800b5a6:	4b09      	ldr	r3, [pc, #36]	; (800b5cc <getConfigPLL+0x30>)
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	f003 0303 	and.w	r3, r3, #3
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d103      	bne.n	800b5ba <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 800b5b2:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <getConfigPLL+0x34>)
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	71fb      	strb	r3, [r7, #7]
 800b5b8:	e001      	b.n	800b5be <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 800b5ba:	2310      	movs	r3, #16
 800b5bc:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 800b5be:	79fb      	ldrb	r3, [r7, #7]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	40023800 	.word	0x40023800
 800b5d0:	20013314 	.word	0x20013314

0800b5d4 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 800b5da:	f7ff ffdf 	bl	800b59c <getConfigPLL>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 800b5e6:	79bb      	ldrb	r3, [r7, #6]
 800b5e8:	2b31      	cmp	r3, #49	; 0x31
 800b5ea:	d802      	bhi.n	800b5f2 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 800b5ec:	79bb      	ldrb	r3, [r7, #6]
 800b5ee:	71fb      	strb	r3, [r7, #7]
 800b5f0:	e002      	b.n	800b5f8 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 800b5f2:	79bb      	ldrb	r3, [r7, #6]
 800b5f4:	089b      	lsrs	r3, r3, #2
 800b5f6:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 800b5f8:	79fb      	ldrb	r3, [r7, #7]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
	...

0800b604 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b614:	d106      	bne.n	800b624 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800b616:	4b81      	ldr	r3, [pc, #516]	; (800b81c <pwm_Config+0x218>)
 800b618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61a:	4a80      	ldr	r2, [pc, #512]	; (800b81c <pwm_Config+0x218>)
 800b61c:	f043 0301 	orr.w	r3, r3, #1
 800b620:	6413      	str	r3, [r2, #64]	; 0x40
 800b622:	e024      	b.n	800b66e <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	4a7d      	ldr	r2, [pc, #500]	; (800b820 <pwm_Config+0x21c>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d106      	bne.n	800b63c <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800b62e:	4b7b      	ldr	r3, [pc, #492]	; (800b81c <pwm_Config+0x218>)
 800b630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b632:	4a7a      	ldr	r2, [pc, #488]	; (800b81c <pwm_Config+0x218>)
 800b634:	f043 0302 	orr.w	r3, r3, #2
 800b638:	6413      	str	r3, [r2, #64]	; 0x40
 800b63a:	e018      	b.n	800b66e <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	4a78      	ldr	r2, [pc, #480]	; (800b824 <pwm_Config+0x220>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d106      	bne.n	800b654 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800b646:	4b75      	ldr	r3, [pc, #468]	; (800b81c <pwm_Config+0x218>)
 800b648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64a:	4a74      	ldr	r2, [pc, #464]	; (800b81c <pwm_Config+0x218>)
 800b64c:	f043 0304 	orr.w	r3, r3, #4
 800b650:	6413      	str	r3, [r2, #64]	; 0x40
 800b652:	e00c      	b.n	800b66e <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	4a73      	ldr	r2, [pc, #460]	; (800b828 <pwm_Config+0x224>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d106      	bne.n	800b66c <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800b65e:	4b6f      	ldr	r3, [pc, #444]	; (800b81c <pwm_Config+0x218>)
 800b660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b662:	4a6e      	ldr	r2, [pc, #440]	; (800b81c <pwm_Config+0x218>)
 800b664:	f043 0308 	orr.w	r3, r3, #8
 800b668:	6413      	str	r3, [r2, #64]	; 0x40
 800b66a:	e000      	b.n	800b66e <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 800b66c:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fa4c 	bl	800bb0c <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	2b03      	cmp	r3, #3
 800b67a:	f200 8118 	bhi.w	800b8ae <pwm_Config+0x2aa>
 800b67e:	a201      	add	r2, pc, #4	; (adr r2, 800b684 <pwm_Config+0x80>)
 800b680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b684:	0800b695 	.word	0x0800b695
 800b688:	0800b717 	.word	0x0800b717
 800b68c:	0800b799 	.word	0x0800b799
 800b690:	0800b82d 	.word	0x0800b82d
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	699a      	ldr	r2, [r3, #24]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	f022 0203 	bic.w	r2, r2, #3
 800b6a2:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	699a      	ldr	r2, [r3, #24]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b6b2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	699a      	ldr	r2, [r3, #24]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800b6c2:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	699a      	ldr	r2, [r3, #24]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	f022 0208 	bic.w	r2, r2, #8
 800b6d2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	699a      	ldr	r2, [r3, #24]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	f042 0208 	orr.w	r2, r2, #8
 800b6e2:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	699a      	ldr	r2, [r3, #24]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	f022 0204 	bic.w	r2, r2, #4
 800b6f2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	699a      	ldr	r2, [r3, #24]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	f042 0204 	orr.w	r2, r2, #4
 800b702:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	699a      	ldr	r2, [r3, #24]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b712:	619a      	str	r2, [r3, #24]

		break;
 800b714:	e0cc      	b.n	800b8b0 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	699a      	ldr	r2, [r3, #24]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	f022 0203 	bic.w	r2, r2, #3
 800b724:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	699a      	ldr	r2, [r3, #24]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b734:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	699a      	ldr	r2, [r3, #24]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800b744:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	699a      	ldr	r2, [r3, #24]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b754:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	699a      	ldr	r2, [r3, #24]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b764:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	699a      	ldr	r2, [r3, #24]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b774:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	699a      	ldr	r2, [r3, #24]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b784:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	699a      	ldr	r2, [r3, #24]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b794:	619a      	str	r2, [r3, #24]

		break;
 800b796:	e08b      	b.n	800b8b0 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	69da      	ldr	r2, [r3, #28]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	f022 0203 	bic.w	r2, r2, #3
 800b7a6:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	69da      	ldr	r2, [r3, #28]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b7b6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	69da      	ldr	r2, [r3, #28]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800b7c6:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	69da      	ldr	r2, [r3, #28]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	f022 0208 	bic.w	r2, r2, #8
 800b7d6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	69da      	ldr	r2, [r3, #28]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	f042 0208 	orr.w	r2, r2, #8
 800b7e6:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	69da      	ldr	r2, [r3, #28]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	f022 0204 	bic.w	r2, r2, #4
 800b7f6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	69da      	ldr	r2, [r3, #28]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	f042 0204 	orr.w	r2, r2, #4
 800b806:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	69da      	ldr	r2, [r3, #28]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b816:	61da      	str	r2, [r3, #28]

		break;
 800b818:	e04a      	b.n	800b8b0 <pwm_Config+0x2ac>
 800b81a:	bf00      	nop
 800b81c:	40023800 	.word	0x40023800
 800b820:	40000400 	.word	0x40000400
 800b824:	40000800 	.word	0x40000800
 800b828:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	69da      	ldr	r2, [r3, #28]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b83a:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	69da      	ldr	r2, [r3, #28]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b84a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	69da      	ldr	r2, [r3, #28]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800b85a:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	69da      	ldr	r2, [r3, #28]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b86a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	69da      	ldr	r2, [r3, #28]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b87a:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	69da      	ldr	r2, [r3, #28]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b88a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	69da      	ldr	r2, [r3, #28]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b89a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	69da      	ldr	r2, [r3, #28]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b8aa:	61da      	str	r2, [r3, #28]

		break;
 800b8ac:	e000      	b.n	800b8b0 <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 800b8ae:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	791b      	ldrb	r3, [r3, #4]
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f896 	bl	800b9e8 <statusPolarityPWM>

}
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	2b03      	cmp	r3, #3
 800b8d6:	d87f      	bhi.n	800b9d8 <statusInOutPWM+0x114>
 800b8d8:	a201      	add	r2, pc, #4	; (adr r2, 800b8e0 <statusInOutPWM+0x1c>)
 800b8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8de:	bf00      	nop
 800b8e0:	0800b8f1 	.word	0x0800b8f1
 800b8e4:	0800b92b 	.word	0x0800b92b
 800b8e8:	0800b965 	.word	0x0800b965
 800b8ec:	0800b99f 	.word	0x0800b99f
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 800b8f0:	78fb      	ldrb	r3, [r7, #3]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d110      	bne.n	800b918 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	6a1a      	ldr	r2, [r3, #32]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	f022 0201 	bic.w	r2, r2, #1
 800b904:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	6a1a      	ldr	r2, [r3, #32]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	f042 0201 	orr.w	r2, r2, #1
 800b914:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 800b916:	e060      	b.n	800b9da <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	6a1a      	ldr	r2, [r3, #32]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	f022 0201 	bic.w	r2, r2, #1
 800b926:	621a      	str	r2, [r3, #32]
		break;
 800b928:	e057      	b.n	800b9da <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 800b92a:	78fb      	ldrb	r3, [r7, #3]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d110      	bne.n	800b952 <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	6a1a      	ldr	r2, [r3, #32]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f022 0210 	bic.w	r2, r2, #16
 800b93e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	6a1a      	ldr	r2, [r3, #32]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f042 0210 	orr.w	r2, r2, #16
 800b94e:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 800b950:	e043      	b.n	800b9da <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	6a1a      	ldr	r2, [r3, #32]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	f022 0210 	bic.w	r2, r2, #16
 800b960:	621a      	str	r2, [r3, #32]
		break;
 800b962:	e03a      	b.n	800b9da <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 800b964:	78fb      	ldrb	r3, [r7, #3]
 800b966:	2b01      	cmp	r3, #1
 800b968:	d110      	bne.n	800b98c <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	6a1a      	ldr	r2, [r3, #32]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b978:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	6a1a      	ldr	r2, [r3, #32]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b988:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 800b98a:	e026      	b.n	800b9da <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	6a1a      	ldr	r2, [r3, #32]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b99a:	621a      	str	r2, [r3, #32]
		break;
 800b99c:	e01d      	b.n	800b9da <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 800b99e:	78fb      	ldrb	r3, [r7, #3]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d110      	bne.n	800b9c6 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	6a1a      	ldr	r2, [r3, #32]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b9b2:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	6a1a      	ldr	r2, [r3, #32]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b9c2:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 800b9c4:	e009      	b.n	800b9da <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	6a1a      	ldr	r2, [r3, #32]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b9d4:	621a      	str	r2, [r3, #32]
		break;
 800b9d6:	e000      	b.n	800b9da <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 800b9d8:	bf00      	nop
	}
	}
}
 800b9da:	bf00      	nop
 800b9dc:	370c      	adds	r7, #12
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop

0800b9e8 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	2b03      	cmp	r3, #3
 800b9fa:	d87f      	bhi.n	800bafc <statusPolarityPWM+0x114>
 800b9fc:	a201      	add	r2, pc, #4	; (adr r2, 800ba04 <statusPolarityPWM+0x1c>)
 800b9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba02:	bf00      	nop
 800ba04:	0800ba15 	.word	0x0800ba15
 800ba08:	0800ba4f 	.word	0x0800ba4f
 800ba0c:	0800ba89 	.word	0x0800ba89
 800ba10:	0800bac3 	.word	0x0800bac3
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 800ba14:	78fb      	ldrb	r3, [r7, #3]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d110      	bne.n	800ba3c <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	6a1a      	ldr	r2, [r3, #32]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	f022 0202 	bic.w	r2, r2, #2
 800ba28:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	6a1a      	ldr	r2, [r3, #32]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	f042 0202 	orr.w	r2, r2, #2
 800ba38:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 800ba3a:	e060      	b.n	800bafe <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	6a1a      	ldr	r2, [r3, #32]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	f022 0202 	bic.w	r2, r2, #2
 800ba4a:	621a      	str	r2, [r3, #32]
		break;
 800ba4c:	e057      	b.n	800bafe <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 800ba4e:	78fb      	ldrb	r3, [r7, #3]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d110      	bne.n	800ba76 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	6a1a      	ldr	r2, [r3, #32]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	f022 0220 	bic.w	r2, r2, #32
 800ba62:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	6a1a      	ldr	r2, [r3, #32]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	689b      	ldr	r3, [r3, #8]
 800ba6e:	f042 0220 	orr.w	r2, r2, #32
 800ba72:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 800ba74:	e043      	b.n	800bafe <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	6a1a      	ldr	r2, [r3, #32]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	f022 0220 	bic.w	r2, r2, #32
 800ba84:	621a      	str	r2, [r3, #32]
		break;
 800ba86:	e03a      	b.n	800bafe <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 800ba88:	78fb      	ldrb	r3, [r7, #3]
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d110      	bne.n	800bab0 <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	6a1a      	ldr	r2, [r3, #32]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ba9c:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	6a1a      	ldr	r2, [r3, #32]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800baac:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 800baae:	e026      	b.n	800bafe <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	6a1a      	ldr	r2, [r3, #32]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800babe:	621a      	str	r2, [r3, #32]
		break;
 800bac0:	e01d      	b.n	800bafe <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 800bac2:	78fb      	ldrb	r3, [r7, #3]
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d110      	bne.n	800baea <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	6a1a      	ldr	r2, [r3, #32]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bad6:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	6a1a      	ldr	r2, [r3, #32]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bae6:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 800bae8:	e009      	b.n	800bafe <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	689b      	ldr	r3, [r3, #8]
 800baee:	6a1a      	ldr	r2, [r3, #32]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800baf8:	621a      	str	r2, [r3, #32]
		break;
 800bafa:	e000      	b.n	800bafe <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 800bafc:	bf00      	nop
	}
	}

}
 800bafe:	bf00      	nop
 800bb00:	370c      	adds	r7, #12
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop

0800bb0c <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d823      	bhi.n	800bb64 <setDuttyCycle+0x58>
 800bb1c:	a201      	add	r2, pc, #4	; (adr r2, 800bb24 <setDuttyCycle+0x18>)
 800bb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb22:	bf00      	nop
 800bb24:	0800bb35 	.word	0x0800bb35
 800bb28:	0800bb41 	.word	0x0800bb41
 800bb2c:	0800bb4d 	.word	0x0800bb4d
 800bb30:	0800bb59 	.word	0x0800bb59
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	885a      	ldrh	r2, [r3, #2]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800bb3e:	e012      	b.n	800bb66 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	885a      	ldrh	r2, [r3, #2]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800bb4a:	e00c      	b.n	800bb66 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	885a      	ldrh	r2, [r3, #2]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800bb56:	e006      	b.n	800bb66 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	885a      	ldrh	r2, [r3, #2]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800bb62:	e000      	b.n	800bb66 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 800bb64:	bf00      	nop
	}
	}

}
 800bb66:	bf00      	nop
 800bb68:	370c      	adds	r7, #12
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop

0800bb74 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb86:	4a0d      	ldr	r2, [pc, #52]	; (800bbbc <updateDuttyCyclePercentageFloat+0x48>)
 800bb88:	fba2 2303 	umull	r2, r3, r2, r3
 800bb8c:	095b      	lsrs	r3, r3, #5
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	ee07 3a90 	vmov	s15, r3
 800bb94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb98:	edd7 7a00 	vldr	s15, [r7]
 800bb9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bba4:	ee17 3a90 	vmov	r3, s15
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f7ff ffac 	bl	800bb0c <setDuttyCycle>
}
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	51eb851f 	.word	0x51eb851f

0800bbc0 <__NVIC_EnableIRQ>:
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bbca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	db0b      	blt.n	800bbea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bbd2:	79fb      	ldrb	r3, [r7, #7]
 800bbd4:	f003 021f 	and.w	r2, r3, #31
 800bbd8:	4907      	ldr	r1, [pc, #28]	; (800bbf8 <__NVIC_EnableIRQ+0x38>)
 800bbda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbde:	095b      	lsrs	r3, r3, #5
 800bbe0:	2001      	movs	r0, #1
 800bbe2:	fa00 f202 	lsl.w	r2, r0, r2
 800bbe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bbea:	bf00      	nop
 800bbec:	370c      	adds	r7, #12
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	e000e100 	.word	0xe000e100

0800bbfc <__NVIC_SetPriority>:
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	4603      	mov	r3, r0
 800bc04:	6039      	str	r1, [r7, #0]
 800bc06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	db0a      	blt.n	800bc26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	490c      	ldr	r1, [pc, #48]	; (800bc48 <__NVIC_SetPriority+0x4c>)
 800bc16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc1a:	0112      	lsls	r2, r2, #4
 800bc1c:	b2d2      	uxtb	r2, r2
 800bc1e:	440b      	add	r3, r1
 800bc20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bc24:	e00a      	b.n	800bc3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	b2da      	uxtb	r2, r3
 800bc2a:	4908      	ldr	r1, [pc, #32]	; (800bc4c <__NVIC_SetPriority+0x50>)
 800bc2c:	79fb      	ldrb	r3, [r7, #7]
 800bc2e:	f003 030f 	and.w	r3, r3, #15
 800bc32:	3b04      	subs	r3, #4
 800bc34:	0112      	lsls	r2, r2, #4
 800bc36:	b2d2      	uxtb	r2, r2
 800bc38:	440b      	add	r3, r1
 800bc3a:	761a      	strb	r2, [r3, #24]
}
 800bc3c:	bf00      	nop
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr
 800bc48:	e000e100 	.word	0xe000e100
 800bc4c:	e000ed00 	.word	0xe000ed00

0800bc50 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	4a8f      	ldr	r2, [pc, #572]	; (800be9c <USART_Config+0x24c>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d107      	bne.n	800bc72 <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 800bc62:	4b8f      	ldr	r3, [pc, #572]	; (800bea0 <USART_Config+0x250>)
 800bc64:	2210      	movs	r2, #16
 800bc66:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	4a8d      	ldr	r2, [pc, #564]	; (800bea4 <USART_Config+0x254>)
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	e019      	b.n	800bca6 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	4a8c      	ldr	r2, [pc, #560]	; (800bea8 <USART_Config+0x258>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d108      	bne.n	800bc8e <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 800bc7c:	4b88      	ldr	r3, [pc, #544]	; (800bea0 <USART_Config+0x250>)
 800bc7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bc82:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	4a88      	ldr	r2, [pc, #544]	; (800beac <USART_Config+0x25c>)
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	e00b      	b.n	800bca6 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	4a87      	ldr	r2, [pc, #540]	; (800beb0 <USART_Config+0x260>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d106      	bne.n	800bca6 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 800bc98:	4b81      	ldr	r3, [pc, #516]	; (800bea0 <USART_Config+0x250>)
 800bc9a:	2220      	movs	r2, #32
 800bc9c:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	4a84      	ldr	r2, [pc, #528]	; (800beb4 <USART_Config+0x264>)
 800bca4:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	789b      	ldrb	r3, [r3, #2]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d03d      	beq.n	800bd3a <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	68da      	ldr	r2, [r3, #12]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bccc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	68da      	ldr	r2, [r3, #12]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bcdc:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	68da      	ldr	r2, [r3, #12]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bcec:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	68da      	ldr	r2, [r3, #12]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bcfc:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	789b      	ldrb	r3, [r3, #2]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d110      	bne.n	800bd28 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	68da      	ldr	r2, [r3, #12]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bd14:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	68da      	ldr	r2, [r3, #12]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd24:	60da      	str	r2, [r3, #12]
 800bd26:	e018      	b.n	800bd5a <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	68da      	ldr	r2, [r3, #12]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bd36:	60da      	str	r2, [r3, #12]
 800bd38:	e00f      	b.n	800bd5a <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	68da      	ldr	r2, [r3, #12]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd48:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	68da      	ldr	r2, [r3, #12]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bd58:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	78db      	ldrb	r3, [r3, #3]
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	d84c      	bhi.n	800bdfc <USART_Config+0x1ac>
 800bd62:	a201      	add	r2, pc, #4	; (adr r2, 800bd68 <USART_Config+0x118>)
 800bd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd68:	0800bd79 	.word	0x0800bd79
 800bd6c:	0800bd97 	.word	0x0800bd97
 800bd70:	0800bdb9 	.word	0x0800bdb9
 800bd74:	0800bddb 	.word	0x0800bddb
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	691a      	ldr	r2, [r3, #16]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bd86:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	689a      	ldr	r2, [r3, #8]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	6912      	ldr	r2, [r2, #16]
 800bd92:	611a      	str	r2, [r3, #16]
		break;
 800bd94:	e041      	b.n	800be1a <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	691a      	ldr	r2, [r3, #16]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bda4:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	691a      	ldr	r2, [r3, #16]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bdb4:	611a      	str	r2, [r3, #16]
		break;
 800bdb6:	e030      	b.n	800be1a <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	691a      	ldr	r2, [r3, #16]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bdc6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	691a      	ldr	r2, [r3, #16]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bdd6:	611a      	str	r2, [r3, #16]
		break;
 800bdd8:	e01f      	b.n	800be1a <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	691a      	ldr	r2, [r3, #16]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bde8:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	691a      	ldr	r2, [r3, #16]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800bdf8:	611a      	str	r2, [r3, #16]
		break;
 800bdfa:	e00e      	b.n	800be1a <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	691a      	ldr	r2, [r3, #16]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800be0a:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	689a      	ldr	r2, [r3, #8]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	6912      	ldr	r2, [r2, #16]
 800be16:	611a      	str	r2, [r3, #16]
		break;
 800be18:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 800be1a:	2300      	movs	r3, #0
 800be1c:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	4a21      	ldr	r2, [pc, #132]	; (800bea8 <USART_Config+0x258>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d104      	bne.n	800be32 <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 800be28:	f7ff fbd4 	bl	800b5d4 <getClockAPB1>
 800be2c:	4603      	mov	r3, r0
 800be2e:	73fb      	strb	r3, [r7, #15]
 800be30:	e003      	b.n	800be3a <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 800be32:	f7ff fbb3 	bl	800b59c <getConfigPLL>
 800be36:	4603      	mov	r3, r0
 800be38:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	785b      	ldrb	r3, [r3, #1]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10b      	bne.n	800be5a <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 800be42:	7bfb      	ldrb	r3, [r7, #15]
 800be44:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800be48:	4618      	mov	r0, r3
 800be4a:	f000 f95f 	bl	800c10c <getValueBaudRate>
 800be4e:	4603      	mov	r3, r0
 800be50:	461a      	mov	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	609a      	str	r2, [r3, #8]
 800be58:	e02f      	b.n	800beba <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	785b      	ldrb	r3, [r3, #1]
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d10b      	bne.n	800be7a <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 800be62:	7bfb      	ldrb	r3, [r7, #15]
 800be64:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 800be68:	4618      	mov	r0, r3
 800be6a:	f000 f94f 	bl	800c10c <getValueBaudRate>
 800be6e:	4603      	mov	r3, r0
 800be70:	461a      	mov	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	609a      	str	r2, [r3, #8]
 800be78:	e01f      	b.n	800beba <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	785b      	ldrb	r3, [r3, #1]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d11a      	bne.n	800beb8 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 800be82:	7bfb      	ldrb	r3, [r7, #15]
 800be84:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800be88:	4618      	mov	r0, r3
 800be8a:	f000 f93f 	bl	800c10c <getValueBaudRate>
 800be8e:	4603      	mov	r3, r0
 800be90:	461a      	mov	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	609a      	str	r2, [r3, #8]
 800be98:	e00f      	b.n	800beba <USART_Config+0x26a>
 800be9a:	bf00      	nop
 800be9c:	40011000 	.word	0x40011000
 800bea0:	40023800 	.word	0x40023800
 800bea4:	20013318 	.word	0x20013318
 800bea8:	40004400 	.word	0x40004400
 800beac:	2001331c 	.word	0x2001331c
 800beb0:	40011400 	.word	0x40011400
 800beb4:	20013320 	.word	0x20013320
	}
	else
	{
		__NOP();
 800beb8:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	2b03      	cmp	r3, #3
 800bec0:	d866      	bhi.n	800bf90 <USART_Config+0x340>
 800bec2:	a201      	add	r2, pc, #4	; (adr r2, 800bec8 <USART_Config+0x278>)
 800bec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec8:	0800bed9 	.word	0x0800bed9
 800becc:	0800befb 	.word	0x0800befb
 800bed0:	0800bf1d 	.word	0x0800bf1d
 800bed4:	0800bf5f 	.word	0x0800bf5f
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	68da      	ldr	r2, [r3, #12]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	f022 0208 	bic.w	r2, r2, #8
 800bee6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	68da      	ldr	r2, [r3, #12]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	f042 0208 	orr.w	r2, r2, #8
 800bef6:	60da      	str	r2, [r3, #12]

		break;
 800bef8:	e063      	b.n	800bfc2 <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	68da      	ldr	r2, [r3, #12]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	f022 0204 	bic.w	r2, r2, #4
 800bf08:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	68da      	ldr	r2, [r3, #12]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	f042 0204 	orr.w	r2, r2, #4
 800bf18:	60da      	str	r2, [r3, #12]

		break;
 800bf1a:	e052      	b.n	800bfc2 <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	68da      	ldr	r2, [r3, #12]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	f022 0208 	bic.w	r2, r2, #8
 800bf2a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	68da      	ldr	r2, [r3, #12]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	f042 0208 	orr.w	r2, r2, #8
 800bf3a:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	68da      	ldr	r2, [r3, #12]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	f022 0204 	bic.w	r2, r2, #4
 800bf4a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	68da      	ldr	r2, [r3, #12]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	f042 0204 	orr.w	r2, r2, #4
 800bf5a:	60da      	str	r2, [r3, #12]


		break;
 800bf5c:	e031      	b.n	800bfc2 <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	68da      	ldr	r2, [r3, #12]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf6c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	68da      	ldr	r2, [r3, #12]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	f022 0208 	bic.w	r2, r2, #8
 800bf7c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	68da      	ldr	r2, [r3, #12]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	f022 0204 	bic.w	r2, r2, #4
 800bf8c:	60da      	str	r2, [r3, #12]
		break;
 800bf8e:	e018      	b.n	800bfc2 <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	68da      	ldr	r2, [r3, #12]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf9e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	68da      	ldr	r2, [r3, #12]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	f022 0208 	bic.w	r2, r2, #8
 800bfae:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	68da      	ldr	r2, [r3, #12]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	f022 0204 	bic.w	r2, r2, #4
 800bfbe:	60da      	str	r2, [r3, #12]
		break;
 800bfc0:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800bfc2:	b672      	cpsid	i
}
 800bfc4:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	791b      	ldrb	r3, [r3, #4]
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d110      	bne.n	800bff0 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	68da      	ldr	r2, [r3, #12]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	f022 0220 	bic.w	r2, r2, #32
 800bfdc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	f042 0220 	orr.w	r2, r2, #32
 800bfec:	60da      	str	r2, [r3, #12]
 800bfee:	e007      	b.n	800c000 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	68da      	ldr	r2, [r3, #12]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	f022 0220 	bic.w	r2, r2, #32
 800bffe:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	791b      	ldrb	r3, [r3, #4]
 800c004:	2b01      	cmp	r3, #1
 800c006:	d003      	beq.n	800c010 <USART_Config+0x3c0>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	795b      	ldrb	r3, [r3, #5]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d11a      	bne.n	800c046 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	4a1a      	ldr	r2, [pc, #104]	; (800c080 <USART_Config+0x430>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d103      	bne.n	800c022 <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 800c01a:	2025      	movs	r0, #37	; 0x25
 800c01c:	f7ff fdd0 	bl	800bbc0 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800c020:	e013      	b.n	800c04a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	4a17      	ldr	r2, [pc, #92]	; (800c084 <USART_Config+0x434>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d103      	bne.n	800c034 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 800c02c:	2026      	movs	r0, #38	; 0x26
 800c02e:	f7ff fdc7 	bl	800bbc0 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800c032:	e00a      	b.n	800c04a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	4a13      	ldr	r2, [pc, #76]	; (800c088 <USART_Config+0x438>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d105      	bne.n	800c04a <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 800c03e:	2047      	movs	r0, #71	; 0x47
 800c040:	f7ff fdbe 	bl	800bbc0 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800c044:	e001      	b.n	800c04a <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 800c046:	bf00      	nop
 800c048:	e000      	b.n	800c04c <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800c04a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800c04c:	b662      	cpsie	i
}
 800c04e:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	2b03      	cmp	r3, #3
 800c056:	d00f      	beq.n	800c078 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	68da      	ldr	r2, [r3, #12]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c066:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	68da      	ldr	r2, [r3, #12]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c076:	60da      	str	r2, [r3, #12]
	}
}
 800c078:	bf00      	nop
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	40011000 	.word	0x40011000
 800c084:	40004400 	.word	0x40004400
 800c088:	40011400 	.word	0x40011400

0800c08c <usart_Config_Init_Priority>:

//------------Funcion para configurar las interrupciones------------------
void usart_Config_Init_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	460b      	mov	r3, r1
 800c096:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800c098:	b672      	cpsid	i
}
 800c09a:	bf00      	nop
	//Desactivamos las interupciones globales
	__disable_irq();
	//Verificamos si se selecciono alguna interrupcion
		if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	791b      	ldrb	r3, [r3, #4]
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d003      	beq.n	800c0ac <usart_Config_Init_Priority+0x20>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	795b      	ldrb	r3, [r3, #5]
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d120      	bne.n	800c0ee <usart_Config_Init_Priority+0x62>
		{
			//Matriculamos la interrupcion en el NVIC
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	4a13      	ldr	r2, [pc, #76]	; (800c100 <usart_Config_Init_Priority+0x74>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d105      	bne.n	800c0c2 <usart_Config_Init_Priority+0x36>
			{
				NVIC_SetPriority(USART1_IRQn, newPriority);
 800c0b6:	78fb      	ldrb	r3, [r7, #3]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	2025      	movs	r0, #37	; 0x25
 800c0bc:	f7ff fd9e 	bl	800bbfc <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800c0c0:	e017      	b.n	800c0f2 <usart_Config_Init_Priority+0x66>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART2)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	4a0f      	ldr	r2, [pc, #60]	; (800c104 <usart_Config_Init_Priority+0x78>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d105      	bne.n	800c0d8 <usart_Config_Init_Priority+0x4c>
			{
				NVIC_SetPriority(USART2_IRQn, newPriority);
 800c0cc:	78fb      	ldrb	r3, [r7, #3]
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	2026      	movs	r0, #38	; 0x26
 800c0d2:	f7ff fd93 	bl	800bbfc <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800c0d6:	e00c      	b.n	800c0f2 <usart_Config_Init_Priority+0x66>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART6)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	4a0a      	ldr	r2, [pc, #40]	; (800c108 <usart_Config_Init_Priority+0x7c>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d107      	bne.n	800c0f2 <usart_Config_Init_Priority+0x66>
			{
				NVIC_SetPriority(USART6_IRQn, newPriority);
 800c0e2:	78fb      	ldrb	r3, [r7, #3]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	2047      	movs	r0, #71	; 0x47
 800c0e8:	f7ff fd88 	bl	800bbfc <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800c0ec:	e001      	b.n	800c0f2 <usart_Config_Init_Priority+0x66>
			}
		}
		else
		{
			__NOP();
 800c0ee:	bf00      	nop
 800c0f0:	e000      	b.n	800c0f4 <usart_Config_Init_Priority+0x68>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800c0f2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800c0f4:	b662      	cpsie	i
}
 800c0f6:	bf00      	nop
		}
		//Activamos las interupciones globales
		__enable_irq();
}
 800c0f8:	bf00      	nop
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	40011000 	.word	0x40011000
 800c104:	40004400 	.word	0x40004400
 800c108:	40011400 	.word	0x40011400

0800c10c <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 800c10c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c110:	b086      	sub	sp, #24
 800c112:	af00      	add	r7, sp, #0
 800c114:	6039      	str	r1, [r7, #0]
 800c116:	4601      	mov	r1, r0
 800c118:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 800c11a:	79f9      	ldrb	r1, [r7, #7]
 800c11c:	2000      	movs	r0, #0
 800c11e:	460a      	mov	r2, r1
 800c120:	4603      	mov	r3, r0
 800c122:	491f      	ldr	r1, [pc, #124]	; (800c1a0 <getValueBaudRate+0x94>)
 800c124:	fb01 f003 	mul.w	r0, r1, r3
 800c128:	2102      	movs	r1, #2
 800c12a:	fb02 f101 	mul.w	r1, r2, r1
 800c12e:	4401      	add	r1, r0
 800c130:	481b      	ldr	r0, [pc, #108]	; (800c1a0 <getValueBaudRate+0x94>)
 800c132:	fba2 4500 	umull	r4, r5, r2, r0
 800c136:	194b      	adds	r3, r1, r5
 800c138:	461d      	mov	r5, r3
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	011b      	lsls	r3, r3, #4
 800c13e:	2200      	movs	r2, #0
 800c140:	4698      	mov	r8, r3
 800c142:	4691      	mov	r9, r2
 800c144:	4642      	mov	r2, r8
 800c146:	464b      	mov	r3, r9
 800c148:	4620      	mov	r0, r4
 800c14a:	4629      	mov	r1, r5
 800c14c:	f7f4 fec2 	bl	8000ed4 <__aeabi_ldivmod>
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	4613      	mov	r3, r2
 800c156:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	4a12      	ldr	r2, [pc, #72]	; (800c1a4 <getValueBaudRate+0x98>)
 800c15c:	fba2 2303 	umull	r2, r3, r2, r3
 800c160:	0b5b      	lsrs	r3, r3, #13
 800c162:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	f242 7210 	movw	r2, #10000	; 0x2710
 800c16a:	fb02 f303 	mul.w	r3, r2, r3
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	1ad3      	subs	r3, r2, r3
 800c172:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800c17a:	4a0a      	ldr	r2, [pc, #40]	; (800c1a4 <getValueBaudRate+0x98>)
 800c17c:	fba2 2303 	umull	r2, r3, r2, r3
 800c180:	0a5b      	lsrs	r3, r3, #9
 800c182:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	b29b      	uxth	r3, r3
 800c188:	011b      	lsls	r3, r3, #4
 800c18a:	b29a      	uxth	r2, r3
 800c18c:	7afb      	ldrb	r3, [r7, #11]
 800c18e:	b29b      	uxth	r3, r3
 800c190:	4313      	orrs	r3, r2
 800c192:	813b      	strh	r3, [r7, #8]

    return value;
 800c194:	893b      	ldrh	r3, [r7, #8]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3718      	adds	r7, #24
 800c19a:	46bd      	mov	sp, r7
 800c19c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c1a0:	540be400 	.word	0x540be400
 800c1a4:	d1b71759 	.word	0xd1b71759

0800c1a8 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 800c1b4:	e000      	b.n	800c1b8 <writeChar+0x10>
	{
		__NOP();
 800c1b6:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d0f7      	beq.n	800c1b6 <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	78fa      	ldrb	r2, [r7, #3]
 800c1cc:	605a      	str	r2, [r3, #4]

}
 800c1ce:	bf00      	nop
 800c1d0:	370c      	adds	r7, #12
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr

0800c1da <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 800c1e8:	e00a      	b.n	800c200 <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 800c1ea:	7bfb      	ldrb	r3, [r7, #15]
 800c1ec:	683a      	ldr	r2, [r7, #0]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7ff ffd7 	bl	800c1a8 <writeChar>
		i++;
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 800c200:	7bfb      	ldrb	r3, [r7, #15]
 800c202:	683a      	ldr	r2, [r7, #0]
 800c204:	4413      	add	r3, r2
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1ee      	bne.n	800c1ea <writeMsg+0x10>
	}
}
 800c20c:	bf00      	nop
 800c20e:	bf00      	nop
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
	...

0800c218 <getRxData>:
	}
}

//Funcion para leer un char
uint8_t getRxData(void)
{
 800c218:	b480      	push	{r7}
 800c21a:	af00      	add	r7, sp, #0
	return auxRxData;
 800c21c:	4b03      	ldr	r3, [pc, #12]	; (800c22c <getRxData+0x14>)
 800c21e:	781b      	ldrb	r3, [r3, #0]
}
 800c220:	4618      	mov	r0, r3
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	20013324 	.word	0x20013324

0800c230 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	460b      	mov	r3, r1
 800c23a:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 800c23c:	78fb      	ldrb	r3, [r7, #3]
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d10c      	bne.n	800c25c <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 800c25a:	e005      	b.n	800c268 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	60da      	str	r2, [r3, #12]
}
 800c268:	bf00      	nop
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <BasicUSART2_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART2_Callback()
{
 800c274:	b480      	push	{r7}
 800c276:	af00      	add	r7, sp, #0
	__NOP();
 800c278:	bf00      	nop
}
 800c27a:	bf00      	nop
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <BasicUSART6_Callback>:


__attribute__((weak)) void BasicUSART6_Callback()
{
 800c284:	b480      	push	{r7}
 800c286:	af00      	add	r7, sp, #0
	__NOP();
 800c288:	bf00      	nop
}
 800c28a:	bf00      	nop
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 800c298:	4b37      	ldr	r3, [pc, #220]	; (800c378 <USART1_IRQHandler+0xe4>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f003 0320 	and.w	r3, r3, #32
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d008      	beq.n	800c2b8 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 800c2a6:	4b34      	ldr	r3, [pc, #208]	; (800c378 <USART1_IRQHandler+0xe4>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	4b33      	ldr	r3, [pc, #204]	; (800c37c <USART1_IRQHandler+0xe8>)
 800c2b0:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 800c2b2:	f7f7 fde3 	bl	8003e7c <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 800c2b6:	e05d      	b.n	800c374 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 800c2b8:	4b2f      	ldr	r3, [pc, #188]	; (800c378 <USART1_IRQHandler+0xe4>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d055      	beq.n	800c372 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800c2c6:	4b2e      	ldr	r3, [pc, #184]	; (800c380 <USART1_IRQHandler+0xec>)
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d10b      	bne.n	800c2e6 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 800c2ce:	4b2d      	ldr	r3, [pc, #180]	; (800c384 <USART1_IRQHandler+0xf0>)
 800c2d0:	781a      	ldrb	r2, [r3, #0]
 800c2d2:	4b29      	ldr	r3, [pc, #164]	; (800c378 <USART1_IRQHandler+0xe4>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 800c2d8:	4b27      	ldr	r3, [pc, #156]	; (800c378 <USART1_IRQHandler+0xe4>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2100      	movs	r1, #0
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7ff ffa6 	bl	800c230 <interruptionTX>
}
 800c2e4:	e046      	b.n	800c374 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800c2e6:	4b26      	ldr	r3, [pc, #152]	; (800c380 <USART1_IRQHandler+0xec>)
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d142      	bne.n	800c374 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800c2ee:	4b26      	ldr	r3, [pc, #152]	; (800c388 <USART1_IRQHandler+0xf4>)
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	4b25      	ldr	r3, [pc, #148]	; (800c38c <USART1_IRQHandler+0xf8>)
 800c2f6:	5c9b      	ldrb	r3, [r3, r2]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00e      	beq.n	800c31a <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 800c2fc:	4b22      	ldr	r3, [pc, #136]	; (800c388 <USART1_IRQHandler+0xf4>)
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	461a      	mov	r2, r3
 800c302:	4b22      	ldr	r3, [pc, #136]	; (800c38c <USART1_IRQHandler+0xf8>)
 800c304:	5c9a      	ldrb	r2, [r3, r2]
 800c306:	4b1c      	ldr	r3, [pc, #112]	; (800c378 <USART1_IRQHandler+0xe4>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	605a      	str	r2, [r3, #4]
				posChar++;
 800c30c:	4b1e      	ldr	r3, [pc, #120]	; (800c388 <USART1_IRQHandler+0xf4>)
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	3301      	adds	r3, #1
 800c312:	b2da      	uxtb	r2, r3
 800c314:	4b1c      	ldr	r3, [pc, #112]	; (800c388 <USART1_IRQHandler+0xf4>)
 800c316:	701a      	strb	r2, [r3, #0]
}
 800c318:	e02c      	b.n	800c374 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800c31a:	4b1d      	ldr	r3, [pc, #116]	; (800c390 <USART1_IRQHandler+0xfc>)
 800c31c:	781a      	ldrb	r2, [r3, #0]
 800c31e:	4b1d      	ldr	r3, [pc, #116]	; (800c394 <USART1_IRQHandler+0x100>)
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	429a      	cmp	r2, r3
 800c324:	d215      	bcs.n	800c352 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800c326:	4b1a      	ldr	r3, [pc, #104]	; (800c390 <USART1_IRQHandler+0xfc>)
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	461a      	mov	r2, r3
 800c32c:	2364      	movs	r3, #100	; 0x64
 800c32e:	fb02 f303 	mul.w	r3, r2, r3
 800c332:	4a19      	ldr	r2, [pc, #100]	; (800c398 <USART1_IRQHandler+0x104>)
 800c334:	4413      	add	r3, r2
 800c336:	4619      	mov	r1, r3
 800c338:	4814      	ldr	r0, [pc, #80]	; (800c38c <USART1_IRQHandler+0xf8>)
 800c33a:	f000 ffff 	bl	800d33c <siprintf>
					posChar = 0;
 800c33e:	4b12      	ldr	r3, [pc, #72]	; (800c388 <USART1_IRQHandler+0xf4>)
 800c340:	2200      	movs	r2, #0
 800c342:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 800c344:	4b12      	ldr	r3, [pc, #72]	; (800c390 <USART1_IRQHandler+0xfc>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	3301      	adds	r3, #1
 800c34a:	b2da      	uxtb	r2, r3
 800c34c:	4b10      	ldr	r3, [pc, #64]	; (800c390 <USART1_IRQHandler+0xfc>)
 800c34e:	701a      	strb	r2, [r3, #0]
}
 800c350:	e010      	b.n	800c374 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 800c352:	4b09      	ldr	r3, [pc, #36]	; (800c378 <USART1_IRQHandler+0xe4>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2100      	movs	r1, #0
 800c358:	4618      	mov	r0, r3
 800c35a:	f7ff ff69 	bl	800c230 <interruptionTX>
					posChar = 0;
 800c35e:	4b0a      	ldr	r3, [pc, #40]	; (800c388 <USART1_IRQHandler+0xf4>)
 800c360:	2200      	movs	r2, #0
 800c362:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800c364:	4b0a      	ldr	r3, [pc, #40]	; (800c390 <USART1_IRQHandler+0xfc>)
 800c366:	2200      	movs	r2, #0
 800c368:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800c36a:	4b0a      	ldr	r3, [pc, #40]	; (800c394 <USART1_IRQHandler+0x100>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	701a      	strb	r2, [r3, #0]
}
 800c370:	e000      	b.n	800c374 <USART1_IRQHandler+0xe0>
		__NOP();
 800c372:	bf00      	nop
}
 800c374:	bf00      	nop
 800c376:	bd80      	pop	{r7, pc}
 800c378:	20013318 	.word	0x20013318
 800c37c:	20013324 	.word	0x20013324
 800c380:	20013b5f 	.word	0x20013b5f
 800c384:	20013325 	.word	0x20013325
 800c388:	20013b5e 	.word	0x20013b5e
 800c38c:	20013328 	.word	0x20013328
 800c390:	20013b5d 	.word	0x20013b5d
 800c394:	20013b5c 	.word	0x20013b5c
 800c398:	2001338c 	.word	0x2001338c

0800c39c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 800c3a0:	4b37      	ldr	r3, [pc, #220]	; (800c480 <USART2_IRQHandler+0xe4>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f003 0320 	and.w	r3, r3, #32
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d008      	beq.n	800c3c0 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 800c3ae:	4b34      	ldr	r3, [pc, #208]	; (800c480 <USART2_IRQHandler+0xe4>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	b2da      	uxtb	r2, r3
 800c3b6:	4b33      	ldr	r3, [pc, #204]	; (800c484 <USART2_IRQHandler+0xe8>)
 800c3b8:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 800c3ba:	f7ff ff5b 	bl	800c274 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 800c3be:	e05d      	b.n	800c47c <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 800c3c0:	4b2f      	ldr	r3, [pc, #188]	; (800c480 <USART2_IRQHandler+0xe4>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d055      	beq.n	800c47a <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800c3ce:	4b2e      	ldr	r3, [pc, #184]	; (800c488 <USART2_IRQHandler+0xec>)
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d10b      	bne.n	800c3ee <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 800c3d6:	4b2d      	ldr	r3, [pc, #180]	; (800c48c <USART2_IRQHandler+0xf0>)
 800c3d8:	781a      	ldrb	r2, [r3, #0]
 800c3da:	4b29      	ldr	r3, [pc, #164]	; (800c480 <USART2_IRQHandler+0xe4>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800c3e0:	4b27      	ldr	r3, [pc, #156]	; (800c480 <USART2_IRQHandler+0xe4>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff ff22 	bl	800c230 <interruptionTX>
}
 800c3ec:	e046      	b.n	800c47c <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800c3ee:	4b26      	ldr	r3, [pc, #152]	; (800c488 <USART2_IRQHandler+0xec>)
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d142      	bne.n	800c47c <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800c3f6:	4b26      	ldr	r3, [pc, #152]	; (800c490 <USART2_IRQHandler+0xf4>)
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	4b25      	ldr	r3, [pc, #148]	; (800c494 <USART2_IRQHandler+0xf8>)
 800c3fe:	5c9b      	ldrb	r3, [r3, r2]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00e      	beq.n	800c422 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 800c404:	4b22      	ldr	r3, [pc, #136]	; (800c490 <USART2_IRQHandler+0xf4>)
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	461a      	mov	r2, r3
 800c40a:	4b22      	ldr	r3, [pc, #136]	; (800c494 <USART2_IRQHandler+0xf8>)
 800c40c:	5c9a      	ldrb	r2, [r3, r2]
 800c40e:	4b1c      	ldr	r3, [pc, #112]	; (800c480 <USART2_IRQHandler+0xe4>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	605a      	str	r2, [r3, #4]
				posChar++;
 800c414:	4b1e      	ldr	r3, [pc, #120]	; (800c490 <USART2_IRQHandler+0xf4>)
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	3301      	adds	r3, #1
 800c41a:	b2da      	uxtb	r2, r3
 800c41c:	4b1c      	ldr	r3, [pc, #112]	; (800c490 <USART2_IRQHandler+0xf4>)
 800c41e:	701a      	strb	r2, [r3, #0]
}
 800c420:	e02c      	b.n	800c47c <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800c422:	4b1d      	ldr	r3, [pc, #116]	; (800c498 <USART2_IRQHandler+0xfc>)
 800c424:	781a      	ldrb	r2, [r3, #0]
 800c426:	4b1d      	ldr	r3, [pc, #116]	; (800c49c <USART2_IRQHandler+0x100>)
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d215      	bcs.n	800c45a <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800c42e:	4b1a      	ldr	r3, [pc, #104]	; (800c498 <USART2_IRQHandler+0xfc>)
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	461a      	mov	r2, r3
 800c434:	2364      	movs	r3, #100	; 0x64
 800c436:	fb02 f303 	mul.w	r3, r2, r3
 800c43a:	4a19      	ldr	r2, [pc, #100]	; (800c4a0 <USART2_IRQHandler+0x104>)
 800c43c:	4413      	add	r3, r2
 800c43e:	4619      	mov	r1, r3
 800c440:	4814      	ldr	r0, [pc, #80]	; (800c494 <USART2_IRQHandler+0xf8>)
 800c442:	f000 ff7b 	bl	800d33c <siprintf>
					posChar = 0;
 800c446:	4b12      	ldr	r3, [pc, #72]	; (800c490 <USART2_IRQHandler+0xf4>)
 800c448:	2200      	movs	r2, #0
 800c44a:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 800c44c:	4b12      	ldr	r3, [pc, #72]	; (800c498 <USART2_IRQHandler+0xfc>)
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	3301      	adds	r3, #1
 800c452:	b2da      	uxtb	r2, r3
 800c454:	4b10      	ldr	r3, [pc, #64]	; (800c498 <USART2_IRQHandler+0xfc>)
 800c456:	701a      	strb	r2, [r3, #0]
}
 800c458:	e010      	b.n	800c47c <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800c45a:	4b09      	ldr	r3, [pc, #36]	; (800c480 <USART2_IRQHandler+0xe4>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2100      	movs	r1, #0
 800c460:	4618      	mov	r0, r3
 800c462:	f7ff fee5 	bl	800c230 <interruptionTX>
					posChar = 0;
 800c466:	4b0a      	ldr	r3, [pc, #40]	; (800c490 <USART2_IRQHandler+0xf4>)
 800c468:	2200      	movs	r2, #0
 800c46a:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800c46c:	4b0a      	ldr	r3, [pc, #40]	; (800c498 <USART2_IRQHandler+0xfc>)
 800c46e:	2200      	movs	r2, #0
 800c470:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800c472:	4b0a      	ldr	r3, [pc, #40]	; (800c49c <USART2_IRQHandler+0x100>)
 800c474:	2200      	movs	r2, #0
 800c476:	701a      	strb	r2, [r3, #0]
}
 800c478:	e000      	b.n	800c47c <USART2_IRQHandler+0xe0>
		__NOP();
 800c47a:	bf00      	nop
}
 800c47c:	bf00      	nop
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	2001331c 	.word	0x2001331c
 800c484:	20013324 	.word	0x20013324
 800c488:	20013b5f 	.word	0x20013b5f
 800c48c:	20013325 	.word	0x20013325
 800c490:	20013b5e 	.word	0x20013b5e
 800c494:	20013328 	.word	0x20013328
 800c498:	20013b5d 	.word	0x20013b5d
 800c49c:	20013b5c 	.word	0x20013b5c
 800c4a0:	2001338c 	.word	0x2001338c

0800c4a4 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 800c4a8:	4b37      	ldr	r3, [pc, #220]	; (800c588 <USART6_IRQHandler+0xe4>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f003 0320 	and.w	r3, r3, #32
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d008      	beq.n	800c4c8 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 800c4b6:	4b34      	ldr	r3, [pc, #208]	; (800c588 <USART6_IRQHandler+0xe4>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	4b33      	ldr	r3, [pc, #204]	; (800c58c <USART6_IRQHandler+0xe8>)
 800c4c0:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 800c4c2:	f7ff fedf 	bl	800c284 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 800c4c6:	e05d      	b.n	800c584 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 800c4c8:	4b2f      	ldr	r3, [pc, #188]	; (800c588 <USART6_IRQHandler+0xe4>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d055      	beq.n	800c582 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800c4d6:	4b2e      	ldr	r3, [pc, #184]	; (800c590 <USART6_IRQHandler+0xec>)
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10b      	bne.n	800c4f6 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 800c4de:	4b2d      	ldr	r3, [pc, #180]	; (800c594 <USART6_IRQHandler+0xf0>)
 800c4e0:	781a      	ldrb	r2, [r3, #0]
 800c4e2:	4b29      	ldr	r3, [pc, #164]	; (800c588 <USART6_IRQHandler+0xe4>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800c4e8:	4b27      	ldr	r3, [pc, #156]	; (800c588 <USART6_IRQHandler+0xe4>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7ff fe9e 	bl	800c230 <interruptionTX>
}
 800c4f4:	e046      	b.n	800c584 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800c4f6:	4b26      	ldr	r3, [pc, #152]	; (800c590 <USART6_IRQHandler+0xec>)
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d142      	bne.n	800c584 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800c4fe:	4b26      	ldr	r3, [pc, #152]	; (800c598 <USART6_IRQHandler+0xf4>)
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	461a      	mov	r2, r3
 800c504:	4b25      	ldr	r3, [pc, #148]	; (800c59c <USART6_IRQHandler+0xf8>)
 800c506:	5c9b      	ldrb	r3, [r3, r2]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00e      	beq.n	800c52a <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 800c50c:	4b22      	ldr	r3, [pc, #136]	; (800c598 <USART6_IRQHandler+0xf4>)
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	461a      	mov	r2, r3
 800c512:	4b22      	ldr	r3, [pc, #136]	; (800c59c <USART6_IRQHandler+0xf8>)
 800c514:	5c9a      	ldrb	r2, [r3, r2]
 800c516:	4b1c      	ldr	r3, [pc, #112]	; (800c588 <USART6_IRQHandler+0xe4>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	605a      	str	r2, [r3, #4]
				posChar++;
 800c51c:	4b1e      	ldr	r3, [pc, #120]	; (800c598 <USART6_IRQHandler+0xf4>)
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	3301      	adds	r3, #1
 800c522:	b2da      	uxtb	r2, r3
 800c524:	4b1c      	ldr	r3, [pc, #112]	; (800c598 <USART6_IRQHandler+0xf4>)
 800c526:	701a      	strb	r2, [r3, #0]
}
 800c528:	e02c      	b.n	800c584 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800c52a:	4b1d      	ldr	r3, [pc, #116]	; (800c5a0 <USART6_IRQHandler+0xfc>)
 800c52c:	781a      	ldrb	r2, [r3, #0]
 800c52e:	4b1d      	ldr	r3, [pc, #116]	; (800c5a4 <USART6_IRQHandler+0x100>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	429a      	cmp	r2, r3
 800c534:	d215      	bcs.n	800c562 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800c536:	4b1a      	ldr	r3, [pc, #104]	; (800c5a0 <USART6_IRQHandler+0xfc>)
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	461a      	mov	r2, r3
 800c53c:	2364      	movs	r3, #100	; 0x64
 800c53e:	fb02 f303 	mul.w	r3, r2, r3
 800c542:	4a19      	ldr	r2, [pc, #100]	; (800c5a8 <USART6_IRQHandler+0x104>)
 800c544:	4413      	add	r3, r2
 800c546:	4619      	mov	r1, r3
 800c548:	4814      	ldr	r0, [pc, #80]	; (800c59c <USART6_IRQHandler+0xf8>)
 800c54a:	f000 fef7 	bl	800d33c <siprintf>
					posChar = 0;
 800c54e:	4b12      	ldr	r3, [pc, #72]	; (800c598 <USART6_IRQHandler+0xf4>)
 800c550:	2200      	movs	r2, #0
 800c552:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 800c554:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <USART6_IRQHandler+0xfc>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	3301      	adds	r3, #1
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	4b10      	ldr	r3, [pc, #64]	; (800c5a0 <USART6_IRQHandler+0xfc>)
 800c55e:	701a      	strb	r2, [r3, #0]
}
 800c560:	e010      	b.n	800c584 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800c562:	4b09      	ldr	r3, [pc, #36]	; (800c588 <USART6_IRQHandler+0xe4>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2100      	movs	r1, #0
 800c568:	4618      	mov	r0, r3
 800c56a:	f7ff fe61 	bl	800c230 <interruptionTX>
					posChar = 0;
 800c56e:	4b0a      	ldr	r3, [pc, #40]	; (800c598 <USART6_IRQHandler+0xf4>)
 800c570:	2200      	movs	r2, #0
 800c572:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800c574:	4b0a      	ldr	r3, [pc, #40]	; (800c5a0 <USART6_IRQHandler+0xfc>)
 800c576:	2200      	movs	r2, #0
 800c578:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800c57a:	4b0a      	ldr	r3, [pc, #40]	; (800c5a4 <USART6_IRQHandler+0x100>)
 800c57c:	2200      	movs	r2, #0
 800c57e:	701a      	strb	r2, [r3, #0]
}
 800c580:	e000      	b.n	800c584 <USART6_IRQHandler+0xe0>
		__NOP();
 800c582:	bf00      	nop
}
 800c584:	bf00      	nop
 800c586:	bd80      	pop	{r7, pc}
 800c588:	20013320 	.word	0x20013320
 800c58c:	20013324 	.word	0x20013324
 800c590:	20013b5f 	.word	0x20013b5f
 800c594:	20013325 	.word	0x20013325
 800c598:	20013b5e 	.word	0x20013b5e
 800c59c:	20013328 	.word	0x20013328
 800c5a0:	20013b5d 	.word	0x20013b5d
 800c5a4:	20013b5c 	.word	0x20013b5c
 800c5a8:	2001338c 	.word	0x2001338c

0800c5ac <atof>:
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	f001 bd7f 	b.w	800e0b0 <strtod>

0800c5b2 <atoi>:
 800c5b2:	220a      	movs	r2, #10
 800c5b4:	2100      	movs	r1, #0
 800c5b6:	f001 be0b 	b.w	800e1d0 <strtol>
	...

0800c5bc <__errno>:
 800c5bc:	4b01      	ldr	r3, [pc, #4]	; (800c5c4 <__errno+0x8>)
 800c5be:	6818      	ldr	r0, [r3, #0]
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	2000003c 	.word	0x2000003c

0800c5c8 <__libc_init_array>:
 800c5c8:	b570      	push	{r4, r5, r6, lr}
 800c5ca:	4d0d      	ldr	r5, [pc, #52]	; (800c600 <__libc_init_array+0x38>)
 800c5cc:	4c0d      	ldr	r4, [pc, #52]	; (800c604 <__libc_init_array+0x3c>)
 800c5ce:	1b64      	subs	r4, r4, r5
 800c5d0:	10a4      	asrs	r4, r4, #2
 800c5d2:	2600      	movs	r6, #0
 800c5d4:	42a6      	cmp	r6, r4
 800c5d6:	d109      	bne.n	800c5ec <__libc_init_array+0x24>
 800c5d8:	4d0b      	ldr	r5, [pc, #44]	; (800c608 <__libc_init_array+0x40>)
 800c5da:	4c0c      	ldr	r4, [pc, #48]	; (800c60c <__libc_init_array+0x44>)
 800c5dc:	f007 fda2 	bl	8014124 <_init>
 800c5e0:	1b64      	subs	r4, r4, r5
 800c5e2:	10a4      	asrs	r4, r4, #2
 800c5e4:	2600      	movs	r6, #0
 800c5e6:	42a6      	cmp	r6, r4
 800c5e8:	d105      	bne.n	800c5f6 <__libc_init_array+0x2e>
 800c5ea:	bd70      	pop	{r4, r5, r6, pc}
 800c5ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5f0:	4798      	blx	r3
 800c5f2:	3601      	adds	r6, #1
 800c5f4:	e7ee      	b.n	800c5d4 <__libc_init_array+0xc>
 800c5f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5fa:	4798      	blx	r3
 800c5fc:	3601      	adds	r6, #1
 800c5fe:	e7f2      	b.n	800c5e6 <__libc_init_array+0x1e>
 800c600:	08014b20 	.word	0x08014b20
 800c604:	08014b20 	.word	0x08014b20
 800c608:	08014b20 	.word	0x08014b20
 800c60c:	08014b24 	.word	0x08014b24

0800c610 <memcpy>:
 800c610:	440a      	add	r2, r1
 800c612:	4291      	cmp	r1, r2
 800c614:	f100 33ff 	add.w	r3, r0, #4294967295
 800c618:	d100      	bne.n	800c61c <memcpy+0xc>
 800c61a:	4770      	bx	lr
 800c61c:	b510      	push	{r4, lr}
 800c61e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c622:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c626:	4291      	cmp	r1, r2
 800c628:	d1f9      	bne.n	800c61e <memcpy+0xe>
 800c62a:	bd10      	pop	{r4, pc}

0800c62c <memset>:
 800c62c:	4402      	add	r2, r0
 800c62e:	4603      	mov	r3, r0
 800c630:	4293      	cmp	r3, r2
 800c632:	d100      	bne.n	800c636 <memset+0xa>
 800c634:	4770      	bx	lr
 800c636:	f803 1b01 	strb.w	r1, [r3], #1
 800c63a:	e7f9      	b.n	800c630 <memset+0x4>

0800c63c <__cvt>:
 800c63c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c640:	ec55 4b10 	vmov	r4, r5, d0
 800c644:	2d00      	cmp	r5, #0
 800c646:	460e      	mov	r6, r1
 800c648:	4619      	mov	r1, r3
 800c64a:	462b      	mov	r3, r5
 800c64c:	bfbb      	ittet	lt
 800c64e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c652:	461d      	movlt	r5, r3
 800c654:	2300      	movge	r3, #0
 800c656:	232d      	movlt	r3, #45	; 0x2d
 800c658:	700b      	strb	r3, [r1, #0]
 800c65a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c65c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c660:	4691      	mov	r9, r2
 800c662:	f023 0820 	bic.w	r8, r3, #32
 800c666:	bfbc      	itt	lt
 800c668:	4622      	movlt	r2, r4
 800c66a:	4614      	movlt	r4, r2
 800c66c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c670:	d005      	beq.n	800c67e <__cvt+0x42>
 800c672:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c676:	d100      	bne.n	800c67a <__cvt+0x3e>
 800c678:	3601      	adds	r6, #1
 800c67a:	2102      	movs	r1, #2
 800c67c:	e000      	b.n	800c680 <__cvt+0x44>
 800c67e:	2103      	movs	r1, #3
 800c680:	ab03      	add	r3, sp, #12
 800c682:	9301      	str	r3, [sp, #4]
 800c684:	ab02      	add	r3, sp, #8
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	ec45 4b10 	vmov	d0, r4, r5
 800c68c:	4653      	mov	r3, sl
 800c68e:	4632      	mov	r2, r6
 800c690:	f001 fe56 	bl	800e340 <_dtoa_r>
 800c694:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c698:	4607      	mov	r7, r0
 800c69a:	d102      	bne.n	800c6a2 <__cvt+0x66>
 800c69c:	f019 0f01 	tst.w	r9, #1
 800c6a0:	d022      	beq.n	800c6e8 <__cvt+0xac>
 800c6a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c6a6:	eb07 0906 	add.w	r9, r7, r6
 800c6aa:	d110      	bne.n	800c6ce <__cvt+0x92>
 800c6ac:	783b      	ldrb	r3, [r7, #0]
 800c6ae:	2b30      	cmp	r3, #48	; 0x30
 800c6b0:	d10a      	bne.n	800c6c8 <__cvt+0x8c>
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	f7f4 fa1d 	bl	8000af8 <__aeabi_dcmpeq>
 800c6be:	b918      	cbnz	r0, 800c6c8 <__cvt+0x8c>
 800c6c0:	f1c6 0601 	rsb	r6, r6, #1
 800c6c4:	f8ca 6000 	str.w	r6, [sl]
 800c6c8:	f8da 3000 	ldr.w	r3, [sl]
 800c6cc:	4499      	add	r9, r3
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	f7f4 fa0f 	bl	8000af8 <__aeabi_dcmpeq>
 800c6da:	b108      	cbz	r0, 800c6e0 <__cvt+0xa4>
 800c6dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c6e0:	2230      	movs	r2, #48	; 0x30
 800c6e2:	9b03      	ldr	r3, [sp, #12]
 800c6e4:	454b      	cmp	r3, r9
 800c6e6:	d307      	bcc.n	800c6f8 <__cvt+0xbc>
 800c6e8:	9b03      	ldr	r3, [sp, #12]
 800c6ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6ec:	1bdb      	subs	r3, r3, r7
 800c6ee:	4638      	mov	r0, r7
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	b004      	add	sp, #16
 800c6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f8:	1c59      	adds	r1, r3, #1
 800c6fa:	9103      	str	r1, [sp, #12]
 800c6fc:	701a      	strb	r2, [r3, #0]
 800c6fe:	e7f0      	b.n	800c6e2 <__cvt+0xa6>

0800c700 <__exponent>:
 800c700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c702:	4603      	mov	r3, r0
 800c704:	2900      	cmp	r1, #0
 800c706:	bfb8      	it	lt
 800c708:	4249      	neglt	r1, r1
 800c70a:	f803 2b02 	strb.w	r2, [r3], #2
 800c70e:	bfb4      	ite	lt
 800c710:	222d      	movlt	r2, #45	; 0x2d
 800c712:	222b      	movge	r2, #43	; 0x2b
 800c714:	2909      	cmp	r1, #9
 800c716:	7042      	strb	r2, [r0, #1]
 800c718:	dd2a      	ble.n	800c770 <__exponent+0x70>
 800c71a:	f10d 0407 	add.w	r4, sp, #7
 800c71e:	46a4      	mov	ip, r4
 800c720:	270a      	movs	r7, #10
 800c722:	46a6      	mov	lr, r4
 800c724:	460a      	mov	r2, r1
 800c726:	fb91 f6f7 	sdiv	r6, r1, r7
 800c72a:	fb07 1516 	mls	r5, r7, r6, r1
 800c72e:	3530      	adds	r5, #48	; 0x30
 800c730:	2a63      	cmp	r2, #99	; 0x63
 800c732:	f104 34ff 	add.w	r4, r4, #4294967295
 800c736:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c73a:	4631      	mov	r1, r6
 800c73c:	dcf1      	bgt.n	800c722 <__exponent+0x22>
 800c73e:	3130      	adds	r1, #48	; 0x30
 800c740:	f1ae 0502 	sub.w	r5, lr, #2
 800c744:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c748:	1c44      	adds	r4, r0, #1
 800c74a:	4629      	mov	r1, r5
 800c74c:	4561      	cmp	r1, ip
 800c74e:	d30a      	bcc.n	800c766 <__exponent+0x66>
 800c750:	f10d 0209 	add.w	r2, sp, #9
 800c754:	eba2 020e 	sub.w	r2, r2, lr
 800c758:	4565      	cmp	r5, ip
 800c75a:	bf88      	it	hi
 800c75c:	2200      	movhi	r2, #0
 800c75e:	4413      	add	r3, r2
 800c760:	1a18      	subs	r0, r3, r0
 800c762:	b003      	add	sp, #12
 800c764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c76a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c76e:	e7ed      	b.n	800c74c <__exponent+0x4c>
 800c770:	2330      	movs	r3, #48	; 0x30
 800c772:	3130      	adds	r1, #48	; 0x30
 800c774:	7083      	strb	r3, [r0, #2]
 800c776:	70c1      	strb	r1, [r0, #3]
 800c778:	1d03      	adds	r3, r0, #4
 800c77a:	e7f1      	b.n	800c760 <__exponent+0x60>

0800c77c <_printf_float>:
 800c77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c780:	ed2d 8b02 	vpush	{d8}
 800c784:	b08d      	sub	sp, #52	; 0x34
 800c786:	460c      	mov	r4, r1
 800c788:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c78c:	4616      	mov	r6, r2
 800c78e:	461f      	mov	r7, r3
 800c790:	4605      	mov	r5, r0
 800c792:	f002 ff33 	bl	800f5fc <_localeconv_r>
 800c796:	f8d0 a000 	ldr.w	sl, [r0]
 800c79a:	4650      	mov	r0, sl
 800c79c:	f7f3 fd2a 	bl	80001f4 <strlen>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c7a4:	6823      	ldr	r3, [r4, #0]
 800c7a6:	9305      	str	r3, [sp, #20]
 800c7a8:	f8d8 3000 	ldr.w	r3, [r8]
 800c7ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c7b0:	3307      	adds	r3, #7
 800c7b2:	f023 0307 	bic.w	r3, r3, #7
 800c7b6:	f103 0208 	add.w	r2, r3, #8
 800c7ba:	f8c8 2000 	str.w	r2, [r8]
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c7c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c7ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c7ce:	9307      	str	r3, [sp, #28]
 800c7d0:	f8cd 8018 	str.w	r8, [sp, #24]
 800c7d4:	ee08 0a10 	vmov	s16, r0
 800c7d8:	4b9f      	ldr	r3, [pc, #636]	; (800ca58 <_printf_float+0x2dc>)
 800c7da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7de:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e2:	f7f4 f9bb 	bl	8000b5c <__aeabi_dcmpun>
 800c7e6:	bb88      	cbnz	r0, 800c84c <_printf_float+0xd0>
 800c7e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7ec:	4b9a      	ldr	r3, [pc, #616]	; (800ca58 <_printf_float+0x2dc>)
 800c7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c7f2:	f7f4 f995 	bl	8000b20 <__aeabi_dcmple>
 800c7f6:	bb48      	cbnz	r0, 800c84c <_printf_float+0xd0>
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	4640      	mov	r0, r8
 800c7fe:	4649      	mov	r1, r9
 800c800:	f7f4 f984 	bl	8000b0c <__aeabi_dcmplt>
 800c804:	b110      	cbz	r0, 800c80c <_printf_float+0x90>
 800c806:	232d      	movs	r3, #45	; 0x2d
 800c808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c80c:	4b93      	ldr	r3, [pc, #588]	; (800ca5c <_printf_float+0x2e0>)
 800c80e:	4894      	ldr	r0, [pc, #592]	; (800ca60 <_printf_float+0x2e4>)
 800c810:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c814:	bf94      	ite	ls
 800c816:	4698      	movls	r8, r3
 800c818:	4680      	movhi	r8, r0
 800c81a:	2303      	movs	r3, #3
 800c81c:	6123      	str	r3, [r4, #16]
 800c81e:	9b05      	ldr	r3, [sp, #20]
 800c820:	f023 0204 	bic.w	r2, r3, #4
 800c824:	6022      	str	r2, [r4, #0]
 800c826:	f04f 0900 	mov.w	r9, #0
 800c82a:	9700      	str	r7, [sp, #0]
 800c82c:	4633      	mov	r3, r6
 800c82e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c830:	4621      	mov	r1, r4
 800c832:	4628      	mov	r0, r5
 800c834:	f000 f9d8 	bl	800cbe8 <_printf_common>
 800c838:	3001      	adds	r0, #1
 800c83a:	f040 8090 	bne.w	800c95e <_printf_float+0x1e2>
 800c83e:	f04f 30ff 	mov.w	r0, #4294967295
 800c842:	b00d      	add	sp, #52	; 0x34
 800c844:	ecbd 8b02 	vpop	{d8}
 800c848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c84c:	4642      	mov	r2, r8
 800c84e:	464b      	mov	r3, r9
 800c850:	4640      	mov	r0, r8
 800c852:	4649      	mov	r1, r9
 800c854:	f7f4 f982 	bl	8000b5c <__aeabi_dcmpun>
 800c858:	b140      	cbz	r0, 800c86c <_printf_float+0xf0>
 800c85a:	464b      	mov	r3, r9
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	bfbc      	itt	lt
 800c860:	232d      	movlt	r3, #45	; 0x2d
 800c862:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c866:	487f      	ldr	r0, [pc, #508]	; (800ca64 <_printf_float+0x2e8>)
 800c868:	4b7f      	ldr	r3, [pc, #508]	; (800ca68 <_printf_float+0x2ec>)
 800c86a:	e7d1      	b.n	800c810 <_printf_float+0x94>
 800c86c:	6863      	ldr	r3, [r4, #4]
 800c86e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c872:	9206      	str	r2, [sp, #24]
 800c874:	1c5a      	adds	r2, r3, #1
 800c876:	d13f      	bne.n	800c8f8 <_printf_float+0x17c>
 800c878:	2306      	movs	r3, #6
 800c87a:	6063      	str	r3, [r4, #4]
 800c87c:	9b05      	ldr	r3, [sp, #20]
 800c87e:	6861      	ldr	r1, [r4, #4]
 800c880:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c884:	2300      	movs	r3, #0
 800c886:	9303      	str	r3, [sp, #12]
 800c888:	ab0a      	add	r3, sp, #40	; 0x28
 800c88a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c88e:	ab09      	add	r3, sp, #36	; 0x24
 800c890:	ec49 8b10 	vmov	d0, r8, r9
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	6022      	str	r2, [r4, #0]
 800c898:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c89c:	4628      	mov	r0, r5
 800c89e:	f7ff fecd 	bl	800c63c <__cvt>
 800c8a2:	9b06      	ldr	r3, [sp, #24]
 800c8a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8a6:	2b47      	cmp	r3, #71	; 0x47
 800c8a8:	4680      	mov	r8, r0
 800c8aa:	d108      	bne.n	800c8be <_printf_float+0x142>
 800c8ac:	1cc8      	adds	r0, r1, #3
 800c8ae:	db02      	blt.n	800c8b6 <_printf_float+0x13a>
 800c8b0:	6863      	ldr	r3, [r4, #4]
 800c8b2:	4299      	cmp	r1, r3
 800c8b4:	dd41      	ble.n	800c93a <_printf_float+0x1be>
 800c8b6:	f1ab 0b02 	sub.w	fp, fp, #2
 800c8ba:	fa5f fb8b 	uxtb.w	fp, fp
 800c8be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c8c2:	d820      	bhi.n	800c906 <_printf_float+0x18a>
 800c8c4:	3901      	subs	r1, #1
 800c8c6:	465a      	mov	r2, fp
 800c8c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c8cc:	9109      	str	r1, [sp, #36]	; 0x24
 800c8ce:	f7ff ff17 	bl	800c700 <__exponent>
 800c8d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8d4:	1813      	adds	r3, r2, r0
 800c8d6:	2a01      	cmp	r2, #1
 800c8d8:	4681      	mov	r9, r0
 800c8da:	6123      	str	r3, [r4, #16]
 800c8dc:	dc02      	bgt.n	800c8e4 <_printf_float+0x168>
 800c8de:	6822      	ldr	r2, [r4, #0]
 800c8e0:	07d2      	lsls	r2, r2, #31
 800c8e2:	d501      	bpl.n	800c8e8 <_printf_float+0x16c>
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	6123      	str	r3, [r4, #16]
 800c8e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d09c      	beq.n	800c82a <_printf_float+0xae>
 800c8f0:	232d      	movs	r3, #45	; 0x2d
 800c8f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8f6:	e798      	b.n	800c82a <_printf_float+0xae>
 800c8f8:	9a06      	ldr	r2, [sp, #24]
 800c8fa:	2a47      	cmp	r2, #71	; 0x47
 800c8fc:	d1be      	bne.n	800c87c <_printf_float+0x100>
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d1bc      	bne.n	800c87c <_printf_float+0x100>
 800c902:	2301      	movs	r3, #1
 800c904:	e7b9      	b.n	800c87a <_printf_float+0xfe>
 800c906:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c90a:	d118      	bne.n	800c93e <_printf_float+0x1c2>
 800c90c:	2900      	cmp	r1, #0
 800c90e:	6863      	ldr	r3, [r4, #4]
 800c910:	dd0b      	ble.n	800c92a <_printf_float+0x1ae>
 800c912:	6121      	str	r1, [r4, #16]
 800c914:	b913      	cbnz	r3, 800c91c <_printf_float+0x1a0>
 800c916:	6822      	ldr	r2, [r4, #0]
 800c918:	07d0      	lsls	r0, r2, #31
 800c91a:	d502      	bpl.n	800c922 <_printf_float+0x1a6>
 800c91c:	3301      	adds	r3, #1
 800c91e:	440b      	add	r3, r1
 800c920:	6123      	str	r3, [r4, #16]
 800c922:	65a1      	str	r1, [r4, #88]	; 0x58
 800c924:	f04f 0900 	mov.w	r9, #0
 800c928:	e7de      	b.n	800c8e8 <_printf_float+0x16c>
 800c92a:	b913      	cbnz	r3, 800c932 <_printf_float+0x1b6>
 800c92c:	6822      	ldr	r2, [r4, #0]
 800c92e:	07d2      	lsls	r2, r2, #31
 800c930:	d501      	bpl.n	800c936 <_printf_float+0x1ba>
 800c932:	3302      	adds	r3, #2
 800c934:	e7f4      	b.n	800c920 <_printf_float+0x1a4>
 800c936:	2301      	movs	r3, #1
 800c938:	e7f2      	b.n	800c920 <_printf_float+0x1a4>
 800c93a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c940:	4299      	cmp	r1, r3
 800c942:	db05      	blt.n	800c950 <_printf_float+0x1d4>
 800c944:	6823      	ldr	r3, [r4, #0]
 800c946:	6121      	str	r1, [r4, #16]
 800c948:	07d8      	lsls	r0, r3, #31
 800c94a:	d5ea      	bpl.n	800c922 <_printf_float+0x1a6>
 800c94c:	1c4b      	adds	r3, r1, #1
 800c94e:	e7e7      	b.n	800c920 <_printf_float+0x1a4>
 800c950:	2900      	cmp	r1, #0
 800c952:	bfd4      	ite	le
 800c954:	f1c1 0202 	rsble	r2, r1, #2
 800c958:	2201      	movgt	r2, #1
 800c95a:	4413      	add	r3, r2
 800c95c:	e7e0      	b.n	800c920 <_printf_float+0x1a4>
 800c95e:	6823      	ldr	r3, [r4, #0]
 800c960:	055a      	lsls	r2, r3, #21
 800c962:	d407      	bmi.n	800c974 <_printf_float+0x1f8>
 800c964:	6923      	ldr	r3, [r4, #16]
 800c966:	4642      	mov	r2, r8
 800c968:	4631      	mov	r1, r6
 800c96a:	4628      	mov	r0, r5
 800c96c:	47b8      	blx	r7
 800c96e:	3001      	adds	r0, #1
 800c970:	d12c      	bne.n	800c9cc <_printf_float+0x250>
 800c972:	e764      	b.n	800c83e <_printf_float+0xc2>
 800c974:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c978:	f240 80e0 	bls.w	800cb3c <_printf_float+0x3c0>
 800c97c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c980:	2200      	movs	r2, #0
 800c982:	2300      	movs	r3, #0
 800c984:	f7f4 f8b8 	bl	8000af8 <__aeabi_dcmpeq>
 800c988:	2800      	cmp	r0, #0
 800c98a:	d034      	beq.n	800c9f6 <_printf_float+0x27a>
 800c98c:	4a37      	ldr	r2, [pc, #220]	; (800ca6c <_printf_float+0x2f0>)
 800c98e:	2301      	movs	r3, #1
 800c990:	4631      	mov	r1, r6
 800c992:	4628      	mov	r0, r5
 800c994:	47b8      	blx	r7
 800c996:	3001      	adds	r0, #1
 800c998:	f43f af51 	beq.w	800c83e <_printf_float+0xc2>
 800c99c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	db02      	blt.n	800c9aa <_printf_float+0x22e>
 800c9a4:	6823      	ldr	r3, [r4, #0]
 800c9a6:	07d8      	lsls	r0, r3, #31
 800c9a8:	d510      	bpl.n	800c9cc <_printf_float+0x250>
 800c9aa:	ee18 3a10 	vmov	r3, s16
 800c9ae:	4652      	mov	r2, sl
 800c9b0:	4631      	mov	r1, r6
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	47b8      	blx	r7
 800c9b6:	3001      	adds	r0, #1
 800c9b8:	f43f af41 	beq.w	800c83e <_printf_float+0xc2>
 800c9bc:	f04f 0800 	mov.w	r8, #0
 800c9c0:	f104 091a 	add.w	r9, r4, #26
 800c9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	4543      	cmp	r3, r8
 800c9ca:	dc09      	bgt.n	800c9e0 <_printf_float+0x264>
 800c9cc:	6823      	ldr	r3, [r4, #0]
 800c9ce:	079b      	lsls	r3, r3, #30
 800c9d0:	f100 8105 	bmi.w	800cbde <_printf_float+0x462>
 800c9d4:	68e0      	ldr	r0, [r4, #12]
 800c9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9d8:	4298      	cmp	r0, r3
 800c9da:	bfb8      	it	lt
 800c9dc:	4618      	movlt	r0, r3
 800c9de:	e730      	b.n	800c842 <_printf_float+0xc6>
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	464a      	mov	r2, r9
 800c9e4:	4631      	mov	r1, r6
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	47b8      	blx	r7
 800c9ea:	3001      	adds	r0, #1
 800c9ec:	f43f af27 	beq.w	800c83e <_printf_float+0xc2>
 800c9f0:	f108 0801 	add.w	r8, r8, #1
 800c9f4:	e7e6      	b.n	800c9c4 <_printf_float+0x248>
 800c9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	dc39      	bgt.n	800ca70 <_printf_float+0x2f4>
 800c9fc:	4a1b      	ldr	r2, [pc, #108]	; (800ca6c <_printf_float+0x2f0>)
 800c9fe:	2301      	movs	r3, #1
 800ca00:	4631      	mov	r1, r6
 800ca02:	4628      	mov	r0, r5
 800ca04:	47b8      	blx	r7
 800ca06:	3001      	adds	r0, #1
 800ca08:	f43f af19 	beq.w	800c83e <_printf_float+0xc2>
 800ca0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca10:	4313      	orrs	r3, r2
 800ca12:	d102      	bne.n	800ca1a <_printf_float+0x29e>
 800ca14:	6823      	ldr	r3, [r4, #0]
 800ca16:	07d9      	lsls	r1, r3, #31
 800ca18:	d5d8      	bpl.n	800c9cc <_printf_float+0x250>
 800ca1a:	ee18 3a10 	vmov	r3, s16
 800ca1e:	4652      	mov	r2, sl
 800ca20:	4631      	mov	r1, r6
 800ca22:	4628      	mov	r0, r5
 800ca24:	47b8      	blx	r7
 800ca26:	3001      	adds	r0, #1
 800ca28:	f43f af09 	beq.w	800c83e <_printf_float+0xc2>
 800ca2c:	f04f 0900 	mov.w	r9, #0
 800ca30:	f104 0a1a 	add.w	sl, r4, #26
 800ca34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca36:	425b      	negs	r3, r3
 800ca38:	454b      	cmp	r3, r9
 800ca3a:	dc01      	bgt.n	800ca40 <_printf_float+0x2c4>
 800ca3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca3e:	e792      	b.n	800c966 <_printf_float+0x1ea>
 800ca40:	2301      	movs	r3, #1
 800ca42:	4652      	mov	r2, sl
 800ca44:	4631      	mov	r1, r6
 800ca46:	4628      	mov	r0, r5
 800ca48:	47b8      	blx	r7
 800ca4a:	3001      	adds	r0, #1
 800ca4c:	f43f aef7 	beq.w	800c83e <_printf_float+0xc2>
 800ca50:	f109 0901 	add.w	r9, r9, #1
 800ca54:	e7ee      	b.n	800ca34 <_printf_float+0x2b8>
 800ca56:	bf00      	nop
 800ca58:	7fefffff 	.word	0x7fefffff
 800ca5c:	080143e4 	.word	0x080143e4
 800ca60:	080143e8 	.word	0x080143e8
 800ca64:	080143f0 	.word	0x080143f0
 800ca68:	080143ec 	.word	0x080143ec
 800ca6c:	080147e9 	.word	0x080147e9
 800ca70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca74:	429a      	cmp	r2, r3
 800ca76:	bfa8      	it	ge
 800ca78:	461a      	movge	r2, r3
 800ca7a:	2a00      	cmp	r2, #0
 800ca7c:	4691      	mov	r9, r2
 800ca7e:	dc37      	bgt.n	800caf0 <_printf_float+0x374>
 800ca80:	f04f 0b00 	mov.w	fp, #0
 800ca84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca88:	f104 021a 	add.w	r2, r4, #26
 800ca8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca8e:	9305      	str	r3, [sp, #20]
 800ca90:	eba3 0309 	sub.w	r3, r3, r9
 800ca94:	455b      	cmp	r3, fp
 800ca96:	dc33      	bgt.n	800cb00 <_printf_float+0x384>
 800ca98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	db3b      	blt.n	800cb18 <_printf_float+0x39c>
 800caa0:	6823      	ldr	r3, [r4, #0]
 800caa2:	07da      	lsls	r2, r3, #31
 800caa4:	d438      	bmi.n	800cb18 <_printf_float+0x39c>
 800caa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caa8:	9a05      	ldr	r2, [sp, #20]
 800caaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800caac:	1a9a      	subs	r2, r3, r2
 800caae:	eba3 0901 	sub.w	r9, r3, r1
 800cab2:	4591      	cmp	r9, r2
 800cab4:	bfa8      	it	ge
 800cab6:	4691      	movge	r9, r2
 800cab8:	f1b9 0f00 	cmp.w	r9, #0
 800cabc:	dc35      	bgt.n	800cb2a <_printf_float+0x3ae>
 800cabe:	f04f 0800 	mov.w	r8, #0
 800cac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cac6:	f104 0a1a 	add.w	sl, r4, #26
 800caca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cace:	1a9b      	subs	r3, r3, r2
 800cad0:	eba3 0309 	sub.w	r3, r3, r9
 800cad4:	4543      	cmp	r3, r8
 800cad6:	f77f af79 	ble.w	800c9cc <_printf_float+0x250>
 800cada:	2301      	movs	r3, #1
 800cadc:	4652      	mov	r2, sl
 800cade:	4631      	mov	r1, r6
 800cae0:	4628      	mov	r0, r5
 800cae2:	47b8      	blx	r7
 800cae4:	3001      	adds	r0, #1
 800cae6:	f43f aeaa 	beq.w	800c83e <_printf_float+0xc2>
 800caea:	f108 0801 	add.w	r8, r8, #1
 800caee:	e7ec      	b.n	800caca <_printf_float+0x34e>
 800caf0:	4613      	mov	r3, r2
 800caf2:	4631      	mov	r1, r6
 800caf4:	4642      	mov	r2, r8
 800caf6:	4628      	mov	r0, r5
 800caf8:	47b8      	blx	r7
 800cafa:	3001      	adds	r0, #1
 800cafc:	d1c0      	bne.n	800ca80 <_printf_float+0x304>
 800cafe:	e69e      	b.n	800c83e <_printf_float+0xc2>
 800cb00:	2301      	movs	r3, #1
 800cb02:	4631      	mov	r1, r6
 800cb04:	4628      	mov	r0, r5
 800cb06:	9205      	str	r2, [sp, #20]
 800cb08:	47b8      	blx	r7
 800cb0a:	3001      	adds	r0, #1
 800cb0c:	f43f ae97 	beq.w	800c83e <_printf_float+0xc2>
 800cb10:	9a05      	ldr	r2, [sp, #20]
 800cb12:	f10b 0b01 	add.w	fp, fp, #1
 800cb16:	e7b9      	b.n	800ca8c <_printf_float+0x310>
 800cb18:	ee18 3a10 	vmov	r3, s16
 800cb1c:	4652      	mov	r2, sl
 800cb1e:	4631      	mov	r1, r6
 800cb20:	4628      	mov	r0, r5
 800cb22:	47b8      	blx	r7
 800cb24:	3001      	adds	r0, #1
 800cb26:	d1be      	bne.n	800caa6 <_printf_float+0x32a>
 800cb28:	e689      	b.n	800c83e <_printf_float+0xc2>
 800cb2a:	9a05      	ldr	r2, [sp, #20]
 800cb2c:	464b      	mov	r3, r9
 800cb2e:	4442      	add	r2, r8
 800cb30:	4631      	mov	r1, r6
 800cb32:	4628      	mov	r0, r5
 800cb34:	47b8      	blx	r7
 800cb36:	3001      	adds	r0, #1
 800cb38:	d1c1      	bne.n	800cabe <_printf_float+0x342>
 800cb3a:	e680      	b.n	800c83e <_printf_float+0xc2>
 800cb3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb3e:	2a01      	cmp	r2, #1
 800cb40:	dc01      	bgt.n	800cb46 <_printf_float+0x3ca>
 800cb42:	07db      	lsls	r3, r3, #31
 800cb44:	d538      	bpl.n	800cbb8 <_printf_float+0x43c>
 800cb46:	2301      	movs	r3, #1
 800cb48:	4642      	mov	r2, r8
 800cb4a:	4631      	mov	r1, r6
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	47b8      	blx	r7
 800cb50:	3001      	adds	r0, #1
 800cb52:	f43f ae74 	beq.w	800c83e <_printf_float+0xc2>
 800cb56:	ee18 3a10 	vmov	r3, s16
 800cb5a:	4652      	mov	r2, sl
 800cb5c:	4631      	mov	r1, r6
 800cb5e:	4628      	mov	r0, r5
 800cb60:	47b8      	blx	r7
 800cb62:	3001      	adds	r0, #1
 800cb64:	f43f ae6b 	beq.w	800c83e <_printf_float+0xc2>
 800cb68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	2300      	movs	r3, #0
 800cb70:	f7f3 ffc2 	bl	8000af8 <__aeabi_dcmpeq>
 800cb74:	b9d8      	cbnz	r0, 800cbae <_printf_float+0x432>
 800cb76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb78:	f108 0201 	add.w	r2, r8, #1
 800cb7c:	3b01      	subs	r3, #1
 800cb7e:	4631      	mov	r1, r6
 800cb80:	4628      	mov	r0, r5
 800cb82:	47b8      	blx	r7
 800cb84:	3001      	adds	r0, #1
 800cb86:	d10e      	bne.n	800cba6 <_printf_float+0x42a>
 800cb88:	e659      	b.n	800c83e <_printf_float+0xc2>
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	4652      	mov	r2, sl
 800cb8e:	4631      	mov	r1, r6
 800cb90:	4628      	mov	r0, r5
 800cb92:	47b8      	blx	r7
 800cb94:	3001      	adds	r0, #1
 800cb96:	f43f ae52 	beq.w	800c83e <_printf_float+0xc2>
 800cb9a:	f108 0801 	add.w	r8, r8, #1
 800cb9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cba0:	3b01      	subs	r3, #1
 800cba2:	4543      	cmp	r3, r8
 800cba4:	dcf1      	bgt.n	800cb8a <_printf_float+0x40e>
 800cba6:	464b      	mov	r3, r9
 800cba8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cbac:	e6dc      	b.n	800c968 <_printf_float+0x1ec>
 800cbae:	f04f 0800 	mov.w	r8, #0
 800cbb2:	f104 0a1a 	add.w	sl, r4, #26
 800cbb6:	e7f2      	b.n	800cb9e <_printf_float+0x422>
 800cbb8:	2301      	movs	r3, #1
 800cbba:	4642      	mov	r2, r8
 800cbbc:	e7df      	b.n	800cb7e <_printf_float+0x402>
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	464a      	mov	r2, r9
 800cbc2:	4631      	mov	r1, r6
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	47b8      	blx	r7
 800cbc8:	3001      	adds	r0, #1
 800cbca:	f43f ae38 	beq.w	800c83e <_printf_float+0xc2>
 800cbce:	f108 0801 	add.w	r8, r8, #1
 800cbd2:	68e3      	ldr	r3, [r4, #12]
 800cbd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cbd6:	1a5b      	subs	r3, r3, r1
 800cbd8:	4543      	cmp	r3, r8
 800cbda:	dcf0      	bgt.n	800cbbe <_printf_float+0x442>
 800cbdc:	e6fa      	b.n	800c9d4 <_printf_float+0x258>
 800cbde:	f04f 0800 	mov.w	r8, #0
 800cbe2:	f104 0919 	add.w	r9, r4, #25
 800cbe6:	e7f4      	b.n	800cbd2 <_printf_float+0x456>

0800cbe8 <_printf_common>:
 800cbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbec:	4616      	mov	r6, r2
 800cbee:	4699      	mov	r9, r3
 800cbf0:	688a      	ldr	r2, [r1, #8]
 800cbf2:	690b      	ldr	r3, [r1, #16]
 800cbf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	bfb8      	it	lt
 800cbfc:	4613      	movlt	r3, r2
 800cbfe:	6033      	str	r3, [r6, #0]
 800cc00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc04:	4607      	mov	r7, r0
 800cc06:	460c      	mov	r4, r1
 800cc08:	b10a      	cbz	r2, 800cc0e <_printf_common+0x26>
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	6033      	str	r3, [r6, #0]
 800cc0e:	6823      	ldr	r3, [r4, #0]
 800cc10:	0699      	lsls	r1, r3, #26
 800cc12:	bf42      	ittt	mi
 800cc14:	6833      	ldrmi	r3, [r6, #0]
 800cc16:	3302      	addmi	r3, #2
 800cc18:	6033      	strmi	r3, [r6, #0]
 800cc1a:	6825      	ldr	r5, [r4, #0]
 800cc1c:	f015 0506 	ands.w	r5, r5, #6
 800cc20:	d106      	bne.n	800cc30 <_printf_common+0x48>
 800cc22:	f104 0a19 	add.w	sl, r4, #25
 800cc26:	68e3      	ldr	r3, [r4, #12]
 800cc28:	6832      	ldr	r2, [r6, #0]
 800cc2a:	1a9b      	subs	r3, r3, r2
 800cc2c:	42ab      	cmp	r3, r5
 800cc2e:	dc26      	bgt.n	800cc7e <_printf_common+0x96>
 800cc30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc34:	1e13      	subs	r3, r2, #0
 800cc36:	6822      	ldr	r2, [r4, #0]
 800cc38:	bf18      	it	ne
 800cc3a:	2301      	movne	r3, #1
 800cc3c:	0692      	lsls	r2, r2, #26
 800cc3e:	d42b      	bmi.n	800cc98 <_printf_common+0xb0>
 800cc40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc44:	4649      	mov	r1, r9
 800cc46:	4638      	mov	r0, r7
 800cc48:	47c0      	blx	r8
 800cc4a:	3001      	adds	r0, #1
 800cc4c:	d01e      	beq.n	800cc8c <_printf_common+0xa4>
 800cc4e:	6823      	ldr	r3, [r4, #0]
 800cc50:	68e5      	ldr	r5, [r4, #12]
 800cc52:	6832      	ldr	r2, [r6, #0]
 800cc54:	f003 0306 	and.w	r3, r3, #6
 800cc58:	2b04      	cmp	r3, #4
 800cc5a:	bf08      	it	eq
 800cc5c:	1aad      	subeq	r5, r5, r2
 800cc5e:	68a3      	ldr	r3, [r4, #8]
 800cc60:	6922      	ldr	r2, [r4, #16]
 800cc62:	bf0c      	ite	eq
 800cc64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc68:	2500      	movne	r5, #0
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	bfc4      	itt	gt
 800cc6e:	1a9b      	subgt	r3, r3, r2
 800cc70:	18ed      	addgt	r5, r5, r3
 800cc72:	2600      	movs	r6, #0
 800cc74:	341a      	adds	r4, #26
 800cc76:	42b5      	cmp	r5, r6
 800cc78:	d11a      	bne.n	800ccb0 <_printf_common+0xc8>
 800cc7a:	2000      	movs	r0, #0
 800cc7c:	e008      	b.n	800cc90 <_printf_common+0xa8>
 800cc7e:	2301      	movs	r3, #1
 800cc80:	4652      	mov	r2, sl
 800cc82:	4649      	mov	r1, r9
 800cc84:	4638      	mov	r0, r7
 800cc86:	47c0      	blx	r8
 800cc88:	3001      	adds	r0, #1
 800cc8a:	d103      	bne.n	800cc94 <_printf_common+0xac>
 800cc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc94:	3501      	adds	r5, #1
 800cc96:	e7c6      	b.n	800cc26 <_printf_common+0x3e>
 800cc98:	18e1      	adds	r1, r4, r3
 800cc9a:	1c5a      	adds	r2, r3, #1
 800cc9c:	2030      	movs	r0, #48	; 0x30
 800cc9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cca2:	4422      	add	r2, r4
 800cca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ccac:	3302      	adds	r3, #2
 800ccae:	e7c7      	b.n	800cc40 <_printf_common+0x58>
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	4622      	mov	r2, r4
 800ccb4:	4649      	mov	r1, r9
 800ccb6:	4638      	mov	r0, r7
 800ccb8:	47c0      	blx	r8
 800ccba:	3001      	adds	r0, #1
 800ccbc:	d0e6      	beq.n	800cc8c <_printf_common+0xa4>
 800ccbe:	3601      	adds	r6, #1
 800ccc0:	e7d9      	b.n	800cc76 <_printf_common+0x8e>
	...

0800ccc4 <_printf_i>:
 800ccc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc8:	7e0f      	ldrb	r7, [r1, #24]
 800ccca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cccc:	2f78      	cmp	r7, #120	; 0x78
 800ccce:	4691      	mov	r9, r2
 800ccd0:	4680      	mov	r8, r0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	469a      	mov	sl, r3
 800ccd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ccda:	d807      	bhi.n	800ccec <_printf_i+0x28>
 800ccdc:	2f62      	cmp	r7, #98	; 0x62
 800ccde:	d80a      	bhi.n	800ccf6 <_printf_i+0x32>
 800cce0:	2f00      	cmp	r7, #0
 800cce2:	f000 80d8 	beq.w	800ce96 <_printf_i+0x1d2>
 800cce6:	2f58      	cmp	r7, #88	; 0x58
 800cce8:	f000 80a3 	beq.w	800ce32 <_printf_i+0x16e>
 800ccec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ccf4:	e03a      	b.n	800cd6c <_printf_i+0xa8>
 800ccf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ccfa:	2b15      	cmp	r3, #21
 800ccfc:	d8f6      	bhi.n	800ccec <_printf_i+0x28>
 800ccfe:	a101      	add	r1, pc, #4	; (adr r1, 800cd04 <_printf_i+0x40>)
 800cd00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd04:	0800cd5d 	.word	0x0800cd5d
 800cd08:	0800cd71 	.word	0x0800cd71
 800cd0c:	0800cced 	.word	0x0800cced
 800cd10:	0800cced 	.word	0x0800cced
 800cd14:	0800cced 	.word	0x0800cced
 800cd18:	0800cced 	.word	0x0800cced
 800cd1c:	0800cd71 	.word	0x0800cd71
 800cd20:	0800cced 	.word	0x0800cced
 800cd24:	0800cced 	.word	0x0800cced
 800cd28:	0800cced 	.word	0x0800cced
 800cd2c:	0800cced 	.word	0x0800cced
 800cd30:	0800ce7d 	.word	0x0800ce7d
 800cd34:	0800cda1 	.word	0x0800cda1
 800cd38:	0800ce5f 	.word	0x0800ce5f
 800cd3c:	0800cced 	.word	0x0800cced
 800cd40:	0800cced 	.word	0x0800cced
 800cd44:	0800ce9f 	.word	0x0800ce9f
 800cd48:	0800cced 	.word	0x0800cced
 800cd4c:	0800cda1 	.word	0x0800cda1
 800cd50:	0800cced 	.word	0x0800cced
 800cd54:	0800cced 	.word	0x0800cced
 800cd58:	0800ce67 	.word	0x0800ce67
 800cd5c:	682b      	ldr	r3, [r5, #0]
 800cd5e:	1d1a      	adds	r2, r3, #4
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	602a      	str	r2, [r5, #0]
 800cd64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e0a3      	b.n	800ceb8 <_printf_i+0x1f4>
 800cd70:	6820      	ldr	r0, [r4, #0]
 800cd72:	6829      	ldr	r1, [r5, #0]
 800cd74:	0606      	lsls	r6, r0, #24
 800cd76:	f101 0304 	add.w	r3, r1, #4
 800cd7a:	d50a      	bpl.n	800cd92 <_printf_i+0xce>
 800cd7c:	680e      	ldr	r6, [r1, #0]
 800cd7e:	602b      	str	r3, [r5, #0]
 800cd80:	2e00      	cmp	r6, #0
 800cd82:	da03      	bge.n	800cd8c <_printf_i+0xc8>
 800cd84:	232d      	movs	r3, #45	; 0x2d
 800cd86:	4276      	negs	r6, r6
 800cd88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd8c:	485e      	ldr	r0, [pc, #376]	; (800cf08 <_printf_i+0x244>)
 800cd8e:	230a      	movs	r3, #10
 800cd90:	e019      	b.n	800cdc6 <_printf_i+0x102>
 800cd92:	680e      	ldr	r6, [r1, #0]
 800cd94:	602b      	str	r3, [r5, #0]
 800cd96:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd9a:	bf18      	it	ne
 800cd9c:	b236      	sxthne	r6, r6
 800cd9e:	e7ef      	b.n	800cd80 <_printf_i+0xbc>
 800cda0:	682b      	ldr	r3, [r5, #0]
 800cda2:	6820      	ldr	r0, [r4, #0]
 800cda4:	1d19      	adds	r1, r3, #4
 800cda6:	6029      	str	r1, [r5, #0]
 800cda8:	0601      	lsls	r1, r0, #24
 800cdaa:	d501      	bpl.n	800cdb0 <_printf_i+0xec>
 800cdac:	681e      	ldr	r6, [r3, #0]
 800cdae:	e002      	b.n	800cdb6 <_printf_i+0xf2>
 800cdb0:	0646      	lsls	r6, r0, #25
 800cdb2:	d5fb      	bpl.n	800cdac <_printf_i+0xe8>
 800cdb4:	881e      	ldrh	r6, [r3, #0]
 800cdb6:	4854      	ldr	r0, [pc, #336]	; (800cf08 <_printf_i+0x244>)
 800cdb8:	2f6f      	cmp	r7, #111	; 0x6f
 800cdba:	bf0c      	ite	eq
 800cdbc:	2308      	moveq	r3, #8
 800cdbe:	230a      	movne	r3, #10
 800cdc0:	2100      	movs	r1, #0
 800cdc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cdc6:	6865      	ldr	r5, [r4, #4]
 800cdc8:	60a5      	str	r5, [r4, #8]
 800cdca:	2d00      	cmp	r5, #0
 800cdcc:	bfa2      	ittt	ge
 800cdce:	6821      	ldrge	r1, [r4, #0]
 800cdd0:	f021 0104 	bicge.w	r1, r1, #4
 800cdd4:	6021      	strge	r1, [r4, #0]
 800cdd6:	b90e      	cbnz	r6, 800cddc <_printf_i+0x118>
 800cdd8:	2d00      	cmp	r5, #0
 800cdda:	d04d      	beq.n	800ce78 <_printf_i+0x1b4>
 800cddc:	4615      	mov	r5, r2
 800cdde:	fbb6 f1f3 	udiv	r1, r6, r3
 800cde2:	fb03 6711 	mls	r7, r3, r1, r6
 800cde6:	5dc7      	ldrb	r7, [r0, r7]
 800cde8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cdec:	4637      	mov	r7, r6
 800cdee:	42bb      	cmp	r3, r7
 800cdf0:	460e      	mov	r6, r1
 800cdf2:	d9f4      	bls.n	800cdde <_printf_i+0x11a>
 800cdf4:	2b08      	cmp	r3, #8
 800cdf6:	d10b      	bne.n	800ce10 <_printf_i+0x14c>
 800cdf8:	6823      	ldr	r3, [r4, #0]
 800cdfa:	07de      	lsls	r6, r3, #31
 800cdfc:	d508      	bpl.n	800ce10 <_printf_i+0x14c>
 800cdfe:	6923      	ldr	r3, [r4, #16]
 800ce00:	6861      	ldr	r1, [r4, #4]
 800ce02:	4299      	cmp	r1, r3
 800ce04:	bfde      	ittt	le
 800ce06:	2330      	movle	r3, #48	; 0x30
 800ce08:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce10:	1b52      	subs	r2, r2, r5
 800ce12:	6122      	str	r2, [r4, #16]
 800ce14:	f8cd a000 	str.w	sl, [sp]
 800ce18:	464b      	mov	r3, r9
 800ce1a:	aa03      	add	r2, sp, #12
 800ce1c:	4621      	mov	r1, r4
 800ce1e:	4640      	mov	r0, r8
 800ce20:	f7ff fee2 	bl	800cbe8 <_printf_common>
 800ce24:	3001      	adds	r0, #1
 800ce26:	d14c      	bne.n	800cec2 <_printf_i+0x1fe>
 800ce28:	f04f 30ff 	mov.w	r0, #4294967295
 800ce2c:	b004      	add	sp, #16
 800ce2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce32:	4835      	ldr	r0, [pc, #212]	; (800cf08 <_printf_i+0x244>)
 800ce34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ce38:	6829      	ldr	r1, [r5, #0]
 800ce3a:	6823      	ldr	r3, [r4, #0]
 800ce3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce40:	6029      	str	r1, [r5, #0]
 800ce42:	061d      	lsls	r5, r3, #24
 800ce44:	d514      	bpl.n	800ce70 <_printf_i+0x1ac>
 800ce46:	07df      	lsls	r7, r3, #31
 800ce48:	bf44      	itt	mi
 800ce4a:	f043 0320 	orrmi.w	r3, r3, #32
 800ce4e:	6023      	strmi	r3, [r4, #0]
 800ce50:	b91e      	cbnz	r6, 800ce5a <_printf_i+0x196>
 800ce52:	6823      	ldr	r3, [r4, #0]
 800ce54:	f023 0320 	bic.w	r3, r3, #32
 800ce58:	6023      	str	r3, [r4, #0]
 800ce5a:	2310      	movs	r3, #16
 800ce5c:	e7b0      	b.n	800cdc0 <_printf_i+0xfc>
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	f043 0320 	orr.w	r3, r3, #32
 800ce64:	6023      	str	r3, [r4, #0]
 800ce66:	2378      	movs	r3, #120	; 0x78
 800ce68:	4828      	ldr	r0, [pc, #160]	; (800cf0c <_printf_i+0x248>)
 800ce6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce6e:	e7e3      	b.n	800ce38 <_printf_i+0x174>
 800ce70:	0659      	lsls	r1, r3, #25
 800ce72:	bf48      	it	mi
 800ce74:	b2b6      	uxthmi	r6, r6
 800ce76:	e7e6      	b.n	800ce46 <_printf_i+0x182>
 800ce78:	4615      	mov	r5, r2
 800ce7a:	e7bb      	b.n	800cdf4 <_printf_i+0x130>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	6826      	ldr	r6, [r4, #0]
 800ce80:	6961      	ldr	r1, [r4, #20]
 800ce82:	1d18      	adds	r0, r3, #4
 800ce84:	6028      	str	r0, [r5, #0]
 800ce86:	0635      	lsls	r5, r6, #24
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	d501      	bpl.n	800ce90 <_printf_i+0x1cc>
 800ce8c:	6019      	str	r1, [r3, #0]
 800ce8e:	e002      	b.n	800ce96 <_printf_i+0x1d2>
 800ce90:	0670      	lsls	r0, r6, #25
 800ce92:	d5fb      	bpl.n	800ce8c <_printf_i+0x1c8>
 800ce94:	8019      	strh	r1, [r3, #0]
 800ce96:	2300      	movs	r3, #0
 800ce98:	6123      	str	r3, [r4, #16]
 800ce9a:	4615      	mov	r5, r2
 800ce9c:	e7ba      	b.n	800ce14 <_printf_i+0x150>
 800ce9e:	682b      	ldr	r3, [r5, #0]
 800cea0:	1d1a      	adds	r2, r3, #4
 800cea2:	602a      	str	r2, [r5, #0]
 800cea4:	681d      	ldr	r5, [r3, #0]
 800cea6:	6862      	ldr	r2, [r4, #4]
 800cea8:	2100      	movs	r1, #0
 800ceaa:	4628      	mov	r0, r5
 800ceac:	f7f3 f9b0 	bl	8000210 <memchr>
 800ceb0:	b108      	cbz	r0, 800ceb6 <_printf_i+0x1f2>
 800ceb2:	1b40      	subs	r0, r0, r5
 800ceb4:	6060      	str	r0, [r4, #4]
 800ceb6:	6863      	ldr	r3, [r4, #4]
 800ceb8:	6123      	str	r3, [r4, #16]
 800ceba:	2300      	movs	r3, #0
 800cebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cec0:	e7a8      	b.n	800ce14 <_printf_i+0x150>
 800cec2:	6923      	ldr	r3, [r4, #16]
 800cec4:	462a      	mov	r2, r5
 800cec6:	4649      	mov	r1, r9
 800cec8:	4640      	mov	r0, r8
 800ceca:	47d0      	blx	sl
 800cecc:	3001      	adds	r0, #1
 800cece:	d0ab      	beq.n	800ce28 <_printf_i+0x164>
 800ced0:	6823      	ldr	r3, [r4, #0]
 800ced2:	079b      	lsls	r3, r3, #30
 800ced4:	d413      	bmi.n	800cefe <_printf_i+0x23a>
 800ced6:	68e0      	ldr	r0, [r4, #12]
 800ced8:	9b03      	ldr	r3, [sp, #12]
 800ceda:	4298      	cmp	r0, r3
 800cedc:	bfb8      	it	lt
 800cede:	4618      	movlt	r0, r3
 800cee0:	e7a4      	b.n	800ce2c <_printf_i+0x168>
 800cee2:	2301      	movs	r3, #1
 800cee4:	4632      	mov	r2, r6
 800cee6:	4649      	mov	r1, r9
 800cee8:	4640      	mov	r0, r8
 800ceea:	47d0      	blx	sl
 800ceec:	3001      	adds	r0, #1
 800ceee:	d09b      	beq.n	800ce28 <_printf_i+0x164>
 800cef0:	3501      	adds	r5, #1
 800cef2:	68e3      	ldr	r3, [r4, #12]
 800cef4:	9903      	ldr	r1, [sp, #12]
 800cef6:	1a5b      	subs	r3, r3, r1
 800cef8:	42ab      	cmp	r3, r5
 800cefa:	dcf2      	bgt.n	800cee2 <_printf_i+0x21e>
 800cefc:	e7eb      	b.n	800ced6 <_printf_i+0x212>
 800cefe:	2500      	movs	r5, #0
 800cf00:	f104 0619 	add.w	r6, r4, #25
 800cf04:	e7f5      	b.n	800cef2 <_printf_i+0x22e>
 800cf06:	bf00      	nop
 800cf08:	080143f4 	.word	0x080143f4
 800cf0c:	08014405 	.word	0x08014405

0800cf10 <_scanf_float>:
 800cf10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf14:	b087      	sub	sp, #28
 800cf16:	4617      	mov	r7, r2
 800cf18:	9303      	str	r3, [sp, #12]
 800cf1a:	688b      	ldr	r3, [r1, #8]
 800cf1c:	1e5a      	subs	r2, r3, #1
 800cf1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cf22:	bf83      	ittte	hi
 800cf24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cf28:	195b      	addhi	r3, r3, r5
 800cf2a:	9302      	strhi	r3, [sp, #8]
 800cf2c:	2300      	movls	r3, #0
 800cf2e:	bf86      	itte	hi
 800cf30:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cf34:	608b      	strhi	r3, [r1, #8]
 800cf36:	9302      	strls	r3, [sp, #8]
 800cf38:	680b      	ldr	r3, [r1, #0]
 800cf3a:	468b      	mov	fp, r1
 800cf3c:	2500      	movs	r5, #0
 800cf3e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cf42:	f84b 3b1c 	str.w	r3, [fp], #28
 800cf46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cf4a:	4680      	mov	r8, r0
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	465e      	mov	r6, fp
 800cf50:	46aa      	mov	sl, r5
 800cf52:	46a9      	mov	r9, r5
 800cf54:	9501      	str	r5, [sp, #4]
 800cf56:	68a2      	ldr	r2, [r4, #8]
 800cf58:	b152      	cbz	r2, 800cf70 <_scanf_float+0x60>
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	2b4e      	cmp	r3, #78	; 0x4e
 800cf60:	d864      	bhi.n	800d02c <_scanf_float+0x11c>
 800cf62:	2b40      	cmp	r3, #64	; 0x40
 800cf64:	d83c      	bhi.n	800cfe0 <_scanf_float+0xd0>
 800cf66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cf6a:	b2c8      	uxtb	r0, r1
 800cf6c:	280e      	cmp	r0, #14
 800cf6e:	d93a      	bls.n	800cfe6 <_scanf_float+0xd6>
 800cf70:	f1b9 0f00 	cmp.w	r9, #0
 800cf74:	d003      	beq.n	800cf7e <_scanf_float+0x6e>
 800cf76:	6823      	ldr	r3, [r4, #0]
 800cf78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf7c:	6023      	str	r3, [r4, #0]
 800cf7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf82:	f1ba 0f01 	cmp.w	sl, #1
 800cf86:	f200 8113 	bhi.w	800d1b0 <_scanf_float+0x2a0>
 800cf8a:	455e      	cmp	r6, fp
 800cf8c:	f200 8105 	bhi.w	800d19a <_scanf_float+0x28a>
 800cf90:	2501      	movs	r5, #1
 800cf92:	4628      	mov	r0, r5
 800cf94:	b007      	add	sp, #28
 800cf96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cf9e:	2a0d      	cmp	r2, #13
 800cfa0:	d8e6      	bhi.n	800cf70 <_scanf_float+0x60>
 800cfa2:	a101      	add	r1, pc, #4	; (adr r1, 800cfa8 <_scanf_float+0x98>)
 800cfa4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cfa8:	0800d0e7 	.word	0x0800d0e7
 800cfac:	0800cf71 	.word	0x0800cf71
 800cfb0:	0800cf71 	.word	0x0800cf71
 800cfb4:	0800cf71 	.word	0x0800cf71
 800cfb8:	0800d147 	.word	0x0800d147
 800cfbc:	0800d11f 	.word	0x0800d11f
 800cfc0:	0800cf71 	.word	0x0800cf71
 800cfc4:	0800cf71 	.word	0x0800cf71
 800cfc8:	0800d0f5 	.word	0x0800d0f5
 800cfcc:	0800cf71 	.word	0x0800cf71
 800cfd0:	0800cf71 	.word	0x0800cf71
 800cfd4:	0800cf71 	.word	0x0800cf71
 800cfd8:	0800cf71 	.word	0x0800cf71
 800cfdc:	0800d0ad 	.word	0x0800d0ad
 800cfe0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cfe4:	e7db      	b.n	800cf9e <_scanf_float+0x8e>
 800cfe6:	290e      	cmp	r1, #14
 800cfe8:	d8c2      	bhi.n	800cf70 <_scanf_float+0x60>
 800cfea:	a001      	add	r0, pc, #4	; (adr r0, 800cff0 <_scanf_float+0xe0>)
 800cfec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cff0:	0800d09f 	.word	0x0800d09f
 800cff4:	0800cf71 	.word	0x0800cf71
 800cff8:	0800d09f 	.word	0x0800d09f
 800cffc:	0800d133 	.word	0x0800d133
 800d000:	0800cf71 	.word	0x0800cf71
 800d004:	0800d04d 	.word	0x0800d04d
 800d008:	0800d089 	.word	0x0800d089
 800d00c:	0800d089 	.word	0x0800d089
 800d010:	0800d089 	.word	0x0800d089
 800d014:	0800d089 	.word	0x0800d089
 800d018:	0800d089 	.word	0x0800d089
 800d01c:	0800d089 	.word	0x0800d089
 800d020:	0800d089 	.word	0x0800d089
 800d024:	0800d089 	.word	0x0800d089
 800d028:	0800d089 	.word	0x0800d089
 800d02c:	2b6e      	cmp	r3, #110	; 0x6e
 800d02e:	d809      	bhi.n	800d044 <_scanf_float+0x134>
 800d030:	2b60      	cmp	r3, #96	; 0x60
 800d032:	d8b2      	bhi.n	800cf9a <_scanf_float+0x8a>
 800d034:	2b54      	cmp	r3, #84	; 0x54
 800d036:	d077      	beq.n	800d128 <_scanf_float+0x218>
 800d038:	2b59      	cmp	r3, #89	; 0x59
 800d03a:	d199      	bne.n	800cf70 <_scanf_float+0x60>
 800d03c:	2d07      	cmp	r5, #7
 800d03e:	d197      	bne.n	800cf70 <_scanf_float+0x60>
 800d040:	2508      	movs	r5, #8
 800d042:	e029      	b.n	800d098 <_scanf_float+0x188>
 800d044:	2b74      	cmp	r3, #116	; 0x74
 800d046:	d06f      	beq.n	800d128 <_scanf_float+0x218>
 800d048:	2b79      	cmp	r3, #121	; 0x79
 800d04a:	e7f6      	b.n	800d03a <_scanf_float+0x12a>
 800d04c:	6821      	ldr	r1, [r4, #0]
 800d04e:	05c8      	lsls	r0, r1, #23
 800d050:	d51a      	bpl.n	800d088 <_scanf_float+0x178>
 800d052:	9b02      	ldr	r3, [sp, #8]
 800d054:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d058:	6021      	str	r1, [r4, #0]
 800d05a:	f109 0901 	add.w	r9, r9, #1
 800d05e:	b11b      	cbz	r3, 800d068 <_scanf_float+0x158>
 800d060:	3b01      	subs	r3, #1
 800d062:	3201      	adds	r2, #1
 800d064:	9302      	str	r3, [sp, #8]
 800d066:	60a2      	str	r2, [r4, #8]
 800d068:	68a3      	ldr	r3, [r4, #8]
 800d06a:	3b01      	subs	r3, #1
 800d06c:	60a3      	str	r3, [r4, #8]
 800d06e:	6923      	ldr	r3, [r4, #16]
 800d070:	3301      	adds	r3, #1
 800d072:	6123      	str	r3, [r4, #16]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	3b01      	subs	r3, #1
 800d078:	2b00      	cmp	r3, #0
 800d07a:	607b      	str	r3, [r7, #4]
 800d07c:	f340 8084 	ble.w	800d188 <_scanf_float+0x278>
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	3301      	adds	r3, #1
 800d084:	603b      	str	r3, [r7, #0]
 800d086:	e766      	b.n	800cf56 <_scanf_float+0x46>
 800d088:	eb1a 0f05 	cmn.w	sl, r5
 800d08c:	f47f af70 	bne.w	800cf70 <_scanf_float+0x60>
 800d090:	6822      	ldr	r2, [r4, #0]
 800d092:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d096:	6022      	str	r2, [r4, #0]
 800d098:	f806 3b01 	strb.w	r3, [r6], #1
 800d09c:	e7e4      	b.n	800d068 <_scanf_float+0x158>
 800d09e:	6822      	ldr	r2, [r4, #0]
 800d0a0:	0610      	lsls	r0, r2, #24
 800d0a2:	f57f af65 	bpl.w	800cf70 <_scanf_float+0x60>
 800d0a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d0aa:	e7f4      	b.n	800d096 <_scanf_float+0x186>
 800d0ac:	f1ba 0f00 	cmp.w	sl, #0
 800d0b0:	d10e      	bne.n	800d0d0 <_scanf_float+0x1c0>
 800d0b2:	f1b9 0f00 	cmp.w	r9, #0
 800d0b6:	d10e      	bne.n	800d0d6 <_scanf_float+0x1c6>
 800d0b8:	6822      	ldr	r2, [r4, #0]
 800d0ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d0be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d0c2:	d108      	bne.n	800d0d6 <_scanf_float+0x1c6>
 800d0c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d0c8:	6022      	str	r2, [r4, #0]
 800d0ca:	f04f 0a01 	mov.w	sl, #1
 800d0ce:	e7e3      	b.n	800d098 <_scanf_float+0x188>
 800d0d0:	f1ba 0f02 	cmp.w	sl, #2
 800d0d4:	d055      	beq.n	800d182 <_scanf_float+0x272>
 800d0d6:	2d01      	cmp	r5, #1
 800d0d8:	d002      	beq.n	800d0e0 <_scanf_float+0x1d0>
 800d0da:	2d04      	cmp	r5, #4
 800d0dc:	f47f af48 	bne.w	800cf70 <_scanf_float+0x60>
 800d0e0:	3501      	adds	r5, #1
 800d0e2:	b2ed      	uxtb	r5, r5
 800d0e4:	e7d8      	b.n	800d098 <_scanf_float+0x188>
 800d0e6:	f1ba 0f01 	cmp.w	sl, #1
 800d0ea:	f47f af41 	bne.w	800cf70 <_scanf_float+0x60>
 800d0ee:	f04f 0a02 	mov.w	sl, #2
 800d0f2:	e7d1      	b.n	800d098 <_scanf_float+0x188>
 800d0f4:	b97d      	cbnz	r5, 800d116 <_scanf_float+0x206>
 800d0f6:	f1b9 0f00 	cmp.w	r9, #0
 800d0fa:	f47f af3c 	bne.w	800cf76 <_scanf_float+0x66>
 800d0fe:	6822      	ldr	r2, [r4, #0]
 800d100:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d104:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d108:	f47f af39 	bne.w	800cf7e <_scanf_float+0x6e>
 800d10c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d110:	6022      	str	r2, [r4, #0]
 800d112:	2501      	movs	r5, #1
 800d114:	e7c0      	b.n	800d098 <_scanf_float+0x188>
 800d116:	2d03      	cmp	r5, #3
 800d118:	d0e2      	beq.n	800d0e0 <_scanf_float+0x1d0>
 800d11a:	2d05      	cmp	r5, #5
 800d11c:	e7de      	b.n	800d0dc <_scanf_float+0x1cc>
 800d11e:	2d02      	cmp	r5, #2
 800d120:	f47f af26 	bne.w	800cf70 <_scanf_float+0x60>
 800d124:	2503      	movs	r5, #3
 800d126:	e7b7      	b.n	800d098 <_scanf_float+0x188>
 800d128:	2d06      	cmp	r5, #6
 800d12a:	f47f af21 	bne.w	800cf70 <_scanf_float+0x60>
 800d12e:	2507      	movs	r5, #7
 800d130:	e7b2      	b.n	800d098 <_scanf_float+0x188>
 800d132:	6822      	ldr	r2, [r4, #0]
 800d134:	0591      	lsls	r1, r2, #22
 800d136:	f57f af1b 	bpl.w	800cf70 <_scanf_float+0x60>
 800d13a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d13e:	6022      	str	r2, [r4, #0]
 800d140:	f8cd 9004 	str.w	r9, [sp, #4]
 800d144:	e7a8      	b.n	800d098 <_scanf_float+0x188>
 800d146:	6822      	ldr	r2, [r4, #0]
 800d148:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d14c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d150:	d006      	beq.n	800d160 <_scanf_float+0x250>
 800d152:	0550      	lsls	r0, r2, #21
 800d154:	f57f af0c 	bpl.w	800cf70 <_scanf_float+0x60>
 800d158:	f1b9 0f00 	cmp.w	r9, #0
 800d15c:	f43f af0f 	beq.w	800cf7e <_scanf_float+0x6e>
 800d160:	0591      	lsls	r1, r2, #22
 800d162:	bf58      	it	pl
 800d164:	9901      	ldrpl	r1, [sp, #4]
 800d166:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d16a:	bf58      	it	pl
 800d16c:	eba9 0101 	subpl.w	r1, r9, r1
 800d170:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d174:	bf58      	it	pl
 800d176:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d17a:	6022      	str	r2, [r4, #0]
 800d17c:	f04f 0900 	mov.w	r9, #0
 800d180:	e78a      	b.n	800d098 <_scanf_float+0x188>
 800d182:	f04f 0a03 	mov.w	sl, #3
 800d186:	e787      	b.n	800d098 <_scanf_float+0x188>
 800d188:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d18c:	4639      	mov	r1, r7
 800d18e:	4640      	mov	r0, r8
 800d190:	4798      	blx	r3
 800d192:	2800      	cmp	r0, #0
 800d194:	f43f aedf 	beq.w	800cf56 <_scanf_float+0x46>
 800d198:	e6ea      	b.n	800cf70 <_scanf_float+0x60>
 800d19a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d19e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d1a2:	463a      	mov	r2, r7
 800d1a4:	4640      	mov	r0, r8
 800d1a6:	4798      	blx	r3
 800d1a8:	6923      	ldr	r3, [r4, #16]
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	6123      	str	r3, [r4, #16]
 800d1ae:	e6ec      	b.n	800cf8a <_scanf_float+0x7a>
 800d1b0:	1e6b      	subs	r3, r5, #1
 800d1b2:	2b06      	cmp	r3, #6
 800d1b4:	d825      	bhi.n	800d202 <_scanf_float+0x2f2>
 800d1b6:	2d02      	cmp	r5, #2
 800d1b8:	d836      	bhi.n	800d228 <_scanf_float+0x318>
 800d1ba:	455e      	cmp	r6, fp
 800d1bc:	f67f aee8 	bls.w	800cf90 <_scanf_float+0x80>
 800d1c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d1c8:	463a      	mov	r2, r7
 800d1ca:	4640      	mov	r0, r8
 800d1cc:	4798      	blx	r3
 800d1ce:	6923      	ldr	r3, [r4, #16]
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	6123      	str	r3, [r4, #16]
 800d1d4:	e7f1      	b.n	800d1ba <_scanf_float+0x2aa>
 800d1d6:	9802      	ldr	r0, [sp, #8]
 800d1d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d1e0:	9002      	str	r0, [sp, #8]
 800d1e2:	463a      	mov	r2, r7
 800d1e4:	4640      	mov	r0, r8
 800d1e6:	4798      	blx	r3
 800d1e8:	6923      	ldr	r3, [r4, #16]
 800d1ea:	3b01      	subs	r3, #1
 800d1ec:	6123      	str	r3, [r4, #16]
 800d1ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1f2:	fa5f fa8a 	uxtb.w	sl, sl
 800d1f6:	f1ba 0f02 	cmp.w	sl, #2
 800d1fa:	d1ec      	bne.n	800d1d6 <_scanf_float+0x2c6>
 800d1fc:	3d03      	subs	r5, #3
 800d1fe:	b2ed      	uxtb	r5, r5
 800d200:	1b76      	subs	r6, r6, r5
 800d202:	6823      	ldr	r3, [r4, #0]
 800d204:	05da      	lsls	r2, r3, #23
 800d206:	d52f      	bpl.n	800d268 <_scanf_float+0x358>
 800d208:	055b      	lsls	r3, r3, #21
 800d20a:	d510      	bpl.n	800d22e <_scanf_float+0x31e>
 800d20c:	455e      	cmp	r6, fp
 800d20e:	f67f aebf 	bls.w	800cf90 <_scanf_float+0x80>
 800d212:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d216:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d21a:	463a      	mov	r2, r7
 800d21c:	4640      	mov	r0, r8
 800d21e:	4798      	blx	r3
 800d220:	6923      	ldr	r3, [r4, #16]
 800d222:	3b01      	subs	r3, #1
 800d224:	6123      	str	r3, [r4, #16]
 800d226:	e7f1      	b.n	800d20c <_scanf_float+0x2fc>
 800d228:	46aa      	mov	sl, r5
 800d22a:	9602      	str	r6, [sp, #8]
 800d22c:	e7df      	b.n	800d1ee <_scanf_float+0x2de>
 800d22e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d232:	6923      	ldr	r3, [r4, #16]
 800d234:	2965      	cmp	r1, #101	; 0x65
 800d236:	f103 33ff 	add.w	r3, r3, #4294967295
 800d23a:	f106 35ff 	add.w	r5, r6, #4294967295
 800d23e:	6123      	str	r3, [r4, #16]
 800d240:	d00c      	beq.n	800d25c <_scanf_float+0x34c>
 800d242:	2945      	cmp	r1, #69	; 0x45
 800d244:	d00a      	beq.n	800d25c <_scanf_float+0x34c>
 800d246:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d24a:	463a      	mov	r2, r7
 800d24c:	4640      	mov	r0, r8
 800d24e:	4798      	blx	r3
 800d250:	6923      	ldr	r3, [r4, #16]
 800d252:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d256:	3b01      	subs	r3, #1
 800d258:	1eb5      	subs	r5, r6, #2
 800d25a:	6123      	str	r3, [r4, #16]
 800d25c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d260:	463a      	mov	r2, r7
 800d262:	4640      	mov	r0, r8
 800d264:	4798      	blx	r3
 800d266:	462e      	mov	r6, r5
 800d268:	6825      	ldr	r5, [r4, #0]
 800d26a:	f015 0510 	ands.w	r5, r5, #16
 800d26e:	d159      	bne.n	800d324 <_scanf_float+0x414>
 800d270:	7035      	strb	r5, [r6, #0]
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d27c:	d11b      	bne.n	800d2b6 <_scanf_float+0x3a6>
 800d27e:	9b01      	ldr	r3, [sp, #4]
 800d280:	454b      	cmp	r3, r9
 800d282:	eba3 0209 	sub.w	r2, r3, r9
 800d286:	d123      	bne.n	800d2d0 <_scanf_float+0x3c0>
 800d288:	2200      	movs	r2, #0
 800d28a:	4659      	mov	r1, fp
 800d28c:	4640      	mov	r0, r8
 800d28e:	f000 ff09 	bl	800e0a4 <_strtod_r>
 800d292:	6822      	ldr	r2, [r4, #0]
 800d294:	9b03      	ldr	r3, [sp, #12]
 800d296:	f012 0f02 	tst.w	r2, #2
 800d29a:	ec57 6b10 	vmov	r6, r7, d0
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	d021      	beq.n	800d2e6 <_scanf_float+0x3d6>
 800d2a2:	9903      	ldr	r1, [sp, #12]
 800d2a4:	1d1a      	adds	r2, r3, #4
 800d2a6:	600a      	str	r2, [r1, #0]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	e9c3 6700 	strd	r6, r7, [r3]
 800d2ae:	68e3      	ldr	r3, [r4, #12]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	60e3      	str	r3, [r4, #12]
 800d2b4:	e66d      	b.n	800cf92 <_scanf_float+0x82>
 800d2b6:	9b04      	ldr	r3, [sp, #16]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d0e5      	beq.n	800d288 <_scanf_float+0x378>
 800d2bc:	9905      	ldr	r1, [sp, #20]
 800d2be:	230a      	movs	r3, #10
 800d2c0:	462a      	mov	r2, r5
 800d2c2:	3101      	adds	r1, #1
 800d2c4:	4640      	mov	r0, r8
 800d2c6:	f000 ff81 	bl	800e1cc <_strtol_r>
 800d2ca:	9b04      	ldr	r3, [sp, #16]
 800d2cc:	9e05      	ldr	r6, [sp, #20]
 800d2ce:	1ac2      	subs	r2, r0, r3
 800d2d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d2d4:	429e      	cmp	r6, r3
 800d2d6:	bf28      	it	cs
 800d2d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d2dc:	4912      	ldr	r1, [pc, #72]	; (800d328 <_scanf_float+0x418>)
 800d2de:	4630      	mov	r0, r6
 800d2e0:	f000 f82c 	bl	800d33c <siprintf>
 800d2e4:	e7d0      	b.n	800d288 <_scanf_float+0x378>
 800d2e6:	9903      	ldr	r1, [sp, #12]
 800d2e8:	f012 0f04 	tst.w	r2, #4
 800d2ec:	f103 0204 	add.w	r2, r3, #4
 800d2f0:	600a      	str	r2, [r1, #0]
 800d2f2:	d1d9      	bne.n	800d2a8 <_scanf_float+0x398>
 800d2f4:	f8d3 8000 	ldr.w	r8, [r3]
 800d2f8:	ee10 2a10 	vmov	r2, s0
 800d2fc:	ee10 0a10 	vmov	r0, s0
 800d300:	463b      	mov	r3, r7
 800d302:	4639      	mov	r1, r7
 800d304:	f7f3 fc2a 	bl	8000b5c <__aeabi_dcmpun>
 800d308:	b128      	cbz	r0, 800d316 <_scanf_float+0x406>
 800d30a:	4808      	ldr	r0, [pc, #32]	; (800d32c <_scanf_float+0x41c>)
 800d30c:	f000 f810 	bl	800d330 <nanf>
 800d310:	ed88 0a00 	vstr	s0, [r8]
 800d314:	e7cb      	b.n	800d2ae <_scanf_float+0x39e>
 800d316:	4630      	mov	r0, r6
 800d318:	4639      	mov	r1, r7
 800d31a:	f7f3 fc7d 	bl	8000c18 <__aeabi_d2f>
 800d31e:	f8c8 0000 	str.w	r0, [r8]
 800d322:	e7c4      	b.n	800d2ae <_scanf_float+0x39e>
 800d324:	2500      	movs	r5, #0
 800d326:	e634      	b.n	800cf92 <_scanf_float+0x82>
 800d328:	08014416 	.word	0x08014416
 800d32c:	0801483b 	.word	0x0801483b

0800d330 <nanf>:
 800d330:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d338 <nanf+0x8>
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	7fc00000 	.word	0x7fc00000

0800d33c <siprintf>:
 800d33c:	b40e      	push	{r1, r2, r3}
 800d33e:	b500      	push	{lr}
 800d340:	b09c      	sub	sp, #112	; 0x70
 800d342:	ab1d      	add	r3, sp, #116	; 0x74
 800d344:	9002      	str	r0, [sp, #8]
 800d346:	9006      	str	r0, [sp, #24]
 800d348:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d34c:	4809      	ldr	r0, [pc, #36]	; (800d374 <siprintf+0x38>)
 800d34e:	9107      	str	r1, [sp, #28]
 800d350:	9104      	str	r1, [sp, #16]
 800d352:	4909      	ldr	r1, [pc, #36]	; (800d378 <siprintf+0x3c>)
 800d354:	f853 2b04 	ldr.w	r2, [r3], #4
 800d358:	9105      	str	r1, [sp, #20]
 800d35a:	6800      	ldr	r0, [r0, #0]
 800d35c:	9301      	str	r3, [sp, #4]
 800d35e:	a902      	add	r1, sp, #8
 800d360:	f002 ff90 	bl	8010284 <_svfiprintf_r>
 800d364:	9b02      	ldr	r3, [sp, #8]
 800d366:	2200      	movs	r2, #0
 800d368:	701a      	strb	r2, [r3, #0]
 800d36a:	b01c      	add	sp, #112	; 0x70
 800d36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d370:	b003      	add	sp, #12
 800d372:	4770      	bx	lr
 800d374:	2000003c 	.word	0x2000003c
 800d378:	ffff0208 	.word	0xffff0208

0800d37c <siscanf>:
 800d37c:	b40e      	push	{r1, r2, r3}
 800d37e:	b510      	push	{r4, lr}
 800d380:	b09f      	sub	sp, #124	; 0x7c
 800d382:	ac21      	add	r4, sp, #132	; 0x84
 800d384:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d388:	f854 2b04 	ldr.w	r2, [r4], #4
 800d38c:	9201      	str	r2, [sp, #4]
 800d38e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d392:	9004      	str	r0, [sp, #16]
 800d394:	9008      	str	r0, [sp, #32]
 800d396:	f7f2 ff2d 	bl	80001f4 <strlen>
 800d39a:	4b0c      	ldr	r3, [pc, #48]	; (800d3cc <siscanf+0x50>)
 800d39c:	9005      	str	r0, [sp, #20]
 800d39e:	9009      	str	r0, [sp, #36]	; 0x24
 800d3a0:	930d      	str	r3, [sp, #52]	; 0x34
 800d3a2:	480b      	ldr	r0, [pc, #44]	; (800d3d0 <siscanf+0x54>)
 800d3a4:	9a01      	ldr	r2, [sp, #4]
 800d3a6:	6800      	ldr	r0, [r0, #0]
 800d3a8:	9403      	str	r4, [sp, #12]
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	9311      	str	r3, [sp, #68]	; 0x44
 800d3ae:	9316      	str	r3, [sp, #88]	; 0x58
 800d3b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d3b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d3b8:	a904      	add	r1, sp, #16
 800d3ba:	4623      	mov	r3, r4
 800d3bc:	f003 f8bc 	bl	8010538 <__ssvfiscanf_r>
 800d3c0:	b01f      	add	sp, #124	; 0x7c
 800d3c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3c6:	b003      	add	sp, #12
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop
 800d3cc:	0800d3f7 	.word	0x0800d3f7
 800d3d0:	2000003c 	.word	0x2000003c

0800d3d4 <__sread>:
 800d3d4:	b510      	push	{r4, lr}
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3dc:	f003 fb76 	bl	8010acc <_read_r>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	bfab      	itete	ge
 800d3e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d3e6:	89a3      	ldrhlt	r3, [r4, #12]
 800d3e8:	181b      	addge	r3, r3, r0
 800d3ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3ee:	bfac      	ite	ge
 800d3f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d3f2:	81a3      	strhlt	r3, [r4, #12]
 800d3f4:	bd10      	pop	{r4, pc}

0800d3f6 <__seofread>:
 800d3f6:	2000      	movs	r0, #0
 800d3f8:	4770      	bx	lr

0800d3fa <__swrite>:
 800d3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3fe:	461f      	mov	r7, r3
 800d400:	898b      	ldrh	r3, [r1, #12]
 800d402:	05db      	lsls	r3, r3, #23
 800d404:	4605      	mov	r5, r0
 800d406:	460c      	mov	r4, r1
 800d408:	4616      	mov	r6, r2
 800d40a:	d505      	bpl.n	800d418 <__swrite+0x1e>
 800d40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d410:	2302      	movs	r3, #2
 800d412:	2200      	movs	r2, #0
 800d414:	f002 f8f6 	bl	800f604 <_lseek_r>
 800d418:	89a3      	ldrh	r3, [r4, #12]
 800d41a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d41e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d422:	81a3      	strh	r3, [r4, #12]
 800d424:	4632      	mov	r2, r6
 800d426:	463b      	mov	r3, r7
 800d428:	4628      	mov	r0, r5
 800d42a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d42e:	f000 bed9 	b.w	800e1e4 <_write_r>

0800d432 <__sseek>:
 800d432:	b510      	push	{r4, lr}
 800d434:	460c      	mov	r4, r1
 800d436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d43a:	f002 f8e3 	bl	800f604 <_lseek_r>
 800d43e:	1c43      	adds	r3, r0, #1
 800d440:	89a3      	ldrh	r3, [r4, #12]
 800d442:	bf15      	itete	ne
 800d444:	6560      	strne	r0, [r4, #84]	; 0x54
 800d446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d44a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d44e:	81a3      	strheq	r3, [r4, #12]
 800d450:	bf18      	it	ne
 800d452:	81a3      	strhne	r3, [r4, #12]
 800d454:	bd10      	pop	{r4, pc}

0800d456 <__sclose>:
 800d456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d45a:	f000 bed5 	b.w	800e208 <_close_r>

0800d45e <sulp>:
 800d45e:	b570      	push	{r4, r5, r6, lr}
 800d460:	4604      	mov	r4, r0
 800d462:	460d      	mov	r5, r1
 800d464:	ec45 4b10 	vmov	d0, r4, r5
 800d468:	4616      	mov	r6, r2
 800d46a:	f002 fc69 	bl	800fd40 <__ulp>
 800d46e:	ec51 0b10 	vmov	r0, r1, d0
 800d472:	b17e      	cbz	r6, 800d494 <sulp+0x36>
 800d474:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d478:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	dd09      	ble.n	800d494 <sulp+0x36>
 800d480:	051b      	lsls	r3, r3, #20
 800d482:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d486:	2400      	movs	r4, #0
 800d488:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d48c:	4622      	mov	r2, r4
 800d48e:	462b      	mov	r3, r5
 800d490:	f7f3 f8ca 	bl	8000628 <__aeabi_dmul>
 800d494:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d498 <_strtod_l>:
 800d498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49c:	ed2d 8b02 	vpush	{d8}
 800d4a0:	b09d      	sub	sp, #116	; 0x74
 800d4a2:	461f      	mov	r7, r3
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	9318      	str	r3, [sp, #96]	; 0x60
 800d4a8:	4ba2      	ldr	r3, [pc, #648]	; (800d734 <_strtod_l+0x29c>)
 800d4aa:	9213      	str	r2, [sp, #76]	; 0x4c
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	9305      	str	r3, [sp, #20]
 800d4b0:	4604      	mov	r4, r0
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	4688      	mov	r8, r1
 800d4b6:	f7f2 fe9d 	bl	80001f4 <strlen>
 800d4ba:	f04f 0a00 	mov.w	sl, #0
 800d4be:	4605      	mov	r5, r0
 800d4c0:	f04f 0b00 	mov.w	fp, #0
 800d4c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d4c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4ca:	781a      	ldrb	r2, [r3, #0]
 800d4cc:	2a2b      	cmp	r2, #43	; 0x2b
 800d4ce:	d04e      	beq.n	800d56e <_strtod_l+0xd6>
 800d4d0:	d83b      	bhi.n	800d54a <_strtod_l+0xb2>
 800d4d2:	2a0d      	cmp	r2, #13
 800d4d4:	d834      	bhi.n	800d540 <_strtod_l+0xa8>
 800d4d6:	2a08      	cmp	r2, #8
 800d4d8:	d834      	bhi.n	800d544 <_strtod_l+0xac>
 800d4da:	2a00      	cmp	r2, #0
 800d4dc:	d03e      	beq.n	800d55c <_strtod_l+0xc4>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	930a      	str	r3, [sp, #40]	; 0x28
 800d4e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d4e4:	7833      	ldrb	r3, [r6, #0]
 800d4e6:	2b30      	cmp	r3, #48	; 0x30
 800d4e8:	f040 80b0 	bne.w	800d64c <_strtod_l+0x1b4>
 800d4ec:	7873      	ldrb	r3, [r6, #1]
 800d4ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d4f2:	2b58      	cmp	r3, #88	; 0x58
 800d4f4:	d168      	bne.n	800d5c8 <_strtod_l+0x130>
 800d4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4f8:	9301      	str	r3, [sp, #4]
 800d4fa:	ab18      	add	r3, sp, #96	; 0x60
 800d4fc:	9702      	str	r7, [sp, #8]
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	4a8d      	ldr	r2, [pc, #564]	; (800d738 <_strtod_l+0x2a0>)
 800d502:	ab19      	add	r3, sp, #100	; 0x64
 800d504:	a917      	add	r1, sp, #92	; 0x5c
 800d506:	4620      	mov	r0, r4
 800d508:	f001 fd70 	bl	800efec <__gethex>
 800d50c:	f010 0707 	ands.w	r7, r0, #7
 800d510:	4605      	mov	r5, r0
 800d512:	d005      	beq.n	800d520 <_strtod_l+0x88>
 800d514:	2f06      	cmp	r7, #6
 800d516:	d12c      	bne.n	800d572 <_strtod_l+0xda>
 800d518:	3601      	adds	r6, #1
 800d51a:	2300      	movs	r3, #0
 800d51c:	9617      	str	r6, [sp, #92]	; 0x5c
 800d51e:	930a      	str	r3, [sp, #40]	; 0x28
 800d520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d522:	2b00      	cmp	r3, #0
 800d524:	f040 8590 	bne.w	800e048 <_strtod_l+0xbb0>
 800d528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d52a:	b1eb      	cbz	r3, 800d568 <_strtod_l+0xd0>
 800d52c:	4652      	mov	r2, sl
 800d52e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d532:	ec43 2b10 	vmov	d0, r2, r3
 800d536:	b01d      	add	sp, #116	; 0x74
 800d538:	ecbd 8b02 	vpop	{d8}
 800d53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d540:	2a20      	cmp	r2, #32
 800d542:	d1cc      	bne.n	800d4de <_strtod_l+0x46>
 800d544:	3301      	adds	r3, #1
 800d546:	9317      	str	r3, [sp, #92]	; 0x5c
 800d548:	e7be      	b.n	800d4c8 <_strtod_l+0x30>
 800d54a:	2a2d      	cmp	r2, #45	; 0x2d
 800d54c:	d1c7      	bne.n	800d4de <_strtod_l+0x46>
 800d54e:	2201      	movs	r2, #1
 800d550:	920a      	str	r2, [sp, #40]	; 0x28
 800d552:	1c5a      	adds	r2, r3, #1
 800d554:	9217      	str	r2, [sp, #92]	; 0x5c
 800d556:	785b      	ldrb	r3, [r3, #1]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1c2      	bne.n	800d4e2 <_strtod_l+0x4a>
 800d55c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d55e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d562:	2b00      	cmp	r3, #0
 800d564:	f040 856e 	bne.w	800e044 <_strtod_l+0xbac>
 800d568:	4652      	mov	r2, sl
 800d56a:	465b      	mov	r3, fp
 800d56c:	e7e1      	b.n	800d532 <_strtod_l+0x9a>
 800d56e:	2200      	movs	r2, #0
 800d570:	e7ee      	b.n	800d550 <_strtod_l+0xb8>
 800d572:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d574:	b13a      	cbz	r2, 800d586 <_strtod_l+0xee>
 800d576:	2135      	movs	r1, #53	; 0x35
 800d578:	a81a      	add	r0, sp, #104	; 0x68
 800d57a:	f002 fcec 	bl	800ff56 <__copybits>
 800d57e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d580:	4620      	mov	r0, r4
 800d582:	f002 f8ab 	bl	800f6dc <_Bfree>
 800d586:	3f01      	subs	r7, #1
 800d588:	2f04      	cmp	r7, #4
 800d58a:	d806      	bhi.n	800d59a <_strtod_l+0x102>
 800d58c:	e8df f007 	tbb	[pc, r7]
 800d590:	1714030a 	.word	0x1714030a
 800d594:	0a          	.byte	0x0a
 800d595:	00          	.byte	0x00
 800d596:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d59a:	0728      	lsls	r0, r5, #28
 800d59c:	d5c0      	bpl.n	800d520 <_strtod_l+0x88>
 800d59e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d5a2:	e7bd      	b.n	800d520 <_strtod_l+0x88>
 800d5a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d5a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d5aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d5ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d5b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d5b6:	e7f0      	b.n	800d59a <_strtod_l+0x102>
 800d5b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d73c <_strtod_l+0x2a4>
 800d5bc:	e7ed      	b.n	800d59a <_strtod_l+0x102>
 800d5be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d5c2:	f04f 3aff 	mov.w	sl, #4294967295
 800d5c6:	e7e8      	b.n	800d59a <_strtod_l+0x102>
 800d5c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5ca:	1c5a      	adds	r2, r3, #1
 800d5cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800d5ce:	785b      	ldrb	r3, [r3, #1]
 800d5d0:	2b30      	cmp	r3, #48	; 0x30
 800d5d2:	d0f9      	beq.n	800d5c8 <_strtod_l+0x130>
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d0a3      	beq.n	800d520 <_strtod_l+0x88>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	f04f 0900 	mov.w	r9, #0
 800d5de:	9304      	str	r3, [sp, #16]
 800d5e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5e2:	9308      	str	r3, [sp, #32]
 800d5e4:	f8cd 901c 	str.w	r9, [sp, #28]
 800d5e8:	464f      	mov	r7, r9
 800d5ea:	220a      	movs	r2, #10
 800d5ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d5ee:	7806      	ldrb	r6, [r0, #0]
 800d5f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d5f4:	b2d9      	uxtb	r1, r3
 800d5f6:	2909      	cmp	r1, #9
 800d5f8:	d92a      	bls.n	800d650 <_strtod_l+0x1b8>
 800d5fa:	9905      	ldr	r1, [sp, #20]
 800d5fc:	462a      	mov	r2, r5
 800d5fe:	f003 fac7 	bl	8010b90 <strncmp>
 800d602:	b398      	cbz	r0, 800d66c <_strtod_l+0x1d4>
 800d604:	2000      	movs	r0, #0
 800d606:	4632      	mov	r2, r6
 800d608:	463d      	mov	r5, r7
 800d60a:	9005      	str	r0, [sp, #20]
 800d60c:	4603      	mov	r3, r0
 800d60e:	2a65      	cmp	r2, #101	; 0x65
 800d610:	d001      	beq.n	800d616 <_strtod_l+0x17e>
 800d612:	2a45      	cmp	r2, #69	; 0x45
 800d614:	d118      	bne.n	800d648 <_strtod_l+0x1b0>
 800d616:	b91d      	cbnz	r5, 800d620 <_strtod_l+0x188>
 800d618:	9a04      	ldr	r2, [sp, #16]
 800d61a:	4302      	orrs	r2, r0
 800d61c:	d09e      	beq.n	800d55c <_strtod_l+0xc4>
 800d61e:	2500      	movs	r5, #0
 800d620:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d624:	f108 0201 	add.w	r2, r8, #1
 800d628:	9217      	str	r2, [sp, #92]	; 0x5c
 800d62a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d62e:	2a2b      	cmp	r2, #43	; 0x2b
 800d630:	d075      	beq.n	800d71e <_strtod_l+0x286>
 800d632:	2a2d      	cmp	r2, #45	; 0x2d
 800d634:	d07b      	beq.n	800d72e <_strtod_l+0x296>
 800d636:	f04f 0c00 	mov.w	ip, #0
 800d63a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d63e:	2909      	cmp	r1, #9
 800d640:	f240 8082 	bls.w	800d748 <_strtod_l+0x2b0>
 800d644:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d648:	2600      	movs	r6, #0
 800d64a:	e09d      	b.n	800d788 <_strtod_l+0x2f0>
 800d64c:	2300      	movs	r3, #0
 800d64e:	e7c4      	b.n	800d5da <_strtod_l+0x142>
 800d650:	2f08      	cmp	r7, #8
 800d652:	bfd8      	it	le
 800d654:	9907      	ldrle	r1, [sp, #28]
 800d656:	f100 0001 	add.w	r0, r0, #1
 800d65a:	bfda      	itte	le
 800d65c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d660:	9307      	strle	r3, [sp, #28]
 800d662:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d666:	3701      	adds	r7, #1
 800d668:	9017      	str	r0, [sp, #92]	; 0x5c
 800d66a:	e7bf      	b.n	800d5ec <_strtod_l+0x154>
 800d66c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d66e:	195a      	adds	r2, r3, r5
 800d670:	9217      	str	r2, [sp, #92]	; 0x5c
 800d672:	5d5a      	ldrb	r2, [r3, r5]
 800d674:	2f00      	cmp	r7, #0
 800d676:	d037      	beq.n	800d6e8 <_strtod_l+0x250>
 800d678:	9005      	str	r0, [sp, #20]
 800d67a:	463d      	mov	r5, r7
 800d67c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d680:	2b09      	cmp	r3, #9
 800d682:	d912      	bls.n	800d6aa <_strtod_l+0x212>
 800d684:	2301      	movs	r3, #1
 800d686:	e7c2      	b.n	800d60e <_strtod_l+0x176>
 800d688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d68a:	1c5a      	adds	r2, r3, #1
 800d68c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d68e:	785a      	ldrb	r2, [r3, #1]
 800d690:	3001      	adds	r0, #1
 800d692:	2a30      	cmp	r2, #48	; 0x30
 800d694:	d0f8      	beq.n	800d688 <_strtod_l+0x1f0>
 800d696:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d69a:	2b08      	cmp	r3, #8
 800d69c:	f200 84d9 	bhi.w	800e052 <_strtod_l+0xbba>
 800d6a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6a2:	9005      	str	r0, [sp, #20]
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	9308      	str	r3, [sp, #32]
 800d6a8:	4605      	mov	r5, r0
 800d6aa:	3a30      	subs	r2, #48	; 0x30
 800d6ac:	f100 0301 	add.w	r3, r0, #1
 800d6b0:	d014      	beq.n	800d6dc <_strtod_l+0x244>
 800d6b2:	9905      	ldr	r1, [sp, #20]
 800d6b4:	4419      	add	r1, r3
 800d6b6:	9105      	str	r1, [sp, #20]
 800d6b8:	462b      	mov	r3, r5
 800d6ba:	eb00 0e05 	add.w	lr, r0, r5
 800d6be:	210a      	movs	r1, #10
 800d6c0:	4573      	cmp	r3, lr
 800d6c2:	d113      	bne.n	800d6ec <_strtod_l+0x254>
 800d6c4:	182b      	adds	r3, r5, r0
 800d6c6:	2b08      	cmp	r3, #8
 800d6c8:	f105 0501 	add.w	r5, r5, #1
 800d6cc:	4405      	add	r5, r0
 800d6ce:	dc1c      	bgt.n	800d70a <_strtod_l+0x272>
 800d6d0:	9907      	ldr	r1, [sp, #28]
 800d6d2:	230a      	movs	r3, #10
 800d6d4:	fb03 2301 	mla	r3, r3, r1, r2
 800d6d8:	9307      	str	r3, [sp, #28]
 800d6da:	2300      	movs	r3, #0
 800d6dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d6de:	1c51      	adds	r1, r2, #1
 800d6e0:	9117      	str	r1, [sp, #92]	; 0x5c
 800d6e2:	7852      	ldrb	r2, [r2, #1]
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	e7c9      	b.n	800d67c <_strtod_l+0x1e4>
 800d6e8:	4638      	mov	r0, r7
 800d6ea:	e7d2      	b.n	800d692 <_strtod_l+0x1fa>
 800d6ec:	2b08      	cmp	r3, #8
 800d6ee:	dc04      	bgt.n	800d6fa <_strtod_l+0x262>
 800d6f0:	9e07      	ldr	r6, [sp, #28]
 800d6f2:	434e      	muls	r6, r1
 800d6f4:	9607      	str	r6, [sp, #28]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	e7e2      	b.n	800d6c0 <_strtod_l+0x228>
 800d6fa:	f103 0c01 	add.w	ip, r3, #1
 800d6fe:	f1bc 0f10 	cmp.w	ip, #16
 800d702:	bfd8      	it	le
 800d704:	fb01 f909 	mulle.w	r9, r1, r9
 800d708:	e7f5      	b.n	800d6f6 <_strtod_l+0x25e>
 800d70a:	2d10      	cmp	r5, #16
 800d70c:	bfdc      	itt	le
 800d70e:	230a      	movle	r3, #10
 800d710:	fb03 2909 	mlale	r9, r3, r9, r2
 800d714:	e7e1      	b.n	800d6da <_strtod_l+0x242>
 800d716:	2300      	movs	r3, #0
 800d718:	9305      	str	r3, [sp, #20]
 800d71a:	2301      	movs	r3, #1
 800d71c:	e77c      	b.n	800d618 <_strtod_l+0x180>
 800d71e:	f04f 0c00 	mov.w	ip, #0
 800d722:	f108 0202 	add.w	r2, r8, #2
 800d726:	9217      	str	r2, [sp, #92]	; 0x5c
 800d728:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d72c:	e785      	b.n	800d63a <_strtod_l+0x1a2>
 800d72e:	f04f 0c01 	mov.w	ip, #1
 800d732:	e7f6      	b.n	800d722 <_strtod_l+0x28a>
 800d734:	08014668 	.word	0x08014668
 800d738:	0801441c 	.word	0x0801441c
 800d73c:	7ff00000 	.word	0x7ff00000
 800d740:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d742:	1c51      	adds	r1, r2, #1
 800d744:	9117      	str	r1, [sp, #92]	; 0x5c
 800d746:	7852      	ldrb	r2, [r2, #1]
 800d748:	2a30      	cmp	r2, #48	; 0x30
 800d74a:	d0f9      	beq.n	800d740 <_strtod_l+0x2a8>
 800d74c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d750:	2908      	cmp	r1, #8
 800d752:	f63f af79 	bhi.w	800d648 <_strtod_l+0x1b0>
 800d756:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d75a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d75c:	9206      	str	r2, [sp, #24]
 800d75e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d760:	1c51      	adds	r1, r2, #1
 800d762:	9117      	str	r1, [sp, #92]	; 0x5c
 800d764:	7852      	ldrb	r2, [r2, #1]
 800d766:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d76a:	2e09      	cmp	r6, #9
 800d76c:	d937      	bls.n	800d7de <_strtod_l+0x346>
 800d76e:	9e06      	ldr	r6, [sp, #24]
 800d770:	1b89      	subs	r1, r1, r6
 800d772:	2908      	cmp	r1, #8
 800d774:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d778:	dc02      	bgt.n	800d780 <_strtod_l+0x2e8>
 800d77a:	4576      	cmp	r6, lr
 800d77c:	bfa8      	it	ge
 800d77e:	4676      	movge	r6, lr
 800d780:	f1bc 0f00 	cmp.w	ip, #0
 800d784:	d000      	beq.n	800d788 <_strtod_l+0x2f0>
 800d786:	4276      	negs	r6, r6
 800d788:	2d00      	cmp	r5, #0
 800d78a:	d14d      	bne.n	800d828 <_strtod_l+0x390>
 800d78c:	9904      	ldr	r1, [sp, #16]
 800d78e:	4301      	orrs	r1, r0
 800d790:	f47f aec6 	bne.w	800d520 <_strtod_l+0x88>
 800d794:	2b00      	cmp	r3, #0
 800d796:	f47f aee1 	bne.w	800d55c <_strtod_l+0xc4>
 800d79a:	2a69      	cmp	r2, #105	; 0x69
 800d79c:	d027      	beq.n	800d7ee <_strtod_l+0x356>
 800d79e:	dc24      	bgt.n	800d7ea <_strtod_l+0x352>
 800d7a0:	2a49      	cmp	r2, #73	; 0x49
 800d7a2:	d024      	beq.n	800d7ee <_strtod_l+0x356>
 800d7a4:	2a4e      	cmp	r2, #78	; 0x4e
 800d7a6:	f47f aed9 	bne.w	800d55c <_strtod_l+0xc4>
 800d7aa:	499f      	ldr	r1, [pc, #636]	; (800da28 <_strtod_l+0x590>)
 800d7ac:	a817      	add	r0, sp, #92	; 0x5c
 800d7ae:	f001 fe75 	bl	800f49c <__match>
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	f43f aed2 	beq.w	800d55c <_strtod_l+0xc4>
 800d7b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	2b28      	cmp	r3, #40	; 0x28
 800d7be:	d12d      	bne.n	800d81c <_strtod_l+0x384>
 800d7c0:	499a      	ldr	r1, [pc, #616]	; (800da2c <_strtod_l+0x594>)
 800d7c2:	aa1a      	add	r2, sp, #104	; 0x68
 800d7c4:	a817      	add	r0, sp, #92	; 0x5c
 800d7c6:	f001 fe7d 	bl	800f4c4 <__hexnan>
 800d7ca:	2805      	cmp	r0, #5
 800d7cc:	d126      	bne.n	800d81c <_strtod_l+0x384>
 800d7ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d7d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d7d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d7d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d7dc:	e6a0      	b.n	800d520 <_strtod_l+0x88>
 800d7de:	210a      	movs	r1, #10
 800d7e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d7e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d7e8:	e7b9      	b.n	800d75e <_strtod_l+0x2c6>
 800d7ea:	2a6e      	cmp	r2, #110	; 0x6e
 800d7ec:	e7db      	b.n	800d7a6 <_strtod_l+0x30e>
 800d7ee:	4990      	ldr	r1, [pc, #576]	; (800da30 <_strtod_l+0x598>)
 800d7f0:	a817      	add	r0, sp, #92	; 0x5c
 800d7f2:	f001 fe53 	bl	800f49c <__match>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	f43f aeb0 	beq.w	800d55c <_strtod_l+0xc4>
 800d7fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7fe:	498d      	ldr	r1, [pc, #564]	; (800da34 <_strtod_l+0x59c>)
 800d800:	3b01      	subs	r3, #1
 800d802:	a817      	add	r0, sp, #92	; 0x5c
 800d804:	9317      	str	r3, [sp, #92]	; 0x5c
 800d806:	f001 fe49 	bl	800f49c <__match>
 800d80a:	b910      	cbnz	r0, 800d812 <_strtod_l+0x37a>
 800d80c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d80e:	3301      	adds	r3, #1
 800d810:	9317      	str	r3, [sp, #92]	; 0x5c
 800d812:	f8df b230 	ldr.w	fp, [pc, #560]	; 800da44 <_strtod_l+0x5ac>
 800d816:	f04f 0a00 	mov.w	sl, #0
 800d81a:	e681      	b.n	800d520 <_strtod_l+0x88>
 800d81c:	4886      	ldr	r0, [pc, #536]	; (800da38 <_strtod_l+0x5a0>)
 800d81e:	f003 f967 	bl	8010af0 <nan>
 800d822:	ec5b ab10 	vmov	sl, fp, d0
 800d826:	e67b      	b.n	800d520 <_strtod_l+0x88>
 800d828:	9b05      	ldr	r3, [sp, #20]
 800d82a:	9807      	ldr	r0, [sp, #28]
 800d82c:	1af3      	subs	r3, r6, r3
 800d82e:	2f00      	cmp	r7, #0
 800d830:	bf08      	it	eq
 800d832:	462f      	moveq	r7, r5
 800d834:	2d10      	cmp	r5, #16
 800d836:	9306      	str	r3, [sp, #24]
 800d838:	46a8      	mov	r8, r5
 800d83a:	bfa8      	it	ge
 800d83c:	f04f 0810 	movge.w	r8, #16
 800d840:	f7f2 fe78 	bl	8000534 <__aeabi_ui2d>
 800d844:	2d09      	cmp	r5, #9
 800d846:	4682      	mov	sl, r0
 800d848:	468b      	mov	fp, r1
 800d84a:	dd13      	ble.n	800d874 <_strtod_l+0x3dc>
 800d84c:	4b7b      	ldr	r3, [pc, #492]	; (800da3c <_strtod_l+0x5a4>)
 800d84e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d852:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d856:	f7f2 fee7 	bl	8000628 <__aeabi_dmul>
 800d85a:	4682      	mov	sl, r0
 800d85c:	4648      	mov	r0, r9
 800d85e:	468b      	mov	fp, r1
 800d860:	f7f2 fe68 	bl	8000534 <__aeabi_ui2d>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	4650      	mov	r0, sl
 800d86a:	4659      	mov	r1, fp
 800d86c:	f7f2 fd26 	bl	80002bc <__adddf3>
 800d870:	4682      	mov	sl, r0
 800d872:	468b      	mov	fp, r1
 800d874:	2d0f      	cmp	r5, #15
 800d876:	dc38      	bgt.n	800d8ea <_strtod_l+0x452>
 800d878:	9b06      	ldr	r3, [sp, #24]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	f43f ae50 	beq.w	800d520 <_strtod_l+0x88>
 800d880:	dd24      	ble.n	800d8cc <_strtod_l+0x434>
 800d882:	2b16      	cmp	r3, #22
 800d884:	dc0b      	bgt.n	800d89e <_strtod_l+0x406>
 800d886:	496d      	ldr	r1, [pc, #436]	; (800da3c <_strtod_l+0x5a4>)
 800d888:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d88c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d890:	4652      	mov	r2, sl
 800d892:	465b      	mov	r3, fp
 800d894:	f7f2 fec8 	bl	8000628 <__aeabi_dmul>
 800d898:	4682      	mov	sl, r0
 800d89a:	468b      	mov	fp, r1
 800d89c:	e640      	b.n	800d520 <_strtod_l+0x88>
 800d89e:	9a06      	ldr	r2, [sp, #24]
 800d8a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	db20      	blt.n	800d8ea <_strtod_l+0x452>
 800d8a8:	4c64      	ldr	r4, [pc, #400]	; (800da3c <_strtod_l+0x5a4>)
 800d8aa:	f1c5 050f 	rsb	r5, r5, #15
 800d8ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d8b2:	4652      	mov	r2, sl
 800d8b4:	465b      	mov	r3, fp
 800d8b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8ba:	f7f2 feb5 	bl	8000628 <__aeabi_dmul>
 800d8be:	9b06      	ldr	r3, [sp, #24]
 800d8c0:	1b5d      	subs	r5, r3, r5
 800d8c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d8c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d8ca:	e7e3      	b.n	800d894 <_strtod_l+0x3fc>
 800d8cc:	9b06      	ldr	r3, [sp, #24]
 800d8ce:	3316      	adds	r3, #22
 800d8d0:	db0b      	blt.n	800d8ea <_strtod_l+0x452>
 800d8d2:	9b05      	ldr	r3, [sp, #20]
 800d8d4:	1b9e      	subs	r6, r3, r6
 800d8d6:	4b59      	ldr	r3, [pc, #356]	; (800da3c <_strtod_l+0x5a4>)
 800d8d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d8dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d8e0:	4650      	mov	r0, sl
 800d8e2:	4659      	mov	r1, fp
 800d8e4:	f7f2 ffca 	bl	800087c <__aeabi_ddiv>
 800d8e8:	e7d6      	b.n	800d898 <_strtod_l+0x400>
 800d8ea:	9b06      	ldr	r3, [sp, #24]
 800d8ec:	eba5 0808 	sub.w	r8, r5, r8
 800d8f0:	4498      	add	r8, r3
 800d8f2:	f1b8 0f00 	cmp.w	r8, #0
 800d8f6:	dd74      	ble.n	800d9e2 <_strtod_l+0x54a>
 800d8f8:	f018 030f 	ands.w	r3, r8, #15
 800d8fc:	d00a      	beq.n	800d914 <_strtod_l+0x47c>
 800d8fe:	494f      	ldr	r1, [pc, #316]	; (800da3c <_strtod_l+0x5a4>)
 800d900:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d904:	4652      	mov	r2, sl
 800d906:	465b      	mov	r3, fp
 800d908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d90c:	f7f2 fe8c 	bl	8000628 <__aeabi_dmul>
 800d910:	4682      	mov	sl, r0
 800d912:	468b      	mov	fp, r1
 800d914:	f038 080f 	bics.w	r8, r8, #15
 800d918:	d04f      	beq.n	800d9ba <_strtod_l+0x522>
 800d91a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d91e:	dd22      	ble.n	800d966 <_strtod_l+0x4ce>
 800d920:	2500      	movs	r5, #0
 800d922:	462e      	mov	r6, r5
 800d924:	9507      	str	r5, [sp, #28]
 800d926:	9505      	str	r5, [sp, #20]
 800d928:	2322      	movs	r3, #34	; 0x22
 800d92a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800da44 <_strtod_l+0x5ac>
 800d92e:	6023      	str	r3, [r4, #0]
 800d930:	f04f 0a00 	mov.w	sl, #0
 800d934:	9b07      	ldr	r3, [sp, #28]
 800d936:	2b00      	cmp	r3, #0
 800d938:	f43f adf2 	beq.w	800d520 <_strtod_l+0x88>
 800d93c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d93e:	4620      	mov	r0, r4
 800d940:	f001 fecc 	bl	800f6dc <_Bfree>
 800d944:	9905      	ldr	r1, [sp, #20]
 800d946:	4620      	mov	r0, r4
 800d948:	f001 fec8 	bl	800f6dc <_Bfree>
 800d94c:	4631      	mov	r1, r6
 800d94e:	4620      	mov	r0, r4
 800d950:	f001 fec4 	bl	800f6dc <_Bfree>
 800d954:	9907      	ldr	r1, [sp, #28]
 800d956:	4620      	mov	r0, r4
 800d958:	f001 fec0 	bl	800f6dc <_Bfree>
 800d95c:	4629      	mov	r1, r5
 800d95e:	4620      	mov	r0, r4
 800d960:	f001 febc 	bl	800f6dc <_Bfree>
 800d964:	e5dc      	b.n	800d520 <_strtod_l+0x88>
 800d966:	4b36      	ldr	r3, [pc, #216]	; (800da40 <_strtod_l+0x5a8>)
 800d968:	9304      	str	r3, [sp, #16]
 800d96a:	2300      	movs	r3, #0
 800d96c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d970:	4650      	mov	r0, sl
 800d972:	4659      	mov	r1, fp
 800d974:	4699      	mov	r9, r3
 800d976:	f1b8 0f01 	cmp.w	r8, #1
 800d97a:	dc21      	bgt.n	800d9c0 <_strtod_l+0x528>
 800d97c:	b10b      	cbz	r3, 800d982 <_strtod_l+0x4ea>
 800d97e:	4682      	mov	sl, r0
 800d980:	468b      	mov	fp, r1
 800d982:	4b2f      	ldr	r3, [pc, #188]	; (800da40 <_strtod_l+0x5a8>)
 800d984:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d988:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d98c:	4652      	mov	r2, sl
 800d98e:	465b      	mov	r3, fp
 800d990:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d994:	f7f2 fe48 	bl	8000628 <__aeabi_dmul>
 800d998:	4b2a      	ldr	r3, [pc, #168]	; (800da44 <_strtod_l+0x5ac>)
 800d99a:	460a      	mov	r2, r1
 800d99c:	400b      	ands	r3, r1
 800d99e:	492a      	ldr	r1, [pc, #168]	; (800da48 <_strtod_l+0x5b0>)
 800d9a0:	428b      	cmp	r3, r1
 800d9a2:	4682      	mov	sl, r0
 800d9a4:	d8bc      	bhi.n	800d920 <_strtod_l+0x488>
 800d9a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d9aa:	428b      	cmp	r3, r1
 800d9ac:	bf86      	itte	hi
 800d9ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800da4c <_strtod_l+0x5b4>
 800d9b2:	f04f 3aff 	movhi.w	sl, #4294967295
 800d9b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	9304      	str	r3, [sp, #16]
 800d9be:	e084      	b.n	800daca <_strtod_l+0x632>
 800d9c0:	f018 0f01 	tst.w	r8, #1
 800d9c4:	d005      	beq.n	800d9d2 <_strtod_l+0x53a>
 800d9c6:	9b04      	ldr	r3, [sp, #16]
 800d9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9cc:	f7f2 fe2c 	bl	8000628 <__aeabi_dmul>
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	9a04      	ldr	r2, [sp, #16]
 800d9d4:	3208      	adds	r2, #8
 800d9d6:	f109 0901 	add.w	r9, r9, #1
 800d9da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d9de:	9204      	str	r2, [sp, #16]
 800d9e0:	e7c9      	b.n	800d976 <_strtod_l+0x4de>
 800d9e2:	d0ea      	beq.n	800d9ba <_strtod_l+0x522>
 800d9e4:	f1c8 0800 	rsb	r8, r8, #0
 800d9e8:	f018 020f 	ands.w	r2, r8, #15
 800d9ec:	d00a      	beq.n	800da04 <_strtod_l+0x56c>
 800d9ee:	4b13      	ldr	r3, [pc, #76]	; (800da3c <_strtod_l+0x5a4>)
 800d9f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9f4:	4650      	mov	r0, sl
 800d9f6:	4659      	mov	r1, fp
 800d9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fc:	f7f2 ff3e 	bl	800087c <__aeabi_ddiv>
 800da00:	4682      	mov	sl, r0
 800da02:	468b      	mov	fp, r1
 800da04:	ea5f 1828 	movs.w	r8, r8, asr #4
 800da08:	d0d7      	beq.n	800d9ba <_strtod_l+0x522>
 800da0a:	f1b8 0f1f 	cmp.w	r8, #31
 800da0e:	dd1f      	ble.n	800da50 <_strtod_l+0x5b8>
 800da10:	2500      	movs	r5, #0
 800da12:	462e      	mov	r6, r5
 800da14:	9507      	str	r5, [sp, #28]
 800da16:	9505      	str	r5, [sp, #20]
 800da18:	2322      	movs	r3, #34	; 0x22
 800da1a:	f04f 0a00 	mov.w	sl, #0
 800da1e:	f04f 0b00 	mov.w	fp, #0
 800da22:	6023      	str	r3, [r4, #0]
 800da24:	e786      	b.n	800d934 <_strtod_l+0x49c>
 800da26:	bf00      	nop
 800da28:	080143f1 	.word	0x080143f1
 800da2c:	08014430 	.word	0x08014430
 800da30:	080143e9 	.word	0x080143e9
 800da34:	08014574 	.word	0x08014574
 800da38:	0801483b 	.word	0x0801483b
 800da3c:	08014700 	.word	0x08014700
 800da40:	080146d8 	.word	0x080146d8
 800da44:	7ff00000 	.word	0x7ff00000
 800da48:	7ca00000 	.word	0x7ca00000
 800da4c:	7fefffff 	.word	0x7fefffff
 800da50:	f018 0310 	ands.w	r3, r8, #16
 800da54:	bf18      	it	ne
 800da56:	236a      	movne	r3, #106	; 0x6a
 800da58:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800de08 <_strtod_l+0x970>
 800da5c:	9304      	str	r3, [sp, #16]
 800da5e:	4650      	mov	r0, sl
 800da60:	4659      	mov	r1, fp
 800da62:	2300      	movs	r3, #0
 800da64:	f018 0f01 	tst.w	r8, #1
 800da68:	d004      	beq.n	800da74 <_strtod_l+0x5dc>
 800da6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800da6e:	f7f2 fddb 	bl	8000628 <__aeabi_dmul>
 800da72:	2301      	movs	r3, #1
 800da74:	ea5f 0868 	movs.w	r8, r8, asr #1
 800da78:	f109 0908 	add.w	r9, r9, #8
 800da7c:	d1f2      	bne.n	800da64 <_strtod_l+0x5cc>
 800da7e:	b10b      	cbz	r3, 800da84 <_strtod_l+0x5ec>
 800da80:	4682      	mov	sl, r0
 800da82:	468b      	mov	fp, r1
 800da84:	9b04      	ldr	r3, [sp, #16]
 800da86:	b1c3      	cbz	r3, 800daba <_strtod_l+0x622>
 800da88:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800da8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800da90:	2b00      	cmp	r3, #0
 800da92:	4659      	mov	r1, fp
 800da94:	dd11      	ble.n	800daba <_strtod_l+0x622>
 800da96:	2b1f      	cmp	r3, #31
 800da98:	f340 8124 	ble.w	800dce4 <_strtod_l+0x84c>
 800da9c:	2b34      	cmp	r3, #52	; 0x34
 800da9e:	bfde      	ittt	le
 800daa0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800daa4:	f04f 33ff 	movle.w	r3, #4294967295
 800daa8:	fa03 f202 	lslle.w	r2, r3, r2
 800daac:	f04f 0a00 	mov.w	sl, #0
 800dab0:	bfcc      	ite	gt
 800dab2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800dab6:	ea02 0b01 	andle.w	fp, r2, r1
 800daba:	2200      	movs	r2, #0
 800dabc:	2300      	movs	r3, #0
 800dabe:	4650      	mov	r0, sl
 800dac0:	4659      	mov	r1, fp
 800dac2:	f7f3 f819 	bl	8000af8 <__aeabi_dcmpeq>
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d1a2      	bne.n	800da10 <_strtod_l+0x578>
 800daca:	9b07      	ldr	r3, [sp, #28]
 800dacc:	9300      	str	r3, [sp, #0]
 800dace:	9908      	ldr	r1, [sp, #32]
 800dad0:	462b      	mov	r3, r5
 800dad2:	463a      	mov	r2, r7
 800dad4:	4620      	mov	r0, r4
 800dad6:	f001 fe69 	bl	800f7ac <__s2b>
 800dada:	9007      	str	r0, [sp, #28]
 800dadc:	2800      	cmp	r0, #0
 800dade:	f43f af1f 	beq.w	800d920 <_strtod_l+0x488>
 800dae2:	9b05      	ldr	r3, [sp, #20]
 800dae4:	1b9e      	subs	r6, r3, r6
 800dae6:	9b06      	ldr	r3, [sp, #24]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	bfb4      	ite	lt
 800daec:	4633      	movlt	r3, r6
 800daee:	2300      	movge	r3, #0
 800daf0:	930c      	str	r3, [sp, #48]	; 0x30
 800daf2:	9b06      	ldr	r3, [sp, #24]
 800daf4:	2500      	movs	r5, #0
 800daf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dafa:	9312      	str	r3, [sp, #72]	; 0x48
 800dafc:	462e      	mov	r6, r5
 800dafe:	9b07      	ldr	r3, [sp, #28]
 800db00:	4620      	mov	r0, r4
 800db02:	6859      	ldr	r1, [r3, #4]
 800db04:	f001 fdaa 	bl	800f65c <_Balloc>
 800db08:	9005      	str	r0, [sp, #20]
 800db0a:	2800      	cmp	r0, #0
 800db0c:	f43f af0c 	beq.w	800d928 <_strtod_l+0x490>
 800db10:	9b07      	ldr	r3, [sp, #28]
 800db12:	691a      	ldr	r2, [r3, #16]
 800db14:	3202      	adds	r2, #2
 800db16:	f103 010c 	add.w	r1, r3, #12
 800db1a:	0092      	lsls	r2, r2, #2
 800db1c:	300c      	adds	r0, #12
 800db1e:	f7fe fd77 	bl	800c610 <memcpy>
 800db22:	ec4b ab10 	vmov	d0, sl, fp
 800db26:	aa1a      	add	r2, sp, #104	; 0x68
 800db28:	a919      	add	r1, sp, #100	; 0x64
 800db2a:	4620      	mov	r0, r4
 800db2c:	f002 f984 	bl	800fe38 <__d2b>
 800db30:	ec4b ab18 	vmov	d8, sl, fp
 800db34:	9018      	str	r0, [sp, #96]	; 0x60
 800db36:	2800      	cmp	r0, #0
 800db38:	f43f aef6 	beq.w	800d928 <_strtod_l+0x490>
 800db3c:	2101      	movs	r1, #1
 800db3e:	4620      	mov	r0, r4
 800db40:	f001 fece 	bl	800f8e0 <__i2b>
 800db44:	4606      	mov	r6, r0
 800db46:	2800      	cmp	r0, #0
 800db48:	f43f aeee 	beq.w	800d928 <_strtod_l+0x490>
 800db4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800db4e:	9904      	ldr	r1, [sp, #16]
 800db50:	2b00      	cmp	r3, #0
 800db52:	bfab      	itete	ge
 800db54:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800db56:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800db58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800db5a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800db5e:	bfac      	ite	ge
 800db60:	eb03 0902 	addge.w	r9, r3, r2
 800db64:	1ad7      	sublt	r7, r2, r3
 800db66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800db68:	eba3 0801 	sub.w	r8, r3, r1
 800db6c:	4490      	add	r8, r2
 800db6e:	4ba1      	ldr	r3, [pc, #644]	; (800ddf4 <_strtod_l+0x95c>)
 800db70:	f108 38ff 	add.w	r8, r8, #4294967295
 800db74:	4598      	cmp	r8, r3
 800db76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800db7a:	f280 80c7 	bge.w	800dd0c <_strtod_l+0x874>
 800db7e:	eba3 0308 	sub.w	r3, r3, r8
 800db82:	2b1f      	cmp	r3, #31
 800db84:	eba2 0203 	sub.w	r2, r2, r3
 800db88:	f04f 0101 	mov.w	r1, #1
 800db8c:	f300 80b1 	bgt.w	800dcf2 <_strtod_l+0x85a>
 800db90:	fa01 f303 	lsl.w	r3, r1, r3
 800db94:	930d      	str	r3, [sp, #52]	; 0x34
 800db96:	2300      	movs	r3, #0
 800db98:	9308      	str	r3, [sp, #32]
 800db9a:	eb09 0802 	add.w	r8, r9, r2
 800db9e:	9b04      	ldr	r3, [sp, #16]
 800dba0:	45c1      	cmp	r9, r8
 800dba2:	4417      	add	r7, r2
 800dba4:	441f      	add	r7, r3
 800dba6:	464b      	mov	r3, r9
 800dba8:	bfa8      	it	ge
 800dbaa:	4643      	movge	r3, r8
 800dbac:	42bb      	cmp	r3, r7
 800dbae:	bfa8      	it	ge
 800dbb0:	463b      	movge	r3, r7
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	bfc2      	ittt	gt
 800dbb6:	eba8 0803 	subgt.w	r8, r8, r3
 800dbba:	1aff      	subgt	r7, r7, r3
 800dbbc:	eba9 0903 	subgt.w	r9, r9, r3
 800dbc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	dd17      	ble.n	800dbf6 <_strtod_l+0x75e>
 800dbc6:	4631      	mov	r1, r6
 800dbc8:	461a      	mov	r2, r3
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f001 ff48 	bl	800fa60 <__pow5mult>
 800dbd0:	4606      	mov	r6, r0
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	f43f aea8 	beq.w	800d928 <_strtod_l+0x490>
 800dbd8:	4601      	mov	r1, r0
 800dbda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dbdc:	4620      	mov	r0, r4
 800dbde:	f001 fe95 	bl	800f90c <__multiply>
 800dbe2:	900b      	str	r0, [sp, #44]	; 0x2c
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	f43f ae9f 	beq.w	800d928 <_strtod_l+0x490>
 800dbea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dbec:	4620      	mov	r0, r4
 800dbee:	f001 fd75 	bl	800f6dc <_Bfree>
 800dbf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbf4:	9318      	str	r3, [sp, #96]	; 0x60
 800dbf6:	f1b8 0f00 	cmp.w	r8, #0
 800dbfa:	f300 808c 	bgt.w	800dd16 <_strtod_l+0x87e>
 800dbfe:	9b06      	ldr	r3, [sp, #24]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	dd08      	ble.n	800dc16 <_strtod_l+0x77e>
 800dc04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dc06:	9905      	ldr	r1, [sp, #20]
 800dc08:	4620      	mov	r0, r4
 800dc0a:	f001 ff29 	bl	800fa60 <__pow5mult>
 800dc0e:	9005      	str	r0, [sp, #20]
 800dc10:	2800      	cmp	r0, #0
 800dc12:	f43f ae89 	beq.w	800d928 <_strtod_l+0x490>
 800dc16:	2f00      	cmp	r7, #0
 800dc18:	dd08      	ble.n	800dc2c <_strtod_l+0x794>
 800dc1a:	9905      	ldr	r1, [sp, #20]
 800dc1c:	463a      	mov	r2, r7
 800dc1e:	4620      	mov	r0, r4
 800dc20:	f001 ff78 	bl	800fb14 <__lshift>
 800dc24:	9005      	str	r0, [sp, #20]
 800dc26:	2800      	cmp	r0, #0
 800dc28:	f43f ae7e 	beq.w	800d928 <_strtod_l+0x490>
 800dc2c:	f1b9 0f00 	cmp.w	r9, #0
 800dc30:	dd08      	ble.n	800dc44 <_strtod_l+0x7ac>
 800dc32:	4631      	mov	r1, r6
 800dc34:	464a      	mov	r2, r9
 800dc36:	4620      	mov	r0, r4
 800dc38:	f001 ff6c 	bl	800fb14 <__lshift>
 800dc3c:	4606      	mov	r6, r0
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	f43f ae72 	beq.w	800d928 <_strtod_l+0x490>
 800dc44:	9a05      	ldr	r2, [sp, #20]
 800dc46:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f001 ffef 	bl	800fc2c <__mdiff>
 800dc4e:	4605      	mov	r5, r0
 800dc50:	2800      	cmp	r0, #0
 800dc52:	f43f ae69 	beq.w	800d928 <_strtod_l+0x490>
 800dc56:	68c3      	ldr	r3, [r0, #12]
 800dc58:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	60c3      	str	r3, [r0, #12]
 800dc5e:	4631      	mov	r1, r6
 800dc60:	f001 ffc8 	bl	800fbf4 <__mcmp>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	da60      	bge.n	800dd2a <_strtod_l+0x892>
 800dc68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc6a:	ea53 030a 	orrs.w	r3, r3, sl
 800dc6e:	f040 8082 	bne.w	800dd76 <_strtod_l+0x8de>
 800dc72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d17d      	bne.n	800dd76 <_strtod_l+0x8de>
 800dc7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc7e:	0d1b      	lsrs	r3, r3, #20
 800dc80:	051b      	lsls	r3, r3, #20
 800dc82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dc86:	d976      	bls.n	800dd76 <_strtod_l+0x8de>
 800dc88:	696b      	ldr	r3, [r5, #20]
 800dc8a:	b913      	cbnz	r3, 800dc92 <_strtod_l+0x7fa>
 800dc8c:	692b      	ldr	r3, [r5, #16]
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	dd71      	ble.n	800dd76 <_strtod_l+0x8de>
 800dc92:	4629      	mov	r1, r5
 800dc94:	2201      	movs	r2, #1
 800dc96:	4620      	mov	r0, r4
 800dc98:	f001 ff3c 	bl	800fb14 <__lshift>
 800dc9c:	4631      	mov	r1, r6
 800dc9e:	4605      	mov	r5, r0
 800dca0:	f001 ffa8 	bl	800fbf4 <__mcmp>
 800dca4:	2800      	cmp	r0, #0
 800dca6:	dd66      	ble.n	800dd76 <_strtod_l+0x8de>
 800dca8:	9904      	ldr	r1, [sp, #16]
 800dcaa:	4a53      	ldr	r2, [pc, #332]	; (800ddf8 <_strtod_l+0x960>)
 800dcac:	465b      	mov	r3, fp
 800dcae:	2900      	cmp	r1, #0
 800dcb0:	f000 8081 	beq.w	800ddb6 <_strtod_l+0x91e>
 800dcb4:	ea02 010b 	and.w	r1, r2, fp
 800dcb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dcbc:	dc7b      	bgt.n	800ddb6 <_strtod_l+0x91e>
 800dcbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dcc2:	f77f aea9 	ble.w	800da18 <_strtod_l+0x580>
 800dcc6:	4b4d      	ldr	r3, [pc, #308]	; (800ddfc <_strtod_l+0x964>)
 800dcc8:	4650      	mov	r0, sl
 800dcca:	4659      	mov	r1, fp
 800dccc:	2200      	movs	r2, #0
 800dcce:	f7f2 fcab 	bl	8000628 <__aeabi_dmul>
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4303      	orrs	r3, r0
 800dcd6:	bf08      	it	eq
 800dcd8:	2322      	moveq	r3, #34	; 0x22
 800dcda:	4682      	mov	sl, r0
 800dcdc:	468b      	mov	fp, r1
 800dcde:	bf08      	it	eq
 800dce0:	6023      	streq	r3, [r4, #0]
 800dce2:	e62b      	b.n	800d93c <_strtod_l+0x4a4>
 800dce4:	f04f 32ff 	mov.w	r2, #4294967295
 800dce8:	fa02 f303 	lsl.w	r3, r2, r3
 800dcec:	ea03 0a0a 	and.w	sl, r3, sl
 800dcf0:	e6e3      	b.n	800daba <_strtod_l+0x622>
 800dcf2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800dcf6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800dcfa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800dcfe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dd02:	fa01 f308 	lsl.w	r3, r1, r8
 800dd06:	9308      	str	r3, [sp, #32]
 800dd08:	910d      	str	r1, [sp, #52]	; 0x34
 800dd0a:	e746      	b.n	800db9a <_strtod_l+0x702>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	9308      	str	r3, [sp, #32]
 800dd10:	2301      	movs	r3, #1
 800dd12:	930d      	str	r3, [sp, #52]	; 0x34
 800dd14:	e741      	b.n	800db9a <_strtod_l+0x702>
 800dd16:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dd18:	4642      	mov	r2, r8
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f001 fefa 	bl	800fb14 <__lshift>
 800dd20:	9018      	str	r0, [sp, #96]	; 0x60
 800dd22:	2800      	cmp	r0, #0
 800dd24:	f47f af6b 	bne.w	800dbfe <_strtod_l+0x766>
 800dd28:	e5fe      	b.n	800d928 <_strtod_l+0x490>
 800dd2a:	465f      	mov	r7, fp
 800dd2c:	d16e      	bne.n	800de0c <_strtod_l+0x974>
 800dd2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd34:	b342      	cbz	r2, 800dd88 <_strtod_l+0x8f0>
 800dd36:	4a32      	ldr	r2, [pc, #200]	; (800de00 <_strtod_l+0x968>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d128      	bne.n	800dd8e <_strtod_l+0x8f6>
 800dd3c:	9b04      	ldr	r3, [sp, #16]
 800dd3e:	4651      	mov	r1, sl
 800dd40:	b1eb      	cbz	r3, 800dd7e <_strtod_l+0x8e6>
 800dd42:	4b2d      	ldr	r3, [pc, #180]	; (800ddf8 <_strtod_l+0x960>)
 800dd44:	403b      	ands	r3, r7
 800dd46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dd4a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd4e:	d819      	bhi.n	800dd84 <_strtod_l+0x8ec>
 800dd50:	0d1b      	lsrs	r3, r3, #20
 800dd52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dd56:	fa02 f303 	lsl.w	r3, r2, r3
 800dd5a:	4299      	cmp	r1, r3
 800dd5c:	d117      	bne.n	800dd8e <_strtod_l+0x8f6>
 800dd5e:	4b29      	ldr	r3, [pc, #164]	; (800de04 <_strtod_l+0x96c>)
 800dd60:	429f      	cmp	r7, r3
 800dd62:	d102      	bne.n	800dd6a <_strtod_l+0x8d2>
 800dd64:	3101      	adds	r1, #1
 800dd66:	f43f addf 	beq.w	800d928 <_strtod_l+0x490>
 800dd6a:	4b23      	ldr	r3, [pc, #140]	; (800ddf8 <_strtod_l+0x960>)
 800dd6c:	403b      	ands	r3, r7
 800dd6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dd72:	f04f 0a00 	mov.w	sl, #0
 800dd76:	9b04      	ldr	r3, [sp, #16]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d1a4      	bne.n	800dcc6 <_strtod_l+0x82e>
 800dd7c:	e5de      	b.n	800d93c <_strtod_l+0x4a4>
 800dd7e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd82:	e7ea      	b.n	800dd5a <_strtod_l+0x8c2>
 800dd84:	4613      	mov	r3, r2
 800dd86:	e7e8      	b.n	800dd5a <_strtod_l+0x8c2>
 800dd88:	ea53 030a 	orrs.w	r3, r3, sl
 800dd8c:	d08c      	beq.n	800dca8 <_strtod_l+0x810>
 800dd8e:	9b08      	ldr	r3, [sp, #32]
 800dd90:	b1db      	cbz	r3, 800ddca <_strtod_l+0x932>
 800dd92:	423b      	tst	r3, r7
 800dd94:	d0ef      	beq.n	800dd76 <_strtod_l+0x8de>
 800dd96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd98:	9a04      	ldr	r2, [sp, #16]
 800dd9a:	4650      	mov	r0, sl
 800dd9c:	4659      	mov	r1, fp
 800dd9e:	b1c3      	cbz	r3, 800ddd2 <_strtod_l+0x93a>
 800dda0:	f7ff fb5d 	bl	800d45e <sulp>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	ec51 0b18 	vmov	r0, r1, d8
 800ddac:	f7f2 fa86 	bl	80002bc <__adddf3>
 800ddb0:	4682      	mov	sl, r0
 800ddb2:	468b      	mov	fp, r1
 800ddb4:	e7df      	b.n	800dd76 <_strtod_l+0x8de>
 800ddb6:	4013      	ands	r3, r2
 800ddb8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ddbc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ddc0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ddc4:	f04f 3aff 	mov.w	sl, #4294967295
 800ddc8:	e7d5      	b.n	800dd76 <_strtod_l+0x8de>
 800ddca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddcc:	ea13 0f0a 	tst.w	r3, sl
 800ddd0:	e7e0      	b.n	800dd94 <_strtod_l+0x8fc>
 800ddd2:	f7ff fb44 	bl	800d45e <sulp>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	460b      	mov	r3, r1
 800ddda:	ec51 0b18 	vmov	r0, r1, d8
 800ddde:	f7f2 fa6b 	bl	80002b8 <__aeabi_dsub>
 800dde2:	2200      	movs	r2, #0
 800dde4:	2300      	movs	r3, #0
 800dde6:	4682      	mov	sl, r0
 800dde8:	468b      	mov	fp, r1
 800ddea:	f7f2 fe85 	bl	8000af8 <__aeabi_dcmpeq>
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d0c1      	beq.n	800dd76 <_strtod_l+0x8de>
 800ddf2:	e611      	b.n	800da18 <_strtod_l+0x580>
 800ddf4:	fffffc02 	.word	0xfffffc02
 800ddf8:	7ff00000 	.word	0x7ff00000
 800ddfc:	39500000 	.word	0x39500000
 800de00:	000fffff 	.word	0x000fffff
 800de04:	7fefffff 	.word	0x7fefffff
 800de08:	08014448 	.word	0x08014448
 800de0c:	4631      	mov	r1, r6
 800de0e:	4628      	mov	r0, r5
 800de10:	f002 f86e 	bl	800fef0 <__ratio>
 800de14:	ec59 8b10 	vmov	r8, r9, d0
 800de18:	ee10 0a10 	vmov	r0, s0
 800de1c:	2200      	movs	r2, #0
 800de1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de22:	4649      	mov	r1, r9
 800de24:	f7f2 fe7c 	bl	8000b20 <__aeabi_dcmple>
 800de28:	2800      	cmp	r0, #0
 800de2a:	d07a      	beq.n	800df22 <_strtod_l+0xa8a>
 800de2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d04a      	beq.n	800dec8 <_strtod_l+0xa30>
 800de32:	4b95      	ldr	r3, [pc, #596]	; (800e088 <_strtod_l+0xbf0>)
 800de34:	2200      	movs	r2, #0
 800de36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e088 <_strtod_l+0xbf0>
 800de3e:	f04f 0800 	mov.w	r8, #0
 800de42:	4b92      	ldr	r3, [pc, #584]	; (800e08c <_strtod_l+0xbf4>)
 800de44:	403b      	ands	r3, r7
 800de46:	930d      	str	r3, [sp, #52]	; 0x34
 800de48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de4a:	4b91      	ldr	r3, [pc, #580]	; (800e090 <_strtod_l+0xbf8>)
 800de4c:	429a      	cmp	r2, r3
 800de4e:	f040 80b0 	bne.w	800dfb2 <_strtod_l+0xb1a>
 800de52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de56:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800de5a:	ec4b ab10 	vmov	d0, sl, fp
 800de5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de62:	f001 ff6d 	bl	800fd40 <__ulp>
 800de66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de6a:	ec53 2b10 	vmov	r2, r3, d0
 800de6e:	f7f2 fbdb 	bl	8000628 <__aeabi_dmul>
 800de72:	4652      	mov	r2, sl
 800de74:	465b      	mov	r3, fp
 800de76:	f7f2 fa21 	bl	80002bc <__adddf3>
 800de7a:	460b      	mov	r3, r1
 800de7c:	4983      	ldr	r1, [pc, #524]	; (800e08c <_strtod_l+0xbf4>)
 800de7e:	4a85      	ldr	r2, [pc, #532]	; (800e094 <_strtod_l+0xbfc>)
 800de80:	4019      	ands	r1, r3
 800de82:	4291      	cmp	r1, r2
 800de84:	4682      	mov	sl, r0
 800de86:	d960      	bls.n	800df4a <_strtod_l+0xab2>
 800de88:	ee18 3a90 	vmov	r3, s17
 800de8c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800de90:	4293      	cmp	r3, r2
 800de92:	d104      	bne.n	800de9e <_strtod_l+0xa06>
 800de94:	ee18 3a10 	vmov	r3, s16
 800de98:	3301      	adds	r3, #1
 800de9a:	f43f ad45 	beq.w	800d928 <_strtod_l+0x490>
 800de9e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e0a0 <_strtod_l+0xc08>
 800dea2:	f04f 3aff 	mov.w	sl, #4294967295
 800dea6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dea8:	4620      	mov	r0, r4
 800deaa:	f001 fc17 	bl	800f6dc <_Bfree>
 800deae:	9905      	ldr	r1, [sp, #20]
 800deb0:	4620      	mov	r0, r4
 800deb2:	f001 fc13 	bl	800f6dc <_Bfree>
 800deb6:	4631      	mov	r1, r6
 800deb8:	4620      	mov	r0, r4
 800deba:	f001 fc0f 	bl	800f6dc <_Bfree>
 800debe:	4629      	mov	r1, r5
 800dec0:	4620      	mov	r0, r4
 800dec2:	f001 fc0b 	bl	800f6dc <_Bfree>
 800dec6:	e61a      	b.n	800dafe <_strtod_l+0x666>
 800dec8:	f1ba 0f00 	cmp.w	sl, #0
 800decc:	d11b      	bne.n	800df06 <_strtod_l+0xa6e>
 800dece:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ded2:	b9f3      	cbnz	r3, 800df12 <_strtod_l+0xa7a>
 800ded4:	4b6c      	ldr	r3, [pc, #432]	; (800e088 <_strtod_l+0xbf0>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	4640      	mov	r0, r8
 800deda:	4649      	mov	r1, r9
 800dedc:	f7f2 fe16 	bl	8000b0c <__aeabi_dcmplt>
 800dee0:	b9d0      	cbnz	r0, 800df18 <_strtod_l+0xa80>
 800dee2:	4640      	mov	r0, r8
 800dee4:	4649      	mov	r1, r9
 800dee6:	4b6c      	ldr	r3, [pc, #432]	; (800e098 <_strtod_l+0xc00>)
 800dee8:	2200      	movs	r2, #0
 800deea:	f7f2 fb9d 	bl	8000628 <__aeabi_dmul>
 800deee:	4680      	mov	r8, r0
 800def0:	4689      	mov	r9, r1
 800def2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800def6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800defa:	9315      	str	r3, [sp, #84]	; 0x54
 800defc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800df00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800df04:	e79d      	b.n	800de42 <_strtod_l+0x9aa>
 800df06:	f1ba 0f01 	cmp.w	sl, #1
 800df0a:	d102      	bne.n	800df12 <_strtod_l+0xa7a>
 800df0c:	2f00      	cmp	r7, #0
 800df0e:	f43f ad83 	beq.w	800da18 <_strtod_l+0x580>
 800df12:	4b62      	ldr	r3, [pc, #392]	; (800e09c <_strtod_l+0xc04>)
 800df14:	2200      	movs	r2, #0
 800df16:	e78e      	b.n	800de36 <_strtod_l+0x99e>
 800df18:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e098 <_strtod_l+0xc00>
 800df1c:	f04f 0800 	mov.w	r8, #0
 800df20:	e7e7      	b.n	800def2 <_strtod_l+0xa5a>
 800df22:	4b5d      	ldr	r3, [pc, #372]	; (800e098 <_strtod_l+0xc00>)
 800df24:	4640      	mov	r0, r8
 800df26:	4649      	mov	r1, r9
 800df28:	2200      	movs	r2, #0
 800df2a:	f7f2 fb7d 	bl	8000628 <__aeabi_dmul>
 800df2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df30:	4680      	mov	r8, r0
 800df32:	4689      	mov	r9, r1
 800df34:	b933      	cbnz	r3, 800df44 <_strtod_l+0xaac>
 800df36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df3a:	900e      	str	r0, [sp, #56]	; 0x38
 800df3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800df3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800df42:	e7dd      	b.n	800df00 <_strtod_l+0xa68>
 800df44:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800df48:	e7f9      	b.n	800df3e <_strtod_l+0xaa6>
 800df4a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800df4e:	9b04      	ldr	r3, [sp, #16]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d1a8      	bne.n	800dea6 <_strtod_l+0xa0e>
 800df54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800df58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df5a:	0d1b      	lsrs	r3, r3, #20
 800df5c:	051b      	lsls	r3, r3, #20
 800df5e:	429a      	cmp	r2, r3
 800df60:	d1a1      	bne.n	800dea6 <_strtod_l+0xa0e>
 800df62:	4640      	mov	r0, r8
 800df64:	4649      	mov	r1, r9
 800df66:	f7f3 f805 	bl	8000f74 <__aeabi_d2lz>
 800df6a:	f7f2 fb2f 	bl	80005cc <__aeabi_l2d>
 800df6e:	4602      	mov	r2, r0
 800df70:	460b      	mov	r3, r1
 800df72:	4640      	mov	r0, r8
 800df74:	4649      	mov	r1, r9
 800df76:	f7f2 f99f 	bl	80002b8 <__aeabi_dsub>
 800df7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df80:	ea43 030a 	orr.w	r3, r3, sl
 800df84:	4313      	orrs	r3, r2
 800df86:	4680      	mov	r8, r0
 800df88:	4689      	mov	r9, r1
 800df8a:	d055      	beq.n	800e038 <_strtod_l+0xba0>
 800df8c:	a336      	add	r3, pc, #216	; (adr r3, 800e068 <_strtod_l+0xbd0>)
 800df8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df92:	f7f2 fdbb 	bl	8000b0c <__aeabi_dcmplt>
 800df96:	2800      	cmp	r0, #0
 800df98:	f47f acd0 	bne.w	800d93c <_strtod_l+0x4a4>
 800df9c:	a334      	add	r3, pc, #208	; (adr r3, 800e070 <_strtod_l+0xbd8>)
 800df9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa2:	4640      	mov	r0, r8
 800dfa4:	4649      	mov	r1, r9
 800dfa6:	f7f2 fdcf 	bl	8000b48 <__aeabi_dcmpgt>
 800dfaa:	2800      	cmp	r0, #0
 800dfac:	f43f af7b 	beq.w	800dea6 <_strtod_l+0xa0e>
 800dfb0:	e4c4      	b.n	800d93c <_strtod_l+0x4a4>
 800dfb2:	9b04      	ldr	r3, [sp, #16]
 800dfb4:	b333      	cbz	r3, 800e004 <_strtod_l+0xb6c>
 800dfb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfb8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dfbc:	d822      	bhi.n	800e004 <_strtod_l+0xb6c>
 800dfbe:	a32e      	add	r3, pc, #184	; (adr r3, 800e078 <_strtod_l+0xbe0>)
 800dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc4:	4640      	mov	r0, r8
 800dfc6:	4649      	mov	r1, r9
 800dfc8:	f7f2 fdaa 	bl	8000b20 <__aeabi_dcmple>
 800dfcc:	b1a0      	cbz	r0, 800dff8 <_strtod_l+0xb60>
 800dfce:	4649      	mov	r1, r9
 800dfd0:	4640      	mov	r0, r8
 800dfd2:	f7f2 fe01 	bl	8000bd8 <__aeabi_d2uiz>
 800dfd6:	2801      	cmp	r0, #1
 800dfd8:	bf38      	it	cc
 800dfda:	2001      	movcc	r0, #1
 800dfdc:	f7f2 faaa 	bl	8000534 <__aeabi_ui2d>
 800dfe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfe2:	4680      	mov	r8, r0
 800dfe4:	4689      	mov	r9, r1
 800dfe6:	bb23      	cbnz	r3, 800e032 <_strtod_l+0xb9a>
 800dfe8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfec:	9010      	str	r0, [sp, #64]	; 0x40
 800dfee:	9311      	str	r3, [sp, #68]	; 0x44
 800dff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dff4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dffa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dffc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e000:	1a9b      	subs	r3, r3, r2
 800e002:	9309      	str	r3, [sp, #36]	; 0x24
 800e004:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e008:	eeb0 0a48 	vmov.f32	s0, s16
 800e00c:	eef0 0a68 	vmov.f32	s1, s17
 800e010:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e014:	f001 fe94 	bl	800fd40 <__ulp>
 800e018:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e01c:	ec53 2b10 	vmov	r2, r3, d0
 800e020:	f7f2 fb02 	bl	8000628 <__aeabi_dmul>
 800e024:	ec53 2b18 	vmov	r2, r3, d8
 800e028:	f7f2 f948 	bl	80002bc <__adddf3>
 800e02c:	4682      	mov	sl, r0
 800e02e:	468b      	mov	fp, r1
 800e030:	e78d      	b.n	800df4e <_strtod_l+0xab6>
 800e032:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e036:	e7db      	b.n	800dff0 <_strtod_l+0xb58>
 800e038:	a311      	add	r3, pc, #68	; (adr r3, 800e080 <_strtod_l+0xbe8>)
 800e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03e:	f7f2 fd65 	bl	8000b0c <__aeabi_dcmplt>
 800e042:	e7b2      	b.n	800dfaa <_strtod_l+0xb12>
 800e044:	2300      	movs	r3, #0
 800e046:	930a      	str	r3, [sp, #40]	; 0x28
 800e048:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e04a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e04c:	6013      	str	r3, [r2, #0]
 800e04e:	f7ff ba6b 	b.w	800d528 <_strtod_l+0x90>
 800e052:	2a65      	cmp	r2, #101	; 0x65
 800e054:	f43f ab5f 	beq.w	800d716 <_strtod_l+0x27e>
 800e058:	2a45      	cmp	r2, #69	; 0x45
 800e05a:	f43f ab5c 	beq.w	800d716 <_strtod_l+0x27e>
 800e05e:	2301      	movs	r3, #1
 800e060:	f7ff bb94 	b.w	800d78c <_strtod_l+0x2f4>
 800e064:	f3af 8000 	nop.w
 800e068:	94a03595 	.word	0x94a03595
 800e06c:	3fdfffff 	.word	0x3fdfffff
 800e070:	35afe535 	.word	0x35afe535
 800e074:	3fe00000 	.word	0x3fe00000
 800e078:	ffc00000 	.word	0xffc00000
 800e07c:	41dfffff 	.word	0x41dfffff
 800e080:	94a03595 	.word	0x94a03595
 800e084:	3fcfffff 	.word	0x3fcfffff
 800e088:	3ff00000 	.word	0x3ff00000
 800e08c:	7ff00000 	.word	0x7ff00000
 800e090:	7fe00000 	.word	0x7fe00000
 800e094:	7c9fffff 	.word	0x7c9fffff
 800e098:	3fe00000 	.word	0x3fe00000
 800e09c:	bff00000 	.word	0xbff00000
 800e0a0:	7fefffff 	.word	0x7fefffff

0800e0a4 <_strtod_r>:
 800e0a4:	4b01      	ldr	r3, [pc, #4]	; (800e0ac <_strtod_r+0x8>)
 800e0a6:	f7ff b9f7 	b.w	800d498 <_strtod_l>
 800e0aa:	bf00      	nop
 800e0ac:	200000a4 	.word	0x200000a4

0800e0b0 <strtod>:
 800e0b0:	460a      	mov	r2, r1
 800e0b2:	4601      	mov	r1, r0
 800e0b4:	4802      	ldr	r0, [pc, #8]	; (800e0c0 <strtod+0x10>)
 800e0b6:	4b03      	ldr	r3, [pc, #12]	; (800e0c4 <strtod+0x14>)
 800e0b8:	6800      	ldr	r0, [r0, #0]
 800e0ba:	f7ff b9ed 	b.w	800d498 <_strtod_l>
 800e0be:	bf00      	nop
 800e0c0:	2000003c 	.word	0x2000003c
 800e0c4:	200000a4 	.word	0x200000a4

0800e0c8 <_strtol_l.constprop.0>:
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0ce:	d001      	beq.n	800e0d4 <_strtol_l.constprop.0+0xc>
 800e0d0:	2b24      	cmp	r3, #36	; 0x24
 800e0d2:	d906      	bls.n	800e0e2 <_strtol_l.constprop.0+0x1a>
 800e0d4:	f7fe fa72 	bl	800c5bc <__errno>
 800e0d8:	2316      	movs	r3, #22
 800e0da:	6003      	str	r3, [r0, #0]
 800e0dc:	2000      	movs	r0, #0
 800e0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e1c8 <_strtol_l.constprop.0+0x100>
 800e0e6:	460d      	mov	r5, r1
 800e0e8:	462e      	mov	r6, r5
 800e0ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e0f2:	f017 0708 	ands.w	r7, r7, #8
 800e0f6:	d1f7      	bne.n	800e0e8 <_strtol_l.constprop.0+0x20>
 800e0f8:	2c2d      	cmp	r4, #45	; 0x2d
 800e0fa:	d132      	bne.n	800e162 <_strtol_l.constprop.0+0x9a>
 800e0fc:	782c      	ldrb	r4, [r5, #0]
 800e0fe:	2701      	movs	r7, #1
 800e100:	1cb5      	adds	r5, r6, #2
 800e102:	2b00      	cmp	r3, #0
 800e104:	d05b      	beq.n	800e1be <_strtol_l.constprop.0+0xf6>
 800e106:	2b10      	cmp	r3, #16
 800e108:	d109      	bne.n	800e11e <_strtol_l.constprop.0+0x56>
 800e10a:	2c30      	cmp	r4, #48	; 0x30
 800e10c:	d107      	bne.n	800e11e <_strtol_l.constprop.0+0x56>
 800e10e:	782c      	ldrb	r4, [r5, #0]
 800e110:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e114:	2c58      	cmp	r4, #88	; 0x58
 800e116:	d14d      	bne.n	800e1b4 <_strtol_l.constprop.0+0xec>
 800e118:	786c      	ldrb	r4, [r5, #1]
 800e11a:	2310      	movs	r3, #16
 800e11c:	3502      	adds	r5, #2
 800e11e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e122:	f108 38ff 	add.w	r8, r8, #4294967295
 800e126:	f04f 0c00 	mov.w	ip, #0
 800e12a:	fbb8 f9f3 	udiv	r9, r8, r3
 800e12e:	4666      	mov	r6, ip
 800e130:	fb03 8a19 	mls	sl, r3, r9, r8
 800e134:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e138:	f1be 0f09 	cmp.w	lr, #9
 800e13c:	d816      	bhi.n	800e16c <_strtol_l.constprop.0+0xa4>
 800e13e:	4674      	mov	r4, lr
 800e140:	42a3      	cmp	r3, r4
 800e142:	dd24      	ble.n	800e18e <_strtol_l.constprop.0+0xc6>
 800e144:	f1bc 0f00 	cmp.w	ip, #0
 800e148:	db1e      	blt.n	800e188 <_strtol_l.constprop.0+0xc0>
 800e14a:	45b1      	cmp	r9, r6
 800e14c:	d31c      	bcc.n	800e188 <_strtol_l.constprop.0+0xc0>
 800e14e:	d101      	bne.n	800e154 <_strtol_l.constprop.0+0x8c>
 800e150:	45a2      	cmp	sl, r4
 800e152:	db19      	blt.n	800e188 <_strtol_l.constprop.0+0xc0>
 800e154:	fb06 4603 	mla	r6, r6, r3, r4
 800e158:	f04f 0c01 	mov.w	ip, #1
 800e15c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e160:	e7e8      	b.n	800e134 <_strtol_l.constprop.0+0x6c>
 800e162:	2c2b      	cmp	r4, #43	; 0x2b
 800e164:	bf04      	itt	eq
 800e166:	782c      	ldrbeq	r4, [r5, #0]
 800e168:	1cb5      	addeq	r5, r6, #2
 800e16a:	e7ca      	b.n	800e102 <_strtol_l.constprop.0+0x3a>
 800e16c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e170:	f1be 0f19 	cmp.w	lr, #25
 800e174:	d801      	bhi.n	800e17a <_strtol_l.constprop.0+0xb2>
 800e176:	3c37      	subs	r4, #55	; 0x37
 800e178:	e7e2      	b.n	800e140 <_strtol_l.constprop.0+0x78>
 800e17a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e17e:	f1be 0f19 	cmp.w	lr, #25
 800e182:	d804      	bhi.n	800e18e <_strtol_l.constprop.0+0xc6>
 800e184:	3c57      	subs	r4, #87	; 0x57
 800e186:	e7db      	b.n	800e140 <_strtol_l.constprop.0+0x78>
 800e188:	f04f 3cff 	mov.w	ip, #4294967295
 800e18c:	e7e6      	b.n	800e15c <_strtol_l.constprop.0+0x94>
 800e18e:	f1bc 0f00 	cmp.w	ip, #0
 800e192:	da05      	bge.n	800e1a0 <_strtol_l.constprop.0+0xd8>
 800e194:	2322      	movs	r3, #34	; 0x22
 800e196:	6003      	str	r3, [r0, #0]
 800e198:	4646      	mov	r6, r8
 800e19a:	b942      	cbnz	r2, 800e1ae <_strtol_l.constprop.0+0xe6>
 800e19c:	4630      	mov	r0, r6
 800e19e:	e79e      	b.n	800e0de <_strtol_l.constprop.0+0x16>
 800e1a0:	b107      	cbz	r7, 800e1a4 <_strtol_l.constprop.0+0xdc>
 800e1a2:	4276      	negs	r6, r6
 800e1a4:	2a00      	cmp	r2, #0
 800e1a6:	d0f9      	beq.n	800e19c <_strtol_l.constprop.0+0xd4>
 800e1a8:	f1bc 0f00 	cmp.w	ip, #0
 800e1ac:	d000      	beq.n	800e1b0 <_strtol_l.constprop.0+0xe8>
 800e1ae:	1e69      	subs	r1, r5, #1
 800e1b0:	6011      	str	r1, [r2, #0]
 800e1b2:	e7f3      	b.n	800e19c <_strtol_l.constprop.0+0xd4>
 800e1b4:	2430      	movs	r4, #48	; 0x30
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1b1      	bne.n	800e11e <_strtol_l.constprop.0+0x56>
 800e1ba:	2308      	movs	r3, #8
 800e1bc:	e7af      	b.n	800e11e <_strtol_l.constprop.0+0x56>
 800e1be:	2c30      	cmp	r4, #48	; 0x30
 800e1c0:	d0a5      	beq.n	800e10e <_strtol_l.constprop.0+0x46>
 800e1c2:	230a      	movs	r3, #10
 800e1c4:	e7ab      	b.n	800e11e <_strtol_l.constprop.0+0x56>
 800e1c6:	bf00      	nop
 800e1c8:	08014471 	.word	0x08014471

0800e1cc <_strtol_r>:
 800e1cc:	f7ff bf7c 	b.w	800e0c8 <_strtol_l.constprop.0>

0800e1d0 <strtol>:
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	460a      	mov	r2, r1
 800e1d4:	4601      	mov	r1, r0
 800e1d6:	4802      	ldr	r0, [pc, #8]	; (800e1e0 <strtol+0x10>)
 800e1d8:	6800      	ldr	r0, [r0, #0]
 800e1da:	f7ff bf75 	b.w	800e0c8 <_strtol_l.constprop.0>
 800e1de:	bf00      	nop
 800e1e0:	2000003c 	.word	0x2000003c

0800e1e4 <_write_r>:
 800e1e4:	b538      	push	{r3, r4, r5, lr}
 800e1e6:	4d07      	ldr	r5, [pc, #28]	; (800e204 <_write_r+0x20>)
 800e1e8:	4604      	mov	r4, r0
 800e1ea:	4608      	mov	r0, r1
 800e1ec:	4611      	mov	r1, r2
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	602a      	str	r2, [r5, #0]
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	f7f7 ff99 	bl	800612a <_write>
 800e1f8:	1c43      	adds	r3, r0, #1
 800e1fa:	d102      	bne.n	800e202 <_write_r+0x1e>
 800e1fc:	682b      	ldr	r3, [r5, #0]
 800e1fe:	b103      	cbz	r3, 800e202 <_write_r+0x1e>
 800e200:	6023      	str	r3, [r4, #0]
 800e202:	bd38      	pop	{r3, r4, r5, pc}
 800e204:	20013b68 	.word	0x20013b68

0800e208 <_close_r>:
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	4d06      	ldr	r5, [pc, #24]	; (800e224 <_close_r+0x1c>)
 800e20c:	2300      	movs	r3, #0
 800e20e:	4604      	mov	r4, r0
 800e210:	4608      	mov	r0, r1
 800e212:	602b      	str	r3, [r5, #0]
 800e214:	f7f7 ffa5 	bl	8006162 <_close>
 800e218:	1c43      	adds	r3, r0, #1
 800e21a:	d102      	bne.n	800e222 <_close_r+0x1a>
 800e21c:	682b      	ldr	r3, [r5, #0]
 800e21e:	b103      	cbz	r3, 800e222 <_close_r+0x1a>
 800e220:	6023      	str	r3, [r4, #0]
 800e222:	bd38      	pop	{r3, r4, r5, pc}
 800e224:	20013b68 	.word	0x20013b68

0800e228 <quorem>:
 800e228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22c:	6903      	ldr	r3, [r0, #16]
 800e22e:	690c      	ldr	r4, [r1, #16]
 800e230:	42a3      	cmp	r3, r4
 800e232:	4607      	mov	r7, r0
 800e234:	f2c0 8081 	blt.w	800e33a <quorem+0x112>
 800e238:	3c01      	subs	r4, #1
 800e23a:	f101 0814 	add.w	r8, r1, #20
 800e23e:	f100 0514 	add.w	r5, r0, #20
 800e242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e246:	9301      	str	r3, [sp, #4]
 800e248:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e24c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e250:	3301      	adds	r3, #1
 800e252:	429a      	cmp	r2, r3
 800e254:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e258:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e25c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e260:	d331      	bcc.n	800e2c6 <quorem+0x9e>
 800e262:	f04f 0e00 	mov.w	lr, #0
 800e266:	4640      	mov	r0, r8
 800e268:	46ac      	mov	ip, r5
 800e26a:	46f2      	mov	sl, lr
 800e26c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e270:	b293      	uxth	r3, r2
 800e272:	fb06 e303 	mla	r3, r6, r3, lr
 800e276:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	ebaa 0303 	sub.w	r3, sl, r3
 800e280:	f8dc a000 	ldr.w	sl, [ip]
 800e284:	0c12      	lsrs	r2, r2, #16
 800e286:	fa13 f38a 	uxtah	r3, r3, sl
 800e28a:	fb06 e202 	mla	r2, r6, r2, lr
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	9b00      	ldr	r3, [sp, #0]
 800e292:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e296:	b292      	uxth	r2, r2
 800e298:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e29c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e2a0:	f8bd 3000 	ldrh.w	r3, [sp]
 800e2a4:	4581      	cmp	r9, r0
 800e2a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2aa:	f84c 3b04 	str.w	r3, [ip], #4
 800e2ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e2b2:	d2db      	bcs.n	800e26c <quorem+0x44>
 800e2b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800e2b8:	b92b      	cbnz	r3, 800e2c6 <quorem+0x9e>
 800e2ba:	9b01      	ldr	r3, [sp, #4]
 800e2bc:	3b04      	subs	r3, #4
 800e2be:	429d      	cmp	r5, r3
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	d32e      	bcc.n	800e322 <quorem+0xfa>
 800e2c4:	613c      	str	r4, [r7, #16]
 800e2c6:	4638      	mov	r0, r7
 800e2c8:	f001 fc94 	bl	800fbf4 <__mcmp>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	db24      	blt.n	800e31a <quorem+0xf2>
 800e2d0:	3601      	adds	r6, #1
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	f04f 0c00 	mov.w	ip, #0
 800e2d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800e2dc:	f8d0 e000 	ldr.w	lr, [r0]
 800e2e0:	b293      	uxth	r3, r2
 800e2e2:	ebac 0303 	sub.w	r3, ip, r3
 800e2e6:	0c12      	lsrs	r2, r2, #16
 800e2e8:	fa13 f38e 	uxtah	r3, r3, lr
 800e2ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e2f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2fa:	45c1      	cmp	r9, r8
 800e2fc:	f840 3b04 	str.w	r3, [r0], #4
 800e300:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e304:	d2e8      	bcs.n	800e2d8 <quorem+0xb0>
 800e306:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e30a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e30e:	b922      	cbnz	r2, 800e31a <quorem+0xf2>
 800e310:	3b04      	subs	r3, #4
 800e312:	429d      	cmp	r5, r3
 800e314:	461a      	mov	r2, r3
 800e316:	d30a      	bcc.n	800e32e <quorem+0x106>
 800e318:	613c      	str	r4, [r7, #16]
 800e31a:	4630      	mov	r0, r6
 800e31c:	b003      	add	sp, #12
 800e31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e322:	6812      	ldr	r2, [r2, #0]
 800e324:	3b04      	subs	r3, #4
 800e326:	2a00      	cmp	r2, #0
 800e328:	d1cc      	bne.n	800e2c4 <quorem+0x9c>
 800e32a:	3c01      	subs	r4, #1
 800e32c:	e7c7      	b.n	800e2be <quorem+0x96>
 800e32e:	6812      	ldr	r2, [r2, #0]
 800e330:	3b04      	subs	r3, #4
 800e332:	2a00      	cmp	r2, #0
 800e334:	d1f0      	bne.n	800e318 <quorem+0xf0>
 800e336:	3c01      	subs	r4, #1
 800e338:	e7eb      	b.n	800e312 <quorem+0xea>
 800e33a:	2000      	movs	r0, #0
 800e33c:	e7ee      	b.n	800e31c <quorem+0xf4>
	...

0800e340 <_dtoa_r>:
 800e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e344:	ed2d 8b04 	vpush	{d8-d9}
 800e348:	ec57 6b10 	vmov	r6, r7, d0
 800e34c:	b093      	sub	sp, #76	; 0x4c
 800e34e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e350:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e354:	9106      	str	r1, [sp, #24]
 800e356:	ee10 aa10 	vmov	sl, s0
 800e35a:	4604      	mov	r4, r0
 800e35c:	9209      	str	r2, [sp, #36]	; 0x24
 800e35e:	930c      	str	r3, [sp, #48]	; 0x30
 800e360:	46bb      	mov	fp, r7
 800e362:	b975      	cbnz	r5, 800e382 <_dtoa_r+0x42>
 800e364:	2010      	movs	r0, #16
 800e366:	f001 f95f 	bl	800f628 <malloc>
 800e36a:	4602      	mov	r2, r0
 800e36c:	6260      	str	r0, [r4, #36]	; 0x24
 800e36e:	b920      	cbnz	r0, 800e37a <_dtoa_r+0x3a>
 800e370:	4ba7      	ldr	r3, [pc, #668]	; (800e610 <_dtoa_r+0x2d0>)
 800e372:	21ea      	movs	r1, #234	; 0xea
 800e374:	48a7      	ldr	r0, [pc, #668]	; (800e614 <_dtoa_r+0x2d4>)
 800e376:	f002 fcdb 	bl	8010d30 <__assert_func>
 800e37a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e37e:	6005      	str	r5, [r0, #0]
 800e380:	60c5      	str	r5, [r0, #12]
 800e382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e384:	6819      	ldr	r1, [r3, #0]
 800e386:	b151      	cbz	r1, 800e39e <_dtoa_r+0x5e>
 800e388:	685a      	ldr	r2, [r3, #4]
 800e38a:	604a      	str	r2, [r1, #4]
 800e38c:	2301      	movs	r3, #1
 800e38e:	4093      	lsls	r3, r2
 800e390:	608b      	str	r3, [r1, #8]
 800e392:	4620      	mov	r0, r4
 800e394:	f001 f9a2 	bl	800f6dc <_Bfree>
 800e398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e39a:	2200      	movs	r2, #0
 800e39c:	601a      	str	r2, [r3, #0]
 800e39e:	1e3b      	subs	r3, r7, #0
 800e3a0:	bfaa      	itet	ge
 800e3a2:	2300      	movge	r3, #0
 800e3a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e3a8:	f8c8 3000 	strge.w	r3, [r8]
 800e3ac:	4b9a      	ldr	r3, [pc, #616]	; (800e618 <_dtoa_r+0x2d8>)
 800e3ae:	bfbc      	itt	lt
 800e3b0:	2201      	movlt	r2, #1
 800e3b2:	f8c8 2000 	strlt.w	r2, [r8]
 800e3b6:	ea33 030b 	bics.w	r3, r3, fp
 800e3ba:	d11b      	bne.n	800e3f4 <_dtoa_r+0xb4>
 800e3bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3be:	f242 730f 	movw	r3, #9999	; 0x270f
 800e3c2:	6013      	str	r3, [r2, #0]
 800e3c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3c8:	4333      	orrs	r3, r6
 800e3ca:	f000 8592 	beq.w	800eef2 <_dtoa_r+0xbb2>
 800e3ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3d0:	b963      	cbnz	r3, 800e3ec <_dtoa_r+0xac>
 800e3d2:	4b92      	ldr	r3, [pc, #584]	; (800e61c <_dtoa_r+0x2dc>)
 800e3d4:	e022      	b.n	800e41c <_dtoa_r+0xdc>
 800e3d6:	4b92      	ldr	r3, [pc, #584]	; (800e620 <_dtoa_r+0x2e0>)
 800e3d8:	9301      	str	r3, [sp, #4]
 800e3da:	3308      	adds	r3, #8
 800e3dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e3de:	6013      	str	r3, [r2, #0]
 800e3e0:	9801      	ldr	r0, [sp, #4]
 800e3e2:	b013      	add	sp, #76	; 0x4c
 800e3e4:	ecbd 8b04 	vpop	{d8-d9}
 800e3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ec:	4b8b      	ldr	r3, [pc, #556]	; (800e61c <_dtoa_r+0x2dc>)
 800e3ee:	9301      	str	r3, [sp, #4]
 800e3f0:	3303      	adds	r3, #3
 800e3f2:	e7f3      	b.n	800e3dc <_dtoa_r+0x9c>
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	4650      	mov	r0, sl
 800e3fa:	4659      	mov	r1, fp
 800e3fc:	f7f2 fb7c 	bl	8000af8 <__aeabi_dcmpeq>
 800e400:	ec4b ab19 	vmov	d9, sl, fp
 800e404:	4680      	mov	r8, r0
 800e406:	b158      	cbz	r0, 800e420 <_dtoa_r+0xe0>
 800e408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e40a:	2301      	movs	r3, #1
 800e40c:	6013      	str	r3, [r2, #0]
 800e40e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e410:	2b00      	cmp	r3, #0
 800e412:	f000 856b 	beq.w	800eeec <_dtoa_r+0xbac>
 800e416:	4883      	ldr	r0, [pc, #524]	; (800e624 <_dtoa_r+0x2e4>)
 800e418:	6018      	str	r0, [r3, #0]
 800e41a:	1e43      	subs	r3, r0, #1
 800e41c:	9301      	str	r3, [sp, #4]
 800e41e:	e7df      	b.n	800e3e0 <_dtoa_r+0xa0>
 800e420:	ec4b ab10 	vmov	d0, sl, fp
 800e424:	aa10      	add	r2, sp, #64	; 0x40
 800e426:	a911      	add	r1, sp, #68	; 0x44
 800e428:	4620      	mov	r0, r4
 800e42a:	f001 fd05 	bl	800fe38 <__d2b>
 800e42e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e432:	ee08 0a10 	vmov	s16, r0
 800e436:	2d00      	cmp	r5, #0
 800e438:	f000 8084 	beq.w	800e544 <_dtoa_r+0x204>
 800e43c:	ee19 3a90 	vmov	r3, s19
 800e440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e444:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e448:	4656      	mov	r6, sl
 800e44a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e44e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e452:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e456:	4b74      	ldr	r3, [pc, #464]	; (800e628 <_dtoa_r+0x2e8>)
 800e458:	2200      	movs	r2, #0
 800e45a:	4630      	mov	r0, r6
 800e45c:	4639      	mov	r1, r7
 800e45e:	f7f1 ff2b 	bl	80002b8 <__aeabi_dsub>
 800e462:	a365      	add	r3, pc, #404	; (adr r3, 800e5f8 <_dtoa_r+0x2b8>)
 800e464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e468:	f7f2 f8de 	bl	8000628 <__aeabi_dmul>
 800e46c:	a364      	add	r3, pc, #400	; (adr r3, 800e600 <_dtoa_r+0x2c0>)
 800e46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e472:	f7f1 ff23 	bl	80002bc <__adddf3>
 800e476:	4606      	mov	r6, r0
 800e478:	4628      	mov	r0, r5
 800e47a:	460f      	mov	r7, r1
 800e47c:	f7f2 f86a 	bl	8000554 <__aeabi_i2d>
 800e480:	a361      	add	r3, pc, #388	; (adr r3, 800e608 <_dtoa_r+0x2c8>)
 800e482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e486:	f7f2 f8cf 	bl	8000628 <__aeabi_dmul>
 800e48a:	4602      	mov	r2, r0
 800e48c:	460b      	mov	r3, r1
 800e48e:	4630      	mov	r0, r6
 800e490:	4639      	mov	r1, r7
 800e492:	f7f1 ff13 	bl	80002bc <__adddf3>
 800e496:	4606      	mov	r6, r0
 800e498:	460f      	mov	r7, r1
 800e49a:	f7f2 fb75 	bl	8000b88 <__aeabi_d2iz>
 800e49e:	2200      	movs	r2, #0
 800e4a0:	9000      	str	r0, [sp, #0]
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	4639      	mov	r1, r7
 800e4a8:	f7f2 fb30 	bl	8000b0c <__aeabi_dcmplt>
 800e4ac:	b150      	cbz	r0, 800e4c4 <_dtoa_r+0x184>
 800e4ae:	9800      	ldr	r0, [sp, #0]
 800e4b0:	f7f2 f850 	bl	8000554 <__aeabi_i2d>
 800e4b4:	4632      	mov	r2, r6
 800e4b6:	463b      	mov	r3, r7
 800e4b8:	f7f2 fb1e 	bl	8000af8 <__aeabi_dcmpeq>
 800e4bc:	b910      	cbnz	r0, 800e4c4 <_dtoa_r+0x184>
 800e4be:	9b00      	ldr	r3, [sp, #0]
 800e4c0:	3b01      	subs	r3, #1
 800e4c2:	9300      	str	r3, [sp, #0]
 800e4c4:	9b00      	ldr	r3, [sp, #0]
 800e4c6:	2b16      	cmp	r3, #22
 800e4c8:	d85a      	bhi.n	800e580 <_dtoa_r+0x240>
 800e4ca:	9a00      	ldr	r2, [sp, #0]
 800e4cc:	4b57      	ldr	r3, [pc, #348]	; (800e62c <_dtoa_r+0x2ec>)
 800e4ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d6:	ec51 0b19 	vmov	r0, r1, d9
 800e4da:	f7f2 fb17 	bl	8000b0c <__aeabi_dcmplt>
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	d050      	beq.n	800e584 <_dtoa_r+0x244>
 800e4e2:	9b00      	ldr	r3, [sp, #0]
 800e4e4:	3b01      	subs	r3, #1
 800e4e6:	9300      	str	r3, [sp, #0]
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e4ee:	1b5d      	subs	r5, r3, r5
 800e4f0:	1e6b      	subs	r3, r5, #1
 800e4f2:	9305      	str	r3, [sp, #20]
 800e4f4:	bf45      	ittet	mi
 800e4f6:	f1c5 0301 	rsbmi	r3, r5, #1
 800e4fa:	9304      	strmi	r3, [sp, #16]
 800e4fc:	2300      	movpl	r3, #0
 800e4fe:	2300      	movmi	r3, #0
 800e500:	bf4c      	ite	mi
 800e502:	9305      	strmi	r3, [sp, #20]
 800e504:	9304      	strpl	r3, [sp, #16]
 800e506:	9b00      	ldr	r3, [sp, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	db3d      	blt.n	800e588 <_dtoa_r+0x248>
 800e50c:	9b05      	ldr	r3, [sp, #20]
 800e50e:	9a00      	ldr	r2, [sp, #0]
 800e510:	920a      	str	r2, [sp, #40]	; 0x28
 800e512:	4413      	add	r3, r2
 800e514:	9305      	str	r3, [sp, #20]
 800e516:	2300      	movs	r3, #0
 800e518:	9307      	str	r3, [sp, #28]
 800e51a:	9b06      	ldr	r3, [sp, #24]
 800e51c:	2b09      	cmp	r3, #9
 800e51e:	f200 8089 	bhi.w	800e634 <_dtoa_r+0x2f4>
 800e522:	2b05      	cmp	r3, #5
 800e524:	bfc4      	itt	gt
 800e526:	3b04      	subgt	r3, #4
 800e528:	9306      	strgt	r3, [sp, #24]
 800e52a:	9b06      	ldr	r3, [sp, #24]
 800e52c:	f1a3 0302 	sub.w	r3, r3, #2
 800e530:	bfcc      	ite	gt
 800e532:	2500      	movgt	r5, #0
 800e534:	2501      	movle	r5, #1
 800e536:	2b03      	cmp	r3, #3
 800e538:	f200 8087 	bhi.w	800e64a <_dtoa_r+0x30a>
 800e53c:	e8df f003 	tbb	[pc, r3]
 800e540:	59383a2d 	.word	0x59383a2d
 800e544:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e548:	441d      	add	r5, r3
 800e54a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e54e:	2b20      	cmp	r3, #32
 800e550:	bfc1      	itttt	gt
 800e552:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e556:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e55a:	fa0b f303 	lslgt.w	r3, fp, r3
 800e55e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e562:	bfda      	itte	le
 800e564:	f1c3 0320 	rsble	r3, r3, #32
 800e568:	fa06 f003 	lslle.w	r0, r6, r3
 800e56c:	4318      	orrgt	r0, r3
 800e56e:	f7f1 ffe1 	bl	8000534 <__aeabi_ui2d>
 800e572:	2301      	movs	r3, #1
 800e574:	4606      	mov	r6, r0
 800e576:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e57a:	3d01      	subs	r5, #1
 800e57c:	930e      	str	r3, [sp, #56]	; 0x38
 800e57e:	e76a      	b.n	800e456 <_dtoa_r+0x116>
 800e580:	2301      	movs	r3, #1
 800e582:	e7b2      	b.n	800e4ea <_dtoa_r+0x1aa>
 800e584:	900b      	str	r0, [sp, #44]	; 0x2c
 800e586:	e7b1      	b.n	800e4ec <_dtoa_r+0x1ac>
 800e588:	9b04      	ldr	r3, [sp, #16]
 800e58a:	9a00      	ldr	r2, [sp, #0]
 800e58c:	1a9b      	subs	r3, r3, r2
 800e58e:	9304      	str	r3, [sp, #16]
 800e590:	4253      	negs	r3, r2
 800e592:	9307      	str	r3, [sp, #28]
 800e594:	2300      	movs	r3, #0
 800e596:	930a      	str	r3, [sp, #40]	; 0x28
 800e598:	e7bf      	b.n	800e51a <_dtoa_r+0x1da>
 800e59a:	2300      	movs	r3, #0
 800e59c:	9308      	str	r3, [sp, #32]
 800e59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	dc55      	bgt.n	800e650 <_dtoa_r+0x310>
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	9209      	str	r2, [sp, #36]	; 0x24
 800e5ae:	e00c      	b.n	800e5ca <_dtoa_r+0x28a>
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	e7f3      	b.n	800e59c <_dtoa_r+0x25c>
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5b8:	9308      	str	r3, [sp, #32]
 800e5ba:	9b00      	ldr	r3, [sp, #0]
 800e5bc:	4413      	add	r3, r2
 800e5be:	9302      	str	r3, [sp, #8]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	9303      	str	r3, [sp, #12]
 800e5c6:	bfb8      	it	lt
 800e5c8:	2301      	movlt	r3, #1
 800e5ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	6042      	str	r2, [r0, #4]
 800e5d0:	2204      	movs	r2, #4
 800e5d2:	f102 0614 	add.w	r6, r2, #20
 800e5d6:	429e      	cmp	r6, r3
 800e5d8:	6841      	ldr	r1, [r0, #4]
 800e5da:	d93d      	bls.n	800e658 <_dtoa_r+0x318>
 800e5dc:	4620      	mov	r0, r4
 800e5de:	f001 f83d 	bl	800f65c <_Balloc>
 800e5e2:	9001      	str	r0, [sp, #4]
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	d13b      	bne.n	800e660 <_dtoa_r+0x320>
 800e5e8:	4b11      	ldr	r3, [pc, #68]	; (800e630 <_dtoa_r+0x2f0>)
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e5f0:	e6c0      	b.n	800e374 <_dtoa_r+0x34>
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	e7df      	b.n	800e5b6 <_dtoa_r+0x276>
 800e5f6:	bf00      	nop
 800e5f8:	636f4361 	.word	0x636f4361
 800e5fc:	3fd287a7 	.word	0x3fd287a7
 800e600:	8b60c8b3 	.word	0x8b60c8b3
 800e604:	3fc68a28 	.word	0x3fc68a28
 800e608:	509f79fb 	.word	0x509f79fb
 800e60c:	3fd34413 	.word	0x3fd34413
 800e610:	0801457e 	.word	0x0801457e
 800e614:	08014595 	.word	0x08014595
 800e618:	7ff00000 	.word	0x7ff00000
 800e61c:	0801457a 	.word	0x0801457a
 800e620:	08014571 	.word	0x08014571
 800e624:	080147ea 	.word	0x080147ea
 800e628:	3ff80000 	.word	0x3ff80000
 800e62c:	08014700 	.word	0x08014700
 800e630:	080145f0 	.word	0x080145f0
 800e634:	2501      	movs	r5, #1
 800e636:	2300      	movs	r3, #0
 800e638:	9306      	str	r3, [sp, #24]
 800e63a:	9508      	str	r5, [sp, #32]
 800e63c:	f04f 33ff 	mov.w	r3, #4294967295
 800e640:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e644:	2200      	movs	r2, #0
 800e646:	2312      	movs	r3, #18
 800e648:	e7b0      	b.n	800e5ac <_dtoa_r+0x26c>
 800e64a:	2301      	movs	r3, #1
 800e64c:	9308      	str	r3, [sp, #32]
 800e64e:	e7f5      	b.n	800e63c <_dtoa_r+0x2fc>
 800e650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e652:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e656:	e7b8      	b.n	800e5ca <_dtoa_r+0x28a>
 800e658:	3101      	adds	r1, #1
 800e65a:	6041      	str	r1, [r0, #4]
 800e65c:	0052      	lsls	r2, r2, #1
 800e65e:	e7b8      	b.n	800e5d2 <_dtoa_r+0x292>
 800e660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e662:	9a01      	ldr	r2, [sp, #4]
 800e664:	601a      	str	r2, [r3, #0]
 800e666:	9b03      	ldr	r3, [sp, #12]
 800e668:	2b0e      	cmp	r3, #14
 800e66a:	f200 809d 	bhi.w	800e7a8 <_dtoa_r+0x468>
 800e66e:	2d00      	cmp	r5, #0
 800e670:	f000 809a 	beq.w	800e7a8 <_dtoa_r+0x468>
 800e674:	9b00      	ldr	r3, [sp, #0]
 800e676:	2b00      	cmp	r3, #0
 800e678:	dd32      	ble.n	800e6e0 <_dtoa_r+0x3a0>
 800e67a:	4ab7      	ldr	r2, [pc, #732]	; (800e958 <_dtoa_r+0x618>)
 800e67c:	f003 030f 	and.w	r3, r3, #15
 800e680:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e684:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e688:	9b00      	ldr	r3, [sp, #0]
 800e68a:	05d8      	lsls	r0, r3, #23
 800e68c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e690:	d516      	bpl.n	800e6c0 <_dtoa_r+0x380>
 800e692:	4bb2      	ldr	r3, [pc, #712]	; (800e95c <_dtoa_r+0x61c>)
 800e694:	ec51 0b19 	vmov	r0, r1, d9
 800e698:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e69c:	f7f2 f8ee 	bl	800087c <__aeabi_ddiv>
 800e6a0:	f007 070f 	and.w	r7, r7, #15
 800e6a4:	4682      	mov	sl, r0
 800e6a6:	468b      	mov	fp, r1
 800e6a8:	2503      	movs	r5, #3
 800e6aa:	4eac      	ldr	r6, [pc, #688]	; (800e95c <_dtoa_r+0x61c>)
 800e6ac:	b957      	cbnz	r7, 800e6c4 <_dtoa_r+0x384>
 800e6ae:	4642      	mov	r2, r8
 800e6b0:	464b      	mov	r3, r9
 800e6b2:	4650      	mov	r0, sl
 800e6b4:	4659      	mov	r1, fp
 800e6b6:	f7f2 f8e1 	bl	800087c <__aeabi_ddiv>
 800e6ba:	4682      	mov	sl, r0
 800e6bc:	468b      	mov	fp, r1
 800e6be:	e028      	b.n	800e712 <_dtoa_r+0x3d2>
 800e6c0:	2502      	movs	r5, #2
 800e6c2:	e7f2      	b.n	800e6aa <_dtoa_r+0x36a>
 800e6c4:	07f9      	lsls	r1, r7, #31
 800e6c6:	d508      	bpl.n	800e6da <_dtoa_r+0x39a>
 800e6c8:	4640      	mov	r0, r8
 800e6ca:	4649      	mov	r1, r9
 800e6cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e6d0:	f7f1 ffaa 	bl	8000628 <__aeabi_dmul>
 800e6d4:	3501      	adds	r5, #1
 800e6d6:	4680      	mov	r8, r0
 800e6d8:	4689      	mov	r9, r1
 800e6da:	107f      	asrs	r7, r7, #1
 800e6dc:	3608      	adds	r6, #8
 800e6de:	e7e5      	b.n	800e6ac <_dtoa_r+0x36c>
 800e6e0:	f000 809b 	beq.w	800e81a <_dtoa_r+0x4da>
 800e6e4:	9b00      	ldr	r3, [sp, #0]
 800e6e6:	4f9d      	ldr	r7, [pc, #628]	; (800e95c <_dtoa_r+0x61c>)
 800e6e8:	425e      	negs	r6, r3
 800e6ea:	4b9b      	ldr	r3, [pc, #620]	; (800e958 <_dtoa_r+0x618>)
 800e6ec:	f006 020f 	and.w	r2, r6, #15
 800e6f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f8:	ec51 0b19 	vmov	r0, r1, d9
 800e6fc:	f7f1 ff94 	bl	8000628 <__aeabi_dmul>
 800e700:	1136      	asrs	r6, r6, #4
 800e702:	4682      	mov	sl, r0
 800e704:	468b      	mov	fp, r1
 800e706:	2300      	movs	r3, #0
 800e708:	2502      	movs	r5, #2
 800e70a:	2e00      	cmp	r6, #0
 800e70c:	d17a      	bne.n	800e804 <_dtoa_r+0x4c4>
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1d3      	bne.n	800e6ba <_dtoa_r+0x37a>
 800e712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e714:	2b00      	cmp	r3, #0
 800e716:	f000 8082 	beq.w	800e81e <_dtoa_r+0x4de>
 800e71a:	4b91      	ldr	r3, [pc, #580]	; (800e960 <_dtoa_r+0x620>)
 800e71c:	2200      	movs	r2, #0
 800e71e:	4650      	mov	r0, sl
 800e720:	4659      	mov	r1, fp
 800e722:	f7f2 f9f3 	bl	8000b0c <__aeabi_dcmplt>
 800e726:	2800      	cmp	r0, #0
 800e728:	d079      	beq.n	800e81e <_dtoa_r+0x4de>
 800e72a:	9b03      	ldr	r3, [sp, #12]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d076      	beq.n	800e81e <_dtoa_r+0x4de>
 800e730:	9b02      	ldr	r3, [sp, #8]
 800e732:	2b00      	cmp	r3, #0
 800e734:	dd36      	ble.n	800e7a4 <_dtoa_r+0x464>
 800e736:	9b00      	ldr	r3, [sp, #0]
 800e738:	4650      	mov	r0, sl
 800e73a:	4659      	mov	r1, fp
 800e73c:	1e5f      	subs	r7, r3, #1
 800e73e:	2200      	movs	r2, #0
 800e740:	4b88      	ldr	r3, [pc, #544]	; (800e964 <_dtoa_r+0x624>)
 800e742:	f7f1 ff71 	bl	8000628 <__aeabi_dmul>
 800e746:	9e02      	ldr	r6, [sp, #8]
 800e748:	4682      	mov	sl, r0
 800e74a:	468b      	mov	fp, r1
 800e74c:	3501      	adds	r5, #1
 800e74e:	4628      	mov	r0, r5
 800e750:	f7f1 ff00 	bl	8000554 <__aeabi_i2d>
 800e754:	4652      	mov	r2, sl
 800e756:	465b      	mov	r3, fp
 800e758:	f7f1 ff66 	bl	8000628 <__aeabi_dmul>
 800e75c:	4b82      	ldr	r3, [pc, #520]	; (800e968 <_dtoa_r+0x628>)
 800e75e:	2200      	movs	r2, #0
 800e760:	f7f1 fdac 	bl	80002bc <__adddf3>
 800e764:	46d0      	mov	r8, sl
 800e766:	46d9      	mov	r9, fp
 800e768:	4682      	mov	sl, r0
 800e76a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e76e:	2e00      	cmp	r6, #0
 800e770:	d158      	bne.n	800e824 <_dtoa_r+0x4e4>
 800e772:	4b7e      	ldr	r3, [pc, #504]	; (800e96c <_dtoa_r+0x62c>)
 800e774:	2200      	movs	r2, #0
 800e776:	4640      	mov	r0, r8
 800e778:	4649      	mov	r1, r9
 800e77a:	f7f1 fd9d 	bl	80002b8 <__aeabi_dsub>
 800e77e:	4652      	mov	r2, sl
 800e780:	465b      	mov	r3, fp
 800e782:	4680      	mov	r8, r0
 800e784:	4689      	mov	r9, r1
 800e786:	f7f2 f9df 	bl	8000b48 <__aeabi_dcmpgt>
 800e78a:	2800      	cmp	r0, #0
 800e78c:	f040 8295 	bne.w	800ecba <_dtoa_r+0x97a>
 800e790:	4652      	mov	r2, sl
 800e792:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e796:	4640      	mov	r0, r8
 800e798:	4649      	mov	r1, r9
 800e79a:	f7f2 f9b7 	bl	8000b0c <__aeabi_dcmplt>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	f040 8289 	bne.w	800ecb6 <_dtoa_r+0x976>
 800e7a4:	ec5b ab19 	vmov	sl, fp, d9
 800e7a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	f2c0 8148 	blt.w	800ea40 <_dtoa_r+0x700>
 800e7b0:	9a00      	ldr	r2, [sp, #0]
 800e7b2:	2a0e      	cmp	r2, #14
 800e7b4:	f300 8144 	bgt.w	800ea40 <_dtoa_r+0x700>
 800e7b8:	4b67      	ldr	r3, [pc, #412]	; (800e958 <_dtoa_r+0x618>)
 800e7ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	f280 80d5 	bge.w	800e974 <_dtoa_r+0x634>
 800e7ca:	9b03      	ldr	r3, [sp, #12]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	f300 80d1 	bgt.w	800e974 <_dtoa_r+0x634>
 800e7d2:	f040 826f 	bne.w	800ecb4 <_dtoa_r+0x974>
 800e7d6:	4b65      	ldr	r3, [pc, #404]	; (800e96c <_dtoa_r+0x62c>)
 800e7d8:	2200      	movs	r2, #0
 800e7da:	4640      	mov	r0, r8
 800e7dc:	4649      	mov	r1, r9
 800e7de:	f7f1 ff23 	bl	8000628 <__aeabi_dmul>
 800e7e2:	4652      	mov	r2, sl
 800e7e4:	465b      	mov	r3, fp
 800e7e6:	f7f2 f9a5 	bl	8000b34 <__aeabi_dcmpge>
 800e7ea:	9e03      	ldr	r6, [sp, #12]
 800e7ec:	4637      	mov	r7, r6
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	f040 8245 	bne.w	800ec7e <_dtoa_r+0x93e>
 800e7f4:	9d01      	ldr	r5, [sp, #4]
 800e7f6:	2331      	movs	r3, #49	; 0x31
 800e7f8:	f805 3b01 	strb.w	r3, [r5], #1
 800e7fc:	9b00      	ldr	r3, [sp, #0]
 800e7fe:	3301      	adds	r3, #1
 800e800:	9300      	str	r3, [sp, #0]
 800e802:	e240      	b.n	800ec86 <_dtoa_r+0x946>
 800e804:	07f2      	lsls	r2, r6, #31
 800e806:	d505      	bpl.n	800e814 <_dtoa_r+0x4d4>
 800e808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e80c:	f7f1 ff0c 	bl	8000628 <__aeabi_dmul>
 800e810:	3501      	adds	r5, #1
 800e812:	2301      	movs	r3, #1
 800e814:	1076      	asrs	r6, r6, #1
 800e816:	3708      	adds	r7, #8
 800e818:	e777      	b.n	800e70a <_dtoa_r+0x3ca>
 800e81a:	2502      	movs	r5, #2
 800e81c:	e779      	b.n	800e712 <_dtoa_r+0x3d2>
 800e81e:	9f00      	ldr	r7, [sp, #0]
 800e820:	9e03      	ldr	r6, [sp, #12]
 800e822:	e794      	b.n	800e74e <_dtoa_r+0x40e>
 800e824:	9901      	ldr	r1, [sp, #4]
 800e826:	4b4c      	ldr	r3, [pc, #304]	; (800e958 <_dtoa_r+0x618>)
 800e828:	4431      	add	r1, r6
 800e82a:	910d      	str	r1, [sp, #52]	; 0x34
 800e82c:	9908      	ldr	r1, [sp, #32]
 800e82e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e832:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e836:	2900      	cmp	r1, #0
 800e838:	d043      	beq.n	800e8c2 <_dtoa_r+0x582>
 800e83a:	494d      	ldr	r1, [pc, #308]	; (800e970 <_dtoa_r+0x630>)
 800e83c:	2000      	movs	r0, #0
 800e83e:	f7f2 f81d 	bl	800087c <__aeabi_ddiv>
 800e842:	4652      	mov	r2, sl
 800e844:	465b      	mov	r3, fp
 800e846:	f7f1 fd37 	bl	80002b8 <__aeabi_dsub>
 800e84a:	9d01      	ldr	r5, [sp, #4]
 800e84c:	4682      	mov	sl, r0
 800e84e:	468b      	mov	fp, r1
 800e850:	4649      	mov	r1, r9
 800e852:	4640      	mov	r0, r8
 800e854:	f7f2 f998 	bl	8000b88 <__aeabi_d2iz>
 800e858:	4606      	mov	r6, r0
 800e85a:	f7f1 fe7b 	bl	8000554 <__aeabi_i2d>
 800e85e:	4602      	mov	r2, r0
 800e860:	460b      	mov	r3, r1
 800e862:	4640      	mov	r0, r8
 800e864:	4649      	mov	r1, r9
 800e866:	f7f1 fd27 	bl	80002b8 <__aeabi_dsub>
 800e86a:	3630      	adds	r6, #48	; 0x30
 800e86c:	f805 6b01 	strb.w	r6, [r5], #1
 800e870:	4652      	mov	r2, sl
 800e872:	465b      	mov	r3, fp
 800e874:	4680      	mov	r8, r0
 800e876:	4689      	mov	r9, r1
 800e878:	f7f2 f948 	bl	8000b0c <__aeabi_dcmplt>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	d163      	bne.n	800e948 <_dtoa_r+0x608>
 800e880:	4642      	mov	r2, r8
 800e882:	464b      	mov	r3, r9
 800e884:	4936      	ldr	r1, [pc, #216]	; (800e960 <_dtoa_r+0x620>)
 800e886:	2000      	movs	r0, #0
 800e888:	f7f1 fd16 	bl	80002b8 <__aeabi_dsub>
 800e88c:	4652      	mov	r2, sl
 800e88e:	465b      	mov	r3, fp
 800e890:	f7f2 f93c 	bl	8000b0c <__aeabi_dcmplt>
 800e894:	2800      	cmp	r0, #0
 800e896:	f040 80b5 	bne.w	800ea04 <_dtoa_r+0x6c4>
 800e89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e89c:	429d      	cmp	r5, r3
 800e89e:	d081      	beq.n	800e7a4 <_dtoa_r+0x464>
 800e8a0:	4b30      	ldr	r3, [pc, #192]	; (800e964 <_dtoa_r+0x624>)
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	4650      	mov	r0, sl
 800e8a6:	4659      	mov	r1, fp
 800e8a8:	f7f1 febe 	bl	8000628 <__aeabi_dmul>
 800e8ac:	4b2d      	ldr	r3, [pc, #180]	; (800e964 <_dtoa_r+0x624>)
 800e8ae:	4682      	mov	sl, r0
 800e8b0:	468b      	mov	fp, r1
 800e8b2:	4640      	mov	r0, r8
 800e8b4:	4649      	mov	r1, r9
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f7f1 feb6 	bl	8000628 <__aeabi_dmul>
 800e8bc:	4680      	mov	r8, r0
 800e8be:	4689      	mov	r9, r1
 800e8c0:	e7c6      	b.n	800e850 <_dtoa_r+0x510>
 800e8c2:	4650      	mov	r0, sl
 800e8c4:	4659      	mov	r1, fp
 800e8c6:	f7f1 feaf 	bl	8000628 <__aeabi_dmul>
 800e8ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8cc:	9d01      	ldr	r5, [sp, #4]
 800e8ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8d0:	4682      	mov	sl, r0
 800e8d2:	468b      	mov	fp, r1
 800e8d4:	4649      	mov	r1, r9
 800e8d6:	4640      	mov	r0, r8
 800e8d8:	f7f2 f956 	bl	8000b88 <__aeabi_d2iz>
 800e8dc:	4606      	mov	r6, r0
 800e8de:	f7f1 fe39 	bl	8000554 <__aeabi_i2d>
 800e8e2:	3630      	adds	r6, #48	; 0x30
 800e8e4:	4602      	mov	r2, r0
 800e8e6:	460b      	mov	r3, r1
 800e8e8:	4640      	mov	r0, r8
 800e8ea:	4649      	mov	r1, r9
 800e8ec:	f7f1 fce4 	bl	80002b8 <__aeabi_dsub>
 800e8f0:	f805 6b01 	strb.w	r6, [r5], #1
 800e8f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8f6:	429d      	cmp	r5, r3
 800e8f8:	4680      	mov	r8, r0
 800e8fa:	4689      	mov	r9, r1
 800e8fc:	f04f 0200 	mov.w	r2, #0
 800e900:	d124      	bne.n	800e94c <_dtoa_r+0x60c>
 800e902:	4b1b      	ldr	r3, [pc, #108]	; (800e970 <_dtoa_r+0x630>)
 800e904:	4650      	mov	r0, sl
 800e906:	4659      	mov	r1, fp
 800e908:	f7f1 fcd8 	bl	80002bc <__adddf3>
 800e90c:	4602      	mov	r2, r0
 800e90e:	460b      	mov	r3, r1
 800e910:	4640      	mov	r0, r8
 800e912:	4649      	mov	r1, r9
 800e914:	f7f2 f918 	bl	8000b48 <__aeabi_dcmpgt>
 800e918:	2800      	cmp	r0, #0
 800e91a:	d173      	bne.n	800ea04 <_dtoa_r+0x6c4>
 800e91c:	4652      	mov	r2, sl
 800e91e:	465b      	mov	r3, fp
 800e920:	4913      	ldr	r1, [pc, #76]	; (800e970 <_dtoa_r+0x630>)
 800e922:	2000      	movs	r0, #0
 800e924:	f7f1 fcc8 	bl	80002b8 <__aeabi_dsub>
 800e928:	4602      	mov	r2, r0
 800e92a:	460b      	mov	r3, r1
 800e92c:	4640      	mov	r0, r8
 800e92e:	4649      	mov	r1, r9
 800e930:	f7f2 f8ec 	bl	8000b0c <__aeabi_dcmplt>
 800e934:	2800      	cmp	r0, #0
 800e936:	f43f af35 	beq.w	800e7a4 <_dtoa_r+0x464>
 800e93a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e93c:	1e6b      	subs	r3, r5, #1
 800e93e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e940:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e944:	2b30      	cmp	r3, #48	; 0x30
 800e946:	d0f8      	beq.n	800e93a <_dtoa_r+0x5fa>
 800e948:	9700      	str	r7, [sp, #0]
 800e94a:	e049      	b.n	800e9e0 <_dtoa_r+0x6a0>
 800e94c:	4b05      	ldr	r3, [pc, #20]	; (800e964 <_dtoa_r+0x624>)
 800e94e:	f7f1 fe6b 	bl	8000628 <__aeabi_dmul>
 800e952:	4680      	mov	r8, r0
 800e954:	4689      	mov	r9, r1
 800e956:	e7bd      	b.n	800e8d4 <_dtoa_r+0x594>
 800e958:	08014700 	.word	0x08014700
 800e95c:	080146d8 	.word	0x080146d8
 800e960:	3ff00000 	.word	0x3ff00000
 800e964:	40240000 	.word	0x40240000
 800e968:	401c0000 	.word	0x401c0000
 800e96c:	40140000 	.word	0x40140000
 800e970:	3fe00000 	.word	0x3fe00000
 800e974:	9d01      	ldr	r5, [sp, #4]
 800e976:	4656      	mov	r6, sl
 800e978:	465f      	mov	r7, fp
 800e97a:	4642      	mov	r2, r8
 800e97c:	464b      	mov	r3, r9
 800e97e:	4630      	mov	r0, r6
 800e980:	4639      	mov	r1, r7
 800e982:	f7f1 ff7b 	bl	800087c <__aeabi_ddiv>
 800e986:	f7f2 f8ff 	bl	8000b88 <__aeabi_d2iz>
 800e98a:	4682      	mov	sl, r0
 800e98c:	f7f1 fde2 	bl	8000554 <__aeabi_i2d>
 800e990:	4642      	mov	r2, r8
 800e992:	464b      	mov	r3, r9
 800e994:	f7f1 fe48 	bl	8000628 <__aeabi_dmul>
 800e998:	4602      	mov	r2, r0
 800e99a:	460b      	mov	r3, r1
 800e99c:	4630      	mov	r0, r6
 800e99e:	4639      	mov	r1, r7
 800e9a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e9a4:	f7f1 fc88 	bl	80002b8 <__aeabi_dsub>
 800e9a8:	f805 6b01 	strb.w	r6, [r5], #1
 800e9ac:	9e01      	ldr	r6, [sp, #4]
 800e9ae:	9f03      	ldr	r7, [sp, #12]
 800e9b0:	1bae      	subs	r6, r5, r6
 800e9b2:	42b7      	cmp	r7, r6
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	d135      	bne.n	800ea26 <_dtoa_r+0x6e6>
 800e9ba:	f7f1 fc7f 	bl	80002bc <__adddf3>
 800e9be:	4642      	mov	r2, r8
 800e9c0:	464b      	mov	r3, r9
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	460f      	mov	r7, r1
 800e9c6:	f7f2 f8bf 	bl	8000b48 <__aeabi_dcmpgt>
 800e9ca:	b9d0      	cbnz	r0, 800ea02 <_dtoa_r+0x6c2>
 800e9cc:	4642      	mov	r2, r8
 800e9ce:	464b      	mov	r3, r9
 800e9d0:	4630      	mov	r0, r6
 800e9d2:	4639      	mov	r1, r7
 800e9d4:	f7f2 f890 	bl	8000af8 <__aeabi_dcmpeq>
 800e9d8:	b110      	cbz	r0, 800e9e0 <_dtoa_r+0x6a0>
 800e9da:	f01a 0f01 	tst.w	sl, #1
 800e9de:	d110      	bne.n	800ea02 <_dtoa_r+0x6c2>
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	ee18 1a10 	vmov	r1, s16
 800e9e6:	f000 fe79 	bl	800f6dc <_Bfree>
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	9800      	ldr	r0, [sp, #0]
 800e9ee:	702b      	strb	r3, [r5, #0]
 800e9f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9f2:	3001      	adds	r0, #1
 800e9f4:	6018      	str	r0, [r3, #0]
 800e9f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	f43f acf1 	beq.w	800e3e0 <_dtoa_r+0xa0>
 800e9fe:	601d      	str	r5, [r3, #0]
 800ea00:	e4ee      	b.n	800e3e0 <_dtoa_r+0xa0>
 800ea02:	9f00      	ldr	r7, [sp, #0]
 800ea04:	462b      	mov	r3, r5
 800ea06:	461d      	mov	r5, r3
 800ea08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea0c:	2a39      	cmp	r2, #57	; 0x39
 800ea0e:	d106      	bne.n	800ea1e <_dtoa_r+0x6de>
 800ea10:	9a01      	ldr	r2, [sp, #4]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d1f7      	bne.n	800ea06 <_dtoa_r+0x6c6>
 800ea16:	9901      	ldr	r1, [sp, #4]
 800ea18:	2230      	movs	r2, #48	; 0x30
 800ea1a:	3701      	adds	r7, #1
 800ea1c:	700a      	strb	r2, [r1, #0]
 800ea1e:	781a      	ldrb	r2, [r3, #0]
 800ea20:	3201      	adds	r2, #1
 800ea22:	701a      	strb	r2, [r3, #0]
 800ea24:	e790      	b.n	800e948 <_dtoa_r+0x608>
 800ea26:	4ba6      	ldr	r3, [pc, #664]	; (800ecc0 <_dtoa_r+0x980>)
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f7f1 fdfd 	bl	8000628 <__aeabi_dmul>
 800ea2e:	2200      	movs	r2, #0
 800ea30:	2300      	movs	r3, #0
 800ea32:	4606      	mov	r6, r0
 800ea34:	460f      	mov	r7, r1
 800ea36:	f7f2 f85f 	bl	8000af8 <__aeabi_dcmpeq>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	d09d      	beq.n	800e97a <_dtoa_r+0x63a>
 800ea3e:	e7cf      	b.n	800e9e0 <_dtoa_r+0x6a0>
 800ea40:	9a08      	ldr	r2, [sp, #32]
 800ea42:	2a00      	cmp	r2, #0
 800ea44:	f000 80d7 	beq.w	800ebf6 <_dtoa_r+0x8b6>
 800ea48:	9a06      	ldr	r2, [sp, #24]
 800ea4a:	2a01      	cmp	r2, #1
 800ea4c:	f300 80ba 	bgt.w	800ebc4 <_dtoa_r+0x884>
 800ea50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea52:	2a00      	cmp	r2, #0
 800ea54:	f000 80b2 	beq.w	800ebbc <_dtoa_r+0x87c>
 800ea58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ea5c:	9e07      	ldr	r6, [sp, #28]
 800ea5e:	9d04      	ldr	r5, [sp, #16]
 800ea60:	9a04      	ldr	r2, [sp, #16]
 800ea62:	441a      	add	r2, r3
 800ea64:	9204      	str	r2, [sp, #16]
 800ea66:	9a05      	ldr	r2, [sp, #20]
 800ea68:	2101      	movs	r1, #1
 800ea6a:	441a      	add	r2, r3
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	9205      	str	r2, [sp, #20]
 800ea70:	f000 ff36 	bl	800f8e0 <__i2b>
 800ea74:	4607      	mov	r7, r0
 800ea76:	2d00      	cmp	r5, #0
 800ea78:	dd0c      	ble.n	800ea94 <_dtoa_r+0x754>
 800ea7a:	9b05      	ldr	r3, [sp, #20]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	dd09      	ble.n	800ea94 <_dtoa_r+0x754>
 800ea80:	42ab      	cmp	r3, r5
 800ea82:	9a04      	ldr	r2, [sp, #16]
 800ea84:	bfa8      	it	ge
 800ea86:	462b      	movge	r3, r5
 800ea88:	1ad2      	subs	r2, r2, r3
 800ea8a:	9204      	str	r2, [sp, #16]
 800ea8c:	9a05      	ldr	r2, [sp, #20]
 800ea8e:	1aed      	subs	r5, r5, r3
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	9305      	str	r3, [sp, #20]
 800ea94:	9b07      	ldr	r3, [sp, #28]
 800ea96:	b31b      	cbz	r3, 800eae0 <_dtoa_r+0x7a0>
 800ea98:	9b08      	ldr	r3, [sp, #32]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	f000 80af 	beq.w	800ebfe <_dtoa_r+0x8be>
 800eaa0:	2e00      	cmp	r6, #0
 800eaa2:	dd13      	ble.n	800eacc <_dtoa_r+0x78c>
 800eaa4:	4639      	mov	r1, r7
 800eaa6:	4632      	mov	r2, r6
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f000 ffd9 	bl	800fa60 <__pow5mult>
 800eaae:	ee18 2a10 	vmov	r2, s16
 800eab2:	4601      	mov	r1, r0
 800eab4:	4607      	mov	r7, r0
 800eab6:	4620      	mov	r0, r4
 800eab8:	f000 ff28 	bl	800f90c <__multiply>
 800eabc:	ee18 1a10 	vmov	r1, s16
 800eac0:	4680      	mov	r8, r0
 800eac2:	4620      	mov	r0, r4
 800eac4:	f000 fe0a 	bl	800f6dc <_Bfree>
 800eac8:	ee08 8a10 	vmov	s16, r8
 800eacc:	9b07      	ldr	r3, [sp, #28]
 800eace:	1b9a      	subs	r2, r3, r6
 800ead0:	d006      	beq.n	800eae0 <_dtoa_r+0x7a0>
 800ead2:	ee18 1a10 	vmov	r1, s16
 800ead6:	4620      	mov	r0, r4
 800ead8:	f000 ffc2 	bl	800fa60 <__pow5mult>
 800eadc:	ee08 0a10 	vmov	s16, r0
 800eae0:	2101      	movs	r1, #1
 800eae2:	4620      	mov	r0, r4
 800eae4:	f000 fefc 	bl	800f8e0 <__i2b>
 800eae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	4606      	mov	r6, r0
 800eaee:	f340 8088 	ble.w	800ec02 <_dtoa_r+0x8c2>
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	4601      	mov	r1, r0
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	f000 ffb2 	bl	800fa60 <__pow5mult>
 800eafc:	9b06      	ldr	r3, [sp, #24]
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	4606      	mov	r6, r0
 800eb02:	f340 8081 	ble.w	800ec08 <_dtoa_r+0x8c8>
 800eb06:	f04f 0800 	mov.w	r8, #0
 800eb0a:	6933      	ldr	r3, [r6, #16]
 800eb0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800eb10:	6918      	ldr	r0, [r3, #16]
 800eb12:	f000 fe95 	bl	800f840 <__hi0bits>
 800eb16:	f1c0 0020 	rsb	r0, r0, #32
 800eb1a:	9b05      	ldr	r3, [sp, #20]
 800eb1c:	4418      	add	r0, r3
 800eb1e:	f010 001f 	ands.w	r0, r0, #31
 800eb22:	f000 8092 	beq.w	800ec4a <_dtoa_r+0x90a>
 800eb26:	f1c0 0320 	rsb	r3, r0, #32
 800eb2a:	2b04      	cmp	r3, #4
 800eb2c:	f340 808a 	ble.w	800ec44 <_dtoa_r+0x904>
 800eb30:	f1c0 001c 	rsb	r0, r0, #28
 800eb34:	9b04      	ldr	r3, [sp, #16]
 800eb36:	4403      	add	r3, r0
 800eb38:	9304      	str	r3, [sp, #16]
 800eb3a:	9b05      	ldr	r3, [sp, #20]
 800eb3c:	4403      	add	r3, r0
 800eb3e:	4405      	add	r5, r0
 800eb40:	9305      	str	r3, [sp, #20]
 800eb42:	9b04      	ldr	r3, [sp, #16]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	dd07      	ble.n	800eb58 <_dtoa_r+0x818>
 800eb48:	ee18 1a10 	vmov	r1, s16
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f000 ffe0 	bl	800fb14 <__lshift>
 800eb54:	ee08 0a10 	vmov	s16, r0
 800eb58:	9b05      	ldr	r3, [sp, #20]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	dd05      	ble.n	800eb6a <_dtoa_r+0x82a>
 800eb5e:	4631      	mov	r1, r6
 800eb60:	461a      	mov	r2, r3
 800eb62:	4620      	mov	r0, r4
 800eb64:	f000 ffd6 	bl	800fb14 <__lshift>
 800eb68:	4606      	mov	r6, r0
 800eb6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d06e      	beq.n	800ec4e <_dtoa_r+0x90e>
 800eb70:	ee18 0a10 	vmov	r0, s16
 800eb74:	4631      	mov	r1, r6
 800eb76:	f001 f83d 	bl	800fbf4 <__mcmp>
 800eb7a:	2800      	cmp	r0, #0
 800eb7c:	da67      	bge.n	800ec4e <_dtoa_r+0x90e>
 800eb7e:	9b00      	ldr	r3, [sp, #0]
 800eb80:	3b01      	subs	r3, #1
 800eb82:	ee18 1a10 	vmov	r1, s16
 800eb86:	9300      	str	r3, [sp, #0]
 800eb88:	220a      	movs	r2, #10
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	f000 fdc7 	bl	800f720 <__multadd>
 800eb92:	9b08      	ldr	r3, [sp, #32]
 800eb94:	ee08 0a10 	vmov	s16, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f000 81b1 	beq.w	800ef00 <_dtoa_r+0xbc0>
 800eb9e:	2300      	movs	r3, #0
 800eba0:	4639      	mov	r1, r7
 800eba2:	220a      	movs	r2, #10
 800eba4:	4620      	mov	r0, r4
 800eba6:	f000 fdbb 	bl	800f720 <__multadd>
 800ebaa:	9b02      	ldr	r3, [sp, #8]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	4607      	mov	r7, r0
 800ebb0:	f300 808e 	bgt.w	800ecd0 <_dtoa_r+0x990>
 800ebb4:	9b06      	ldr	r3, [sp, #24]
 800ebb6:	2b02      	cmp	r3, #2
 800ebb8:	dc51      	bgt.n	800ec5e <_dtoa_r+0x91e>
 800ebba:	e089      	b.n	800ecd0 <_dtoa_r+0x990>
 800ebbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ebbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ebc2:	e74b      	b.n	800ea5c <_dtoa_r+0x71c>
 800ebc4:	9b03      	ldr	r3, [sp, #12]
 800ebc6:	1e5e      	subs	r6, r3, #1
 800ebc8:	9b07      	ldr	r3, [sp, #28]
 800ebca:	42b3      	cmp	r3, r6
 800ebcc:	bfbf      	itttt	lt
 800ebce:	9b07      	ldrlt	r3, [sp, #28]
 800ebd0:	9607      	strlt	r6, [sp, #28]
 800ebd2:	1af2      	sublt	r2, r6, r3
 800ebd4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ebd6:	bfb6      	itet	lt
 800ebd8:	189b      	addlt	r3, r3, r2
 800ebda:	1b9e      	subge	r6, r3, r6
 800ebdc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ebde:	9b03      	ldr	r3, [sp, #12]
 800ebe0:	bfb8      	it	lt
 800ebe2:	2600      	movlt	r6, #0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	bfb7      	itett	lt
 800ebe8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ebec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ebf0:	1a9d      	sublt	r5, r3, r2
 800ebf2:	2300      	movlt	r3, #0
 800ebf4:	e734      	b.n	800ea60 <_dtoa_r+0x720>
 800ebf6:	9e07      	ldr	r6, [sp, #28]
 800ebf8:	9d04      	ldr	r5, [sp, #16]
 800ebfa:	9f08      	ldr	r7, [sp, #32]
 800ebfc:	e73b      	b.n	800ea76 <_dtoa_r+0x736>
 800ebfe:	9a07      	ldr	r2, [sp, #28]
 800ec00:	e767      	b.n	800ead2 <_dtoa_r+0x792>
 800ec02:	9b06      	ldr	r3, [sp, #24]
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	dc18      	bgt.n	800ec3a <_dtoa_r+0x8fa>
 800ec08:	f1ba 0f00 	cmp.w	sl, #0
 800ec0c:	d115      	bne.n	800ec3a <_dtoa_r+0x8fa>
 800ec0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec12:	b993      	cbnz	r3, 800ec3a <_dtoa_r+0x8fa>
 800ec14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ec18:	0d1b      	lsrs	r3, r3, #20
 800ec1a:	051b      	lsls	r3, r3, #20
 800ec1c:	b183      	cbz	r3, 800ec40 <_dtoa_r+0x900>
 800ec1e:	9b04      	ldr	r3, [sp, #16]
 800ec20:	3301      	adds	r3, #1
 800ec22:	9304      	str	r3, [sp, #16]
 800ec24:	9b05      	ldr	r3, [sp, #20]
 800ec26:	3301      	adds	r3, #1
 800ec28:	9305      	str	r3, [sp, #20]
 800ec2a:	f04f 0801 	mov.w	r8, #1
 800ec2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f47f af6a 	bne.w	800eb0a <_dtoa_r+0x7ca>
 800ec36:	2001      	movs	r0, #1
 800ec38:	e76f      	b.n	800eb1a <_dtoa_r+0x7da>
 800ec3a:	f04f 0800 	mov.w	r8, #0
 800ec3e:	e7f6      	b.n	800ec2e <_dtoa_r+0x8ee>
 800ec40:	4698      	mov	r8, r3
 800ec42:	e7f4      	b.n	800ec2e <_dtoa_r+0x8ee>
 800ec44:	f43f af7d 	beq.w	800eb42 <_dtoa_r+0x802>
 800ec48:	4618      	mov	r0, r3
 800ec4a:	301c      	adds	r0, #28
 800ec4c:	e772      	b.n	800eb34 <_dtoa_r+0x7f4>
 800ec4e:	9b03      	ldr	r3, [sp, #12]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	dc37      	bgt.n	800ecc4 <_dtoa_r+0x984>
 800ec54:	9b06      	ldr	r3, [sp, #24]
 800ec56:	2b02      	cmp	r3, #2
 800ec58:	dd34      	ble.n	800ecc4 <_dtoa_r+0x984>
 800ec5a:	9b03      	ldr	r3, [sp, #12]
 800ec5c:	9302      	str	r3, [sp, #8]
 800ec5e:	9b02      	ldr	r3, [sp, #8]
 800ec60:	b96b      	cbnz	r3, 800ec7e <_dtoa_r+0x93e>
 800ec62:	4631      	mov	r1, r6
 800ec64:	2205      	movs	r2, #5
 800ec66:	4620      	mov	r0, r4
 800ec68:	f000 fd5a 	bl	800f720 <__multadd>
 800ec6c:	4601      	mov	r1, r0
 800ec6e:	4606      	mov	r6, r0
 800ec70:	ee18 0a10 	vmov	r0, s16
 800ec74:	f000 ffbe 	bl	800fbf4 <__mcmp>
 800ec78:	2800      	cmp	r0, #0
 800ec7a:	f73f adbb 	bgt.w	800e7f4 <_dtoa_r+0x4b4>
 800ec7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec80:	9d01      	ldr	r5, [sp, #4]
 800ec82:	43db      	mvns	r3, r3
 800ec84:	9300      	str	r3, [sp, #0]
 800ec86:	f04f 0800 	mov.w	r8, #0
 800ec8a:	4631      	mov	r1, r6
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f000 fd25 	bl	800f6dc <_Bfree>
 800ec92:	2f00      	cmp	r7, #0
 800ec94:	f43f aea4 	beq.w	800e9e0 <_dtoa_r+0x6a0>
 800ec98:	f1b8 0f00 	cmp.w	r8, #0
 800ec9c:	d005      	beq.n	800ecaa <_dtoa_r+0x96a>
 800ec9e:	45b8      	cmp	r8, r7
 800eca0:	d003      	beq.n	800ecaa <_dtoa_r+0x96a>
 800eca2:	4641      	mov	r1, r8
 800eca4:	4620      	mov	r0, r4
 800eca6:	f000 fd19 	bl	800f6dc <_Bfree>
 800ecaa:	4639      	mov	r1, r7
 800ecac:	4620      	mov	r0, r4
 800ecae:	f000 fd15 	bl	800f6dc <_Bfree>
 800ecb2:	e695      	b.n	800e9e0 <_dtoa_r+0x6a0>
 800ecb4:	2600      	movs	r6, #0
 800ecb6:	4637      	mov	r7, r6
 800ecb8:	e7e1      	b.n	800ec7e <_dtoa_r+0x93e>
 800ecba:	9700      	str	r7, [sp, #0]
 800ecbc:	4637      	mov	r7, r6
 800ecbe:	e599      	b.n	800e7f4 <_dtoa_r+0x4b4>
 800ecc0:	40240000 	.word	0x40240000
 800ecc4:	9b08      	ldr	r3, [sp, #32]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	f000 80ca 	beq.w	800ee60 <_dtoa_r+0xb20>
 800eccc:	9b03      	ldr	r3, [sp, #12]
 800ecce:	9302      	str	r3, [sp, #8]
 800ecd0:	2d00      	cmp	r5, #0
 800ecd2:	dd05      	ble.n	800ece0 <_dtoa_r+0x9a0>
 800ecd4:	4639      	mov	r1, r7
 800ecd6:	462a      	mov	r2, r5
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f000 ff1b 	bl	800fb14 <__lshift>
 800ecde:	4607      	mov	r7, r0
 800ece0:	f1b8 0f00 	cmp.w	r8, #0
 800ece4:	d05b      	beq.n	800ed9e <_dtoa_r+0xa5e>
 800ece6:	6879      	ldr	r1, [r7, #4]
 800ece8:	4620      	mov	r0, r4
 800ecea:	f000 fcb7 	bl	800f65c <_Balloc>
 800ecee:	4605      	mov	r5, r0
 800ecf0:	b928      	cbnz	r0, 800ecfe <_dtoa_r+0x9be>
 800ecf2:	4b87      	ldr	r3, [pc, #540]	; (800ef10 <_dtoa_r+0xbd0>)
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ecfa:	f7ff bb3b 	b.w	800e374 <_dtoa_r+0x34>
 800ecfe:	693a      	ldr	r2, [r7, #16]
 800ed00:	3202      	adds	r2, #2
 800ed02:	0092      	lsls	r2, r2, #2
 800ed04:	f107 010c 	add.w	r1, r7, #12
 800ed08:	300c      	adds	r0, #12
 800ed0a:	f7fd fc81 	bl	800c610 <memcpy>
 800ed0e:	2201      	movs	r2, #1
 800ed10:	4629      	mov	r1, r5
 800ed12:	4620      	mov	r0, r4
 800ed14:	f000 fefe 	bl	800fb14 <__lshift>
 800ed18:	9b01      	ldr	r3, [sp, #4]
 800ed1a:	f103 0901 	add.w	r9, r3, #1
 800ed1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ed22:	4413      	add	r3, r2
 800ed24:	9305      	str	r3, [sp, #20]
 800ed26:	f00a 0301 	and.w	r3, sl, #1
 800ed2a:	46b8      	mov	r8, r7
 800ed2c:	9304      	str	r3, [sp, #16]
 800ed2e:	4607      	mov	r7, r0
 800ed30:	4631      	mov	r1, r6
 800ed32:	ee18 0a10 	vmov	r0, s16
 800ed36:	f7ff fa77 	bl	800e228 <quorem>
 800ed3a:	4641      	mov	r1, r8
 800ed3c:	9002      	str	r0, [sp, #8]
 800ed3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ed42:	ee18 0a10 	vmov	r0, s16
 800ed46:	f000 ff55 	bl	800fbf4 <__mcmp>
 800ed4a:	463a      	mov	r2, r7
 800ed4c:	9003      	str	r0, [sp, #12]
 800ed4e:	4631      	mov	r1, r6
 800ed50:	4620      	mov	r0, r4
 800ed52:	f000 ff6b 	bl	800fc2c <__mdiff>
 800ed56:	68c2      	ldr	r2, [r0, #12]
 800ed58:	f109 3bff 	add.w	fp, r9, #4294967295
 800ed5c:	4605      	mov	r5, r0
 800ed5e:	bb02      	cbnz	r2, 800eda2 <_dtoa_r+0xa62>
 800ed60:	4601      	mov	r1, r0
 800ed62:	ee18 0a10 	vmov	r0, s16
 800ed66:	f000 ff45 	bl	800fbf4 <__mcmp>
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	4629      	mov	r1, r5
 800ed6e:	4620      	mov	r0, r4
 800ed70:	9207      	str	r2, [sp, #28]
 800ed72:	f000 fcb3 	bl	800f6dc <_Bfree>
 800ed76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ed7a:	ea43 0102 	orr.w	r1, r3, r2
 800ed7e:	9b04      	ldr	r3, [sp, #16]
 800ed80:	430b      	orrs	r3, r1
 800ed82:	464d      	mov	r5, r9
 800ed84:	d10f      	bne.n	800eda6 <_dtoa_r+0xa66>
 800ed86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed8a:	d02a      	beq.n	800ede2 <_dtoa_r+0xaa2>
 800ed8c:	9b03      	ldr	r3, [sp, #12]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	dd02      	ble.n	800ed98 <_dtoa_r+0xa58>
 800ed92:	9b02      	ldr	r3, [sp, #8]
 800ed94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ed98:	f88b a000 	strb.w	sl, [fp]
 800ed9c:	e775      	b.n	800ec8a <_dtoa_r+0x94a>
 800ed9e:	4638      	mov	r0, r7
 800eda0:	e7ba      	b.n	800ed18 <_dtoa_r+0x9d8>
 800eda2:	2201      	movs	r2, #1
 800eda4:	e7e2      	b.n	800ed6c <_dtoa_r+0xa2c>
 800eda6:	9b03      	ldr	r3, [sp, #12]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	db04      	blt.n	800edb6 <_dtoa_r+0xa76>
 800edac:	9906      	ldr	r1, [sp, #24]
 800edae:	430b      	orrs	r3, r1
 800edb0:	9904      	ldr	r1, [sp, #16]
 800edb2:	430b      	orrs	r3, r1
 800edb4:	d122      	bne.n	800edfc <_dtoa_r+0xabc>
 800edb6:	2a00      	cmp	r2, #0
 800edb8:	ddee      	ble.n	800ed98 <_dtoa_r+0xa58>
 800edba:	ee18 1a10 	vmov	r1, s16
 800edbe:	2201      	movs	r2, #1
 800edc0:	4620      	mov	r0, r4
 800edc2:	f000 fea7 	bl	800fb14 <__lshift>
 800edc6:	4631      	mov	r1, r6
 800edc8:	ee08 0a10 	vmov	s16, r0
 800edcc:	f000 ff12 	bl	800fbf4 <__mcmp>
 800edd0:	2800      	cmp	r0, #0
 800edd2:	dc03      	bgt.n	800eddc <_dtoa_r+0xa9c>
 800edd4:	d1e0      	bne.n	800ed98 <_dtoa_r+0xa58>
 800edd6:	f01a 0f01 	tst.w	sl, #1
 800edda:	d0dd      	beq.n	800ed98 <_dtoa_r+0xa58>
 800eddc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ede0:	d1d7      	bne.n	800ed92 <_dtoa_r+0xa52>
 800ede2:	2339      	movs	r3, #57	; 0x39
 800ede4:	f88b 3000 	strb.w	r3, [fp]
 800ede8:	462b      	mov	r3, r5
 800edea:	461d      	mov	r5, r3
 800edec:	3b01      	subs	r3, #1
 800edee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800edf2:	2a39      	cmp	r2, #57	; 0x39
 800edf4:	d071      	beq.n	800eeda <_dtoa_r+0xb9a>
 800edf6:	3201      	adds	r2, #1
 800edf8:	701a      	strb	r2, [r3, #0]
 800edfa:	e746      	b.n	800ec8a <_dtoa_r+0x94a>
 800edfc:	2a00      	cmp	r2, #0
 800edfe:	dd07      	ble.n	800ee10 <_dtoa_r+0xad0>
 800ee00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ee04:	d0ed      	beq.n	800ede2 <_dtoa_r+0xaa2>
 800ee06:	f10a 0301 	add.w	r3, sl, #1
 800ee0a:	f88b 3000 	strb.w	r3, [fp]
 800ee0e:	e73c      	b.n	800ec8a <_dtoa_r+0x94a>
 800ee10:	9b05      	ldr	r3, [sp, #20]
 800ee12:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ee16:	4599      	cmp	r9, r3
 800ee18:	d047      	beq.n	800eeaa <_dtoa_r+0xb6a>
 800ee1a:	ee18 1a10 	vmov	r1, s16
 800ee1e:	2300      	movs	r3, #0
 800ee20:	220a      	movs	r2, #10
 800ee22:	4620      	mov	r0, r4
 800ee24:	f000 fc7c 	bl	800f720 <__multadd>
 800ee28:	45b8      	cmp	r8, r7
 800ee2a:	ee08 0a10 	vmov	s16, r0
 800ee2e:	f04f 0300 	mov.w	r3, #0
 800ee32:	f04f 020a 	mov.w	r2, #10
 800ee36:	4641      	mov	r1, r8
 800ee38:	4620      	mov	r0, r4
 800ee3a:	d106      	bne.n	800ee4a <_dtoa_r+0xb0a>
 800ee3c:	f000 fc70 	bl	800f720 <__multadd>
 800ee40:	4680      	mov	r8, r0
 800ee42:	4607      	mov	r7, r0
 800ee44:	f109 0901 	add.w	r9, r9, #1
 800ee48:	e772      	b.n	800ed30 <_dtoa_r+0x9f0>
 800ee4a:	f000 fc69 	bl	800f720 <__multadd>
 800ee4e:	4639      	mov	r1, r7
 800ee50:	4680      	mov	r8, r0
 800ee52:	2300      	movs	r3, #0
 800ee54:	220a      	movs	r2, #10
 800ee56:	4620      	mov	r0, r4
 800ee58:	f000 fc62 	bl	800f720 <__multadd>
 800ee5c:	4607      	mov	r7, r0
 800ee5e:	e7f1      	b.n	800ee44 <_dtoa_r+0xb04>
 800ee60:	9b03      	ldr	r3, [sp, #12]
 800ee62:	9302      	str	r3, [sp, #8]
 800ee64:	9d01      	ldr	r5, [sp, #4]
 800ee66:	ee18 0a10 	vmov	r0, s16
 800ee6a:	4631      	mov	r1, r6
 800ee6c:	f7ff f9dc 	bl	800e228 <quorem>
 800ee70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ee74:	9b01      	ldr	r3, [sp, #4]
 800ee76:	f805 ab01 	strb.w	sl, [r5], #1
 800ee7a:	1aea      	subs	r2, r5, r3
 800ee7c:	9b02      	ldr	r3, [sp, #8]
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	dd09      	ble.n	800ee96 <_dtoa_r+0xb56>
 800ee82:	ee18 1a10 	vmov	r1, s16
 800ee86:	2300      	movs	r3, #0
 800ee88:	220a      	movs	r2, #10
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f000 fc48 	bl	800f720 <__multadd>
 800ee90:	ee08 0a10 	vmov	s16, r0
 800ee94:	e7e7      	b.n	800ee66 <_dtoa_r+0xb26>
 800ee96:	9b02      	ldr	r3, [sp, #8]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	bfc8      	it	gt
 800ee9c:	461d      	movgt	r5, r3
 800ee9e:	9b01      	ldr	r3, [sp, #4]
 800eea0:	bfd8      	it	le
 800eea2:	2501      	movle	r5, #1
 800eea4:	441d      	add	r5, r3
 800eea6:	f04f 0800 	mov.w	r8, #0
 800eeaa:	ee18 1a10 	vmov	r1, s16
 800eeae:	2201      	movs	r2, #1
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	f000 fe2f 	bl	800fb14 <__lshift>
 800eeb6:	4631      	mov	r1, r6
 800eeb8:	ee08 0a10 	vmov	s16, r0
 800eebc:	f000 fe9a 	bl	800fbf4 <__mcmp>
 800eec0:	2800      	cmp	r0, #0
 800eec2:	dc91      	bgt.n	800ede8 <_dtoa_r+0xaa8>
 800eec4:	d102      	bne.n	800eecc <_dtoa_r+0xb8c>
 800eec6:	f01a 0f01 	tst.w	sl, #1
 800eeca:	d18d      	bne.n	800ede8 <_dtoa_r+0xaa8>
 800eecc:	462b      	mov	r3, r5
 800eece:	461d      	mov	r5, r3
 800eed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eed4:	2a30      	cmp	r2, #48	; 0x30
 800eed6:	d0fa      	beq.n	800eece <_dtoa_r+0xb8e>
 800eed8:	e6d7      	b.n	800ec8a <_dtoa_r+0x94a>
 800eeda:	9a01      	ldr	r2, [sp, #4]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d184      	bne.n	800edea <_dtoa_r+0xaaa>
 800eee0:	9b00      	ldr	r3, [sp, #0]
 800eee2:	3301      	adds	r3, #1
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	2331      	movs	r3, #49	; 0x31
 800eee8:	7013      	strb	r3, [r2, #0]
 800eeea:	e6ce      	b.n	800ec8a <_dtoa_r+0x94a>
 800eeec:	4b09      	ldr	r3, [pc, #36]	; (800ef14 <_dtoa_r+0xbd4>)
 800eeee:	f7ff ba95 	b.w	800e41c <_dtoa_r+0xdc>
 800eef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	f47f aa6e 	bne.w	800e3d6 <_dtoa_r+0x96>
 800eefa:	4b07      	ldr	r3, [pc, #28]	; (800ef18 <_dtoa_r+0xbd8>)
 800eefc:	f7ff ba8e 	b.w	800e41c <_dtoa_r+0xdc>
 800ef00:	9b02      	ldr	r3, [sp, #8]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	dcae      	bgt.n	800ee64 <_dtoa_r+0xb24>
 800ef06:	9b06      	ldr	r3, [sp, #24]
 800ef08:	2b02      	cmp	r3, #2
 800ef0a:	f73f aea8 	bgt.w	800ec5e <_dtoa_r+0x91e>
 800ef0e:	e7a9      	b.n	800ee64 <_dtoa_r+0xb24>
 800ef10:	080145f0 	.word	0x080145f0
 800ef14:	080147e9 	.word	0x080147e9
 800ef18:	08014571 	.word	0x08014571

0800ef1c <rshift>:
 800ef1c:	6903      	ldr	r3, [r0, #16]
 800ef1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ef22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef26:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ef2a:	f100 0414 	add.w	r4, r0, #20
 800ef2e:	dd45      	ble.n	800efbc <rshift+0xa0>
 800ef30:	f011 011f 	ands.w	r1, r1, #31
 800ef34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ef38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ef3c:	d10c      	bne.n	800ef58 <rshift+0x3c>
 800ef3e:	f100 0710 	add.w	r7, r0, #16
 800ef42:	4629      	mov	r1, r5
 800ef44:	42b1      	cmp	r1, r6
 800ef46:	d334      	bcc.n	800efb2 <rshift+0x96>
 800ef48:	1a9b      	subs	r3, r3, r2
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	1eea      	subs	r2, r5, #3
 800ef4e:	4296      	cmp	r6, r2
 800ef50:	bf38      	it	cc
 800ef52:	2300      	movcc	r3, #0
 800ef54:	4423      	add	r3, r4
 800ef56:	e015      	b.n	800ef84 <rshift+0x68>
 800ef58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ef5c:	f1c1 0820 	rsb	r8, r1, #32
 800ef60:	40cf      	lsrs	r7, r1
 800ef62:	f105 0e04 	add.w	lr, r5, #4
 800ef66:	46a1      	mov	r9, r4
 800ef68:	4576      	cmp	r6, lr
 800ef6a:	46f4      	mov	ip, lr
 800ef6c:	d815      	bhi.n	800ef9a <rshift+0x7e>
 800ef6e:	1a9a      	subs	r2, r3, r2
 800ef70:	0092      	lsls	r2, r2, #2
 800ef72:	3a04      	subs	r2, #4
 800ef74:	3501      	adds	r5, #1
 800ef76:	42ae      	cmp	r6, r5
 800ef78:	bf38      	it	cc
 800ef7a:	2200      	movcc	r2, #0
 800ef7c:	18a3      	adds	r3, r4, r2
 800ef7e:	50a7      	str	r7, [r4, r2]
 800ef80:	b107      	cbz	r7, 800ef84 <rshift+0x68>
 800ef82:	3304      	adds	r3, #4
 800ef84:	1b1a      	subs	r2, r3, r4
 800ef86:	42a3      	cmp	r3, r4
 800ef88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ef8c:	bf08      	it	eq
 800ef8e:	2300      	moveq	r3, #0
 800ef90:	6102      	str	r2, [r0, #16]
 800ef92:	bf08      	it	eq
 800ef94:	6143      	streq	r3, [r0, #20]
 800ef96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef9a:	f8dc c000 	ldr.w	ip, [ip]
 800ef9e:	fa0c fc08 	lsl.w	ip, ip, r8
 800efa2:	ea4c 0707 	orr.w	r7, ip, r7
 800efa6:	f849 7b04 	str.w	r7, [r9], #4
 800efaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800efae:	40cf      	lsrs	r7, r1
 800efb0:	e7da      	b.n	800ef68 <rshift+0x4c>
 800efb2:	f851 cb04 	ldr.w	ip, [r1], #4
 800efb6:	f847 cf04 	str.w	ip, [r7, #4]!
 800efba:	e7c3      	b.n	800ef44 <rshift+0x28>
 800efbc:	4623      	mov	r3, r4
 800efbe:	e7e1      	b.n	800ef84 <rshift+0x68>

0800efc0 <__hexdig_fun>:
 800efc0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800efc4:	2b09      	cmp	r3, #9
 800efc6:	d802      	bhi.n	800efce <__hexdig_fun+0xe>
 800efc8:	3820      	subs	r0, #32
 800efca:	b2c0      	uxtb	r0, r0
 800efcc:	4770      	bx	lr
 800efce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800efd2:	2b05      	cmp	r3, #5
 800efd4:	d801      	bhi.n	800efda <__hexdig_fun+0x1a>
 800efd6:	3847      	subs	r0, #71	; 0x47
 800efd8:	e7f7      	b.n	800efca <__hexdig_fun+0xa>
 800efda:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800efde:	2b05      	cmp	r3, #5
 800efe0:	d801      	bhi.n	800efe6 <__hexdig_fun+0x26>
 800efe2:	3827      	subs	r0, #39	; 0x27
 800efe4:	e7f1      	b.n	800efca <__hexdig_fun+0xa>
 800efe6:	2000      	movs	r0, #0
 800efe8:	4770      	bx	lr
	...

0800efec <__gethex>:
 800efec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff0:	ed2d 8b02 	vpush	{d8}
 800eff4:	b089      	sub	sp, #36	; 0x24
 800eff6:	ee08 0a10 	vmov	s16, r0
 800effa:	9304      	str	r3, [sp, #16]
 800effc:	4bb4      	ldr	r3, [pc, #720]	; (800f2d0 <__gethex+0x2e4>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	9301      	str	r3, [sp, #4]
 800f002:	4618      	mov	r0, r3
 800f004:	468b      	mov	fp, r1
 800f006:	4690      	mov	r8, r2
 800f008:	f7f1 f8f4 	bl	80001f4 <strlen>
 800f00c:	9b01      	ldr	r3, [sp, #4]
 800f00e:	f8db 2000 	ldr.w	r2, [fp]
 800f012:	4403      	add	r3, r0
 800f014:	4682      	mov	sl, r0
 800f016:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f01a:	9305      	str	r3, [sp, #20]
 800f01c:	1c93      	adds	r3, r2, #2
 800f01e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f022:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f026:	32fe      	adds	r2, #254	; 0xfe
 800f028:	18d1      	adds	r1, r2, r3
 800f02a:	461f      	mov	r7, r3
 800f02c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f030:	9100      	str	r1, [sp, #0]
 800f032:	2830      	cmp	r0, #48	; 0x30
 800f034:	d0f8      	beq.n	800f028 <__gethex+0x3c>
 800f036:	f7ff ffc3 	bl	800efc0 <__hexdig_fun>
 800f03a:	4604      	mov	r4, r0
 800f03c:	2800      	cmp	r0, #0
 800f03e:	d13a      	bne.n	800f0b6 <__gethex+0xca>
 800f040:	9901      	ldr	r1, [sp, #4]
 800f042:	4652      	mov	r2, sl
 800f044:	4638      	mov	r0, r7
 800f046:	f001 fda3 	bl	8010b90 <strncmp>
 800f04a:	4605      	mov	r5, r0
 800f04c:	2800      	cmp	r0, #0
 800f04e:	d168      	bne.n	800f122 <__gethex+0x136>
 800f050:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f054:	eb07 060a 	add.w	r6, r7, sl
 800f058:	f7ff ffb2 	bl	800efc0 <__hexdig_fun>
 800f05c:	2800      	cmp	r0, #0
 800f05e:	d062      	beq.n	800f126 <__gethex+0x13a>
 800f060:	4633      	mov	r3, r6
 800f062:	7818      	ldrb	r0, [r3, #0]
 800f064:	2830      	cmp	r0, #48	; 0x30
 800f066:	461f      	mov	r7, r3
 800f068:	f103 0301 	add.w	r3, r3, #1
 800f06c:	d0f9      	beq.n	800f062 <__gethex+0x76>
 800f06e:	f7ff ffa7 	bl	800efc0 <__hexdig_fun>
 800f072:	2301      	movs	r3, #1
 800f074:	fab0 f480 	clz	r4, r0
 800f078:	0964      	lsrs	r4, r4, #5
 800f07a:	4635      	mov	r5, r6
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	463a      	mov	r2, r7
 800f080:	4616      	mov	r6, r2
 800f082:	3201      	adds	r2, #1
 800f084:	7830      	ldrb	r0, [r6, #0]
 800f086:	f7ff ff9b 	bl	800efc0 <__hexdig_fun>
 800f08a:	2800      	cmp	r0, #0
 800f08c:	d1f8      	bne.n	800f080 <__gethex+0x94>
 800f08e:	9901      	ldr	r1, [sp, #4]
 800f090:	4652      	mov	r2, sl
 800f092:	4630      	mov	r0, r6
 800f094:	f001 fd7c 	bl	8010b90 <strncmp>
 800f098:	b980      	cbnz	r0, 800f0bc <__gethex+0xd0>
 800f09a:	b94d      	cbnz	r5, 800f0b0 <__gethex+0xc4>
 800f09c:	eb06 050a 	add.w	r5, r6, sl
 800f0a0:	462a      	mov	r2, r5
 800f0a2:	4616      	mov	r6, r2
 800f0a4:	3201      	adds	r2, #1
 800f0a6:	7830      	ldrb	r0, [r6, #0]
 800f0a8:	f7ff ff8a 	bl	800efc0 <__hexdig_fun>
 800f0ac:	2800      	cmp	r0, #0
 800f0ae:	d1f8      	bne.n	800f0a2 <__gethex+0xb6>
 800f0b0:	1bad      	subs	r5, r5, r6
 800f0b2:	00ad      	lsls	r5, r5, #2
 800f0b4:	e004      	b.n	800f0c0 <__gethex+0xd4>
 800f0b6:	2400      	movs	r4, #0
 800f0b8:	4625      	mov	r5, r4
 800f0ba:	e7e0      	b.n	800f07e <__gethex+0x92>
 800f0bc:	2d00      	cmp	r5, #0
 800f0be:	d1f7      	bne.n	800f0b0 <__gethex+0xc4>
 800f0c0:	7833      	ldrb	r3, [r6, #0]
 800f0c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f0c6:	2b50      	cmp	r3, #80	; 0x50
 800f0c8:	d13b      	bne.n	800f142 <__gethex+0x156>
 800f0ca:	7873      	ldrb	r3, [r6, #1]
 800f0cc:	2b2b      	cmp	r3, #43	; 0x2b
 800f0ce:	d02c      	beq.n	800f12a <__gethex+0x13e>
 800f0d0:	2b2d      	cmp	r3, #45	; 0x2d
 800f0d2:	d02e      	beq.n	800f132 <__gethex+0x146>
 800f0d4:	1c71      	adds	r1, r6, #1
 800f0d6:	f04f 0900 	mov.w	r9, #0
 800f0da:	7808      	ldrb	r0, [r1, #0]
 800f0dc:	f7ff ff70 	bl	800efc0 <__hexdig_fun>
 800f0e0:	1e43      	subs	r3, r0, #1
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	2b18      	cmp	r3, #24
 800f0e6:	d82c      	bhi.n	800f142 <__gethex+0x156>
 800f0e8:	f1a0 0210 	sub.w	r2, r0, #16
 800f0ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f0f0:	f7ff ff66 	bl	800efc0 <__hexdig_fun>
 800f0f4:	1e43      	subs	r3, r0, #1
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	2b18      	cmp	r3, #24
 800f0fa:	d91d      	bls.n	800f138 <__gethex+0x14c>
 800f0fc:	f1b9 0f00 	cmp.w	r9, #0
 800f100:	d000      	beq.n	800f104 <__gethex+0x118>
 800f102:	4252      	negs	r2, r2
 800f104:	4415      	add	r5, r2
 800f106:	f8cb 1000 	str.w	r1, [fp]
 800f10a:	b1e4      	cbz	r4, 800f146 <__gethex+0x15a>
 800f10c:	9b00      	ldr	r3, [sp, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	bf14      	ite	ne
 800f112:	2700      	movne	r7, #0
 800f114:	2706      	moveq	r7, #6
 800f116:	4638      	mov	r0, r7
 800f118:	b009      	add	sp, #36	; 0x24
 800f11a:	ecbd 8b02 	vpop	{d8}
 800f11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f122:	463e      	mov	r6, r7
 800f124:	4625      	mov	r5, r4
 800f126:	2401      	movs	r4, #1
 800f128:	e7ca      	b.n	800f0c0 <__gethex+0xd4>
 800f12a:	f04f 0900 	mov.w	r9, #0
 800f12e:	1cb1      	adds	r1, r6, #2
 800f130:	e7d3      	b.n	800f0da <__gethex+0xee>
 800f132:	f04f 0901 	mov.w	r9, #1
 800f136:	e7fa      	b.n	800f12e <__gethex+0x142>
 800f138:	230a      	movs	r3, #10
 800f13a:	fb03 0202 	mla	r2, r3, r2, r0
 800f13e:	3a10      	subs	r2, #16
 800f140:	e7d4      	b.n	800f0ec <__gethex+0x100>
 800f142:	4631      	mov	r1, r6
 800f144:	e7df      	b.n	800f106 <__gethex+0x11a>
 800f146:	1bf3      	subs	r3, r6, r7
 800f148:	3b01      	subs	r3, #1
 800f14a:	4621      	mov	r1, r4
 800f14c:	2b07      	cmp	r3, #7
 800f14e:	dc0b      	bgt.n	800f168 <__gethex+0x17c>
 800f150:	ee18 0a10 	vmov	r0, s16
 800f154:	f000 fa82 	bl	800f65c <_Balloc>
 800f158:	4604      	mov	r4, r0
 800f15a:	b940      	cbnz	r0, 800f16e <__gethex+0x182>
 800f15c:	4b5d      	ldr	r3, [pc, #372]	; (800f2d4 <__gethex+0x2e8>)
 800f15e:	4602      	mov	r2, r0
 800f160:	21de      	movs	r1, #222	; 0xde
 800f162:	485d      	ldr	r0, [pc, #372]	; (800f2d8 <__gethex+0x2ec>)
 800f164:	f001 fde4 	bl	8010d30 <__assert_func>
 800f168:	3101      	adds	r1, #1
 800f16a:	105b      	asrs	r3, r3, #1
 800f16c:	e7ee      	b.n	800f14c <__gethex+0x160>
 800f16e:	f100 0914 	add.w	r9, r0, #20
 800f172:	f04f 0b00 	mov.w	fp, #0
 800f176:	f1ca 0301 	rsb	r3, sl, #1
 800f17a:	f8cd 9008 	str.w	r9, [sp, #8]
 800f17e:	f8cd b000 	str.w	fp, [sp]
 800f182:	9306      	str	r3, [sp, #24]
 800f184:	42b7      	cmp	r7, r6
 800f186:	d340      	bcc.n	800f20a <__gethex+0x21e>
 800f188:	9802      	ldr	r0, [sp, #8]
 800f18a:	9b00      	ldr	r3, [sp, #0]
 800f18c:	f840 3b04 	str.w	r3, [r0], #4
 800f190:	eba0 0009 	sub.w	r0, r0, r9
 800f194:	1080      	asrs	r0, r0, #2
 800f196:	0146      	lsls	r6, r0, #5
 800f198:	6120      	str	r0, [r4, #16]
 800f19a:	4618      	mov	r0, r3
 800f19c:	f000 fb50 	bl	800f840 <__hi0bits>
 800f1a0:	1a30      	subs	r0, r6, r0
 800f1a2:	f8d8 6000 	ldr.w	r6, [r8]
 800f1a6:	42b0      	cmp	r0, r6
 800f1a8:	dd63      	ble.n	800f272 <__gethex+0x286>
 800f1aa:	1b87      	subs	r7, r0, r6
 800f1ac:	4639      	mov	r1, r7
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f000 fef4 	bl	800ff9c <__any_on>
 800f1b4:	4682      	mov	sl, r0
 800f1b6:	b1a8      	cbz	r0, 800f1e4 <__gethex+0x1f8>
 800f1b8:	1e7b      	subs	r3, r7, #1
 800f1ba:	1159      	asrs	r1, r3, #5
 800f1bc:	f003 021f 	and.w	r2, r3, #31
 800f1c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f1c4:	f04f 0a01 	mov.w	sl, #1
 800f1c8:	fa0a f202 	lsl.w	r2, sl, r2
 800f1cc:	420a      	tst	r2, r1
 800f1ce:	d009      	beq.n	800f1e4 <__gethex+0x1f8>
 800f1d0:	4553      	cmp	r3, sl
 800f1d2:	dd05      	ble.n	800f1e0 <__gethex+0x1f4>
 800f1d4:	1eb9      	subs	r1, r7, #2
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f000 fee0 	bl	800ff9c <__any_on>
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	d145      	bne.n	800f26c <__gethex+0x280>
 800f1e0:	f04f 0a02 	mov.w	sl, #2
 800f1e4:	4639      	mov	r1, r7
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	f7ff fe98 	bl	800ef1c <rshift>
 800f1ec:	443d      	add	r5, r7
 800f1ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f1f2:	42ab      	cmp	r3, r5
 800f1f4:	da4c      	bge.n	800f290 <__gethex+0x2a4>
 800f1f6:	ee18 0a10 	vmov	r0, s16
 800f1fa:	4621      	mov	r1, r4
 800f1fc:	f000 fa6e 	bl	800f6dc <_Bfree>
 800f200:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f202:	2300      	movs	r3, #0
 800f204:	6013      	str	r3, [r2, #0]
 800f206:	27a3      	movs	r7, #163	; 0xa3
 800f208:	e785      	b.n	800f116 <__gethex+0x12a>
 800f20a:	1e73      	subs	r3, r6, #1
 800f20c:	9a05      	ldr	r2, [sp, #20]
 800f20e:	9303      	str	r3, [sp, #12]
 800f210:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f214:	4293      	cmp	r3, r2
 800f216:	d019      	beq.n	800f24c <__gethex+0x260>
 800f218:	f1bb 0f20 	cmp.w	fp, #32
 800f21c:	d107      	bne.n	800f22e <__gethex+0x242>
 800f21e:	9b02      	ldr	r3, [sp, #8]
 800f220:	9a00      	ldr	r2, [sp, #0]
 800f222:	f843 2b04 	str.w	r2, [r3], #4
 800f226:	9302      	str	r3, [sp, #8]
 800f228:	2300      	movs	r3, #0
 800f22a:	9300      	str	r3, [sp, #0]
 800f22c:	469b      	mov	fp, r3
 800f22e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f232:	f7ff fec5 	bl	800efc0 <__hexdig_fun>
 800f236:	9b00      	ldr	r3, [sp, #0]
 800f238:	f000 000f 	and.w	r0, r0, #15
 800f23c:	fa00 f00b 	lsl.w	r0, r0, fp
 800f240:	4303      	orrs	r3, r0
 800f242:	9300      	str	r3, [sp, #0]
 800f244:	f10b 0b04 	add.w	fp, fp, #4
 800f248:	9b03      	ldr	r3, [sp, #12]
 800f24a:	e00d      	b.n	800f268 <__gethex+0x27c>
 800f24c:	9b03      	ldr	r3, [sp, #12]
 800f24e:	9a06      	ldr	r2, [sp, #24]
 800f250:	4413      	add	r3, r2
 800f252:	42bb      	cmp	r3, r7
 800f254:	d3e0      	bcc.n	800f218 <__gethex+0x22c>
 800f256:	4618      	mov	r0, r3
 800f258:	9901      	ldr	r1, [sp, #4]
 800f25a:	9307      	str	r3, [sp, #28]
 800f25c:	4652      	mov	r2, sl
 800f25e:	f001 fc97 	bl	8010b90 <strncmp>
 800f262:	9b07      	ldr	r3, [sp, #28]
 800f264:	2800      	cmp	r0, #0
 800f266:	d1d7      	bne.n	800f218 <__gethex+0x22c>
 800f268:	461e      	mov	r6, r3
 800f26a:	e78b      	b.n	800f184 <__gethex+0x198>
 800f26c:	f04f 0a03 	mov.w	sl, #3
 800f270:	e7b8      	b.n	800f1e4 <__gethex+0x1f8>
 800f272:	da0a      	bge.n	800f28a <__gethex+0x29e>
 800f274:	1a37      	subs	r7, r6, r0
 800f276:	4621      	mov	r1, r4
 800f278:	ee18 0a10 	vmov	r0, s16
 800f27c:	463a      	mov	r2, r7
 800f27e:	f000 fc49 	bl	800fb14 <__lshift>
 800f282:	1bed      	subs	r5, r5, r7
 800f284:	4604      	mov	r4, r0
 800f286:	f100 0914 	add.w	r9, r0, #20
 800f28a:	f04f 0a00 	mov.w	sl, #0
 800f28e:	e7ae      	b.n	800f1ee <__gethex+0x202>
 800f290:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f294:	42a8      	cmp	r0, r5
 800f296:	dd72      	ble.n	800f37e <__gethex+0x392>
 800f298:	1b45      	subs	r5, r0, r5
 800f29a:	42ae      	cmp	r6, r5
 800f29c:	dc36      	bgt.n	800f30c <__gethex+0x320>
 800f29e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f2a2:	2b02      	cmp	r3, #2
 800f2a4:	d02a      	beq.n	800f2fc <__gethex+0x310>
 800f2a6:	2b03      	cmp	r3, #3
 800f2a8:	d02c      	beq.n	800f304 <__gethex+0x318>
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d11c      	bne.n	800f2e8 <__gethex+0x2fc>
 800f2ae:	42ae      	cmp	r6, r5
 800f2b0:	d11a      	bne.n	800f2e8 <__gethex+0x2fc>
 800f2b2:	2e01      	cmp	r6, #1
 800f2b4:	d112      	bne.n	800f2dc <__gethex+0x2f0>
 800f2b6:	9a04      	ldr	r2, [sp, #16]
 800f2b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f2bc:	6013      	str	r3, [r2, #0]
 800f2be:	2301      	movs	r3, #1
 800f2c0:	6123      	str	r3, [r4, #16]
 800f2c2:	f8c9 3000 	str.w	r3, [r9]
 800f2c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f2c8:	2762      	movs	r7, #98	; 0x62
 800f2ca:	601c      	str	r4, [r3, #0]
 800f2cc:	e723      	b.n	800f116 <__gethex+0x12a>
 800f2ce:	bf00      	nop
 800f2d0:	08014668 	.word	0x08014668
 800f2d4:	080145f0 	.word	0x080145f0
 800f2d8:	08014601 	.word	0x08014601
 800f2dc:	1e71      	subs	r1, r6, #1
 800f2de:	4620      	mov	r0, r4
 800f2e0:	f000 fe5c 	bl	800ff9c <__any_on>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d1e6      	bne.n	800f2b6 <__gethex+0x2ca>
 800f2e8:	ee18 0a10 	vmov	r0, s16
 800f2ec:	4621      	mov	r1, r4
 800f2ee:	f000 f9f5 	bl	800f6dc <_Bfree>
 800f2f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	6013      	str	r3, [r2, #0]
 800f2f8:	2750      	movs	r7, #80	; 0x50
 800f2fa:	e70c      	b.n	800f116 <__gethex+0x12a>
 800f2fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d1f2      	bne.n	800f2e8 <__gethex+0x2fc>
 800f302:	e7d8      	b.n	800f2b6 <__gethex+0x2ca>
 800f304:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f306:	2b00      	cmp	r3, #0
 800f308:	d1d5      	bne.n	800f2b6 <__gethex+0x2ca>
 800f30a:	e7ed      	b.n	800f2e8 <__gethex+0x2fc>
 800f30c:	1e6f      	subs	r7, r5, #1
 800f30e:	f1ba 0f00 	cmp.w	sl, #0
 800f312:	d131      	bne.n	800f378 <__gethex+0x38c>
 800f314:	b127      	cbz	r7, 800f320 <__gethex+0x334>
 800f316:	4639      	mov	r1, r7
 800f318:	4620      	mov	r0, r4
 800f31a:	f000 fe3f 	bl	800ff9c <__any_on>
 800f31e:	4682      	mov	sl, r0
 800f320:	117b      	asrs	r3, r7, #5
 800f322:	2101      	movs	r1, #1
 800f324:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f328:	f007 071f 	and.w	r7, r7, #31
 800f32c:	fa01 f707 	lsl.w	r7, r1, r7
 800f330:	421f      	tst	r7, r3
 800f332:	4629      	mov	r1, r5
 800f334:	4620      	mov	r0, r4
 800f336:	bf18      	it	ne
 800f338:	f04a 0a02 	orrne.w	sl, sl, #2
 800f33c:	1b76      	subs	r6, r6, r5
 800f33e:	f7ff fded 	bl	800ef1c <rshift>
 800f342:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f346:	2702      	movs	r7, #2
 800f348:	f1ba 0f00 	cmp.w	sl, #0
 800f34c:	d048      	beq.n	800f3e0 <__gethex+0x3f4>
 800f34e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f352:	2b02      	cmp	r3, #2
 800f354:	d015      	beq.n	800f382 <__gethex+0x396>
 800f356:	2b03      	cmp	r3, #3
 800f358:	d017      	beq.n	800f38a <__gethex+0x39e>
 800f35a:	2b01      	cmp	r3, #1
 800f35c:	d109      	bne.n	800f372 <__gethex+0x386>
 800f35e:	f01a 0f02 	tst.w	sl, #2
 800f362:	d006      	beq.n	800f372 <__gethex+0x386>
 800f364:	f8d9 0000 	ldr.w	r0, [r9]
 800f368:	ea4a 0a00 	orr.w	sl, sl, r0
 800f36c:	f01a 0f01 	tst.w	sl, #1
 800f370:	d10e      	bne.n	800f390 <__gethex+0x3a4>
 800f372:	f047 0710 	orr.w	r7, r7, #16
 800f376:	e033      	b.n	800f3e0 <__gethex+0x3f4>
 800f378:	f04f 0a01 	mov.w	sl, #1
 800f37c:	e7d0      	b.n	800f320 <__gethex+0x334>
 800f37e:	2701      	movs	r7, #1
 800f380:	e7e2      	b.n	800f348 <__gethex+0x35c>
 800f382:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f384:	f1c3 0301 	rsb	r3, r3, #1
 800f388:	9315      	str	r3, [sp, #84]	; 0x54
 800f38a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d0f0      	beq.n	800f372 <__gethex+0x386>
 800f390:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f394:	f104 0314 	add.w	r3, r4, #20
 800f398:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f39c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f3a0:	f04f 0c00 	mov.w	ip, #0
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f3ae:	d01c      	beq.n	800f3ea <__gethex+0x3fe>
 800f3b0:	3201      	adds	r2, #1
 800f3b2:	6002      	str	r2, [r0, #0]
 800f3b4:	2f02      	cmp	r7, #2
 800f3b6:	f104 0314 	add.w	r3, r4, #20
 800f3ba:	d13f      	bne.n	800f43c <__gethex+0x450>
 800f3bc:	f8d8 2000 	ldr.w	r2, [r8]
 800f3c0:	3a01      	subs	r2, #1
 800f3c2:	42b2      	cmp	r2, r6
 800f3c4:	d10a      	bne.n	800f3dc <__gethex+0x3f0>
 800f3c6:	1171      	asrs	r1, r6, #5
 800f3c8:	2201      	movs	r2, #1
 800f3ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f3ce:	f006 061f 	and.w	r6, r6, #31
 800f3d2:	fa02 f606 	lsl.w	r6, r2, r6
 800f3d6:	421e      	tst	r6, r3
 800f3d8:	bf18      	it	ne
 800f3da:	4617      	movne	r7, r2
 800f3dc:	f047 0720 	orr.w	r7, r7, #32
 800f3e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f3e2:	601c      	str	r4, [r3, #0]
 800f3e4:	9b04      	ldr	r3, [sp, #16]
 800f3e6:	601d      	str	r5, [r3, #0]
 800f3e8:	e695      	b.n	800f116 <__gethex+0x12a>
 800f3ea:	4299      	cmp	r1, r3
 800f3ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800f3f0:	d8d8      	bhi.n	800f3a4 <__gethex+0x3b8>
 800f3f2:	68a3      	ldr	r3, [r4, #8]
 800f3f4:	459b      	cmp	fp, r3
 800f3f6:	db19      	blt.n	800f42c <__gethex+0x440>
 800f3f8:	6861      	ldr	r1, [r4, #4]
 800f3fa:	ee18 0a10 	vmov	r0, s16
 800f3fe:	3101      	adds	r1, #1
 800f400:	f000 f92c 	bl	800f65c <_Balloc>
 800f404:	4681      	mov	r9, r0
 800f406:	b918      	cbnz	r0, 800f410 <__gethex+0x424>
 800f408:	4b1a      	ldr	r3, [pc, #104]	; (800f474 <__gethex+0x488>)
 800f40a:	4602      	mov	r2, r0
 800f40c:	2184      	movs	r1, #132	; 0x84
 800f40e:	e6a8      	b.n	800f162 <__gethex+0x176>
 800f410:	6922      	ldr	r2, [r4, #16]
 800f412:	3202      	adds	r2, #2
 800f414:	f104 010c 	add.w	r1, r4, #12
 800f418:	0092      	lsls	r2, r2, #2
 800f41a:	300c      	adds	r0, #12
 800f41c:	f7fd f8f8 	bl	800c610 <memcpy>
 800f420:	4621      	mov	r1, r4
 800f422:	ee18 0a10 	vmov	r0, s16
 800f426:	f000 f959 	bl	800f6dc <_Bfree>
 800f42a:	464c      	mov	r4, r9
 800f42c:	6923      	ldr	r3, [r4, #16]
 800f42e:	1c5a      	adds	r2, r3, #1
 800f430:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f434:	6122      	str	r2, [r4, #16]
 800f436:	2201      	movs	r2, #1
 800f438:	615a      	str	r2, [r3, #20]
 800f43a:	e7bb      	b.n	800f3b4 <__gethex+0x3c8>
 800f43c:	6922      	ldr	r2, [r4, #16]
 800f43e:	455a      	cmp	r2, fp
 800f440:	dd0b      	ble.n	800f45a <__gethex+0x46e>
 800f442:	2101      	movs	r1, #1
 800f444:	4620      	mov	r0, r4
 800f446:	f7ff fd69 	bl	800ef1c <rshift>
 800f44a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f44e:	3501      	adds	r5, #1
 800f450:	42ab      	cmp	r3, r5
 800f452:	f6ff aed0 	blt.w	800f1f6 <__gethex+0x20a>
 800f456:	2701      	movs	r7, #1
 800f458:	e7c0      	b.n	800f3dc <__gethex+0x3f0>
 800f45a:	f016 061f 	ands.w	r6, r6, #31
 800f45e:	d0fa      	beq.n	800f456 <__gethex+0x46a>
 800f460:	4453      	add	r3, sl
 800f462:	f1c6 0620 	rsb	r6, r6, #32
 800f466:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f46a:	f000 f9e9 	bl	800f840 <__hi0bits>
 800f46e:	42b0      	cmp	r0, r6
 800f470:	dbe7      	blt.n	800f442 <__gethex+0x456>
 800f472:	e7f0      	b.n	800f456 <__gethex+0x46a>
 800f474:	080145f0 	.word	0x080145f0

0800f478 <L_shift>:
 800f478:	f1c2 0208 	rsb	r2, r2, #8
 800f47c:	0092      	lsls	r2, r2, #2
 800f47e:	b570      	push	{r4, r5, r6, lr}
 800f480:	f1c2 0620 	rsb	r6, r2, #32
 800f484:	6843      	ldr	r3, [r0, #4]
 800f486:	6804      	ldr	r4, [r0, #0]
 800f488:	fa03 f506 	lsl.w	r5, r3, r6
 800f48c:	432c      	orrs	r4, r5
 800f48e:	40d3      	lsrs	r3, r2
 800f490:	6004      	str	r4, [r0, #0]
 800f492:	f840 3f04 	str.w	r3, [r0, #4]!
 800f496:	4288      	cmp	r0, r1
 800f498:	d3f4      	bcc.n	800f484 <L_shift+0xc>
 800f49a:	bd70      	pop	{r4, r5, r6, pc}

0800f49c <__match>:
 800f49c:	b530      	push	{r4, r5, lr}
 800f49e:	6803      	ldr	r3, [r0, #0]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4a6:	b914      	cbnz	r4, 800f4ae <__match+0x12>
 800f4a8:	6003      	str	r3, [r0, #0]
 800f4aa:	2001      	movs	r0, #1
 800f4ac:	bd30      	pop	{r4, r5, pc}
 800f4ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f4b6:	2d19      	cmp	r5, #25
 800f4b8:	bf98      	it	ls
 800f4ba:	3220      	addls	r2, #32
 800f4bc:	42a2      	cmp	r2, r4
 800f4be:	d0f0      	beq.n	800f4a2 <__match+0x6>
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	e7f3      	b.n	800f4ac <__match+0x10>

0800f4c4 <__hexnan>:
 800f4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4c8:	680b      	ldr	r3, [r1, #0]
 800f4ca:	115e      	asrs	r6, r3, #5
 800f4cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f4d0:	f013 031f 	ands.w	r3, r3, #31
 800f4d4:	b087      	sub	sp, #28
 800f4d6:	bf18      	it	ne
 800f4d8:	3604      	addne	r6, #4
 800f4da:	2500      	movs	r5, #0
 800f4dc:	1f37      	subs	r7, r6, #4
 800f4de:	4690      	mov	r8, r2
 800f4e0:	6802      	ldr	r2, [r0, #0]
 800f4e2:	9301      	str	r3, [sp, #4]
 800f4e4:	4682      	mov	sl, r0
 800f4e6:	f846 5c04 	str.w	r5, [r6, #-4]
 800f4ea:	46b9      	mov	r9, r7
 800f4ec:	463c      	mov	r4, r7
 800f4ee:	9502      	str	r5, [sp, #8]
 800f4f0:	46ab      	mov	fp, r5
 800f4f2:	7851      	ldrb	r1, [r2, #1]
 800f4f4:	1c53      	adds	r3, r2, #1
 800f4f6:	9303      	str	r3, [sp, #12]
 800f4f8:	b341      	cbz	r1, 800f54c <__hexnan+0x88>
 800f4fa:	4608      	mov	r0, r1
 800f4fc:	9205      	str	r2, [sp, #20]
 800f4fe:	9104      	str	r1, [sp, #16]
 800f500:	f7ff fd5e 	bl	800efc0 <__hexdig_fun>
 800f504:	2800      	cmp	r0, #0
 800f506:	d14f      	bne.n	800f5a8 <__hexnan+0xe4>
 800f508:	9904      	ldr	r1, [sp, #16]
 800f50a:	9a05      	ldr	r2, [sp, #20]
 800f50c:	2920      	cmp	r1, #32
 800f50e:	d818      	bhi.n	800f542 <__hexnan+0x7e>
 800f510:	9b02      	ldr	r3, [sp, #8]
 800f512:	459b      	cmp	fp, r3
 800f514:	dd13      	ble.n	800f53e <__hexnan+0x7a>
 800f516:	454c      	cmp	r4, r9
 800f518:	d206      	bcs.n	800f528 <__hexnan+0x64>
 800f51a:	2d07      	cmp	r5, #7
 800f51c:	dc04      	bgt.n	800f528 <__hexnan+0x64>
 800f51e:	462a      	mov	r2, r5
 800f520:	4649      	mov	r1, r9
 800f522:	4620      	mov	r0, r4
 800f524:	f7ff ffa8 	bl	800f478 <L_shift>
 800f528:	4544      	cmp	r4, r8
 800f52a:	d950      	bls.n	800f5ce <__hexnan+0x10a>
 800f52c:	2300      	movs	r3, #0
 800f52e:	f1a4 0904 	sub.w	r9, r4, #4
 800f532:	f844 3c04 	str.w	r3, [r4, #-4]
 800f536:	f8cd b008 	str.w	fp, [sp, #8]
 800f53a:	464c      	mov	r4, r9
 800f53c:	461d      	mov	r5, r3
 800f53e:	9a03      	ldr	r2, [sp, #12]
 800f540:	e7d7      	b.n	800f4f2 <__hexnan+0x2e>
 800f542:	2929      	cmp	r1, #41	; 0x29
 800f544:	d156      	bne.n	800f5f4 <__hexnan+0x130>
 800f546:	3202      	adds	r2, #2
 800f548:	f8ca 2000 	str.w	r2, [sl]
 800f54c:	f1bb 0f00 	cmp.w	fp, #0
 800f550:	d050      	beq.n	800f5f4 <__hexnan+0x130>
 800f552:	454c      	cmp	r4, r9
 800f554:	d206      	bcs.n	800f564 <__hexnan+0xa0>
 800f556:	2d07      	cmp	r5, #7
 800f558:	dc04      	bgt.n	800f564 <__hexnan+0xa0>
 800f55a:	462a      	mov	r2, r5
 800f55c:	4649      	mov	r1, r9
 800f55e:	4620      	mov	r0, r4
 800f560:	f7ff ff8a 	bl	800f478 <L_shift>
 800f564:	4544      	cmp	r4, r8
 800f566:	d934      	bls.n	800f5d2 <__hexnan+0x10e>
 800f568:	f1a8 0204 	sub.w	r2, r8, #4
 800f56c:	4623      	mov	r3, r4
 800f56e:	f853 1b04 	ldr.w	r1, [r3], #4
 800f572:	f842 1f04 	str.w	r1, [r2, #4]!
 800f576:	429f      	cmp	r7, r3
 800f578:	d2f9      	bcs.n	800f56e <__hexnan+0xaa>
 800f57a:	1b3b      	subs	r3, r7, r4
 800f57c:	f023 0303 	bic.w	r3, r3, #3
 800f580:	3304      	adds	r3, #4
 800f582:	3401      	adds	r4, #1
 800f584:	3e03      	subs	r6, #3
 800f586:	42b4      	cmp	r4, r6
 800f588:	bf88      	it	hi
 800f58a:	2304      	movhi	r3, #4
 800f58c:	4443      	add	r3, r8
 800f58e:	2200      	movs	r2, #0
 800f590:	f843 2b04 	str.w	r2, [r3], #4
 800f594:	429f      	cmp	r7, r3
 800f596:	d2fb      	bcs.n	800f590 <__hexnan+0xcc>
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	b91b      	cbnz	r3, 800f5a4 <__hexnan+0xe0>
 800f59c:	4547      	cmp	r7, r8
 800f59e:	d127      	bne.n	800f5f0 <__hexnan+0x12c>
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	603b      	str	r3, [r7, #0]
 800f5a4:	2005      	movs	r0, #5
 800f5a6:	e026      	b.n	800f5f6 <__hexnan+0x132>
 800f5a8:	3501      	adds	r5, #1
 800f5aa:	2d08      	cmp	r5, #8
 800f5ac:	f10b 0b01 	add.w	fp, fp, #1
 800f5b0:	dd06      	ble.n	800f5c0 <__hexnan+0xfc>
 800f5b2:	4544      	cmp	r4, r8
 800f5b4:	d9c3      	bls.n	800f53e <__hexnan+0x7a>
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800f5bc:	2501      	movs	r5, #1
 800f5be:	3c04      	subs	r4, #4
 800f5c0:	6822      	ldr	r2, [r4, #0]
 800f5c2:	f000 000f 	and.w	r0, r0, #15
 800f5c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f5ca:	6022      	str	r2, [r4, #0]
 800f5cc:	e7b7      	b.n	800f53e <__hexnan+0x7a>
 800f5ce:	2508      	movs	r5, #8
 800f5d0:	e7b5      	b.n	800f53e <__hexnan+0x7a>
 800f5d2:	9b01      	ldr	r3, [sp, #4]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d0df      	beq.n	800f598 <__hexnan+0xd4>
 800f5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f5dc:	f1c3 0320 	rsb	r3, r3, #32
 800f5e0:	fa22 f303 	lsr.w	r3, r2, r3
 800f5e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f5e8:	401a      	ands	r2, r3
 800f5ea:	f846 2c04 	str.w	r2, [r6, #-4]
 800f5ee:	e7d3      	b.n	800f598 <__hexnan+0xd4>
 800f5f0:	3f04      	subs	r7, #4
 800f5f2:	e7d1      	b.n	800f598 <__hexnan+0xd4>
 800f5f4:	2004      	movs	r0, #4
 800f5f6:	b007      	add	sp, #28
 800f5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f5fc <_localeconv_r>:
 800f5fc:	4800      	ldr	r0, [pc, #0]	; (800f600 <_localeconv_r+0x4>)
 800f5fe:	4770      	bx	lr
 800f600:	20000194 	.word	0x20000194

0800f604 <_lseek_r>:
 800f604:	b538      	push	{r3, r4, r5, lr}
 800f606:	4d07      	ldr	r5, [pc, #28]	; (800f624 <_lseek_r+0x20>)
 800f608:	4604      	mov	r4, r0
 800f60a:	4608      	mov	r0, r1
 800f60c:	4611      	mov	r1, r2
 800f60e:	2200      	movs	r2, #0
 800f610:	602a      	str	r2, [r5, #0]
 800f612:	461a      	mov	r2, r3
 800f614:	f7f6 fdcc 	bl	80061b0 <_lseek>
 800f618:	1c43      	adds	r3, r0, #1
 800f61a:	d102      	bne.n	800f622 <_lseek_r+0x1e>
 800f61c:	682b      	ldr	r3, [r5, #0]
 800f61e:	b103      	cbz	r3, 800f622 <_lseek_r+0x1e>
 800f620:	6023      	str	r3, [r4, #0]
 800f622:	bd38      	pop	{r3, r4, r5, pc}
 800f624:	20013b68 	.word	0x20013b68

0800f628 <malloc>:
 800f628:	4b02      	ldr	r3, [pc, #8]	; (800f634 <malloc+0xc>)
 800f62a:	4601      	mov	r1, r0
 800f62c:	6818      	ldr	r0, [r3, #0]
 800f62e:	f000 bd59 	b.w	80100e4 <_malloc_r>
 800f632:	bf00      	nop
 800f634:	2000003c 	.word	0x2000003c

0800f638 <__ascii_mbtowc>:
 800f638:	b082      	sub	sp, #8
 800f63a:	b901      	cbnz	r1, 800f63e <__ascii_mbtowc+0x6>
 800f63c:	a901      	add	r1, sp, #4
 800f63e:	b142      	cbz	r2, 800f652 <__ascii_mbtowc+0x1a>
 800f640:	b14b      	cbz	r3, 800f656 <__ascii_mbtowc+0x1e>
 800f642:	7813      	ldrb	r3, [r2, #0]
 800f644:	600b      	str	r3, [r1, #0]
 800f646:	7812      	ldrb	r2, [r2, #0]
 800f648:	1e10      	subs	r0, r2, #0
 800f64a:	bf18      	it	ne
 800f64c:	2001      	movne	r0, #1
 800f64e:	b002      	add	sp, #8
 800f650:	4770      	bx	lr
 800f652:	4610      	mov	r0, r2
 800f654:	e7fb      	b.n	800f64e <__ascii_mbtowc+0x16>
 800f656:	f06f 0001 	mvn.w	r0, #1
 800f65a:	e7f8      	b.n	800f64e <__ascii_mbtowc+0x16>

0800f65c <_Balloc>:
 800f65c:	b570      	push	{r4, r5, r6, lr}
 800f65e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f660:	4604      	mov	r4, r0
 800f662:	460d      	mov	r5, r1
 800f664:	b976      	cbnz	r6, 800f684 <_Balloc+0x28>
 800f666:	2010      	movs	r0, #16
 800f668:	f7ff ffde 	bl	800f628 <malloc>
 800f66c:	4602      	mov	r2, r0
 800f66e:	6260      	str	r0, [r4, #36]	; 0x24
 800f670:	b920      	cbnz	r0, 800f67c <_Balloc+0x20>
 800f672:	4b18      	ldr	r3, [pc, #96]	; (800f6d4 <_Balloc+0x78>)
 800f674:	4818      	ldr	r0, [pc, #96]	; (800f6d8 <_Balloc+0x7c>)
 800f676:	2166      	movs	r1, #102	; 0x66
 800f678:	f001 fb5a 	bl	8010d30 <__assert_func>
 800f67c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f680:	6006      	str	r6, [r0, #0]
 800f682:	60c6      	str	r6, [r0, #12]
 800f684:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f686:	68f3      	ldr	r3, [r6, #12]
 800f688:	b183      	cbz	r3, 800f6ac <_Balloc+0x50>
 800f68a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f692:	b9b8      	cbnz	r0, 800f6c4 <_Balloc+0x68>
 800f694:	2101      	movs	r1, #1
 800f696:	fa01 f605 	lsl.w	r6, r1, r5
 800f69a:	1d72      	adds	r2, r6, #5
 800f69c:	0092      	lsls	r2, r2, #2
 800f69e:	4620      	mov	r0, r4
 800f6a0:	f000 fc9d 	bl	800ffde <_calloc_r>
 800f6a4:	b160      	cbz	r0, 800f6c0 <_Balloc+0x64>
 800f6a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f6aa:	e00e      	b.n	800f6ca <_Balloc+0x6e>
 800f6ac:	2221      	movs	r2, #33	; 0x21
 800f6ae:	2104      	movs	r1, #4
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f000 fc94 	bl	800ffde <_calloc_r>
 800f6b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6b8:	60f0      	str	r0, [r6, #12]
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d1e4      	bne.n	800f68a <_Balloc+0x2e>
 800f6c0:	2000      	movs	r0, #0
 800f6c2:	bd70      	pop	{r4, r5, r6, pc}
 800f6c4:	6802      	ldr	r2, [r0, #0]
 800f6c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f6d0:	e7f7      	b.n	800f6c2 <_Balloc+0x66>
 800f6d2:	bf00      	nop
 800f6d4:	0801457e 	.word	0x0801457e
 800f6d8:	0801467c 	.word	0x0801467c

0800f6dc <_Bfree>:
 800f6dc:	b570      	push	{r4, r5, r6, lr}
 800f6de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f6e0:	4605      	mov	r5, r0
 800f6e2:	460c      	mov	r4, r1
 800f6e4:	b976      	cbnz	r6, 800f704 <_Bfree+0x28>
 800f6e6:	2010      	movs	r0, #16
 800f6e8:	f7ff ff9e 	bl	800f628 <malloc>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	6268      	str	r0, [r5, #36]	; 0x24
 800f6f0:	b920      	cbnz	r0, 800f6fc <_Bfree+0x20>
 800f6f2:	4b09      	ldr	r3, [pc, #36]	; (800f718 <_Bfree+0x3c>)
 800f6f4:	4809      	ldr	r0, [pc, #36]	; (800f71c <_Bfree+0x40>)
 800f6f6:	218a      	movs	r1, #138	; 0x8a
 800f6f8:	f001 fb1a 	bl	8010d30 <__assert_func>
 800f6fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f700:	6006      	str	r6, [r0, #0]
 800f702:	60c6      	str	r6, [r0, #12]
 800f704:	b13c      	cbz	r4, 800f716 <_Bfree+0x3a>
 800f706:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f708:	6862      	ldr	r2, [r4, #4]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f710:	6021      	str	r1, [r4, #0]
 800f712:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f716:	bd70      	pop	{r4, r5, r6, pc}
 800f718:	0801457e 	.word	0x0801457e
 800f71c:	0801467c 	.word	0x0801467c

0800f720 <__multadd>:
 800f720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f724:	690d      	ldr	r5, [r1, #16]
 800f726:	4607      	mov	r7, r0
 800f728:	460c      	mov	r4, r1
 800f72a:	461e      	mov	r6, r3
 800f72c:	f101 0c14 	add.w	ip, r1, #20
 800f730:	2000      	movs	r0, #0
 800f732:	f8dc 3000 	ldr.w	r3, [ip]
 800f736:	b299      	uxth	r1, r3
 800f738:	fb02 6101 	mla	r1, r2, r1, r6
 800f73c:	0c1e      	lsrs	r6, r3, #16
 800f73e:	0c0b      	lsrs	r3, r1, #16
 800f740:	fb02 3306 	mla	r3, r2, r6, r3
 800f744:	b289      	uxth	r1, r1
 800f746:	3001      	adds	r0, #1
 800f748:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f74c:	4285      	cmp	r5, r0
 800f74e:	f84c 1b04 	str.w	r1, [ip], #4
 800f752:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f756:	dcec      	bgt.n	800f732 <__multadd+0x12>
 800f758:	b30e      	cbz	r6, 800f79e <__multadd+0x7e>
 800f75a:	68a3      	ldr	r3, [r4, #8]
 800f75c:	42ab      	cmp	r3, r5
 800f75e:	dc19      	bgt.n	800f794 <__multadd+0x74>
 800f760:	6861      	ldr	r1, [r4, #4]
 800f762:	4638      	mov	r0, r7
 800f764:	3101      	adds	r1, #1
 800f766:	f7ff ff79 	bl	800f65c <_Balloc>
 800f76a:	4680      	mov	r8, r0
 800f76c:	b928      	cbnz	r0, 800f77a <__multadd+0x5a>
 800f76e:	4602      	mov	r2, r0
 800f770:	4b0c      	ldr	r3, [pc, #48]	; (800f7a4 <__multadd+0x84>)
 800f772:	480d      	ldr	r0, [pc, #52]	; (800f7a8 <__multadd+0x88>)
 800f774:	21b5      	movs	r1, #181	; 0xb5
 800f776:	f001 fadb 	bl	8010d30 <__assert_func>
 800f77a:	6922      	ldr	r2, [r4, #16]
 800f77c:	3202      	adds	r2, #2
 800f77e:	f104 010c 	add.w	r1, r4, #12
 800f782:	0092      	lsls	r2, r2, #2
 800f784:	300c      	adds	r0, #12
 800f786:	f7fc ff43 	bl	800c610 <memcpy>
 800f78a:	4621      	mov	r1, r4
 800f78c:	4638      	mov	r0, r7
 800f78e:	f7ff ffa5 	bl	800f6dc <_Bfree>
 800f792:	4644      	mov	r4, r8
 800f794:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f798:	3501      	adds	r5, #1
 800f79a:	615e      	str	r6, [r3, #20]
 800f79c:	6125      	str	r5, [r4, #16]
 800f79e:	4620      	mov	r0, r4
 800f7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7a4:	080145f0 	.word	0x080145f0
 800f7a8:	0801467c 	.word	0x0801467c

0800f7ac <__s2b>:
 800f7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7b0:	460c      	mov	r4, r1
 800f7b2:	4615      	mov	r5, r2
 800f7b4:	461f      	mov	r7, r3
 800f7b6:	2209      	movs	r2, #9
 800f7b8:	3308      	adds	r3, #8
 800f7ba:	4606      	mov	r6, r0
 800f7bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7c0:	2100      	movs	r1, #0
 800f7c2:	2201      	movs	r2, #1
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	db09      	blt.n	800f7dc <__s2b+0x30>
 800f7c8:	4630      	mov	r0, r6
 800f7ca:	f7ff ff47 	bl	800f65c <_Balloc>
 800f7ce:	b940      	cbnz	r0, 800f7e2 <__s2b+0x36>
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	4b19      	ldr	r3, [pc, #100]	; (800f838 <__s2b+0x8c>)
 800f7d4:	4819      	ldr	r0, [pc, #100]	; (800f83c <__s2b+0x90>)
 800f7d6:	21ce      	movs	r1, #206	; 0xce
 800f7d8:	f001 faaa 	bl	8010d30 <__assert_func>
 800f7dc:	0052      	lsls	r2, r2, #1
 800f7de:	3101      	adds	r1, #1
 800f7e0:	e7f0      	b.n	800f7c4 <__s2b+0x18>
 800f7e2:	9b08      	ldr	r3, [sp, #32]
 800f7e4:	6143      	str	r3, [r0, #20]
 800f7e6:	2d09      	cmp	r5, #9
 800f7e8:	f04f 0301 	mov.w	r3, #1
 800f7ec:	6103      	str	r3, [r0, #16]
 800f7ee:	dd16      	ble.n	800f81e <__s2b+0x72>
 800f7f0:	f104 0909 	add.w	r9, r4, #9
 800f7f4:	46c8      	mov	r8, r9
 800f7f6:	442c      	add	r4, r5
 800f7f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f7fc:	4601      	mov	r1, r0
 800f7fe:	3b30      	subs	r3, #48	; 0x30
 800f800:	220a      	movs	r2, #10
 800f802:	4630      	mov	r0, r6
 800f804:	f7ff ff8c 	bl	800f720 <__multadd>
 800f808:	45a0      	cmp	r8, r4
 800f80a:	d1f5      	bne.n	800f7f8 <__s2b+0x4c>
 800f80c:	f1a5 0408 	sub.w	r4, r5, #8
 800f810:	444c      	add	r4, r9
 800f812:	1b2d      	subs	r5, r5, r4
 800f814:	1963      	adds	r3, r4, r5
 800f816:	42bb      	cmp	r3, r7
 800f818:	db04      	blt.n	800f824 <__s2b+0x78>
 800f81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f81e:	340a      	adds	r4, #10
 800f820:	2509      	movs	r5, #9
 800f822:	e7f6      	b.n	800f812 <__s2b+0x66>
 800f824:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f828:	4601      	mov	r1, r0
 800f82a:	3b30      	subs	r3, #48	; 0x30
 800f82c:	220a      	movs	r2, #10
 800f82e:	4630      	mov	r0, r6
 800f830:	f7ff ff76 	bl	800f720 <__multadd>
 800f834:	e7ee      	b.n	800f814 <__s2b+0x68>
 800f836:	bf00      	nop
 800f838:	080145f0 	.word	0x080145f0
 800f83c:	0801467c 	.word	0x0801467c

0800f840 <__hi0bits>:
 800f840:	0c03      	lsrs	r3, r0, #16
 800f842:	041b      	lsls	r3, r3, #16
 800f844:	b9d3      	cbnz	r3, 800f87c <__hi0bits+0x3c>
 800f846:	0400      	lsls	r0, r0, #16
 800f848:	2310      	movs	r3, #16
 800f84a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f84e:	bf04      	itt	eq
 800f850:	0200      	lsleq	r0, r0, #8
 800f852:	3308      	addeq	r3, #8
 800f854:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f858:	bf04      	itt	eq
 800f85a:	0100      	lsleq	r0, r0, #4
 800f85c:	3304      	addeq	r3, #4
 800f85e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f862:	bf04      	itt	eq
 800f864:	0080      	lsleq	r0, r0, #2
 800f866:	3302      	addeq	r3, #2
 800f868:	2800      	cmp	r0, #0
 800f86a:	db05      	blt.n	800f878 <__hi0bits+0x38>
 800f86c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f870:	f103 0301 	add.w	r3, r3, #1
 800f874:	bf08      	it	eq
 800f876:	2320      	moveq	r3, #32
 800f878:	4618      	mov	r0, r3
 800f87a:	4770      	bx	lr
 800f87c:	2300      	movs	r3, #0
 800f87e:	e7e4      	b.n	800f84a <__hi0bits+0xa>

0800f880 <__lo0bits>:
 800f880:	6803      	ldr	r3, [r0, #0]
 800f882:	f013 0207 	ands.w	r2, r3, #7
 800f886:	4601      	mov	r1, r0
 800f888:	d00b      	beq.n	800f8a2 <__lo0bits+0x22>
 800f88a:	07da      	lsls	r2, r3, #31
 800f88c:	d423      	bmi.n	800f8d6 <__lo0bits+0x56>
 800f88e:	0798      	lsls	r0, r3, #30
 800f890:	bf49      	itett	mi
 800f892:	085b      	lsrmi	r3, r3, #1
 800f894:	089b      	lsrpl	r3, r3, #2
 800f896:	2001      	movmi	r0, #1
 800f898:	600b      	strmi	r3, [r1, #0]
 800f89a:	bf5c      	itt	pl
 800f89c:	600b      	strpl	r3, [r1, #0]
 800f89e:	2002      	movpl	r0, #2
 800f8a0:	4770      	bx	lr
 800f8a2:	b298      	uxth	r0, r3
 800f8a4:	b9a8      	cbnz	r0, 800f8d2 <__lo0bits+0x52>
 800f8a6:	0c1b      	lsrs	r3, r3, #16
 800f8a8:	2010      	movs	r0, #16
 800f8aa:	b2da      	uxtb	r2, r3
 800f8ac:	b90a      	cbnz	r2, 800f8b2 <__lo0bits+0x32>
 800f8ae:	3008      	adds	r0, #8
 800f8b0:	0a1b      	lsrs	r3, r3, #8
 800f8b2:	071a      	lsls	r2, r3, #28
 800f8b4:	bf04      	itt	eq
 800f8b6:	091b      	lsreq	r3, r3, #4
 800f8b8:	3004      	addeq	r0, #4
 800f8ba:	079a      	lsls	r2, r3, #30
 800f8bc:	bf04      	itt	eq
 800f8be:	089b      	lsreq	r3, r3, #2
 800f8c0:	3002      	addeq	r0, #2
 800f8c2:	07da      	lsls	r2, r3, #31
 800f8c4:	d403      	bmi.n	800f8ce <__lo0bits+0x4e>
 800f8c6:	085b      	lsrs	r3, r3, #1
 800f8c8:	f100 0001 	add.w	r0, r0, #1
 800f8cc:	d005      	beq.n	800f8da <__lo0bits+0x5a>
 800f8ce:	600b      	str	r3, [r1, #0]
 800f8d0:	4770      	bx	lr
 800f8d2:	4610      	mov	r0, r2
 800f8d4:	e7e9      	b.n	800f8aa <__lo0bits+0x2a>
 800f8d6:	2000      	movs	r0, #0
 800f8d8:	4770      	bx	lr
 800f8da:	2020      	movs	r0, #32
 800f8dc:	4770      	bx	lr
	...

0800f8e0 <__i2b>:
 800f8e0:	b510      	push	{r4, lr}
 800f8e2:	460c      	mov	r4, r1
 800f8e4:	2101      	movs	r1, #1
 800f8e6:	f7ff feb9 	bl	800f65c <_Balloc>
 800f8ea:	4602      	mov	r2, r0
 800f8ec:	b928      	cbnz	r0, 800f8fa <__i2b+0x1a>
 800f8ee:	4b05      	ldr	r3, [pc, #20]	; (800f904 <__i2b+0x24>)
 800f8f0:	4805      	ldr	r0, [pc, #20]	; (800f908 <__i2b+0x28>)
 800f8f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f8f6:	f001 fa1b 	bl	8010d30 <__assert_func>
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	6144      	str	r4, [r0, #20]
 800f8fe:	6103      	str	r3, [r0, #16]
 800f900:	bd10      	pop	{r4, pc}
 800f902:	bf00      	nop
 800f904:	080145f0 	.word	0x080145f0
 800f908:	0801467c 	.word	0x0801467c

0800f90c <__multiply>:
 800f90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f910:	4691      	mov	r9, r2
 800f912:	690a      	ldr	r2, [r1, #16]
 800f914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f918:	429a      	cmp	r2, r3
 800f91a:	bfb8      	it	lt
 800f91c:	460b      	movlt	r3, r1
 800f91e:	460c      	mov	r4, r1
 800f920:	bfbc      	itt	lt
 800f922:	464c      	movlt	r4, r9
 800f924:	4699      	movlt	r9, r3
 800f926:	6927      	ldr	r7, [r4, #16]
 800f928:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f92c:	68a3      	ldr	r3, [r4, #8]
 800f92e:	6861      	ldr	r1, [r4, #4]
 800f930:	eb07 060a 	add.w	r6, r7, sl
 800f934:	42b3      	cmp	r3, r6
 800f936:	b085      	sub	sp, #20
 800f938:	bfb8      	it	lt
 800f93a:	3101      	addlt	r1, #1
 800f93c:	f7ff fe8e 	bl	800f65c <_Balloc>
 800f940:	b930      	cbnz	r0, 800f950 <__multiply+0x44>
 800f942:	4602      	mov	r2, r0
 800f944:	4b44      	ldr	r3, [pc, #272]	; (800fa58 <__multiply+0x14c>)
 800f946:	4845      	ldr	r0, [pc, #276]	; (800fa5c <__multiply+0x150>)
 800f948:	f240 115d 	movw	r1, #349	; 0x15d
 800f94c:	f001 f9f0 	bl	8010d30 <__assert_func>
 800f950:	f100 0514 	add.w	r5, r0, #20
 800f954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f958:	462b      	mov	r3, r5
 800f95a:	2200      	movs	r2, #0
 800f95c:	4543      	cmp	r3, r8
 800f95e:	d321      	bcc.n	800f9a4 <__multiply+0x98>
 800f960:	f104 0314 	add.w	r3, r4, #20
 800f964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f968:	f109 0314 	add.w	r3, r9, #20
 800f96c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f970:	9202      	str	r2, [sp, #8]
 800f972:	1b3a      	subs	r2, r7, r4
 800f974:	3a15      	subs	r2, #21
 800f976:	f022 0203 	bic.w	r2, r2, #3
 800f97a:	3204      	adds	r2, #4
 800f97c:	f104 0115 	add.w	r1, r4, #21
 800f980:	428f      	cmp	r7, r1
 800f982:	bf38      	it	cc
 800f984:	2204      	movcc	r2, #4
 800f986:	9201      	str	r2, [sp, #4]
 800f988:	9a02      	ldr	r2, [sp, #8]
 800f98a:	9303      	str	r3, [sp, #12]
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d80c      	bhi.n	800f9aa <__multiply+0x9e>
 800f990:	2e00      	cmp	r6, #0
 800f992:	dd03      	ble.n	800f99c <__multiply+0x90>
 800f994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d05a      	beq.n	800fa52 <__multiply+0x146>
 800f99c:	6106      	str	r6, [r0, #16]
 800f99e:	b005      	add	sp, #20
 800f9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9a4:	f843 2b04 	str.w	r2, [r3], #4
 800f9a8:	e7d8      	b.n	800f95c <__multiply+0x50>
 800f9aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800f9ae:	f1ba 0f00 	cmp.w	sl, #0
 800f9b2:	d024      	beq.n	800f9fe <__multiply+0xf2>
 800f9b4:	f104 0e14 	add.w	lr, r4, #20
 800f9b8:	46a9      	mov	r9, r5
 800f9ba:	f04f 0c00 	mov.w	ip, #0
 800f9be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f9c2:	f8d9 1000 	ldr.w	r1, [r9]
 800f9c6:	fa1f fb82 	uxth.w	fp, r2
 800f9ca:	b289      	uxth	r1, r1
 800f9cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800f9d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f9d4:	f8d9 2000 	ldr.w	r2, [r9]
 800f9d8:	4461      	add	r1, ip
 800f9da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f9de:	fb0a c20b 	mla	r2, sl, fp, ip
 800f9e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f9e6:	b289      	uxth	r1, r1
 800f9e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f9ec:	4577      	cmp	r7, lr
 800f9ee:	f849 1b04 	str.w	r1, [r9], #4
 800f9f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f9f6:	d8e2      	bhi.n	800f9be <__multiply+0xb2>
 800f9f8:	9a01      	ldr	r2, [sp, #4]
 800f9fa:	f845 c002 	str.w	ip, [r5, r2]
 800f9fe:	9a03      	ldr	r2, [sp, #12]
 800fa00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fa04:	3304      	adds	r3, #4
 800fa06:	f1b9 0f00 	cmp.w	r9, #0
 800fa0a:	d020      	beq.n	800fa4e <__multiply+0x142>
 800fa0c:	6829      	ldr	r1, [r5, #0]
 800fa0e:	f104 0c14 	add.w	ip, r4, #20
 800fa12:	46ae      	mov	lr, r5
 800fa14:	f04f 0a00 	mov.w	sl, #0
 800fa18:	f8bc b000 	ldrh.w	fp, [ip]
 800fa1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fa20:	fb09 220b 	mla	r2, r9, fp, r2
 800fa24:	4492      	add	sl, r2
 800fa26:	b289      	uxth	r1, r1
 800fa28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fa2c:	f84e 1b04 	str.w	r1, [lr], #4
 800fa30:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fa34:	f8be 1000 	ldrh.w	r1, [lr]
 800fa38:	0c12      	lsrs	r2, r2, #16
 800fa3a:	fb09 1102 	mla	r1, r9, r2, r1
 800fa3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fa42:	4567      	cmp	r7, ip
 800fa44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fa48:	d8e6      	bhi.n	800fa18 <__multiply+0x10c>
 800fa4a:	9a01      	ldr	r2, [sp, #4]
 800fa4c:	50a9      	str	r1, [r5, r2]
 800fa4e:	3504      	adds	r5, #4
 800fa50:	e79a      	b.n	800f988 <__multiply+0x7c>
 800fa52:	3e01      	subs	r6, #1
 800fa54:	e79c      	b.n	800f990 <__multiply+0x84>
 800fa56:	bf00      	nop
 800fa58:	080145f0 	.word	0x080145f0
 800fa5c:	0801467c 	.word	0x0801467c

0800fa60 <__pow5mult>:
 800fa60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa64:	4615      	mov	r5, r2
 800fa66:	f012 0203 	ands.w	r2, r2, #3
 800fa6a:	4606      	mov	r6, r0
 800fa6c:	460f      	mov	r7, r1
 800fa6e:	d007      	beq.n	800fa80 <__pow5mult+0x20>
 800fa70:	4c25      	ldr	r4, [pc, #148]	; (800fb08 <__pow5mult+0xa8>)
 800fa72:	3a01      	subs	r2, #1
 800fa74:	2300      	movs	r3, #0
 800fa76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa7a:	f7ff fe51 	bl	800f720 <__multadd>
 800fa7e:	4607      	mov	r7, r0
 800fa80:	10ad      	asrs	r5, r5, #2
 800fa82:	d03d      	beq.n	800fb00 <__pow5mult+0xa0>
 800fa84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fa86:	b97c      	cbnz	r4, 800faa8 <__pow5mult+0x48>
 800fa88:	2010      	movs	r0, #16
 800fa8a:	f7ff fdcd 	bl	800f628 <malloc>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	6270      	str	r0, [r6, #36]	; 0x24
 800fa92:	b928      	cbnz	r0, 800faa0 <__pow5mult+0x40>
 800fa94:	4b1d      	ldr	r3, [pc, #116]	; (800fb0c <__pow5mult+0xac>)
 800fa96:	481e      	ldr	r0, [pc, #120]	; (800fb10 <__pow5mult+0xb0>)
 800fa98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fa9c:	f001 f948 	bl	8010d30 <__assert_func>
 800faa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800faa4:	6004      	str	r4, [r0, #0]
 800faa6:	60c4      	str	r4, [r0, #12]
 800faa8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800faac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fab0:	b94c      	cbnz	r4, 800fac6 <__pow5mult+0x66>
 800fab2:	f240 2171 	movw	r1, #625	; 0x271
 800fab6:	4630      	mov	r0, r6
 800fab8:	f7ff ff12 	bl	800f8e0 <__i2b>
 800fabc:	2300      	movs	r3, #0
 800fabe:	f8c8 0008 	str.w	r0, [r8, #8]
 800fac2:	4604      	mov	r4, r0
 800fac4:	6003      	str	r3, [r0, #0]
 800fac6:	f04f 0900 	mov.w	r9, #0
 800faca:	07eb      	lsls	r3, r5, #31
 800facc:	d50a      	bpl.n	800fae4 <__pow5mult+0x84>
 800face:	4639      	mov	r1, r7
 800fad0:	4622      	mov	r2, r4
 800fad2:	4630      	mov	r0, r6
 800fad4:	f7ff ff1a 	bl	800f90c <__multiply>
 800fad8:	4639      	mov	r1, r7
 800fada:	4680      	mov	r8, r0
 800fadc:	4630      	mov	r0, r6
 800fade:	f7ff fdfd 	bl	800f6dc <_Bfree>
 800fae2:	4647      	mov	r7, r8
 800fae4:	106d      	asrs	r5, r5, #1
 800fae6:	d00b      	beq.n	800fb00 <__pow5mult+0xa0>
 800fae8:	6820      	ldr	r0, [r4, #0]
 800faea:	b938      	cbnz	r0, 800fafc <__pow5mult+0x9c>
 800faec:	4622      	mov	r2, r4
 800faee:	4621      	mov	r1, r4
 800faf0:	4630      	mov	r0, r6
 800faf2:	f7ff ff0b 	bl	800f90c <__multiply>
 800faf6:	6020      	str	r0, [r4, #0]
 800faf8:	f8c0 9000 	str.w	r9, [r0]
 800fafc:	4604      	mov	r4, r0
 800fafe:	e7e4      	b.n	800faca <__pow5mult+0x6a>
 800fb00:	4638      	mov	r0, r7
 800fb02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb06:	bf00      	nop
 800fb08:	080147c8 	.word	0x080147c8
 800fb0c:	0801457e 	.word	0x0801457e
 800fb10:	0801467c 	.word	0x0801467c

0800fb14 <__lshift>:
 800fb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb18:	460c      	mov	r4, r1
 800fb1a:	6849      	ldr	r1, [r1, #4]
 800fb1c:	6923      	ldr	r3, [r4, #16]
 800fb1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb22:	68a3      	ldr	r3, [r4, #8]
 800fb24:	4607      	mov	r7, r0
 800fb26:	4691      	mov	r9, r2
 800fb28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb2c:	f108 0601 	add.w	r6, r8, #1
 800fb30:	42b3      	cmp	r3, r6
 800fb32:	db0b      	blt.n	800fb4c <__lshift+0x38>
 800fb34:	4638      	mov	r0, r7
 800fb36:	f7ff fd91 	bl	800f65c <_Balloc>
 800fb3a:	4605      	mov	r5, r0
 800fb3c:	b948      	cbnz	r0, 800fb52 <__lshift+0x3e>
 800fb3e:	4602      	mov	r2, r0
 800fb40:	4b2a      	ldr	r3, [pc, #168]	; (800fbec <__lshift+0xd8>)
 800fb42:	482b      	ldr	r0, [pc, #172]	; (800fbf0 <__lshift+0xdc>)
 800fb44:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fb48:	f001 f8f2 	bl	8010d30 <__assert_func>
 800fb4c:	3101      	adds	r1, #1
 800fb4e:	005b      	lsls	r3, r3, #1
 800fb50:	e7ee      	b.n	800fb30 <__lshift+0x1c>
 800fb52:	2300      	movs	r3, #0
 800fb54:	f100 0114 	add.w	r1, r0, #20
 800fb58:	f100 0210 	add.w	r2, r0, #16
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	4553      	cmp	r3, sl
 800fb60:	db37      	blt.n	800fbd2 <__lshift+0xbe>
 800fb62:	6920      	ldr	r0, [r4, #16]
 800fb64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb68:	f104 0314 	add.w	r3, r4, #20
 800fb6c:	f019 091f 	ands.w	r9, r9, #31
 800fb70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fb78:	d02f      	beq.n	800fbda <__lshift+0xc6>
 800fb7a:	f1c9 0e20 	rsb	lr, r9, #32
 800fb7e:	468a      	mov	sl, r1
 800fb80:	f04f 0c00 	mov.w	ip, #0
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	fa02 f209 	lsl.w	r2, r2, r9
 800fb8a:	ea42 020c 	orr.w	r2, r2, ip
 800fb8e:	f84a 2b04 	str.w	r2, [sl], #4
 800fb92:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb96:	4298      	cmp	r0, r3
 800fb98:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fb9c:	d8f2      	bhi.n	800fb84 <__lshift+0x70>
 800fb9e:	1b03      	subs	r3, r0, r4
 800fba0:	3b15      	subs	r3, #21
 800fba2:	f023 0303 	bic.w	r3, r3, #3
 800fba6:	3304      	adds	r3, #4
 800fba8:	f104 0215 	add.w	r2, r4, #21
 800fbac:	4290      	cmp	r0, r2
 800fbae:	bf38      	it	cc
 800fbb0:	2304      	movcc	r3, #4
 800fbb2:	f841 c003 	str.w	ip, [r1, r3]
 800fbb6:	f1bc 0f00 	cmp.w	ip, #0
 800fbba:	d001      	beq.n	800fbc0 <__lshift+0xac>
 800fbbc:	f108 0602 	add.w	r6, r8, #2
 800fbc0:	3e01      	subs	r6, #1
 800fbc2:	4638      	mov	r0, r7
 800fbc4:	612e      	str	r6, [r5, #16]
 800fbc6:	4621      	mov	r1, r4
 800fbc8:	f7ff fd88 	bl	800f6dc <_Bfree>
 800fbcc:	4628      	mov	r0, r5
 800fbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbd2:	f842 0f04 	str.w	r0, [r2, #4]!
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	e7c1      	b.n	800fb5e <__lshift+0x4a>
 800fbda:	3904      	subs	r1, #4
 800fbdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbe0:	f841 2f04 	str.w	r2, [r1, #4]!
 800fbe4:	4298      	cmp	r0, r3
 800fbe6:	d8f9      	bhi.n	800fbdc <__lshift+0xc8>
 800fbe8:	e7ea      	b.n	800fbc0 <__lshift+0xac>
 800fbea:	bf00      	nop
 800fbec:	080145f0 	.word	0x080145f0
 800fbf0:	0801467c 	.word	0x0801467c

0800fbf4 <__mcmp>:
 800fbf4:	b530      	push	{r4, r5, lr}
 800fbf6:	6902      	ldr	r2, [r0, #16]
 800fbf8:	690c      	ldr	r4, [r1, #16]
 800fbfa:	1b12      	subs	r2, r2, r4
 800fbfc:	d10e      	bne.n	800fc1c <__mcmp+0x28>
 800fbfe:	f100 0314 	add.w	r3, r0, #20
 800fc02:	3114      	adds	r1, #20
 800fc04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fc08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fc0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fc10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fc14:	42a5      	cmp	r5, r4
 800fc16:	d003      	beq.n	800fc20 <__mcmp+0x2c>
 800fc18:	d305      	bcc.n	800fc26 <__mcmp+0x32>
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	4610      	mov	r0, r2
 800fc1e:	bd30      	pop	{r4, r5, pc}
 800fc20:	4283      	cmp	r3, r0
 800fc22:	d3f3      	bcc.n	800fc0c <__mcmp+0x18>
 800fc24:	e7fa      	b.n	800fc1c <__mcmp+0x28>
 800fc26:	f04f 32ff 	mov.w	r2, #4294967295
 800fc2a:	e7f7      	b.n	800fc1c <__mcmp+0x28>

0800fc2c <__mdiff>:
 800fc2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc30:	460c      	mov	r4, r1
 800fc32:	4606      	mov	r6, r0
 800fc34:	4611      	mov	r1, r2
 800fc36:	4620      	mov	r0, r4
 800fc38:	4690      	mov	r8, r2
 800fc3a:	f7ff ffdb 	bl	800fbf4 <__mcmp>
 800fc3e:	1e05      	subs	r5, r0, #0
 800fc40:	d110      	bne.n	800fc64 <__mdiff+0x38>
 800fc42:	4629      	mov	r1, r5
 800fc44:	4630      	mov	r0, r6
 800fc46:	f7ff fd09 	bl	800f65c <_Balloc>
 800fc4a:	b930      	cbnz	r0, 800fc5a <__mdiff+0x2e>
 800fc4c:	4b3a      	ldr	r3, [pc, #232]	; (800fd38 <__mdiff+0x10c>)
 800fc4e:	4602      	mov	r2, r0
 800fc50:	f240 2132 	movw	r1, #562	; 0x232
 800fc54:	4839      	ldr	r0, [pc, #228]	; (800fd3c <__mdiff+0x110>)
 800fc56:	f001 f86b 	bl	8010d30 <__assert_func>
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc64:	bfa4      	itt	ge
 800fc66:	4643      	movge	r3, r8
 800fc68:	46a0      	movge	r8, r4
 800fc6a:	4630      	mov	r0, r6
 800fc6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fc70:	bfa6      	itte	ge
 800fc72:	461c      	movge	r4, r3
 800fc74:	2500      	movge	r5, #0
 800fc76:	2501      	movlt	r5, #1
 800fc78:	f7ff fcf0 	bl	800f65c <_Balloc>
 800fc7c:	b920      	cbnz	r0, 800fc88 <__mdiff+0x5c>
 800fc7e:	4b2e      	ldr	r3, [pc, #184]	; (800fd38 <__mdiff+0x10c>)
 800fc80:	4602      	mov	r2, r0
 800fc82:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fc86:	e7e5      	b.n	800fc54 <__mdiff+0x28>
 800fc88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fc8c:	6926      	ldr	r6, [r4, #16]
 800fc8e:	60c5      	str	r5, [r0, #12]
 800fc90:	f104 0914 	add.w	r9, r4, #20
 800fc94:	f108 0514 	add.w	r5, r8, #20
 800fc98:	f100 0e14 	add.w	lr, r0, #20
 800fc9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fca0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fca4:	f108 0210 	add.w	r2, r8, #16
 800fca8:	46f2      	mov	sl, lr
 800fcaa:	2100      	movs	r1, #0
 800fcac:	f859 3b04 	ldr.w	r3, [r9], #4
 800fcb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fcb4:	fa1f f883 	uxth.w	r8, r3
 800fcb8:	fa11 f18b 	uxtah	r1, r1, fp
 800fcbc:	0c1b      	lsrs	r3, r3, #16
 800fcbe:	eba1 0808 	sub.w	r8, r1, r8
 800fcc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fcc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fcca:	fa1f f888 	uxth.w	r8, r8
 800fcce:	1419      	asrs	r1, r3, #16
 800fcd0:	454e      	cmp	r6, r9
 800fcd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fcd6:	f84a 3b04 	str.w	r3, [sl], #4
 800fcda:	d8e7      	bhi.n	800fcac <__mdiff+0x80>
 800fcdc:	1b33      	subs	r3, r6, r4
 800fcde:	3b15      	subs	r3, #21
 800fce0:	f023 0303 	bic.w	r3, r3, #3
 800fce4:	3304      	adds	r3, #4
 800fce6:	3415      	adds	r4, #21
 800fce8:	42a6      	cmp	r6, r4
 800fcea:	bf38      	it	cc
 800fcec:	2304      	movcc	r3, #4
 800fcee:	441d      	add	r5, r3
 800fcf0:	4473      	add	r3, lr
 800fcf2:	469e      	mov	lr, r3
 800fcf4:	462e      	mov	r6, r5
 800fcf6:	4566      	cmp	r6, ip
 800fcf8:	d30e      	bcc.n	800fd18 <__mdiff+0xec>
 800fcfa:	f10c 0203 	add.w	r2, ip, #3
 800fcfe:	1b52      	subs	r2, r2, r5
 800fd00:	f022 0203 	bic.w	r2, r2, #3
 800fd04:	3d03      	subs	r5, #3
 800fd06:	45ac      	cmp	ip, r5
 800fd08:	bf38      	it	cc
 800fd0a:	2200      	movcc	r2, #0
 800fd0c:	441a      	add	r2, r3
 800fd0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fd12:	b17b      	cbz	r3, 800fd34 <__mdiff+0x108>
 800fd14:	6107      	str	r7, [r0, #16]
 800fd16:	e7a3      	b.n	800fc60 <__mdiff+0x34>
 800fd18:	f856 8b04 	ldr.w	r8, [r6], #4
 800fd1c:	fa11 f288 	uxtah	r2, r1, r8
 800fd20:	1414      	asrs	r4, r2, #16
 800fd22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fd26:	b292      	uxth	r2, r2
 800fd28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fd2c:	f84e 2b04 	str.w	r2, [lr], #4
 800fd30:	1421      	asrs	r1, r4, #16
 800fd32:	e7e0      	b.n	800fcf6 <__mdiff+0xca>
 800fd34:	3f01      	subs	r7, #1
 800fd36:	e7ea      	b.n	800fd0e <__mdiff+0xe2>
 800fd38:	080145f0 	.word	0x080145f0
 800fd3c:	0801467c 	.word	0x0801467c

0800fd40 <__ulp>:
 800fd40:	b082      	sub	sp, #8
 800fd42:	ed8d 0b00 	vstr	d0, [sp]
 800fd46:	9b01      	ldr	r3, [sp, #4]
 800fd48:	4912      	ldr	r1, [pc, #72]	; (800fd94 <__ulp+0x54>)
 800fd4a:	4019      	ands	r1, r3
 800fd4c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fd50:	2900      	cmp	r1, #0
 800fd52:	dd05      	ble.n	800fd60 <__ulp+0x20>
 800fd54:	2200      	movs	r2, #0
 800fd56:	460b      	mov	r3, r1
 800fd58:	ec43 2b10 	vmov	d0, r2, r3
 800fd5c:	b002      	add	sp, #8
 800fd5e:	4770      	bx	lr
 800fd60:	4249      	negs	r1, r1
 800fd62:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fd66:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fd6a:	f04f 0200 	mov.w	r2, #0
 800fd6e:	f04f 0300 	mov.w	r3, #0
 800fd72:	da04      	bge.n	800fd7e <__ulp+0x3e>
 800fd74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fd78:	fa41 f300 	asr.w	r3, r1, r0
 800fd7c:	e7ec      	b.n	800fd58 <__ulp+0x18>
 800fd7e:	f1a0 0114 	sub.w	r1, r0, #20
 800fd82:	291e      	cmp	r1, #30
 800fd84:	bfda      	itte	le
 800fd86:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fd8a:	fa20 f101 	lsrle.w	r1, r0, r1
 800fd8e:	2101      	movgt	r1, #1
 800fd90:	460a      	mov	r2, r1
 800fd92:	e7e1      	b.n	800fd58 <__ulp+0x18>
 800fd94:	7ff00000 	.word	0x7ff00000

0800fd98 <__b2d>:
 800fd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd9a:	6905      	ldr	r5, [r0, #16]
 800fd9c:	f100 0714 	add.w	r7, r0, #20
 800fda0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fda4:	1f2e      	subs	r6, r5, #4
 800fda6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fdaa:	4620      	mov	r0, r4
 800fdac:	f7ff fd48 	bl	800f840 <__hi0bits>
 800fdb0:	f1c0 0320 	rsb	r3, r0, #32
 800fdb4:	280a      	cmp	r0, #10
 800fdb6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fe34 <__b2d+0x9c>
 800fdba:	600b      	str	r3, [r1, #0]
 800fdbc:	dc14      	bgt.n	800fde8 <__b2d+0x50>
 800fdbe:	f1c0 0e0b 	rsb	lr, r0, #11
 800fdc2:	fa24 f10e 	lsr.w	r1, r4, lr
 800fdc6:	42b7      	cmp	r7, r6
 800fdc8:	ea41 030c 	orr.w	r3, r1, ip
 800fdcc:	bf34      	ite	cc
 800fdce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fdd2:	2100      	movcs	r1, #0
 800fdd4:	3015      	adds	r0, #21
 800fdd6:	fa04 f000 	lsl.w	r0, r4, r0
 800fdda:	fa21 f10e 	lsr.w	r1, r1, lr
 800fdde:	ea40 0201 	orr.w	r2, r0, r1
 800fde2:	ec43 2b10 	vmov	d0, r2, r3
 800fde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fde8:	42b7      	cmp	r7, r6
 800fdea:	bf3a      	itte	cc
 800fdec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fdf0:	f1a5 0608 	subcc.w	r6, r5, #8
 800fdf4:	2100      	movcs	r1, #0
 800fdf6:	380b      	subs	r0, #11
 800fdf8:	d017      	beq.n	800fe2a <__b2d+0x92>
 800fdfa:	f1c0 0c20 	rsb	ip, r0, #32
 800fdfe:	fa04 f500 	lsl.w	r5, r4, r0
 800fe02:	42be      	cmp	r6, r7
 800fe04:	fa21 f40c 	lsr.w	r4, r1, ip
 800fe08:	ea45 0504 	orr.w	r5, r5, r4
 800fe0c:	bf8c      	ite	hi
 800fe0e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fe12:	2400      	movls	r4, #0
 800fe14:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fe18:	fa01 f000 	lsl.w	r0, r1, r0
 800fe1c:	fa24 f40c 	lsr.w	r4, r4, ip
 800fe20:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fe24:	ea40 0204 	orr.w	r2, r0, r4
 800fe28:	e7db      	b.n	800fde2 <__b2d+0x4a>
 800fe2a:	ea44 030c 	orr.w	r3, r4, ip
 800fe2e:	460a      	mov	r2, r1
 800fe30:	e7d7      	b.n	800fde2 <__b2d+0x4a>
 800fe32:	bf00      	nop
 800fe34:	3ff00000 	.word	0x3ff00000

0800fe38 <__d2b>:
 800fe38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe3c:	4689      	mov	r9, r1
 800fe3e:	2101      	movs	r1, #1
 800fe40:	ec57 6b10 	vmov	r6, r7, d0
 800fe44:	4690      	mov	r8, r2
 800fe46:	f7ff fc09 	bl	800f65c <_Balloc>
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	b930      	cbnz	r0, 800fe5c <__d2b+0x24>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	4b25      	ldr	r3, [pc, #148]	; (800fee8 <__d2b+0xb0>)
 800fe52:	4826      	ldr	r0, [pc, #152]	; (800feec <__d2b+0xb4>)
 800fe54:	f240 310a 	movw	r1, #778	; 0x30a
 800fe58:	f000 ff6a 	bl	8010d30 <__assert_func>
 800fe5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fe60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fe64:	bb35      	cbnz	r5, 800feb4 <__d2b+0x7c>
 800fe66:	2e00      	cmp	r6, #0
 800fe68:	9301      	str	r3, [sp, #4]
 800fe6a:	d028      	beq.n	800febe <__d2b+0x86>
 800fe6c:	4668      	mov	r0, sp
 800fe6e:	9600      	str	r6, [sp, #0]
 800fe70:	f7ff fd06 	bl	800f880 <__lo0bits>
 800fe74:	9900      	ldr	r1, [sp, #0]
 800fe76:	b300      	cbz	r0, 800feba <__d2b+0x82>
 800fe78:	9a01      	ldr	r2, [sp, #4]
 800fe7a:	f1c0 0320 	rsb	r3, r0, #32
 800fe7e:	fa02 f303 	lsl.w	r3, r2, r3
 800fe82:	430b      	orrs	r3, r1
 800fe84:	40c2      	lsrs	r2, r0
 800fe86:	6163      	str	r3, [r4, #20]
 800fe88:	9201      	str	r2, [sp, #4]
 800fe8a:	9b01      	ldr	r3, [sp, #4]
 800fe8c:	61a3      	str	r3, [r4, #24]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	bf14      	ite	ne
 800fe92:	2202      	movne	r2, #2
 800fe94:	2201      	moveq	r2, #1
 800fe96:	6122      	str	r2, [r4, #16]
 800fe98:	b1d5      	cbz	r5, 800fed0 <__d2b+0x98>
 800fe9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe9e:	4405      	add	r5, r0
 800fea0:	f8c9 5000 	str.w	r5, [r9]
 800fea4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fea8:	f8c8 0000 	str.w	r0, [r8]
 800feac:	4620      	mov	r0, r4
 800feae:	b003      	add	sp, #12
 800feb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800feb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800feb8:	e7d5      	b.n	800fe66 <__d2b+0x2e>
 800feba:	6161      	str	r1, [r4, #20]
 800febc:	e7e5      	b.n	800fe8a <__d2b+0x52>
 800febe:	a801      	add	r0, sp, #4
 800fec0:	f7ff fcde 	bl	800f880 <__lo0bits>
 800fec4:	9b01      	ldr	r3, [sp, #4]
 800fec6:	6163      	str	r3, [r4, #20]
 800fec8:	2201      	movs	r2, #1
 800feca:	6122      	str	r2, [r4, #16]
 800fecc:	3020      	adds	r0, #32
 800fece:	e7e3      	b.n	800fe98 <__d2b+0x60>
 800fed0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fed4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fed8:	f8c9 0000 	str.w	r0, [r9]
 800fedc:	6918      	ldr	r0, [r3, #16]
 800fede:	f7ff fcaf 	bl	800f840 <__hi0bits>
 800fee2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fee6:	e7df      	b.n	800fea8 <__d2b+0x70>
 800fee8:	080145f0 	.word	0x080145f0
 800feec:	0801467c 	.word	0x0801467c

0800fef0 <__ratio>:
 800fef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef4:	4688      	mov	r8, r1
 800fef6:	4669      	mov	r1, sp
 800fef8:	4681      	mov	r9, r0
 800fefa:	f7ff ff4d 	bl	800fd98 <__b2d>
 800fefe:	a901      	add	r1, sp, #4
 800ff00:	4640      	mov	r0, r8
 800ff02:	ec55 4b10 	vmov	r4, r5, d0
 800ff06:	f7ff ff47 	bl	800fd98 <__b2d>
 800ff0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ff12:	eba3 0c02 	sub.w	ip, r3, r2
 800ff16:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ff1a:	1a9b      	subs	r3, r3, r2
 800ff1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ff20:	ec51 0b10 	vmov	r0, r1, d0
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	bfd6      	itet	le
 800ff28:	460a      	movle	r2, r1
 800ff2a:	462a      	movgt	r2, r5
 800ff2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ff30:	468b      	mov	fp, r1
 800ff32:	462f      	mov	r7, r5
 800ff34:	bfd4      	ite	le
 800ff36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ff3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ff3e:	4620      	mov	r0, r4
 800ff40:	ee10 2a10 	vmov	r2, s0
 800ff44:	465b      	mov	r3, fp
 800ff46:	4639      	mov	r1, r7
 800ff48:	f7f0 fc98 	bl	800087c <__aeabi_ddiv>
 800ff4c:	ec41 0b10 	vmov	d0, r0, r1
 800ff50:	b003      	add	sp, #12
 800ff52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ff56 <__copybits>:
 800ff56:	3901      	subs	r1, #1
 800ff58:	b570      	push	{r4, r5, r6, lr}
 800ff5a:	1149      	asrs	r1, r1, #5
 800ff5c:	6914      	ldr	r4, [r2, #16]
 800ff5e:	3101      	adds	r1, #1
 800ff60:	f102 0314 	add.w	r3, r2, #20
 800ff64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ff68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ff6c:	1f05      	subs	r5, r0, #4
 800ff6e:	42a3      	cmp	r3, r4
 800ff70:	d30c      	bcc.n	800ff8c <__copybits+0x36>
 800ff72:	1aa3      	subs	r3, r4, r2
 800ff74:	3b11      	subs	r3, #17
 800ff76:	f023 0303 	bic.w	r3, r3, #3
 800ff7a:	3211      	adds	r2, #17
 800ff7c:	42a2      	cmp	r2, r4
 800ff7e:	bf88      	it	hi
 800ff80:	2300      	movhi	r3, #0
 800ff82:	4418      	add	r0, r3
 800ff84:	2300      	movs	r3, #0
 800ff86:	4288      	cmp	r0, r1
 800ff88:	d305      	bcc.n	800ff96 <__copybits+0x40>
 800ff8a:	bd70      	pop	{r4, r5, r6, pc}
 800ff8c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ff90:	f845 6f04 	str.w	r6, [r5, #4]!
 800ff94:	e7eb      	b.n	800ff6e <__copybits+0x18>
 800ff96:	f840 3b04 	str.w	r3, [r0], #4
 800ff9a:	e7f4      	b.n	800ff86 <__copybits+0x30>

0800ff9c <__any_on>:
 800ff9c:	f100 0214 	add.w	r2, r0, #20
 800ffa0:	6900      	ldr	r0, [r0, #16]
 800ffa2:	114b      	asrs	r3, r1, #5
 800ffa4:	4298      	cmp	r0, r3
 800ffa6:	b510      	push	{r4, lr}
 800ffa8:	db11      	blt.n	800ffce <__any_on+0x32>
 800ffaa:	dd0a      	ble.n	800ffc2 <__any_on+0x26>
 800ffac:	f011 011f 	ands.w	r1, r1, #31
 800ffb0:	d007      	beq.n	800ffc2 <__any_on+0x26>
 800ffb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ffb6:	fa24 f001 	lsr.w	r0, r4, r1
 800ffba:	fa00 f101 	lsl.w	r1, r0, r1
 800ffbe:	428c      	cmp	r4, r1
 800ffc0:	d10b      	bne.n	800ffda <__any_on+0x3e>
 800ffc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d803      	bhi.n	800ffd2 <__any_on+0x36>
 800ffca:	2000      	movs	r0, #0
 800ffcc:	bd10      	pop	{r4, pc}
 800ffce:	4603      	mov	r3, r0
 800ffd0:	e7f7      	b.n	800ffc2 <__any_on+0x26>
 800ffd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ffd6:	2900      	cmp	r1, #0
 800ffd8:	d0f5      	beq.n	800ffc6 <__any_on+0x2a>
 800ffda:	2001      	movs	r0, #1
 800ffdc:	e7f6      	b.n	800ffcc <__any_on+0x30>

0800ffde <_calloc_r>:
 800ffde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffe0:	fba1 2402 	umull	r2, r4, r1, r2
 800ffe4:	b94c      	cbnz	r4, 800fffa <_calloc_r+0x1c>
 800ffe6:	4611      	mov	r1, r2
 800ffe8:	9201      	str	r2, [sp, #4]
 800ffea:	f000 f87b 	bl	80100e4 <_malloc_r>
 800ffee:	9a01      	ldr	r2, [sp, #4]
 800fff0:	4605      	mov	r5, r0
 800fff2:	b930      	cbnz	r0, 8010002 <_calloc_r+0x24>
 800fff4:	4628      	mov	r0, r5
 800fff6:	b003      	add	sp, #12
 800fff8:	bd30      	pop	{r4, r5, pc}
 800fffa:	220c      	movs	r2, #12
 800fffc:	6002      	str	r2, [r0, #0]
 800fffe:	2500      	movs	r5, #0
 8010000:	e7f8      	b.n	800fff4 <_calloc_r+0x16>
 8010002:	4621      	mov	r1, r4
 8010004:	f7fc fb12 	bl	800c62c <memset>
 8010008:	e7f4      	b.n	800fff4 <_calloc_r+0x16>
	...

0801000c <_free_r>:
 801000c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801000e:	2900      	cmp	r1, #0
 8010010:	d044      	beq.n	801009c <_free_r+0x90>
 8010012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010016:	9001      	str	r0, [sp, #4]
 8010018:	2b00      	cmp	r3, #0
 801001a:	f1a1 0404 	sub.w	r4, r1, #4
 801001e:	bfb8      	it	lt
 8010020:	18e4      	addlt	r4, r4, r3
 8010022:	f001 f889 	bl	8011138 <__malloc_lock>
 8010026:	4a1e      	ldr	r2, [pc, #120]	; (80100a0 <_free_r+0x94>)
 8010028:	9801      	ldr	r0, [sp, #4]
 801002a:	6813      	ldr	r3, [r2, #0]
 801002c:	b933      	cbnz	r3, 801003c <_free_r+0x30>
 801002e:	6063      	str	r3, [r4, #4]
 8010030:	6014      	str	r4, [r2, #0]
 8010032:	b003      	add	sp, #12
 8010034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010038:	f001 b884 	b.w	8011144 <__malloc_unlock>
 801003c:	42a3      	cmp	r3, r4
 801003e:	d908      	bls.n	8010052 <_free_r+0x46>
 8010040:	6825      	ldr	r5, [r4, #0]
 8010042:	1961      	adds	r1, r4, r5
 8010044:	428b      	cmp	r3, r1
 8010046:	bf01      	itttt	eq
 8010048:	6819      	ldreq	r1, [r3, #0]
 801004a:	685b      	ldreq	r3, [r3, #4]
 801004c:	1949      	addeq	r1, r1, r5
 801004e:	6021      	streq	r1, [r4, #0]
 8010050:	e7ed      	b.n	801002e <_free_r+0x22>
 8010052:	461a      	mov	r2, r3
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	b10b      	cbz	r3, 801005c <_free_r+0x50>
 8010058:	42a3      	cmp	r3, r4
 801005a:	d9fa      	bls.n	8010052 <_free_r+0x46>
 801005c:	6811      	ldr	r1, [r2, #0]
 801005e:	1855      	adds	r5, r2, r1
 8010060:	42a5      	cmp	r5, r4
 8010062:	d10b      	bne.n	801007c <_free_r+0x70>
 8010064:	6824      	ldr	r4, [r4, #0]
 8010066:	4421      	add	r1, r4
 8010068:	1854      	adds	r4, r2, r1
 801006a:	42a3      	cmp	r3, r4
 801006c:	6011      	str	r1, [r2, #0]
 801006e:	d1e0      	bne.n	8010032 <_free_r+0x26>
 8010070:	681c      	ldr	r4, [r3, #0]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	6053      	str	r3, [r2, #4]
 8010076:	4421      	add	r1, r4
 8010078:	6011      	str	r1, [r2, #0]
 801007a:	e7da      	b.n	8010032 <_free_r+0x26>
 801007c:	d902      	bls.n	8010084 <_free_r+0x78>
 801007e:	230c      	movs	r3, #12
 8010080:	6003      	str	r3, [r0, #0]
 8010082:	e7d6      	b.n	8010032 <_free_r+0x26>
 8010084:	6825      	ldr	r5, [r4, #0]
 8010086:	1961      	adds	r1, r4, r5
 8010088:	428b      	cmp	r3, r1
 801008a:	bf04      	itt	eq
 801008c:	6819      	ldreq	r1, [r3, #0]
 801008e:	685b      	ldreq	r3, [r3, #4]
 8010090:	6063      	str	r3, [r4, #4]
 8010092:	bf04      	itt	eq
 8010094:	1949      	addeq	r1, r1, r5
 8010096:	6021      	streq	r1, [r4, #0]
 8010098:	6054      	str	r4, [r2, #4]
 801009a:	e7ca      	b.n	8010032 <_free_r+0x26>
 801009c:	b003      	add	sp, #12
 801009e:	bd30      	pop	{r4, r5, pc}
 80100a0:	20013b60 	.word	0x20013b60

080100a4 <sbrk_aligned>:
 80100a4:	b570      	push	{r4, r5, r6, lr}
 80100a6:	4e0e      	ldr	r6, [pc, #56]	; (80100e0 <sbrk_aligned+0x3c>)
 80100a8:	460c      	mov	r4, r1
 80100aa:	6831      	ldr	r1, [r6, #0]
 80100ac:	4605      	mov	r5, r0
 80100ae:	b911      	cbnz	r1, 80100b6 <sbrk_aligned+0x12>
 80100b0:	f000 fd26 	bl	8010b00 <_sbrk_r>
 80100b4:	6030      	str	r0, [r6, #0]
 80100b6:	4621      	mov	r1, r4
 80100b8:	4628      	mov	r0, r5
 80100ba:	f000 fd21 	bl	8010b00 <_sbrk_r>
 80100be:	1c43      	adds	r3, r0, #1
 80100c0:	d00a      	beq.n	80100d8 <sbrk_aligned+0x34>
 80100c2:	1cc4      	adds	r4, r0, #3
 80100c4:	f024 0403 	bic.w	r4, r4, #3
 80100c8:	42a0      	cmp	r0, r4
 80100ca:	d007      	beq.n	80100dc <sbrk_aligned+0x38>
 80100cc:	1a21      	subs	r1, r4, r0
 80100ce:	4628      	mov	r0, r5
 80100d0:	f000 fd16 	bl	8010b00 <_sbrk_r>
 80100d4:	3001      	adds	r0, #1
 80100d6:	d101      	bne.n	80100dc <sbrk_aligned+0x38>
 80100d8:	f04f 34ff 	mov.w	r4, #4294967295
 80100dc:	4620      	mov	r0, r4
 80100de:	bd70      	pop	{r4, r5, r6, pc}
 80100e0:	20013b64 	.word	0x20013b64

080100e4 <_malloc_r>:
 80100e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e8:	1ccd      	adds	r5, r1, #3
 80100ea:	f025 0503 	bic.w	r5, r5, #3
 80100ee:	3508      	adds	r5, #8
 80100f0:	2d0c      	cmp	r5, #12
 80100f2:	bf38      	it	cc
 80100f4:	250c      	movcc	r5, #12
 80100f6:	2d00      	cmp	r5, #0
 80100f8:	4607      	mov	r7, r0
 80100fa:	db01      	blt.n	8010100 <_malloc_r+0x1c>
 80100fc:	42a9      	cmp	r1, r5
 80100fe:	d905      	bls.n	801010c <_malloc_r+0x28>
 8010100:	230c      	movs	r3, #12
 8010102:	603b      	str	r3, [r7, #0]
 8010104:	2600      	movs	r6, #0
 8010106:	4630      	mov	r0, r6
 8010108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801010c:	4e2e      	ldr	r6, [pc, #184]	; (80101c8 <_malloc_r+0xe4>)
 801010e:	f001 f813 	bl	8011138 <__malloc_lock>
 8010112:	6833      	ldr	r3, [r6, #0]
 8010114:	461c      	mov	r4, r3
 8010116:	bb34      	cbnz	r4, 8010166 <_malloc_r+0x82>
 8010118:	4629      	mov	r1, r5
 801011a:	4638      	mov	r0, r7
 801011c:	f7ff ffc2 	bl	80100a4 <sbrk_aligned>
 8010120:	1c43      	adds	r3, r0, #1
 8010122:	4604      	mov	r4, r0
 8010124:	d14d      	bne.n	80101c2 <_malloc_r+0xde>
 8010126:	6834      	ldr	r4, [r6, #0]
 8010128:	4626      	mov	r6, r4
 801012a:	2e00      	cmp	r6, #0
 801012c:	d140      	bne.n	80101b0 <_malloc_r+0xcc>
 801012e:	6823      	ldr	r3, [r4, #0]
 8010130:	4631      	mov	r1, r6
 8010132:	4638      	mov	r0, r7
 8010134:	eb04 0803 	add.w	r8, r4, r3
 8010138:	f000 fce2 	bl	8010b00 <_sbrk_r>
 801013c:	4580      	cmp	r8, r0
 801013e:	d13a      	bne.n	80101b6 <_malloc_r+0xd2>
 8010140:	6821      	ldr	r1, [r4, #0]
 8010142:	3503      	adds	r5, #3
 8010144:	1a6d      	subs	r5, r5, r1
 8010146:	f025 0503 	bic.w	r5, r5, #3
 801014a:	3508      	adds	r5, #8
 801014c:	2d0c      	cmp	r5, #12
 801014e:	bf38      	it	cc
 8010150:	250c      	movcc	r5, #12
 8010152:	4629      	mov	r1, r5
 8010154:	4638      	mov	r0, r7
 8010156:	f7ff ffa5 	bl	80100a4 <sbrk_aligned>
 801015a:	3001      	adds	r0, #1
 801015c:	d02b      	beq.n	80101b6 <_malloc_r+0xd2>
 801015e:	6823      	ldr	r3, [r4, #0]
 8010160:	442b      	add	r3, r5
 8010162:	6023      	str	r3, [r4, #0]
 8010164:	e00e      	b.n	8010184 <_malloc_r+0xa0>
 8010166:	6822      	ldr	r2, [r4, #0]
 8010168:	1b52      	subs	r2, r2, r5
 801016a:	d41e      	bmi.n	80101aa <_malloc_r+0xc6>
 801016c:	2a0b      	cmp	r2, #11
 801016e:	d916      	bls.n	801019e <_malloc_r+0xba>
 8010170:	1961      	adds	r1, r4, r5
 8010172:	42a3      	cmp	r3, r4
 8010174:	6025      	str	r5, [r4, #0]
 8010176:	bf18      	it	ne
 8010178:	6059      	strne	r1, [r3, #4]
 801017a:	6863      	ldr	r3, [r4, #4]
 801017c:	bf08      	it	eq
 801017e:	6031      	streq	r1, [r6, #0]
 8010180:	5162      	str	r2, [r4, r5]
 8010182:	604b      	str	r3, [r1, #4]
 8010184:	4638      	mov	r0, r7
 8010186:	f104 060b 	add.w	r6, r4, #11
 801018a:	f000 ffdb 	bl	8011144 <__malloc_unlock>
 801018e:	f026 0607 	bic.w	r6, r6, #7
 8010192:	1d23      	adds	r3, r4, #4
 8010194:	1af2      	subs	r2, r6, r3
 8010196:	d0b6      	beq.n	8010106 <_malloc_r+0x22>
 8010198:	1b9b      	subs	r3, r3, r6
 801019a:	50a3      	str	r3, [r4, r2]
 801019c:	e7b3      	b.n	8010106 <_malloc_r+0x22>
 801019e:	6862      	ldr	r2, [r4, #4]
 80101a0:	42a3      	cmp	r3, r4
 80101a2:	bf0c      	ite	eq
 80101a4:	6032      	streq	r2, [r6, #0]
 80101a6:	605a      	strne	r2, [r3, #4]
 80101a8:	e7ec      	b.n	8010184 <_malloc_r+0xa0>
 80101aa:	4623      	mov	r3, r4
 80101ac:	6864      	ldr	r4, [r4, #4]
 80101ae:	e7b2      	b.n	8010116 <_malloc_r+0x32>
 80101b0:	4634      	mov	r4, r6
 80101b2:	6876      	ldr	r6, [r6, #4]
 80101b4:	e7b9      	b.n	801012a <_malloc_r+0x46>
 80101b6:	230c      	movs	r3, #12
 80101b8:	603b      	str	r3, [r7, #0]
 80101ba:	4638      	mov	r0, r7
 80101bc:	f000 ffc2 	bl	8011144 <__malloc_unlock>
 80101c0:	e7a1      	b.n	8010106 <_malloc_r+0x22>
 80101c2:	6025      	str	r5, [r4, #0]
 80101c4:	e7de      	b.n	8010184 <_malloc_r+0xa0>
 80101c6:	bf00      	nop
 80101c8:	20013b60 	.word	0x20013b60

080101cc <__ssputs_r>:
 80101cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101d0:	688e      	ldr	r6, [r1, #8]
 80101d2:	429e      	cmp	r6, r3
 80101d4:	4682      	mov	sl, r0
 80101d6:	460c      	mov	r4, r1
 80101d8:	4690      	mov	r8, r2
 80101da:	461f      	mov	r7, r3
 80101dc:	d838      	bhi.n	8010250 <__ssputs_r+0x84>
 80101de:	898a      	ldrh	r2, [r1, #12]
 80101e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80101e4:	d032      	beq.n	801024c <__ssputs_r+0x80>
 80101e6:	6825      	ldr	r5, [r4, #0]
 80101e8:	6909      	ldr	r1, [r1, #16]
 80101ea:	eba5 0901 	sub.w	r9, r5, r1
 80101ee:	6965      	ldr	r5, [r4, #20]
 80101f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80101f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80101f8:	3301      	adds	r3, #1
 80101fa:	444b      	add	r3, r9
 80101fc:	106d      	asrs	r5, r5, #1
 80101fe:	429d      	cmp	r5, r3
 8010200:	bf38      	it	cc
 8010202:	461d      	movcc	r5, r3
 8010204:	0553      	lsls	r3, r2, #21
 8010206:	d531      	bpl.n	801026c <__ssputs_r+0xa0>
 8010208:	4629      	mov	r1, r5
 801020a:	f7ff ff6b 	bl	80100e4 <_malloc_r>
 801020e:	4606      	mov	r6, r0
 8010210:	b950      	cbnz	r0, 8010228 <__ssputs_r+0x5c>
 8010212:	230c      	movs	r3, #12
 8010214:	f8ca 3000 	str.w	r3, [sl]
 8010218:	89a3      	ldrh	r3, [r4, #12]
 801021a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801021e:	81a3      	strh	r3, [r4, #12]
 8010220:	f04f 30ff 	mov.w	r0, #4294967295
 8010224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010228:	6921      	ldr	r1, [r4, #16]
 801022a:	464a      	mov	r2, r9
 801022c:	f7fc f9f0 	bl	800c610 <memcpy>
 8010230:	89a3      	ldrh	r3, [r4, #12]
 8010232:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801023a:	81a3      	strh	r3, [r4, #12]
 801023c:	6126      	str	r6, [r4, #16]
 801023e:	6165      	str	r5, [r4, #20]
 8010240:	444e      	add	r6, r9
 8010242:	eba5 0509 	sub.w	r5, r5, r9
 8010246:	6026      	str	r6, [r4, #0]
 8010248:	60a5      	str	r5, [r4, #8]
 801024a:	463e      	mov	r6, r7
 801024c:	42be      	cmp	r6, r7
 801024e:	d900      	bls.n	8010252 <__ssputs_r+0x86>
 8010250:	463e      	mov	r6, r7
 8010252:	6820      	ldr	r0, [r4, #0]
 8010254:	4632      	mov	r2, r6
 8010256:	4641      	mov	r1, r8
 8010258:	f000 ff54 	bl	8011104 <memmove>
 801025c:	68a3      	ldr	r3, [r4, #8]
 801025e:	1b9b      	subs	r3, r3, r6
 8010260:	60a3      	str	r3, [r4, #8]
 8010262:	6823      	ldr	r3, [r4, #0]
 8010264:	4433      	add	r3, r6
 8010266:	6023      	str	r3, [r4, #0]
 8010268:	2000      	movs	r0, #0
 801026a:	e7db      	b.n	8010224 <__ssputs_r+0x58>
 801026c:	462a      	mov	r2, r5
 801026e:	f000 ff6f 	bl	8011150 <_realloc_r>
 8010272:	4606      	mov	r6, r0
 8010274:	2800      	cmp	r0, #0
 8010276:	d1e1      	bne.n	801023c <__ssputs_r+0x70>
 8010278:	6921      	ldr	r1, [r4, #16]
 801027a:	4650      	mov	r0, sl
 801027c:	f7ff fec6 	bl	801000c <_free_r>
 8010280:	e7c7      	b.n	8010212 <__ssputs_r+0x46>
	...

08010284 <_svfiprintf_r>:
 8010284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010288:	4698      	mov	r8, r3
 801028a:	898b      	ldrh	r3, [r1, #12]
 801028c:	061b      	lsls	r3, r3, #24
 801028e:	b09d      	sub	sp, #116	; 0x74
 8010290:	4607      	mov	r7, r0
 8010292:	460d      	mov	r5, r1
 8010294:	4614      	mov	r4, r2
 8010296:	d50e      	bpl.n	80102b6 <_svfiprintf_r+0x32>
 8010298:	690b      	ldr	r3, [r1, #16]
 801029a:	b963      	cbnz	r3, 80102b6 <_svfiprintf_r+0x32>
 801029c:	2140      	movs	r1, #64	; 0x40
 801029e:	f7ff ff21 	bl	80100e4 <_malloc_r>
 80102a2:	6028      	str	r0, [r5, #0]
 80102a4:	6128      	str	r0, [r5, #16]
 80102a6:	b920      	cbnz	r0, 80102b2 <_svfiprintf_r+0x2e>
 80102a8:	230c      	movs	r3, #12
 80102aa:	603b      	str	r3, [r7, #0]
 80102ac:	f04f 30ff 	mov.w	r0, #4294967295
 80102b0:	e0d1      	b.n	8010456 <_svfiprintf_r+0x1d2>
 80102b2:	2340      	movs	r3, #64	; 0x40
 80102b4:	616b      	str	r3, [r5, #20]
 80102b6:	2300      	movs	r3, #0
 80102b8:	9309      	str	r3, [sp, #36]	; 0x24
 80102ba:	2320      	movs	r3, #32
 80102bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80102c4:	2330      	movs	r3, #48	; 0x30
 80102c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010470 <_svfiprintf_r+0x1ec>
 80102ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102ce:	f04f 0901 	mov.w	r9, #1
 80102d2:	4623      	mov	r3, r4
 80102d4:	469a      	mov	sl, r3
 80102d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102da:	b10a      	cbz	r2, 80102e0 <_svfiprintf_r+0x5c>
 80102dc:	2a25      	cmp	r2, #37	; 0x25
 80102de:	d1f9      	bne.n	80102d4 <_svfiprintf_r+0x50>
 80102e0:	ebba 0b04 	subs.w	fp, sl, r4
 80102e4:	d00b      	beq.n	80102fe <_svfiprintf_r+0x7a>
 80102e6:	465b      	mov	r3, fp
 80102e8:	4622      	mov	r2, r4
 80102ea:	4629      	mov	r1, r5
 80102ec:	4638      	mov	r0, r7
 80102ee:	f7ff ff6d 	bl	80101cc <__ssputs_r>
 80102f2:	3001      	adds	r0, #1
 80102f4:	f000 80aa 	beq.w	801044c <_svfiprintf_r+0x1c8>
 80102f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102fa:	445a      	add	r2, fp
 80102fc:	9209      	str	r2, [sp, #36]	; 0x24
 80102fe:	f89a 3000 	ldrb.w	r3, [sl]
 8010302:	2b00      	cmp	r3, #0
 8010304:	f000 80a2 	beq.w	801044c <_svfiprintf_r+0x1c8>
 8010308:	2300      	movs	r3, #0
 801030a:	f04f 32ff 	mov.w	r2, #4294967295
 801030e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010312:	f10a 0a01 	add.w	sl, sl, #1
 8010316:	9304      	str	r3, [sp, #16]
 8010318:	9307      	str	r3, [sp, #28]
 801031a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801031e:	931a      	str	r3, [sp, #104]	; 0x68
 8010320:	4654      	mov	r4, sl
 8010322:	2205      	movs	r2, #5
 8010324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010328:	4851      	ldr	r0, [pc, #324]	; (8010470 <_svfiprintf_r+0x1ec>)
 801032a:	f7ef ff71 	bl	8000210 <memchr>
 801032e:	9a04      	ldr	r2, [sp, #16]
 8010330:	b9d8      	cbnz	r0, 801036a <_svfiprintf_r+0xe6>
 8010332:	06d0      	lsls	r0, r2, #27
 8010334:	bf44      	itt	mi
 8010336:	2320      	movmi	r3, #32
 8010338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801033c:	0711      	lsls	r1, r2, #28
 801033e:	bf44      	itt	mi
 8010340:	232b      	movmi	r3, #43	; 0x2b
 8010342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010346:	f89a 3000 	ldrb.w	r3, [sl]
 801034a:	2b2a      	cmp	r3, #42	; 0x2a
 801034c:	d015      	beq.n	801037a <_svfiprintf_r+0xf6>
 801034e:	9a07      	ldr	r2, [sp, #28]
 8010350:	4654      	mov	r4, sl
 8010352:	2000      	movs	r0, #0
 8010354:	f04f 0c0a 	mov.w	ip, #10
 8010358:	4621      	mov	r1, r4
 801035a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801035e:	3b30      	subs	r3, #48	; 0x30
 8010360:	2b09      	cmp	r3, #9
 8010362:	d94e      	bls.n	8010402 <_svfiprintf_r+0x17e>
 8010364:	b1b0      	cbz	r0, 8010394 <_svfiprintf_r+0x110>
 8010366:	9207      	str	r2, [sp, #28]
 8010368:	e014      	b.n	8010394 <_svfiprintf_r+0x110>
 801036a:	eba0 0308 	sub.w	r3, r0, r8
 801036e:	fa09 f303 	lsl.w	r3, r9, r3
 8010372:	4313      	orrs	r3, r2
 8010374:	9304      	str	r3, [sp, #16]
 8010376:	46a2      	mov	sl, r4
 8010378:	e7d2      	b.n	8010320 <_svfiprintf_r+0x9c>
 801037a:	9b03      	ldr	r3, [sp, #12]
 801037c:	1d19      	adds	r1, r3, #4
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	9103      	str	r1, [sp, #12]
 8010382:	2b00      	cmp	r3, #0
 8010384:	bfbb      	ittet	lt
 8010386:	425b      	neglt	r3, r3
 8010388:	f042 0202 	orrlt.w	r2, r2, #2
 801038c:	9307      	strge	r3, [sp, #28]
 801038e:	9307      	strlt	r3, [sp, #28]
 8010390:	bfb8      	it	lt
 8010392:	9204      	strlt	r2, [sp, #16]
 8010394:	7823      	ldrb	r3, [r4, #0]
 8010396:	2b2e      	cmp	r3, #46	; 0x2e
 8010398:	d10c      	bne.n	80103b4 <_svfiprintf_r+0x130>
 801039a:	7863      	ldrb	r3, [r4, #1]
 801039c:	2b2a      	cmp	r3, #42	; 0x2a
 801039e:	d135      	bne.n	801040c <_svfiprintf_r+0x188>
 80103a0:	9b03      	ldr	r3, [sp, #12]
 80103a2:	1d1a      	adds	r2, r3, #4
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	9203      	str	r2, [sp, #12]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	bfb8      	it	lt
 80103ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80103b0:	3402      	adds	r4, #2
 80103b2:	9305      	str	r3, [sp, #20]
 80103b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010480 <_svfiprintf_r+0x1fc>
 80103b8:	7821      	ldrb	r1, [r4, #0]
 80103ba:	2203      	movs	r2, #3
 80103bc:	4650      	mov	r0, sl
 80103be:	f7ef ff27 	bl	8000210 <memchr>
 80103c2:	b140      	cbz	r0, 80103d6 <_svfiprintf_r+0x152>
 80103c4:	2340      	movs	r3, #64	; 0x40
 80103c6:	eba0 000a 	sub.w	r0, r0, sl
 80103ca:	fa03 f000 	lsl.w	r0, r3, r0
 80103ce:	9b04      	ldr	r3, [sp, #16]
 80103d0:	4303      	orrs	r3, r0
 80103d2:	3401      	adds	r4, #1
 80103d4:	9304      	str	r3, [sp, #16]
 80103d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103da:	4826      	ldr	r0, [pc, #152]	; (8010474 <_svfiprintf_r+0x1f0>)
 80103dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103e0:	2206      	movs	r2, #6
 80103e2:	f7ef ff15 	bl	8000210 <memchr>
 80103e6:	2800      	cmp	r0, #0
 80103e8:	d038      	beq.n	801045c <_svfiprintf_r+0x1d8>
 80103ea:	4b23      	ldr	r3, [pc, #140]	; (8010478 <_svfiprintf_r+0x1f4>)
 80103ec:	bb1b      	cbnz	r3, 8010436 <_svfiprintf_r+0x1b2>
 80103ee:	9b03      	ldr	r3, [sp, #12]
 80103f0:	3307      	adds	r3, #7
 80103f2:	f023 0307 	bic.w	r3, r3, #7
 80103f6:	3308      	adds	r3, #8
 80103f8:	9303      	str	r3, [sp, #12]
 80103fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103fc:	4433      	add	r3, r6
 80103fe:	9309      	str	r3, [sp, #36]	; 0x24
 8010400:	e767      	b.n	80102d2 <_svfiprintf_r+0x4e>
 8010402:	fb0c 3202 	mla	r2, ip, r2, r3
 8010406:	460c      	mov	r4, r1
 8010408:	2001      	movs	r0, #1
 801040a:	e7a5      	b.n	8010358 <_svfiprintf_r+0xd4>
 801040c:	2300      	movs	r3, #0
 801040e:	3401      	adds	r4, #1
 8010410:	9305      	str	r3, [sp, #20]
 8010412:	4619      	mov	r1, r3
 8010414:	f04f 0c0a 	mov.w	ip, #10
 8010418:	4620      	mov	r0, r4
 801041a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801041e:	3a30      	subs	r2, #48	; 0x30
 8010420:	2a09      	cmp	r2, #9
 8010422:	d903      	bls.n	801042c <_svfiprintf_r+0x1a8>
 8010424:	2b00      	cmp	r3, #0
 8010426:	d0c5      	beq.n	80103b4 <_svfiprintf_r+0x130>
 8010428:	9105      	str	r1, [sp, #20]
 801042a:	e7c3      	b.n	80103b4 <_svfiprintf_r+0x130>
 801042c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010430:	4604      	mov	r4, r0
 8010432:	2301      	movs	r3, #1
 8010434:	e7f0      	b.n	8010418 <_svfiprintf_r+0x194>
 8010436:	ab03      	add	r3, sp, #12
 8010438:	9300      	str	r3, [sp, #0]
 801043a:	462a      	mov	r2, r5
 801043c:	4b0f      	ldr	r3, [pc, #60]	; (801047c <_svfiprintf_r+0x1f8>)
 801043e:	a904      	add	r1, sp, #16
 8010440:	4638      	mov	r0, r7
 8010442:	f7fc f99b 	bl	800c77c <_printf_float>
 8010446:	1c42      	adds	r2, r0, #1
 8010448:	4606      	mov	r6, r0
 801044a:	d1d6      	bne.n	80103fa <_svfiprintf_r+0x176>
 801044c:	89ab      	ldrh	r3, [r5, #12]
 801044e:	065b      	lsls	r3, r3, #25
 8010450:	f53f af2c 	bmi.w	80102ac <_svfiprintf_r+0x28>
 8010454:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010456:	b01d      	add	sp, #116	; 0x74
 8010458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801045c:	ab03      	add	r3, sp, #12
 801045e:	9300      	str	r3, [sp, #0]
 8010460:	462a      	mov	r2, r5
 8010462:	4b06      	ldr	r3, [pc, #24]	; (801047c <_svfiprintf_r+0x1f8>)
 8010464:	a904      	add	r1, sp, #16
 8010466:	4638      	mov	r0, r7
 8010468:	f7fc fc2c 	bl	800ccc4 <_printf_i>
 801046c:	e7eb      	b.n	8010446 <_svfiprintf_r+0x1c2>
 801046e:	bf00      	nop
 8010470:	080147d4 	.word	0x080147d4
 8010474:	080147de 	.word	0x080147de
 8010478:	0800c77d 	.word	0x0800c77d
 801047c:	080101cd 	.word	0x080101cd
 8010480:	080147da 	.word	0x080147da

08010484 <_sungetc_r>:
 8010484:	b538      	push	{r3, r4, r5, lr}
 8010486:	1c4b      	adds	r3, r1, #1
 8010488:	4614      	mov	r4, r2
 801048a:	d103      	bne.n	8010494 <_sungetc_r+0x10>
 801048c:	f04f 35ff 	mov.w	r5, #4294967295
 8010490:	4628      	mov	r0, r5
 8010492:	bd38      	pop	{r3, r4, r5, pc}
 8010494:	8993      	ldrh	r3, [r2, #12]
 8010496:	f023 0320 	bic.w	r3, r3, #32
 801049a:	8193      	strh	r3, [r2, #12]
 801049c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801049e:	6852      	ldr	r2, [r2, #4]
 80104a0:	b2cd      	uxtb	r5, r1
 80104a2:	b18b      	cbz	r3, 80104c8 <_sungetc_r+0x44>
 80104a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80104a6:	4293      	cmp	r3, r2
 80104a8:	dd08      	ble.n	80104bc <_sungetc_r+0x38>
 80104aa:	6823      	ldr	r3, [r4, #0]
 80104ac:	1e5a      	subs	r2, r3, #1
 80104ae:	6022      	str	r2, [r4, #0]
 80104b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80104b4:	6863      	ldr	r3, [r4, #4]
 80104b6:	3301      	adds	r3, #1
 80104b8:	6063      	str	r3, [r4, #4]
 80104ba:	e7e9      	b.n	8010490 <_sungetc_r+0xc>
 80104bc:	4621      	mov	r1, r4
 80104be:	f000 fbef 	bl	8010ca0 <__submore>
 80104c2:	2800      	cmp	r0, #0
 80104c4:	d0f1      	beq.n	80104aa <_sungetc_r+0x26>
 80104c6:	e7e1      	b.n	801048c <_sungetc_r+0x8>
 80104c8:	6921      	ldr	r1, [r4, #16]
 80104ca:	6823      	ldr	r3, [r4, #0]
 80104cc:	b151      	cbz	r1, 80104e4 <_sungetc_r+0x60>
 80104ce:	4299      	cmp	r1, r3
 80104d0:	d208      	bcs.n	80104e4 <_sungetc_r+0x60>
 80104d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80104d6:	42a9      	cmp	r1, r5
 80104d8:	d104      	bne.n	80104e4 <_sungetc_r+0x60>
 80104da:	3b01      	subs	r3, #1
 80104dc:	3201      	adds	r2, #1
 80104de:	6023      	str	r3, [r4, #0]
 80104e0:	6062      	str	r2, [r4, #4]
 80104e2:	e7d5      	b.n	8010490 <_sungetc_r+0xc>
 80104e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80104e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104ec:	6363      	str	r3, [r4, #52]	; 0x34
 80104ee:	2303      	movs	r3, #3
 80104f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80104f2:	4623      	mov	r3, r4
 80104f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80104f8:	6023      	str	r3, [r4, #0]
 80104fa:	2301      	movs	r3, #1
 80104fc:	e7dc      	b.n	80104b8 <_sungetc_r+0x34>

080104fe <__ssrefill_r>:
 80104fe:	b510      	push	{r4, lr}
 8010500:	460c      	mov	r4, r1
 8010502:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010504:	b169      	cbz	r1, 8010522 <__ssrefill_r+0x24>
 8010506:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801050a:	4299      	cmp	r1, r3
 801050c:	d001      	beq.n	8010512 <__ssrefill_r+0x14>
 801050e:	f7ff fd7d 	bl	801000c <_free_r>
 8010512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010514:	6063      	str	r3, [r4, #4]
 8010516:	2000      	movs	r0, #0
 8010518:	6360      	str	r0, [r4, #52]	; 0x34
 801051a:	b113      	cbz	r3, 8010522 <__ssrefill_r+0x24>
 801051c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801051e:	6023      	str	r3, [r4, #0]
 8010520:	bd10      	pop	{r4, pc}
 8010522:	6923      	ldr	r3, [r4, #16]
 8010524:	6023      	str	r3, [r4, #0]
 8010526:	2300      	movs	r3, #0
 8010528:	6063      	str	r3, [r4, #4]
 801052a:	89a3      	ldrh	r3, [r4, #12]
 801052c:	f043 0320 	orr.w	r3, r3, #32
 8010530:	81a3      	strh	r3, [r4, #12]
 8010532:	f04f 30ff 	mov.w	r0, #4294967295
 8010536:	e7f3      	b.n	8010520 <__ssrefill_r+0x22>

08010538 <__ssvfiscanf_r>:
 8010538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801053c:	460c      	mov	r4, r1
 801053e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010542:	2100      	movs	r1, #0
 8010544:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010548:	49a6      	ldr	r1, [pc, #664]	; (80107e4 <__ssvfiscanf_r+0x2ac>)
 801054a:	91a0      	str	r1, [sp, #640]	; 0x280
 801054c:	f10d 0804 	add.w	r8, sp, #4
 8010550:	49a5      	ldr	r1, [pc, #660]	; (80107e8 <__ssvfiscanf_r+0x2b0>)
 8010552:	4fa6      	ldr	r7, [pc, #664]	; (80107ec <__ssvfiscanf_r+0x2b4>)
 8010554:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80107f0 <__ssvfiscanf_r+0x2b8>
 8010558:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801055c:	4606      	mov	r6, r0
 801055e:	91a1      	str	r1, [sp, #644]	; 0x284
 8010560:	9300      	str	r3, [sp, #0]
 8010562:	7813      	ldrb	r3, [r2, #0]
 8010564:	2b00      	cmp	r3, #0
 8010566:	f000 815a 	beq.w	801081e <__ssvfiscanf_r+0x2e6>
 801056a:	5dd9      	ldrb	r1, [r3, r7]
 801056c:	f011 0108 	ands.w	r1, r1, #8
 8010570:	f102 0501 	add.w	r5, r2, #1
 8010574:	d019      	beq.n	80105aa <__ssvfiscanf_r+0x72>
 8010576:	6863      	ldr	r3, [r4, #4]
 8010578:	2b00      	cmp	r3, #0
 801057a:	dd0f      	ble.n	801059c <__ssvfiscanf_r+0x64>
 801057c:	6823      	ldr	r3, [r4, #0]
 801057e:	781a      	ldrb	r2, [r3, #0]
 8010580:	5cba      	ldrb	r2, [r7, r2]
 8010582:	0712      	lsls	r2, r2, #28
 8010584:	d401      	bmi.n	801058a <__ssvfiscanf_r+0x52>
 8010586:	462a      	mov	r2, r5
 8010588:	e7eb      	b.n	8010562 <__ssvfiscanf_r+0x2a>
 801058a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801058c:	3201      	adds	r2, #1
 801058e:	9245      	str	r2, [sp, #276]	; 0x114
 8010590:	6862      	ldr	r2, [r4, #4]
 8010592:	3301      	adds	r3, #1
 8010594:	3a01      	subs	r2, #1
 8010596:	6062      	str	r2, [r4, #4]
 8010598:	6023      	str	r3, [r4, #0]
 801059a:	e7ec      	b.n	8010576 <__ssvfiscanf_r+0x3e>
 801059c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801059e:	4621      	mov	r1, r4
 80105a0:	4630      	mov	r0, r6
 80105a2:	4798      	blx	r3
 80105a4:	2800      	cmp	r0, #0
 80105a6:	d0e9      	beq.n	801057c <__ssvfiscanf_r+0x44>
 80105a8:	e7ed      	b.n	8010586 <__ssvfiscanf_r+0x4e>
 80105aa:	2b25      	cmp	r3, #37	; 0x25
 80105ac:	d012      	beq.n	80105d4 <__ssvfiscanf_r+0x9c>
 80105ae:	469a      	mov	sl, r3
 80105b0:	6863      	ldr	r3, [r4, #4]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	f340 8091 	ble.w	80106da <__ssvfiscanf_r+0x1a2>
 80105b8:	6822      	ldr	r2, [r4, #0]
 80105ba:	7813      	ldrb	r3, [r2, #0]
 80105bc:	4553      	cmp	r3, sl
 80105be:	f040 812e 	bne.w	801081e <__ssvfiscanf_r+0x2e6>
 80105c2:	6863      	ldr	r3, [r4, #4]
 80105c4:	3b01      	subs	r3, #1
 80105c6:	6063      	str	r3, [r4, #4]
 80105c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80105ca:	3201      	adds	r2, #1
 80105cc:	3301      	adds	r3, #1
 80105ce:	6022      	str	r2, [r4, #0]
 80105d0:	9345      	str	r3, [sp, #276]	; 0x114
 80105d2:	e7d8      	b.n	8010586 <__ssvfiscanf_r+0x4e>
 80105d4:	9141      	str	r1, [sp, #260]	; 0x104
 80105d6:	9143      	str	r1, [sp, #268]	; 0x10c
 80105d8:	7853      	ldrb	r3, [r2, #1]
 80105da:	2b2a      	cmp	r3, #42	; 0x2a
 80105dc:	bf02      	ittt	eq
 80105de:	2310      	moveq	r3, #16
 80105e0:	1c95      	addeq	r5, r2, #2
 80105e2:	9341      	streq	r3, [sp, #260]	; 0x104
 80105e4:	220a      	movs	r2, #10
 80105e6:	46aa      	mov	sl, r5
 80105e8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80105ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80105f0:	2b09      	cmp	r3, #9
 80105f2:	d91d      	bls.n	8010630 <__ssvfiscanf_r+0xf8>
 80105f4:	487e      	ldr	r0, [pc, #504]	; (80107f0 <__ssvfiscanf_r+0x2b8>)
 80105f6:	2203      	movs	r2, #3
 80105f8:	f7ef fe0a 	bl	8000210 <memchr>
 80105fc:	b140      	cbz	r0, 8010610 <__ssvfiscanf_r+0xd8>
 80105fe:	2301      	movs	r3, #1
 8010600:	eba0 0009 	sub.w	r0, r0, r9
 8010604:	fa03 f000 	lsl.w	r0, r3, r0
 8010608:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801060a:	4318      	orrs	r0, r3
 801060c:	9041      	str	r0, [sp, #260]	; 0x104
 801060e:	4655      	mov	r5, sl
 8010610:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010614:	2b78      	cmp	r3, #120	; 0x78
 8010616:	d806      	bhi.n	8010626 <__ssvfiscanf_r+0xee>
 8010618:	2b57      	cmp	r3, #87	; 0x57
 801061a:	d810      	bhi.n	801063e <__ssvfiscanf_r+0x106>
 801061c:	2b25      	cmp	r3, #37	; 0x25
 801061e:	d0c6      	beq.n	80105ae <__ssvfiscanf_r+0x76>
 8010620:	d856      	bhi.n	80106d0 <__ssvfiscanf_r+0x198>
 8010622:	2b00      	cmp	r3, #0
 8010624:	d064      	beq.n	80106f0 <__ssvfiscanf_r+0x1b8>
 8010626:	2303      	movs	r3, #3
 8010628:	9347      	str	r3, [sp, #284]	; 0x11c
 801062a:	230a      	movs	r3, #10
 801062c:	9342      	str	r3, [sp, #264]	; 0x108
 801062e:	e071      	b.n	8010714 <__ssvfiscanf_r+0x1dc>
 8010630:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010632:	fb02 1103 	mla	r1, r2, r3, r1
 8010636:	3930      	subs	r1, #48	; 0x30
 8010638:	9143      	str	r1, [sp, #268]	; 0x10c
 801063a:	4655      	mov	r5, sl
 801063c:	e7d3      	b.n	80105e6 <__ssvfiscanf_r+0xae>
 801063e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010642:	2a20      	cmp	r2, #32
 8010644:	d8ef      	bhi.n	8010626 <__ssvfiscanf_r+0xee>
 8010646:	a101      	add	r1, pc, #4	; (adr r1, 801064c <__ssvfiscanf_r+0x114>)
 8010648:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801064c:	080106ff 	.word	0x080106ff
 8010650:	08010627 	.word	0x08010627
 8010654:	08010627 	.word	0x08010627
 8010658:	0801075d 	.word	0x0801075d
 801065c:	08010627 	.word	0x08010627
 8010660:	08010627 	.word	0x08010627
 8010664:	08010627 	.word	0x08010627
 8010668:	08010627 	.word	0x08010627
 801066c:	08010627 	.word	0x08010627
 8010670:	08010627 	.word	0x08010627
 8010674:	08010627 	.word	0x08010627
 8010678:	08010773 	.word	0x08010773
 801067c:	08010749 	.word	0x08010749
 8010680:	080106d7 	.word	0x080106d7
 8010684:	080106d7 	.word	0x080106d7
 8010688:	080106d7 	.word	0x080106d7
 801068c:	08010627 	.word	0x08010627
 8010690:	0801074d 	.word	0x0801074d
 8010694:	08010627 	.word	0x08010627
 8010698:	08010627 	.word	0x08010627
 801069c:	08010627 	.word	0x08010627
 80106a0:	08010627 	.word	0x08010627
 80106a4:	08010783 	.word	0x08010783
 80106a8:	08010755 	.word	0x08010755
 80106ac:	080106f7 	.word	0x080106f7
 80106b0:	08010627 	.word	0x08010627
 80106b4:	08010627 	.word	0x08010627
 80106b8:	0801077f 	.word	0x0801077f
 80106bc:	08010627 	.word	0x08010627
 80106c0:	08010749 	.word	0x08010749
 80106c4:	08010627 	.word	0x08010627
 80106c8:	08010627 	.word	0x08010627
 80106cc:	080106ff 	.word	0x080106ff
 80106d0:	3b45      	subs	r3, #69	; 0x45
 80106d2:	2b02      	cmp	r3, #2
 80106d4:	d8a7      	bhi.n	8010626 <__ssvfiscanf_r+0xee>
 80106d6:	2305      	movs	r3, #5
 80106d8:	e01b      	b.n	8010712 <__ssvfiscanf_r+0x1da>
 80106da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80106dc:	4621      	mov	r1, r4
 80106de:	4630      	mov	r0, r6
 80106e0:	4798      	blx	r3
 80106e2:	2800      	cmp	r0, #0
 80106e4:	f43f af68 	beq.w	80105b8 <__ssvfiscanf_r+0x80>
 80106e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80106ea:	2800      	cmp	r0, #0
 80106ec:	f040 808d 	bne.w	801080a <__ssvfiscanf_r+0x2d2>
 80106f0:	f04f 30ff 	mov.w	r0, #4294967295
 80106f4:	e08f      	b.n	8010816 <__ssvfiscanf_r+0x2de>
 80106f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80106f8:	f042 0220 	orr.w	r2, r2, #32
 80106fc:	9241      	str	r2, [sp, #260]	; 0x104
 80106fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010704:	9241      	str	r2, [sp, #260]	; 0x104
 8010706:	2210      	movs	r2, #16
 8010708:	2b6f      	cmp	r3, #111	; 0x6f
 801070a:	9242      	str	r2, [sp, #264]	; 0x108
 801070c:	bf34      	ite	cc
 801070e:	2303      	movcc	r3, #3
 8010710:	2304      	movcs	r3, #4
 8010712:	9347      	str	r3, [sp, #284]	; 0x11c
 8010714:	6863      	ldr	r3, [r4, #4]
 8010716:	2b00      	cmp	r3, #0
 8010718:	dd42      	ble.n	80107a0 <__ssvfiscanf_r+0x268>
 801071a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801071c:	0659      	lsls	r1, r3, #25
 801071e:	d404      	bmi.n	801072a <__ssvfiscanf_r+0x1f2>
 8010720:	6823      	ldr	r3, [r4, #0]
 8010722:	781a      	ldrb	r2, [r3, #0]
 8010724:	5cba      	ldrb	r2, [r7, r2]
 8010726:	0712      	lsls	r2, r2, #28
 8010728:	d441      	bmi.n	80107ae <__ssvfiscanf_r+0x276>
 801072a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801072c:	2b02      	cmp	r3, #2
 801072e:	dc50      	bgt.n	80107d2 <__ssvfiscanf_r+0x29a>
 8010730:	466b      	mov	r3, sp
 8010732:	4622      	mov	r2, r4
 8010734:	a941      	add	r1, sp, #260	; 0x104
 8010736:	4630      	mov	r0, r6
 8010738:	f000 f876 	bl	8010828 <_scanf_chars>
 801073c:	2801      	cmp	r0, #1
 801073e:	d06e      	beq.n	801081e <__ssvfiscanf_r+0x2e6>
 8010740:	2802      	cmp	r0, #2
 8010742:	f47f af20 	bne.w	8010586 <__ssvfiscanf_r+0x4e>
 8010746:	e7cf      	b.n	80106e8 <__ssvfiscanf_r+0x1b0>
 8010748:	220a      	movs	r2, #10
 801074a:	e7dd      	b.n	8010708 <__ssvfiscanf_r+0x1d0>
 801074c:	2300      	movs	r3, #0
 801074e:	9342      	str	r3, [sp, #264]	; 0x108
 8010750:	2303      	movs	r3, #3
 8010752:	e7de      	b.n	8010712 <__ssvfiscanf_r+0x1da>
 8010754:	2308      	movs	r3, #8
 8010756:	9342      	str	r3, [sp, #264]	; 0x108
 8010758:	2304      	movs	r3, #4
 801075a:	e7da      	b.n	8010712 <__ssvfiscanf_r+0x1da>
 801075c:	4629      	mov	r1, r5
 801075e:	4640      	mov	r0, r8
 8010760:	f000 f9de 	bl	8010b20 <__sccl>
 8010764:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801076a:	9341      	str	r3, [sp, #260]	; 0x104
 801076c:	4605      	mov	r5, r0
 801076e:	2301      	movs	r3, #1
 8010770:	e7cf      	b.n	8010712 <__ssvfiscanf_r+0x1da>
 8010772:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010778:	9341      	str	r3, [sp, #260]	; 0x104
 801077a:	2300      	movs	r3, #0
 801077c:	e7c9      	b.n	8010712 <__ssvfiscanf_r+0x1da>
 801077e:	2302      	movs	r3, #2
 8010780:	e7c7      	b.n	8010712 <__ssvfiscanf_r+0x1da>
 8010782:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010784:	06c3      	lsls	r3, r0, #27
 8010786:	f53f aefe 	bmi.w	8010586 <__ssvfiscanf_r+0x4e>
 801078a:	9b00      	ldr	r3, [sp, #0]
 801078c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801078e:	1d19      	adds	r1, r3, #4
 8010790:	9100      	str	r1, [sp, #0]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f010 0f01 	tst.w	r0, #1
 8010798:	bf14      	ite	ne
 801079a:	801a      	strhne	r2, [r3, #0]
 801079c:	601a      	streq	r2, [r3, #0]
 801079e:	e6f2      	b.n	8010586 <__ssvfiscanf_r+0x4e>
 80107a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80107a2:	4621      	mov	r1, r4
 80107a4:	4630      	mov	r0, r6
 80107a6:	4798      	blx	r3
 80107a8:	2800      	cmp	r0, #0
 80107aa:	d0b6      	beq.n	801071a <__ssvfiscanf_r+0x1e2>
 80107ac:	e79c      	b.n	80106e8 <__ssvfiscanf_r+0x1b0>
 80107ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80107b0:	3201      	adds	r2, #1
 80107b2:	9245      	str	r2, [sp, #276]	; 0x114
 80107b4:	6862      	ldr	r2, [r4, #4]
 80107b6:	3a01      	subs	r2, #1
 80107b8:	2a00      	cmp	r2, #0
 80107ba:	6062      	str	r2, [r4, #4]
 80107bc:	dd02      	ble.n	80107c4 <__ssvfiscanf_r+0x28c>
 80107be:	3301      	adds	r3, #1
 80107c0:	6023      	str	r3, [r4, #0]
 80107c2:	e7ad      	b.n	8010720 <__ssvfiscanf_r+0x1e8>
 80107c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80107c6:	4621      	mov	r1, r4
 80107c8:	4630      	mov	r0, r6
 80107ca:	4798      	blx	r3
 80107cc:	2800      	cmp	r0, #0
 80107ce:	d0a7      	beq.n	8010720 <__ssvfiscanf_r+0x1e8>
 80107d0:	e78a      	b.n	80106e8 <__ssvfiscanf_r+0x1b0>
 80107d2:	2b04      	cmp	r3, #4
 80107d4:	dc0e      	bgt.n	80107f4 <__ssvfiscanf_r+0x2bc>
 80107d6:	466b      	mov	r3, sp
 80107d8:	4622      	mov	r2, r4
 80107da:	a941      	add	r1, sp, #260	; 0x104
 80107dc:	4630      	mov	r0, r6
 80107de:	f000 f87d 	bl	80108dc <_scanf_i>
 80107e2:	e7ab      	b.n	801073c <__ssvfiscanf_r+0x204>
 80107e4:	08010485 	.word	0x08010485
 80107e8:	080104ff 	.word	0x080104ff
 80107ec:	08014471 	.word	0x08014471
 80107f0:	080147da 	.word	0x080147da
 80107f4:	4b0b      	ldr	r3, [pc, #44]	; (8010824 <__ssvfiscanf_r+0x2ec>)
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	f43f aec5 	beq.w	8010586 <__ssvfiscanf_r+0x4e>
 80107fc:	466b      	mov	r3, sp
 80107fe:	4622      	mov	r2, r4
 8010800:	a941      	add	r1, sp, #260	; 0x104
 8010802:	4630      	mov	r0, r6
 8010804:	f7fc fb84 	bl	800cf10 <_scanf_float>
 8010808:	e798      	b.n	801073c <__ssvfiscanf_r+0x204>
 801080a:	89a3      	ldrh	r3, [r4, #12]
 801080c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010810:	bf18      	it	ne
 8010812:	f04f 30ff 	movne.w	r0, #4294967295
 8010816:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801081a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801081e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010820:	e7f9      	b.n	8010816 <__ssvfiscanf_r+0x2de>
 8010822:	bf00      	nop
 8010824:	0800cf11 	.word	0x0800cf11

08010828 <_scanf_chars>:
 8010828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801082c:	4615      	mov	r5, r2
 801082e:	688a      	ldr	r2, [r1, #8]
 8010830:	4680      	mov	r8, r0
 8010832:	460c      	mov	r4, r1
 8010834:	b932      	cbnz	r2, 8010844 <_scanf_chars+0x1c>
 8010836:	698a      	ldr	r2, [r1, #24]
 8010838:	2a00      	cmp	r2, #0
 801083a:	bf0c      	ite	eq
 801083c:	2201      	moveq	r2, #1
 801083e:	f04f 32ff 	movne.w	r2, #4294967295
 8010842:	608a      	str	r2, [r1, #8]
 8010844:	6822      	ldr	r2, [r4, #0]
 8010846:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80108d8 <_scanf_chars+0xb0>
 801084a:	06d1      	lsls	r1, r2, #27
 801084c:	bf5f      	itttt	pl
 801084e:	681a      	ldrpl	r2, [r3, #0]
 8010850:	1d11      	addpl	r1, r2, #4
 8010852:	6019      	strpl	r1, [r3, #0]
 8010854:	6816      	ldrpl	r6, [r2, #0]
 8010856:	2700      	movs	r7, #0
 8010858:	69a0      	ldr	r0, [r4, #24]
 801085a:	b188      	cbz	r0, 8010880 <_scanf_chars+0x58>
 801085c:	2801      	cmp	r0, #1
 801085e:	d107      	bne.n	8010870 <_scanf_chars+0x48>
 8010860:	682a      	ldr	r2, [r5, #0]
 8010862:	7811      	ldrb	r1, [r2, #0]
 8010864:	6962      	ldr	r2, [r4, #20]
 8010866:	5c52      	ldrb	r2, [r2, r1]
 8010868:	b952      	cbnz	r2, 8010880 <_scanf_chars+0x58>
 801086a:	2f00      	cmp	r7, #0
 801086c:	d031      	beq.n	80108d2 <_scanf_chars+0xaa>
 801086e:	e022      	b.n	80108b6 <_scanf_chars+0x8e>
 8010870:	2802      	cmp	r0, #2
 8010872:	d120      	bne.n	80108b6 <_scanf_chars+0x8e>
 8010874:	682b      	ldr	r3, [r5, #0]
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	f813 3009 	ldrb.w	r3, [r3, r9]
 801087c:	071b      	lsls	r3, r3, #28
 801087e:	d41a      	bmi.n	80108b6 <_scanf_chars+0x8e>
 8010880:	6823      	ldr	r3, [r4, #0]
 8010882:	06da      	lsls	r2, r3, #27
 8010884:	bf5e      	ittt	pl
 8010886:	682b      	ldrpl	r3, [r5, #0]
 8010888:	781b      	ldrbpl	r3, [r3, #0]
 801088a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801088e:	682a      	ldr	r2, [r5, #0]
 8010890:	686b      	ldr	r3, [r5, #4]
 8010892:	3201      	adds	r2, #1
 8010894:	602a      	str	r2, [r5, #0]
 8010896:	68a2      	ldr	r2, [r4, #8]
 8010898:	3b01      	subs	r3, #1
 801089a:	3a01      	subs	r2, #1
 801089c:	606b      	str	r3, [r5, #4]
 801089e:	3701      	adds	r7, #1
 80108a0:	60a2      	str	r2, [r4, #8]
 80108a2:	b142      	cbz	r2, 80108b6 <_scanf_chars+0x8e>
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	dcd7      	bgt.n	8010858 <_scanf_chars+0x30>
 80108a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80108ac:	4629      	mov	r1, r5
 80108ae:	4640      	mov	r0, r8
 80108b0:	4798      	blx	r3
 80108b2:	2800      	cmp	r0, #0
 80108b4:	d0d0      	beq.n	8010858 <_scanf_chars+0x30>
 80108b6:	6823      	ldr	r3, [r4, #0]
 80108b8:	f013 0310 	ands.w	r3, r3, #16
 80108bc:	d105      	bne.n	80108ca <_scanf_chars+0xa2>
 80108be:	68e2      	ldr	r2, [r4, #12]
 80108c0:	3201      	adds	r2, #1
 80108c2:	60e2      	str	r2, [r4, #12]
 80108c4:	69a2      	ldr	r2, [r4, #24]
 80108c6:	b102      	cbz	r2, 80108ca <_scanf_chars+0xa2>
 80108c8:	7033      	strb	r3, [r6, #0]
 80108ca:	6923      	ldr	r3, [r4, #16]
 80108cc:	443b      	add	r3, r7
 80108ce:	6123      	str	r3, [r4, #16]
 80108d0:	2000      	movs	r0, #0
 80108d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108d6:	bf00      	nop
 80108d8:	08014471 	.word	0x08014471

080108dc <_scanf_i>:
 80108dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e0:	4698      	mov	r8, r3
 80108e2:	4b76      	ldr	r3, [pc, #472]	; (8010abc <_scanf_i+0x1e0>)
 80108e4:	460c      	mov	r4, r1
 80108e6:	4682      	mov	sl, r0
 80108e8:	4616      	mov	r6, r2
 80108ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80108ee:	b087      	sub	sp, #28
 80108f0:	ab03      	add	r3, sp, #12
 80108f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80108f6:	4b72      	ldr	r3, [pc, #456]	; (8010ac0 <_scanf_i+0x1e4>)
 80108f8:	69a1      	ldr	r1, [r4, #24]
 80108fa:	4a72      	ldr	r2, [pc, #456]	; (8010ac4 <_scanf_i+0x1e8>)
 80108fc:	2903      	cmp	r1, #3
 80108fe:	bf18      	it	ne
 8010900:	461a      	movne	r2, r3
 8010902:	68a3      	ldr	r3, [r4, #8]
 8010904:	9201      	str	r2, [sp, #4]
 8010906:	1e5a      	subs	r2, r3, #1
 8010908:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801090c:	bf88      	it	hi
 801090e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010912:	4627      	mov	r7, r4
 8010914:	bf82      	ittt	hi
 8010916:	eb03 0905 	addhi.w	r9, r3, r5
 801091a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801091e:	60a3      	strhi	r3, [r4, #8]
 8010920:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010924:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010928:	bf98      	it	ls
 801092a:	f04f 0900 	movls.w	r9, #0
 801092e:	6023      	str	r3, [r4, #0]
 8010930:	463d      	mov	r5, r7
 8010932:	f04f 0b00 	mov.w	fp, #0
 8010936:	6831      	ldr	r1, [r6, #0]
 8010938:	ab03      	add	r3, sp, #12
 801093a:	7809      	ldrb	r1, [r1, #0]
 801093c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010940:	2202      	movs	r2, #2
 8010942:	f7ef fc65 	bl	8000210 <memchr>
 8010946:	b328      	cbz	r0, 8010994 <_scanf_i+0xb8>
 8010948:	f1bb 0f01 	cmp.w	fp, #1
 801094c:	d159      	bne.n	8010a02 <_scanf_i+0x126>
 801094e:	6862      	ldr	r2, [r4, #4]
 8010950:	b92a      	cbnz	r2, 801095e <_scanf_i+0x82>
 8010952:	6822      	ldr	r2, [r4, #0]
 8010954:	2308      	movs	r3, #8
 8010956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801095a:	6063      	str	r3, [r4, #4]
 801095c:	6022      	str	r2, [r4, #0]
 801095e:	6822      	ldr	r2, [r4, #0]
 8010960:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010964:	6022      	str	r2, [r4, #0]
 8010966:	68a2      	ldr	r2, [r4, #8]
 8010968:	1e51      	subs	r1, r2, #1
 801096a:	60a1      	str	r1, [r4, #8]
 801096c:	b192      	cbz	r2, 8010994 <_scanf_i+0xb8>
 801096e:	6832      	ldr	r2, [r6, #0]
 8010970:	1c51      	adds	r1, r2, #1
 8010972:	6031      	str	r1, [r6, #0]
 8010974:	7812      	ldrb	r2, [r2, #0]
 8010976:	f805 2b01 	strb.w	r2, [r5], #1
 801097a:	6872      	ldr	r2, [r6, #4]
 801097c:	3a01      	subs	r2, #1
 801097e:	2a00      	cmp	r2, #0
 8010980:	6072      	str	r2, [r6, #4]
 8010982:	dc07      	bgt.n	8010994 <_scanf_i+0xb8>
 8010984:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010988:	4631      	mov	r1, r6
 801098a:	4650      	mov	r0, sl
 801098c:	4790      	blx	r2
 801098e:	2800      	cmp	r0, #0
 8010990:	f040 8085 	bne.w	8010a9e <_scanf_i+0x1c2>
 8010994:	f10b 0b01 	add.w	fp, fp, #1
 8010998:	f1bb 0f03 	cmp.w	fp, #3
 801099c:	d1cb      	bne.n	8010936 <_scanf_i+0x5a>
 801099e:	6863      	ldr	r3, [r4, #4]
 80109a0:	b90b      	cbnz	r3, 80109a6 <_scanf_i+0xca>
 80109a2:	230a      	movs	r3, #10
 80109a4:	6063      	str	r3, [r4, #4]
 80109a6:	6863      	ldr	r3, [r4, #4]
 80109a8:	4947      	ldr	r1, [pc, #284]	; (8010ac8 <_scanf_i+0x1ec>)
 80109aa:	6960      	ldr	r0, [r4, #20]
 80109ac:	1ac9      	subs	r1, r1, r3
 80109ae:	f000 f8b7 	bl	8010b20 <__sccl>
 80109b2:	f04f 0b00 	mov.w	fp, #0
 80109b6:	68a3      	ldr	r3, [r4, #8]
 80109b8:	6822      	ldr	r2, [r4, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d03d      	beq.n	8010a3a <_scanf_i+0x15e>
 80109be:	6831      	ldr	r1, [r6, #0]
 80109c0:	6960      	ldr	r0, [r4, #20]
 80109c2:	f891 c000 	ldrb.w	ip, [r1]
 80109c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80109ca:	2800      	cmp	r0, #0
 80109cc:	d035      	beq.n	8010a3a <_scanf_i+0x15e>
 80109ce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80109d2:	d124      	bne.n	8010a1e <_scanf_i+0x142>
 80109d4:	0510      	lsls	r0, r2, #20
 80109d6:	d522      	bpl.n	8010a1e <_scanf_i+0x142>
 80109d8:	f10b 0b01 	add.w	fp, fp, #1
 80109dc:	f1b9 0f00 	cmp.w	r9, #0
 80109e0:	d003      	beq.n	80109ea <_scanf_i+0x10e>
 80109e2:	3301      	adds	r3, #1
 80109e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80109e8:	60a3      	str	r3, [r4, #8]
 80109ea:	6873      	ldr	r3, [r6, #4]
 80109ec:	3b01      	subs	r3, #1
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	6073      	str	r3, [r6, #4]
 80109f2:	dd1b      	ble.n	8010a2c <_scanf_i+0x150>
 80109f4:	6833      	ldr	r3, [r6, #0]
 80109f6:	3301      	adds	r3, #1
 80109f8:	6033      	str	r3, [r6, #0]
 80109fa:	68a3      	ldr	r3, [r4, #8]
 80109fc:	3b01      	subs	r3, #1
 80109fe:	60a3      	str	r3, [r4, #8]
 8010a00:	e7d9      	b.n	80109b6 <_scanf_i+0xda>
 8010a02:	f1bb 0f02 	cmp.w	fp, #2
 8010a06:	d1ae      	bne.n	8010966 <_scanf_i+0x8a>
 8010a08:	6822      	ldr	r2, [r4, #0]
 8010a0a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010a0e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010a12:	d1bf      	bne.n	8010994 <_scanf_i+0xb8>
 8010a14:	2310      	movs	r3, #16
 8010a16:	6063      	str	r3, [r4, #4]
 8010a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010a1c:	e7a2      	b.n	8010964 <_scanf_i+0x88>
 8010a1e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010a22:	6022      	str	r2, [r4, #0]
 8010a24:	780b      	ldrb	r3, [r1, #0]
 8010a26:	f805 3b01 	strb.w	r3, [r5], #1
 8010a2a:	e7de      	b.n	80109ea <_scanf_i+0x10e>
 8010a2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010a30:	4631      	mov	r1, r6
 8010a32:	4650      	mov	r0, sl
 8010a34:	4798      	blx	r3
 8010a36:	2800      	cmp	r0, #0
 8010a38:	d0df      	beq.n	80109fa <_scanf_i+0x11e>
 8010a3a:	6823      	ldr	r3, [r4, #0]
 8010a3c:	05db      	lsls	r3, r3, #23
 8010a3e:	d50d      	bpl.n	8010a5c <_scanf_i+0x180>
 8010a40:	42bd      	cmp	r5, r7
 8010a42:	d909      	bls.n	8010a58 <_scanf_i+0x17c>
 8010a44:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010a48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010a4c:	4632      	mov	r2, r6
 8010a4e:	4650      	mov	r0, sl
 8010a50:	4798      	blx	r3
 8010a52:	f105 39ff 	add.w	r9, r5, #4294967295
 8010a56:	464d      	mov	r5, r9
 8010a58:	42bd      	cmp	r5, r7
 8010a5a:	d02d      	beq.n	8010ab8 <_scanf_i+0x1dc>
 8010a5c:	6822      	ldr	r2, [r4, #0]
 8010a5e:	f012 0210 	ands.w	r2, r2, #16
 8010a62:	d113      	bne.n	8010a8c <_scanf_i+0x1b0>
 8010a64:	702a      	strb	r2, [r5, #0]
 8010a66:	6863      	ldr	r3, [r4, #4]
 8010a68:	9e01      	ldr	r6, [sp, #4]
 8010a6a:	4639      	mov	r1, r7
 8010a6c:	4650      	mov	r0, sl
 8010a6e:	47b0      	blx	r6
 8010a70:	6821      	ldr	r1, [r4, #0]
 8010a72:	f8d8 3000 	ldr.w	r3, [r8]
 8010a76:	f011 0f20 	tst.w	r1, #32
 8010a7a:	d013      	beq.n	8010aa4 <_scanf_i+0x1c8>
 8010a7c:	1d1a      	adds	r2, r3, #4
 8010a7e:	f8c8 2000 	str.w	r2, [r8]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	6018      	str	r0, [r3, #0]
 8010a86:	68e3      	ldr	r3, [r4, #12]
 8010a88:	3301      	adds	r3, #1
 8010a8a:	60e3      	str	r3, [r4, #12]
 8010a8c:	1bed      	subs	r5, r5, r7
 8010a8e:	44ab      	add	fp, r5
 8010a90:	6925      	ldr	r5, [r4, #16]
 8010a92:	445d      	add	r5, fp
 8010a94:	6125      	str	r5, [r4, #16]
 8010a96:	2000      	movs	r0, #0
 8010a98:	b007      	add	sp, #28
 8010a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a9e:	f04f 0b00 	mov.w	fp, #0
 8010aa2:	e7ca      	b.n	8010a3a <_scanf_i+0x15e>
 8010aa4:	1d1a      	adds	r2, r3, #4
 8010aa6:	f8c8 2000 	str.w	r2, [r8]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	f011 0f01 	tst.w	r1, #1
 8010ab0:	bf14      	ite	ne
 8010ab2:	8018      	strhne	r0, [r3, #0]
 8010ab4:	6018      	streq	r0, [r3, #0]
 8010ab6:	e7e6      	b.n	8010a86 <_scanf_i+0x1aa>
 8010ab8:	2001      	movs	r0, #1
 8010aba:	e7ed      	b.n	8010a98 <_scanf_i+0x1bc>
 8010abc:	080143d4 	.word	0x080143d4
 8010ac0:	08010c9d 	.word	0x08010c9d
 8010ac4:	0800e1cd 	.word	0x0800e1cd
 8010ac8:	080147fe 	.word	0x080147fe

08010acc <_read_r>:
 8010acc:	b538      	push	{r3, r4, r5, lr}
 8010ace:	4d07      	ldr	r5, [pc, #28]	; (8010aec <_read_r+0x20>)
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	4608      	mov	r0, r1
 8010ad4:	4611      	mov	r1, r2
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	602a      	str	r2, [r5, #0]
 8010ada:	461a      	mov	r2, r3
 8010adc:	f7f5 fb08 	bl	80060f0 <_read>
 8010ae0:	1c43      	adds	r3, r0, #1
 8010ae2:	d102      	bne.n	8010aea <_read_r+0x1e>
 8010ae4:	682b      	ldr	r3, [r5, #0]
 8010ae6:	b103      	cbz	r3, 8010aea <_read_r+0x1e>
 8010ae8:	6023      	str	r3, [r4, #0]
 8010aea:	bd38      	pop	{r3, r4, r5, pc}
 8010aec:	20013b68 	.word	0x20013b68

08010af0 <nan>:
 8010af0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010af8 <nan+0x8>
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop
 8010af8:	00000000 	.word	0x00000000
 8010afc:	7ff80000 	.word	0x7ff80000

08010b00 <_sbrk_r>:
 8010b00:	b538      	push	{r3, r4, r5, lr}
 8010b02:	4d06      	ldr	r5, [pc, #24]	; (8010b1c <_sbrk_r+0x1c>)
 8010b04:	2300      	movs	r3, #0
 8010b06:	4604      	mov	r4, r0
 8010b08:	4608      	mov	r0, r1
 8010b0a:	602b      	str	r3, [r5, #0]
 8010b0c:	f7f5 fb5e 	bl	80061cc <_sbrk>
 8010b10:	1c43      	adds	r3, r0, #1
 8010b12:	d102      	bne.n	8010b1a <_sbrk_r+0x1a>
 8010b14:	682b      	ldr	r3, [r5, #0]
 8010b16:	b103      	cbz	r3, 8010b1a <_sbrk_r+0x1a>
 8010b18:	6023      	str	r3, [r4, #0]
 8010b1a:	bd38      	pop	{r3, r4, r5, pc}
 8010b1c:	20013b68 	.word	0x20013b68

08010b20 <__sccl>:
 8010b20:	b570      	push	{r4, r5, r6, lr}
 8010b22:	780b      	ldrb	r3, [r1, #0]
 8010b24:	4604      	mov	r4, r0
 8010b26:	2b5e      	cmp	r3, #94	; 0x5e
 8010b28:	bf0b      	itete	eq
 8010b2a:	784b      	ldrbeq	r3, [r1, #1]
 8010b2c:	1c48      	addne	r0, r1, #1
 8010b2e:	1c88      	addeq	r0, r1, #2
 8010b30:	2200      	movne	r2, #0
 8010b32:	bf08      	it	eq
 8010b34:	2201      	moveq	r2, #1
 8010b36:	1e61      	subs	r1, r4, #1
 8010b38:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010b3c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010b40:	42a9      	cmp	r1, r5
 8010b42:	d1fb      	bne.n	8010b3c <__sccl+0x1c>
 8010b44:	b90b      	cbnz	r3, 8010b4a <__sccl+0x2a>
 8010b46:	3801      	subs	r0, #1
 8010b48:	bd70      	pop	{r4, r5, r6, pc}
 8010b4a:	f082 0201 	eor.w	r2, r2, #1
 8010b4e:	54e2      	strb	r2, [r4, r3]
 8010b50:	4605      	mov	r5, r0
 8010b52:	4628      	mov	r0, r5
 8010b54:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010b58:	292d      	cmp	r1, #45	; 0x2d
 8010b5a:	d006      	beq.n	8010b6a <__sccl+0x4a>
 8010b5c:	295d      	cmp	r1, #93	; 0x5d
 8010b5e:	d0f3      	beq.n	8010b48 <__sccl+0x28>
 8010b60:	b909      	cbnz	r1, 8010b66 <__sccl+0x46>
 8010b62:	4628      	mov	r0, r5
 8010b64:	e7f0      	b.n	8010b48 <__sccl+0x28>
 8010b66:	460b      	mov	r3, r1
 8010b68:	e7f1      	b.n	8010b4e <__sccl+0x2e>
 8010b6a:	786e      	ldrb	r6, [r5, #1]
 8010b6c:	2e5d      	cmp	r6, #93	; 0x5d
 8010b6e:	d0fa      	beq.n	8010b66 <__sccl+0x46>
 8010b70:	42b3      	cmp	r3, r6
 8010b72:	dcf8      	bgt.n	8010b66 <__sccl+0x46>
 8010b74:	3502      	adds	r5, #2
 8010b76:	4619      	mov	r1, r3
 8010b78:	3101      	adds	r1, #1
 8010b7a:	428e      	cmp	r6, r1
 8010b7c:	5462      	strb	r2, [r4, r1]
 8010b7e:	dcfb      	bgt.n	8010b78 <__sccl+0x58>
 8010b80:	1af1      	subs	r1, r6, r3
 8010b82:	3901      	subs	r1, #1
 8010b84:	1c58      	adds	r0, r3, #1
 8010b86:	42b3      	cmp	r3, r6
 8010b88:	bfa8      	it	ge
 8010b8a:	2100      	movge	r1, #0
 8010b8c:	1843      	adds	r3, r0, r1
 8010b8e:	e7e0      	b.n	8010b52 <__sccl+0x32>

08010b90 <strncmp>:
 8010b90:	b510      	push	{r4, lr}
 8010b92:	b17a      	cbz	r2, 8010bb4 <strncmp+0x24>
 8010b94:	4603      	mov	r3, r0
 8010b96:	3901      	subs	r1, #1
 8010b98:	1884      	adds	r4, r0, r2
 8010b9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010b9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010ba2:	4290      	cmp	r0, r2
 8010ba4:	d101      	bne.n	8010baa <strncmp+0x1a>
 8010ba6:	42a3      	cmp	r3, r4
 8010ba8:	d101      	bne.n	8010bae <strncmp+0x1e>
 8010baa:	1a80      	subs	r0, r0, r2
 8010bac:	bd10      	pop	{r4, pc}
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	d1f3      	bne.n	8010b9a <strncmp+0xa>
 8010bb2:	e7fa      	b.n	8010baa <strncmp+0x1a>
 8010bb4:	4610      	mov	r0, r2
 8010bb6:	e7f9      	b.n	8010bac <strncmp+0x1c>

08010bb8 <_strtoul_l.constprop.0>:
 8010bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010bbc:	4f36      	ldr	r7, [pc, #216]	; (8010c98 <_strtoul_l.constprop.0+0xe0>)
 8010bbe:	4686      	mov	lr, r0
 8010bc0:	460d      	mov	r5, r1
 8010bc2:	4628      	mov	r0, r5
 8010bc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010bc8:	5de6      	ldrb	r6, [r4, r7]
 8010bca:	f016 0608 	ands.w	r6, r6, #8
 8010bce:	d1f8      	bne.n	8010bc2 <_strtoul_l.constprop.0+0xa>
 8010bd0:	2c2d      	cmp	r4, #45	; 0x2d
 8010bd2:	d12f      	bne.n	8010c34 <_strtoul_l.constprop.0+0x7c>
 8010bd4:	782c      	ldrb	r4, [r5, #0]
 8010bd6:	2601      	movs	r6, #1
 8010bd8:	1c85      	adds	r5, r0, #2
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d057      	beq.n	8010c8e <_strtoul_l.constprop.0+0xd6>
 8010bde:	2b10      	cmp	r3, #16
 8010be0:	d109      	bne.n	8010bf6 <_strtoul_l.constprop.0+0x3e>
 8010be2:	2c30      	cmp	r4, #48	; 0x30
 8010be4:	d107      	bne.n	8010bf6 <_strtoul_l.constprop.0+0x3e>
 8010be6:	7828      	ldrb	r0, [r5, #0]
 8010be8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010bec:	2858      	cmp	r0, #88	; 0x58
 8010bee:	d149      	bne.n	8010c84 <_strtoul_l.constprop.0+0xcc>
 8010bf0:	786c      	ldrb	r4, [r5, #1]
 8010bf2:	2310      	movs	r3, #16
 8010bf4:	3502      	adds	r5, #2
 8010bf6:	f04f 38ff 	mov.w	r8, #4294967295
 8010bfa:	2700      	movs	r7, #0
 8010bfc:	fbb8 f8f3 	udiv	r8, r8, r3
 8010c00:	fb03 f908 	mul.w	r9, r3, r8
 8010c04:	ea6f 0909 	mvn.w	r9, r9
 8010c08:	4638      	mov	r0, r7
 8010c0a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010c0e:	f1bc 0f09 	cmp.w	ip, #9
 8010c12:	d814      	bhi.n	8010c3e <_strtoul_l.constprop.0+0x86>
 8010c14:	4664      	mov	r4, ip
 8010c16:	42a3      	cmp	r3, r4
 8010c18:	dd22      	ble.n	8010c60 <_strtoul_l.constprop.0+0xa8>
 8010c1a:	2f00      	cmp	r7, #0
 8010c1c:	db1d      	blt.n	8010c5a <_strtoul_l.constprop.0+0xa2>
 8010c1e:	4580      	cmp	r8, r0
 8010c20:	d31b      	bcc.n	8010c5a <_strtoul_l.constprop.0+0xa2>
 8010c22:	d101      	bne.n	8010c28 <_strtoul_l.constprop.0+0x70>
 8010c24:	45a1      	cmp	r9, r4
 8010c26:	db18      	blt.n	8010c5a <_strtoul_l.constprop.0+0xa2>
 8010c28:	fb00 4003 	mla	r0, r0, r3, r4
 8010c2c:	2701      	movs	r7, #1
 8010c2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010c32:	e7ea      	b.n	8010c0a <_strtoul_l.constprop.0+0x52>
 8010c34:	2c2b      	cmp	r4, #43	; 0x2b
 8010c36:	bf04      	itt	eq
 8010c38:	782c      	ldrbeq	r4, [r5, #0]
 8010c3a:	1c85      	addeq	r5, r0, #2
 8010c3c:	e7cd      	b.n	8010bda <_strtoul_l.constprop.0+0x22>
 8010c3e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010c42:	f1bc 0f19 	cmp.w	ip, #25
 8010c46:	d801      	bhi.n	8010c4c <_strtoul_l.constprop.0+0x94>
 8010c48:	3c37      	subs	r4, #55	; 0x37
 8010c4a:	e7e4      	b.n	8010c16 <_strtoul_l.constprop.0+0x5e>
 8010c4c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010c50:	f1bc 0f19 	cmp.w	ip, #25
 8010c54:	d804      	bhi.n	8010c60 <_strtoul_l.constprop.0+0xa8>
 8010c56:	3c57      	subs	r4, #87	; 0x57
 8010c58:	e7dd      	b.n	8010c16 <_strtoul_l.constprop.0+0x5e>
 8010c5a:	f04f 37ff 	mov.w	r7, #4294967295
 8010c5e:	e7e6      	b.n	8010c2e <_strtoul_l.constprop.0+0x76>
 8010c60:	2f00      	cmp	r7, #0
 8010c62:	da07      	bge.n	8010c74 <_strtoul_l.constprop.0+0xbc>
 8010c64:	2322      	movs	r3, #34	; 0x22
 8010c66:	f8ce 3000 	str.w	r3, [lr]
 8010c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c6e:	b932      	cbnz	r2, 8010c7e <_strtoul_l.constprop.0+0xc6>
 8010c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c74:	b106      	cbz	r6, 8010c78 <_strtoul_l.constprop.0+0xc0>
 8010c76:	4240      	negs	r0, r0
 8010c78:	2a00      	cmp	r2, #0
 8010c7a:	d0f9      	beq.n	8010c70 <_strtoul_l.constprop.0+0xb8>
 8010c7c:	b107      	cbz	r7, 8010c80 <_strtoul_l.constprop.0+0xc8>
 8010c7e:	1e69      	subs	r1, r5, #1
 8010c80:	6011      	str	r1, [r2, #0]
 8010c82:	e7f5      	b.n	8010c70 <_strtoul_l.constprop.0+0xb8>
 8010c84:	2430      	movs	r4, #48	; 0x30
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d1b5      	bne.n	8010bf6 <_strtoul_l.constprop.0+0x3e>
 8010c8a:	2308      	movs	r3, #8
 8010c8c:	e7b3      	b.n	8010bf6 <_strtoul_l.constprop.0+0x3e>
 8010c8e:	2c30      	cmp	r4, #48	; 0x30
 8010c90:	d0a9      	beq.n	8010be6 <_strtoul_l.constprop.0+0x2e>
 8010c92:	230a      	movs	r3, #10
 8010c94:	e7af      	b.n	8010bf6 <_strtoul_l.constprop.0+0x3e>
 8010c96:	bf00      	nop
 8010c98:	08014471 	.word	0x08014471

08010c9c <_strtoul_r>:
 8010c9c:	f7ff bf8c 	b.w	8010bb8 <_strtoul_l.constprop.0>

08010ca0 <__submore>:
 8010ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca4:	460c      	mov	r4, r1
 8010ca6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010cac:	4299      	cmp	r1, r3
 8010cae:	d11d      	bne.n	8010cec <__submore+0x4c>
 8010cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010cb4:	f7ff fa16 	bl	80100e4 <_malloc_r>
 8010cb8:	b918      	cbnz	r0, 8010cc2 <__submore+0x22>
 8010cba:	f04f 30ff 	mov.w	r0, #4294967295
 8010cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cc6:	63a3      	str	r3, [r4, #56]	; 0x38
 8010cc8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010ccc:	6360      	str	r0, [r4, #52]	; 0x34
 8010cce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010cd2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010cd6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010cda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010cde:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010ce2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010ce6:	6020      	str	r0, [r4, #0]
 8010ce8:	2000      	movs	r0, #0
 8010cea:	e7e8      	b.n	8010cbe <__submore+0x1e>
 8010cec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010cee:	0077      	lsls	r7, r6, #1
 8010cf0:	463a      	mov	r2, r7
 8010cf2:	f000 fa2d 	bl	8011150 <_realloc_r>
 8010cf6:	4605      	mov	r5, r0
 8010cf8:	2800      	cmp	r0, #0
 8010cfa:	d0de      	beq.n	8010cba <__submore+0x1a>
 8010cfc:	eb00 0806 	add.w	r8, r0, r6
 8010d00:	4601      	mov	r1, r0
 8010d02:	4632      	mov	r2, r6
 8010d04:	4640      	mov	r0, r8
 8010d06:	f7fb fc83 	bl	800c610 <memcpy>
 8010d0a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010d0e:	f8c4 8000 	str.w	r8, [r4]
 8010d12:	e7e9      	b.n	8010ce8 <__submore+0x48>

08010d14 <__ascii_wctomb>:
 8010d14:	b149      	cbz	r1, 8010d2a <__ascii_wctomb+0x16>
 8010d16:	2aff      	cmp	r2, #255	; 0xff
 8010d18:	bf85      	ittet	hi
 8010d1a:	238a      	movhi	r3, #138	; 0x8a
 8010d1c:	6003      	strhi	r3, [r0, #0]
 8010d1e:	700a      	strbls	r2, [r1, #0]
 8010d20:	f04f 30ff 	movhi.w	r0, #4294967295
 8010d24:	bf98      	it	ls
 8010d26:	2001      	movls	r0, #1
 8010d28:	4770      	bx	lr
 8010d2a:	4608      	mov	r0, r1
 8010d2c:	4770      	bx	lr
	...

08010d30 <__assert_func>:
 8010d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d32:	4614      	mov	r4, r2
 8010d34:	461a      	mov	r2, r3
 8010d36:	4b09      	ldr	r3, [pc, #36]	; (8010d5c <__assert_func+0x2c>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	4605      	mov	r5, r0
 8010d3c:	68d8      	ldr	r0, [r3, #12]
 8010d3e:	b14c      	cbz	r4, 8010d54 <__assert_func+0x24>
 8010d40:	4b07      	ldr	r3, [pc, #28]	; (8010d60 <__assert_func+0x30>)
 8010d42:	9100      	str	r1, [sp, #0]
 8010d44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d48:	4906      	ldr	r1, [pc, #24]	; (8010d64 <__assert_func+0x34>)
 8010d4a:	462b      	mov	r3, r5
 8010d4c:	f000 f9a6 	bl	801109c <fiprintf>
 8010d50:	f000 fc46 	bl	80115e0 <abort>
 8010d54:	4b04      	ldr	r3, [pc, #16]	; (8010d68 <__assert_func+0x38>)
 8010d56:	461c      	mov	r4, r3
 8010d58:	e7f3      	b.n	8010d42 <__assert_func+0x12>
 8010d5a:	bf00      	nop
 8010d5c:	2000003c 	.word	0x2000003c
 8010d60:	08014800 	.word	0x08014800
 8010d64:	0801480d 	.word	0x0801480d
 8010d68:	0801483b 	.word	0x0801483b

08010d6c <__sflush_r>:
 8010d6c:	898a      	ldrh	r2, [r1, #12]
 8010d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d72:	4605      	mov	r5, r0
 8010d74:	0710      	lsls	r0, r2, #28
 8010d76:	460c      	mov	r4, r1
 8010d78:	d458      	bmi.n	8010e2c <__sflush_r+0xc0>
 8010d7a:	684b      	ldr	r3, [r1, #4]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	dc05      	bgt.n	8010d8c <__sflush_r+0x20>
 8010d80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	dc02      	bgt.n	8010d8c <__sflush_r+0x20>
 8010d86:	2000      	movs	r0, #0
 8010d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d8e:	2e00      	cmp	r6, #0
 8010d90:	d0f9      	beq.n	8010d86 <__sflush_r+0x1a>
 8010d92:	2300      	movs	r3, #0
 8010d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010d98:	682f      	ldr	r7, [r5, #0]
 8010d9a:	602b      	str	r3, [r5, #0]
 8010d9c:	d032      	beq.n	8010e04 <__sflush_r+0x98>
 8010d9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010da0:	89a3      	ldrh	r3, [r4, #12]
 8010da2:	075a      	lsls	r2, r3, #29
 8010da4:	d505      	bpl.n	8010db2 <__sflush_r+0x46>
 8010da6:	6863      	ldr	r3, [r4, #4]
 8010da8:	1ac0      	subs	r0, r0, r3
 8010daa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010dac:	b10b      	cbz	r3, 8010db2 <__sflush_r+0x46>
 8010dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010db0:	1ac0      	subs	r0, r0, r3
 8010db2:	2300      	movs	r3, #0
 8010db4:	4602      	mov	r2, r0
 8010db6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010db8:	6a21      	ldr	r1, [r4, #32]
 8010dba:	4628      	mov	r0, r5
 8010dbc:	47b0      	blx	r6
 8010dbe:	1c43      	adds	r3, r0, #1
 8010dc0:	89a3      	ldrh	r3, [r4, #12]
 8010dc2:	d106      	bne.n	8010dd2 <__sflush_r+0x66>
 8010dc4:	6829      	ldr	r1, [r5, #0]
 8010dc6:	291d      	cmp	r1, #29
 8010dc8:	d82c      	bhi.n	8010e24 <__sflush_r+0xb8>
 8010dca:	4a2a      	ldr	r2, [pc, #168]	; (8010e74 <__sflush_r+0x108>)
 8010dcc:	40ca      	lsrs	r2, r1
 8010dce:	07d6      	lsls	r6, r2, #31
 8010dd0:	d528      	bpl.n	8010e24 <__sflush_r+0xb8>
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	6062      	str	r2, [r4, #4]
 8010dd6:	04d9      	lsls	r1, r3, #19
 8010dd8:	6922      	ldr	r2, [r4, #16]
 8010dda:	6022      	str	r2, [r4, #0]
 8010ddc:	d504      	bpl.n	8010de8 <__sflush_r+0x7c>
 8010dde:	1c42      	adds	r2, r0, #1
 8010de0:	d101      	bne.n	8010de6 <__sflush_r+0x7a>
 8010de2:	682b      	ldr	r3, [r5, #0]
 8010de4:	b903      	cbnz	r3, 8010de8 <__sflush_r+0x7c>
 8010de6:	6560      	str	r0, [r4, #84]	; 0x54
 8010de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010dea:	602f      	str	r7, [r5, #0]
 8010dec:	2900      	cmp	r1, #0
 8010dee:	d0ca      	beq.n	8010d86 <__sflush_r+0x1a>
 8010df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010df4:	4299      	cmp	r1, r3
 8010df6:	d002      	beq.n	8010dfe <__sflush_r+0x92>
 8010df8:	4628      	mov	r0, r5
 8010dfa:	f7ff f907 	bl	801000c <_free_r>
 8010dfe:	2000      	movs	r0, #0
 8010e00:	6360      	str	r0, [r4, #52]	; 0x34
 8010e02:	e7c1      	b.n	8010d88 <__sflush_r+0x1c>
 8010e04:	6a21      	ldr	r1, [r4, #32]
 8010e06:	2301      	movs	r3, #1
 8010e08:	4628      	mov	r0, r5
 8010e0a:	47b0      	blx	r6
 8010e0c:	1c41      	adds	r1, r0, #1
 8010e0e:	d1c7      	bne.n	8010da0 <__sflush_r+0x34>
 8010e10:	682b      	ldr	r3, [r5, #0]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d0c4      	beq.n	8010da0 <__sflush_r+0x34>
 8010e16:	2b1d      	cmp	r3, #29
 8010e18:	d001      	beq.n	8010e1e <__sflush_r+0xb2>
 8010e1a:	2b16      	cmp	r3, #22
 8010e1c:	d101      	bne.n	8010e22 <__sflush_r+0xb6>
 8010e1e:	602f      	str	r7, [r5, #0]
 8010e20:	e7b1      	b.n	8010d86 <__sflush_r+0x1a>
 8010e22:	89a3      	ldrh	r3, [r4, #12]
 8010e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e28:	81a3      	strh	r3, [r4, #12]
 8010e2a:	e7ad      	b.n	8010d88 <__sflush_r+0x1c>
 8010e2c:	690f      	ldr	r7, [r1, #16]
 8010e2e:	2f00      	cmp	r7, #0
 8010e30:	d0a9      	beq.n	8010d86 <__sflush_r+0x1a>
 8010e32:	0793      	lsls	r3, r2, #30
 8010e34:	680e      	ldr	r6, [r1, #0]
 8010e36:	bf08      	it	eq
 8010e38:	694b      	ldreq	r3, [r1, #20]
 8010e3a:	600f      	str	r7, [r1, #0]
 8010e3c:	bf18      	it	ne
 8010e3e:	2300      	movne	r3, #0
 8010e40:	eba6 0807 	sub.w	r8, r6, r7
 8010e44:	608b      	str	r3, [r1, #8]
 8010e46:	f1b8 0f00 	cmp.w	r8, #0
 8010e4a:	dd9c      	ble.n	8010d86 <__sflush_r+0x1a>
 8010e4c:	6a21      	ldr	r1, [r4, #32]
 8010e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010e50:	4643      	mov	r3, r8
 8010e52:	463a      	mov	r2, r7
 8010e54:	4628      	mov	r0, r5
 8010e56:	47b0      	blx	r6
 8010e58:	2800      	cmp	r0, #0
 8010e5a:	dc06      	bgt.n	8010e6a <__sflush_r+0xfe>
 8010e5c:	89a3      	ldrh	r3, [r4, #12]
 8010e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e62:	81a3      	strh	r3, [r4, #12]
 8010e64:	f04f 30ff 	mov.w	r0, #4294967295
 8010e68:	e78e      	b.n	8010d88 <__sflush_r+0x1c>
 8010e6a:	4407      	add	r7, r0
 8010e6c:	eba8 0800 	sub.w	r8, r8, r0
 8010e70:	e7e9      	b.n	8010e46 <__sflush_r+0xda>
 8010e72:	bf00      	nop
 8010e74:	20400001 	.word	0x20400001

08010e78 <_fflush_r>:
 8010e78:	b538      	push	{r3, r4, r5, lr}
 8010e7a:	690b      	ldr	r3, [r1, #16]
 8010e7c:	4605      	mov	r5, r0
 8010e7e:	460c      	mov	r4, r1
 8010e80:	b913      	cbnz	r3, 8010e88 <_fflush_r+0x10>
 8010e82:	2500      	movs	r5, #0
 8010e84:	4628      	mov	r0, r5
 8010e86:	bd38      	pop	{r3, r4, r5, pc}
 8010e88:	b118      	cbz	r0, 8010e92 <_fflush_r+0x1a>
 8010e8a:	6983      	ldr	r3, [r0, #24]
 8010e8c:	b90b      	cbnz	r3, 8010e92 <_fflush_r+0x1a>
 8010e8e:	f000 f887 	bl	8010fa0 <__sinit>
 8010e92:	4b14      	ldr	r3, [pc, #80]	; (8010ee4 <_fflush_r+0x6c>)
 8010e94:	429c      	cmp	r4, r3
 8010e96:	d11b      	bne.n	8010ed0 <_fflush_r+0x58>
 8010e98:	686c      	ldr	r4, [r5, #4]
 8010e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d0ef      	beq.n	8010e82 <_fflush_r+0xa>
 8010ea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ea4:	07d0      	lsls	r0, r2, #31
 8010ea6:	d404      	bmi.n	8010eb2 <_fflush_r+0x3a>
 8010ea8:	0599      	lsls	r1, r3, #22
 8010eaa:	d402      	bmi.n	8010eb2 <_fflush_r+0x3a>
 8010eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010eae:	f000 f927 	bl	8011100 <__retarget_lock_acquire_recursive>
 8010eb2:	4628      	mov	r0, r5
 8010eb4:	4621      	mov	r1, r4
 8010eb6:	f7ff ff59 	bl	8010d6c <__sflush_r>
 8010eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ebc:	07da      	lsls	r2, r3, #31
 8010ebe:	4605      	mov	r5, r0
 8010ec0:	d4e0      	bmi.n	8010e84 <_fflush_r+0xc>
 8010ec2:	89a3      	ldrh	r3, [r4, #12]
 8010ec4:	059b      	lsls	r3, r3, #22
 8010ec6:	d4dd      	bmi.n	8010e84 <_fflush_r+0xc>
 8010ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010eca:	f000 f91a 	bl	8011102 <__retarget_lock_release_recursive>
 8010ece:	e7d9      	b.n	8010e84 <_fflush_r+0xc>
 8010ed0:	4b05      	ldr	r3, [pc, #20]	; (8010ee8 <_fflush_r+0x70>)
 8010ed2:	429c      	cmp	r4, r3
 8010ed4:	d101      	bne.n	8010eda <_fflush_r+0x62>
 8010ed6:	68ac      	ldr	r4, [r5, #8]
 8010ed8:	e7df      	b.n	8010e9a <_fflush_r+0x22>
 8010eda:	4b04      	ldr	r3, [pc, #16]	; (8010eec <_fflush_r+0x74>)
 8010edc:	429c      	cmp	r4, r3
 8010ede:	bf08      	it	eq
 8010ee0:	68ec      	ldreq	r4, [r5, #12]
 8010ee2:	e7da      	b.n	8010e9a <_fflush_r+0x22>
 8010ee4:	0801485c 	.word	0x0801485c
 8010ee8:	0801487c 	.word	0x0801487c
 8010eec:	0801483c 	.word	0x0801483c

08010ef0 <std>:
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	b510      	push	{r4, lr}
 8010ef4:	4604      	mov	r4, r0
 8010ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8010efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010efe:	6083      	str	r3, [r0, #8]
 8010f00:	8181      	strh	r1, [r0, #12]
 8010f02:	6643      	str	r3, [r0, #100]	; 0x64
 8010f04:	81c2      	strh	r2, [r0, #14]
 8010f06:	6183      	str	r3, [r0, #24]
 8010f08:	4619      	mov	r1, r3
 8010f0a:	2208      	movs	r2, #8
 8010f0c:	305c      	adds	r0, #92	; 0x5c
 8010f0e:	f7fb fb8d 	bl	800c62c <memset>
 8010f12:	4b05      	ldr	r3, [pc, #20]	; (8010f28 <std+0x38>)
 8010f14:	6263      	str	r3, [r4, #36]	; 0x24
 8010f16:	4b05      	ldr	r3, [pc, #20]	; (8010f2c <std+0x3c>)
 8010f18:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f1a:	4b05      	ldr	r3, [pc, #20]	; (8010f30 <std+0x40>)
 8010f1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f1e:	4b05      	ldr	r3, [pc, #20]	; (8010f34 <std+0x44>)
 8010f20:	6224      	str	r4, [r4, #32]
 8010f22:	6323      	str	r3, [r4, #48]	; 0x30
 8010f24:	bd10      	pop	{r4, pc}
 8010f26:	bf00      	nop
 8010f28:	0800d3d5 	.word	0x0800d3d5
 8010f2c:	0800d3fb 	.word	0x0800d3fb
 8010f30:	0800d433 	.word	0x0800d433
 8010f34:	0800d457 	.word	0x0800d457

08010f38 <_cleanup_r>:
 8010f38:	4901      	ldr	r1, [pc, #4]	; (8010f40 <_cleanup_r+0x8>)
 8010f3a:	f000 b8c1 	b.w	80110c0 <_fwalk_reent>
 8010f3e:	bf00      	nop
 8010f40:	08010e79 	.word	0x08010e79

08010f44 <__sfmoreglue>:
 8010f44:	b570      	push	{r4, r5, r6, lr}
 8010f46:	2268      	movs	r2, #104	; 0x68
 8010f48:	1e4d      	subs	r5, r1, #1
 8010f4a:	4355      	muls	r5, r2
 8010f4c:	460e      	mov	r6, r1
 8010f4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010f52:	f7ff f8c7 	bl	80100e4 <_malloc_r>
 8010f56:	4604      	mov	r4, r0
 8010f58:	b140      	cbz	r0, 8010f6c <__sfmoreglue+0x28>
 8010f5a:	2100      	movs	r1, #0
 8010f5c:	e9c0 1600 	strd	r1, r6, [r0]
 8010f60:	300c      	adds	r0, #12
 8010f62:	60a0      	str	r0, [r4, #8]
 8010f64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010f68:	f7fb fb60 	bl	800c62c <memset>
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	bd70      	pop	{r4, r5, r6, pc}

08010f70 <__sfp_lock_acquire>:
 8010f70:	4801      	ldr	r0, [pc, #4]	; (8010f78 <__sfp_lock_acquire+0x8>)
 8010f72:	f000 b8c5 	b.w	8011100 <__retarget_lock_acquire_recursive>
 8010f76:	bf00      	nop
 8010f78:	20013b6d 	.word	0x20013b6d

08010f7c <__sfp_lock_release>:
 8010f7c:	4801      	ldr	r0, [pc, #4]	; (8010f84 <__sfp_lock_release+0x8>)
 8010f7e:	f000 b8c0 	b.w	8011102 <__retarget_lock_release_recursive>
 8010f82:	bf00      	nop
 8010f84:	20013b6d 	.word	0x20013b6d

08010f88 <__sinit_lock_acquire>:
 8010f88:	4801      	ldr	r0, [pc, #4]	; (8010f90 <__sinit_lock_acquire+0x8>)
 8010f8a:	f000 b8b9 	b.w	8011100 <__retarget_lock_acquire_recursive>
 8010f8e:	bf00      	nop
 8010f90:	20013b6e 	.word	0x20013b6e

08010f94 <__sinit_lock_release>:
 8010f94:	4801      	ldr	r0, [pc, #4]	; (8010f9c <__sinit_lock_release+0x8>)
 8010f96:	f000 b8b4 	b.w	8011102 <__retarget_lock_release_recursive>
 8010f9a:	bf00      	nop
 8010f9c:	20013b6e 	.word	0x20013b6e

08010fa0 <__sinit>:
 8010fa0:	b510      	push	{r4, lr}
 8010fa2:	4604      	mov	r4, r0
 8010fa4:	f7ff fff0 	bl	8010f88 <__sinit_lock_acquire>
 8010fa8:	69a3      	ldr	r3, [r4, #24]
 8010faa:	b11b      	cbz	r3, 8010fb4 <__sinit+0x14>
 8010fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fb0:	f7ff bff0 	b.w	8010f94 <__sinit_lock_release>
 8010fb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010fb8:	6523      	str	r3, [r4, #80]	; 0x50
 8010fba:	4b13      	ldr	r3, [pc, #76]	; (8011008 <__sinit+0x68>)
 8010fbc:	4a13      	ldr	r2, [pc, #76]	; (801100c <__sinit+0x6c>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8010fc2:	42a3      	cmp	r3, r4
 8010fc4:	bf04      	itt	eq
 8010fc6:	2301      	moveq	r3, #1
 8010fc8:	61a3      	streq	r3, [r4, #24]
 8010fca:	4620      	mov	r0, r4
 8010fcc:	f000 f820 	bl	8011010 <__sfp>
 8010fd0:	6060      	str	r0, [r4, #4]
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	f000 f81c 	bl	8011010 <__sfp>
 8010fd8:	60a0      	str	r0, [r4, #8]
 8010fda:	4620      	mov	r0, r4
 8010fdc:	f000 f818 	bl	8011010 <__sfp>
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	60e0      	str	r0, [r4, #12]
 8010fe4:	2104      	movs	r1, #4
 8010fe6:	6860      	ldr	r0, [r4, #4]
 8010fe8:	f7ff ff82 	bl	8010ef0 <std>
 8010fec:	68a0      	ldr	r0, [r4, #8]
 8010fee:	2201      	movs	r2, #1
 8010ff0:	2109      	movs	r1, #9
 8010ff2:	f7ff ff7d 	bl	8010ef0 <std>
 8010ff6:	68e0      	ldr	r0, [r4, #12]
 8010ff8:	2202      	movs	r2, #2
 8010ffa:	2112      	movs	r1, #18
 8010ffc:	f7ff ff78 	bl	8010ef0 <std>
 8011000:	2301      	movs	r3, #1
 8011002:	61a3      	str	r3, [r4, #24]
 8011004:	e7d2      	b.n	8010fac <__sinit+0xc>
 8011006:	bf00      	nop
 8011008:	080143e0 	.word	0x080143e0
 801100c:	08010f39 	.word	0x08010f39

08011010 <__sfp>:
 8011010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011012:	4607      	mov	r7, r0
 8011014:	f7ff ffac 	bl	8010f70 <__sfp_lock_acquire>
 8011018:	4b1e      	ldr	r3, [pc, #120]	; (8011094 <__sfp+0x84>)
 801101a:	681e      	ldr	r6, [r3, #0]
 801101c:	69b3      	ldr	r3, [r6, #24]
 801101e:	b913      	cbnz	r3, 8011026 <__sfp+0x16>
 8011020:	4630      	mov	r0, r6
 8011022:	f7ff ffbd 	bl	8010fa0 <__sinit>
 8011026:	3648      	adds	r6, #72	; 0x48
 8011028:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801102c:	3b01      	subs	r3, #1
 801102e:	d503      	bpl.n	8011038 <__sfp+0x28>
 8011030:	6833      	ldr	r3, [r6, #0]
 8011032:	b30b      	cbz	r3, 8011078 <__sfp+0x68>
 8011034:	6836      	ldr	r6, [r6, #0]
 8011036:	e7f7      	b.n	8011028 <__sfp+0x18>
 8011038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801103c:	b9d5      	cbnz	r5, 8011074 <__sfp+0x64>
 801103e:	4b16      	ldr	r3, [pc, #88]	; (8011098 <__sfp+0x88>)
 8011040:	60e3      	str	r3, [r4, #12]
 8011042:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011046:	6665      	str	r5, [r4, #100]	; 0x64
 8011048:	f000 f859 	bl	80110fe <__retarget_lock_init_recursive>
 801104c:	f7ff ff96 	bl	8010f7c <__sfp_lock_release>
 8011050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011058:	6025      	str	r5, [r4, #0]
 801105a:	61a5      	str	r5, [r4, #24]
 801105c:	2208      	movs	r2, #8
 801105e:	4629      	mov	r1, r5
 8011060:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011064:	f7fb fae2 	bl	800c62c <memset>
 8011068:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801106c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011070:	4620      	mov	r0, r4
 8011072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011074:	3468      	adds	r4, #104	; 0x68
 8011076:	e7d9      	b.n	801102c <__sfp+0x1c>
 8011078:	2104      	movs	r1, #4
 801107a:	4638      	mov	r0, r7
 801107c:	f7ff ff62 	bl	8010f44 <__sfmoreglue>
 8011080:	4604      	mov	r4, r0
 8011082:	6030      	str	r0, [r6, #0]
 8011084:	2800      	cmp	r0, #0
 8011086:	d1d5      	bne.n	8011034 <__sfp+0x24>
 8011088:	f7ff ff78 	bl	8010f7c <__sfp_lock_release>
 801108c:	230c      	movs	r3, #12
 801108e:	603b      	str	r3, [r7, #0]
 8011090:	e7ee      	b.n	8011070 <__sfp+0x60>
 8011092:	bf00      	nop
 8011094:	080143e0 	.word	0x080143e0
 8011098:	ffff0001 	.word	0xffff0001

0801109c <fiprintf>:
 801109c:	b40e      	push	{r1, r2, r3}
 801109e:	b503      	push	{r0, r1, lr}
 80110a0:	4601      	mov	r1, r0
 80110a2:	ab03      	add	r3, sp, #12
 80110a4:	4805      	ldr	r0, [pc, #20]	; (80110bc <fiprintf+0x20>)
 80110a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80110aa:	6800      	ldr	r0, [r0, #0]
 80110ac:	9301      	str	r3, [sp, #4]
 80110ae:	f000 f8a7 	bl	8011200 <_vfiprintf_r>
 80110b2:	b002      	add	sp, #8
 80110b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80110b8:	b003      	add	sp, #12
 80110ba:	4770      	bx	lr
 80110bc:	2000003c 	.word	0x2000003c

080110c0 <_fwalk_reent>:
 80110c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110c4:	4606      	mov	r6, r0
 80110c6:	4688      	mov	r8, r1
 80110c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80110cc:	2700      	movs	r7, #0
 80110ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80110d2:	f1b9 0901 	subs.w	r9, r9, #1
 80110d6:	d505      	bpl.n	80110e4 <_fwalk_reent+0x24>
 80110d8:	6824      	ldr	r4, [r4, #0]
 80110da:	2c00      	cmp	r4, #0
 80110dc:	d1f7      	bne.n	80110ce <_fwalk_reent+0xe>
 80110de:	4638      	mov	r0, r7
 80110e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110e4:	89ab      	ldrh	r3, [r5, #12]
 80110e6:	2b01      	cmp	r3, #1
 80110e8:	d907      	bls.n	80110fa <_fwalk_reent+0x3a>
 80110ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80110ee:	3301      	adds	r3, #1
 80110f0:	d003      	beq.n	80110fa <_fwalk_reent+0x3a>
 80110f2:	4629      	mov	r1, r5
 80110f4:	4630      	mov	r0, r6
 80110f6:	47c0      	blx	r8
 80110f8:	4307      	orrs	r7, r0
 80110fa:	3568      	adds	r5, #104	; 0x68
 80110fc:	e7e9      	b.n	80110d2 <_fwalk_reent+0x12>

080110fe <__retarget_lock_init_recursive>:
 80110fe:	4770      	bx	lr

08011100 <__retarget_lock_acquire_recursive>:
 8011100:	4770      	bx	lr

08011102 <__retarget_lock_release_recursive>:
 8011102:	4770      	bx	lr

08011104 <memmove>:
 8011104:	4288      	cmp	r0, r1
 8011106:	b510      	push	{r4, lr}
 8011108:	eb01 0402 	add.w	r4, r1, r2
 801110c:	d902      	bls.n	8011114 <memmove+0x10>
 801110e:	4284      	cmp	r4, r0
 8011110:	4623      	mov	r3, r4
 8011112:	d807      	bhi.n	8011124 <memmove+0x20>
 8011114:	1e43      	subs	r3, r0, #1
 8011116:	42a1      	cmp	r1, r4
 8011118:	d008      	beq.n	801112c <memmove+0x28>
 801111a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801111e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011122:	e7f8      	b.n	8011116 <memmove+0x12>
 8011124:	4402      	add	r2, r0
 8011126:	4601      	mov	r1, r0
 8011128:	428a      	cmp	r2, r1
 801112a:	d100      	bne.n	801112e <memmove+0x2a>
 801112c:	bd10      	pop	{r4, pc}
 801112e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011136:	e7f7      	b.n	8011128 <memmove+0x24>

08011138 <__malloc_lock>:
 8011138:	4801      	ldr	r0, [pc, #4]	; (8011140 <__malloc_lock+0x8>)
 801113a:	f7ff bfe1 	b.w	8011100 <__retarget_lock_acquire_recursive>
 801113e:	bf00      	nop
 8011140:	20013b6c 	.word	0x20013b6c

08011144 <__malloc_unlock>:
 8011144:	4801      	ldr	r0, [pc, #4]	; (801114c <__malloc_unlock+0x8>)
 8011146:	f7ff bfdc 	b.w	8011102 <__retarget_lock_release_recursive>
 801114a:	bf00      	nop
 801114c:	20013b6c 	.word	0x20013b6c

08011150 <_realloc_r>:
 8011150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011154:	4680      	mov	r8, r0
 8011156:	4614      	mov	r4, r2
 8011158:	460e      	mov	r6, r1
 801115a:	b921      	cbnz	r1, 8011166 <_realloc_r+0x16>
 801115c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011160:	4611      	mov	r1, r2
 8011162:	f7fe bfbf 	b.w	80100e4 <_malloc_r>
 8011166:	b92a      	cbnz	r2, 8011174 <_realloc_r+0x24>
 8011168:	f7fe ff50 	bl	801000c <_free_r>
 801116c:	4625      	mov	r5, r4
 801116e:	4628      	mov	r0, r5
 8011170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011174:	f000 faa0 	bl	80116b8 <_malloc_usable_size_r>
 8011178:	4284      	cmp	r4, r0
 801117a:	4607      	mov	r7, r0
 801117c:	d802      	bhi.n	8011184 <_realloc_r+0x34>
 801117e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011182:	d812      	bhi.n	80111aa <_realloc_r+0x5a>
 8011184:	4621      	mov	r1, r4
 8011186:	4640      	mov	r0, r8
 8011188:	f7fe ffac 	bl	80100e4 <_malloc_r>
 801118c:	4605      	mov	r5, r0
 801118e:	2800      	cmp	r0, #0
 8011190:	d0ed      	beq.n	801116e <_realloc_r+0x1e>
 8011192:	42bc      	cmp	r4, r7
 8011194:	4622      	mov	r2, r4
 8011196:	4631      	mov	r1, r6
 8011198:	bf28      	it	cs
 801119a:	463a      	movcs	r2, r7
 801119c:	f7fb fa38 	bl	800c610 <memcpy>
 80111a0:	4631      	mov	r1, r6
 80111a2:	4640      	mov	r0, r8
 80111a4:	f7fe ff32 	bl	801000c <_free_r>
 80111a8:	e7e1      	b.n	801116e <_realloc_r+0x1e>
 80111aa:	4635      	mov	r5, r6
 80111ac:	e7df      	b.n	801116e <_realloc_r+0x1e>

080111ae <__sfputc_r>:
 80111ae:	6893      	ldr	r3, [r2, #8]
 80111b0:	3b01      	subs	r3, #1
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	b410      	push	{r4}
 80111b6:	6093      	str	r3, [r2, #8]
 80111b8:	da08      	bge.n	80111cc <__sfputc_r+0x1e>
 80111ba:	6994      	ldr	r4, [r2, #24]
 80111bc:	42a3      	cmp	r3, r4
 80111be:	db01      	blt.n	80111c4 <__sfputc_r+0x16>
 80111c0:	290a      	cmp	r1, #10
 80111c2:	d103      	bne.n	80111cc <__sfputc_r+0x1e>
 80111c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111c8:	f000 b94a 	b.w	8011460 <__swbuf_r>
 80111cc:	6813      	ldr	r3, [r2, #0]
 80111ce:	1c58      	adds	r0, r3, #1
 80111d0:	6010      	str	r0, [r2, #0]
 80111d2:	7019      	strb	r1, [r3, #0]
 80111d4:	4608      	mov	r0, r1
 80111d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111da:	4770      	bx	lr

080111dc <__sfputs_r>:
 80111dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111de:	4606      	mov	r6, r0
 80111e0:	460f      	mov	r7, r1
 80111e2:	4614      	mov	r4, r2
 80111e4:	18d5      	adds	r5, r2, r3
 80111e6:	42ac      	cmp	r4, r5
 80111e8:	d101      	bne.n	80111ee <__sfputs_r+0x12>
 80111ea:	2000      	movs	r0, #0
 80111ec:	e007      	b.n	80111fe <__sfputs_r+0x22>
 80111ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111f2:	463a      	mov	r2, r7
 80111f4:	4630      	mov	r0, r6
 80111f6:	f7ff ffda 	bl	80111ae <__sfputc_r>
 80111fa:	1c43      	adds	r3, r0, #1
 80111fc:	d1f3      	bne.n	80111e6 <__sfputs_r+0xa>
 80111fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011200 <_vfiprintf_r>:
 8011200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011204:	460d      	mov	r5, r1
 8011206:	b09d      	sub	sp, #116	; 0x74
 8011208:	4614      	mov	r4, r2
 801120a:	4698      	mov	r8, r3
 801120c:	4606      	mov	r6, r0
 801120e:	b118      	cbz	r0, 8011218 <_vfiprintf_r+0x18>
 8011210:	6983      	ldr	r3, [r0, #24]
 8011212:	b90b      	cbnz	r3, 8011218 <_vfiprintf_r+0x18>
 8011214:	f7ff fec4 	bl	8010fa0 <__sinit>
 8011218:	4b89      	ldr	r3, [pc, #548]	; (8011440 <_vfiprintf_r+0x240>)
 801121a:	429d      	cmp	r5, r3
 801121c:	d11b      	bne.n	8011256 <_vfiprintf_r+0x56>
 801121e:	6875      	ldr	r5, [r6, #4]
 8011220:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011222:	07d9      	lsls	r1, r3, #31
 8011224:	d405      	bmi.n	8011232 <_vfiprintf_r+0x32>
 8011226:	89ab      	ldrh	r3, [r5, #12]
 8011228:	059a      	lsls	r2, r3, #22
 801122a:	d402      	bmi.n	8011232 <_vfiprintf_r+0x32>
 801122c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801122e:	f7ff ff67 	bl	8011100 <__retarget_lock_acquire_recursive>
 8011232:	89ab      	ldrh	r3, [r5, #12]
 8011234:	071b      	lsls	r3, r3, #28
 8011236:	d501      	bpl.n	801123c <_vfiprintf_r+0x3c>
 8011238:	692b      	ldr	r3, [r5, #16]
 801123a:	b9eb      	cbnz	r3, 8011278 <_vfiprintf_r+0x78>
 801123c:	4629      	mov	r1, r5
 801123e:	4630      	mov	r0, r6
 8011240:	f000 f960 	bl	8011504 <__swsetup_r>
 8011244:	b1c0      	cbz	r0, 8011278 <_vfiprintf_r+0x78>
 8011246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011248:	07dc      	lsls	r4, r3, #31
 801124a:	d50e      	bpl.n	801126a <_vfiprintf_r+0x6a>
 801124c:	f04f 30ff 	mov.w	r0, #4294967295
 8011250:	b01d      	add	sp, #116	; 0x74
 8011252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011256:	4b7b      	ldr	r3, [pc, #492]	; (8011444 <_vfiprintf_r+0x244>)
 8011258:	429d      	cmp	r5, r3
 801125a:	d101      	bne.n	8011260 <_vfiprintf_r+0x60>
 801125c:	68b5      	ldr	r5, [r6, #8]
 801125e:	e7df      	b.n	8011220 <_vfiprintf_r+0x20>
 8011260:	4b79      	ldr	r3, [pc, #484]	; (8011448 <_vfiprintf_r+0x248>)
 8011262:	429d      	cmp	r5, r3
 8011264:	bf08      	it	eq
 8011266:	68f5      	ldreq	r5, [r6, #12]
 8011268:	e7da      	b.n	8011220 <_vfiprintf_r+0x20>
 801126a:	89ab      	ldrh	r3, [r5, #12]
 801126c:	0598      	lsls	r0, r3, #22
 801126e:	d4ed      	bmi.n	801124c <_vfiprintf_r+0x4c>
 8011270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011272:	f7ff ff46 	bl	8011102 <__retarget_lock_release_recursive>
 8011276:	e7e9      	b.n	801124c <_vfiprintf_r+0x4c>
 8011278:	2300      	movs	r3, #0
 801127a:	9309      	str	r3, [sp, #36]	; 0x24
 801127c:	2320      	movs	r3, #32
 801127e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011282:	f8cd 800c 	str.w	r8, [sp, #12]
 8011286:	2330      	movs	r3, #48	; 0x30
 8011288:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801144c <_vfiprintf_r+0x24c>
 801128c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011290:	f04f 0901 	mov.w	r9, #1
 8011294:	4623      	mov	r3, r4
 8011296:	469a      	mov	sl, r3
 8011298:	f813 2b01 	ldrb.w	r2, [r3], #1
 801129c:	b10a      	cbz	r2, 80112a2 <_vfiprintf_r+0xa2>
 801129e:	2a25      	cmp	r2, #37	; 0x25
 80112a0:	d1f9      	bne.n	8011296 <_vfiprintf_r+0x96>
 80112a2:	ebba 0b04 	subs.w	fp, sl, r4
 80112a6:	d00b      	beq.n	80112c0 <_vfiprintf_r+0xc0>
 80112a8:	465b      	mov	r3, fp
 80112aa:	4622      	mov	r2, r4
 80112ac:	4629      	mov	r1, r5
 80112ae:	4630      	mov	r0, r6
 80112b0:	f7ff ff94 	bl	80111dc <__sfputs_r>
 80112b4:	3001      	adds	r0, #1
 80112b6:	f000 80aa 	beq.w	801140e <_vfiprintf_r+0x20e>
 80112ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112bc:	445a      	add	r2, fp
 80112be:	9209      	str	r2, [sp, #36]	; 0x24
 80112c0:	f89a 3000 	ldrb.w	r3, [sl]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	f000 80a2 	beq.w	801140e <_vfiprintf_r+0x20e>
 80112ca:	2300      	movs	r3, #0
 80112cc:	f04f 32ff 	mov.w	r2, #4294967295
 80112d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112d4:	f10a 0a01 	add.w	sl, sl, #1
 80112d8:	9304      	str	r3, [sp, #16]
 80112da:	9307      	str	r3, [sp, #28]
 80112dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112e0:	931a      	str	r3, [sp, #104]	; 0x68
 80112e2:	4654      	mov	r4, sl
 80112e4:	2205      	movs	r2, #5
 80112e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112ea:	4858      	ldr	r0, [pc, #352]	; (801144c <_vfiprintf_r+0x24c>)
 80112ec:	f7ee ff90 	bl	8000210 <memchr>
 80112f0:	9a04      	ldr	r2, [sp, #16]
 80112f2:	b9d8      	cbnz	r0, 801132c <_vfiprintf_r+0x12c>
 80112f4:	06d1      	lsls	r1, r2, #27
 80112f6:	bf44      	itt	mi
 80112f8:	2320      	movmi	r3, #32
 80112fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112fe:	0713      	lsls	r3, r2, #28
 8011300:	bf44      	itt	mi
 8011302:	232b      	movmi	r3, #43	; 0x2b
 8011304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011308:	f89a 3000 	ldrb.w	r3, [sl]
 801130c:	2b2a      	cmp	r3, #42	; 0x2a
 801130e:	d015      	beq.n	801133c <_vfiprintf_r+0x13c>
 8011310:	9a07      	ldr	r2, [sp, #28]
 8011312:	4654      	mov	r4, sl
 8011314:	2000      	movs	r0, #0
 8011316:	f04f 0c0a 	mov.w	ip, #10
 801131a:	4621      	mov	r1, r4
 801131c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011320:	3b30      	subs	r3, #48	; 0x30
 8011322:	2b09      	cmp	r3, #9
 8011324:	d94e      	bls.n	80113c4 <_vfiprintf_r+0x1c4>
 8011326:	b1b0      	cbz	r0, 8011356 <_vfiprintf_r+0x156>
 8011328:	9207      	str	r2, [sp, #28]
 801132a:	e014      	b.n	8011356 <_vfiprintf_r+0x156>
 801132c:	eba0 0308 	sub.w	r3, r0, r8
 8011330:	fa09 f303 	lsl.w	r3, r9, r3
 8011334:	4313      	orrs	r3, r2
 8011336:	9304      	str	r3, [sp, #16]
 8011338:	46a2      	mov	sl, r4
 801133a:	e7d2      	b.n	80112e2 <_vfiprintf_r+0xe2>
 801133c:	9b03      	ldr	r3, [sp, #12]
 801133e:	1d19      	adds	r1, r3, #4
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	9103      	str	r1, [sp, #12]
 8011344:	2b00      	cmp	r3, #0
 8011346:	bfbb      	ittet	lt
 8011348:	425b      	neglt	r3, r3
 801134a:	f042 0202 	orrlt.w	r2, r2, #2
 801134e:	9307      	strge	r3, [sp, #28]
 8011350:	9307      	strlt	r3, [sp, #28]
 8011352:	bfb8      	it	lt
 8011354:	9204      	strlt	r2, [sp, #16]
 8011356:	7823      	ldrb	r3, [r4, #0]
 8011358:	2b2e      	cmp	r3, #46	; 0x2e
 801135a:	d10c      	bne.n	8011376 <_vfiprintf_r+0x176>
 801135c:	7863      	ldrb	r3, [r4, #1]
 801135e:	2b2a      	cmp	r3, #42	; 0x2a
 8011360:	d135      	bne.n	80113ce <_vfiprintf_r+0x1ce>
 8011362:	9b03      	ldr	r3, [sp, #12]
 8011364:	1d1a      	adds	r2, r3, #4
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	9203      	str	r2, [sp, #12]
 801136a:	2b00      	cmp	r3, #0
 801136c:	bfb8      	it	lt
 801136e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011372:	3402      	adds	r4, #2
 8011374:	9305      	str	r3, [sp, #20]
 8011376:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801145c <_vfiprintf_r+0x25c>
 801137a:	7821      	ldrb	r1, [r4, #0]
 801137c:	2203      	movs	r2, #3
 801137e:	4650      	mov	r0, sl
 8011380:	f7ee ff46 	bl	8000210 <memchr>
 8011384:	b140      	cbz	r0, 8011398 <_vfiprintf_r+0x198>
 8011386:	2340      	movs	r3, #64	; 0x40
 8011388:	eba0 000a 	sub.w	r0, r0, sl
 801138c:	fa03 f000 	lsl.w	r0, r3, r0
 8011390:	9b04      	ldr	r3, [sp, #16]
 8011392:	4303      	orrs	r3, r0
 8011394:	3401      	adds	r4, #1
 8011396:	9304      	str	r3, [sp, #16]
 8011398:	f814 1b01 	ldrb.w	r1, [r4], #1
 801139c:	482c      	ldr	r0, [pc, #176]	; (8011450 <_vfiprintf_r+0x250>)
 801139e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80113a2:	2206      	movs	r2, #6
 80113a4:	f7ee ff34 	bl	8000210 <memchr>
 80113a8:	2800      	cmp	r0, #0
 80113aa:	d03f      	beq.n	801142c <_vfiprintf_r+0x22c>
 80113ac:	4b29      	ldr	r3, [pc, #164]	; (8011454 <_vfiprintf_r+0x254>)
 80113ae:	bb1b      	cbnz	r3, 80113f8 <_vfiprintf_r+0x1f8>
 80113b0:	9b03      	ldr	r3, [sp, #12]
 80113b2:	3307      	adds	r3, #7
 80113b4:	f023 0307 	bic.w	r3, r3, #7
 80113b8:	3308      	adds	r3, #8
 80113ba:	9303      	str	r3, [sp, #12]
 80113bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113be:	443b      	add	r3, r7
 80113c0:	9309      	str	r3, [sp, #36]	; 0x24
 80113c2:	e767      	b.n	8011294 <_vfiprintf_r+0x94>
 80113c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80113c8:	460c      	mov	r4, r1
 80113ca:	2001      	movs	r0, #1
 80113cc:	e7a5      	b.n	801131a <_vfiprintf_r+0x11a>
 80113ce:	2300      	movs	r3, #0
 80113d0:	3401      	adds	r4, #1
 80113d2:	9305      	str	r3, [sp, #20]
 80113d4:	4619      	mov	r1, r3
 80113d6:	f04f 0c0a 	mov.w	ip, #10
 80113da:	4620      	mov	r0, r4
 80113dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113e0:	3a30      	subs	r2, #48	; 0x30
 80113e2:	2a09      	cmp	r2, #9
 80113e4:	d903      	bls.n	80113ee <_vfiprintf_r+0x1ee>
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d0c5      	beq.n	8011376 <_vfiprintf_r+0x176>
 80113ea:	9105      	str	r1, [sp, #20]
 80113ec:	e7c3      	b.n	8011376 <_vfiprintf_r+0x176>
 80113ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80113f2:	4604      	mov	r4, r0
 80113f4:	2301      	movs	r3, #1
 80113f6:	e7f0      	b.n	80113da <_vfiprintf_r+0x1da>
 80113f8:	ab03      	add	r3, sp, #12
 80113fa:	9300      	str	r3, [sp, #0]
 80113fc:	462a      	mov	r2, r5
 80113fe:	4b16      	ldr	r3, [pc, #88]	; (8011458 <_vfiprintf_r+0x258>)
 8011400:	a904      	add	r1, sp, #16
 8011402:	4630      	mov	r0, r6
 8011404:	f7fb f9ba 	bl	800c77c <_printf_float>
 8011408:	4607      	mov	r7, r0
 801140a:	1c78      	adds	r0, r7, #1
 801140c:	d1d6      	bne.n	80113bc <_vfiprintf_r+0x1bc>
 801140e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011410:	07d9      	lsls	r1, r3, #31
 8011412:	d405      	bmi.n	8011420 <_vfiprintf_r+0x220>
 8011414:	89ab      	ldrh	r3, [r5, #12]
 8011416:	059a      	lsls	r2, r3, #22
 8011418:	d402      	bmi.n	8011420 <_vfiprintf_r+0x220>
 801141a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801141c:	f7ff fe71 	bl	8011102 <__retarget_lock_release_recursive>
 8011420:	89ab      	ldrh	r3, [r5, #12]
 8011422:	065b      	lsls	r3, r3, #25
 8011424:	f53f af12 	bmi.w	801124c <_vfiprintf_r+0x4c>
 8011428:	9809      	ldr	r0, [sp, #36]	; 0x24
 801142a:	e711      	b.n	8011250 <_vfiprintf_r+0x50>
 801142c:	ab03      	add	r3, sp, #12
 801142e:	9300      	str	r3, [sp, #0]
 8011430:	462a      	mov	r2, r5
 8011432:	4b09      	ldr	r3, [pc, #36]	; (8011458 <_vfiprintf_r+0x258>)
 8011434:	a904      	add	r1, sp, #16
 8011436:	4630      	mov	r0, r6
 8011438:	f7fb fc44 	bl	800ccc4 <_printf_i>
 801143c:	e7e4      	b.n	8011408 <_vfiprintf_r+0x208>
 801143e:	bf00      	nop
 8011440:	0801485c 	.word	0x0801485c
 8011444:	0801487c 	.word	0x0801487c
 8011448:	0801483c 	.word	0x0801483c
 801144c:	080147d4 	.word	0x080147d4
 8011450:	080147de 	.word	0x080147de
 8011454:	0800c77d 	.word	0x0800c77d
 8011458:	080111dd 	.word	0x080111dd
 801145c:	080147da 	.word	0x080147da

08011460 <__swbuf_r>:
 8011460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011462:	460e      	mov	r6, r1
 8011464:	4614      	mov	r4, r2
 8011466:	4605      	mov	r5, r0
 8011468:	b118      	cbz	r0, 8011472 <__swbuf_r+0x12>
 801146a:	6983      	ldr	r3, [r0, #24]
 801146c:	b90b      	cbnz	r3, 8011472 <__swbuf_r+0x12>
 801146e:	f7ff fd97 	bl	8010fa0 <__sinit>
 8011472:	4b21      	ldr	r3, [pc, #132]	; (80114f8 <__swbuf_r+0x98>)
 8011474:	429c      	cmp	r4, r3
 8011476:	d12b      	bne.n	80114d0 <__swbuf_r+0x70>
 8011478:	686c      	ldr	r4, [r5, #4]
 801147a:	69a3      	ldr	r3, [r4, #24]
 801147c:	60a3      	str	r3, [r4, #8]
 801147e:	89a3      	ldrh	r3, [r4, #12]
 8011480:	071a      	lsls	r2, r3, #28
 8011482:	d52f      	bpl.n	80114e4 <__swbuf_r+0x84>
 8011484:	6923      	ldr	r3, [r4, #16]
 8011486:	b36b      	cbz	r3, 80114e4 <__swbuf_r+0x84>
 8011488:	6923      	ldr	r3, [r4, #16]
 801148a:	6820      	ldr	r0, [r4, #0]
 801148c:	1ac0      	subs	r0, r0, r3
 801148e:	6963      	ldr	r3, [r4, #20]
 8011490:	b2f6      	uxtb	r6, r6
 8011492:	4283      	cmp	r3, r0
 8011494:	4637      	mov	r7, r6
 8011496:	dc04      	bgt.n	80114a2 <__swbuf_r+0x42>
 8011498:	4621      	mov	r1, r4
 801149a:	4628      	mov	r0, r5
 801149c:	f7ff fcec 	bl	8010e78 <_fflush_r>
 80114a0:	bb30      	cbnz	r0, 80114f0 <__swbuf_r+0x90>
 80114a2:	68a3      	ldr	r3, [r4, #8]
 80114a4:	3b01      	subs	r3, #1
 80114a6:	60a3      	str	r3, [r4, #8]
 80114a8:	6823      	ldr	r3, [r4, #0]
 80114aa:	1c5a      	adds	r2, r3, #1
 80114ac:	6022      	str	r2, [r4, #0]
 80114ae:	701e      	strb	r6, [r3, #0]
 80114b0:	6963      	ldr	r3, [r4, #20]
 80114b2:	3001      	adds	r0, #1
 80114b4:	4283      	cmp	r3, r0
 80114b6:	d004      	beq.n	80114c2 <__swbuf_r+0x62>
 80114b8:	89a3      	ldrh	r3, [r4, #12]
 80114ba:	07db      	lsls	r3, r3, #31
 80114bc:	d506      	bpl.n	80114cc <__swbuf_r+0x6c>
 80114be:	2e0a      	cmp	r6, #10
 80114c0:	d104      	bne.n	80114cc <__swbuf_r+0x6c>
 80114c2:	4621      	mov	r1, r4
 80114c4:	4628      	mov	r0, r5
 80114c6:	f7ff fcd7 	bl	8010e78 <_fflush_r>
 80114ca:	b988      	cbnz	r0, 80114f0 <__swbuf_r+0x90>
 80114cc:	4638      	mov	r0, r7
 80114ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114d0:	4b0a      	ldr	r3, [pc, #40]	; (80114fc <__swbuf_r+0x9c>)
 80114d2:	429c      	cmp	r4, r3
 80114d4:	d101      	bne.n	80114da <__swbuf_r+0x7a>
 80114d6:	68ac      	ldr	r4, [r5, #8]
 80114d8:	e7cf      	b.n	801147a <__swbuf_r+0x1a>
 80114da:	4b09      	ldr	r3, [pc, #36]	; (8011500 <__swbuf_r+0xa0>)
 80114dc:	429c      	cmp	r4, r3
 80114de:	bf08      	it	eq
 80114e0:	68ec      	ldreq	r4, [r5, #12]
 80114e2:	e7ca      	b.n	801147a <__swbuf_r+0x1a>
 80114e4:	4621      	mov	r1, r4
 80114e6:	4628      	mov	r0, r5
 80114e8:	f000 f80c 	bl	8011504 <__swsetup_r>
 80114ec:	2800      	cmp	r0, #0
 80114ee:	d0cb      	beq.n	8011488 <__swbuf_r+0x28>
 80114f0:	f04f 37ff 	mov.w	r7, #4294967295
 80114f4:	e7ea      	b.n	80114cc <__swbuf_r+0x6c>
 80114f6:	bf00      	nop
 80114f8:	0801485c 	.word	0x0801485c
 80114fc:	0801487c 	.word	0x0801487c
 8011500:	0801483c 	.word	0x0801483c

08011504 <__swsetup_r>:
 8011504:	4b32      	ldr	r3, [pc, #200]	; (80115d0 <__swsetup_r+0xcc>)
 8011506:	b570      	push	{r4, r5, r6, lr}
 8011508:	681d      	ldr	r5, [r3, #0]
 801150a:	4606      	mov	r6, r0
 801150c:	460c      	mov	r4, r1
 801150e:	b125      	cbz	r5, 801151a <__swsetup_r+0x16>
 8011510:	69ab      	ldr	r3, [r5, #24]
 8011512:	b913      	cbnz	r3, 801151a <__swsetup_r+0x16>
 8011514:	4628      	mov	r0, r5
 8011516:	f7ff fd43 	bl	8010fa0 <__sinit>
 801151a:	4b2e      	ldr	r3, [pc, #184]	; (80115d4 <__swsetup_r+0xd0>)
 801151c:	429c      	cmp	r4, r3
 801151e:	d10f      	bne.n	8011540 <__swsetup_r+0x3c>
 8011520:	686c      	ldr	r4, [r5, #4]
 8011522:	89a3      	ldrh	r3, [r4, #12]
 8011524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011528:	0719      	lsls	r1, r3, #28
 801152a:	d42c      	bmi.n	8011586 <__swsetup_r+0x82>
 801152c:	06dd      	lsls	r5, r3, #27
 801152e:	d411      	bmi.n	8011554 <__swsetup_r+0x50>
 8011530:	2309      	movs	r3, #9
 8011532:	6033      	str	r3, [r6, #0]
 8011534:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011538:	81a3      	strh	r3, [r4, #12]
 801153a:	f04f 30ff 	mov.w	r0, #4294967295
 801153e:	e03e      	b.n	80115be <__swsetup_r+0xba>
 8011540:	4b25      	ldr	r3, [pc, #148]	; (80115d8 <__swsetup_r+0xd4>)
 8011542:	429c      	cmp	r4, r3
 8011544:	d101      	bne.n	801154a <__swsetup_r+0x46>
 8011546:	68ac      	ldr	r4, [r5, #8]
 8011548:	e7eb      	b.n	8011522 <__swsetup_r+0x1e>
 801154a:	4b24      	ldr	r3, [pc, #144]	; (80115dc <__swsetup_r+0xd8>)
 801154c:	429c      	cmp	r4, r3
 801154e:	bf08      	it	eq
 8011550:	68ec      	ldreq	r4, [r5, #12]
 8011552:	e7e6      	b.n	8011522 <__swsetup_r+0x1e>
 8011554:	0758      	lsls	r0, r3, #29
 8011556:	d512      	bpl.n	801157e <__swsetup_r+0x7a>
 8011558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801155a:	b141      	cbz	r1, 801156e <__swsetup_r+0x6a>
 801155c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011560:	4299      	cmp	r1, r3
 8011562:	d002      	beq.n	801156a <__swsetup_r+0x66>
 8011564:	4630      	mov	r0, r6
 8011566:	f7fe fd51 	bl	801000c <_free_r>
 801156a:	2300      	movs	r3, #0
 801156c:	6363      	str	r3, [r4, #52]	; 0x34
 801156e:	89a3      	ldrh	r3, [r4, #12]
 8011570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011574:	81a3      	strh	r3, [r4, #12]
 8011576:	2300      	movs	r3, #0
 8011578:	6063      	str	r3, [r4, #4]
 801157a:	6923      	ldr	r3, [r4, #16]
 801157c:	6023      	str	r3, [r4, #0]
 801157e:	89a3      	ldrh	r3, [r4, #12]
 8011580:	f043 0308 	orr.w	r3, r3, #8
 8011584:	81a3      	strh	r3, [r4, #12]
 8011586:	6923      	ldr	r3, [r4, #16]
 8011588:	b94b      	cbnz	r3, 801159e <__swsetup_r+0x9a>
 801158a:	89a3      	ldrh	r3, [r4, #12]
 801158c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011594:	d003      	beq.n	801159e <__swsetup_r+0x9a>
 8011596:	4621      	mov	r1, r4
 8011598:	4630      	mov	r0, r6
 801159a:	f000 f84d 	bl	8011638 <__smakebuf_r>
 801159e:	89a0      	ldrh	r0, [r4, #12]
 80115a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80115a4:	f010 0301 	ands.w	r3, r0, #1
 80115a8:	d00a      	beq.n	80115c0 <__swsetup_r+0xbc>
 80115aa:	2300      	movs	r3, #0
 80115ac:	60a3      	str	r3, [r4, #8]
 80115ae:	6963      	ldr	r3, [r4, #20]
 80115b0:	425b      	negs	r3, r3
 80115b2:	61a3      	str	r3, [r4, #24]
 80115b4:	6923      	ldr	r3, [r4, #16]
 80115b6:	b943      	cbnz	r3, 80115ca <__swsetup_r+0xc6>
 80115b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80115bc:	d1ba      	bne.n	8011534 <__swsetup_r+0x30>
 80115be:	bd70      	pop	{r4, r5, r6, pc}
 80115c0:	0781      	lsls	r1, r0, #30
 80115c2:	bf58      	it	pl
 80115c4:	6963      	ldrpl	r3, [r4, #20]
 80115c6:	60a3      	str	r3, [r4, #8]
 80115c8:	e7f4      	b.n	80115b4 <__swsetup_r+0xb0>
 80115ca:	2000      	movs	r0, #0
 80115cc:	e7f7      	b.n	80115be <__swsetup_r+0xba>
 80115ce:	bf00      	nop
 80115d0:	2000003c 	.word	0x2000003c
 80115d4:	0801485c 	.word	0x0801485c
 80115d8:	0801487c 	.word	0x0801487c
 80115dc:	0801483c 	.word	0x0801483c

080115e0 <abort>:
 80115e0:	b508      	push	{r3, lr}
 80115e2:	2006      	movs	r0, #6
 80115e4:	f000 f898 	bl	8011718 <raise>
 80115e8:	2001      	movs	r0, #1
 80115ea:	f7f4 fd77 	bl	80060dc <_exit>

080115ee <__swhatbuf_r>:
 80115ee:	b570      	push	{r4, r5, r6, lr}
 80115f0:	460e      	mov	r6, r1
 80115f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115f6:	2900      	cmp	r1, #0
 80115f8:	b096      	sub	sp, #88	; 0x58
 80115fa:	4614      	mov	r4, r2
 80115fc:	461d      	mov	r5, r3
 80115fe:	da08      	bge.n	8011612 <__swhatbuf_r+0x24>
 8011600:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011604:	2200      	movs	r2, #0
 8011606:	602a      	str	r2, [r5, #0]
 8011608:	061a      	lsls	r2, r3, #24
 801160a:	d410      	bmi.n	801162e <__swhatbuf_r+0x40>
 801160c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011610:	e00e      	b.n	8011630 <__swhatbuf_r+0x42>
 8011612:	466a      	mov	r2, sp
 8011614:	f000 f89c 	bl	8011750 <_fstat_r>
 8011618:	2800      	cmp	r0, #0
 801161a:	dbf1      	blt.n	8011600 <__swhatbuf_r+0x12>
 801161c:	9a01      	ldr	r2, [sp, #4]
 801161e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011622:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011626:	425a      	negs	r2, r3
 8011628:	415a      	adcs	r2, r3
 801162a:	602a      	str	r2, [r5, #0]
 801162c:	e7ee      	b.n	801160c <__swhatbuf_r+0x1e>
 801162e:	2340      	movs	r3, #64	; 0x40
 8011630:	2000      	movs	r0, #0
 8011632:	6023      	str	r3, [r4, #0]
 8011634:	b016      	add	sp, #88	; 0x58
 8011636:	bd70      	pop	{r4, r5, r6, pc}

08011638 <__smakebuf_r>:
 8011638:	898b      	ldrh	r3, [r1, #12]
 801163a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801163c:	079d      	lsls	r5, r3, #30
 801163e:	4606      	mov	r6, r0
 8011640:	460c      	mov	r4, r1
 8011642:	d507      	bpl.n	8011654 <__smakebuf_r+0x1c>
 8011644:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011648:	6023      	str	r3, [r4, #0]
 801164a:	6123      	str	r3, [r4, #16]
 801164c:	2301      	movs	r3, #1
 801164e:	6163      	str	r3, [r4, #20]
 8011650:	b002      	add	sp, #8
 8011652:	bd70      	pop	{r4, r5, r6, pc}
 8011654:	ab01      	add	r3, sp, #4
 8011656:	466a      	mov	r2, sp
 8011658:	f7ff ffc9 	bl	80115ee <__swhatbuf_r>
 801165c:	9900      	ldr	r1, [sp, #0]
 801165e:	4605      	mov	r5, r0
 8011660:	4630      	mov	r0, r6
 8011662:	f7fe fd3f 	bl	80100e4 <_malloc_r>
 8011666:	b948      	cbnz	r0, 801167c <__smakebuf_r+0x44>
 8011668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801166c:	059a      	lsls	r2, r3, #22
 801166e:	d4ef      	bmi.n	8011650 <__smakebuf_r+0x18>
 8011670:	f023 0303 	bic.w	r3, r3, #3
 8011674:	f043 0302 	orr.w	r3, r3, #2
 8011678:	81a3      	strh	r3, [r4, #12]
 801167a:	e7e3      	b.n	8011644 <__smakebuf_r+0xc>
 801167c:	4b0d      	ldr	r3, [pc, #52]	; (80116b4 <__smakebuf_r+0x7c>)
 801167e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011680:	89a3      	ldrh	r3, [r4, #12]
 8011682:	6020      	str	r0, [r4, #0]
 8011684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011688:	81a3      	strh	r3, [r4, #12]
 801168a:	9b00      	ldr	r3, [sp, #0]
 801168c:	6163      	str	r3, [r4, #20]
 801168e:	9b01      	ldr	r3, [sp, #4]
 8011690:	6120      	str	r0, [r4, #16]
 8011692:	b15b      	cbz	r3, 80116ac <__smakebuf_r+0x74>
 8011694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011698:	4630      	mov	r0, r6
 801169a:	f000 f86b 	bl	8011774 <_isatty_r>
 801169e:	b128      	cbz	r0, 80116ac <__smakebuf_r+0x74>
 80116a0:	89a3      	ldrh	r3, [r4, #12]
 80116a2:	f023 0303 	bic.w	r3, r3, #3
 80116a6:	f043 0301 	orr.w	r3, r3, #1
 80116aa:	81a3      	strh	r3, [r4, #12]
 80116ac:	89a0      	ldrh	r0, [r4, #12]
 80116ae:	4305      	orrs	r5, r0
 80116b0:	81a5      	strh	r5, [r4, #12]
 80116b2:	e7cd      	b.n	8011650 <__smakebuf_r+0x18>
 80116b4:	08010f39 	.word	0x08010f39

080116b8 <_malloc_usable_size_r>:
 80116b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116bc:	1f18      	subs	r0, r3, #4
 80116be:	2b00      	cmp	r3, #0
 80116c0:	bfbc      	itt	lt
 80116c2:	580b      	ldrlt	r3, [r1, r0]
 80116c4:	18c0      	addlt	r0, r0, r3
 80116c6:	4770      	bx	lr

080116c8 <_raise_r>:
 80116c8:	291f      	cmp	r1, #31
 80116ca:	b538      	push	{r3, r4, r5, lr}
 80116cc:	4604      	mov	r4, r0
 80116ce:	460d      	mov	r5, r1
 80116d0:	d904      	bls.n	80116dc <_raise_r+0x14>
 80116d2:	2316      	movs	r3, #22
 80116d4:	6003      	str	r3, [r0, #0]
 80116d6:	f04f 30ff 	mov.w	r0, #4294967295
 80116da:	bd38      	pop	{r3, r4, r5, pc}
 80116dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80116de:	b112      	cbz	r2, 80116e6 <_raise_r+0x1e>
 80116e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80116e4:	b94b      	cbnz	r3, 80116fa <_raise_r+0x32>
 80116e6:	4620      	mov	r0, r4
 80116e8:	f000 f830 	bl	801174c <_getpid_r>
 80116ec:	462a      	mov	r2, r5
 80116ee:	4601      	mov	r1, r0
 80116f0:	4620      	mov	r0, r4
 80116f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116f6:	f000 b817 	b.w	8011728 <_kill_r>
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	d00a      	beq.n	8011714 <_raise_r+0x4c>
 80116fe:	1c59      	adds	r1, r3, #1
 8011700:	d103      	bne.n	801170a <_raise_r+0x42>
 8011702:	2316      	movs	r3, #22
 8011704:	6003      	str	r3, [r0, #0]
 8011706:	2001      	movs	r0, #1
 8011708:	e7e7      	b.n	80116da <_raise_r+0x12>
 801170a:	2400      	movs	r4, #0
 801170c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011710:	4628      	mov	r0, r5
 8011712:	4798      	blx	r3
 8011714:	2000      	movs	r0, #0
 8011716:	e7e0      	b.n	80116da <_raise_r+0x12>

08011718 <raise>:
 8011718:	4b02      	ldr	r3, [pc, #8]	; (8011724 <raise+0xc>)
 801171a:	4601      	mov	r1, r0
 801171c:	6818      	ldr	r0, [r3, #0]
 801171e:	f7ff bfd3 	b.w	80116c8 <_raise_r>
 8011722:	bf00      	nop
 8011724:	2000003c 	.word	0x2000003c

08011728 <_kill_r>:
 8011728:	b538      	push	{r3, r4, r5, lr}
 801172a:	4d07      	ldr	r5, [pc, #28]	; (8011748 <_kill_r+0x20>)
 801172c:	2300      	movs	r3, #0
 801172e:	4604      	mov	r4, r0
 8011730:	4608      	mov	r0, r1
 8011732:	4611      	mov	r1, r2
 8011734:	602b      	str	r3, [r5, #0]
 8011736:	f7f4 fcc1 	bl	80060bc <_kill>
 801173a:	1c43      	adds	r3, r0, #1
 801173c:	d102      	bne.n	8011744 <_kill_r+0x1c>
 801173e:	682b      	ldr	r3, [r5, #0]
 8011740:	b103      	cbz	r3, 8011744 <_kill_r+0x1c>
 8011742:	6023      	str	r3, [r4, #0]
 8011744:	bd38      	pop	{r3, r4, r5, pc}
 8011746:	bf00      	nop
 8011748:	20013b68 	.word	0x20013b68

0801174c <_getpid_r>:
 801174c:	f7f4 bcae 	b.w	80060ac <_getpid>

08011750 <_fstat_r>:
 8011750:	b538      	push	{r3, r4, r5, lr}
 8011752:	4d07      	ldr	r5, [pc, #28]	; (8011770 <_fstat_r+0x20>)
 8011754:	2300      	movs	r3, #0
 8011756:	4604      	mov	r4, r0
 8011758:	4608      	mov	r0, r1
 801175a:	4611      	mov	r1, r2
 801175c:	602b      	str	r3, [r5, #0]
 801175e:	f7f4 fd0c 	bl	800617a <_fstat>
 8011762:	1c43      	adds	r3, r0, #1
 8011764:	d102      	bne.n	801176c <_fstat_r+0x1c>
 8011766:	682b      	ldr	r3, [r5, #0]
 8011768:	b103      	cbz	r3, 801176c <_fstat_r+0x1c>
 801176a:	6023      	str	r3, [r4, #0]
 801176c:	bd38      	pop	{r3, r4, r5, pc}
 801176e:	bf00      	nop
 8011770:	20013b68 	.word	0x20013b68

08011774 <_isatty_r>:
 8011774:	b538      	push	{r3, r4, r5, lr}
 8011776:	4d06      	ldr	r5, [pc, #24]	; (8011790 <_isatty_r+0x1c>)
 8011778:	2300      	movs	r3, #0
 801177a:	4604      	mov	r4, r0
 801177c:	4608      	mov	r0, r1
 801177e:	602b      	str	r3, [r5, #0]
 8011780:	f7f4 fd0b 	bl	800619a <_isatty>
 8011784:	1c43      	adds	r3, r0, #1
 8011786:	d102      	bne.n	801178e <_isatty_r+0x1a>
 8011788:	682b      	ldr	r3, [r5, #0]
 801178a:	b103      	cbz	r3, 801178e <_isatty_r+0x1a>
 801178c:	6023      	str	r3, [r4, #0]
 801178e:	bd38      	pop	{r3, r4, r5, pc}
 8011790:	20013b68 	.word	0x20013b68
 8011794:	00000000 	.word	0x00000000

08011798 <cos>:
 8011798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801179a:	ec53 2b10 	vmov	r2, r3, d0
 801179e:	4826      	ldr	r0, [pc, #152]	; (8011838 <cos+0xa0>)
 80117a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80117a4:	4281      	cmp	r1, r0
 80117a6:	dc06      	bgt.n	80117b6 <cos+0x1e>
 80117a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8011830 <cos+0x98>
 80117ac:	b005      	add	sp, #20
 80117ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80117b2:	f001 bcf5 	b.w	80131a0 <__kernel_cos>
 80117b6:	4821      	ldr	r0, [pc, #132]	; (801183c <cos+0xa4>)
 80117b8:	4281      	cmp	r1, r0
 80117ba:	dd09      	ble.n	80117d0 <cos+0x38>
 80117bc:	ee10 0a10 	vmov	r0, s0
 80117c0:	4619      	mov	r1, r3
 80117c2:	f7ee fd79 	bl	80002b8 <__aeabi_dsub>
 80117c6:	ec41 0b10 	vmov	d0, r0, r1
 80117ca:	b005      	add	sp, #20
 80117cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80117d0:	4668      	mov	r0, sp
 80117d2:	f001 fa21 	bl	8012c18 <__ieee754_rem_pio2>
 80117d6:	f000 0003 	and.w	r0, r0, #3
 80117da:	2801      	cmp	r0, #1
 80117dc:	d00b      	beq.n	80117f6 <cos+0x5e>
 80117de:	2802      	cmp	r0, #2
 80117e0:	d016      	beq.n	8011810 <cos+0x78>
 80117e2:	b9e0      	cbnz	r0, 801181e <cos+0x86>
 80117e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80117e8:	ed9d 0b00 	vldr	d0, [sp]
 80117ec:	f001 fcd8 	bl	80131a0 <__kernel_cos>
 80117f0:	ec51 0b10 	vmov	r0, r1, d0
 80117f4:	e7e7      	b.n	80117c6 <cos+0x2e>
 80117f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80117fa:	ed9d 0b00 	vldr	d0, [sp]
 80117fe:	f002 f8e7 	bl	80139d0 <__kernel_sin>
 8011802:	ec53 2b10 	vmov	r2, r3, d0
 8011806:	ee10 0a10 	vmov	r0, s0
 801180a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801180e:	e7da      	b.n	80117c6 <cos+0x2e>
 8011810:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011814:	ed9d 0b00 	vldr	d0, [sp]
 8011818:	f001 fcc2 	bl	80131a0 <__kernel_cos>
 801181c:	e7f1      	b.n	8011802 <cos+0x6a>
 801181e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011822:	ed9d 0b00 	vldr	d0, [sp]
 8011826:	2001      	movs	r0, #1
 8011828:	f002 f8d2 	bl	80139d0 <__kernel_sin>
 801182c:	e7e0      	b.n	80117f0 <cos+0x58>
 801182e:	bf00      	nop
	...
 8011838:	3fe921fb 	.word	0x3fe921fb
 801183c:	7fefffff 	.word	0x7fefffff

08011840 <round>:
 8011840:	ec51 0b10 	vmov	r0, r1, d0
 8011844:	b570      	push	{r4, r5, r6, lr}
 8011846:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801184a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801184e:	2c13      	cmp	r4, #19
 8011850:	ee10 2a10 	vmov	r2, s0
 8011854:	460b      	mov	r3, r1
 8011856:	dc19      	bgt.n	801188c <round+0x4c>
 8011858:	2c00      	cmp	r4, #0
 801185a:	da09      	bge.n	8011870 <round+0x30>
 801185c:	3401      	adds	r4, #1
 801185e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011862:	d103      	bne.n	801186c <round+0x2c>
 8011864:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011868:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801186c:	2200      	movs	r2, #0
 801186e:	e028      	b.n	80118c2 <round+0x82>
 8011870:	4d15      	ldr	r5, [pc, #84]	; (80118c8 <round+0x88>)
 8011872:	4125      	asrs	r5, r4
 8011874:	ea01 0605 	and.w	r6, r1, r5
 8011878:	4332      	orrs	r2, r6
 801187a:	d00e      	beq.n	801189a <round+0x5a>
 801187c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011880:	fa42 f404 	asr.w	r4, r2, r4
 8011884:	4423      	add	r3, r4
 8011886:	ea23 0305 	bic.w	r3, r3, r5
 801188a:	e7ef      	b.n	801186c <round+0x2c>
 801188c:	2c33      	cmp	r4, #51	; 0x33
 801188e:	dd07      	ble.n	80118a0 <round+0x60>
 8011890:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8011894:	d101      	bne.n	801189a <round+0x5a>
 8011896:	f7ee fd11 	bl	80002bc <__adddf3>
 801189a:	ec41 0b10 	vmov	d0, r0, r1
 801189e:	bd70      	pop	{r4, r5, r6, pc}
 80118a0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80118a4:	f04f 35ff 	mov.w	r5, #4294967295
 80118a8:	40f5      	lsrs	r5, r6
 80118aa:	4228      	tst	r0, r5
 80118ac:	d0f5      	beq.n	801189a <round+0x5a>
 80118ae:	2101      	movs	r1, #1
 80118b0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80118b4:	fa01 f404 	lsl.w	r4, r1, r4
 80118b8:	1912      	adds	r2, r2, r4
 80118ba:	bf28      	it	cs
 80118bc:	185b      	addcs	r3, r3, r1
 80118be:	ea22 0205 	bic.w	r2, r2, r5
 80118c2:	4619      	mov	r1, r3
 80118c4:	4610      	mov	r0, r2
 80118c6:	e7e8      	b.n	801189a <round+0x5a>
 80118c8:	000fffff 	.word	0x000fffff
 80118cc:	00000000 	.word	0x00000000

080118d0 <sin>:
 80118d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118d2:	ec53 2b10 	vmov	r2, r3, d0
 80118d6:	4828      	ldr	r0, [pc, #160]	; (8011978 <sin+0xa8>)
 80118d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80118dc:	4281      	cmp	r1, r0
 80118de:	dc07      	bgt.n	80118f0 <sin+0x20>
 80118e0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8011970 <sin+0xa0>
 80118e4:	2000      	movs	r0, #0
 80118e6:	b005      	add	sp, #20
 80118e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80118ec:	f002 b870 	b.w	80139d0 <__kernel_sin>
 80118f0:	4822      	ldr	r0, [pc, #136]	; (801197c <sin+0xac>)
 80118f2:	4281      	cmp	r1, r0
 80118f4:	dd09      	ble.n	801190a <sin+0x3a>
 80118f6:	ee10 0a10 	vmov	r0, s0
 80118fa:	4619      	mov	r1, r3
 80118fc:	f7ee fcdc 	bl	80002b8 <__aeabi_dsub>
 8011900:	ec41 0b10 	vmov	d0, r0, r1
 8011904:	b005      	add	sp, #20
 8011906:	f85d fb04 	ldr.w	pc, [sp], #4
 801190a:	4668      	mov	r0, sp
 801190c:	f001 f984 	bl	8012c18 <__ieee754_rem_pio2>
 8011910:	f000 0003 	and.w	r0, r0, #3
 8011914:	2801      	cmp	r0, #1
 8011916:	d00c      	beq.n	8011932 <sin+0x62>
 8011918:	2802      	cmp	r0, #2
 801191a:	d011      	beq.n	8011940 <sin+0x70>
 801191c:	b9f0      	cbnz	r0, 801195c <sin+0x8c>
 801191e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011922:	ed9d 0b00 	vldr	d0, [sp]
 8011926:	2001      	movs	r0, #1
 8011928:	f002 f852 	bl	80139d0 <__kernel_sin>
 801192c:	ec51 0b10 	vmov	r0, r1, d0
 8011930:	e7e6      	b.n	8011900 <sin+0x30>
 8011932:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011936:	ed9d 0b00 	vldr	d0, [sp]
 801193a:	f001 fc31 	bl	80131a0 <__kernel_cos>
 801193e:	e7f5      	b.n	801192c <sin+0x5c>
 8011940:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011944:	ed9d 0b00 	vldr	d0, [sp]
 8011948:	2001      	movs	r0, #1
 801194a:	f002 f841 	bl	80139d0 <__kernel_sin>
 801194e:	ec53 2b10 	vmov	r2, r3, d0
 8011952:	ee10 0a10 	vmov	r0, s0
 8011956:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801195a:	e7d1      	b.n	8011900 <sin+0x30>
 801195c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011960:	ed9d 0b00 	vldr	d0, [sp]
 8011964:	f001 fc1c 	bl	80131a0 <__kernel_cos>
 8011968:	e7f1      	b.n	801194e <sin+0x7e>
 801196a:	bf00      	nop
 801196c:	f3af 8000 	nop.w
	...
 8011978:	3fe921fb 	.word	0x3fe921fb
 801197c:	7fefffff 	.word	0x7fefffff

08011980 <acos>:
 8011980:	b538      	push	{r3, r4, r5, lr}
 8011982:	ed2d 8b02 	vpush	{d8}
 8011986:	ec55 4b10 	vmov	r4, r5, d0
 801198a:	f000 f8e9 	bl	8011b60 <__ieee754_acos>
 801198e:	4622      	mov	r2, r4
 8011990:	462b      	mov	r3, r5
 8011992:	4620      	mov	r0, r4
 8011994:	4629      	mov	r1, r5
 8011996:	eeb0 8a40 	vmov.f32	s16, s0
 801199a:	eef0 8a60 	vmov.f32	s17, s1
 801199e:	f7ef f8dd 	bl	8000b5c <__aeabi_dcmpun>
 80119a2:	b9a8      	cbnz	r0, 80119d0 <acos+0x50>
 80119a4:	ec45 4b10 	vmov	d0, r4, r5
 80119a8:	f002 faa2 	bl	8013ef0 <fabs>
 80119ac:	4b0c      	ldr	r3, [pc, #48]	; (80119e0 <acos+0x60>)
 80119ae:	ec51 0b10 	vmov	r0, r1, d0
 80119b2:	2200      	movs	r2, #0
 80119b4:	f7ef f8c8 	bl	8000b48 <__aeabi_dcmpgt>
 80119b8:	b150      	cbz	r0, 80119d0 <acos+0x50>
 80119ba:	f7fa fdff 	bl	800c5bc <__errno>
 80119be:	ecbd 8b02 	vpop	{d8}
 80119c2:	2321      	movs	r3, #33	; 0x21
 80119c4:	6003      	str	r3, [r0, #0]
 80119c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119ca:	4806      	ldr	r0, [pc, #24]	; (80119e4 <acos+0x64>)
 80119cc:	f7ff b890 	b.w	8010af0 <nan>
 80119d0:	eeb0 0a48 	vmov.f32	s0, s16
 80119d4:	eef0 0a68 	vmov.f32	s1, s17
 80119d8:	ecbd 8b02 	vpop	{d8}
 80119dc:	bd38      	pop	{r3, r4, r5, pc}
 80119de:	bf00      	nop
 80119e0:	3ff00000 	.word	0x3ff00000
 80119e4:	0801483b 	.word	0x0801483b

080119e8 <atan2>:
 80119e8:	f000 bb1a 	b.w	8012020 <__ieee754_atan2>

080119ec <pow>:
 80119ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ee:	ed2d 8b02 	vpush	{d8}
 80119f2:	eeb0 8a40 	vmov.f32	s16, s0
 80119f6:	eef0 8a60 	vmov.f32	s17, s1
 80119fa:	ec55 4b11 	vmov	r4, r5, d1
 80119fe:	f000 fbdb 	bl	80121b8 <__ieee754_pow>
 8011a02:	4622      	mov	r2, r4
 8011a04:	462b      	mov	r3, r5
 8011a06:	4620      	mov	r0, r4
 8011a08:	4629      	mov	r1, r5
 8011a0a:	ec57 6b10 	vmov	r6, r7, d0
 8011a0e:	f7ef f8a5 	bl	8000b5c <__aeabi_dcmpun>
 8011a12:	2800      	cmp	r0, #0
 8011a14:	d13b      	bne.n	8011a8e <pow+0xa2>
 8011a16:	ec51 0b18 	vmov	r0, r1, d8
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	f7ef f86b 	bl	8000af8 <__aeabi_dcmpeq>
 8011a22:	b1b8      	cbz	r0, 8011a54 <pow+0x68>
 8011a24:	2200      	movs	r2, #0
 8011a26:	2300      	movs	r3, #0
 8011a28:	4620      	mov	r0, r4
 8011a2a:	4629      	mov	r1, r5
 8011a2c:	f7ef f864 	bl	8000af8 <__aeabi_dcmpeq>
 8011a30:	2800      	cmp	r0, #0
 8011a32:	d146      	bne.n	8011ac2 <pow+0xd6>
 8011a34:	ec45 4b10 	vmov	d0, r4, r5
 8011a38:	f002 fa63 	bl	8013f02 <finite>
 8011a3c:	b338      	cbz	r0, 8011a8e <pow+0xa2>
 8011a3e:	2200      	movs	r2, #0
 8011a40:	2300      	movs	r3, #0
 8011a42:	4620      	mov	r0, r4
 8011a44:	4629      	mov	r1, r5
 8011a46:	f7ef f861 	bl	8000b0c <__aeabi_dcmplt>
 8011a4a:	b300      	cbz	r0, 8011a8e <pow+0xa2>
 8011a4c:	f7fa fdb6 	bl	800c5bc <__errno>
 8011a50:	2322      	movs	r3, #34	; 0x22
 8011a52:	e01b      	b.n	8011a8c <pow+0xa0>
 8011a54:	ec47 6b10 	vmov	d0, r6, r7
 8011a58:	f002 fa53 	bl	8013f02 <finite>
 8011a5c:	b9e0      	cbnz	r0, 8011a98 <pow+0xac>
 8011a5e:	eeb0 0a48 	vmov.f32	s0, s16
 8011a62:	eef0 0a68 	vmov.f32	s1, s17
 8011a66:	f002 fa4c 	bl	8013f02 <finite>
 8011a6a:	b1a8      	cbz	r0, 8011a98 <pow+0xac>
 8011a6c:	ec45 4b10 	vmov	d0, r4, r5
 8011a70:	f002 fa47 	bl	8013f02 <finite>
 8011a74:	b180      	cbz	r0, 8011a98 <pow+0xac>
 8011a76:	4632      	mov	r2, r6
 8011a78:	463b      	mov	r3, r7
 8011a7a:	4630      	mov	r0, r6
 8011a7c:	4639      	mov	r1, r7
 8011a7e:	f7ef f86d 	bl	8000b5c <__aeabi_dcmpun>
 8011a82:	2800      	cmp	r0, #0
 8011a84:	d0e2      	beq.n	8011a4c <pow+0x60>
 8011a86:	f7fa fd99 	bl	800c5bc <__errno>
 8011a8a:	2321      	movs	r3, #33	; 0x21
 8011a8c:	6003      	str	r3, [r0, #0]
 8011a8e:	ecbd 8b02 	vpop	{d8}
 8011a92:	ec47 6b10 	vmov	d0, r6, r7
 8011a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a98:	2200      	movs	r2, #0
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	4639      	mov	r1, r7
 8011aa0:	f7ef f82a 	bl	8000af8 <__aeabi_dcmpeq>
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	d0f2      	beq.n	8011a8e <pow+0xa2>
 8011aa8:	eeb0 0a48 	vmov.f32	s0, s16
 8011aac:	eef0 0a68 	vmov.f32	s1, s17
 8011ab0:	f002 fa27 	bl	8013f02 <finite>
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	d0ea      	beq.n	8011a8e <pow+0xa2>
 8011ab8:	ec45 4b10 	vmov	d0, r4, r5
 8011abc:	f002 fa21 	bl	8013f02 <finite>
 8011ac0:	e7c3      	b.n	8011a4a <pow+0x5e>
 8011ac2:	4f01      	ldr	r7, [pc, #4]	; (8011ac8 <pow+0xdc>)
 8011ac4:	2600      	movs	r6, #0
 8011ac6:	e7e2      	b.n	8011a8e <pow+0xa2>
 8011ac8:	3ff00000 	.word	0x3ff00000

08011acc <sqrt>:
 8011acc:	b538      	push	{r3, r4, r5, lr}
 8011ace:	ed2d 8b02 	vpush	{d8}
 8011ad2:	ec55 4b10 	vmov	r4, r5, d0
 8011ad6:	f001 faab 	bl	8013030 <__ieee754_sqrt>
 8011ada:	4622      	mov	r2, r4
 8011adc:	462b      	mov	r3, r5
 8011ade:	4620      	mov	r0, r4
 8011ae0:	4629      	mov	r1, r5
 8011ae2:	eeb0 8a40 	vmov.f32	s16, s0
 8011ae6:	eef0 8a60 	vmov.f32	s17, s1
 8011aea:	f7ef f837 	bl	8000b5c <__aeabi_dcmpun>
 8011aee:	b990      	cbnz	r0, 8011b16 <sqrt+0x4a>
 8011af0:	2200      	movs	r2, #0
 8011af2:	2300      	movs	r3, #0
 8011af4:	4620      	mov	r0, r4
 8011af6:	4629      	mov	r1, r5
 8011af8:	f7ef f808 	bl	8000b0c <__aeabi_dcmplt>
 8011afc:	b158      	cbz	r0, 8011b16 <sqrt+0x4a>
 8011afe:	f7fa fd5d 	bl	800c5bc <__errno>
 8011b02:	2321      	movs	r3, #33	; 0x21
 8011b04:	6003      	str	r3, [r0, #0]
 8011b06:	2200      	movs	r2, #0
 8011b08:	2300      	movs	r3, #0
 8011b0a:	4610      	mov	r0, r2
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	f7ee feb5 	bl	800087c <__aeabi_ddiv>
 8011b12:	ec41 0b18 	vmov	d8, r0, r1
 8011b16:	eeb0 0a48 	vmov.f32	s0, s16
 8011b1a:	eef0 0a68 	vmov.f32	s1, s17
 8011b1e:	ecbd 8b02 	vpop	{d8}
 8011b22:	bd38      	pop	{r3, r4, r5, pc}

08011b24 <sqrtf>:
 8011b24:	b508      	push	{r3, lr}
 8011b26:	ed2d 8b02 	vpush	{d8}
 8011b2a:	eeb0 8a40 	vmov.f32	s16, s0
 8011b2e:	f001 fb31 	bl	8013194 <__ieee754_sqrtf>
 8011b32:	eeb4 8a48 	vcmp.f32	s16, s16
 8011b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b3a:	d60c      	bvs.n	8011b56 <sqrtf+0x32>
 8011b3c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8011b5c <sqrtf+0x38>
 8011b40:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b48:	d505      	bpl.n	8011b56 <sqrtf+0x32>
 8011b4a:	f7fa fd37 	bl	800c5bc <__errno>
 8011b4e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011b52:	2321      	movs	r3, #33	; 0x21
 8011b54:	6003      	str	r3, [r0, #0]
 8011b56:	ecbd 8b02 	vpop	{d8}
 8011b5a:	bd08      	pop	{r3, pc}
 8011b5c:	00000000 	.word	0x00000000

08011b60 <__ieee754_acos>:
 8011b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b64:	ec55 4b10 	vmov	r4, r5, d0
 8011b68:	49b7      	ldr	r1, [pc, #732]	; (8011e48 <__ieee754_acos+0x2e8>)
 8011b6a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011b6e:	428b      	cmp	r3, r1
 8011b70:	dd1b      	ble.n	8011baa <__ieee754_acos+0x4a>
 8011b72:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8011b76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011b7a:	4323      	orrs	r3, r4
 8011b7c:	d106      	bne.n	8011b8c <__ieee754_acos+0x2c>
 8011b7e:	2d00      	cmp	r5, #0
 8011b80:	f300 8211 	bgt.w	8011fa6 <__ieee754_acos+0x446>
 8011b84:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8011de0 <__ieee754_acos+0x280>
 8011b88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b8c:	ee10 2a10 	vmov	r2, s0
 8011b90:	462b      	mov	r3, r5
 8011b92:	ee10 0a10 	vmov	r0, s0
 8011b96:	4629      	mov	r1, r5
 8011b98:	f7ee fb8e 	bl	80002b8 <__aeabi_dsub>
 8011b9c:	4602      	mov	r2, r0
 8011b9e:	460b      	mov	r3, r1
 8011ba0:	f7ee fe6c 	bl	800087c <__aeabi_ddiv>
 8011ba4:	ec41 0b10 	vmov	d0, r0, r1
 8011ba8:	e7ee      	b.n	8011b88 <__ieee754_acos+0x28>
 8011baa:	49a8      	ldr	r1, [pc, #672]	; (8011e4c <__ieee754_acos+0x2ec>)
 8011bac:	428b      	cmp	r3, r1
 8011bae:	f300 8087 	bgt.w	8011cc0 <__ieee754_acos+0x160>
 8011bb2:	4aa7      	ldr	r2, [pc, #668]	; (8011e50 <__ieee754_acos+0x2f0>)
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	f340 81f9 	ble.w	8011fac <__ieee754_acos+0x44c>
 8011bba:	ee10 2a10 	vmov	r2, s0
 8011bbe:	ee10 0a10 	vmov	r0, s0
 8011bc2:	462b      	mov	r3, r5
 8011bc4:	4629      	mov	r1, r5
 8011bc6:	f7ee fd2f 	bl	8000628 <__aeabi_dmul>
 8011bca:	a387      	add	r3, pc, #540	; (adr r3, 8011de8 <__ieee754_acos+0x288>)
 8011bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd0:	4606      	mov	r6, r0
 8011bd2:	460f      	mov	r7, r1
 8011bd4:	f7ee fd28 	bl	8000628 <__aeabi_dmul>
 8011bd8:	a385      	add	r3, pc, #532	; (adr r3, 8011df0 <__ieee754_acos+0x290>)
 8011bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bde:	f7ee fb6d 	bl	80002bc <__adddf3>
 8011be2:	4632      	mov	r2, r6
 8011be4:	463b      	mov	r3, r7
 8011be6:	f7ee fd1f 	bl	8000628 <__aeabi_dmul>
 8011bea:	a383      	add	r3, pc, #524	; (adr r3, 8011df8 <__ieee754_acos+0x298>)
 8011bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf0:	f7ee fb62 	bl	80002b8 <__aeabi_dsub>
 8011bf4:	4632      	mov	r2, r6
 8011bf6:	463b      	mov	r3, r7
 8011bf8:	f7ee fd16 	bl	8000628 <__aeabi_dmul>
 8011bfc:	a380      	add	r3, pc, #512	; (adr r3, 8011e00 <__ieee754_acos+0x2a0>)
 8011bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c02:	f7ee fb5b 	bl	80002bc <__adddf3>
 8011c06:	4632      	mov	r2, r6
 8011c08:	463b      	mov	r3, r7
 8011c0a:	f7ee fd0d 	bl	8000628 <__aeabi_dmul>
 8011c0e:	a37e      	add	r3, pc, #504	; (adr r3, 8011e08 <__ieee754_acos+0x2a8>)
 8011c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c14:	f7ee fb50 	bl	80002b8 <__aeabi_dsub>
 8011c18:	4632      	mov	r2, r6
 8011c1a:	463b      	mov	r3, r7
 8011c1c:	f7ee fd04 	bl	8000628 <__aeabi_dmul>
 8011c20:	a37b      	add	r3, pc, #492	; (adr r3, 8011e10 <__ieee754_acos+0x2b0>)
 8011c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c26:	f7ee fb49 	bl	80002bc <__adddf3>
 8011c2a:	4632      	mov	r2, r6
 8011c2c:	463b      	mov	r3, r7
 8011c2e:	f7ee fcfb 	bl	8000628 <__aeabi_dmul>
 8011c32:	a379      	add	r3, pc, #484	; (adr r3, 8011e18 <__ieee754_acos+0x2b8>)
 8011c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c38:	4680      	mov	r8, r0
 8011c3a:	4689      	mov	r9, r1
 8011c3c:	4630      	mov	r0, r6
 8011c3e:	4639      	mov	r1, r7
 8011c40:	f7ee fcf2 	bl	8000628 <__aeabi_dmul>
 8011c44:	a376      	add	r3, pc, #472	; (adr r3, 8011e20 <__ieee754_acos+0x2c0>)
 8011c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4a:	f7ee fb35 	bl	80002b8 <__aeabi_dsub>
 8011c4e:	4632      	mov	r2, r6
 8011c50:	463b      	mov	r3, r7
 8011c52:	f7ee fce9 	bl	8000628 <__aeabi_dmul>
 8011c56:	a374      	add	r3, pc, #464	; (adr r3, 8011e28 <__ieee754_acos+0x2c8>)
 8011c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5c:	f7ee fb2e 	bl	80002bc <__adddf3>
 8011c60:	4632      	mov	r2, r6
 8011c62:	463b      	mov	r3, r7
 8011c64:	f7ee fce0 	bl	8000628 <__aeabi_dmul>
 8011c68:	a371      	add	r3, pc, #452	; (adr r3, 8011e30 <__ieee754_acos+0x2d0>)
 8011c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c6e:	f7ee fb23 	bl	80002b8 <__aeabi_dsub>
 8011c72:	4632      	mov	r2, r6
 8011c74:	463b      	mov	r3, r7
 8011c76:	f7ee fcd7 	bl	8000628 <__aeabi_dmul>
 8011c7a:	4b76      	ldr	r3, [pc, #472]	; (8011e54 <__ieee754_acos+0x2f4>)
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	f7ee fb1d 	bl	80002bc <__adddf3>
 8011c82:	4602      	mov	r2, r0
 8011c84:	460b      	mov	r3, r1
 8011c86:	4640      	mov	r0, r8
 8011c88:	4649      	mov	r1, r9
 8011c8a:	f7ee fdf7 	bl	800087c <__aeabi_ddiv>
 8011c8e:	4622      	mov	r2, r4
 8011c90:	462b      	mov	r3, r5
 8011c92:	f7ee fcc9 	bl	8000628 <__aeabi_dmul>
 8011c96:	4602      	mov	r2, r0
 8011c98:	460b      	mov	r3, r1
 8011c9a:	a167      	add	r1, pc, #412	; (adr r1, 8011e38 <__ieee754_acos+0x2d8>)
 8011c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ca0:	f7ee fb0a 	bl	80002b8 <__aeabi_dsub>
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	460b      	mov	r3, r1
 8011ca8:	4620      	mov	r0, r4
 8011caa:	4629      	mov	r1, r5
 8011cac:	f7ee fb04 	bl	80002b8 <__aeabi_dsub>
 8011cb0:	4602      	mov	r2, r0
 8011cb2:	460b      	mov	r3, r1
 8011cb4:	a162      	add	r1, pc, #392	; (adr r1, 8011e40 <__ieee754_acos+0x2e0>)
 8011cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cba:	f7ee fafd 	bl	80002b8 <__aeabi_dsub>
 8011cbe:	e771      	b.n	8011ba4 <__ieee754_acos+0x44>
 8011cc0:	2d00      	cmp	r5, #0
 8011cc2:	f280 80cb 	bge.w	8011e5c <__ieee754_acos+0x2fc>
 8011cc6:	ee10 0a10 	vmov	r0, s0
 8011cca:	4b62      	ldr	r3, [pc, #392]	; (8011e54 <__ieee754_acos+0x2f4>)
 8011ccc:	2200      	movs	r2, #0
 8011cce:	4629      	mov	r1, r5
 8011cd0:	f7ee faf4 	bl	80002bc <__adddf3>
 8011cd4:	4b60      	ldr	r3, [pc, #384]	; (8011e58 <__ieee754_acos+0x2f8>)
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	f7ee fca6 	bl	8000628 <__aeabi_dmul>
 8011cdc:	a342      	add	r3, pc, #264	; (adr r3, 8011de8 <__ieee754_acos+0x288>)
 8011cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce2:	4604      	mov	r4, r0
 8011ce4:	460d      	mov	r5, r1
 8011ce6:	f7ee fc9f 	bl	8000628 <__aeabi_dmul>
 8011cea:	a341      	add	r3, pc, #260	; (adr r3, 8011df0 <__ieee754_acos+0x290>)
 8011cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf0:	f7ee fae4 	bl	80002bc <__adddf3>
 8011cf4:	4622      	mov	r2, r4
 8011cf6:	462b      	mov	r3, r5
 8011cf8:	f7ee fc96 	bl	8000628 <__aeabi_dmul>
 8011cfc:	a33e      	add	r3, pc, #248	; (adr r3, 8011df8 <__ieee754_acos+0x298>)
 8011cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d02:	f7ee fad9 	bl	80002b8 <__aeabi_dsub>
 8011d06:	4622      	mov	r2, r4
 8011d08:	462b      	mov	r3, r5
 8011d0a:	f7ee fc8d 	bl	8000628 <__aeabi_dmul>
 8011d0e:	a33c      	add	r3, pc, #240	; (adr r3, 8011e00 <__ieee754_acos+0x2a0>)
 8011d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d14:	f7ee fad2 	bl	80002bc <__adddf3>
 8011d18:	4622      	mov	r2, r4
 8011d1a:	462b      	mov	r3, r5
 8011d1c:	f7ee fc84 	bl	8000628 <__aeabi_dmul>
 8011d20:	a339      	add	r3, pc, #228	; (adr r3, 8011e08 <__ieee754_acos+0x2a8>)
 8011d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d26:	f7ee fac7 	bl	80002b8 <__aeabi_dsub>
 8011d2a:	4622      	mov	r2, r4
 8011d2c:	462b      	mov	r3, r5
 8011d2e:	f7ee fc7b 	bl	8000628 <__aeabi_dmul>
 8011d32:	a337      	add	r3, pc, #220	; (adr r3, 8011e10 <__ieee754_acos+0x2b0>)
 8011d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d38:	f7ee fac0 	bl	80002bc <__adddf3>
 8011d3c:	4622      	mov	r2, r4
 8011d3e:	462b      	mov	r3, r5
 8011d40:	f7ee fc72 	bl	8000628 <__aeabi_dmul>
 8011d44:	ec45 4b10 	vmov	d0, r4, r5
 8011d48:	4680      	mov	r8, r0
 8011d4a:	4689      	mov	r9, r1
 8011d4c:	f001 f970 	bl	8013030 <__ieee754_sqrt>
 8011d50:	a331      	add	r3, pc, #196	; (adr r3, 8011e18 <__ieee754_acos+0x2b8>)
 8011d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d56:	4620      	mov	r0, r4
 8011d58:	4629      	mov	r1, r5
 8011d5a:	ec57 6b10 	vmov	r6, r7, d0
 8011d5e:	f7ee fc63 	bl	8000628 <__aeabi_dmul>
 8011d62:	a32f      	add	r3, pc, #188	; (adr r3, 8011e20 <__ieee754_acos+0x2c0>)
 8011d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d68:	f7ee faa6 	bl	80002b8 <__aeabi_dsub>
 8011d6c:	4622      	mov	r2, r4
 8011d6e:	462b      	mov	r3, r5
 8011d70:	f7ee fc5a 	bl	8000628 <__aeabi_dmul>
 8011d74:	a32c      	add	r3, pc, #176	; (adr r3, 8011e28 <__ieee754_acos+0x2c8>)
 8011d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7a:	f7ee fa9f 	bl	80002bc <__adddf3>
 8011d7e:	4622      	mov	r2, r4
 8011d80:	462b      	mov	r3, r5
 8011d82:	f7ee fc51 	bl	8000628 <__aeabi_dmul>
 8011d86:	a32a      	add	r3, pc, #168	; (adr r3, 8011e30 <__ieee754_acos+0x2d0>)
 8011d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d8c:	f7ee fa94 	bl	80002b8 <__aeabi_dsub>
 8011d90:	4622      	mov	r2, r4
 8011d92:	462b      	mov	r3, r5
 8011d94:	f7ee fc48 	bl	8000628 <__aeabi_dmul>
 8011d98:	4b2e      	ldr	r3, [pc, #184]	; (8011e54 <__ieee754_acos+0x2f4>)
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	f7ee fa8e 	bl	80002bc <__adddf3>
 8011da0:	4602      	mov	r2, r0
 8011da2:	460b      	mov	r3, r1
 8011da4:	4640      	mov	r0, r8
 8011da6:	4649      	mov	r1, r9
 8011da8:	f7ee fd68 	bl	800087c <__aeabi_ddiv>
 8011dac:	4632      	mov	r2, r6
 8011dae:	463b      	mov	r3, r7
 8011db0:	f7ee fc3a 	bl	8000628 <__aeabi_dmul>
 8011db4:	a320      	add	r3, pc, #128	; (adr r3, 8011e38 <__ieee754_acos+0x2d8>)
 8011db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dba:	f7ee fa7d 	bl	80002b8 <__aeabi_dsub>
 8011dbe:	4632      	mov	r2, r6
 8011dc0:	463b      	mov	r3, r7
 8011dc2:	f7ee fa7b 	bl	80002bc <__adddf3>
 8011dc6:	4602      	mov	r2, r0
 8011dc8:	460b      	mov	r3, r1
 8011dca:	f7ee fa77 	bl	80002bc <__adddf3>
 8011dce:	4602      	mov	r2, r0
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	a103      	add	r1, pc, #12	; (adr r1, 8011de0 <__ieee754_acos+0x280>)
 8011dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dd8:	e76f      	b.n	8011cba <__ieee754_acos+0x15a>
 8011dda:	bf00      	nop
 8011ddc:	f3af 8000 	nop.w
 8011de0:	54442d18 	.word	0x54442d18
 8011de4:	400921fb 	.word	0x400921fb
 8011de8:	0dfdf709 	.word	0x0dfdf709
 8011dec:	3f023de1 	.word	0x3f023de1
 8011df0:	7501b288 	.word	0x7501b288
 8011df4:	3f49efe0 	.word	0x3f49efe0
 8011df8:	b5688f3b 	.word	0xb5688f3b
 8011dfc:	3fa48228 	.word	0x3fa48228
 8011e00:	0e884455 	.word	0x0e884455
 8011e04:	3fc9c155 	.word	0x3fc9c155
 8011e08:	03eb6f7d 	.word	0x03eb6f7d
 8011e0c:	3fd4d612 	.word	0x3fd4d612
 8011e10:	55555555 	.word	0x55555555
 8011e14:	3fc55555 	.word	0x3fc55555
 8011e18:	b12e9282 	.word	0xb12e9282
 8011e1c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011e20:	1b8d0159 	.word	0x1b8d0159
 8011e24:	3fe6066c 	.word	0x3fe6066c
 8011e28:	9c598ac8 	.word	0x9c598ac8
 8011e2c:	40002ae5 	.word	0x40002ae5
 8011e30:	1c8a2d4b 	.word	0x1c8a2d4b
 8011e34:	40033a27 	.word	0x40033a27
 8011e38:	33145c07 	.word	0x33145c07
 8011e3c:	3c91a626 	.word	0x3c91a626
 8011e40:	54442d18 	.word	0x54442d18
 8011e44:	3ff921fb 	.word	0x3ff921fb
 8011e48:	3fefffff 	.word	0x3fefffff
 8011e4c:	3fdfffff 	.word	0x3fdfffff
 8011e50:	3c600000 	.word	0x3c600000
 8011e54:	3ff00000 	.word	0x3ff00000
 8011e58:	3fe00000 	.word	0x3fe00000
 8011e5c:	ee10 2a10 	vmov	r2, s0
 8011e60:	462b      	mov	r3, r5
 8011e62:	496d      	ldr	r1, [pc, #436]	; (8012018 <__ieee754_acos+0x4b8>)
 8011e64:	2000      	movs	r0, #0
 8011e66:	f7ee fa27 	bl	80002b8 <__aeabi_dsub>
 8011e6a:	4b6c      	ldr	r3, [pc, #432]	; (801201c <__ieee754_acos+0x4bc>)
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	f7ee fbdb 	bl	8000628 <__aeabi_dmul>
 8011e72:	4604      	mov	r4, r0
 8011e74:	460d      	mov	r5, r1
 8011e76:	ec45 4b10 	vmov	d0, r4, r5
 8011e7a:	f001 f8d9 	bl	8013030 <__ieee754_sqrt>
 8011e7e:	a34e      	add	r3, pc, #312	; (adr r3, 8011fb8 <__ieee754_acos+0x458>)
 8011e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e84:	4620      	mov	r0, r4
 8011e86:	4629      	mov	r1, r5
 8011e88:	ec59 8b10 	vmov	r8, r9, d0
 8011e8c:	f7ee fbcc 	bl	8000628 <__aeabi_dmul>
 8011e90:	a34b      	add	r3, pc, #300	; (adr r3, 8011fc0 <__ieee754_acos+0x460>)
 8011e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e96:	f7ee fa11 	bl	80002bc <__adddf3>
 8011e9a:	4622      	mov	r2, r4
 8011e9c:	462b      	mov	r3, r5
 8011e9e:	f7ee fbc3 	bl	8000628 <__aeabi_dmul>
 8011ea2:	a349      	add	r3, pc, #292	; (adr r3, 8011fc8 <__ieee754_acos+0x468>)
 8011ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea8:	f7ee fa06 	bl	80002b8 <__aeabi_dsub>
 8011eac:	4622      	mov	r2, r4
 8011eae:	462b      	mov	r3, r5
 8011eb0:	f7ee fbba 	bl	8000628 <__aeabi_dmul>
 8011eb4:	a346      	add	r3, pc, #280	; (adr r3, 8011fd0 <__ieee754_acos+0x470>)
 8011eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eba:	f7ee f9ff 	bl	80002bc <__adddf3>
 8011ebe:	4622      	mov	r2, r4
 8011ec0:	462b      	mov	r3, r5
 8011ec2:	f7ee fbb1 	bl	8000628 <__aeabi_dmul>
 8011ec6:	a344      	add	r3, pc, #272	; (adr r3, 8011fd8 <__ieee754_acos+0x478>)
 8011ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ecc:	f7ee f9f4 	bl	80002b8 <__aeabi_dsub>
 8011ed0:	4622      	mov	r2, r4
 8011ed2:	462b      	mov	r3, r5
 8011ed4:	f7ee fba8 	bl	8000628 <__aeabi_dmul>
 8011ed8:	a341      	add	r3, pc, #260	; (adr r3, 8011fe0 <__ieee754_acos+0x480>)
 8011eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ede:	f7ee f9ed 	bl	80002bc <__adddf3>
 8011ee2:	4622      	mov	r2, r4
 8011ee4:	462b      	mov	r3, r5
 8011ee6:	f7ee fb9f 	bl	8000628 <__aeabi_dmul>
 8011eea:	a33f      	add	r3, pc, #252	; (adr r3, 8011fe8 <__ieee754_acos+0x488>)
 8011eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef0:	4682      	mov	sl, r0
 8011ef2:	468b      	mov	fp, r1
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	4629      	mov	r1, r5
 8011ef8:	f7ee fb96 	bl	8000628 <__aeabi_dmul>
 8011efc:	a33c      	add	r3, pc, #240	; (adr r3, 8011ff0 <__ieee754_acos+0x490>)
 8011efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f02:	f7ee f9d9 	bl	80002b8 <__aeabi_dsub>
 8011f06:	4622      	mov	r2, r4
 8011f08:	462b      	mov	r3, r5
 8011f0a:	f7ee fb8d 	bl	8000628 <__aeabi_dmul>
 8011f0e:	a33a      	add	r3, pc, #232	; (adr r3, 8011ff8 <__ieee754_acos+0x498>)
 8011f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f14:	f7ee f9d2 	bl	80002bc <__adddf3>
 8011f18:	4622      	mov	r2, r4
 8011f1a:	462b      	mov	r3, r5
 8011f1c:	f7ee fb84 	bl	8000628 <__aeabi_dmul>
 8011f20:	a337      	add	r3, pc, #220	; (adr r3, 8012000 <__ieee754_acos+0x4a0>)
 8011f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f26:	f7ee f9c7 	bl	80002b8 <__aeabi_dsub>
 8011f2a:	4622      	mov	r2, r4
 8011f2c:	462b      	mov	r3, r5
 8011f2e:	f7ee fb7b 	bl	8000628 <__aeabi_dmul>
 8011f32:	4b39      	ldr	r3, [pc, #228]	; (8012018 <__ieee754_acos+0x4b8>)
 8011f34:	2200      	movs	r2, #0
 8011f36:	f7ee f9c1 	bl	80002bc <__adddf3>
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	460b      	mov	r3, r1
 8011f3e:	4650      	mov	r0, sl
 8011f40:	4659      	mov	r1, fp
 8011f42:	f7ee fc9b 	bl	800087c <__aeabi_ddiv>
 8011f46:	4642      	mov	r2, r8
 8011f48:	464b      	mov	r3, r9
 8011f4a:	f7ee fb6d 	bl	8000628 <__aeabi_dmul>
 8011f4e:	2600      	movs	r6, #0
 8011f50:	4682      	mov	sl, r0
 8011f52:	468b      	mov	fp, r1
 8011f54:	4632      	mov	r2, r6
 8011f56:	464b      	mov	r3, r9
 8011f58:	4630      	mov	r0, r6
 8011f5a:	4649      	mov	r1, r9
 8011f5c:	f7ee fb64 	bl	8000628 <__aeabi_dmul>
 8011f60:	4602      	mov	r2, r0
 8011f62:	460b      	mov	r3, r1
 8011f64:	4620      	mov	r0, r4
 8011f66:	4629      	mov	r1, r5
 8011f68:	f7ee f9a6 	bl	80002b8 <__aeabi_dsub>
 8011f6c:	4632      	mov	r2, r6
 8011f6e:	4604      	mov	r4, r0
 8011f70:	460d      	mov	r5, r1
 8011f72:	464b      	mov	r3, r9
 8011f74:	4640      	mov	r0, r8
 8011f76:	4649      	mov	r1, r9
 8011f78:	f7ee f9a0 	bl	80002bc <__adddf3>
 8011f7c:	4602      	mov	r2, r0
 8011f7e:	460b      	mov	r3, r1
 8011f80:	4620      	mov	r0, r4
 8011f82:	4629      	mov	r1, r5
 8011f84:	f7ee fc7a 	bl	800087c <__aeabi_ddiv>
 8011f88:	4602      	mov	r2, r0
 8011f8a:	460b      	mov	r3, r1
 8011f8c:	4650      	mov	r0, sl
 8011f8e:	4659      	mov	r1, fp
 8011f90:	f7ee f994 	bl	80002bc <__adddf3>
 8011f94:	4632      	mov	r2, r6
 8011f96:	464b      	mov	r3, r9
 8011f98:	f7ee f990 	bl	80002bc <__adddf3>
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	460b      	mov	r3, r1
 8011fa0:	f7ee f98c 	bl	80002bc <__adddf3>
 8011fa4:	e5fe      	b.n	8011ba4 <__ieee754_acos+0x44>
 8011fa6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8012008 <__ieee754_acos+0x4a8>
 8011faa:	e5ed      	b.n	8011b88 <__ieee754_acos+0x28>
 8011fac:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8012010 <__ieee754_acos+0x4b0>
 8011fb0:	e5ea      	b.n	8011b88 <__ieee754_acos+0x28>
 8011fb2:	bf00      	nop
 8011fb4:	f3af 8000 	nop.w
 8011fb8:	0dfdf709 	.word	0x0dfdf709
 8011fbc:	3f023de1 	.word	0x3f023de1
 8011fc0:	7501b288 	.word	0x7501b288
 8011fc4:	3f49efe0 	.word	0x3f49efe0
 8011fc8:	b5688f3b 	.word	0xb5688f3b
 8011fcc:	3fa48228 	.word	0x3fa48228
 8011fd0:	0e884455 	.word	0x0e884455
 8011fd4:	3fc9c155 	.word	0x3fc9c155
 8011fd8:	03eb6f7d 	.word	0x03eb6f7d
 8011fdc:	3fd4d612 	.word	0x3fd4d612
 8011fe0:	55555555 	.word	0x55555555
 8011fe4:	3fc55555 	.word	0x3fc55555
 8011fe8:	b12e9282 	.word	0xb12e9282
 8011fec:	3fb3b8c5 	.word	0x3fb3b8c5
 8011ff0:	1b8d0159 	.word	0x1b8d0159
 8011ff4:	3fe6066c 	.word	0x3fe6066c
 8011ff8:	9c598ac8 	.word	0x9c598ac8
 8011ffc:	40002ae5 	.word	0x40002ae5
 8012000:	1c8a2d4b 	.word	0x1c8a2d4b
 8012004:	40033a27 	.word	0x40033a27
	...
 8012010:	54442d18 	.word	0x54442d18
 8012014:	3ff921fb 	.word	0x3ff921fb
 8012018:	3ff00000 	.word	0x3ff00000
 801201c:	3fe00000 	.word	0x3fe00000

08012020 <__ieee754_atan2>:
 8012020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012024:	ec57 6b11 	vmov	r6, r7, d1
 8012028:	4273      	negs	r3, r6
 801202a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80121b0 <__ieee754_atan2+0x190>
 801202e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8012032:	4333      	orrs	r3, r6
 8012034:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012038:	4573      	cmp	r3, lr
 801203a:	ec51 0b10 	vmov	r0, r1, d0
 801203e:	ee11 8a10 	vmov	r8, s2
 8012042:	d80a      	bhi.n	801205a <__ieee754_atan2+0x3a>
 8012044:	4244      	negs	r4, r0
 8012046:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801204a:	4304      	orrs	r4, r0
 801204c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012050:	4574      	cmp	r4, lr
 8012052:	ee10 9a10 	vmov	r9, s0
 8012056:	468c      	mov	ip, r1
 8012058:	d907      	bls.n	801206a <__ieee754_atan2+0x4a>
 801205a:	4632      	mov	r2, r6
 801205c:	463b      	mov	r3, r7
 801205e:	f7ee f92d 	bl	80002bc <__adddf3>
 8012062:	ec41 0b10 	vmov	d0, r0, r1
 8012066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801206a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801206e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012072:	4334      	orrs	r4, r6
 8012074:	d103      	bne.n	801207e <__ieee754_atan2+0x5e>
 8012076:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801207a:	f001 bd99 	b.w	8013bb0 <atan>
 801207e:	17bc      	asrs	r4, r7, #30
 8012080:	f004 0402 	and.w	r4, r4, #2
 8012084:	ea53 0909 	orrs.w	r9, r3, r9
 8012088:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801208c:	d107      	bne.n	801209e <__ieee754_atan2+0x7e>
 801208e:	2c02      	cmp	r4, #2
 8012090:	d060      	beq.n	8012154 <__ieee754_atan2+0x134>
 8012092:	2c03      	cmp	r4, #3
 8012094:	d1e5      	bne.n	8012062 <__ieee754_atan2+0x42>
 8012096:	a142      	add	r1, pc, #264	; (adr r1, 80121a0 <__ieee754_atan2+0x180>)
 8012098:	e9d1 0100 	ldrd	r0, r1, [r1]
 801209c:	e7e1      	b.n	8012062 <__ieee754_atan2+0x42>
 801209e:	ea52 0808 	orrs.w	r8, r2, r8
 80120a2:	d106      	bne.n	80120b2 <__ieee754_atan2+0x92>
 80120a4:	f1bc 0f00 	cmp.w	ip, #0
 80120a8:	da5f      	bge.n	801216a <__ieee754_atan2+0x14a>
 80120aa:	a13f      	add	r1, pc, #252	; (adr r1, 80121a8 <__ieee754_atan2+0x188>)
 80120ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120b0:	e7d7      	b.n	8012062 <__ieee754_atan2+0x42>
 80120b2:	4572      	cmp	r2, lr
 80120b4:	d10f      	bne.n	80120d6 <__ieee754_atan2+0xb6>
 80120b6:	4293      	cmp	r3, r2
 80120b8:	f104 34ff 	add.w	r4, r4, #4294967295
 80120bc:	d107      	bne.n	80120ce <__ieee754_atan2+0xae>
 80120be:	2c02      	cmp	r4, #2
 80120c0:	d84c      	bhi.n	801215c <__ieee754_atan2+0x13c>
 80120c2:	4b35      	ldr	r3, [pc, #212]	; (8012198 <__ieee754_atan2+0x178>)
 80120c4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80120c8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80120cc:	e7c9      	b.n	8012062 <__ieee754_atan2+0x42>
 80120ce:	2c02      	cmp	r4, #2
 80120d0:	d848      	bhi.n	8012164 <__ieee754_atan2+0x144>
 80120d2:	4b32      	ldr	r3, [pc, #200]	; (801219c <__ieee754_atan2+0x17c>)
 80120d4:	e7f6      	b.n	80120c4 <__ieee754_atan2+0xa4>
 80120d6:	4573      	cmp	r3, lr
 80120d8:	d0e4      	beq.n	80120a4 <__ieee754_atan2+0x84>
 80120da:	1a9b      	subs	r3, r3, r2
 80120dc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80120e0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80120e4:	da1e      	bge.n	8012124 <__ieee754_atan2+0x104>
 80120e6:	2f00      	cmp	r7, #0
 80120e8:	da01      	bge.n	80120ee <__ieee754_atan2+0xce>
 80120ea:	323c      	adds	r2, #60	; 0x3c
 80120ec:	db1e      	blt.n	801212c <__ieee754_atan2+0x10c>
 80120ee:	4632      	mov	r2, r6
 80120f0:	463b      	mov	r3, r7
 80120f2:	f7ee fbc3 	bl	800087c <__aeabi_ddiv>
 80120f6:	ec41 0b10 	vmov	d0, r0, r1
 80120fa:	f001 fef9 	bl	8013ef0 <fabs>
 80120fe:	f001 fd57 	bl	8013bb0 <atan>
 8012102:	ec51 0b10 	vmov	r0, r1, d0
 8012106:	2c01      	cmp	r4, #1
 8012108:	d013      	beq.n	8012132 <__ieee754_atan2+0x112>
 801210a:	2c02      	cmp	r4, #2
 801210c:	d015      	beq.n	801213a <__ieee754_atan2+0x11a>
 801210e:	2c00      	cmp	r4, #0
 8012110:	d0a7      	beq.n	8012062 <__ieee754_atan2+0x42>
 8012112:	a319      	add	r3, pc, #100	; (adr r3, 8012178 <__ieee754_atan2+0x158>)
 8012114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012118:	f7ee f8ce 	bl	80002b8 <__aeabi_dsub>
 801211c:	a318      	add	r3, pc, #96	; (adr r3, 8012180 <__ieee754_atan2+0x160>)
 801211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012122:	e014      	b.n	801214e <__ieee754_atan2+0x12e>
 8012124:	a118      	add	r1, pc, #96	; (adr r1, 8012188 <__ieee754_atan2+0x168>)
 8012126:	e9d1 0100 	ldrd	r0, r1, [r1]
 801212a:	e7ec      	b.n	8012106 <__ieee754_atan2+0xe6>
 801212c:	2000      	movs	r0, #0
 801212e:	2100      	movs	r1, #0
 8012130:	e7e9      	b.n	8012106 <__ieee754_atan2+0xe6>
 8012132:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012136:	4619      	mov	r1, r3
 8012138:	e793      	b.n	8012062 <__ieee754_atan2+0x42>
 801213a:	a30f      	add	r3, pc, #60	; (adr r3, 8012178 <__ieee754_atan2+0x158>)
 801213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012140:	f7ee f8ba 	bl	80002b8 <__aeabi_dsub>
 8012144:	4602      	mov	r2, r0
 8012146:	460b      	mov	r3, r1
 8012148:	a10d      	add	r1, pc, #52	; (adr r1, 8012180 <__ieee754_atan2+0x160>)
 801214a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801214e:	f7ee f8b3 	bl	80002b8 <__aeabi_dsub>
 8012152:	e786      	b.n	8012062 <__ieee754_atan2+0x42>
 8012154:	a10a      	add	r1, pc, #40	; (adr r1, 8012180 <__ieee754_atan2+0x160>)
 8012156:	e9d1 0100 	ldrd	r0, r1, [r1]
 801215a:	e782      	b.n	8012062 <__ieee754_atan2+0x42>
 801215c:	a10c      	add	r1, pc, #48	; (adr r1, 8012190 <__ieee754_atan2+0x170>)
 801215e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012162:	e77e      	b.n	8012062 <__ieee754_atan2+0x42>
 8012164:	2000      	movs	r0, #0
 8012166:	2100      	movs	r1, #0
 8012168:	e77b      	b.n	8012062 <__ieee754_atan2+0x42>
 801216a:	a107      	add	r1, pc, #28	; (adr r1, 8012188 <__ieee754_atan2+0x168>)
 801216c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012170:	e777      	b.n	8012062 <__ieee754_atan2+0x42>
 8012172:	bf00      	nop
 8012174:	f3af 8000 	nop.w
 8012178:	33145c07 	.word	0x33145c07
 801217c:	3ca1a626 	.word	0x3ca1a626
 8012180:	54442d18 	.word	0x54442d18
 8012184:	400921fb 	.word	0x400921fb
 8012188:	54442d18 	.word	0x54442d18
 801218c:	3ff921fb 	.word	0x3ff921fb
 8012190:	54442d18 	.word	0x54442d18
 8012194:	3fe921fb 	.word	0x3fe921fb
 8012198:	080148a0 	.word	0x080148a0
 801219c:	080148b8 	.word	0x080148b8
 80121a0:	54442d18 	.word	0x54442d18
 80121a4:	c00921fb 	.word	0xc00921fb
 80121a8:	54442d18 	.word	0x54442d18
 80121ac:	bff921fb 	.word	0xbff921fb
 80121b0:	7ff00000 	.word	0x7ff00000
 80121b4:	00000000 	.word	0x00000000

080121b8 <__ieee754_pow>:
 80121b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121bc:	ed2d 8b06 	vpush	{d8-d10}
 80121c0:	b089      	sub	sp, #36	; 0x24
 80121c2:	ed8d 1b00 	vstr	d1, [sp]
 80121c6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80121ca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80121ce:	ea58 0102 	orrs.w	r1, r8, r2
 80121d2:	ec57 6b10 	vmov	r6, r7, d0
 80121d6:	d115      	bne.n	8012204 <__ieee754_pow+0x4c>
 80121d8:	19b3      	adds	r3, r6, r6
 80121da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80121de:	4152      	adcs	r2, r2
 80121e0:	4299      	cmp	r1, r3
 80121e2:	4b89      	ldr	r3, [pc, #548]	; (8012408 <__ieee754_pow+0x250>)
 80121e4:	4193      	sbcs	r3, r2
 80121e6:	f080 84d2 	bcs.w	8012b8e <__ieee754_pow+0x9d6>
 80121ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80121ee:	4630      	mov	r0, r6
 80121f0:	4639      	mov	r1, r7
 80121f2:	f7ee f863 	bl	80002bc <__adddf3>
 80121f6:	ec41 0b10 	vmov	d0, r0, r1
 80121fa:	b009      	add	sp, #36	; 0x24
 80121fc:	ecbd 8b06 	vpop	{d8-d10}
 8012200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012204:	4b81      	ldr	r3, [pc, #516]	; (801240c <__ieee754_pow+0x254>)
 8012206:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801220a:	429c      	cmp	r4, r3
 801220c:	ee10 aa10 	vmov	sl, s0
 8012210:	463d      	mov	r5, r7
 8012212:	dc06      	bgt.n	8012222 <__ieee754_pow+0x6a>
 8012214:	d101      	bne.n	801221a <__ieee754_pow+0x62>
 8012216:	2e00      	cmp	r6, #0
 8012218:	d1e7      	bne.n	80121ea <__ieee754_pow+0x32>
 801221a:	4598      	cmp	r8, r3
 801221c:	dc01      	bgt.n	8012222 <__ieee754_pow+0x6a>
 801221e:	d10f      	bne.n	8012240 <__ieee754_pow+0x88>
 8012220:	b172      	cbz	r2, 8012240 <__ieee754_pow+0x88>
 8012222:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012226:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801222a:	ea55 050a 	orrs.w	r5, r5, sl
 801222e:	d1dc      	bne.n	80121ea <__ieee754_pow+0x32>
 8012230:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012234:	18db      	adds	r3, r3, r3
 8012236:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801223a:	4152      	adcs	r2, r2
 801223c:	429d      	cmp	r5, r3
 801223e:	e7d0      	b.n	80121e2 <__ieee754_pow+0x2a>
 8012240:	2d00      	cmp	r5, #0
 8012242:	da3b      	bge.n	80122bc <__ieee754_pow+0x104>
 8012244:	4b72      	ldr	r3, [pc, #456]	; (8012410 <__ieee754_pow+0x258>)
 8012246:	4598      	cmp	r8, r3
 8012248:	dc51      	bgt.n	80122ee <__ieee754_pow+0x136>
 801224a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801224e:	4598      	cmp	r8, r3
 8012250:	f340 84ac 	ble.w	8012bac <__ieee754_pow+0x9f4>
 8012254:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012258:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801225c:	2b14      	cmp	r3, #20
 801225e:	dd0f      	ble.n	8012280 <__ieee754_pow+0xc8>
 8012260:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012264:	fa22 f103 	lsr.w	r1, r2, r3
 8012268:	fa01 f303 	lsl.w	r3, r1, r3
 801226c:	4293      	cmp	r3, r2
 801226e:	f040 849d 	bne.w	8012bac <__ieee754_pow+0x9f4>
 8012272:	f001 0101 	and.w	r1, r1, #1
 8012276:	f1c1 0302 	rsb	r3, r1, #2
 801227a:	9304      	str	r3, [sp, #16]
 801227c:	b182      	cbz	r2, 80122a0 <__ieee754_pow+0xe8>
 801227e:	e05f      	b.n	8012340 <__ieee754_pow+0x188>
 8012280:	2a00      	cmp	r2, #0
 8012282:	d15b      	bne.n	801233c <__ieee754_pow+0x184>
 8012284:	f1c3 0314 	rsb	r3, r3, #20
 8012288:	fa48 f103 	asr.w	r1, r8, r3
 801228c:	fa01 f303 	lsl.w	r3, r1, r3
 8012290:	4543      	cmp	r3, r8
 8012292:	f040 8488 	bne.w	8012ba6 <__ieee754_pow+0x9ee>
 8012296:	f001 0101 	and.w	r1, r1, #1
 801229a:	f1c1 0302 	rsb	r3, r1, #2
 801229e:	9304      	str	r3, [sp, #16]
 80122a0:	4b5c      	ldr	r3, [pc, #368]	; (8012414 <__ieee754_pow+0x25c>)
 80122a2:	4598      	cmp	r8, r3
 80122a4:	d132      	bne.n	801230c <__ieee754_pow+0x154>
 80122a6:	f1b9 0f00 	cmp.w	r9, #0
 80122aa:	f280 8478 	bge.w	8012b9e <__ieee754_pow+0x9e6>
 80122ae:	4959      	ldr	r1, [pc, #356]	; (8012414 <__ieee754_pow+0x25c>)
 80122b0:	4632      	mov	r2, r6
 80122b2:	463b      	mov	r3, r7
 80122b4:	2000      	movs	r0, #0
 80122b6:	f7ee fae1 	bl	800087c <__aeabi_ddiv>
 80122ba:	e79c      	b.n	80121f6 <__ieee754_pow+0x3e>
 80122bc:	2300      	movs	r3, #0
 80122be:	9304      	str	r3, [sp, #16]
 80122c0:	2a00      	cmp	r2, #0
 80122c2:	d13d      	bne.n	8012340 <__ieee754_pow+0x188>
 80122c4:	4b51      	ldr	r3, [pc, #324]	; (801240c <__ieee754_pow+0x254>)
 80122c6:	4598      	cmp	r8, r3
 80122c8:	d1ea      	bne.n	80122a0 <__ieee754_pow+0xe8>
 80122ca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80122ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80122d2:	ea53 030a 	orrs.w	r3, r3, sl
 80122d6:	f000 845a 	beq.w	8012b8e <__ieee754_pow+0x9d6>
 80122da:	4b4f      	ldr	r3, [pc, #316]	; (8012418 <__ieee754_pow+0x260>)
 80122dc:	429c      	cmp	r4, r3
 80122de:	dd08      	ble.n	80122f2 <__ieee754_pow+0x13a>
 80122e0:	f1b9 0f00 	cmp.w	r9, #0
 80122e4:	f2c0 8457 	blt.w	8012b96 <__ieee754_pow+0x9de>
 80122e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122ec:	e783      	b.n	80121f6 <__ieee754_pow+0x3e>
 80122ee:	2302      	movs	r3, #2
 80122f0:	e7e5      	b.n	80122be <__ieee754_pow+0x106>
 80122f2:	f1b9 0f00 	cmp.w	r9, #0
 80122f6:	f04f 0000 	mov.w	r0, #0
 80122fa:	f04f 0100 	mov.w	r1, #0
 80122fe:	f6bf af7a 	bge.w	80121f6 <__ieee754_pow+0x3e>
 8012302:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012306:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801230a:	e774      	b.n	80121f6 <__ieee754_pow+0x3e>
 801230c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012310:	d106      	bne.n	8012320 <__ieee754_pow+0x168>
 8012312:	4632      	mov	r2, r6
 8012314:	463b      	mov	r3, r7
 8012316:	4630      	mov	r0, r6
 8012318:	4639      	mov	r1, r7
 801231a:	f7ee f985 	bl	8000628 <__aeabi_dmul>
 801231e:	e76a      	b.n	80121f6 <__ieee754_pow+0x3e>
 8012320:	4b3e      	ldr	r3, [pc, #248]	; (801241c <__ieee754_pow+0x264>)
 8012322:	4599      	cmp	r9, r3
 8012324:	d10c      	bne.n	8012340 <__ieee754_pow+0x188>
 8012326:	2d00      	cmp	r5, #0
 8012328:	db0a      	blt.n	8012340 <__ieee754_pow+0x188>
 801232a:	ec47 6b10 	vmov	d0, r6, r7
 801232e:	b009      	add	sp, #36	; 0x24
 8012330:	ecbd 8b06 	vpop	{d8-d10}
 8012334:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012338:	f000 be7a 	b.w	8013030 <__ieee754_sqrt>
 801233c:	2300      	movs	r3, #0
 801233e:	9304      	str	r3, [sp, #16]
 8012340:	ec47 6b10 	vmov	d0, r6, r7
 8012344:	f001 fdd4 	bl	8013ef0 <fabs>
 8012348:	ec51 0b10 	vmov	r0, r1, d0
 801234c:	f1ba 0f00 	cmp.w	sl, #0
 8012350:	d129      	bne.n	80123a6 <__ieee754_pow+0x1ee>
 8012352:	b124      	cbz	r4, 801235e <__ieee754_pow+0x1a6>
 8012354:	4b2f      	ldr	r3, [pc, #188]	; (8012414 <__ieee754_pow+0x25c>)
 8012356:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801235a:	429a      	cmp	r2, r3
 801235c:	d123      	bne.n	80123a6 <__ieee754_pow+0x1ee>
 801235e:	f1b9 0f00 	cmp.w	r9, #0
 8012362:	da05      	bge.n	8012370 <__ieee754_pow+0x1b8>
 8012364:	4602      	mov	r2, r0
 8012366:	460b      	mov	r3, r1
 8012368:	2000      	movs	r0, #0
 801236a:	492a      	ldr	r1, [pc, #168]	; (8012414 <__ieee754_pow+0x25c>)
 801236c:	f7ee fa86 	bl	800087c <__aeabi_ddiv>
 8012370:	2d00      	cmp	r5, #0
 8012372:	f6bf af40 	bge.w	80121f6 <__ieee754_pow+0x3e>
 8012376:	9b04      	ldr	r3, [sp, #16]
 8012378:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801237c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012380:	4323      	orrs	r3, r4
 8012382:	d108      	bne.n	8012396 <__ieee754_pow+0x1de>
 8012384:	4602      	mov	r2, r0
 8012386:	460b      	mov	r3, r1
 8012388:	4610      	mov	r0, r2
 801238a:	4619      	mov	r1, r3
 801238c:	f7ed ff94 	bl	80002b8 <__aeabi_dsub>
 8012390:	4602      	mov	r2, r0
 8012392:	460b      	mov	r3, r1
 8012394:	e78f      	b.n	80122b6 <__ieee754_pow+0xfe>
 8012396:	9b04      	ldr	r3, [sp, #16]
 8012398:	2b01      	cmp	r3, #1
 801239a:	f47f af2c 	bne.w	80121f6 <__ieee754_pow+0x3e>
 801239e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123a2:	4619      	mov	r1, r3
 80123a4:	e727      	b.n	80121f6 <__ieee754_pow+0x3e>
 80123a6:	0feb      	lsrs	r3, r5, #31
 80123a8:	3b01      	subs	r3, #1
 80123aa:	9306      	str	r3, [sp, #24]
 80123ac:	9a06      	ldr	r2, [sp, #24]
 80123ae:	9b04      	ldr	r3, [sp, #16]
 80123b0:	4313      	orrs	r3, r2
 80123b2:	d102      	bne.n	80123ba <__ieee754_pow+0x202>
 80123b4:	4632      	mov	r2, r6
 80123b6:	463b      	mov	r3, r7
 80123b8:	e7e6      	b.n	8012388 <__ieee754_pow+0x1d0>
 80123ba:	4b19      	ldr	r3, [pc, #100]	; (8012420 <__ieee754_pow+0x268>)
 80123bc:	4598      	cmp	r8, r3
 80123be:	f340 80fb 	ble.w	80125b8 <__ieee754_pow+0x400>
 80123c2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80123c6:	4598      	cmp	r8, r3
 80123c8:	4b13      	ldr	r3, [pc, #76]	; (8012418 <__ieee754_pow+0x260>)
 80123ca:	dd0c      	ble.n	80123e6 <__ieee754_pow+0x22e>
 80123cc:	429c      	cmp	r4, r3
 80123ce:	dc0f      	bgt.n	80123f0 <__ieee754_pow+0x238>
 80123d0:	f1b9 0f00 	cmp.w	r9, #0
 80123d4:	da0f      	bge.n	80123f6 <__ieee754_pow+0x23e>
 80123d6:	2000      	movs	r0, #0
 80123d8:	b009      	add	sp, #36	; 0x24
 80123da:	ecbd 8b06 	vpop	{d8-d10}
 80123de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123e2:	f001 bbda 	b.w	8013b9a <__math_oflow>
 80123e6:	429c      	cmp	r4, r3
 80123e8:	dbf2      	blt.n	80123d0 <__ieee754_pow+0x218>
 80123ea:	4b0a      	ldr	r3, [pc, #40]	; (8012414 <__ieee754_pow+0x25c>)
 80123ec:	429c      	cmp	r4, r3
 80123ee:	dd19      	ble.n	8012424 <__ieee754_pow+0x26c>
 80123f0:	f1b9 0f00 	cmp.w	r9, #0
 80123f4:	dcef      	bgt.n	80123d6 <__ieee754_pow+0x21e>
 80123f6:	2000      	movs	r0, #0
 80123f8:	b009      	add	sp, #36	; 0x24
 80123fa:	ecbd 8b06 	vpop	{d8-d10}
 80123fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012402:	f001 bbc1 	b.w	8013b88 <__math_uflow>
 8012406:	bf00      	nop
 8012408:	fff00000 	.word	0xfff00000
 801240c:	7ff00000 	.word	0x7ff00000
 8012410:	433fffff 	.word	0x433fffff
 8012414:	3ff00000 	.word	0x3ff00000
 8012418:	3fefffff 	.word	0x3fefffff
 801241c:	3fe00000 	.word	0x3fe00000
 8012420:	41e00000 	.word	0x41e00000
 8012424:	4b60      	ldr	r3, [pc, #384]	; (80125a8 <__ieee754_pow+0x3f0>)
 8012426:	2200      	movs	r2, #0
 8012428:	f7ed ff46 	bl	80002b8 <__aeabi_dsub>
 801242c:	a354      	add	r3, pc, #336	; (adr r3, 8012580 <__ieee754_pow+0x3c8>)
 801242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012432:	4604      	mov	r4, r0
 8012434:	460d      	mov	r5, r1
 8012436:	f7ee f8f7 	bl	8000628 <__aeabi_dmul>
 801243a:	a353      	add	r3, pc, #332	; (adr r3, 8012588 <__ieee754_pow+0x3d0>)
 801243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012440:	4606      	mov	r6, r0
 8012442:	460f      	mov	r7, r1
 8012444:	4620      	mov	r0, r4
 8012446:	4629      	mov	r1, r5
 8012448:	f7ee f8ee 	bl	8000628 <__aeabi_dmul>
 801244c:	4b57      	ldr	r3, [pc, #348]	; (80125ac <__ieee754_pow+0x3f4>)
 801244e:	4682      	mov	sl, r0
 8012450:	468b      	mov	fp, r1
 8012452:	2200      	movs	r2, #0
 8012454:	4620      	mov	r0, r4
 8012456:	4629      	mov	r1, r5
 8012458:	f7ee f8e6 	bl	8000628 <__aeabi_dmul>
 801245c:	4602      	mov	r2, r0
 801245e:	460b      	mov	r3, r1
 8012460:	a14b      	add	r1, pc, #300	; (adr r1, 8012590 <__ieee754_pow+0x3d8>)
 8012462:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012466:	f7ed ff27 	bl	80002b8 <__aeabi_dsub>
 801246a:	4622      	mov	r2, r4
 801246c:	462b      	mov	r3, r5
 801246e:	f7ee f8db 	bl	8000628 <__aeabi_dmul>
 8012472:	4602      	mov	r2, r0
 8012474:	460b      	mov	r3, r1
 8012476:	2000      	movs	r0, #0
 8012478:	494d      	ldr	r1, [pc, #308]	; (80125b0 <__ieee754_pow+0x3f8>)
 801247a:	f7ed ff1d 	bl	80002b8 <__aeabi_dsub>
 801247e:	4622      	mov	r2, r4
 8012480:	4680      	mov	r8, r0
 8012482:	4689      	mov	r9, r1
 8012484:	462b      	mov	r3, r5
 8012486:	4620      	mov	r0, r4
 8012488:	4629      	mov	r1, r5
 801248a:	f7ee f8cd 	bl	8000628 <__aeabi_dmul>
 801248e:	4602      	mov	r2, r0
 8012490:	460b      	mov	r3, r1
 8012492:	4640      	mov	r0, r8
 8012494:	4649      	mov	r1, r9
 8012496:	f7ee f8c7 	bl	8000628 <__aeabi_dmul>
 801249a:	a33f      	add	r3, pc, #252	; (adr r3, 8012598 <__ieee754_pow+0x3e0>)
 801249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a0:	f7ee f8c2 	bl	8000628 <__aeabi_dmul>
 80124a4:	4602      	mov	r2, r0
 80124a6:	460b      	mov	r3, r1
 80124a8:	4650      	mov	r0, sl
 80124aa:	4659      	mov	r1, fp
 80124ac:	f7ed ff04 	bl	80002b8 <__aeabi_dsub>
 80124b0:	4602      	mov	r2, r0
 80124b2:	460b      	mov	r3, r1
 80124b4:	4680      	mov	r8, r0
 80124b6:	4689      	mov	r9, r1
 80124b8:	4630      	mov	r0, r6
 80124ba:	4639      	mov	r1, r7
 80124bc:	f7ed fefe 	bl	80002bc <__adddf3>
 80124c0:	2000      	movs	r0, #0
 80124c2:	4632      	mov	r2, r6
 80124c4:	463b      	mov	r3, r7
 80124c6:	4604      	mov	r4, r0
 80124c8:	460d      	mov	r5, r1
 80124ca:	f7ed fef5 	bl	80002b8 <__aeabi_dsub>
 80124ce:	4602      	mov	r2, r0
 80124d0:	460b      	mov	r3, r1
 80124d2:	4640      	mov	r0, r8
 80124d4:	4649      	mov	r1, r9
 80124d6:	f7ed feef 	bl	80002b8 <__aeabi_dsub>
 80124da:	9b04      	ldr	r3, [sp, #16]
 80124dc:	9a06      	ldr	r2, [sp, #24]
 80124de:	3b01      	subs	r3, #1
 80124e0:	4313      	orrs	r3, r2
 80124e2:	4682      	mov	sl, r0
 80124e4:	468b      	mov	fp, r1
 80124e6:	f040 81e7 	bne.w	80128b8 <__ieee754_pow+0x700>
 80124ea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80125a0 <__ieee754_pow+0x3e8>
 80124ee:	eeb0 8a47 	vmov.f32	s16, s14
 80124f2:	eef0 8a67 	vmov.f32	s17, s15
 80124f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80124fa:	2600      	movs	r6, #0
 80124fc:	4632      	mov	r2, r6
 80124fe:	463b      	mov	r3, r7
 8012500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012504:	f7ed fed8 	bl	80002b8 <__aeabi_dsub>
 8012508:	4622      	mov	r2, r4
 801250a:	462b      	mov	r3, r5
 801250c:	f7ee f88c 	bl	8000628 <__aeabi_dmul>
 8012510:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012514:	4680      	mov	r8, r0
 8012516:	4689      	mov	r9, r1
 8012518:	4650      	mov	r0, sl
 801251a:	4659      	mov	r1, fp
 801251c:	f7ee f884 	bl	8000628 <__aeabi_dmul>
 8012520:	4602      	mov	r2, r0
 8012522:	460b      	mov	r3, r1
 8012524:	4640      	mov	r0, r8
 8012526:	4649      	mov	r1, r9
 8012528:	f7ed fec8 	bl	80002bc <__adddf3>
 801252c:	4632      	mov	r2, r6
 801252e:	463b      	mov	r3, r7
 8012530:	4680      	mov	r8, r0
 8012532:	4689      	mov	r9, r1
 8012534:	4620      	mov	r0, r4
 8012536:	4629      	mov	r1, r5
 8012538:	f7ee f876 	bl	8000628 <__aeabi_dmul>
 801253c:	460b      	mov	r3, r1
 801253e:	4604      	mov	r4, r0
 8012540:	460d      	mov	r5, r1
 8012542:	4602      	mov	r2, r0
 8012544:	4649      	mov	r1, r9
 8012546:	4640      	mov	r0, r8
 8012548:	f7ed feb8 	bl	80002bc <__adddf3>
 801254c:	4b19      	ldr	r3, [pc, #100]	; (80125b4 <__ieee754_pow+0x3fc>)
 801254e:	4299      	cmp	r1, r3
 8012550:	ec45 4b19 	vmov	d9, r4, r5
 8012554:	4606      	mov	r6, r0
 8012556:	460f      	mov	r7, r1
 8012558:	468b      	mov	fp, r1
 801255a:	f340 82f1 	ble.w	8012b40 <__ieee754_pow+0x988>
 801255e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012562:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012566:	4303      	orrs	r3, r0
 8012568:	f000 81e4 	beq.w	8012934 <__ieee754_pow+0x77c>
 801256c:	ec51 0b18 	vmov	r0, r1, d8
 8012570:	2200      	movs	r2, #0
 8012572:	2300      	movs	r3, #0
 8012574:	f7ee faca 	bl	8000b0c <__aeabi_dcmplt>
 8012578:	3800      	subs	r0, #0
 801257a:	bf18      	it	ne
 801257c:	2001      	movne	r0, #1
 801257e:	e72b      	b.n	80123d8 <__ieee754_pow+0x220>
 8012580:	60000000 	.word	0x60000000
 8012584:	3ff71547 	.word	0x3ff71547
 8012588:	f85ddf44 	.word	0xf85ddf44
 801258c:	3e54ae0b 	.word	0x3e54ae0b
 8012590:	55555555 	.word	0x55555555
 8012594:	3fd55555 	.word	0x3fd55555
 8012598:	652b82fe 	.word	0x652b82fe
 801259c:	3ff71547 	.word	0x3ff71547
 80125a0:	00000000 	.word	0x00000000
 80125a4:	bff00000 	.word	0xbff00000
 80125a8:	3ff00000 	.word	0x3ff00000
 80125ac:	3fd00000 	.word	0x3fd00000
 80125b0:	3fe00000 	.word	0x3fe00000
 80125b4:	408fffff 	.word	0x408fffff
 80125b8:	4bd5      	ldr	r3, [pc, #852]	; (8012910 <__ieee754_pow+0x758>)
 80125ba:	402b      	ands	r3, r5
 80125bc:	2200      	movs	r2, #0
 80125be:	b92b      	cbnz	r3, 80125cc <__ieee754_pow+0x414>
 80125c0:	4bd4      	ldr	r3, [pc, #848]	; (8012914 <__ieee754_pow+0x75c>)
 80125c2:	f7ee f831 	bl	8000628 <__aeabi_dmul>
 80125c6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80125ca:	460c      	mov	r4, r1
 80125cc:	1523      	asrs	r3, r4, #20
 80125ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80125d2:	4413      	add	r3, r2
 80125d4:	9305      	str	r3, [sp, #20]
 80125d6:	4bd0      	ldr	r3, [pc, #832]	; (8012918 <__ieee754_pow+0x760>)
 80125d8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80125dc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80125e0:	429c      	cmp	r4, r3
 80125e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80125e6:	dd08      	ble.n	80125fa <__ieee754_pow+0x442>
 80125e8:	4bcc      	ldr	r3, [pc, #816]	; (801291c <__ieee754_pow+0x764>)
 80125ea:	429c      	cmp	r4, r3
 80125ec:	f340 8162 	ble.w	80128b4 <__ieee754_pow+0x6fc>
 80125f0:	9b05      	ldr	r3, [sp, #20]
 80125f2:	3301      	adds	r3, #1
 80125f4:	9305      	str	r3, [sp, #20]
 80125f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80125fa:	2400      	movs	r4, #0
 80125fc:	00e3      	lsls	r3, r4, #3
 80125fe:	9307      	str	r3, [sp, #28]
 8012600:	4bc7      	ldr	r3, [pc, #796]	; (8012920 <__ieee754_pow+0x768>)
 8012602:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012606:	ed93 7b00 	vldr	d7, [r3]
 801260a:	4629      	mov	r1, r5
 801260c:	ec53 2b17 	vmov	r2, r3, d7
 8012610:	eeb0 9a47 	vmov.f32	s18, s14
 8012614:	eef0 9a67 	vmov.f32	s19, s15
 8012618:	4682      	mov	sl, r0
 801261a:	f7ed fe4d 	bl	80002b8 <__aeabi_dsub>
 801261e:	4652      	mov	r2, sl
 8012620:	4606      	mov	r6, r0
 8012622:	460f      	mov	r7, r1
 8012624:	462b      	mov	r3, r5
 8012626:	ec51 0b19 	vmov	r0, r1, d9
 801262a:	f7ed fe47 	bl	80002bc <__adddf3>
 801262e:	4602      	mov	r2, r0
 8012630:	460b      	mov	r3, r1
 8012632:	2000      	movs	r0, #0
 8012634:	49bb      	ldr	r1, [pc, #748]	; (8012924 <__ieee754_pow+0x76c>)
 8012636:	f7ee f921 	bl	800087c <__aeabi_ddiv>
 801263a:	ec41 0b1a 	vmov	d10, r0, r1
 801263e:	4602      	mov	r2, r0
 8012640:	460b      	mov	r3, r1
 8012642:	4630      	mov	r0, r6
 8012644:	4639      	mov	r1, r7
 8012646:	f7ed ffef 	bl	8000628 <__aeabi_dmul>
 801264a:	2300      	movs	r3, #0
 801264c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012650:	9302      	str	r3, [sp, #8]
 8012652:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012656:	46ab      	mov	fp, r5
 8012658:	106d      	asrs	r5, r5, #1
 801265a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801265e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012662:	ec41 0b18 	vmov	d8, r0, r1
 8012666:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801266a:	2200      	movs	r2, #0
 801266c:	4640      	mov	r0, r8
 801266e:	4649      	mov	r1, r9
 8012670:	4614      	mov	r4, r2
 8012672:	461d      	mov	r5, r3
 8012674:	f7ed ffd8 	bl	8000628 <__aeabi_dmul>
 8012678:	4602      	mov	r2, r0
 801267a:	460b      	mov	r3, r1
 801267c:	4630      	mov	r0, r6
 801267e:	4639      	mov	r1, r7
 8012680:	f7ed fe1a 	bl	80002b8 <__aeabi_dsub>
 8012684:	ec53 2b19 	vmov	r2, r3, d9
 8012688:	4606      	mov	r6, r0
 801268a:	460f      	mov	r7, r1
 801268c:	4620      	mov	r0, r4
 801268e:	4629      	mov	r1, r5
 8012690:	f7ed fe12 	bl	80002b8 <__aeabi_dsub>
 8012694:	4602      	mov	r2, r0
 8012696:	460b      	mov	r3, r1
 8012698:	4650      	mov	r0, sl
 801269a:	4659      	mov	r1, fp
 801269c:	f7ed fe0c 	bl	80002b8 <__aeabi_dsub>
 80126a0:	4642      	mov	r2, r8
 80126a2:	464b      	mov	r3, r9
 80126a4:	f7ed ffc0 	bl	8000628 <__aeabi_dmul>
 80126a8:	4602      	mov	r2, r0
 80126aa:	460b      	mov	r3, r1
 80126ac:	4630      	mov	r0, r6
 80126ae:	4639      	mov	r1, r7
 80126b0:	f7ed fe02 	bl	80002b8 <__aeabi_dsub>
 80126b4:	ec53 2b1a 	vmov	r2, r3, d10
 80126b8:	f7ed ffb6 	bl	8000628 <__aeabi_dmul>
 80126bc:	ec53 2b18 	vmov	r2, r3, d8
 80126c0:	ec41 0b19 	vmov	d9, r0, r1
 80126c4:	ec51 0b18 	vmov	r0, r1, d8
 80126c8:	f7ed ffae 	bl	8000628 <__aeabi_dmul>
 80126cc:	a37c      	add	r3, pc, #496	; (adr r3, 80128c0 <__ieee754_pow+0x708>)
 80126ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d2:	4604      	mov	r4, r0
 80126d4:	460d      	mov	r5, r1
 80126d6:	f7ed ffa7 	bl	8000628 <__aeabi_dmul>
 80126da:	a37b      	add	r3, pc, #492	; (adr r3, 80128c8 <__ieee754_pow+0x710>)
 80126dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e0:	f7ed fdec 	bl	80002bc <__adddf3>
 80126e4:	4622      	mov	r2, r4
 80126e6:	462b      	mov	r3, r5
 80126e8:	f7ed ff9e 	bl	8000628 <__aeabi_dmul>
 80126ec:	a378      	add	r3, pc, #480	; (adr r3, 80128d0 <__ieee754_pow+0x718>)
 80126ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f2:	f7ed fde3 	bl	80002bc <__adddf3>
 80126f6:	4622      	mov	r2, r4
 80126f8:	462b      	mov	r3, r5
 80126fa:	f7ed ff95 	bl	8000628 <__aeabi_dmul>
 80126fe:	a376      	add	r3, pc, #472	; (adr r3, 80128d8 <__ieee754_pow+0x720>)
 8012700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012704:	f7ed fdda 	bl	80002bc <__adddf3>
 8012708:	4622      	mov	r2, r4
 801270a:	462b      	mov	r3, r5
 801270c:	f7ed ff8c 	bl	8000628 <__aeabi_dmul>
 8012710:	a373      	add	r3, pc, #460	; (adr r3, 80128e0 <__ieee754_pow+0x728>)
 8012712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012716:	f7ed fdd1 	bl	80002bc <__adddf3>
 801271a:	4622      	mov	r2, r4
 801271c:	462b      	mov	r3, r5
 801271e:	f7ed ff83 	bl	8000628 <__aeabi_dmul>
 8012722:	a371      	add	r3, pc, #452	; (adr r3, 80128e8 <__ieee754_pow+0x730>)
 8012724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012728:	f7ed fdc8 	bl	80002bc <__adddf3>
 801272c:	4622      	mov	r2, r4
 801272e:	4606      	mov	r6, r0
 8012730:	460f      	mov	r7, r1
 8012732:	462b      	mov	r3, r5
 8012734:	4620      	mov	r0, r4
 8012736:	4629      	mov	r1, r5
 8012738:	f7ed ff76 	bl	8000628 <__aeabi_dmul>
 801273c:	4602      	mov	r2, r0
 801273e:	460b      	mov	r3, r1
 8012740:	4630      	mov	r0, r6
 8012742:	4639      	mov	r1, r7
 8012744:	f7ed ff70 	bl	8000628 <__aeabi_dmul>
 8012748:	4642      	mov	r2, r8
 801274a:	4604      	mov	r4, r0
 801274c:	460d      	mov	r5, r1
 801274e:	464b      	mov	r3, r9
 8012750:	ec51 0b18 	vmov	r0, r1, d8
 8012754:	f7ed fdb2 	bl	80002bc <__adddf3>
 8012758:	ec53 2b19 	vmov	r2, r3, d9
 801275c:	f7ed ff64 	bl	8000628 <__aeabi_dmul>
 8012760:	4622      	mov	r2, r4
 8012762:	462b      	mov	r3, r5
 8012764:	f7ed fdaa 	bl	80002bc <__adddf3>
 8012768:	4642      	mov	r2, r8
 801276a:	4682      	mov	sl, r0
 801276c:	468b      	mov	fp, r1
 801276e:	464b      	mov	r3, r9
 8012770:	4640      	mov	r0, r8
 8012772:	4649      	mov	r1, r9
 8012774:	f7ed ff58 	bl	8000628 <__aeabi_dmul>
 8012778:	4b6b      	ldr	r3, [pc, #428]	; (8012928 <__ieee754_pow+0x770>)
 801277a:	2200      	movs	r2, #0
 801277c:	4606      	mov	r6, r0
 801277e:	460f      	mov	r7, r1
 8012780:	f7ed fd9c 	bl	80002bc <__adddf3>
 8012784:	4652      	mov	r2, sl
 8012786:	465b      	mov	r3, fp
 8012788:	f7ed fd98 	bl	80002bc <__adddf3>
 801278c:	2000      	movs	r0, #0
 801278e:	4604      	mov	r4, r0
 8012790:	460d      	mov	r5, r1
 8012792:	4602      	mov	r2, r0
 8012794:	460b      	mov	r3, r1
 8012796:	4640      	mov	r0, r8
 8012798:	4649      	mov	r1, r9
 801279a:	f7ed ff45 	bl	8000628 <__aeabi_dmul>
 801279e:	4b62      	ldr	r3, [pc, #392]	; (8012928 <__ieee754_pow+0x770>)
 80127a0:	4680      	mov	r8, r0
 80127a2:	4689      	mov	r9, r1
 80127a4:	2200      	movs	r2, #0
 80127a6:	4620      	mov	r0, r4
 80127a8:	4629      	mov	r1, r5
 80127aa:	f7ed fd85 	bl	80002b8 <__aeabi_dsub>
 80127ae:	4632      	mov	r2, r6
 80127b0:	463b      	mov	r3, r7
 80127b2:	f7ed fd81 	bl	80002b8 <__aeabi_dsub>
 80127b6:	4602      	mov	r2, r0
 80127b8:	460b      	mov	r3, r1
 80127ba:	4650      	mov	r0, sl
 80127bc:	4659      	mov	r1, fp
 80127be:	f7ed fd7b 	bl	80002b8 <__aeabi_dsub>
 80127c2:	ec53 2b18 	vmov	r2, r3, d8
 80127c6:	f7ed ff2f 	bl	8000628 <__aeabi_dmul>
 80127ca:	4622      	mov	r2, r4
 80127cc:	4606      	mov	r6, r0
 80127ce:	460f      	mov	r7, r1
 80127d0:	462b      	mov	r3, r5
 80127d2:	ec51 0b19 	vmov	r0, r1, d9
 80127d6:	f7ed ff27 	bl	8000628 <__aeabi_dmul>
 80127da:	4602      	mov	r2, r0
 80127dc:	460b      	mov	r3, r1
 80127de:	4630      	mov	r0, r6
 80127e0:	4639      	mov	r1, r7
 80127e2:	f7ed fd6b 	bl	80002bc <__adddf3>
 80127e6:	4606      	mov	r6, r0
 80127e8:	460f      	mov	r7, r1
 80127ea:	4602      	mov	r2, r0
 80127ec:	460b      	mov	r3, r1
 80127ee:	4640      	mov	r0, r8
 80127f0:	4649      	mov	r1, r9
 80127f2:	f7ed fd63 	bl	80002bc <__adddf3>
 80127f6:	a33e      	add	r3, pc, #248	; (adr r3, 80128f0 <__ieee754_pow+0x738>)
 80127f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127fc:	2000      	movs	r0, #0
 80127fe:	4604      	mov	r4, r0
 8012800:	460d      	mov	r5, r1
 8012802:	f7ed ff11 	bl	8000628 <__aeabi_dmul>
 8012806:	4642      	mov	r2, r8
 8012808:	ec41 0b18 	vmov	d8, r0, r1
 801280c:	464b      	mov	r3, r9
 801280e:	4620      	mov	r0, r4
 8012810:	4629      	mov	r1, r5
 8012812:	f7ed fd51 	bl	80002b8 <__aeabi_dsub>
 8012816:	4602      	mov	r2, r0
 8012818:	460b      	mov	r3, r1
 801281a:	4630      	mov	r0, r6
 801281c:	4639      	mov	r1, r7
 801281e:	f7ed fd4b 	bl	80002b8 <__aeabi_dsub>
 8012822:	a335      	add	r3, pc, #212	; (adr r3, 80128f8 <__ieee754_pow+0x740>)
 8012824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012828:	f7ed fefe 	bl	8000628 <__aeabi_dmul>
 801282c:	a334      	add	r3, pc, #208	; (adr r3, 8012900 <__ieee754_pow+0x748>)
 801282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012832:	4606      	mov	r6, r0
 8012834:	460f      	mov	r7, r1
 8012836:	4620      	mov	r0, r4
 8012838:	4629      	mov	r1, r5
 801283a:	f7ed fef5 	bl	8000628 <__aeabi_dmul>
 801283e:	4602      	mov	r2, r0
 8012840:	460b      	mov	r3, r1
 8012842:	4630      	mov	r0, r6
 8012844:	4639      	mov	r1, r7
 8012846:	f7ed fd39 	bl	80002bc <__adddf3>
 801284a:	9a07      	ldr	r2, [sp, #28]
 801284c:	4b37      	ldr	r3, [pc, #220]	; (801292c <__ieee754_pow+0x774>)
 801284e:	4413      	add	r3, r2
 8012850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012854:	f7ed fd32 	bl	80002bc <__adddf3>
 8012858:	4682      	mov	sl, r0
 801285a:	9805      	ldr	r0, [sp, #20]
 801285c:	468b      	mov	fp, r1
 801285e:	f7ed fe79 	bl	8000554 <__aeabi_i2d>
 8012862:	9a07      	ldr	r2, [sp, #28]
 8012864:	4b32      	ldr	r3, [pc, #200]	; (8012930 <__ieee754_pow+0x778>)
 8012866:	4413      	add	r3, r2
 8012868:	e9d3 8900 	ldrd	r8, r9, [r3]
 801286c:	4606      	mov	r6, r0
 801286e:	460f      	mov	r7, r1
 8012870:	4652      	mov	r2, sl
 8012872:	465b      	mov	r3, fp
 8012874:	ec51 0b18 	vmov	r0, r1, d8
 8012878:	f7ed fd20 	bl	80002bc <__adddf3>
 801287c:	4642      	mov	r2, r8
 801287e:	464b      	mov	r3, r9
 8012880:	f7ed fd1c 	bl	80002bc <__adddf3>
 8012884:	4632      	mov	r2, r6
 8012886:	463b      	mov	r3, r7
 8012888:	f7ed fd18 	bl	80002bc <__adddf3>
 801288c:	2000      	movs	r0, #0
 801288e:	4632      	mov	r2, r6
 8012890:	463b      	mov	r3, r7
 8012892:	4604      	mov	r4, r0
 8012894:	460d      	mov	r5, r1
 8012896:	f7ed fd0f 	bl	80002b8 <__aeabi_dsub>
 801289a:	4642      	mov	r2, r8
 801289c:	464b      	mov	r3, r9
 801289e:	f7ed fd0b 	bl	80002b8 <__aeabi_dsub>
 80128a2:	ec53 2b18 	vmov	r2, r3, d8
 80128a6:	f7ed fd07 	bl	80002b8 <__aeabi_dsub>
 80128aa:	4602      	mov	r2, r0
 80128ac:	460b      	mov	r3, r1
 80128ae:	4650      	mov	r0, sl
 80128b0:	4659      	mov	r1, fp
 80128b2:	e610      	b.n	80124d6 <__ieee754_pow+0x31e>
 80128b4:	2401      	movs	r4, #1
 80128b6:	e6a1      	b.n	80125fc <__ieee754_pow+0x444>
 80128b8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012908 <__ieee754_pow+0x750>
 80128bc:	e617      	b.n	80124ee <__ieee754_pow+0x336>
 80128be:	bf00      	nop
 80128c0:	4a454eef 	.word	0x4a454eef
 80128c4:	3fca7e28 	.word	0x3fca7e28
 80128c8:	93c9db65 	.word	0x93c9db65
 80128cc:	3fcd864a 	.word	0x3fcd864a
 80128d0:	a91d4101 	.word	0xa91d4101
 80128d4:	3fd17460 	.word	0x3fd17460
 80128d8:	518f264d 	.word	0x518f264d
 80128dc:	3fd55555 	.word	0x3fd55555
 80128e0:	db6fabff 	.word	0xdb6fabff
 80128e4:	3fdb6db6 	.word	0x3fdb6db6
 80128e8:	33333303 	.word	0x33333303
 80128ec:	3fe33333 	.word	0x3fe33333
 80128f0:	e0000000 	.word	0xe0000000
 80128f4:	3feec709 	.word	0x3feec709
 80128f8:	dc3a03fd 	.word	0xdc3a03fd
 80128fc:	3feec709 	.word	0x3feec709
 8012900:	145b01f5 	.word	0x145b01f5
 8012904:	be3e2fe0 	.word	0xbe3e2fe0
 8012908:	00000000 	.word	0x00000000
 801290c:	3ff00000 	.word	0x3ff00000
 8012910:	7ff00000 	.word	0x7ff00000
 8012914:	43400000 	.word	0x43400000
 8012918:	0003988e 	.word	0x0003988e
 801291c:	000bb679 	.word	0x000bb679
 8012920:	080148d0 	.word	0x080148d0
 8012924:	3ff00000 	.word	0x3ff00000
 8012928:	40080000 	.word	0x40080000
 801292c:	080148f0 	.word	0x080148f0
 8012930:	080148e0 	.word	0x080148e0
 8012934:	a3b5      	add	r3, pc, #724	; (adr r3, 8012c0c <__ieee754_pow+0xa54>)
 8012936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801293a:	4640      	mov	r0, r8
 801293c:	4649      	mov	r1, r9
 801293e:	f7ed fcbd 	bl	80002bc <__adddf3>
 8012942:	4622      	mov	r2, r4
 8012944:	ec41 0b1a 	vmov	d10, r0, r1
 8012948:	462b      	mov	r3, r5
 801294a:	4630      	mov	r0, r6
 801294c:	4639      	mov	r1, r7
 801294e:	f7ed fcb3 	bl	80002b8 <__aeabi_dsub>
 8012952:	4602      	mov	r2, r0
 8012954:	460b      	mov	r3, r1
 8012956:	ec51 0b1a 	vmov	r0, r1, d10
 801295a:	f7ee f8f5 	bl	8000b48 <__aeabi_dcmpgt>
 801295e:	2800      	cmp	r0, #0
 8012960:	f47f ae04 	bne.w	801256c <__ieee754_pow+0x3b4>
 8012964:	4aa4      	ldr	r2, [pc, #656]	; (8012bf8 <__ieee754_pow+0xa40>)
 8012966:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801296a:	4293      	cmp	r3, r2
 801296c:	f340 8108 	ble.w	8012b80 <__ieee754_pow+0x9c8>
 8012970:	151b      	asrs	r3, r3, #20
 8012972:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012976:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801297a:	fa4a f303 	asr.w	r3, sl, r3
 801297e:	445b      	add	r3, fp
 8012980:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012984:	4e9d      	ldr	r6, [pc, #628]	; (8012bfc <__ieee754_pow+0xa44>)
 8012986:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801298a:	4116      	asrs	r6, r2
 801298c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012990:	2000      	movs	r0, #0
 8012992:	ea23 0106 	bic.w	r1, r3, r6
 8012996:	f1c2 0214 	rsb	r2, r2, #20
 801299a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801299e:	fa4a fa02 	asr.w	sl, sl, r2
 80129a2:	f1bb 0f00 	cmp.w	fp, #0
 80129a6:	4602      	mov	r2, r0
 80129a8:	460b      	mov	r3, r1
 80129aa:	4620      	mov	r0, r4
 80129ac:	4629      	mov	r1, r5
 80129ae:	bfb8      	it	lt
 80129b0:	f1ca 0a00 	rsblt	sl, sl, #0
 80129b4:	f7ed fc80 	bl	80002b8 <__aeabi_dsub>
 80129b8:	ec41 0b19 	vmov	d9, r0, r1
 80129bc:	4642      	mov	r2, r8
 80129be:	464b      	mov	r3, r9
 80129c0:	ec51 0b19 	vmov	r0, r1, d9
 80129c4:	f7ed fc7a 	bl	80002bc <__adddf3>
 80129c8:	a37b      	add	r3, pc, #492	; (adr r3, 8012bb8 <__ieee754_pow+0xa00>)
 80129ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ce:	2000      	movs	r0, #0
 80129d0:	4604      	mov	r4, r0
 80129d2:	460d      	mov	r5, r1
 80129d4:	f7ed fe28 	bl	8000628 <__aeabi_dmul>
 80129d8:	ec53 2b19 	vmov	r2, r3, d9
 80129dc:	4606      	mov	r6, r0
 80129de:	460f      	mov	r7, r1
 80129e0:	4620      	mov	r0, r4
 80129e2:	4629      	mov	r1, r5
 80129e4:	f7ed fc68 	bl	80002b8 <__aeabi_dsub>
 80129e8:	4602      	mov	r2, r0
 80129ea:	460b      	mov	r3, r1
 80129ec:	4640      	mov	r0, r8
 80129ee:	4649      	mov	r1, r9
 80129f0:	f7ed fc62 	bl	80002b8 <__aeabi_dsub>
 80129f4:	a372      	add	r3, pc, #456	; (adr r3, 8012bc0 <__ieee754_pow+0xa08>)
 80129f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129fa:	f7ed fe15 	bl	8000628 <__aeabi_dmul>
 80129fe:	a372      	add	r3, pc, #456	; (adr r3, 8012bc8 <__ieee754_pow+0xa10>)
 8012a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a04:	4680      	mov	r8, r0
 8012a06:	4689      	mov	r9, r1
 8012a08:	4620      	mov	r0, r4
 8012a0a:	4629      	mov	r1, r5
 8012a0c:	f7ed fe0c 	bl	8000628 <__aeabi_dmul>
 8012a10:	4602      	mov	r2, r0
 8012a12:	460b      	mov	r3, r1
 8012a14:	4640      	mov	r0, r8
 8012a16:	4649      	mov	r1, r9
 8012a18:	f7ed fc50 	bl	80002bc <__adddf3>
 8012a1c:	4604      	mov	r4, r0
 8012a1e:	460d      	mov	r5, r1
 8012a20:	4602      	mov	r2, r0
 8012a22:	460b      	mov	r3, r1
 8012a24:	4630      	mov	r0, r6
 8012a26:	4639      	mov	r1, r7
 8012a28:	f7ed fc48 	bl	80002bc <__adddf3>
 8012a2c:	4632      	mov	r2, r6
 8012a2e:	463b      	mov	r3, r7
 8012a30:	4680      	mov	r8, r0
 8012a32:	4689      	mov	r9, r1
 8012a34:	f7ed fc40 	bl	80002b8 <__aeabi_dsub>
 8012a38:	4602      	mov	r2, r0
 8012a3a:	460b      	mov	r3, r1
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	4629      	mov	r1, r5
 8012a40:	f7ed fc3a 	bl	80002b8 <__aeabi_dsub>
 8012a44:	4642      	mov	r2, r8
 8012a46:	4606      	mov	r6, r0
 8012a48:	460f      	mov	r7, r1
 8012a4a:	464b      	mov	r3, r9
 8012a4c:	4640      	mov	r0, r8
 8012a4e:	4649      	mov	r1, r9
 8012a50:	f7ed fdea 	bl	8000628 <__aeabi_dmul>
 8012a54:	a35e      	add	r3, pc, #376	; (adr r3, 8012bd0 <__ieee754_pow+0xa18>)
 8012a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5a:	4604      	mov	r4, r0
 8012a5c:	460d      	mov	r5, r1
 8012a5e:	f7ed fde3 	bl	8000628 <__aeabi_dmul>
 8012a62:	a35d      	add	r3, pc, #372	; (adr r3, 8012bd8 <__ieee754_pow+0xa20>)
 8012a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a68:	f7ed fc26 	bl	80002b8 <__aeabi_dsub>
 8012a6c:	4622      	mov	r2, r4
 8012a6e:	462b      	mov	r3, r5
 8012a70:	f7ed fdda 	bl	8000628 <__aeabi_dmul>
 8012a74:	a35a      	add	r3, pc, #360	; (adr r3, 8012be0 <__ieee754_pow+0xa28>)
 8012a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a7a:	f7ed fc1f 	bl	80002bc <__adddf3>
 8012a7e:	4622      	mov	r2, r4
 8012a80:	462b      	mov	r3, r5
 8012a82:	f7ed fdd1 	bl	8000628 <__aeabi_dmul>
 8012a86:	a358      	add	r3, pc, #352	; (adr r3, 8012be8 <__ieee754_pow+0xa30>)
 8012a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a8c:	f7ed fc14 	bl	80002b8 <__aeabi_dsub>
 8012a90:	4622      	mov	r2, r4
 8012a92:	462b      	mov	r3, r5
 8012a94:	f7ed fdc8 	bl	8000628 <__aeabi_dmul>
 8012a98:	a355      	add	r3, pc, #340	; (adr r3, 8012bf0 <__ieee754_pow+0xa38>)
 8012a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a9e:	f7ed fc0d 	bl	80002bc <__adddf3>
 8012aa2:	4622      	mov	r2, r4
 8012aa4:	462b      	mov	r3, r5
 8012aa6:	f7ed fdbf 	bl	8000628 <__aeabi_dmul>
 8012aaa:	4602      	mov	r2, r0
 8012aac:	460b      	mov	r3, r1
 8012aae:	4640      	mov	r0, r8
 8012ab0:	4649      	mov	r1, r9
 8012ab2:	f7ed fc01 	bl	80002b8 <__aeabi_dsub>
 8012ab6:	4604      	mov	r4, r0
 8012ab8:	460d      	mov	r5, r1
 8012aba:	4602      	mov	r2, r0
 8012abc:	460b      	mov	r3, r1
 8012abe:	4640      	mov	r0, r8
 8012ac0:	4649      	mov	r1, r9
 8012ac2:	f7ed fdb1 	bl	8000628 <__aeabi_dmul>
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	ec41 0b19 	vmov	d9, r0, r1
 8012acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012ad0:	4620      	mov	r0, r4
 8012ad2:	4629      	mov	r1, r5
 8012ad4:	f7ed fbf0 	bl	80002b8 <__aeabi_dsub>
 8012ad8:	4602      	mov	r2, r0
 8012ada:	460b      	mov	r3, r1
 8012adc:	ec51 0b19 	vmov	r0, r1, d9
 8012ae0:	f7ed fecc 	bl	800087c <__aeabi_ddiv>
 8012ae4:	4632      	mov	r2, r6
 8012ae6:	4604      	mov	r4, r0
 8012ae8:	460d      	mov	r5, r1
 8012aea:	463b      	mov	r3, r7
 8012aec:	4640      	mov	r0, r8
 8012aee:	4649      	mov	r1, r9
 8012af0:	f7ed fd9a 	bl	8000628 <__aeabi_dmul>
 8012af4:	4632      	mov	r2, r6
 8012af6:	463b      	mov	r3, r7
 8012af8:	f7ed fbe0 	bl	80002bc <__adddf3>
 8012afc:	4602      	mov	r2, r0
 8012afe:	460b      	mov	r3, r1
 8012b00:	4620      	mov	r0, r4
 8012b02:	4629      	mov	r1, r5
 8012b04:	f7ed fbd8 	bl	80002b8 <__aeabi_dsub>
 8012b08:	4642      	mov	r2, r8
 8012b0a:	464b      	mov	r3, r9
 8012b0c:	f7ed fbd4 	bl	80002b8 <__aeabi_dsub>
 8012b10:	460b      	mov	r3, r1
 8012b12:	4602      	mov	r2, r0
 8012b14:	493a      	ldr	r1, [pc, #232]	; (8012c00 <__ieee754_pow+0xa48>)
 8012b16:	2000      	movs	r0, #0
 8012b18:	f7ed fbce 	bl	80002b8 <__aeabi_dsub>
 8012b1c:	ec41 0b10 	vmov	d0, r0, r1
 8012b20:	ee10 3a90 	vmov	r3, s1
 8012b24:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012b2c:	da2b      	bge.n	8012b86 <__ieee754_pow+0x9ce>
 8012b2e:	4650      	mov	r0, sl
 8012b30:	f001 fa72 	bl	8014018 <scalbn>
 8012b34:	ec51 0b10 	vmov	r0, r1, d0
 8012b38:	ec53 2b18 	vmov	r2, r3, d8
 8012b3c:	f7ff bbed 	b.w	801231a <__ieee754_pow+0x162>
 8012b40:	4b30      	ldr	r3, [pc, #192]	; (8012c04 <__ieee754_pow+0xa4c>)
 8012b42:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012b46:	429e      	cmp	r6, r3
 8012b48:	f77f af0c 	ble.w	8012964 <__ieee754_pow+0x7ac>
 8012b4c:	4b2e      	ldr	r3, [pc, #184]	; (8012c08 <__ieee754_pow+0xa50>)
 8012b4e:	440b      	add	r3, r1
 8012b50:	4303      	orrs	r3, r0
 8012b52:	d009      	beq.n	8012b68 <__ieee754_pow+0x9b0>
 8012b54:	ec51 0b18 	vmov	r0, r1, d8
 8012b58:	2200      	movs	r2, #0
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	f7ed ffd6 	bl	8000b0c <__aeabi_dcmplt>
 8012b60:	3800      	subs	r0, #0
 8012b62:	bf18      	it	ne
 8012b64:	2001      	movne	r0, #1
 8012b66:	e447      	b.n	80123f8 <__ieee754_pow+0x240>
 8012b68:	4622      	mov	r2, r4
 8012b6a:	462b      	mov	r3, r5
 8012b6c:	f7ed fba4 	bl	80002b8 <__aeabi_dsub>
 8012b70:	4642      	mov	r2, r8
 8012b72:	464b      	mov	r3, r9
 8012b74:	f7ed ffde 	bl	8000b34 <__aeabi_dcmpge>
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	f43f aef3 	beq.w	8012964 <__ieee754_pow+0x7ac>
 8012b7e:	e7e9      	b.n	8012b54 <__ieee754_pow+0x99c>
 8012b80:	f04f 0a00 	mov.w	sl, #0
 8012b84:	e71a      	b.n	80129bc <__ieee754_pow+0x804>
 8012b86:	ec51 0b10 	vmov	r0, r1, d0
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	e7d4      	b.n	8012b38 <__ieee754_pow+0x980>
 8012b8e:	491c      	ldr	r1, [pc, #112]	; (8012c00 <__ieee754_pow+0xa48>)
 8012b90:	2000      	movs	r0, #0
 8012b92:	f7ff bb30 	b.w	80121f6 <__ieee754_pow+0x3e>
 8012b96:	2000      	movs	r0, #0
 8012b98:	2100      	movs	r1, #0
 8012b9a:	f7ff bb2c 	b.w	80121f6 <__ieee754_pow+0x3e>
 8012b9e:	4630      	mov	r0, r6
 8012ba0:	4639      	mov	r1, r7
 8012ba2:	f7ff bb28 	b.w	80121f6 <__ieee754_pow+0x3e>
 8012ba6:	9204      	str	r2, [sp, #16]
 8012ba8:	f7ff bb7a 	b.w	80122a0 <__ieee754_pow+0xe8>
 8012bac:	2300      	movs	r3, #0
 8012bae:	f7ff bb64 	b.w	801227a <__ieee754_pow+0xc2>
 8012bb2:	bf00      	nop
 8012bb4:	f3af 8000 	nop.w
 8012bb8:	00000000 	.word	0x00000000
 8012bbc:	3fe62e43 	.word	0x3fe62e43
 8012bc0:	fefa39ef 	.word	0xfefa39ef
 8012bc4:	3fe62e42 	.word	0x3fe62e42
 8012bc8:	0ca86c39 	.word	0x0ca86c39
 8012bcc:	be205c61 	.word	0xbe205c61
 8012bd0:	72bea4d0 	.word	0x72bea4d0
 8012bd4:	3e663769 	.word	0x3e663769
 8012bd8:	c5d26bf1 	.word	0xc5d26bf1
 8012bdc:	3ebbbd41 	.word	0x3ebbbd41
 8012be0:	af25de2c 	.word	0xaf25de2c
 8012be4:	3f11566a 	.word	0x3f11566a
 8012be8:	16bebd93 	.word	0x16bebd93
 8012bec:	3f66c16c 	.word	0x3f66c16c
 8012bf0:	5555553e 	.word	0x5555553e
 8012bf4:	3fc55555 	.word	0x3fc55555
 8012bf8:	3fe00000 	.word	0x3fe00000
 8012bfc:	000fffff 	.word	0x000fffff
 8012c00:	3ff00000 	.word	0x3ff00000
 8012c04:	4090cbff 	.word	0x4090cbff
 8012c08:	3f6f3400 	.word	0x3f6f3400
 8012c0c:	652b82fe 	.word	0x652b82fe
 8012c10:	3c971547 	.word	0x3c971547
 8012c14:	00000000 	.word	0x00000000

08012c18 <__ieee754_rem_pio2>:
 8012c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c1c:	ed2d 8b02 	vpush	{d8}
 8012c20:	ec55 4b10 	vmov	r4, r5, d0
 8012c24:	4bca      	ldr	r3, [pc, #808]	; (8012f50 <__ieee754_rem_pio2+0x338>)
 8012c26:	b08b      	sub	sp, #44	; 0x2c
 8012c28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012c2c:	4598      	cmp	r8, r3
 8012c2e:	4682      	mov	sl, r0
 8012c30:	9502      	str	r5, [sp, #8]
 8012c32:	dc08      	bgt.n	8012c46 <__ieee754_rem_pio2+0x2e>
 8012c34:	2200      	movs	r2, #0
 8012c36:	2300      	movs	r3, #0
 8012c38:	ed80 0b00 	vstr	d0, [r0]
 8012c3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012c40:	f04f 0b00 	mov.w	fp, #0
 8012c44:	e028      	b.n	8012c98 <__ieee754_rem_pio2+0x80>
 8012c46:	4bc3      	ldr	r3, [pc, #780]	; (8012f54 <__ieee754_rem_pio2+0x33c>)
 8012c48:	4598      	cmp	r8, r3
 8012c4a:	dc78      	bgt.n	8012d3e <__ieee754_rem_pio2+0x126>
 8012c4c:	9b02      	ldr	r3, [sp, #8]
 8012c4e:	4ec2      	ldr	r6, [pc, #776]	; (8012f58 <__ieee754_rem_pio2+0x340>)
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	ee10 0a10 	vmov	r0, s0
 8012c56:	a3b0      	add	r3, pc, #704	; (adr r3, 8012f18 <__ieee754_rem_pio2+0x300>)
 8012c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5c:	4629      	mov	r1, r5
 8012c5e:	dd39      	ble.n	8012cd4 <__ieee754_rem_pio2+0xbc>
 8012c60:	f7ed fb2a 	bl	80002b8 <__aeabi_dsub>
 8012c64:	45b0      	cmp	r8, r6
 8012c66:	4604      	mov	r4, r0
 8012c68:	460d      	mov	r5, r1
 8012c6a:	d01b      	beq.n	8012ca4 <__ieee754_rem_pio2+0x8c>
 8012c6c:	a3ac      	add	r3, pc, #688	; (adr r3, 8012f20 <__ieee754_rem_pio2+0x308>)
 8012c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c72:	f7ed fb21 	bl	80002b8 <__aeabi_dsub>
 8012c76:	4602      	mov	r2, r0
 8012c78:	460b      	mov	r3, r1
 8012c7a:	e9ca 2300 	strd	r2, r3, [sl]
 8012c7e:	4620      	mov	r0, r4
 8012c80:	4629      	mov	r1, r5
 8012c82:	f7ed fb19 	bl	80002b8 <__aeabi_dsub>
 8012c86:	a3a6      	add	r3, pc, #664	; (adr r3, 8012f20 <__ieee754_rem_pio2+0x308>)
 8012c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8c:	f7ed fb14 	bl	80002b8 <__aeabi_dsub>
 8012c90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012c94:	f04f 0b01 	mov.w	fp, #1
 8012c98:	4658      	mov	r0, fp
 8012c9a:	b00b      	add	sp, #44	; 0x2c
 8012c9c:	ecbd 8b02 	vpop	{d8}
 8012ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ca4:	a3a0      	add	r3, pc, #640	; (adr r3, 8012f28 <__ieee754_rem_pio2+0x310>)
 8012ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012caa:	f7ed fb05 	bl	80002b8 <__aeabi_dsub>
 8012cae:	a3a0      	add	r3, pc, #640	; (adr r3, 8012f30 <__ieee754_rem_pio2+0x318>)
 8012cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb4:	4604      	mov	r4, r0
 8012cb6:	460d      	mov	r5, r1
 8012cb8:	f7ed fafe 	bl	80002b8 <__aeabi_dsub>
 8012cbc:	4602      	mov	r2, r0
 8012cbe:	460b      	mov	r3, r1
 8012cc0:	e9ca 2300 	strd	r2, r3, [sl]
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	4629      	mov	r1, r5
 8012cc8:	f7ed faf6 	bl	80002b8 <__aeabi_dsub>
 8012ccc:	a398      	add	r3, pc, #608	; (adr r3, 8012f30 <__ieee754_rem_pio2+0x318>)
 8012cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd2:	e7db      	b.n	8012c8c <__ieee754_rem_pio2+0x74>
 8012cd4:	f7ed faf2 	bl	80002bc <__adddf3>
 8012cd8:	45b0      	cmp	r8, r6
 8012cda:	4604      	mov	r4, r0
 8012cdc:	460d      	mov	r5, r1
 8012cde:	d016      	beq.n	8012d0e <__ieee754_rem_pio2+0xf6>
 8012ce0:	a38f      	add	r3, pc, #572	; (adr r3, 8012f20 <__ieee754_rem_pio2+0x308>)
 8012ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ce6:	f7ed fae9 	bl	80002bc <__adddf3>
 8012cea:	4602      	mov	r2, r0
 8012cec:	460b      	mov	r3, r1
 8012cee:	e9ca 2300 	strd	r2, r3, [sl]
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	4629      	mov	r1, r5
 8012cf6:	f7ed fadf 	bl	80002b8 <__aeabi_dsub>
 8012cfa:	a389      	add	r3, pc, #548	; (adr r3, 8012f20 <__ieee754_rem_pio2+0x308>)
 8012cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d00:	f7ed fadc 	bl	80002bc <__adddf3>
 8012d04:	f04f 3bff 	mov.w	fp, #4294967295
 8012d08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012d0c:	e7c4      	b.n	8012c98 <__ieee754_rem_pio2+0x80>
 8012d0e:	a386      	add	r3, pc, #536	; (adr r3, 8012f28 <__ieee754_rem_pio2+0x310>)
 8012d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d14:	f7ed fad2 	bl	80002bc <__adddf3>
 8012d18:	a385      	add	r3, pc, #532	; (adr r3, 8012f30 <__ieee754_rem_pio2+0x318>)
 8012d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1e:	4604      	mov	r4, r0
 8012d20:	460d      	mov	r5, r1
 8012d22:	f7ed facb 	bl	80002bc <__adddf3>
 8012d26:	4602      	mov	r2, r0
 8012d28:	460b      	mov	r3, r1
 8012d2a:	e9ca 2300 	strd	r2, r3, [sl]
 8012d2e:	4620      	mov	r0, r4
 8012d30:	4629      	mov	r1, r5
 8012d32:	f7ed fac1 	bl	80002b8 <__aeabi_dsub>
 8012d36:	a37e      	add	r3, pc, #504	; (adr r3, 8012f30 <__ieee754_rem_pio2+0x318>)
 8012d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d3c:	e7e0      	b.n	8012d00 <__ieee754_rem_pio2+0xe8>
 8012d3e:	4b87      	ldr	r3, [pc, #540]	; (8012f5c <__ieee754_rem_pio2+0x344>)
 8012d40:	4598      	cmp	r8, r3
 8012d42:	f300 80d9 	bgt.w	8012ef8 <__ieee754_rem_pio2+0x2e0>
 8012d46:	f001 f8d3 	bl	8013ef0 <fabs>
 8012d4a:	ec55 4b10 	vmov	r4, r5, d0
 8012d4e:	ee10 0a10 	vmov	r0, s0
 8012d52:	a379      	add	r3, pc, #484	; (adr r3, 8012f38 <__ieee754_rem_pio2+0x320>)
 8012d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d58:	4629      	mov	r1, r5
 8012d5a:	f7ed fc65 	bl	8000628 <__aeabi_dmul>
 8012d5e:	4b80      	ldr	r3, [pc, #512]	; (8012f60 <__ieee754_rem_pio2+0x348>)
 8012d60:	2200      	movs	r2, #0
 8012d62:	f7ed faab 	bl	80002bc <__adddf3>
 8012d66:	f7ed ff0f 	bl	8000b88 <__aeabi_d2iz>
 8012d6a:	4683      	mov	fp, r0
 8012d6c:	f7ed fbf2 	bl	8000554 <__aeabi_i2d>
 8012d70:	4602      	mov	r2, r0
 8012d72:	460b      	mov	r3, r1
 8012d74:	ec43 2b18 	vmov	d8, r2, r3
 8012d78:	a367      	add	r3, pc, #412	; (adr r3, 8012f18 <__ieee754_rem_pio2+0x300>)
 8012d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d7e:	f7ed fc53 	bl	8000628 <__aeabi_dmul>
 8012d82:	4602      	mov	r2, r0
 8012d84:	460b      	mov	r3, r1
 8012d86:	4620      	mov	r0, r4
 8012d88:	4629      	mov	r1, r5
 8012d8a:	f7ed fa95 	bl	80002b8 <__aeabi_dsub>
 8012d8e:	a364      	add	r3, pc, #400	; (adr r3, 8012f20 <__ieee754_rem_pio2+0x308>)
 8012d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d94:	4606      	mov	r6, r0
 8012d96:	460f      	mov	r7, r1
 8012d98:	ec51 0b18 	vmov	r0, r1, d8
 8012d9c:	f7ed fc44 	bl	8000628 <__aeabi_dmul>
 8012da0:	f1bb 0f1f 	cmp.w	fp, #31
 8012da4:	4604      	mov	r4, r0
 8012da6:	460d      	mov	r5, r1
 8012da8:	dc0d      	bgt.n	8012dc6 <__ieee754_rem_pio2+0x1ae>
 8012daa:	4b6e      	ldr	r3, [pc, #440]	; (8012f64 <__ieee754_rem_pio2+0x34c>)
 8012dac:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012db4:	4543      	cmp	r3, r8
 8012db6:	d006      	beq.n	8012dc6 <__ieee754_rem_pio2+0x1ae>
 8012db8:	4622      	mov	r2, r4
 8012dba:	462b      	mov	r3, r5
 8012dbc:	4630      	mov	r0, r6
 8012dbe:	4639      	mov	r1, r7
 8012dc0:	f7ed fa7a 	bl	80002b8 <__aeabi_dsub>
 8012dc4:	e00f      	b.n	8012de6 <__ieee754_rem_pio2+0x1ce>
 8012dc6:	462b      	mov	r3, r5
 8012dc8:	4622      	mov	r2, r4
 8012dca:	4630      	mov	r0, r6
 8012dcc:	4639      	mov	r1, r7
 8012dce:	f7ed fa73 	bl	80002b8 <__aeabi_dsub>
 8012dd2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012dd6:	9303      	str	r3, [sp, #12]
 8012dd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012ddc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012de0:	f1b8 0f10 	cmp.w	r8, #16
 8012de4:	dc02      	bgt.n	8012dec <__ieee754_rem_pio2+0x1d4>
 8012de6:	e9ca 0100 	strd	r0, r1, [sl]
 8012dea:	e039      	b.n	8012e60 <__ieee754_rem_pio2+0x248>
 8012dec:	a34e      	add	r3, pc, #312	; (adr r3, 8012f28 <__ieee754_rem_pio2+0x310>)
 8012dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df2:	ec51 0b18 	vmov	r0, r1, d8
 8012df6:	f7ed fc17 	bl	8000628 <__aeabi_dmul>
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	460d      	mov	r5, r1
 8012dfe:	4602      	mov	r2, r0
 8012e00:	460b      	mov	r3, r1
 8012e02:	4630      	mov	r0, r6
 8012e04:	4639      	mov	r1, r7
 8012e06:	f7ed fa57 	bl	80002b8 <__aeabi_dsub>
 8012e0a:	4602      	mov	r2, r0
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	4680      	mov	r8, r0
 8012e10:	4689      	mov	r9, r1
 8012e12:	4630      	mov	r0, r6
 8012e14:	4639      	mov	r1, r7
 8012e16:	f7ed fa4f 	bl	80002b8 <__aeabi_dsub>
 8012e1a:	4622      	mov	r2, r4
 8012e1c:	462b      	mov	r3, r5
 8012e1e:	f7ed fa4b 	bl	80002b8 <__aeabi_dsub>
 8012e22:	a343      	add	r3, pc, #268	; (adr r3, 8012f30 <__ieee754_rem_pio2+0x318>)
 8012e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e28:	4604      	mov	r4, r0
 8012e2a:	460d      	mov	r5, r1
 8012e2c:	ec51 0b18 	vmov	r0, r1, d8
 8012e30:	f7ed fbfa 	bl	8000628 <__aeabi_dmul>
 8012e34:	4622      	mov	r2, r4
 8012e36:	462b      	mov	r3, r5
 8012e38:	f7ed fa3e 	bl	80002b8 <__aeabi_dsub>
 8012e3c:	4602      	mov	r2, r0
 8012e3e:	460b      	mov	r3, r1
 8012e40:	4604      	mov	r4, r0
 8012e42:	460d      	mov	r5, r1
 8012e44:	4640      	mov	r0, r8
 8012e46:	4649      	mov	r1, r9
 8012e48:	f7ed fa36 	bl	80002b8 <__aeabi_dsub>
 8012e4c:	9a03      	ldr	r2, [sp, #12]
 8012e4e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012e52:	1ad3      	subs	r3, r2, r3
 8012e54:	2b31      	cmp	r3, #49	; 0x31
 8012e56:	dc24      	bgt.n	8012ea2 <__ieee754_rem_pio2+0x28a>
 8012e58:	e9ca 0100 	strd	r0, r1, [sl]
 8012e5c:	4646      	mov	r6, r8
 8012e5e:	464f      	mov	r7, r9
 8012e60:	e9da 8900 	ldrd	r8, r9, [sl]
 8012e64:	4630      	mov	r0, r6
 8012e66:	4642      	mov	r2, r8
 8012e68:	464b      	mov	r3, r9
 8012e6a:	4639      	mov	r1, r7
 8012e6c:	f7ed fa24 	bl	80002b8 <__aeabi_dsub>
 8012e70:	462b      	mov	r3, r5
 8012e72:	4622      	mov	r2, r4
 8012e74:	f7ed fa20 	bl	80002b8 <__aeabi_dsub>
 8012e78:	9b02      	ldr	r3, [sp, #8]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012e80:	f6bf af0a 	bge.w	8012c98 <__ieee754_rem_pio2+0x80>
 8012e84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012e88:	f8ca 3004 	str.w	r3, [sl, #4]
 8012e8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e90:	f8ca 8000 	str.w	r8, [sl]
 8012e94:	f8ca 0008 	str.w	r0, [sl, #8]
 8012e98:	f8ca 300c 	str.w	r3, [sl, #12]
 8012e9c:	f1cb 0b00 	rsb	fp, fp, #0
 8012ea0:	e6fa      	b.n	8012c98 <__ieee754_rem_pio2+0x80>
 8012ea2:	a327      	add	r3, pc, #156	; (adr r3, 8012f40 <__ieee754_rem_pio2+0x328>)
 8012ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea8:	ec51 0b18 	vmov	r0, r1, d8
 8012eac:	f7ed fbbc 	bl	8000628 <__aeabi_dmul>
 8012eb0:	4604      	mov	r4, r0
 8012eb2:	460d      	mov	r5, r1
 8012eb4:	4602      	mov	r2, r0
 8012eb6:	460b      	mov	r3, r1
 8012eb8:	4640      	mov	r0, r8
 8012eba:	4649      	mov	r1, r9
 8012ebc:	f7ed f9fc 	bl	80002b8 <__aeabi_dsub>
 8012ec0:	4602      	mov	r2, r0
 8012ec2:	460b      	mov	r3, r1
 8012ec4:	4606      	mov	r6, r0
 8012ec6:	460f      	mov	r7, r1
 8012ec8:	4640      	mov	r0, r8
 8012eca:	4649      	mov	r1, r9
 8012ecc:	f7ed f9f4 	bl	80002b8 <__aeabi_dsub>
 8012ed0:	4622      	mov	r2, r4
 8012ed2:	462b      	mov	r3, r5
 8012ed4:	f7ed f9f0 	bl	80002b8 <__aeabi_dsub>
 8012ed8:	a31b      	add	r3, pc, #108	; (adr r3, 8012f48 <__ieee754_rem_pio2+0x330>)
 8012eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ede:	4604      	mov	r4, r0
 8012ee0:	460d      	mov	r5, r1
 8012ee2:	ec51 0b18 	vmov	r0, r1, d8
 8012ee6:	f7ed fb9f 	bl	8000628 <__aeabi_dmul>
 8012eea:	4622      	mov	r2, r4
 8012eec:	462b      	mov	r3, r5
 8012eee:	f7ed f9e3 	bl	80002b8 <__aeabi_dsub>
 8012ef2:	4604      	mov	r4, r0
 8012ef4:	460d      	mov	r5, r1
 8012ef6:	e75f      	b.n	8012db8 <__ieee754_rem_pio2+0x1a0>
 8012ef8:	4b1b      	ldr	r3, [pc, #108]	; (8012f68 <__ieee754_rem_pio2+0x350>)
 8012efa:	4598      	cmp	r8, r3
 8012efc:	dd36      	ble.n	8012f6c <__ieee754_rem_pio2+0x354>
 8012efe:	ee10 2a10 	vmov	r2, s0
 8012f02:	462b      	mov	r3, r5
 8012f04:	4620      	mov	r0, r4
 8012f06:	4629      	mov	r1, r5
 8012f08:	f7ed f9d6 	bl	80002b8 <__aeabi_dsub>
 8012f0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012f10:	e9ca 0100 	strd	r0, r1, [sl]
 8012f14:	e694      	b.n	8012c40 <__ieee754_rem_pio2+0x28>
 8012f16:	bf00      	nop
 8012f18:	54400000 	.word	0x54400000
 8012f1c:	3ff921fb 	.word	0x3ff921fb
 8012f20:	1a626331 	.word	0x1a626331
 8012f24:	3dd0b461 	.word	0x3dd0b461
 8012f28:	1a600000 	.word	0x1a600000
 8012f2c:	3dd0b461 	.word	0x3dd0b461
 8012f30:	2e037073 	.word	0x2e037073
 8012f34:	3ba3198a 	.word	0x3ba3198a
 8012f38:	6dc9c883 	.word	0x6dc9c883
 8012f3c:	3fe45f30 	.word	0x3fe45f30
 8012f40:	2e000000 	.word	0x2e000000
 8012f44:	3ba3198a 	.word	0x3ba3198a
 8012f48:	252049c1 	.word	0x252049c1
 8012f4c:	397b839a 	.word	0x397b839a
 8012f50:	3fe921fb 	.word	0x3fe921fb
 8012f54:	4002d97b 	.word	0x4002d97b
 8012f58:	3ff921fb 	.word	0x3ff921fb
 8012f5c:	413921fb 	.word	0x413921fb
 8012f60:	3fe00000 	.word	0x3fe00000
 8012f64:	08014900 	.word	0x08014900
 8012f68:	7fefffff 	.word	0x7fefffff
 8012f6c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012f70:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012f74:	ee10 0a10 	vmov	r0, s0
 8012f78:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8012f7c:	ee10 6a10 	vmov	r6, s0
 8012f80:	460f      	mov	r7, r1
 8012f82:	f7ed fe01 	bl	8000b88 <__aeabi_d2iz>
 8012f86:	f7ed fae5 	bl	8000554 <__aeabi_i2d>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	460b      	mov	r3, r1
 8012f8e:	4630      	mov	r0, r6
 8012f90:	4639      	mov	r1, r7
 8012f92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012f96:	f7ed f98f 	bl	80002b8 <__aeabi_dsub>
 8012f9a:	4b23      	ldr	r3, [pc, #140]	; (8013028 <__ieee754_rem_pio2+0x410>)
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	f7ed fb43 	bl	8000628 <__aeabi_dmul>
 8012fa2:	460f      	mov	r7, r1
 8012fa4:	4606      	mov	r6, r0
 8012fa6:	f7ed fdef 	bl	8000b88 <__aeabi_d2iz>
 8012faa:	f7ed fad3 	bl	8000554 <__aeabi_i2d>
 8012fae:	4602      	mov	r2, r0
 8012fb0:	460b      	mov	r3, r1
 8012fb2:	4630      	mov	r0, r6
 8012fb4:	4639      	mov	r1, r7
 8012fb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012fba:	f7ed f97d 	bl	80002b8 <__aeabi_dsub>
 8012fbe:	4b1a      	ldr	r3, [pc, #104]	; (8013028 <__ieee754_rem_pio2+0x410>)
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	f7ed fb31 	bl	8000628 <__aeabi_dmul>
 8012fc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012fca:	ad04      	add	r5, sp, #16
 8012fcc:	f04f 0803 	mov.w	r8, #3
 8012fd0:	46a9      	mov	r9, r5
 8012fd2:	2600      	movs	r6, #0
 8012fd4:	2700      	movs	r7, #0
 8012fd6:	4632      	mov	r2, r6
 8012fd8:	463b      	mov	r3, r7
 8012fda:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8012fde:	46c3      	mov	fp, r8
 8012fe0:	3d08      	subs	r5, #8
 8012fe2:	f108 38ff 	add.w	r8, r8, #4294967295
 8012fe6:	f7ed fd87 	bl	8000af8 <__aeabi_dcmpeq>
 8012fea:	2800      	cmp	r0, #0
 8012fec:	d1f3      	bne.n	8012fd6 <__ieee754_rem_pio2+0x3be>
 8012fee:	4b0f      	ldr	r3, [pc, #60]	; (801302c <__ieee754_rem_pio2+0x414>)
 8012ff0:	9301      	str	r3, [sp, #4]
 8012ff2:	2302      	movs	r3, #2
 8012ff4:	9300      	str	r3, [sp, #0]
 8012ff6:	4622      	mov	r2, r4
 8012ff8:	465b      	mov	r3, fp
 8012ffa:	4651      	mov	r1, sl
 8012ffc:	4648      	mov	r0, r9
 8012ffe:	f000 f997 	bl	8013330 <__kernel_rem_pio2>
 8013002:	9b02      	ldr	r3, [sp, #8]
 8013004:	2b00      	cmp	r3, #0
 8013006:	4683      	mov	fp, r0
 8013008:	f6bf ae46 	bge.w	8012c98 <__ieee754_rem_pio2+0x80>
 801300c:	e9da 2100 	ldrd	r2, r1, [sl]
 8013010:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013014:	e9ca 2300 	strd	r2, r3, [sl]
 8013018:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801301c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013020:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8013024:	e73a      	b.n	8012e9c <__ieee754_rem_pio2+0x284>
 8013026:	bf00      	nop
 8013028:	41700000 	.word	0x41700000
 801302c:	08014980 	.word	0x08014980

08013030 <__ieee754_sqrt>:
 8013030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013034:	ec55 4b10 	vmov	r4, r5, d0
 8013038:	4e55      	ldr	r6, [pc, #340]	; (8013190 <__ieee754_sqrt+0x160>)
 801303a:	43ae      	bics	r6, r5
 801303c:	ee10 0a10 	vmov	r0, s0
 8013040:	ee10 3a10 	vmov	r3, s0
 8013044:	462a      	mov	r2, r5
 8013046:	4629      	mov	r1, r5
 8013048:	d110      	bne.n	801306c <__ieee754_sqrt+0x3c>
 801304a:	ee10 2a10 	vmov	r2, s0
 801304e:	462b      	mov	r3, r5
 8013050:	f7ed faea 	bl	8000628 <__aeabi_dmul>
 8013054:	4602      	mov	r2, r0
 8013056:	460b      	mov	r3, r1
 8013058:	4620      	mov	r0, r4
 801305a:	4629      	mov	r1, r5
 801305c:	f7ed f92e 	bl	80002bc <__adddf3>
 8013060:	4604      	mov	r4, r0
 8013062:	460d      	mov	r5, r1
 8013064:	ec45 4b10 	vmov	d0, r4, r5
 8013068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801306c:	2d00      	cmp	r5, #0
 801306e:	dc10      	bgt.n	8013092 <__ieee754_sqrt+0x62>
 8013070:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013074:	4330      	orrs	r0, r6
 8013076:	d0f5      	beq.n	8013064 <__ieee754_sqrt+0x34>
 8013078:	b15d      	cbz	r5, 8013092 <__ieee754_sqrt+0x62>
 801307a:	ee10 2a10 	vmov	r2, s0
 801307e:	462b      	mov	r3, r5
 8013080:	ee10 0a10 	vmov	r0, s0
 8013084:	f7ed f918 	bl	80002b8 <__aeabi_dsub>
 8013088:	4602      	mov	r2, r0
 801308a:	460b      	mov	r3, r1
 801308c:	f7ed fbf6 	bl	800087c <__aeabi_ddiv>
 8013090:	e7e6      	b.n	8013060 <__ieee754_sqrt+0x30>
 8013092:	1512      	asrs	r2, r2, #20
 8013094:	d074      	beq.n	8013180 <__ieee754_sqrt+0x150>
 8013096:	07d4      	lsls	r4, r2, #31
 8013098:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801309c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80130a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80130a4:	bf5e      	ittt	pl
 80130a6:	0fda      	lsrpl	r2, r3, #31
 80130a8:	005b      	lslpl	r3, r3, #1
 80130aa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80130ae:	2400      	movs	r4, #0
 80130b0:	0fda      	lsrs	r2, r3, #31
 80130b2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80130b6:	107f      	asrs	r7, r7, #1
 80130b8:	005b      	lsls	r3, r3, #1
 80130ba:	2516      	movs	r5, #22
 80130bc:	4620      	mov	r0, r4
 80130be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80130c2:	1886      	adds	r6, r0, r2
 80130c4:	428e      	cmp	r6, r1
 80130c6:	bfde      	ittt	le
 80130c8:	1b89      	suble	r1, r1, r6
 80130ca:	18b0      	addle	r0, r6, r2
 80130cc:	18a4      	addle	r4, r4, r2
 80130ce:	0049      	lsls	r1, r1, #1
 80130d0:	3d01      	subs	r5, #1
 80130d2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80130d6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80130da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80130de:	d1f0      	bne.n	80130c2 <__ieee754_sqrt+0x92>
 80130e0:	462a      	mov	r2, r5
 80130e2:	f04f 0e20 	mov.w	lr, #32
 80130e6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80130ea:	4281      	cmp	r1, r0
 80130ec:	eb06 0c05 	add.w	ip, r6, r5
 80130f0:	dc02      	bgt.n	80130f8 <__ieee754_sqrt+0xc8>
 80130f2:	d113      	bne.n	801311c <__ieee754_sqrt+0xec>
 80130f4:	459c      	cmp	ip, r3
 80130f6:	d811      	bhi.n	801311c <__ieee754_sqrt+0xec>
 80130f8:	f1bc 0f00 	cmp.w	ip, #0
 80130fc:	eb0c 0506 	add.w	r5, ip, r6
 8013100:	da43      	bge.n	801318a <__ieee754_sqrt+0x15a>
 8013102:	2d00      	cmp	r5, #0
 8013104:	db41      	blt.n	801318a <__ieee754_sqrt+0x15a>
 8013106:	f100 0801 	add.w	r8, r0, #1
 801310a:	1a09      	subs	r1, r1, r0
 801310c:	459c      	cmp	ip, r3
 801310e:	bf88      	it	hi
 8013110:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8013114:	eba3 030c 	sub.w	r3, r3, ip
 8013118:	4432      	add	r2, r6
 801311a:	4640      	mov	r0, r8
 801311c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013120:	f1be 0e01 	subs.w	lr, lr, #1
 8013124:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8013128:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801312c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013130:	d1db      	bne.n	80130ea <__ieee754_sqrt+0xba>
 8013132:	430b      	orrs	r3, r1
 8013134:	d006      	beq.n	8013144 <__ieee754_sqrt+0x114>
 8013136:	1c50      	adds	r0, r2, #1
 8013138:	bf13      	iteet	ne
 801313a:	3201      	addne	r2, #1
 801313c:	3401      	addeq	r4, #1
 801313e:	4672      	moveq	r2, lr
 8013140:	f022 0201 	bicne.w	r2, r2, #1
 8013144:	1063      	asrs	r3, r4, #1
 8013146:	0852      	lsrs	r2, r2, #1
 8013148:	07e1      	lsls	r1, r4, #31
 801314a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801314e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013152:	bf48      	it	mi
 8013154:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8013158:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801315c:	4614      	mov	r4, r2
 801315e:	e781      	b.n	8013064 <__ieee754_sqrt+0x34>
 8013160:	0ad9      	lsrs	r1, r3, #11
 8013162:	3815      	subs	r0, #21
 8013164:	055b      	lsls	r3, r3, #21
 8013166:	2900      	cmp	r1, #0
 8013168:	d0fa      	beq.n	8013160 <__ieee754_sqrt+0x130>
 801316a:	02cd      	lsls	r5, r1, #11
 801316c:	d50a      	bpl.n	8013184 <__ieee754_sqrt+0x154>
 801316e:	f1c2 0420 	rsb	r4, r2, #32
 8013172:	fa23 f404 	lsr.w	r4, r3, r4
 8013176:	1e55      	subs	r5, r2, #1
 8013178:	4093      	lsls	r3, r2
 801317a:	4321      	orrs	r1, r4
 801317c:	1b42      	subs	r2, r0, r5
 801317e:	e78a      	b.n	8013096 <__ieee754_sqrt+0x66>
 8013180:	4610      	mov	r0, r2
 8013182:	e7f0      	b.n	8013166 <__ieee754_sqrt+0x136>
 8013184:	0049      	lsls	r1, r1, #1
 8013186:	3201      	adds	r2, #1
 8013188:	e7ef      	b.n	801316a <__ieee754_sqrt+0x13a>
 801318a:	4680      	mov	r8, r0
 801318c:	e7bd      	b.n	801310a <__ieee754_sqrt+0xda>
 801318e:	bf00      	nop
 8013190:	7ff00000 	.word	0x7ff00000

08013194 <__ieee754_sqrtf>:
 8013194:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013198:	4770      	bx	lr
 801319a:	0000      	movs	r0, r0
 801319c:	0000      	movs	r0, r0
	...

080131a0 <__kernel_cos>:
 80131a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131a4:	ec57 6b10 	vmov	r6, r7, d0
 80131a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80131ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80131b0:	ed8d 1b00 	vstr	d1, [sp]
 80131b4:	da07      	bge.n	80131c6 <__kernel_cos+0x26>
 80131b6:	ee10 0a10 	vmov	r0, s0
 80131ba:	4639      	mov	r1, r7
 80131bc:	f7ed fce4 	bl	8000b88 <__aeabi_d2iz>
 80131c0:	2800      	cmp	r0, #0
 80131c2:	f000 8088 	beq.w	80132d6 <__kernel_cos+0x136>
 80131c6:	4632      	mov	r2, r6
 80131c8:	463b      	mov	r3, r7
 80131ca:	4630      	mov	r0, r6
 80131cc:	4639      	mov	r1, r7
 80131ce:	f7ed fa2b 	bl	8000628 <__aeabi_dmul>
 80131d2:	4b51      	ldr	r3, [pc, #324]	; (8013318 <__kernel_cos+0x178>)
 80131d4:	2200      	movs	r2, #0
 80131d6:	4604      	mov	r4, r0
 80131d8:	460d      	mov	r5, r1
 80131da:	f7ed fa25 	bl	8000628 <__aeabi_dmul>
 80131de:	a340      	add	r3, pc, #256	; (adr r3, 80132e0 <__kernel_cos+0x140>)
 80131e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e4:	4682      	mov	sl, r0
 80131e6:	468b      	mov	fp, r1
 80131e8:	4620      	mov	r0, r4
 80131ea:	4629      	mov	r1, r5
 80131ec:	f7ed fa1c 	bl	8000628 <__aeabi_dmul>
 80131f0:	a33d      	add	r3, pc, #244	; (adr r3, 80132e8 <__kernel_cos+0x148>)
 80131f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f6:	f7ed f861 	bl	80002bc <__adddf3>
 80131fa:	4622      	mov	r2, r4
 80131fc:	462b      	mov	r3, r5
 80131fe:	f7ed fa13 	bl	8000628 <__aeabi_dmul>
 8013202:	a33b      	add	r3, pc, #236	; (adr r3, 80132f0 <__kernel_cos+0x150>)
 8013204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013208:	f7ed f856 	bl	80002b8 <__aeabi_dsub>
 801320c:	4622      	mov	r2, r4
 801320e:	462b      	mov	r3, r5
 8013210:	f7ed fa0a 	bl	8000628 <__aeabi_dmul>
 8013214:	a338      	add	r3, pc, #224	; (adr r3, 80132f8 <__kernel_cos+0x158>)
 8013216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321a:	f7ed f84f 	bl	80002bc <__adddf3>
 801321e:	4622      	mov	r2, r4
 8013220:	462b      	mov	r3, r5
 8013222:	f7ed fa01 	bl	8000628 <__aeabi_dmul>
 8013226:	a336      	add	r3, pc, #216	; (adr r3, 8013300 <__kernel_cos+0x160>)
 8013228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801322c:	f7ed f844 	bl	80002b8 <__aeabi_dsub>
 8013230:	4622      	mov	r2, r4
 8013232:	462b      	mov	r3, r5
 8013234:	f7ed f9f8 	bl	8000628 <__aeabi_dmul>
 8013238:	a333      	add	r3, pc, #204	; (adr r3, 8013308 <__kernel_cos+0x168>)
 801323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801323e:	f7ed f83d 	bl	80002bc <__adddf3>
 8013242:	4622      	mov	r2, r4
 8013244:	462b      	mov	r3, r5
 8013246:	f7ed f9ef 	bl	8000628 <__aeabi_dmul>
 801324a:	4622      	mov	r2, r4
 801324c:	462b      	mov	r3, r5
 801324e:	f7ed f9eb 	bl	8000628 <__aeabi_dmul>
 8013252:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013256:	4604      	mov	r4, r0
 8013258:	460d      	mov	r5, r1
 801325a:	4630      	mov	r0, r6
 801325c:	4639      	mov	r1, r7
 801325e:	f7ed f9e3 	bl	8000628 <__aeabi_dmul>
 8013262:	460b      	mov	r3, r1
 8013264:	4602      	mov	r2, r0
 8013266:	4629      	mov	r1, r5
 8013268:	4620      	mov	r0, r4
 801326a:	f7ed f825 	bl	80002b8 <__aeabi_dsub>
 801326e:	4b2b      	ldr	r3, [pc, #172]	; (801331c <__kernel_cos+0x17c>)
 8013270:	4598      	cmp	r8, r3
 8013272:	4606      	mov	r6, r0
 8013274:	460f      	mov	r7, r1
 8013276:	dc10      	bgt.n	801329a <__kernel_cos+0xfa>
 8013278:	4602      	mov	r2, r0
 801327a:	460b      	mov	r3, r1
 801327c:	4650      	mov	r0, sl
 801327e:	4659      	mov	r1, fp
 8013280:	f7ed f81a 	bl	80002b8 <__aeabi_dsub>
 8013284:	460b      	mov	r3, r1
 8013286:	4926      	ldr	r1, [pc, #152]	; (8013320 <__kernel_cos+0x180>)
 8013288:	4602      	mov	r2, r0
 801328a:	2000      	movs	r0, #0
 801328c:	f7ed f814 	bl	80002b8 <__aeabi_dsub>
 8013290:	ec41 0b10 	vmov	d0, r0, r1
 8013294:	b003      	add	sp, #12
 8013296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801329a:	4b22      	ldr	r3, [pc, #136]	; (8013324 <__kernel_cos+0x184>)
 801329c:	4920      	ldr	r1, [pc, #128]	; (8013320 <__kernel_cos+0x180>)
 801329e:	4598      	cmp	r8, r3
 80132a0:	bfcc      	ite	gt
 80132a2:	4d21      	ldrgt	r5, [pc, #132]	; (8013328 <__kernel_cos+0x188>)
 80132a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80132a8:	2400      	movs	r4, #0
 80132aa:	4622      	mov	r2, r4
 80132ac:	462b      	mov	r3, r5
 80132ae:	2000      	movs	r0, #0
 80132b0:	f7ed f802 	bl	80002b8 <__aeabi_dsub>
 80132b4:	4622      	mov	r2, r4
 80132b6:	4680      	mov	r8, r0
 80132b8:	4689      	mov	r9, r1
 80132ba:	462b      	mov	r3, r5
 80132bc:	4650      	mov	r0, sl
 80132be:	4659      	mov	r1, fp
 80132c0:	f7ec fffa 	bl	80002b8 <__aeabi_dsub>
 80132c4:	4632      	mov	r2, r6
 80132c6:	463b      	mov	r3, r7
 80132c8:	f7ec fff6 	bl	80002b8 <__aeabi_dsub>
 80132cc:	4602      	mov	r2, r0
 80132ce:	460b      	mov	r3, r1
 80132d0:	4640      	mov	r0, r8
 80132d2:	4649      	mov	r1, r9
 80132d4:	e7da      	b.n	801328c <__kernel_cos+0xec>
 80132d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013310 <__kernel_cos+0x170>
 80132da:	e7db      	b.n	8013294 <__kernel_cos+0xf4>
 80132dc:	f3af 8000 	nop.w
 80132e0:	be8838d4 	.word	0xbe8838d4
 80132e4:	bda8fae9 	.word	0xbda8fae9
 80132e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80132ec:	3e21ee9e 	.word	0x3e21ee9e
 80132f0:	809c52ad 	.word	0x809c52ad
 80132f4:	3e927e4f 	.word	0x3e927e4f
 80132f8:	19cb1590 	.word	0x19cb1590
 80132fc:	3efa01a0 	.word	0x3efa01a0
 8013300:	16c15177 	.word	0x16c15177
 8013304:	3f56c16c 	.word	0x3f56c16c
 8013308:	5555554c 	.word	0x5555554c
 801330c:	3fa55555 	.word	0x3fa55555
 8013310:	00000000 	.word	0x00000000
 8013314:	3ff00000 	.word	0x3ff00000
 8013318:	3fe00000 	.word	0x3fe00000
 801331c:	3fd33332 	.word	0x3fd33332
 8013320:	3ff00000 	.word	0x3ff00000
 8013324:	3fe90000 	.word	0x3fe90000
 8013328:	3fd20000 	.word	0x3fd20000
 801332c:	00000000 	.word	0x00000000

08013330 <__kernel_rem_pio2>:
 8013330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013334:	ed2d 8b02 	vpush	{d8}
 8013338:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801333c:	f112 0f14 	cmn.w	r2, #20
 8013340:	9308      	str	r3, [sp, #32]
 8013342:	9101      	str	r1, [sp, #4]
 8013344:	4bc4      	ldr	r3, [pc, #784]	; (8013658 <__kernel_rem_pio2+0x328>)
 8013346:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013348:	900b      	str	r0, [sp, #44]	; 0x2c
 801334a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801334e:	9302      	str	r3, [sp, #8]
 8013350:	9b08      	ldr	r3, [sp, #32]
 8013352:	f103 33ff 	add.w	r3, r3, #4294967295
 8013356:	bfa8      	it	ge
 8013358:	1ed4      	subge	r4, r2, #3
 801335a:	9306      	str	r3, [sp, #24]
 801335c:	bfb2      	itee	lt
 801335e:	2400      	movlt	r4, #0
 8013360:	2318      	movge	r3, #24
 8013362:	fb94 f4f3 	sdivge	r4, r4, r3
 8013366:	f06f 0317 	mvn.w	r3, #23
 801336a:	fb04 3303 	mla	r3, r4, r3, r3
 801336e:	eb03 0a02 	add.w	sl, r3, r2
 8013372:	9b02      	ldr	r3, [sp, #8]
 8013374:	9a06      	ldr	r2, [sp, #24]
 8013376:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8013648 <__kernel_rem_pio2+0x318>
 801337a:	eb03 0802 	add.w	r8, r3, r2
 801337e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013380:	1aa7      	subs	r7, r4, r2
 8013382:	ae22      	add	r6, sp, #136	; 0x88
 8013384:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013388:	2500      	movs	r5, #0
 801338a:	4545      	cmp	r5, r8
 801338c:	dd13      	ble.n	80133b6 <__kernel_rem_pio2+0x86>
 801338e:	9b08      	ldr	r3, [sp, #32]
 8013390:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8013648 <__kernel_rem_pio2+0x318>
 8013394:	aa22      	add	r2, sp, #136	; 0x88
 8013396:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801339a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801339e:	f04f 0800 	mov.w	r8, #0
 80133a2:	9b02      	ldr	r3, [sp, #8]
 80133a4:	4598      	cmp	r8, r3
 80133a6:	dc2f      	bgt.n	8013408 <__kernel_rem_pio2+0xd8>
 80133a8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80133ac:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80133b0:	462f      	mov	r7, r5
 80133b2:	2600      	movs	r6, #0
 80133b4:	e01b      	b.n	80133ee <__kernel_rem_pio2+0xbe>
 80133b6:	42ef      	cmn	r7, r5
 80133b8:	d407      	bmi.n	80133ca <__kernel_rem_pio2+0x9a>
 80133ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80133be:	f7ed f8c9 	bl	8000554 <__aeabi_i2d>
 80133c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80133c6:	3501      	adds	r5, #1
 80133c8:	e7df      	b.n	801338a <__kernel_rem_pio2+0x5a>
 80133ca:	ec51 0b18 	vmov	r0, r1, d8
 80133ce:	e7f8      	b.n	80133c2 <__kernel_rem_pio2+0x92>
 80133d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80133d8:	f7ed f926 	bl	8000628 <__aeabi_dmul>
 80133dc:	4602      	mov	r2, r0
 80133de:	460b      	mov	r3, r1
 80133e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80133e4:	f7ec ff6a 	bl	80002bc <__adddf3>
 80133e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80133ec:	3601      	adds	r6, #1
 80133ee:	9b06      	ldr	r3, [sp, #24]
 80133f0:	429e      	cmp	r6, r3
 80133f2:	f1a7 0708 	sub.w	r7, r7, #8
 80133f6:	ddeb      	ble.n	80133d0 <__kernel_rem_pio2+0xa0>
 80133f8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80133fc:	f108 0801 	add.w	r8, r8, #1
 8013400:	ecab 7b02 	vstmia	fp!, {d7}
 8013404:	3508      	adds	r5, #8
 8013406:	e7cc      	b.n	80133a2 <__kernel_rem_pio2+0x72>
 8013408:	9b02      	ldr	r3, [sp, #8]
 801340a:	aa0e      	add	r2, sp, #56	; 0x38
 801340c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013410:	930d      	str	r3, [sp, #52]	; 0x34
 8013412:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013414:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013418:	9c02      	ldr	r4, [sp, #8]
 801341a:	930c      	str	r3, [sp, #48]	; 0x30
 801341c:	00e3      	lsls	r3, r4, #3
 801341e:	930a      	str	r3, [sp, #40]	; 0x28
 8013420:	ab9a      	add	r3, sp, #616	; 0x268
 8013422:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013426:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801342a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801342e:	ab72      	add	r3, sp, #456	; 0x1c8
 8013430:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8013434:	46c3      	mov	fp, r8
 8013436:	46a1      	mov	r9, r4
 8013438:	f1b9 0f00 	cmp.w	r9, #0
 801343c:	f1a5 0508 	sub.w	r5, r5, #8
 8013440:	dc77      	bgt.n	8013532 <__kernel_rem_pio2+0x202>
 8013442:	ec47 6b10 	vmov	d0, r6, r7
 8013446:	4650      	mov	r0, sl
 8013448:	f000 fde6 	bl	8014018 <scalbn>
 801344c:	ec57 6b10 	vmov	r6, r7, d0
 8013450:	2200      	movs	r2, #0
 8013452:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013456:	ee10 0a10 	vmov	r0, s0
 801345a:	4639      	mov	r1, r7
 801345c:	f7ed f8e4 	bl	8000628 <__aeabi_dmul>
 8013460:	ec41 0b10 	vmov	d0, r0, r1
 8013464:	f000 fd58 	bl	8013f18 <floor>
 8013468:	4b7c      	ldr	r3, [pc, #496]	; (801365c <__kernel_rem_pio2+0x32c>)
 801346a:	ec51 0b10 	vmov	r0, r1, d0
 801346e:	2200      	movs	r2, #0
 8013470:	f7ed f8da 	bl	8000628 <__aeabi_dmul>
 8013474:	4602      	mov	r2, r0
 8013476:	460b      	mov	r3, r1
 8013478:	4630      	mov	r0, r6
 801347a:	4639      	mov	r1, r7
 801347c:	f7ec ff1c 	bl	80002b8 <__aeabi_dsub>
 8013480:	460f      	mov	r7, r1
 8013482:	4606      	mov	r6, r0
 8013484:	f7ed fb80 	bl	8000b88 <__aeabi_d2iz>
 8013488:	9004      	str	r0, [sp, #16]
 801348a:	f7ed f863 	bl	8000554 <__aeabi_i2d>
 801348e:	4602      	mov	r2, r0
 8013490:	460b      	mov	r3, r1
 8013492:	4630      	mov	r0, r6
 8013494:	4639      	mov	r1, r7
 8013496:	f7ec ff0f 	bl	80002b8 <__aeabi_dsub>
 801349a:	f1ba 0f00 	cmp.w	sl, #0
 801349e:	4606      	mov	r6, r0
 80134a0:	460f      	mov	r7, r1
 80134a2:	dd6d      	ble.n	8013580 <__kernel_rem_pio2+0x250>
 80134a4:	1e62      	subs	r2, r4, #1
 80134a6:	ab0e      	add	r3, sp, #56	; 0x38
 80134a8:	9d04      	ldr	r5, [sp, #16]
 80134aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80134ae:	f1ca 0118 	rsb	r1, sl, #24
 80134b2:	fa40 f301 	asr.w	r3, r0, r1
 80134b6:	441d      	add	r5, r3
 80134b8:	408b      	lsls	r3, r1
 80134ba:	1ac0      	subs	r0, r0, r3
 80134bc:	ab0e      	add	r3, sp, #56	; 0x38
 80134be:	9504      	str	r5, [sp, #16]
 80134c0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80134c4:	f1ca 0317 	rsb	r3, sl, #23
 80134c8:	fa40 fb03 	asr.w	fp, r0, r3
 80134cc:	f1bb 0f00 	cmp.w	fp, #0
 80134d0:	dd65      	ble.n	801359e <__kernel_rem_pio2+0x26e>
 80134d2:	9b04      	ldr	r3, [sp, #16]
 80134d4:	2200      	movs	r2, #0
 80134d6:	3301      	adds	r3, #1
 80134d8:	9304      	str	r3, [sp, #16]
 80134da:	4615      	mov	r5, r2
 80134dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80134e0:	4294      	cmp	r4, r2
 80134e2:	f300 809c 	bgt.w	801361e <__kernel_rem_pio2+0x2ee>
 80134e6:	f1ba 0f00 	cmp.w	sl, #0
 80134ea:	dd07      	ble.n	80134fc <__kernel_rem_pio2+0x1cc>
 80134ec:	f1ba 0f01 	cmp.w	sl, #1
 80134f0:	f000 80c0 	beq.w	8013674 <__kernel_rem_pio2+0x344>
 80134f4:	f1ba 0f02 	cmp.w	sl, #2
 80134f8:	f000 80c6 	beq.w	8013688 <__kernel_rem_pio2+0x358>
 80134fc:	f1bb 0f02 	cmp.w	fp, #2
 8013500:	d14d      	bne.n	801359e <__kernel_rem_pio2+0x26e>
 8013502:	4632      	mov	r2, r6
 8013504:	463b      	mov	r3, r7
 8013506:	4956      	ldr	r1, [pc, #344]	; (8013660 <__kernel_rem_pio2+0x330>)
 8013508:	2000      	movs	r0, #0
 801350a:	f7ec fed5 	bl	80002b8 <__aeabi_dsub>
 801350e:	4606      	mov	r6, r0
 8013510:	460f      	mov	r7, r1
 8013512:	2d00      	cmp	r5, #0
 8013514:	d043      	beq.n	801359e <__kernel_rem_pio2+0x26e>
 8013516:	4650      	mov	r0, sl
 8013518:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8013650 <__kernel_rem_pio2+0x320>
 801351c:	f000 fd7c 	bl	8014018 <scalbn>
 8013520:	4630      	mov	r0, r6
 8013522:	4639      	mov	r1, r7
 8013524:	ec53 2b10 	vmov	r2, r3, d0
 8013528:	f7ec fec6 	bl	80002b8 <__aeabi_dsub>
 801352c:	4606      	mov	r6, r0
 801352e:	460f      	mov	r7, r1
 8013530:	e035      	b.n	801359e <__kernel_rem_pio2+0x26e>
 8013532:	4b4c      	ldr	r3, [pc, #304]	; (8013664 <__kernel_rem_pio2+0x334>)
 8013534:	2200      	movs	r2, #0
 8013536:	4630      	mov	r0, r6
 8013538:	4639      	mov	r1, r7
 801353a:	f7ed f875 	bl	8000628 <__aeabi_dmul>
 801353e:	f7ed fb23 	bl	8000b88 <__aeabi_d2iz>
 8013542:	f7ed f807 	bl	8000554 <__aeabi_i2d>
 8013546:	4602      	mov	r2, r0
 8013548:	460b      	mov	r3, r1
 801354a:	ec43 2b18 	vmov	d8, r2, r3
 801354e:	4b46      	ldr	r3, [pc, #280]	; (8013668 <__kernel_rem_pio2+0x338>)
 8013550:	2200      	movs	r2, #0
 8013552:	f7ed f869 	bl	8000628 <__aeabi_dmul>
 8013556:	4602      	mov	r2, r0
 8013558:	460b      	mov	r3, r1
 801355a:	4630      	mov	r0, r6
 801355c:	4639      	mov	r1, r7
 801355e:	f7ec feab 	bl	80002b8 <__aeabi_dsub>
 8013562:	f7ed fb11 	bl	8000b88 <__aeabi_d2iz>
 8013566:	e9d5 2300 	ldrd	r2, r3, [r5]
 801356a:	f84b 0b04 	str.w	r0, [fp], #4
 801356e:	ec51 0b18 	vmov	r0, r1, d8
 8013572:	f7ec fea3 	bl	80002bc <__adddf3>
 8013576:	f109 39ff 	add.w	r9, r9, #4294967295
 801357a:	4606      	mov	r6, r0
 801357c:	460f      	mov	r7, r1
 801357e:	e75b      	b.n	8013438 <__kernel_rem_pio2+0x108>
 8013580:	d106      	bne.n	8013590 <__kernel_rem_pio2+0x260>
 8013582:	1e63      	subs	r3, r4, #1
 8013584:	aa0e      	add	r2, sp, #56	; 0x38
 8013586:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801358a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801358e:	e79d      	b.n	80134cc <__kernel_rem_pio2+0x19c>
 8013590:	4b36      	ldr	r3, [pc, #216]	; (801366c <__kernel_rem_pio2+0x33c>)
 8013592:	2200      	movs	r2, #0
 8013594:	f7ed face 	bl	8000b34 <__aeabi_dcmpge>
 8013598:	2800      	cmp	r0, #0
 801359a:	d13d      	bne.n	8013618 <__kernel_rem_pio2+0x2e8>
 801359c:	4683      	mov	fp, r0
 801359e:	2200      	movs	r2, #0
 80135a0:	2300      	movs	r3, #0
 80135a2:	4630      	mov	r0, r6
 80135a4:	4639      	mov	r1, r7
 80135a6:	f7ed faa7 	bl	8000af8 <__aeabi_dcmpeq>
 80135aa:	2800      	cmp	r0, #0
 80135ac:	f000 80c0 	beq.w	8013730 <__kernel_rem_pio2+0x400>
 80135b0:	1e65      	subs	r5, r4, #1
 80135b2:	462b      	mov	r3, r5
 80135b4:	2200      	movs	r2, #0
 80135b6:	9902      	ldr	r1, [sp, #8]
 80135b8:	428b      	cmp	r3, r1
 80135ba:	da6c      	bge.n	8013696 <__kernel_rem_pio2+0x366>
 80135bc:	2a00      	cmp	r2, #0
 80135be:	f000 8089 	beq.w	80136d4 <__kernel_rem_pio2+0x3a4>
 80135c2:	ab0e      	add	r3, sp, #56	; 0x38
 80135c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80135c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	f000 80ad 	beq.w	801372c <__kernel_rem_pio2+0x3fc>
 80135d2:	4650      	mov	r0, sl
 80135d4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8013650 <__kernel_rem_pio2+0x320>
 80135d8:	f000 fd1e 	bl	8014018 <scalbn>
 80135dc:	ab9a      	add	r3, sp, #616	; 0x268
 80135de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80135e2:	ec57 6b10 	vmov	r6, r7, d0
 80135e6:	00ec      	lsls	r4, r5, #3
 80135e8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80135ec:	46aa      	mov	sl, r5
 80135ee:	f1ba 0f00 	cmp.w	sl, #0
 80135f2:	f280 80d6 	bge.w	80137a2 <__kernel_rem_pio2+0x472>
 80135f6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8013648 <__kernel_rem_pio2+0x318>
 80135fa:	462e      	mov	r6, r5
 80135fc:	2e00      	cmp	r6, #0
 80135fe:	f2c0 8104 	blt.w	801380a <__kernel_rem_pio2+0x4da>
 8013602:	ab72      	add	r3, sp, #456	; 0x1c8
 8013604:	ed8d 8b06 	vstr	d8, [sp, #24]
 8013608:	f8df a064 	ldr.w	sl, [pc, #100]	; 8013670 <__kernel_rem_pio2+0x340>
 801360c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8013610:	f04f 0800 	mov.w	r8, #0
 8013614:	1baf      	subs	r7, r5, r6
 8013616:	e0ea      	b.n	80137ee <__kernel_rem_pio2+0x4be>
 8013618:	f04f 0b02 	mov.w	fp, #2
 801361c:	e759      	b.n	80134d2 <__kernel_rem_pio2+0x1a2>
 801361e:	f8d8 3000 	ldr.w	r3, [r8]
 8013622:	b955      	cbnz	r5, 801363a <__kernel_rem_pio2+0x30a>
 8013624:	b123      	cbz	r3, 8013630 <__kernel_rem_pio2+0x300>
 8013626:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801362a:	f8c8 3000 	str.w	r3, [r8]
 801362e:	2301      	movs	r3, #1
 8013630:	3201      	adds	r2, #1
 8013632:	f108 0804 	add.w	r8, r8, #4
 8013636:	461d      	mov	r5, r3
 8013638:	e752      	b.n	80134e0 <__kernel_rem_pio2+0x1b0>
 801363a:	1acb      	subs	r3, r1, r3
 801363c:	f8c8 3000 	str.w	r3, [r8]
 8013640:	462b      	mov	r3, r5
 8013642:	e7f5      	b.n	8013630 <__kernel_rem_pio2+0x300>
 8013644:	f3af 8000 	nop.w
	...
 8013654:	3ff00000 	.word	0x3ff00000
 8013658:	08014ac8 	.word	0x08014ac8
 801365c:	40200000 	.word	0x40200000
 8013660:	3ff00000 	.word	0x3ff00000
 8013664:	3e700000 	.word	0x3e700000
 8013668:	41700000 	.word	0x41700000
 801366c:	3fe00000 	.word	0x3fe00000
 8013670:	08014a88 	.word	0x08014a88
 8013674:	1e62      	subs	r2, r4, #1
 8013676:	ab0e      	add	r3, sp, #56	; 0x38
 8013678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801367c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013680:	a90e      	add	r1, sp, #56	; 0x38
 8013682:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013686:	e739      	b.n	80134fc <__kernel_rem_pio2+0x1cc>
 8013688:	1e62      	subs	r2, r4, #1
 801368a:	ab0e      	add	r3, sp, #56	; 0x38
 801368c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013690:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013694:	e7f4      	b.n	8013680 <__kernel_rem_pio2+0x350>
 8013696:	a90e      	add	r1, sp, #56	; 0x38
 8013698:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801369c:	3b01      	subs	r3, #1
 801369e:	430a      	orrs	r2, r1
 80136a0:	e789      	b.n	80135b6 <__kernel_rem_pio2+0x286>
 80136a2:	3301      	adds	r3, #1
 80136a4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80136a8:	2900      	cmp	r1, #0
 80136aa:	d0fa      	beq.n	80136a2 <__kernel_rem_pio2+0x372>
 80136ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136ae:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80136b2:	446a      	add	r2, sp
 80136b4:	3a98      	subs	r2, #152	; 0x98
 80136b6:	920a      	str	r2, [sp, #40]	; 0x28
 80136b8:	9a08      	ldr	r2, [sp, #32]
 80136ba:	18e3      	adds	r3, r4, r3
 80136bc:	18a5      	adds	r5, r4, r2
 80136be:	aa22      	add	r2, sp, #136	; 0x88
 80136c0:	f104 0801 	add.w	r8, r4, #1
 80136c4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80136c8:	9304      	str	r3, [sp, #16]
 80136ca:	9b04      	ldr	r3, [sp, #16]
 80136cc:	4543      	cmp	r3, r8
 80136ce:	da04      	bge.n	80136da <__kernel_rem_pio2+0x3aa>
 80136d0:	461c      	mov	r4, r3
 80136d2:	e6a3      	b.n	801341c <__kernel_rem_pio2+0xec>
 80136d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80136d6:	2301      	movs	r3, #1
 80136d8:	e7e4      	b.n	80136a4 <__kernel_rem_pio2+0x374>
 80136da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136dc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80136e0:	f7ec ff38 	bl	8000554 <__aeabi_i2d>
 80136e4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80136e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136ea:	46ab      	mov	fp, r5
 80136ec:	461c      	mov	r4, r3
 80136ee:	f04f 0900 	mov.w	r9, #0
 80136f2:	2600      	movs	r6, #0
 80136f4:	2700      	movs	r7, #0
 80136f6:	9b06      	ldr	r3, [sp, #24]
 80136f8:	4599      	cmp	r9, r3
 80136fa:	dd06      	ble.n	801370a <__kernel_rem_pio2+0x3da>
 80136fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136fe:	e8e3 6702 	strd	r6, r7, [r3], #8
 8013702:	f108 0801 	add.w	r8, r8, #1
 8013706:	930a      	str	r3, [sp, #40]	; 0x28
 8013708:	e7df      	b.n	80136ca <__kernel_rem_pio2+0x39a>
 801370a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801370e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013712:	f7ec ff89 	bl	8000628 <__aeabi_dmul>
 8013716:	4602      	mov	r2, r0
 8013718:	460b      	mov	r3, r1
 801371a:	4630      	mov	r0, r6
 801371c:	4639      	mov	r1, r7
 801371e:	f7ec fdcd 	bl	80002bc <__adddf3>
 8013722:	f109 0901 	add.w	r9, r9, #1
 8013726:	4606      	mov	r6, r0
 8013728:	460f      	mov	r7, r1
 801372a:	e7e4      	b.n	80136f6 <__kernel_rem_pio2+0x3c6>
 801372c:	3d01      	subs	r5, #1
 801372e:	e748      	b.n	80135c2 <__kernel_rem_pio2+0x292>
 8013730:	ec47 6b10 	vmov	d0, r6, r7
 8013734:	f1ca 0000 	rsb	r0, sl, #0
 8013738:	f000 fc6e 	bl	8014018 <scalbn>
 801373c:	ec57 6b10 	vmov	r6, r7, d0
 8013740:	4ba0      	ldr	r3, [pc, #640]	; (80139c4 <__kernel_rem_pio2+0x694>)
 8013742:	ee10 0a10 	vmov	r0, s0
 8013746:	2200      	movs	r2, #0
 8013748:	4639      	mov	r1, r7
 801374a:	f7ed f9f3 	bl	8000b34 <__aeabi_dcmpge>
 801374e:	b1f8      	cbz	r0, 8013790 <__kernel_rem_pio2+0x460>
 8013750:	4b9d      	ldr	r3, [pc, #628]	; (80139c8 <__kernel_rem_pio2+0x698>)
 8013752:	2200      	movs	r2, #0
 8013754:	4630      	mov	r0, r6
 8013756:	4639      	mov	r1, r7
 8013758:	f7ec ff66 	bl	8000628 <__aeabi_dmul>
 801375c:	f7ed fa14 	bl	8000b88 <__aeabi_d2iz>
 8013760:	4680      	mov	r8, r0
 8013762:	f7ec fef7 	bl	8000554 <__aeabi_i2d>
 8013766:	4b97      	ldr	r3, [pc, #604]	; (80139c4 <__kernel_rem_pio2+0x694>)
 8013768:	2200      	movs	r2, #0
 801376a:	f7ec ff5d 	bl	8000628 <__aeabi_dmul>
 801376e:	460b      	mov	r3, r1
 8013770:	4602      	mov	r2, r0
 8013772:	4639      	mov	r1, r7
 8013774:	4630      	mov	r0, r6
 8013776:	f7ec fd9f 	bl	80002b8 <__aeabi_dsub>
 801377a:	f7ed fa05 	bl	8000b88 <__aeabi_d2iz>
 801377e:	1c65      	adds	r5, r4, #1
 8013780:	ab0e      	add	r3, sp, #56	; 0x38
 8013782:	f10a 0a18 	add.w	sl, sl, #24
 8013786:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801378a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801378e:	e720      	b.n	80135d2 <__kernel_rem_pio2+0x2a2>
 8013790:	4630      	mov	r0, r6
 8013792:	4639      	mov	r1, r7
 8013794:	f7ed f9f8 	bl	8000b88 <__aeabi_d2iz>
 8013798:	ab0e      	add	r3, sp, #56	; 0x38
 801379a:	4625      	mov	r5, r4
 801379c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80137a0:	e717      	b.n	80135d2 <__kernel_rem_pio2+0x2a2>
 80137a2:	ab0e      	add	r3, sp, #56	; 0x38
 80137a4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80137a8:	f7ec fed4 	bl	8000554 <__aeabi_i2d>
 80137ac:	4632      	mov	r2, r6
 80137ae:	463b      	mov	r3, r7
 80137b0:	f7ec ff3a 	bl	8000628 <__aeabi_dmul>
 80137b4:	4b84      	ldr	r3, [pc, #528]	; (80139c8 <__kernel_rem_pio2+0x698>)
 80137b6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80137ba:	2200      	movs	r2, #0
 80137bc:	4630      	mov	r0, r6
 80137be:	4639      	mov	r1, r7
 80137c0:	f7ec ff32 	bl	8000628 <__aeabi_dmul>
 80137c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80137c8:	4606      	mov	r6, r0
 80137ca:	460f      	mov	r7, r1
 80137cc:	e70f      	b.n	80135ee <__kernel_rem_pio2+0x2be>
 80137ce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80137d2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80137d6:	f7ec ff27 	bl	8000628 <__aeabi_dmul>
 80137da:	4602      	mov	r2, r0
 80137dc:	460b      	mov	r3, r1
 80137de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80137e2:	f7ec fd6b 	bl	80002bc <__adddf3>
 80137e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80137ea:	f108 0801 	add.w	r8, r8, #1
 80137ee:	9b02      	ldr	r3, [sp, #8]
 80137f0:	4598      	cmp	r8, r3
 80137f2:	dc01      	bgt.n	80137f8 <__kernel_rem_pio2+0x4c8>
 80137f4:	45b8      	cmp	r8, r7
 80137f6:	ddea      	ble.n	80137ce <__kernel_rem_pio2+0x49e>
 80137f8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80137fc:	ab4a      	add	r3, sp, #296	; 0x128
 80137fe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013802:	ed87 7b00 	vstr	d7, [r7]
 8013806:	3e01      	subs	r6, #1
 8013808:	e6f8      	b.n	80135fc <__kernel_rem_pio2+0x2cc>
 801380a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801380c:	2b02      	cmp	r3, #2
 801380e:	dc0b      	bgt.n	8013828 <__kernel_rem_pio2+0x4f8>
 8013810:	2b00      	cmp	r3, #0
 8013812:	dc35      	bgt.n	8013880 <__kernel_rem_pio2+0x550>
 8013814:	d059      	beq.n	80138ca <__kernel_rem_pio2+0x59a>
 8013816:	9b04      	ldr	r3, [sp, #16]
 8013818:	f003 0007 	and.w	r0, r3, #7
 801381c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013820:	ecbd 8b02 	vpop	{d8}
 8013824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013828:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801382a:	2b03      	cmp	r3, #3
 801382c:	d1f3      	bne.n	8013816 <__kernel_rem_pio2+0x4e6>
 801382e:	ab4a      	add	r3, sp, #296	; 0x128
 8013830:	4423      	add	r3, r4
 8013832:	9306      	str	r3, [sp, #24]
 8013834:	461c      	mov	r4, r3
 8013836:	469a      	mov	sl, r3
 8013838:	9502      	str	r5, [sp, #8]
 801383a:	9b02      	ldr	r3, [sp, #8]
 801383c:	2b00      	cmp	r3, #0
 801383e:	f1aa 0a08 	sub.w	sl, sl, #8
 8013842:	dc6b      	bgt.n	801391c <__kernel_rem_pio2+0x5ec>
 8013844:	46aa      	mov	sl, r5
 8013846:	f1ba 0f01 	cmp.w	sl, #1
 801384a:	f1a4 0408 	sub.w	r4, r4, #8
 801384e:	f300 8085 	bgt.w	801395c <__kernel_rem_pio2+0x62c>
 8013852:	9c06      	ldr	r4, [sp, #24]
 8013854:	2000      	movs	r0, #0
 8013856:	3408      	adds	r4, #8
 8013858:	2100      	movs	r1, #0
 801385a:	2d01      	cmp	r5, #1
 801385c:	f300 809d 	bgt.w	801399a <__kernel_rem_pio2+0x66a>
 8013860:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8013864:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8013868:	f1bb 0f00 	cmp.w	fp, #0
 801386c:	f040 809b 	bne.w	80139a6 <__kernel_rem_pio2+0x676>
 8013870:	9b01      	ldr	r3, [sp, #4]
 8013872:	e9c3 5600 	strd	r5, r6, [r3]
 8013876:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801387a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801387e:	e7ca      	b.n	8013816 <__kernel_rem_pio2+0x4e6>
 8013880:	3408      	adds	r4, #8
 8013882:	ab4a      	add	r3, sp, #296	; 0x128
 8013884:	441c      	add	r4, r3
 8013886:	462e      	mov	r6, r5
 8013888:	2000      	movs	r0, #0
 801388a:	2100      	movs	r1, #0
 801388c:	2e00      	cmp	r6, #0
 801388e:	da36      	bge.n	80138fe <__kernel_rem_pio2+0x5ce>
 8013890:	f1bb 0f00 	cmp.w	fp, #0
 8013894:	d039      	beq.n	801390a <__kernel_rem_pio2+0x5da>
 8013896:	4602      	mov	r2, r0
 8013898:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801389c:	9c01      	ldr	r4, [sp, #4]
 801389e:	e9c4 2300 	strd	r2, r3, [r4]
 80138a2:	4602      	mov	r2, r0
 80138a4:	460b      	mov	r3, r1
 80138a6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80138aa:	f7ec fd05 	bl	80002b8 <__aeabi_dsub>
 80138ae:	ae4c      	add	r6, sp, #304	; 0x130
 80138b0:	2401      	movs	r4, #1
 80138b2:	42a5      	cmp	r5, r4
 80138b4:	da2c      	bge.n	8013910 <__kernel_rem_pio2+0x5e0>
 80138b6:	f1bb 0f00 	cmp.w	fp, #0
 80138ba:	d002      	beq.n	80138c2 <__kernel_rem_pio2+0x592>
 80138bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80138c0:	4619      	mov	r1, r3
 80138c2:	9b01      	ldr	r3, [sp, #4]
 80138c4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80138c8:	e7a5      	b.n	8013816 <__kernel_rem_pio2+0x4e6>
 80138ca:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80138ce:	eb0d 0403 	add.w	r4, sp, r3
 80138d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80138d6:	2000      	movs	r0, #0
 80138d8:	2100      	movs	r1, #0
 80138da:	2d00      	cmp	r5, #0
 80138dc:	da09      	bge.n	80138f2 <__kernel_rem_pio2+0x5c2>
 80138de:	f1bb 0f00 	cmp.w	fp, #0
 80138e2:	d002      	beq.n	80138ea <__kernel_rem_pio2+0x5ba>
 80138e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80138e8:	4619      	mov	r1, r3
 80138ea:	9b01      	ldr	r3, [sp, #4]
 80138ec:	e9c3 0100 	strd	r0, r1, [r3]
 80138f0:	e791      	b.n	8013816 <__kernel_rem_pio2+0x4e6>
 80138f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80138f6:	f7ec fce1 	bl	80002bc <__adddf3>
 80138fa:	3d01      	subs	r5, #1
 80138fc:	e7ed      	b.n	80138da <__kernel_rem_pio2+0x5aa>
 80138fe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013902:	f7ec fcdb 	bl	80002bc <__adddf3>
 8013906:	3e01      	subs	r6, #1
 8013908:	e7c0      	b.n	801388c <__kernel_rem_pio2+0x55c>
 801390a:	4602      	mov	r2, r0
 801390c:	460b      	mov	r3, r1
 801390e:	e7c5      	b.n	801389c <__kernel_rem_pio2+0x56c>
 8013910:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013914:	f7ec fcd2 	bl	80002bc <__adddf3>
 8013918:	3401      	adds	r4, #1
 801391a:	e7ca      	b.n	80138b2 <__kernel_rem_pio2+0x582>
 801391c:	e9da 8900 	ldrd	r8, r9, [sl]
 8013920:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013924:	9b02      	ldr	r3, [sp, #8]
 8013926:	3b01      	subs	r3, #1
 8013928:	9302      	str	r3, [sp, #8]
 801392a:	4632      	mov	r2, r6
 801392c:	463b      	mov	r3, r7
 801392e:	4640      	mov	r0, r8
 8013930:	4649      	mov	r1, r9
 8013932:	f7ec fcc3 	bl	80002bc <__adddf3>
 8013936:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801393a:	4602      	mov	r2, r0
 801393c:	460b      	mov	r3, r1
 801393e:	4640      	mov	r0, r8
 8013940:	4649      	mov	r1, r9
 8013942:	f7ec fcb9 	bl	80002b8 <__aeabi_dsub>
 8013946:	4632      	mov	r2, r6
 8013948:	463b      	mov	r3, r7
 801394a:	f7ec fcb7 	bl	80002bc <__adddf3>
 801394e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8013952:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013956:	ed8a 7b00 	vstr	d7, [sl]
 801395a:	e76e      	b.n	801383a <__kernel_rem_pio2+0x50a>
 801395c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013960:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013964:	4640      	mov	r0, r8
 8013966:	4632      	mov	r2, r6
 8013968:	463b      	mov	r3, r7
 801396a:	4649      	mov	r1, r9
 801396c:	f7ec fca6 	bl	80002bc <__adddf3>
 8013970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013974:	4602      	mov	r2, r0
 8013976:	460b      	mov	r3, r1
 8013978:	4640      	mov	r0, r8
 801397a:	4649      	mov	r1, r9
 801397c:	f7ec fc9c 	bl	80002b8 <__aeabi_dsub>
 8013980:	4632      	mov	r2, r6
 8013982:	463b      	mov	r3, r7
 8013984:	f7ec fc9a 	bl	80002bc <__adddf3>
 8013988:	ed9d 7b02 	vldr	d7, [sp, #8]
 801398c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013990:	ed84 7b00 	vstr	d7, [r4]
 8013994:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013998:	e755      	b.n	8013846 <__kernel_rem_pio2+0x516>
 801399a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801399e:	f7ec fc8d 	bl	80002bc <__adddf3>
 80139a2:	3d01      	subs	r5, #1
 80139a4:	e759      	b.n	801385a <__kernel_rem_pio2+0x52a>
 80139a6:	9b01      	ldr	r3, [sp, #4]
 80139a8:	9a01      	ldr	r2, [sp, #4]
 80139aa:	601d      	str	r5, [r3, #0]
 80139ac:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80139b0:	605c      	str	r4, [r3, #4]
 80139b2:	609f      	str	r7, [r3, #8]
 80139b4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80139b8:	60d3      	str	r3, [r2, #12]
 80139ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80139be:	6110      	str	r0, [r2, #16]
 80139c0:	6153      	str	r3, [r2, #20]
 80139c2:	e728      	b.n	8013816 <__kernel_rem_pio2+0x4e6>
 80139c4:	41700000 	.word	0x41700000
 80139c8:	3e700000 	.word	0x3e700000
 80139cc:	00000000 	.word	0x00000000

080139d0 <__kernel_sin>:
 80139d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139d4:	ed2d 8b04 	vpush	{d8-d9}
 80139d8:	eeb0 8a41 	vmov.f32	s16, s2
 80139dc:	eef0 8a61 	vmov.f32	s17, s3
 80139e0:	ec55 4b10 	vmov	r4, r5, d0
 80139e4:	b083      	sub	sp, #12
 80139e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80139ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80139ee:	9001      	str	r0, [sp, #4]
 80139f0:	da06      	bge.n	8013a00 <__kernel_sin+0x30>
 80139f2:	ee10 0a10 	vmov	r0, s0
 80139f6:	4629      	mov	r1, r5
 80139f8:	f7ed f8c6 	bl	8000b88 <__aeabi_d2iz>
 80139fc:	2800      	cmp	r0, #0
 80139fe:	d051      	beq.n	8013aa4 <__kernel_sin+0xd4>
 8013a00:	4622      	mov	r2, r4
 8013a02:	462b      	mov	r3, r5
 8013a04:	4620      	mov	r0, r4
 8013a06:	4629      	mov	r1, r5
 8013a08:	f7ec fe0e 	bl	8000628 <__aeabi_dmul>
 8013a0c:	4682      	mov	sl, r0
 8013a0e:	468b      	mov	fp, r1
 8013a10:	4602      	mov	r2, r0
 8013a12:	460b      	mov	r3, r1
 8013a14:	4620      	mov	r0, r4
 8013a16:	4629      	mov	r1, r5
 8013a18:	f7ec fe06 	bl	8000628 <__aeabi_dmul>
 8013a1c:	a341      	add	r3, pc, #260	; (adr r3, 8013b24 <__kernel_sin+0x154>)
 8013a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a22:	4680      	mov	r8, r0
 8013a24:	4689      	mov	r9, r1
 8013a26:	4650      	mov	r0, sl
 8013a28:	4659      	mov	r1, fp
 8013a2a:	f7ec fdfd 	bl	8000628 <__aeabi_dmul>
 8013a2e:	a33f      	add	r3, pc, #252	; (adr r3, 8013b2c <__kernel_sin+0x15c>)
 8013a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a34:	f7ec fc40 	bl	80002b8 <__aeabi_dsub>
 8013a38:	4652      	mov	r2, sl
 8013a3a:	465b      	mov	r3, fp
 8013a3c:	f7ec fdf4 	bl	8000628 <__aeabi_dmul>
 8013a40:	a33c      	add	r3, pc, #240	; (adr r3, 8013b34 <__kernel_sin+0x164>)
 8013a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a46:	f7ec fc39 	bl	80002bc <__adddf3>
 8013a4a:	4652      	mov	r2, sl
 8013a4c:	465b      	mov	r3, fp
 8013a4e:	f7ec fdeb 	bl	8000628 <__aeabi_dmul>
 8013a52:	a33a      	add	r3, pc, #232	; (adr r3, 8013b3c <__kernel_sin+0x16c>)
 8013a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a58:	f7ec fc2e 	bl	80002b8 <__aeabi_dsub>
 8013a5c:	4652      	mov	r2, sl
 8013a5e:	465b      	mov	r3, fp
 8013a60:	f7ec fde2 	bl	8000628 <__aeabi_dmul>
 8013a64:	a337      	add	r3, pc, #220	; (adr r3, 8013b44 <__kernel_sin+0x174>)
 8013a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a6a:	f7ec fc27 	bl	80002bc <__adddf3>
 8013a6e:	9b01      	ldr	r3, [sp, #4]
 8013a70:	4606      	mov	r6, r0
 8013a72:	460f      	mov	r7, r1
 8013a74:	b9eb      	cbnz	r3, 8013ab2 <__kernel_sin+0xe2>
 8013a76:	4602      	mov	r2, r0
 8013a78:	460b      	mov	r3, r1
 8013a7a:	4650      	mov	r0, sl
 8013a7c:	4659      	mov	r1, fp
 8013a7e:	f7ec fdd3 	bl	8000628 <__aeabi_dmul>
 8013a82:	a325      	add	r3, pc, #148	; (adr r3, 8013b18 <__kernel_sin+0x148>)
 8013a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a88:	f7ec fc16 	bl	80002b8 <__aeabi_dsub>
 8013a8c:	4642      	mov	r2, r8
 8013a8e:	464b      	mov	r3, r9
 8013a90:	f7ec fdca 	bl	8000628 <__aeabi_dmul>
 8013a94:	4602      	mov	r2, r0
 8013a96:	460b      	mov	r3, r1
 8013a98:	4620      	mov	r0, r4
 8013a9a:	4629      	mov	r1, r5
 8013a9c:	f7ec fc0e 	bl	80002bc <__adddf3>
 8013aa0:	4604      	mov	r4, r0
 8013aa2:	460d      	mov	r5, r1
 8013aa4:	ec45 4b10 	vmov	d0, r4, r5
 8013aa8:	b003      	add	sp, #12
 8013aaa:	ecbd 8b04 	vpop	{d8-d9}
 8013aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab2:	4b1b      	ldr	r3, [pc, #108]	; (8013b20 <__kernel_sin+0x150>)
 8013ab4:	ec51 0b18 	vmov	r0, r1, d8
 8013ab8:	2200      	movs	r2, #0
 8013aba:	f7ec fdb5 	bl	8000628 <__aeabi_dmul>
 8013abe:	4632      	mov	r2, r6
 8013ac0:	ec41 0b19 	vmov	d9, r0, r1
 8013ac4:	463b      	mov	r3, r7
 8013ac6:	4640      	mov	r0, r8
 8013ac8:	4649      	mov	r1, r9
 8013aca:	f7ec fdad 	bl	8000628 <__aeabi_dmul>
 8013ace:	4602      	mov	r2, r0
 8013ad0:	460b      	mov	r3, r1
 8013ad2:	ec51 0b19 	vmov	r0, r1, d9
 8013ad6:	f7ec fbef 	bl	80002b8 <__aeabi_dsub>
 8013ada:	4652      	mov	r2, sl
 8013adc:	465b      	mov	r3, fp
 8013ade:	f7ec fda3 	bl	8000628 <__aeabi_dmul>
 8013ae2:	ec53 2b18 	vmov	r2, r3, d8
 8013ae6:	f7ec fbe7 	bl	80002b8 <__aeabi_dsub>
 8013aea:	a30b      	add	r3, pc, #44	; (adr r3, 8013b18 <__kernel_sin+0x148>)
 8013aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af0:	4606      	mov	r6, r0
 8013af2:	460f      	mov	r7, r1
 8013af4:	4640      	mov	r0, r8
 8013af6:	4649      	mov	r1, r9
 8013af8:	f7ec fd96 	bl	8000628 <__aeabi_dmul>
 8013afc:	4602      	mov	r2, r0
 8013afe:	460b      	mov	r3, r1
 8013b00:	4630      	mov	r0, r6
 8013b02:	4639      	mov	r1, r7
 8013b04:	f7ec fbda 	bl	80002bc <__adddf3>
 8013b08:	4602      	mov	r2, r0
 8013b0a:	460b      	mov	r3, r1
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	4629      	mov	r1, r5
 8013b10:	f7ec fbd2 	bl	80002b8 <__aeabi_dsub>
 8013b14:	e7c4      	b.n	8013aa0 <__kernel_sin+0xd0>
 8013b16:	bf00      	nop
 8013b18:	55555549 	.word	0x55555549
 8013b1c:	3fc55555 	.word	0x3fc55555
 8013b20:	3fe00000 	.word	0x3fe00000
 8013b24:	5acfd57c 	.word	0x5acfd57c
 8013b28:	3de5d93a 	.word	0x3de5d93a
 8013b2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013b30:	3e5ae5e6 	.word	0x3e5ae5e6
 8013b34:	57b1fe7d 	.word	0x57b1fe7d
 8013b38:	3ec71de3 	.word	0x3ec71de3
 8013b3c:	19c161d5 	.word	0x19c161d5
 8013b40:	3f2a01a0 	.word	0x3f2a01a0
 8013b44:	1110f8a6 	.word	0x1110f8a6
 8013b48:	3f811111 	.word	0x3f811111

08013b4c <with_errno>:
 8013b4c:	b570      	push	{r4, r5, r6, lr}
 8013b4e:	4604      	mov	r4, r0
 8013b50:	460d      	mov	r5, r1
 8013b52:	4616      	mov	r6, r2
 8013b54:	f7f8 fd32 	bl	800c5bc <__errno>
 8013b58:	4629      	mov	r1, r5
 8013b5a:	6006      	str	r6, [r0, #0]
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	bd70      	pop	{r4, r5, r6, pc}

08013b60 <xflow>:
 8013b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b62:	4614      	mov	r4, r2
 8013b64:	461d      	mov	r5, r3
 8013b66:	b108      	cbz	r0, 8013b6c <xflow+0xc>
 8013b68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013b6c:	e9cd 2300 	strd	r2, r3, [sp]
 8013b70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b74:	4620      	mov	r0, r4
 8013b76:	4629      	mov	r1, r5
 8013b78:	f7ec fd56 	bl	8000628 <__aeabi_dmul>
 8013b7c:	2222      	movs	r2, #34	; 0x22
 8013b7e:	b003      	add	sp, #12
 8013b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b84:	f7ff bfe2 	b.w	8013b4c <with_errno>

08013b88 <__math_uflow>:
 8013b88:	b508      	push	{r3, lr}
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013b90:	f7ff ffe6 	bl	8013b60 <xflow>
 8013b94:	ec41 0b10 	vmov	d0, r0, r1
 8013b98:	bd08      	pop	{r3, pc}

08013b9a <__math_oflow>:
 8013b9a:	b508      	push	{r3, lr}
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013ba2:	f7ff ffdd 	bl	8013b60 <xflow>
 8013ba6:	ec41 0b10 	vmov	d0, r0, r1
 8013baa:	bd08      	pop	{r3, pc}
 8013bac:	0000      	movs	r0, r0
	...

08013bb0 <atan>:
 8013bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb4:	ec55 4b10 	vmov	r4, r5, d0
 8013bb8:	4bc3      	ldr	r3, [pc, #780]	; (8013ec8 <atan+0x318>)
 8013bba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013bbe:	429e      	cmp	r6, r3
 8013bc0:	46ab      	mov	fp, r5
 8013bc2:	dd18      	ble.n	8013bf6 <atan+0x46>
 8013bc4:	4bc1      	ldr	r3, [pc, #772]	; (8013ecc <atan+0x31c>)
 8013bc6:	429e      	cmp	r6, r3
 8013bc8:	dc01      	bgt.n	8013bce <atan+0x1e>
 8013bca:	d109      	bne.n	8013be0 <atan+0x30>
 8013bcc:	b144      	cbz	r4, 8013be0 <atan+0x30>
 8013bce:	4622      	mov	r2, r4
 8013bd0:	462b      	mov	r3, r5
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	4629      	mov	r1, r5
 8013bd6:	f7ec fb71 	bl	80002bc <__adddf3>
 8013bda:	4604      	mov	r4, r0
 8013bdc:	460d      	mov	r5, r1
 8013bde:	e006      	b.n	8013bee <atan+0x3e>
 8013be0:	f1bb 0f00 	cmp.w	fp, #0
 8013be4:	f300 8131 	bgt.w	8013e4a <atan+0x29a>
 8013be8:	a59b      	add	r5, pc, #620	; (adr r5, 8013e58 <atan+0x2a8>)
 8013bea:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013bee:	ec45 4b10 	vmov	d0, r4, r5
 8013bf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bf6:	4bb6      	ldr	r3, [pc, #728]	; (8013ed0 <atan+0x320>)
 8013bf8:	429e      	cmp	r6, r3
 8013bfa:	dc14      	bgt.n	8013c26 <atan+0x76>
 8013bfc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8013c00:	429e      	cmp	r6, r3
 8013c02:	dc0d      	bgt.n	8013c20 <atan+0x70>
 8013c04:	a396      	add	r3, pc, #600	; (adr r3, 8013e60 <atan+0x2b0>)
 8013c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c0a:	ee10 0a10 	vmov	r0, s0
 8013c0e:	4629      	mov	r1, r5
 8013c10:	f7ec fb54 	bl	80002bc <__adddf3>
 8013c14:	4baf      	ldr	r3, [pc, #700]	; (8013ed4 <atan+0x324>)
 8013c16:	2200      	movs	r2, #0
 8013c18:	f7ec ff96 	bl	8000b48 <__aeabi_dcmpgt>
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	d1e6      	bne.n	8013bee <atan+0x3e>
 8013c20:	f04f 3aff 	mov.w	sl, #4294967295
 8013c24:	e02b      	b.n	8013c7e <atan+0xce>
 8013c26:	f000 f963 	bl	8013ef0 <fabs>
 8013c2a:	4bab      	ldr	r3, [pc, #684]	; (8013ed8 <atan+0x328>)
 8013c2c:	429e      	cmp	r6, r3
 8013c2e:	ec55 4b10 	vmov	r4, r5, d0
 8013c32:	f300 80bf 	bgt.w	8013db4 <atan+0x204>
 8013c36:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8013c3a:	429e      	cmp	r6, r3
 8013c3c:	f300 80a0 	bgt.w	8013d80 <atan+0x1d0>
 8013c40:	ee10 2a10 	vmov	r2, s0
 8013c44:	ee10 0a10 	vmov	r0, s0
 8013c48:	462b      	mov	r3, r5
 8013c4a:	4629      	mov	r1, r5
 8013c4c:	f7ec fb36 	bl	80002bc <__adddf3>
 8013c50:	4ba0      	ldr	r3, [pc, #640]	; (8013ed4 <atan+0x324>)
 8013c52:	2200      	movs	r2, #0
 8013c54:	f7ec fb30 	bl	80002b8 <__aeabi_dsub>
 8013c58:	2200      	movs	r2, #0
 8013c5a:	4606      	mov	r6, r0
 8013c5c:	460f      	mov	r7, r1
 8013c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013c62:	4620      	mov	r0, r4
 8013c64:	4629      	mov	r1, r5
 8013c66:	f7ec fb29 	bl	80002bc <__adddf3>
 8013c6a:	4602      	mov	r2, r0
 8013c6c:	460b      	mov	r3, r1
 8013c6e:	4630      	mov	r0, r6
 8013c70:	4639      	mov	r1, r7
 8013c72:	f7ec fe03 	bl	800087c <__aeabi_ddiv>
 8013c76:	f04f 0a00 	mov.w	sl, #0
 8013c7a:	4604      	mov	r4, r0
 8013c7c:	460d      	mov	r5, r1
 8013c7e:	4622      	mov	r2, r4
 8013c80:	462b      	mov	r3, r5
 8013c82:	4620      	mov	r0, r4
 8013c84:	4629      	mov	r1, r5
 8013c86:	f7ec fccf 	bl	8000628 <__aeabi_dmul>
 8013c8a:	4602      	mov	r2, r0
 8013c8c:	460b      	mov	r3, r1
 8013c8e:	4680      	mov	r8, r0
 8013c90:	4689      	mov	r9, r1
 8013c92:	f7ec fcc9 	bl	8000628 <__aeabi_dmul>
 8013c96:	a374      	add	r3, pc, #464	; (adr r3, 8013e68 <atan+0x2b8>)
 8013c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c9c:	4606      	mov	r6, r0
 8013c9e:	460f      	mov	r7, r1
 8013ca0:	f7ec fcc2 	bl	8000628 <__aeabi_dmul>
 8013ca4:	a372      	add	r3, pc, #456	; (adr r3, 8013e70 <atan+0x2c0>)
 8013ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013caa:	f7ec fb07 	bl	80002bc <__adddf3>
 8013cae:	4632      	mov	r2, r6
 8013cb0:	463b      	mov	r3, r7
 8013cb2:	f7ec fcb9 	bl	8000628 <__aeabi_dmul>
 8013cb6:	a370      	add	r3, pc, #448	; (adr r3, 8013e78 <atan+0x2c8>)
 8013cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cbc:	f7ec fafe 	bl	80002bc <__adddf3>
 8013cc0:	4632      	mov	r2, r6
 8013cc2:	463b      	mov	r3, r7
 8013cc4:	f7ec fcb0 	bl	8000628 <__aeabi_dmul>
 8013cc8:	a36d      	add	r3, pc, #436	; (adr r3, 8013e80 <atan+0x2d0>)
 8013cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cce:	f7ec faf5 	bl	80002bc <__adddf3>
 8013cd2:	4632      	mov	r2, r6
 8013cd4:	463b      	mov	r3, r7
 8013cd6:	f7ec fca7 	bl	8000628 <__aeabi_dmul>
 8013cda:	a36b      	add	r3, pc, #428	; (adr r3, 8013e88 <atan+0x2d8>)
 8013cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce0:	f7ec faec 	bl	80002bc <__adddf3>
 8013ce4:	4632      	mov	r2, r6
 8013ce6:	463b      	mov	r3, r7
 8013ce8:	f7ec fc9e 	bl	8000628 <__aeabi_dmul>
 8013cec:	a368      	add	r3, pc, #416	; (adr r3, 8013e90 <atan+0x2e0>)
 8013cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cf2:	f7ec fae3 	bl	80002bc <__adddf3>
 8013cf6:	4642      	mov	r2, r8
 8013cf8:	464b      	mov	r3, r9
 8013cfa:	f7ec fc95 	bl	8000628 <__aeabi_dmul>
 8013cfe:	a366      	add	r3, pc, #408	; (adr r3, 8013e98 <atan+0x2e8>)
 8013d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d04:	4680      	mov	r8, r0
 8013d06:	4689      	mov	r9, r1
 8013d08:	4630      	mov	r0, r6
 8013d0a:	4639      	mov	r1, r7
 8013d0c:	f7ec fc8c 	bl	8000628 <__aeabi_dmul>
 8013d10:	a363      	add	r3, pc, #396	; (adr r3, 8013ea0 <atan+0x2f0>)
 8013d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d16:	f7ec facf 	bl	80002b8 <__aeabi_dsub>
 8013d1a:	4632      	mov	r2, r6
 8013d1c:	463b      	mov	r3, r7
 8013d1e:	f7ec fc83 	bl	8000628 <__aeabi_dmul>
 8013d22:	a361      	add	r3, pc, #388	; (adr r3, 8013ea8 <atan+0x2f8>)
 8013d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d28:	f7ec fac6 	bl	80002b8 <__aeabi_dsub>
 8013d2c:	4632      	mov	r2, r6
 8013d2e:	463b      	mov	r3, r7
 8013d30:	f7ec fc7a 	bl	8000628 <__aeabi_dmul>
 8013d34:	a35e      	add	r3, pc, #376	; (adr r3, 8013eb0 <atan+0x300>)
 8013d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d3a:	f7ec fabd 	bl	80002b8 <__aeabi_dsub>
 8013d3e:	4632      	mov	r2, r6
 8013d40:	463b      	mov	r3, r7
 8013d42:	f7ec fc71 	bl	8000628 <__aeabi_dmul>
 8013d46:	a35c      	add	r3, pc, #368	; (adr r3, 8013eb8 <atan+0x308>)
 8013d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d4c:	f7ec fab4 	bl	80002b8 <__aeabi_dsub>
 8013d50:	4632      	mov	r2, r6
 8013d52:	463b      	mov	r3, r7
 8013d54:	f7ec fc68 	bl	8000628 <__aeabi_dmul>
 8013d58:	4602      	mov	r2, r0
 8013d5a:	460b      	mov	r3, r1
 8013d5c:	4640      	mov	r0, r8
 8013d5e:	4649      	mov	r1, r9
 8013d60:	f7ec faac 	bl	80002bc <__adddf3>
 8013d64:	4622      	mov	r2, r4
 8013d66:	462b      	mov	r3, r5
 8013d68:	f7ec fc5e 	bl	8000628 <__aeabi_dmul>
 8013d6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013d70:	4602      	mov	r2, r0
 8013d72:	460b      	mov	r3, r1
 8013d74:	d14b      	bne.n	8013e0e <atan+0x25e>
 8013d76:	4620      	mov	r0, r4
 8013d78:	4629      	mov	r1, r5
 8013d7a:	f7ec fa9d 	bl	80002b8 <__aeabi_dsub>
 8013d7e:	e72c      	b.n	8013bda <atan+0x2a>
 8013d80:	ee10 0a10 	vmov	r0, s0
 8013d84:	4b53      	ldr	r3, [pc, #332]	; (8013ed4 <atan+0x324>)
 8013d86:	2200      	movs	r2, #0
 8013d88:	4629      	mov	r1, r5
 8013d8a:	f7ec fa95 	bl	80002b8 <__aeabi_dsub>
 8013d8e:	4b51      	ldr	r3, [pc, #324]	; (8013ed4 <atan+0x324>)
 8013d90:	4606      	mov	r6, r0
 8013d92:	460f      	mov	r7, r1
 8013d94:	2200      	movs	r2, #0
 8013d96:	4620      	mov	r0, r4
 8013d98:	4629      	mov	r1, r5
 8013d9a:	f7ec fa8f 	bl	80002bc <__adddf3>
 8013d9e:	4602      	mov	r2, r0
 8013da0:	460b      	mov	r3, r1
 8013da2:	4630      	mov	r0, r6
 8013da4:	4639      	mov	r1, r7
 8013da6:	f7ec fd69 	bl	800087c <__aeabi_ddiv>
 8013daa:	f04f 0a01 	mov.w	sl, #1
 8013dae:	4604      	mov	r4, r0
 8013db0:	460d      	mov	r5, r1
 8013db2:	e764      	b.n	8013c7e <atan+0xce>
 8013db4:	4b49      	ldr	r3, [pc, #292]	; (8013edc <atan+0x32c>)
 8013db6:	429e      	cmp	r6, r3
 8013db8:	da1d      	bge.n	8013df6 <atan+0x246>
 8013dba:	ee10 0a10 	vmov	r0, s0
 8013dbe:	4b48      	ldr	r3, [pc, #288]	; (8013ee0 <atan+0x330>)
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	4629      	mov	r1, r5
 8013dc4:	f7ec fa78 	bl	80002b8 <__aeabi_dsub>
 8013dc8:	4b45      	ldr	r3, [pc, #276]	; (8013ee0 <atan+0x330>)
 8013dca:	4606      	mov	r6, r0
 8013dcc:	460f      	mov	r7, r1
 8013dce:	2200      	movs	r2, #0
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	4629      	mov	r1, r5
 8013dd4:	f7ec fc28 	bl	8000628 <__aeabi_dmul>
 8013dd8:	4b3e      	ldr	r3, [pc, #248]	; (8013ed4 <atan+0x324>)
 8013dda:	2200      	movs	r2, #0
 8013ddc:	f7ec fa6e 	bl	80002bc <__adddf3>
 8013de0:	4602      	mov	r2, r0
 8013de2:	460b      	mov	r3, r1
 8013de4:	4630      	mov	r0, r6
 8013de6:	4639      	mov	r1, r7
 8013de8:	f7ec fd48 	bl	800087c <__aeabi_ddiv>
 8013dec:	f04f 0a02 	mov.w	sl, #2
 8013df0:	4604      	mov	r4, r0
 8013df2:	460d      	mov	r5, r1
 8013df4:	e743      	b.n	8013c7e <atan+0xce>
 8013df6:	462b      	mov	r3, r5
 8013df8:	ee10 2a10 	vmov	r2, s0
 8013dfc:	4939      	ldr	r1, [pc, #228]	; (8013ee4 <atan+0x334>)
 8013dfe:	2000      	movs	r0, #0
 8013e00:	f7ec fd3c 	bl	800087c <__aeabi_ddiv>
 8013e04:	f04f 0a03 	mov.w	sl, #3
 8013e08:	4604      	mov	r4, r0
 8013e0a:	460d      	mov	r5, r1
 8013e0c:	e737      	b.n	8013c7e <atan+0xce>
 8013e0e:	4b36      	ldr	r3, [pc, #216]	; (8013ee8 <atan+0x338>)
 8013e10:	4e36      	ldr	r6, [pc, #216]	; (8013eec <atan+0x33c>)
 8013e12:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8013e16:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8013e1a:	e9da 2300 	ldrd	r2, r3, [sl]
 8013e1e:	f7ec fa4b 	bl	80002b8 <__aeabi_dsub>
 8013e22:	4622      	mov	r2, r4
 8013e24:	462b      	mov	r3, r5
 8013e26:	f7ec fa47 	bl	80002b8 <__aeabi_dsub>
 8013e2a:	4602      	mov	r2, r0
 8013e2c:	460b      	mov	r3, r1
 8013e2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013e32:	f7ec fa41 	bl	80002b8 <__aeabi_dsub>
 8013e36:	f1bb 0f00 	cmp.w	fp, #0
 8013e3a:	4604      	mov	r4, r0
 8013e3c:	460d      	mov	r5, r1
 8013e3e:	f6bf aed6 	bge.w	8013bee <atan+0x3e>
 8013e42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e46:	461d      	mov	r5, r3
 8013e48:	e6d1      	b.n	8013bee <atan+0x3e>
 8013e4a:	a51d      	add	r5, pc, #116	; (adr r5, 8013ec0 <atan+0x310>)
 8013e4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013e50:	e6cd      	b.n	8013bee <atan+0x3e>
 8013e52:	bf00      	nop
 8013e54:	f3af 8000 	nop.w
 8013e58:	54442d18 	.word	0x54442d18
 8013e5c:	bff921fb 	.word	0xbff921fb
 8013e60:	8800759c 	.word	0x8800759c
 8013e64:	7e37e43c 	.word	0x7e37e43c
 8013e68:	e322da11 	.word	0xe322da11
 8013e6c:	3f90ad3a 	.word	0x3f90ad3a
 8013e70:	24760deb 	.word	0x24760deb
 8013e74:	3fa97b4b 	.word	0x3fa97b4b
 8013e78:	a0d03d51 	.word	0xa0d03d51
 8013e7c:	3fb10d66 	.word	0x3fb10d66
 8013e80:	c54c206e 	.word	0xc54c206e
 8013e84:	3fb745cd 	.word	0x3fb745cd
 8013e88:	920083ff 	.word	0x920083ff
 8013e8c:	3fc24924 	.word	0x3fc24924
 8013e90:	5555550d 	.word	0x5555550d
 8013e94:	3fd55555 	.word	0x3fd55555
 8013e98:	2c6a6c2f 	.word	0x2c6a6c2f
 8013e9c:	bfa2b444 	.word	0xbfa2b444
 8013ea0:	52defd9a 	.word	0x52defd9a
 8013ea4:	3fadde2d 	.word	0x3fadde2d
 8013ea8:	af749a6d 	.word	0xaf749a6d
 8013eac:	3fb3b0f2 	.word	0x3fb3b0f2
 8013eb0:	fe231671 	.word	0xfe231671
 8013eb4:	3fbc71c6 	.word	0x3fbc71c6
 8013eb8:	9998ebc4 	.word	0x9998ebc4
 8013ebc:	3fc99999 	.word	0x3fc99999
 8013ec0:	54442d18 	.word	0x54442d18
 8013ec4:	3ff921fb 	.word	0x3ff921fb
 8013ec8:	440fffff 	.word	0x440fffff
 8013ecc:	7ff00000 	.word	0x7ff00000
 8013ed0:	3fdbffff 	.word	0x3fdbffff
 8013ed4:	3ff00000 	.word	0x3ff00000
 8013ed8:	3ff2ffff 	.word	0x3ff2ffff
 8013edc:	40038000 	.word	0x40038000
 8013ee0:	3ff80000 	.word	0x3ff80000
 8013ee4:	bff00000 	.word	0xbff00000
 8013ee8:	08014af8 	.word	0x08014af8
 8013eec:	08014ad8 	.word	0x08014ad8

08013ef0 <fabs>:
 8013ef0:	ec51 0b10 	vmov	r0, r1, d0
 8013ef4:	ee10 2a10 	vmov	r2, s0
 8013ef8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013efc:	ec43 2b10 	vmov	d0, r2, r3
 8013f00:	4770      	bx	lr

08013f02 <finite>:
 8013f02:	b082      	sub	sp, #8
 8013f04:	ed8d 0b00 	vstr	d0, [sp]
 8013f08:	9801      	ldr	r0, [sp, #4]
 8013f0a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013f0e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013f12:	0fc0      	lsrs	r0, r0, #31
 8013f14:	b002      	add	sp, #8
 8013f16:	4770      	bx	lr

08013f18 <floor>:
 8013f18:	ec51 0b10 	vmov	r0, r1, d0
 8013f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013f24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013f28:	2e13      	cmp	r6, #19
 8013f2a:	ee10 5a10 	vmov	r5, s0
 8013f2e:	ee10 8a10 	vmov	r8, s0
 8013f32:	460c      	mov	r4, r1
 8013f34:	dc32      	bgt.n	8013f9c <floor+0x84>
 8013f36:	2e00      	cmp	r6, #0
 8013f38:	da14      	bge.n	8013f64 <floor+0x4c>
 8013f3a:	a333      	add	r3, pc, #204	; (adr r3, 8014008 <floor+0xf0>)
 8013f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f40:	f7ec f9bc 	bl	80002bc <__adddf3>
 8013f44:	2200      	movs	r2, #0
 8013f46:	2300      	movs	r3, #0
 8013f48:	f7ec fdfe 	bl	8000b48 <__aeabi_dcmpgt>
 8013f4c:	b138      	cbz	r0, 8013f5e <floor+0x46>
 8013f4e:	2c00      	cmp	r4, #0
 8013f50:	da57      	bge.n	8014002 <floor+0xea>
 8013f52:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013f56:	431d      	orrs	r5, r3
 8013f58:	d001      	beq.n	8013f5e <floor+0x46>
 8013f5a:	4c2d      	ldr	r4, [pc, #180]	; (8014010 <floor+0xf8>)
 8013f5c:	2500      	movs	r5, #0
 8013f5e:	4621      	mov	r1, r4
 8013f60:	4628      	mov	r0, r5
 8013f62:	e025      	b.n	8013fb0 <floor+0x98>
 8013f64:	4f2b      	ldr	r7, [pc, #172]	; (8014014 <floor+0xfc>)
 8013f66:	4137      	asrs	r7, r6
 8013f68:	ea01 0307 	and.w	r3, r1, r7
 8013f6c:	4303      	orrs	r3, r0
 8013f6e:	d01f      	beq.n	8013fb0 <floor+0x98>
 8013f70:	a325      	add	r3, pc, #148	; (adr r3, 8014008 <floor+0xf0>)
 8013f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f76:	f7ec f9a1 	bl	80002bc <__adddf3>
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	f7ec fde3 	bl	8000b48 <__aeabi_dcmpgt>
 8013f82:	2800      	cmp	r0, #0
 8013f84:	d0eb      	beq.n	8013f5e <floor+0x46>
 8013f86:	2c00      	cmp	r4, #0
 8013f88:	bfbe      	ittt	lt
 8013f8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013f8e:	fa43 f606 	asrlt.w	r6, r3, r6
 8013f92:	19a4      	addlt	r4, r4, r6
 8013f94:	ea24 0407 	bic.w	r4, r4, r7
 8013f98:	2500      	movs	r5, #0
 8013f9a:	e7e0      	b.n	8013f5e <floor+0x46>
 8013f9c:	2e33      	cmp	r6, #51	; 0x33
 8013f9e:	dd0b      	ble.n	8013fb8 <floor+0xa0>
 8013fa0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013fa4:	d104      	bne.n	8013fb0 <floor+0x98>
 8013fa6:	ee10 2a10 	vmov	r2, s0
 8013faa:	460b      	mov	r3, r1
 8013fac:	f7ec f986 	bl	80002bc <__adddf3>
 8013fb0:	ec41 0b10 	vmov	d0, r0, r1
 8013fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fb8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8013fc0:	fa23 f707 	lsr.w	r7, r3, r7
 8013fc4:	4207      	tst	r7, r0
 8013fc6:	d0f3      	beq.n	8013fb0 <floor+0x98>
 8013fc8:	a30f      	add	r3, pc, #60	; (adr r3, 8014008 <floor+0xf0>)
 8013fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fce:	f7ec f975 	bl	80002bc <__adddf3>
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	f7ec fdb7 	bl	8000b48 <__aeabi_dcmpgt>
 8013fda:	2800      	cmp	r0, #0
 8013fdc:	d0bf      	beq.n	8013f5e <floor+0x46>
 8013fde:	2c00      	cmp	r4, #0
 8013fe0:	da02      	bge.n	8013fe8 <floor+0xd0>
 8013fe2:	2e14      	cmp	r6, #20
 8013fe4:	d103      	bne.n	8013fee <floor+0xd6>
 8013fe6:	3401      	adds	r4, #1
 8013fe8:	ea25 0507 	bic.w	r5, r5, r7
 8013fec:	e7b7      	b.n	8013f5e <floor+0x46>
 8013fee:	2301      	movs	r3, #1
 8013ff0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013ff4:	fa03 f606 	lsl.w	r6, r3, r6
 8013ff8:	4435      	add	r5, r6
 8013ffa:	4545      	cmp	r5, r8
 8013ffc:	bf38      	it	cc
 8013ffe:	18e4      	addcc	r4, r4, r3
 8014000:	e7f2      	b.n	8013fe8 <floor+0xd0>
 8014002:	2500      	movs	r5, #0
 8014004:	462c      	mov	r4, r5
 8014006:	e7aa      	b.n	8013f5e <floor+0x46>
 8014008:	8800759c 	.word	0x8800759c
 801400c:	7e37e43c 	.word	0x7e37e43c
 8014010:	bff00000 	.word	0xbff00000
 8014014:	000fffff 	.word	0x000fffff

08014018 <scalbn>:
 8014018:	b570      	push	{r4, r5, r6, lr}
 801401a:	ec55 4b10 	vmov	r4, r5, d0
 801401e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014022:	4606      	mov	r6, r0
 8014024:	462b      	mov	r3, r5
 8014026:	b99a      	cbnz	r2, 8014050 <scalbn+0x38>
 8014028:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801402c:	4323      	orrs	r3, r4
 801402e:	d036      	beq.n	801409e <scalbn+0x86>
 8014030:	4b39      	ldr	r3, [pc, #228]	; (8014118 <scalbn+0x100>)
 8014032:	4629      	mov	r1, r5
 8014034:	ee10 0a10 	vmov	r0, s0
 8014038:	2200      	movs	r2, #0
 801403a:	f7ec faf5 	bl	8000628 <__aeabi_dmul>
 801403e:	4b37      	ldr	r3, [pc, #220]	; (801411c <scalbn+0x104>)
 8014040:	429e      	cmp	r6, r3
 8014042:	4604      	mov	r4, r0
 8014044:	460d      	mov	r5, r1
 8014046:	da10      	bge.n	801406a <scalbn+0x52>
 8014048:	a32b      	add	r3, pc, #172	; (adr r3, 80140f8 <scalbn+0xe0>)
 801404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801404e:	e03a      	b.n	80140c6 <scalbn+0xae>
 8014050:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014054:	428a      	cmp	r2, r1
 8014056:	d10c      	bne.n	8014072 <scalbn+0x5a>
 8014058:	ee10 2a10 	vmov	r2, s0
 801405c:	4620      	mov	r0, r4
 801405e:	4629      	mov	r1, r5
 8014060:	f7ec f92c 	bl	80002bc <__adddf3>
 8014064:	4604      	mov	r4, r0
 8014066:	460d      	mov	r5, r1
 8014068:	e019      	b.n	801409e <scalbn+0x86>
 801406a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801406e:	460b      	mov	r3, r1
 8014070:	3a36      	subs	r2, #54	; 0x36
 8014072:	4432      	add	r2, r6
 8014074:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014078:	428a      	cmp	r2, r1
 801407a:	dd08      	ble.n	801408e <scalbn+0x76>
 801407c:	2d00      	cmp	r5, #0
 801407e:	a120      	add	r1, pc, #128	; (adr r1, 8014100 <scalbn+0xe8>)
 8014080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014084:	da1c      	bge.n	80140c0 <scalbn+0xa8>
 8014086:	a120      	add	r1, pc, #128	; (adr r1, 8014108 <scalbn+0xf0>)
 8014088:	e9d1 0100 	ldrd	r0, r1, [r1]
 801408c:	e018      	b.n	80140c0 <scalbn+0xa8>
 801408e:	2a00      	cmp	r2, #0
 8014090:	dd08      	ble.n	80140a4 <scalbn+0x8c>
 8014092:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014096:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801409a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801409e:	ec45 4b10 	vmov	d0, r4, r5
 80140a2:	bd70      	pop	{r4, r5, r6, pc}
 80140a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80140a8:	da19      	bge.n	80140de <scalbn+0xc6>
 80140aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80140ae:	429e      	cmp	r6, r3
 80140b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80140b4:	dd0a      	ble.n	80140cc <scalbn+0xb4>
 80140b6:	a112      	add	r1, pc, #72	; (adr r1, 8014100 <scalbn+0xe8>)
 80140b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d1e2      	bne.n	8014086 <scalbn+0x6e>
 80140c0:	a30f      	add	r3, pc, #60	; (adr r3, 8014100 <scalbn+0xe8>)
 80140c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c6:	f7ec faaf 	bl	8000628 <__aeabi_dmul>
 80140ca:	e7cb      	b.n	8014064 <scalbn+0x4c>
 80140cc:	a10a      	add	r1, pc, #40	; (adr r1, 80140f8 <scalbn+0xe0>)
 80140ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d0b8      	beq.n	8014048 <scalbn+0x30>
 80140d6:	a10e      	add	r1, pc, #56	; (adr r1, 8014110 <scalbn+0xf8>)
 80140d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140dc:	e7b4      	b.n	8014048 <scalbn+0x30>
 80140de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80140e2:	3236      	adds	r2, #54	; 0x36
 80140e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80140e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80140ec:	4620      	mov	r0, r4
 80140ee:	4b0c      	ldr	r3, [pc, #48]	; (8014120 <scalbn+0x108>)
 80140f0:	2200      	movs	r2, #0
 80140f2:	e7e8      	b.n	80140c6 <scalbn+0xae>
 80140f4:	f3af 8000 	nop.w
 80140f8:	c2f8f359 	.word	0xc2f8f359
 80140fc:	01a56e1f 	.word	0x01a56e1f
 8014100:	8800759c 	.word	0x8800759c
 8014104:	7e37e43c 	.word	0x7e37e43c
 8014108:	8800759c 	.word	0x8800759c
 801410c:	fe37e43c 	.word	0xfe37e43c
 8014110:	c2f8f359 	.word	0xc2f8f359
 8014114:	81a56e1f 	.word	0x81a56e1f
 8014118:	43500000 	.word	0x43500000
 801411c:	ffff3cb0 	.word	0xffff3cb0
 8014120:	3c900000 	.word	0x3c900000

08014124 <_init>:
 8014124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014126:	bf00      	nop
 8014128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801412a:	bc08      	pop	{r3}
 801412c:	469e      	mov	lr, r3
 801412e:	4770      	bx	lr

08014130 <_fini>:
 8014130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014132:	bf00      	nop
 8014134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014136:	bc08      	pop	{r3}
 8014138:	469e      	mov	lr, r3
 801413a:	4770      	bx	lr
