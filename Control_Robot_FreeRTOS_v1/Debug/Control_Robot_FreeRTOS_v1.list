
Control_Robot_FreeRTOS_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a50  08013f20  08013f20  00023f20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014970  08014970  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  08014970  08014970  00024970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014978  08014978  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014978  08014978  00024978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801497c  0801497c  0002497c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08014980  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c2e8  20000218  08014b94  00030218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2001c500  08014b94  0003c500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010051  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dff  00000000  00000000  00040295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00043098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  00043d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c40  00000000  00000000  00044860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001194e  00000000  00000000  000584a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062de5  00000000  00000000  00069dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccbd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005064  00000000  00000000  000ccc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013f04 	.word	0x08013f04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08013f04 	.word	0x08013f04

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_frsub>:
 8000cb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	e002      	b.n	8000cc4 <__addsf3>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fsub>:
 8000cc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cc4 <__addsf3>:
 8000cc4:	0042      	lsls	r2, r0, #1
 8000cc6:	bf1f      	itttt	ne
 8000cc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ccc:	ea92 0f03 	teqne	r2, r3
 8000cd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd8:	d06a      	beq.n	8000db0 <__addsf3+0xec>
 8000cda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ce2:	bfc1      	itttt	gt
 8000ce4:	18d2      	addgt	r2, r2, r3
 8000ce6:	4041      	eorgt	r1, r0
 8000ce8:	4048      	eorgt	r0, r1
 8000cea:	4041      	eorgt	r1, r0
 8000cec:	bfb8      	it	lt
 8000cee:	425b      	neglt	r3, r3
 8000cf0:	2b19      	cmp	r3, #25
 8000cf2:	bf88      	it	hi
 8000cf4:	4770      	bxhi	lr
 8000cf6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4249      	negne	r1, r1
 8000d16:	ea92 0f03 	teq	r2, r3
 8000d1a:	d03f      	beq.n	8000d9c <__addsf3+0xd8>
 8000d1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d20:	fa41 fc03 	asr.w	ip, r1, r3
 8000d24:	eb10 000c 	adds.w	r0, r0, ip
 8000d28:	f1c3 0320 	rsb	r3, r3, #32
 8000d2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__addsf3+0x78>
 8000d36:	4249      	negs	r1, r1
 8000d38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d40:	d313      	bcc.n	8000d6a <__addsf3+0xa6>
 8000d42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d46:	d306      	bcc.n	8000d56 <__addsf3+0x92>
 8000d48:	0840      	lsrs	r0, r0, #1
 8000d4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d4e:	f102 0201 	add.w	r2, r2, #1
 8000d52:	2afe      	cmp	r2, #254	; 0xfe
 8000d54:	d251      	bcs.n	8000dfa <__addsf3+0x136>
 8000d56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5e:	bf08      	it	eq
 8000d60:	f020 0001 	biceq.w	r0, r0, #1
 8000d64:	ea40 0003 	orr.w	r0, r0, r3
 8000d68:	4770      	bx	lr
 8000d6a:	0049      	lsls	r1, r1, #1
 8000d6c:	eb40 0000 	adc.w	r0, r0, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	bf28      	it	cs
 8000d74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d78:	d2ed      	bcs.n	8000d56 <__addsf3+0x92>
 8000d7a:	fab0 fc80 	clz	ip, r0
 8000d7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d82:	ebb2 020c 	subs.w	r2, r2, ip
 8000d86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d8a:	bfaa      	itet	ge
 8000d8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d90:	4252      	neglt	r2, r2
 8000d92:	4318      	orrge	r0, r3
 8000d94:	bfbc      	itt	lt
 8000d96:	40d0      	lsrlt	r0, r2
 8000d98:	4318      	orrlt	r0, r3
 8000d9a:	4770      	bx	lr
 8000d9c:	f092 0f00 	teq	r2, #0
 8000da0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000da4:	bf06      	itte	eq
 8000da6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000daa:	3201      	addeq	r2, #1
 8000dac:	3b01      	subne	r3, #1
 8000dae:	e7b5      	b.n	8000d1c <__addsf3+0x58>
 8000db0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db8:	bf18      	it	ne
 8000dba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dbe:	d021      	beq.n	8000e04 <__addsf3+0x140>
 8000dc0:	ea92 0f03 	teq	r2, r3
 8000dc4:	d004      	beq.n	8000dd0 <__addsf3+0x10c>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	bf08      	it	eq
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	4770      	bx	lr
 8000dd0:	ea90 0f01 	teq	r0, r1
 8000dd4:	bf1c      	itt	ne
 8000dd6:	2000      	movne	r0, #0
 8000dd8:	4770      	bxne	lr
 8000dda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dde:	d104      	bne.n	8000dea <__addsf3+0x126>
 8000de0:	0040      	lsls	r0, r0, #1
 8000de2:	bf28      	it	cs
 8000de4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dee:	bf3c      	itt	cc
 8000df0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000df4:	4770      	bxcc	lr
 8000df6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	4770      	bx	lr
 8000e04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e08:	bf16      	itet	ne
 8000e0a:	4608      	movne	r0, r1
 8000e0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e10:	4601      	movne	r1, r0
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	bf06      	itte	eq
 8000e16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e1a:	ea90 0f01 	teqeq	r0, r1
 8000e1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_ui2f>:
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e004      	b.n	8000e34 <__aeabi_i2f+0x8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_i2f>:
 8000e2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e30:	bf48      	it	mi
 8000e32:	4240      	negmi	r0, r0
 8000e34:	ea5f 0c00 	movs.w	ip, r0
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e40:	4601      	mov	r1, r0
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	e01c      	b.n	8000e82 <__aeabi_l2f+0x2a>

08000e48 <__aeabi_ul2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e00a      	b.n	8000e6c <__aeabi_l2f+0x14>
 8000e56:	bf00      	nop

08000e58 <__aeabi_l2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_l2f+0x14>
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	ea5f 0c01 	movs.w	ip, r1
 8000e70:	bf02      	ittt	eq
 8000e72:	4684      	moveq	ip, r0
 8000e74:	4601      	moveq	r1, r0
 8000e76:	2000      	moveq	r0, #0
 8000e78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e7c:	bf08      	it	eq
 8000e7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e86:	fabc f28c 	clz	r2, ip
 8000e8a:	3a08      	subs	r2, #8
 8000e8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e90:	db10      	blt.n	8000eb4 <__aeabi_l2f+0x5c>
 8000e92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e96:	4463      	add	r3, ip
 8000e98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ea4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f102 0220 	add.w	r2, r2, #32
 8000eb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ec4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_ldivmod>:
 8000ed4:	b97b      	cbnz	r3, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed6:	b972      	cbnz	r2, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	bfbe      	ittt	lt
 8000edc:	2000      	movlt	r0, #0
 8000ede:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ee2:	e006      	blt.n	8000ef2 <__aeabi_ldivmod+0x1e>
 8000ee4:	bf08      	it	eq
 8000ee6:	2800      	cmpeq	r0, #0
 8000ee8:	bf1c      	itt	ne
 8000eea:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000eee:	f04f 30ff 	movne.w	r0, #4294967295
 8000ef2:	f000 b9dd 	b.w	80012b0 <__aeabi_idiv0>
 8000ef6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000efa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000efe:	2900      	cmp	r1, #0
 8000f00:	db09      	blt.n	8000f16 <__aeabi_ldivmod+0x42>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db1a      	blt.n	8000f3c <__aeabi_ldivmod+0x68>
 8000f06:	f000 f86b 	bl	8000fe0 <__udivmoddi4>
 8000f0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f12:	b004      	add	sp, #16
 8000f14:	4770      	bx	lr
 8000f16:	4240      	negs	r0, r0
 8000f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db1b      	blt.n	8000f58 <__aeabi_ldivmod+0x84>
 8000f20:	f000 f85e 	bl	8000fe0 <__udivmoddi4>
 8000f24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2c:	b004      	add	sp, #16
 8000f2e:	4240      	negs	r0, r0
 8000f30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f34:	4252      	negs	r2, r2
 8000f36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f3a:	4770      	bx	lr
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	f000 f84d 	bl	8000fe0 <__udivmoddi4>
 8000f46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f4e:	b004      	add	sp, #16
 8000f50:	4240      	negs	r0, r0
 8000f52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f56:	4770      	bx	lr
 8000f58:	4252      	negs	r2, r2
 8000f5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f5e:	f000 f83f 	bl	8000fe0 <__udivmoddi4>
 8000f62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f6a:	b004      	add	sp, #16
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_d2lz>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	2200      	movs	r2, #0
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	f7ff fdc5 	bl	8000b0c <__aeabi_dcmplt>
 8000f82:	b928      	cbnz	r0, 8000f90 <__aeabi_d2lz+0x1c>
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f8c:	f000 b80a 	b.w	8000fa4 <__aeabi_d2ulz>
 8000f90:	4620      	mov	r0, r4
 8000f92:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f96:	f000 f805 	bl	8000fa4 <__aeabi_d2ulz>
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_d2ulz>:
 8000fa4:	b5d0      	push	{r4, r6, r7, lr}
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__aeabi_d2ulz+0x34>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4606      	mov	r6, r0
 8000fac:	460f      	mov	r7, r1
 8000fae:	f7ff fb3b 	bl	8000628 <__aeabi_dmul>
 8000fb2:	f7ff fe11 	bl	8000bd8 <__aeabi_d2uiz>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	f7ff fabc 	bl	8000534 <__aeabi_ui2d>
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <__aeabi_d2ulz+0x38>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f7ff fb32 	bl	8000628 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4630      	mov	r0, r6
 8000fca:	4639      	mov	r1, r7
 8000fcc:	f7ff f974 	bl	80002b8 <__aeabi_dsub>
 8000fd0:	f7ff fe02 	bl	8000bd8 <__aeabi_d2uiz>
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	bdd0      	pop	{r4, r6, r7, pc}
 8000fd8:	3df00000 	.word	0x3df00000
 8000fdc:	41f00000 	.word	0x41f00000

08000fe0 <__udivmoddi4>:
 8000fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe4:	9d08      	ldr	r5, [sp, #32]
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	468e      	mov	lr, r1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d14d      	bne.n	800108a <__udivmoddi4+0xaa>
 8000fee:	428a      	cmp	r2, r1
 8000ff0:	4694      	mov	ip, r2
 8000ff2:	d969      	bls.n	80010c8 <__udivmoddi4+0xe8>
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	b152      	cbz	r2, 8001010 <__udivmoddi4+0x30>
 8000ffa:	fa01 f302 	lsl.w	r3, r1, r2
 8000ffe:	f1c2 0120 	rsb	r1, r2, #32
 8001002:	fa20 f101 	lsr.w	r1, r0, r1
 8001006:	fa0c fc02 	lsl.w	ip, ip, r2
 800100a:	ea41 0e03 	orr.w	lr, r1, r3
 800100e:	4094      	lsls	r4, r2
 8001010:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001014:	0c21      	lsrs	r1, r4, #16
 8001016:	fbbe f6f8 	udiv	r6, lr, r8
 800101a:	fa1f f78c 	uxth.w	r7, ip
 800101e:	fb08 e316 	mls	r3, r8, r6, lr
 8001022:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001026:	fb06 f107 	mul.w	r1, r6, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d90a      	bls.n	8001044 <__udivmoddi4+0x64>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f106 30ff 	add.w	r0, r6, #4294967295
 8001036:	f080 811f 	bcs.w	8001278 <__udivmoddi4+0x298>
 800103a:	4299      	cmp	r1, r3
 800103c:	f240 811c 	bls.w	8001278 <__udivmoddi4+0x298>
 8001040:	3e02      	subs	r6, #2
 8001042:	4463      	add	r3, ip
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	b2a4      	uxth	r4, r4
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3310 	mls	r3, r8, r0, r3
 8001050:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001054:	fb00 f707 	mul.w	r7, r0, r7
 8001058:	42a7      	cmp	r7, r4
 800105a:	d90a      	bls.n	8001072 <__udivmoddi4+0x92>
 800105c:	eb1c 0404 	adds.w	r4, ip, r4
 8001060:	f100 33ff 	add.w	r3, r0, #4294967295
 8001064:	f080 810a 	bcs.w	800127c <__udivmoddi4+0x29c>
 8001068:	42a7      	cmp	r7, r4
 800106a:	f240 8107 	bls.w	800127c <__udivmoddi4+0x29c>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001076:	1be4      	subs	r4, r4, r7
 8001078:	2600      	movs	r6, #0
 800107a:	b11d      	cbz	r5, 8001084 <__udivmoddi4+0xa4>
 800107c:	40d4      	lsrs	r4, r2
 800107e:	2300      	movs	r3, #0
 8001080:	e9c5 4300 	strd	r4, r3, [r5]
 8001084:	4631      	mov	r1, r6
 8001086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108a:	428b      	cmp	r3, r1
 800108c:	d909      	bls.n	80010a2 <__udivmoddi4+0xc2>
 800108e:	2d00      	cmp	r5, #0
 8001090:	f000 80ef 	beq.w	8001272 <__udivmoddi4+0x292>
 8001094:	2600      	movs	r6, #0
 8001096:	e9c5 0100 	strd	r0, r1, [r5]
 800109a:	4630      	mov	r0, r6
 800109c:	4631      	mov	r1, r6
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	fab3 f683 	clz	r6, r3
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d14a      	bne.n	8001140 <__udivmoddi4+0x160>
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d302      	bcc.n	80010b4 <__udivmoddi4+0xd4>
 80010ae:	4282      	cmp	r2, r0
 80010b0:	f200 80f9 	bhi.w	80012a6 <__udivmoddi4+0x2c6>
 80010b4:	1a84      	subs	r4, r0, r2
 80010b6:	eb61 0303 	sbc.w	r3, r1, r3
 80010ba:	2001      	movs	r0, #1
 80010bc:	469e      	mov	lr, r3
 80010be:	2d00      	cmp	r5, #0
 80010c0:	d0e0      	beq.n	8001084 <__udivmoddi4+0xa4>
 80010c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80010c6:	e7dd      	b.n	8001084 <__udivmoddi4+0xa4>
 80010c8:	b902      	cbnz	r2, 80010cc <__udivmoddi4+0xec>
 80010ca:	deff      	udf	#255	; 0xff
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f040 8092 	bne.w	80011fa <__udivmoddi4+0x21a>
 80010d6:	eba1 010c 	sub.w	r1, r1, ip
 80010da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010de:	fa1f fe8c 	uxth.w	lr, ip
 80010e2:	2601      	movs	r6, #1
 80010e4:	0c20      	lsrs	r0, r4, #16
 80010e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80010ea:	fb07 1113 	mls	r1, r7, r3, r1
 80010ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010f2:	fb0e f003 	mul.w	r0, lr, r3
 80010f6:	4288      	cmp	r0, r1
 80010f8:	d908      	bls.n	800110c <__udivmoddi4+0x12c>
 80010fa:	eb1c 0101 	adds.w	r1, ip, r1
 80010fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8001102:	d202      	bcs.n	800110a <__udivmoddi4+0x12a>
 8001104:	4288      	cmp	r0, r1
 8001106:	f200 80cb 	bhi.w	80012a0 <__udivmoddi4+0x2c0>
 800110a:	4643      	mov	r3, r8
 800110c:	1a09      	subs	r1, r1, r0
 800110e:	b2a4      	uxth	r4, r4
 8001110:	fbb1 f0f7 	udiv	r0, r1, r7
 8001114:	fb07 1110 	mls	r1, r7, r0, r1
 8001118:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800111c:	fb0e fe00 	mul.w	lr, lr, r0
 8001120:	45a6      	cmp	lr, r4
 8001122:	d908      	bls.n	8001136 <__udivmoddi4+0x156>
 8001124:	eb1c 0404 	adds.w	r4, ip, r4
 8001128:	f100 31ff 	add.w	r1, r0, #4294967295
 800112c:	d202      	bcs.n	8001134 <__udivmoddi4+0x154>
 800112e:	45a6      	cmp	lr, r4
 8001130:	f200 80bb 	bhi.w	80012aa <__udivmoddi4+0x2ca>
 8001134:	4608      	mov	r0, r1
 8001136:	eba4 040e 	sub.w	r4, r4, lr
 800113a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800113e:	e79c      	b.n	800107a <__udivmoddi4+0x9a>
 8001140:	f1c6 0720 	rsb	r7, r6, #32
 8001144:	40b3      	lsls	r3, r6
 8001146:	fa22 fc07 	lsr.w	ip, r2, r7
 800114a:	ea4c 0c03 	orr.w	ip, ip, r3
 800114e:	fa20 f407 	lsr.w	r4, r0, r7
 8001152:	fa01 f306 	lsl.w	r3, r1, r6
 8001156:	431c      	orrs	r4, r3
 8001158:	40f9      	lsrs	r1, r7
 800115a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800115e:	fa00 f306 	lsl.w	r3, r0, r6
 8001162:	fbb1 f8f9 	udiv	r8, r1, r9
 8001166:	0c20      	lsrs	r0, r4, #16
 8001168:	fa1f fe8c 	uxth.w	lr, ip
 800116c:	fb09 1118 	mls	r1, r9, r8, r1
 8001170:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001174:	fb08 f00e 	mul.w	r0, r8, lr
 8001178:	4288      	cmp	r0, r1
 800117a:	fa02 f206 	lsl.w	r2, r2, r6
 800117e:	d90b      	bls.n	8001198 <__udivmoddi4+0x1b8>
 8001180:	eb1c 0101 	adds.w	r1, ip, r1
 8001184:	f108 3aff 	add.w	sl, r8, #4294967295
 8001188:	f080 8088 	bcs.w	800129c <__udivmoddi4+0x2bc>
 800118c:	4288      	cmp	r0, r1
 800118e:	f240 8085 	bls.w	800129c <__udivmoddi4+0x2bc>
 8001192:	f1a8 0802 	sub.w	r8, r8, #2
 8001196:	4461      	add	r1, ip
 8001198:	1a09      	subs	r1, r1, r0
 800119a:	b2a4      	uxth	r4, r4
 800119c:	fbb1 f0f9 	udiv	r0, r1, r9
 80011a0:	fb09 1110 	mls	r1, r9, r0, r1
 80011a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ac:	458e      	cmp	lr, r1
 80011ae:	d908      	bls.n	80011c2 <__udivmoddi4+0x1e2>
 80011b0:	eb1c 0101 	adds.w	r1, ip, r1
 80011b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011b8:	d26c      	bcs.n	8001294 <__udivmoddi4+0x2b4>
 80011ba:	458e      	cmp	lr, r1
 80011bc:	d96a      	bls.n	8001294 <__udivmoddi4+0x2b4>
 80011be:	3802      	subs	r0, #2
 80011c0:	4461      	add	r1, ip
 80011c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011c6:	fba0 9402 	umull	r9, r4, r0, r2
 80011ca:	eba1 010e 	sub.w	r1, r1, lr
 80011ce:	42a1      	cmp	r1, r4
 80011d0:	46c8      	mov	r8, r9
 80011d2:	46a6      	mov	lr, r4
 80011d4:	d356      	bcc.n	8001284 <__udivmoddi4+0x2a4>
 80011d6:	d053      	beq.n	8001280 <__udivmoddi4+0x2a0>
 80011d8:	b15d      	cbz	r5, 80011f2 <__udivmoddi4+0x212>
 80011da:	ebb3 0208 	subs.w	r2, r3, r8
 80011de:	eb61 010e 	sbc.w	r1, r1, lr
 80011e2:	fa01 f707 	lsl.w	r7, r1, r7
 80011e6:	fa22 f306 	lsr.w	r3, r2, r6
 80011ea:	40f1      	lsrs	r1, r6
 80011ec:	431f      	orrs	r7, r3
 80011ee:	e9c5 7100 	strd	r7, r1, [r5]
 80011f2:	2600      	movs	r6, #0
 80011f4:	4631      	mov	r1, r6
 80011f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011fa:	f1c2 0320 	rsb	r3, r2, #32
 80011fe:	40d8      	lsrs	r0, r3
 8001200:	fa0c fc02 	lsl.w	ip, ip, r2
 8001204:	fa21 f303 	lsr.w	r3, r1, r3
 8001208:	4091      	lsls	r1, r2
 800120a:	4301      	orrs	r1, r0
 800120c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001210:	fa1f fe8c 	uxth.w	lr, ip
 8001214:	fbb3 f0f7 	udiv	r0, r3, r7
 8001218:	fb07 3610 	mls	r6, r7, r0, r3
 800121c:	0c0b      	lsrs	r3, r1, #16
 800121e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001222:	fb00 f60e 	mul.w	r6, r0, lr
 8001226:	429e      	cmp	r6, r3
 8001228:	fa04 f402 	lsl.w	r4, r4, r2
 800122c:	d908      	bls.n	8001240 <__udivmoddi4+0x260>
 800122e:	eb1c 0303 	adds.w	r3, ip, r3
 8001232:	f100 38ff 	add.w	r8, r0, #4294967295
 8001236:	d22f      	bcs.n	8001298 <__udivmoddi4+0x2b8>
 8001238:	429e      	cmp	r6, r3
 800123a:	d92d      	bls.n	8001298 <__udivmoddi4+0x2b8>
 800123c:	3802      	subs	r0, #2
 800123e:	4463      	add	r3, ip
 8001240:	1b9b      	subs	r3, r3, r6
 8001242:	b289      	uxth	r1, r1
 8001244:	fbb3 f6f7 	udiv	r6, r3, r7
 8001248:	fb07 3316 	mls	r3, r7, r6, r3
 800124c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001250:	fb06 f30e 	mul.w	r3, r6, lr
 8001254:	428b      	cmp	r3, r1
 8001256:	d908      	bls.n	800126a <__udivmoddi4+0x28a>
 8001258:	eb1c 0101 	adds.w	r1, ip, r1
 800125c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001260:	d216      	bcs.n	8001290 <__udivmoddi4+0x2b0>
 8001262:	428b      	cmp	r3, r1
 8001264:	d914      	bls.n	8001290 <__udivmoddi4+0x2b0>
 8001266:	3e02      	subs	r6, #2
 8001268:	4461      	add	r1, ip
 800126a:	1ac9      	subs	r1, r1, r3
 800126c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001270:	e738      	b.n	80010e4 <__udivmoddi4+0x104>
 8001272:	462e      	mov	r6, r5
 8001274:	4628      	mov	r0, r5
 8001276:	e705      	b.n	8001084 <__udivmoddi4+0xa4>
 8001278:	4606      	mov	r6, r0
 800127a:	e6e3      	b.n	8001044 <__udivmoddi4+0x64>
 800127c:	4618      	mov	r0, r3
 800127e:	e6f8      	b.n	8001072 <__udivmoddi4+0x92>
 8001280:	454b      	cmp	r3, r9
 8001282:	d2a9      	bcs.n	80011d8 <__udivmoddi4+0x1f8>
 8001284:	ebb9 0802 	subs.w	r8, r9, r2
 8001288:	eb64 0e0c 	sbc.w	lr, r4, ip
 800128c:	3801      	subs	r0, #1
 800128e:	e7a3      	b.n	80011d8 <__udivmoddi4+0x1f8>
 8001290:	4646      	mov	r6, r8
 8001292:	e7ea      	b.n	800126a <__udivmoddi4+0x28a>
 8001294:	4620      	mov	r0, r4
 8001296:	e794      	b.n	80011c2 <__udivmoddi4+0x1e2>
 8001298:	4640      	mov	r0, r8
 800129a:	e7d1      	b.n	8001240 <__udivmoddi4+0x260>
 800129c:	46d0      	mov	r8, sl
 800129e:	e77b      	b.n	8001198 <__udivmoddi4+0x1b8>
 80012a0:	3b02      	subs	r3, #2
 80012a2:	4461      	add	r1, ip
 80012a4:	e732      	b.n	800110c <__udivmoddi4+0x12c>
 80012a6:	4630      	mov	r0, r6
 80012a8:	e709      	b.n	80010be <__udivmoddi4+0xde>
 80012aa:	4464      	add	r4, ip
 80012ac:	3802      	subs	r0, #2
 80012ae:	e742      	b.n	8001136 <__udivmoddi4+0x156>

080012b0 <__aeabi_idiv0>:
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop

080012b4 <aplicattion_A_Star>:
#include "A_Star.h"
#include <float.h>
#include <math.h>

//-----------------------------------------------Funciones para la implementacion de A Star------------------------------------------------------------------
uint8_t aplicattion_A_Star(file_cell_t file_Open[50], Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float start_x, float start_y, float goal_x, float goal_y) {
 80012b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b8:	b099      	sub	sp, #100	; 0x64
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80012be:	62b9      	str	r1, [r7, #40]	; 0x28
 80012c0:	4611      	mov	r1, r2
 80012c2:	461a      	mov	r2, r3
 80012c4:	ed87 0a08 	vstr	s0, [r7, #32]
 80012c8:	edc7 0a07 	vstr	s1, [r7, #28]
 80012cc:	ed87 1a06 	vstr	s2, [r7, #24]
 80012d0:	edc7 1a05 	vstr	s3, [r7, #20]
 80012d4:	460b      	mov	r3, r1
 80012d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012da:	4613      	mov	r3, r2
 80012dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  //Variables
  file_cell_t *ptrFile;                           //Puntero a la ficha de la secuencia actual de A Star
  uint64_t file_Open_Availability = 0b1;          //Conjunto de bits que indica que fichas abiertas estan disponibles para la comparacion
 80012e0:	f04f 0201 	mov.w	r2, #1
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  uint8_t bit_file_cell = 0;                      //bit de una ficha que indica su disponibilidad
 80012ec:	2300      	movs	r3, #0
 80012ee:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  uint8_t index_ptr = 0;                          //Indice de la ficha de la secuencia actual de A Star
 80012f2:	2300      	movs	r3, #0
 80012f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  float min_h;                                    //Valor minimo de la heuristica H
  uint8_t index_file_Open;                        //Indice de la ficha de la ficha abierta a crear

  //----------------Se crea la ficha inicial----------------
  //Se crea la ficha inicial
  file_Open[0].num_parent = 0;
 80012f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  file_Open[0].cost_g = 0.0f;
 8001300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  //Por medio de un puntero se asigna la ficha inicial
  ptrFile = &file_Open[0];
 800130a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  // ------------- Se identifica la celda inicial -----------
  for (int i = 0; i < row; i++) 
 800130e:	2300      	movs	r3, #0
 8001310:	643b      	str	r3, [r7, #64]	; 0x40
 8001312:	e04d      	b.n	80013b0 <aplicattion_A_Star+0xfc>
  {
    for (int j = 0; j < colum; j++) 
 8001314:	2300      	movs	r3, #0
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001318:	e042      	b.n	80013a0 <aplicattion_A_Star+0xec>
    {
      if (grid[i][j].coor_x == start_x && grid[i][j].coor_y == start_y) 
 800131a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800131c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001326:	441a      	add	r2, r3
 8001328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800132a:	2158      	movs	r1, #88	; 0x58
 800132c:	fb01 f303 	mul.w	r3, r1, r3
 8001330:	4413      	add	r3, r2
 8001332:	3304      	adds	r3, #4
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	ed97 7a08 	vldr	s14, [r7, #32]
 800133c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	d129      	bne.n	800139a <aplicattion_A_Star+0xe6>
 8001346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001348:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800134c:	fb02 f303 	mul.w	r3, r2, r3
 8001350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001352:	441a      	add	r2, r3
 8001354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001356:	2158      	movs	r1, #88	; 0x58
 8001358:	fb01 f303 	mul.w	r3, r1, r3
 800135c:	4413      	add	r3, r2
 800135e:	3308      	adds	r3, #8
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	ed97 7a07 	vldr	s14, [r7, #28]
 8001368:	eeb4 7a67 	vcmp.f32	s14, s15
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	d113      	bne.n	800139a <aplicattion_A_Star+0xe6>
      {
        ptrFile->ptrCell_file = &grid[i][j];  
 8001372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001374:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800137e:	441a      	add	r2, r3
 8001380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001382:	2158      	movs	r1, #88	; 0x58
 8001384:	fb01 f303 	mul.w	r3, r1, r3
 8001388:	441a      	add	r2, r3
 800138a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800138c:	601a      	str	r2, [r3, #0]
        ptrFile->ptrCell_file->status  = OPEN;
 800138e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        break;
 8001398:	e007      	b.n	80013aa <aplicattion_A_Star+0xf6>
    for (int j = 0; j < colum; j++) 
 800139a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800139c:	3301      	adds	r3, #1
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dbb7      	blt.n	800131a <aplicattion_A_Star+0x66>
  for (int i = 0; i < row; i++) 
 80013aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013ac:	3301      	adds	r3, #1
 80013ae:	643b      	str	r3, [r7, #64]	; 0x40
 80013b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013b6:	429a      	cmp	r2, r3
 80013b8:	dbac      	blt.n	8001314 <aplicattion_A_Star+0x60>
    }
  }

  while (1) {
    // Inicializamos variables
    min_f = DBL_MAX;
 80013ba:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80013be:	64bb      	str	r3, [r7, #72]	; 0x48
    min_h = DBL_MAX;
 80013c0:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80013c4:	647b      	str	r3, [r7, #68]	; 0x44

    //---------------------Creacion de las diferentes fichas de las celdas vecinas-----------------
    for(uint8_t k = 0; k < 8; k++) 
 80013c6:	2300      	movs	r3, #0
 80013c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80013cc:	e0fa      	b.n	80015c4 <aplicattion_A_Star+0x310>
    {
      if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k] != NULL) 
 80013ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013d6:	3302      	adds	r3, #2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 80eb 	beq.w	80015ba <aplicattion_A_Star+0x306>
      {
        if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h != -1.0f && ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status < OPEN)
 80013e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013ec:	3302      	adds	r3, #2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80013f8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80013fc:	eef4 7a47 	vcmp.f32	s15, s14
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001404:	f000 80d9 	beq.w	80015ba <aplicattion_A_Star+0x306>
 8001408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001410:	3302      	adds	r3, #2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800141c:	2b00      	cmp	r3, #0
 800141e:	f040 80cc 	bne.w	80015ba <aplicattion_A_Star+0x306>
        {
          //Se busca la posicion que ocupada la nueva ficha en la lista de fichas abiertas
          index_file_Open = search_position_file_Open(file_Open, file_Open_Availability);
 8001422:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001426:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001428:	f000 f9ba 	bl	80017a0 <search_position_file_Open>
 800142c:	4603      	mov	r3, r0
 800142e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          //Se abre la celda
          ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status = OPEN;
 8001432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800143a:	3302      	adds	r3, #2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          //Se crea la ficha
          file_Open[index_file_Open].ptrCell_file = ptrFile->ptrCell_file->neighbors.ptrCellMap[k];
 8001448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800144a:	6819      	ldr	r1, [r3, #0]
 800144c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8001450:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001454:	4613      	mov	r3, r2
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	4413      	add	r3, r2
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	461a      	mov	r2, r3
 800145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001460:	441a      	add	r2, r3
 8001462:	1c83      	adds	r3, r0, #2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	6013      	str	r3, [r2, #0]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 800146c:	2300      	movs	r3, #0
 800146e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8001472:	e018      	b.n	80014a6 <aplicattion_A_Star+0x1f2>
          {
            file_Open[index_file_Open].ptrCell_parent[u] = ptrFile->ptrCell_parent[u];
 8001474:	f897 103a 	ldrb.w	r1, [r7, #58]	; 0x3a
 8001478:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800147c:	4613      	mov	r3, r2
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	4413      	add	r3, r2
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	461a      	mov	r2, r3
 8001486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001488:	1898      	adds	r0, r3, r2
 800148a:	f897 603a 	ldrb.w	r6, [r7, #58]	; 0x3a
 800148e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001490:	008b      	lsls	r3, r1, #2
 8001492:	4413      	add	r3, r2
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	00b3      	lsls	r3, r6, #2
 8001498:	4403      	add	r3, r0
 800149a:	605a      	str	r2, [r3, #4]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 800149c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80014a0:	3301      	adds	r3, #1
 80014a2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80014a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014a8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80014ac:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d3df      	bcc.n	8001474 <aplicattion_A_Star+0x1c0>
          }
          file_Open[index_file_Open].ptrCell_parent[ptrFile->num_parent] = ptrFile->ptrCell_file;
 80014b4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80014b8:	4613      	mov	r3, r2
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4413      	add	r3, r2
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	461a      	mov	r2, r3
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	1899      	adds	r1, r3, r2
 80014c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014c8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80014cc:	4618      	mov	r0, r3
 80014ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	0083      	lsls	r3, r0, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	605a      	str	r2, [r3, #4]
          file_Open[index_file_Open].ptrCell_parent[(ptrFile->num_parent+1)] = NULL;
 80014d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80014dc:	4613      	mov	r3, r2
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	4413      	add	r3, r2
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	461a      	mov	r2, r3
 80014e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e8:	441a      	add	r2, r3
 80014ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014ec:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80014f0:	3301      	adds	r3, #1
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	2200      	movs	r2, #0
 80014f8:	605a      	str	r2, [r3, #4]
          file_Open[index_file_Open].num_parent = ptrFile->num_parent+1;
 80014fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014fc:	f893 1104 	ldrb.w	r1, [r3, #260]	; 0x104
 8001500:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001504:	4613      	mov	r3, r2
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	4413      	add	r3, r2
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	461a      	mov	r2, r3
 800150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001510:	4413      	add	r3, r2
 8001512:	1c4a      	adds	r2, r1, #1
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
          file_Open[index_file_Open].cost_g = ptrFile->ptrCell_file->neighbors.distance_neigh[k]+ptrFile->cost_g;
 800151a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001522:	330a      	adds	r3, #10
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	3304      	adds	r3, #4
 800152a:	ed93 7a00 	vldr	s14, [r3]
 800152e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001530:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8001534:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001538:	4613      	mov	r3, r2
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	4413      	add	r3, r2
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	461a      	mov	r2, r3
 8001542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001544:	4413      	add	r3, r2
 8001546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154a:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
          file_Open[index_file_Open].function_F = file_Open[index_file_Open].cost_g + ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h;
 800154e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001552:	4613      	mov	r3, r2
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4413      	add	r3, r2
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	461a      	mov	r2, r3
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	4413      	add	r3, r2
 8001560:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 8001564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800156c:	3302      	adds	r3, #2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001578:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800157c:	4613      	mov	r3, r2
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	4413      	add	r3, r2
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	461a      	mov	r2, r3
 8001586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001588:	4413      	add	r3, r2
 800158a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158e:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
          //Indicacion de la disponibilidad de la ficha
          file_Open_Availability |= (0b1 << index_file_Open);
 8001592:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001596:	2201      	movs	r2, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	17da      	asrs	r2, r3, #31
 800159e:	4698      	mov	r8, r3
 80015a0:	4691      	mov	r9, r2
 80015a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015a6:	ea42 0108 	orr.w	r1, r2, r8
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	ea43 0309 	orr.w	r3, r3, r9
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015b6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    for(uint8_t k = 0; k < 8; k++) 
 80015ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015be:	3301      	adds	r3, #1
 80015c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80015c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015c8:	2b07      	cmp	r3, #7
 80015ca:	f67f af00 	bls.w	80013ce <aplicattion_A_Star+0x11a>
      }
    }
    
    //-----------------Cerramos la ficha actual del puntero----------------------
    //indicamos el nuevo estado de la celda
    ptrFile->ptrCell_file->status = CLOSED;
 80015ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2202      	movs	r2, #2
 80015d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    //Indicacion de la no disponibilidad de la ficha
    file_Open_Availability &=  ~(0b1 << index_ptr);
 80015d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015dc:	2201      	movs	r2, #1
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	17da      	asrs	r2, r3, #31
 80015e6:	469a      	mov	sl, r3
 80015e8:	4693      	mov	fp, r2
 80015ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015ee:	ea02 010a 	and.w	r1, r2, sl
 80015f2:	6039      	str	r1, [r7, #0]
 80015f4:	ea03 030b 	and.w	r3, r3, fp
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015fe:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
     
    //---------------- Comparación función F ---------------------
    for (uint8_t k = 0; k < 64; k++) {
 8001602:	2300      	movs	r3, #0
 8001604:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001608:	e09b      	b.n	8001742 <aplicattion_A_Star+0x48e>
      //Recorrido
      bit_file_cell = (file_Open_Availability >> k) & 0b1;
 800160a:	f897 0039 	ldrb.w	r0, [r7, #57]	; 0x39
 800160e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001612:	f1c0 0620 	rsb	r6, r0, #32
 8001616:	f1a0 0120 	sub.w	r1, r0, #32
 800161a:	fa22 f400 	lsr.w	r4, r2, r0
 800161e:	fa03 f606 	lsl.w	r6, r3, r6
 8001622:	4334      	orrs	r4, r6
 8001624:	fa23 f101 	lsr.w	r1, r3, r1
 8001628:	430c      	orrs	r4, r1
 800162a:	fa23 f500 	lsr.w	r5, r3, r0
 800162e:	b2e3      	uxtb	r3, r4
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      //Se el bit es un valor logico de 1 entonces la ficha esta disponible para su comparacion con las demas
      if(bit_file_cell==1 && file_Open[k].ptrCell_file != NULL)
 8001638:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800163c:	2b01      	cmp	r3, #1
 800163e:	d17b      	bne.n	8001738 <aplicattion_A_Star+0x484>
 8001640:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8001644:	4613      	mov	r3, r2
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	461a      	mov	r2, r3
 800164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001650:	4413      	add	r3, r2
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d06f      	beq.n	8001738 <aplicattion_A_Star+0x484>
      {
        // Verificar que la función F sea menor al valor anterior
        if (file_Open[k].function_F < min_f) {
 8001658:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800165c:	4613      	mov	r3, r2
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	4413      	add	r3, r2
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	461a      	mov	r2, r3
 8001666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001668:	4413      	add	r3, r2
 800166a:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 800166e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	dd1c      	ble.n	80016b6 <aplicattion_A_Star+0x402>
          // Reemplazamos valores
          min_f = file_Open[k].function_F;
 800167c:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8001680:	4613      	mov	r3, r2
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	4413      	add	r3, r2
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	461a      	mov	r2, r3
 800168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168c:	4413      	add	r3, r2
 800168e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001692:	64bb      	str	r3, [r7, #72]	; 0x48
          min_h = file_Open[k].ptrCell_file->h;
 8001694:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8001698:	4613      	mov	r3, r2
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	4413      	add	r3, r2
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	461a      	mov	r2, r3
 80016a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a4:	4413      	add	r3, r2
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016aa:	647b      	str	r3, [r7, #68]	; 0x44
          index_ptr = k;
 80016ac:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80016b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80016b4:	e040      	b.n	8001738 <aplicattion_A_Star+0x484>
        }
        // Verificar que la función F sea igual al valor anterior, si es así se desempata con el valor h
        else if (file_Open[k].function_F == min_f) {
 80016b6:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80016ba:	4613      	mov	r3, r2
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	4413      	add	r3, r2
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	461a      	mov	r2, r3
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c6:	4413      	add	r3, r2
 80016c8:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 80016cc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80016d0:	eeb4 7a67 	vcmp.f32	s14, s15
 80016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d8:	d12e      	bne.n	8001738 <aplicattion_A_Star+0x484>
          if (file_Open[k].ptrCell_file->h < min_h) {
 80016da:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80016de:	4613      	mov	r3, r2
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	4413      	add	r3, r2
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	461a      	mov	r2, r3
 80016e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ea:	4413      	add	r3, r2
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80016f2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80016f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	dd1b      	ble.n	8001738 <aplicattion_A_Star+0x484>
              // Reemplazamos valores
              min_f = file_Open[k].function_F;
 8001700:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8001704:	4613      	mov	r3, r2
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	4413      	add	r3, r2
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	461a      	mov	r2, r3
 800170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001710:	4413      	add	r3, r2
 8001712:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001716:	64bb      	str	r3, [r7, #72]	; 0x48
              min_h = file_Open[k].ptrCell_file->h;
 8001718:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800171c:	4613      	mov	r3, r2
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	4413      	add	r3, r2
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	461a      	mov	r2, r3
 8001726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001728:	4413      	add	r3, r2
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800172e:	647b      	str	r3, [r7, #68]	; 0x44
              index_ptr = k;         
 8001730:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001734:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    for (uint8_t k = 0; k < 64; k++) {
 8001738:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800173c:	3301      	adds	r3, #1
 800173e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001742:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001746:	2b3f      	cmp	r3, #63	; 0x3f
 8001748:	f67f af5f 	bls.w	800160a <aplicattion_A_Star+0x356>
        }
      }
    }
    
    //--------------- Seleccionamos nueva ficha para el puntero--------------------
    ptrFile = &file_Open[index_ptr];
 800174c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001750:	4613      	mov	r3, r2
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	4413      	add	r3, r2
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	461a      	mov	r2, r3
 800175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175c:	4413      	add	r3, r2
 800175e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrFile->ptrCell_file->coor_x == goal_x && ptrFile->ptrCell_file->coor_y == goal_y) {
 8001760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	edd3 7a01 	vldr	s15, [r3, #4]
 8001768:	ed97 7a06 	vldr	s14, [r7, #24]
 800176c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	f47f ae21 	bne.w	80013ba <aplicattion_A_Star+0x106>
 8001778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001780:	ed97 7a05 	vldr	s14, [r7, #20]
 8001784:	eeb4 7a67 	vcmp.f32	s14, s15
 8001788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178c:	d000      	beq.n	8001790 <aplicattion_A_Star+0x4dc>
    min_f = DBL_MAX;
 800178e:	e614      	b.n	80013ba <aplicattion_A_Star+0x106>
        break;
 8001790:	bf00      	nop
    }
  }
  return index_ptr;
 8001792:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8001796:	4618      	mov	r0, r3
 8001798:	3764      	adds	r7, #100	; 0x64
 800179a:	46bd      	mov	sp, r7
 800179c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080017a0 <search_position_file_Open>:


uint8_t search_position_file_Open(file_cell_t list_file[64], uint64_t avan_file)
{
 80017a0:	b4f0      	push	{r4, r5, r6, r7}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	e9c7 2300 	strd	r2, r3, [r7]
  //Variables
  uint8_t bit_list = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 110;
 80017b0:	236e      	movs	r3, #110	; 0x6e
 80017b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  float value_f = 0;
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
  //bucle para recorrer la lista de bits
  for(int i = 0; i<60; i++)
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	e01e      	b.n	8001800 <search_position_file_Open+0x60>
  {
    //Recorrido
    bit_list = (avan_file >> i) & 0b1;
 80017c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017c6:	69f9      	ldr	r1, [r7, #28]
 80017c8:	f1c1 0620 	rsb	r6, r1, #32
 80017cc:	f1a1 0020 	sub.w	r0, r1, #32
 80017d0:	fa22 f401 	lsr.w	r4, r2, r1
 80017d4:	fa03 f606 	lsl.w	r6, r3, r6
 80017d8:	4334      	orrs	r4, r6
 80017da:	fa23 f000 	lsr.w	r0, r3, r0
 80017de:	4304      	orrs	r4, r0
 80017e0:	fa23 f501 	lsr.w	r5, r3, r1
 80017e4:	b2e3      	uxtb	r3, r4
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	75fb      	strb	r3, [r7, #23]
    //Se comprueba el bit de correspondiente a la disponibilidad de la ficha
    if(bit_list  == 0)
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d103      	bne.n	80017fa <search_position_file_Open+0x5a>
    {
      index = i;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017f8:	e005      	b.n	8001806 <search_position_file_Open+0x66>
  for(int i = 0; i<60; i++)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3301      	adds	r3, #1
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	2b3b      	cmp	r3, #59	; 0x3b
 8001804:	dddd      	ble.n	80017c2 <search_position_file_Open+0x22>
    }
  }
  /*En caso que no se indico un valor diferente a 100 para el indice, se busca una ubicacion dentro 
  de la lista de fichas abiertas, seleccionando aquella ubicacion donde el valor de la funcion f
  sea la mayor*/
  if (index == 60)
 8001806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800180a:	2b3c      	cmp	r3, #60	; 0x3c
 800180c:	d132      	bne.n	8001874 <search_position_file_Open+0xd4>
  {  
    //Recorrido del arreglo de fichas abiertas
    for(int k = 0; k<64; k++)
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	e02c      	b.n	800186e <search_position_file_Open+0xce>
    {  
      //Se busca el mayor valor de la funcion f
      if(list_file[k].ptrCell_file != NULL && list_file[k].function_F > value_f)
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4613      	mov	r3, r2
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4413      	add	r3, r2
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01e      	beq.n	8001868 <search_position_file_Open+0xc8>
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4613      	mov	r3, r2
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	4413      	add	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	461a      	mov	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4413      	add	r3, r2
 800183a:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 800183e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	d50d      	bpl.n	8001868 <search_position_file_Open+0xc8>
      {
        value_f = list_file[k].function_F;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	4413      	add	r3, r2
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001860:	623b      	str	r3, [r7, #32]
        index = k;
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(int k = 0; k<64; k++)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	3301      	adds	r3, #1
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b3f      	cmp	r3, #63	; 0x3f
 8001872:	ddcf      	ble.n	8001814 <search_position_file_Open+0x74>
      }
    }
  }
  
  return index;
 8001874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001878:	4618      	mov	r0, r3
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bcf0      	pop	{r4, r5, r6, r7}
 8001880:	4770      	bx	lr
	...

08001884 <heuristic_cell_map>:



//-----------------------------------------------Funciones calculo heuristica----------------------------------------------------------------
void heuristic_cell_map(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float goal_x, float goal_y){
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	460b      	mov	r3, r1
 800188e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001892:	edc7 0a00 	vstr	s1, [r7]
 8001896:	72fb      	strb	r3, [r7, #11]
 8001898:	4613      	mov	r3, r2
 800189a:	72bb      	strb	r3, [r7, #10]
  //Recorrido por cada una de las celdas
  for (int i = 0; i < row; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e071      	b.n	8001986 <heuristic_cell_map+0x102>
  {
    for (int j = 0; j < colum; j++) 
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	e067      	b.n	8001978 <heuristic_cell_map+0xf4>
    {
      //Calculo heuristica
      if(grid[i][j].feature =='G')
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	441a      	add	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2158      	movs	r1, #88	; 0x58
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	334c      	adds	r3, #76	; 0x4c
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b47      	cmp	r3, #71	; 0x47
 80018c6:	d110      	bne.n	80018ea <heuristic_cell_map+0x66>
      {
        grid[i][j].h = 0.0f;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	441a      	add	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	2158      	movs	r1, #88	; 0x58
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	3350      	adds	r3, #80	; 0x50
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	e043      	b.n	8001972 <heuristic_cell_map+0xee>
      }
      else if(grid[i][j].feature=='#')
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80018f0:	fb02 f303 	mul.w	r3, r2, r3
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	441a      	add	r2, r3
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2158      	movs	r1, #88	; 0x58
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	4413      	add	r3, r2
 8001902:	334c      	adds	r3, #76	; 0x4c
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b23      	cmp	r3, #35	; 0x23
 8001908:	d10f      	bne.n	800192a <heuristic_cell_map+0xa6>
      {
        grid[i][j].h = -1.0f;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	441a      	add	r2, r3
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	2158      	movs	r1, #88	; 0x58
 800191c:	fb01 f303 	mul.w	r3, r1, r3
 8001920:	4413      	add	r3, r2
 8001922:	3350      	adds	r3, #80	; 0x50
 8001924:	4a1c      	ldr	r2, [pc, #112]	; (8001998 <heuristic_cell_map+0x114>)
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	e023      	b.n	8001972 <heuristic_cell_map+0xee>
      }
      else
      {
        grid[i][j].h = heuristic_single_cell(&grid[i][j], goal_x, goal_y); 
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	441a      	add	r2, r3
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	2158      	movs	r1, #88	; 0x58
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	18d1      	adds	r1, r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	18d4      	adds	r4, r2, r3
 8001950:	edd7 0a00 	vldr	s1, [r7]
 8001954:	ed97 0a01 	vldr	s0, [r7, #4]
 8001958:	4608      	mov	r0, r1
 800195a:	f000 f821 	bl	80019a0 <heuristic_single_cell>
 800195e:	eef0 7a40 	vmov.f32	s15, s0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	2258      	movs	r2, #88	; 0x58
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	4423      	add	r3, r4
 800196c:	3350      	adds	r3, #80	; 0x50
 800196e:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < colum; j++) 
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	3301      	adds	r3, #1
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	7abb      	ldrb	r3, [r7, #10]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	db93      	blt.n	80018a8 <heuristic_cell_map+0x24>
  for (int i = 0; i < row; i++)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	7afb      	ldrb	r3, [r7, #11]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	429a      	cmp	r2, r3
 800198c:	db89      	blt.n	80018a2 <heuristic_cell_map+0x1e>
      }   
    }
  }  
}
 800198e:	bf00      	nop
 8001990:	bf00      	nop
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	bf800000 	.word	0xbf800000
 800199c:	00000000 	.word	0x00000000

080019a0 <heuristic_single_cell>:


float heuristic_single_cell(Cell_map_t *cell, float  goal_x, float goal_y)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	ed2d 8b02 	vpush	{d8}
 80019a6:	b0a3      	sub	sp, #140	; 0x8c
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80019b0:	edc7 0a01 	vstr	s1, [r7, #4]
  //---------Definicion de variables--------
  //Variables del calculo heuristica
  Cell_map_t *ptrCell = cell;                 //Puntero a la celda actual
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  float total_distante = 0;                   //Distancia total entre la celda actual y la celda del gol
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  float dis[8];                               //Distancia entre la celda vecina y la recta
  uint8_t best_index;                         //Mejor indice de las celdas vecinas
  float min_distance;                         //Distancia minima entre la celda vecina y la recta
  //Variables Recta
  float A_recta;                              //Parametros de la recta
  float B_recta = -1.0f;
 80019c2:	4be3      	ldr	r3, [pc, #908]	; (8001d50 <heuristic_single_cell+0x3b0>)
 80019c4:	673b      	str	r3, [r7, #112]	; 0x70
  float delta_x;                              //Diferencia la coordenada x entre la celda inicial y la final
  float mag_delta;                            //Magnitud del vector resultante de la diferencia de las coordenadas

  
   //---------------Calculos parametros de la recta-----------------
  delta_y = goal_y - cell->coor_y;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80019cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80019d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
  delta_x = goal_x - cell->coor_x;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	edd3 7a01 	vldr	s15, [r3, #4]
 80019de:	ed97 7a02 	vldr	s14, [r7, #8]
 80019e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
  mag_delta = sqrtf(delta_x * delta_x + delta_y * delta_y);
 80019ea:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80019ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019f2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80019f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001a02:	f00f ff7f 	bl	8011904 <sqrtf>
 8001a06:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
  A_recta =  delta_y / delta_x;
 8001a0a:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001a0e:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a16:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  C_recta = cell->coor_y - A_recta * cell->coor_x;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a26:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a32:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

  while (1)
  { 
    //Inicializamos variables
    best_index = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    min_distance = DBL_MAX;
 8001a3c:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8001a40:	67bb      	str	r3, [r7, #120]	; 0x78

    //------------------Calculo parametros de cada una de las celdas vecinas--------------------
    for (uint8_t k = 0; k < 8; k++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001a48:	e0fc      	b.n	8001c44 <heuristic_single_cell+0x2a4>
    {
      //Verificamos que el puntero al vecino no es nulo
      if (ptrCell->neighbors.ptrCellMap[k] == NULL)
 8001a4a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001a4e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a52:	3302      	adds	r3, #2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d110      	bne.n	8001a80 <heuristic_single_cell+0xe0>
      {
        ang_between_vector[k] = -1.0f;
 8001a5e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	3388      	adds	r3, #136	; 0x88
 8001a66:	443b      	add	r3, r7
 8001a68:	3b58      	subs	r3, #88	; 0x58
 8001a6a:	4ab9      	ldr	r2, [pc, #740]	; (8001d50 <heuristic_single_cell+0x3b0>)
 8001a6c:	601a      	str	r2, [r3, #0]
        dis[k] = -1.0f;          
 8001a6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	3388      	adds	r3, #136	; 0x88
 8001a76:	443b      	add	r3, r7
 8001a78:	3b78      	subs	r3, #120	; 0x78
 8001a7a:	4ab5      	ldr	r2, [pc, #724]	; (8001d50 <heuristic_single_cell+0x3b0>)
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e0dc      	b.n	8001c3a <heuristic_single_cell+0x29a>
      }
      else
      {
        //Calculo vector relativo
        rel_x = ptrCell->neighbors.ptrCellMap[k]->coor_x - ptrCell->coor_x;
 8001a80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001a84:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a88:	3302      	adds	r3, #2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a98:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        rel_y = ptrCell->neighbors.ptrCellMap[k]->coor_y - ptrCell->coor_y;
 8001aa4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001aa8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001aac:	3302      	adds	r3, #2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001abc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        //Calculo parametros
        res = round(((rel_x*delta_x + rel_y*delta_y) / (ptrCell->neighbors.distance_neigh[k] * mag_delta)) * 10000) / 10000;
 8001ac8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001acc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ad0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ad4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001ad8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae0:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001ae4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001ae8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001aec:	330a      	adds	r3, #10
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	3304      	adds	r3, #4
 8001af4:	ed93 7a00 	vldr	s14, [r3]
 8001af8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001afc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b04:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001d54 <heuristic_single_cell+0x3b4>
 8001b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0c:	ee17 0a90 	vmov	r0, s15
 8001b10:	f7fe fd32 	bl	8000578 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	ec43 2b10 	vmov	d0, r2, r3
 8001b1c:	f00f fd80 	bl	8011620 <round>
 8001b20:	ec51 0b10 	vmov	r0, r1, d0
 8001b24:	a388      	add	r3, pc, #544	; (adr r3, 8001d48 <heuristic_single_cell+0x3a8>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe fea7 	bl	800087c <__aeabi_ddiv>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7ff f86f 	bl	8000c18 <__aeabi_d2f>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	653b      	str	r3, [r7, #80]	; 0x50
        ang_between_vector[k] = acos(res);
 8001b3e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b40:	f7fe fd1a 	bl	8000578 <__aeabi_f2d>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	ec43 2b10 	vmov	d0, r2, r3
 8001b4c:	f00f fe08 	bl	8011760 <acos>
 8001b50:	ec53 2b10 	vmov	r2, r3, d0
 8001b54:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7ff f85c 	bl	8000c18 <__aeabi_d2f>
 8001b60:	4602      	mov	r2, r0
 8001b62:	00a3      	lsls	r3, r4, #2
 8001b64:	3388      	adds	r3, #136	; 0x88
 8001b66:	443b      	add	r3, r7
 8001b68:	3b58      	subs	r3, #88	; 0x58
 8001b6a:	601a      	str	r2, [r3, #0]
        if(A_recta != INFINITY && A_recta != -INFINITY)
 8001b6c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b70:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001d58 <heuristic_single_cell+0x3b8>
 8001b74:	eef4 7a47 	vcmp.f32	s15, s14
 8001b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7c:	dc45      	bgt.n	8001c0a <heuristic_single_cell+0x26a>
 8001b7e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b82:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001d5c <heuristic_single_cell+0x3bc>
 8001b86:	eef4 7a47 	vcmp.f32	s15, s14
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	d43c      	bmi.n	8001c0a <heuristic_single_cell+0x26a>
        {
          dis[k] = fabsf(A_recta * ptrCell->neighbors.ptrCellMap[k]->coor_x + B_recta * ptrCell->neighbors.ptrCellMap[k]->coor_y + C_recta) / sqrtf(A_recta * A_recta + 1);  
 8001b90:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001b94:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001b98:	3302      	adds	r3, #2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ba4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001bb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bc0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bcc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd4:	eeb0 8ae7 	vabs.f32	s16, s15
 8001bd8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001bdc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001be0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001be4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	f00f fe8a 	bl	8011904 <sqrtf>
 8001bf0:	eeb0 7a40 	vmov.f32	s14, s0
 8001bf4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001bf8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	3388      	adds	r3, #136	; 0x88
 8001c00:	443b      	add	r3, r7
 8001c02:	3b78      	subs	r3, #120	; 0x78
 8001c04:	edc3 7a00 	vstr	s15, [r3]
 8001c08:	e017      	b.n	8001c3a <heuristic_single_cell+0x29a>
        }
        else
        {
          dis[k] = fabsf(ptrCell->neighbors.ptrCellMap[k]->coor_x-goal_x);
 8001c0a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001c0e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c12:	3302      	adds	r3, #2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c26:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001c2a:	eef0 7ae7 	vabs.f32	s15, s15
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	3388      	adds	r3, #136	; 0x88
 8001c32:	443b      	add	r3, r7
 8001c34:	3b78      	subs	r3, #120	; 0x78
 8001c36:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t k = 0; k < 8; k++)
 8001c3a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001c44:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001c48:	2b07      	cmp	r3, #7
 8001c4a:	f67f aefe 	bls.w	8001a4a <heuristic_single_cell+0xaa>
      }            
    }

    //----------------Buscamos la celda vecina mas cercana a la recta y que este en la misma direccion que la recta---------------------
    //Recorremos los parametros para encontrar la mejor celda
    for (uint8_t k = 0; k < 8; k++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001c54:	e03f      	b.n	8001cd6 <heuristic_single_cell+0x336>
    {
      //Verificamos que no sea -1
      if (ptrCell->neighbors.distance_neigh[k] != -1.0f)
 8001c56:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c5e:	330a      	adds	r3, #10
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	3304      	adds	r3, #4
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001c6e:	eef4 7a47 	vcmp.f32	s15, s14
 8001c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c76:	d029      	beq.n	8001ccc <heuristic_single_cell+0x32c>
      {
        //Verificamos que la diferencia entre los angulos no sea superior a 45°
        if (ang_between_vector[k] <= 1.5f)
 8001c78:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	3388      	adds	r3, #136	; 0x88
 8001c80:	443b      	add	r3, r7
 8001c82:	3b58      	subs	r3, #88	; 0x58
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	d81a      	bhi.n	8001ccc <heuristic_single_cell+0x32c>
        {
          //Verificar que la distancia sea menor a la anterior menor distancia
          if (dis[k] < min_distance)
 8001c96:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	3388      	adds	r3, #136	; 0x88
 8001c9e:	443b      	add	r3, r7
 8001ca0:	3b78      	subs	r3, #120	; 0x78
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001caa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb2:	dd0b      	ble.n	8001ccc <heuristic_single_cell+0x32c>
          {
            min_distance = dis[k];
 8001cb4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	3388      	adds	r3, #136	; 0x88
 8001cbc:	443b      	add	r3, r7
 8001cbe:	3b78      	subs	r3, #120	; 0x78
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	67bb      	str	r3, [r7, #120]	; 0x78
            best_index = k;
 8001cc4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001cc8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    for (uint8_t k = 0; k < 8; k++)
 8001ccc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001cd6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001cda:	2b07      	cmp	r3, #7
 8001cdc:	d9bb      	bls.n	8001c56 <heuristic_single_cell+0x2b6>
      }        
    }

    
    //--------------Seleccionamos la celda vecina y sumamos su distancia--------------------
    total_distante = total_distante + ptrCell->neighbors.distance_neigh[best_index];
 8001cde:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001ce2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ce6:	330a      	adds	r3, #10
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	3304      	adds	r3, #4
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfa:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    ptrCell = ptrCell->neighbors.ptrCellMap[best_index];    
 8001cfe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d02:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d06:	3302      	adds	r3, #2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrCell->coor_x == goal_x && ptrCell->coor_y == goal_y)
 8001d12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d16:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d1a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d1e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d26:	f47f ae86 	bne.w	8001a36 <heuristic_single_cell+0x96>
 8001d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d32:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d36:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	d00f      	beq.n	8001d60 <heuristic_single_cell+0x3c0>
    best_index = 0;
 8001d40:	e679      	b.n	8001a36 <heuristic_single_cell+0x96>
 8001d42:	bf00      	nop
 8001d44:	f3af 8000 	nop.w
 8001d48:	00000000 	.word	0x00000000
 8001d4c:	40c38800 	.word	0x40c38800
 8001d50:	bf800000 	.word	0xbf800000
 8001d54:	461c4000 	.word	0x461c4000
 8001d58:	7f7fffff 	.word	0x7f7fffff
 8001d5c:	ff7fffff 	.word	0xff7fffff
    {
      break;
 8001d60:	bf00      	nop
    }
  }

  return total_distante;
 8001d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d66:	ee07 3a90 	vmov	s15, r3
}
 8001d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6e:	378c      	adds	r7, #140	; 0x8c
 8001d70:	46bd      	mov	sp, r7
 8001d72:	ecbd 8b02 	vpop	{d8}
 8001d76:	bd90      	pop	{r4, r7, pc}

08001d78 <configMPUAccel>:
//Importacio de librerias
#include "MPUAccel.h"
//#include <SysTickDriver.h>

void configMPUAccel(MPUAccel_Handler_t *ptrMPUAccel, BasicTimer_Handler_t *ptrBTimerHandler, uint16_t *ptrcountingTimer){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]

	uint8_t rdy  = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	75fb      	strb	r3, [r7, #23]
	uint8_t byte = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	75bb      	strb	r3, [r7, #22]

	//------------Verificamos comunicacion con el MPU----------------
	while(!rdy){
 8001d8c:	e004      	b.n	8001d98 <configMPUAccel+0x20>

		rdy = WHOIAM(ptrMPUAccel);
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 f855 	bl	8001e3e <WHOIAM>
 8001d94:	4603      	mov	r3, r0
 8001d96:	75fb      	strb	r3, [r7, #23]
	while(!rdy){
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f7      	beq.n	8001d8e <configMPUAccel+0x16>
	}

	//------------------Reiniciamos el MPU--------------------------
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, PWR_MGMT_l, 0x00);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	216b      	movs	r1, #107	; 0x6b
 8001da6:	4618      	mov	r0, r3
 8001da8:	f009 fa47 	bl	800b23a <i2c_WriteSingleRegister>
	//Pausa
	timer_delay(ptrBTimerHandler, ptrcountingTimer, 1);
 8001dac:	2201      	movs	r2, #1
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	68b8      	ldr	r0, [r7, #8]
 8001db2:	f007 fd67 	bl	8009884 <timer_delay>

	//---------------Configuracion Accel----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	211c      	movs	r1, #28
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f009 fa0b 	bl	800b1d8 <i2c_ReadSingleRegister>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	75bb      	strb	r3, [r7, #22]
	byte &= ~(0b00011000);
 8001dc6:	7dbb      	ldrb	r3, [r7, #22]
 8001dc8:	f023 0318 	bic.w	r3, r3, #24
 8001dcc:	75bb      	strb	r3, [r7, #22]
	//Pausa
	timer_delay(ptrBTimerHandler, ptrcountingTimer, 1);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	68b8      	ldr	r0, [r7, #8]
 8001dd4:	f007 fd56 	bl	8009884 <timer_delay>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL<<3));
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6858      	ldr	r0, [r3, #4]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	b25a      	sxtb	r2, r3
 8001de4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	211c      	movs	r1, #28
 8001df2:	f009 fa22 	bl	800b23a <i2c_WriteSingleRegister>

	//---------------Configuracion Giro----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	211b      	movs	r1, #27
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f009 f9eb 	bl	800b1d8 <i2c_ReadSingleRegister>
 8001e02:	4603      	mov	r3, r0
 8001e04:	75bb      	strb	r3, [r7, #22]
	byte &= ~(0b00011000);
 8001e06:	7dbb      	ldrb	r3, [r7, #22]
 8001e08:	f023 0318 	bic.w	r3, r3, #24
 8001e0c:	75bb      	strb	r3, [r7, #22]
	//Pausa
	timer_delay(ptrBTimerHandler, ptrcountingTimer, 1);
 8001e0e:	2201      	movs	r2, #1
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	68b8      	ldr	r0, [r7, #8]
 8001e14:	f007 fd36 	bl	8009884 <timer_delay>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL <<3));
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6858      	ldr	r0, [r3, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	b25a      	sxtb	r2, r3
 8001e24:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	b25b      	sxtb	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	211b      	movs	r1, #27
 8001e32:	f009 fa02 	bl	800b23a <i2c_WriteSingleRegister>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <WHOIAM>:



//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Handler_t *ptrMPUAccel){
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
	//Variables auxiliares
	uint8_t whoami = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73bb      	strb	r3, [r7, #14]
	//leemos el registro WHO_AM_I correspondiente
	whoami =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, WHO_AM_I);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2175      	movs	r1, #117	; 0x75
 8001e54:	4618      	mov	r0, r3
 8001e56:	f009 f9bf 	bl	800b1d8 <i2c_ReadSingleRegister>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	73fb      	strb	r3, [r7, #15]
	//verificamos la transacción
	whoami &= ~(0b10000001);
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001e64:	73fb      	strb	r3, [r7, #15]
	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	085b      	lsrs	r3, r3, #1
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	0000      	movs	r0, r0
 8001e84:	0000      	movs	r0, r0
	...

08001e88 <readMPU>:


//Funcion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
float readMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead, int16_t offset)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
 8001e94:	4613      	mov	r3, r2
 8001e96:	803b      	strh	r3, [r7, #0]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	75fb      	strb	r3, [r7, #23]
	uint8_t address_L = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	75bb      	strb	r3, [r7, #22]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	81fb      	strh	r3, [r7, #14]
	uint16_t aux_L = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	81bb      	strh	r3, [r7, #12]
	int16_t   aux  = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	817b      	strh	r3, [r7, #10]
	float res  = 0;
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d82d      	bhi.n	8001f14 <readMPU+0x8c>
 8001eb8:	a201      	add	r2, pc, #4	; (adr r2, 8001ec0 <readMPU+0x38>)
 8001eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebe:	bf00      	nop
 8001ec0:	08001ed9 	.word	0x08001ed9
 8001ec4:	08001ee3 	.word	0x08001ee3
 8001ec8:	08001eed 	.word	0x08001eed
 8001ecc:	08001ef7 	.word	0x08001ef7
 8001ed0:	08001f01 	.word	0x08001f01
 8001ed4:	08001f0b 	.word	0x08001f0b
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 8001ed8:	233b      	movs	r3, #59	; 0x3b
 8001eda:	75fb      	strb	r3, [r7, #23]
 8001edc:	233c      	movs	r3, #60	; 0x3c
 8001ede:	75bb      	strb	r3, [r7, #22]
 8001ee0:	e019      	b.n	8001f16 <readMPU+0x8e>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 8001ee2:	233d      	movs	r3, #61	; 0x3d
 8001ee4:	75fb      	strb	r3, [r7, #23]
 8001ee6:	233e      	movs	r3, #62	; 0x3e
 8001ee8:	75bb      	strb	r3, [r7, #22]
 8001eea:	e014      	b.n	8001f16 <readMPU+0x8e>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 8001eec:	233f      	movs	r3, #63	; 0x3f
 8001eee:	75fb      	strb	r3, [r7, #23]
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	75bb      	strb	r3, [r7, #22]
 8001ef4:	e00f      	b.n	8001f16 <readMPU+0x8e>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 8001ef6:	2343      	movs	r3, #67	; 0x43
 8001ef8:	75fb      	strb	r3, [r7, #23]
 8001efa:	2344      	movs	r3, #68	; 0x44
 8001efc:	75bb      	strb	r3, [r7, #22]
 8001efe:	e00a      	b.n	8001f16 <readMPU+0x8e>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 8001f00:	2345      	movs	r3, #69	; 0x45
 8001f02:	75fb      	strb	r3, [r7, #23]
 8001f04:	2346      	movs	r3, #70	; 0x46
 8001f06:	75bb      	strb	r3, [r7, #22]
 8001f08:	e005      	b.n	8001f16 <readMPU+0x8e>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 8001f0a:	2347      	movs	r3, #71	; 0x47
 8001f0c:	75fb      	strb	r3, [r7, #23]
 8001f0e:	2348      	movs	r3, #72	; 0x48
 8001f10:	75bb      	strb	r3, [r7, #22]
 8001f12:	e000      	b.n	8001f16 <readMPU+0x8e>
		default:{ break; }
 8001f14:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	7dfa      	ldrb	r2, [r7, #23]
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f009 f95a 	bl	800b1d8 <i2c_ReadSingleRegister>
 8001f24:	4603      	mov	r3, r0
 8001f26:	81fb      	strh	r3, [r7, #14]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	7dba      	ldrb	r2, [r7, #22]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f009 f951 	bl	800b1d8 <i2c_ReadSingleRegister>
 8001f36:	4603      	mov	r3, r0
 8001f38:	81bb      	strh	r3, [r7, #12]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = ((int16_t) ((aux_H << 8) | (aux_L))) - offset;
 8001f3a:	89fb      	ldrh	r3, [r7, #14]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	883b      	ldrh	r3, [r7, #0]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	817b      	strh	r3, [r7, #10]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje
	switch(elementRead)
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	dc02      	bgt.n	8001f5e <readMPU+0xd6>
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	da05      	bge.n	8001f68 <readMPU+0xe0>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
				default:{ break; }
			}
			break;
		}
		default:{ break; }
 8001f5c:	e0d6      	b.n	800210c <readMPU+0x284>
 8001f5e:	3b03      	subs	r3, #3
	switch(elementRead)
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	f200 80d3 	bhi.w	800210c <readMPU+0x284>
 8001f66:	e081      	b.n	800206c <readMPU+0x1e4>
			switch (ptrMPUAccel->fullScaleACCEL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d87b      	bhi.n	8002068 <readMPU+0x1e0>
 8001f70:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <readMPU+0xf0>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001f89 	.word	0x08001f89
 8001f7c:	08001fc1 	.word	0x08001fc1
 8001f80:	08001ff9 	.word	0x08001ff9
 8001f84:	08002031 	.word	0x08002031
				case ACCEL_2G :{res = (aux*9.77)/ACCEL_2G_SENS; break;}
 8001f88:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fae1 	bl	8000554 <__aeabi_i2d>
 8001f92:	a363      	add	r3, pc, #396	; (adr r3, 8002120 <readMPU+0x298>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	f7fe fb46 	bl	8000628 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	4b5f      	ldr	r3, [pc, #380]	; (8002128 <readMPU+0x2a0>)
 8001faa:	f7fe fc67 	bl	800087c <__aeabi_ddiv>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7fe fe2f 	bl	8000c18 <__aeabi_d2f>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e054      	b.n	800206a <readMPU+0x1e2>
				case ACCEL_4G :{res = (aux*9.77)/ACCEL_4G_SENS; break;}
 8001fc0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fac5 	bl	8000554 <__aeabi_i2d>
 8001fca:	a355      	add	r3, pc, #340	; (adr r3, 8002120 <readMPU+0x298>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fb2a 	bl	8000628 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	4b52      	ldr	r3, [pc, #328]	; (800212c <readMPU+0x2a4>)
 8001fe2:	f7fe fc4b 	bl	800087c <__aeabi_ddiv>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fe13 	bl	8000c18 <__aeabi_d2f>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	e038      	b.n	800206a <readMPU+0x1e2>
				case ACCEL_8G :{res = (aux*9.77)/ACCEL_8G_SENS; break;}
 8001ff8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe faa9 	bl	8000554 <__aeabi_i2d>
 8002002:	a347      	add	r3, pc, #284	; (adr r3, 8002120 <readMPU+0x298>)
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	f7fe fb0e 	bl	8000628 <__aeabi_dmul>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	4b45      	ldr	r3, [pc, #276]	; (8002130 <readMPU+0x2a8>)
 800201a:	f7fe fc2f 	bl	800087c <__aeabi_ddiv>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4610      	mov	r0, r2
 8002024:	4619      	mov	r1, r3
 8002026:	f7fe fdf7 	bl	8000c18 <__aeabi_d2f>
 800202a:	4603      	mov	r3, r0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	e01c      	b.n	800206a <readMPU+0x1e2>
				case ACCEL_16G :{res = (aux*9.77)/ACCEL_16G_SENS; break;}
 8002030:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa8d 	bl	8000554 <__aeabi_i2d>
 800203a:	a339      	add	r3, pc, #228	; (adr r3, 8002120 <readMPU+0x298>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe faf2 	bl	8000628 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <readMPU+0x2ac>)
 8002052:	f7fe fc13 	bl	800087c <__aeabi_ddiv>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	f7fe fddb 	bl	8000c18 <__aeabi_d2f>
 8002062:	4603      	mov	r3, r0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	e000      	b.n	800206a <readMPU+0x1e2>
				default:{ break; }
 8002068:	bf00      	nop
			break;
 800206a:	e050      	b.n	800210e <readMPU+0x286>
			switch (ptrMPUAccel->fullScaleGYRO)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	785b      	ldrb	r3, [r3, #1]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d849      	bhi.n	8002108 <readMPU+0x280>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <readMPU+0x1f4>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	0800208d 	.word	0x0800208d
 8002080:	080020ad 	.word	0x080020ad
 8002084:	080020cd 	.word	0x080020cd
 8002088:	080020ed 	.word	0x080020ed
				case GYRO_250 :{ res = aux/GYRO_250_SENS; break;}
 800208c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002090:	4a29      	ldr	r2, [pc, #164]	; (8002138 <readMPU+0x2b0>)
 8002092:	fb82 1203 	smull	r1, r2, r2, r3
 8002096:	1152      	asrs	r2, r2, #5
 8002098:	17db      	asrs	r3, r3, #31
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	b21b      	sxth	r3, r3
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a6:	edc7 7a04 	vstr	s15, [r7, #16]
 80020aa:	e02e      	b.n	800210a <readMPU+0x282>
				case GYRO_500 :{ res = aux/GYRO_500_SENS; break;}
 80020ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80020b0:	4a22      	ldr	r2, [pc, #136]	; (800213c <readMPU+0x2b4>)
 80020b2:	fb82 1203 	smull	r1, r2, r2, r3
 80020b6:	1112      	asrs	r2, r2, #4
 80020b8:	17db      	asrs	r3, r3, #31
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	b21b      	sxth	r3, r3
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c6:	edc7 7a04 	vstr	s15, [r7, #16]
 80020ca:	e01e      	b.n	800210a <readMPU+0x282>
				case GYRO_1000 :{ res = aux/GYRO_1000_SENS; break;}
 80020cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80020d0:	4a1a      	ldr	r2, [pc, #104]	; (800213c <readMPU+0x2b4>)
 80020d2:	fb82 1203 	smull	r1, r2, r2, r3
 80020d6:	10d2      	asrs	r2, r2, #3
 80020d8:	17db      	asrs	r3, r3, #31
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	b21b      	sxth	r3, r3
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e6:	edc7 7a04 	vstr	s15, [r7, #16]
 80020ea:	e00e      	b.n	800210a <readMPU+0x282>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
 80020ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da00      	bge.n	80020f6 <readMPU+0x26e>
 80020f4:	330f      	adds	r3, #15
 80020f6:	111b      	asrs	r3, r3, #4
 80020f8:	b21b      	sxth	r3, r3
 80020fa:	ee07 3a90 	vmov	s15, r3
 80020fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002102:	edc7 7a04 	vstr	s15, [r7, #16]
 8002106:	e000      	b.n	800210a <readMPU+0x282>
				default:{ break; }
 8002108:	bf00      	nop
			break;
 800210a:	e000      	b.n	800210e <readMPU+0x286>
		default:{ break; }
 800210c:	bf00      	nop
	}
	//Retornamos valor
	return res;
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	ee07 3a90 	vmov	s15, r3
}
 8002114:	eeb0 0a67 	vmov.f32	s0, s15
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	70a3d70a 	.word	0x70a3d70a
 8002124:	40238a3d 	.word	0x40238a3d
 8002128:	40d00000 	.word	0x40d00000
 800212c:	40c00000 	.word	0x40c00000
 8002130:	40b00000 	.word	0x40b00000
 8002134:	40a00000 	.word	0x40a00000
 8002138:	3e88cb3d 	.word	0x3e88cb3d
 800213c:	3e0f83e1 	.word	0x3e0f83e1

08002140 <readCalibrationMPU>:

//Funcion para en el modo de calibracion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
int16_t readCalibrationMPU(MPUAccel_Handler_t *ptrMPUAccel,  uint8_t elementRead)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	70fb      	strb	r3, [r7, #3]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	73fb      	strb	r3, [r7, #15]
	uint8_t address_L = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	73bb      	strb	r3, [r7, #14]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_L = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	817b      	strh	r3, [r7, #10]
	int16_t   aux  = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	813b      	strh	r3, [r7, #8]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	2b05      	cmp	r3, #5
 8002164:	d82c      	bhi.n	80021c0 <readCalibrationMPU+0x80>
 8002166:	a201      	add	r2, pc, #4	; (adr r2, 800216c <readCalibrationMPU+0x2c>)
 8002168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216c:	08002185 	.word	0x08002185
 8002170:	0800218f 	.word	0x0800218f
 8002174:	08002199 	.word	0x08002199
 8002178:	080021a3 	.word	0x080021a3
 800217c:	080021ad 	.word	0x080021ad
 8002180:	080021b7 	.word	0x080021b7
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 8002184:	233b      	movs	r3, #59	; 0x3b
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	233c      	movs	r3, #60	; 0x3c
 800218a:	73bb      	strb	r3, [r7, #14]
 800218c:	e019      	b.n	80021c2 <readCalibrationMPU+0x82>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 800218e:	233d      	movs	r3, #61	; 0x3d
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	233e      	movs	r3, #62	; 0x3e
 8002194:	73bb      	strb	r3, [r7, #14]
 8002196:	e014      	b.n	80021c2 <readCalibrationMPU+0x82>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 8002198:	233f      	movs	r3, #63	; 0x3f
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	2340      	movs	r3, #64	; 0x40
 800219e:	73bb      	strb	r3, [r7, #14]
 80021a0:	e00f      	b.n	80021c2 <readCalibrationMPU+0x82>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 80021a2:	2343      	movs	r3, #67	; 0x43
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	2344      	movs	r3, #68	; 0x44
 80021a8:	73bb      	strb	r3, [r7, #14]
 80021aa:	e00a      	b.n	80021c2 <readCalibrationMPU+0x82>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 80021ac:	2345      	movs	r3, #69	; 0x45
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	2346      	movs	r3, #70	; 0x46
 80021b2:	73bb      	strb	r3, [r7, #14]
 80021b4:	e005      	b.n	80021c2 <readCalibrationMPU+0x82>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 80021b6:	2347      	movs	r3, #71	; 0x47
 80021b8:	73fb      	strb	r3, [r7, #15]
 80021ba:	2348      	movs	r3, #72	; 0x48
 80021bc:	73bb      	strb	r3, [r7, #14]
 80021be:	e000      	b.n	80021c2 <readCalibrationMPU+0x82>
		default:{ break; }
 80021c0:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f009 f804 	bl	800b1d8 <i2c_ReadSingleRegister>
 80021d0:	4603      	mov	r3, r0
 80021d2:	81bb      	strh	r3, [r7, #12]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	7bba      	ldrb	r2, [r7, #14]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f008 fffb 	bl	800b1d8 <i2c_ReadSingleRegister>
 80021e2:	4603      	mov	r3, r0
 80021e4:	817b      	strh	r3, [r7, #10]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = (int16_t) ((aux_H << 8) | (aux_L));
 80021e6:	89bb      	ldrh	r3, [r7, #12]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	813b      	strh	r3, [r7, #8]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje

	//Retornamos valor
	return aux;
 80021f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <calibrationMPU>:


//Funcion para la calibracion de las mediciones realizadas
float calibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, BasicTimer_Handler_t *ptrBTimerHandler, uint16_t *ptrcountingTimer, uint8_t elementCalibration)
{
 8002200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002204:	b08a      	sub	sp, #40	; 0x28
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	70fb      	strb	r3, [r7, #3]
	//Variables la ejecucion de la calibracion
	int64_t aux_sum = 0;
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint16_t num_samples = 200;
 800221c:	23c8      	movs	r3, #200	; 0xc8
 800221e:	837b      	strh	r3, [r7, #26]
	float offset = 0;
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
	//Realizacion acumulacion de valores
	for (int i = 0; i < num_samples; i++)
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	e019      	b.n	8002260 <calibrationMPU+0x60>
	{
		//Lectura del registro respectivo y acumulacion
		aux_sum += readCalibrationMPU(ptrMPUAccel, elementCalibration);
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	4619      	mov	r1, r3
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff ff85 	bl	8002140 <readCalibrationMPU>
 8002236:	4603      	mov	r3, r0
 8002238:	b21b      	sxth	r3, r3
 800223a:	17da      	asrs	r2, r3, #31
 800223c:	461c      	mov	r4, r3
 800223e:	4615      	mov	r5, r2
 8002240:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002244:	eb12 0804 	adds.w	r8, r2, r4
 8002248:	eb43 0905 	adc.w	r9, r3, r5
 800224c:	e9c7 8908 	strd	r8, r9, [r7, #32]
		//Pausa
		timer_delay(ptrBTimerHandler, ptrcountingTimer, 1);
 8002250:	2201      	movs	r2, #1
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	68b8      	ldr	r0, [r7, #8]
 8002256:	f007 fb15 	bl	8009884 <timer_delay>
	for (int i = 0; i < num_samples; i++)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3301      	adds	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	8b7b      	ldrh	r3, [r7, #26]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	429a      	cmp	r2, r3
 8002266:	dbe1      	blt.n	800222c <calibrationMPU+0x2c>
	}
	//Promedio del eje medido
	 offset = aux_sum/num_samples;
 8002268:	8b7b      	ldrh	r3, [r7, #26]
 800226a:	2200      	movs	r2, #0
 800226c:	469a      	mov	sl, r3
 800226e:	4693      	mov	fp, r2
 8002270:	4652      	mov	r2, sl
 8002272:	465b      	mov	r3, fp
 8002274:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002278:	f7fe fe2c 	bl	8000ed4 <__aeabi_ldivmod>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f7fe fde8 	bl	8000e58 <__aeabi_l2f>
 8002288:	4603      	mov	r3, r0
 800228a:	617b      	str	r3, [r7, #20]
	//Retornar valor
	return offset;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	ee07 3a90 	vmov	s15, r3
}
 8002292:	eeb0 0a67 	vmov.f32	s0, s15
 8002296:	3728      	adds	r7, #40	; 0x28
 8002298:	46bd      	mov	sp, r7
 800229a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080022a0 <getAngle>:


//Funcion para calcular el nuevo angulo de uno de los ejes del girsocopio
float getAngle(MPUAccel_Handler_t *ptrMPUAccel, uint8_t timer, float ang_init, uint8_t axis, int16_t offset_Axis)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	4608      	mov	r0, r1
 80022aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	72fb      	strb	r3, [r7, #11]
 80022b6:	460b      	mov	r3, r1
 80022b8:	72bb      	strb	r3, [r7, #10]
 80022ba:	4613      	mov	r3, r2
 80022bc:	813b      	strh	r3, [r7, #8]
	//Lectura velocidad angular
	float w_Angular= readMPU(ptrMPUAccel, axis, offset_Axis);
 80022be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80022c2:	7abb      	ldrb	r3, [r7, #10]
 80022c4:	4619      	mov	r1, r3
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7ff fdde 	bl	8001e88 <readMPU>
 80022cc:	ed87 0a05 	vstr	s0, [r7, #20]
	//Calculo angulo
	float ang = ang_init + (w_Angular*timer)/1000;
 80022d0:	7afb      	ldrb	r3, [r7, #11]
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022da:	edd7 7a05 	vldr	s15, [r7, #20]
 80022de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e2:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002308 <getAngle+0x68>
 80022e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80022ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f2:	edc7 7a04 	vstr	s15, [r7, #16]

	return ang;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	ee07 3a90 	vmov	s15, r3
}
 80022fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	447a0000 	.word	0x447a0000

0800230c <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002328:	eeb0 0a67 	vmov.f32	s0, s15
 800232c:	4610      	mov	r0, r2
 800232e:	f009 fb11 	bl	800b954 <updateDuttyCyclePercentageFloat>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf0c      	ite	eq
 8002350:	2301      	moveq	r3, #1
 8002352:	2300      	movne	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	4619      	mov	r1, r3
 8002370:	4610      	mov	r0, r2
 8002372:	f008 fd3b 	bl	800adec <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	b2db      	uxtb	r3, r3
 8002386:	4619      	mov	r1, r3
 8002388:	4610      	mov	r0, r2
 800238a:	f009 fa1d 	bl	800b7c8 <statusPolarityPWM>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <build_Operation>:
#include <math.h>


//-------------------------Funcion para la definicion de operaciones--------------------------
void build_Operation(Parameters_Operation_t *prtList, Parameter_build_t *prtbuild, double finishline_x, double finishline_y)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af00      	add	r7, sp, #0
 800239e:	6178      	str	r0, [r7, #20]
 80023a0:	6139      	str	r1, [r7, #16]
 80023a2:	ed87 0b02 	vstr	d0, [r7, #8]
 80023a6:	ed87 1b00 	vstr	d1, [r7]
	//Definicion el vector director
	double delta[2] = {finishline_x - prtbuild->initline_x, finishline_y - prtbuild->initline_y};
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023b4:	f7fd ff80 	bl	80002b8 <__aeabi_dsub>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023ca:	f7fd ff75 	bl	80002b8 <__aeabi_dsub>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	//Calculo angululo entre vectores directores
	double grad_turn_res = calculed_ang_turn(prtbuild->delta_before, delta);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	3310      	adds	r3, #16
 80023da:	f107 0218 	add.w	r2, r7, #24
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fad1 	bl	8002988 <calculed_ang_turn>
 80023e6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	//condicional de cambio de angulo
	if(grad_turn_res == 0)
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023f6:	f7fe fb7f 	bl	8000af8 <__aeabi_dcmpeq>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00e      	beq.n	800241e <build_Operation+0x86>
	{
		//agregar operacion de linea recta
		 add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002406:	ed9f 2b2a 	vldr	d2, [pc, #168]	; 80024b0 <build_Operation+0x118>
 800240a:	ed97 1b00 	vldr	d1, [r7]
 800240e:	ed97 0b02 	vldr	d0, [r7, #8]
 8002412:	2201      	movs	r2, #1
 8002414:	4619      	mov	r1, r3
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f000 f84e 	bl	80024b8 <add_Operation>
 800241c:	e030      	b.n	8002480 <build_Operation+0xe8>
	}
	else
	{
		//Agregar operacion de rotacion
		if(prtbuild->routelist>0){ prtbuild->number_operation++; }
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <build_Operation+0xa0>
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800242e:	3301      	adds	r3, #1
 8002430:	b2da      	uxtb	r2, r3
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		add_Operation(prtList, prtbuild->number_operation, TURN, 0, 0, grad_turn_res);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800243e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002442:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80024b0 <build_Operation+0x118>
 8002446:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80024b0 <build_Operation+0x118>
 800244a:	2202      	movs	r2, #2
 800244c:	4619      	mov	r1, r3
 800244e:	6978      	ldr	r0, [r7, #20]
 8002450:	f000 f832 	bl	80024b8 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800245a:	3301      	adds	r3, #1
 800245c:	b2da      	uxtb	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800246a:	ed9f 2b11 	vldr	d2, [pc, #68]	; 80024b0 <build_Operation+0x118>
 800246e:	ed97 1b00 	vldr	d1, [r7]
 8002472:	ed97 0b02 	vldr	d0, [r7, #8]
 8002476:	2201      	movs	r2, #1
 8002478:	4619      	mov	r1, r3
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f000 f81c 	bl	80024b8 <add_Operation>
	}
	//Se redefine los valores iniciales
	prtbuild->delta_before[0] = delta[0];
 8002480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002484:	6939      	ldr	r1, [r7, #16]
 8002486:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtbuild->delta_before[1] = delta[1];
 800248a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800248e:	6939      	ldr	r1, [r7, #16]
 8002490:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prtbuild->initline_x = finishline_x;
 8002494:	6939      	ldr	r1, [r7, #16]
 8002496:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800249a:	e9c1 2300 	strd	r2, r3, [r1]
	prtbuild->initline_y = finishline_y;
 800249e:	6939      	ldr	r1, [r7, #16]
 80024a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80024a8:	bf00      	nop
 80024aa:	3730      	adds	r7, #48	; 0x30
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
	...

080024b8 <add_Operation>:

void add_Operation(Parameters_Operation_t *prtList, uint8_t num_operation, uint8_t type_operation, double coor_x, double coor_y, double grad_turn)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	61f8      	str	r0, [r7, #28]
 80024c0:	460b      	mov	r3, r1
 80024c2:	ed87 0b04 	vstr	d0, [r7, #16]
 80024c6:	ed87 1b02 	vstr	d1, [r7, #8]
 80024ca:	ed87 2b00 	vstr	d2, [r7]
 80024ce:	76fb      	strb	r3, [r7, #27]
 80024d0:	4613      	mov	r3, r2
 80024d2:	76bb      	strb	r3, [r7, #26]
	prtList[num_operation].operacion = type_operation;
 80024d4:	7efb      	ldrb	r3, [r7, #27]
 80024d6:	015b      	lsls	r3, r3, #5
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	4413      	add	r3, r2
 80024dc:	7eba      	ldrb	r2, [r7, #26]
 80024de:	701a      	strb	r2, [r3, #0]
	prtList[num_operation].x_destination = coor_x;
 80024e0:	7efb      	ldrb	r3, [r7, #27]
 80024e2:	015b      	lsls	r3, r3, #5
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	18d1      	adds	r1, r2, r3
 80024e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prtList[num_operation].y_destination = coor_y;
 80024f0:	7efb      	ldrb	r3, [r7, #27]
 80024f2:	015b      	lsls	r3, r3, #5
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	18d1      	adds	r1, r2, r3
 80024f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtList[num_operation].grad_Rotative = grad_turn;
 8002500:	7efb      	ldrb	r3, [r7, #27]
 8002502:	015b      	lsls	r3, r3, #5
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	18d1      	adds	r1, r2, r3
 8002508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800250c:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002510:	bf00      	nop
 8002512:	3724      	adds	r7, #36	; 0x24
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	0000      	movs	r0, r0
	...

08002520 <change_position>:


//-----------------Funciones para definir los parametros de la poscion teorica--------------
void change_position(Parameters_Path_t *ptrParameterPath, int distance, double starcoor_x, double starcoor_y)
{
 8002520:	b5b0      	push	{r4, r5, r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6178      	str	r0, [r7, #20]
 8002528:	6139      	str	r1, [r7, #16]
 800252a:	ed87 0b02 	vstr	d0, [r7, #8]
 800252e:	ed87 1b00 	vstr	d1, [r7]
	//Definimos la distancia
	 ptrParameterPath->line_Distance = distance;                  //[mm]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
	//Calculamos la posicicion
	double pot_x = ptrParameterPath->line_Distance*cos((ptrParameterPath->rotative_Grad*M_PI)/180);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe f809 	bl	8000554 <__aeabi_i2d>
 8002542:	4604      	mov	r4, r0
 8002544:	460d      	mov	r5, r1
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe f802 	bl	8000554 <__aeabi_i2d>
 8002550:	a33b      	add	r3, pc, #236	; (adr r3, 8002640 <change_position+0x120>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fe f867 	bl	8000628 <__aeabi_dmul>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	4b38      	ldr	r3, [pc, #224]	; (8002648 <change_position+0x128>)
 8002568:	f7fe f988 	bl	800087c <__aeabi_ddiv>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	ec43 2b17 	vmov	d7, r2, r3
 8002574:	eeb0 0a47 	vmov.f32	s0, s14
 8002578:	eef0 0a67 	vmov.f32	s1, s15
 800257c:	f00e fffc 	bl	8011578 <cos>
 8002580:	ec53 2b10 	vmov	r2, r3, d0
 8002584:	4620      	mov	r0, r4
 8002586:	4629      	mov	r1, r5
 8002588:	f7fe f84e 	bl	8000628 <__aeabi_dmul>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double pot_y = ptrParameterPath->line_Distance*sin((ptrParameterPath->rotative_Grad*M_PI)/180);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd ffdb 	bl	8000554 <__aeabi_i2d>
 800259e:	4604      	mov	r4, r0
 80025a0:	460d      	mov	r5, r1
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd ffd4 	bl	8000554 <__aeabi_i2d>
 80025ac:	a324      	add	r3, pc, #144	; (adr r3, 8002640 <change_position+0x120>)
 80025ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b2:	f7fe f839 	bl	8000628 <__aeabi_dmul>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4610      	mov	r0, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	4b21      	ldr	r3, [pc, #132]	; (8002648 <change_position+0x128>)
 80025c4:	f7fe f95a 	bl	800087c <__aeabi_ddiv>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	ec43 2b17 	vmov	d7, r2, r3
 80025d0:	eeb0 0a47 	vmov.f32	s0, s14
 80025d4:	eef0 0a67 	vmov.f32	s1, s15
 80025d8:	f00f f86a 	bl	80116b0 <sin>
 80025dc:	ec53 2b10 	vmov	r2, r3, d0
 80025e0:	4620      	mov	r0, r4
 80025e2:	4629      	mov	r1, r5
 80025e4:	f7fe f820 	bl	8000628 <__aeabi_dmul>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Guardamos Coordenadas iniciales
	ptrParameterPath->start_position_x = starcoor_x;
 80025f0:	6979      	ldr	r1, [r7, #20]
 80025f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025f6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrParameterPath->start_position_y = starcoor_y;
 80025fa:	6979      	ldr	r1, [r7, #20]
 80025fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002600:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x += pot_x;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800260a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800260e:	f7fd fe55 	bl	80002bc <__adddf3>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	6979      	ldr	r1, [r7, #20]
 8002618:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrParameterPath->goal_Position_y += pot_y;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8002622:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002626:	f7fd fe49 	bl	80002bc <__adddf3>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	6979      	ldr	r1, [r7, #20]
 8002630:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 8002634:	bf00      	nop
 8002636:	3728      	adds	r7, #40	; 0x28
 8002638:	46bd      	mov	sp, r7
 800263a:	bdb0      	pop	{r4, r5, r7, pc}
 800263c:	f3af 8000 	nop.w
 8002640:	54442d18 	.word	0x54442d18
 8002644:	400921fb 	.word	0x400921fb
 8002648:	40668000 	.word	0x40668000
 800264c:	00000000 	.word	0x00000000

08002650 <change_coordinates_position>:

void change_coordinates_position(Parameters_Path_t *ptrParameterPath, double goalcoor_x, double goalcoor_y, double starcoor_x, double starcoor_y)
{
 8002650:	b5b0      	push	{r4, r5, r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6278      	str	r0, [r7, #36]	; 0x24
 8002658:	ed87 0b06 	vstr	d0, [r7, #24]
 800265c:	ed87 1b04 	vstr	d1, [r7, #16]
 8002660:	ed87 2b02 	vstr	d2, [r7, #8]
 8002664:	ed87 3b00 	vstr	d3, [r7]
	//Guardamos Coordenadas iniciales
	ptrParameterPath->start_position_x = starcoor_x;
 8002668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800266a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800266e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrParameterPath->start_position_y = starcoor_y;
 8002672:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002678:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x = goalcoor_x;
 800267c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002682:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrParameterPath->goal_Position_y = goalcoor_y;
 8002686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002688:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800268c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	//Definimos la distancia
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800269c:	f7fd fe0c 	bl	80002b8 <__aeabi_dsub>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	ec43 2b17 	vmov	d7, r2, r3
 80026a8:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8002720 <change_coordinates_position+0xd0>
 80026ac:	eeb0 0a47 	vmov.f32	s0, s14
 80026b0:	eef0 0a67 	vmov.f32	s1, s15
 80026b4:	f00f f88a 	bl	80117cc <pow>
 80026b8:	ec55 4b10 	vmov	r4, r5, d0
			pow(ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y,2));;                  //[mm]
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80026c8:	f7fd fdf6 	bl	80002b8 <__aeabi_dsub>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	ec43 2b17 	vmov	d7, r2, r3
 80026d4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002720 <change_coordinates_position+0xd0>
 80026d8:	eeb0 0a47 	vmov.f32	s0, s14
 80026dc:	eef0 0a67 	vmov.f32	s1, s15
 80026e0:	f00f f874 	bl	80117cc <pow>
 80026e4:	ec53 2b10 	vmov	r2, r3, d0
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 80026e8:	4620      	mov	r0, r4
 80026ea:	4629      	mov	r1, r5
 80026ec:	f7fd fde6 	bl	80002bc <__adddf3>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	ec43 2b17 	vmov	d7, r2, r3
 80026f8:	eeb0 0a47 	vmov.f32	s0, s14
 80026fc:	eef0 0a67 	vmov.f32	s1, s15
 8002700:	f00f f8d4 	bl	80118ac <sqrt>
 8002704:	ec53 2b10 	vmov	r2, r3, d0
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	f7fe fa3c 	bl	8000b88 <__aeabi_d2iz>
 8002710:	4602      	mov	r2, r0
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	641a      	str	r2, [r3, #64]	; 0x40

}
 8002716:	bf00      	nop
 8002718:	3728      	adds	r7, #40	; 0x28
 800271a:	46bd      	mov	sp, r7
 800271c:	bdb0      	pop	{r4, r5, r7, pc}
 800271e:	bf00      	nop
 8002720:	00000000 	.word	0x00000000
 8002724:	40000000 	.word	0x40000000

08002728 <calculation_parameter_distance>:

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8002728:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800272c:	b08a      	sub	sp, #40	; 0x28
 800272e:	af00      	add	r7, sp, #0
 8002730:	6178      	str	r0, [r7, #20]
	//Calculo del vector director de la recta
	double a = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800273e:	f7fd fdbb 	bl	80002b8 <__aeabi_dsub>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double b = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002756:	f7fd fdaf 	bl	80002b8 <__aeabi_dsub>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->parametersStraight.magnitude_d = sqrt(pow(a,2)+pow(b,2));
 8002762:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8002870 <calculation_parameter_distance+0x148>
 8002766:	ed97 0b08 	vldr	d0, [r7, #32]
 800276a:	f00f f82f 	bl	80117cc <pow>
 800276e:	ec59 8b10 	vmov	r8, r9, d0
 8002772:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8002870 <calculation_parameter_distance+0x148>
 8002776:	ed97 0b06 	vldr	d0, [r7, #24]
 800277a:	f00f f827 	bl	80117cc <pow>
 800277e:	ec53 2b10 	vmov	r2, r3, d0
 8002782:	4640      	mov	r0, r8
 8002784:	4649      	mov	r1, r9
 8002786:	f7fd fd99 	bl	80002bc <__adddf3>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	ec43 2b17 	vmov	d7, r2, r3
 8002792:	eeb0 0a47 	vmov.f32	s0, s14
 8002796:	eef0 0a67 	vmov.f32	s1, s15
 800279a:	f00f f887 	bl	80118ac <sqrt>
 800279e:	eeb0 7a40 	vmov.f32	s14, s0
 80027a2:	eef0 7a60 	vmov.f32	s15, s1
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->parametersStraight.proy_A = a;
 80027ac:	6979      	ldr	r1, [r7, #20]
 80027ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->parametersStraight.proy_B = b;
 80027b6:	6979      	ldr	r1, [r7, #20]
 80027b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->parametersStraight.proy_C = -1*a*ptrParameterPath->start_position_x - b*ptrParameterPath->start_position_y;
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80027d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027d6:	f7fd ff27 	bl	8000628 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4690      	mov	r8, r2
 80027e0:	4699      	mov	r9, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80027e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027ec:	f7fd ff1c 	bl	8000628 <__aeabi_dmul>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4640      	mov	r0, r8
 80027f6:	4649      	mov	r1, r9
 80027f8:	f7fd fd5e 	bl	80002b8 <__aeabi_dsub>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	6979      	ldr	r1, [r7, #20]
 8002802:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->parametersStraight.dis_point_A = b;
 8002806:	6979      	ldr	r1, [r7, #20]
 8002808:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800280c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->parametersStraight.dis_point_B = -1*a;
 8002810:	6a3c      	ldr	r4, [r7, #32]
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->parametersStraight.dis_point_C = -1*b*ptrParameterPath->start_position_x + a*ptrParameterPath->start_position_y;
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002830:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002834:	f7fd fef8 	bl	8000628 <__aeabi_dmul>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4614      	mov	r4, r2
 800283e:	461d      	mov	r5, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002846:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800284a:	f7fd feed 	bl	8000628 <__aeabi_dmul>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4620      	mov	r0, r4
 8002854:	4629      	mov	r1, r5
 8002856:	f7fd fd31 	bl	80002bc <__adddf3>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	6979      	ldr	r1, [r7, #20]
 8002860:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8002864:	bf00      	nop
 8002866:	3728      	adds	r7, #40	; 0x28
 8002868:	46bd      	mov	sp, r7
 800286a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800286e:	bf00      	nop
 8002870:	00000000 	.word	0x00000000
 8002874:	40000000 	.word	0x40000000

08002878 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double position_x, double position_y)
{
 8002878:	b5b0      	push	{r4, r5, r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	6178      	str	r0, [r7, #20]
 8002880:	ed87 0b02 	vstr	d0, [r7, #8]
 8002884:	ed87 1b00 	vstr	d1, [r7]
	//Calculo
	double distance = -1*((ptrParameterPath->parametersStraight.dis_point_A*position_x + ptrParameterPath->parametersStraight.dis_point_B*position_y
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800288e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002892:	f7fd fec9 	bl	8000628 <__aeabi_dmul>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4614      	mov	r4, r2
 800289c:	461d      	mov	r5, r3
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80028a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028a8:	f7fd febe 	bl	8000628 <__aeabi_dmul>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4620      	mov	r0, r4
 80028b2:	4629      	mov	r1, r5
 80028b4:	f7fd fd02 	bl	80002bc <__adddf3>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
			+ ptrParameterPath->parametersStraight.dis_point_C)/ptrParameterPath->parametersStraight.magnitude_d);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80028c6:	f7fd fcf9 	bl	80002bc <__adddf3>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4610      	mov	r0, r2
 80028d0:	4619      	mov	r1, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	f7fd ffd0 	bl	800087c <__aeabi_ddiv>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->parametersStraight.dis_point_A*position_x + ptrParameterPath->parametersStraight.dis_point_B*position_y
 80028e0:	4611      	mov	r1, r2
 80028e2:	61b9      	str	r1, [r7, #24]
 80028e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028e8:	61fb      	str	r3, [r7, #28]
	//Retornar
	return distance;
 80028ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ee:	ec43 2b17 	vmov	d7, r2, r3
}
 80028f2:	eeb0 0a47 	vmov.f32	s0, s14
 80028f6:	eef0 0a67 	vmov.f32	s1, s15
 80028fa:	3720      	adds	r7, #32
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bdb0      	pop	{r4, r5, r7, pc}

08002900 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double position_x, double position_y)
{
 8002900:	b5b0      	push	{r4, r5, r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	6178      	str	r0, [r7, #20]
 8002908:	ed87 0b02 	vstr	d0, [r7, #8]
 800290c:	ed87 1b00 	vstr	d1, [r7]
	//Calculo
	double distance_Tra = (ptrParameterPath->parametersStraight.proy_A*position_x + ptrParameterPath->parametersStraight.proy_B*position_y
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002916:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800291a:	f7fd fe85 	bl	8000628 <__aeabi_dmul>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4614      	mov	r4, r2
 8002924:	461d      	mov	r5, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800292c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002930:	f7fd fe7a 	bl	8000628 <__aeabi_dmul>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4620      	mov	r0, r4
 800293a:	4629      	mov	r1, r5
 800293c:	f7fd fcbe 	bl	80002bc <__adddf3>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
			+ ptrParameterPath->parametersStraight.proy_C)/ptrParameterPath->parametersStraight.magnitude_d;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800294e:	f7fd fcb5 	bl	80002bc <__adddf3>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->parametersStraight.proy_A*position_x + ptrParameterPath->parametersStraight.proy_B*position_y
 8002960:	f7fd ff8c 	bl	800087c <__aeabi_ddiv>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 800296c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002970:	ec43 2b17 	vmov	d7, r2, r3
}
 8002974:	eeb0 0a47 	vmov.f32	s0, s14
 8002978:	eef0 0a67 	vmov.f32	s1, s15
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bdb0      	pop	{r4, r5, r7, pc}
 8002982:	0000      	movs	r0, r0
 8002984:	0000      	movs	r0, r0
	...

08002988 <calculed_ang_turn>:


//------------------------------Funciones auxiliares-----------------------------

double calculed_ang_turn(double vector_a[2], double vector_b[2])
{
 8002988:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800298c:	b08a      	sub	sp, #40	; 0x28
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
    //Calculo de los diferentes elementos
    double dot = vector_a[0]*vector_b[1]-vector_b[0]*vector_a[1];
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	3308      	adds	r3, #8
 800299e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a2:	f7fd fe41 	bl	8000628 <__aeabi_dmul>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4690      	mov	r8, r2
 80029ac:	4699      	mov	r9, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3308      	adds	r3, #8
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	f7fd fe34 	bl	8000628 <__aeabi_dmul>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4640      	mov	r0, r8
 80029c6:	4649      	mov	r1, r9
 80029c8:	f7fd fc76 	bl	80002b8 <__aeabi_dsub>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double magvector_a = sqrt(pow(vector_a[0],2)+pow(vector_a[1],2));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	ed93 7b00 	vldr	d7, [r3]
 80029da:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8002b88 <calculed_ang_turn+0x200>
 80029de:	eeb0 0a47 	vmov.f32	s0, s14
 80029e2:	eef0 0a67 	vmov.f32	s1, s15
 80029e6:	f00e fef1 	bl	80117cc <pow>
 80029ea:	ec59 8b10 	vmov	r8, r9, d0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3308      	adds	r3, #8
 80029f2:	ed93 7b00 	vldr	d7, [r3]
 80029f6:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8002b88 <calculed_ang_turn+0x200>
 80029fa:	eeb0 0a47 	vmov.f32	s0, s14
 80029fe:	eef0 0a67 	vmov.f32	s1, s15
 8002a02:	f00e fee3 	bl	80117cc <pow>
 8002a06:	ec53 2b10 	vmov	r2, r3, d0
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	4649      	mov	r1, r9
 8002a0e:	f7fd fc55 	bl	80002bc <__adddf3>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	ec43 2b17 	vmov	d7, r2, r3
 8002a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a1e:	eef0 0a67 	vmov.f32	s1, s15
 8002a22:	f00e ff43 	bl	80118ac <sqrt>
 8002a26:	ed87 0b04 	vstr	d0, [r7, #16]
    double magvector_b = sqrt(pow(vector_b[0],2)+pow(vector_b[1],2));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	ed93 7b00 	vldr	d7, [r3]
 8002a30:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8002b88 <calculed_ang_turn+0x200>
 8002a34:	eeb0 0a47 	vmov.f32	s0, s14
 8002a38:	eef0 0a67 	vmov.f32	s1, s15
 8002a3c:	f00e fec6 	bl	80117cc <pow>
 8002a40:	ec59 8b10 	vmov	r8, r9, d0
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	3308      	adds	r3, #8
 8002a48:	ed93 7b00 	vldr	d7, [r3]
 8002a4c:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8002b88 <calculed_ang_turn+0x200>
 8002a50:	eeb0 0a47 	vmov.f32	s0, s14
 8002a54:	eef0 0a67 	vmov.f32	s1, s15
 8002a58:	f00e feb8 	bl	80117cc <pow>
 8002a5c:	ec53 2b10 	vmov	r2, r3, d0
 8002a60:	4640      	mov	r0, r8
 8002a62:	4649      	mov	r1, r9
 8002a64:	f7fd fc2a 	bl	80002bc <__adddf3>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	ec43 2b17 	vmov	d7, r2, r3
 8002a70:	eeb0 0a47 	vmov.f32	s0, s14
 8002a74:	eef0 0a67 	vmov.f32	s1, s15
 8002a78:	f00e ff18 	bl	80118ac <sqrt>
 8002a7c:	ed87 0b02 	vstr	d0, [r7, #8]
    double ang_between_vector = acos((vector_a[0]*vector_b[0]+vector_a[1]*vector_b[1])/(magvector_b*magvector_a));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f7fd fdcc 	bl	8000628 <__aeabi_dmul>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4690      	mov	r8, r2
 8002a96:	4699      	mov	r9, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3308      	adds	r3, #8
 8002a9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa8:	f7fd fdbe 	bl	8000628 <__aeabi_dmul>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4640      	mov	r0, r8
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	f7fd fc02 	bl	80002bc <__adddf3>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4690      	mov	r8, r2
 8002abe:	4699      	mov	r9, r3
 8002ac0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ac4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ac8:	f7fd fdae 	bl	8000628 <__aeabi_dmul>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4640      	mov	r0, r8
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	f7fd fed2 	bl	800087c <__aeabi_ddiv>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	ec43 2b17 	vmov	d7, r2, r3
 8002ae0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ae4:	eef0 0a67 	vmov.f32	s1, s15
 8002ae8:	f00e fe3a 	bl	8011760 <acos>
 8002aec:	ed87 0b08 	vstr	d0, [r7, #32]
    //conversion a grados
    ang_between_vector = (ang_between_vector*180)/M_PI;
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <calculed_ang_turn+0x220>)
 8002af6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002afa:	f7fd fd95 	bl	8000628 <__aeabi_dmul>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4610      	mov	r0, r2
 8002b04:	4619      	mov	r1, r3
 8002b06:	a322      	add	r3, pc, #136	; (adr r3, 8002b90 <calculed_ang_turn+0x208>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f7fd feb6 	bl	800087c <__aeabi_ddiv>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //agregamos la direccion de giro
    if(dot<0){ ang_between_vector = -ang_between_vector;}
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b24:	f7fd fff2 	bl	8000b0c <__aeabi_dcmplt>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <calculed_ang_turn+0x1b2>
 8002b2e:	6a3c      	ldr	r4, [r7, #32]
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002b36:	e9c7 4508 	strd	r4, r5, [r7, #32]
    //Aproximamos a cero si el angulo es menor a un valor
    if((ang_between_vector>-0.1) && (ang_between_vector<0.1)){ ang_between_vector = 0; }
 8002b3a:	a317      	add	r3, pc, #92	; (adr r3, 8002b98 <calculed_ang_turn+0x210>)
 8002b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b40:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b44:	f7fe f800 	bl	8000b48 <__aeabi_dcmpgt>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00f      	beq.n	8002b6e <calculed_ang_turn+0x1e6>
 8002b4e:	a314      	add	r3, pc, #80	; (adr r3, 8002ba0 <calculed_ang_turn+0x218>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b58:	f7fd ffd8 	bl	8000b0c <__aeabi_dcmplt>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <calculed_ang_turn+0x1e6>
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //Retornar valor
    return ang_between_vector;
 8002b6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b72:	ec43 2b17 	vmov	d7, r2, r3
}
 8002b76:	eeb0 0a47 	vmov.f32	s0, s14
 8002b7a:	eef0 0a67 	vmov.f32	s1, s15
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b86:	bf00      	nop
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	40000000 	.word	0x40000000
 8002b90:	54442d18 	.word	0x54442d18
 8002b94:	400921fb 	.word	0x400921fb
 8002b98:	9999999a 	.word	0x9999999a
 8002b9c:	bfb99999 	.word	0xbfb99999
 8002ba0:	9999999a 	.word	0x9999999a
 8002ba4:	3fb99999 	.word	0x3fb99999
 8002ba8:	40668000 	.word	0x40668000

08002bac <build_grid_map>:
int8_t ne_pos_x[8] = {-1, 0, 1, 1, 1, 0, -1, -1};
int8_t ne_pos_y[8] = {1, 1, 1, 0, -1, -1, -1, 0};

// Función para crear la malla de celdas
void build_grid_map(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float separation)
{  
 8002bac:	b5b0      	push	{r4, r5, r7, lr}
 8002bae:	b08e      	sub	sp, #56	; 0x38
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8002bba:	72fb      	strb	r3, [r7, #11]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	72bb      	strb	r3, [r7, #10]
    float rel_x;
    float rel_y;

    //---------------------Asignacion de informacion------------------------
    // Llenar la matriz de celdas con valores predeterminados
    for (int i = 0; i < row; i++) {
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc4:	e0fa      	b.n	8002dbc <build_grid_map+0x210>
        for (int j = 0; j < colum; j++) {
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bca:	e0ef      	b.n	8002dac <build_grid_map+0x200>
            // Asignar valores a la celda
            grid[i][j].id[0] = 'A' + j;             // Asignar un identificador simple, 'A', 'B', ...
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd2:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8002bd6:	fb01 f202 	mul.w	r2, r1, r2
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	440a      	add	r2, r1
 8002bde:	3341      	adds	r3, #65	; 0x41
 8002be0:	b2d8      	uxtb	r0, r3
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	2158      	movs	r1, #88	; 0x58
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	4602      	mov	r2, r0
 8002bee:	701a      	strb	r2, [r3, #0]
            grid[i][j].id[1] = '0' + i;             // Asignar una cifra simple, '0', '1', '2', ...
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf6:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8002bfa:	fb01 f202 	mul.w	r2, r1, r2
 8002bfe:	68f9      	ldr	r1, [r7, #12]
 8002c00:	440a      	add	r2, r1
 8002c02:	3330      	adds	r3, #48	; 0x30
 8002c04:	b2d8      	uxtb	r0, r3
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	2158      	movs	r1, #88	; 0x58
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3301      	adds	r3, #1
 8002c12:	4602      	mov	r2, r0
 8002c14:	701a      	strb	r2, [r3, #0]
            grid[i][j].index_row = i;               // Asignar el indice de la fila
 8002c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c18:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002c1c:	fb02 f303 	mul.w	r3, r2, r3
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	441a      	add	r2, r3
 8002c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c26:	b2d8      	uxtb	r0, r3
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	2158      	movs	r1, #88	; 0x58
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3302      	adds	r3, #2
 8002c34:	4602      	mov	r2, r0
 8002c36:	701a      	strb	r2, [r3, #0]
            grid[i][j].index_col = j;               // Asignar el indice de la columna
 8002c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	441a      	add	r2, r3
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	b2d8      	uxtb	r0, r3
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	2158      	movs	r1, #88	; 0x58
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3303      	adds	r3, #3
 8002c56:	4602      	mov	r2, r0
 8002c58:	701a      	strb	r2, [r3, #0]
            grid[i][j].coor_x = separation * j;     // Asignar la posición x de la celda
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	441a      	add	r2, r3
 8002c72:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	2158      	movs	r1, #88	; 0x58
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3304      	adds	r3, #4
 8002c86:	edc3 7a00 	vstr	s15, [r3]
            grid[i][j].coor_y = separation * i;     // Asignar la posición y de la celda
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8c:	ee07 3a90 	vmov	s15, r3
 8002c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c96:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	441a      	add	r2, r3
 8002ca2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	2158      	movs	r1, #88	; 0x58
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	edc3 7a00 	vstr	s15, [r3]
            grid[i][j].status = 0;                  // Inicializar el estado de la celda;             
 8002cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbc:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002cc0:	fb02 f303 	mul.w	r3, r2, r3
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	441a      	add	r2, r3
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	2158      	movs	r1, #88	; 0x58
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3354      	adds	r3, #84	; 0x54
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
            // Asignacion de vecinos a la celda actual
            for (uint8_t k = 0; k < 8; k++) {
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002cde:	e05e      	b.n	8002d9e <build_grid_map+0x1f2>
                int8_t index_row_ne = i + ne_pos_x[k]; 
 8002ce0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ce4:	4a9a      	ldr	r2, [pc, #616]	; (8002f50 <build_grid_map+0x3a4>)
 8002ce6:	56d3      	ldrsb	r3, [r2, r3]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	75fb      	strb	r3, [r7, #23]
                int8_t index_colum_ne = j + ne_pos_y[k]; 
 8002cf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cf8:	4a96      	ldr	r2, [pc, #600]	; (8002f54 <build_grid_map+0x3a8>)
 8002cfa:	56d3      	ldrsb	r3, [r2, r3]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	75bb      	strb	r3, [r7, #22]
                // Se evalua si el indice esta dentro de la malla
                if (index_row_ne >= 0 && index_row_ne < row && index_colum_ne >= 0 && index_colum_ne < colum) 
 8002d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	db2e      	blt.n	8002d6e <build_grid_map+0x1c2>
 8002d10:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	da29      	bge.n	8002d6e <build_grid_map+0x1c2>
 8002d1a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	db25      	blt.n	8002d6e <build_grid_map+0x1c2>
 8002d22:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002d26:	7abb      	ldrb	r3, [r7, #10]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	da20      	bge.n	8002d6e <build_grid_map+0x1c2>
                {
                    grid[i][j].neighbors.ptrCellMap[k] = &grid[index_row_ne][index_colum_ne];
 8002d2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d30:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002d34:	fb02 f303 	mul.w	r3, r2, r3
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	18d0      	adds	r0, r2, r3
 8002d3c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d42:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	68f9      	ldr	r1, [r7, #12]
 8002d4c:	4419      	add	r1, r3
 8002d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d52:	2458      	movs	r4, #88	; 0x58
 8002d54:	fb04 f202 	mul.w	r2, r4, r2
 8002d58:	4402      	add	r2, r0
 8002d5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d5c:	2416      	movs	r4, #22
 8002d5e:	fb04 f000 	mul.w	r0, r4, r0
 8002d62:	4403      	add	r3, r0
 8002d64:	3302      	adds	r3, #2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	e012      	b.n	8002d94 <build_grid_map+0x1e8>
                } 
                else 
                {
                    grid[i][j].neighbors.ptrCellMap[k] = NULL;                    
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d70:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002d74:	fb02 f303 	mul.w	r3, r2, r3
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	441a      	add	r2, r3
 8002d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d82:	2016      	movs	r0, #22
 8002d84:	fb00 f101 	mul.w	r1, r0, r1
 8002d88:	440b      	add	r3, r1
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	2200      	movs	r2, #0
 8002d92:	605a      	str	r2, [r3, #4]
            for (uint8_t k = 0; k < 8; k++) {
 8002d94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002da2:	2b07      	cmp	r3, #7
 8002da4:	d99c      	bls.n	8002ce0 <build_grid_map+0x134>
        for (int j = 0; j < colum; j++) {
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	3301      	adds	r3, #1
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
 8002dac:	7abb      	ldrb	r3, [r7, #10]
 8002dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002db0:	429a      	cmp	r2, r3
 8002db2:	f6ff af0b 	blt.w	8002bcc <build_grid_map+0x20>
    for (int i = 0; i < row; i++) {
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	3301      	adds	r3, #1
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
 8002dbc:	7afb      	ldrb	r3, [r7, #11]
 8002dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	f6ff af00 	blt.w	8002bc6 <build_grid_map+0x1a>
        }
    }
    
    //------------------Distancias entre celdas------------------------
    //Se calcula la distancia de cada celda vecina
    for (int i = 0; i < row; i++) {
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dca:	e0b6      	b.n	8002f3a <build_grid_map+0x38e>
        for (int j = 0; j < colum; j++) {
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd0:	e0ab      	b.n	8002f2a <build_grid_map+0x37e>
            for (uint8_t k = 0; k < 8; k++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd8:	e09f      	b.n	8002f1a <build_grid_map+0x36e>
            {    
                if(grid[i][j].neighbors.ptrCellMap[k] != NULL)
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002de0:	fb02 f303 	mul.w	r3, r2, r3
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	441a      	add	r2, r3
 8002de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dee:	2016      	movs	r0, #22
 8002df0:	fb00 f101 	mul.w	r1, r0, r1
 8002df4:	440b      	add	r3, r1
 8002df6:	3302      	adds	r3, #2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d072      	beq.n	8002ee8 <build_grid_map+0x33c>
                {
                    //Calculo vector relativo
                    rel_x = grid[i][j].neighbors.ptrCellMap[k]->coor_x - grid[i][j].coor_x;
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	441a      	add	r2, r3
 8002e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e16:	2016      	movs	r0, #22
 8002e18:	fb00 f101 	mul.w	r1, r0, r1
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3302      	adds	r3, #2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002e30:	fb02 f303 	mul.w	r3, r2, r3
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	441a      	add	r2, r3
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	2158      	movs	r1, #88	; 0x58
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	3304      	adds	r3, #4
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4c:	edc7 7a07 	vstr	s15, [r7, #28]
                    rel_y = grid[i][j].neighbors.ptrCellMap[k]->coor_y - grid[i][j].coor_y;
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	441a      	add	r2, r3
 8002e5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e64:	2016      	movs	r0, #22
 8002e66:	fb00 f101 	mul.w	r1, r0, r1
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	441a      	add	r2, r3
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	2158      	movs	r1, #88	; 0x58
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	3308      	adds	r3, #8
 8002e92:	edd3 7a00 	vldr	s15, [r3]
 8002e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9a:	edc7 7a06 	vstr	s15, [r7, #24]
                    //Ingresamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = sqrtf(rel_x * rel_x + rel_y * rel_y);
 8002e9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ea2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ea6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002eaa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002eb8:	fb02 f303 	mul.w	r3, r2, r3
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	18d4      	adds	r4, r2, r3
 8002ec0:	f897 5023 	ldrb.w	r5, [r7, #35]	; 0x23
 8002ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec8:	f00e fd1c 	bl	8011904 <sqrtf>
 8002ecc:	eef0 7a40 	vmov.f32	s15, s0
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	2216      	movs	r2, #22
 8002ed4:	fb02 f303 	mul.w	r3, r2, r3
 8002ed8:	442b      	add	r3, r5
 8002eda:	330a      	adds	r3, #10
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4423      	add	r3, r4
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	edc3 7a00 	vstr	s15, [r3]
 8002ee6:	e013      	b.n	8002f10 <build_grid_map+0x364>
                }
                else
                {
                    //Ingreamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = -1.0f;
 8002ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eea:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	441a      	add	r2, r3
 8002ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002efc:	2016      	movs	r0, #22
 8002efe:	fb00 f101 	mul.w	r1, r0, r1
 8002f02:	440b      	add	r3, r1
 8002f04:	330a      	adds	r3, #10
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <build_grid_map+0x3ac>)
 8002f0e:	601a      	str	r2, [r3, #0]
            for (uint8_t k = 0; k < 8; k++)
 8002f10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f14:	3301      	adds	r3, #1
 8002f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f1e:	2b07      	cmp	r3, #7
 8002f20:	f67f af5b 	bls.w	8002dda <build_grid_map+0x22e>
        for (int j = 0; j < colum; j++) {
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	3301      	adds	r3, #1
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	7abb      	ldrb	r3, [r7, #10]
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	f6ff af4f 	blt.w	8002dd2 <build_grid_map+0x226>
    for (int i = 0; i < row; i++) {
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	3301      	adds	r3, #1
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f3a:	7afb      	ldrb	r3, [r7, #11]
 8002f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	f6ff af44 	blt.w	8002dcc <build_grid_map+0x220>
                }                
            }
        }
    }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3738      	adds	r7, #56	; 0x38
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20000008 	.word	0x20000008
 8002f58:	bf800000 	.word	0xbf800000
 8002f5c:	00000000 	.word	0x00000000

08002f60 <main>:
//Variables adicionales aplicacion
state_t next_state = sMenuOperation;


int main(void)
{
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b099      	sub	sp, #100	; 0x64
 8002f64:	af02      	add	r7, sp, #8
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 8002f66:	2364      	movs	r3, #100	; 0x64
 8002f68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	configPLL(clock);
 8002f6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f70:	4618      	mov	r0, r3
 8002f72:	f008 f985 	bl	800b280 <configPLL>
	//Configuracion inicial del sistema
	initSystem();
 8002f76:	f000 fb39 	bl	80035ec <initSystem>
	//Activamos la unidad de punto flotante (FPU)
	SCB->CPACR    |= (0xF << 20);
 8002f7a:	4ba5      	ldr	r3, [pc, #660]	; (8003210 <main+0x2b0>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	4aa3      	ldr	r2, [pc, #652]	; (8003210 <main+0x2b0>)
 8002f82:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Activamos del contador de Ticks
	DWT->CTRL    |= (1 << 0);
 8002f8a:	4ba2      	ldr	r3, [pc, #648]	; (8003214 <main+0x2b4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4aa1      	ldr	r2, [pc, #644]	; (8003214 <main+0x2b4>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6013      	str	r3, [r2, #0]
	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 8002f96:	2101      	movs	r1, #1
 8002f98:	489f      	ldr	r0, [pc, #636]	; (8003218 <main+0x2b8>)
 8002f9a:	f007 ff27 	bl	800adec <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	489e      	ldr	r0, [pc, #632]	; (800321c <main+0x2bc>)
 8002fa2:	f007 ff23 	bl	800adec <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	489d      	ldr	r0, [pc, #628]	; (8003220 <main+0x2c0>)
 8002faa:	f007 ff1f 	bl	800adec <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8002fae:	2101      	movs	r1, #1
 8002fb0:	489c      	ldr	r0, [pc, #624]	; (8003224 <main+0x2c4>)
 8002fb2:	f007 ff1b 	bl	800adec <GPIO_writePin>
	int_Config_Motor();
 8002fb6:	f000 fce3 	bl	8003980 <int_Config_Motor>
	//Calculo inicial de parametro
	cm_L = ((M_PI*DL)/(100*Ce));  //[mm/cuentas]
 8002fba:	4b9b      	ldr	r3, [pc, #620]	; (8003228 <main+0x2c8>)
 8002fbc:	4a9b      	ldr	r2, [pc, #620]	; (800322c <main+0x2cc>)
 8002fbe:	601a      	str	r2, [r3, #0]
	cm_R =	((M_PI*DR)/(100*Ce));  //[mm/cuentas]
 8002fc0:	4b9b      	ldr	r3, [pc, #620]	; (8003230 <main+0x2d0>)
 8002fc2:	4a9c      	ldr	r2, [pc, #624]	; (8003234 <main+0x2d4>)
 8002fc4:	601a      	str	r2, [r3, #0]
	//Calculamos el setpoint
	velSetPoint = (0.00169*duttySetPoint + 0.0619);
 8002fc6:	4b9c      	ldr	r3, [pc, #624]	; (8003238 <main+0x2d8>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fac2 	bl	8000554 <__aeabi_i2d>
 8002fd0:	a38b      	add	r3, pc, #556	; (adr r3, 8003200 <main+0x2a0>)
 8002fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd6:	f7fd fb27 	bl	8000628 <__aeabi_dmul>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	a389      	add	r3, pc, #548	; (adr r3, 8003208 <main+0x2a8>)
 8002fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe8:	f7fd f968 	bl	80002bc <__adddf3>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f7fd fe10 	bl	8000c18 <__aeabi_d2f>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4a90      	ldr	r2, [pc, #576]	; (800323c <main+0x2dc>)
 8002ffc:	6013      	str	r3, [r2, #0]
	//Definicion de la correccion del drift
	correct_ang_Gyro_Drift = 1 + 0.022;
 8002ffe:	4b90      	ldr	r3, [pc, #576]	; (8003240 <main+0x2e0>)
 8003000:	4a90      	ldr	r2, [pc, #576]	; (8003244 <main+0x2e4>)
 8003002:	601a      	str	r2, [r3, #0]
	//Calculo periodo de accion
	time_accion = period_sampling*timeAction_TIMER_Sampling;
 8003004:	4b90      	ldr	r3, [pc, #576]	; (8003248 <main+0x2e8>)
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	4b90      	ldr	r3, [pc, #576]	; (800324c <main+0x2ec>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	fb12 f303 	smulbb	r3, r2, r3
 8003012:	b2da      	uxtb	r2, r3
 8003014:	4b8e      	ldr	r3, [pc, #568]	; (8003250 <main+0x2f0>)
 8003016:	701a      	strb	r2, [r3, #0]
	//--------------------------Configuramos inicia el MPU----------------------
	//Configuracion MPU
	int_MPU();
 8003018:	f000 fc98 	bl	800394c <int_MPU>
	//Calibracion del eje Z del giroscopio
	gyro_offset = calibrationMPU(&handler_MPUAccel_MPU6050, &handler_TIMER_Delay, &countingTimer, CAL_GYRO_Z);
 800301c:	2305      	movs	r3, #5
 800301e:	4a8d      	ldr	r2, [pc, #564]	; (8003254 <main+0x2f4>)
 8003020:	498d      	ldr	r1, [pc, #564]	; (8003258 <main+0x2f8>)
 8003022:	488e      	ldr	r0, [pc, #568]	; (800325c <main+0x2fc>)
 8003024:	f7ff f8ec 	bl	8002200 <calibrationMPU>
 8003028:	eef0 7a40 	vmov.f32	s15, s0
 800302c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003030:	ee17 3a90 	vmov	r3, s15
 8003034:	b21a      	sxth	r2, r3
 8003036:	4b8a      	ldr	r3, [pc, #552]	; (8003260 <main+0x300>)
 8003038:	801a      	strh	r2, [r3, #0]

	//-----------------------Inicio cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//-------------------Configuracion Task--------------
	//Tarea de mediciones de la linea recta
	xReturned = xTaskCreate(
 800303a:	4b8a      	ldr	r3, [pc, #552]	; (8003264 <main+0x304>)
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	2304      	movs	r3, #4
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	2300      	movs	r3, #0
 8003044:	22c8      	movs	r2, #200	; 0xc8
 8003046:	4988      	ldr	r1, [pc, #544]	; (8003268 <main+0x308>)
 8003048:	4888      	ldr	r0, [pc, #544]	; (800326c <main+0x30c>)
 800304a:	f003 ffff 	bl	800704c <xTaskCreate>
 800304e:	4603      	mov	r3, r0
 8003050:	4a87      	ldr	r2, [pc, #540]	; (8003270 <main+0x310>)
 8003052:	6013      	str	r3, [r2, #0]
	                    "Task_Measure",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    4,/* Priority at which the task is created. */
	                    &xHandleTask_Measure);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8003054:	4b86      	ldr	r3, [pc, #536]	; (8003270 <main+0x310>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d00a      	beq.n	8003072 <main+0x112>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	653b      	str	r3, [r7, #80]	; 0x50
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800306e:	bf00      	nop
 8003070:	e7fe      	b.n	8003070 <main+0x110>
	//Tarea de la aplicaciones de las medicciones PID de la linea recta
	xReturned = xTaskCreate(
 8003072:	4b80      	ldr	r3, [pc, #512]	; (8003274 <main+0x314>)
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	2304      	movs	r3, #4
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	2300      	movs	r3, #0
 800307c:	22c8      	movs	r2, #200	; 0xc8
 800307e:	497e      	ldr	r1, [pc, #504]	; (8003278 <main+0x318>)
 8003080:	487e      	ldr	r0, [pc, #504]	; (800327c <main+0x31c>)
 8003082:	f003 ffe3 	bl	800704c <xTaskCreate>
 8003086:	4603      	mov	r3, r0
 8003088:	4a79      	ldr	r2, [pc, #484]	; (8003270 <main+0x310>)
 800308a:	6013      	str	r3, [r2, #0]
	                    "Task_Line_PID",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    4,/* Priority at which the task is created. */
	                    &xHandleTask_Line_PID);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800308c:	4b78      	ldr	r3, [pc, #480]	; (8003270 <main+0x310>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d00a      	beq.n	80030aa <main+0x14a>
        __asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <main+0x148>
	//Tarea que verifica si se llego a la condiccion de parada
	xReturned = xTaskCreate(
 80030aa:	4b75      	ldr	r3, [pc, #468]	; (8003280 <main+0x320>)
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	2303      	movs	r3, #3
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2300      	movs	r3, #0
 80030b4:	22c8      	movs	r2, #200	; 0xc8
 80030b6:	4973      	ldr	r1, [pc, #460]	; (8003284 <main+0x324>)
 80030b8:	4873      	ldr	r0, [pc, #460]	; (8003288 <main+0x328>)
 80030ba:	f003 ffc7 	bl	800704c <xTaskCreate>
 80030be:	4603      	mov	r3, r0
 80030c0:	4a6b      	ldr	r2, [pc, #428]	; (8003270 <main+0x310>)
 80030c2:	6013      	str	r3, [r2, #0]
	                    "Task_Stop_Execute",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    3,/* Priority at which the task is created. */
	                    &xHandleTask_Stop_Execute);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80030c4:	4b6a      	ldr	r3, [pc, #424]	; (8003270 <main+0x310>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d00a      	beq.n	80030e2 <main+0x182>
        __asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	64bb      	str	r3, [r7, #72]	; 0x48
    }
 80030de:	bf00      	nop
 80030e0:	e7fe      	b.n	80030e0 <main+0x180>
	//Tarea Stop
	xReturned = xTaskCreate(
 80030e2:	4b6a      	ldr	r3, [pc, #424]	; (800328c <main+0x32c>)
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	2303      	movs	r3, #3
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2300      	movs	r3, #0
 80030ec:	22c8      	movs	r2, #200	; 0xc8
 80030ee:	4968      	ldr	r1, [pc, #416]	; (8003290 <main+0x330>)
 80030f0:	4868      	ldr	r0, [pc, #416]	; (8003294 <main+0x334>)
 80030f2:	f003 ffab 	bl	800704c <xTaskCreate>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4a5d      	ldr	r2, [pc, #372]	; (8003270 <main+0x310>)
 80030fa:	6013      	str	r3, [r2, #0]
	                    "Task_Stop",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    3,/* Priority at which the task is created. */
	                    &xHandleTask_Stop);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80030fc:	4b5c      	ldr	r3, [pc, #368]	; (8003270 <main+0x310>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d00a      	beq.n	800311a <main+0x1ba>
        __asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	647b      	str	r3, [r7, #68]	; 0x44
    }
 8003116:	bf00      	nop
 8003118:	e7fe      	b.n	8003118 <main+0x1b8>
	//Tarea comandos
	xReturned = xTaskCreate(
 800311a:	4b5f      	ldr	r3, [pc, #380]	; (8003298 <main+0x338>)
 800311c:	9301      	str	r3, [sp, #4]
 800311e:	2303      	movs	r3, #3
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	2300      	movs	r3, #0
 8003124:	22c8      	movs	r2, #200	; 0xc8
 8003126:	495d      	ldr	r1, [pc, #372]	; (800329c <main+0x33c>)
 8003128:	485d      	ldr	r0, [pc, #372]	; (80032a0 <main+0x340>)
 800312a:	f003 ff8f 	bl	800704c <xTaskCreate>
 800312e:	4603      	mov	r3, r0
 8003130:	4a4f      	ldr	r2, [pc, #316]	; (8003270 <main+0x310>)
 8003132:	6013      	str	r3, [r2, #0]
	                    "Task_Commands",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    3,/* Priority at which the task is created. */
	                    &xHandleTask_Commands);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8003134:	4b4e      	ldr	r3, [pc, #312]	; (8003270 <main+0x310>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d00a      	beq.n	8003152 <main+0x1f2>
        __asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	643b      	str	r3, [r7, #64]	; 0x40
    }
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <main+0x1f0>
	//Tarea Print
	xReturned = xTaskCreate(
 8003152:	4b54      	ldr	r3, [pc, #336]	; (80032a4 <main+0x344>)
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	2303      	movs	r3, #3
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	2300      	movs	r3, #0
 800315c:	22c8      	movs	r2, #200	; 0xc8
 800315e:	4952      	ldr	r1, [pc, #328]	; (80032a8 <main+0x348>)
 8003160:	4852      	ldr	r0, [pc, #328]	; (80032ac <main+0x34c>)
 8003162:	f003 ff73 	bl	800704c <xTaskCreate>
 8003166:	4603      	mov	r3, r0
 8003168:	4a41      	ldr	r2, [pc, #260]	; (8003270 <main+0x310>)
 800316a:	6013      	str	r3, [r2, #0]
	                    "Task_Print",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    3,/* Priority at which the task is created. */
	                    &xHandleTask_Print);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800316c:	4b40      	ldr	r3, [pc, #256]	; (8003270 <main+0x310>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d00a      	beq.n	800318a <main+0x22a>
        __asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
 8003186:	bf00      	nop
 8003188:	e7fe      	b.n	8003188 <main+0x228>
	//Tarea Menu
	xReturned = xTaskCreate(
 800318a:	4b49      	ldr	r3, [pc, #292]	; (80032b0 <main+0x350>)
 800318c:	9301      	str	r3, [sp, #4]
 800318e:	2301      	movs	r3, #1
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2300      	movs	r3, #0
 8003194:	22c8      	movs	r2, #200	; 0xc8
 8003196:	4947      	ldr	r1, [pc, #284]	; (80032b4 <main+0x354>)
 8003198:	4847      	ldr	r0, [pc, #284]	; (80032b8 <main+0x358>)
 800319a:	f003 ff57 	bl	800704c <xTaskCreate>
 800319e:	4603      	mov	r3, r0
 80031a0:	4a33      	ldr	r2, [pc, #204]	; (8003270 <main+0x310>)
 80031a2:	6013      	str	r3, [r2, #0]
	                    "Task_Menu",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    1,/* Priority at which the task is created. */
	                    &xHandleTask_Menu);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80031a4:	4b32      	ldr	r3, [pc, #200]	; (8003270 <main+0x310>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d00a      	beq.n	80031c2 <main+0x262>
        __asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	63bb      	str	r3, [r7, #56]	; 0x38
    }
 80031be:	bf00      	nop
 80031c0:	e7fe      	b.n	80031c0 <main+0x260>
	//Tarea Execute_AStar
	xReturned = xTaskCreate(
 80031c2:	4b3e      	ldr	r3, [pc, #248]	; (80032bc <main+0x35c>)
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	2302      	movs	r3, #2
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	2300      	movs	r3, #0
 80031cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031d0:	493b      	ldr	r1, [pc, #236]	; (80032c0 <main+0x360>)
 80031d2:	483c      	ldr	r0, [pc, #240]	; (80032c4 <main+0x364>)
 80031d4:	f003 ff3a 	bl	800704c <xTaskCreate>
 80031d8:	4603      	mov	r3, r0
 80031da:	4a25      	ldr	r2, [pc, #148]	; (8003270 <main+0x310>)
 80031dc:	6013      	str	r3, [r2, #0]
	                    "Task_Execute_AStar",          /* Text name for the task. */
	                    (STACK_SIZE*5),      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Execute_Astar);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80031de:	4b24      	ldr	r3, [pc, #144]	; (8003270 <main+0x310>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d070      	beq.n	80032c8 <main+0x368>
        __asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	637b      	str	r3, [r7, #52]	; 0x34
    }
 80031f8:	bf00      	nop
 80031fa:	e7fe      	b.n	80031fa <main+0x29a>
 80031fc:	f3af 8000 	nop.w
 8003200:	aebc408e 	.word	0xaebc408e
 8003204:	3f5bb05f 	.word	0x3f5bb05f
 8003208:	573eab36 	.word	0x573eab36
 800320c:	3fafb15b 	.word	0x3fafb15b
 8003210:	e000ed00 	.word	0xe000ed00
 8003214:	e0001000 	.word	0xe0001000
 8003218:	200002c0 	.word	0x200002c0
 800321c:	20000334 	.word	0x20000334
 8003220:	200002cc 	.word	0x200002cc
 8003224:	20000340 	.word	0x20000340
 8003228:	200003c4 	.word	0x200003c4
 800322c:	40105fa7 	.word	0x40105fa7
 8003230:	200003c8 	.word	0x200003c8
 8003234:	400facee 	.word	0x400facee
 8003238:	20000018 	.word	0x20000018
 800323c:	200003c0 	.word	0x200003c0
 8003240:	2000001c 	.word	0x2000001c
 8003244:	3f82d0e5 	.word	0x3f82d0e5
 8003248:	20000012 	.word	0x20000012
 800324c:	20000011 	.word	0x20000011
 8003250:	200003e8 	.word	0x200003e8
 8003254:	200003bc 	.word	0x200003bc
 8003258:	200003ac 	.word	0x200003ac
 800325c:	200002ac 	.word	0x200002ac
 8003260:	200003be 	.word	0x200003be
 8003264:	20000404 	.word	0x20000404
 8003268:	08013f20 	.word	0x08013f20
 800326c:	08004671 	.word	0x08004671
 8003270:	200003ec 	.word	0x200003ec
 8003274:	20000408 	.word	0x20000408
 8003278:	08013f30 	.word	0x08013f30
 800327c:	080048fd 	.word	0x080048fd
 8003280:	20000424 	.word	0x20000424
 8003284:	08013f40 	.word	0x08013f40
 8003288:	08004485 	.word	0x08004485
 800328c:	20000400 	.word	0x20000400
 8003290:	08013f54 	.word	0x08013f54
 8003294:	080043b1 	.word	0x080043b1
 8003298:	200003f8 	.word	0x200003f8
 800329c:	08013f60 	.word	0x08013f60
 80032a0:	08003bed 	.word	0x08003bed
 80032a4:	200003f4 	.word	0x200003f4
 80032a8:	08013f70 	.word	0x08013f70
 80032ac:	08003bbd 	.word	0x08003bbd
 80032b0:	200003f0 	.word	0x200003f0
 80032b4:	08013f7c 	.word	0x08013f7c
 80032b8:	08003c31 	.word	0x08003c31
 80032bc:	20000414 	.word	0x20000414
 80032c0:	08013f88 	.word	0x08013f88
 80032c4:	08004079 	.word	0x08004079
	//Tarea Separacion Grid map
	xReturned = xTaskCreate(
 80032c8:	4bab      	ldr	r3, [pc, #684]	; (8003578 <main+0x618>)
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	2302      	movs	r3, #2
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2300      	movs	r3, #0
 80032d2:	22c8      	movs	r2, #200	; 0xc8
 80032d4:	49a9      	ldr	r1, [pc, #676]	; (800357c <main+0x61c>)
 80032d6:	48aa      	ldr	r0, [pc, #680]	; (8003580 <main+0x620>)
 80032d8:	f003 feb8 	bl	800704c <xTaskCreate>
 80032dc:	4603      	mov	r3, r0
 80032de:	4aa9      	ldr	r2, [pc, #676]	; (8003584 <main+0x624>)
 80032e0:	6013      	str	r3, [r2, #0]
	                    "Task_Separate_GripMap",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Separate_GridMap);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80032e2:	4ba8      	ldr	r3, [pc, #672]	; (8003584 <main+0x624>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d00a      	beq.n	8003300 <main+0x3a0>
        __asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	633b      	str	r3, [r7, #48]	; 0x30
    }
 80032fc:	bf00      	nop
 80032fe:	e7fe      	b.n	80032fe <main+0x39e>
	//Tarea execute Operation
	xReturned = xTaskCreate(
 8003300:	4ba1      	ldr	r3, [pc, #644]	; (8003588 <main+0x628>)
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	2302      	movs	r3, #2
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2300      	movs	r3, #0
 800330a:	22c8      	movs	r2, #200	; 0xc8
 800330c:	499f      	ldr	r1, [pc, #636]	; (800358c <main+0x62c>)
 800330e:	48a0      	ldr	r0, [pc, #640]	; (8003590 <main+0x630>)
 8003310:	f003 fe9c 	bl	800704c <xTaskCreate>
 8003314:	4603      	mov	r3, r0
 8003316:	4a9b      	ldr	r2, [pc, #620]	; (8003584 <main+0x624>)
 8003318:	6013      	str	r3, [r2, #0]
	                    "Task_Execute_Operation",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Execute_Operation);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800331a:	4b9a      	ldr	r3, [pc, #616]	; (8003584 <main+0x624>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d00a      	beq.n	8003338 <main+0x3d8>
        __asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <main+0x3d6>
	//Tarea Line
	xReturned = xTaskCreate(
 8003338:	4b96      	ldr	r3, [pc, #600]	; (8003594 <main+0x634>)
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	2301      	movs	r3, #1
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2300      	movs	r3, #0
 8003342:	22c8      	movs	r2, #200	; 0xc8
 8003344:	4994      	ldr	r1, [pc, #592]	; (8003598 <main+0x638>)
 8003346:	4895      	ldr	r0, [pc, #596]	; (800359c <main+0x63c>)
 8003348:	f003 fe80 	bl	800704c <xTaskCreate>
 800334c:	4603      	mov	r3, r0
 800334e:	4a8d      	ldr	r2, [pc, #564]	; (8003584 <main+0x624>)
 8003350:	6013      	str	r3, [r2, #0]
	                    "Task_Line",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    1,/* Priority at which the task is created. */
	                    &xHandleTask_Line);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8003352:	4b8c      	ldr	r3, [pc, #560]	; (8003584 <main+0x624>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d00a      	beq.n	8003370 <main+0x410>
        __asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800336c:	bf00      	nop
 800336e:	e7fe      	b.n	800336e <main+0x40e>
	//Tarea turn itself
	xReturned = xTaskCreate(
 8003370:	4b8b      	ldr	r3, [pc, #556]	; (80035a0 <main+0x640>)
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	2301      	movs	r3, #1
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2300      	movs	r3, #0
 800337a:	22c8      	movs	r2, #200	; 0xc8
 800337c:	4989      	ldr	r1, [pc, #548]	; (80035a4 <main+0x644>)
 800337e:	488a      	ldr	r0, [pc, #552]	; (80035a8 <main+0x648>)
 8003380:	f003 fe64 	bl	800704c <xTaskCreate>
 8003384:	4603      	mov	r3, r0
 8003386:	4a7f      	ldr	r2, [pc, #508]	; (8003584 <main+0x624>)
 8003388:	6013      	str	r3, [r2, #0]
	                    "Task_Turn",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    1,/* Priority at which the task is created. */
	                    &xHandleTask_Turn);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 800338a:	4b7e      	ldr	r3, [pc, #504]	; (8003584 <main+0x624>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d00a      	beq.n	80033a8 <main+0x448>
        __asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <main+0x446>
	//Tarea Square
	xReturned = xTaskCreate(
 80033a8:	4b80      	ldr	r3, [pc, #512]	; (80035ac <main+0x64c>)
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	2301      	movs	r3, #1
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2300      	movs	r3, #0
 80033b2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80033b6:	497e      	ldr	r1, [pc, #504]	; (80035b0 <main+0x650>)
 80033b8:	487e      	ldr	r0, [pc, #504]	; (80035b4 <main+0x654>)
 80033ba:	f003 fe47 	bl	800704c <xTaskCreate>
 80033be:	4603      	mov	r3, r0
 80033c0:	4a70      	ldr	r2, [pc, #448]	; (8003584 <main+0x624>)
 80033c2:	6013      	str	r3, [r2, #0]
	                    "Task_Square",          /* Text name for the task. */
	                    (STACK_SIZE*3),      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    1,/* Priority at which the task is created. */
	                    &xHandleTask_Square);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80033c4:	4b6f      	ldr	r3, [pc, #444]	; (8003584 <main+0x624>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d00a      	beq.n	80033e2 <main+0x482>
        __asm volatile
 80033cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	623b      	str	r3, [r7, #32]
    }
 80033de:	bf00      	nop
 80033e0:	e7fe      	b.n	80033e0 <main+0x480>
	//Tarea De aplicacion A Star
	xReturned = xTaskCreate(
 80033e2:	4b75      	ldr	r3, [pc, #468]	; (80035b8 <main+0x658>)
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	2301      	movs	r3, #1
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2300      	movs	r3, #0
 80033ec:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80033f0:	4972      	ldr	r1, [pc, #456]	; (80035bc <main+0x65c>)
 80033f2:	4873      	ldr	r0, [pc, #460]	; (80035c0 <main+0x660>)
 80033f4:	f003 fe2a 	bl	800704c <xTaskCreate>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4a62      	ldr	r2, [pc, #392]	; (8003584 <main+0x624>)
 80033fc:	6013      	str	r3, [r2, #0]
	                    "Task_Apply",          /* Text name for the task. */
	                    (STACK_SIZE*20),      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    1,/* Priority at which the task is created. */
	                    &xHandleTask_Apply_Astar);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 80033fe:	4b61      	ldr	r3, [pc, #388]	; (8003584 <main+0x624>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d00a      	beq.n	800341c <main+0x4bc>
        __asm volatile
 8003406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	61fb      	str	r3, [r7, #28]
    }
 8003418:	bf00      	nop
 800341a:	e7fe      	b.n	800341a <main+0x4ba>

	//-------------------Configuracion Queue--------------
	//Cola para recibir datos por consola
	xQueue_InputData = xQueueCreate(500, sizeof(char ) );
 800341c:	2200      	movs	r2, #0
 800341e:	2101      	movs	r1, #1
 8003420:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003424:	f003 f814 	bl	8006450 <xQueueGenericCreate>
 8003428:	4603      	mov	r3, r0
 800342a:	4a66      	ldr	r2, [pc, #408]	; (80035c4 <main+0x664>)
 800342c:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_InputData != NULL);
 800342e:	4b65      	ldr	r3, [pc, #404]	; (80035c4 <main+0x664>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <main+0x4ec>
        __asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	61bb      	str	r3, [r7, #24]
    }
 8003448:	bf00      	nop
 800344a:	e7fe      	b.n	800344a <main+0x4ea>
	//Cola para recibir datos por consola
	xQueue_StructCommand = xQueueCreate(10, sizeof(command_t));
 800344c:	2200      	movs	r2, #0
 800344e:	2114      	movs	r1, #20
 8003450:	200a      	movs	r0, #10
 8003452:	f002 fffd 	bl	8006450 <xQueueGenericCreate>
 8003456:	4603      	mov	r3, r0
 8003458:	4a5b      	ldr	r2, [pc, #364]	; (80035c8 <main+0x668>)
 800345a:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_StructCommand != NULL);
 800345c:	4b5a      	ldr	r3, [pc, #360]	; (80035c8 <main+0x668>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <main+0x51a>
        __asm volatile
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	617b      	str	r3, [r7, #20]
    }
 8003476:	bf00      	nop
 8003478:	e7fe      	b.n	8003478 <main+0x518>
	//cola para enviar datos por consola
	xQueue_Print = xQueueCreate(10, sizeof(char *) );
 800347a:	2200      	movs	r2, #0
 800347c:	2104      	movs	r1, #4
 800347e:	200a      	movs	r0, #10
 8003480:	f002 ffe6 	bl	8006450 <xQueueGenericCreate>
 8003484:	4603      	mov	r3, r0
 8003486:	4a51      	ldr	r2, [pc, #324]	; (80035cc <main+0x66c>)
 8003488:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_Print != NULL);
 800348a:	4b50      	ldr	r3, [pc, #320]	; (80035cc <main+0x66c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10a      	bne.n	80034a8 <main+0x548>
        __asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	613b      	str	r3, [r7, #16]
    }
 80034a4:	bf00      	nop
 80034a6:	e7fe      	b.n	80034a6 <main+0x546>
	//Buzon para definir el modo de operacion
	xMailbox_Mode = xQueueCreate(1, sizeof(uint8_t ));
 80034a8:	2200      	movs	r2, #0
 80034aa:	2101      	movs	r1, #1
 80034ac:	2001      	movs	r0, #1
 80034ae:	f002 ffcf 	bl	8006450 <xQueueGenericCreate>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4a46      	ldr	r2, [pc, #280]	; (80035d0 <main+0x670>)
 80034b6:	6013      	str	r3, [r2, #0]
	configASSERT(xMailbox_Mode != NULL);
 80034b8:	4b45      	ldr	r3, [pc, #276]	; (80035d0 <main+0x670>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10a      	bne.n	80034d6 <main+0x576>
        __asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	60fb      	str	r3, [r7, #12]
    }
 80034d2:	bf00      	nop
 80034d4:	e7fe      	b.n	80034d4 <main+0x574>
	//Buzon para pasar el string del grid map
	xMailbox_Path = xQueueCreate(1, sizeof(uint8_t ));
 80034d6:	2200      	movs	r2, #0
 80034d8:	2101      	movs	r1, #1
 80034da:	2001      	movs	r0, #1
 80034dc:	f002 ffb8 	bl	8006450 <xQueueGenericCreate>
 80034e0:	4603      	mov	r3, r0
 80034e2:	4a3c      	ldr	r2, [pc, #240]	; (80035d4 <main+0x674>)
 80034e4:	6013      	str	r3, [r2, #0]
	configASSERT(xMailbox_Path  != NULL);
 80034e6:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <main+0x674>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <main+0x5a4>
        __asm volatile
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	60bb      	str	r3, [r7, #8]
    }
 8003500:	bf00      	nop
 8003502:	e7fe      	b.n	8003502 <main+0x5a2>
	//Cola para almacenar las operaciones
	xQueue_Operation = xQueueCreate(30, sizeof(Parameters_Operation_t) );
 8003504:	2200      	movs	r2, #0
 8003506:	2120      	movs	r1, #32
 8003508:	201e      	movs	r0, #30
 800350a:	f002 ffa1 	bl	8006450 <xQueueGenericCreate>
 800350e:	4603      	mov	r3, r0
 8003510:	4a31      	ldr	r2, [pc, #196]	; (80035d8 <main+0x678>)
 8003512:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_Operation != NULL);
 8003514:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <main+0x678>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <main+0x5d2>
        __asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	607b      	str	r3, [r7, #4]
    }
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <main+0x5d0>

	//-------------------Configuracion Even Group-------------
	//Grupo de eventos para ejecutar las operaciones
	xEventGroup_Execute_Operation = xEventGroupCreate();
 8003532:	f002 fcb3 	bl	8005e9c <xEventGroupCreate>
 8003536:	4603      	mov	r3, r0
 8003538:	4a28      	ldr	r2, [pc, #160]	; (80035dc <main+0x67c>)
 800353a:	6013      	str	r3, [r2, #0]

	//-------------------Configuracion Timer--------------
	//Software Timer para el blink
	handler_led_timer = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, 0, led_state_callback);
 800353c:	4b28      	ldr	r3, [pc, #160]	; (80035e0 <main+0x680>)
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2300      	movs	r3, #0
 8003542:	2201      	movs	r2, #1
 8003544:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003548:	4826      	ldr	r0, [pc, #152]	; (80035e4 <main+0x684>)
 800354a:	f005 f81b 	bl	8008584 <xTimerCreate>
 800354e:	4603      	mov	r3, r0
 8003550:	4a25      	ldr	r2, [pc, #148]	; (80035e8 <main+0x688>)
 8003552:	6013      	str	r3, [r2, #0]
	xTimerStart(handler_led_timer, portMAX_DELAY);
 8003554:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <main+0x688>)
 8003556:	681c      	ldr	r4, [r3, #0]
 8003558:	f004 f8f2 	bl	8007740 <xTaskGetTickCount>
 800355c:	4602      	mov	r2, r0
 800355e:	f04f 33ff 	mov.w	r3, #4294967295
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2300      	movs	r3, #0
 8003566:	2101      	movs	r1, #1
 8003568:	4620      	mov	r0, r4
 800356a:	f005 f867 	bl	800863c <xTimerGenericCommand>

	//-------------------Inicializacion Scheduler--------------
	//Inicia le Scheduler a funcionar
	vTaskStartScheduler();
 800356e:	f003 fff9 	bl	8007564 <vTaskStartScheduler>
	//-----------------------Fin cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//Si el scheduler se inicia correctamente no se ejecutada este while
	while(1)
	{
		__NOP();
 8003572:	bf00      	nop
 8003574:	e7fd      	b.n	8003572 <main+0x612>
 8003576:	bf00      	nop
 8003578:	20000418 	.word	0x20000418
 800357c:	08013f9c 	.word	0x08013f9c
 8003580:	08004155 	.word	0x08004155
 8003584:	200003ec 	.word	0x200003ec
 8003588:	20000420 	.word	0x20000420
 800358c:	08013fb4 	.word	0x08013fb4
 8003590:	08003de5 	.word	0x08003de5
 8003594:	200003fc 	.word	0x200003fc
 8003598:	08013fcc 	.word	0x08013fcc
 800359c:	08003f19 	.word	0x08003f19
 80035a0:	2000040c 	.word	0x2000040c
 80035a4:	08013fd8 	.word	0x08013fd8
 80035a8:	08003f89 	.word	0x08003f89
 80035ac:	20000410 	.word	0x20000410
 80035b0:	08013fe4 	.word	0x08013fe4
 80035b4:	08003fe9 	.word	0x08003fe9
 80035b8:	2000041c 	.word	0x2000041c
 80035bc:	08013ff0 	.word	0x08013ff0
 80035c0:	08004225 	.word	0x08004225
 80035c4:	20000430 	.word	0x20000430
 80035c8:	2000042c 	.word	0x2000042c
 80035cc:	20000428 	.word	0x20000428
 80035d0:	20000438 	.word	0x20000438
 80035d4:	2000043c 	.word	0x2000043c
 80035d8:	20000434 	.word	0x20000434
 80035dc:	20000440 	.word	0x20000440
 80035e0:	08004c51 	.word	0x08004c51
 80035e4:	08013ffc 	.word	0x08013ffc
 80035e8:	20000444 	.word	0x20000444

080035ec <initSystem>:
}


//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void initSystem(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af02      	add	r7, sp, #8
	//---------------------------------Inicio de Configuracion GPIOx---------------------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_BlinkyPin.pGPIOx = GPIOA;
 80035f2:	4baf      	ldr	r3, [pc, #700]	; (80038b0 <initSystem+0x2c4>)
 80035f4:	4aaf      	ldr	r2, [pc, #700]	; (80038b4 <initSystem+0x2c8>)
 80035f6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 80035f8:	4bad      	ldr	r3, [pc, #692]	; (80038b0 <initSystem+0x2c4>)
 80035fa:	2205      	movs	r2, #5
 80035fc:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80035fe:	2300      	movs	r3, #0
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	2300      	movs	r3, #0
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2301      	movs	r3, #1
 8003608:	2200      	movs	r2, #0
 800360a:	2101      	movs	r1, #1
 800360c:	48a8      	ldr	r0, [pc, #672]	; (80038b0 <initSystem+0x2c4>)
 800360e:	f007 faa1 	bl	800ab54 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_BlinkyPin);
 8003612:	48a7      	ldr	r0, [pc, #668]	; (80038b0 <initSystem+0x2c4>)
 8003614:	f007 fac0 	bl	800ab98 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_CommTerm_TX.pGPIOx = GPIOA;
 8003618:	4ba7      	ldr	r3, [pc, #668]	; (80038b8 <initSystem+0x2cc>)
 800361a:	4aa6      	ldr	r2, [pc, #664]	; (80038b4 <initSystem+0x2c8>)
 800361c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_CommTerm_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 800361e:	4ba6      	ldr	r3, [pc, #664]	; (80038b8 <initSystem+0x2cc>)
 8003620:	2202      	movs	r2, #2
 8003622:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_CommTerm_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8003624:	2307      	movs	r3, #7
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	2300      	movs	r3, #0
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	2301      	movs	r3, #1
 800362e:	2200      	movs	r2, #0
 8003630:	2102      	movs	r1, #2
 8003632:	48a1      	ldr	r0, [pc, #644]	; (80038b8 <initSystem+0x2cc>)
 8003634:	f007 fa8e 	bl	800ab54 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_CommTerm_TX);
 8003638:	489f      	ldr	r0, [pc, #636]	; (80038b8 <initSystem+0x2cc>)
 800363a:	f007 faad 	bl	800ab98 <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_CommTerm_RX.pGPIOx = GPIOA;
 800363e:	4b9f      	ldr	r3, [pc, #636]	; (80038bc <initSystem+0x2d0>)
 8003640:	4a9c      	ldr	r2, [pc, #624]	; (80038b4 <initSystem+0x2c8>)
 8003642:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_CommTerm_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 8003644:	4b9d      	ldr	r3, [pc, #628]	; (80038bc <initSystem+0x2d0>)
 8003646:	2203      	movs	r2, #3
 8003648:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_CommTerm_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 800364a:	2307      	movs	r3, #7
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	2300      	movs	r3, #0
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2301      	movs	r3, #1
 8003654:	2200      	movs	r2, #0
 8003656:	2102      	movs	r1, #2
 8003658:	4898      	ldr	r0, [pc, #608]	; (80038bc <initSystem+0x2d0>)
 800365a:	f007 fa7b 	bl	800ab54 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_CommTerm_RX);
 800365e:	4897      	ldr	r0, [pc, #604]	; (80038bc <initSystem+0x2d0>)
 8003660:	f007 fa9a 	bl	800ab98 <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8003664:	4b96      	ldr	r3, [pc, #600]	; (80038c0 <initSystem+0x2d4>)
 8003666:	4a93      	ldr	r2, [pc, #588]	; (80038b4 <initSystem+0x2c8>)
 8003668:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 800366a:	4b95      	ldr	r3, [pc, #596]	; (80038c0 <initSystem+0x2d4>)
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8003670:	2302      	movs	r3, #2
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	2300      	movs	r3, #0
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	2301      	movs	r3, #1
 800367a:	2200      	movs	r2, #0
 800367c:	2102      	movs	r1, #2
 800367e:	4890      	ldr	r0, [pc, #576]	; (80038c0 <initSystem+0x2d4>)
 8003680:	f007 fa68 	bl	800ab54 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8003684:	488e      	ldr	r0, [pc, #568]	; (80038c0 <initSystem+0x2d4>)
 8003686:	f007 fa87 	bl	800ab98 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 800368a:	4b8e      	ldr	r3, [pc, #568]	; (80038c4 <initSystem+0x2d8>)
 800368c:	4a8e      	ldr	r2, [pc, #568]	; (80038c8 <initSystem+0x2dc>)
 800368e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 8003690:	4b8c      	ldr	r3, [pc, #560]	; (80038c4 <initSystem+0x2d8>)
 8003692:	220c      	movs	r2, #12
 8003694:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003696:	2300      	movs	r3, #0
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	2300      	movs	r3, #0
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	2301      	movs	r3, #1
 80036a0:	2200      	movs	r2, #0
 80036a2:	2101      	movs	r1, #1
 80036a4:	4887      	ldr	r0, [pc, #540]	; (80038c4 <initSystem+0x2d8>)
 80036a6:	f007 fa55 	bl	800ab54 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 80036aa:	4886      	ldr	r0, [pc, #536]	; (80038c4 <initSystem+0x2d8>)
 80036ac:	f007 fa74 	bl	800ab98 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 80036b0:	4b86      	ldr	r3, [pc, #536]	; (80038cc <initSystem+0x2e0>)
 80036b2:	4a85      	ldr	r2, [pc, #532]	; (80038c8 <initSystem+0x2dc>)
 80036b4:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80036b6:	4b85      	ldr	r3, [pc, #532]	; (80038cc <initSystem+0x2e0>)
 80036b8:	220a      	movs	r2, #10
 80036ba:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80036bc:	2300      	movs	r3, #0
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	2300      	movs	r3, #0
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2301      	movs	r3, #1
 80036c6:	2200      	movs	r2, #0
 80036c8:	2101      	movs	r1, #1
 80036ca:	4880      	ldr	r0, [pc, #512]	; (80038cc <initSystem+0x2e0>)
 80036cc:	f007 fa42 	bl	800ab54 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 80036d0:	487e      	ldr	r0, [pc, #504]	; (80038cc <initSystem+0x2e0>)
 80036d2:	f007 fa61 	bl	800ab98 <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 80036d6:	4b7e      	ldr	r3, [pc, #504]	; (80038d0 <initSystem+0x2e4>)
 80036d8:	4a76      	ldr	r2, [pc, #472]	; (80038b4 <initSystem+0x2c8>)
 80036da:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 80036dc:	4b7c      	ldr	r3, [pc, #496]	; (80038d0 <initSystem+0x2e4>)
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 80036e2:	2302      	movs	r3, #2
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	2300      	movs	r3, #0
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	2301      	movs	r3, #1
 80036ec:	2200      	movs	r2, #0
 80036ee:	2102      	movs	r1, #2
 80036f0:	4877      	ldr	r0, [pc, #476]	; (80038d0 <initSystem+0x2e4>)
 80036f2:	f007 fa2f 	bl	800ab54 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 80036f6:	4876      	ldr	r0, [pc, #472]	; (80038d0 <initSystem+0x2e4>)
 80036f8:	f007 fa4e 	bl	800ab98 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 80036fc:	4b75      	ldr	r3, [pc, #468]	; (80038d4 <initSystem+0x2e8>)
 80036fe:	4a76      	ldr	r2, [pc, #472]	; (80038d8 <initSystem+0x2ec>)
 8003700:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8003702:	4b74      	ldr	r3, [pc, #464]	; (80038d4 <initSystem+0x2e8>)
 8003704:	2202      	movs	r2, #2
 8003706:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003708:	2300      	movs	r3, #0
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	2300      	movs	r3, #0
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2301      	movs	r3, #1
 8003712:	2200      	movs	r2, #0
 8003714:	2101      	movs	r1, #1
 8003716:	486f      	ldr	r0, [pc, #444]	; (80038d4 <initSystem+0x2e8>)
 8003718:	f007 fa1c 	bl	800ab54 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 800371c:	486d      	ldr	r0, [pc, #436]	; (80038d4 <initSystem+0x2e8>)
 800371e:	f007 fa3b 	bl	800ab98 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8003722:	4b6e      	ldr	r3, [pc, #440]	; (80038dc <initSystem+0x2f0>)
 8003724:	4a68      	ldr	r2, [pc, #416]	; (80038c8 <initSystem+0x2dc>)
 8003726:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8003728:	4b6c      	ldr	r3, [pc, #432]	; (80038dc <initSystem+0x2f0>)
 800372a:	220b      	movs	r2, #11
 800372c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800372e:	2300      	movs	r3, #0
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	2300      	movs	r3, #0
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2301      	movs	r3, #1
 8003738:	2200      	movs	r2, #0
 800373a:	2101      	movs	r1, #1
 800373c:	4867      	ldr	r0, [pc, #412]	; (80038dc <initSystem+0x2f0>)
 800373e:	f007 fa09 	bl	800ab54 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8003742:	4866      	ldr	r0, [pc, #408]	; (80038dc <initSystem+0x2f0>)
 8003744:	f007 fa28 	bl	800ab98 <GPIO_Config>

	//---------------------------I2C--------------------------------
	//---------------PIN: PB8----------------
	//------------AF4: I2C1_SCL----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SCL_MPU6050.pGPIOx = GPIOB;
 8003748:	4b65      	ldr	r3, [pc, #404]	; (80038e0 <initSystem+0x2f4>)
 800374a:	4a66      	ldr	r2, [pc, #408]	; (80038e4 <initSystem+0x2f8>)
 800374c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SCL_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 800374e:	4b64      	ldr	r3, [pc, #400]	; (80038e0 <initSystem+0x2f4>)
 8003750:	2208      	movs	r2, #8
 8003752:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SCL_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8003754:	2304      	movs	r3, #4
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	2300      	movs	r3, #0
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	2302      	movs	r3, #2
 800375e:	2201      	movs	r2, #1
 8003760:	2102      	movs	r1, #2
 8003762:	485f      	ldr	r0, [pc, #380]	; (80038e0 <initSystem+0x2f4>)
 8003764:	f007 f9f6 	bl	800ab54 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SCL_MPU6050);
 8003768:	485d      	ldr	r0, [pc, #372]	; (80038e0 <initSystem+0x2f4>)
 800376a:	f007 fa15 	bl	800ab98 <GPIO_Config>

	//---------------PIN: PB9----------------
	//------------AF4: I2C1_SDA----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SDA_MPU6050.pGPIOx = GPIOB;
 800376e:	4b5e      	ldr	r3, [pc, #376]	; (80038e8 <initSystem+0x2fc>)
 8003770:	4a5c      	ldr	r2, [pc, #368]	; (80038e4 <initSystem+0x2f8>)
 8003772:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SDA_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8003774:	4b5c      	ldr	r3, [pc, #368]	; (80038e8 <initSystem+0x2fc>)
 8003776:	2209      	movs	r2, #9
 8003778:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SDA_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 800377a:	2304      	movs	r3, #4
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	2300      	movs	r3, #0
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	2302      	movs	r3, #2
 8003784:	2201      	movs	r2, #1
 8003786:	2102      	movs	r1, #2
 8003788:	4857      	ldr	r0, [pc, #348]	; (80038e8 <initSystem+0x2fc>)
 800378a:	f007 f9e3 	bl	800ab54 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SDA_MPU6050);
 800378e:	4856      	ldr	r0, [pc, #344]	; (80038e8 <initSystem+0x2fc>)
 8003790:	f007 fa02 	bl	800ab98 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_CommTerm.ptrUSARTx = USART2;
 8003794:	4b55      	ldr	r3, [pc, #340]	; (80038ec <initSystem+0x300>)
 8003796:	4a56      	ldr	r2, [pc, #344]	; (80038f0 <initSystem+0x304>)
 8003798:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_CommTerm.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 800379a:	4b54      	ldr	r3, [pc, #336]	; (80038ec <initSystem+0x300>)
 800379c:	2202      	movs	r2, #2
 800379e:	701a      	strb	r2, [r3, #0]
	handler_USART_CommTerm.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 80037a0:	4b52      	ldr	r3, [pc, #328]	; (80038ec <initSystem+0x300>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	705a      	strb	r2, [r3, #1]
	handler_USART_CommTerm.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 80037a6:	4b51      	ldr	r3, [pc, #324]	; (80038ec <initSystem+0x300>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	709a      	strb	r2, [r3, #2]
	handler_USART_CommTerm.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 80037ac:	4b4f      	ldr	r3, [pc, #316]	; (80038ec <initSystem+0x300>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	70da      	strb	r2, [r3, #3]
	handler_USART_CommTerm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 80037b2:	4b4e      	ldr	r3, [pc, #312]	; (80038ec <initSystem+0x300>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	711a      	strb	r2, [r3, #4]
	handler_USART_CommTerm.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_DISABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 80037b8:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <initSystem+0x300>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	usart_Config_Init_Priority(&handler_USART_CommTerm, e_USART_PRIOPITY_6);
 80037be:	2106      	movs	r1, #6
 80037c0:	484a      	ldr	r0, [pc, #296]	; (80038ec <initSystem+0x300>)
 80037c2:	f008 fb53 	bl	800be6c <usart_Config_Init_Priority>
	USART_Config(&handler_USART_CommTerm);
 80037c6:	4849      	ldr	r0, [pc, #292]	; (80038ec <initSystem+0x300>)
 80037c8:	f008 f932 	bl	800ba30 <USART_Config>

	//-------------------Fin de Configuracion USARTx-----------------------

	//---------------TIM4----------------
	//Definimos el TIMx a usar
	handler_TIMER_Delay.ptrTIMx = TIM4;
 80037cc:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <initSystem+0x308>)
 80037ce:	4a4a      	ldr	r2, [pc, #296]	; (80038f8 <initSystem+0x30c>)
 80037d0:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Delay.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_100us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80037d2:	4b48      	ldr	r3, [pc, #288]	; (80038f4 <initSystem+0x308>)
 80037d4:	2264      	movs	r2, #100	; 0x64
 80037d6:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Delay.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80037d8:	4b46      	ldr	r3, [pc, #280]	; (80038f4 <initSystem+0x308>)
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Delay.TIMx_Config.TIMX_period = 10;   //Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80037de:	4b45      	ldr	r3, [pc, #276]	; (80038f4 <initSystem+0x308>)
 80037e0:	220a      	movs	r2, #10
 80037e2:	605a      	str	r2, [r3, #4]
	handler_TIMER_Delay.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80037e4:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <initSystem+0x308>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	timer_Config_Init_Priority(&handler_TIMER_Delay, e_TIMER_PRIOPITY_6);
 80037ea:	2106      	movs	r1, #6
 80037ec:	4841      	ldr	r0, [pc, #260]	; (80038f4 <initSystem+0x308>)
 80037ee:	f005 ff79 	bl	80096e4 <timer_Config_Init_Priority>
	BasicTimer_Config(&handler_TIMER_Delay);
 80037f2:	4840      	ldr	r0, [pc, #256]	; (80038f4 <initSystem+0x308>)
 80037f4:	f005 fe98 	bl	8009528 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 80037f8:	4b40      	ldr	r3, [pc, #256]	; (80038fc <initSystem+0x310>)
 80037fa:	4a41      	ldr	r2, [pc, #260]	; (8003900 <initSystem+0x314>)
 80037fc:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80037fe:	4b3f      	ldr	r3, [pc, #252]	; (80038fc <initSystem+0x310>)
 8003800:	220a      	movs	r2, #10
 8003802:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8003804:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <initSystem+0x310>)
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 800380a:	4b3c      	ldr	r3, [pc, #240]	; (80038fc <initSystem+0x310>)
 800380c:	2264      	movs	r2, #100	; 0x64
 800380e:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8003810:	4b3a      	ldr	r3, [pc, #232]	; (80038fc <initSystem+0x310>)
 8003812:	2200      	movs	r2, #0
 8003814:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 8003816:	4839      	ldr	r0, [pc, #228]	; (80038fc <initSystem+0x310>)
 8003818:	f005 fe86 	bl	8009528 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 800381c:	4b39      	ldr	r3, [pc, #228]	; (8003904 <initSystem+0x318>)
 800381e:	4a2a      	ldr	r2, [pc, #168]	; (80038c8 <initSystem+0x2dc>)
 8003820:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8003822:	4b38      	ldr	r3, [pc, #224]	; (8003904 <initSystem+0x318>)
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8003828:	4b37      	ldr	r3, [pc, #220]	; (8003908 <initSystem+0x31c>)
 800382a:	4a36      	ldr	r2, [pc, #216]	; (8003904 <initSystem+0x318>)
 800382c:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800382e:	4b36      	ldr	r3, [pc, #216]	; (8003908 <initSystem+0x31c>)
 8003830:	2202      	movs	r2, #2
 8003832:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	exti_Config_Int_Priority(&handler_EXTI_FotoR, e_EXTI_PRIOPITY_7);
 8003834:	2107      	movs	r1, #7
 8003836:	4834      	ldr	r0, [pc, #208]	; (8003908 <initSystem+0x31c>)
 8003838:	f006 ff98 	bl	800a76c <exti_Config_Int_Priority>
	extInt_Config(&handler_EXTI_FotoR);
 800383c:	4832      	ldr	r0, [pc, #200]	; (8003908 <initSystem+0x31c>)
 800383e:	f006 f887 	bl	8009950 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8003842:	4b32      	ldr	r3, [pc, #200]	; (800390c <initSystem+0x320>)
 8003844:	4a20      	ldr	r2, [pc, #128]	; (80038c8 <initSystem+0x2dc>)
 8003846:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8003848:	4b30      	ldr	r3, [pc, #192]	; (800390c <initSystem+0x320>)
 800384a:	2203      	movs	r2, #3
 800384c:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 800384e:	4b30      	ldr	r3, [pc, #192]	; (8003910 <initSystem+0x324>)
 8003850:	4a2e      	ldr	r2, [pc, #184]	; (800390c <initSystem+0x320>)
 8003852:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8003854:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <initSystem+0x324>)
 8003856:	2202      	movs	r2, #2
 8003858:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	exti_Config_Int_Priority(&handler_EXTI_FotoL, e_EXTI_PRIOPITY_7);
 800385a:	2107      	movs	r1, #7
 800385c:	482c      	ldr	r0, [pc, #176]	; (8003910 <initSystem+0x324>)
 800385e:	f006 ff85 	bl	800a76c <exti_Config_Int_Priority>
	extInt_Config(& handler_EXTI_FotoL);
 8003862:	482b      	ldr	r0, [pc, #172]	; (8003910 <initSystem+0x324>)
 8003864:	f006 f874 	bl	8009950 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8003868:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <initSystem+0x328>)
 800386a:	4a25      	ldr	r2, [pc, #148]	; (8003900 <initSystem+0x314>)
 800386c:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 800386e:	4b29      	ldr	r3, [pc, #164]	; (8003914 <initSystem+0x328>)
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8003874:	4b27      	ldr	r3, [pc, #156]	; (8003914 <initSystem+0x328>)
 8003876:	220a      	movs	r2, #10
 8003878:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 800387a:	4b26      	ldr	r3, [pc, #152]	; (8003914 <initSystem+0x328>)
 800387c:	2201      	movs	r2, #1
 800387e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 8003880:	4824      	ldr	r0, [pc, #144]	; (8003914 <initSystem+0x328>)
 8003882:	f007 fdaf 	bl	800b3e4 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8003886:	2101      	movs	r1, #1
 8003888:	4822      	ldr	r0, [pc, #136]	; (8003914 <initSystem+0x328>)
 800388a:	f007 ff0b 	bl	800b6a4 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 800388e:	4b22      	ldr	r3, [pc, #136]	; (8003918 <initSystem+0x32c>)
 8003890:	4a1b      	ldr	r2, [pc, #108]	; (8003900 <initSystem+0x314>)
 8003892:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8003894:	4b20      	ldr	r3, [pc, #128]	; (8003918 <initSystem+0x32c>)
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 800389a:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <initSystem+0x32c>)
 800389c:	220a      	movs	r2, #10
 800389e:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <initSystem+0x32c>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 80038a6:	481c      	ldr	r0, [pc, #112]	; (8003918 <initSystem+0x32c>)
 80038a8:	f007 fd9c 	bl	800b3e4 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 80038ac:	2101      	movs	r1, #1
 80038ae:	e035      	b.n	800391c <initSystem+0x330>
 80038b0:	20000234 	.word	0x20000234
 80038b4:	40020000 	.word	0x40020000
 80038b8:	20000240 	.word	0x20000240
 80038bc:	2000024c 	.word	0x2000024c
 80038c0:	200002b4 	.word	0x200002b4
 80038c4:	200002c0 	.word	0x200002c0
 80038c8:	40020800 	.word	0x40020800
 80038cc:	200002cc 	.word	0x200002cc
 80038d0:	20000328 	.word	0x20000328
 80038d4:	20000334 	.word	0x20000334
 80038d8:	40020c00 	.word	0x40020c00
 80038dc:	20000340 	.word	0x20000340
 80038e0:	2000028c 	.word	0x2000028c
 80038e4:	40020400 	.word	0x40020400
 80038e8:	20000298 	.word	0x20000298
 80038ec:	20000258 	.word	0x20000258
 80038f0:	40004400 	.word	0x40004400
 80038f4:	200003ac 	.word	0x200003ac
 80038f8:	40000800 	.word	0x40000800
 80038fc:	2000039c 	.word	0x2000039c
 8003900:	40000c00 	.word	0x40000c00
 8003904:	20000264 	.word	0x20000264
 8003908:	20000270 	.word	0x20000270
 800390c:	20000278 	.word	0x20000278
 8003910:	20000284 	.word	0x20000284
 8003914:	200002d8 	.word	0x200002d8
 8003918:	2000034c 	.word	0x2000034c
 800391c:	4808      	ldr	r0, [pc, #32]	; (8003940 <initSystem+0x354>)
 800391e:	f007 fec1 	bl	800b6a4 <statusInOutPWM>

	//-------------------Inicio de Configuracion I2Cx----------------------

	//---------------I2C1----------------
	//Definimos el I2Cx a usar
	handler_I2C_MPU6050.prtI2Cx = I2C1;
 8003922:	4b08      	ldr	r3, [pc, #32]	; (8003944 <initSystem+0x358>)
 8003924:	4a08      	ldr	r2, [pc, #32]	; (8003948 <initSystem+0x35c>)
 8003926:	601a      	str	r2, [r3, #0]
	//Definimos la configuracion para el I2C
	handler_I2C_MPU6050.modeI2C = I2C_MODE_FM;               //I2C_MODE_x  x->SM,FM
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <initSystem+0x358>)
 800392a:	2201      	movs	r2, #1
 800392c:	715a      	strb	r2, [r3, #5]
	handler_I2C_MPU6050.slaveAddress = ADDRESS_DOWN;         //Direccion del Sclave
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <initSystem+0x358>)
 8003930:	2268      	movs	r2, #104	; 0x68
 8003932:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	i2c_Config(&handler_I2C_MPU6050);
 8003934:	4803      	ldr	r0, [pc, #12]	; (8003944 <initSystem+0x358>)
 8003936:	f007 fa9b 	bl	800ae70 <i2c_Config>

	//---------------------Fin de Configuracion I2Cx----------------------

}
 800393a:	bf00      	nop
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	2000034c 	.word	0x2000034c
 8003944:	200002a4 	.word	0x200002a4
 8003948:	40005400 	.word	0x40005400

0800394c <int_MPU>:



//------------------------------Inicio configuracion del MPU------------------------------------------
void int_MPU(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
	//Definimos la escala de las diferentes magnitudes fisicas
	handler_MPUAccel_MPU6050.fullScaleACCEL = ACCEL_2G;
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <int_MPU+0x24>)
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_MPU6050.fullScaleGYRO = GYRO_250;
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <int_MPU+0x24>)
 8003958:	2200      	movs	r2, #0
 800395a:	705a      	strb	r2, [r3, #1]
	//Definimos el handler correspondiente al I2C
	handler_MPUAccel_MPU6050.ptrI2Chandler = &handler_I2C_MPU6050;
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <int_MPU+0x24>)
 800395e:	4a05      	ldr	r2, [pc, #20]	; (8003974 <int_MPU+0x28>)
 8003960:	605a      	str	r2, [r3, #4]
	//Cargamos configuracion
	configMPUAccel(&handler_MPUAccel_MPU6050, &handler_TIMER_Delay, &countingTimer);
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <int_MPU+0x2c>)
 8003964:	4905      	ldr	r1, [pc, #20]	; (800397c <int_MPU+0x30>)
 8003966:	4802      	ldr	r0, [pc, #8]	; (8003970 <int_MPU+0x24>)
 8003968:	f7fe fa06 	bl	8001d78 <configMPUAccel>

}
 800396c:	bf00      	nop
 800396e:	bd80      	pop	{r7, pc}
 8003970:	200002ac 	.word	0x200002ac
 8003974:	200002a4 	.word	0x200002a4
 8003978:	200003bc 	.word	0x200003bc
 800397c:	200003ac 	.word	0x200003ac

08003980 <int_Config_Motor>:

//------------------------------Fin configuracion del MPU------------------------------------------

//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  28;
 8003984:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <int_Config_Motor+0xf4>)
 8003986:	4a3c      	ldr	r2, [pc, #240]	; (8003a78 <int_Config_Motor+0xf8>)
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_R.configMotor.frecuency = &value_period;
 800398a:	4b3a      	ldr	r3, [pc, #232]	; (8003a74 <int_Config_Motor+0xf4>)
 800398c:	4a3b      	ldr	r2, [pc, #236]	; (8003a7c <int_Config_Motor+0xfc>)
 800398e:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_R.configMotor.dir = SET;
 8003990:	4b38      	ldr	r3, [pc, #224]	; (8003a74 <int_Config_Motor+0xf4>)
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 8003998:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <int_Config_Motor+0xf4>)
 800399a:	4a39      	ldr	r2, [pc, #228]	; (8003a80 <int_Config_Motor+0x100>)
 800399c:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 800399e:	4b35      	ldr	r3, [pc, #212]	; (8003a74 <int_Config_Motor+0xf4>)
 80039a0:	4a38      	ldr	r2, [pc, #224]	; (8003a84 <int_Config_Motor+0x104>)
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 80039a4:	4b33      	ldr	r3, [pc, #204]	; (8003a74 <int_Config_Motor+0xf4>)
 80039a6:	4a38      	ldr	r2, [pc, #224]	; (8003a88 <int_Config_Motor+0x108>)
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 80039aa:	4b32      	ldr	r3, [pc, #200]	; (8003a74 <int_Config_Motor+0xf4>)
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	4b30      	ldr	r3, [pc, #192]	; (8003a74 <int_Config_Motor+0xf4>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4a2f      	ldr	r2, [pc, #188]	; (8003a74 <int_Config_Motor+0xf4>)
 80039b8:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 80039ba:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <int_Config_Motor+0xf4>)
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	4b2c      	ldr	r3, [pc, #176]	; (8003a74 <int_Config_Motor+0xf4>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	4a2b      	ldr	r2, [pc, #172]	; (8003a74 <int_Config_Motor+0xf4>)
 80039c8:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_R.parametersMotor.parametersPID.kp = 250;
 80039ca:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <int_Config_Motor+0xf4>)
 80039cc:	4a2f      	ldr	r2, [pc, #188]	; (8003a8c <int_Config_Motor+0x10c>)
 80039ce:	611a      	str	r2, [r3, #16]
	handler_Motor_R.parametersMotor.parametersPID.ki = 0;
 80039d0:	4b28      	ldr	r3, [pc, #160]	; (8003a74 <int_Config_Motor+0xf4>)
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	615a      	str	r2, [r3, #20]
	handler_Motor_R.parametersMotor.parametersPID.kd = 100;
 80039d8:	4b26      	ldr	r3, [pc, #152]	; (8003a74 <int_Config_Motor+0xf4>)
 80039da:	4a2d      	ldr	r2, [pc, #180]	; (8003a90 <int_Config_Motor+0x110>)
 80039dc:	619a      	str	r2, [r3, #24]

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  28;
 80039de:	4b2d      	ldr	r3, [pc, #180]	; (8003a94 <int_Config_Motor+0x114>)
 80039e0:	4a25      	ldr	r2, [pc, #148]	; (8003a78 <int_Config_Motor+0xf8>)
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_L.configMotor.frecuency = &value_period;
 80039e4:	4b2b      	ldr	r3, [pc, #172]	; (8003a94 <int_Config_Motor+0x114>)
 80039e6:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <int_Config_Motor+0xfc>)
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_L.configMotor.dir = SET;
 80039ea:	4b2a      	ldr	r3, [pc, #168]	; (8003a94 <int_Config_Motor+0x114>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 80039f2:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <int_Config_Motor+0x114>)
 80039f4:	4a28      	ldr	r2, [pc, #160]	; (8003a98 <int_Config_Motor+0x118>)
 80039f6:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 80039f8:	4b26      	ldr	r3, [pc, #152]	; (8003a94 <int_Config_Motor+0x114>)
 80039fa:	4a28      	ldr	r2, [pc, #160]	; (8003a9c <int_Config_Motor+0x11c>)
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 80039fe:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <int_Config_Motor+0x114>)
 8003a00:	4a27      	ldr	r2, [pc, #156]	; (8003aa0 <int_Config_Motor+0x120>)
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 8003a04:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <int_Config_Motor+0x114>)
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	60da      	str	r2, [r3, #12]
 8003a0c:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <int_Config_Motor+0x114>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4a20      	ldr	r2, [pc, #128]	; (8003a94 <int_Config_Motor+0x114>)
 8003a12:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 8003a14:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <int_Config_Motor+0x114>)
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <int_Config_Motor+0x114>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a1c      	ldr	r2, [pc, #112]	; (8003a94 <int_Config_Motor+0x114>)
 8003a22:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_L.parametersMotor.parametersPID.kp = 250;
 8003a24:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <int_Config_Motor+0x114>)
 8003a26:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <int_Config_Motor+0x10c>)
 8003a28:	611a      	str	r2, [r3, #16]
	handler_Motor_L.parametersMotor.parametersPID.ki = 0;
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <int_Config_Motor+0x114>)
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	615a      	str	r2, [r3, #20]
	handler_Motor_L.parametersMotor.parametersPID.kd = 100;
 8003a32:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <int_Config_Motor+0x114>)
 8003a34:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <int_Config_Motor+0x110>)
 8003a36:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distace.e = parameter_PID_distace.e_prev = 0;
 8003a38:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <int_Config_Motor+0x124>)
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	60da      	str	r2, [r3, #12]
 8003a40:	4b18      	ldr	r3, [pc, #96]	; (8003aa4 <int_Config_Motor+0x124>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <int_Config_Motor+0x124>)
 8003a46:	6053      	str	r3, [r2, #4]
	parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 8003a48:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <int_Config_Motor+0x124>)
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <int_Config_Motor+0x124>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <int_Config_Motor+0x124>)
 8003a56:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	parameter_PID_distace.kp = 0.8;
 8003a58:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <int_Config_Motor+0x124>)
 8003a5a:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <int_Config_Motor+0x128>)
 8003a5c:	611a      	str	r2, [r3, #16]
	parameter_PID_distace.ki = 0.1;
 8003a5e:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <int_Config_Motor+0x124>)
 8003a60:	4a12      	ldr	r2, [pc, #72]	; (8003aac <int_Config_Motor+0x12c>)
 8003a62:	615a      	str	r2, [r3, #20]
	parameter_PID_distace.kd = 1.2;  //0.8
 8003a64:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <int_Config_Motor+0x124>)
 8003a66:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <int_Config_Motor+0x130>)
 8003a68:	619a      	str	r2, [r3, #24]
};
 8003a6a:	bf00      	nop
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	200002e4 	.word	0x200002e4
 8003a78:	41e00000 	.word	0x41e00000
 8003a7c:	20000014 	.word	0x20000014
 8003a80:	200002cc 	.word	0x200002cc
 8003a84:	200002c0 	.word	0x200002c0
 8003a88:	200002d8 	.word	0x200002d8
 8003a8c:	437a0000 	.word	0x437a0000
 8003a90:	42c80000 	.word	0x42c80000
 8003a94:	20000358 	.word	0x20000358
 8003a98:	20000340 	.word	0x20000340
 8003a9c:	20000334 	.word	0x20000334
 8003aa0:	2000034c 	.word	0x2000034c
 8003aa4:	200003cc 	.word	0x200003cc
 8003aa8:	3f4ccccd 	.word	0x3f4ccccd
 8003aac:	3dcccccd 	.word	0x3dcccccd
 8003ab0:	3f99999a 	.word	0x3f99999a

08003ab4 <BasicUSART2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af02      	add	r7, sp, #8
	usartData = getRxData();
 8003aba:	f008 fa9d 	bl	800bff8 <getRxData>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <BasicUSART2_Callback+0x98>)
 8003ac4:	701a      	strb	r2, [r3, #0]

	//Se define variable para verificar si una tarea de mayor proridad esta lista para Running
	BaseType_t pxHigherPriorityTaskWoken;
	(void) pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 8003aca:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <BasicUSART2_Callback+0x9c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f003 fa37 	bl	8006f42 <xQueueIsQueueFullFromISR>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4a1f      	ldr	r2, [pc, #124]	; (8003b54 <BasicUSART2_Callback+0xa0>)
 8003ad8:	6013      	str	r3, [r2, #0]

	//Por tanto si es True entonces aun no hay espacio
	if(xReturned != pdTRUE)
 8003ada:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <BasicUSART2_Callback+0xa0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d00f      	beq.n	8003b02 <BasicUSART2_Callback+0x4e>
	{
		if(usartData != '\r' && usartData != '\n')
 8003ae2:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <BasicUSART2_Callback+0x98>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b0d      	cmp	r3, #13
 8003ae8:	d01d      	beq.n	8003b26 <BasicUSART2_Callback+0x72>
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <BasicUSART2_Callback+0x98>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b0a      	cmp	r3, #10
 8003af0:	d019      	beq.n	8003b26 <BasicUSART2_Callback+0x72>
		{
			//Se envia caracter a la cola
			xQueueSendToBackFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8003af2:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <BasicUSART2_Callback+0x9c>)
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	2300      	movs	r3, #0
 8003af8:	2200      	movs	r2, #0
 8003afa:	4914      	ldr	r1, [pc, #80]	; (8003b4c <BasicUSART2_Callback+0x98>)
 8003afc:	f002 fe10 	bl	8006720 <xQueueGenericSendFromISR>
 8003b00:	e011      	b.n	8003b26 <BasicUSART2_Callback+0x72>
		}
	}
	else
	{
		if(usartData == '@')
 8003b02:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <BasicUSART2_Callback+0x98>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b40      	cmp	r3, #64	; 0x40
 8003b08:	d10d      	bne.n	8003b26 <BasicUSART2_Callback+0x72>
		{
			//Se recibe mensaje de la cola
			xQueueReceiveFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <BasicUSART2_Callback+0x9c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	490e      	ldr	r1, [pc, #56]	; (8003b4c <BasicUSART2_Callback+0x98>)
 8003b12:	4618      	mov	r0, r3
 8003b14:	f003 f858 	bl	8006bc8 <xQueueReceiveFromISR>
			//Se envia mensaje a la cola
			xQueueSendToBackFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8003b18:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <BasicUSART2_Callback+0x9c>)
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	2200      	movs	r2, #0
 8003b20:	490a      	ldr	r1, [pc, #40]	; (8003b4c <BasicUSART2_Callback+0x98>)
 8003b22:	f002 fdfd 	bl	8006720 <xQueueGenericSendFromISR>
		}
	}
	//Se envia notificacion al command Task
	if(usartData == '@')
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <BasicUSART2_Callback+0x98>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d10a      	bne.n	8003b44 <BasicUSART2_Callback+0x90>
	{
		xTaskNotifyFromISR(xHandleTask_Commands, 0, eNoAction, NULL);
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <BasicUSART2_Callback+0xa4>)
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	2300      	movs	r3, #0
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f004 fb86 	bl	8008250 <xTaskGenericNotifyFromISR>
	}
}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000010 	.word	0x20000010
 8003b50:	20000430 	.word	0x20000430
 8003b54:	200003ec 	.word	0x200003ec
 8003b58:	200003f8 	.word	0x200003f8

08003b5c <BasicTimer4_Callback>:

//-------------------------Delay--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer4_Callback(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
	countingTimer++;
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <BasicTimer4_Callback+0x1c>)
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	3301      	adds	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <BasicTimer4_Callback+0x1c>)
 8003b6a:	801a      	strh	r2, [r3, #0]
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	200003bc 	.word	0x200003bc

08003b7c <callback_extInt1>:

//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
	//Aumentamos valor en als cuentas
	handler_Motor_R.parametersMotor.count++;
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <callback_extInt1+0x1c>)
 8003b82:	8b9b      	ldrh	r3, [r3, #28]
 8003b84:	3301      	adds	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <callback_extInt1+0x1c>)
 8003b8a:	839a      	strh	r2, [r3, #28]
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	200002e4 	.word	0x200002e4

08003b9c <callback_extInt3>:
void callback_extInt3(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
	//Aumentamos valor en las cuentas
	handler_Motor_L.parametersMotor.count++;
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <callback_extInt3+0x1c>)
 8003ba2:	8b9b      	ldrh	r3, [r3, #28]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <callback_extInt3+0x1c>)
 8003baa:	839a      	strh	r2, [r3, #28]
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20000358 	.word	0x20000358

08003bbc <vTask_Print>:
//-----------------------Inicio definicion funciones de las Task---------------------------

//------------Tareas de para recepcion y envio de informacion------------------
//-------Tarea de Imprimir-------
void vTask_Print(void * pvParameters)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	char *msg;

	while(1)
	{
		//Se espera por el puntero del mensaje
		xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <vTask_Print+0x28>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f107 010c 	add.w	r1, r7, #12
 8003bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f002 fe4f 	bl	8006874 <xQueueReceive>
		//Enviamos por puerto serial dicho mensaje
		writeMsg(&handler_USART_CommTerm, msg);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4803      	ldr	r0, [pc, #12]	; (8003be8 <vTask_Print+0x2c>)
 8003bdc:	f008 f9ed 	bl	800bfba <writeMsg>
		xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8003be0:	e7f0      	b.n	8003bc4 <vTask_Print+0x8>
 8003be2:	bf00      	nop
 8003be4:	20000428 	.word	0x20000428
 8003be8:	20000258 	.word	0x20000258

08003bec <vTask_Commands>:
	}
}
//-------Tarea de los comando-------
void vTask_Commands(void * pvParameters)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003bf2:	af02      	add	r7, sp, #8
 8003bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bfc:	6018      	str	r0, [r3, #0]
	BaseType_t notify_status = {0};
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	char stringsend[500];

	while(1)
	{
		//Se espera por la notificacion de la interrupcion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8003c04:	f04f 33ff 	mov.w	r3, #4294967295
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2100      	movs	r1, #0
 8003c10:	2000      	movs	r0, #0
 8003c12:	f004 f9cb 	bl	8007fac <xTaskGenericNotifyWait>
 8003c16:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8003c1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d1f0      	bne.n	8003c04 <vTask_Commands+0x18>
		{
			//Se procesa el comando recibido
			process_stringsend(stringsend);
 8003c22:	f107 0308 	add.w	r3, r7, #8
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 f820 	bl	8004c6c <process_stringsend>
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8003c2c:	e7ea      	b.n	8003c04 <vTask_Commands+0x18>
	...

08003c30 <vTask_Menu>:
		}
	}
}
//------Tarea Menu-------
void vTask_Menu(void * pvParameters)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08c      	sub	sp, #48	; 0x30
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	6078      	str	r0, [r7, #4]
	//Variables para la recepcion
	command_t xReceivedStructure;
	BaseType_t notify_status;
	//Mensaje inicial del menu
	const char *msg_menu = "=======================\n"
 8003c38:	4b58      	ldr	r3, [pc, #352]	; (8003d9c <vTask_Menu+0x16c>)
 8003c3a:	60fb      	str	r3, [r7, #12]
						   "square # # --- #:lad[mm], #:dir 0->L 1->R \n"
						   "applyastar \n"
						   "exepathastar \n"
						   "init \n";
	//Se envia el mensaje del menu de opciones
	xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 8003c3c:	4b58      	ldr	r3, [pc, #352]	; (8003da0 <vTask_Menu+0x170>)
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	f107 010c 	add.w	r1, r7, #12
 8003c44:	2300      	movs	r3, #0
 8003c46:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4a:	f002 fc83 	bl	8006554 <xQueueGenericSend>

	while(1)
	{
		//Se envia el mensaje del menu de opciones
		if(next_state == sMenuOperation){ timer_delay(&handler_TIMER_Delay, &countingTimer, 1000); xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY); }
 8003c4e:	4b55      	ldr	r3, [pc, #340]	; (8003da4 <vTask_Menu+0x174>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d10e      	bne.n	8003c74 <vTask_Menu+0x44>
 8003c56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c5a:	4953      	ldr	r1, [pc, #332]	; (8003da8 <vTask_Menu+0x178>)
 8003c5c:	4853      	ldr	r0, [pc, #332]	; (8003dac <vTask_Menu+0x17c>)
 8003c5e:	f005 fe11 	bl	8009884 <timer_delay>
 8003c62:	4b4f      	ldr	r3, [pc, #316]	; (8003da0 <vTask_Menu+0x170>)
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	f107 010c 	add.w	r1, r7, #12
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c70:	f002 fc70 	bl	8006554 <xQueueGenericSend>
		//Se espera por la recepcion de un comando
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2100      	movs	r1, #0
 8003c80:	2000      	movs	r0, #0
 8003c82:	f004 f993 	bl	8007fac <xTaskGenericNotifyWait>
		//Se verificamos recibe el comando
		notify_status = xQueueReceive(xQueue_StructCommand, &xReceivedStructure, 0 );
 8003c86:	4b4a      	ldr	r3, [pc, #296]	; (8003db0 <vTask_Menu+0x180>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f107 0110 	add.w	r1, r7, #16
 8003c8e:	2200      	movs	r2, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f002 fdef 	bl	8006874 <xQueueReceive>
 8003c96:	6278      	str	r0, [r7, #36]	; 0x24
		//Se verificamos el tipo de comando
		if(notify_status == pdTRUE)
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d1d7      	bne.n	8003c4e <vTask_Menu+0x1e>
		{
			if(strcmp(xReceivedStructure.send_cmd, "line") == 0)
 8003c9e:	f107 0310 	add.w	r3, r7, #16
 8003ca2:	4944      	ldr	r1, [pc, #272]	; (8003db4 <vTask_Menu+0x184>)
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fc fa9b 	bl	80001e0 <strcmp>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <vTask_Menu+0x96>
			{
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Line, (uint32_t) xReceivedStructure.firtparameter, eSetValueWithoutOverwrite);
 8003cb0:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <vTask_Menu+0x188>)
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2300      	movs	r3, #0
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f004 f9f4 	bl	80080ac <xTaskGenericNotify>
 8003cc4:	e7c3      	b.n	8003c4e <vTask_Menu+0x1e>
			}
			else if(strcmp(xReceivedStructure.send_cmd, "turn") == 0)
 8003cc6:	f107 0310 	add.w	r3, r7, #16
 8003cca:	493c      	ldr	r1, [pc, #240]	; (8003dbc <vTask_Menu+0x18c>)
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fc fa87 	bl	80001e0 <strcmp>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <vTask_Menu+0xbe>
			{
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Turn, (uint32_t) &xReceivedStructure, eSetValueWithoutOverwrite);
 8003cd8:	4b39      	ldr	r3, [pc, #228]	; (8003dc0 <vTask_Menu+0x190>)
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	f107 0210 	add.w	r2, r7, #16
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f004 f9e0 	bl	80080ac <xTaskGenericNotify>
 8003cec:	e7af      	b.n	8003c4e <vTask_Menu+0x1e>
			}
			else if(strcmp(xReceivedStructure.send_cmd, "square") == 0)
 8003cee:	f107 0310 	add.w	r3, r7, #16
 8003cf2:	4934      	ldr	r1, [pc, #208]	; (8003dc4 <vTask_Menu+0x194>)
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fc fa73 	bl	80001e0 <strcmp>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <vTask_Menu+0xe6>
			{
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Square, (uint32_t) &xReceivedStructure, eSetValueWithoutOverwrite);
 8003d00:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <vTask_Menu+0x198>)
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	f107 0210 	add.w	r2, r7, #16
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	2100      	movs	r1, #0
 8003d10:	f004 f9cc 	bl	80080ac <xTaskGenericNotify>
 8003d14:	e79b      	b.n	8003c4e <vTask_Menu+0x1e>
			}
			else if(strcmp(xReceivedStructure.send_cmd, "applyastar") == 0)
 8003d16:	f107 0310 	add.w	r3, r7, #16
 8003d1a:	492c      	ldr	r1, [pc, #176]	; (8003dcc <vTask_Menu+0x19c>)
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fc fa5f 	bl	80001e0 <strcmp>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d103      	bne.n	8003d30 <vTask_Menu+0x100>
			{
				//Cambio de state
				next_state = sAStar;
 8003d28:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <vTask_Menu+0x174>)
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	e78e      	b.n	8003c4e <vTask_Menu+0x1e>
			}
			else if(strcmp(xReceivedStructure.send_cmd, "exepathastar") == 0)
 8003d30:	f107 0310 	add.w	r3, r7, #16
 8003d34:	4926      	ldr	r1, [pc, #152]	; (8003dd0 <vTask_Menu+0x1a0>)
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fc fa52 	bl	80001e0 <strcmp>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <vTask_Menu+0x126>
			{
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Execute_Astar, 0, eNoAction);
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <vTask_Menu+0x1a4>)
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	2300      	movs	r3, #0
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2100      	movs	r1, #0
 8003d50:	f004 f9ac 	bl	80080ac <xTaskGenericNotify>
 8003d54:	e77b      	b.n	8003c4e <vTask_Menu+0x1e>
			}
			else if(strcmp(xReceivedStructure.send_cmd, "init") == 0)
 8003d56:	f107 0310 	add.w	r3, r7, #16
 8003d5a:	491f      	ldr	r1, [pc, #124]	; (8003dd8 <vTask_Menu+0x1a8>)
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fc fa3f 	bl	80001e0 <strcmp>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d105      	bne.n	8003d74 <vTask_Menu+0x144>
			{
				//Restablecimiento de coordenadas
				init_coordinates();
 8003d68:	f001 fb76 	bl	8005458 <init_coordinates>
				//Cambio de state
				next_state = sMenuOperation;
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <vTask_Menu+0x174>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	e76c      	b.n	8003c4e <vTask_Menu+0x1e>
			}
			else
			{
				//Cambio de state
				next_state = sMenuOperation;
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <vTask_Menu+0x174>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	701a      	strb	r2, [r3, #0]
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_com_invalid, portMAX_DELAY);
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <vTask_Menu+0x170>)
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f04f 32ff 	mov.w	r2, #4294967295
 8003d84:	4915      	ldr	r1, [pc, #84]	; (8003ddc <vTask_Menu+0x1ac>)
 8003d86:	f002 fbe5 	bl	8006554 <xQueueGenericSend>
				//Entregamos el procesador a la Tarea Print
				taskYIELD();
 8003d8a:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <vTask_Menu+0x1b0>)
 8003d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	f3bf 8f6f 	isb	sy
		if(next_state == sMenuOperation){ timer_delay(&handler_TIMER_Delay, &countingTimer, 1000); xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY); }
 8003d9a:	e758      	b.n	8003c4e <vTask_Menu+0x1e>
 8003d9c:	0801408c 	.word	0x0801408c
 8003da0:	20000428 	.word	0x20000428
 8003da4:	20000024 	.word	0x20000024
 8003da8:	200003bc 	.word	0x200003bc
 8003dac:	200003ac 	.word	0x200003ac
 8003db0:	2000042c 	.word	0x2000042c
 8003db4:	08014160 	.word	0x08014160
 8003db8:	200003fc 	.word	0x200003fc
 8003dbc:	08014168 	.word	0x08014168
 8003dc0:	2000040c 	.word	0x2000040c
 8003dc4:	08014170 	.word	0x08014170
 8003dc8:	20000410 	.word	0x20000410
 8003dcc:	08014178 	.word	0x08014178
 8003dd0:	08014184 	.word	0x08014184
 8003dd4:	20000414 	.word	0x20000414
 8003dd8:	08014194 	.word	0x08014194
 8003ddc:	20000028 	.word	0x20000028
 8003de0:	e000ed04 	.word	0xe000ed04

08003de4 <vTask_Execute_Operation>:
}

//-----------------------Tareas de Operaciones--------------------
//------------Tarea grupo de eventos---------------
void vTask_Execute_Operation(void *pvParameters)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08e      	sub	sp, #56	; 0x38
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	6078      	str	r0, [r7, #4]
	//Definicion de variables
	Parameters_Operation_t option_operation;
	const EventBits_t xBitsToWaitFor = (ENABLE_OPERATION_BIT | EXECUTE_OPERATION_BIT);
 8003dec:	2303      	movs	r3, #3
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
	BaseType_t status;
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por lis bit eventos para generar una condicion de desbloqueo
		xEventGroupWaitBits(xEventGroup_Execute_Operation, xBitsToWaitFor, pdFALSE, pdTRUE, portMAX_DELAY);
 8003df0:	4b3e      	ldr	r3, [pc, #248]	; (8003eec <vTask_Execute_Operation+0x108>)
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	f04f 33ff 	mov.w	r3, #4294967295
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e00:	f002 f864 	bl	8005ecc <xEventGroupWaitBits>
		//Impiamos el bit correspondiente a la ejecucion
		xEventGroupClearBits(xEventGroup_Execute_Operation, EXECUTE_OPERATION_BIT);
 8003e04:	4b39      	ldr	r3, [pc, #228]	; (8003eec <vTask_Execute_Operation+0x108>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2102      	movs	r1, #2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f002 f92c 	bl	8006068 <xEventGroupClearBits>
		//Recibimos las opciones de las operaciones
		status = xQueueReceive(xQueue_Operation, &option_operation, 0);
 8003e10:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <vTask_Execute_Operation+0x10c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f107 0108 	add.w	r1, r7, #8
 8003e18:	2200      	movs	r2, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f002 fd2a 	bl	8006874 <xQueueReceive>
 8003e20:	62b8      	str	r0, [r7, #40]	; 0x28
		//Si se presenta una operacion se ejecuta
		if(status ==pdTRUE)
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d13d      	bne.n	8003ea4 <vTask_Execute_Operation+0xc0>
		{
			//Aseguramos que seguimos en status de ejecucion
			next_state = sExecution;
 8003e28:	4b32      	ldr	r3, [pc, #200]	; (8003ef4 <vTask_Execute_Operation+0x110>)
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	701a      	strb	r2, [r3, #0]
			//Delay para espera la finalizacion del modo
			timer_delay(&handler_TIMER_Delay, &countingTimer, 500);
 8003e2e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e32:	4931      	ldr	r1, [pc, #196]	; (8003ef8 <vTask_Execute_Operation+0x114>)
 8003e34:	4831      	ldr	r0, [pc, #196]	; (8003efc <vTask_Execute_Operation+0x118>)
 8003e36:	f005 fd25 	bl	8009884 <timer_delay>
			//Deacuerdo a la operacion se configura
			switch(option_operation.operacion)
 8003e3a:	7a3b      	ldrb	r3, [r7, #8]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d002      	beq.n	8003e46 <vTask_Execute_Operation+0x62>
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d023      	beq.n	8003e8c <vTask_Execute_Operation+0xa8>
				case TURN:{
					//Configuracion inicial del giro
					turn_itself(option_operation.grad_Rotative);
					break;
				}
				default:{ break; }
 8003e44:	e050      	b.n	8003ee8 <vTask_Execute_Operation+0x104>
					change_coordinates_position(&parameter_Path_Robot, option_operation.x_destination, option_operation.y_destination,
 8003e46:	ed97 7b04 	vldr	d7, [r7, #16]
 8003e4a:	ed97 6b06 	vldr	d6, [r7, #24]
 8003e4e:	4b2c      	ldr	r3, [pc, #176]	; (8003f00 <vTask_Execute_Operation+0x11c>)
 8003e50:	ed93 5b16 	vldr	d5, [r3, #88]	; 0x58
 8003e54:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <vTask_Execute_Operation+0x11c>)
 8003e56:	ed93 4b18 	vldr	d4, [r3, #96]	; 0x60
 8003e5a:	eeb0 3a44 	vmov.f32	s6, s8
 8003e5e:	eef0 3a64 	vmov.f32	s7, s9
 8003e62:	eeb0 2a45 	vmov.f32	s4, s10
 8003e66:	eef0 2a65 	vmov.f32	s5, s11
 8003e6a:	eeb0 1a46 	vmov.f32	s2, s12
 8003e6e:	eef0 1a66 	vmov.f32	s3, s13
 8003e72:	eeb0 0a47 	vmov.f32	s0, s14
 8003e76:	eef0 0a67 	vmov.f32	s1, s15
 8003e7a:	4821      	ldr	r0, [pc, #132]	; (8003f00 <vTask_Execute_Operation+0x11c>)
 8003e7c:	f7fe fbe8 	bl	8002650 <change_coordinates_position>
					straight_line(duttySetPoint);
 8003e80:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <vTask_Execute_Operation+0x120>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 f987 	bl	8005198 <straight_line>
					break;
 8003e8a:	e02d      	b.n	8003ee8 <vTask_Execute_Operation+0x104>
					turn_itself(option_operation.grad_Rotative);
 8003e8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e90:	4610      	mov	r0, r2
 8003e92:	4619      	mov	r1, r3
 8003e94:	f7fc fe78 	bl	8000b88 <__aeabi_d2iz>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	b21b      	sxth	r3, r3
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f001 fa71 	bl	8005384 <turn_itself>
					break;
 8003ea2:	e021      	b.n	8003ee8 <vTask_Execute_Operation+0x104>
			}
		}
		else
		{
			//Impiamos el bit correspondiente a la habilitacion
			xEventGroupClearBits(xEventGroup_Execute_Operation, ENABLE_OPERATION_BIT);
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <vTask_Execute_Operation+0x108>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f002 f8dc 	bl	8006068 <xEventGroupClearBits>
			//cambio de status
			next_state = sMenuOperation;
 8003eb0:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <vTask_Execute_Operation+0x110>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	701a      	strb	r2, [r3, #0]
			//Se envia la opcion especificada
			xQueueSend(xQueue_Print, &msg_finish_Operation, portMAX_DELAY);
 8003eb6:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <vTask_Execute_Operation+0x124>)
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec0:	4912      	ldr	r1, [pc, #72]	; (8003f0c <vTask_Execute_Operation+0x128>)
 8003ec2:	f002 fb47 	bl	8006554 <xQueueGenericSend>
			//Entregamos el procesador a la Tarea Print
			taskYIELD();
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <vTask_Execute_Operation+0x12c>)
 8003ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	f3bf 8f6f 	isb	sy
			//Notificamos Tarea de menu para imprimir mensaje de operaciones
			xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <vTask_Execute_Operation+0x130>)
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	2300      	movs	r3, #0
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	f004 f8e2 	bl	80080ac <xTaskGenericNotify>
		xEventGroupWaitBits(xEventGroup_Execute_Operation, xBitsToWaitFor, pdFALSE, pdTRUE, portMAX_DELAY);
 8003ee8:	e782      	b.n	8003df0 <vTask_Execute_Operation+0xc>
 8003eea:	bf00      	nop
 8003eec:	20000440 	.word	0x20000440
 8003ef0:	20000434 	.word	0x20000434
 8003ef4:	20000024 	.word	0x20000024
 8003ef8:	200003bc 	.word	0x200003bc
 8003efc:	200003ac 	.word	0x200003ac
 8003f00:	20008de8 	.word	0x20008de8
 8003f04:	20000018 	.word	0x20000018
 8003f08:	20000428 	.word	0x20000428
 8003f0c:	20000030 	.word	0x20000030
 8003f10:	e000ed04 	.word	0xe000ed04
 8003f14:	200003f0 	.word	0x200003f0

08003f18 <vTask_Line>:
		}
	}
}
//------------Tarea linea---------------
void vTask_Line(void * pvParameters)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	6078      	str	r0, [r7, #4]
	//Definicion de variable de notificacion
	BaseType_t notify_status = {0};
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
	uint32_t parameter;

	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&parameter, portMAX_DELAY);
 8003f24:	f107 0308 	add.w	r3, r7, #8
 8003f28:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2c:	9200      	str	r2, [sp, #0]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2100      	movs	r1, #0
 8003f32:	2000      	movs	r0, #0
 8003f34:	f004 f83a 	bl	8007fac <xTaskGenericNotifyWait>
 8003f38:	60f8      	str	r0, [r7, #12]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d1f1      	bne.n	8003f24 <vTask_Line+0xc>
		{
			//Definicion de parametros
			change_position(&parameter_Path_Robot, parameter, parameter_Path_Robot.goal_Position_x, parameter_Path_Robot.goal_Position_y);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	461a      	mov	r2, r3
 8003f44:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <vTask_Line+0x64>)
 8003f46:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <vTask_Line+0x64>)
 8003f4c:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8003f50:	eeb0 1a46 	vmov.f32	s2, s12
 8003f54:	eef0 1a66 	vmov.f32	s3, s13
 8003f58:	eeb0 0a47 	vmov.f32	s0, s14
 8003f5c:	eef0 0a67 	vmov.f32	s1, s15
 8003f60:	4611      	mov	r1, r2
 8003f62:	4806      	ldr	r0, [pc, #24]	; (8003f7c <vTask_Line+0x64>)
 8003f64:	f7fe fadc 	bl	8002520 <change_position>
			//Configuracion inicial linea recta
			straight_line(duttySetPoint);
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <vTask_Line+0x68>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 f913 	bl	8005198 <straight_line>
			//Cambio de state
			next_state = sExecution;
 8003f72:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <vTask_Line+0x6c>)
 8003f74:	2202      	movs	r2, #2
 8003f76:	701a      	strb	r2, [r3, #0]
		notify_status = xTaskNotifyWait(0,0,&parameter, portMAX_DELAY);
 8003f78:	e7d4      	b.n	8003f24 <vTask_Line+0xc>
 8003f7a:	bf00      	nop
 8003f7c:	20008de8 	.word	0x20008de8
 8003f80:	20000018 	.word	0x20000018
 8003f84:	20000024 	.word	0x20000024

08003f88 <vTask_Turn>:
		}
	}
}
//------Tarea de Turn------------
void vTask_Turn(void *pvParameters)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	6078      	str	r0, [r7, #4]
	//Definicion de variable
	BaseType_t notify_status = {0};
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
	uint32_t data;
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 8003f94:	f107 0308 	add.w	r3, r7, #8
 8003f98:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9c:	9200      	str	r2, [sp, #0]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	f004 f802 	bl	8007fac <xTaskGenericNotifyWait>
 8003fa8:	6138      	str	r0, [r7, #16]
		xReceivedStructure = (command_t*)  data;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	60fb      	str	r3, [r7, #12]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d1ef      	bne.n	8003f94 <vTask_Turn+0xc>
		{
			//Cambio de signo si e giro es hacia la derecha
			if(xReceivedStructure->secondparameter==1){ degrees = -1*xReceivedStructure->firtparameter;}
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d106      	bne.n	8003fca <vTask_Turn+0x42>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	425b      	negs	r3, r3
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	82fb      	strh	r3, [r7, #22]
 8003fc8:	e002      	b.n	8003fd0 <vTask_Turn+0x48>
			else{degrees = xReceivedStructure->firtparameter;}
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	82fb      	strh	r3, [r7, #22]
			//Configuracion inicial del giro
			turn_itself(degrees);
 8003fd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 f9d5 	bl	8005384 <turn_itself>
			//Cambio de state
			next_state = sExecution;
 8003fda:	4b02      	ldr	r3, [pc, #8]	; (8003fe4 <vTask_Turn+0x5c>)
 8003fdc:	2202      	movs	r2, #2
 8003fde:	701a      	strb	r2, [r3, #0]
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 8003fe0:	e7d8      	b.n	8003f94 <vTask_Turn+0xc>
 8003fe2:	bf00      	nop
 8003fe4:	20000024 	.word	0x20000024

08003fe8 <vTask_Square>:
		}
	}
}
//--------Tarea de Square------------
void vTask_Square(void *pvParameters)
{
 8003fe8:	b5b0      	push	{r4, r5, r7, lr}
 8003fea:	f5ad 7d78 	sub.w	sp, sp, #992	; 0x3e0
 8003fee:	af02      	add	r7, sp, #8
 8003ff0:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8003ff4:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8003ff8:	6018      	str	r0, [r3, #0]
	//Definicion de variable
	BaseType_t notify_status = {0};
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
	uint32_t data;
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	f04f 32ff 	mov.w	r2, #4294967295
 8004008:	9200      	str	r2, [sp, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	2100      	movs	r1, #0
 800400e:	2000      	movs	r0, #0
 8004010:	f003 ffcc 	bl	8007fac <xTaskGenericNotifyWait>
 8004014:	f8c7 03d4 	str.w	r0, [r7, #980]	; 0x3d4
		xReceivedStructure = (command_t*)  data;
 8004018:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800401c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8004026:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800402a:	2b01      	cmp	r3, #1
 800402c:	d1e8      	bne.n	8004000 <vTask_Square+0x18>
		{
			//Restablecimiento de coordenadas
			init_coordinates();
 800402e:	f001 fa13 	bl	8005458 <init_coordinates>
			//Configuracion de operaciones
			set_operation_square(list_operation, xReceivedStructure->firtparameter, xReceivedStructure->secondparameter);
 8004032:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4618      	mov	r0, r3
 800403a:	f7fc fa8b 	bl	8000554 <__aeabi_i2d>
 800403e:	4604      	mov	r4, r0
 8004040:	460d      	mov	r5, r1
 8004042:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	4618      	mov	r0, r3
 800404a:	f7fc fa83 	bl	8000554 <__aeabi_i2d>
 800404e:	f107 0310 	add.w	r3, r7, #16
 8004052:	ec41 0b11 	vmov	d1, r0, r1
 8004056:	ec45 4b10 	vmov	d0, r4, r5
 800405a:	4618      	mov	r0, r3
 800405c:	f000 feb0 	bl	8004dc0 <set_operation_square>
			//Definir operaciones en la cola de operaciones
			set_operation_in_queue(list_operation);
 8004060:	f107 0310 	add.w	r3, r7, #16
 8004064:	4618      	mov	r0, r3
 8004066:	f001 f853 	bl	8005110 <set_operation_in_queue>
			//Cambio de state
			next_state = sExecution;
 800406a:	4b02      	ldr	r3, [pc, #8]	; (8004074 <vTask_Square+0x8c>)
 800406c:	2202      	movs	r2, #2
 800406e:	701a      	strb	r2, [r3, #0]
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 8004070:	e7c6      	b.n	8004000 <vTask_Square+0x18>
 8004072:	bf00      	nop
 8004074:	20000024 	.word	0x20000024

08004078 <vTask_Execute_AStar>:
		}
	}
}
//------------Tarea execute Astar--------------
void vTask_Execute_AStar(void * pvParameters)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	f5ad 7d78 	sub.w	sp, sp, #992	; 0x3e0
 800407e:	af02      	add	r7, sp, #8
 8004080:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8004084:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8004088:	6018      	str	r0, [r3, #0]
	//Definicion de variable de notificacion
	BaseType_t notify_status = {0};
 800408a:	2300      	movs	r3, #0
 800408c:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
	uint8_t status = PATHFALSE;
 8004090:	2300      	movs	r3, #0
 8004092:	f887 33d3 	strb.w	r3, [r7, #979]	; 0x3d3
	const char *msg_Fail_Execute_Path = "El path generado por AStar no se a establecido \n";
 8004096:	4b27      	ldr	r3, [pc, #156]	; (8004134 <vTask_Execute_AStar+0xbc>)
 8004098:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
	Parameters_Operation_t list_operation[30];
	//Se envia al buzon un valor falso
	xQueueOverwrite(xMailbox_Path, &status);
 800409c:	4b26      	ldr	r3, [pc, #152]	; (8004138 <vTask_Execute_AStar+0xc0>)
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	f207 31d3 	addw	r1, r7, #979	; 0x3d3
 80040a4:	2302      	movs	r3, #2
 80040a6:	2200      	movs	r2, #0
 80040a8:	f002 fa54 	bl	8006554 <xQueueGenericSend>
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80040ac:	f04f 33ff 	mov.w	r3, #4294967295
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	2300      	movs	r3, #0
 80040b4:	2200      	movs	r2, #0
 80040b6:	2100      	movs	r1, #0
 80040b8:	2000      	movs	r0, #0
 80040ba:	f003 ff77 	bl	8007fac <xTaskGenericNotifyWait>
 80040be:	f8c7 03d4 	str.w	r0, [r7, #980]	; 0x3d4
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 80040c2:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d1f0      	bne.n	80040ac <vTask_Execute_AStar+0x34>
		{
			//Se verifica se verifica el estado del path
			xQueuePeek(xMailbox_Path, &status, 0);
 80040ca:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <vTask_Execute_AStar+0xc0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f207 31d3 	addw	r1, r7, #979	; 0x3d3
 80040d2:	2200      	movs	r2, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f002 fca1 	bl	8006a1c <xQueuePeek>
			if(status == PATHTRUE)
 80040da:	f897 33d3 	ldrb.w	r3, [r7, #979]	; 0x3d3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d112      	bne.n	8004108 <vTask_Execute_AStar+0x90>
			{
				//Restablecimiento de coordenadas
				init_coordinates();
 80040e2:	f001 f9b9 	bl	8005458 <init_coordinates>
				//Configuracion de operaciones
				set_operation_AStar(list_operation, file_path, &parameter_Posicion_Robot, &parameter_Path_Robot);
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <vTask_Execute_AStar+0xc4>)
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	f107 0008 	add.w	r0, r7, #8
 80040ee:	4b14      	ldr	r3, [pc, #80]	; (8004140 <vTask_Execute_AStar+0xc8>)
 80040f0:	4a14      	ldr	r2, [pc, #80]	; (8004144 <vTask_Execute_AStar+0xcc>)
 80040f2:	f000 ff29 	bl	8004f48 <set_operation_AStar>
				//Definir operaciones en la cola de operaciones
				set_operation_in_queue(list_operation);
 80040f6:	f107 0308 	add.w	r3, r7, #8
 80040fa:	4618      	mov	r0, r3
 80040fc:	f001 f808 	bl	8005110 <set_operation_in_queue>
				//Cambio de state
				next_state = sExecution;
 8004100:	4b11      	ldr	r3, [pc, #68]	; (8004148 <vTask_Execute_AStar+0xd0>)
 8004102:	2202      	movs	r2, #2
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e7d1      	b.n	80040ac <vTask_Execute_AStar+0x34>
			}
			else
			{
				  //Se envia la opcion especificada
				  xQueueSend(xQueue_Print, &msg_Fail_Execute_Path, portMAX_DELAY);
 8004108:	4b10      	ldr	r3, [pc, #64]	; (800414c <vTask_Execute_AStar+0xd4>)
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	f507 7173 	add.w	r1, r7, #972	; 0x3cc
 8004110:	2300      	movs	r3, #0
 8004112:	f04f 32ff 	mov.w	r2, #4294967295
 8004116:	f002 fa1d 	bl	8006554 <xQueueGenericSend>
				  //Entregamos el procesador a la Tarea Print
				  taskYIELD();
 800411a:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <vTask_Execute_AStar+0xd8>)
 800411c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	f3bf 8f6f 	isb	sy
				  //cambio de status
				  next_state = sMenuOperation;
 800412a:	4b07      	ldr	r3, [pc, #28]	; (8004148 <vTask_Execute_AStar+0xd0>)
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004130:	e7bc      	b.n	80040ac <vTask_Execute_AStar+0x34>
 8004132:	bf00      	nop
 8004134:	0801419c 	.word	0x0801419c
 8004138:	2000043c 	.word	0x2000043c
 800413c:	20008de0 	.word	0x20008de0
 8004140:	20008de8 	.word	0x20008de8
 8004144:	20008e68 	.word	0x20008e68
 8004148:	20000024 	.word	0x20000024
 800414c:	20000428 	.word	0x20000428
 8004150:	e000ed04 	.word	0xe000ed04

08004154 <vTask_Separate_GripMap>:


//--------------Tareas de aplicacion de AStar---------------
//------Tarea de separacion del grip map------------
void vTask_Separate_GripMap(void *pvParameters)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800415a:	af02      	add	r7, sp, #8
 800415c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004160:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8004164:	6018      	str	r0, [r3, #0]
	//Definicion de variable
	BaseType_t notify_status = {0};
 8004166:	2300      	movs	r3, #0
 8004168:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	uint8_t status_separate;
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 800416c:	f107 030c 	add.w	r3, r7, #12
 8004170:	f04f 32ff 	mov.w	r2, #4294967295
 8004174:	9200      	str	r2, [sp, #0]
 8004176:	2200      	movs	r2, #0
 8004178:	2100      	movs	r1, #0
 800417a:	2000      	movs	r0, #0
 800417c:	f003 ff16 	bl	8007fac <xTaskGenericNotifyWait>
 8004180:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8004184:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004188:	2b01      	cmp	r3, #1
 800418a:	d1ef      	bne.n	800416c <vTask_Separate_GripMap+0x18>
		{
			//Se realiza un casting
			xReceivedString = (char*)  data;
 800418c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004190:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
			//Se realiza una copia del string
		    memcpy(parameterStringGM, xReceivedString, 500 * sizeof(char));
 800419a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800419e:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 80041a2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80041a6:	4610      	mov	r0, r2
 80041a8:	4619      	mov	r1, r3
 80041aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80041ae:	461a      	mov	r2, r3
 80041b0:	f008 f91e 	bl	800c3f0 <memcpy>
			//-------------Separar el String en los parametros del grid map-------------
		    status_separate = Separate_parameters(&xitemAStar, parameterStringGM);
 80041b4:	f107 0310 	add.w	r3, r7, #16
 80041b8:	4619      	mov	r1, r3
 80041ba:	4814      	ldr	r0, [pc, #80]	; (800420c <vTask_Separate_GripMap+0xb8>)
 80041bc:	f001 fb1c 	bl	80057f8 <Separate_parameters>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		    //Se verifica el estado de la separacion
		    if(status_separate)
 80041c6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <vTask_Separate_GripMap+0x8e>
		    {
				//Notificamos la tarea respectiva
				xTaskNotify(xHandleTask_Apply_Astar, 0, eNoAction);
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <vTask_Separate_GripMap+0xbc>)
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	2300      	movs	r3, #0
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	2300      	movs	r3, #0
 80041d8:	2200      	movs	r2, #0
 80041da:	2100      	movs	r1, #0
 80041dc:	f003 ff66 	bl	80080ac <xTaskGenericNotify>
 80041e0:	e7c4      	b.n	800416c <vTask_Separate_GripMap+0x18>
		    }
		    else
		    {
				//cambio de status
				next_state = sMenuOperation;
 80041e2:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <vTask_Separate_GripMap+0xc0>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_fail, portMAX_DELAY);
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <vTask_Separate_GripMap+0xc4>)
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	2300      	movs	r3, #0
 80041ee:	f04f 32ff 	mov.w	r2, #4294967295
 80041f2:	490a      	ldr	r1, [pc, #40]	; (800421c <vTask_Separate_GripMap+0xc8>)
 80041f4:	f002 f9ae 	bl	8006554 <xQueueGenericSend>
				//Entregamos el procesador a la Tarea Print
				taskYIELD();
 80041f8:	4b09      	ldr	r3, [pc, #36]	; (8004220 <vTask_Separate_GripMap+0xcc>)
 80041fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	f3bf 8f6f 	isb	sy
		notify_status = xTaskNotifyWait(0,0,&data,portMAX_DELAY);
 8004208:	e7b0      	b.n	800416c <vTask_Separate_GripMap+0x18>
 800420a:	bf00      	nop
 800420c:	20000448 	.word	0x20000448
 8004210:	2000041c 	.word	0x2000041c
 8004214:	20000024 	.word	0x20000024
 8004218:	20000428 	.word	0x20000428
 800421c:	20000034 	.word	0x20000034
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <vTask_Apply_Astar>:
		}
	}
}
//------Tarea de Aplicacion de A Star------------
void vTask_Apply_Astar(void * pvParameters)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	f5ad 5d55 	sub.w	sp, sp, #13632	; 0x3540
 800422a:	af02      	add	r7, sp, #8
 800422c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8004230:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 8004234:	6018      	str	r0, [r3, #0]
	//Definicion de variable
	BaseType_t notify_status = {0};
 8004236:	2300      	movs	r3, #0
 8004238:	f507 5254 	add.w	r2, r7, #13568	; 0x3500
 800423c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8004240:	6013      	str	r3, [r2, #0]
	file_cell_t file_Open[50];
	uint8_t index_file = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	f507 5254 	add.w	r2, r7, #13568	; 0x3500
 8004248:	f102 0233 	add.w	r2, r2, #51	; 0x33
 800424c:	7013      	strb	r3, [r2, #0]
	uint8_t status = PATHFALSE;
 800424e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8004252:	f2a3 5329 	subw	r3, r3, #1321	; 0x529
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]
	const char *msg_Finish_AStar = "Calculo de A Star Finalizado \n";
 800425a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800425e:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 8004262:	4a4b      	ldr	r2, [pc, #300]	; (8004390 <vTask_Apply_Astar+0x16c>)
 8004264:	601a      	str	r2, [r3, #0]
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004266:	f04f 33ff 	mov.w	r3, #4294967295
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	2300      	movs	r3, #0
 800426e:	2200      	movs	r2, #0
 8004270:	2100      	movs	r1, #0
 8004272:	2000      	movs	r0, #0
 8004274:	f003 fe9a 	bl	8007fac <xTaskGenericNotifyWait>
 8004278:	f507 5354 	add.w	r3, r7, #13568	; 0x3500
 800427c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8004280:	6018      	str	r0, [r3, #0]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8004282:	f507 5354 	add.w	r3, r7, #13568	; 0x3500
 8004286:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d1ea      	bne.n	8004266 <vTask_Apply_Astar+0x42>
		{
		  //----------------------------------Inicio A Star----------------------------------
		  //---------Creacion de la malla con cada una de sus celdas-----------
		  build_grid_map(xitemAStar.grid_map, xitemAStar.grid_map_row,
 8004290:	4b40      	ldr	r3, [pc, #256]	; (8004394 <vTask_Apply_Astar+0x170>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	4a3f      	ldr	r2, [pc, #252]	; (8004394 <vTask_Apply_Astar+0x170>)
 8004296:	7852      	ldrb	r2, [r2, #1]
 8004298:	493e      	ldr	r1, [pc, #248]	; (8004394 <vTask_Apply_Astar+0x170>)
 800429a:	edd1 7a01 	vldr	s15, [r1, #4]
 800429e:	eeb0 0a67 	vmov.f32	s0, s15
 80042a2:	4619      	mov	r1, r3
 80042a4:	483c      	ldr	r0, [pc, #240]	; (8004398 <vTask_Apply_Astar+0x174>)
 80042a6:	f7fe fc81 	bl	8002bac <build_grid_map>
				  xitemAStar.grid_map_colum, xitemAStar.cell_separation);
		  //-------Calculo de la heuristica de la celda de acuerdo a la posicion objetivo-------
		  heuristic_cell_map(xitemAStar.grid_map, xitemAStar.grid_map_row,
 80042aa:	4b3a      	ldr	r3, [pc, #232]	; (8004394 <vTask_Apply_Astar+0x170>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	4a39      	ldr	r2, [pc, #228]	; (8004394 <vTask_Apply_Astar+0x170>)
 80042b0:	7852      	ldrb	r2, [r2, #1]
 80042b2:	4938      	ldr	r1, [pc, #224]	; (8004394 <vTask_Apply_Astar+0x170>)
 80042b4:	edd1 7a04 	vldr	s15, [r1, #16]
 80042b8:	4936      	ldr	r1, [pc, #216]	; (8004394 <vTask_Apply_Astar+0x170>)
 80042ba:	ed91 7a05 	vldr	s14, [r1, #20]
 80042be:	eef0 0a47 	vmov.f32	s1, s14
 80042c2:	eeb0 0a67 	vmov.f32	s0, s15
 80042c6:	4619      	mov	r1, r3
 80042c8:	4833      	ldr	r0, [pc, #204]	; (8004398 <vTask_Apply_Astar+0x174>)
 80042ca:	f7fd fadb 	bl	8001884 <heuristic_cell_map>
				  xitemAStar.grid_map_colum, xitemAStar.goal_x, xitemAStar.goal_y);
		  //------------------Aplicacion del algoritmo A star------------------
		  index_file = aplicattion_A_Star(file_Open, xitemAStar.grid_map, xitemAStar.grid_map_row, xitemAStar.grid_map_colum,
 80042ce:	4b31      	ldr	r3, [pc, #196]	; (8004394 <vTask_Apply_Astar+0x170>)
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	4b30      	ldr	r3, [pc, #192]	; (8004394 <vTask_Apply_Astar+0x170>)
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	492f      	ldr	r1, [pc, #188]	; (8004394 <vTask_Apply_Astar+0x170>)
 80042d8:	edd1 7a02 	vldr	s15, [r1, #8]
 80042dc:	492d      	ldr	r1, [pc, #180]	; (8004394 <vTask_Apply_Astar+0x170>)
 80042de:	ed91 7a03 	vldr	s14, [r1, #12]
 80042e2:	492c      	ldr	r1, [pc, #176]	; (8004394 <vTask_Apply_Astar+0x170>)
 80042e4:	edd1 6a04 	vldr	s13, [r1, #16]
 80042e8:	492a      	ldr	r1, [pc, #168]	; (8004394 <vTask_Apply_Astar+0x170>)
 80042ea:	ed91 6a05 	vldr	s12, [r1, #20]
 80042ee:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80042f2:	3828      	subs	r0, #40	; 0x28
 80042f4:	eef0 1a46 	vmov.f32	s3, s12
 80042f8:	eeb0 1a66 	vmov.f32	s2, s13
 80042fc:	eef0 0a47 	vmov.f32	s1, s14
 8004300:	eeb0 0a67 	vmov.f32	s0, s15
 8004304:	4924      	ldr	r1, [pc, #144]	; (8004398 <vTask_Apply_Astar+0x174>)
 8004306:	f7fc ffd5 	bl	80012b4 <aplicattion_A_Star>
 800430a:	4603      	mov	r3, r0
 800430c:	f507 5254 	add.w	r2, r7, #13568	; 0x3500
 8004310:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8004314:	7013      	strb	r3, [r2, #0]
				  xitemAStar.start_x, xitemAStar.start_y, xitemAStar.goal_x, xitemAStar.goal_y);
		  file_path = &file_Open[index_file];
 8004316:	f507 5354 	add.w	r3, r7, #13568	; 0x3500
 800431a:	f103 0333 	add.w	r3, r3, #51	; 0x33
 800431e:	7819      	ldrb	r1, [r3, #0]
 8004320:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004324:	3a28      	subs	r2, #40	; 0x28
 8004326:	460b      	mov	r3, r1
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	440b      	add	r3, r1
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	4413      	add	r3, r2
 8004330:	4a1a      	ldr	r2, [pc, #104]	; (800439c <vTask_Apply_Astar+0x178>)
 8004332:	6013      	str	r3, [r2, #0]
		  //-----------------Impresion de la ruta encontrada--------------------
		  send_path(file_path, xitemAStar.grid_map, xitemAStar.grid_map_row, xitemAStar.grid_map_colum);
 8004334:	4b19      	ldr	r3, [pc, #100]	; (800439c <vTask_Apply_Astar+0x178>)
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	4b16      	ldr	r3, [pc, #88]	; (8004394 <vTask_Apply_Astar+0x170>)
 800433a:	781a      	ldrb	r2, [r3, #0]
 800433c:	4b15      	ldr	r3, [pc, #84]	; (8004394 <vTask_Apply_Astar+0x170>)
 800433e:	785b      	ldrb	r3, [r3, #1]
 8004340:	4915      	ldr	r1, [pc, #84]	; (8004398 <vTask_Apply_Astar+0x174>)
 8004342:	f001 fbcb 	bl	8005adc <send_path>
		  //----------------------------------Fin A Star----------------------------------
		  //Envio como disponible el path MailBox
		  status = PATHTRUE;
 8004346:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800434a:	f2a3 5329 	subw	r3, r3, #1321	; 0x529
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
		  xQueueOverwrite(xMailbox_Path, &status);
 8004352:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <vTask_Apply_Astar+0x17c>)
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800435a:	3929      	subs	r1, #41	; 0x29
 800435c:	2302      	movs	r3, #2
 800435e:	2200      	movs	r2, #0
 8004360:	f002 f8f8 	bl	8006554 <xQueueGenericSend>
		  //Se envia la opcion especificada
		  xQueueSend(xQueue_Print, &msg_Finish_AStar, portMAX_DELAY);
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <vTask_Apply_Astar+0x180>)
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800436c:	3930      	subs	r1, #48	; 0x30
 800436e:	2300      	movs	r3, #0
 8004370:	f04f 32ff 	mov.w	r2, #4294967295
 8004374:	f002 f8ee 	bl	8006554 <xQueueGenericSend>
		  //Entregamos el procesador a la Tarea Print
		  taskYIELD();
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <vTask_Apply_Astar+0x184>)
 800437a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	f3bf 8f6f 	isb	sy
		  //cambio de status
		  next_state = sMenuOperation;
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <vTask_Apply_Astar+0x188>)
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800438e:	e76a      	b.n	8004266 <vTask_Apply_Astar+0x42>
 8004390:	080141d0 	.word	0x080141d0
 8004394:	20000448 	.word	0x20000448
 8004398:	20000460 	.word	0x20000460
 800439c:	20008de0 	.word	0x20008de0
 80043a0:	2000043c 	.word	0x2000043c
 80043a4:	20000428 	.word	0x20000428
 80043a8:	e000ed04 	.word	0xe000ed04
 80043ac:	20000024 	.word	0x20000024

080043b0 <vTask_Stop>:


//--------------Tareas de parada de operacion---------------
//------------Tarea de Stop---------------
void vTask_Stop(void * pvParameters)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08c      	sub	sp, #48	; 0x30
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	6078      	str	r0, [r7, #4]
	//Variables para la recepcion
	command_t xReceivedStructure;
	BaseType_t notify_status;
	const EventBits_t xBitsToWaitFor = (ENABLE_OPERATION_BIT | EXECUTE_OPERATION_BIT);
 80043b8:	2303      	movs	r3, #3
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t mode = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	72fb      	strb	r3, [r7, #11]
	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la recepcion de un comando
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	2300      	movs	r3, #0
 80043c8:	2200      	movs	r2, #0
 80043ca:	2100      	movs	r1, #0
 80043cc:	2000      	movs	r0, #0
 80043ce:	f003 fded 	bl	8007fac <xTaskGenericNotifyWait>
		//Se verificamos recibe el comando
		notify_status = xQueueReceive(xQueue_StructCommand, &xReceivedStructure, 0 );
 80043d2:	4b23      	ldr	r3, [pc, #140]	; (8004460 <vTask_Stop+0xb0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f107 010c 	add.w	r1, r7, #12
 80043da:	2200      	movs	r2, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f002 fa49 	bl	8006874 <xQueueReceive>
 80043e2:	6238      	str	r0, [r7, #32]
		//Se verificamos el tipo de comando
		if(notify_status == pdTRUE)
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d1ea      	bne.n	80043c0 <vTask_Stop+0x10>
		{
			if(strcmp(xReceivedStructure.send_cmd, "stop") == 0)
 80043ea:	f107 030c 	add.w	r3, r7, #12
 80043ee:	491d      	ldr	r1, [pc, #116]	; (8004464 <vTask_Stop+0xb4>)
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fb fef5 	bl	80001e0 <strcmp>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d12d      	bne.n	8004458 <vTask_Stop+0xa8>
			{
				//verificamos el modo
				xQueuePeek(xMailbox_Mode, &mode, 0);
 80043fc:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <vTask_Stop+0xb8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f107 010b 	add.w	r1, r7, #11
 8004404:	2200      	movs	r2, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f002 fb08 	bl	8006a1c <xQueuePeek>
				//Se lee el grupo de eventos para limpiar posibles eventos si fuera necesario
			    xEventGroupClearBits(xEventGroup_Execute_Operation, xBitsToWaitFor);
 800440c:	4b17      	ldr	r3, [pc, #92]	; (800446c <vTask_Stop+0xbc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004412:	4618      	mov	r0, r3
 8004414:	f001 fe28 	bl	8006068 <xEventGroupClearBits>
				//Paramos los motores
				status_motor(RESET);
 8004418:	2000      	movs	r0, #0
 800441a:	f001 f89f 	bl	800555c <status_motor>
				//Si se esta en el modo 2 se cambia la direccion de giro
				if(mode==2){ updateDirMotor(handler_Motor_Execute); }
 800441e:	7afb      	ldrb	r3, [r7, #11]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d104      	bne.n	800442e <vTask_Stop+0x7e>
 8004424:	4b12      	ldr	r3, [pc, #72]	; (8004470 <vTask_Stop+0xc0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f7fd ff86 	bl	800233a <updateDirMotor>
				//Se envia la opcion especificada
				xQueueSend(xQueue_Print, &msg_stop, portMAX_DELAY);
 800442e:	4b11      	ldr	r3, [pc, #68]	; (8004474 <vTask_Stop+0xc4>)
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	2300      	movs	r3, #0
 8004434:	f04f 32ff 	mov.w	r2, #4294967295
 8004438:	490f      	ldr	r1, [pc, #60]	; (8004478 <vTask_Stop+0xc8>)
 800443a:	f002 f88b 	bl	8006554 <xQueueGenericSend>
				//cambio de status
				next_state = sMenuOperation;
 800443e:	4b0f      	ldr	r3, [pc, #60]	; (800447c <vTask_Stop+0xcc>)
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]
				//Notificamos Tarea de menu para imprimir mensaje de operaciones
				xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8004444:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <vTask_Stop+0xd0>)
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	2300      	movs	r3, #0
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2300      	movs	r3, #0
 800444e:	2200      	movs	r2, #0
 8004450:	2100      	movs	r1, #0
 8004452:	f003 fe2b 	bl	80080ac <xTaskGenericNotify>
 8004456:	e7b3      	b.n	80043c0 <vTask_Stop+0x10>
			}
			else
			{
				//cambio de status
				next_state = sExecution;
 8004458:	4b08      	ldr	r3, [pc, #32]	; (800447c <vTask_Stop+0xcc>)
 800445a:	2202      	movs	r2, #2
 800445c:	701a      	strb	r2, [r3, #0]
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800445e:	e7af      	b.n	80043c0 <vTask_Stop+0x10>
 8004460:	2000042c 	.word	0x2000042c
 8004464:	080141f0 	.word	0x080141f0
 8004468:	20000438 	.word	0x20000438
 800446c:	20000440 	.word	0x20000440
 8004470:	20008de4 	.word	0x20008de4
 8004474:	20000428 	.word	0x20000428
 8004478:	2000002c 	.word	0x2000002c
 800447c:	20000024 	.word	0x20000024
 8004480:	200003f0 	.word	0x200003f0

08004484 <vTask_Stop_Execute>:
		}
	}
}
//------------Tarea de parada en ejecucccion---------------
void vTask_Stop_Execute(void * pvParameters)
{
 8004484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004488:	b08a      	sub	sp, #40	; 0x28
 800448a:	af02      	add	r7, sp, #8
 800448c:	6078      	str	r0, [r7, #4]
	//Definicion de variable
	BaseType_t notify_status = {0};
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
	uint8_t mode = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	74fb      	strb	r3, [r7, #19]
	uint32_t ulNotificationValue;
	const EventBits_t xBitsToWaitFor = (ENABLE_OPERATION_BIT | EXECUTE_OPERATION_BIT);
 8004496:	2303      	movs	r3, #3
 8004498:	61bb      	str	r3, [r7, #24]

	//Ciclo de la tarea
	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,&ulNotificationValue,portMAX_DELAY);
 800449a:	f107 030c 	add.w	r3, r7, #12
 800449e:	f04f 32ff 	mov.w	r2, #4294967295
 80044a2:	9200      	str	r2, [sp, #0]
 80044a4:	2200      	movs	r2, #0
 80044a6:	2100      	movs	r1, #0
 80044a8:	2000      	movs	r0, #0
 80044aa:	f003 fd7f 	bl	8007fac <xTaskGenericNotifyWait>
 80044ae:	61f8      	str	r0, [r7, #28]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d1f1      	bne.n	800449a <vTask_Stop_Execute+0x16>
		{
			//verificamos el modo
			xQueuePeek(xMailbox_Mode, &mode, 0);
 80044b6:	4b65      	ldr	r3, [pc, #404]	; (800464c <vTask_Stop_Execute+0x1c8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f107 0113 	add.w	r1, r7, #19
 80044be:	2200      	movs	r2, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f002 faab 	bl	8006a1c <xQueuePeek>
			//Verificamos las condiciones de parada
			if(mode==1)
 80044c6:	7cfb      	ldrb	r3, [r7, #19]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d153      	bne.n	8004574 <vTask_Stop_Execute+0xf0>
			{
				if(distance_traveled(&parameter_Path_Robot, parameter_Posicion_Robot.xg_position, parameter_Posicion_Robot.yg_position)>parameter_Path_Robot.line_Distance){
 80044cc:	4b60      	ldr	r3, [pc, #384]	; (8004650 <vTask_Stop_Execute+0x1cc>)
 80044ce:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80044d2:	4b5f      	ldr	r3, [pc, #380]	; (8004650 <vTask_Stop_Execute+0x1cc>)
 80044d4:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80044d8:	eeb0 1a46 	vmov.f32	s2, s12
 80044dc:	eef0 1a66 	vmov.f32	s3, s13
 80044e0:	eeb0 0a47 	vmov.f32	s0, s14
 80044e4:	eef0 0a67 	vmov.f32	s1, s15
 80044e8:	485a      	ldr	r0, [pc, #360]	; (8004654 <vTask_Stop_Execute+0x1d0>)
 80044ea:	f7fe fa09 	bl	8002900 <distance_traveled>
 80044ee:	ec5b ab10 	vmov	sl, fp, d0
 80044f2:	4b58      	ldr	r3, [pc, #352]	; (8004654 <vTask_Stop_Execute+0x1d0>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fc f82c 	bl	8000554 <__aeabi_i2d>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4650      	mov	r0, sl
 8004502:	4659      	mov	r1, fp
 8004504:	f7fc fb20 	bl	8000b48 <__aeabi_dcmpgt>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 809c 	beq.w	8004648 <vTask_Stop_Execute+0x1c4>
					//desactivamos los motores
					status_motor(RESET);
 8004510:	2000      	movs	r0, #0
 8004512:	f001 f823 	bl	800555c <status_motor>
					//Guardamos la posicion final
					parameter_Posicion_Robot.xg_position_inicial = parameter_Posicion_Robot.xg_position;
 8004516:	4b4e      	ldr	r3, [pc, #312]	; (8004650 <vTask_Stop_Execute+0x1cc>)
 8004518:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800451c:	494c      	ldr	r1, [pc, #304]	; (8004650 <vTask_Stop_Execute+0x1cc>)
 800451e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
					parameter_Posicion_Robot.yg_position_inicial = parameter_Posicion_Robot.yg_position;
 8004522:	4b4b      	ldr	r3, [pc, #300]	; (8004650 <vTask_Stop_Execute+0x1cc>)
 8004524:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004528:	4949      	ldr	r1, [pc, #292]	; (8004650 <vTask_Stop_Execute+0x1cc>)
 800452a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
					//Vericamos si el bit de las operaciones esta activo
					xReturnBists = xEventGroupWaitBits(xEventGroup_Execute_Operation, xBitsToWaitFor, pdFALSE, pdTRUE, 0);
 800452e:	4b4a      	ldr	r3, [pc, #296]	; (8004658 <vTask_Stop_Execute+0x1d4>)
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	2300      	movs	r3, #0
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	2301      	movs	r3, #1
 8004538:	2200      	movs	r2, #0
 800453a:	69b9      	ldr	r1, [r7, #24]
 800453c:	f001 fcc6 	bl	8005ecc <xEventGroupWaitBits>
 8004540:	6178      	str	r0, [r7, #20]
					//Deacuerdo al valor retornado se ejecuta una accion
					if(xReturnBists & ENABLE_OPERATION_BIT) { xEventGroupSetBits(xEventGroup_Execute_Operation, EXECUTE_OPERATION_BIT);}
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d006      	beq.n	800455a <vTask_Stop_Execute+0xd6>
 800454c:	4b42      	ldr	r3, [pc, #264]	; (8004658 <vTask_Stop_Execute+0x1d4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2102      	movs	r1, #2
 8004552:	4618      	mov	r0, r3
 8004554:	f001 fdc0 	bl	80060d8 <xEventGroupSetBits>
 8004558:	e79f      	b.n	800449a <vTask_Stop_Execute+0x16>
					else
					{
						//cambio de status
						next_state = sMenuOperation;
 800455a:	4b40      	ldr	r3, [pc, #256]	; (800465c <vTask_Stop_Execute+0x1d8>)
 800455c:	2201      	movs	r2, #1
 800455e:	701a      	strb	r2, [r3, #0]
						//Notificamos Tarea de menu para imprimir mensaje de operaciones
						xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8004560:	4b3f      	ldr	r3, [pc, #252]	; (8004660 <vTask_Stop_Execute+0x1dc>)
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	2300      	movs	r3, #0
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	2300      	movs	r3, #0
 800456a:	2200      	movs	r2, #0
 800456c:	2100      	movs	r1, #0
 800456e:	f003 fd9d 	bl	80080ac <xTaskGenericNotify>
 8004572:	e792      	b.n	800449a <vTask_Stop_Execute+0x16>
					}
				}
			}
			else if(mode==2)
 8004574:	7cfb      	ldrb	r3, [r7, #19]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d165      	bne.n	8004646 <vTask_Stop_Execute+0x1c2>
			{
				if((fabs(parameter_Posicion_Robot.grad_relativo)*correct_ang_Gyro_Drift) > (fabs(parameter_Path_Robot.rotative_Grad_Relative))){
 800457a:	4b35      	ldr	r3, [pc, #212]	; (8004650 <vTask_Stop_Execute+0x1cc>)
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	4614      	mov	r4, r2
 8004582:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004586:	4b37      	ldr	r3, [pc, #220]	; (8004664 <vTask_Stop_Execute+0x1e0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fb fff4 	bl	8000578 <__aeabi_f2d>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4620      	mov	r0, r4
 8004596:	4629      	mov	r1, r5
 8004598:	f7fc f846 	bl	8000628 <__aeabi_dmul>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4692      	mov	sl, r2
 80045a2:	469b      	mov	fp, r3
 80045a4:	4b2b      	ldr	r3, [pc, #172]	; (8004654 <vTask_Stop_Execute+0x1d0>)
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fb ffd3 	bl	8000554 <__aeabi_i2d>
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	4690      	mov	r8, r2
 80045b4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80045b8:	4642      	mov	r2, r8
 80045ba:	464b      	mov	r3, r9
 80045bc:	4650      	mov	r0, sl
 80045be:	4659      	mov	r1, fp
 80045c0:	f7fc fac2 	bl	8000b48 <__aeabi_dcmpgt>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d03e      	beq.n	8004648 <vTask_Stop_Execute+0x1c4>
					//Paramos los motores
					status_motor(RESET);
 80045ca:	2000      	movs	r0, #0
 80045cc:	f000 ffc6 	bl	800555c <status_motor>
					updateDirMotor(handler_Motor_Execute);
 80045d0:	4b25      	ldr	r3, [pc, #148]	; (8004668 <vTask_Stop_Execute+0x1e4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fd feb0 	bl	800233a <updateDirMotor>
					//Correccion angulo;
					parameter_Posicion_Robot.grad_relativo = parameter_Posicion_Robot.grad_relativo*correct_ang_Gyro_Drift;
 80045da:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <vTask_Stop_Execute+0x1cc>)
 80045dc:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80045e0:	4b20      	ldr	r3, [pc, #128]	; (8004664 <vTask_Stop_Execute+0x1e0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fb ffc7 	bl	8000578 <__aeabi_f2d>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4650      	mov	r0, sl
 80045f0:	4659      	mov	r1, fp
 80045f2:	f7fc f819 	bl	8000628 <__aeabi_dmul>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4915      	ldr	r1, [pc, #84]	; (8004650 <vTask_Stop_Execute+0x1cc>)
 80045fc:	e9c1 2300 	strd	r2, r3, [r1]
					//Vericamos si el bit de las operaciones esta activo
					xReturnBists = xEventGroupWaitBits(xEventGroup_Execute_Operation, xBitsToWaitFor, pdFALSE, pdTRUE, 0);
 8004600:	4b15      	ldr	r3, [pc, #84]	; (8004658 <vTask_Stop_Execute+0x1d4>)
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	2300      	movs	r3, #0
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	2301      	movs	r3, #1
 800460a:	2200      	movs	r2, #0
 800460c:	69b9      	ldr	r1, [r7, #24]
 800460e:	f001 fc5d 	bl	8005ecc <xEventGroupWaitBits>
 8004612:	6178      	str	r0, [r7, #20]
					//Deacuerdo al valor retornado se ejecuta una accion
					if(xReturnBists & ENABLE_OPERATION_BIT) { xEventGroupSetBits(xEventGroup_Execute_Operation, EXECUTE_OPERATION_BIT);}
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d006      	beq.n	800462c <vTask_Stop_Execute+0x1a8>
 800461e:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <vTask_Stop_Execute+0x1d4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2102      	movs	r1, #2
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fd57 	bl	80060d8 <xEventGroupSetBits>
 800462a:	e736      	b.n	800449a <vTask_Stop_Execute+0x16>
					else
					{
						//cambio de status
						next_state = sMenuOperation;
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <vTask_Stop_Execute+0x1d8>)
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]
						//Notificamos Tarea de menu para imprimir mensaje de operaciones
						xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <vTask_Stop_Execute+0x1dc>)
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	2300      	movs	r3, #0
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2300      	movs	r3, #0
 800463c:	2200      	movs	r2, #0
 800463e:	2100      	movs	r1, #0
 8004640:	f003 fd34 	bl	80080ac <xTaskGenericNotify>
 8004644:	e729      	b.n	800449a <vTask_Stop_Execute+0x16>
					}
				}
			}
			else{ __NOP(); }
 8004646:	bf00      	nop
		notify_status = xTaskNotifyWait(0,0,&ulNotificationValue,portMAX_DELAY);
 8004648:	e727      	b.n	800449a <vTask_Stop_Execute+0x16>
 800464a:	bf00      	nop
 800464c:	20000438 	.word	0x20000438
 8004650:	20008e68 	.word	0x20008e68
 8004654:	20008de8 	.word	0x20008de8
 8004658:	20000440 	.word	0x20000440
 800465c:	20000024 	.word	0x20000024
 8004660:	200003f0 	.word	0x200003f0
 8004664:	2000001c 	.word	0x2000001c
 8004668:	20008de4 	.word	0x20008de4
 800466c:	00000000 	.word	0x00000000

08004670 <vTask_Measure>:


//-----------Tareas correspondientes durante la ejecucion de operaciones--------
//------------Tarea de mediciones---------------
void vTask_Measure(void * pvParameters)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	ed2d 8b02 	vpush	{d8}
 8004676:	b087      	sub	sp, #28
 8004678:	af02      	add	r7, sp, #8
 800467a:	6078      	str	r0, [r7, #4]
	//Definicion de variable
	uint8_t mode = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	72fb      	strb	r3, [r7, #11]
	const TickType_t xDelaySamplingms = pdMS_TO_TICKS(period_sampling);
 8004680:	4b8b      	ldr	r3, [pc, #556]	; (80048b0 <vTask_Measure+0x240>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	4a89      	ldr	r2, [pc, #548]	; (80048b4 <vTask_Measure+0x244>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	099b      	lsrs	r3, r3, #6
 8004696:	60fb      	str	r3, [r7, #12]
	//Suspendemos la Tarea
	vTaskSuspend(xHandleTask_Measure);
 8004698:	4b87      	ldr	r3, [pc, #540]	; (80048b8 <vTask_Measure+0x248>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f002 fe41 	bl	8007324 <vTaskSuspend>
	//Ciclo de la tarea
	while(1)
	{
		//Se bloque la tarea por un tiempo definido
		vTaskDelay(xDelaySamplingms);
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f002 fe0a 	bl	80072bc <vTaskDelay>
		//Leemos el angulo
		parameter_Posicion_Robot.grad_relativo = getAngle(&handler_MPUAccel_MPU6050, period_sampling, parameter_Posicion_Robot.grad_relativo, READ_GYRO_Z, gyro_offset);
 80046a8:	4b81      	ldr	r3, [pc, #516]	; (80048b0 <vTask_Measure+0x240>)
 80046aa:	781c      	ldrb	r4, [r3, #0]
 80046ac:	4b83      	ldr	r3, [pc, #524]	; (80048bc <vTask_Measure+0x24c>)
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	4610      	mov	r0, r2
 80046b4:	4619      	mov	r1, r3
 80046b6:	f7fc faaf 	bl	8000c18 <__aeabi_d2f>
 80046ba:	4601      	mov	r1, r0
 80046bc:	4b80      	ldr	r3, [pc, #512]	; (80048c0 <vTask_Measure+0x250>)
 80046be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046c2:	2205      	movs	r2, #5
 80046c4:	ee00 1a10 	vmov	s0, r1
 80046c8:	4621      	mov	r1, r4
 80046ca:	487e      	ldr	r0, [pc, #504]	; (80048c4 <vTask_Measure+0x254>)
 80046cc:	f7fd fde8 	bl	80022a0 <getAngle>
 80046d0:	ee10 3a10 	vmov	r3, s0
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fb ff4f 	bl	8000578 <__aeabi_f2d>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4977      	ldr	r1, [pc, #476]	; (80048bc <vTask_Measure+0x24c>)
 80046e0:	e9c1 2300 	strd	r2, r3, [r1]
		//De acuerdo al modo se ejecuta una accion
		xQueuePeek(xMailbox_Mode, &mode, 0);
 80046e4:	4b78      	ldr	r3, [pc, #480]	; (80048c8 <vTask_Measure+0x258>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f107 010b 	add.w	r1, r7, #11
 80046ec:	2200      	movs	r2, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f002 f994 	bl	8006a1c <xQueuePeek>
		if(mode == 1 )
 80046f4:	7afb      	ldrb	r3, [r7, #11]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	f040 80c2 	bne.w	8004880 <vTask_Measure+0x210>
		{
			//Acumulamos los angulos
			sum_ang += parameter_Posicion_Robot.grad_relativo;
 80046fc:	4b73      	ldr	r3, [pc, #460]	; (80048cc <vTask_Measure+0x25c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f7fb ff39 	bl	8000578 <__aeabi_f2d>
 8004706:	4b6d      	ldr	r3, [pc, #436]	; (80048bc <vTask_Measure+0x24c>)
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f7fb fdd6 	bl	80002bc <__adddf3>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	f7fc fa7e 	bl	8000c18 <__aeabi_d2f>
 800471c:	4603      	mov	r3, r0
 800471e:	4a6b      	ldr	r2, [pc, #428]	; (80048cc <vTask_Measure+0x25c>)
 8004720:	6013      	str	r3, [r2, #0]
			//----------------Accion a realizar con un tiempo especifico--------------------
			if(counting_action>=timeAction_TIMER_Sampling)
 8004722:	4b6b      	ldr	r3, [pc, #428]	; (80048d0 <vTask_Measure+0x260>)
 8004724:	881a      	ldrh	r2, [r3, #0]
 8004726:	4b6b      	ldr	r3, [pc, #428]	; (80048d4 <vTask_Measure+0x264>)
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	f0c0 80a1 	bcc.w	8004872 <vTask_Measure+0x202>
			{
				//Calculamos el angulo promedio y la establecemis como el angulo relativo
				prom_ang = sum_ang/counting_action;
 8004730:	4b66      	ldr	r3, [pc, #408]	; (80048cc <vTask_Measure+0x25c>)
 8004732:	edd3 6a00 	vldr	s13, [r3]
 8004736:	4b66      	ldr	r3, [pc, #408]	; (80048d0 <vTask_Measure+0x260>)
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004746:	4b64      	ldr	r3, [pc, #400]	; (80048d8 <vTask_Measure+0x268>)
 8004748:	edc3 7a00 	vstr	s15, [r3]
				parameter_Posicion_Robot.phi_relativo = (prom_ang*M_PI)/180;          //[rad]
 800474c:	4b62      	ldr	r3, [pc, #392]	; (80048d8 <vTask_Measure+0x268>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f7fb ff11 	bl	8000578 <__aeabi_f2d>
 8004756:	a354      	add	r3, pc, #336	; (adr r3, 80048a8 <vTask_Measure+0x238>)
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	f7fb ff64 	bl	8000628 <__aeabi_dmul>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4610      	mov	r0, r2
 8004766:	4619      	mov	r1, r3
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	4b5b      	ldr	r3, [pc, #364]	; (80048dc <vTask_Measure+0x26c>)
 800476e:	f7fc f885 	bl	800087c <__aeabi_ddiv>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4951      	ldr	r1, [pc, #324]	; (80048bc <vTask_Measure+0x24c>)
 8004778:	e9c1 2302 	strd	r2, r3, [r1, #8]
				parameter_Posicion_Robot.phi_relativo = atan2(sin(parameter_Posicion_Robot.phi_relativo),cos(parameter_Posicion_Robot.phi_relativo));
 800477c:	4b4f      	ldr	r3, [pc, #316]	; (80048bc <vTask_Measure+0x24c>)
 800477e:	ed93 7b02 	vldr	d7, [r3, #8]
 8004782:	eeb0 0a47 	vmov.f32	s0, s14
 8004786:	eef0 0a67 	vmov.f32	s1, s15
 800478a:	f00c ff91 	bl	80116b0 <sin>
 800478e:	eeb0 8a40 	vmov.f32	s16, s0
 8004792:	eef0 8a60 	vmov.f32	s17, s1
 8004796:	4b49      	ldr	r3, [pc, #292]	; (80048bc <vTask_Measure+0x24c>)
 8004798:	ed93 7b02 	vldr	d7, [r3, #8]
 800479c:	eeb0 0a47 	vmov.f32	s0, s14
 80047a0:	eef0 0a67 	vmov.f32	s1, s15
 80047a4:	f00c fee8 	bl	8011578 <cos>
 80047a8:	eeb0 7a40 	vmov.f32	s14, s0
 80047ac:	eef0 7a60 	vmov.f32	s15, s1
 80047b0:	eeb0 1a47 	vmov.f32	s2, s14
 80047b4:	eef0 1a67 	vmov.f32	s3, s15
 80047b8:	eeb0 0a48 	vmov.f32	s0, s16
 80047bc:	eef0 0a68 	vmov.f32	s1, s17
 80047c0:	f00d f802 	bl	80117c8 <atan2>
 80047c4:	eeb0 7a40 	vmov.f32	s14, s0
 80047c8:	eef0 7a60 	vmov.f32	s15, s1
 80047cc:	4b3b      	ldr	r3, [pc, #236]	; (80048bc <vTask_Measure+0x24c>)
 80047ce:	ed83 7b02 	vstr	d7, [r3, #8]
				//Calculamos la velocidad
				handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 80047d2:	4b43      	ldr	r3, [pc, #268]	; (80048e0 <vTask_Measure+0x270>)
 80047d4:	8b9b      	ldrh	r3, [r3, #28]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047de:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <vTask_Measure+0x274>)
 80047e0:	edd3 7a00 	vldr	s15, [r3]
 80047e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e8:	4b3d      	ldr	r3, [pc, #244]	; (80048e0 <vTask_Measure+0x270>)
 80047ea:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 80047ee:	4b3e      	ldr	r3, [pc, #248]	; (80048e8 <vTask_Measure+0x278>)
 80047f0:	8b9b      	ldrh	r3, [r3, #28]
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047fa:	4b3c      	ldr	r3, [pc, #240]	; (80048ec <vTask_Measure+0x27c>)
 80047fc:	edd3 7a00 	vldr	s15, [r3]
 8004800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004804:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <vTask_Measure+0x278>)
 8004806:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/time_accion;      //[m/s]
 800480a:	4b35      	ldr	r3, [pc, #212]	; (80048e0 <vTask_Measure+0x270>)
 800480c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004810:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <vTask_Measure+0x280>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	ee07 3a90 	vmov	s15, r3
 8004818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800481c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004820:	4b2f      	ldr	r3, [pc, #188]	; (80048e0 <vTask_Measure+0x270>)
 8004822:	edc3 7a08 	vstr	s15, [r3, #32]
				handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/time_accion;      //[m/s]
 8004826:	4b30      	ldr	r3, [pc, #192]	; (80048e8 <vTask_Measure+0x278>)
 8004828:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800482c:	4b30      	ldr	r3, [pc, #192]	; (80048f0 <vTask_Measure+0x280>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800483c:	4b2a      	ldr	r3, [pc, #168]	; (80048e8 <vTask_Measure+0x278>)
 800483e:	edc3 7a08 	vstr	s15, [r3, #32]
				//Reiniciamos el numero de conteos
				handler_Motor_R.parametersMotor.count = handler_Motor_L.parametersMotor.count = 0;
 8004842:	4b27      	ldr	r3, [pc, #156]	; (80048e0 <vTask_Measure+0x270>)
 8004844:	2200      	movs	r2, #0
 8004846:	839a      	strh	r2, [r3, #28]
 8004848:	4b25      	ldr	r3, [pc, #148]	; (80048e0 <vTask_Measure+0x270>)
 800484a:	8b9a      	ldrh	r2, [r3, #28]
 800484c:	4b26      	ldr	r3, [pc, #152]	; (80048e8 <vTask_Measure+0x278>)
 800484e:	839a      	strh	r2, [r3, #28]
				//Reiniciamos variable
				sum_ang = counting_action = 0;
 8004850:	4b1f      	ldr	r3, [pc, #124]	; (80048d0 <vTask_Measure+0x260>)
 8004852:	2200      	movs	r2, #0
 8004854:	801a      	strh	r2, [r3, #0]
 8004856:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <vTask_Measure+0x25c>)
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
				//Notificamos a la tarea respectiva
				xTaskNotify(xHandleTask_Line_PID, 0, eNoAction);
 800485e:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <vTask_Measure+0x284>)
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	2300      	movs	r3, #0
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	2300      	movs	r3, #0
 8004868:	2200      	movs	r2, #0
 800486a:	2100      	movs	r1, #0
 800486c:	f003 fc1e 	bl	80080ac <xTaskGenericNotify>
 8004870:	e717      	b.n	80046a2 <vTask_Measure+0x32>
			}
			else{ counting_action++;}
 8004872:	4b17      	ldr	r3, [pc, #92]	; (80048d0 <vTask_Measure+0x260>)
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	3301      	adds	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	4b15      	ldr	r3, [pc, #84]	; (80048d0 <vTask_Measure+0x260>)
 800487c:	801a      	strh	r2, [r3, #0]
 800487e:	e710      	b.n	80046a2 <vTask_Measure+0x32>
		}
		else if(mode == 2)
 8004880:	7afb      	ldrb	r3, [r7, #11]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d109      	bne.n	800489a <vTask_Measure+0x22a>
		{
			//Notificamos a la tarea respectiva
			xTaskNotify(xHandleTask_Stop_Execute, 0, eNoAction);
 8004886:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <vTask_Measure+0x288>)
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	2300      	movs	r3, #0
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	2300      	movs	r3, #0
 8004890:	2200      	movs	r2, #0
 8004892:	2100      	movs	r1, #0
 8004894:	f003 fc0a 	bl	80080ac <xTaskGenericNotify>
 8004898:	e703      	b.n	80046a2 <vTask_Measure+0x32>
		}
		else{ vTaskSuspend(xHandleTask_Measure); }
 800489a:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <vTask_Measure+0x248>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f002 fd40 	bl	8007324 <vTaskSuspend>
		vTaskDelay(xDelaySamplingms);
 80048a4:	e6fd      	b.n	80046a2 <vTask_Measure+0x32>
 80048a6:	bf00      	nop
 80048a8:	54442d18 	.word	0x54442d18
 80048ac:	400921fb 	.word	0x400921fb
 80048b0:	20000011 	.word	0x20000011
 80048b4:	10624dd3 	.word	0x10624dd3
 80048b8:	20000404 	.word	0x20000404
 80048bc:	20008e68 	.word	0x20008e68
 80048c0:	200003be 	.word	0x200003be
 80048c4:	200002ac 	.word	0x200002ac
 80048c8:	20000438 	.word	0x20000438
 80048cc:	20008eb0 	.word	0x20008eb0
 80048d0:	200003ea 	.word	0x200003ea
 80048d4:	20000012 	.word	0x20000012
 80048d8:	20008eb4 	.word	0x20008eb4
 80048dc:	40668000 	.word	0x40668000
 80048e0:	20000358 	.word	0x20000358
 80048e4:	200003c4 	.word	0x200003c4
 80048e8:	200002e4 	.word	0x200002e4
 80048ec:	200003c8 	.word	0x200003c8
 80048f0:	200003e8 	.word	0x200003e8
 80048f4:	20000408 	.word	0x20000408
 80048f8:	20000424 	.word	0x20000424

080048fc <vTask_Line_PID>:
	}
}
//------------Tarea Line PID---------------
void vTask_Line_PID(void * pvParameters)
{
 80048fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004900:	b094      	sub	sp, #80	; 0x50
 8004902:	af02      	add	r7, sp, #8
 8004904:	6078      	str	r0, [r7, #4]
	//Definicion de variable
	BaseType_t notify_status = {0};
 8004906:	2300      	movs	r3, #0
 8004908:	647b      	str	r3, [r7, #68]	; 0x44
	float sampling_timer = ((float) time_accion/1000);
 800490a:	4bc0      	ldr	r3, [pc, #768]	; (8004c0c <vTask_Line_PID+0x310>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004916:	eddf 6abe 	vldr	s13, [pc, #760]	; 8004c10 <vTask_Line_PID+0x314>
 800491a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800491e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float distance_c = 0;
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
	char bufferMsg[40] = {0};
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	f107 0314 	add.w	r3, r7, #20
 8004930:	2224      	movs	r2, #36	; 0x24
 8004932:	2100      	movs	r1, #0
 8004934:	4618      	mov	r0, r3
 8004936:	f007 fd69 	bl	800c40c <memset>
	char *prtbuffer = bufferMsg;
 800493a:	f107 0310 	add.w	r3, r7, #16
 800493e:	60fb      	str	r3, [r7, #12]
	float distance_recta = 0;
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	63bb      	str	r3, [r7, #56]	; 0x38

	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004946:	f04f 33ff 	mov.w	r3, #4294967295
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	2300      	movs	r3, #0
 800494e:	2200      	movs	r2, #0
 8004950:	2100      	movs	r1, #0
 8004952:	2000      	movs	r0, #0
 8004954:	f003 fb2a 	bl	8007fac <xTaskGenericNotifyWait>
 8004958:	6478      	str	r0, [r7, #68]	; 0x44
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 800495a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495c:	2b01      	cmp	r3, #1
 800495e:	d1f2      	bne.n	8004946 <vTask_Line_PID+0x4a>
		{
			//Calculo odometria
			distance_c = (handler_Motor_R.parametersMotor.distance+handler_Motor_L.parametersMotor.distance)/2;  	//[mm]
 8004960:	4bac      	ldr	r3, [pc, #688]	; (8004c14 <vTask_Line_PID+0x318>)
 8004962:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004966:	4bac      	ldr	r3, [pc, #688]	; (8004c18 <vTask_Line_PID+0x31c>)
 8004968:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800496c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004970:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004974:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004978:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			parameter_Posicion_Robot.xr_position += distance_c*(cos(parameter_Posicion_Robot.phi_relativo));        //[mm]
 800497c:	4ba7      	ldr	r3, [pc, #668]	; (8004c1c <vTask_Line_PID+0x320>)
 800497e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004982:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004984:	f7fb fdf8 	bl	8000578 <__aeabi_f2d>
 8004988:	4680      	mov	r8, r0
 800498a:	4689      	mov	r9, r1
 800498c:	4ba3      	ldr	r3, [pc, #652]	; (8004c1c <vTask_Line_PID+0x320>)
 800498e:	ed93 7b02 	vldr	d7, [r3, #8]
 8004992:	eeb0 0a47 	vmov.f32	s0, s14
 8004996:	eef0 0a67 	vmov.f32	s1, s15
 800499a:	f00c fded 	bl	8011578 <cos>
 800499e:	ec53 2b10 	vmov	r2, r3, d0
 80049a2:	4640      	mov	r0, r8
 80049a4:	4649      	mov	r1, r9
 80049a6:	f7fb fe3f 	bl	8000628 <__aeabi_dmul>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4620      	mov	r0, r4
 80049b0:	4629      	mov	r1, r5
 80049b2:	f7fb fc83 	bl	80002bc <__adddf3>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4998      	ldr	r1, [pc, #608]	; (8004c1c <vTask_Line_PID+0x320>)
 80049bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
			parameter_Posicion_Robot.yr_position += distance_c*(sin(parameter_Posicion_Robot.phi_relativo));       //[mm]
 80049c0:	4b96      	ldr	r3, [pc, #600]	; (8004c1c <vTask_Line_PID+0x320>)
 80049c2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80049c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049c8:	f7fb fdd6 	bl	8000578 <__aeabi_f2d>
 80049cc:	4680      	mov	r8, r0
 80049ce:	4689      	mov	r9, r1
 80049d0:	4b92      	ldr	r3, [pc, #584]	; (8004c1c <vTask_Line_PID+0x320>)
 80049d2:	ed93 7b02 	vldr	d7, [r3, #8]
 80049d6:	eeb0 0a47 	vmov.f32	s0, s14
 80049da:	eef0 0a67 	vmov.f32	s1, s15
 80049de:	f00c fe67 	bl	80116b0 <sin>
 80049e2:	ec53 2b10 	vmov	r2, r3, d0
 80049e6:	4640      	mov	r0, r8
 80049e8:	4649      	mov	r1, r9
 80049ea:	f7fb fe1d 	bl	8000628 <__aeabi_dmul>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4620      	mov	r0, r4
 80049f4:	4629      	mov	r1, r5
 80049f6:	f7fb fc61 	bl	80002bc <__adddf3>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4987      	ldr	r1, [pc, #540]	; (8004c1c <vTask_Line_PID+0x320>)
 8004a00:	e9c1 2308 	strd	r2, r3, [r1, #32]
			//Paso de c.relativa a c.globales
			parameter_Posicion_Robot.xg_position = parameter_Posicion_Robot.xg_position_inicial + parameter_Posicion_Robot.xr_position*cos_cal - parameter_Posicion_Robot.yr_position*sin_cal;
 8004a04:	4b85      	ldr	r3, [pc, #532]	; (8004c1c <vTask_Line_PID+0x320>)
 8004a06:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8004a0a:	4b84      	ldr	r3, [pc, #528]	; (8004c1c <vTask_Line_PID+0x320>)
 8004a0c:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8004a10:	4b83      	ldr	r3, [pc, #524]	; (8004c20 <vTask_Line_PID+0x324>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fb fdaf 	bl	8000578 <__aeabi_f2d>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4640      	mov	r0, r8
 8004a20:	4649      	mov	r1, r9
 8004a22:	f7fb fe01 	bl	8000628 <__aeabi_dmul>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	f7fb fc45 	bl	80002bc <__adddf3>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4690      	mov	r8, r2
 8004a38:	4699      	mov	r9, r3
 8004a3a:	4b78      	ldr	r3, [pc, #480]	; (8004c1c <vTask_Line_PID+0x320>)
 8004a3c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8004a40:	4b78      	ldr	r3, [pc, #480]	; (8004c24 <vTask_Line_PID+0x328>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fb fd97 	bl	8000578 <__aeabi_f2d>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4620      	mov	r0, r4
 8004a50:	4629      	mov	r1, r5
 8004a52:	f7fb fde9 	bl	8000628 <__aeabi_dmul>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	f7fb fc2b 	bl	80002b8 <__aeabi_dsub>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	496d      	ldr	r1, [pc, #436]	; (8004c1c <vTask_Line_PID+0x320>)
 8004a68:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			parameter_Posicion_Robot.yg_position = parameter_Posicion_Robot.yg_position_inicial + parameter_Posicion_Robot.xr_position*sin_cal + parameter_Posicion_Robot.yr_position*cos_cal;
 8004a6c:	4b6b      	ldr	r3, [pc, #428]	; (8004c1c <vTask_Line_PID+0x320>)
 8004a6e:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8004a72:	4b6a      	ldr	r3, [pc, #424]	; (8004c1c <vTask_Line_PID+0x320>)
 8004a74:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8004a78:	4b6a      	ldr	r3, [pc, #424]	; (8004c24 <vTask_Line_PID+0x328>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fb fd7b 	bl	8000578 <__aeabi_f2d>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4640      	mov	r0, r8
 8004a88:	4649      	mov	r1, r9
 8004a8a:	f7fb fdcd 	bl	8000628 <__aeabi_dmul>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4620      	mov	r0, r4
 8004a94:	4629      	mov	r1, r5
 8004a96:	f7fb fc11 	bl	80002bc <__adddf3>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4690      	mov	r8, r2
 8004aa0:	4699      	mov	r9, r3
 8004aa2:	4b5e      	ldr	r3, [pc, #376]	; (8004c1c <vTask_Line_PID+0x320>)
 8004aa4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8004aa8:	4b5d      	ldr	r3, [pc, #372]	; (8004c20 <vTask_Line_PID+0x324>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fb fd63 	bl	8000578 <__aeabi_f2d>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	4629      	mov	r1, r5
 8004aba:	f7fb fdb5 	bl	8000628 <__aeabi_dmul>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4640      	mov	r0, r8
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	f7fb fbf9 	bl	80002bc <__adddf3>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4953      	ldr	r1, [pc, #332]	; (8004c1c <vTask_Line_PID+0x320>)
 8004ad0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			//Convertimos el valor y imprimemos
			sprintf(bufferMsg,"&%#.4f\t%#.4f\n", parameter_Posicion_Robot.xg_position , parameter_Posicion_Robot.yg_position);
 8004ad4:	4b51      	ldr	r3, [pc, #324]	; (8004c1c <vTask_Line_PID+0x320>)
 8004ad6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004ada:	4b50      	ldr	r3, [pc, #320]	; (8004c1c <vTask_Line_PID+0x320>)
 8004adc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004ae0:	f107 0410 	add.w	r4, r7, #16
 8004ae4:	e9cd 2300 	strd	r2, r3, [sp]
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	494e      	ldr	r1, [pc, #312]	; (8004c28 <vTask_Line_PID+0x32c>)
 8004aee:	4620      	mov	r0, r4
 8004af0:	f008 fb14 	bl	800d11c <siprintf>
			xQueueSend(xQueue_Print, &prtbuffer, portMAX_DELAY);
 8004af4:	4b4d      	ldr	r3, [pc, #308]	; (8004c2c <vTask_Line_PID+0x330>)
 8004af6:	6818      	ldr	r0, [r3, #0]
 8004af8:	f107 010c 	add.w	r1, r7, #12
 8004afc:	2300      	movs	r3, #0
 8004afe:	f04f 32ff 	mov.w	r2, #4294967295
 8004b02:	f001 fd27 	bl	8006554 <xQueueGenericSend>
			//Control PID para la distancia
			distance_recta = (distance_to_straight_line(&parameter_Path_Robot, parameter_Posicion_Robot.xg_position, parameter_Posicion_Robot.yg_position))/1000;
 8004b06:	4b45      	ldr	r3, [pc, #276]	; (8004c1c <vTask_Line_PID+0x320>)
 8004b08:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8004b0c:	4b43      	ldr	r3, [pc, #268]	; (8004c1c <vTask_Line_PID+0x320>)
 8004b0e:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8004b12:	eeb0 1a46 	vmov.f32	s2, s12
 8004b16:	eef0 1a66 	vmov.f32	s3, s13
 8004b1a:	eeb0 0a47 	vmov.f32	s0, s14
 8004b1e:	eef0 0a67 	vmov.f32	s1, s15
 8004b22:	4843      	ldr	r0, [pc, #268]	; (8004c30 <vTask_Line_PID+0x334>)
 8004b24:	f7fd fea8 	bl	8002878 <distance_to_straight_line>
 8004b28:	ec51 0b10 	vmov	r0, r1, d0
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	4b40      	ldr	r3, [pc, #256]	; (8004c34 <vTask_Line_PID+0x338>)
 8004b32:	f7fb fea3 	bl	800087c <__aeabi_ddiv>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f7fc f86b 	bl	8000c18 <__aeabi_d2f>
 8004b42:	4603      	mov	r3, r0
 8004b44:	63bb      	str	r3, [r7, #56]	; 0x38
			PID_simple(&parameter_PID_distace, sampling_timer, 0,  distance_recta);
 8004b46:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8004b4a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8004c38 <vTask_Line_PID+0x33c>
 8004b4e:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8004b52:	483a      	ldr	r0, [pc, #232]	; (8004c3c <vTask_Line_PID+0x340>)
 8004b54:	f000 fdb6 	bl	80056c4 <PID_simple>
			//Aplicacndo correcion
			vel_Setpoint_L = velSetPoint - parameter_PID_distace.u;
 8004b58:	4b39      	ldr	r3, [pc, #228]	; (8004c40 <vTask_Line_PID+0x344>)
 8004b5a:	ed93 7a00 	vldr	s14, [r3]
 8004b5e:	4b37      	ldr	r3, [pc, #220]	; (8004c3c <vTask_Line_PID+0x340>)
 8004b60:	edd3 7a00 	vldr	s15, [r3]
 8004b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b68:	4b36      	ldr	r3, [pc, #216]	; (8004c44 <vTask_Line_PID+0x348>)
 8004b6a:	edc3 7a00 	vstr	s15, [r3]
			vel_Setpoint_R = velSetPoint + parameter_PID_distace.u;
 8004b6e:	4b33      	ldr	r3, [pc, #204]	; (8004c3c <vTask_Line_PID+0x340>)
 8004b70:	ed93 7a00 	vldr	s14, [r3]
 8004b74:	4b32      	ldr	r3, [pc, #200]	; (8004c40 <vTask_Line_PID+0x344>)
 8004b76:	edd3 7a00 	vldr	s15, [r3]
 8004b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b7e:	4b32      	ldr	r3, [pc, #200]	; (8004c48 <vTask_Line_PID+0x34c>)
 8004b80:	edc3 7a00 	vstr	s15, [r3]
			//Aplicacion del PID
			PID_simple(&handler_Motor_L.parametersMotor.parametersPID, sampling_timer, vel_Setpoint_L,  handler_Motor_L.parametersMotor.velocity);
 8004b84:	4b2f      	ldr	r3, [pc, #188]	; (8004c44 <vTask_Line_PID+0x348>)
 8004b86:	edd3 7a00 	vldr	s15, [r3]
 8004b8a:	4b23      	ldr	r3, [pc, #140]	; (8004c18 <vTask_Line_PID+0x31c>)
 8004b8c:	ed93 7a08 	vldr	s14, [r3, #32]
 8004b90:	eeb0 1a47 	vmov.f32	s2, s14
 8004b94:	eef0 0a67 	vmov.f32	s1, s15
 8004b98:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8004b9c:	481e      	ldr	r0, [pc, #120]	; (8004c18 <vTask_Line_PID+0x31c>)
 8004b9e:	f000 fd91 	bl	80056c4 <PID_simple>
			PID_simple(&handler_Motor_R.parametersMotor.parametersPID, sampling_timer, vel_Setpoint_R,  handler_Motor_R.parametersMotor.velocity);
 8004ba2:	4b29      	ldr	r3, [pc, #164]	; (8004c48 <vTask_Line_PID+0x34c>)
 8004ba4:	edd3 7a00 	vldr	s15, [r3]
 8004ba8:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <vTask_Line_PID+0x318>)
 8004baa:	ed93 7a08 	vldr	s14, [r3, #32]
 8004bae:	eeb0 1a47 	vmov.f32	s2, s14
 8004bb2:	eef0 0a67 	vmov.f32	s1, s15
 8004bb6:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8004bba:	4816      	ldr	r0, [pc, #88]	; (8004c14 <vTask_Line_PID+0x318>)
 8004bbc:	f000 fd82 	bl	80056c4 <PID_simple>
			//Cambiamos valores
			handler_Motor_L.configMotor.new_dutty += handler_Motor_L.parametersMotor.parametersPID.u;
 8004bc0:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <vTask_Line_PID+0x31c>)
 8004bc2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <vTask_Line_PID+0x31c>)
 8004bc8:	edd3 7a00 	vldr	s15, [r3]
 8004bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <vTask_Line_PID+0x31c>)
 8004bd2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			handler_Motor_R.configMotor.new_dutty += handler_Motor_R.parametersMotor.parametersPID.u;
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <vTask_Line_PID+0x318>)
 8004bd8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004bdc:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <vTask_Line_PID+0x318>)
 8004bde:	edd3 7a00 	vldr	s15, [r3]
 8004be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <vTask_Line_PID+0x318>)
 8004be8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			//Correccion del dutty
			correction(&handler_Motor_L);
 8004bec:	480a      	ldr	r0, [pc, #40]	; (8004c18 <vTask_Line_PID+0x31c>)
 8004bee:	f000 fdc5 	bl	800577c <correction>
			correction(&handler_Motor_R);
 8004bf2:	4808      	ldr	r0, [pc, #32]	; (8004c14 <vTask_Line_PID+0x318>)
 8004bf4:	f000 fdc2 	bl	800577c <correction>
			//Notificamos a la tarea respectiva
			xTaskNotify(xHandleTask_Stop_Execute, 0, eNoAction);
 8004bf8:	4b14      	ldr	r3, [pc, #80]	; (8004c4c <vTask_Line_PID+0x350>)
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2300      	movs	r3, #0
 8004c02:	2200      	movs	r2, #0
 8004c04:	2100      	movs	r1, #0
 8004c06:	f003 fa51 	bl	80080ac <xTaskGenericNotify>
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8004c0a:	e69c      	b.n	8004946 <vTask_Line_PID+0x4a>
 8004c0c:	200003e8 	.word	0x200003e8
 8004c10:	447a0000 	.word	0x447a0000
 8004c14:	200002e4 	.word	0x200002e4
 8004c18:	20000358 	.word	0x20000358
 8004c1c:	20008e68 	.word	0x20008e68
 8004c20:	20008e50 	.word	0x20008e50
 8004c24:	20008e54 	.word	0x20008e54
 8004c28:	080141f8 	.word	0x080141f8
 8004c2c:	20000428 	.word	0x20000428
 8004c30:	20008de8 	.word	0x20008de8
 8004c34:	408f4000 	.word	0x408f4000
 8004c38:	00000000 	.word	0x00000000
 8004c3c:	200003cc 	.word	0x200003cc
 8004c40:	200003c0 	.word	0x200003c0
 8004c44:	20008ebc 	.word	0x20008ebc
 8004c48:	20008eb8 	.word	0x20008eb8
 8004c4c:	20000424 	.word	0x20000424

08004c50 <led_state_callback>:


//-----------------------Inicio definicion funciones del Software Timer---------------------------

void led_state_callback(TimerHandle_t xTimer)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	//Cambio estado opuesto Led
	GPIOxTooglePin(&handler_GPIO_BlinkyPin);
 8004c58:	4803      	ldr	r0, [pc, #12]	; (8004c68 <led_state_callback+0x18>)
 8004c5a:	f006 f8f2 	bl	800ae42 <GPIOxTooglePin>
}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000234 	.word	0x20000234

08004c6c <process_stringsend>:


//-----------------------Inicio definicion funciones para recepcion de mensaje---------------------------
//Funcion que ayuda en el procesamiento del comando
void process_stringsend(char stringsend[500])
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08a      	sub	sp, #40	; 0x28
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	6078      	str	r0, [r7, #4]
	//Definicion de structura del comando
	command_t structcmd = {0};
 8004c74:	f107 030c 	add.w	r3, r7, #12
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	609a      	str	r2, [r3, #8]
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	611a      	str	r2, [r3, #16]
	//Extraemos el string enviado
	extract_stringsend(stringsend);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f863 	bl	8004d50 <extract_stringsend>
	//De acuerdo al state se procesa el mensaje
	if(next_state==sMenuOperation || next_state==sExecution)
 8004c8a:	4b2b      	ldr	r3, [pc, #172]	; (8004d38 <process_stringsend+0xcc>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d003      	beq.n	8004c9a <process_stringsend+0x2e>
 8004c92:	4b29      	ldr	r3, [pc, #164]	; (8004d38 <process_stringsend+0xcc>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d137      	bne.n	8004d0a <process_stringsend+0x9e>
	{
		//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
		sscanf(stringsend, "%s %u %u", structcmd.send_cmd, &structcmd.firtparameter, &structcmd.secondparameter);
 8004c9a:	f107 030c 	add.w	r3, r7, #12
 8004c9e:	f103 010c 	add.w	r1, r3, #12
 8004ca2:	f107 020c 	add.w	r2, r7, #12
 8004ca6:	f107 030c 	add.w	r3, r7, #12
 8004caa:	3310      	adds	r3, #16
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4922      	ldr	r1, [pc, #136]	; (8004d3c <process_stringsend+0xd0>)
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f008 fa52 	bl	800d15c <siscanf>
		//Envio de struct a la cola
		xQueueSend(xQueue_StructCommand, &structcmd, 0);
 8004cb8:	4b21      	ldr	r3, [pc, #132]	; (8004d40 <process_stringsend+0xd4>)
 8004cba:	6818      	ldr	r0, [r3, #0]
 8004cbc:	f107 010c 	add.w	r1, r7, #12
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f001 fc46 	bl	8006554 <xQueueGenericSend>
		//De al state se ejecuta una respectiva tarea
		switch(next_state)
 8004cc8:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <process_stringsend+0xcc>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d002      	beq.n	8004cd6 <process_stringsend+0x6a>
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d00a      	beq.n	8004cea <process_stringsend+0x7e>
 8004cd4:	e013      	b.n	8004cfe <process_stringsend+0x92>
		{
		case sMenuOperation:
			//Notificamos a la tarea respectiva
			xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8004cd6:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <process_stringsend+0xd8>)
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	f003 f9e2 	bl	80080ac <xTaskGenericNotify>
			break;
 8004ce8:	e00b      	b.n	8004d02 <process_stringsend+0x96>
		case sExecution:
			//Notificamos a la tarea respectiva
			xTaskNotify(xHandleTask_Stop, 0, eNoAction);
 8004cea:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <process_stringsend+0xdc>)
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	f003 f9d8 	bl	80080ac <xTaskGenericNotify>
			break;
 8004cfc:	e001      	b.n	8004d02 <process_stringsend+0x96>
		default:
			__NOP();
 8004cfe:	bf00      	nop
			break;
 8004d00:	bf00      	nop
		}
		//cambio de status
		next_state = sNullReception;
 8004d02:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <process_stringsend+0xcc>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	701a      	strb	r2, [r3, #0]
		next_state = sNullReception;
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Separate_GridMap, (uint32_t) stringsend, eSetValueWithoutOverwrite);
	}
	else{ __NOP(); }
}
 8004d08:	e011      	b.n	8004d2e <process_stringsend+0xc2>
	else if(next_state==sAStar)
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <process_stringsend+0xcc>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d10c      	bne.n	8004d2c <process_stringsend+0xc0>
		next_state = sNullReception;
 8004d12:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <process_stringsend+0xcc>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
		xTaskNotify(xHandleTask_Separate_GridMap, (uint32_t) stringsend, eSetValueWithoutOverwrite);
 8004d18:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <process_stringsend+0xe0>)
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	2304      	movs	r3, #4
 8004d24:	2100      	movs	r1, #0
 8004d26:	f003 f9c1 	bl	80080ac <xTaskGenericNotify>
}
 8004d2a:	e000      	b.n	8004d2e <process_stringsend+0xc2>
	else{ __NOP(); }
 8004d2c:	bf00      	nop
}
 8004d2e:	bf00      	nop
 8004d30:	3720      	adds	r7, #32
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000024 	.word	0x20000024
 8004d3c:	08014208 	.word	0x08014208
 8004d40:	2000042c 	.word	0x2000042c
 8004d44:	200003f0 	.word	0x200003f0
 8004d48:	20000400 	.word	0x20000400
 8004d4c:	20000418 	.word	0x20000418

08004d50 <extract_stringsend>:
//Funcion para obtener el comando
int extract_stringsend(char cmd[500])
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
	//Definicion de variables
	uint8_t item;
	uint8_t counter_j = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;
	//Se verifica si hay un nuevo mensaje
	status = uxQueueMessagesWaiting(xQueue_InputData);
 8004d5c:	4b17      	ldr	r3, [pc, #92]	; (8004dbc <extract_stringsend+0x6c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 ffc0 	bl	8006ce6 <uxQueueMessagesWaiting>
 8004d66:	4603      	mov	r3, r0
 8004d68:	613b      	str	r3, [r7, #16]
	if(status == 0)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d102      	bne.n	8004d76 <extract_stringsend+0x26>
	{
		return -1;
 8004d70:	f04f 33ff 	mov.w	r3, #4294967295
 8004d74:	e01d      	b.n	8004db2 <extract_stringsend+0x62>
	}
	do{
		//Recibimos un elemento y lo montamos en item
		status = xQueueReceive(xQueue_InputData, &item, 0);
 8004d76:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <extract_stringsend+0x6c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f107 010f 	add.w	r1, r7, #15
 8004d7e:	2200      	movs	r2, #0
 8004d80:	4618      	mov	r0, r3
 8004d82:	f001 fd77 	bl	8006874 <xQueueReceive>
 8004d86:	6138      	str	r0, [r7, #16]
		if(status ==pdTRUE){
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d107      	bne.n	8004d9e <extract_stringsend+0x4e>
			//Vamos llenando el arreglo del comando
			cmd[counter_j++] = item;
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	75fa      	strb	r2, [r7, #23]
 8004d94:	461a      	mov	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4413      	add	r3, r2
 8004d9a:	7bfa      	ldrb	r2, [r7, #15]
 8004d9c:	701a      	strb	r2, [r3, #0]
		}
	}while(item != '@');
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	2b40      	cmp	r3, #64	; 0x40
 8004da2:	d1e8      	bne.n	8004d76 <extract_stringsend+0x26>

	//Agregamos el elemento nulo y ademas definimos el largo del mensaje
	cmd[counter_j - 1] = '\0';
 8004da4:	7dfb      	ldrb	r3, [r7, #23]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	4413      	add	r3, r2
 8004dac:	2200      	movs	r2, #0
 8004dae:	701a      	strb	r2, [r3, #0]

	return 0;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000430 	.word	0x20000430

08004dc0 <set_operation_square>:


//-------------Inicio de la definicion de las funciones para la contruccion de la lista de operaciones ----------------------------------
//Operaciones del Cuadrado
void set_operation_square(Parameters_Operation_t *prtList, double dis_side, double direction_square)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b0a8      	sub	sp, #160	; 0xa0
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6178      	str	r0, [r7, #20]
 8004dc8:	ed87 0b02 	vstr	d0, [r7, #8]
 8004dcc:	ed87 1b00 	vstr	d1, [r7]
	//Definicion de variables
	Parameter_build_t parameter_build = {0};
 8004dd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004dd4:	2230      	movs	r2, #48	; 0x30
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f007 fb17 	bl	800c40c <memset>
	int8_t value_side = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	//Definicion de las coordenadas del cuadrado
	if(direction_square == 0){value_side = 1;}
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004df0:	f7fb fe82 	bl	8000af8 <__aeabi_dcmpeq>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <set_operation_square+0x42>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8004e00:	e002      	b.n	8004e08 <set_operation_square+0x48>
	else{ value_side = -1;}
 8004e02:	23ff      	movs	r3, #255	; 0xff
 8004e04:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	double coordination_position_square[2][5] = {{0, dis_side, dis_side, 0, 0},{0, 0, value_side*dis_side,value_side*dis_side,0}};
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8004e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e18:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e20:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004e54:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fb fb7b 	bl	8000554 <__aeabi_i2d>
 8004e5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e62:	f7fb fbe1 	bl	8000628 <__aeabi_dmul>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8004e6e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fb fb6e 	bl	8000554 <__aeabi_i2d>
 8004e78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e7c:	f7fb fbd4 	bl	8000628 <__aeabi_dmul>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	//Definimos la posicion inicial del cuadrado
	parameter_build.initline_x = coordination_position_square[0][0]; parameter_build.initline_y = coordination_position_square[0][0];
 8004e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e98:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8004e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	parameter_build.grad_vector_init = 0; parameter_build.number_operation = 0;
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	parameter_build.delta_before[0] = dis_side; parameter_build.delta_before[1] = 0;
 8004eb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eba:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	//Construccion de las operaciones
	for(uint8_t i=1; i<5; i++)
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8004ed0:	e029      	b.n	8004f26 <set_operation_square+0x166>
	{
		//Contruimos la operacion
		build_Operation(prtList, &parameter_build, coordination_position_square[0][i], coordination_position_square[1][i]);
 8004ed2:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	33a0      	adds	r3, #160	; 0xa0
 8004eda:	443b      	add	r3, r7
 8004edc:	3b88      	subs	r3, #136	; 0x88
 8004ede:	ed93 7b00 	vldr	d7, [r3]
 8004ee2:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8004ee6:	3305      	adds	r3, #5
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	33a0      	adds	r3, #160	; 0xa0
 8004eec:	443b      	add	r3, r7
 8004eee:	3b88      	subs	r3, #136	; 0x88
 8004ef0:	ed93 6b00 	vldr	d6, [r3]
 8004ef4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004ef8:	eeb0 1a46 	vmov.f32	s2, s12
 8004efc:	eef0 1a66 	vmov.f32	s3, s13
 8004f00:	eeb0 0a47 	vmov.f32	s0, s14
 8004f04:	eef0 0a67 	vmov.f32	s1, s15
 8004f08:	4619      	mov	r1, r3
 8004f0a:	6978      	ldr	r0, [r7, #20]
 8004f0c:	f7fd fa44 	bl	8002398 <build_Operation>
		//Aumentamos el recorrido en la lista
		parameter_build.routelist++;
 8004f10:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8004f14:	3301      	adds	r3, #1
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	for(uint8_t i=1; i<5; i++)
 8004f1c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8004f20:	3301      	adds	r3, #1
 8004f22:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8004f26:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d9d1      	bls.n	8004ed2 <set_operation_square+0x112>
	}
	//Agregamos indicador de la operacion final
	prtList[parameter_build.number_operation+1].operacion = NULL_OPERATION;
 8004f2e:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8004f32:	3301      	adds	r3, #1
 8004f34:	015b      	lsls	r3, r3, #5
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4413      	add	r3, r2
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	37a0      	adds	r7, #160	; 0xa0
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <set_operation_AStar>:

//Operaciones del AStar
void set_operation_AStar(Parameters_Operation_t *prtList, file_cell_t *file_cell, Parameters_Position_t *ptrParameterPosition, Parameters_Path_t *ptrParameterPath)
{
 8004f48:	b5b0      	push	{r4, r5, r7, lr}
 8004f4a:	b092      	sub	sp, #72	; 0x48
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
	//Definicion de variables
	Parameter_build_t parameter_build = {0};
 8004f56:	f107 0310 	add.w	r3, r7, #16
 8004f5a:	2230      	movs	r2, #48	; 0x30
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f007 fa54 	bl	800c40c <memset>
	//Definimos la posicion inicial del cuadrado
	//-----------------NOTA: RECORDAR QUE EL OPPY ESTA INICIALMENTE ORIENTADO 90 GRADOS CON RESPECTO AL EJE X---------------
	ptrParameterPath->rotative_Grad = ptrParameterPosition->grad_grobal = 90;
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	4b67      	ldr	r3, [pc, #412]	; (8005108 <set_operation_AStar+0x1c0>)
 8004f6c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	225a      	movs	r2, #90	; 0x5a
 8004f74:	63da      	str	r2, [r3, #60]	; 0x3c
	parameter_build.initline_x = ptrParameterPosition->xg_position_inicial = ptrParameterPath->goal_Position_x = (file_cell->ptrCell_parent[0]->coor_x)*10;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f86:	ee17 0a90 	vmov	r0, s15
 8004f8a:	f7fb faf5 	bl	8000578 <__aeabi_f2d>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	6839      	ldr	r1, [r7, #0]
 8004f94:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004faa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	parameter_build.initline_y = ptrParameterPosition->yg_position_inicial = ptrParameterPath->goal_Position_y = (file_cell->ptrCell_parent[0]->coor_y)*10;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fb6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fbe:	ee17 0a90 	vmov	r0, s15
 8004fc2:	f7fb fad9 	bl	8000578 <__aeabi_f2d>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	6839      	ldr	r1, [r7, #0]
 8004fcc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004fe2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	parameter_build.grad_vector_init = 0; parameter_build.number_operation = parameter_build.routelist = 0;
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8004ff8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004ffc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	parameter_build.delta_before[0] = 0; parameter_build.delta_before[1] = 10;
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	4b3e      	ldr	r3, [pc, #248]	; (800510c <set_operation_AStar+0x1c4>)
 8005012:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	//Construccion de las operaciones
	for(uint8_t i=1; i<100; i++)
 8005016:	2301      	movs	r3, #1
 8005018:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800501c:	e03e      	b.n	800509c <set_operation_AStar+0x154>
	{
		//Comprobamos si la celda no es un elemento nulo
		if(file_cell->ptrCell_parent[i] != NULL)
 800501e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d03b      	beq.n	80050a6 <set_operation_AStar+0x15e>
		{
			//Construimos la operacion
			build_Operation(prtList, &parameter_build, (file_cell->ptrCell_parent[i]->coor_x)*10, (file_cell->ptrCell_parent[i]->coor_y)*10);
 800502e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	edd3 7a01 	vldr	s15, [r3, #4]
 800503e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005046:	ee17 0a90 	vmov	r0, s15
 800504a:	f7fb fa95 	bl	8000578 <__aeabi_f2d>
 800504e:	4604      	mov	r4, r0
 8005050:	460d      	mov	r5, r1
 8005052:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005062:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005066:	ee67 7a87 	vmul.f32	s15, s15, s14
 800506a:	ee17 0a90 	vmov	r0, s15
 800506e:	f7fb fa83 	bl	8000578 <__aeabi_f2d>
 8005072:	f107 0310 	add.w	r3, r7, #16
 8005076:	ec41 0b11 	vmov	d1, r0, r1
 800507a:	ec45 4b10 	vmov	d0, r4, r5
 800507e:	4619      	mov	r1, r3
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7fd f989 	bl	8002398 <build_Operation>
			//Aumentamos el valor en el recorrido
			parameter_build.routelist++;
 8005086:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800508a:	3301      	adds	r3, #1
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	for(uint8_t i=1; i<100; i++)
 8005092:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005096:	3301      	adds	r3, #1
 8005098:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800509c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80050a0:	2b63      	cmp	r3, #99	; 0x63
 80050a2:	d9bc      	bls.n	800501e <set_operation_AStar+0xd6>
 80050a4:	e000      	b.n	80050a8 <set_operation_AStar+0x160>
		}
		else{break;}
 80050a6:	bf00      	nop
	}
	//Se Agrega la operacion final para llegar al goal
	//Construimos la operacion
	build_Operation(prtList, &parameter_build, (file_cell->ptrCell_file->coor_x)*10, (file_cell->ptrCell_file->coor_y)*10);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80050b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050b8:	ee17 0a90 	vmov	r0, s15
 80050bc:	f7fb fa5c 	bl	8000578 <__aeabi_f2d>
 80050c0:	4604      	mov	r4, r0
 80050c2:	460d      	mov	r5, r1
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80050cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050d4:	ee17 0a90 	vmov	r0, s15
 80050d8:	f7fb fa4e 	bl	8000578 <__aeabi_f2d>
 80050dc:	f107 0310 	add.w	r3, r7, #16
 80050e0:	ec41 0b11 	vmov	d1, r0, r1
 80050e4:	ec45 4b10 	vmov	d0, r4, r5
 80050e8:	4619      	mov	r1, r3
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7fd f954 	bl	8002398 <build_Operation>
	//Agregamos indicador de la operacion final
	prtList[parameter_build.number_operation+1].operacion = NULL_OPERATION;
 80050f0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80050f4:	3301      	adds	r3, #1
 80050f6:	015b      	lsls	r3, r3, #5
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
}
 8005100:	bf00      	nop
 8005102:	3748      	adds	r7, #72	; 0x48
 8005104:	46bd      	mov	sp, r7
 8005106:	bdb0      	pop	{r4, r5, r7, pc}
 8005108:	40568000 	.word	0x40568000
 800510c:	40240000 	.word	0x40240000

08005110 <set_operation_in_queue>:


//------------------------------Inicio de la definicion de funciones del modo----------------------------------------
//-----Establecer Operaciones-----
void set_operation_in_queue(Parameters_Operation_t list[30])
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08c      	sub	sp, #48	; 0x30
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	//Definimos structura para recibir los elementos y asi vaciar la cola
	Parameters_Operation_t xReceiveClear;
	//Definicion bits
	const EventBits_t xBitsSet = (ENABLE_OPERATION_BIT | EXECUTE_OPERATION_BIT);
 8005118:	2303      	movs	r3, #3
 800511a:	62bb      	str	r3, [r7, #40]	; 0x28
	//Limpiamos la cola de operaciones
	while(xQueueReceive(xQueue_Operation, &xReceiveClear, 0) == pdPASS){__NOP();}
 800511c:	e000      	b.n	8005120 <set_operation_in_queue+0x10>
 800511e:	bf00      	nop
 8005120:	4b1b      	ldr	r3, [pc, #108]	; (8005190 <set_operation_in_queue+0x80>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f107 0108 	add.w	r1, r7, #8
 8005128:	2200      	movs	r2, #0
 800512a:	4618      	mov	r0, r3
 800512c:	f001 fba2 	bl	8006874 <xQueueReceive>
 8005130:	4603      	mov	r3, r0
 8005132:	2b01      	cmp	r3, #1
 8005134:	d0f3      	beq.n	800511e <set_operation_in_queue+0xe>
	//Recorremos la lista de operaciones
	for(uint8_t i=0; i<30; i++)
 8005136:	2300      	movs	r3, #0
 8005138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800513c:	e017      	b.n	800516e <set_operation_in_queue+0x5e>
	{
		//Verificamos que la operacion en la lista no sea nula
		if(list[i].operacion != NULL_OPERATION)
 800513e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005142:	015b      	lsls	r3, r3, #5
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	4413      	add	r3, r2
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d014      	beq.n	8005178 <set_operation_in_queue+0x68>
		{
			//Agregamos configuraciones de operaciones a la cola
			xQueueSendToBack(xQueue_Operation, &list[i], 0);
 800514e:	4b10      	ldr	r3, [pc, #64]	; (8005190 <set_operation_in_queue+0x80>)
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005156:	015b      	lsls	r3, r3, #5
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	18d1      	adds	r1, r2, r3
 800515c:	2300      	movs	r3, #0
 800515e:	2200      	movs	r2, #0
 8005160:	f001 f9f8 	bl	8006554 <xQueueGenericSend>
	for(uint8_t i=0; i<30; i++)
 8005164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005168:	3301      	adds	r3, #1
 800516a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800516e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005172:	2b1d      	cmp	r3, #29
 8005174:	d9e3      	bls.n	800513e <set_operation_in_queue+0x2e>
 8005176:	e000      	b.n	800517a <set_operation_in_queue+0x6a>
		}
		else{ break;}
 8005178:	bf00      	nop
	}
	//Establecemos Event Flag para ejecutar la funcion encargada de las operaciones
	xEventGroupSetBits(xEventGroup_Execute_Operation, xBitsSet);
 800517a:	4b06      	ldr	r3, [pc, #24]	; (8005194 <set_operation_in_queue+0x84>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005180:	4618      	mov	r0, r3
 8005182:	f000 ffa9 	bl	80060d8 <xEventGroupSetBits>
}
 8005186:	bf00      	nop
 8005188:	3730      	adds	r7, #48	; 0x30
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000434 	.word	0x20000434
 8005194:	20000440 	.word	0x20000440

08005198 <straight_line>:
//------linea recta------
void straight_line(uint8_t dutty)   //a = [mm]
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	71fb      	strb	r3, [r7, #7]
	//---------Calculo parametros de la linea recta---------
	calculation_parameter_distance(&parameter_Path_Robot);
 80051a2:	486d      	ldr	r0, [pc, #436]	; (8005358 <straight_line+0x1c0>)
 80051a4:	f7fd fac0 	bl	8002728 <calculation_parameter_distance>
	//---------Configuracion coordenadas medidas---------
	//Coordenadas Globales
	parameter_Posicion_Robot.grad_grobal += parameter_Posicion_Robot.grad_relativo;
 80051a8:	4b6c      	ldr	r3, [pc, #432]	; (800535c <straight_line+0x1c4>)
 80051aa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80051ae:	4b6b      	ldr	r3, [pc, #428]	; (800535c <straight_line+0x1c4>)
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f7fb f882 	bl	80002bc <__adddf3>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4967      	ldr	r1, [pc, #412]	; (800535c <straight_line+0x1c4>)
 80051be:	e9c1 2304 	strd	r2, r3, [r1, #16]
	//Reiniciaos Coordenadas relativas
	parameter_Posicion_Robot.xr_position = parameter_Posicion_Robot.yr_position = 0;
 80051c2:	4966      	ldr	r1, [pc, #408]	; (800535c <straight_line+0x1c4>)
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80051d0:	4b62      	ldr	r3, [pc, #392]	; (800535c <straight_line+0x1c4>)
 80051d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051d6:	4961      	ldr	r1, [pc, #388]	; (800535c <straight_line+0x1c4>)
 80051d8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.phi_relativo = 0;
 80051dc:	495f      	ldr	r1, [pc, #380]	; (800535c <straight_line+0x1c4>)
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.grad_relativo = 0;
 80051ea:	495c      	ldr	r1, [pc, #368]	; (800535c <straight_line+0x1c4>)
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	e9c1 2300 	strd	r2, r3, [r1]
	ang_for_Displament_ICR = 0;
 80051f8:	4959      	ldr	r1, [pc, #356]	; (8005360 <straight_line+0x1c8>)
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	e9c1 2300 	strd	r2, r3, [r1]
	//---------Configuracion coordenadas teoricas---------
	parameter_Path_Robot.rotative_Grad_Relative = 0;
 8005206:	4b54      	ldr	r3, [pc, #336]	; (8005358 <straight_line+0x1c0>)
 8005208:	2200      	movs	r2, #0
 800520a:	639a      	str	r2, [r3, #56]	; 0x38
	//Calculos extra
	cos_cal = cos(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 800520c:	4b53      	ldr	r3, [pc, #332]	; (800535c <straight_line+0x1c4>)
 800520e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005212:	a34f      	add	r3, pc, #316	; (adr r3, 8005350 <straight_line+0x1b8>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f7fb fa06 	bl	8000628 <__aeabi_dmul>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4610      	mov	r0, r2
 8005222:	4619      	mov	r1, r3
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	4b4e      	ldr	r3, [pc, #312]	; (8005364 <straight_line+0x1cc>)
 800522a:	f7fb fb27 	bl	800087c <__aeabi_ddiv>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	ec43 2b17 	vmov	d7, r2, r3
 8005236:	eeb0 0a47 	vmov.f32	s0, s14
 800523a:	eef0 0a67 	vmov.f32	s1, s15
 800523e:	f00c f99b 	bl	8011578 <cos>
 8005242:	ec53 2b10 	vmov	r2, r3, d0
 8005246:	4610      	mov	r0, r2
 8005248:	4619      	mov	r1, r3
 800524a:	f7fb fce5 	bl	8000c18 <__aeabi_d2f>
 800524e:	4603      	mov	r3, r0
 8005250:	4a45      	ldr	r2, [pc, #276]	; (8005368 <straight_line+0x1d0>)
 8005252:	6013      	str	r3, [r2, #0]
	sin_cal = sin(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 8005254:	4b41      	ldr	r3, [pc, #260]	; (800535c <straight_line+0x1c4>)
 8005256:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800525a:	a33d      	add	r3, pc, #244	; (adr r3, 8005350 <straight_line+0x1b8>)
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	f7fb f9e2 	bl	8000628 <__aeabi_dmul>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4610      	mov	r0, r2
 800526a:	4619      	mov	r1, r3
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	4b3c      	ldr	r3, [pc, #240]	; (8005364 <straight_line+0x1cc>)
 8005272:	f7fb fb03 	bl	800087c <__aeabi_ddiv>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	ec43 2b17 	vmov	d7, r2, r3
 800527e:	eeb0 0a47 	vmov.f32	s0, s14
 8005282:	eef0 0a67 	vmov.f32	s1, s15
 8005286:	f00c fa13 	bl	80116b0 <sin>
 800528a:	ec53 2b10 	vmov	r2, r3, d0
 800528e:	4610      	mov	r0, r2
 8005290:	4619      	mov	r1, r3
 8005292:	f7fb fcc1 	bl	8000c18 <__aeabi_d2f>
 8005296:	4603      	mov	r3, r0
 8005298:	4a34      	ldr	r2, [pc, #208]	; (800536c <straight_line+0x1d4>)
 800529a:	6013      	str	r3, [r2, #0]
	//-----------------PID-------------------------
	//Establecemos valores iniciales
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 800529c:	4b34      	ldr	r3, [pc, #208]	; (8005370 <straight_line+0x1d8>)
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	60da      	str	r2, [r3, #12]
 80052a4:	4b32      	ldr	r3, [pc, #200]	; (8005370 <straight_line+0x1d8>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	4a31      	ldr	r2, [pc, #196]	; (8005370 <straight_line+0x1d8>)
 80052aa:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 80052ac:	4b30      	ldr	r3, [pc, #192]	; (8005370 <straight_line+0x1d8>)
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	609a      	str	r2, [r3, #8]
 80052b4:	4b2e      	ldr	r3, [pc, #184]	; (8005370 <straight_line+0x1d8>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4a2d      	ldr	r2, [pc, #180]	; (8005370 <straight_line+0x1d8>)
 80052ba:	6013      	str	r3, [r2, #0]
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 80052bc:	4b2d      	ldr	r3, [pc, #180]	; (8005374 <straight_line+0x1dc>)
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	60da      	str	r2, [r3, #12]
 80052c4:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <straight_line+0x1dc>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	4a2a      	ldr	r2, [pc, #168]	; (8005374 <straight_line+0x1dc>)
 80052ca:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 80052cc:	4b29      	ldr	r3, [pc, #164]	; (8005374 <straight_line+0x1dc>)
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	609a      	str	r2, [r3, #8]
 80052d4:	4b27      	ldr	r3, [pc, #156]	; (8005374 <straight_line+0x1dc>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	4a26      	ldr	r2, [pc, #152]	; (8005374 <straight_line+0x1dc>)
 80052da:	6013      	str	r3, [r2, #0]
	parameter_PID_distace.e = parameter_PID_distace.e_prev = parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 80052dc:	4b26      	ldr	r3, [pc, #152]	; (8005378 <straight_line+0x1e0>)
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	609a      	str	r2, [r3, #8]
 80052e4:	4b24      	ldr	r3, [pc, #144]	; (8005378 <straight_line+0x1e0>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4a23      	ldr	r2, [pc, #140]	; (8005378 <straight_line+0x1e0>)
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	4b22      	ldr	r3, [pc, #136]	; (8005378 <straight_line+0x1e0>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a21      	ldr	r2, [pc, #132]	; (8005378 <straight_line+0x1e0>)
 80052f2:	60d3      	str	r3, [r2, #12]
 80052f4:	4b20      	ldr	r3, [pc, #128]	; (8005378 <straight_line+0x1e0>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a1f      	ldr	r2, [pc, #124]	; (8005378 <straight_line+0x1e0>)
 80052fa:	6053      	str	r3, [r2, #4]
	//-------------Configruacion Modo--------------
	//Definimos el dutty inicial
	handler_Motor_L.configMotor.new_dutty = duttySetPoint;
 80052fc:	4b1f      	ldr	r3, [pc, #124]	; (800537c <straight_line+0x1e4>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	ee07 3a90 	vmov	s15, r3
 8005304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005308:	4b19      	ldr	r3, [pc, #100]	; (8005370 <straight_line+0x1d8>)
 800530a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	handler_Motor_R.configMotor.new_dutty = duttySetPoint;
 800530e:	4b1b      	ldr	r3, [pc, #108]	; (800537c <straight_line+0x1e4>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531a:	4b16      	ldr	r3, [pc, #88]	; (8005374 <straight_line+0x1dc>)
 800531c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	//Reiniciamos variables
	counting_action = 0;
 8005320:	4b17      	ldr	r3, [pc, #92]	; (8005380 <straight_line+0x1e8>)
 8005322:	2200      	movs	r2, #0
 8005324:	801a      	strh	r2, [r3, #0]
	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(1, dutty, dutty);
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	ee07 3a90 	vmov	s15, r3
 800532c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	ee07 3a10 	vmov	s14, r3
 8005336:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800533a:	eef0 0a47 	vmov.f32	s1, s14
 800533e:	eeb0 0a67 	vmov.f32	s0, s15
 8005342:	2001      	movs	r0, #1
 8005344:	f000 f85a 	bl	80053fc <config_mode>
}
 8005348:	bf00      	nop
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	54442d18 	.word	0x54442d18
 8005354:	400921fb 	.word	0x400921fb
 8005358:	20008de8 	.word	0x20008de8
 800535c:	20008e68 	.word	0x20008e68
 8005360:	20008e58 	.word	0x20008e58
 8005364:	40668000 	.word	0x40668000
 8005368:	20008e50 	.word	0x20008e50
 800536c:	20008e54 	.word	0x20008e54
 8005370:	20000358 	.word	0x20000358
 8005374:	200002e4 	.word	0x200002e4
 8005378:	200003cc 	.word	0x200003cc
 800537c:	20000018 	.word	0x20000018
 8005380:	200003ea 	.word	0x200003ea

08005384 <turn_itself>:
//---------Giro sobre si mismo---------
void turn_itself(int16_t turn_grad)     //a = [grados], b = direccion giro
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	80fb      	strh	r3, [r7, #6]
	//-------------Configruacion Modo--------------
	//Definicion del angulo de giro
	parameter_Path_Robot.rotative_Grad += parameter_Path_Robot.rotative_Grad_Relative += turn_grad;
 800538e:	4b17      	ldr	r3, [pc, #92]	; (80053ec <turn_itself+0x68>)
 8005390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005396:	4413      	add	r3, r2
 8005398:	4a14      	ldr	r2, [pc, #80]	; (80053ec <turn_itself+0x68>)
 800539a:	6393      	str	r3, [r2, #56]	; 0x38
 800539c:	4b13      	ldr	r3, [pc, #76]	; (80053ec <turn_itself+0x68>)
 800539e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a0:	4b12      	ldr	r3, [pc, #72]	; (80053ec <turn_itself+0x68>)
 80053a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a4:	4413      	add	r3, r2
 80053a6:	4a11      	ldr	r2, [pc, #68]	; (80053ec <turn_itself+0x68>)
 80053a8:	63d3      	str	r3, [r2, #60]	; 0x3c
	//Cambiamso la direccion del motor
	if(turn_grad<0)
 80053aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	da08      	bge.n	80053c4 <turn_itself+0x40>
	{
		//Seleccionamos el motor derecho
		handler_Motor_Execute = &handler_Motor_R;
 80053b2:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <turn_itself+0x6c>)
 80053b4:	4a0f      	ldr	r2, [pc, #60]	; (80053f4 <turn_itself+0x70>)
 80053b6:	601a      	str	r2, [r3, #0]
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 80053b8:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <turn_itself+0x6c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fc ffbc 	bl	800233a <updateDirMotor>
 80053c2:	e007      	b.n	80053d4 <turn_itself+0x50>
	}
	else
	{
		//Seleccionamos el motor izquierdo
		handler_Motor_Execute = &handler_Motor_L;
 80053c4:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <turn_itself+0x6c>)
 80053c6:	4a0c      	ldr	r2, [pc, #48]	; (80053f8 <turn_itself+0x74>)
 80053c8:	601a      	str	r2, [r3, #0]
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 80053ca:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <turn_itself+0x6c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fc ffb3 	bl	800233a <updateDirMotor>
	}

	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(2,24,25);
 80053d4:	eef3 0a09 	vmov.f32	s1, #57	; 0x41c80000  25.0
 80053d8:	eeb3 0a08 	vmov.f32	s0, #56	; 0x41c00000  24.0
 80053dc:	2002      	movs	r0, #2
 80053de:	f000 f80d 	bl	80053fc <config_mode>
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20008de8 	.word	0x20008de8
 80053f0:	20008de4 	.word	0x20008de4
 80053f4:	200002e4 	.word	0x200002e4
 80053f8:	20000358 	.word	0x20000358

080053fc <config_mode>:
//Configuracion del modo
void config_mode(uint8_t status, float dutty_L, float dutty_R)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	ed87 0a02 	vstr	s0, [r7, #8]
 8005408:	edc7 0a01 	vstr	s1, [r7, #4]
 800540c:	73fb      	strb	r3, [r7, #15]
	//Especificar el modo de operacion por medio de una Mailbox
	xQueueOverwrite(xMailbox_Mode, &status);
 800540e:	4b10      	ldr	r3, [pc, #64]	; (8005450 <config_mode+0x54>)
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	f107 010f 	add.w	r1, r7, #15
 8005416:	2302      	movs	r3, #2
 8005418:	2200      	movs	r2, #0
 800541a:	f001 f89b 	bl	8006554 <xQueueGenericSend>
	//Cargamos la configuracion
	config_motor(dutty_L, dutty_R, frequency_PWM_Motor); //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
 800541e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005422:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005426:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <config_mode+0x58>)
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005432:	eef0 0a67 	vmov.f32	s1, s15
 8005436:	ed97 0a01 	vldr	s0, [r7, #4]
 800543a:	ee17 0a10 	vmov	r0, s14
 800543e:	f000 f905 	bl	800564c <config_motor>
	//Iniciamos los motores
	status_motor(SET);
 8005442:	2001      	movs	r0, #1
 8005444:	f000 f88a 	bl	800555c <status_motor>
}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20000438 	.word	0x20000438
 8005454:	20000016 	.word	0x20000016

08005458 <init_coordinates>:
//Reinicio de coordenadas
void init_coordinates(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
	//Reinicio de varibable
	ang_for_Displament_ICR = 0;
 800545c:	493b      	ldr	r1, [pc, #236]	; (800554c <init_coordinates+0xf4>)
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	e9c1 2300 	strd	r2, r3, [r1]
	ang_complementary = 0;
 800546a:	4939      	ldr	r1, [pc, #228]	; (8005550 <init_coordinates+0xf8>)
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	e9c1 2300 	strd	r2, r3, [r1]
	//Reinicio de parametros de la structura de la posicion del robot
	parameter_Posicion_Robot.grad_grobal = 0; parameter_Posicion_Robot.grad_relativo = 0; parameter_Posicion_Robot.phi_relativo = 0;
 8005478:	4936      	ldr	r1, [pc, #216]	; (8005554 <init_coordinates+0xfc>)
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005486:	4933      	ldr	r1, [pc, #204]	; (8005554 <init_coordinates+0xfc>)
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	e9c1 2300 	strd	r2, r3, [r1]
 8005494:	492f      	ldr	r1, [pc, #188]	; (8005554 <init_coordinates+0xfc>)
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.xg_position = 0; parameter_Posicion_Robot.xg_position_inicial = 0; parameter_Posicion_Robot.xr_position = 0;
 80054a2:	492c      	ldr	r1, [pc, #176]	; (8005554 <init_coordinates+0xfc>)
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80054b0:	4928      	ldr	r1, [pc, #160]	; (8005554 <init_coordinates+0xfc>)
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80054be:	4925      	ldr	r1, [pc, #148]	; (8005554 <init_coordinates+0xfc>)
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.yg_position = 0; parameter_Posicion_Robot.yg_position_inicial = 0; parameter_Posicion_Robot.yr_position = 0;
 80054cc:	4921      	ldr	r1, [pc, #132]	; (8005554 <init_coordinates+0xfc>)
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80054da:	491e      	ldr	r1, [pc, #120]	; (8005554 <init_coordinates+0xfc>)
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80054e8:	491a      	ldr	r1, [pc, #104]	; (8005554 <init_coordinates+0xfc>)
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Reinicio de parametros de la structura de path
	parameter_Path_Robot.goal_Position_x = 0; parameter_Path_Robot.goal_Position_y = 0;
 80054f6:	4918      	ldr	r1, [pc, #96]	; (8005558 <init_coordinates+0x100>)
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8005504:	4914      	ldr	r1, [pc, #80]	; (8005558 <init_coordinates+0x100>)
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	parameter_Path_Robot.line_Distance = 0;
 8005512:	4b11      	ldr	r3, [pc, #68]	; (8005558 <init_coordinates+0x100>)
 8005514:	2200      	movs	r2, #0
 8005516:	641a      	str	r2, [r3, #64]	; 0x40
	parameter_Path_Robot.rotative_Grad = 0; parameter_Path_Robot.rotative_Grad_Relative = 0;
 8005518:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <init_coordinates+0x100>)
 800551a:	2200      	movs	r2, #0
 800551c:	63da      	str	r2, [r3, #60]	; 0x3c
 800551e:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <init_coordinates+0x100>)
 8005520:	2200      	movs	r2, #0
 8005522:	639a      	str	r2, [r3, #56]	; 0x38
	parameter_Path_Robot.start_position_x = 0; parameter_Path_Robot.start_position_y = 0;
 8005524:	490c      	ldr	r1, [pc, #48]	; (8005558 <init_coordinates+0x100>)
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8005532:	4909      	ldr	r1, [pc, #36]	; (8005558 <init_coordinates+0x100>)
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8005540:	bf00      	nop
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	20008e58 	.word	0x20008e58
 8005550:	20008e60 	.word	0x20008e60
 8005554:	20008e68 	.word	0x20008e68
 8005558:	20008de8 	.word	0x20008de8

0800555c <status_motor>:
//-----------------------------Fin de la definicio de funciones del modo--------------------------------------------


//----------------------Iinicio definicion de las funciones de la Operacion Motor---------------------------------
void status_motor(uint8_t status)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	71fb      	strb	r3, [r7, #7]
	//Variable de modo
	uint8_t mode = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
	//Deacuerdo al estado
	if(status == SET)
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d135      	bne.n	80055dc <status_motor+0x80>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8005570:	4b32      	ldr	r3, [pc, #200]	; (800563c <status_motor+0xe0>)
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	2101      	movs	r1, #1
 8005576:	4618      	mov	r0, r3
 8005578:	f006 f894 	bl	800b6a4 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 800557c:	4b30      	ldr	r3, [pc, #192]	; (8005640 <status_motor+0xe4>)
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	2101      	movs	r1, #1
 8005582:	4618      	mov	r0, r3
 8005584:	f006 f88e 	bl	800b6a4 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 8005588:	4b2c      	ldr	r3, [pc, #176]	; (800563c <status_motor+0xe0>)
 800558a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800558c:	4b2b      	ldr	r3, [pc, #172]	; (800563c <status_motor+0xe0>)
 800558e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	b2db      	uxtb	r3, r3
 8005598:	4619      	mov	r1, r3
 800559a:	4610      	mov	r0, r2
 800559c:	f005 fc26 	bl	800adec <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 80055a0:	4b27      	ldr	r3, [pc, #156]	; (8005640 <status_motor+0xe4>)
 80055a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a4:	4b26      	ldr	r3, [pc, #152]	; (8005640 <status_motor+0xe4>)
 80055a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f005 fc1a 	bl	800adec <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 80055b8:	4b20      	ldr	r3, [pc, #128]	; (800563c <status_motor+0xe0>)
 80055ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055bc:	2100      	movs	r1, #0
 80055be:	4618      	mov	r0, r3
 80055c0:	f005 fc14 	bl	800adec <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 80055c4:	4b1e      	ldr	r3, [pc, #120]	; (8005640 <status_motor+0xe4>)
 80055c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c8:	2100      	movs	r1, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	f005 fc0e 	bl	800adec <GPIO_writePin>
		//Reanudamos la Tarea
		vTaskResume(xHandleTask_Measure);
 80055d0:	4b1c      	ldr	r3, [pc, #112]	; (8005644 <status_motor+0xe8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 ff77 	bl	80074c8 <vTaskResume>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Especificar el modo de operacion por medio de una Mailbox
		xQueueOverwrite(xMailbox_Mode, &mode);
	}
}
 80055da:	e02b      	b.n	8005634 <status_motor+0xd8>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 80055dc:	4b17      	ldr	r3, [pc, #92]	; (800563c <status_motor+0xe0>)
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	2100      	movs	r1, #0
 80055e2:	4618      	mov	r0, r3
 80055e4:	f006 f85e 	bl	800b6a4 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 80055e8:	4b15      	ldr	r3, [pc, #84]	; (8005640 <status_motor+0xe4>)
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	2100      	movs	r1, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	f006 f858 	bl	800b6a4 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 80055f4:	4b11      	ldr	r3, [pc, #68]	; (800563c <status_motor+0xe0>)
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	2100      	movs	r1, #0
 80055fa:	4618      	mov	r0, r3
 80055fc:	f005 fbf6 	bl	800adec <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 8005600:	4b0f      	ldr	r3, [pc, #60]	; (8005640 <status_motor+0xe4>)
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	2100      	movs	r1, #0
 8005606:	4618      	mov	r0, r3
 8005608:	f005 fbf0 	bl	800adec <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <status_motor+0xe0>)
 800560e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005610:	2101      	movs	r1, #1
 8005612:	4618      	mov	r0, r3
 8005614:	f005 fbea 	bl	800adec <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 8005618:	4b09      	ldr	r3, [pc, #36]	; (8005640 <status_motor+0xe4>)
 800561a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561c:	2101      	movs	r1, #1
 800561e:	4618      	mov	r0, r3
 8005620:	f005 fbe4 	bl	800adec <GPIO_writePin>
		xQueueOverwrite(xMailbox_Mode, &mode);
 8005624:	4b08      	ldr	r3, [pc, #32]	; (8005648 <status_motor+0xec>)
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	f107 010f 	add.w	r1, r7, #15
 800562c:	2302      	movs	r3, #2
 800562e:	2200      	movs	r2, #0
 8005630:	f000 ff90 	bl	8006554 <xQueueGenericSend>
}
 8005634:	bf00      	nop
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20000358 	.word	0x20000358
 8005640:	200002e4 	.word	0x200002e4
 8005644:	20000404 	.word	0x20000404
 8005648:	20000438 	.word	0x20000438

0800564c <config_motor>:
//Funcion para al configuracion de los motores
void config_motor(int firth, float second, float third)  //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	ed87 0a02 	vstr	s0, [r7, #8]
 8005658:	edc7 0a01 	vstr	s1, [r7, #4]
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 800565c:	4b15      	ldr	r3, [pc, #84]	; (80056b4 <config_motor+0x68>)
 800565e:	2200      	movs	r2, #0
 8005660:	839a      	strh	r2, [r3, #28]
	handler_Motor_L.parametersMotor.count = 0;
 8005662:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <config_motor+0x6c>)
 8005664:	2200      	movs	r2, #0
 8005666:	839a      	strh	r2, [r3, #28]
	//Actualizamos el valor del dutty y frecuencia
	float value_period = 100000/third;
 8005668:	eddf 6a14 	vldr	s13, [pc, #80]	; 80056bc <config_motor+0x70>
 800566c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005674:	edc7 7a05 	vstr	s15, [r7, #20]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 8005678:	edd7 7a05 	vldr	s15, [r7, #20]
 800567c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005680:	ee17 3a90 	vmov	r3, s15
 8005684:	b29b      	uxth	r3, r3
 8005686:	4619      	mov	r1, r3
 8005688:	480d      	ldr	r0, [pc, #52]	; (80056c0 <config_motor+0x74>)
 800568a:	f004 f8e3 	bl	8009854 <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, second);
 800568e:	ed97 0a02 	vldr	s0, [r7, #8]
 8005692:	4808      	ldr	r0, [pc, #32]	; (80056b4 <config_motor+0x68>)
 8005694:	f7fc fe3a 	bl	800230c <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, firth);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056a2:	eeb0 0a67 	vmov.f32	s0, s15
 80056a6:	4804      	ldr	r0, [pc, #16]	; (80056b8 <config_motor+0x6c>)
 80056a8:	f7fc fe30 	bl	800230c <updateDuttyMotor>
}
 80056ac:	bf00      	nop
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	200002e4 	.word	0x200002e4
 80056b8:	20000358 	.word	0x20000358
 80056bc:	47c35000 	.word	0x47c35000
 80056c0:	2000039c 	.word	0x2000039c

080056c4 <PID_simple>:



//----------------------------Inicio de la definicion de las funciones para el PID-----------------------------------------
void PID_simple(Parameters_PID_t *ptrPIDHandler, float timer, float setpoint, float measure)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80056d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80056d4:	ed87 1a00 	vstr	s2, [r7]
	//Calculo del error
	ptrPIDHandler->e = setpoint-measure;
 80056d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80056dc:	edd7 7a00 	vldr	s15, [r7]
 80056e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float pro =  ptrPIDHandler->kp*ptrPIDHandler->e;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80056f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fa:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->e_intel +=  ptrPIDHandler->e*timer;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	ed93 7a02 	vldr	s14, [r3, #8]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	edd3 6a01 	vldr	s13, [r3, #4]
 800570a:	edd7 7a02 	vldr	s15, [r7, #8]
 800570e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	edc3 7a02 	vstr	s15, [r3, #8]
	float deriv =  ptrPIDHandler->kd*(ptrPIDHandler->e - ptrPIDHandler->e_prev)/timer;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	ed93 7a06 	vldr	s14, [r3, #24]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	edd3 6a01 	vldr	s13, [r3, #4]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	edd3 7a03 	vldr	s15, [r3, #12]
 800572e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005732:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005736:	ed97 7a02 	vldr	s14, [r7, #8]
 800573a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800573e:	edc7 7a04 	vstr	s15, [r7, #16]
	ptrPIDHandler->u =  pro + ptrPIDHandler->ki*ptrPIDHandler->e_intel + deriv;        //Ley del controlador PID discreto
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	ed93 7a05 	vldr	s14, [r3, #20]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	edd3 7a02 	vldr	s15, [r3, #8]
 800574e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005752:	edd7 7a05 	vldr	s15, [r7, #20]
 8005756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800575a:	edd7 7a04 	vldr	s15, [r7, #16]
 800575e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	edc3 7a00 	vstr	s15, [r3]
     //Retorno a los valores reales
	ptrPIDHandler->e_prev = ptrPIDHandler->e;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	60da      	str	r2, [r3, #12]
}
 8005770:	bf00      	nop
 8005772:	371c      	adds	r7, #28
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <correction>:

void correction(Motor_Handler_t *ptrMotorHandler)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	//Definimos variables auxiliares
	float port_dutty = 0;
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
	//Guardamos valor
	port_dutty = ptrMotorHandler->configMotor.new_dutty;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	60fb      	str	r3, [r7, #12]
    //Saturo el porcentaje de dutty en un tope maximo y minimo
    if (port_dutty >= 60) { port_dutty = 60; }
 8005790:	edd7 7a03 	vldr	s15, [r7, #12]
 8005794:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80057ec <correction+0x70>
 8005798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800579c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a0:	db02      	blt.n	80057a8 <correction+0x2c>
 80057a2:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <correction+0x74>)
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	e018      	b.n	80057da <correction+0x5e>
    else if(port_dutty <= duttySetPoint-5) { port_dutty = duttySetPoint-5; }
 80057a8:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <correction+0x78>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	3b05      	subs	r3, #5
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80057ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c2:	d809      	bhi.n	80057d8 <correction+0x5c>
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <correction+0x78>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	3b05      	subs	r3, #5
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057d2:	edc7 7a03 	vstr	s15, [r7, #12]
 80057d6:	e000      	b.n	80057da <correction+0x5e>
    else{ __NOP();}
 80057d8:	bf00      	nop

    //Actualizamoe el valor del dutty
    updateDuttyMotor(ptrMotorHandler, port_dutty);
 80057da:	ed97 0a03 	vldr	s0, [r7, #12]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fc fd94 	bl	800230c <updateDuttyMotor>
}
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	42700000 	.word	0x42700000
 80057f0:	42700000 	.word	0x42700000
 80057f4:	20000018 	.word	0x20000018

080057f8 <Separate_parameters>:



//Funcion para separar los diferentes parametros del string
uint8_t Separate_parameters(item_A_Star_t* ptritem, char *parameter_string)
{
 80057f8:	b590      	push	{r4, r7, lr}
 80057fa:	b08b      	sub	sp, #44	; 0x2c
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  //Definicion de variables
  char buffercharSeparate[10];
  uint8_t index_charSeparate = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t flag_Separate = 0;
 8005808:	2300      	movs	r3, #0
 800580a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t status_parameter = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t index_init_Grid_map = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t findStart = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t findGoal = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  //---------------Definicion de los parametros iniciales---------------
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 8005826:	2300      	movs	r3, #0
 8005828:	843b      	strh	r3, [r7, #32]
 800582a:	e087      	b.n	800593c <Separate_parameters+0x144>
  {
    //Verificacion del estado
    if(status_parameter<3)
 800582c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005830:	2b02      	cmp	r3, #2
 8005832:	d876      	bhi.n	8005922 <Separate_parameters+0x12a>
    {
      //Busqueda de la separacion dentro del string
      if (parameter_string[i] == ':')
 8005834:	8c3b      	ldrh	r3, [r7, #32]
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	4413      	add	r3, r2
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b3a      	cmp	r3, #58	; 0x3a
 800583e:	d10d      	bne.n	800585c <Separate_parameters+0x64>
      {
        buffercharSeparate[index_charSeparate] = '\0';
 8005840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005844:	3328      	adds	r3, #40	; 0x28
 8005846:	443b      	add	r3, r7
 8005848:	2200      	movs	r2, #0
 800584a:	f803 2c20 	strb.w	r2, [r3, #-32]
        index_charSeparate = 0;
 800584e:	2300      	movs	r3, #0
 8005850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        flag_Separate = 1;
 8005854:	2301      	movs	r3, #1
 8005856:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800585a:	e00e      	b.n	800587a <Separate_parameters+0x82>
      }
      else
      {
        buffercharSeparate[index_charSeparate] = parameter_string[i];
 800585c:	8c3b      	ldrh	r3, [r7, #32]
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	441a      	add	r2, r3
 8005862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005866:	7812      	ldrb	r2, [r2, #0]
 8005868:	3328      	adds	r3, #40	; 0x28
 800586a:	443b      	add	r3, r7
 800586c:	f803 2c20 	strb.w	r2, [r3, #-32]
        index_charSeparate++;
 8005870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005874:	3301      	adds	r3, #1
 8005876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      //Si la bandera se levanta se asigna el valor correspondiente al parametro
      if(flag_Separate == 1)
 800587a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800587e:	2b01      	cmp	r3, #1
 8005880:	d153      	bne.n	800592a <Separate_parameters+0x132>
      {
        switch(status_parameter)
 8005882:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005886:	2b02      	cmp	r3, #2
 8005888:	d024      	beq.n	80058d4 <Separate_parameters+0xdc>
 800588a:	2b02      	cmp	r3, #2
 800588c:	dc40      	bgt.n	8005910 <Separate_parameters+0x118>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <Separate_parameters+0xa0>
 8005892:	2b01      	cmp	r3, #1
 8005894:	d00f      	beq.n	80058b6 <Separate_parameters+0xbe>
 8005896:	e03b      	b.n	8005910 <Separate_parameters+0x118>
        {
          case 0:
          {
        	//Convertimos valor y lo almacenamos
        	ptritem->grid_map_row = atoi(buffercharSeparate);
 8005898:	f107 0308 	add.w	r3, r7, #8
 800589c:	4618      	mov	r0, r3
 800589e:	f006 fd78 	bl	800c392 <atoi>
 80058a2:	4603      	mov	r3, r0
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	701a      	strb	r2, [r3, #0]
            //Verificacion parametros mal enviados
            if(ptritem->grid_map_row>20){ return SGMFALSE; }
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b14      	cmp	r3, #20
 80058b0:	d92b      	bls.n	800590a <Separate_parameters+0x112>
 80058b2:	2300      	movs	r3, #0
 80058b4:	e10b      	b.n	8005ace <Separate_parameters+0x2d6>
            break;
          }
          case 1:
          {
          	//Convertimos valor y lo almacenamos
        	ptritem->grid_map_colum = atoi(buffercharSeparate);
 80058b6:	f107 0308 	add.w	r3, r7, #8
 80058ba:	4618      	mov	r0, r3
 80058bc:	f006 fd69 	bl	800c392 <atoi>
 80058c0:	4603      	mov	r3, r0
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	705a      	strb	r2, [r3, #1]
            //Verificacion parametros mal enviados
            if(ptritem->grid_map_colum>20){ return SGMFALSE; }
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b14      	cmp	r3, #20
 80058ce:	d91e      	bls.n	800590e <Separate_parameters+0x116>
 80058d0:	2300      	movs	r3, #0
 80058d2:	e0fc      	b.n	8005ace <Separate_parameters+0x2d6>
            break;
          }
          case 2:
          {
            //Convertimos valor y lo almacenamos
        	ptritem->cell_separation = atof(buffercharSeparate);
 80058d4:	f107 0308 	add.w	r3, r7, #8
 80058d8:	4618      	mov	r0, r3
 80058da:	f006 fd57 	bl	800c38c <atof>
 80058de:	ec53 2b10 	vmov	r2, r3, d0
 80058e2:	4610      	mov	r0, r2
 80058e4:	4619      	mov	r1, r3
 80058e6:	f7fb f997 	bl	8000c18 <__aeabi_d2f>
 80058ea:	4602      	mov	r2, r0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	605a      	str	r2, [r3, #4]
            //Verificacion parametros mal enviados
            if(ptritem->cell_separation>100){ return SGMFALSE; }
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80058f6:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8005ad8 <Separate_parameters+0x2e0>
 80058fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005902:	dc00      	bgt.n	8005906 <Separate_parameters+0x10e>
            break;
 8005904:	e004      	b.n	8005910 <Separate_parameters+0x118>
            if(ptritem->cell_separation>100){ return SGMFALSE; }
 8005906:	2300      	movs	r3, #0
 8005908:	e0e1      	b.n	8005ace <Separate_parameters+0x2d6>
            break;
 800590a:	bf00      	nop
 800590c:	e000      	b.n	8005910 <Separate_parameters+0x118>
            break;
 800590e:	bf00      	nop
          }
        }
        //Aumentamos y reiniciamos bandera
        status_parameter++;
 8005910:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005914:	3301      	adds	r3, #1
 8005916:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        flag_Separate = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005920:	e003      	b.n	800592a <Separate_parameters+0x132>
      }
    }
    else
    {
      index_init_Grid_map = i;
 8005922:	8c3b      	ldrh	r3, [r7, #32]
 8005924:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      break;
 8005928:	e00f      	b.n	800594a <Separate_parameters+0x152>
    }
    //Verificacion parametros mal enviados
    if(index_charSeparate>5){ return SGMFALSE; }
 800592a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800592e:	2b05      	cmp	r3, #5
 8005930:	d901      	bls.n	8005936 <Separate_parameters+0x13e>
 8005932:	2300      	movs	r3, #0
 8005934:	e0cb      	b.n	8005ace <Separate_parameters+0x2d6>
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 8005936:	8c3b      	ldrh	r3, [r7, #32]
 8005938:	3301      	adds	r3, #1
 800593a:	843b      	strh	r3, [r7, #32]
 800593c:	8c3b      	ldrh	r3, [r7, #32]
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	4413      	add	r3, r2
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	f47f af71 	bne.w	800582c <Separate_parameters+0x34>
  }
  //---------------transformacion del string grid map en un array---------------
  //Variables para los indices
  uint8_t index_row = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	77fb      	strb	r3, [r7, #31]
  uint8_t index_col = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	77bb      	strb	r3, [r7, #30]

  //Separacion de cada caracter
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 8005952:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005956:	83bb      	strh	r3, [r7, #28]
 8005958:	e031      	b.n	80059be <Separate_parameters+0x1c6>
  {
    if (parameter_string[i] == ';')
 800595a:	8bbb      	ldrh	r3, [r7, #28]
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	4413      	add	r3, r2
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b3b      	cmp	r3, #59	; 0x3b
 8005964:	d10b      	bne.n	800597e <Separate_parameters+0x186>
    {
      //Se aumenta el indice de la fila y se reinicia el indice de la columna
      index_row++;
 8005966:	7ffb      	ldrb	r3, [r7, #31]
 8005968:	3301      	adds	r3, #1
 800596a:	77fb      	strb	r3, [r7, #31]
      index_col = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	77bb      	strb	r3, [r7, #30]
      //Verificacion parametros mal enviados
      if(index_row>ptritem->grid_map_row){ return SGMFALSE; }
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	7ffa      	ldrb	r2, [r7, #31]
 8005976:	429a      	cmp	r2, r3
 8005978:	d91e      	bls.n	80059b8 <Separate_parameters+0x1c0>
 800597a:	2300      	movs	r3, #0
 800597c:	e0a7      	b.n	8005ace <Separate_parameters+0x2d6>
    }
    else
    {
      //Se guarda el caracter
      ptritem->grid_map[index_row][index_col].feature = parameter_string[i];
 800597e:	8bbb      	ldrh	r3, [r7, #28]
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	441a      	add	r2, r3
 8005984:	7ffb      	ldrb	r3, [r7, #31]
 8005986:	7fb9      	ldrb	r1, [r7, #30]
 8005988:	7814      	ldrb	r4, [r2, #0]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	2058      	movs	r0, #88	; 0x58
 800598e:	fb00 f101 	mul.w	r1, r0, r1
 8005992:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8005996:	fb00 f303 	mul.w	r3, r0, r3
 800599a:	440b      	add	r3, r1
 800599c:	4413      	add	r3, r2
 800599e:	3364      	adds	r3, #100	; 0x64
 80059a0:	4622      	mov	r2, r4
 80059a2:	701a      	strb	r2, [r3, #0]
      //se aumenta el indice de la columna
      index_col++;
 80059a4:	7fbb      	ldrb	r3, [r7, #30]
 80059a6:	3301      	adds	r3, #1
 80059a8:	77bb      	strb	r3, [r7, #30]
      //Verificacion parametros mal enviados
      if(index_col>ptritem->grid_map_colum){ return SGMFALSE; }
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	785b      	ldrb	r3, [r3, #1]
 80059ae:	7fba      	ldrb	r2, [r7, #30]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d901      	bls.n	80059b8 <Separate_parameters+0x1c0>
 80059b4:	2300      	movs	r3, #0
 80059b6:	e08a      	b.n	8005ace <Separate_parameters+0x2d6>
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 80059b8:	8bbb      	ldrh	r3, [r7, #28]
 80059ba:	3301      	adds	r3, #1
 80059bc:	83bb      	strh	r3, [r7, #28]
 80059be:	8bbb      	ldrh	r3, [r7, #28]
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	4413      	add	r3, r2
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1c7      	bne.n	800595a <Separate_parameters+0x162>
    }
  }
  //---------------Definicion del start y del goal---------------
  //Recorremo el array creado para encontrar la posicion de los objetivos
  for(int i = 0; i < ptritem->grid_map_row; i++)
 80059ca:	2300      	movs	r3, #0
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	e06d      	b.n	8005aac <Separate_parameters+0x2b4>
  {
    for(int j = 0; j < ptritem->grid_map_colum; j++)
 80059d0:	2300      	movs	r3, #0
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	e061      	b.n	8005a9a <Separate_parameters+0x2a2>
    {
      if(ptritem->grid_map[i][j].feature == 'S')
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6979      	ldr	r1, [r7, #20]
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2058      	movs	r0, #88	; 0x58
 80059de:	fb00 f101 	mul.w	r1, r0, r1
 80059e2:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 80059e6:	fb00 f303 	mul.w	r3, r0, r3
 80059ea:	440b      	add	r3, r1
 80059ec:	4413      	add	r3, r2
 80059ee:	3364      	adds	r3, #100	; 0x64
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b53      	cmp	r3, #83	; 0x53
 80059f4:	d11f      	bne.n	8005a36 <Separate_parameters+0x23e>
      {
        //Definimos su posicion
    	ptritem->start_x = j*ptritem->cell_separation;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	ee07 3a90 	vmov	s15, r3
 80059fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	edc3 7a02 	vstr	s15, [r3, #8]
    	ptritem->start_y = i*ptritem->cell_separation;
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	edc3 7a03 	vstr	s15, [r3, #12]
    	//Aumentamos valor
    	findStart++;
 8005a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a2e:	3301      	adds	r3, #1
 8005a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a34:	e02e      	b.n	8005a94 <Separate_parameters+0x29c>
      }
      else if (ptritem->grid_map[i][j].feature == 'G')
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6979      	ldr	r1, [r7, #20]
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2058      	movs	r0, #88	; 0x58
 8005a3e:	fb00 f101 	mul.w	r1, r0, r1
 8005a42:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8005a46:	fb00 f303 	mul.w	r3, r0, r3
 8005a4a:	440b      	add	r3, r1
 8005a4c:	4413      	add	r3, r2
 8005a4e:	3364      	adds	r3, #100	; 0x64
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b47      	cmp	r3, #71	; 0x47
 8005a54:	d11e      	bne.n	8005a94 <Separate_parameters+0x29c>
      {
		  //Definimos su posicion
		  ptritem->goal_x= j*ptritem->cell_separation;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	ee07 3a90 	vmov	s15, r3
 8005a5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	edc3 7a04 	vstr	s15, [r3, #16]
		  ptritem->goal_y= i*ptritem->cell_separation;
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	edc3 7a05 	vstr	s15, [r3, #20]
		  //Aumentamos valor
		  findGoal++;
 8005a8a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005a8e:	3301      	adds	r3, #1
 8005a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    for(int j = 0; j < ptritem->grid_map_colum; j++)
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	3301      	adds	r3, #1
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	785b      	ldrb	r3, [r3, #1]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	db97      	blt.n	80059d6 <Separate_parameters+0x1de>
  for(int i = 0; i < ptritem->grid_map_row; i++)
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	61bb      	str	r3, [r7, #24]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	db8b      	blt.n	80059d0 <Separate_parameters+0x1d8>
      }
    }
  }
  /*Si el codigo llego hasta aqui falta un ultima verificacion, con lo cual
  se envia un TRUE o FALSe*/
  if(findStart==1 && findGoal==1){ return SGMTRUE;}
 8005ab8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d105      	bne.n	8005acc <Separate_parameters+0x2d4>
 8005ac0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <Separate_parameters+0x2d4>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <Separate_parameters+0x2d6>
  else{ return SGMFALSE; }
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	372c      	adds	r7, #44	; 0x2c
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd90      	pop	{r4, r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	42c80000 	.word	0x42c80000

08005adc <send_path>:


//Funcion para imprimir la ruta encontrada
void send_path(file_cell_t *file_cell, Cell_map_t array_string[20][20], uint8_t row, uint8_t colum)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b090      	sub	sp, #64	; 0x40
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	461a      	mov	r2, r3
 8005aea:	460b      	mov	r3, r1
 8005aec:	71fb      	strb	r3, [r7, #7]
 8005aee:	4613      	mov	r3, r2
 8005af0:	71bb      	strb	r3, [r7, #6]
  //Variables
  uint8_t index = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  char buffermsg[25] = {0};
 8005af8:	2300      	movs	r3, #0
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	f107 031c 	add.w	r3, r7, #28
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	605a      	str	r2, [r3, #4]
 8005b06:	609a      	str	r2, [r3, #8]
 8005b08:	60da      	str	r2, [r3, #12]
 8005b0a:	611a      	str	r2, [r3, #16]
 8005b0c:	751a      	strb	r2, [r3, #20]
  char *ptrmsg = buffermsg;
 8005b0e:	f107 0318 	add.w	r3, r7, #24
 8005b12:	617b      	str	r3, [r7, #20]

  //Cambiamos los caracteres de la malla de strings por caracteres que indican la ruta establecida con A Star
  while(1)
  {
	if(file_cell->ptrCell_parent[index] != NULL)
 8005b14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d022      	beq.n	8005b6a <send_path+0x8e>
	{
	   array_string[file_cell->ptrCell_parent[index]->index_row][file_cell->ptrCell_parent[index]->index_col].feature = '+';
 8005b24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	789b      	ldrb	r3, [r3, #2]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8005b38:	fb02 f303 	mul.w	r3, r2, r3
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	441a      	add	r2, r3
 8005b40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b44:	68f9      	ldr	r1, [r7, #12]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	78db      	ldrb	r3, [r3, #3]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	2358      	movs	r3, #88	; 0x58
 8005b52:	fb01 f303 	mul.w	r3, r1, r3
 8005b56:	4413      	add	r3, r2
 8005b58:	334c      	adds	r3, #76	; 0x4c
 8005b5a:	222b      	movs	r2, #43	; 0x2b
 8005b5c:	701a      	strb	r2, [r3, #0]
	  index++;
 8005b5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b62:	3301      	adds	r3, #1
 8005b64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(file_cell->ptrCell_parent[index] != NULL)
 8005b68:	e7d4      	b.n	8005b14 <send_path+0x38>
	}
	else
	{
	  break;
 8005b6a:	bf00      	nop
	}
  }
  //Indica de nuevo el inicio del recorrido
   array_string[file_cell->ptrCell_parent[0]->index_row][file_cell->ptrCell_parent[0]->index_col].feature = 'S';
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	789b      	ldrb	r3, [r3, #2]
 8005b72:	461a      	mov	r2, r3
 8005b74:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8005b78:	fb02 f303 	mul.w	r3, r2, r3
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	441a      	add	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	78db      	ldrb	r3, [r3, #3]
 8005b86:	4619      	mov	r1, r3
 8005b88:	2358      	movs	r3, #88	; 0x58
 8005b8a:	fb01 f303 	mul.w	r3, r1, r3
 8005b8e:	4413      	add	r3, r2
 8005b90:	334c      	adds	r3, #76	; 0x4c
 8005b92:	2253      	movs	r2, #83	; 0x53
 8005b94:	701a      	strb	r2, [r3, #0]

  //Envio de caracter para indicar que se trata del grid map
  buffermsg[0] = '$'; buffermsg[1] = '\0';
 8005b96:	2324      	movs	r3, #36	; 0x24
 8005b98:	763b      	strb	r3, [r7, #24]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	767b      	strb	r3, [r7, #25]
  //Se envia la opcion especificada
  xQueueSend(xQueue_Print, &ptrmsg, portMAX_DELAY);
 8005b9e:	4b31      	ldr	r3, [pc, #196]	; (8005c64 <send_path+0x188>)
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	f107 0114 	add.w	r1, r7, #20
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bac:	f000 fcd2 	bl	8006554 <xQueueGenericSend>
  //Entregamos el procesador a la Tarea Print
  taskYIELD();
 8005bb0:	4b2d      	ldr	r3, [pc, #180]	; (8005c68 <send_path+0x18c>)
 8005bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	f3bf 8f6f 	isb	sy
  //Imprimir la malla modificada
  for(int i=0;i<row;i++)
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bc4:	e044      	b.n	8005c50 <send_path+0x174>
  {
	for(int j=0;j<colum;j++)
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bca:	e019      	b.n	8005c00 <send_path+0x124>
	{
	  //Agregamos las caracteristicas por fila a un buffer
	  buffermsg[j] = array_string[i][j].feature;
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	441a      	add	r2, r3
 8005bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bdc:	2158      	movs	r1, #88	; 0x58
 8005bde:	fb01 f303 	mul.w	r3, r1, r3
 8005be2:	4413      	add	r3, r2
 8005be4:	334c      	adds	r3, #76	; 0x4c
 8005be6:	7819      	ldrb	r1, [r3, #0]
 8005be8:	f107 0218 	add.w	r2, r7, #24
 8005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bee:	4413      	add	r3, r2
 8005bf0:	460a      	mov	r2, r1
 8005bf2:	701a      	strb	r2, [r3, #0]
	  index = j;
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for(int j=0;j<colum;j++)
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8005c00:	79bb      	ldrb	r3, [r7, #6]
 8005c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c04:	429a      	cmp	r2, r3
 8005c06:	dbe1      	blt.n	8005bcc <send_path+0xf0>
	}
	//Agragamos el valor nullo al final del string
	buffermsg[index+1] = ';';
 8005c08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	3340      	adds	r3, #64	; 0x40
 8005c10:	443b      	add	r3, r7
 8005c12:	223b      	movs	r2, #59	; 0x3b
 8005c14:	f803 2c28 	strb.w	r2, [r3, #-40]
	buffermsg[index+2] = '\0';
 8005c18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c1c:	3302      	adds	r3, #2
 8005c1e:	3340      	adds	r3, #64	; 0x40
 8005c20:	443b      	add	r3, r7
 8005c22:	2200      	movs	r2, #0
 8005c24:	f803 2c28 	strb.w	r2, [r3, #-40]
	//Se envia la opcion especificada
	xQueueSend(xQueue_Print, &ptrmsg, portMAX_DELAY);
 8005c28:	4b0e      	ldr	r3, [pc, #56]	; (8005c64 <send_path+0x188>)
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	f107 0114 	add.w	r1, r7, #20
 8005c30:	2300      	movs	r3, #0
 8005c32:	f04f 32ff 	mov.w	r2, #4294967295
 8005c36:	f000 fc8d 	bl	8006554 <xQueueGenericSend>
	//Entregamos el procesador a la Tarea Print
	taskYIELD();
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <send_path+0x18c>)
 8005c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	f3bf 8f6f 	isb	sy
  for(int i=0;i<row;i++)
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c54:	429a      	cmp	r2, r3
 8005c56:	dbb6      	blt.n	8005bc6 <send_path+0xea>
  }

}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	3740      	adds	r7, #64	; 0x40
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000428 	.word	0x20000428
 8005c68:	e000ed04 	.word	0xe000ed04

08005c6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005c6c:	480d      	ldr	r0, [pc, #52]	; (8005ca4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005c6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005c70:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c74:	480c      	ldr	r0, [pc, #48]	; (8005ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005c76:	490d      	ldr	r1, [pc, #52]	; (8005cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8005c78:	4a0d      	ldr	r2, [pc, #52]	; (8005cb0 <LoopForever+0xe>)
  movs r3, #0
 8005c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c7c:	e002      	b.n	8005c84 <LoopCopyDataInit>

08005c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c82:	3304      	adds	r3, #4

08005c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c88:	d3f9      	bcc.n	8005c7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c8a:	4a0a      	ldr	r2, [pc, #40]	; (8005cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005c8c:	4c0a      	ldr	r4, [pc, #40]	; (8005cb8 <LoopForever+0x16>)
  movs r3, #0
 8005c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c90:	e001      	b.n	8005c96 <LoopFillZerobss>

08005c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c94:	3204      	adds	r2, #4

08005c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c98:	d3fb      	bcc.n	8005c92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005c9a:	f006 fb85 	bl	800c3a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005c9e:	f7fd f95f 	bl	8002f60 <main>

08005ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8005ca2:	e7fe      	b.n	8005ca2 <LoopForever>
  ldr   r0, =_estack
 8005ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005cac:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8005cb0:	08014980 	.word	0x08014980
  ldr r2, =_sbss
 8005cb4:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8005cb8:	2001c500 	.word	0x2001c500

08005cbc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005cbc:	e7fe      	b.n	8005cbc <ADC_IRQHandler>
	...

08005cc0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8005cca:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <ITM_SendChar+0x48>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a0e      	ldr	r2, [pc, #56]	; (8005d08 <ITM_SendChar+0x48>)
 8005cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cd4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	; (8005d0c <ITM_SendChar+0x4c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a0c      	ldr	r2, [pc, #48]	; (8005d0c <ITM_SendChar+0x4c>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8005ce2:	bf00      	nop
 8005ce4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f8      	beq.n	8005ce4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8005cf2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	6013      	str	r3, [r2, #0]
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	e000edfc 	.word	0xe000edfc
 8005d0c:	e0000e00 	.word	0xe0000e00

08005d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
	return 1;
 8005d14:	2301      	movs	r3, #1
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <_kill>:

int _kill(int pid, int sig)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005d2a:	f006 fb37 	bl	800c39c <__errno>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2216      	movs	r2, #22
 8005d32:	601a      	str	r2, [r3, #0]
	return -1;
 8005d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <_exit>:

void _exit (int status)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005d48:	f04f 31ff 	mov.w	r1, #4294967295
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff ffe7 	bl	8005d20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005d52:	e7fe      	b.n	8005d52 <_exit+0x12>

08005d54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e00a      	b.n	8005d7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005d66:	f3af 8000 	nop.w
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	60ba      	str	r2, [r7, #8]
 8005d72:	b2ca      	uxtb	r2, r1
 8005d74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	dbf0      	blt.n	8005d66 <_read+0x12>
	}

return len;
 8005d84:	687b      	ldr	r3, [r7, #4]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b086      	sub	sp, #24
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	e009      	b.n	8005db4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	60ba      	str	r2, [r7, #8]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff ff89 	bl	8005cc0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	3301      	adds	r3, #1
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	dbf1      	blt.n	8005da0 <_write+0x12>
	}
	return len;
 8005dbc:	687b      	ldr	r3, [r7, #4]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <_close>:

int _close(int file)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
	return -1;
 8005dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005dee:	605a      	str	r2, [r3, #4]
	return 0;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <_isatty>:

int _isatty(int file)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
	return 1;
 8005e06:	2301      	movs	r3, #1
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
	return 0;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
	...

08005e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e38:	4a14      	ldr	r2, [pc, #80]	; (8005e8c <_sbrk+0x5c>)
 8005e3a:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <_sbrk+0x60>)
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e44:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <_sbrk+0x64>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d102      	bne.n	8005e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e4c:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <_sbrk+0x64>)
 8005e4e:	4a12      	ldr	r2, [pc, #72]	; (8005e98 <_sbrk+0x68>)
 8005e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e52:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <_sbrk+0x64>)
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4413      	add	r3, r2
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d207      	bcs.n	8005e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e60:	f006 fa9c 	bl	800c39c <__errno>
 8005e64:	4603      	mov	r3, r0
 8005e66:	220c      	movs	r2, #12
 8005e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e6e:	e009      	b.n	8005e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e70:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <_sbrk+0x64>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e76:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <_sbrk+0x64>)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	4a05      	ldr	r2, [pc, #20]	; (8005e94 <_sbrk+0x64>)
 8005e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e82:	68fb      	ldr	r3, [r7, #12]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	20020000 	.word	0x20020000
 8005e90:	00000400 	.word	0x00000400
 8005e94:	20008ec0 	.word	0x20008ec0
 8005e98:	2001c500 	.word	0x2001c500

08005e9c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005ea2:	201c      	movs	r0, #28
 8005ea4:	f003 f8fa 	bl	800909c <pvPortMalloc>
 8005ea8:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d007      	beq.n	8005ec0 <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 f9b9 	bl	8006232 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 8005ec0:	687b      	ldr	r3, [r7, #4]
    }
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b090      	sub	sp, #64	; 0x40
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
    EventBits_t uxReturn, uxControlBits = 0;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	63bb      	str	r3, [r7, #56]	; 0x38
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <xEventGroupWaitBits+0x36>
        __asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	623b      	str	r3, [r7, #32]
    }
 8005efe:	bf00      	nop
 8005f00:	e7fe      	b.n	8005f00 <xEventGroupWaitBits+0x34>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <xEventGroupWaitBits+0x56>
        __asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	61fb      	str	r3, [r7, #28]
    }
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xEventGroupWaitBits+0x54>
    configASSERT( uxBitsToWaitFor != 0 );
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10a      	bne.n	8005f3e <xEventGroupWaitBits+0x72>
        __asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	61bb      	str	r3, [r7, #24]
    }
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <xEventGroupWaitBits+0x70>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f3e:	f001 ff85 	bl	8007e4c <xTaskGetSchedulerState>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d102      	bne.n	8005f4e <xEventGroupWaitBits+0x82>
 8005f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <xEventGroupWaitBits+0x86>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <xEventGroupWaitBits+0x88>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <xEventGroupWaitBits+0xa2>
        __asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	617b      	str	r3, [r7, #20]
    }
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xEventGroupWaitBits+0xa0>
        }
    #endif

    vTaskSuspendAll();
 8005f6e:	f001 fb4b 	bl	8007608 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	68b9      	ldr	r1, [r7, #8]
 8005f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f7e:	f000 f936 	bl	80061ee <prvTestWaitCondition>
 8005f82:	62b8      	str	r0, [r7, #40]	; 0x28

        if( xWaitConditionMet != pdFALSE )
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00e      	beq.n	8005fa8 <xEventGroupWaitBits+0xdc>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 8005f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTicksToWait = ( TickType_t ) 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d028      	beq.n	8005fea <xEventGroupWaitBits+0x11e>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	43db      	mvns	r3, r3
 8005fa0:	401a      	ands	r2, r3
 8005fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	e020      	b.n	8005fea <xEventGroupWaitBits+0x11e>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8005fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d104      	bne.n	8005fb8 <xEventGroupWaitBits+0xec>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
            xTimeoutOccurred = pdTRUE;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb6:	e018      	b.n	8005fea <xEventGroupWaitBits+0x11e>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <xEventGroupWaitBits+0xfa>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fc4:	63bb      	str	r3, [r7, #56]	; 0x38
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <xEventGroupWaitBits+0x108>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fd2:	63bb      	str	r3, [r7, #56]	; 0x38
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd6:	1d18      	adds	r0, r3, #4
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	f001 fcd3 	bl	800798c <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	63fb      	str	r3, [r7, #60]	; 0x3c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8005fea:	f001 fb1b 	bl	8007624 <xTaskResumeAll>
 8005fee:	6278      	str	r0, [r7, #36]	; 0x24

    if( xTicksToWait != ( TickType_t ) 0 )
 8005ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d031      	beq.n	800605a <xEventGroupWaitBits+0x18e>
    {
        if( xAlreadyYielded == pdFALSE )
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d107      	bne.n	800600c <xEventGroupWaitBits+0x140>
        {
            portYIELD_WITHIN_API();
 8005ffc:	4b19      	ldr	r3, [pc, #100]	; (8006064 <xEventGroupWaitBits+0x198>)
 8005ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 800600c:	f001 ffb6 	bl	8007f7c <uxTaskResetEventItemValue>
 8006010:	63f8      	str	r0, [r7, #60]	; 0x3c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d11a      	bne.n	8006052 <xEventGroupWaitBits+0x186>
        {
            taskENTER_CRITICAL();
 800601c:	f002 ff1c 	bl	8008e58 <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800602c:	f000 f8df 	bl	80061ee <prvTestWaitCondition>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <xEventGroupWaitBits+0x17e>
                {
                    if( xClearOnExit != pdFALSE )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d006      	beq.n	800604a <xEventGroupWaitBits+0x17e>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	43db      	mvns	r3, r3
 8006044:	401a      	ands	r2, r3
 8006046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006048:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 800604a:	2301      	movs	r3, #1
 800604c:	633b      	str	r3, [r7, #48]	; 0x30
            }
            taskEXIT_CRITICAL();
 800604e:	f002 ff33 	bl	8008eb8 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006054:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006058:	63fb      	str	r3, [r7, #60]	; 0x3c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 800605a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800605c:	4618      	mov	r0, r3
 800605e:	3740      	adds	r7, #64	; 0x40
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	e000ed04 	.word	0xe000ed04

08006068 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	617b      	str	r3, [r7, #20]
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10a      	bne.n	8006092 <xEventGroupClearBits+0x2a>
        __asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	60fb      	str	r3, [r7, #12]
    }
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <xEventGroupClearBits+0x28>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <xEventGroupClearBits+0x4a>
        __asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	60bb      	str	r3, [r7, #8]
    }
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <xEventGroupClearBits+0x48>

    taskENTER_CRITICAL();
 80060b2:	f002 fed1 	bl	8008e58 <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	613b      	str	r3, [r7, #16]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	43db      	mvns	r3, r3
 80060c4:	401a      	ands	r2, r3
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 80060ca:	f002 fef5 	bl	8008eb8 <vPortExitCritical>

    return uxReturn;
 80060ce:	693b      	ldr	r3, [r7, #16]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08e      	sub	sp, #56	; 0x38
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80060e2:	2300      	movs	r3, #0
 80060e4:	633b      	str	r3, [r7, #48]	; 0x30
    EventGroup_t * pxEventBits = xEventGroup;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xMatchFound = pdFALSE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <xEventGroupSetBits+0x32>
        __asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	613b      	str	r3, [r7, #16]
    }
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xEventGroupSetBits+0x30>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <xEventGroupSetBits+0x52>
        __asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	60fb      	str	r3, [r7, #12]
    }
 8006126:	bf00      	nop
 8006128:	e7fe      	b.n	8006128 <xEventGroupSetBits+0x50>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	3304      	adds	r3, #4
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	3308      	adds	r3, #8
 8006134:	623b      	str	r3, [r7, #32]
    vTaskSuspendAll();
 8006136:	f001 fa67 	bl	8007608 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	637b      	str	r3, [r7, #52]	; 0x34

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	431a      	orrs	r2, r3
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 800614c:	e03c      	b.n	80061c8 <xEventGroupSetBits+0xf0>
        {
            pxNext = listGET_NEXT( pxListItem );
 800614e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	61fb      	str	r3, [r7, #28]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	61bb      	str	r3, [r7, #24]
            xMatchFound = pdFALSE;
 800615a:	2300      	movs	r3, #0
 800615c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006164:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800616c:	61bb      	str	r3, [r7, #24]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d108      	bne.n	800618a <xEventGroupSetBits+0xb2>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	4013      	ands	r3, r2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <xEventGroupSetBits+0xc4>
                {
                    xMatchFound = pdTRUE;
 8006184:	2301      	movs	r3, #1
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006188:	e008      	b.n	800619c <xEventGroupSetBits+0xc4>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	4013      	ands	r3, r2
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	429a      	cmp	r2, r3
 8006196:	d101      	bne.n	800619c <xEventGroupSetBits+0xc4>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8006198:	2301      	movs	r3, #1
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d010      	beq.n	80061c4 <xEventGroupSetBits+0xec>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <xEventGroupSetBits+0xdc>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 80061ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	633b      	str	r3, [r7, #48]	; 0x30
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061bc:	4619      	mov	r1, r3
 80061be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80061c0:	f001 fcae 	bl	8007b20 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
        while( pxListItem != pxListEnd )
 80061c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d1be      	bne.n	800614e <xEventGroupSetBits+0x76>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	43db      	mvns	r3, r3
 80061d8:	401a      	ands	r2, r3
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 80061de:	f001 fa21 	bl	8007624 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	681b      	ldr	r3, [r3, #0]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3738      	adds	r7, #56	; 0x38
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 80061ee:	b480      	push	{r7}
 80061f0:	b087      	sub	sp, #28
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 80061fa:	2300      	movs	r3, #0
 80061fc:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d107      	bne.n	8006214 <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4013      	ands	r3, r2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 800620e:	2301      	movs	r3, #1
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	e007      	b.n	8006224 <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	4013      	ands	r3, r2
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	429a      	cmp	r2, r3
 800621e:	d101      	bne.n	8006224 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8006220:	2301      	movs	r3, #1
 8006222:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 8006224:	697b      	ldr	r3, [r7, #20]
}
 8006226:	4618      	mov	r0, r3
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f103 0208 	add.w	r2, r3, #8
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f04f 32ff 	mov.w	r2, #4294967295
 800624a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f103 0208 	add.w	r2, r3, #8
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f103 0208 	add.w	r2, r3, #8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	601a      	str	r2, [r3, #0]
}
 80062c8:	bf00      	nop
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d103      	bne.n	80062f4 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	e00c      	b.n	800630e <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3308      	adds	r3, #8
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e002      	b.n	8006302 <vListInsert+0x2e>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	429a      	cmp	r2, r3
 800630c:	d2f6      	bcs.n	80062fc <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	601a      	str	r2, [r3, #0]
}
 800633a:	bf00      	nop
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006346:	b480      	push	{r7}
 8006348:	b085      	sub	sp, #20
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6892      	ldr	r2, [r2, #8]
 800635c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6852      	ldr	r2, [r2, #4]
 8006366:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	429a      	cmp	r2, r3
 8006370:	d103      	bne.n	800637a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	1e5a      	subs	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <xQueueGenericReset+0x2a>
        __asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60bb      	str	r3, [r7, #8]
    }
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80063c4:	f002 fd48 	bl	8008e58 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d0:	68f9      	ldr	r1, [r7, #12]
 80063d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063d4:	fb01 f303 	mul.w	r3, r1, r3
 80063d8:	441a      	add	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f4:	3b01      	subs	r3, #1
 80063f6:	68f9      	ldr	r1, [r7, #12]
 80063f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063fa:	fb01 f303 	mul.w	r3, r1, r3
 80063fe:	441a      	add	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	22ff      	movs	r2, #255	; 0xff
 8006408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	22ff      	movs	r2, #255	; 0xff
 8006410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d109      	bne.n	800642e <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00f      	beq.n	8006442 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	3310      	adds	r3, #16
 8006426:	4618      	mov	r0, r3
 8006428:	f001 fb18 	bl	8007a5c <xTaskRemoveFromEventList>
 800642c:	e009      	b.n	8006442 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3310      	adds	r3, #16
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff fefd 	bl	8006232 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3324      	adds	r3, #36	; 0x24
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff fef8 	bl	8006232 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8006442:	f002 fd39 	bl	8008eb8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8006446:	2301      	movs	r3, #1
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006450:	b580      	push	{r7, lr}
 8006452:	b08c      	sub	sp, #48	; 0x30
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	4613      	mov	r3, r2
 800645c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <xQueueGenericCreate+0x2a>
        __asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	61bb      	str	r3, [r7, #24]
    }
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	fb02 f303 	mul.w	r3, r2, r3
 8006482:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d006      	beq.n	8006498 <xQueueGenericCreate+0x48>
 800648a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	429a      	cmp	r2, r3
 8006496:	d101      	bne.n	800649c <xQueueGenericCreate+0x4c>
 8006498:	2301      	movs	r3, #1
 800649a:	e000      	b.n	800649e <xQueueGenericCreate+0x4e>
 800649c:	2300      	movs	r3, #0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10a      	bne.n	80064b8 <xQueueGenericCreate+0x68>
        __asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	617b      	str	r3, [r7, #20]
    }
 80064b4:	bf00      	nop
 80064b6:	e7fe      	b.n	80064b6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80064be:	d90a      	bls.n	80064d6 <xQueueGenericCreate+0x86>
        __asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	613b      	str	r3, [r7, #16]
    }
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	3350      	adds	r3, #80	; 0x50
 80064da:	4618      	mov	r0, r3
 80064dc:	f002 fdde 	bl	800909c <pvPortMalloc>
 80064e0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00d      	beq.n	8006504 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	3350      	adds	r3, #80	; 0x50
 80064f0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064f2:	79fa      	ldrb	r2, [r7, #7]
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f805 	bl	800650e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006504:	6a3b      	ldr	r3, [r7, #32]
    }
 8006506:	4618      	mov	r0, r3
 8006508:	3728      	adds	r7, #40	; 0x28
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
 800651a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d103      	bne.n	800652a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	e002      	b.n	8006530 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800653c:	2101      	movs	r1, #1
 800653e:	69b8      	ldr	r0, [r7, #24]
 8006540:	f7ff ff2b 	bl	800639a <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	78fa      	ldrb	r2, [r7, #3]
 8006548:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800654c:	bf00      	nop
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08e      	sub	sp, #56	; 0x38
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006562:	2300      	movs	r3, #0
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <xQueueGenericSend+0x32>
        __asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d103      	bne.n	8006594 <xQueueGenericSend+0x40>
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <xQueueGenericSend+0x44>
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <xQueueGenericSend+0x46>
 8006598:	2300      	movs	r3, #0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <xQueueGenericSend+0x60>
        __asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d103      	bne.n	80065c2 <xQueueGenericSend+0x6e>
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <xQueueGenericSend+0x72>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <xQueueGenericSend+0x74>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <xQueueGenericSend+0x8e>
        __asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	623b      	str	r3, [r7, #32]
    }
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065e2:	f001 fc33 	bl	8007e4c <xTaskGetSchedulerState>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <xQueueGenericSend+0x9e>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <xQueueGenericSend+0xa2>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <xQueueGenericSend+0xa4>
 80065f6:	2300      	movs	r3, #0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <xQueueGenericSend+0xbe>
        __asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	61fb      	str	r3, [r7, #28]
    }
 800660e:	bf00      	nop
 8006610:	e7fe      	b.n	8006610 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006612:	f002 fc21 	bl	8008e58 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661e:	429a      	cmp	r2, r3
 8006620:	d302      	bcc.n	8006628 <xQueueGenericSend+0xd4>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d112      	bne.n	800664e <xQueueGenericSend+0xfa>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800662e:	f000 fb78 	bl	8006d22 <prvCopyDataToQueue>
 8006632:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	2b00      	cmp	r3, #0
 800663a:	d004      	beq.n	8006646 <xQueueGenericSend+0xf2>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	3324      	adds	r3, #36	; 0x24
 8006640:	4618      	mov	r0, r3
 8006642:	f001 fa0b 	bl	8007a5c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006646:	f002 fc37 	bl	8008eb8 <vPortExitCritical>
                return pdPASS;
 800664a:	2301      	movs	r3, #1
 800664c:	e062      	b.n	8006714 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d103      	bne.n	800665c <xQueueGenericSend+0x108>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006654:	f002 fc30 	bl	8008eb8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8006658:	2300      	movs	r3, #0
 800665a:	e05b      	b.n	8006714 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800665c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <xQueueGenericSend+0x11c>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006662:	f107 0314 	add.w	r3, r7, #20
 8006666:	4618      	mov	r0, r3
 8006668:	f001 fabc 	bl	8007be4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800666c:	2301      	movs	r3, #1
 800666e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006670:	f002 fc22 	bl	8008eb8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006674:	f000 ffc8 	bl	8007608 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006678:	f002 fbee 	bl	8008e58 <vPortEnterCritical>
 800667c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006682:	b25b      	sxtb	r3, r3
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006688:	d103      	bne.n	8006692 <xQueueGenericSend+0x13e>
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006698:	b25b      	sxtb	r3, r3
 800669a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669e:	d103      	bne.n	80066a8 <xQueueGenericSend+0x154>
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066a8:	f002 fc06 	bl	8008eb8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066ac:	1d3a      	adds	r2, r7, #4
 80066ae:	f107 0314 	add.w	r3, r7, #20
 80066b2:	4611      	mov	r1, r2
 80066b4:	4618      	mov	r0, r3
 80066b6:	f001 faab 	bl	8007c10 <xTaskCheckForTimeOut>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d123      	bne.n	8006708 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066c2:	f000 fc26 	bl	8006f12 <prvIsQueueFull>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d017      	beq.n	80066fc <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	3310      	adds	r3, #16
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	4611      	mov	r1, r2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 f935 	bl	8007944 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80066da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066dc:	f000 fbb1 	bl	8006e42 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80066e0:	f000 ffa0 	bl	8007624 <xTaskResumeAll>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d193      	bne.n	8006612 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80066ea:	4b0c      	ldr	r3, [pc, #48]	; (800671c <xQueueGenericSend+0x1c8>)
 80066ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	e78a      	b.n	8006612 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80066fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066fe:	f000 fba0 	bl	8006e42 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006702:	f000 ff8f 	bl	8007624 <xTaskResumeAll>
 8006706:	e784      	b.n	8006612 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800670a:	f000 fb9a 	bl	8006e42 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800670e:	f000 ff89 	bl	8007624 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8006712:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006714:	4618      	mov	r0, r3
 8006716:	3738      	adds	r7, #56	; 0x38
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b090      	sub	sp, #64	; 0x40
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d103      	bne.n	800675c <xQueueGenericSendFromISR+0x3c>
 8006754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <xQueueGenericSendFromISR+0x40>
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <xQueueGenericSendFromISR+0x42>
 8006760:	2300      	movs	r3, #0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10a      	bne.n	800677c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006778:	bf00      	nop
 800677a:	e7fe      	b.n	800677a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d103      	bne.n	800678a <xQueueGenericSendFromISR+0x6a>
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <xQueueGenericSendFromISR+0x6e>
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <xQueueGenericSendFromISR+0x70>
 800678e:	2300      	movs	r3, #0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	623b      	str	r3, [r7, #32]
    }
 80067a6:	bf00      	nop
 80067a8:	e7fe      	b.n	80067a8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067aa:	f002 fc37 	bl	800901c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80067ae:	f3ef 8211 	mrs	r2, BASEPRI
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	61fa      	str	r2, [r7, #28]
 80067c4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80067c6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d302      	bcc.n	80067dc <xQueueGenericSendFromISR+0xbc>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d13e      	bne.n	800685a <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80067dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067f2:	f000 fa96 	bl	8006d22 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80067f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80067fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fe:	d112      	bne.n	8006826 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	d025      	beq.n	8006854 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	3324      	adds	r3, #36	; 0x24
 800680c:	4618      	mov	r0, r3
 800680e:	f001 f925 	bl	8007a5c <xTaskRemoveFromEventList>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01d      	beq.n	8006854 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d01a      	beq.n	8006854 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	e016      	b.n	8006854 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8006826:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800682a:	2b7f      	cmp	r3, #127	; 0x7f
 800682c:	d10a      	bne.n	8006844 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	617b      	str	r3, [r7, #20]
    }
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006844:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006848:	3301      	adds	r3, #1
 800684a:	b2db      	uxtb	r3, r3
 800684c:	b25a      	sxtb	r2, r3
 800684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8006854:	2301      	movs	r3, #1
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8006858:	e001      	b.n	800685e <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800685a:	2300      	movs	r3, #0
 800685c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800685e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006860:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006868:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800686a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800686c:	4618      	mov	r0, r3
 800686e:	3740      	adds	r7, #64	; 0x40
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08c      	sub	sp, #48	; 0x30
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006880:	2300      	movs	r3, #0
 8006882:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <xQueueReceive+0x30>
        __asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	623b      	str	r3, [r7, #32]
    }
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d103      	bne.n	80068b2 <xQueueReceive+0x3e>
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <xQueueReceive+0x42>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e000      	b.n	80068b8 <xQueueReceive+0x44>
 80068b6:	2300      	movs	r3, #0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <xQueueReceive+0x5e>
        __asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	61fb      	str	r3, [r7, #28]
    }
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068d2:	f001 fabb 	bl	8007e4c <xTaskGetSchedulerState>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d102      	bne.n	80068e2 <xQueueReceive+0x6e>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <xQueueReceive+0x72>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e000      	b.n	80068e8 <xQueueReceive+0x74>
 80068e6:	2300      	movs	r3, #0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <xQueueReceive+0x8e>
        __asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	61bb      	str	r3, [r7, #24]
    }
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006902:	f002 faa9 	bl	8008e58 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	2b00      	cmp	r3, #0
 8006910:	d014      	beq.n	800693c <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006912:	68b9      	ldr	r1, [r7, #8]
 8006914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006916:	f000 fa6e 	bl	8006df6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	1e5a      	subs	r2, r3, #1
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d004      	beq.n	8006934 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	3310      	adds	r3, #16
 800692e:	4618      	mov	r0, r3
 8006930:	f001 f894 	bl	8007a5c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006934:	f002 fac0 	bl	8008eb8 <vPortExitCritical>
                return pdPASS;
 8006938:	2301      	movs	r3, #1
 800693a:	e069      	b.n	8006a10 <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d103      	bne.n	800694a <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006942:	f002 fab9 	bl	8008eb8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006946:	2300      	movs	r3, #0
 8006948:	e062      	b.n	8006a10 <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	2b00      	cmp	r3, #0
 800694e:	d106      	bne.n	800695e <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006950:	f107 0310 	add.w	r3, r7, #16
 8006954:	4618      	mov	r0, r3
 8006956:	f001 f945 	bl	8007be4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800695a:	2301      	movs	r3, #1
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800695e:	f002 faab 	bl	8008eb8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006962:	f000 fe51 	bl	8007608 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006966:	f002 fa77 	bl	8008e58 <vPortEnterCritical>
 800696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006970:	b25b      	sxtb	r3, r3
 8006972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006976:	d103      	bne.n	8006980 <xQueueReceive+0x10c>
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006986:	b25b      	sxtb	r3, r3
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698c:	d103      	bne.n	8006996 <xQueueReceive+0x122>
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006996:	f002 fa8f 	bl	8008eb8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800699a:	1d3a      	adds	r2, r7, #4
 800699c:	f107 0310 	add.w	r3, r7, #16
 80069a0:	4611      	mov	r1, r2
 80069a2:	4618      	mov	r0, r3
 80069a4:	f001 f934 	bl	8007c10 <xTaskCheckForTimeOut>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d123      	bne.n	80069f6 <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b0:	f000 fa99 	bl	8006ee6 <prvIsQueueEmpty>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d017      	beq.n	80069ea <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	3324      	adds	r3, #36	; 0x24
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	4611      	mov	r1, r2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 ffbe 	bl	8007944 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80069c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ca:	f000 fa3a 	bl	8006e42 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80069ce:	f000 fe29 	bl	8007624 <xTaskResumeAll>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d194      	bne.n	8006902 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80069d8:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <xQueueReceive+0x1a4>)
 80069da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	e78b      	b.n	8006902 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80069ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ec:	f000 fa29 	bl	8006e42 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80069f0:	f000 fe18 	bl	8007624 <xTaskResumeAll>
 80069f4:	e785      	b.n	8006902 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80069f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069f8:	f000 fa23 	bl	8006e42 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80069fc:	f000 fe12 	bl	8007624 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a02:	f000 fa70 	bl	8006ee6 <prvIsQueueEmpty>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f43f af7a 	beq.w	8006902 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006a0e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3730      	adds	r7, #48	; 0x30
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08e      	sub	sp, #56	; 0x38
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10a      	bne.n	8006a4c <xQueuePeek+0x30>
        __asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <xQueuePeek+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <xQueuePeek+0x3e>
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <xQueuePeek+0x42>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <xQueuePeek+0x44>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10a      	bne.n	8006a7a <xQueuePeek+0x5e>
        __asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	623b      	str	r3, [r7, #32]
    }
 8006a76:	bf00      	nop
 8006a78:	e7fe      	b.n	8006a78 <xQueuePeek+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a7a:	f001 f9e7 	bl	8007e4c <xTaskGetSchedulerState>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d102      	bne.n	8006a8a <xQueuePeek+0x6e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <xQueuePeek+0x72>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <xQueuePeek+0x74>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10a      	bne.n	8006aaa <xQueuePeek+0x8e>
        __asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	61fb      	str	r3, [r7, #28]
    }
 8006aa6:	bf00      	nop
 8006aa8:	e7fe      	b.n	8006aa8 <xQueuePeek+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006aaa:	f002 f9d5 	bl	8008e58 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d016      	beq.n	8006ae8 <xQueuePeek+0xcc>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	62bb      	str	r3, [r7, #40]	; 0x28

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ac0:	68b9      	ldr	r1, [r7, #8]
 8006ac2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ac4:	f000 f997 	bl	8006df6 <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006acc:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d004      	beq.n	8006ae0 <xQueuePeek+0xc4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	3324      	adds	r3, #36	; 0x24
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 ffbe 	bl	8007a5c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006ae0:	f002 f9ea 	bl	8008eb8 <vPortExitCritical>
                return pdPASS;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e069      	b.n	8006bbc <xQueuePeek+0x1a0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d103      	bne.n	8006af6 <xQueuePeek+0xda>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006aee:	f002 f9e3 	bl	8008eb8 <vPortExitCritical>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006af2:	2300      	movs	r3, #0
 8006af4:	e062      	b.n	8006bbc <xQueuePeek+0x1a0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d106      	bne.n	8006b0a <xQueuePeek+0xee>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006afc:	f107 0314 	add.w	r3, r7, #20
 8006b00:	4618      	mov	r0, r3
 8006b02:	f001 f86f 	bl	8007be4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006b06:	2301      	movs	r3, #1
 8006b08:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006b0a:	f002 f9d5 	bl	8008eb8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006b0e:	f000 fd7b 	bl	8007608 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006b12:	f002 f9a1 	bl	8008e58 <vPortEnterCritical>
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b1c:	b25b      	sxtb	r3, r3
 8006b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b22:	d103      	bne.n	8006b2c <xQueuePeek+0x110>
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b32:	b25b      	sxtb	r3, r3
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b38:	d103      	bne.n	8006b42 <xQueuePeek+0x126>
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b42:	f002 f9b9 	bl	8008eb8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b46:	1d3a      	adds	r2, r7, #4
 8006b48:	f107 0314 	add.w	r3, r7, #20
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f001 f85e 	bl	8007c10 <xTaskCheckForTimeOut>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d123      	bne.n	8006ba2 <xQueuePeek+0x186>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b5c:	f000 f9c3 	bl	8006ee6 <prvIsQueueEmpty>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d017      	beq.n	8006b96 <xQueuePeek+0x17a>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	3324      	adds	r3, #36	; 0x24
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fee8 	bl	8007944 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b76:	f000 f964 	bl	8006e42 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006b7a:	f000 fd53 	bl	8007624 <xTaskResumeAll>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d192      	bne.n	8006aaa <xQueuePeek+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006b84:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <xQueuePeek+0x1a8>)
 8006b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	e789      	b.n	8006aaa <xQueuePeek+0x8e>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 8006b96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b98:	f000 f953 	bl	8006e42 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006b9c:	f000 fd42 	bl	8007624 <xTaskResumeAll>
 8006ba0:	e783      	b.n	8006aaa <xQueuePeek+0x8e>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 8006ba2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ba4:	f000 f94d 	bl	8006e42 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006ba8:	f000 fd3c 	bl	8007624 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bae:	f000 f99a 	bl	8006ee6 <prvIsQueueEmpty>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f43f af78 	beq.w	8006aaa <xQueuePeek+0x8e>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006bba:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3738      	adds	r7, #56	; 0x38
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	e000ed04 	.word	0xe000ed04

08006bc8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b090      	sub	sp, #64	; 0x40
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10a      	bne.n	8006bf4 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d103      	bne.n	8006c02 <xQueueReceiveFromISR+0x3a>
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <xQueueReceiveFromISR+0x3e>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e000      	b.n	8006c08 <xQueueReceiveFromISR+0x40>
 8006c06:	2300      	movs	r3, #0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006c1e:	bf00      	nop
 8006c20:	e7fe      	b.n	8006c20 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c22:	f002 f9fb 	bl	800901c <vPortValidateInterruptPriority>
        __asm volatile
 8006c26:	f3ef 8211 	mrs	r2, BASEPRI
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	623a      	str	r2, [r7, #32]
 8006c3c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8006c3e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c40:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d03e      	beq.n	8006ccc <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c58:	68b9      	ldr	r1, [r7, #8]
 8006c5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c5c:	f000 f8cb 	bl	8006df6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	1e5a      	subs	r2, r3, #1
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8006c68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c70:	d112      	bne.n	8006c98 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d025      	beq.n	8006cc6 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7c:	3310      	adds	r3, #16
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 feec 	bl	8007a5c <xTaskRemoveFromEventList>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01d      	beq.n	8006cc6 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01a      	beq.n	8006cc6 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	e016      	b.n	8006cc6 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8006c98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c9e:	d10a      	bne.n	8006cb6 <xQueueReceiveFromISR+0xee>
        __asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	61bb      	str	r3, [r7, #24]
    }
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cba:	3301      	adds	r3, #1
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	b25a      	sxtb	r2, r3
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cca:	e001      	b.n	8006cd0 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd2:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f383 8811 	msr	BASEPRI, r3
    }
 8006cda:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3740      	adds	r7, #64	; 0x40
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10a      	bne.n	8006d0a <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	60bb      	str	r3, [r7, #8]
    }
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8006d0a:	f002 f8a5 	bl	8008e58 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8006d14:	f002 f8d0 	bl	8008eb8 <vPortExitCritical>

    return uxReturn;
 8006d18:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b086      	sub	sp, #24
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10d      	bne.n	8006d5c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d14d      	bne.n	8006de4 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f001 f89b 	bl	8007e88 <xTaskPriorityDisinherit>
 8006d52:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	609a      	str	r2, [r3, #8]
 8006d5a:	e043      	b.n	8006de4 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d119      	bne.n	8006d96 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6858      	ldr	r0, [r3, #4]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	68b9      	ldr	r1, [r7, #8]
 8006d6e:	f005 fb3f 	bl	800c3f0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	441a      	add	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d32b      	bcc.n	8006de4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	605a      	str	r2, [r3, #4]
 8006d94:	e026      	b.n	8006de4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	68d8      	ldr	r0, [r3, #12]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9e:	461a      	mov	r2, r3
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	f005 fb25 	bl	800c3f0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	425b      	negs	r3, r3
 8006db0:	441a      	add	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d207      	bcs.n	8006dd2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	425b      	negs	r3, r3
 8006dcc:	441a      	add	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d105      	bne.n	8006de4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8006dec:	697b      	ldr	r3, [r7, #20]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d018      	beq.n	8006e3a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e10:	441a      	add	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d303      	bcc.n	8006e2a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68d9      	ldr	r1, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	461a      	mov	r2, r3
 8006e34:	6838      	ldr	r0, [r7, #0]
 8006e36:	f005 fadb 	bl	800c3f0 <memcpy>
    }
}
 8006e3a:	bf00      	nop
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006e4a:	f002 f805 	bl	8008e58 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e54:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e56:	e011      	b.n	8006e7c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d012      	beq.n	8006e86 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3324      	adds	r3, #36	; 0x24
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fdf9 	bl	8007a5c <xTaskRemoveFromEventList>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8006e70:	f000 ff34 	bl	8007cdc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	dce9      	bgt.n	8006e58 <prvUnlockQueue+0x16>
 8006e84:	e000      	b.n	8006e88 <prvUnlockQueue+0x46>
                        break;
 8006e86:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	22ff      	movs	r2, #255	; 0xff
 8006e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006e90:	f002 f812 	bl	8008eb8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006e94:	f001 ffe0 	bl	8008e58 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e9e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ea0:	e011      	b.n	8006ec6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d012      	beq.n	8006ed0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3310      	adds	r3, #16
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fdd4 	bl	8007a5c <xTaskRemoveFromEventList>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006eba:	f000 ff0f 	bl	8007cdc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ec6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	dce9      	bgt.n	8006ea2 <prvUnlockQueue+0x60>
 8006ece:	e000      	b.n	8006ed2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006ed0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	22ff      	movs	r2, #255	; 0xff
 8006ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006eda:	f001 ffed 	bl	8008eb8 <vPortExitCritical>
}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006eee:	f001 ffb3 	bl	8008e58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d102      	bne.n	8006f00 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006efa:	2301      	movs	r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	e001      	b.n	8006f04 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006f04:	f001 ffd8 	bl	8008eb8 <vPortExitCritical>

    return xReturn;
 8006f08:	68fb      	ldr	r3, [r7, #12]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006f1a:	f001 ff9d 	bl	8008e58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d102      	bne.n	8006f30 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	e001      	b.n	8006f34 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006f34:	f001 ffc0 	bl	8008eb8 <vPortExitCritical>

    return xReturn;
 8006f38:	68fb      	ldr	r3, [r7, #12]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8006f42:	b480      	push	{r7}
 8006f44:	b087      	sub	sp, #28
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10a      	bne.n	8006f6a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	60fb      	str	r3, [r7, #12]
    }
 8006f66:	bf00      	nop
 8006f68:	e7fe      	b.n	8006f68 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d102      	bne.n	8006f7c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8006f76:	2301      	movs	r3, #1
 8006f78:	617b      	str	r3, [r7, #20]
 8006f7a:	e001      	b.n	8006f80 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006f80:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006f82:	4618      	mov	r0, r3
 8006f84:	371c      	adds	r7, #28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	e014      	b.n	8006fca <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006fa0:	4a0f      	ldr	r2, [pc, #60]	; (8006fe0 <vQueueAddToRegistry+0x50>)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10b      	bne.n	8006fc4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fac:	490c      	ldr	r1, [pc, #48]	; (8006fe0 <vQueueAddToRegistry+0x50>)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8006fb6:	4a0a      	ldr	r2, [pc, #40]	; (8006fe0 <vQueueAddToRegistry+0x50>)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8006fc2:	e006      	b.n	8006fd2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b07      	cmp	r3, #7
 8006fce:	d9e7      	bls.n	8006fa0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	20008ec4 	.word	0x20008ec4

08006fe4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006ff4:	f001 ff30 	bl	8008e58 <vPortEnterCritical>
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ffe:	b25b      	sxtb	r3, r3
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007004:	d103      	bne.n	800700e <vQueueWaitForMessageRestricted+0x2a>
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007014:	b25b      	sxtb	r3, r3
 8007016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701a:	d103      	bne.n	8007024 <vQueueWaitForMessageRestricted+0x40>
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007024:	f001 ff48 	bl	8008eb8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	3324      	adds	r3, #36	; 0x24
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fce3 	bl	8007a04 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800703e:	6978      	ldr	r0, [r7, #20]
 8007040:	f7ff feff 	bl	8006e42 <prvUnlockQueue>
    }
 8007044:	bf00      	nop
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800704c:	b580      	push	{r7, lr}
 800704e:	b08c      	sub	sp, #48	; 0x30
 8007050:	af04      	add	r7, sp, #16
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800705c:	88fb      	ldrh	r3, [r7, #6]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4618      	mov	r0, r3
 8007062:	f002 f81b 	bl	800909c <pvPortMalloc>
 8007066:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00e      	beq.n	800708c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800706e:	2058      	movs	r0, #88	; 0x58
 8007070:	f002 f814 	bl	800909c <pvPortMalloc>
 8007074:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	631a      	str	r2, [r3, #48]	; 0x30
 8007082:	e005      	b.n	8007090 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8007084:	6978      	ldr	r0, [r7, #20]
 8007086:	f002 f8e9 	bl	800925c <vPortFree>
 800708a:	e001      	b.n	8007090 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800708c:	2300      	movs	r3, #0
 800708e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d013      	beq.n	80070be <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007096:	88fa      	ldrh	r2, [r7, #6]
 8007098:	2300      	movs	r3, #0
 800709a:	9303      	str	r3, [sp, #12]
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	9302      	str	r3, [sp, #8]
 80070a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a2:	9301      	str	r3, [sp, #4]
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 f80e 	bl	80070ce <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80070b2:	69f8      	ldr	r0, [r7, #28]
 80070b4:	f000 f8a2 	bl	80071fc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80070b8:	2301      	movs	r3, #1
 80070ba:	61bb      	str	r3, [r7, #24]
 80070bc:	e002      	b.n	80070c4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070be:	f04f 33ff 	mov.w	r3, #4294967295
 80070c2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80070c4:	69bb      	ldr	r3, [r7, #24]
    }
 80070c6:	4618      	mov	r0, r3
 80070c8:	3720      	adds	r7, #32
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b088      	sub	sp, #32
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	60b9      	str	r1, [r7, #8]
 80070d8:	607a      	str	r2, [r7, #4]
 80070da:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	461a      	mov	r2, r3
 80070e6:	21a5      	movs	r1, #165	; 0xa5
 80070e8:	f005 f990 	bl	800c40c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070f6:	3b01      	subs	r3, #1
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	f023 0307 	bic.w	r3, r3, #7
 8007104:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	f003 0307 	and.w	r3, r3, #7
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <prvInitialiseNewTask+0x58>
        __asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	617b      	str	r3, [r7, #20]
    }
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01f      	beq.n	800716c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800712c:	2300      	movs	r3, #0
 800712e:	61fb      	str	r3, [r7, #28]
 8007130:	e012      	b.n	8007158 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	4413      	add	r3, r2
 8007138:	7819      	ldrb	r1, [r3, #0]
 800713a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	4413      	add	r3, r2
 8007140:	3334      	adds	r3, #52	; 0x34
 8007142:	460a      	mov	r2, r1
 8007144:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	4413      	add	r3, r2
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d006      	beq.n	8007160 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	3301      	adds	r3, #1
 8007156:	61fb      	str	r3, [r7, #28]
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	2b09      	cmp	r3, #9
 800715c:	d9e9      	bls.n	8007132 <prvInitialiseNewTask+0x64>
 800715e:	e000      	b.n	8007162 <prvInitialiseNewTask+0x94>
            {
                break;
 8007160:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	2200      	movs	r2, #0
 8007166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800716a:	e003      	b.n	8007174 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	2b06      	cmp	r3, #6
 8007178:	d901      	bls.n	800717e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800717a:	2306      	movs	r3, #6
 800717c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007182:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007188:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	2200      	movs	r2, #0
 800718e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	3304      	adds	r3, #4
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff f86c 	bl	8006272 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	3318      	adds	r3, #24
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff f867 	bl	8006272 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071a8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ac:	f1c3 0207 	rsb	r2, r3, #7
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071b8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80071ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071bc:	3350      	adds	r3, #80	; 0x50
 80071be:	2204      	movs	r2, #4
 80071c0:	2100      	movs	r1, #0
 80071c2:	4618      	mov	r0, r3
 80071c4:	f005 f922 	bl	800c40c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	3354      	adds	r3, #84	; 0x54
 80071cc:	2201      	movs	r2, #1
 80071ce:	2100      	movs	r1, #0
 80071d0:	4618      	mov	r0, r3
 80071d2:	f005 f91b 	bl	800c40c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	68f9      	ldr	r1, [r7, #12]
 80071da:	69b8      	ldr	r0, [r7, #24]
 80071dc:	f001 fd0e 	bl	8008bfc <pxPortInitialiseStack>
 80071e0:	4602      	mov	r2, r0
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80071f2:	bf00      	nop
 80071f4:	3720      	adds	r7, #32
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007204:	f001 fe28 	bl	8008e58 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007208:	4b26      	ldr	r3, [pc, #152]	; (80072a4 <prvAddNewTaskToReadyList+0xa8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3301      	adds	r3, #1
 800720e:	4a25      	ldr	r2, [pc, #148]	; (80072a4 <prvAddNewTaskToReadyList+0xa8>)
 8007210:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007212:	4b25      	ldr	r3, [pc, #148]	; (80072a8 <prvAddNewTaskToReadyList+0xac>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d109      	bne.n	800722e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800721a:	4a23      	ldr	r2, [pc, #140]	; (80072a8 <prvAddNewTaskToReadyList+0xac>)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007220:	4b20      	ldr	r3, [pc, #128]	; (80072a4 <prvAddNewTaskToReadyList+0xa8>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d110      	bne.n	800724a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007228:	f000 fd76 	bl	8007d18 <prvInitialiseTaskLists>
 800722c:	e00d      	b.n	800724a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800722e:	4b1f      	ldr	r3, [pc, #124]	; (80072ac <prvAddNewTaskToReadyList+0xb0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d109      	bne.n	800724a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007236:	4b1c      	ldr	r3, [pc, #112]	; (80072a8 <prvAddNewTaskToReadyList+0xac>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	429a      	cmp	r2, r3
 8007242:	d802      	bhi.n	800724a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007244:	4a18      	ldr	r2, [pc, #96]	; (80072a8 <prvAddNewTaskToReadyList+0xac>)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800724a:	4b19      	ldr	r3, [pc, #100]	; (80072b0 <prvAddNewTaskToReadyList+0xb4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3301      	adds	r3, #1
 8007250:	4a17      	ldr	r2, [pc, #92]	; (80072b0 <prvAddNewTaskToReadyList+0xb4>)
 8007252:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007254:	4b16      	ldr	r3, [pc, #88]	; (80072b0 <prvAddNewTaskToReadyList+0xb4>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	2201      	movs	r2, #1
 8007262:	409a      	lsls	r2, r3
 8007264:	4b13      	ldr	r3, [pc, #76]	; (80072b4 <prvAddNewTaskToReadyList+0xb8>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4313      	orrs	r3, r2
 800726a:	4a12      	ldr	r2, [pc, #72]	; (80072b4 <prvAddNewTaskToReadyList+0xb8>)
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4a0f      	ldr	r2, [pc, #60]	; (80072b8 <prvAddNewTaskToReadyList+0xbc>)
 800727c:	441a      	add	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3304      	adds	r3, #4
 8007282:	4619      	mov	r1, r3
 8007284:	4610      	mov	r0, r2
 8007286:	f7ff f801 	bl	800628c <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800728a:	f001 fe15 	bl	8008eb8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800728e:	4b07      	ldr	r3, [pc, #28]	; (80072ac <prvAddNewTaskToReadyList+0xb0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007296:	4b04      	ldr	r3, [pc, #16]	; (80072a8 <prvAddNewTaskToReadyList+0xac>)
 8007298:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800729a:	bf00      	nop
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20009004 	.word	0x20009004
 80072a8:	20008f04 	.word	0x20008f04
 80072ac:	20009010 	.word	0x20009010
 80072b0:	20009020 	.word	0x20009020
 80072b4:	2000900c 	.word	0x2000900c
 80072b8:	20008f08 	.word	0x20008f08

080072bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d017      	beq.n	80072fe <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80072ce:	4b13      	ldr	r3, [pc, #76]	; (800731c <vTaskDelay+0x60>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <vTaskDelay+0x30>
        __asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	60bb      	str	r3, [r7, #8]
    }
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80072ec:	f000 f98c 	bl	8007608 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072f0:	2100      	movs	r1, #0
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 f8ae 	bl	8008454 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80072f8:	f000 f994 	bl	8007624 <xTaskResumeAll>
 80072fc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d107      	bne.n	8007314 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8007304:	4b06      	ldr	r3, [pc, #24]	; (8007320 <vTaskDelay+0x64>)
 8007306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007314:	bf00      	nop
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	2000902c 	.word	0x2000902c
 8007320:	e000ed04 	.word	0xe000ed04

08007324 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800732c:	f001 fd94 	bl	8008e58 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d102      	bne.n	800733c <vTaskSuspend+0x18>
 8007336:	4b43      	ldr	r3, [pc, #268]	; (8007444 <vTaskSuspend+0x120>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	e000      	b.n	800733e <vTaskSuspend+0x1a>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	3304      	adds	r3, #4
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fffe 	bl	8006346 <uxListRemove>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d115      	bne.n	800737c <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007354:	493c      	ldr	r1, [pc, #240]	; (8007448 <vTaskSuspend+0x124>)
 8007356:	4613      	mov	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	440b      	add	r3, r1
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10a      	bne.n	800737c <vTaskSuspend+0x58>
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736a:	2201      	movs	r2, #1
 800736c:	fa02 f303 	lsl.w	r3, r2, r3
 8007370:	43da      	mvns	r2, r3
 8007372:	4b36      	ldr	r3, [pc, #216]	; (800744c <vTaskSuspend+0x128>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4013      	ands	r3, r2
 8007378:	4a34      	ldr	r2, [pc, #208]	; (800744c <vTaskSuspend+0x128>)
 800737a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	3318      	adds	r3, #24
 8007388:	4618      	mov	r0, r3
 800738a:	f7fe ffdc 	bl	8006346 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	3304      	adds	r3, #4
 8007392:	4619      	mov	r1, r3
 8007394:	482e      	ldr	r0, [pc, #184]	; (8007450 <vTaskSuspend+0x12c>)
 8007396:	f7fe ff79 	bl	800628c <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	e010      	b.n	80073c2 <vTaskSuspend+0x9e>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	4413      	add	r3, r2
 80073a6:	3354      	adds	r3, #84	; 0x54
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d105      	bne.n	80073bc <vTaskSuspend+0x98>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4413      	add	r3, r2
 80073b6:	3354      	adds	r3, #84	; 0x54
 80073b8:	2200      	movs	r2, #0
 80073ba:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	3301      	adds	r3, #1
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	ddeb      	ble.n	80073a0 <vTaskSuspend+0x7c>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 80073c8:	f001 fd76 	bl	8008eb8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80073cc:	4b21      	ldr	r3, [pc, #132]	; (8007454 <vTaskSuspend+0x130>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 80073d4:	f001 fd40 	bl	8008e58 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 80073d8:	f000 fd1c 	bl	8007e14 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 80073dc:	f001 fd6c 	bl	8008eb8 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 80073e0:	4b18      	ldr	r3, [pc, #96]	; (8007444 <vTaskSuspend+0x120>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d127      	bne.n	800743a <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 80073ea:	4b1a      	ldr	r3, [pc, #104]	; (8007454 <vTaskSuspend+0x130>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d017      	beq.n	8007422 <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 80073f2:	4b19      	ldr	r3, [pc, #100]	; (8007458 <vTaskSuspend+0x134>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <vTaskSuspend+0xec>
        __asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	60fb      	str	r3, [r7, #12]
    }
 800740c:	bf00      	nop
 800740e:	e7fe      	b.n	800740e <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 8007410:	4b12      	ldr	r3, [pc, #72]	; (800745c <vTaskSuspend+0x138>)
 8007412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007420:	e00b      	b.n	800743a <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007422:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <vTaskSuspend+0x12c>)
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4b0e      	ldr	r3, [pc, #56]	; (8007460 <vTaskSuspend+0x13c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d103      	bne.n	8007436 <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 800742e:	4b05      	ldr	r3, [pc, #20]	; (8007444 <vTaskSuspend+0x120>)
 8007430:	2200      	movs	r2, #0
 8007432:	601a      	str	r2, [r3, #0]
    }
 8007434:	e001      	b.n	800743a <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 8007436:	f000 fa29 	bl	800788c <vTaskSwitchContext>
    }
 800743a:	bf00      	nop
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	20008f04 	.word	0x20008f04
 8007448:	20008f08 	.word	0x20008f08
 800744c:	2000900c 	.word	0x2000900c
 8007450:	20008ff0 	.word	0x20008ff0
 8007454:	20009010 	.word	0x20009010
 8007458:	2000902c 	.word	0x2000902c
 800745c:	e000ed04 	.word	0xe000ed04
 8007460:	20009004 	.word	0x20009004

08007464 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800746c:	2300      	movs	r3, #0
 800746e:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10a      	bne.n	8007490 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	60fb      	str	r3, [r7, #12]
    }
 800748c:	bf00      	nop
 800748e:	e7fe      	b.n	800748e <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	4a0a      	ldr	r2, [pc, #40]	; (80074c0 <prvTaskIsTaskSuspended+0x5c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d10a      	bne.n	80074b0 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749e:	4a09      	ldr	r2, [pc, #36]	; (80074c4 <prvTaskIsTaskSuspended+0x60>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d005      	beq.n	80074b0 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 80074ac:	2301      	movs	r3, #1
 80074ae:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80074b0:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80074b2:	4618      	mov	r0, r3
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	20008ff0 	.word	0x20008ff0
 80074c4:	20008fc4 	.word	0x20008fc4

080074c8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10a      	bne.n	80074f0 <vTaskResume+0x28>
        __asm volatile
 80074da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	60bb      	str	r3, [r7, #8]
    }
 80074ec:	bf00      	nop
 80074ee:	e7fe      	b.n	80074ee <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80074f0:	4b19      	ldr	r3, [pc, #100]	; (8007558 <vTaskResume+0x90>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d02a      	beq.n	8007550 <vTaskResume+0x88>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d027      	beq.n	8007550 <vTaskResume+0x88>
        {
            taskENTER_CRITICAL();
 8007500:	f001 fcaa 	bl	8008e58 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f7ff ffad 	bl	8007464 <prvTaskIsTaskSuspended>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d01d      	beq.n	800754c <vTaskResume+0x84>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3304      	adds	r3, #4
 8007514:	4618      	mov	r0, r3
 8007516:	f7fe ff16 	bl	8006346 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751e:	2201      	movs	r2, #1
 8007520:	409a      	lsls	r2, r3
 8007522:	4b0e      	ldr	r3, [pc, #56]	; (800755c <vTaskResume+0x94>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4313      	orrs	r3, r2
 8007528:	4a0c      	ldr	r2, [pc, #48]	; (800755c <vTaskResume+0x94>)
 800752a:	6013      	str	r3, [r2, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007530:	4613      	mov	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4a09      	ldr	r2, [pc, #36]	; (8007560 <vTaskResume+0x98>)
 800753a:	441a      	add	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3304      	adds	r3, #4
 8007540:	4619      	mov	r1, r3
 8007542:	4610      	mov	r0, r2
 8007544:	f7fe fea2 	bl	800628c <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007548:	4b03      	ldr	r3, [pc, #12]	; (8007558 <vTaskResume+0x90>)
 800754a:	681b      	ldr	r3, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800754c:	f001 fcb4 	bl	8008eb8 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007550:	bf00      	nop
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20008f04 	.word	0x20008f04
 800755c:	2000900c 	.word	0x2000900c
 8007560:	20008f08 	.word	0x20008f08

08007564 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800756a:	4b20      	ldr	r3, [pc, #128]	; (80075ec <vTaskStartScheduler+0x88>)
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	2300      	movs	r3, #0
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	2300      	movs	r3, #0
 8007574:	2282      	movs	r2, #130	; 0x82
 8007576:	491e      	ldr	r1, [pc, #120]	; (80075f0 <vTaskStartScheduler+0x8c>)
 8007578:	481e      	ldr	r0, [pc, #120]	; (80075f4 <vTaskStartScheduler+0x90>)
 800757a:	f7ff fd67 	bl	800704c <xTaskCreate>
 800757e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d102      	bne.n	800758c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8007586:	f000 ffcb 	bl	8008520 <xTimerCreateTimerTask>
 800758a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d116      	bne.n	80075c0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	60bb      	str	r3, [r7, #8]
    }
 80075a4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80075a6:	4b14      	ldr	r3, [pc, #80]	; (80075f8 <vTaskStartScheduler+0x94>)
 80075a8:	f04f 32ff 	mov.w	r2, #4294967295
 80075ac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80075ae:	4b13      	ldr	r3, [pc, #76]	; (80075fc <vTaskStartScheduler+0x98>)
 80075b0:	2201      	movs	r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075b4:	4b12      	ldr	r3, [pc, #72]	; (8007600 <vTaskStartScheduler+0x9c>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80075ba:	f001 fbab 	bl	8008d14 <xPortStartScheduler>
 80075be:	e00e      	b.n	80075de <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c6:	d10a      	bne.n	80075de <vTaskStartScheduler+0x7a>
        __asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	607b      	str	r3, [r7, #4]
    }
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80075de:	4b09      	ldr	r3, [pc, #36]	; (8007604 <vTaskStartScheduler+0xa0>)
 80075e0:	681b      	ldr	r3, [r3, #0]
}
 80075e2:	bf00      	nop
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20009028 	.word	0x20009028
 80075f0:	08014214 	.word	0x08014214
 80075f4:	08007cf5 	.word	0x08007cf5
 80075f8:	20009024 	.word	0x20009024
 80075fc:	20009010 	.word	0x20009010
 8007600:	20009008 	.word	0x20009008
 8007604:	20000038 	.word	0x20000038

08007608 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800760c:	4b04      	ldr	r3, [pc, #16]	; (8007620 <vTaskSuspendAll+0x18>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3301      	adds	r3, #1
 8007612:	4a03      	ldr	r2, [pc, #12]	; (8007620 <vTaskSuspendAll+0x18>)
 8007614:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8007616:	bf00      	nop
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	2000902c 	.word	0x2000902c

08007624 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800762a:	2300      	movs	r3, #0
 800762c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800762e:	2300      	movs	r3, #0
 8007630:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8007632:	4b3b      	ldr	r3, [pc, #236]	; (8007720 <xTaskResumeAll+0xfc>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10a      	bne.n	8007650 <xTaskResumeAll+0x2c>
        __asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	603b      	str	r3, [r7, #0]
    }
 800764c:	bf00      	nop
 800764e:	e7fe      	b.n	800764e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8007650:	f001 fc02 	bl	8008e58 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8007654:	4b32      	ldr	r3, [pc, #200]	; (8007720 <xTaskResumeAll+0xfc>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3b01      	subs	r3, #1
 800765a:	4a31      	ldr	r2, [pc, #196]	; (8007720 <xTaskResumeAll+0xfc>)
 800765c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800765e:	4b30      	ldr	r3, [pc, #192]	; (8007720 <xTaskResumeAll+0xfc>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d155      	bne.n	8007712 <xTaskResumeAll+0xee>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007666:	4b2f      	ldr	r3, [pc, #188]	; (8007724 <xTaskResumeAll+0x100>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d051      	beq.n	8007712 <xTaskResumeAll+0xee>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800766e:	e02e      	b.n	80076ce <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007670:	4b2d      	ldr	r3, [pc, #180]	; (8007728 <xTaskResumeAll+0x104>)
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	3318      	adds	r3, #24
 800767c:	4618      	mov	r0, r3
 800767e:	f7fe fe62 	bl	8006346 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3304      	adds	r3, #4
 8007686:	4618      	mov	r0, r3
 8007688:	f7fe fe5d 	bl	8006346 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	2201      	movs	r2, #1
 8007692:	409a      	lsls	r2, r3
 8007694:	4b25      	ldr	r3, [pc, #148]	; (800772c <xTaskResumeAll+0x108>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4313      	orrs	r3, r2
 800769a:	4a24      	ldr	r2, [pc, #144]	; (800772c <xTaskResumeAll+0x108>)
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a2:	4613      	mov	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4a21      	ldr	r2, [pc, #132]	; (8007730 <xTaskResumeAll+0x10c>)
 80076ac:	441a      	add	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3304      	adds	r3, #4
 80076b2:	4619      	mov	r1, r3
 80076b4:	4610      	mov	r0, r2
 80076b6:	f7fe fde9 	bl	800628c <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076be:	4b1d      	ldr	r3, [pc, #116]	; (8007734 <xTaskResumeAll+0x110>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d302      	bcc.n	80076ce <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80076c8:	4b1b      	ldr	r3, [pc, #108]	; (8007738 <xTaskResumeAll+0x114>)
 80076ca:	2201      	movs	r2, #1
 80076cc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076ce:	4b16      	ldr	r3, [pc, #88]	; (8007728 <xTaskResumeAll+0x104>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1cc      	bne.n	8007670 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80076dc:	f000 fb9a 	bl	8007e14 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80076e0:	4b16      	ldr	r3, [pc, #88]	; (800773c <xTaskResumeAll+0x118>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d010      	beq.n	800770e <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80076ec:	f000 f838 	bl	8007760 <xTaskIncrementTick>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80076f6:	4b10      	ldr	r3, [pc, #64]	; (8007738 <xTaskResumeAll+0x114>)
 80076f8:	2201      	movs	r2, #1
 80076fa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	3b01      	subs	r3, #1
 8007700:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1f1      	bne.n	80076ec <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8007708:	4b0c      	ldr	r3, [pc, #48]	; (800773c <xTaskResumeAll+0x118>)
 800770a:	2200      	movs	r2, #0
 800770c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800770e:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <xTaskResumeAll+0x114>)
 8007710:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007712:	f001 fbd1 	bl	8008eb8 <vPortExitCritical>

    return xAlreadyYielded;
 8007716:	687b      	ldr	r3, [r7, #4]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	2000902c 	.word	0x2000902c
 8007724:	20009004 	.word	0x20009004
 8007728:	20008fc4 	.word	0x20008fc4
 800772c:	2000900c 	.word	0x2000900c
 8007730:	20008f08 	.word	0x20008f08
 8007734:	20008f04 	.word	0x20008f04
 8007738:	20009018 	.word	0x20009018
 800773c:	20009014 	.word	0x20009014

08007740 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8007746:	4b05      	ldr	r3, [pc, #20]	; (800775c <xTaskGetTickCount+0x1c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800774c:	687b      	ldr	r3, [r7, #4]
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	20009008 	.word	0x20009008

08007760 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007766:	2300      	movs	r3, #0
 8007768:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800776a:	4b3f      	ldr	r3, [pc, #252]	; (8007868 <xTaskIncrementTick+0x108>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d16f      	bne.n	8007852 <xTaskIncrementTick+0xf2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007772:	4b3e      	ldr	r3, [pc, #248]	; (800786c <xTaskIncrementTick+0x10c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3301      	adds	r3, #1
 8007778:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800777a:	4a3c      	ldr	r2, [pc, #240]	; (800786c <xTaskIncrementTick+0x10c>)
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d120      	bne.n	80077c8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8007786:	4b3a      	ldr	r3, [pc, #232]	; (8007870 <xTaskIncrementTick+0x110>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00a      	beq.n	80077a6 <xTaskIncrementTick+0x46>
        __asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	603b      	str	r3, [r7, #0]
    }
 80077a2:	bf00      	nop
 80077a4:	e7fe      	b.n	80077a4 <xTaskIncrementTick+0x44>
 80077a6:	4b32      	ldr	r3, [pc, #200]	; (8007870 <xTaskIncrementTick+0x110>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	4b31      	ldr	r3, [pc, #196]	; (8007874 <xTaskIncrementTick+0x114>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a2f      	ldr	r2, [pc, #188]	; (8007870 <xTaskIncrementTick+0x110>)
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	4a2f      	ldr	r2, [pc, #188]	; (8007874 <xTaskIncrementTick+0x114>)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	4b2f      	ldr	r3, [pc, #188]	; (8007878 <xTaskIncrementTick+0x118>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3301      	adds	r3, #1
 80077c0:	4a2d      	ldr	r2, [pc, #180]	; (8007878 <xTaskIncrementTick+0x118>)
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	f000 fb26 	bl	8007e14 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80077c8:	4b2c      	ldr	r3, [pc, #176]	; (800787c <xTaskIncrementTick+0x11c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d344      	bcc.n	800785c <xTaskIncrementTick+0xfc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077d2:	4b27      	ldr	r3, [pc, #156]	; (8007870 <xTaskIncrementTick+0x110>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077dc:	4b27      	ldr	r3, [pc, #156]	; (800787c <xTaskIncrementTick+0x11c>)
 80077de:	f04f 32ff 	mov.w	r2, #4294967295
 80077e2:	601a      	str	r2, [r3, #0]
                    break;
 80077e4:	e03a      	b.n	800785c <xTaskIncrementTick+0xfc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e6:	4b22      	ldr	r3, [pc, #136]	; (8007870 <xTaskIncrementTick+0x110>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d203      	bcs.n	8007806 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80077fe:	4a1f      	ldr	r2, [pc, #124]	; (800787c <xTaskIncrementTick+0x11c>)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007804:	e02a      	b.n	800785c <xTaskIncrementTick+0xfc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	3304      	adds	r3, #4
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe fd9b 	bl	8006346 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007814:	2b00      	cmp	r3, #0
 8007816:	d004      	beq.n	8007822 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	3318      	adds	r3, #24
 800781c:	4618      	mov	r0, r3
 800781e:	f7fe fd92 	bl	8006346 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	2201      	movs	r2, #1
 8007828:	409a      	lsls	r2, r3
 800782a:	4b15      	ldr	r3, [pc, #84]	; (8007880 <xTaskIncrementTick+0x120>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4313      	orrs	r3, r2
 8007830:	4a13      	ldr	r2, [pc, #76]	; (8007880 <xTaskIncrementTick+0x120>)
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007838:	4613      	mov	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4a10      	ldr	r2, [pc, #64]	; (8007884 <xTaskIncrementTick+0x124>)
 8007842:	441a      	add	r2, r3
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	3304      	adds	r3, #4
 8007848:	4619      	mov	r1, r3
 800784a:	4610      	mov	r0, r2
 800784c:	f7fe fd1e 	bl	800628c <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007850:	e7bf      	b.n	80077d2 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007852:	4b0d      	ldr	r3, [pc, #52]	; (8007888 <xTaskIncrementTick+0x128>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3301      	adds	r3, #1
 8007858:	4a0b      	ldr	r2, [pc, #44]	; (8007888 <xTaskIncrementTick+0x128>)
 800785a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800785c:	697b      	ldr	r3, [r7, #20]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	2000902c 	.word	0x2000902c
 800786c:	20009008 	.word	0x20009008
 8007870:	20008fbc 	.word	0x20008fbc
 8007874:	20008fc0 	.word	0x20008fc0
 8007878:	2000901c 	.word	0x2000901c
 800787c:	20009024 	.word	0x20009024
 8007880:	2000900c 	.word	0x2000900c
 8007884:	20008f08 	.word	0x20008f08
 8007888:	20009014 	.word	0x20009014

0800788c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007892:	4b27      	ldr	r3, [pc, #156]	; (8007930 <vTaskSwitchContext+0xa4>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800789a:	4b26      	ldr	r3, [pc, #152]	; (8007934 <vTaskSwitchContext+0xa8>)
 800789c:	2201      	movs	r2, #1
 800789e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80078a0:	e03f      	b.n	8007922 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80078a2:	4b24      	ldr	r3, [pc, #144]	; (8007934 <vTaskSwitchContext+0xa8>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a8:	4b23      	ldr	r3, [pc, #140]	; (8007938 <vTaskSwitchContext+0xac>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	fab3 f383 	clz	r3, r3
 80078b4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80078b6:	7afb      	ldrb	r3, [r7, #11]
 80078b8:	f1c3 031f 	rsb	r3, r3, #31
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	491f      	ldr	r1, [pc, #124]	; (800793c <vTaskSwitchContext+0xb0>)
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	440b      	add	r3, r1
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	607b      	str	r3, [r7, #4]
    }
 80078e4:	bf00      	nop
 80078e6:	e7fe      	b.n	80078e6 <vTaskSwitchContext+0x5a>
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4a12      	ldr	r2, [pc, #72]	; (800793c <vTaskSwitchContext+0xb0>)
 80078f4:	4413      	add	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	605a      	str	r2, [r3, #4]
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	3308      	adds	r3, #8
 800790a:	429a      	cmp	r2, r3
 800790c:	d104      	bne.n	8007918 <vTaskSwitchContext+0x8c>
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	605a      	str	r2, [r3, #4]
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	4a08      	ldr	r2, [pc, #32]	; (8007940 <vTaskSwitchContext+0xb4>)
 8007920:	6013      	str	r3, [r2, #0]
}
 8007922:	bf00      	nop
 8007924:	371c      	adds	r7, #28
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	2000902c 	.word	0x2000902c
 8007934:	20009018 	.word	0x20009018
 8007938:	2000900c 	.word	0x2000900c
 800793c:	20008f08 	.word	0x20008f08
 8007940:	20008f04 	.word	0x20008f04

08007944 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	60fb      	str	r3, [r7, #12]
    }
 8007966:	bf00      	nop
 8007968:	e7fe      	b.n	8007968 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800796a:	4b07      	ldr	r3, [pc, #28]	; (8007988 <vTaskPlaceOnEventList+0x44>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3318      	adds	r3, #24
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7fe fcae 	bl	80062d4 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007978:	2101      	movs	r1, #1
 800797a:	6838      	ldr	r0, [r7, #0]
 800797c:	f000 fd6a 	bl	8008454 <prvAddCurrentTaskToDelayedList>
}
 8007980:	bf00      	nop
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20008f04 	.word	0x20008f04

0800798c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <vTaskPlaceOnUnorderedEventList+0x28>
        __asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	617b      	str	r3, [r7, #20]
    }
 80079b0:	bf00      	nop
 80079b2:	e7fe      	b.n	80079b2 <vTaskPlaceOnUnorderedEventList+0x26>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
 80079b4:	4b11      	ldr	r3, [pc, #68]	; (80079fc <vTaskPlaceOnUnorderedEventList+0x70>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10a      	bne.n	80079d2 <vTaskPlaceOnUnorderedEventList+0x46>
        __asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	613b      	str	r3, [r7, #16]
    }
 80079ce:	bf00      	nop
 80079d0:	e7fe      	b.n	80079d0 <vTaskPlaceOnUnorderedEventList+0x44>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80079d2:	4b0b      	ldr	r3, [pc, #44]	; (8007a00 <vTaskPlaceOnUnorderedEventList+0x74>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80079dc:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079de:	4b08      	ldr	r3, [pc, #32]	; (8007a00 <vTaskPlaceOnUnorderedEventList+0x74>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3318      	adds	r3, #24
 80079e4:	4619      	mov	r1, r3
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7fe fc50 	bl	800628c <vListInsertEnd>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079ec:	2101      	movs	r1, #1
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fd30 	bl	8008454 <prvAddCurrentTaskToDelayedList>
}
 80079f4:	bf00      	nop
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	2000902c 	.word	0x2000902c
 8007a00:	20008f04 	.word	0x20008f04

08007a04 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10a      	bne.n	8007a2c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	617b      	str	r3, [r7, #20]
    }
 8007a28:	bf00      	nop
 8007a2a:	e7fe      	b.n	8007a2a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <vTaskPlaceOnEventListRestricted+0x54>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3318      	adds	r3, #24
 8007a32:	4619      	mov	r1, r3
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f7fe fc29 	bl	800628c <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8007a40:	f04f 33ff 	mov.w	r3, #4294967295
 8007a44:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a46:	6879      	ldr	r1, [r7, #4]
 8007a48:	68b8      	ldr	r0, [r7, #8]
 8007a4a:	f000 fd03 	bl	8008454 <prvAddCurrentTaskToDelayedList>
    }
 8007a4e:	bf00      	nop
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20008f04 	.word	0x20008f04

08007a5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	60fb      	str	r3, [r7, #12]
    }
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	3318      	adds	r3, #24
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fe fc5a 	bl	8006346 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a92:	4b1d      	ldr	r3, [pc, #116]	; (8007b08 <xTaskRemoveFromEventList+0xac>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d11c      	bne.n	8007ad4 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fe fc51 	bl	8006346 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	409a      	lsls	r2, r3
 8007aac:	4b17      	ldr	r3, [pc, #92]	; (8007b0c <xTaskRemoveFromEventList+0xb0>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	4a16      	ldr	r2, [pc, #88]	; (8007b0c <xTaskRemoveFromEventList+0xb0>)
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aba:	4613      	mov	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4a13      	ldr	r2, [pc, #76]	; (8007b10 <xTaskRemoveFromEventList+0xb4>)
 8007ac4:	441a      	add	r2, r3
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f7fe fbdd 	bl	800628c <vListInsertEnd>
 8007ad2:	e005      	b.n	8007ae0 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	3318      	adds	r3, #24
 8007ad8:	4619      	mov	r1, r3
 8007ada:	480e      	ldr	r0, [pc, #56]	; (8007b14 <xTaskRemoveFromEventList+0xb8>)
 8007adc:	f7fe fbd6 	bl	800628c <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <xTaskRemoveFromEventList+0xbc>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d905      	bls.n	8007afa <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007aee:	2301      	movs	r3, #1
 8007af0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007af2:	4b0a      	ldr	r3, [pc, #40]	; (8007b1c <xTaskRemoveFromEventList+0xc0>)
 8007af4:	2201      	movs	r2, #1
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	e001      	b.n	8007afe <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8007afa:	2300      	movs	r3, #0
 8007afc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8007afe:	697b      	ldr	r3, [r7, #20]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3718      	adds	r7, #24
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	2000902c 	.word	0x2000902c
 8007b0c:	2000900c 	.word	0x2000900c
 8007b10:	20008f08 	.word	0x20008f08
 8007b14:	20008fc4 	.word	0x20008fc4
 8007b18:	20008f04 	.word	0x20008f04
 8007b1c:	20009018 	.word	0x20009018

08007b20 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 8007b2a:	4b29      	ldr	r3, [pc, #164]	; (8007bd0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10a      	bne.n	8007b48 <vTaskRemoveFromUnorderedEventList+0x28>
        __asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	613b      	str	r3, [r7, #16]
    }
 8007b44:	bf00      	nop
 8007b46:	e7fe      	b.n	8007b46 <vTaskRemoveFromUnorderedEventList+0x26>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10a      	bne.n	8007b74 <vTaskRemoveFromUnorderedEventList+0x54>
        __asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	60fb      	str	r3, [r7, #12]
    }
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <vTaskRemoveFromUnorderedEventList+0x52>
    ( void ) uxListRemove( pxEventListItem );
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7fe fbe6 	bl	8006346 <uxListRemove>
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fe fbe1 	bl	8006346 <uxListRemove>
    prvAddTaskToReadyList( pxUnblockedTCB );
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	2201      	movs	r2, #1
 8007b8a:	409a      	lsls	r2, r3
 8007b8c:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	4a10      	ldr	r2, [pc, #64]	; (8007bd4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007b94:	6013      	str	r3, [r2, #0]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4a0d      	ldr	r2, [pc, #52]	; (8007bd8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007ba4:	441a      	add	r2, r3
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	3304      	adds	r3, #4
 8007baa:	4619      	mov	r1, r3
 8007bac:	4610      	mov	r0, r2
 8007bae:	f7fe fb6d 	bl	800628c <vListInsertEnd>

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb6:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d902      	bls.n	8007bc6 <vTaskRemoveFromUnorderedEventList+0xa6>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 8007bc0:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	601a      	str	r2, [r3, #0]
    }
}
 8007bc6:	bf00      	nop
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	2000902c 	.word	0x2000902c
 8007bd4:	2000900c 	.word	0x2000900c
 8007bd8:	20008f08 	.word	0x20008f08
 8007bdc:	20008f04 	.word	0x20008f04
 8007be0:	20009018 	.word	0x20009018

08007be4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bec:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <vTaskInternalSetTimeOutState+0x24>)
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007bf4:	4b05      	ldr	r3, [pc, #20]	; (8007c0c <vTaskInternalSetTimeOutState+0x28>)
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	605a      	str	r2, [r3, #4]
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	2000901c 	.word	0x2000901c
 8007c0c:	20009008 	.word	0x20009008

08007c10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	613b      	str	r3, [r7, #16]
    }
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10a      	bne.n	8007c52 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	60fb      	str	r3, [r7, #12]
    }
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8007c52:	f001 f901 	bl	8008e58 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007c56:	4b1f      	ldr	r3, [pc, #124]	; (8007cd4 <xTaskCheckForTimeOut+0xc4>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6e:	d102      	bne.n	8007c76 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61fb      	str	r3, [r7, #28]
 8007c74:	e026      	b.n	8007cc4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	4b17      	ldr	r3, [pc, #92]	; (8007cd8 <xTaskCheckForTimeOut+0xc8>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d00a      	beq.n	8007c98 <xTaskCheckForTimeOut+0x88>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d305      	bcc.n	8007c98 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	e015      	b.n	8007cc4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d20b      	bcs.n	8007cba <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	1ad2      	subs	r2, r2, r3
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7ff ff98 	bl	8007be4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	61fb      	str	r3, [r7, #28]
 8007cb8:	e004      	b.n	8007cc4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007cc4:	f001 f8f8 	bl	8008eb8 <vPortExitCritical>

    return xReturn;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3720      	adds	r7, #32
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	20009008 	.word	0x20009008
 8007cd8:	2000901c 	.word	0x2000901c

08007cdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007ce0:	4b03      	ldr	r3, [pc, #12]	; (8007cf0 <vTaskMissedYield+0x14>)
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
}
 8007ce6:	bf00      	nop
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	20009018 	.word	0x20009018

08007cf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007cfc:	f000 f84c 	bl	8007d98 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8007d00:	4b04      	ldr	r3, [pc, #16]	; (8007d14 <prvIdleTask+0x20>)
 8007d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007d10:	e7f4      	b.n	8007cfc <prvIdleTask+0x8>
 8007d12:	bf00      	nop
 8007d14:	e000ed04 	.word	0xe000ed04

08007d18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d1e:	2300      	movs	r3, #0
 8007d20:	607b      	str	r3, [r7, #4]
 8007d22:	e00c      	b.n	8007d3e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	4613      	mov	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4a12      	ldr	r2, [pc, #72]	; (8007d78 <prvInitialiseTaskLists+0x60>)
 8007d30:	4413      	add	r3, r2
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe fa7d 	bl	8006232 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	607b      	str	r3, [r7, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b06      	cmp	r3, #6
 8007d42:	d9ef      	bls.n	8007d24 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007d44:	480d      	ldr	r0, [pc, #52]	; (8007d7c <prvInitialiseTaskLists+0x64>)
 8007d46:	f7fe fa74 	bl	8006232 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007d4a:	480d      	ldr	r0, [pc, #52]	; (8007d80 <prvInitialiseTaskLists+0x68>)
 8007d4c:	f7fe fa71 	bl	8006232 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007d50:	480c      	ldr	r0, [pc, #48]	; (8007d84 <prvInitialiseTaskLists+0x6c>)
 8007d52:	f7fe fa6e 	bl	8006232 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8007d56:	480c      	ldr	r0, [pc, #48]	; (8007d88 <prvInitialiseTaskLists+0x70>)
 8007d58:	f7fe fa6b 	bl	8006232 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8007d5c:	480b      	ldr	r0, [pc, #44]	; (8007d8c <prvInitialiseTaskLists+0x74>)
 8007d5e:	f7fe fa68 	bl	8006232 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007d62:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <prvInitialiseTaskLists+0x78>)
 8007d64:	4a05      	ldr	r2, [pc, #20]	; (8007d7c <prvInitialiseTaskLists+0x64>)
 8007d66:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d68:	4b0a      	ldr	r3, [pc, #40]	; (8007d94 <prvInitialiseTaskLists+0x7c>)
 8007d6a:	4a05      	ldr	r2, [pc, #20]	; (8007d80 <prvInitialiseTaskLists+0x68>)
 8007d6c:	601a      	str	r2, [r3, #0]
}
 8007d6e:	bf00      	nop
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20008f08 	.word	0x20008f08
 8007d7c:	20008f94 	.word	0x20008f94
 8007d80:	20008fa8 	.word	0x20008fa8
 8007d84:	20008fc4 	.word	0x20008fc4
 8007d88:	20008fd8 	.word	0x20008fd8
 8007d8c:	20008ff0 	.word	0x20008ff0
 8007d90:	20008fbc 	.word	0x20008fbc
 8007d94:	20008fc0 	.word	0x20008fc0

08007d98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d9e:	e019      	b.n	8007dd4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007da0:	f001 f85a 	bl	8008e58 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007da4:	4b10      	ldr	r3, [pc, #64]	; (8007de8 <prvCheckTasksWaitingTermination+0x50>)
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3304      	adds	r3, #4
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fe fac8 	bl	8006346 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007db6:	4b0d      	ldr	r3, [pc, #52]	; (8007dec <prvCheckTasksWaitingTermination+0x54>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	4a0b      	ldr	r2, [pc, #44]	; (8007dec <prvCheckTasksWaitingTermination+0x54>)
 8007dbe:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007dc0:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <prvCheckTasksWaitingTermination+0x58>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	4a0a      	ldr	r2, [pc, #40]	; (8007df0 <prvCheckTasksWaitingTermination+0x58>)
 8007dc8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8007dca:	f001 f875 	bl	8008eb8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f810 	bl	8007df4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dd4:	4b06      	ldr	r3, [pc, #24]	; (8007df0 <prvCheckTasksWaitingTermination+0x58>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e1      	bne.n	8007da0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007ddc:	bf00      	nop
 8007dde:	bf00      	nop
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	20008fd8 	.word	0x20008fd8
 8007dec:	20009004 	.word	0x20009004
 8007df0:	20008fec 	.word	0x20008fec

08007df4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e00:	4618      	mov	r0, r3
 8007e02:	f001 fa2b 	bl	800925c <vPortFree>
                vPortFree( pxTCB );
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fa28 	bl	800925c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e18:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <prvResetNextTaskUnblockTime+0x30>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d104      	bne.n	8007e2c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007e22:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <prvResetNextTaskUnblockTime+0x34>)
 8007e24:	f04f 32ff 	mov.w	r2, #4294967295
 8007e28:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007e2a:	e005      	b.n	8007e38 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e2c:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <prvResetNextTaskUnblockTime+0x30>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a04      	ldr	r2, [pc, #16]	; (8007e48 <prvResetNextTaskUnblockTime+0x34>)
 8007e36:	6013      	str	r3, [r2, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	20008fbc 	.word	0x20008fbc
 8007e48:	20009024 	.word	0x20009024

08007e4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007e52:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <xTaskGetSchedulerState+0x34>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d102      	bne.n	8007e60 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	607b      	str	r3, [r7, #4]
 8007e5e:	e008      	b.n	8007e72 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e60:	4b08      	ldr	r3, [pc, #32]	; (8007e84 <xTaskGetSchedulerState+0x38>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007e68:	2302      	movs	r3, #2
 8007e6a:	607b      	str	r3, [r7, #4]
 8007e6c:	e001      	b.n	8007e72 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007e72:	687b      	ldr	r3, [r7, #4]
    }
 8007e74:	4618      	mov	r0, r3
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	20009010 	.word	0x20009010
 8007e84:	2000902c 	.word	0x2000902c

08007e88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d063      	beq.n	8007f66 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007e9e:	4b34      	ldr	r3, [pc, #208]	; (8007f70 <xTaskPriorityDisinherit+0xe8>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d00a      	beq.n	8007ebe <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	60fb      	str	r3, [r7, #12]
    }
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10a      	bne.n	8007edc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	60bb      	str	r3, [r7, #8]
    }
 8007ed8:	bf00      	nop
 8007eda:	e7fe      	b.n	8007eda <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ee0:	1e5a      	subs	r2, r3, #1
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d039      	beq.n	8007f66 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d135      	bne.n	8007f66 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	3304      	adds	r3, #4
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fe fa21 	bl	8006346 <uxListRemove>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10a      	bne.n	8007f20 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0e:	2201      	movs	r2, #1
 8007f10:	fa02 f303 	lsl.w	r3, r2, r3
 8007f14:	43da      	mvns	r2, r3
 8007f16:	4b17      	ldr	r3, [pc, #92]	; (8007f74 <xTaskPriorityDisinherit+0xec>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	4a15      	ldr	r2, [pc, #84]	; (8007f74 <xTaskPriorityDisinherit+0xec>)
 8007f1e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2c:	f1c3 0207 	rsb	r2, r3, #7
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f38:	2201      	movs	r2, #1
 8007f3a:	409a      	lsls	r2, r3
 8007f3c:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <xTaskPriorityDisinherit+0xec>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	4a0c      	ldr	r2, [pc, #48]	; (8007f74 <xTaskPriorityDisinherit+0xec>)
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4a09      	ldr	r2, [pc, #36]	; (8007f78 <xTaskPriorityDisinherit+0xf0>)
 8007f54:	441a      	add	r2, r3
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	f7fe f995 	bl	800628c <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007f62:	2301      	movs	r3, #1
 8007f64:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007f66:	697b      	ldr	r3, [r7, #20]
    }
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20008f04 	.word	0x20008f04
 8007f74:	2000900c 	.word	0x2000900c
 8007f78:	20008f08 	.word	0x20008f08

08007f7c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007f82:	4b09      	ldr	r3, [pc, #36]	; (8007fa8 <uxTaskResetEventItemValue+0x2c>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f8a:	4b07      	ldr	r3, [pc, #28]	; (8007fa8 <uxTaskResetEventItemValue+0x2c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f90:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <uxTaskResetEventItemValue+0x2c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f1c2 0207 	rsb	r2, r2, #7
 8007f98:	619a      	str	r2, [r3, #24]

    return uxReturn;
 8007f9a:	687b      	ldr	r3, [r7, #4]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	20008f04 	.word	0x20008f04

08007fac <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00a      	beq.n	8007fd6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	613b      	str	r3, [r7, #16]
    }
 8007fd2:	bf00      	nop
 8007fd4:	e7fe      	b.n	8007fd4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8007fd6:	f000 ff3f 	bl	8008e58 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8007fda:	4b32      	ldr	r3, [pc, #200]	; (80080a4 <xTaskGenericNotifyWait+0xf8>)
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	3354      	adds	r3, #84	; 0x54
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d022      	beq.n	8008032 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8007fec:	4b2d      	ldr	r3, [pc, #180]	; (80080a4 <xTaskGenericNotifyWait+0xf8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	3214      	adds	r2, #20
 8007ff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	43d2      	mvns	r2, r2
 8007ffc:	4011      	ands	r1, r2
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	3214      	adds	r2, #20
 8008002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8008006:	4b27      	ldr	r3, [pc, #156]	; (80080a4 <xTaskGenericNotifyWait+0xf8>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	4413      	add	r3, r2
 800800e:	3354      	adds	r3, #84	; 0x54
 8008010:	2201      	movs	r2, #1
 8008012:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00b      	beq.n	8008032 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800801a:	2101      	movs	r1, #1
 800801c:	6a38      	ldr	r0, [r7, #32]
 800801e:	f000 fa19 	bl	8008454 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8008022:	4b21      	ldr	r3, [pc, #132]	; (80080a8 <xTaskGenericNotifyWait+0xfc>)
 8008024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008032:	f000 ff41 	bl	8008eb8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8008036:	f000 ff0f 	bl	8008e58 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d007      	beq.n	8008050 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8008040:	4b18      	ldr	r3, [pc, #96]	; (80080a4 <xTaskGenericNotifyWait+0xf8>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	3214      	adds	r2, #20
 8008048:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8008050:	4b14      	ldr	r3, [pc, #80]	; (80080a4 <xTaskGenericNotifyWait+0xf8>)
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	3354      	adds	r3, #84	; 0x54
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d002      	beq.n	8008068 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8008062:	2300      	movs	r3, #0
 8008064:	617b      	str	r3, [r7, #20]
 8008066:	e00e      	b.n	8008086 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8008068:	4b0e      	ldr	r3, [pc, #56]	; (80080a4 <xTaskGenericNotifyWait+0xf8>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	3214      	adds	r2, #20
 8008070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	43d2      	mvns	r2, r2
 8008078:	4011      	ands	r1, r2
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	3214      	adds	r2, #20
 800807e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8008082:	2301      	movs	r3, #1
 8008084:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8008086:	4b07      	ldr	r3, [pc, #28]	; (80080a4 <xTaskGenericNotifyWait+0xf8>)
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	4413      	add	r3, r2
 800808e:	3354      	adds	r3, #84	; 0x54
 8008090:	2200      	movs	r2, #0
 8008092:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8008094:	f000 ff10 	bl	8008eb8 <vPortExitCritical>

        return xReturn;
 8008098:	697b      	ldr	r3, [r7, #20]
    }
 800809a:	4618      	mov	r0, r3
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20008f04 	.word	0x20008f04
 80080a8:	e000ed04 	.word	0xe000ed04

080080ac <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b08c      	sub	sp, #48	; 0x30
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
 80080b8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80080ba:	2301      	movs	r3, #1
 80080bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00a      	beq.n	80080da <xTaskGenericNotify+0x2e>
        __asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	623b      	str	r3, [r7, #32]
    }
 80080d6:	bf00      	nop
 80080d8:	e7fe      	b.n	80080d8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10a      	bne.n	80080f6 <xTaskGenericNotify+0x4a>
        __asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	61fb      	str	r3, [r7, #28]
    }
 80080f2:	bf00      	nop
 80080f4:	e7fe      	b.n	80080f4 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80080fa:	f000 fead 	bl	8008e58 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	2b00      	cmp	r3, #0
 8008102:	d006      	beq.n	8008112 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8008104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	3214      	adds	r2, #20
 800810a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800810e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008110:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8008112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4413      	add	r3, r2
 8008118:	3354      	adds	r3, #84	; 0x54
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8008120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	4413      	add	r3, r2
 8008126:	3354      	adds	r3, #84	; 0x54
 8008128:	2202      	movs	r2, #2
 800812a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	2b04      	cmp	r3, #4
 8008130:	d83b      	bhi.n	80081aa <xTaskGenericNotify+0xfe>
 8008132:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <xTaskGenericNotify+0x8c>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	080081c9 	.word	0x080081c9
 800813c:	0800814d 	.word	0x0800814d
 8008140:	08008169 	.word	0x08008169
 8008144:	08008181 	.word	0x08008181
 8008148:	0800818f 	.word	0x0800818f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	3214      	adds	r2, #20
 8008152:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	ea42 0103 	orr.w	r1, r2, r3
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	3214      	adds	r2, #20
 8008162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8008166:	e032      	b.n	80081ce <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	3214      	adds	r2, #20
 800816e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008172:	1c59      	adds	r1, r3, #1
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	3214      	adds	r2, #20
 800817a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800817e:	e026      	b.n	80081ce <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	3214      	adds	r2, #20
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800818c:	e01f      	b.n	80081ce <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800818e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008192:	2b02      	cmp	r3, #2
 8008194:	d006      	beq.n	80081a4 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	3214      	adds	r2, #20
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80081a2:	e014      	b.n	80081ce <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80081a4:	2300      	movs	r3, #0
 80081a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80081a8:	e011      	b.n	80081ce <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80081aa:	4b25      	ldr	r3, [pc, #148]	; (8008240 <xTaskGenericNotify+0x194>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00c      	beq.n	80081cc <xTaskGenericNotify+0x120>
        __asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	61bb      	str	r3, [r7, #24]
    }
 80081c4:	bf00      	nop
 80081c6:	e7fe      	b.n	80081c6 <xTaskGenericNotify+0x11a>
                    break;
 80081c8:	bf00      	nop
 80081ca:	e000      	b.n	80081ce <xTaskGenericNotify+0x122>

                    break;
 80081cc:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80081ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d12c      	bne.n	8008230 <xTaskGenericNotify+0x184>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	3304      	adds	r3, #4
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe f8b3 	bl	8006346 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	2201      	movs	r2, #1
 80081e6:	409a      	lsls	r2, r3
 80081e8:	4b16      	ldr	r3, [pc, #88]	; (8008244 <xTaskGenericNotify+0x198>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	4a15      	ldr	r2, [pc, #84]	; (8008244 <xTaskGenericNotify+0x198>)
 80081f0:	6013      	str	r3, [r2, #0]
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4a12      	ldr	r2, [pc, #72]	; (8008248 <xTaskGenericNotify+0x19c>)
 8008200:	441a      	add	r2, r3
 8008202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008204:	3304      	adds	r3, #4
 8008206:	4619      	mov	r1, r3
 8008208:	4610      	mov	r0, r2
 800820a:	f7fe f83f 	bl	800628c <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00a      	beq.n	800822c <xTaskGenericNotify+0x180>
        __asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	617b      	str	r3, [r7, #20]
    }
 8008228:	bf00      	nop
 800822a:	e7fe      	b.n	800822a <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800822c:	4b07      	ldr	r3, [pc, #28]	; (800824c <xTaskGenericNotify+0x1a0>)
 800822e:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008230:	f000 fe42 	bl	8008eb8 <vPortExitCritical>

        return xReturn;
 8008234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8008236:	4618      	mov	r0, r3
 8008238:	3730      	adds	r7, #48	; 0x30
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20009008 	.word	0x20009008
 8008244:	2000900c 	.word	0x2000900c
 8008248:	20008f08 	.word	0x20008f08
 800824c:	20008f04 	.word	0x20008f04

08008250 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8008250:	b580      	push	{r7, lr}
 8008252:	b090      	sub	sp, #64	; 0x40
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800825e:	2301      	movs	r3, #1
 8008260:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10a      	bne.n	800827e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800827a:	bf00      	nop
 800827c:	e7fe      	b.n	800827c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800829a:	f000 febf 	bl	800901c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80082a2:	f3ef 8211 	mrs	r2, BASEPRI
 80082a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	627a      	str	r2, [r7, #36]	; 0x24
 80082b8:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082bc:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80082be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d006      	beq.n	80082d2 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80082c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	3214      	adds	r2, #20
 80082ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082d0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80082d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	4413      	add	r3, r2
 80082d8:	3354      	adds	r3, #84	; 0x54
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80082e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	4413      	add	r3, r2
 80082e6:	3354      	adds	r3, #84	; 0x54
 80082e8:	2202      	movs	r2, #2
 80082ea:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80082ec:	78fb      	ldrb	r3, [r7, #3]
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d83b      	bhi.n	800836a <xTaskGenericNotifyFromISR+0x11a>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <xTaskGenericNotifyFromISR+0xa8>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	08008389 	.word	0x08008389
 80082fc:	0800830d 	.word	0x0800830d
 8008300:	08008329 	.word	0x08008329
 8008304:	08008341 	.word	0x08008341
 8008308:	0800834f 	.word	0x0800834f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	3214      	adds	r2, #20
 8008312:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	ea42 0103 	orr.w	r1, r2, r3
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	3214      	adds	r2, #20
 8008322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8008326:	e032      	b.n	800838e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8008328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	3214      	adds	r2, #20
 800832e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008332:	1c59      	adds	r1, r3, #1
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	3214      	adds	r2, #20
 800833a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800833e:	e026      	b.n	800838e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	3214      	adds	r2, #20
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800834c:	e01f      	b.n	800838e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800834e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008352:	2b02      	cmp	r3, #2
 8008354:	d006      	beq.n	8008364 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	3214      	adds	r2, #20
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8008362:	e014      	b.n	800838e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8008364:	2300      	movs	r3, #0
 8008366:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8008368:	e011      	b.n	800838e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800836a:	4b33      	ldr	r3, [pc, #204]	; (8008438 <xTaskGenericNotifyFromISR+0x1e8>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00c      	beq.n	800838c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	61fb      	str	r3, [r7, #28]
    }
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8008388:	bf00      	nop
 800838a:	e000      	b.n	800838e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800838c:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800838e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008392:	2b01      	cmp	r3, #1
 8008394:	d145      	bne.n	8008422 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	61bb      	str	r3, [r7, #24]
    }
 80083b0:	bf00      	nop
 80083b2:	e7fe      	b.n	80083b2 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083b4:	4b21      	ldr	r3, [pc, #132]	; (800843c <xTaskGenericNotifyFromISR+0x1ec>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d11c      	bne.n	80083f6 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	3304      	adds	r3, #4
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fd ffc0 	bl	8006346 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80083c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ca:	2201      	movs	r2, #1
 80083cc:	409a      	lsls	r2, r3
 80083ce:	4b1c      	ldr	r3, [pc, #112]	; (8008440 <xTaskGenericNotifyFromISR+0x1f0>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	4a1a      	ldr	r2, [pc, #104]	; (8008440 <xTaskGenericNotifyFromISR+0x1f0>)
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083dc:	4613      	mov	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4a17      	ldr	r2, [pc, #92]	; (8008444 <xTaskGenericNotifyFromISR+0x1f4>)
 80083e6:	441a      	add	r2, r3
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	3304      	adds	r3, #4
 80083ec:	4619      	mov	r1, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	f7fd ff4c 	bl	800628c <vListInsertEnd>
 80083f4:	e005      	b.n	8008402 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	3318      	adds	r3, #24
 80083fa:	4619      	mov	r1, r3
 80083fc:	4812      	ldr	r0, [pc, #72]	; (8008448 <xTaskGenericNotifyFromISR+0x1f8>)
 80083fe:	f7fd ff45 	bl	800628c <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008406:	4b11      	ldr	r3, [pc, #68]	; (800844c <xTaskGenericNotifyFromISR+0x1fc>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	429a      	cmp	r2, r3
 800840e:	d908      	bls.n	8008422 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8008410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8008416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008418:	2201      	movs	r2, #1
 800841a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800841c:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <xTaskGenericNotifyFromISR+0x200>)
 800841e:	2201      	movs	r2, #1
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008424:	617b      	str	r3, [r7, #20]
        __asm volatile
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f383 8811 	msr	BASEPRI, r3
    }
 800842c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800842e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8008430:	4618      	mov	r0, r3
 8008432:	3740      	adds	r7, #64	; 0x40
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20009008 	.word	0x20009008
 800843c:	2000902c 	.word	0x2000902c
 8008440:	2000900c 	.word	0x2000900c
 8008444:	20008f08 	.word	0x20008f08
 8008448:	20008fc4 	.word	0x20008fc4
 800844c:	20008f04 	.word	0x20008f04
 8008450:	20009018 	.word	0x20009018

08008454 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800845e:	4b29      	ldr	r3, [pc, #164]	; (8008504 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008464:	4b28      	ldr	r3, [pc, #160]	; (8008508 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3304      	adds	r3, #4
 800846a:	4618      	mov	r0, r3
 800846c:	f7fd ff6b 	bl	8006346 <uxListRemove>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10b      	bne.n	800848e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008476:	4b24      	ldr	r3, [pc, #144]	; (8008508 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	2201      	movs	r2, #1
 800847e:	fa02 f303 	lsl.w	r3, r2, r3
 8008482:	43da      	mvns	r2, r3
 8008484:	4b21      	ldr	r3, [pc, #132]	; (800850c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4013      	ands	r3, r2
 800848a:	4a20      	ldr	r2, [pc, #128]	; (800850c <prvAddCurrentTaskToDelayedList+0xb8>)
 800848c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008494:	d10a      	bne.n	80084ac <prvAddCurrentTaskToDelayedList+0x58>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d007      	beq.n	80084ac <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800849c:	4b1a      	ldr	r3, [pc, #104]	; (8008508 <prvAddCurrentTaskToDelayedList+0xb4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3304      	adds	r3, #4
 80084a2:	4619      	mov	r1, r3
 80084a4:	481a      	ldr	r0, [pc, #104]	; (8008510 <prvAddCurrentTaskToDelayedList+0xbc>)
 80084a6:	f7fd fef1 	bl	800628c <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80084aa:	e026      	b.n	80084fa <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084b4:	4b14      	ldr	r3, [pc, #80]	; (8008508 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d209      	bcs.n	80084d8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084c4:	4b13      	ldr	r3, [pc, #76]	; (8008514 <prvAddCurrentTaskToDelayedList+0xc0>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fd feff 	bl	80062d4 <vListInsert>
}
 80084d6:	e010      	b.n	80084fa <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084d8:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <prvAddCurrentTaskToDelayedList+0xc4>)
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3304      	adds	r3, #4
 80084e2:	4619      	mov	r1, r3
 80084e4:	4610      	mov	r0, r2
 80084e6:	f7fd fef5 	bl	80062d4 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80084ea:	4b0c      	ldr	r3, [pc, #48]	; (800851c <prvAddCurrentTaskToDelayedList+0xc8>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d202      	bcs.n	80084fa <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80084f4:	4a09      	ldr	r2, [pc, #36]	; (800851c <prvAddCurrentTaskToDelayedList+0xc8>)
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	6013      	str	r3, [r2, #0]
}
 80084fa:	bf00      	nop
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	20009008 	.word	0x20009008
 8008508:	20008f04 	.word	0x20008f04
 800850c:	2000900c 	.word	0x2000900c
 8008510:	20008ff0 	.word	0x20008ff0
 8008514:	20008fc0 	.word	0x20008fc0
 8008518:	20008fbc 	.word	0x20008fbc
 800851c:	20009024 	.word	0x20009024

08008520 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8008526:	2300      	movs	r3, #0
 8008528:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800852a:	f000 fb31 	bl	8008b90 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800852e:	4b11      	ldr	r3, [pc, #68]	; (8008574 <xTimerCreateTimerTask+0x54>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00b      	beq.n	800854e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8008536:	4b10      	ldr	r3, [pc, #64]	; (8008578 <xTimerCreateTimerTask+0x58>)
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	2302      	movs	r3, #2
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	2300      	movs	r3, #0
 8008540:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008544:	490d      	ldr	r1, [pc, #52]	; (800857c <xTimerCreateTimerTask+0x5c>)
 8008546:	480e      	ldr	r0, [pc, #56]	; (8008580 <xTimerCreateTimerTask+0x60>)
 8008548:	f7fe fd80 	bl	800704c <xTaskCreate>
 800854c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10a      	bne.n	800856a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	603b      	str	r3, [r7, #0]
    }
 8008566:	bf00      	nop
 8008568:	e7fe      	b.n	8008568 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800856a:	687b      	ldr	r3, [r7, #4]
    }
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20009060 	.word	0x20009060
 8008578:	20009064 	.word	0x20009064
 800857c:	0801421c 	.word	0x0801421c
 8008580:	08008771 	.word	0x08008771

08008584 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8008584:	b580      	push	{r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af02      	add	r7, sp, #8
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
 8008590:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008592:	202c      	movs	r0, #44	; 0x2c
 8008594:	f000 fd82 	bl	800909c <pvPortMalloc>
 8008598:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00d      	beq.n	80085bc <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 f805 	bl	80085c6 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80085bc:	697b      	ldr	r3, [r7, #20]
        }
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b086      	sub	sp, #24
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	60b9      	str	r1, [r7, #8]
 80085d0:	607a      	str	r2, [r7, #4]
 80085d2:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10a      	bne.n	80085f0 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	617b      	str	r3, [r7, #20]
    }
 80085ec:	bf00      	nop
 80085ee:	e7fe      	b.n	80085ee <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d01e      	beq.n	8008634 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 80085f6:	f000 facb 	bl	8008b90 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	6a3a      	ldr	r2, [r7, #32]
 8008610:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	3304      	adds	r3, #4
 8008616:	4618      	mov	r0, r3
 8008618:	f7fd fe2b 	bl	8006272 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d008      	beq.n	8008634 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008628:	f043 0304 	orr.w	r3, r3, #4
 800862c:	b2da      	uxtb	r2, r3
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8008634:	bf00      	nop
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800863c:	b580      	push	{r7, lr}
 800863e:	b08a      	sub	sp, #40	; 0x28
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800864a:	2300      	movs	r3, #0
 800864c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10a      	bne.n	800866a <xTimerGenericCommand+0x2e>
        __asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	623b      	str	r3, [r7, #32]
    }
 8008666:	bf00      	nop
 8008668:	e7fe      	b.n	8008668 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800866a:	4b1a      	ldr	r3, [pc, #104]	; (80086d4 <xTimerGenericCommand+0x98>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d02a      	beq.n	80086c8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b05      	cmp	r3, #5
 8008682:	dc18      	bgt.n	80086b6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008684:	f7ff fbe2 	bl	8007e4c <xTaskGetSchedulerState>
 8008688:	4603      	mov	r3, r0
 800868a:	2b02      	cmp	r3, #2
 800868c:	d109      	bne.n	80086a2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800868e:	4b11      	ldr	r3, [pc, #68]	; (80086d4 <xTimerGenericCommand+0x98>)
 8008690:	6818      	ldr	r0, [r3, #0]
 8008692:	f107 0114 	add.w	r1, r7, #20
 8008696:	2300      	movs	r3, #0
 8008698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800869a:	f7fd ff5b 	bl	8006554 <xQueueGenericSend>
 800869e:	6278      	str	r0, [r7, #36]	; 0x24
 80086a0:	e012      	b.n	80086c8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80086a2:	4b0c      	ldr	r3, [pc, #48]	; (80086d4 <xTimerGenericCommand+0x98>)
 80086a4:	6818      	ldr	r0, [r3, #0]
 80086a6:	f107 0114 	add.w	r1, r7, #20
 80086aa:	2300      	movs	r3, #0
 80086ac:	2200      	movs	r2, #0
 80086ae:	f7fd ff51 	bl	8006554 <xQueueGenericSend>
 80086b2:	6278      	str	r0, [r7, #36]	; 0x24
 80086b4:	e008      	b.n	80086c8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80086b6:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <xTimerGenericCommand+0x98>)
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	f107 0114 	add.w	r1, r7, #20
 80086be:	2300      	movs	r3, #0
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	f7fe f82d 	bl	8006720 <xQueueGenericSendFromISR>
 80086c6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80086ca:	4618      	mov	r0, r3
 80086cc:	3728      	adds	r7, #40	; 0x28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20009060 	.word	0x20009060

080086d8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af02      	add	r7, sp, #8
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e2:	4b22      	ldr	r3, [pc, #136]	; (800876c <prvProcessExpiredTimer+0x94>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	3304      	adds	r3, #4
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fd fe28 	bl	8006346 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b00      	cmp	r3, #0
 8008702:	d022      	beq.n	800874a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	699a      	ldr	r2, [r3, #24]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	18d1      	adds	r1, r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	6978      	ldr	r0, [r7, #20]
 8008712:	f000 f8d1 	bl	80088b8 <prvInsertTimerInActiveList>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d01f      	beq.n	800875c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800871c:	2300      	movs	r3, #0
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	2300      	movs	r3, #0
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	2100      	movs	r1, #0
 8008726:	6978      	ldr	r0, [r7, #20]
 8008728:	f7ff ff88 	bl	800863c <xTimerGenericCommand>
 800872c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d113      	bne.n	800875c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8008734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008738:	f383 8811 	msr	BASEPRI, r3
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	60fb      	str	r3, [r7, #12]
    }
 8008746:	bf00      	nop
 8008748:	e7fe      	b.n	8008748 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008750:	f023 0301 	bic.w	r3, r3, #1
 8008754:	b2da      	uxtb	r2, r3
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	6978      	ldr	r0, [r7, #20]
 8008762:	4798      	blx	r3
    }
 8008764:	bf00      	nop
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	20009058 	.word	0x20009058

08008770 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008778:	f107 0308 	add.w	r3, r7, #8
 800877c:	4618      	mov	r0, r3
 800877e:	f000 f857 	bl	8008830 <prvGetNextExpireTime>
 8008782:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	4619      	mov	r1, r3
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 f803 	bl	8008794 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800878e:	f000 f8d5 	bl	800893c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008792:	e7f1      	b.n	8008778 <prvTimerTask+0x8>

08008794 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800879e:	f7fe ff33 	bl	8007608 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087a2:	f107 0308 	add.w	r3, r7, #8
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 f866 	bl	8008878 <prvSampleTimeNow>
 80087ac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d130      	bne.n	8008816 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10a      	bne.n	80087d0 <prvProcessTimerOrBlockTask+0x3c>
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d806      	bhi.n	80087d0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80087c2:	f7fe ff2f 	bl	8007624 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80087c6:	68f9      	ldr	r1, [r7, #12]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff ff85 	bl	80086d8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80087ce:	e024      	b.n	800881a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d008      	beq.n	80087e8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80087d6:	4b13      	ldr	r3, [pc, #76]	; (8008824 <prvProcessTimerOrBlockTask+0x90>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <prvProcessTimerOrBlockTask+0x50>
 80087e0:	2301      	movs	r3, #1
 80087e2:	e000      	b.n	80087e6 <prvProcessTimerOrBlockTask+0x52>
 80087e4:	2300      	movs	r3, #0
 80087e6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80087e8:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <prvProcessTimerOrBlockTask+0x94>)
 80087ea:	6818      	ldr	r0, [r3, #0]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	4619      	mov	r1, r3
 80087f6:	f7fe fbf5 	bl	8006fe4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80087fa:	f7fe ff13 	bl	8007624 <xTaskResumeAll>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10a      	bne.n	800881a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8008804:	4b09      	ldr	r3, [pc, #36]	; (800882c <prvProcessTimerOrBlockTask+0x98>)
 8008806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	f3bf 8f6f 	isb	sy
    }
 8008814:	e001      	b.n	800881a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8008816:	f7fe ff05 	bl	8007624 <xTaskResumeAll>
    }
 800881a:	bf00      	nop
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	2000905c 	.word	0x2000905c
 8008828:	20009060 	.word	0x20009060
 800882c:	e000ed04 	.word	0xe000ed04

08008830 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008838:	4b0e      	ldr	r3, [pc, #56]	; (8008874 <prvGetNextExpireTime+0x44>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d101      	bne.n	8008846 <prvGetNextExpireTime+0x16>
 8008842:	2201      	movs	r2, #1
 8008844:	e000      	b.n	8008848 <prvGetNextExpireTime+0x18>
 8008846:	2200      	movs	r2, #0
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d105      	bne.n	8008860 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008854:	4b07      	ldr	r3, [pc, #28]	; (8008874 <prvGetNextExpireTime+0x44>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	60fb      	str	r3, [r7, #12]
 800885e:	e001      	b.n	8008864 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008860:	2300      	movs	r3, #0
 8008862:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008864:	68fb      	ldr	r3, [r7, #12]
    }
 8008866:	4618      	mov	r0, r3
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20009058 	.word	0x20009058

08008878 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008880:	f7fe ff5e 	bl	8007740 <xTaskGetTickCount>
 8008884:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008886:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <prvSampleTimeNow+0x3c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	429a      	cmp	r2, r3
 800888e:	d205      	bcs.n	800889c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008890:	f000 f91a 	bl	8008ac8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	e002      	b.n	80088a2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80088a2:	4a04      	ldr	r2, [pc, #16]	; (80088b4 <prvSampleTimeNow+0x3c>)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80088a8:	68fb      	ldr	r3, [r7, #12]
    }
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	20009068 	.word	0x20009068

080088b8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
 80088c4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80088c6:	2300      	movs	r3, #0
 80088c8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d812      	bhi.n	8008904 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	1ad2      	subs	r2, r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d302      	bcc.n	80088f2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80088ec:	2301      	movs	r3, #1
 80088ee:	617b      	str	r3, [r7, #20]
 80088f0:	e01b      	b.n	800892a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80088f2:	4b10      	ldr	r3, [pc, #64]	; (8008934 <prvInsertTimerInActiveList+0x7c>)
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3304      	adds	r3, #4
 80088fa:	4619      	mov	r1, r3
 80088fc:	4610      	mov	r0, r2
 80088fe:	f7fd fce9 	bl	80062d4 <vListInsert>
 8008902:	e012      	b.n	800892a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	429a      	cmp	r2, r3
 800890a:	d206      	bcs.n	800891a <prvInsertTimerInActiveList+0x62>
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	429a      	cmp	r2, r3
 8008912:	d302      	bcc.n	800891a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008914:	2301      	movs	r3, #1
 8008916:	617b      	str	r3, [r7, #20]
 8008918:	e007      	b.n	800892a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800891a:	4b07      	ldr	r3, [pc, #28]	; (8008938 <prvInsertTimerInActiveList+0x80>)
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3304      	adds	r3, #4
 8008922:	4619      	mov	r1, r3
 8008924:	4610      	mov	r0, r2
 8008926:	f7fd fcd5 	bl	80062d4 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800892a:	697b      	ldr	r3, [r7, #20]
    }
 800892c:	4618      	mov	r0, r3
 800892e:	3718      	adds	r7, #24
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	2000905c 	.word	0x2000905c
 8008938:	20009058 	.word	0x20009058

0800893c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800893c:	b580      	push	{r7, lr}
 800893e:	b08c      	sub	sp, #48	; 0x30
 8008940:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008942:	e0ae      	b.n	8008aa2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	2b00      	cmp	r3, #0
 8008948:	f2c0 80aa 	blt.w	8008aa0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d004      	beq.n	8008962 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	3304      	adds	r3, #4
 800895c:	4618      	mov	r0, r3
 800895e:	f7fd fcf2 	bl	8006346 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008962:	1d3b      	adds	r3, r7, #4
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff ff87 	bl	8008878 <prvSampleTimeNow>
 800896a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b09      	cmp	r3, #9
 8008970:	f200 8097 	bhi.w	8008aa2 <prvProcessReceivedCommands+0x166>
 8008974:	a201      	add	r2, pc, #4	; (adr r2, 800897c <prvProcessReceivedCommands+0x40>)
 8008976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897a:	bf00      	nop
 800897c:	080089a5 	.word	0x080089a5
 8008980:	080089a5 	.word	0x080089a5
 8008984:	080089a5 	.word	0x080089a5
 8008988:	08008a19 	.word	0x08008a19
 800898c:	08008a2d 	.word	0x08008a2d
 8008990:	08008a77 	.word	0x08008a77
 8008994:	080089a5 	.word	0x080089a5
 8008998:	080089a5 	.word	0x080089a5
 800899c:	08008a19 	.word	0x08008a19
 80089a0:	08008a2d 	.word	0x08008a2d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089aa:	f043 0301 	orr.w	r3, r3, #1
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	18d1      	adds	r1, r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a3a      	ldr	r2, [r7, #32]
 80089c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089c4:	f7ff ff78 	bl	80088b8 <prvInsertTimerInActiveList>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d069      	beq.n	8008aa2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089d4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d05e      	beq.n	8008aa2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	441a      	add	r2, r3
 80089ec:	2300      	movs	r3, #0
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	2300      	movs	r3, #0
 80089f2:	2100      	movs	r1, #0
 80089f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089f6:	f7ff fe21 	bl	800863c <xTimerGenericCommand>
 80089fa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d14f      	bne.n	8008aa2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8008a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a06:	f383 8811 	msr	BASEPRI, r3
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	61bb      	str	r3, [r7, #24]
    }
 8008a14:	bf00      	nop
 8008a16:	e7fe      	b.n	8008a16 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a1e:	f023 0301 	bic.w	r3, r3, #1
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8008a2a:	e03a      	b.n	8008aa2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a32:	f043 0301 	orr.w	r3, r3, #1
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10a      	bne.n	8008a62 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8008a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	617b      	str	r3, [r7, #20]
    }
 8008a5e:	bf00      	nop
 8008a60:	e7fe      	b.n	8008a60 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	699a      	ldr	r2, [r3, #24]
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	18d1      	adds	r1, r2, r3
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	6a3a      	ldr	r2, [r7, #32]
 8008a6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a70:	f7ff ff22 	bl	80088b8 <prvInsertTimerInActiveList>
                        break;
 8008a74:	e015      	b.n	8008aa2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a7c:	f003 0302 	and.w	r3, r3, #2
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d103      	bne.n	8008a8c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8008a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a86:	f000 fbe9 	bl	800925c <vPortFree>
 8008a8a:	e00a      	b.n	8008aa2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a92:	f023 0301 	bic.w	r3, r3, #1
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008a9e:	e000      	b.n	8008aa2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8008aa0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008aa2:	4b08      	ldr	r3, [pc, #32]	; (8008ac4 <prvProcessReceivedCommands+0x188>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f107 0108 	add.w	r1, r7, #8
 8008aaa:	2200      	movs	r2, #0
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fd fee1 	bl	8006874 <xQueueReceive>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f47f af45 	bne.w	8008944 <prvProcessReceivedCommands+0x8>
        }
    }
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
 8008abe:	3728      	adds	r7, #40	; 0x28
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	20009060 	.word	0x20009060

08008ac8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ace:	e048      	b.n	8008b62 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ad0:	4b2d      	ldr	r3, [pc, #180]	; (8008b88 <prvSwitchTimerLists+0xc0>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ada:	4b2b      	ldr	r3, [pc, #172]	; (8008b88 <prvSwitchTimerLists+0xc0>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fd fc2c 	bl	8006346 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008afc:	f003 0304 	and.w	r3, r3, #4
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d02e      	beq.n	8008b62 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d90e      	bls.n	8008b34 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b22:	4b19      	ldr	r3, [pc, #100]	; (8008b88 <prvSwitchTimerLists+0xc0>)
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3304      	adds	r3, #4
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	f7fd fbd1 	bl	80062d4 <vListInsert>
 8008b32:	e016      	b.n	8008b62 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b34:	2300      	movs	r3, #0
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	2300      	movs	r3, #0
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f7ff fd7c 	bl	800863c <xTimerGenericCommand>
 8008b44:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10a      	bne.n	8008b62 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	603b      	str	r3, [r7, #0]
    }
 8008b5e:	bf00      	nop
 8008b60:	e7fe      	b.n	8008b60 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b62:	4b09      	ldr	r3, [pc, #36]	; (8008b88 <prvSwitchTimerLists+0xc0>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1b1      	bne.n	8008ad0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8008b6c:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <prvSwitchTimerLists+0xc0>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8008b72:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <prvSwitchTimerLists+0xc4>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a04      	ldr	r2, [pc, #16]	; (8008b88 <prvSwitchTimerLists+0xc0>)
 8008b78:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008b7a:	4a04      	ldr	r2, [pc, #16]	; (8008b8c <prvSwitchTimerLists+0xc4>)
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	6013      	str	r3, [r2, #0]
    }
 8008b80:	bf00      	nop
 8008b82:	3718      	adds	r7, #24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	20009058 	.word	0x20009058
 8008b8c:	2000905c 	.word	0x2000905c

08008b90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008b90:	b580      	push	{r7, lr}
 8008b92:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008b94:	f000 f960 	bl	8008e58 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008b98:	4b12      	ldr	r3, [pc, #72]	; (8008be4 <prvCheckForValidListAndQueue+0x54>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d11d      	bne.n	8008bdc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008ba0:	4811      	ldr	r0, [pc, #68]	; (8008be8 <prvCheckForValidListAndQueue+0x58>)
 8008ba2:	f7fd fb46 	bl	8006232 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008ba6:	4811      	ldr	r0, [pc, #68]	; (8008bec <prvCheckForValidListAndQueue+0x5c>)
 8008ba8:	f7fd fb43 	bl	8006232 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008bac:	4b10      	ldr	r3, [pc, #64]	; (8008bf0 <prvCheckForValidListAndQueue+0x60>)
 8008bae:	4a0e      	ldr	r2, [pc, #56]	; (8008be8 <prvCheckForValidListAndQueue+0x58>)
 8008bb0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008bb2:	4b10      	ldr	r3, [pc, #64]	; (8008bf4 <prvCheckForValidListAndQueue+0x64>)
 8008bb4:	4a0d      	ldr	r2, [pc, #52]	; (8008bec <prvCheckForValidListAndQueue+0x5c>)
 8008bb6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008bb8:	2200      	movs	r2, #0
 8008bba:	210c      	movs	r1, #12
 8008bbc:	200a      	movs	r0, #10
 8008bbe:	f7fd fc47 	bl	8006450 <xQueueGenericCreate>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	4a07      	ldr	r2, [pc, #28]	; (8008be4 <prvCheckForValidListAndQueue+0x54>)
 8008bc6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8008bc8:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <prvCheckForValidListAndQueue+0x54>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d005      	beq.n	8008bdc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008bd0:	4b04      	ldr	r3, [pc, #16]	; (8008be4 <prvCheckForValidListAndQueue+0x54>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4908      	ldr	r1, [pc, #32]	; (8008bf8 <prvCheckForValidListAndQueue+0x68>)
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe f9da 	bl	8006f90 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008bdc:	f000 f96c 	bl	8008eb8 <vPortExitCritical>
    }
 8008be0:	bf00      	nop
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	20009060 	.word	0x20009060
 8008be8:	20009030 	.word	0x20009030
 8008bec:	20009044 	.word	0x20009044
 8008bf0:	20009058 	.word	0x20009058
 8008bf4:	2000905c 	.word	0x2000905c
 8008bf8:	08014224 	.word	0x08014224

08008bfc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3b04      	subs	r3, #4
 8008c0c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c14:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	3b04      	subs	r3, #4
 8008c1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	f023 0201 	bic.w	r2, r3, #1
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3b04      	subs	r3, #4
 8008c2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008c2c:	4a0c      	ldr	r2, [pc, #48]	; (8008c60 <pxPortInitialiseStack+0x64>)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3b14      	subs	r3, #20
 8008c36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3b04      	subs	r3, #4
 8008c42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f06f 0202 	mvn.w	r2, #2
 8008c4a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3b20      	subs	r3, #32
 8008c50:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008c52:	68fb      	ldr	r3, [r7, #12]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	08008c65 	.word	0x08008c65

08008c64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008c6e:	4b12      	ldr	r3, [pc, #72]	; (8008cb8 <prvTaskExitError+0x54>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c76:	d00a      	beq.n	8008c8e <prvTaskExitError+0x2a>
        __asm volatile
 8008c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	60fb      	str	r3, [r7, #12]
    }
 8008c8a:	bf00      	nop
 8008c8c:	e7fe      	b.n	8008c8c <prvTaskExitError+0x28>
        __asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	60bb      	str	r3, [r7, #8]
    }
 8008ca0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008ca2:	bf00      	nop
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0fc      	beq.n	8008ca4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008caa:	bf00      	nop
 8008cac:	bf00      	nop
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	2000003c 	.word	0x2000003c
 8008cbc:	00000000 	.word	0x00000000

08008cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008cc0:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <pxCurrentTCBConst2>)
 8008cc2:	6819      	ldr	r1, [r3, #0]
 8008cc4:	6808      	ldr	r0, [r1, #0]
 8008cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cca:	f380 8809 	msr	PSP, r0
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f04f 0000 	mov.w	r0, #0
 8008cd6:	f380 8811 	msr	BASEPRI, r0
 8008cda:	4770      	bx	lr
 8008cdc:	f3af 8000 	nop.w

08008ce0 <pxCurrentTCBConst2>:
 8008ce0:	20008f04 	.word	0x20008f04
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop

08008ce8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008ce8:	4808      	ldr	r0, [pc, #32]	; (8008d0c <prvPortStartFirstTask+0x24>)
 8008cea:	6800      	ldr	r0, [r0, #0]
 8008cec:	6800      	ldr	r0, [r0, #0]
 8008cee:	f380 8808 	msr	MSP, r0
 8008cf2:	f04f 0000 	mov.w	r0, #0
 8008cf6:	f380 8814 	msr	CONTROL, r0
 8008cfa:	b662      	cpsie	i
 8008cfc:	b661      	cpsie	f
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	df00      	svc	0
 8008d08:	bf00      	nop
 8008d0a:	0000      	.short	0x0000
 8008d0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008d10:	bf00      	nop
 8008d12:	bf00      	nop

08008d14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d1a:	4b46      	ldr	r3, [pc, #280]	; (8008e34 <xPortStartScheduler+0x120>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a46      	ldr	r2, [pc, #280]	; (8008e38 <xPortStartScheduler+0x124>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d10a      	bne.n	8008d3a <xPortStartScheduler+0x26>
        __asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	613b      	str	r3, [r7, #16]
    }
 8008d36:	bf00      	nop
 8008d38:	e7fe      	b.n	8008d38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d3a:	4b3e      	ldr	r3, [pc, #248]	; (8008e34 <xPortStartScheduler+0x120>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a3f      	ldr	r2, [pc, #252]	; (8008e3c <xPortStartScheduler+0x128>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d10a      	bne.n	8008d5a <xPortStartScheduler+0x46>
        __asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	60fb      	str	r3, [r7, #12]
    }
 8008d56:	bf00      	nop
 8008d58:	e7fe      	b.n	8008d58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d5a:	4b39      	ldr	r3, [pc, #228]	; (8008e40 <xPortStartScheduler+0x12c>)
 8008d5c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	22ff      	movs	r2, #255	; 0xff
 8008d6a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d74:	78fb      	ldrb	r3, [r7, #3]
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	4b31      	ldr	r3, [pc, #196]	; (8008e44 <xPortStartScheduler+0x130>)
 8008d80:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d82:	4b31      	ldr	r3, [pc, #196]	; (8008e48 <xPortStartScheduler+0x134>)
 8008d84:	2207      	movs	r2, #7
 8008d86:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d88:	e009      	b.n	8008d9e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8008d8a:	4b2f      	ldr	r3, [pc, #188]	; (8008e48 <xPortStartScheduler+0x134>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	4a2d      	ldr	r2, [pc, #180]	; (8008e48 <xPortStartScheduler+0x134>)
 8008d92:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d9e:	78fb      	ldrb	r3, [r7, #3]
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da6:	2b80      	cmp	r3, #128	; 0x80
 8008da8:	d0ef      	beq.n	8008d8a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008daa:	4b27      	ldr	r3, [pc, #156]	; (8008e48 <xPortStartScheduler+0x134>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f1c3 0307 	rsb	r3, r3, #7
 8008db2:	2b04      	cmp	r3, #4
 8008db4:	d00a      	beq.n	8008dcc <xPortStartScheduler+0xb8>
        __asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	60bb      	str	r3, [r7, #8]
    }
 8008dc8:	bf00      	nop
 8008dca:	e7fe      	b.n	8008dca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008dcc:	4b1e      	ldr	r3, [pc, #120]	; (8008e48 <xPortStartScheduler+0x134>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	4a1d      	ldr	r2, [pc, #116]	; (8008e48 <xPortStartScheduler+0x134>)
 8008dd4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008dd6:	4b1c      	ldr	r3, [pc, #112]	; (8008e48 <xPortStartScheduler+0x134>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008dde:	4a1a      	ldr	r2, [pc, #104]	; (8008e48 <xPortStartScheduler+0x134>)
 8008de0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008dea:	4b18      	ldr	r3, [pc, #96]	; (8008e4c <xPortStartScheduler+0x138>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a17      	ldr	r2, [pc, #92]	; (8008e4c <xPortStartScheduler+0x138>)
 8008df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008df4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008df6:	4b15      	ldr	r3, [pc, #84]	; (8008e4c <xPortStartScheduler+0x138>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a14      	ldr	r2, [pc, #80]	; (8008e4c <xPortStartScheduler+0x138>)
 8008dfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008e02:	f000 f8db 	bl	8008fbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008e06:	4b12      	ldr	r3, [pc, #72]	; (8008e50 <xPortStartScheduler+0x13c>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008e0c:	f000 f8fa 	bl	8009004 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e10:	4b10      	ldr	r3, [pc, #64]	; (8008e54 <xPortStartScheduler+0x140>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a0f      	ldr	r2, [pc, #60]	; (8008e54 <xPortStartScheduler+0x140>)
 8008e16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008e1c:	f7ff ff64 	bl	8008ce8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008e20:	f7fe fd34 	bl	800788c <vTaskSwitchContext>
    prvTaskExitError();
 8008e24:	f7ff ff1e 	bl	8008c64 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	e000ed00 	.word	0xe000ed00
 8008e38:	410fc271 	.word	0x410fc271
 8008e3c:	410fc270 	.word	0x410fc270
 8008e40:	e000e400 	.word	0xe000e400
 8008e44:	2000906c 	.word	0x2000906c
 8008e48:	20009070 	.word	0x20009070
 8008e4c:	e000ed20 	.word	0xe000ed20
 8008e50:	2000003c 	.word	0x2000003c
 8008e54:	e000ef34 	.word	0xe000ef34

08008e58 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
        __asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	607b      	str	r3, [r7, #4]
    }
 8008e70:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008e72:	4b0f      	ldr	r3, [pc, #60]	; (8008eb0 <vPortEnterCritical+0x58>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3301      	adds	r3, #1
 8008e78:	4a0d      	ldr	r2, [pc, #52]	; (8008eb0 <vPortEnterCritical+0x58>)
 8008e7a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008e7c:	4b0c      	ldr	r3, [pc, #48]	; (8008eb0 <vPortEnterCritical+0x58>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d10f      	bne.n	8008ea4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e84:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <vPortEnterCritical+0x5c>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00a      	beq.n	8008ea4 <vPortEnterCritical+0x4c>
        __asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	603b      	str	r3, [r7, #0]
    }
 8008ea0:	bf00      	nop
 8008ea2:	e7fe      	b.n	8008ea2 <vPortEnterCritical+0x4a>
    }
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	2000003c 	.word	0x2000003c
 8008eb4:	e000ed04 	.word	0xe000ed04

08008eb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008ebe:	4b12      	ldr	r3, [pc, #72]	; (8008f08 <vPortExitCritical+0x50>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10a      	bne.n	8008edc <vPortExitCritical+0x24>
        __asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	607b      	str	r3, [r7, #4]
    }
 8008ed8:	bf00      	nop
 8008eda:	e7fe      	b.n	8008eda <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8008edc:	4b0a      	ldr	r3, [pc, #40]	; (8008f08 <vPortExitCritical+0x50>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	4a09      	ldr	r2, [pc, #36]	; (8008f08 <vPortExitCritical+0x50>)
 8008ee4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008ee6:	4b08      	ldr	r3, [pc, #32]	; (8008f08 <vPortExitCritical+0x50>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d105      	bne.n	8008efa <vPortExitCritical+0x42>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	f383 8811 	msr	BASEPRI, r3
    }
 8008ef8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008efa:	bf00      	nop
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	2000003c 	.word	0x2000003c
 8008f0c:	00000000 	.word	0x00000000

08008f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008f10:	f3ef 8009 	mrs	r0, PSP
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	4b15      	ldr	r3, [pc, #84]	; (8008f70 <pxCurrentTCBConst>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	f01e 0f10 	tst.w	lr, #16
 8008f20:	bf08      	it	eq
 8008f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2a:	6010      	str	r0, [r2, #0]
 8008f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f34:	f380 8811 	msr	BASEPRI, r0
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f7fe fca4 	bl	800788c <vTaskSwitchContext>
 8008f44:	f04f 0000 	mov.w	r0, #0
 8008f48:	f380 8811 	msr	BASEPRI, r0
 8008f4c:	bc09      	pop	{r0, r3}
 8008f4e:	6819      	ldr	r1, [r3, #0]
 8008f50:	6808      	ldr	r0, [r1, #0]
 8008f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f56:	f01e 0f10 	tst.w	lr, #16
 8008f5a:	bf08      	it	eq
 8008f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f60:	f380 8809 	msr	PSP, r0
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	f3af 8000 	nop.w

08008f70 <pxCurrentTCBConst>:
 8008f70:	20008f04 	.word	0x20008f04
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop

08008f78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
        __asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	607b      	str	r3, [r7, #4]
    }
 8008f90:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008f92:	f7fe fbe5 	bl	8007760 <xTaskIncrementTick>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f9c:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <SysTick_Handler+0x40>)
 8008f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	f383 8811 	msr	BASEPRI, r3
    }
 8008fae:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8008fb0:	bf00      	nop
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	e000ed04 	.word	0xe000ed04

08008fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008fc0:	4b0b      	ldr	r3, [pc, #44]	; (8008ff0 <vPortSetupTimerInterrupt+0x34>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fc6:	4b0b      	ldr	r3, [pc, #44]	; (8008ff4 <vPortSetupTimerInterrupt+0x38>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008fcc:	4b0a      	ldr	r3, [pc, #40]	; (8008ff8 <vPortSetupTimerInterrupt+0x3c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a0a      	ldr	r2, [pc, #40]	; (8008ffc <vPortSetupTimerInterrupt+0x40>)
 8008fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd6:	099b      	lsrs	r3, r3, #6
 8008fd8:	4a09      	ldr	r2, [pc, #36]	; (8009000 <vPortSetupTimerInterrupt+0x44>)
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008fde:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <vPortSetupTimerInterrupt+0x34>)
 8008fe0:	2207      	movs	r2, #7
 8008fe2:	601a      	str	r2, [r3, #0]
}
 8008fe4:	bf00      	nop
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	e000e010 	.word	0xe000e010
 8008ff4:	e000e018 	.word	0xe000e018
 8008ff8:	20000020 	.word	0x20000020
 8008ffc:	10624dd3 	.word	0x10624dd3
 8009000:	e000e014 	.word	0xe000e014

08009004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009014 <vPortEnableVFP+0x10>
 8009008:	6801      	ldr	r1, [r0, #0]
 800900a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800900e:	6001      	str	r1, [r0, #0]
 8009010:	4770      	bx	lr
 8009012:	0000      	.short	0x0000
 8009014:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop

0800901c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009022:	f3ef 8305 	mrs	r3, IPSR
 8009026:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b0f      	cmp	r3, #15
 800902c:	d914      	bls.n	8009058 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800902e:	4a17      	ldr	r2, [pc, #92]	; (800908c <vPortValidateInterruptPriority+0x70>)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4413      	add	r3, r2
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009038:	4b15      	ldr	r3, [pc, #84]	; (8009090 <vPortValidateInterruptPriority+0x74>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	7afa      	ldrb	r2, [r7, #11]
 800903e:	429a      	cmp	r2, r3
 8009040:	d20a      	bcs.n	8009058 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	607b      	str	r3, [r7, #4]
    }
 8009054:	bf00      	nop
 8009056:	e7fe      	b.n	8009056 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009058:	4b0e      	ldr	r3, [pc, #56]	; (8009094 <vPortValidateInterruptPriority+0x78>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009060:	4b0d      	ldr	r3, [pc, #52]	; (8009098 <vPortValidateInterruptPriority+0x7c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	429a      	cmp	r2, r3
 8009066:	d90a      	bls.n	800907e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	603b      	str	r3, [r7, #0]
    }
 800907a:	bf00      	nop
 800907c:	e7fe      	b.n	800907c <vPortValidateInterruptPriority+0x60>
    }
 800907e:	bf00      	nop
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	e000e3f0 	.word	0xe000e3f0
 8009090:	2000906c 	.word	0x2000906c
 8009094:	e000ed0c 	.word	0xe000ed0c
 8009098:	20009070 	.word	0x20009070

0800909c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b08a      	sub	sp, #40	; 0x28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80090a4:	2300      	movs	r3, #0
 80090a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80090a8:	f7fe faae 	bl	8007608 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80090ac:	4b65      	ldr	r3, [pc, #404]	; (8009244 <pvPortMalloc+0x1a8>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d101      	bne.n	80090b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80090b4:	f000 f934 	bl	8009320 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80090b8:	4b63      	ldr	r3, [pc, #396]	; (8009248 <pvPortMalloc+0x1ac>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4013      	ands	r3, r2
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f040 80a7 	bne.w	8009214 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d02d      	beq.n	8009128 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80090cc:	2208      	movs	r2, #8
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d227      	bcs.n	8009128 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80090d8:	2208      	movs	r2, #8
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4413      	add	r3, r2
 80090de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d021      	beq.n	800912e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f023 0307 	bic.w	r3, r3, #7
 80090f0:	3308      	adds	r3, #8
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d214      	bcs.n	8009122 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f023 0307 	bic.w	r3, r3, #7
 80090fe:	3308      	adds	r3, #8
 8009100:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f003 0307 	and.w	r3, r3, #7
 8009108:	2b00      	cmp	r3, #0
 800910a:	d010      	beq.n	800912e <pvPortMalloc+0x92>
        __asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	617b      	str	r3, [r7, #20]
    }
 800911e:	bf00      	nop
 8009120:	e7fe      	b.n	8009120 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009126:	e002      	b.n	800912e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	607b      	str	r3, [r7, #4]
 800912c:	e000      	b.n	8009130 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800912e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d06e      	beq.n	8009214 <pvPortMalloc+0x178>
 8009136:	4b45      	ldr	r3, [pc, #276]	; (800924c <pvPortMalloc+0x1b0>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	429a      	cmp	r2, r3
 800913e:	d869      	bhi.n	8009214 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009140:	4b43      	ldr	r3, [pc, #268]	; (8009250 <pvPortMalloc+0x1b4>)
 8009142:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8009144:	4b42      	ldr	r3, [pc, #264]	; (8009250 <pvPortMalloc+0x1b4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800914a:	e004      	b.n	8009156 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d903      	bls.n	8009168 <pvPortMalloc+0xcc>
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1f1      	bne.n	800914c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8009168:	4b36      	ldr	r3, [pc, #216]	; (8009244 <pvPortMalloc+0x1a8>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800916e:	429a      	cmp	r2, r3
 8009170:	d050      	beq.n	8009214 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2208      	movs	r2, #8
 8009178:	4413      	add	r3, r2
 800917a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	1ad2      	subs	r2, r2, r3
 800918c:	2308      	movs	r3, #8
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	429a      	cmp	r2, r3
 8009192:	d91f      	bls.n	80091d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4413      	add	r3, r2
 800919a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	f003 0307 	and.w	r3, r3, #7
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00a      	beq.n	80091bc <pvPortMalloc+0x120>
        __asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	613b      	str	r3, [r7, #16]
    }
 80091b8:	bf00      	nop
 80091ba:	e7fe      	b.n	80091ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	1ad2      	subs	r2, r2, r3
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091ce:	69b8      	ldr	r0, [r7, #24]
 80091d0:	f000 f908 	bl	80093e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091d4:	4b1d      	ldr	r3, [pc, #116]	; (800924c <pvPortMalloc+0x1b0>)
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	4a1b      	ldr	r2, [pc, #108]	; (800924c <pvPortMalloc+0x1b0>)
 80091e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80091e2:	4b1a      	ldr	r3, [pc, #104]	; (800924c <pvPortMalloc+0x1b0>)
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	4b1b      	ldr	r3, [pc, #108]	; (8009254 <pvPortMalloc+0x1b8>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d203      	bcs.n	80091f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80091ee:	4b17      	ldr	r3, [pc, #92]	; (800924c <pvPortMalloc+0x1b0>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a18      	ldr	r2, [pc, #96]	; (8009254 <pvPortMalloc+0x1b8>)
 80091f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	4b13      	ldr	r3, [pc, #76]	; (8009248 <pvPortMalloc+0x1ac>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	431a      	orrs	r2, r3
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	2200      	movs	r2, #0
 8009208:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800920a:	4b13      	ldr	r3, [pc, #76]	; (8009258 <pvPortMalloc+0x1bc>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3301      	adds	r3, #1
 8009210:	4a11      	ldr	r2, [pc, #68]	; (8009258 <pvPortMalloc+0x1bc>)
 8009212:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009214:	f7fe fa06 	bl	8007624 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	f003 0307 	and.w	r3, r3, #7
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00a      	beq.n	8009238 <pvPortMalloc+0x19c>
        __asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	60fb      	str	r3, [r7, #12]
    }
 8009234:	bf00      	nop
 8009236:	e7fe      	b.n	8009236 <pvPortMalloc+0x19a>
    return pvReturn;
 8009238:	69fb      	ldr	r3, [r7, #28]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3728      	adds	r7, #40	; 0x28
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	2001bc7c 	.word	0x2001bc7c
 8009248:	2001bc90 	.word	0x2001bc90
 800924c:	2001bc80 	.word	0x2001bc80
 8009250:	2001bc74 	.word	0x2001bc74
 8009254:	2001bc84 	.word	0x2001bc84
 8009258:	2001bc88 	.word	0x2001bc88

0800925c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d04d      	beq.n	800930a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800926e:	2308      	movs	r3, #8
 8009270:	425b      	negs	r3, r3
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	4413      	add	r3, r2
 8009276:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	685a      	ldr	r2, [r3, #4]
 8009280:	4b24      	ldr	r3, [pc, #144]	; (8009314 <vPortFree+0xb8>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4013      	ands	r3, r2
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10a      	bne.n	80092a0 <vPortFree+0x44>
        __asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	60fb      	str	r3, [r7, #12]
    }
 800929c:	bf00      	nop
 800929e:	e7fe      	b.n	800929e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00a      	beq.n	80092be <vPortFree+0x62>
        __asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	60bb      	str	r3, [r7, #8]
    }
 80092ba:	bf00      	nop
 80092bc:	e7fe      	b.n	80092bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	4b14      	ldr	r3, [pc, #80]	; (8009314 <vPortFree+0xb8>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4013      	ands	r3, r2
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d01e      	beq.n	800930a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d11a      	bne.n	800930a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	4b0e      	ldr	r3, [pc, #56]	; (8009314 <vPortFree+0xb8>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	43db      	mvns	r3, r3
 80092de:	401a      	ands	r2, r3
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80092e4:	f7fe f990 	bl	8007608 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	4b0a      	ldr	r3, [pc, #40]	; (8009318 <vPortFree+0xbc>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4413      	add	r3, r2
 80092f2:	4a09      	ldr	r2, [pc, #36]	; (8009318 <vPortFree+0xbc>)
 80092f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80092f6:	6938      	ldr	r0, [r7, #16]
 80092f8:	f000 f874 	bl	80093e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80092fc:	4b07      	ldr	r3, [pc, #28]	; (800931c <vPortFree+0xc0>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3301      	adds	r3, #1
 8009302:	4a06      	ldr	r2, [pc, #24]	; (800931c <vPortFree+0xc0>)
 8009304:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8009306:	f7fe f98d 	bl	8007624 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800930a:	bf00      	nop
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	2001bc90 	.word	0x2001bc90
 8009318:	2001bc80 	.word	0x2001bc80
 800931c:	2001bc8c 	.word	0x2001bc8c

08009320 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009326:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800932a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800932c:	4b27      	ldr	r3, [pc, #156]	; (80093cc <prvHeapInit+0xac>)
 800932e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f003 0307 	and.w	r3, r3, #7
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00c      	beq.n	8009354 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3307      	adds	r3, #7
 800933e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f023 0307 	bic.w	r3, r3, #7
 8009346:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	4a1f      	ldr	r2, [pc, #124]	; (80093cc <prvHeapInit+0xac>)
 8009350:	4413      	add	r3, r2
 8009352:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009358:	4a1d      	ldr	r2, [pc, #116]	; (80093d0 <prvHeapInit+0xb0>)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800935e:	4b1c      	ldr	r3, [pc, #112]	; (80093d0 <prvHeapInit+0xb0>)
 8009360:	2200      	movs	r2, #0
 8009362:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	4413      	add	r3, r2
 800936a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800936c:	2208      	movs	r2, #8
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	1a9b      	subs	r3, r3, r2
 8009372:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f023 0307 	bic.w	r3, r3, #7
 800937a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4a15      	ldr	r2, [pc, #84]	; (80093d4 <prvHeapInit+0xb4>)
 8009380:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009382:	4b14      	ldr	r3, [pc, #80]	; (80093d4 <prvHeapInit+0xb4>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2200      	movs	r2, #0
 8009388:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800938a:	4b12      	ldr	r3, [pc, #72]	; (80093d4 <prvHeapInit+0xb4>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2200      	movs	r2, #0
 8009390:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	1ad2      	subs	r2, r2, r3
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093a0:	4b0c      	ldr	r3, [pc, #48]	; (80093d4 <prvHeapInit+0xb4>)
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	4a0a      	ldr	r2, [pc, #40]	; (80093d8 <prvHeapInit+0xb8>)
 80093ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	4a09      	ldr	r2, [pc, #36]	; (80093dc <prvHeapInit+0xbc>)
 80093b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093b8:	4b09      	ldr	r3, [pc, #36]	; (80093e0 <prvHeapInit+0xc0>)
 80093ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093be:	601a      	str	r2, [r3, #0]
}
 80093c0:	bf00      	nop
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr
 80093cc:	20009074 	.word	0x20009074
 80093d0:	2001bc74 	.word	0x2001bc74
 80093d4:	2001bc7c 	.word	0x2001bc7c
 80093d8:	2001bc84 	.word	0x2001bc84
 80093dc:	2001bc80 	.word	0x2001bc80
 80093e0:	2001bc90 	.word	0x2001bc90

080093e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093ec:	4b28      	ldr	r3, [pc, #160]	; (8009490 <prvInsertBlockIntoFreeList+0xac>)
 80093ee:	60fb      	str	r3, [r7, #12]
 80093f0:	e002      	b.n	80093f8 <prvInsertBlockIntoFreeList+0x14>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	60fb      	str	r3, [r7, #12]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d8f7      	bhi.n	80093f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	4413      	add	r3, r2
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	429a      	cmp	r2, r3
 8009412:	d108      	bne.n	8009426 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	441a      	add	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	441a      	add	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	429a      	cmp	r2, r3
 8009438:	d118      	bne.n	800946c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	4b15      	ldr	r3, [pc, #84]	; (8009494 <prvInsertBlockIntoFreeList+0xb0>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	429a      	cmp	r2, r3
 8009444:	d00d      	beq.n	8009462 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	441a      	add	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	601a      	str	r2, [r3, #0]
 8009460:	e008      	b.n	8009474 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009462:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <prvInsertBlockIntoFreeList+0xb0>)
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	e003      	b.n	8009474 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	429a      	cmp	r2, r3
 800947a:	d002      	beq.n	8009482 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009482:	bf00      	nop
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	2001bc74 	.word	0x2001bc74
 8009494:	2001bc7c 	.word	0x2001bc7c

08009498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	db0b      	blt.n	80094c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094aa:	79fb      	ldrb	r3, [r7, #7]
 80094ac:	f003 021f 	and.w	r2, r3, #31
 80094b0:	4907      	ldr	r1, [pc, #28]	; (80094d0 <__NVIC_EnableIRQ+0x38>)
 80094b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094b6:	095b      	lsrs	r3, r3, #5
 80094b8:	2001      	movs	r0, #1
 80094ba:	fa00 f202 	lsl.w	r2, r0, r2
 80094be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80094c2:	bf00      	nop
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	e000e100 	.word	0xe000e100

080094d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	4603      	mov	r3, r0
 80094dc:	6039      	str	r1, [r7, #0]
 80094de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	db0a      	blt.n	80094fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	490c      	ldr	r1, [pc, #48]	; (8009520 <__NVIC_SetPriority+0x4c>)
 80094ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094f2:	0112      	lsls	r2, r2, #4
 80094f4:	b2d2      	uxtb	r2, r2
 80094f6:	440b      	add	r3, r1
 80094f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80094fc:	e00a      	b.n	8009514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	b2da      	uxtb	r2, r3
 8009502:	4908      	ldr	r1, [pc, #32]	; (8009524 <__NVIC_SetPriority+0x50>)
 8009504:	79fb      	ldrb	r3, [r7, #7]
 8009506:	f003 030f 	and.w	r3, r3, #15
 800950a:	3b04      	subs	r3, #4
 800950c:	0112      	lsls	r2, r2, #4
 800950e:	b2d2      	uxtb	r2, r2
 8009510:	440b      	add	r3, r1
 8009512:	761a      	strb	r2, [r3, #24]
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	e000e100 	.word	0xe000e100
 8009524:	e000ed00 	.word	0xe000ed00

08009528 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009538:	d10a      	bne.n	8009550 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800953a:	4b62      	ldr	r3, [pc, #392]	; (80096c4 <BasicTimer_Config+0x19c>)
 800953c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953e:	4a61      	ldr	r2, [pc, #388]	; (80096c4 <BasicTimer_Config+0x19c>)
 8009540:	f043 0301 	orr.w	r3, r3, #1
 8009544:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	4a5f      	ldr	r2, [pc, #380]	; (80096c8 <BasicTimer_Config+0x1a0>)
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	e02e      	b.n	80095ae <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	4a5d      	ldr	r2, [pc, #372]	; (80096cc <BasicTimer_Config+0x1a4>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d10a      	bne.n	8009570 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800955a:	4b5a      	ldr	r3, [pc, #360]	; (80096c4 <BasicTimer_Config+0x19c>)
 800955c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955e:	4a59      	ldr	r2, [pc, #356]	; (80096c4 <BasicTimer_Config+0x19c>)
 8009560:	f043 0302 	orr.w	r3, r3, #2
 8009564:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	4a59      	ldr	r2, [pc, #356]	; (80096d0 <BasicTimer_Config+0x1a8>)
 800956c:	6013      	str	r3, [r2, #0]
 800956e:	e01e      	b.n	80095ae <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	4a57      	ldr	r2, [pc, #348]	; (80096d4 <BasicTimer_Config+0x1ac>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d10a      	bne.n	8009590 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800957a:	4b52      	ldr	r3, [pc, #328]	; (80096c4 <BasicTimer_Config+0x19c>)
 800957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957e:	4a51      	ldr	r2, [pc, #324]	; (80096c4 <BasicTimer_Config+0x19c>)
 8009580:	f043 0304 	orr.w	r3, r3, #4
 8009584:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	4a53      	ldr	r2, [pc, #332]	; (80096d8 <BasicTimer_Config+0x1b0>)
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	e00e      	b.n	80095ae <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	4a51      	ldr	r2, [pc, #324]	; (80096dc <BasicTimer_Config+0x1b4>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d109      	bne.n	80095ae <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800959a:	4b4a      	ldr	r3, [pc, #296]	; (80096c4 <BasicTimer_Config+0x19c>)
 800959c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959e:	4a49      	ldr	r2, [pc, #292]	; (80096c4 <BasicTimer_Config+0x19c>)
 80095a0:	f043 0308 	orr.w	r3, r3, #8
 80095a4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	4a4d      	ldr	r2, [pc, #308]	; (80096e0 <BasicTimer_Config+0x1b8>)
 80095ac:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 80095ae:	f001 fee5 	bl	800b37c <getConfigPLL>
 80095b2:	4603      	mov	r3, r0
 80095b4:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80095b6:	f001 fefd 	bl	800b3b4 <getClockAPB1>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 80095be:	7bbb      	ldrb	r3, [r7, #14]
 80095c0:	2b31      	cmp	r3, #49	; 0x31
 80095c2:	d903      	bls.n	80095cc <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	005b      	lsls	r3, r3, #1
 80095c8:	73fb      	strb	r3, [r7, #15]
 80095ca:	e000      	b.n	80095ce <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 80095cc:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	8852      	ldrh	r2, [r2, #2]
 80095d4:	fb02 f303 	mul.w	r3, r2, r3
 80095d8:	1e5a      	subs	r2, r3, #1
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d112      	bne.n	800960e <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f022 0210 	bic.w	r2, r2, #16
 80095f6:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	3201      	adds	r2, #1
 8009602:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	625a      	str	r2, [r3, #36]	; 0x24
 800960c:	e018      	b.n	8009640 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	f022 0210 	bic.w	r2, r2, #16
 800961c:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	f042 0210 	orr.w	r2, r2, #16
 800962c:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	6852      	ldr	r2, [r2, #4]
 800963e:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009640:	b672      	cpsid	i
}
 8009642:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800964c:	d103      	bne.n	8009656 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800964e:	201c      	movs	r0, #28
 8009650:	f7ff ff22 	bl	8009498 <__NVIC_EnableIRQ>
 8009654:	e019      	b.n	800968a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	4a1c      	ldr	r2, [pc, #112]	; (80096cc <BasicTimer_Config+0x1a4>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d103      	bne.n	8009668 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8009660:	201d      	movs	r0, #29
 8009662:	f7ff ff19 	bl	8009498 <__NVIC_EnableIRQ>
 8009666:	e010      	b.n	800968a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	4a19      	ldr	r2, [pc, #100]	; (80096d4 <BasicTimer_Config+0x1ac>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d103      	bne.n	800967a <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8009672:	201e      	movs	r0, #30
 8009674:	f7ff ff10 	bl	8009498 <__NVIC_EnableIRQ>
 8009678:	e007      	b.n	800968a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	4a17      	ldr	r2, [pc, #92]	; (80096dc <BasicTimer_Config+0x1b4>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d102      	bne.n	800968a <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8009684:	2032      	movs	r0, #50	; 0x32
 8009686:	f7ff ff07 	bl	8009498 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800968a:	b662      	cpsie	i
}
 800968c:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	7a1b      	ldrb	r3, [r3, #8]
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f8bd 	bl	8009814 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	f022 0201 	bic.w	r2, r2, #1
 80096a8:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	f042 0201 	orr.w	r2, r2, #1
 80096b8:	601a      	str	r2, [r3, #0]
}
 80096ba:	bf00      	nop
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	40023800 	.word	0x40023800
 80096c8:	2001bc94 	.word	0x2001bc94
 80096cc:	40000400 	.word	0x40000400
 80096d0:	2001bc98 	.word	0x2001bc98
 80096d4:	40000800 	.word	0x40000800
 80096d8:	2001bc9c 	.word	0x2001bc9c
 80096dc:	40000c00 	.word	0x40000c00
 80096e0:	2001bca0 	.word	0x2001bca0

080096e4 <timer_Config_Init_Priority>:

//------------Funcion para configurar las interrupciones------------------
void timer_Config_Init_Priority(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 80096f0:	b672      	cpsid	i
}
 80096f2:	bf00      	nop
	//Desactivamos las interupciones globales
	__disable_irq();
	//Matriculamos la interrupcion en el NVIC
	if(ptrBTimerHandler->ptrTIMx == TIM2)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fc:	d105      	bne.n	800970a <timer_Config_Init_Priority+0x26>
	{
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 80096fe:	78fb      	ldrb	r3, [r7, #3]
 8009700:	4619      	mov	r1, r3
 8009702:	201c      	movs	r0, #28
 8009704:	f7ff fee6 	bl	80094d4 <__NVIC_SetPriority>
 8009708:	e01f      	b.n	800974a <timer_Config_Init_Priority+0x66>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	4a12      	ldr	r2, [pc, #72]	; (8009758 <timer_Config_Init_Priority+0x74>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d105      	bne.n	8009720 <timer_Config_Init_Priority+0x3c>
	{
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 8009714:	78fb      	ldrb	r3, [r7, #3]
 8009716:	4619      	mov	r1, r3
 8009718:	201d      	movs	r0, #29
 800971a:	f7ff fedb 	bl	80094d4 <__NVIC_SetPriority>
 800971e:	e014      	b.n	800974a <timer_Config_Init_Priority+0x66>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	4a0d      	ldr	r2, [pc, #52]	; (800975c <timer_Config_Init_Priority+0x78>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d105      	bne.n	8009736 <timer_Config_Init_Priority+0x52>
	{
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 800972a:	78fb      	ldrb	r3, [r7, #3]
 800972c:	4619      	mov	r1, r3
 800972e:	201e      	movs	r0, #30
 8009730:	f7ff fed0 	bl	80094d4 <__NVIC_SetPriority>
 8009734:	e009      	b.n	800974a <timer_Config_Init_Priority+0x66>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	4a09      	ldr	r2, [pc, #36]	; (8009760 <timer_Config_Init_Priority+0x7c>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d104      	bne.n	800974a <timer_Config_Init_Priority+0x66>
	{
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	4619      	mov	r1, r3
 8009744:	2032      	movs	r0, #50	; 0x32
 8009746:	f7ff fec5 	bl	80094d4 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800974a:	b662      	cpsie	i
}
 800974c:	bf00      	nop
	}
	//Activamos las interupciones globales
	__enable_irq();
}
 800974e:	bf00      	nop
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	40000400 	.word	0x40000400
 800975c:	40000800 	.word	0x40000800
 8009760:	40000c00 	.word	0x40000c00

08009764 <BasicTimer2_Callback>:

//Definimos las funciones para cuando se genera una interrupcion del TIM2-3
__attribute__((weak)) void BasicTimer2_Callback(void)
{
 8009764:	b480      	push	{r7}
 8009766:	af00      	add	r7, sp, #0
	__NOP();
 8009768:	bf00      	nop
}
 800976a:	bf00      	nop
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <BasicTimer3_Callback>:

__attribute__((weak)) void BasicTimer3_Callback(void)
{
 8009774:	b480      	push	{r7}
 8009776:	af00      	add	r7, sp, #0
	__NOP();
 8009778:	bf00      	nop
}
 800977a:	bf00      	nop
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <BasicTimer5_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8009784:	b480      	push	{r7}
 8009786:	af00      	add	r7, sp, #0
	__NOP();
 8009788:	bf00      	nop
}
 800978a:	bf00      	nop
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8009798:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <TIM2_IRQHandler+0x1c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	691a      	ldr	r2, [r3, #16]
 800979e:	4b04      	ldr	r3, [pc, #16]	; (80097b0 <TIM2_IRQHandler+0x1c>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f022 0201 	bic.w	r2, r2, #1
 80097a6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 80097a8:	f7ff ffdc 	bl	8009764 <BasicTimer2_Callback>

}
 80097ac:	bf00      	nop
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	2001bc94 	.word	0x2001bc94

080097b4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 80097b8:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <TIM3_IRQHandler+0x1c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	691a      	ldr	r2, [r3, #16]
 80097be:	4b04      	ldr	r3, [pc, #16]	; (80097d0 <TIM3_IRQHandler+0x1c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 0201 	bic.w	r2, r2, #1
 80097c6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 80097c8:	f7ff ffd4 	bl	8009774 <BasicTimer3_Callback>

}
 80097cc:	bf00      	nop
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	2001bc98 	.word	0x2001bc98

080097d4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 80097d8:	4b05      	ldr	r3, [pc, #20]	; (80097f0 <TIM4_IRQHandler+0x1c>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	691a      	ldr	r2, [r3, #16]
 80097de:	4b04      	ldr	r3, [pc, #16]	; (80097f0 <TIM4_IRQHandler+0x1c>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 0201 	bic.w	r2, r2, #1
 80097e6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 80097e8:	f7fa f9b8 	bl	8003b5c <BasicTimer4_Callback>

}
 80097ec:	bf00      	nop
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	2001bc9c 	.word	0x2001bc9c

080097f4 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 80097f8:	4b05      	ldr	r3, [pc, #20]	; (8009810 <TIM5_IRQHandler+0x1c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	691a      	ldr	r2, [r3, #16]
 80097fe:	4b04      	ldr	r3, [pc, #16]	; (8009810 <TIM5_IRQHandler+0x1c>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 0201 	bic.w	r2, r2, #1
 8009806:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8009808:	f7ff ffbc 	bl	8009784 <BasicTimer5_Callback>

}
 800980c:	bf00      	nop
 800980e:	bd80      	pop	{r7, pc}
 8009810:	2001bca0 	.word	0x2001bca0

08009814 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d108      	bne.n	8009838 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	68da      	ldr	r2, [r3, #12]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	f042 0201 	orr.w	r2, r2, #1
 8009834:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8009836:	e007      	b.n	8009848 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	68da      	ldr	r2, [r3, #12]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	f022 0201 	bic.w	r2, r2, #1
 8009846:	60da      	str	r2, [r3, #12]
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 8009860:	887a      	ldrh	r2, [r7, #2]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	6852      	ldr	r2, [r2, #4]
 8009876:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <timer_delay>:

//Funcion para realizar un delay con un timer
void timer_delay(BasicTimer_Handler_t *ptrBTimerHandler,uint16_t *countingTimer, uint16_t maxCountinegTimer)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	4613      	mov	r3, r2
 8009890:	80fb      	strh	r3, [r7, #6]
	//Aseguramos que el valor de las cuestas se reinicio
	*countingTimer = 0;
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	2200      	movs	r2, #0
 8009896:	801a      	strh	r2, [r3, #0]
	//Activamos la interrupcion del Timer
	statusiInterruptionTimer(ptrBTimerHandler, SET);
 8009898:	2101      	movs	r1, #1
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f7ff ffba 	bl	8009814 <statusiInterruptionTimer>
	//El programa se queda aqui hasta que se cumple la condiccion
	while(*countingTimer<maxCountinegTimer)
 80098a0:	e000      	b.n	80098a4 <timer_delay+0x20>
	{
		__NOP();
 80098a2:	bf00      	nop
	while(*countingTimer<maxCountinegTimer)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	88fa      	ldrh	r2, [r7, #6]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d8f9      	bhi.n	80098a2 <timer_delay+0x1e>
	}
	//Desactivamos la interrupcion del Timer
	statusiInterruptionTimer(ptrBTimerHandler, RESET);
 80098ae:	2100      	movs	r1, #0
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f7ff ffaf 	bl	8009814 <statusiInterruptionTimer>
}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <__NVIC_EnableIRQ>:
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	4603      	mov	r3, r0
 80098c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	db0b      	blt.n	80098ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098d2:	79fb      	ldrb	r3, [r7, #7]
 80098d4:	f003 021f 	and.w	r2, r3, #31
 80098d8:	4907      	ldr	r1, [pc, #28]	; (80098f8 <__NVIC_EnableIRQ+0x38>)
 80098da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098de:	095b      	lsrs	r3, r3, #5
 80098e0:	2001      	movs	r0, #1
 80098e2:	fa00 f202 	lsl.w	r2, r0, r2
 80098e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80098ea:	bf00      	nop
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	e000e100 	.word	0xe000e100

080098fc <__NVIC_SetPriority>:
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	4603      	mov	r3, r0
 8009904:	6039      	str	r1, [r7, #0]
 8009906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800990c:	2b00      	cmp	r3, #0
 800990e:	db0a      	blt.n	8009926 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	b2da      	uxtb	r2, r3
 8009914:	490c      	ldr	r1, [pc, #48]	; (8009948 <__NVIC_SetPriority+0x4c>)
 8009916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800991a:	0112      	lsls	r2, r2, #4
 800991c:	b2d2      	uxtb	r2, r2
 800991e:	440b      	add	r3, r1
 8009920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009924:	e00a      	b.n	800993c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	b2da      	uxtb	r2, r3
 800992a:	4908      	ldr	r1, [pc, #32]	; (800994c <__NVIC_SetPriority+0x50>)
 800992c:	79fb      	ldrb	r3, [r7, #7]
 800992e:	f003 030f 	and.w	r3, r3, #15
 8009932:	3b04      	subs	r3, #4
 8009934:	0112      	lsls	r2, r2, #4
 8009936:	b2d2      	uxtb	r2, r2
 8009938:	440b      	add	r3, r1
 800993a:	761a      	strb	r2, [r3, #24]
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	e000e100 	.word	0xe000e100
 800994c:	e000ed00 	.word	0xe000ed00

08009950 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af02      	add	r7, sp, #8
 8009956:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6818      	ldr	r0, [r3, #0]
 800995c:	2300      	movs	r3, #0
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	2300      	movs	r3, #0
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	2301      	movs	r3, #1
 8009966:	2200      	movs	r2, #0
 8009968:	2100      	movs	r1, #0
 800996a:	f001 f8f3 	bl	800ab54 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4618      	mov	r0, r3
 8009974:	f001 f910 	bl	800ab98 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8009978:	4b97      	ldr	r3, [pc, #604]	; (8009bd8 <extInt_Config+0x288>)
 800997a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800997c:	4a96      	ldr	r2, [pc, #600]	; (8009bd8 <extInt_Config+0x288>)
 800997e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009982:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	2b0f      	cmp	r3, #15
 800998c:	f200 85cf 	bhi.w	800a52e <extInt_Config+0xbde>
 8009990:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <extInt_Config+0x48>)
 8009992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009996:	bf00      	nop
 8009998:	080099d9 	.word	0x080099d9
 800999c:	08009a8f 	.word	0x08009a8f
 80099a0:	08009b45 	.word	0x08009b45
 80099a4:	08009c1b 	.word	0x08009c1b
 80099a8:	08009cd1 	.word	0x08009cd1
 80099ac:	08009d7f 	.word	0x08009d7f
 80099b0:	08009e45 	.word	0x08009e45
 80099b4:	08009eed 	.word	0x08009eed
 80099b8:	08009f95 	.word	0x08009f95
 80099bc:	0800a03d 	.word	0x0800a03d
 80099c0:	0800a103 	.word	0x0800a103
 80099c4:	0800a1ab 	.word	0x0800a1ab
 80099c8:	0800a253 	.word	0x0800a253
 80099cc:	0800a319 	.word	0x0800a319
 80099d0:	0800a3c1 	.word	0x0800a3c1
 80099d4:	0800a469 	.word	0x0800a469
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 80099d8:	4b80      	ldr	r3, [pc, #512]	; (8009bdc <extInt_Config+0x28c>)
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	4a7f      	ldr	r2, [pc, #508]	; (8009bdc <extInt_Config+0x28c>)
 80099de:	f023 030f 	bic.w	r3, r3, #15
 80099e2:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	4a7d      	ldr	r2, [pc, #500]	; (8009be0 <extInt_Config+0x290>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d105      	bne.n	80099fc <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80099f0:	4b7a      	ldr	r3, [pc, #488]	; (8009bdc <extInt_Config+0x28c>)
 80099f2:	4a7a      	ldr	r2, [pc, #488]	; (8009bdc <extInt_Config+0x28c>)
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80099f8:	f000 bd9b 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	4a78      	ldr	r2, [pc, #480]	; (8009be4 <extInt_Config+0x294>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d107      	bne.n	8009a18 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8009a08:	4b74      	ldr	r3, [pc, #464]	; (8009bdc <extInt_Config+0x28c>)
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	4a73      	ldr	r2, [pc, #460]	; (8009bdc <extInt_Config+0x28c>)
 8009a0e:	f043 0301 	orr.w	r3, r3, #1
 8009a12:	6093      	str	r3, [r2, #8]
		break;
 8009a14:	f000 bd8d 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	4a72      	ldr	r2, [pc, #456]	; (8009be8 <extInt_Config+0x298>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d107      	bne.n	8009a34 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8009a24:	4b6d      	ldr	r3, [pc, #436]	; (8009bdc <extInt_Config+0x28c>)
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	4a6c      	ldr	r2, [pc, #432]	; (8009bdc <extInt_Config+0x28c>)
 8009a2a:	f043 0302 	orr.w	r3, r3, #2
 8009a2e:	6093      	str	r3, [r2, #8]
		break;
 8009a30:	f000 bd7f 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	4a6c      	ldr	r2, [pc, #432]	; (8009bec <extInt_Config+0x29c>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d107      	bne.n	8009a50 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8009a40:	4b66      	ldr	r3, [pc, #408]	; (8009bdc <extInt_Config+0x28c>)
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	4a65      	ldr	r2, [pc, #404]	; (8009bdc <extInt_Config+0x28c>)
 8009a46:	f043 0303 	orr.w	r3, r3, #3
 8009a4a:	6093      	str	r3, [r2, #8]
		break;
 8009a4c:	f000 bd71 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	4a66      	ldr	r2, [pc, #408]	; (8009bf0 <extInt_Config+0x2a0>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d107      	bne.n	8009a6c <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8009a5c:	4b5f      	ldr	r3, [pc, #380]	; (8009bdc <extInt_Config+0x28c>)
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	4a5e      	ldr	r2, [pc, #376]	; (8009bdc <extInt_Config+0x28c>)
 8009a62:	f043 0304 	orr.w	r3, r3, #4
 8009a66:	6093      	str	r3, [r2, #8]
		break;
 8009a68:	f000 bd63 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	4a60      	ldr	r2, [pc, #384]	; (8009bf4 <extInt_Config+0x2a4>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d107      	bne.n	8009a88 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8009a78:	4b58      	ldr	r3, [pc, #352]	; (8009bdc <extInt_Config+0x28c>)
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	4a57      	ldr	r2, [pc, #348]	; (8009bdc <extInt_Config+0x28c>)
 8009a7e:	f043 0307 	orr.w	r3, r3, #7
 8009a82:	6093      	str	r3, [r2, #8]
		break;
 8009a84:	f000 bd55 	b.w	800a532 <extInt_Config+0xbe2>
			__NOP();
 8009a88:	bf00      	nop
		break;
 8009a8a:	f000 bd52 	b.w	800a532 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8009a8e:	4b53      	ldr	r3, [pc, #332]	; (8009bdc <extInt_Config+0x28c>)
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	4a52      	ldr	r2, [pc, #328]	; (8009bdc <extInt_Config+0x28c>)
 8009a94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a98:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	4a4f      	ldr	r2, [pc, #316]	; (8009be0 <extInt_Config+0x290>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d105      	bne.n	8009ab2 <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8009aa6:	4b4d      	ldr	r3, [pc, #308]	; (8009bdc <extInt_Config+0x28c>)
 8009aa8:	4a4c      	ldr	r2, [pc, #304]	; (8009bdc <extInt_Config+0x28c>)
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8009aae:	f000 bd40 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	4a4a      	ldr	r2, [pc, #296]	; (8009be4 <extInt_Config+0x294>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d107      	bne.n	8009ace <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8009abe:	4b47      	ldr	r3, [pc, #284]	; (8009bdc <extInt_Config+0x28c>)
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	4a46      	ldr	r2, [pc, #280]	; (8009bdc <extInt_Config+0x28c>)
 8009ac4:	f043 0310 	orr.w	r3, r3, #16
 8009ac8:	6093      	str	r3, [r2, #8]
		break;
 8009aca:	f000 bd32 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	4a44      	ldr	r2, [pc, #272]	; (8009be8 <extInt_Config+0x298>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d107      	bne.n	8009aea <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8009ada:	4b40      	ldr	r3, [pc, #256]	; (8009bdc <extInt_Config+0x28c>)
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	4a3f      	ldr	r2, [pc, #252]	; (8009bdc <extInt_Config+0x28c>)
 8009ae0:	f043 0320 	orr.w	r3, r3, #32
 8009ae4:	6093      	str	r3, [r2, #8]
		break;
 8009ae6:	f000 bd24 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	4a3e      	ldr	r2, [pc, #248]	; (8009bec <extInt_Config+0x29c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d107      	bne.n	8009b06 <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8009af6:	4b39      	ldr	r3, [pc, #228]	; (8009bdc <extInt_Config+0x28c>)
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	4a38      	ldr	r2, [pc, #224]	; (8009bdc <extInt_Config+0x28c>)
 8009afc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009b00:	6093      	str	r3, [r2, #8]
		break;
 8009b02:	f000 bd16 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	4a38      	ldr	r2, [pc, #224]	; (8009bf0 <extInt_Config+0x2a0>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d107      	bne.n	8009b22 <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8009b12:	4b32      	ldr	r3, [pc, #200]	; (8009bdc <extInt_Config+0x28c>)
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	4a31      	ldr	r2, [pc, #196]	; (8009bdc <extInt_Config+0x28c>)
 8009b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b1c:	6093      	str	r3, [r2, #8]
		break;
 8009b1e:	f000 bd08 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	4a32      	ldr	r2, [pc, #200]	; (8009bf4 <extInt_Config+0x2a4>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d107      	bne.n	8009b3e <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8009b2e:	4b2b      	ldr	r3, [pc, #172]	; (8009bdc <extInt_Config+0x28c>)
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	4a2a      	ldr	r2, [pc, #168]	; (8009bdc <extInt_Config+0x28c>)
 8009b34:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009b38:	6093      	str	r3, [r2, #8]
		break;
 8009b3a:	f000 bcfa 	b.w	800a532 <extInt_Config+0xbe2>
			__NOP();
 8009b3e:	bf00      	nop
		break;
 8009b40:	f000 bcf7 	b.w	800a532 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8009b44:	4b25      	ldr	r3, [pc, #148]	; (8009bdc <extInt_Config+0x28c>)
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	4a24      	ldr	r2, [pc, #144]	; (8009bdc <extInt_Config+0x28c>)
 8009b4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009b4e:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	4a22      	ldr	r2, [pc, #136]	; (8009be0 <extInt_Config+0x290>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d105      	bne.n	8009b68 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8009b5c:	4b1f      	ldr	r3, [pc, #124]	; (8009bdc <extInt_Config+0x28c>)
 8009b5e:	4a1f      	ldr	r2, [pc, #124]	; (8009bdc <extInt_Config+0x28c>)
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8009b64:	f000 bce5 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	4a1d      	ldr	r2, [pc, #116]	; (8009be4 <extInt_Config+0x294>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d107      	bne.n	8009b84 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8009b74:	4b19      	ldr	r3, [pc, #100]	; (8009bdc <extInt_Config+0x28c>)
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	4a18      	ldr	r2, [pc, #96]	; (8009bdc <extInt_Config+0x28c>)
 8009b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b7e:	6093      	str	r3, [r2, #8]
		break;
 8009b80:	f000 bcd7 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	4a17      	ldr	r2, [pc, #92]	; (8009be8 <extInt_Config+0x298>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d107      	bne.n	8009ba0 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8009b90:	4b12      	ldr	r3, [pc, #72]	; (8009bdc <extInt_Config+0x28c>)
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	4a11      	ldr	r2, [pc, #68]	; (8009bdc <extInt_Config+0x28c>)
 8009b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b9a:	6093      	str	r3, [r2, #8]
		break;
 8009b9c:	f000 bcc9 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	4a11      	ldr	r2, [pc, #68]	; (8009bec <extInt_Config+0x29c>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d107      	bne.n	8009bbc <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8009bac:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <extInt_Config+0x28c>)
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	4a0a      	ldr	r2, [pc, #40]	; (8009bdc <extInt_Config+0x28c>)
 8009bb2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009bb6:	6093      	str	r3, [r2, #8]
		break;
 8009bb8:	f000 bcbb 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	4a0b      	ldr	r2, [pc, #44]	; (8009bf0 <extInt_Config+0x2a0>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d117      	bne.n	8009bf8 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8009bc8:	4b04      	ldr	r3, [pc, #16]	; (8009bdc <extInt_Config+0x28c>)
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	4a03      	ldr	r2, [pc, #12]	; (8009bdc <extInt_Config+0x28c>)
 8009bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009bd2:	6093      	str	r3, [r2, #8]
		break;
 8009bd4:	f000 bcad 	b.w	800a532 <extInt_Config+0xbe2>
 8009bd8:	40023800 	.word	0x40023800
 8009bdc:	40013800 	.word	0x40013800
 8009be0:	40020000 	.word	0x40020000
 8009be4:	40020400 	.word	0x40020400
 8009be8:	40020800 	.word	0x40020800
 8009bec:	40020c00 	.word	0x40020c00
 8009bf0:	40021000 	.word	0x40021000
 8009bf4:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	4a8a      	ldr	r2, [pc, #552]	; (8009e28 <extInt_Config+0x4d8>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d107      	bne.n	8009c14 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8009c04:	4b89      	ldr	r3, [pc, #548]	; (8009e2c <extInt_Config+0x4dc>)
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	4a88      	ldr	r2, [pc, #544]	; (8009e2c <extInt_Config+0x4dc>)
 8009c0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009c0e:	6093      	str	r3, [r2, #8]
		break;
 8009c10:	f000 bc8f 	b.w	800a532 <extInt_Config+0xbe2>
			__NOP();
 8009c14:	bf00      	nop
		break;
 8009c16:	f000 bc8c 	b.w	800a532 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8009c1a:	4b84      	ldr	r3, [pc, #528]	; (8009e2c <extInt_Config+0x4dc>)
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	4a83      	ldr	r2, [pc, #524]	; (8009e2c <extInt_Config+0x4dc>)
 8009c20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c24:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	4a80      	ldr	r2, [pc, #512]	; (8009e30 <extInt_Config+0x4e0>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d105      	bne.n	8009c3e <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8009c32:	4b7e      	ldr	r3, [pc, #504]	; (8009e2c <extInt_Config+0x4dc>)
 8009c34:	4a7d      	ldr	r2, [pc, #500]	; (8009e2c <extInt_Config+0x4dc>)
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8009c3a:	f000 bc7a 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	4a7b      	ldr	r2, [pc, #492]	; (8009e34 <extInt_Config+0x4e4>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d107      	bne.n	8009c5a <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8009c4a:	4b78      	ldr	r3, [pc, #480]	; (8009e2c <extInt_Config+0x4dc>)
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	4a77      	ldr	r2, [pc, #476]	; (8009e2c <extInt_Config+0x4dc>)
 8009c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c54:	6093      	str	r3, [r2, #8]
		break;
 8009c56:	f000 bc6c 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	4a75      	ldr	r2, [pc, #468]	; (8009e38 <extInt_Config+0x4e8>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d107      	bne.n	8009c76 <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8009c66:	4b71      	ldr	r3, [pc, #452]	; (8009e2c <extInt_Config+0x4dc>)
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	4a70      	ldr	r2, [pc, #448]	; (8009e2c <extInt_Config+0x4dc>)
 8009c6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009c70:	6093      	str	r3, [r2, #8]
		break;
 8009c72:	f000 bc5e 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	4a6f      	ldr	r2, [pc, #444]	; (8009e3c <extInt_Config+0x4ec>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d107      	bne.n	8009c92 <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8009c82:	4b6a      	ldr	r3, [pc, #424]	; (8009e2c <extInt_Config+0x4dc>)
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	4a69      	ldr	r2, [pc, #420]	; (8009e2c <extInt_Config+0x4dc>)
 8009c88:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8009c8c:	6093      	str	r3, [r2, #8]
		break;
 8009c8e:	f000 bc50 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	4a69      	ldr	r2, [pc, #420]	; (8009e40 <extInt_Config+0x4f0>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d107      	bne.n	8009cae <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8009c9e:	4b63      	ldr	r3, [pc, #396]	; (8009e2c <extInt_Config+0x4dc>)
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	4a62      	ldr	r2, [pc, #392]	; (8009e2c <extInt_Config+0x4dc>)
 8009ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ca8:	6093      	str	r3, [r2, #8]
		break;
 8009caa:	f000 bc42 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	4a5c      	ldr	r2, [pc, #368]	; (8009e28 <extInt_Config+0x4d8>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d107      	bne.n	8009cca <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8009cba:	4b5c      	ldr	r3, [pc, #368]	; (8009e2c <extInt_Config+0x4dc>)
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	4a5b      	ldr	r2, [pc, #364]	; (8009e2c <extInt_Config+0x4dc>)
 8009cc0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8009cc4:	6093      	str	r3, [r2, #8]
		break;
 8009cc6:	f000 bc34 	b.w	800a532 <extInt_Config+0xbe2>
			__NOP();
 8009cca:	bf00      	nop
		break;
 8009ccc:	f000 bc31 	b.w	800a532 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 8009cd0:	4b56      	ldr	r3, [pc, #344]	; (8009e2c <extInt_Config+0x4dc>)
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	4a55      	ldr	r2, [pc, #340]	; (8009e2c <extInt_Config+0x4dc>)
 8009cd6:	f023 030f 	bic.w	r3, r3, #15
 8009cda:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	4a53      	ldr	r2, [pc, #332]	; (8009e30 <extInt_Config+0x4e0>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d105      	bne.n	8009cf4 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8009ce8:	4b50      	ldr	r3, [pc, #320]	; (8009e2c <extInt_Config+0x4dc>)
 8009cea:	4a50      	ldr	r2, [pc, #320]	; (8009e2c <extInt_Config+0x4dc>)
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8009cf0:	f000 bc1f 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	4a4e      	ldr	r2, [pc, #312]	; (8009e34 <extInt_Config+0x4e4>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d107      	bne.n	8009d10 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8009d00:	4b4a      	ldr	r3, [pc, #296]	; (8009e2c <extInt_Config+0x4dc>)
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	4a49      	ldr	r2, [pc, #292]	; (8009e2c <extInt_Config+0x4dc>)
 8009d06:	f043 0301 	orr.w	r3, r3, #1
 8009d0a:	60d3      	str	r3, [r2, #12]
		break;
 8009d0c:	f000 bc11 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	4a48      	ldr	r2, [pc, #288]	; (8009e38 <extInt_Config+0x4e8>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d107      	bne.n	8009d2c <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8009d1c:	4b43      	ldr	r3, [pc, #268]	; (8009e2c <extInt_Config+0x4dc>)
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	4a42      	ldr	r2, [pc, #264]	; (8009e2c <extInt_Config+0x4dc>)
 8009d22:	f043 0302 	orr.w	r3, r3, #2
 8009d26:	60d3      	str	r3, [r2, #12]
		break;
 8009d28:	f000 bc03 	b.w	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	4a42      	ldr	r2, [pc, #264]	; (8009e3c <extInt_Config+0x4ec>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d106      	bne.n	8009d46 <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8009d38:	4b3c      	ldr	r3, [pc, #240]	; (8009e2c <extInt_Config+0x4dc>)
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	4a3b      	ldr	r2, [pc, #236]	; (8009e2c <extInt_Config+0x4dc>)
 8009d3e:	f043 0303 	orr.w	r3, r3, #3
 8009d42:	60d3      	str	r3, [r2, #12]
		break;
 8009d44:	e3f5      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	4a3c      	ldr	r2, [pc, #240]	; (8009e40 <extInt_Config+0x4f0>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d106      	bne.n	8009d60 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8009d52:	4b36      	ldr	r3, [pc, #216]	; (8009e2c <extInt_Config+0x4dc>)
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	4a35      	ldr	r2, [pc, #212]	; (8009e2c <extInt_Config+0x4dc>)
 8009d58:	f043 0304 	orr.w	r3, r3, #4
 8009d5c:	60d3      	str	r3, [r2, #12]
		break;
 8009d5e:	e3e8      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	4a30      	ldr	r2, [pc, #192]	; (8009e28 <extInt_Config+0x4d8>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d106      	bne.n	8009d7a <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8009d6c:	4b2f      	ldr	r3, [pc, #188]	; (8009e2c <extInt_Config+0x4dc>)
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	4a2e      	ldr	r2, [pc, #184]	; (8009e2c <extInt_Config+0x4dc>)
 8009d72:	f043 0307 	orr.w	r3, r3, #7
 8009d76:	60d3      	str	r3, [r2, #12]
		break;
 8009d78:	e3db      	b.n	800a532 <extInt_Config+0xbe2>
			__NOP();
 8009d7a:	bf00      	nop
		break;
 8009d7c:	e3d9      	b.n	800a532 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8009d7e:	4b2b      	ldr	r3, [pc, #172]	; (8009e2c <extInt_Config+0x4dc>)
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	4a2a      	ldr	r2, [pc, #168]	; (8009e2c <extInt_Config+0x4dc>)
 8009d84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d88:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	4a27      	ldr	r2, [pc, #156]	; (8009e30 <extInt_Config+0x4e0>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d104      	bne.n	8009da0 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8009d96:	4b25      	ldr	r3, [pc, #148]	; (8009e2c <extInt_Config+0x4dc>)
 8009d98:	4a24      	ldr	r2, [pc, #144]	; (8009e2c <extInt_Config+0x4dc>)
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8009d9e:	e3c8      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	4a23      	ldr	r2, [pc, #140]	; (8009e34 <extInt_Config+0x4e4>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d106      	bne.n	8009dba <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8009dac:	4b1f      	ldr	r3, [pc, #124]	; (8009e2c <extInt_Config+0x4dc>)
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	4a1e      	ldr	r2, [pc, #120]	; (8009e2c <extInt_Config+0x4dc>)
 8009db2:	f043 0310 	orr.w	r3, r3, #16
 8009db6:	60d3      	str	r3, [r2, #12]
		break;
 8009db8:	e3bb      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	4a1d      	ldr	r2, [pc, #116]	; (8009e38 <extInt_Config+0x4e8>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d106      	bne.n	8009dd4 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8009dc6:	4b19      	ldr	r3, [pc, #100]	; (8009e2c <extInt_Config+0x4dc>)
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	4a18      	ldr	r2, [pc, #96]	; (8009e2c <extInt_Config+0x4dc>)
 8009dcc:	f043 0320 	orr.w	r3, r3, #32
 8009dd0:	60d3      	str	r3, [r2, #12]
		break;
 8009dd2:	e3ae      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	4a18      	ldr	r2, [pc, #96]	; (8009e3c <extInt_Config+0x4ec>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d106      	bne.n	8009dee <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8009de0:	4b12      	ldr	r3, [pc, #72]	; (8009e2c <extInt_Config+0x4dc>)
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	4a11      	ldr	r2, [pc, #68]	; (8009e2c <extInt_Config+0x4dc>)
 8009de6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009dea:	60d3      	str	r3, [r2, #12]
		break;
 8009dec:	e3a1      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	4a12      	ldr	r2, [pc, #72]	; (8009e40 <extInt_Config+0x4f0>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d106      	bne.n	8009e08 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8009dfa:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <extInt_Config+0x4dc>)
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	4a0b      	ldr	r2, [pc, #44]	; (8009e2c <extInt_Config+0x4dc>)
 8009e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e04:	60d3      	str	r3, [r2, #12]
		break;
 8009e06:	e394      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	4a06      	ldr	r2, [pc, #24]	; (8009e28 <extInt_Config+0x4d8>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d106      	bne.n	8009e22 <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8009e14:	4b05      	ldr	r3, [pc, #20]	; (8009e2c <extInt_Config+0x4dc>)
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	4a04      	ldr	r2, [pc, #16]	; (8009e2c <extInt_Config+0x4dc>)
 8009e1a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009e1e:	60d3      	str	r3, [r2, #12]
		break;
 8009e20:	e387      	b.n	800a532 <extInt_Config+0xbe2>
			__NOP();
 8009e22:	bf00      	nop
		break;
 8009e24:	e385      	b.n	800a532 <extInt_Config+0xbe2>
 8009e26:	bf00      	nop
 8009e28:	40021c00 	.word	0x40021c00
 8009e2c:	40013800 	.word	0x40013800
 8009e30:	40020000 	.word	0x40020000
 8009e34:	40020400 	.word	0x40020400
 8009e38:	40020800 	.word	0x40020800
 8009e3c:	40020c00 	.word	0x40020c00
 8009e40:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 8009e44:	4b86      	ldr	r3, [pc, #536]	; (800a060 <extInt_Config+0x710>)
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	4a85      	ldr	r2, [pc, #532]	; (800a060 <extInt_Config+0x710>)
 8009e4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e4e:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	4a83      	ldr	r2, [pc, #524]	; (800a064 <extInt_Config+0x714>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d104      	bne.n	8009e66 <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8009e5c:	4b80      	ldr	r3, [pc, #512]	; (800a060 <extInt_Config+0x710>)
 8009e5e:	4a80      	ldr	r2, [pc, #512]	; (800a060 <extInt_Config+0x710>)
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8009e64:	e365      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	4a7e      	ldr	r2, [pc, #504]	; (800a068 <extInt_Config+0x718>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d106      	bne.n	8009e80 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8009e72:	4b7b      	ldr	r3, [pc, #492]	; (800a060 <extInt_Config+0x710>)
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	4a7a      	ldr	r2, [pc, #488]	; (800a060 <extInt_Config+0x710>)
 8009e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e7c:	60d3      	str	r3, [r2, #12]
		break;
 8009e7e:	e358      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	4a79      	ldr	r2, [pc, #484]	; (800a06c <extInt_Config+0x71c>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d106      	bne.n	8009e9a <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8009e8c:	4b74      	ldr	r3, [pc, #464]	; (800a060 <extInt_Config+0x710>)
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	4a73      	ldr	r2, [pc, #460]	; (800a060 <extInt_Config+0x710>)
 8009e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e96:	60d3      	str	r3, [r2, #12]
		break;
 8009e98:	e34b      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	4a73      	ldr	r2, [pc, #460]	; (800a070 <extInt_Config+0x720>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d106      	bne.n	8009eb4 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8009ea6:	4b6e      	ldr	r3, [pc, #440]	; (800a060 <extInt_Config+0x710>)
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	4a6d      	ldr	r2, [pc, #436]	; (800a060 <extInt_Config+0x710>)
 8009eac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009eb0:	60d3      	str	r3, [r2, #12]
		break;
 8009eb2:	e33e      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	4a6e      	ldr	r2, [pc, #440]	; (800a074 <extInt_Config+0x724>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d106      	bne.n	8009ece <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8009ec0:	4b67      	ldr	r3, [pc, #412]	; (800a060 <extInt_Config+0x710>)
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	4a66      	ldr	r2, [pc, #408]	; (800a060 <extInt_Config+0x710>)
 8009ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009eca:	60d3      	str	r3, [r2, #12]
		break;
 8009ecc:	e331      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	4a68      	ldr	r2, [pc, #416]	; (800a078 <extInt_Config+0x728>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d106      	bne.n	8009ee8 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8009eda:	4b61      	ldr	r3, [pc, #388]	; (800a060 <extInt_Config+0x710>)
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	4a60      	ldr	r2, [pc, #384]	; (800a060 <extInt_Config+0x710>)
 8009ee0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009ee4:	60d3      	str	r3, [r2, #12]
		break;
 8009ee6:	e324      	b.n	800a532 <extInt_Config+0xbe2>
			__NOP();
 8009ee8:	bf00      	nop
		break;
 8009eea:	e322      	b.n	800a532 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 8009eec:	4b5c      	ldr	r3, [pc, #368]	; (800a060 <extInt_Config+0x710>)
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	4a5b      	ldr	r2, [pc, #364]	; (800a060 <extInt_Config+0x710>)
 8009ef2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ef6:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	4a59      	ldr	r2, [pc, #356]	; (800a064 <extInt_Config+0x714>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d104      	bne.n	8009f0e <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8009f04:	4b56      	ldr	r3, [pc, #344]	; (800a060 <extInt_Config+0x710>)
 8009f06:	4a56      	ldr	r2, [pc, #344]	; (800a060 <extInt_Config+0x710>)
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8009f0c:	e311      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	4a54      	ldr	r2, [pc, #336]	; (800a068 <extInt_Config+0x718>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d106      	bne.n	8009f28 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8009f1a:	4b51      	ldr	r3, [pc, #324]	; (800a060 <extInt_Config+0x710>)
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	4a50      	ldr	r2, [pc, #320]	; (800a060 <extInt_Config+0x710>)
 8009f20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f24:	60d3      	str	r3, [r2, #12]
		break;
 8009f26:	e304      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	4a4f      	ldr	r2, [pc, #316]	; (800a06c <extInt_Config+0x71c>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d106      	bne.n	8009f42 <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8009f34:	4b4a      	ldr	r3, [pc, #296]	; (800a060 <extInt_Config+0x710>)
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	4a49      	ldr	r2, [pc, #292]	; (800a060 <extInt_Config+0x710>)
 8009f3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009f3e:	60d3      	str	r3, [r2, #12]
		break;
 8009f40:	e2f7      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	4a49      	ldr	r2, [pc, #292]	; (800a070 <extInt_Config+0x720>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d106      	bne.n	8009f5c <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8009f4e:	4b44      	ldr	r3, [pc, #272]	; (800a060 <extInt_Config+0x710>)
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	4a43      	ldr	r2, [pc, #268]	; (800a060 <extInt_Config+0x710>)
 8009f54:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8009f58:	60d3      	str	r3, [r2, #12]
		break;
 8009f5a:	e2ea      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	4a44      	ldr	r2, [pc, #272]	; (800a074 <extInt_Config+0x724>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d106      	bne.n	8009f76 <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8009f68:	4b3d      	ldr	r3, [pc, #244]	; (800a060 <extInt_Config+0x710>)
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	4a3c      	ldr	r2, [pc, #240]	; (800a060 <extInt_Config+0x710>)
 8009f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f72:	60d3      	str	r3, [r2, #12]
		break;
 8009f74:	e2dd      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	4a3e      	ldr	r2, [pc, #248]	; (800a078 <extInt_Config+0x728>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d106      	bne.n	8009f90 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8009f82:	4b37      	ldr	r3, [pc, #220]	; (800a060 <extInt_Config+0x710>)
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	4a36      	ldr	r2, [pc, #216]	; (800a060 <extInt_Config+0x710>)
 8009f88:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8009f8c:	60d3      	str	r3, [r2, #12]
		break;
 8009f8e:	e2d0      	b.n	800a532 <extInt_Config+0xbe2>
			__NOP();
 8009f90:	bf00      	nop
		break;
 8009f92:	e2ce      	b.n	800a532 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 8009f94:	4b32      	ldr	r3, [pc, #200]	; (800a060 <extInt_Config+0x710>)
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	4a31      	ldr	r2, [pc, #196]	; (800a060 <extInt_Config+0x710>)
 8009f9a:	f023 030f 	bic.w	r3, r3, #15
 8009f9e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	4a2f      	ldr	r2, [pc, #188]	; (800a064 <extInt_Config+0x714>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d104      	bne.n	8009fb6 <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8009fac:	4b2c      	ldr	r3, [pc, #176]	; (800a060 <extInt_Config+0x710>)
 8009fae:	4a2c      	ldr	r2, [pc, #176]	; (800a060 <extInt_Config+0x710>)
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8009fb4:	e2bd      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	4a2a      	ldr	r2, [pc, #168]	; (800a068 <extInt_Config+0x718>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d106      	bne.n	8009fd0 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8009fc2:	4b27      	ldr	r3, [pc, #156]	; (800a060 <extInt_Config+0x710>)
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	4a26      	ldr	r2, [pc, #152]	; (800a060 <extInt_Config+0x710>)
 8009fc8:	f043 0301 	orr.w	r3, r3, #1
 8009fcc:	6113      	str	r3, [r2, #16]
		break;
 8009fce:	e2b0      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	4a25      	ldr	r2, [pc, #148]	; (800a06c <extInt_Config+0x71c>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d106      	bne.n	8009fea <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8009fdc:	4b20      	ldr	r3, [pc, #128]	; (800a060 <extInt_Config+0x710>)
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	4a1f      	ldr	r2, [pc, #124]	; (800a060 <extInt_Config+0x710>)
 8009fe2:	f043 0302 	orr.w	r3, r3, #2
 8009fe6:	6113      	str	r3, [r2, #16]
		break;
 8009fe8:	e2a3      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	4a1f      	ldr	r2, [pc, #124]	; (800a070 <extInt_Config+0x720>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d106      	bne.n	800a004 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8009ff6:	4b1a      	ldr	r3, [pc, #104]	; (800a060 <extInt_Config+0x710>)
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	4a19      	ldr	r2, [pc, #100]	; (800a060 <extInt_Config+0x710>)
 8009ffc:	f043 0303 	orr.w	r3, r3, #3
 800a000:	6113      	str	r3, [r2, #16]
		break;
 800a002:	e296      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	4a1a      	ldr	r2, [pc, #104]	; (800a074 <extInt_Config+0x724>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d106      	bne.n	800a01e <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 800a010:	4b13      	ldr	r3, [pc, #76]	; (800a060 <extInt_Config+0x710>)
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	4a12      	ldr	r2, [pc, #72]	; (800a060 <extInt_Config+0x710>)
 800a016:	f043 0304 	orr.w	r3, r3, #4
 800a01a:	6113      	str	r3, [r2, #16]
		break;
 800a01c:	e289      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	4a14      	ldr	r2, [pc, #80]	; (800a078 <extInt_Config+0x728>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d106      	bne.n	800a038 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 800a02a:	4b0d      	ldr	r3, [pc, #52]	; (800a060 <extInt_Config+0x710>)
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	4a0c      	ldr	r2, [pc, #48]	; (800a060 <extInt_Config+0x710>)
 800a030:	f043 0307 	orr.w	r3, r3, #7
 800a034:	6113      	str	r3, [r2, #16]
		break;
 800a036:	e27c      	b.n	800a532 <extInt_Config+0xbe2>
			__NOP();
 800a038:	bf00      	nop
		break;
 800a03a:	e27a      	b.n	800a532 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 800a03c:	4b08      	ldr	r3, [pc, #32]	; (800a060 <extInt_Config+0x710>)
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	4a07      	ldr	r2, [pc, #28]	; (800a060 <extInt_Config+0x710>)
 800a042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a046:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	4a05      	ldr	r2, [pc, #20]	; (800a064 <extInt_Config+0x714>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d113      	bne.n	800a07c <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 800a054:	4b02      	ldr	r3, [pc, #8]	; (800a060 <extInt_Config+0x710>)
 800a056:	4a02      	ldr	r2, [pc, #8]	; (800a060 <extInt_Config+0x710>)
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800a05c:	e269      	b.n	800a532 <extInt_Config+0xbe2>
 800a05e:	bf00      	nop
 800a060:	40013800 	.word	0x40013800
 800a064:	40020000 	.word	0x40020000
 800a068:	40020400 	.word	0x40020400
 800a06c:	40020800 	.word	0x40020800
 800a070:	40020c00 	.word	0x40020c00
 800a074:	40021000 	.word	0x40021000
 800a078:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	4a83      	ldr	r2, [pc, #524]	; (800a290 <extInt_Config+0x940>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d106      	bne.n	800a096 <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 800a088:	4b82      	ldr	r3, [pc, #520]	; (800a294 <extInt_Config+0x944>)
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	4a81      	ldr	r2, [pc, #516]	; (800a294 <extInt_Config+0x944>)
 800a08e:	f043 0310 	orr.w	r3, r3, #16
 800a092:	6113      	str	r3, [r2, #16]
		break;
 800a094:	e24d      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	4a7e      	ldr	r2, [pc, #504]	; (800a298 <extInt_Config+0x948>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d106      	bne.n	800a0b0 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800a0a2:	4b7c      	ldr	r3, [pc, #496]	; (800a294 <extInt_Config+0x944>)
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	4a7b      	ldr	r2, [pc, #492]	; (800a294 <extInt_Config+0x944>)
 800a0a8:	f043 0320 	orr.w	r3, r3, #32
 800a0ac:	6113      	str	r3, [r2, #16]
		break;
 800a0ae:	e240      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	4a79      	ldr	r2, [pc, #484]	; (800a29c <extInt_Config+0x94c>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d106      	bne.n	800a0ca <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 800a0bc:	4b75      	ldr	r3, [pc, #468]	; (800a294 <extInt_Config+0x944>)
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	4a74      	ldr	r2, [pc, #464]	; (800a294 <extInt_Config+0x944>)
 800a0c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a0c6:	6113      	str	r3, [r2, #16]
		break;
 800a0c8:	e233      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	4a73      	ldr	r2, [pc, #460]	; (800a2a0 <extInt_Config+0x950>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d106      	bne.n	800a0e4 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800a0d6:	4b6f      	ldr	r3, [pc, #444]	; (800a294 <extInt_Config+0x944>)
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	4a6e      	ldr	r2, [pc, #440]	; (800a294 <extInt_Config+0x944>)
 800a0dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0e0:	6113      	str	r3, [r2, #16]
		break;
 800a0e2:	e226      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	4a6e      	ldr	r2, [pc, #440]	; (800a2a4 <extInt_Config+0x954>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d106      	bne.n	800a0fe <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 800a0f0:	4b68      	ldr	r3, [pc, #416]	; (800a294 <extInt_Config+0x944>)
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	4a67      	ldr	r2, [pc, #412]	; (800a294 <extInt_Config+0x944>)
 800a0f6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800a0fa:	6113      	str	r3, [r2, #16]
		break;
 800a0fc:	e219      	b.n	800a532 <extInt_Config+0xbe2>
			__NOP();
 800a0fe:	bf00      	nop
		break;
 800a100:	e217      	b.n	800a532 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 800a102:	4b64      	ldr	r3, [pc, #400]	; (800a294 <extInt_Config+0x944>)
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	4a63      	ldr	r2, [pc, #396]	; (800a294 <extInt_Config+0x944>)
 800a108:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a10c:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	4a64      	ldr	r2, [pc, #400]	; (800a2a8 <extInt_Config+0x958>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d104      	bne.n	800a124 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 800a11a:	4b5e      	ldr	r3, [pc, #376]	; (800a294 <extInt_Config+0x944>)
 800a11c:	4a5d      	ldr	r2, [pc, #372]	; (800a294 <extInt_Config+0x944>)
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800a122:	e206      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	4a59      	ldr	r2, [pc, #356]	; (800a290 <extInt_Config+0x940>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d106      	bne.n	800a13e <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 800a130:	4b58      	ldr	r3, [pc, #352]	; (800a294 <extInt_Config+0x944>)
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	4a57      	ldr	r2, [pc, #348]	; (800a294 <extInt_Config+0x944>)
 800a136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a13a:	6113      	str	r3, [r2, #16]
		break;
 800a13c:	e1f9      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	4a54      	ldr	r2, [pc, #336]	; (800a298 <extInt_Config+0x948>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d106      	bne.n	800a158 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 800a14a:	4b52      	ldr	r3, [pc, #328]	; (800a294 <extInt_Config+0x944>)
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	4a51      	ldr	r2, [pc, #324]	; (800a294 <extInt_Config+0x944>)
 800a150:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a154:	6113      	str	r3, [r2, #16]
		break;
 800a156:	e1ec      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	4a4f      	ldr	r2, [pc, #316]	; (800a29c <extInt_Config+0x94c>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d106      	bne.n	800a172 <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800a164:	4b4b      	ldr	r3, [pc, #300]	; (800a294 <extInt_Config+0x944>)
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	4a4a      	ldr	r2, [pc, #296]	; (800a294 <extInt_Config+0x944>)
 800a16a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a16e:	6113      	str	r3, [r2, #16]
		break;
 800a170:	e1df      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	4a49      	ldr	r2, [pc, #292]	; (800a2a0 <extInt_Config+0x950>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d106      	bne.n	800a18c <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 800a17e:	4b45      	ldr	r3, [pc, #276]	; (800a294 <extInt_Config+0x944>)
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	4a44      	ldr	r2, [pc, #272]	; (800a294 <extInt_Config+0x944>)
 800a184:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a188:	6113      	str	r3, [r2, #16]
		break;
 800a18a:	e1d2      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	4a44      	ldr	r2, [pc, #272]	; (800a2a4 <extInt_Config+0x954>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d106      	bne.n	800a1a6 <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 800a198:	4b3e      	ldr	r3, [pc, #248]	; (800a294 <extInt_Config+0x944>)
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	4a3d      	ldr	r2, [pc, #244]	; (800a294 <extInt_Config+0x944>)
 800a19e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a1a2:	6113      	str	r3, [r2, #16]
		break;
 800a1a4:	e1c5      	b.n	800a532 <extInt_Config+0xbe2>
			__NOP();
 800a1a6:	bf00      	nop
		break;
 800a1a8:	e1c3      	b.n	800a532 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 800a1aa:	4b3a      	ldr	r3, [pc, #232]	; (800a294 <extInt_Config+0x944>)
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	4a39      	ldr	r2, [pc, #228]	; (800a294 <extInt_Config+0x944>)
 800a1b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1b4:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	4a3a      	ldr	r2, [pc, #232]	; (800a2a8 <extInt_Config+0x958>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d104      	bne.n	800a1cc <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800a1c2:	4b34      	ldr	r3, [pc, #208]	; (800a294 <extInt_Config+0x944>)
 800a1c4:	4a33      	ldr	r2, [pc, #204]	; (800a294 <extInt_Config+0x944>)
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800a1ca:	e1b2      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	4a2f      	ldr	r2, [pc, #188]	; (800a290 <extInt_Config+0x940>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d106      	bne.n	800a1e6 <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 800a1d8:	4b2e      	ldr	r3, [pc, #184]	; (800a294 <extInt_Config+0x944>)
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	4a2d      	ldr	r2, [pc, #180]	; (800a294 <extInt_Config+0x944>)
 800a1de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a1e2:	6113      	str	r3, [r2, #16]
		break;
 800a1e4:	e1a5      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	4a2a      	ldr	r2, [pc, #168]	; (800a298 <extInt_Config+0x948>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d106      	bne.n	800a200 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 800a1f2:	4b28      	ldr	r3, [pc, #160]	; (800a294 <extInt_Config+0x944>)
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	4a27      	ldr	r2, [pc, #156]	; (800a294 <extInt_Config+0x944>)
 800a1f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a1fc:	6113      	str	r3, [r2, #16]
		break;
 800a1fe:	e198      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	4a25      	ldr	r2, [pc, #148]	; (800a29c <extInt_Config+0x94c>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d106      	bne.n	800a21a <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 800a20c:	4b21      	ldr	r3, [pc, #132]	; (800a294 <extInt_Config+0x944>)
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	4a20      	ldr	r2, [pc, #128]	; (800a294 <extInt_Config+0x944>)
 800a212:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a216:	6113      	str	r3, [r2, #16]
		break;
 800a218:	e18b      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	4a1f      	ldr	r2, [pc, #124]	; (800a2a0 <extInt_Config+0x950>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d106      	bne.n	800a234 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800a226:	4b1b      	ldr	r3, [pc, #108]	; (800a294 <extInt_Config+0x944>)
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	4a1a      	ldr	r2, [pc, #104]	; (800a294 <extInt_Config+0x944>)
 800a22c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a230:	6113      	str	r3, [r2, #16]
		break;
 800a232:	e17e      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	4a1a      	ldr	r2, [pc, #104]	; (800a2a4 <extInt_Config+0x954>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d106      	bne.n	800a24e <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 800a240:	4b14      	ldr	r3, [pc, #80]	; (800a294 <extInt_Config+0x944>)
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	4a13      	ldr	r2, [pc, #76]	; (800a294 <extInt_Config+0x944>)
 800a246:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a24a:	6113      	str	r3, [r2, #16]
		break;
 800a24c:	e171      	b.n	800a532 <extInt_Config+0xbe2>
			__NOP();
 800a24e:	bf00      	nop
		break;
 800a250:	e16f      	b.n	800a532 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 800a252:	4b10      	ldr	r3, [pc, #64]	; (800a294 <extInt_Config+0x944>)
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	4a0f      	ldr	r2, [pc, #60]	; (800a294 <extInt_Config+0x944>)
 800a258:	f023 030f 	bic.w	r3, r3, #15
 800a25c:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	4a10      	ldr	r2, [pc, #64]	; (800a2a8 <extInt_Config+0x958>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d104      	bne.n	800a274 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 800a26a:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <extInt_Config+0x944>)
 800a26c:	4a09      	ldr	r2, [pc, #36]	; (800a294 <extInt_Config+0x944>)
 800a26e:	695b      	ldr	r3, [r3, #20]
 800a270:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800a272:	e15e      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	4a05      	ldr	r2, [pc, #20]	; (800a290 <extInt_Config+0x940>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d115      	bne.n	800a2ac <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 800a280:	4b04      	ldr	r3, [pc, #16]	; (800a294 <extInt_Config+0x944>)
 800a282:	695b      	ldr	r3, [r3, #20]
 800a284:	4a03      	ldr	r2, [pc, #12]	; (800a294 <extInt_Config+0x944>)
 800a286:	f043 0301 	orr.w	r3, r3, #1
 800a28a:	6153      	str	r3, [r2, #20]
		break;
 800a28c:	e151      	b.n	800a532 <extInt_Config+0xbe2>
 800a28e:	bf00      	nop
 800a290:	40020400 	.word	0x40020400
 800a294:	40013800 	.word	0x40013800
 800a298:	40020800 	.word	0x40020800
 800a29c:	40020c00 	.word	0x40020c00
 800a2a0:	40021000 	.word	0x40021000
 800a2a4:	40021c00 	.word	0x40021c00
 800a2a8:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	4a83      	ldr	r2, [pc, #524]	; (800a4c0 <extInt_Config+0xb70>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d106      	bne.n	800a2c6 <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 800a2b8:	4b82      	ldr	r3, [pc, #520]	; (800a4c4 <extInt_Config+0xb74>)
 800a2ba:	695b      	ldr	r3, [r3, #20]
 800a2bc:	4a81      	ldr	r2, [pc, #516]	; (800a4c4 <extInt_Config+0xb74>)
 800a2be:	f043 0302 	orr.w	r3, r3, #2
 800a2c2:	6153      	str	r3, [r2, #20]
		break;
 800a2c4:	e135      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	4a7e      	ldr	r2, [pc, #504]	; (800a4c8 <extInt_Config+0xb78>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d106      	bne.n	800a2e0 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800a2d2:	4b7c      	ldr	r3, [pc, #496]	; (800a4c4 <extInt_Config+0xb74>)
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	4a7b      	ldr	r2, [pc, #492]	; (800a4c4 <extInt_Config+0xb74>)
 800a2d8:	f043 0303 	orr.w	r3, r3, #3
 800a2dc:	6153      	str	r3, [r2, #20]
		break;
 800a2de:	e128      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	4a79      	ldr	r2, [pc, #484]	; (800a4cc <extInt_Config+0xb7c>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d106      	bne.n	800a2fa <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 800a2ec:	4b75      	ldr	r3, [pc, #468]	; (800a4c4 <extInt_Config+0xb74>)
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	4a74      	ldr	r2, [pc, #464]	; (800a4c4 <extInt_Config+0xb74>)
 800a2f2:	f043 0304 	orr.w	r3, r3, #4
 800a2f6:	6153      	str	r3, [r2, #20]
		break;
 800a2f8:	e11b      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	4a73      	ldr	r2, [pc, #460]	; (800a4d0 <extInt_Config+0xb80>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d106      	bne.n	800a314 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 800a306:	4b6f      	ldr	r3, [pc, #444]	; (800a4c4 <extInt_Config+0xb74>)
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	4a6e      	ldr	r2, [pc, #440]	; (800a4c4 <extInt_Config+0xb74>)
 800a30c:	f043 0307 	orr.w	r3, r3, #7
 800a310:	6153      	str	r3, [r2, #20]
		break;
 800a312:	e10e      	b.n	800a532 <extInt_Config+0xbe2>
			__NOP();
 800a314:	bf00      	nop
		break;
 800a316:	e10c      	b.n	800a532 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 800a318:	4b6a      	ldr	r3, [pc, #424]	; (800a4c4 <extInt_Config+0xb74>)
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	4a69      	ldr	r2, [pc, #420]	; (800a4c4 <extInt_Config+0xb74>)
 800a31e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a322:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	4a6a      	ldr	r2, [pc, #424]	; (800a4d4 <extInt_Config+0xb84>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d104      	bne.n	800a33a <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 800a330:	4b64      	ldr	r3, [pc, #400]	; (800a4c4 <extInt_Config+0xb74>)
 800a332:	4a64      	ldr	r2, [pc, #400]	; (800a4c4 <extInt_Config+0xb74>)
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800a338:	e0fb      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	4a65      	ldr	r2, [pc, #404]	; (800a4d8 <extInt_Config+0xb88>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d106      	bne.n	800a354 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800a346:	4b5f      	ldr	r3, [pc, #380]	; (800a4c4 <extInt_Config+0xb74>)
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	4a5e      	ldr	r2, [pc, #376]	; (800a4c4 <extInt_Config+0xb74>)
 800a34c:	f043 0310 	orr.w	r3, r3, #16
 800a350:	6153      	str	r3, [r2, #20]
		break;
 800a352:	e0ee      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	4a59      	ldr	r2, [pc, #356]	; (800a4c0 <extInt_Config+0xb70>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d106      	bne.n	800a36e <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 800a360:	4b58      	ldr	r3, [pc, #352]	; (800a4c4 <extInt_Config+0xb74>)
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	4a57      	ldr	r2, [pc, #348]	; (800a4c4 <extInt_Config+0xb74>)
 800a366:	f043 0320 	orr.w	r3, r3, #32
 800a36a:	6153      	str	r3, [r2, #20]
		break;
 800a36c:	e0e1      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	4a54      	ldr	r2, [pc, #336]	; (800a4c8 <extInt_Config+0xb78>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d106      	bne.n	800a388 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800a37a:	4b52      	ldr	r3, [pc, #328]	; (800a4c4 <extInt_Config+0xb74>)
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	4a51      	ldr	r2, [pc, #324]	; (800a4c4 <extInt_Config+0xb74>)
 800a380:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a384:	6153      	str	r3, [r2, #20]
		break;
 800a386:	e0d4      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	4a4f      	ldr	r2, [pc, #316]	; (800a4cc <extInt_Config+0xb7c>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d106      	bne.n	800a3a2 <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800a394:	4b4b      	ldr	r3, [pc, #300]	; (800a4c4 <extInt_Config+0xb74>)
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	4a4a      	ldr	r2, [pc, #296]	; (800a4c4 <extInt_Config+0xb74>)
 800a39a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a39e:	6153      	str	r3, [r2, #20]
		break;
 800a3a0:	e0c7      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	4a49      	ldr	r2, [pc, #292]	; (800a4d0 <extInt_Config+0xb80>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d106      	bne.n	800a3bc <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800a3ae:	4b45      	ldr	r3, [pc, #276]	; (800a4c4 <extInt_Config+0xb74>)
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	4a44      	ldr	r2, [pc, #272]	; (800a4c4 <extInt_Config+0xb74>)
 800a3b4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800a3b8:	6153      	str	r3, [r2, #20]
		break;
 800a3ba:	e0ba      	b.n	800a532 <extInt_Config+0xbe2>
			__NOP();
 800a3bc:	bf00      	nop
		break;
 800a3be:	e0b8      	b.n	800a532 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 800a3c0:	4b40      	ldr	r3, [pc, #256]	; (800a4c4 <extInt_Config+0xb74>)
 800a3c2:	695b      	ldr	r3, [r3, #20]
 800a3c4:	4a3f      	ldr	r2, [pc, #252]	; (800a4c4 <extInt_Config+0xb74>)
 800a3c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a3ca:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	4a40      	ldr	r2, [pc, #256]	; (800a4d4 <extInt_Config+0xb84>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d104      	bne.n	800a3e2 <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 800a3d8:	4b3a      	ldr	r3, [pc, #232]	; (800a4c4 <extInt_Config+0xb74>)
 800a3da:	4a3a      	ldr	r2, [pc, #232]	; (800a4c4 <extInt_Config+0xb74>)
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800a3e0:	e0a7      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	4a3b      	ldr	r2, [pc, #236]	; (800a4d8 <extInt_Config+0xb88>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d106      	bne.n	800a3fc <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 800a3ee:	4b35      	ldr	r3, [pc, #212]	; (800a4c4 <extInt_Config+0xb74>)
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	4a34      	ldr	r2, [pc, #208]	; (800a4c4 <extInt_Config+0xb74>)
 800a3f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3f8:	6153      	str	r3, [r2, #20]
		break;
 800a3fa:	e09a      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	4a2f      	ldr	r2, [pc, #188]	; (800a4c0 <extInt_Config+0xb70>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d106      	bne.n	800a416 <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 800a408:	4b2e      	ldr	r3, [pc, #184]	; (800a4c4 <extInt_Config+0xb74>)
 800a40a:	695b      	ldr	r3, [r3, #20]
 800a40c:	4a2d      	ldr	r2, [pc, #180]	; (800a4c4 <extInt_Config+0xb74>)
 800a40e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a412:	6153      	str	r3, [r2, #20]
		break;
 800a414:	e08d      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	4a2a      	ldr	r2, [pc, #168]	; (800a4c8 <extInt_Config+0xb78>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d106      	bne.n	800a430 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 800a422:	4b28      	ldr	r3, [pc, #160]	; (800a4c4 <extInt_Config+0xb74>)
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	4a27      	ldr	r2, [pc, #156]	; (800a4c4 <extInt_Config+0xb74>)
 800a428:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a42c:	6153      	str	r3, [r2, #20]
		break;
 800a42e:	e080      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	4a25      	ldr	r2, [pc, #148]	; (800a4cc <extInt_Config+0xb7c>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d106      	bne.n	800a44a <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 800a43c:	4b21      	ldr	r3, [pc, #132]	; (800a4c4 <extInt_Config+0xb74>)
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	4a20      	ldr	r2, [pc, #128]	; (800a4c4 <extInt_Config+0xb74>)
 800a442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a446:	6153      	str	r3, [r2, #20]
		break;
 800a448:	e073      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	4a1f      	ldr	r2, [pc, #124]	; (800a4d0 <extInt_Config+0xb80>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d106      	bne.n	800a464 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 800a456:	4b1b      	ldr	r3, [pc, #108]	; (800a4c4 <extInt_Config+0xb74>)
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	4a1a      	ldr	r2, [pc, #104]	; (800a4c4 <extInt_Config+0xb74>)
 800a45c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a460:	6153      	str	r3, [r2, #20]
		break;
 800a462:	e066      	b.n	800a532 <extInt_Config+0xbe2>
			__NOP();
 800a464:	bf00      	nop
		break;
 800a466:	e064      	b.n	800a532 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 800a468:	4b16      	ldr	r3, [pc, #88]	; (800a4c4 <extInt_Config+0xb74>)
 800a46a:	695b      	ldr	r3, [r3, #20]
 800a46c:	4a15      	ldr	r2, [pc, #84]	; (800a4c4 <extInt_Config+0xb74>)
 800a46e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a472:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	4a16      	ldr	r2, [pc, #88]	; (800a4d4 <extInt_Config+0xb84>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d104      	bne.n	800a48a <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 800a480:	4b10      	ldr	r3, [pc, #64]	; (800a4c4 <extInt_Config+0xb74>)
 800a482:	4a10      	ldr	r2, [pc, #64]	; (800a4c4 <extInt_Config+0xb74>)
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800a488:	e053      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	4a11      	ldr	r2, [pc, #68]	; (800a4d8 <extInt_Config+0xb88>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d106      	bne.n	800a4a4 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800a496:	4b0b      	ldr	r3, [pc, #44]	; (800a4c4 <extInt_Config+0xb74>)
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	4a0a      	ldr	r2, [pc, #40]	; (800a4c4 <extInt_Config+0xb74>)
 800a49c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4a0:	6153      	str	r3, [r2, #20]
		break;
 800a4a2:	e046      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	4a05      	ldr	r2, [pc, #20]	; (800a4c0 <extInt_Config+0xb70>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d115      	bne.n	800a4dc <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 800a4b0:	4b04      	ldr	r3, [pc, #16]	; (800a4c4 <extInt_Config+0xb74>)
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	4a03      	ldr	r2, [pc, #12]	; (800a4c4 <extInt_Config+0xb74>)
 800a4b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a4ba:	6153      	str	r3, [r2, #20]
		break;
 800a4bc:	e039      	b.n	800a532 <extInt_Config+0xbe2>
 800a4be:	bf00      	nop
 800a4c0:	40020800 	.word	0x40020800
 800a4c4:	40013800 	.word	0x40013800
 800a4c8:	40020c00 	.word	0x40020c00
 800a4cc:	40021000 	.word	0x40021000
 800a4d0:	40021c00 	.word	0x40021c00
 800a4d4:	40020000 	.word	0x40020000
 800a4d8:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	4a9d      	ldr	r2, [pc, #628]	; (800a758 <extInt_Config+0xe08>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d106      	bne.n	800a4f6 <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 800a4e8:	4b9c      	ldr	r3, [pc, #624]	; (800a75c <extInt_Config+0xe0c>)
 800a4ea:	695b      	ldr	r3, [r3, #20]
 800a4ec:	4a9b      	ldr	r2, [pc, #620]	; (800a75c <extInt_Config+0xe0c>)
 800a4ee:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a4f2:	6153      	str	r3, [r2, #20]
		break;
 800a4f4:	e01d      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	4a98      	ldr	r2, [pc, #608]	; (800a760 <extInt_Config+0xe10>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d106      	bne.n	800a510 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 800a502:	4b96      	ldr	r3, [pc, #600]	; (800a75c <extInt_Config+0xe0c>)
 800a504:	695b      	ldr	r3, [r3, #20]
 800a506:	4a95      	ldr	r2, [pc, #596]	; (800a75c <extInt_Config+0xe0c>)
 800a508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a50c:	6153      	str	r3, [r2, #20]
		break;
 800a50e:	e010      	b.n	800a532 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	4a93      	ldr	r2, [pc, #588]	; (800a764 <extInt_Config+0xe14>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d106      	bne.n	800a52a <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 800a51c:	4b8f      	ldr	r3, [pc, #572]	; (800a75c <extInt_Config+0xe0c>)
 800a51e:	695b      	ldr	r3, [r3, #20]
 800a520:	4a8e      	ldr	r2, [pc, #568]	; (800a75c <extInt_Config+0xe0c>)
 800a522:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a526:	6153      	str	r3, [r2, #20]
		break;
 800a528:	e003      	b.n	800a532 <extInt_Config+0xbe2>
			__NOP();
 800a52a:	bf00      	nop
		break;
 800a52c:	e001      	b.n	800a532 <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 800a52e:	bf00      	nop
		break;
 800a530:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	791b      	ldrb	r3, [r3, #4]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d126      	bne.n	800a588 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a53a:	4b8b      	ldr	r3, [pc, #556]	; (800a768 <extInt_Config+0xe18>)
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	6812      	ldr	r2, [r2, #0]
 800a542:	7812      	ldrb	r2, [r2, #0]
 800a544:	4611      	mov	r1, r2
 800a546:	2201      	movs	r2, #1
 800a548:	408a      	lsls	r2, r1
 800a54a:	43d2      	mvns	r2, r2
 800a54c:	4611      	mov	r1, r2
 800a54e:	4a86      	ldr	r2, [pc, #536]	; (800a768 <extInt_Config+0xe18>)
 800a550:	400b      	ands	r3, r1
 800a552:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a554:	4b84      	ldr	r3, [pc, #528]	; (800a768 <extInt_Config+0xe18>)
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	6812      	ldr	r2, [r2, #0]
 800a55c:	7812      	ldrb	r2, [r2, #0]
 800a55e:	4611      	mov	r1, r2
 800a560:	2201      	movs	r2, #1
 800a562:	408a      	lsls	r2, r1
 800a564:	43d2      	mvns	r2, r2
 800a566:	4611      	mov	r1, r2
 800a568:	4a7f      	ldr	r2, [pc, #508]	; (800a768 <extInt_Config+0xe18>)
 800a56a:	400b      	ands	r3, r1
 800a56c:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a56e:	4b7e      	ldr	r3, [pc, #504]	; (800a768 <extInt_Config+0xe18>)
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	6812      	ldr	r2, [r2, #0]
 800a576:	7812      	ldrb	r2, [r2, #0]
 800a578:	4611      	mov	r1, r2
 800a57a:	2201      	movs	r2, #1
 800a57c:	408a      	lsls	r2, r1
 800a57e:	4611      	mov	r1, r2
 800a580:	4a79      	ldr	r2, [pc, #484]	; (800a768 <extInt_Config+0xe18>)
 800a582:	430b      	orrs	r3, r1
 800a584:	6093      	str	r3, [r2, #8]
 800a586:	e05c      	b.n	800a642 <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	791b      	ldrb	r3, [r3, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d126      	bne.n	800a5de <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a590:	4b75      	ldr	r3, [pc, #468]	; (800a768 <extInt_Config+0xe18>)
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	6812      	ldr	r2, [r2, #0]
 800a598:	7812      	ldrb	r2, [r2, #0]
 800a59a:	4611      	mov	r1, r2
 800a59c:	2201      	movs	r2, #1
 800a59e:	408a      	lsls	r2, r1
 800a5a0:	43d2      	mvns	r2, r2
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	4a70      	ldr	r2, [pc, #448]	; (800a768 <extInt_Config+0xe18>)
 800a5a6:	400b      	ands	r3, r1
 800a5a8:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a5aa:	4b6f      	ldr	r3, [pc, #444]	; (800a768 <extInt_Config+0xe18>)
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	6812      	ldr	r2, [r2, #0]
 800a5b2:	7812      	ldrb	r2, [r2, #0]
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	408a      	lsls	r2, r1
 800a5ba:	43d2      	mvns	r2, r2
 800a5bc:	4611      	mov	r1, r2
 800a5be:	4a6a      	ldr	r2, [pc, #424]	; (800a768 <extInt_Config+0xe18>)
 800a5c0:	400b      	ands	r3, r1
 800a5c2:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a5c4:	4b68      	ldr	r3, [pc, #416]	; (800a768 <extInt_Config+0xe18>)
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	6812      	ldr	r2, [r2, #0]
 800a5cc:	7812      	ldrb	r2, [r2, #0]
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	408a      	lsls	r2, r1
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	4a64      	ldr	r2, [pc, #400]	; (800a768 <extInt_Config+0xe18>)
 800a5d8:	430b      	orrs	r3, r1
 800a5da:	60d3      	str	r3, [r2, #12]
 800a5dc:	e031      	b.n	800a642 <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a5de:	4b62      	ldr	r3, [pc, #392]	; (800a768 <extInt_Config+0xe18>)
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	6812      	ldr	r2, [r2, #0]
 800a5e6:	7812      	ldrb	r2, [r2, #0]
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	408a      	lsls	r2, r1
 800a5ee:	43d2      	mvns	r2, r2
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	4a5d      	ldr	r2, [pc, #372]	; (800a768 <extInt_Config+0xe18>)
 800a5f4:	400b      	ands	r3, r1
 800a5f6:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a5f8:	4b5b      	ldr	r3, [pc, #364]	; (800a768 <extInt_Config+0xe18>)
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	6812      	ldr	r2, [r2, #0]
 800a600:	7812      	ldrb	r2, [r2, #0]
 800a602:	4611      	mov	r1, r2
 800a604:	2201      	movs	r2, #1
 800a606:	408a      	lsls	r2, r1
 800a608:	43d2      	mvns	r2, r2
 800a60a:	4611      	mov	r1, r2
 800a60c:	4a56      	ldr	r2, [pc, #344]	; (800a768 <extInt_Config+0xe18>)
 800a60e:	400b      	ands	r3, r1
 800a610:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a612:	4b55      	ldr	r3, [pc, #340]	; (800a768 <extInt_Config+0xe18>)
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	6812      	ldr	r2, [r2, #0]
 800a61a:	7812      	ldrb	r2, [r2, #0]
 800a61c:	4611      	mov	r1, r2
 800a61e:	2201      	movs	r2, #1
 800a620:	408a      	lsls	r2, r1
 800a622:	4611      	mov	r1, r2
 800a624:	4a50      	ldr	r2, [pc, #320]	; (800a768 <extInt_Config+0xe18>)
 800a626:	430b      	orrs	r3, r1
 800a628:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a62a:	4b4f      	ldr	r3, [pc, #316]	; (800a768 <extInt_Config+0xe18>)
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	6812      	ldr	r2, [r2, #0]
 800a632:	7812      	ldrb	r2, [r2, #0]
 800a634:	4611      	mov	r1, r2
 800a636:	2201      	movs	r2, #1
 800a638:	408a      	lsls	r2, r1
 800a63a:	4611      	mov	r1, r2
 800a63c:	4a4a      	ldr	r2, [pc, #296]	; (800a768 <extInt_Config+0xe18>)
 800a63e:	430b      	orrs	r3, r1
 800a640:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a642:	4b49      	ldr	r3, [pc, #292]	; (800a768 <extInt_Config+0xe18>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	6812      	ldr	r2, [r2, #0]
 800a64a:	7812      	ldrb	r2, [r2, #0]
 800a64c:	4611      	mov	r1, r2
 800a64e:	2201      	movs	r2, #1
 800a650:	408a      	lsls	r2, r1
 800a652:	43d2      	mvns	r2, r2
 800a654:	4611      	mov	r1, r2
 800a656:	4a44      	ldr	r2, [pc, #272]	; (800a768 <extInt_Config+0xe18>)
 800a658:	400b      	ands	r3, r1
 800a65a:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a65c:	4b42      	ldr	r3, [pc, #264]	; (800a768 <extInt_Config+0xe18>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	6812      	ldr	r2, [r2, #0]
 800a664:	7812      	ldrb	r2, [r2, #0]
 800a666:	4611      	mov	r1, r2
 800a668:	2201      	movs	r2, #1
 800a66a:	408a      	lsls	r2, r1
 800a66c:	4611      	mov	r1, r2
 800a66e:	4a3e      	ldr	r2, [pc, #248]	; (800a768 <extInt_Config+0xe18>)
 800a670:	430b      	orrs	r3, r1
 800a672:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a674:	b672      	cpsid	i
}
 800a676:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	2b0f      	cmp	r3, #15
 800a680:	d862      	bhi.n	800a748 <extInt_Config+0xdf8>
 800a682:	a201      	add	r2, pc, #4	; (adr r2, 800a688 <extInt_Config+0xd38>)
 800a684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a688:	0800a6c9 	.word	0x0800a6c9
 800a68c:	0800a6d1 	.word	0x0800a6d1
 800a690:	0800a6d9 	.word	0x0800a6d9
 800a694:	0800a6e1 	.word	0x0800a6e1
 800a698:	0800a6e9 	.word	0x0800a6e9
 800a69c:	0800a6f1 	.word	0x0800a6f1
 800a6a0:	0800a6f9 	.word	0x0800a6f9
 800a6a4:	0800a701 	.word	0x0800a701
 800a6a8:	0800a709 	.word	0x0800a709
 800a6ac:	0800a711 	.word	0x0800a711
 800a6b0:	0800a719 	.word	0x0800a719
 800a6b4:	0800a721 	.word	0x0800a721
 800a6b8:	0800a729 	.word	0x0800a729
 800a6bc:	0800a731 	.word	0x0800a731
 800a6c0:	0800a739 	.word	0x0800a739
 800a6c4:	0800a741 	.word	0x0800a741
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 800a6c8:	2006      	movs	r0, #6
 800a6ca:	f7ff f8f9 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a6ce:	e03c      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 800a6d0:	2007      	movs	r0, #7
 800a6d2:	f7ff f8f5 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a6d6:	e038      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 800a6d8:	2008      	movs	r0, #8
 800a6da:	f7ff f8f1 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a6de:	e034      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 800a6e0:	2009      	movs	r0, #9
 800a6e2:	f7ff f8ed 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a6e6:	e030      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 800a6e8:	200a      	movs	r0, #10
 800a6ea:	f7ff f8e9 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a6ee:	e02c      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a6f0:	2017      	movs	r0, #23
 800a6f2:	f7ff f8e5 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a6f6:	e028      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a6f8:	2017      	movs	r0, #23
 800a6fa:	f7ff f8e1 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a6fe:	e024      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a700:	2017      	movs	r0, #23
 800a702:	f7ff f8dd 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a706:	e020      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a708:	2017      	movs	r0, #23
 800a70a:	f7ff f8d9 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a70e:	e01c      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a710:	2017      	movs	r0, #23
 800a712:	f7ff f8d5 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a716:	e018      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a718:	2028      	movs	r0, #40	; 0x28
 800a71a:	f7ff f8d1 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a71e:	e014      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a720:	2028      	movs	r0, #40	; 0x28
 800a722:	f7ff f8cd 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a726:	e010      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a728:	2028      	movs	r0, #40	; 0x28
 800a72a:	f7ff f8c9 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a72e:	e00c      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a730:	2028      	movs	r0, #40	; 0x28
 800a732:	f7ff f8c5 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a736:	e008      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a738:	2028      	movs	r0, #40	; 0x28
 800a73a:	f7ff f8c1 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a73e:	e004      	b.n	800a74a <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a740:	2028      	movs	r0, #40	; 0x28
 800a742:	f7ff f8bd 	bl	80098c0 <__NVIC_EnableIRQ>
		break;
 800a746:	e000      	b.n	800a74a <extInt_Config+0xdfa>
	}

	default: {
		break;
 800a748:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800a74a:	b662      	cpsie	i
}
 800a74c:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	40020c00 	.word	0x40020c00
 800a75c:	40013800 	.word	0x40013800
 800a760:	40021000 	.word	0x40021000
 800a764:	40021c00 	.word	0x40021c00
 800a768:	40013c00 	.word	0x40013c00

0800a76c <exti_Config_Int_Priority>:


void exti_Config_Int_Priority(EXTI_Config_t *extiConfig, uint8_t newPriority)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800a778:	b672      	cpsid	i
}
 800a77a:	bf00      	nop
	//Desabilitamos las interrupciones globales
	__disable_irq();
	//Configuramos la nueva prioridad
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2b0f      	cmp	r3, #15
 800a784:	d84c      	bhi.n	800a820 <exti_Config_Int_Priority+0xb4>
 800a786:	a201      	add	r2, pc, #4	; (adr r2, 800a78c <exti_Config_Int_Priority+0x20>)
 800a788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78c:	0800a7cd 	.word	0x0800a7cd
 800a790:	0800a7d9 	.word	0x0800a7d9
 800a794:	0800a7e5 	.word	0x0800a7e5
 800a798:	0800a7f1 	.word	0x0800a7f1
 800a79c:	0800a7fd 	.word	0x0800a7fd
 800a7a0:	0800a809 	.word	0x0800a809
 800a7a4:	0800a809 	.word	0x0800a809
 800a7a8:	0800a809 	.word	0x0800a809
 800a7ac:	0800a809 	.word	0x0800a809
 800a7b0:	0800a809 	.word	0x0800a809
 800a7b4:	0800a815 	.word	0x0800a815
 800a7b8:	0800a815 	.word	0x0800a815
 800a7bc:	0800a815 	.word	0x0800a815
 800a7c0:	0800a815 	.word	0x0800a815
 800a7c4:	0800a815 	.word	0x0800a815
 800a7c8:	0800a815 	.word	0x0800a815
	{
	case 0:
	{
		NVIC_SetPriority(EXTI0_IRQn, newPriority);
 800a7cc:	78fb      	ldrb	r3, [r7, #3]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	2006      	movs	r0, #6
 800a7d2:	f7ff f893 	bl	80098fc <__NVIC_SetPriority>
		break;
 800a7d6:	e024      	b.n	800a822 <exti_Config_Int_Priority+0xb6>
	}
	case 1:
	{
		NVIC_SetPriority(EXTI1_IRQn, newPriority);
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	2007      	movs	r0, #7
 800a7de:	f7ff f88d 	bl	80098fc <__NVIC_SetPriority>
		break;
 800a7e2:	e01e      	b.n	800a822 <exti_Config_Int_Priority+0xb6>
	}
	case 2:
	{
		NVIC_SetPriority(EXTI2_IRQn, newPriority);
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	2008      	movs	r0, #8
 800a7ea:	f7ff f887 	bl	80098fc <__NVIC_SetPriority>
		break;
 800a7ee:	e018      	b.n	800a822 <exti_Config_Int_Priority+0xb6>
	}
	case 3:
	{
		NVIC_SetPriority(EXTI3_IRQn, newPriority);
 800a7f0:	78fb      	ldrb	r3, [r7, #3]
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	2009      	movs	r0, #9
 800a7f6:	f7ff f881 	bl	80098fc <__NVIC_SetPriority>
		break;
 800a7fa:	e012      	b.n	800a822 <exti_Config_Int_Priority+0xb6>
	}
	case 4:
	{
		NVIC_SetPriority(EXTI4_IRQn, newPriority);
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	4619      	mov	r1, r3
 800a800:	200a      	movs	r0, #10
 800a802:	f7ff f87b 	bl	80098fc <__NVIC_SetPriority>
		break;
 800a806:	e00c      	b.n	800a822 <exti_Config_Int_Priority+0xb6>
	case 6:
	case 7:
	case 8:
	case 9:
	{
		NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a808:	78fb      	ldrb	r3, [r7, #3]
 800a80a:	4619      	mov	r1, r3
 800a80c:	2017      	movs	r0, #23
 800a80e:	f7ff f875 	bl	80098fc <__NVIC_SetPriority>
		break;
 800a812:	e006      	b.n	800a822 <exti_Config_Int_Priority+0xb6>
	case 12:
	case 13:
	case 14:
	case 15:
	{
		NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a814:	78fb      	ldrb	r3, [r7, #3]
 800a816:	4619      	mov	r1, r3
 800a818:	2028      	movs	r0, #40	; 0x28
 800a81a:	f7ff f86f 	bl	80098fc <__NVIC_SetPriority>
		break;
 800a81e:	e000      	b.n	800a822 <exti_Config_Int_Priority+0xb6>
	}
	default:{  break;  }
 800a820:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800a822:	b662      	cpsie	i
}
 800a824:	bf00      	nop
	}
	//Activamos las interrupciones globales
	__enable_irq();
}
 800a826:	bf00      	nop
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop

0800a830 <callback_extInt0>:


//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 800a830:	b480      	push	{r7}
 800a832:	af00      	add	r7, sp, #0
	__NOP();
 800a834:	bf00      	nop
}
 800a836:	bf00      	nop
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 800a840:	b480      	push	{r7}
 800a842:	af00      	add	r7, sp, #0
	__NOP();
 800a844:	bf00      	nop
}
 800a846:	bf00      	nop
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 800a850:	b480      	push	{r7}
 800a852:	af00      	add	r7, sp, #0
	__NOP();
 800a854:	bf00      	nop
}
 800a856:	bf00      	nop
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 800a860:	b480      	push	{r7}
 800a862:	af00      	add	r7, sp, #0
	__NOP();
 800a864:	bf00      	nop
}
 800a866:	bf00      	nop
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 800a870:	b480      	push	{r7}
 800a872:	af00      	add	r7, sp, #0
	__NOP();
 800a874:	bf00      	nop
}
 800a876:	bf00      	nop
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 800a880:	b480      	push	{r7}
 800a882:	af00      	add	r7, sp, #0
	__NOP();
 800a884:	bf00      	nop
}
 800a886:	bf00      	nop
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 800a890:	b480      	push	{r7}
 800a892:	af00      	add	r7, sp, #0
	__NOP();
 800a894:	bf00      	nop
}
 800a896:	bf00      	nop
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 800a8a0:	b480      	push	{r7}
 800a8a2:	af00      	add	r7, sp, #0
	__NOP();
 800a8a4:	bf00      	nop
}
 800a8a6:	bf00      	nop
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 800a8b0:	b480      	push	{r7}
 800a8b2:	af00      	add	r7, sp, #0
	__NOP();
 800a8b4:	bf00      	nop
}
 800a8b6:	bf00      	nop
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 800a8c0:	b480      	push	{r7}
 800a8c2:	af00      	add	r7, sp, #0
	__NOP();
 800a8c4:	bf00      	nop
}
 800a8c6:	bf00      	nop
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 800a8d0:	b480      	push	{r7}
 800a8d2:	af00      	add	r7, sp, #0
	__NOP();
 800a8d4:	bf00      	nop
}
 800a8d6:	bf00      	nop
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 800a8e0:	b480      	push	{r7}
 800a8e2:	af00      	add	r7, sp, #0
	__NOP();
 800a8e4:	bf00      	nop
}
 800a8e6:	bf00      	nop
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 800a8f0:	b480      	push	{r7}
 800a8f2:	af00      	add	r7, sp, #0
	__NOP();
 800a8f4:	bf00      	nop
}
 800a8f6:	bf00      	nop
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 800a900:	b480      	push	{r7}
 800a902:	af00      	add	r7, sp, #0
	__NOP();
 800a904:	bf00      	nop
}
 800a906:	bf00      	nop
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 800a914:	4b08      	ldr	r3, [pc, #32]	; (800a938 <EXTI0_IRQHandler+0x28>)
 800a916:	695b      	ldr	r3, [r3, #20]
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d008      	beq.n	800a932 <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 800a920:	4b05      	ldr	r3, [pc, #20]	; (800a938 <EXTI0_IRQHandler+0x28>)
 800a922:	695b      	ldr	r3, [r3, #20]
 800a924:	4a04      	ldr	r2, [pc, #16]	; (800a938 <EXTI0_IRQHandler+0x28>)
 800a926:	f043 0301 	orr.w	r3, r3, #1
 800a92a:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 800a92c:	f7ff ff80 	bl	800a830 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 800a930:	e000      	b.n	800a934 <EXTI0_IRQHandler+0x24>
		__NOP();
 800a932:	bf00      	nop
}
 800a934:	bf00      	nop
 800a936:	bd80      	pop	{r7, pc}
 800a938:	40013c00 	.word	0x40013c00

0800a93c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 800a940:	4b08      	ldr	r3, [pc, #32]	; (800a964 <EXTI1_IRQHandler+0x28>)
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	f003 0302 	and.w	r3, r3, #2
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d008      	beq.n	800a95e <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 800a94c:	4b05      	ldr	r3, [pc, #20]	; (800a964 <EXTI1_IRQHandler+0x28>)
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	4a04      	ldr	r2, [pc, #16]	; (800a964 <EXTI1_IRQHandler+0x28>)
 800a952:	f043 0302 	orr.w	r3, r3, #2
 800a956:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 800a958:	f7f9 f910 	bl	8003b7c <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 800a95c:	e000      	b.n	800a960 <EXTI1_IRQHandler+0x24>
		__NOP();
 800a95e:	bf00      	nop
}
 800a960:	bf00      	nop
 800a962:	bd80      	pop	{r7, pc}
 800a964:	40013c00 	.word	0x40013c00

0800a968 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 800a96c:	4b08      	ldr	r3, [pc, #32]	; (800a990 <EXTI2_IRQHandler+0x28>)
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	f003 0304 	and.w	r3, r3, #4
 800a974:	2b00      	cmp	r3, #0
 800a976:	d008      	beq.n	800a98a <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 800a978:	4b05      	ldr	r3, [pc, #20]	; (800a990 <EXTI2_IRQHandler+0x28>)
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	4a04      	ldr	r2, [pc, #16]	; (800a990 <EXTI2_IRQHandler+0x28>)
 800a97e:	f043 0304 	orr.w	r3, r3, #4
 800a982:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 800a984:	f7ff ff5c 	bl	800a840 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 800a988:	e000      	b.n	800a98c <EXTI2_IRQHandler+0x24>
		__NOP();
 800a98a:	bf00      	nop
}
 800a98c:	bf00      	nop
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	40013c00 	.word	0x40013c00

0800a994 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 800a998:	4b08      	ldr	r3, [pc, #32]	; (800a9bc <EXTI3_IRQHandler+0x28>)
 800a99a:	695b      	ldr	r3, [r3, #20]
 800a99c:	f003 0308 	and.w	r3, r3, #8
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d008      	beq.n	800a9b6 <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 800a9a4:	4b05      	ldr	r3, [pc, #20]	; (800a9bc <EXTI3_IRQHandler+0x28>)
 800a9a6:	695b      	ldr	r3, [r3, #20]
 800a9a8:	4a04      	ldr	r2, [pc, #16]	; (800a9bc <EXTI3_IRQHandler+0x28>)
 800a9aa:	f043 0308 	orr.w	r3, r3, #8
 800a9ae:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 800a9b0:	f7f9 f8f4 	bl	8003b9c <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 800a9b4:	e000      	b.n	800a9b8 <EXTI3_IRQHandler+0x24>
		__NOP();
 800a9b6:	bf00      	nop
}
 800a9b8:	bf00      	nop
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	40013c00 	.word	0x40013c00

0800a9c0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 800a9c4:	4b08      	ldr	r3, [pc, #32]	; (800a9e8 <EXTI4_IRQHandler+0x28>)
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	f003 0310 	and.w	r3, r3, #16
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d008      	beq.n	800a9e2 <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 800a9d0:	4b05      	ldr	r3, [pc, #20]	; (800a9e8 <EXTI4_IRQHandler+0x28>)
 800a9d2:	695b      	ldr	r3, [r3, #20]
 800a9d4:	4a04      	ldr	r2, [pc, #16]	; (800a9e8 <EXTI4_IRQHandler+0x28>)
 800a9d6:	f043 0310 	orr.w	r3, r3, #16
 800a9da:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 800a9dc:	f7ff ff38 	bl	800a850 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 800a9e0:	e000      	b.n	800a9e4 <EXTI4_IRQHandler+0x24>
		__NOP();
 800a9e2:	bf00      	nop
}
 800a9e4:	bf00      	nop
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	40013c00 	.word	0x40013c00

0800a9ec <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 800a9f0:	4b26      	ldr	r3, [pc, #152]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	f003 0320 	and.w	r3, r3, #32
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d008      	beq.n	800aa0e <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 800a9fc:	4b23      	ldr	r3, [pc, #140]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800a9fe:	695b      	ldr	r3, [r3, #20]
 800aa00:	4a22      	ldr	r2, [pc, #136]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800aa02:	f043 0320 	orr.w	r3, r3, #32
 800aa06:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 800aa08:	f7ff ff2a 	bl	800a860 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 800aa0c:	e03c      	b.n	800aa88 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 800aa0e:	4b1f      	ldr	r3, [pc, #124]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d008      	beq.n	800aa2c <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 800aa1a:	4b1c      	ldr	r3, [pc, #112]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	4a1b      	ldr	r2, [pc, #108]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800aa20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa24:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 800aa26:	f7ff ff23 	bl	800a870 <callback_extInt6>
}
 800aa2a:	e02d      	b.n	800aa88 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 800aa2c:	4b17      	ldr	r3, [pc, #92]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800aa2e:	695b      	ldr	r3, [r3, #20]
 800aa30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d008      	beq.n	800aa4a <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 800aa38:	4b14      	ldr	r3, [pc, #80]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800aa3a:	695b      	ldr	r3, [r3, #20]
 800aa3c:	4a13      	ldr	r2, [pc, #76]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800aa3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa42:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 800aa44:	f7ff ff1c 	bl	800a880 <callback_extInt7>
}
 800aa48:	e01e      	b.n	800aa88 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 800aa4a:	4b10      	ldr	r3, [pc, #64]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800aa4c:	695b      	ldr	r3, [r3, #20]
 800aa4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d008      	beq.n	800aa68 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 800aa56:	4b0d      	ldr	r3, [pc, #52]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	4a0c      	ldr	r2, [pc, #48]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800aa5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa60:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 800aa62:	f7ff ff15 	bl	800a890 <callback_extInt8>
}
 800aa66:	e00f      	b.n	800aa88 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 800aa68:	4b08      	ldr	r3, [pc, #32]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d008      	beq.n	800aa86 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 800aa74:	4b05      	ldr	r3, [pc, #20]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	4a04      	ldr	r2, [pc, #16]	; (800aa8c <EXTI9_5_IRQHandler+0xa0>)
 800aa7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa7e:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 800aa80:	f7ff ff0e 	bl	800a8a0 <callback_extInt9>
}
 800aa84:	e000      	b.n	800aa88 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800aa86:	bf00      	nop
}
 800aa88:	bf00      	nop
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	40013c00 	.word	0x40013c00

0800aa90 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 800aa94:	4b2e      	ldr	r3, [pc, #184]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d008      	beq.n	800aab2 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 800aaa0:	4b2b      	ldr	r3, [pc, #172]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800aaa2:	695b      	ldr	r3, [r3, #20]
 800aaa4:	4a2a      	ldr	r2, [pc, #168]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800aaa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aaaa:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 800aaac:	f7ff ff00 	bl	800a8b0 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 800aab0:	e04b      	b.n	800ab4a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 800aab2:	4b27      	ldr	r3, [pc, #156]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d008      	beq.n	800aad0 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 800aabe:	4b24      	ldr	r3, [pc, #144]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	4a23      	ldr	r2, [pc, #140]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800aac4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aac8:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 800aaca:	f7ff fef9 	bl	800a8c0 <callback_extInt11>
}
 800aace:	e03c      	b.n	800ab4a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 800aad0:	4b1f      	ldr	r3, [pc, #124]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d008      	beq.n	800aaee <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 800aadc:	4b1c      	ldr	r3, [pc, #112]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800aade:	695b      	ldr	r3, [r3, #20]
 800aae0:	4a1b      	ldr	r2, [pc, #108]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800aae2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aae6:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 800aae8:	f7ff fef2 	bl	800a8d0 <callback_extInt12>
}
 800aaec:	e02d      	b.n	800ab4a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 800aaee:	4b18      	ldr	r3, [pc, #96]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800aaf0:	695b      	ldr	r3, [r3, #20]
 800aaf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d008      	beq.n	800ab0c <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 800aafa:	4b15      	ldr	r3, [pc, #84]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800aafc:	695b      	ldr	r3, [r3, #20]
 800aafe:	4a14      	ldr	r2, [pc, #80]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800ab00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ab04:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 800ab06:	f7ff feeb 	bl	800a8e0 <callback_extInt13>
}
 800ab0a:	e01e      	b.n	800ab4a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 800ab0c:	4b10      	ldr	r3, [pc, #64]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800ab0e:	695b      	ldr	r3, [r3, #20]
 800ab10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d008      	beq.n	800ab2a <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 800ab18:	4b0d      	ldr	r3, [pc, #52]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	4a0c      	ldr	r2, [pc, #48]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800ab1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab22:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 800ab24:	f7ff fee4 	bl	800a8f0 <callback_extInt14>
}
 800ab28:	e00f      	b.n	800ab4a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 800ab2a:	4b09      	ldr	r3, [pc, #36]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800ab2c:	695b      	ldr	r3, [r3, #20]
 800ab2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d008      	beq.n	800ab48 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 800ab36:	4b06      	ldr	r3, [pc, #24]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800ab38:	695b      	ldr	r3, [r3, #20]
 800ab3a:	4a05      	ldr	r2, [pc, #20]	; (800ab50 <EXTI15_10_IRQHandler+0xc0>)
 800ab3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab40:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 800ab42:	f7ff fedd 	bl	800a900 <callback_extInt15>
}
 800ab46:	e000      	b.n	800ab4a <EXTI15_10_IRQHandler+0xba>
		__NOP();
 800ab48:	bf00      	nop
}
 800ab4a:	bf00      	nop
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	40013c00 	.word	0x40013c00

0800ab54 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	4608      	mov	r0, r1
 800ab5e:	4611      	mov	r1, r2
 800ab60:	461a      	mov	r2, r3
 800ab62:	4603      	mov	r3, r0
 800ab64:	70fb      	strb	r3, [r7, #3]
 800ab66:	460b      	mov	r3, r1
 800ab68:	70bb      	strb	r3, [r7, #2]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	78fa      	ldrb	r2, [r7, #3]
 800ab72:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	78ba      	ldrb	r2, [r7, #2]
 800ab78:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	787a      	ldrb	r2, [r7, #1]
 800ab7e:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	7c3a      	ldrb	r2, [r7, #16]
 800ab84:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	7d3a      	ldrb	r2, [r7, #20]
 800ab8a:	715a      	strb	r2, [r3, #5]
}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	4a88      	ldr	r2, [pc, #544]	; (800add0 <GPIO_Config+0x238>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d106      	bne.n	800abc0 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 800abb2:	4b88      	ldr	r3, [pc, #544]	; (800add4 <GPIO_Config+0x23c>)
 800abb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb6:	4a87      	ldr	r2, [pc, #540]	; (800add4 <GPIO_Config+0x23c>)
 800abb8:	f043 0301 	orr.w	r3, r3, #1
 800abbc:	6313      	str	r3, [r2, #48]	; 0x30
 800abbe:	e03a      	b.n	800ac36 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	4a84      	ldr	r2, [pc, #528]	; (800add8 <GPIO_Config+0x240>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d106      	bne.n	800abd8 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 800abca:	4b82      	ldr	r3, [pc, #520]	; (800add4 <GPIO_Config+0x23c>)
 800abcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abce:	4a81      	ldr	r2, [pc, #516]	; (800add4 <GPIO_Config+0x23c>)
 800abd0:	f043 0302 	orr.w	r3, r3, #2
 800abd4:	6313      	str	r3, [r2, #48]	; 0x30
 800abd6:	e02e      	b.n	800ac36 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	4a7f      	ldr	r2, [pc, #508]	; (800addc <GPIO_Config+0x244>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d106      	bne.n	800abf0 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 800abe2:	4b7c      	ldr	r3, [pc, #496]	; (800add4 <GPIO_Config+0x23c>)
 800abe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe6:	4a7b      	ldr	r2, [pc, #492]	; (800add4 <GPIO_Config+0x23c>)
 800abe8:	f043 0304 	orr.w	r3, r3, #4
 800abec:	6313      	str	r3, [r2, #48]	; 0x30
 800abee:	e022      	b.n	800ac36 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	4a7a      	ldr	r2, [pc, #488]	; (800ade0 <GPIO_Config+0x248>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d106      	bne.n	800ac08 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 800abfa:	4b76      	ldr	r3, [pc, #472]	; (800add4 <GPIO_Config+0x23c>)
 800abfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfe:	4a75      	ldr	r2, [pc, #468]	; (800add4 <GPIO_Config+0x23c>)
 800ac00:	f043 0308 	orr.w	r3, r3, #8
 800ac04:	6313      	str	r3, [r2, #48]	; 0x30
 800ac06:	e016      	b.n	800ac36 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	4a75      	ldr	r2, [pc, #468]	; (800ade4 <GPIO_Config+0x24c>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d106      	bne.n	800ac20 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 800ac12:	4b70      	ldr	r3, [pc, #448]	; (800add4 <GPIO_Config+0x23c>)
 800ac14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac16:	4a6f      	ldr	r2, [pc, #444]	; (800add4 <GPIO_Config+0x23c>)
 800ac18:	f043 0310 	orr.w	r3, r3, #16
 800ac1c:	6313      	str	r3, [r2, #48]	; 0x30
 800ac1e:	e00a      	b.n	800ac36 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	4a70      	ldr	r2, [pc, #448]	; (800ade8 <GPIO_Config+0x250>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d105      	bne.n	800ac36 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 800ac2a:	4b6a      	ldr	r3, [pc, #424]	; (800add4 <GPIO_Config+0x23c>)
 800ac2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2e:	4a69      	ldr	r2, [pc, #420]	; (800add4 <GPIO_Config+0x23c>)
 800ac30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac34:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	785b      	ldrb	r3, [r3, #1]
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	005b      	lsls	r3, r3, #1
 800ac42:	fa02 f303 	lsl.w	r3, r2, r3
 800ac46:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	005b      	lsls	r3, r3, #1
 800ac54:	2103      	movs	r1, #3
 800ac56:	fa01 f303 	lsl.w	r3, r1, r3
 800ac5a:	43db      	mvns	r3, r3
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	400a      	ands	r2, r1
 800ac64:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	6819      	ldr	r1, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	430a      	orrs	r2, r1
 800ac74:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	789b      	ldrb	r3, [r3, #2]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	fa02 f303 	lsl.w	r3, r2, r3
 800ac84:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	4619      	mov	r1, r3
 800ac92:	2301      	movs	r3, #1
 800ac94:	408b      	lsls	r3, r1
 800ac96:	43db      	mvns	r3, r3
 800ac98:	4619      	mov	r1, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	400a      	ands	r2, r1
 800aca0:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	6859      	ldr	r1, [r3, #4]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	430a      	orrs	r2, r1
 800acb0:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	78db      	ldrb	r3, [r3, #3]
 800acb6:	461a      	mov	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	005b      	lsls	r3, r3, #1
 800acbe:	fa02 f303 	lsl.w	r3, r2, r3
 800acc2:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	689a      	ldr	r2, [r3, #8]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	2103      	movs	r1, #3
 800acd2:	fa01 f303 	lsl.w	r3, r1, r3
 800acd6:	43db      	mvns	r3, r3
 800acd8:	4619      	mov	r1, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	400a      	ands	r2, r1
 800ace0:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	6899      	ldr	r1, [r3, #8]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	430a      	orrs	r2, r1
 800acf0:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	791b      	ldrb	r3, [r3, #4]
 800acf6:	461a      	mov	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	005b      	lsls	r3, r3, #1
 800acfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ad02:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	68da      	ldr	r2, [r3, #12]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	005b      	lsls	r3, r3, #1
 800ad10:	2103      	movs	r1, #3
 800ad12:	fa01 f303 	lsl.w	r3, r1, r3
 800ad16:	43db      	mvns	r3, r3
 800ad18:	4619      	mov	r1, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	400a      	ands	r2, r1
 800ad20:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	68d9      	ldr	r1, [r3, #12]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	785b      	ldrb	r3, [r3, #1]
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d143      	bne.n	800adc2 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	2b07      	cmp	r3, #7
 800ad40:	d81f      	bhi.n	800ad82 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	6a1a      	ldr	r2, [r3, #32]
 800ad50:	210f      	movs	r1, #15
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	fa01 f303 	lsl.w	r3, r1, r3
 800ad58:	43db      	mvns	r3, r3
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	400a      	ands	r2, r1
 800ad62:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	6a1a      	ldr	r2, [r3, #32]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	795b      	ldrb	r3, [r3, #5]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	fa01 f303 	lsl.w	r3, r1, r3
 800ad76:	4619      	mov	r1, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	430a      	orrs	r2, r1
 800ad7e:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 800ad80:	e01f      	b.n	800adc2 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	3b08      	subs	r3, #8
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad92:	210f      	movs	r1, #15
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	fa01 f303 	lsl.w	r3, r1, r3
 800ad9a:	43db      	mvns	r3, r3
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	400a      	ands	r2, r1
 800ada4:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	795b      	ldrb	r3, [r3, #5]
 800adb0:	4619      	mov	r1, r3
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	fa01 f303 	lsl.w	r3, r1, r3
 800adb8:	4619      	mov	r1, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	430a      	orrs	r2, r1
 800adc0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800adc2:	bf00      	nop
 800adc4:	3714      	adds	r7, #20
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	40020000 	.word	0x40020000
 800add4:	40023800 	.word	0x40023800
 800add8:	40020400 	.word	0x40020400
 800addc:	40020800 	.word	0x40020800
 800ade0:	40020c00 	.word	0x40020c00
 800ade4:	40021000 	.word	0x40021000
 800ade8:	40021c00 	.word	0x40021c00

0800adec <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 800adf8:	78fb      	ldrb	r3, [r7, #3]
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d10d      	bne.n	800ae1a <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	699a      	ldr	r2, [r3, #24]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	4619      	mov	r1, r3
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	408b      	lsls	r3, r1
 800ae0e:	4619      	mov	r1, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	430a      	orrs	r2, r1
 800ae16:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 800ae18:	e00d      	b.n	800ae36 <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	699a      	ldr	r2, [r3, #24]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	3310      	adds	r3, #16
 800ae26:	2101      	movs	r1, #1
 800ae28:	fa01 f303 	lsl.w	r3, r1, r3
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	619a      	str	r2, [r3, #24]
}
 800ae36:	bf00      	nop
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 800ae42:	b480      	push	{r7}
 800ae44:	b083      	sub	sp, #12
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	695a      	ldr	r2, [r3, #20]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	4619      	mov	r1, r3
 800ae56:	2301      	movs	r3, #1
 800ae58:	408b      	lsls	r3, r1
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	404a      	eors	r2, r1
 800ae62:	615a      	str	r2, [r3, #20]
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <i2c_Config>:
 * Recordar de configurar los pines GPIOx por medio de las funciones alternativas,
 * Ademas de configurar dichos pines como open_drain
 */

void i2c_Config(I2C_Handler_t *ptrHandlerI2C)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
	uint8_t clockAPB1 = getClockAPB1();     //Variable que guarda la velocidad de reloj entregada al bus APB1
 800ae78:	f000 fa9c 	bl	800b3b4 <getClockAPB1>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	73fb      	strb	r3, [r7, #15]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	if(ptrHandlerI2C->prtI2Cx == I2C1)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a60      	ldr	r2, [pc, #384]	; (800b008 <i2c_Config+0x198>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d106      	bne.n	800ae98 <i2c_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800ae8a:	4b60      	ldr	r3, [pc, #384]	; (800b00c <i2c_Config+0x19c>)
 800ae8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8e:	4a5f      	ldr	r2, [pc, #380]	; (800b00c <i2c_Config+0x19c>)
 800ae90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae94:	6413      	str	r3, [r2, #64]	; 0x40
 800ae96:	e016      	b.n	800aec6 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C2)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a5c      	ldr	r2, [pc, #368]	; (800b010 <i2c_Config+0x1a0>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d106      	bne.n	800aeb0 <i2c_Config+0x40>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 800aea2:	4b5a      	ldr	r3, [pc, #360]	; (800b00c <i2c_Config+0x19c>)
 800aea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea6:	4a59      	ldr	r2, [pc, #356]	; (800b00c <i2c_Config+0x19c>)
 800aea8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aeac:	6413      	str	r3, [r2, #64]	; 0x40
 800aeae:	e00a      	b.n	800aec6 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C3)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a57      	ldr	r2, [pc, #348]	; (800b014 <i2c_Config+0x1a4>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d105      	bne.n	800aec6 <i2c_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800aeba:	4b54      	ldr	r3, [pc, #336]	; (800b00c <i2c_Config+0x19c>)
 800aebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebe:	4a53      	ldr	r2, [pc, #332]	; (800b00c <i2c_Config+0x19c>)
 800aec0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aec4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//---------------------------------2) Reiniciamos el periferico------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_SWRST;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aed4:	601a      	str	r2, [r3, #0]
	__NOP();
 800aed6:	bf00      	nop
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_SWRST;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aee6:	601a      	str	r2, [r3, #0]

	//-----------------------------------3) Valor del reloj principal------------------------------------------
	//Registro: CR2

	ptrHandlerI2C->prtI2Cx->CR2 &= ~(0b111111<<I2C_CR2_FREQ_Pos);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	685a      	ldr	r2, [r3, #4]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800aef6:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->prtI2Cx->CR2 |= (clockAPB1<<I2C_CR2_FREQ_Pos);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6859      	ldr	r1, [r3, #4]
 800aefe:	7bfa      	ldrb	r2, [r7, #15]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	430a      	orrs	r2, r1
 800af06:	605a      	str	r2, [r3, #4]
	//-------------------------------------4) Configuracion del I2C------------------------------------------
	//Registro: CCR
	//Registro: TRISE

	//Variables que almacenan el respectivo valor a cargar en los registros CRR y Trise
	uint16_t valueCRR = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	81bb      	strh	r3, [r7, #12]
	uint8_t valueTrise = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	72fb      	strb	r3, [r7, #11]

	//definimos inicialmente los registro en 0
	ptrHandlerI2C->prtI2Cx->CCR = 0;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2200      	movs	r2, #0
 800af16:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->prtI2Cx->TRISE = 0;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2200      	movs	r2, #0
 800af1e:	621a      	str	r2, [r3, #32]

	//Configuramos el I2C deacuerdo al modo selsecionado
	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	795b      	ldrb	r3, [r3, #5]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d121      	bne.n	800af6c <i2c_Config+0xfc>
	{
		//Seleccionamos el modo estandar
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	69da      	ldr	r2, [r3, #28]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af36:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (5000*clockAPB1)/1000;
 800af38:	7bfb      	ldrb	r3, [r7, #15]
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	461a      	mov	r2, r3
 800af3e:	0092      	lsls	r2, r2, #2
 800af40:	4413      	add	r3, r2
 800af42:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	69d9      	ldr	r1, [r3, #28]
 800af4a:	89ba      	ldrh	r2, [r7, #12]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	430a      	orrs	r2, r1
 800af52:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((1000*clockAPB1)/1000)+1;
 800af54:	7bfb      	ldrb	r3, [r7, #15]
 800af56:	3301      	adds	r3, #1
 800af58:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	6a19      	ldr	r1, [r3, #32]
 800af60:	7afa      	ldrb	r2, [r7, #11]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	430a      	orrs	r2, r1
 800af68:	621a      	str	r2, [r3, #32]
 800af6a:	e039      	b.n	800afe0 <i2c_Config+0x170>
	}
	else
	{
		//Seleccionamos el modo Fast
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	69da      	ldr	r2, [r3, #28]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af7a:	61da      	str	r2, [r3, #28]
		ptrHandlerI2C->prtI2Cx->CCR |= I2C_CCR_FS;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	69da      	ldr	r2, [r3, #28]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af8a:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (2500*clockAPB1)/3000;
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800af92:	fb02 f303 	mul.w	r3, r2, r3
 800af96:	4a20      	ldr	r2, [pc, #128]	; (800b018 <i2c_Config+0x1a8>)
 800af98:	fb82 1203 	smull	r1, r2, r2, r3
 800af9c:	1192      	asrs	r2, r2, #6
 800af9e:	17db      	asrs	r3, r3, #31
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	69d9      	ldr	r1, [r3, #28]
 800afaa:	89ba      	ldrh	r2, [r7, #12]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	430a      	orrs	r2, r1
 800afb2:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((300*clockAPB1)/1000)+1;
 800afb4:	7bfb      	ldrb	r3, [r7, #15]
 800afb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800afba:	fb02 f303 	mul.w	r3, r2, r3
 800afbe:	4a17      	ldr	r2, [pc, #92]	; (800b01c <i2c_Config+0x1ac>)
 800afc0:	fb82 1203 	smull	r1, r2, r2, r3
 800afc4:	1192      	asrs	r2, r2, #6
 800afc6:	17db      	asrs	r3, r3, #31
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	3301      	adds	r3, #1
 800afce:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6a19      	ldr	r1, [r3, #32]
 800afd6:	7afa      	ldrb	r2, [r7, #11]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	430a      	orrs	r2, r1
 800afde:	621a      	str	r2, [r3, #32]
	}

	//-----------------------------------5) Activamos el modulo I2C------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_PE;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f022 0201 	bic.w	r2, r2, #1
 800afee:	601a      	str	r2, [r3, #0]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_PE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f042 0201 	orr.w	r2, r2, #1
 800affe:	601a      	str	r2, [r3, #0]
}
 800b000:	bf00      	nop
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	40005400 	.word	0x40005400
 800b00c:	40023800 	.word	0x40023800
 800b010:	40005800 	.word	0x40005800
 800b014:	40005c00 	.word	0x40005c00
 800b018:	057619f1 	.word	0x057619f1
 800b01c:	10624dd3 	.word	0x10624dd3

0800b020 <i2c_StartTrasaction>:

//----------------------------------------Funciones para la Transaccion----------------------------------------
//Funcion para empezar la Transaccion
void i2c_StartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
	/*verificamos que la linea no esta ocupada
	 * bit "busy" en I2C
	 */
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 800b028:	e000      	b.n	800b02c <i2c_StartTrasaction+0xc>
	{
		__NOP();
 800b02a:	bf00      	nop
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	f003 0302 	and.w	r3, r3, #2
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1f7      	bne.n	800b02a <i2c_StartTrasaction+0xa>
	}
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b048:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800b04a:	e000      	b.n	800b04e <i2c_StartTrasaction+0x2e>
	{
		__NOP();
 800b04c:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	f003 0301 	and.w	r3, r3, #1
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d0f7      	beq.n	800b04c <i2c_StartTrasaction+0x2c>
	}
}
 800b05c:	bf00      	nop
 800b05e:	bf00      	nop
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <i2c_ReStartTrasaction>:

//Generar de nuevo una señal para empazar la Transaccion
void i2c_ReStartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 800b06a:	b480      	push	{r7}
 800b06c:	b083      	sub	sp, #12
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b080:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800b082:	e000      	b.n	800b086 <i2c_ReStartTrasaction+0x1c>
	{
		__NOP();
 800b084:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	695b      	ldr	r3, [r3, #20]
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	2b00      	cmp	r3, #0
 800b092:	d0f7      	beq.n	800b084 <i2c_ReStartTrasaction+0x1a>
	}
}
 800b094:	bf00      	nop
 800b096:	bf00      	nop
 800b098:	370c      	adds	r7, #12
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr

0800b0a2 <i2c_SendSlaveAddressRW>:

//Funcion para enviar la direcion de Slave ademas de definir la lectura o escritura del Sclave
void i2c_SendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite)
{
 800b0a2:	b480      	push	{r7}
 800b0a4:	b085      	sub	sp, #20
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	70fb      	strb	r3, [r7, #3]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	70bb      	strb	r3, [r7, #2]
	//Definimos una variable auxiliar
	uint8_t auxByte = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	//Cargamos la direccion del Sclave, ademas cargamos el bit de lectura o escritura
	ptrHandlerI2C->prtI2Cx->DR = (slaveAddress<<1) | readOrWrite;
 800b0b6:	78fb      	ldrb	r3, [r7, #3]
 800b0b8:	005a      	lsls	r2, r3, #1
 800b0ba:	78bb      	ldrb	r3, [r7, #2]
 800b0bc:	431a      	orrs	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "ADDR" del evento "Address" se levante
	//Se limpia la bandera "ADDR" leyendo SR1->leyendo en SR2
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 800b0c4:	e000      	b.n	800b0c8 <i2c_SendSlaveAddressRW+0x26>
	{
		__NOP();
 800b0c6:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	f003 0302 	and.w	r3, r3, #2
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0f7      	beq.n	800b0c6 <i2c_SendSlaveAddressRW+0x24>
	}
	//Se limpia la bandera "ADDR"
	auxByte = ptrHandlerI2C->prtI2Cx->SR1;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	695b      	ldr	r3, [r3, #20]
 800b0dc:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->prtI2Cx->SR2;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	73fb      	strb	r3, [r7, #15]
}
 800b0e6:	bf00      	nop
 800b0e8:	3714      	adds	r7, #20
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr

0800b0f2 <i2c_SendMemoryAddress>:

//Enviamos la direccion de memoria que deseamos leer o escribir
void i2c_SendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr)
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	70fb      	strb	r3, [r7, #3]
	//Enviamos la direccion de memoria que desamos leer
	ptrHandlerI2C->prtI2Cx->DR = memAddr;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	78fa      	ldrb	r2, [r7, #3]
 800b104:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "TXE" del evento "Data1" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 800b106:	e000      	b.n	800b10a <i2c_SendMemoryAddress+0x18>
	{
		__NOP();
 800b108:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	695b      	ldr	r3, [r3, #20]
 800b110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b114:	2b00      	cmp	r3, #0
 800b116:	d0f7      	beq.n	800b108 <i2c_SendMemoryAddress+0x16>
	}
}
 800b118:	bf00      	nop
 800b11a:	bf00      	nop
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <i2c_SendDataByte>:

//Escritura de datos
void i2c_SendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite)
{
 800b126:	b480      	push	{r7}
 800b128:	b083      	sub	sp, #12
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	460b      	mov	r3, r1
 800b130:	70fb      	strb	r3, [r7, #3]
	//Cargamos el valor que desasmos escribir
	ptrHandlerI2C->prtI2Cx->DR = dataToWrite;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	78fa      	ldrb	r2, [r7, #3]
 800b138:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "BTF" del evento "Transmision" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 800b13a:	e000      	b.n	800b13e <i2c_SendDataByte+0x18>
	{
		__NOP();
 800b13c:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	695b      	ldr	r3, [r3, #20]
 800b144:	f003 0304 	and.w	r3, r3, #4
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d0f7      	beq.n	800b13c <i2c_SendDataByte+0x16>
	}
}
 800b14c:	bf00      	nop
 800b14e:	bf00      	nop
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <i2c_ReadDataByte>:

//Lectura de datos
uint8_t i2c_ReadDataByte(I2C_Handler_t *ptrHandlerI2C)
{
 800b15a:	b480      	push	{r7}
 800b15c:	b083      	sub	sp, #12
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
	//Esperamos a que la bandera "RxNE" del evento "Recepcion" se levante
	//Se limpia la bandera "RxNE" leyendo el registro DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 800b162:	e000      	b.n	800b166 <i2c_ReadDataByte+0xc>
	{
		__NOP();
 800b164:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	695b      	ldr	r3, [r3, #20]
 800b16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b170:	2b00      	cmp	r3, #0
 800b172:	d0f7      	beq.n	800b164 <i2c_ReadDataByte+0xa>
	}
	//guardamos los datos recibimos
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->prtI2Cx->DR;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	b2da      	uxtb	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C ;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	799b      	ldrb	r3, [r3, #6]
}
 800b184:	4618      	mov	r0, r3
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <i2c_SendNoAck>:

//Funcion para activar la indicaicon de NoACK(indicacion para el Sclave de terminar la transmision de datos)
void i2c_SendNoAck(I2C_Handler_t *ptrHandlerI2C)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
	//Esribimos cero en el bit Ack del registro CR1
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_ACK;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1a6:	601a      	str	r2, [r3, #0]

}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <i2c_StopTrasaction>:
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_ACK;
}

//Funcion para generar el Stop bit
void i2c_StopTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_STOP;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1ca:	601a      	str	r2, [r3, #0]
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <i2c_ReadSingleRegister>:

//------------------------------------Funciones para la comunicacion por I2C----------------------------------------

uint8_t i2c_ReadSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	70fb      	strb	r3, [r7, #3]
	//0. Creacion de una variable auxiliara para recibir el dato leido
	uint8_t auxRead = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	73fb      	strb	r3, [r7, #15]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7ff ff19 	bl	800b020 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	791b      	ldrb	r3, [r3, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7ff ff53 	bl	800b0a2 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos leer
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 800b1fc:	78fb      	ldrb	r3, [r7, #3]
 800b1fe:	4619      	mov	r1, r3
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7ff ff76 	bl	800b0f2 <i2c_SendMemoryAddress>
	//4. Creamos una condicion de re start
	i2c_ReStartTrasaction(ptrHandlerI2C);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff ff2f 	bl	800b06a <i2c_ReStartTrasaction>
	//5. Enviamos la direccion del Sclavo e indicamos que se desea leer el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	791b      	ldrb	r3, [r3, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	4619      	mov	r1, r3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7ff ff44 	bl	800b0a2 <i2c_SendSlaveAddressRW>
	//6. Leemos el dato que envia el Sclavo
	auxRead = i2c_ReadDataByte(ptrHandlerI2C);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7ff ff9d 	bl	800b15a <i2c_ReadDataByte>
 800b220:	4603      	mov	r3, r0
 800b222:	73fb      	strb	r3, [r7, #15]
	//7. Generamso la condicio de NoAck
	i2c_SendNoAck(ptrHandlerI2C);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7ff ffb3 	bl	800b190 <i2c_SendNoAck>
	//8. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7ff ffc2 	bl	800b1b4 <i2c_StopTrasaction>

	return auxRead;
 800b230:	7bfb      	ldrb	r3, [r7, #15]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <i2c_WriteSingleRegister>:

void i2c_WriteSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b082      	sub	sp, #8
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	460b      	mov	r3, r1
 800b244:	70fb      	strb	r3, [r7, #3]
 800b246:	4613      	mov	r3, r2
 800b248:	70bb      	strb	r3, [r7, #2]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f7ff fee8 	bl	800b020 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	791b      	ldrb	r3, [r3, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	4619      	mov	r1, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7ff ff22 	bl	800b0a2 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos escribir
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 800b25e:	78fb      	ldrb	r3, [r7, #3]
 800b260:	4619      	mov	r1, r3
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7ff ff45 	bl	800b0f2 <i2c_SendMemoryAddress>
	//4. Enviamos el dato que se desea escribir en el Sclave
	i2c_SendDataByte(ptrHandlerI2C, newValue);
 800b268:	78bb      	ldrb	r3, [r7, #2]
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff ff5a 	bl	800b126 <i2c_SendDataByte>
	//5. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7ff ff9e 	bl	800b1b4 <i2c_StopTrasaction>
}
 800b278:	bf00      	nop
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	4603      	mov	r3, r0
 800b288:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 800b28a:	4a39      	ldr	r2, [pc, #228]	; (800b370 <configPLL+0xf0>)
 800b28c:	79fb      	ldrb	r3, [r7, #7]
 800b28e:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 800b290:	79fb      	ldrb	r3, [r7, #7]
 800b292:	2b31      	cmp	r3, #49	; 0x31
 800b294:	d804      	bhi.n	800b2a0 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800b296:	4b37      	ldr	r3, [pc, #220]	; (800b374 <configPLL+0xf4>)
 800b298:	4a36      	ldr	r2, [pc, #216]	; (800b374 <configPLL+0xf4>)
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	6093      	str	r3, [r2, #8]
 800b29e:	e005      	b.n	800b2ac <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800b2a0:	4b34      	ldr	r3, [pc, #208]	; (800b374 <configPLL+0xf4>)
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	4a33      	ldr	r2, [pc, #204]	; (800b374 <configPLL+0xf4>)
 800b2a6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800b2aa:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 800b2ac:	4b31      	ldr	r3, [pc, #196]	; (800b374 <configPLL+0xf4>)
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	4a30      	ldr	r2, [pc, #192]	; (800b374 <configPLL+0xf4>)
 800b2b2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800b2b6:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 800b2b8:	4b2e      	ldr	r3, [pc, #184]	; (800b374 <configPLL+0xf4>)
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	4a2d      	ldr	r2, [pc, #180]	; (800b374 <configPLL+0xf4>)
 800b2be:	f043 0312 	orr.w	r3, r3, #18
 800b2c2:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 800b2c4:	4b2b      	ldr	r3, [pc, #172]	; (800b374 <configPLL+0xf4>)
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	79fa      	ldrb	r2, [r7, #7]
 800b2ca:	0092      	lsls	r2, r2, #2
 800b2cc:	3a0e      	subs	r2, #14
 800b2ce:	0192      	lsls	r2, r2, #6
 800b2d0:	4611      	mov	r1, r2
 800b2d2:	4a28      	ldr	r2, [pc, #160]	; (800b374 <configPLL+0xf4>)
 800b2d4:	430b      	orrs	r3, r1
 800b2d6:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 800b2d8:	4b26      	ldr	r3, [pc, #152]	; (800b374 <configPLL+0xf4>)
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	4a25      	ldr	r2, [pc, #148]	; (800b374 <configPLL+0xf4>)
 800b2de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2e2:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 800b2e4:	4b23      	ldr	r3, [pc, #140]	; (800b374 <configPLL+0xf4>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a22      	ldr	r2, [pc, #136]	; (800b374 <configPLL+0xf4>)
 800b2ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b2ee:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 800b2f0:	e000      	b.n	800b2f4 <configPLL+0x74>
	{
		__NOP();
 800b2f2:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 800b2f4:	4b1f      	ldr	r3, [pc, #124]	; (800b374 <configPLL+0xf4>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d0f8      	beq.n	800b2f2 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 800b300:	79fb      	ldrb	r3, [r7, #7]
 800b302:	2b5a      	cmp	r3, #90	; 0x5a
 800b304:	d909      	bls.n	800b31a <configPLL+0x9a>
 800b306:	79fb      	ldrb	r3, [r7, #7]
 800b308:	2b64      	cmp	r3, #100	; 0x64
 800b30a:	d806      	bhi.n	800b31a <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 800b30c:	4b1a      	ldr	r3, [pc, #104]	; (800b378 <configPLL+0xf8>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a19      	ldr	r2, [pc, #100]	; (800b378 <configPLL+0xf8>)
 800b312:	f043 0303 	orr.w	r3, r3, #3
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	e01d      	b.n	800b356 <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 800b31a:	79fb      	ldrb	r3, [r7, #7]
 800b31c:	2b40      	cmp	r3, #64	; 0x40
 800b31e:	d909      	bls.n	800b334 <configPLL+0xb4>
 800b320:	79fb      	ldrb	r3, [r7, #7]
 800b322:	2b5a      	cmp	r3, #90	; 0x5a
 800b324:	d806      	bhi.n	800b334 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 800b326:	4b14      	ldr	r3, [pc, #80]	; (800b378 <configPLL+0xf8>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a13      	ldr	r2, [pc, #76]	; (800b378 <configPLL+0xf8>)
 800b32c:	f043 0302 	orr.w	r3, r3, #2
 800b330:	6013      	str	r3, [r2, #0]
 800b332:	e010      	b.n	800b356 <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 800b334:	79fb      	ldrb	r3, [r7, #7]
 800b336:	2b1e      	cmp	r3, #30
 800b338:	d909      	bls.n	800b34e <configPLL+0xce>
 800b33a:	79fb      	ldrb	r3, [r7, #7]
 800b33c:	2b40      	cmp	r3, #64	; 0x40
 800b33e:	d806      	bhi.n	800b34e <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 800b340:	4b0d      	ldr	r3, [pc, #52]	; (800b378 <configPLL+0xf8>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a0c      	ldr	r2, [pc, #48]	; (800b378 <configPLL+0xf8>)
 800b346:	f043 0301 	orr.w	r3, r3, #1
 800b34a:	6013      	str	r3, [r2, #0]
 800b34c:	e003      	b.n	800b356 <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 800b34e:	4b0a      	ldr	r3, [pc, #40]	; (800b378 <configPLL+0xf8>)
 800b350:	4a09      	ldr	r2, [pc, #36]	; (800b378 <configPLL+0xf8>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 800b356:	4b07      	ldr	r3, [pc, #28]	; (800b374 <configPLL+0xf4>)
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	4a06      	ldr	r2, [pc, #24]	; (800b374 <configPLL+0xf4>)
 800b35c:	f043 0302 	orr.w	r3, r3, #2
 800b360:	6093      	str	r3, [r2, #8]

}
 800b362:	bf00      	nop
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	2001bca4 	.word	0x2001bca4
 800b374:	40023800 	.word	0x40023800
 800b378:	40023c00 	.word	0x40023c00

0800b37c <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 800b382:	2300      	movs	r3, #0
 800b384:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 800b386:	4b09      	ldr	r3, [pc, #36]	; (800b3ac <getConfigPLL+0x30>)
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f003 0303 	and.w	r3, r3, #3
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d103      	bne.n	800b39a <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 800b392:	4b07      	ldr	r3, [pc, #28]	; (800b3b0 <getConfigPLL+0x34>)
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	71fb      	strb	r3, [r7, #7]
 800b398:	e001      	b.n	800b39e <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 800b39a:	2310      	movs	r3, #16
 800b39c:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 800b39e:	79fb      	ldrb	r3, [r7, #7]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	40023800 	.word	0x40023800
 800b3b0:	2001bca4 	.word	0x2001bca4

0800b3b4 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 800b3ba:	f7ff ffdf 	bl	800b37c <getConfigPLL>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 800b3c6:	79bb      	ldrb	r3, [r7, #6]
 800b3c8:	2b31      	cmp	r3, #49	; 0x31
 800b3ca:	d802      	bhi.n	800b3d2 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 800b3cc:	79bb      	ldrb	r3, [r7, #6]
 800b3ce:	71fb      	strb	r3, [r7, #7]
 800b3d0:	e002      	b.n	800b3d8 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 800b3d2:	79bb      	ldrb	r3, [r7, #6]
 800b3d4:	089b      	lsrs	r3, r3, #2
 800b3d6:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 800b3d8:	79fb      	ldrb	r3, [r7, #7]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
	...

0800b3e4 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3f4:	d106      	bne.n	800b404 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800b3f6:	4b81      	ldr	r3, [pc, #516]	; (800b5fc <pwm_Config+0x218>)
 800b3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fa:	4a80      	ldr	r2, [pc, #512]	; (800b5fc <pwm_Config+0x218>)
 800b3fc:	f043 0301 	orr.w	r3, r3, #1
 800b400:	6413      	str	r3, [r2, #64]	; 0x40
 800b402:	e024      	b.n	800b44e <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	4a7d      	ldr	r2, [pc, #500]	; (800b600 <pwm_Config+0x21c>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d106      	bne.n	800b41c <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800b40e:	4b7b      	ldr	r3, [pc, #492]	; (800b5fc <pwm_Config+0x218>)
 800b410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b412:	4a7a      	ldr	r2, [pc, #488]	; (800b5fc <pwm_Config+0x218>)
 800b414:	f043 0302 	orr.w	r3, r3, #2
 800b418:	6413      	str	r3, [r2, #64]	; 0x40
 800b41a:	e018      	b.n	800b44e <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	4a78      	ldr	r2, [pc, #480]	; (800b604 <pwm_Config+0x220>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d106      	bne.n	800b434 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800b426:	4b75      	ldr	r3, [pc, #468]	; (800b5fc <pwm_Config+0x218>)
 800b428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42a:	4a74      	ldr	r2, [pc, #464]	; (800b5fc <pwm_Config+0x218>)
 800b42c:	f043 0304 	orr.w	r3, r3, #4
 800b430:	6413      	str	r3, [r2, #64]	; 0x40
 800b432:	e00c      	b.n	800b44e <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	4a73      	ldr	r2, [pc, #460]	; (800b608 <pwm_Config+0x224>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d106      	bne.n	800b44c <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800b43e:	4b6f      	ldr	r3, [pc, #444]	; (800b5fc <pwm_Config+0x218>)
 800b440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b442:	4a6e      	ldr	r2, [pc, #440]	; (800b5fc <pwm_Config+0x218>)
 800b444:	f043 0308 	orr.w	r3, r3, #8
 800b448:	6413      	str	r3, [r2, #64]	; 0x40
 800b44a:	e000      	b.n	800b44e <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 800b44c:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 fa4c 	bl	800b8ec <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	2b03      	cmp	r3, #3
 800b45a:	f200 8118 	bhi.w	800b68e <pwm_Config+0x2aa>
 800b45e:	a201      	add	r2, pc, #4	; (adr r2, 800b464 <pwm_Config+0x80>)
 800b460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b464:	0800b475 	.word	0x0800b475
 800b468:	0800b4f7 	.word	0x0800b4f7
 800b46c:	0800b579 	.word	0x0800b579
 800b470:	0800b60d 	.word	0x0800b60d
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	699a      	ldr	r2, [r3, #24]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f022 0203 	bic.w	r2, r2, #3
 800b482:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	699a      	ldr	r2, [r3, #24]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b492:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	699a      	ldr	r2, [r3, #24]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800b4a2:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	699a      	ldr	r2, [r3, #24]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	f022 0208 	bic.w	r2, r2, #8
 800b4b2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	699a      	ldr	r2, [r3, #24]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	689b      	ldr	r3, [r3, #8]
 800b4be:	f042 0208 	orr.w	r2, r2, #8
 800b4c2:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	699a      	ldr	r2, [r3, #24]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	f022 0204 	bic.w	r2, r2, #4
 800b4d2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	699a      	ldr	r2, [r3, #24]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f042 0204 	orr.w	r2, r2, #4
 800b4e2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	699a      	ldr	r2, [r3, #24]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4f2:	619a      	str	r2, [r3, #24]

		break;
 800b4f4:	e0cc      	b.n	800b690 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	699a      	ldr	r2, [r3, #24]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	f022 0203 	bic.w	r2, r2, #3
 800b504:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	699a      	ldr	r2, [r3, #24]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b514:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	699a      	ldr	r2, [r3, #24]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800b524:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	699a      	ldr	r2, [r3, #24]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b534:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	699a      	ldr	r2, [r3, #24]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b544:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	689b      	ldr	r3, [r3, #8]
 800b54a:	699a      	ldr	r2, [r3, #24]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b554:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	699a      	ldr	r2, [r3, #24]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b564:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	699a      	ldr	r2, [r3, #24]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b574:	619a      	str	r2, [r3, #24]

		break;
 800b576:	e08b      	b.n	800b690 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	69da      	ldr	r2, [r3, #28]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	f022 0203 	bic.w	r2, r2, #3
 800b586:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	69da      	ldr	r2, [r3, #28]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b596:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	69da      	ldr	r2, [r3, #28]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800b5a6:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	69da      	ldr	r2, [r3, #28]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	f022 0208 	bic.w	r2, r2, #8
 800b5b6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	69da      	ldr	r2, [r3, #28]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	f042 0208 	orr.w	r2, r2, #8
 800b5c6:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	69da      	ldr	r2, [r3, #28]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	f022 0204 	bic.w	r2, r2, #4
 800b5d6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	69da      	ldr	r2, [r3, #28]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	f042 0204 	orr.w	r2, r2, #4
 800b5e6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	69da      	ldr	r2, [r3, #28]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b5f6:	61da      	str	r2, [r3, #28]

		break;
 800b5f8:	e04a      	b.n	800b690 <pwm_Config+0x2ac>
 800b5fa:	bf00      	nop
 800b5fc:	40023800 	.word	0x40023800
 800b600:	40000400 	.word	0x40000400
 800b604:	40000800 	.word	0x40000800
 800b608:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	69da      	ldr	r2, [r3, #28]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b61a:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	69da      	ldr	r2, [r3, #28]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b62a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	69da      	ldr	r2, [r3, #28]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800b63a:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	69da      	ldr	r2, [r3, #28]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b64a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	69da      	ldr	r2, [r3, #28]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b65a:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	69da      	ldr	r2, [r3, #28]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b66a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	69da      	ldr	r2, [r3, #28]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b67a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	69da      	ldr	r2, [r3, #28]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b68a:	61da      	str	r2, [r3, #28]

		break;
 800b68c:	e000      	b.n	800b690 <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 800b68e:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	791b      	ldrb	r3, [r3, #4]
 800b694:	4619      	mov	r1, r3
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f896 	bl	800b7c8 <statusPolarityPWM>

}
 800b69c:	bf00      	nop
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	2b03      	cmp	r3, #3
 800b6b6:	d87f      	bhi.n	800b7b8 <statusInOutPWM+0x114>
 800b6b8:	a201      	add	r2, pc, #4	; (adr r2, 800b6c0 <statusInOutPWM+0x1c>)
 800b6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6be:	bf00      	nop
 800b6c0:	0800b6d1 	.word	0x0800b6d1
 800b6c4:	0800b70b 	.word	0x0800b70b
 800b6c8:	0800b745 	.word	0x0800b745
 800b6cc:	0800b77f 	.word	0x0800b77f
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d110      	bne.n	800b6f8 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	6a1a      	ldr	r2, [r3, #32]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	f022 0201 	bic.w	r2, r2, #1
 800b6e4:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	6a1a      	ldr	r2, [r3, #32]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	f042 0201 	orr.w	r2, r2, #1
 800b6f4:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 800b6f6:	e060      	b.n	800b7ba <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	6a1a      	ldr	r2, [r3, #32]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	f022 0201 	bic.w	r2, r2, #1
 800b706:	621a      	str	r2, [r3, #32]
		break;
 800b708:	e057      	b.n	800b7ba <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 800b70a:	78fb      	ldrb	r3, [r7, #3]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d110      	bne.n	800b732 <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	6a1a      	ldr	r2, [r3, #32]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	f022 0210 	bic.w	r2, r2, #16
 800b71e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	6a1a      	ldr	r2, [r3, #32]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	f042 0210 	orr.w	r2, r2, #16
 800b72e:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 800b730:	e043      	b.n	800b7ba <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	6a1a      	ldr	r2, [r3, #32]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	f022 0210 	bic.w	r2, r2, #16
 800b740:	621a      	str	r2, [r3, #32]
		break;
 800b742:	e03a      	b.n	800b7ba <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 800b744:	78fb      	ldrb	r3, [r7, #3]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d110      	bne.n	800b76c <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	6a1a      	ldr	r2, [r3, #32]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b758:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	6a1a      	ldr	r2, [r3, #32]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b768:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 800b76a:	e026      	b.n	800b7ba <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	6a1a      	ldr	r2, [r3, #32]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b77a:	621a      	str	r2, [r3, #32]
		break;
 800b77c:	e01d      	b.n	800b7ba <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 800b77e:	78fb      	ldrb	r3, [r7, #3]
 800b780:	2b01      	cmp	r3, #1
 800b782:	d110      	bne.n	800b7a6 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	6a1a      	ldr	r2, [r3, #32]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b792:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	6a1a      	ldr	r2, [r3, #32]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b7a2:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 800b7a4:	e009      	b.n	800b7ba <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	6a1a      	ldr	r2, [r3, #32]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b7b4:	621a      	str	r2, [r3, #32]
		break;
 800b7b6:	e000      	b.n	800b7ba <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 800b7b8:	bf00      	nop
	}
	}
}
 800b7ba:	bf00      	nop
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop

0800b7c8 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	2b03      	cmp	r3, #3
 800b7da:	d87f      	bhi.n	800b8dc <statusPolarityPWM+0x114>
 800b7dc:	a201      	add	r2, pc, #4	; (adr r2, 800b7e4 <statusPolarityPWM+0x1c>)
 800b7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e2:	bf00      	nop
 800b7e4:	0800b7f5 	.word	0x0800b7f5
 800b7e8:	0800b82f 	.word	0x0800b82f
 800b7ec:	0800b869 	.word	0x0800b869
 800b7f0:	0800b8a3 	.word	0x0800b8a3
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 800b7f4:	78fb      	ldrb	r3, [r7, #3]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d110      	bne.n	800b81c <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	6a1a      	ldr	r2, [r3, #32]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	f022 0202 	bic.w	r2, r2, #2
 800b808:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	6a1a      	ldr	r2, [r3, #32]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	f042 0202 	orr.w	r2, r2, #2
 800b818:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 800b81a:	e060      	b.n	800b8de <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	6a1a      	ldr	r2, [r3, #32]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	f022 0202 	bic.w	r2, r2, #2
 800b82a:	621a      	str	r2, [r3, #32]
		break;
 800b82c:	e057      	b.n	800b8de <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 800b82e:	78fb      	ldrb	r3, [r7, #3]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d110      	bne.n	800b856 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	6a1a      	ldr	r2, [r3, #32]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	f022 0220 	bic.w	r2, r2, #32
 800b842:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	6a1a      	ldr	r2, [r3, #32]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	f042 0220 	orr.w	r2, r2, #32
 800b852:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 800b854:	e043      	b.n	800b8de <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	6a1a      	ldr	r2, [r3, #32]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	f022 0220 	bic.w	r2, r2, #32
 800b864:	621a      	str	r2, [r3, #32]
		break;
 800b866:	e03a      	b.n	800b8de <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 800b868:	78fb      	ldrb	r3, [r7, #3]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d110      	bne.n	800b890 <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	6a1a      	ldr	r2, [r3, #32]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b87c:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	6a1a      	ldr	r2, [r3, #32]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b88c:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 800b88e:	e026      	b.n	800b8de <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	6a1a      	ldr	r2, [r3, #32]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b89e:	621a      	str	r2, [r3, #32]
		break;
 800b8a0:	e01d      	b.n	800b8de <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 800b8a2:	78fb      	ldrb	r3, [r7, #3]
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d110      	bne.n	800b8ca <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	6a1a      	ldr	r2, [r3, #32]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8b6:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	6a1a      	ldr	r2, [r3, #32]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b8c6:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 800b8c8:	e009      	b.n	800b8de <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	6a1a      	ldr	r2, [r3, #32]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8d8:	621a      	str	r2, [r3, #32]
		break;
 800b8da:	e000      	b.n	800b8de <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 800b8dc:	bf00      	nop
	}
	}

}
 800b8de:	bf00      	nop
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop

0800b8ec <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	2b03      	cmp	r3, #3
 800b8fa:	d823      	bhi.n	800b944 <setDuttyCycle+0x58>
 800b8fc:	a201      	add	r2, pc, #4	; (adr r2, 800b904 <setDuttyCycle+0x18>)
 800b8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b902:	bf00      	nop
 800b904:	0800b915 	.word	0x0800b915
 800b908:	0800b921 	.word	0x0800b921
 800b90c:	0800b92d 	.word	0x0800b92d
 800b910:	0800b939 	.word	0x0800b939
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	885a      	ldrh	r2, [r3, #2]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800b91e:	e012      	b.n	800b946 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	885a      	ldrh	r2, [r3, #2]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800b92a:	e00c      	b.n	800b946 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	885a      	ldrh	r2, [r3, #2]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800b936:	e006      	b.n	800b946 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	885a      	ldrh	r2, [r3, #2]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800b942:	e000      	b.n	800b946 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 800b944:	bf00      	nop
	}
	}

}
 800b946:	bf00      	nop
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop

0800b954 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b966:	4a0d      	ldr	r2, [pc, #52]	; (800b99c <updateDuttyCyclePercentageFloat+0x48>)
 800b968:	fba2 2303 	umull	r2, r3, r2, r3
 800b96c:	095b      	lsrs	r3, r3, #5
 800b96e:	b29b      	uxth	r3, r3
 800b970:	ee07 3a90 	vmov	s15, r3
 800b974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b978:	edd7 7a00 	vldr	s15, [r7]
 800b97c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b984:	ee17 3a90 	vmov	r3, s15
 800b988:	b29a      	uxth	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7ff ffac 	bl	800b8ec <setDuttyCycle>
}
 800b994:	bf00      	nop
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	51eb851f 	.word	0x51eb851f

0800b9a0 <__NVIC_EnableIRQ>:
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b9aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	db0b      	blt.n	800b9ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b9b2:	79fb      	ldrb	r3, [r7, #7]
 800b9b4:	f003 021f 	and.w	r2, r3, #31
 800b9b8:	4907      	ldr	r1, [pc, #28]	; (800b9d8 <__NVIC_EnableIRQ+0x38>)
 800b9ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9be:	095b      	lsrs	r3, r3, #5
 800b9c0:	2001      	movs	r0, #1
 800b9c2:	fa00 f202 	lsl.w	r2, r0, r2
 800b9c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b9ca:	bf00      	nop
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	e000e100 	.word	0xe000e100

0800b9dc <__NVIC_SetPriority>:
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	6039      	str	r1, [r7, #0]
 800b9e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b9e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	db0a      	blt.n	800ba06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	490c      	ldr	r1, [pc, #48]	; (800ba28 <__NVIC_SetPriority+0x4c>)
 800b9f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9fa:	0112      	lsls	r2, r2, #4
 800b9fc:	b2d2      	uxtb	r2, r2
 800b9fe:	440b      	add	r3, r1
 800ba00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ba04:	e00a      	b.n	800ba1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	4908      	ldr	r1, [pc, #32]	; (800ba2c <__NVIC_SetPriority+0x50>)
 800ba0c:	79fb      	ldrb	r3, [r7, #7]
 800ba0e:	f003 030f 	and.w	r3, r3, #15
 800ba12:	3b04      	subs	r3, #4
 800ba14:	0112      	lsls	r2, r2, #4
 800ba16:	b2d2      	uxtb	r2, r2
 800ba18:	440b      	add	r3, r1
 800ba1a:	761a      	strb	r2, [r3, #24]
}
 800ba1c:	bf00      	nop
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr
 800ba28:	e000e100 	.word	0xe000e100
 800ba2c:	e000ed00 	.word	0xe000ed00

0800ba30 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	4a8f      	ldr	r2, [pc, #572]	; (800bc7c <USART_Config+0x24c>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d107      	bne.n	800ba52 <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 800ba42:	4b8f      	ldr	r3, [pc, #572]	; (800bc80 <USART_Config+0x250>)
 800ba44:	2210      	movs	r2, #16
 800ba46:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	4a8d      	ldr	r2, [pc, #564]	; (800bc84 <USART_Config+0x254>)
 800ba4e:	6013      	str	r3, [r2, #0]
 800ba50:	e019      	b.n	800ba86 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	4a8c      	ldr	r2, [pc, #560]	; (800bc88 <USART_Config+0x258>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d108      	bne.n	800ba6e <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 800ba5c:	4b88      	ldr	r3, [pc, #544]	; (800bc80 <USART_Config+0x250>)
 800ba5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ba62:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	4a88      	ldr	r2, [pc, #544]	; (800bc8c <USART_Config+0x25c>)
 800ba6a:	6013      	str	r3, [r2, #0]
 800ba6c:	e00b      	b.n	800ba86 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	4a87      	ldr	r2, [pc, #540]	; (800bc90 <USART_Config+0x260>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d106      	bne.n	800ba86 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 800ba78:	4b81      	ldr	r3, [pc, #516]	; (800bc80 <USART_Config+0x250>)
 800ba7a:	2220      	movs	r2, #32
 800ba7c:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	4a84      	ldr	r2, [pc, #528]	; (800bc94 <USART_Config+0x264>)
 800ba84:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	2200      	movs	r2, #0
 800ba94:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	789b      	ldrb	r3, [r3, #2]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d03d      	beq.n	800bb1a <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	68da      	ldr	r2, [r3, #12]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800baac:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	68da      	ldr	r2, [r3, #12]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800babc:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	68da      	ldr	r2, [r3, #12]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bacc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	68da      	ldr	r2, [r3, #12]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800badc:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	789b      	ldrb	r3, [r3, #2]
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d110      	bne.n	800bb08 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	68da      	ldr	r2, [r3, #12]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800baf4:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	68da      	ldr	r2, [r3, #12]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb04:	60da      	str	r2, [r3, #12]
 800bb06:	e018      	b.n	800bb3a <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	68da      	ldr	r2, [r3, #12]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bb16:	60da      	str	r2, [r3, #12]
 800bb18:	e00f      	b.n	800bb3a <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	68da      	ldr	r2, [r3, #12]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb28:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	68da      	ldr	r2, [r3, #12]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bb38:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	78db      	ldrb	r3, [r3, #3]
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	d84c      	bhi.n	800bbdc <USART_Config+0x1ac>
 800bb42:	a201      	add	r2, pc, #4	; (adr r2, 800bb48 <USART_Config+0x118>)
 800bb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb48:	0800bb59 	.word	0x0800bb59
 800bb4c:	0800bb77 	.word	0x0800bb77
 800bb50:	0800bb99 	.word	0x0800bb99
 800bb54:	0800bbbb 	.word	0x0800bbbb
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	691a      	ldr	r2, [r3, #16]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bb66:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	689a      	ldr	r2, [r3, #8]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	6912      	ldr	r2, [r2, #16]
 800bb72:	611a      	str	r2, [r3, #16]
		break;
 800bb74:	e041      	b.n	800bbfa <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	691a      	ldr	r2, [r3, #16]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bb84:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	691a      	ldr	r2, [r3, #16]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bb94:	611a      	str	r2, [r3, #16]
		break;
 800bb96:	e030      	b.n	800bbfa <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	691a      	ldr	r2, [r3, #16]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bba6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	691a      	ldr	r2, [r3, #16]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bbb6:	611a      	str	r2, [r3, #16]
		break;
 800bbb8:	e01f      	b.n	800bbfa <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	691a      	ldr	r2, [r3, #16]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bbc8:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	691a      	ldr	r2, [r3, #16]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800bbd8:	611a      	str	r2, [r3, #16]
		break;
 800bbda:	e00e      	b.n	800bbfa <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	691a      	ldr	r2, [r3, #16]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bbea:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	689a      	ldr	r2, [r3, #8]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	6912      	ldr	r2, [r2, #16]
 800bbf6:	611a      	str	r2, [r3, #16]
		break;
 800bbf8:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	4a21      	ldr	r2, [pc, #132]	; (800bc88 <USART_Config+0x258>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d104      	bne.n	800bc12 <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 800bc08:	f7ff fbd4 	bl	800b3b4 <getClockAPB1>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73fb      	strb	r3, [r7, #15]
 800bc10:	e003      	b.n	800bc1a <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 800bc12:	f7ff fbb3 	bl	800b37c <getConfigPLL>
 800bc16:	4603      	mov	r3, r0
 800bc18:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	785b      	ldrb	r3, [r3, #1]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10b      	bne.n	800bc3a <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 800bc22:	7bfb      	ldrb	r3, [r7, #15]
 800bc24:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f000 f95f 	bl	800beec <getValueBaudRate>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	461a      	mov	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	609a      	str	r2, [r3, #8]
 800bc38:	e02f      	b.n	800bc9a <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	785b      	ldrb	r3, [r3, #1]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d10b      	bne.n	800bc5a <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
 800bc44:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f000 f94f 	bl	800beec <getValueBaudRate>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	461a      	mov	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	609a      	str	r2, [r3, #8]
 800bc58:	e01f      	b.n	800bc9a <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	785b      	ldrb	r3, [r3, #1]
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d11a      	bne.n	800bc98 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 800bc62:	7bfb      	ldrb	r3, [r7, #15]
 800bc64:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f000 f93f 	bl	800beec <getValueBaudRate>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	461a      	mov	r2, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	609a      	str	r2, [r3, #8]
 800bc78:	e00f      	b.n	800bc9a <USART_Config+0x26a>
 800bc7a:	bf00      	nop
 800bc7c:	40011000 	.word	0x40011000
 800bc80:	40023800 	.word	0x40023800
 800bc84:	2001bca8 	.word	0x2001bca8
 800bc88:	40004400 	.word	0x40004400
 800bc8c:	2001bcac 	.word	0x2001bcac
 800bc90:	40011400 	.word	0x40011400
 800bc94:	2001bcb0 	.word	0x2001bcb0
	}
	else
	{
		__NOP();
 800bc98:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	2b03      	cmp	r3, #3
 800bca0:	d866      	bhi.n	800bd70 <USART_Config+0x340>
 800bca2:	a201      	add	r2, pc, #4	; (adr r2, 800bca8 <USART_Config+0x278>)
 800bca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca8:	0800bcb9 	.word	0x0800bcb9
 800bcac:	0800bcdb 	.word	0x0800bcdb
 800bcb0:	0800bcfd 	.word	0x0800bcfd
 800bcb4:	0800bd3f 	.word	0x0800bd3f
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	68da      	ldr	r2, [r3, #12]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	f022 0208 	bic.w	r2, r2, #8
 800bcc6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	68da      	ldr	r2, [r3, #12]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	f042 0208 	orr.w	r2, r2, #8
 800bcd6:	60da      	str	r2, [r3, #12]

		break;
 800bcd8:	e063      	b.n	800bda2 <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	68da      	ldr	r2, [r3, #12]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	f022 0204 	bic.w	r2, r2, #4
 800bce8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	68da      	ldr	r2, [r3, #12]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	f042 0204 	orr.w	r2, r2, #4
 800bcf8:	60da      	str	r2, [r3, #12]

		break;
 800bcfa:	e052      	b.n	800bda2 <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	68da      	ldr	r2, [r3, #12]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	f022 0208 	bic.w	r2, r2, #8
 800bd0a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	68da      	ldr	r2, [r3, #12]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	f042 0208 	orr.w	r2, r2, #8
 800bd1a:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	68da      	ldr	r2, [r3, #12]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	f022 0204 	bic.w	r2, r2, #4
 800bd2a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	68da      	ldr	r2, [r3, #12]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	f042 0204 	orr.w	r2, r2, #4
 800bd3a:	60da      	str	r2, [r3, #12]


		break;
 800bd3c:	e031      	b.n	800bda2 <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	68da      	ldr	r2, [r3, #12]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd4c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	68da      	ldr	r2, [r3, #12]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	f022 0208 	bic.w	r2, r2, #8
 800bd5c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	68da      	ldr	r2, [r3, #12]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	f022 0204 	bic.w	r2, r2, #4
 800bd6c:	60da      	str	r2, [r3, #12]
		break;
 800bd6e:	e018      	b.n	800bda2 <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	68da      	ldr	r2, [r3, #12]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd7e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	68da      	ldr	r2, [r3, #12]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	f022 0208 	bic.w	r2, r2, #8
 800bd8e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	68da      	ldr	r2, [r3, #12]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	f022 0204 	bic.w	r2, r2, #4
 800bd9e:	60da      	str	r2, [r3, #12]
		break;
 800bda0:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800bda2:	b672      	cpsid	i
}
 800bda4:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	791b      	ldrb	r3, [r3, #4]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d110      	bne.n	800bdd0 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	68da      	ldr	r2, [r3, #12]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	f022 0220 	bic.w	r2, r2, #32
 800bdbc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	68da      	ldr	r2, [r3, #12]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	f042 0220 	orr.w	r2, r2, #32
 800bdcc:	60da      	str	r2, [r3, #12]
 800bdce:	e007      	b.n	800bde0 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	68da      	ldr	r2, [r3, #12]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	f022 0220 	bic.w	r2, r2, #32
 800bdde:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	791b      	ldrb	r3, [r3, #4]
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d003      	beq.n	800bdf0 <USART_Config+0x3c0>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	795b      	ldrb	r3, [r3, #5]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d11a      	bne.n	800be26 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	4a1a      	ldr	r2, [pc, #104]	; (800be60 <USART_Config+0x430>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d103      	bne.n	800be02 <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 800bdfa:	2025      	movs	r0, #37	; 0x25
 800bdfc:	f7ff fdd0 	bl	800b9a0 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800be00:	e013      	b.n	800be2a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	4a17      	ldr	r2, [pc, #92]	; (800be64 <USART_Config+0x434>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d103      	bne.n	800be14 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 800be0c:	2026      	movs	r0, #38	; 0x26
 800be0e:	f7ff fdc7 	bl	800b9a0 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800be12:	e00a      	b.n	800be2a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	4a13      	ldr	r2, [pc, #76]	; (800be68 <USART_Config+0x438>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d105      	bne.n	800be2a <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 800be1e:	2047      	movs	r0, #71	; 0x47
 800be20:	f7ff fdbe 	bl	800b9a0 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800be24:	e001      	b.n	800be2a <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 800be26:	bf00      	nop
 800be28:	e000      	b.n	800be2c <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800be2a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800be2c:	b662      	cpsie	i
}
 800be2e:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	2b03      	cmp	r3, #3
 800be36:	d00f      	beq.n	800be58 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	68da      	ldr	r2, [r3, #12]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be46:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	68da      	ldr	r2, [r3, #12]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be56:	60da      	str	r2, [r3, #12]
	}
}
 800be58:	bf00      	nop
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	40011000 	.word	0x40011000
 800be64:	40004400 	.word	0x40004400
 800be68:	40011400 	.word	0x40011400

0800be6c <usart_Config_Init_Priority>:

//------------Funcion para configurar las interrupciones------------------
void usart_Config_Init_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	460b      	mov	r3, r1
 800be76:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800be78:	b672      	cpsid	i
}
 800be7a:	bf00      	nop
	//Desactivamos las interupciones globales
	__disable_irq();
	//Verificamos si se selecciono alguna interrupcion
		if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	791b      	ldrb	r3, [r3, #4]
 800be80:	2b01      	cmp	r3, #1
 800be82:	d003      	beq.n	800be8c <usart_Config_Init_Priority+0x20>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	795b      	ldrb	r3, [r3, #5]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d120      	bne.n	800bece <usart_Config_Init_Priority+0x62>
		{
			//Matriculamos la interrupcion en el NVIC
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	4a13      	ldr	r2, [pc, #76]	; (800bee0 <usart_Config_Init_Priority+0x74>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d105      	bne.n	800bea2 <usart_Config_Init_Priority+0x36>
			{
				NVIC_SetPriority(USART1_IRQn, newPriority);
 800be96:	78fb      	ldrb	r3, [r7, #3]
 800be98:	4619      	mov	r1, r3
 800be9a:	2025      	movs	r0, #37	; 0x25
 800be9c:	f7ff fd9e 	bl	800b9dc <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800bea0:	e017      	b.n	800bed2 <usart_Config_Init_Priority+0x66>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART2)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	4a0f      	ldr	r2, [pc, #60]	; (800bee4 <usart_Config_Init_Priority+0x78>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d105      	bne.n	800beb8 <usart_Config_Init_Priority+0x4c>
			{
				NVIC_SetPriority(USART2_IRQn, newPriority);
 800beac:	78fb      	ldrb	r3, [r7, #3]
 800beae:	4619      	mov	r1, r3
 800beb0:	2026      	movs	r0, #38	; 0x26
 800beb2:	f7ff fd93 	bl	800b9dc <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800beb6:	e00c      	b.n	800bed2 <usart_Config_Init_Priority+0x66>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART6)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	4a0a      	ldr	r2, [pc, #40]	; (800bee8 <usart_Config_Init_Priority+0x7c>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d107      	bne.n	800bed2 <usart_Config_Init_Priority+0x66>
			{
				NVIC_SetPriority(USART6_IRQn, newPriority);
 800bec2:	78fb      	ldrb	r3, [r7, #3]
 800bec4:	4619      	mov	r1, r3
 800bec6:	2047      	movs	r0, #71	; 0x47
 800bec8:	f7ff fd88 	bl	800b9dc <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800becc:	e001      	b.n	800bed2 <usart_Config_Init_Priority+0x66>
			}
		}
		else
		{
			__NOP();
 800bece:	bf00      	nop
 800bed0:	e000      	b.n	800bed4 <usart_Config_Init_Priority+0x68>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800bed2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800bed4:	b662      	cpsie	i
}
 800bed6:	bf00      	nop
		}
		//Activamos las interupciones globales
		__enable_irq();
}
 800bed8:	bf00      	nop
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	40011000 	.word	0x40011000
 800bee4:	40004400 	.word	0x40004400
 800bee8:	40011400 	.word	0x40011400

0800beec <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 800beec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bef0:	b086      	sub	sp, #24
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6039      	str	r1, [r7, #0]
 800bef6:	4601      	mov	r1, r0
 800bef8:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 800befa:	79f9      	ldrb	r1, [r7, #7]
 800befc:	2000      	movs	r0, #0
 800befe:	460a      	mov	r2, r1
 800bf00:	4603      	mov	r3, r0
 800bf02:	491f      	ldr	r1, [pc, #124]	; (800bf80 <getValueBaudRate+0x94>)
 800bf04:	fb01 f003 	mul.w	r0, r1, r3
 800bf08:	2102      	movs	r1, #2
 800bf0a:	fb02 f101 	mul.w	r1, r2, r1
 800bf0e:	4401      	add	r1, r0
 800bf10:	481b      	ldr	r0, [pc, #108]	; (800bf80 <getValueBaudRate+0x94>)
 800bf12:	fba2 4500 	umull	r4, r5, r2, r0
 800bf16:	194b      	adds	r3, r1, r5
 800bf18:	461d      	mov	r5, r3
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	011b      	lsls	r3, r3, #4
 800bf1e:	2200      	movs	r2, #0
 800bf20:	4698      	mov	r8, r3
 800bf22:	4691      	mov	r9, r2
 800bf24:	4642      	mov	r2, r8
 800bf26:	464b      	mov	r3, r9
 800bf28:	4620      	mov	r0, r4
 800bf2a:	4629      	mov	r1, r5
 800bf2c:	f7f4 ffd2 	bl	8000ed4 <__aeabi_ldivmod>
 800bf30:	4602      	mov	r2, r0
 800bf32:	460b      	mov	r3, r1
 800bf34:	4613      	mov	r3, r2
 800bf36:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	4a12      	ldr	r2, [pc, #72]	; (800bf84 <getValueBaudRate+0x98>)
 800bf3c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf40:	0b5b      	lsrs	r3, r3, #13
 800bf42:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	f242 7210 	movw	r2, #10000	; 0x2710
 800bf4a:	fb02 f303 	mul.w	r3, r2, r3
 800bf4e:	697a      	ldr	r2, [r7, #20]
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800bf5a:	4a0a      	ldr	r2, [pc, #40]	; (800bf84 <getValueBaudRate+0x98>)
 800bf5c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf60:	0a5b      	lsrs	r3, r3, #9
 800bf62:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	011b      	lsls	r3, r3, #4
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	7afb      	ldrb	r3, [r7, #11]
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	4313      	orrs	r3, r2
 800bf72:	813b      	strh	r3, [r7, #8]

    return value;
 800bf74:	893b      	ldrh	r3, [r7, #8]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3718      	adds	r7, #24
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bf80:	540be400 	.word	0x540be400
 800bf84:	d1b71759 	.word	0xd1b71759

0800bf88 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	460b      	mov	r3, r1
 800bf92:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 800bf94:	e000      	b.n	800bf98 <writeChar+0x10>
	{
		__NOP();
 800bf96:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d0f7      	beq.n	800bf96 <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	78fa      	ldrb	r2, [r7, #3]
 800bfac:	605a      	str	r2, [r3, #4]

}
 800bfae:	bf00      	nop
 800bfb0:	370c      	adds	r7, #12
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b084      	sub	sp, #16
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 800bfc8:	e00a      	b.n	800bfe0 <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 800bfca:	7bfb      	ldrb	r3, [r7, #15]
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	4413      	add	r3, r2
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f7ff ffd7 	bl	800bf88 <writeChar>
		i++;
 800bfda:	7bfb      	ldrb	r3, [r7, #15]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 800bfe0:	7bfb      	ldrb	r3, [r7, #15]
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1ee      	bne.n	800bfca <writeMsg+0x10>
	}
}
 800bfec:	bf00      	nop
 800bfee:	bf00      	nop
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
	...

0800bff8 <getRxData>:
	}
}

//Funcion para leer un char
uint8_t getRxData(void)
{
 800bff8:	b480      	push	{r7}
 800bffa:	af00      	add	r7, sp, #0
	return auxRxData;
 800bffc:	4b03      	ldr	r3, [pc, #12]	; (800c00c <getRxData+0x14>)
 800bffe:	781b      	ldrb	r3, [r3, #0]
}
 800c000:	4618      	mov	r0, r3
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	2001bcb4 	.word	0x2001bcb4

0800c010 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	460b      	mov	r3, r1
 800c01a:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 800c01c:	78fb      	ldrb	r3, [r7, #3]
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d10c      	bne.n	800c03c <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 800c03a:	e005      	b.n	800c048 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	60da      	str	r2, [r3, #12]
}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 800c054:	b480      	push	{r7}
 800c056:	af00      	add	r7, sp, #0
	__NOP();
 800c058:	bf00      	nop
}
 800c05a:	bf00      	nop
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 800c064:	b480      	push	{r7}
 800c066:	af00      	add	r7, sp, #0
	__NOP();
 800c068:	bf00      	nop
}
 800c06a:	bf00      	nop
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 800c078:	4b37      	ldr	r3, [pc, #220]	; (800c158 <USART1_IRQHandler+0xe4>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f003 0320 	and.w	r3, r3, #32
 800c082:	2b00      	cmp	r3, #0
 800c084:	d008      	beq.n	800c098 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 800c086:	4b34      	ldr	r3, [pc, #208]	; (800c158 <USART1_IRQHandler+0xe4>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	b2da      	uxtb	r2, r3
 800c08e:	4b33      	ldr	r3, [pc, #204]	; (800c15c <USART1_IRQHandler+0xe8>)
 800c090:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 800c092:	f7ff ffdf 	bl	800c054 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 800c096:	e05d      	b.n	800c154 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 800c098:	4b2f      	ldr	r3, [pc, #188]	; (800c158 <USART1_IRQHandler+0xe4>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d055      	beq.n	800c152 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800c0a6:	4b2e      	ldr	r3, [pc, #184]	; (800c160 <USART1_IRQHandler+0xec>)
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d10b      	bne.n	800c0c6 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 800c0ae:	4b2d      	ldr	r3, [pc, #180]	; (800c164 <USART1_IRQHandler+0xf0>)
 800c0b0:	781a      	ldrb	r2, [r3, #0]
 800c0b2:	4b29      	ldr	r3, [pc, #164]	; (800c158 <USART1_IRQHandler+0xe4>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 800c0b8:	4b27      	ldr	r3, [pc, #156]	; (800c158 <USART1_IRQHandler+0xe4>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2100      	movs	r1, #0
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7ff ffa6 	bl	800c010 <interruptionTX>
}
 800c0c4:	e046      	b.n	800c154 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800c0c6:	4b26      	ldr	r3, [pc, #152]	; (800c160 <USART1_IRQHandler+0xec>)
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d142      	bne.n	800c154 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800c0ce:	4b26      	ldr	r3, [pc, #152]	; (800c168 <USART1_IRQHandler+0xf4>)
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	4b25      	ldr	r3, [pc, #148]	; (800c16c <USART1_IRQHandler+0xf8>)
 800c0d6:	5c9b      	ldrb	r3, [r3, r2]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d00e      	beq.n	800c0fa <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 800c0dc:	4b22      	ldr	r3, [pc, #136]	; (800c168 <USART1_IRQHandler+0xf4>)
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	4b22      	ldr	r3, [pc, #136]	; (800c16c <USART1_IRQHandler+0xf8>)
 800c0e4:	5c9a      	ldrb	r2, [r3, r2]
 800c0e6:	4b1c      	ldr	r3, [pc, #112]	; (800c158 <USART1_IRQHandler+0xe4>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	605a      	str	r2, [r3, #4]
				posChar++;
 800c0ec:	4b1e      	ldr	r3, [pc, #120]	; (800c168 <USART1_IRQHandler+0xf4>)
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	4b1c      	ldr	r3, [pc, #112]	; (800c168 <USART1_IRQHandler+0xf4>)
 800c0f6:	701a      	strb	r2, [r3, #0]
}
 800c0f8:	e02c      	b.n	800c154 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800c0fa:	4b1d      	ldr	r3, [pc, #116]	; (800c170 <USART1_IRQHandler+0xfc>)
 800c0fc:	781a      	ldrb	r2, [r3, #0]
 800c0fe:	4b1d      	ldr	r3, [pc, #116]	; (800c174 <USART1_IRQHandler+0x100>)
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	429a      	cmp	r2, r3
 800c104:	d215      	bcs.n	800c132 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800c106:	4b1a      	ldr	r3, [pc, #104]	; (800c170 <USART1_IRQHandler+0xfc>)
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	461a      	mov	r2, r3
 800c10c:	2364      	movs	r3, #100	; 0x64
 800c10e:	fb02 f303 	mul.w	r3, r2, r3
 800c112:	4a19      	ldr	r2, [pc, #100]	; (800c178 <USART1_IRQHandler+0x104>)
 800c114:	4413      	add	r3, r2
 800c116:	4619      	mov	r1, r3
 800c118:	4814      	ldr	r0, [pc, #80]	; (800c16c <USART1_IRQHandler+0xf8>)
 800c11a:	f000 ffff 	bl	800d11c <siprintf>
					posChar = 0;
 800c11e:	4b12      	ldr	r3, [pc, #72]	; (800c168 <USART1_IRQHandler+0xf4>)
 800c120:	2200      	movs	r2, #0
 800c122:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 800c124:	4b12      	ldr	r3, [pc, #72]	; (800c170 <USART1_IRQHandler+0xfc>)
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	3301      	adds	r3, #1
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	4b10      	ldr	r3, [pc, #64]	; (800c170 <USART1_IRQHandler+0xfc>)
 800c12e:	701a      	strb	r2, [r3, #0]
}
 800c130:	e010      	b.n	800c154 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 800c132:	4b09      	ldr	r3, [pc, #36]	; (800c158 <USART1_IRQHandler+0xe4>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2100      	movs	r1, #0
 800c138:	4618      	mov	r0, r3
 800c13a:	f7ff ff69 	bl	800c010 <interruptionTX>
					posChar = 0;
 800c13e:	4b0a      	ldr	r3, [pc, #40]	; (800c168 <USART1_IRQHandler+0xf4>)
 800c140:	2200      	movs	r2, #0
 800c142:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800c144:	4b0a      	ldr	r3, [pc, #40]	; (800c170 <USART1_IRQHandler+0xfc>)
 800c146:	2200      	movs	r2, #0
 800c148:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800c14a:	4b0a      	ldr	r3, [pc, #40]	; (800c174 <USART1_IRQHandler+0x100>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	701a      	strb	r2, [r3, #0]
}
 800c150:	e000      	b.n	800c154 <USART1_IRQHandler+0xe0>
		__NOP();
 800c152:	bf00      	nop
}
 800c154:	bf00      	nop
 800c156:	bd80      	pop	{r7, pc}
 800c158:	2001bca8 	.word	0x2001bca8
 800c15c:	2001bcb4 	.word	0x2001bcb4
 800c160:	2001c4ef 	.word	0x2001c4ef
 800c164:	2001bcb5 	.word	0x2001bcb5
 800c168:	2001c4ee 	.word	0x2001c4ee
 800c16c:	2001bcb8 	.word	0x2001bcb8
 800c170:	2001c4ed 	.word	0x2001c4ed
 800c174:	2001c4ec 	.word	0x2001c4ec
 800c178:	2001bd1c 	.word	0x2001bd1c

0800c17c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 800c180:	4b37      	ldr	r3, [pc, #220]	; (800c260 <USART2_IRQHandler+0xe4>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 0320 	and.w	r3, r3, #32
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d008      	beq.n	800c1a0 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 800c18e:	4b34      	ldr	r3, [pc, #208]	; (800c260 <USART2_IRQHandler+0xe4>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	b2da      	uxtb	r2, r3
 800c196:	4b33      	ldr	r3, [pc, #204]	; (800c264 <USART2_IRQHandler+0xe8>)
 800c198:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 800c19a:	f7f7 fc8b 	bl	8003ab4 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 800c19e:	e05d      	b.n	800c25c <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 800c1a0:	4b2f      	ldr	r3, [pc, #188]	; (800c260 <USART2_IRQHandler+0xe4>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d055      	beq.n	800c25a <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800c1ae:	4b2e      	ldr	r3, [pc, #184]	; (800c268 <USART2_IRQHandler+0xec>)
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d10b      	bne.n	800c1ce <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 800c1b6:	4b2d      	ldr	r3, [pc, #180]	; (800c26c <USART2_IRQHandler+0xf0>)
 800c1b8:	781a      	ldrb	r2, [r3, #0]
 800c1ba:	4b29      	ldr	r3, [pc, #164]	; (800c260 <USART2_IRQHandler+0xe4>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800c1c0:	4b27      	ldr	r3, [pc, #156]	; (800c260 <USART2_IRQHandler+0xe4>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2100      	movs	r1, #0
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7ff ff22 	bl	800c010 <interruptionTX>
}
 800c1cc:	e046      	b.n	800c25c <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800c1ce:	4b26      	ldr	r3, [pc, #152]	; (800c268 <USART2_IRQHandler+0xec>)
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d142      	bne.n	800c25c <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800c1d6:	4b26      	ldr	r3, [pc, #152]	; (800c270 <USART2_IRQHandler+0xf4>)
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	4b25      	ldr	r3, [pc, #148]	; (800c274 <USART2_IRQHandler+0xf8>)
 800c1de:	5c9b      	ldrb	r3, [r3, r2]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00e      	beq.n	800c202 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 800c1e4:	4b22      	ldr	r3, [pc, #136]	; (800c270 <USART2_IRQHandler+0xf4>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	4b22      	ldr	r3, [pc, #136]	; (800c274 <USART2_IRQHandler+0xf8>)
 800c1ec:	5c9a      	ldrb	r2, [r3, r2]
 800c1ee:	4b1c      	ldr	r3, [pc, #112]	; (800c260 <USART2_IRQHandler+0xe4>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	605a      	str	r2, [r3, #4]
				posChar++;
 800c1f4:	4b1e      	ldr	r3, [pc, #120]	; (800c270 <USART2_IRQHandler+0xf4>)
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	b2da      	uxtb	r2, r3
 800c1fc:	4b1c      	ldr	r3, [pc, #112]	; (800c270 <USART2_IRQHandler+0xf4>)
 800c1fe:	701a      	strb	r2, [r3, #0]
}
 800c200:	e02c      	b.n	800c25c <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800c202:	4b1d      	ldr	r3, [pc, #116]	; (800c278 <USART2_IRQHandler+0xfc>)
 800c204:	781a      	ldrb	r2, [r3, #0]
 800c206:	4b1d      	ldr	r3, [pc, #116]	; (800c27c <USART2_IRQHandler+0x100>)
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d215      	bcs.n	800c23a <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800c20e:	4b1a      	ldr	r3, [pc, #104]	; (800c278 <USART2_IRQHandler+0xfc>)
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	461a      	mov	r2, r3
 800c214:	2364      	movs	r3, #100	; 0x64
 800c216:	fb02 f303 	mul.w	r3, r2, r3
 800c21a:	4a19      	ldr	r2, [pc, #100]	; (800c280 <USART2_IRQHandler+0x104>)
 800c21c:	4413      	add	r3, r2
 800c21e:	4619      	mov	r1, r3
 800c220:	4814      	ldr	r0, [pc, #80]	; (800c274 <USART2_IRQHandler+0xf8>)
 800c222:	f000 ff7b 	bl	800d11c <siprintf>
					posChar = 0;
 800c226:	4b12      	ldr	r3, [pc, #72]	; (800c270 <USART2_IRQHandler+0xf4>)
 800c228:	2200      	movs	r2, #0
 800c22a:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 800c22c:	4b12      	ldr	r3, [pc, #72]	; (800c278 <USART2_IRQHandler+0xfc>)
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	3301      	adds	r3, #1
 800c232:	b2da      	uxtb	r2, r3
 800c234:	4b10      	ldr	r3, [pc, #64]	; (800c278 <USART2_IRQHandler+0xfc>)
 800c236:	701a      	strb	r2, [r3, #0]
}
 800c238:	e010      	b.n	800c25c <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800c23a:	4b09      	ldr	r3, [pc, #36]	; (800c260 <USART2_IRQHandler+0xe4>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2100      	movs	r1, #0
 800c240:	4618      	mov	r0, r3
 800c242:	f7ff fee5 	bl	800c010 <interruptionTX>
					posChar = 0;
 800c246:	4b0a      	ldr	r3, [pc, #40]	; (800c270 <USART2_IRQHandler+0xf4>)
 800c248:	2200      	movs	r2, #0
 800c24a:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800c24c:	4b0a      	ldr	r3, [pc, #40]	; (800c278 <USART2_IRQHandler+0xfc>)
 800c24e:	2200      	movs	r2, #0
 800c250:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800c252:	4b0a      	ldr	r3, [pc, #40]	; (800c27c <USART2_IRQHandler+0x100>)
 800c254:	2200      	movs	r2, #0
 800c256:	701a      	strb	r2, [r3, #0]
}
 800c258:	e000      	b.n	800c25c <USART2_IRQHandler+0xe0>
		__NOP();
 800c25a:	bf00      	nop
}
 800c25c:	bf00      	nop
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	2001bcac 	.word	0x2001bcac
 800c264:	2001bcb4 	.word	0x2001bcb4
 800c268:	2001c4ef 	.word	0x2001c4ef
 800c26c:	2001bcb5 	.word	0x2001bcb5
 800c270:	2001c4ee 	.word	0x2001c4ee
 800c274:	2001bcb8 	.word	0x2001bcb8
 800c278:	2001c4ed 	.word	0x2001c4ed
 800c27c:	2001c4ec 	.word	0x2001c4ec
 800c280:	2001bd1c 	.word	0x2001bd1c

0800c284 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 800c288:	4b37      	ldr	r3, [pc, #220]	; (800c368 <USART6_IRQHandler+0xe4>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f003 0320 	and.w	r3, r3, #32
 800c292:	2b00      	cmp	r3, #0
 800c294:	d008      	beq.n	800c2a8 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 800c296:	4b34      	ldr	r3, [pc, #208]	; (800c368 <USART6_IRQHandler+0xe4>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	4b33      	ldr	r3, [pc, #204]	; (800c36c <USART6_IRQHandler+0xe8>)
 800c2a0:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 800c2a2:	f7ff fedf 	bl	800c064 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 800c2a6:	e05d      	b.n	800c364 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 800c2a8:	4b2f      	ldr	r3, [pc, #188]	; (800c368 <USART6_IRQHandler+0xe4>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d055      	beq.n	800c362 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800c2b6:	4b2e      	ldr	r3, [pc, #184]	; (800c370 <USART6_IRQHandler+0xec>)
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10b      	bne.n	800c2d6 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 800c2be:	4b2d      	ldr	r3, [pc, #180]	; (800c374 <USART6_IRQHandler+0xf0>)
 800c2c0:	781a      	ldrb	r2, [r3, #0]
 800c2c2:	4b29      	ldr	r3, [pc, #164]	; (800c368 <USART6_IRQHandler+0xe4>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800c2c8:	4b27      	ldr	r3, [pc, #156]	; (800c368 <USART6_IRQHandler+0xe4>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7ff fe9e 	bl	800c010 <interruptionTX>
}
 800c2d4:	e046      	b.n	800c364 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800c2d6:	4b26      	ldr	r3, [pc, #152]	; (800c370 <USART6_IRQHandler+0xec>)
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d142      	bne.n	800c364 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800c2de:	4b26      	ldr	r3, [pc, #152]	; (800c378 <USART6_IRQHandler+0xf4>)
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	4b25      	ldr	r3, [pc, #148]	; (800c37c <USART6_IRQHandler+0xf8>)
 800c2e6:	5c9b      	ldrb	r3, [r3, r2]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00e      	beq.n	800c30a <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 800c2ec:	4b22      	ldr	r3, [pc, #136]	; (800c378 <USART6_IRQHandler+0xf4>)
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	4b22      	ldr	r3, [pc, #136]	; (800c37c <USART6_IRQHandler+0xf8>)
 800c2f4:	5c9a      	ldrb	r2, [r3, r2]
 800c2f6:	4b1c      	ldr	r3, [pc, #112]	; (800c368 <USART6_IRQHandler+0xe4>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	605a      	str	r2, [r3, #4]
				posChar++;
 800c2fc:	4b1e      	ldr	r3, [pc, #120]	; (800c378 <USART6_IRQHandler+0xf4>)
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	3301      	adds	r3, #1
 800c302:	b2da      	uxtb	r2, r3
 800c304:	4b1c      	ldr	r3, [pc, #112]	; (800c378 <USART6_IRQHandler+0xf4>)
 800c306:	701a      	strb	r2, [r3, #0]
}
 800c308:	e02c      	b.n	800c364 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800c30a:	4b1d      	ldr	r3, [pc, #116]	; (800c380 <USART6_IRQHandler+0xfc>)
 800c30c:	781a      	ldrb	r2, [r3, #0]
 800c30e:	4b1d      	ldr	r3, [pc, #116]	; (800c384 <USART6_IRQHandler+0x100>)
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	429a      	cmp	r2, r3
 800c314:	d215      	bcs.n	800c342 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800c316:	4b1a      	ldr	r3, [pc, #104]	; (800c380 <USART6_IRQHandler+0xfc>)
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	461a      	mov	r2, r3
 800c31c:	2364      	movs	r3, #100	; 0x64
 800c31e:	fb02 f303 	mul.w	r3, r2, r3
 800c322:	4a19      	ldr	r2, [pc, #100]	; (800c388 <USART6_IRQHandler+0x104>)
 800c324:	4413      	add	r3, r2
 800c326:	4619      	mov	r1, r3
 800c328:	4814      	ldr	r0, [pc, #80]	; (800c37c <USART6_IRQHandler+0xf8>)
 800c32a:	f000 fef7 	bl	800d11c <siprintf>
					posChar = 0;
 800c32e:	4b12      	ldr	r3, [pc, #72]	; (800c378 <USART6_IRQHandler+0xf4>)
 800c330:	2200      	movs	r2, #0
 800c332:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 800c334:	4b12      	ldr	r3, [pc, #72]	; (800c380 <USART6_IRQHandler+0xfc>)
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	3301      	adds	r3, #1
 800c33a:	b2da      	uxtb	r2, r3
 800c33c:	4b10      	ldr	r3, [pc, #64]	; (800c380 <USART6_IRQHandler+0xfc>)
 800c33e:	701a      	strb	r2, [r3, #0]
}
 800c340:	e010      	b.n	800c364 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800c342:	4b09      	ldr	r3, [pc, #36]	; (800c368 <USART6_IRQHandler+0xe4>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2100      	movs	r1, #0
 800c348:	4618      	mov	r0, r3
 800c34a:	f7ff fe61 	bl	800c010 <interruptionTX>
					posChar = 0;
 800c34e:	4b0a      	ldr	r3, [pc, #40]	; (800c378 <USART6_IRQHandler+0xf4>)
 800c350:	2200      	movs	r2, #0
 800c352:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800c354:	4b0a      	ldr	r3, [pc, #40]	; (800c380 <USART6_IRQHandler+0xfc>)
 800c356:	2200      	movs	r2, #0
 800c358:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800c35a:	4b0a      	ldr	r3, [pc, #40]	; (800c384 <USART6_IRQHandler+0x100>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	701a      	strb	r2, [r3, #0]
}
 800c360:	e000      	b.n	800c364 <USART6_IRQHandler+0xe0>
		__NOP();
 800c362:	bf00      	nop
}
 800c364:	bf00      	nop
 800c366:	bd80      	pop	{r7, pc}
 800c368:	2001bcb0 	.word	0x2001bcb0
 800c36c:	2001bcb4 	.word	0x2001bcb4
 800c370:	2001c4ef 	.word	0x2001c4ef
 800c374:	2001bcb5 	.word	0x2001bcb5
 800c378:	2001c4ee 	.word	0x2001c4ee
 800c37c:	2001bcb8 	.word	0x2001bcb8
 800c380:	2001c4ed 	.word	0x2001c4ed
 800c384:	2001c4ec 	.word	0x2001c4ec
 800c388:	2001bd1c 	.word	0x2001bd1c

0800c38c <atof>:
 800c38c:	2100      	movs	r1, #0
 800c38e:	f001 bd7f 	b.w	800de90 <strtod>

0800c392 <atoi>:
 800c392:	220a      	movs	r2, #10
 800c394:	2100      	movs	r1, #0
 800c396:	f001 be0b 	b.w	800dfb0 <strtol>
	...

0800c39c <__errno>:
 800c39c:	4b01      	ldr	r3, [pc, #4]	; (800c3a4 <__errno+0x8>)
 800c39e:	6818      	ldr	r0, [r3, #0]
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	20000040 	.word	0x20000040

0800c3a8 <__libc_init_array>:
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	4d0d      	ldr	r5, [pc, #52]	; (800c3e0 <__libc_init_array+0x38>)
 800c3ac:	4c0d      	ldr	r4, [pc, #52]	; (800c3e4 <__libc_init_array+0x3c>)
 800c3ae:	1b64      	subs	r4, r4, r5
 800c3b0:	10a4      	asrs	r4, r4, #2
 800c3b2:	2600      	movs	r6, #0
 800c3b4:	42a6      	cmp	r6, r4
 800c3b6:	d109      	bne.n	800c3cc <__libc_init_array+0x24>
 800c3b8:	4d0b      	ldr	r5, [pc, #44]	; (800c3e8 <__libc_init_array+0x40>)
 800c3ba:	4c0c      	ldr	r4, [pc, #48]	; (800c3ec <__libc_init_array+0x44>)
 800c3bc:	f007 fda2 	bl	8013f04 <_init>
 800c3c0:	1b64      	subs	r4, r4, r5
 800c3c2:	10a4      	asrs	r4, r4, #2
 800c3c4:	2600      	movs	r6, #0
 800c3c6:	42a6      	cmp	r6, r4
 800c3c8:	d105      	bne.n	800c3d6 <__libc_init_array+0x2e>
 800c3ca:	bd70      	pop	{r4, r5, r6, pc}
 800c3cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3d0:	4798      	blx	r3
 800c3d2:	3601      	adds	r6, #1
 800c3d4:	e7ee      	b.n	800c3b4 <__libc_init_array+0xc>
 800c3d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3da:	4798      	blx	r3
 800c3dc:	3601      	adds	r6, #1
 800c3de:	e7f2      	b.n	800c3c6 <__libc_init_array+0x1e>
 800c3e0:	08014978 	.word	0x08014978
 800c3e4:	08014978 	.word	0x08014978
 800c3e8:	08014978 	.word	0x08014978
 800c3ec:	0801497c 	.word	0x0801497c

0800c3f0 <memcpy>:
 800c3f0:	440a      	add	r2, r1
 800c3f2:	4291      	cmp	r1, r2
 800c3f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3f8:	d100      	bne.n	800c3fc <memcpy+0xc>
 800c3fa:	4770      	bx	lr
 800c3fc:	b510      	push	{r4, lr}
 800c3fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c402:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c406:	4291      	cmp	r1, r2
 800c408:	d1f9      	bne.n	800c3fe <memcpy+0xe>
 800c40a:	bd10      	pop	{r4, pc}

0800c40c <memset>:
 800c40c:	4402      	add	r2, r0
 800c40e:	4603      	mov	r3, r0
 800c410:	4293      	cmp	r3, r2
 800c412:	d100      	bne.n	800c416 <memset+0xa>
 800c414:	4770      	bx	lr
 800c416:	f803 1b01 	strb.w	r1, [r3], #1
 800c41a:	e7f9      	b.n	800c410 <memset+0x4>

0800c41c <__cvt>:
 800c41c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c420:	ec55 4b10 	vmov	r4, r5, d0
 800c424:	2d00      	cmp	r5, #0
 800c426:	460e      	mov	r6, r1
 800c428:	4619      	mov	r1, r3
 800c42a:	462b      	mov	r3, r5
 800c42c:	bfbb      	ittet	lt
 800c42e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c432:	461d      	movlt	r5, r3
 800c434:	2300      	movge	r3, #0
 800c436:	232d      	movlt	r3, #45	; 0x2d
 800c438:	700b      	strb	r3, [r1, #0]
 800c43a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c43c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c440:	4691      	mov	r9, r2
 800c442:	f023 0820 	bic.w	r8, r3, #32
 800c446:	bfbc      	itt	lt
 800c448:	4622      	movlt	r2, r4
 800c44a:	4614      	movlt	r4, r2
 800c44c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c450:	d005      	beq.n	800c45e <__cvt+0x42>
 800c452:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c456:	d100      	bne.n	800c45a <__cvt+0x3e>
 800c458:	3601      	adds	r6, #1
 800c45a:	2102      	movs	r1, #2
 800c45c:	e000      	b.n	800c460 <__cvt+0x44>
 800c45e:	2103      	movs	r1, #3
 800c460:	ab03      	add	r3, sp, #12
 800c462:	9301      	str	r3, [sp, #4]
 800c464:	ab02      	add	r3, sp, #8
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	ec45 4b10 	vmov	d0, r4, r5
 800c46c:	4653      	mov	r3, sl
 800c46e:	4632      	mov	r2, r6
 800c470:	f001 fe56 	bl	800e120 <_dtoa_r>
 800c474:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c478:	4607      	mov	r7, r0
 800c47a:	d102      	bne.n	800c482 <__cvt+0x66>
 800c47c:	f019 0f01 	tst.w	r9, #1
 800c480:	d022      	beq.n	800c4c8 <__cvt+0xac>
 800c482:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c486:	eb07 0906 	add.w	r9, r7, r6
 800c48a:	d110      	bne.n	800c4ae <__cvt+0x92>
 800c48c:	783b      	ldrb	r3, [r7, #0]
 800c48e:	2b30      	cmp	r3, #48	; 0x30
 800c490:	d10a      	bne.n	800c4a8 <__cvt+0x8c>
 800c492:	2200      	movs	r2, #0
 800c494:	2300      	movs	r3, #0
 800c496:	4620      	mov	r0, r4
 800c498:	4629      	mov	r1, r5
 800c49a:	f7f4 fb2d 	bl	8000af8 <__aeabi_dcmpeq>
 800c49e:	b918      	cbnz	r0, 800c4a8 <__cvt+0x8c>
 800c4a0:	f1c6 0601 	rsb	r6, r6, #1
 800c4a4:	f8ca 6000 	str.w	r6, [sl]
 800c4a8:	f8da 3000 	ldr.w	r3, [sl]
 800c4ac:	4499      	add	r9, r3
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	4629      	mov	r1, r5
 800c4b6:	f7f4 fb1f 	bl	8000af8 <__aeabi_dcmpeq>
 800c4ba:	b108      	cbz	r0, 800c4c0 <__cvt+0xa4>
 800c4bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c4c0:	2230      	movs	r2, #48	; 0x30
 800c4c2:	9b03      	ldr	r3, [sp, #12]
 800c4c4:	454b      	cmp	r3, r9
 800c4c6:	d307      	bcc.n	800c4d8 <__cvt+0xbc>
 800c4c8:	9b03      	ldr	r3, [sp, #12]
 800c4ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4cc:	1bdb      	subs	r3, r3, r7
 800c4ce:	4638      	mov	r0, r7
 800c4d0:	6013      	str	r3, [r2, #0]
 800c4d2:	b004      	add	sp, #16
 800c4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4d8:	1c59      	adds	r1, r3, #1
 800c4da:	9103      	str	r1, [sp, #12]
 800c4dc:	701a      	strb	r2, [r3, #0]
 800c4de:	e7f0      	b.n	800c4c2 <__cvt+0xa6>

0800c4e0 <__exponent>:
 800c4e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2900      	cmp	r1, #0
 800c4e6:	bfb8      	it	lt
 800c4e8:	4249      	neglt	r1, r1
 800c4ea:	f803 2b02 	strb.w	r2, [r3], #2
 800c4ee:	bfb4      	ite	lt
 800c4f0:	222d      	movlt	r2, #45	; 0x2d
 800c4f2:	222b      	movge	r2, #43	; 0x2b
 800c4f4:	2909      	cmp	r1, #9
 800c4f6:	7042      	strb	r2, [r0, #1]
 800c4f8:	dd2a      	ble.n	800c550 <__exponent+0x70>
 800c4fa:	f10d 0407 	add.w	r4, sp, #7
 800c4fe:	46a4      	mov	ip, r4
 800c500:	270a      	movs	r7, #10
 800c502:	46a6      	mov	lr, r4
 800c504:	460a      	mov	r2, r1
 800c506:	fb91 f6f7 	sdiv	r6, r1, r7
 800c50a:	fb07 1516 	mls	r5, r7, r6, r1
 800c50e:	3530      	adds	r5, #48	; 0x30
 800c510:	2a63      	cmp	r2, #99	; 0x63
 800c512:	f104 34ff 	add.w	r4, r4, #4294967295
 800c516:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c51a:	4631      	mov	r1, r6
 800c51c:	dcf1      	bgt.n	800c502 <__exponent+0x22>
 800c51e:	3130      	adds	r1, #48	; 0x30
 800c520:	f1ae 0502 	sub.w	r5, lr, #2
 800c524:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c528:	1c44      	adds	r4, r0, #1
 800c52a:	4629      	mov	r1, r5
 800c52c:	4561      	cmp	r1, ip
 800c52e:	d30a      	bcc.n	800c546 <__exponent+0x66>
 800c530:	f10d 0209 	add.w	r2, sp, #9
 800c534:	eba2 020e 	sub.w	r2, r2, lr
 800c538:	4565      	cmp	r5, ip
 800c53a:	bf88      	it	hi
 800c53c:	2200      	movhi	r2, #0
 800c53e:	4413      	add	r3, r2
 800c540:	1a18      	subs	r0, r3, r0
 800c542:	b003      	add	sp, #12
 800c544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c54a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c54e:	e7ed      	b.n	800c52c <__exponent+0x4c>
 800c550:	2330      	movs	r3, #48	; 0x30
 800c552:	3130      	adds	r1, #48	; 0x30
 800c554:	7083      	strb	r3, [r0, #2]
 800c556:	70c1      	strb	r1, [r0, #3]
 800c558:	1d03      	adds	r3, r0, #4
 800c55a:	e7f1      	b.n	800c540 <__exponent+0x60>

0800c55c <_printf_float>:
 800c55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c560:	ed2d 8b02 	vpush	{d8}
 800c564:	b08d      	sub	sp, #52	; 0x34
 800c566:	460c      	mov	r4, r1
 800c568:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c56c:	4616      	mov	r6, r2
 800c56e:	461f      	mov	r7, r3
 800c570:	4605      	mov	r5, r0
 800c572:	f002 ff33 	bl	800f3dc <_localeconv_r>
 800c576:	f8d0 a000 	ldr.w	sl, [r0]
 800c57a:	4650      	mov	r0, sl
 800c57c:	f7f3 fe3a 	bl	80001f4 <strlen>
 800c580:	2300      	movs	r3, #0
 800c582:	930a      	str	r3, [sp, #40]	; 0x28
 800c584:	6823      	ldr	r3, [r4, #0]
 800c586:	9305      	str	r3, [sp, #20]
 800c588:	f8d8 3000 	ldr.w	r3, [r8]
 800c58c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c590:	3307      	adds	r3, #7
 800c592:	f023 0307 	bic.w	r3, r3, #7
 800c596:	f103 0208 	add.w	r2, r3, #8
 800c59a:	f8c8 2000 	str.w	r2, [r8]
 800c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c5a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c5aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c5ae:	9307      	str	r3, [sp, #28]
 800c5b0:	f8cd 8018 	str.w	r8, [sp, #24]
 800c5b4:	ee08 0a10 	vmov	s16, r0
 800c5b8:	4b9f      	ldr	r3, [pc, #636]	; (800c838 <_printf_float+0x2dc>)
 800c5ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5be:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c2:	f7f4 facb 	bl	8000b5c <__aeabi_dcmpun>
 800c5c6:	bb88      	cbnz	r0, 800c62c <_printf_float+0xd0>
 800c5c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5cc:	4b9a      	ldr	r3, [pc, #616]	; (800c838 <_printf_float+0x2dc>)
 800c5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c5d2:	f7f4 faa5 	bl	8000b20 <__aeabi_dcmple>
 800c5d6:	bb48      	cbnz	r0, 800c62c <_printf_float+0xd0>
 800c5d8:	2200      	movs	r2, #0
 800c5da:	2300      	movs	r3, #0
 800c5dc:	4640      	mov	r0, r8
 800c5de:	4649      	mov	r1, r9
 800c5e0:	f7f4 fa94 	bl	8000b0c <__aeabi_dcmplt>
 800c5e4:	b110      	cbz	r0, 800c5ec <_printf_float+0x90>
 800c5e6:	232d      	movs	r3, #45	; 0x2d
 800c5e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5ec:	4b93      	ldr	r3, [pc, #588]	; (800c83c <_printf_float+0x2e0>)
 800c5ee:	4894      	ldr	r0, [pc, #592]	; (800c840 <_printf_float+0x2e4>)
 800c5f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c5f4:	bf94      	ite	ls
 800c5f6:	4698      	movls	r8, r3
 800c5f8:	4680      	movhi	r8, r0
 800c5fa:	2303      	movs	r3, #3
 800c5fc:	6123      	str	r3, [r4, #16]
 800c5fe:	9b05      	ldr	r3, [sp, #20]
 800c600:	f023 0204 	bic.w	r2, r3, #4
 800c604:	6022      	str	r2, [r4, #0]
 800c606:	f04f 0900 	mov.w	r9, #0
 800c60a:	9700      	str	r7, [sp, #0]
 800c60c:	4633      	mov	r3, r6
 800c60e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c610:	4621      	mov	r1, r4
 800c612:	4628      	mov	r0, r5
 800c614:	f000 f9d8 	bl	800c9c8 <_printf_common>
 800c618:	3001      	adds	r0, #1
 800c61a:	f040 8090 	bne.w	800c73e <_printf_float+0x1e2>
 800c61e:	f04f 30ff 	mov.w	r0, #4294967295
 800c622:	b00d      	add	sp, #52	; 0x34
 800c624:	ecbd 8b02 	vpop	{d8}
 800c628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62c:	4642      	mov	r2, r8
 800c62e:	464b      	mov	r3, r9
 800c630:	4640      	mov	r0, r8
 800c632:	4649      	mov	r1, r9
 800c634:	f7f4 fa92 	bl	8000b5c <__aeabi_dcmpun>
 800c638:	b140      	cbz	r0, 800c64c <_printf_float+0xf0>
 800c63a:	464b      	mov	r3, r9
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	bfbc      	itt	lt
 800c640:	232d      	movlt	r3, #45	; 0x2d
 800c642:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c646:	487f      	ldr	r0, [pc, #508]	; (800c844 <_printf_float+0x2e8>)
 800c648:	4b7f      	ldr	r3, [pc, #508]	; (800c848 <_printf_float+0x2ec>)
 800c64a:	e7d1      	b.n	800c5f0 <_printf_float+0x94>
 800c64c:	6863      	ldr	r3, [r4, #4]
 800c64e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c652:	9206      	str	r2, [sp, #24]
 800c654:	1c5a      	adds	r2, r3, #1
 800c656:	d13f      	bne.n	800c6d8 <_printf_float+0x17c>
 800c658:	2306      	movs	r3, #6
 800c65a:	6063      	str	r3, [r4, #4]
 800c65c:	9b05      	ldr	r3, [sp, #20]
 800c65e:	6861      	ldr	r1, [r4, #4]
 800c660:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c664:	2300      	movs	r3, #0
 800c666:	9303      	str	r3, [sp, #12]
 800c668:	ab0a      	add	r3, sp, #40	; 0x28
 800c66a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c66e:	ab09      	add	r3, sp, #36	; 0x24
 800c670:	ec49 8b10 	vmov	d0, r8, r9
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	6022      	str	r2, [r4, #0]
 800c678:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c67c:	4628      	mov	r0, r5
 800c67e:	f7ff fecd 	bl	800c41c <__cvt>
 800c682:	9b06      	ldr	r3, [sp, #24]
 800c684:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c686:	2b47      	cmp	r3, #71	; 0x47
 800c688:	4680      	mov	r8, r0
 800c68a:	d108      	bne.n	800c69e <_printf_float+0x142>
 800c68c:	1cc8      	adds	r0, r1, #3
 800c68e:	db02      	blt.n	800c696 <_printf_float+0x13a>
 800c690:	6863      	ldr	r3, [r4, #4]
 800c692:	4299      	cmp	r1, r3
 800c694:	dd41      	ble.n	800c71a <_printf_float+0x1be>
 800c696:	f1ab 0b02 	sub.w	fp, fp, #2
 800c69a:	fa5f fb8b 	uxtb.w	fp, fp
 800c69e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c6a2:	d820      	bhi.n	800c6e6 <_printf_float+0x18a>
 800c6a4:	3901      	subs	r1, #1
 800c6a6:	465a      	mov	r2, fp
 800c6a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c6ac:	9109      	str	r1, [sp, #36]	; 0x24
 800c6ae:	f7ff ff17 	bl	800c4e0 <__exponent>
 800c6b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6b4:	1813      	adds	r3, r2, r0
 800c6b6:	2a01      	cmp	r2, #1
 800c6b8:	4681      	mov	r9, r0
 800c6ba:	6123      	str	r3, [r4, #16]
 800c6bc:	dc02      	bgt.n	800c6c4 <_printf_float+0x168>
 800c6be:	6822      	ldr	r2, [r4, #0]
 800c6c0:	07d2      	lsls	r2, r2, #31
 800c6c2:	d501      	bpl.n	800c6c8 <_printf_float+0x16c>
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	6123      	str	r3, [r4, #16]
 800c6c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d09c      	beq.n	800c60a <_printf_float+0xae>
 800c6d0:	232d      	movs	r3, #45	; 0x2d
 800c6d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6d6:	e798      	b.n	800c60a <_printf_float+0xae>
 800c6d8:	9a06      	ldr	r2, [sp, #24]
 800c6da:	2a47      	cmp	r2, #71	; 0x47
 800c6dc:	d1be      	bne.n	800c65c <_printf_float+0x100>
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1bc      	bne.n	800c65c <_printf_float+0x100>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e7b9      	b.n	800c65a <_printf_float+0xfe>
 800c6e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c6ea:	d118      	bne.n	800c71e <_printf_float+0x1c2>
 800c6ec:	2900      	cmp	r1, #0
 800c6ee:	6863      	ldr	r3, [r4, #4]
 800c6f0:	dd0b      	ble.n	800c70a <_printf_float+0x1ae>
 800c6f2:	6121      	str	r1, [r4, #16]
 800c6f4:	b913      	cbnz	r3, 800c6fc <_printf_float+0x1a0>
 800c6f6:	6822      	ldr	r2, [r4, #0]
 800c6f8:	07d0      	lsls	r0, r2, #31
 800c6fa:	d502      	bpl.n	800c702 <_printf_float+0x1a6>
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	440b      	add	r3, r1
 800c700:	6123      	str	r3, [r4, #16]
 800c702:	65a1      	str	r1, [r4, #88]	; 0x58
 800c704:	f04f 0900 	mov.w	r9, #0
 800c708:	e7de      	b.n	800c6c8 <_printf_float+0x16c>
 800c70a:	b913      	cbnz	r3, 800c712 <_printf_float+0x1b6>
 800c70c:	6822      	ldr	r2, [r4, #0]
 800c70e:	07d2      	lsls	r2, r2, #31
 800c710:	d501      	bpl.n	800c716 <_printf_float+0x1ba>
 800c712:	3302      	adds	r3, #2
 800c714:	e7f4      	b.n	800c700 <_printf_float+0x1a4>
 800c716:	2301      	movs	r3, #1
 800c718:	e7f2      	b.n	800c700 <_printf_float+0x1a4>
 800c71a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c71e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c720:	4299      	cmp	r1, r3
 800c722:	db05      	blt.n	800c730 <_printf_float+0x1d4>
 800c724:	6823      	ldr	r3, [r4, #0]
 800c726:	6121      	str	r1, [r4, #16]
 800c728:	07d8      	lsls	r0, r3, #31
 800c72a:	d5ea      	bpl.n	800c702 <_printf_float+0x1a6>
 800c72c:	1c4b      	adds	r3, r1, #1
 800c72e:	e7e7      	b.n	800c700 <_printf_float+0x1a4>
 800c730:	2900      	cmp	r1, #0
 800c732:	bfd4      	ite	le
 800c734:	f1c1 0202 	rsble	r2, r1, #2
 800c738:	2201      	movgt	r2, #1
 800c73a:	4413      	add	r3, r2
 800c73c:	e7e0      	b.n	800c700 <_printf_float+0x1a4>
 800c73e:	6823      	ldr	r3, [r4, #0]
 800c740:	055a      	lsls	r2, r3, #21
 800c742:	d407      	bmi.n	800c754 <_printf_float+0x1f8>
 800c744:	6923      	ldr	r3, [r4, #16]
 800c746:	4642      	mov	r2, r8
 800c748:	4631      	mov	r1, r6
 800c74a:	4628      	mov	r0, r5
 800c74c:	47b8      	blx	r7
 800c74e:	3001      	adds	r0, #1
 800c750:	d12c      	bne.n	800c7ac <_printf_float+0x250>
 800c752:	e764      	b.n	800c61e <_printf_float+0xc2>
 800c754:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c758:	f240 80e0 	bls.w	800c91c <_printf_float+0x3c0>
 800c75c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c760:	2200      	movs	r2, #0
 800c762:	2300      	movs	r3, #0
 800c764:	f7f4 f9c8 	bl	8000af8 <__aeabi_dcmpeq>
 800c768:	2800      	cmp	r0, #0
 800c76a:	d034      	beq.n	800c7d6 <_printf_float+0x27a>
 800c76c:	4a37      	ldr	r2, [pc, #220]	; (800c84c <_printf_float+0x2f0>)
 800c76e:	2301      	movs	r3, #1
 800c770:	4631      	mov	r1, r6
 800c772:	4628      	mov	r0, r5
 800c774:	47b8      	blx	r7
 800c776:	3001      	adds	r0, #1
 800c778:	f43f af51 	beq.w	800c61e <_printf_float+0xc2>
 800c77c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c780:	429a      	cmp	r2, r3
 800c782:	db02      	blt.n	800c78a <_printf_float+0x22e>
 800c784:	6823      	ldr	r3, [r4, #0]
 800c786:	07d8      	lsls	r0, r3, #31
 800c788:	d510      	bpl.n	800c7ac <_printf_float+0x250>
 800c78a:	ee18 3a10 	vmov	r3, s16
 800c78e:	4652      	mov	r2, sl
 800c790:	4631      	mov	r1, r6
 800c792:	4628      	mov	r0, r5
 800c794:	47b8      	blx	r7
 800c796:	3001      	adds	r0, #1
 800c798:	f43f af41 	beq.w	800c61e <_printf_float+0xc2>
 800c79c:	f04f 0800 	mov.w	r8, #0
 800c7a0:	f104 091a 	add.w	r9, r4, #26
 800c7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	4543      	cmp	r3, r8
 800c7aa:	dc09      	bgt.n	800c7c0 <_printf_float+0x264>
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	079b      	lsls	r3, r3, #30
 800c7b0:	f100 8105 	bmi.w	800c9be <_printf_float+0x462>
 800c7b4:	68e0      	ldr	r0, [r4, #12]
 800c7b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7b8:	4298      	cmp	r0, r3
 800c7ba:	bfb8      	it	lt
 800c7bc:	4618      	movlt	r0, r3
 800c7be:	e730      	b.n	800c622 <_printf_float+0xc6>
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	464a      	mov	r2, r9
 800c7c4:	4631      	mov	r1, r6
 800c7c6:	4628      	mov	r0, r5
 800c7c8:	47b8      	blx	r7
 800c7ca:	3001      	adds	r0, #1
 800c7cc:	f43f af27 	beq.w	800c61e <_printf_float+0xc2>
 800c7d0:	f108 0801 	add.w	r8, r8, #1
 800c7d4:	e7e6      	b.n	800c7a4 <_printf_float+0x248>
 800c7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	dc39      	bgt.n	800c850 <_printf_float+0x2f4>
 800c7dc:	4a1b      	ldr	r2, [pc, #108]	; (800c84c <_printf_float+0x2f0>)
 800c7de:	2301      	movs	r3, #1
 800c7e0:	4631      	mov	r1, r6
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	47b8      	blx	r7
 800c7e6:	3001      	adds	r0, #1
 800c7e8:	f43f af19 	beq.w	800c61e <_printf_float+0xc2>
 800c7ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	d102      	bne.n	800c7fa <_printf_float+0x29e>
 800c7f4:	6823      	ldr	r3, [r4, #0]
 800c7f6:	07d9      	lsls	r1, r3, #31
 800c7f8:	d5d8      	bpl.n	800c7ac <_printf_float+0x250>
 800c7fa:	ee18 3a10 	vmov	r3, s16
 800c7fe:	4652      	mov	r2, sl
 800c800:	4631      	mov	r1, r6
 800c802:	4628      	mov	r0, r5
 800c804:	47b8      	blx	r7
 800c806:	3001      	adds	r0, #1
 800c808:	f43f af09 	beq.w	800c61e <_printf_float+0xc2>
 800c80c:	f04f 0900 	mov.w	r9, #0
 800c810:	f104 0a1a 	add.w	sl, r4, #26
 800c814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c816:	425b      	negs	r3, r3
 800c818:	454b      	cmp	r3, r9
 800c81a:	dc01      	bgt.n	800c820 <_printf_float+0x2c4>
 800c81c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c81e:	e792      	b.n	800c746 <_printf_float+0x1ea>
 800c820:	2301      	movs	r3, #1
 800c822:	4652      	mov	r2, sl
 800c824:	4631      	mov	r1, r6
 800c826:	4628      	mov	r0, r5
 800c828:	47b8      	blx	r7
 800c82a:	3001      	adds	r0, #1
 800c82c:	f43f aef7 	beq.w	800c61e <_printf_float+0xc2>
 800c830:	f109 0901 	add.w	r9, r9, #1
 800c834:	e7ee      	b.n	800c814 <_printf_float+0x2b8>
 800c836:	bf00      	nop
 800c838:	7fefffff 	.word	0x7fefffff
 800c83c:	0801423c 	.word	0x0801423c
 800c840:	08014240 	.word	0x08014240
 800c844:	08014248 	.word	0x08014248
 800c848:	08014244 	.word	0x08014244
 800c84c:	08014641 	.word	0x08014641
 800c850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c852:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c854:	429a      	cmp	r2, r3
 800c856:	bfa8      	it	ge
 800c858:	461a      	movge	r2, r3
 800c85a:	2a00      	cmp	r2, #0
 800c85c:	4691      	mov	r9, r2
 800c85e:	dc37      	bgt.n	800c8d0 <_printf_float+0x374>
 800c860:	f04f 0b00 	mov.w	fp, #0
 800c864:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c868:	f104 021a 	add.w	r2, r4, #26
 800c86c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c86e:	9305      	str	r3, [sp, #20]
 800c870:	eba3 0309 	sub.w	r3, r3, r9
 800c874:	455b      	cmp	r3, fp
 800c876:	dc33      	bgt.n	800c8e0 <_printf_float+0x384>
 800c878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c87c:	429a      	cmp	r2, r3
 800c87e:	db3b      	blt.n	800c8f8 <_printf_float+0x39c>
 800c880:	6823      	ldr	r3, [r4, #0]
 800c882:	07da      	lsls	r2, r3, #31
 800c884:	d438      	bmi.n	800c8f8 <_printf_float+0x39c>
 800c886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c888:	9a05      	ldr	r2, [sp, #20]
 800c88a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c88c:	1a9a      	subs	r2, r3, r2
 800c88e:	eba3 0901 	sub.w	r9, r3, r1
 800c892:	4591      	cmp	r9, r2
 800c894:	bfa8      	it	ge
 800c896:	4691      	movge	r9, r2
 800c898:	f1b9 0f00 	cmp.w	r9, #0
 800c89c:	dc35      	bgt.n	800c90a <_printf_float+0x3ae>
 800c89e:	f04f 0800 	mov.w	r8, #0
 800c8a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8a6:	f104 0a1a 	add.w	sl, r4, #26
 800c8aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8ae:	1a9b      	subs	r3, r3, r2
 800c8b0:	eba3 0309 	sub.w	r3, r3, r9
 800c8b4:	4543      	cmp	r3, r8
 800c8b6:	f77f af79 	ble.w	800c7ac <_printf_float+0x250>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	4652      	mov	r2, sl
 800c8be:	4631      	mov	r1, r6
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	47b8      	blx	r7
 800c8c4:	3001      	adds	r0, #1
 800c8c6:	f43f aeaa 	beq.w	800c61e <_printf_float+0xc2>
 800c8ca:	f108 0801 	add.w	r8, r8, #1
 800c8ce:	e7ec      	b.n	800c8aa <_printf_float+0x34e>
 800c8d0:	4613      	mov	r3, r2
 800c8d2:	4631      	mov	r1, r6
 800c8d4:	4642      	mov	r2, r8
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	47b8      	blx	r7
 800c8da:	3001      	adds	r0, #1
 800c8dc:	d1c0      	bne.n	800c860 <_printf_float+0x304>
 800c8de:	e69e      	b.n	800c61e <_printf_float+0xc2>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	4631      	mov	r1, r6
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	9205      	str	r2, [sp, #20]
 800c8e8:	47b8      	blx	r7
 800c8ea:	3001      	adds	r0, #1
 800c8ec:	f43f ae97 	beq.w	800c61e <_printf_float+0xc2>
 800c8f0:	9a05      	ldr	r2, [sp, #20]
 800c8f2:	f10b 0b01 	add.w	fp, fp, #1
 800c8f6:	e7b9      	b.n	800c86c <_printf_float+0x310>
 800c8f8:	ee18 3a10 	vmov	r3, s16
 800c8fc:	4652      	mov	r2, sl
 800c8fe:	4631      	mov	r1, r6
 800c900:	4628      	mov	r0, r5
 800c902:	47b8      	blx	r7
 800c904:	3001      	adds	r0, #1
 800c906:	d1be      	bne.n	800c886 <_printf_float+0x32a>
 800c908:	e689      	b.n	800c61e <_printf_float+0xc2>
 800c90a:	9a05      	ldr	r2, [sp, #20]
 800c90c:	464b      	mov	r3, r9
 800c90e:	4442      	add	r2, r8
 800c910:	4631      	mov	r1, r6
 800c912:	4628      	mov	r0, r5
 800c914:	47b8      	blx	r7
 800c916:	3001      	adds	r0, #1
 800c918:	d1c1      	bne.n	800c89e <_printf_float+0x342>
 800c91a:	e680      	b.n	800c61e <_printf_float+0xc2>
 800c91c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c91e:	2a01      	cmp	r2, #1
 800c920:	dc01      	bgt.n	800c926 <_printf_float+0x3ca>
 800c922:	07db      	lsls	r3, r3, #31
 800c924:	d538      	bpl.n	800c998 <_printf_float+0x43c>
 800c926:	2301      	movs	r3, #1
 800c928:	4642      	mov	r2, r8
 800c92a:	4631      	mov	r1, r6
 800c92c:	4628      	mov	r0, r5
 800c92e:	47b8      	blx	r7
 800c930:	3001      	adds	r0, #1
 800c932:	f43f ae74 	beq.w	800c61e <_printf_float+0xc2>
 800c936:	ee18 3a10 	vmov	r3, s16
 800c93a:	4652      	mov	r2, sl
 800c93c:	4631      	mov	r1, r6
 800c93e:	4628      	mov	r0, r5
 800c940:	47b8      	blx	r7
 800c942:	3001      	adds	r0, #1
 800c944:	f43f ae6b 	beq.w	800c61e <_printf_float+0xc2>
 800c948:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c94c:	2200      	movs	r2, #0
 800c94e:	2300      	movs	r3, #0
 800c950:	f7f4 f8d2 	bl	8000af8 <__aeabi_dcmpeq>
 800c954:	b9d8      	cbnz	r0, 800c98e <_printf_float+0x432>
 800c956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c958:	f108 0201 	add.w	r2, r8, #1
 800c95c:	3b01      	subs	r3, #1
 800c95e:	4631      	mov	r1, r6
 800c960:	4628      	mov	r0, r5
 800c962:	47b8      	blx	r7
 800c964:	3001      	adds	r0, #1
 800c966:	d10e      	bne.n	800c986 <_printf_float+0x42a>
 800c968:	e659      	b.n	800c61e <_printf_float+0xc2>
 800c96a:	2301      	movs	r3, #1
 800c96c:	4652      	mov	r2, sl
 800c96e:	4631      	mov	r1, r6
 800c970:	4628      	mov	r0, r5
 800c972:	47b8      	blx	r7
 800c974:	3001      	adds	r0, #1
 800c976:	f43f ae52 	beq.w	800c61e <_printf_float+0xc2>
 800c97a:	f108 0801 	add.w	r8, r8, #1
 800c97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c980:	3b01      	subs	r3, #1
 800c982:	4543      	cmp	r3, r8
 800c984:	dcf1      	bgt.n	800c96a <_printf_float+0x40e>
 800c986:	464b      	mov	r3, r9
 800c988:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c98c:	e6dc      	b.n	800c748 <_printf_float+0x1ec>
 800c98e:	f04f 0800 	mov.w	r8, #0
 800c992:	f104 0a1a 	add.w	sl, r4, #26
 800c996:	e7f2      	b.n	800c97e <_printf_float+0x422>
 800c998:	2301      	movs	r3, #1
 800c99a:	4642      	mov	r2, r8
 800c99c:	e7df      	b.n	800c95e <_printf_float+0x402>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	464a      	mov	r2, r9
 800c9a2:	4631      	mov	r1, r6
 800c9a4:	4628      	mov	r0, r5
 800c9a6:	47b8      	blx	r7
 800c9a8:	3001      	adds	r0, #1
 800c9aa:	f43f ae38 	beq.w	800c61e <_printf_float+0xc2>
 800c9ae:	f108 0801 	add.w	r8, r8, #1
 800c9b2:	68e3      	ldr	r3, [r4, #12]
 800c9b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c9b6:	1a5b      	subs	r3, r3, r1
 800c9b8:	4543      	cmp	r3, r8
 800c9ba:	dcf0      	bgt.n	800c99e <_printf_float+0x442>
 800c9bc:	e6fa      	b.n	800c7b4 <_printf_float+0x258>
 800c9be:	f04f 0800 	mov.w	r8, #0
 800c9c2:	f104 0919 	add.w	r9, r4, #25
 800c9c6:	e7f4      	b.n	800c9b2 <_printf_float+0x456>

0800c9c8 <_printf_common>:
 800c9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9cc:	4616      	mov	r6, r2
 800c9ce:	4699      	mov	r9, r3
 800c9d0:	688a      	ldr	r2, [r1, #8]
 800c9d2:	690b      	ldr	r3, [r1, #16]
 800c9d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	bfb8      	it	lt
 800c9dc:	4613      	movlt	r3, r2
 800c9de:	6033      	str	r3, [r6, #0]
 800c9e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9e4:	4607      	mov	r7, r0
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	b10a      	cbz	r2, 800c9ee <_printf_common+0x26>
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	6033      	str	r3, [r6, #0]
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	0699      	lsls	r1, r3, #26
 800c9f2:	bf42      	ittt	mi
 800c9f4:	6833      	ldrmi	r3, [r6, #0]
 800c9f6:	3302      	addmi	r3, #2
 800c9f8:	6033      	strmi	r3, [r6, #0]
 800c9fa:	6825      	ldr	r5, [r4, #0]
 800c9fc:	f015 0506 	ands.w	r5, r5, #6
 800ca00:	d106      	bne.n	800ca10 <_printf_common+0x48>
 800ca02:	f104 0a19 	add.w	sl, r4, #25
 800ca06:	68e3      	ldr	r3, [r4, #12]
 800ca08:	6832      	ldr	r2, [r6, #0]
 800ca0a:	1a9b      	subs	r3, r3, r2
 800ca0c:	42ab      	cmp	r3, r5
 800ca0e:	dc26      	bgt.n	800ca5e <_printf_common+0x96>
 800ca10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca14:	1e13      	subs	r3, r2, #0
 800ca16:	6822      	ldr	r2, [r4, #0]
 800ca18:	bf18      	it	ne
 800ca1a:	2301      	movne	r3, #1
 800ca1c:	0692      	lsls	r2, r2, #26
 800ca1e:	d42b      	bmi.n	800ca78 <_printf_common+0xb0>
 800ca20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca24:	4649      	mov	r1, r9
 800ca26:	4638      	mov	r0, r7
 800ca28:	47c0      	blx	r8
 800ca2a:	3001      	adds	r0, #1
 800ca2c:	d01e      	beq.n	800ca6c <_printf_common+0xa4>
 800ca2e:	6823      	ldr	r3, [r4, #0]
 800ca30:	68e5      	ldr	r5, [r4, #12]
 800ca32:	6832      	ldr	r2, [r6, #0]
 800ca34:	f003 0306 	and.w	r3, r3, #6
 800ca38:	2b04      	cmp	r3, #4
 800ca3a:	bf08      	it	eq
 800ca3c:	1aad      	subeq	r5, r5, r2
 800ca3e:	68a3      	ldr	r3, [r4, #8]
 800ca40:	6922      	ldr	r2, [r4, #16]
 800ca42:	bf0c      	ite	eq
 800ca44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca48:	2500      	movne	r5, #0
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	bfc4      	itt	gt
 800ca4e:	1a9b      	subgt	r3, r3, r2
 800ca50:	18ed      	addgt	r5, r5, r3
 800ca52:	2600      	movs	r6, #0
 800ca54:	341a      	adds	r4, #26
 800ca56:	42b5      	cmp	r5, r6
 800ca58:	d11a      	bne.n	800ca90 <_printf_common+0xc8>
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	e008      	b.n	800ca70 <_printf_common+0xa8>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	4652      	mov	r2, sl
 800ca62:	4649      	mov	r1, r9
 800ca64:	4638      	mov	r0, r7
 800ca66:	47c0      	blx	r8
 800ca68:	3001      	adds	r0, #1
 800ca6a:	d103      	bne.n	800ca74 <_printf_common+0xac>
 800ca6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca74:	3501      	adds	r5, #1
 800ca76:	e7c6      	b.n	800ca06 <_printf_common+0x3e>
 800ca78:	18e1      	adds	r1, r4, r3
 800ca7a:	1c5a      	adds	r2, r3, #1
 800ca7c:	2030      	movs	r0, #48	; 0x30
 800ca7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca82:	4422      	add	r2, r4
 800ca84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca8c:	3302      	adds	r3, #2
 800ca8e:	e7c7      	b.n	800ca20 <_printf_common+0x58>
 800ca90:	2301      	movs	r3, #1
 800ca92:	4622      	mov	r2, r4
 800ca94:	4649      	mov	r1, r9
 800ca96:	4638      	mov	r0, r7
 800ca98:	47c0      	blx	r8
 800ca9a:	3001      	adds	r0, #1
 800ca9c:	d0e6      	beq.n	800ca6c <_printf_common+0xa4>
 800ca9e:	3601      	adds	r6, #1
 800caa0:	e7d9      	b.n	800ca56 <_printf_common+0x8e>
	...

0800caa4 <_printf_i>:
 800caa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caa8:	7e0f      	ldrb	r7, [r1, #24]
 800caaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800caac:	2f78      	cmp	r7, #120	; 0x78
 800caae:	4691      	mov	r9, r2
 800cab0:	4680      	mov	r8, r0
 800cab2:	460c      	mov	r4, r1
 800cab4:	469a      	mov	sl, r3
 800cab6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800caba:	d807      	bhi.n	800cacc <_printf_i+0x28>
 800cabc:	2f62      	cmp	r7, #98	; 0x62
 800cabe:	d80a      	bhi.n	800cad6 <_printf_i+0x32>
 800cac0:	2f00      	cmp	r7, #0
 800cac2:	f000 80d8 	beq.w	800cc76 <_printf_i+0x1d2>
 800cac6:	2f58      	cmp	r7, #88	; 0x58
 800cac8:	f000 80a3 	beq.w	800cc12 <_printf_i+0x16e>
 800cacc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cad0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cad4:	e03a      	b.n	800cb4c <_printf_i+0xa8>
 800cad6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cada:	2b15      	cmp	r3, #21
 800cadc:	d8f6      	bhi.n	800cacc <_printf_i+0x28>
 800cade:	a101      	add	r1, pc, #4	; (adr r1, 800cae4 <_printf_i+0x40>)
 800cae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cae4:	0800cb3d 	.word	0x0800cb3d
 800cae8:	0800cb51 	.word	0x0800cb51
 800caec:	0800cacd 	.word	0x0800cacd
 800caf0:	0800cacd 	.word	0x0800cacd
 800caf4:	0800cacd 	.word	0x0800cacd
 800caf8:	0800cacd 	.word	0x0800cacd
 800cafc:	0800cb51 	.word	0x0800cb51
 800cb00:	0800cacd 	.word	0x0800cacd
 800cb04:	0800cacd 	.word	0x0800cacd
 800cb08:	0800cacd 	.word	0x0800cacd
 800cb0c:	0800cacd 	.word	0x0800cacd
 800cb10:	0800cc5d 	.word	0x0800cc5d
 800cb14:	0800cb81 	.word	0x0800cb81
 800cb18:	0800cc3f 	.word	0x0800cc3f
 800cb1c:	0800cacd 	.word	0x0800cacd
 800cb20:	0800cacd 	.word	0x0800cacd
 800cb24:	0800cc7f 	.word	0x0800cc7f
 800cb28:	0800cacd 	.word	0x0800cacd
 800cb2c:	0800cb81 	.word	0x0800cb81
 800cb30:	0800cacd 	.word	0x0800cacd
 800cb34:	0800cacd 	.word	0x0800cacd
 800cb38:	0800cc47 	.word	0x0800cc47
 800cb3c:	682b      	ldr	r3, [r5, #0]
 800cb3e:	1d1a      	adds	r2, r3, #4
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	602a      	str	r2, [r5, #0]
 800cb44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	e0a3      	b.n	800cc98 <_printf_i+0x1f4>
 800cb50:	6820      	ldr	r0, [r4, #0]
 800cb52:	6829      	ldr	r1, [r5, #0]
 800cb54:	0606      	lsls	r6, r0, #24
 800cb56:	f101 0304 	add.w	r3, r1, #4
 800cb5a:	d50a      	bpl.n	800cb72 <_printf_i+0xce>
 800cb5c:	680e      	ldr	r6, [r1, #0]
 800cb5e:	602b      	str	r3, [r5, #0]
 800cb60:	2e00      	cmp	r6, #0
 800cb62:	da03      	bge.n	800cb6c <_printf_i+0xc8>
 800cb64:	232d      	movs	r3, #45	; 0x2d
 800cb66:	4276      	negs	r6, r6
 800cb68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb6c:	485e      	ldr	r0, [pc, #376]	; (800cce8 <_printf_i+0x244>)
 800cb6e:	230a      	movs	r3, #10
 800cb70:	e019      	b.n	800cba6 <_printf_i+0x102>
 800cb72:	680e      	ldr	r6, [r1, #0]
 800cb74:	602b      	str	r3, [r5, #0]
 800cb76:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb7a:	bf18      	it	ne
 800cb7c:	b236      	sxthne	r6, r6
 800cb7e:	e7ef      	b.n	800cb60 <_printf_i+0xbc>
 800cb80:	682b      	ldr	r3, [r5, #0]
 800cb82:	6820      	ldr	r0, [r4, #0]
 800cb84:	1d19      	adds	r1, r3, #4
 800cb86:	6029      	str	r1, [r5, #0]
 800cb88:	0601      	lsls	r1, r0, #24
 800cb8a:	d501      	bpl.n	800cb90 <_printf_i+0xec>
 800cb8c:	681e      	ldr	r6, [r3, #0]
 800cb8e:	e002      	b.n	800cb96 <_printf_i+0xf2>
 800cb90:	0646      	lsls	r6, r0, #25
 800cb92:	d5fb      	bpl.n	800cb8c <_printf_i+0xe8>
 800cb94:	881e      	ldrh	r6, [r3, #0]
 800cb96:	4854      	ldr	r0, [pc, #336]	; (800cce8 <_printf_i+0x244>)
 800cb98:	2f6f      	cmp	r7, #111	; 0x6f
 800cb9a:	bf0c      	ite	eq
 800cb9c:	2308      	moveq	r3, #8
 800cb9e:	230a      	movne	r3, #10
 800cba0:	2100      	movs	r1, #0
 800cba2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cba6:	6865      	ldr	r5, [r4, #4]
 800cba8:	60a5      	str	r5, [r4, #8]
 800cbaa:	2d00      	cmp	r5, #0
 800cbac:	bfa2      	ittt	ge
 800cbae:	6821      	ldrge	r1, [r4, #0]
 800cbb0:	f021 0104 	bicge.w	r1, r1, #4
 800cbb4:	6021      	strge	r1, [r4, #0]
 800cbb6:	b90e      	cbnz	r6, 800cbbc <_printf_i+0x118>
 800cbb8:	2d00      	cmp	r5, #0
 800cbba:	d04d      	beq.n	800cc58 <_printf_i+0x1b4>
 800cbbc:	4615      	mov	r5, r2
 800cbbe:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbc2:	fb03 6711 	mls	r7, r3, r1, r6
 800cbc6:	5dc7      	ldrb	r7, [r0, r7]
 800cbc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbcc:	4637      	mov	r7, r6
 800cbce:	42bb      	cmp	r3, r7
 800cbd0:	460e      	mov	r6, r1
 800cbd2:	d9f4      	bls.n	800cbbe <_printf_i+0x11a>
 800cbd4:	2b08      	cmp	r3, #8
 800cbd6:	d10b      	bne.n	800cbf0 <_printf_i+0x14c>
 800cbd8:	6823      	ldr	r3, [r4, #0]
 800cbda:	07de      	lsls	r6, r3, #31
 800cbdc:	d508      	bpl.n	800cbf0 <_printf_i+0x14c>
 800cbde:	6923      	ldr	r3, [r4, #16]
 800cbe0:	6861      	ldr	r1, [r4, #4]
 800cbe2:	4299      	cmp	r1, r3
 800cbe4:	bfde      	ittt	le
 800cbe6:	2330      	movle	r3, #48	; 0x30
 800cbe8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbf0:	1b52      	subs	r2, r2, r5
 800cbf2:	6122      	str	r2, [r4, #16]
 800cbf4:	f8cd a000 	str.w	sl, [sp]
 800cbf8:	464b      	mov	r3, r9
 800cbfa:	aa03      	add	r2, sp, #12
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	4640      	mov	r0, r8
 800cc00:	f7ff fee2 	bl	800c9c8 <_printf_common>
 800cc04:	3001      	adds	r0, #1
 800cc06:	d14c      	bne.n	800cca2 <_printf_i+0x1fe>
 800cc08:	f04f 30ff 	mov.w	r0, #4294967295
 800cc0c:	b004      	add	sp, #16
 800cc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc12:	4835      	ldr	r0, [pc, #212]	; (800cce8 <_printf_i+0x244>)
 800cc14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cc18:	6829      	ldr	r1, [r5, #0]
 800cc1a:	6823      	ldr	r3, [r4, #0]
 800cc1c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc20:	6029      	str	r1, [r5, #0]
 800cc22:	061d      	lsls	r5, r3, #24
 800cc24:	d514      	bpl.n	800cc50 <_printf_i+0x1ac>
 800cc26:	07df      	lsls	r7, r3, #31
 800cc28:	bf44      	itt	mi
 800cc2a:	f043 0320 	orrmi.w	r3, r3, #32
 800cc2e:	6023      	strmi	r3, [r4, #0]
 800cc30:	b91e      	cbnz	r6, 800cc3a <_printf_i+0x196>
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	f023 0320 	bic.w	r3, r3, #32
 800cc38:	6023      	str	r3, [r4, #0]
 800cc3a:	2310      	movs	r3, #16
 800cc3c:	e7b0      	b.n	800cba0 <_printf_i+0xfc>
 800cc3e:	6823      	ldr	r3, [r4, #0]
 800cc40:	f043 0320 	orr.w	r3, r3, #32
 800cc44:	6023      	str	r3, [r4, #0]
 800cc46:	2378      	movs	r3, #120	; 0x78
 800cc48:	4828      	ldr	r0, [pc, #160]	; (800ccec <_printf_i+0x248>)
 800cc4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc4e:	e7e3      	b.n	800cc18 <_printf_i+0x174>
 800cc50:	0659      	lsls	r1, r3, #25
 800cc52:	bf48      	it	mi
 800cc54:	b2b6      	uxthmi	r6, r6
 800cc56:	e7e6      	b.n	800cc26 <_printf_i+0x182>
 800cc58:	4615      	mov	r5, r2
 800cc5a:	e7bb      	b.n	800cbd4 <_printf_i+0x130>
 800cc5c:	682b      	ldr	r3, [r5, #0]
 800cc5e:	6826      	ldr	r6, [r4, #0]
 800cc60:	6961      	ldr	r1, [r4, #20]
 800cc62:	1d18      	adds	r0, r3, #4
 800cc64:	6028      	str	r0, [r5, #0]
 800cc66:	0635      	lsls	r5, r6, #24
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	d501      	bpl.n	800cc70 <_printf_i+0x1cc>
 800cc6c:	6019      	str	r1, [r3, #0]
 800cc6e:	e002      	b.n	800cc76 <_printf_i+0x1d2>
 800cc70:	0670      	lsls	r0, r6, #25
 800cc72:	d5fb      	bpl.n	800cc6c <_printf_i+0x1c8>
 800cc74:	8019      	strh	r1, [r3, #0]
 800cc76:	2300      	movs	r3, #0
 800cc78:	6123      	str	r3, [r4, #16]
 800cc7a:	4615      	mov	r5, r2
 800cc7c:	e7ba      	b.n	800cbf4 <_printf_i+0x150>
 800cc7e:	682b      	ldr	r3, [r5, #0]
 800cc80:	1d1a      	adds	r2, r3, #4
 800cc82:	602a      	str	r2, [r5, #0]
 800cc84:	681d      	ldr	r5, [r3, #0]
 800cc86:	6862      	ldr	r2, [r4, #4]
 800cc88:	2100      	movs	r1, #0
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	f7f3 fac0 	bl	8000210 <memchr>
 800cc90:	b108      	cbz	r0, 800cc96 <_printf_i+0x1f2>
 800cc92:	1b40      	subs	r0, r0, r5
 800cc94:	6060      	str	r0, [r4, #4]
 800cc96:	6863      	ldr	r3, [r4, #4]
 800cc98:	6123      	str	r3, [r4, #16]
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cca0:	e7a8      	b.n	800cbf4 <_printf_i+0x150>
 800cca2:	6923      	ldr	r3, [r4, #16]
 800cca4:	462a      	mov	r2, r5
 800cca6:	4649      	mov	r1, r9
 800cca8:	4640      	mov	r0, r8
 800ccaa:	47d0      	blx	sl
 800ccac:	3001      	adds	r0, #1
 800ccae:	d0ab      	beq.n	800cc08 <_printf_i+0x164>
 800ccb0:	6823      	ldr	r3, [r4, #0]
 800ccb2:	079b      	lsls	r3, r3, #30
 800ccb4:	d413      	bmi.n	800ccde <_printf_i+0x23a>
 800ccb6:	68e0      	ldr	r0, [r4, #12]
 800ccb8:	9b03      	ldr	r3, [sp, #12]
 800ccba:	4298      	cmp	r0, r3
 800ccbc:	bfb8      	it	lt
 800ccbe:	4618      	movlt	r0, r3
 800ccc0:	e7a4      	b.n	800cc0c <_printf_i+0x168>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	4632      	mov	r2, r6
 800ccc6:	4649      	mov	r1, r9
 800ccc8:	4640      	mov	r0, r8
 800ccca:	47d0      	blx	sl
 800cccc:	3001      	adds	r0, #1
 800ccce:	d09b      	beq.n	800cc08 <_printf_i+0x164>
 800ccd0:	3501      	adds	r5, #1
 800ccd2:	68e3      	ldr	r3, [r4, #12]
 800ccd4:	9903      	ldr	r1, [sp, #12]
 800ccd6:	1a5b      	subs	r3, r3, r1
 800ccd8:	42ab      	cmp	r3, r5
 800ccda:	dcf2      	bgt.n	800ccc2 <_printf_i+0x21e>
 800ccdc:	e7eb      	b.n	800ccb6 <_printf_i+0x212>
 800ccde:	2500      	movs	r5, #0
 800cce0:	f104 0619 	add.w	r6, r4, #25
 800cce4:	e7f5      	b.n	800ccd2 <_printf_i+0x22e>
 800cce6:	bf00      	nop
 800cce8:	0801424c 	.word	0x0801424c
 800ccec:	0801425d 	.word	0x0801425d

0800ccf0 <_scanf_float>:
 800ccf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf4:	b087      	sub	sp, #28
 800ccf6:	4617      	mov	r7, r2
 800ccf8:	9303      	str	r3, [sp, #12]
 800ccfa:	688b      	ldr	r3, [r1, #8]
 800ccfc:	1e5a      	subs	r2, r3, #1
 800ccfe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cd02:	bf83      	ittte	hi
 800cd04:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cd08:	195b      	addhi	r3, r3, r5
 800cd0a:	9302      	strhi	r3, [sp, #8]
 800cd0c:	2300      	movls	r3, #0
 800cd0e:	bf86      	itte	hi
 800cd10:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cd14:	608b      	strhi	r3, [r1, #8]
 800cd16:	9302      	strls	r3, [sp, #8]
 800cd18:	680b      	ldr	r3, [r1, #0]
 800cd1a:	468b      	mov	fp, r1
 800cd1c:	2500      	movs	r5, #0
 800cd1e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cd22:	f84b 3b1c 	str.w	r3, [fp], #28
 800cd26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cd2a:	4680      	mov	r8, r0
 800cd2c:	460c      	mov	r4, r1
 800cd2e:	465e      	mov	r6, fp
 800cd30:	46aa      	mov	sl, r5
 800cd32:	46a9      	mov	r9, r5
 800cd34:	9501      	str	r5, [sp, #4]
 800cd36:	68a2      	ldr	r2, [r4, #8]
 800cd38:	b152      	cbz	r2, 800cd50 <_scanf_float+0x60>
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	2b4e      	cmp	r3, #78	; 0x4e
 800cd40:	d864      	bhi.n	800ce0c <_scanf_float+0x11c>
 800cd42:	2b40      	cmp	r3, #64	; 0x40
 800cd44:	d83c      	bhi.n	800cdc0 <_scanf_float+0xd0>
 800cd46:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cd4a:	b2c8      	uxtb	r0, r1
 800cd4c:	280e      	cmp	r0, #14
 800cd4e:	d93a      	bls.n	800cdc6 <_scanf_float+0xd6>
 800cd50:	f1b9 0f00 	cmp.w	r9, #0
 800cd54:	d003      	beq.n	800cd5e <_scanf_float+0x6e>
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd5c:	6023      	str	r3, [r4, #0]
 800cd5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd62:	f1ba 0f01 	cmp.w	sl, #1
 800cd66:	f200 8113 	bhi.w	800cf90 <_scanf_float+0x2a0>
 800cd6a:	455e      	cmp	r6, fp
 800cd6c:	f200 8105 	bhi.w	800cf7a <_scanf_float+0x28a>
 800cd70:	2501      	movs	r5, #1
 800cd72:	4628      	mov	r0, r5
 800cd74:	b007      	add	sp, #28
 800cd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd7a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cd7e:	2a0d      	cmp	r2, #13
 800cd80:	d8e6      	bhi.n	800cd50 <_scanf_float+0x60>
 800cd82:	a101      	add	r1, pc, #4	; (adr r1, 800cd88 <_scanf_float+0x98>)
 800cd84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cd88:	0800cec7 	.word	0x0800cec7
 800cd8c:	0800cd51 	.word	0x0800cd51
 800cd90:	0800cd51 	.word	0x0800cd51
 800cd94:	0800cd51 	.word	0x0800cd51
 800cd98:	0800cf27 	.word	0x0800cf27
 800cd9c:	0800ceff 	.word	0x0800ceff
 800cda0:	0800cd51 	.word	0x0800cd51
 800cda4:	0800cd51 	.word	0x0800cd51
 800cda8:	0800ced5 	.word	0x0800ced5
 800cdac:	0800cd51 	.word	0x0800cd51
 800cdb0:	0800cd51 	.word	0x0800cd51
 800cdb4:	0800cd51 	.word	0x0800cd51
 800cdb8:	0800cd51 	.word	0x0800cd51
 800cdbc:	0800ce8d 	.word	0x0800ce8d
 800cdc0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cdc4:	e7db      	b.n	800cd7e <_scanf_float+0x8e>
 800cdc6:	290e      	cmp	r1, #14
 800cdc8:	d8c2      	bhi.n	800cd50 <_scanf_float+0x60>
 800cdca:	a001      	add	r0, pc, #4	; (adr r0, 800cdd0 <_scanf_float+0xe0>)
 800cdcc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cdd0:	0800ce7f 	.word	0x0800ce7f
 800cdd4:	0800cd51 	.word	0x0800cd51
 800cdd8:	0800ce7f 	.word	0x0800ce7f
 800cddc:	0800cf13 	.word	0x0800cf13
 800cde0:	0800cd51 	.word	0x0800cd51
 800cde4:	0800ce2d 	.word	0x0800ce2d
 800cde8:	0800ce69 	.word	0x0800ce69
 800cdec:	0800ce69 	.word	0x0800ce69
 800cdf0:	0800ce69 	.word	0x0800ce69
 800cdf4:	0800ce69 	.word	0x0800ce69
 800cdf8:	0800ce69 	.word	0x0800ce69
 800cdfc:	0800ce69 	.word	0x0800ce69
 800ce00:	0800ce69 	.word	0x0800ce69
 800ce04:	0800ce69 	.word	0x0800ce69
 800ce08:	0800ce69 	.word	0x0800ce69
 800ce0c:	2b6e      	cmp	r3, #110	; 0x6e
 800ce0e:	d809      	bhi.n	800ce24 <_scanf_float+0x134>
 800ce10:	2b60      	cmp	r3, #96	; 0x60
 800ce12:	d8b2      	bhi.n	800cd7a <_scanf_float+0x8a>
 800ce14:	2b54      	cmp	r3, #84	; 0x54
 800ce16:	d077      	beq.n	800cf08 <_scanf_float+0x218>
 800ce18:	2b59      	cmp	r3, #89	; 0x59
 800ce1a:	d199      	bne.n	800cd50 <_scanf_float+0x60>
 800ce1c:	2d07      	cmp	r5, #7
 800ce1e:	d197      	bne.n	800cd50 <_scanf_float+0x60>
 800ce20:	2508      	movs	r5, #8
 800ce22:	e029      	b.n	800ce78 <_scanf_float+0x188>
 800ce24:	2b74      	cmp	r3, #116	; 0x74
 800ce26:	d06f      	beq.n	800cf08 <_scanf_float+0x218>
 800ce28:	2b79      	cmp	r3, #121	; 0x79
 800ce2a:	e7f6      	b.n	800ce1a <_scanf_float+0x12a>
 800ce2c:	6821      	ldr	r1, [r4, #0]
 800ce2e:	05c8      	lsls	r0, r1, #23
 800ce30:	d51a      	bpl.n	800ce68 <_scanf_float+0x178>
 800ce32:	9b02      	ldr	r3, [sp, #8]
 800ce34:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ce38:	6021      	str	r1, [r4, #0]
 800ce3a:	f109 0901 	add.w	r9, r9, #1
 800ce3e:	b11b      	cbz	r3, 800ce48 <_scanf_float+0x158>
 800ce40:	3b01      	subs	r3, #1
 800ce42:	3201      	adds	r2, #1
 800ce44:	9302      	str	r3, [sp, #8]
 800ce46:	60a2      	str	r2, [r4, #8]
 800ce48:	68a3      	ldr	r3, [r4, #8]
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	60a3      	str	r3, [r4, #8]
 800ce4e:	6923      	ldr	r3, [r4, #16]
 800ce50:	3301      	adds	r3, #1
 800ce52:	6123      	str	r3, [r4, #16]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	3b01      	subs	r3, #1
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	607b      	str	r3, [r7, #4]
 800ce5c:	f340 8084 	ble.w	800cf68 <_scanf_float+0x278>
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	3301      	adds	r3, #1
 800ce64:	603b      	str	r3, [r7, #0]
 800ce66:	e766      	b.n	800cd36 <_scanf_float+0x46>
 800ce68:	eb1a 0f05 	cmn.w	sl, r5
 800ce6c:	f47f af70 	bne.w	800cd50 <_scanf_float+0x60>
 800ce70:	6822      	ldr	r2, [r4, #0]
 800ce72:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ce76:	6022      	str	r2, [r4, #0]
 800ce78:	f806 3b01 	strb.w	r3, [r6], #1
 800ce7c:	e7e4      	b.n	800ce48 <_scanf_float+0x158>
 800ce7e:	6822      	ldr	r2, [r4, #0]
 800ce80:	0610      	lsls	r0, r2, #24
 800ce82:	f57f af65 	bpl.w	800cd50 <_scanf_float+0x60>
 800ce86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce8a:	e7f4      	b.n	800ce76 <_scanf_float+0x186>
 800ce8c:	f1ba 0f00 	cmp.w	sl, #0
 800ce90:	d10e      	bne.n	800ceb0 <_scanf_float+0x1c0>
 800ce92:	f1b9 0f00 	cmp.w	r9, #0
 800ce96:	d10e      	bne.n	800ceb6 <_scanf_float+0x1c6>
 800ce98:	6822      	ldr	r2, [r4, #0]
 800ce9a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ce9e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cea2:	d108      	bne.n	800ceb6 <_scanf_float+0x1c6>
 800cea4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cea8:	6022      	str	r2, [r4, #0]
 800ceaa:	f04f 0a01 	mov.w	sl, #1
 800ceae:	e7e3      	b.n	800ce78 <_scanf_float+0x188>
 800ceb0:	f1ba 0f02 	cmp.w	sl, #2
 800ceb4:	d055      	beq.n	800cf62 <_scanf_float+0x272>
 800ceb6:	2d01      	cmp	r5, #1
 800ceb8:	d002      	beq.n	800cec0 <_scanf_float+0x1d0>
 800ceba:	2d04      	cmp	r5, #4
 800cebc:	f47f af48 	bne.w	800cd50 <_scanf_float+0x60>
 800cec0:	3501      	adds	r5, #1
 800cec2:	b2ed      	uxtb	r5, r5
 800cec4:	e7d8      	b.n	800ce78 <_scanf_float+0x188>
 800cec6:	f1ba 0f01 	cmp.w	sl, #1
 800ceca:	f47f af41 	bne.w	800cd50 <_scanf_float+0x60>
 800cece:	f04f 0a02 	mov.w	sl, #2
 800ced2:	e7d1      	b.n	800ce78 <_scanf_float+0x188>
 800ced4:	b97d      	cbnz	r5, 800cef6 <_scanf_float+0x206>
 800ced6:	f1b9 0f00 	cmp.w	r9, #0
 800ceda:	f47f af3c 	bne.w	800cd56 <_scanf_float+0x66>
 800cede:	6822      	ldr	r2, [r4, #0]
 800cee0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cee4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cee8:	f47f af39 	bne.w	800cd5e <_scanf_float+0x6e>
 800ceec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cef0:	6022      	str	r2, [r4, #0]
 800cef2:	2501      	movs	r5, #1
 800cef4:	e7c0      	b.n	800ce78 <_scanf_float+0x188>
 800cef6:	2d03      	cmp	r5, #3
 800cef8:	d0e2      	beq.n	800cec0 <_scanf_float+0x1d0>
 800cefa:	2d05      	cmp	r5, #5
 800cefc:	e7de      	b.n	800cebc <_scanf_float+0x1cc>
 800cefe:	2d02      	cmp	r5, #2
 800cf00:	f47f af26 	bne.w	800cd50 <_scanf_float+0x60>
 800cf04:	2503      	movs	r5, #3
 800cf06:	e7b7      	b.n	800ce78 <_scanf_float+0x188>
 800cf08:	2d06      	cmp	r5, #6
 800cf0a:	f47f af21 	bne.w	800cd50 <_scanf_float+0x60>
 800cf0e:	2507      	movs	r5, #7
 800cf10:	e7b2      	b.n	800ce78 <_scanf_float+0x188>
 800cf12:	6822      	ldr	r2, [r4, #0]
 800cf14:	0591      	lsls	r1, r2, #22
 800cf16:	f57f af1b 	bpl.w	800cd50 <_scanf_float+0x60>
 800cf1a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cf1e:	6022      	str	r2, [r4, #0]
 800cf20:	f8cd 9004 	str.w	r9, [sp, #4]
 800cf24:	e7a8      	b.n	800ce78 <_scanf_float+0x188>
 800cf26:	6822      	ldr	r2, [r4, #0]
 800cf28:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cf2c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cf30:	d006      	beq.n	800cf40 <_scanf_float+0x250>
 800cf32:	0550      	lsls	r0, r2, #21
 800cf34:	f57f af0c 	bpl.w	800cd50 <_scanf_float+0x60>
 800cf38:	f1b9 0f00 	cmp.w	r9, #0
 800cf3c:	f43f af0f 	beq.w	800cd5e <_scanf_float+0x6e>
 800cf40:	0591      	lsls	r1, r2, #22
 800cf42:	bf58      	it	pl
 800cf44:	9901      	ldrpl	r1, [sp, #4]
 800cf46:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cf4a:	bf58      	it	pl
 800cf4c:	eba9 0101 	subpl.w	r1, r9, r1
 800cf50:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cf54:	bf58      	it	pl
 800cf56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cf5a:	6022      	str	r2, [r4, #0]
 800cf5c:	f04f 0900 	mov.w	r9, #0
 800cf60:	e78a      	b.n	800ce78 <_scanf_float+0x188>
 800cf62:	f04f 0a03 	mov.w	sl, #3
 800cf66:	e787      	b.n	800ce78 <_scanf_float+0x188>
 800cf68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cf6c:	4639      	mov	r1, r7
 800cf6e:	4640      	mov	r0, r8
 800cf70:	4798      	blx	r3
 800cf72:	2800      	cmp	r0, #0
 800cf74:	f43f aedf 	beq.w	800cd36 <_scanf_float+0x46>
 800cf78:	e6ea      	b.n	800cd50 <_scanf_float+0x60>
 800cf7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cf82:	463a      	mov	r2, r7
 800cf84:	4640      	mov	r0, r8
 800cf86:	4798      	blx	r3
 800cf88:	6923      	ldr	r3, [r4, #16]
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	6123      	str	r3, [r4, #16]
 800cf8e:	e6ec      	b.n	800cd6a <_scanf_float+0x7a>
 800cf90:	1e6b      	subs	r3, r5, #1
 800cf92:	2b06      	cmp	r3, #6
 800cf94:	d825      	bhi.n	800cfe2 <_scanf_float+0x2f2>
 800cf96:	2d02      	cmp	r5, #2
 800cf98:	d836      	bhi.n	800d008 <_scanf_float+0x318>
 800cf9a:	455e      	cmp	r6, fp
 800cf9c:	f67f aee8 	bls.w	800cd70 <_scanf_float+0x80>
 800cfa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cfa4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cfa8:	463a      	mov	r2, r7
 800cfaa:	4640      	mov	r0, r8
 800cfac:	4798      	blx	r3
 800cfae:	6923      	ldr	r3, [r4, #16]
 800cfb0:	3b01      	subs	r3, #1
 800cfb2:	6123      	str	r3, [r4, #16]
 800cfb4:	e7f1      	b.n	800cf9a <_scanf_float+0x2aa>
 800cfb6:	9802      	ldr	r0, [sp, #8]
 800cfb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cfbc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cfc0:	9002      	str	r0, [sp, #8]
 800cfc2:	463a      	mov	r2, r7
 800cfc4:	4640      	mov	r0, r8
 800cfc6:	4798      	blx	r3
 800cfc8:	6923      	ldr	r3, [r4, #16]
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	6123      	str	r3, [r4, #16]
 800cfce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cfd2:	fa5f fa8a 	uxtb.w	sl, sl
 800cfd6:	f1ba 0f02 	cmp.w	sl, #2
 800cfda:	d1ec      	bne.n	800cfb6 <_scanf_float+0x2c6>
 800cfdc:	3d03      	subs	r5, #3
 800cfde:	b2ed      	uxtb	r5, r5
 800cfe0:	1b76      	subs	r6, r6, r5
 800cfe2:	6823      	ldr	r3, [r4, #0]
 800cfe4:	05da      	lsls	r2, r3, #23
 800cfe6:	d52f      	bpl.n	800d048 <_scanf_float+0x358>
 800cfe8:	055b      	lsls	r3, r3, #21
 800cfea:	d510      	bpl.n	800d00e <_scanf_float+0x31e>
 800cfec:	455e      	cmp	r6, fp
 800cfee:	f67f aebf 	bls.w	800cd70 <_scanf_float+0x80>
 800cff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cff6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cffa:	463a      	mov	r2, r7
 800cffc:	4640      	mov	r0, r8
 800cffe:	4798      	blx	r3
 800d000:	6923      	ldr	r3, [r4, #16]
 800d002:	3b01      	subs	r3, #1
 800d004:	6123      	str	r3, [r4, #16]
 800d006:	e7f1      	b.n	800cfec <_scanf_float+0x2fc>
 800d008:	46aa      	mov	sl, r5
 800d00a:	9602      	str	r6, [sp, #8]
 800d00c:	e7df      	b.n	800cfce <_scanf_float+0x2de>
 800d00e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d012:	6923      	ldr	r3, [r4, #16]
 800d014:	2965      	cmp	r1, #101	; 0x65
 800d016:	f103 33ff 	add.w	r3, r3, #4294967295
 800d01a:	f106 35ff 	add.w	r5, r6, #4294967295
 800d01e:	6123      	str	r3, [r4, #16]
 800d020:	d00c      	beq.n	800d03c <_scanf_float+0x34c>
 800d022:	2945      	cmp	r1, #69	; 0x45
 800d024:	d00a      	beq.n	800d03c <_scanf_float+0x34c>
 800d026:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d02a:	463a      	mov	r2, r7
 800d02c:	4640      	mov	r0, r8
 800d02e:	4798      	blx	r3
 800d030:	6923      	ldr	r3, [r4, #16]
 800d032:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d036:	3b01      	subs	r3, #1
 800d038:	1eb5      	subs	r5, r6, #2
 800d03a:	6123      	str	r3, [r4, #16]
 800d03c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d040:	463a      	mov	r2, r7
 800d042:	4640      	mov	r0, r8
 800d044:	4798      	blx	r3
 800d046:	462e      	mov	r6, r5
 800d048:	6825      	ldr	r5, [r4, #0]
 800d04a:	f015 0510 	ands.w	r5, r5, #16
 800d04e:	d159      	bne.n	800d104 <_scanf_float+0x414>
 800d050:	7035      	strb	r5, [r6, #0]
 800d052:	6823      	ldr	r3, [r4, #0]
 800d054:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d05c:	d11b      	bne.n	800d096 <_scanf_float+0x3a6>
 800d05e:	9b01      	ldr	r3, [sp, #4]
 800d060:	454b      	cmp	r3, r9
 800d062:	eba3 0209 	sub.w	r2, r3, r9
 800d066:	d123      	bne.n	800d0b0 <_scanf_float+0x3c0>
 800d068:	2200      	movs	r2, #0
 800d06a:	4659      	mov	r1, fp
 800d06c:	4640      	mov	r0, r8
 800d06e:	f000 ff09 	bl	800de84 <_strtod_r>
 800d072:	6822      	ldr	r2, [r4, #0]
 800d074:	9b03      	ldr	r3, [sp, #12]
 800d076:	f012 0f02 	tst.w	r2, #2
 800d07a:	ec57 6b10 	vmov	r6, r7, d0
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	d021      	beq.n	800d0c6 <_scanf_float+0x3d6>
 800d082:	9903      	ldr	r1, [sp, #12]
 800d084:	1d1a      	adds	r2, r3, #4
 800d086:	600a      	str	r2, [r1, #0]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	e9c3 6700 	strd	r6, r7, [r3]
 800d08e:	68e3      	ldr	r3, [r4, #12]
 800d090:	3301      	adds	r3, #1
 800d092:	60e3      	str	r3, [r4, #12]
 800d094:	e66d      	b.n	800cd72 <_scanf_float+0x82>
 800d096:	9b04      	ldr	r3, [sp, #16]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d0e5      	beq.n	800d068 <_scanf_float+0x378>
 800d09c:	9905      	ldr	r1, [sp, #20]
 800d09e:	230a      	movs	r3, #10
 800d0a0:	462a      	mov	r2, r5
 800d0a2:	3101      	adds	r1, #1
 800d0a4:	4640      	mov	r0, r8
 800d0a6:	f000 ff81 	bl	800dfac <_strtol_r>
 800d0aa:	9b04      	ldr	r3, [sp, #16]
 800d0ac:	9e05      	ldr	r6, [sp, #20]
 800d0ae:	1ac2      	subs	r2, r0, r3
 800d0b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d0b4:	429e      	cmp	r6, r3
 800d0b6:	bf28      	it	cs
 800d0b8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d0bc:	4912      	ldr	r1, [pc, #72]	; (800d108 <_scanf_float+0x418>)
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f000 f82c 	bl	800d11c <siprintf>
 800d0c4:	e7d0      	b.n	800d068 <_scanf_float+0x378>
 800d0c6:	9903      	ldr	r1, [sp, #12]
 800d0c8:	f012 0f04 	tst.w	r2, #4
 800d0cc:	f103 0204 	add.w	r2, r3, #4
 800d0d0:	600a      	str	r2, [r1, #0]
 800d0d2:	d1d9      	bne.n	800d088 <_scanf_float+0x398>
 800d0d4:	f8d3 8000 	ldr.w	r8, [r3]
 800d0d8:	ee10 2a10 	vmov	r2, s0
 800d0dc:	ee10 0a10 	vmov	r0, s0
 800d0e0:	463b      	mov	r3, r7
 800d0e2:	4639      	mov	r1, r7
 800d0e4:	f7f3 fd3a 	bl	8000b5c <__aeabi_dcmpun>
 800d0e8:	b128      	cbz	r0, 800d0f6 <_scanf_float+0x406>
 800d0ea:	4808      	ldr	r0, [pc, #32]	; (800d10c <_scanf_float+0x41c>)
 800d0ec:	f000 f810 	bl	800d110 <nanf>
 800d0f0:	ed88 0a00 	vstr	s0, [r8]
 800d0f4:	e7cb      	b.n	800d08e <_scanf_float+0x39e>
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	4639      	mov	r1, r7
 800d0fa:	f7f3 fd8d 	bl	8000c18 <__aeabi_d2f>
 800d0fe:	f8c8 0000 	str.w	r0, [r8]
 800d102:	e7c4      	b.n	800d08e <_scanf_float+0x39e>
 800d104:	2500      	movs	r5, #0
 800d106:	e634      	b.n	800cd72 <_scanf_float+0x82>
 800d108:	0801426e 	.word	0x0801426e
 800d10c:	08014693 	.word	0x08014693

0800d110 <nanf>:
 800d110:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d118 <nanf+0x8>
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	7fc00000 	.word	0x7fc00000

0800d11c <siprintf>:
 800d11c:	b40e      	push	{r1, r2, r3}
 800d11e:	b500      	push	{lr}
 800d120:	b09c      	sub	sp, #112	; 0x70
 800d122:	ab1d      	add	r3, sp, #116	; 0x74
 800d124:	9002      	str	r0, [sp, #8]
 800d126:	9006      	str	r0, [sp, #24]
 800d128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d12c:	4809      	ldr	r0, [pc, #36]	; (800d154 <siprintf+0x38>)
 800d12e:	9107      	str	r1, [sp, #28]
 800d130:	9104      	str	r1, [sp, #16]
 800d132:	4909      	ldr	r1, [pc, #36]	; (800d158 <siprintf+0x3c>)
 800d134:	f853 2b04 	ldr.w	r2, [r3], #4
 800d138:	9105      	str	r1, [sp, #20]
 800d13a:	6800      	ldr	r0, [r0, #0]
 800d13c:	9301      	str	r3, [sp, #4]
 800d13e:	a902      	add	r1, sp, #8
 800d140:	f002 ff90 	bl	8010064 <_svfiprintf_r>
 800d144:	9b02      	ldr	r3, [sp, #8]
 800d146:	2200      	movs	r2, #0
 800d148:	701a      	strb	r2, [r3, #0]
 800d14a:	b01c      	add	sp, #112	; 0x70
 800d14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d150:	b003      	add	sp, #12
 800d152:	4770      	bx	lr
 800d154:	20000040 	.word	0x20000040
 800d158:	ffff0208 	.word	0xffff0208

0800d15c <siscanf>:
 800d15c:	b40e      	push	{r1, r2, r3}
 800d15e:	b510      	push	{r4, lr}
 800d160:	b09f      	sub	sp, #124	; 0x7c
 800d162:	ac21      	add	r4, sp, #132	; 0x84
 800d164:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d168:	f854 2b04 	ldr.w	r2, [r4], #4
 800d16c:	9201      	str	r2, [sp, #4]
 800d16e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d172:	9004      	str	r0, [sp, #16]
 800d174:	9008      	str	r0, [sp, #32]
 800d176:	f7f3 f83d 	bl	80001f4 <strlen>
 800d17a:	4b0c      	ldr	r3, [pc, #48]	; (800d1ac <siscanf+0x50>)
 800d17c:	9005      	str	r0, [sp, #20]
 800d17e:	9009      	str	r0, [sp, #36]	; 0x24
 800d180:	930d      	str	r3, [sp, #52]	; 0x34
 800d182:	480b      	ldr	r0, [pc, #44]	; (800d1b0 <siscanf+0x54>)
 800d184:	9a01      	ldr	r2, [sp, #4]
 800d186:	6800      	ldr	r0, [r0, #0]
 800d188:	9403      	str	r4, [sp, #12]
 800d18a:	2300      	movs	r3, #0
 800d18c:	9311      	str	r3, [sp, #68]	; 0x44
 800d18e:	9316      	str	r3, [sp, #88]	; 0x58
 800d190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d194:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d198:	a904      	add	r1, sp, #16
 800d19a:	4623      	mov	r3, r4
 800d19c:	f003 f8bc 	bl	8010318 <__ssvfiscanf_r>
 800d1a0:	b01f      	add	sp, #124	; 0x7c
 800d1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1a6:	b003      	add	sp, #12
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	0800d1d7 	.word	0x0800d1d7
 800d1b0:	20000040 	.word	0x20000040

0800d1b4 <__sread>:
 800d1b4:	b510      	push	{r4, lr}
 800d1b6:	460c      	mov	r4, r1
 800d1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1bc:	f003 fb76 	bl	80108ac <_read_r>
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	bfab      	itete	ge
 800d1c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d1c6:	89a3      	ldrhlt	r3, [r4, #12]
 800d1c8:	181b      	addge	r3, r3, r0
 800d1ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d1ce:	bfac      	ite	ge
 800d1d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d1d2:	81a3      	strhlt	r3, [r4, #12]
 800d1d4:	bd10      	pop	{r4, pc}

0800d1d6 <__seofread>:
 800d1d6:	2000      	movs	r0, #0
 800d1d8:	4770      	bx	lr

0800d1da <__swrite>:
 800d1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1de:	461f      	mov	r7, r3
 800d1e0:	898b      	ldrh	r3, [r1, #12]
 800d1e2:	05db      	lsls	r3, r3, #23
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	4616      	mov	r6, r2
 800d1ea:	d505      	bpl.n	800d1f8 <__swrite+0x1e>
 800d1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1f0:	2302      	movs	r3, #2
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f002 f8f6 	bl	800f3e4 <_lseek_r>
 800d1f8:	89a3      	ldrh	r3, [r4, #12]
 800d1fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d202:	81a3      	strh	r3, [r4, #12]
 800d204:	4632      	mov	r2, r6
 800d206:	463b      	mov	r3, r7
 800d208:	4628      	mov	r0, r5
 800d20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d20e:	f000 bed9 	b.w	800dfc4 <_write_r>

0800d212 <__sseek>:
 800d212:	b510      	push	{r4, lr}
 800d214:	460c      	mov	r4, r1
 800d216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d21a:	f002 f8e3 	bl	800f3e4 <_lseek_r>
 800d21e:	1c43      	adds	r3, r0, #1
 800d220:	89a3      	ldrh	r3, [r4, #12]
 800d222:	bf15      	itete	ne
 800d224:	6560      	strne	r0, [r4, #84]	; 0x54
 800d226:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d22a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d22e:	81a3      	strheq	r3, [r4, #12]
 800d230:	bf18      	it	ne
 800d232:	81a3      	strhne	r3, [r4, #12]
 800d234:	bd10      	pop	{r4, pc}

0800d236 <__sclose>:
 800d236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d23a:	f000 bed5 	b.w	800dfe8 <_close_r>

0800d23e <sulp>:
 800d23e:	b570      	push	{r4, r5, r6, lr}
 800d240:	4604      	mov	r4, r0
 800d242:	460d      	mov	r5, r1
 800d244:	ec45 4b10 	vmov	d0, r4, r5
 800d248:	4616      	mov	r6, r2
 800d24a:	f002 fc69 	bl	800fb20 <__ulp>
 800d24e:	ec51 0b10 	vmov	r0, r1, d0
 800d252:	b17e      	cbz	r6, 800d274 <sulp+0x36>
 800d254:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d258:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	dd09      	ble.n	800d274 <sulp+0x36>
 800d260:	051b      	lsls	r3, r3, #20
 800d262:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d266:	2400      	movs	r4, #0
 800d268:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d26c:	4622      	mov	r2, r4
 800d26e:	462b      	mov	r3, r5
 800d270:	f7f3 f9da 	bl	8000628 <__aeabi_dmul>
 800d274:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d278 <_strtod_l>:
 800d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27c:	ed2d 8b02 	vpush	{d8}
 800d280:	b09d      	sub	sp, #116	; 0x74
 800d282:	461f      	mov	r7, r3
 800d284:	2300      	movs	r3, #0
 800d286:	9318      	str	r3, [sp, #96]	; 0x60
 800d288:	4ba2      	ldr	r3, [pc, #648]	; (800d514 <_strtod_l+0x29c>)
 800d28a:	9213      	str	r2, [sp, #76]	; 0x4c
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	9305      	str	r3, [sp, #20]
 800d290:	4604      	mov	r4, r0
 800d292:	4618      	mov	r0, r3
 800d294:	4688      	mov	r8, r1
 800d296:	f7f2 ffad 	bl	80001f4 <strlen>
 800d29a:	f04f 0a00 	mov.w	sl, #0
 800d29e:	4605      	mov	r5, r0
 800d2a0:	f04f 0b00 	mov.w	fp, #0
 800d2a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d2a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2aa:	781a      	ldrb	r2, [r3, #0]
 800d2ac:	2a2b      	cmp	r2, #43	; 0x2b
 800d2ae:	d04e      	beq.n	800d34e <_strtod_l+0xd6>
 800d2b0:	d83b      	bhi.n	800d32a <_strtod_l+0xb2>
 800d2b2:	2a0d      	cmp	r2, #13
 800d2b4:	d834      	bhi.n	800d320 <_strtod_l+0xa8>
 800d2b6:	2a08      	cmp	r2, #8
 800d2b8:	d834      	bhi.n	800d324 <_strtod_l+0xac>
 800d2ba:	2a00      	cmp	r2, #0
 800d2bc:	d03e      	beq.n	800d33c <_strtod_l+0xc4>
 800d2be:	2300      	movs	r3, #0
 800d2c0:	930a      	str	r3, [sp, #40]	; 0x28
 800d2c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d2c4:	7833      	ldrb	r3, [r6, #0]
 800d2c6:	2b30      	cmp	r3, #48	; 0x30
 800d2c8:	f040 80b0 	bne.w	800d42c <_strtod_l+0x1b4>
 800d2cc:	7873      	ldrb	r3, [r6, #1]
 800d2ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d2d2:	2b58      	cmp	r3, #88	; 0x58
 800d2d4:	d168      	bne.n	800d3a8 <_strtod_l+0x130>
 800d2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2d8:	9301      	str	r3, [sp, #4]
 800d2da:	ab18      	add	r3, sp, #96	; 0x60
 800d2dc:	9702      	str	r7, [sp, #8]
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	4a8d      	ldr	r2, [pc, #564]	; (800d518 <_strtod_l+0x2a0>)
 800d2e2:	ab19      	add	r3, sp, #100	; 0x64
 800d2e4:	a917      	add	r1, sp, #92	; 0x5c
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	f001 fd70 	bl	800edcc <__gethex>
 800d2ec:	f010 0707 	ands.w	r7, r0, #7
 800d2f0:	4605      	mov	r5, r0
 800d2f2:	d005      	beq.n	800d300 <_strtod_l+0x88>
 800d2f4:	2f06      	cmp	r7, #6
 800d2f6:	d12c      	bne.n	800d352 <_strtod_l+0xda>
 800d2f8:	3601      	adds	r6, #1
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	9617      	str	r6, [sp, #92]	; 0x5c
 800d2fe:	930a      	str	r3, [sp, #40]	; 0x28
 800d300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d302:	2b00      	cmp	r3, #0
 800d304:	f040 8590 	bne.w	800de28 <_strtod_l+0xbb0>
 800d308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d30a:	b1eb      	cbz	r3, 800d348 <_strtod_l+0xd0>
 800d30c:	4652      	mov	r2, sl
 800d30e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d312:	ec43 2b10 	vmov	d0, r2, r3
 800d316:	b01d      	add	sp, #116	; 0x74
 800d318:	ecbd 8b02 	vpop	{d8}
 800d31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d320:	2a20      	cmp	r2, #32
 800d322:	d1cc      	bne.n	800d2be <_strtod_l+0x46>
 800d324:	3301      	adds	r3, #1
 800d326:	9317      	str	r3, [sp, #92]	; 0x5c
 800d328:	e7be      	b.n	800d2a8 <_strtod_l+0x30>
 800d32a:	2a2d      	cmp	r2, #45	; 0x2d
 800d32c:	d1c7      	bne.n	800d2be <_strtod_l+0x46>
 800d32e:	2201      	movs	r2, #1
 800d330:	920a      	str	r2, [sp, #40]	; 0x28
 800d332:	1c5a      	adds	r2, r3, #1
 800d334:	9217      	str	r2, [sp, #92]	; 0x5c
 800d336:	785b      	ldrb	r3, [r3, #1]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d1c2      	bne.n	800d2c2 <_strtod_l+0x4a>
 800d33c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d33e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d342:	2b00      	cmp	r3, #0
 800d344:	f040 856e 	bne.w	800de24 <_strtod_l+0xbac>
 800d348:	4652      	mov	r2, sl
 800d34a:	465b      	mov	r3, fp
 800d34c:	e7e1      	b.n	800d312 <_strtod_l+0x9a>
 800d34e:	2200      	movs	r2, #0
 800d350:	e7ee      	b.n	800d330 <_strtod_l+0xb8>
 800d352:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d354:	b13a      	cbz	r2, 800d366 <_strtod_l+0xee>
 800d356:	2135      	movs	r1, #53	; 0x35
 800d358:	a81a      	add	r0, sp, #104	; 0x68
 800d35a:	f002 fcec 	bl	800fd36 <__copybits>
 800d35e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d360:	4620      	mov	r0, r4
 800d362:	f002 f8ab 	bl	800f4bc <_Bfree>
 800d366:	3f01      	subs	r7, #1
 800d368:	2f04      	cmp	r7, #4
 800d36a:	d806      	bhi.n	800d37a <_strtod_l+0x102>
 800d36c:	e8df f007 	tbb	[pc, r7]
 800d370:	1714030a 	.word	0x1714030a
 800d374:	0a          	.byte	0x0a
 800d375:	00          	.byte	0x00
 800d376:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d37a:	0728      	lsls	r0, r5, #28
 800d37c:	d5c0      	bpl.n	800d300 <_strtod_l+0x88>
 800d37e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d382:	e7bd      	b.n	800d300 <_strtod_l+0x88>
 800d384:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d388:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d38a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d38e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d392:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d396:	e7f0      	b.n	800d37a <_strtod_l+0x102>
 800d398:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d51c <_strtod_l+0x2a4>
 800d39c:	e7ed      	b.n	800d37a <_strtod_l+0x102>
 800d39e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d3a2:	f04f 3aff 	mov.w	sl, #4294967295
 800d3a6:	e7e8      	b.n	800d37a <_strtod_l+0x102>
 800d3a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800d3ae:	785b      	ldrb	r3, [r3, #1]
 800d3b0:	2b30      	cmp	r3, #48	; 0x30
 800d3b2:	d0f9      	beq.n	800d3a8 <_strtod_l+0x130>
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d0a3      	beq.n	800d300 <_strtod_l+0x88>
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	f04f 0900 	mov.w	r9, #0
 800d3be:	9304      	str	r3, [sp, #16]
 800d3c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3c2:	9308      	str	r3, [sp, #32]
 800d3c4:	f8cd 901c 	str.w	r9, [sp, #28]
 800d3c8:	464f      	mov	r7, r9
 800d3ca:	220a      	movs	r2, #10
 800d3cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d3ce:	7806      	ldrb	r6, [r0, #0]
 800d3d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d3d4:	b2d9      	uxtb	r1, r3
 800d3d6:	2909      	cmp	r1, #9
 800d3d8:	d92a      	bls.n	800d430 <_strtod_l+0x1b8>
 800d3da:	9905      	ldr	r1, [sp, #20]
 800d3dc:	462a      	mov	r2, r5
 800d3de:	f003 fac7 	bl	8010970 <strncmp>
 800d3e2:	b398      	cbz	r0, 800d44c <_strtod_l+0x1d4>
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	4632      	mov	r2, r6
 800d3e8:	463d      	mov	r5, r7
 800d3ea:	9005      	str	r0, [sp, #20]
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2a65      	cmp	r2, #101	; 0x65
 800d3f0:	d001      	beq.n	800d3f6 <_strtod_l+0x17e>
 800d3f2:	2a45      	cmp	r2, #69	; 0x45
 800d3f4:	d118      	bne.n	800d428 <_strtod_l+0x1b0>
 800d3f6:	b91d      	cbnz	r5, 800d400 <_strtod_l+0x188>
 800d3f8:	9a04      	ldr	r2, [sp, #16]
 800d3fa:	4302      	orrs	r2, r0
 800d3fc:	d09e      	beq.n	800d33c <_strtod_l+0xc4>
 800d3fe:	2500      	movs	r5, #0
 800d400:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d404:	f108 0201 	add.w	r2, r8, #1
 800d408:	9217      	str	r2, [sp, #92]	; 0x5c
 800d40a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d40e:	2a2b      	cmp	r2, #43	; 0x2b
 800d410:	d075      	beq.n	800d4fe <_strtod_l+0x286>
 800d412:	2a2d      	cmp	r2, #45	; 0x2d
 800d414:	d07b      	beq.n	800d50e <_strtod_l+0x296>
 800d416:	f04f 0c00 	mov.w	ip, #0
 800d41a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d41e:	2909      	cmp	r1, #9
 800d420:	f240 8082 	bls.w	800d528 <_strtod_l+0x2b0>
 800d424:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d428:	2600      	movs	r6, #0
 800d42a:	e09d      	b.n	800d568 <_strtod_l+0x2f0>
 800d42c:	2300      	movs	r3, #0
 800d42e:	e7c4      	b.n	800d3ba <_strtod_l+0x142>
 800d430:	2f08      	cmp	r7, #8
 800d432:	bfd8      	it	le
 800d434:	9907      	ldrle	r1, [sp, #28]
 800d436:	f100 0001 	add.w	r0, r0, #1
 800d43a:	bfda      	itte	le
 800d43c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d440:	9307      	strle	r3, [sp, #28]
 800d442:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d446:	3701      	adds	r7, #1
 800d448:	9017      	str	r0, [sp, #92]	; 0x5c
 800d44a:	e7bf      	b.n	800d3cc <_strtod_l+0x154>
 800d44c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d44e:	195a      	adds	r2, r3, r5
 800d450:	9217      	str	r2, [sp, #92]	; 0x5c
 800d452:	5d5a      	ldrb	r2, [r3, r5]
 800d454:	2f00      	cmp	r7, #0
 800d456:	d037      	beq.n	800d4c8 <_strtod_l+0x250>
 800d458:	9005      	str	r0, [sp, #20]
 800d45a:	463d      	mov	r5, r7
 800d45c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d460:	2b09      	cmp	r3, #9
 800d462:	d912      	bls.n	800d48a <_strtod_l+0x212>
 800d464:	2301      	movs	r3, #1
 800d466:	e7c2      	b.n	800d3ee <_strtod_l+0x176>
 800d468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d46e:	785a      	ldrb	r2, [r3, #1]
 800d470:	3001      	adds	r0, #1
 800d472:	2a30      	cmp	r2, #48	; 0x30
 800d474:	d0f8      	beq.n	800d468 <_strtod_l+0x1f0>
 800d476:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d47a:	2b08      	cmp	r3, #8
 800d47c:	f200 84d9 	bhi.w	800de32 <_strtod_l+0xbba>
 800d480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d482:	9005      	str	r0, [sp, #20]
 800d484:	2000      	movs	r0, #0
 800d486:	9308      	str	r3, [sp, #32]
 800d488:	4605      	mov	r5, r0
 800d48a:	3a30      	subs	r2, #48	; 0x30
 800d48c:	f100 0301 	add.w	r3, r0, #1
 800d490:	d014      	beq.n	800d4bc <_strtod_l+0x244>
 800d492:	9905      	ldr	r1, [sp, #20]
 800d494:	4419      	add	r1, r3
 800d496:	9105      	str	r1, [sp, #20]
 800d498:	462b      	mov	r3, r5
 800d49a:	eb00 0e05 	add.w	lr, r0, r5
 800d49e:	210a      	movs	r1, #10
 800d4a0:	4573      	cmp	r3, lr
 800d4a2:	d113      	bne.n	800d4cc <_strtod_l+0x254>
 800d4a4:	182b      	adds	r3, r5, r0
 800d4a6:	2b08      	cmp	r3, #8
 800d4a8:	f105 0501 	add.w	r5, r5, #1
 800d4ac:	4405      	add	r5, r0
 800d4ae:	dc1c      	bgt.n	800d4ea <_strtod_l+0x272>
 800d4b0:	9907      	ldr	r1, [sp, #28]
 800d4b2:	230a      	movs	r3, #10
 800d4b4:	fb03 2301 	mla	r3, r3, r1, r2
 800d4b8:	9307      	str	r3, [sp, #28]
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d4be:	1c51      	adds	r1, r2, #1
 800d4c0:	9117      	str	r1, [sp, #92]	; 0x5c
 800d4c2:	7852      	ldrb	r2, [r2, #1]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	e7c9      	b.n	800d45c <_strtod_l+0x1e4>
 800d4c8:	4638      	mov	r0, r7
 800d4ca:	e7d2      	b.n	800d472 <_strtod_l+0x1fa>
 800d4cc:	2b08      	cmp	r3, #8
 800d4ce:	dc04      	bgt.n	800d4da <_strtod_l+0x262>
 800d4d0:	9e07      	ldr	r6, [sp, #28]
 800d4d2:	434e      	muls	r6, r1
 800d4d4:	9607      	str	r6, [sp, #28]
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	e7e2      	b.n	800d4a0 <_strtod_l+0x228>
 800d4da:	f103 0c01 	add.w	ip, r3, #1
 800d4de:	f1bc 0f10 	cmp.w	ip, #16
 800d4e2:	bfd8      	it	le
 800d4e4:	fb01 f909 	mulle.w	r9, r1, r9
 800d4e8:	e7f5      	b.n	800d4d6 <_strtod_l+0x25e>
 800d4ea:	2d10      	cmp	r5, #16
 800d4ec:	bfdc      	itt	le
 800d4ee:	230a      	movle	r3, #10
 800d4f0:	fb03 2909 	mlale	r9, r3, r9, r2
 800d4f4:	e7e1      	b.n	800d4ba <_strtod_l+0x242>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	9305      	str	r3, [sp, #20]
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e77c      	b.n	800d3f8 <_strtod_l+0x180>
 800d4fe:	f04f 0c00 	mov.w	ip, #0
 800d502:	f108 0202 	add.w	r2, r8, #2
 800d506:	9217      	str	r2, [sp, #92]	; 0x5c
 800d508:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d50c:	e785      	b.n	800d41a <_strtod_l+0x1a2>
 800d50e:	f04f 0c01 	mov.w	ip, #1
 800d512:	e7f6      	b.n	800d502 <_strtod_l+0x28a>
 800d514:	080144c0 	.word	0x080144c0
 800d518:	08014274 	.word	0x08014274
 800d51c:	7ff00000 	.word	0x7ff00000
 800d520:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d522:	1c51      	adds	r1, r2, #1
 800d524:	9117      	str	r1, [sp, #92]	; 0x5c
 800d526:	7852      	ldrb	r2, [r2, #1]
 800d528:	2a30      	cmp	r2, #48	; 0x30
 800d52a:	d0f9      	beq.n	800d520 <_strtod_l+0x2a8>
 800d52c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d530:	2908      	cmp	r1, #8
 800d532:	f63f af79 	bhi.w	800d428 <_strtod_l+0x1b0>
 800d536:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d53a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d53c:	9206      	str	r2, [sp, #24]
 800d53e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d540:	1c51      	adds	r1, r2, #1
 800d542:	9117      	str	r1, [sp, #92]	; 0x5c
 800d544:	7852      	ldrb	r2, [r2, #1]
 800d546:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d54a:	2e09      	cmp	r6, #9
 800d54c:	d937      	bls.n	800d5be <_strtod_l+0x346>
 800d54e:	9e06      	ldr	r6, [sp, #24]
 800d550:	1b89      	subs	r1, r1, r6
 800d552:	2908      	cmp	r1, #8
 800d554:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d558:	dc02      	bgt.n	800d560 <_strtod_l+0x2e8>
 800d55a:	4576      	cmp	r6, lr
 800d55c:	bfa8      	it	ge
 800d55e:	4676      	movge	r6, lr
 800d560:	f1bc 0f00 	cmp.w	ip, #0
 800d564:	d000      	beq.n	800d568 <_strtod_l+0x2f0>
 800d566:	4276      	negs	r6, r6
 800d568:	2d00      	cmp	r5, #0
 800d56a:	d14d      	bne.n	800d608 <_strtod_l+0x390>
 800d56c:	9904      	ldr	r1, [sp, #16]
 800d56e:	4301      	orrs	r1, r0
 800d570:	f47f aec6 	bne.w	800d300 <_strtod_l+0x88>
 800d574:	2b00      	cmp	r3, #0
 800d576:	f47f aee1 	bne.w	800d33c <_strtod_l+0xc4>
 800d57a:	2a69      	cmp	r2, #105	; 0x69
 800d57c:	d027      	beq.n	800d5ce <_strtod_l+0x356>
 800d57e:	dc24      	bgt.n	800d5ca <_strtod_l+0x352>
 800d580:	2a49      	cmp	r2, #73	; 0x49
 800d582:	d024      	beq.n	800d5ce <_strtod_l+0x356>
 800d584:	2a4e      	cmp	r2, #78	; 0x4e
 800d586:	f47f aed9 	bne.w	800d33c <_strtod_l+0xc4>
 800d58a:	499f      	ldr	r1, [pc, #636]	; (800d808 <_strtod_l+0x590>)
 800d58c:	a817      	add	r0, sp, #92	; 0x5c
 800d58e:	f001 fe75 	bl	800f27c <__match>
 800d592:	2800      	cmp	r0, #0
 800d594:	f43f aed2 	beq.w	800d33c <_strtod_l+0xc4>
 800d598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	2b28      	cmp	r3, #40	; 0x28
 800d59e:	d12d      	bne.n	800d5fc <_strtod_l+0x384>
 800d5a0:	499a      	ldr	r1, [pc, #616]	; (800d80c <_strtod_l+0x594>)
 800d5a2:	aa1a      	add	r2, sp, #104	; 0x68
 800d5a4:	a817      	add	r0, sp, #92	; 0x5c
 800d5a6:	f001 fe7d 	bl	800f2a4 <__hexnan>
 800d5aa:	2805      	cmp	r0, #5
 800d5ac:	d126      	bne.n	800d5fc <_strtod_l+0x384>
 800d5ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d5b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d5b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d5b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d5bc:	e6a0      	b.n	800d300 <_strtod_l+0x88>
 800d5be:	210a      	movs	r1, #10
 800d5c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d5c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d5c8:	e7b9      	b.n	800d53e <_strtod_l+0x2c6>
 800d5ca:	2a6e      	cmp	r2, #110	; 0x6e
 800d5cc:	e7db      	b.n	800d586 <_strtod_l+0x30e>
 800d5ce:	4990      	ldr	r1, [pc, #576]	; (800d810 <_strtod_l+0x598>)
 800d5d0:	a817      	add	r0, sp, #92	; 0x5c
 800d5d2:	f001 fe53 	bl	800f27c <__match>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	f43f aeb0 	beq.w	800d33c <_strtod_l+0xc4>
 800d5dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5de:	498d      	ldr	r1, [pc, #564]	; (800d814 <_strtod_l+0x59c>)
 800d5e0:	3b01      	subs	r3, #1
 800d5e2:	a817      	add	r0, sp, #92	; 0x5c
 800d5e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d5e6:	f001 fe49 	bl	800f27c <__match>
 800d5ea:	b910      	cbnz	r0, 800d5f2 <_strtod_l+0x37a>
 800d5ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	9317      	str	r3, [sp, #92]	; 0x5c
 800d5f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d824 <_strtod_l+0x5ac>
 800d5f6:	f04f 0a00 	mov.w	sl, #0
 800d5fa:	e681      	b.n	800d300 <_strtod_l+0x88>
 800d5fc:	4886      	ldr	r0, [pc, #536]	; (800d818 <_strtod_l+0x5a0>)
 800d5fe:	f003 f967 	bl	80108d0 <nan>
 800d602:	ec5b ab10 	vmov	sl, fp, d0
 800d606:	e67b      	b.n	800d300 <_strtod_l+0x88>
 800d608:	9b05      	ldr	r3, [sp, #20]
 800d60a:	9807      	ldr	r0, [sp, #28]
 800d60c:	1af3      	subs	r3, r6, r3
 800d60e:	2f00      	cmp	r7, #0
 800d610:	bf08      	it	eq
 800d612:	462f      	moveq	r7, r5
 800d614:	2d10      	cmp	r5, #16
 800d616:	9306      	str	r3, [sp, #24]
 800d618:	46a8      	mov	r8, r5
 800d61a:	bfa8      	it	ge
 800d61c:	f04f 0810 	movge.w	r8, #16
 800d620:	f7f2 ff88 	bl	8000534 <__aeabi_ui2d>
 800d624:	2d09      	cmp	r5, #9
 800d626:	4682      	mov	sl, r0
 800d628:	468b      	mov	fp, r1
 800d62a:	dd13      	ble.n	800d654 <_strtod_l+0x3dc>
 800d62c:	4b7b      	ldr	r3, [pc, #492]	; (800d81c <_strtod_l+0x5a4>)
 800d62e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d632:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d636:	f7f2 fff7 	bl	8000628 <__aeabi_dmul>
 800d63a:	4682      	mov	sl, r0
 800d63c:	4648      	mov	r0, r9
 800d63e:	468b      	mov	fp, r1
 800d640:	f7f2 ff78 	bl	8000534 <__aeabi_ui2d>
 800d644:	4602      	mov	r2, r0
 800d646:	460b      	mov	r3, r1
 800d648:	4650      	mov	r0, sl
 800d64a:	4659      	mov	r1, fp
 800d64c:	f7f2 fe36 	bl	80002bc <__adddf3>
 800d650:	4682      	mov	sl, r0
 800d652:	468b      	mov	fp, r1
 800d654:	2d0f      	cmp	r5, #15
 800d656:	dc38      	bgt.n	800d6ca <_strtod_l+0x452>
 800d658:	9b06      	ldr	r3, [sp, #24]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	f43f ae50 	beq.w	800d300 <_strtod_l+0x88>
 800d660:	dd24      	ble.n	800d6ac <_strtod_l+0x434>
 800d662:	2b16      	cmp	r3, #22
 800d664:	dc0b      	bgt.n	800d67e <_strtod_l+0x406>
 800d666:	496d      	ldr	r1, [pc, #436]	; (800d81c <_strtod_l+0x5a4>)
 800d668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d66c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d670:	4652      	mov	r2, sl
 800d672:	465b      	mov	r3, fp
 800d674:	f7f2 ffd8 	bl	8000628 <__aeabi_dmul>
 800d678:	4682      	mov	sl, r0
 800d67a:	468b      	mov	fp, r1
 800d67c:	e640      	b.n	800d300 <_strtod_l+0x88>
 800d67e:	9a06      	ldr	r2, [sp, #24]
 800d680:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d684:	4293      	cmp	r3, r2
 800d686:	db20      	blt.n	800d6ca <_strtod_l+0x452>
 800d688:	4c64      	ldr	r4, [pc, #400]	; (800d81c <_strtod_l+0x5a4>)
 800d68a:	f1c5 050f 	rsb	r5, r5, #15
 800d68e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d692:	4652      	mov	r2, sl
 800d694:	465b      	mov	r3, fp
 800d696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d69a:	f7f2 ffc5 	bl	8000628 <__aeabi_dmul>
 800d69e:	9b06      	ldr	r3, [sp, #24]
 800d6a0:	1b5d      	subs	r5, r3, r5
 800d6a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d6a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d6aa:	e7e3      	b.n	800d674 <_strtod_l+0x3fc>
 800d6ac:	9b06      	ldr	r3, [sp, #24]
 800d6ae:	3316      	adds	r3, #22
 800d6b0:	db0b      	blt.n	800d6ca <_strtod_l+0x452>
 800d6b2:	9b05      	ldr	r3, [sp, #20]
 800d6b4:	1b9e      	subs	r6, r3, r6
 800d6b6:	4b59      	ldr	r3, [pc, #356]	; (800d81c <_strtod_l+0x5a4>)
 800d6b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d6bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d6c0:	4650      	mov	r0, sl
 800d6c2:	4659      	mov	r1, fp
 800d6c4:	f7f3 f8da 	bl	800087c <__aeabi_ddiv>
 800d6c8:	e7d6      	b.n	800d678 <_strtod_l+0x400>
 800d6ca:	9b06      	ldr	r3, [sp, #24]
 800d6cc:	eba5 0808 	sub.w	r8, r5, r8
 800d6d0:	4498      	add	r8, r3
 800d6d2:	f1b8 0f00 	cmp.w	r8, #0
 800d6d6:	dd74      	ble.n	800d7c2 <_strtod_l+0x54a>
 800d6d8:	f018 030f 	ands.w	r3, r8, #15
 800d6dc:	d00a      	beq.n	800d6f4 <_strtod_l+0x47c>
 800d6de:	494f      	ldr	r1, [pc, #316]	; (800d81c <_strtod_l+0x5a4>)
 800d6e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d6e4:	4652      	mov	r2, sl
 800d6e6:	465b      	mov	r3, fp
 800d6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6ec:	f7f2 ff9c 	bl	8000628 <__aeabi_dmul>
 800d6f0:	4682      	mov	sl, r0
 800d6f2:	468b      	mov	fp, r1
 800d6f4:	f038 080f 	bics.w	r8, r8, #15
 800d6f8:	d04f      	beq.n	800d79a <_strtod_l+0x522>
 800d6fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d6fe:	dd22      	ble.n	800d746 <_strtod_l+0x4ce>
 800d700:	2500      	movs	r5, #0
 800d702:	462e      	mov	r6, r5
 800d704:	9507      	str	r5, [sp, #28]
 800d706:	9505      	str	r5, [sp, #20]
 800d708:	2322      	movs	r3, #34	; 0x22
 800d70a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d824 <_strtod_l+0x5ac>
 800d70e:	6023      	str	r3, [r4, #0]
 800d710:	f04f 0a00 	mov.w	sl, #0
 800d714:	9b07      	ldr	r3, [sp, #28]
 800d716:	2b00      	cmp	r3, #0
 800d718:	f43f adf2 	beq.w	800d300 <_strtod_l+0x88>
 800d71c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d71e:	4620      	mov	r0, r4
 800d720:	f001 fecc 	bl	800f4bc <_Bfree>
 800d724:	9905      	ldr	r1, [sp, #20]
 800d726:	4620      	mov	r0, r4
 800d728:	f001 fec8 	bl	800f4bc <_Bfree>
 800d72c:	4631      	mov	r1, r6
 800d72e:	4620      	mov	r0, r4
 800d730:	f001 fec4 	bl	800f4bc <_Bfree>
 800d734:	9907      	ldr	r1, [sp, #28]
 800d736:	4620      	mov	r0, r4
 800d738:	f001 fec0 	bl	800f4bc <_Bfree>
 800d73c:	4629      	mov	r1, r5
 800d73e:	4620      	mov	r0, r4
 800d740:	f001 febc 	bl	800f4bc <_Bfree>
 800d744:	e5dc      	b.n	800d300 <_strtod_l+0x88>
 800d746:	4b36      	ldr	r3, [pc, #216]	; (800d820 <_strtod_l+0x5a8>)
 800d748:	9304      	str	r3, [sp, #16]
 800d74a:	2300      	movs	r3, #0
 800d74c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d750:	4650      	mov	r0, sl
 800d752:	4659      	mov	r1, fp
 800d754:	4699      	mov	r9, r3
 800d756:	f1b8 0f01 	cmp.w	r8, #1
 800d75a:	dc21      	bgt.n	800d7a0 <_strtod_l+0x528>
 800d75c:	b10b      	cbz	r3, 800d762 <_strtod_l+0x4ea>
 800d75e:	4682      	mov	sl, r0
 800d760:	468b      	mov	fp, r1
 800d762:	4b2f      	ldr	r3, [pc, #188]	; (800d820 <_strtod_l+0x5a8>)
 800d764:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d768:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d76c:	4652      	mov	r2, sl
 800d76e:	465b      	mov	r3, fp
 800d770:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d774:	f7f2 ff58 	bl	8000628 <__aeabi_dmul>
 800d778:	4b2a      	ldr	r3, [pc, #168]	; (800d824 <_strtod_l+0x5ac>)
 800d77a:	460a      	mov	r2, r1
 800d77c:	400b      	ands	r3, r1
 800d77e:	492a      	ldr	r1, [pc, #168]	; (800d828 <_strtod_l+0x5b0>)
 800d780:	428b      	cmp	r3, r1
 800d782:	4682      	mov	sl, r0
 800d784:	d8bc      	bhi.n	800d700 <_strtod_l+0x488>
 800d786:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d78a:	428b      	cmp	r3, r1
 800d78c:	bf86      	itte	hi
 800d78e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d82c <_strtod_l+0x5b4>
 800d792:	f04f 3aff 	movhi.w	sl, #4294967295
 800d796:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d79a:	2300      	movs	r3, #0
 800d79c:	9304      	str	r3, [sp, #16]
 800d79e:	e084      	b.n	800d8aa <_strtod_l+0x632>
 800d7a0:	f018 0f01 	tst.w	r8, #1
 800d7a4:	d005      	beq.n	800d7b2 <_strtod_l+0x53a>
 800d7a6:	9b04      	ldr	r3, [sp, #16]
 800d7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ac:	f7f2 ff3c 	bl	8000628 <__aeabi_dmul>
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	9a04      	ldr	r2, [sp, #16]
 800d7b4:	3208      	adds	r2, #8
 800d7b6:	f109 0901 	add.w	r9, r9, #1
 800d7ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d7be:	9204      	str	r2, [sp, #16]
 800d7c0:	e7c9      	b.n	800d756 <_strtod_l+0x4de>
 800d7c2:	d0ea      	beq.n	800d79a <_strtod_l+0x522>
 800d7c4:	f1c8 0800 	rsb	r8, r8, #0
 800d7c8:	f018 020f 	ands.w	r2, r8, #15
 800d7cc:	d00a      	beq.n	800d7e4 <_strtod_l+0x56c>
 800d7ce:	4b13      	ldr	r3, [pc, #76]	; (800d81c <_strtod_l+0x5a4>)
 800d7d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7d4:	4650      	mov	r0, sl
 800d7d6:	4659      	mov	r1, fp
 800d7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7dc:	f7f3 f84e 	bl	800087c <__aeabi_ddiv>
 800d7e0:	4682      	mov	sl, r0
 800d7e2:	468b      	mov	fp, r1
 800d7e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d7e8:	d0d7      	beq.n	800d79a <_strtod_l+0x522>
 800d7ea:	f1b8 0f1f 	cmp.w	r8, #31
 800d7ee:	dd1f      	ble.n	800d830 <_strtod_l+0x5b8>
 800d7f0:	2500      	movs	r5, #0
 800d7f2:	462e      	mov	r6, r5
 800d7f4:	9507      	str	r5, [sp, #28]
 800d7f6:	9505      	str	r5, [sp, #20]
 800d7f8:	2322      	movs	r3, #34	; 0x22
 800d7fa:	f04f 0a00 	mov.w	sl, #0
 800d7fe:	f04f 0b00 	mov.w	fp, #0
 800d802:	6023      	str	r3, [r4, #0]
 800d804:	e786      	b.n	800d714 <_strtod_l+0x49c>
 800d806:	bf00      	nop
 800d808:	08014249 	.word	0x08014249
 800d80c:	08014288 	.word	0x08014288
 800d810:	08014241 	.word	0x08014241
 800d814:	080143cc 	.word	0x080143cc
 800d818:	08014693 	.word	0x08014693
 800d81c:	08014558 	.word	0x08014558
 800d820:	08014530 	.word	0x08014530
 800d824:	7ff00000 	.word	0x7ff00000
 800d828:	7ca00000 	.word	0x7ca00000
 800d82c:	7fefffff 	.word	0x7fefffff
 800d830:	f018 0310 	ands.w	r3, r8, #16
 800d834:	bf18      	it	ne
 800d836:	236a      	movne	r3, #106	; 0x6a
 800d838:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800dbe8 <_strtod_l+0x970>
 800d83c:	9304      	str	r3, [sp, #16]
 800d83e:	4650      	mov	r0, sl
 800d840:	4659      	mov	r1, fp
 800d842:	2300      	movs	r3, #0
 800d844:	f018 0f01 	tst.w	r8, #1
 800d848:	d004      	beq.n	800d854 <_strtod_l+0x5dc>
 800d84a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d84e:	f7f2 feeb 	bl	8000628 <__aeabi_dmul>
 800d852:	2301      	movs	r3, #1
 800d854:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d858:	f109 0908 	add.w	r9, r9, #8
 800d85c:	d1f2      	bne.n	800d844 <_strtod_l+0x5cc>
 800d85e:	b10b      	cbz	r3, 800d864 <_strtod_l+0x5ec>
 800d860:	4682      	mov	sl, r0
 800d862:	468b      	mov	fp, r1
 800d864:	9b04      	ldr	r3, [sp, #16]
 800d866:	b1c3      	cbz	r3, 800d89a <_strtod_l+0x622>
 800d868:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d86c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d870:	2b00      	cmp	r3, #0
 800d872:	4659      	mov	r1, fp
 800d874:	dd11      	ble.n	800d89a <_strtod_l+0x622>
 800d876:	2b1f      	cmp	r3, #31
 800d878:	f340 8124 	ble.w	800dac4 <_strtod_l+0x84c>
 800d87c:	2b34      	cmp	r3, #52	; 0x34
 800d87e:	bfde      	ittt	le
 800d880:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d884:	f04f 33ff 	movle.w	r3, #4294967295
 800d888:	fa03 f202 	lslle.w	r2, r3, r2
 800d88c:	f04f 0a00 	mov.w	sl, #0
 800d890:	bfcc      	ite	gt
 800d892:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d896:	ea02 0b01 	andle.w	fp, r2, r1
 800d89a:	2200      	movs	r2, #0
 800d89c:	2300      	movs	r3, #0
 800d89e:	4650      	mov	r0, sl
 800d8a0:	4659      	mov	r1, fp
 800d8a2:	f7f3 f929 	bl	8000af8 <__aeabi_dcmpeq>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d1a2      	bne.n	800d7f0 <_strtod_l+0x578>
 800d8aa:	9b07      	ldr	r3, [sp, #28]
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	9908      	ldr	r1, [sp, #32]
 800d8b0:	462b      	mov	r3, r5
 800d8b2:	463a      	mov	r2, r7
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	f001 fe69 	bl	800f58c <__s2b>
 800d8ba:	9007      	str	r0, [sp, #28]
 800d8bc:	2800      	cmp	r0, #0
 800d8be:	f43f af1f 	beq.w	800d700 <_strtod_l+0x488>
 800d8c2:	9b05      	ldr	r3, [sp, #20]
 800d8c4:	1b9e      	subs	r6, r3, r6
 800d8c6:	9b06      	ldr	r3, [sp, #24]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	bfb4      	ite	lt
 800d8cc:	4633      	movlt	r3, r6
 800d8ce:	2300      	movge	r3, #0
 800d8d0:	930c      	str	r3, [sp, #48]	; 0x30
 800d8d2:	9b06      	ldr	r3, [sp, #24]
 800d8d4:	2500      	movs	r5, #0
 800d8d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d8da:	9312      	str	r3, [sp, #72]	; 0x48
 800d8dc:	462e      	mov	r6, r5
 800d8de:	9b07      	ldr	r3, [sp, #28]
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	6859      	ldr	r1, [r3, #4]
 800d8e4:	f001 fdaa 	bl	800f43c <_Balloc>
 800d8e8:	9005      	str	r0, [sp, #20]
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	f43f af0c 	beq.w	800d708 <_strtod_l+0x490>
 800d8f0:	9b07      	ldr	r3, [sp, #28]
 800d8f2:	691a      	ldr	r2, [r3, #16]
 800d8f4:	3202      	adds	r2, #2
 800d8f6:	f103 010c 	add.w	r1, r3, #12
 800d8fa:	0092      	lsls	r2, r2, #2
 800d8fc:	300c      	adds	r0, #12
 800d8fe:	f7fe fd77 	bl	800c3f0 <memcpy>
 800d902:	ec4b ab10 	vmov	d0, sl, fp
 800d906:	aa1a      	add	r2, sp, #104	; 0x68
 800d908:	a919      	add	r1, sp, #100	; 0x64
 800d90a:	4620      	mov	r0, r4
 800d90c:	f002 f984 	bl	800fc18 <__d2b>
 800d910:	ec4b ab18 	vmov	d8, sl, fp
 800d914:	9018      	str	r0, [sp, #96]	; 0x60
 800d916:	2800      	cmp	r0, #0
 800d918:	f43f aef6 	beq.w	800d708 <_strtod_l+0x490>
 800d91c:	2101      	movs	r1, #1
 800d91e:	4620      	mov	r0, r4
 800d920:	f001 fece 	bl	800f6c0 <__i2b>
 800d924:	4606      	mov	r6, r0
 800d926:	2800      	cmp	r0, #0
 800d928:	f43f aeee 	beq.w	800d708 <_strtod_l+0x490>
 800d92c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d92e:	9904      	ldr	r1, [sp, #16]
 800d930:	2b00      	cmp	r3, #0
 800d932:	bfab      	itete	ge
 800d934:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d936:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d938:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d93a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d93e:	bfac      	ite	ge
 800d940:	eb03 0902 	addge.w	r9, r3, r2
 800d944:	1ad7      	sublt	r7, r2, r3
 800d946:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d948:	eba3 0801 	sub.w	r8, r3, r1
 800d94c:	4490      	add	r8, r2
 800d94e:	4ba1      	ldr	r3, [pc, #644]	; (800dbd4 <_strtod_l+0x95c>)
 800d950:	f108 38ff 	add.w	r8, r8, #4294967295
 800d954:	4598      	cmp	r8, r3
 800d956:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d95a:	f280 80c7 	bge.w	800daec <_strtod_l+0x874>
 800d95e:	eba3 0308 	sub.w	r3, r3, r8
 800d962:	2b1f      	cmp	r3, #31
 800d964:	eba2 0203 	sub.w	r2, r2, r3
 800d968:	f04f 0101 	mov.w	r1, #1
 800d96c:	f300 80b1 	bgt.w	800dad2 <_strtod_l+0x85a>
 800d970:	fa01 f303 	lsl.w	r3, r1, r3
 800d974:	930d      	str	r3, [sp, #52]	; 0x34
 800d976:	2300      	movs	r3, #0
 800d978:	9308      	str	r3, [sp, #32]
 800d97a:	eb09 0802 	add.w	r8, r9, r2
 800d97e:	9b04      	ldr	r3, [sp, #16]
 800d980:	45c1      	cmp	r9, r8
 800d982:	4417      	add	r7, r2
 800d984:	441f      	add	r7, r3
 800d986:	464b      	mov	r3, r9
 800d988:	bfa8      	it	ge
 800d98a:	4643      	movge	r3, r8
 800d98c:	42bb      	cmp	r3, r7
 800d98e:	bfa8      	it	ge
 800d990:	463b      	movge	r3, r7
 800d992:	2b00      	cmp	r3, #0
 800d994:	bfc2      	ittt	gt
 800d996:	eba8 0803 	subgt.w	r8, r8, r3
 800d99a:	1aff      	subgt	r7, r7, r3
 800d99c:	eba9 0903 	subgt.w	r9, r9, r3
 800d9a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	dd17      	ble.n	800d9d6 <_strtod_l+0x75e>
 800d9a6:	4631      	mov	r1, r6
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f001 ff48 	bl	800f840 <__pow5mult>
 800d9b0:	4606      	mov	r6, r0
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	f43f aea8 	beq.w	800d708 <_strtod_l+0x490>
 800d9b8:	4601      	mov	r1, r0
 800d9ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d9bc:	4620      	mov	r0, r4
 800d9be:	f001 fe95 	bl	800f6ec <__multiply>
 800d9c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	f43f ae9f 	beq.w	800d708 <_strtod_l+0x490>
 800d9ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f001 fd75 	bl	800f4bc <_Bfree>
 800d9d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9d4:	9318      	str	r3, [sp, #96]	; 0x60
 800d9d6:	f1b8 0f00 	cmp.w	r8, #0
 800d9da:	f300 808c 	bgt.w	800daf6 <_strtod_l+0x87e>
 800d9de:	9b06      	ldr	r3, [sp, #24]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	dd08      	ble.n	800d9f6 <_strtod_l+0x77e>
 800d9e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d9e6:	9905      	ldr	r1, [sp, #20]
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f001 ff29 	bl	800f840 <__pow5mult>
 800d9ee:	9005      	str	r0, [sp, #20]
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	f43f ae89 	beq.w	800d708 <_strtod_l+0x490>
 800d9f6:	2f00      	cmp	r7, #0
 800d9f8:	dd08      	ble.n	800da0c <_strtod_l+0x794>
 800d9fa:	9905      	ldr	r1, [sp, #20]
 800d9fc:	463a      	mov	r2, r7
 800d9fe:	4620      	mov	r0, r4
 800da00:	f001 ff78 	bl	800f8f4 <__lshift>
 800da04:	9005      	str	r0, [sp, #20]
 800da06:	2800      	cmp	r0, #0
 800da08:	f43f ae7e 	beq.w	800d708 <_strtod_l+0x490>
 800da0c:	f1b9 0f00 	cmp.w	r9, #0
 800da10:	dd08      	ble.n	800da24 <_strtod_l+0x7ac>
 800da12:	4631      	mov	r1, r6
 800da14:	464a      	mov	r2, r9
 800da16:	4620      	mov	r0, r4
 800da18:	f001 ff6c 	bl	800f8f4 <__lshift>
 800da1c:	4606      	mov	r6, r0
 800da1e:	2800      	cmp	r0, #0
 800da20:	f43f ae72 	beq.w	800d708 <_strtod_l+0x490>
 800da24:	9a05      	ldr	r2, [sp, #20]
 800da26:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da28:	4620      	mov	r0, r4
 800da2a:	f001 ffef 	bl	800fa0c <__mdiff>
 800da2e:	4605      	mov	r5, r0
 800da30:	2800      	cmp	r0, #0
 800da32:	f43f ae69 	beq.w	800d708 <_strtod_l+0x490>
 800da36:	68c3      	ldr	r3, [r0, #12]
 800da38:	930b      	str	r3, [sp, #44]	; 0x2c
 800da3a:	2300      	movs	r3, #0
 800da3c:	60c3      	str	r3, [r0, #12]
 800da3e:	4631      	mov	r1, r6
 800da40:	f001 ffc8 	bl	800f9d4 <__mcmp>
 800da44:	2800      	cmp	r0, #0
 800da46:	da60      	bge.n	800db0a <_strtod_l+0x892>
 800da48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da4a:	ea53 030a 	orrs.w	r3, r3, sl
 800da4e:	f040 8082 	bne.w	800db56 <_strtod_l+0x8de>
 800da52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da56:	2b00      	cmp	r3, #0
 800da58:	d17d      	bne.n	800db56 <_strtod_l+0x8de>
 800da5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da5e:	0d1b      	lsrs	r3, r3, #20
 800da60:	051b      	lsls	r3, r3, #20
 800da62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800da66:	d976      	bls.n	800db56 <_strtod_l+0x8de>
 800da68:	696b      	ldr	r3, [r5, #20]
 800da6a:	b913      	cbnz	r3, 800da72 <_strtod_l+0x7fa>
 800da6c:	692b      	ldr	r3, [r5, #16]
 800da6e:	2b01      	cmp	r3, #1
 800da70:	dd71      	ble.n	800db56 <_strtod_l+0x8de>
 800da72:	4629      	mov	r1, r5
 800da74:	2201      	movs	r2, #1
 800da76:	4620      	mov	r0, r4
 800da78:	f001 ff3c 	bl	800f8f4 <__lshift>
 800da7c:	4631      	mov	r1, r6
 800da7e:	4605      	mov	r5, r0
 800da80:	f001 ffa8 	bl	800f9d4 <__mcmp>
 800da84:	2800      	cmp	r0, #0
 800da86:	dd66      	ble.n	800db56 <_strtod_l+0x8de>
 800da88:	9904      	ldr	r1, [sp, #16]
 800da8a:	4a53      	ldr	r2, [pc, #332]	; (800dbd8 <_strtod_l+0x960>)
 800da8c:	465b      	mov	r3, fp
 800da8e:	2900      	cmp	r1, #0
 800da90:	f000 8081 	beq.w	800db96 <_strtod_l+0x91e>
 800da94:	ea02 010b 	and.w	r1, r2, fp
 800da98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800da9c:	dc7b      	bgt.n	800db96 <_strtod_l+0x91e>
 800da9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800daa2:	f77f aea9 	ble.w	800d7f8 <_strtod_l+0x580>
 800daa6:	4b4d      	ldr	r3, [pc, #308]	; (800dbdc <_strtod_l+0x964>)
 800daa8:	4650      	mov	r0, sl
 800daaa:	4659      	mov	r1, fp
 800daac:	2200      	movs	r2, #0
 800daae:	f7f2 fdbb 	bl	8000628 <__aeabi_dmul>
 800dab2:	460b      	mov	r3, r1
 800dab4:	4303      	orrs	r3, r0
 800dab6:	bf08      	it	eq
 800dab8:	2322      	moveq	r3, #34	; 0x22
 800daba:	4682      	mov	sl, r0
 800dabc:	468b      	mov	fp, r1
 800dabe:	bf08      	it	eq
 800dac0:	6023      	streq	r3, [r4, #0]
 800dac2:	e62b      	b.n	800d71c <_strtod_l+0x4a4>
 800dac4:	f04f 32ff 	mov.w	r2, #4294967295
 800dac8:	fa02 f303 	lsl.w	r3, r2, r3
 800dacc:	ea03 0a0a 	and.w	sl, r3, sl
 800dad0:	e6e3      	b.n	800d89a <_strtod_l+0x622>
 800dad2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800dad6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800dada:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800dade:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dae2:	fa01 f308 	lsl.w	r3, r1, r8
 800dae6:	9308      	str	r3, [sp, #32]
 800dae8:	910d      	str	r1, [sp, #52]	; 0x34
 800daea:	e746      	b.n	800d97a <_strtod_l+0x702>
 800daec:	2300      	movs	r3, #0
 800daee:	9308      	str	r3, [sp, #32]
 800daf0:	2301      	movs	r3, #1
 800daf2:	930d      	str	r3, [sp, #52]	; 0x34
 800daf4:	e741      	b.n	800d97a <_strtod_l+0x702>
 800daf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800daf8:	4642      	mov	r2, r8
 800dafa:	4620      	mov	r0, r4
 800dafc:	f001 fefa 	bl	800f8f4 <__lshift>
 800db00:	9018      	str	r0, [sp, #96]	; 0x60
 800db02:	2800      	cmp	r0, #0
 800db04:	f47f af6b 	bne.w	800d9de <_strtod_l+0x766>
 800db08:	e5fe      	b.n	800d708 <_strtod_l+0x490>
 800db0a:	465f      	mov	r7, fp
 800db0c:	d16e      	bne.n	800dbec <_strtod_l+0x974>
 800db0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db14:	b342      	cbz	r2, 800db68 <_strtod_l+0x8f0>
 800db16:	4a32      	ldr	r2, [pc, #200]	; (800dbe0 <_strtod_l+0x968>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d128      	bne.n	800db6e <_strtod_l+0x8f6>
 800db1c:	9b04      	ldr	r3, [sp, #16]
 800db1e:	4651      	mov	r1, sl
 800db20:	b1eb      	cbz	r3, 800db5e <_strtod_l+0x8e6>
 800db22:	4b2d      	ldr	r3, [pc, #180]	; (800dbd8 <_strtod_l+0x960>)
 800db24:	403b      	ands	r3, r7
 800db26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800db2a:	f04f 32ff 	mov.w	r2, #4294967295
 800db2e:	d819      	bhi.n	800db64 <_strtod_l+0x8ec>
 800db30:	0d1b      	lsrs	r3, r3, #20
 800db32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800db36:	fa02 f303 	lsl.w	r3, r2, r3
 800db3a:	4299      	cmp	r1, r3
 800db3c:	d117      	bne.n	800db6e <_strtod_l+0x8f6>
 800db3e:	4b29      	ldr	r3, [pc, #164]	; (800dbe4 <_strtod_l+0x96c>)
 800db40:	429f      	cmp	r7, r3
 800db42:	d102      	bne.n	800db4a <_strtod_l+0x8d2>
 800db44:	3101      	adds	r1, #1
 800db46:	f43f addf 	beq.w	800d708 <_strtod_l+0x490>
 800db4a:	4b23      	ldr	r3, [pc, #140]	; (800dbd8 <_strtod_l+0x960>)
 800db4c:	403b      	ands	r3, r7
 800db4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800db52:	f04f 0a00 	mov.w	sl, #0
 800db56:	9b04      	ldr	r3, [sp, #16]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d1a4      	bne.n	800daa6 <_strtod_l+0x82e>
 800db5c:	e5de      	b.n	800d71c <_strtod_l+0x4a4>
 800db5e:	f04f 33ff 	mov.w	r3, #4294967295
 800db62:	e7ea      	b.n	800db3a <_strtod_l+0x8c2>
 800db64:	4613      	mov	r3, r2
 800db66:	e7e8      	b.n	800db3a <_strtod_l+0x8c2>
 800db68:	ea53 030a 	orrs.w	r3, r3, sl
 800db6c:	d08c      	beq.n	800da88 <_strtod_l+0x810>
 800db6e:	9b08      	ldr	r3, [sp, #32]
 800db70:	b1db      	cbz	r3, 800dbaa <_strtod_l+0x932>
 800db72:	423b      	tst	r3, r7
 800db74:	d0ef      	beq.n	800db56 <_strtod_l+0x8de>
 800db76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db78:	9a04      	ldr	r2, [sp, #16]
 800db7a:	4650      	mov	r0, sl
 800db7c:	4659      	mov	r1, fp
 800db7e:	b1c3      	cbz	r3, 800dbb2 <_strtod_l+0x93a>
 800db80:	f7ff fb5d 	bl	800d23e <sulp>
 800db84:	4602      	mov	r2, r0
 800db86:	460b      	mov	r3, r1
 800db88:	ec51 0b18 	vmov	r0, r1, d8
 800db8c:	f7f2 fb96 	bl	80002bc <__adddf3>
 800db90:	4682      	mov	sl, r0
 800db92:	468b      	mov	fp, r1
 800db94:	e7df      	b.n	800db56 <_strtod_l+0x8de>
 800db96:	4013      	ands	r3, r2
 800db98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800db9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dba0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dba4:	f04f 3aff 	mov.w	sl, #4294967295
 800dba8:	e7d5      	b.n	800db56 <_strtod_l+0x8de>
 800dbaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbac:	ea13 0f0a 	tst.w	r3, sl
 800dbb0:	e7e0      	b.n	800db74 <_strtod_l+0x8fc>
 800dbb2:	f7ff fb44 	bl	800d23e <sulp>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	460b      	mov	r3, r1
 800dbba:	ec51 0b18 	vmov	r0, r1, d8
 800dbbe:	f7f2 fb7b 	bl	80002b8 <__aeabi_dsub>
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	4682      	mov	sl, r0
 800dbc8:	468b      	mov	fp, r1
 800dbca:	f7f2 ff95 	bl	8000af8 <__aeabi_dcmpeq>
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	d0c1      	beq.n	800db56 <_strtod_l+0x8de>
 800dbd2:	e611      	b.n	800d7f8 <_strtod_l+0x580>
 800dbd4:	fffffc02 	.word	0xfffffc02
 800dbd8:	7ff00000 	.word	0x7ff00000
 800dbdc:	39500000 	.word	0x39500000
 800dbe0:	000fffff 	.word	0x000fffff
 800dbe4:	7fefffff 	.word	0x7fefffff
 800dbe8:	080142a0 	.word	0x080142a0
 800dbec:	4631      	mov	r1, r6
 800dbee:	4628      	mov	r0, r5
 800dbf0:	f002 f86e 	bl	800fcd0 <__ratio>
 800dbf4:	ec59 8b10 	vmov	r8, r9, d0
 800dbf8:	ee10 0a10 	vmov	r0, s0
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dc02:	4649      	mov	r1, r9
 800dc04:	f7f2 ff8c 	bl	8000b20 <__aeabi_dcmple>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	d07a      	beq.n	800dd02 <_strtod_l+0xa8a>
 800dc0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d04a      	beq.n	800dca8 <_strtod_l+0xa30>
 800dc12:	4b95      	ldr	r3, [pc, #596]	; (800de68 <_strtod_l+0xbf0>)
 800dc14:	2200      	movs	r2, #0
 800dc16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dc1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800de68 <_strtod_l+0xbf0>
 800dc1e:	f04f 0800 	mov.w	r8, #0
 800dc22:	4b92      	ldr	r3, [pc, #584]	; (800de6c <_strtod_l+0xbf4>)
 800dc24:	403b      	ands	r3, r7
 800dc26:	930d      	str	r3, [sp, #52]	; 0x34
 800dc28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc2a:	4b91      	ldr	r3, [pc, #580]	; (800de70 <_strtod_l+0xbf8>)
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	f040 80b0 	bne.w	800dd92 <_strtod_l+0xb1a>
 800dc32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dc36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800dc3a:	ec4b ab10 	vmov	d0, sl, fp
 800dc3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dc42:	f001 ff6d 	bl	800fb20 <__ulp>
 800dc46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dc4a:	ec53 2b10 	vmov	r2, r3, d0
 800dc4e:	f7f2 fceb 	bl	8000628 <__aeabi_dmul>
 800dc52:	4652      	mov	r2, sl
 800dc54:	465b      	mov	r3, fp
 800dc56:	f7f2 fb31 	bl	80002bc <__adddf3>
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	4983      	ldr	r1, [pc, #524]	; (800de6c <_strtod_l+0xbf4>)
 800dc5e:	4a85      	ldr	r2, [pc, #532]	; (800de74 <_strtod_l+0xbfc>)
 800dc60:	4019      	ands	r1, r3
 800dc62:	4291      	cmp	r1, r2
 800dc64:	4682      	mov	sl, r0
 800dc66:	d960      	bls.n	800dd2a <_strtod_l+0xab2>
 800dc68:	ee18 3a90 	vmov	r3, s17
 800dc6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d104      	bne.n	800dc7e <_strtod_l+0xa06>
 800dc74:	ee18 3a10 	vmov	r3, s16
 800dc78:	3301      	adds	r3, #1
 800dc7a:	f43f ad45 	beq.w	800d708 <_strtod_l+0x490>
 800dc7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800de80 <_strtod_l+0xc08>
 800dc82:	f04f 3aff 	mov.w	sl, #4294967295
 800dc86:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f001 fc17 	bl	800f4bc <_Bfree>
 800dc8e:	9905      	ldr	r1, [sp, #20]
 800dc90:	4620      	mov	r0, r4
 800dc92:	f001 fc13 	bl	800f4bc <_Bfree>
 800dc96:	4631      	mov	r1, r6
 800dc98:	4620      	mov	r0, r4
 800dc9a:	f001 fc0f 	bl	800f4bc <_Bfree>
 800dc9e:	4629      	mov	r1, r5
 800dca0:	4620      	mov	r0, r4
 800dca2:	f001 fc0b 	bl	800f4bc <_Bfree>
 800dca6:	e61a      	b.n	800d8de <_strtod_l+0x666>
 800dca8:	f1ba 0f00 	cmp.w	sl, #0
 800dcac:	d11b      	bne.n	800dce6 <_strtod_l+0xa6e>
 800dcae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dcb2:	b9f3      	cbnz	r3, 800dcf2 <_strtod_l+0xa7a>
 800dcb4:	4b6c      	ldr	r3, [pc, #432]	; (800de68 <_strtod_l+0xbf0>)
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	4640      	mov	r0, r8
 800dcba:	4649      	mov	r1, r9
 800dcbc:	f7f2 ff26 	bl	8000b0c <__aeabi_dcmplt>
 800dcc0:	b9d0      	cbnz	r0, 800dcf8 <_strtod_l+0xa80>
 800dcc2:	4640      	mov	r0, r8
 800dcc4:	4649      	mov	r1, r9
 800dcc6:	4b6c      	ldr	r3, [pc, #432]	; (800de78 <_strtod_l+0xc00>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f7f2 fcad 	bl	8000628 <__aeabi_dmul>
 800dcce:	4680      	mov	r8, r0
 800dcd0:	4689      	mov	r9, r1
 800dcd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dcd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dcda:	9315      	str	r3, [sp, #84]	; 0x54
 800dcdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dce4:	e79d      	b.n	800dc22 <_strtod_l+0x9aa>
 800dce6:	f1ba 0f01 	cmp.w	sl, #1
 800dcea:	d102      	bne.n	800dcf2 <_strtod_l+0xa7a>
 800dcec:	2f00      	cmp	r7, #0
 800dcee:	f43f ad83 	beq.w	800d7f8 <_strtod_l+0x580>
 800dcf2:	4b62      	ldr	r3, [pc, #392]	; (800de7c <_strtod_l+0xc04>)
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	e78e      	b.n	800dc16 <_strtod_l+0x99e>
 800dcf8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800de78 <_strtod_l+0xc00>
 800dcfc:	f04f 0800 	mov.w	r8, #0
 800dd00:	e7e7      	b.n	800dcd2 <_strtod_l+0xa5a>
 800dd02:	4b5d      	ldr	r3, [pc, #372]	; (800de78 <_strtod_l+0xc00>)
 800dd04:	4640      	mov	r0, r8
 800dd06:	4649      	mov	r1, r9
 800dd08:	2200      	movs	r2, #0
 800dd0a:	f7f2 fc8d 	bl	8000628 <__aeabi_dmul>
 800dd0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd10:	4680      	mov	r8, r0
 800dd12:	4689      	mov	r9, r1
 800dd14:	b933      	cbnz	r3, 800dd24 <_strtod_l+0xaac>
 800dd16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd1a:	900e      	str	r0, [sp, #56]	; 0x38
 800dd1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dd22:	e7dd      	b.n	800dce0 <_strtod_l+0xa68>
 800dd24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800dd28:	e7f9      	b.n	800dd1e <_strtod_l+0xaa6>
 800dd2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dd2e:	9b04      	ldr	r3, [sp, #16]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d1a8      	bne.n	800dc86 <_strtod_l+0xa0e>
 800dd34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd3a:	0d1b      	lsrs	r3, r3, #20
 800dd3c:	051b      	lsls	r3, r3, #20
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d1a1      	bne.n	800dc86 <_strtod_l+0xa0e>
 800dd42:	4640      	mov	r0, r8
 800dd44:	4649      	mov	r1, r9
 800dd46:	f7f3 f915 	bl	8000f74 <__aeabi_d2lz>
 800dd4a:	f7f2 fc3f 	bl	80005cc <__aeabi_l2d>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
 800dd52:	4640      	mov	r0, r8
 800dd54:	4649      	mov	r1, r9
 800dd56:	f7f2 faaf 	bl	80002b8 <__aeabi_dsub>
 800dd5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd60:	ea43 030a 	orr.w	r3, r3, sl
 800dd64:	4313      	orrs	r3, r2
 800dd66:	4680      	mov	r8, r0
 800dd68:	4689      	mov	r9, r1
 800dd6a:	d055      	beq.n	800de18 <_strtod_l+0xba0>
 800dd6c:	a336      	add	r3, pc, #216	; (adr r3, 800de48 <_strtod_l+0xbd0>)
 800dd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd72:	f7f2 fecb 	bl	8000b0c <__aeabi_dcmplt>
 800dd76:	2800      	cmp	r0, #0
 800dd78:	f47f acd0 	bne.w	800d71c <_strtod_l+0x4a4>
 800dd7c:	a334      	add	r3, pc, #208	; (adr r3, 800de50 <_strtod_l+0xbd8>)
 800dd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd82:	4640      	mov	r0, r8
 800dd84:	4649      	mov	r1, r9
 800dd86:	f7f2 fedf 	bl	8000b48 <__aeabi_dcmpgt>
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	f43f af7b 	beq.w	800dc86 <_strtod_l+0xa0e>
 800dd90:	e4c4      	b.n	800d71c <_strtod_l+0x4a4>
 800dd92:	9b04      	ldr	r3, [sp, #16]
 800dd94:	b333      	cbz	r3, 800dde4 <_strtod_l+0xb6c>
 800dd96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dd9c:	d822      	bhi.n	800dde4 <_strtod_l+0xb6c>
 800dd9e:	a32e      	add	r3, pc, #184	; (adr r3, 800de58 <_strtod_l+0xbe0>)
 800dda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda4:	4640      	mov	r0, r8
 800dda6:	4649      	mov	r1, r9
 800dda8:	f7f2 feba 	bl	8000b20 <__aeabi_dcmple>
 800ddac:	b1a0      	cbz	r0, 800ddd8 <_strtod_l+0xb60>
 800ddae:	4649      	mov	r1, r9
 800ddb0:	4640      	mov	r0, r8
 800ddb2:	f7f2 ff11 	bl	8000bd8 <__aeabi_d2uiz>
 800ddb6:	2801      	cmp	r0, #1
 800ddb8:	bf38      	it	cc
 800ddba:	2001      	movcc	r0, #1
 800ddbc:	f7f2 fbba 	bl	8000534 <__aeabi_ui2d>
 800ddc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddc2:	4680      	mov	r8, r0
 800ddc4:	4689      	mov	r9, r1
 800ddc6:	bb23      	cbnz	r3, 800de12 <_strtod_l+0xb9a>
 800ddc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddcc:	9010      	str	r0, [sp, #64]	; 0x40
 800ddce:	9311      	str	r3, [sp, #68]	; 0x44
 800ddd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ddd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ddd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dddc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dde0:	1a9b      	subs	r3, r3, r2
 800dde2:	9309      	str	r3, [sp, #36]	; 0x24
 800dde4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dde8:	eeb0 0a48 	vmov.f32	s0, s16
 800ddec:	eef0 0a68 	vmov.f32	s1, s17
 800ddf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ddf4:	f001 fe94 	bl	800fb20 <__ulp>
 800ddf8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ddfc:	ec53 2b10 	vmov	r2, r3, d0
 800de00:	f7f2 fc12 	bl	8000628 <__aeabi_dmul>
 800de04:	ec53 2b18 	vmov	r2, r3, d8
 800de08:	f7f2 fa58 	bl	80002bc <__adddf3>
 800de0c:	4682      	mov	sl, r0
 800de0e:	468b      	mov	fp, r1
 800de10:	e78d      	b.n	800dd2e <_strtod_l+0xab6>
 800de12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800de16:	e7db      	b.n	800ddd0 <_strtod_l+0xb58>
 800de18:	a311      	add	r3, pc, #68	; (adr r3, 800de60 <_strtod_l+0xbe8>)
 800de1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1e:	f7f2 fe75 	bl	8000b0c <__aeabi_dcmplt>
 800de22:	e7b2      	b.n	800dd8a <_strtod_l+0xb12>
 800de24:	2300      	movs	r3, #0
 800de26:	930a      	str	r3, [sp, #40]	; 0x28
 800de28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800de2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800de2c:	6013      	str	r3, [r2, #0]
 800de2e:	f7ff ba6b 	b.w	800d308 <_strtod_l+0x90>
 800de32:	2a65      	cmp	r2, #101	; 0x65
 800de34:	f43f ab5f 	beq.w	800d4f6 <_strtod_l+0x27e>
 800de38:	2a45      	cmp	r2, #69	; 0x45
 800de3a:	f43f ab5c 	beq.w	800d4f6 <_strtod_l+0x27e>
 800de3e:	2301      	movs	r3, #1
 800de40:	f7ff bb94 	b.w	800d56c <_strtod_l+0x2f4>
 800de44:	f3af 8000 	nop.w
 800de48:	94a03595 	.word	0x94a03595
 800de4c:	3fdfffff 	.word	0x3fdfffff
 800de50:	35afe535 	.word	0x35afe535
 800de54:	3fe00000 	.word	0x3fe00000
 800de58:	ffc00000 	.word	0xffc00000
 800de5c:	41dfffff 	.word	0x41dfffff
 800de60:	94a03595 	.word	0x94a03595
 800de64:	3fcfffff 	.word	0x3fcfffff
 800de68:	3ff00000 	.word	0x3ff00000
 800de6c:	7ff00000 	.word	0x7ff00000
 800de70:	7fe00000 	.word	0x7fe00000
 800de74:	7c9fffff 	.word	0x7c9fffff
 800de78:	3fe00000 	.word	0x3fe00000
 800de7c:	bff00000 	.word	0xbff00000
 800de80:	7fefffff 	.word	0x7fefffff

0800de84 <_strtod_r>:
 800de84:	4b01      	ldr	r3, [pc, #4]	; (800de8c <_strtod_r+0x8>)
 800de86:	f7ff b9f7 	b.w	800d278 <_strtod_l>
 800de8a:	bf00      	nop
 800de8c:	200000a8 	.word	0x200000a8

0800de90 <strtod>:
 800de90:	460a      	mov	r2, r1
 800de92:	4601      	mov	r1, r0
 800de94:	4802      	ldr	r0, [pc, #8]	; (800dea0 <strtod+0x10>)
 800de96:	4b03      	ldr	r3, [pc, #12]	; (800dea4 <strtod+0x14>)
 800de98:	6800      	ldr	r0, [r0, #0]
 800de9a:	f7ff b9ed 	b.w	800d278 <_strtod_l>
 800de9e:	bf00      	nop
 800dea0:	20000040 	.word	0x20000040
 800dea4:	200000a8 	.word	0x200000a8

0800dea8 <_strtol_l.constprop.0>:
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deae:	d001      	beq.n	800deb4 <_strtol_l.constprop.0+0xc>
 800deb0:	2b24      	cmp	r3, #36	; 0x24
 800deb2:	d906      	bls.n	800dec2 <_strtol_l.constprop.0+0x1a>
 800deb4:	f7fe fa72 	bl	800c39c <__errno>
 800deb8:	2316      	movs	r3, #22
 800deba:	6003      	str	r3, [r0, #0]
 800debc:	2000      	movs	r0, #0
 800debe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dec2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dfa8 <_strtol_l.constprop.0+0x100>
 800dec6:	460d      	mov	r5, r1
 800dec8:	462e      	mov	r6, r5
 800deca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dece:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ded2:	f017 0708 	ands.w	r7, r7, #8
 800ded6:	d1f7      	bne.n	800dec8 <_strtol_l.constprop.0+0x20>
 800ded8:	2c2d      	cmp	r4, #45	; 0x2d
 800deda:	d132      	bne.n	800df42 <_strtol_l.constprop.0+0x9a>
 800dedc:	782c      	ldrb	r4, [r5, #0]
 800dede:	2701      	movs	r7, #1
 800dee0:	1cb5      	adds	r5, r6, #2
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d05b      	beq.n	800df9e <_strtol_l.constprop.0+0xf6>
 800dee6:	2b10      	cmp	r3, #16
 800dee8:	d109      	bne.n	800defe <_strtol_l.constprop.0+0x56>
 800deea:	2c30      	cmp	r4, #48	; 0x30
 800deec:	d107      	bne.n	800defe <_strtol_l.constprop.0+0x56>
 800deee:	782c      	ldrb	r4, [r5, #0]
 800def0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800def4:	2c58      	cmp	r4, #88	; 0x58
 800def6:	d14d      	bne.n	800df94 <_strtol_l.constprop.0+0xec>
 800def8:	786c      	ldrb	r4, [r5, #1]
 800defa:	2310      	movs	r3, #16
 800defc:	3502      	adds	r5, #2
 800defe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800df02:	f108 38ff 	add.w	r8, r8, #4294967295
 800df06:	f04f 0c00 	mov.w	ip, #0
 800df0a:	fbb8 f9f3 	udiv	r9, r8, r3
 800df0e:	4666      	mov	r6, ip
 800df10:	fb03 8a19 	mls	sl, r3, r9, r8
 800df14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800df18:	f1be 0f09 	cmp.w	lr, #9
 800df1c:	d816      	bhi.n	800df4c <_strtol_l.constprop.0+0xa4>
 800df1e:	4674      	mov	r4, lr
 800df20:	42a3      	cmp	r3, r4
 800df22:	dd24      	ble.n	800df6e <_strtol_l.constprop.0+0xc6>
 800df24:	f1bc 0f00 	cmp.w	ip, #0
 800df28:	db1e      	blt.n	800df68 <_strtol_l.constprop.0+0xc0>
 800df2a:	45b1      	cmp	r9, r6
 800df2c:	d31c      	bcc.n	800df68 <_strtol_l.constprop.0+0xc0>
 800df2e:	d101      	bne.n	800df34 <_strtol_l.constprop.0+0x8c>
 800df30:	45a2      	cmp	sl, r4
 800df32:	db19      	blt.n	800df68 <_strtol_l.constprop.0+0xc0>
 800df34:	fb06 4603 	mla	r6, r6, r3, r4
 800df38:	f04f 0c01 	mov.w	ip, #1
 800df3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df40:	e7e8      	b.n	800df14 <_strtol_l.constprop.0+0x6c>
 800df42:	2c2b      	cmp	r4, #43	; 0x2b
 800df44:	bf04      	itt	eq
 800df46:	782c      	ldrbeq	r4, [r5, #0]
 800df48:	1cb5      	addeq	r5, r6, #2
 800df4a:	e7ca      	b.n	800dee2 <_strtol_l.constprop.0+0x3a>
 800df4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800df50:	f1be 0f19 	cmp.w	lr, #25
 800df54:	d801      	bhi.n	800df5a <_strtol_l.constprop.0+0xb2>
 800df56:	3c37      	subs	r4, #55	; 0x37
 800df58:	e7e2      	b.n	800df20 <_strtol_l.constprop.0+0x78>
 800df5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800df5e:	f1be 0f19 	cmp.w	lr, #25
 800df62:	d804      	bhi.n	800df6e <_strtol_l.constprop.0+0xc6>
 800df64:	3c57      	subs	r4, #87	; 0x57
 800df66:	e7db      	b.n	800df20 <_strtol_l.constprop.0+0x78>
 800df68:	f04f 3cff 	mov.w	ip, #4294967295
 800df6c:	e7e6      	b.n	800df3c <_strtol_l.constprop.0+0x94>
 800df6e:	f1bc 0f00 	cmp.w	ip, #0
 800df72:	da05      	bge.n	800df80 <_strtol_l.constprop.0+0xd8>
 800df74:	2322      	movs	r3, #34	; 0x22
 800df76:	6003      	str	r3, [r0, #0]
 800df78:	4646      	mov	r6, r8
 800df7a:	b942      	cbnz	r2, 800df8e <_strtol_l.constprop.0+0xe6>
 800df7c:	4630      	mov	r0, r6
 800df7e:	e79e      	b.n	800debe <_strtol_l.constprop.0+0x16>
 800df80:	b107      	cbz	r7, 800df84 <_strtol_l.constprop.0+0xdc>
 800df82:	4276      	negs	r6, r6
 800df84:	2a00      	cmp	r2, #0
 800df86:	d0f9      	beq.n	800df7c <_strtol_l.constprop.0+0xd4>
 800df88:	f1bc 0f00 	cmp.w	ip, #0
 800df8c:	d000      	beq.n	800df90 <_strtol_l.constprop.0+0xe8>
 800df8e:	1e69      	subs	r1, r5, #1
 800df90:	6011      	str	r1, [r2, #0]
 800df92:	e7f3      	b.n	800df7c <_strtol_l.constprop.0+0xd4>
 800df94:	2430      	movs	r4, #48	; 0x30
 800df96:	2b00      	cmp	r3, #0
 800df98:	d1b1      	bne.n	800defe <_strtol_l.constprop.0+0x56>
 800df9a:	2308      	movs	r3, #8
 800df9c:	e7af      	b.n	800defe <_strtol_l.constprop.0+0x56>
 800df9e:	2c30      	cmp	r4, #48	; 0x30
 800dfa0:	d0a5      	beq.n	800deee <_strtol_l.constprop.0+0x46>
 800dfa2:	230a      	movs	r3, #10
 800dfa4:	e7ab      	b.n	800defe <_strtol_l.constprop.0+0x56>
 800dfa6:	bf00      	nop
 800dfa8:	080142c9 	.word	0x080142c9

0800dfac <_strtol_r>:
 800dfac:	f7ff bf7c 	b.w	800dea8 <_strtol_l.constprop.0>

0800dfb0 <strtol>:
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	460a      	mov	r2, r1
 800dfb4:	4601      	mov	r1, r0
 800dfb6:	4802      	ldr	r0, [pc, #8]	; (800dfc0 <strtol+0x10>)
 800dfb8:	6800      	ldr	r0, [r0, #0]
 800dfba:	f7ff bf75 	b.w	800dea8 <_strtol_l.constprop.0>
 800dfbe:	bf00      	nop
 800dfc0:	20000040 	.word	0x20000040

0800dfc4 <_write_r>:
 800dfc4:	b538      	push	{r3, r4, r5, lr}
 800dfc6:	4d07      	ldr	r5, [pc, #28]	; (800dfe4 <_write_r+0x20>)
 800dfc8:	4604      	mov	r4, r0
 800dfca:	4608      	mov	r0, r1
 800dfcc:	4611      	mov	r1, r2
 800dfce:	2200      	movs	r2, #0
 800dfd0:	602a      	str	r2, [r5, #0]
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	f7f7 fedb 	bl	8005d8e <_write>
 800dfd8:	1c43      	adds	r3, r0, #1
 800dfda:	d102      	bne.n	800dfe2 <_write_r+0x1e>
 800dfdc:	682b      	ldr	r3, [r5, #0]
 800dfde:	b103      	cbz	r3, 800dfe2 <_write_r+0x1e>
 800dfe0:	6023      	str	r3, [r4, #0]
 800dfe2:	bd38      	pop	{r3, r4, r5, pc}
 800dfe4:	2001c4f8 	.word	0x2001c4f8

0800dfe8 <_close_r>:
 800dfe8:	b538      	push	{r3, r4, r5, lr}
 800dfea:	4d06      	ldr	r5, [pc, #24]	; (800e004 <_close_r+0x1c>)
 800dfec:	2300      	movs	r3, #0
 800dfee:	4604      	mov	r4, r0
 800dff0:	4608      	mov	r0, r1
 800dff2:	602b      	str	r3, [r5, #0]
 800dff4:	f7f7 fee7 	bl	8005dc6 <_close>
 800dff8:	1c43      	adds	r3, r0, #1
 800dffa:	d102      	bne.n	800e002 <_close_r+0x1a>
 800dffc:	682b      	ldr	r3, [r5, #0]
 800dffe:	b103      	cbz	r3, 800e002 <_close_r+0x1a>
 800e000:	6023      	str	r3, [r4, #0]
 800e002:	bd38      	pop	{r3, r4, r5, pc}
 800e004:	2001c4f8 	.word	0x2001c4f8

0800e008 <quorem>:
 800e008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e00c:	6903      	ldr	r3, [r0, #16]
 800e00e:	690c      	ldr	r4, [r1, #16]
 800e010:	42a3      	cmp	r3, r4
 800e012:	4607      	mov	r7, r0
 800e014:	f2c0 8081 	blt.w	800e11a <quorem+0x112>
 800e018:	3c01      	subs	r4, #1
 800e01a:	f101 0814 	add.w	r8, r1, #20
 800e01e:	f100 0514 	add.w	r5, r0, #20
 800e022:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e026:	9301      	str	r3, [sp, #4]
 800e028:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e02c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e030:	3301      	adds	r3, #1
 800e032:	429a      	cmp	r2, r3
 800e034:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e038:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e03c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e040:	d331      	bcc.n	800e0a6 <quorem+0x9e>
 800e042:	f04f 0e00 	mov.w	lr, #0
 800e046:	4640      	mov	r0, r8
 800e048:	46ac      	mov	ip, r5
 800e04a:	46f2      	mov	sl, lr
 800e04c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e050:	b293      	uxth	r3, r2
 800e052:	fb06 e303 	mla	r3, r6, r3, lr
 800e056:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	ebaa 0303 	sub.w	r3, sl, r3
 800e060:	f8dc a000 	ldr.w	sl, [ip]
 800e064:	0c12      	lsrs	r2, r2, #16
 800e066:	fa13 f38a 	uxtah	r3, r3, sl
 800e06a:	fb06 e202 	mla	r2, r6, r2, lr
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	9b00      	ldr	r3, [sp, #0]
 800e072:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e076:	b292      	uxth	r2, r2
 800e078:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e07c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e080:	f8bd 3000 	ldrh.w	r3, [sp]
 800e084:	4581      	cmp	r9, r0
 800e086:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e08a:	f84c 3b04 	str.w	r3, [ip], #4
 800e08e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e092:	d2db      	bcs.n	800e04c <quorem+0x44>
 800e094:	f855 300b 	ldr.w	r3, [r5, fp]
 800e098:	b92b      	cbnz	r3, 800e0a6 <quorem+0x9e>
 800e09a:	9b01      	ldr	r3, [sp, #4]
 800e09c:	3b04      	subs	r3, #4
 800e09e:	429d      	cmp	r5, r3
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	d32e      	bcc.n	800e102 <quorem+0xfa>
 800e0a4:	613c      	str	r4, [r7, #16]
 800e0a6:	4638      	mov	r0, r7
 800e0a8:	f001 fc94 	bl	800f9d4 <__mcmp>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	db24      	blt.n	800e0fa <quorem+0xf2>
 800e0b0:	3601      	adds	r6, #1
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	f04f 0c00 	mov.w	ip, #0
 800e0b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800e0bc:	f8d0 e000 	ldr.w	lr, [r0]
 800e0c0:	b293      	uxth	r3, r2
 800e0c2:	ebac 0303 	sub.w	r3, ip, r3
 800e0c6:	0c12      	lsrs	r2, r2, #16
 800e0c8:	fa13 f38e 	uxtah	r3, r3, lr
 800e0cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e0d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0da:	45c1      	cmp	r9, r8
 800e0dc:	f840 3b04 	str.w	r3, [r0], #4
 800e0e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e0e4:	d2e8      	bcs.n	800e0b8 <quorem+0xb0>
 800e0e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0ee:	b922      	cbnz	r2, 800e0fa <quorem+0xf2>
 800e0f0:	3b04      	subs	r3, #4
 800e0f2:	429d      	cmp	r5, r3
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	d30a      	bcc.n	800e10e <quorem+0x106>
 800e0f8:	613c      	str	r4, [r7, #16]
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	b003      	add	sp, #12
 800e0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e102:	6812      	ldr	r2, [r2, #0]
 800e104:	3b04      	subs	r3, #4
 800e106:	2a00      	cmp	r2, #0
 800e108:	d1cc      	bne.n	800e0a4 <quorem+0x9c>
 800e10a:	3c01      	subs	r4, #1
 800e10c:	e7c7      	b.n	800e09e <quorem+0x96>
 800e10e:	6812      	ldr	r2, [r2, #0]
 800e110:	3b04      	subs	r3, #4
 800e112:	2a00      	cmp	r2, #0
 800e114:	d1f0      	bne.n	800e0f8 <quorem+0xf0>
 800e116:	3c01      	subs	r4, #1
 800e118:	e7eb      	b.n	800e0f2 <quorem+0xea>
 800e11a:	2000      	movs	r0, #0
 800e11c:	e7ee      	b.n	800e0fc <quorem+0xf4>
	...

0800e120 <_dtoa_r>:
 800e120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e124:	ed2d 8b04 	vpush	{d8-d9}
 800e128:	ec57 6b10 	vmov	r6, r7, d0
 800e12c:	b093      	sub	sp, #76	; 0x4c
 800e12e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e130:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e134:	9106      	str	r1, [sp, #24]
 800e136:	ee10 aa10 	vmov	sl, s0
 800e13a:	4604      	mov	r4, r0
 800e13c:	9209      	str	r2, [sp, #36]	; 0x24
 800e13e:	930c      	str	r3, [sp, #48]	; 0x30
 800e140:	46bb      	mov	fp, r7
 800e142:	b975      	cbnz	r5, 800e162 <_dtoa_r+0x42>
 800e144:	2010      	movs	r0, #16
 800e146:	f001 f95f 	bl	800f408 <malloc>
 800e14a:	4602      	mov	r2, r0
 800e14c:	6260      	str	r0, [r4, #36]	; 0x24
 800e14e:	b920      	cbnz	r0, 800e15a <_dtoa_r+0x3a>
 800e150:	4ba7      	ldr	r3, [pc, #668]	; (800e3f0 <_dtoa_r+0x2d0>)
 800e152:	21ea      	movs	r1, #234	; 0xea
 800e154:	48a7      	ldr	r0, [pc, #668]	; (800e3f4 <_dtoa_r+0x2d4>)
 800e156:	f002 fcdb 	bl	8010b10 <__assert_func>
 800e15a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e15e:	6005      	str	r5, [r0, #0]
 800e160:	60c5      	str	r5, [r0, #12]
 800e162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e164:	6819      	ldr	r1, [r3, #0]
 800e166:	b151      	cbz	r1, 800e17e <_dtoa_r+0x5e>
 800e168:	685a      	ldr	r2, [r3, #4]
 800e16a:	604a      	str	r2, [r1, #4]
 800e16c:	2301      	movs	r3, #1
 800e16e:	4093      	lsls	r3, r2
 800e170:	608b      	str	r3, [r1, #8]
 800e172:	4620      	mov	r0, r4
 800e174:	f001 f9a2 	bl	800f4bc <_Bfree>
 800e178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e17a:	2200      	movs	r2, #0
 800e17c:	601a      	str	r2, [r3, #0]
 800e17e:	1e3b      	subs	r3, r7, #0
 800e180:	bfaa      	itet	ge
 800e182:	2300      	movge	r3, #0
 800e184:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e188:	f8c8 3000 	strge.w	r3, [r8]
 800e18c:	4b9a      	ldr	r3, [pc, #616]	; (800e3f8 <_dtoa_r+0x2d8>)
 800e18e:	bfbc      	itt	lt
 800e190:	2201      	movlt	r2, #1
 800e192:	f8c8 2000 	strlt.w	r2, [r8]
 800e196:	ea33 030b 	bics.w	r3, r3, fp
 800e19a:	d11b      	bne.n	800e1d4 <_dtoa_r+0xb4>
 800e19c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e19e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e1a2:	6013      	str	r3, [r2, #0]
 800e1a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e1a8:	4333      	orrs	r3, r6
 800e1aa:	f000 8592 	beq.w	800ecd2 <_dtoa_r+0xbb2>
 800e1ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1b0:	b963      	cbnz	r3, 800e1cc <_dtoa_r+0xac>
 800e1b2:	4b92      	ldr	r3, [pc, #584]	; (800e3fc <_dtoa_r+0x2dc>)
 800e1b4:	e022      	b.n	800e1fc <_dtoa_r+0xdc>
 800e1b6:	4b92      	ldr	r3, [pc, #584]	; (800e400 <_dtoa_r+0x2e0>)
 800e1b8:	9301      	str	r3, [sp, #4]
 800e1ba:	3308      	adds	r3, #8
 800e1bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e1be:	6013      	str	r3, [r2, #0]
 800e1c0:	9801      	ldr	r0, [sp, #4]
 800e1c2:	b013      	add	sp, #76	; 0x4c
 800e1c4:	ecbd 8b04 	vpop	{d8-d9}
 800e1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1cc:	4b8b      	ldr	r3, [pc, #556]	; (800e3fc <_dtoa_r+0x2dc>)
 800e1ce:	9301      	str	r3, [sp, #4]
 800e1d0:	3303      	adds	r3, #3
 800e1d2:	e7f3      	b.n	800e1bc <_dtoa_r+0x9c>
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	4650      	mov	r0, sl
 800e1da:	4659      	mov	r1, fp
 800e1dc:	f7f2 fc8c 	bl	8000af8 <__aeabi_dcmpeq>
 800e1e0:	ec4b ab19 	vmov	d9, sl, fp
 800e1e4:	4680      	mov	r8, r0
 800e1e6:	b158      	cbz	r0, 800e200 <_dtoa_r+0xe0>
 800e1e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	6013      	str	r3, [r2, #0]
 800e1ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	f000 856b 	beq.w	800eccc <_dtoa_r+0xbac>
 800e1f6:	4883      	ldr	r0, [pc, #524]	; (800e404 <_dtoa_r+0x2e4>)
 800e1f8:	6018      	str	r0, [r3, #0]
 800e1fa:	1e43      	subs	r3, r0, #1
 800e1fc:	9301      	str	r3, [sp, #4]
 800e1fe:	e7df      	b.n	800e1c0 <_dtoa_r+0xa0>
 800e200:	ec4b ab10 	vmov	d0, sl, fp
 800e204:	aa10      	add	r2, sp, #64	; 0x40
 800e206:	a911      	add	r1, sp, #68	; 0x44
 800e208:	4620      	mov	r0, r4
 800e20a:	f001 fd05 	bl	800fc18 <__d2b>
 800e20e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e212:	ee08 0a10 	vmov	s16, r0
 800e216:	2d00      	cmp	r5, #0
 800e218:	f000 8084 	beq.w	800e324 <_dtoa_r+0x204>
 800e21c:	ee19 3a90 	vmov	r3, s19
 800e220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e224:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e228:	4656      	mov	r6, sl
 800e22a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e22e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e232:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e236:	4b74      	ldr	r3, [pc, #464]	; (800e408 <_dtoa_r+0x2e8>)
 800e238:	2200      	movs	r2, #0
 800e23a:	4630      	mov	r0, r6
 800e23c:	4639      	mov	r1, r7
 800e23e:	f7f2 f83b 	bl	80002b8 <__aeabi_dsub>
 800e242:	a365      	add	r3, pc, #404	; (adr r3, 800e3d8 <_dtoa_r+0x2b8>)
 800e244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e248:	f7f2 f9ee 	bl	8000628 <__aeabi_dmul>
 800e24c:	a364      	add	r3, pc, #400	; (adr r3, 800e3e0 <_dtoa_r+0x2c0>)
 800e24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e252:	f7f2 f833 	bl	80002bc <__adddf3>
 800e256:	4606      	mov	r6, r0
 800e258:	4628      	mov	r0, r5
 800e25a:	460f      	mov	r7, r1
 800e25c:	f7f2 f97a 	bl	8000554 <__aeabi_i2d>
 800e260:	a361      	add	r3, pc, #388	; (adr r3, 800e3e8 <_dtoa_r+0x2c8>)
 800e262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e266:	f7f2 f9df 	bl	8000628 <__aeabi_dmul>
 800e26a:	4602      	mov	r2, r0
 800e26c:	460b      	mov	r3, r1
 800e26e:	4630      	mov	r0, r6
 800e270:	4639      	mov	r1, r7
 800e272:	f7f2 f823 	bl	80002bc <__adddf3>
 800e276:	4606      	mov	r6, r0
 800e278:	460f      	mov	r7, r1
 800e27a:	f7f2 fc85 	bl	8000b88 <__aeabi_d2iz>
 800e27e:	2200      	movs	r2, #0
 800e280:	9000      	str	r0, [sp, #0]
 800e282:	2300      	movs	r3, #0
 800e284:	4630      	mov	r0, r6
 800e286:	4639      	mov	r1, r7
 800e288:	f7f2 fc40 	bl	8000b0c <__aeabi_dcmplt>
 800e28c:	b150      	cbz	r0, 800e2a4 <_dtoa_r+0x184>
 800e28e:	9800      	ldr	r0, [sp, #0]
 800e290:	f7f2 f960 	bl	8000554 <__aeabi_i2d>
 800e294:	4632      	mov	r2, r6
 800e296:	463b      	mov	r3, r7
 800e298:	f7f2 fc2e 	bl	8000af8 <__aeabi_dcmpeq>
 800e29c:	b910      	cbnz	r0, 800e2a4 <_dtoa_r+0x184>
 800e29e:	9b00      	ldr	r3, [sp, #0]
 800e2a0:	3b01      	subs	r3, #1
 800e2a2:	9300      	str	r3, [sp, #0]
 800e2a4:	9b00      	ldr	r3, [sp, #0]
 800e2a6:	2b16      	cmp	r3, #22
 800e2a8:	d85a      	bhi.n	800e360 <_dtoa_r+0x240>
 800e2aa:	9a00      	ldr	r2, [sp, #0]
 800e2ac:	4b57      	ldr	r3, [pc, #348]	; (800e40c <_dtoa_r+0x2ec>)
 800e2ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b6:	ec51 0b19 	vmov	r0, r1, d9
 800e2ba:	f7f2 fc27 	bl	8000b0c <__aeabi_dcmplt>
 800e2be:	2800      	cmp	r0, #0
 800e2c0:	d050      	beq.n	800e364 <_dtoa_r+0x244>
 800e2c2:	9b00      	ldr	r3, [sp, #0]
 800e2c4:	3b01      	subs	r3, #1
 800e2c6:	9300      	str	r3, [sp, #0]
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2ce:	1b5d      	subs	r5, r3, r5
 800e2d0:	1e6b      	subs	r3, r5, #1
 800e2d2:	9305      	str	r3, [sp, #20]
 800e2d4:	bf45      	ittet	mi
 800e2d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800e2da:	9304      	strmi	r3, [sp, #16]
 800e2dc:	2300      	movpl	r3, #0
 800e2de:	2300      	movmi	r3, #0
 800e2e0:	bf4c      	ite	mi
 800e2e2:	9305      	strmi	r3, [sp, #20]
 800e2e4:	9304      	strpl	r3, [sp, #16]
 800e2e6:	9b00      	ldr	r3, [sp, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	db3d      	blt.n	800e368 <_dtoa_r+0x248>
 800e2ec:	9b05      	ldr	r3, [sp, #20]
 800e2ee:	9a00      	ldr	r2, [sp, #0]
 800e2f0:	920a      	str	r2, [sp, #40]	; 0x28
 800e2f2:	4413      	add	r3, r2
 800e2f4:	9305      	str	r3, [sp, #20]
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	9307      	str	r3, [sp, #28]
 800e2fa:	9b06      	ldr	r3, [sp, #24]
 800e2fc:	2b09      	cmp	r3, #9
 800e2fe:	f200 8089 	bhi.w	800e414 <_dtoa_r+0x2f4>
 800e302:	2b05      	cmp	r3, #5
 800e304:	bfc4      	itt	gt
 800e306:	3b04      	subgt	r3, #4
 800e308:	9306      	strgt	r3, [sp, #24]
 800e30a:	9b06      	ldr	r3, [sp, #24]
 800e30c:	f1a3 0302 	sub.w	r3, r3, #2
 800e310:	bfcc      	ite	gt
 800e312:	2500      	movgt	r5, #0
 800e314:	2501      	movle	r5, #1
 800e316:	2b03      	cmp	r3, #3
 800e318:	f200 8087 	bhi.w	800e42a <_dtoa_r+0x30a>
 800e31c:	e8df f003 	tbb	[pc, r3]
 800e320:	59383a2d 	.word	0x59383a2d
 800e324:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e328:	441d      	add	r5, r3
 800e32a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e32e:	2b20      	cmp	r3, #32
 800e330:	bfc1      	itttt	gt
 800e332:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e336:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e33a:	fa0b f303 	lslgt.w	r3, fp, r3
 800e33e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e342:	bfda      	itte	le
 800e344:	f1c3 0320 	rsble	r3, r3, #32
 800e348:	fa06 f003 	lslle.w	r0, r6, r3
 800e34c:	4318      	orrgt	r0, r3
 800e34e:	f7f2 f8f1 	bl	8000534 <__aeabi_ui2d>
 800e352:	2301      	movs	r3, #1
 800e354:	4606      	mov	r6, r0
 800e356:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e35a:	3d01      	subs	r5, #1
 800e35c:	930e      	str	r3, [sp, #56]	; 0x38
 800e35e:	e76a      	b.n	800e236 <_dtoa_r+0x116>
 800e360:	2301      	movs	r3, #1
 800e362:	e7b2      	b.n	800e2ca <_dtoa_r+0x1aa>
 800e364:	900b      	str	r0, [sp, #44]	; 0x2c
 800e366:	e7b1      	b.n	800e2cc <_dtoa_r+0x1ac>
 800e368:	9b04      	ldr	r3, [sp, #16]
 800e36a:	9a00      	ldr	r2, [sp, #0]
 800e36c:	1a9b      	subs	r3, r3, r2
 800e36e:	9304      	str	r3, [sp, #16]
 800e370:	4253      	negs	r3, r2
 800e372:	9307      	str	r3, [sp, #28]
 800e374:	2300      	movs	r3, #0
 800e376:	930a      	str	r3, [sp, #40]	; 0x28
 800e378:	e7bf      	b.n	800e2fa <_dtoa_r+0x1da>
 800e37a:	2300      	movs	r3, #0
 800e37c:	9308      	str	r3, [sp, #32]
 800e37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e380:	2b00      	cmp	r3, #0
 800e382:	dc55      	bgt.n	800e430 <_dtoa_r+0x310>
 800e384:	2301      	movs	r3, #1
 800e386:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e38a:	461a      	mov	r2, r3
 800e38c:	9209      	str	r2, [sp, #36]	; 0x24
 800e38e:	e00c      	b.n	800e3aa <_dtoa_r+0x28a>
 800e390:	2301      	movs	r3, #1
 800e392:	e7f3      	b.n	800e37c <_dtoa_r+0x25c>
 800e394:	2300      	movs	r3, #0
 800e396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e398:	9308      	str	r3, [sp, #32]
 800e39a:	9b00      	ldr	r3, [sp, #0]
 800e39c:	4413      	add	r3, r2
 800e39e:	9302      	str	r3, [sp, #8]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	9303      	str	r3, [sp, #12]
 800e3a6:	bfb8      	it	lt
 800e3a8:	2301      	movlt	r3, #1
 800e3aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	6042      	str	r2, [r0, #4]
 800e3b0:	2204      	movs	r2, #4
 800e3b2:	f102 0614 	add.w	r6, r2, #20
 800e3b6:	429e      	cmp	r6, r3
 800e3b8:	6841      	ldr	r1, [r0, #4]
 800e3ba:	d93d      	bls.n	800e438 <_dtoa_r+0x318>
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f001 f83d 	bl	800f43c <_Balloc>
 800e3c2:	9001      	str	r0, [sp, #4]
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	d13b      	bne.n	800e440 <_dtoa_r+0x320>
 800e3c8:	4b11      	ldr	r3, [pc, #68]	; (800e410 <_dtoa_r+0x2f0>)
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e3d0:	e6c0      	b.n	800e154 <_dtoa_r+0x34>
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	e7df      	b.n	800e396 <_dtoa_r+0x276>
 800e3d6:	bf00      	nop
 800e3d8:	636f4361 	.word	0x636f4361
 800e3dc:	3fd287a7 	.word	0x3fd287a7
 800e3e0:	8b60c8b3 	.word	0x8b60c8b3
 800e3e4:	3fc68a28 	.word	0x3fc68a28
 800e3e8:	509f79fb 	.word	0x509f79fb
 800e3ec:	3fd34413 	.word	0x3fd34413
 800e3f0:	080143d6 	.word	0x080143d6
 800e3f4:	080143ed 	.word	0x080143ed
 800e3f8:	7ff00000 	.word	0x7ff00000
 800e3fc:	080143d2 	.word	0x080143d2
 800e400:	080143c9 	.word	0x080143c9
 800e404:	08014642 	.word	0x08014642
 800e408:	3ff80000 	.word	0x3ff80000
 800e40c:	08014558 	.word	0x08014558
 800e410:	08014448 	.word	0x08014448
 800e414:	2501      	movs	r5, #1
 800e416:	2300      	movs	r3, #0
 800e418:	9306      	str	r3, [sp, #24]
 800e41a:	9508      	str	r5, [sp, #32]
 800e41c:	f04f 33ff 	mov.w	r3, #4294967295
 800e420:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e424:	2200      	movs	r2, #0
 800e426:	2312      	movs	r3, #18
 800e428:	e7b0      	b.n	800e38c <_dtoa_r+0x26c>
 800e42a:	2301      	movs	r3, #1
 800e42c:	9308      	str	r3, [sp, #32]
 800e42e:	e7f5      	b.n	800e41c <_dtoa_r+0x2fc>
 800e430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e432:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e436:	e7b8      	b.n	800e3aa <_dtoa_r+0x28a>
 800e438:	3101      	adds	r1, #1
 800e43a:	6041      	str	r1, [r0, #4]
 800e43c:	0052      	lsls	r2, r2, #1
 800e43e:	e7b8      	b.n	800e3b2 <_dtoa_r+0x292>
 800e440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e442:	9a01      	ldr	r2, [sp, #4]
 800e444:	601a      	str	r2, [r3, #0]
 800e446:	9b03      	ldr	r3, [sp, #12]
 800e448:	2b0e      	cmp	r3, #14
 800e44a:	f200 809d 	bhi.w	800e588 <_dtoa_r+0x468>
 800e44e:	2d00      	cmp	r5, #0
 800e450:	f000 809a 	beq.w	800e588 <_dtoa_r+0x468>
 800e454:	9b00      	ldr	r3, [sp, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	dd32      	ble.n	800e4c0 <_dtoa_r+0x3a0>
 800e45a:	4ab7      	ldr	r2, [pc, #732]	; (800e738 <_dtoa_r+0x618>)
 800e45c:	f003 030f 	and.w	r3, r3, #15
 800e460:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e464:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e468:	9b00      	ldr	r3, [sp, #0]
 800e46a:	05d8      	lsls	r0, r3, #23
 800e46c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e470:	d516      	bpl.n	800e4a0 <_dtoa_r+0x380>
 800e472:	4bb2      	ldr	r3, [pc, #712]	; (800e73c <_dtoa_r+0x61c>)
 800e474:	ec51 0b19 	vmov	r0, r1, d9
 800e478:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e47c:	f7f2 f9fe 	bl	800087c <__aeabi_ddiv>
 800e480:	f007 070f 	and.w	r7, r7, #15
 800e484:	4682      	mov	sl, r0
 800e486:	468b      	mov	fp, r1
 800e488:	2503      	movs	r5, #3
 800e48a:	4eac      	ldr	r6, [pc, #688]	; (800e73c <_dtoa_r+0x61c>)
 800e48c:	b957      	cbnz	r7, 800e4a4 <_dtoa_r+0x384>
 800e48e:	4642      	mov	r2, r8
 800e490:	464b      	mov	r3, r9
 800e492:	4650      	mov	r0, sl
 800e494:	4659      	mov	r1, fp
 800e496:	f7f2 f9f1 	bl	800087c <__aeabi_ddiv>
 800e49a:	4682      	mov	sl, r0
 800e49c:	468b      	mov	fp, r1
 800e49e:	e028      	b.n	800e4f2 <_dtoa_r+0x3d2>
 800e4a0:	2502      	movs	r5, #2
 800e4a2:	e7f2      	b.n	800e48a <_dtoa_r+0x36a>
 800e4a4:	07f9      	lsls	r1, r7, #31
 800e4a6:	d508      	bpl.n	800e4ba <_dtoa_r+0x39a>
 800e4a8:	4640      	mov	r0, r8
 800e4aa:	4649      	mov	r1, r9
 800e4ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e4b0:	f7f2 f8ba 	bl	8000628 <__aeabi_dmul>
 800e4b4:	3501      	adds	r5, #1
 800e4b6:	4680      	mov	r8, r0
 800e4b8:	4689      	mov	r9, r1
 800e4ba:	107f      	asrs	r7, r7, #1
 800e4bc:	3608      	adds	r6, #8
 800e4be:	e7e5      	b.n	800e48c <_dtoa_r+0x36c>
 800e4c0:	f000 809b 	beq.w	800e5fa <_dtoa_r+0x4da>
 800e4c4:	9b00      	ldr	r3, [sp, #0]
 800e4c6:	4f9d      	ldr	r7, [pc, #628]	; (800e73c <_dtoa_r+0x61c>)
 800e4c8:	425e      	negs	r6, r3
 800e4ca:	4b9b      	ldr	r3, [pc, #620]	; (800e738 <_dtoa_r+0x618>)
 800e4cc:	f006 020f 	and.w	r2, r6, #15
 800e4d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d8:	ec51 0b19 	vmov	r0, r1, d9
 800e4dc:	f7f2 f8a4 	bl	8000628 <__aeabi_dmul>
 800e4e0:	1136      	asrs	r6, r6, #4
 800e4e2:	4682      	mov	sl, r0
 800e4e4:	468b      	mov	fp, r1
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	2502      	movs	r5, #2
 800e4ea:	2e00      	cmp	r6, #0
 800e4ec:	d17a      	bne.n	800e5e4 <_dtoa_r+0x4c4>
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1d3      	bne.n	800e49a <_dtoa_r+0x37a>
 800e4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f000 8082 	beq.w	800e5fe <_dtoa_r+0x4de>
 800e4fa:	4b91      	ldr	r3, [pc, #580]	; (800e740 <_dtoa_r+0x620>)
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	4650      	mov	r0, sl
 800e500:	4659      	mov	r1, fp
 800e502:	f7f2 fb03 	bl	8000b0c <__aeabi_dcmplt>
 800e506:	2800      	cmp	r0, #0
 800e508:	d079      	beq.n	800e5fe <_dtoa_r+0x4de>
 800e50a:	9b03      	ldr	r3, [sp, #12]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d076      	beq.n	800e5fe <_dtoa_r+0x4de>
 800e510:	9b02      	ldr	r3, [sp, #8]
 800e512:	2b00      	cmp	r3, #0
 800e514:	dd36      	ble.n	800e584 <_dtoa_r+0x464>
 800e516:	9b00      	ldr	r3, [sp, #0]
 800e518:	4650      	mov	r0, sl
 800e51a:	4659      	mov	r1, fp
 800e51c:	1e5f      	subs	r7, r3, #1
 800e51e:	2200      	movs	r2, #0
 800e520:	4b88      	ldr	r3, [pc, #544]	; (800e744 <_dtoa_r+0x624>)
 800e522:	f7f2 f881 	bl	8000628 <__aeabi_dmul>
 800e526:	9e02      	ldr	r6, [sp, #8]
 800e528:	4682      	mov	sl, r0
 800e52a:	468b      	mov	fp, r1
 800e52c:	3501      	adds	r5, #1
 800e52e:	4628      	mov	r0, r5
 800e530:	f7f2 f810 	bl	8000554 <__aeabi_i2d>
 800e534:	4652      	mov	r2, sl
 800e536:	465b      	mov	r3, fp
 800e538:	f7f2 f876 	bl	8000628 <__aeabi_dmul>
 800e53c:	4b82      	ldr	r3, [pc, #520]	; (800e748 <_dtoa_r+0x628>)
 800e53e:	2200      	movs	r2, #0
 800e540:	f7f1 febc 	bl	80002bc <__adddf3>
 800e544:	46d0      	mov	r8, sl
 800e546:	46d9      	mov	r9, fp
 800e548:	4682      	mov	sl, r0
 800e54a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e54e:	2e00      	cmp	r6, #0
 800e550:	d158      	bne.n	800e604 <_dtoa_r+0x4e4>
 800e552:	4b7e      	ldr	r3, [pc, #504]	; (800e74c <_dtoa_r+0x62c>)
 800e554:	2200      	movs	r2, #0
 800e556:	4640      	mov	r0, r8
 800e558:	4649      	mov	r1, r9
 800e55a:	f7f1 fead 	bl	80002b8 <__aeabi_dsub>
 800e55e:	4652      	mov	r2, sl
 800e560:	465b      	mov	r3, fp
 800e562:	4680      	mov	r8, r0
 800e564:	4689      	mov	r9, r1
 800e566:	f7f2 faef 	bl	8000b48 <__aeabi_dcmpgt>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	f040 8295 	bne.w	800ea9a <_dtoa_r+0x97a>
 800e570:	4652      	mov	r2, sl
 800e572:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e576:	4640      	mov	r0, r8
 800e578:	4649      	mov	r1, r9
 800e57a:	f7f2 fac7 	bl	8000b0c <__aeabi_dcmplt>
 800e57e:	2800      	cmp	r0, #0
 800e580:	f040 8289 	bne.w	800ea96 <_dtoa_r+0x976>
 800e584:	ec5b ab19 	vmov	sl, fp, d9
 800e588:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	f2c0 8148 	blt.w	800e820 <_dtoa_r+0x700>
 800e590:	9a00      	ldr	r2, [sp, #0]
 800e592:	2a0e      	cmp	r2, #14
 800e594:	f300 8144 	bgt.w	800e820 <_dtoa_r+0x700>
 800e598:	4b67      	ldr	r3, [pc, #412]	; (800e738 <_dtoa_r+0x618>)
 800e59a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e59e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f280 80d5 	bge.w	800e754 <_dtoa_r+0x634>
 800e5aa:	9b03      	ldr	r3, [sp, #12]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f300 80d1 	bgt.w	800e754 <_dtoa_r+0x634>
 800e5b2:	f040 826f 	bne.w	800ea94 <_dtoa_r+0x974>
 800e5b6:	4b65      	ldr	r3, [pc, #404]	; (800e74c <_dtoa_r+0x62c>)
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	4640      	mov	r0, r8
 800e5bc:	4649      	mov	r1, r9
 800e5be:	f7f2 f833 	bl	8000628 <__aeabi_dmul>
 800e5c2:	4652      	mov	r2, sl
 800e5c4:	465b      	mov	r3, fp
 800e5c6:	f7f2 fab5 	bl	8000b34 <__aeabi_dcmpge>
 800e5ca:	9e03      	ldr	r6, [sp, #12]
 800e5cc:	4637      	mov	r7, r6
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	f040 8245 	bne.w	800ea5e <_dtoa_r+0x93e>
 800e5d4:	9d01      	ldr	r5, [sp, #4]
 800e5d6:	2331      	movs	r3, #49	; 0x31
 800e5d8:	f805 3b01 	strb.w	r3, [r5], #1
 800e5dc:	9b00      	ldr	r3, [sp, #0]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	9300      	str	r3, [sp, #0]
 800e5e2:	e240      	b.n	800ea66 <_dtoa_r+0x946>
 800e5e4:	07f2      	lsls	r2, r6, #31
 800e5e6:	d505      	bpl.n	800e5f4 <_dtoa_r+0x4d4>
 800e5e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5ec:	f7f2 f81c 	bl	8000628 <__aeabi_dmul>
 800e5f0:	3501      	adds	r5, #1
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	1076      	asrs	r6, r6, #1
 800e5f6:	3708      	adds	r7, #8
 800e5f8:	e777      	b.n	800e4ea <_dtoa_r+0x3ca>
 800e5fa:	2502      	movs	r5, #2
 800e5fc:	e779      	b.n	800e4f2 <_dtoa_r+0x3d2>
 800e5fe:	9f00      	ldr	r7, [sp, #0]
 800e600:	9e03      	ldr	r6, [sp, #12]
 800e602:	e794      	b.n	800e52e <_dtoa_r+0x40e>
 800e604:	9901      	ldr	r1, [sp, #4]
 800e606:	4b4c      	ldr	r3, [pc, #304]	; (800e738 <_dtoa_r+0x618>)
 800e608:	4431      	add	r1, r6
 800e60a:	910d      	str	r1, [sp, #52]	; 0x34
 800e60c:	9908      	ldr	r1, [sp, #32]
 800e60e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e612:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e616:	2900      	cmp	r1, #0
 800e618:	d043      	beq.n	800e6a2 <_dtoa_r+0x582>
 800e61a:	494d      	ldr	r1, [pc, #308]	; (800e750 <_dtoa_r+0x630>)
 800e61c:	2000      	movs	r0, #0
 800e61e:	f7f2 f92d 	bl	800087c <__aeabi_ddiv>
 800e622:	4652      	mov	r2, sl
 800e624:	465b      	mov	r3, fp
 800e626:	f7f1 fe47 	bl	80002b8 <__aeabi_dsub>
 800e62a:	9d01      	ldr	r5, [sp, #4]
 800e62c:	4682      	mov	sl, r0
 800e62e:	468b      	mov	fp, r1
 800e630:	4649      	mov	r1, r9
 800e632:	4640      	mov	r0, r8
 800e634:	f7f2 faa8 	bl	8000b88 <__aeabi_d2iz>
 800e638:	4606      	mov	r6, r0
 800e63a:	f7f1 ff8b 	bl	8000554 <__aeabi_i2d>
 800e63e:	4602      	mov	r2, r0
 800e640:	460b      	mov	r3, r1
 800e642:	4640      	mov	r0, r8
 800e644:	4649      	mov	r1, r9
 800e646:	f7f1 fe37 	bl	80002b8 <__aeabi_dsub>
 800e64a:	3630      	adds	r6, #48	; 0x30
 800e64c:	f805 6b01 	strb.w	r6, [r5], #1
 800e650:	4652      	mov	r2, sl
 800e652:	465b      	mov	r3, fp
 800e654:	4680      	mov	r8, r0
 800e656:	4689      	mov	r9, r1
 800e658:	f7f2 fa58 	bl	8000b0c <__aeabi_dcmplt>
 800e65c:	2800      	cmp	r0, #0
 800e65e:	d163      	bne.n	800e728 <_dtoa_r+0x608>
 800e660:	4642      	mov	r2, r8
 800e662:	464b      	mov	r3, r9
 800e664:	4936      	ldr	r1, [pc, #216]	; (800e740 <_dtoa_r+0x620>)
 800e666:	2000      	movs	r0, #0
 800e668:	f7f1 fe26 	bl	80002b8 <__aeabi_dsub>
 800e66c:	4652      	mov	r2, sl
 800e66e:	465b      	mov	r3, fp
 800e670:	f7f2 fa4c 	bl	8000b0c <__aeabi_dcmplt>
 800e674:	2800      	cmp	r0, #0
 800e676:	f040 80b5 	bne.w	800e7e4 <_dtoa_r+0x6c4>
 800e67a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e67c:	429d      	cmp	r5, r3
 800e67e:	d081      	beq.n	800e584 <_dtoa_r+0x464>
 800e680:	4b30      	ldr	r3, [pc, #192]	; (800e744 <_dtoa_r+0x624>)
 800e682:	2200      	movs	r2, #0
 800e684:	4650      	mov	r0, sl
 800e686:	4659      	mov	r1, fp
 800e688:	f7f1 ffce 	bl	8000628 <__aeabi_dmul>
 800e68c:	4b2d      	ldr	r3, [pc, #180]	; (800e744 <_dtoa_r+0x624>)
 800e68e:	4682      	mov	sl, r0
 800e690:	468b      	mov	fp, r1
 800e692:	4640      	mov	r0, r8
 800e694:	4649      	mov	r1, r9
 800e696:	2200      	movs	r2, #0
 800e698:	f7f1 ffc6 	bl	8000628 <__aeabi_dmul>
 800e69c:	4680      	mov	r8, r0
 800e69e:	4689      	mov	r9, r1
 800e6a0:	e7c6      	b.n	800e630 <_dtoa_r+0x510>
 800e6a2:	4650      	mov	r0, sl
 800e6a4:	4659      	mov	r1, fp
 800e6a6:	f7f1 ffbf 	bl	8000628 <__aeabi_dmul>
 800e6aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6ac:	9d01      	ldr	r5, [sp, #4]
 800e6ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800e6b0:	4682      	mov	sl, r0
 800e6b2:	468b      	mov	fp, r1
 800e6b4:	4649      	mov	r1, r9
 800e6b6:	4640      	mov	r0, r8
 800e6b8:	f7f2 fa66 	bl	8000b88 <__aeabi_d2iz>
 800e6bc:	4606      	mov	r6, r0
 800e6be:	f7f1 ff49 	bl	8000554 <__aeabi_i2d>
 800e6c2:	3630      	adds	r6, #48	; 0x30
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	4640      	mov	r0, r8
 800e6ca:	4649      	mov	r1, r9
 800e6cc:	f7f1 fdf4 	bl	80002b8 <__aeabi_dsub>
 800e6d0:	f805 6b01 	strb.w	r6, [r5], #1
 800e6d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6d6:	429d      	cmp	r5, r3
 800e6d8:	4680      	mov	r8, r0
 800e6da:	4689      	mov	r9, r1
 800e6dc:	f04f 0200 	mov.w	r2, #0
 800e6e0:	d124      	bne.n	800e72c <_dtoa_r+0x60c>
 800e6e2:	4b1b      	ldr	r3, [pc, #108]	; (800e750 <_dtoa_r+0x630>)
 800e6e4:	4650      	mov	r0, sl
 800e6e6:	4659      	mov	r1, fp
 800e6e8:	f7f1 fde8 	bl	80002bc <__adddf3>
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	4640      	mov	r0, r8
 800e6f2:	4649      	mov	r1, r9
 800e6f4:	f7f2 fa28 	bl	8000b48 <__aeabi_dcmpgt>
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d173      	bne.n	800e7e4 <_dtoa_r+0x6c4>
 800e6fc:	4652      	mov	r2, sl
 800e6fe:	465b      	mov	r3, fp
 800e700:	4913      	ldr	r1, [pc, #76]	; (800e750 <_dtoa_r+0x630>)
 800e702:	2000      	movs	r0, #0
 800e704:	f7f1 fdd8 	bl	80002b8 <__aeabi_dsub>
 800e708:	4602      	mov	r2, r0
 800e70a:	460b      	mov	r3, r1
 800e70c:	4640      	mov	r0, r8
 800e70e:	4649      	mov	r1, r9
 800e710:	f7f2 f9fc 	bl	8000b0c <__aeabi_dcmplt>
 800e714:	2800      	cmp	r0, #0
 800e716:	f43f af35 	beq.w	800e584 <_dtoa_r+0x464>
 800e71a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e71c:	1e6b      	subs	r3, r5, #1
 800e71e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e720:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e724:	2b30      	cmp	r3, #48	; 0x30
 800e726:	d0f8      	beq.n	800e71a <_dtoa_r+0x5fa>
 800e728:	9700      	str	r7, [sp, #0]
 800e72a:	e049      	b.n	800e7c0 <_dtoa_r+0x6a0>
 800e72c:	4b05      	ldr	r3, [pc, #20]	; (800e744 <_dtoa_r+0x624>)
 800e72e:	f7f1 ff7b 	bl	8000628 <__aeabi_dmul>
 800e732:	4680      	mov	r8, r0
 800e734:	4689      	mov	r9, r1
 800e736:	e7bd      	b.n	800e6b4 <_dtoa_r+0x594>
 800e738:	08014558 	.word	0x08014558
 800e73c:	08014530 	.word	0x08014530
 800e740:	3ff00000 	.word	0x3ff00000
 800e744:	40240000 	.word	0x40240000
 800e748:	401c0000 	.word	0x401c0000
 800e74c:	40140000 	.word	0x40140000
 800e750:	3fe00000 	.word	0x3fe00000
 800e754:	9d01      	ldr	r5, [sp, #4]
 800e756:	4656      	mov	r6, sl
 800e758:	465f      	mov	r7, fp
 800e75a:	4642      	mov	r2, r8
 800e75c:	464b      	mov	r3, r9
 800e75e:	4630      	mov	r0, r6
 800e760:	4639      	mov	r1, r7
 800e762:	f7f2 f88b 	bl	800087c <__aeabi_ddiv>
 800e766:	f7f2 fa0f 	bl	8000b88 <__aeabi_d2iz>
 800e76a:	4682      	mov	sl, r0
 800e76c:	f7f1 fef2 	bl	8000554 <__aeabi_i2d>
 800e770:	4642      	mov	r2, r8
 800e772:	464b      	mov	r3, r9
 800e774:	f7f1 ff58 	bl	8000628 <__aeabi_dmul>
 800e778:	4602      	mov	r2, r0
 800e77a:	460b      	mov	r3, r1
 800e77c:	4630      	mov	r0, r6
 800e77e:	4639      	mov	r1, r7
 800e780:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e784:	f7f1 fd98 	bl	80002b8 <__aeabi_dsub>
 800e788:	f805 6b01 	strb.w	r6, [r5], #1
 800e78c:	9e01      	ldr	r6, [sp, #4]
 800e78e:	9f03      	ldr	r7, [sp, #12]
 800e790:	1bae      	subs	r6, r5, r6
 800e792:	42b7      	cmp	r7, r6
 800e794:	4602      	mov	r2, r0
 800e796:	460b      	mov	r3, r1
 800e798:	d135      	bne.n	800e806 <_dtoa_r+0x6e6>
 800e79a:	f7f1 fd8f 	bl	80002bc <__adddf3>
 800e79e:	4642      	mov	r2, r8
 800e7a0:	464b      	mov	r3, r9
 800e7a2:	4606      	mov	r6, r0
 800e7a4:	460f      	mov	r7, r1
 800e7a6:	f7f2 f9cf 	bl	8000b48 <__aeabi_dcmpgt>
 800e7aa:	b9d0      	cbnz	r0, 800e7e2 <_dtoa_r+0x6c2>
 800e7ac:	4642      	mov	r2, r8
 800e7ae:	464b      	mov	r3, r9
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	4639      	mov	r1, r7
 800e7b4:	f7f2 f9a0 	bl	8000af8 <__aeabi_dcmpeq>
 800e7b8:	b110      	cbz	r0, 800e7c0 <_dtoa_r+0x6a0>
 800e7ba:	f01a 0f01 	tst.w	sl, #1
 800e7be:	d110      	bne.n	800e7e2 <_dtoa_r+0x6c2>
 800e7c0:	4620      	mov	r0, r4
 800e7c2:	ee18 1a10 	vmov	r1, s16
 800e7c6:	f000 fe79 	bl	800f4bc <_Bfree>
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	9800      	ldr	r0, [sp, #0]
 800e7ce:	702b      	strb	r3, [r5, #0]
 800e7d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7d2:	3001      	adds	r0, #1
 800e7d4:	6018      	str	r0, [r3, #0]
 800e7d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	f43f acf1 	beq.w	800e1c0 <_dtoa_r+0xa0>
 800e7de:	601d      	str	r5, [r3, #0]
 800e7e0:	e4ee      	b.n	800e1c0 <_dtoa_r+0xa0>
 800e7e2:	9f00      	ldr	r7, [sp, #0]
 800e7e4:	462b      	mov	r3, r5
 800e7e6:	461d      	mov	r5, r3
 800e7e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7ec:	2a39      	cmp	r2, #57	; 0x39
 800e7ee:	d106      	bne.n	800e7fe <_dtoa_r+0x6de>
 800e7f0:	9a01      	ldr	r2, [sp, #4]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d1f7      	bne.n	800e7e6 <_dtoa_r+0x6c6>
 800e7f6:	9901      	ldr	r1, [sp, #4]
 800e7f8:	2230      	movs	r2, #48	; 0x30
 800e7fa:	3701      	adds	r7, #1
 800e7fc:	700a      	strb	r2, [r1, #0]
 800e7fe:	781a      	ldrb	r2, [r3, #0]
 800e800:	3201      	adds	r2, #1
 800e802:	701a      	strb	r2, [r3, #0]
 800e804:	e790      	b.n	800e728 <_dtoa_r+0x608>
 800e806:	4ba6      	ldr	r3, [pc, #664]	; (800eaa0 <_dtoa_r+0x980>)
 800e808:	2200      	movs	r2, #0
 800e80a:	f7f1 ff0d 	bl	8000628 <__aeabi_dmul>
 800e80e:	2200      	movs	r2, #0
 800e810:	2300      	movs	r3, #0
 800e812:	4606      	mov	r6, r0
 800e814:	460f      	mov	r7, r1
 800e816:	f7f2 f96f 	bl	8000af8 <__aeabi_dcmpeq>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d09d      	beq.n	800e75a <_dtoa_r+0x63a>
 800e81e:	e7cf      	b.n	800e7c0 <_dtoa_r+0x6a0>
 800e820:	9a08      	ldr	r2, [sp, #32]
 800e822:	2a00      	cmp	r2, #0
 800e824:	f000 80d7 	beq.w	800e9d6 <_dtoa_r+0x8b6>
 800e828:	9a06      	ldr	r2, [sp, #24]
 800e82a:	2a01      	cmp	r2, #1
 800e82c:	f300 80ba 	bgt.w	800e9a4 <_dtoa_r+0x884>
 800e830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e832:	2a00      	cmp	r2, #0
 800e834:	f000 80b2 	beq.w	800e99c <_dtoa_r+0x87c>
 800e838:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e83c:	9e07      	ldr	r6, [sp, #28]
 800e83e:	9d04      	ldr	r5, [sp, #16]
 800e840:	9a04      	ldr	r2, [sp, #16]
 800e842:	441a      	add	r2, r3
 800e844:	9204      	str	r2, [sp, #16]
 800e846:	9a05      	ldr	r2, [sp, #20]
 800e848:	2101      	movs	r1, #1
 800e84a:	441a      	add	r2, r3
 800e84c:	4620      	mov	r0, r4
 800e84e:	9205      	str	r2, [sp, #20]
 800e850:	f000 ff36 	bl	800f6c0 <__i2b>
 800e854:	4607      	mov	r7, r0
 800e856:	2d00      	cmp	r5, #0
 800e858:	dd0c      	ble.n	800e874 <_dtoa_r+0x754>
 800e85a:	9b05      	ldr	r3, [sp, #20]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	dd09      	ble.n	800e874 <_dtoa_r+0x754>
 800e860:	42ab      	cmp	r3, r5
 800e862:	9a04      	ldr	r2, [sp, #16]
 800e864:	bfa8      	it	ge
 800e866:	462b      	movge	r3, r5
 800e868:	1ad2      	subs	r2, r2, r3
 800e86a:	9204      	str	r2, [sp, #16]
 800e86c:	9a05      	ldr	r2, [sp, #20]
 800e86e:	1aed      	subs	r5, r5, r3
 800e870:	1ad3      	subs	r3, r2, r3
 800e872:	9305      	str	r3, [sp, #20]
 800e874:	9b07      	ldr	r3, [sp, #28]
 800e876:	b31b      	cbz	r3, 800e8c0 <_dtoa_r+0x7a0>
 800e878:	9b08      	ldr	r3, [sp, #32]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	f000 80af 	beq.w	800e9de <_dtoa_r+0x8be>
 800e880:	2e00      	cmp	r6, #0
 800e882:	dd13      	ble.n	800e8ac <_dtoa_r+0x78c>
 800e884:	4639      	mov	r1, r7
 800e886:	4632      	mov	r2, r6
 800e888:	4620      	mov	r0, r4
 800e88a:	f000 ffd9 	bl	800f840 <__pow5mult>
 800e88e:	ee18 2a10 	vmov	r2, s16
 800e892:	4601      	mov	r1, r0
 800e894:	4607      	mov	r7, r0
 800e896:	4620      	mov	r0, r4
 800e898:	f000 ff28 	bl	800f6ec <__multiply>
 800e89c:	ee18 1a10 	vmov	r1, s16
 800e8a0:	4680      	mov	r8, r0
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	f000 fe0a 	bl	800f4bc <_Bfree>
 800e8a8:	ee08 8a10 	vmov	s16, r8
 800e8ac:	9b07      	ldr	r3, [sp, #28]
 800e8ae:	1b9a      	subs	r2, r3, r6
 800e8b0:	d006      	beq.n	800e8c0 <_dtoa_r+0x7a0>
 800e8b2:	ee18 1a10 	vmov	r1, s16
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f000 ffc2 	bl	800f840 <__pow5mult>
 800e8bc:	ee08 0a10 	vmov	s16, r0
 800e8c0:	2101      	movs	r1, #1
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	f000 fefc 	bl	800f6c0 <__i2b>
 800e8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	4606      	mov	r6, r0
 800e8ce:	f340 8088 	ble.w	800e9e2 <_dtoa_r+0x8c2>
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	4601      	mov	r1, r0
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	f000 ffb2 	bl	800f840 <__pow5mult>
 800e8dc:	9b06      	ldr	r3, [sp, #24]
 800e8de:	2b01      	cmp	r3, #1
 800e8e0:	4606      	mov	r6, r0
 800e8e2:	f340 8081 	ble.w	800e9e8 <_dtoa_r+0x8c8>
 800e8e6:	f04f 0800 	mov.w	r8, #0
 800e8ea:	6933      	ldr	r3, [r6, #16]
 800e8ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e8f0:	6918      	ldr	r0, [r3, #16]
 800e8f2:	f000 fe95 	bl	800f620 <__hi0bits>
 800e8f6:	f1c0 0020 	rsb	r0, r0, #32
 800e8fa:	9b05      	ldr	r3, [sp, #20]
 800e8fc:	4418      	add	r0, r3
 800e8fe:	f010 001f 	ands.w	r0, r0, #31
 800e902:	f000 8092 	beq.w	800ea2a <_dtoa_r+0x90a>
 800e906:	f1c0 0320 	rsb	r3, r0, #32
 800e90a:	2b04      	cmp	r3, #4
 800e90c:	f340 808a 	ble.w	800ea24 <_dtoa_r+0x904>
 800e910:	f1c0 001c 	rsb	r0, r0, #28
 800e914:	9b04      	ldr	r3, [sp, #16]
 800e916:	4403      	add	r3, r0
 800e918:	9304      	str	r3, [sp, #16]
 800e91a:	9b05      	ldr	r3, [sp, #20]
 800e91c:	4403      	add	r3, r0
 800e91e:	4405      	add	r5, r0
 800e920:	9305      	str	r3, [sp, #20]
 800e922:	9b04      	ldr	r3, [sp, #16]
 800e924:	2b00      	cmp	r3, #0
 800e926:	dd07      	ble.n	800e938 <_dtoa_r+0x818>
 800e928:	ee18 1a10 	vmov	r1, s16
 800e92c:	461a      	mov	r2, r3
 800e92e:	4620      	mov	r0, r4
 800e930:	f000 ffe0 	bl	800f8f4 <__lshift>
 800e934:	ee08 0a10 	vmov	s16, r0
 800e938:	9b05      	ldr	r3, [sp, #20]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	dd05      	ble.n	800e94a <_dtoa_r+0x82a>
 800e93e:	4631      	mov	r1, r6
 800e940:	461a      	mov	r2, r3
 800e942:	4620      	mov	r0, r4
 800e944:	f000 ffd6 	bl	800f8f4 <__lshift>
 800e948:	4606      	mov	r6, r0
 800e94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d06e      	beq.n	800ea2e <_dtoa_r+0x90e>
 800e950:	ee18 0a10 	vmov	r0, s16
 800e954:	4631      	mov	r1, r6
 800e956:	f001 f83d 	bl	800f9d4 <__mcmp>
 800e95a:	2800      	cmp	r0, #0
 800e95c:	da67      	bge.n	800ea2e <_dtoa_r+0x90e>
 800e95e:	9b00      	ldr	r3, [sp, #0]
 800e960:	3b01      	subs	r3, #1
 800e962:	ee18 1a10 	vmov	r1, s16
 800e966:	9300      	str	r3, [sp, #0]
 800e968:	220a      	movs	r2, #10
 800e96a:	2300      	movs	r3, #0
 800e96c:	4620      	mov	r0, r4
 800e96e:	f000 fdc7 	bl	800f500 <__multadd>
 800e972:	9b08      	ldr	r3, [sp, #32]
 800e974:	ee08 0a10 	vmov	s16, r0
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f000 81b1 	beq.w	800ece0 <_dtoa_r+0xbc0>
 800e97e:	2300      	movs	r3, #0
 800e980:	4639      	mov	r1, r7
 800e982:	220a      	movs	r2, #10
 800e984:	4620      	mov	r0, r4
 800e986:	f000 fdbb 	bl	800f500 <__multadd>
 800e98a:	9b02      	ldr	r3, [sp, #8]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	4607      	mov	r7, r0
 800e990:	f300 808e 	bgt.w	800eab0 <_dtoa_r+0x990>
 800e994:	9b06      	ldr	r3, [sp, #24]
 800e996:	2b02      	cmp	r3, #2
 800e998:	dc51      	bgt.n	800ea3e <_dtoa_r+0x91e>
 800e99a:	e089      	b.n	800eab0 <_dtoa_r+0x990>
 800e99c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e99e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e9a2:	e74b      	b.n	800e83c <_dtoa_r+0x71c>
 800e9a4:	9b03      	ldr	r3, [sp, #12]
 800e9a6:	1e5e      	subs	r6, r3, #1
 800e9a8:	9b07      	ldr	r3, [sp, #28]
 800e9aa:	42b3      	cmp	r3, r6
 800e9ac:	bfbf      	itttt	lt
 800e9ae:	9b07      	ldrlt	r3, [sp, #28]
 800e9b0:	9607      	strlt	r6, [sp, #28]
 800e9b2:	1af2      	sublt	r2, r6, r3
 800e9b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e9b6:	bfb6      	itet	lt
 800e9b8:	189b      	addlt	r3, r3, r2
 800e9ba:	1b9e      	subge	r6, r3, r6
 800e9bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e9be:	9b03      	ldr	r3, [sp, #12]
 800e9c0:	bfb8      	it	lt
 800e9c2:	2600      	movlt	r6, #0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	bfb7      	itett	lt
 800e9c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e9cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e9d0:	1a9d      	sublt	r5, r3, r2
 800e9d2:	2300      	movlt	r3, #0
 800e9d4:	e734      	b.n	800e840 <_dtoa_r+0x720>
 800e9d6:	9e07      	ldr	r6, [sp, #28]
 800e9d8:	9d04      	ldr	r5, [sp, #16]
 800e9da:	9f08      	ldr	r7, [sp, #32]
 800e9dc:	e73b      	b.n	800e856 <_dtoa_r+0x736>
 800e9de:	9a07      	ldr	r2, [sp, #28]
 800e9e0:	e767      	b.n	800e8b2 <_dtoa_r+0x792>
 800e9e2:	9b06      	ldr	r3, [sp, #24]
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	dc18      	bgt.n	800ea1a <_dtoa_r+0x8fa>
 800e9e8:	f1ba 0f00 	cmp.w	sl, #0
 800e9ec:	d115      	bne.n	800ea1a <_dtoa_r+0x8fa>
 800e9ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9f2:	b993      	cbnz	r3, 800ea1a <_dtoa_r+0x8fa>
 800e9f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e9f8:	0d1b      	lsrs	r3, r3, #20
 800e9fa:	051b      	lsls	r3, r3, #20
 800e9fc:	b183      	cbz	r3, 800ea20 <_dtoa_r+0x900>
 800e9fe:	9b04      	ldr	r3, [sp, #16]
 800ea00:	3301      	adds	r3, #1
 800ea02:	9304      	str	r3, [sp, #16]
 800ea04:	9b05      	ldr	r3, [sp, #20]
 800ea06:	3301      	adds	r3, #1
 800ea08:	9305      	str	r3, [sp, #20]
 800ea0a:	f04f 0801 	mov.w	r8, #1
 800ea0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f47f af6a 	bne.w	800e8ea <_dtoa_r+0x7ca>
 800ea16:	2001      	movs	r0, #1
 800ea18:	e76f      	b.n	800e8fa <_dtoa_r+0x7da>
 800ea1a:	f04f 0800 	mov.w	r8, #0
 800ea1e:	e7f6      	b.n	800ea0e <_dtoa_r+0x8ee>
 800ea20:	4698      	mov	r8, r3
 800ea22:	e7f4      	b.n	800ea0e <_dtoa_r+0x8ee>
 800ea24:	f43f af7d 	beq.w	800e922 <_dtoa_r+0x802>
 800ea28:	4618      	mov	r0, r3
 800ea2a:	301c      	adds	r0, #28
 800ea2c:	e772      	b.n	800e914 <_dtoa_r+0x7f4>
 800ea2e:	9b03      	ldr	r3, [sp, #12]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	dc37      	bgt.n	800eaa4 <_dtoa_r+0x984>
 800ea34:	9b06      	ldr	r3, [sp, #24]
 800ea36:	2b02      	cmp	r3, #2
 800ea38:	dd34      	ble.n	800eaa4 <_dtoa_r+0x984>
 800ea3a:	9b03      	ldr	r3, [sp, #12]
 800ea3c:	9302      	str	r3, [sp, #8]
 800ea3e:	9b02      	ldr	r3, [sp, #8]
 800ea40:	b96b      	cbnz	r3, 800ea5e <_dtoa_r+0x93e>
 800ea42:	4631      	mov	r1, r6
 800ea44:	2205      	movs	r2, #5
 800ea46:	4620      	mov	r0, r4
 800ea48:	f000 fd5a 	bl	800f500 <__multadd>
 800ea4c:	4601      	mov	r1, r0
 800ea4e:	4606      	mov	r6, r0
 800ea50:	ee18 0a10 	vmov	r0, s16
 800ea54:	f000 ffbe 	bl	800f9d4 <__mcmp>
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	f73f adbb 	bgt.w	800e5d4 <_dtoa_r+0x4b4>
 800ea5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea60:	9d01      	ldr	r5, [sp, #4]
 800ea62:	43db      	mvns	r3, r3
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	f04f 0800 	mov.w	r8, #0
 800ea6a:	4631      	mov	r1, r6
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	f000 fd25 	bl	800f4bc <_Bfree>
 800ea72:	2f00      	cmp	r7, #0
 800ea74:	f43f aea4 	beq.w	800e7c0 <_dtoa_r+0x6a0>
 800ea78:	f1b8 0f00 	cmp.w	r8, #0
 800ea7c:	d005      	beq.n	800ea8a <_dtoa_r+0x96a>
 800ea7e:	45b8      	cmp	r8, r7
 800ea80:	d003      	beq.n	800ea8a <_dtoa_r+0x96a>
 800ea82:	4641      	mov	r1, r8
 800ea84:	4620      	mov	r0, r4
 800ea86:	f000 fd19 	bl	800f4bc <_Bfree>
 800ea8a:	4639      	mov	r1, r7
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	f000 fd15 	bl	800f4bc <_Bfree>
 800ea92:	e695      	b.n	800e7c0 <_dtoa_r+0x6a0>
 800ea94:	2600      	movs	r6, #0
 800ea96:	4637      	mov	r7, r6
 800ea98:	e7e1      	b.n	800ea5e <_dtoa_r+0x93e>
 800ea9a:	9700      	str	r7, [sp, #0]
 800ea9c:	4637      	mov	r7, r6
 800ea9e:	e599      	b.n	800e5d4 <_dtoa_r+0x4b4>
 800eaa0:	40240000 	.word	0x40240000
 800eaa4:	9b08      	ldr	r3, [sp, #32]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	f000 80ca 	beq.w	800ec40 <_dtoa_r+0xb20>
 800eaac:	9b03      	ldr	r3, [sp, #12]
 800eaae:	9302      	str	r3, [sp, #8]
 800eab0:	2d00      	cmp	r5, #0
 800eab2:	dd05      	ble.n	800eac0 <_dtoa_r+0x9a0>
 800eab4:	4639      	mov	r1, r7
 800eab6:	462a      	mov	r2, r5
 800eab8:	4620      	mov	r0, r4
 800eaba:	f000 ff1b 	bl	800f8f4 <__lshift>
 800eabe:	4607      	mov	r7, r0
 800eac0:	f1b8 0f00 	cmp.w	r8, #0
 800eac4:	d05b      	beq.n	800eb7e <_dtoa_r+0xa5e>
 800eac6:	6879      	ldr	r1, [r7, #4]
 800eac8:	4620      	mov	r0, r4
 800eaca:	f000 fcb7 	bl	800f43c <_Balloc>
 800eace:	4605      	mov	r5, r0
 800ead0:	b928      	cbnz	r0, 800eade <_dtoa_r+0x9be>
 800ead2:	4b87      	ldr	r3, [pc, #540]	; (800ecf0 <_dtoa_r+0xbd0>)
 800ead4:	4602      	mov	r2, r0
 800ead6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eada:	f7ff bb3b 	b.w	800e154 <_dtoa_r+0x34>
 800eade:	693a      	ldr	r2, [r7, #16]
 800eae0:	3202      	adds	r2, #2
 800eae2:	0092      	lsls	r2, r2, #2
 800eae4:	f107 010c 	add.w	r1, r7, #12
 800eae8:	300c      	adds	r0, #12
 800eaea:	f7fd fc81 	bl	800c3f0 <memcpy>
 800eaee:	2201      	movs	r2, #1
 800eaf0:	4629      	mov	r1, r5
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	f000 fefe 	bl	800f8f4 <__lshift>
 800eaf8:	9b01      	ldr	r3, [sp, #4]
 800eafa:	f103 0901 	add.w	r9, r3, #1
 800eafe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800eb02:	4413      	add	r3, r2
 800eb04:	9305      	str	r3, [sp, #20]
 800eb06:	f00a 0301 	and.w	r3, sl, #1
 800eb0a:	46b8      	mov	r8, r7
 800eb0c:	9304      	str	r3, [sp, #16]
 800eb0e:	4607      	mov	r7, r0
 800eb10:	4631      	mov	r1, r6
 800eb12:	ee18 0a10 	vmov	r0, s16
 800eb16:	f7ff fa77 	bl	800e008 <quorem>
 800eb1a:	4641      	mov	r1, r8
 800eb1c:	9002      	str	r0, [sp, #8]
 800eb1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eb22:	ee18 0a10 	vmov	r0, s16
 800eb26:	f000 ff55 	bl	800f9d4 <__mcmp>
 800eb2a:	463a      	mov	r2, r7
 800eb2c:	9003      	str	r0, [sp, #12]
 800eb2e:	4631      	mov	r1, r6
 800eb30:	4620      	mov	r0, r4
 800eb32:	f000 ff6b 	bl	800fa0c <__mdiff>
 800eb36:	68c2      	ldr	r2, [r0, #12]
 800eb38:	f109 3bff 	add.w	fp, r9, #4294967295
 800eb3c:	4605      	mov	r5, r0
 800eb3e:	bb02      	cbnz	r2, 800eb82 <_dtoa_r+0xa62>
 800eb40:	4601      	mov	r1, r0
 800eb42:	ee18 0a10 	vmov	r0, s16
 800eb46:	f000 ff45 	bl	800f9d4 <__mcmp>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	4629      	mov	r1, r5
 800eb4e:	4620      	mov	r0, r4
 800eb50:	9207      	str	r2, [sp, #28]
 800eb52:	f000 fcb3 	bl	800f4bc <_Bfree>
 800eb56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800eb5a:	ea43 0102 	orr.w	r1, r3, r2
 800eb5e:	9b04      	ldr	r3, [sp, #16]
 800eb60:	430b      	orrs	r3, r1
 800eb62:	464d      	mov	r5, r9
 800eb64:	d10f      	bne.n	800eb86 <_dtoa_r+0xa66>
 800eb66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eb6a:	d02a      	beq.n	800ebc2 <_dtoa_r+0xaa2>
 800eb6c:	9b03      	ldr	r3, [sp, #12]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	dd02      	ble.n	800eb78 <_dtoa_r+0xa58>
 800eb72:	9b02      	ldr	r3, [sp, #8]
 800eb74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800eb78:	f88b a000 	strb.w	sl, [fp]
 800eb7c:	e775      	b.n	800ea6a <_dtoa_r+0x94a>
 800eb7e:	4638      	mov	r0, r7
 800eb80:	e7ba      	b.n	800eaf8 <_dtoa_r+0x9d8>
 800eb82:	2201      	movs	r2, #1
 800eb84:	e7e2      	b.n	800eb4c <_dtoa_r+0xa2c>
 800eb86:	9b03      	ldr	r3, [sp, #12]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	db04      	blt.n	800eb96 <_dtoa_r+0xa76>
 800eb8c:	9906      	ldr	r1, [sp, #24]
 800eb8e:	430b      	orrs	r3, r1
 800eb90:	9904      	ldr	r1, [sp, #16]
 800eb92:	430b      	orrs	r3, r1
 800eb94:	d122      	bne.n	800ebdc <_dtoa_r+0xabc>
 800eb96:	2a00      	cmp	r2, #0
 800eb98:	ddee      	ble.n	800eb78 <_dtoa_r+0xa58>
 800eb9a:	ee18 1a10 	vmov	r1, s16
 800eb9e:	2201      	movs	r2, #1
 800eba0:	4620      	mov	r0, r4
 800eba2:	f000 fea7 	bl	800f8f4 <__lshift>
 800eba6:	4631      	mov	r1, r6
 800eba8:	ee08 0a10 	vmov	s16, r0
 800ebac:	f000 ff12 	bl	800f9d4 <__mcmp>
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	dc03      	bgt.n	800ebbc <_dtoa_r+0xa9c>
 800ebb4:	d1e0      	bne.n	800eb78 <_dtoa_r+0xa58>
 800ebb6:	f01a 0f01 	tst.w	sl, #1
 800ebba:	d0dd      	beq.n	800eb78 <_dtoa_r+0xa58>
 800ebbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ebc0:	d1d7      	bne.n	800eb72 <_dtoa_r+0xa52>
 800ebc2:	2339      	movs	r3, #57	; 0x39
 800ebc4:	f88b 3000 	strb.w	r3, [fp]
 800ebc8:	462b      	mov	r3, r5
 800ebca:	461d      	mov	r5, r3
 800ebcc:	3b01      	subs	r3, #1
 800ebce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ebd2:	2a39      	cmp	r2, #57	; 0x39
 800ebd4:	d071      	beq.n	800ecba <_dtoa_r+0xb9a>
 800ebd6:	3201      	adds	r2, #1
 800ebd8:	701a      	strb	r2, [r3, #0]
 800ebda:	e746      	b.n	800ea6a <_dtoa_r+0x94a>
 800ebdc:	2a00      	cmp	r2, #0
 800ebde:	dd07      	ble.n	800ebf0 <_dtoa_r+0xad0>
 800ebe0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ebe4:	d0ed      	beq.n	800ebc2 <_dtoa_r+0xaa2>
 800ebe6:	f10a 0301 	add.w	r3, sl, #1
 800ebea:	f88b 3000 	strb.w	r3, [fp]
 800ebee:	e73c      	b.n	800ea6a <_dtoa_r+0x94a>
 800ebf0:	9b05      	ldr	r3, [sp, #20]
 800ebf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ebf6:	4599      	cmp	r9, r3
 800ebf8:	d047      	beq.n	800ec8a <_dtoa_r+0xb6a>
 800ebfa:	ee18 1a10 	vmov	r1, s16
 800ebfe:	2300      	movs	r3, #0
 800ec00:	220a      	movs	r2, #10
 800ec02:	4620      	mov	r0, r4
 800ec04:	f000 fc7c 	bl	800f500 <__multadd>
 800ec08:	45b8      	cmp	r8, r7
 800ec0a:	ee08 0a10 	vmov	s16, r0
 800ec0e:	f04f 0300 	mov.w	r3, #0
 800ec12:	f04f 020a 	mov.w	r2, #10
 800ec16:	4641      	mov	r1, r8
 800ec18:	4620      	mov	r0, r4
 800ec1a:	d106      	bne.n	800ec2a <_dtoa_r+0xb0a>
 800ec1c:	f000 fc70 	bl	800f500 <__multadd>
 800ec20:	4680      	mov	r8, r0
 800ec22:	4607      	mov	r7, r0
 800ec24:	f109 0901 	add.w	r9, r9, #1
 800ec28:	e772      	b.n	800eb10 <_dtoa_r+0x9f0>
 800ec2a:	f000 fc69 	bl	800f500 <__multadd>
 800ec2e:	4639      	mov	r1, r7
 800ec30:	4680      	mov	r8, r0
 800ec32:	2300      	movs	r3, #0
 800ec34:	220a      	movs	r2, #10
 800ec36:	4620      	mov	r0, r4
 800ec38:	f000 fc62 	bl	800f500 <__multadd>
 800ec3c:	4607      	mov	r7, r0
 800ec3e:	e7f1      	b.n	800ec24 <_dtoa_r+0xb04>
 800ec40:	9b03      	ldr	r3, [sp, #12]
 800ec42:	9302      	str	r3, [sp, #8]
 800ec44:	9d01      	ldr	r5, [sp, #4]
 800ec46:	ee18 0a10 	vmov	r0, s16
 800ec4a:	4631      	mov	r1, r6
 800ec4c:	f7ff f9dc 	bl	800e008 <quorem>
 800ec50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ec54:	9b01      	ldr	r3, [sp, #4]
 800ec56:	f805 ab01 	strb.w	sl, [r5], #1
 800ec5a:	1aea      	subs	r2, r5, r3
 800ec5c:	9b02      	ldr	r3, [sp, #8]
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	dd09      	ble.n	800ec76 <_dtoa_r+0xb56>
 800ec62:	ee18 1a10 	vmov	r1, s16
 800ec66:	2300      	movs	r3, #0
 800ec68:	220a      	movs	r2, #10
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f000 fc48 	bl	800f500 <__multadd>
 800ec70:	ee08 0a10 	vmov	s16, r0
 800ec74:	e7e7      	b.n	800ec46 <_dtoa_r+0xb26>
 800ec76:	9b02      	ldr	r3, [sp, #8]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	bfc8      	it	gt
 800ec7c:	461d      	movgt	r5, r3
 800ec7e:	9b01      	ldr	r3, [sp, #4]
 800ec80:	bfd8      	it	le
 800ec82:	2501      	movle	r5, #1
 800ec84:	441d      	add	r5, r3
 800ec86:	f04f 0800 	mov.w	r8, #0
 800ec8a:	ee18 1a10 	vmov	r1, s16
 800ec8e:	2201      	movs	r2, #1
 800ec90:	4620      	mov	r0, r4
 800ec92:	f000 fe2f 	bl	800f8f4 <__lshift>
 800ec96:	4631      	mov	r1, r6
 800ec98:	ee08 0a10 	vmov	s16, r0
 800ec9c:	f000 fe9a 	bl	800f9d4 <__mcmp>
 800eca0:	2800      	cmp	r0, #0
 800eca2:	dc91      	bgt.n	800ebc8 <_dtoa_r+0xaa8>
 800eca4:	d102      	bne.n	800ecac <_dtoa_r+0xb8c>
 800eca6:	f01a 0f01 	tst.w	sl, #1
 800ecaa:	d18d      	bne.n	800ebc8 <_dtoa_r+0xaa8>
 800ecac:	462b      	mov	r3, r5
 800ecae:	461d      	mov	r5, r3
 800ecb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecb4:	2a30      	cmp	r2, #48	; 0x30
 800ecb6:	d0fa      	beq.n	800ecae <_dtoa_r+0xb8e>
 800ecb8:	e6d7      	b.n	800ea6a <_dtoa_r+0x94a>
 800ecba:	9a01      	ldr	r2, [sp, #4]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d184      	bne.n	800ebca <_dtoa_r+0xaaa>
 800ecc0:	9b00      	ldr	r3, [sp, #0]
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	2331      	movs	r3, #49	; 0x31
 800ecc8:	7013      	strb	r3, [r2, #0]
 800ecca:	e6ce      	b.n	800ea6a <_dtoa_r+0x94a>
 800eccc:	4b09      	ldr	r3, [pc, #36]	; (800ecf4 <_dtoa_r+0xbd4>)
 800ecce:	f7ff ba95 	b.w	800e1fc <_dtoa_r+0xdc>
 800ecd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f47f aa6e 	bne.w	800e1b6 <_dtoa_r+0x96>
 800ecda:	4b07      	ldr	r3, [pc, #28]	; (800ecf8 <_dtoa_r+0xbd8>)
 800ecdc:	f7ff ba8e 	b.w	800e1fc <_dtoa_r+0xdc>
 800ece0:	9b02      	ldr	r3, [sp, #8]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	dcae      	bgt.n	800ec44 <_dtoa_r+0xb24>
 800ece6:	9b06      	ldr	r3, [sp, #24]
 800ece8:	2b02      	cmp	r3, #2
 800ecea:	f73f aea8 	bgt.w	800ea3e <_dtoa_r+0x91e>
 800ecee:	e7a9      	b.n	800ec44 <_dtoa_r+0xb24>
 800ecf0:	08014448 	.word	0x08014448
 800ecf4:	08014641 	.word	0x08014641
 800ecf8:	080143c9 	.word	0x080143c9

0800ecfc <rshift>:
 800ecfc:	6903      	ldr	r3, [r0, #16]
 800ecfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ed02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ed0a:	f100 0414 	add.w	r4, r0, #20
 800ed0e:	dd45      	ble.n	800ed9c <rshift+0xa0>
 800ed10:	f011 011f 	ands.w	r1, r1, #31
 800ed14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ed18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ed1c:	d10c      	bne.n	800ed38 <rshift+0x3c>
 800ed1e:	f100 0710 	add.w	r7, r0, #16
 800ed22:	4629      	mov	r1, r5
 800ed24:	42b1      	cmp	r1, r6
 800ed26:	d334      	bcc.n	800ed92 <rshift+0x96>
 800ed28:	1a9b      	subs	r3, r3, r2
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	1eea      	subs	r2, r5, #3
 800ed2e:	4296      	cmp	r6, r2
 800ed30:	bf38      	it	cc
 800ed32:	2300      	movcc	r3, #0
 800ed34:	4423      	add	r3, r4
 800ed36:	e015      	b.n	800ed64 <rshift+0x68>
 800ed38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ed3c:	f1c1 0820 	rsb	r8, r1, #32
 800ed40:	40cf      	lsrs	r7, r1
 800ed42:	f105 0e04 	add.w	lr, r5, #4
 800ed46:	46a1      	mov	r9, r4
 800ed48:	4576      	cmp	r6, lr
 800ed4a:	46f4      	mov	ip, lr
 800ed4c:	d815      	bhi.n	800ed7a <rshift+0x7e>
 800ed4e:	1a9a      	subs	r2, r3, r2
 800ed50:	0092      	lsls	r2, r2, #2
 800ed52:	3a04      	subs	r2, #4
 800ed54:	3501      	adds	r5, #1
 800ed56:	42ae      	cmp	r6, r5
 800ed58:	bf38      	it	cc
 800ed5a:	2200      	movcc	r2, #0
 800ed5c:	18a3      	adds	r3, r4, r2
 800ed5e:	50a7      	str	r7, [r4, r2]
 800ed60:	b107      	cbz	r7, 800ed64 <rshift+0x68>
 800ed62:	3304      	adds	r3, #4
 800ed64:	1b1a      	subs	r2, r3, r4
 800ed66:	42a3      	cmp	r3, r4
 800ed68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ed6c:	bf08      	it	eq
 800ed6e:	2300      	moveq	r3, #0
 800ed70:	6102      	str	r2, [r0, #16]
 800ed72:	bf08      	it	eq
 800ed74:	6143      	streq	r3, [r0, #20]
 800ed76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed7a:	f8dc c000 	ldr.w	ip, [ip]
 800ed7e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ed82:	ea4c 0707 	orr.w	r7, ip, r7
 800ed86:	f849 7b04 	str.w	r7, [r9], #4
 800ed8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed8e:	40cf      	lsrs	r7, r1
 800ed90:	e7da      	b.n	800ed48 <rshift+0x4c>
 800ed92:	f851 cb04 	ldr.w	ip, [r1], #4
 800ed96:	f847 cf04 	str.w	ip, [r7, #4]!
 800ed9a:	e7c3      	b.n	800ed24 <rshift+0x28>
 800ed9c:	4623      	mov	r3, r4
 800ed9e:	e7e1      	b.n	800ed64 <rshift+0x68>

0800eda0 <__hexdig_fun>:
 800eda0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800eda4:	2b09      	cmp	r3, #9
 800eda6:	d802      	bhi.n	800edae <__hexdig_fun+0xe>
 800eda8:	3820      	subs	r0, #32
 800edaa:	b2c0      	uxtb	r0, r0
 800edac:	4770      	bx	lr
 800edae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800edb2:	2b05      	cmp	r3, #5
 800edb4:	d801      	bhi.n	800edba <__hexdig_fun+0x1a>
 800edb6:	3847      	subs	r0, #71	; 0x47
 800edb8:	e7f7      	b.n	800edaa <__hexdig_fun+0xa>
 800edba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800edbe:	2b05      	cmp	r3, #5
 800edc0:	d801      	bhi.n	800edc6 <__hexdig_fun+0x26>
 800edc2:	3827      	subs	r0, #39	; 0x27
 800edc4:	e7f1      	b.n	800edaa <__hexdig_fun+0xa>
 800edc6:	2000      	movs	r0, #0
 800edc8:	4770      	bx	lr
	...

0800edcc <__gethex>:
 800edcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edd0:	ed2d 8b02 	vpush	{d8}
 800edd4:	b089      	sub	sp, #36	; 0x24
 800edd6:	ee08 0a10 	vmov	s16, r0
 800edda:	9304      	str	r3, [sp, #16]
 800eddc:	4bb4      	ldr	r3, [pc, #720]	; (800f0b0 <__gethex+0x2e4>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	9301      	str	r3, [sp, #4]
 800ede2:	4618      	mov	r0, r3
 800ede4:	468b      	mov	fp, r1
 800ede6:	4690      	mov	r8, r2
 800ede8:	f7f1 fa04 	bl	80001f4 <strlen>
 800edec:	9b01      	ldr	r3, [sp, #4]
 800edee:	f8db 2000 	ldr.w	r2, [fp]
 800edf2:	4403      	add	r3, r0
 800edf4:	4682      	mov	sl, r0
 800edf6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800edfa:	9305      	str	r3, [sp, #20]
 800edfc:	1c93      	adds	r3, r2, #2
 800edfe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ee02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ee06:	32fe      	adds	r2, #254	; 0xfe
 800ee08:	18d1      	adds	r1, r2, r3
 800ee0a:	461f      	mov	r7, r3
 800ee0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ee10:	9100      	str	r1, [sp, #0]
 800ee12:	2830      	cmp	r0, #48	; 0x30
 800ee14:	d0f8      	beq.n	800ee08 <__gethex+0x3c>
 800ee16:	f7ff ffc3 	bl	800eda0 <__hexdig_fun>
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	d13a      	bne.n	800ee96 <__gethex+0xca>
 800ee20:	9901      	ldr	r1, [sp, #4]
 800ee22:	4652      	mov	r2, sl
 800ee24:	4638      	mov	r0, r7
 800ee26:	f001 fda3 	bl	8010970 <strncmp>
 800ee2a:	4605      	mov	r5, r0
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	d168      	bne.n	800ef02 <__gethex+0x136>
 800ee30:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ee34:	eb07 060a 	add.w	r6, r7, sl
 800ee38:	f7ff ffb2 	bl	800eda0 <__hexdig_fun>
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	d062      	beq.n	800ef06 <__gethex+0x13a>
 800ee40:	4633      	mov	r3, r6
 800ee42:	7818      	ldrb	r0, [r3, #0]
 800ee44:	2830      	cmp	r0, #48	; 0x30
 800ee46:	461f      	mov	r7, r3
 800ee48:	f103 0301 	add.w	r3, r3, #1
 800ee4c:	d0f9      	beq.n	800ee42 <__gethex+0x76>
 800ee4e:	f7ff ffa7 	bl	800eda0 <__hexdig_fun>
 800ee52:	2301      	movs	r3, #1
 800ee54:	fab0 f480 	clz	r4, r0
 800ee58:	0964      	lsrs	r4, r4, #5
 800ee5a:	4635      	mov	r5, r6
 800ee5c:	9300      	str	r3, [sp, #0]
 800ee5e:	463a      	mov	r2, r7
 800ee60:	4616      	mov	r6, r2
 800ee62:	3201      	adds	r2, #1
 800ee64:	7830      	ldrb	r0, [r6, #0]
 800ee66:	f7ff ff9b 	bl	800eda0 <__hexdig_fun>
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	d1f8      	bne.n	800ee60 <__gethex+0x94>
 800ee6e:	9901      	ldr	r1, [sp, #4]
 800ee70:	4652      	mov	r2, sl
 800ee72:	4630      	mov	r0, r6
 800ee74:	f001 fd7c 	bl	8010970 <strncmp>
 800ee78:	b980      	cbnz	r0, 800ee9c <__gethex+0xd0>
 800ee7a:	b94d      	cbnz	r5, 800ee90 <__gethex+0xc4>
 800ee7c:	eb06 050a 	add.w	r5, r6, sl
 800ee80:	462a      	mov	r2, r5
 800ee82:	4616      	mov	r6, r2
 800ee84:	3201      	adds	r2, #1
 800ee86:	7830      	ldrb	r0, [r6, #0]
 800ee88:	f7ff ff8a 	bl	800eda0 <__hexdig_fun>
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	d1f8      	bne.n	800ee82 <__gethex+0xb6>
 800ee90:	1bad      	subs	r5, r5, r6
 800ee92:	00ad      	lsls	r5, r5, #2
 800ee94:	e004      	b.n	800eea0 <__gethex+0xd4>
 800ee96:	2400      	movs	r4, #0
 800ee98:	4625      	mov	r5, r4
 800ee9a:	e7e0      	b.n	800ee5e <__gethex+0x92>
 800ee9c:	2d00      	cmp	r5, #0
 800ee9e:	d1f7      	bne.n	800ee90 <__gethex+0xc4>
 800eea0:	7833      	ldrb	r3, [r6, #0]
 800eea2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eea6:	2b50      	cmp	r3, #80	; 0x50
 800eea8:	d13b      	bne.n	800ef22 <__gethex+0x156>
 800eeaa:	7873      	ldrb	r3, [r6, #1]
 800eeac:	2b2b      	cmp	r3, #43	; 0x2b
 800eeae:	d02c      	beq.n	800ef0a <__gethex+0x13e>
 800eeb0:	2b2d      	cmp	r3, #45	; 0x2d
 800eeb2:	d02e      	beq.n	800ef12 <__gethex+0x146>
 800eeb4:	1c71      	adds	r1, r6, #1
 800eeb6:	f04f 0900 	mov.w	r9, #0
 800eeba:	7808      	ldrb	r0, [r1, #0]
 800eebc:	f7ff ff70 	bl	800eda0 <__hexdig_fun>
 800eec0:	1e43      	subs	r3, r0, #1
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	2b18      	cmp	r3, #24
 800eec6:	d82c      	bhi.n	800ef22 <__gethex+0x156>
 800eec8:	f1a0 0210 	sub.w	r2, r0, #16
 800eecc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eed0:	f7ff ff66 	bl	800eda0 <__hexdig_fun>
 800eed4:	1e43      	subs	r3, r0, #1
 800eed6:	b2db      	uxtb	r3, r3
 800eed8:	2b18      	cmp	r3, #24
 800eeda:	d91d      	bls.n	800ef18 <__gethex+0x14c>
 800eedc:	f1b9 0f00 	cmp.w	r9, #0
 800eee0:	d000      	beq.n	800eee4 <__gethex+0x118>
 800eee2:	4252      	negs	r2, r2
 800eee4:	4415      	add	r5, r2
 800eee6:	f8cb 1000 	str.w	r1, [fp]
 800eeea:	b1e4      	cbz	r4, 800ef26 <__gethex+0x15a>
 800eeec:	9b00      	ldr	r3, [sp, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	bf14      	ite	ne
 800eef2:	2700      	movne	r7, #0
 800eef4:	2706      	moveq	r7, #6
 800eef6:	4638      	mov	r0, r7
 800eef8:	b009      	add	sp, #36	; 0x24
 800eefa:	ecbd 8b02 	vpop	{d8}
 800eefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef02:	463e      	mov	r6, r7
 800ef04:	4625      	mov	r5, r4
 800ef06:	2401      	movs	r4, #1
 800ef08:	e7ca      	b.n	800eea0 <__gethex+0xd4>
 800ef0a:	f04f 0900 	mov.w	r9, #0
 800ef0e:	1cb1      	adds	r1, r6, #2
 800ef10:	e7d3      	b.n	800eeba <__gethex+0xee>
 800ef12:	f04f 0901 	mov.w	r9, #1
 800ef16:	e7fa      	b.n	800ef0e <__gethex+0x142>
 800ef18:	230a      	movs	r3, #10
 800ef1a:	fb03 0202 	mla	r2, r3, r2, r0
 800ef1e:	3a10      	subs	r2, #16
 800ef20:	e7d4      	b.n	800eecc <__gethex+0x100>
 800ef22:	4631      	mov	r1, r6
 800ef24:	e7df      	b.n	800eee6 <__gethex+0x11a>
 800ef26:	1bf3      	subs	r3, r6, r7
 800ef28:	3b01      	subs	r3, #1
 800ef2a:	4621      	mov	r1, r4
 800ef2c:	2b07      	cmp	r3, #7
 800ef2e:	dc0b      	bgt.n	800ef48 <__gethex+0x17c>
 800ef30:	ee18 0a10 	vmov	r0, s16
 800ef34:	f000 fa82 	bl	800f43c <_Balloc>
 800ef38:	4604      	mov	r4, r0
 800ef3a:	b940      	cbnz	r0, 800ef4e <__gethex+0x182>
 800ef3c:	4b5d      	ldr	r3, [pc, #372]	; (800f0b4 <__gethex+0x2e8>)
 800ef3e:	4602      	mov	r2, r0
 800ef40:	21de      	movs	r1, #222	; 0xde
 800ef42:	485d      	ldr	r0, [pc, #372]	; (800f0b8 <__gethex+0x2ec>)
 800ef44:	f001 fde4 	bl	8010b10 <__assert_func>
 800ef48:	3101      	adds	r1, #1
 800ef4a:	105b      	asrs	r3, r3, #1
 800ef4c:	e7ee      	b.n	800ef2c <__gethex+0x160>
 800ef4e:	f100 0914 	add.w	r9, r0, #20
 800ef52:	f04f 0b00 	mov.w	fp, #0
 800ef56:	f1ca 0301 	rsb	r3, sl, #1
 800ef5a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ef5e:	f8cd b000 	str.w	fp, [sp]
 800ef62:	9306      	str	r3, [sp, #24]
 800ef64:	42b7      	cmp	r7, r6
 800ef66:	d340      	bcc.n	800efea <__gethex+0x21e>
 800ef68:	9802      	ldr	r0, [sp, #8]
 800ef6a:	9b00      	ldr	r3, [sp, #0]
 800ef6c:	f840 3b04 	str.w	r3, [r0], #4
 800ef70:	eba0 0009 	sub.w	r0, r0, r9
 800ef74:	1080      	asrs	r0, r0, #2
 800ef76:	0146      	lsls	r6, r0, #5
 800ef78:	6120      	str	r0, [r4, #16]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f000 fb50 	bl	800f620 <__hi0bits>
 800ef80:	1a30      	subs	r0, r6, r0
 800ef82:	f8d8 6000 	ldr.w	r6, [r8]
 800ef86:	42b0      	cmp	r0, r6
 800ef88:	dd63      	ble.n	800f052 <__gethex+0x286>
 800ef8a:	1b87      	subs	r7, r0, r6
 800ef8c:	4639      	mov	r1, r7
 800ef8e:	4620      	mov	r0, r4
 800ef90:	f000 fef4 	bl	800fd7c <__any_on>
 800ef94:	4682      	mov	sl, r0
 800ef96:	b1a8      	cbz	r0, 800efc4 <__gethex+0x1f8>
 800ef98:	1e7b      	subs	r3, r7, #1
 800ef9a:	1159      	asrs	r1, r3, #5
 800ef9c:	f003 021f 	and.w	r2, r3, #31
 800efa0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800efa4:	f04f 0a01 	mov.w	sl, #1
 800efa8:	fa0a f202 	lsl.w	r2, sl, r2
 800efac:	420a      	tst	r2, r1
 800efae:	d009      	beq.n	800efc4 <__gethex+0x1f8>
 800efb0:	4553      	cmp	r3, sl
 800efb2:	dd05      	ble.n	800efc0 <__gethex+0x1f4>
 800efb4:	1eb9      	subs	r1, r7, #2
 800efb6:	4620      	mov	r0, r4
 800efb8:	f000 fee0 	bl	800fd7c <__any_on>
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d145      	bne.n	800f04c <__gethex+0x280>
 800efc0:	f04f 0a02 	mov.w	sl, #2
 800efc4:	4639      	mov	r1, r7
 800efc6:	4620      	mov	r0, r4
 800efc8:	f7ff fe98 	bl	800ecfc <rshift>
 800efcc:	443d      	add	r5, r7
 800efce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800efd2:	42ab      	cmp	r3, r5
 800efd4:	da4c      	bge.n	800f070 <__gethex+0x2a4>
 800efd6:	ee18 0a10 	vmov	r0, s16
 800efda:	4621      	mov	r1, r4
 800efdc:	f000 fa6e 	bl	800f4bc <_Bfree>
 800efe0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800efe2:	2300      	movs	r3, #0
 800efe4:	6013      	str	r3, [r2, #0]
 800efe6:	27a3      	movs	r7, #163	; 0xa3
 800efe8:	e785      	b.n	800eef6 <__gethex+0x12a>
 800efea:	1e73      	subs	r3, r6, #1
 800efec:	9a05      	ldr	r2, [sp, #20]
 800efee:	9303      	str	r3, [sp, #12]
 800eff0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d019      	beq.n	800f02c <__gethex+0x260>
 800eff8:	f1bb 0f20 	cmp.w	fp, #32
 800effc:	d107      	bne.n	800f00e <__gethex+0x242>
 800effe:	9b02      	ldr	r3, [sp, #8]
 800f000:	9a00      	ldr	r2, [sp, #0]
 800f002:	f843 2b04 	str.w	r2, [r3], #4
 800f006:	9302      	str	r3, [sp, #8]
 800f008:	2300      	movs	r3, #0
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	469b      	mov	fp, r3
 800f00e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f012:	f7ff fec5 	bl	800eda0 <__hexdig_fun>
 800f016:	9b00      	ldr	r3, [sp, #0]
 800f018:	f000 000f 	and.w	r0, r0, #15
 800f01c:	fa00 f00b 	lsl.w	r0, r0, fp
 800f020:	4303      	orrs	r3, r0
 800f022:	9300      	str	r3, [sp, #0]
 800f024:	f10b 0b04 	add.w	fp, fp, #4
 800f028:	9b03      	ldr	r3, [sp, #12]
 800f02a:	e00d      	b.n	800f048 <__gethex+0x27c>
 800f02c:	9b03      	ldr	r3, [sp, #12]
 800f02e:	9a06      	ldr	r2, [sp, #24]
 800f030:	4413      	add	r3, r2
 800f032:	42bb      	cmp	r3, r7
 800f034:	d3e0      	bcc.n	800eff8 <__gethex+0x22c>
 800f036:	4618      	mov	r0, r3
 800f038:	9901      	ldr	r1, [sp, #4]
 800f03a:	9307      	str	r3, [sp, #28]
 800f03c:	4652      	mov	r2, sl
 800f03e:	f001 fc97 	bl	8010970 <strncmp>
 800f042:	9b07      	ldr	r3, [sp, #28]
 800f044:	2800      	cmp	r0, #0
 800f046:	d1d7      	bne.n	800eff8 <__gethex+0x22c>
 800f048:	461e      	mov	r6, r3
 800f04a:	e78b      	b.n	800ef64 <__gethex+0x198>
 800f04c:	f04f 0a03 	mov.w	sl, #3
 800f050:	e7b8      	b.n	800efc4 <__gethex+0x1f8>
 800f052:	da0a      	bge.n	800f06a <__gethex+0x29e>
 800f054:	1a37      	subs	r7, r6, r0
 800f056:	4621      	mov	r1, r4
 800f058:	ee18 0a10 	vmov	r0, s16
 800f05c:	463a      	mov	r2, r7
 800f05e:	f000 fc49 	bl	800f8f4 <__lshift>
 800f062:	1bed      	subs	r5, r5, r7
 800f064:	4604      	mov	r4, r0
 800f066:	f100 0914 	add.w	r9, r0, #20
 800f06a:	f04f 0a00 	mov.w	sl, #0
 800f06e:	e7ae      	b.n	800efce <__gethex+0x202>
 800f070:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f074:	42a8      	cmp	r0, r5
 800f076:	dd72      	ble.n	800f15e <__gethex+0x392>
 800f078:	1b45      	subs	r5, r0, r5
 800f07a:	42ae      	cmp	r6, r5
 800f07c:	dc36      	bgt.n	800f0ec <__gethex+0x320>
 800f07e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f082:	2b02      	cmp	r3, #2
 800f084:	d02a      	beq.n	800f0dc <__gethex+0x310>
 800f086:	2b03      	cmp	r3, #3
 800f088:	d02c      	beq.n	800f0e4 <__gethex+0x318>
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d11c      	bne.n	800f0c8 <__gethex+0x2fc>
 800f08e:	42ae      	cmp	r6, r5
 800f090:	d11a      	bne.n	800f0c8 <__gethex+0x2fc>
 800f092:	2e01      	cmp	r6, #1
 800f094:	d112      	bne.n	800f0bc <__gethex+0x2f0>
 800f096:	9a04      	ldr	r2, [sp, #16]
 800f098:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f09c:	6013      	str	r3, [r2, #0]
 800f09e:	2301      	movs	r3, #1
 800f0a0:	6123      	str	r3, [r4, #16]
 800f0a2:	f8c9 3000 	str.w	r3, [r9]
 800f0a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f0a8:	2762      	movs	r7, #98	; 0x62
 800f0aa:	601c      	str	r4, [r3, #0]
 800f0ac:	e723      	b.n	800eef6 <__gethex+0x12a>
 800f0ae:	bf00      	nop
 800f0b0:	080144c0 	.word	0x080144c0
 800f0b4:	08014448 	.word	0x08014448
 800f0b8:	08014459 	.word	0x08014459
 800f0bc:	1e71      	subs	r1, r6, #1
 800f0be:	4620      	mov	r0, r4
 800f0c0:	f000 fe5c 	bl	800fd7c <__any_on>
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	d1e6      	bne.n	800f096 <__gethex+0x2ca>
 800f0c8:	ee18 0a10 	vmov	r0, s16
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	f000 f9f5 	bl	800f4bc <_Bfree>
 800f0d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	6013      	str	r3, [r2, #0]
 800f0d8:	2750      	movs	r7, #80	; 0x50
 800f0da:	e70c      	b.n	800eef6 <__gethex+0x12a>
 800f0dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d1f2      	bne.n	800f0c8 <__gethex+0x2fc>
 800f0e2:	e7d8      	b.n	800f096 <__gethex+0x2ca>
 800f0e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d1d5      	bne.n	800f096 <__gethex+0x2ca>
 800f0ea:	e7ed      	b.n	800f0c8 <__gethex+0x2fc>
 800f0ec:	1e6f      	subs	r7, r5, #1
 800f0ee:	f1ba 0f00 	cmp.w	sl, #0
 800f0f2:	d131      	bne.n	800f158 <__gethex+0x38c>
 800f0f4:	b127      	cbz	r7, 800f100 <__gethex+0x334>
 800f0f6:	4639      	mov	r1, r7
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f000 fe3f 	bl	800fd7c <__any_on>
 800f0fe:	4682      	mov	sl, r0
 800f100:	117b      	asrs	r3, r7, #5
 800f102:	2101      	movs	r1, #1
 800f104:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f108:	f007 071f 	and.w	r7, r7, #31
 800f10c:	fa01 f707 	lsl.w	r7, r1, r7
 800f110:	421f      	tst	r7, r3
 800f112:	4629      	mov	r1, r5
 800f114:	4620      	mov	r0, r4
 800f116:	bf18      	it	ne
 800f118:	f04a 0a02 	orrne.w	sl, sl, #2
 800f11c:	1b76      	subs	r6, r6, r5
 800f11e:	f7ff fded 	bl	800ecfc <rshift>
 800f122:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f126:	2702      	movs	r7, #2
 800f128:	f1ba 0f00 	cmp.w	sl, #0
 800f12c:	d048      	beq.n	800f1c0 <__gethex+0x3f4>
 800f12e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f132:	2b02      	cmp	r3, #2
 800f134:	d015      	beq.n	800f162 <__gethex+0x396>
 800f136:	2b03      	cmp	r3, #3
 800f138:	d017      	beq.n	800f16a <__gethex+0x39e>
 800f13a:	2b01      	cmp	r3, #1
 800f13c:	d109      	bne.n	800f152 <__gethex+0x386>
 800f13e:	f01a 0f02 	tst.w	sl, #2
 800f142:	d006      	beq.n	800f152 <__gethex+0x386>
 800f144:	f8d9 0000 	ldr.w	r0, [r9]
 800f148:	ea4a 0a00 	orr.w	sl, sl, r0
 800f14c:	f01a 0f01 	tst.w	sl, #1
 800f150:	d10e      	bne.n	800f170 <__gethex+0x3a4>
 800f152:	f047 0710 	orr.w	r7, r7, #16
 800f156:	e033      	b.n	800f1c0 <__gethex+0x3f4>
 800f158:	f04f 0a01 	mov.w	sl, #1
 800f15c:	e7d0      	b.n	800f100 <__gethex+0x334>
 800f15e:	2701      	movs	r7, #1
 800f160:	e7e2      	b.n	800f128 <__gethex+0x35c>
 800f162:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f164:	f1c3 0301 	rsb	r3, r3, #1
 800f168:	9315      	str	r3, [sp, #84]	; 0x54
 800f16a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d0f0      	beq.n	800f152 <__gethex+0x386>
 800f170:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f174:	f104 0314 	add.w	r3, r4, #20
 800f178:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f17c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f180:	f04f 0c00 	mov.w	ip, #0
 800f184:	4618      	mov	r0, r3
 800f186:	f853 2b04 	ldr.w	r2, [r3], #4
 800f18a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f18e:	d01c      	beq.n	800f1ca <__gethex+0x3fe>
 800f190:	3201      	adds	r2, #1
 800f192:	6002      	str	r2, [r0, #0]
 800f194:	2f02      	cmp	r7, #2
 800f196:	f104 0314 	add.w	r3, r4, #20
 800f19a:	d13f      	bne.n	800f21c <__gethex+0x450>
 800f19c:	f8d8 2000 	ldr.w	r2, [r8]
 800f1a0:	3a01      	subs	r2, #1
 800f1a2:	42b2      	cmp	r2, r6
 800f1a4:	d10a      	bne.n	800f1bc <__gethex+0x3f0>
 800f1a6:	1171      	asrs	r1, r6, #5
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f1ae:	f006 061f 	and.w	r6, r6, #31
 800f1b2:	fa02 f606 	lsl.w	r6, r2, r6
 800f1b6:	421e      	tst	r6, r3
 800f1b8:	bf18      	it	ne
 800f1ba:	4617      	movne	r7, r2
 800f1bc:	f047 0720 	orr.w	r7, r7, #32
 800f1c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f1c2:	601c      	str	r4, [r3, #0]
 800f1c4:	9b04      	ldr	r3, [sp, #16]
 800f1c6:	601d      	str	r5, [r3, #0]
 800f1c8:	e695      	b.n	800eef6 <__gethex+0x12a>
 800f1ca:	4299      	cmp	r1, r3
 800f1cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800f1d0:	d8d8      	bhi.n	800f184 <__gethex+0x3b8>
 800f1d2:	68a3      	ldr	r3, [r4, #8]
 800f1d4:	459b      	cmp	fp, r3
 800f1d6:	db19      	blt.n	800f20c <__gethex+0x440>
 800f1d8:	6861      	ldr	r1, [r4, #4]
 800f1da:	ee18 0a10 	vmov	r0, s16
 800f1de:	3101      	adds	r1, #1
 800f1e0:	f000 f92c 	bl	800f43c <_Balloc>
 800f1e4:	4681      	mov	r9, r0
 800f1e6:	b918      	cbnz	r0, 800f1f0 <__gethex+0x424>
 800f1e8:	4b1a      	ldr	r3, [pc, #104]	; (800f254 <__gethex+0x488>)
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	2184      	movs	r1, #132	; 0x84
 800f1ee:	e6a8      	b.n	800ef42 <__gethex+0x176>
 800f1f0:	6922      	ldr	r2, [r4, #16]
 800f1f2:	3202      	adds	r2, #2
 800f1f4:	f104 010c 	add.w	r1, r4, #12
 800f1f8:	0092      	lsls	r2, r2, #2
 800f1fa:	300c      	adds	r0, #12
 800f1fc:	f7fd f8f8 	bl	800c3f0 <memcpy>
 800f200:	4621      	mov	r1, r4
 800f202:	ee18 0a10 	vmov	r0, s16
 800f206:	f000 f959 	bl	800f4bc <_Bfree>
 800f20a:	464c      	mov	r4, r9
 800f20c:	6923      	ldr	r3, [r4, #16]
 800f20e:	1c5a      	adds	r2, r3, #1
 800f210:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f214:	6122      	str	r2, [r4, #16]
 800f216:	2201      	movs	r2, #1
 800f218:	615a      	str	r2, [r3, #20]
 800f21a:	e7bb      	b.n	800f194 <__gethex+0x3c8>
 800f21c:	6922      	ldr	r2, [r4, #16]
 800f21e:	455a      	cmp	r2, fp
 800f220:	dd0b      	ble.n	800f23a <__gethex+0x46e>
 800f222:	2101      	movs	r1, #1
 800f224:	4620      	mov	r0, r4
 800f226:	f7ff fd69 	bl	800ecfc <rshift>
 800f22a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f22e:	3501      	adds	r5, #1
 800f230:	42ab      	cmp	r3, r5
 800f232:	f6ff aed0 	blt.w	800efd6 <__gethex+0x20a>
 800f236:	2701      	movs	r7, #1
 800f238:	e7c0      	b.n	800f1bc <__gethex+0x3f0>
 800f23a:	f016 061f 	ands.w	r6, r6, #31
 800f23e:	d0fa      	beq.n	800f236 <__gethex+0x46a>
 800f240:	4453      	add	r3, sl
 800f242:	f1c6 0620 	rsb	r6, r6, #32
 800f246:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f24a:	f000 f9e9 	bl	800f620 <__hi0bits>
 800f24e:	42b0      	cmp	r0, r6
 800f250:	dbe7      	blt.n	800f222 <__gethex+0x456>
 800f252:	e7f0      	b.n	800f236 <__gethex+0x46a>
 800f254:	08014448 	.word	0x08014448

0800f258 <L_shift>:
 800f258:	f1c2 0208 	rsb	r2, r2, #8
 800f25c:	0092      	lsls	r2, r2, #2
 800f25e:	b570      	push	{r4, r5, r6, lr}
 800f260:	f1c2 0620 	rsb	r6, r2, #32
 800f264:	6843      	ldr	r3, [r0, #4]
 800f266:	6804      	ldr	r4, [r0, #0]
 800f268:	fa03 f506 	lsl.w	r5, r3, r6
 800f26c:	432c      	orrs	r4, r5
 800f26e:	40d3      	lsrs	r3, r2
 800f270:	6004      	str	r4, [r0, #0]
 800f272:	f840 3f04 	str.w	r3, [r0, #4]!
 800f276:	4288      	cmp	r0, r1
 800f278:	d3f4      	bcc.n	800f264 <L_shift+0xc>
 800f27a:	bd70      	pop	{r4, r5, r6, pc}

0800f27c <__match>:
 800f27c:	b530      	push	{r4, r5, lr}
 800f27e:	6803      	ldr	r3, [r0, #0]
 800f280:	3301      	adds	r3, #1
 800f282:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f286:	b914      	cbnz	r4, 800f28e <__match+0x12>
 800f288:	6003      	str	r3, [r0, #0]
 800f28a:	2001      	movs	r0, #1
 800f28c:	bd30      	pop	{r4, r5, pc}
 800f28e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f292:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f296:	2d19      	cmp	r5, #25
 800f298:	bf98      	it	ls
 800f29a:	3220      	addls	r2, #32
 800f29c:	42a2      	cmp	r2, r4
 800f29e:	d0f0      	beq.n	800f282 <__match+0x6>
 800f2a0:	2000      	movs	r0, #0
 800f2a2:	e7f3      	b.n	800f28c <__match+0x10>

0800f2a4 <__hexnan>:
 800f2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a8:	680b      	ldr	r3, [r1, #0]
 800f2aa:	115e      	asrs	r6, r3, #5
 800f2ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f2b0:	f013 031f 	ands.w	r3, r3, #31
 800f2b4:	b087      	sub	sp, #28
 800f2b6:	bf18      	it	ne
 800f2b8:	3604      	addne	r6, #4
 800f2ba:	2500      	movs	r5, #0
 800f2bc:	1f37      	subs	r7, r6, #4
 800f2be:	4690      	mov	r8, r2
 800f2c0:	6802      	ldr	r2, [r0, #0]
 800f2c2:	9301      	str	r3, [sp, #4]
 800f2c4:	4682      	mov	sl, r0
 800f2c6:	f846 5c04 	str.w	r5, [r6, #-4]
 800f2ca:	46b9      	mov	r9, r7
 800f2cc:	463c      	mov	r4, r7
 800f2ce:	9502      	str	r5, [sp, #8]
 800f2d0:	46ab      	mov	fp, r5
 800f2d2:	7851      	ldrb	r1, [r2, #1]
 800f2d4:	1c53      	adds	r3, r2, #1
 800f2d6:	9303      	str	r3, [sp, #12]
 800f2d8:	b341      	cbz	r1, 800f32c <__hexnan+0x88>
 800f2da:	4608      	mov	r0, r1
 800f2dc:	9205      	str	r2, [sp, #20]
 800f2de:	9104      	str	r1, [sp, #16]
 800f2e0:	f7ff fd5e 	bl	800eda0 <__hexdig_fun>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d14f      	bne.n	800f388 <__hexnan+0xe4>
 800f2e8:	9904      	ldr	r1, [sp, #16]
 800f2ea:	9a05      	ldr	r2, [sp, #20]
 800f2ec:	2920      	cmp	r1, #32
 800f2ee:	d818      	bhi.n	800f322 <__hexnan+0x7e>
 800f2f0:	9b02      	ldr	r3, [sp, #8]
 800f2f2:	459b      	cmp	fp, r3
 800f2f4:	dd13      	ble.n	800f31e <__hexnan+0x7a>
 800f2f6:	454c      	cmp	r4, r9
 800f2f8:	d206      	bcs.n	800f308 <__hexnan+0x64>
 800f2fa:	2d07      	cmp	r5, #7
 800f2fc:	dc04      	bgt.n	800f308 <__hexnan+0x64>
 800f2fe:	462a      	mov	r2, r5
 800f300:	4649      	mov	r1, r9
 800f302:	4620      	mov	r0, r4
 800f304:	f7ff ffa8 	bl	800f258 <L_shift>
 800f308:	4544      	cmp	r4, r8
 800f30a:	d950      	bls.n	800f3ae <__hexnan+0x10a>
 800f30c:	2300      	movs	r3, #0
 800f30e:	f1a4 0904 	sub.w	r9, r4, #4
 800f312:	f844 3c04 	str.w	r3, [r4, #-4]
 800f316:	f8cd b008 	str.w	fp, [sp, #8]
 800f31a:	464c      	mov	r4, r9
 800f31c:	461d      	mov	r5, r3
 800f31e:	9a03      	ldr	r2, [sp, #12]
 800f320:	e7d7      	b.n	800f2d2 <__hexnan+0x2e>
 800f322:	2929      	cmp	r1, #41	; 0x29
 800f324:	d156      	bne.n	800f3d4 <__hexnan+0x130>
 800f326:	3202      	adds	r2, #2
 800f328:	f8ca 2000 	str.w	r2, [sl]
 800f32c:	f1bb 0f00 	cmp.w	fp, #0
 800f330:	d050      	beq.n	800f3d4 <__hexnan+0x130>
 800f332:	454c      	cmp	r4, r9
 800f334:	d206      	bcs.n	800f344 <__hexnan+0xa0>
 800f336:	2d07      	cmp	r5, #7
 800f338:	dc04      	bgt.n	800f344 <__hexnan+0xa0>
 800f33a:	462a      	mov	r2, r5
 800f33c:	4649      	mov	r1, r9
 800f33e:	4620      	mov	r0, r4
 800f340:	f7ff ff8a 	bl	800f258 <L_shift>
 800f344:	4544      	cmp	r4, r8
 800f346:	d934      	bls.n	800f3b2 <__hexnan+0x10e>
 800f348:	f1a8 0204 	sub.w	r2, r8, #4
 800f34c:	4623      	mov	r3, r4
 800f34e:	f853 1b04 	ldr.w	r1, [r3], #4
 800f352:	f842 1f04 	str.w	r1, [r2, #4]!
 800f356:	429f      	cmp	r7, r3
 800f358:	d2f9      	bcs.n	800f34e <__hexnan+0xaa>
 800f35a:	1b3b      	subs	r3, r7, r4
 800f35c:	f023 0303 	bic.w	r3, r3, #3
 800f360:	3304      	adds	r3, #4
 800f362:	3401      	adds	r4, #1
 800f364:	3e03      	subs	r6, #3
 800f366:	42b4      	cmp	r4, r6
 800f368:	bf88      	it	hi
 800f36a:	2304      	movhi	r3, #4
 800f36c:	4443      	add	r3, r8
 800f36e:	2200      	movs	r2, #0
 800f370:	f843 2b04 	str.w	r2, [r3], #4
 800f374:	429f      	cmp	r7, r3
 800f376:	d2fb      	bcs.n	800f370 <__hexnan+0xcc>
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	b91b      	cbnz	r3, 800f384 <__hexnan+0xe0>
 800f37c:	4547      	cmp	r7, r8
 800f37e:	d127      	bne.n	800f3d0 <__hexnan+0x12c>
 800f380:	2301      	movs	r3, #1
 800f382:	603b      	str	r3, [r7, #0]
 800f384:	2005      	movs	r0, #5
 800f386:	e026      	b.n	800f3d6 <__hexnan+0x132>
 800f388:	3501      	adds	r5, #1
 800f38a:	2d08      	cmp	r5, #8
 800f38c:	f10b 0b01 	add.w	fp, fp, #1
 800f390:	dd06      	ble.n	800f3a0 <__hexnan+0xfc>
 800f392:	4544      	cmp	r4, r8
 800f394:	d9c3      	bls.n	800f31e <__hexnan+0x7a>
 800f396:	2300      	movs	r3, #0
 800f398:	f844 3c04 	str.w	r3, [r4, #-4]
 800f39c:	2501      	movs	r5, #1
 800f39e:	3c04      	subs	r4, #4
 800f3a0:	6822      	ldr	r2, [r4, #0]
 800f3a2:	f000 000f 	and.w	r0, r0, #15
 800f3a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f3aa:	6022      	str	r2, [r4, #0]
 800f3ac:	e7b7      	b.n	800f31e <__hexnan+0x7a>
 800f3ae:	2508      	movs	r5, #8
 800f3b0:	e7b5      	b.n	800f31e <__hexnan+0x7a>
 800f3b2:	9b01      	ldr	r3, [sp, #4]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d0df      	beq.n	800f378 <__hexnan+0xd4>
 800f3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800f3bc:	f1c3 0320 	rsb	r3, r3, #32
 800f3c0:	fa22 f303 	lsr.w	r3, r2, r3
 800f3c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f3c8:	401a      	ands	r2, r3
 800f3ca:	f846 2c04 	str.w	r2, [r6, #-4]
 800f3ce:	e7d3      	b.n	800f378 <__hexnan+0xd4>
 800f3d0:	3f04      	subs	r7, #4
 800f3d2:	e7d1      	b.n	800f378 <__hexnan+0xd4>
 800f3d4:	2004      	movs	r0, #4
 800f3d6:	b007      	add	sp, #28
 800f3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f3dc <_localeconv_r>:
 800f3dc:	4800      	ldr	r0, [pc, #0]	; (800f3e0 <_localeconv_r+0x4>)
 800f3de:	4770      	bx	lr
 800f3e0:	20000198 	.word	0x20000198

0800f3e4 <_lseek_r>:
 800f3e4:	b538      	push	{r3, r4, r5, lr}
 800f3e6:	4d07      	ldr	r5, [pc, #28]	; (800f404 <_lseek_r+0x20>)
 800f3e8:	4604      	mov	r4, r0
 800f3ea:	4608      	mov	r0, r1
 800f3ec:	4611      	mov	r1, r2
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	602a      	str	r2, [r5, #0]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	f7f6 fd0e 	bl	8005e14 <_lseek>
 800f3f8:	1c43      	adds	r3, r0, #1
 800f3fa:	d102      	bne.n	800f402 <_lseek_r+0x1e>
 800f3fc:	682b      	ldr	r3, [r5, #0]
 800f3fe:	b103      	cbz	r3, 800f402 <_lseek_r+0x1e>
 800f400:	6023      	str	r3, [r4, #0]
 800f402:	bd38      	pop	{r3, r4, r5, pc}
 800f404:	2001c4f8 	.word	0x2001c4f8

0800f408 <malloc>:
 800f408:	4b02      	ldr	r3, [pc, #8]	; (800f414 <malloc+0xc>)
 800f40a:	4601      	mov	r1, r0
 800f40c:	6818      	ldr	r0, [r3, #0]
 800f40e:	f000 bd59 	b.w	800fec4 <_malloc_r>
 800f412:	bf00      	nop
 800f414:	20000040 	.word	0x20000040

0800f418 <__ascii_mbtowc>:
 800f418:	b082      	sub	sp, #8
 800f41a:	b901      	cbnz	r1, 800f41e <__ascii_mbtowc+0x6>
 800f41c:	a901      	add	r1, sp, #4
 800f41e:	b142      	cbz	r2, 800f432 <__ascii_mbtowc+0x1a>
 800f420:	b14b      	cbz	r3, 800f436 <__ascii_mbtowc+0x1e>
 800f422:	7813      	ldrb	r3, [r2, #0]
 800f424:	600b      	str	r3, [r1, #0]
 800f426:	7812      	ldrb	r2, [r2, #0]
 800f428:	1e10      	subs	r0, r2, #0
 800f42a:	bf18      	it	ne
 800f42c:	2001      	movne	r0, #1
 800f42e:	b002      	add	sp, #8
 800f430:	4770      	bx	lr
 800f432:	4610      	mov	r0, r2
 800f434:	e7fb      	b.n	800f42e <__ascii_mbtowc+0x16>
 800f436:	f06f 0001 	mvn.w	r0, #1
 800f43a:	e7f8      	b.n	800f42e <__ascii_mbtowc+0x16>

0800f43c <_Balloc>:
 800f43c:	b570      	push	{r4, r5, r6, lr}
 800f43e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f440:	4604      	mov	r4, r0
 800f442:	460d      	mov	r5, r1
 800f444:	b976      	cbnz	r6, 800f464 <_Balloc+0x28>
 800f446:	2010      	movs	r0, #16
 800f448:	f7ff ffde 	bl	800f408 <malloc>
 800f44c:	4602      	mov	r2, r0
 800f44e:	6260      	str	r0, [r4, #36]	; 0x24
 800f450:	b920      	cbnz	r0, 800f45c <_Balloc+0x20>
 800f452:	4b18      	ldr	r3, [pc, #96]	; (800f4b4 <_Balloc+0x78>)
 800f454:	4818      	ldr	r0, [pc, #96]	; (800f4b8 <_Balloc+0x7c>)
 800f456:	2166      	movs	r1, #102	; 0x66
 800f458:	f001 fb5a 	bl	8010b10 <__assert_func>
 800f45c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f460:	6006      	str	r6, [r0, #0]
 800f462:	60c6      	str	r6, [r0, #12]
 800f464:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f466:	68f3      	ldr	r3, [r6, #12]
 800f468:	b183      	cbz	r3, 800f48c <_Balloc+0x50>
 800f46a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f472:	b9b8      	cbnz	r0, 800f4a4 <_Balloc+0x68>
 800f474:	2101      	movs	r1, #1
 800f476:	fa01 f605 	lsl.w	r6, r1, r5
 800f47a:	1d72      	adds	r2, r6, #5
 800f47c:	0092      	lsls	r2, r2, #2
 800f47e:	4620      	mov	r0, r4
 800f480:	f000 fc9d 	bl	800fdbe <_calloc_r>
 800f484:	b160      	cbz	r0, 800f4a0 <_Balloc+0x64>
 800f486:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f48a:	e00e      	b.n	800f4aa <_Balloc+0x6e>
 800f48c:	2221      	movs	r2, #33	; 0x21
 800f48e:	2104      	movs	r1, #4
 800f490:	4620      	mov	r0, r4
 800f492:	f000 fc94 	bl	800fdbe <_calloc_r>
 800f496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f498:	60f0      	str	r0, [r6, #12]
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1e4      	bne.n	800f46a <_Balloc+0x2e>
 800f4a0:	2000      	movs	r0, #0
 800f4a2:	bd70      	pop	{r4, r5, r6, pc}
 800f4a4:	6802      	ldr	r2, [r0, #0]
 800f4a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f4b0:	e7f7      	b.n	800f4a2 <_Balloc+0x66>
 800f4b2:	bf00      	nop
 800f4b4:	080143d6 	.word	0x080143d6
 800f4b8:	080144d4 	.word	0x080144d4

0800f4bc <_Bfree>:
 800f4bc:	b570      	push	{r4, r5, r6, lr}
 800f4be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f4c0:	4605      	mov	r5, r0
 800f4c2:	460c      	mov	r4, r1
 800f4c4:	b976      	cbnz	r6, 800f4e4 <_Bfree+0x28>
 800f4c6:	2010      	movs	r0, #16
 800f4c8:	f7ff ff9e 	bl	800f408 <malloc>
 800f4cc:	4602      	mov	r2, r0
 800f4ce:	6268      	str	r0, [r5, #36]	; 0x24
 800f4d0:	b920      	cbnz	r0, 800f4dc <_Bfree+0x20>
 800f4d2:	4b09      	ldr	r3, [pc, #36]	; (800f4f8 <_Bfree+0x3c>)
 800f4d4:	4809      	ldr	r0, [pc, #36]	; (800f4fc <_Bfree+0x40>)
 800f4d6:	218a      	movs	r1, #138	; 0x8a
 800f4d8:	f001 fb1a 	bl	8010b10 <__assert_func>
 800f4dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4e0:	6006      	str	r6, [r0, #0]
 800f4e2:	60c6      	str	r6, [r0, #12]
 800f4e4:	b13c      	cbz	r4, 800f4f6 <_Bfree+0x3a>
 800f4e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f4e8:	6862      	ldr	r2, [r4, #4]
 800f4ea:	68db      	ldr	r3, [r3, #12]
 800f4ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f4f0:	6021      	str	r1, [r4, #0]
 800f4f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f4f6:	bd70      	pop	{r4, r5, r6, pc}
 800f4f8:	080143d6 	.word	0x080143d6
 800f4fc:	080144d4 	.word	0x080144d4

0800f500 <__multadd>:
 800f500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f504:	690d      	ldr	r5, [r1, #16]
 800f506:	4607      	mov	r7, r0
 800f508:	460c      	mov	r4, r1
 800f50a:	461e      	mov	r6, r3
 800f50c:	f101 0c14 	add.w	ip, r1, #20
 800f510:	2000      	movs	r0, #0
 800f512:	f8dc 3000 	ldr.w	r3, [ip]
 800f516:	b299      	uxth	r1, r3
 800f518:	fb02 6101 	mla	r1, r2, r1, r6
 800f51c:	0c1e      	lsrs	r6, r3, #16
 800f51e:	0c0b      	lsrs	r3, r1, #16
 800f520:	fb02 3306 	mla	r3, r2, r6, r3
 800f524:	b289      	uxth	r1, r1
 800f526:	3001      	adds	r0, #1
 800f528:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f52c:	4285      	cmp	r5, r0
 800f52e:	f84c 1b04 	str.w	r1, [ip], #4
 800f532:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f536:	dcec      	bgt.n	800f512 <__multadd+0x12>
 800f538:	b30e      	cbz	r6, 800f57e <__multadd+0x7e>
 800f53a:	68a3      	ldr	r3, [r4, #8]
 800f53c:	42ab      	cmp	r3, r5
 800f53e:	dc19      	bgt.n	800f574 <__multadd+0x74>
 800f540:	6861      	ldr	r1, [r4, #4]
 800f542:	4638      	mov	r0, r7
 800f544:	3101      	adds	r1, #1
 800f546:	f7ff ff79 	bl	800f43c <_Balloc>
 800f54a:	4680      	mov	r8, r0
 800f54c:	b928      	cbnz	r0, 800f55a <__multadd+0x5a>
 800f54e:	4602      	mov	r2, r0
 800f550:	4b0c      	ldr	r3, [pc, #48]	; (800f584 <__multadd+0x84>)
 800f552:	480d      	ldr	r0, [pc, #52]	; (800f588 <__multadd+0x88>)
 800f554:	21b5      	movs	r1, #181	; 0xb5
 800f556:	f001 fadb 	bl	8010b10 <__assert_func>
 800f55a:	6922      	ldr	r2, [r4, #16]
 800f55c:	3202      	adds	r2, #2
 800f55e:	f104 010c 	add.w	r1, r4, #12
 800f562:	0092      	lsls	r2, r2, #2
 800f564:	300c      	adds	r0, #12
 800f566:	f7fc ff43 	bl	800c3f0 <memcpy>
 800f56a:	4621      	mov	r1, r4
 800f56c:	4638      	mov	r0, r7
 800f56e:	f7ff ffa5 	bl	800f4bc <_Bfree>
 800f572:	4644      	mov	r4, r8
 800f574:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f578:	3501      	adds	r5, #1
 800f57a:	615e      	str	r6, [r3, #20]
 800f57c:	6125      	str	r5, [r4, #16]
 800f57e:	4620      	mov	r0, r4
 800f580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f584:	08014448 	.word	0x08014448
 800f588:	080144d4 	.word	0x080144d4

0800f58c <__s2b>:
 800f58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f590:	460c      	mov	r4, r1
 800f592:	4615      	mov	r5, r2
 800f594:	461f      	mov	r7, r3
 800f596:	2209      	movs	r2, #9
 800f598:	3308      	adds	r3, #8
 800f59a:	4606      	mov	r6, r0
 800f59c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f5a0:	2100      	movs	r1, #0
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	db09      	blt.n	800f5bc <__s2b+0x30>
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	f7ff ff47 	bl	800f43c <_Balloc>
 800f5ae:	b940      	cbnz	r0, 800f5c2 <__s2b+0x36>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	4b19      	ldr	r3, [pc, #100]	; (800f618 <__s2b+0x8c>)
 800f5b4:	4819      	ldr	r0, [pc, #100]	; (800f61c <__s2b+0x90>)
 800f5b6:	21ce      	movs	r1, #206	; 0xce
 800f5b8:	f001 faaa 	bl	8010b10 <__assert_func>
 800f5bc:	0052      	lsls	r2, r2, #1
 800f5be:	3101      	adds	r1, #1
 800f5c0:	e7f0      	b.n	800f5a4 <__s2b+0x18>
 800f5c2:	9b08      	ldr	r3, [sp, #32]
 800f5c4:	6143      	str	r3, [r0, #20]
 800f5c6:	2d09      	cmp	r5, #9
 800f5c8:	f04f 0301 	mov.w	r3, #1
 800f5cc:	6103      	str	r3, [r0, #16]
 800f5ce:	dd16      	ble.n	800f5fe <__s2b+0x72>
 800f5d0:	f104 0909 	add.w	r9, r4, #9
 800f5d4:	46c8      	mov	r8, r9
 800f5d6:	442c      	add	r4, r5
 800f5d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f5dc:	4601      	mov	r1, r0
 800f5de:	3b30      	subs	r3, #48	; 0x30
 800f5e0:	220a      	movs	r2, #10
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	f7ff ff8c 	bl	800f500 <__multadd>
 800f5e8:	45a0      	cmp	r8, r4
 800f5ea:	d1f5      	bne.n	800f5d8 <__s2b+0x4c>
 800f5ec:	f1a5 0408 	sub.w	r4, r5, #8
 800f5f0:	444c      	add	r4, r9
 800f5f2:	1b2d      	subs	r5, r5, r4
 800f5f4:	1963      	adds	r3, r4, r5
 800f5f6:	42bb      	cmp	r3, r7
 800f5f8:	db04      	blt.n	800f604 <__s2b+0x78>
 800f5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5fe:	340a      	adds	r4, #10
 800f600:	2509      	movs	r5, #9
 800f602:	e7f6      	b.n	800f5f2 <__s2b+0x66>
 800f604:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f608:	4601      	mov	r1, r0
 800f60a:	3b30      	subs	r3, #48	; 0x30
 800f60c:	220a      	movs	r2, #10
 800f60e:	4630      	mov	r0, r6
 800f610:	f7ff ff76 	bl	800f500 <__multadd>
 800f614:	e7ee      	b.n	800f5f4 <__s2b+0x68>
 800f616:	bf00      	nop
 800f618:	08014448 	.word	0x08014448
 800f61c:	080144d4 	.word	0x080144d4

0800f620 <__hi0bits>:
 800f620:	0c03      	lsrs	r3, r0, #16
 800f622:	041b      	lsls	r3, r3, #16
 800f624:	b9d3      	cbnz	r3, 800f65c <__hi0bits+0x3c>
 800f626:	0400      	lsls	r0, r0, #16
 800f628:	2310      	movs	r3, #16
 800f62a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f62e:	bf04      	itt	eq
 800f630:	0200      	lsleq	r0, r0, #8
 800f632:	3308      	addeq	r3, #8
 800f634:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f638:	bf04      	itt	eq
 800f63a:	0100      	lsleq	r0, r0, #4
 800f63c:	3304      	addeq	r3, #4
 800f63e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f642:	bf04      	itt	eq
 800f644:	0080      	lsleq	r0, r0, #2
 800f646:	3302      	addeq	r3, #2
 800f648:	2800      	cmp	r0, #0
 800f64a:	db05      	blt.n	800f658 <__hi0bits+0x38>
 800f64c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f650:	f103 0301 	add.w	r3, r3, #1
 800f654:	bf08      	it	eq
 800f656:	2320      	moveq	r3, #32
 800f658:	4618      	mov	r0, r3
 800f65a:	4770      	bx	lr
 800f65c:	2300      	movs	r3, #0
 800f65e:	e7e4      	b.n	800f62a <__hi0bits+0xa>

0800f660 <__lo0bits>:
 800f660:	6803      	ldr	r3, [r0, #0]
 800f662:	f013 0207 	ands.w	r2, r3, #7
 800f666:	4601      	mov	r1, r0
 800f668:	d00b      	beq.n	800f682 <__lo0bits+0x22>
 800f66a:	07da      	lsls	r2, r3, #31
 800f66c:	d423      	bmi.n	800f6b6 <__lo0bits+0x56>
 800f66e:	0798      	lsls	r0, r3, #30
 800f670:	bf49      	itett	mi
 800f672:	085b      	lsrmi	r3, r3, #1
 800f674:	089b      	lsrpl	r3, r3, #2
 800f676:	2001      	movmi	r0, #1
 800f678:	600b      	strmi	r3, [r1, #0]
 800f67a:	bf5c      	itt	pl
 800f67c:	600b      	strpl	r3, [r1, #0]
 800f67e:	2002      	movpl	r0, #2
 800f680:	4770      	bx	lr
 800f682:	b298      	uxth	r0, r3
 800f684:	b9a8      	cbnz	r0, 800f6b2 <__lo0bits+0x52>
 800f686:	0c1b      	lsrs	r3, r3, #16
 800f688:	2010      	movs	r0, #16
 800f68a:	b2da      	uxtb	r2, r3
 800f68c:	b90a      	cbnz	r2, 800f692 <__lo0bits+0x32>
 800f68e:	3008      	adds	r0, #8
 800f690:	0a1b      	lsrs	r3, r3, #8
 800f692:	071a      	lsls	r2, r3, #28
 800f694:	bf04      	itt	eq
 800f696:	091b      	lsreq	r3, r3, #4
 800f698:	3004      	addeq	r0, #4
 800f69a:	079a      	lsls	r2, r3, #30
 800f69c:	bf04      	itt	eq
 800f69e:	089b      	lsreq	r3, r3, #2
 800f6a0:	3002      	addeq	r0, #2
 800f6a2:	07da      	lsls	r2, r3, #31
 800f6a4:	d403      	bmi.n	800f6ae <__lo0bits+0x4e>
 800f6a6:	085b      	lsrs	r3, r3, #1
 800f6a8:	f100 0001 	add.w	r0, r0, #1
 800f6ac:	d005      	beq.n	800f6ba <__lo0bits+0x5a>
 800f6ae:	600b      	str	r3, [r1, #0]
 800f6b0:	4770      	bx	lr
 800f6b2:	4610      	mov	r0, r2
 800f6b4:	e7e9      	b.n	800f68a <__lo0bits+0x2a>
 800f6b6:	2000      	movs	r0, #0
 800f6b8:	4770      	bx	lr
 800f6ba:	2020      	movs	r0, #32
 800f6bc:	4770      	bx	lr
	...

0800f6c0 <__i2b>:
 800f6c0:	b510      	push	{r4, lr}
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	2101      	movs	r1, #1
 800f6c6:	f7ff feb9 	bl	800f43c <_Balloc>
 800f6ca:	4602      	mov	r2, r0
 800f6cc:	b928      	cbnz	r0, 800f6da <__i2b+0x1a>
 800f6ce:	4b05      	ldr	r3, [pc, #20]	; (800f6e4 <__i2b+0x24>)
 800f6d0:	4805      	ldr	r0, [pc, #20]	; (800f6e8 <__i2b+0x28>)
 800f6d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f6d6:	f001 fa1b 	bl	8010b10 <__assert_func>
 800f6da:	2301      	movs	r3, #1
 800f6dc:	6144      	str	r4, [r0, #20]
 800f6de:	6103      	str	r3, [r0, #16]
 800f6e0:	bd10      	pop	{r4, pc}
 800f6e2:	bf00      	nop
 800f6e4:	08014448 	.word	0x08014448
 800f6e8:	080144d4 	.word	0x080144d4

0800f6ec <__multiply>:
 800f6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f0:	4691      	mov	r9, r2
 800f6f2:	690a      	ldr	r2, [r1, #16]
 800f6f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	bfb8      	it	lt
 800f6fc:	460b      	movlt	r3, r1
 800f6fe:	460c      	mov	r4, r1
 800f700:	bfbc      	itt	lt
 800f702:	464c      	movlt	r4, r9
 800f704:	4699      	movlt	r9, r3
 800f706:	6927      	ldr	r7, [r4, #16]
 800f708:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f70c:	68a3      	ldr	r3, [r4, #8]
 800f70e:	6861      	ldr	r1, [r4, #4]
 800f710:	eb07 060a 	add.w	r6, r7, sl
 800f714:	42b3      	cmp	r3, r6
 800f716:	b085      	sub	sp, #20
 800f718:	bfb8      	it	lt
 800f71a:	3101      	addlt	r1, #1
 800f71c:	f7ff fe8e 	bl	800f43c <_Balloc>
 800f720:	b930      	cbnz	r0, 800f730 <__multiply+0x44>
 800f722:	4602      	mov	r2, r0
 800f724:	4b44      	ldr	r3, [pc, #272]	; (800f838 <__multiply+0x14c>)
 800f726:	4845      	ldr	r0, [pc, #276]	; (800f83c <__multiply+0x150>)
 800f728:	f240 115d 	movw	r1, #349	; 0x15d
 800f72c:	f001 f9f0 	bl	8010b10 <__assert_func>
 800f730:	f100 0514 	add.w	r5, r0, #20
 800f734:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f738:	462b      	mov	r3, r5
 800f73a:	2200      	movs	r2, #0
 800f73c:	4543      	cmp	r3, r8
 800f73e:	d321      	bcc.n	800f784 <__multiply+0x98>
 800f740:	f104 0314 	add.w	r3, r4, #20
 800f744:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f748:	f109 0314 	add.w	r3, r9, #20
 800f74c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f750:	9202      	str	r2, [sp, #8]
 800f752:	1b3a      	subs	r2, r7, r4
 800f754:	3a15      	subs	r2, #21
 800f756:	f022 0203 	bic.w	r2, r2, #3
 800f75a:	3204      	adds	r2, #4
 800f75c:	f104 0115 	add.w	r1, r4, #21
 800f760:	428f      	cmp	r7, r1
 800f762:	bf38      	it	cc
 800f764:	2204      	movcc	r2, #4
 800f766:	9201      	str	r2, [sp, #4]
 800f768:	9a02      	ldr	r2, [sp, #8]
 800f76a:	9303      	str	r3, [sp, #12]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d80c      	bhi.n	800f78a <__multiply+0x9e>
 800f770:	2e00      	cmp	r6, #0
 800f772:	dd03      	ble.n	800f77c <__multiply+0x90>
 800f774:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d05a      	beq.n	800f832 <__multiply+0x146>
 800f77c:	6106      	str	r6, [r0, #16]
 800f77e:	b005      	add	sp, #20
 800f780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f784:	f843 2b04 	str.w	r2, [r3], #4
 800f788:	e7d8      	b.n	800f73c <__multiply+0x50>
 800f78a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f78e:	f1ba 0f00 	cmp.w	sl, #0
 800f792:	d024      	beq.n	800f7de <__multiply+0xf2>
 800f794:	f104 0e14 	add.w	lr, r4, #20
 800f798:	46a9      	mov	r9, r5
 800f79a:	f04f 0c00 	mov.w	ip, #0
 800f79e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f7a2:	f8d9 1000 	ldr.w	r1, [r9]
 800f7a6:	fa1f fb82 	uxth.w	fp, r2
 800f7aa:	b289      	uxth	r1, r1
 800f7ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800f7b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f7b4:	f8d9 2000 	ldr.w	r2, [r9]
 800f7b8:	4461      	add	r1, ip
 800f7ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f7be:	fb0a c20b 	mla	r2, sl, fp, ip
 800f7c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f7c6:	b289      	uxth	r1, r1
 800f7c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f7cc:	4577      	cmp	r7, lr
 800f7ce:	f849 1b04 	str.w	r1, [r9], #4
 800f7d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f7d6:	d8e2      	bhi.n	800f79e <__multiply+0xb2>
 800f7d8:	9a01      	ldr	r2, [sp, #4]
 800f7da:	f845 c002 	str.w	ip, [r5, r2]
 800f7de:	9a03      	ldr	r2, [sp, #12]
 800f7e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f7e4:	3304      	adds	r3, #4
 800f7e6:	f1b9 0f00 	cmp.w	r9, #0
 800f7ea:	d020      	beq.n	800f82e <__multiply+0x142>
 800f7ec:	6829      	ldr	r1, [r5, #0]
 800f7ee:	f104 0c14 	add.w	ip, r4, #20
 800f7f2:	46ae      	mov	lr, r5
 800f7f4:	f04f 0a00 	mov.w	sl, #0
 800f7f8:	f8bc b000 	ldrh.w	fp, [ip]
 800f7fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f800:	fb09 220b 	mla	r2, r9, fp, r2
 800f804:	4492      	add	sl, r2
 800f806:	b289      	uxth	r1, r1
 800f808:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f80c:	f84e 1b04 	str.w	r1, [lr], #4
 800f810:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f814:	f8be 1000 	ldrh.w	r1, [lr]
 800f818:	0c12      	lsrs	r2, r2, #16
 800f81a:	fb09 1102 	mla	r1, r9, r2, r1
 800f81e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f822:	4567      	cmp	r7, ip
 800f824:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f828:	d8e6      	bhi.n	800f7f8 <__multiply+0x10c>
 800f82a:	9a01      	ldr	r2, [sp, #4]
 800f82c:	50a9      	str	r1, [r5, r2]
 800f82e:	3504      	adds	r5, #4
 800f830:	e79a      	b.n	800f768 <__multiply+0x7c>
 800f832:	3e01      	subs	r6, #1
 800f834:	e79c      	b.n	800f770 <__multiply+0x84>
 800f836:	bf00      	nop
 800f838:	08014448 	.word	0x08014448
 800f83c:	080144d4 	.word	0x080144d4

0800f840 <__pow5mult>:
 800f840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f844:	4615      	mov	r5, r2
 800f846:	f012 0203 	ands.w	r2, r2, #3
 800f84a:	4606      	mov	r6, r0
 800f84c:	460f      	mov	r7, r1
 800f84e:	d007      	beq.n	800f860 <__pow5mult+0x20>
 800f850:	4c25      	ldr	r4, [pc, #148]	; (800f8e8 <__pow5mult+0xa8>)
 800f852:	3a01      	subs	r2, #1
 800f854:	2300      	movs	r3, #0
 800f856:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f85a:	f7ff fe51 	bl	800f500 <__multadd>
 800f85e:	4607      	mov	r7, r0
 800f860:	10ad      	asrs	r5, r5, #2
 800f862:	d03d      	beq.n	800f8e0 <__pow5mult+0xa0>
 800f864:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f866:	b97c      	cbnz	r4, 800f888 <__pow5mult+0x48>
 800f868:	2010      	movs	r0, #16
 800f86a:	f7ff fdcd 	bl	800f408 <malloc>
 800f86e:	4602      	mov	r2, r0
 800f870:	6270      	str	r0, [r6, #36]	; 0x24
 800f872:	b928      	cbnz	r0, 800f880 <__pow5mult+0x40>
 800f874:	4b1d      	ldr	r3, [pc, #116]	; (800f8ec <__pow5mult+0xac>)
 800f876:	481e      	ldr	r0, [pc, #120]	; (800f8f0 <__pow5mult+0xb0>)
 800f878:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f87c:	f001 f948 	bl	8010b10 <__assert_func>
 800f880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f884:	6004      	str	r4, [r0, #0]
 800f886:	60c4      	str	r4, [r0, #12]
 800f888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f88c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f890:	b94c      	cbnz	r4, 800f8a6 <__pow5mult+0x66>
 800f892:	f240 2171 	movw	r1, #625	; 0x271
 800f896:	4630      	mov	r0, r6
 800f898:	f7ff ff12 	bl	800f6c0 <__i2b>
 800f89c:	2300      	movs	r3, #0
 800f89e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f8a2:	4604      	mov	r4, r0
 800f8a4:	6003      	str	r3, [r0, #0]
 800f8a6:	f04f 0900 	mov.w	r9, #0
 800f8aa:	07eb      	lsls	r3, r5, #31
 800f8ac:	d50a      	bpl.n	800f8c4 <__pow5mult+0x84>
 800f8ae:	4639      	mov	r1, r7
 800f8b0:	4622      	mov	r2, r4
 800f8b2:	4630      	mov	r0, r6
 800f8b4:	f7ff ff1a 	bl	800f6ec <__multiply>
 800f8b8:	4639      	mov	r1, r7
 800f8ba:	4680      	mov	r8, r0
 800f8bc:	4630      	mov	r0, r6
 800f8be:	f7ff fdfd 	bl	800f4bc <_Bfree>
 800f8c2:	4647      	mov	r7, r8
 800f8c4:	106d      	asrs	r5, r5, #1
 800f8c6:	d00b      	beq.n	800f8e0 <__pow5mult+0xa0>
 800f8c8:	6820      	ldr	r0, [r4, #0]
 800f8ca:	b938      	cbnz	r0, 800f8dc <__pow5mult+0x9c>
 800f8cc:	4622      	mov	r2, r4
 800f8ce:	4621      	mov	r1, r4
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	f7ff ff0b 	bl	800f6ec <__multiply>
 800f8d6:	6020      	str	r0, [r4, #0]
 800f8d8:	f8c0 9000 	str.w	r9, [r0]
 800f8dc:	4604      	mov	r4, r0
 800f8de:	e7e4      	b.n	800f8aa <__pow5mult+0x6a>
 800f8e0:	4638      	mov	r0, r7
 800f8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8e6:	bf00      	nop
 800f8e8:	08014620 	.word	0x08014620
 800f8ec:	080143d6 	.word	0x080143d6
 800f8f0:	080144d4 	.word	0x080144d4

0800f8f4 <__lshift>:
 800f8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8f8:	460c      	mov	r4, r1
 800f8fa:	6849      	ldr	r1, [r1, #4]
 800f8fc:	6923      	ldr	r3, [r4, #16]
 800f8fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f902:	68a3      	ldr	r3, [r4, #8]
 800f904:	4607      	mov	r7, r0
 800f906:	4691      	mov	r9, r2
 800f908:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f90c:	f108 0601 	add.w	r6, r8, #1
 800f910:	42b3      	cmp	r3, r6
 800f912:	db0b      	blt.n	800f92c <__lshift+0x38>
 800f914:	4638      	mov	r0, r7
 800f916:	f7ff fd91 	bl	800f43c <_Balloc>
 800f91a:	4605      	mov	r5, r0
 800f91c:	b948      	cbnz	r0, 800f932 <__lshift+0x3e>
 800f91e:	4602      	mov	r2, r0
 800f920:	4b2a      	ldr	r3, [pc, #168]	; (800f9cc <__lshift+0xd8>)
 800f922:	482b      	ldr	r0, [pc, #172]	; (800f9d0 <__lshift+0xdc>)
 800f924:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f928:	f001 f8f2 	bl	8010b10 <__assert_func>
 800f92c:	3101      	adds	r1, #1
 800f92e:	005b      	lsls	r3, r3, #1
 800f930:	e7ee      	b.n	800f910 <__lshift+0x1c>
 800f932:	2300      	movs	r3, #0
 800f934:	f100 0114 	add.w	r1, r0, #20
 800f938:	f100 0210 	add.w	r2, r0, #16
 800f93c:	4618      	mov	r0, r3
 800f93e:	4553      	cmp	r3, sl
 800f940:	db37      	blt.n	800f9b2 <__lshift+0xbe>
 800f942:	6920      	ldr	r0, [r4, #16]
 800f944:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f948:	f104 0314 	add.w	r3, r4, #20
 800f94c:	f019 091f 	ands.w	r9, r9, #31
 800f950:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f954:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f958:	d02f      	beq.n	800f9ba <__lshift+0xc6>
 800f95a:	f1c9 0e20 	rsb	lr, r9, #32
 800f95e:	468a      	mov	sl, r1
 800f960:	f04f 0c00 	mov.w	ip, #0
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	fa02 f209 	lsl.w	r2, r2, r9
 800f96a:	ea42 020c 	orr.w	r2, r2, ip
 800f96e:	f84a 2b04 	str.w	r2, [sl], #4
 800f972:	f853 2b04 	ldr.w	r2, [r3], #4
 800f976:	4298      	cmp	r0, r3
 800f978:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f97c:	d8f2      	bhi.n	800f964 <__lshift+0x70>
 800f97e:	1b03      	subs	r3, r0, r4
 800f980:	3b15      	subs	r3, #21
 800f982:	f023 0303 	bic.w	r3, r3, #3
 800f986:	3304      	adds	r3, #4
 800f988:	f104 0215 	add.w	r2, r4, #21
 800f98c:	4290      	cmp	r0, r2
 800f98e:	bf38      	it	cc
 800f990:	2304      	movcc	r3, #4
 800f992:	f841 c003 	str.w	ip, [r1, r3]
 800f996:	f1bc 0f00 	cmp.w	ip, #0
 800f99a:	d001      	beq.n	800f9a0 <__lshift+0xac>
 800f99c:	f108 0602 	add.w	r6, r8, #2
 800f9a0:	3e01      	subs	r6, #1
 800f9a2:	4638      	mov	r0, r7
 800f9a4:	612e      	str	r6, [r5, #16]
 800f9a6:	4621      	mov	r1, r4
 800f9a8:	f7ff fd88 	bl	800f4bc <_Bfree>
 800f9ac:	4628      	mov	r0, r5
 800f9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	e7c1      	b.n	800f93e <__lshift+0x4a>
 800f9ba:	3904      	subs	r1, #4
 800f9bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f9c4:	4298      	cmp	r0, r3
 800f9c6:	d8f9      	bhi.n	800f9bc <__lshift+0xc8>
 800f9c8:	e7ea      	b.n	800f9a0 <__lshift+0xac>
 800f9ca:	bf00      	nop
 800f9cc:	08014448 	.word	0x08014448
 800f9d0:	080144d4 	.word	0x080144d4

0800f9d4 <__mcmp>:
 800f9d4:	b530      	push	{r4, r5, lr}
 800f9d6:	6902      	ldr	r2, [r0, #16]
 800f9d8:	690c      	ldr	r4, [r1, #16]
 800f9da:	1b12      	subs	r2, r2, r4
 800f9dc:	d10e      	bne.n	800f9fc <__mcmp+0x28>
 800f9de:	f100 0314 	add.w	r3, r0, #20
 800f9e2:	3114      	adds	r1, #20
 800f9e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f9e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f9ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f9f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f9f4:	42a5      	cmp	r5, r4
 800f9f6:	d003      	beq.n	800fa00 <__mcmp+0x2c>
 800f9f8:	d305      	bcc.n	800fa06 <__mcmp+0x32>
 800f9fa:	2201      	movs	r2, #1
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	bd30      	pop	{r4, r5, pc}
 800fa00:	4283      	cmp	r3, r0
 800fa02:	d3f3      	bcc.n	800f9ec <__mcmp+0x18>
 800fa04:	e7fa      	b.n	800f9fc <__mcmp+0x28>
 800fa06:	f04f 32ff 	mov.w	r2, #4294967295
 800fa0a:	e7f7      	b.n	800f9fc <__mcmp+0x28>

0800fa0c <__mdiff>:
 800fa0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa10:	460c      	mov	r4, r1
 800fa12:	4606      	mov	r6, r0
 800fa14:	4611      	mov	r1, r2
 800fa16:	4620      	mov	r0, r4
 800fa18:	4690      	mov	r8, r2
 800fa1a:	f7ff ffdb 	bl	800f9d4 <__mcmp>
 800fa1e:	1e05      	subs	r5, r0, #0
 800fa20:	d110      	bne.n	800fa44 <__mdiff+0x38>
 800fa22:	4629      	mov	r1, r5
 800fa24:	4630      	mov	r0, r6
 800fa26:	f7ff fd09 	bl	800f43c <_Balloc>
 800fa2a:	b930      	cbnz	r0, 800fa3a <__mdiff+0x2e>
 800fa2c:	4b3a      	ldr	r3, [pc, #232]	; (800fb18 <__mdiff+0x10c>)
 800fa2e:	4602      	mov	r2, r0
 800fa30:	f240 2132 	movw	r1, #562	; 0x232
 800fa34:	4839      	ldr	r0, [pc, #228]	; (800fb1c <__mdiff+0x110>)
 800fa36:	f001 f86b 	bl	8010b10 <__assert_func>
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa44:	bfa4      	itt	ge
 800fa46:	4643      	movge	r3, r8
 800fa48:	46a0      	movge	r8, r4
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fa50:	bfa6      	itte	ge
 800fa52:	461c      	movge	r4, r3
 800fa54:	2500      	movge	r5, #0
 800fa56:	2501      	movlt	r5, #1
 800fa58:	f7ff fcf0 	bl	800f43c <_Balloc>
 800fa5c:	b920      	cbnz	r0, 800fa68 <__mdiff+0x5c>
 800fa5e:	4b2e      	ldr	r3, [pc, #184]	; (800fb18 <__mdiff+0x10c>)
 800fa60:	4602      	mov	r2, r0
 800fa62:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fa66:	e7e5      	b.n	800fa34 <__mdiff+0x28>
 800fa68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fa6c:	6926      	ldr	r6, [r4, #16]
 800fa6e:	60c5      	str	r5, [r0, #12]
 800fa70:	f104 0914 	add.w	r9, r4, #20
 800fa74:	f108 0514 	add.w	r5, r8, #20
 800fa78:	f100 0e14 	add.w	lr, r0, #20
 800fa7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fa80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fa84:	f108 0210 	add.w	r2, r8, #16
 800fa88:	46f2      	mov	sl, lr
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fa94:	fa1f f883 	uxth.w	r8, r3
 800fa98:	fa11 f18b 	uxtah	r1, r1, fp
 800fa9c:	0c1b      	lsrs	r3, r3, #16
 800fa9e:	eba1 0808 	sub.w	r8, r1, r8
 800faa2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800faa6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800faaa:	fa1f f888 	uxth.w	r8, r8
 800faae:	1419      	asrs	r1, r3, #16
 800fab0:	454e      	cmp	r6, r9
 800fab2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fab6:	f84a 3b04 	str.w	r3, [sl], #4
 800faba:	d8e7      	bhi.n	800fa8c <__mdiff+0x80>
 800fabc:	1b33      	subs	r3, r6, r4
 800fabe:	3b15      	subs	r3, #21
 800fac0:	f023 0303 	bic.w	r3, r3, #3
 800fac4:	3304      	adds	r3, #4
 800fac6:	3415      	adds	r4, #21
 800fac8:	42a6      	cmp	r6, r4
 800faca:	bf38      	it	cc
 800facc:	2304      	movcc	r3, #4
 800face:	441d      	add	r5, r3
 800fad0:	4473      	add	r3, lr
 800fad2:	469e      	mov	lr, r3
 800fad4:	462e      	mov	r6, r5
 800fad6:	4566      	cmp	r6, ip
 800fad8:	d30e      	bcc.n	800faf8 <__mdiff+0xec>
 800fada:	f10c 0203 	add.w	r2, ip, #3
 800fade:	1b52      	subs	r2, r2, r5
 800fae0:	f022 0203 	bic.w	r2, r2, #3
 800fae4:	3d03      	subs	r5, #3
 800fae6:	45ac      	cmp	ip, r5
 800fae8:	bf38      	it	cc
 800faea:	2200      	movcc	r2, #0
 800faec:	441a      	add	r2, r3
 800faee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800faf2:	b17b      	cbz	r3, 800fb14 <__mdiff+0x108>
 800faf4:	6107      	str	r7, [r0, #16]
 800faf6:	e7a3      	b.n	800fa40 <__mdiff+0x34>
 800faf8:	f856 8b04 	ldr.w	r8, [r6], #4
 800fafc:	fa11 f288 	uxtah	r2, r1, r8
 800fb00:	1414      	asrs	r4, r2, #16
 800fb02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fb06:	b292      	uxth	r2, r2
 800fb08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fb0c:	f84e 2b04 	str.w	r2, [lr], #4
 800fb10:	1421      	asrs	r1, r4, #16
 800fb12:	e7e0      	b.n	800fad6 <__mdiff+0xca>
 800fb14:	3f01      	subs	r7, #1
 800fb16:	e7ea      	b.n	800faee <__mdiff+0xe2>
 800fb18:	08014448 	.word	0x08014448
 800fb1c:	080144d4 	.word	0x080144d4

0800fb20 <__ulp>:
 800fb20:	b082      	sub	sp, #8
 800fb22:	ed8d 0b00 	vstr	d0, [sp]
 800fb26:	9b01      	ldr	r3, [sp, #4]
 800fb28:	4912      	ldr	r1, [pc, #72]	; (800fb74 <__ulp+0x54>)
 800fb2a:	4019      	ands	r1, r3
 800fb2c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fb30:	2900      	cmp	r1, #0
 800fb32:	dd05      	ble.n	800fb40 <__ulp+0x20>
 800fb34:	2200      	movs	r2, #0
 800fb36:	460b      	mov	r3, r1
 800fb38:	ec43 2b10 	vmov	d0, r2, r3
 800fb3c:	b002      	add	sp, #8
 800fb3e:	4770      	bx	lr
 800fb40:	4249      	negs	r1, r1
 800fb42:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fb46:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fb4a:	f04f 0200 	mov.w	r2, #0
 800fb4e:	f04f 0300 	mov.w	r3, #0
 800fb52:	da04      	bge.n	800fb5e <__ulp+0x3e>
 800fb54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fb58:	fa41 f300 	asr.w	r3, r1, r0
 800fb5c:	e7ec      	b.n	800fb38 <__ulp+0x18>
 800fb5e:	f1a0 0114 	sub.w	r1, r0, #20
 800fb62:	291e      	cmp	r1, #30
 800fb64:	bfda      	itte	le
 800fb66:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fb6a:	fa20 f101 	lsrle.w	r1, r0, r1
 800fb6e:	2101      	movgt	r1, #1
 800fb70:	460a      	mov	r2, r1
 800fb72:	e7e1      	b.n	800fb38 <__ulp+0x18>
 800fb74:	7ff00000 	.word	0x7ff00000

0800fb78 <__b2d>:
 800fb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb7a:	6905      	ldr	r5, [r0, #16]
 800fb7c:	f100 0714 	add.w	r7, r0, #20
 800fb80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fb84:	1f2e      	subs	r6, r5, #4
 800fb86:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	f7ff fd48 	bl	800f620 <__hi0bits>
 800fb90:	f1c0 0320 	rsb	r3, r0, #32
 800fb94:	280a      	cmp	r0, #10
 800fb96:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fc14 <__b2d+0x9c>
 800fb9a:	600b      	str	r3, [r1, #0]
 800fb9c:	dc14      	bgt.n	800fbc8 <__b2d+0x50>
 800fb9e:	f1c0 0e0b 	rsb	lr, r0, #11
 800fba2:	fa24 f10e 	lsr.w	r1, r4, lr
 800fba6:	42b7      	cmp	r7, r6
 800fba8:	ea41 030c 	orr.w	r3, r1, ip
 800fbac:	bf34      	ite	cc
 800fbae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fbb2:	2100      	movcs	r1, #0
 800fbb4:	3015      	adds	r0, #21
 800fbb6:	fa04 f000 	lsl.w	r0, r4, r0
 800fbba:	fa21 f10e 	lsr.w	r1, r1, lr
 800fbbe:	ea40 0201 	orr.w	r2, r0, r1
 800fbc2:	ec43 2b10 	vmov	d0, r2, r3
 800fbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbc8:	42b7      	cmp	r7, r6
 800fbca:	bf3a      	itte	cc
 800fbcc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fbd0:	f1a5 0608 	subcc.w	r6, r5, #8
 800fbd4:	2100      	movcs	r1, #0
 800fbd6:	380b      	subs	r0, #11
 800fbd8:	d017      	beq.n	800fc0a <__b2d+0x92>
 800fbda:	f1c0 0c20 	rsb	ip, r0, #32
 800fbde:	fa04 f500 	lsl.w	r5, r4, r0
 800fbe2:	42be      	cmp	r6, r7
 800fbe4:	fa21 f40c 	lsr.w	r4, r1, ip
 800fbe8:	ea45 0504 	orr.w	r5, r5, r4
 800fbec:	bf8c      	ite	hi
 800fbee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fbf2:	2400      	movls	r4, #0
 800fbf4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fbf8:	fa01 f000 	lsl.w	r0, r1, r0
 800fbfc:	fa24 f40c 	lsr.w	r4, r4, ip
 800fc00:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fc04:	ea40 0204 	orr.w	r2, r0, r4
 800fc08:	e7db      	b.n	800fbc2 <__b2d+0x4a>
 800fc0a:	ea44 030c 	orr.w	r3, r4, ip
 800fc0e:	460a      	mov	r2, r1
 800fc10:	e7d7      	b.n	800fbc2 <__b2d+0x4a>
 800fc12:	bf00      	nop
 800fc14:	3ff00000 	.word	0x3ff00000

0800fc18 <__d2b>:
 800fc18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc1c:	4689      	mov	r9, r1
 800fc1e:	2101      	movs	r1, #1
 800fc20:	ec57 6b10 	vmov	r6, r7, d0
 800fc24:	4690      	mov	r8, r2
 800fc26:	f7ff fc09 	bl	800f43c <_Balloc>
 800fc2a:	4604      	mov	r4, r0
 800fc2c:	b930      	cbnz	r0, 800fc3c <__d2b+0x24>
 800fc2e:	4602      	mov	r2, r0
 800fc30:	4b25      	ldr	r3, [pc, #148]	; (800fcc8 <__d2b+0xb0>)
 800fc32:	4826      	ldr	r0, [pc, #152]	; (800fccc <__d2b+0xb4>)
 800fc34:	f240 310a 	movw	r1, #778	; 0x30a
 800fc38:	f000 ff6a 	bl	8010b10 <__assert_func>
 800fc3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fc40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fc44:	bb35      	cbnz	r5, 800fc94 <__d2b+0x7c>
 800fc46:	2e00      	cmp	r6, #0
 800fc48:	9301      	str	r3, [sp, #4]
 800fc4a:	d028      	beq.n	800fc9e <__d2b+0x86>
 800fc4c:	4668      	mov	r0, sp
 800fc4e:	9600      	str	r6, [sp, #0]
 800fc50:	f7ff fd06 	bl	800f660 <__lo0bits>
 800fc54:	9900      	ldr	r1, [sp, #0]
 800fc56:	b300      	cbz	r0, 800fc9a <__d2b+0x82>
 800fc58:	9a01      	ldr	r2, [sp, #4]
 800fc5a:	f1c0 0320 	rsb	r3, r0, #32
 800fc5e:	fa02 f303 	lsl.w	r3, r2, r3
 800fc62:	430b      	orrs	r3, r1
 800fc64:	40c2      	lsrs	r2, r0
 800fc66:	6163      	str	r3, [r4, #20]
 800fc68:	9201      	str	r2, [sp, #4]
 800fc6a:	9b01      	ldr	r3, [sp, #4]
 800fc6c:	61a3      	str	r3, [r4, #24]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	bf14      	ite	ne
 800fc72:	2202      	movne	r2, #2
 800fc74:	2201      	moveq	r2, #1
 800fc76:	6122      	str	r2, [r4, #16]
 800fc78:	b1d5      	cbz	r5, 800fcb0 <__d2b+0x98>
 800fc7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fc7e:	4405      	add	r5, r0
 800fc80:	f8c9 5000 	str.w	r5, [r9]
 800fc84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc88:	f8c8 0000 	str.w	r0, [r8]
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	b003      	add	sp, #12
 800fc90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc98:	e7d5      	b.n	800fc46 <__d2b+0x2e>
 800fc9a:	6161      	str	r1, [r4, #20]
 800fc9c:	e7e5      	b.n	800fc6a <__d2b+0x52>
 800fc9e:	a801      	add	r0, sp, #4
 800fca0:	f7ff fcde 	bl	800f660 <__lo0bits>
 800fca4:	9b01      	ldr	r3, [sp, #4]
 800fca6:	6163      	str	r3, [r4, #20]
 800fca8:	2201      	movs	r2, #1
 800fcaa:	6122      	str	r2, [r4, #16]
 800fcac:	3020      	adds	r0, #32
 800fcae:	e7e3      	b.n	800fc78 <__d2b+0x60>
 800fcb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fcb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fcb8:	f8c9 0000 	str.w	r0, [r9]
 800fcbc:	6918      	ldr	r0, [r3, #16]
 800fcbe:	f7ff fcaf 	bl	800f620 <__hi0bits>
 800fcc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fcc6:	e7df      	b.n	800fc88 <__d2b+0x70>
 800fcc8:	08014448 	.word	0x08014448
 800fccc:	080144d4 	.word	0x080144d4

0800fcd0 <__ratio>:
 800fcd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd4:	4688      	mov	r8, r1
 800fcd6:	4669      	mov	r1, sp
 800fcd8:	4681      	mov	r9, r0
 800fcda:	f7ff ff4d 	bl	800fb78 <__b2d>
 800fcde:	a901      	add	r1, sp, #4
 800fce0:	4640      	mov	r0, r8
 800fce2:	ec55 4b10 	vmov	r4, r5, d0
 800fce6:	f7ff ff47 	bl	800fb78 <__b2d>
 800fcea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fcee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fcf2:	eba3 0c02 	sub.w	ip, r3, r2
 800fcf6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fcfa:	1a9b      	subs	r3, r3, r2
 800fcfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fd00:	ec51 0b10 	vmov	r0, r1, d0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	bfd6      	itet	le
 800fd08:	460a      	movle	r2, r1
 800fd0a:	462a      	movgt	r2, r5
 800fd0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fd10:	468b      	mov	fp, r1
 800fd12:	462f      	mov	r7, r5
 800fd14:	bfd4      	ite	le
 800fd16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fd1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fd1e:	4620      	mov	r0, r4
 800fd20:	ee10 2a10 	vmov	r2, s0
 800fd24:	465b      	mov	r3, fp
 800fd26:	4639      	mov	r1, r7
 800fd28:	f7f0 fda8 	bl	800087c <__aeabi_ddiv>
 800fd2c:	ec41 0b10 	vmov	d0, r0, r1
 800fd30:	b003      	add	sp, #12
 800fd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd36 <__copybits>:
 800fd36:	3901      	subs	r1, #1
 800fd38:	b570      	push	{r4, r5, r6, lr}
 800fd3a:	1149      	asrs	r1, r1, #5
 800fd3c:	6914      	ldr	r4, [r2, #16]
 800fd3e:	3101      	adds	r1, #1
 800fd40:	f102 0314 	add.w	r3, r2, #20
 800fd44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fd48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fd4c:	1f05      	subs	r5, r0, #4
 800fd4e:	42a3      	cmp	r3, r4
 800fd50:	d30c      	bcc.n	800fd6c <__copybits+0x36>
 800fd52:	1aa3      	subs	r3, r4, r2
 800fd54:	3b11      	subs	r3, #17
 800fd56:	f023 0303 	bic.w	r3, r3, #3
 800fd5a:	3211      	adds	r2, #17
 800fd5c:	42a2      	cmp	r2, r4
 800fd5e:	bf88      	it	hi
 800fd60:	2300      	movhi	r3, #0
 800fd62:	4418      	add	r0, r3
 800fd64:	2300      	movs	r3, #0
 800fd66:	4288      	cmp	r0, r1
 800fd68:	d305      	bcc.n	800fd76 <__copybits+0x40>
 800fd6a:	bd70      	pop	{r4, r5, r6, pc}
 800fd6c:	f853 6b04 	ldr.w	r6, [r3], #4
 800fd70:	f845 6f04 	str.w	r6, [r5, #4]!
 800fd74:	e7eb      	b.n	800fd4e <__copybits+0x18>
 800fd76:	f840 3b04 	str.w	r3, [r0], #4
 800fd7a:	e7f4      	b.n	800fd66 <__copybits+0x30>

0800fd7c <__any_on>:
 800fd7c:	f100 0214 	add.w	r2, r0, #20
 800fd80:	6900      	ldr	r0, [r0, #16]
 800fd82:	114b      	asrs	r3, r1, #5
 800fd84:	4298      	cmp	r0, r3
 800fd86:	b510      	push	{r4, lr}
 800fd88:	db11      	blt.n	800fdae <__any_on+0x32>
 800fd8a:	dd0a      	ble.n	800fda2 <__any_on+0x26>
 800fd8c:	f011 011f 	ands.w	r1, r1, #31
 800fd90:	d007      	beq.n	800fda2 <__any_on+0x26>
 800fd92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fd96:	fa24 f001 	lsr.w	r0, r4, r1
 800fd9a:	fa00 f101 	lsl.w	r1, r0, r1
 800fd9e:	428c      	cmp	r4, r1
 800fda0:	d10b      	bne.n	800fdba <__any_on+0x3e>
 800fda2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d803      	bhi.n	800fdb2 <__any_on+0x36>
 800fdaa:	2000      	movs	r0, #0
 800fdac:	bd10      	pop	{r4, pc}
 800fdae:	4603      	mov	r3, r0
 800fdb0:	e7f7      	b.n	800fda2 <__any_on+0x26>
 800fdb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fdb6:	2900      	cmp	r1, #0
 800fdb8:	d0f5      	beq.n	800fda6 <__any_on+0x2a>
 800fdba:	2001      	movs	r0, #1
 800fdbc:	e7f6      	b.n	800fdac <__any_on+0x30>

0800fdbe <_calloc_r>:
 800fdbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fdc0:	fba1 2402 	umull	r2, r4, r1, r2
 800fdc4:	b94c      	cbnz	r4, 800fdda <_calloc_r+0x1c>
 800fdc6:	4611      	mov	r1, r2
 800fdc8:	9201      	str	r2, [sp, #4]
 800fdca:	f000 f87b 	bl	800fec4 <_malloc_r>
 800fdce:	9a01      	ldr	r2, [sp, #4]
 800fdd0:	4605      	mov	r5, r0
 800fdd2:	b930      	cbnz	r0, 800fde2 <_calloc_r+0x24>
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	b003      	add	sp, #12
 800fdd8:	bd30      	pop	{r4, r5, pc}
 800fdda:	220c      	movs	r2, #12
 800fddc:	6002      	str	r2, [r0, #0]
 800fdde:	2500      	movs	r5, #0
 800fde0:	e7f8      	b.n	800fdd4 <_calloc_r+0x16>
 800fde2:	4621      	mov	r1, r4
 800fde4:	f7fc fb12 	bl	800c40c <memset>
 800fde8:	e7f4      	b.n	800fdd4 <_calloc_r+0x16>
	...

0800fdec <_free_r>:
 800fdec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fdee:	2900      	cmp	r1, #0
 800fdf0:	d044      	beq.n	800fe7c <_free_r+0x90>
 800fdf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdf6:	9001      	str	r0, [sp, #4]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	f1a1 0404 	sub.w	r4, r1, #4
 800fdfe:	bfb8      	it	lt
 800fe00:	18e4      	addlt	r4, r4, r3
 800fe02:	f001 f889 	bl	8010f18 <__malloc_lock>
 800fe06:	4a1e      	ldr	r2, [pc, #120]	; (800fe80 <_free_r+0x94>)
 800fe08:	9801      	ldr	r0, [sp, #4]
 800fe0a:	6813      	ldr	r3, [r2, #0]
 800fe0c:	b933      	cbnz	r3, 800fe1c <_free_r+0x30>
 800fe0e:	6063      	str	r3, [r4, #4]
 800fe10:	6014      	str	r4, [r2, #0]
 800fe12:	b003      	add	sp, #12
 800fe14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe18:	f001 b884 	b.w	8010f24 <__malloc_unlock>
 800fe1c:	42a3      	cmp	r3, r4
 800fe1e:	d908      	bls.n	800fe32 <_free_r+0x46>
 800fe20:	6825      	ldr	r5, [r4, #0]
 800fe22:	1961      	adds	r1, r4, r5
 800fe24:	428b      	cmp	r3, r1
 800fe26:	bf01      	itttt	eq
 800fe28:	6819      	ldreq	r1, [r3, #0]
 800fe2a:	685b      	ldreq	r3, [r3, #4]
 800fe2c:	1949      	addeq	r1, r1, r5
 800fe2e:	6021      	streq	r1, [r4, #0]
 800fe30:	e7ed      	b.n	800fe0e <_free_r+0x22>
 800fe32:	461a      	mov	r2, r3
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	b10b      	cbz	r3, 800fe3c <_free_r+0x50>
 800fe38:	42a3      	cmp	r3, r4
 800fe3a:	d9fa      	bls.n	800fe32 <_free_r+0x46>
 800fe3c:	6811      	ldr	r1, [r2, #0]
 800fe3e:	1855      	adds	r5, r2, r1
 800fe40:	42a5      	cmp	r5, r4
 800fe42:	d10b      	bne.n	800fe5c <_free_r+0x70>
 800fe44:	6824      	ldr	r4, [r4, #0]
 800fe46:	4421      	add	r1, r4
 800fe48:	1854      	adds	r4, r2, r1
 800fe4a:	42a3      	cmp	r3, r4
 800fe4c:	6011      	str	r1, [r2, #0]
 800fe4e:	d1e0      	bne.n	800fe12 <_free_r+0x26>
 800fe50:	681c      	ldr	r4, [r3, #0]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	6053      	str	r3, [r2, #4]
 800fe56:	4421      	add	r1, r4
 800fe58:	6011      	str	r1, [r2, #0]
 800fe5a:	e7da      	b.n	800fe12 <_free_r+0x26>
 800fe5c:	d902      	bls.n	800fe64 <_free_r+0x78>
 800fe5e:	230c      	movs	r3, #12
 800fe60:	6003      	str	r3, [r0, #0]
 800fe62:	e7d6      	b.n	800fe12 <_free_r+0x26>
 800fe64:	6825      	ldr	r5, [r4, #0]
 800fe66:	1961      	adds	r1, r4, r5
 800fe68:	428b      	cmp	r3, r1
 800fe6a:	bf04      	itt	eq
 800fe6c:	6819      	ldreq	r1, [r3, #0]
 800fe6e:	685b      	ldreq	r3, [r3, #4]
 800fe70:	6063      	str	r3, [r4, #4]
 800fe72:	bf04      	itt	eq
 800fe74:	1949      	addeq	r1, r1, r5
 800fe76:	6021      	streq	r1, [r4, #0]
 800fe78:	6054      	str	r4, [r2, #4]
 800fe7a:	e7ca      	b.n	800fe12 <_free_r+0x26>
 800fe7c:	b003      	add	sp, #12
 800fe7e:	bd30      	pop	{r4, r5, pc}
 800fe80:	2001c4f0 	.word	0x2001c4f0

0800fe84 <sbrk_aligned>:
 800fe84:	b570      	push	{r4, r5, r6, lr}
 800fe86:	4e0e      	ldr	r6, [pc, #56]	; (800fec0 <sbrk_aligned+0x3c>)
 800fe88:	460c      	mov	r4, r1
 800fe8a:	6831      	ldr	r1, [r6, #0]
 800fe8c:	4605      	mov	r5, r0
 800fe8e:	b911      	cbnz	r1, 800fe96 <sbrk_aligned+0x12>
 800fe90:	f000 fd26 	bl	80108e0 <_sbrk_r>
 800fe94:	6030      	str	r0, [r6, #0]
 800fe96:	4621      	mov	r1, r4
 800fe98:	4628      	mov	r0, r5
 800fe9a:	f000 fd21 	bl	80108e0 <_sbrk_r>
 800fe9e:	1c43      	adds	r3, r0, #1
 800fea0:	d00a      	beq.n	800feb8 <sbrk_aligned+0x34>
 800fea2:	1cc4      	adds	r4, r0, #3
 800fea4:	f024 0403 	bic.w	r4, r4, #3
 800fea8:	42a0      	cmp	r0, r4
 800feaa:	d007      	beq.n	800febc <sbrk_aligned+0x38>
 800feac:	1a21      	subs	r1, r4, r0
 800feae:	4628      	mov	r0, r5
 800feb0:	f000 fd16 	bl	80108e0 <_sbrk_r>
 800feb4:	3001      	adds	r0, #1
 800feb6:	d101      	bne.n	800febc <sbrk_aligned+0x38>
 800feb8:	f04f 34ff 	mov.w	r4, #4294967295
 800febc:	4620      	mov	r0, r4
 800febe:	bd70      	pop	{r4, r5, r6, pc}
 800fec0:	2001c4f4 	.word	0x2001c4f4

0800fec4 <_malloc_r>:
 800fec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fec8:	1ccd      	adds	r5, r1, #3
 800feca:	f025 0503 	bic.w	r5, r5, #3
 800fece:	3508      	adds	r5, #8
 800fed0:	2d0c      	cmp	r5, #12
 800fed2:	bf38      	it	cc
 800fed4:	250c      	movcc	r5, #12
 800fed6:	2d00      	cmp	r5, #0
 800fed8:	4607      	mov	r7, r0
 800feda:	db01      	blt.n	800fee0 <_malloc_r+0x1c>
 800fedc:	42a9      	cmp	r1, r5
 800fede:	d905      	bls.n	800feec <_malloc_r+0x28>
 800fee0:	230c      	movs	r3, #12
 800fee2:	603b      	str	r3, [r7, #0]
 800fee4:	2600      	movs	r6, #0
 800fee6:	4630      	mov	r0, r6
 800fee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feec:	4e2e      	ldr	r6, [pc, #184]	; (800ffa8 <_malloc_r+0xe4>)
 800feee:	f001 f813 	bl	8010f18 <__malloc_lock>
 800fef2:	6833      	ldr	r3, [r6, #0]
 800fef4:	461c      	mov	r4, r3
 800fef6:	bb34      	cbnz	r4, 800ff46 <_malloc_r+0x82>
 800fef8:	4629      	mov	r1, r5
 800fefa:	4638      	mov	r0, r7
 800fefc:	f7ff ffc2 	bl	800fe84 <sbrk_aligned>
 800ff00:	1c43      	adds	r3, r0, #1
 800ff02:	4604      	mov	r4, r0
 800ff04:	d14d      	bne.n	800ffa2 <_malloc_r+0xde>
 800ff06:	6834      	ldr	r4, [r6, #0]
 800ff08:	4626      	mov	r6, r4
 800ff0a:	2e00      	cmp	r6, #0
 800ff0c:	d140      	bne.n	800ff90 <_malloc_r+0xcc>
 800ff0e:	6823      	ldr	r3, [r4, #0]
 800ff10:	4631      	mov	r1, r6
 800ff12:	4638      	mov	r0, r7
 800ff14:	eb04 0803 	add.w	r8, r4, r3
 800ff18:	f000 fce2 	bl	80108e0 <_sbrk_r>
 800ff1c:	4580      	cmp	r8, r0
 800ff1e:	d13a      	bne.n	800ff96 <_malloc_r+0xd2>
 800ff20:	6821      	ldr	r1, [r4, #0]
 800ff22:	3503      	adds	r5, #3
 800ff24:	1a6d      	subs	r5, r5, r1
 800ff26:	f025 0503 	bic.w	r5, r5, #3
 800ff2a:	3508      	adds	r5, #8
 800ff2c:	2d0c      	cmp	r5, #12
 800ff2e:	bf38      	it	cc
 800ff30:	250c      	movcc	r5, #12
 800ff32:	4629      	mov	r1, r5
 800ff34:	4638      	mov	r0, r7
 800ff36:	f7ff ffa5 	bl	800fe84 <sbrk_aligned>
 800ff3a:	3001      	adds	r0, #1
 800ff3c:	d02b      	beq.n	800ff96 <_malloc_r+0xd2>
 800ff3e:	6823      	ldr	r3, [r4, #0]
 800ff40:	442b      	add	r3, r5
 800ff42:	6023      	str	r3, [r4, #0]
 800ff44:	e00e      	b.n	800ff64 <_malloc_r+0xa0>
 800ff46:	6822      	ldr	r2, [r4, #0]
 800ff48:	1b52      	subs	r2, r2, r5
 800ff4a:	d41e      	bmi.n	800ff8a <_malloc_r+0xc6>
 800ff4c:	2a0b      	cmp	r2, #11
 800ff4e:	d916      	bls.n	800ff7e <_malloc_r+0xba>
 800ff50:	1961      	adds	r1, r4, r5
 800ff52:	42a3      	cmp	r3, r4
 800ff54:	6025      	str	r5, [r4, #0]
 800ff56:	bf18      	it	ne
 800ff58:	6059      	strne	r1, [r3, #4]
 800ff5a:	6863      	ldr	r3, [r4, #4]
 800ff5c:	bf08      	it	eq
 800ff5e:	6031      	streq	r1, [r6, #0]
 800ff60:	5162      	str	r2, [r4, r5]
 800ff62:	604b      	str	r3, [r1, #4]
 800ff64:	4638      	mov	r0, r7
 800ff66:	f104 060b 	add.w	r6, r4, #11
 800ff6a:	f000 ffdb 	bl	8010f24 <__malloc_unlock>
 800ff6e:	f026 0607 	bic.w	r6, r6, #7
 800ff72:	1d23      	adds	r3, r4, #4
 800ff74:	1af2      	subs	r2, r6, r3
 800ff76:	d0b6      	beq.n	800fee6 <_malloc_r+0x22>
 800ff78:	1b9b      	subs	r3, r3, r6
 800ff7a:	50a3      	str	r3, [r4, r2]
 800ff7c:	e7b3      	b.n	800fee6 <_malloc_r+0x22>
 800ff7e:	6862      	ldr	r2, [r4, #4]
 800ff80:	42a3      	cmp	r3, r4
 800ff82:	bf0c      	ite	eq
 800ff84:	6032      	streq	r2, [r6, #0]
 800ff86:	605a      	strne	r2, [r3, #4]
 800ff88:	e7ec      	b.n	800ff64 <_malloc_r+0xa0>
 800ff8a:	4623      	mov	r3, r4
 800ff8c:	6864      	ldr	r4, [r4, #4]
 800ff8e:	e7b2      	b.n	800fef6 <_malloc_r+0x32>
 800ff90:	4634      	mov	r4, r6
 800ff92:	6876      	ldr	r6, [r6, #4]
 800ff94:	e7b9      	b.n	800ff0a <_malloc_r+0x46>
 800ff96:	230c      	movs	r3, #12
 800ff98:	603b      	str	r3, [r7, #0]
 800ff9a:	4638      	mov	r0, r7
 800ff9c:	f000 ffc2 	bl	8010f24 <__malloc_unlock>
 800ffa0:	e7a1      	b.n	800fee6 <_malloc_r+0x22>
 800ffa2:	6025      	str	r5, [r4, #0]
 800ffa4:	e7de      	b.n	800ff64 <_malloc_r+0xa0>
 800ffa6:	bf00      	nop
 800ffa8:	2001c4f0 	.word	0x2001c4f0

0800ffac <__ssputs_r>:
 800ffac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffb0:	688e      	ldr	r6, [r1, #8]
 800ffb2:	429e      	cmp	r6, r3
 800ffb4:	4682      	mov	sl, r0
 800ffb6:	460c      	mov	r4, r1
 800ffb8:	4690      	mov	r8, r2
 800ffba:	461f      	mov	r7, r3
 800ffbc:	d838      	bhi.n	8010030 <__ssputs_r+0x84>
 800ffbe:	898a      	ldrh	r2, [r1, #12]
 800ffc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ffc4:	d032      	beq.n	801002c <__ssputs_r+0x80>
 800ffc6:	6825      	ldr	r5, [r4, #0]
 800ffc8:	6909      	ldr	r1, [r1, #16]
 800ffca:	eba5 0901 	sub.w	r9, r5, r1
 800ffce:	6965      	ldr	r5, [r4, #20]
 800ffd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ffd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ffd8:	3301      	adds	r3, #1
 800ffda:	444b      	add	r3, r9
 800ffdc:	106d      	asrs	r5, r5, #1
 800ffde:	429d      	cmp	r5, r3
 800ffe0:	bf38      	it	cc
 800ffe2:	461d      	movcc	r5, r3
 800ffe4:	0553      	lsls	r3, r2, #21
 800ffe6:	d531      	bpl.n	801004c <__ssputs_r+0xa0>
 800ffe8:	4629      	mov	r1, r5
 800ffea:	f7ff ff6b 	bl	800fec4 <_malloc_r>
 800ffee:	4606      	mov	r6, r0
 800fff0:	b950      	cbnz	r0, 8010008 <__ssputs_r+0x5c>
 800fff2:	230c      	movs	r3, #12
 800fff4:	f8ca 3000 	str.w	r3, [sl]
 800fff8:	89a3      	ldrh	r3, [r4, #12]
 800fffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fffe:	81a3      	strh	r3, [r4, #12]
 8010000:	f04f 30ff 	mov.w	r0, #4294967295
 8010004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010008:	6921      	ldr	r1, [r4, #16]
 801000a:	464a      	mov	r2, r9
 801000c:	f7fc f9f0 	bl	800c3f0 <memcpy>
 8010010:	89a3      	ldrh	r3, [r4, #12]
 8010012:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801001a:	81a3      	strh	r3, [r4, #12]
 801001c:	6126      	str	r6, [r4, #16]
 801001e:	6165      	str	r5, [r4, #20]
 8010020:	444e      	add	r6, r9
 8010022:	eba5 0509 	sub.w	r5, r5, r9
 8010026:	6026      	str	r6, [r4, #0]
 8010028:	60a5      	str	r5, [r4, #8]
 801002a:	463e      	mov	r6, r7
 801002c:	42be      	cmp	r6, r7
 801002e:	d900      	bls.n	8010032 <__ssputs_r+0x86>
 8010030:	463e      	mov	r6, r7
 8010032:	6820      	ldr	r0, [r4, #0]
 8010034:	4632      	mov	r2, r6
 8010036:	4641      	mov	r1, r8
 8010038:	f000 ff54 	bl	8010ee4 <memmove>
 801003c:	68a3      	ldr	r3, [r4, #8]
 801003e:	1b9b      	subs	r3, r3, r6
 8010040:	60a3      	str	r3, [r4, #8]
 8010042:	6823      	ldr	r3, [r4, #0]
 8010044:	4433      	add	r3, r6
 8010046:	6023      	str	r3, [r4, #0]
 8010048:	2000      	movs	r0, #0
 801004a:	e7db      	b.n	8010004 <__ssputs_r+0x58>
 801004c:	462a      	mov	r2, r5
 801004e:	f000 ff6f 	bl	8010f30 <_realloc_r>
 8010052:	4606      	mov	r6, r0
 8010054:	2800      	cmp	r0, #0
 8010056:	d1e1      	bne.n	801001c <__ssputs_r+0x70>
 8010058:	6921      	ldr	r1, [r4, #16]
 801005a:	4650      	mov	r0, sl
 801005c:	f7ff fec6 	bl	800fdec <_free_r>
 8010060:	e7c7      	b.n	800fff2 <__ssputs_r+0x46>
	...

08010064 <_svfiprintf_r>:
 8010064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010068:	4698      	mov	r8, r3
 801006a:	898b      	ldrh	r3, [r1, #12]
 801006c:	061b      	lsls	r3, r3, #24
 801006e:	b09d      	sub	sp, #116	; 0x74
 8010070:	4607      	mov	r7, r0
 8010072:	460d      	mov	r5, r1
 8010074:	4614      	mov	r4, r2
 8010076:	d50e      	bpl.n	8010096 <_svfiprintf_r+0x32>
 8010078:	690b      	ldr	r3, [r1, #16]
 801007a:	b963      	cbnz	r3, 8010096 <_svfiprintf_r+0x32>
 801007c:	2140      	movs	r1, #64	; 0x40
 801007e:	f7ff ff21 	bl	800fec4 <_malloc_r>
 8010082:	6028      	str	r0, [r5, #0]
 8010084:	6128      	str	r0, [r5, #16]
 8010086:	b920      	cbnz	r0, 8010092 <_svfiprintf_r+0x2e>
 8010088:	230c      	movs	r3, #12
 801008a:	603b      	str	r3, [r7, #0]
 801008c:	f04f 30ff 	mov.w	r0, #4294967295
 8010090:	e0d1      	b.n	8010236 <_svfiprintf_r+0x1d2>
 8010092:	2340      	movs	r3, #64	; 0x40
 8010094:	616b      	str	r3, [r5, #20]
 8010096:	2300      	movs	r3, #0
 8010098:	9309      	str	r3, [sp, #36]	; 0x24
 801009a:	2320      	movs	r3, #32
 801009c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80100a4:	2330      	movs	r3, #48	; 0x30
 80100a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010250 <_svfiprintf_r+0x1ec>
 80100aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80100ae:	f04f 0901 	mov.w	r9, #1
 80100b2:	4623      	mov	r3, r4
 80100b4:	469a      	mov	sl, r3
 80100b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100ba:	b10a      	cbz	r2, 80100c0 <_svfiprintf_r+0x5c>
 80100bc:	2a25      	cmp	r2, #37	; 0x25
 80100be:	d1f9      	bne.n	80100b4 <_svfiprintf_r+0x50>
 80100c0:	ebba 0b04 	subs.w	fp, sl, r4
 80100c4:	d00b      	beq.n	80100de <_svfiprintf_r+0x7a>
 80100c6:	465b      	mov	r3, fp
 80100c8:	4622      	mov	r2, r4
 80100ca:	4629      	mov	r1, r5
 80100cc:	4638      	mov	r0, r7
 80100ce:	f7ff ff6d 	bl	800ffac <__ssputs_r>
 80100d2:	3001      	adds	r0, #1
 80100d4:	f000 80aa 	beq.w	801022c <_svfiprintf_r+0x1c8>
 80100d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100da:	445a      	add	r2, fp
 80100dc:	9209      	str	r2, [sp, #36]	; 0x24
 80100de:	f89a 3000 	ldrb.w	r3, [sl]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	f000 80a2 	beq.w	801022c <_svfiprintf_r+0x1c8>
 80100e8:	2300      	movs	r3, #0
 80100ea:	f04f 32ff 	mov.w	r2, #4294967295
 80100ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100f2:	f10a 0a01 	add.w	sl, sl, #1
 80100f6:	9304      	str	r3, [sp, #16]
 80100f8:	9307      	str	r3, [sp, #28]
 80100fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100fe:	931a      	str	r3, [sp, #104]	; 0x68
 8010100:	4654      	mov	r4, sl
 8010102:	2205      	movs	r2, #5
 8010104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010108:	4851      	ldr	r0, [pc, #324]	; (8010250 <_svfiprintf_r+0x1ec>)
 801010a:	f7f0 f881 	bl	8000210 <memchr>
 801010e:	9a04      	ldr	r2, [sp, #16]
 8010110:	b9d8      	cbnz	r0, 801014a <_svfiprintf_r+0xe6>
 8010112:	06d0      	lsls	r0, r2, #27
 8010114:	bf44      	itt	mi
 8010116:	2320      	movmi	r3, #32
 8010118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801011c:	0711      	lsls	r1, r2, #28
 801011e:	bf44      	itt	mi
 8010120:	232b      	movmi	r3, #43	; 0x2b
 8010122:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010126:	f89a 3000 	ldrb.w	r3, [sl]
 801012a:	2b2a      	cmp	r3, #42	; 0x2a
 801012c:	d015      	beq.n	801015a <_svfiprintf_r+0xf6>
 801012e:	9a07      	ldr	r2, [sp, #28]
 8010130:	4654      	mov	r4, sl
 8010132:	2000      	movs	r0, #0
 8010134:	f04f 0c0a 	mov.w	ip, #10
 8010138:	4621      	mov	r1, r4
 801013a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801013e:	3b30      	subs	r3, #48	; 0x30
 8010140:	2b09      	cmp	r3, #9
 8010142:	d94e      	bls.n	80101e2 <_svfiprintf_r+0x17e>
 8010144:	b1b0      	cbz	r0, 8010174 <_svfiprintf_r+0x110>
 8010146:	9207      	str	r2, [sp, #28]
 8010148:	e014      	b.n	8010174 <_svfiprintf_r+0x110>
 801014a:	eba0 0308 	sub.w	r3, r0, r8
 801014e:	fa09 f303 	lsl.w	r3, r9, r3
 8010152:	4313      	orrs	r3, r2
 8010154:	9304      	str	r3, [sp, #16]
 8010156:	46a2      	mov	sl, r4
 8010158:	e7d2      	b.n	8010100 <_svfiprintf_r+0x9c>
 801015a:	9b03      	ldr	r3, [sp, #12]
 801015c:	1d19      	adds	r1, r3, #4
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	9103      	str	r1, [sp, #12]
 8010162:	2b00      	cmp	r3, #0
 8010164:	bfbb      	ittet	lt
 8010166:	425b      	neglt	r3, r3
 8010168:	f042 0202 	orrlt.w	r2, r2, #2
 801016c:	9307      	strge	r3, [sp, #28]
 801016e:	9307      	strlt	r3, [sp, #28]
 8010170:	bfb8      	it	lt
 8010172:	9204      	strlt	r2, [sp, #16]
 8010174:	7823      	ldrb	r3, [r4, #0]
 8010176:	2b2e      	cmp	r3, #46	; 0x2e
 8010178:	d10c      	bne.n	8010194 <_svfiprintf_r+0x130>
 801017a:	7863      	ldrb	r3, [r4, #1]
 801017c:	2b2a      	cmp	r3, #42	; 0x2a
 801017e:	d135      	bne.n	80101ec <_svfiprintf_r+0x188>
 8010180:	9b03      	ldr	r3, [sp, #12]
 8010182:	1d1a      	adds	r2, r3, #4
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	9203      	str	r2, [sp, #12]
 8010188:	2b00      	cmp	r3, #0
 801018a:	bfb8      	it	lt
 801018c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010190:	3402      	adds	r4, #2
 8010192:	9305      	str	r3, [sp, #20]
 8010194:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010260 <_svfiprintf_r+0x1fc>
 8010198:	7821      	ldrb	r1, [r4, #0]
 801019a:	2203      	movs	r2, #3
 801019c:	4650      	mov	r0, sl
 801019e:	f7f0 f837 	bl	8000210 <memchr>
 80101a2:	b140      	cbz	r0, 80101b6 <_svfiprintf_r+0x152>
 80101a4:	2340      	movs	r3, #64	; 0x40
 80101a6:	eba0 000a 	sub.w	r0, r0, sl
 80101aa:	fa03 f000 	lsl.w	r0, r3, r0
 80101ae:	9b04      	ldr	r3, [sp, #16]
 80101b0:	4303      	orrs	r3, r0
 80101b2:	3401      	adds	r4, #1
 80101b4:	9304      	str	r3, [sp, #16]
 80101b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101ba:	4826      	ldr	r0, [pc, #152]	; (8010254 <_svfiprintf_r+0x1f0>)
 80101bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80101c0:	2206      	movs	r2, #6
 80101c2:	f7f0 f825 	bl	8000210 <memchr>
 80101c6:	2800      	cmp	r0, #0
 80101c8:	d038      	beq.n	801023c <_svfiprintf_r+0x1d8>
 80101ca:	4b23      	ldr	r3, [pc, #140]	; (8010258 <_svfiprintf_r+0x1f4>)
 80101cc:	bb1b      	cbnz	r3, 8010216 <_svfiprintf_r+0x1b2>
 80101ce:	9b03      	ldr	r3, [sp, #12]
 80101d0:	3307      	adds	r3, #7
 80101d2:	f023 0307 	bic.w	r3, r3, #7
 80101d6:	3308      	adds	r3, #8
 80101d8:	9303      	str	r3, [sp, #12]
 80101da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101dc:	4433      	add	r3, r6
 80101de:	9309      	str	r3, [sp, #36]	; 0x24
 80101e0:	e767      	b.n	80100b2 <_svfiprintf_r+0x4e>
 80101e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80101e6:	460c      	mov	r4, r1
 80101e8:	2001      	movs	r0, #1
 80101ea:	e7a5      	b.n	8010138 <_svfiprintf_r+0xd4>
 80101ec:	2300      	movs	r3, #0
 80101ee:	3401      	adds	r4, #1
 80101f0:	9305      	str	r3, [sp, #20]
 80101f2:	4619      	mov	r1, r3
 80101f4:	f04f 0c0a 	mov.w	ip, #10
 80101f8:	4620      	mov	r0, r4
 80101fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101fe:	3a30      	subs	r2, #48	; 0x30
 8010200:	2a09      	cmp	r2, #9
 8010202:	d903      	bls.n	801020c <_svfiprintf_r+0x1a8>
 8010204:	2b00      	cmp	r3, #0
 8010206:	d0c5      	beq.n	8010194 <_svfiprintf_r+0x130>
 8010208:	9105      	str	r1, [sp, #20]
 801020a:	e7c3      	b.n	8010194 <_svfiprintf_r+0x130>
 801020c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010210:	4604      	mov	r4, r0
 8010212:	2301      	movs	r3, #1
 8010214:	e7f0      	b.n	80101f8 <_svfiprintf_r+0x194>
 8010216:	ab03      	add	r3, sp, #12
 8010218:	9300      	str	r3, [sp, #0]
 801021a:	462a      	mov	r2, r5
 801021c:	4b0f      	ldr	r3, [pc, #60]	; (801025c <_svfiprintf_r+0x1f8>)
 801021e:	a904      	add	r1, sp, #16
 8010220:	4638      	mov	r0, r7
 8010222:	f7fc f99b 	bl	800c55c <_printf_float>
 8010226:	1c42      	adds	r2, r0, #1
 8010228:	4606      	mov	r6, r0
 801022a:	d1d6      	bne.n	80101da <_svfiprintf_r+0x176>
 801022c:	89ab      	ldrh	r3, [r5, #12]
 801022e:	065b      	lsls	r3, r3, #25
 8010230:	f53f af2c 	bmi.w	801008c <_svfiprintf_r+0x28>
 8010234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010236:	b01d      	add	sp, #116	; 0x74
 8010238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801023c:	ab03      	add	r3, sp, #12
 801023e:	9300      	str	r3, [sp, #0]
 8010240:	462a      	mov	r2, r5
 8010242:	4b06      	ldr	r3, [pc, #24]	; (801025c <_svfiprintf_r+0x1f8>)
 8010244:	a904      	add	r1, sp, #16
 8010246:	4638      	mov	r0, r7
 8010248:	f7fc fc2c 	bl	800caa4 <_printf_i>
 801024c:	e7eb      	b.n	8010226 <_svfiprintf_r+0x1c2>
 801024e:	bf00      	nop
 8010250:	0801462c 	.word	0x0801462c
 8010254:	08014636 	.word	0x08014636
 8010258:	0800c55d 	.word	0x0800c55d
 801025c:	0800ffad 	.word	0x0800ffad
 8010260:	08014632 	.word	0x08014632

08010264 <_sungetc_r>:
 8010264:	b538      	push	{r3, r4, r5, lr}
 8010266:	1c4b      	adds	r3, r1, #1
 8010268:	4614      	mov	r4, r2
 801026a:	d103      	bne.n	8010274 <_sungetc_r+0x10>
 801026c:	f04f 35ff 	mov.w	r5, #4294967295
 8010270:	4628      	mov	r0, r5
 8010272:	bd38      	pop	{r3, r4, r5, pc}
 8010274:	8993      	ldrh	r3, [r2, #12]
 8010276:	f023 0320 	bic.w	r3, r3, #32
 801027a:	8193      	strh	r3, [r2, #12]
 801027c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801027e:	6852      	ldr	r2, [r2, #4]
 8010280:	b2cd      	uxtb	r5, r1
 8010282:	b18b      	cbz	r3, 80102a8 <_sungetc_r+0x44>
 8010284:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010286:	4293      	cmp	r3, r2
 8010288:	dd08      	ble.n	801029c <_sungetc_r+0x38>
 801028a:	6823      	ldr	r3, [r4, #0]
 801028c:	1e5a      	subs	r2, r3, #1
 801028e:	6022      	str	r2, [r4, #0]
 8010290:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010294:	6863      	ldr	r3, [r4, #4]
 8010296:	3301      	adds	r3, #1
 8010298:	6063      	str	r3, [r4, #4]
 801029a:	e7e9      	b.n	8010270 <_sungetc_r+0xc>
 801029c:	4621      	mov	r1, r4
 801029e:	f000 fbef 	bl	8010a80 <__submore>
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d0f1      	beq.n	801028a <_sungetc_r+0x26>
 80102a6:	e7e1      	b.n	801026c <_sungetc_r+0x8>
 80102a8:	6921      	ldr	r1, [r4, #16]
 80102aa:	6823      	ldr	r3, [r4, #0]
 80102ac:	b151      	cbz	r1, 80102c4 <_sungetc_r+0x60>
 80102ae:	4299      	cmp	r1, r3
 80102b0:	d208      	bcs.n	80102c4 <_sungetc_r+0x60>
 80102b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80102b6:	42a9      	cmp	r1, r5
 80102b8:	d104      	bne.n	80102c4 <_sungetc_r+0x60>
 80102ba:	3b01      	subs	r3, #1
 80102bc:	3201      	adds	r2, #1
 80102be:	6023      	str	r3, [r4, #0]
 80102c0:	6062      	str	r2, [r4, #4]
 80102c2:	e7d5      	b.n	8010270 <_sungetc_r+0xc>
 80102c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80102c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102cc:	6363      	str	r3, [r4, #52]	; 0x34
 80102ce:	2303      	movs	r3, #3
 80102d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80102d2:	4623      	mov	r3, r4
 80102d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80102d8:	6023      	str	r3, [r4, #0]
 80102da:	2301      	movs	r3, #1
 80102dc:	e7dc      	b.n	8010298 <_sungetc_r+0x34>

080102de <__ssrefill_r>:
 80102de:	b510      	push	{r4, lr}
 80102e0:	460c      	mov	r4, r1
 80102e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80102e4:	b169      	cbz	r1, 8010302 <__ssrefill_r+0x24>
 80102e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102ea:	4299      	cmp	r1, r3
 80102ec:	d001      	beq.n	80102f2 <__ssrefill_r+0x14>
 80102ee:	f7ff fd7d 	bl	800fdec <_free_r>
 80102f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80102f4:	6063      	str	r3, [r4, #4]
 80102f6:	2000      	movs	r0, #0
 80102f8:	6360      	str	r0, [r4, #52]	; 0x34
 80102fa:	b113      	cbz	r3, 8010302 <__ssrefill_r+0x24>
 80102fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80102fe:	6023      	str	r3, [r4, #0]
 8010300:	bd10      	pop	{r4, pc}
 8010302:	6923      	ldr	r3, [r4, #16]
 8010304:	6023      	str	r3, [r4, #0]
 8010306:	2300      	movs	r3, #0
 8010308:	6063      	str	r3, [r4, #4]
 801030a:	89a3      	ldrh	r3, [r4, #12]
 801030c:	f043 0320 	orr.w	r3, r3, #32
 8010310:	81a3      	strh	r3, [r4, #12]
 8010312:	f04f 30ff 	mov.w	r0, #4294967295
 8010316:	e7f3      	b.n	8010300 <__ssrefill_r+0x22>

08010318 <__ssvfiscanf_r>:
 8010318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801031c:	460c      	mov	r4, r1
 801031e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010322:	2100      	movs	r1, #0
 8010324:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010328:	49a6      	ldr	r1, [pc, #664]	; (80105c4 <__ssvfiscanf_r+0x2ac>)
 801032a:	91a0      	str	r1, [sp, #640]	; 0x280
 801032c:	f10d 0804 	add.w	r8, sp, #4
 8010330:	49a5      	ldr	r1, [pc, #660]	; (80105c8 <__ssvfiscanf_r+0x2b0>)
 8010332:	4fa6      	ldr	r7, [pc, #664]	; (80105cc <__ssvfiscanf_r+0x2b4>)
 8010334:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80105d0 <__ssvfiscanf_r+0x2b8>
 8010338:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801033c:	4606      	mov	r6, r0
 801033e:	91a1      	str	r1, [sp, #644]	; 0x284
 8010340:	9300      	str	r3, [sp, #0]
 8010342:	7813      	ldrb	r3, [r2, #0]
 8010344:	2b00      	cmp	r3, #0
 8010346:	f000 815a 	beq.w	80105fe <__ssvfiscanf_r+0x2e6>
 801034a:	5dd9      	ldrb	r1, [r3, r7]
 801034c:	f011 0108 	ands.w	r1, r1, #8
 8010350:	f102 0501 	add.w	r5, r2, #1
 8010354:	d019      	beq.n	801038a <__ssvfiscanf_r+0x72>
 8010356:	6863      	ldr	r3, [r4, #4]
 8010358:	2b00      	cmp	r3, #0
 801035a:	dd0f      	ble.n	801037c <__ssvfiscanf_r+0x64>
 801035c:	6823      	ldr	r3, [r4, #0]
 801035e:	781a      	ldrb	r2, [r3, #0]
 8010360:	5cba      	ldrb	r2, [r7, r2]
 8010362:	0712      	lsls	r2, r2, #28
 8010364:	d401      	bmi.n	801036a <__ssvfiscanf_r+0x52>
 8010366:	462a      	mov	r2, r5
 8010368:	e7eb      	b.n	8010342 <__ssvfiscanf_r+0x2a>
 801036a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801036c:	3201      	adds	r2, #1
 801036e:	9245      	str	r2, [sp, #276]	; 0x114
 8010370:	6862      	ldr	r2, [r4, #4]
 8010372:	3301      	adds	r3, #1
 8010374:	3a01      	subs	r2, #1
 8010376:	6062      	str	r2, [r4, #4]
 8010378:	6023      	str	r3, [r4, #0]
 801037a:	e7ec      	b.n	8010356 <__ssvfiscanf_r+0x3e>
 801037c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801037e:	4621      	mov	r1, r4
 8010380:	4630      	mov	r0, r6
 8010382:	4798      	blx	r3
 8010384:	2800      	cmp	r0, #0
 8010386:	d0e9      	beq.n	801035c <__ssvfiscanf_r+0x44>
 8010388:	e7ed      	b.n	8010366 <__ssvfiscanf_r+0x4e>
 801038a:	2b25      	cmp	r3, #37	; 0x25
 801038c:	d012      	beq.n	80103b4 <__ssvfiscanf_r+0x9c>
 801038e:	469a      	mov	sl, r3
 8010390:	6863      	ldr	r3, [r4, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	f340 8091 	ble.w	80104ba <__ssvfiscanf_r+0x1a2>
 8010398:	6822      	ldr	r2, [r4, #0]
 801039a:	7813      	ldrb	r3, [r2, #0]
 801039c:	4553      	cmp	r3, sl
 801039e:	f040 812e 	bne.w	80105fe <__ssvfiscanf_r+0x2e6>
 80103a2:	6863      	ldr	r3, [r4, #4]
 80103a4:	3b01      	subs	r3, #1
 80103a6:	6063      	str	r3, [r4, #4]
 80103a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80103aa:	3201      	adds	r2, #1
 80103ac:	3301      	adds	r3, #1
 80103ae:	6022      	str	r2, [r4, #0]
 80103b0:	9345      	str	r3, [sp, #276]	; 0x114
 80103b2:	e7d8      	b.n	8010366 <__ssvfiscanf_r+0x4e>
 80103b4:	9141      	str	r1, [sp, #260]	; 0x104
 80103b6:	9143      	str	r1, [sp, #268]	; 0x10c
 80103b8:	7853      	ldrb	r3, [r2, #1]
 80103ba:	2b2a      	cmp	r3, #42	; 0x2a
 80103bc:	bf02      	ittt	eq
 80103be:	2310      	moveq	r3, #16
 80103c0:	1c95      	addeq	r5, r2, #2
 80103c2:	9341      	streq	r3, [sp, #260]	; 0x104
 80103c4:	220a      	movs	r2, #10
 80103c6:	46aa      	mov	sl, r5
 80103c8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80103cc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80103d0:	2b09      	cmp	r3, #9
 80103d2:	d91d      	bls.n	8010410 <__ssvfiscanf_r+0xf8>
 80103d4:	487e      	ldr	r0, [pc, #504]	; (80105d0 <__ssvfiscanf_r+0x2b8>)
 80103d6:	2203      	movs	r2, #3
 80103d8:	f7ef ff1a 	bl	8000210 <memchr>
 80103dc:	b140      	cbz	r0, 80103f0 <__ssvfiscanf_r+0xd8>
 80103de:	2301      	movs	r3, #1
 80103e0:	eba0 0009 	sub.w	r0, r0, r9
 80103e4:	fa03 f000 	lsl.w	r0, r3, r0
 80103e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80103ea:	4318      	orrs	r0, r3
 80103ec:	9041      	str	r0, [sp, #260]	; 0x104
 80103ee:	4655      	mov	r5, sl
 80103f0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80103f4:	2b78      	cmp	r3, #120	; 0x78
 80103f6:	d806      	bhi.n	8010406 <__ssvfiscanf_r+0xee>
 80103f8:	2b57      	cmp	r3, #87	; 0x57
 80103fa:	d810      	bhi.n	801041e <__ssvfiscanf_r+0x106>
 80103fc:	2b25      	cmp	r3, #37	; 0x25
 80103fe:	d0c6      	beq.n	801038e <__ssvfiscanf_r+0x76>
 8010400:	d856      	bhi.n	80104b0 <__ssvfiscanf_r+0x198>
 8010402:	2b00      	cmp	r3, #0
 8010404:	d064      	beq.n	80104d0 <__ssvfiscanf_r+0x1b8>
 8010406:	2303      	movs	r3, #3
 8010408:	9347      	str	r3, [sp, #284]	; 0x11c
 801040a:	230a      	movs	r3, #10
 801040c:	9342      	str	r3, [sp, #264]	; 0x108
 801040e:	e071      	b.n	80104f4 <__ssvfiscanf_r+0x1dc>
 8010410:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010412:	fb02 1103 	mla	r1, r2, r3, r1
 8010416:	3930      	subs	r1, #48	; 0x30
 8010418:	9143      	str	r1, [sp, #268]	; 0x10c
 801041a:	4655      	mov	r5, sl
 801041c:	e7d3      	b.n	80103c6 <__ssvfiscanf_r+0xae>
 801041e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010422:	2a20      	cmp	r2, #32
 8010424:	d8ef      	bhi.n	8010406 <__ssvfiscanf_r+0xee>
 8010426:	a101      	add	r1, pc, #4	; (adr r1, 801042c <__ssvfiscanf_r+0x114>)
 8010428:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801042c:	080104df 	.word	0x080104df
 8010430:	08010407 	.word	0x08010407
 8010434:	08010407 	.word	0x08010407
 8010438:	0801053d 	.word	0x0801053d
 801043c:	08010407 	.word	0x08010407
 8010440:	08010407 	.word	0x08010407
 8010444:	08010407 	.word	0x08010407
 8010448:	08010407 	.word	0x08010407
 801044c:	08010407 	.word	0x08010407
 8010450:	08010407 	.word	0x08010407
 8010454:	08010407 	.word	0x08010407
 8010458:	08010553 	.word	0x08010553
 801045c:	08010529 	.word	0x08010529
 8010460:	080104b7 	.word	0x080104b7
 8010464:	080104b7 	.word	0x080104b7
 8010468:	080104b7 	.word	0x080104b7
 801046c:	08010407 	.word	0x08010407
 8010470:	0801052d 	.word	0x0801052d
 8010474:	08010407 	.word	0x08010407
 8010478:	08010407 	.word	0x08010407
 801047c:	08010407 	.word	0x08010407
 8010480:	08010407 	.word	0x08010407
 8010484:	08010563 	.word	0x08010563
 8010488:	08010535 	.word	0x08010535
 801048c:	080104d7 	.word	0x080104d7
 8010490:	08010407 	.word	0x08010407
 8010494:	08010407 	.word	0x08010407
 8010498:	0801055f 	.word	0x0801055f
 801049c:	08010407 	.word	0x08010407
 80104a0:	08010529 	.word	0x08010529
 80104a4:	08010407 	.word	0x08010407
 80104a8:	08010407 	.word	0x08010407
 80104ac:	080104df 	.word	0x080104df
 80104b0:	3b45      	subs	r3, #69	; 0x45
 80104b2:	2b02      	cmp	r3, #2
 80104b4:	d8a7      	bhi.n	8010406 <__ssvfiscanf_r+0xee>
 80104b6:	2305      	movs	r3, #5
 80104b8:	e01b      	b.n	80104f2 <__ssvfiscanf_r+0x1da>
 80104ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80104bc:	4621      	mov	r1, r4
 80104be:	4630      	mov	r0, r6
 80104c0:	4798      	blx	r3
 80104c2:	2800      	cmp	r0, #0
 80104c4:	f43f af68 	beq.w	8010398 <__ssvfiscanf_r+0x80>
 80104c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80104ca:	2800      	cmp	r0, #0
 80104cc:	f040 808d 	bne.w	80105ea <__ssvfiscanf_r+0x2d2>
 80104d0:	f04f 30ff 	mov.w	r0, #4294967295
 80104d4:	e08f      	b.n	80105f6 <__ssvfiscanf_r+0x2de>
 80104d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80104d8:	f042 0220 	orr.w	r2, r2, #32
 80104dc:	9241      	str	r2, [sp, #260]	; 0x104
 80104de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80104e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80104e4:	9241      	str	r2, [sp, #260]	; 0x104
 80104e6:	2210      	movs	r2, #16
 80104e8:	2b6f      	cmp	r3, #111	; 0x6f
 80104ea:	9242      	str	r2, [sp, #264]	; 0x108
 80104ec:	bf34      	ite	cc
 80104ee:	2303      	movcc	r3, #3
 80104f0:	2304      	movcs	r3, #4
 80104f2:	9347      	str	r3, [sp, #284]	; 0x11c
 80104f4:	6863      	ldr	r3, [r4, #4]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	dd42      	ble.n	8010580 <__ssvfiscanf_r+0x268>
 80104fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80104fc:	0659      	lsls	r1, r3, #25
 80104fe:	d404      	bmi.n	801050a <__ssvfiscanf_r+0x1f2>
 8010500:	6823      	ldr	r3, [r4, #0]
 8010502:	781a      	ldrb	r2, [r3, #0]
 8010504:	5cba      	ldrb	r2, [r7, r2]
 8010506:	0712      	lsls	r2, r2, #28
 8010508:	d441      	bmi.n	801058e <__ssvfiscanf_r+0x276>
 801050a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801050c:	2b02      	cmp	r3, #2
 801050e:	dc50      	bgt.n	80105b2 <__ssvfiscanf_r+0x29a>
 8010510:	466b      	mov	r3, sp
 8010512:	4622      	mov	r2, r4
 8010514:	a941      	add	r1, sp, #260	; 0x104
 8010516:	4630      	mov	r0, r6
 8010518:	f000 f876 	bl	8010608 <_scanf_chars>
 801051c:	2801      	cmp	r0, #1
 801051e:	d06e      	beq.n	80105fe <__ssvfiscanf_r+0x2e6>
 8010520:	2802      	cmp	r0, #2
 8010522:	f47f af20 	bne.w	8010366 <__ssvfiscanf_r+0x4e>
 8010526:	e7cf      	b.n	80104c8 <__ssvfiscanf_r+0x1b0>
 8010528:	220a      	movs	r2, #10
 801052a:	e7dd      	b.n	80104e8 <__ssvfiscanf_r+0x1d0>
 801052c:	2300      	movs	r3, #0
 801052e:	9342      	str	r3, [sp, #264]	; 0x108
 8010530:	2303      	movs	r3, #3
 8010532:	e7de      	b.n	80104f2 <__ssvfiscanf_r+0x1da>
 8010534:	2308      	movs	r3, #8
 8010536:	9342      	str	r3, [sp, #264]	; 0x108
 8010538:	2304      	movs	r3, #4
 801053a:	e7da      	b.n	80104f2 <__ssvfiscanf_r+0x1da>
 801053c:	4629      	mov	r1, r5
 801053e:	4640      	mov	r0, r8
 8010540:	f000 f9de 	bl	8010900 <__sccl>
 8010544:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801054a:	9341      	str	r3, [sp, #260]	; 0x104
 801054c:	4605      	mov	r5, r0
 801054e:	2301      	movs	r3, #1
 8010550:	e7cf      	b.n	80104f2 <__ssvfiscanf_r+0x1da>
 8010552:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010558:	9341      	str	r3, [sp, #260]	; 0x104
 801055a:	2300      	movs	r3, #0
 801055c:	e7c9      	b.n	80104f2 <__ssvfiscanf_r+0x1da>
 801055e:	2302      	movs	r3, #2
 8010560:	e7c7      	b.n	80104f2 <__ssvfiscanf_r+0x1da>
 8010562:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010564:	06c3      	lsls	r3, r0, #27
 8010566:	f53f aefe 	bmi.w	8010366 <__ssvfiscanf_r+0x4e>
 801056a:	9b00      	ldr	r3, [sp, #0]
 801056c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801056e:	1d19      	adds	r1, r3, #4
 8010570:	9100      	str	r1, [sp, #0]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	f010 0f01 	tst.w	r0, #1
 8010578:	bf14      	ite	ne
 801057a:	801a      	strhne	r2, [r3, #0]
 801057c:	601a      	streq	r2, [r3, #0]
 801057e:	e6f2      	b.n	8010366 <__ssvfiscanf_r+0x4e>
 8010580:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010582:	4621      	mov	r1, r4
 8010584:	4630      	mov	r0, r6
 8010586:	4798      	blx	r3
 8010588:	2800      	cmp	r0, #0
 801058a:	d0b6      	beq.n	80104fa <__ssvfiscanf_r+0x1e2>
 801058c:	e79c      	b.n	80104c8 <__ssvfiscanf_r+0x1b0>
 801058e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010590:	3201      	adds	r2, #1
 8010592:	9245      	str	r2, [sp, #276]	; 0x114
 8010594:	6862      	ldr	r2, [r4, #4]
 8010596:	3a01      	subs	r2, #1
 8010598:	2a00      	cmp	r2, #0
 801059a:	6062      	str	r2, [r4, #4]
 801059c:	dd02      	ble.n	80105a4 <__ssvfiscanf_r+0x28c>
 801059e:	3301      	adds	r3, #1
 80105a0:	6023      	str	r3, [r4, #0]
 80105a2:	e7ad      	b.n	8010500 <__ssvfiscanf_r+0x1e8>
 80105a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80105a6:	4621      	mov	r1, r4
 80105a8:	4630      	mov	r0, r6
 80105aa:	4798      	blx	r3
 80105ac:	2800      	cmp	r0, #0
 80105ae:	d0a7      	beq.n	8010500 <__ssvfiscanf_r+0x1e8>
 80105b0:	e78a      	b.n	80104c8 <__ssvfiscanf_r+0x1b0>
 80105b2:	2b04      	cmp	r3, #4
 80105b4:	dc0e      	bgt.n	80105d4 <__ssvfiscanf_r+0x2bc>
 80105b6:	466b      	mov	r3, sp
 80105b8:	4622      	mov	r2, r4
 80105ba:	a941      	add	r1, sp, #260	; 0x104
 80105bc:	4630      	mov	r0, r6
 80105be:	f000 f87d 	bl	80106bc <_scanf_i>
 80105c2:	e7ab      	b.n	801051c <__ssvfiscanf_r+0x204>
 80105c4:	08010265 	.word	0x08010265
 80105c8:	080102df 	.word	0x080102df
 80105cc:	080142c9 	.word	0x080142c9
 80105d0:	08014632 	.word	0x08014632
 80105d4:	4b0b      	ldr	r3, [pc, #44]	; (8010604 <__ssvfiscanf_r+0x2ec>)
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	f43f aec5 	beq.w	8010366 <__ssvfiscanf_r+0x4e>
 80105dc:	466b      	mov	r3, sp
 80105de:	4622      	mov	r2, r4
 80105e0:	a941      	add	r1, sp, #260	; 0x104
 80105e2:	4630      	mov	r0, r6
 80105e4:	f7fc fb84 	bl	800ccf0 <_scanf_float>
 80105e8:	e798      	b.n	801051c <__ssvfiscanf_r+0x204>
 80105ea:	89a3      	ldrh	r3, [r4, #12]
 80105ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80105f0:	bf18      	it	ne
 80105f2:	f04f 30ff 	movne.w	r0, #4294967295
 80105f6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80105fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105fe:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010600:	e7f9      	b.n	80105f6 <__ssvfiscanf_r+0x2de>
 8010602:	bf00      	nop
 8010604:	0800ccf1 	.word	0x0800ccf1

08010608 <_scanf_chars>:
 8010608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801060c:	4615      	mov	r5, r2
 801060e:	688a      	ldr	r2, [r1, #8]
 8010610:	4680      	mov	r8, r0
 8010612:	460c      	mov	r4, r1
 8010614:	b932      	cbnz	r2, 8010624 <_scanf_chars+0x1c>
 8010616:	698a      	ldr	r2, [r1, #24]
 8010618:	2a00      	cmp	r2, #0
 801061a:	bf0c      	ite	eq
 801061c:	2201      	moveq	r2, #1
 801061e:	f04f 32ff 	movne.w	r2, #4294967295
 8010622:	608a      	str	r2, [r1, #8]
 8010624:	6822      	ldr	r2, [r4, #0]
 8010626:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80106b8 <_scanf_chars+0xb0>
 801062a:	06d1      	lsls	r1, r2, #27
 801062c:	bf5f      	itttt	pl
 801062e:	681a      	ldrpl	r2, [r3, #0]
 8010630:	1d11      	addpl	r1, r2, #4
 8010632:	6019      	strpl	r1, [r3, #0]
 8010634:	6816      	ldrpl	r6, [r2, #0]
 8010636:	2700      	movs	r7, #0
 8010638:	69a0      	ldr	r0, [r4, #24]
 801063a:	b188      	cbz	r0, 8010660 <_scanf_chars+0x58>
 801063c:	2801      	cmp	r0, #1
 801063e:	d107      	bne.n	8010650 <_scanf_chars+0x48>
 8010640:	682a      	ldr	r2, [r5, #0]
 8010642:	7811      	ldrb	r1, [r2, #0]
 8010644:	6962      	ldr	r2, [r4, #20]
 8010646:	5c52      	ldrb	r2, [r2, r1]
 8010648:	b952      	cbnz	r2, 8010660 <_scanf_chars+0x58>
 801064a:	2f00      	cmp	r7, #0
 801064c:	d031      	beq.n	80106b2 <_scanf_chars+0xaa>
 801064e:	e022      	b.n	8010696 <_scanf_chars+0x8e>
 8010650:	2802      	cmp	r0, #2
 8010652:	d120      	bne.n	8010696 <_scanf_chars+0x8e>
 8010654:	682b      	ldr	r3, [r5, #0]
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	f813 3009 	ldrb.w	r3, [r3, r9]
 801065c:	071b      	lsls	r3, r3, #28
 801065e:	d41a      	bmi.n	8010696 <_scanf_chars+0x8e>
 8010660:	6823      	ldr	r3, [r4, #0]
 8010662:	06da      	lsls	r2, r3, #27
 8010664:	bf5e      	ittt	pl
 8010666:	682b      	ldrpl	r3, [r5, #0]
 8010668:	781b      	ldrbpl	r3, [r3, #0]
 801066a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801066e:	682a      	ldr	r2, [r5, #0]
 8010670:	686b      	ldr	r3, [r5, #4]
 8010672:	3201      	adds	r2, #1
 8010674:	602a      	str	r2, [r5, #0]
 8010676:	68a2      	ldr	r2, [r4, #8]
 8010678:	3b01      	subs	r3, #1
 801067a:	3a01      	subs	r2, #1
 801067c:	606b      	str	r3, [r5, #4]
 801067e:	3701      	adds	r7, #1
 8010680:	60a2      	str	r2, [r4, #8]
 8010682:	b142      	cbz	r2, 8010696 <_scanf_chars+0x8e>
 8010684:	2b00      	cmp	r3, #0
 8010686:	dcd7      	bgt.n	8010638 <_scanf_chars+0x30>
 8010688:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801068c:	4629      	mov	r1, r5
 801068e:	4640      	mov	r0, r8
 8010690:	4798      	blx	r3
 8010692:	2800      	cmp	r0, #0
 8010694:	d0d0      	beq.n	8010638 <_scanf_chars+0x30>
 8010696:	6823      	ldr	r3, [r4, #0]
 8010698:	f013 0310 	ands.w	r3, r3, #16
 801069c:	d105      	bne.n	80106aa <_scanf_chars+0xa2>
 801069e:	68e2      	ldr	r2, [r4, #12]
 80106a0:	3201      	adds	r2, #1
 80106a2:	60e2      	str	r2, [r4, #12]
 80106a4:	69a2      	ldr	r2, [r4, #24]
 80106a6:	b102      	cbz	r2, 80106aa <_scanf_chars+0xa2>
 80106a8:	7033      	strb	r3, [r6, #0]
 80106aa:	6923      	ldr	r3, [r4, #16]
 80106ac:	443b      	add	r3, r7
 80106ae:	6123      	str	r3, [r4, #16]
 80106b0:	2000      	movs	r0, #0
 80106b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106b6:	bf00      	nop
 80106b8:	080142c9 	.word	0x080142c9

080106bc <_scanf_i>:
 80106bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c0:	4698      	mov	r8, r3
 80106c2:	4b76      	ldr	r3, [pc, #472]	; (801089c <_scanf_i+0x1e0>)
 80106c4:	460c      	mov	r4, r1
 80106c6:	4682      	mov	sl, r0
 80106c8:	4616      	mov	r6, r2
 80106ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80106ce:	b087      	sub	sp, #28
 80106d0:	ab03      	add	r3, sp, #12
 80106d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106d6:	4b72      	ldr	r3, [pc, #456]	; (80108a0 <_scanf_i+0x1e4>)
 80106d8:	69a1      	ldr	r1, [r4, #24]
 80106da:	4a72      	ldr	r2, [pc, #456]	; (80108a4 <_scanf_i+0x1e8>)
 80106dc:	2903      	cmp	r1, #3
 80106de:	bf18      	it	ne
 80106e0:	461a      	movne	r2, r3
 80106e2:	68a3      	ldr	r3, [r4, #8]
 80106e4:	9201      	str	r2, [sp, #4]
 80106e6:	1e5a      	subs	r2, r3, #1
 80106e8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80106ec:	bf88      	it	hi
 80106ee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80106f2:	4627      	mov	r7, r4
 80106f4:	bf82      	ittt	hi
 80106f6:	eb03 0905 	addhi.w	r9, r3, r5
 80106fa:	f240 135d 	movwhi	r3, #349	; 0x15d
 80106fe:	60a3      	strhi	r3, [r4, #8]
 8010700:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010704:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010708:	bf98      	it	ls
 801070a:	f04f 0900 	movls.w	r9, #0
 801070e:	6023      	str	r3, [r4, #0]
 8010710:	463d      	mov	r5, r7
 8010712:	f04f 0b00 	mov.w	fp, #0
 8010716:	6831      	ldr	r1, [r6, #0]
 8010718:	ab03      	add	r3, sp, #12
 801071a:	7809      	ldrb	r1, [r1, #0]
 801071c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010720:	2202      	movs	r2, #2
 8010722:	f7ef fd75 	bl	8000210 <memchr>
 8010726:	b328      	cbz	r0, 8010774 <_scanf_i+0xb8>
 8010728:	f1bb 0f01 	cmp.w	fp, #1
 801072c:	d159      	bne.n	80107e2 <_scanf_i+0x126>
 801072e:	6862      	ldr	r2, [r4, #4]
 8010730:	b92a      	cbnz	r2, 801073e <_scanf_i+0x82>
 8010732:	6822      	ldr	r2, [r4, #0]
 8010734:	2308      	movs	r3, #8
 8010736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801073a:	6063      	str	r3, [r4, #4]
 801073c:	6022      	str	r2, [r4, #0]
 801073e:	6822      	ldr	r2, [r4, #0]
 8010740:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010744:	6022      	str	r2, [r4, #0]
 8010746:	68a2      	ldr	r2, [r4, #8]
 8010748:	1e51      	subs	r1, r2, #1
 801074a:	60a1      	str	r1, [r4, #8]
 801074c:	b192      	cbz	r2, 8010774 <_scanf_i+0xb8>
 801074e:	6832      	ldr	r2, [r6, #0]
 8010750:	1c51      	adds	r1, r2, #1
 8010752:	6031      	str	r1, [r6, #0]
 8010754:	7812      	ldrb	r2, [r2, #0]
 8010756:	f805 2b01 	strb.w	r2, [r5], #1
 801075a:	6872      	ldr	r2, [r6, #4]
 801075c:	3a01      	subs	r2, #1
 801075e:	2a00      	cmp	r2, #0
 8010760:	6072      	str	r2, [r6, #4]
 8010762:	dc07      	bgt.n	8010774 <_scanf_i+0xb8>
 8010764:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010768:	4631      	mov	r1, r6
 801076a:	4650      	mov	r0, sl
 801076c:	4790      	blx	r2
 801076e:	2800      	cmp	r0, #0
 8010770:	f040 8085 	bne.w	801087e <_scanf_i+0x1c2>
 8010774:	f10b 0b01 	add.w	fp, fp, #1
 8010778:	f1bb 0f03 	cmp.w	fp, #3
 801077c:	d1cb      	bne.n	8010716 <_scanf_i+0x5a>
 801077e:	6863      	ldr	r3, [r4, #4]
 8010780:	b90b      	cbnz	r3, 8010786 <_scanf_i+0xca>
 8010782:	230a      	movs	r3, #10
 8010784:	6063      	str	r3, [r4, #4]
 8010786:	6863      	ldr	r3, [r4, #4]
 8010788:	4947      	ldr	r1, [pc, #284]	; (80108a8 <_scanf_i+0x1ec>)
 801078a:	6960      	ldr	r0, [r4, #20]
 801078c:	1ac9      	subs	r1, r1, r3
 801078e:	f000 f8b7 	bl	8010900 <__sccl>
 8010792:	f04f 0b00 	mov.w	fp, #0
 8010796:	68a3      	ldr	r3, [r4, #8]
 8010798:	6822      	ldr	r2, [r4, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d03d      	beq.n	801081a <_scanf_i+0x15e>
 801079e:	6831      	ldr	r1, [r6, #0]
 80107a0:	6960      	ldr	r0, [r4, #20]
 80107a2:	f891 c000 	ldrb.w	ip, [r1]
 80107a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80107aa:	2800      	cmp	r0, #0
 80107ac:	d035      	beq.n	801081a <_scanf_i+0x15e>
 80107ae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80107b2:	d124      	bne.n	80107fe <_scanf_i+0x142>
 80107b4:	0510      	lsls	r0, r2, #20
 80107b6:	d522      	bpl.n	80107fe <_scanf_i+0x142>
 80107b8:	f10b 0b01 	add.w	fp, fp, #1
 80107bc:	f1b9 0f00 	cmp.w	r9, #0
 80107c0:	d003      	beq.n	80107ca <_scanf_i+0x10e>
 80107c2:	3301      	adds	r3, #1
 80107c4:	f109 39ff 	add.w	r9, r9, #4294967295
 80107c8:	60a3      	str	r3, [r4, #8]
 80107ca:	6873      	ldr	r3, [r6, #4]
 80107cc:	3b01      	subs	r3, #1
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	6073      	str	r3, [r6, #4]
 80107d2:	dd1b      	ble.n	801080c <_scanf_i+0x150>
 80107d4:	6833      	ldr	r3, [r6, #0]
 80107d6:	3301      	adds	r3, #1
 80107d8:	6033      	str	r3, [r6, #0]
 80107da:	68a3      	ldr	r3, [r4, #8]
 80107dc:	3b01      	subs	r3, #1
 80107de:	60a3      	str	r3, [r4, #8]
 80107e0:	e7d9      	b.n	8010796 <_scanf_i+0xda>
 80107e2:	f1bb 0f02 	cmp.w	fp, #2
 80107e6:	d1ae      	bne.n	8010746 <_scanf_i+0x8a>
 80107e8:	6822      	ldr	r2, [r4, #0]
 80107ea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80107ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80107f2:	d1bf      	bne.n	8010774 <_scanf_i+0xb8>
 80107f4:	2310      	movs	r3, #16
 80107f6:	6063      	str	r3, [r4, #4]
 80107f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80107fc:	e7a2      	b.n	8010744 <_scanf_i+0x88>
 80107fe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010802:	6022      	str	r2, [r4, #0]
 8010804:	780b      	ldrb	r3, [r1, #0]
 8010806:	f805 3b01 	strb.w	r3, [r5], #1
 801080a:	e7de      	b.n	80107ca <_scanf_i+0x10e>
 801080c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010810:	4631      	mov	r1, r6
 8010812:	4650      	mov	r0, sl
 8010814:	4798      	blx	r3
 8010816:	2800      	cmp	r0, #0
 8010818:	d0df      	beq.n	80107da <_scanf_i+0x11e>
 801081a:	6823      	ldr	r3, [r4, #0]
 801081c:	05db      	lsls	r3, r3, #23
 801081e:	d50d      	bpl.n	801083c <_scanf_i+0x180>
 8010820:	42bd      	cmp	r5, r7
 8010822:	d909      	bls.n	8010838 <_scanf_i+0x17c>
 8010824:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010828:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801082c:	4632      	mov	r2, r6
 801082e:	4650      	mov	r0, sl
 8010830:	4798      	blx	r3
 8010832:	f105 39ff 	add.w	r9, r5, #4294967295
 8010836:	464d      	mov	r5, r9
 8010838:	42bd      	cmp	r5, r7
 801083a:	d02d      	beq.n	8010898 <_scanf_i+0x1dc>
 801083c:	6822      	ldr	r2, [r4, #0]
 801083e:	f012 0210 	ands.w	r2, r2, #16
 8010842:	d113      	bne.n	801086c <_scanf_i+0x1b0>
 8010844:	702a      	strb	r2, [r5, #0]
 8010846:	6863      	ldr	r3, [r4, #4]
 8010848:	9e01      	ldr	r6, [sp, #4]
 801084a:	4639      	mov	r1, r7
 801084c:	4650      	mov	r0, sl
 801084e:	47b0      	blx	r6
 8010850:	6821      	ldr	r1, [r4, #0]
 8010852:	f8d8 3000 	ldr.w	r3, [r8]
 8010856:	f011 0f20 	tst.w	r1, #32
 801085a:	d013      	beq.n	8010884 <_scanf_i+0x1c8>
 801085c:	1d1a      	adds	r2, r3, #4
 801085e:	f8c8 2000 	str.w	r2, [r8]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	6018      	str	r0, [r3, #0]
 8010866:	68e3      	ldr	r3, [r4, #12]
 8010868:	3301      	adds	r3, #1
 801086a:	60e3      	str	r3, [r4, #12]
 801086c:	1bed      	subs	r5, r5, r7
 801086e:	44ab      	add	fp, r5
 8010870:	6925      	ldr	r5, [r4, #16]
 8010872:	445d      	add	r5, fp
 8010874:	6125      	str	r5, [r4, #16]
 8010876:	2000      	movs	r0, #0
 8010878:	b007      	add	sp, #28
 801087a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801087e:	f04f 0b00 	mov.w	fp, #0
 8010882:	e7ca      	b.n	801081a <_scanf_i+0x15e>
 8010884:	1d1a      	adds	r2, r3, #4
 8010886:	f8c8 2000 	str.w	r2, [r8]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f011 0f01 	tst.w	r1, #1
 8010890:	bf14      	ite	ne
 8010892:	8018      	strhne	r0, [r3, #0]
 8010894:	6018      	streq	r0, [r3, #0]
 8010896:	e7e6      	b.n	8010866 <_scanf_i+0x1aa>
 8010898:	2001      	movs	r0, #1
 801089a:	e7ed      	b.n	8010878 <_scanf_i+0x1bc>
 801089c:	0801422c 	.word	0x0801422c
 80108a0:	08010a7d 	.word	0x08010a7d
 80108a4:	0800dfad 	.word	0x0800dfad
 80108a8:	08014656 	.word	0x08014656

080108ac <_read_r>:
 80108ac:	b538      	push	{r3, r4, r5, lr}
 80108ae:	4d07      	ldr	r5, [pc, #28]	; (80108cc <_read_r+0x20>)
 80108b0:	4604      	mov	r4, r0
 80108b2:	4608      	mov	r0, r1
 80108b4:	4611      	mov	r1, r2
 80108b6:	2200      	movs	r2, #0
 80108b8:	602a      	str	r2, [r5, #0]
 80108ba:	461a      	mov	r2, r3
 80108bc:	f7f5 fa4a 	bl	8005d54 <_read>
 80108c0:	1c43      	adds	r3, r0, #1
 80108c2:	d102      	bne.n	80108ca <_read_r+0x1e>
 80108c4:	682b      	ldr	r3, [r5, #0]
 80108c6:	b103      	cbz	r3, 80108ca <_read_r+0x1e>
 80108c8:	6023      	str	r3, [r4, #0]
 80108ca:	bd38      	pop	{r3, r4, r5, pc}
 80108cc:	2001c4f8 	.word	0x2001c4f8

080108d0 <nan>:
 80108d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80108d8 <nan+0x8>
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	00000000 	.word	0x00000000
 80108dc:	7ff80000 	.word	0x7ff80000

080108e0 <_sbrk_r>:
 80108e0:	b538      	push	{r3, r4, r5, lr}
 80108e2:	4d06      	ldr	r5, [pc, #24]	; (80108fc <_sbrk_r+0x1c>)
 80108e4:	2300      	movs	r3, #0
 80108e6:	4604      	mov	r4, r0
 80108e8:	4608      	mov	r0, r1
 80108ea:	602b      	str	r3, [r5, #0]
 80108ec:	f7f5 faa0 	bl	8005e30 <_sbrk>
 80108f0:	1c43      	adds	r3, r0, #1
 80108f2:	d102      	bne.n	80108fa <_sbrk_r+0x1a>
 80108f4:	682b      	ldr	r3, [r5, #0]
 80108f6:	b103      	cbz	r3, 80108fa <_sbrk_r+0x1a>
 80108f8:	6023      	str	r3, [r4, #0]
 80108fa:	bd38      	pop	{r3, r4, r5, pc}
 80108fc:	2001c4f8 	.word	0x2001c4f8

08010900 <__sccl>:
 8010900:	b570      	push	{r4, r5, r6, lr}
 8010902:	780b      	ldrb	r3, [r1, #0]
 8010904:	4604      	mov	r4, r0
 8010906:	2b5e      	cmp	r3, #94	; 0x5e
 8010908:	bf0b      	itete	eq
 801090a:	784b      	ldrbeq	r3, [r1, #1]
 801090c:	1c48      	addne	r0, r1, #1
 801090e:	1c88      	addeq	r0, r1, #2
 8010910:	2200      	movne	r2, #0
 8010912:	bf08      	it	eq
 8010914:	2201      	moveq	r2, #1
 8010916:	1e61      	subs	r1, r4, #1
 8010918:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801091c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010920:	42a9      	cmp	r1, r5
 8010922:	d1fb      	bne.n	801091c <__sccl+0x1c>
 8010924:	b90b      	cbnz	r3, 801092a <__sccl+0x2a>
 8010926:	3801      	subs	r0, #1
 8010928:	bd70      	pop	{r4, r5, r6, pc}
 801092a:	f082 0201 	eor.w	r2, r2, #1
 801092e:	54e2      	strb	r2, [r4, r3]
 8010930:	4605      	mov	r5, r0
 8010932:	4628      	mov	r0, r5
 8010934:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010938:	292d      	cmp	r1, #45	; 0x2d
 801093a:	d006      	beq.n	801094a <__sccl+0x4a>
 801093c:	295d      	cmp	r1, #93	; 0x5d
 801093e:	d0f3      	beq.n	8010928 <__sccl+0x28>
 8010940:	b909      	cbnz	r1, 8010946 <__sccl+0x46>
 8010942:	4628      	mov	r0, r5
 8010944:	e7f0      	b.n	8010928 <__sccl+0x28>
 8010946:	460b      	mov	r3, r1
 8010948:	e7f1      	b.n	801092e <__sccl+0x2e>
 801094a:	786e      	ldrb	r6, [r5, #1]
 801094c:	2e5d      	cmp	r6, #93	; 0x5d
 801094e:	d0fa      	beq.n	8010946 <__sccl+0x46>
 8010950:	42b3      	cmp	r3, r6
 8010952:	dcf8      	bgt.n	8010946 <__sccl+0x46>
 8010954:	3502      	adds	r5, #2
 8010956:	4619      	mov	r1, r3
 8010958:	3101      	adds	r1, #1
 801095a:	428e      	cmp	r6, r1
 801095c:	5462      	strb	r2, [r4, r1]
 801095e:	dcfb      	bgt.n	8010958 <__sccl+0x58>
 8010960:	1af1      	subs	r1, r6, r3
 8010962:	3901      	subs	r1, #1
 8010964:	1c58      	adds	r0, r3, #1
 8010966:	42b3      	cmp	r3, r6
 8010968:	bfa8      	it	ge
 801096a:	2100      	movge	r1, #0
 801096c:	1843      	adds	r3, r0, r1
 801096e:	e7e0      	b.n	8010932 <__sccl+0x32>

08010970 <strncmp>:
 8010970:	b510      	push	{r4, lr}
 8010972:	b17a      	cbz	r2, 8010994 <strncmp+0x24>
 8010974:	4603      	mov	r3, r0
 8010976:	3901      	subs	r1, #1
 8010978:	1884      	adds	r4, r0, r2
 801097a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801097e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010982:	4290      	cmp	r0, r2
 8010984:	d101      	bne.n	801098a <strncmp+0x1a>
 8010986:	42a3      	cmp	r3, r4
 8010988:	d101      	bne.n	801098e <strncmp+0x1e>
 801098a:	1a80      	subs	r0, r0, r2
 801098c:	bd10      	pop	{r4, pc}
 801098e:	2800      	cmp	r0, #0
 8010990:	d1f3      	bne.n	801097a <strncmp+0xa>
 8010992:	e7fa      	b.n	801098a <strncmp+0x1a>
 8010994:	4610      	mov	r0, r2
 8010996:	e7f9      	b.n	801098c <strncmp+0x1c>

08010998 <_strtoul_l.constprop.0>:
 8010998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801099c:	4f36      	ldr	r7, [pc, #216]	; (8010a78 <_strtoul_l.constprop.0+0xe0>)
 801099e:	4686      	mov	lr, r0
 80109a0:	460d      	mov	r5, r1
 80109a2:	4628      	mov	r0, r5
 80109a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80109a8:	5de6      	ldrb	r6, [r4, r7]
 80109aa:	f016 0608 	ands.w	r6, r6, #8
 80109ae:	d1f8      	bne.n	80109a2 <_strtoul_l.constprop.0+0xa>
 80109b0:	2c2d      	cmp	r4, #45	; 0x2d
 80109b2:	d12f      	bne.n	8010a14 <_strtoul_l.constprop.0+0x7c>
 80109b4:	782c      	ldrb	r4, [r5, #0]
 80109b6:	2601      	movs	r6, #1
 80109b8:	1c85      	adds	r5, r0, #2
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d057      	beq.n	8010a6e <_strtoul_l.constprop.0+0xd6>
 80109be:	2b10      	cmp	r3, #16
 80109c0:	d109      	bne.n	80109d6 <_strtoul_l.constprop.0+0x3e>
 80109c2:	2c30      	cmp	r4, #48	; 0x30
 80109c4:	d107      	bne.n	80109d6 <_strtoul_l.constprop.0+0x3e>
 80109c6:	7828      	ldrb	r0, [r5, #0]
 80109c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80109cc:	2858      	cmp	r0, #88	; 0x58
 80109ce:	d149      	bne.n	8010a64 <_strtoul_l.constprop.0+0xcc>
 80109d0:	786c      	ldrb	r4, [r5, #1]
 80109d2:	2310      	movs	r3, #16
 80109d4:	3502      	adds	r5, #2
 80109d6:	f04f 38ff 	mov.w	r8, #4294967295
 80109da:	2700      	movs	r7, #0
 80109dc:	fbb8 f8f3 	udiv	r8, r8, r3
 80109e0:	fb03 f908 	mul.w	r9, r3, r8
 80109e4:	ea6f 0909 	mvn.w	r9, r9
 80109e8:	4638      	mov	r0, r7
 80109ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80109ee:	f1bc 0f09 	cmp.w	ip, #9
 80109f2:	d814      	bhi.n	8010a1e <_strtoul_l.constprop.0+0x86>
 80109f4:	4664      	mov	r4, ip
 80109f6:	42a3      	cmp	r3, r4
 80109f8:	dd22      	ble.n	8010a40 <_strtoul_l.constprop.0+0xa8>
 80109fa:	2f00      	cmp	r7, #0
 80109fc:	db1d      	blt.n	8010a3a <_strtoul_l.constprop.0+0xa2>
 80109fe:	4580      	cmp	r8, r0
 8010a00:	d31b      	bcc.n	8010a3a <_strtoul_l.constprop.0+0xa2>
 8010a02:	d101      	bne.n	8010a08 <_strtoul_l.constprop.0+0x70>
 8010a04:	45a1      	cmp	r9, r4
 8010a06:	db18      	blt.n	8010a3a <_strtoul_l.constprop.0+0xa2>
 8010a08:	fb00 4003 	mla	r0, r0, r3, r4
 8010a0c:	2701      	movs	r7, #1
 8010a0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a12:	e7ea      	b.n	80109ea <_strtoul_l.constprop.0+0x52>
 8010a14:	2c2b      	cmp	r4, #43	; 0x2b
 8010a16:	bf04      	itt	eq
 8010a18:	782c      	ldrbeq	r4, [r5, #0]
 8010a1a:	1c85      	addeq	r5, r0, #2
 8010a1c:	e7cd      	b.n	80109ba <_strtoul_l.constprop.0+0x22>
 8010a1e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010a22:	f1bc 0f19 	cmp.w	ip, #25
 8010a26:	d801      	bhi.n	8010a2c <_strtoul_l.constprop.0+0x94>
 8010a28:	3c37      	subs	r4, #55	; 0x37
 8010a2a:	e7e4      	b.n	80109f6 <_strtoul_l.constprop.0+0x5e>
 8010a2c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010a30:	f1bc 0f19 	cmp.w	ip, #25
 8010a34:	d804      	bhi.n	8010a40 <_strtoul_l.constprop.0+0xa8>
 8010a36:	3c57      	subs	r4, #87	; 0x57
 8010a38:	e7dd      	b.n	80109f6 <_strtoul_l.constprop.0+0x5e>
 8010a3a:	f04f 37ff 	mov.w	r7, #4294967295
 8010a3e:	e7e6      	b.n	8010a0e <_strtoul_l.constprop.0+0x76>
 8010a40:	2f00      	cmp	r7, #0
 8010a42:	da07      	bge.n	8010a54 <_strtoul_l.constprop.0+0xbc>
 8010a44:	2322      	movs	r3, #34	; 0x22
 8010a46:	f8ce 3000 	str.w	r3, [lr]
 8010a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a4e:	b932      	cbnz	r2, 8010a5e <_strtoul_l.constprop.0+0xc6>
 8010a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a54:	b106      	cbz	r6, 8010a58 <_strtoul_l.constprop.0+0xc0>
 8010a56:	4240      	negs	r0, r0
 8010a58:	2a00      	cmp	r2, #0
 8010a5a:	d0f9      	beq.n	8010a50 <_strtoul_l.constprop.0+0xb8>
 8010a5c:	b107      	cbz	r7, 8010a60 <_strtoul_l.constprop.0+0xc8>
 8010a5e:	1e69      	subs	r1, r5, #1
 8010a60:	6011      	str	r1, [r2, #0]
 8010a62:	e7f5      	b.n	8010a50 <_strtoul_l.constprop.0+0xb8>
 8010a64:	2430      	movs	r4, #48	; 0x30
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d1b5      	bne.n	80109d6 <_strtoul_l.constprop.0+0x3e>
 8010a6a:	2308      	movs	r3, #8
 8010a6c:	e7b3      	b.n	80109d6 <_strtoul_l.constprop.0+0x3e>
 8010a6e:	2c30      	cmp	r4, #48	; 0x30
 8010a70:	d0a9      	beq.n	80109c6 <_strtoul_l.constprop.0+0x2e>
 8010a72:	230a      	movs	r3, #10
 8010a74:	e7af      	b.n	80109d6 <_strtoul_l.constprop.0+0x3e>
 8010a76:	bf00      	nop
 8010a78:	080142c9 	.word	0x080142c9

08010a7c <_strtoul_r>:
 8010a7c:	f7ff bf8c 	b.w	8010998 <_strtoul_l.constprop.0>

08010a80 <__submore>:
 8010a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a84:	460c      	mov	r4, r1
 8010a86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a8c:	4299      	cmp	r1, r3
 8010a8e:	d11d      	bne.n	8010acc <__submore+0x4c>
 8010a90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010a94:	f7ff fa16 	bl	800fec4 <_malloc_r>
 8010a98:	b918      	cbnz	r0, 8010aa2 <__submore+0x22>
 8010a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aa6:	63a3      	str	r3, [r4, #56]	; 0x38
 8010aa8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010aac:	6360      	str	r0, [r4, #52]	; 0x34
 8010aae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010ab2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010ab6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010aba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010abe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010ac2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010ac6:	6020      	str	r0, [r4, #0]
 8010ac8:	2000      	movs	r0, #0
 8010aca:	e7e8      	b.n	8010a9e <__submore+0x1e>
 8010acc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010ace:	0077      	lsls	r7, r6, #1
 8010ad0:	463a      	mov	r2, r7
 8010ad2:	f000 fa2d 	bl	8010f30 <_realloc_r>
 8010ad6:	4605      	mov	r5, r0
 8010ad8:	2800      	cmp	r0, #0
 8010ada:	d0de      	beq.n	8010a9a <__submore+0x1a>
 8010adc:	eb00 0806 	add.w	r8, r0, r6
 8010ae0:	4601      	mov	r1, r0
 8010ae2:	4632      	mov	r2, r6
 8010ae4:	4640      	mov	r0, r8
 8010ae6:	f7fb fc83 	bl	800c3f0 <memcpy>
 8010aea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010aee:	f8c4 8000 	str.w	r8, [r4]
 8010af2:	e7e9      	b.n	8010ac8 <__submore+0x48>

08010af4 <__ascii_wctomb>:
 8010af4:	b149      	cbz	r1, 8010b0a <__ascii_wctomb+0x16>
 8010af6:	2aff      	cmp	r2, #255	; 0xff
 8010af8:	bf85      	ittet	hi
 8010afa:	238a      	movhi	r3, #138	; 0x8a
 8010afc:	6003      	strhi	r3, [r0, #0]
 8010afe:	700a      	strbls	r2, [r1, #0]
 8010b00:	f04f 30ff 	movhi.w	r0, #4294967295
 8010b04:	bf98      	it	ls
 8010b06:	2001      	movls	r0, #1
 8010b08:	4770      	bx	lr
 8010b0a:	4608      	mov	r0, r1
 8010b0c:	4770      	bx	lr
	...

08010b10 <__assert_func>:
 8010b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b12:	4614      	mov	r4, r2
 8010b14:	461a      	mov	r2, r3
 8010b16:	4b09      	ldr	r3, [pc, #36]	; (8010b3c <__assert_func+0x2c>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	4605      	mov	r5, r0
 8010b1c:	68d8      	ldr	r0, [r3, #12]
 8010b1e:	b14c      	cbz	r4, 8010b34 <__assert_func+0x24>
 8010b20:	4b07      	ldr	r3, [pc, #28]	; (8010b40 <__assert_func+0x30>)
 8010b22:	9100      	str	r1, [sp, #0]
 8010b24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b28:	4906      	ldr	r1, [pc, #24]	; (8010b44 <__assert_func+0x34>)
 8010b2a:	462b      	mov	r3, r5
 8010b2c:	f000 f9a6 	bl	8010e7c <fiprintf>
 8010b30:	f000 fc46 	bl	80113c0 <abort>
 8010b34:	4b04      	ldr	r3, [pc, #16]	; (8010b48 <__assert_func+0x38>)
 8010b36:	461c      	mov	r4, r3
 8010b38:	e7f3      	b.n	8010b22 <__assert_func+0x12>
 8010b3a:	bf00      	nop
 8010b3c:	20000040 	.word	0x20000040
 8010b40:	08014658 	.word	0x08014658
 8010b44:	08014665 	.word	0x08014665
 8010b48:	08014693 	.word	0x08014693

08010b4c <__sflush_r>:
 8010b4c:	898a      	ldrh	r2, [r1, #12]
 8010b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b52:	4605      	mov	r5, r0
 8010b54:	0710      	lsls	r0, r2, #28
 8010b56:	460c      	mov	r4, r1
 8010b58:	d458      	bmi.n	8010c0c <__sflush_r+0xc0>
 8010b5a:	684b      	ldr	r3, [r1, #4]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	dc05      	bgt.n	8010b6c <__sflush_r+0x20>
 8010b60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	dc02      	bgt.n	8010b6c <__sflush_r+0x20>
 8010b66:	2000      	movs	r0, #0
 8010b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b6e:	2e00      	cmp	r6, #0
 8010b70:	d0f9      	beq.n	8010b66 <__sflush_r+0x1a>
 8010b72:	2300      	movs	r3, #0
 8010b74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010b78:	682f      	ldr	r7, [r5, #0]
 8010b7a:	602b      	str	r3, [r5, #0]
 8010b7c:	d032      	beq.n	8010be4 <__sflush_r+0x98>
 8010b7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010b80:	89a3      	ldrh	r3, [r4, #12]
 8010b82:	075a      	lsls	r2, r3, #29
 8010b84:	d505      	bpl.n	8010b92 <__sflush_r+0x46>
 8010b86:	6863      	ldr	r3, [r4, #4]
 8010b88:	1ac0      	subs	r0, r0, r3
 8010b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b8c:	b10b      	cbz	r3, 8010b92 <__sflush_r+0x46>
 8010b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010b90:	1ac0      	subs	r0, r0, r3
 8010b92:	2300      	movs	r3, #0
 8010b94:	4602      	mov	r2, r0
 8010b96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b98:	6a21      	ldr	r1, [r4, #32]
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	47b0      	blx	r6
 8010b9e:	1c43      	adds	r3, r0, #1
 8010ba0:	89a3      	ldrh	r3, [r4, #12]
 8010ba2:	d106      	bne.n	8010bb2 <__sflush_r+0x66>
 8010ba4:	6829      	ldr	r1, [r5, #0]
 8010ba6:	291d      	cmp	r1, #29
 8010ba8:	d82c      	bhi.n	8010c04 <__sflush_r+0xb8>
 8010baa:	4a2a      	ldr	r2, [pc, #168]	; (8010c54 <__sflush_r+0x108>)
 8010bac:	40ca      	lsrs	r2, r1
 8010bae:	07d6      	lsls	r6, r2, #31
 8010bb0:	d528      	bpl.n	8010c04 <__sflush_r+0xb8>
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	6062      	str	r2, [r4, #4]
 8010bb6:	04d9      	lsls	r1, r3, #19
 8010bb8:	6922      	ldr	r2, [r4, #16]
 8010bba:	6022      	str	r2, [r4, #0]
 8010bbc:	d504      	bpl.n	8010bc8 <__sflush_r+0x7c>
 8010bbe:	1c42      	adds	r2, r0, #1
 8010bc0:	d101      	bne.n	8010bc6 <__sflush_r+0x7a>
 8010bc2:	682b      	ldr	r3, [r5, #0]
 8010bc4:	b903      	cbnz	r3, 8010bc8 <__sflush_r+0x7c>
 8010bc6:	6560      	str	r0, [r4, #84]	; 0x54
 8010bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bca:	602f      	str	r7, [r5, #0]
 8010bcc:	2900      	cmp	r1, #0
 8010bce:	d0ca      	beq.n	8010b66 <__sflush_r+0x1a>
 8010bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010bd4:	4299      	cmp	r1, r3
 8010bd6:	d002      	beq.n	8010bde <__sflush_r+0x92>
 8010bd8:	4628      	mov	r0, r5
 8010bda:	f7ff f907 	bl	800fdec <_free_r>
 8010bde:	2000      	movs	r0, #0
 8010be0:	6360      	str	r0, [r4, #52]	; 0x34
 8010be2:	e7c1      	b.n	8010b68 <__sflush_r+0x1c>
 8010be4:	6a21      	ldr	r1, [r4, #32]
 8010be6:	2301      	movs	r3, #1
 8010be8:	4628      	mov	r0, r5
 8010bea:	47b0      	blx	r6
 8010bec:	1c41      	adds	r1, r0, #1
 8010bee:	d1c7      	bne.n	8010b80 <__sflush_r+0x34>
 8010bf0:	682b      	ldr	r3, [r5, #0]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d0c4      	beq.n	8010b80 <__sflush_r+0x34>
 8010bf6:	2b1d      	cmp	r3, #29
 8010bf8:	d001      	beq.n	8010bfe <__sflush_r+0xb2>
 8010bfa:	2b16      	cmp	r3, #22
 8010bfc:	d101      	bne.n	8010c02 <__sflush_r+0xb6>
 8010bfe:	602f      	str	r7, [r5, #0]
 8010c00:	e7b1      	b.n	8010b66 <__sflush_r+0x1a>
 8010c02:	89a3      	ldrh	r3, [r4, #12]
 8010c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c08:	81a3      	strh	r3, [r4, #12]
 8010c0a:	e7ad      	b.n	8010b68 <__sflush_r+0x1c>
 8010c0c:	690f      	ldr	r7, [r1, #16]
 8010c0e:	2f00      	cmp	r7, #0
 8010c10:	d0a9      	beq.n	8010b66 <__sflush_r+0x1a>
 8010c12:	0793      	lsls	r3, r2, #30
 8010c14:	680e      	ldr	r6, [r1, #0]
 8010c16:	bf08      	it	eq
 8010c18:	694b      	ldreq	r3, [r1, #20]
 8010c1a:	600f      	str	r7, [r1, #0]
 8010c1c:	bf18      	it	ne
 8010c1e:	2300      	movne	r3, #0
 8010c20:	eba6 0807 	sub.w	r8, r6, r7
 8010c24:	608b      	str	r3, [r1, #8]
 8010c26:	f1b8 0f00 	cmp.w	r8, #0
 8010c2a:	dd9c      	ble.n	8010b66 <__sflush_r+0x1a>
 8010c2c:	6a21      	ldr	r1, [r4, #32]
 8010c2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010c30:	4643      	mov	r3, r8
 8010c32:	463a      	mov	r2, r7
 8010c34:	4628      	mov	r0, r5
 8010c36:	47b0      	blx	r6
 8010c38:	2800      	cmp	r0, #0
 8010c3a:	dc06      	bgt.n	8010c4a <__sflush_r+0xfe>
 8010c3c:	89a3      	ldrh	r3, [r4, #12]
 8010c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c42:	81a3      	strh	r3, [r4, #12]
 8010c44:	f04f 30ff 	mov.w	r0, #4294967295
 8010c48:	e78e      	b.n	8010b68 <__sflush_r+0x1c>
 8010c4a:	4407      	add	r7, r0
 8010c4c:	eba8 0800 	sub.w	r8, r8, r0
 8010c50:	e7e9      	b.n	8010c26 <__sflush_r+0xda>
 8010c52:	bf00      	nop
 8010c54:	20400001 	.word	0x20400001

08010c58 <_fflush_r>:
 8010c58:	b538      	push	{r3, r4, r5, lr}
 8010c5a:	690b      	ldr	r3, [r1, #16]
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	460c      	mov	r4, r1
 8010c60:	b913      	cbnz	r3, 8010c68 <_fflush_r+0x10>
 8010c62:	2500      	movs	r5, #0
 8010c64:	4628      	mov	r0, r5
 8010c66:	bd38      	pop	{r3, r4, r5, pc}
 8010c68:	b118      	cbz	r0, 8010c72 <_fflush_r+0x1a>
 8010c6a:	6983      	ldr	r3, [r0, #24]
 8010c6c:	b90b      	cbnz	r3, 8010c72 <_fflush_r+0x1a>
 8010c6e:	f000 f887 	bl	8010d80 <__sinit>
 8010c72:	4b14      	ldr	r3, [pc, #80]	; (8010cc4 <_fflush_r+0x6c>)
 8010c74:	429c      	cmp	r4, r3
 8010c76:	d11b      	bne.n	8010cb0 <_fflush_r+0x58>
 8010c78:	686c      	ldr	r4, [r5, #4]
 8010c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d0ef      	beq.n	8010c62 <_fflush_r+0xa>
 8010c82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010c84:	07d0      	lsls	r0, r2, #31
 8010c86:	d404      	bmi.n	8010c92 <_fflush_r+0x3a>
 8010c88:	0599      	lsls	r1, r3, #22
 8010c8a:	d402      	bmi.n	8010c92 <_fflush_r+0x3a>
 8010c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c8e:	f000 f927 	bl	8010ee0 <__retarget_lock_acquire_recursive>
 8010c92:	4628      	mov	r0, r5
 8010c94:	4621      	mov	r1, r4
 8010c96:	f7ff ff59 	bl	8010b4c <__sflush_r>
 8010c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c9c:	07da      	lsls	r2, r3, #31
 8010c9e:	4605      	mov	r5, r0
 8010ca0:	d4e0      	bmi.n	8010c64 <_fflush_r+0xc>
 8010ca2:	89a3      	ldrh	r3, [r4, #12]
 8010ca4:	059b      	lsls	r3, r3, #22
 8010ca6:	d4dd      	bmi.n	8010c64 <_fflush_r+0xc>
 8010ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010caa:	f000 f91a 	bl	8010ee2 <__retarget_lock_release_recursive>
 8010cae:	e7d9      	b.n	8010c64 <_fflush_r+0xc>
 8010cb0:	4b05      	ldr	r3, [pc, #20]	; (8010cc8 <_fflush_r+0x70>)
 8010cb2:	429c      	cmp	r4, r3
 8010cb4:	d101      	bne.n	8010cba <_fflush_r+0x62>
 8010cb6:	68ac      	ldr	r4, [r5, #8]
 8010cb8:	e7df      	b.n	8010c7a <_fflush_r+0x22>
 8010cba:	4b04      	ldr	r3, [pc, #16]	; (8010ccc <_fflush_r+0x74>)
 8010cbc:	429c      	cmp	r4, r3
 8010cbe:	bf08      	it	eq
 8010cc0:	68ec      	ldreq	r4, [r5, #12]
 8010cc2:	e7da      	b.n	8010c7a <_fflush_r+0x22>
 8010cc4:	080146b4 	.word	0x080146b4
 8010cc8:	080146d4 	.word	0x080146d4
 8010ccc:	08014694 	.word	0x08014694

08010cd0 <std>:
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	b510      	push	{r4, lr}
 8010cd4:	4604      	mov	r4, r0
 8010cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8010cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010cde:	6083      	str	r3, [r0, #8]
 8010ce0:	8181      	strh	r1, [r0, #12]
 8010ce2:	6643      	str	r3, [r0, #100]	; 0x64
 8010ce4:	81c2      	strh	r2, [r0, #14]
 8010ce6:	6183      	str	r3, [r0, #24]
 8010ce8:	4619      	mov	r1, r3
 8010cea:	2208      	movs	r2, #8
 8010cec:	305c      	adds	r0, #92	; 0x5c
 8010cee:	f7fb fb8d 	bl	800c40c <memset>
 8010cf2:	4b05      	ldr	r3, [pc, #20]	; (8010d08 <std+0x38>)
 8010cf4:	6263      	str	r3, [r4, #36]	; 0x24
 8010cf6:	4b05      	ldr	r3, [pc, #20]	; (8010d0c <std+0x3c>)
 8010cf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8010cfa:	4b05      	ldr	r3, [pc, #20]	; (8010d10 <std+0x40>)
 8010cfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010cfe:	4b05      	ldr	r3, [pc, #20]	; (8010d14 <std+0x44>)
 8010d00:	6224      	str	r4, [r4, #32]
 8010d02:	6323      	str	r3, [r4, #48]	; 0x30
 8010d04:	bd10      	pop	{r4, pc}
 8010d06:	bf00      	nop
 8010d08:	0800d1b5 	.word	0x0800d1b5
 8010d0c:	0800d1db 	.word	0x0800d1db
 8010d10:	0800d213 	.word	0x0800d213
 8010d14:	0800d237 	.word	0x0800d237

08010d18 <_cleanup_r>:
 8010d18:	4901      	ldr	r1, [pc, #4]	; (8010d20 <_cleanup_r+0x8>)
 8010d1a:	f000 b8c1 	b.w	8010ea0 <_fwalk_reent>
 8010d1e:	bf00      	nop
 8010d20:	08010c59 	.word	0x08010c59

08010d24 <__sfmoreglue>:
 8010d24:	b570      	push	{r4, r5, r6, lr}
 8010d26:	2268      	movs	r2, #104	; 0x68
 8010d28:	1e4d      	subs	r5, r1, #1
 8010d2a:	4355      	muls	r5, r2
 8010d2c:	460e      	mov	r6, r1
 8010d2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010d32:	f7ff f8c7 	bl	800fec4 <_malloc_r>
 8010d36:	4604      	mov	r4, r0
 8010d38:	b140      	cbz	r0, 8010d4c <__sfmoreglue+0x28>
 8010d3a:	2100      	movs	r1, #0
 8010d3c:	e9c0 1600 	strd	r1, r6, [r0]
 8010d40:	300c      	adds	r0, #12
 8010d42:	60a0      	str	r0, [r4, #8]
 8010d44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010d48:	f7fb fb60 	bl	800c40c <memset>
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	bd70      	pop	{r4, r5, r6, pc}

08010d50 <__sfp_lock_acquire>:
 8010d50:	4801      	ldr	r0, [pc, #4]	; (8010d58 <__sfp_lock_acquire+0x8>)
 8010d52:	f000 b8c5 	b.w	8010ee0 <__retarget_lock_acquire_recursive>
 8010d56:	bf00      	nop
 8010d58:	2001c4fd 	.word	0x2001c4fd

08010d5c <__sfp_lock_release>:
 8010d5c:	4801      	ldr	r0, [pc, #4]	; (8010d64 <__sfp_lock_release+0x8>)
 8010d5e:	f000 b8c0 	b.w	8010ee2 <__retarget_lock_release_recursive>
 8010d62:	bf00      	nop
 8010d64:	2001c4fd 	.word	0x2001c4fd

08010d68 <__sinit_lock_acquire>:
 8010d68:	4801      	ldr	r0, [pc, #4]	; (8010d70 <__sinit_lock_acquire+0x8>)
 8010d6a:	f000 b8b9 	b.w	8010ee0 <__retarget_lock_acquire_recursive>
 8010d6e:	bf00      	nop
 8010d70:	2001c4fe 	.word	0x2001c4fe

08010d74 <__sinit_lock_release>:
 8010d74:	4801      	ldr	r0, [pc, #4]	; (8010d7c <__sinit_lock_release+0x8>)
 8010d76:	f000 b8b4 	b.w	8010ee2 <__retarget_lock_release_recursive>
 8010d7a:	bf00      	nop
 8010d7c:	2001c4fe 	.word	0x2001c4fe

08010d80 <__sinit>:
 8010d80:	b510      	push	{r4, lr}
 8010d82:	4604      	mov	r4, r0
 8010d84:	f7ff fff0 	bl	8010d68 <__sinit_lock_acquire>
 8010d88:	69a3      	ldr	r3, [r4, #24]
 8010d8a:	b11b      	cbz	r3, 8010d94 <__sinit+0x14>
 8010d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d90:	f7ff bff0 	b.w	8010d74 <__sinit_lock_release>
 8010d94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010d98:	6523      	str	r3, [r4, #80]	; 0x50
 8010d9a:	4b13      	ldr	r3, [pc, #76]	; (8010de8 <__sinit+0x68>)
 8010d9c:	4a13      	ldr	r2, [pc, #76]	; (8010dec <__sinit+0x6c>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	62a2      	str	r2, [r4, #40]	; 0x28
 8010da2:	42a3      	cmp	r3, r4
 8010da4:	bf04      	itt	eq
 8010da6:	2301      	moveq	r3, #1
 8010da8:	61a3      	streq	r3, [r4, #24]
 8010daa:	4620      	mov	r0, r4
 8010dac:	f000 f820 	bl	8010df0 <__sfp>
 8010db0:	6060      	str	r0, [r4, #4]
 8010db2:	4620      	mov	r0, r4
 8010db4:	f000 f81c 	bl	8010df0 <__sfp>
 8010db8:	60a0      	str	r0, [r4, #8]
 8010dba:	4620      	mov	r0, r4
 8010dbc:	f000 f818 	bl	8010df0 <__sfp>
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	60e0      	str	r0, [r4, #12]
 8010dc4:	2104      	movs	r1, #4
 8010dc6:	6860      	ldr	r0, [r4, #4]
 8010dc8:	f7ff ff82 	bl	8010cd0 <std>
 8010dcc:	68a0      	ldr	r0, [r4, #8]
 8010dce:	2201      	movs	r2, #1
 8010dd0:	2109      	movs	r1, #9
 8010dd2:	f7ff ff7d 	bl	8010cd0 <std>
 8010dd6:	68e0      	ldr	r0, [r4, #12]
 8010dd8:	2202      	movs	r2, #2
 8010dda:	2112      	movs	r1, #18
 8010ddc:	f7ff ff78 	bl	8010cd0 <std>
 8010de0:	2301      	movs	r3, #1
 8010de2:	61a3      	str	r3, [r4, #24]
 8010de4:	e7d2      	b.n	8010d8c <__sinit+0xc>
 8010de6:	bf00      	nop
 8010de8:	08014238 	.word	0x08014238
 8010dec:	08010d19 	.word	0x08010d19

08010df0 <__sfp>:
 8010df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010df2:	4607      	mov	r7, r0
 8010df4:	f7ff ffac 	bl	8010d50 <__sfp_lock_acquire>
 8010df8:	4b1e      	ldr	r3, [pc, #120]	; (8010e74 <__sfp+0x84>)
 8010dfa:	681e      	ldr	r6, [r3, #0]
 8010dfc:	69b3      	ldr	r3, [r6, #24]
 8010dfe:	b913      	cbnz	r3, 8010e06 <__sfp+0x16>
 8010e00:	4630      	mov	r0, r6
 8010e02:	f7ff ffbd 	bl	8010d80 <__sinit>
 8010e06:	3648      	adds	r6, #72	; 0x48
 8010e08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010e0c:	3b01      	subs	r3, #1
 8010e0e:	d503      	bpl.n	8010e18 <__sfp+0x28>
 8010e10:	6833      	ldr	r3, [r6, #0]
 8010e12:	b30b      	cbz	r3, 8010e58 <__sfp+0x68>
 8010e14:	6836      	ldr	r6, [r6, #0]
 8010e16:	e7f7      	b.n	8010e08 <__sfp+0x18>
 8010e18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010e1c:	b9d5      	cbnz	r5, 8010e54 <__sfp+0x64>
 8010e1e:	4b16      	ldr	r3, [pc, #88]	; (8010e78 <__sfp+0x88>)
 8010e20:	60e3      	str	r3, [r4, #12]
 8010e22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010e26:	6665      	str	r5, [r4, #100]	; 0x64
 8010e28:	f000 f859 	bl	8010ede <__retarget_lock_init_recursive>
 8010e2c:	f7ff ff96 	bl	8010d5c <__sfp_lock_release>
 8010e30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010e34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010e38:	6025      	str	r5, [r4, #0]
 8010e3a:	61a5      	str	r5, [r4, #24]
 8010e3c:	2208      	movs	r2, #8
 8010e3e:	4629      	mov	r1, r5
 8010e40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010e44:	f7fb fae2 	bl	800c40c <memset>
 8010e48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010e4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010e50:	4620      	mov	r0, r4
 8010e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e54:	3468      	adds	r4, #104	; 0x68
 8010e56:	e7d9      	b.n	8010e0c <__sfp+0x1c>
 8010e58:	2104      	movs	r1, #4
 8010e5a:	4638      	mov	r0, r7
 8010e5c:	f7ff ff62 	bl	8010d24 <__sfmoreglue>
 8010e60:	4604      	mov	r4, r0
 8010e62:	6030      	str	r0, [r6, #0]
 8010e64:	2800      	cmp	r0, #0
 8010e66:	d1d5      	bne.n	8010e14 <__sfp+0x24>
 8010e68:	f7ff ff78 	bl	8010d5c <__sfp_lock_release>
 8010e6c:	230c      	movs	r3, #12
 8010e6e:	603b      	str	r3, [r7, #0]
 8010e70:	e7ee      	b.n	8010e50 <__sfp+0x60>
 8010e72:	bf00      	nop
 8010e74:	08014238 	.word	0x08014238
 8010e78:	ffff0001 	.word	0xffff0001

08010e7c <fiprintf>:
 8010e7c:	b40e      	push	{r1, r2, r3}
 8010e7e:	b503      	push	{r0, r1, lr}
 8010e80:	4601      	mov	r1, r0
 8010e82:	ab03      	add	r3, sp, #12
 8010e84:	4805      	ldr	r0, [pc, #20]	; (8010e9c <fiprintf+0x20>)
 8010e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e8a:	6800      	ldr	r0, [r0, #0]
 8010e8c:	9301      	str	r3, [sp, #4]
 8010e8e:	f000 f8a7 	bl	8010fe0 <_vfiprintf_r>
 8010e92:	b002      	add	sp, #8
 8010e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e98:	b003      	add	sp, #12
 8010e9a:	4770      	bx	lr
 8010e9c:	20000040 	.word	0x20000040

08010ea0 <_fwalk_reent>:
 8010ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ea4:	4606      	mov	r6, r0
 8010ea6:	4688      	mov	r8, r1
 8010ea8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010eac:	2700      	movs	r7, #0
 8010eae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010eb2:	f1b9 0901 	subs.w	r9, r9, #1
 8010eb6:	d505      	bpl.n	8010ec4 <_fwalk_reent+0x24>
 8010eb8:	6824      	ldr	r4, [r4, #0]
 8010eba:	2c00      	cmp	r4, #0
 8010ebc:	d1f7      	bne.n	8010eae <_fwalk_reent+0xe>
 8010ebe:	4638      	mov	r0, r7
 8010ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ec4:	89ab      	ldrh	r3, [r5, #12]
 8010ec6:	2b01      	cmp	r3, #1
 8010ec8:	d907      	bls.n	8010eda <_fwalk_reent+0x3a>
 8010eca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ece:	3301      	adds	r3, #1
 8010ed0:	d003      	beq.n	8010eda <_fwalk_reent+0x3a>
 8010ed2:	4629      	mov	r1, r5
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	47c0      	blx	r8
 8010ed8:	4307      	orrs	r7, r0
 8010eda:	3568      	adds	r5, #104	; 0x68
 8010edc:	e7e9      	b.n	8010eb2 <_fwalk_reent+0x12>

08010ede <__retarget_lock_init_recursive>:
 8010ede:	4770      	bx	lr

08010ee0 <__retarget_lock_acquire_recursive>:
 8010ee0:	4770      	bx	lr

08010ee2 <__retarget_lock_release_recursive>:
 8010ee2:	4770      	bx	lr

08010ee4 <memmove>:
 8010ee4:	4288      	cmp	r0, r1
 8010ee6:	b510      	push	{r4, lr}
 8010ee8:	eb01 0402 	add.w	r4, r1, r2
 8010eec:	d902      	bls.n	8010ef4 <memmove+0x10>
 8010eee:	4284      	cmp	r4, r0
 8010ef0:	4623      	mov	r3, r4
 8010ef2:	d807      	bhi.n	8010f04 <memmove+0x20>
 8010ef4:	1e43      	subs	r3, r0, #1
 8010ef6:	42a1      	cmp	r1, r4
 8010ef8:	d008      	beq.n	8010f0c <memmove+0x28>
 8010efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010f02:	e7f8      	b.n	8010ef6 <memmove+0x12>
 8010f04:	4402      	add	r2, r0
 8010f06:	4601      	mov	r1, r0
 8010f08:	428a      	cmp	r2, r1
 8010f0a:	d100      	bne.n	8010f0e <memmove+0x2a>
 8010f0c:	bd10      	pop	{r4, pc}
 8010f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010f16:	e7f7      	b.n	8010f08 <memmove+0x24>

08010f18 <__malloc_lock>:
 8010f18:	4801      	ldr	r0, [pc, #4]	; (8010f20 <__malloc_lock+0x8>)
 8010f1a:	f7ff bfe1 	b.w	8010ee0 <__retarget_lock_acquire_recursive>
 8010f1e:	bf00      	nop
 8010f20:	2001c4fc 	.word	0x2001c4fc

08010f24 <__malloc_unlock>:
 8010f24:	4801      	ldr	r0, [pc, #4]	; (8010f2c <__malloc_unlock+0x8>)
 8010f26:	f7ff bfdc 	b.w	8010ee2 <__retarget_lock_release_recursive>
 8010f2a:	bf00      	nop
 8010f2c:	2001c4fc 	.word	0x2001c4fc

08010f30 <_realloc_r>:
 8010f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f34:	4680      	mov	r8, r0
 8010f36:	4614      	mov	r4, r2
 8010f38:	460e      	mov	r6, r1
 8010f3a:	b921      	cbnz	r1, 8010f46 <_realloc_r+0x16>
 8010f3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f40:	4611      	mov	r1, r2
 8010f42:	f7fe bfbf 	b.w	800fec4 <_malloc_r>
 8010f46:	b92a      	cbnz	r2, 8010f54 <_realloc_r+0x24>
 8010f48:	f7fe ff50 	bl	800fdec <_free_r>
 8010f4c:	4625      	mov	r5, r4
 8010f4e:	4628      	mov	r0, r5
 8010f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f54:	f000 faa0 	bl	8011498 <_malloc_usable_size_r>
 8010f58:	4284      	cmp	r4, r0
 8010f5a:	4607      	mov	r7, r0
 8010f5c:	d802      	bhi.n	8010f64 <_realloc_r+0x34>
 8010f5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010f62:	d812      	bhi.n	8010f8a <_realloc_r+0x5a>
 8010f64:	4621      	mov	r1, r4
 8010f66:	4640      	mov	r0, r8
 8010f68:	f7fe ffac 	bl	800fec4 <_malloc_r>
 8010f6c:	4605      	mov	r5, r0
 8010f6e:	2800      	cmp	r0, #0
 8010f70:	d0ed      	beq.n	8010f4e <_realloc_r+0x1e>
 8010f72:	42bc      	cmp	r4, r7
 8010f74:	4622      	mov	r2, r4
 8010f76:	4631      	mov	r1, r6
 8010f78:	bf28      	it	cs
 8010f7a:	463a      	movcs	r2, r7
 8010f7c:	f7fb fa38 	bl	800c3f0 <memcpy>
 8010f80:	4631      	mov	r1, r6
 8010f82:	4640      	mov	r0, r8
 8010f84:	f7fe ff32 	bl	800fdec <_free_r>
 8010f88:	e7e1      	b.n	8010f4e <_realloc_r+0x1e>
 8010f8a:	4635      	mov	r5, r6
 8010f8c:	e7df      	b.n	8010f4e <_realloc_r+0x1e>

08010f8e <__sfputc_r>:
 8010f8e:	6893      	ldr	r3, [r2, #8]
 8010f90:	3b01      	subs	r3, #1
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	b410      	push	{r4}
 8010f96:	6093      	str	r3, [r2, #8]
 8010f98:	da08      	bge.n	8010fac <__sfputc_r+0x1e>
 8010f9a:	6994      	ldr	r4, [r2, #24]
 8010f9c:	42a3      	cmp	r3, r4
 8010f9e:	db01      	blt.n	8010fa4 <__sfputc_r+0x16>
 8010fa0:	290a      	cmp	r1, #10
 8010fa2:	d103      	bne.n	8010fac <__sfputc_r+0x1e>
 8010fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fa8:	f000 b94a 	b.w	8011240 <__swbuf_r>
 8010fac:	6813      	ldr	r3, [r2, #0]
 8010fae:	1c58      	adds	r0, r3, #1
 8010fb0:	6010      	str	r0, [r2, #0]
 8010fb2:	7019      	strb	r1, [r3, #0]
 8010fb4:	4608      	mov	r0, r1
 8010fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fba:	4770      	bx	lr

08010fbc <__sfputs_r>:
 8010fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fbe:	4606      	mov	r6, r0
 8010fc0:	460f      	mov	r7, r1
 8010fc2:	4614      	mov	r4, r2
 8010fc4:	18d5      	adds	r5, r2, r3
 8010fc6:	42ac      	cmp	r4, r5
 8010fc8:	d101      	bne.n	8010fce <__sfputs_r+0x12>
 8010fca:	2000      	movs	r0, #0
 8010fcc:	e007      	b.n	8010fde <__sfputs_r+0x22>
 8010fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fd2:	463a      	mov	r2, r7
 8010fd4:	4630      	mov	r0, r6
 8010fd6:	f7ff ffda 	bl	8010f8e <__sfputc_r>
 8010fda:	1c43      	adds	r3, r0, #1
 8010fdc:	d1f3      	bne.n	8010fc6 <__sfputs_r+0xa>
 8010fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010fe0 <_vfiprintf_r>:
 8010fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe4:	460d      	mov	r5, r1
 8010fe6:	b09d      	sub	sp, #116	; 0x74
 8010fe8:	4614      	mov	r4, r2
 8010fea:	4698      	mov	r8, r3
 8010fec:	4606      	mov	r6, r0
 8010fee:	b118      	cbz	r0, 8010ff8 <_vfiprintf_r+0x18>
 8010ff0:	6983      	ldr	r3, [r0, #24]
 8010ff2:	b90b      	cbnz	r3, 8010ff8 <_vfiprintf_r+0x18>
 8010ff4:	f7ff fec4 	bl	8010d80 <__sinit>
 8010ff8:	4b89      	ldr	r3, [pc, #548]	; (8011220 <_vfiprintf_r+0x240>)
 8010ffa:	429d      	cmp	r5, r3
 8010ffc:	d11b      	bne.n	8011036 <_vfiprintf_r+0x56>
 8010ffe:	6875      	ldr	r5, [r6, #4]
 8011000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011002:	07d9      	lsls	r1, r3, #31
 8011004:	d405      	bmi.n	8011012 <_vfiprintf_r+0x32>
 8011006:	89ab      	ldrh	r3, [r5, #12]
 8011008:	059a      	lsls	r2, r3, #22
 801100a:	d402      	bmi.n	8011012 <_vfiprintf_r+0x32>
 801100c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801100e:	f7ff ff67 	bl	8010ee0 <__retarget_lock_acquire_recursive>
 8011012:	89ab      	ldrh	r3, [r5, #12]
 8011014:	071b      	lsls	r3, r3, #28
 8011016:	d501      	bpl.n	801101c <_vfiprintf_r+0x3c>
 8011018:	692b      	ldr	r3, [r5, #16]
 801101a:	b9eb      	cbnz	r3, 8011058 <_vfiprintf_r+0x78>
 801101c:	4629      	mov	r1, r5
 801101e:	4630      	mov	r0, r6
 8011020:	f000 f960 	bl	80112e4 <__swsetup_r>
 8011024:	b1c0      	cbz	r0, 8011058 <_vfiprintf_r+0x78>
 8011026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011028:	07dc      	lsls	r4, r3, #31
 801102a:	d50e      	bpl.n	801104a <_vfiprintf_r+0x6a>
 801102c:	f04f 30ff 	mov.w	r0, #4294967295
 8011030:	b01d      	add	sp, #116	; 0x74
 8011032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011036:	4b7b      	ldr	r3, [pc, #492]	; (8011224 <_vfiprintf_r+0x244>)
 8011038:	429d      	cmp	r5, r3
 801103a:	d101      	bne.n	8011040 <_vfiprintf_r+0x60>
 801103c:	68b5      	ldr	r5, [r6, #8]
 801103e:	e7df      	b.n	8011000 <_vfiprintf_r+0x20>
 8011040:	4b79      	ldr	r3, [pc, #484]	; (8011228 <_vfiprintf_r+0x248>)
 8011042:	429d      	cmp	r5, r3
 8011044:	bf08      	it	eq
 8011046:	68f5      	ldreq	r5, [r6, #12]
 8011048:	e7da      	b.n	8011000 <_vfiprintf_r+0x20>
 801104a:	89ab      	ldrh	r3, [r5, #12]
 801104c:	0598      	lsls	r0, r3, #22
 801104e:	d4ed      	bmi.n	801102c <_vfiprintf_r+0x4c>
 8011050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011052:	f7ff ff46 	bl	8010ee2 <__retarget_lock_release_recursive>
 8011056:	e7e9      	b.n	801102c <_vfiprintf_r+0x4c>
 8011058:	2300      	movs	r3, #0
 801105a:	9309      	str	r3, [sp, #36]	; 0x24
 801105c:	2320      	movs	r3, #32
 801105e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011062:	f8cd 800c 	str.w	r8, [sp, #12]
 8011066:	2330      	movs	r3, #48	; 0x30
 8011068:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801122c <_vfiprintf_r+0x24c>
 801106c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011070:	f04f 0901 	mov.w	r9, #1
 8011074:	4623      	mov	r3, r4
 8011076:	469a      	mov	sl, r3
 8011078:	f813 2b01 	ldrb.w	r2, [r3], #1
 801107c:	b10a      	cbz	r2, 8011082 <_vfiprintf_r+0xa2>
 801107e:	2a25      	cmp	r2, #37	; 0x25
 8011080:	d1f9      	bne.n	8011076 <_vfiprintf_r+0x96>
 8011082:	ebba 0b04 	subs.w	fp, sl, r4
 8011086:	d00b      	beq.n	80110a0 <_vfiprintf_r+0xc0>
 8011088:	465b      	mov	r3, fp
 801108a:	4622      	mov	r2, r4
 801108c:	4629      	mov	r1, r5
 801108e:	4630      	mov	r0, r6
 8011090:	f7ff ff94 	bl	8010fbc <__sfputs_r>
 8011094:	3001      	adds	r0, #1
 8011096:	f000 80aa 	beq.w	80111ee <_vfiprintf_r+0x20e>
 801109a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801109c:	445a      	add	r2, fp
 801109e:	9209      	str	r2, [sp, #36]	; 0x24
 80110a0:	f89a 3000 	ldrb.w	r3, [sl]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f000 80a2 	beq.w	80111ee <_vfiprintf_r+0x20e>
 80110aa:	2300      	movs	r3, #0
 80110ac:	f04f 32ff 	mov.w	r2, #4294967295
 80110b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110b4:	f10a 0a01 	add.w	sl, sl, #1
 80110b8:	9304      	str	r3, [sp, #16]
 80110ba:	9307      	str	r3, [sp, #28]
 80110bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110c0:	931a      	str	r3, [sp, #104]	; 0x68
 80110c2:	4654      	mov	r4, sl
 80110c4:	2205      	movs	r2, #5
 80110c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110ca:	4858      	ldr	r0, [pc, #352]	; (801122c <_vfiprintf_r+0x24c>)
 80110cc:	f7ef f8a0 	bl	8000210 <memchr>
 80110d0:	9a04      	ldr	r2, [sp, #16]
 80110d2:	b9d8      	cbnz	r0, 801110c <_vfiprintf_r+0x12c>
 80110d4:	06d1      	lsls	r1, r2, #27
 80110d6:	bf44      	itt	mi
 80110d8:	2320      	movmi	r3, #32
 80110da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110de:	0713      	lsls	r3, r2, #28
 80110e0:	bf44      	itt	mi
 80110e2:	232b      	movmi	r3, #43	; 0x2b
 80110e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110e8:	f89a 3000 	ldrb.w	r3, [sl]
 80110ec:	2b2a      	cmp	r3, #42	; 0x2a
 80110ee:	d015      	beq.n	801111c <_vfiprintf_r+0x13c>
 80110f0:	9a07      	ldr	r2, [sp, #28]
 80110f2:	4654      	mov	r4, sl
 80110f4:	2000      	movs	r0, #0
 80110f6:	f04f 0c0a 	mov.w	ip, #10
 80110fa:	4621      	mov	r1, r4
 80110fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011100:	3b30      	subs	r3, #48	; 0x30
 8011102:	2b09      	cmp	r3, #9
 8011104:	d94e      	bls.n	80111a4 <_vfiprintf_r+0x1c4>
 8011106:	b1b0      	cbz	r0, 8011136 <_vfiprintf_r+0x156>
 8011108:	9207      	str	r2, [sp, #28]
 801110a:	e014      	b.n	8011136 <_vfiprintf_r+0x156>
 801110c:	eba0 0308 	sub.w	r3, r0, r8
 8011110:	fa09 f303 	lsl.w	r3, r9, r3
 8011114:	4313      	orrs	r3, r2
 8011116:	9304      	str	r3, [sp, #16]
 8011118:	46a2      	mov	sl, r4
 801111a:	e7d2      	b.n	80110c2 <_vfiprintf_r+0xe2>
 801111c:	9b03      	ldr	r3, [sp, #12]
 801111e:	1d19      	adds	r1, r3, #4
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	9103      	str	r1, [sp, #12]
 8011124:	2b00      	cmp	r3, #0
 8011126:	bfbb      	ittet	lt
 8011128:	425b      	neglt	r3, r3
 801112a:	f042 0202 	orrlt.w	r2, r2, #2
 801112e:	9307      	strge	r3, [sp, #28]
 8011130:	9307      	strlt	r3, [sp, #28]
 8011132:	bfb8      	it	lt
 8011134:	9204      	strlt	r2, [sp, #16]
 8011136:	7823      	ldrb	r3, [r4, #0]
 8011138:	2b2e      	cmp	r3, #46	; 0x2e
 801113a:	d10c      	bne.n	8011156 <_vfiprintf_r+0x176>
 801113c:	7863      	ldrb	r3, [r4, #1]
 801113e:	2b2a      	cmp	r3, #42	; 0x2a
 8011140:	d135      	bne.n	80111ae <_vfiprintf_r+0x1ce>
 8011142:	9b03      	ldr	r3, [sp, #12]
 8011144:	1d1a      	adds	r2, r3, #4
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	9203      	str	r2, [sp, #12]
 801114a:	2b00      	cmp	r3, #0
 801114c:	bfb8      	it	lt
 801114e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011152:	3402      	adds	r4, #2
 8011154:	9305      	str	r3, [sp, #20]
 8011156:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801123c <_vfiprintf_r+0x25c>
 801115a:	7821      	ldrb	r1, [r4, #0]
 801115c:	2203      	movs	r2, #3
 801115e:	4650      	mov	r0, sl
 8011160:	f7ef f856 	bl	8000210 <memchr>
 8011164:	b140      	cbz	r0, 8011178 <_vfiprintf_r+0x198>
 8011166:	2340      	movs	r3, #64	; 0x40
 8011168:	eba0 000a 	sub.w	r0, r0, sl
 801116c:	fa03 f000 	lsl.w	r0, r3, r0
 8011170:	9b04      	ldr	r3, [sp, #16]
 8011172:	4303      	orrs	r3, r0
 8011174:	3401      	adds	r4, #1
 8011176:	9304      	str	r3, [sp, #16]
 8011178:	f814 1b01 	ldrb.w	r1, [r4], #1
 801117c:	482c      	ldr	r0, [pc, #176]	; (8011230 <_vfiprintf_r+0x250>)
 801117e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011182:	2206      	movs	r2, #6
 8011184:	f7ef f844 	bl	8000210 <memchr>
 8011188:	2800      	cmp	r0, #0
 801118a:	d03f      	beq.n	801120c <_vfiprintf_r+0x22c>
 801118c:	4b29      	ldr	r3, [pc, #164]	; (8011234 <_vfiprintf_r+0x254>)
 801118e:	bb1b      	cbnz	r3, 80111d8 <_vfiprintf_r+0x1f8>
 8011190:	9b03      	ldr	r3, [sp, #12]
 8011192:	3307      	adds	r3, #7
 8011194:	f023 0307 	bic.w	r3, r3, #7
 8011198:	3308      	adds	r3, #8
 801119a:	9303      	str	r3, [sp, #12]
 801119c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801119e:	443b      	add	r3, r7
 80111a0:	9309      	str	r3, [sp, #36]	; 0x24
 80111a2:	e767      	b.n	8011074 <_vfiprintf_r+0x94>
 80111a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80111a8:	460c      	mov	r4, r1
 80111aa:	2001      	movs	r0, #1
 80111ac:	e7a5      	b.n	80110fa <_vfiprintf_r+0x11a>
 80111ae:	2300      	movs	r3, #0
 80111b0:	3401      	adds	r4, #1
 80111b2:	9305      	str	r3, [sp, #20]
 80111b4:	4619      	mov	r1, r3
 80111b6:	f04f 0c0a 	mov.w	ip, #10
 80111ba:	4620      	mov	r0, r4
 80111bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111c0:	3a30      	subs	r2, #48	; 0x30
 80111c2:	2a09      	cmp	r2, #9
 80111c4:	d903      	bls.n	80111ce <_vfiprintf_r+0x1ee>
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d0c5      	beq.n	8011156 <_vfiprintf_r+0x176>
 80111ca:	9105      	str	r1, [sp, #20]
 80111cc:	e7c3      	b.n	8011156 <_vfiprintf_r+0x176>
 80111ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80111d2:	4604      	mov	r4, r0
 80111d4:	2301      	movs	r3, #1
 80111d6:	e7f0      	b.n	80111ba <_vfiprintf_r+0x1da>
 80111d8:	ab03      	add	r3, sp, #12
 80111da:	9300      	str	r3, [sp, #0]
 80111dc:	462a      	mov	r2, r5
 80111de:	4b16      	ldr	r3, [pc, #88]	; (8011238 <_vfiprintf_r+0x258>)
 80111e0:	a904      	add	r1, sp, #16
 80111e2:	4630      	mov	r0, r6
 80111e4:	f7fb f9ba 	bl	800c55c <_printf_float>
 80111e8:	4607      	mov	r7, r0
 80111ea:	1c78      	adds	r0, r7, #1
 80111ec:	d1d6      	bne.n	801119c <_vfiprintf_r+0x1bc>
 80111ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111f0:	07d9      	lsls	r1, r3, #31
 80111f2:	d405      	bmi.n	8011200 <_vfiprintf_r+0x220>
 80111f4:	89ab      	ldrh	r3, [r5, #12]
 80111f6:	059a      	lsls	r2, r3, #22
 80111f8:	d402      	bmi.n	8011200 <_vfiprintf_r+0x220>
 80111fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111fc:	f7ff fe71 	bl	8010ee2 <__retarget_lock_release_recursive>
 8011200:	89ab      	ldrh	r3, [r5, #12]
 8011202:	065b      	lsls	r3, r3, #25
 8011204:	f53f af12 	bmi.w	801102c <_vfiprintf_r+0x4c>
 8011208:	9809      	ldr	r0, [sp, #36]	; 0x24
 801120a:	e711      	b.n	8011030 <_vfiprintf_r+0x50>
 801120c:	ab03      	add	r3, sp, #12
 801120e:	9300      	str	r3, [sp, #0]
 8011210:	462a      	mov	r2, r5
 8011212:	4b09      	ldr	r3, [pc, #36]	; (8011238 <_vfiprintf_r+0x258>)
 8011214:	a904      	add	r1, sp, #16
 8011216:	4630      	mov	r0, r6
 8011218:	f7fb fc44 	bl	800caa4 <_printf_i>
 801121c:	e7e4      	b.n	80111e8 <_vfiprintf_r+0x208>
 801121e:	bf00      	nop
 8011220:	080146b4 	.word	0x080146b4
 8011224:	080146d4 	.word	0x080146d4
 8011228:	08014694 	.word	0x08014694
 801122c:	0801462c 	.word	0x0801462c
 8011230:	08014636 	.word	0x08014636
 8011234:	0800c55d 	.word	0x0800c55d
 8011238:	08010fbd 	.word	0x08010fbd
 801123c:	08014632 	.word	0x08014632

08011240 <__swbuf_r>:
 8011240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011242:	460e      	mov	r6, r1
 8011244:	4614      	mov	r4, r2
 8011246:	4605      	mov	r5, r0
 8011248:	b118      	cbz	r0, 8011252 <__swbuf_r+0x12>
 801124a:	6983      	ldr	r3, [r0, #24]
 801124c:	b90b      	cbnz	r3, 8011252 <__swbuf_r+0x12>
 801124e:	f7ff fd97 	bl	8010d80 <__sinit>
 8011252:	4b21      	ldr	r3, [pc, #132]	; (80112d8 <__swbuf_r+0x98>)
 8011254:	429c      	cmp	r4, r3
 8011256:	d12b      	bne.n	80112b0 <__swbuf_r+0x70>
 8011258:	686c      	ldr	r4, [r5, #4]
 801125a:	69a3      	ldr	r3, [r4, #24]
 801125c:	60a3      	str	r3, [r4, #8]
 801125e:	89a3      	ldrh	r3, [r4, #12]
 8011260:	071a      	lsls	r2, r3, #28
 8011262:	d52f      	bpl.n	80112c4 <__swbuf_r+0x84>
 8011264:	6923      	ldr	r3, [r4, #16]
 8011266:	b36b      	cbz	r3, 80112c4 <__swbuf_r+0x84>
 8011268:	6923      	ldr	r3, [r4, #16]
 801126a:	6820      	ldr	r0, [r4, #0]
 801126c:	1ac0      	subs	r0, r0, r3
 801126e:	6963      	ldr	r3, [r4, #20]
 8011270:	b2f6      	uxtb	r6, r6
 8011272:	4283      	cmp	r3, r0
 8011274:	4637      	mov	r7, r6
 8011276:	dc04      	bgt.n	8011282 <__swbuf_r+0x42>
 8011278:	4621      	mov	r1, r4
 801127a:	4628      	mov	r0, r5
 801127c:	f7ff fcec 	bl	8010c58 <_fflush_r>
 8011280:	bb30      	cbnz	r0, 80112d0 <__swbuf_r+0x90>
 8011282:	68a3      	ldr	r3, [r4, #8]
 8011284:	3b01      	subs	r3, #1
 8011286:	60a3      	str	r3, [r4, #8]
 8011288:	6823      	ldr	r3, [r4, #0]
 801128a:	1c5a      	adds	r2, r3, #1
 801128c:	6022      	str	r2, [r4, #0]
 801128e:	701e      	strb	r6, [r3, #0]
 8011290:	6963      	ldr	r3, [r4, #20]
 8011292:	3001      	adds	r0, #1
 8011294:	4283      	cmp	r3, r0
 8011296:	d004      	beq.n	80112a2 <__swbuf_r+0x62>
 8011298:	89a3      	ldrh	r3, [r4, #12]
 801129a:	07db      	lsls	r3, r3, #31
 801129c:	d506      	bpl.n	80112ac <__swbuf_r+0x6c>
 801129e:	2e0a      	cmp	r6, #10
 80112a0:	d104      	bne.n	80112ac <__swbuf_r+0x6c>
 80112a2:	4621      	mov	r1, r4
 80112a4:	4628      	mov	r0, r5
 80112a6:	f7ff fcd7 	bl	8010c58 <_fflush_r>
 80112aa:	b988      	cbnz	r0, 80112d0 <__swbuf_r+0x90>
 80112ac:	4638      	mov	r0, r7
 80112ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112b0:	4b0a      	ldr	r3, [pc, #40]	; (80112dc <__swbuf_r+0x9c>)
 80112b2:	429c      	cmp	r4, r3
 80112b4:	d101      	bne.n	80112ba <__swbuf_r+0x7a>
 80112b6:	68ac      	ldr	r4, [r5, #8]
 80112b8:	e7cf      	b.n	801125a <__swbuf_r+0x1a>
 80112ba:	4b09      	ldr	r3, [pc, #36]	; (80112e0 <__swbuf_r+0xa0>)
 80112bc:	429c      	cmp	r4, r3
 80112be:	bf08      	it	eq
 80112c0:	68ec      	ldreq	r4, [r5, #12]
 80112c2:	e7ca      	b.n	801125a <__swbuf_r+0x1a>
 80112c4:	4621      	mov	r1, r4
 80112c6:	4628      	mov	r0, r5
 80112c8:	f000 f80c 	bl	80112e4 <__swsetup_r>
 80112cc:	2800      	cmp	r0, #0
 80112ce:	d0cb      	beq.n	8011268 <__swbuf_r+0x28>
 80112d0:	f04f 37ff 	mov.w	r7, #4294967295
 80112d4:	e7ea      	b.n	80112ac <__swbuf_r+0x6c>
 80112d6:	bf00      	nop
 80112d8:	080146b4 	.word	0x080146b4
 80112dc:	080146d4 	.word	0x080146d4
 80112e0:	08014694 	.word	0x08014694

080112e4 <__swsetup_r>:
 80112e4:	4b32      	ldr	r3, [pc, #200]	; (80113b0 <__swsetup_r+0xcc>)
 80112e6:	b570      	push	{r4, r5, r6, lr}
 80112e8:	681d      	ldr	r5, [r3, #0]
 80112ea:	4606      	mov	r6, r0
 80112ec:	460c      	mov	r4, r1
 80112ee:	b125      	cbz	r5, 80112fa <__swsetup_r+0x16>
 80112f0:	69ab      	ldr	r3, [r5, #24]
 80112f2:	b913      	cbnz	r3, 80112fa <__swsetup_r+0x16>
 80112f4:	4628      	mov	r0, r5
 80112f6:	f7ff fd43 	bl	8010d80 <__sinit>
 80112fa:	4b2e      	ldr	r3, [pc, #184]	; (80113b4 <__swsetup_r+0xd0>)
 80112fc:	429c      	cmp	r4, r3
 80112fe:	d10f      	bne.n	8011320 <__swsetup_r+0x3c>
 8011300:	686c      	ldr	r4, [r5, #4]
 8011302:	89a3      	ldrh	r3, [r4, #12]
 8011304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011308:	0719      	lsls	r1, r3, #28
 801130a:	d42c      	bmi.n	8011366 <__swsetup_r+0x82>
 801130c:	06dd      	lsls	r5, r3, #27
 801130e:	d411      	bmi.n	8011334 <__swsetup_r+0x50>
 8011310:	2309      	movs	r3, #9
 8011312:	6033      	str	r3, [r6, #0]
 8011314:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011318:	81a3      	strh	r3, [r4, #12]
 801131a:	f04f 30ff 	mov.w	r0, #4294967295
 801131e:	e03e      	b.n	801139e <__swsetup_r+0xba>
 8011320:	4b25      	ldr	r3, [pc, #148]	; (80113b8 <__swsetup_r+0xd4>)
 8011322:	429c      	cmp	r4, r3
 8011324:	d101      	bne.n	801132a <__swsetup_r+0x46>
 8011326:	68ac      	ldr	r4, [r5, #8]
 8011328:	e7eb      	b.n	8011302 <__swsetup_r+0x1e>
 801132a:	4b24      	ldr	r3, [pc, #144]	; (80113bc <__swsetup_r+0xd8>)
 801132c:	429c      	cmp	r4, r3
 801132e:	bf08      	it	eq
 8011330:	68ec      	ldreq	r4, [r5, #12]
 8011332:	e7e6      	b.n	8011302 <__swsetup_r+0x1e>
 8011334:	0758      	lsls	r0, r3, #29
 8011336:	d512      	bpl.n	801135e <__swsetup_r+0x7a>
 8011338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801133a:	b141      	cbz	r1, 801134e <__swsetup_r+0x6a>
 801133c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011340:	4299      	cmp	r1, r3
 8011342:	d002      	beq.n	801134a <__swsetup_r+0x66>
 8011344:	4630      	mov	r0, r6
 8011346:	f7fe fd51 	bl	800fdec <_free_r>
 801134a:	2300      	movs	r3, #0
 801134c:	6363      	str	r3, [r4, #52]	; 0x34
 801134e:	89a3      	ldrh	r3, [r4, #12]
 8011350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011354:	81a3      	strh	r3, [r4, #12]
 8011356:	2300      	movs	r3, #0
 8011358:	6063      	str	r3, [r4, #4]
 801135a:	6923      	ldr	r3, [r4, #16]
 801135c:	6023      	str	r3, [r4, #0]
 801135e:	89a3      	ldrh	r3, [r4, #12]
 8011360:	f043 0308 	orr.w	r3, r3, #8
 8011364:	81a3      	strh	r3, [r4, #12]
 8011366:	6923      	ldr	r3, [r4, #16]
 8011368:	b94b      	cbnz	r3, 801137e <__swsetup_r+0x9a>
 801136a:	89a3      	ldrh	r3, [r4, #12]
 801136c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011374:	d003      	beq.n	801137e <__swsetup_r+0x9a>
 8011376:	4621      	mov	r1, r4
 8011378:	4630      	mov	r0, r6
 801137a:	f000 f84d 	bl	8011418 <__smakebuf_r>
 801137e:	89a0      	ldrh	r0, [r4, #12]
 8011380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011384:	f010 0301 	ands.w	r3, r0, #1
 8011388:	d00a      	beq.n	80113a0 <__swsetup_r+0xbc>
 801138a:	2300      	movs	r3, #0
 801138c:	60a3      	str	r3, [r4, #8]
 801138e:	6963      	ldr	r3, [r4, #20]
 8011390:	425b      	negs	r3, r3
 8011392:	61a3      	str	r3, [r4, #24]
 8011394:	6923      	ldr	r3, [r4, #16]
 8011396:	b943      	cbnz	r3, 80113aa <__swsetup_r+0xc6>
 8011398:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801139c:	d1ba      	bne.n	8011314 <__swsetup_r+0x30>
 801139e:	bd70      	pop	{r4, r5, r6, pc}
 80113a0:	0781      	lsls	r1, r0, #30
 80113a2:	bf58      	it	pl
 80113a4:	6963      	ldrpl	r3, [r4, #20]
 80113a6:	60a3      	str	r3, [r4, #8]
 80113a8:	e7f4      	b.n	8011394 <__swsetup_r+0xb0>
 80113aa:	2000      	movs	r0, #0
 80113ac:	e7f7      	b.n	801139e <__swsetup_r+0xba>
 80113ae:	bf00      	nop
 80113b0:	20000040 	.word	0x20000040
 80113b4:	080146b4 	.word	0x080146b4
 80113b8:	080146d4 	.word	0x080146d4
 80113bc:	08014694 	.word	0x08014694

080113c0 <abort>:
 80113c0:	b508      	push	{r3, lr}
 80113c2:	2006      	movs	r0, #6
 80113c4:	f000 f898 	bl	80114f8 <raise>
 80113c8:	2001      	movs	r0, #1
 80113ca:	f7f4 fcb9 	bl	8005d40 <_exit>

080113ce <__swhatbuf_r>:
 80113ce:	b570      	push	{r4, r5, r6, lr}
 80113d0:	460e      	mov	r6, r1
 80113d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113d6:	2900      	cmp	r1, #0
 80113d8:	b096      	sub	sp, #88	; 0x58
 80113da:	4614      	mov	r4, r2
 80113dc:	461d      	mov	r5, r3
 80113de:	da08      	bge.n	80113f2 <__swhatbuf_r+0x24>
 80113e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80113e4:	2200      	movs	r2, #0
 80113e6:	602a      	str	r2, [r5, #0]
 80113e8:	061a      	lsls	r2, r3, #24
 80113ea:	d410      	bmi.n	801140e <__swhatbuf_r+0x40>
 80113ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113f0:	e00e      	b.n	8011410 <__swhatbuf_r+0x42>
 80113f2:	466a      	mov	r2, sp
 80113f4:	f000 f89c 	bl	8011530 <_fstat_r>
 80113f8:	2800      	cmp	r0, #0
 80113fa:	dbf1      	blt.n	80113e0 <__swhatbuf_r+0x12>
 80113fc:	9a01      	ldr	r2, [sp, #4]
 80113fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011402:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011406:	425a      	negs	r2, r3
 8011408:	415a      	adcs	r2, r3
 801140a:	602a      	str	r2, [r5, #0]
 801140c:	e7ee      	b.n	80113ec <__swhatbuf_r+0x1e>
 801140e:	2340      	movs	r3, #64	; 0x40
 8011410:	2000      	movs	r0, #0
 8011412:	6023      	str	r3, [r4, #0]
 8011414:	b016      	add	sp, #88	; 0x58
 8011416:	bd70      	pop	{r4, r5, r6, pc}

08011418 <__smakebuf_r>:
 8011418:	898b      	ldrh	r3, [r1, #12]
 801141a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801141c:	079d      	lsls	r5, r3, #30
 801141e:	4606      	mov	r6, r0
 8011420:	460c      	mov	r4, r1
 8011422:	d507      	bpl.n	8011434 <__smakebuf_r+0x1c>
 8011424:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011428:	6023      	str	r3, [r4, #0]
 801142a:	6123      	str	r3, [r4, #16]
 801142c:	2301      	movs	r3, #1
 801142e:	6163      	str	r3, [r4, #20]
 8011430:	b002      	add	sp, #8
 8011432:	bd70      	pop	{r4, r5, r6, pc}
 8011434:	ab01      	add	r3, sp, #4
 8011436:	466a      	mov	r2, sp
 8011438:	f7ff ffc9 	bl	80113ce <__swhatbuf_r>
 801143c:	9900      	ldr	r1, [sp, #0]
 801143e:	4605      	mov	r5, r0
 8011440:	4630      	mov	r0, r6
 8011442:	f7fe fd3f 	bl	800fec4 <_malloc_r>
 8011446:	b948      	cbnz	r0, 801145c <__smakebuf_r+0x44>
 8011448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801144c:	059a      	lsls	r2, r3, #22
 801144e:	d4ef      	bmi.n	8011430 <__smakebuf_r+0x18>
 8011450:	f023 0303 	bic.w	r3, r3, #3
 8011454:	f043 0302 	orr.w	r3, r3, #2
 8011458:	81a3      	strh	r3, [r4, #12]
 801145a:	e7e3      	b.n	8011424 <__smakebuf_r+0xc>
 801145c:	4b0d      	ldr	r3, [pc, #52]	; (8011494 <__smakebuf_r+0x7c>)
 801145e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011460:	89a3      	ldrh	r3, [r4, #12]
 8011462:	6020      	str	r0, [r4, #0]
 8011464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011468:	81a3      	strh	r3, [r4, #12]
 801146a:	9b00      	ldr	r3, [sp, #0]
 801146c:	6163      	str	r3, [r4, #20]
 801146e:	9b01      	ldr	r3, [sp, #4]
 8011470:	6120      	str	r0, [r4, #16]
 8011472:	b15b      	cbz	r3, 801148c <__smakebuf_r+0x74>
 8011474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011478:	4630      	mov	r0, r6
 801147a:	f000 f86b 	bl	8011554 <_isatty_r>
 801147e:	b128      	cbz	r0, 801148c <__smakebuf_r+0x74>
 8011480:	89a3      	ldrh	r3, [r4, #12]
 8011482:	f023 0303 	bic.w	r3, r3, #3
 8011486:	f043 0301 	orr.w	r3, r3, #1
 801148a:	81a3      	strh	r3, [r4, #12]
 801148c:	89a0      	ldrh	r0, [r4, #12]
 801148e:	4305      	orrs	r5, r0
 8011490:	81a5      	strh	r5, [r4, #12]
 8011492:	e7cd      	b.n	8011430 <__smakebuf_r+0x18>
 8011494:	08010d19 	.word	0x08010d19

08011498 <_malloc_usable_size_r>:
 8011498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801149c:	1f18      	subs	r0, r3, #4
 801149e:	2b00      	cmp	r3, #0
 80114a0:	bfbc      	itt	lt
 80114a2:	580b      	ldrlt	r3, [r1, r0]
 80114a4:	18c0      	addlt	r0, r0, r3
 80114a6:	4770      	bx	lr

080114a8 <_raise_r>:
 80114a8:	291f      	cmp	r1, #31
 80114aa:	b538      	push	{r3, r4, r5, lr}
 80114ac:	4604      	mov	r4, r0
 80114ae:	460d      	mov	r5, r1
 80114b0:	d904      	bls.n	80114bc <_raise_r+0x14>
 80114b2:	2316      	movs	r3, #22
 80114b4:	6003      	str	r3, [r0, #0]
 80114b6:	f04f 30ff 	mov.w	r0, #4294967295
 80114ba:	bd38      	pop	{r3, r4, r5, pc}
 80114bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80114be:	b112      	cbz	r2, 80114c6 <_raise_r+0x1e>
 80114c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114c4:	b94b      	cbnz	r3, 80114da <_raise_r+0x32>
 80114c6:	4620      	mov	r0, r4
 80114c8:	f000 f830 	bl	801152c <_getpid_r>
 80114cc:	462a      	mov	r2, r5
 80114ce:	4601      	mov	r1, r0
 80114d0:	4620      	mov	r0, r4
 80114d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114d6:	f000 b817 	b.w	8011508 <_kill_r>
 80114da:	2b01      	cmp	r3, #1
 80114dc:	d00a      	beq.n	80114f4 <_raise_r+0x4c>
 80114de:	1c59      	adds	r1, r3, #1
 80114e0:	d103      	bne.n	80114ea <_raise_r+0x42>
 80114e2:	2316      	movs	r3, #22
 80114e4:	6003      	str	r3, [r0, #0]
 80114e6:	2001      	movs	r0, #1
 80114e8:	e7e7      	b.n	80114ba <_raise_r+0x12>
 80114ea:	2400      	movs	r4, #0
 80114ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80114f0:	4628      	mov	r0, r5
 80114f2:	4798      	blx	r3
 80114f4:	2000      	movs	r0, #0
 80114f6:	e7e0      	b.n	80114ba <_raise_r+0x12>

080114f8 <raise>:
 80114f8:	4b02      	ldr	r3, [pc, #8]	; (8011504 <raise+0xc>)
 80114fa:	4601      	mov	r1, r0
 80114fc:	6818      	ldr	r0, [r3, #0]
 80114fe:	f7ff bfd3 	b.w	80114a8 <_raise_r>
 8011502:	bf00      	nop
 8011504:	20000040 	.word	0x20000040

08011508 <_kill_r>:
 8011508:	b538      	push	{r3, r4, r5, lr}
 801150a:	4d07      	ldr	r5, [pc, #28]	; (8011528 <_kill_r+0x20>)
 801150c:	2300      	movs	r3, #0
 801150e:	4604      	mov	r4, r0
 8011510:	4608      	mov	r0, r1
 8011512:	4611      	mov	r1, r2
 8011514:	602b      	str	r3, [r5, #0]
 8011516:	f7f4 fc03 	bl	8005d20 <_kill>
 801151a:	1c43      	adds	r3, r0, #1
 801151c:	d102      	bne.n	8011524 <_kill_r+0x1c>
 801151e:	682b      	ldr	r3, [r5, #0]
 8011520:	b103      	cbz	r3, 8011524 <_kill_r+0x1c>
 8011522:	6023      	str	r3, [r4, #0]
 8011524:	bd38      	pop	{r3, r4, r5, pc}
 8011526:	bf00      	nop
 8011528:	2001c4f8 	.word	0x2001c4f8

0801152c <_getpid_r>:
 801152c:	f7f4 bbf0 	b.w	8005d10 <_getpid>

08011530 <_fstat_r>:
 8011530:	b538      	push	{r3, r4, r5, lr}
 8011532:	4d07      	ldr	r5, [pc, #28]	; (8011550 <_fstat_r+0x20>)
 8011534:	2300      	movs	r3, #0
 8011536:	4604      	mov	r4, r0
 8011538:	4608      	mov	r0, r1
 801153a:	4611      	mov	r1, r2
 801153c:	602b      	str	r3, [r5, #0]
 801153e:	f7f4 fc4e 	bl	8005dde <_fstat>
 8011542:	1c43      	adds	r3, r0, #1
 8011544:	d102      	bne.n	801154c <_fstat_r+0x1c>
 8011546:	682b      	ldr	r3, [r5, #0]
 8011548:	b103      	cbz	r3, 801154c <_fstat_r+0x1c>
 801154a:	6023      	str	r3, [r4, #0]
 801154c:	bd38      	pop	{r3, r4, r5, pc}
 801154e:	bf00      	nop
 8011550:	2001c4f8 	.word	0x2001c4f8

08011554 <_isatty_r>:
 8011554:	b538      	push	{r3, r4, r5, lr}
 8011556:	4d06      	ldr	r5, [pc, #24]	; (8011570 <_isatty_r+0x1c>)
 8011558:	2300      	movs	r3, #0
 801155a:	4604      	mov	r4, r0
 801155c:	4608      	mov	r0, r1
 801155e:	602b      	str	r3, [r5, #0]
 8011560:	f7f4 fc4d 	bl	8005dfe <_isatty>
 8011564:	1c43      	adds	r3, r0, #1
 8011566:	d102      	bne.n	801156e <_isatty_r+0x1a>
 8011568:	682b      	ldr	r3, [r5, #0]
 801156a:	b103      	cbz	r3, 801156e <_isatty_r+0x1a>
 801156c:	6023      	str	r3, [r4, #0]
 801156e:	bd38      	pop	{r3, r4, r5, pc}
 8011570:	2001c4f8 	.word	0x2001c4f8
 8011574:	00000000 	.word	0x00000000

08011578 <cos>:
 8011578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801157a:	ec53 2b10 	vmov	r2, r3, d0
 801157e:	4826      	ldr	r0, [pc, #152]	; (8011618 <cos+0xa0>)
 8011580:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011584:	4281      	cmp	r1, r0
 8011586:	dc06      	bgt.n	8011596 <cos+0x1e>
 8011588:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8011610 <cos+0x98>
 801158c:	b005      	add	sp, #20
 801158e:	f85d eb04 	ldr.w	lr, [sp], #4
 8011592:	f001 bcf5 	b.w	8012f80 <__kernel_cos>
 8011596:	4821      	ldr	r0, [pc, #132]	; (801161c <cos+0xa4>)
 8011598:	4281      	cmp	r1, r0
 801159a:	dd09      	ble.n	80115b0 <cos+0x38>
 801159c:	ee10 0a10 	vmov	r0, s0
 80115a0:	4619      	mov	r1, r3
 80115a2:	f7ee fe89 	bl	80002b8 <__aeabi_dsub>
 80115a6:	ec41 0b10 	vmov	d0, r0, r1
 80115aa:	b005      	add	sp, #20
 80115ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80115b0:	4668      	mov	r0, sp
 80115b2:	f001 fa21 	bl	80129f8 <__ieee754_rem_pio2>
 80115b6:	f000 0003 	and.w	r0, r0, #3
 80115ba:	2801      	cmp	r0, #1
 80115bc:	d00b      	beq.n	80115d6 <cos+0x5e>
 80115be:	2802      	cmp	r0, #2
 80115c0:	d016      	beq.n	80115f0 <cos+0x78>
 80115c2:	b9e0      	cbnz	r0, 80115fe <cos+0x86>
 80115c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80115c8:	ed9d 0b00 	vldr	d0, [sp]
 80115cc:	f001 fcd8 	bl	8012f80 <__kernel_cos>
 80115d0:	ec51 0b10 	vmov	r0, r1, d0
 80115d4:	e7e7      	b.n	80115a6 <cos+0x2e>
 80115d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80115da:	ed9d 0b00 	vldr	d0, [sp]
 80115de:	f002 f8e7 	bl	80137b0 <__kernel_sin>
 80115e2:	ec53 2b10 	vmov	r2, r3, d0
 80115e6:	ee10 0a10 	vmov	r0, s0
 80115ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80115ee:	e7da      	b.n	80115a6 <cos+0x2e>
 80115f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80115f4:	ed9d 0b00 	vldr	d0, [sp]
 80115f8:	f001 fcc2 	bl	8012f80 <__kernel_cos>
 80115fc:	e7f1      	b.n	80115e2 <cos+0x6a>
 80115fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011602:	ed9d 0b00 	vldr	d0, [sp]
 8011606:	2001      	movs	r0, #1
 8011608:	f002 f8d2 	bl	80137b0 <__kernel_sin>
 801160c:	e7e0      	b.n	80115d0 <cos+0x58>
 801160e:	bf00      	nop
	...
 8011618:	3fe921fb 	.word	0x3fe921fb
 801161c:	7fefffff 	.word	0x7fefffff

08011620 <round>:
 8011620:	ec51 0b10 	vmov	r0, r1, d0
 8011624:	b570      	push	{r4, r5, r6, lr}
 8011626:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801162a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801162e:	2c13      	cmp	r4, #19
 8011630:	ee10 2a10 	vmov	r2, s0
 8011634:	460b      	mov	r3, r1
 8011636:	dc19      	bgt.n	801166c <round+0x4c>
 8011638:	2c00      	cmp	r4, #0
 801163a:	da09      	bge.n	8011650 <round+0x30>
 801163c:	3401      	adds	r4, #1
 801163e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011642:	d103      	bne.n	801164c <round+0x2c>
 8011644:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011648:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801164c:	2200      	movs	r2, #0
 801164e:	e028      	b.n	80116a2 <round+0x82>
 8011650:	4d15      	ldr	r5, [pc, #84]	; (80116a8 <round+0x88>)
 8011652:	4125      	asrs	r5, r4
 8011654:	ea01 0605 	and.w	r6, r1, r5
 8011658:	4332      	orrs	r2, r6
 801165a:	d00e      	beq.n	801167a <round+0x5a>
 801165c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011660:	fa42 f404 	asr.w	r4, r2, r4
 8011664:	4423      	add	r3, r4
 8011666:	ea23 0305 	bic.w	r3, r3, r5
 801166a:	e7ef      	b.n	801164c <round+0x2c>
 801166c:	2c33      	cmp	r4, #51	; 0x33
 801166e:	dd07      	ble.n	8011680 <round+0x60>
 8011670:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8011674:	d101      	bne.n	801167a <round+0x5a>
 8011676:	f7ee fe21 	bl	80002bc <__adddf3>
 801167a:	ec41 0b10 	vmov	d0, r0, r1
 801167e:	bd70      	pop	{r4, r5, r6, pc}
 8011680:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8011684:	f04f 35ff 	mov.w	r5, #4294967295
 8011688:	40f5      	lsrs	r5, r6
 801168a:	4228      	tst	r0, r5
 801168c:	d0f5      	beq.n	801167a <round+0x5a>
 801168e:	2101      	movs	r1, #1
 8011690:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011694:	fa01 f404 	lsl.w	r4, r1, r4
 8011698:	1912      	adds	r2, r2, r4
 801169a:	bf28      	it	cs
 801169c:	185b      	addcs	r3, r3, r1
 801169e:	ea22 0205 	bic.w	r2, r2, r5
 80116a2:	4619      	mov	r1, r3
 80116a4:	4610      	mov	r0, r2
 80116a6:	e7e8      	b.n	801167a <round+0x5a>
 80116a8:	000fffff 	.word	0x000fffff
 80116ac:	00000000 	.word	0x00000000

080116b0 <sin>:
 80116b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116b2:	ec53 2b10 	vmov	r2, r3, d0
 80116b6:	4828      	ldr	r0, [pc, #160]	; (8011758 <sin+0xa8>)
 80116b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80116bc:	4281      	cmp	r1, r0
 80116be:	dc07      	bgt.n	80116d0 <sin+0x20>
 80116c0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8011750 <sin+0xa0>
 80116c4:	2000      	movs	r0, #0
 80116c6:	b005      	add	sp, #20
 80116c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80116cc:	f002 b870 	b.w	80137b0 <__kernel_sin>
 80116d0:	4822      	ldr	r0, [pc, #136]	; (801175c <sin+0xac>)
 80116d2:	4281      	cmp	r1, r0
 80116d4:	dd09      	ble.n	80116ea <sin+0x3a>
 80116d6:	ee10 0a10 	vmov	r0, s0
 80116da:	4619      	mov	r1, r3
 80116dc:	f7ee fdec 	bl	80002b8 <__aeabi_dsub>
 80116e0:	ec41 0b10 	vmov	d0, r0, r1
 80116e4:	b005      	add	sp, #20
 80116e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80116ea:	4668      	mov	r0, sp
 80116ec:	f001 f984 	bl	80129f8 <__ieee754_rem_pio2>
 80116f0:	f000 0003 	and.w	r0, r0, #3
 80116f4:	2801      	cmp	r0, #1
 80116f6:	d00c      	beq.n	8011712 <sin+0x62>
 80116f8:	2802      	cmp	r0, #2
 80116fa:	d011      	beq.n	8011720 <sin+0x70>
 80116fc:	b9f0      	cbnz	r0, 801173c <sin+0x8c>
 80116fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011702:	ed9d 0b00 	vldr	d0, [sp]
 8011706:	2001      	movs	r0, #1
 8011708:	f002 f852 	bl	80137b0 <__kernel_sin>
 801170c:	ec51 0b10 	vmov	r0, r1, d0
 8011710:	e7e6      	b.n	80116e0 <sin+0x30>
 8011712:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011716:	ed9d 0b00 	vldr	d0, [sp]
 801171a:	f001 fc31 	bl	8012f80 <__kernel_cos>
 801171e:	e7f5      	b.n	801170c <sin+0x5c>
 8011720:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011724:	ed9d 0b00 	vldr	d0, [sp]
 8011728:	2001      	movs	r0, #1
 801172a:	f002 f841 	bl	80137b0 <__kernel_sin>
 801172e:	ec53 2b10 	vmov	r2, r3, d0
 8011732:	ee10 0a10 	vmov	r0, s0
 8011736:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801173a:	e7d1      	b.n	80116e0 <sin+0x30>
 801173c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011740:	ed9d 0b00 	vldr	d0, [sp]
 8011744:	f001 fc1c 	bl	8012f80 <__kernel_cos>
 8011748:	e7f1      	b.n	801172e <sin+0x7e>
 801174a:	bf00      	nop
 801174c:	f3af 8000 	nop.w
	...
 8011758:	3fe921fb 	.word	0x3fe921fb
 801175c:	7fefffff 	.word	0x7fefffff

08011760 <acos>:
 8011760:	b538      	push	{r3, r4, r5, lr}
 8011762:	ed2d 8b02 	vpush	{d8}
 8011766:	ec55 4b10 	vmov	r4, r5, d0
 801176a:	f000 f8e9 	bl	8011940 <__ieee754_acos>
 801176e:	4622      	mov	r2, r4
 8011770:	462b      	mov	r3, r5
 8011772:	4620      	mov	r0, r4
 8011774:	4629      	mov	r1, r5
 8011776:	eeb0 8a40 	vmov.f32	s16, s0
 801177a:	eef0 8a60 	vmov.f32	s17, s1
 801177e:	f7ef f9ed 	bl	8000b5c <__aeabi_dcmpun>
 8011782:	b9a8      	cbnz	r0, 80117b0 <acos+0x50>
 8011784:	ec45 4b10 	vmov	d0, r4, r5
 8011788:	f002 faa2 	bl	8013cd0 <fabs>
 801178c:	4b0c      	ldr	r3, [pc, #48]	; (80117c0 <acos+0x60>)
 801178e:	ec51 0b10 	vmov	r0, r1, d0
 8011792:	2200      	movs	r2, #0
 8011794:	f7ef f9d8 	bl	8000b48 <__aeabi_dcmpgt>
 8011798:	b150      	cbz	r0, 80117b0 <acos+0x50>
 801179a:	f7fa fdff 	bl	800c39c <__errno>
 801179e:	ecbd 8b02 	vpop	{d8}
 80117a2:	2321      	movs	r3, #33	; 0x21
 80117a4:	6003      	str	r3, [r0, #0]
 80117a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117aa:	4806      	ldr	r0, [pc, #24]	; (80117c4 <acos+0x64>)
 80117ac:	f7ff b890 	b.w	80108d0 <nan>
 80117b0:	eeb0 0a48 	vmov.f32	s0, s16
 80117b4:	eef0 0a68 	vmov.f32	s1, s17
 80117b8:	ecbd 8b02 	vpop	{d8}
 80117bc:	bd38      	pop	{r3, r4, r5, pc}
 80117be:	bf00      	nop
 80117c0:	3ff00000 	.word	0x3ff00000
 80117c4:	08014693 	.word	0x08014693

080117c8 <atan2>:
 80117c8:	f000 bb1a 	b.w	8011e00 <__ieee754_atan2>

080117cc <pow>:
 80117cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ce:	ed2d 8b02 	vpush	{d8}
 80117d2:	eeb0 8a40 	vmov.f32	s16, s0
 80117d6:	eef0 8a60 	vmov.f32	s17, s1
 80117da:	ec55 4b11 	vmov	r4, r5, d1
 80117de:	f000 fbdb 	bl	8011f98 <__ieee754_pow>
 80117e2:	4622      	mov	r2, r4
 80117e4:	462b      	mov	r3, r5
 80117e6:	4620      	mov	r0, r4
 80117e8:	4629      	mov	r1, r5
 80117ea:	ec57 6b10 	vmov	r6, r7, d0
 80117ee:	f7ef f9b5 	bl	8000b5c <__aeabi_dcmpun>
 80117f2:	2800      	cmp	r0, #0
 80117f4:	d13b      	bne.n	801186e <pow+0xa2>
 80117f6:	ec51 0b18 	vmov	r0, r1, d8
 80117fa:	2200      	movs	r2, #0
 80117fc:	2300      	movs	r3, #0
 80117fe:	f7ef f97b 	bl	8000af8 <__aeabi_dcmpeq>
 8011802:	b1b8      	cbz	r0, 8011834 <pow+0x68>
 8011804:	2200      	movs	r2, #0
 8011806:	2300      	movs	r3, #0
 8011808:	4620      	mov	r0, r4
 801180a:	4629      	mov	r1, r5
 801180c:	f7ef f974 	bl	8000af8 <__aeabi_dcmpeq>
 8011810:	2800      	cmp	r0, #0
 8011812:	d146      	bne.n	80118a2 <pow+0xd6>
 8011814:	ec45 4b10 	vmov	d0, r4, r5
 8011818:	f002 fa63 	bl	8013ce2 <finite>
 801181c:	b338      	cbz	r0, 801186e <pow+0xa2>
 801181e:	2200      	movs	r2, #0
 8011820:	2300      	movs	r3, #0
 8011822:	4620      	mov	r0, r4
 8011824:	4629      	mov	r1, r5
 8011826:	f7ef f971 	bl	8000b0c <__aeabi_dcmplt>
 801182a:	b300      	cbz	r0, 801186e <pow+0xa2>
 801182c:	f7fa fdb6 	bl	800c39c <__errno>
 8011830:	2322      	movs	r3, #34	; 0x22
 8011832:	e01b      	b.n	801186c <pow+0xa0>
 8011834:	ec47 6b10 	vmov	d0, r6, r7
 8011838:	f002 fa53 	bl	8013ce2 <finite>
 801183c:	b9e0      	cbnz	r0, 8011878 <pow+0xac>
 801183e:	eeb0 0a48 	vmov.f32	s0, s16
 8011842:	eef0 0a68 	vmov.f32	s1, s17
 8011846:	f002 fa4c 	bl	8013ce2 <finite>
 801184a:	b1a8      	cbz	r0, 8011878 <pow+0xac>
 801184c:	ec45 4b10 	vmov	d0, r4, r5
 8011850:	f002 fa47 	bl	8013ce2 <finite>
 8011854:	b180      	cbz	r0, 8011878 <pow+0xac>
 8011856:	4632      	mov	r2, r6
 8011858:	463b      	mov	r3, r7
 801185a:	4630      	mov	r0, r6
 801185c:	4639      	mov	r1, r7
 801185e:	f7ef f97d 	bl	8000b5c <__aeabi_dcmpun>
 8011862:	2800      	cmp	r0, #0
 8011864:	d0e2      	beq.n	801182c <pow+0x60>
 8011866:	f7fa fd99 	bl	800c39c <__errno>
 801186a:	2321      	movs	r3, #33	; 0x21
 801186c:	6003      	str	r3, [r0, #0]
 801186e:	ecbd 8b02 	vpop	{d8}
 8011872:	ec47 6b10 	vmov	d0, r6, r7
 8011876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011878:	2200      	movs	r2, #0
 801187a:	2300      	movs	r3, #0
 801187c:	4630      	mov	r0, r6
 801187e:	4639      	mov	r1, r7
 8011880:	f7ef f93a 	bl	8000af8 <__aeabi_dcmpeq>
 8011884:	2800      	cmp	r0, #0
 8011886:	d0f2      	beq.n	801186e <pow+0xa2>
 8011888:	eeb0 0a48 	vmov.f32	s0, s16
 801188c:	eef0 0a68 	vmov.f32	s1, s17
 8011890:	f002 fa27 	bl	8013ce2 <finite>
 8011894:	2800      	cmp	r0, #0
 8011896:	d0ea      	beq.n	801186e <pow+0xa2>
 8011898:	ec45 4b10 	vmov	d0, r4, r5
 801189c:	f002 fa21 	bl	8013ce2 <finite>
 80118a0:	e7c3      	b.n	801182a <pow+0x5e>
 80118a2:	4f01      	ldr	r7, [pc, #4]	; (80118a8 <pow+0xdc>)
 80118a4:	2600      	movs	r6, #0
 80118a6:	e7e2      	b.n	801186e <pow+0xa2>
 80118a8:	3ff00000 	.word	0x3ff00000

080118ac <sqrt>:
 80118ac:	b538      	push	{r3, r4, r5, lr}
 80118ae:	ed2d 8b02 	vpush	{d8}
 80118b2:	ec55 4b10 	vmov	r4, r5, d0
 80118b6:	f001 faab 	bl	8012e10 <__ieee754_sqrt>
 80118ba:	4622      	mov	r2, r4
 80118bc:	462b      	mov	r3, r5
 80118be:	4620      	mov	r0, r4
 80118c0:	4629      	mov	r1, r5
 80118c2:	eeb0 8a40 	vmov.f32	s16, s0
 80118c6:	eef0 8a60 	vmov.f32	s17, s1
 80118ca:	f7ef f947 	bl	8000b5c <__aeabi_dcmpun>
 80118ce:	b990      	cbnz	r0, 80118f6 <sqrt+0x4a>
 80118d0:	2200      	movs	r2, #0
 80118d2:	2300      	movs	r3, #0
 80118d4:	4620      	mov	r0, r4
 80118d6:	4629      	mov	r1, r5
 80118d8:	f7ef f918 	bl	8000b0c <__aeabi_dcmplt>
 80118dc:	b158      	cbz	r0, 80118f6 <sqrt+0x4a>
 80118de:	f7fa fd5d 	bl	800c39c <__errno>
 80118e2:	2321      	movs	r3, #33	; 0x21
 80118e4:	6003      	str	r3, [r0, #0]
 80118e6:	2200      	movs	r2, #0
 80118e8:	2300      	movs	r3, #0
 80118ea:	4610      	mov	r0, r2
 80118ec:	4619      	mov	r1, r3
 80118ee:	f7ee ffc5 	bl	800087c <__aeabi_ddiv>
 80118f2:	ec41 0b18 	vmov	d8, r0, r1
 80118f6:	eeb0 0a48 	vmov.f32	s0, s16
 80118fa:	eef0 0a68 	vmov.f32	s1, s17
 80118fe:	ecbd 8b02 	vpop	{d8}
 8011902:	bd38      	pop	{r3, r4, r5, pc}

08011904 <sqrtf>:
 8011904:	b508      	push	{r3, lr}
 8011906:	ed2d 8b02 	vpush	{d8}
 801190a:	eeb0 8a40 	vmov.f32	s16, s0
 801190e:	f001 fb31 	bl	8012f74 <__ieee754_sqrtf>
 8011912:	eeb4 8a48 	vcmp.f32	s16, s16
 8011916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191a:	d60c      	bvs.n	8011936 <sqrtf+0x32>
 801191c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801193c <sqrtf+0x38>
 8011920:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011928:	d505      	bpl.n	8011936 <sqrtf+0x32>
 801192a:	f7fa fd37 	bl	800c39c <__errno>
 801192e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011932:	2321      	movs	r3, #33	; 0x21
 8011934:	6003      	str	r3, [r0, #0]
 8011936:	ecbd 8b02 	vpop	{d8}
 801193a:	bd08      	pop	{r3, pc}
 801193c:	00000000 	.word	0x00000000

08011940 <__ieee754_acos>:
 8011940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011944:	ec55 4b10 	vmov	r4, r5, d0
 8011948:	49b7      	ldr	r1, [pc, #732]	; (8011c28 <__ieee754_acos+0x2e8>)
 801194a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801194e:	428b      	cmp	r3, r1
 8011950:	dd1b      	ble.n	801198a <__ieee754_acos+0x4a>
 8011952:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8011956:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801195a:	4323      	orrs	r3, r4
 801195c:	d106      	bne.n	801196c <__ieee754_acos+0x2c>
 801195e:	2d00      	cmp	r5, #0
 8011960:	f300 8211 	bgt.w	8011d86 <__ieee754_acos+0x446>
 8011964:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8011bc0 <__ieee754_acos+0x280>
 8011968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801196c:	ee10 2a10 	vmov	r2, s0
 8011970:	462b      	mov	r3, r5
 8011972:	ee10 0a10 	vmov	r0, s0
 8011976:	4629      	mov	r1, r5
 8011978:	f7ee fc9e 	bl	80002b8 <__aeabi_dsub>
 801197c:	4602      	mov	r2, r0
 801197e:	460b      	mov	r3, r1
 8011980:	f7ee ff7c 	bl	800087c <__aeabi_ddiv>
 8011984:	ec41 0b10 	vmov	d0, r0, r1
 8011988:	e7ee      	b.n	8011968 <__ieee754_acos+0x28>
 801198a:	49a8      	ldr	r1, [pc, #672]	; (8011c2c <__ieee754_acos+0x2ec>)
 801198c:	428b      	cmp	r3, r1
 801198e:	f300 8087 	bgt.w	8011aa0 <__ieee754_acos+0x160>
 8011992:	4aa7      	ldr	r2, [pc, #668]	; (8011c30 <__ieee754_acos+0x2f0>)
 8011994:	4293      	cmp	r3, r2
 8011996:	f340 81f9 	ble.w	8011d8c <__ieee754_acos+0x44c>
 801199a:	ee10 2a10 	vmov	r2, s0
 801199e:	ee10 0a10 	vmov	r0, s0
 80119a2:	462b      	mov	r3, r5
 80119a4:	4629      	mov	r1, r5
 80119a6:	f7ee fe3f 	bl	8000628 <__aeabi_dmul>
 80119aa:	a387      	add	r3, pc, #540	; (adr r3, 8011bc8 <__ieee754_acos+0x288>)
 80119ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b0:	4606      	mov	r6, r0
 80119b2:	460f      	mov	r7, r1
 80119b4:	f7ee fe38 	bl	8000628 <__aeabi_dmul>
 80119b8:	a385      	add	r3, pc, #532	; (adr r3, 8011bd0 <__ieee754_acos+0x290>)
 80119ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119be:	f7ee fc7d 	bl	80002bc <__adddf3>
 80119c2:	4632      	mov	r2, r6
 80119c4:	463b      	mov	r3, r7
 80119c6:	f7ee fe2f 	bl	8000628 <__aeabi_dmul>
 80119ca:	a383      	add	r3, pc, #524	; (adr r3, 8011bd8 <__ieee754_acos+0x298>)
 80119cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d0:	f7ee fc72 	bl	80002b8 <__aeabi_dsub>
 80119d4:	4632      	mov	r2, r6
 80119d6:	463b      	mov	r3, r7
 80119d8:	f7ee fe26 	bl	8000628 <__aeabi_dmul>
 80119dc:	a380      	add	r3, pc, #512	; (adr r3, 8011be0 <__ieee754_acos+0x2a0>)
 80119de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e2:	f7ee fc6b 	bl	80002bc <__adddf3>
 80119e6:	4632      	mov	r2, r6
 80119e8:	463b      	mov	r3, r7
 80119ea:	f7ee fe1d 	bl	8000628 <__aeabi_dmul>
 80119ee:	a37e      	add	r3, pc, #504	; (adr r3, 8011be8 <__ieee754_acos+0x2a8>)
 80119f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f4:	f7ee fc60 	bl	80002b8 <__aeabi_dsub>
 80119f8:	4632      	mov	r2, r6
 80119fa:	463b      	mov	r3, r7
 80119fc:	f7ee fe14 	bl	8000628 <__aeabi_dmul>
 8011a00:	a37b      	add	r3, pc, #492	; (adr r3, 8011bf0 <__ieee754_acos+0x2b0>)
 8011a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a06:	f7ee fc59 	bl	80002bc <__adddf3>
 8011a0a:	4632      	mov	r2, r6
 8011a0c:	463b      	mov	r3, r7
 8011a0e:	f7ee fe0b 	bl	8000628 <__aeabi_dmul>
 8011a12:	a379      	add	r3, pc, #484	; (adr r3, 8011bf8 <__ieee754_acos+0x2b8>)
 8011a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a18:	4680      	mov	r8, r0
 8011a1a:	4689      	mov	r9, r1
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	4639      	mov	r1, r7
 8011a20:	f7ee fe02 	bl	8000628 <__aeabi_dmul>
 8011a24:	a376      	add	r3, pc, #472	; (adr r3, 8011c00 <__ieee754_acos+0x2c0>)
 8011a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a2a:	f7ee fc45 	bl	80002b8 <__aeabi_dsub>
 8011a2e:	4632      	mov	r2, r6
 8011a30:	463b      	mov	r3, r7
 8011a32:	f7ee fdf9 	bl	8000628 <__aeabi_dmul>
 8011a36:	a374      	add	r3, pc, #464	; (adr r3, 8011c08 <__ieee754_acos+0x2c8>)
 8011a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a3c:	f7ee fc3e 	bl	80002bc <__adddf3>
 8011a40:	4632      	mov	r2, r6
 8011a42:	463b      	mov	r3, r7
 8011a44:	f7ee fdf0 	bl	8000628 <__aeabi_dmul>
 8011a48:	a371      	add	r3, pc, #452	; (adr r3, 8011c10 <__ieee754_acos+0x2d0>)
 8011a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a4e:	f7ee fc33 	bl	80002b8 <__aeabi_dsub>
 8011a52:	4632      	mov	r2, r6
 8011a54:	463b      	mov	r3, r7
 8011a56:	f7ee fde7 	bl	8000628 <__aeabi_dmul>
 8011a5a:	4b76      	ldr	r3, [pc, #472]	; (8011c34 <__ieee754_acos+0x2f4>)
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	f7ee fc2d 	bl	80002bc <__adddf3>
 8011a62:	4602      	mov	r2, r0
 8011a64:	460b      	mov	r3, r1
 8011a66:	4640      	mov	r0, r8
 8011a68:	4649      	mov	r1, r9
 8011a6a:	f7ee ff07 	bl	800087c <__aeabi_ddiv>
 8011a6e:	4622      	mov	r2, r4
 8011a70:	462b      	mov	r3, r5
 8011a72:	f7ee fdd9 	bl	8000628 <__aeabi_dmul>
 8011a76:	4602      	mov	r2, r0
 8011a78:	460b      	mov	r3, r1
 8011a7a:	a167      	add	r1, pc, #412	; (adr r1, 8011c18 <__ieee754_acos+0x2d8>)
 8011a7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a80:	f7ee fc1a 	bl	80002b8 <__aeabi_dsub>
 8011a84:	4602      	mov	r2, r0
 8011a86:	460b      	mov	r3, r1
 8011a88:	4620      	mov	r0, r4
 8011a8a:	4629      	mov	r1, r5
 8011a8c:	f7ee fc14 	bl	80002b8 <__aeabi_dsub>
 8011a90:	4602      	mov	r2, r0
 8011a92:	460b      	mov	r3, r1
 8011a94:	a162      	add	r1, pc, #392	; (adr r1, 8011c20 <__ieee754_acos+0x2e0>)
 8011a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a9a:	f7ee fc0d 	bl	80002b8 <__aeabi_dsub>
 8011a9e:	e771      	b.n	8011984 <__ieee754_acos+0x44>
 8011aa0:	2d00      	cmp	r5, #0
 8011aa2:	f280 80cb 	bge.w	8011c3c <__ieee754_acos+0x2fc>
 8011aa6:	ee10 0a10 	vmov	r0, s0
 8011aaa:	4b62      	ldr	r3, [pc, #392]	; (8011c34 <__ieee754_acos+0x2f4>)
 8011aac:	2200      	movs	r2, #0
 8011aae:	4629      	mov	r1, r5
 8011ab0:	f7ee fc04 	bl	80002bc <__adddf3>
 8011ab4:	4b60      	ldr	r3, [pc, #384]	; (8011c38 <__ieee754_acos+0x2f8>)
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	f7ee fdb6 	bl	8000628 <__aeabi_dmul>
 8011abc:	a342      	add	r3, pc, #264	; (adr r3, 8011bc8 <__ieee754_acos+0x288>)
 8011abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	460d      	mov	r5, r1
 8011ac6:	f7ee fdaf 	bl	8000628 <__aeabi_dmul>
 8011aca:	a341      	add	r3, pc, #260	; (adr r3, 8011bd0 <__ieee754_acos+0x290>)
 8011acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad0:	f7ee fbf4 	bl	80002bc <__adddf3>
 8011ad4:	4622      	mov	r2, r4
 8011ad6:	462b      	mov	r3, r5
 8011ad8:	f7ee fda6 	bl	8000628 <__aeabi_dmul>
 8011adc:	a33e      	add	r3, pc, #248	; (adr r3, 8011bd8 <__ieee754_acos+0x298>)
 8011ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae2:	f7ee fbe9 	bl	80002b8 <__aeabi_dsub>
 8011ae6:	4622      	mov	r2, r4
 8011ae8:	462b      	mov	r3, r5
 8011aea:	f7ee fd9d 	bl	8000628 <__aeabi_dmul>
 8011aee:	a33c      	add	r3, pc, #240	; (adr r3, 8011be0 <__ieee754_acos+0x2a0>)
 8011af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af4:	f7ee fbe2 	bl	80002bc <__adddf3>
 8011af8:	4622      	mov	r2, r4
 8011afa:	462b      	mov	r3, r5
 8011afc:	f7ee fd94 	bl	8000628 <__aeabi_dmul>
 8011b00:	a339      	add	r3, pc, #228	; (adr r3, 8011be8 <__ieee754_acos+0x2a8>)
 8011b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b06:	f7ee fbd7 	bl	80002b8 <__aeabi_dsub>
 8011b0a:	4622      	mov	r2, r4
 8011b0c:	462b      	mov	r3, r5
 8011b0e:	f7ee fd8b 	bl	8000628 <__aeabi_dmul>
 8011b12:	a337      	add	r3, pc, #220	; (adr r3, 8011bf0 <__ieee754_acos+0x2b0>)
 8011b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b18:	f7ee fbd0 	bl	80002bc <__adddf3>
 8011b1c:	4622      	mov	r2, r4
 8011b1e:	462b      	mov	r3, r5
 8011b20:	f7ee fd82 	bl	8000628 <__aeabi_dmul>
 8011b24:	ec45 4b10 	vmov	d0, r4, r5
 8011b28:	4680      	mov	r8, r0
 8011b2a:	4689      	mov	r9, r1
 8011b2c:	f001 f970 	bl	8012e10 <__ieee754_sqrt>
 8011b30:	a331      	add	r3, pc, #196	; (adr r3, 8011bf8 <__ieee754_acos+0x2b8>)
 8011b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b36:	4620      	mov	r0, r4
 8011b38:	4629      	mov	r1, r5
 8011b3a:	ec57 6b10 	vmov	r6, r7, d0
 8011b3e:	f7ee fd73 	bl	8000628 <__aeabi_dmul>
 8011b42:	a32f      	add	r3, pc, #188	; (adr r3, 8011c00 <__ieee754_acos+0x2c0>)
 8011b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b48:	f7ee fbb6 	bl	80002b8 <__aeabi_dsub>
 8011b4c:	4622      	mov	r2, r4
 8011b4e:	462b      	mov	r3, r5
 8011b50:	f7ee fd6a 	bl	8000628 <__aeabi_dmul>
 8011b54:	a32c      	add	r3, pc, #176	; (adr r3, 8011c08 <__ieee754_acos+0x2c8>)
 8011b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5a:	f7ee fbaf 	bl	80002bc <__adddf3>
 8011b5e:	4622      	mov	r2, r4
 8011b60:	462b      	mov	r3, r5
 8011b62:	f7ee fd61 	bl	8000628 <__aeabi_dmul>
 8011b66:	a32a      	add	r3, pc, #168	; (adr r3, 8011c10 <__ieee754_acos+0x2d0>)
 8011b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6c:	f7ee fba4 	bl	80002b8 <__aeabi_dsub>
 8011b70:	4622      	mov	r2, r4
 8011b72:	462b      	mov	r3, r5
 8011b74:	f7ee fd58 	bl	8000628 <__aeabi_dmul>
 8011b78:	4b2e      	ldr	r3, [pc, #184]	; (8011c34 <__ieee754_acos+0x2f4>)
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	f7ee fb9e 	bl	80002bc <__adddf3>
 8011b80:	4602      	mov	r2, r0
 8011b82:	460b      	mov	r3, r1
 8011b84:	4640      	mov	r0, r8
 8011b86:	4649      	mov	r1, r9
 8011b88:	f7ee fe78 	bl	800087c <__aeabi_ddiv>
 8011b8c:	4632      	mov	r2, r6
 8011b8e:	463b      	mov	r3, r7
 8011b90:	f7ee fd4a 	bl	8000628 <__aeabi_dmul>
 8011b94:	a320      	add	r3, pc, #128	; (adr r3, 8011c18 <__ieee754_acos+0x2d8>)
 8011b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9a:	f7ee fb8d 	bl	80002b8 <__aeabi_dsub>
 8011b9e:	4632      	mov	r2, r6
 8011ba0:	463b      	mov	r3, r7
 8011ba2:	f7ee fb8b 	bl	80002bc <__adddf3>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	460b      	mov	r3, r1
 8011baa:	f7ee fb87 	bl	80002bc <__adddf3>
 8011bae:	4602      	mov	r2, r0
 8011bb0:	460b      	mov	r3, r1
 8011bb2:	a103      	add	r1, pc, #12	; (adr r1, 8011bc0 <__ieee754_acos+0x280>)
 8011bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bb8:	e76f      	b.n	8011a9a <__ieee754_acos+0x15a>
 8011bba:	bf00      	nop
 8011bbc:	f3af 8000 	nop.w
 8011bc0:	54442d18 	.word	0x54442d18
 8011bc4:	400921fb 	.word	0x400921fb
 8011bc8:	0dfdf709 	.word	0x0dfdf709
 8011bcc:	3f023de1 	.word	0x3f023de1
 8011bd0:	7501b288 	.word	0x7501b288
 8011bd4:	3f49efe0 	.word	0x3f49efe0
 8011bd8:	b5688f3b 	.word	0xb5688f3b
 8011bdc:	3fa48228 	.word	0x3fa48228
 8011be0:	0e884455 	.word	0x0e884455
 8011be4:	3fc9c155 	.word	0x3fc9c155
 8011be8:	03eb6f7d 	.word	0x03eb6f7d
 8011bec:	3fd4d612 	.word	0x3fd4d612
 8011bf0:	55555555 	.word	0x55555555
 8011bf4:	3fc55555 	.word	0x3fc55555
 8011bf8:	b12e9282 	.word	0xb12e9282
 8011bfc:	3fb3b8c5 	.word	0x3fb3b8c5
 8011c00:	1b8d0159 	.word	0x1b8d0159
 8011c04:	3fe6066c 	.word	0x3fe6066c
 8011c08:	9c598ac8 	.word	0x9c598ac8
 8011c0c:	40002ae5 	.word	0x40002ae5
 8011c10:	1c8a2d4b 	.word	0x1c8a2d4b
 8011c14:	40033a27 	.word	0x40033a27
 8011c18:	33145c07 	.word	0x33145c07
 8011c1c:	3c91a626 	.word	0x3c91a626
 8011c20:	54442d18 	.word	0x54442d18
 8011c24:	3ff921fb 	.word	0x3ff921fb
 8011c28:	3fefffff 	.word	0x3fefffff
 8011c2c:	3fdfffff 	.word	0x3fdfffff
 8011c30:	3c600000 	.word	0x3c600000
 8011c34:	3ff00000 	.word	0x3ff00000
 8011c38:	3fe00000 	.word	0x3fe00000
 8011c3c:	ee10 2a10 	vmov	r2, s0
 8011c40:	462b      	mov	r3, r5
 8011c42:	496d      	ldr	r1, [pc, #436]	; (8011df8 <__ieee754_acos+0x4b8>)
 8011c44:	2000      	movs	r0, #0
 8011c46:	f7ee fb37 	bl	80002b8 <__aeabi_dsub>
 8011c4a:	4b6c      	ldr	r3, [pc, #432]	; (8011dfc <__ieee754_acos+0x4bc>)
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	f7ee fceb 	bl	8000628 <__aeabi_dmul>
 8011c52:	4604      	mov	r4, r0
 8011c54:	460d      	mov	r5, r1
 8011c56:	ec45 4b10 	vmov	d0, r4, r5
 8011c5a:	f001 f8d9 	bl	8012e10 <__ieee754_sqrt>
 8011c5e:	a34e      	add	r3, pc, #312	; (adr r3, 8011d98 <__ieee754_acos+0x458>)
 8011c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c64:	4620      	mov	r0, r4
 8011c66:	4629      	mov	r1, r5
 8011c68:	ec59 8b10 	vmov	r8, r9, d0
 8011c6c:	f7ee fcdc 	bl	8000628 <__aeabi_dmul>
 8011c70:	a34b      	add	r3, pc, #300	; (adr r3, 8011da0 <__ieee754_acos+0x460>)
 8011c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c76:	f7ee fb21 	bl	80002bc <__adddf3>
 8011c7a:	4622      	mov	r2, r4
 8011c7c:	462b      	mov	r3, r5
 8011c7e:	f7ee fcd3 	bl	8000628 <__aeabi_dmul>
 8011c82:	a349      	add	r3, pc, #292	; (adr r3, 8011da8 <__ieee754_acos+0x468>)
 8011c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c88:	f7ee fb16 	bl	80002b8 <__aeabi_dsub>
 8011c8c:	4622      	mov	r2, r4
 8011c8e:	462b      	mov	r3, r5
 8011c90:	f7ee fcca 	bl	8000628 <__aeabi_dmul>
 8011c94:	a346      	add	r3, pc, #280	; (adr r3, 8011db0 <__ieee754_acos+0x470>)
 8011c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c9a:	f7ee fb0f 	bl	80002bc <__adddf3>
 8011c9e:	4622      	mov	r2, r4
 8011ca0:	462b      	mov	r3, r5
 8011ca2:	f7ee fcc1 	bl	8000628 <__aeabi_dmul>
 8011ca6:	a344      	add	r3, pc, #272	; (adr r3, 8011db8 <__ieee754_acos+0x478>)
 8011ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cac:	f7ee fb04 	bl	80002b8 <__aeabi_dsub>
 8011cb0:	4622      	mov	r2, r4
 8011cb2:	462b      	mov	r3, r5
 8011cb4:	f7ee fcb8 	bl	8000628 <__aeabi_dmul>
 8011cb8:	a341      	add	r3, pc, #260	; (adr r3, 8011dc0 <__ieee754_acos+0x480>)
 8011cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cbe:	f7ee fafd 	bl	80002bc <__adddf3>
 8011cc2:	4622      	mov	r2, r4
 8011cc4:	462b      	mov	r3, r5
 8011cc6:	f7ee fcaf 	bl	8000628 <__aeabi_dmul>
 8011cca:	a33f      	add	r3, pc, #252	; (adr r3, 8011dc8 <__ieee754_acos+0x488>)
 8011ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd0:	4682      	mov	sl, r0
 8011cd2:	468b      	mov	fp, r1
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	4629      	mov	r1, r5
 8011cd8:	f7ee fca6 	bl	8000628 <__aeabi_dmul>
 8011cdc:	a33c      	add	r3, pc, #240	; (adr r3, 8011dd0 <__ieee754_acos+0x490>)
 8011cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce2:	f7ee fae9 	bl	80002b8 <__aeabi_dsub>
 8011ce6:	4622      	mov	r2, r4
 8011ce8:	462b      	mov	r3, r5
 8011cea:	f7ee fc9d 	bl	8000628 <__aeabi_dmul>
 8011cee:	a33a      	add	r3, pc, #232	; (adr r3, 8011dd8 <__ieee754_acos+0x498>)
 8011cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf4:	f7ee fae2 	bl	80002bc <__adddf3>
 8011cf8:	4622      	mov	r2, r4
 8011cfa:	462b      	mov	r3, r5
 8011cfc:	f7ee fc94 	bl	8000628 <__aeabi_dmul>
 8011d00:	a337      	add	r3, pc, #220	; (adr r3, 8011de0 <__ieee754_acos+0x4a0>)
 8011d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d06:	f7ee fad7 	bl	80002b8 <__aeabi_dsub>
 8011d0a:	4622      	mov	r2, r4
 8011d0c:	462b      	mov	r3, r5
 8011d0e:	f7ee fc8b 	bl	8000628 <__aeabi_dmul>
 8011d12:	4b39      	ldr	r3, [pc, #228]	; (8011df8 <__ieee754_acos+0x4b8>)
 8011d14:	2200      	movs	r2, #0
 8011d16:	f7ee fad1 	bl	80002bc <__adddf3>
 8011d1a:	4602      	mov	r2, r0
 8011d1c:	460b      	mov	r3, r1
 8011d1e:	4650      	mov	r0, sl
 8011d20:	4659      	mov	r1, fp
 8011d22:	f7ee fdab 	bl	800087c <__aeabi_ddiv>
 8011d26:	4642      	mov	r2, r8
 8011d28:	464b      	mov	r3, r9
 8011d2a:	f7ee fc7d 	bl	8000628 <__aeabi_dmul>
 8011d2e:	2600      	movs	r6, #0
 8011d30:	4682      	mov	sl, r0
 8011d32:	468b      	mov	fp, r1
 8011d34:	4632      	mov	r2, r6
 8011d36:	464b      	mov	r3, r9
 8011d38:	4630      	mov	r0, r6
 8011d3a:	4649      	mov	r1, r9
 8011d3c:	f7ee fc74 	bl	8000628 <__aeabi_dmul>
 8011d40:	4602      	mov	r2, r0
 8011d42:	460b      	mov	r3, r1
 8011d44:	4620      	mov	r0, r4
 8011d46:	4629      	mov	r1, r5
 8011d48:	f7ee fab6 	bl	80002b8 <__aeabi_dsub>
 8011d4c:	4632      	mov	r2, r6
 8011d4e:	4604      	mov	r4, r0
 8011d50:	460d      	mov	r5, r1
 8011d52:	464b      	mov	r3, r9
 8011d54:	4640      	mov	r0, r8
 8011d56:	4649      	mov	r1, r9
 8011d58:	f7ee fab0 	bl	80002bc <__adddf3>
 8011d5c:	4602      	mov	r2, r0
 8011d5e:	460b      	mov	r3, r1
 8011d60:	4620      	mov	r0, r4
 8011d62:	4629      	mov	r1, r5
 8011d64:	f7ee fd8a 	bl	800087c <__aeabi_ddiv>
 8011d68:	4602      	mov	r2, r0
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	4650      	mov	r0, sl
 8011d6e:	4659      	mov	r1, fp
 8011d70:	f7ee faa4 	bl	80002bc <__adddf3>
 8011d74:	4632      	mov	r2, r6
 8011d76:	464b      	mov	r3, r9
 8011d78:	f7ee faa0 	bl	80002bc <__adddf3>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	460b      	mov	r3, r1
 8011d80:	f7ee fa9c 	bl	80002bc <__adddf3>
 8011d84:	e5fe      	b.n	8011984 <__ieee754_acos+0x44>
 8011d86:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011de8 <__ieee754_acos+0x4a8>
 8011d8a:	e5ed      	b.n	8011968 <__ieee754_acos+0x28>
 8011d8c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011df0 <__ieee754_acos+0x4b0>
 8011d90:	e5ea      	b.n	8011968 <__ieee754_acos+0x28>
 8011d92:	bf00      	nop
 8011d94:	f3af 8000 	nop.w
 8011d98:	0dfdf709 	.word	0x0dfdf709
 8011d9c:	3f023de1 	.word	0x3f023de1
 8011da0:	7501b288 	.word	0x7501b288
 8011da4:	3f49efe0 	.word	0x3f49efe0
 8011da8:	b5688f3b 	.word	0xb5688f3b
 8011dac:	3fa48228 	.word	0x3fa48228
 8011db0:	0e884455 	.word	0x0e884455
 8011db4:	3fc9c155 	.word	0x3fc9c155
 8011db8:	03eb6f7d 	.word	0x03eb6f7d
 8011dbc:	3fd4d612 	.word	0x3fd4d612
 8011dc0:	55555555 	.word	0x55555555
 8011dc4:	3fc55555 	.word	0x3fc55555
 8011dc8:	b12e9282 	.word	0xb12e9282
 8011dcc:	3fb3b8c5 	.word	0x3fb3b8c5
 8011dd0:	1b8d0159 	.word	0x1b8d0159
 8011dd4:	3fe6066c 	.word	0x3fe6066c
 8011dd8:	9c598ac8 	.word	0x9c598ac8
 8011ddc:	40002ae5 	.word	0x40002ae5
 8011de0:	1c8a2d4b 	.word	0x1c8a2d4b
 8011de4:	40033a27 	.word	0x40033a27
	...
 8011df0:	54442d18 	.word	0x54442d18
 8011df4:	3ff921fb 	.word	0x3ff921fb
 8011df8:	3ff00000 	.word	0x3ff00000
 8011dfc:	3fe00000 	.word	0x3fe00000

08011e00 <__ieee754_atan2>:
 8011e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e04:	ec57 6b11 	vmov	r6, r7, d1
 8011e08:	4273      	negs	r3, r6
 8011e0a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8011f90 <__ieee754_atan2+0x190>
 8011e0e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011e12:	4333      	orrs	r3, r6
 8011e14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011e18:	4573      	cmp	r3, lr
 8011e1a:	ec51 0b10 	vmov	r0, r1, d0
 8011e1e:	ee11 8a10 	vmov	r8, s2
 8011e22:	d80a      	bhi.n	8011e3a <__ieee754_atan2+0x3a>
 8011e24:	4244      	negs	r4, r0
 8011e26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011e2a:	4304      	orrs	r4, r0
 8011e2c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011e30:	4574      	cmp	r4, lr
 8011e32:	ee10 9a10 	vmov	r9, s0
 8011e36:	468c      	mov	ip, r1
 8011e38:	d907      	bls.n	8011e4a <__ieee754_atan2+0x4a>
 8011e3a:	4632      	mov	r2, r6
 8011e3c:	463b      	mov	r3, r7
 8011e3e:	f7ee fa3d 	bl	80002bc <__adddf3>
 8011e42:	ec41 0b10 	vmov	d0, r0, r1
 8011e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e4a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011e4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011e52:	4334      	orrs	r4, r6
 8011e54:	d103      	bne.n	8011e5e <__ieee754_atan2+0x5e>
 8011e56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e5a:	f001 bd99 	b.w	8013990 <atan>
 8011e5e:	17bc      	asrs	r4, r7, #30
 8011e60:	f004 0402 	and.w	r4, r4, #2
 8011e64:	ea53 0909 	orrs.w	r9, r3, r9
 8011e68:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011e6c:	d107      	bne.n	8011e7e <__ieee754_atan2+0x7e>
 8011e6e:	2c02      	cmp	r4, #2
 8011e70:	d060      	beq.n	8011f34 <__ieee754_atan2+0x134>
 8011e72:	2c03      	cmp	r4, #3
 8011e74:	d1e5      	bne.n	8011e42 <__ieee754_atan2+0x42>
 8011e76:	a142      	add	r1, pc, #264	; (adr r1, 8011f80 <__ieee754_atan2+0x180>)
 8011e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e7c:	e7e1      	b.n	8011e42 <__ieee754_atan2+0x42>
 8011e7e:	ea52 0808 	orrs.w	r8, r2, r8
 8011e82:	d106      	bne.n	8011e92 <__ieee754_atan2+0x92>
 8011e84:	f1bc 0f00 	cmp.w	ip, #0
 8011e88:	da5f      	bge.n	8011f4a <__ieee754_atan2+0x14a>
 8011e8a:	a13f      	add	r1, pc, #252	; (adr r1, 8011f88 <__ieee754_atan2+0x188>)
 8011e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e90:	e7d7      	b.n	8011e42 <__ieee754_atan2+0x42>
 8011e92:	4572      	cmp	r2, lr
 8011e94:	d10f      	bne.n	8011eb6 <__ieee754_atan2+0xb6>
 8011e96:	4293      	cmp	r3, r2
 8011e98:	f104 34ff 	add.w	r4, r4, #4294967295
 8011e9c:	d107      	bne.n	8011eae <__ieee754_atan2+0xae>
 8011e9e:	2c02      	cmp	r4, #2
 8011ea0:	d84c      	bhi.n	8011f3c <__ieee754_atan2+0x13c>
 8011ea2:	4b35      	ldr	r3, [pc, #212]	; (8011f78 <__ieee754_atan2+0x178>)
 8011ea4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011ea8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8011eac:	e7c9      	b.n	8011e42 <__ieee754_atan2+0x42>
 8011eae:	2c02      	cmp	r4, #2
 8011eb0:	d848      	bhi.n	8011f44 <__ieee754_atan2+0x144>
 8011eb2:	4b32      	ldr	r3, [pc, #200]	; (8011f7c <__ieee754_atan2+0x17c>)
 8011eb4:	e7f6      	b.n	8011ea4 <__ieee754_atan2+0xa4>
 8011eb6:	4573      	cmp	r3, lr
 8011eb8:	d0e4      	beq.n	8011e84 <__ieee754_atan2+0x84>
 8011eba:	1a9b      	subs	r3, r3, r2
 8011ebc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011ec0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011ec4:	da1e      	bge.n	8011f04 <__ieee754_atan2+0x104>
 8011ec6:	2f00      	cmp	r7, #0
 8011ec8:	da01      	bge.n	8011ece <__ieee754_atan2+0xce>
 8011eca:	323c      	adds	r2, #60	; 0x3c
 8011ecc:	db1e      	blt.n	8011f0c <__ieee754_atan2+0x10c>
 8011ece:	4632      	mov	r2, r6
 8011ed0:	463b      	mov	r3, r7
 8011ed2:	f7ee fcd3 	bl	800087c <__aeabi_ddiv>
 8011ed6:	ec41 0b10 	vmov	d0, r0, r1
 8011eda:	f001 fef9 	bl	8013cd0 <fabs>
 8011ede:	f001 fd57 	bl	8013990 <atan>
 8011ee2:	ec51 0b10 	vmov	r0, r1, d0
 8011ee6:	2c01      	cmp	r4, #1
 8011ee8:	d013      	beq.n	8011f12 <__ieee754_atan2+0x112>
 8011eea:	2c02      	cmp	r4, #2
 8011eec:	d015      	beq.n	8011f1a <__ieee754_atan2+0x11a>
 8011eee:	2c00      	cmp	r4, #0
 8011ef0:	d0a7      	beq.n	8011e42 <__ieee754_atan2+0x42>
 8011ef2:	a319      	add	r3, pc, #100	; (adr r3, 8011f58 <__ieee754_atan2+0x158>)
 8011ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef8:	f7ee f9de 	bl	80002b8 <__aeabi_dsub>
 8011efc:	a318      	add	r3, pc, #96	; (adr r3, 8011f60 <__ieee754_atan2+0x160>)
 8011efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f02:	e014      	b.n	8011f2e <__ieee754_atan2+0x12e>
 8011f04:	a118      	add	r1, pc, #96	; (adr r1, 8011f68 <__ieee754_atan2+0x168>)
 8011f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f0a:	e7ec      	b.n	8011ee6 <__ieee754_atan2+0xe6>
 8011f0c:	2000      	movs	r0, #0
 8011f0e:	2100      	movs	r1, #0
 8011f10:	e7e9      	b.n	8011ee6 <__ieee754_atan2+0xe6>
 8011f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f16:	4619      	mov	r1, r3
 8011f18:	e793      	b.n	8011e42 <__ieee754_atan2+0x42>
 8011f1a:	a30f      	add	r3, pc, #60	; (adr r3, 8011f58 <__ieee754_atan2+0x158>)
 8011f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f20:	f7ee f9ca 	bl	80002b8 <__aeabi_dsub>
 8011f24:	4602      	mov	r2, r0
 8011f26:	460b      	mov	r3, r1
 8011f28:	a10d      	add	r1, pc, #52	; (adr r1, 8011f60 <__ieee754_atan2+0x160>)
 8011f2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f2e:	f7ee f9c3 	bl	80002b8 <__aeabi_dsub>
 8011f32:	e786      	b.n	8011e42 <__ieee754_atan2+0x42>
 8011f34:	a10a      	add	r1, pc, #40	; (adr r1, 8011f60 <__ieee754_atan2+0x160>)
 8011f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f3a:	e782      	b.n	8011e42 <__ieee754_atan2+0x42>
 8011f3c:	a10c      	add	r1, pc, #48	; (adr r1, 8011f70 <__ieee754_atan2+0x170>)
 8011f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f42:	e77e      	b.n	8011e42 <__ieee754_atan2+0x42>
 8011f44:	2000      	movs	r0, #0
 8011f46:	2100      	movs	r1, #0
 8011f48:	e77b      	b.n	8011e42 <__ieee754_atan2+0x42>
 8011f4a:	a107      	add	r1, pc, #28	; (adr r1, 8011f68 <__ieee754_atan2+0x168>)
 8011f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f50:	e777      	b.n	8011e42 <__ieee754_atan2+0x42>
 8011f52:	bf00      	nop
 8011f54:	f3af 8000 	nop.w
 8011f58:	33145c07 	.word	0x33145c07
 8011f5c:	3ca1a626 	.word	0x3ca1a626
 8011f60:	54442d18 	.word	0x54442d18
 8011f64:	400921fb 	.word	0x400921fb
 8011f68:	54442d18 	.word	0x54442d18
 8011f6c:	3ff921fb 	.word	0x3ff921fb
 8011f70:	54442d18 	.word	0x54442d18
 8011f74:	3fe921fb 	.word	0x3fe921fb
 8011f78:	080146f8 	.word	0x080146f8
 8011f7c:	08014710 	.word	0x08014710
 8011f80:	54442d18 	.word	0x54442d18
 8011f84:	c00921fb 	.word	0xc00921fb
 8011f88:	54442d18 	.word	0x54442d18
 8011f8c:	bff921fb 	.word	0xbff921fb
 8011f90:	7ff00000 	.word	0x7ff00000
 8011f94:	00000000 	.word	0x00000000

08011f98 <__ieee754_pow>:
 8011f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f9c:	ed2d 8b06 	vpush	{d8-d10}
 8011fa0:	b089      	sub	sp, #36	; 0x24
 8011fa2:	ed8d 1b00 	vstr	d1, [sp]
 8011fa6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011faa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011fae:	ea58 0102 	orrs.w	r1, r8, r2
 8011fb2:	ec57 6b10 	vmov	r6, r7, d0
 8011fb6:	d115      	bne.n	8011fe4 <__ieee754_pow+0x4c>
 8011fb8:	19b3      	adds	r3, r6, r6
 8011fba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011fbe:	4152      	adcs	r2, r2
 8011fc0:	4299      	cmp	r1, r3
 8011fc2:	4b89      	ldr	r3, [pc, #548]	; (80121e8 <__ieee754_pow+0x250>)
 8011fc4:	4193      	sbcs	r3, r2
 8011fc6:	f080 84d2 	bcs.w	801296e <__ieee754_pow+0x9d6>
 8011fca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011fce:	4630      	mov	r0, r6
 8011fd0:	4639      	mov	r1, r7
 8011fd2:	f7ee f973 	bl	80002bc <__adddf3>
 8011fd6:	ec41 0b10 	vmov	d0, r0, r1
 8011fda:	b009      	add	sp, #36	; 0x24
 8011fdc:	ecbd 8b06 	vpop	{d8-d10}
 8011fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fe4:	4b81      	ldr	r3, [pc, #516]	; (80121ec <__ieee754_pow+0x254>)
 8011fe6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011fea:	429c      	cmp	r4, r3
 8011fec:	ee10 aa10 	vmov	sl, s0
 8011ff0:	463d      	mov	r5, r7
 8011ff2:	dc06      	bgt.n	8012002 <__ieee754_pow+0x6a>
 8011ff4:	d101      	bne.n	8011ffa <__ieee754_pow+0x62>
 8011ff6:	2e00      	cmp	r6, #0
 8011ff8:	d1e7      	bne.n	8011fca <__ieee754_pow+0x32>
 8011ffa:	4598      	cmp	r8, r3
 8011ffc:	dc01      	bgt.n	8012002 <__ieee754_pow+0x6a>
 8011ffe:	d10f      	bne.n	8012020 <__ieee754_pow+0x88>
 8012000:	b172      	cbz	r2, 8012020 <__ieee754_pow+0x88>
 8012002:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012006:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801200a:	ea55 050a 	orrs.w	r5, r5, sl
 801200e:	d1dc      	bne.n	8011fca <__ieee754_pow+0x32>
 8012010:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012014:	18db      	adds	r3, r3, r3
 8012016:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801201a:	4152      	adcs	r2, r2
 801201c:	429d      	cmp	r5, r3
 801201e:	e7d0      	b.n	8011fc2 <__ieee754_pow+0x2a>
 8012020:	2d00      	cmp	r5, #0
 8012022:	da3b      	bge.n	801209c <__ieee754_pow+0x104>
 8012024:	4b72      	ldr	r3, [pc, #456]	; (80121f0 <__ieee754_pow+0x258>)
 8012026:	4598      	cmp	r8, r3
 8012028:	dc51      	bgt.n	80120ce <__ieee754_pow+0x136>
 801202a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801202e:	4598      	cmp	r8, r3
 8012030:	f340 84ac 	ble.w	801298c <__ieee754_pow+0x9f4>
 8012034:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012038:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801203c:	2b14      	cmp	r3, #20
 801203e:	dd0f      	ble.n	8012060 <__ieee754_pow+0xc8>
 8012040:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012044:	fa22 f103 	lsr.w	r1, r2, r3
 8012048:	fa01 f303 	lsl.w	r3, r1, r3
 801204c:	4293      	cmp	r3, r2
 801204e:	f040 849d 	bne.w	801298c <__ieee754_pow+0x9f4>
 8012052:	f001 0101 	and.w	r1, r1, #1
 8012056:	f1c1 0302 	rsb	r3, r1, #2
 801205a:	9304      	str	r3, [sp, #16]
 801205c:	b182      	cbz	r2, 8012080 <__ieee754_pow+0xe8>
 801205e:	e05f      	b.n	8012120 <__ieee754_pow+0x188>
 8012060:	2a00      	cmp	r2, #0
 8012062:	d15b      	bne.n	801211c <__ieee754_pow+0x184>
 8012064:	f1c3 0314 	rsb	r3, r3, #20
 8012068:	fa48 f103 	asr.w	r1, r8, r3
 801206c:	fa01 f303 	lsl.w	r3, r1, r3
 8012070:	4543      	cmp	r3, r8
 8012072:	f040 8488 	bne.w	8012986 <__ieee754_pow+0x9ee>
 8012076:	f001 0101 	and.w	r1, r1, #1
 801207a:	f1c1 0302 	rsb	r3, r1, #2
 801207e:	9304      	str	r3, [sp, #16]
 8012080:	4b5c      	ldr	r3, [pc, #368]	; (80121f4 <__ieee754_pow+0x25c>)
 8012082:	4598      	cmp	r8, r3
 8012084:	d132      	bne.n	80120ec <__ieee754_pow+0x154>
 8012086:	f1b9 0f00 	cmp.w	r9, #0
 801208a:	f280 8478 	bge.w	801297e <__ieee754_pow+0x9e6>
 801208e:	4959      	ldr	r1, [pc, #356]	; (80121f4 <__ieee754_pow+0x25c>)
 8012090:	4632      	mov	r2, r6
 8012092:	463b      	mov	r3, r7
 8012094:	2000      	movs	r0, #0
 8012096:	f7ee fbf1 	bl	800087c <__aeabi_ddiv>
 801209a:	e79c      	b.n	8011fd6 <__ieee754_pow+0x3e>
 801209c:	2300      	movs	r3, #0
 801209e:	9304      	str	r3, [sp, #16]
 80120a0:	2a00      	cmp	r2, #0
 80120a2:	d13d      	bne.n	8012120 <__ieee754_pow+0x188>
 80120a4:	4b51      	ldr	r3, [pc, #324]	; (80121ec <__ieee754_pow+0x254>)
 80120a6:	4598      	cmp	r8, r3
 80120a8:	d1ea      	bne.n	8012080 <__ieee754_pow+0xe8>
 80120aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80120ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80120b2:	ea53 030a 	orrs.w	r3, r3, sl
 80120b6:	f000 845a 	beq.w	801296e <__ieee754_pow+0x9d6>
 80120ba:	4b4f      	ldr	r3, [pc, #316]	; (80121f8 <__ieee754_pow+0x260>)
 80120bc:	429c      	cmp	r4, r3
 80120be:	dd08      	ble.n	80120d2 <__ieee754_pow+0x13a>
 80120c0:	f1b9 0f00 	cmp.w	r9, #0
 80120c4:	f2c0 8457 	blt.w	8012976 <__ieee754_pow+0x9de>
 80120c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120cc:	e783      	b.n	8011fd6 <__ieee754_pow+0x3e>
 80120ce:	2302      	movs	r3, #2
 80120d0:	e7e5      	b.n	801209e <__ieee754_pow+0x106>
 80120d2:	f1b9 0f00 	cmp.w	r9, #0
 80120d6:	f04f 0000 	mov.w	r0, #0
 80120da:	f04f 0100 	mov.w	r1, #0
 80120de:	f6bf af7a 	bge.w	8011fd6 <__ieee754_pow+0x3e>
 80120e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80120e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80120ea:	e774      	b.n	8011fd6 <__ieee754_pow+0x3e>
 80120ec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80120f0:	d106      	bne.n	8012100 <__ieee754_pow+0x168>
 80120f2:	4632      	mov	r2, r6
 80120f4:	463b      	mov	r3, r7
 80120f6:	4630      	mov	r0, r6
 80120f8:	4639      	mov	r1, r7
 80120fa:	f7ee fa95 	bl	8000628 <__aeabi_dmul>
 80120fe:	e76a      	b.n	8011fd6 <__ieee754_pow+0x3e>
 8012100:	4b3e      	ldr	r3, [pc, #248]	; (80121fc <__ieee754_pow+0x264>)
 8012102:	4599      	cmp	r9, r3
 8012104:	d10c      	bne.n	8012120 <__ieee754_pow+0x188>
 8012106:	2d00      	cmp	r5, #0
 8012108:	db0a      	blt.n	8012120 <__ieee754_pow+0x188>
 801210a:	ec47 6b10 	vmov	d0, r6, r7
 801210e:	b009      	add	sp, #36	; 0x24
 8012110:	ecbd 8b06 	vpop	{d8-d10}
 8012114:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012118:	f000 be7a 	b.w	8012e10 <__ieee754_sqrt>
 801211c:	2300      	movs	r3, #0
 801211e:	9304      	str	r3, [sp, #16]
 8012120:	ec47 6b10 	vmov	d0, r6, r7
 8012124:	f001 fdd4 	bl	8013cd0 <fabs>
 8012128:	ec51 0b10 	vmov	r0, r1, d0
 801212c:	f1ba 0f00 	cmp.w	sl, #0
 8012130:	d129      	bne.n	8012186 <__ieee754_pow+0x1ee>
 8012132:	b124      	cbz	r4, 801213e <__ieee754_pow+0x1a6>
 8012134:	4b2f      	ldr	r3, [pc, #188]	; (80121f4 <__ieee754_pow+0x25c>)
 8012136:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801213a:	429a      	cmp	r2, r3
 801213c:	d123      	bne.n	8012186 <__ieee754_pow+0x1ee>
 801213e:	f1b9 0f00 	cmp.w	r9, #0
 8012142:	da05      	bge.n	8012150 <__ieee754_pow+0x1b8>
 8012144:	4602      	mov	r2, r0
 8012146:	460b      	mov	r3, r1
 8012148:	2000      	movs	r0, #0
 801214a:	492a      	ldr	r1, [pc, #168]	; (80121f4 <__ieee754_pow+0x25c>)
 801214c:	f7ee fb96 	bl	800087c <__aeabi_ddiv>
 8012150:	2d00      	cmp	r5, #0
 8012152:	f6bf af40 	bge.w	8011fd6 <__ieee754_pow+0x3e>
 8012156:	9b04      	ldr	r3, [sp, #16]
 8012158:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801215c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012160:	4323      	orrs	r3, r4
 8012162:	d108      	bne.n	8012176 <__ieee754_pow+0x1de>
 8012164:	4602      	mov	r2, r0
 8012166:	460b      	mov	r3, r1
 8012168:	4610      	mov	r0, r2
 801216a:	4619      	mov	r1, r3
 801216c:	f7ee f8a4 	bl	80002b8 <__aeabi_dsub>
 8012170:	4602      	mov	r2, r0
 8012172:	460b      	mov	r3, r1
 8012174:	e78f      	b.n	8012096 <__ieee754_pow+0xfe>
 8012176:	9b04      	ldr	r3, [sp, #16]
 8012178:	2b01      	cmp	r3, #1
 801217a:	f47f af2c 	bne.w	8011fd6 <__ieee754_pow+0x3e>
 801217e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012182:	4619      	mov	r1, r3
 8012184:	e727      	b.n	8011fd6 <__ieee754_pow+0x3e>
 8012186:	0feb      	lsrs	r3, r5, #31
 8012188:	3b01      	subs	r3, #1
 801218a:	9306      	str	r3, [sp, #24]
 801218c:	9a06      	ldr	r2, [sp, #24]
 801218e:	9b04      	ldr	r3, [sp, #16]
 8012190:	4313      	orrs	r3, r2
 8012192:	d102      	bne.n	801219a <__ieee754_pow+0x202>
 8012194:	4632      	mov	r2, r6
 8012196:	463b      	mov	r3, r7
 8012198:	e7e6      	b.n	8012168 <__ieee754_pow+0x1d0>
 801219a:	4b19      	ldr	r3, [pc, #100]	; (8012200 <__ieee754_pow+0x268>)
 801219c:	4598      	cmp	r8, r3
 801219e:	f340 80fb 	ble.w	8012398 <__ieee754_pow+0x400>
 80121a2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80121a6:	4598      	cmp	r8, r3
 80121a8:	4b13      	ldr	r3, [pc, #76]	; (80121f8 <__ieee754_pow+0x260>)
 80121aa:	dd0c      	ble.n	80121c6 <__ieee754_pow+0x22e>
 80121ac:	429c      	cmp	r4, r3
 80121ae:	dc0f      	bgt.n	80121d0 <__ieee754_pow+0x238>
 80121b0:	f1b9 0f00 	cmp.w	r9, #0
 80121b4:	da0f      	bge.n	80121d6 <__ieee754_pow+0x23e>
 80121b6:	2000      	movs	r0, #0
 80121b8:	b009      	add	sp, #36	; 0x24
 80121ba:	ecbd 8b06 	vpop	{d8-d10}
 80121be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c2:	f001 bbda 	b.w	801397a <__math_oflow>
 80121c6:	429c      	cmp	r4, r3
 80121c8:	dbf2      	blt.n	80121b0 <__ieee754_pow+0x218>
 80121ca:	4b0a      	ldr	r3, [pc, #40]	; (80121f4 <__ieee754_pow+0x25c>)
 80121cc:	429c      	cmp	r4, r3
 80121ce:	dd19      	ble.n	8012204 <__ieee754_pow+0x26c>
 80121d0:	f1b9 0f00 	cmp.w	r9, #0
 80121d4:	dcef      	bgt.n	80121b6 <__ieee754_pow+0x21e>
 80121d6:	2000      	movs	r0, #0
 80121d8:	b009      	add	sp, #36	; 0x24
 80121da:	ecbd 8b06 	vpop	{d8-d10}
 80121de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e2:	f001 bbc1 	b.w	8013968 <__math_uflow>
 80121e6:	bf00      	nop
 80121e8:	fff00000 	.word	0xfff00000
 80121ec:	7ff00000 	.word	0x7ff00000
 80121f0:	433fffff 	.word	0x433fffff
 80121f4:	3ff00000 	.word	0x3ff00000
 80121f8:	3fefffff 	.word	0x3fefffff
 80121fc:	3fe00000 	.word	0x3fe00000
 8012200:	41e00000 	.word	0x41e00000
 8012204:	4b60      	ldr	r3, [pc, #384]	; (8012388 <__ieee754_pow+0x3f0>)
 8012206:	2200      	movs	r2, #0
 8012208:	f7ee f856 	bl	80002b8 <__aeabi_dsub>
 801220c:	a354      	add	r3, pc, #336	; (adr r3, 8012360 <__ieee754_pow+0x3c8>)
 801220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012212:	4604      	mov	r4, r0
 8012214:	460d      	mov	r5, r1
 8012216:	f7ee fa07 	bl	8000628 <__aeabi_dmul>
 801221a:	a353      	add	r3, pc, #332	; (adr r3, 8012368 <__ieee754_pow+0x3d0>)
 801221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012220:	4606      	mov	r6, r0
 8012222:	460f      	mov	r7, r1
 8012224:	4620      	mov	r0, r4
 8012226:	4629      	mov	r1, r5
 8012228:	f7ee f9fe 	bl	8000628 <__aeabi_dmul>
 801222c:	4b57      	ldr	r3, [pc, #348]	; (801238c <__ieee754_pow+0x3f4>)
 801222e:	4682      	mov	sl, r0
 8012230:	468b      	mov	fp, r1
 8012232:	2200      	movs	r2, #0
 8012234:	4620      	mov	r0, r4
 8012236:	4629      	mov	r1, r5
 8012238:	f7ee f9f6 	bl	8000628 <__aeabi_dmul>
 801223c:	4602      	mov	r2, r0
 801223e:	460b      	mov	r3, r1
 8012240:	a14b      	add	r1, pc, #300	; (adr r1, 8012370 <__ieee754_pow+0x3d8>)
 8012242:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012246:	f7ee f837 	bl	80002b8 <__aeabi_dsub>
 801224a:	4622      	mov	r2, r4
 801224c:	462b      	mov	r3, r5
 801224e:	f7ee f9eb 	bl	8000628 <__aeabi_dmul>
 8012252:	4602      	mov	r2, r0
 8012254:	460b      	mov	r3, r1
 8012256:	2000      	movs	r0, #0
 8012258:	494d      	ldr	r1, [pc, #308]	; (8012390 <__ieee754_pow+0x3f8>)
 801225a:	f7ee f82d 	bl	80002b8 <__aeabi_dsub>
 801225e:	4622      	mov	r2, r4
 8012260:	4680      	mov	r8, r0
 8012262:	4689      	mov	r9, r1
 8012264:	462b      	mov	r3, r5
 8012266:	4620      	mov	r0, r4
 8012268:	4629      	mov	r1, r5
 801226a:	f7ee f9dd 	bl	8000628 <__aeabi_dmul>
 801226e:	4602      	mov	r2, r0
 8012270:	460b      	mov	r3, r1
 8012272:	4640      	mov	r0, r8
 8012274:	4649      	mov	r1, r9
 8012276:	f7ee f9d7 	bl	8000628 <__aeabi_dmul>
 801227a:	a33f      	add	r3, pc, #252	; (adr r3, 8012378 <__ieee754_pow+0x3e0>)
 801227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012280:	f7ee f9d2 	bl	8000628 <__aeabi_dmul>
 8012284:	4602      	mov	r2, r0
 8012286:	460b      	mov	r3, r1
 8012288:	4650      	mov	r0, sl
 801228a:	4659      	mov	r1, fp
 801228c:	f7ee f814 	bl	80002b8 <__aeabi_dsub>
 8012290:	4602      	mov	r2, r0
 8012292:	460b      	mov	r3, r1
 8012294:	4680      	mov	r8, r0
 8012296:	4689      	mov	r9, r1
 8012298:	4630      	mov	r0, r6
 801229a:	4639      	mov	r1, r7
 801229c:	f7ee f80e 	bl	80002bc <__adddf3>
 80122a0:	2000      	movs	r0, #0
 80122a2:	4632      	mov	r2, r6
 80122a4:	463b      	mov	r3, r7
 80122a6:	4604      	mov	r4, r0
 80122a8:	460d      	mov	r5, r1
 80122aa:	f7ee f805 	bl	80002b8 <__aeabi_dsub>
 80122ae:	4602      	mov	r2, r0
 80122b0:	460b      	mov	r3, r1
 80122b2:	4640      	mov	r0, r8
 80122b4:	4649      	mov	r1, r9
 80122b6:	f7ed ffff 	bl	80002b8 <__aeabi_dsub>
 80122ba:	9b04      	ldr	r3, [sp, #16]
 80122bc:	9a06      	ldr	r2, [sp, #24]
 80122be:	3b01      	subs	r3, #1
 80122c0:	4313      	orrs	r3, r2
 80122c2:	4682      	mov	sl, r0
 80122c4:	468b      	mov	fp, r1
 80122c6:	f040 81e7 	bne.w	8012698 <__ieee754_pow+0x700>
 80122ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012380 <__ieee754_pow+0x3e8>
 80122ce:	eeb0 8a47 	vmov.f32	s16, s14
 80122d2:	eef0 8a67 	vmov.f32	s17, s15
 80122d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80122da:	2600      	movs	r6, #0
 80122dc:	4632      	mov	r2, r6
 80122de:	463b      	mov	r3, r7
 80122e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122e4:	f7ed ffe8 	bl	80002b8 <__aeabi_dsub>
 80122e8:	4622      	mov	r2, r4
 80122ea:	462b      	mov	r3, r5
 80122ec:	f7ee f99c 	bl	8000628 <__aeabi_dmul>
 80122f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122f4:	4680      	mov	r8, r0
 80122f6:	4689      	mov	r9, r1
 80122f8:	4650      	mov	r0, sl
 80122fa:	4659      	mov	r1, fp
 80122fc:	f7ee f994 	bl	8000628 <__aeabi_dmul>
 8012300:	4602      	mov	r2, r0
 8012302:	460b      	mov	r3, r1
 8012304:	4640      	mov	r0, r8
 8012306:	4649      	mov	r1, r9
 8012308:	f7ed ffd8 	bl	80002bc <__adddf3>
 801230c:	4632      	mov	r2, r6
 801230e:	463b      	mov	r3, r7
 8012310:	4680      	mov	r8, r0
 8012312:	4689      	mov	r9, r1
 8012314:	4620      	mov	r0, r4
 8012316:	4629      	mov	r1, r5
 8012318:	f7ee f986 	bl	8000628 <__aeabi_dmul>
 801231c:	460b      	mov	r3, r1
 801231e:	4604      	mov	r4, r0
 8012320:	460d      	mov	r5, r1
 8012322:	4602      	mov	r2, r0
 8012324:	4649      	mov	r1, r9
 8012326:	4640      	mov	r0, r8
 8012328:	f7ed ffc8 	bl	80002bc <__adddf3>
 801232c:	4b19      	ldr	r3, [pc, #100]	; (8012394 <__ieee754_pow+0x3fc>)
 801232e:	4299      	cmp	r1, r3
 8012330:	ec45 4b19 	vmov	d9, r4, r5
 8012334:	4606      	mov	r6, r0
 8012336:	460f      	mov	r7, r1
 8012338:	468b      	mov	fp, r1
 801233a:	f340 82f1 	ble.w	8012920 <__ieee754_pow+0x988>
 801233e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012342:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012346:	4303      	orrs	r3, r0
 8012348:	f000 81e4 	beq.w	8012714 <__ieee754_pow+0x77c>
 801234c:	ec51 0b18 	vmov	r0, r1, d8
 8012350:	2200      	movs	r2, #0
 8012352:	2300      	movs	r3, #0
 8012354:	f7ee fbda 	bl	8000b0c <__aeabi_dcmplt>
 8012358:	3800      	subs	r0, #0
 801235a:	bf18      	it	ne
 801235c:	2001      	movne	r0, #1
 801235e:	e72b      	b.n	80121b8 <__ieee754_pow+0x220>
 8012360:	60000000 	.word	0x60000000
 8012364:	3ff71547 	.word	0x3ff71547
 8012368:	f85ddf44 	.word	0xf85ddf44
 801236c:	3e54ae0b 	.word	0x3e54ae0b
 8012370:	55555555 	.word	0x55555555
 8012374:	3fd55555 	.word	0x3fd55555
 8012378:	652b82fe 	.word	0x652b82fe
 801237c:	3ff71547 	.word	0x3ff71547
 8012380:	00000000 	.word	0x00000000
 8012384:	bff00000 	.word	0xbff00000
 8012388:	3ff00000 	.word	0x3ff00000
 801238c:	3fd00000 	.word	0x3fd00000
 8012390:	3fe00000 	.word	0x3fe00000
 8012394:	408fffff 	.word	0x408fffff
 8012398:	4bd5      	ldr	r3, [pc, #852]	; (80126f0 <__ieee754_pow+0x758>)
 801239a:	402b      	ands	r3, r5
 801239c:	2200      	movs	r2, #0
 801239e:	b92b      	cbnz	r3, 80123ac <__ieee754_pow+0x414>
 80123a0:	4bd4      	ldr	r3, [pc, #848]	; (80126f4 <__ieee754_pow+0x75c>)
 80123a2:	f7ee f941 	bl	8000628 <__aeabi_dmul>
 80123a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80123aa:	460c      	mov	r4, r1
 80123ac:	1523      	asrs	r3, r4, #20
 80123ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80123b2:	4413      	add	r3, r2
 80123b4:	9305      	str	r3, [sp, #20]
 80123b6:	4bd0      	ldr	r3, [pc, #832]	; (80126f8 <__ieee754_pow+0x760>)
 80123b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80123bc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80123c0:	429c      	cmp	r4, r3
 80123c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80123c6:	dd08      	ble.n	80123da <__ieee754_pow+0x442>
 80123c8:	4bcc      	ldr	r3, [pc, #816]	; (80126fc <__ieee754_pow+0x764>)
 80123ca:	429c      	cmp	r4, r3
 80123cc:	f340 8162 	ble.w	8012694 <__ieee754_pow+0x6fc>
 80123d0:	9b05      	ldr	r3, [sp, #20]
 80123d2:	3301      	adds	r3, #1
 80123d4:	9305      	str	r3, [sp, #20]
 80123d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80123da:	2400      	movs	r4, #0
 80123dc:	00e3      	lsls	r3, r4, #3
 80123de:	9307      	str	r3, [sp, #28]
 80123e0:	4bc7      	ldr	r3, [pc, #796]	; (8012700 <__ieee754_pow+0x768>)
 80123e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80123e6:	ed93 7b00 	vldr	d7, [r3]
 80123ea:	4629      	mov	r1, r5
 80123ec:	ec53 2b17 	vmov	r2, r3, d7
 80123f0:	eeb0 9a47 	vmov.f32	s18, s14
 80123f4:	eef0 9a67 	vmov.f32	s19, s15
 80123f8:	4682      	mov	sl, r0
 80123fa:	f7ed ff5d 	bl	80002b8 <__aeabi_dsub>
 80123fe:	4652      	mov	r2, sl
 8012400:	4606      	mov	r6, r0
 8012402:	460f      	mov	r7, r1
 8012404:	462b      	mov	r3, r5
 8012406:	ec51 0b19 	vmov	r0, r1, d9
 801240a:	f7ed ff57 	bl	80002bc <__adddf3>
 801240e:	4602      	mov	r2, r0
 8012410:	460b      	mov	r3, r1
 8012412:	2000      	movs	r0, #0
 8012414:	49bb      	ldr	r1, [pc, #748]	; (8012704 <__ieee754_pow+0x76c>)
 8012416:	f7ee fa31 	bl	800087c <__aeabi_ddiv>
 801241a:	ec41 0b1a 	vmov	d10, r0, r1
 801241e:	4602      	mov	r2, r0
 8012420:	460b      	mov	r3, r1
 8012422:	4630      	mov	r0, r6
 8012424:	4639      	mov	r1, r7
 8012426:	f7ee f8ff 	bl	8000628 <__aeabi_dmul>
 801242a:	2300      	movs	r3, #0
 801242c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012430:	9302      	str	r3, [sp, #8]
 8012432:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012436:	46ab      	mov	fp, r5
 8012438:	106d      	asrs	r5, r5, #1
 801243a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801243e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012442:	ec41 0b18 	vmov	d8, r0, r1
 8012446:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801244a:	2200      	movs	r2, #0
 801244c:	4640      	mov	r0, r8
 801244e:	4649      	mov	r1, r9
 8012450:	4614      	mov	r4, r2
 8012452:	461d      	mov	r5, r3
 8012454:	f7ee f8e8 	bl	8000628 <__aeabi_dmul>
 8012458:	4602      	mov	r2, r0
 801245a:	460b      	mov	r3, r1
 801245c:	4630      	mov	r0, r6
 801245e:	4639      	mov	r1, r7
 8012460:	f7ed ff2a 	bl	80002b8 <__aeabi_dsub>
 8012464:	ec53 2b19 	vmov	r2, r3, d9
 8012468:	4606      	mov	r6, r0
 801246a:	460f      	mov	r7, r1
 801246c:	4620      	mov	r0, r4
 801246e:	4629      	mov	r1, r5
 8012470:	f7ed ff22 	bl	80002b8 <__aeabi_dsub>
 8012474:	4602      	mov	r2, r0
 8012476:	460b      	mov	r3, r1
 8012478:	4650      	mov	r0, sl
 801247a:	4659      	mov	r1, fp
 801247c:	f7ed ff1c 	bl	80002b8 <__aeabi_dsub>
 8012480:	4642      	mov	r2, r8
 8012482:	464b      	mov	r3, r9
 8012484:	f7ee f8d0 	bl	8000628 <__aeabi_dmul>
 8012488:	4602      	mov	r2, r0
 801248a:	460b      	mov	r3, r1
 801248c:	4630      	mov	r0, r6
 801248e:	4639      	mov	r1, r7
 8012490:	f7ed ff12 	bl	80002b8 <__aeabi_dsub>
 8012494:	ec53 2b1a 	vmov	r2, r3, d10
 8012498:	f7ee f8c6 	bl	8000628 <__aeabi_dmul>
 801249c:	ec53 2b18 	vmov	r2, r3, d8
 80124a0:	ec41 0b19 	vmov	d9, r0, r1
 80124a4:	ec51 0b18 	vmov	r0, r1, d8
 80124a8:	f7ee f8be 	bl	8000628 <__aeabi_dmul>
 80124ac:	a37c      	add	r3, pc, #496	; (adr r3, 80126a0 <__ieee754_pow+0x708>)
 80124ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b2:	4604      	mov	r4, r0
 80124b4:	460d      	mov	r5, r1
 80124b6:	f7ee f8b7 	bl	8000628 <__aeabi_dmul>
 80124ba:	a37b      	add	r3, pc, #492	; (adr r3, 80126a8 <__ieee754_pow+0x710>)
 80124bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c0:	f7ed fefc 	bl	80002bc <__adddf3>
 80124c4:	4622      	mov	r2, r4
 80124c6:	462b      	mov	r3, r5
 80124c8:	f7ee f8ae 	bl	8000628 <__aeabi_dmul>
 80124cc:	a378      	add	r3, pc, #480	; (adr r3, 80126b0 <__ieee754_pow+0x718>)
 80124ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d2:	f7ed fef3 	bl	80002bc <__adddf3>
 80124d6:	4622      	mov	r2, r4
 80124d8:	462b      	mov	r3, r5
 80124da:	f7ee f8a5 	bl	8000628 <__aeabi_dmul>
 80124de:	a376      	add	r3, pc, #472	; (adr r3, 80126b8 <__ieee754_pow+0x720>)
 80124e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e4:	f7ed feea 	bl	80002bc <__adddf3>
 80124e8:	4622      	mov	r2, r4
 80124ea:	462b      	mov	r3, r5
 80124ec:	f7ee f89c 	bl	8000628 <__aeabi_dmul>
 80124f0:	a373      	add	r3, pc, #460	; (adr r3, 80126c0 <__ieee754_pow+0x728>)
 80124f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f6:	f7ed fee1 	bl	80002bc <__adddf3>
 80124fa:	4622      	mov	r2, r4
 80124fc:	462b      	mov	r3, r5
 80124fe:	f7ee f893 	bl	8000628 <__aeabi_dmul>
 8012502:	a371      	add	r3, pc, #452	; (adr r3, 80126c8 <__ieee754_pow+0x730>)
 8012504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012508:	f7ed fed8 	bl	80002bc <__adddf3>
 801250c:	4622      	mov	r2, r4
 801250e:	4606      	mov	r6, r0
 8012510:	460f      	mov	r7, r1
 8012512:	462b      	mov	r3, r5
 8012514:	4620      	mov	r0, r4
 8012516:	4629      	mov	r1, r5
 8012518:	f7ee f886 	bl	8000628 <__aeabi_dmul>
 801251c:	4602      	mov	r2, r0
 801251e:	460b      	mov	r3, r1
 8012520:	4630      	mov	r0, r6
 8012522:	4639      	mov	r1, r7
 8012524:	f7ee f880 	bl	8000628 <__aeabi_dmul>
 8012528:	4642      	mov	r2, r8
 801252a:	4604      	mov	r4, r0
 801252c:	460d      	mov	r5, r1
 801252e:	464b      	mov	r3, r9
 8012530:	ec51 0b18 	vmov	r0, r1, d8
 8012534:	f7ed fec2 	bl	80002bc <__adddf3>
 8012538:	ec53 2b19 	vmov	r2, r3, d9
 801253c:	f7ee f874 	bl	8000628 <__aeabi_dmul>
 8012540:	4622      	mov	r2, r4
 8012542:	462b      	mov	r3, r5
 8012544:	f7ed feba 	bl	80002bc <__adddf3>
 8012548:	4642      	mov	r2, r8
 801254a:	4682      	mov	sl, r0
 801254c:	468b      	mov	fp, r1
 801254e:	464b      	mov	r3, r9
 8012550:	4640      	mov	r0, r8
 8012552:	4649      	mov	r1, r9
 8012554:	f7ee f868 	bl	8000628 <__aeabi_dmul>
 8012558:	4b6b      	ldr	r3, [pc, #428]	; (8012708 <__ieee754_pow+0x770>)
 801255a:	2200      	movs	r2, #0
 801255c:	4606      	mov	r6, r0
 801255e:	460f      	mov	r7, r1
 8012560:	f7ed feac 	bl	80002bc <__adddf3>
 8012564:	4652      	mov	r2, sl
 8012566:	465b      	mov	r3, fp
 8012568:	f7ed fea8 	bl	80002bc <__adddf3>
 801256c:	2000      	movs	r0, #0
 801256e:	4604      	mov	r4, r0
 8012570:	460d      	mov	r5, r1
 8012572:	4602      	mov	r2, r0
 8012574:	460b      	mov	r3, r1
 8012576:	4640      	mov	r0, r8
 8012578:	4649      	mov	r1, r9
 801257a:	f7ee f855 	bl	8000628 <__aeabi_dmul>
 801257e:	4b62      	ldr	r3, [pc, #392]	; (8012708 <__ieee754_pow+0x770>)
 8012580:	4680      	mov	r8, r0
 8012582:	4689      	mov	r9, r1
 8012584:	2200      	movs	r2, #0
 8012586:	4620      	mov	r0, r4
 8012588:	4629      	mov	r1, r5
 801258a:	f7ed fe95 	bl	80002b8 <__aeabi_dsub>
 801258e:	4632      	mov	r2, r6
 8012590:	463b      	mov	r3, r7
 8012592:	f7ed fe91 	bl	80002b8 <__aeabi_dsub>
 8012596:	4602      	mov	r2, r0
 8012598:	460b      	mov	r3, r1
 801259a:	4650      	mov	r0, sl
 801259c:	4659      	mov	r1, fp
 801259e:	f7ed fe8b 	bl	80002b8 <__aeabi_dsub>
 80125a2:	ec53 2b18 	vmov	r2, r3, d8
 80125a6:	f7ee f83f 	bl	8000628 <__aeabi_dmul>
 80125aa:	4622      	mov	r2, r4
 80125ac:	4606      	mov	r6, r0
 80125ae:	460f      	mov	r7, r1
 80125b0:	462b      	mov	r3, r5
 80125b2:	ec51 0b19 	vmov	r0, r1, d9
 80125b6:	f7ee f837 	bl	8000628 <__aeabi_dmul>
 80125ba:	4602      	mov	r2, r0
 80125bc:	460b      	mov	r3, r1
 80125be:	4630      	mov	r0, r6
 80125c0:	4639      	mov	r1, r7
 80125c2:	f7ed fe7b 	bl	80002bc <__adddf3>
 80125c6:	4606      	mov	r6, r0
 80125c8:	460f      	mov	r7, r1
 80125ca:	4602      	mov	r2, r0
 80125cc:	460b      	mov	r3, r1
 80125ce:	4640      	mov	r0, r8
 80125d0:	4649      	mov	r1, r9
 80125d2:	f7ed fe73 	bl	80002bc <__adddf3>
 80125d6:	a33e      	add	r3, pc, #248	; (adr r3, 80126d0 <__ieee754_pow+0x738>)
 80125d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125dc:	2000      	movs	r0, #0
 80125de:	4604      	mov	r4, r0
 80125e0:	460d      	mov	r5, r1
 80125e2:	f7ee f821 	bl	8000628 <__aeabi_dmul>
 80125e6:	4642      	mov	r2, r8
 80125e8:	ec41 0b18 	vmov	d8, r0, r1
 80125ec:	464b      	mov	r3, r9
 80125ee:	4620      	mov	r0, r4
 80125f0:	4629      	mov	r1, r5
 80125f2:	f7ed fe61 	bl	80002b8 <__aeabi_dsub>
 80125f6:	4602      	mov	r2, r0
 80125f8:	460b      	mov	r3, r1
 80125fa:	4630      	mov	r0, r6
 80125fc:	4639      	mov	r1, r7
 80125fe:	f7ed fe5b 	bl	80002b8 <__aeabi_dsub>
 8012602:	a335      	add	r3, pc, #212	; (adr r3, 80126d8 <__ieee754_pow+0x740>)
 8012604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012608:	f7ee f80e 	bl	8000628 <__aeabi_dmul>
 801260c:	a334      	add	r3, pc, #208	; (adr r3, 80126e0 <__ieee754_pow+0x748>)
 801260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012612:	4606      	mov	r6, r0
 8012614:	460f      	mov	r7, r1
 8012616:	4620      	mov	r0, r4
 8012618:	4629      	mov	r1, r5
 801261a:	f7ee f805 	bl	8000628 <__aeabi_dmul>
 801261e:	4602      	mov	r2, r0
 8012620:	460b      	mov	r3, r1
 8012622:	4630      	mov	r0, r6
 8012624:	4639      	mov	r1, r7
 8012626:	f7ed fe49 	bl	80002bc <__adddf3>
 801262a:	9a07      	ldr	r2, [sp, #28]
 801262c:	4b37      	ldr	r3, [pc, #220]	; (801270c <__ieee754_pow+0x774>)
 801262e:	4413      	add	r3, r2
 8012630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012634:	f7ed fe42 	bl	80002bc <__adddf3>
 8012638:	4682      	mov	sl, r0
 801263a:	9805      	ldr	r0, [sp, #20]
 801263c:	468b      	mov	fp, r1
 801263e:	f7ed ff89 	bl	8000554 <__aeabi_i2d>
 8012642:	9a07      	ldr	r2, [sp, #28]
 8012644:	4b32      	ldr	r3, [pc, #200]	; (8012710 <__ieee754_pow+0x778>)
 8012646:	4413      	add	r3, r2
 8012648:	e9d3 8900 	ldrd	r8, r9, [r3]
 801264c:	4606      	mov	r6, r0
 801264e:	460f      	mov	r7, r1
 8012650:	4652      	mov	r2, sl
 8012652:	465b      	mov	r3, fp
 8012654:	ec51 0b18 	vmov	r0, r1, d8
 8012658:	f7ed fe30 	bl	80002bc <__adddf3>
 801265c:	4642      	mov	r2, r8
 801265e:	464b      	mov	r3, r9
 8012660:	f7ed fe2c 	bl	80002bc <__adddf3>
 8012664:	4632      	mov	r2, r6
 8012666:	463b      	mov	r3, r7
 8012668:	f7ed fe28 	bl	80002bc <__adddf3>
 801266c:	2000      	movs	r0, #0
 801266e:	4632      	mov	r2, r6
 8012670:	463b      	mov	r3, r7
 8012672:	4604      	mov	r4, r0
 8012674:	460d      	mov	r5, r1
 8012676:	f7ed fe1f 	bl	80002b8 <__aeabi_dsub>
 801267a:	4642      	mov	r2, r8
 801267c:	464b      	mov	r3, r9
 801267e:	f7ed fe1b 	bl	80002b8 <__aeabi_dsub>
 8012682:	ec53 2b18 	vmov	r2, r3, d8
 8012686:	f7ed fe17 	bl	80002b8 <__aeabi_dsub>
 801268a:	4602      	mov	r2, r0
 801268c:	460b      	mov	r3, r1
 801268e:	4650      	mov	r0, sl
 8012690:	4659      	mov	r1, fp
 8012692:	e610      	b.n	80122b6 <__ieee754_pow+0x31e>
 8012694:	2401      	movs	r4, #1
 8012696:	e6a1      	b.n	80123dc <__ieee754_pow+0x444>
 8012698:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80126e8 <__ieee754_pow+0x750>
 801269c:	e617      	b.n	80122ce <__ieee754_pow+0x336>
 801269e:	bf00      	nop
 80126a0:	4a454eef 	.word	0x4a454eef
 80126a4:	3fca7e28 	.word	0x3fca7e28
 80126a8:	93c9db65 	.word	0x93c9db65
 80126ac:	3fcd864a 	.word	0x3fcd864a
 80126b0:	a91d4101 	.word	0xa91d4101
 80126b4:	3fd17460 	.word	0x3fd17460
 80126b8:	518f264d 	.word	0x518f264d
 80126bc:	3fd55555 	.word	0x3fd55555
 80126c0:	db6fabff 	.word	0xdb6fabff
 80126c4:	3fdb6db6 	.word	0x3fdb6db6
 80126c8:	33333303 	.word	0x33333303
 80126cc:	3fe33333 	.word	0x3fe33333
 80126d0:	e0000000 	.word	0xe0000000
 80126d4:	3feec709 	.word	0x3feec709
 80126d8:	dc3a03fd 	.word	0xdc3a03fd
 80126dc:	3feec709 	.word	0x3feec709
 80126e0:	145b01f5 	.word	0x145b01f5
 80126e4:	be3e2fe0 	.word	0xbe3e2fe0
 80126e8:	00000000 	.word	0x00000000
 80126ec:	3ff00000 	.word	0x3ff00000
 80126f0:	7ff00000 	.word	0x7ff00000
 80126f4:	43400000 	.word	0x43400000
 80126f8:	0003988e 	.word	0x0003988e
 80126fc:	000bb679 	.word	0x000bb679
 8012700:	08014728 	.word	0x08014728
 8012704:	3ff00000 	.word	0x3ff00000
 8012708:	40080000 	.word	0x40080000
 801270c:	08014748 	.word	0x08014748
 8012710:	08014738 	.word	0x08014738
 8012714:	a3b5      	add	r3, pc, #724	; (adr r3, 80129ec <__ieee754_pow+0xa54>)
 8012716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801271a:	4640      	mov	r0, r8
 801271c:	4649      	mov	r1, r9
 801271e:	f7ed fdcd 	bl	80002bc <__adddf3>
 8012722:	4622      	mov	r2, r4
 8012724:	ec41 0b1a 	vmov	d10, r0, r1
 8012728:	462b      	mov	r3, r5
 801272a:	4630      	mov	r0, r6
 801272c:	4639      	mov	r1, r7
 801272e:	f7ed fdc3 	bl	80002b8 <__aeabi_dsub>
 8012732:	4602      	mov	r2, r0
 8012734:	460b      	mov	r3, r1
 8012736:	ec51 0b1a 	vmov	r0, r1, d10
 801273a:	f7ee fa05 	bl	8000b48 <__aeabi_dcmpgt>
 801273e:	2800      	cmp	r0, #0
 8012740:	f47f ae04 	bne.w	801234c <__ieee754_pow+0x3b4>
 8012744:	4aa4      	ldr	r2, [pc, #656]	; (80129d8 <__ieee754_pow+0xa40>)
 8012746:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801274a:	4293      	cmp	r3, r2
 801274c:	f340 8108 	ble.w	8012960 <__ieee754_pow+0x9c8>
 8012750:	151b      	asrs	r3, r3, #20
 8012752:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012756:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801275a:	fa4a f303 	asr.w	r3, sl, r3
 801275e:	445b      	add	r3, fp
 8012760:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012764:	4e9d      	ldr	r6, [pc, #628]	; (80129dc <__ieee754_pow+0xa44>)
 8012766:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801276a:	4116      	asrs	r6, r2
 801276c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012770:	2000      	movs	r0, #0
 8012772:	ea23 0106 	bic.w	r1, r3, r6
 8012776:	f1c2 0214 	rsb	r2, r2, #20
 801277a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801277e:	fa4a fa02 	asr.w	sl, sl, r2
 8012782:	f1bb 0f00 	cmp.w	fp, #0
 8012786:	4602      	mov	r2, r0
 8012788:	460b      	mov	r3, r1
 801278a:	4620      	mov	r0, r4
 801278c:	4629      	mov	r1, r5
 801278e:	bfb8      	it	lt
 8012790:	f1ca 0a00 	rsblt	sl, sl, #0
 8012794:	f7ed fd90 	bl	80002b8 <__aeabi_dsub>
 8012798:	ec41 0b19 	vmov	d9, r0, r1
 801279c:	4642      	mov	r2, r8
 801279e:	464b      	mov	r3, r9
 80127a0:	ec51 0b19 	vmov	r0, r1, d9
 80127a4:	f7ed fd8a 	bl	80002bc <__adddf3>
 80127a8:	a37b      	add	r3, pc, #492	; (adr r3, 8012998 <__ieee754_pow+0xa00>)
 80127aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ae:	2000      	movs	r0, #0
 80127b0:	4604      	mov	r4, r0
 80127b2:	460d      	mov	r5, r1
 80127b4:	f7ed ff38 	bl	8000628 <__aeabi_dmul>
 80127b8:	ec53 2b19 	vmov	r2, r3, d9
 80127bc:	4606      	mov	r6, r0
 80127be:	460f      	mov	r7, r1
 80127c0:	4620      	mov	r0, r4
 80127c2:	4629      	mov	r1, r5
 80127c4:	f7ed fd78 	bl	80002b8 <__aeabi_dsub>
 80127c8:	4602      	mov	r2, r0
 80127ca:	460b      	mov	r3, r1
 80127cc:	4640      	mov	r0, r8
 80127ce:	4649      	mov	r1, r9
 80127d0:	f7ed fd72 	bl	80002b8 <__aeabi_dsub>
 80127d4:	a372      	add	r3, pc, #456	; (adr r3, 80129a0 <__ieee754_pow+0xa08>)
 80127d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127da:	f7ed ff25 	bl	8000628 <__aeabi_dmul>
 80127de:	a372      	add	r3, pc, #456	; (adr r3, 80129a8 <__ieee754_pow+0xa10>)
 80127e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e4:	4680      	mov	r8, r0
 80127e6:	4689      	mov	r9, r1
 80127e8:	4620      	mov	r0, r4
 80127ea:	4629      	mov	r1, r5
 80127ec:	f7ed ff1c 	bl	8000628 <__aeabi_dmul>
 80127f0:	4602      	mov	r2, r0
 80127f2:	460b      	mov	r3, r1
 80127f4:	4640      	mov	r0, r8
 80127f6:	4649      	mov	r1, r9
 80127f8:	f7ed fd60 	bl	80002bc <__adddf3>
 80127fc:	4604      	mov	r4, r0
 80127fe:	460d      	mov	r5, r1
 8012800:	4602      	mov	r2, r0
 8012802:	460b      	mov	r3, r1
 8012804:	4630      	mov	r0, r6
 8012806:	4639      	mov	r1, r7
 8012808:	f7ed fd58 	bl	80002bc <__adddf3>
 801280c:	4632      	mov	r2, r6
 801280e:	463b      	mov	r3, r7
 8012810:	4680      	mov	r8, r0
 8012812:	4689      	mov	r9, r1
 8012814:	f7ed fd50 	bl	80002b8 <__aeabi_dsub>
 8012818:	4602      	mov	r2, r0
 801281a:	460b      	mov	r3, r1
 801281c:	4620      	mov	r0, r4
 801281e:	4629      	mov	r1, r5
 8012820:	f7ed fd4a 	bl	80002b8 <__aeabi_dsub>
 8012824:	4642      	mov	r2, r8
 8012826:	4606      	mov	r6, r0
 8012828:	460f      	mov	r7, r1
 801282a:	464b      	mov	r3, r9
 801282c:	4640      	mov	r0, r8
 801282e:	4649      	mov	r1, r9
 8012830:	f7ed fefa 	bl	8000628 <__aeabi_dmul>
 8012834:	a35e      	add	r3, pc, #376	; (adr r3, 80129b0 <__ieee754_pow+0xa18>)
 8012836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801283a:	4604      	mov	r4, r0
 801283c:	460d      	mov	r5, r1
 801283e:	f7ed fef3 	bl	8000628 <__aeabi_dmul>
 8012842:	a35d      	add	r3, pc, #372	; (adr r3, 80129b8 <__ieee754_pow+0xa20>)
 8012844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012848:	f7ed fd36 	bl	80002b8 <__aeabi_dsub>
 801284c:	4622      	mov	r2, r4
 801284e:	462b      	mov	r3, r5
 8012850:	f7ed feea 	bl	8000628 <__aeabi_dmul>
 8012854:	a35a      	add	r3, pc, #360	; (adr r3, 80129c0 <__ieee754_pow+0xa28>)
 8012856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801285a:	f7ed fd2f 	bl	80002bc <__adddf3>
 801285e:	4622      	mov	r2, r4
 8012860:	462b      	mov	r3, r5
 8012862:	f7ed fee1 	bl	8000628 <__aeabi_dmul>
 8012866:	a358      	add	r3, pc, #352	; (adr r3, 80129c8 <__ieee754_pow+0xa30>)
 8012868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286c:	f7ed fd24 	bl	80002b8 <__aeabi_dsub>
 8012870:	4622      	mov	r2, r4
 8012872:	462b      	mov	r3, r5
 8012874:	f7ed fed8 	bl	8000628 <__aeabi_dmul>
 8012878:	a355      	add	r3, pc, #340	; (adr r3, 80129d0 <__ieee754_pow+0xa38>)
 801287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801287e:	f7ed fd1d 	bl	80002bc <__adddf3>
 8012882:	4622      	mov	r2, r4
 8012884:	462b      	mov	r3, r5
 8012886:	f7ed fecf 	bl	8000628 <__aeabi_dmul>
 801288a:	4602      	mov	r2, r0
 801288c:	460b      	mov	r3, r1
 801288e:	4640      	mov	r0, r8
 8012890:	4649      	mov	r1, r9
 8012892:	f7ed fd11 	bl	80002b8 <__aeabi_dsub>
 8012896:	4604      	mov	r4, r0
 8012898:	460d      	mov	r5, r1
 801289a:	4602      	mov	r2, r0
 801289c:	460b      	mov	r3, r1
 801289e:	4640      	mov	r0, r8
 80128a0:	4649      	mov	r1, r9
 80128a2:	f7ed fec1 	bl	8000628 <__aeabi_dmul>
 80128a6:	2200      	movs	r2, #0
 80128a8:	ec41 0b19 	vmov	d9, r0, r1
 80128ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80128b0:	4620      	mov	r0, r4
 80128b2:	4629      	mov	r1, r5
 80128b4:	f7ed fd00 	bl	80002b8 <__aeabi_dsub>
 80128b8:	4602      	mov	r2, r0
 80128ba:	460b      	mov	r3, r1
 80128bc:	ec51 0b19 	vmov	r0, r1, d9
 80128c0:	f7ed ffdc 	bl	800087c <__aeabi_ddiv>
 80128c4:	4632      	mov	r2, r6
 80128c6:	4604      	mov	r4, r0
 80128c8:	460d      	mov	r5, r1
 80128ca:	463b      	mov	r3, r7
 80128cc:	4640      	mov	r0, r8
 80128ce:	4649      	mov	r1, r9
 80128d0:	f7ed feaa 	bl	8000628 <__aeabi_dmul>
 80128d4:	4632      	mov	r2, r6
 80128d6:	463b      	mov	r3, r7
 80128d8:	f7ed fcf0 	bl	80002bc <__adddf3>
 80128dc:	4602      	mov	r2, r0
 80128de:	460b      	mov	r3, r1
 80128e0:	4620      	mov	r0, r4
 80128e2:	4629      	mov	r1, r5
 80128e4:	f7ed fce8 	bl	80002b8 <__aeabi_dsub>
 80128e8:	4642      	mov	r2, r8
 80128ea:	464b      	mov	r3, r9
 80128ec:	f7ed fce4 	bl	80002b8 <__aeabi_dsub>
 80128f0:	460b      	mov	r3, r1
 80128f2:	4602      	mov	r2, r0
 80128f4:	493a      	ldr	r1, [pc, #232]	; (80129e0 <__ieee754_pow+0xa48>)
 80128f6:	2000      	movs	r0, #0
 80128f8:	f7ed fcde 	bl	80002b8 <__aeabi_dsub>
 80128fc:	ec41 0b10 	vmov	d0, r0, r1
 8012900:	ee10 3a90 	vmov	r3, s1
 8012904:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801290c:	da2b      	bge.n	8012966 <__ieee754_pow+0x9ce>
 801290e:	4650      	mov	r0, sl
 8012910:	f001 fa72 	bl	8013df8 <scalbn>
 8012914:	ec51 0b10 	vmov	r0, r1, d0
 8012918:	ec53 2b18 	vmov	r2, r3, d8
 801291c:	f7ff bbed 	b.w	80120fa <__ieee754_pow+0x162>
 8012920:	4b30      	ldr	r3, [pc, #192]	; (80129e4 <__ieee754_pow+0xa4c>)
 8012922:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012926:	429e      	cmp	r6, r3
 8012928:	f77f af0c 	ble.w	8012744 <__ieee754_pow+0x7ac>
 801292c:	4b2e      	ldr	r3, [pc, #184]	; (80129e8 <__ieee754_pow+0xa50>)
 801292e:	440b      	add	r3, r1
 8012930:	4303      	orrs	r3, r0
 8012932:	d009      	beq.n	8012948 <__ieee754_pow+0x9b0>
 8012934:	ec51 0b18 	vmov	r0, r1, d8
 8012938:	2200      	movs	r2, #0
 801293a:	2300      	movs	r3, #0
 801293c:	f7ee f8e6 	bl	8000b0c <__aeabi_dcmplt>
 8012940:	3800      	subs	r0, #0
 8012942:	bf18      	it	ne
 8012944:	2001      	movne	r0, #1
 8012946:	e447      	b.n	80121d8 <__ieee754_pow+0x240>
 8012948:	4622      	mov	r2, r4
 801294a:	462b      	mov	r3, r5
 801294c:	f7ed fcb4 	bl	80002b8 <__aeabi_dsub>
 8012950:	4642      	mov	r2, r8
 8012952:	464b      	mov	r3, r9
 8012954:	f7ee f8ee 	bl	8000b34 <__aeabi_dcmpge>
 8012958:	2800      	cmp	r0, #0
 801295a:	f43f aef3 	beq.w	8012744 <__ieee754_pow+0x7ac>
 801295e:	e7e9      	b.n	8012934 <__ieee754_pow+0x99c>
 8012960:	f04f 0a00 	mov.w	sl, #0
 8012964:	e71a      	b.n	801279c <__ieee754_pow+0x804>
 8012966:	ec51 0b10 	vmov	r0, r1, d0
 801296a:	4619      	mov	r1, r3
 801296c:	e7d4      	b.n	8012918 <__ieee754_pow+0x980>
 801296e:	491c      	ldr	r1, [pc, #112]	; (80129e0 <__ieee754_pow+0xa48>)
 8012970:	2000      	movs	r0, #0
 8012972:	f7ff bb30 	b.w	8011fd6 <__ieee754_pow+0x3e>
 8012976:	2000      	movs	r0, #0
 8012978:	2100      	movs	r1, #0
 801297a:	f7ff bb2c 	b.w	8011fd6 <__ieee754_pow+0x3e>
 801297e:	4630      	mov	r0, r6
 8012980:	4639      	mov	r1, r7
 8012982:	f7ff bb28 	b.w	8011fd6 <__ieee754_pow+0x3e>
 8012986:	9204      	str	r2, [sp, #16]
 8012988:	f7ff bb7a 	b.w	8012080 <__ieee754_pow+0xe8>
 801298c:	2300      	movs	r3, #0
 801298e:	f7ff bb64 	b.w	801205a <__ieee754_pow+0xc2>
 8012992:	bf00      	nop
 8012994:	f3af 8000 	nop.w
 8012998:	00000000 	.word	0x00000000
 801299c:	3fe62e43 	.word	0x3fe62e43
 80129a0:	fefa39ef 	.word	0xfefa39ef
 80129a4:	3fe62e42 	.word	0x3fe62e42
 80129a8:	0ca86c39 	.word	0x0ca86c39
 80129ac:	be205c61 	.word	0xbe205c61
 80129b0:	72bea4d0 	.word	0x72bea4d0
 80129b4:	3e663769 	.word	0x3e663769
 80129b8:	c5d26bf1 	.word	0xc5d26bf1
 80129bc:	3ebbbd41 	.word	0x3ebbbd41
 80129c0:	af25de2c 	.word	0xaf25de2c
 80129c4:	3f11566a 	.word	0x3f11566a
 80129c8:	16bebd93 	.word	0x16bebd93
 80129cc:	3f66c16c 	.word	0x3f66c16c
 80129d0:	5555553e 	.word	0x5555553e
 80129d4:	3fc55555 	.word	0x3fc55555
 80129d8:	3fe00000 	.word	0x3fe00000
 80129dc:	000fffff 	.word	0x000fffff
 80129e0:	3ff00000 	.word	0x3ff00000
 80129e4:	4090cbff 	.word	0x4090cbff
 80129e8:	3f6f3400 	.word	0x3f6f3400
 80129ec:	652b82fe 	.word	0x652b82fe
 80129f0:	3c971547 	.word	0x3c971547
 80129f4:	00000000 	.word	0x00000000

080129f8 <__ieee754_rem_pio2>:
 80129f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129fc:	ed2d 8b02 	vpush	{d8}
 8012a00:	ec55 4b10 	vmov	r4, r5, d0
 8012a04:	4bca      	ldr	r3, [pc, #808]	; (8012d30 <__ieee754_rem_pio2+0x338>)
 8012a06:	b08b      	sub	sp, #44	; 0x2c
 8012a08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012a0c:	4598      	cmp	r8, r3
 8012a0e:	4682      	mov	sl, r0
 8012a10:	9502      	str	r5, [sp, #8]
 8012a12:	dc08      	bgt.n	8012a26 <__ieee754_rem_pio2+0x2e>
 8012a14:	2200      	movs	r2, #0
 8012a16:	2300      	movs	r3, #0
 8012a18:	ed80 0b00 	vstr	d0, [r0]
 8012a1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012a20:	f04f 0b00 	mov.w	fp, #0
 8012a24:	e028      	b.n	8012a78 <__ieee754_rem_pio2+0x80>
 8012a26:	4bc3      	ldr	r3, [pc, #780]	; (8012d34 <__ieee754_rem_pio2+0x33c>)
 8012a28:	4598      	cmp	r8, r3
 8012a2a:	dc78      	bgt.n	8012b1e <__ieee754_rem_pio2+0x126>
 8012a2c:	9b02      	ldr	r3, [sp, #8]
 8012a2e:	4ec2      	ldr	r6, [pc, #776]	; (8012d38 <__ieee754_rem_pio2+0x340>)
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	ee10 0a10 	vmov	r0, s0
 8012a36:	a3b0      	add	r3, pc, #704	; (adr r3, 8012cf8 <__ieee754_rem_pio2+0x300>)
 8012a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3c:	4629      	mov	r1, r5
 8012a3e:	dd39      	ble.n	8012ab4 <__ieee754_rem_pio2+0xbc>
 8012a40:	f7ed fc3a 	bl	80002b8 <__aeabi_dsub>
 8012a44:	45b0      	cmp	r8, r6
 8012a46:	4604      	mov	r4, r0
 8012a48:	460d      	mov	r5, r1
 8012a4a:	d01b      	beq.n	8012a84 <__ieee754_rem_pio2+0x8c>
 8012a4c:	a3ac      	add	r3, pc, #688	; (adr r3, 8012d00 <__ieee754_rem_pio2+0x308>)
 8012a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a52:	f7ed fc31 	bl	80002b8 <__aeabi_dsub>
 8012a56:	4602      	mov	r2, r0
 8012a58:	460b      	mov	r3, r1
 8012a5a:	e9ca 2300 	strd	r2, r3, [sl]
 8012a5e:	4620      	mov	r0, r4
 8012a60:	4629      	mov	r1, r5
 8012a62:	f7ed fc29 	bl	80002b8 <__aeabi_dsub>
 8012a66:	a3a6      	add	r3, pc, #664	; (adr r3, 8012d00 <__ieee754_rem_pio2+0x308>)
 8012a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6c:	f7ed fc24 	bl	80002b8 <__aeabi_dsub>
 8012a70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012a74:	f04f 0b01 	mov.w	fp, #1
 8012a78:	4658      	mov	r0, fp
 8012a7a:	b00b      	add	sp, #44	; 0x2c
 8012a7c:	ecbd 8b02 	vpop	{d8}
 8012a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a84:	a3a0      	add	r3, pc, #640	; (adr r3, 8012d08 <__ieee754_rem_pio2+0x310>)
 8012a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a8a:	f7ed fc15 	bl	80002b8 <__aeabi_dsub>
 8012a8e:	a3a0      	add	r3, pc, #640	; (adr r3, 8012d10 <__ieee754_rem_pio2+0x318>)
 8012a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a94:	4604      	mov	r4, r0
 8012a96:	460d      	mov	r5, r1
 8012a98:	f7ed fc0e 	bl	80002b8 <__aeabi_dsub>
 8012a9c:	4602      	mov	r2, r0
 8012a9e:	460b      	mov	r3, r1
 8012aa0:	e9ca 2300 	strd	r2, r3, [sl]
 8012aa4:	4620      	mov	r0, r4
 8012aa6:	4629      	mov	r1, r5
 8012aa8:	f7ed fc06 	bl	80002b8 <__aeabi_dsub>
 8012aac:	a398      	add	r3, pc, #608	; (adr r3, 8012d10 <__ieee754_rem_pio2+0x318>)
 8012aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab2:	e7db      	b.n	8012a6c <__ieee754_rem_pio2+0x74>
 8012ab4:	f7ed fc02 	bl	80002bc <__adddf3>
 8012ab8:	45b0      	cmp	r8, r6
 8012aba:	4604      	mov	r4, r0
 8012abc:	460d      	mov	r5, r1
 8012abe:	d016      	beq.n	8012aee <__ieee754_rem_pio2+0xf6>
 8012ac0:	a38f      	add	r3, pc, #572	; (adr r3, 8012d00 <__ieee754_rem_pio2+0x308>)
 8012ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac6:	f7ed fbf9 	bl	80002bc <__adddf3>
 8012aca:	4602      	mov	r2, r0
 8012acc:	460b      	mov	r3, r1
 8012ace:	e9ca 2300 	strd	r2, r3, [sl]
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	4629      	mov	r1, r5
 8012ad6:	f7ed fbef 	bl	80002b8 <__aeabi_dsub>
 8012ada:	a389      	add	r3, pc, #548	; (adr r3, 8012d00 <__ieee754_rem_pio2+0x308>)
 8012adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae0:	f7ed fbec 	bl	80002bc <__adddf3>
 8012ae4:	f04f 3bff 	mov.w	fp, #4294967295
 8012ae8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012aec:	e7c4      	b.n	8012a78 <__ieee754_rem_pio2+0x80>
 8012aee:	a386      	add	r3, pc, #536	; (adr r3, 8012d08 <__ieee754_rem_pio2+0x310>)
 8012af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af4:	f7ed fbe2 	bl	80002bc <__adddf3>
 8012af8:	a385      	add	r3, pc, #532	; (adr r3, 8012d10 <__ieee754_rem_pio2+0x318>)
 8012afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012afe:	4604      	mov	r4, r0
 8012b00:	460d      	mov	r5, r1
 8012b02:	f7ed fbdb 	bl	80002bc <__adddf3>
 8012b06:	4602      	mov	r2, r0
 8012b08:	460b      	mov	r3, r1
 8012b0a:	e9ca 2300 	strd	r2, r3, [sl]
 8012b0e:	4620      	mov	r0, r4
 8012b10:	4629      	mov	r1, r5
 8012b12:	f7ed fbd1 	bl	80002b8 <__aeabi_dsub>
 8012b16:	a37e      	add	r3, pc, #504	; (adr r3, 8012d10 <__ieee754_rem_pio2+0x318>)
 8012b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b1c:	e7e0      	b.n	8012ae0 <__ieee754_rem_pio2+0xe8>
 8012b1e:	4b87      	ldr	r3, [pc, #540]	; (8012d3c <__ieee754_rem_pio2+0x344>)
 8012b20:	4598      	cmp	r8, r3
 8012b22:	f300 80d9 	bgt.w	8012cd8 <__ieee754_rem_pio2+0x2e0>
 8012b26:	f001 f8d3 	bl	8013cd0 <fabs>
 8012b2a:	ec55 4b10 	vmov	r4, r5, d0
 8012b2e:	ee10 0a10 	vmov	r0, s0
 8012b32:	a379      	add	r3, pc, #484	; (adr r3, 8012d18 <__ieee754_rem_pio2+0x320>)
 8012b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b38:	4629      	mov	r1, r5
 8012b3a:	f7ed fd75 	bl	8000628 <__aeabi_dmul>
 8012b3e:	4b80      	ldr	r3, [pc, #512]	; (8012d40 <__ieee754_rem_pio2+0x348>)
 8012b40:	2200      	movs	r2, #0
 8012b42:	f7ed fbbb 	bl	80002bc <__adddf3>
 8012b46:	f7ee f81f 	bl	8000b88 <__aeabi_d2iz>
 8012b4a:	4683      	mov	fp, r0
 8012b4c:	f7ed fd02 	bl	8000554 <__aeabi_i2d>
 8012b50:	4602      	mov	r2, r0
 8012b52:	460b      	mov	r3, r1
 8012b54:	ec43 2b18 	vmov	d8, r2, r3
 8012b58:	a367      	add	r3, pc, #412	; (adr r3, 8012cf8 <__ieee754_rem_pio2+0x300>)
 8012b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5e:	f7ed fd63 	bl	8000628 <__aeabi_dmul>
 8012b62:	4602      	mov	r2, r0
 8012b64:	460b      	mov	r3, r1
 8012b66:	4620      	mov	r0, r4
 8012b68:	4629      	mov	r1, r5
 8012b6a:	f7ed fba5 	bl	80002b8 <__aeabi_dsub>
 8012b6e:	a364      	add	r3, pc, #400	; (adr r3, 8012d00 <__ieee754_rem_pio2+0x308>)
 8012b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b74:	4606      	mov	r6, r0
 8012b76:	460f      	mov	r7, r1
 8012b78:	ec51 0b18 	vmov	r0, r1, d8
 8012b7c:	f7ed fd54 	bl	8000628 <__aeabi_dmul>
 8012b80:	f1bb 0f1f 	cmp.w	fp, #31
 8012b84:	4604      	mov	r4, r0
 8012b86:	460d      	mov	r5, r1
 8012b88:	dc0d      	bgt.n	8012ba6 <__ieee754_rem_pio2+0x1ae>
 8012b8a:	4b6e      	ldr	r3, [pc, #440]	; (8012d44 <__ieee754_rem_pio2+0x34c>)
 8012b8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b94:	4543      	cmp	r3, r8
 8012b96:	d006      	beq.n	8012ba6 <__ieee754_rem_pio2+0x1ae>
 8012b98:	4622      	mov	r2, r4
 8012b9a:	462b      	mov	r3, r5
 8012b9c:	4630      	mov	r0, r6
 8012b9e:	4639      	mov	r1, r7
 8012ba0:	f7ed fb8a 	bl	80002b8 <__aeabi_dsub>
 8012ba4:	e00f      	b.n	8012bc6 <__ieee754_rem_pio2+0x1ce>
 8012ba6:	462b      	mov	r3, r5
 8012ba8:	4622      	mov	r2, r4
 8012baa:	4630      	mov	r0, r6
 8012bac:	4639      	mov	r1, r7
 8012bae:	f7ed fb83 	bl	80002b8 <__aeabi_dsub>
 8012bb2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012bb6:	9303      	str	r3, [sp, #12]
 8012bb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012bbc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012bc0:	f1b8 0f10 	cmp.w	r8, #16
 8012bc4:	dc02      	bgt.n	8012bcc <__ieee754_rem_pio2+0x1d4>
 8012bc6:	e9ca 0100 	strd	r0, r1, [sl]
 8012bca:	e039      	b.n	8012c40 <__ieee754_rem_pio2+0x248>
 8012bcc:	a34e      	add	r3, pc, #312	; (adr r3, 8012d08 <__ieee754_rem_pio2+0x310>)
 8012bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd2:	ec51 0b18 	vmov	r0, r1, d8
 8012bd6:	f7ed fd27 	bl	8000628 <__aeabi_dmul>
 8012bda:	4604      	mov	r4, r0
 8012bdc:	460d      	mov	r5, r1
 8012bde:	4602      	mov	r2, r0
 8012be0:	460b      	mov	r3, r1
 8012be2:	4630      	mov	r0, r6
 8012be4:	4639      	mov	r1, r7
 8012be6:	f7ed fb67 	bl	80002b8 <__aeabi_dsub>
 8012bea:	4602      	mov	r2, r0
 8012bec:	460b      	mov	r3, r1
 8012bee:	4680      	mov	r8, r0
 8012bf0:	4689      	mov	r9, r1
 8012bf2:	4630      	mov	r0, r6
 8012bf4:	4639      	mov	r1, r7
 8012bf6:	f7ed fb5f 	bl	80002b8 <__aeabi_dsub>
 8012bfa:	4622      	mov	r2, r4
 8012bfc:	462b      	mov	r3, r5
 8012bfe:	f7ed fb5b 	bl	80002b8 <__aeabi_dsub>
 8012c02:	a343      	add	r3, pc, #268	; (adr r3, 8012d10 <__ieee754_rem_pio2+0x318>)
 8012c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c08:	4604      	mov	r4, r0
 8012c0a:	460d      	mov	r5, r1
 8012c0c:	ec51 0b18 	vmov	r0, r1, d8
 8012c10:	f7ed fd0a 	bl	8000628 <__aeabi_dmul>
 8012c14:	4622      	mov	r2, r4
 8012c16:	462b      	mov	r3, r5
 8012c18:	f7ed fb4e 	bl	80002b8 <__aeabi_dsub>
 8012c1c:	4602      	mov	r2, r0
 8012c1e:	460b      	mov	r3, r1
 8012c20:	4604      	mov	r4, r0
 8012c22:	460d      	mov	r5, r1
 8012c24:	4640      	mov	r0, r8
 8012c26:	4649      	mov	r1, r9
 8012c28:	f7ed fb46 	bl	80002b8 <__aeabi_dsub>
 8012c2c:	9a03      	ldr	r2, [sp, #12]
 8012c2e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012c32:	1ad3      	subs	r3, r2, r3
 8012c34:	2b31      	cmp	r3, #49	; 0x31
 8012c36:	dc24      	bgt.n	8012c82 <__ieee754_rem_pio2+0x28a>
 8012c38:	e9ca 0100 	strd	r0, r1, [sl]
 8012c3c:	4646      	mov	r6, r8
 8012c3e:	464f      	mov	r7, r9
 8012c40:	e9da 8900 	ldrd	r8, r9, [sl]
 8012c44:	4630      	mov	r0, r6
 8012c46:	4642      	mov	r2, r8
 8012c48:	464b      	mov	r3, r9
 8012c4a:	4639      	mov	r1, r7
 8012c4c:	f7ed fb34 	bl	80002b8 <__aeabi_dsub>
 8012c50:	462b      	mov	r3, r5
 8012c52:	4622      	mov	r2, r4
 8012c54:	f7ed fb30 	bl	80002b8 <__aeabi_dsub>
 8012c58:	9b02      	ldr	r3, [sp, #8]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012c60:	f6bf af0a 	bge.w	8012a78 <__ieee754_rem_pio2+0x80>
 8012c64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012c68:	f8ca 3004 	str.w	r3, [sl, #4]
 8012c6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c70:	f8ca 8000 	str.w	r8, [sl]
 8012c74:	f8ca 0008 	str.w	r0, [sl, #8]
 8012c78:	f8ca 300c 	str.w	r3, [sl, #12]
 8012c7c:	f1cb 0b00 	rsb	fp, fp, #0
 8012c80:	e6fa      	b.n	8012a78 <__ieee754_rem_pio2+0x80>
 8012c82:	a327      	add	r3, pc, #156	; (adr r3, 8012d20 <__ieee754_rem_pio2+0x328>)
 8012c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c88:	ec51 0b18 	vmov	r0, r1, d8
 8012c8c:	f7ed fccc 	bl	8000628 <__aeabi_dmul>
 8012c90:	4604      	mov	r4, r0
 8012c92:	460d      	mov	r5, r1
 8012c94:	4602      	mov	r2, r0
 8012c96:	460b      	mov	r3, r1
 8012c98:	4640      	mov	r0, r8
 8012c9a:	4649      	mov	r1, r9
 8012c9c:	f7ed fb0c 	bl	80002b8 <__aeabi_dsub>
 8012ca0:	4602      	mov	r2, r0
 8012ca2:	460b      	mov	r3, r1
 8012ca4:	4606      	mov	r6, r0
 8012ca6:	460f      	mov	r7, r1
 8012ca8:	4640      	mov	r0, r8
 8012caa:	4649      	mov	r1, r9
 8012cac:	f7ed fb04 	bl	80002b8 <__aeabi_dsub>
 8012cb0:	4622      	mov	r2, r4
 8012cb2:	462b      	mov	r3, r5
 8012cb4:	f7ed fb00 	bl	80002b8 <__aeabi_dsub>
 8012cb8:	a31b      	add	r3, pc, #108	; (adr r3, 8012d28 <__ieee754_rem_pio2+0x330>)
 8012cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cbe:	4604      	mov	r4, r0
 8012cc0:	460d      	mov	r5, r1
 8012cc2:	ec51 0b18 	vmov	r0, r1, d8
 8012cc6:	f7ed fcaf 	bl	8000628 <__aeabi_dmul>
 8012cca:	4622      	mov	r2, r4
 8012ccc:	462b      	mov	r3, r5
 8012cce:	f7ed faf3 	bl	80002b8 <__aeabi_dsub>
 8012cd2:	4604      	mov	r4, r0
 8012cd4:	460d      	mov	r5, r1
 8012cd6:	e75f      	b.n	8012b98 <__ieee754_rem_pio2+0x1a0>
 8012cd8:	4b1b      	ldr	r3, [pc, #108]	; (8012d48 <__ieee754_rem_pio2+0x350>)
 8012cda:	4598      	cmp	r8, r3
 8012cdc:	dd36      	ble.n	8012d4c <__ieee754_rem_pio2+0x354>
 8012cde:	ee10 2a10 	vmov	r2, s0
 8012ce2:	462b      	mov	r3, r5
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	4629      	mov	r1, r5
 8012ce8:	f7ed fae6 	bl	80002b8 <__aeabi_dsub>
 8012cec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012cf0:	e9ca 0100 	strd	r0, r1, [sl]
 8012cf4:	e694      	b.n	8012a20 <__ieee754_rem_pio2+0x28>
 8012cf6:	bf00      	nop
 8012cf8:	54400000 	.word	0x54400000
 8012cfc:	3ff921fb 	.word	0x3ff921fb
 8012d00:	1a626331 	.word	0x1a626331
 8012d04:	3dd0b461 	.word	0x3dd0b461
 8012d08:	1a600000 	.word	0x1a600000
 8012d0c:	3dd0b461 	.word	0x3dd0b461
 8012d10:	2e037073 	.word	0x2e037073
 8012d14:	3ba3198a 	.word	0x3ba3198a
 8012d18:	6dc9c883 	.word	0x6dc9c883
 8012d1c:	3fe45f30 	.word	0x3fe45f30
 8012d20:	2e000000 	.word	0x2e000000
 8012d24:	3ba3198a 	.word	0x3ba3198a
 8012d28:	252049c1 	.word	0x252049c1
 8012d2c:	397b839a 	.word	0x397b839a
 8012d30:	3fe921fb 	.word	0x3fe921fb
 8012d34:	4002d97b 	.word	0x4002d97b
 8012d38:	3ff921fb 	.word	0x3ff921fb
 8012d3c:	413921fb 	.word	0x413921fb
 8012d40:	3fe00000 	.word	0x3fe00000
 8012d44:	08014758 	.word	0x08014758
 8012d48:	7fefffff 	.word	0x7fefffff
 8012d4c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012d50:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012d54:	ee10 0a10 	vmov	r0, s0
 8012d58:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8012d5c:	ee10 6a10 	vmov	r6, s0
 8012d60:	460f      	mov	r7, r1
 8012d62:	f7ed ff11 	bl	8000b88 <__aeabi_d2iz>
 8012d66:	f7ed fbf5 	bl	8000554 <__aeabi_i2d>
 8012d6a:	4602      	mov	r2, r0
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	4630      	mov	r0, r6
 8012d70:	4639      	mov	r1, r7
 8012d72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012d76:	f7ed fa9f 	bl	80002b8 <__aeabi_dsub>
 8012d7a:	4b23      	ldr	r3, [pc, #140]	; (8012e08 <__ieee754_rem_pio2+0x410>)
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	f7ed fc53 	bl	8000628 <__aeabi_dmul>
 8012d82:	460f      	mov	r7, r1
 8012d84:	4606      	mov	r6, r0
 8012d86:	f7ed feff 	bl	8000b88 <__aeabi_d2iz>
 8012d8a:	f7ed fbe3 	bl	8000554 <__aeabi_i2d>
 8012d8e:	4602      	mov	r2, r0
 8012d90:	460b      	mov	r3, r1
 8012d92:	4630      	mov	r0, r6
 8012d94:	4639      	mov	r1, r7
 8012d96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012d9a:	f7ed fa8d 	bl	80002b8 <__aeabi_dsub>
 8012d9e:	4b1a      	ldr	r3, [pc, #104]	; (8012e08 <__ieee754_rem_pio2+0x410>)
 8012da0:	2200      	movs	r2, #0
 8012da2:	f7ed fc41 	bl	8000628 <__aeabi_dmul>
 8012da6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012daa:	ad04      	add	r5, sp, #16
 8012dac:	f04f 0803 	mov.w	r8, #3
 8012db0:	46a9      	mov	r9, r5
 8012db2:	2600      	movs	r6, #0
 8012db4:	2700      	movs	r7, #0
 8012db6:	4632      	mov	r2, r6
 8012db8:	463b      	mov	r3, r7
 8012dba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8012dbe:	46c3      	mov	fp, r8
 8012dc0:	3d08      	subs	r5, #8
 8012dc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8012dc6:	f7ed fe97 	bl	8000af8 <__aeabi_dcmpeq>
 8012dca:	2800      	cmp	r0, #0
 8012dcc:	d1f3      	bne.n	8012db6 <__ieee754_rem_pio2+0x3be>
 8012dce:	4b0f      	ldr	r3, [pc, #60]	; (8012e0c <__ieee754_rem_pio2+0x414>)
 8012dd0:	9301      	str	r3, [sp, #4]
 8012dd2:	2302      	movs	r3, #2
 8012dd4:	9300      	str	r3, [sp, #0]
 8012dd6:	4622      	mov	r2, r4
 8012dd8:	465b      	mov	r3, fp
 8012dda:	4651      	mov	r1, sl
 8012ddc:	4648      	mov	r0, r9
 8012dde:	f000 f997 	bl	8013110 <__kernel_rem_pio2>
 8012de2:	9b02      	ldr	r3, [sp, #8]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	4683      	mov	fp, r0
 8012de8:	f6bf ae46 	bge.w	8012a78 <__ieee754_rem_pio2+0x80>
 8012dec:	e9da 2100 	ldrd	r2, r1, [sl]
 8012df0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012df4:	e9ca 2300 	strd	r2, r3, [sl]
 8012df8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8012dfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e00:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8012e04:	e73a      	b.n	8012c7c <__ieee754_rem_pio2+0x284>
 8012e06:	bf00      	nop
 8012e08:	41700000 	.word	0x41700000
 8012e0c:	080147d8 	.word	0x080147d8

08012e10 <__ieee754_sqrt>:
 8012e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e14:	ec55 4b10 	vmov	r4, r5, d0
 8012e18:	4e55      	ldr	r6, [pc, #340]	; (8012f70 <__ieee754_sqrt+0x160>)
 8012e1a:	43ae      	bics	r6, r5
 8012e1c:	ee10 0a10 	vmov	r0, s0
 8012e20:	ee10 3a10 	vmov	r3, s0
 8012e24:	462a      	mov	r2, r5
 8012e26:	4629      	mov	r1, r5
 8012e28:	d110      	bne.n	8012e4c <__ieee754_sqrt+0x3c>
 8012e2a:	ee10 2a10 	vmov	r2, s0
 8012e2e:	462b      	mov	r3, r5
 8012e30:	f7ed fbfa 	bl	8000628 <__aeabi_dmul>
 8012e34:	4602      	mov	r2, r0
 8012e36:	460b      	mov	r3, r1
 8012e38:	4620      	mov	r0, r4
 8012e3a:	4629      	mov	r1, r5
 8012e3c:	f7ed fa3e 	bl	80002bc <__adddf3>
 8012e40:	4604      	mov	r4, r0
 8012e42:	460d      	mov	r5, r1
 8012e44:	ec45 4b10 	vmov	d0, r4, r5
 8012e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e4c:	2d00      	cmp	r5, #0
 8012e4e:	dc10      	bgt.n	8012e72 <__ieee754_sqrt+0x62>
 8012e50:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012e54:	4330      	orrs	r0, r6
 8012e56:	d0f5      	beq.n	8012e44 <__ieee754_sqrt+0x34>
 8012e58:	b15d      	cbz	r5, 8012e72 <__ieee754_sqrt+0x62>
 8012e5a:	ee10 2a10 	vmov	r2, s0
 8012e5e:	462b      	mov	r3, r5
 8012e60:	ee10 0a10 	vmov	r0, s0
 8012e64:	f7ed fa28 	bl	80002b8 <__aeabi_dsub>
 8012e68:	4602      	mov	r2, r0
 8012e6a:	460b      	mov	r3, r1
 8012e6c:	f7ed fd06 	bl	800087c <__aeabi_ddiv>
 8012e70:	e7e6      	b.n	8012e40 <__ieee754_sqrt+0x30>
 8012e72:	1512      	asrs	r2, r2, #20
 8012e74:	d074      	beq.n	8012f60 <__ieee754_sqrt+0x150>
 8012e76:	07d4      	lsls	r4, r2, #31
 8012e78:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012e7c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012e80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012e84:	bf5e      	ittt	pl
 8012e86:	0fda      	lsrpl	r2, r3, #31
 8012e88:	005b      	lslpl	r3, r3, #1
 8012e8a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012e8e:	2400      	movs	r4, #0
 8012e90:	0fda      	lsrs	r2, r3, #31
 8012e92:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012e96:	107f      	asrs	r7, r7, #1
 8012e98:	005b      	lsls	r3, r3, #1
 8012e9a:	2516      	movs	r5, #22
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012ea2:	1886      	adds	r6, r0, r2
 8012ea4:	428e      	cmp	r6, r1
 8012ea6:	bfde      	ittt	le
 8012ea8:	1b89      	suble	r1, r1, r6
 8012eaa:	18b0      	addle	r0, r6, r2
 8012eac:	18a4      	addle	r4, r4, r2
 8012eae:	0049      	lsls	r1, r1, #1
 8012eb0:	3d01      	subs	r5, #1
 8012eb2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012eb6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012eba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012ebe:	d1f0      	bne.n	8012ea2 <__ieee754_sqrt+0x92>
 8012ec0:	462a      	mov	r2, r5
 8012ec2:	f04f 0e20 	mov.w	lr, #32
 8012ec6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012eca:	4281      	cmp	r1, r0
 8012ecc:	eb06 0c05 	add.w	ip, r6, r5
 8012ed0:	dc02      	bgt.n	8012ed8 <__ieee754_sqrt+0xc8>
 8012ed2:	d113      	bne.n	8012efc <__ieee754_sqrt+0xec>
 8012ed4:	459c      	cmp	ip, r3
 8012ed6:	d811      	bhi.n	8012efc <__ieee754_sqrt+0xec>
 8012ed8:	f1bc 0f00 	cmp.w	ip, #0
 8012edc:	eb0c 0506 	add.w	r5, ip, r6
 8012ee0:	da43      	bge.n	8012f6a <__ieee754_sqrt+0x15a>
 8012ee2:	2d00      	cmp	r5, #0
 8012ee4:	db41      	blt.n	8012f6a <__ieee754_sqrt+0x15a>
 8012ee6:	f100 0801 	add.w	r8, r0, #1
 8012eea:	1a09      	subs	r1, r1, r0
 8012eec:	459c      	cmp	ip, r3
 8012eee:	bf88      	it	hi
 8012ef0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012ef4:	eba3 030c 	sub.w	r3, r3, ip
 8012ef8:	4432      	add	r2, r6
 8012efa:	4640      	mov	r0, r8
 8012efc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012f00:	f1be 0e01 	subs.w	lr, lr, #1
 8012f04:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012f08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012f0c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012f10:	d1db      	bne.n	8012eca <__ieee754_sqrt+0xba>
 8012f12:	430b      	orrs	r3, r1
 8012f14:	d006      	beq.n	8012f24 <__ieee754_sqrt+0x114>
 8012f16:	1c50      	adds	r0, r2, #1
 8012f18:	bf13      	iteet	ne
 8012f1a:	3201      	addne	r2, #1
 8012f1c:	3401      	addeq	r4, #1
 8012f1e:	4672      	moveq	r2, lr
 8012f20:	f022 0201 	bicne.w	r2, r2, #1
 8012f24:	1063      	asrs	r3, r4, #1
 8012f26:	0852      	lsrs	r2, r2, #1
 8012f28:	07e1      	lsls	r1, r4, #31
 8012f2a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012f2e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012f32:	bf48      	it	mi
 8012f34:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012f38:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012f3c:	4614      	mov	r4, r2
 8012f3e:	e781      	b.n	8012e44 <__ieee754_sqrt+0x34>
 8012f40:	0ad9      	lsrs	r1, r3, #11
 8012f42:	3815      	subs	r0, #21
 8012f44:	055b      	lsls	r3, r3, #21
 8012f46:	2900      	cmp	r1, #0
 8012f48:	d0fa      	beq.n	8012f40 <__ieee754_sqrt+0x130>
 8012f4a:	02cd      	lsls	r5, r1, #11
 8012f4c:	d50a      	bpl.n	8012f64 <__ieee754_sqrt+0x154>
 8012f4e:	f1c2 0420 	rsb	r4, r2, #32
 8012f52:	fa23 f404 	lsr.w	r4, r3, r4
 8012f56:	1e55      	subs	r5, r2, #1
 8012f58:	4093      	lsls	r3, r2
 8012f5a:	4321      	orrs	r1, r4
 8012f5c:	1b42      	subs	r2, r0, r5
 8012f5e:	e78a      	b.n	8012e76 <__ieee754_sqrt+0x66>
 8012f60:	4610      	mov	r0, r2
 8012f62:	e7f0      	b.n	8012f46 <__ieee754_sqrt+0x136>
 8012f64:	0049      	lsls	r1, r1, #1
 8012f66:	3201      	adds	r2, #1
 8012f68:	e7ef      	b.n	8012f4a <__ieee754_sqrt+0x13a>
 8012f6a:	4680      	mov	r8, r0
 8012f6c:	e7bd      	b.n	8012eea <__ieee754_sqrt+0xda>
 8012f6e:	bf00      	nop
 8012f70:	7ff00000 	.word	0x7ff00000

08012f74 <__ieee754_sqrtf>:
 8012f74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012f78:	4770      	bx	lr
 8012f7a:	0000      	movs	r0, r0
 8012f7c:	0000      	movs	r0, r0
	...

08012f80 <__kernel_cos>:
 8012f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f84:	ec57 6b10 	vmov	r6, r7, d0
 8012f88:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012f8c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012f90:	ed8d 1b00 	vstr	d1, [sp]
 8012f94:	da07      	bge.n	8012fa6 <__kernel_cos+0x26>
 8012f96:	ee10 0a10 	vmov	r0, s0
 8012f9a:	4639      	mov	r1, r7
 8012f9c:	f7ed fdf4 	bl	8000b88 <__aeabi_d2iz>
 8012fa0:	2800      	cmp	r0, #0
 8012fa2:	f000 8088 	beq.w	80130b6 <__kernel_cos+0x136>
 8012fa6:	4632      	mov	r2, r6
 8012fa8:	463b      	mov	r3, r7
 8012faa:	4630      	mov	r0, r6
 8012fac:	4639      	mov	r1, r7
 8012fae:	f7ed fb3b 	bl	8000628 <__aeabi_dmul>
 8012fb2:	4b51      	ldr	r3, [pc, #324]	; (80130f8 <__kernel_cos+0x178>)
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	4604      	mov	r4, r0
 8012fb8:	460d      	mov	r5, r1
 8012fba:	f7ed fb35 	bl	8000628 <__aeabi_dmul>
 8012fbe:	a340      	add	r3, pc, #256	; (adr r3, 80130c0 <__kernel_cos+0x140>)
 8012fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc4:	4682      	mov	sl, r0
 8012fc6:	468b      	mov	fp, r1
 8012fc8:	4620      	mov	r0, r4
 8012fca:	4629      	mov	r1, r5
 8012fcc:	f7ed fb2c 	bl	8000628 <__aeabi_dmul>
 8012fd0:	a33d      	add	r3, pc, #244	; (adr r3, 80130c8 <__kernel_cos+0x148>)
 8012fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd6:	f7ed f971 	bl	80002bc <__adddf3>
 8012fda:	4622      	mov	r2, r4
 8012fdc:	462b      	mov	r3, r5
 8012fde:	f7ed fb23 	bl	8000628 <__aeabi_dmul>
 8012fe2:	a33b      	add	r3, pc, #236	; (adr r3, 80130d0 <__kernel_cos+0x150>)
 8012fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe8:	f7ed f966 	bl	80002b8 <__aeabi_dsub>
 8012fec:	4622      	mov	r2, r4
 8012fee:	462b      	mov	r3, r5
 8012ff0:	f7ed fb1a 	bl	8000628 <__aeabi_dmul>
 8012ff4:	a338      	add	r3, pc, #224	; (adr r3, 80130d8 <__kernel_cos+0x158>)
 8012ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffa:	f7ed f95f 	bl	80002bc <__adddf3>
 8012ffe:	4622      	mov	r2, r4
 8013000:	462b      	mov	r3, r5
 8013002:	f7ed fb11 	bl	8000628 <__aeabi_dmul>
 8013006:	a336      	add	r3, pc, #216	; (adr r3, 80130e0 <__kernel_cos+0x160>)
 8013008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801300c:	f7ed f954 	bl	80002b8 <__aeabi_dsub>
 8013010:	4622      	mov	r2, r4
 8013012:	462b      	mov	r3, r5
 8013014:	f7ed fb08 	bl	8000628 <__aeabi_dmul>
 8013018:	a333      	add	r3, pc, #204	; (adr r3, 80130e8 <__kernel_cos+0x168>)
 801301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801301e:	f7ed f94d 	bl	80002bc <__adddf3>
 8013022:	4622      	mov	r2, r4
 8013024:	462b      	mov	r3, r5
 8013026:	f7ed faff 	bl	8000628 <__aeabi_dmul>
 801302a:	4622      	mov	r2, r4
 801302c:	462b      	mov	r3, r5
 801302e:	f7ed fafb 	bl	8000628 <__aeabi_dmul>
 8013032:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013036:	4604      	mov	r4, r0
 8013038:	460d      	mov	r5, r1
 801303a:	4630      	mov	r0, r6
 801303c:	4639      	mov	r1, r7
 801303e:	f7ed faf3 	bl	8000628 <__aeabi_dmul>
 8013042:	460b      	mov	r3, r1
 8013044:	4602      	mov	r2, r0
 8013046:	4629      	mov	r1, r5
 8013048:	4620      	mov	r0, r4
 801304a:	f7ed f935 	bl	80002b8 <__aeabi_dsub>
 801304e:	4b2b      	ldr	r3, [pc, #172]	; (80130fc <__kernel_cos+0x17c>)
 8013050:	4598      	cmp	r8, r3
 8013052:	4606      	mov	r6, r0
 8013054:	460f      	mov	r7, r1
 8013056:	dc10      	bgt.n	801307a <__kernel_cos+0xfa>
 8013058:	4602      	mov	r2, r0
 801305a:	460b      	mov	r3, r1
 801305c:	4650      	mov	r0, sl
 801305e:	4659      	mov	r1, fp
 8013060:	f7ed f92a 	bl	80002b8 <__aeabi_dsub>
 8013064:	460b      	mov	r3, r1
 8013066:	4926      	ldr	r1, [pc, #152]	; (8013100 <__kernel_cos+0x180>)
 8013068:	4602      	mov	r2, r0
 801306a:	2000      	movs	r0, #0
 801306c:	f7ed f924 	bl	80002b8 <__aeabi_dsub>
 8013070:	ec41 0b10 	vmov	d0, r0, r1
 8013074:	b003      	add	sp, #12
 8013076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801307a:	4b22      	ldr	r3, [pc, #136]	; (8013104 <__kernel_cos+0x184>)
 801307c:	4920      	ldr	r1, [pc, #128]	; (8013100 <__kernel_cos+0x180>)
 801307e:	4598      	cmp	r8, r3
 8013080:	bfcc      	ite	gt
 8013082:	4d21      	ldrgt	r5, [pc, #132]	; (8013108 <__kernel_cos+0x188>)
 8013084:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8013088:	2400      	movs	r4, #0
 801308a:	4622      	mov	r2, r4
 801308c:	462b      	mov	r3, r5
 801308e:	2000      	movs	r0, #0
 8013090:	f7ed f912 	bl	80002b8 <__aeabi_dsub>
 8013094:	4622      	mov	r2, r4
 8013096:	4680      	mov	r8, r0
 8013098:	4689      	mov	r9, r1
 801309a:	462b      	mov	r3, r5
 801309c:	4650      	mov	r0, sl
 801309e:	4659      	mov	r1, fp
 80130a0:	f7ed f90a 	bl	80002b8 <__aeabi_dsub>
 80130a4:	4632      	mov	r2, r6
 80130a6:	463b      	mov	r3, r7
 80130a8:	f7ed f906 	bl	80002b8 <__aeabi_dsub>
 80130ac:	4602      	mov	r2, r0
 80130ae:	460b      	mov	r3, r1
 80130b0:	4640      	mov	r0, r8
 80130b2:	4649      	mov	r1, r9
 80130b4:	e7da      	b.n	801306c <__kernel_cos+0xec>
 80130b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80130f0 <__kernel_cos+0x170>
 80130ba:	e7db      	b.n	8013074 <__kernel_cos+0xf4>
 80130bc:	f3af 8000 	nop.w
 80130c0:	be8838d4 	.word	0xbe8838d4
 80130c4:	bda8fae9 	.word	0xbda8fae9
 80130c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80130cc:	3e21ee9e 	.word	0x3e21ee9e
 80130d0:	809c52ad 	.word	0x809c52ad
 80130d4:	3e927e4f 	.word	0x3e927e4f
 80130d8:	19cb1590 	.word	0x19cb1590
 80130dc:	3efa01a0 	.word	0x3efa01a0
 80130e0:	16c15177 	.word	0x16c15177
 80130e4:	3f56c16c 	.word	0x3f56c16c
 80130e8:	5555554c 	.word	0x5555554c
 80130ec:	3fa55555 	.word	0x3fa55555
 80130f0:	00000000 	.word	0x00000000
 80130f4:	3ff00000 	.word	0x3ff00000
 80130f8:	3fe00000 	.word	0x3fe00000
 80130fc:	3fd33332 	.word	0x3fd33332
 8013100:	3ff00000 	.word	0x3ff00000
 8013104:	3fe90000 	.word	0x3fe90000
 8013108:	3fd20000 	.word	0x3fd20000
 801310c:	00000000 	.word	0x00000000

08013110 <__kernel_rem_pio2>:
 8013110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013114:	ed2d 8b02 	vpush	{d8}
 8013118:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801311c:	f112 0f14 	cmn.w	r2, #20
 8013120:	9308      	str	r3, [sp, #32]
 8013122:	9101      	str	r1, [sp, #4]
 8013124:	4bc4      	ldr	r3, [pc, #784]	; (8013438 <__kernel_rem_pio2+0x328>)
 8013126:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013128:	900b      	str	r0, [sp, #44]	; 0x2c
 801312a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801312e:	9302      	str	r3, [sp, #8]
 8013130:	9b08      	ldr	r3, [sp, #32]
 8013132:	f103 33ff 	add.w	r3, r3, #4294967295
 8013136:	bfa8      	it	ge
 8013138:	1ed4      	subge	r4, r2, #3
 801313a:	9306      	str	r3, [sp, #24]
 801313c:	bfb2      	itee	lt
 801313e:	2400      	movlt	r4, #0
 8013140:	2318      	movge	r3, #24
 8013142:	fb94 f4f3 	sdivge	r4, r4, r3
 8013146:	f06f 0317 	mvn.w	r3, #23
 801314a:	fb04 3303 	mla	r3, r4, r3, r3
 801314e:	eb03 0a02 	add.w	sl, r3, r2
 8013152:	9b02      	ldr	r3, [sp, #8]
 8013154:	9a06      	ldr	r2, [sp, #24]
 8013156:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8013428 <__kernel_rem_pio2+0x318>
 801315a:	eb03 0802 	add.w	r8, r3, r2
 801315e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013160:	1aa7      	subs	r7, r4, r2
 8013162:	ae22      	add	r6, sp, #136	; 0x88
 8013164:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013168:	2500      	movs	r5, #0
 801316a:	4545      	cmp	r5, r8
 801316c:	dd13      	ble.n	8013196 <__kernel_rem_pio2+0x86>
 801316e:	9b08      	ldr	r3, [sp, #32]
 8013170:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8013428 <__kernel_rem_pio2+0x318>
 8013174:	aa22      	add	r2, sp, #136	; 0x88
 8013176:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801317a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801317e:	f04f 0800 	mov.w	r8, #0
 8013182:	9b02      	ldr	r3, [sp, #8]
 8013184:	4598      	cmp	r8, r3
 8013186:	dc2f      	bgt.n	80131e8 <__kernel_rem_pio2+0xd8>
 8013188:	ed8d 8b04 	vstr	d8, [sp, #16]
 801318c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8013190:	462f      	mov	r7, r5
 8013192:	2600      	movs	r6, #0
 8013194:	e01b      	b.n	80131ce <__kernel_rem_pio2+0xbe>
 8013196:	42ef      	cmn	r7, r5
 8013198:	d407      	bmi.n	80131aa <__kernel_rem_pio2+0x9a>
 801319a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801319e:	f7ed f9d9 	bl	8000554 <__aeabi_i2d>
 80131a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80131a6:	3501      	adds	r5, #1
 80131a8:	e7df      	b.n	801316a <__kernel_rem_pio2+0x5a>
 80131aa:	ec51 0b18 	vmov	r0, r1, d8
 80131ae:	e7f8      	b.n	80131a2 <__kernel_rem_pio2+0x92>
 80131b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80131b8:	f7ed fa36 	bl	8000628 <__aeabi_dmul>
 80131bc:	4602      	mov	r2, r0
 80131be:	460b      	mov	r3, r1
 80131c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80131c4:	f7ed f87a 	bl	80002bc <__adddf3>
 80131c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80131cc:	3601      	adds	r6, #1
 80131ce:	9b06      	ldr	r3, [sp, #24]
 80131d0:	429e      	cmp	r6, r3
 80131d2:	f1a7 0708 	sub.w	r7, r7, #8
 80131d6:	ddeb      	ble.n	80131b0 <__kernel_rem_pio2+0xa0>
 80131d8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80131dc:	f108 0801 	add.w	r8, r8, #1
 80131e0:	ecab 7b02 	vstmia	fp!, {d7}
 80131e4:	3508      	adds	r5, #8
 80131e6:	e7cc      	b.n	8013182 <__kernel_rem_pio2+0x72>
 80131e8:	9b02      	ldr	r3, [sp, #8]
 80131ea:	aa0e      	add	r2, sp, #56	; 0x38
 80131ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80131f0:	930d      	str	r3, [sp, #52]	; 0x34
 80131f2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80131f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80131f8:	9c02      	ldr	r4, [sp, #8]
 80131fa:	930c      	str	r3, [sp, #48]	; 0x30
 80131fc:	00e3      	lsls	r3, r4, #3
 80131fe:	930a      	str	r3, [sp, #40]	; 0x28
 8013200:	ab9a      	add	r3, sp, #616	; 0x268
 8013202:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013206:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801320a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801320e:	ab72      	add	r3, sp, #456	; 0x1c8
 8013210:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8013214:	46c3      	mov	fp, r8
 8013216:	46a1      	mov	r9, r4
 8013218:	f1b9 0f00 	cmp.w	r9, #0
 801321c:	f1a5 0508 	sub.w	r5, r5, #8
 8013220:	dc77      	bgt.n	8013312 <__kernel_rem_pio2+0x202>
 8013222:	ec47 6b10 	vmov	d0, r6, r7
 8013226:	4650      	mov	r0, sl
 8013228:	f000 fde6 	bl	8013df8 <scalbn>
 801322c:	ec57 6b10 	vmov	r6, r7, d0
 8013230:	2200      	movs	r2, #0
 8013232:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013236:	ee10 0a10 	vmov	r0, s0
 801323a:	4639      	mov	r1, r7
 801323c:	f7ed f9f4 	bl	8000628 <__aeabi_dmul>
 8013240:	ec41 0b10 	vmov	d0, r0, r1
 8013244:	f000 fd58 	bl	8013cf8 <floor>
 8013248:	4b7c      	ldr	r3, [pc, #496]	; (801343c <__kernel_rem_pio2+0x32c>)
 801324a:	ec51 0b10 	vmov	r0, r1, d0
 801324e:	2200      	movs	r2, #0
 8013250:	f7ed f9ea 	bl	8000628 <__aeabi_dmul>
 8013254:	4602      	mov	r2, r0
 8013256:	460b      	mov	r3, r1
 8013258:	4630      	mov	r0, r6
 801325a:	4639      	mov	r1, r7
 801325c:	f7ed f82c 	bl	80002b8 <__aeabi_dsub>
 8013260:	460f      	mov	r7, r1
 8013262:	4606      	mov	r6, r0
 8013264:	f7ed fc90 	bl	8000b88 <__aeabi_d2iz>
 8013268:	9004      	str	r0, [sp, #16]
 801326a:	f7ed f973 	bl	8000554 <__aeabi_i2d>
 801326e:	4602      	mov	r2, r0
 8013270:	460b      	mov	r3, r1
 8013272:	4630      	mov	r0, r6
 8013274:	4639      	mov	r1, r7
 8013276:	f7ed f81f 	bl	80002b8 <__aeabi_dsub>
 801327a:	f1ba 0f00 	cmp.w	sl, #0
 801327e:	4606      	mov	r6, r0
 8013280:	460f      	mov	r7, r1
 8013282:	dd6d      	ble.n	8013360 <__kernel_rem_pio2+0x250>
 8013284:	1e62      	subs	r2, r4, #1
 8013286:	ab0e      	add	r3, sp, #56	; 0x38
 8013288:	9d04      	ldr	r5, [sp, #16]
 801328a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801328e:	f1ca 0118 	rsb	r1, sl, #24
 8013292:	fa40 f301 	asr.w	r3, r0, r1
 8013296:	441d      	add	r5, r3
 8013298:	408b      	lsls	r3, r1
 801329a:	1ac0      	subs	r0, r0, r3
 801329c:	ab0e      	add	r3, sp, #56	; 0x38
 801329e:	9504      	str	r5, [sp, #16]
 80132a0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80132a4:	f1ca 0317 	rsb	r3, sl, #23
 80132a8:	fa40 fb03 	asr.w	fp, r0, r3
 80132ac:	f1bb 0f00 	cmp.w	fp, #0
 80132b0:	dd65      	ble.n	801337e <__kernel_rem_pio2+0x26e>
 80132b2:	9b04      	ldr	r3, [sp, #16]
 80132b4:	2200      	movs	r2, #0
 80132b6:	3301      	adds	r3, #1
 80132b8:	9304      	str	r3, [sp, #16]
 80132ba:	4615      	mov	r5, r2
 80132bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80132c0:	4294      	cmp	r4, r2
 80132c2:	f300 809c 	bgt.w	80133fe <__kernel_rem_pio2+0x2ee>
 80132c6:	f1ba 0f00 	cmp.w	sl, #0
 80132ca:	dd07      	ble.n	80132dc <__kernel_rem_pio2+0x1cc>
 80132cc:	f1ba 0f01 	cmp.w	sl, #1
 80132d0:	f000 80c0 	beq.w	8013454 <__kernel_rem_pio2+0x344>
 80132d4:	f1ba 0f02 	cmp.w	sl, #2
 80132d8:	f000 80c6 	beq.w	8013468 <__kernel_rem_pio2+0x358>
 80132dc:	f1bb 0f02 	cmp.w	fp, #2
 80132e0:	d14d      	bne.n	801337e <__kernel_rem_pio2+0x26e>
 80132e2:	4632      	mov	r2, r6
 80132e4:	463b      	mov	r3, r7
 80132e6:	4956      	ldr	r1, [pc, #344]	; (8013440 <__kernel_rem_pio2+0x330>)
 80132e8:	2000      	movs	r0, #0
 80132ea:	f7ec ffe5 	bl	80002b8 <__aeabi_dsub>
 80132ee:	4606      	mov	r6, r0
 80132f0:	460f      	mov	r7, r1
 80132f2:	2d00      	cmp	r5, #0
 80132f4:	d043      	beq.n	801337e <__kernel_rem_pio2+0x26e>
 80132f6:	4650      	mov	r0, sl
 80132f8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8013430 <__kernel_rem_pio2+0x320>
 80132fc:	f000 fd7c 	bl	8013df8 <scalbn>
 8013300:	4630      	mov	r0, r6
 8013302:	4639      	mov	r1, r7
 8013304:	ec53 2b10 	vmov	r2, r3, d0
 8013308:	f7ec ffd6 	bl	80002b8 <__aeabi_dsub>
 801330c:	4606      	mov	r6, r0
 801330e:	460f      	mov	r7, r1
 8013310:	e035      	b.n	801337e <__kernel_rem_pio2+0x26e>
 8013312:	4b4c      	ldr	r3, [pc, #304]	; (8013444 <__kernel_rem_pio2+0x334>)
 8013314:	2200      	movs	r2, #0
 8013316:	4630      	mov	r0, r6
 8013318:	4639      	mov	r1, r7
 801331a:	f7ed f985 	bl	8000628 <__aeabi_dmul>
 801331e:	f7ed fc33 	bl	8000b88 <__aeabi_d2iz>
 8013322:	f7ed f917 	bl	8000554 <__aeabi_i2d>
 8013326:	4602      	mov	r2, r0
 8013328:	460b      	mov	r3, r1
 801332a:	ec43 2b18 	vmov	d8, r2, r3
 801332e:	4b46      	ldr	r3, [pc, #280]	; (8013448 <__kernel_rem_pio2+0x338>)
 8013330:	2200      	movs	r2, #0
 8013332:	f7ed f979 	bl	8000628 <__aeabi_dmul>
 8013336:	4602      	mov	r2, r0
 8013338:	460b      	mov	r3, r1
 801333a:	4630      	mov	r0, r6
 801333c:	4639      	mov	r1, r7
 801333e:	f7ec ffbb 	bl	80002b8 <__aeabi_dsub>
 8013342:	f7ed fc21 	bl	8000b88 <__aeabi_d2iz>
 8013346:	e9d5 2300 	ldrd	r2, r3, [r5]
 801334a:	f84b 0b04 	str.w	r0, [fp], #4
 801334e:	ec51 0b18 	vmov	r0, r1, d8
 8013352:	f7ec ffb3 	bl	80002bc <__adddf3>
 8013356:	f109 39ff 	add.w	r9, r9, #4294967295
 801335a:	4606      	mov	r6, r0
 801335c:	460f      	mov	r7, r1
 801335e:	e75b      	b.n	8013218 <__kernel_rem_pio2+0x108>
 8013360:	d106      	bne.n	8013370 <__kernel_rem_pio2+0x260>
 8013362:	1e63      	subs	r3, r4, #1
 8013364:	aa0e      	add	r2, sp, #56	; 0x38
 8013366:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801336a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801336e:	e79d      	b.n	80132ac <__kernel_rem_pio2+0x19c>
 8013370:	4b36      	ldr	r3, [pc, #216]	; (801344c <__kernel_rem_pio2+0x33c>)
 8013372:	2200      	movs	r2, #0
 8013374:	f7ed fbde 	bl	8000b34 <__aeabi_dcmpge>
 8013378:	2800      	cmp	r0, #0
 801337a:	d13d      	bne.n	80133f8 <__kernel_rem_pio2+0x2e8>
 801337c:	4683      	mov	fp, r0
 801337e:	2200      	movs	r2, #0
 8013380:	2300      	movs	r3, #0
 8013382:	4630      	mov	r0, r6
 8013384:	4639      	mov	r1, r7
 8013386:	f7ed fbb7 	bl	8000af8 <__aeabi_dcmpeq>
 801338a:	2800      	cmp	r0, #0
 801338c:	f000 80c0 	beq.w	8013510 <__kernel_rem_pio2+0x400>
 8013390:	1e65      	subs	r5, r4, #1
 8013392:	462b      	mov	r3, r5
 8013394:	2200      	movs	r2, #0
 8013396:	9902      	ldr	r1, [sp, #8]
 8013398:	428b      	cmp	r3, r1
 801339a:	da6c      	bge.n	8013476 <__kernel_rem_pio2+0x366>
 801339c:	2a00      	cmp	r2, #0
 801339e:	f000 8089 	beq.w	80134b4 <__kernel_rem_pio2+0x3a4>
 80133a2:	ab0e      	add	r3, sp, #56	; 0x38
 80133a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80133a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	f000 80ad 	beq.w	801350c <__kernel_rem_pio2+0x3fc>
 80133b2:	4650      	mov	r0, sl
 80133b4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8013430 <__kernel_rem_pio2+0x320>
 80133b8:	f000 fd1e 	bl	8013df8 <scalbn>
 80133bc:	ab9a      	add	r3, sp, #616	; 0x268
 80133be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80133c2:	ec57 6b10 	vmov	r6, r7, d0
 80133c6:	00ec      	lsls	r4, r5, #3
 80133c8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80133cc:	46aa      	mov	sl, r5
 80133ce:	f1ba 0f00 	cmp.w	sl, #0
 80133d2:	f280 80d6 	bge.w	8013582 <__kernel_rem_pio2+0x472>
 80133d6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8013428 <__kernel_rem_pio2+0x318>
 80133da:	462e      	mov	r6, r5
 80133dc:	2e00      	cmp	r6, #0
 80133de:	f2c0 8104 	blt.w	80135ea <__kernel_rem_pio2+0x4da>
 80133e2:	ab72      	add	r3, sp, #456	; 0x1c8
 80133e4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80133e8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8013450 <__kernel_rem_pio2+0x340>
 80133ec:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80133f0:	f04f 0800 	mov.w	r8, #0
 80133f4:	1baf      	subs	r7, r5, r6
 80133f6:	e0ea      	b.n	80135ce <__kernel_rem_pio2+0x4be>
 80133f8:	f04f 0b02 	mov.w	fp, #2
 80133fc:	e759      	b.n	80132b2 <__kernel_rem_pio2+0x1a2>
 80133fe:	f8d8 3000 	ldr.w	r3, [r8]
 8013402:	b955      	cbnz	r5, 801341a <__kernel_rem_pio2+0x30a>
 8013404:	b123      	cbz	r3, 8013410 <__kernel_rem_pio2+0x300>
 8013406:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801340a:	f8c8 3000 	str.w	r3, [r8]
 801340e:	2301      	movs	r3, #1
 8013410:	3201      	adds	r2, #1
 8013412:	f108 0804 	add.w	r8, r8, #4
 8013416:	461d      	mov	r5, r3
 8013418:	e752      	b.n	80132c0 <__kernel_rem_pio2+0x1b0>
 801341a:	1acb      	subs	r3, r1, r3
 801341c:	f8c8 3000 	str.w	r3, [r8]
 8013420:	462b      	mov	r3, r5
 8013422:	e7f5      	b.n	8013410 <__kernel_rem_pio2+0x300>
 8013424:	f3af 8000 	nop.w
	...
 8013434:	3ff00000 	.word	0x3ff00000
 8013438:	08014920 	.word	0x08014920
 801343c:	40200000 	.word	0x40200000
 8013440:	3ff00000 	.word	0x3ff00000
 8013444:	3e700000 	.word	0x3e700000
 8013448:	41700000 	.word	0x41700000
 801344c:	3fe00000 	.word	0x3fe00000
 8013450:	080148e0 	.word	0x080148e0
 8013454:	1e62      	subs	r2, r4, #1
 8013456:	ab0e      	add	r3, sp, #56	; 0x38
 8013458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801345c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013460:	a90e      	add	r1, sp, #56	; 0x38
 8013462:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013466:	e739      	b.n	80132dc <__kernel_rem_pio2+0x1cc>
 8013468:	1e62      	subs	r2, r4, #1
 801346a:	ab0e      	add	r3, sp, #56	; 0x38
 801346c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013470:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013474:	e7f4      	b.n	8013460 <__kernel_rem_pio2+0x350>
 8013476:	a90e      	add	r1, sp, #56	; 0x38
 8013478:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801347c:	3b01      	subs	r3, #1
 801347e:	430a      	orrs	r2, r1
 8013480:	e789      	b.n	8013396 <__kernel_rem_pio2+0x286>
 8013482:	3301      	adds	r3, #1
 8013484:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013488:	2900      	cmp	r1, #0
 801348a:	d0fa      	beq.n	8013482 <__kernel_rem_pio2+0x372>
 801348c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801348e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8013492:	446a      	add	r2, sp
 8013494:	3a98      	subs	r2, #152	; 0x98
 8013496:	920a      	str	r2, [sp, #40]	; 0x28
 8013498:	9a08      	ldr	r2, [sp, #32]
 801349a:	18e3      	adds	r3, r4, r3
 801349c:	18a5      	adds	r5, r4, r2
 801349e:	aa22      	add	r2, sp, #136	; 0x88
 80134a0:	f104 0801 	add.w	r8, r4, #1
 80134a4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80134a8:	9304      	str	r3, [sp, #16]
 80134aa:	9b04      	ldr	r3, [sp, #16]
 80134ac:	4543      	cmp	r3, r8
 80134ae:	da04      	bge.n	80134ba <__kernel_rem_pio2+0x3aa>
 80134b0:	461c      	mov	r4, r3
 80134b2:	e6a3      	b.n	80131fc <__kernel_rem_pio2+0xec>
 80134b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80134b6:	2301      	movs	r3, #1
 80134b8:	e7e4      	b.n	8013484 <__kernel_rem_pio2+0x374>
 80134ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80134c0:	f7ed f848 	bl	8000554 <__aeabi_i2d>
 80134c4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80134c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134ca:	46ab      	mov	fp, r5
 80134cc:	461c      	mov	r4, r3
 80134ce:	f04f 0900 	mov.w	r9, #0
 80134d2:	2600      	movs	r6, #0
 80134d4:	2700      	movs	r7, #0
 80134d6:	9b06      	ldr	r3, [sp, #24]
 80134d8:	4599      	cmp	r9, r3
 80134da:	dd06      	ble.n	80134ea <__kernel_rem_pio2+0x3da>
 80134dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134de:	e8e3 6702 	strd	r6, r7, [r3], #8
 80134e2:	f108 0801 	add.w	r8, r8, #1
 80134e6:	930a      	str	r3, [sp, #40]	; 0x28
 80134e8:	e7df      	b.n	80134aa <__kernel_rem_pio2+0x39a>
 80134ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80134ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80134f2:	f7ed f899 	bl	8000628 <__aeabi_dmul>
 80134f6:	4602      	mov	r2, r0
 80134f8:	460b      	mov	r3, r1
 80134fa:	4630      	mov	r0, r6
 80134fc:	4639      	mov	r1, r7
 80134fe:	f7ec fedd 	bl	80002bc <__adddf3>
 8013502:	f109 0901 	add.w	r9, r9, #1
 8013506:	4606      	mov	r6, r0
 8013508:	460f      	mov	r7, r1
 801350a:	e7e4      	b.n	80134d6 <__kernel_rem_pio2+0x3c6>
 801350c:	3d01      	subs	r5, #1
 801350e:	e748      	b.n	80133a2 <__kernel_rem_pio2+0x292>
 8013510:	ec47 6b10 	vmov	d0, r6, r7
 8013514:	f1ca 0000 	rsb	r0, sl, #0
 8013518:	f000 fc6e 	bl	8013df8 <scalbn>
 801351c:	ec57 6b10 	vmov	r6, r7, d0
 8013520:	4ba0      	ldr	r3, [pc, #640]	; (80137a4 <__kernel_rem_pio2+0x694>)
 8013522:	ee10 0a10 	vmov	r0, s0
 8013526:	2200      	movs	r2, #0
 8013528:	4639      	mov	r1, r7
 801352a:	f7ed fb03 	bl	8000b34 <__aeabi_dcmpge>
 801352e:	b1f8      	cbz	r0, 8013570 <__kernel_rem_pio2+0x460>
 8013530:	4b9d      	ldr	r3, [pc, #628]	; (80137a8 <__kernel_rem_pio2+0x698>)
 8013532:	2200      	movs	r2, #0
 8013534:	4630      	mov	r0, r6
 8013536:	4639      	mov	r1, r7
 8013538:	f7ed f876 	bl	8000628 <__aeabi_dmul>
 801353c:	f7ed fb24 	bl	8000b88 <__aeabi_d2iz>
 8013540:	4680      	mov	r8, r0
 8013542:	f7ed f807 	bl	8000554 <__aeabi_i2d>
 8013546:	4b97      	ldr	r3, [pc, #604]	; (80137a4 <__kernel_rem_pio2+0x694>)
 8013548:	2200      	movs	r2, #0
 801354a:	f7ed f86d 	bl	8000628 <__aeabi_dmul>
 801354e:	460b      	mov	r3, r1
 8013550:	4602      	mov	r2, r0
 8013552:	4639      	mov	r1, r7
 8013554:	4630      	mov	r0, r6
 8013556:	f7ec feaf 	bl	80002b8 <__aeabi_dsub>
 801355a:	f7ed fb15 	bl	8000b88 <__aeabi_d2iz>
 801355e:	1c65      	adds	r5, r4, #1
 8013560:	ab0e      	add	r3, sp, #56	; 0x38
 8013562:	f10a 0a18 	add.w	sl, sl, #24
 8013566:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801356a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801356e:	e720      	b.n	80133b2 <__kernel_rem_pio2+0x2a2>
 8013570:	4630      	mov	r0, r6
 8013572:	4639      	mov	r1, r7
 8013574:	f7ed fb08 	bl	8000b88 <__aeabi_d2iz>
 8013578:	ab0e      	add	r3, sp, #56	; 0x38
 801357a:	4625      	mov	r5, r4
 801357c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013580:	e717      	b.n	80133b2 <__kernel_rem_pio2+0x2a2>
 8013582:	ab0e      	add	r3, sp, #56	; 0x38
 8013584:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8013588:	f7ec ffe4 	bl	8000554 <__aeabi_i2d>
 801358c:	4632      	mov	r2, r6
 801358e:	463b      	mov	r3, r7
 8013590:	f7ed f84a 	bl	8000628 <__aeabi_dmul>
 8013594:	4b84      	ldr	r3, [pc, #528]	; (80137a8 <__kernel_rem_pio2+0x698>)
 8013596:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801359a:	2200      	movs	r2, #0
 801359c:	4630      	mov	r0, r6
 801359e:	4639      	mov	r1, r7
 80135a0:	f7ed f842 	bl	8000628 <__aeabi_dmul>
 80135a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80135a8:	4606      	mov	r6, r0
 80135aa:	460f      	mov	r7, r1
 80135ac:	e70f      	b.n	80133ce <__kernel_rem_pio2+0x2be>
 80135ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80135b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80135b6:	f7ed f837 	bl	8000628 <__aeabi_dmul>
 80135ba:	4602      	mov	r2, r0
 80135bc:	460b      	mov	r3, r1
 80135be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135c2:	f7ec fe7b 	bl	80002bc <__adddf3>
 80135c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80135ca:	f108 0801 	add.w	r8, r8, #1
 80135ce:	9b02      	ldr	r3, [sp, #8]
 80135d0:	4598      	cmp	r8, r3
 80135d2:	dc01      	bgt.n	80135d8 <__kernel_rem_pio2+0x4c8>
 80135d4:	45b8      	cmp	r8, r7
 80135d6:	ddea      	ble.n	80135ae <__kernel_rem_pio2+0x49e>
 80135d8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80135dc:	ab4a      	add	r3, sp, #296	; 0x128
 80135de:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80135e2:	ed87 7b00 	vstr	d7, [r7]
 80135e6:	3e01      	subs	r6, #1
 80135e8:	e6f8      	b.n	80133dc <__kernel_rem_pio2+0x2cc>
 80135ea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80135ec:	2b02      	cmp	r3, #2
 80135ee:	dc0b      	bgt.n	8013608 <__kernel_rem_pio2+0x4f8>
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	dc35      	bgt.n	8013660 <__kernel_rem_pio2+0x550>
 80135f4:	d059      	beq.n	80136aa <__kernel_rem_pio2+0x59a>
 80135f6:	9b04      	ldr	r3, [sp, #16]
 80135f8:	f003 0007 	and.w	r0, r3, #7
 80135fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013600:	ecbd 8b02 	vpop	{d8}
 8013604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013608:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801360a:	2b03      	cmp	r3, #3
 801360c:	d1f3      	bne.n	80135f6 <__kernel_rem_pio2+0x4e6>
 801360e:	ab4a      	add	r3, sp, #296	; 0x128
 8013610:	4423      	add	r3, r4
 8013612:	9306      	str	r3, [sp, #24]
 8013614:	461c      	mov	r4, r3
 8013616:	469a      	mov	sl, r3
 8013618:	9502      	str	r5, [sp, #8]
 801361a:	9b02      	ldr	r3, [sp, #8]
 801361c:	2b00      	cmp	r3, #0
 801361e:	f1aa 0a08 	sub.w	sl, sl, #8
 8013622:	dc6b      	bgt.n	80136fc <__kernel_rem_pio2+0x5ec>
 8013624:	46aa      	mov	sl, r5
 8013626:	f1ba 0f01 	cmp.w	sl, #1
 801362a:	f1a4 0408 	sub.w	r4, r4, #8
 801362e:	f300 8085 	bgt.w	801373c <__kernel_rem_pio2+0x62c>
 8013632:	9c06      	ldr	r4, [sp, #24]
 8013634:	2000      	movs	r0, #0
 8013636:	3408      	adds	r4, #8
 8013638:	2100      	movs	r1, #0
 801363a:	2d01      	cmp	r5, #1
 801363c:	f300 809d 	bgt.w	801377a <__kernel_rem_pio2+0x66a>
 8013640:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8013644:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8013648:	f1bb 0f00 	cmp.w	fp, #0
 801364c:	f040 809b 	bne.w	8013786 <__kernel_rem_pio2+0x676>
 8013650:	9b01      	ldr	r3, [sp, #4]
 8013652:	e9c3 5600 	strd	r5, r6, [r3]
 8013656:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801365a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801365e:	e7ca      	b.n	80135f6 <__kernel_rem_pio2+0x4e6>
 8013660:	3408      	adds	r4, #8
 8013662:	ab4a      	add	r3, sp, #296	; 0x128
 8013664:	441c      	add	r4, r3
 8013666:	462e      	mov	r6, r5
 8013668:	2000      	movs	r0, #0
 801366a:	2100      	movs	r1, #0
 801366c:	2e00      	cmp	r6, #0
 801366e:	da36      	bge.n	80136de <__kernel_rem_pio2+0x5ce>
 8013670:	f1bb 0f00 	cmp.w	fp, #0
 8013674:	d039      	beq.n	80136ea <__kernel_rem_pio2+0x5da>
 8013676:	4602      	mov	r2, r0
 8013678:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801367c:	9c01      	ldr	r4, [sp, #4]
 801367e:	e9c4 2300 	strd	r2, r3, [r4]
 8013682:	4602      	mov	r2, r0
 8013684:	460b      	mov	r3, r1
 8013686:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801368a:	f7ec fe15 	bl	80002b8 <__aeabi_dsub>
 801368e:	ae4c      	add	r6, sp, #304	; 0x130
 8013690:	2401      	movs	r4, #1
 8013692:	42a5      	cmp	r5, r4
 8013694:	da2c      	bge.n	80136f0 <__kernel_rem_pio2+0x5e0>
 8013696:	f1bb 0f00 	cmp.w	fp, #0
 801369a:	d002      	beq.n	80136a2 <__kernel_rem_pio2+0x592>
 801369c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80136a0:	4619      	mov	r1, r3
 80136a2:	9b01      	ldr	r3, [sp, #4]
 80136a4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80136a8:	e7a5      	b.n	80135f6 <__kernel_rem_pio2+0x4e6>
 80136aa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80136ae:	eb0d 0403 	add.w	r4, sp, r3
 80136b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80136b6:	2000      	movs	r0, #0
 80136b8:	2100      	movs	r1, #0
 80136ba:	2d00      	cmp	r5, #0
 80136bc:	da09      	bge.n	80136d2 <__kernel_rem_pio2+0x5c2>
 80136be:	f1bb 0f00 	cmp.w	fp, #0
 80136c2:	d002      	beq.n	80136ca <__kernel_rem_pio2+0x5ba>
 80136c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80136c8:	4619      	mov	r1, r3
 80136ca:	9b01      	ldr	r3, [sp, #4]
 80136cc:	e9c3 0100 	strd	r0, r1, [r3]
 80136d0:	e791      	b.n	80135f6 <__kernel_rem_pio2+0x4e6>
 80136d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80136d6:	f7ec fdf1 	bl	80002bc <__adddf3>
 80136da:	3d01      	subs	r5, #1
 80136dc:	e7ed      	b.n	80136ba <__kernel_rem_pio2+0x5aa>
 80136de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80136e2:	f7ec fdeb 	bl	80002bc <__adddf3>
 80136e6:	3e01      	subs	r6, #1
 80136e8:	e7c0      	b.n	801366c <__kernel_rem_pio2+0x55c>
 80136ea:	4602      	mov	r2, r0
 80136ec:	460b      	mov	r3, r1
 80136ee:	e7c5      	b.n	801367c <__kernel_rem_pio2+0x56c>
 80136f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80136f4:	f7ec fde2 	bl	80002bc <__adddf3>
 80136f8:	3401      	adds	r4, #1
 80136fa:	e7ca      	b.n	8013692 <__kernel_rem_pio2+0x582>
 80136fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8013700:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013704:	9b02      	ldr	r3, [sp, #8]
 8013706:	3b01      	subs	r3, #1
 8013708:	9302      	str	r3, [sp, #8]
 801370a:	4632      	mov	r2, r6
 801370c:	463b      	mov	r3, r7
 801370e:	4640      	mov	r0, r8
 8013710:	4649      	mov	r1, r9
 8013712:	f7ec fdd3 	bl	80002bc <__adddf3>
 8013716:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801371a:	4602      	mov	r2, r0
 801371c:	460b      	mov	r3, r1
 801371e:	4640      	mov	r0, r8
 8013720:	4649      	mov	r1, r9
 8013722:	f7ec fdc9 	bl	80002b8 <__aeabi_dsub>
 8013726:	4632      	mov	r2, r6
 8013728:	463b      	mov	r3, r7
 801372a:	f7ec fdc7 	bl	80002bc <__adddf3>
 801372e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8013732:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013736:	ed8a 7b00 	vstr	d7, [sl]
 801373a:	e76e      	b.n	801361a <__kernel_rem_pio2+0x50a>
 801373c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013740:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013744:	4640      	mov	r0, r8
 8013746:	4632      	mov	r2, r6
 8013748:	463b      	mov	r3, r7
 801374a:	4649      	mov	r1, r9
 801374c:	f7ec fdb6 	bl	80002bc <__adddf3>
 8013750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013754:	4602      	mov	r2, r0
 8013756:	460b      	mov	r3, r1
 8013758:	4640      	mov	r0, r8
 801375a:	4649      	mov	r1, r9
 801375c:	f7ec fdac 	bl	80002b8 <__aeabi_dsub>
 8013760:	4632      	mov	r2, r6
 8013762:	463b      	mov	r3, r7
 8013764:	f7ec fdaa 	bl	80002bc <__adddf3>
 8013768:	ed9d 7b02 	vldr	d7, [sp, #8]
 801376c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013770:	ed84 7b00 	vstr	d7, [r4]
 8013774:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013778:	e755      	b.n	8013626 <__kernel_rem_pio2+0x516>
 801377a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801377e:	f7ec fd9d 	bl	80002bc <__adddf3>
 8013782:	3d01      	subs	r5, #1
 8013784:	e759      	b.n	801363a <__kernel_rem_pio2+0x52a>
 8013786:	9b01      	ldr	r3, [sp, #4]
 8013788:	9a01      	ldr	r2, [sp, #4]
 801378a:	601d      	str	r5, [r3, #0]
 801378c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013790:	605c      	str	r4, [r3, #4]
 8013792:	609f      	str	r7, [r3, #8]
 8013794:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8013798:	60d3      	str	r3, [r2, #12]
 801379a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801379e:	6110      	str	r0, [r2, #16]
 80137a0:	6153      	str	r3, [r2, #20]
 80137a2:	e728      	b.n	80135f6 <__kernel_rem_pio2+0x4e6>
 80137a4:	41700000 	.word	0x41700000
 80137a8:	3e700000 	.word	0x3e700000
 80137ac:	00000000 	.word	0x00000000

080137b0 <__kernel_sin>:
 80137b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b4:	ed2d 8b04 	vpush	{d8-d9}
 80137b8:	eeb0 8a41 	vmov.f32	s16, s2
 80137bc:	eef0 8a61 	vmov.f32	s17, s3
 80137c0:	ec55 4b10 	vmov	r4, r5, d0
 80137c4:	b083      	sub	sp, #12
 80137c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80137ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80137ce:	9001      	str	r0, [sp, #4]
 80137d0:	da06      	bge.n	80137e0 <__kernel_sin+0x30>
 80137d2:	ee10 0a10 	vmov	r0, s0
 80137d6:	4629      	mov	r1, r5
 80137d8:	f7ed f9d6 	bl	8000b88 <__aeabi_d2iz>
 80137dc:	2800      	cmp	r0, #0
 80137de:	d051      	beq.n	8013884 <__kernel_sin+0xd4>
 80137e0:	4622      	mov	r2, r4
 80137e2:	462b      	mov	r3, r5
 80137e4:	4620      	mov	r0, r4
 80137e6:	4629      	mov	r1, r5
 80137e8:	f7ec ff1e 	bl	8000628 <__aeabi_dmul>
 80137ec:	4682      	mov	sl, r0
 80137ee:	468b      	mov	fp, r1
 80137f0:	4602      	mov	r2, r0
 80137f2:	460b      	mov	r3, r1
 80137f4:	4620      	mov	r0, r4
 80137f6:	4629      	mov	r1, r5
 80137f8:	f7ec ff16 	bl	8000628 <__aeabi_dmul>
 80137fc:	a341      	add	r3, pc, #260	; (adr r3, 8013904 <__kernel_sin+0x154>)
 80137fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013802:	4680      	mov	r8, r0
 8013804:	4689      	mov	r9, r1
 8013806:	4650      	mov	r0, sl
 8013808:	4659      	mov	r1, fp
 801380a:	f7ec ff0d 	bl	8000628 <__aeabi_dmul>
 801380e:	a33f      	add	r3, pc, #252	; (adr r3, 801390c <__kernel_sin+0x15c>)
 8013810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013814:	f7ec fd50 	bl	80002b8 <__aeabi_dsub>
 8013818:	4652      	mov	r2, sl
 801381a:	465b      	mov	r3, fp
 801381c:	f7ec ff04 	bl	8000628 <__aeabi_dmul>
 8013820:	a33c      	add	r3, pc, #240	; (adr r3, 8013914 <__kernel_sin+0x164>)
 8013822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013826:	f7ec fd49 	bl	80002bc <__adddf3>
 801382a:	4652      	mov	r2, sl
 801382c:	465b      	mov	r3, fp
 801382e:	f7ec fefb 	bl	8000628 <__aeabi_dmul>
 8013832:	a33a      	add	r3, pc, #232	; (adr r3, 801391c <__kernel_sin+0x16c>)
 8013834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013838:	f7ec fd3e 	bl	80002b8 <__aeabi_dsub>
 801383c:	4652      	mov	r2, sl
 801383e:	465b      	mov	r3, fp
 8013840:	f7ec fef2 	bl	8000628 <__aeabi_dmul>
 8013844:	a337      	add	r3, pc, #220	; (adr r3, 8013924 <__kernel_sin+0x174>)
 8013846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801384a:	f7ec fd37 	bl	80002bc <__adddf3>
 801384e:	9b01      	ldr	r3, [sp, #4]
 8013850:	4606      	mov	r6, r0
 8013852:	460f      	mov	r7, r1
 8013854:	b9eb      	cbnz	r3, 8013892 <__kernel_sin+0xe2>
 8013856:	4602      	mov	r2, r0
 8013858:	460b      	mov	r3, r1
 801385a:	4650      	mov	r0, sl
 801385c:	4659      	mov	r1, fp
 801385e:	f7ec fee3 	bl	8000628 <__aeabi_dmul>
 8013862:	a325      	add	r3, pc, #148	; (adr r3, 80138f8 <__kernel_sin+0x148>)
 8013864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013868:	f7ec fd26 	bl	80002b8 <__aeabi_dsub>
 801386c:	4642      	mov	r2, r8
 801386e:	464b      	mov	r3, r9
 8013870:	f7ec feda 	bl	8000628 <__aeabi_dmul>
 8013874:	4602      	mov	r2, r0
 8013876:	460b      	mov	r3, r1
 8013878:	4620      	mov	r0, r4
 801387a:	4629      	mov	r1, r5
 801387c:	f7ec fd1e 	bl	80002bc <__adddf3>
 8013880:	4604      	mov	r4, r0
 8013882:	460d      	mov	r5, r1
 8013884:	ec45 4b10 	vmov	d0, r4, r5
 8013888:	b003      	add	sp, #12
 801388a:	ecbd 8b04 	vpop	{d8-d9}
 801388e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013892:	4b1b      	ldr	r3, [pc, #108]	; (8013900 <__kernel_sin+0x150>)
 8013894:	ec51 0b18 	vmov	r0, r1, d8
 8013898:	2200      	movs	r2, #0
 801389a:	f7ec fec5 	bl	8000628 <__aeabi_dmul>
 801389e:	4632      	mov	r2, r6
 80138a0:	ec41 0b19 	vmov	d9, r0, r1
 80138a4:	463b      	mov	r3, r7
 80138a6:	4640      	mov	r0, r8
 80138a8:	4649      	mov	r1, r9
 80138aa:	f7ec febd 	bl	8000628 <__aeabi_dmul>
 80138ae:	4602      	mov	r2, r0
 80138b0:	460b      	mov	r3, r1
 80138b2:	ec51 0b19 	vmov	r0, r1, d9
 80138b6:	f7ec fcff 	bl	80002b8 <__aeabi_dsub>
 80138ba:	4652      	mov	r2, sl
 80138bc:	465b      	mov	r3, fp
 80138be:	f7ec feb3 	bl	8000628 <__aeabi_dmul>
 80138c2:	ec53 2b18 	vmov	r2, r3, d8
 80138c6:	f7ec fcf7 	bl	80002b8 <__aeabi_dsub>
 80138ca:	a30b      	add	r3, pc, #44	; (adr r3, 80138f8 <__kernel_sin+0x148>)
 80138cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d0:	4606      	mov	r6, r0
 80138d2:	460f      	mov	r7, r1
 80138d4:	4640      	mov	r0, r8
 80138d6:	4649      	mov	r1, r9
 80138d8:	f7ec fea6 	bl	8000628 <__aeabi_dmul>
 80138dc:	4602      	mov	r2, r0
 80138de:	460b      	mov	r3, r1
 80138e0:	4630      	mov	r0, r6
 80138e2:	4639      	mov	r1, r7
 80138e4:	f7ec fcea 	bl	80002bc <__adddf3>
 80138e8:	4602      	mov	r2, r0
 80138ea:	460b      	mov	r3, r1
 80138ec:	4620      	mov	r0, r4
 80138ee:	4629      	mov	r1, r5
 80138f0:	f7ec fce2 	bl	80002b8 <__aeabi_dsub>
 80138f4:	e7c4      	b.n	8013880 <__kernel_sin+0xd0>
 80138f6:	bf00      	nop
 80138f8:	55555549 	.word	0x55555549
 80138fc:	3fc55555 	.word	0x3fc55555
 8013900:	3fe00000 	.word	0x3fe00000
 8013904:	5acfd57c 	.word	0x5acfd57c
 8013908:	3de5d93a 	.word	0x3de5d93a
 801390c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013910:	3e5ae5e6 	.word	0x3e5ae5e6
 8013914:	57b1fe7d 	.word	0x57b1fe7d
 8013918:	3ec71de3 	.word	0x3ec71de3
 801391c:	19c161d5 	.word	0x19c161d5
 8013920:	3f2a01a0 	.word	0x3f2a01a0
 8013924:	1110f8a6 	.word	0x1110f8a6
 8013928:	3f811111 	.word	0x3f811111

0801392c <with_errno>:
 801392c:	b570      	push	{r4, r5, r6, lr}
 801392e:	4604      	mov	r4, r0
 8013930:	460d      	mov	r5, r1
 8013932:	4616      	mov	r6, r2
 8013934:	f7f8 fd32 	bl	800c39c <__errno>
 8013938:	4629      	mov	r1, r5
 801393a:	6006      	str	r6, [r0, #0]
 801393c:	4620      	mov	r0, r4
 801393e:	bd70      	pop	{r4, r5, r6, pc}

08013940 <xflow>:
 8013940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013942:	4614      	mov	r4, r2
 8013944:	461d      	mov	r5, r3
 8013946:	b108      	cbz	r0, 801394c <xflow+0xc>
 8013948:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801394c:	e9cd 2300 	strd	r2, r3, [sp]
 8013950:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013954:	4620      	mov	r0, r4
 8013956:	4629      	mov	r1, r5
 8013958:	f7ec fe66 	bl	8000628 <__aeabi_dmul>
 801395c:	2222      	movs	r2, #34	; 0x22
 801395e:	b003      	add	sp, #12
 8013960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013964:	f7ff bfe2 	b.w	801392c <with_errno>

08013968 <__math_uflow>:
 8013968:	b508      	push	{r3, lr}
 801396a:	2200      	movs	r2, #0
 801396c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013970:	f7ff ffe6 	bl	8013940 <xflow>
 8013974:	ec41 0b10 	vmov	d0, r0, r1
 8013978:	bd08      	pop	{r3, pc}

0801397a <__math_oflow>:
 801397a:	b508      	push	{r3, lr}
 801397c:	2200      	movs	r2, #0
 801397e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013982:	f7ff ffdd 	bl	8013940 <xflow>
 8013986:	ec41 0b10 	vmov	d0, r0, r1
 801398a:	bd08      	pop	{r3, pc}
 801398c:	0000      	movs	r0, r0
	...

08013990 <atan>:
 8013990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013994:	ec55 4b10 	vmov	r4, r5, d0
 8013998:	4bc3      	ldr	r3, [pc, #780]	; (8013ca8 <atan+0x318>)
 801399a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801399e:	429e      	cmp	r6, r3
 80139a0:	46ab      	mov	fp, r5
 80139a2:	dd18      	ble.n	80139d6 <atan+0x46>
 80139a4:	4bc1      	ldr	r3, [pc, #772]	; (8013cac <atan+0x31c>)
 80139a6:	429e      	cmp	r6, r3
 80139a8:	dc01      	bgt.n	80139ae <atan+0x1e>
 80139aa:	d109      	bne.n	80139c0 <atan+0x30>
 80139ac:	b144      	cbz	r4, 80139c0 <atan+0x30>
 80139ae:	4622      	mov	r2, r4
 80139b0:	462b      	mov	r3, r5
 80139b2:	4620      	mov	r0, r4
 80139b4:	4629      	mov	r1, r5
 80139b6:	f7ec fc81 	bl	80002bc <__adddf3>
 80139ba:	4604      	mov	r4, r0
 80139bc:	460d      	mov	r5, r1
 80139be:	e006      	b.n	80139ce <atan+0x3e>
 80139c0:	f1bb 0f00 	cmp.w	fp, #0
 80139c4:	f300 8131 	bgt.w	8013c2a <atan+0x29a>
 80139c8:	a59b      	add	r5, pc, #620	; (adr r5, 8013c38 <atan+0x2a8>)
 80139ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80139ce:	ec45 4b10 	vmov	d0, r4, r5
 80139d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139d6:	4bb6      	ldr	r3, [pc, #728]	; (8013cb0 <atan+0x320>)
 80139d8:	429e      	cmp	r6, r3
 80139da:	dc14      	bgt.n	8013a06 <atan+0x76>
 80139dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80139e0:	429e      	cmp	r6, r3
 80139e2:	dc0d      	bgt.n	8013a00 <atan+0x70>
 80139e4:	a396      	add	r3, pc, #600	; (adr r3, 8013c40 <atan+0x2b0>)
 80139e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ea:	ee10 0a10 	vmov	r0, s0
 80139ee:	4629      	mov	r1, r5
 80139f0:	f7ec fc64 	bl	80002bc <__adddf3>
 80139f4:	4baf      	ldr	r3, [pc, #700]	; (8013cb4 <atan+0x324>)
 80139f6:	2200      	movs	r2, #0
 80139f8:	f7ed f8a6 	bl	8000b48 <__aeabi_dcmpgt>
 80139fc:	2800      	cmp	r0, #0
 80139fe:	d1e6      	bne.n	80139ce <atan+0x3e>
 8013a00:	f04f 3aff 	mov.w	sl, #4294967295
 8013a04:	e02b      	b.n	8013a5e <atan+0xce>
 8013a06:	f000 f963 	bl	8013cd0 <fabs>
 8013a0a:	4bab      	ldr	r3, [pc, #684]	; (8013cb8 <atan+0x328>)
 8013a0c:	429e      	cmp	r6, r3
 8013a0e:	ec55 4b10 	vmov	r4, r5, d0
 8013a12:	f300 80bf 	bgt.w	8013b94 <atan+0x204>
 8013a16:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8013a1a:	429e      	cmp	r6, r3
 8013a1c:	f300 80a0 	bgt.w	8013b60 <atan+0x1d0>
 8013a20:	ee10 2a10 	vmov	r2, s0
 8013a24:	ee10 0a10 	vmov	r0, s0
 8013a28:	462b      	mov	r3, r5
 8013a2a:	4629      	mov	r1, r5
 8013a2c:	f7ec fc46 	bl	80002bc <__adddf3>
 8013a30:	4ba0      	ldr	r3, [pc, #640]	; (8013cb4 <atan+0x324>)
 8013a32:	2200      	movs	r2, #0
 8013a34:	f7ec fc40 	bl	80002b8 <__aeabi_dsub>
 8013a38:	2200      	movs	r2, #0
 8013a3a:	4606      	mov	r6, r0
 8013a3c:	460f      	mov	r7, r1
 8013a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013a42:	4620      	mov	r0, r4
 8013a44:	4629      	mov	r1, r5
 8013a46:	f7ec fc39 	bl	80002bc <__adddf3>
 8013a4a:	4602      	mov	r2, r0
 8013a4c:	460b      	mov	r3, r1
 8013a4e:	4630      	mov	r0, r6
 8013a50:	4639      	mov	r1, r7
 8013a52:	f7ec ff13 	bl	800087c <__aeabi_ddiv>
 8013a56:	f04f 0a00 	mov.w	sl, #0
 8013a5a:	4604      	mov	r4, r0
 8013a5c:	460d      	mov	r5, r1
 8013a5e:	4622      	mov	r2, r4
 8013a60:	462b      	mov	r3, r5
 8013a62:	4620      	mov	r0, r4
 8013a64:	4629      	mov	r1, r5
 8013a66:	f7ec fddf 	bl	8000628 <__aeabi_dmul>
 8013a6a:	4602      	mov	r2, r0
 8013a6c:	460b      	mov	r3, r1
 8013a6e:	4680      	mov	r8, r0
 8013a70:	4689      	mov	r9, r1
 8013a72:	f7ec fdd9 	bl	8000628 <__aeabi_dmul>
 8013a76:	a374      	add	r3, pc, #464	; (adr r3, 8013c48 <atan+0x2b8>)
 8013a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a7c:	4606      	mov	r6, r0
 8013a7e:	460f      	mov	r7, r1
 8013a80:	f7ec fdd2 	bl	8000628 <__aeabi_dmul>
 8013a84:	a372      	add	r3, pc, #456	; (adr r3, 8013c50 <atan+0x2c0>)
 8013a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a8a:	f7ec fc17 	bl	80002bc <__adddf3>
 8013a8e:	4632      	mov	r2, r6
 8013a90:	463b      	mov	r3, r7
 8013a92:	f7ec fdc9 	bl	8000628 <__aeabi_dmul>
 8013a96:	a370      	add	r3, pc, #448	; (adr r3, 8013c58 <atan+0x2c8>)
 8013a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a9c:	f7ec fc0e 	bl	80002bc <__adddf3>
 8013aa0:	4632      	mov	r2, r6
 8013aa2:	463b      	mov	r3, r7
 8013aa4:	f7ec fdc0 	bl	8000628 <__aeabi_dmul>
 8013aa8:	a36d      	add	r3, pc, #436	; (adr r3, 8013c60 <atan+0x2d0>)
 8013aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aae:	f7ec fc05 	bl	80002bc <__adddf3>
 8013ab2:	4632      	mov	r2, r6
 8013ab4:	463b      	mov	r3, r7
 8013ab6:	f7ec fdb7 	bl	8000628 <__aeabi_dmul>
 8013aba:	a36b      	add	r3, pc, #428	; (adr r3, 8013c68 <atan+0x2d8>)
 8013abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ac0:	f7ec fbfc 	bl	80002bc <__adddf3>
 8013ac4:	4632      	mov	r2, r6
 8013ac6:	463b      	mov	r3, r7
 8013ac8:	f7ec fdae 	bl	8000628 <__aeabi_dmul>
 8013acc:	a368      	add	r3, pc, #416	; (adr r3, 8013c70 <atan+0x2e0>)
 8013ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad2:	f7ec fbf3 	bl	80002bc <__adddf3>
 8013ad6:	4642      	mov	r2, r8
 8013ad8:	464b      	mov	r3, r9
 8013ada:	f7ec fda5 	bl	8000628 <__aeabi_dmul>
 8013ade:	a366      	add	r3, pc, #408	; (adr r3, 8013c78 <atan+0x2e8>)
 8013ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ae4:	4680      	mov	r8, r0
 8013ae6:	4689      	mov	r9, r1
 8013ae8:	4630      	mov	r0, r6
 8013aea:	4639      	mov	r1, r7
 8013aec:	f7ec fd9c 	bl	8000628 <__aeabi_dmul>
 8013af0:	a363      	add	r3, pc, #396	; (adr r3, 8013c80 <atan+0x2f0>)
 8013af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af6:	f7ec fbdf 	bl	80002b8 <__aeabi_dsub>
 8013afa:	4632      	mov	r2, r6
 8013afc:	463b      	mov	r3, r7
 8013afe:	f7ec fd93 	bl	8000628 <__aeabi_dmul>
 8013b02:	a361      	add	r3, pc, #388	; (adr r3, 8013c88 <atan+0x2f8>)
 8013b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b08:	f7ec fbd6 	bl	80002b8 <__aeabi_dsub>
 8013b0c:	4632      	mov	r2, r6
 8013b0e:	463b      	mov	r3, r7
 8013b10:	f7ec fd8a 	bl	8000628 <__aeabi_dmul>
 8013b14:	a35e      	add	r3, pc, #376	; (adr r3, 8013c90 <atan+0x300>)
 8013b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b1a:	f7ec fbcd 	bl	80002b8 <__aeabi_dsub>
 8013b1e:	4632      	mov	r2, r6
 8013b20:	463b      	mov	r3, r7
 8013b22:	f7ec fd81 	bl	8000628 <__aeabi_dmul>
 8013b26:	a35c      	add	r3, pc, #368	; (adr r3, 8013c98 <atan+0x308>)
 8013b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b2c:	f7ec fbc4 	bl	80002b8 <__aeabi_dsub>
 8013b30:	4632      	mov	r2, r6
 8013b32:	463b      	mov	r3, r7
 8013b34:	f7ec fd78 	bl	8000628 <__aeabi_dmul>
 8013b38:	4602      	mov	r2, r0
 8013b3a:	460b      	mov	r3, r1
 8013b3c:	4640      	mov	r0, r8
 8013b3e:	4649      	mov	r1, r9
 8013b40:	f7ec fbbc 	bl	80002bc <__adddf3>
 8013b44:	4622      	mov	r2, r4
 8013b46:	462b      	mov	r3, r5
 8013b48:	f7ec fd6e 	bl	8000628 <__aeabi_dmul>
 8013b4c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013b50:	4602      	mov	r2, r0
 8013b52:	460b      	mov	r3, r1
 8013b54:	d14b      	bne.n	8013bee <atan+0x25e>
 8013b56:	4620      	mov	r0, r4
 8013b58:	4629      	mov	r1, r5
 8013b5a:	f7ec fbad 	bl	80002b8 <__aeabi_dsub>
 8013b5e:	e72c      	b.n	80139ba <atan+0x2a>
 8013b60:	ee10 0a10 	vmov	r0, s0
 8013b64:	4b53      	ldr	r3, [pc, #332]	; (8013cb4 <atan+0x324>)
 8013b66:	2200      	movs	r2, #0
 8013b68:	4629      	mov	r1, r5
 8013b6a:	f7ec fba5 	bl	80002b8 <__aeabi_dsub>
 8013b6e:	4b51      	ldr	r3, [pc, #324]	; (8013cb4 <atan+0x324>)
 8013b70:	4606      	mov	r6, r0
 8013b72:	460f      	mov	r7, r1
 8013b74:	2200      	movs	r2, #0
 8013b76:	4620      	mov	r0, r4
 8013b78:	4629      	mov	r1, r5
 8013b7a:	f7ec fb9f 	bl	80002bc <__adddf3>
 8013b7e:	4602      	mov	r2, r0
 8013b80:	460b      	mov	r3, r1
 8013b82:	4630      	mov	r0, r6
 8013b84:	4639      	mov	r1, r7
 8013b86:	f7ec fe79 	bl	800087c <__aeabi_ddiv>
 8013b8a:	f04f 0a01 	mov.w	sl, #1
 8013b8e:	4604      	mov	r4, r0
 8013b90:	460d      	mov	r5, r1
 8013b92:	e764      	b.n	8013a5e <atan+0xce>
 8013b94:	4b49      	ldr	r3, [pc, #292]	; (8013cbc <atan+0x32c>)
 8013b96:	429e      	cmp	r6, r3
 8013b98:	da1d      	bge.n	8013bd6 <atan+0x246>
 8013b9a:	ee10 0a10 	vmov	r0, s0
 8013b9e:	4b48      	ldr	r3, [pc, #288]	; (8013cc0 <atan+0x330>)
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	4629      	mov	r1, r5
 8013ba4:	f7ec fb88 	bl	80002b8 <__aeabi_dsub>
 8013ba8:	4b45      	ldr	r3, [pc, #276]	; (8013cc0 <atan+0x330>)
 8013baa:	4606      	mov	r6, r0
 8013bac:	460f      	mov	r7, r1
 8013bae:	2200      	movs	r2, #0
 8013bb0:	4620      	mov	r0, r4
 8013bb2:	4629      	mov	r1, r5
 8013bb4:	f7ec fd38 	bl	8000628 <__aeabi_dmul>
 8013bb8:	4b3e      	ldr	r3, [pc, #248]	; (8013cb4 <atan+0x324>)
 8013bba:	2200      	movs	r2, #0
 8013bbc:	f7ec fb7e 	bl	80002bc <__adddf3>
 8013bc0:	4602      	mov	r2, r0
 8013bc2:	460b      	mov	r3, r1
 8013bc4:	4630      	mov	r0, r6
 8013bc6:	4639      	mov	r1, r7
 8013bc8:	f7ec fe58 	bl	800087c <__aeabi_ddiv>
 8013bcc:	f04f 0a02 	mov.w	sl, #2
 8013bd0:	4604      	mov	r4, r0
 8013bd2:	460d      	mov	r5, r1
 8013bd4:	e743      	b.n	8013a5e <atan+0xce>
 8013bd6:	462b      	mov	r3, r5
 8013bd8:	ee10 2a10 	vmov	r2, s0
 8013bdc:	4939      	ldr	r1, [pc, #228]	; (8013cc4 <atan+0x334>)
 8013bde:	2000      	movs	r0, #0
 8013be0:	f7ec fe4c 	bl	800087c <__aeabi_ddiv>
 8013be4:	f04f 0a03 	mov.w	sl, #3
 8013be8:	4604      	mov	r4, r0
 8013bea:	460d      	mov	r5, r1
 8013bec:	e737      	b.n	8013a5e <atan+0xce>
 8013bee:	4b36      	ldr	r3, [pc, #216]	; (8013cc8 <atan+0x338>)
 8013bf0:	4e36      	ldr	r6, [pc, #216]	; (8013ccc <atan+0x33c>)
 8013bf2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8013bf6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8013bfa:	e9da 2300 	ldrd	r2, r3, [sl]
 8013bfe:	f7ec fb5b 	bl	80002b8 <__aeabi_dsub>
 8013c02:	4622      	mov	r2, r4
 8013c04:	462b      	mov	r3, r5
 8013c06:	f7ec fb57 	bl	80002b8 <__aeabi_dsub>
 8013c0a:	4602      	mov	r2, r0
 8013c0c:	460b      	mov	r3, r1
 8013c0e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013c12:	f7ec fb51 	bl	80002b8 <__aeabi_dsub>
 8013c16:	f1bb 0f00 	cmp.w	fp, #0
 8013c1a:	4604      	mov	r4, r0
 8013c1c:	460d      	mov	r5, r1
 8013c1e:	f6bf aed6 	bge.w	80139ce <atan+0x3e>
 8013c22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c26:	461d      	mov	r5, r3
 8013c28:	e6d1      	b.n	80139ce <atan+0x3e>
 8013c2a:	a51d      	add	r5, pc, #116	; (adr r5, 8013ca0 <atan+0x310>)
 8013c2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013c30:	e6cd      	b.n	80139ce <atan+0x3e>
 8013c32:	bf00      	nop
 8013c34:	f3af 8000 	nop.w
 8013c38:	54442d18 	.word	0x54442d18
 8013c3c:	bff921fb 	.word	0xbff921fb
 8013c40:	8800759c 	.word	0x8800759c
 8013c44:	7e37e43c 	.word	0x7e37e43c
 8013c48:	e322da11 	.word	0xe322da11
 8013c4c:	3f90ad3a 	.word	0x3f90ad3a
 8013c50:	24760deb 	.word	0x24760deb
 8013c54:	3fa97b4b 	.word	0x3fa97b4b
 8013c58:	a0d03d51 	.word	0xa0d03d51
 8013c5c:	3fb10d66 	.word	0x3fb10d66
 8013c60:	c54c206e 	.word	0xc54c206e
 8013c64:	3fb745cd 	.word	0x3fb745cd
 8013c68:	920083ff 	.word	0x920083ff
 8013c6c:	3fc24924 	.word	0x3fc24924
 8013c70:	5555550d 	.word	0x5555550d
 8013c74:	3fd55555 	.word	0x3fd55555
 8013c78:	2c6a6c2f 	.word	0x2c6a6c2f
 8013c7c:	bfa2b444 	.word	0xbfa2b444
 8013c80:	52defd9a 	.word	0x52defd9a
 8013c84:	3fadde2d 	.word	0x3fadde2d
 8013c88:	af749a6d 	.word	0xaf749a6d
 8013c8c:	3fb3b0f2 	.word	0x3fb3b0f2
 8013c90:	fe231671 	.word	0xfe231671
 8013c94:	3fbc71c6 	.word	0x3fbc71c6
 8013c98:	9998ebc4 	.word	0x9998ebc4
 8013c9c:	3fc99999 	.word	0x3fc99999
 8013ca0:	54442d18 	.word	0x54442d18
 8013ca4:	3ff921fb 	.word	0x3ff921fb
 8013ca8:	440fffff 	.word	0x440fffff
 8013cac:	7ff00000 	.word	0x7ff00000
 8013cb0:	3fdbffff 	.word	0x3fdbffff
 8013cb4:	3ff00000 	.word	0x3ff00000
 8013cb8:	3ff2ffff 	.word	0x3ff2ffff
 8013cbc:	40038000 	.word	0x40038000
 8013cc0:	3ff80000 	.word	0x3ff80000
 8013cc4:	bff00000 	.word	0xbff00000
 8013cc8:	08014950 	.word	0x08014950
 8013ccc:	08014930 	.word	0x08014930

08013cd0 <fabs>:
 8013cd0:	ec51 0b10 	vmov	r0, r1, d0
 8013cd4:	ee10 2a10 	vmov	r2, s0
 8013cd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013cdc:	ec43 2b10 	vmov	d0, r2, r3
 8013ce0:	4770      	bx	lr

08013ce2 <finite>:
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	ed8d 0b00 	vstr	d0, [sp]
 8013ce8:	9801      	ldr	r0, [sp, #4]
 8013cea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013cee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013cf2:	0fc0      	lsrs	r0, r0, #31
 8013cf4:	b002      	add	sp, #8
 8013cf6:	4770      	bx	lr

08013cf8 <floor>:
 8013cf8:	ec51 0b10 	vmov	r0, r1, d0
 8013cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013d04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013d08:	2e13      	cmp	r6, #19
 8013d0a:	ee10 5a10 	vmov	r5, s0
 8013d0e:	ee10 8a10 	vmov	r8, s0
 8013d12:	460c      	mov	r4, r1
 8013d14:	dc32      	bgt.n	8013d7c <floor+0x84>
 8013d16:	2e00      	cmp	r6, #0
 8013d18:	da14      	bge.n	8013d44 <floor+0x4c>
 8013d1a:	a333      	add	r3, pc, #204	; (adr r3, 8013de8 <floor+0xf0>)
 8013d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d20:	f7ec facc 	bl	80002bc <__adddf3>
 8013d24:	2200      	movs	r2, #0
 8013d26:	2300      	movs	r3, #0
 8013d28:	f7ec ff0e 	bl	8000b48 <__aeabi_dcmpgt>
 8013d2c:	b138      	cbz	r0, 8013d3e <floor+0x46>
 8013d2e:	2c00      	cmp	r4, #0
 8013d30:	da57      	bge.n	8013de2 <floor+0xea>
 8013d32:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013d36:	431d      	orrs	r5, r3
 8013d38:	d001      	beq.n	8013d3e <floor+0x46>
 8013d3a:	4c2d      	ldr	r4, [pc, #180]	; (8013df0 <floor+0xf8>)
 8013d3c:	2500      	movs	r5, #0
 8013d3e:	4621      	mov	r1, r4
 8013d40:	4628      	mov	r0, r5
 8013d42:	e025      	b.n	8013d90 <floor+0x98>
 8013d44:	4f2b      	ldr	r7, [pc, #172]	; (8013df4 <floor+0xfc>)
 8013d46:	4137      	asrs	r7, r6
 8013d48:	ea01 0307 	and.w	r3, r1, r7
 8013d4c:	4303      	orrs	r3, r0
 8013d4e:	d01f      	beq.n	8013d90 <floor+0x98>
 8013d50:	a325      	add	r3, pc, #148	; (adr r3, 8013de8 <floor+0xf0>)
 8013d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d56:	f7ec fab1 	bl	80002bc <__adddf3>
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	f7ec fef3 	bl	8000b48 <__aeabi_dcmpgt>
 8013d62:	2800      	cmp	r0, #0
 8013d64:	d0eb      	beq.n	8013d3e <floor+0x46>
 8013d66:	2c00      	cmp	r4, #0
 8013d68:	bfbe      	ittt	lt
 8013d6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013d6e:	fa43 f606 	asrlt.w	r6, r3, r6
 8013d72:	19a4      	addlt	r4, r4, r6
 8013d74:	ea24 0407 	bic.w	r4, r4, r7
 8013d78:	2500      	movs	r5, #0
 8013d7a:	e7e0      	b.n	8013d3e <floor+0x46>
 8013d7c:	2e33      	cmp	r6, #51	; 0x33
 8013d7e:	dd0b      	ble.n	8013d98 <floor+0xa0>
 8013d80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013d84:	d104      	bne.n	8013d90 <floor+0x98>
 8013d86:	ee10 2a10 	vmov	r2, s0
 8013d8a:	460b      	mov	r3, r1
 8013d8c:	f7ec fa96 	bl	80002bc <__adddf3>
 8013d90:	ec41 0b10 	vmov	d0, r0, r1
 8013d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d98:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013da0:	fa23 f707 	lsr.w	r7, r3, r7
 8013da4:	4207      	tst	r7, r0
 8013da6:	d0f3      	beq.n	8013d90 <floor+0x98>
 8013da8:	a30f      	add	r3, pc, #60	; (adr r3, 8013de8 <floor+0xf0>)
 8013daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dae:	f7ec fa85 	bl	80002bc <__adddf3>
 8013db2:	2200      	movs	r2, #0
 8013db4:	2300      	movs	r3, #0
 8013db6:	f7ec fec7 	bl	8000b48 <__aeabi_dcmpgt>
 8013dba:	2800      	cmp	r0, #0
 8013dbc:	d0bf      	beq.n	8013d3e <floor+0x46>
 8013dbe:	2c00      	cmp	r4, #0
 8013dc0:	da02      	bge.n	8013dc8 <floor+0xd0>
 8013dc2:	2e14      	cmp	r6, #20
 8013dc4:	d103      	bne.n	8013dce <floor+0xd6>
 8013dc6:	3401      	adds	r4, #1
 8013dc8:	ea25 0507 	bic.w	r5, r5, r7
 8013dcc:	e7b7      	b.n	8013d3e <floor+0x46>
 8013dce:	2301      	movs	r3, #1
 8013dd0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013dd4:	fa03 f606 	lsl.w	r6, r3, r6
 8013dd8:	4435      	add	r5, r6
 8013dda:	4545      	cmp	r5, r8
 8013ddc:	bf38      	it	cc
 8013dde:	18e4      	addcc	r4, r4, r3
 8013de0:	e7f2      	b.n	8013dc8 <floor+0xd0>
 8013de2:	2500      	movs	r5, #0
 8013de4:	462c      	mov	r4, r5
 8013de6:	e7aa      	b.n	8013d3e <floor+0x46>
 8013de8:	8800759c 	.word	0x8800759c
 8013dec:	7e37e43c 	.word	0x7e37e43c
 8013df0:	bff00000 	.word	0xbff00000
 8013df4:	000fffff 	.word	0x000fffff

08013df8 <scalbn>:
 8013df8:	b570      	push	{r4, r5, r6, lr}
 8013dfa:	ec55 4b10 	vmov	r4, r5, d0
 8013dfe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013e02:	4606      	mov	r6, r0
 8013e04:	462b      	mov	r3, r5
 8013e06:	b99a      	cbnz	r2, 8013e30 <scalbn+0x38>
 8013e08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013e0c:	4323      	orrs	r3, r4
 8013e0e:	d036      	beq.n	8013e7e <scalbn+0x86>
 8013e10:	4b39      	ldr	r3, [pc, #228]	; (8013ef8 <scalbn+0x100>)
 8013e12:	4629      	mov	r1, r5
 8013e14:	ee10 0a10 	vmov	r0, s0
 8013e18:	2200      	movs	r2, #0
 8013e1a:	f7ec fc05 	bl	8000628 <__aeabi_dmul>
 8013e1e:	4b37      	ldr	r3, [pc, #220]	; (8013efc <scalbn+0x104>)
 8013e20:	429e      	cmp	r6, r3
 8013e22:	4604      	mov	r4, r0
 8013e24:	460d      	mov	r5, r1
 8013e26:	da10      	bge.n	8013e4a <scalbn+0x52>
 8013e28:	a32b      	add	r3, pc, #172	; (adr r3, 8013ed8 <scalbn+0xe0>)
 8013e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e2e:	e03a      	b.n	8013ea6 <scalbn+0xae>
 8013e30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013e34:	428a      	cmp	r2, r1
 8013e36:	d10c      	bne.n	8013e52 <scalbn+0x5a>
 8013e38:	ee10 2a10 	vmov	r2, s0
 8013e3c:	4620      	mov	r0, r4
 8013e3e:	4629      	mov	r1, r5
 8013e40:	f7ec fa3c 	bl	80002bc <__adddf3>
 8013e44:	4604      	mov	r4, r0
 8013e46:	460d      	mov	r5, r1
 8013e48:	e019      	b.n	8013e7e <scalbn+0x86>
 8013e4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013e4e:	460b      	mov	r3, r1
 8013e50:	3a36      	subs	r2, #54	; 0x36
 8013e52:	4432      	add	r2, r6
 8013e54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013e58:	428a      	cmp	r2, r1
 8013e5a:	dd08      	ble.n	8013e6e <scalbn+0x76>
 8013e5c:	2d00      	cmp	r5, #0
 8013e5e:	a120      	add	r1, pc, #128	; (adr r1, 8013ee0 <scalbn+0xe8>)
 8013e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e64:	da1c      	bge.n	8013ea0 <scalbn+0xa8>
 8013e66:	a120      	add	r1, pc, #128	; (adr r1, 8013ee8 <scalbn+0xf0>)
 8013e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e6c:	e018      	b.n	8013ea0 <scalbn+0xa8>
 8013e6e:	2a00      	cmp	r2, #0
 8013e70:	dd08      	ble.n	8013e84 <scalbn+0x8c>
 8013e72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013e76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013e7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013e7e:	ec45 4b10 	vmov	d0, r4, r5
 8013e82:	bd70      	pop	{r4, r5, r6, pc}
 8013e84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013e88:	da19      	bge.n	8013ebe <scalbn+0xc6>
 8013e8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013e8e:	429e      	cmp	r6, r3
 8013e90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013e94:	dd0a      	ble.n	8013eac <scalbn+0xb4>
 8013e96:	a112      	add	r1, pc, #72	; (adr r1, 8013ee0 <scalbn+0xe8>)
 8013e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d1e2      	bne.n	8013e66 <scalbn+0x6e>
 8013ea0:	a30f      	add	r3, pc, #60	; (adr r3, 8013ee0 <scalbn+0xe8>)
 8013ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ea6:	f7ec fbbf 	bl	8000628 <__aeabi_dmul>
 8013eaa:	e7cb      	b.n	8013e44 <scalbn+0x4c>
 8013eac:	a10a      	add	r1, pc, #40	; (adr r1, 8013ed8 <scalbn+0xe0>)
 8013eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d0b8      	beq.n	8013e28 <scalbn+0x30>
 8013eb6:	a10e      	add	r1, pc, #56	; (adr r1, 8013ef0 <scalbn+0xf8>)
 8013eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ebc:	e7b4      	b.n	8013e28 <scalbn+0x30>
 8013ebe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013ec2:	3236      	adds	r2, #54	; 0x36
 8013ec4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013ec8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013ecc:	4620      	mov	r0, r4
 8013ece:	4b0c      	ldr	r3, [pc, #48]	; (8013f00 <scalbn+0x108>)
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	e7e8      	b.n	8013ea6 <scalbn+0xae>
 8013ed4:	f3af 8000 	nop.w
 8013ed8:	c2f8f359 	.word	0xc2f8f359
 8013edc:	01a56e1f 	.word	0x01a56e1f
 8013ee0:	8800759c 	.word	0x8800759c
 8013ee4:	7e37e43c 	.word	0x7e37e43c
 8013ee8:	8800759c 	.word	0x8800759c
 8013eec:	fe37e43c 	.word	0xfe37e43c
 8013ef0:	c2f8f359 	.word	0xc2f8f359
 8013ef4:	81a56e1f 	.word	0x81a56e1f
 8013ef8:	43500000 	.word	0x43500000
 8013efc:	ffff3cb0 	.word	0xffff3cb0
 8013f00:	3c900000 	.word	0x3c900000

08013f04 <_init>:
 8013f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f06:	bf00      	nop
 8013f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f0a:	bc08      	pop	{r3}
 8013f0c:	469e      	mov	lr, r3
 8013f0e:	4770      	bx	lr

08013f10 <_fini>:
 8013f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f12:	bf00      	nop
 8013f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f16:	bc08      	pop	{r3}
 8013f18:	469e      	mov	lr, r3
 8013f1a:	4770      	bx	lr
