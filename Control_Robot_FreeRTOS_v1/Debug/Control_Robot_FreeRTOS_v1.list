
Control_Robot_FreeRTOS_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010024  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  080101c8  080101c8  000201c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a18  08010a18  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08010a18  08010a18  00020a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a20  08010a20  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a20  08010a20  00020a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a24  08010a24  00020a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08010a28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000138e8  200001f8  08010c1c  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20013ae0  08010c1c  00033ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7a5  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ff  00000000  00000000  0003d9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  000401c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  00040d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001322e  00000000  00000000  00041710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f22e  00000000  00000000  0005493e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000629bb  00000000  00000000  00063b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6527  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e0  00000000  00000000  000c6578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080101ac 	.word	0x080101ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	080101ac 	.word	0x080101ac

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_frsub>:
 8000cb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	e002      	b.n	8000cc4 <__addsf3>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fsub>:
 8000cc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cc4 <__addsf3>:
 8000cc4:	0042      	lsls	r2, r0, #1
 8000cc6:	bf1f      	itttt	ne
 8000cc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ccc:	ea92 0f03 	teqne	r2, r3
 8000cd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd8:	d06a      	beq.n	8000db0 <__addsf3+0xec>
 8000cda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ce2:	bfc1      	itttt	gt
 8000ce4:	18d2      	addgt	r2, r2, r3
 8000ce6:	4041      	eorgt	r1, r0
 8000ce8:	4048      	eorgt	r0, r1
 8000cea:	4041      	eorgt	r1, r0
 8000cec:	bfb8      	it	lt
 8000cee:	425b      	neglt	r3, r3
 8000cf0:	2b19      	cmp	r3, #25
 8000cf2:	bf88      	it	hi
 8000cf4:	4770      	bxhi	lr
 8000cf6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4249      	negne	r1, r1
 8000d16:	ea92 0f03 	teq	r2, r3
 8000d1a:	d03f      	beq.n	8000d9c <__addsf3+0xd8>
 8000d1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d20:	fa41 fc03 	asr.w	ip, r1, r3
 8000d24:	eb10 000c 	adds.w	r0, r0, ip
 8000d28:	f1c3 0320 	rsb	r3, r3, #32
 8000d2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__addsf3+0x78>
 8000d36:	4249      	negs	r1, r1
 8000d38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d40:	d313      	bcc.n	8000d6a <__addsf3+0xa6>
 8000d42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d46:	d306      	bcc.n	8000d56 <__addsf3+0x92>
 8000d48:	0840      	lsrs	r0, r0, #1
 8000d4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d4e:	f102 0201 	add.w	r2, r2, #1
 8000d52:	2afe      	cmp	r2, #254	; 0xfe
 8000d54:	d251      	bcs.n	8000dfa <__addsf3+0x136>
 8000d56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5e:	bf08      	it	eq
 8000d60:	f020 0001 	biceq.w	r0, r0, #1
 8000d64:	ea40 0003 	orr.w	r0, r0, r3
 8000d68:	4770      	bx	lr
 8000d6a:	0049      	lsls	r1, r1, #1
 8000d6c:	eb40 0000 	adc.w	r0, r0, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	bf28      	it	cs
 8000d74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d78:	d2ed      	bcs.n	8000d56 <__addsf3+0x92>
 8000d7a:	fab0 fc80 	clz	ip, r0
 8000d7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d82:	ebb2 020c 	subs.w	r2, r2, ip
 8000d86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d8a:	bfaa      	itet	ge
 8000d8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d90:	4252      	neglt	r2, r2
 8000d92:	4318      	orrge	r0, r3
 8000d94:	bfbc      	itt	lt
 8000d96:	40d0      	lsrlt	r0, r2
 8000d98:	4318      	orrlt	r0, r3
 8000d9a:	4770      	bx	lr
 8000d9c:	f092 0f00 	teq	r2, #0
 8000da0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000da4:	bf06      	itte	eq
 8000da6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000daa:	3201      	addeq	r2, #1
 8000dac:	3b01      	subne	r3, #1
 8000dae:	e7b5      	b.n	8000d1c <__addsf3+0x58>
 8000db0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db8:	bf18      	it	ne
 8000dba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dbe:	d021      	beq.n	8000e04 <__addsf3+0x140>
 8000dc0:	ea92 0f03 	teq	r2, r3
 8000dc4:	d004      	beq.n	8000dd0 <__addsf3+0x10c>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	bf08      	it	eq
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	4770      	bx	lr
 8000dd0:	ea90 0f01 	teq	r0, r1
 8000dd4:	bf1c      	itt	ne
 8000dd6:	2000      	movne	r0, #0
 8000dd8:	4770      	bxne	lr
 8000dda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dde:	d104      	bne.n	8000dea <__addsf3+0x126>
 8000de0:	0040      	lsls	r0, r0, #1
 8000de2:	bf28      	it	cs
 8000de4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dee:	bf3c      	itt	cc
 8000df0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000df4:	4770      	bxcc	lr
 8000df6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	4770      	bx	lr
 8000e04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e08:	bf16      	itet	ne
 8000e0a:	4608      	movne	r0, r1
 8000e0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e10:	4601      	movne	r1, r0
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	bf06      	itte	eq
 8000e16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e1a:	ea90 0f01 	teqeq	r0, r1
 8000e1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_ui2f>:
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e004      	b.n	8000e34 <__aeabi_i2f+0x8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_i2f>:
 8000e2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e30:	bf48      	it	mi
 8000e32:	4240      	negmi	r0, r0
 8000e34:	ea5f 0c00 	movs.w	ip, r0
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e40:	4601      	mov	r1, r0
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	e01c      	b.n	8000e82 <__aeabi_l2f+0x2a>

08000e48 <__aeabi_ul2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e00a      	b.n	8000e6c <__aeabi_l2f+0x14>
 8000e56:	bf00      	nop

08000e58 <__aeabi_l2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_l2f+0x14>
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	ea5f 0c01 	movs.w	ip, r1
 8000e70:	bf02      	ittt	eq
 8000e72:	4684      	moveq	ip, r0
 8000e74:	4601      	moveq	r1, r0
 8000e76:	2000      	moveq	r0, #0
 8000e78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e7c:	bf08      	it	eq
 8000e7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e86:	fabc f28c 	clz	r2, ip
 8000e8a:	3a08      	subs	r2, #8
 8000e8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e90:	db10      	blt.n	8000eb4 <__aeabi_l2f+0x5c>
 8000e92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e96:	4463      	add	r3, ip
 8000e98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ea4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f102 0220 	add.w	r2, r2, #32
 8000eb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ec4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_ldivmod>:
 8000ed4:	b97b      	cbnz	r3, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed6:	b972      	cbnz	r2, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	bfbe      	ittt	lt
 8000edc:	2000      	movlt	r0, #0
 8000ede:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ee2:	e006      	blt.n	8000ef2 <__aeabi_ldivmod+0x1e>
 8000ee4:	bf08      	it	eq
 8000ee6:	2800      	cmpeq	r0, #0
 8000ee8:	bf1c      	itt	ne
 8000eea:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000eee:	f04f 30ff 	movne.w	r0, #4294967295
 8000ef2:	f000 b9dd 	b.w	80012b0 <__aeabi_idiv0>
 8000ef6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000efa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000efe:	2900      	cmp	r1, #0
 8000f00:	db09      	blt.n	8000f16 <__aeabi_ldivmod+0x42>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db1a      	blt.n	8000f3c <__aeabi_ldivmod+0x68>
 8000f06:	f000 f86b 	bl	8000fe0 <__udivmoddi4>
 8000f0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f12:	b004      	add	sp, #16
 8000f14:	4770      	bx	lr
 8000f16:	4240      	negs	r0, r0
 8000f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db1b      	blt.n	8000f58 <__aeabi_ldivmod+0x84>
 8000f20:	f000 f85e 	bl	8000fe0 <__udivmoddi4>
 8000f24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2c:	b004      	add	sp, #16
 8000f2e:	4240      	negs	r0, r0
 8000f30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f34:	4252      	negs	r2, r2
 8000f36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f3a:	4770      	bx	lr
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	f000 f84d 	bl	8000fe0 <__udivmoddi4>
 8000f46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f4e:	b004      	add	sp, #16
 8000f50:	4240      	negs	r0, r0
 8000f52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f56:	4770      	bx	lr
 8000f58:	4252      	negs	r2, r2
 8000f5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f5e:	f000 f83f 	bl	8000fe0 <__udivmoddi4>
 8000f62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f6a:	b004      	add	sp, #16
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_d2lz>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	2200      	movs	r2, #0
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	f7ff fdc5 	bl	8000b0c <__aeabi_dcmplt>
 8000f82:	b928      	cbnz	r0, 8000f90 <__aeabi_d2lz+0x1c>
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f8c:	f000 b80a 	b.w	8000fa4 <__aeabi_d2ulz>
 8000f90:	4620      	mov	r0, r4
 8000f92:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f96:	f000 f805 	bl	8000fa4 <__aeabi_d2ulz>
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_d2ulz>:
 8000fa4:	b5d0      	push	{r4, r6, r7, lr}
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__aeabi_d2ulz+0x34>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4606      	mov	r6, r0
 8000fac:	460f      	mov	r7, r1
 8000fae:	f7ff fb3b 	bl	8000628 <__aeabi_dmul>
 8000fb2:	f7ff fe11 	bl	8000bd8 <__aeabi_d2uiz>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	f7ff fabc 	bl	8000534 <__aeabi_ui2d>
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <__aeabi_d2ulz+0x38>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f7ff fb32 	bl	8000628 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4630      	mov	r0, r6
 8000fca:	4639      	mov	r1, r7
 8000fcc:	f7ff f974 	bl	80002b8 <__aeabi_dsub>
 8000fd0:	f7ff fe02 	bl	8000bd8 <__aeabi_d2uiz>
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	bdd0      	pop	{r4, r6, r7, pc}
 8000fd8:	3df00000 	.word	0x3df00000
 8000fdc:	41f00000 	.word	0x41f00000

08000fe0 <__udivmoddi4>:
 8000fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe4:	9d08      	ldr	r5, [sp, #32]
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	468e      	mov	lr, r1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d14d      	bne.n	800108a <__udivmoddi4+0xaa>
 8000fee:	428a      	cmp	r2, r1
 8000ff0:	4694      	mov	ip, r2
 8000ff2:	d969      	bls.n	80010c8 <__udivmoddi4+0xe8>
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	b152      	cbz	r2, 8001010 <__udivmoddi4+0x30>
 8000ffa:	fa01 f302 	lsl.w	r3, r1, r2
 8000ffe:	f1c2 0120 	rsb	r1, r2, #32
 8001002:	fa20 f101 	lsr.w	r1, r0, r1
 8001006:	fa0c fc02 	lsl.w	ip, ip, r2
 800100a:	ea41 0e03 	orr.w	lr, r1, r3
 800100e:	4094      	lsls	r4, r2
 8001010:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001014:	0c21      	lsrs	r1, r4, #16
 8001016:	fbbe f6f8 	udiv	r6, lr, r8
 800101a:	fa1f f78c 	uxth.w	r7, ip
 800101e:	fb08 e316 	mls	r3, r8, r6, lr
 8001022:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001026:	fb06 f107 	mul.w	r1, r6, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d90a      	bls.n	8001044 <__udivmoddi4+0x64>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f106 30ff 	add.w	r0, r6, #4294967295
 8001036:	f080 811f 	bcs.w	8001278 <__udivmoddi4+0x298>
 800103a:	4299      	cmp	r1, r3
 800103c:	f240 811c 	bls.w	8001278 <__udivmoddi4+0x298>
 8001040:	3e02      	subs	r6, #2
 8001042:	4463      	add	r3, ip
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	b2a4      	uxth	r4, r4
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3310 	mls	r3, r8, r0, r3
 8001050:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001054:	fb00 f707 	mul.w	r7, r0, r7
 8001058:	42a7      	cmp	r7, r4
 800105a:	d90a      	bls.n	8001072 <__udivmoddi4+0x92>
 800105c:	eb1c 0404 	adds.w	r4, ip, r4
 8001060:	f100 33ff 	add.w	r3, r0, #4294967295
 8001064:	f080 810a 	bcs.w	800127c <__udivmoddi4+0x29c>
 8001068:	42a7      	cmp	r7, r4
 800106a:	f240 8107 	bls.w	800127c <__udivmoddi4+0x29c>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001076:	1be4      	subs	r4, r4, r7
 8001078:	2600      	movs	r6, #0
 800107a:	b11d      	cbz	r5, 8001084 <__udivmoddi4+0xa4>
 800107c:	40d4      	lsrs	r4, r2
 800107e:	2300      	movs	r3, #0
 8001080:	e9c5 4300 	strd	r4, r3, [r5]
 8001084:	4631      	mov	r1, r6
 8001086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108a:	428b      	cmp	r3, r1
 800108c:	d909      	bls.n	80010a2 <__udivmoddi4+0xc2>
 800108e:	2d00      	cmp	r5, #0
 8001090:	f000 80ef 	beq.w	8001272 <__udivmoddi4+0x292>
 8001094:	2600      	movs	r6, #0
 8001096:	e9c5 0100 	strd	r0, r1, [r5]
 800109a:	4630      	mov	r0, r6
 800109c:	4631      	mov	r1, r6
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	fab3 f683 	clz	r6, r3
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d14a      	bne.n	8001140 <__udivmoddi4+0x160>
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d302      	bcc.n	80010b4 <__udivmoddi4+0xd4>
 80010ae:	4282      	cmp	r2, r0
 80010b0:	f200 80f9 	bhi.w	80012a6 <__udivmoddi4+0x2c6>
 80010b4:	1a84      	subs	r4, r0, r2
 80010b6:	eb61 0303 	sbc.w	r3, r1, r3
 80010ba:	2001      	movs	r0, #1
 80010bc:	469e      	mov	lr, r3
 80010be:	2d00      	cmp	r5, #0
 80010c0:	d0e0      	beq.n	8001084 <__udivmoddi4+0xa4>
 80010c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80010c6:	e7dd      	b.n	8001084 <__udivmoddi4+0xa4>
 80010c8:	b902      	cbnz	r2, 80010cc <__udivmoddi4+0xec>
 80010ca:	deff      	udf	#255	; 0xff
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f040 8092 	bne.w	80011fa <__udivmoddi4+0x21a>
 80010d6:	eba1 010c 	sub.w	r1, r1, ip
 80010da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010de:	fa1f fe8c 	uxth.w	lr, ip
 80010e2:	2601      	movs	r6, #1
 80010e4:	0c20      	lsrs	r0, r4, #16
 80010e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80010ea:	fb07 1113 	mls	r1, r7, r3, r1
 80010ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010f2:	fb0e f003 	mul.w	r0, lr, r3
 80010f6:	4288      	cmp	r0, r1
 80010f8:	d908      	bls.n	800110c <__udivmoddi4+0x12c>
 80010fa:	eb1c 0101 	adds.w	r1, ip, r1
 80010fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8001102:	d202      	bcs.n	800110a <__udivmoddi4+0x12a>
 8001104:	4288      	cmp	r0, r1
 8001106:	f200 80cb 	bhi.w	80012a0 <__udivmoddi4+0x2c0>
 800110a:	4643      	mov	r3, r8
 800110c:	1a09      	subs	r1, r1, r0
 800110e:	b2a4      	uxth	r4, r4
 8001110:	fbb1 f0f7 	udiv	r0, r1, r7
 8001114:	fb07 1110 	mls	r1, r7, r0, r1
 8001118:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800111c:	fb0e fe00 	mul.w	lr, lr, r0
 8001120:	45a6      	cmp	lr, r4
 8001122:	d908      	bls.n	8001136 <__udivmoddi4+0x156>
 8001124:	eb1c 0404 	adds.w	r4, ip, r4
 8001128:	f100 31ff 	add.w	r1, r0, #4294967295
 800112c:	d202      	bcs.n	8001134 <__udivmoddi4+0x154>
 800112e:	45a6      	cmp	lr, r4
 8001130:	f200 80bb 	bhi.w	80012aa <__udivmoddi4+0x2ca>
 8001134:	4608      	mov	r0, r1
 8001136:	eba4 040e 	sub.w	r4, r4, lr
 800113a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800113e:	e79c      	b.n	800107a <__udivmoddi4+0x9a>
 8001140:	f1c6 0720 	rsb	r7, r6, #32
 8001144:	40b3      	lsls	r3, r6
 8001146:	fa22 fc07 	lsr.w	ip, r2, r7
 800114a:	ea4c 0c03 	orr.w	ip, ip, r3
 800114e:	fa20 f407 	lsr.w	r4, r0, r7
 8001152:	fa01 f306 	lsl.w	r3, r1, r6
 8001156:	431c      	orrs	r4, r3
 8001158:	40f9      	lsrs	r1, r7
 800115a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800115e:	fa00 f306 	lsl.w	r3, r0, r6
 8001162:	fbb1 f8f9 	udiv	r8, r1, r9
 8001166:	0c20      	lsrs	r0, r4, #16
 8001168:	fa1f fe8c 	uxth.w	lr, ip
 800116c:	fb09 1118 	mls	r1, r9, r8, r1
 8001170:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001174:	fb08 f00e 	mul.w	r0, r8, lr
 8001178:	4288      	cmp	r0, r1
 800117a:	fa02 f206 	lsl.w	r2, r2, r6
 800117e:	d90b      	bls.n	8001198 <__udivmoddi4+0x1b8>
 8001180:	eb1c 0101 	adds.w	r1, ip, r1
 8001184:	f108 3aff 	add.w	sl, r8, #4294967295
 8001188:	f080 8088 	bcs.w	800129c <__udivmoddi4+0x2bc>
 800118c:	4288      	cmp	r0, r1
 800118e:	f240 8085 	bls.w	800129c <__udivmoddi4+0x2bc>
 8001192:	f1a8 0802 	sub.w	r8, r8, #2
 8001196:	4461      	add	r1, ip
 8001198:	1a09      	subs	r1, r1, r0
 800119a:	b2a4      	uxth	r4, r4
 800119c:	fbb1 f0f9 	udiv	r0, r1, r9
 80011a0:	fb09 1110 	mls	r1, r9, r0, r1
 80011a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ac:	458e      	cmp	lr, r1
 80011ae:	d908      	bls.n	80011c2 <__udivmoddi4+0x1e2>
 80011b0:	eb1c 0101 	adds.w	r1, ip, r1
 80011b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011b8:	d26c      	bcs.n	8001294 <__udivmoddi4+0x2b4>
 80011ba:	458e      	cmp	lr, r1
 80011bc:	d96a      	bls.n	8001294 <__udivmoddi4+0x2b4>
 80011be:	3802      	subs	r0, #2
 80011c0:	4461      	add	r1, ip
 80011c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011c6:	fba0 9402 	umull	r9, r4, r0, r2
 80011ca:	eba1 010e 	sub.w	r1, r1, lr
 80011ce:	42a1      	cmp	r1, r4
 80011d0:	46c8      	mov	r8, r9
 80011d2:	46a6      	mov	lr, r4
 80011d4:	d356      	bcc.n	8001284 <__udivmoddi4+0x2a4>
 80011d6:	d053      	beq.n	8001280 <__udivmoddi4+0x2a0>
 80011d8:	b15d      	cbz	r5, 80011f2 <__udivmoddi4+0x212>
 80011da:	ebb3 0208 	subs.w	r2, r3, r8
 80011de:	eb61 010e 	sbc.w	r1, r1, lr
 80011e2:	fa01 f707 	lsl.w	r7, r1, r7
 80011e6:	fa22 f306 	lsr.w	r3, r2, r6
 80011ea:	40f1      	lsrs	r1, r6
 80011ec:	431f      	orrs	r7, r3
 80011ee:	e9c5 7100 	strd	r7, r1, [r5]
 80011f2:	2600      	movs	r6, #0
 80011f4:	4631      	mov	r1, r6
 80011f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011fa:	f1c2 0320 	rsb	r3, r2, #32
 80011fe:	40d8      	lsrs	r0, r3
 8001200:	fa0c fc02 	lsl.w	ip, ip, r2
 8001204:	fa21 f303 	lsr.w	r3, r1, r3
 8001208:	4091      	lsls	r1, r2
 800120a:	4301      	orrs	r1, r0
 800120c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001210:	fa1f fe8c 	uxth.w	lr, ip
 8001214:	fbb3 f0f7 	udiv	r0, r3, r7
 8001218:	fb07 3610 	mls	r6, r7, r0, r3
 800121c:	0c0b      	lsrs	r3, r1, #16
 800121e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001222:	fb00 f60e 	mul.w	r6, r0, lr
 8001226:	429e      	cmp	r6, r3
 8001228:	fa04 f402 	lsl.w	r4, r4, r2
 800122c:	d908      	bls.n	8001240 <__udivmoddi4+0x260>
 800122e:	eb1c 0303 	adds.w	r3, ip, r3
 8001232:	f100 38ff 	add.w	r8, r0, #4294967295
 8001236:	d22f      	bcs.n	8001298 <__udivmoddi4+0x2b8>
 8001238:	429e      	cmp	r6, r3
 800123a:	d92d      	bls.n	8001298 <__udivmoddi4+0x2b8>
 800123c:	3802      	subs	r0, #2
 800123e:	4463      	add	r3, ip
 8001240:	1b9b      	subs	r3, r3, r6
 8001242:	b289      	uxth	r1, r1
 8001244:	fbb3 f6f7 	udiv	r6, r3, r7
 8001248:	fb07 3316 	mls	r3, r7, r6, r3
 800124c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001250:	fb06 f30e 	mul.w	r3, r6, lr
 8001254:	428b      	cmp	r3, r1
 8001256:	d908      	bls.n	800126a <__udivmoddi4+0x28a>
 8001258:	eb1c 0101 	adds.w	r1, ip, r1
 800125c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001260:	d216      	bcs.n	8001290 <__udivmoddi4+0x2b0>
 8001262:	428b      	cmp	r3, r1
 8001264:	d914      	bls.n	8001290 <__udivmoddi4+0x2b0>
 8001266:	3e02      	subs	r6, #2
 8001268:	4461      	add	r1, ip
 800126a:	1ac9      	subs	r1, r1, r3
 800126c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001270:	e738      	b.n	80010e4 <__udivmoddi4+0x104>
 8001272:	462e      	mov	r6, r5
 8001274:	4628      	mov	r0, r5
 8001276:	e705      	b.n	8001084 <__udivmoddi4+0xa4>
 8001278:	4606      	mov	r6, r0
 800127a:	e6e3      	b.n	8001044 <__udivmoddi4+0x64>
 800127c:	4618      	mov	r0, r3
 800127e:	e6f8      	b.n	8001072 <__udivmoddi4+0x92>
 8001280:	454b      	cmp	r3, r9
 8001282:	d2a9      	bcs.n	80011d8 <__udivmoddi4+0x1f8>
 8001284:	ebb9 0802 	subs.w	r8, r9, r2
 8001288:	eb64 0e0c 	sbc.w	lr, r4, ip
 800128c:	3801      	subs	r0, #1
 800128e:	e7a3      	b.n	80011d8 <__udivmoddi4+0x1f8>
 8001290:	4646      	mov	r6, r8
 8001292:	e7ea      	b.n	800126a <__udivmoddi4+0x28a>
 8001294:	4620      	mov	r0, r4
 8001296:	e794      	b.n	80011c2 <__udivmoddi4+0x1e2>
 8001298:	4640      	mov	r0, r8
 800129a:	e7d1      	b.n	8001240 <__udivmoddi4+0x260>
 800129c:	46d0      	mov	r8, sl
 800129e:	e77b      	b.n	8001198 <__udivmoddi4+0x1b8>
 80012a0:	3b02      	subs	r3, #2
 80012a2:	4461      	add	r1, ip
 80012a4:	e732      	b.n	800110c <__udivmoddi4+0x12c>
 80012a6:	4630      	mov	r0, r6
 80012a8:	e709      	b.n	80010be <__udivmoddi4+0xde>
 80012aa:	4464      	add	r4, ip
 80012ac:	3802      	subs	r0, #2
 80012ae:	e742      	b.n	8001136 <__udivmoddi4+0x156>

080012b0 <__aeabi_idiv0>:
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop

080012b4 <configMPUAccel>:
//Importacio de librerias
#include "MPUAccel.h"
//#include <SysTickDriver.h>

void configMPUAccel (MPUAccel_Handler_t *ptrMPUAccel){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73bb      	strb	r3, [r7, #14]

	//------------Verificamos comunicacion con el MPU----------------
	while(!rdy){
 80012c4:	e004      	b.n	80012d0 <configMPUAccel+0x1c>

		rdy = WHOIAM(ptrMPUAccel);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f846 	bl	8001358 <WHOIAM>
 80012cc:	4603      	mov	r3, r0
 80012ce:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f7      	beq.n	80012c6 <configMPUAccel+0x12>
	}

	//------------------Reiniciamos el MPU--------------------------
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, PWR_MGMT_l, 0x00);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	216b      	movs	r1, #107	; 0x6b
 80012de:	4618      	mov	r0, r3
 80012e0:	f006 fc15 	bl	8007b0e <i2c_WriteSingleRegister>
	//Pausa
	//delay_ms(1);

	//---------------Configuracion Accel----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	211c      	movs	r1, #28
 80012ea:	4618      	mov	r0, r3
 80012ec:	f006 fbde 	bl	8007aac <i2c_ReadSingleRegister>
 80012f0:	4603      	mov	r3, r0
 80012f2:	73bb      	strb	r3, [r7, #14]
	byte &= ~(0b00011000);
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	f023 0318 	bic.w	r3, r3, #24
 80012fa:	73bb      	strb	r3, [r7, #14]
	//Pausa
	//delay_ms(1);
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL<<3));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6858      	ldr	r0, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	b25a      	sxtb	r2, r3
 8001308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800130c:	4313      	orrs	r3, r2
 800130e:	b25b      	sxtb	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	211c      	movs	r1, #28
 8001316:	f006 fbfa 	bl	8007b0e <i2c_WriteSingleRegister>

	//---------------Configuracion Giro----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	211b      	movs	r1, #27
 8001320:	4618      	mov	r0, r3
 8001322:	f006 fbc3 	bl	8007aac <i2c_ReadSingleRegister>
 8001326:	4603      	mov	r3, r0
 8001328:	73bb      	strb	r3, [r7, #14]
	byte &= ~(0b00011000);
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	f023 0318 	bic.w	r3, r3, #24
 8001330:	73bb      	strb	r3, [r7, #14]
	//Pausa
	//delay_ms(1);
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL <<3));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6858      	ldr	r0, [r3, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	b25a      	sxtb	r2, r3
 800133e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001342:	4313      	orrs	r3, r2
 8001344:	b25b      	sxtb	r3, r3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	211b      	movs	r1, #27
 800134c:	f006 fbdf 	bl	8007b0e <i2c_WriteSingleRegister>
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <WHOIAM>:



//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Handler_t *ptrMPUAccel){
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	//Variables auxiliares
	uint8_t whoami = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	73bb      	strb	r3, [r7, #14]
	//leemos el registro WHO_AM_I correspondiente
	whoami =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, WHO_AM_I);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2175      	movs	r1, #117	; 0x75
 800136e:	4618      	mov	r0, r3
 8001370:	f006 fb9c 	bl	8007aac <i2c_ReadSingleRegister>
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]
	//verificamos la transacción
	whoami &= ~(0b10000001);
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800137e:	73fb      	strb	r3, [r7, #15]
	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	bf14      	ite	ne
 800138a:	2301      	movne	r3, #1
 800138c:	2300      	moveq	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8001392:	7bbb      	ldrb	r3, [r7, #14]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	0000      	movs	r0, r0
	...

080013a0 <readMPU>:


//Funcion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
float readMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead, int16_t offset)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
 80013ac:	4613      	mov	r3, r2
 80013ae:	803b      	strh	r3, [r7, #0]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	75fb      	strb	r3, [r7, #23]
	uint8_t address_L = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	75bb      	strb	r3, [r7, #22]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	81fb      	strh	r3, [r7, #14]
	uint16_t aux_L = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	81bb      	strh	r3, [r7, #12]
	int16_t   aux  = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	817b      	strh	r3, [r7, #10]
	float res  = 0;
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	d82d      	bhi.n	800142c <readMPU+0x8c>
 80013d0:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <readMPU+0x38>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	080013f1 	.word	0x080013f1
 80013dc:	080013fb 	.word	0x080013fb
 80013e0:	08001405 	.word	0x08001405
 80013e4:	0800140f 	.word	0x0800140f
 80013e8:	08001419 	.word	0x08001419
 80013ec:	08001423 	.word	0x08001423
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 80013f0:	233b      	movs	r3, #59	; 0x3b
 80013f2:	75fb      	strb	r3, [r7, #23]
 80013f4:	233c      	movs	r3, #60	; 0x3c
 80013f6:	75bb      	strb	r3, [r7, #22]
 80013f8:	e019      	b.n	800142e <readMPU+0x8e>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 80013fa:	233d      	movs	r3, #61	; 0x3d
 80013fc:	75fb      	strb	r3, [r7, #23]
 80013fe:	233e      	movs	r3, #62	; 0x3e
 8001400:	75bb      	strb	r3, [r7, #22]
 8001402:	e014      	b.n	800142e <readMPU+0x8e>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 8001404:	233f      	movs	r3, #63	; 0x3f
 8001406:	75fb      	strb	r3, [r7, #23]
 8001408:	2340      	movs	r3, #64	; 0x40
 800140a:	75bb      	strb	r3, [r7, #22]
 800140c:	e00f      	b.n	800142e <readMPU+0x8e>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 800140e:	2343      	movs	r3, #67	; 0x43
 8001410:	75fb      	strb	r3, [r7, #23]
 8001412:	2344      	movs	r3, #68	; 0x44
 8001414:	75bb      	strb	r3, [r7, #22]
 8001416:	e00a      	b.n	800142e <readMPU+0x8e>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 8001418:	2345      	movs	r3, #69	; 0x45
 800141a:	75fb      	strb	r3, [r7, #23]
 800141c:	2346      	movs	r3, #70	; 0x46
 800141e:	75bb      	strb	r3, [r7, #22]
 8001420:	e005      	b.n	800142e <readMPU+0x8e>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 8001422:	2347      	movs	r3, #71	; 0x47
 8001424:	75fb      	strb	r3, [r7, #23]
 8001426:	2348      	movs	r3, #72	; 0x48
 8001428:	75bb      	strb	r3, [r7, #22]
 800142a:	e000      	b.n	800142e <readMPU+0x8e>
		default:{ break; }
 800142c:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	7dfa      	ldrb	r2, [r7, #23]
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f006 fb38 	bl	8007aac <i2c_ReadSingleRegister>
 800143c:	4603      	mov	r3, r0
 800143e:	81fb      	strh	r3, [r7, #14]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	7dba      	ldrb	r2, [r7, #22]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f006 fb2f 	bl	8007aac <i2c_ReadSingleRegister>
 800144e:	4603      	mov	r3, r0
 8001450:	81bb      	strh	r3, [r7, #12]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = ((int16_t) ((aux_H << 8) | (aux_L))) - offset;
 8001452:	89fb      	ldrh	r3, [r7, #14]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21a      	sxth	r2, r3
 8001458:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	b21b      	sxth	r3, r3
 8001460:	b29a      	uxth	r2, r3
 8001462:	883b      	ldrh	r3, [r7, #0]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	b29b      	uxth	r3, r3
 8001468:	817b      	strh	r3, [r7, #10]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje
	switch(elementRead)
 800146a:	78fb      	ldrb	r3, [r7, #3]
 800146c:	2b02      	cmp	r3, #2
 800146e:	dc02      	bgt.n	8001476 <readMPU+0xd6>
 8001470:	2b00      	cmp	r3, #0
 8001472:	da05      	bge.n	8001480 <readMPU+0xe0>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
				default:{ break; }
			}
			break;
		}
		default:{ break; }
 8001474:	e0d6      	b.n	8001624 <readMPU+0x284>
 8001476:	3b03      	subs	r3, #3
	switch(elementRead)
 8001478:	2b02      	cmp	r3, #2
 800147a:	f200 80d3 	bhi.w	8001624 <readMPU+0x284>
 800147e:	e081      	b.n	8001584 <readMPU+0x1e4>
			switch (ptrMPUAccel->fullScaleACCEL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b03      	cmp	r3, #3
 8001486:	d87b      	bhi.n	8001580 <readMPU+0x1e0>
 8001488:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <readMPU+0xf0>)
 800148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148e:	bf00      	nop
 8001490:	080014a1 	.word	0x080014a1
 8001494:	080014d9 	.word	0x080014d9
 8001498:	08001511 	.word	0x08001511
 800149c:	08001549 	.word	0x08001549
				case ACCEL_2G :{res = (aux*9.77)/ACCEL_2G_SENS; break;}
 80014a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f855 	bl	8000554 <__aeabi_i2d>
 80014aa:	a363      	add	r3, pc, #396	; (adr r3, 8001638 <readMPU+0x298>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8ba 	bl	8000628 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <readMPU+0x2a0>)
 80014c2:	f7ff f9db 	bl	800087c <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fba3 	bl	8000c18 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	e054      	b.n	8001582 <readMPU+0x1e2>
				case ACCEL_4G :{res = (aux*9.77)/ACCEL_4G_SENS; break;}
 80014d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f839 	bl	8000554 <__aeabi_i2d>
 80014e2:	a355      	add	r3, pc, #340	; (adr r3, 8001638 <readMPU+0x298>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f89e 	bl	8000628 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b52      	ldr	r3, [pc, #328]	; (8001644 <readMPU+0x2a4>)
 80014fa:	f7ff f9bf 	bl	800087c <__aeabi_ddiv>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fb87 	bl	8000c18 <__aeabi_d2f>
 800150a:	4603      	mov	r3, r0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	e038      	b.n	8001582 <readMPU+0x1e2>
				case ACCEL_8G :{res = (aux*9.77)/ACCEL_8G_SENS; break;}
 8001510:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f81d 	bl	8000554 <__aeabi_i2d>
 800151a:	a347      	add	r3, pc, #284	; (adr r3, 8001638 <readMPU+0x298>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7ff f882 	bl	8000628 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	4b45      	ldr	r3, [pc, #276]	; (8001648 <readMPU+0x2a8>)
 8001532:	f7ff f9a3 	bl	800087c <__aeabi_ddiv>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fb6b 	bl	8000c18 <__aeabi_d2f>
 8001542:	4603      	mov	r3, r0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	e01c      	b.n	8001582 <readMPU+0x1e2>
				case ACCEL_16G :{res = (aux*9.77)/ACCEL_16G_SENS; break;}
 8001548:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f801 	bl	8000554 <__aeabi_i2d>
 8001552:	a339      	add	r3, pc, #228	; (adr r3, 8001638 <readMPU+0x298>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f866 	bl	8000628 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <readMPU+0x2ac>)
 800156a:	f7ff f987 	bl	800087c <__aeabi_ddiv>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fb4f 	bl	8000c18 <__aeabi_d2f>
 800157a:	4603      	mov	r3, r0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	e000      	b.n	8001582 <readMPU+0x1e2>
				default:{ break; }
 8001580:	bf00      	nop
			break;
 8001582:	e050      	b.n	8001626 <readMPU+0x286>
			switch (ptrMPUAccel->fullScaleGYRO)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	785b      	ldrb	r3, [r3, #1]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d849      	bhi.n	8001620 <readMPU+0x280>
 800158c:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <readMPU+0x1f4>)
 800158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001592:	bf00      	nop
 8001594:	080015a5 	.word	0x080015a5
 8001598:	080015c5 	.word	0x080015c5
 800159c:	080015e5 	.word	0x080015e5
 80015a0:	08001605 	.word	0x08001605
				case GYRO_250 :{ res = aux/GYRO_250_SENS; break;}
 80015a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015a8:	4a29      	ldr	r2, [pc, #164]	; (8001650 <readMPU+0x2b0>)
 80015aa:	fb82 1203 	smull	r1, r2, r2, r3
 80015ae:	1152      	asrs	r2, r2, #5
 80015b0:	17db      	asrs	r3, r3, #31
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015be:	edc7 7a04 	vstr	s15, [r7, #16]
 80015c2:	e02e      	b.n	8001622 <readMPU+0x282>
				case GYRO_500 :{ res = aux/GYRO_500_SENS; break;}
 80015c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015c8:	4a22      	ldr	r2, [pc, #136]	; (8001654 <readMPU+0x2b4>)
 80015ca:	fb82 1203 	smull	r1, r2, r2, r3
 80015ce:	1112      	asrs	r2, r2, #4
 80015d0:	17db      	asrs	r3, r3, #31
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015de:	edc7 7a04 	vstr	s15, [r7, #16]
 80015e2:	e01e      	b.n	8001622 <readMPU+0x282>
				case GYRO_1000 :{ res = aux/GYRO_1000_SENS; break;}
 80015e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015e8:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <readMPU+0x2b4>)
 80015ea:	fb82 1203 	smull	r1, r2, r2, r3
 80015ee:	10d2      	asrs	r2, r2, #3
 80015f0:	17db      	asrs	r3, r3, #31
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fe:	edc7 7a04 	vstr	s15, [r7, #16]
 8001602:	e00e      	b.n	8001622 <readMPU+0x282>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
 8001604:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001608:	2b00      	cmp	r3, #0
 800160a:	da00      	bge.n	800160e <readMPU+0x26e>
 800160c:	330f      	adds	r3, #15
 800160e:	111b      	asrs	r3, r3, #4
 8001610:	b21b      	sxth	r3, r3
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161a:	edc7 7a04 	vstr	s15, [r7, #16]
 800161e:	e000      	b.n	8001622 <readMPU+0x282>
				default:{ break; }
 8001620:	bf00      	nop
			break;
 8001622:	e000      	b.n	8001626 <readMPU+0x286>
		default:{ break; }
 8001624:	bf00      	nop
	}
	//Retornamos valor
	return res;
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	ee07 3a90 	vmov	s15, r3
}
 800162c:	eeb0 0a67 	vmov.f32	s0, s15
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	70a3d70a 	.word	0x70a3d70a
 800163c:	40238a3d 	.word	0x40238a3d
 8001640:	40d00000 	.word	0x40d00000
 8001644:	40c00000 	.word	0x40c00000
 8001648:	40b00000 	.word	0x40b00000
 800164c:	40a00000 	.word	0x40a00000
 8001650:	3e88cb3d 	.word	0x3e88cb3d
 8001654:	3e0f83e1 	.word	0x3e0f83e1

08001658 <readCalibrationMPU>:

//Funcion para en el modo de calibracion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
int16_t readCalibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]
	uint8_t address_L = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	73bb      	strb	r3, [r7, #14]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_L = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	817b      	strh	r3, [r7, #10]
	int16_t   aux  = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	813b      	strh	r3, [r7, #8]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d82c      	bhi.n	80016d8 <readCalibrationMPU+0x80>
 800167e:	a201      	add	r2, pc, #4	; (adr r2, 8001684 <readCalibrationMPU+0x2c>)
 8001680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001684:	0800169d 	.word	0x0800169d
 8001688:	080016a7 	.word	0x080016a7
 800168c:	080016b1 	.word	0x080016b1
 8001690:	080016bb 	.word	0x080016bb
 8001694:	080016c5 	.word	0x080016c5
 8001698:	080016cf 	.word	0x080016cf
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 800169c:	233b      	movs	r3, #59	; 0x3b
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	233c      	movs	r3, #60	; 0x3c
 80016a2:	73bb      	strb	r3, [r7, #14]
 80016a4:	e019      	b.n	80016da <readCalibrationMPU+0x82>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 80016a6:	233d      	movs	r3, #61	; 0x3d
 80016a8:	73fb      	strb	r3, [r7, #15]
 80016aa:	233e      	movs	r3, #62	; 0x3e
 80016ac:	73bb      	strb	r3, [r7, #14]
 80016ae:	e014      	b.n	80016da <readCalibrationMPU+0x82>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 80016b0:	233f      	movs	r3, #63	; 0x3f
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	2340      	movs	r3, #64	; 0x40
 80016b6:	73bb      	strb	r3, [r7, #14]
 80016b8:	e00f      	b.n	80016da <readCalibrationMPU+0x82>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 80016ba:	2343      	movs	r3, #67	; 0x43
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	2344      	movs	r3, #68	; 0x44
 80016c0:	73bb      	strb	r3, [r7, #14]
 80016c2:	e00a      	b.n	80016da <readCalibrationMPU+0x82>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 80016c4:	2345      	movs	r3, #69	; 0x45
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	2346      	movs	r3, #70	; 0x46
 80016ca:	73bb      	strb	r3, [r7, #14]
 80016cc:	e005      	b.n	80016da <readCalibrationMPU+0x82>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 80016ce:	2347      	movs	r3, #71	; 0x47
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	2348      	movs	r3, #72	; 0x48
 80016d4:	73bb      	strb	r3, [r7, #14]
 80016d6:	e000      	b.n	80016da <readCalibrationMPU+0x82>
		default:{ break; }
 80016d8:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f006 f9e2 	bl	8007aac <i2c_ReadSingleRegister>
 80016e8:	4603      	mov	r3, r0
 80016ea:	81bb      	strh	r3, [r7, #12]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	7bba      	ldrb	r2, [r7, #14]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f006 f9d9 	bl	8007aac <i2c_ReadSingleRegister>
 80016fa:	4603      	mov	r3, r0
 80016fc:	817b      	strh	r3, [r7, #10]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = (int16_t) ((aux_H << 8) | (aux_L));
 80016fe:	89bb      	ldrh	r3, [r7, #12]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b21a      	sxth	r2, r3
 8001704:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001708:	4313      	orrs	r3, r2
 800170a:	813b      	strh	r3, [r7, #8]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje

	//Retornamos valor
	return aux;
 800170c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <calibrationMPU>:


//Funcion para la calibracion de las mediciones realizadas
float calibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementCalibration)
{
 8001718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800171c:	b088      	sub	sp, #32
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	70fb      	strb	r3, [r7, #3]
	//Variables la ejecucion de la calibracion
	int64_t aux_sum = 0;
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t num_samples = 200;
 8001732:	23c8      	movs	r3, #200	; 0xc8
 8001734:	827b      	strh	r3, [r7, #18]
	float offset = 0;
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
	//Realizacion acumulacion de valores
	for (int i = 0; i < num_samples; i++)
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e014      	b.n	800176c <calibrationMPU+0x54>
	{
		//Lectura del registro respectivo y acumulacion
		aux_sum += readCalibrationMPU(ptrMPUAccel, elementCalibration);
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	4619      	mov	r1, r3
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ff86 	bl	8001658 <readCalibrationMPU>
 800174c:	4603      	mov	r3, r0
 800174e:	b21b      	sxth	r3, r3
 8001750:	17da      	asrs	r2, r3, #31
 8001752:	461c      	mov	r4, r3
 8001754:	4615      	mov	r5, r2
 8001756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800175a:	eb12 0804 	adds.w	r8, r2, r4
 800175e:	eb43 0905 	adc.w	r9, r3, r5
 8001762:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (int i = 0; i < num_samples; i++)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	8a7b      	ldrh	r3, [r7, #18]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	429a      	cmp	r2, r3
 8001772:	dbe6      	blt.n	8001742 <calibrationMPU+0x2a>
		//Pausa
		//delay_ms(1);
	}
	//Promedio del eje medido
	 offset = aux_sum/num_samples;
 8001774:	8a7b      	ldrh	r3, [r7, #18]
 8001776:	2200      	movs	r2, #0
 8001778:	469a      	mov	sl, r3
 800177a:	4693      	mov	fp, r2
 800177c:	4652      	mov	r2, sl
 800177e:	465b      	mov	r3, fp
 8001780:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001784:	f7ff fba6 	bl	8000ed4 <__aeabi_ldivmod>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff fb62 	bl	8000e58 <__aeabi_l2f>
 8001794:	4603      	mov	r3, r0
 8001796:	60fb      	str	r3, [r7, #12]
	//Retornar valor
	return offset;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	ee07 3a90 	vmov	s15, r3
}
 800179e:	eeb0 0a67 	vmov.f32	s0, s15
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080017ac <getAngle>:


//Funcion para calcular el nuevo angulo de uno de los ejes del girsocopio
float getAngle(MPUAccel_Handler_t *ptrMPUAccel, uint8_t timer, float ang_init, uint8_t axis, int16_t offset_Axis)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	4608      	mov	r0, r1
 80017b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ba:	4611      	mov	r1, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	4603      	mov	r3, r0
 80017c0:	72fb      	strb	r3, [r7, #11]
 80017c2:	460b      	mov	r3, r1
 80017c4:	72bb      	strb	r3, [r7, #10]
 80017c6:	4613      	mov	r3, r2
 80017c8:	813b      	strh	r3, [r7, #8]
	//Lectura velocidad angular
	float w_Angular= readMPU(ptrMPUAccel, axis, offset_Axis);
 80017ca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80017ce:	7abb      	ldrb	r3, [r7, #10]
 80017d0:	4619      	mov	r1, r3
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f7ff fde4 	bl	80013a0 <readMPU>
 80017d8:	ed87 0a05 	vstr	s0, [r7, #20]
	//Calculo angulo
	float ang = ang_init + (w_Angular*timer)/1000;
 80017dc:	7afb      	ldrb	r3, [r7, #11]
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ee:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001814 <getAngle+0x68>
 80017f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80017fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fe:	edc7 7a04 	vstr	s15, [r7, #16]

	return ang;
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	ee07 3a90 	vmov	s15, r3
}
 8001808:	eeb0 0a67 	vmov.f32	s0, s15
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	447a0000 	.word	0x447a0000

08001818 <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001834:	eeb0 0a67 	vmov.f32	s0, s15
 8001838:	4610      	mov	r0, r2
 800183a:	f006 fcf5 	bl	8008228 <updateDuttyCyclePercentageFloat>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <change_position>:
}


//-----------------Funciones para definir los parametros de la poscion teorica--------------
void change_position(Parameters_Path_t *ptrParameterPath, int distance)
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
	//Definimos la distancia
	 ptrParameterPath->line_Distance = distance;                  //[mm]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
	//Calculamos la posicicion
	double pot_x = ptrParameterPath->line_Distance*cos((ptrParameterPath->rotative_Grad*M_PI)/180);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe79 	bl	8000554 <__aeabi_i2d>
 8001862:	4604      	mov	r4, r0
 8001864:	460d      	mov	r5, r1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe72 	bl	8000554 <__aeabi_i2d>
 8001870:	a33b      	add	r3, pc, #236	; (adr r3, 8001960 <change_position+0x118>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe fed7 	bl	8000628 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <change_position+0x120>)
 8001888:	f7fe fff8 	bl	800087c <__aeabi_ddiv>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	ec43 2b17 	vmov	d7, r2, r3
 8001894:	eeb0 0a47 	vmov.f32	s0, s14
 8001898:	eef0 0a67 	vmov.f32	s1, s15
 800189c:	f00c fabc 	bl	800de18 <cos>
 80018a0:	ec53 2b10 	vmov	r2, r3, d0
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f7fe febe 	bl	8000628 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double pot_y = ptrParameterPath->line_Distance*sin((ptrParameterPath->rotative_Grad*M_PI)/180);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe4b 	bl	8000554 <__aeabi_i2d>
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe44 	bl	8000554 <__aeabi_i2d>
 80018cc:	a324      	add	r3, pc, #144	; (adr r3, 8001960 <change_position+0x118>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe fea9 	bl	8000628 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <change_position+0x120>)
 80018e4:	f7fe ffca 	bl	800087c <__aeabi_ddiv>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	ec43 2b17 	vmov	d7, r2, r3
 80018f0:	eeb0 0a47 	vmov.f32	s0, s14
 80018f4:	eef0 0a67 	vmov.f32	s1, s15
 80018f8:	f00c fae2 	bl	800dec0 <sin>
 80018fc:	ec53 2b10 	vmov	r2, r3, d0
 8001900:	4620      	mov	r0, r4
 8001902:	4629      	mov	r1, r5
 8001904:	f7fe fe90 	bl	8000628 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	//Guardamos la posicion del Goal como la posicion de Start
	ptrParameterPath->start_position_x = ptrParameterPath->goal_Position_x;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrParameterPath->start_position_y = ptrParameterPath->goal_Position_y;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x += pot_x;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800192e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001932:	f7fe fcc3 	bl	80002bc <__adddf3>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrParameterPath->goal_Position_y += pot_y;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001946:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800194a:	f7fe fcb7 	bl	80002bc <__adddf3>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bdb0      	pop	{r4, r5, r7, pc}
 8001960:	54442d18 	.word	0x54442d18
 8001964:	400921fb 	.word	0x400921fb
 8001968:	40668000 	.word	0x40668000
 800196c:	00000000 	.word	0x00000000

08001970 <calculation_parameter_distance>:

}

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8001970:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001974:	b08a      	sub	sp, #40	; 0x28
 8001976:	af00      	add	r7, sp, #0
 8001978:	6178      	str	r0, [r7, #20]
	//Calculo del vector director de la recta
	double a = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001986:	f7fe fc97 	bl	80002b8 <__aeabi_dsub>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double b = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800199e:	f7fe fc8b 	bl	80002b8 <__aeabi_dsub>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->parametersStraight.magnitude_d = sqrt(pow(a,2)+pow(b,2));
 80019aa:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8001ab8 <calculation_parameter_distance+0x148>
 80019ae:	ed97 0b08 	vldr	d0, [r7, #32]
 80019b2:	f00c fadf 	bl	800df74 <pow>
 80019b6:	ec59 8b10 	vmov	r8, r9, d0
 80019ba:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8001ab8 <calculation_parameter_distance+0x148>
 80019be:	ed97 0b06 	vldr	d0, [r7, #24]
 80019c2:	f00c fad7 	bl	800df74 <pow>
 80019c6:	ec53 2b10 	vmov	r2, r3, d0
 80019ca:	4640      	mov	r0, r8
 80019cc:	4649      	mov	r1, r9
 80019ce:	f7fe fc75 	bl	80002bc <__adddf3>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	ec43 2b17 	vmov	d7, r2, r3
 80019da:	eeb0 0a47 	vmov.f32	s0, s14
 80019de:	eef0 0a67 	vmov.f32	s1, s15
 80019e2:	f00c fb37 	bl	800e054 <sqrt>
 80019e6:	eeb0 7a40 	vmov.f32	s14, s0
 80019ea:	eef0 7a60 	vmov.f32	s15, s1
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->parametersStraight.proy_A = a;
 80019f4:	6979      	ldr	r1, [r7, #20]
 80019f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->parametersStraight.proy_B = b;
 80019fe:	6979      	ldr	r1, [r7, #20]
 8001a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a04:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->parametersStraight.proy_C = -1*a*ptrParameterPath->start_position_x - b*ptrParameterPath->start_position_y;
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001a1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a1e:	f7fe fe03 	bl	8000628 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4690      	mov	r8, r2
 8001a28:	4699      	mov	r9, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a34:	f7fe fdf8 	bl	8000628 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4640      	mov	r0, r8
 8001a3e:	4649      	mov	r1, r9
 8001a40:	f7fe fc3a 	bl	80002b8 <__aeabi_dsub>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	6979      	ldr	r1, [r7, #20]
 8001a4a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->parametersStraight.dis_point_A = b;
 8001a4e:	6979      	ldr	r1, [r7, #20]
 8001a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a54:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->parametersStraight.dis_point_B = -1*a;
 8001a58:	6a3c      	ldr	r4, [r7, #32]
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->parametersStraight.dis_point_C = -1*b*ptrParameterPath->start_position_x + a*ptrParameterPath->start_position_y;
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001a78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a7c:	f7fe fdd4 	bl	8000628 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4614      	mov	r4, r2
 8001a86:	461d      	mov	r5, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a92:	f7fe fdc9 	bl	8000628 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	f7fe fc0d 	bl	80002bc <__adddf3>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	6979      	ldr	r1, [r7, #20]
 8001aa8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8001aac:	bf00      	nop
 8001aae:	3728      	adds	r7, #40	; 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ab6:	bf00      	nop
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	40000000 	.word	0x40000000

08001ac0 <main>:
//Variables adicionales aplicacion
state_t next_state = sMainMenu;


int main(void)
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b08b      	sub	sp, #44	; 0x2c
 8001ac4:	af02      	add	r7, sp, #8
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 8001ac6:	2364      	movs	r3, #100	; 0x64
 8001ac8:	77fb      	strb	r3, [r7, #31]
	configPLL(clock);
 8001aca:	7ffb      	ldrb	r3, [r7, #31]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f006 f841 	bl	8007b54 <configPLL>
	//Configuracion inicial del sistema
	initSystem();
 8001ad2:	f000 f989 	bl	8001de8 <initSystem>
	//Activamos la unidad de punto flotante (FPU)
	SCB->CPACR    |= (0xF << 20);
 8001ad6:	4b9e      	ldr	r3, [pc, #632]	; (8001d50 <main+0x290>)
 8001ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001adc:	4a9c      	ldr	r2, [pc, #624]	; (8001d50 <main+0x290>)
 8001ade:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Activamos del contador de Ticks
	DWT->CTRL    |= (1 << 0);
 8001ae6:	4b9b      	ldr	r3, [pc, #620]	; (8001d54 <main+0x294>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a9a      	ldr	r2, [pc, #616]	; (8001d54 <main+0x294>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6013      	str	r3, [r2, #0]
	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 8001af2:	2101      	movs	r1, #1
 8001af4:	4898      	ldr	r0, [pc, #608]	; (8001d58 <main+0x298>)
 8001af6:	f005 fde3 	bl	80076c0 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8001afa:	2101      	movs	r1, #1
 8001afc:	4897      	ldr	r0, [pc, #604]	; (8001d5c <main+0x29c>)
 8001afe:	f005 fddf 	bl	80076c0 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 8001b02:	2101      	movs	r1, #1
 8001b04:	4896      	ldr	r0, [pc, #600]	; (8001d60 <main+0x2a0>)
 8001b06:	f005 fddb 	bl	80076c0 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	4895      	ldr	r0, [pc, #596]	; (8001d64 <main+0x2a4>)
 8001b0e:	f005 fdd7 	bl	80076c0 <GPIO_writePin>
	int_Config_Motor();
 8001b12:	f000 fb33 	bl	800217c <int_Config_Motor>
	//Calculo inicial de parametro
	cm_L = ((M_PI*DL)/(100*Ce));  //[mm/cuentas]
 8001b16:	4b94      	ldr	r3, [pc, #592]	; (8001d68 <main+0x2a8>)
 8001b18:	4a94      	ldr	r2, [pc, #592]	; (8001d6c <main+0x2ac>)
 8001b1a:	601a      	str	r2, [r3, #0]
	cm_R =	((M_PI*DR)/(100*Ce));  //[mm/cuentas]
 8001b1c:	4b94      	ldr	r3, [pc, #592]	; (8001d70 <main+0x2b0>)
 8001b1e:	4a95      	ldr	r2, [pc, #596]	; (8001d74 <main+0x2b4>)
 8001b20:	601a      	str	r2, [r3, #0]
	//Calculamos el setpoint
	velSetPoint = (0.00169*duttySetPoint + 0.0619);
 8001b22:	4b95      	ldr	r3, [pc, #596]	; (8001d78 <main+0x2b8>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fd14 	bl	8000554 <__aeabi_i2d>
 8001b2c:	a384      	add	r3, pc, #528	; (adr r3, 8001d40 <main+0x280>)
 8001b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b32:	f7fe fd79 	bl	8000628 <__aeabi_dmul>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	a382      	add	r3, pc, #520	; (adr r3, 8001d48 <main+0x288>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fbba 	bl	80002bc <__adddf3>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7ff f862 	bl	8000c18 <__aeabi_d2f>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4a89      	ldr	r2, [pc, #548]	; (8001d7c <main+0x2bc>)
 8001b58:	6013      	str	r3, [r2, #0]
	//Calculo periodo de accion
	time_accion = time_accumulated*period_sampling;
 8001b5a:	4b89      	ldr	r3, [pc, #548]	; (8001d80 <main+0x2c0>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <main+0x2c4>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	fb12 f303 	smulbb	r3, r2, r3
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b87      	ldr	r3, [pc, #540]	; (8001d88 <main+0x2c8>)
 8001b6c:	701a      	strb	r2, [r3, #0]
	//--------------------------Configuramos inicia el MPU----------------------
	//Configuracion MPU
	int_MPU();
 8001b6e:	f000 faf1 	bl	8002154 <int_MPU>
	//Calibracion del eje Z del giroscopio
	gyro_offset = calibrationMPU(&handler_MPUAccel_MPU6050, CAL_GYRO_Z);
 8001b72:	2105      	movs	r1, #5
 8001b74:	4885      	ldr	r0, [pc, #532]	; (8001d8c <main+0x2cc>)
 8001b76:	f7ff fdcf 	bl	8001718 <calibrationMPU>
 8001b7a:	eef0 7a40 	vmov.f32	s15, s0
 8001b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b82:	ee17 3a90 	vmov	r3, s15
 8001b86:	b21a      	sxth	r2, r3
 8001b88:	4b81      	ldr	r3, [pc, #516]	; (8001d90 <main+0x2d0>)
 8001b8a:	801a      	strh	r2, [r3, #0]

	//-----------------------Inicio cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//-------------------Configuracion Task--------------
	//Tarea Menu
	xReturned = xTaskCreate(
 8001b8c:	4b81      	ldr	r3, [pc, #516]	; (8001d94 <main+0x2d4>)
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	2302      	movs	r3, #2
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2300      	movs	r3, #0
 8001b96:	22c8      	movs	r2, #200	; 0xc8
 8001b98:	497f      	ldr	r1, [pc, #508]	; (8001d98 <main+0x2d8>)
 8001b9a:	4880      	ldr	r0, [pc, #512]	; (8001d9c <main+0x2dc>)
 8001b9c:	f002 f888 	bl	8003cb0 <xTaskCreate>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a7f      	ldr	r2, [pc, #508]	; (8001da0 <main+0x2e0>)
 8001ba4:	6013      	str	r3, [r2, #0]
	                    "Task_Menu",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Menu);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8001ba6:	4b7e      	ldr	r3, [pc, #504]	; (8001da0 <main+0x2e0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d00a      	beq.n	8001bc4 <main+0x104>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb2:	f383 8811 	msr	BASEPRI, r3
 8001bb6:	f3bf 8f6f 	isb	sy
 8001bba:	f3bf 8f4f 	dsb	sy
 8001bbe:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001bc0:	bf00      	nop
 8001bc2:	e7fe      	b.n	8001bc2 <main+0x102>
	//Tarea Print
	xReturned = xTaskCreate(
 8001bc4:	4b77      	ldr	r3, [pc, #476]	; (8001da4 <main+0x2e4>)
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	2302      	movs	r3, #2
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	22c8      	movs	r2, #200	; 0xc8
 8001bd0:	4975      	ldr	r1, [pc, #468]	; (8001da8 <main+0x2e8>)
 8001bd2:	4876      	ldr	r0, [pc, #472]	; (8001dac <main+0x2ec>)
 8001bd4:	f002 f86c 	bl	8003cb0 <xTaskCreate>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4a71      	ldr	r2, [pc, #452]	; (8001da0 <main+0x2e0>)
 8001bdc:	6013      	str	r3, [r2, #0]
	                    "Task_Print",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Print);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8001bde:	4b70      	ldr	r3, [pc, #448]	; (8001da0 <main+0x2e0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d00a      	beq.n	8001bfc <main+0x13c>
        __asm volatile
 8001be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bea:	f383 8811 	msr	BASEPRI, r3
 8001bee:	f3bf 8f6f 	isb	sy
 8001bf2:	f3bf 8f4f 	dsb	sy
 8001bf6:	617b      	str	r3, [r7, #20]
    }
 8001bf8:	bf00      	nop
 8001bfa:	e7fe      	b.n	8001bfa <main+0x13a>
	//Tarea comandos
	xReturned = xTaskCreate(
 8001bfc:	4b6c      	ldr	r3, [pc, #432]	; (8001db0 <main+0x2f0>)
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	2302      	movs	r3, #2
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2300      	movs	r3, #0
 8001c06:	22c8      	movs	r2, #200	; 0xc8
 8001c08:	496a      	ldr	r1, [pc, #424]	; (8001db4 <main+0x2f4>)
 8001c0a:	486b      	ldr	r0, [pc, #428]	; (8001db8 <main+0x2f8>)
 8001c0c:	f002 f850 	bl	8003cb0 <xTaskCreate>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4a63      	ldr	r2, [pc, #396]	; (8001da0 <main+0x2e0>)
 8001c14:	6013      	str	r3, [r2, #0]
	                    "Task_Commands",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Commands);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8001c16:	4b62      	ldr	r3, [pc, #392]	; (8001da0 <main+0x2e0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d00a      	beq.n	8001c34 <main+0x174>
        __asm volatile
 8001c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c22:	f383 8811 	msr	BASEPRI, r3
 8001c26:	f3bf 8f6f 	isb	sy
 8001c2a:	f3bf 8f4f 	dsb	sy
 8001c2e:	613b      	str	r3, [r7, #16]
    }
 8001c30:	bf00      	nop
 8001c32:	e7fe      	b.n	8001c32 <main+0x172>

	//Tarea go
	xReturned = xTaskCreate(
 8001c34:	4b61      	ldr	r3, [pc, #388]	; (8001dbc <main+0x2fc>)
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	2302      	movs	r3, #2
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	22c8      	movs	r2, #200	; 0xc8
 8001c40:	495f      	ldr	r1, [pc, #380]	; (8001dc0 <main+0x300>)
 8001c42:	4860      	ldr	r0, [pc, #384]	; (8001dc4 <main+0x304>)
 8001c44:	f002 f834 	bl	8003cb0 <xTaskCreate>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <main+0x2e0>)
 8001c4c:	6013      	str	r3, [r2, #0]
	                    "Task_Go",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Go);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8001c4e:	4b54      	ldr	r3, [pc, #336]	; (8001da0 <main+0x2e0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d00a      	beq.n	8001c6c <main+0x1ac>
        __asm volatile
 8001c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5a:	f383 8811 	msr	BASEPRI, r3
 8001c5e:	f3bf 8f6f 	isb	sy
 8001c62:	f3bf 8f4f 	dsb	sy
 8001c66:	60fb      	str	r3, [r7, #12]
    }
 8001c68:	bf00      	nop
 8001c6a:	e7fe      	b.n	8001c6a <main+0x1aa>

	//Tarea stop
	xReturned = xTaskCreate(
 8001c6c:	4b56      	ldr	r3, [pc, #344]	; (8001dc8 <main+0x308>)
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	2302      	movs	r3, #2
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2300      	movs	r3, #0
 8001c76:	22c8      	movs	r2, #200	; 0xc8
 8001c78:	4954      	ldr	r1, [pc, #336]	; (8001dcc <main+0x30c>)
 8001c7a:	4855      	ldr	r0, [pc, #340]	; (8001dd0 <main+0x310>)
 8001c7c:	f002 f818 	bl	8003cb0 <xTaskCreate>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a47      	ldr	r2, [pc, #284]	; (8001da0 <main+0x2e0>)
 8001c84:	6013      	str	r3, [r2, #0]
	                    "Task_Stop",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Stop);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8001c86:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <main+0x2e0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d00a      	beq.n	8001ca4 <main+0x1e4>
        __asm volatile
 8001c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c92:	f383 8811 	msr	BASEPRI, r3
 8001c96:	f3bf 8f6f 	isb	sy
 8001c9a:	f3bf 8f4f 	dsb	sy
 8001c9e:	60bb      	str	r3, [r7, #8]
    }
 8001ca0:	bf00      	nop
 8001ca2:	e7fe      	b.n	8001ca2 <main+0x1e2>

	//-------------------Configuracion Queue--------------
	//Cola para recibir datos por consola
	xQueue_InputData = xQueueCreate(10, sizeof( char ) );
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	200a      	movs	r0, #10
 8001caa:	f001 fab5 	bl	8003218 <xQueueGenericCreate>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a48      	ldr	r2, [pc, #288]	; (8001dd4 <main+0x314>)
 8001cb2:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_InputData != NULL);
 8001cb4:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <main+0x314>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10a      	bne.n	8001cd2 <main+0x212>
        __asm volatile
 8001cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc0:	f383 8811 	msr	BASEPRI, r3
 8001cc4:	f3bf 8f6f 	isb	sy
 8001cc8:	f3bf 8f4f 	dsb	sy
 8001ccc:	607b      	str	r3, [r7, #4]
    }
 8001cce:	bf00      	nop
 8001cd0:	e7fe      	b.n	8001cd0 <main+0x210>
	//cola para enviar datos por consola
	xQueue_Print = xQueueCreate(10, sizeof( size_t) );
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2104      	movs	r1, #4
 8001cd6:	200a      	movs	r0, #10
 8001cd8:	f001 fa9e 	bl	8003218 <xQueueGenericCreate>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a3e      	ldr	r2, [pc, #248]	; (8001dd8 <main+0x318>)
 8001ce0:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_Print != NULL);
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <main+0x318>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10a      	bne.n	8001d00 <main+0x240>
        __asm volatile
 8001cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cee:	f383 8811 	msr	BASEPRI, r3
 8001cf2:	f3bf 8f6f 	isb	sy
 8001cf6:	f3bf 8f4f 	dsb	sy
 8001cfa:	603b      	str	r3, [r7, #0]
    }
 8001cfc:	bf00      	nop
 8001cfe:	e7fe      	b.n	8001cfe <main+0x23e>

	//-------------------Configuracion Timer--------------
	//Software Timer para el blink
	handler_led_timer = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, 0, led_state_callback);
 8001d00:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <main+0x31c>)
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2300      	movs	r3, #0
 8001d06:	2201      	movs	r2, #1
 8001d08:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d0c:	4834      	ldr	r0, [pc, #208]	; (8001de0 <main+0x320>)
 8001d0e:	f003 f8b3 	bl	8004e78 <xTimerCreate>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4a33      	ldr	r2, [pc, #204]	; (8001de4 <main+0x324>)
 8001d16:	6013      	str	r3, [r2, #0]
	xTimerStart(handler_led_timer, portMAX_DELAY);
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <main+0x324>)
 8001d1a:	681c      	ldr	r4, [r3, #0]
 8001d1c:	f002 fa0a 	bl	8004134 <xTaskGetTickCount>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f003 f8ff 	bl	8004f30 <xTimerGenericCommand>

	//-------------------Inicializacion Scheduler--------------
	//Inicia le Scheduler a funcionar
	vTaskStartScheduler();
 8001d32:	f002 f903 	bl	8003f3c <vTaskStartScheduler>
	//-----------------------Fin cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//Si el scheduler se inicia correctamente no se ejecutada este while
	while(1)
	{
		__NOP();
 8001d36:	bf00      	nop
 8001d38:	e7fd      	b.n	8001d36 <main+0x276>
 8001d3a:	bf00      	nop
 8001d3c:	f3af 8000 	nop.w
 8001d40:	aebc408e 	.word	0xaebc408e
 8001d44:	3f5bb05f 	.word	0x3f5bb05f
 8001d48:	573eab36 	.word	0x573eab36
 8001d4c:	3fafb15b 	.word	0x3fafb15b
 8001d50:	e000ed00 	.word	0xe000ed00
 8001d54:	e0001000 	.word	0xe0001000
 8001d58:	200002a0 	.word	0x200002a0
 8001d5c:	20000314 	.word	0x20000314
 8001d60:	200002ac 	.word	0x200002ac
 8001d64:	20000320 	.word	0x20000320
 8001d68:	200003e8 	.word	0x200003e8
 8001d6c:	40105fa7 	.word	0x40105fa7
 8001d70:	200003ec 	.word	0x200003ec
 8001d74:	400facee 	.word	0x400facee
 8001d78:	20000008 	.word	0x20000008
 8001d7c:	200003f8 	.word	0x200003f8
 8001d80:	2000041a 	.word	0x2000041a
 8001d84:	20000001 	.word	0x20000001
 8001d88:	20000418 	.word	0x20000418
 8001d8c:	2000028c 	.word	0x2000028c
 8001d90:	2000039c 	.word	0x2000039c
 8001d94:	20000424 	.word	0x20000424
 8001d98:	080101c8 	.word	0x080101c8
 8001d9c:	080025ad 	.word	0x080025ad
 8001da0:	20000420 	.word	0x20000420
 8001da4:	20000428 	.word	0x20000428
 8001da8:	080101d4 	.word	0x080101d4
 8001dac:	0800269d 	.word	0x0800269d
 8001db0:	2000042c 	.word	0x2000042c
 8001db4:	080101e0 	.word	0x080101e0
 8001db8:	080026cd 	.word	0x080026cd
 8001dbc:	20000430 	.word	0x20000430
 8001dc0:	080101f0 	.word	0x080101f0
 8001dc4:	08002701 	.word	0x08002701
 8001dc8:	20000434 	.word	0x20000434
 8001dcc:	080101f8 	.word	0x080101f8
 8001dd0:	08002749 	.word	0x08002749
 8001dd4:	2000043c 	.word	0x2000043c
 8001dd8:	20000438 	.word	0x20000438
 8001ddc:	08002809 	.word	0x08002809
 8001de0:	08010204 	.word	0x08010204
 8001de4:	20000440 	.word	0x20000440

08001de8 <initSystem>:
}


//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void initSystem(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af02      	add	r7, sp, #8
	//---------------------------------Inicio de Configuracion GPIOx---------------------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_BlinkyPin.pGPIOx = GPIOA;
 8001dee:	4baf      	ldr	r3, [pc, #700]	; (80020ac <initSystem+0x2c4>)
 8001df0:	4aaf      	ldr	r2, [pc, #700]	; (80020b0 <initSystem+0x2c8>)
 8001df2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8001df4:	4bad      	ldr	r3, [pc, #692]	; (80020ac <initSystem+0x2c4>)
 8001df6:	2205      	movs	r2, #5
 8001df8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2301      	movs	r3, #1
 8001e04:	2200      	movs	r2, #0
 8001e06:	2101      	movs	r1, #1
 8001e08:	48a8      	ldr	r0, [pc, #672]	; (80020ac <initSystem+0x2c4>)
 8001e0a:	f005 fb0d 	bl	8007428 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_BlinkyPin);
 8001e0e:	48a7      	ldr	r0, [pc, #668]	; (80020ac <initSystem+0x2c4>)
 8001e10:	f005 fb2c 	bl	800746c <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_CommTerm_TX.pGPIOx = GPIOA;
 8001e14:	4ba7      	ldr	r3, [pc, #668]	; (80020b4 <initSystem+0x2cc>)
 8001e16:	4aa6      	ldr	r2, [pc, #664]	; (80020b0 <initSystem+0x2c8>)
 8001e18:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_CommTerm_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8001e1a:	4ba6      	ldr	r3, [pc, #664]	; (80020b4 <initSystem+0x2cc>)
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_CommTerm_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001e20:	2307      	movs	r3, #7
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	2300      	movs	r3, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	48a1      	ldr	r0, [pc, #644]	; (80020b4 <initSystem+0x2cc>)
 8001e30:	f005 fafa 	bl	8007428 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_CommTerm_TX);
 8001e34:	489f      	ldr	r0, [pc, #636]	; (80020b4 <initSystem+0x2cc>)
 8001e36:	f005 fb19 	bl	800746c <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_CommTerm_RX.pGPIOx = GPIOA;
 8001e3a:	4b9f      	ldr	r3, [pc, #636]	; (80020b8 <initSystem+0x2d0>)
 8001e3c:	4a9c      	ldr	r2, [pc, #624]	; (80020b0 <initSystem+0x2c8>)
 8001e3e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_CommTerm_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 8001e40:	4b9d      	ldr	r3, [pc, #628]	; (80020b8 <initSystem+0x2d0>)
 8001e42:	2203      	movs	r2, #3
 8001e44:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_CommTerm_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001e46:	2307      	movs	r3, #7
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	2200      	movs	r2, #0
 8001e52:	2102      	movs	r1, #2
 8001e54:	4898      	ldr	r0, [pc, #608]	; (80020b8 <initSystem+0x2d0>)
 8001e56:	f005 fae7 	bl	8007428 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_CommTerm_RX);
 8001e5a:	4897      	ldr	r0, [pc, #604]	; (80020b8 <initSystem+0x2d0>)
 8001e5c:	f005 fb06 	bl	800746c <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8001e60:	4b96      	ldr	r3, [pc, #600]	; (80020bc <initSystem+0x2d4>)
 8001e62:	4a93      	ldr	r2, [pc, #588]	; (80020b0 <initSystem+0x2c8>)
 8001e64:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8001e66:	4b95      	ldr	r3, [pc, #596]	; (80020bc <initSystem+0x2d4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	2300      	movs	r3, #0
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2200      	movs	r2, #0
 8001e78:	2102      	movs	r1, #2
 8001e7a:	4890      	ldr	r0, [pc, #576]	; (80020bc <initSystem+0x2d4>)
 8001e7c:	f005 fad4 	bl	8007428 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8001e80:	488e      	ldr	r0, [pc, #568]	; (80020bc <initSystem+0x2d4>)
 8001e82:	f005 faf3 	bl	800746c <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8001e86:	4b8e      	ldr	r3, [pc, #568]	; (80020c0 <initSystem+0x2d8>)
 8001e88:	4a8e      	ldr	r2, [pc, #568]	; (80020c4 <initSystem+0x2dc>)
 8001e8a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 8001e8c:	4b8c      	ldr	r3, [pc, #560]	; (80020c0 <initSystem+0x2d8>)
 8001e8e:	220c      	movs	r2, #12
 8001e90:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001e92:	2300      	movs	r3, #0
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	2300      	movs	r3, #0
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	4887      	ldr	r0, [pc, #540]	; (80020c0 <initSystem+0x2d8>)
 8001ea2:	f005 fac1 	bl	8007428 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 8001ea6:	4886      	ldr	r0, [pc, #536]	; (80020c0 <initSystem+0x2d8>)
 8001ea8:	f005 fae0 	bl	800746c <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 8001eac:	4b86      	ldr	r3, [pc, #536]	; (80020c8 <initSystem+0x2e0>)
 8001eae:	4a85      	ldr	r2, [pc, #532]	; (80020c4 <initSystem+0x2dc>)
 8001eb0:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8001eb2:	4b85      	ldr	r3, [pc, #532]	; (80020c8 <initSystem+0x2e0>)
 8001eb4:	220a      	movs	r2, #10
 8001eb6:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	4880      	ldr	r0, [pc, #512]	; (80020c8 <initSystem+0x2e0>)
 8001ec8:	f005 faae 	bl	8007428 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 8001ecc:	487e      	ldr	r0, [pc, #504]	; (80020c8 <initSystem+0x2e0>)
 8001ece:	f005 facd 	bl	800746c <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 8001ed2:	4b7e      	ldr	r3, [pc, #504]	; (80020cc <initSystem+0x2e4>)
 8001ed4:	4a76      	ldr	r2, [pc, #472]	; (80020b0 <initSystem+0x2c8>)
 8001ed6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 8001ed8:	4b7c      	ldr	r3, [pc, #496]	; (80020cc <initSystem+0x2e4>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8001ede:	2302      	movs	r3, #2
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2102      	movs	r1, #2
 8001eec:	4877      	ldr	r0, [pc, #476]	; (80020cc <initSystem+0x2e4>)
 8001eee:	f005 fa9b 	bl	8007428 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8001ef2:	4876      	ldr	r0, [pc, #472]	; (80020cc <initSystem+0x2e4>)
 8001ef4:	f005 faba 	bl	800746c <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 8001ef8:	4b75      	ldr	r3, [pc, #468]	; (80020d0 <initSystem+0x2e8>)
 8001efa:	4a76      	ldr	r2, [pc, #472]	; (80020d4 <initSystem+0x2ec>)
 8001efc:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8001efe:	4b74      	ldr	r3, [pc, #464]	; (80020d0 <initSystem+0x2e8>)
 8001f00:	2202      	movs	r2, #2
 8001f02:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001f04:	2300      	movs	r3, #0
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2101      	movs	r1, #1
 8001f12:	486f      	ldr	r0, [pc, #444]	; (80020d0 <initSystem+0x2e8>)
 8001f14:	f005 fa88 	bl	8007428 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 8001f18:	486d      	ldr	r0, [pc, #436]	; (80020d0 <initSystem+0x2e8>)
 8001f1a:	f005 faa7 	bl	800746c <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8001f1e:	4b6e      	ldr	r3, [pc, #440]	; (80020d8 <initSystem+0x2f0>)
 8001f20:	4a68      	ldr	r2, [pc, #416]	; (80020c4 <initSystem+0x2dc>)
 8001f22:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8001f24:	4b6c      	ldr	r3, [pc, #432]	; (80020d8 <initSystem+0x2f0>)
 8001f26:	220b      	movs	r2, #11
 8001f28:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2301      	movs	r3, #1
 8001f34:	2200      	movs	r2, #0
 8001f36:	2101      	movs	r1, #1
 8001f38:	4867      	ldr	r0, [pc, #412]	; (80020d8 <initSystem+0x2f0>)
 8001f3a:	f005 fa75 	bl	8007428 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8001f3e:	4866      	ldr	r0, [pc, #408]	; (80020d8 <initSystem+0x2f0>)
 8001f40:	f005 fa94 	bl	800746c <GPIO_Config>

	//---------------------------I2C--------------------------------
	//---------------PIN: PB8----------------
	//------------AF4: I2C1_SCL----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SCL_MPU6050.pGPIOx = GPIOB;
 8001f44:	4b65      	ldr	r3, [pc, #404]	; (80020dc <initSystem+0x2f4>)
 8001f46:	4a66      	ldr	r2, [pc, #408]	; (80020e0 <initSystem+0x2f8>)
 8001f48:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SCL_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 8001f4a:	4b64      	ldr	r3, [pc, #400]	; (80020dc <initSystem+0x2f4>)
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SCL_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8001f50:	2304      	movs	r3, #4
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	2300      	movs	r3, #0
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2302      	movs	r3, #2
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	485f      	ldr	r0, [pc, #380]	; (80020dc <initSystem+0x2f4>)
 8001f60:	f005 fa62 	bl	8007428 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SCL_MPU6050);
 8001f64:	485d      	ldr	r0, [pc, #372]	; (80020dc <initSystem+0x2f4>)
 8001f66:	f005 fa81 	bl	800746c <GPIO_Config>

	//---------------PIN: PB9----------------
	//------------AF4: I2C1_SDA----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SDA_MPU6050.pGPIOx = GPIOB;
 8001f6a:	4b5e      	ldr	r3, [pc, #376]	; (80020e4 <initSystem+0x2fc>)
 8001f6c:	4a5c      	ldr	r2, [pc, #368]	; (80020e0 <initSystem+0x2f8>)
 8001f6e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SDA_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8001f70:	4b5c      	ldr	r3, [pc, #368]	; (80020e4 <initSystem+0x2fc>)
 8001f72:	2209      	movs	r2, #9
 8001f74:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SDA_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8001f76:	2304      	movs	r3, #4
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2302      	movs	r3, #2
 8001f80:	2201      	movs	r2, #1
 8001f82:	2102      	movs	r1, #2
 8001f84:	4857      	ldr	r0, [pc, #348]	; (80020e4 <initSystem+0x2fc>)
 8001f86:	f005 fa4f 	bl	8007428 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SDA_MPU6050);
 8001f8a:	4856      	ldr	r0, [pc, #344]	; (80020e4 <initSystem+0x2fc>)
 8001f8c:	f005 fa6e 	bl	800746c <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_CommTerm.ptrUSARTx = USART2;
 8001f90:	4b55      	ldr	r3, [pc, #340]	; (80020e8 <initSystem+0x300>)
 8001f92:	4a56      	ldr	r2, [pc, #344]	; (80020ec <initSystem+0x304>)
 8001f94:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_CommTerm.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8001f96:	4b54      	ldr	r3, [pc, #336]	; (80020e8 <initSystem+0x300>)
 8001f98:	2202      	movs	r2, #2
 8001f9a:	701a      	strb	r2, [r3, #0]
	handler_USART_CommTerm.USART_Config.USART_baudrate = USART_BAUDRATE_115200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8001f9c:	4b52      	ldr	r3, [pc, #328]	; (80020e8 <initSystem+0x300>)
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	705a      	strb	r2, [r3, #1]
	handler_USART_CommTerm.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8001fa2:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <initSystem+0x300>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	709a      	strb	r2, [r3, #2]
	handler_USART_CommTerm.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 8001fa8:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <initSystem+0x300>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	70da      	strb	r2, [r3, #3]
	handler_USART_CommTerm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8001fae:	4b4e      	ldr	r3, [pc, #312]	; (80020e8 <initSystem+0x300>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	711a      	strb	r2, [r3, #4]
	handler_USART_CommTerm.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_DISABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 8001fb4:	4b4c      	ldr	r3, [pc, #304]	; (80020e8 <initSystem+0x300>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	usart_Config_Init_Priority(&handler_USART_CommTerm, e_USART_PRIOPITY_6);
 8001fba:	2106      	movs	r1, #6
 8001fbc:	484a      	ldr	r0, [pc, #296]	; (80020e8 <initSystem+0x300>)
 8001fbe:	f006 fbbf 	bl	8008740 <usart_Config_Init_Priority>
	USART_Config(&handler_USART_CommTerm);
 8001fc2:	4849      	ldr	r0, [pc, #292]	; (80020e8 <initSystem+0x300>)
 8001fc4:	f006 f99e 	bl	8008304 <USART_Config>

	//-------------------Fin de Configuracion USARTx-----------------------

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Sampling.ptrTIMx = TIM3;
 8001fc8:	4b49      	ldr	r3, [pc, #292]	; (80020f0 <initSystem+0x308>)
 8001fca:	4a4a      	ldr	r2, [pc, #296]	; (80020f4 <initSystem+0x30c>)
 8001fcc:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Sampling.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8001fce:	4b48      	ldr	r3, [pc, #288]	; (80020f0 <initSystem+0x308>)
 8001fd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd4:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Sampling.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001fd6:	4b46      	ldr	r3, [pc, #280]	; (80020f0 <initSystem+0x308>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Sampling.TIMx_Config.TIMX_period = period_sampling;   //Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8001fdc:	4b46      	ldr	r3, [pc, #280]	; (80020f8 <initSystem+0x310>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <initSystem+0x308>)
 8001fe4:	605a      	str	r2, [r3, #4]
	handler_TIMER_Sampling.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8001fe6:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <initSystem+0x308>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	timer_Config_Init_Priority(&handler_TIMER_Sampling, e_TIMER_PRIOPITY_6);
 8001fec:	2106      	movs	r1, #6
 8001fee:	4840      	ldr	r0, [pc, #256]	; (80020f0 <initSystem+0x308>)
 8001ff0:	f003 fff0 	bl	8005fd4 <timer_Config_Init_Priority>
	BasicTimer_Config(&handler_TIMER_Sampling);
 8001ff4:	483e      	ldr	r0, [pc, #248]	; (80020f0 <initSystem+0x308>)
 8001ff6:	f003 ff0f 	bl	8005e18 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 8001ffa:	4b40      	ldr	r3, [pc, #256]	; (80020fc <initSystem+0x314>)
 8001ffc:	4a40      	ldr	r2, [pc, #256]	; (8002100 <initSystem+0x318>)
 8001ffe:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8002000:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <initSystem+0x314>)
 8002002:	220a      	movs	r2, #10
 8002004:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8002006:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <initSystem+0x314>)
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 800200c:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <initSystem+0x314>)
 800200e:	2264      	movs	r2, #100	; 0x64
 8002010:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8002012:	4b3a      	ldr	r3, [pc, #232]	; (80020fc <initSystem+0x314>)
 8002014:	2200      	movs	r2, #0
 8002016:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 8002018:	4838      	ldr	r0, [pc, #224]	; (80020fc <initSystem+0x314>)
 800201a:	f003 fefd 	bl	8005e18 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 800201e:	4b39      	ldr	r3, [pc, #228]	; (8002104 <initSystem+0x31c>)
 8002020:	4a28      	ldr	r2, [pc, #160]	; (80020c4 <initSystem+0x2dc>)
 8002022:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8002024:	4b37      	ldr	r3, [pc, #220]	; (8002104 <initSystem+0x31c>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 800202a:	4b37      	ldr	r3, [pc, #220]	; (8002108 <initSystem+0x320>)
 800202c:	4a35      	ldr	r2, [pc, #212]	; (8002104 <initSystem+0x31c>)
 800202e:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8002030:	4b35      	ldr	r3, [pc, #212]	; (8002108 <initSystem+0x320>)
 8002032:	2202      	movs	r2, #2
 8002034:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	exti_Config_Int_Priority(&handler_EXTI_FotoR, e_EXTI_PRIOPITY_7);
 8002036:	2107      	movs	r1, #7
 8002038:	4833      	ldr	r0, [pc, #204]	; (8002108 <initSystem+0x320>)
 800203a:	f004 fff1 	bl	8007020 <exti_Config_Int_Priority>
	extInt_Config(&handler_EXTI_FotoR);
 800203e:	4832      	ldr	r0, [pc, #200]	; (8002108 <initSystem+0x320>)
 8002040:	f004 f8e0 	bl	8006204 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8002044:	4b31      	ldr	r3, [pc, #196]	; (800210c <initSystem+0x324>)
 8002046:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <initSystem+0x2dc>)
 8002048:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800204a:	4b30      	ldr	r3, [pc, #192]	; (800210c <initSystem+0x324>)
 800204c:	2203      	movs	r2, #3
 800204e:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8002050:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <initSystem+0x328>)
 8002052:	4a2e      	ldr	r2, [pc, #184]	; (800210c <initSystem+0x324>)
 8002054:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8002056:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <initSystem+0x328>)
 8002058:	2202      	movs	r2, #2
 800205a:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	exti_Config_Int_Priority(&handler_EXTI_FotoL, e_EXTI_PRIOPITY_7);
 800205c:	2107      	movs	r1, #7
 800205e:	482c      	ldr	r0, [pc, #176]	; (8002110 <initSystem+0x328>)
 8002060:	f004 ffde 	bl	8007020 <exti_Config_Int_Priority>
	extInt_Config(& handler_EXTI_FotoL);
 8002064:	482a      	ldr	r0, [pc, #168]	; (8002110 <initSystem+0x328>)
 8002066:	f004 f8cd 	bl	8006204 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 800206a:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <initSystem+0x32c>)
 800206c:	4a24      	ldr	r2, [pc, #144]	; (8002100 <initSystem+0x318>)
 800206e:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 8002070:	4b28      	ldr	r3, [pc, #160]	; (8002114 <initSystem+0x32c>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8002076:	4b27      	ldr	r3, [pc, #156]	; (8002114 <initSystem+0x32c>)
 8002078:	220a      	movs	r2, #10
 800207a:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <initSystem+0x32c>)
 800207e:	2201      	movs	r2, #1
 8002080:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 8002082:	4824      	ldr	r0, [pc, #144]	; (8002114 <initSystem+0x32c>)
 8002084:	f005 fe18 	bl	8007cb8 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8002088:	2101      	movs	r1, #1
 800208a:	4822      	ldr	r0, [pc, #136]	; (8002114 <initSystem+0x32c>)
 800208c:	f005 ff74 	bl	8007f78 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <initSystem+0x330>)
 8002092:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <initSystem+0x318>)
 8002094:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <initSystem+0x330>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <initSystem+0x330>)
 800209e:	220a      	movs	r2, #10
 80020a0:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 80020a2:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <initSystem+0x330>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	711a      	strb	r2, [r3, #4]
 80020a8:	e038      	b.n	800211c <initSystem+0x334>
 80020aa:	bf00      	nop
 80020ac:	20000214 	.word	0x20000214
 80020b0:	40020000 	.word	0x40020000
 80020b4:	20000220 	.word	0x20000220
 80020b8:	2000022c 	.word	0x2000022c
 80020bc:	20000294 	.word	0x20000294
 80020c0:	200002a0 	.word	0x200002a0
 80020c4:	40020800 	.word	0x40020800
 80020c8:	200002ac 	.word	0x200002ac
 80020cc:	20000308 	.word	0x20000308
 80020d0:	20000314 	.word	0x20000314
 80020d4:	40020c00 	.word	0x40020c00
 80020d8:	20000320 	.word	0x20000320
 80020dc:	2000026c 	.word	0x2000026c
 80020e0:	40020400 	.word	0x40020400
 80020e4:	20000278 	.word	0x20000278
 80020e8:	20000238 	.word	0x20000238
 80020ec:	40004400 	.word	0x40004400
 80020f0:	2000038c 	.word	0x2000038c
 80020f4:	40000400 	.word	0x40000400
 80020f8:	20000001 	.word	0x20000001
 80020fc:	2000037c 	.word	0x2000037c
 8002100:	40000c00 	.word	0x40000c00
 8002104:	20000244 	.word	0x20000244
 8002108:	20000250 	.word	0x20000250
 800210c:	20000258 	.word	0x20000258
 8002110:	20000264 	.word	0x20000264
 8002114:	200002b8 	.word	0x200002b8
 8002118:	2000032c 	.word	0x2000032c
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 800211c:	480a      	ldr	r0, [pc, #40]	; (8002148 <initSystem+0x360>)
 800211e:	f005 fdcb 	bl	8007cb8 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 8002122:	2101      	movs	r1, #1
 8002124:	4808      	ldr	r0, [pc, #32]	; (8002148 <initSystem+0x360>)
 8002126:	f005 ff27 	bl	8007f78 <statusInOutPWM>

	//-------------------Inicio de Configuracion I2Cx----------------------

	//---------------I2C1----------------
	//Definimos el I2Cx a usar
	handler_I2C_MPU6050.prtI2Cx = I2C1;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <initSystem+0x364>)
 800212c:	4a08      	ldr	r2, [pc, #32]	; (8002150 <initSystem+0x368>)
 800212e:	601a      	str	r2, [r3, #0]
	//Definimos la configuracion para el I2C
	handler_I2C_MPU6050.modeI2C = I2C_MODE_FM;               //I2C_MODE_x  x->SM,FM
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <initSystem+0x364>)
 8002132:	2201      	movs	r2, #1
 8002134:	715a      	strb	r2, [r3, #5]
	handler_I2C_MPU6050.slaveAddress = ADDRESS_DOWN;         //Direccion del Sclave
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <initSystem+0x364>)
 8002138:	2268      	movs	r2, #104	; 0x68
 800213a:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	i2c_Config(&handler_I2C_MPU6050);
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <initSystem+0x364>)
 800213e:	f005 fb01 	bl	8007744 <i2c_Config>

	//---------------------Fin de Configuracion I2Cx----------------------

}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	2000032c 	.word	0x2000032c
 800214c:	20000284 	.word	0x20000284
 8002150:	40005400 	.word	0x40005400

08002154 <int_MPU>:



//------------------------------Inicio configuracion del MPU------------------------------------------
void int_MPU(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
	//Definimos la escala de las diferentes magnitudes fisicas
	handler_MPUAccel_MPU6050.fullScaleACCEL = ACCEL_2G;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <int_MPU+0x20>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_MPU6050.fullScaleGYRO = GYRO_250;
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <int_MPU+0x20>)
 8002160:	2200      	movs	r2, #0
 8002162:	705a      	strb	r2, [r3, #1]
	//Definimos el handler correspondiente al I2C
	handler_MPUAccel_MPU6050.ptrI2Chandler = &handler_I2C_MPU6050;
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <int_MPU+0x20>)
 8002166:	4a04      	ldr	r2, [pc, #16]	; (8002178 <int_MPU+0x24>)
 8002168:	605a      	str	r2, [r3, #4]
	//Cargamos configuracion
	configMPUAccel(&handler_MPUAccel_MPU6050);
 800216a:	4802      	ldr	r0, [pc, #8]	; (8002174 <int_MPU+0x20>)
 800216c:	f7ff f8a2 	bl	80012b4 <configMPUAccel>

}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	2000028c 	.word	0x2000028c
 8002178:	20000284 	.word	0x20000284

0800217c <int_Config_Motor>:

//------------------------------Fin configuracion del MPU------------------------------------------

//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  28;
 8002180:	4b3c      	ldr	r3, [pc, #240]	; (8002274 <int_Config_Motor+0xf8>)
 8002182:	4a3d      	ldr	r2, [pc, #244]	; (8002278 <int_Config_Motor+0xfc>)
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_R.configMotor.frecuency = &value_period;
 8002186:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <int_Config_Motor+0xf8>)
 8002188:	4a3c      	ldr	r2, [pc, #240]	; (800227c <int_Config_Motor+0x100>)
 800218a:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_R.configMotor.dir = SET;
 800218c:	4b39      	ldr	r3, [pc, #228]	; (8002274 <int_Config_Motor+0xf8>)
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 8002194:	4b37      	ldr	r3, [pc, #220]	; (8002274 <int_Config_Motor+0xf8>)
 8002196:	4a3a      	ldr	r2, [pc, #232]	; (8002280 <int_Config_Motor+0x104>)
 8002198:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 800219a:	4b36      	ldr	r3, [pc, #216]	; (8002274 <int_Config_Motor+0xf8>)
 800219c:	4a39      	ldr	r2, [pc, #228]	; (8002284 <int_Config_Motor+0x108>)
 800219e:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 80021a0:	4b34      	ldr	r3, [pc, #208]	; (8002274 <int_Config_Motor+0xf8>)
 80021a2:	4a39      	ldr	r2, [pc, #228]	; (8002288 <int_Config_Motor+0x10c>)
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 80021a6:	4b33      	ldr	r3, [pc, #204]	; (8002274 <int_Config_Motor+0xf8>)
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	4b31      	ldr	r3, [pc, #196]	; (8002274 <int_Config_Motor+0xf8>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4a30      	ldr	r2, [pc, #192]	; (8002274 <int_Config_Motor+0xf8>)
 80021b4:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 80021b6:	4b2f      	ldr	r3, [pc, #188]	; (8002274 <int_Config_Motor+0xf8>)
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <int_Config_Motor+0xf8>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4a2c      	ldr	r2, [pc, #176]	; (8002274 <int_Config_Motor+0xf8>)
 80021c4:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_R.parametersMotor.parametersPID.kp = 250;
 80021c6:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <int_Config_Motor+0xf8>)
 80021c8:	4a30      	ldr	r2, [pc, #192]	; (800228c <int_Config_Motor+0x110>)
 80021ca:	611a      	str	r2, [r3, #16]
	handler_Motor_R.parametersMotor.parametersPID.ki = 0;
 80021cc:	4b29      	ldr	r3, [pc, #164]	; (8002274 <int_Config_Motor+0xf8>)
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	615a      	str	r2, [r3, #20]
	handler_Motor_R.parametersMotor.parametersPID.kd = 100;
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <int_Config_Motor+0xf8>)
 80021d6:	4a2e      	ldr	r2, [pc, #184]	; (8002290 <int_Config_Motor+0x114>)
 80021d8:	619a      	str	r2, [r3, #24]

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  28;
 80021da:	4b2e      	ldr	r3, [pc, #184]	; (8002294 <int_Config_Motor+0x118>)
 80021dc:	4a26      	ldr	r2, [pc, #152]	; (8002278 <int_Config_Motor+0xfc>)
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_L.configMotor.frecuency = &value_period;
 80021e0:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <int_Config_Motor+0x118>)
 80021e2:	4a26      	ldr	r2, [pc, #152]	; (800227c <int_Config_Motor+0x100>)
 80021e4:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_L.configMotor.dir = SET;
 80021e6:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <int_Config_Motor+0x118>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 80021ee:	4b29      	ldr	r3, [pc, #164]	; (8002294 <int_Config_Motor+0x118>)
 80021f0:	4a29      	ldr	r2, [pc, #164]	; (8002298 <int_Config_Motor+0x11c>)
 80021f2:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 80021f4:	4b27      	ldr	r3, [pc, #156]	; (8002294 <int_Config_Motor+0x118>)
 80021f6:	4a29      	ldr	r2, [pc, #164]	; (800229c <int_Config_Motor+0x120>)
 80021f8:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <int_Config_Motor+0x118>)
 80021fc:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <int_Config_Motor+0x124>)
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 8002200:	4b24      	ldr	r3, [pc, #144]	; (8002294 <int_Config_Motor+0x118>)
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	4b22      	ldr	r3, [pc, #136]	; (8002294 <int_Config_Motor+0x118>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4a21      	ldr	r2, [pc, #132]	; (8002294 <int_Config_Motor+0x118>)
 800220e:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 8002210:	4b20      	ldr	r3, [pc, #128]	; (8002294 <int_Config_Motor+0x118>)
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <int_Config_Motor+0x118>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <int_Config_Motor+0x118>)
 800221e:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_L.parametersMotor.parametersPID.kp = 250;
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <int_Config_Motor+0x118>)
 8002222:	4a1a      	ldr	r2, [pc, #104]	; (800228c <int_Config_Motor+0x110>)
 8002224:	611a      	str	r2, [r3, #16]
	handler_Motor_L.parametersMotor.parametersPID.ki = 0;
 8002226:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <int_Config_Motor+0x118>)
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	615a      	str	r2, [r3, #20]
	handler_Motor_L.parametersMotor.parametersPID.kd = 100;
 800222e:	4b19      	ldr	r3, [pc, #100]	; (8002294 <int_Config_Motor+0x118>)
 8002230:	4a17      	ldr	r2, [pc, #92]	; (8002290 <int_Config_Motor+0x114>)
 8002232:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distace.e = parameter_PID_distace.e_prev = 0;
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <int_Config_Motor+0x128>)
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <int_Config_Motor+0x128>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a18      	ldr	r2, [pc, #96]	; (80022a4 <int_Config_Motor+0x128>)
 8002242:	6053      	str	r3, [r2, #4]
	parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 8002244:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <int_Config_Motor+0x128>)
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <int_Config_Motor+0x128>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <int_Config_Motor+0x128>)
 8002252:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	parameter_PID_distace.kp = 1.0;
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <int_Config_Motor+0x128>)
 8002256:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800225a:	611a      	str	r2, [r3, #16]
	parameter_PID_distace.ki = 0.1;
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <int_Config_Motor+0x128>)
 800225e:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <int_Config_Motor+0x12c>)
 8002260:	615a      	str	r2, [r3, #20]
	parameter_PID_distace.kd = 0.8;
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <int_Config_Motor+0x128>)
 8002264:	4a11      	ldr	r2, [pc, #68]	; (80022ac <int_Config_Motor+0x130>)
 8002266:	619a      	str	r2, [r3, #24]
};
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	200002c4 	.word	0x200002c4
 8002278:	41e00000 	.word	0x41e00000
 800227c:	20000004 	.word	0x20000004
 8002280:	200002ac 	.word	0x200002ac
 8002284:	200002a0 	.word	0x200002a0
 8002288:	200002b8 	.word	0x200002b8
 800228c:	437a0000 	.word	0x437a0000
 8002290:	42c80000 	.word	0x42c80000
 8002294:	20000338 	.word	0x20000338
 8002298:	20000320 	.word	0x20000320
 800229c:	20000314 	.word	0x20000314
 80022a0:	2000032c 	.word	0x2000032c
 80022a4:	200003fc 	.word	0x200003fc
 80022a8:	3dcccccd 	.word	0x3dcccccd
 80022ac:	3f4ccccd 	.word	0x3f4ccccd

080022b0 <BasicUSART2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af02      	add	r7, sp, #8
	usartData = getRxData();
 80022b6:	f006 fb09 	bl	80088cc <getRxData>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <BasicUSART2_Callback+0x98>)
 80022c0:	701a      	strb	r2, [r3, #0]

	//Se define variable para verificar si una tarea de mayor proridad esta lista para Running
	BaseType_t pxHigherPriorityTaskWoken;
	(void) pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 80022c6:	4b21      	ldr	r3, [pc, #132]	; (800234c <BasicUSART2_Callback+0x9c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f001 fc6b 	bl	8003ba6 <xQueueIsQueueFullFromISR>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <BasicUSART2_Callback+0xa0>)
 80022d4:	6013      	str	r3, [r2, #0]

	//Por tanto si es True entonces aun no hay espacio
	if(xReturned != pdTRUE)
 80022d6:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <BasicUSART2_Callback+0xa0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d00f      	beq.n	80022fe <BasicUSART2_Callback+0x4e>
	{
		if(usartData != '\r' && usartData != '\n')
 80022de:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <BasicUSART2_Callback+0x98>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b0d      	cmp	r3, #13
 80022e4:	d01d      	beq.n	8002322 <BasicUSART2_Callback+0x72>
 80022e6:	4b18      	ldr	r3, [pc, #96]	; (8002348 <BasicUSART2_Callback+0x98>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b0a      	cmp	r3, #10
 80022ec:	d019      	beq.n	8002322 <BasicUSART2_Callback+0x72>
		{
			//Se envia caracter a la cola
			xQueueSendToBackFromISR(xQueue_InputData, (void *)&usartData, NULL);
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <BasicUSART2_Callback+0x9c>)
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	2300      	movs	r3, #0
 80022f4:	2200      	movs	r2, #0
 80022f6:	4914      	ldr	r1, [pc, #80]	; (8002348 <BasicUSART2_Callback+0x98>)
 80022f8:	f001 f90e 	bl	8003518 <xQueueGenericSendFromISR>
 80022fc:	e011      	b.n	8002322 <BasicUSART2_Callback+0x72>
		}
	}
	else
	{
		if(usartData == '#')
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <BasicUSART2_Callback+0x98>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b23      	cmp	r3, #35	; 0x23
 8002304:	d10d      	bne.n	8002322 <BasicUSART2_Callback+0x72>
		{
			//Se recibe mensaje de la cola
			xQueueReceiveFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <BasicUSART2_Callback+0x9c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2200      	movs	r2, #0
 800230c:	490e      	ldr	r1, [pc, #56]	; (8002348 <BasicUSART2_Callback+0x98>)
 800230e:	4618      	mov	r0, r3
 8002310:	f001 fa8c 	bl	800382c <xQueueReceiveFromISR>
			//Se envia mensaje a la cola
			xQueueSendToBackFromISR(xQueue_InputData, (void *)&usartData, NULL);
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <BasicUSART2_Callback+0x9c>)
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	2300      	movs	r3, #0
 800231a:	2200      	movs	r2, #0
 800231c:	490a      	ldr	r1, [pc, #40]	; (8002348 <BasicUSART2_Callback+0x98>)
 800231e:	f001 f8fb 	bl	8003518 <xQueueGenericSendFromISR>
		}
	}
	//Se envia notificacion al command Task
	if(usartData == '#')
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <BasicUSART2_Callback+0x98>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b23      	cmp	r3, #35	; 0x23
 8002328:	d10a      	bne.n	8002340 <BasicUSART2_Callback+0x90>
	{
		xTaskNotifyFromISR(xHandleTask_Commands, 0, eNoAction, NULL);
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <BasicUSART2_Callback+0xa4>)
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	2300      	movs	r3, #0
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	2300      	movs	r3, #0
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2300      	movs	r3, #0
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	f002 fc02 	bl	8004b44 <xTaskGenericNotifyFromISR>
	}
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000000 	.word	0x20000000
 800234c:	2000043c 	.word	0x2000043c
 8002350:	20000420 	.word	0x20000420
 8002354:	2000042c 	.word	0x2000042c

08002358 <BasicTimer3_Callback>:

//-------------------------Muestreo--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	ed2d 8b02 	vpush	{d8}
 800235e:	b085      	sub	sp, #20
 8002360:	af02      	add	r7, sp, #8
	//Se define variable para verificar si una tarea de mayor proridad esta lista para Running
	BaseType_t pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
	//----------------Accion a Realizar con el tiempo del TIMER--------------------
	//Leemos el angulo
	parameter_Posicion_Robot.grad_relativo = getAngle(&handler_MPUAccel_MPU6050, period_sampling, parameter_Posicion_Robot.grad_relativo, READ_GYRO_Z, gyro_offset);
 8002366:	4b80      	ldr	r3, [pc, #512]	; (8002568 <BasicTimer3_Callback+0x210>)
 8002368:	781c      	ldrb	r4, [r3, #0]
 800236a:	4b80      	ldr	r3, [pc, #512]	; (800256c <BasicTimer3_Callback+0x214>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	f7fe fc50 	bl	8000c18 <__aeabi_d2f>
 8002378:	4601      	mov	r1, r0
 800237a:	4b7d      	ldr	r3, [pc, #500]	; (8002570 <BasicTimer3_Callback+0x218>)
 800237c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002380:	2205      	movs	r2, #5
 8002382:	ee00 1a10 	vmov	s0, r1
 8002386:	4621      	mov	r1, r4
 8002388:	487a      	ldr	r0, [pc, #488]	; (8002574 <BasicTimer3_Callback+0x21c>)
 800238a:	f7ff fa0f 	bl	80017ac <getAngle>
 800238e:	ee10 3a10 	vmov	r3, s0
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe f8f0 	bl	8000578 <__aeabi_f2d>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4973      	ldr	r1, [pc, #460]	; (800256c <BasicTimer3_Callback+0x214>)
 800239e:	e9c1 2300 	strd	r2, r3, [r1]
	//Verificamos el modo
	sum_ang += parameter_Posicion_Robot.grad_relativo;
 80023a2:	4b75      	ldr	r3, [pc, #468]	; (8002578 <BasicTimer3_Callback+0x220>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe f8e6 	bl	8000578 <__aeabi_f2d>
 80023ac:	4b6f      	ldr	r3, [pc, #444]	; (800256c <BasicTimer3_Callback+0x214>)
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	f7fd ff83 	bl	80002bc <__adddf3>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	f7fe fc2b 	bl	8000c18 <__aeabi_d2f>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a6c      	ldr	r2, [pc, #432]	; (8002578 <BasicTimer3_Callback+0x220>)
 80023c6:	6013      	str	r3, [r2, #0]

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action>=timeAction_TIMER_Sampling)
 80023c8:	4b6c      	ldr	r3, [pc, #432]	; (800257c <BasicTimer3_Callback+0x224>)
 80023ca:	881a      	ldrh	r2, [r3, #0]
 80023cc:	4b6c      	ldr	r3, [pc, #432]	; (8002580 <BasicTimer3_Callback+0x228>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	f0c0 80b7 	bcc.w	8002544 <BasicTimer3_Callback+0x1ec>
	{
		//Calculamos el angulo promedio y la establecemis como el angulo relativo
		prom_ang = sum_ang/counting_action;
 80023d6:	4b68      	ldr	r3, [pc, #416]	; (8002578 <BasicTimer3_Callback+0x220>)
 80023d8:	edd3 6a00 	vldr	s13, [r3]
 80023dc:	4b67      	ldr	r3, [pc, #412]	; (800257c <BasicTimer3_Callback+0x224>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ec:	4b65      	ldr	r3, [pc, #404]	; (8002584 <BasicTimer3_Callback+0x22c>)
 80023ee:	edc3 7a00 	vstr	s15, [r3]
		parameter_Posicion_Robot.phi_relativo = (prom_ang*M_PI)/180;          //[rad]
 80023f2:	4b64      	ldr	r3, [pc, #400]	; (8002584 <BasicTimer3_Callback+0x22c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f8be 	bl	8000578 <__aeabi_f2d>
 80023fc:	a358      	add	r3, pc, #352	; (adr r3, 8002560 <BasicTimer3_Callback+0x208>)
 80023fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002402:	f7fe f911 	bl	8000628 <__aeabi_dmul>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4610      	mov	r0, r2
 800240c:	4619      	mov	r1, r3
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	4b5d      	ldr	r3, [pc, #372]	; (8002588 <BasicTimer3_Callback+0x230>)
 8002414:	f7fe fa32 	bl	800087c <__aeabi_ddiv>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4953      	ldr	r1, [pc, #332]	; (800256c <BasicTimer3_Callback+0x214>)
 800241e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		parameter_Posicion_Robot.phi_relativo = atan2(sin(parameter_Posicion_Robot.phi_relativo),cos(parameter_Posicion_Robot.phi_relativo));
 8002422:	4b52      	ldr	r3, [pc, #328]	; (800256c <BasicTimer3_Callback+0x214>)
 8002424:	ed93 7b02 	vldr	d7, [r3, #8]
 8002428:	eeb0 0a47 	vmov.f32	s0, s14
 800242c:	eef0 0a67 	vmov.f32	s1, s15
 8002430:	f00b fd46 	bl	800dec0 <sin>
 8002434:	eeb0 8a40 	vmov.f32	s16, s0
 8002438:	eef0 8a60 	vmov.f32	s17, s1
 800243c:	4b4b      	ldr	r3, [pc, #300]	; (800256c <BasicTimer3_Callback+0x214>)
 800243e:	ed93 7b02 	vldr	d7, [r3, #8]
 8002442:	eeb0 0a47 	vmov.f32	s0, s14
 8002446:	eef0 0a67 	vmov.f32	s1, s15
 800244a:	f00b fce5 	bl	800de18 <cos>
 800244e:	eeb0 7a40 	vmov.f32	s14, s0
 8002452:	eef0 7a60 	vmov.f32	s15, s1
 8002456:	eeb0 1a47 	vmov.f32	s2, s14
 800245a:	eef0 1a67 	vmov.f32	s3, s15
 800245e:	eeb0 0a48 	vmov.f32	s0, s16
 8002462:	eef0 0a68 	vmov.f32	s1, s17
 8002466:	f00b fd83 	bl	800df70 <atan2>
 800246a:	eeb0 7a40 	vmov.f32	s14, s0
 800246e:	eef0 7a60 	vmov.f32	s15, s1
 8002472:	4b3e      	ldr	r3, [pc, #248]	; (800256c <BasicTimer3_Callback+0x214>)
 8002474:	ed83 7b02 	vstr	d7, [r3, #8]
		//Calculamos la velocidad
		handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 8002478:	4b44      	ldr	r3, [pc, #272]	; (800258c <BasicTimer3_Callback+0x234>)
 800247a:	8b9b      	ldrh	r3, [r3, #28]
 800247c:	ee07 3a90 	vmov	s15, r3
 8002480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002484:	4b42      	ldr	r3, [pc, #264]	; (8002590 <BasicTimer3_Callback+0x238>)
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248e:	4b3f      	ldr	r3, [pc, #252]	; (800258c <BasicTimer3_Callback+0x234>)
 8002490:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 8002494:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <BasicTimer3_Callback+0x23c>)
 8002496:	8b9b      	ldrh	r3, [r3, #28]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024a0:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <BasicTimer3_Callback+0x240>)
 80024a2:	edd3 7a00 	vldr	s15, [r3]
 80024a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024aa:	4b3a      	ldr	r3, [pc, #232]	; (8002594 <BasicTimer3_Callback+0x23c>)
 80024ac:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/time_accion;      //[m/s]
 80024b0:	4b36      	ldr	r3, [pc, #216]	; (800258c <BasicTimer3_Callback+0x234>)
 80024b2:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <BasicTimer3_Callback+0x244>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c6:	4b31      	ldr	r3, [pc, #196]	; (800258c <BasicTimer3_Callback+0x234>)
 80024c8:	edc3 7a08 	vstr	s15, [r3, #32]
		handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/time_accion;      //[m/s]
 80024cc:	4b31      	ldr	r3, [pc, #196]	; (8002594 <BasicTimer3_Callback+0x23c>)
 80024ce:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80024d2:	4b32      	ldr	r3, [pc, #200]	; (800259c <BasicTimer3_Callback+0x244>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e2:	4b2c      	ldr	r3, [pc, #176]	; (8002594 <BasicTimer3_Callback+0x23c>)
 80024e4:	edc3 7a08 	vstr	s15, [r3, #32]
		//Reiniciamos el numero de conteos
		handler_Motor_R.parametersMotor.count = handler_Motor_L.parametersMotor.count = 0;
 80024e8:	4b28      	ldr	r3, [pc, #160]	; (800258c <BasicTimer3_Callback+0x234>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	839a      	strh	r2, [r3, #28]
 80024ee:	4b27      	ldr	r3, [pc, #156]	; (800258c <BasicTimer3_Callback+0x234>)
 80024f0:	8b9a      	ldrh	r2, [r3, #28]
 80024f2:	4b28      	ldr	r3, [pc, #160]	; (8002594 <BasicTimer3_Callback+0x23c>)
 80024f4:	839a      	strh	r2, [r3, #28]
		//Reiniciamos variable
		sum_ang = time_accumulated = counting_action = 0;
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <BasicTimer3_Callback+0x224>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	801a      	strh	r2, [r3, #0]
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <BasicTimer3_Callback+0x224>)
 80024fe:	881a      	ldrh	r2, [r3, #0]
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <BasicTimer3_Callback+0x248>)
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <BasicTimer3_Callback+0x248>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <BasicTimer3_Callback+0x220>)
 8002512:	edc3 7a00 	vstr	s15, [r3]
		//Notificamos a la tarea respectiva
		xTaskNotifyFromISR(xHandleTask_Commands, 0, eNoAction, &pxHigherPriorityTaskWoken);
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <BasicTimer3_Callback+0x24c>)
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	2300      	movs	r3, #0
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	2300      	movs	r3, #0
 8002524:	2200      	movs	r2, #0
 8002526:	2100      	movs	r1, #0
 8002528:	f002 fb0c 	bl	8004b44 <xTaskGenericNotifyFromISR>
	   	//Realizamos cambio de contexto
	   	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00e      	beq.n	8002550 <BasicTimer3_Callback+0x1f8>
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <BasicTimer3_Callback+0x250>)
 8002534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	f3bf 8f6f 	isb	sy
	}
	else{ counting_action++; }
}
 8002542:	e005      	b.n	8002550 <BasicTimer3_Callback+0x1f8>
	else{ counting_action++; }
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <BasicTimer3_Callback+0x224>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	3301      	adds	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <BasicTimer3_Callback+0x224>)
 800254e:	801a      	strh	r2, [r3, #0]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	ecbd 8b02 	vpop	{d8}
 800255a:	bd90      	pop	{r4, r7, pc}
 800255c:	f3af 8000 	nop.w
 8002560:	54442d18 	.word	0x54442d18
 8002564:	400921fb 	.word	0x400921fb
 8002568:	20000001 	.word	0x20000001
 800256c:	200003a0 	.word	0x200003a0
 8002570:	2000039c 	.word	0x2000039c
 8002574:	2000028c 	.word	0x2000028c
 8002578:	200003f0 	.word	0x200003f0
 800257c:	2000041c 	.word	0x2000041c
 8002580:	20000002 	.word	0x20000002
 8002584:	200003f4 	.word	0x200003f4
 8002588:	40668000 	.word	0x40668000
 800258c:	20000338 	.word	0x20000338
 8002590:	200003e8 	.word	0x200003e8
 8002594:	200002c4 	.word	0x200002c4
 8002598:	200003ec 	.word	0x200003ec
 800259c:	20000418 	.word	0x20000418
 80025a0:	2000041a 	.word	0x2000041a
 80025a4:	2000042c 	.word	0x2000042c
 80025a8:	e000ed04 	.word	0xe000ed04

080025ac <vTask_Menu>:


//-----------------------Inicio definicion funciones de las Task---------------------------
//------Tarea Menu-------
void vTask_Menu(void * pvParameters)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08e      	sub	sp, #56	; 0x38
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	6078      	str	r0, [r7, #4]
	//Variables para la recepcion
	uint32_t cmd_addr;
	//Variables de la separacin
	char cmd[20]= {0};
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
	int firtsParameter = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
	int secondParameter = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]

	//Mensaje inicial del menu
	const char* msg_menu = "=======================\n"
 80025ce:	4b2b      	ldr	r3, [pc, #172]	; (800267c <vTask_Menu+0xd0>)
 80025d0:	60fb      	str	r3, [r7, #12]
						   "=======================\n"
						   "go ---> inicia \n";

	while(1)
	{
		if(next_state == sMainMenu){ xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY); }
 80025d2:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <vTask_Menu+0xd4>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d108      	bne.n	80025ec <vTask_Menu+0x40>
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <vTask_Menu+0xd8>)
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	f107 010c 	add.w	r1, r7, #12
 80025e2:	2300      	movs	r3, #0
 80025e4:	f04f 32ff 	mov.w	r2, #4294967295
 80025e8:	f000 fe98 	bl	800331c <xQueueGenericSend>
		//Se espera por el comando a ejecutar
		xTaskNotifyWait(0,0,&cmd_addr, portMAX_DELAY);
 80025ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	9200      	str	r2, [sp, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f002 f942 	bl	8004884 <xTaskGenericNotifyWait>
		//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
		sscanf((char* ) cmd_addr, "%s %u %u", cmd, &firtsParameter, &secondParameter);
 8002600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002602:	4618      	mov	r0, r3
 8002604:	f107 0114 	add.w	r1, r7, #20
 8002608:	f107 0218 	add.w	r2, r7, #24
 800260c:	f107 0310 	add.w	r3, r7, #16
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	460b      	mov	r3, r1
 8002614:	491c      	ldr	r1, [pc, #112]	; (8002688 <vTask_Menu+0xdc>)
 8002616:	f007 fa03 	bl	8009a20 <siscanf>

		//Se verificamos si se tiene un solo caracter
		if(strcmp(cmd, "go") == 0)
 800261a:	f107 0318 	add.w	r3, r7, #24
 800261e:	491b      	ldr	r1, [pc, #108]	; (800268c <vTask_Menu+0xe0>)
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd fddd 	bl	80001e0 <strcmp>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10c      	bne.n	8002646 <vTask_Menu+0x9a>
		{
			//Notificamos a la tarea respectiva
			//xTaskNotify(xHandleTask_Go, (uint32_t) firtsParameter, eSetValueWithoutOverwrite);
			xTaskNotify(xHandleTask_Go, 0, eNoAction);
 800262c:	4b18      	ldr	r3, [pc, #96]	; (8002690 <vTask_Menu+0xe4>)
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	2300      	movs	r3, #0
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	2300      	movs	r3, #0
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	f002 f9a3 	bl	8004984 <xTaskGenericNotify>
			//Cambio de state
			next_state = sGo;
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <vTask_Menu+0xd4>)
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e7c5      	b.n	80025d2 <vTask_Menu+0x26>
		}
		else
		{
			//Se envia la opcion especificada
			xQueueSend(xQueue_Print, &msg_com_invalid, portMAX_DELAY);
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <vTask_Menu+0xd8>)
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	2300      	movs	r3, #0
 800264c:	f04f 32ff 	mov.w	r2, #4294967295
 8002650:	4910      	ldr	r1, [pc, #64]	; (8002694 <vTask_Menu+0xe8>)
 8002652:	f000 fe63 	bl	800331c <xQueueGenericSend>
			/*Se envia una notificacion previa con la finalidad de desbloquear
			 la tarea, la cual se bloquea para que se envie el mensaje por USART*/
			xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <vTask_Menu+0xec>)
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	2300      	movs	r3, #0
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2300      	movs	r3, #0
 8002660:	2200      	movs	r2, #0
 8002662:	2100      	movs	r1, #0
 8002664:	f002 f98e 	bl	8004984 <xTaskGenericNotify>
			xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8002668:	f04f 33ff 	mov.w	r3, #4294967295
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	2300      	movs	r3, #0
 8002670:	2200      	movs	r2, #0
 8002672:	2100      	movs	r1, #0
 8002674:	2000      	movs	r0, #0
 8002676:	f002 f905 	bl	8004884 <xTaskGenericNotifyWait>
		if(next_state == sMainMenu){ xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY); }
 800267a:	e7aa      	b.n	80025d2 <vTask_Menu+0x26>
 800267c:	08010238 	.word	0x08010238
 8002680:	20000444 	.word	0x20000444
 8002684:	20000438 	.word	0x20000438
 8002688:	08010294 	.word	0x08010294
 800268c:	080102a0 	.word	0x080102a0
 8002690:	20000430 	.word	0x20000430
 8002694:	20000010 	.word	0x20000010
 8002698:	20000424 	.word	0x20000424

0800269c <vTask_Print>:

}

//-------Tarea de Imprimir-------
void vTask_Print(void * pvParameters)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	while(1)
	{
		//Se espera por el puntero del mensaje
		xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 80026a4:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <vTask_Print+0x28>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f107 010c 	add.w	r1, r7, #12
 80026ac:	f04f 32ff 	mov.w	r2, #4294967295
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 ffdb 	bl	800366c <xQueueReceive>
		//Enviamos por puerto serial dicho mensaje
		writeMsg(&handler_USART_CommTerm, (char *) msg);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4619      	mov	r1, r3
 80026ba:	4803      	ldr	r0, [pc, #12]	; (80026c8 <vTask_Print+0x2c>)
 80026bc:	f006 f8e7 	bl	800888e <writeMsg>
		xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 80026c0:	e7f0      	b.n	80026a4 <vTask_Print+0x8>
 80026c2:	bf00      	nop
 80026c4:	20000438 	.word	0x20000438
 80026c8:	20000238 	.word	0x20000238

080026cc <vTask_Commands>:
	}
}

//-------Tarea de los comando-------
void vTask_Commands(void * pvParameters)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	6078      	str	r0, [r7, #4]
	BaseType_t notify_status = {0};
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
	char cmd[20];

	while(1)
	{
		//Se espera por la notificacion de la interrupcion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	2300      	movs	r3, #0
 80026e0:	2200      	movs	r2, #0
 80026e2:	2100      	movs	r1, #0
 80026e4:	2000      	movs	r0, #0
 80026e6:	f002 f8cd 	bl	8004884 <xTaskGenericNotifyWait>
 80026ea:	61f8      	str	r0, [r7, #28]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d1f2      	bne.n	80026d8 <vTask_Commands+0xc>
		{
			//Se procesa el comando recibido
			process_command(cmd);
 80026f2:	f107 0308 	add.w	r3, r7, #8
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f894 	bl	8002824 <process_command>
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80026fc:	e7ec      	b.n	80026d8 <vTask_Commands+0xc>
	...

08002700 <vTask_Go>:
	}
}

//------------Tarea Go---------------
void vTask_Go(void * pvParameters)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af02      	add	r7, sp, #8
 8002706:	6078      	str	r0, [r7, #4]
	//Definicion de variable de notificacion
	BaseType_t notify_status = {0};
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		//Se espera por la notificacion
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2300      	movs	r3, #0
 8002714:	2200      	movs	r2, #0
 8002716:	2100      	movs	r1, #0
 8002718:	2000      	movs	r0, #0
 800271a:	f002 f8b3 	bl	8004884 <xTaskGenericNotifyWait>
 800271e:	60f8      	str	r0, [r7, #12]
		//Si es verdadero se recibe una notificacion
		if(notify_status == pdTRUE)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d1f2      	bne.n	800270c <vTask_Go+0xc>
		{
			//Restablecimiento de coordenadas
			init_coordinates();
 8002726:	f000 fa07 	bl	8002b38 <init_coordinates>
			//Definicion de parametros
			change_position(&parameter_Path_Robot, 3000);
 800272a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800272e:	4804      	ldr	r0, [pc, #16]	; (8002740 <vTask_Go+0x40>)
 8002730:	f7ff f88a 	bl	8001848 <change_position>
			//Configuracion inicial linea recta
			straight_line(duttySetPoint);
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <vTask_Go+0x44>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f000 f8d9 	bl	80028f0 <straight_line>
		notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800273e:	e7e5      	b.n	800270c <vTask_Go+0xc>
 8002740:	20000448 	.word	0x20000448
 8002744:	20000008 	.word	0x20000008

08002748 <vTask_Stop>:
	}
}

//------------Tarea de Stop---------------
void vTask_Stop(void * pvParameters)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08c      	sub	sp, #48	; 0x30
 800274c:	af02      	add	r7, sp, #8
 800274e:	6078      	str	r0, [r7, #4]
	//Variables para la recepcion
	uint32_t cmd_addr;
	//Variables de la separacin
	char cmd[20]= {0};
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
	int firtsParameter = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
	int secondParameter = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]

	while(1)
	{
		//Se espera por el comando a ejecutar
		xTaskNotifyWait(0,0,&cmd_addr, portMAX_DELAY);
 800276a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276e:	f04f 32ff 	mov.w	r2, #4294967295
 8002772:	9200      	str	r2, [sp, #0]
 8002774:	2200      	movs	r2, #0
 8002776:	2100      	movs	r1, #0
 8002778:	2000      	movs	r0, #0
 800277a:	f002 f883 	bl	8004884 <xTaskGenericNotifyWait>
		//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
		sscanf((char* ) cmd_addr, "%s %u %u", cmd, &firtsParameter, &secondParameter);
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	4618      	mov	r0, r3
 8002782:	f107 010c 	add.w	r1, r7, #12
 8002786:	f107 0210 	add.w	r2, r7, #16
 800278a:	f107 0308 	add.w	r3, r7, #8
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	460b      	mov	r3, r1
 8002792:	4917      	ldr	r1, [pc, #92]	; (80027f0 <vTask_Stop+0xa8>)
 8002794:	f007 f944 	bl	8009a20 <siscanf>
		//Si es verdadero se recibe una notificacion
		if(strcmp(cmd, "stop") == 0)
 8002798:	f107 0310 	add.w	r3, r7, #16
 800279c:	4915      	ldr	r1, [pc, #84]	; (80027f4 <vTask_Stop+0xac>)
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fd1e 	bl	80001e0 <strcmp>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1df      	bne.n	800276a <vTask_Stop+0x22>
		{
			//Paramos los motores
			status_motor(RESET);
 80027aa:	2080      	movs	r0, #128	; 0x80
 80027ac:	f000 fa46 	bl	8002c3c <status_motor>
			//Restablecimiento de coordenadas
			init_coordinates();
 80027b0:	f000 f9c2 	bl	8002b38 <init_coordinates>
			//cambio de status
			next_state = sMainMenu;
 80027b4:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <vTask_Stop+0xb0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
			//Se envia la opcion especificada
			xQueueSend(xQueue_Print, &msg_stop, portMAX_DELAY);
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <vTask_Stop+0xb4>)
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	2300      	movs	r3, #0
 80027c0:	f04f 32ff 	mov.w	r2, #4294967295
 80027c4:	490e      	ldr	r1, [pc, #56]	; (8002800 <vTask_Stop+0xb8>)
 80027c6:	f000 fda9 	bl	800331c <xQueueGenericSend>
			/*Se envia una notificacion previa con la finalidad de desbloquear
			 la tarea, la cual se bloquea para que se envie el mensaje por USART*/
			xTaskNotify(xHandleTask_Menu, 0, eNoAction);
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <vTask_Stop+0xbc>)
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	2300      	movs	r3, #0
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2300      	movs	r3, #0
 80027d4:	2200      	movs	r2, #0
 80027d6:	2100      	movs	r1, #0
 80027d8:	f002 f8d4 	bl	8004984 <xTaskGenericNotify>
			xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 80027dc:	f04f 33ff 	mov.w	r3, #4294967295
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2300      	movs	r3, #0
 80027e4:	2200      	movs	r2, #0
 80027e6:	2100      	movs	r1, #0
 80027e8:	2000      	movs	r0, #0
 80027ea:	f002 f84b 	bl	8004884 <xTaskGenericNotifyWait>
		xTaskNotifyWait(0,0,&cmd_addr, portMAX_DELAY);
 80027ee:	e7bc      	b.n	800276a <vTask_Stop+0x22>
 80027f0:	08010294 	.word	0x08010294
 80027f4:	080102a4 	.word	0x080102a4
 80027f8:	20000444 	.word	0x20000444
 80027fc:	20000438 	.word	0x20000438
 8002800:	20000014 	.word	0x20000014
 8002804:	20000424 	.word	0x20000424

08002808 <led_state_callback>:


//-----------------------Inicio definicion funciones del Software Timer---------------------------

void led_state_callback(TimerHandle_t xTimer)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	//Cambio estado opuesto Led
	GPIOxTooglePin(&handler_GPIO_BlinkyPin);
 8002810:	4803      	ldr	r0, [pc, #12]	; (8002820 <led_state_callback+0x18>)
 8002812:	f004 ff80 	bl	8007716 <GPIOxTooglePin>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000214 	.word	0x20000214

08002824 <process_command>:

//-----------------------Inicio definicion funciones para la comunicacion---------------------------

//Funcion que ayuda en el procesamiento del comando
void process_command(char cmd[20])
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af02      	add	r7, sp, #8
 800282a:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f827 	bl	8002880 <extract_command>

	switch(next_state)
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <process_command+0x50>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <process_command+0x1c>
 800283a:	2b01      	cmp	r3, #1
 800283c:	d00a      	beq.n	8002854 <process_command+0x30>
 800283e:	e013      	b.n	8002868 <process_command+0x44>
	{
	case sMainMenu:
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu, (uint32_t) cmd, eSetValueWithoutOverwrite);
 8002840:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <process_command+0x54>)
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	2300      	movs	r3, #0
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2304      	movs	r3, #4
 800284c:	2100      	movs	r1, #0
 800284e:	f002 f899 	bl	8004984 <xTaskGenericNotify>
		break;
 8002852:	e00b      	b.n	800286c <process_command+0x48>
	case sGo:
		xTaskNotify(xHandleTask_Stop, (uint32_t) cmd, eSetValueWithoutOverwrite);
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <process_command+0x58>)
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	2300      	movs	r3, #0
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2304      	movs	r3, #4
 8002860:	2100      	movs	r1, #0
 8002862:	f002 f88f 	bl	8004984 <xTaskGenericNotify>
		break;
 8002866:	e001      	b.n	800286c <process_command+0x48>
	default:
		__NOP();
 8002868:	bf00      	nop
		break;
 800286a:	bf00      	nop
	}
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000444 	.word	0x20000444
 8002878:	20000424 	.word	0x20000424
 800287c:	20000434 	.word	0x20000434

08002880 <extract_command>:
//Funcion para obtener el comando
int extract_command(char cmd[20])
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	//Definicion de variables
	uint8_t item;
	uint8_t counter_j = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;
	//Se verifica si hay un nuevo mensaje
	status = uxQueueMessagesWaiting(xQueue_InputData);
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <extract_command+0x6c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f001 f85a 	bl	800394a <uxQueueMessagesWaiting>
 8002896:	4603      	mov	r3, r0
 8002898:	613b      	str	r3, [r7, #16]
	if(status == 0)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <extract_command+0x26>
	{
		return -1;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
 80028a4:	e01d      	b.n	80028e2 <extract_command+0x62>
	}
	do{
		//Recibimos un elemento y lo montamos en item
		status = xQueueReceive(xQueue_InputData, &item, 0);
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <extract_command+0x6c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f107 010f 	add.w	r1, r7, #15
 80028ae:	2200      	movs	r2, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fedb 	bl	800366c <xQueueReceive>
 80028b6:	6138      	str	r0, [r7, #16]
		if(status ==pdTRUE){
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d107      	bne.n	80028ce <extract_command+0x4e>
			//Vamos llenando el arreglo del comando
			cmd[counter_j++] = item;
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	75fa      	strb	r2, [r7, #23]
 80028c4:	461a      	mov	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	701a      	strb	r2, [r3, #0]
		}
	}while(item != '#');
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b23      	cmp	r3, #35	; 0x23
 80028d2:	d1e8      	bne.n	80028a6 <extract_command+0x26>

	//Agregamos el elemento nulo y ademas definimos el largo del mensaje
	cmd[counter_j - 1] = '\0';
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	4413      	add	r3, r2
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]

	return 0;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	2000043c 	.word	0x2000043c

080028f0 <straight_line>:


//------------------------------Inicio de la definicion de funciones del modo----------------------------------------
//------linea recta------
void straight_line(uint8_t dutty)   //a = [mm]
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
	//---------Calculo parametros de la linea recta---------
	calculation_parameter_distance(&parameter_Path_Robot);
 80028fa:	486f      	ldr	r0, [pc, #444]	; (8002ab8 <straight_line+0x1c8>)
 80028fc:	f7ff f838 	bl	8001970 <calculation_parameter_distance>
	//---------Configuracion coordenadas medidas---------
	//Coordenadas Globales
	parameter_Posicion_Robot.grad_grobal += ang_complementary;
 8002900:	4b6e      	ldr	r3, [pc, #440]	; (8002abc <straight_line+0x1cc>)
 8002902:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002906:	4b6e      	ldr	r3, [pc, #440]	; (8002ac0 <straight_line+0x1d0>)
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	f7fd fcd6 	bl	80002bc <__adddf3>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4969      	ldr	r1, [pc, #420]	; (8002abc <straight_line+0x1cc>)
 8002916:	e9c1 2304 	strd	r2, r3, [r1, #16]
	//Reiniciaos Coordenadas relativas
	parameter_Posicion_Robot.xr_position = parameter_Posicion_Robot.yr_position = 0;
 800291a:	4968      	ldr	r1, [pc, #416]	; (8002abc <straight_line+0x1cc>)
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8002928:	4b64      	ldr	r3, [pc, #400]	; (8002abc <straight_line+0x1cc>)
 800292a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800292e:	4963      	ldr	r1, [pc, #396]	; (8002abc <straight_line+0x1cc>)
 8002930:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.phi_relativo = 0;
 8002934:	4961      	ldr	r1, [pc, #388]	; (8002abc <straight_line+0x1cc>)
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.grad_relativo = 0;
 8002942:	495e      	ldr	r1, [pc, #376]	; (8002abc <straight_line+0x1cc>)
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9c1 2300 	strd	r2, r3, [r1]
	ang_for_Displament_ICR = 0;
 8002950:	495c      	ldr	r1, [pc, #368]	; (8002ac4 <straight_line+0x1d4>)
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	e9c1 2300 	strd	r2, r3, [r1]
	//---------Configuracion coordenadas teoricas---------
	parameter_Path_Robot.rotative_Grad_Relative = 0;
 800295e:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <straight_line+0x1c8>)
 8002960:	2200      	movs	r2, #0
 8002962:	639a      	str	r2, [r3, #56]	; 0x38
	//Calculos extra
	cos_cal = cos(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 8002964:	4b55      	ldr	r3, [pc, #340]	; (8002abc <straight_line+0x1cc>)
 8002966:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800296a:	a351      	add	r3, pc, #324	; (adr r3, 8002ab0 <straight_line+0x1c0>)
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	f7fd fe5a 	bl	8000628 <__aeabi_dmul>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	4b51      	ldr	r3, [pc, #324]	; (8002ac8 <straight_line+0x1d8>)
 8002982:	f7fd ff7b 	bl	800087c <__aeabi_ddiv>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	ec43 2b17 	vmov	d7, r2, r3
 800298e:	eeb0 0a47 	vmov.f32	s0, s14
 8002992:	eef0 0a67 	vmov.f32	s1, s15
 8002996:	f00b fa3f 	bl	800de18 <cos>
 800299a:	ec53 2b10 	vmov	r2, r3, d0
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f7fe f939 	bl	8000c18 <__aeabi_d2f>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4a48      	ldr	r2, [pc, #288]	; (8002acc <straight_line+0x1dc>)
 80029aa:	6013      	str	r3, [r2, #0]
	sin_cal = sin(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 80029ac:	4b43      	ldr	r3, [pc, #268]	; (8002abc <straight_line+0x1cc>)
 80029ae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80029b2:	a33f      	add	r3, pc, #252	; (adr r3, 8002ab0 <straight_line+0x1c0>)
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd fe36 	bl	8000628 <__aeabi_dmul>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <straight_line+0x1d8>)
 80029ca:	f7fd ff57 	bl	800087c <__aeabi_ddiv>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	ec43 2b17 	vmov	d7, r2, r3
 80029d6:	eeb0 0a47 	vmov.f32	s0, s14
 80029da:	eef0 0a67 	vmov.f32	s1, s15
 80029de:	f00b fa6f 	bl	800dec0 <sin>
 80029e2:	ec53 2b10 	vmov	r2, r3, d0
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	f7fe f915 	bl	8000c18 <__aeabi_d2f>
 80029ee:	4603      	mov	r3, r0
 80029f0:	4a37      	ldr	r2, [pc, #220]	; (8002ad0 <straight_line+0x1e0>)
 80029f2:	6013      	str	r3, [r2, #0]
	//-----------------PID-------------------------
	//Establecemos valores iniciales
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 80029f4:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <straight_line+0x1e4>)
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	4b35      	ldr	r3, [pc, #212]	; (8002ad4 <straight_line+0x1e4>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a34      	ldr	r2, [pc, #208]	; (8002ad4 <straight_line+0x1e4>)
 8002a02:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 8002a04:	4b33      	ldr	r3, [pc, #204]	; (8002ad4 <straight_line+0x1e4>)
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <straight_line+0x1e4>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a30      	ldr	r2, [pc, #192]	; (8002ad4 <straight_line+0x1e4>)
 8002a12:	6013      	str	r3, [r2, #0]
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 8002a14:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <straight_line+0x1e8>)
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	60da      	str	r2, [r3, #12]
 8002a1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ad8 <straight_line+0x1e8>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a2d      	ldr	r2, [pc, #180]	; (8002ad8 <straight_line+0x1e8>)
 8002a22:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 8002a24:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <straight_line+0x1e8>)
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <straight_line+0x1e8>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a29      	ldr	r2, [pc, #164]	; (8002ad8 <straight_line+0x1e8>)
 8002a32:	6013      	str	r3, [r2, #0]
	parameter_PID_distace.e = parameter_PID_distace.e_prev = parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <straight_line+0x1ec>)
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	4b27      	ldr	r3, [pc, #156]	; (8002adc <straight_line+0x1ec>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a26      	ldr	r2, [pc, #152]	; (8002adc <straight_line+0x1ec>)
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b25      	ldr	r3, [pc, #148]	; (8002adc <straight_line+0x1ec>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a24      	ldr	r2, [pc, #144]	; (8002adc <straight_line+0x1ec>)
 8002a4a:	60d3      	str	r3, [r2, #12]
 8002a4c:	4b23      	ldr	r3, [pc, #140]	; (8002adc <straight_line+0x1ec>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4a22      	ldr	r2, [pc, #136]	; (8002adc <straight_line+0x1ec>)
 8002a52:	6053      	str	r3, [r2, #4]
	//-------------Configruacion Modo--------------
	//Definimos el dutty inicial
	handler_Motor_L.configMotor.new_dutty = duttySetPoint;
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <straight_line+0x1f0>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	ee07 3a90 	vmov	s15, r3
 8002a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a60:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <straight_line+0x1e4>)
 8002a62:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	handler_Motor_R.configMotor.new_dutty = duttySetPoint;
 8002a66:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <straight_line+0x1f0>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	ee07 3a90 	vmov	s15, r3
 8002a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a72:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <straight_line+0x1e8>)
 8002a74:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	//Reiniciamos variables
	time_accumulated = counting_action = 0;
 8002a78:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <straight_line+0x1f4>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	801a      	strh	r2, [r3, #0]
 8002a7e:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <straight_line+0x1f4>)
 8002a80:	881a      	ldrh	r2, [r3, #0]
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <straight_line+0x1f8>)
 8002a84:	801a      	strh	r2, [r3, #0]
	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(1, dutty, dutty);
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	ee07 3a10 	vmov	s14, r3
 8002a96:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002a9a:	eef0 0a47 	vmov.f32	s1, s14
 8002a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	f000 f822 	bl	8002aec <config_mode>
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	54442d18 	.word	0x54442d18
 8002ab4:	400921fb 	.word	0x400921fb
 8002ab8:	20000448 	.word	0x20000448
 8002abc:	200003a0 	.word	0x200003a0
 8002ac0:	200004c0 	.word	0x200004c0
 8002ac4:	200004b8 	.word	0x200004b8
 8002ac8:	40668000 	.word	0x40668000
 8002acc:	200004b0 	.word	0x200004b0
 8002ad0:	200004b4 	.word	0x200004b4
 8002ad4:	20000338 	.word	0x20000338
 8002ad8:	200002c4 	.word	0x200002c4
 8002adc:	200003fc 	.word	0x200003fc
 8002ae0:	20000008 	.word	0x20000008
 8002ae4:	2000041c 	.word	0x2000041c
 8002ae8:	2000041a 	.word	0x2000041a

08002aec <config_mode>:


void config_mode(uint8_t status, float dutty_L, float dutty_R)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002af8:	edc7 0a01 	vstr	s1, [r7, #4]
 8002afc:	73fb      	strb	r3, [r7, #15]
	//Cargamos la configuracion
	config_motor(status, dutty_L, dutty_R, frequency_PWM_Motor); //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
 8002afe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <config_mode+0x48>)
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	eef0 0a67 	vmov.f32	s1, s15
 8002b18:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b1c:	ee17 1a10 	vmov	r1, s14
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f907 	bl	8002d34 <config_motor>
	//Iniciamos los motores
	status_motor(SET);
 8002b26:	2001      	movs	r0, #1
 8002b28:	f000 f888 	bl	8002c3c <status_motor>
}
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000006 	.word	0x20000006

08002b38 <init_coordinates>:

void init_coordinates(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
	//Reinicio de varibable
	ang_for_Displament_ICR = 0;
 8002b3c:	493b      	ldr	r1, [pc, #236]	; (8002c2c <init_coordinates+0xf4>)
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9c1 2300 	strd	r2, r3, [r1]
	ang_complementary = 0;
 8002b4a:	4939      	ldr	r1, [pc, #228]	; (8002c30 <init_coordinates+0xf8>)
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9c1 2300 	strd	r2, r3, [r1]
	//Reinicio de parametros de la structura de la posicion del robot
	parameter_Posicion_Robot.grad_grobal = 0; parameter_Posicion_Robot.grad_relativo = 0; parameter_Posicion_Robot.phi_relativo = 0;
 8002b58:	4936      	ldr	r1, [pc, #216]	; (8002c34 <init_coordinates+0xfc>)
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002b66:	4933      	ldr	r1, [pc, #204]	; (8002c34 <init_coordinates+0xfc>)
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	e9c1 2300 	strd	r2, r3, [r1]
 8002b74:	492f      	ldr	r1, [pc, #188]	; (8002c34 <init_coordinates+0xfc>)
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.xg_position = 0; parameter_Posicion_Robot.xg_position_inicial = 0; parameter_Posicion_Robot.xr_position = 0;
 8002b82:	492c      	ldr	r1, [pc, #176]	; (8002c34 <init_coordinates+0xfc>)
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002b90:	4928      	ldr	r1, [pc, #160]	; (8002c34 <init_coordinates+0xfc>)
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8002b9e:	4925      	ldr	r1, [pc, #148]	; (8002c34 <init_coordinates+0xfc>)
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.yg_position = 0; parameter_Posicion_Robot.yg_position_inicial = 0; parameter_Posicion_Robot.yr_position = 0;
 8002bac:	4921      	ldr	r1, [pc, #132]	; (8002c34 <init_coordinates+0xfc>)
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8002bba:	491e      	ldr	r1, [pc, #120]	; (8002c34 <init_coordinates+0xfc>)
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002bc8:	491a      	ldr	r1, [pc, #104]	; (8002c34 <init_coordinates+0xfc>)
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Reinicio de parametros de la structura de path
	parameter_Path_Robot.goal_Position_x = 0; parameter_Path_Robot.goal_Position_y = 0;
 8002bd6:	4918      	ldr	r1, [pc, #96]	; (8002c38 <init_coordinates+0x100>)
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8002be4:	4914      	ldr	r1, [pc, #80]	; (8002c38 <init_coordinates+0x100>)
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	parameter_Path_Robot.line_Distance = 0;
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <init_coordinates+0x100>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
	parameter_Path_Robot.rotative_Grad = 0; parameter_Path_Robot.rotative_Grad_Relative = 0;
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <init_coordinates+0x100>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <init_coordinates+0x100>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38
	parameter_Path_Robot.start_position_x = 0; parameter_Path_Robot.start_position_y = 0;
 8002c04:	490c      	ldr	r1, [pc, #48]	; (8002c38 <init_coordinates+0x100>)
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8002c12:	4909      	ldr	r1, [pc, #36]	; (8002c38 <init_coordinates+0x100>)
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	200004b8 	.word	0x200004b8
 8002c30:	200004c0 	.word	0x200004c0
 8002c34:	200003a0 	.word	0x200003a0
 8002c38:	20000448 	.word	0x20000448

08002c3c <status_motor>:
//-----------------------------Fin de la definicio de funciones del modo--------------------------------------------


//----------------------Iinicio definicion de las funciones de la Operacion Motor---------------------------------
void status_motor(uint8_t status)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d134      	bne.n	8002cb6 <status_motor+0x7a>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8002c4c:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <status_motor+0xec>)
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	2101      	movs	r1, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f005 f990 	bl	8007f78 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8002c58:	4b34      	ldr	r3, [pc, #208]	; (8002d2c <status_motor+0xf0>)
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f005 f98a 	bl	8007f78 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 8002c64:	4b30      	ldr	r3, [pc, #192]	; (8002d28 <status_motor+0xec>)
 8002c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c68:	4b2f      	ldr	r3, [pc, #188]	; (8002d28 <status_motor+0xec>)
 8002c6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	4619      	mov	r1, r3
 8002c76:	4610      	mov	r0, r2
 8002c78:	f004 fd22 	bl	80076c0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 8002c7c:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <status_motor+0xf0>)
 8002c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c80:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <status_motor+0xf0>)
 8002c82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4610      	mov	r0, r2
 8002c90:	f004 fd16 	bl	80076c0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 8002c94:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <status_motor+0xec>)
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f004 fd10 	bl	80076c0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 8002ca0:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <status_motor+0xf0>)
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	2180      	movs	r1, #128	; 0x80
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f004 fd0a 	bl	80076c0 <GPIO_writePin>
		//Activamos la interrupcion
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_ENABLE);
 8002cac:	2101      	movs	r1, #1
 8002cae:	4820      	ldr	r0, [pc, #128]	; (8002d30 <status_motor+0xf4>)
 8002cb0:	f003 fa28 	bl	8006104 <statusiInterruptionTimer>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Desactivamos interrupcion
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
	}
}
 8002cb4:	e033      	b.n	8002d1e <status_motor+0xe2>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <status_motor+0xec>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f005 f95b 	bl	8007f78 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <status_motor+0xf0>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f005 f955 	bl	8007f78 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 8002cce:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <status_motor+0xec>)
 8002cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <status_motor+0xec>)
 8002cd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	f004 fced 	bl	80076c0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <status_motor+0xf0>)
 8002ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <status_motor+0xf0>)
 8002cec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	f004 fce1 	bl	80076c0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <status_motor+0xec>)
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	2101      	movs	r1, #1
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 fcdb 	bl	80076c0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <status_motor+0xf0>)
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	2101      	movs	r1, #1
 8002d10:	4618      	mov	r0, r3
 8002d12:	f004 fcd5 	bl	80076c0 <GPIO_writePin>
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
 8002d16:	2100      	movs	r1, #0
 8002d18:	4805      	ldr	r0, [pc, #20]	; (8002d30 <status_motor+0xf4>)
 8002d1a:	f003 f9f3 	bl	8006104 <statusiInterruptionTimer>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000338 	.word	0x20000338
 8002d2c:	200002c4 	.word	0x200002c4
 8002d30:	2000038c 	.word	0x2000038c

08002d34 <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third)  //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002d42:	edc7 0a00 	vstr	s1, [r7]
 8002d46:	73fb      	strb	r3, [r7, #15]
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 8002d48:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <config_motor+0x6c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	839a      	strh	r2, [r3, #28]
	handler_Motor_L.parametersMotor.count = 0;
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <config_motor+0x70>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	839a      	strh	r2, [r3, #28]
	//Actualizamos el valor del dutty y frecuencia
	float value_period = 100000/third;
 8002d54:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002da8 <config_motor+0x74>
 8002d58:	ed97 7a00 	vldr	s14, [r7]
 8002d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d60:	edc7 7a05 	vstr	s15, [r7, #20]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 8002d64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d6c:	ee17 3a90 	vmov	r3, s15
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	4619      	mov	r1, r3
 8002d74:	480d      	ldr	r0, [pc, #52]	; (8002dac <config_motor+0x78>)
 8002d76:	f003 f9e5 	bl	8006144 <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, second);
 8002d7a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d7e:	4808      	ldr	r0, [pc, #32]	; (8002da0 <config_motor+0x6c>)
 8002d80:	f7fe fd4a 	bl	8001818 <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, firth);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	ee07 3a90 	vmov	s15, r3
 8002d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d92:	4804      	ldr	r0, [pc, #16]	; (8002da4 <config_motor+0x70>)
 8002d94:	f7fe fd40 	bl	8001818 <updateDuttyMotor>

}
 8002d98:	bf00      	nop
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200002c4 	.word	0x200002c4
 8002da4:	20000338 	.word	0x20000338
 8002da8:	47c35000 	.word	0x47c35000
 8002dac:	2000037c 	.word	0x2000037c

08002db0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002db0:	480d      	ldr	r0, [pc, #52]	; (8002de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002db2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002db4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002db8:	480c      	ldr	r0, [pc, #48]	; (8002dec <LoopForever+0x6>)
  ldr r1, =_edata
 8002dba:	490d      	ldr	r1, [pc, #52]	; (8002df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <LoopForever+0xe>)
  movs r3, #0
 8002dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dc0:	e002      	b.n	8002dc8 <LoopCopyDataInit>

08002dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dc6:	3304      	adds	r3, #4

08002dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dcc:	d3f9      	bcc.n	8002dc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dd0:	4c0a      	ldr	r4, [pc, #40]	; (8002dfc <LoopForever+0x16>)
  movs r3, #0
 8002dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd4:	e001      	b.n	8002dda <LoopFillZerobss>

08002dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd8:	3204      	adds	r2, #4

08002dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ddc:	d3fb      	bcc.n	8002dd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dde:	f005 ff45 	bl	8008c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002de2:	f7fe fe6d 	bl	8001ac0 <main>

08002de6 <LoopForever>:

LoopForever:
    b LoopForever
 8002de6:	e7fe      	b.n	8002de6 <LoopForever>
  ldr   r0, =_estack
 8002de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002df0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002df4:	08010a28 	.word	0x08010a28
  ldr r2, =_sbss
 8002df8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002dfc:	20013ae0 	.word	0x20013ae0

08002e00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e00:	e7fe      	b.n	8002e00 <ADC_IRQHandler>
	...

08002e04 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <ITM_SendChar+0x48>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <ITM_SendChar+0x48>)
 8002e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e18:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <ITM_SendChar+0x4c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a0c      	ldr	r2, [pc, #48]	; (8002e50 <ITM_SendChar+0x4c>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002e26:	bf00      	nop
 8002e28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f8      	beq.n	8002e28 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002e36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	6013      	str	r3, [r2, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000edfc 	.word	0xe000edfc
 8002e50:	e0000e00 	.word	0xe0000e00

08002e54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
	return 1;
 8002e58:	2301      	movs	r3, #1
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <_kill>:

int _kill(int pid, int sig)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e6e:	f005 fef7 	bl	8008c60 <__errno>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2216      	movs	r2, #22
 8002e76:	601a      	str	r2, [r3, #0]
	return -1;
 8002e78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <_exit>:

void _exit (int status)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff ffe7 	bl	8002e64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e96:	e7fe      	b.n	8002e96 <_exit+0x12>

08002e98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e00a      	b.n	8002ec0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002eaa:	f3af 8000 	nop.w
 8002eae:	4601      	mov	r1, r0
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	60ba      	str	r2, [r7, #8]
 8002eb6:	b2ca      	uxtb	r2, r1
 8002eb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	dbf0      	blt.n	8002eaa <_read+0x12>
	}

return len;
 8002ec8:	687b      	ldr	r3, [r7, #4]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	e009      	b.n	8002ef8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	60ba      	str	r2, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff89 	bl	8002e04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	dbf1      	blt.n	8002ee4 <_write+0x12>
	}
	return len;
 8002f00:	687b      	ldr	r3, [r7, #4]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <_close>:

int _close(int file)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
	return -1;
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f32:	605a      	str	r2, [r3, #4]
	return 0;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <_isatty>:

int _isatty(int file)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
	return 1;
 8002f4a:	2301      	movs	r3, #1
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
	return 0;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f7c:	4a14      	ldr	r2, [pc, #80]	; (8002fd0 <_sbrk+0x5c>)
 8002f7e:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <_sbrk+0x60>)
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f88:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <_sbrk+0x64>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d102      	bne.n	8002f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <_sbrk+0x64>)
 8002f92:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <_sbrk+0x68>)
 8002f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <_sbrk+0x64>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d207      	bcs.n	8002fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fa4:	f005 fe5c 	bl	8008c60 <__errno>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	220c      	movs	r2, #12
 8002fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fae:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb2:	e009      	b.n	8002fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <_sbrk+0x64>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fba:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <_sbrk+0x64>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	4a05      	ldr	r2, [pc, #20]	; (8002fd8 <_sbrk+0x64>)
 8002fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20020000 	.word	0x20020000
 8002fd4:	00000400 	.word	0x00000400
 8002fd8:	200004c8 	.word	0x200004c8
 8002fdc:	20013ae0 	.word	0x20013ae0

08002fe0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f103 0208 	add.w	r2, r3, #8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f103 0208 	add.w	r2, r3, #8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f103 0208 	add.w	r2, r3, #8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	601a      	str	r2, [r3, #0]
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d103      	bne.n	80030a2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e00c      	b.n	80030bc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3308      	adds	r3, #8
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e002      	b.n	80030b0 <vListInsert+0x2e>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d2f6      	bcs.n	80030aa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	601a      	str	r2, [r3, #0]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6892      	ldr	r2, [r2, #8]
 800310a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6852      	ldr	r2, [r2, #4]
 8003114:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	d103      	bne.n	8003128 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	1e5a      	subs	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10a      	bne.n	8003172 <xQueueGenericReset+0x2a>
        __asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	60bb      	str	r3, [r7, #8]
    }
 800316e:	bf00      	nop
 8003170:	e7fe      	b.n	8003170 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003172:	f002 fae9 	bl	8005748 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	68f9      	ldr	r1, [r7, #12]
 8003180:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	441a      	add	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	3b01      	subs	r3, #1
 80031a4:	68f9      	ldr	r1, [r7, #12]
 80031a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	441a      	add	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	22ff      	movs	r2, #255	; 0xff
 80031b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	22ff      	movs	r2, #255	; 0xff
 80031be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d114      	bne.n	80031f2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01a      	beq.n	8003206 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3310      	adds	r3, #16
 80031d4:	4618      	mov	r0, r3
 80031d6:	f001 f921 	bl	800441c <xTaskRemoveFromEventList>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d012      	beq.n	8003206 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <xQueueGenericReset+0xcc>)
 80031e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	e009      	b.n	8003206 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3310      	adds	r3, #16
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fef2 	bl	8002fe0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3324      	adds	r3, #36	; 0x24
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff feed 	bl	8002fe0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003206:	f002 facf 	bl	80057a8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800320a:	2301      	movs	r3, #1
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	e000ed04 	.word	0xe000ed04

08003218 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	; 0x30
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	4613      	mov	r3, r2
 8003224:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <xQueueGenericCreate+0x2a>
        __asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	61bb      	str	r3, [r7, #24]
    }
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <xQueueGenericCreate+0x48>
 8003252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	429a      	cmp	r2, r3
 800325e:	d101      	bne.n	8003264 <xQueueGenericCreate+0x4c>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <xQueueGenericCreate+0x4e>
 8003264:	2300      	movs	r3, #0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <xQueueGenericCreate+0x68>
        __asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	617b      	str	r3, [r7, #20]
    }
 800327c:	bf00      	nop
 800327e:	e7fe      	b.n	800327e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003286:	d90a      	bls.n	800329e <xQueueGenericCreate+0x86>
        __asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	613b      	str	r3, [r7, #16]
    }
 800329a:	bf00      	nop
 800329c:	e7fe      	b.n	800329c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	3350      	adds	r3, #80	; 0x50
 80032a2:	4618      	mov	r0, r3
 80032a4:	f002 fb72 	bl	800598c <pvPortMalloc>
 80032a8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	3350      	adds	r3, #80	; 0x50
 80032b8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032ba:	79fa      	ldrb	r2, [r7, #7]
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f805 	bl	80032d6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80032cc:	6a3b      	ldr	r3, [r7, #32]
    }
 80032ce:	4618      	mov	r0, r3
 80032d0:	3728      	adds	r7, #40	; 0x28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d103      	bne.n	80032f2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e002      	b.n	80032f8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003304:	2101      	movs	r1, #1
 8003306:	69b8      	ldr	r0, [r7, #24]
 8003308:	f7ff ff1e 	bl	8003148 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08e      	sub	sp, #56	; 0x38
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800332a:	2300      	movs	r3, #0
 800332c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <xQueueGenericSend+0x32>
        __asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d103      	bne.n	800335c <xQueueGenericSend+0x40>
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <xQueueGenericSend+0x44>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <xQueueGenericSend+0x46>
 8003360:	2300      	movs	r3, #0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10a      	bne.n	800337c <xQueueGenericSend+0x60>
        __asm volatile
 8003366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003378:	bf00      	nop
 800337a:	e7fe      	b.n	800337a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d103      	bne.n	800338a <xQueueGenericSend+0x6e>
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <xQueueGenericSend+0x72>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <xQueueGenericSend+0x74>
 800338e:	2300      	movs	r3, #0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <xQueueGenericSend+0x8e>
        __asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	623b      	str	r3, [r7, #32]
    }
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033aa:	f001 f9d3 	bl	8004754 <xTaskGetSchedulerState>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <xQueueGenericSend+0x9e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <xQueueGenericSend+0xa2>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <xQueueGenericSend+0xa4>
 80033be:	2300      	movs	r3, #0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10a      	bne.n	80033da <xQueueGenericSend+0xbe>
        __asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	61fb      	str	r3, [r7, #28]
    }
 80033d6:	bf00      	nop
 80033d8:	e7fe      	b.n	80033d8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80033da:	f002 f9b5 	bl	8005748 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <xQueueGenericSend+0xd4>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d129      	bne.n	8003444 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033f6:	f000 fac6 	bl	8003986 <prvCopyDataToQueue>
 80033fa:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	2b00      	cmp	r3, #0
 8003402:	d010      	beq.n	8003426 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	3324      	adds	r3, #36	; 0x24
 8003408:	4618      	mov	r0, r3
 800340a:	f001 f807 	bl	800441c <xTaskRemoveFromEventList>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d013      	beq.n	800343c <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003414:	4b3f      	ldr	r3, [pc, #252]	; (8003514 <xQueueGenericSend+0x1f8>)
 8003416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	e00a      	b.n	800343c <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	2b00      	cmp	r3, #0
 800342a:	d007      	beq.n	800343c <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800342c:	4b39      	ldr	r3, [pc, #228]	; (8003514 <xQueueGenericSend+0x1f8>)
 800342e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800343c:	f002 f9b4 	bl	80057a8 <vPortExitCritical>
                return pdPASS;
 8003440:	2301      	movs	r3, #1
 8003442:	e063      	b.n	800350c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d103      	bne.n	8003452 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800344a:	f002 f9ad 	bl	80057a8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800344e:	2300      	movs	r3, #0
 8003450:	e05c      	b.n	800350c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	4618      	mov	r0, r3
 800345e:	f001 f83f 	bl	80044e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003462:	2301      	movs	r3, #1
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003466:	f002 f99f 	bl	80057a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800346a:	f000 fdb9 	bl	8003fe0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800346e:	f002 f96b 	bl	8005748 <vPortEnterCritical>
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003478:	b25b      	sxtb	r3, r3
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d103      	bne.n	8003488 <xQueueGenericSend+0x16c>
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800348e:	b25b      	sxtb	r3, r3
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d103      	bne.n	800349e <xQueueGenericSend+0x182>
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800349e:	f002 f983 	bl	80057a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034a2:	1d3a      	adds	r2, r7, #4
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	4611      	mov	r1, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 f82e 	bl	800450c <xTaskCheckForTimeOut>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d124      	bne.n	8003500 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034b8:	f000 fb5d 	bl	8003b76 <prvIsQueueFull>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d018      	beq.n	80034f4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	3310      	adds	r3, #16
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 ff56 	bl	800437c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80034d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034d2:	f000 fae8 	bl	8003aa6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80034d6:	f000 fd91 	bl	8003ffc <xTaskResumeAll>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f47f af7c 	bne.w	80033da <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <xQueueGenericSend+0x1f8>)
 80034e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	e772      	b.n	80033da <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80034f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034f6:	f000 fad6 	bl	8003aa6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80034fa:	f000 fd7f 	bl	8003ffc <xTaskResumeAll>
 80034fe:	e76c      	b.n	80033da <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003502:	f000 fad0 	bl	8003aa6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003506:	f000 fd79 	bl	8003ffc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800350a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800350c:	4618      	mov	r0, r3
 800350e:	3738      	adds	r7, #56	; 0x38
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	e000ed04 	.word	0xe000ed04

08003518 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b090      	sub	sp, #64	; 0x40
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800352a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003542:	bf00      	nop
 8003544:	e7fe      	b.n	8003544 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <xQueueGenericSendFromISR+0x3c>
 800354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <xQueueGenericSendFromISR+0x40>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <xQueueGenericSendFromISR+0x42>
 8003558:	2300      	movs	r3, #0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10a      	bne.n	8003574 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003570:	bf00      	nop
 8003572:	e7fe      	b.n	8003572 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d103      	bne.n	8003582 <xQueueGenericSendFromISR+0x6a>
 800357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <xQueueGenericSendFromISR+0x6e>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <xQueueGenericSendFromISR+0x70>
 8003586:	2300      	movs	r3, #0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	623b      	str	r3, [r7, #32]
    }
 800359e:	bf00      	nop
 80035a0:	e7fe      	b.n	80035a0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035a2:	f002 f9b3 	bl	800590c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80035a6:	f3ef 8211 	mrs	r2, BASEPRI
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	61fa      	str	r2, [r7, #28]
 80035bc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80035be:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035c0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <xQueueGenericSendFromISR+0xbc>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d13e      	bne.n	8003652 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80035d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035ea:	f000 f9cc 	bl	8003986 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80035ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f6:	d112      	bne.n	800361e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d025      	beq.n	800364c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	3324      	adds	r3, #36	; 0x24
 8003604:	4618      	mov	r0, r3
 8003606:	f000 ff09 	bl	800441c <xTaskRemoveFromEventList>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01d      	beq.n	800364c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01a      	beq.n	800364c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e016      	b.n	800364c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800361e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003622:	2b7f      	cmp	r3, #127	; 0x7f
 8003624:	d10a      	bne.n	800363c <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362a:	f383 8811 	msr	BASEPRI, r3
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	617b      	str	r3, [r7, #20]
    }
 8003638:	bf00      	nop
 800363a:	e7fe      	b.n	800363a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800363c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003640:	3301      	adds	r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	b25a      	sxtb	r2, r3
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800364c:	2301      	movs	r3, #1
 800364e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003650:	e001      	b.n	8003656 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003652:	2300      	movs	r3, #0
 8003654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003658:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003660:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003664:	4618      	mov	r0, r3
 8003666:	3740      	adds	r7, #64	; 0x40
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08c      	sub	sp, #48	; 0x30
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003678:	2300      	movs	r3, #0
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10a      	bne.n	800369c <xQueueReceive+0x30>
        __asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	623b      	str	r3, [r7, #32]
    }
 8003698:	bf00      	nop
 800369a:	e7fe      	b.n	800369a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d103      	bne.n	80036aa <xQueueReceive+0x3e>
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <xQueueReceive+0x42>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <xQueueReceive+0x44>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <xQueueReceive+0x5e>
        __asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	61fb      	str	r3, [r7, #28]
    }
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036ca:	f001 f843 	bl	8004754 <xTaskGetSchedulerState>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <xQueueReceive+0x6e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <xQueueReceive+0x72>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <xQueueReceive+0x74>
 80036de:	2300      	movs	r3, #0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <xQueueReceive+0x8e>
        __asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	61bb      	str	r3, [r7, #24]
    }
 80036f6:	bf00      	nop
 80036f8:	e7fe      	b.n	80036f8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80036fa:	f002 f825 	bl	8005748 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	2b00      	cmp	r3, #0
 8003708:	d01f      	beq.n	800374a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800370e:	f000 f9a4 	bl	8003a5a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	1e5a      	subs	r2, r3, #1
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800371a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00f      	beq.n	8003742 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	3310      	adds	r3, #16
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fe78 	bl	800441c <xTaskRemoveFromEventList>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003732:	4b3d      	ldr	r3, [pc, #244]	; (8003828 <xQueueReceive+0x1bc>)
 8003734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003742:	f002 f831 	bl	80057a8 <vPortExitCritical>
                return pdPASS;
 8003746:	2301      	movs	r3, #1
 8003748:	e069      	b.n	800381e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d103      	bne.n	8003758 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003750:	f002 f82a 	bl	80057a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003754:	2300      	movs	r3, #0
 8003756:	e062      	b.n	800381e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800375e:	f107 0310 	add.w	r3, r7, #16
 8003762:	4618      	mov	r0, r3
 8003764:	f000 febc 	bl	80044e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003768:	2301      	movs	r3, #1
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800376c:	f002 f81c 	bl	80057a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003770:	f000 fc36 	bl	8003fe0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003774:	f001 ffe8 	bl	8005748 <vPortEnterCritical>
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800377e:	b25b      	sxtb	r3, r3
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d103      	bne.n	800378e <xQueueReceive+0x122>
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003794:	b25b      	sxtb	r3, r3
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379a:	d103      	bne.n	80037a4 <xQueueReceive+0x138>
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037a4:	f002 f800 	bl	80057a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037a8:	1d3a      	adds	r2, r7, #4
 80037aa:	f107 0310 	add.w	r3, r7, #16
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 feab 	bl	800450c <xTaskCheckForTimeOut>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d123      	bne.n	8003804 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037be:	f000 f9c4 	bl	8003b4a <prvIsQueueEmpty>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d017      	beq.n	80037f8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	3324      	adds	r3, #36	; 0x24
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4611      	mov	r1, r2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fdd3 	bl	800437c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80037d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037d8:	f000 f965 	bl	8003aa6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80037dc:	f000 fc0e 	bl	8003ffc <xTaskResumeAll>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d189      	bne.n	80036fa <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80037e6:	4b10      	ldr	r3, [pc, #64]	; (8003828 <xQueueReceive+0x1bc>)
 80037e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	e780      	b.n	80036fa <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80037f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037fa:	f000 f954 	bl	8003aa6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80037fe:	f000 fbfd 	bl	8003ffc <xTaskResumeAll>
 8003802:	e77a      	b.n	80036fa <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003806:	f000 f94e 	bl	8003aa6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800380a:	f000 fbf7 	bl	8003ffc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800380e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003810:	f000 f99b 	bl	8003b4a <prvIsQueueEmpty>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	f43f af6f 	beq.w	80036fa <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800381c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800381e:	4618      	mov	r0, r3
 8003820:	3730      	adds	r7, #48	; 0x30
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	e000ed04 	.word	0xe000ed04

0800382c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b090      	sub	sp, #64	; 0x40
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800383c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003854:	bf00      	nop
 8003856:	e7fe      	b.n	8003856 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d103      	bne.n	8003866 <xQueueReceiveFromISR+0x3a>
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <xQueueReceiveFromISR+0x3e>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <xQueueReceiveFromISR+0x40>
 800386a:	2300      	movs	r3, #0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10a      	bne.n	8003886 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003882:	bf00      	nop
 8003884:	e7fe      	b.n	8003884 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003886:	f002 f841 	bl	800590c <vPortValidateInterruptPriority>
        __asm volatile
 800388a:	f3ef 8211 	mrs	r2, BASEPRI
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	623a      	str	r2, [r7, #32]
 80038a0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80038a2:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d03e      	beq.n	8003930 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038c0:	f000 f8cb 	bl	8003a5a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	1e5a      	subs	r2, r3, #1
 80038c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80038cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d112      	bne.n	80038fc <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d025      	beq.n	800392a <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e0:	3310      	adds	r3, #16
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fd9a 	bl	800441c <xTaskRemoveFromEventList>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d01d      	beq.n	800392a <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01a      	beq.n	800392a <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	e016      	b.n	800392a <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80038fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003900:	2b7f      	cmp	r3, #127	; 0x7f
 8003902:	d10a      	bne.n	800391a <xQueueReceiveFromISR+0xee>
        __asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	61bb      	str	r3, [r7, #24]
    }
 8003916:	bf00      	nop
 8003918:	e7fe      	b.n	8003918 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800391a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800391e:	3301      	adds	r3, #1
 8003920:	b2db      	uxtb	r3, r3
 8003922:	b25a      	sxtb	r2, r3
 8003924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800392a:	2301      	movs	r3, #1
 800392c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800392e:	e001      	b.n	8003934 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8003930:	2300      	movs	r3, #0
 8003932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003936:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f383 8811 	msr	BASEPRI, r3
    }
 800393e:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003942:	4618      	mov	r0, r3
 8003944:	3740      	adds	r7, #64	; 0x40
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	60bb      	str	r3, [r7, #8]
    }
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800396e:	f001 feeb 	bl	8005748 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8003978:	f001 ff16 	bl	80057a8 <vPortExitCritical>

    return uxReturn;
 800397c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10d      	bne.n	80039c0 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d14d      	bne.n	8003a48 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 feed 	bl	8004790 <xTaskPriorityDisinherit>
 80039b6:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	e043      	b.n	8003a48 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d119      	bne.n	80039fa <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6858      	ldr	r0, [r3, #4]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	461a      	mov	r2, r3
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	f005 f96f 	bl	8008cb4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	441a      	add	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d32b      	bcc.n	8003a48 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	605a      	str	r2, [r3, #4]
 80039f8:	e026      	b.n	8003a48 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	68d8      	ldr	r0, [r3, #12]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	461a      	mov	r2, r3
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	f005 f955 	bl	8008cb4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	425b      	negs	r3, r3
 8003a14:	441a      	add	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d207      	bcs.n	8003a36 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	425b      	negs	r3, r3
 8003a30:	441a      	add	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d105      	bne.n	8003a48 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003a50:	697b      	ldr	r3, [r7, #20]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d018      	beq.n	8003a9e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	441a      	add	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d303      	bcc.n	8003a8e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68d9      	ldr	r1, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	461a      	mov	r2, r3
 8003a98:	6838      	ldr	r0, [r7, #0]
 8003a9a:	f005 f90b 	bl	8008cb4 <memcpy>
    }
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003aae:	f001 fe4b 	bl	8005748 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ab8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003aba:	e011      	b.n	8003ae0 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d012      	beq.n	8003aea <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3324      	adds	r3, #36	; 0x24
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fca7 	bl	800441c <xTaskRemoveFromEventList>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003ad4:	f000 fd80 	bl	80045d8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	dce9      	bgt.n	8003abc <prvUnlockQueue+0x16>
 8003ae8:	e000      	b.n	8003aec <prvUnlockQueue+0x46>
                        break;
 8003aea:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	22ff      	movs	r2, #255	; 0xff
 8003af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003af4:	f001 fe58 	bl	80057a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003af8:	f001 fe26 	bl	8005748 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b02:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b04:	e011      	b.n	8003b2a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d012      	beq.n	8003b34 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3310      	adds	r3, #16
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fc82 	bl	800441c <xTaskRemoveFromEventList>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003b1e:	f000 fd5b 	bl	80045d8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003b22:	7bbb      	ldrb	r3, [r7, #14]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	dce9      	bgt.n	8003b06 <prvUnlockQueue+0x60>
 8003b32:	e000      	b.n	8003b36 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003b34:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	22ff      	movs	r2, #255	; 0xff
 8003b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003b3e:	f001 fe33 	bl	80057a8 <vPortExitCritical>
}
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003b52:	f001 fdf9 	bl	8005748 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	e001      	b.n	8003b68 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003b68:	f001 fe1e 	bl	80057a8 <vPortExitCritical>

    return xReturn;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003b7e:	f001 fde3 	bl	8005748 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d102      	bne.n	8003b94 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	e001      	b.n	8003b98 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003b98:	f001 fe06 	bl	80057a8 <vPortExitCritical>

    return xReturn;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b087      	sub	sp, #28
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	60fb      	str	r3, [r7, #12]
    }
 8003bca:	bf00      	nop
 8003bcc:	e7fe      	b.n	8003bcc <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d102      	bne.n	8003be0 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	e001      	b.n	8003be4 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003be4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003be6:	4618      	mov	r0, r3
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	e014      	b.n	8003c2e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c04:	4a0f      	ldr	r2, [pc, #60]	; (8003c44 <vQueueAddToRegistry+0x50>)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10b      	bne.n	8003c28 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c10:	490c      	ldr	r1, [pc, #48]	; (8003c44 <vQueueAddToRegistry+0x50>)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003c1a:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <vQueueAddToRegistry+0x50>)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8003c26:	e006      	b.n	8003c36 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b07      	cmp	r3, #7
 8003c32:	d9e7      	bls.n	8003c04 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	200004cc 	.word	0x200004cc

08003c48 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003c58:	f001 fd76 	bl	8005748 <vPortEnterCritical>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c62:	b25b      	sxtb	r3, r3
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d103      	bne.n	8003c72 <vQueueWaitForMessageRestricted+0x2a>
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c78:	b25b      	sxtb	r3, r3
 8003c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7e:	d103      	bne.n	8003c88 <vQueueWaitForMessageRestricted+0x40>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c88:	f001 fd8e 	bl	80057a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	3324      	adds	r3, #36	; 0x24
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fb91 	bl	80043c4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003ca2:	6978      	ldr	r0, [r7, #20]
 8003ca4:	f7ff feff 	bl	8003aa6 <prvUnlockQueue>
    }
 8003ca8:	bf00      	nop
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08c      	sub	sp, #48	; 0x30
 8003cb4:	af04      	add	r7, sp, #16
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 fe61 	bl	800598c <pvPortMalloc>
 8003cca:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00e      	beq.n	8003cf0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003cd2:	2058      	movs	r0, #88	; 0x58
 8003cd4:	f001 fe5a 	bl	800598c <pvPortMalloc>
 8003cd8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce6:	e005      	b.n	8003cf4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003ce8:	6978      	ldr	r0, [r7, #20]
 8003cea:	f001 ff2f 	bl	8005b4c <vPortFree>
 8003cee:	e001      	b.n	8003cf4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d013      	beq.n	8003d22 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cfa:	88fa      	ldrh	r2, [r7, #6]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	9303      	str	r3, [sp, #12]
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	9302      	str	r3, [sp, #8]
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f80e 	bl	8003d32 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003d16:	69f8      	ldr	r0, [r7, #28]
 8003d18:	f000 f8a2 	bl	8003e60 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	e002      	b.n	8003d28 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d22:	f04f 33ff 	mov.w	r3, #4294967295
 8003d26:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003d28:	69bb      	ldr	r3, [r7, #24]
    }
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3720      	adds	r7, #32
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b088      	sub	sp, #32
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	461a      	mov	r2, r3
 8003d4a:	21a5      	movs	r1, #165	; 0xa5
 8003d4c:	f004 ffc0 	bl	8008cd0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f023 0307 	bic.w	r3, r3, #7
 8003d68:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <prvInitialiseNewTask+0x58>
        __asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	617b      	str	r3, [r7, #20]
    }
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01f      	beq.n	8003dd0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d90:	2300      	movs	r3, #0
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	e012      	b.n	8003dbc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	7819      	ldrb	r1, [r3, #0]
 8003d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	4413      	add	r3, r2
 8003da4:	3334      	adds	r3, #52	; 0x34
 8003da6:	460a      	mov	r2, r1
 8003da8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d006      	beq.n	8003dc4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3301      	adds	r3, #1
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b09      	cmp	r3, #9
 8003dc0:	d9e9      	bls.n	8003d96 <prvInitialiseNewTask+0x64>
 8003dc2:	e000      	b.n	8003dc6 <prvInitialiseNewTask+0x94>
            {
                break;
 8003dc4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003dce:	e003      	b.n	8003dd8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d901      	bls.n	8003de2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003dde:	2304      	movs	r3, #4
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dec:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	2200      	movs	r2, #0
 8003df2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	3304      	adds	r3, #4
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff f911 	bl	8003020 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	3318      	adds	r3, #24
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff f90c 	bl	8003020 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	f1c3 0205 	rsb	r2, r3, #5
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	3350      	adds	r3, #80	; 0x50
 8003e22:	2204      	movs	r2, #4
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f004 ff52 	bl	8008cd0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	3354      	adds	r3, #84	; 0x54
 8003e30:	2201      	movs	r2, #1
 8003e32:	2100      	movs	r1, #0
 8003e34:	4618      	mov	r0, r3
 8003e36:	f004 ff4b 	bl	8008cd0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	68f9      	ldr	r1, [r7, #12]
 8003e3e:	69b8      	ldr	r0, [r7, #24]
 8003e40:	f001 fb56 	bl	80054f0 <pxPortInitialiseStack>
 8003e44:	4602      	mov	r2, r0
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e54:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e56:	bf00      	nop
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003e68:	f001 fc6e 	bl	8005748 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003e6c:	4b2c      	ldr	r3, [pc, #176]	; (8003f20 <prvAddNewTaskToReadyList+0xc0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3301      	adds	r3, #1
 8003e72:	4a2b      	ldr	r2, [pc, #172]	; (8003f20 <prvAddNewTaskToReadyList+0xc0>)
 8003e74:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003e76:	4b2b      	ldr	r3, [pc, #172]	; (8003f24 <prvAddNewTaskToReadyList+0xc4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003e7e:	4a29      	ldr	r2, [pc, #164]	; (8003f24 <prvAddNewTaskToReadyList+0xc4>)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e84:	4b26      	ldr	r3, [pc, #152]	; (8003f20 <prvAddNewTaskToReadyList+0xc0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d110      	bne.n	8003eae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003e8c:	f000 fbc8 	bl	8004620 <prvInitialiseTaskLists>
 8003e90:	e00d      	b.n	8003eae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003e92:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <prvAddNewTaskToReadyList+0xc8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e9a:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <prvAddNewTaskToReadyList+0xc4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d802      	bhi.n	8003eae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003ea8:	4a1e      	ldr	r2, [pc, #120]	; (8003f24 <prvAddNewTaskToReadyList+0xc4>)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003eae:	4b1f      	ldr	r3, [pc, #124]	; (8003f2c <prvAddNewTaskToReadyList+0xcc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <prvAddNewTaskToReadyList+0xcc>)
 8003eb6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003eb8:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <prvAddNewTaskToReadyList+0xcc>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <prvAddNewTaskToReadyList+0xd0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <prvAddNewTaskToReadyList+0xd0>)
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <prvAddNewTaskToReadyList+0xd4>)
 8003ee0:	441a      	add	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4610      	mov	r0, r2
 8003eea:	f7ff f8a6 	bl	800303a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003eee:	f001 fc5b 	bl	80057a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <prvAddNewTaskToReadyList+0xc8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00e      	beq.n	8003f18 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <prvAddNewTaskToReadyList+0xc4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d207      	bcs.n	8003f18 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <prvAddNewTaskToReadyList+0xd8>)
 8003f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003f18:	bf00      	nop
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	200005e4 	.word	0x200005e4
 8003f24:	2000050c 	.word	0x2000050c
 8003f28:	200005f0 	.word	0x200005f0
 8003f2c:	20000600 	.word	0x20000600
 8003f30:	200005ec 	.word	0x200005ec
 8003f34:	20000510 	.word	0x20000510
 8003f38:	e000ed04 	.word	0xe000ed04

08003f3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003f42:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <vTaskStartScheduler+0x88>)
 8003f44:	9301      	str	r3, [sp, #4]
 8003f46:	2300      	movs	r3, #0
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	2282      	movs	r2, #130	; 0x82
 8003f4e:	491e      	ldr	r1, [pc, #120]	; (8003fc8 <vTaskStartScheduler+0x8c>)
 8003f50:	481e      	ldr	r0, [pc, #120]	; (8003fcc <vTaskStartScheduler+0x90>)
 8003f52:	f7ff fead 	bl	8003cb0 <xTaskCreate>
 8003f56:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d102      	bne.n	8003f64 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003f5e:	f000 ff59 	bl	8004e14 <xTimerCreateTimerTask>
 8003f62:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d116      	bne.n	8003f98 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	60bb      	str	r3, [r7, #8]
    }
 8003f7c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <vTaskStartScheduler+0x94>)
 8003f80:	f04f 32ff 	mov.w	r2, #4294967295
 8003f84:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003f86:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <vTaskStartScheduler+0x98>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <vTaskStartScheduler+0x9c>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003f92:	f001 fb37 	bl	8005604 <xPortStartScheduler>
 8003f96:	e00e      	b.n	8003fb6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9e:	d10a      	bne.n	8003fb6 <vTaskStartScheduler+0x7a>
        __asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	607b      	str	r3, [r7, #4]
    }
 8003fb2:	bf00      	nop
 8003fb4:	e7fe      	b.n	8003fb4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003fb6:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <vTaskStartScheduler+0xa0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000608 	.word	0x20000608
 8003fc8:	080102bc 	.word	0x080102bc
 8003fcc:	080045f1 	.word	0x080045f1
 8003fd0:	20000604 	.word	0x20000604
 8003fd4:	200005f0 	.word	0x200005f0
 8003fd8:	200005e8 	.word	0x200005e8
 8003fdc:	20000018 	.word	0x20000018

08003fe0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <vTaskSuspendAll+0x18>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	4a03      	ldr	r2, [pc, #12]	; (8003ff8 <vTaskSuspendAll+0x18>)
 8003fec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003fee:	bf00      	nop
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	2000060c 	.word	0x2000060c

08003ffc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800400a:	4b41      	ldr	r3, [pc, #260]	; (8004110 <xTaskResumeAll+0x114>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <xTaskResumeAll+0x2c>
        __asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	603b      	str	r3, [r7, #0]
    }
 8004024:	bf00      	nop
 8004026:	e7fe      	b.n	8004026 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004028:	f001 fb8e 	bl	8005748 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800402c:	4b38      	ldr	r3, [pc, #224]	; (8004110 <xTaskResumeAll+0x114>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3b01      	subs	r3, #1
 8004032:	4a37      	ldr	r2, [pc, #220]	; (8004110 <xTaskResumeAll+0x114>)
 8004034:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <xTaskResumeAll+0x114>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d161      	bne.n	8004102 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800403e:	4b35      	ldr	r3, [pc, #212]	; (8004114 <xTaskResumeAll+0x118>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d05d      	beq.n	8004102 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004046:	e02e      	b.n	80040a6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004048:	4b33      	ldr	r3, [pc, #204]	; (8004118 <xTaskResumeAll+0x11c>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3318      	adds	r3, #24
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff f84d 	bl	80030f4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3304      	adds	r3, #4
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff f848 	bl	80030f4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	2201      	movs	r2, #1
 800406a:	409a      	lsls	r2, r3
 800406c:	4b2b      	ldr	r3, [pc, #172]	; (800411c <xTaskResumeAll+0x120>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4313      	orrs	r3, r2
 8004072:	4a2a      	ldr	r2, [pc, #168]	; (800411c <xTaskResumeAll+0x120>)
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4a27      	ldr	r2, [pc, #156]	; (8004120 <xTaskResumeAll+0x124>)
 8004084:	441a      	add	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3304      	adds	r3, #4
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f7fe ffd4 	bl	800303a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004096:	4b23      	ldr	r3, [pc, #140]	; (8004124 <xTaskResumeAll+0x128>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	429a      	cmp	r2, r3
 800409e:	d302      	bcc.n	80040a6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80040a0:	4b21      	ldr	r3, [pc, #132]	; (8004128 <xTaskResumeAll+0x12c>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040a6:	4b1c      	ldr	r3, [pc, #112]	; (8004118 <xTaskResumeAll+0x11c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1cc      	bne.n	8004048 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80040b4:	f000 fb32 	bl	800471c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040b8:	4b1c      	ldr	r3, [pc, #112]	; (800412c <xTaskResumeAll+0x130>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d010      	beq.n	80040e6 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80040c4:	f000 f846 	bl	8004154 <xTaskIncrementTick>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80040ce:	4b16      	ldr	r3, [pc, #88]	; (8004128 <xTaskResumeAll+0x12c>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f1      	bne.n	80040c4 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80040e0:	4b12      	ldr	r3, [pc, #72]	; (800412c <xTaskResumeAll+0x130>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80040e6:	4b10      	ldr	r3, [pc, #64]	; (8004128 <xTaskResumeAll+0x12c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80040ee:	2301      	movs	r3, #1
 80040f0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80040f2:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <xTaskResumeAll+0x134>)
 80040f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004102:	f001 fb51 	bl	80057a8 <vPortExitCritical>

    return xAlreadyYielded;
 8004106:	68bb      	ldr	r3, [r7, #8]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	2000060c 	.word	0x2000060c
 8004114:	200005e4 	.word	0x200005e4
 8004118:	200005a4 	.word	0x200005a4
 800411c:	200005ec 	.word	0x200005ec
 8004120:	20000510 	.word	0x20000510
 8004124:	2000050c 	.word	0x2000050c
 8004128:	200005f8 	.word	0x200005f8
 800412c:	200005f4 	.word	0x200005f4
 8004130:	e000ed04 	.word	0xe000ed04

08004134 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <xTaskGetTickCount+0x1c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004140:	687b      	ldr	r3, [r7, #4]
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	200005e8 	.word	0x200005e8

08004154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800415e:	4b4e      	ldr	r3, [pc, #312]	; (8004298 <xTaskIncrementTick+0x144>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f040 808e 	bne.w	8004284 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004168:	4b4c      	ldr	r3, [pc, #304]	; (800429c <xTaskIncrementTick+0x148>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004170:	4a4a      	ldr	r2, [pc, #296]	; (800429c <xTaskIncrementTick+0x148>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d120      	bne.n	80041be <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800417c:	4b48      	ldr	r3, [pc, #288]	; (80042a0 <xTaskIncrementTick+0x14c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <xTaskIncrementTick+0x48>
        __asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	603b      	str	r3, [r7, #0]
    }
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <xTaskIncrementTick+0x46>
 800419c:	4b40      	ldr	r3, [pc, #256]	; (80042a0 <xTaskIncrementTick+0x14c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	4b40      	ldr	r3, [pc, #256]	; (80042a4 <xTaskIncrementTick+0x150>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a3e      	ldr	r2, [pc, #248]	; (80042a0 <xTaskIncrementTick+0x14c>)
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	4a3e      	ldr	r2, [pc, #248]	; (80042a4 <xTaskIncrementTick+0x150>)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <xTaskIncrementTick+0x154>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3301      	adds	r3, #1
 80041b6:	4a3c      	ldr	r2, [pc, #240]	; (80042a8 <xTaskIncrementTick+0x154>)
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	f000 faaf 	bl	800471c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <xTaskIncrementTick+0x158>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d348      	bcc.n	800425a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041c8:	4b35      	ldr	r3, [pc, #212]	; (80042a0 <xTaskIncrementTick+0x14c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d104      	bne.n	80041dc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d2:	4b36      	ldr	r3, [pc, #216]	; (80042ac <xTaskIncrementTick+0x158>)
 80041d4:	f04f 32ff 	mov.w	r2, #4294967295
 80041d8:	601a      	str	r2, [r3, #0]
                    break;
 80041da:	e03e      	b.n	800425a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041dc:	4b30      	ldr	r3, [pc, #192]	; (80042a0 <xTaskIncrementTick+0x14c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d203      	bcs.n	80041fc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80041f4:	4a2d      	ldr	r2, [pc, #180]	; (80042ac <xTaskIncrementTick+0x158>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041fa:	e02e      	b.n	800425a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	3304      	adds	r3, #4
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe ff77 	bl	80030f4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d004      	beq.n	8004218 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	3318      	adds	r3, #24
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe ff6e 	bl	80030f4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	2201      	movs	r2, #1
 800421e:	409a      	lsls	r2, r3
 8004220:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <xTaskIncrementTick+0x15c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4313      	orrs	r3, r2
 8004226:	4a22      	ldr	r2, [pc, #136]	; (80042b0 <xTaskIncrementTick+0x15c>)
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4a1f      	ldr	r2, [pc, #124]	; (80042b4 <xTaskIncrementTick+0x160>)
 8004238:	441a      	add	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	3304      	adds	r3, #4
 800423e:	4619      	mov	r1, r3
 8004240:	4610      	mov	r0, r2
 8004242:	f7fe fefa 	bl	800303a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424a:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <xTaskIncrementTick+0x164>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	429a      	cmp	r2, r3
 8004252:	d3b9      	bcc.n	80041c8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004254:	2301      	movs	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004258:	e7b6      	b.n	80041c8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800425a:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <xTaskIncrementTick+0x164>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004260:	4914      	ldr	r1, [pc, #80]	; (80042b4 <xTaskIncrementTick+0x160>)
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d901      	bls.n	8004276 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8004272:	2301      	movs	r3, #1
 8004274:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <xTaskIncrementTick+0x168>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800427e:	2301      	movs	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	e004      	b.n	800428e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004284:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <xTaskIncrementTick+0x16c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3301      	adds	r3, #1
 800428a:	4a0d      	ldr	r2, [pc, #52]	; (80042c0 <xTaskIncrementTick+0x16c>)
 800428c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800428e:	697b      	ldr	r3, [r7, #20]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	2000060c 	.word	0x2000060c
 800429c:	200005e8 	.word	0x200005e8
 80042a0:	2000059c 	.word	0x2000059c
 80042a4:	200005a0 	.word	0x200005a0
 80042a8:	200005fc 	.word	0x200005fc
 80042ac:	20000604 	.word	0x20000604
 80042b0:	200005ec 	.word	0x200005ec
 80042b4:	20000510 	.word	0x20000510
 80042b8:	2000050c 	.word	0x2000050c
 80042bc:	200005f8 	.word	0x200005f8
 80042c0:	200005f4 	.word	0x200005f4

080042c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042ca:	4b27      	ldr	r3, [pc, #156]	; (8004368 <vTaskSwitchContext+0xa4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80042d2:	4b26      	ldr	r3, [pc, #152]	; (800436c <vTaskSwitchContext+0xa8>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80042d8:	e03f      	b.n	800435a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80042da:	4b24      	ldr	r3, [pc, #144]	; (800436c <vTaskSwitchContext+0xa8>)
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e0:	4b23      	ldr	r3, [pc, #140]	; (8004370 <vTaskSwitchContext+0xac>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	fab3 f383 	clz	r3, r3
 80042ec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80042ee:	7afb      	ldrb	r3, [r7, #11]
 80042f0:	f1c3 031f 	rsb	r3, r3, #31
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	491f      	ldr	r1, [pc, #124]	; (8004374 <vTaskSwitchContext+0xb0>)
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <vTaskSwitchContext+0x5c>
        __asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	607b      	str	r3, [r7, #4]
    }
 800431c:	bf00      	nop
 800431e:	e7fe      	b.n	800431e <vTaskSwitchContext+0x5a>
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4a12      	ldr	r2, [pc, #72]	; (8004374 <vTaskSwitchContext+0xb0>)
 800432c:	4413      	add	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	3308      	adds	r3, #8
 8004342:	429a      	cmp	r2, r3
 8004344:	d104      	bne.n	8004350 <vTaskSwitchContext+0x8c>
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	605a      	str	r2, [r3, #4]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	4a08      	ldr	r2, [pc, #32]	; (8004378 <vTaskSwitchContext+0xb4>)
 8004358:	6013      	str	r3, [r2, #0]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	2000060c 	.word	0x2000060c
 800436c:	200005f8 	.word	0x200005f8
 8004370:	200005ec 	.word	0x200005ec
 8004374:	20000510 	.word	0x20000510
 8004378:	2000050c 	.word	0x2000050c

0800437c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	60fb      	str	r3, [r7, #12]
    }
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <vTaskPlaceOnEventList+0x44>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3318      	adds	r3, #24
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fe fe69 	bl	8003082 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043b0:	2101      	movs	r1, #1
 80043b2:	6838      	ldr	r0, [r7, #0]
 80043b4:	f000 fcc8 	bl	8004d48 <prvAddCurrentTaskToDelayedList>
}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	2000050c 	.word	0x2000050c

080043c4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	617b      	str	r3, [r7, #20]
    }
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <vTaskPlaceOnEventListRestricted+0x54>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3318      	adds	r3, #24
 80043f2:	4619      	mov	r1, r3
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7fe fe20 	bl	800303a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004400:	f04f 33ff 	mov.w	r3, #4294967295
 8004404:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	68b8      	ldr	r0, [r7, #8]
 800440a:	f000 fc9d 	bl	8004d48 <prvAddCurrentTaskToDelayedList>
    }
 800440e:	bf00      	nop
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	2000050c 	.word	0x2000050c

0800441c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	60fb      	str	r3, [r7, #12]
    }
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	3318      	adds	r3, #24
 800444c:	4618      	mov	r0, r3
 800444e:	f7fe fe51 	bl	80030f4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004452:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <xTaskRemoveFromEventList+0xac>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d11c      	bne.n	8004494 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	3304      	adds	r3, #4
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fe48 	bl	80030f4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	2201      	movs	r2, #1
 800446a:	409a      	lsls	r2, r3
 800446c:	4b17      	ldr	r3, [pc, #92]	; (80044cc <xTaskRemoveFromEventList+0xb0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4313      	orrs	r3, r2
 8004472:	4a16      	ldr	r2, [pc, #88]	; (80044cc <xTaskRemoveFromEventList+0xb0>)
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4a13      	ldr	r2, [pc, #76]	; (80044d0 <xTaskRemoveFromEventList+0xb4>)
 8004484:	441a      	add	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	3304      	adds	r3, #4
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f7fe fdd4 	bl	800303a <vListInsertEnd>
 8004492:	e005      	b.n	80044a0 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	3318      	adds	r3, #24
 8004498:	4619      	mov	r1, r3
 800449a:	480e      	ldr	r0, [pc, #56]	; (80044d4 <xTaskRemoveFromEventList+0xb8>)
 800449c:	f7fe fdcd 	bl	800303a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <xTaskRemoveFromEventList+0xbc>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d905      	bls.n	80044ba <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80044ae:	2301      	movs	r3, #1
 80044b0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <xTaskRemoveFromEventList+0xc0>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e001      	b.n	80044be <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80044be:	697b      	ldr	r3, [r7, #20]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	2000060c 	.word	0x2000060c
 80044cc:	200005ec 	.word	0x200005ec
 80044d0:	20000510 	.word	0x20000510
 80044d4:	200005a4 	.word	0x200005a4
 80044d8:	2000050c 	.word	0x2000050c
 80044dc:	200005f8 	.word	0x200005f8

080044e0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <vTaskInternalSetTimeOutState+0x24>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <vTaskInternalSetTimeOutState+0x28>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	605a      	str	r2, [r3, #4]
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	200005fc 	.word	0x200005fc
 8004508:	200005e8 	.word	0x200005e8

0800450c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	613b      	str	r3, [r7, #16]
    }
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10a      	bne.n	800454e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	60fb      	str	r3, [r7, #12]
    }
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800454e:	f001 f8fb 	bl	8005748 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004552:	4b1f      	ldr	r3, [pc, #124]	; (80045d0 <xTaskCheckForTimeOut+0xc4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456a:	d102      	bne.n	8004572 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800456c:	2300      	movs	r3, #0
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	e026      	b.n	80045c0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4b17      	ldr	r3, [pc, #92]	; (80045d4 <xTaskCheckForTimeOut+0xc8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d00a      	beq.n	8004594 <xTaskCheckForTimeOut+0x88>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	429a      	cmp	r2, r3
 8004586:	d305      	bcc.n	8004594 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004588:	2301      	movs	r3, #1
 800458a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e015      	b.n	80045c0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	429a      	cmp	r2, r3
 800459c:	d20b      	bcs.n	80045b6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	1ad2      	subs	r2, r2, r3
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7ff ff98 	bl	80044e0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	e004      	b.n	80045c0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80045bc:	2301      	movs	r3, #1
 80045be:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80045c0:	f001 f8f2 	bl	80057a8 <vPortExitCritical>

    return xReturn;
 80045c4:	69fb      	ldr	r3, [r7, #28]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	200005e8 	.word	0x200005e8
 80045d4:	200005fc 	.word	0x200005fc

080045d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80045dc:	4b03      	ldr	r3, [pc, #12]	; (80045ec <vTaskMissedYield+0x14>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
}
 80045e2:	bf00      	nop
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	200005f8 	.word	0x200005f8

080045f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80045f8:	f000 f852 	bl	80046a0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <prvIdleTask+0x28>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d9f9      	bls.n	80045f8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <prvIdleTask+0x2c>)
 8004606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004614:	e7f0      	b.n	80045f8 <prvIdleTask+0x8>
 8004616:	bf00      	nop
 8004618:	20000510 	.word	0x20000510
 800461c:	e000ed04 	.word	0xe000ed04

08004620 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004626:	2300      	movs	r3, #0
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	e00c      	b.n	8004646 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4a12      	ldr	r2, [pc, #72]	; (8004680 <prvInitialiseTaskLists+0x60>)
 8004638:	4413      	add	r3, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fcd0 	bl	8002fe0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3301      	adds	r3, #1
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b04      	cmp	r3, #4
 800464a:	d9ef      	bls.n	800462c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800464c:	480d      	ldr	r0, [pc, #52]	; (8004684 <prvInitialiseTaskLists+0x64>)
 800464e:	f7fe fcc7 	bl	8002fe0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004652:	480d      	ldr	r0, [pc, #52]	; (8004688 <prvInitialiseTaskLists+0x68>)
 8004654:	f7fe fcc4 	bl	8002fe0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004658:	480c      	ldr	r0, [pc, #48]	; (800468c <prvInitialiseTaskLists+0x6c>)
 800465a:	f7fe fcc1 	bl	8002fe0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800465e:	480c      	ldr	r0, [pc, #48]	; (8004690 <prvInitialiseTaskLists+0x70>)
 8004660:	f7fe fcbe 	bl	8002fe0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004664:	480b      	ldr	r0, [pc, #44]	; (8004694 <prvInitialiseTaskLists+0x74>)
 8004666:	f7fe fcbb 	bl	8002fe0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800466a:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <prvInitialiseTaskLists+0x78>)
 800466c:	4a05      	ldr	r2, [pc, #20]	; (8004684 <prvInitialiseTaskLists+0x64>)
 800466e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004670:	4b0a      	ldr	r3, [pc, #40]	; (800469c <prvInitialiseTaskLists+0x7c>)
 8004672:	4a05      	ldr	r2, [pc, #20]	; (8004688 <prvInitialiseTaskLists+0x68>)
 8004674:	601a      	str	r2, [r3, #0]
}
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20000510 	.word	0x20000510
 8004684:	20000574 	.word	0x20000574
 8004688:	20000588 	.word	0x20000588
 800468c:	200005a4 	.word	0x200005a4
 8004690:	200005b8 	.word	0x200005b8
 8004694:	200005d0 	.word	0x200005d0
 8004698:	2000059c 	.word	0x2000059c
 800469c:	200005a0 	.word	0x200005a0

080046a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046a6:	e019      	b.n	80046dc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80046a8:	f001 f84e 	bl	8005748 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ac:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <prvCheckTasksWaitingTermination+0x50>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fe fd1b 	bl	80030f4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80046be:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <prvCheckTasksWaitingTermination+0x54>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	4a0b      	ldr	r2, [pc, #44]	; (80046f4 <prvCheckTasksWaitingTermination+0x54>)
 80046c6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <prvCheckTasksWaitingTermination+0x58>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	4a0a      	ldr	r2, [pc, #40]	; (80046f8 <prvCheckTasksWaitingTermination+0x58>)
 80046d0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80046d2:	f001 f869 	bl	80057a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f810 	bl	80046fc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <prvCheckTasksWaitingTermination+0x58>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e1      	bne.n	80046a8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200005b8 	.word	0x200005b8
 80046f4:	200005e4 	.word	0x200005e4
 80046f8:	200005cc 	.word	0x200005cc

080046fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	4618      	mov	r0, r3
 800470a:	f001 fa1f 	bl	8005b4c <vPortFree>
                vPortFree( pxTCB );
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f001 fa1c 	bl	8005b4c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004714:	bf00      	nop
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <prvResetNextTaskUnblockTime+0x30>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800472a:	4b09      	ldr	r3, [pc, #36]	; (8004750 <prvResetNextTaskUnblockTime+0x34>)
 800472c:	f04f 32ff 	mov.w	r2, #4294967295
 8004730:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004732:	e005      	b.n	8004740 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <prvResetNextTaskUnblockTime+0x30>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a04      	ldr	r2, [pc, #16]	; (8004750 <prvResetNextTaskUnblockTime+0x34>)
 800473e:	6013      	str	r3, [r2, #0]
}
 8004740:	bf00      	nop
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	2000059c 	.word	0x2000059c
 8004750:	20000604 	.word	0x20000604

08004754 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800475a:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <xTaskGetSchedulerState+0x34>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d102      	bne.n	8004768 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004762:	2301      	movs	r3, #1
 8004764:	607b      	str	r3, [r7, #4]
 8004766:	e008      	b.n	800477a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004768:	4b08      	ldr	r3, [pc, #32]	; (800478c <xTaskGetSchedulerState+0x38>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d102      	bne.n	8004776 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004770:	2302      	movs	r3, #2
 8004772:	607b      	str	r3, [r7, #4]
 8004774:	e001      	b.n	800477a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004776:	2300      	movs	r3, #0
 8004778:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800477a:	687b      	ldr	r3, [r7, #4]
    }
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	200005f0 	.word	0x200005f0
 800478c:	2000060c 	.word	0x2000060c

08004790 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d063      	beq.n	800486e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80047a6:	4b34      	ldr	r3, [pc, #208]	; (8004878 <xTaskPriorityDisinherit+0xe8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d00a      	beq.n	80047c6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	60fb      	str	r3, [r7, #12]
    }
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10a      	bne.n	80047e4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	60bb      	str	r3, [r7, #8]
    }
 80047e0:	bf00      	nop
 80047e2:	e7fe      	b.n	80047e2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e8:	1e5a      	subs	r2, r3, #1
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d039      	beq.n	800486e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d135      	bne.n	800486e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	3304      	adds	r3, #4
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fc74 	bl	80030f4 <uxListRemove>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	2201      	movs	r2, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43da      	mvns	r2, r3
 800481e:	4b17      	ldr	r3, [pc, #92]	; (800487c <xTaskPriorityDisinherit+0xec>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4013      	ands	r3, r2
 8004824:	4a15      	ldr	r2, [pc, #84]	; (800487c <xTaskPriorityDisinherit+0xec>)
 8004826:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	f1c3 0205 	rsb	r2, r3, #5
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	2201      	movs	r2, #1
 8004842:	409a      	lsls	r2, r3
 8004844:	4b0d      	ldr	r3, [pc, #52]	; (800487c <xTaskPriorityDisinherit+0xec>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4313      	orrs	r3, r2
 800484a:	4a0c      	ldr	r2, [pc, #48]	; (800487c <xTaskPriorityDisinherit+0xec>)
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4a09      	ldr	r2, [pc, #36]	; (8004880 <xTaskPriorityDisinherit+0xf0>)
 800485c:	441a      	add	r2, r3
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	3304      	adds	r3, #4
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f7fe fbe8 	bl	800303a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800486a:	2301      	movs	r3, #1
 800486c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800486e:	697b      	ldr	r3, [r7, #20]
    }
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	2000050c 	.word	0x2000050c
 800487c:	200005ec 	.word	0x200005ec
 8004880:	20000510 	.word	0x20000510

08004884 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	613b      	str	r3, [r7, #16]
    }
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80048ae:	f000 ff4b 	bl	8005748 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80048b2:	4b32      	ldr	r3, [pc, #200]	; (800497c <xTaskGenericNotifyWait+0xf8>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4413      	add	r3, r2
 80048ba:	3354      	adds	r3, #84	; 0x54
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d022      	beq.n	800490a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80048c4:	4b2d      	ldr	r3, [pc, #180]	; (800497c <xTaskGenericNotifyWait+0xf8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	3214      	adds	r2, #20
 80048cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	43d2      	mvns	r2, r2
 80048d4:	4011      	ands	r1, r2
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	3214      	adds	r2, #20
 80048da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80048de:	4b27      	ldr	r3, [pc, #156]	; (800497c <xTaskGenericNotifyWait+0xf8>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	3354      	adds	r3, #84	; 0x54
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00b      	beq.n	800490a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048f2:	2101      	movs	r1, #1
 80048f4:	6a38      	ldr	r0, [r7, #32]
 80048f6:	f000 fa27 	bl	8004d48 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80048fa:	4b21      	ldr	r3, [pc, #132]	; (8004980 <xTaskGenericNotifyWait+0xfc>)
 80048fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800490a:	f000 ff4d 	bl	80057a8 <vPortExitCritical>

        taskENTER_CRITICAL();
 800490e:	f000 ff1b 	bl	8005748 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d007      	beq.n	8004928 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004918:	4b18      	ldr	r3, [pc, #96]	; (800497c <xTaskGenericNotifyWait+0xf8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	3214      	adds	r2, #20
 8004920:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004928:	4b14      	ldr	r3, [pc, #80]	; (800497c <xTaskGenericNotifyWait+0xf8>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	3354      	adds	r3, #84	; 0x54
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d002      	beq.n	8004940 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	e00e      	b.n	800495e <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004940:	4b0e      	ldr	r3, [pc, #56]	; (800497c <xTaskGenericNotifyWait+0xf8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	3214      	adds	r2, #20
 8004948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	43d2      	mvns	r2, r2
 8004950:	4011      	ands	r1, r2
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	3214      	adds	r2, #20
 8004956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800495a:	2301      	movs	r3, #1
 800495c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800495e:	4b07      	ldr	r3, [pc, #28]	; (800497c <xTaskGenericNotifyWait+0xf8>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	3354      	adds	r3, #84	; 0x54
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800496c:	f000 ff1c 	bl	80057a8 <vPortExitCritical>

        return xReturn;
 8004970:	697b      	ldr	r3, [r7, #20]
    }
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	2000050c 	.word	0x2000050c
 8004980:	e000ed04 	.word	0xe000ed04

08004984 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004984:	b580      	push	{r7, lr}
 8004986:	b08c      	sub	sp, #48	; 0x30
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8004992:	2301      	movs	r3, #1
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <xTaskGenericNotify+0x2e>
        __asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	623b      	str	r3, [r7, #32]
    }
 80049ae:	bf00      	nop
 80049b0:	e7fe      	b.n	80049b0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <xTaskGenericNotify+0x4a>
        __asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	61fb      	str	r3, [r7, #28]
    }
 80049ca:	bf00      	nop
 80049cc:	e7fe      	b.n	80049cc <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80049d2:	f000 feb9 	bl	8005748 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d006      	beq.n	80049ea <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	3214      	adds	r2, #20
 80049e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80049ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4413      	add	r3, r2
 80049f0:	3354      	adds	r3, #84	; 0x54
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80049f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	4413      	add	r3, r2
 80049fe:	3354      	adds	r3, #84	; 0x54
 8004a00:	2202      	movs	r2, #2
 8004a02:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d83b      	bhi.n	8004a82 <xTaskGenericNotify+0xfe>
 8004a0a:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <xTaskGenericNotify+0x8c>)
 8004a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a10:	08004aa1 	.word	0x08004aa1
 8004a14:	08004a25 	.word	0x08004a25
 8004a18:	08004a41 	.word	0x08004a41
 8004a1c:	08004a59 	.word	0x08004a59
 8004a20:	08004a67 	.word	0x08004a67
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	3214      	adds	r2, #20
 8004a2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	ea42 0103 	orr.w	r1, r2, r3
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	3214      	adds	r2, #20
 8004a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004a3e:	e032      	b.n	8004aa6 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	3214      	adds	r2, #20
 8004a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4a:	1c59      	adds	r1, r3, #1
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	3214      	adds	r2, #20
 8004a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004a56:	e026      	b.n	8004aa6 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	3214      	adds	r2, #20
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004a64:	e01f      	b.n	8004aa6 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004a66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d006      	beq.n	8004a7c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	3214      	adds	r2, #20
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004a7a:	e014      	b.n	8004aa6 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004a80:	e011      	b.n	8004aa6 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004a82:	4b2b      	ldr	r3, [pc, #172]	; (8004b30 <xTaskGenericNotify+0x1ac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00c      	beq.n	8004aa4 <xTaskGenericNotify+0x120>
        __asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	61bb      	str	r3, [r7, #24]
    }
 8004a9c:	bf00      	nop
 8004a9e:	e7fe      	b.n	8004a9e <xTaskGenericNotify+0x11a>
                    break;
 8004aa0:	bf00      	nop
 8004aa2:	e000      	b.n	8004aa6 <xTaskGenericNotify+0x122>

                    break;
 8004aa4:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d139      	bne.n	8004b22 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe fb1e 	bl	80030f4 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	2201      	movs	r2, #1
 8004abe:	409a      	lsls	r2, r3
 8004ac0:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <xTaskGenericNotify+0x1b0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	4a1b      	ldr	r2, [pc, #108]	; (8004b34 <xTaskGenericNotify+0x1b0>)
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <xTaskGenericNotify+0x1b4>)
 8004ad8:	441a      	add	r2, r3
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	3304      	adds	r3, #4
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f7fe faaa 	bl	800303a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <xTaskGenericNotify+0x180>
        __asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	617b      	str	r3, [r7, #20]
    }
 8004b00:	bf00      	nop
 8004b02:	e7fe      	b.n	8004b02 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <xTaskGenericNotify+0x1b8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d907      	bls.n	8004b22 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <xTaskGenericNotify+0x1bc>)
 8004b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004b22:	f000 fe41 	bl	80057a8 <vPortExitCritical>

        return xReturn;
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3730      	adds	r7, #48	; 0x30
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	200005e8 	.word	0x200005e8
 8004b34:	200005ec 	.word	0x200005ec
 8004b38:	20000510 	.word	0x20000510
 8004b3c:	2000050c 	.word	0x2000050c
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b090      	sub	sp, #64	; 0x40
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004b52:	2301      	movs	r3, #1
 8004b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004b8a:	bf00      	nop
 8004b8c:	e7fe      	b.n	8004b8c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b8e:	f000 febd 	bl	800590c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8004b96:	f3ef 8211 	mrs	r2, BASEPRI
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	627a      	str	r2, [r7, #36]	; 0x24
 8004bac:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8004bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d006      	beq.n	8004bc6 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	3214      	adds	r2, #20
 8004bbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4413      	add	r3, r2
 8004bcc:	3354      	adds	r3, #84	; 0x54
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4413      	add	r3, r2
 8004bda:	3354      	adds	r3, #84	; 0x54
 8004bdc:	2202      	movs	r2, #2
 8004bde:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d83b      	bhi.n	8004c5e <xTaskGenericNotifyFromISR+0x11a>
 8004be6:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <xTaskGenericNotifyFromISR+0xa8>)
 8004be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bec:	08004c7d 	.word	0x08004c7d
 8004bf0:	08004c01 	.word	0x08004c01
 8004bf4:	08004c1d 	.word	0x08004c1d
 8004bf8:	08004c35 	.word	0x08004c35
 8004bfc:	08004c43 	.word	0x08004c43
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	3214      	adds	r2, #20
 8004c06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	ea42 0103 	orr.w	r1, r2, r3
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	3214      	adds	r2, #20
 8004c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004c1a:	e032      	b.n	8004c82 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	3214      	adds	r2, #20
 8004c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c26:	1c59      	adds	r1, r3, #1
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	3214      	adds	r2, #20
 8004c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004c32:	e026      	b.n	8004c82 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	3214      	adds	r2, #20
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004c40:	e01f      	b.n	8004c82 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004c42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d006      	beq.n	8004c58 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	3214      	adds	r2, #20
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004c56:	e014      	b.n	8004c82 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8004c5c:	e011      	b.n	8004c82 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004c5e:	4b33      	ldr	r3, [pc, #204]	; (8004d2c <xTaskGenericNotifyFromISR+0x1e8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00c      	beq.n	8004c80 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	61fb      	str	r3, [r7, #28]
    }
 8004c78:	bf00      	nop
 8004c7a:	e7fe      	b.n	8004c7a <xTaskGenericNotifyFromISR+0x136>
                    break;
 8004c7c:	bf00      	nop
 8004c7e:	e000      	b.n	8004c82 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8004c80:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004c82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d145      	bne.n	8004d16 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	61bb      	str	r3, [r7, #24]
    }
 8004ca4:	bf00      	nop
 8004ca6:	e7fe      	b.n	8004ca6 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ca8:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <xTaskGenericNotifyFromISR+0x1ec>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d11c      	bne.n	8004cea <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fe fa1d 	bl	80030f4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	4b1c      	ldr	r3, [pc, #112]	; (8004d34 <xTaskGenericNotifyFromISR+0x1f0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	4a1a      	ldr	r2, [pc, #104]	; (8004d34 <xTaskGenericNotifyFromISR+0x1f0>)
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <xTaskGenericNotifyFromISR+0x1f4>)
 8004cda:	441a      	add	r2, r3
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	f7fe f9a9 	bl	800303a <vListInsertEnd>
 8004ce8:	e005      	b.n	8004cf6 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cec:	3318      	adds	r3, #24
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4812      	ldr	r0, [pc, #72]	; (8004d3c <xTaskGenericNotifyFromISR+0x1f8>)
 8004cf2:	f7fe f9a2 	bl	800303a <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfa:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <xTaskGenericNotifyFromISR+0x1fc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d908      	bls.n	8004d16 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <xTaskGenericNotifyFromISR+0x200>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d18:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f383 8811 	msr	BASEPRI, r3
    }
 8004d20:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8004d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8004d24:	4618      	mov	r0, r3
 8004d26:	3740      	adds	r7, #64	; 0x40
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	200005e8 	.word	0x200005e8
 8004d30:	2000060c 	.word	0x2000060c
 8004d34:	200005ec 	.word	0x200005ec
 8004d38:	20000510 	.word	0x20000510
 8004d3c:	200005a4 	.word	0x200005a4
 8004d40:	2000050c 	.word	0x2000050c
 8004d44:	200005f8 	.word	0x200005f8

08004d48 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004d52:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d58:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fe f9c8 	bl	80030f4 <uxListRemove>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d6a:	4b24      	ldr	r3, [pc, #144]	; (8004dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	2201      	movs	r2, #1
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	43da      	mvns	r2, r3
 8004d78:	4b21      	ldr	r3, [pc, #132]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	4a20      	ldr	r2, [pc, #128]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d80:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d10a      	bne.n	8004da0 <prvAddCurrentTaskToDelayedList+0x58>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d90:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	481a      	ldr	r0, [pc, #104]	; (8004e04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d9a:	f7fe f94e 	bl	800303a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004d9e:	e026      	b.n	8004dee <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4413      	add	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004da8:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d209      	bcs.n	8004dcc <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004db8:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	f7fe f95c 	bl	8003082 <vListInsert>
}
 8004dca:	e010      	b.n	8004dee <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f7fe f952 	bl	8003082 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004dde:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d202      	bcs.n	8004dee <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004de8:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	6013      	str	r3, [r2, #0]
}
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	200005e8 	.word	0x200005e8
 8004dfc:	2000050c 	.word	0x2000050c
 8004e00:	200005ec 	.word	0x200005ec
 8004e04:	200005d0 	.word	0x200005d0
 8004e08:	200005a0 	.word	0x200005a0
 8004e0c:	2000059c 	.word	0x2000059c
 8004e10:	20000604 	.word	0x20000604

08004e14 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004e1e:	f000 fb31 	bl	8005484 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004e22:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <xTimerCreateTimerTask+0x54>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00b      	beq.n	8004e42 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <xTimerCreateTimerTask+0x58>)
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	2302      	movs	r3, #2
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	2300      	movs	r3, #0
 8004e34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e38:	490d      	ldr	r1, [pc, #52]	; (8004e70 <xTimerCreateTimerTask+0x5c>)
 8004e3a:	480e      	ldr	r0, [pc, #56]	; (8004e74 <xTimerCreateTimerTask+0x60>)
 8004e3c:	f7fe ff38 	bl	8003cb0 <xTaskCreate>
 8004e40:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	603b      	str	r3, [r7, #0]
    }
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004e5e:	687b      	ldr	r3, [r7, #4]
    }
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000640 	.word	0x20000640
 8004e6c:	20000644 	.word	0x20000644
 8004e70:	080102c4 	.word	0x080102c4
 8004e74:	08005065 	.word	0x08005065

08004e78 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004e86:	202c      	movs	r0, #44	; 0x2c
 8004e88:	f000 fd80 	bl	800598c <pvPortMalloc>
 8004e8c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00d      	beq.n	8004eb0 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f805 	bl	8004eba <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8004eb0:	697b      	ldr	r3, [r7, #20]
        }
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b086      	sub	sp, #24
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	617b      	str	r3, [r7, #20]
    }
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01e      	beq.n	8004f28 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8004eea:	f000 facb 	bl	8005484 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	6a3a      	ldr	r2, [r7, #32]
 8004f04:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	3304      	adds	r3, #4
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe f888 	bl	8003020 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f1c:	f043 0304 	orr.w	r3, r3, #4
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8004f28:	bf00      	nop
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <xTimerGenericCommand+0x2e>
        __asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	623b      	str	r3, [r7, #32]
    }
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004f5e:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <xTimerGenericCommand+0x98>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d02a      	beq.n	8004fbc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b05      	cmp	r3, #5
 8004f76:	dc18      	bgt.n	8004faa <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f78:	f7ff fbec 	bl	8004754 <xTaskGetSchedulerState>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d109      	bne.n	8004f96 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f82:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <xTimerGenericCommand+0x98>)
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	f107 0114 	add.w	r1, r7, #20
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f8e:	f7fe f9c5 	bl	800331c <xQueueGenericSend>
 8004f92:	6278      	str	r0, [r7, #36]	; 0x24
 8004f94:	e012      	b.n	8004fbc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f96:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <xTimerGenericCommand+0x98>)
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	f107 0114 	add.w	r1, r7, #20
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f7fe f9bb 	bl	800331c <xQueueGenericSend>
 8004fa6:	6278      	str	r0, [r7, #36]	; 0x24
 8004fa8:	e008      	b.n	8004fbc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004faa:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <xTimerGenericCommand+0x98>)
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	f107 0114 	add.w	r1, r7, #20
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	f7fe faaf 	bl	8003518 <xQueueGenericSendFromISR>
 8004fba:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3728      	adds	r7, #40	; 0x28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000640 	.word	0x20000640

08004fcc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd6:	4b22      	ldr	r3, [pc, #136]	; (8005060 <prvProcessExpiredTimer+0x94>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fe f885 	bl	80030f4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d022      	beq.n	800503e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	699a      	ldr	r2, [r3, #24]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	18d1      	adds	r1, r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	6978      	ldr	r0, [r7, #20]
 8005006:	f000 f8d1 	bl	80051ac <prvInsertTimerInActiveList>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01f      	beq.n	8005050 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005010:	2300      	movs	r3, #0
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	2300      	movs	r3, #0
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	2100      	movs	r1, #0
 800501a:	6978      	ldr	r0, [r7, #20]
 800501c:	f7ff ff88 	bl	8004f30 <xTimerGenericCommand>
 8005020:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d113      	bne.n	8005050 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8005028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	60fb      	str	r3, [r7, #12]
    }
 800503a:	bf00      	nop
 800503c:	e7fe      	b.n	800503c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	b2da      	uxtb	r2, r3
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	6978      	ldr	r0, [r7, #20]
 8005056:	4798      	blx	r3
    }
 8005058:	bf00      	nop
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000638 	.word	0x20000638

08005064 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800506c:	f107 0308 	add.w	r3, r7, #8
 8005070:	4618      	mov	r0, r3
 8005072:	f000 f857 	bl	8005124 <prvGetNextExpireTime>
 8005076:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4619      	mov	r1, r3
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f803 	bl	8005088 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005082:	f000 f8d5 	bl	8005230 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005086:	e7f1      	b.n	800506c <prvTimerTask+0x8>

08005088 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005092:	f7fe ffa5 	bl	8003fe0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005096:	f107 0308 	add.w	r3, r7, #8
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f866 	bl	800516c <prvSampleTimeNow>
 80050a0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d130      	bne.n	800510a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <prvProcessTimerOrBlockTask+0x3c>
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d806      	bhi.n	80050c4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80050b6:	f7fe ffa1 	bl	8003ffc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050ba:	68f9      	ldr	r1, [r7, #12]
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff ff85 	bl	8004fcc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80050c2:	e024      	b.n	800510e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d008      	beq.n	80050dc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050ca:	4b13      	ldr	r3, [pc, #76]	; (8005118 <prvProcessTimerOrBlockTask+0x90>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <prvProcessTimerOrBlockTask+0x50>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <prvProcessTimerOrBlockTask+0x52>
 80050d8:	2300      	movs	r3, #0
 80050da:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050dc:	4b0f      	ldr	r3, [pc, #60]	; (800511c <prvProcessTimerOrBlockTask+0x94>)
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	4619      	mov	r1, r3
 80050ea:	f7fe fdad 	bl	8003c48 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80050ee:	f7fe ff85 	bl	8003ffc <xTaskResumeAll>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80050f8:	4b09      	ldr	r3, [pc, #36]	; (8005120 <prvProcessTimerOrBlockTask+0x98>)
 80050fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	f3bf 8f6f 	isb	sy
    }
 8005108:	e001      	b.n	800510e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800510a:	f7fe ff77 	bl	8003ffc <xTaskResumeAll>
    }
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	2000063c 	.word	0x2000063c
 800511c:	20000640 	.word	0x20000640
 8005120:	e000ed04 	.word	0xe000ed04

08005124 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800512c:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <prvGetNextExpireTime+0x44>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <prvGetNextExpireTime+0x16>
 8005136:	2201      	movs	r2, #1
 8005138:	e000      	b.n	800513c <prvGetNextExpireTime+0x18>
 800513a:	2200      	movs	r2, #0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d105      	bne.n	8005154 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005148:	4b07      	ldr	r3, [pc, #28]	; (8005168 <prvGetNextExpireTime+0x44>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	e001      	b.n	8005158 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005158:	68fb      	ldr	r3, [r7, #12]
    }
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	20000638 	.word	0x20000638

0800516c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005174:	f7fe ffde 	bl	8004134 <xTaskGetTickCount>
 8005178:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <prvSampleTimeNow+0x3c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	429a      	cmp	r2, r3
 8005182:	d205      	bcs.n	8005190 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005184:	f000 f91a 	bl	80053bc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e002      	b.n	8005196 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005196:	4a04      	ldr	r2, [pc, #16]	; (80051a8 <prvSampleTimeNow+0x3c>)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800519c:	68fb      	ldr	r3, [r7, #12]
    }
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	20000648 	.word	0x20000648

080051ac <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d812      	bhi.n	80051f8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	1ad2      	subs	r2, r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d302      	bcc.n	80051e6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80051e0:	2301      	movs	r3, #1
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	e01b      	b.n	800521e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051e6:	4b10      	ldr	r3, [pc, #64]	; (8005228 <prvInsertTimerInActiveList+0x7c>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3304      	adds	r3, #4
 80051ee:	4619      	mov	r1, r3
 80051f0:	4610      	mov	r0, r2
 80051f2:	f7fd ff46 	bl	8003082 <vListInsert>
 80051f6:	e012      	b.n	800521e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d206      	bcs.n	800520e <prvInsertTimerInActiveList+0x62>
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d302      	bcc.n	800520e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005208:	2301      	movs	r3, #1
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	e007      	b.n	800521e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800520e:	4b07      	ldr	r3, [pc, #28]	; (800522c <prvInsertTimerInActiveList+0x80>)
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3304      	adds	r3, #4
 8005216:	4619      	mov	r1, r3
 8005218:	4610      	mov	r0, r2
 800521a:	f7fd ff32 	bl	8003082 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800521e:	697b      	ldr	r3, [r7, #20]
    }
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	2000063c 	.word	0x2000063c
 800522c:	20000638 	.word	0x20000638

08005230 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005230:	b580      	push	{r7, lr}
 8005232:	b08c      	sub	sp, #48	; 0x30
 8005234:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005236:	e0ae      	b.n	8005396 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f2c0 80aa 	blt.w	8005394 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	3304      	adds	r3, #4
 8005250:	4618      	mov	r0, r3
 8005252:	f7fd ff4f 	bl	80030f4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005256:	1d3b      	adds	r3, r7, #4
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ff87 	bl	800516c <prvSampleTimeNow>
 800525e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b09      	cmp	r3, #9
 8005264:	f200 8097 	bhi.w	8005396 <prvProcessReceivedCommands+0x166>
 8005268:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <prvProcessReceivedCommands+0x40>)
 800526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526e:	bf00      	nop
 8005270:	08005299 	.word	0x08005299
 8005274:	08005299 	.word	0x08005299
 8005278:	08005299 	.word	0x08005299
 800527c:	0800530d 	.word	0x0800530d
 8005280:	08005321 	.word	0x08005321
 8005284:	0800536b 	.word	0x0800536b
 8005288:	08005299 	.word	0x08005299
 800528c:	08005299 	.word	0x08005299
 8005290:	0800530d 	.word	0x0800530d
 8005294:	08005321 	.word	0x08005321
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	18d1      	adds	r1, r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a3a      	ldr	r2, [r7, #32]
 80052b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052b8:	f7ff ff78 	bl	80051ac <prvInsertTimerInActiveList>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d069      	beq.n	8005396 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052c8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d05e      	beq.n	8005396 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	441a      	add	r2, r3
 80052e0:	2300      	movs	r3, #0
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	2300      	movs	r3, #0
 80052e6:	2100      	movs	r1, #0
 80052e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052ea:	f7ff fe21 	bl	8004f30 <xTimerGenericCommand>
 80052ee:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d14f      	bne.n	8005396 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	61bb      	str	r3, [r7, #24]
    }
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005312:	f023 0301 	bic.w	r3, r3, #1
 8005316:	b2da      	uxtb	r2, r3
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800531e:	e03a      	b.n	8005396 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	b2da      	uxtb	r2, r3
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	617b      	str	r3, [r7, #20]
    }
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	18d1      	adds	r1, r2, r3
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	6a3a      	ldr	r2, [r7, #32]
 8005362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005364:	f7ff ff22 	bl	80051ac <prvInsertTimerInActiveList>
                        break;
 8005368:	e015      	b.n	8005396 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d103      	bne.n	8005380 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800537a:	f000 fbe7 	bl	8005b4c <vPortFree>
 800537e:	e00a      	b.n	8005396 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005386:	f023 0301 	bic.w	r3, r3, #1
 800538a:	b2da      	uxtb	r2, r3
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005392:	e000      	b.n	8005396 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005394:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005396:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <prvProcessReceivedCommands+0x188>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f107 0108 	add.w	r1, r7, #8
 800539e:	2200      	movs	r2, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fe f963 	bl	800366c <xQueueReceive>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f47f af45 	bne.w	8005238 <prvProcessReceivedCommands+0x8>
        }
    }
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	3728      	adds	r7, #40	; 0x28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	20000640 	.word	0x20000640

080053bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053c2:	e048      	b.n	8005456 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053c4:	4b2d      	ldr	r3, [pc, #180]	; (800547c <prvSwitchTimerLists+0xc0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ce:	4b2b      	ldr	r3, [pc, #172]	; (800547c <prvSwitchTimerLists+0xc0>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3304      	adds	r3, #4
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fd fe89 	bl	80030f4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d02e      	beq.n	8005456 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4413      	add	r3, r2
 8005400:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	429a      	cmp	r2, r3
 8005408:	d90e      	bls.n	8005428 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005416:	4b19      	ldr	r3, [pc, #100]	; (800547c <prvSwitchTimerLists+0xc0>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3304      	adds	r3, #4
 800541e:	4619      	mov	r1, r3
 8005420:	4610      	mov	r0, r2
 8005422:	f7fd fe2e 	bl	8003082 <vListInsert>
 8005426:	e016      	b.n	8005456 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005428:	2300      	movs	r3, #0
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	2300      	movs	r3, #0
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	2100      	movs	r1, #0
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff fd7c 	bl	8004f30 <xTimerGenericCommand>
 8005438:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	603b      	str	r3, [r7, #0]
    }
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005456:	4b09      	ldr	r3, [pc, #36]	; (800547c <prvSwitchTimerLists+0xc0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1b1      	bne.n	80053c4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <prvSwitchTimerLists+0xc0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005466:	4b06      	ldr	r3, [pc, #24]	; (8005480 <prvSwitchTimerLists+0xc4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a04      	ldr	r2, [pc, #16]	; (800547c <prvSwitchTimerLists+0xc0>)
 800546c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800546e:	4a04      	ldr	r2, [pc, #16]	; (8005480 <prvSwitchTimerLists+0xc4>)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	6013      	str	r3, [r2, #0]
    }
 8005474:	bf00      	nop
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20000638 	.word	0x20000638
 8005480:	2000063c 	.word	0x2000063c

08005484 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005488:	f000 f95e 	bl	8005748 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800548c:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <prvCheckForValidListAndQueue+0x54>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11d      	bne.n	80054d0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005494:	4811      	ldr	r0, [pc, #68]	; (80054dc <prvCheckForValidListAndQueue+0x58>)
 8005496:	f7fd fda3 	bl	8002fe0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800549a:	4811      	ldr	r0, [pc, #68]	; (80054e0 <prvCheckForValidListAndQueue+0x5c>)
 800549c:	f7fd fda0 	bl	8002fe0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80054a0:	4b10      	ldr	r3, [pc, #64]	; (80054e4 <prvCheckForValidListAndQueue+0x60>)
 80054a2:	4a0e      	ldr	r2, [pc, #56]	; (80054dc <prvCheckForValidListAndQueue+0x58>)
 80054a4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80054a6:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <prvCheckForValidListAndQueue+0x64>)
 80054a8:	4a0d      	ldr	r2, [pc, #52]	; (80054e0 <prvCheckForValidListAndQueue+0x5c>)
 80054aa:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80054ac:	2200      	movs	r2, #0
 80054ae:	210c      	movs	r1, #12
 80054b0:	200a      	movs	r0, #10
 80054b2:	f7fd feb1 	bl	8003218 <xQueueGenericCreate>
 80054b6:	4603      	mov	r3, r0
 80054b8:	4a07      	ldr	r2, [pc, #28]	; (80054d8 <prvCheckForValidListAndQueue+0x54>)
 80054ba:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <prvCheckForValidListAndQueue+0x54>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054c4:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <prvCheckForValidListAndQueue+0x54>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4908      	ldr	r1, [pc, #32]	; (80054ec <prvCheckForValidListAndQueue+0x68>)
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fe fb92 	bl	8003bf4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80054d0:	f000 f96a 	bl	80057a8 <vPortExitCritical>
    }
 80054d4:	bf00      	nop
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	20000640 	.word	0x20000640
 80054dc:	20000610 	.word	0x20000610
 80054e0:	20000624 	.word	0x20000624
 80054e4:	20000638 	.word	0x20000638
 80054e8:	2000063c 	.word	0x2000063c
 80054ec:	080102cc 	.word	0x080102cc

080054f0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3b04      	subs	r3, #4
 8005500:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005508:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3b04      	subs	r3, #4
 800550e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f023 0201 	bic.w	r2, r3, #1
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3b04      	subs	r3, #4
 800551e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005520:	4a0c      	ldr	r2, [pc, #48]	; (8005554 <pxPortInitialiseStack+0x64>)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3b14      	subs	r3, #20
 800552a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3b04      	subs	r3, #4
 8005536:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f06f 0202 	mvn.w	r2, #2
 800553e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3b20      	subs	r3, #32
 8005544:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005546:	68fb      	ldr	r3, [r7, #12]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	08005559 	.word	0x08005559

08005558 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005562:	4b12      	ldr	r3, [pc, #72]	; (80055ac <prvTaskExitError+0x54>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	d00a      	beq.n	8005582 <prvTaskExitError+0x2a>
        __asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	60fb      	str	r3, [r7, #12]
    }
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <prvTaskExitError+0x28>
        __asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	60bb      	str	r3, [r7, #8]
    }
 8005594:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005596:	bf00      	nop
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0fc      	beq.n	8005598 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800559e:	bf00      	nop
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	2000001c 	.word	0x2000001c

080055b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80055b0:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <pxCurrentTCBConst2>)
 80055b2:	6819      	ldr	r1, [r3, #0]
 80055b4:	6808      	ldr	r0, [r1, #0]
 80055b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ba:	f380 8809 	msr	PSP, r0
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f380 8811 	msr	BASEPRI, r0
 80055ca:	4770      	bx	lr
 80055cc:	f3af 8000 	nop.w

080055d0 <pxCurrentTCBConst2>:
 80055d0:	2000050c 	.word	0x2000050c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop

080055d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80055d8:	4808      	ldr	r0, [pc, #32]	; (80055fc <prvPortStartFirstTask+0x24>)
 80055da:	6800      	ldr	r0, [r0, #0]
 80055dc:	6800      	ldr	r0, [r0, #0]
 80055de:	f380 8808 	msr	MSP, r0
 80055e2:	f04f 0000 	mov.w	r0, #0
 80055e6:	f380 8814 	msr	CONTROL, r0
 80055ea:	b662      	cpsie	i
 80055ec:	b661      	cpsie	f
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	df00      	svc	0
 80055f8:	bf00      	nop
 80055fa:	0000      	.short	0x0000
 80055fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop

08005604 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800560a:	4b46      	ldr	r3, [pc, #280]	; (8005724 <xPortStartScheduler+0x120>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a46      	ldr	r2, [pc, #280]	; (8005728 <xPortStartScheduler+0x124>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d10a      	bne.n	800562a <xPortStartScheduler+0x26>
        __asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	613b      	str	r3, [r7, #16]
    }
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800562a:	4b3e      	ldr	r3, [pc, #248]	; (8005724 <xPortStartScheduler+0x120>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a3f      	ldr	r2, [pc, #252]	; (800572c <xPortStartScheduler+0x128>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d10a      	bne.n	800564a <xPortStartScheduler+0x46>
        __asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	60fb      	str	r3, [r7, #12]
    }
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800564a:	4b39      	ldr	r3, [pc, #228]	; (8005730 <xPortStartScheduler+0x12c>)
 800564c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	22ff      	movs	r2, #255	; 0xff
 800565a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	b2db      	uxtb	r3, r3
 8005668:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800566c:	b2da      	uxtb	r2, r3
 800566e:	4b31      	ldr	r3, [pc, #196]	; (8005734 <xPortStartScheduler+0x130>)
 8005670:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005672:	4b31      	ldr	r3, [pc, #196]	; (8005738 <xPortStartScheduler+0x134>)
 8005674:	2207      	movs	r2, #7
 8005676:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005678:	e009      	b.n	800568e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800567a:	4b2f      	ldr	r3, [pc, #188]	; (8005738 <xPortStartScheduler+0x134>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3b01      	subs	r3, #1
 8005680:	4a2d      	ldr	r2, [pc, #180]	; (8005738 <xPortStartScheduler+0x134>)
 8005682:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	b2db      	uxtb	r3, r3
 800568c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005696:	2b80      	cmp	r3, #128	; 0x80
 8005698:	d0ef      	beq.n	800567a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800569a:	4b27      	ldr	r3, [pc, #156]	; (8005738 <xPortStartScheduler+0x134>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f1c3 0307 	rsb	r3, r3, #7
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d00a      	beq.n	80056bc <xPortStartScheduler+0xb8>
        __asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	60bb      	str	r3, [r7, #8]
    }
 80056b8:	bf00      	nop
 80056ba:	e7fe      	b.n	80056ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056bc:	4b1e      	ldr	r3, [pc, #120]	; (8005738 <xPortStartScheduler+0x134>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	021b      	lsls	r3, r3, #8
 80056c2:	4a1d      	ldr	r2, [pc, #116]	; (8005738 <xPortStartScheduler+0x134>)
 80056c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056c6:	4b1c      	ldr	r3, [pc, #112]	; (8005738 <xPortStartScheduler+0x134>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056ce:	4a1a      	ldr	r2, [pc, #104]	; (8005738 <xPortStartScheduler+0x134>)
 80056d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80056da:	4b18      	ldr	r3, [pc, #96]	; (800573c <xPortStartScheduler+0x138>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a17      	ldr	r2, [pc, #92]	; (800573c <xPortStartScheduler+0x138>)
 80056e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80056e6:	4b15      	ldr	r3, [pc, #84]	; (800573c <xPortStartScheduler+0x138>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a14      	ldr	r2, [pc, #80]	; (800573c <xPortStartScheduler+0x138>)
 80056ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80056f2:	f000 f8db 	bl	80058ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80056f6:	4b12      	ldr	r3, [pc, #72]	; (8005740 <xPortStartScheduler+0x13c>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80056fc:	f000 f8fa 	bl	80058f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005700:	4b10      	ldr	r3, [pc, #64]	; (8005744 <xPortStartScheduler+0x140>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a0f      	ldr	r2, [pc, #60]	; (8005744 <xPortStartScheduler+0x140>)
 8005706:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800570a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800570c:	f7ff ff64 	bl	80055d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005710:	f7fe fdd8 	bl	80042c4 <vTaskSwitchContext>
    prvTaskExitError();
 8005714:	f7ff ff20 	bl	8005558 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	e000ed00 	.word	0xe000ed00
 8005728:	410fc271 	.word	0x410fc271
 800572c:	410fc270 	.word	0x410fc270
 8005730:	e000e400 	.word	0xe000e400
 8005734:	2000064c 	.word	0x2000064c
 8005738:	20000650 	.word	0x20000650
 800573c:	e000ed20 	.word	0xe000ed20
 8005740:	2000001c 	.word	0x2000001c
 8005744:	e000ef34 	.word	0xe000ef34

08005748 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
        __asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	607b      	str	r3, [r7, #4]
    }
 8005760:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005762:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <vPortEnterCritical+0x58>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3301      	adds	r3, #1
 8005768:	4a0d      	ldr	r2, [pc, #52]	; (80057a0 <vPortEnterCritical+0x58>)
 800576a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800576c:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <vPortEnterCritical+0x58>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d10f      	bne.n	8005794 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005774:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <vPortEnterCritical+0x5c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <vPortEnterCritical+0x4c>
        __asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	603b      	str	r3, [r7, #0]
    }
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <vPortEnterCritical+0x4a>
    }
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	2000001c 	.word	0x2000001c
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80057ae:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <vPortExitCritical+0x50>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <vPortExitCritical+0x24>
        __asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	607b      	str	r3, [r7, #4]
    }
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80057cc:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <vPortExitCritical+0x50>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	4a09      	ldr	r2, [pc, #36]	; (80057f8 <vPortExitCritical+0x50>)
 80057d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80057d6:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <vPortExitCritical+0x50>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d105      	bne.n	80057ea <vPortExitCritical+0x42>
 80057de:	2300      	movs	r3, #0
 80057e0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	f383 8811 	msr	BASEPRI, r3
    }
 80057e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	2000001c 	.word	0x2000001c
 80057fc:	00000000 	.word	0x00000000

08005800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005800:	f3ef 8009 	mrs	r0, PSP
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	4b15      	ldr	r3, [pc, #84]	; (8005860 <pxCurrentTCBConst>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	f01e 0f10 	tst.w	lr, #16
 8005810:	bf08      	it	eq
 8005812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581a:	6010      	str	r0, [r2, #0]
 800581c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005824:	f380 8811 	msr	BASEPRI, r0
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f7fe fd48 	bl	80042c4 <vTaskSwitchContext>
 8005834:	f04f 0000 	mov.w	r0, #0
 8005838:	f380 8811 	msr	BASEPRI, r0
 800583c:	bc09      	pop	{r0, r3}
 800583e:	6819      	ldr	r1, [r3, #0]
 8005840:	6808      	ldr	r0, [r1, #0]
 8005842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005846:	f01e 0f10 	tst.w	lr, #16
 800584a:	bf08      	it	eq
 800584c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005850:	f380 8809 	msr	PSP, r0
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	f3af 8000 	nop.w

08005860 <pxCurrentTCBConst>:
 8005860:	2000050c 	.word	0x2000050c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop

08005868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
        __asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	607b      	str	r3, [r7, #4]
    }
 8005880:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005882:	f7fe fc67 	bl	8004154 <xTaskIncrementTick>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800588c:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <SysTick_Handler+0x40>)
 800588e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	2300      	movs	r3, #0
 8005896:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	f383 8811 	msr	BASEPRI, r3
    }
 800589e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	e000ed04 	.word	0xe000ed04

080058ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058b0:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <vPortSetupTimerInterrupt+0x34>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058b6:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <vPortSetupTimerInterrupt+0x38>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058bc:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <vPortSetupTimerInterrupt+0x3c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <vPortSetupTimerInterrupt+0x40>)
 80058c2:	fba2 2303 	umull	r2, r3, r2, r3
 80058c6:	099b      	lsrs	r3, r3, #6
 80058c8:	4a09      	ldr	r2, [pc, #36]	; (80058f0 <vPortSetupTimerInterrupt+0x44>)
 80058ca:	3b01      	subs	r3, #1
 80058cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058ce:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <vPortSetupTimerInterrupt+0x34>)
 80058d0:	2207      	movs	r2, #7
 80058d2:	601a      	str	r2, [r3, #0]
}
 80058d4:	bf00      	nop
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	e000e010 	.word	0xe000e010
 80058e4:	e000e018 	.word	0xe000e018
 80058e8:	2000000c 	.word	0x2000000c
 80058ec:	10624dd3 	.word	0x10624dd3
 80058f0:	e000e014 	.word	0xe000e014

080058f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80058f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005904 <vPortEnableVFP+0x10>
 80058f8:	6801      	ldr	r1, [r0, #0]
 80058fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058fe:	6001      	str	r1, [r0, #0]
 8005900:	4770      	bx	lr
 8005902:	0000      	.short	0x0000
 8005904:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005908:	bf00      	nop
 800590a:	bf00      	nop

0800590c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005912:	f3ef 8305 	mrs	r3, IPSR
 8005916:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b0f      	cmp	r3, #15
 800591c:	d914      	bls.n	8005948 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800591e:	4a17      	ldr	r2, [pc, #92]	; (800597c <vPortValidateInterruptPriority+0x70>)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005928:	4b15      	ldr	r3, [pc, #84]	; (8005980 <vPortValidateInterruptPriority+0x74>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	7afa      	ldrb	r2, [r7, #11]
 800592e:	429a      	cmp	r2, r3
 8005930:	d20a      	bcs.n	8005948 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	607b      	str	r3, [r7, #4]
    }
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005948:	4b0e      	ldr	r3, [pc, #56]	; (8005984 <vPortValidateInterruptPriority+0x78>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005950:	4b0d      	ldr	r3, [pc, #52]	; (8005988 <vPortValidateInterruptPriority+0x7c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d90a      	bls.n	800596e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	603b      	str	r3, [r7, #0]
    }
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <vPortValidateInterruptPriority+0x60>
    }
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	e000e3f0 	.word	0xe000e3f0
 8005980:	2000064c 	.word	0x2000064c
 8005984:	e000ed0c 	.word	0xe000ed0c
 8005988:	20000650 	.word	0x20000650

0800598c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	; 0x28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005994:	2300      	movs	r3, #0
 8005996:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005998:	f7fe fb22 	bl	8003fe0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800599c:	4b65      	ldr	r3, [pc, #404]	; (8005b34 <pvPortMalloc+0x1a8>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80059a4:	f000 f934 	bl	8005c10 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059a8:	4b63      	ldr	r3, [pc, #396]	; (8005b38 <pvPortMalloc+0x1ac>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4013      	ands	r3, r2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f040 80a7 	bne.w	8005b04 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d02d      	beq.n	8005a18 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80059bc:	2208      	movs	r2, #8
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d227      	bcs.n	8005a18 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80059c8:	2208      	movs	r2, #8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4413      	add	r3, r2
 80059ce:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d021      	beq.n	8005a1e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f023 0307 	bic.w	r3, r3, #7
 80059e0:	3308      	adds	r3, #8
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d214      	bcs.n	8005a12 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f023 0307 	bic.w	r3, r3, #7
 80059ee:	3308      	adds	r3, #8
 80059f0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d010      	beq.n	8005a1e <pvPortMalloc+0x92>
        __asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	617b      	str	r3, [r7, #20]
    }
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a16:	e002      	b.n	8005a1e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	607b      	str	r3, [r7, #4]
 8005a1c:	e000      	b.n	8005a20 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a1e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d06e      	beq.n	8005b04 <pvPortMalloc+0x178>
 8005a26:	4b45      	ldr	r3, [pc, #276]	; (8005b3c <pvPortMalloc+0x1b0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d869      	bhi.n	8005b04 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005a30:	4b43      	ldr	r3, [pc, #268]	; (8005b40 <pvPortMalloc+0x1b4>)
 8005a32:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005a34:	4b42      	ldr	r3, [pc, #264]	; (8005b40 <pvPortMalloc+0x1b4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a3a:	e004      	b.n	8005a46 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d903      	bls.n	8005a58 <pvPortMalloc+0xcc>
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f1      	bne.n	8005a3c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005a58:	4b36      	ldr	r3, [pc, #216]	; (8005b34 <pvPortMalloc+0x1a8>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d050      	beq.n	8005b04 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2208      	movs	r2, #8
 8005a68:	4413      	add	r3, r2
 8005a6a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d91f      	bls.n	8005ac4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <pvPortMalloc+0x120>
        __asm volatile
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	613b      	str	r3, [r7, #16]
    }
 8005aa8:	bf00      	nop
 8005aaa:	e7fe      	b.n	8005aaa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	1ad2      	subs	r2, r2, r3
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005abe:	69b8      	ldr	r0, [r7, #24]
 8005ac0:	f000 f908 	bl	8005cd4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ac4:	4b1d      	ldr	r3, [pc, #116]	; (8005b3c <pvPortMalloc+0x1b0>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	4a1b      	ldr	r2, [pc, #108]	; (8005b3c <pvPortMalloc+0x1b0>)
 8005ad0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ad2:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <pvPortMalloc+0x1b0>)
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b1b      	ldr	r3, [pc, #108]	; (8005b44 <pvPortMalloc+0x1b8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d203      	bcs.n	8005ae6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ade:	4b17      	ldr	r3, [pc, #92]	; (8005b3c <pvPortMalloc+0x1b0>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <pvPortMalloc+0x1b8>)
 8005ae4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <pvPortMalloc+0x1ac>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	431a      	orrs	r2, r3
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005afa:	4b13      	ldr	r3, [pc, #76]	; (8005b48 <pvPortMalloc+0x1bc>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3301      	adds	r3, #1
 8005b00:	4a11      	ldr	r2, [pc, #68]	; (8005b48 <pvPortMalloc+0x1bc>)
 8005b02:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005b04:	f7fe fa7a 	bl	8003ffc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <pvPortMalloc+0x19c>
        __asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	60fb      	str	r3, [r7, #12]
    }
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <pvPortMalloc+0x19a>
    return pvReturn;
 8005b28:	69fb      	ldr	r3, [r7, #28]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3728      	adds	r7, #40	; 0x28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	2001325c 	.word	0x2001325c
 8005b38:	20013270 	.word	0x20013270
 8005b3c:	20013260 	.word	0x20013260
 8005b40:	20013254 	.word	0x20013254
 8005b44:	20013264 	.word	0x20013264
 8005b48:	20013268 	.word	0x20013268

08005b4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d04d      	beq.n	8005bfa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005b5e:	2308      	movs	r3, #8
 8005b60:	425b      	negs	r3, r3
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4413      	add	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <vPortFree+0xb8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <vPortFree+0x44>
        __asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	60fb      	str	r3, [r7, #12]
    }
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <vPortFree+0x62>
        __asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	60bb      	str	r3, [r7, #8]
    }
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <vPortFree+0xb8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01e      	beq.n	8005bfa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d11a      	bne.n	8005bfa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	4b0e      	ldr	r3, [pc, #56]	; (8005c04 <vPortFree+0xb8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	401a      	ands	r2, r3
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005bd4:	f7fe fa04 	bl	8003fe0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <vPortFree+0xbc>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4413      	add	r3, r2
 8005be2:	4a09      	ldr	r2, [pc, #36]	; (8005c08 <vPortFree+0xbc>)
 8005be4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005be6:	6938      	ldr	r0, [r7, #16]
 8005be8:	f000 f874 	bl	8005cd4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005bec:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <vPortFree+0xc0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	4a06      	ldr	r2, [pc, #24]	; (8005c0c <vPortFree+0xc0>)
 8005bf4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005bf6:	f7fe fa01 	bl	8003ffc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005bfa:	bf00      	nop
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20013270 	.word	0x20013270
 8005c08:	20013260 	.word	0x20013260
 8005c0c:	2001326c 	.word	0x2001326c

08005c10 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005c1a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005c1c:	4b27      	ldr	r3, [pc, #156]	; (8005cbc <prvHeapInit+0xac>)
 8005c1e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f003 0307 	and.w	r3, r3, #7
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00c      	beq.n	8005c44 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3307      	adds	r3, #7
 8005c2e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0307 	bic.w	r3, r3, #7
 8005c36:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	4a1f      	ldr	r2, [pc, #124]	; (8005cbc <prvHeapInit+0xac>)
 8005c40:	4413      	add	r3, r2
 8005c42:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c48:	4a1d      	ldr	r2, [pc, #116]	; (8005cc0 <prvHeapInit+0xb0>)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005c4e:	4b1c      	ldr	r3, [pc, #112]	; (8005cc0 <prvHeapInit+0xb0>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	4413      	add	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005c5c:	2208      	movs	r2, #8
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	1a9b      	subs	r3, r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0307 	bic.w	r3, r3, #7
 8005c6a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4a15      	ldr	r2, [pc, #84]	; (8005cc4 <prvHeapInit+0xb4>)
 8005c70:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005c72:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <prvHeapInit+0xb4>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2200      	movs	r2, #0
 8005c78:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005c7a:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <prvHeapInit+0xb4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	1ad2      	subs	r2, r2, r3
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c90:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <prvHeapInit+0xb4>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	4a0a      	ldr	r2, [pc, #40]	; (8005cc8 <prvHeapInit+0xb8>)
 8005c9e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4a09      	ldr	r2, [pc, #36]	; (8005ccc <prvHeapInit+0xbc>)
 8005ca6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ca8:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <prvHeapInit+0xc0>)
 8005caa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cae:	601a      	str	r2, [r3, #0]
}
 8005cb0:	bf00      	nop
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	20000654 	.word	0x20000654
 8005cc0:	20013254 	.word	0x20013254
 8005cc4:	2001325c 	.word	0x2001325c
 8005cc8:	20013264 	.word	0x20013264
 8005ccc:	20013260 	.word	0x20013260
 8005cd0:	20013270 	.word	0x20013270

08005cd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005cdc:	4b28      	ldr	r3, [pc, #160]	; (8005d80 <prvInsertBlockIntoFreeList+0xac>)
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	e002      	b.n	8005ce8 <prvInsertBlockIntoFreeList+0x14>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d8f7      	bhi.n	8005ce2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d108      	bne.n	8005d16 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	441a      	add	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	441a      	add	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d118      	bne.n	8005d5c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <prvInsertBlockIntoFreeList+0xb0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d00d      	beq.n	8005d52 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	441a      	add	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	e008      	b.n	8005d64 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d52:	4b0c      	ldr	r3, [pc, #48]	; (8005d84 <prvInsertBlockIntoFreeList+0xb0>)
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e003      	b.n	8005d64 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d002      	beq.n	8005d72 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005d72:	bf00      	nop
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	20013254 	.word	0x20013254
 8005d84:	2001325c 	.word	0x2001325c

08005d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	db0b      	blt.n	8005db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	f003 021f 	and.w	r2, r3, #31
 8005da0:	4907      	ldr	r1, [pc, #28]	; (8005dc0 <__NVIC_EnableIRQ+0x38>)
 8005da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	2001      	movs	r0, #1
 8005daa:	fa00 f202 	lsl.w	r2, r0, r2
 8005dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	e000e100 	.word	0xe000e100

08005dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	6039      	str	r1, [r7, #0]
 8005dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	db0a      	blt.n	8005dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	490c      	ldr	r1, [pc, #48]	; (8005e10 <__NVIC_SetPriority+0x4c>)
 8005dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de2:	0112      	lsls	r2, r2, #4
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	440b      	add	r3, r1
 8005de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dec:	e00a      	b.n	8005e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	4908      	ldr	r1, [pc, #32]	; (8005e14 <__NVIC_SetPriority+0x50>)
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	3b04      	subs	r3, #4
 8005dfc:	0112      	lsls	r2, r2, #4
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	440b      	add	r3, r1
 8005e02:	761a      	strb	r2, [r3, #24]
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	e000e100 	.word	0xe000e100
 8005e14:	e000ed00 	.word	0xe000ed00

08005e18 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e28:	d10a      	bne.n	8005e40 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8005e2a:	4b62      	ldr	r3, [pc, #392]	; (8005fb4 <BasicTimer_Config+0x19c>)
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	4a61      	ldr	r2, [pc, #388]	; (8005fb4 <BasicTimer_Config+0x19c>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	4a5f      	ldr	r2, [pc, #380]	; (8005fb8 <BasicTimer_Config+0x1a0>)
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	e02e      	b.n	8005e9e <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4a5d      	ldr	r2, [pc, #372]	; (8005fbc <BasicTimer_Config+0x1a4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d10a      	bne.n	8005e60 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8005e4a:	4b5a      	ldr	r3, [pc, #360]	; (8005fb4 <BasicTimer_Config+0x19c>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	4a59      	ldr	r2, [pc, #356]	; (8005fb4 <BasicTimer_Config+0x19c>)
 8005e50:	f043 0302 	orr.w	r3, r3, #2
 8005e54:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	4a59      	ldr	r2, [pc, #356]	; (8005fc0 <BasicTimer_Config+0x1a8>)
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	e01e      	b.n	8005e9e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4a57      	ldr	r2, [pc, #348]	; (8005fc4 <BasicTimer_Config+0x1ac>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d10a      	bne.n	8005e80 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8005e6a:	4b52      	ldr	r3, [pc, #328]	; (8005fb4 <BasicTimer_Config+0x19c>)
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	4a51      	ldr	r2, [pc, #324]	; (8005fb4 <BasicTimer_Config+0x19c>)
 8005e70:	f043 0304 	orr.w	r3, r3, #4
 8005e74:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	4a53      	ldr	r2, [pc, #332]	; (8005fc8 <BasicTimer_Config+0x1b0>)
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e00e      	b.n	8005e9e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	4a51      	ldr	r2, [pc, #324]	; (8005fcc <BasicTimer_Config+0x1b4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d109      	bne.n	8005e9e <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8005e8a:	4b4a      	ldr	r3, [pc, #296]	; (8005fb4 <BasicTimer_Config+0x19c>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	4a49      	ldr	r2, [pc, #292]	; (8005fb4 <BasicTimer_Config+0x19c>)
 8005e90:	f043 0308 	orr.w	r3, r3, #8
 8005e94:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	4a4d      	ldr	r2, [pc, #308]	; (8005fd0 <BasicTimer_Config+0x1b8>)
 8005e9c:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 8005e9e:	f001 fed7 	bl	8007c50 <getConfigPLL>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8005ea6:	f001 feef 	bl	8007c88 <getClockAPB1>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 8005eae:	7bbb      	ldrb	r3, [r7, #14]
 8005eb0:	2b31      	cmp	r3, #49	; 0x31
 8005eb2:	d903      	bls.n	8005ebc <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	73fb      	strb	r3, [r7, #15]
 8005eba:	e000      	b.n	8005ebe <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 8005ebc:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	8852      	ldrh	r2, [r2, #2]
 8005ec4:	fb02 f303 	mul.w	r3, r2, r3
 8005ec8:	1e5a      	subs	r2, r3, #1
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d112      	bne.n	8005efe <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f022 0210 	bic.w	r2, r2, #16
 8005ee6:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	3201      	adds	r2, #1
 8005ef2:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24
 8005efc:	e018      	b.n	8005f30 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f022 0210 	bic.w	r2, r2, #16
 8005f0c:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f042 0210 	orr.w	r2, r2, #16
 8005f1c:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6852      	ldr	r2, [r2, #4]
 8005f2e:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005f30:	b672      	cpsid	i
}
 8005f32:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3c:	d103      	bne.n	8005f46 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8005f3e:	201c      	movs	r0, #28
 8005f40:	f7ff ff22 	bl	8005d88 <__NVIC_EnableIRQ>
 8005f44:	e019      	b.n	8005f7a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	4a1c      	ldr	r2, [pc, #112]	; (8005fbc <BasicTimer_Config+0x1a4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d103      	bne.n	8005f58 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8005f50:	201d      	movs	r0, #29
 8005f52:	f7ff ff19 	bl	8005d88 <__NVIC_EnableIRQ>
 8005f56:	e010      	b.n	8005f7a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	4a19      	ldr	r2, [pc, #100]	; (8005fc4 <BasicTimer_Config+0x1ac>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d103      	bne.n	8005f6a <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8005f62:	201e      	movs	r0, #30
 8005f64:	f7ff ff10 	bl	8005d88 <__NVIC_EnableIRQ>
 8005f68:	e007      	b.n	8005f7a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <BasicTimer_Config+0x1b4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d102      	bne.n	8005f7a <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8005f74:	2032      	movs	r0, #50	; 0x32
 8005f76:	f7ff ff07 	bl	8005d88 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8005f7a:	b662      	cpsie	i
}
 8005f7c:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	7a1b      	ldrb	r3, [r3, #8]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f8bd 	bl	8006104 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f022 0201 	bic.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f042 0201 	orr.w	r2, r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
}
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	20013274 	.word	0x20013274
 8005fbc:	40000400 	.word	0x40000400
 8005fc0:	20013278 	.word	0x20013278
 8005fc4:	40000800 	.word	0x40000800
 8005fc8:	2001327c 	.word	0x2001327c
 8005fcc:	40000c00 	.word	0x40000c00
 8005fd0:	20013280 	.word	0x20013280

08005fd4 <timer_Config_Init_Priority>:

//------------Funcion para configurar las interrupciones------------------
void timer_Config_Init_Priority(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fe0:	b672      	cpsid	i
}
 8005fe2:	bf00      	nop
	//Desactivamos las interupciones globales
	__disable_irq();
	//Matriculamos la interrupcion en el NVIC
	if(ptrBTimerHandler->ptrTIMx == TIM2)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fec:	d105      	bne.n	8005ffa <timer_Config_Init_Priority+0x26>
	{
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	201c      	movs	r0, #28
 8005ff4:	f7ff fee6 	bl	8005dc4 <__NVIC_SetPriority>
 8005ff8:	e01f      	b.n	800603a <timer_Config_Init_Priority+0x66>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	4a12      	ldr	r2, [pc, #72]	; (8006048 <timer_Config_Init_Priority+0x74>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d105      	bne.n	8006010 <timer_Config_Init_Priority+0x3c>
	{
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	4619      	mov	r1, r3
 8006008:	201d      	movs	r0, #29
 800600a:	f7ff fedb 	bl	8005dc4 <__NVIC_SetPriority>
 800600e:	e014      	b.n	800603a <timer_Config_Init_Priority+0x66>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	4a0d      	ldr	r2, [pc, #52]	; (800604c <timer_Config_Init_Priority+0x78>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d105      	bne.n	8006026 <timer_Config_Init_Priority+0x52>
	{
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	4619      	mov	r1, r3
 800601e:	201e      	movs	r0, #30
 8006020:	f7ff fed0 	bl	8005dc4 <__NVIC_SetPriority>
 8006024:	e009      	b.n	800603a <timer_Config_Init_Priority+0x66>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	4a09      	ldr	r2, [pc, #36]	; (8006050 <timer_Config_Init_Priority+0x7c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d104      	bne.n	800603a <timer_Config_Init_Priority+0x66>
	{
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	4619      	mov	r1, r3
 8006034:	2032      	movs	r0, #50	; 0x32
 8006036:	f7ff fec5 	bl	8005dc4 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800603a:	b662      	cpsie	i
}
 800603c:	bf00      	nop
	}
	//Activamos las interupciones globales
	__enable_irq();
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	40000400 	.word	0x40000400
 800604c:	40000800 	.word	0x40000800
 8006050:	40000c00 	.word	0x40000c00

08006054 <BasicTimer2_Callback>:

//Definimos las funciones para cuando se genera una interrupcion del TIM2-3
__attribute__((weak)) void BasicTimer2_Callback(void)
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
	__NOP();
 8006058:	bf00      	nop
}
 800605a:	bf00      	nop
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
	__NOP();
 8006068:	bf00      	nop
}
 800606a:	bf00      	nop
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8006074:	b480      	push	{r7}
 8006076:	af00      	add	r7, sp, #0
	__NOP();
 8006078:	bf00      	nop
}
 800607a:	bf00      	nop
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <TIM2_IRQHandler+0x1c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	4b04      	ldr	r3, [pc, #16]	; (80060a0 <TIM2_IRQHandler+0x1c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0201 	bic.w	r2, r2, #1
 8006096:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8006098:	f7ff ffdc 	bl	8006054 <BasicTimer2_Callback>

}
 800609c:	bf00      	nop
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20013274 	.word	0x20013274

080060a4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 80060a8:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <TIM3_IRQHandler+0x1c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691a      	ldr	r2, [r3, #16]
 80060ae:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <TIM3_IRQHandler+0x1c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 80060b8:	f7fc f94e 	bl	8002358 <BasicTimer3_Callback>

}
 80060bc:	bf00      	nop
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20013278 	.word	0x20013278

080060c4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 80060c8:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <TIM4_IRQHandler+0x1c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	4b04      	ldr	r3, [pc, #16]	; (80060e0 <TIM4_IRQHandler+0x1c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0201 	bic.w	r2, r2, #1
 80060d6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 80060d8:	f7ff ffc4 	bl	8006064 <BasicTimer4_Callback>

}
 80060dc:	bf00      	nop
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	2001327c 	.word	0x2001327c

080060e4 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 80060e8:	4b05      	ldr	r3, [pc, #20]	; (8006100 <TIM5_IRQHandler+0x1c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	4b04      	ldr	r3, [pc, #16]	; (8006100 <TIM5_IRQHandler+0x1c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0201 	bic.w	r2, r2, #1
 80060f6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 80060f8:	f7ff ffbc 	bl	8006074 <BasicTimer5_Callback>

}
 80060fc:	bf00      	nop
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20013280 	.word	0x20013280

08006104 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d108      	bne.n	8006128 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f042 0201 	orr.w	r2, r2, #1
 8006124:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8006126:	e007      	b.n	8006138 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f022 0201 	bic.w	r2, r2, #1
 8006136:	60da      	str	r2, [r3, #12]
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 8006150:	887a      	ldrh	r2, [r7, #2]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6852      	ldr	r2, [r2, #4]
 8006166:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <__NVIC_EnableIRQ>:
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800617e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006182:	2b00      	cmp	r3, #0
 8006184:	db0b      	blt.n	800619e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	f003 021f 	and.w	r2, r3, #31
 800618c:	4907      	ldr	r1, [pc, #28]	; (80061ac <__NVIC_EnableIRQ+0x38>)
 800618e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2001      	movs	r0, #1
 8006196:	fa00 f202 	lsl.w	r2, r0, r2
 800619a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	e000e100 	.word	0xe000e100

080061b0 <__NVIC_SetPriority>:
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	6039      	str	r1, [r7, #0]
 80061ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	db0a      	blt.n	80061da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	490c      	ldr	r1, [pc, #48]	; (80061fc <__NVIC_SetPriority+0x4c>)
 80061ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ce:	0112      	lsls	r2, r2, #4
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	440b      	add	r3, r1
 80061d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80061d8:	e00a      	b.n	80061f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	4908      	ldr	r1, [pc, #32]	; (8006200 <__NVIC_SetPriority+0x50>)
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	3b04      	subs	r3, #4
 80061e8:	0112      	lsls	r2, r2, #4
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	440b      	add	r3, r1
 80061ee:	761a      	strb	r2, [r3, #24]
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	e000e100 	.word	0xe000e100
 8006200:	e000ed00 	.word	0xe000ed00

08006204 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af02      	add	r7, sp, #8
 800620a:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	2300      	movs	r3, #0
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	2300      	movs	r3, #0
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	2301      	movs	r3, #1
 800621a:	2200      	movs	r2, #0
 800621c:	2100      	movs	r1, #0
 800621e:	f001 f903 	bl	8007428 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f001 f920 	bl	800746c <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800622c:	4b97      	ldr	r3, [pc, #604]	; (800648c <extInt_Config+0x288>)
 800622e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006230:	4a96      	ldr	r2, [pc, #600]	; (800648c <extInt_Config+0x288>)
 8006232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006236:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b0f      	cmp	r3, #15
 8006240:	f200 85cf 	bhi.w	8006de2 <extInt_Config+0xbde>
 8006244:	a201      	add	r2, pc, #4	; (adr r2, 800624c <extInt_Config+0x48>)
 8006246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624a:	bf00      	nop
 800624c:	0800628d 	.word	0x0800628d
 8006250:	08006343 	.word	0x08006343
 8006254:	080063f9 	.word	0x080063f9
 8006258:	080064cf 	.word	0x080064cf
 800625c:	08006585 	.word	0x08006585
 8006260:	08006633 	.word	0x08006633
 8006264:	080066f9 	.word	0x080066f9
 8006268:	080067a1 	.word	0x080067a1
 800626c:	08006849 	.word	0x08006849
 8006270:	080068f1 	.word	0x080068f1
 8006274:	080069b7 	.word	0x080069b7
 8006278:	08006a5f 	.word	0x08006a5f
 800627c:	08006b07 	.word	0x08006b07
 8006280:	08006bcd 	.word	0x08006bcd
 8006284:	08006c75 	.word	0x08006c75
 8006288:	08006d1d 	.word	0x08006d1d
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 800628c:	4b80      	ldr	r3, [pc, #512]	; (8006490 <extInt_Config+0x28c>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	4a7f      	ldr	r2, [pc, #508]	; (8006490 <extInt_Config+0x28c>)
 8006292:	f023 030f 	bic.w	r3, r3, #15
 8006296:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	4a7d      	ldr	r2, [pc, #500]	; (8006494 <extInt_Config+0x290>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d105      	bne.n	80062b0 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80062a4:	4b7a      	ldr	r3, [pc, #488]	; (8006490 <extInt_Config+0x28c>)
 80062a6:	4a7a      	ldr	r2, [pc, #488]	; (8006490 <extInt_Config+0x28c>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80062ac:	f000 bd9b 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	4a78      	ldr	r2, [pc, #480]	; (8006498 <extInt_Config+0x294>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d107      	bne.n	80062cc <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80062bc:	4b74      	ldr	r3, [pc, #464]	; (8006490 <extInt_Config+0x28c>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	4a73      	ldr	r2, [pc, #460]	; (8006490 <extInt_Config+0x28c>)
 80062c2:	f043 0301 	orr.w	r3, r3, #1
 80062c6:	6093      	str	r3, [r2, #8]
		break;
 80062c8:	f000 bd8d 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	4a72      	ldr	r2, [pc, #456]	; (800649c <extInt_Config+0x298>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d107      	bne.n	80062e8 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 80062d8:	4b6d      	ldr	r3, [pc, #436]	; (8006490 <extInt_Config+0x28c>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	4a6c      	ldr	r2, [pc, #432]	; (8006490 <extInt_Config+0x28c>)
 80062de:	f043 0302 	orr.w	r3, r3, #2
 80062e2:	6093      	str	r3, [r2, #8]
		break;
 80062e4:	f000 bd7f 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	4a6c      	ldr	r2, [pc, #432]	; (80064a0 <extInt_Config+0x29c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d107      	bne.n	8006304 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 80062f4:	4b66      	ldr	r3, [pc, #408]	; (8006490 <extInt_Config+0x28c>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	4a65      	ldr	r2, [pc, #404]	; (8006490 <extInt_Config+0x28c>)
 80062fa:	f043 0303 	orr.w	r3, r3, #3
 80062fe:	6093      	str	r3, [r2, #8]
		break;
 8006300:	f000 bd71 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	4a66      	ldr	r2, [pc, #408]	; (80064a4 <extInt_Config+0x2a0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d107      	bne.n	8006320 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8006310:	4b5f      	ldr	r3, [pc, #380]	; (8006490 <extInt_Config+0x28c>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	4a5e      	ldr	r2, [pc, #376]	; (8006490 <extInt_Config+0x28c>)
 8006316:	f043 0304 	orr.w	r3, r3, #4
 800631a:	6093      	str	r3, [r2, #8]
		break;
 800631c:	f000 bd63 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	4a60      	ldr	r2, [pc, #384]	; (80064a8 <extInt_Config+0x2a4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d107      	bne.n	800633c <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 800632c:	4b58      	ldr	r3, [pc, #352]	; (8006490 <extInt_Config+0x28c>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4a57      	ldr	r2, [pc, #348]	; (8006490 <extInt_Config+0x28c>)
 8006332:	f043 0307 	orr.w	r3, r3, #7
 8006336:	6093      	str	r3, [r2, #8]
		break;
 8006338:	f000 bd55 	b.w	8006de6 <extInt_Config+0xbe2>
			__NOP();
 800633c:	bf00      	nop
		break;
 800633e:	f000 bd52 	b.w	8006de6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8006342:	4b53      	ldr	r3, [pc, #332]	; (8006490 <extInt_Config+0x28c>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	4a52      	ldr	r2, [pc, #328]	; (8006490 <extInt_Config+0x28c>)
 8006348:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800634c:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	4a4f      	ldr	r2, [pc, #316]	; (8006494 <extInt_Config+0x290>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d105      	bne.n	8006366 <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 800635a:	4b4d      	ldr	r3, [pc, #308]	; (8006490 <extInt_Config+0x28c>)
 800635c:	4a4c      	ldr	r2, [pc, #304]	; (8006490 <extInt_Config+0x28c>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8006362:	f000 bd40 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	4a4a      	ldr	r2, [pc, #296]	; (8006498 <extInt_Config+0x294>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d107      	bne.n	8006382 <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8006372:	4b47      	ldr	r3, [pc, #284]	; (8006490 <extInt_Config+0x28c>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	4a46      	ldr	r2, [pc, #280]	; (8006490 <extInt_Config+0x28c>)
 8006378:	f043 0310 	orr.w	r3, r3, #16
 800637c:	6093      	str	r3, [r2, #8]
		break;
 800637e:	f000 bd32 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	4a44      	ldr	r2, [pc, #272]	; (800649c <extInt_Config+0x298>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d107      	bne.n	800639e <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 800638e:	4b40      	ldr	r3, [pc, #256]	; (8006490 <extInt_Config+0x28c>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	4a3f      	ldr	r2, [pc, #252]	; (8006490 <extInt_Config+0x28c>)
 8006394:	f043 0320 	orr.w	r3, r3, #32
 8006398:	6093      	str	r3, [r2, #8]
		break;
 800639a:	f000 bd24 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	4a3e      	ldr	r2, [pc, #248]	; (80064a0 <extInt_Config+0x29c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d107      	bne.n	80063ba <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80063aa:	4b39      	ldr	r3, [pc, #228]	; (8006490 <extInt_Config+0x28c>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	4a38      	ldr	r2, [pc, #224]	; (8006490 <extInt_Config+0x28c>)
 80063b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80063b4:	6093      	str	r3, [r2, #8]
		break;
 80063b6:	f000 bd16 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	4a38      	ldr	r2, [pc, #224]	; (80064a4 <extInt_Config+0x2a0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d107      	bne.n	80063d6 <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 80063c6:	4b32      	ldr	r3, [pc, #200]	; (8006490 <extInt_Config+0x28c>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	4a31      	ldr	r2, [pc, #196]	; (8006490 <extInt_Config+0x28c>)
 80063cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063d0:	6093      	str	r3, [r2, #8]
		break;
 80063d2:	f000 bd08 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	4a32      	ldr	r2, [pc, #200]	; (80064a8 <extInt_Config+0x2a4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d107      	bne.n	80063f2 <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 80063e2:	4b2b      	ldr	r3, [pc, #172]	; (8006490 <extInt_Config+0x28c>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	4a2a      	ldr	r2, [pc, #168]	; (8006490 <extInt_Config+0x28c>)
 80063e8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80063ec:	6093      	str	r3, [r2, #8]
		break;
 80063ee:	f000 bcfa 	b.w	8006de6 <extInt_Config+0xbe2>
			__NOP();
 80063f2:	bf00      	nop
		break;
 80063f4:	f000 bcf7 	b.w	8006de6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 80063f8:	4b25      	ldr	r3, [pc, #148]	; (8006490 <extInt_Config+0x28c>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	4a24      	ldr	r2, [pc, #144]	; (8006490 <extInt_Config+0x28c>)
 80063fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006402:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	4a22      	ldr	r2, [pc, #136]	; (8006494 <extInt_Config+0x290>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d105      	bne.n	800641c <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8006410:	4b1f      	ldr	r3, [pc, #124]	; (8006490 <extInt_Config+0x28c>)
 8006412:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <extInt_Config+0x28c>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8006418:	f000 bce5 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	4a1d      	ldr	r2, [pc, #116]	; (8006498 <extInt_Config+0x294>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d107      	bne.n	8006438 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8006428:	4b19      	ldr	r3, [pc, #100]	; (8006490 <extInt_Config+0x28c>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	4a18      	ldr	r2, [pc, #96]	; (8006490 <extInt_Config+0x28c>)
 800642e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006432:	6093      	str	r3, [r2, #8]
		break;
 8006434:	f000 bcd7 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	4a17      	ldr	r2, [pc, #92]	; (800649c <extInt_Config+0x298>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d107      	bne.n	8006454 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8006444:	4b12      	ldr	r3, [pc, #72]	; (8006490 <extInt_Config+0x28c>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	4a11      	ldr	r2, [pc, #68]	; (8006490 <extInt_Config+0x28c>)
 800644a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800644e:	6093      	str	r3, [r2, #8]
		break;
 8006450:	f000 bcc9 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	4a11      	ldr	r2, [pc, #68]	; (80064a0 <extInt_Config+0x29c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d107      	bne.n	8006470 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8006460:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <extInt_Config+0x28c>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	4a0a      	ldr	r2, [pc, #40]	; (8006490 <extInt_Config+0x28c>)
 8006466:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800646a:	6093      	str	r3, [r2, #8]
		break;
 800646c:	f000 bcbb 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	4a0b      	ldr	r2, [pc, #44]	; (80064a4 <extInt_Config+0x2a0>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d117      	bne.n	80064ac <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 800647c:	4b04      	ldr	r3, [pc, #16]	; (8006490 <extInt_Config+0x28c>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	4a03      	ldr	r2, [pc, #12]	; (8006490 <extInt_Config+0x28c>)
 8006482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006486:	6093      	str	r3, [r2, #8]
		break;
 8006488:	f000 bcad 	b.w	8006de6 <extInt_Config+0xbe2>
 800648c:	40023800 	.word	0x40023800
 8006490:	40013800 	.word	0x40013800
 8006494:	40020000 	.word	0x40020000
 8006498:	40020400 	.word	0x40020400
 800649c:	40020800 	.word	0x40020800
 80064a0:	40020c00 	.word	0x40020c00
 80064a4:	40021000 	.word	0x40021000
 80064a8:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	4a8a      	ldr	r2, [pc, #552]	; (80066dc <extInt_Config+0x4d8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d107      	bne.n	80064c8 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80064b8:	4b89      	ldr	r3, [pc, #548]	; (80066e0 <extInt_Config+0x4dc>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4a88      	ldr	r2, [pc, #544]	; (80066e0 <extInt_Config+0x4dc>)
 80064be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80064c2:	6093      	str	r3, [r2, #8]
		break;
 80064c4:	f000 bc8f 	b.w	8006de6 <extInt_Config+0xbe2>
			__NOP();
 80064c8:	bf00      	nop
		break;
 80064ca:	f000 bc8c 	b.w	8006de6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 80064ce:	4b84      	ldr	r3, [pc, #528]	; (80066e0 <extInt_Config+0x4dc>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	4a83      	ldr	r2, [pc, #524]	; (80066e0 <extInt_Config+0x4dc>)
 80064d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064d8:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	4a80      	ldr	r2, [pc, #512]	; (80066e4 <extInt_Config+0x4e0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d105      	bne.n	80064f2 <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 80064e6:	4b7e      	ldr	r3, [pc, #504]	; (80066e0 <extInt_Config+0x4dc>)
 80064e8:	4a7d      	ldr	r2, [pc, #500]	; (80066e0 <extInt_Config+0x4dc>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80064ee:	f000 bc7a 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	4a7b      	ldr	r2, [pc, #492]	; (80066e8 <extInt_Config+0x4e4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d107      	bne.n	800650e <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 80064fe:	4b78      	ldr	r3, [pc, #480]	; (80066e0 <extInt_Config+0x4dc>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	4a77      	ldr	r2, [pc, #476]	; (80066e0 <extInt_Config+0x4dc>)
 8006504:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006508:	6093      	str	r3, [r2, #8]
		break;
 800650a:	f000 bc6c 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	4a75      	ldr	r2, [pc, #468]	; (80066ec <extInt_Config+0x4e8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d107      	bne.n	800652a <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 800651a:	4b71      	ldr	r3, [pc, #452]	; (80066e0 <extInt_Config+0x4dc>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	4a70      	ldr	r2, [pc, #448]	; (80066e0 <extInt_Config+0x4dc>)
 8006520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006524:	6093      	str	r3, [r2, #8]
		break;
 8006526:	f000 bc5e 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4a6f      	ldr	r2, [pc, #444]	; (80066f0 <extInt_Config+0x4ec>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d107      	bne.n	8006546 <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8006536:	4b6a      	ldr	r3, [pc, #424]	; (80066e0 <extInt_Config+0x4dc>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	4a69      	ldr	r2, [pc, #420]	; (80066e0 <extInt_Config+0x4dc>)
 800653c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006540:	6093      	str	r3, [r2, #8]
		break;
 8006542:	f000 bc50 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	4a69      	ldr	r2, [pc, #420]	; (80066f4 <extInt_Config+0x4f0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d107      	bne.n	8006562 <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8006552:	4b63      	ldr	r3, [pc, #396]	; (80066e0 <extInt_Config+0x4dc>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	4a62      	ldr	r2, [pc, #392]	; (80066e0 <extInt_Config+0x4dc>)
 8006558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800655c:	6093      	str	r3, [r2, #8]
		break;
 800655e:	f000 bc42 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	4a5c      	ldr	r2, [pc, #368]	; (80066dc <extInt_Config+0x4d8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d107      	bne.n	800657e <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 800656e:	4b5c      	ldr	r3, [pc, #368]	; (80066e0 <extInt_Config+0x4dc>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	4a5b      	ldr	r2, [pc, #364]	; (80066e0 <extInt_Config+0x4dc>)
 8006574:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006578:	6093      	str	r3, [r2, #8]
		break;
 800657a:	f000 bc34 	b.w	8006de6 <extInt_Config+0xbe2>
			__NOP();
 800657e:	bf00      	nop
		break;
 8006580:	f000 bc31 	b.w	8006de6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 8006584:	4b56      	ldr	r3, [pc, #344]	; (80066e0 <extInt_Config+0x4dc>)
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	4a55      	ldr	r2, [pc, #340]	; (80066e0 <extInt_Config+0x4dc>)
 800658a:	f023 030f 	bic.w	r3, r3, #15
 800658e:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	4a53      	ldr	r2, [pc, #332]	; (80066e4 <extInt_Config+0x4e0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d105      	bne.n	80065a8 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 800659c:	4b50      	ldr	r3, [pc, #320]	; (80066e0 <extInt_Config+0x4dc>)
 800659e:	4a50      	ldr	r2, [pc, #320]	; (80066e0 <extInt_Config+0x4dc>)
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80065a4:	f000 bc1f 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	4a4e      	ldr	r2, [pc, #312]	; (80066e8 <extInt_Config+0x4e4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d107      	bne.n	80065c4 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80065b4:	4b4a      	ldr	r3, [pc, #296]	; (80066e0 <extInt_Config+0x4dc>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	4a49      	ldr	r2, [pc, #292]	; (80066e0 <extInt_Config+0x4dc>)
 80065ba:	f043 0301 	orr.w	r3, r3, #1
 80065be:	60d3      	str	r3, [r2, #12]
		break;
 80065c0:	f000 bc11 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	4a48      	ldr	r2, [pc, #288]	; (80066ec <extInt_Config+0x4e8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d107      	bne.n	80065e0 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 80065d0:	4b43      	ldr	r3, [pc, #268]	; (80066e0 <extInt_Config+0x4dc>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	4a42      	ldr	r2, [pc, #264]	; (80066e0 <extInt_Config+0x4dc>)
 80065d6:	f043 0302 	orr.w	r3, r3, #2
 80065da:	60d3      	str	r3, [r2, #12]
		break;
 80065dc:	f000 bc03 	b.w	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	4a42      	ldr	r2, [pc, #264]	; (80066f0 <extInt_Config+0x4ec>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d106      	bne.n	80065fa <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 80065ec:	4b3c      	ldr	r3, [pc, #240]	; (80066e0 <extInt_Config+0x4dc>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	4a3b      	ldr	r2, [pc, #236]	; (80066e0 <extInt_Config+0x4dc>)
 80065f2:	f043 0303 	orr.w	r3, r3, #3
 80065f6:	60d3      	str	r3, [r2, #12]
		break;
 80065f8:	e3f5      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	4a3c      	ldr	r2, [pc, #240]	; (80066f4 <extInt_Config+0x4f0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d106      	bne.n	8006614 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8006606:	4b36      	ldr	r3, [pc, #216]	; (80066e0 <extInt_Config+0x4dc>)
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	4a35      	ldr	r2, [pc, #212]	; (80066e0 <extInt_Config+0x4dc>)
 800660c:	f043 0304 	orr.w	r3, r3, #4
 8006610:	60d3      	str	r3, [r2, #12]
		break;
 8006612:	e3e8      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	4a30      	ldr	r2, [pc, #192]	; (80066dc <extInt_Config+0x4d8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d106      	bne.n	800662e <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8006620:	4b2f      	ldr	r3, [pc, #188]	; (80066e0 <extInt_Config+0x4dc>)
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	4a2e      	ldr	r2, [pc, #184]	; (80066e0 <extInt_Config+0x4dc>)
 8006626:	f043 0307 	orr.w	r3, r3, #7
 800662a:	60d3      	str	r3, [r2, #12]
		break;
 800662c:	e3db      	b.n	8006de6 <extInt_Config+0xbe2>
			__NOP();
 800662e:	bf00      	nop
		break;
 8006630:	e3d9      	b.n	8006de6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8006632:	4b2b      	ldr	r3, [pc, #172]	; (80066e0 <extInt_Config+0x4dc>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	4a2a      	ldr	r2, [pc, #168]	; (80066e0 <extInt_Config+0x4dc>)
 8006638:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800663c:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	4a27      	ldr	r2, [pc, #156]	; (80066e4 <extInt_Config+0x4e0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d104      	bne.n	8006654 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 800664a:	4b25      	ldr	r3, [pc, #148]	; (80066e0 <extInt_Config+0x4dc>)
 800664c:	4a24      	ldr	r2, [pc, #144]	; (80066e0 <extInt_Config+0x4dc>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8006652:	e3c8      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	4a23      	ldr	r2, [pc, #140]	; (80066e8 <extInt_Config+0x4e4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d106      	bne.n	800666e <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8006660:	4b1f      	ldr	r3, [pc, #124]	; (80066e0 <extInt_Config+0x4dc>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4a1e      	ldr	r2, [pc, #120]	; (80066e0 <extInt_Config+0x4dc>)
 8006666:	f043 0310 	orr.w	r3, r3, #16
 800666a:	60d3      	str	r3, [r2, #12]
		break;
 800666c:	e3bb      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	4a1d      	ldr	r2, [pc, #116]	; (80066ec <extInt_Config+0x4e8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d106      	bne.n	8006688 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 800667a:	4b19      	ldr	r3, [pc, #100]	; (80066e0 <extInt_Config+0x4dc>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <extInt_Config+0x4dc>)
 8006680:	f043 0320 	orr.w	r3, r3, #32
 8006684:	60d3      	str	r3, [r2, #12]
		break;
 8006686:	e3ae      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	4a18      	ldr	r2, [pc, #96]	; (80066f0 <extInt_Config+0x4ec>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d106      	bne.n	80066a2 <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8006694:	4b12      	ldr	r3, [pc, #72]	; (80066e0 <extInt_Config+0x4dc>)
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	4a11      	ldr	r2, [pc, #68]	; (80066e0 <extInt_Config+0x4dc>)
 800669a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800669e:	60d3      	str	r3, [r2, #12]
		break;
 80066a0:	e3a1      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	4a12      	ldr	r2, [pc, #72]	; (80066f4 <extInt_Config+0x4f0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d106      	bne.n	80066bc <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80066ae:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <extInt_Config+0x4dc>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	4a0b      	ldr	r2, [pc, #44]	; (80066e0 <extInt_Config+0x4dc>)
 80066b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b8:	60d3      	str	r3, [r2, #12]
		break;
 80066ba:	e394      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	4a06      	ldr	r2, [pc, #24]	; (80066dc <extInt_Config+0x4d8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d106      	bne.n	80066d6 <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 80066c8:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <extInt_Config+0x4dc>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	4a04      	ldr	r2, [pc, #16]	; (80066e0 <extInt_Config+0x4dc>)
 80066ce:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80066d2:	60d3      	str	r3, [r2, #12]
		break;
 80066d4:	e387      	b.n	8006de6 <extInt_Config+0xbe2>
			__NOP();
 80066d6:	bf00      	nop
		break;
 80066d8:	e385      	b.n	8006de6 <extInt_Config+0xbe2>
 80066da:	bf00      	nop
 80066dc:	40021c00 	.word	0x40021c00
 80066e0:	40013800 	.word	0x40013800
 80066e4:	40020000 	.word	0x40020000
 80066e8:	40020400 	.word	0x40020400
 80066ec:	40020800 	.word	0x40020800
 80066f0:	40020c00 	.word	0x40020c00
 80066f4:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 80066f8:	4b86      	ldr	r3, [pc, #536]	; (8006914 <extInt_Config+0x710>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	4a85      	ldr	r2, [pc, #532]	; (8006914 <extInt_Config+0x710>)
 80066fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006702:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	4a83      	ldr	r2, [pc, #524]	; (8006918 <extInt_Config+0x714>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d104      	bne.n	800671a <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8006710:	4b80      	ldr	r3, [pc, #512]	; (8006914 <extInt_Config+0x710>)
 8006712:	4a80      	ldr	r2, [pc, #512]	; (8006914 <extInt_Config+0x710>)
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8006718:	e365      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	4a7e      	ldr	r2, [pc, #504]	; (800691c <extInt_Config+0x718>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d106      	bne.n	8006734 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8006726:	4b7b      	ldr	r3, [pc, #492]	; (8006914 <extInt_Config+0x710>)
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	4a7a      	ldr	r2, [pc, #488]	; (8006914 <extInt_Config+0x710>)
 800672c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006730:	60d3      	str	r3, [r2, #12]
		break;
 8006732:	e358      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	4a79      	ldr	r2, [pc, #484]	; (8006920 <extInt_Config+0x71c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d106      	bne.n	800674e <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8006740:	4b74      	ldr	r3, [pc, #464]	; (8006914 <extInt_Config+0x710>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	4a73      	ldr	r2, [pc, #460]	; (8006914 <extInt_Config+0x710>)
 8006746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800674a:	60d3      	str	r3, [r2, #12]
		break;
 800674c:	e34b      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	4a73      	ldr	r2, [pc, #460]	; (8006924 <extInt_Config+0x720>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d106      	bne.n	8006768 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800675a:	4b6e      	ldr	r3, [pc, #440]	; (8006914 <extInt_Config+0x710>)
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	4a6d      	ldr	r2, [pc, #436]	; (8006914 <extInt_Config+0x710>)
 8006760:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006764:	60d3      	str	r3, [r2, #12]
		break;
 8006766:	e33e      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	4a6e      	ldr	r2, [pc, #440]	; (8006928 <extInt_Config+0x724>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d106      	bne.n	8006782 <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8006774:	4b67      	ldr	r3, [pc, #412]	; (8006914 <extInt_Config+0x710>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	4a66      	ldr	r2, [pc, #408]	; (8006914 <extInt_Config+0x710>)
 800677a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800677e:	60d3      	str	r3, [r2, #12]
		break;
 8006780:	e331      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	4a68      	ldr	r2, [pc, #416]	; (800692c <extInt_Config+0x728>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d106      	bne.n	800679c <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 800678e:	4b61      	ldr	r3, [pc, #388]	; (8006914 <extInt_Config+0x710>)
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	4a60      	ldr	r2, [pc, #384]	; (8006914 <extInt_Config+0x710>)
 8006794:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006798:	60d3      	str	r3, [r2, #12]
		break;
 800679a:	e324      	b.n	8006de6 <extInt_Config+0xbe2>
			__NOP();
 800679c:	bf00      	nop
		break;
 800679e:	e322      	b.n	8006de6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 80067a0:	4b5c      	ldr	r3, [pc, #368]	; (8006914 <extInt_Config+0x710>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	4a5b      	ldr	r2, [pc, #364]	; (8006914 <extInt_Config+0x710>)
 80067a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067aa:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	4a59      	ldr	r2, [pc, #356]	; (8006918 <extInt_Config+0x714>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d104      	bne.n	80067c2 <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80067b8:	4b56      	ldr	r3, [pc, #344]	; (8006914 <extInt_Config+0x710>)
 80067ba:	4a56      	ldr	r2, [pc, #344]	; (8006914 <extInt_Config+0x710>)
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80067c0:	e311      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4a54      	ldr	r2, [pc, #336]	; (800691c <extInt_Config+0x718>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d106      	bne.n	80067dc <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 80067ce:	4b51      	ldr	r3, [pc, #324]	; (8006914 <extInt_Config+0x710>)
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	4a50      	ldr	r2, [pc, #320]	; (8006914 <extInt_Config+0x710>)
 80067d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067d8:	60d3      	str	r3, [r2, #12]
		break;
 80067da:	e304      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	4a4f      	ldr	r2, [pc, #316]	; (8006920 <extInt_Config+0x71c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d106      	bne.n	80067f6 <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 80067e8:	4b4a      	ldr	r3, [pc, #296]	; (8006914 <extInt_Config+0x710>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	4a49      	ldr	r2, [pc, #292]	; (8006914 <extInt_Config+0x710>)
 80067ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80067f2:	60d3      	str	r3, [r2, #12]
		break;
 80067f4:	e2f7      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	4a49      	ldr	r2, [pc, #292]	; (8006924 <extInt_Config+0x720>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d106      	bne.n	8006810 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8006802:	4b44      	ldr	r3, [pc, #272]	; (8006914 <extInt_Config+0x710>)
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	4a43      	ldr	r2, [pc, #268]	; (8006914 <extInt_Config+0x710>)
 8006808:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800680c:	60d3      	str	r3, [r2, #12]
		break;
 800680e:	e2ea      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	4a44      	ldr	r2, [pc, #272]	; (8006928 <extInt_Config+0x724>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d106      	bne.n	800682a <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 800681c:	4b3d      	ldr	r3, [pc, #244]	; (8006914 <extInt_Config+0x710>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	4a3c      	ldr	r2, [pc, #240]	; (8006914 <extInt_Config+0x710>)
 8006822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006826:	60d3      	str	r3, [r2, #12]
		break;
 8006828:	e2dd      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	4a3e      	ldr	r2, [pc, #248]	; (800692c <extInt_Config+0x728>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d106      	bne.n	8006844 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8006836:	4b37      	ldr	r3, [pc, #220]	; (8006914 <extInt_Config+0x710>)
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	4a36      	ldr	r2, [pc, #216]	; (8006914 <extInt_Config+0x710>)
 800683c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006840:	60d3      	str	r3, [r2, #12]
		break;
 8006842:	e2d0      	b.n	8006de6 <extInt_Config+0xbe2>
			__NOP();
 8006844:	bf00      	nop
		break;
 8006846:	e2ce      	b.n	8006de6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 8006848:	4b32      	ldr	r3, [pc, #200]	; (8006914 <extInt_Config+0x710>)
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	4a31      	ldr	r2, [pc, #196]	; (8006914 <extInt_Config+0x710>)
 800684e:	f023 030f 	bic.w	r3, r3, #15
 8006852:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	4a2f      	ldr	r2, [pc, #188]	; (8006918 <extInt_Config+0x714>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d104      	bne.n	800686a <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8006860:	4b2c      	ldr	r3, [pc, #176]	; (8006914 <extInt_Config+0x710>)
 8006862:	4a2c      	ldr	r2, [pc, #176]	; (8006914 <extInt_Config+0x710>)
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8006868:	e2bd      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	4a2a      	ldr	r2, [pc, #168]	; (800691c <extInt_Config+0x718>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d106      	bne.n	8006884 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8006876:	4b27      	ldr	r3, [pc, #156]	; (8006914 <extInt_Config+0x710>)
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	4a26      	ldr	r2, [pc, #152]	; (8006914 <extInt_Config+0x710>)
 800687c:	f043 0301 	orr.w	r3, r3, #1
 8006880:	6113      	str	r3, [r2, #16]
		break;
 8006882:	e2b0      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	4a25      	ldr	r2, [pc, #148]	; (8006920 <extInt_Config+0x71c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d106      	bne.n	800689e <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8006890:	4b20      	ldr	r3, [pc, #128]	; (8006914 <extInt_Config+0x710>)
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	4a1f      	ldr	r2, [pc, #124]	; (8006914 <extInt_Config+0x710>)
 8006896:	f043 0302 	orr.w	r3, r3, #2
 800689a:	6113      	str	r3, [r2, #16]
		break;
 800689c:	e2a3      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	4a1f      	ldr	r2, [pc, #124]	; (8006924 <extInt_Config+0x720>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d106      	bne.n	80068b8 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80068aa:	4b1a      	ldr	r3, [pc, #104]	; (8006914 <extInt_Config+0x710>)
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	4a19      	ldr	r2, [pc, #100]	; (8006914 <extInt_Config+0x710>)
 80068b0:	f043 0303 	orr.w	r3, r3, #3
 80068b4:	6113      	str	r3, [r2, #16]
		break;
 80068b6:	e296      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	4a1a      	ldr	r2, [pc, #104]	; (8006928 <extInt_Config+0x724>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d106      	bne.n	80068d2 <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 80068c4:	4b13      	ldr	r3, [pc, #76]	; (8006914 <extInt_Config+0x710>)
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	4a12      	ldr	r2, [pc, #72]	; (8006914 <extInt_Config+0x710>)
 80068ca:	f043 0304 	orr.w	r3, r3, #4
 80068ce:	6113      	str	r3, [r2, #16]
		break;
 80068d0:	e289      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	4a14      	ldr	r2, [pc, #80]	; (800692c <extInt_Config+0x728>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d106      	bne.n	80068ec <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 80068de:	4b0d      	ldr	r3, [pc, #52]	; (8006914 <extInt_Config+0x710>)
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	4a0c      	ldr	r2, [pc, #48]	; (8006914 <extInt_Config+0x710>)
 80068e4:	f043 0307 	orr.w	r3, r3, #7
 80068e8:	6113      	str	r3, [r2, #16]
		break;
 80068ea:	e27c      	b.n	8006de6 <extInt_Config+0xbe2>
			__NOP();
 80068ec:	bf00      	nop
		break;
 80068ee:	e27a      	b.n	8006de6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 80068f0:	4b08      	ldr	r3, [pc, #32]	; (8006914 <extInt_Config+0x710>)
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	4a07      	ldr	r2, [pc, #28]	; (8006914 <extInt_Config+0x710>)
 80068f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068fa:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	4a05      	ldr	r2, [pc, #20]	; (8006918 <extInt_Config+0x714>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d113      	bne.n	8006930 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8006908:	4b02      	ldr	r3, [pc, #8]	; (8006914 <extInt_Config+0x710>)
 800690a:	4a02      	ldr	r2, [pc, #8]	; (8006914 <extInt_Config+0x710>)
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8006910:	e269      	b.n	8006de6 <extInt_Config+0xbe2>
 8006912:	bf00      	nop
 8006914:	40013800 	.word	0x40013800
 8006918:	40020000 	.word	0x40020000
 800691c:	40020400 	.word	0x40020400
 8006920:	40020800 	.word	0x40020800
 8006924:	40020c00 	.word	0x40020c00
 8006928:	40021000 	.word	0x40021000
 800692c:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	4a83      	ldr	r2, [pc, #524]	; (8006b44 <extInt_Config+0x940>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d106      	bne.n	800694a <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 800693c:	4b82      	ldr	r3, [pc, #520]	; (8006b48 <extInt_Config+0x944>)
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	4a81      	ldr	r2, [pc, #516]	; (8006b48 <extInt_Config+0x944>)
 8006942:	f043 0310 	orr.w	r3, r3, #16
 8006946:	6113      	str	r3, [r2, #16]
		break;
 8006948:	e24d      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	4a7e      	ldr	r2, [pc, #504]	; (8006b4c <extInt_Config+0x948>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d106      	bne.n	8006964 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8006956:	4b7c      	ldr	r3, [pc, #496]	; (8006b48 <extInt_Config+0x944>)
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	4a7b      	ldr	r2, [pc, #492]	; (8006b48 <extInt_Config+0x944>)
 800695c:	f043 0320 	orr.w	r3, r3, #32
 8006960:	6113      	str	r3, [r2, #16]
		break;
 8006962:	e240      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	4a79      	ldr	r2, [pc, #484]	; (8006b50 <extInt_Config+0x94c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d106      	bne.n	800697e <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8006970:	4b75      	ldr	r3, [pc, #468]	; (8006b48 <extInt_Config+0x944>)
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	4a74      	ldr	r2, [pc, #464]	; (8006b48 <extInt_Config+0x944>)
 8006976:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800697a:	6113      	str	r3, [r2, #16]
		break;
 800697c:	e233      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	4a73      	ldr	r2, [pc, #460]	; (8006b54 <extInt_Config+0x950>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d106      	bne.n	8006998 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800698a:	4b6f      	ldr	r3, [pc, #444]	; (8006b48 <extInt_Config+0x944>)
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	4a6e      	ldr	r2, [pc, #440]	; (8006b48 <extInt_Config+0x944>)
 8006990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006994:	6113      	str	r3, [r2, #16]
		break;
 8006996:	e226      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	4a6e      	ldr	r2, [pc, #440]	; (8006b58 <extInt_Config+0x954>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d106      	bne.n	80069b2 <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80069a4:	4b68      	ldr	r3, [pc, #416]	; (8006b48 <extInt_Config+0x944>)
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	4a67      	ldr	r2, [pc, #412]	; (8006b48 <extInt_Config+0x944>)
 80069aa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80069ae:	6113      	str	r3, [r2, #16]
		break;
 80069b0:	e219      	b.n	8006de6 <extInt_Config+0xbe2>
			__NOP();
 80069b2:	bf00      	nop
		break;
 80069b4:	e217      	b.n	8006de6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 80069b6:	4b64      	ldr	r3, [pc, #400]	; (8006b48 <extInt_Config+0x944>)
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	4a63      	ldr	r2, [pc, #396]	; (8006b48 <extInt_Config+0x944>)
 80069bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80069c0:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	4a64      	ldr	r2, [pc, #400]	; (8006b5c <extInt_Config+0x958>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d104      	bne.n	80069d8 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 80069ce:	4b5e      	ldr	r3, [pc, #376]	; (8006b48 <extInt_Config+0x944>)
 80069d0:	4a5d      	ldr	r2, [pc, #372]	; (8006b48 <extInt_Config+0x944>)
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80069d6:	e206      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	4a59      	ldr	r2, [pc, #356]	; (8006b44 <extInt_Config+0x940>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d106      	bne.n	80069f2 <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80069e4:	4b58      	ldr	r3, [pc, #352]	; (8006b48 <extInt_Config+0x944>)
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	4a57      	ldr	r2, [pc, #348]	; (8006b48 <extInt_Config+0x944>)
 80069ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ee:	6113      	str	r3, [r2, #16]
		break;
 80069f0:	e1f9      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	4a54      	ldr	r2, [pc, #336]	; (8006b4c <extInt_Config+0x948>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d106      	bne.n	8006a0c <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 80069fe:	4b52      	ldr	r3, [pc, #328]	; (8006b48 <extInt_Config+0x944>)
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	4a51      	ldr	r2, [pc, #324]	; (8006b48 <extInt_Config+0x944>)
 8006a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a08:	6113      	str	r3, [r2, #16]
		break;
 8006a0a:	e1ec      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	4a4f      	ldr	r2, [pc, #316]	; (8006b50 <extInt_Config+0x94c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d106      	bne.n	8006a26 <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8006a18:	4b4b      	ldr	r3, [pc, #300]	; (8006b48 <extInt_Config+0x944>)
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	4a4a      	ldr	r2, [pc, #296]	; (8006b48 <extInt_Config+0x944>)
 8006a1e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006a22:	6113      	str	r3, [r2, #16]
		break;
 8006a24:	e1df      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	4a49      	ldr	r2, [pc, #292]	; (8006b54 <extInt_Config+0x950>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d106      	bne.n	8006a40 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8006a32:	4b45      	ldr	r3, [pc, #276]	; (8006b48 <extInt_Config+0x944>)
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	4a44      	ldr	r2, [pc, #272]	; (8006b48 <extInt_Config+0x944>)
 8006a38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a3c:	6113      	str	r3, [r2, #16]
		break;
 8006a3e:	e1d2      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	4a44      	ldr	r2, [pc, #272]	; (8006b58 <extInt_Config+0x954>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d106      	bne.n	8006a5a <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8006a4c:	4b3e      	ldr	r3, [pc, #248]	; (8006b48 <extInt_Config+0x944>)
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	4a3d      	ldr	r2, [pc, #244]	; (8006b48 <extInt_Config+0x944>)
 8006a52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006a56:	6113      	str	r3, [r2, #16]
		break;
 8006a58:	e1c5      	b.n	8006de6 <extInt_Config+0xbe2>
			__NOP();
 8006a5a:	bf00      	nop
		break;
 8006a5c:	e1c3      	b.n	8006de6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8006a5e:	4b3a      	ldr	r3, [pc, #232]	; (8006b48 <extInt_Config+0x944>)
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	4a39      	ldr	r2, [pc, #228]	; (8006b48 <extInt_Config+0x944>)
 8006a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a68:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4a3a      	ldr	r2, [pc, #232]	; (8006b5c <extInt_Config+0x958>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d104      	bne.n	8006a80 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8006a76:	4b34      	ldr	r3, [pc, #208]	; (8006b48 <extInt_Config+0x944>)
 8006a78:	4a33      	ldr	r2, [pc, #204]	; (8006b48 <extInt_Config+0x944>)
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8006a7e:	e1b2      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	4a2f      	ldr	r2, [pc, #188]	; (8006b44 <extInt_Config+0x940>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d106      	bne.n	8006a9a <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8006a8c:	4b2e      	ldr	r3, [pc, #184]	; (8006b48 <extInt_Config+0x944>)
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	4a2d      	ldr	r2, [pc, #180]	; (8006b48 <extInt_Config+0x944>)
 8006a92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a96:	6113      	str	r3, [r2, #16]
		break;
 8006a98:	e1a5      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	4a2a      	ldr	r2, [pc, #168]	; (8006b4c <extInt_Config+0x948>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d106      	bne.n	8006ab4 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8006aa6:	4b28      	ldr	r3, [pc, #160]	; (8006b48 <extInt_Config+0x944>)
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	4a27      	ldr	r2, [pc, #156]	; (8006b48 <extInt_Config+0x944>)
 8006aac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ab0:	6113      	str	r3, [r2, #16]
		break;
 8006ab2:	e198      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	4a25      	ldr	r2, [pc, #148]	; (8006b50 <extInt_Config+0x94c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d106      	bne.n	8006ace <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8006ac0:	4b21      	ldr	r3, [pc, #132]	; (8006b48 <extInt_Config+0x944>)
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	4a20      	ldr	r2, [pc, #128]	; (8006b48 <extInt_Config+0x944>)
 8006ac6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006aca:	6113      	str	r3, [r2, #16]
		break;
 8006acc:	e18b      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	4a1f      	ldr	r2, [pc, #124]	; (8006b54 <extInt_Config+0x950>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d106      	bne.n	8006ae8 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8006ada:	4b1b      	ldr	r3, [pc, #108]	; (8006b48 <extInt_Config+0x944>)
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	4a1a      	ldr	r2, [pc, #104]	; (8006b48 <extInt_Config+0x944>)
 8006ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ae4:	6113      	str	r3, [r2, #16]
		break;
 8006ae6:	e17e      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	4a1a      	ldr	r2, [pc, #104]	; (8006b58 <extInt_Config+0x954>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d106      	bne.n	8006b02 <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8006af4:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <extInt_Config+0x944>)
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	4a13      	ldr	r2, [pc, #76]	; (8006b48 <extInt_Config+0x944>)
 8006afa:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006afe:	6113      	str	r3, [r2, #16]
		break;
 8006b00:	e171      	b.n	8006de6 <extInt_Config+0xbe2>
			__NOP();
 8006b02:	bf00      	nop
		break;
 8006b04:	e16f      	b.n	8006de6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 8006b06:	4b10      	ldr	r3, [pc, #64]	; (8006b48 <extInt_Config+0x944>)
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	4a0f      	ldr	r2, [pc, #60]	; (8006b48 <extInt_Config+0x944>)
 8006b0c:	f023 030f 	bic.w	r3, r3, #15
 8006b10:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	4a10      	ldr	r2, [pc, #64]	; (8006b5c <extInt_Config+0x958>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d104      	bne.n	8006b28 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8006b1e:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <extInt_Config+0x944>)
 8006b20:	4a09      	ldr	r2, [pc, #36]	; (8006b48 <extInt_Config+0x944>)
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8006b26:	e15e      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	4a05      	ldr	r2, [pc, #20]	; (8006b44 <extInt_Config+0x940>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d115      	bne.n	8006b60 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8006b34:	4b04      	ldr	r3, [pc, #16]	; (8006b48 <extInt_Config+0x944>)
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	4a03      	ldr	r2, [pc, #12]	; (8006b48 <extInt_Config+0x944>)
 8006b3a:	f043 0301 	orr.w	r3, r3, #1
 8006b3e:	6153      	str	r3, [r2, #20]
		break;
 8006b40:	e151      	b.n	8006de6 <extInt_Config+0xbe2>
 8006b42:	bf00      	nop
 8006b44:	40020400 	.word	0x40020400
 8006b48:	40013800 	.word	0x40013800
 8006b4c:	40020800 	.word	0x40020800
 8006b50:	40020c00 	.word	0x40020c00
 8006b54:	40021000 	.word	0x40021000
 8006b58:	40021c00 	.word	0x40021c00
 8006b5c:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	4a83      	ldr	r2, [pc, #524]	; (8006d74 <extInt_Config+0xb70>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d106      	bne.n	8006b7a <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8006b6c:	4b82      	ldr	r3, [pc, #520]	; (8006d78 <extInt_Config+0xb74>)
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	4a81      	ldr	r2, [pc, #516]	; (8006d78 <extInt_Config+0xb74>)
 8006b72:	f043 0302 	orr.w	r3, r3, #2
 8006b76:	6153      	str	r3, [r2, #20]
		break;
 8006b78:	e135      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	4a7e      	ldr	r2, [pc, #504]	; (8006d7c <extInt_Config+0xb78>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d106      	bne.n	8006b94 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8006b86:	4b7c      	ldr	r3, [pc, #496]	; (8006d78 <extInt_Config+0xb74>)
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	4a7b      	ldr	r2, [pc, #492]	; (8006d78 <extInt_Config+0xb74>)
 8006b8c:	f043 0303 	orr.w	r3, r3, #3
 8006b90:	6153      	str	r3, [r2, #20]
		break;
 8006b92:	e128      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	4a79      	ldr	r2, [pc, #484]	; (8006d80 <extInt_Config+0xb7c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d106      	bne.n	8006bae <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8006ba0:	4b75      	ldr	r3, [pc, #468]	; (8006d78 <extInt_Config+0xb74>)
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	4a74      	ldr	r2, [pc, #464]	; (8006d78 <extInt_Config+0xb74>)
 8006ba6:	f043 0304 	orr.w	r3, r3, #4
 8006baa:	6153      	str	r3, [r2, #20]
		break;
 8006bac:	e11b      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	4a73      	ldr	r2, [pc, #460]	; (8006d84 <extInt_Config+0xb80>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d106      	bne.n	8006bc8 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8006bba:	4b6f      	ldr	r3, [pc, #444]	; (8006d78 <extInt_Config+0xb74>)
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	4a6e      	ldr	r2, [pc, #440]	; (8006d78 <extInt_Config+0xb74>)
 8006bc0:	f043 0307 	orr.w	r3, r3, #7
 8006bc4:	6153      	str	r3, [r2, #20]
		break;
 8006bc6:	e10e      	b.n	8006de6 <extInt_Config+0xbe2>
			__NOP();
 8006bc8:	bf00      	nop
		break;
 8006bca:	e10c      	b.n	8006de6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8006bcc:	4b6a      	ldr	r3, [pc, #424]	; (8006d78 <extInt_Config+0xb74>)
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	4a69      	ldr	r2, [pc, #420]	; (8006d78 <extInt_Config+0xb74>)
 8006bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bd6:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	4a6a      	ldr	r2, [pc, #424]	; (8006d88 <extInt_Config+0xb84>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d104      	bne.n	8006bee <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8006be4:	4b64      	ldr	r3, [pc, #400]	; (8006d78 <extInt_Config+0xb74>)
 8006be6:	4a64      	ldr	r2, [pc, #400]	; (8006d78 <extInt_Config+0xb74>)
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8006bec:	e0fb      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	4a65      	ldr	r2, [pc, #404]	; (8006d8c <extInt_Config+0xb88>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d106      	bne.n	8006c08 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8006bfa:	4b5f      	ldr	r3, [pc, #380]	; (8006d78 <extInt_Config+0xb74>)
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	4a5e      	ldr	r2, [pc, #376]	; (8006d78 <extInt_Config+0xb74>)
 8006c00:	f043 0310 	orr.w	r3, r3, #16
 8006c04:	6153      	str	r3, [r2, #20]
		break;
 8006c06:	e0ee      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	4a59      	ldr	r2, [pc, #356]	; (8006d74 <extInt_Config+0xb70>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d106      	bne.n	8006c22 <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8006c14:	4b58      	ldr	r3, [pc, #352]	; (8006d78 <extInt_Config+0xb74>)
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	4a57      	ldr	r2, [pc, #348]	; (8006d78 <extInt_Config+0xb74>)
 8006c1a:	f043 0320 	orr.w	r3, r3, #32
 8006c1e:	6153      	str	r3, [r2, #20]
		break;
 8006c20:	e0e1      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	4a54      	ldr	r2, [pc, #336]	; (8006d7c <extInt_Config+0xb78>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d106      	bne.n	8006c3c <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8006c2e:	4b52      	ldr	r3, [pc, #328]	; (8006d78 <extInt_Config+0xb74>)
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	4a51      	ldr	r2, [pc, #324]	; (8006d78 <extInt_Config+0xb74>)
 8006c34:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006c38:	6153      	str	r3, [r2, #20]
		break;
 8006c3a:	e0d4      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	4a4f      	ldr	r2, [pc, #316]	; (8006d80 <extInt_Config+0xb7c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d106      	bne.n	8006c56 <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8006c48:	4b4b      	ldr	r3, [pc, #300]	; (8006d78 <extInt_Config+0xb74>)
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	4a4a      	ldr	r2, [pc, #296]	; (8006d78 <extInt_Config+0xb74>)
 8006c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c52:	6153      	str	r3, [r2, #20]
		break;
 8006c54:	e0c7      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	4a49      	ldr	r2, [pc, #292]	; (8006d84 <extInt_Config+0xb80>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d106      	bne.n	8006c70 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8006c62:	4b45      	ldr	r3, [pc, #276]	; (8006d78 <extInt_Config+0xb74>)
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	4a44      	ldr	r2, [pc, #272]	; (8006d78 <extInt_Config+0xb74>)
 8006c68:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006c6c:	6153      	str	r3, [r2, #20]
		break;
 8006c6e:	e0ba      	b.n	8006de6 <extInt_Config+0xbe2>
			__NOP();
 8006c70:	bf00      	nop
		break;
 8006c72:	e0b8      	b.n	8006de6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8006c74:	4b40      	ldr	r3, [pc, #256]	; (8006d78 <extInt_Config+0xb74>)
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	4a3f      	ldr	r2, [pc, #252]	; (8006d78 <extInt_Config+0xb74>)
 8006c7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c7e:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	4a40      	ldr	r2, [pc, #256]	; (8006d88 <extInt_Config+0xb84>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d104      	bne.n	8006c96 <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8006c8c:	4b3a      	ldr	r3, [pc, #232]	; (8006d78 <extInt_Config+0xb74>)
 8006c8e:	4a3a      	ldr	r2, [pc, #232]	; (8006d78 <extInt_Config+0xb74>)
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8006c94:	e0a7      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	4a3b      	ldr	r2, [pc, #236]	; (8006d8c <extInt_Config+0xb88>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d106      	bne.n	8006cb0 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8006ca2:	4b35      	ldr	r3, [pc, #212]	; (8006d78 <extInt_Config+0xb74>)
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	4a34      	ldr	r2, [pc, #208]	; (8006d78 <extInt_Config+0xb74>)
 8006ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cac:	6153      	str	r3, [r2, #20]
		break;
 8006cae:	e09a      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	4a2f      	ldr	r2, [pc, #188]	; (8006d74 <extInt_Config+0xb70>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d106      	bne.n	8006cca <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8006cbc:	4b2e      	ldr	r3, [pc, #184]	; (8006d78 <extInt_Config+0xb74>)
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	4a2d      	ldr	r2, [pc, #180]	; (8006d78 <extInt_Config+0xb74>)
 8006cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cc6:	6153      	str	r3, [r2, #20]
		break;
 8006cc8:	e08d      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	4a2a      	ldr	r2, [pc, #168]	; (8006d7c <extInt_Config+0xb78>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d106      	bne.n	8006ce4 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8006cd6:	4b28      	ldr	r3, [pc, #160]	; (8006d78 <extInt_Config+0xb74>)
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	4a27      	ldr	r2, [pc, #156]	; (8006d78 <extInt_Config+0xb74>)
 8006cdc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006ce0:	6153      	str	r3, [r2, #20]
		break;
 8006ce2:	e080      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	4a25      	ldr	r2, [pc, #148]	; (8006d80 <extInt_Config+0xb7c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d106      	bne.n	8006cfe <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8006cf0:	4b21      	ldr	r3, [pc, #132]	; (8006d78 <extInt_Config+0xb74>)
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	4a20      	ldr	r2, [pc, #128]	; (8006d78 <extInt_Config+0xb74>)
 8006cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cfa:	6153      	str	r3, [r2, #20]
		break;
 8006cfc:	e073      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	4a1f      	ldr	r2, [pc, #124]	; (8006d84 <extInt_Config+0xb80>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d106      	bne.n	8006d18 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8006d0a:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <extInt_Config+0xb74>)
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	4a1a      	ldr	r2, [pc, #104]	; (8006d78 <extInt_Config+0xb74>)
 8006d10:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006d14:	6153      	str	r3, [r2, #20]
		break;
 8006d16:	e066      	b.n	8006de6 <extInt_Config+0xbe2>
			__NOP();
 8006d18:	bf00      	nop
		break;
 8006d1a:	e064      	b.n	8006de6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8006d1c:	4b16      	ldr	r3, [pc, #88]	; (8006d78 <extInt_Config+0xb74>)
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	4a15      	ldr	r2, [pc, #84]	; (8006d78 <extInt_Config+0xb74>)
 8006d22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d26:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	4a16      	ldr	r2, [pc, #88]	; (8006d88 <extInt_Config+0xb84>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d104      	bne.n	8006d3e <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8006d34:	4b10      	ldr	r3, [pc, #64]	; (8006d78 <extInt_Config+0xb74>)
 8006d36:	4a10      	ldr	r2, [pc, #64]	; (8006d78 <extInt_Config+0xb74>)
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8006d3c:	e053      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	4a11      	ldr	r2, [pc, #68]	; (8006d8c <extInt_Config+0xb88>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d106      	bne.n	8006d58 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <extInt_Config+0xb74>)
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	4a0a      	ldr	r2, [pc, #40]	; (8006d78 <extInt_Config+0xb74>)
 8006d50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d54:	6153      	str	r3, [r2, #20]
		break;
 8006d56:	e046      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	4a05      	ldr	r2, [pc, #20]	; (8006d74 <extInt_Config+0xb70>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d115      	bne.n	8006d90 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8006d64:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <extInt_Config+0xb74>)
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	4a03      	ldr	r2, [pc, #12]	; (8006d78 <extInt_Config+0xb74>)
 8006d6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d6e:	6153      	str	r3, [r2, #20]
		break;
 8006d70:	e039      	b.n	8006de6 <extInt_Config+0xbe2>
 8006d72:	bf00      	nop
 8006d74:	40020800 	.word	0x40020800
 8006d78:	40013800 	.word	0x40013800
 8006d7c:	40020c00 	.word	0x40020c00
 8006d80:	40021000 	.word	0x40021000
 8006d84:	40021c00 	.word	0x40021c00
 8006d88:	40020000 	.word	0x40020000
 8006d8c:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	4a9d      	ldr	r2, [pc, #628]	; (800700c <extInt_Config+0xe08>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d106      	bne.n	8006daa <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8006d9c:	4b9c      	ldr	r3, [pc, #624]	; (8007010 <extInt_Config+0xe0c>)
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	4a9b      	ldr	r2, [pc, #620]	; (8007010 <extInt_Config+0xe0c>)
 8006da2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006da6:	6153      	str	r3, [r2, #20]
		break;
 8006da8:	e01d      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	4a98      	ldr	r2, [pc, #608]	; (8007014 <extInt_Config+0xe10>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d106      	bne.n	8006dc4 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8006db6:	4b96      	ldr	r3, [pc, #600]	; (8007010 <extInt_Config+0xe0c>)
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	4a95      	ldr	r2, [pc, #596]	; (8007010 <extInt_Config+0xe0c>)
 8006dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dc0:	6153      	str	r3, [r2, #20]
		break;
 8006dc2:	e010      	b.n	8006de6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	4a93      	ldr	r2, [pc, #588]	; (8007018 <extInt_Config+0xe14>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d106      	bne.n	8006dde <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8006dd0:	4b8f      	ldr	r3, [pc, #572]	; (8007010 <extInt_Config+0xe0c>)
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	4a8e      	ldr	r2, [pc, #568]	; (8007010 <extInt_Config+0xe0c>)
 8006dd6:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006dda:	6153      	str	r3, [r2, #20]
		break;
 8006ddc:	e003      	b.n	8006de6 <extInt_Config+0xbe2>
			__NOP();
 8006dde:	bf00      	nop
		break;
 8006de0:	e001      	b.n	8006de6 <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 8006de2:	bf00      	nop
		break;
 8006de4:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	791b      	ldrb	r3, [r3, #4]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d126      	bne.n	8006e3c <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006dee:	4b8b      	ldr	r3, [pc, #556]	; (800701c <extInt_Config+0xe18>)
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	6812      	ldr	r2, [r2, #0]
 8006df6:	7812      	ldrb	r2, [r2, #0]
 8006df8:	4611      	mov	r1, r2
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	408a      	lsls	r2, r1
 8006dfe:	43d2      	mvns	r2, r2
 8006e00:	4611      	mov	r1, r2
 8006e02:	4a86      	ldr	r2, [pc, #536]	; (800701c <extInt_Config+0xe18>)
 8006e04:	400b      	ands	r3, r1
 8006e06:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006e08:	4b84      	ldr	r3, [pc, #528]	; (800701c <extInt_Config+0xe18>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6812      	ldr	r2, [r2, #0]
 8006e10:	7812      	ldrb	r2, [r2, #0]
 8006e12:	4611      	mov	r1, r2
 8006e14:	2201      	movs	r2, #1
 8006e16:	408a      	lsls	r2, r1
 8006e18:	43d2      	mvns	r2, r2
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4a7f      	ldr	r2, [pc, #508]	; (800701c <extInt_Config+0xe18>)
 8006e1e:	400b      	ands	r3, r1
 8006e20:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006e22:	4b7e      	ldr	r3, [pc, #504]	; (800701c <extInt_Config+0xe18>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	7812      	ldrb	r2, [r2, #0]
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	2201      	movs	r2, #1
 8006e30:	408a      	lsls	r2, r1
 8006e32:	4611      	mov	r1, r2
 8006e34:	4a79      	ldr	r2, [pc, #484]	; (800701c <extInt_Config+0xe18>)
 8006e36:	430b      	orrs	r3, r1
 8006e38:	6093      	str	r3, [r2, #8]
 8006e3a:	e05c      	b.n	8006ef6 <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	791b      	ldrb	r3, [r3, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d126      	bne.n	8006e92 <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006e44:	4b75      	ldr	r3, [pc, #468]	; (800701c <extInt_Config+0xe18>)
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6812      	ldr	r2, [r2, #0]
 8006e4c:	7812      	ldrb	r2, [r2, #0]
 8006e4e:	4611      	mov	r1, r2
 8006e50:	2201      	movs	r2, #1
 8006e52:	408a      	lsls	r2, r1
 8006e54:	43d2      	mvns	r2, r2
 8006e56:	4611      	mov	r1, r2
 8006e58:	4a70      	ldr	r2, [pc, #448]	; (800701c <extInt_Config+0xe18>)
 8006e5a:	400b      	ands	r3, r1
 8006e5c:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006e5e:	4b6f      	ldr	r3, [pc, #444]	; (800701c <extInt_Config+0xe18>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6812      	ldr	r2, [r2, #0]
 8006e66:	7812      	ldrb	r2, [r2, #0]
 8006e68:	4611      	mov	r1, r2
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	408a      	lsls	r2, r1
 8006e6e:	43d2      	mvns	r2, r2
 8006e70:	4611      	mov	r1, r2
 8006e72:	4a6a      	ldr	r2, [pc, #424]	; (800701c <extInt_Config+0xe18>)
 8006e74:	400b      	ands	r3, r1
 8006e76:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006e78:	4b68      	ldr	r3, [pc, #416]	; (800701c <extInt_Config+0xe18>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6812      	ldr	r2, [r2, #0]
 8006e80:	7812      	ldrb	r2, [r2, #0]
 8006e82:	4611      	mov	r1, r2
 8006e84:	2201      	movs	r2, #1
 8006e86:	408a      	lsls	r2, r1
 8006e88:	4611      	mov	r1, r2
 8006e8a:	4a64      	ldr	r2, [pc, #400]	; (800701c <extInt_Config+0xe18>)
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	60d3      	str	r3, [r2, #12]
 8006e90:	e031      	b.n	8006ef6 <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006e92:	4b62      	ldr	r3, [pc, #392]	; (800701c <extInt_Config+0xe18>)
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6812      	ldr	r2, [r2, #0]
 8006e9a:	7812      	ldrb	r2, [r2, #0]
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	408a      	lsls	r2, r1
 8006ea2:	43d2      	mvns	r2, r2
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	4a5d      	ldr	r2, [pc, #372]	; (800701c <extInt_Config+0xe18>)
 8006ea8:	400b      	ands	r3, r1
 8006eaa:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006eac:	4b5b      	ldr	r3, [pc, #364]	; (800701c <extInt_Config+0xe18>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6812      	ldr	r2, [r2, #0]
 8006eb4:	7812      	ldrb	r2, [r2, #0]
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	2201      	movs	r2, #1
 8006eba:	408a      	lsls	r2, r1
 8006ebc:	43d2      	mvns	r2, r2
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	4a56      	ldr	r2, [pc, #344]	; (800701c <extInt_Config+0xe18>)
 8006ec2:	400b      	ands	r3, r1
 8006ec4:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006ec6:	4b55      	ldr	r3, [pc, #340]	; (800701c <extInt_Config+0xe18>)
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6812      	ldr	r2, [r2, #0]
 8006ece:	7812      	ldrb	r2, [r2, #0]
 8006ed0:	4611      	mov	r1, r2
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	408a      	lsls	r2, r1
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	4a50      	ldr	r2, [pc, #320]	; (800701c <extInt_Config+0xe18>)
 8006eda:	430b      	orrs	r3, r1
 8006edc:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006ede:	4b4f      	ldr	r3, [pc, #316]	; (800701c <extInt_Config+0xe18>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6812      	ldr	r2, [r2, #0]
 8006ee6:	7812      	ldrb	r2, [r2, #0]
 8006ee8:	4611      	mov	r1, r2
 8006eea:	2201      	movs	r2, #1
 8006eec:	408a      	lsls	r2, r1
 8006eee:	4611      	mov	r1, r2
 8006ef0:	4a4a      	ldr	r2, [pc, #296]	; (800701c <extInt_Config+0xe18>)
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006ef6:	4b49      	ldr	r3, [pc, #292]	; (800701c <extInt_Config+0xe18>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	7812      	ldrb	r2, [r2, #0]
 8006f00:	4611      	mov	r1, r2
 8006f02:	2201      	movs	r2, #1
 8006f04:	408a      	lsls	r2, r1
 8006f06:	43d2      	mvns	r2, r2
 8006f08:	4611      	mov	r1, r2
 8006f0a:	4a44      	ldr	r2, [pc, #272]	; (800701c <extInt_Config+0xe18>)
 8006f0c:	400b      	ands	r3, r1
 8006f0e:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006f10:	4b42      	ldr	r3, [pc, #264]	; (800701c <extInt_Config+0xe18>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6812      	ldr	r2, [r2, #0]
 8006f18:	7812      	ldrb	r2, [r2, #0]
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	408a      	lsls	r2, r1
 8006f20:	4611      	mov	r1, r2
 8006f22:	4a3e      	ldr	r2, [pc, #248]	; (800701c <extInt_Config+0xe18>)
 8006f24:	430b      	orrs	r3, r1
 8006f26:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f28:	b672      	cpsid	i
}
 8006f2a:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b0f      	cmp	r3, #15
 8006f34:	d862      	bhi.n	8006ffc <extInt_Config+0xdf8>
 8006f36:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <extInt_Config+0xd38>)
 8006f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3c:	08006f7d 	.word	0x08006f7d
 8006f40:	08006f85 	.word	0x08006f85
 8006f44:	08006f8d 	.word	0x08006f8d
 8006f48:	08006f95 	.word	0x08006f95
 8006f4c:	08006f9d 	.word	0x08006f9d
 8006f50:	08006fa5 	.word	0x08006fa5
 8006f54:	08006fad 	.word	0x08006fad
 8006f58:	08006fb5 	.word	0x08006fb5
 8006f5c:	08006fbd 	.word	0x08006fbd
 8006f60:	08006fc5 	.word	0x08006fc5
 8006f64:	08006fcd 	.word	0x08006fcd
 8006f68:	08006fd5 	.word	0x08006fd5
 8006f6c:	08006fdd 	.word	0x08006fdd
 8006f70:	08006fe5 	.word	0x08006fe5
 8006f74:	08006fed 	.word	0x08006fed
 8006f78:	08006ff5 	.word	0x08006ff5
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8006f7c:	2006      	movs	r0, #6
 8006f7e:	f7ff f8f9 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006f82:	e03c      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8006f84:	2007      	movs	r0, #7
 8006f86:	f7ff f8f5 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006f8a:	e038      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 8006f8c:	2008      	movs	r0, #8
 8006f8e:	f7ff f8f1 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006f92:	e034      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 8006f94:	2009      	movs	r0, #9
 8006f96:	f7ff f8ed 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006f9a:	e030      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 8006f9c:	200a      	movs	r0, #10
 8006f9e:	f7ff f8e9 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006fa2:	e02c      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006fa4:	2017      	movs	r0, #23
 8006fa6:	f7ff f8e5 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006faa:	e028      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006fac:	2017      	movs	r0, #23
 8006fae:	f7ff f8e1 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006fb2:	e024      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006fb4:	2017      	movs	r0, #23
 8006fb6:	f7ff f8dd 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006fba:	e020      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006fbc:	2017      	movs	r0, #23
 8006fbe:	f7ff f8d9 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006fc2:	e01c      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006fc4:	2017      	movs	r0, #23
 8006fc6:	f7ff f8d5 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006fca:	e018      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006fcc:	2028      	movs	r0, #40	; 0x28
 8006fce:	f7ff f8d1 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006fd2:	e014      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006fd4:	2028      	movs	r0, #40	; 0x28
 8006fd6:	f7ff f8cd 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006fda:	e010      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006fdc:	2028      	movs	r0, #40	; 0x28
 8006fde:	f7ff f8c9 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006fe2:	e00c      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006fe4:	2028      	movs	r0, #40	; 0x28
 8006fe6:	f7ff f8c5 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006fea:	e008      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006fec:	2028      	movs	r0, #40	; 0x28
 8006fee:	f7ff f8c1 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006ff2:	e004      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006ff4:	2028      	movs	r0, #40	; 0x28
 8006ff6:	f7ff f8bd 	bl	8006174 <__NVIC_EnableIRQ>
		break;
 8006ffa:	e000      	b.n	8006ffe <extInt_Config+0xdfa>
	}

	default: {
		break;
 8006ffc:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8006ffe:	b662      	cpsie	i
}
 8007000:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8007002:	bf00      	nop
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	40020c00 	.word	0x40020c00
 8007010:	40013800 	.word	0x40013800
 8007014:	40021000 	.word	0x40021000
 8007018:	40021c00 	.word	0x40021c00
 800701c:	40013c00 	.word	0x40013c00

08007020 <exti_Config_Int_Priority>:


void exti_Config_Int_Priority(EXTI_Config_t *extiConfig, uint8_t newPriority)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800702c:	b672      	cpsid	i
}
 800702e:	bf00      	nop
	//Desabilitamos las interrupciones globales
	__disable_irq();
	//Configuramos la nueva prioridad
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b0f      	cmp	r3, #15
 8007038:	d84c      	bhi.n	80070d4 <exti_Config_Int_Priority+0xb4>
 800703a:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <exti_Config_Int_Priority+0x20>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	08007081 	.word	0x08007081
 8007044:	0800708d 	.word	0x0800708d
 8007048:	08007099 	.word	0x08007099
 800704c:	080070a5 	.word	0x080070a5
 8007050:	080070b1 	.word	0x080070b1
 8007054:	080070bd 	.word	0x080070bd
 8007058:	080070bd 	.word	0x080070bd
 800705c:	080070bd 	.word	0x080070bd
 8007060:	080070bd 	.word	0x080070bd
 8007064:	080070bd 	.word	0x080070bd
 8007068:	080070c9 	.word	0x080070c9
 800706c:	080070c9 	.word	0x080070c9
 8007070:	080070c9 	.word	0x080070c9
 8007074:	080070c9 	.word	0x080070c9
 8007078:	080070c9 	.word	0x080070c9
 800707c:	080070c9 	.word	0x080070c9
	{
	case 0:
	{
		NVIC_SetPriority(EXTI0_IRQn, newPriority);
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	4619      	mov	r1, r3
 8007084:	2006      	movs	r0, #6
 8007086:	f7ff f893 	bl	80061b0 <__NVIC_SetPriority>
		break;
 800708a:	e024      	b.n	80070d6 <exti_Config_Int_Priority+0xb6>
	}
	case 1:
	{
		NVIC_SetPriority(EXTI1_IRQn, newPriority);
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	4619      	mov	r1, r3
 8007090:	2007      	movs	r0, #7
 8007092:	f7ff f88d 	bl	80061b0 <__NVIC_SetPriority>
		break;
 8007096:	e01e      	b.n	80070d6 <exti_Config_Int_Priority+0xb6>
	}
	case 2:
	{
		NVIC_SetPriority(EXTI2_IRQn, newPriority);
 8007098:	78fb      	ldrb	r3, [r7, #3]
 800709a:	4619      	mov	r1, r3
 800709c:	2008      	movs	r0, #8
 800709e:	f7ff f887 	bl	80061b0 <__NVIC_SetPriority>
		break;
 80070a2:	e018      	b.n	80070d6 <exti_Config_Int_Priority+0xb6>
	}
	case 3:
	{
		NVIC_SetPriority(EXTI3_IRQn, newPriority);
 80070a4:	78fb      	ldrb	r3, [r7, #3]
 80070a6:	4619      	mov	r1, r3
 80070a8:	2009      	movs	r0, #9
 80070aa:	f7ff f881 	bl	80061b0 <__NVIC_SetPriority>
		break;
 80070ae:	e012      	b.n	80070d6 <exti_Config_Int_Priority+0xb6>
	}
	case 4:
	{
		NVIC_SetPriority(EXTI4_IRQn, newPriority);
 80070b0:	78fb      	ldrb	r3, [r7, #3]
 80070b2:	4619      	mov	r1, r3
 80070b4:	200a      	movs	r0, #10
 80070b6:	f7ff f87b 	bl	80061b0 <__NVIC_SetPriority>
		break;
 80070ba:	e00c      	b.n	80070d6 <exti_Config_Int_Priority+0xb6>
	case 6:
	case 7:
	case 8:
	case 9:
	{
		NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 80070bc:	78fb      	ldrb	r3, [r7, #3]
 80070be:	4619      	mov	r1, r3
 80070c0:	2017      	movs	r0, #23
 80070c2:	f7ff f875 	bl	80061b0 <__NVIC_SetPriority>
		break;
 80070c6:	e006      	b.n	80070d6 <exti_Config_Int_Priority+0xb6>
	case 12:
	case 13:
	case 14:
	case 15:
	{
		NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 80070c8:	78fb      	ldrb	r3, [r7, #3]
 80070ca:	4619      	mov	r1, r3
 80070cc:	2028      	movs	r0, #40	; 0x28
 80070ce:	f7ff f86f 	bl	80061b0 <__NVIC_SetPriority>
		break;
 80070d2:	e000      	b.n	80070d6 <exti_Config_Int_Priority+0xb6>
	}
	default:{  break;  }
 80070d4:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80070d6:	b662      	cpsie	i
}
 80070d8:	bf00      	nop
	}
	//Activamos las interrupciones globales
	__enable_irq();
}
 80070da:	bf00      	nop
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop

080070e4 <callback_extInt0>:


//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0
	__NOP();
 80070e8:	bf00      	nop
}
 80070ea:	bf00      	nop
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <callback_extInt1>:

__attribute__ ((weak)) void callback_extInt1(void){
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
	__NOP();
 80070f8:	bf00      	nop
}
 80070fa:	bf00      	nop
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt2(void){
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
	__NOP();
 8007108:	bf00      	nop
}
 800710a:	bf00      	nop
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <callback_extInt3>:

__attribute__ ((weak)) void callback_extInt3(void){
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
	__NOP();
 8007118:	bf00      	nop
}
 800711a:	bf00      	nop
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt4(void){
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
	__NOP();
 8007128:	bf00      	nop
}
 800712a:	bf00      	nop
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8007134:	b480      	push	{r7}
 8007136:	af00      	add	r7, sp, #0
	__NOP();
 8007138:	bf00      	nop
}
 800713a:	bf00      	nop
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
	__NOP();
 8007148:	bf00      	nop
}
 800714a:	bf00      	nop
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8007154:	b480      	push	{r7}
 8007156:	af00      	add	r7, sp, #0
	__NOP();
 8007158:	bf00      	nop
}
 800715a:	bf00      	nop
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
	__NOP();
 8007168:	bf00      	nop
}
 800716a:	bf00      	nop
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
	__NOP();
 8007178:	bf00      	nop
}
 800717a:	bf00      	nop
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
	__NOP();
 8007188:	bf00      	nop
}
 800718a:	bf00      	nop
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0
	__NOP();
 8007198:	bf00      	nop
}
 800719a:	bf00      	nop
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
	__NOP();
 80071a8:	bf00      	nop
}
 80071aa:	bf00      	nop
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
	__NOP();
 80071b8:	bf00      	nop
}
 80071ba:	bf00      	nop
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
	__NOP();
 80071c8:	bf00      	nop
}
 80071ca:	bf00      	nop
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 80071d4:	b480      	push	{r7}
 80071d6:	af00      	add	r7, sp, #0
	__NOP();
 80071d8:	bf00      	nop
}
 80071da:	bf00      	nop
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 80071e8:	4b08      	ldr	r3, [pc, #32]	; (800720c <EXTI0_IRQHandler+0x28>)
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d008      	beq.n	8007206 <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 80071f4:	4b05      	ldr	r3, [pc, #20]	; (800720c <EXTI0_IRQHandler+0x28>)
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	4a04      	ldr	r2, [pc, #16]	; (800720c <EXTI0_IRQHandler+0x28>)
 80071fa:	f043 0301 	orr.w	r3, r3, #1
 80071fe:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8007200:	f7ff ff70 	bl	80070e4 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8007204:	e000      	b.n	8007208 <EXTI0_IRQHandler+0x24>
		__NOP();
 8007206:	bf00      	nop
}
 8007208:	bf00      	nop
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40013c00 	.word	0x40013c00

08007210 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8007214:	4b08      	ldr	r3, [pc, #32]	; (8007238 <EXTI1_IRQHandler+0x28>)
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d008      	beq.n	8007232 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8007220:	4b05      	ldr	r3, [pc, #20]	; (8007238 <EXTI1_IRQHandler+0x28>)
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	4a04      	ldr	r2, [pc, #16]	; (8007238 <EXTI1_IRQHandler+0x28>)
 8007226:	f043 0302 	orr.w	r3, r3, #2
 800722a:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 800722c:	f7ff ff62 	bl	80070f4 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8007230:	e000      	b.n	8007234 <EXTI1_IRQHandler+0x24>
		__NOP();
 8007232:	bf00      	nop
}
 8007234:	bf00      	nop
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40013c00 	.word	0x40013c00

0800723c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8007240:	4b08      	ldr	r3, [pc, #32]	; (8007264 <EXTI2_IRQHandler+0x28>)
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	d008      	beq.n	800725e <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 800724c:	4b05      	ldr	r3, [pc, #20]	; (8007264 <EXTI2_IRQHandler+0x28>)
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	4a04      	ldr	r2, [pc, #16]	; (8007264 <EXTI2_IRQHandler+0x28>)
 8007252:	f043 0304 	orr.w	r3, r3, #4
 8007256:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8007258:	f7ff ff54 	bl	8007104 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 800725c:	e000      	b.n	8007260 <EXTI2_IRQHandler+0x24>
		__NOP();
 800725e:	bf00      	nop
}
 8007260:	bf00      	nop
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40013c00 	.word	0x40013c00

08007268 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 800726c:	4b08      	ldr	r3, [pc, #32]	; (8007290 <EXTI3_IRQHandler+0x28>)
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	f003 0308 	and.w	r3, r3, #8
 8007274:	2b00      	cmp	r3, #0
 8007276:	d008      	beq.n	800728a <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <EXTI3_IRQHandler+0x28>)
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	4a04      	ldr	r2, [pc, #16]	; (8007290 <EXTI3_IRQHandler+0x28>)
 800727e:	f043 0308 	orr.w	r3, r3, #8
 8007282:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 8007284:	f7ff ff46 	bl	8007114 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 8007288:	e000      	b.n	800728c <EXTI3_IRQHandler+0x24>
		__NOP();
 800728a:	bf00      	nop
}
 800728c:	bf00      	nop
 800728e:	bd80      	pop	{r7, pc}
 8007290:	40013c00 	.word	0x40013c00

08007294 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 8007298:	4b08      	ldr	r3, [pc, #32]	; (80072bc <EXTI4_IRQHandler+0x28>)
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	f003 0310 	and.w	r3, r3, #16
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d008      	beq.n	80072b6 <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 80072a4:	4b05      	ldr	r3, [pc, #20]	; (80072bc <EXTI4_IRQHandler+0x28>)
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	4a04      	ldr	r2, [pc, #16]	; (80072bc <EXTI4_IRQHandler+0x28>)
 80072aa:	f043 0310 	orr.w	r3, r3, #16
 80072ae:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 80072b0:	f7ff ff38 	bl	8007124 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 80072b4:	e000      	b.n	80072b8 <EXTI4_IRQHandler+0x24>
		__NOP();
 80072b6:	bf00      	nop
}
 80072b8:	bf00      	nop
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40013c00 	.word	0x40013c00

080072c0 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 80072c4:	4b26      	ldr	r3, [pc, #152]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d008      	beq.n	80072e2 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 80072d0:	4b23      	ldr	r3, [pc, #140]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	4a22      	ldr	r2, [pc, #136]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 80072d6:	f043 0320 	orr.w	r3, r3, #32
 80072da:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 80072dc:	f7ff ff2a 	bl	8007134 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 80072e0:	e03c      	b.n	800735c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 80072e2:	4b1f      	ldr	r3, [pc, #124]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d008      	beq.n	8007300 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 80072ee:	4b1c      	ldr	r3, [pc, #112]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	4a1b      	ldr	r2, [pc, #108]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 80072f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f8:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 80072fa:	f7ff ff23 	bl	8007144 <callback_extInt6>
}
 80072fe:	e02d      	b.n	800735c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8007300:	4b17      	ldr	r3, [pc, #92]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007308:	2b00      	cmp	r3, #0
 800730a:	d008      	beq.n	800731e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 800730c:	4b14      	ldr	r3, [pc, #80]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	4a13      	ldr	r2, [pc, #76]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 8007312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007316:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8007318:	f7ff ff1c 	bl	8007154 <callback_extInt7>
}
 800731c:	e01e      	b.n	800735c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 800731e:	4b10      	ldr	r3, [pc, #64]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007326:	2b00      	cmp	r3, #0
 8007328:	d008      	beq.n	800733c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 800732a:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	4a0c      	ldr	r2, [pc, #48]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 8007330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007334:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 8007336:	f7ff ff15 	bl	8007164 <callback_extInt8>
}
 800733a:	e00f      	b.n	800735c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 800733c:	4b08      	ldr	r3, [pc, #32]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007344:	2b00      	cmp	r3, #0
 8007346:	d008      	beq.n	800735a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8007348:	4b05      	ldr	r3, [pc, #20]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	4a04      	ldr	r2, [pc, #16]	; (8007360 <EXTI9_5_IRQHandler+0xa0>)
 800734e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007352:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8007354:	f7ff ff0e 	bl	8007174 <callback_extInt9>
}
 8007358:	e000      	b.n	800735c <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800735a:	bf00      	nop
}
 800735c:	bf00      	nop
 800735e:	bd80      	pop	{r7, pc}
 8007360:	40013c00 	.word	0x40013c00

08007364 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8007368:	4b2e      	ldr	r3, [pc, #184]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007370:	2b00      	cmp	r3, #0
 8007372:	d008      	beq.n	8007386 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 8007374:	4b2b      	ldr	r3, [pc, #172]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	4a2a      	ldr	r2, [pc, #168]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 800737a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800737e:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 8007380:	f7ff ff00 	bl	8007184 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 8007384:	e04b      	b.n	800741e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 8007386:	4b27      	ldr	r3, [pc, #156]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800738e:	2b00      	cmp	r3, #0
 8007390:	d008      	beq.n	80073a4 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 8007392:	4b24      	ldr	r3, [pc, #144]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	4a23      	ldr	r2, [pc, #140]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 8007398:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800739c:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 800739e:	f7ff fef9 	bl	8007194 <callback_extInt11>
}
 80073a2:	e03c      	b.n	800741e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 80073a4:	4b1f      	ldr	r3, [pc, #124]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d008      	beq.n	80073c2 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 80073b0:	4b1c      	ldr	r3, [pc, #112]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	4a1b      	ldr	r2, [pc, #108]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 80073b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80073ba:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 80073bc:	f7ff fef2 	bl	80071a4 <callback_extInt12>
}
 80073c0:	e02d      	b.n	800741e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 80073c2:	4b18      	ldr	r3, [pc, #96]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d008      	beq.n	80073e0 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 80073ce:	4b15      	ldr	r3, [pc, #84]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	4a14      	ldr	r2, [pc, #80]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 80073d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80073d8:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 80073da:	f7ff feeb 	bl	80071b4 <callback_extInt13>
}
 80073de:	e01e      	b.n	800741e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 80073e0:	4b10      	ldr	r3, [pc, #64]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d008      	beq.n	80073fe <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 80073ec:	4b0d      	ldr	r3, [pc, #52]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	4a0c      	ldr	r2, [pc, #48]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 80073f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073f6:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 80073f8:	f7ff fee4 	bl	80071c4 <callback_extInt14>
}
 80073fc:	e00f      	b.n	800741e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 80073fe:	4b09      	ldr	r3, [pc, #36]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d008      	beq.n	800741c <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 800740a:	4b06      	ldr	r3, [pc, #24]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	4a05      	ldr	r2, [pc, #20]	; (8007424 <EXTI15_10_IRQHandler+0xc0>)
 8007410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007414:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8007416:	f7ff fedd 	bl	80071d4 <callback_extInt15>
}
 800741a:	e000      	b.n	800741e <EXTI15_10_IRQHandler+0xba>
		__NOP();
 800741c:	bf00      	nop
}
 800741e:	bf00      	nop
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	40013c00 	.word	0x40013c00

08007428 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	4608      	mov	r0, r1
 8007432:	4611      	mov	r1, r2
 8007434:	461a      	mov	r2, r3
 8007436:	4603      	mov	r3, r0
 8007438:	70fb      	strb	r3, [r7, #3]
 800743a:	460b      	mov	r3, r1
 800743c:	70bb      	strb	r3, [r7, #2]
 800743e:	4613      	mov	r3, r2
 8007440:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	78ba      	ldrb	r2, [r7, #2]
 800744c:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	787a      	ldrb	r2, [r7, #1]
 8007452:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	7c3a      	ldrb	r2, [r7, #16]
 8007458:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	7d3a      	ldrb	r2, [r7, #20]
 800745e:	715a      	strb	r2, [r3, #5]
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	4a88      	ldr	r2, [pc, #544]	; (80076a4 <GPIO_Config+0x238>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d106      	bne.n	8007494 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8007486:	4b88      	ldr	r3, [pc, #544]	; (80076a8 <GPIO_Config+0x23c>)
 8007488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748a:	4a87      	ldr	r2, [pc, #540]	; (80076a8 <GPIO_Config+0x23c>)
 800748c:	f043 0301 	orr.w	r3, r3, #1
 8007490:	6313      	str	r3, [r2, #48]	; 0x30
 8007492:	e03a      	b.n	800750a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	4a84      	ldr	r2, [pc, #528]	; (80076ac <GPIO_Config+0x240>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d106      	bne.n	80074ac <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 800749e:	4b82      	ldr	r3, [pc, #520]	; (80076a8 <GPIO_Config+0x23c>)
 80074a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a2:	4a81      	ldr	r2, [pc, #516]	; (80076a8 <GPIO_Config+0x23c>)
 80074a4:	f043 0302 	orr.w	r3, r3, #2
 80074a8:	6313      	str	r3, [r2, #48]	; 0x30
 80074aa:	e02e      	b.n	800750a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	4a7f      	ldr	r2, [pc, #508]	; (80076b0 <GPIO_Config+0x244>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d106      	bne.n	80074c4 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 80074b6:	4b7c      	ldr	r3, [pc, #496]	; (80076a8 <GPIO_Config+0x23c>)
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	4a7b      	ldr	r2, [pc, #492]	; (80076a8 <GPIO_Config+0x23c>)
 80074bc:	f043 0304 	orr.w	r3, r3, #4
 80074c0:	6313      	str	r3, [r2, #48]	; 0x30
 80074c2:	e022      	b.n	800750a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	4a7a      	ldr	r2, [pc, #488]	; (80076b4 <GPIO_Config+0x248>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d106      	bne.n	80074dc <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 80074ce:	4b76      	ldr	r3, [pc, #472]	; (80076a8 <GPIO_Config+0x23c>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	4a75      	ldr	r2, [pc, #468]	; (80076a8 <GPIO_Config+0x23c>)
 80074d4:	f043 0308 	orr.w	r3, r3, #8
 80074d8:	6313      	str	r3, [r2, #48]	; 0x30
 80074da:	e016      	b.n	800750a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	4a75      	ldr	r2, [pc, #468]	; (80076b8 <GPIO_Config+0x24c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d106      	bne.n	80074f4 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 80074e6:	4b70      	ldr	r3, [pc, #448]	; (80076a8 <GPIO_Config+0x23c>)
 80074e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ea:	4a6f      	ldr	r2, [pc, #444]	; (80076a8 <GPIO_Config+0x23c>)
 80074ec:	f043 0310 	orr.w	r3, r3, #16
 80074f0:	6313      	str	r3, [r2, #48]	; 0x30
 80074f2:	e00a      	b.n	800750a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	4a70      	ldr	r2, [pc, #448]	; (80076bc <GPIO_Config+0x250>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d105      	bne.n	800750a <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 80074fe:	4b6a      	ldr	r3, [pc, #424]	; (80076a8 <GPIO_Config+0x23c>)
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	4a69      	ldr	r2, [pc, #420]	; (80076a8 <GPIO_Config+0x23c>)
 8007504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007508:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	785b      	ldrb	r3, [r3, #1]
 800750e:	461a      	mov	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	fa02 f303 	lsl.w	r3, r2, r3
 800751a:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	2103      	movs	r1, #3
 800752a:	fa01 f303 	lsl.w	r3, r1, r3
 800752e:	43db      	mvns	r3, r3
 8007530:	4619      	mov	r1, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	400a      	ands	r2, r1
 8007538:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	6819      	ldr	r1, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	430a      	orrs	r2, r1
 8007548:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	789b      	ldrb	r3, [r3, #2]
 800754e:	461a      	mov	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	fa02 f303 	lsl.w	r3, r2, r3
 8007558:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	4619      	mov	r1, r3
 8007566:	2301      	movs	r3, #1
 8007568:	408b      	lsls	r3, r1
 800756a:	43db      	mvns	r3, r3
 800756c:	4619      	mov	r1, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	400a      	ands	r2, r1
 8007574:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	6859      	ldr	r1, [r3, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	430a      	orrs	r2, r1
 8007584:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	78db      	ldrb	r3, [r3, #3]
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	fa02 f303 	lsl.w	r3, r2, r3
 8007596:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	2103      	movs	r1, #3
 80075a6:	fa01 f303 	lsl.w	r3, r1, r3
 80075aa:	43db      	mvns	r3, r3
 80075ac:	4619      	mov	r1, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	400a      	ands	r2, r1
 80075b4:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	6899      	ldr	r1, [r3, #8]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	791b      	ldrb	r3, [r3, #4]
 80075ca:	461a      	mov	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	fa02 f303 	lsl.w	r3, r2, r3
 80075d6:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	2103      	movs	r1, #3
 80075e6:	fa01 f303 	lsl.w	r3, r1, r3
 80075ea:	43db      	mvns	r3, r3
 80075ec:	4619      	mov	r1, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	400a      	ands	r2, r1
 80075f4:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	68d9      	ldr	r1, [r3, #12]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	430a      	orrs	r2, r1
 8007604:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d143      	bne.n	8007696 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2b07      	cmp	r3, #7
 8007614:	d81f      	bhi.n	8007656 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	6a1a      	ldr	r2, [r3, #32]
 8007624:	210f      	movs	r1, #15
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	fa01 f303 	lsl.w	r3, r1, r3
 800762c:	43db      	mvns	r3, r3
 800762e:	4619      	mov	r1, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	400a      	ands	r2, r1
 8007636:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	6a1a      	ldr	r2, [r3, #32]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	795b      	ldrb	r3, [r3, #5]
 8007642:	4619      	mov	r1, r3
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	fa01 f303 	lsl.w	r3, r1, r3
 800764a:	4619      	mov	r1, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	430a      	orrs	r2, r1
 8007652:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8007654:	e01f      	b.n	8007696 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	3b08      	subs	r3, #8
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007666:	210f      	movs	r1, #15
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	fa01 f303 	lsl.w	r3, r1, r3
 800766e:	43db      	mvns	r3, r3
 8007670:	4619      	mov	r1, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	400a      	ands	r2, r1
 8007678:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	795b      	ldrb	r3, [r3, #5]
 8007684:	4619      	mov	r1, r3
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	fa01 f303 	lsl.w	r3, r1, r3
 800768c:	4619      	mov	r1, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	430a      	orrs	r2, r1
 8007694:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40020000 	.word	0x40020000
 80076a8:	40023800 	.word	0x40023800
 80076ac:	40020400 	.word	0x40020400
 80076b0:	40020800 	.word	0x40020800
 80076b4:	40020c00 	.word	0x40020c00
 80076b8:	40021000 	.word	0x40021000
 80076bc:	40021c00 	.word	0x40021c00

080076c0 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d10d      	bne.n	80076ee <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	699a      	ldr	r2, [r3, #24]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	4619      	mov	r1, r3
 80076de:	2301      	movs	r3, #1
 80076e0:	408b      	lsls	r3, r1
 80076e2:	4619      	mov	r1, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 80076ec:	e00d      	b.n	800770a <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	699a      	ldr	r2, [r3, #24]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	3310      	adds	r3, #16
 80076fa:	2101      	movs	r1, #1
 80076fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007700:	4619      	mov	r1, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	430a      	orrs	r2, r1
 8007708:	619a      	str	r2, [r3, #24]
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	695a      	ldr	r2, [r3, #20]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	4619      	mov	r1, r3
 800772a:	2301      	movs	r3, #1
 800772c:	408b      	lsls	r3, r1
 800772e:	4619      	mov	r1, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	404a      	eors	r2, r1
 8007736:	615a      	str	r2, [r3, #20]
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <i2c_Config>:
 * Recordar de configurar los pines GPIOx por medio de las funciones alternativas,
 * Ademas de configurar dichos pines como open_drain
 */

void i2c_Config(I2C_Handler_t *ptrHandlerI2C)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
	uint8_t clockAPB1 = getClockAPB1();     //Variable que guarda la velocidad de reloj entregada al bus APB1
 800774c:	f000 fa9c 	bl	8007c88 <getClockAPB1>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	if(ptrHandlerI2C->prtI2Cx == I2C1)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a60      	ldr	r2, [pc, #384]	; (80078dc <i2c_Config+0x198>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d106      	bne.n	800776c <i2c_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800775e:	4b60      	ldr	r3, [pc, #384]	; (80078e0 <i2c_Config+0x19c>)
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	4a5f      	ldr	r2, [pc, #380]	; (80078e0 <i2c_Config+0x19c>)
 8007764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007768:	6413      	str	r3, [r2, #64]	; 0x40
 800776a:	e016      	b.n	800779a <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C2)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a5c      	ldr	r2, [pc, #368]	; (80078e4 <i2c_Config+0x1a0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d106      	bne.n	8007784 <i2c_Config+0x40>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8007776:	4b5a      	ldr	r3, [pc, #360]	; (80078e0 <i2c_Config+0x19c>)
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	4a59      	ldr	r2, [pc, #356]	; (80078e0 <i2c_Config+0x19c>)
 800777c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007780:	6413      	str	r3, [r2, #64]	; 0x40
 8007782:	e00a      	b.n	800779a <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C3)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a57      	ldr	r2, [pc, #348]	; (80078e8 <i2c_Config+0x1a4>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d105      	bne.n	800779a <i2c_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800778e:	4b54      	ldr	r3, [pc, #336]	; (80078e0 <i2c_Config+0x19c>)
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	4a53      	ldr	r2, [pc, #332]	; (80078e0 <i2c_Config+0x19c>)
 8007794:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007798:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//---------------------------------2) Reiniciamos el periferico------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_SWRST;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077a8:	601a      	str	r2, [r3, #0]
	__NOP();
 80077aa:	bf00      	nop
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_SWRST;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077ba:	601a      	str	r2, [r3, #0]

	//-----------------------------------3) Valor del reloj principal------------------------------------------
	//Registro: CR2

	ptrHandlerI2C->prtI2Cx->CR2 &= ~(0b111111<<I2C_CR2_FREQ_Pos);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80077ca:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->prtI2Cx->CR2 |= (clockAPB1<<I2C_CR2_FREQ_Pos);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6859      	ldr	r1, [r3, #4]
 80077d2:	7bfa      	ldrb	r2, [r7, #15]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	605a      	str	r2, [r3, #4]
	//-------------------------------------4) Configuracion del I2C------------------------------------------
	//Registro: CCR
	//Registro: TRISE

	//Variables que almacenan el respectivo valor a cargar en los registros CRR y Trise
	uint16_t valueCRR = 0;
 80077dc:	2300      	movs	r3, #0
 80077de:	81bb      	strh	r3, [r7, #12]
	uint8_t valueTrise = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	72fb      	strb	r3, [r7, #11]

	//definimos inicialmente los registro en 0
	ptrHandlerI2C->prtI2Cx->CCR = 0;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2200      	movs	r2, #0
 80077ea:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->prtI2Cx->TRISE = 0;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2200      	movs	r2, #0
 80077f2:	621a      	str	r2, [r3, #32]

	//Configuramos el I2C deacuerdo al modo selsecionado
	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	795b      	ldrb	r3, [r3, #5]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d121      	bne.n	8007840 <i2c_Config+0xfc>
	{
		//Seleccionamos el modo estandar
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	69da      	ldr	r2, [r3, #28]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800780a:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (5000*clockAPB1)/1000;
 800780c:	7bfb      	ldrb	r3, [r7, #15]
 800780e:	b29b      	uxth	r3, r3
 8007810:	461a      	mov	r2, r3
 8007812:	0092      	lsls	r2, r2, #2
 8007814:	4413      	add	r3, r2
 8007816:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	69d9      	ldr	r1, [r3, #28]
 800781e:	89ba      	ldrh	r2, [r7, #12]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((1000*clockAPB1)/1000)+1;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	3301      	adds	r3, #1
 800782c:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6a19      	ldr	r1, [r3, #32]
 8007834:	7afa      	ldrb	r2, [r7, #11]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	621a      	str	r2, [r3, #32]
 800783e:	e039      	b.n	80078b4 <i2c_Config+0x170>
	}
	else
	{
		//Seleccionamos el modo Fast
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	69da      	ldr	r2, [r3, #28]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800784e:	61da      	str	r2, [r3, #28]
		ptrHandlerI2C->prtI2Cx->CCR |= I2C_CCR_FS;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	69da      	ldr	r2, [r3, #28]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800785e:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (2500*clockAPB1)/3000;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007866:	fb02 f303 	mul.w	r3, r2, r3
 800786a:	4a20      	ldr	r2, [pc, #128]	; (80078ec <i2c_Config+0x1a8>)
 800786c:	fb82 1203 	smull	r1, r2, r2, r3
 8007870:	1192      	asrs	r2, r2, #6
 8007872:	17db      	asrs	r3, r3, #31
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	69d9      	ldr	r1, [r3, #28]
 800787e:	89ba      	ldrh	r2, [r7, #12]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((300*clockAPB1)/1000)+1;
 8007888:	7bfb      	ldrb	r3, [r7, #15]
 800788a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800788e:	fb02 f303 	mul.w	r3, r2, r3
 8007892:	4a17      	ldr	r2, [pc, #92]	; (80078f0 <i2c_Config+0x1ac>)
 8007894:	fb82 1203 	smull	r1, r2, r2, r3
 8007898:	1192      	asrs	r2, r2, #6
 800789a:	17db      	asrs	r3, r3, #31
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	3301      	adds	r3, #1
 80078a2:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6a19      	ldr	r1, [r3, #32]
 80078aa:	7afa      	ldrb	r2, [r7, #11]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	621a      	str	r2, [r3, #32]
	}

	//-----------------------------------5) Activamos el modulo I2C------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_PE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0201 	bic.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_PE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
}
 80078d4:	bf00      	nop
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	40005400 	.word	0x40005400
 80078e0:	40023800 	.word	0x40023800
 80078e4:	40005800 	.word	0x40005800
 80078e8:	40005c00 	.word	0x40005c00
 80078ec:	057619f1 	.word	0x057619f1
 80078f0:	10624dd3 	.word	0x10624dd3

080078f4 <i2c_StartTrasaction>:

//----------------------------------------Funciones para la Transaccion----------------------------------------
//Funcion para empezar la Transaccion
void i2c_StartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
	/*verificamos que la linea no esta ocupada
	 * bit "busy" en I2C
	 */
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 80078fc:	e000      	b.n	8007900 <i2c_StartTrasaction+0xc>
	{
		__NOP();
 80078fe:	bf00      	nop
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1f7      	bne.n	80078fe <i2c_StartTrasaction+0xa>
	}
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800791c:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800791e:	e000      	b.n	8007922 <i2c_StartTrasaction+0x2e>
	{
		__NOP();
 8007920:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d0f7      	beq.n	8007920 <i2c_StartTrasaction+0x2c>
	}
}
 8007930:	bf00      	nop
 8007932:	bf00      	nop
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <i2c_ReStartTrasaction>:

//Generar de nuevo una señal para empazar la Transaccion
void i2c_ReStartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007954:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8007956:	e000      	b.n	800795a <i2c_ReStartTrasaction+0x1c>
	{
		__NOP();
 8007958:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d0f7      	beq.n	8007958 <i2c_ReStartTrasaction+0x1a>
	}
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <i2c_SendSlaveAddressRW>:

//Funcion para enviar la direcion de Slave ademas de definir la lectura o escritura del Sclave
void i2c_SendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite)
{
 8007976:	b480      	push	{r7}
 8007978:	b085      	sub	sp, #20
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	460b      	mov	r3, r1
 8007980:	70fb      	strb	r3, [r7, #3]
 8007982:	4613      	mov	r3, r2
 8007984:	70bb      	strb	r3, [r7, #2]
	//Definimos una variable auxiliar
	uint8_t auxByte = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	//Cargamos la direccion del Sclave, ademas cargamos el bit de lectura o escritura
	ptrHandlerI2C->prtI2Cx->DR = (slaveAddress<<1) | readOrWrite;
 800798a:	78fb      	ldrb	r3, [r7, #3]
 800798c:	005a      	lsls	r2, r3, #1
 800798e:	78bb      	ldrb	r3, [r7, #2]
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "ADDR" del evento "Address" se levante
	//Se limpia la bandera "ADDR" leyendo SR1->leyendo en SR2
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8007998:	e000      	b.n	800799c <i2c_SendSlaveAddressRW+0x26>
	{
		__NOP();
 800799a:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d0f7      	beq.n	800799a <i2c_SendSlaveAddressRW+0x24>
	}
	//Se limpia la bandera "ADDR"
	auxByte = ptrHandlerI2C->prtI2Cx->SR1;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->prtI2Cx->SR2;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	73fb      	strb	r3, [r7, #15]
}
 80079ba:	bf00      	nop
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <i2c_SendMemoryAddress>:

//Enviamos la direccion de memoria que deseamos leer o escribir
void i2c_SendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	460b      	mov	r3, r1
 80079d0:	70fb      	strb	r3, [r7, #3]
	//Enviamos la direccion de memoria que desamos leer
	ptrHandlerI2C->prtI2Cx->DR = memAddr;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	78fa      	ldrb	r2, [r7, #3]
 80079d8:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "TXE" del evento "Data1" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 80079da:	e000      	b.n	80079de <i2c_SendMemoryAddress+0x18>
	{
		__NOP();
 80079dc:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d0f7      	beq.n	80079dc <i2c_SendMemoryAddress+0x16>
	}
}
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <i2c_SendDataByte>:

//Escritura de datos
void i2c_SendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	460b      	mov	r3, r1
 8007a04:	70fb      	strb	r3, [r7, #3]
	//Cargamos el valor que desasmos escribir
	ptrHandlerI2C->prtI2Cx->DR = dataToWrite;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	78fa      	ldrb	r2, [r7, #3]
 8007a0c:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "BTF" del evento "Transmision" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 8007a0e:	e000      	b.n	8007a12 <i2c_SendDataByte+0x18>
	{
		__NOP();
 8007a10:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d0f7      	beq.n	8007a10 <i2c_SendDataByte+0x16>
	}
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <i2c_ReadDataByte>:

//Lectura de datos
uint8_t i2c_ReadDataByte(I2C_Handler_t *ptrHandlerI2C)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
	//Esperamos a que la bandera "RxNE" del evento "Recepcion" se levante
	//Se limpia la bandera "RxNE" leyendo el registro DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8007a36:	e000      	b.n	8007a3a <i2c_ReadDataByte+0xc>
	{
		__NOP();
 8007a38:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0f7      	beq.n	8007a38 <i2c_ReadDataByte+0xa>
	}
	//guardamos los datos recibimos
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->prtI2Cx->DR;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C ;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	799b      	ldrb	r3, [r3, #6]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <i2c_SendNoAck>:

//Funcion para activar la indicaicon de NoACK(indicacion para el Sclave de terminar la transmision de datos)
void i2c_SendNoAck(I2C_Handler_t *ptrHandlerI2C)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
	//Esribimos cero en el bit Ack del registro CR1
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_ACK;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a7a:	601a      	str	r2, [r3, #0]

}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <i2c_StopTrasaction>:
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_ACK;
}

//Funcion para generar el Stop bit
void i2c_StopTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_STOP;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a9e:	601a      	str	r2, [r3, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <i2c_ReadSingleRegister>:

//------------------------------------Funciones para la comunicacion por I2C----------------------------------------

uint8_t i2c_ReadSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
	//0. Creacion de una variable auxiliara para recibir el dato leido
	uint8_t auxRead = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73fb      	strb	r3, [r7, #15]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff ff19 	bl	80078f4 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	791b      	ldrb	r3, [r3, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff ff53 	bl	8007976 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos leer
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff ff76 	bl	80079c6 <i2c_SendMemoryAddress>
	//4. Creamos una condicion de re start
	i2c_ReStartTrasaction(ptrHandlerI2C);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff ff2f 	bl	800793e <i2c_ReStartTrasaction>
	//5. Enviamos la direccion del Sclavo e indicamos que se desea leer el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	791b      	ldrb	r3, [r3, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff ff44 	bl	8007976 <i2c_SendSlaveAddressRW>
	//6. Leemos el dato que envia el Sclavo
	auxRead = i2c_ReadDataByte(ptrHandlerI2C);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff ff9d 	bl	8007a2e <i2c_ReadDataByte>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]
	//7. Generamso la condicio de NoAck
	i2c_SendNoAck(ptrHandlerI2C);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff ffb3 	bl	8007a64 <i2c_SendNoAck>
	//8. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff ffc2 	bl	8007a88 <i2c_StopTrasaction>

	return auxRead;
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <i2c_WriteSingleRegister>:

void i2c_WriteSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	460b      	mov	r3, r1
 8007b18:	70fb      	strb	r3, [r7, #3]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	70bb      	strb	r3, [r7, #2]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff fee8 	bl	80078f4 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	791b      	ldrb	r3, [r3, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff ff22 	bl	8007976 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos escribir
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8007b32:	78fb      	ldrb	r3, [r7, #3]
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff ff45 	bl	80079c6 <i2c_SendMemoryAddress>
	//4. Enviamos el dato que se desea escribir en el Sclave
	i2c_SendDataByte(ptrHandlerI2C, newValue);
 8007b3c:	78bb      	ldrb	r3, [r7, #2]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7ff ff5a 	bl	80079fa <i2c_SendDataByte>
	//5. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff ff9e 	bl	8007a88 <i2c_StopTrasaction>
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8007b5e:	4a39      	ldr	r2, [pc, #228]	; (8007c44 <configPLL+0xf0>)
 8007b60:	79fb      	ldrb	r3, [r7, #7]
 8007b62:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	2b31      	cmp	r3, #49	; 0x31
 8007b68:	d804      	bhi.n	8007b74 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8007b6a:	4b37      	ldr	r3, [pc, #220]	; (8007c48 <configPLL+0xf4>)
 8007b6c:	4a36      	ldr	r2, [pc, #216]	; (8007c48 <configPLL+0xf4>)
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	6093      	str	r3, [r2, #8]
 8007b72:	e005      	b.n	8007b80 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8007b74:	4b34      	ldr	r3, [pc, #208]	; (8007c48 <configPLL+0xf4>)
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	4a33      	ldr	r2, [pc, #204]	; (8007c48 <configPLL+0xf4>)
 8007b7a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8007b7e:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8007b80:	4b31      	ldr	r3, [pc, #196]	; (8007c48 <configPLL+0xf4>)
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	4a30      	ldr	r2, [pc, #192]	; (8007c48 <configPLL+0xf4>)
 8007b86:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007b8a:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8007b8c:	4b2e      	ldr	r3, [pc, #184]	; (8007c48 <configPLL+0xf4>)
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	4a2d      	ldr	r2, [pc, #180]	; (8007c48 <configPLL+0xf4>)
 8007b92:	f043 0312 	orr.w	r3, r3, #18
 8007b96:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8007b98:	4b2b      	ldr	r3, [pc, #172]	; (8007c48 <configPLL+0xf4>)
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	79fa      	ldrb	r2, [r7, #7]
 8007b9e:	0092      	lsls	r2, r2, #2
 8007ba0:	3a0e      	subs	r2, #14
 8007ba2:	0192      	lsls	r2, r2, #6
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4a28      	ldr	r2, [pc, #160]	; (8007c48 <configPLL+0xf4>)
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8007bac:	4b26      	ldr	r3, [pc, #152]	; (8007c48 <configPLL+0xf4>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	4a25      	ldr	r2, [pc, #148]	; (8007c48 <configPLL+0xf4>)
 8007bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bb6:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8007bb8:	4b23      	ldr	r3, [pc, #140]	; (8007c48 <configPLL+0xf4>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a22      	ldr	r2, [pc, #136]	; (8007c48 <configPLL+0xf4>)
 8007bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bc2:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8007bc4:	e000      	b.n	8007bc8 <configPLL+0x74>
	{
		__NOP();
 8007bc6:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8007bc8:	4b1f      	ldr	r3, [pc, #124]	; (8007c48 <configPLL+0xf4>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0f8      	beq.n	8007bc6 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	2b5a      	cmp	r3, #90	; 0x5a
 8007bd8:	d909      	bls.n	8007bee <configPLL+0x9a>
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	2b64      	cmp	r3, #100	; 0x64
 8007bde:	d806      	bhi.n	8007bee <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8007be0:	4b1a      	ldr	r3, [pc, #104]	; (8007c4c <configPLL+0xf8>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a19      	ldr	r2, [pc, #100]	; (8007c4c <configPLL+0xf8>)
 8007be6:	f043 0303 	orr.w	r3, r3, #3
 8007bea:	6013      	str	r3, [r2, #0]
 8007bec:	e01d      	b.n	8007c2a <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	2b40      	cmp	r3, #64	; 0x40
 8007bf2:	d909      	bls.n	8007c08 <configPLL+0xb4>
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	2b5a      	cmp	r3, #90	; 0x5a
 8007bf8:	d806      	bhi.n	8007c08 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8007bfa:	4b14      	ldr	r3, [pc, #80]	; (8007c4c <configPLL+0xf8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a13      	ldr	r2, [pc, #76]	; (8007c4c <configPLL+0xf8>)
 8007c00:	f043 0302 	orr.w	r3, r3, #2
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	e010      	b.n	8007c2a <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8007c08:	79fb      	ldrb	r3, [r7, #7]
 8007c0a:	2b1e      	cmp	r3, #30
 8007c0c:	d909      	bls.n	8007c22 <configPLL+0xce>
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	2b40      	cmp	r3, #64	; 0x40
 8007c12:	d806      	bhi.n	8007c22 <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8007c14:	4b0d      	ldr	r3, [pc, #52]	; (8007c4c <configPLL+0xf8>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a0c      	ldr	r2, [pc, #48]	; (8007c4c <configPLL+0xf8>)
 8007c1a:	f043 0301 	orr.w	r3, r3, #1
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	e003      	b.n	8007c2a <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8007c22:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <configPLL+0xf8>)
 8007c24:	4a09      	ldr	r2, [pc, #36]	; (8007c4c <configPLL+0xf8>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 8007c2a:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <configPLL+0xf4>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	4a06      	ldr	r2, [pc, #24]	; (8007c48 <configPLL+0xf4>)
 8007c30:	f043 0302 	orr.w	r3, r3, #2
 8007c34:	6093      	str	r3, [r2, #8]

}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	20013284 	.word	0x20013284
 8007c48:	40023800 	.word	0x40023800
 8007c4c:	40023c00 	.word	0x40023c00

08007c50 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 8007c5a:	4b09      	ldr	r3, [pc, #36]	; (8007c80 <getConfigPLL+0x30>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d103      	bne.n	8007c6e <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8007c66:	4b07      	ldr	r3, [pc, #28]	; (8007c84 <getConfigPLL+0x34>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	71fb      	strb	r3, [r7, #7]
 8007c6c:	e001      	b.n	8007c72 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8007c6e:	2310      	movs	r3, #16
 8007c70:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8007c72:	79fb      	ldrb	r3, [r7, #7]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	40023800 	.word	0x40023800
 8007c84:	20013284 	.word	0x20013284

08007c88 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8007c8e:	f7ff ffdf 	bl	8007c50 <getConfigPLL>
 8007c92:	4603      	mov	r3, r0
 8007c94:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8007c96:	2300      	movs	r3, #0
 8007c98:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8007c9a:	79bb      	ldrb	r3, [r7, #6]
 8007c9c:	2b31      	cmp	r3, #49	; 0x31
 8007c9e:	d802      	bhi.n	8007ca6 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8007ca0:	79bb      	ldrb	r3, [r7, #6]
 8007ca2:	71fb      	strb	r3, [r7, #7]
 8007ca4:	e002      	b.n	8007cac <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8007ca6:	79bb      	ldrb	r3, [r7, #6]
 8007ca8:	089b      	lsrs	r3, r3, #2
 8007caa:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8007cac:	79fb      	ldrb	r3, [r7, #7]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc8:	d106      	bne.n	8007cd8 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8007cca:	4b81      	ldr	r3, [pc, #516]	; (8007ed0 <pwm_Config+0x218>)
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cce:	4a80      	ldr	r2, [pc, #512]	; (8007ed0 <pwm_Config+0x218>)
 8007cd0:	f043 0301 	orr.w	r3, r3, #1
 8007cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8007cd6:	e024      	b.n	8007d22 <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	4a7d      	ldr	r2, [pc, #500]	; (8007ed4 <pwm_Config+0x21c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d106      	bne.n	8007cf0 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8007ce2:	4b7b      	ldr	r3, [pc, #492]	; (8007ed0 <pwm_Config+0x218>)
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce6:	4a7a      	ldr	r2, [pc, #488]	; (8007ed0 <pwm_Config+0x218>)
 8007ce8:	f043 0302 	orr.w	r3, r3, #2
 8007cec:	6413      	str	r3, [r2, #64]	; 0x40
 8007cee:	e018      	b.n	8007d22 <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	4a78      	ldr	r2, [pc, #480]	; (8007ed8 <pwm_Config+0x220>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d106      	bne.n	8007d08 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8007cfa:	4b75      	ldr	r3, [pc, #468]	; (8007ed0 <pwm_Config+0x218>)
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	4a74      	ldr	r2, [pc, #464]	; (8007ed0 <pwm_Config+0x218>)
 8007d00:	f043 0304 	orr.w	r3, r3, #4
 8007d04:	6413      	str	r3, [r2, #64]	; 0x40
 8007d06:	e00c      	b.n	8007d22 <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	4a73      	ldr	r2, [pc, #460]	; (8007edc <pwm_Config+0x224>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d106      	bne.n	8007d20 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8007d12:	4b6f      	ldr	r3, [pc, #444]	; (8007ed0 <pwm_Config+0x218>)
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	4a6e      	ldr	r2, [pc, #440]	; (8007ed0 <pwm_Config+0x218>)
 8007d18:	f043 0308 	orr.w	r3, r3, #8
 8007d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8007d1e:	e000      	b.n	8007d22 <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8007d20:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa4c 	bl	80081c0 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	f200 8118 	bhi.w	8007f62 <pwm_Config+0x2aa>
 8007d32:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <pwm_Config+0x80>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007d49 	.word	0x08007d49
 8007d3c:	08007dcb 	.word	0x08007dcb
 8007d40:	08007e4d 	.word	0x08007e4d
 8007d44:	08007ee1 	.word	0x08007ee1
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	699a      	ldr	r2, [r3, #24]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f022 0203 	bic.w	r2, r2, #3
 8007d56:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	699a      	ldr	r2, [r3, #24]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007d66:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	699a      	ldr	r2, [r3, #24]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007d76:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	699a      	ldr	r2, [r3, #24]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f022 0208 	bic.w	r2, r2, #8
 8007d86:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	699a      	ldr	r2, [r3, #24]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f042 0208 	orr.w	r2, r2, #8
 8007d96:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	699a      	ldr	r2, [r3, #24]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f022 0204 	bic.w	r2, r2, #4
 8007da6:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	699a      	ldr	r2, [r3, #24]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f042 0204 	orr.w	r2, r2, #4
 8007db6:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	699a      	ldr	r2, [r3, #24]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dc6:	619a      	str	r2, [r3, #24]

		break;
 8007dc8:	e0cc      	b.n	8007f64 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	699a      	ldr	r2, [r3, #24]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f022 0203 	bic.w	r2, r2, #3
 8007dd8:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	699a      	ldr	r2, [r3, #24]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007de8:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	699a      	ldr	r2, [r3, #24]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8007df8:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	699a      	ldr	r2, [r3, #24]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e08:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	699a      	ldr	r2, [r3, #24]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e18:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	699a      	ldr	r2, [r3, #24]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e28:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	699a      	ldr	r2, [r3, #24]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e38:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	699a      	ldr	r2, [r3, #24]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e48:	619a      	str	r2, [r3, #24]

		break;
 8007e4a:	e08b      	b.n	8007f64 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	69da      	ldr	r2, [r3, #28]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f022 0203 	bic.w	r2, r2, #3
 8007e5a:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	69da      	ldr	r2, [r3, #28]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007e6a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	69da      	ldr	r2, [r3, #28]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007e7a:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	69da      	ldr	r2, [r3, #28]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f022 0208 	bic.w	r2, r2, #8
 8007e8a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	69da      	ldr	r2, [r3, #28]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f042 0208 	orr.w	r2, r2, #8
 8007e9a:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	69da      	ldr	r2, [r3, #28]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f022 0204 	bic.w	r2, r2, #4
 8007eaa:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	69da      	ldr	r2, [r3, #28]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f042 0204 	orr.w	r2, r2, #4
 8007eba:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	69da      	ldr	r2, [r3, #28]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007eca:	61da      	str	r2, [r3, #28]

		break;
 8007ecc:	e04a      	b.n	8007f64 <pwm_Config+0x2ac>
 8007ece:	bf00      	nop
 8007ed0:	40023800 	.word	0x40023800
 8007ed4:	40000400 	.word	0x40000400
 8007ed8:	40000800 	.word	0x40000800
 8007edc:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	69da      	ldr	r2, [r3, #28]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007eee:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	69da      	ldr	r2, [r3, #28]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007efe:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	69da      	ldr	r2, [r3, #28]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8007f0e:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	69da      	ldr	r2, [r3, #28]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f1e:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	69da      	ldr	r2, [r3, #28]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f2e:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	69da      	ldr	r2, [r3, #28]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f3e:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	69da      	ldr	r2, [r3, #28]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f4e:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	69da      	ldr	r2, [r3, #28]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f5e:	61da      	str	r2, [r3, #28]

		break;
 8007f60:	e000      	b.n	8007f64 <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 8007f62:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	791b      	ldrb	r3, [r3, #4]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f896 	bl	800809c <statusPolarityPWM>

}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d87f      	bhi.n	800808c <statusInOutPWM+0x114>
 8007f8c:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <statusInOutPWM+0x1c>)
 8007f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f92:	bf00      	nop
 8007f94:	08007fa5 	.word	0x08007fa5
 8007f98:	08007fdf 	.word	0x08007fdf
 8007f9c:	08008019 	.word	0x08008019
 8007fa0:	08008053 	.word	0x08008053
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d110      	bne.n	8007fcc <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	6a1a      	ldr	r2, [r3, #32]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f022 0201 	bic.w	r2, r2, #1
 8007fb8:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	6a1a      	ldr	r2, [r3, #32]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f042 0201 	orr.w	r2, r2, #1
 8007fc8:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8007fca:	e060      	b.n	800808e <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	6a1a      	ldr	r2, [r3, #32]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f022 0201 	bic.w	r2, r2, #1
 8007fda:	621a      	str	r2, [r3, #32]
		break;
 8007fdc:	e057      	b.n	800808e <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8007fde:	78fb      	ldrb	r3, [r7, #3]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d110      	bne.n	8008006 <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	6a1a      	ldr	r2, [r3, #32]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f022 0210 	bic.w	r2, r2, #16
 8007ff2:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	6a1a      	ldr	r2, [r3, #32]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f042 0210 	orr.w	r2, r2, #16
 8008002:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 8008004:	e043      	b.n	800808e <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	6a1a      	ldr	r2, [r3, #32]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f022 0210 	bic.w	r2, r2, #16
 8008014:	621a      	str	r2, [r3, #32]
		break;
 8008016:	e03a      	b.n	800808e <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8008018:	78fb      	ldrb	r3, [r7, #3]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d110      	bne.n	8008040 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	6a1a      	ldr	r2, [r3, #32]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800802c:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	6a1a      	ldr	r2, [r3, #32]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800803c:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 800803e:	e026      	b.n	800808e <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	6a1a      	ldr	r2, [r3, #32]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800804e:	621a      	str	r2, [r3, #32]
		break;
 8008050:	e01d      	b.n	800808e <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 8008052:	78fb      	ldrb	r3, [r7, #3]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d110      	bne.n	800807a <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	6a1a      	ldr	r2, [r3, #32]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008066:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	6a1a      	ldr	r2, [r3, #32]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008076:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8008078:	e009      	b.n	800808e <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	6a1a      	ldr	r2, [r3, #32]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008088:	621a      	str	r2, [r3, #32]
		break;
 800808a:	e000      	b.n	800808e <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 800808c:	bf00      	nop
	}
	}
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop

0800809c <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d87f      	bhi.n	80081b0 <statusPolarityPWM+0x114>
 80080b0:	a201      	add	r2, pc, #4	; (adr r2, 80080b8 <statusPolarityPWM+0x1c>)
 80080b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b6:	bf00      	nop
 80080b8:	080080c9 	.word	0x080080c9
 80080bc:	08008103 	.word	0x08008103
 80080c0:	0800813d 	.word	0x0800813d
 80080c4:	08008177 	.word	0x08008177
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 80080c8:	78fb      	ldrb	r3, [r7, #3]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d110      	bne.n	80080f0 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	6a1a      	ldr	r2, [r3, #32]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f022 0202 	bic.w	r2, r2, #2
 80080dc:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	6a1a      	ldr	r2, [r3, #32]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f042 0202 	orr.w	r2, r2, #2
 80080ec:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 80080ee:	e060      	b.n	80081b2 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	6a1a      	ldr	r2, [r3, #32]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f022 0202 	bic.w	r2, r2, #2
 80080fe:	621a      	str	r2, [r3, #32]
		break;
 8008100:	e057      	b.n	80081b2 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d110      	bne.n	800812a <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	6a1a      	ldr	r2, [r3, #32]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f022 0220 	bic.w	r2, r2, #32
 8008116:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	6a1a      	ldr	r2, [r3, #32]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f042 0220 	orr.w	r2, r2, #32
 8008126:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8008128:	e043      	b.n	80081b2 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	6a1a      	ldr	r2, [r3, #32]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f022 0220 	bic.w	r2, r2, #32
 8008138:	621a      	str	r2, [r3, #32]
		break;
 800813a:	e03a      	b.n	80081b2 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d110      	bne.n	8008164 <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	6a1a      	ldr	r2, [r3, #32]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008150:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	6a1a      	ldr	r2, [r3, #32]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008160:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 8008162:	e026      	b.n	80081b2 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	6a1a      	ldr	r2, [r3, #32]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008172:	621a      	str	r2, [r3, #32]
		break;
 8008174:	e01d      	b.n	80081b2 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d110      	bne.n	800819e <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	6a1a      	ldr	r2, [r3, #32]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800818a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	6a1a      	ldr	r2, [r3, #32]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800819a:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 800819c:	e009      	b.n	80081b2 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	6a1a      	ldr	r2, [r3, #32]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081ac:	621a      	str	r2, [r3, #32]
		break;
 80081ae:	e000      	b.n	80081b2 <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 80081b0:	bf00      	nop
	}
	}

}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop

080081c0 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d823      	bhi.n	8008218 <setDuttyCycle+0x58>
 80081d0:	a201      	add	r2, pc, #4	; (adr r2, 80081d8 <setDuttyCycle+0x18>)
 80081d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d6:	bf00      	nop
 80081d8:	080081e9 	.word	0x080081e9
 80081dc:	080081f5 	.word	0x080081f5
 80081e0:	08008201 	.word	0x08008201
 80081e4:	0800820d 	.word	0x0800820d
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	885a      	ldrh	r2, [r3, #2]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80081f2:	e012      	b.n	800821a <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	885a      	ldrh	r2, [r3, #2]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80081fe:	e00c      	b.n	800821a <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	885a      	ldrh	r2, [r3, #2]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800820a:	e006      	b.n	800821a <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	885a      	ldrh	r2, [r3, #2]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8008216:	e000      	b.n	800821a <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8008218:	bf00      	nop
	}
	}

}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop

08008228 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823a:	4a0d      	ldr	r2, [pc, #52]	; (8008270 <updateDuttyCyclePercentageFloat+0x48>)
 800823c:	fba2 2303 	umull	r2, r3, r2, r3
 8008240:	095b      	lsrs	r3, r3, #5
 8008242:	b29b      	uxth	r3, r3
 8008244:	ee07 3a90 	vmov	s15, r3
 8008248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800824c:	edd7 7a00 	vldr	s15, [r7]
 8008250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008258:	ee17 3a90 	vmov	r3, s15
 800825c:	b29a      	uxth	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7ff ffac 	bl	80081c0 <setDuttyCycle>
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	51eb851f 	.word	0x51eb851f

08008274 <__NVIC_EnableIRQ>:
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	4603      	mov	r3, r0
 800827c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800827e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008282:	2b00      	cmp	r3, #0
 8008284:	db0b      	blt.n	800829e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	f003 021f 	and.w	r2, r3, #31
 800828c:	4907      	ldr	r1, [pc, #28]	; (80082ac <__NVIC_EnableIRQ+0x38>)
 800828e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008292:	095b      	lsrs	r3, r3, #5
 8008294:	2001      	movs	r0, #1
 8008296:	fa00 f202 	lsl.w	r2, r0, r2
 800829a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800829e:	bf00      	nop
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	e000e100 	.word	0xe000e100

080082b0 <__NVIC_SetPriority>:
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	6039      	str	r1, [r7, #0]
 80082ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	db0a      	blt.n	80082da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	490c      	ldr	r1, [pc, #48]	; (80082fc <__NVIC_SetPriority+0x4c>)
 80082ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ce:	0112      	lsls	r2, r2, #4
 80082d0:	b2d2      	uxtb	r2, r2
 80082d2:	440b      	add	r3, r1
 80082d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80082d8:	e00a      	b.n	80082f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	4908      	ldr	r1, [pc, #32]	; (8008300 <__NVIC_SetPriority+0x50>)
 80082e0:	79fb      	ldrb	r3, [r7, #7]
 80082e2:	f003 030f 	and.w	r3, r3, #15
 80082e6:	3b04      	subs	r3, #4
 80082e8:	0112      	lsls	r2, r2, #4
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	440b      	add	r3, r1
 80082ee:	761a      	strb	r2, [r3, #24]
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	e000e100 	.word	0xe000e100
 8008300:	e000ed00 	.word	0xe000ed00

08008304 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	4a8f      	ldr	r2, [pc, #572]	; (8008550 <USART_Config+0x24c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d107      	bne.n	8008326 <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8008316:	4b8f      	ldr	r3, [pc, #572]	; (8008554 <USART_Config+0x250>)
 8008318:	2210      	movs	r2, #16
 800831a:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	4a8d      	ldr	r2, [pc, #564]	; (8008558 <USART_Config+0x254>)
 8008322:	6013      	str	r3, [r2, #0]
 8008324:	e019      	b.n	800835a <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	4a8c      	ldr	r2, [pc, #560]	; (800855c <USART_Config+0x258>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d108      	bne.n	8008342 <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8008330:	4b88      	ldr	r3, [pc, #544]	; (8008554 <USART_Config+0x250>)
 8008332:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008336:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	4a88      	ldr	r2, [pc, #544]	; (8008560 <USART_Config+0x25c>)
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	e00b      	b.n	800835a <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	4a87      	ldr	r2, [pc, #540]	; (8008564 <USART_Config+0x260>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d106      	bne.n	800835a <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 800834c:	4b81      	ldr	r3, [pc, #516]	; (8008554 <USART_Config+0x250>)
 800834e:	2220      	movs	r2, #32
 8008350:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	4a84      	ldr	r2, [pc, #528]	; (8008568 <USART_Config+0x264>)
 8008358:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	2200      	movs	r2, #0
 8008360:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	2200      	movs	r2, #0
 8008368:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	789b      	ldrb	r3, [r3, #2]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d03d      	beq.n	80083ee <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008380:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008390:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	68da      	ldr	r2, [r3, #12]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083a0:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083b0:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	789b      	ldrb	r3, [r3, #2]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d110      	bne.n	80083dc <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	68da      	ldr	r2, [r3, #12]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80083c8:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	68da      	ldr	r2, [r3, #12]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083d8:	60da      	str	r2, [r3, #12]
 80083da:	e018      	b.n	800840e <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	68da      	ldr	r2, [r3, #12]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80083ea:	60da      	str	r2, [r3, #12]
 80083ec:	e00f      	b.n	800840e <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	68da      	ldr	r2, [r3, #12]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083fc:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800840c:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	78db      	ldrb	r3, [r3, #3]
 8008412:	2b03      	cmp	r3, #3
 8008414:	d84c      	bhi.n	80084b0 <USART_Config+0x1ac>
 8008416:	a201      	add	r2, pc, #4	; (adr r2, 800841c <USART_Config+0x118>)
 8008418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841c:	0800842d 	.word	0x0800842d
 8008420:	0800844b 	.word	0x0800844b
 8008424:	0800846d 	.word	0x0800846d
 8008428:	0800848f 	.word	0x0800848f
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	691a      	ldr	r2, [r3, #16]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800843a:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	6912      	ldr	r2, [r2, #16]
 8008446:	611a      	str	r2, [r3, #16]
		break;
 8008448:	e041      	b.n	80084ce <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008458:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008468:	611a      	str	r2, [r3, #16]
		break;
 800846a:	e030      	b.n	80084ce <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	691a      	ldr	r2, [r3, #16]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800847a:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	691a      	ldr	r2, [r3, #16]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800848a:	611a      	str	r2, [r3, #16]
		break;
 800848c:	e01f      	b.n	80084ce <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	691a      	ldr	r2, [r3, #16]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800849c:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80084ac:	611a      	str	r2, [r3, #16]
		break;
 80084ae:	e00e      	b.n	80084ce <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	691a      	ldr	r2, [r3, #16]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80084be:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	6912      	ldr	r2, [r2, #16]
 80084ca:	611a      	str	r2, [r3, #16]
		break;
 80084cc:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 80084ce:	2300      	movs	r3, #0
 80084d0:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	4a21      	ldr	r2, [pc, #132]	; (800855c <USART_Config+0x258>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d104      	bne.n	80084e6 <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80084dc:	f7ff fbd4 	bl	8007c88 <getClockAPB1>
 80084e0:	4603      	mov	r3, r0
 80084e2:	73fb      	strb	r3, [r7, #15]
 80084e4:	e003      	b.n	80084ee <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 80084e6:	f7ff fbb3 	bl	8007c50 <getConfigPLL>
 80084ea:	4603      	mov	r3, r0
 80084ec:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	785b      	ldrb	r3, [r3, #1]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10b      	bne.n	800850e <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 f95f 	bl	80087c0 <getValueBaudRate>
 8008502:	4603      	mov	r3, r0
 8008504:	461a      	mov	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	609a      	str	r2, [r3, #8]
 800850c:	e02f      	b.n	800856e <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	785b      	ldrb	r3, [r3, #1]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d10b      	bne.n	800852e <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f94f 	bl	80087c0 <getValueBaudRate>
 8008522:	4603      	mov	r3, r0
 8008524:	461a      	mov	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	609a      	str	r2, [r3, #8]
 800852c:	e01f      	b.n	800856e <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	785b      	ldrb	r3, [r3, #1]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d11a      	bne.n	800856c <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800853c:	4618      	mov	r0, r3
 800853e:	f000 f93f 	bl	80087c0 <getValueBaudRate>
 8008542:	4603      	mov	r3, r0
 8008544:	461a      	mov	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	609a      	str	r2, [r3, #8]
 800854c:	e00f      	b.n	800856e <USART_Config+0x26a>
 800854e:	bf00      	nop
 8008550:	40011000 	.word	0x40011000
 8008554:	40023800 	.word	0x40023800
 8008558:	20013288 	.word	0x20013288
 800855c:	40004400 	.word	0x40004400
 8008560:	2001328c 	.word	0x2001328c
 8008564:	40011400 	.word	0x40011400
 8008568:	20013290 	.word	0x20013290
	}
	else
	{
		__NOP();
 800856c:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	2b03      	cmp	r3, #3
 8008574:	d866      	bhi.n	8008644 <USART_Config+0x340>
 8008576:	a201      	add	r2, pc, #4	; (adr r2, 800857c <USART_Config+0x278>)
 8008578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857c:	0800858d 	.word	0x0800858d
 8008580:	080085af 	.word	0x080085af
 8008584:	080085d1 	.word	0x080085d1
 8008588:	08008613 	.word	0x08008613
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f022 0208 	bic.w	r2, r2, #8
 800859a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f042 0208 	orr.w	r2, r2, #8
 80085aa:	60da      	str	r2, [r3, #12]

		break;
 80085ac:	e063      	b.n	8008676 <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	68da      	ldr	r2, [r3, #12]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f022 0204 	bic.w	r2, r2, #4
 80085bc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	68da      	ldr	r2, [r3, #12]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f042 0204 	orr.w	r2, r2, #4
 80085cc:	60da      	str	r2, [r3, #12]

		break;
 80085ce:	e052      	b.n	8008676 <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f022 0208 	bic.w	r2, r2, #8
 80085de:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	68da      	ldr	r2, [r3, #12]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	f042 0208 	orr.w	r2, r2, #8
 80085ee:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	68da      	ldr	r2, [r3, #12]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f022 0204 	bic.w	r2, r2, #4
 80085fe:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	68da      	ldr	r2, [r3, #12]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f042 0204 	orr.w	r2, r2, #4
 800860e:	60da      	str	r2, [r3, #12]


		break;
 8008610:	e031      	b.n	8008676 <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008620:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f022 0208 	bic.w	r2, r2, #8
 8008630:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	68da      	ldr	r2, [r3, #12]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f022 0204 	bic.w	r2, r2, #4
 8008640:	60da      	str	r2, [r3, #12]
		break;
 8008642:	e018      	b.n	8008676 <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008652:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	68da      	ldr	r2, [r3, #12]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f022 0208 	bic.w	r2, r2, #8
 8008662:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f022 0204 	bic.w	r2, r2, #4
 8008672:	60da      	str	r2, [r3, #12]
		break;
 8008674:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8008676:	b672      	cpsid	i
}
 8008678:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	791b      	ldrb	r3, [r3, #4]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d110      	bne.n	80086a4 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	68da      	ldr	r2, [r3, #12]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f022 0220 	bic.w	r2, r2, #32
 8008690:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	68da      	ldr	r2, [r3, #12]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f042 0220 	orr.w	r2, r2, #32
 80086a0:	60da      	str	r2, [r3, #12]
 80086a2:	e007      	b.n	80086b4 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f022 0220 	bic.w	r2, r2, #32
 80086b2:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	791b      	ldrb	r3, [r3, #4]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d003      	beq.n	80086c4 <USART_Config+0x3c0>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	795b      	ldrb	r3, [r3, #5]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d11a      	bne.n	80086fa <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	4a1a      	ldr	r2, [pc, #104]	; (8008734 <USART_Config+0x430>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d103      	bne.n	80086d6 <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 80086ce:	2025      	movs	r0, #37	; 0x25
 80086d0:	f7ff fdd0 	bl	8008274 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80086d4:	e013      	b.n	80086fe <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	4a17      	ldr	r2, [pc, #92]	; (8008738 <USART_Config+0x434>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d103      	bne.n	80086e8 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 80086e0:	2026      	movs	r0, #38	; 0x26
 80086e2:	f7ff fdc7 	bl	8008274 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80086e6:	e00a      	b.n	80086fe <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	4a13      	ldr	r2, [pc, #76]	; (800873c <USART_Config+0x438>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d105      	bne.n	80086fe <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 80086f2:	2047      	movs	r0, #71	; 0x47
 80086f4:	f7ff fdbe 	bl	8008274 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80086f8:	e001      	b.n	80086fe <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 80086fa:	bf00      	nop
 80086fc:	e000      	b.n	8008700 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80086fe:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8008700:	b662      	cpsie	i
}
 8008702:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b03      	cmp	r3, #3
 800870a:	d00f      	beq.n	800872c <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	68da      	ldr	r2, [r3, #12]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800871a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800872a:	60da      	str	r2, [r3, #12]
	}
}
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	40011000 	.word	0x40011000
 8008738:	40004400 	.word	0x40004400
 800873c:	40011400 	.word	0x40011400

08008740 <usart_Config_Init_Priority>:

//------------Funcion para configurar las interrupciones------------------
void usart_Config_Init_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800874c:	b672      	cpsid	i
}
 800874e:	bf00      	nop
	//Desactivamos las interupciones globales
	__disable_irq();
	//Verificamos si se selecciono alguna interrupcion
		if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	791b      	ldrb	r3, [r3, #4]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d003      	beq.n	8008760 <usart_Config_Init_Priority+0x20>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	795b      	ldrb	r3, [r3, #5]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d120      	bne.n	80087a2 <usart_Config_Init_Priority+0x62>
		{
			//Matriculamos la interrupcion en el NVIC
			if(ptrUsartHandler->ptrUSARTx == USART1)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	4a13      	ldr	r2, [pc, #76]	; (80087b4 <usart_Config_Init_Priority+0x74>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d105      	bne.n	8008776 <usart_Config_Init_Priority+0x36>
			{
				NVIC_SetPriority(USART1_IRQn, newPriority);
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	4619      	mov	r1, r3
 800876e:	2025      	movs	r0, #37	; 0x25
 8008770:	f7ff fd9e 	bl	80082b0 <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 8008774:	e017      	b.n	80087a6 <usart_Config_Init_Priority+0x66>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART2)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	4a0f      	ldr	r2, [pc, #60]	; (80087b8 <usart_Config_Init_Priority+0x78>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d105      	bne.n	800878c <usart_Config_Init_Priority+0x4c>
			{
				NVIC_SetPriority(USART2_IRQn, newPriority);
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	4619      	mov	r1, r3
 8008784:	2026      	movs	r0, #38	; 0x26
 8008786:	f7ff fd93 	bl	80082b0 <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 800878a:	e00c      	b.n	80087a6 <usart_Config_Init_Priority+0x66>
			}
			else if(ptrUsartHandler->ptrUSARTx == USART6)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	4a0a      	ldr	r2, [pc, #40]	; (80087bc <usart_Config_Init_Priority+0x7c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d107      	bne.n	80087a6 <usart_Config_Init_Priority+0x66>
			{
				NVIC_SetPriority(USART6_IRQn, newPriority);
 8008796:	78fb      	ldrb	r3, [r7, #3]
 8008798:	4619      	mov	r1, r3
 800879a:	2047      	movs	r0, #71	; 0x47
 800879c:	f7ff fd88 	bl	80082b0 <__NVIC_SetPriority>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 80087a0:	e001      	b.n	80087a6 <usart_Config_Init_Priority+0x66>
			}
		}
		else
		{
			__NOP();
 80087a2:	bf00      	nop
 80087a4:	e000      	b.n	80087a8 <usart_Config_Init_Priority+0x68>
			if(ptrUsartHandler->ptrUSARTx == USART1)
 80087a6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80087a8:	b662      	cpsie	i
}
 80087aa:	bf00      	nop
		}
		//Activamos las interupciones globales
		__enable_irq();
}
 80087ac:	bf00      	nop
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	40011000 	.word	0x40011000
 80087b8:	40004400 	.word	0x40004400
 80087bc:	40011400 	.word	0x40011400

080087c0 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 80087c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80087c4:	b086      	sub	sp, #24
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6039      	str	r1, [r7, #0]
 80087ca:	4601      	mov	r1, r0
 80087cc:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 80087ce:	79f9      	ldrb	r1, [r7, #7]
 80087d0:	2000      	movs	r0, #0
 80087d2:	460a      	mov	r2, r1
 80087d4:	4603      	mov	r3, r0
 80087d6:	491f      	ldr	r1, [pc, #124]	; (8008854 <getValueBaudRate+0x94>)
 80087d8:	fb01 f003 	mul.w	r0, r1, r3
 80087dc:	2102      	movs	r1, #2
 80087de:	fb02 f101 	mul.w	r1, r2, r1
 80087e2:	4401      	add	r1, r0
 80087e4:	481b      	ldr	r0, [pc, #108]	; (8008854 <getValueBaudRate+0x94>)
 80087e6:	fba2 4500 	umull	r4, r5, r2, r0
 80087ea:	194b      	adds	r3, r1, r5
 80087ec:	461d      	mov	r5, r3
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	2200      	movs	r2, #0
 80087f4:	4698      	mov	r8, r3
 80087f6:	4691      	mov	r9, r2
 80087f8:	4642      	mov	r2, r8
 80087fa:	464b      	mov	r3, r9
 80087fc:	4620      	mov	r0, r4
 80087fe:	4629      	mov	r1, r5
 8008800:	f7f8 fb68 	bl	8000ed4 <__aeabi_ldivmod>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4613      	mov	r3, r2
 800880a:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	4a12      	ldr	r2, [pc, #72]	; (8008858 <getValueBaudRate+0x98>)
 8008810:	fba2 2303 	umull	r2, r3, r2, r3
 8008814:	0b5b      	lsrs	r3, r3, #13
 8008816:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f242 7210 	movw	r2, #10000	; 0x2710
 800881e:	fb02 f303 	mul.w	r3, r2, r3
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800882e:	4a0a      	ldr	r2, [pc, #40]	; (8008858 <getValueBaudRate+0x98>)
 8008830:	fba2 2303 	umull	r2, r3, r2, r3
 8008834:	0a5b      	lsrs	r3, r3, #9
 8008836:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	b29b      	uxth	r3, r3
 800883c:	011b      	lsls	r3, r3, #4
 800883e:	b29a      	uxth	r2, r3
 8008840:	7afb      	ldrb	r3, [r7, #11]
 8008842:	b29b      	uxth	r3, r3
 8008844:	4313      	orrs	r3, r2
 8008846:	813b      	strh	r3, [r7, #8]

    return value;
 8008848:	893b      	ldrh	r3, [r7, #8]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008854:	540be400 	.word	0x540be400
 8008858:	d1b71759 	.word	0xd1b71759

0800885c <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8008868:	e000      	b.n	800886c <writeChar+0x10>
	{
		__NOP();
 800886a:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0f7      	beq.n	800886a <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	605a      	str	r2, [r3, #4]

}
 8008882:	bf00      	nop
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 800889c:	e00a      	b.n	80088b4 <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	4413      	add	r3, r2
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7ff ffd7 	bl	800885c <writeChar>
		i++;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	3301      	adds	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	4413      	add	r3, r2
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1ee      	bne.n	800889e <writeMsg+0x10>
	}
}
 80088c0:	bf00      	nop
 80088c2:	bf00      	nop
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
	...

080088cc <getRxData>:
	}
}

//Funcion para leer un char
uint8_t getRxData(void)
{
 80088cc:	b480      	push	{r7}
 80088ce:	af00      	add	r7, sp, #0
	return auxRxData;
 80088d0:	4b03      	ldr	r3, [pc, #12]	; (80088e0 <getRxData+0x14>)
 80088d2:	781b      	ldrb	r3, [r3, #0]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	20013294 	.word	0x20013294

080088e4 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d10c      	bne.n	8008910 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 800890e:	e005      	b.n	800891c <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	60da      	str	r2, [r3, #12]
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 8008928:	b480      	push	{r7}
 800892a:	af00      	add	r7, sp, #0
	__NOP();
 800892c:	bf00      	nop
}
 800892e:	bf00      	nop
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 8008938:	b480      	push	{r7}
 800893a:	af00      	add	r7, sp, #0
	__NOP();
 800893c:	bf00      	nop
}
 800893e:	bf00      	nop
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 800894c:	4b37      	ldr	r3, [pc, #220]	; (8008a2c <USART1_IRQHandler+0xe4>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0320 	and.w	r3, r3, #32
 8008956:	2b00      	cmp	r3, #0
 8008958:	d008      	beq.n	800896c <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 800895a:	4b34      	ldr	r3, [pc, #208]	; (8008a2c <USART1_IRQHandler+0xe4>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	b2da      	uxtb	r2, r3
 8008962:	4b33      	ldr	r3, [pc, #204]	; (8008a30 <USART1_IRQHandler+0xe8>)
 8008964:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 8008966:	f7ff ffdf 	bl	8008928 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 800896a:	e05d      	b.n	8008a28 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 800896c:	4b2f      	ldr	r3, [pc, #188]	; (8008a2c <USART1_IRQHandler+0xe4>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008976:	2b00      	cmp	r3, #0
 8008978:	d055      	beq.n	8008a26 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800897a:	4b2e      	ldr	r3, [pc, #184]	; (8008a34 <USART1_IRQHandler+0xec>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10b      	bne.n	800899a <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8008982:	4b2d      	ldr	r3, [pc, #180]	; (8008a38 <USART1_IRQHandler+0xf0>)
 8008984:	781a      	ldrb	r2, [r3, #0]
 8008986:	4b29      	ldr	r3, [pc, #164]	; (8008a2c <USART1_IRQHandler+0xe4>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 800898c:	4b27      	ldr	r3, [pc, #156]	; (8008a2c <USART1_IRQHandler+0xe4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2100      	movs	r1, #0
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff ffa6 	bl	80088e4 <interruptionTX>
}
 8008998:	e046      	b.n	8008a28 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800899a:	4b26      	ldr	r3, [pc, #152]	; (8008a34 <USART1_IRQHandler+0xec>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d142      	bne.n	8008a28 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80089a2:	4b26      	ldr	r3, [pc, #152]	; (8008a3c <USART1_IRQHandler+0xf4>)
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	4b25      	ldr	r3, [pc, #148]	; (8008a40 <USART1_IRQHandler+0xf8>)
 80089aa:	5c9b      	ldrb	r3, [r3, r2]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00e      	beq.n	80089ce <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 80089b0:	4b22      	ldr	r3, [pc, #136]	; (8008a3c <USART1_IRQHandler+0xf4>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	4b22      	ldr	r3, [pc, #136]	; (8008a40 <USART1_IRQHandler+0xf8>)
 80089b8:	5c9a      	ldrb	r2, [r3, r2]
 80089ba:	4b1c      	ldr	r3, [pc, #112]	; (8008a2c <USART1_IRQHandler+0xe4>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	605a      	str	r2, [r3, #4]
				posChar++;
 80089c0:	4b1e      	ldr	r3, [pc, #120]	; (8008a3c <USART1_IRQHandler+0xf4>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	3301      	adds	r3, #1
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	4b1c      	ldr	r3, [pc, #112]	; (8008a3c <USART1_IRQHandler+0xf4>)
 80089ca:	701a      	strb	r2, [r3, #0]
}
 80089cc:	e02c      	b.n	8008a28 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80089ce:	4b1d      	ldr	r3, [pc, #116]	; (8008a44 <USART1_IRQHandler+0xfc>)
 80089d0:	781a      	ldrb	r2, [r3, #0]
 80089d2:	4b1d      	ldr	r3, [pc, #116]	; (8008a48 <USART1_IRQHandler+0x100>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d215      	bcs.n	8008a06 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80089da:	4b1a      	ldr	r3, [pc, #104]	; (8008a44 <USART1_IRQHandler+0xfc>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	461a      	mov	r2, r3
 80089e0:	2364      	movs	r3, #100	; 0x64
 80089e2:	fb02 f303 	mul.w	r3, r2, r3
 80089e6:	4a19      	ldr	r2, [pc, #100]	; (8008a4c <USART1_IRQHandler+0x104>)
 80089e8:	4413      	add	r3, r2
 80089ea:	4619      	mov	r1, r3
 80089ec:	4814      	ldr	r0, [pc, #80]	; (8008a40 <USART1_IRQHandler+0xf8>)
 80089ee:	f000 fff7 	bl	80099e0 <siprintf>
					posChar = 0;
 80089f2:	4b12      	ldr	r3, [pc, #72]	; (8008a3c <USART1_IRQHandler+0xf4>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80089f8:	4b12      	ldr	r3, [pc, #72]	; (8008a44 <USART1_IRQHandler+0xfc>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	3301      	adds	r3, #1
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	4b10      	ldr	r3, [pc, #64]	; (8008a44 <USART1_IRQHandler+0xfc>)
 8008a02:	701a      	strb	r2, [r3, #0]
}
 8008a04:	e010      	b.n	8008a28 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8008a06:	4b09      	ldr	r3, [pc, #36]	; (8008a2c <USART1_IRQHandler+0xe4>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7ff ff69 	bl	80088e4 <interruptionTX>
					posChar = 0;
 8008a12:	4b0a      	ldr	r3, [pc, #40]	; (8008a3c <USART1_IRQHandler+0xf4>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8008a18:	4b0a      	ldr	r3, [pc, #40]	; (8008a44 <USART1_IRQHandler+0xfc>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8008a1e:	4b0a      	ldr	r3, [pc, #40]	; (8008a48 <USART1_IRQHandler+0x100>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	701a      	strb	r2, [r3, #0]
}
 8008a24:	e000      	b.n	8008a28 <USART1_IRQHandler+0xe0>
		__NOP();
 8008a26:	bf00      	nop
}
 8008a28:	bf00      	nop
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	20013288 	.word	0x20013288
 8008a30:	20013294 	.word	0x20013294
 8008a34:	20013acf 	.word	0x20013acf
 8008a38:	20013295 	.word	0x20013295
 8008a3c:	20013ace 	.word	0x20013ace
 8008a40:	20013298 	.word	0x20013298
 8008a44:	20013acd 	.word	0x20013acd
 8008a48:	20013acc 	.word	0x20013acc
 8008a4c:	200132fc 	.word	0x200132fc

08008a50 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8008a54:	4b37      	ldr	r3, [pc, #220]	; (8008b34 <USART2_IRQHandler+0xe4>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0320 	and.w	r3, r3, #32
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d008      	beq.n	8008a74 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8008a62:	4b34      	ldr	r3, [pc, #208]	; (8008b34 <USART2_IRQHandler+0xe4>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	4b33      	ldr	r3, [pc, #204]	; (8008b38 <USART2_IRQHandler+0xe8>)
 8008a6c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8008a6e:	f7f9 fc1f 	bl	80022b0 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8008a72:	e05d      	b.n	8008b30 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8008a74:	4b2f      	ldr	r3, [pc, #188]	; (8008b34 <USART2_IRQHandler+0xe4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d055      	beq.n	8008b2e <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8008a82:	4b2e      	ldr	r3, [pc, #184]	; (8008b3c <USART2_IRQHandler+0xec>)
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10b      	bne.n	8008aa2 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8008a8a:	4b2d      	ldr	r3, [pc, #180]	; (8008b40 <USART2_IRQHandler+0xf0>)
 8008a8c:	781a      	ldrb	r2, [r3, #0]
 8008a8e:	4b29      	ldr	r3, [pc, #164]	; (8008b34 <USART2_IRQHandler+0xe4>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8008a94:	4b27      	ldr	r3, [pc, #156]	; (8008b34 <USART2_IRQHandler+0xe4>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2100      	movs	r1, #0
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7ff ff22 	bl	80088e4 <interruptionTX>
}
 8008aa0:	e046      	b.n	8008b30 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8008aa2:	4b26      	ldr	r3, [pc, #152]	; (8008b3c <USART2_IRQHandler+0xec>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d142      	bne.n	8008b30 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8008aaa:	4b26      	ldr	r3, [pc, #152]	; (8008b44 <USART2_IRQHandler+0xf4>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	4b25      	ldr	r3, [pc, #148]	; (8008b48 <USART2_IRQHandler+0xf8>)
 8008ab2:	5c9b      	ldrb	r3, [r3, r2]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00e      	beq.n	8008ad6 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8008ab8:	4b22      	ldr	r3, [pc, #136]	; (8008b44 <USART2_IRQHandler+0xf4>)
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	4b22      	ldr	r3, [pc, #136]	; (8008b48 <USART2_IRQHandler+0xf8>)
 8008ac0:	5c9a      	ldrb	r2, [r3, r2]
 8008ac2:	4b1c      	ldr	r3, [pc, #112]	; (8008b34 <USART2_IRQHandler+0xe4>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	605a      	str	r2, [r3, #4]
				posChar++;
 8008ac8:	4b1e      	ldr	r3, [pc, #120]	; (8008b44 <USART2_IRQHandler+0xf4>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	3301      	adds	r3, #1
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	4b1c      	ldr	r3, [pc, #112]	; (8008b44 <USART2_IRQHandler+0xf4>)
 8008ad2:	701a      	strb	r2, [r3, #0]
}
 8008ad4:	e02c      	b.n	8008b30 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8008ad6:	4b1d      	ldr	r3, [pc, #116]	; (8008b4c <USART2_IRQHandler+0xfc>)
 8008ad8:	781a      	ldrb	r2, [r3, #0]
 8008ada:	4b1d      	ldr	r3, [pc, #116]	; (8008b50 <USART2_IRQHandler+0x100>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d215      	bcs.n	8008b0e <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8008ae2:	4b1a      	ldr	r3, [pc, #104]	; (8008b4c <USART2_IRQHandler+0xfc>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	2364      	movs	r3, #100	; 0x64
 8008aea:	fb02 f303 	mul.w	r3, r2, r3
 8008aee:	4a19      	ldr	r2, [pc, #100]	; (8008b54 <USART2_IRQHandler+0x104>)
 8008af0:	4413      	add	r3, r2
 8008af2:	4619      	mov	r1, r3
 8008af4:	4814      	ldr	r0, [pc, #80]	; (8008b48 <USART2_IRQHandler+0xf8>)
 8008af6:	f000 ff73 	bl	80099e0 <siprintf>
					posChar = 0;
 8008afa:	4b12      	ldr	r3, [pc, #72]	; (8008b44 <USART2_IRQHandler+0xf4>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8008b00:	4b12      	ldr	r3, [pc, #72]	; (8008b4c <USART2_IRQHandler+0xfc>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	3301      	adds	r3, #1
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	4b10      	ldr	r3, [pc, #64]	; (8008b4c <USART2_IRQHandler+0xfc>)
 8008b0a:	701a      	strb	r2, [r3, #0]
}
 8008b0c:	e010      	b.n	8008b30 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8008b0e:	4b09      	ldr	r3, [pc, #36]	; (8008b34 <USART2_IRQHandler+0xe4>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2100      	movs	r1, #0
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff fee5 	bl	80088e4 <interruptionTX>
					posChar = 0;
 8008b1a:	4b0a      	ldr	r3, [pc, #40]	; (8008b44 <USART2_IRQHandler+0xf4>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8008b20:	4b0a      	ldr	r3, [pc, #40]	; (8008b4c <USART2_IRQHandler+0xfc>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8008b26:	4b0a      	ldr	r3, [pc, #40]	; (8008b50 <USART2_IRQHandler+0x100>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	701a      	strb	r2, [r3, #0]
}
 8008b2c:	e000      	b.n	8008b30 <USART2_IRQHandler+0xe0>
		__NOP();
 8008b2e:	bf00      	nop
}
 8008b30:	bf00      	nop
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	2001328c 	.word	0x2001328c
 8008b38:	20013294 	.word	0x20013294
 8008b3c:	20013acf 	.word	0x20013acf
 8008b40:	20013295 	.word	0x20013295
 8008b44:	20013ace 	.word	0x20013ace
 8008b48:	20013298 	.word	0x20013298
 8008b4c:	20013acd 	.word	0x20013acd
 8008b50:	20013acc 	.word	0x20013acc
 8008b54:	200132fc 	.word	0x200132fc

08008b58 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8008b5c:	4b37      	ldr	r3, [pc, #220]	; (8008c3c <USART6_IRQHandler+0xe4>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0320 	and.w	r3, r3, #32
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d008      	beq.n	8008b7c <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 8008b6a:	4b34      	ldr	r3, [pc, #208]	; (8008c3c <USART6_IRQHandler+0xe4>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	4b33      	ldr	r3, [pc, #204]	; (8008c40 <USART6_IRQHandler+0xe8>)
 8008b74:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8008b76:	f7ff fedf 	bl	8008938 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 8008b7a:	e05d      	b.n	8008c38 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8008b7c:	4b2f      	ldr	r3, [pc, #188]	; (8008c3c <USART6_IRQHandler+0xe4>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d055      	beq.n	8008c36 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8008b8a:	4b2e      	ldr	r3, [pc, #184]	; (8008c44 <USART6_IRQHandler+0xec>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10b      	bne.n	8008baa <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8008b92:	4b2d      	ldr	r3, [pc, #180]	; (8008c48 <USART6_IRQHandler+0xf0>)
 8008b94:	781a      	ldrb	r2, [r3, #0]
 8008b96:	4b29      	ldr	r3, [pc, #164]	; (8008c3c <USART6_IRQHandler+0xe4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8008b9c:	4b27      	ldr	r3, [pc, #156]	; (8008c3c <USART6_IRQHandler+0xe4>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff fe9e 	bl	80088e4 <interruptionTX>
}
 8008ba8:	e046      	b.n	8008c38 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8008baa:	4b26      	ldr	r3, [pc, #152]	; (8008c44 <USART6_IRQHandler+0xec>)
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d142      	bne.n	8008c38 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8008bb2:	4b26      	ldr	r3, [pc, #152]	; (8008c4c <USART6_IRQHandler+0xf4>)
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	4b25      	ldr	r3, [pc, #148]	; (8008c50 <USART6_IRQHandler+0xf8>)
 8008bba:	5c9b      	ldrb	r3, [r3, r2]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00e      	beq.n	8008bde <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8008bc0:	4b22      	ldr	r3, [pc, #136]	; (8008c4c <USART6_IRQHandler+0xf4>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	4b22      	ldr	r3, [pc, #136]	; (8008c50 <USART6_IRQHandler+0xf8>)
 8008bc8:	5c9a      	ldrb	r2, [r3, r2]
 8008bca:	4b1c      	ldr	r3, [pc, #112]	; (8008c3c <USART6_IRQHandler+0xe4>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	605a      	str	r2, [r3, #4]
				posChar++;
 8008bd0:	4b1e      	ldr	r3, [pc, #120]	; (8008c4c <USART6_IRQHandler+0xf4>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	4b1c      	ldr	r3, [pc, #112]	; (8008c4c <USART6_IRQHandler+0xf4>)
 8008bda:	701a      	strb	r2, [r3, #0]
}
 8008bdc:	e02c      	b.n	8008c38 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8008bde:	4b1d      	ldr	r3, [pc, #116]	; (8008c54 <USART6_IRQHandler+0xfc>)
 8008be0:	781a      	ldrb	r2, [r3, #0]
 8008be2:	4b1d      	ldr	r3, [pc, #116]	; (8008c58 <USART6_IRQHandler+0x100>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d215      	bcs.n	8008c16 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8008bea:	4b1a      	ldr	r3, [pc, #104]	; (8008c54 <USART6_IRQHandler+0xfc>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	2364      	movs	r3, #100	; 0x64
 8008bf2:	fb02 f303 	mul.w	r3, r2, r3
 8008bf6:	4a19      	ldr	r2, [pc, #100]	; (8008c5c <USART6_IRQHandler+0x104>)
 8008bf8:	4413      	add	r3, r2
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	4814      	ldr	r0, [pc, #80]	; (8008c50 <USART6_IRQHandler+0xf8>)
 8008bfe:	f000 feef 	bl	80099e0 <siprintf>
					posChar = 0;
 8008c02:	4b12      	ldr	r3, [pc, #72]	; (8008c4c <USART6_IRQHandler+0xf4>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8008c08:	4b12      	ldr	r3, [pc, #72]	; (8008c54 <USART6_IRQHandler+0xfc>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	4b10      	ldr	r3, [pc, #64]	; (8008c54 <USART6_IRQHandler+0xfc>)
 8008c12:	701a      	strb	r2, [r3, #0]
}
 8008c14:	e010      	b.n	8008c38 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8008c16:	4b09      	ldr	r3, [pc, #36]	; (8008c3c <USART6_IRQHandler+0xe4>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7ff fe61 	bl	80088e4 <interruptionTX>
					posChar = 0;
 8008c22:	4b0a      	ldr	r3, [pc, #40]	; (8008c4c <USART6_IRQHandler+0xf4>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8008c28:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <USART6_IRQHandler+0xfc>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8008c2e:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <USART6_IRQHandler+0x100>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	701a      	strb	r2, [r3, #0]
}
 8008c34:	e000      	b.n	8008c38 <USART6_IRQHandler+0xe0>
		__NOP();
 8008c36:	bf00      	nop
}
 8008c38:	bf00      	nop
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	20013290 	.word	0x20013290
 8008c40:	20013294 	.word	0x20013294
 8008c44:	20013acf 	.word	0x20013acf
 8008c48:	20013295 	.word	0x20013295
 8008c4c:	20013ace 	.word	0x20013ace
 8008c50:	20013298 	.word	0x20013298
 8008c54:	20013acd 	.word	0x20013acd
 8008c58:	20013acc 	.word	0x20013acc
 8008c5c:	200132fc 	.word	0x200132fc

08008c60 <__errno>:
 8008c60:	4b01      	ldr	r3, [pc, #4]	; (8008c68 <__errno+0x8>)
 8008c62:	6818      	ldr	r0, [r3, #0]
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	20000020 	.word	0x20000020

08008c6c <__libc_init_array>:
 8008c6c:	b570      	push	{r4, r5, r6, lr}
 8008c6e:	4d0d      	ldr	r5, [pc, #52]	; (8008ca4 <__libc_init_array+0x38>)
 8008c70:	4c0d      	ldr	r4, [pc, #52]	; (8008ca8 <__libc_init_array+0x3c>)
 8008c72:	1b64      	subs	r4, r4, r5
 8008c74:	10a4      	asrs	r4, r4, #2
 8008c76:	2600      	movs	r6, #0
 8008c78:	42a6      	cmp	r6, r4
 8008c7a:	d109      	bne.n	8008c90 <__libc_init_array+0x24>
 8008c7c:	4d0b      	ldr	r5, [pc, #44]	; (8008cac <__libc_init_array+0x40>)
 8008c7e:	4c0c      	ldr	r4, [pc, #48]	; (8008cb0 <__libc_init_array+0x44>)
 8008c80:	f007 fa94 	bl	80101ac <_init>
 8008c84:	1b64      	subs	r4, r4, r5
 8008c86:	10a4      	asrs	r4, r4, #2
 8008c88:	2600      	movs	r6, #0
 8008c8a:	42a6      	cmp	r6, r4
 8008c8c:	d105      	bne.n	8008c9a <__libc_init_array+0x2e>
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
 8008c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c94:	4798      	blx	r3
 8008c96:	3601      	adds	r6, #1
 8008c98:	e7ee      	b.n	8008c78 <__libc_init_array+0xc>
 8008c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c9e:	4798      	blx	r3
 8008ca0:	3601      	adds	r6, #1
 8008ca2:	e7f2      	b.n	8008c8a <__libc_init_array+0x1e>
 8008ca4:	08010a20 	.word	0x08010a20
 8008ca8:	08010a20 	.word	0x08010a20
 8008cac:	08010a20 	.word	0x08010a20
 8008cb0:	08010a24 	.word	0x08010a24

08008cb4 <memcpy>:
 8008cb4:	440a      	add	r2, r1
 8008cb6:	4291      	cmp	r1, r2
 8008cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cbc:	d100      	bne.n	8008cc0 <memcpy+0xc>
 8008cbe:	4770      	bx	lr
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cca:	4291      	cmp	r1, r2
 8008ccc:	d1f9      	bne.n	8008cc2 <memcpy+0xe>
 8008cce:	bd10      	pop	{r4, pc}

08008cd0 <memset>:
 8008cd0:	4402      	add	r2, r0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d100      	bne.n	8008cda <memset+0xa>
 8008cd8:	4770      	bx	lr
 8008cda:	f803 1b01 	strb.w	r1, [r3], #1
 8008cde:	e7f9      	b.n	8008cd4 <memset+0x4>

08008ce0 <__cvt>:
 8008ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce4:	ec55 4b10 	vmov	r4, r5, d0
 8008ce8:	2d00      	cmp	r5, #0
 8008cea:	460e      	mov	r6, r1
 8008cec:	4619      	mov	r1, r3
 8008cee:	462b      	mov	r3, r5
 8008cf0:	bfbb      	ittet	lt
 8008cf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008cf6:	461d      	movlt	r5, r3
 8008cf8:	2300      	movge	r3, #0
 8008cfa:	232d      	movlt	r3, #45	; 0x2d
 8008cfc:	700b      	strb	r3, [r1, #0]
 8008cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d04:	4691      	mov	r9, r2
 8008d06:	f023 0820 	bic.w	r8, r3, #32
 8008d0a:	bfbc      	itt	lt
 8008d0c:	4622      	movlt	r2, r4
 8008d0e:	4614      	movlt	r4, r2
 8008d10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d14:	d005      	beq.n	8008d22 <__cvt+0x42>
 8008d16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d1a:	d100      	bne.n	8008d1e <__cvt+0x3e>
 8008d1c:	3601      	adds	r6, #1
 8008d1e:	2102      	movs	r1, #2
 8008d20:	e000      	b.n	8008d24 <__cvt+0x44>
 8008d22:	2103      	movs	r1, #3
 8008d24:	ab03      	add	r3, sp, #12
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	ab02      	add	r3, sp, #8
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	ec45 4b10 	vmov	d0, r4, r5
 8008d30:	4653      	mov	r3, sl
 8008d32:	4632      	mov	r2, r6
 8008d34:	f001 fe44 	bl	800a9c0 <_dtoa_r>
 8008d38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d3c:	4607      	mov	r7, r0
 8008d3e:	d102      	bne.n	8008d46 <__cvt+0x66>
 8008d40:	f019 0f01 	tst.w	r9, #1
 8008d44:	d022      	beq.n	8008d8c <__cvt+0xac>
 8008d46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d4a:	eb07 0906 	add.w	r9, r7, r6
 8008d4e:	d110      	bne.n	8008d72 <__cvt+0x92>
 8008d50:	783b      	ldrb	r3, [r7, #0]
 8008d52:	2b30      	cmp	r3, #48	; 0x30
 8008d54:	d10a      	bne.n	8008d6c <__cvt+0x8c>
 8008d56:	2200      	movs	r2, #0
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	f7f7 fecb 	bl	8000af8 <__aeabi_dcmpeq>
 8008d62:	b918      	cbnz	r0, 8008d6c <__cvt+0x8c>
 8008d64:	f1c6 0601 	rsb	r6, r6, #1
 8008d68:	f8ca 6000 	str.w	r6, [sl]
 8008d6c:	f8da 3000 	ldr.w	r3, [sl]
 8008d70:	4499      	add	r9, r3
 8008d72:	2200      	movs	r2, #0
 8008d74:	2300      	movs	r3, #0
 8008d76:	4620      	mov	r0, r4
 8008d78:	4629      	mov	r1, r5
 8008d7a:	f7f7 febd 	bl	8000af8 <__aeabi_dcmpeq>
 8008d7e:	b108      	cbz	r0, 8008d84 <__cvt+0xa4>
 8008d80:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d84:	2230      	movs	r2, #48	; 0x30
 8008d86:	9b03      	ldr	r3, [sp, #12]
 8008d88:	454b      	cmp	r3, r9
 8008d8a:	d307      	bcc.n	8008d9c <__cvt+0xbc>
 8008d8c:	9b03      	ldr	r3, [sp, #12]
 8008d8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d90:	1bdb      	subs	r3, r3, r7
 8008d92:	4638      	mov	r0, r7
 8008d94:	6013      	str	r3, [r2, #0]
 8008d96:	b004      	add	sp, #16
 8008d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9c:	1c59      	adds	r1, r3, #1
 8008d9e:	9103      	str	r1, [sp, #12]
 8008da0:	701a      	strb	r2, [r3, #0]
 8008da2:	e7f0      	b.n	8008d86 <__cvt+0xa6>

08008da4 <__exponent>:
 8008da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008da6:	4603      	mov	r3, r0
 8008da8:	2900      	cmp	r1, #0
 8008daa:	bfb8      	it	lt
 8008dac:	4249      	neglt	r1, r1
 8008dae:	f803 2b02 	strb.w	r2, [r3], #2
 8008db2:	bfb4      	ite	lt
 8008db4:	222d      	movlt	r2, #45	; 0x2d
 8008db6:	222b      	movge	r2, #43	; 0x2b
 8008db8:	2909      	cmp	r1, #9
 8008dba:	7042      	strb	r2, [r0, #1]
 8008dbc:	dd2a      	ble.n	8008e14 <__exponent+0x70>
 8008dbe:	f10d 0407 	add.w	r4, sp, #7
 8008dc2:	46a4      	mov	ip, r4
 8008dc4:	270a      	movs	r7, #10
 8008dc6:	46a6      	mov	lr, r4
 8008dc8:	460a      	mov	r2, r1
 8008dca:	fb91 f6f7 	sdiv	r6, r1, r7
 8008dce:	fb07 1516 	mls	r5, r7, r6, r1
 8008dd2:	3530      	adds	r5, #48	; 0x30
 8008dd4:	2a63      	cmp	r2, #99	; 0x63
 8008dd6:	f104 34ff 	add.w	r4, r4, #4294967295
 8008dda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008dde:	4631      	mov	r1, r6
 8008de0:	dcf1      	bgt.n	8008dc6 <__exponent+0x22>
 8008de2:	3130      	adds	r1, #48	; 0x30
 8008de4:	f1ae 0502 	sub.w	r5, lr, #2
 8008de8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008dec:	1c44      	adds	r4, r0, #1
 8008dee:	4629      	mov	r1, r5
 8008df0:	4561      	cmp	r1, ip
 8008df2:	d30a      	bcc.n	8008e0a <__exponent+0x66>
 8008df4:	f10d 0209 	add.w	r2, sp, #9
 8008df8:	eba2 020e 	sub.w	r2, r2, lr
 8008dfc:	4565      	cmp	r5, ip
 8008dfe:	bf88      	it	hi
 8008e00:	2200      	movhi	r2, #0
 8008e02:	4413      	add	r3, r2
 8008e04:	1a18      	subs	r0, r3, r0
 8008e06:	b003      	add	sp, #12
 8008e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e12:	e7ed      	b.n	8008df0 <__exponent+0x4c>
 8008e14:	2330      	movs	r3, #48	; 0x30
 8008e16:	3130      	adds	r1, #48	; 0x30
 8008e18:	7083      	strb	r3, [r0, #2]
 8008e1a:	70c1      	strb	r1, [r0, #3]
 8008e1c:	1d03      	adds	r3, r0, #4
 8008e1e:	e7f1      	b.n	8008e04 <__exponent+0x60>

08008e20 <_printf_float>:
 8008e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	ed2d 8b02 	vpush	{d8}
 8008e28:	b08d      	sub	sp, #52	; 0x34
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e30:	4616      	mov	r6, r2
 8008e32:	461f      	mov	r7, r3
 8008e34:	4605      	mov	r5, r0
 8008e36:	f002 ff21 	bl	800bc7c <_localeconv_r>
 8008e3a:	f8d0 a000 	ldr.w	sl, [r0]
 8008e3e:	4650      	mov	r0, sl
 8008e40:	f7f7 f9d8 	bl	80001f4 <strlen>
 8008e44:	2300      	movs	r3, #0
 8008e46:	930a      	str	r3, [sp, #40]	; 0x28
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	9305      	str	r3, [sp, #20]
 8008e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e54:	3307      	adds	r3, #7
 8008e56:	f023 0307 	bic.w	r3, r3, #7
 8008e5a:	f103 0208 	add.w	r2, r3, #8
 8008e5e:	f8c8 2000 	str.w	r2, [r8]
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008e6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008e6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e72:	9307      	str	r3, [sp, #28]
 8008e74:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e78:	ee08 0a10 	vmov	s16, r0
 8008e7c:	4b9f      	ldr	r3, [pc, #636]	; (80090fc <_printf_float+0x2dc>)
 8008e7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e82:	f04f 32ff 	mov.w	r2, #4294967295
 8008e86:	f7f7 fe69 	bl	8000b5c <__aeabi_dcmpun>
 8008e8a:	bb88      	cbnz	r0, 8008ef0 <_printf_float+0xd0>
 8008e8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e90:	4b9a      	ldr	r3, [pc, #616]	; (80090fc <_printf_float+0x2dc>)
 8008e92:	f04f 32ff 	mov.w	r2, #4294967295
 8008e96:	f7f7 fe43 	bl	8000b20 <__aeabi_dcmple>
 8008e9a:	bb48      	cbnz	r0, 8008ef0 <_printf_float+0xd0>
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	f7f7 fe32 	bl	8000b0c <__aeabi_dcmplt>
 8008ea8:	b110      	cbz	r0, 8008eb0 <_printf_float+0x90>
 8008eaa:	232d      	movs	r3, #45	; 0x2d
 8008eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb0:	4b93      	ldr	r3, [pc, #588]	; (8009100 <_printf_float+0x2e0>)
 8008eb2:	4894      	ldr	r0, [pc, #592]	; (8009104 <_printf_float+0x2e4>)
 8008eb4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008eb8:	bf94      	ite	ls
 8008eba:	4698      	movls	r8, r3
 8008ebc:	4680      	movhi	r8, r0
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	6123      	str	r3, [r4, #16]
 8008ec2:	9b05      	ldr	r3, [sp, #20]
 8008ec4:	f023 0204 	bic.w	r2, r3, #4
 8008ec8:	6022      	str	r2, [r4, #0]
 8008eca:	f04f 0900 	mov.w	r9, #0
 8008ece:	9700      	str	r7, [sp, #0]
 8008ed0:	4633      	mov	r3, r6
 8008ed2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	f000 f9d8 	bl	800928c <_printf_common>
 8008edc:	3001      	adds	r0, #1
 8008ede:	f040 8090 	bne.w	8009002 <_printf_float+0x1e2>
 8008ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee6:	b00d      	add	sp, #52	; 0x34
 8008ee8:	ecbd 8b02 	vpop	{d8}
 8008eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef0:	4642      	mov	r2, r8
 8008ef2:	464b      	mov	r3, r9
 8008ef4:	4640      	mov	r0, r8
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	f7f7 fe30 	bl	8000b5c <__aeabi_dcmpun>
 8008efc:	b140      	cbz	r0, 8008f10 <_printf_float+0xf0>
 8008efe:	464b      	mov	r3, r9
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	bfbc      	itt	lt
 8008f04:	232d      	movlt	r3, #45	; 0x2d
 8008f06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f0a:	487f      	ldr	r0, [pc, #508]	; (8009108 <_printf_float+0x2e8>)
 8008f0c:	4b7f      	ldr	r3, [pc, #508]	; (800910c <_printf_float+0x2ec>)
 8008f0e:	e7d1      	b.n	8008eb4 <_printf_float+0x94>
 8008f10:	6863      	ldr	r3, [r4, #4]
 8008f12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f16:	9206      	str	r2, [sp, #24]
 8008f18:	1c5a      	adds	r2, r3, #1
 8008f1a:	d13f      	bne.n	8008f9c <_printf_float+0x17c>
 8008f1c:	2306      	movs	r3, #6
 8008f1e:	6063      	str	r3, [r4, #4]
 8008f20:	9b05      	ldr	r3, [sp, #20]
 8008f22:	6861      	ldr	r1, [r4, #4]
 8008f24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f28:	2300      	movs	r3, #0
 8008f2a:	9303      	str	r3, [sp, #12]
 8008f2c:	ab0a      	add	r3, sp, #40	; 0x28
 8008f2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f32:	ab09      	add	r3, sp, #36	; 0x24
 8008f34:	ec49 8b10 	vmov	d0, r8, r9
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	6022      	str	r2, [r4, #0]
 8008f3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f40:	4628      	mov	r0, r5
 8008f42:	f7ff fecd 	bl	8008ce0 <__cvt>
 8008f46:	9b06      	ldr	r3, [sp, #24]
 8008f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f4a:	2b47      	cmp	r3, #71	; 0x47
 8008f4c:	4680      	mov	r8, r0
 8008f4e:	d108      	bne.n	8008f62 <_printf_float+0x142>
 8008f50:	1cc8      	adds	r0, r1, #3
 8008f52:	db02      	blt.n	8008f5a <_printf_float+0x13a>
 8008f54:	6863      	ldr	r3, [r4, #4]
 8008f56:	4299      	cmp	r1, r3
 8008f58:	dd41      	ble.n	8008fde <_printf_float+0x1be>
 8008f5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008f5e:	fa5f fb8b 	uxtb.w	fp, fp
 8008f62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f66:	d820      	bhi.n	8008faa <_printf_float+0x18a>
 8008f68:	3901      	subs	r1, #1
 8008f6a:	465a      	mov	r2, fp
 8008f6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f70:	9109      	str	r1, [sp, #36]	; 0x24
 8008f72:	f7ff ff17 	bl	8008da4 <__exponent>
 8008f76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f78:	1813      	adds	r3, r2, r0
 8008f7a:	2a01      	cmp	r2, #1
 8008f7c:	4681      	mov	r9, r0
 8008f7e:	6123      	str	r3, [r4, #16]
 8008f80:	dc02      	bgt.n	8008f88 <_printf_float+0x168>
 8008f82:	6822      	ldr	r2, [r4, #0]
 8008f84:	07d2      	lsls	r2, r2, #31
 8008f86:	d501      	bpl.n	8008f8c <_printf_float+0x16c>
 8008f88:	3301      	adds	r3, #1
 8008f8a:	6123      	str	r3, [r4, #16]
 8008f8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d09c      	beq.n	8008ece <_printf_float+0xae>
 8008f94:	232d      	movs	r3, #45	; 0x2d
 8008f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f9a:	e798      	b.n	8008ece <_printf_float+0xae>
 8008f9c:	9a06      	ldr	r2, [sp, #24]
 8008f9e:	2a47      	cmp	r2, #71	; 0x47
 8008fa0:	d1be      	bne.n	8008f20 <_printf_float+0x100>
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1bc      	bne.n	8008f20 <_printf_float+0x100>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e7b9      	b.n	8008f1e <_printf_float+0xfe>
 8008faa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008fae:	d118      	bne.n	8008fe2 <_printf_float+0x1c2>
 8008fb0:	2900      	cmp	r1, #0
 8008fb2:	6863      	ldr	r3, [r4, #4]
 8008fb4:	dd0b      	ble.n	8008fce <_printf_float+0x1ae>
 8008fb6:	6121      	str	r1, [r4, #16]
 8008fb8:	b913      	cbnz	r3, 8008fc0 <_printf_float+0x1a0>
 8008fba:	6822      	ldr	r2, [r4, #0]
 8008fbc:	07d0      	lsls	r0, r2, #31
 8008fbe:	d502      	bpl.n	8008fc6 <_printf_float+0x1a6>
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	440b      	add	r3, r1
 8008fc4:	6123      	str	r3, [r4, #16]
 8008fc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008fc8:	f04f 0900 	mov.w	r9, #0
 8008fcc:	e7de      	b.n	8008f8c <_printf_float+0x16c>
 8008fce:	b913      	cbnz	r3, 8008fd6 <_printf_float+0x1b6>
 8008fd0:	6822      	ldr	r2, [r4, #0]
 8008fd2:	07d2      	lsls	r2, r2, #31
 8008fd4:	d501      	bpl.n	8008fda <_printf_float+0x1ba>
 8008fd6:	3302      	adds	r3, #2
 8008fd8:	e7f4      	b.n	8008fc4 <_printf_float+0x1a4>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e7f2      	b.n	8008fc4 <_printf_float+0x1a4>
 8008fde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fe4:	4299      	cmp	r1, r3
 8008fe6:	db05      	blt.n	8008ff4 <_printf_float+0x1d4>
 8008fe8:	6823      	ldr	r3, [r4, #0]
 8008fea:	6121      	str	r1, [r4, #16]
 8008fec:	07d8      	lsls	r0, r3, #31
 8008fee:	d5ea      	bpl.n	8008fc6 <_printf_float+0x1a6>
 8008ff0:	1c4b      	adds	r3, r1, #1
 8008ff2:	e7e7      	b.n	8008fc4 <_printf_float+0x1a4>
 8008ff4:	2900      	cmp	r1, #0
 8008ff6:	bfd4      	ite	le
 8008ff8:	f1c1 0202 	rsble	r2, r1, #2
 8008ffc:	2201      	movgt	r2, #1
 8008ffe:	4413      	add	r3, r2
 8009000:	e7e0      	b.n	8008fc4 <_printf_float+0x1a4>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	055a      	lsls	r2, r3, #21
 8009006:	d407      	bmi.n	8009018 <_printf_float+0x1f8>
 8009008:	6923      	ldr	r3, [r4, #16]
 800900a:	4642      	mov	r2, r8
 800900c:	4631      	mov	r1, r6
 800900e:	4628      	mov	r0, r5
 8009010:	47b8      	blx	r7
 8009012:	3001      	adds	r0, #1
 8009014:	d12c      	bne.n	8009070 <_printf_float+0x250>
 8009016:	e764      	b.n	8008ee2 <_printf_float+0xc2>
 8009018:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800901c:	f240 80e0 	bls.w	80091e0 <_printf_float+0x3c0>
 8009020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009024:	2200      	movs	r2, #0
 8009026:	2300      	movs	r3, #0
 8009028:	f7f7 fd66 	bl	8000af8 <__aeabi_dcmpeq>
 800902c:	2800      	cmp	r0, #0
 800902e:	d034      	beq.n	800909a <_printf_float+0x27a>
 8009030:	4a37      	ldr	r2, [pc, #220]	; (8009110 <_printf_float+0x2f0>)
 8009032:	2301      	movs	r3, #1
 8009034:	4631      	mov	r1, r6
 8009036:	4628      	mov	r0, r5
 8009038:	47b8      	blx	r7
 800903a:	3001      	adds	r0, #1
 800903c:	f43f af51 	beq.w	8008ee2 <_printf_float+0xc2>
 8009040:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009044:	429a      	cmp	r2, r3
 8009046:	db02      	blt.n	800904e <_printf_float+0x22e>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	07d8      	lsls	r0, r3, #31
 800904c:	d510      	bpl.n	8009070 <_printf_float+0x250>
 800904e:	ee18 3a10 	vmov	r3, s16
 8009052:	4652      	mov	r2, sl
 8009054:	4631      	mov	r1, r6
 8009056:	4628      	mov	r0, r5
 8009058:	47b8      	blx	r7
 800905a:	3001      	adds	r0, #1
 800905c:	f43f af41 	beq.w	8008ee2 <_printf_float+0xc2>
 8009060:	f04f 0800 	mov.w	r8, #0
 8009064:	f104 091a 	add.w	r9, r4, #26
 8009068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800906a:	3b01      	subs	r3, #1
 800906c:	4543      	cmp	r3, r8
 800906e:	dc09      	bgt.n	8009084 <_printf_float+0x264>
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	079b      	lsls	r3, r3, #30
 8009074:	f100 8105 	bmi.w	8009282 <_printf_float+0x462>
 8009078:	68e0      	ldr	r0, [r4, #12]
 800907a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800907c:	4298      	cmp	r0, r3
 800907e:	bfb8      	it	lt
 8009080:	4618      	movlt	r0, r3
 8009082:	e730      	b.n	8008ee6 <_printf_float+0xc6>
 8009084:	2301      	movs	r3, #1
 8009086:	464a      	mov	r2, r9
 8009088:	4631      	mov	r1, r6
 800908a:	4628      	mov	r0, r5
 800908c:	47b8      	blx	r7
 800908e:	3001      	adds	r0, #1
 8009090:	f43f af27 	beq.w	8008ee2 <_printf_float+0xc2>
 8009094:	f108 0801 	add.w	r8, r8, #1
 8009098:	e7e6      	b.n	8009068 <_printf_float+0x248>
 800909a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800909c:	2b00      	cmp	r3, #0
 800909e:	dc39      	bgt.n	8009114 <_printf_float+0x2f4>
 80090a0:	4a1b      	ldr	r2, [pc, #108]	; (8009110 <_printf_float+0x2f0>)
 80090a2:	2301      	movs	r3, #1
 80090a4:	4631      	mov	r1, r6
 80090a6:	4628      	mov	r0, r5
 80090a8:	47b8      	blx	r7
 80090aa:	3001      	adds	r0, #1
 80090ac:	f43f af19 	beq.w	8008ee2 <_printf_float+0xc2>
 80090b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090b4:	4313      	orrs	r3, r2
 80090b6:	d102      	bne.n	80090be <_printf_float+0x29e>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	07d9      	lsls	r1, r3, #31
 80090bc:	d5d8      	bpl.n	8009070 <_printf_float+0x250>
 80090be:	ee18 3a10 	vmov	r3, s16
 80090c2:	4652      	mov	r2, sl
 80090c4:	4631      	mov	r1, r6
 80090c6:	4628      	mov	r0, r5
 80090c8:	47b8      	blx	r7
 80090ca:	3001      	adds	r0, #1
 80090cc:	f43f af09 	beq.w	8008ee2 <_printf_float+0xc2>
 80090d0:	f04f 0900 	mov.w	r9, #0
 80090d4:	f104 0a1a 	add.w	sl, r4, #26
 80090d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090da:	425b      	negs	r3, r3
 80090dc:	454b      	cmp	r3, r9
 80090de:	dc01      	bgt.n	80090e4 <_printf_float+0x2c4>
 80090e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090e2:	e792      	b.n	800900a <_printf_float+0x1ea>
 80090e4:	2301      	movs	r3, #1
 80090e6:	4652      	mov	r2, sl
 80090e8:	4631      	mov	r1, r6
 80090ea:	4628      	mov	r0, r5
 80090ec:	47b8      	blx	r7
 80090ee:	3001      	adds	r0, #1
 80090f0:	f43f aef7 	beq.w	8008ee2 <_printf_float+0xc2>
 80090f4:	f109 0901 	add.w	r9, r9, #1
 80090f8:	e7ee      	b.n	80090d8 <_printf_float+0x2b8>
 80090fa:	bf00      	nop
 80090fc:	7fefffff 	.word	0x7fefffff
 8009100:	080102e4 	.word	0x080102e4
 8009104:	080102e8 	.word	0x080102e8
 8009108:	080102f0 	.word	0x080102f0
 800910c:	080102ec 	.word	0x080102ec
 8009110:	080106e9 	.word	0x080106e9
 8009114:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009116:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009118:	429a      	cmp	r2, r3
 800911a:	bfa8      	it	ge
 800911c:	461a      	movge	r2, r3
 800911e:	2a00      	cmp	r2, #0
 8009120:	4691      	mov	r9, r2
 8009122:	dc37      	bgt.n	8009194 <_printf_float+0x374>
 8009124:	f04f 0b00 	mov.w	fp, #0
 8009128:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800912c:	f104 021a 	add.w	r2, r4, #26
 8009130:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009132:	9305      	str	r3, [sp, #20]
 8009134:	eba3 0309 	sub.w	r3, r3, r9
 8009138:	455b      	cmp	r3, fp
 800913a:	dc33      	bgt.n	80091a4 <_printf_float+0x384>
 800913c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009140:	429a      	cmp	r2, r3
 8009142:	db3b      	blt.n	80091bc <_printf_float+0x39c>
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	07da      	lsls	r2, r3, #31
 8009148:	d438      	bmi.n	80091bc <_printf_float+0x39c>
 800914a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800914c:	9a05      	ldr	r2, [sp, #20]
 800914e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009150:	1a9a      	subs	r2, r3, r2
 8009152:	eba3 0901 	sub.w	r9, r3, r1
 8009156:	4591      	cmp	r9, r2
 8009158:	bfa8      	it	ge
 800915a:	4691      	movge	r9, r2
 800915c:	f1b9 0f00 	cmp.w	r9, #0
 8009160:	dc35      	bgt.n	80091ce <_printf_float+0x3ae>
 8009162:	f04f 0800 	mov.w	r8, #0
 8009166:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800916a:	f104 0a1a 	add.w	sl, r4, #26
 800916e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009172:	1a9b      	subs	r3, r3, r2
 8009174:	eba3 0309 	sub.w	r3, r3, r9
 8009178:	4543      	cmp	r3, r8
 800917a:	f77f af79 	ble.w	8009070 <_printf_float+0x250>
 800917e:	2301      	movs	r3, #1
 8009180:	4652      	mov	r2, sl
 8009182:	4631      	mov	r1, r6
 8009184:	4628      	mov	r0, r5
 8009186:	47b8      	blx	r7
 8009188:	3001      	adds	r0, #1
 800918a:	f43f aeaa 	beq.w	8008ee2 <_printf_float+0xc2>
 800918e:	f108 0801 	add.w	r8, r8, #1
 8009192:	e7ec      	b.n	800916e <_printf_float+0x34e>
 8009194:	4613      	mov	r3, r2
 8009196:	4631      	mov	r1, r6
 8009198:	4642      	mov	r2, r8
 800919a:	4628      	mov	r0, r5
 800919c:	47b8      	blx	r7
 800919e:	3001      	adds	r0, #1
 80091a0:	d1c0      	bne.n	8009124 <_printf_float+0x304>
 80091a2:	e69e      	b.n	8008ee2 <_printf_float+0xc2>
 80091a4:	2301      	movs	r3, #1
 80091a6:	4631      	mov	r1, r6
 80091a8:	4628      	mov	r0, r5
 80091aa:	9205      	str	r2, [sp, #20]
 80091ac:	47b8      	blx	r7
 80091ae:	3001      	adds	r0, #1
 80091b0:	f43f ae97 	beq.w	8008ee2 <_printf_float+0xc2>
 80091b4:	9a05      	ldr	r2, [sp, #20]
 80091b6:	f10b 0b01 	add.w	fp, fp, #1
 80091ba:	e7b9      	b.n	8009130 <_printf_float+0x310>
 80091bc:	ee18 3a10 	vmov	r3, s16
 80091c0:	4652      	mov	r2, sl
 80091c2:	4631      	mov	r1, r6
 80091c4:	4628      	mov	r0, r5
 80091c6:	47b8      	blx	r7
 80091c8:	3001      	adds	r0, #1
 80091ca:	d1be      	bne.n	800914a <_printf_float+0x32a>
 80091cc:	e689      	b.n	8008ee2 <_printf_float+0xc2>
 80091ce:	9a05      	ldr	r2, [sp, #20]
 80091d0:	464b      	mov	r3, r9
 80091d2:	4442      	add	r2, r8
 80091d4:	4631      	mov	r1, r6
 80091d6:	4628      	mov	r0, r5
 80091d8:	47b8      	blx	r7
 80091da:	3001      	adds	r0, #1
 80091dc:	d1c1      	bne.n	8009162 <_printf_float+0x342>
 80091de:	e680      	b.n	8008ee2 <_printf_float+0xc2>
 80091e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091e2:	2a01      	cmp	r2, #1
 80091e4:	dc01      	bgt.n	80091ea <_printf_float+0x3ca>
 80091e6:	07db      	lsls	r3, r3, #31
 80091e8:	d538      	bpl.n	800925c <_printf_float+0x43c>
 80091ea:	2301      	movs	r3, #1
 80091ec:	4642      	mov	r2, r8
 80091ee:	4631      	mov	r1, r6
 80091f0:	4628      	mov	r0, r5
 80091f2:	47b8      	blx	r7
 80091f4:	3001      	adds	r0, #1
 80091f6:	f43f ae74 	beq.w	8008ee2 <_printf_float+0xc2>
 80091fa:	ee18 3a10 	vmov	r3, s16
 80091fe:	4652      	mov	r2, sl
 8009200:	4631      	mov	r1, r6
 8009202:	4628      	mov	r0, r5
 8009204:	47b8      	blx	r7
 8009206:	3001      	adds	r0, #1
 8009208:	f43f ae6b 	beq.w	8008ee2 <_printf_float+0xc2>
 800920c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009210:	2200      	movs	r2, #0
 8009212:	2300      	movs	r3, #0
 8009214:	f7f7 fc70 	bl	8000af8 <__aeabi_dcmpeq>
 8009218:	b9d8      	cbnz	r0, 8009252 <_printf_float+0x432>
 800921a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800921c:	f108 0201 	add.w	r2, r8, #1
 8009220:	3b01      	subs	r3, #1
 8009222:	4631      	mov	r1, r6
 8009224:	4628      	mov	r0, r5
 8009226:	47b8      	blx	r7
 8009228:	3001      	adds	r0, #1
 800922a:	d10e      	bne.n	800924a <_printf_float+0x42a>
 800922c:	e659      	b.n	8008ee2 <_printf_float+0xc2>
 800922e:	2301      	movs	r3, #1
 8009230:	4652      	mov	r2, sl
 8009232:	4631      	mov	r1, r6
 8009234:	4628      	mov	r0, r5
 8009236:	47b8      	blx	r7
 8009238:	3001      	adds	r0, #1
 800923a:	f43f ae52 	beq.w	8008ee2 <_printf_float+0xc2>
 800923e:	f108 0801 	add.w	r8, r8, #1
 8009242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009244:	3b01      	subs	r3, #1
 8009246:	4543      	cmp	r3, r8
 8009248:	dcf1      	bgt.n	800922e <_printf_float+0x40e>
 800924a:	464b      	mov	r3, r9
 800924c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009250:	e6dc      	b.n	800900c <_printf_float+0x1ec>
 8009252:	f04f 0800 	mov.w	r8, #0
 8009256:	f104 0a1a 	add.w	sl, r4, #26
 800925a:	e7f2      	b.n	8009242 <_printf_float+0x422>
 800925c:	2301      	movs	r3, #1
 800925e:	4642      	mov	r2, r8
 8009260:	e7df      	b.n	8009222 <_printf_float+0x402>
 8009262:	2301      	movs	r3, #1
 8009264:	464a      	mov	r2, r9
 8009266:	4631      	mov	r1, r6
 8009268:	4628      	mov	r0, r5
 800926a:	47b8      	blx	r7
 800926c:	3001      	adds	r0, #1
 800926e:	f43f ae38 	beq.w	8008ee2 <_printf_float+0xc2>
 8009272:	f108 0801 	add.w	r8, r8, #1
 8009276:	68e3      	ldr	r3, [r4, #12]
 8009278:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800927a:	1a5b      	subs	r3, r3, r1
 800927c:	4543      	cmp	r3, r8
 800927e:	dcf0      	bgt.n	8009262 <_printf_float+0x442>
 8009280:	e6fa      	b.n	8009078 <_printf_float+0x258>
 8009282:	f04f 0800 	mov.w	r8, #0
 8009286:	f104 0919 	add.w	r9, r4, #25
 800928a:	e7f4      	b.n	8009276 <_printf_float+0x456>

0800928c <_printf_common>:
 800928c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009290:	4616      	mov	r6, r2
 8009292:	4699      	mov	r9, r3
 8009294:	688a      	ldr	r2, [r1, #8]
 8009296:	690b      	ldr	r3, [r1, #16]
 8009298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800929c:	4293      	cmp	r3, r2
 800929e:	bfb8      	it	lt
 80092a0:	4613      	movlt	r3, r2
 80092a2:	6033      	str	r3, [r6, #0]
 80092a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092a8:	4607      	mov	r7, r0
 80092aa:	460c      	mov	r4, r1
 80092ac:	b10a      	cbz	r2, 80092b2 <_printf_common+0x26>
 80092ae:	3301      	adds	r3, #1
 80092b0:	6033      	str	r3, [r6, #0]
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	0699      	lsls	r1, r3, #26
 80092b6:	bf42      	ittt	mi
 80092b8:	6833      	ldrmi	r3, [r6, #0]
 80092ba:	3302      	addmi	r3, #2
 80092bc:	6033      	strmi	r3, [r6, #0]
 80092be:	6825      	ldr	r5, [r4, #0]
 80092c0:	f015 0506 	ands.w	r5, r5, #6
 80092c4:	d106      	bne.n	80092d4 <_printf_common+0x48>
 80092c6:	f104 0a19 	add.w	sl, r4, #25
 80092ca:	68e3      	ldr	r3, [r4, #12]
 80092cc:	6832      	ldr	r2, [r6, #0]
 80092ce:	1a9b      	subs	r3, r3, r2
 80092d0:	42ab      	cmp	r3, r5
 80092d2:	dc26      	bgt.n	8009322 <_printf_common+0x96>
 80092d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092d8:	1e13      	subs	r3, r2, #0
 80092da:	6822      	ldr	r2, [r4, #0]
 80092dc:	bf18      	it	ne
 80092de:	2301      	movne	r3, #1
 80092e0:	0692      	lsls	r2, r2, #26
 80092e2:	d42b      	bmi.n	800933c <_printf_common+0xb0>
 80092e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092e8:	4649      	mov	r1, r9
 80092ea:	4638      	mov	r0, r7
 80092ec:	47c0      	blx	r8
 80092ee:	3001      	adds	r0, #1
 80092f0:	d01e      	beq.n	8009330 <_printf_common+0xa4>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	68e5      	ldr	r5, [r4, #12]
 80092f6:	6832      	ldr	r2, [r6, #0]
 80092f8:	f003 0306 	and.w	r3, r3, #6
 80092fc:	2b04      	cmp	r3, #4
 80092fe:	bf08      	it	eq
 8009300:	1aad      	subeq	r5, r5, r2
 8009302:	68a3      	ldr	r3, [r4, #8]
 8009304:	6922      	ldr	r2, [r4, #16]
 8009306:	bf0c      	ite	eq
 8009308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800930c:	2500      	movne	r5, #0
 800930e:	4293      	cmp	r3, r2
 8009310:	bfc4      	itt	gt
 8009312:	1a9b      	subgt	r3, r3, r2
 8009314:	18ed      	addgt	r5, r5, r3
 8009316:	2600      	movs	r6, #0
 8009318:	341a      	adds	r4, #26
 800931a:	42b5      	cmp	r5, r6
 800931c:	d11a      	bne.n	8009354 <_printf_common+0xc8>
 800931e:	2000      	movs	r0, #0
 8009320:	e008      	b.n	8009334 <_printf_common+0xa8>
 8009322:	2301      	movs	r3, #1
 8009324:	4652      	mov	r2, sl
 8009326:	4649      	mov	r1, r9
 8009328:	4638      	mov	r0, r7
 800932a:	47c0      	blx	r8
 800932c:	3001      	adds	r0, #1
 800932e:	d103      	bne.n	8009338 <_printf_common+0xac>
 8009330:	f04f 30ff 	mov.w	r0, #4294967295
 8009334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009338:	3501      	adds	r5, #1
 800933a:	e7c6      	b.n	80092ca <_printf_common+0x3e>
 800933c:	18e1      	adds	r1, r4, r3
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	2030      	movs	r0, #48	; 0x30
 8009342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009346:	4422      	add	r2, r4
 8009348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800934c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009350:	3302      	adds	r3, #2
 8009352:	e7c7      	b.n	80092e4 <_printf_common+0x58>
 8009354:	2301      	movs	r3, #1
 8009356:	4622      	mov	r2, r4
 8009358:	4649      	mov	r1, r9
 800935a:	4638      	mov	r0, r7
 800935c:	47c0      	blx	r8
 800935e:	3001      	adds	r0, #1
 8009360:	d0e6      	beq.n	8009330 <_printf_common+0xa4>
 8009362:	3601      	adds	r6, #1
 8009364:	e7d9      	b.n	800931a <_printf_common+0x8e>
	...

08009368 <_printf_i>:
 8009368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800936c:	7e0f      	ldrb	r7, [r1, #24]
 800936e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009370:	2f78      	cmp	r7, #120	; 0x78
 8009372:	4691      	mov	r9, r2
 8009374:	4680      	mov	r8, r0
 8009376:	460c      	mov	r4, r1
 8009378:	469a      	mov	sl, r3
 800937a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800937e:	d807      	bhi.n	8009390 <_printf_i+0x28>
 8009380:	2f62      	cmp	r7, #98	; 0x62
 8009382:	d80a      	bhi.n	800939a <_printf_i+0x32>
 8009384:	2f00      	cmp	r7, #0
 8009386:	f000 80d8 	beq.w	800953a <_printf_i+0x1d2>
 800938a:	2f58      	cmp	r7, #88	; 0x58
 800938c:	f000 80a3 	beq.w	80094d6 <_printf_i+0x16e>
 8009390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009398:	e03a      	b.n	8009410 <_printf_i+0xa8>
 800939a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800939e:	2b15      	cmp	r3, #21
 80093a0:	d8f6      	bhi.n	8009390 <_printf_i+0x28>
 80093a2:	a101      	add	r1, pc, #4	; (adr r1, 80093a8 <_printf_i+0x40>)
 80093a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093a8:	08009401 	.word	0x08009401
 80093ac:	08009415 	.word	0x08009415
 80093b0:	08009391 	.word	0x08009391
 80093b4:	08009391 	.word	0x08009391
 80093b8:	08009391 	.word	0x08009391
 80093bc:	08009391 	.word	0x08009391
 80093c0:	08009415 	.word	0x08009415
 80093c4:	08009391 	.word	0x08009391
 80093c8:	08009391 	.word	0x08009391
 80093cc:	08009391 	.word	0x08009391
 80093d0:	08009391 	.word	0x08009391
 80093d4:	08009521 	.word	0x08009521
 80093d8:	08009445 	.word	0x08009445
 80093dc:	08009503 	.word	0x08009503
 80093e0:	08009391 	.word	0x08009391
 80093e4:	08009391 	.word	0x08009391
 80093e8:	08009543 	.word	0x08009543
 80093ec:	08009391 	.word	0x08009391
 80093f0:	08009445 	.word	0x08009445
 80093f4:	08009391 	.word	0x08009391
 80093f8:	08009391 	.word	0x08009391
 80093fc:	0800950b 	.word	0x0800950b
 8009400:	682b      	ldr	r3, [r5, #0]
 8009402:	1d1a      	adds	r2, r3, #4
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	602a      	str	r2, [r5, #0]
 8009408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800940c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009410:	2301      	movs	r3, #1
 8009412:	e0a3      	b.n	800955c <_printf_i+0x1f4>
 8009414:	6820      	ldr	r0, [r4, #0]
 8009416:	6829      	ldr	r1, [r5, #0]
 8009418:	0606      	lsls	r6, r0, #24
 800941a:	f101 0304 	add.w	r3, r1, #4
 800941e:	d50a      	bpl.n	8009436 <_printf_i+0xce>
 8009420:	680e      	ldr	r6, [r1, #0]
 8009422:	602b      	str	r3, [r5, #0]
 8009424:	2e00      	cmp	r6, #0
 8009426:	da03      	bge.n	8009430 <_printf_i+0xc8>
 8009428:	232d      	movs	r3, #45	; 0x2d
 800942a:	4276      	negs	r6, r6
 800942c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009430:	485e      	ldr	r0, [pc, #376]	; (80095ac <_printf_i+0x244>)
 8009432:	230a      	movs	r3, #10
 8009434:	e019      	b.n	800946a <_printf_i+0x102>
 8009436:	680e      	ldr	r6, [r1, #0]
 8009438:	602b      	str	r3, [r5, #0]
 800943a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800943e:	bf18      	it	ne
 8009440:	b236      	sxthne	r6, r6
 8009442:	e7ef      	b.n	8009424 <_printf_i+0xbc>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	6820      	ldr	r0, [r4, #0]
 8009448:	1d19      	adds	r1, r3, #4
 800944a:	6029      	str	r1, [r5, #0]
 800944c:	0601      	lsls	r1, r0, #24
 800944e:	d501      	bpl.n	8009454 <_printf_i+0xec>
 8009450:	681e      	ldr	r6, [r3, #0]
 8009452:	e002      	b.n	800945a <_printf_i+0xf2>
 8009454:	0646      	lsls	r6, r0, #25
 8009456:	d5fb      	bpl.n	8009450 <_printf_i+0xe8>
 8009458:	881e      	ldrh	r6, [r3, #0]
 800945a:	4854      	ldr	r0, [pc, #336]	; (80095ac <_printf_i+0x244>)
 800945c:	2f6f      	cmp	r7, #111	; 0x6f
 800945e:	bf0c      	ite	eq
 8009460:	2308      	moveq	r3, #8
 8009462:	230a      	movne	r3, #10
 8009464:	2100      	movs	r1, #0
 8009466:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800946a:	6865      	ldr	r5, [r4, #4]
 800946c:	60a5      	str	r5, [r4, #8]
 800946e:	2d00      	cmp	r5, #0
 8009470:	bfa2      	ittt	ge
 8009472:	6821      	ldrge	r1, [r4, #0]
 8009474:	f021 0104 	bicge.w	r1, r1, #4
 8009478:	6021      	strge	r1, [r4, #0]
 800947a:	b90e      	cbnz	r6, 8009480 <_printf_i+0x118>
 800947c:	2d00      	cmp	r5, #0
 800947e:	d04d      	beq.n	800951c <_printf_i+0x1b4>
 8009480:	4615      	mov	r5, r2
 8009482:	fbb6 f1f3 	udiv	r1, r6, r3
 8009486:	fb03 6711 	mls	r7, r3, r1, r6
 800948a:	5dc7      	ldrb	r7, [r0, r7]
 800948c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009490:	4637      	mov	r7, r6
 8009492:	42bb      	cmp	r3, r7
 8009494:	460e      	mov	r6, r1
 8009496:	d9f4      	bls.n	8009482 <_printf_i+0x11a>
 8009498:	2b08      	cmp	r3, #8
 800949a:	d10b      	bne.n	80094b4 <_printf_i+0x14c>
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	07de      	lsls	r6, r3, #31
 80094a0:	d508      	bpl.n	80094b4 <_printf_i+0x14c>
 80094a2:	6923      	ldr	r3, [r4, #16]
 80094a4:	6861      	ldr	r1, [r4, #4]
 80094a6:	4299      	cmp	r1, r3
 80094a8:	bfde      	ittt	le
 80094aa:	2330      	movle	r3, #48	; 0x30
 80094ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094b4:	1b52      	subs	r2, r2, r5
 80094b6:	6122      	str	r2, [r4, #16]
 80094b8:	f8cd a000 	str.w	sl, [sp]
 80094bc:	464b      	mov	r3, r9
 80094be:	aa03      	add	r2, sp, #12
 80094c0:	4621      	mov	r1, r4
 80094c2:	4640      	mov	r0, r8
 80094c4:	f7ff fee2 	bl	800928c <_printf_common>
 80094c8:	3001      	adds	r0, #1
 80094ca:	d14c      	bne.n	8009566 <_printf_i+0x1fe>
 80094cc:	f04f 30ff 	mov.w	r0, #4294967295
 80094d0:	b004      	add	sp, #16
 80094d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d6:	4835      	ldr	r0, [pc, #212]	; (80095ac <_printf_i+0x244>)
 80094d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80094dc:	6829      	ldr	r1, [r5, #0]
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80094e4:	6029      	str	r1, [r5, #0]
 80094e6:	061d      	lsls	r5, r3, #24
 80094e8:	d514      	bpl.n	8009514 <_printf_i+0x1ac>
 80094ea:	07df      	lsls	r7, r3, #31
 80094ec:	bf44      	itt	mi
 80094ee:	f043 0320 	orrmi.w	r3, r3, #32
 80094f2:	6023      	strmi	r3, [r4, #0]
 80094f4:	b91e      	cbnz	r6, 80094fe <_printf_i+0x196>
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	f023 0320 	bic.w	r3, r3, #32
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	2310      	movs	r3, #16
 8009500:	e7b0      	b.n	8009464 <_printf_i+0xfc>
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	f043 0320 	orr.w	r3, r3, #32
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	2378      	movs	r3, #120	; 0x78
 800950c:	4828      	ldr	r0, [pc, #160]	; (80095b0 <_printf_i+0x248>)
 800950e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009512:	e7e3      	b.n	80094dc <_printf_i+0x174>
 8009514:	0659      	lsls	r1, r3, #25
 8009516:	bf48      	it	mi
 8009518:	b2b6      	uxthmi	r6, r6
 800951a:	e7e6      	b.n	80094ea <_printf_i+0x182>
 800951c:	4615      	mov	r5, r2
 800951e:	e7bb      	b.n	8009498 <_printf_i+0x130>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	6826      	ldr	r6, [r4, #0]
 8009524:	6961      	ldr	r1, [r4, #20]
 8009526:	1d18      	adds	r0, r3, #4
 8009528:	6028      	str	r0, [r5, #0]
 800952a:	0635      	lsls	r5, r6, #24
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	d501      	bpl.n	8009534 <_printf_i+0x1cc>
 8009530:	6019      	str	r1, [r3, #0]
 8009532:	e002      	b.n	800953a <_printf_i+0x1d2>
 8009534:	0670      	lsls	r0, r6, #25
 8009536:	d5fb      	bpl.n	8009530 <_printf_i+0x1c8>
 8009538:	8019      	strh	r1, [r3, #0]
 800953a:	2300      	movs	r3, #0
 800953c:	6123      	str	r3, [r4, #16]
 800953e:	4615      	mov	r5, r2
 8009540:	e7ba      	b.n	80094b8 <_printf_i+0x150>
 8009542:	682b      	ldr	r3, [r5, #0]
 8009544:	1d1a      	adds	r2, r3, #4
 8009546:	602a      	str	r2, [r5, #0]
 8009548:	681d      	ldr	r5, [r3, #0]
 800954a:	6862      	ldr	r2, [r4, #4]
 800954c:	2100      	movs	r1, #0
 800954e:	4628      	mov	r0, r5
 8009550:	f7f6 fe5e 	bl	8000210 <memchr>
 8009554:	b108      	cbz	r0, 800955a <_printf_i+0x1f2>
 8009556:	1b40      	subs	r0, r0, r5
 8009558:	6060      	str	r0, [r4, #4]
 800955a:	6863      	ldr	r3, [r4, #4]
 800955c:	6123      	str	r3, [r4, #16]
 800955e:	2300      	movs	r3, #0
 8009560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009564:	e7a8      	b.n	80094b8 <_printf_i+0x150>
 8009566:	6923      	ldr	r3, [r4, #16]
 8009568:	462a      	mov	r2, r5
 800956a:	4649      	mov	r1, r9
 800956c:	4640      	mov	r0, r8
 800956e:	47d0      	blx	sl
 8009570:	3001      	adds	r0, #1
 8009572:	d0ab      	beq.n	80094cc <_printf_i+0x164>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	079b      	lsls	r3, r3, #30
 8009578:	d413      	bmi.n	80095a2 <_printf_i+0x23a>
 800957a:	68e0      	ldr	r0, [r4, #12]
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	4298      	cmp	r0, r3
 8009580:	bfb8      	it	lt
 8009582:	4618      	movlt	r0, r3
 8009584:	e7a4      	b.n	80094d0 <_printf_i+0x168>
 8009586:	2301      	movs	r3, #1
 8009588:	4632      	mov	r2, r6
 800958a:	4649      	mov	r1, r9
 800958c:	4640      	mov	r0, r8
 800958e:	47d0      	blx	sl
 8009590:	3001      	adds	r0, #1
 8009592:	d09b      	beq.n	80094cc <_printf_i+0x164>
 8009594:	3501      	adds	r5, #1
 8009596:	68e3      	ldr	r3, [r4, #12]
 8009598:	9903      	ldr	r1, [sp, #12]
 800959a:	1a5b      	subs	r3, r3, r1
 800959c:	42ab      	cmp	r3, r5
 800959e:	dcf2      	bgt.n	8009586 <_printf_i+0x21e>
 80095a0:	e7eb      	b.n	800957a <_printf_i+0x212>
 80095a2:	2500      	movs	r5, #0
 80095a4:	f104 0619 	add.w	r6, r4, #25
 80095a8:	e7f5      	b.n	8009596 <_printf_i+0x22e>
 80095aa:	bf00      	nop
 80095ac:	080102f4 	.word	0x080102f4
 80095b0:	08010305 	.word	0x08010305

080095b4 <_scanf_float>:
 80095b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b8:	b087      	sub	sp, #28
 80095ba:	4617      	mov	r7, r2
 80095bc:	9303      	str	r3, [sp, #12]
 80095be:	688b      	ldr	r3, [r1, #8]
 80095c0:	1e5a      	subs	r2, r3, #1
 80095c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80095c6:	bf83      	ittte	hi
 80095c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80095cc:	195b      	addhi	r3, r3, r5
 80095ce:	9302      	strhi	r3, [sp, #8]
 80095d0:	2300      	movls	r3, #0
 80095d2:	bf86      	itte	hi
 80095d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80095d8:	608b      	strhi	r3, [r1, #8]
 80095da:	9302      	strls	r3, [sp, #8]
 80095dc:	680b      	ldr	r3, [r1, #0]
 80095de:	468b      	mov	fp, r1
 80095e0:	2500      	movs	r5, #0
 80095e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80095e6:	f84b 3b1c 	str.w	r3, [fp], #28
 80095ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80095ee:	4680      	mov	r8, r0
 80095f0:	460c      	mov	r4, r1
 80095f2:	465e      	mov	r6, fp
 80095f4:	46aa      	mov	sl, r5
 80095f6:	46a9      	mov	r9, r5
 80095f8:	9501      	str	r5, [sp, #4]
 80095fa:	68a2      	ldr	r2, [r4, #8]
 80095fc:	b152      	cbz	r2, 8009614 <_scanf_float+0x60>
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	2b4e      	cmp	r3, #78	; 0x4e
 8009604:	d864      	bhi.n	80096d0 <_scanf_float+0x11c>
 8009606:	2b40      	cmp	r3, #64	; 0x40
 8009608:	d83c      	bhi.n	8009684 <_scanf_float+0xd0>
 800960a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800960e:	b2c8      	uxtb	r0, r1
 8009610:	280e      	cmp	r0, #14
 8009612:	d93a      	bls.n	800968a <_scanf_float+0xd6>
 8009614:	f1b9 0f00 	cmp.w	r9, #0
 8009618:	d003      	beq.n	8009622 <_scanf_float+0x6e>
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009626:	f1ba 0f01 	cmp.w	sl, #1
 800962a:	f200 8113 	bhi.w	8009854 <_scanf_float+0x2a0>
 800962e:	455e      	cmp	r6, fp
 8009630:	f200 8105 	bhi.w	800983e <_scanf_float+0x28a>
 8009634:	2501      	movs	r5, #1
 8009636:	4628      	mov	r0, r5
 8009638:	b007      	add	sp, #28
 800963a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009642:	2a0d      	cmp	r2, #13
 8009644:	d8e6      	bhi.n	8009614 <_scanf_float+0x60>
 8009646:	a101      	add	r1, pc, #4	; (adr r1, 800964c <_scanf_float+0x98>)
 8009648:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800964c:	0800978b 	.word	0x0800978b
 8009650:	08009615 	.word	0x08009615
 8009654:	08009615 	.word	0x08009615
 8009658:	08009615 	.word	0x08009615
 800965c:	080097eb 	.word	0x080097eb
 8009660:	080097c3 	.word	0x080097c3
 8009664:	08009615 	.word	0x08009615
 8009668:	08009615 	.word	0x08009615
 800966c:	08009799 	.word	0x08009799
 8009670:	08009615 	.word	0x08009615
 8009674:	08009615 	.word	0x08009615
 8009678:	08009615 	.word	0x08009615
 800967c:	08009615 	.word	0x08009615
 8009680:	08009751 	.word	0x08009751
 8009684:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009688:	e7db      	b.n	8009642 <_scanf_float+0x8e>
 800968a:	290e      	cmp	r1, #14
 800968c:	d8c2      	bhi.n	8009614 <_scanf_float+0x60>
 800968e:	a001      	add	r0, pc, #4	; (adr r0, 8009694 <_scanf_float+0xe0>)
 8009690:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009694:	08009743 	.word	0x08009743
 8009698:	08009615 	.word	0x08009615
 800969c:	08009743 	.word	0x08009743
 80096a0:	080097d7 	.word	0x080097d7
 80096a4:	08009615 	.word	0x08009615
 80096a8:	080096f1 	.word	0x080096f1
 80096ac:	0800972d 	.word	0x0800972d
 80096b0:	0800972d 	.word	0x0800972d
 80096b4:	0800972d 	.word	0x0800972d
 80096b8:	0800972d 	.word	0x0800972d
 80096bc:	0800972d 	.word	0x0800972d
 80096c0:	0800972d 	.word	0x0800972d
 80096c4:	0800972d 	.word	0x0800972d
 80096c8:	0800972d 	.word	0x0800972d
 80096cc:	0800972d 	.word	0x0800972d
 80096d0:	2b6e      	cmp	r3, #110	; 0x6e
 80096d2:	d809      	bhi.n	80096e8 <_scanf_float+0x134>
 80096d4:	2b60      	cmp	r3, #96	; 0x60
 80096d6:	d8b2      	bhi.n	800963e <_scanf_float+0x8a>
 80096d8:	2b54      	cmp	r3, #84	; 0x54
 80096da:	d077      	beq.n	80097cc <_scanf_float+0x218>
 80096dc:	2b59      	cmp	r3, #89	; 0x59
 80096de:	d199      	bne.n	8009614 <_scanf_float+0x60>
 80096e0:	2d07      	cmp	r5, #7
 80096e2:	d197      	bne.n	8009614 <_scanf_float+0x60>
 80096e4:	2508      	movs	r5, #8
 80096e6:	e029      	b.n	800973c <_scanf_float+0x188>
 80096e8:	2b74      	cmp	r3, #116	; 0x74
 80096ea:	d06f      	beq.n	80097cc <_scanf_float+0x218>
 80096ec:	2b79      	cmp	r3, #121	; 0x79
 80096ee:	e7f6      	b.n	80096de <_scanf_float+0x12a>
 80096f0:	6821      	ldr	r1, [r4, #0]
 80096f2:	05c8      	lsls	r0, r1, #23
 80096f4:	d51a      	bpl.n	800972c <_scanf_float+0x178>
 80096f6:	9b02      	ldr	r3, [sp, #8]
 80096f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80096fc:	6021      	str	r1, [r4, #0]
 80096fe:	f109 0901 	add.w	r9, r9, #1
 8009702:	b11b      	cbz	r3, 800970c <_scanf_float+0x158>
 8009704:	3b01      	subs	r3, #1
 8009706:	3201      	adds	r2, #1
 8009708:	9302      	str	r3, [sp, #8]
 800970a:	60a2      	str	r2, [r4, #8]
 800970c:	68a3      	ldr	r3, [r4, #8]
 800970e:	3b01      	subs	r3, #1
 8009710:	60a3      	str	r3, [r4, #8]
 8009712:	6923      	ldr	r3, [r4, #16]
 8009714:	3301      	adds	r3, #1
 8009716:	6123      	str	r3, [r4, #16]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	3b01      	subs	r3, #1
 800971c:	2b00      	cmp	r3, #0
 800971e:	607b      	str	r3, [r7, #4]
 8009720:	f340 8084 	ble.w	800982c <_scanf_float+0x278>
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	3301      	adds	r3, #1
 8009728:	603b      	str	r3, [r7, #0]
 800972a:	e766      	b.n	80095fa <_scanf_float+0x46>
 800972c:	eb1a 0f05 	cmn.w	sl, r5
 8009730:	f47f af70 	bne.w	8009614 <_scanf_float+0x60>
 8009734:	6822      	ldr	r2, [r4, #0]
 8009736:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800973a:	6022      	str	r2, [r4, #0]
 800973c:	f806 3b01 	strb.w	r3, [r6], #1
 8009740:	e7e4      	b.n	800970c <_scanf_float+0x158>
 8009742:	6822      	ldr	r2, [r4, #0]
 8009744:	0610      	lsls	r0, r2, #24
 8009746:	f57f af65 	bpl.w	8009614 <_scanf_float+0x60>
 800974a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800974e:	e7f4      	b.n	800973a <_scanf_float+0x186>
 8009750:	f1ba 0f00 	cmp.w	sl, #0
 8009754:	d10e      	bne.n	8009774 <_scanf_float+0x1c0>
 8009756:	f1b9 0f00 	cmp.w	r9, #0
 800975a:	d10e      	bne.n	800977a <_scanf_float+0x1c6>
 800975c:	6822      	ldr	r2, [r4, #0]
 800975e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009762:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009766:	d108      	bne.n	800977a <_scanf_float+0x1c6>
 8009768:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800976c:	6022      	str	r2, [r4, #0]
 800976e:	f04f 0a01 	mov.w	sl, #1
 8009772:	e7e3      	b.n	800973c <_scanf_float+0x188>
 8009774:	f1ba 0f02 	cmp.w	sl, #2
 8009778:	d055      	beq.n	8009826 <_scanf_float+0x272>
 800977a:	2d01      	cmp	r5, #1
 800977c:	d002      	beq.n	8009784 <_scanf_float+0x1d0>
 800977e:	2d04      	cmp	r5, #4
 8009780:	f47f af48 	bne.w	8009614 <_scanf_float+0x60>
 8009784:	3501      	adds	r5, #1
 8009786:	b2ed      	uxtb	r5, r5
 8009788:	e7d8      	b.n	800973c <_scanf_float+0x188>
 800978a:	f1ba 0f01 	cmp.w	sl, #1
 800978e:	f47f af41 	bne.w	8009614 <_scanf_float+0x60>
 8009792:	f04f 0a02 	mov.w	sl, #2
 8009796:	e7d1      	b.n	800973c <_scanf_float+0x188>
 8009798:	b97d      	cbnz	r5, 80097ba <_scanf_float+0x206>
 800979a:	f1b9 0f00 	cmp.w	r9, #0
 800979e:	f47f af3c 	bne.w	800961a <_scanf_float+0x66>
 80097a2:	6822      	ldr	r2, [r4, #0]
 80097a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80097a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80097ac:	f47f af39 	bne.w	8009622 <_scanf_float+0x6e>
 80097b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097b4:	6022      	str	r2, [r4, #0]
 80097b6:	2501      	movs	r5, #1
 80097b8:	e7c0      	b.n	800973c <_scanf_float+0x188>
 80097ba:	2d03      	cmp	r5, #3
 80097bc:	d0e2      	beq.n	8009784 <_scanf_float+0x1d0>
 80097be:	2d05      	cmp	r5, #5
 80097c0:	e7de      	b.n	8009780 <_scanf_float+0x1cc>
 80097c2:	2d02      	cmp	r5, #2
 80097c4:	f47f af26 	bne.w	8009614 <_scanf_float+0x60>
 80097c8:	2503      	movs	r5, #3
 80097ca:	e7b7      	b.n	800973c <_scanf_float+0x188>
 80097cc:	2d06      	cmp	r5, #6
 80097ce:	f47f af21 	bne.w	8009614 <_scanf_float+0x60>
 80097d2:	2507      	movs	r5, #7
 80097d4:	e7b2      	b.n	800973c <_scanf_float+0x188>
 80097d6:	6822      	ldr	r2, [r4, #0]
 80097d8:	0591      	lsls	r1, r2, #22
 80097da:	f57f af1b 	bpl.w	8009614 <_scanf_float+0x60>
 80097de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80097e2:	6022      	str	r2, [r4, #0]
 80097e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80097e8:	e7a8      	b.n	800973c <_scanf_float+0x188>
 80097ea:	6822      	ldr	r2, [r4, #0]
 80097ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80097f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80097f4:	d006      	beq.n	8009804 <_scanf_float+0x250>
 80097f6:	0550      	lsls	r0, r2, #21
 80097f8:	f57f af0c 	bpl.w	8009614 <_scanf_float+0x60>
 80097fc:	f1b9 0f00 	cmp.w	r9, #0
 8009800:	f43f af0f 	beq.w	8009622 <_scanf_float+0x6e>
 8009804:	0591      	lsls	r1, r2, #22
 8009806:	bf58      	it	pl
 8009808:	9901      	ldrpl	r1, [sp, #4]
 800980a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800980e:	bf58      	it	pl
 8009810:	eba9 0101 	subpl.w	r1, r9, r1
 8009814:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009818:	bf58      	it	pl
 800981a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800981e:	6022      	str	r2, [r4, #0]
 8009820:	f04f 0900 	mov.w	r9, #0
 8009824:	e78a      	b.n	800973c <_scanf_float+0x188>
 8009826:	f04f 0a03 	mov.w	sl, #3
 800982a:	e787      	b.n	800973c <_scanf_float+0x188>
 800982c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009830:	4639      	mov	r1, r7
 8009832:	4640      	mov	r0, r8
 8009834:	4798      	blx	r3
 8009836:	2800      	cmp	r0, #0
 8009838:	f43f aedf 	beq.w	80095fa <_scanf_float+0x46>
 800983c:	e6ea      	b.n	8009614 <_scanf_float+0x60>
 800983e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009842:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009846:	463a      	mov	r2, r7
 8009848:	4640      	mov	r0, r8
 800984a:	4798      	blx	r3
 800984c:	6923      	ldr	r3, [r4, #16]
 800984e:	3b01      	subs	r3, #1
 8009850:	6123      	str	r3, [r4, #16]
 8009852:	e6ec      	b.n	800962e <_scanf_float+0x7a>
 8009854:	1e6b      	subs	r3, r5, #1
 8009856:	2b06      	cmp	r3, #6
 8009858:	d825      	bhi.n	80098a6 <_scanf_float+0x2f2>
 800985a:	2d02      	cmp	r5, #2
 800985c:	d836      	bhi.n	80098cc <_scanf_float+0x318>
 800985e:	455e      	cmp	r6, fp
 8009860:	f67f aee8 	bls.w	8009634 <_scanf_float+0x80>
 8009864:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009868:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800986c:	463a      	mov	r2, r7
 800986e:	4640      	mov	r0, r8
 8009870:	4798      	blx	r3
 8009872:	6923      	ldr	r3, [r4, #16]
 8009874:	3b01      	subs	r3, #1
 8009876:	6123      	str	r3, [r4, #16]
 8009878:	e7f1      	b.n	800985e <_scanf_float+0x2aa>
 800987a:	9802      	ldr	r0, [sp, #8]
 800987c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009880:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009884:	9002      	str	r0, [sp, #8]
 8009886:	463a      	mov	r2, r7
 8009888:	4640      	mov	r0, r8
 800988a:	4798      	blx	r3
 800988c:	6923      	ldr	r3, [r4, #16]
 800988e:	3b01      	subs	r3, #1
 8009890:	6123      	str	r3, [r4, #16]
 8009892:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009896:	fa5f fa8a 	uxtb.w	sl, sl
 800989a:	f1ba 0f02 	cmp.w	sl, #2
 800989e:	d1ec      	bne.n	800987a <_scanf_float+0x2c6>
 80098a0:	3d03      	subs	r5, #3
 80098a2:	b2ed      	uxtb	r5, r5
 80098a4:	1b76      	subs	r6, r6, r5
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	05da      	lsls	r2, r3, #23
 80098aa:	d52f      	bpl.n	800990c <_scanf_float+0x358>
 80098ac:	055b      	lsls	r3, r3, #21
 80098ae:	d510      	bpl.n	80098d2 <_scanf_float+0x31e>
 80098b0:	455e      	cmp	r6, fp
 80098b2:	f67f aebf 	bls.w	8009634 <_scanf_float+0x80>
 80098b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098be:	463a      	mov	r2, r7
 80098c0:	4640      	mov	r0, r8
 80098c2:	4798      	blx	r3
 80098c4:	6923      	ldr	r3, [r4, #16]
 80098c6:	3b01      	subs	r3, #1
 80098c8:	6123      	str	r3, [r4, #16]
 80098ca:	e7f1      	b.n	80098b0 <_scanf_float+0x2fc>
 80098cc:	46aa      	mov	sl, r5
 80098ce:	9602      	str	r6, [sp, #8]
 80098d0:	e7df      	b.n	8009892 <_scanf_float+0x2de>
 80098d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80098d6:	6923      	ldr	r3, [r4, #16]
 80098d8:	2965      	cmp	r1, #101	; 0x65
 80098da:	f103 33ff 	add.w	r3, r3, #4294967295
 80098de:	f106 35ff 	add.w	r5, r6, #4294967295
 80098e2:	6123      	str	r3, [r4, #16]
 80098e4:	d00c      	beq.n	8009900 <_scanf_float+0x34c>
 80098e6:	2945      	cmp	r1, #69	; 0x45
 80098e8:	d00a      	beq.n	8009900 <_scanf_float+0x34c>
 80098ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098ee:	463a      	mov	r2, r7
 80098f0:	4640      	mov	r0, r8
 80098f2:	4798      	blx	r3
 80098f4:	6923      	ldr	r3, [r4, #16]
 80098f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80098fa:	3b01      	subs	r3, #1
 80098fc:	1eb5      	subs	r5, r6, #2
 80098fe:	6123      	str	r3, [r4, #16]
 8009900:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009904:	463a      	mov	r2, r7
 8009906:	4640      	mov	r0, r8
 8009908:	4798      	blx	r3
 800990a:	462e      	mov	r6, r5
 800990c:	6825      	ldr	r5, [r4, #0]
 800990e:	f015 0510 	ands.w	r5, r5, #16
 8009912:	d159      	bne.n	80099c8 <_scanf_float+0x414>
 8009914:	7035      	strb	r5, [r6, #0]
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800991c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009920:	d11b      	bne.n	800995a <_scanf_float+0x3a6>
 8009922:	9b01      	ldr	r3, [sp, #4]
 8009924:	454b      	cmp	r3, r9
 8009926:	eba3 0209 	sub.w	r2, r3, r9
 800992a:	d123      	bne.n	8009974 <_scanf_float+0x3c0>
 800992c:	2200      	movs	r2, #0
 800992e:	4659      	mov	r1, fp
 8009930:	4640      	mov	r0, r8
 8009932:	f000 ff0b 	bl	800a74c <_strtod_r>
 8009936:	6822      	ldr	r2, [r4, #0]
 8009938:	9b03      	ldr	r3, [sp, #12]
 800993a:	f012 0f02 	tst.w	r2, #2
 800993e:	ec57 6b10 	vmov	r6, r7, d0
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	d021      	beq.n	800998a <_scanf_float+0x3d6>
 8009946:	9903      	ldr	r1, [sp, #12]
 8009948:	1d1a      	adds	r2, r3, #4
 800994a:	600a      	str	r2, [r1, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	e9c3 6700 	strd	r6, r7, [r3]
 8009952:	68e3      	ldr	r3, [r4, #12]
 8009954:	3301      	adds	r3, #1
 8009956:	60e3      	str	r3, [r4, #12]
 8009958:	e66d      	b.n	8009636 <_scanf_float+0x82>
 800995a:	9b04      	ldr	r3, [sp, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0e5      	beq.n	800992c <_scanf_float+0x378>
 8009960:	9905      	ldr	r1, [sp, #20]
 8009962:	230a      	movs	r3, #10
 8009964:	462a      	mov	r2, r5
 8009966:	3101      	adds	r1, #1
 8009968:	4640      	mov	r0, r8
 800996a:	f000 ff77 	bl	800a85c <_strtol_r>
 800996e:	9b04      	ldr	r3, [sp, #16]
 8009970:	9e05      	ldr	r6, [sp, #20]
 8009972:	1ac2      	subs	r2, r0, r3
 8009974:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009978:	429e      	cmp	r6, r3
 800997a:	bf28      	it	cs
 800997c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009980:	4912      	ldr	r1, [pc, #72]	; (80099cc <_scanf_float+0x418>)
 8009982:	4630      	mov	r0, r6
 8009984:	f000 f82c 	bl	80099e0 <siprintf>
 8009988:	e7d0      	b.n	800992c <_scanf_float+0x378>
 800998a:	9903      	ldr	r1, [sp, #12]
 800998c:	f012 0f04 	tst.w	r2, #4
 8009990:	f103 0204 	add.w	r2, r3, #4
 8009994:	600a      	str	r2, [r1, #0]
 8009996:	d1d9      	bne.n	800994c <_scanf_float+0x398>
 8009998:	f8d3 8000 	ldr.w	r8, [r3]
 800999c:	ee10 2a10 	vmov	r2, s0
 80099a0:	ee10 0a10 	vmov	r0, s0
 80099a4:	463b      	mov	r3, r7
 80099a6:	4639      	mov	r1, r7
 80099a8:	f7f7 f8d8 	bl	8000b5c <__aeabi_dcmpun>
 80099ac:	b128      	cbz	r0, 80099ba <_scanf_float+0x406>
 80099ae:	4808      	ldr	r0, [pc, #32]	; (80099d0 <_scanf_float+0x41c>)
 80099b0:	f000 f810 	bl	80099d4 <nanf>
 80099b4:	ed88 0a00 	vstr	s0, [r8]
 80099b8:	e7cb      	b.n	8009952 <_scanf_float+0x39e>
 80099ba:	4630      	mov	r0, r6
 80099bc:	4639      	mov	r1, r7
 80099be:	f7f7 f92b 	bl	8000c18 <__aeabi_d2f>
 80099c2:	f8c8 0000 	str.w	r0, [r8]
 80099c6:	e7c4      	b.n	8009952 <_scanf_float+0x39e>
 80099c8:	2500      	movs	r5, #0
 80099ca:	e634      	b.n	8009636 <_scanf_float+0x82>
 80099cc:	08010316 	.word	0x08010316
 80099d0:	0801073b 	.word	0x0801073b

080099d4 <nanf>:
 80099d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80099dc <nanf+0x8>
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	7fc00000 	.word	0x7fc00000

080099e0 <siprintf>:
 80099e0:	b40e      	push	{r1, r2, r3}
 80099e2:	b500      	push	{lr}
 80099e4:	b09c      	sub	sp, #112	; 0x70
 80099e6:	ab1d      	add	r3, sp, #116	; 0x74
 80099e8:	9002      	str	r0, [sp, #8]
 80099ea:	9006      	str	r0, [sp, #24]
 80099ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099f0:	4809      	ldr	r0, [pc, #36]	; (8009a18 <siprintf+0x38>)
 80099f2:	9107      	str	r1, [sp, #28]
 80099f4:	9104      	str	r1, [sp, #16]
 80099f6:	4909      	ldr	r1, [pc, #36]	; (8009a1c <siprintf+0x3c>)
 80099f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099fc:	9105      	str	r1, [sp, #20]
 80099fe:	6800      	ldr	r0, [r0, #0]
 8009a00:	9301      	str	r3, [sp, #4]
 8009a02:	a902      	add	r1, sp, #8
 8009a04:	f002 ff7e 	bl	800c904 <_svfiprintf_r>
 8009a08:	9b02      	ldr	r3, [sp, #8]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	701a      	strb	r2, [r3, #0]
 8009a0e:	b01c      	add	sp, #112	; 0x70
 8009a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a14:	b003      	add	sp, #12
 8009a16:	4770      	bx	lr
 8009a18:	20000020 	.word	0x20000020
 8009a1c:	ffff0208 	.word	0xffff0208

08009a20 <siscanf>:
 8009a20:	b40e      	push	{r1, r2, r3}
 8009a22:	b510      	push	{r4, lr}
 8009a24:	b09f      	sub	sp, #124	; 0x7c
 8009a26:	ac21      	add	r4, sp, #132	; 0x84
 8009a28:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009a2c:	f854 2b04 	ldr.w	r2, [r4], #4
 8009a30:	9201      	str	r2, [sp, #4]
 8009a32:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009a36:	9004      	str	r0, [sp, #16]
 8009a38:	9008      	str	r0, [sp, #32]
 8009a3a:	f7f6 fbdb 	bl	80001f4 <strlen>
 8009a3e:	4b0c      	ldr	r3, [pc, #48]	; (8009a70 <siscanf+0x50>)
 8009a40:	9005      	str	r0, [sp, #20]
 8009a42:	9009      	str	r0, [sp, #36]	; 0x24
 8009a44:	930d      	str	r3, [sp, #52]	; 0x34
 8009a46:	480b      	ldr	r0, [pc, #44]	; (8009a74 <siscanf+0x54>)
 8009a48:	9a01      	ldr	r2, [sp, #4]
 8009a4a:	6800      	ldr	r0, [r0, #0]
 8009a4c:	9403      	str	r4, [sp, #12]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	9311      	str	r3, [sp, #68]	; 0x44
 8009a52:	9316      	str	r3, [sp, #88]	; 0x58
 8009a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a58:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009a5c:	a904      	add	r1, sp, #16
 8009a5e:	4623      	mov	r3, r4
 8009a60:	f003 f8aa 	bl	800cbb8 <__ssvfiscanf_r>
 8009a64:	b01f      	add	sp, #124	; 0x7c
 8009a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a6a:	b003      	add	sp, #12
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	08009a9b 	.word	0x08009a9b
 8009a74:	20000020 	.word	0x20000020

08009a78 <__sread>:
 8009a78:	b510      	push	{r4, lr}
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a80:	f003 fb64 	bl	800d14c <_read_r>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	bfab      	itete	ge
 8009a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8009a8c:	181b      	addge	r3, r3, r0
 8009a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a92:	bfac      	ite	ge
 8009a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a96:	81a3      	strhlt	r3, [r4, #12]
 8009a98:	bd10      	pop	{r4, pc}

08009a9a <__seofread>:
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	4770      	bx	lr

08009a9e <__swrite>:
 8009a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa2:	461f      	mov	r7, r3
 8009aa4:	898b      	ldrh	r3, [r1, #12]
 8009aa6:	05db      	lsls	r3, r3, #23
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	460c      	mov	r4, r1
 8009aac:	4616      	mov	r6, r2
 8009aae:	d505      	bpl.n	8009abc <__swrite+0x1e>
 8009ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f002 f8e4 	bl	800bc84 <_lseek_r>
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	4632      	mov	r2, r6
 8009aca:	463b      	mov	r3, r7
 8009acc:	4628      	mov	r0, r5
 8009ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad2:	f000 bec5 	b.w	800a860 <_write_r>

08009ad6 <__sseek>:
 8009ad6:	b510      	push	{r4, lr}
 8009ad8:	460c      	mov	r4, r1
 8009ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ade:	f002 f8d1 	bl	800bc84 <_lseek_r>
 8009ae2:	1c43      	adds	r3, r0, #1
 8009ae4:	89a3      	ldrh	r3, [r4, #12]
 8009ae6:	bf15      	itete	ne
 8009ae8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009aea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009aee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009af2:	81a3      	strheq	r3, [r4, #12]
 8009af4:	bf18      	it	ne
 8009af6:	81a3      	strhne	r3, [r4, #12]
 8009af8:	bd10      	pop	{r4, pc}

08009afa <__sclose>:
 8009afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009afe:	f000 bec1 	b.w	800a884 <_close_r>

08009b02 <sulp>:
 8009b02:	b570      	push	{r4, r5, r6, lr}
 8009b04:	4604      	mov	r4, r0
 8009b06:	460d      	mov	r5, r1
 8009b08:	ec45 4b10 	vmov	d0, r4, r5
 8009b0c:	4616      	mov	r6, r2
 8009b0e:	f002 fc57 	bl	800c3c0 <__ulp>
 8009b12:	ec51 0b10 	vmov	r0, r1, d0
 8009b16:	b17e      	cbz	r6, 8009b38 <sulp+0x36>
 8009b18:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009b1c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	dd09      	ble.n	8009b38 <sulp+0x36>
 8009b24:	051b      	lsls	r3, r3, #20
 8009b26:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009b2a:	2400      	movs	r4, #0
 8009b2c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009b30:	4622      	mov	r2, r4
 8009b32:	462b      	mov	r3, r5
 8009b34:	f7f6 fd78 	bl	8000628 <__aeabi_dmul>
 8009b38:	bd70      	pop	{r4, r5, r6, pc}
 8009b3a:	0000      	movs	r0, r0
 8009b3c:	0000      	movs	r0, r0
	...

08009b40 <_strtod_l>:
 8009b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	ed2d 8b02 	vpush	{d8}
 8009b48:	b09d      	sub	sp, #116	; 0x74
 8009b4a:	461f      	mov	r7, r3
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	9318      	str	r3, [sp, #96]	; 0x60
 8009b50:	4ba2      	ldr	r3, [pc, #648]	; (8009ddc <_strtod_l+0x29c>)
 8009b52:	9213      	str	r2, [sp, #76]	; 0x4c
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	9305      	str	r3, [sp, #20]
 8009b58:	4604      	mov	r4, r0
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	4688      	mov	r8, r1
 8009b5e:	f7f6 fb49 	bl	80001f4 <strlen>
 8009b62:	f04f 0a00 	mov.w	sl, #0
 8009b66:	4605      	mov	r5, r0
 8009b68:	f04f 0b00 	mov.w	fp, #0
 8009b6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009b70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b72:	781a      	ldrb	r2, [r3, #0]
 8009b74:	2a2b      	cmp	r2, #43	; 0x2b
 8009b76:	d04e      	beq.n	8009c16 <_strtod_l+0xd6>
 8009b78:	d83b      	bhi.n	8009bf2 <_strtod_l+0xb2>
 8009b7a:	2a0d      	cmp	r2, #13
 8009b7c:	d834      	bhi.n	8009be8 <_strtod_l+0xa8>
 8009b7e:	2a08      	cmp	r2, #8
 8009b80:	d834      	bhi.n	8009bec <_strtod_l+0xac>
 8009b82:	2a00      	cmp	r2, #0
 8009b84:	d03e      	beq.n	8009c04 <_strtod_l+0xc4>
 8009b86:	2300      	movs	r3, #0
 8009b88:	930a      	str	r3, [sp, #40]	; 0x28
 8009b8a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009b8c:	7833      	ldrb	r3, [r6, #0]
 8009b8e:	2b30      	cmp	r3, #48	; 0x30
 8009b90:	f040 80b0 	bne.w	8009cf4 <_strtod_l+0x1b4>
 8009b94:	7873      	ldrb	r3, [r6, #1]
 8009b96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b9a:	2b58      	cmp	r3, #88	; 0x58
 8009b9c:	d168      	bne.n	8009c70 <_strtod_l+0x130>
 8009b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	ab18      	add	r3, sp, #96	; 0x60
 8009ba4:	9702      	str	r7, [sp, #8]
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	4a8d      	ldr	r2, [pc, #564]	; (8009de0 <_strtod_l+0x2a0>)
 8009baa:	ab19      	add	r3, sp, #100	; 0x64
 8009bac:	a917      	add	r1, sp, #92	; 0x5c
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f001 fd5c 	bl	800b66c <__gethex>
 8009bb4:	f010 0707 	ands.w	r7, r0, #7
 8009bb8:	4605      	mov	r5, r0
 8009bba:	d005      	beq.n	8009bc8 <_strtod_l+0x88>
 8009bbc:	2f06      	cmp	r7, #6
 8009bbe:	d12c      	bne.n	8009c1a <_strtod_l+0xda>
 8009bc0:	3601      	adds	r6, #1
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	9617      	str	r6, [sp, #92]	; 0x5c
 8009bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8009bc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	f040 8590 	bne.w	800a6f0 <_strtod_l+0xbb0>
 8009bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd2:	b1eb      	cbz	r3, 8009c10 <_strtod_l+0xd0>
 8009bd4:	4652      	mov	r2, sl
 8009bd6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009bda:	ec43 2b10 	vmov	d0, r2, r3
 8009bde:	b01d      	add	sp, #116	; 0x74
 8009be0:	ecbd 8b02 	vpop	{d8}
 8009be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be8:	2a20      	cmp	r2, #32
 8009bea:	d1cc      	bne.n	8009b86 <_strtod_l+0x46>
 8009bec:	3301      	adds	r3, #1
 8009bee:	9317      	str	r3, [sp, #92]	; 0x5c
 8009bf0:	e7be      	b.n	8009b70 <_strtod_l+0x30>
 8009bf2:	2a2d      	cmp	r2, #45	; 0x2d
 8009bf4:	d1c7      	bne.n	8009b86 <_strtod_l+0x46>
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	920a      	str	r2, [sp, #40]	; 0x28
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	9217      	str	r2, [sp, #92]	; 0x5c
 8009bfe:	785b      	ldrb	r3, [r3, #1]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1c2      	bne.n	8009b8a <_strtod_l+0x4a>
 8009c04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c06:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f040 856e 	bne.w	800a6ec <_strtod_l+0xbac>
 8009c10:	4652      	mov	r2, sl
 8009c12:	465b      	mov	r3, fp
 8009c14:	e7e1      	b.n	8009bda <_strtod_l+0x9a>
 8009c16:	2200      	movs	r2, #0
 8009c18:	e7ee      	b.n	8009bf8 <_strtod_l+0xb8>
 8009c1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009c1c:	b13a      	cbz	r2, 8009c2e <_strtod_l+0xee>
 8009c1e:	2135      	movs	r1, #53	; 0x35
 8009c20:	a81a      	add	r0, sp, #104	; 0x68
 8009c22:	f002 fcd8 	bl	800c5d6 <__copybits>
 8009c26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f002 f897 	bl	800bd5c <_Bfree>
 8009c2e:	3f01      	subs	r7, #1
 8009c30:	2f04      	cmp	r7, #4
 8009c32:	d806      	bhi.n	8009c42 <_strtod_l+0x102>
 8009c34:	e8df f007 	tbb	[pc, r7]
 8009c38:	1714030a 	.word	0x1714030a
 8009c3c:	0a          	.byte	0x0a
 8009c3d:	00          	.byte	0x00
 8009c3e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009c42:	0728      	lsls	r0, r5, #28
 8009c44:	d5c0      	bpl.n	8009bc8 <_strtod_l+0x88>
 8009c46:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009c4a:	e7bd      	b.n	8009bc8 <_strtod_l+0x88>
 8009c4c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009c50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009c56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009c5e:	e7f0      	b.n	8009c42 <_strtod_l+0x102>
 8009c60:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009de4 <_strtod_l+0x2a4>
 8009c64:	e7ed      	b.n	8009c42 <_strtod_l+0x102>
 8009c66:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009c6a:	f04f 3aff 	mov.w	sl, #4294967295
 8009c6e:	e7e8      	b.n	8009c42 <_strtod_l+0x102>
 8009c70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c76:	785b      	ldrb	r3, [r3, #1]
 8009c78:	2b30      	cmp	r3, #48	; 0x30
 8009c7a:	d0f9      	beq.n	8009c70 <_strtod_l+0x130>
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0a3      	beq.n	8009bc8 <_strtod_l+0x88>
 8009c80:	2301      	movs	r3, #1
 8009c82:	f04f 0900 	mov.w	r9, #0
 8009c86:	9304      	str	r3, [sp, #16]
 8009c88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c8a:	9308      	str	r3, [sp, #32]
 8009c8c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009c90:	464f      	mov	r7, r9
 8009c92:	220a      	movs	r2, #10
 8009c94:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009c96:	7806      	ldrb	r6, [r0, #0]
 8009c98:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009c9c:	b2d9      	uxtb	r1, r3
 8009c9e:	2909      	cmp	r1, #9
 8009ca0:	d92a      	bls.n	8009cf8 <_strtod_l+0x1b8>
 8009ca2:	9905      	ldr	r1, [sp, #20]
 8009ca4:	462a      	mov	r2, r5
 8009ca6:	f003 fab3 	bl	800d210 <strncmp>
 8009caa:	b398      	cbz	r0, 8009d14 <_strtod_l+0x1d4>
 8009cac:	2000      	movs	r0, #0
 8009cae:	4632      	mov	r2, r6
 8009cb0:	463d      	mov	r5, r7
 8009cb2:	9005      	str	r0, [sp, #20]
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2a65      	cmp	r2, #101	; 0x65
 8009cb8:	d001      	beq.n	8009cbe <_strtod_l+0x17e>
 8009cba:	2a45      	cmp	r2, #69	; 0x45
 8009cbc:	d118      	bne.n	8009cf0 <_strtod_l+0x1b0>
 8009cbe:	b91d      	cbnz	r5, 8009cc8 <_strtod_l+0x188>
 8009cc0:	9a04      	ldr	r2, [sp, #16]
 8009cc2:	4302      	orrs	r2, r0
 8009cc4:	d09e      	beq.n	8009c04 <_strtod_l+0xc4>
 8009cc6:	2500      	movs	r5, #0
 8009cc8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009ccc:	f108 0201 	add.w	r2, r8, #1
 8009cd0:	9217      	str	r2, [sp, #92]	; 0x5c
 8009cd2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009cd6:	2a2b      	cmp	r2, #43	; 0x2b
 8009cd8:	d075      	beq.n	8009dc6 <_strtod_l+0x286>
 8009cda:	2a2d      	cmp	r2, #45	; 0x2d
 8009cdc:	d07b      	beq.n	8009dd6 <_strtod_l+0x296>
 8009cde:	f04f 0c00 	mov.w	ip, #0
 8009ce2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009ce6:	2909      	cmp	r1, #9
 8009ce8:	f240 8082 	bls.w	8009df0 <_strtod_l+0x2b0>
 8009cec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009cf0:	2600      	movs	r6, #0
 8009cf2:	e09d      	b.n	8009e30 <_strtod_l+0x2f0>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	e7c4      	b.n	8009c82 <_strtod_l+0x142>
 8009cf8:	2f08      	cmp	r7, #8
 8009cfa:	bfd8      	it	le
 8009cfc:	9907      	ldrle	r1, [sp, #28]
 8009cfe:	f100 0001 	add.w	r0, r0, #1
 8009d02:	bfda      	itte	le
 8009d04:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d08:	9307      	strle	r3, [sp, #28]
 8009d0a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009d0e:	3701      	adds	r7, #1
 8009d10:	9017      	str	r0, [sp, #92]	; 0x5c
 8009d12:	e7bf      	b.n	8009c94 <_strtod_l+0x154>
 8009d14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d16:	195a      	adds	r2, r3, r5
 8009d18:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d1a:	5d5a      	ldrb	r2, [r3, r5]
 8009d1c:	2f00      	cmp	r7, #0
 8009d1e:	d037      	beq.n	8009d90 <_strtod_l+0x250>
 8009d20:	9005      	str	r0, [sp, #20]
 8009d22:	463d      	mov	r5, r7
 8009d24:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009d28:	2b09      	cmp	r3, #9
 8009d2a:	d912      	bls.n	8009d52 <_strtod_l+0x212>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e7c2      	b.n	8009cb6 <_strtod_l+0x176>
 8009d30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d32:	1c5a      	adds	r2, r3, #1
 8009d34:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d36:	785a      	ldrb	r2, [r3, #1]
 8009d38:	3001      	adds	r0, #1
 8009d3a:	2a30      	cmp	r2, #48	; 0x30
 8009d3c:	d0f8      	beq.n	8009d30 <_strtod_l+0x1f0>
 8009d3e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009d42:	2b08      	cmp	r3, #8
 8009d44:	f200 84d9 	bhi.w	800a6fa <_strtod_l+0xbba>
 8009d48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d4a:	9005      	str	r0, [sp, #20]
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	9308      	str	r3, [sp, #32]
 8009d50:	4605      	mov	r5, r0
 8009d52:	3a30      	subs	r2, #48	; 0x30
 8009d54:	f100 0301 	add.w	r3, r0, #1
 8009d58:	d014      	beq.n	8009d84 <_strtod_l+0x244>
 8009d5a:	9905      	ldr	r1, [sp, #20]
 8009d5c:	4419      	add	r1, r3
 8009d5e:	9105      	str	r1, [sp, #20]
 8009d60:	462b      	mov	r3, r5
 8009d62:	eb00 0e05 	add.w	lr, r0, r5
 8009d66:	210a      	movs	r1, #10
 8009d68:	4573      	cmp	r3, lr
 8009d6a:	d113      	bne.n	8009d94 <_strtod_l+0x254>
 8009d6c:	182b      	adds	r3, r5, r0
 8009d6e:	2b08      	cmp	r3, #8
 8009d70:	f105 0501 	add.w	r5, r5, #1
 8009d74:	4405      	add	r5, r0
 8009d76:	dc1c      	bgt.n	8009db2 <_strtod_l+0x272>
 8009d78:	9907      	ldr	r1, [sp, #28]
 8009d7a:	230a      	movs	r3, #10
 8009d7c:	fb03 2301 	mla	r3, r3, r1, r2
 8009d80:	9307      	str	r3, [sp, #28]
 8009d82:	2300      	movs	r3, #0
 8009d84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d86:	1c51      	adds	r1, r2, #1
 8009d88:	9117      	str	r1, [sp, #92]	; 0x5c
 8009d8a:	7852      	ldrb	r2, [r2, #1]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	e7c9      	b.n	8009d24 <_strtod_l+0x1e4>
 8009d90:	4638      	mov	r0, r7
 8009d92:	e7d2      	b.n	8009d3a <_strtod_l+0x1fa>
 8009d94:	2b08      	cmp	r3, #8
 8009d96:	dc04      	bgt.n	8009da2 <_strtod_l+0x262>
 8009d98:	9e07      	ldr	r6, [sp, #28]
 8009d9a:	434e      	muls	r6, r1
 8009d9c:	9607      	str	r6, [sp, #28]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	e7e2      	b.n	8009d68 <_strtod_l+0x228>
 8009da2:	f103 0c01 	add.w	ip, r3, #1
 8009da6:	f1bc 0f10 	cmp.w	ip, #16
 8009daa:	bfd8      	it	le
 8009dac:	fb01 f909 	mulle.w	r9, r1, r9
 8009db0:	e7f5      	b.n	8009d9e <_strtod_l+0x25e>
 8009db2:	2d10      	cmp	r5, #16
 8009db4:	bfdc      	itt	le
 8009db6:	230a      	movle	r3, #10
 8009db8:	fb03 2909 	mlale	r9, r3, r9, r2
 8009dbc:	e7e1      	b.n	8009d82 <_strtod_l+0x242>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	9305      	str	r3, [sp, #20]
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e77c      	b.n	8009cc0 <_strtod_l+0x180>
 8009dc6:	f04f 0c00 	mov.w	ip, #0
 8009dca:	f108 0202 	add.w	r2, r8, #2
 8009dce:	9217      	str	r2, [sp, #92]	; 0x5c
 8009dd0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009dd4:	e785      	b.n	8009ce2 <_strtod_l+0x1a2>
 8009dd6:	f04f 0c01 	mov.w	ip, #1
 8009dda:	e7f6      	b.n	8009dca <_strtod_l+0x28a>
 8009ddc:	08010568 	.word	0x08010568
 8009de0:	0801031c 	.word	0x0801031c
 8009de4:	7ff00000 	.word	0x7ff00000
 8009de8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009dea:	1c51      	adds	r1, r2, #1
 8009dec:	9117      	str	r1, [sp, #92]	; 0x5c
 8009dee:	7852      	ldrb	r2, [r2, #1]
 8009df0:	2a30      	cmp	r2, #48	; 0x30
 8009df2:	d0f9      	beq.n	8009de8 <_strtod_l+0x2a8>
 8009df4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009df8:	2908      	cmp	r1, #8
 8009dfa:	f63f af79 	bhi.w	8009cf0 <_strtod_l+0x1b0>
 8009dfe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009e02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e04:	9206      	str	r2, [sp, #24]
 8009e06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e08:	1c51      	adds	r1, r2, #1
 8009e0a:	9117      	str	r1, [sp, #92]	; 0x5c
 8009e0c:	7852      	ldrb	r2, [r2, #1]
 8009e0e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009e12:	2e09      	cmp	r6, #9
 8009e14:	d937      	bls.n	8009e86 <_strtod_l+0x346>
 8009e16:	9e06      	ldr	r6, [sp, #24]
 8009e18:	1b89      	subs	r1, r1, r6
 8009e1a:	2908      	cmp	r1, #8
 8009e1c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009e20:	dc02      	bgt.n	8009e28 <_strtod_l+0x2e8>
 8009e22:	4576      	cmp	r6, lr
 8009e24:	bfa8      	it	ge
 8009e26:	4676      	movge	r6, lr
 8009e28:	f1bc 0f00 	cmp.w	ip, #0
 8009e2c:	d000      	beq.n	8009e30 <_strtod_l+0x2f0>
 8009e2e:	4276      	negs	r6, r6
 8009e30:	2d00      	cmp	r5, #0
 8009e32:	d14d      	bne.n	8009ed0 <_strtod_l+0x390>
 8009e34:	9904      	ldr	r1, [sp, #16]
 8009e36:	4301      	orrs	r1, r0
 8009e38:	f47f aec6 	bne.w	8009bc8 <_strtod_l+0x88>
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f47f aee1 	bne.w	8009c04 <_strtod_l+0xc4>
 8009e42:	2a69      	cmp	r2, #105	; 0x69
 8009e44:	d027      	beq.n	8009e96 <_strtod_l+0x356>
 8009e46:	dc24      	bgt.n	8009e92 <_strtod_l+0x352>
 8009e48:	2a49      	cmp	r2, #73	; 0x49
 8009e4a:	d024      	beq.n	8009e96 <_strtod_l+0x356>
 8009e4c:	2a4e      	cmp	r2, #78	; 0x4e
 8009e4e:	f47f aed9 	bne.w	8009c04 <_strtod_l+0xc4>
 8009e52:	499f      	ldr	r1, [pc, #636]	; (800a0d0 <_strtod_l+0x590>)
 8009e54:	a817      	add	r0, sp, #92	; 0x5c
 8009e56:	f001 fe61 	bl	800bb1c <__match>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	f43f aed2 	beq.w	8009c04 <_strtod_l+0xc4>
 8009e60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	2b28      	cmp	r3, #40	; 0x28
 8009e66:	d12d      	bne.n	8009ec4 <_strtod_l+0x384>
 8009e68:	499a      	ldr	r1, [pc, #616]	; (800a0d4 <_strtod_l+0x594>)
 8009e6a:	aa1a      	add	r2, sp, #104	; 0x68
 8009e6c:	a817      	add	r0, sp, #92	; 0x5c
 8009e6e:	f001 fe69 	bl	800bb44 <__hexnan>
 8009e72:	2805      	cmp	r0, #5
 8009e74:	d126      	bne.n	8009ec4 <_strtod_l+0x384>
 8009e76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e78:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009e7c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009e80:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009e84:	e6a0      	b.n	8009bc8 <_strtod_l+0x88>
 8009e86:	210a      	movs	r1, #10
 8009e88:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009e8c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009e90:	e7b9      	b.n	8009e06 <_strtod_l+0x2c6>
 8009e92:	2a6e      	cmp	r2, #110	; 0x6e
 8009e94:	e7db      	b.n	8009e4e <_strtod_l+0x30e>
 8009e96:	4990      	ldr	r1, [pc, #576]	; (800a0d8 <_strtod_l+0x598>)
 8009e98:	a817      	add	r0, sp, #92	; 0x5c
 8009e9a:	f001 fe3f 	bl	800bb1c <__match>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	f43f aeb0 	beq.w	8009c04 <_strtod_l+0xc4>
 8009ea4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ea6:	498d      	ldr	r1, [pc, #564]	; (800a0dc <_strtod_l+0x59c>)
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	a817      	add	r0, sp, #92	; 0x5c
 8009eac:	9317      	str	r3, [sp, #92]	; 0x5c
 8009eae:	f001 fe35 	bl	800bb1c <__match>
 8009eb2:	b910      	cbnz	r0, 8009eba <_strtod_l+0x37a>
 8009eb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	9317      	str	r3, [sp, #92]	; 0x5c
 8009eba:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a0ec <_strtod_l+0x5ac>
 8009ebe:	f04f 0a00 	mov.w	sl, #0
 8009ec2:	e681      	b.n	8009bc8 <_strtod_l+0x88>
 8009ec4:	4886      	ldr	r0, [pc, #536]	; (800a0e0 <_strtod_l+0x5a0>)
 8009ec6:	f003 f953 	bl	800d170 <nan>
 8009eca:	ec5b ab10 	vmov	sl, fp, d0
 8009ece:	e67b      	b.n	8009bc8 <_strtod_l+0x88>
 8009ed0:	9b05      	ldr	r3, [sp, #20]
 8009ed2:	9807      	ldr	r0, [sp, #28]
 8009ed4:	1af3      	subs	r3, r6, r3
 8009ed6:	2f00      	cmp	r7, #0
 8009ed8:	bf08      	it	eq
 8009eda:	462f      	moveq	r7, r5
 8009edc:	2d10      	cmp	r5, #16
 8009ede:	9306      	str	r3, [sp, #24]
 8009ee0:	46a8      	mov	r8, r5
 8009ee2:	bfa8      	it	ge
 8009ee4:	f04f 0810 	movge.w	r8, #16
 8009ee8:	f7f6 fb24 	bl	8000534 <__aeabi_ui2d>
 8009eec:	2d09      	cmp	r5, #9
 8009eee:	4682      	mov	sl, r0
 8009ef0:	468b      	mov	fp, r1
 8009ef2:	dd13      	ble.n	8009f1c <_strtod_l+0x3dc>
 8009ef4:	4b7b      	ldr	r3, [pc, #492]	; (800a0e4 <_strtod_l+0x5a4>)
 8009ef6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009efa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009efe:	f7f6 fb93 	bl	8000628 <__aeabi_dmul>
 8009f02:	4682      	mov	sl, r0
 8009f04:	4648      	mov	r0, r9
 8009f06:	468b      	mov	fp, r1
 8009f08:	f7f6 fb14 	bl	8000534 <__aeabi_ui2d>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4650      	mov	r0, sl
 8009f12:	4659      	mov	r1, fp
 8009f14:	f7f6 f9d2 	bl	80002bc <__adddf3>
 8009f18:	4682      	mov	sl, r0
 8009f1a:	468b      	mov	fp, r1
 8009f1c:	2d0f      	cmp	r5, #15
 8009f1e:	dc38      	bgt.n	8009f92 <_strtod_l+0x452>
 8009f20:	9b06      	ldr	r3, [sp, #24]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f43f ae50 	beq.w	8009bc8 <_strtod_l+0x88>
 8009f28:	dd24      	ble.n	8009f74 <_strtod_l+0x434>
 8009f2a:	2b16      	cmp	r3, #22
 8009f2c:	dc0b      	bgt.n	8009f46 <_strtod_l+0x406>
 8009f2e:	496d      	ldr	r1, [pc, #436]	; (800a0e4 <_strtod_l+0x5a4>)
 8009f30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f38:	4652      	mov	r2, sl
 8009f3a:	465b      	mov	r3, fp
 8009f3c:	f7f6 fb74 	bl	8000628 <__aeabi_dmul>
 8009f40:	4682      	mov	sl, r0
 8009f42:	468b      	mov	fp, r1
 8009f44:	e640      	b.n	8009bc8 <_strtod_l+0x88>
 8009f46:	9a06      	ldr	r2, [sp, #24]
 8009f48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	db20      	blt.n	8009f92 <_strtod_l+0x452>
 8009f50:	4c64      	ldr	r4, [pc, #400]	; (800a0e4 <_strtod_l+0x5a4>)
 8009f52:	f1c5 050f 	rsb	r5, r5, #15
 8009f56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009f5a:	4652      	mov	r2, sl
 8009f5c:	465b      	mov	r3, fp
 8009f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f62:	f7f6 fb61 	bl	8000628 <__aeabi_dmul>
 8009f66:	9b06      	ldr	r3, [sp, #24]
 8009f68:	1b5d      	subs	r5, r3, r5
 8009f6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009f6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f72:	e7e3      	b.n	8009f3c <_strtod_l+0x3fc>
 8009f74:	9b06      	ldr	r3, [sp, #24]
 8009f76:	3316      	adds	r3, #22
 8009f78:	db0b      	blt.n	8009f92 <_strtod_l+0x452>
 8009f7a:	9b05      	ldr	r3, [sp, #20]
 8009f7c:	1b9e      	subs	r6, r3, r6
 8009f7e:	4b59      	ldr	r3, [pc, #356]	; (800a0e4 <_strtod_l+0x5a4>)
 8009f80:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009f84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f88:	4650      	mov	r0, sl
 8009f8a:	4659      	mov	r1, fp
 8009f8c:	f7f6 fc76 	bl	800087c <__aeabi_ddiv>
 8009f90:	e7d6      	b.n	8009f40 <_strtod_l+0x400>
 8009f92:	9b06      	ldr	r3, [sp, #24]
 8009f94:	eba5 0808 	sub.w	r8, r5, r8
 8009f98:	4498      	add	r8, r3
 8009f9a:	f1b8 0f00 	cmp.w	r8, #0
 8009f9e:	dd74      	ble.n	800a08a <_strtod_l+0x54a>
 8009fa0:	f018 030f 	ands.w	r3, r8, #15
 8009fa4:	d00a      	beq.n	8009fbc <_strtod_l+0x47c>
 8009fa6:	494f      	ldr	r1, [pc, #316]	; (800a0e4 <_strtod_l+0x5a4>)
 8009fa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009fac:	4652      	mov	r2, sl
 8009fae:	465b      	mov	r3, fp
 8009fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fb4:	f7f6 fb38 	bl	8000628 <__aeabi_dmul>
 8009fb8:	4682      	mov	sl, r0
 8009fba:	468b      	mov	fp, r1
 8009fbc:	f038 080f 	bics.w	r8, r8, #15
 8009fc0:	d04f      	beq.n	800a062 <_strtod_l+0x522>
 8009fc2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009fc6:	dd22      	ble.n	800a00e <_strtod_l+0x4ce>
 8009fc8:	2500      	movs	r5, #0
 8009fca:	462e      	mov	r6, r5
 8009fcc:	9507      	str	r5, [sp, #28]
 8009fce:	9505      	str	r5, [sp, #20]
 8009fd0:	2322      	movs	r3, #34	; 0x22
 8009fd2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a0ec <_strtod_l+0x5ac>
 8009fd6:	6023      	str	r3, [r4, #0]
 8009fd8:	f04f 0a00 	mov.w	sl, #0
 8009fdc:	9b07      	ldr	r3, [sp, #28]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f43f adf2 	beq.w	8009bc8 <_strtod_l+0x88>
 8009fe4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f001 feb8 	bl	800bd5c <_Bfree>
 8009fec:	9905      	ldr	r1, [sp, #20]
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f001 feb4 	bl	800bd5c <_Bfree>
 8009ff4:	4631      	mov	r1, r6
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f001 feb0 	bl	800bd5c <_Bfree>
 8009ffc:	9907      	ldr	r1, [sp, #28]
 8009ffe:	4620      	mov	r0, r4
 800a000:	f001 feac 	bl	800bd5c <_Bfree>
 800a004:	4629      	mov	r1, r5
 800a006:	4620      	mov	r0, r4
 800a008:	f001 fea8 	bl	800bd5c <_Bfree>
 800a00c:	e5dc      	b.n	8009bc8 <_strtod_l+0x88>
 800a00e:	4b36      	ldr	r3, [pc, #216]	; (800a0e8 <_strtod_l+0x5a8>)
 800a010:	9304      	str	r3, [sp, #16]
 800a012:	2300      	movs	r3, #0
 800a014:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a018:	4650      	mov	r0, sl
 800a01a:	4659      	mov	r1, fp
 800a01c:	4699      	mov	r9, r3
 800a01e:	f1b8 0f01 	cmp.w	r8, #1
 800a022:	dc21      	bgt.n	800a068 <_strtod_l+0x528>
 800a024:	b10b      	cbz	r3, 800a02a <_strtod_l+0x4ea>
 800a026:	4682      	mov	sl, r0
 800a028:	468b      	mov	fp, r1
 800a02a:	4b2f      	ldr	r3, [pc, #188]	; (800a0e8 <_strtod_l+0x5a8>)
 800a02c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a030:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a034:	4652      	mov	r2, sl
 800a036:	465b      	mov	r3, fp
 800a038:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a03c:	f7f6 faf4 	bl	8000628 <__aeabi_dmul>
 800a040:	4b2a      	ldr	r3, [pc, #168]	; (800a0ec <_strtod_l+0x5ac>)
 800a042:	460a      	mov	r2, r1
 800a044:	400b      	ands	r3, r1
 800a046:	492a      	ldr	r1, [pc, #168]	; (800a0f0 <_strtod_l+0x5b0>)
 800a048:	428b      	cmp	r3, r1
 800a04a:	4682      	mov	sl, r0
 800a04c:	d8bc      	bhi.n	8009fc8 <_strtod_l+0x488>
 800a04e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a052:	428b      	cmp	r3, r1
 800a054:	bf86      	itte	hi
 800a056:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a0f4 <_strtod_l+0x5b4>
 800a05a:	f04f 3aff 	movhi.w	sl, #4294967295
 800a05e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a062:	2300      	movs	r3, #0
 800a064:	9304      	str	r3, [sp, #16]
 800a066:	e084      	b.n	800a172 <_strtod_l+0x632>
 800a068:	f018 0f01 	tst.w	r8, #1
 800a06c:	d005      	beq.n	800a07a <_strtod_l+0x53a>
 800a06e:	9b04      	ldr	r3, [sp, #16]
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	f7f6 fad8 	bl	8000628 <__aeabi_dmul>
 800a078:	2301      	movs	r3, #1
 800a07a:	9a04      	ldr	r2, [sp, #16]
 800a07c:	3208      	adds	r2, #8
 800a07e:	f109 0901 	add.w	r9, r9, #1
 800a082:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a086:	9204      	str	r2, [sp, #16]
 800a088:	e7c9      	b.n	800a01e <_strtod_l+0x4de>
 800a08a:	d0ea      	beq.n	800a062 <_strtod_l+0x522>
 800a08c:	f1c8 0800 	rsb	r8, r8, #0
 800a090:	f018 020f 	ands.w	r2, r8, #15
 800a094:	d00a      	beq.n	800a0ac <_strtod_l+0x56c>
 800a096:	4b13      	ldr	r3, [pc, #76]	; (800a0e4 <_strtod_l+0x5a4>)
 800a098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a09c:	4650      	mov	r0, sl
 800a09e:	4659      	mov	r1, fp
 800a0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a4:	f7f6 fbea 	bl	800087c <__aeabi_ddiv>
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	468b      	mov	fp, r1
 800a0ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a0b0:	d0d7      	beq.n	800a062 <_strtod_l+0x522>
 800a0b2:	f1b8 0f1f 	cmp.w	r8, #31
 800a0b6:	dd1f      	ble.n	800a0f8 <_strtod_l+0x5b8>
 800a0b8:	2500      	movs	r5, #0
 800a0ba:	462e      	mov	r6, r5
 800a0bc:	9507      	str	r5, [sp, #28]
 800a0be:	9505      	str	r5, [sp, #20]
 800a0c0:	2322      	movs	r3, #34	; 0x22
 800a0c2:	f04f 0a00 	mov.w	sl, #0
 800a0c6:	f04f 0b00 	mov.w	fp, #0
 800a0ca:	6023      	str	r3, [r4, #0]
 800a0cc:	e786      	b.n	8009fdc <_strtod_l+0x49c>
 800a0ce:	bf00      	nop
 800a0d0:	080102f1 	.word	0x080102f1
 800a0d4:	08010330 	.word	0x08010330
 800a0d8:	080102e9 	.word	0x080102e9
 800a0dc:	08010474 	.word	0x08010474
 800a0e0:	0801073b 	.word	0x0801073b
 800a0e4:	08010600 	.word	0x08010600
 800a0e8:	080105d8 	.word	0x080105d8
 800a0ec:	7ff00000 	.word	0x7ff00000
 800a0f0:	7ca00000 	.word	0x7ca00000
 800a0f4:	7fefffff 	.word	0x7fefffff
 800a0f8:	f018 0310 	ands.w	r3, r8, #16
 800a0fc:	bf18      	it	ne
 800a0fe:	236a      	movne	r3, #106	; 0x6a
 800a100:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a4b0 <_strtod_l+0x970>
 800a104:	9304      	str	r3, [sp, #16]
 800a106:	4650      	mov	r0, sl
 800a108:	4659      	mov	r1, fp
 800a10a:	2300      	movs	r3, #0
 800a10c:	f018 0f01 	tst.w	r8, #1
 800a110:	d004      	beq.n	800a11c <_strtod_l+0x5dc>
 800a112:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a116:	f7f6 fa87 	bl	8000628 <__aeabi_dmul>
 800a11a:	2301      	movs	r3, #1
 800a11c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a120:	f109 0908 	add.w	r9, r9, #8
 800a124:	d1f2      	bne.n	800a10c <_strtod_l+0x5cc>
 800a126:	b10b      	cbz	r3, 800a12c <_strtod_l+0x5ec>
 800a128:	4682      	mov	sl, r0
 800a12a:	468b      	mov	fp, r1
 800a12c:	9b04      	ldr	r3, [sp, #16]
 800a12e:	b1c3      	cbz	r3, 800a162 <_strtod_l+0x622>
 800a130:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a134:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a138:	2b00      	cmp	r3, #0
 800a13a:	4659      	mov	r1, fp
 800a13c:	dd11      	ble.n	800a162 <_strtod_l+0x622>
 800a13e:	2b1f      	cmp	r3, #31
 800a140:	f340 8124 	ble.w	800a38c <_strtod_l+0x84c>
 800a144:	2b34      	cmp	r3, #52	; 0x34
 800a146:	bfde      	ittt	le
 800a148:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a14c:	f04f 33ff 	movle.w	r3, #4294967295
 800a150:	fa03 f202 	lslle.w	r2, r3, r2
 800a154:	f04f 0a00 	mov.w	sl, #0
 800a158:	bfcc      	ite	gt
 800a15a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a15e:	ea02 0b01 	andle.w	fp, r2, r1
 800a162:	2200      	movs	r2, #0
 800a164:	2300      	movs	r3, #0
 800a166:	4650      	mov	r0, sl
 800a168:	4659      	mov	r1, fp
 800a16a:	f7f6 fcc5 	bl	8000af8 <__aeabi_dcmpeq>
 800a16e:	2800      	cmp	r0, #0
 800a170:	d1a2      	bne.n	800a0b8 <_strtod_l+0x578>
 800a172:	9b07      	ldr	r3, [sp, #28]
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	9908      	ldr	r1, [sp, #32]
 800a178:	462b      	mov	r3, r5
 800a17a:	463a      	mov	r2, r7
 800a17c:	4620      	mov	r0, r4
 800a17e:	f001 fe55 	bl	800be2c <__s2b>
 800a182:	9007      	str	r0, [sp, #28]
 800a184:	2800      	cmp	r0, #0
 800a186:	f43f af1f 	beq.w	8009fc8 <_strtod_l+0x488>
 800a18a:	9b05      	ldr	r3, [sp, #20]
 800a18c:	1b9e      	subs	r6, r3, r6
 800a18e:	9b06      	ldr	r3, [sp, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	bfb4      	ite	lt
 800a194:	4633      	movlt	r3, r6
 800a196:	2300      	movge	r3, #0
 800a198:	930c      	str	r3, [sp, #48]	; 0x30
 800a19a:	9b06      	ldr	r3, [sp, #24]
 800a19c:	2500      	movs	r5, #0
 800a19e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a1a2:	9312      	str	r3, [sp, #72]	; 0x48
 800a1a4:	462e      	mov	r6, r5
 800a1a6:	9b07      	ldr	r3, [sp, #28]
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	6859      	ldr	r1, [r3, #4]
 800a1ac:	f001 fd96 	bl	800bcdc <_Balloc>
 800a1b0:	9005      	str	r0, [sp, #20]
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	f43f af0c 	beq.w	8009fd0 <_strtod_l+0x490>
 800a1b8:	9b07      	ldr	r3, [sp, #28]
 800a1ba:	691a      	ldr	r2, [r3, #16]
 800a1bc:	3202      	adds	r2, #2
 800a1be:	f103 010c 	add.w	r1, r3, #12
 800a1c2:	0092      	lsls	r2, r2, #2
 800a1c4:	300c      	adds	r0, #12
 800a1c6:	f7fe fd75 	bl	8008cb4 <memcpy>
 800a1ca:	ec4b ab10 	vmov	d0, sl, fp
 800a1ce:	aa1a      	add	r2, sp, #104	; 0x68
 800a1d0:	a919      	add	r1, sp, #100	; 0x64
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f002 f970 	bl	800c4b8 <__d2b>
 800a1d8:	ec4b ab18 	vmov	d8, sl, fp
 800a1dc:	9018      	str	r0, [sp, #96]	; 0x60
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	f43f aef6 	beq.w	8009fd0 <_strtod_l+0x490>
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f001 feba 	bl	800bf60 <__i2b>
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	f43f aeee 	beq.w	8009fd0 <_strtod_l+0x490>
 800a1f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a1f6:	9904      	ldr	r1, [sp, #16]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	bfab      	itete	ge
 800a1fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a1fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a200:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a202:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a206:	bfac      	ite	ge
 800a208:	eb03 0902 	addge.w	r9, r3, r2
 800a20c:	1ad7      	sublt	r7, r2, r3
 800a20e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a210:	eba3 0801 	sub.w	r8, r3, r1
 800a214:	4490      	add	r8, r2
 800a216:	4ba1      	ldr	r3, [pc, #644]	; (800a49c <_strtod_l+0x95c>)
 800a218:	f108 38ff 	add.w	r8, r8, #4294967295
 800a21c:	4598      	cmp	r8, r3
 800a21e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a222:	f280 80c7 	bge.w	800a3b4 <_strtod_l+0x874>
 800a226:	eba3 0308 	sub.w	r3, r3, r8
 800a22a:	2b1f      	cmp	r3, #31
 800a22c:	eba2 0203 	sub.w	r2, r2, r3
 800a230:	f04f 0101 	mov.w	r1, #1
 800a234:	f300 80b1 	bgt.w	800a39a <_strtod_l+0x85a>
 800a238:	fa01 f303 	lsl.w	r3, r1, r3
 800a23c:	930d      	str	r3, [sp, #52]	; 0x34
 800a23e:	2300      	movs	r3, #0
 800a240:	9308      	str	r3, [sp, #32]
 800a242:	eb09 0802 	add.w	r8, r9, r2
 800a246:	9b04      	ldr	r3, [sp, #16]
 800a248:	45c1      	cmp	r9, r8
 800a24a:	4417      	add	r7, r2
 800a24c:	441f      	add	r7, r3
 800a24e:	464b      	mov	r3, r9
 800a250:	bfa8      	it	ge
 800a252:	4643      	movge	r3, r8
 800a254:	42bb      	cmp	r3, r7
 800a256:	bfa8      	it	ge
 800a258:	463b      	movge	r3, r7
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	bfc2      	ittt	gt
 800a25e:	eba8 0803 	subgt.w	r8, r8, r3
 800a262:	1aff      	subgt	r7, r7, r3
 800a264:	eba9 0903 	subgt.w	r9, r9, r3
 800a268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	dd17      	ble.n	800a29e <_strtod_l+0x75e>
 800a26e:	4631      	mov	r1, r6
 800a270:	461a      	mov	r2, r3
 800a272:	4620      	mov	r0, r4
 800a274:	f001 ff34 	bl	800c0e0 <__pow5mult>
 800a278:	4606      	mov	r6, r0
 800a27a:	2800      	cmp	r0, #0
 800a27c:	f43f aea8 	beq.w	8009fd0 <_strtod_l+0x490>
 800a280:	4601      	mov	r1, r0
 800a282:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a284:	4620      	mov	r0, r4
 800a286:	f001 fe81 	bl	800bf8c <__multiply>
 800a28a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a28c:	2800      	cmp	r0, #0
 800a28e:	f43f ae9f 	beq.w	8009fd0 <_strtod_l+0x490>
 800a292:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a294:	4620      	mov	r0, r4
 800a296:	f001 fd61 	bl	800bd5c <_Bfree>
 800a29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a29c:	9318      	str	r3, [sp, #96]	; 0x60
 800a29e:	f1b8 0f00 	cmp.w	r8, #0
 800a2a2:	f300 808c 	bgt.w	800a3be <_strtod_l+0x87e>
 800a2a6:	9b06      	ldr	r3, [sp, #24]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	dd08      	ble.n	800a2be <_strtod_l+0x77e>
 800a2ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2ae:	9905      	ldr	r1, [sp, #20]
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f001 ff15 	bl	800c0e0 <__pow5mult>
 800a2b6:	9005      	str	r0, [sp, #20]
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	f43f ae89 	beq.w	8009fd0 <_strtod_l+0x490>
 800a2be:	2f00      	cmp	r7, #0
 800a2c0:	dd08      	ble.n	800a2d4 <_strtod_l+0x794>
 800a2c2:	9905      	ldr	r1, [sp, #20]
 800a2c4:	463a      	mov	r2, r7
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f001 ff64 	bl	800c194 <__lshift>
 800a2cc:	9005      	str	r0, [sp, #20]
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	f43f ae7e 	beq.w	8009fd0 <_strtod_l+0x490>
 800a2d4:	f1b9 0f00 	cmp.w	r9, #0
 800a2d8:	dd08      	ble.n	800a2ec <_strtod_l+0x7ac>
 800a2da:	4631      	mov	r1, r6
 800a2dc:	464a      	mov	r2, r9
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f001 ff58 	bl	800c194 <__lshift>
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	f43f ae72 	beq.w	8009fd0 <_strtod_l+0x490>
 800a2ec:	9a05      	ldr	r2, [sp, #20]
 800a2ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f001 ffdb 	bl	800c2ac <__mdiff>
 800a2f6:	4605      	mov	r5, r0
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	f43f ae69 	beq.w	8009fd0 <_strtod_l+0x490>
 800a2fe:	68c3      	ldr	r3, [r0, #12]
 800a300:	930b      	str	r3, [sp, #44]	; 0x2c
 800a302:	2300      	movs	r3, #0
 800a304:	60c3      	str	r3, [r0, #12]
 800a306:	4631      	mov	r1, r6
 800a308:	f001 ffb4 	bl	800c274 <__mcmp>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	da60      	bge.n	800a3d2 <_strtod_l+0x892>
 800a310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a312:	ea53 030a 	orrs.w	r3, r3, sl
 800a316:	f040 8082 	bne.w	800a41e <_strtod_l+0x8de>
 800a31a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d17d      	bne.n	800a41e <_strtod_l+0x8de>
 800a322:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a326:	0d1b      	lsrs	r3, r3, #20
 800a328:	051b      	lsls	r3, r3, #20
 800a32a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a32e:	d976      	bls.n	800a41e <_strtod_l+0x8de>
 800a330:	696b      	ldr	r3, [r5, #20]
 800a332:	b913      	cbnz	r3, 800a33a <_strtod_l+0x7fa>
 800a334:	692b      	ldr	r3, [r5, #16]
 800a336:	2b01      	cmp	r3, #1
 800a338:	dd71      	ble.n	800a41e <_strtod_l+0x8de>
 800a33a:	4629      	mov	r1, r5
 800a33c:	2201      	movs	r2, #1
 800a33e:	4620      	mov	r0, r4
 800a340:	f001 ff28 	bl	800c194 <__lshift>
 800a344:	4631      	mov	r1, r6
 800a346:	4605      	mov	r5, r0
 800a348:	f001 ff94 	bl	800c274 <__mcmp>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	dd66      	ble.n	800a41e <_strtod_l+0x8de>
 800a350:	9904      	ldr	r1, [sp, #16]
 800a352:	4a53      	ldr	r2, [pc, #332]	; (800a4a0 <_strtod_l+0x960>)
 800a354:	465b      	mov	r3, fp
 800a356:	2900      	cmp	r1, #0
 800a358:	f000 8081 	beq.w	800a45e <_strtod_l+0x91e>
 800a35c:	ea02 010b 	and.w	r1, r2, fp
 800a360:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a364:	dc7b      	bgt.n	800a45e <_strtod_l+0x91e>
 800a366:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a36a:	f77f aea9 	ble.w	800a0c0 <_strtod_l+0x580>
 800a36e:	4b4d      	ldr	r3, [pc, #308]	; (800a4a4 <_strtod_l+0x964>)
 800a370:	4650      	mov	r0, sl
 800a372:	4659      	mov	r1, fp
 800a374:	2200      	movs	r2, #0
 800a376:	f7f6 f957 	bl	8000628 <__aeabi_dmul>
 800a37a:	460b      	mov	r3, r1
 800a37c:	4303      	orrs	r3, r0
 800a37e:	bf08      	it	eq
 800a380:	2322      	moveq	r3, #34	; 0x22
 800a382:	4682      	mov	sl, r0
 800a384:	468b      	mov	fp, r1
 800a386:	bf08      	it	eq
 800a388:	6023      	streq	r3, [r4, #0]
 800a38a:	e62b      	b.n	8009fe4 <_strtod_l+0x4a4>
 800a38c:	f04f 32ff 	mov.w	r2, #4294967295
 800a390:	fa02 f303 	lsl.w	r3, r2, r3
 800a394:	ea03 0a0a 	and.w	sl, r3, sl
 800a398:	e6e3      	b.n	800a162 <_strtod_l+0x622>
 800a39a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a39e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a3a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a3a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a3aa:	fa01 f308 	lsl.w	r3, r1, r8
 800a3ae:	9308      	str	r3, [sp, #32]
 800a3b0:	910d      	str	r1, [sp, #52]	; 0x34
 800a3b2:	e746      	b.n	800a242 <_strtod_l+0x702>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	9308      	str	r3, [sp, #32]
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	930d      	str	r3, [sp, #52]	; 0x34
 800a3bc:	e741      	b.n	800a242 <_strtod_l+0x702>
 800a3be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a3c0:	4642      	mov	r2, r8
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f001 fee6 	bl	800c194 <__lshift>
 800a3c8:	9018      	str	r0, [sp, #96]	; 0x60
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	f47f af6b 	bne.w	800a2a6 <_strtod_l+0x766>
 800a3d0:	e5fe      	b.n	8009fd0 <_strtod_l+0x490>
 800a3d2:	465f      	mov	r7, fp
 800a3d4:	d16e      	bne.n	800a4b4 <_strtod_l+0x974>
 800a3d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3dc:	b342      	cbz	r2, 800a430 <_strtod_l+0x8f0>
 800a3de:	4a32      	ldr	r2, [pc, #200]	; (800a4a8 <_strtod_l+0x968>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d128      	bne.n	800a436 <_strtod_l+0x8f6>
 800a3e4:	9b04      	ldr	r3, [sp, #16]
 800a3e6:	4651      	mov	r1, sl
 800a3e8:	b1eb      	cbz	r3, 800a426 <_strtod_l+0x8e6>
 800a3ea:	4b2d      	ldr	r3, [pc, #180]	; (800a4a0 <_strtod_l+0x960>)
 800a3ec:	403b      	ands	r3, r7
 800a3ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f6:	d819      	bhi.n	800a42c <_strtod_l+0x8ec>
 800a3f8:	0d1b      	lsrs	r3, r3, #20
 800a3fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a402:	4299      	cmp	r1, r3
 800a404:	d117      	bne.n	800a436 <_strtod_l+0x8f6>
 800a406:	4b29      	ldr	r3, [pc, #164]	; (800a4ac <_strtod_l+0x96c>)
 800a408:	429f      	cmp	r7, r3
 800a40a:	d102      	bne.n	800a412 <_strtod_l+0x8d2>
 800a40c:	3101      	adds	r1, #1
 800a40e:	f43f addf 	beq.w	8009fd0 <_strtod_l+0x490>
 800a412:	4b23      	ldr	r3, [pc, #140]	; (800a4a0 <_strtod_l+0x960>)
 800a414:	403b      	ands	r3, r7
 800a416:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a41a:	f04f 0a00 	mov.w	sl, #0
 800a41e:	9b04      	ldr	r3, [sp, #16]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1a4      	bne.n	800a36e <_strtod_l+0x82e>
 800a424:	e5de      	b.n	8009fe4 <_strtod_l+0x4a4>
 800a426:	f04f 33ff 	mov.w	r3, #4294967295
 800a42a:	e7ea      	b.n	800a402 <_strtod_l+0x8c2>
 800a42c:	4613      	mov	r3, r2
 800a42e:	e7e8      	b.n	800a402 <_strtod_l+0x8c2>
 800a430:	ea53 030a 	orrs.w	r3, r3, sl
 800a434:	d08c      	beq.n	800a350 <_strtod_l+0x810>
 800a436:	9b08      	ldr	r3, [sp, #32]
 800a438:	b1db      	cbz	r3, 800a472 <_strtod_l+0x932>
 800a43a:	423b      	tst	r3, r7
 800a43c:	d0ef      	beq.n	800a41e <_strtod_l+0x8de>
 800a43e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a440:	9a04      	ldr	r2, [sp, #16]
 800a442:	4650      	mov	r0, sl
 800a444:	4659      	mov	r1, fp
 800a446:	b1c3      	cbz	r3, 800a47a <_strtod_l+0x93a>
 800a448:	f7ff fb5b 	bl	8009b02 <sulp>
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	ec51 0b18 	vmov	r0, r1, d8
 800a454:	f7f5 ff32 	bl	80002bc <__adddf3>
 800a458:	4682      	mov	sl, r0
 800a45a:	468b      	mov	fp, r1
 800a45c:	e7df      	b.n	800a41e <_strtod_l+0x8de>
 800a45e:	4013      	ands	r3, r2
 800a460:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a464:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a468:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a46c:	f04f 3aff 	mov.w	sl, #4294967295
 800a470:	e7d5      	b.n	800a41e <_strtod_l+0x8de>
 800a472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a474:	ea13 0f0a 	tst.w	r3, sl
 800a478:	e7e0      	b.n	800a43c <_strtod_l+0x8fc>
 800a47a:	f7ff fb42 	bl	8009b02 <sulp>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	ec51 0b18 	vmov	r0, r1, d8
 800a486:	f7f5 ff17 	bl	80002b8 <__aeabi_dsub>
 800a48a:	2200      	movs	r2, #0
 800a48c:	2300      	movs	r3, #0
 800a48e:	4682      	mov	sl, r0
 800a490:	468b      	mov	fp, r1
 800a492:	f7f6 fb31 	bl	8000af8 <__aeabi_dcmpeq>
 800a496:	2800      	cmp	r0, #0
 800a498:	d0c1      	beq.n	800a41e <_strtod_l+0x8de>
 800a49a:	e611      	b.n	800a0c0 <_strtod_l+0x580>
 800a49c:	fffffc02 	.word	0xfffffc02
 800a4a0:	7ff00000 	.word	0x7ff00000
 800a4a4:	39500000 	.word	0x39500000
 800a4a8:	000fffff 	.word	0x000fffff
 800a4ac:	7fefffff 	.word	0x7fefffff
 800a4b0:	08010348 	.word	0x08010348
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	f002 f85a 	bl	800c570 <__ratio>
 800a4bc:	ec59 8b10 	vmov	r8, r9, d0
 800a4c0:	ee10 0a10 	vmov	r0, s0
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4ca:	4649      	mov	r1, r9
 800a4cc:	f7f6 fb28 	bl	8000b20 <__aeabi_dcmple>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d07a      	beq.n	800a5ca <_strtod_l+0xa8a>
 800a4d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d04a      	beq.n	800a570 <_strtod_l+0xa30>
 800a4da:	4b95      	ldr	r3, [pc, #596]	; (800a730 <_strtod_l+0xbf0>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a4e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a730 <_strtod_l+0xbf0>
 800a4e6:	f04f 0800 	mov.w	r8, #0
 800a4ea:	4b92      	ldr	r3, [pc, #584]	; (800a734 <_strtod_l+0xbf4>)
 800a4ec:	403b      	ands	r3, r7
 800a4ee:	930d      	str	r3, [sp, #52]	; 0x34
 800a4f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4f2:	4b91      	ldr	r3, [pc, #580]	; (800a738 <_strtod_l+0xbf8>)
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	f040 80b0 	bne.w	800a65a <_strtod_l+0xb1a>
 800a4fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a502:	ec4b ab10 	vmov	d0, sl, fp
 800a506:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a50a:	f001 ff59 	bl	800c3c0 <__ulp>
 800a50e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a512:	ec53 2b10 	vmov	r2, r3, d0
 800a516:	f7f6 f887 	bl	8000628 <__aeabi_dmul>
 800a51a:	4652      	mov	r2, sl
 800a51c:	465b      	mov	r3, fp
 800a51e:	f7f5 fecd 	bl	80002bc <__adddf3>
 800a522:	460b      	mov	r3, r1
 800a524:	4983      	ldr	r1, [pc, #524]	; (800a734 <_strtod_l+0xbf4>)
 800a526:	4a85      	ldr	r2, [pc, #532]	; (800a73c <_strtod_l+0xbfc>)
 800a528:	4019      	ands	r1, r3
 800a52a:	4291      	cmp	r1, r2
 800a52c:	4682      	mov	sl, r0
 800a52e:	d960      	bls.n	800a5f2 <_strtod_l+0xab2>
 800a530:	ee18 3a90 	vmov	r3, s17
 800a534:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a538:	4293      	cmp	r3, r2
 800a53a:	d104      	bne.n	800a546 <_strtod_l+0xa06>
 800a53c:	ee18 3a10 	vmov	r3, s16
 800a540:	3301      	adds	r3, #1
 800a542:	f43f ad45 	beq.w	8009fd0 <_strtod_l+0x490>
 800a546:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a748 <_strtod_l+0xc08>
 800a54a:	f04f 3aff 	mov.w	sl, #4294967295
 800a54e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a550:	4620      	mov	r0, r4
 800a552:	f001 fc03 	bl	800bd5c <_Bfree>
 800a556:	9905      	ldr	r1, [sp, #20]
 800a558:	4620      	mov	r0, r4
 800a55a:	f001 fbff 	bl	800bd5c <_Bfree>
 800a55e:	4631      	mov	r1, r6
 800a560:	4620      	mov	r0, r4
 800a562:	f001 fbfb 	bl	800bd5c <_Bfree>
 800a566:	4629      	mov	r1, r5
 800a568:	4620      	mov	r0, r4
 800a56a:	f001 fbf7 	bl	800bd5c <_Bfree>
 800a56e:	e61a      	b.n	800a1a6 <_strtod_l+0x666>
 800a570:	f1ba 0f00 	cmp.w	sl, #0
 800a574:	d11b      	bne.n	800a5ae <_strtod_l+0xa6e>
 800a576:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a57a:	b9f3      	cbnz	r3, 800a5ba <_strtod_l+0xa7a>
 800a57c:	4b6c      	ldr	r3, [pc, #432]	; (800a730 <_strtod_l+0xbf0>)
 800a57e:	2200      	movs	r2, #0
 800a580:	4640      	mov	r0, r8
 800a582:	4649      	mov	r1, r9
 800a584:	f7f6 fac2 	bl	8000b0c <__aeabi_dcmplt>
 800a588:	b9d0      	cbnz	r0, 800a5c0 <_strtod_l+0xa80>
 800a58a:	4640      	mov	r0, r8
 800a58c:	4649      	mov	r1, r9
 800a58e:	4b6c      	ldr	r3, [pc, #432]	; (800a740 <_strtod_l+0xc00>)
 800a590:	2200      	movs	r2, #0
 800a592:	f7f6 f849 	bl	8000628 <__aeabi_dmul>
 800a596:	4680      	mov	r8, r0
 800a598:	4689      	mov	r9, r1
 800a59a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a59e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a5a2:	9315      	str	r3, [sp, #84]	; 0x54
 800a5a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a5a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a5ac:	e79d      	b.n	800a4ea <_strtod_l+0x9aa>
 800a5ae:	f1ba 0f01 	cmp.w	sl, #1
 800a5b2:	d102      	bne.n	800a5ba <_strtod_l+0xa7a>
 800a5b4:	2f00      	cmp	r7, #0
 800a5b6:	f43f ad83 	beq.w	800a0c0 <_strtod_l+0x580>
 800a5ba:	4b62      	ldr	r3, [pc, #392]	; (800a744 <_strtod_l+0xc04>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	e78e      	b.n	800a4de <_strtod_l+0x99e>
 800a5c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a740 <_strtod_l+0xc00>
 800a5c4:	f04f 0800 	mov.w	r8, #0
 800a5c8:	e7e7      	b.n	800a59a <_strtod_l+0xa5a>
 800a5ca:	4b5d      	ldr	r3, [pc, #372]	; (800a740 <_strtod_l+0xc00>)
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	4649      	mov	r1, r9
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f7f6 f829 	bl	8000628 <__aeabi_dmul>
 800a5d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5d8:	4680      	mov	r8, r0
 800a5da:	4689      	mov	r9, r1
 800a5dc:	b933      	cbnz	r3, 800a5ec <_strtod_l+0xaac>
 800a5de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5e2:	900e      	str	r0, [sp, #56]	; 0x38
 800a5e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a5ea:	e7dd      	b.n	800a5a8 <_strtod_l+0xa68>
 800a5ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a5f0:	e7f9      	b.n	800a5e6 <_strtod_l+0xaa6>
 800a5f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a5f6:	9b04      	ldr	r3, [sp, #16]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1a8      	bne.n	800a54e <_strtod_l+0xa0e>
 800a5fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a600:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a602:	0d1b      	lsrs	r3, r3, #20
 800a604:	051b      	lsls	r3, r3, #20
 800a606:	429a      	cmp	r2, r3
 800a608:	d1a1      	bne.n	800a54e <_strtod_l+0xa0e>
 800a60a:	4640      	mov	r0, r8
 800a60c:	4649      	mov	r1, r9
 800a60e:	f7f6 fcb1 	bl	8000f74 <__aeabi_d2lz>
 800a612:	f7f5 ffdb 	bl	80005cc <__aeabi_l2d>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	4640      	mov	r0, r8
 800a61c:	4649      	mov	r1, r9
 800a61e:	f7f5 fe4b 	bl	80002b8 <__aeabi_dsub>
 800a622:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a624:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a628:	ea43 030a 	orr.w	r3, r3, sl
 800a62c:	4313      	orrs	r3, r2
 800a62e:	4680      	mov	r8, r0
 800a630:	4689      	mov	r9, r1
 800a632:	d055      	beq.n	800a6e0 <_strtod_l+0xba0>
 800a634:	a336      	add	r3, pc, #216	; (adr r3, 800a710 <_strtod_l+0xbd0>)
 800a636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63a:	f7f6 fa67 	bl	8000b0c <__aeabi_dcmplt>
 800a63e:	2800      	cmp	r0, #0
 800a640:	f47f acd0 	bne.w	8009fe4 <_strtod_l+0x4a4>
 800a644:	a334      	add	r3, pc, #208	; (adr r3, 800a718 <_strtod_l+0xbd8>)
 800a646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64a:	4640      	mov	r0, r8
 800a64c:	4649      	mov	r1, r9
 800a64e:	f7f6 fa7b 	bl	8000b48 <__aeabi_dcmpgt>
 800a652:	2800      	cmp	r0, #0
 800a654:	f43f af7b 	beq.w	800a54e <_strtod_l+0xa0e>
 800a658:	e4c4      	b.n	8009fe4 <_strtod_l+0x4a4>
 800a65a:	9b04      	ldr	r3, [sp, #16]
 800a65c:	b333      	cbz	r3, 800a6ac <_strtod_l+0xb6c>
 800a65e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a660:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a664:	d822      	bhi.n	800a6ac <_strtod_l+0xb6c>
 800a666:	a32e      	add	r3, pc, #184	; (adr r3, 800a720 <_strtod_l+0xbe0>)
 800a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66c:	4640      	mov	r0, r8
 800a66e:	4649      	mov	r1, r9
 800a670:	f7f6 fa56 	bl	8000b20 <__aeabi_dcmple>
 800a674:	b1a0      	cbz	r0, 800a6a0 <_strtod_l+0xb60>
 800a676:	4649      	mov	r1, r9
 800a678:	4640      	mov	r0, r8
 800a67a:	f7f6 faad 	bl	8000bd8 <__aeabi_d2uiz>
 800a67e:	2801      	cmp	r0, #1
 800a680:	bf38      	it	cc
 800a682:	2001      	movcc	r0, #1
 800a684:	f7f5 ff56 	bl	8000534 <__aeabi_ui2d>
 800a688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a68a:	4680      	mov	r8, r0
 800a68c:	4689      	mov	r9, r1
 800a68e:	bb23      	cbnz	r3, 800a6da <_strtod_l+0xb9a>
 800a690:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a694:	9010      	str	r0, [sp, #64]	; 0x40
 800a696:	9311      	str	r3, [sp, #68]	; 0x44
 800a698:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a69c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a6a8:	1a9b      	subs	r3, r3, r2
 800a6aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a6b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a6b4:	eef0 0a68 	vmov.f32	s1, s17
 800a6b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a6bc:	f001 fe80 	bl	800c3c0 <__ulp>
 800a6c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a6c4:	ec53 2b10 	vmov	r2, r3, d0
 800a6c8:	f7f5 ffae 	bl	8000628 <__aeabi_dmul>
 800a6cc:	ec53 2b18 	vmov	r2, r3, d8
 800a6d0:	f7f5 fdf4 	bl	80002bc <__adddf3>
 800a6d4:	4682      	mov	sl, r0
 800a6d6:	468b      	mov	fp, r1
 800a6d8:	e78d      	b.n	800a5f6 <_strtod_l+0xab6>
 800a6da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a6de:	e7db      	b.n	800a698 <_strtod_l+0xb58>
 800a6e0:	a311      	add	r3, pc, #68	; (adr r3, 800a728 <_strtod_l+0xbe8>)
 800a6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e6:	f7f6 fa11 	bl	8000b0c <__aeabi_dcmplt>
 800a6ea:	e7b2      	b.n	800a652 <_strtod_l+0xb12>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a6f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6f4:	6013      	str	r3, [r2, #0]
 800a6f6:	f7ff ba6b 	b.w	8009bd0 <_strtod_l+0x90>
 800a6fa:	2a65      	cmp	r2, #101	; 0x65
 800a6fc:	f43f ab5f 	beq.w	8009dbe <_strtod_l+0x27e>
 800a700:	2a45      	cmp	r2, #69	; 0x45
 800a702:	f43f ab5c 	beq.w	8009dbe <_strtod_l+0x27e>
 800a706:	2301      	movs	r3, #1
 800a708:	f7ff bb94 	b.w	8009e34 <_strtod_l+0x2f4>
 800a70c:	f3af 8000 	nop.w
 800a710:	94a03595 	.word	0x94a03595
 800a714:	3fdfffff 	.word	0x3fdfffff
 800a718:	35afe535 	.word	0x35afe535
 800a71c:	3fe00000 	.word	0x3fe00000
 800a720:	ffc00000 	.word	0xffc00000
 800a724:	41dfffff 	.word	0x41dfffff
 800a728:	94a03595 	.word	0x94a03595
 800a72c:	3fcfffff 	.word	0x3fcfffff
 800a730:	3ff00000 	.word	0x3ff00000
 800a734:	7ff00000 	.word	0x7ff00000
 800a738:	7fe00000 	.word	0x7fe00000
 800a73c:	7c9fffff 	.word	0x7c9fffff
 800a740:	3fe00000 	.word	0x3fe00000
 800a744:	bff00000 	.word	0xbff00000
 800a748:	7fefffff 	.word	0x7fefffff

0800a74c <_strtod_r>:
 800a74c:	4b01      	ldr	r3, [pc, #4]	; (800a754 <_strtod_r+0x8>)
 800a74e:	f7ff b9f7 	b.w	8009b40 <_strtod_l>
 800a752:	bf00      	nop
 800a754:	20000088 	.word	0x20000088

0800a758 <_strtol_l.constprop.0>:
 800a758:	2b01      	cmp	r3, #1
 800a75a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a75e:	d001      	beq.n	800a764 <_strtol_l.constprop.0+0xc>
 800a760:	2b24      	cmp	r3, #36	; 0x24
 800a762:	d906      	bls.n	800a772 <_strtol_l.constprop.0+0x1a>
 800a764:	f7fe fa7c 	bl	8008c60 <__errno>
 800a768:	2316      	movs	r3, #22
 800a76a:	6003      	str	r3, [r0, #0]
 800a76c:	2000      	movs	r0, #0
 800a76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a772:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a858 <_strtol_l.constprop.0+0x100>
 800a776:	460d      	mov	r5, r1
 800a778:	462e      	mov	r6, r5
 800a77a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a77e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a782:	f017 0708 	ands.w	r7, r7, #8
 800a786:	d1f7      	bne.n	800a778 <_strtol_l.constprop.0+0x20>
 800a788:	2c2d      	cmp	r4, #45	; 0x2d
 800a78a:	d132      	bne.n	800a7f2 <_strtol_l.constprop.0+0x9a>
 800a78c:	782c      	ldrb	r4, [r5, #0]
 800a78e:	2701      	movs	r7, #1
 800a790:	1cb5      	adds	r5, r6, #2
 800a792:	2b00      	cmp	r3, #0
 800a794:	d05b      	beq.n	800a84e <_strtol_l.constprop.0+0xf6>
 800a796:	2b10      	cmp	r3, #16
 800a798:	d109      	bne.n	800a7ae <_strtol_l.constprop.0+0x56>
 800a79a:	2c30      	cmp	r4, #48	; 0x30
 800a79c:	d107      	bne.n	800a7ae <_strtol_l.constprop.0+0x56>
 800a79e:	782c      	ldrb	r4, [r5, #0]
 800a7a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a7a4:	2c58      	cmp	r4, #88	; 0x58
 800a7a6:	d14d      	bne.n	800a844 <_strtol_l.constprop.0+0xec>
 800a7a8:	786c      	ldrb	r4, [r5, #1]
 800a7aa:	2310      	movs	r3, #16
 800a7ac:	3502      	adds	r5, #2
 800a7ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a7b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7b6:	f04f 0c00 	mov.w	ip, #0
 800a7ba:	fbb8 f9f3 	udiv	r9, r8, r3
 800a7be:	4666      	mov	r6, ip
 800a7c0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a7c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a7c8:	f1be 0f09 	cmp.w	lr, #9
 800a7cc:	d816      	bhi.n	800a7fc <_strtol_l.constprop.0+0xa4>
 800a7ce:	4674      	mov	r4, lr
 800a7d0:	42a3      	cmp	r3, r4
 800a7d2:	dd24      	ble.n	800a81e <_strtol_l.constprop.0+0xc6>
 800a7d4:	f1bc 0f00 	cmp.w	ip, #0
 800a7d8:	db1e      	blt.n	800a818 <_strtol_l.constprop.0+0xc0>
 800a7da:	45b1      	cmp	r9, r6
 800a7dc:	d31c      	bcc.n	800a818 <_strtol_l.constprop.0+0xc0>
 800a7de:	d101      	bne.n	800a7e4 <_strtol_l.constprop.0+0x8c>
 800a7e0:	45a2      	cmp	sl, r4
 800a7e2:	db19      	blt.n	800a818 <_strtol_l.constprop.0+0xc0>
 800a7e4:	fb06 4603 	mla	r6, r6, r3, r4
 800a7e8:	f04f 0c01 	mov.w	ip, #1
 800a7ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7f0:	e7e8      	b.n	800a7c4 <_strtol_l.constprop.0+0x6c>
 800a7f2:	2c2b      	cmp	r4, #43	; 0x2b
 800a7f4:	bf04      	itt	eq
 800a7f6:	782c      	ldrbeq	r4, [r5, #0]
 800a7f8:	1cb5      	addeq	r5, r6, #2
 800a7fa:	e7ca      	b.n	800a792 <_strtol_l.constprop.0+0x3a>
 800a7fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a800:	f1be 0f19 	cmp.w	lr, #25
 800a804:	d801      	bhi.n	800a80a <_strtol_l.constprop.0+0xb2>
 800a806:	3c37      	subs	r4, #55	; 0x37
 800a808:	e7e2      	b.n	800a7d0 <_strtol_l.constprop.0+0x78>
 800a80a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a80e:	f1be 0f19 	cmp.w	lr, #25
 800a812:	d804      	bhi.n	800a81e <_strtol_l.constprop.0+0xc6>
 800a814:	3c57      	subs	r4, #87	; 0x57
 800a816:	e7db      	b.n	800a7d0 <_strtol_l.constprop.0+0x78>
 800a818:	f04f 3cff 	mov.w	ip, #4294967295
 800a81c:	e7e6      	b.n	800a7ec <_strtol_l.constprop.0+0x94>
 800a81e:	f1bc 0f00 	cmp.w	ip, #0
 800a822:	da05      	bge.n	800a830 <_strtol_l.constprop.0+0xd8>
 800a824:	2322      	movs	r3, #34	; 0x22
 800a826:	6003      	str	r3, [r0, #0]
 800a828:	4646      	mov	r6, r8
 800a82a:	b942      	cbnz	r2, 800a83e <_strtol_l.constprop.0+0xe6>
 800a82c:	4630      	mov	r0, r6
 800a82e:	e79e      	b.n	800a76e <_strtol_l.constprop.0+0x16>
 800a830:	b107      	cbz	r7, 800a834 <_strtol_l.constprop.0+0xdc>
 800a832:	4276      	negs	r6, r6
 800a834:	2a00      	cmp	r2, #0
 800a836:	d0f9      	beq.n	800a82c <_strtol_l.constprop.0+0xd4>
 800a838:	f1bc 0f00 	cmp.w	ip, #0
 800a83c:	d000      	beq.n	800a840 <_strtol_l.constprop.0+0xe8>
 800a83e:	1e69      	subs	r1, r5, #1
 800a840:	6011      	str	r1, [r2, #0]
 800a842:	e7f3      	b.n	800a82c <_strtol_l.constprop.0+0xd4>
 800a844:	2430      	movs	r4, #48	; 0x30
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1b1      	bne.n	800a7ae <_strtol_l.constprop.0+0x56>
 800a84a:	2308      	movs	r3, #8
 800a84c:	e7af      	b.n	800a7ae <_strtol_l.constprop.0+0x56>
 800a84e:	2c30      	cmp	r4, #48	; 0x30
 800a850:	d0a5      	beq.n	800a79e <_strtol_l.constprop.0+0x46>
 800a852:	230a      	movs	r3, #10
 800a854:	e7ab      	b.n	800a7ae <_strtol_l.constprop.0+0x56>
 800a856:	bf00      	nop
 800a858:	08010371 	.word	0x08010371

0800a85c <_strtol_r>:
 800a85c:	f7ff bf7c 	b.w	800a758 <_strtol_l.constprop.0>

0800a860 <_write_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4d07      	ldr	r5, [pc, #28]	; (800a880 <_write_r+0x20>)
 800a864:	4604      	mov	r4, r0
 800a866:	4608      	mov	r0, r1
 800a868:	4611      	mov	r1, r2
 800a86a:	2200      	movs	r2, #0
 800a86c:	602a      	str	r2, [r5, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	f7f8 fb2f 	bl	8002ed2 <_write>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	d102      	bne.n	800a87e <_write_r+0x1e>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	b103      	cbz	r3, 800a87e <_write_r+0x1e>
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	bd38      	pop	{r3, r4, r5, pc}
 800a880:	20013ad8 	.word	0x20013ad8

0800a884 <_close_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	4d06      	ldr	r5, [pc, #24]	; (800a8a0 <_close_r+0x1c>)
 800a888:	2300      	movs	r3, #0
 800a88a:	4604      	mov	r4, r0
 800a88c:	4608      	mov	r0, r1
 800a88e:	602b      	str	r3, [r5, #0]
 800a890:	f7f8 fb3b 	bl	8002f0a <_close>
 800a894:	1c43      	adds	r3, r0, #1
 800a896:	d102      	bne.n	800a89e <_close_r+0x1a>
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	b103      	cbz	r3, 800a89e <_close_r+0x1a>
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	bd38      	pop	{r3, r4, r5, pc}
 800a8a0:	20013ad8 	.word	0x20013ad8

0800a8a4 <quorem>:
 800a8a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	6903      	ldr	r3, [r0, #16]
 800a8aa:	690c      	ldr	r4, [r1, #16]
 800a8ac:	42a3      	cmp	r3, r4
 800a8ae:	4607      	mov	r7, r0
 800a8b0:	f2c0 8081 	blt.w	800a9b6 <quorem+0x112>
 800a8b4:	3c01      	subs	r4, #1
 800a8b6:	f101 0814 	add.w	r8, r1, #20
 800a8ba:	f100 0514 	add.w	r5, r0, #20
 800a8be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a8d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8dc:	d331      	bcc.n	800a942 <quorem+0x9e>
 800a8de:	f04f 0e00 	mov.w	lr, #0
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	46ac      	mov	ip, r5
 800a8e6:	46f2      	mov	sl, lr
 800a8e8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a8ec:	b293      	uxth	r3, r2
 800a8ee:	fb06 e303 	mla	r3, r6, r3, lr
 800a8f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	ebaa 0303 	sub.w	r3, sl, r3
 800a8fc:	f8dc a000 	ldr.w	sl, [ip]
 800a900:	0c12      	lsrs	r2, r2, #16
 800a902:	fa13 f38a 	uxtah	r3, r3, sl
 800a906:	fb06 e202 	mla	r2, r6, r2, lr
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	9b00      	ldr	r3, [sp, #0]
 800a90e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a912:	b292      	uxth	r2, r2
 800a914:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a918:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a91c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a920:	4581      	cmp	r9, r0
 800a922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a926:	f84c 3b04 	str.w	r3, [ip], #4
 800a92a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a92e:	d2db      	bcs.n	800a8e8 <quorem+0x44>
 800a930:	f855 300b 	ldr.w	r3, [r5, fp]
 800a934:	b92b      	cbnz	r3, 800a942 <quorem+0x9e>
 800a936:	9b01      	ldr	r3, [sp, #4]
 800a938:	3b04      	subs	r3, #4
 800a93a:	429d      	cmp	r5, r3
 800a93c:	461a      	mov	r2, r3
 800a93e:	d32e      	bcc.n	800a99e <quorem+0xfa>
 800a940:	613c      	str	r4, [r7, #16]
 800a942:	4638      	mov	r0, r7
 800a944:	f001 fc96 	bl	800c274 <__mcmp>
 800a948:	2800      	cmp	r0, #0
 800a94a:	db24      	blt.n	800a996 <quorem+0xf2>
 800a94c:	3601      	adds	r6, #1
 800a94e:	4628      	mov	r0, r5
 800a950:	f04f 0c00 	mov.w	ip, #0
 800a954:	f858 2b04 	ldr.w	r2, [r8], #4
 800a958:	f8d0 e000 	ldr.w	lr, [r0]
 800a95c:	b293      	uxth	r3, r2
 800a95e:	ebac 0303 	sub.w	r3, ip, r3
 800a962:	0c12      	lsrs	r2, r2, #16
 800a964:	fa13 f38e 	uxtah	r3, r3, lr
 800a968:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a96c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a970:	b29b      	uxth	r3, r3
 800a972:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a976:	45c1      	cmp	r9, r8
 800a978:	f840 3b04 	str.w	r3, [r0], #4
 800a97c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a980:	d2e8      	bcs.n	800a954 <quorem+0xb0>
 800a982:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a986:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a98a:	b922      	cbnz	r2, 800a996 <quorem+0xf2>
 800a98c:	3b04      	subs	r3, #4
 800a98e:	429d      	cmp	r5, r3
 800a990:	461a      	mov	r2, r3
 800a992:	d30a      	bcc.n	800a9aa <quorem+0x106>
 800a994:	613c      	str	r4, [r7, #16]
 800a996:	4630      	mov	r0, r6
 800a998:	b003      	add	sp, #12
 800a99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99e:	6812      	ldr	r2, [r2, #0]
 800a9a0:	3b04      	subs	r3, #4
 800a9a2:	2a00      	cmp	r2, #0
 800a9a4:	d1cc      	bne.n	800a940 <quorem+0x9c>
 800a9a6:	3c01      	subs	r4, #1
 800a9a8:	e7c7      	b.n	800a93a <quorem+0x96>
 800a9aa:	6812      	ldr	r2, [r2, #0]
 800a9ac:	3b04      	subs	r3, #4
 800a9ae:	2a00      	cmp	r2, #0
 800a9b0:	d1f0      	bne.n	800a994 <quorem+0xf0>
 800a9b2:	3c01      	subs	r4, #1
 800a9b4:	e7eb      	b.n	800a98e <quorem+0xea>
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	e7ee      	b.n	800a998 <quorem+0xf4>
 800a9ba:	0000      	movs	r0, r0
 800a9bc:	0000      	movs	r0, r0
	...

0800a9c0 <_dtoa_r>:
 800a9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c4:	ed2d 8b04 	vpush	{d8-d9}
 800a9c8:	ec57 6b10 	vmov	r6, r7, d0
 800a9cc:	b093      	sub	sp, #76	; 0x4c
 800a9ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a9d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a9d4:	9106      	str	r1, [sp, #24]
 800a9d6:	ee10 aa10 	vmov	sl, s0
 800a9da:	4604      	mov	r4, r0
 800a9dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a9de:	930c      	str	r3, [sp, #48]	; 0x30
 800a9e0:	46bb      	mov	fp, r7
 800a9e2:	b975      	cbnz	r5, 800aa02 <_dtoa_r+0x42>
 800a9e4:	2010      	movs	r0, #16
 800a9e6:	f001 f95f 	bl	800bca8 <malloc>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	6260      	str	r0, [r4, #36]	; 0x24
 800a9ee:	b920      	cbnz	r0, 800a9fa <_dtoa_r+0x3a>
 800a9f0:	4ba7      	ldr	r3, [pc, #668]	; (800ac90 <_dtoa_r+0x2d0>)
 800a9f2:	21ea      	movs	r1, #234	; 0xea
 800a9f4:	48a7      	ldr	r0, [pc, #668]	; (800ac94 <_dtoa_r+0x2d4>)
 800a9f6:	f002 fcdb 	bl	800d3b0 <__assert_func>
 800a9fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a9fe:	6005      	str	r5, [r0, #0]
 800aa00:	60c5      	str	r5, [r0, #12]
 800aa02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa04:	6819      	ldr	r1, [r3, #0]
 800aa06:	b151      	cbz	r1, 800aa1e <_dtoa_r+0x5e>
 800aa08:	685a      	ldr	r2, [r3, #4]
 800aa0a:	604a      	str	r2, [r1, #4]
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	4093      	lsls	r3, r2
 800aa10:	608b      	str	r3, [r1, #8]
 800aa12:	4620      	mov	r0, r4
 800aa14:	f001 f9a2 	bl	800bd5c <_Bfree>
 800aa18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	1e3b      	subs	r3, r7, #0
 800aa20:	bfaa      	itet	ge
 800aa22:	2300      	movge	r3, #0
 800aa24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aa28:	f8c8 3000 	strge.w	r3, [r8]
 800aa2c:	4b9a      	ldr	r3, [pc, #616]	; (800ac98 <_dtoa_r+0x2d8>)
 800aa2e:	bfbc      	itt	lt
 800aa30:	2201      	movlt	r2, #1
 800aa32:	f8c8 2000 	strlt.w	r2, [r8]
 800aa36:	ea33 030b 	bics.w	r3, r3, fp
 800aa3a:	d11b      	bne.n	800aa74 <_dtoa_r+0xb4>
 800aa3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa3e:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa42:	6013      	str	r3, [r2, #0]
 800aa44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa48:	4333      	orrs	r3, r6
 800aa4a:	f000 8592 	beq.w	800b572 <_dtoa_r+0xbb2>
 800aa4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa50:	b963      	cbnz	r3, 800aa6c <_dtoa_r+0xac>
 800aa52:	4b92      	ldr	r3, [pc, #584]	; (800ac9c <_dtoa_r+0x2dc>)
 800aa54:	e022      	b.n	800aa9c <_dtoa_r+0xdc>
 800aa56:	4b92      	ldr	r3, [pc, #584]	; (800aca0 <_dtoa_r+0x2e0>)
 800aa58:	9301      	str	r3, [sp, #4]
 800aa5a:	3308      	adds	r3, #8
 800aa5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa5e:	6013      	str	r3, [r2, #0]
 800aa60:	9801      	ldr	r0, [sp, #4]
 800aa62:	b013      	add	sp, #76	; 0x4c
 800aa64:	ecbd 8b04 	vpop	{d8-d9}
 800aa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6c:	4b8b      	ldr	r3, [pc, #556]	; (800ac9c <_dtoa_r+0x2dc>)
 800aa6e:	9301      	str	r3, [sp, #4]
 800aa70:	3303      	adds	r3, #3
 800aa72:	e7f3      	b.n	800aa5c <_dtoa_r+0x9c>
 800aa74:	2200      	movs	r2, #0
 800aa76:	2300      	movs	r3, #0
 800aa78:	4650      	mov	r0, sl
 800aa7a:	4659      	mov	r1, fp
 800aa7c:	f7f6 f83c 	bl	8000af8 <__aeabi_dcmpeq>
 800aa80:	ec4b ab19 	vmov	d9, sl, fp
 800aa84:	4680      	mov	r8, r0
 800aa86:	b158      	cbz	r0, 800aaa0 <_dtoa_r+0xe0>
 800aa88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	6013      	str	r3, [r2, #0]
 800aa8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 856b 	beq.w	800b56c <_dtoa_r+0xbac>
 800aa96:	4883      	ldr	r0, [pc, #524]	; (800aca4 <_dtoa_r+0x2e4>)
 800aa98:	6018      	str	r0, [r3, #0]
 800aa9a:	1e43      	subs	r3, r0, #1
 800aa9c:	9301      	str	r3, [sp, #4]
 800aa9e:	e7df      	b.n	800aa60 <_dtoa_r+0xa0>
 800aaa0:	ec4b ab10 	vmov	d0, sl, fp
 800aaa4:	aa10      	add	r2, sp, #64	; 0x40
 800aaa6:	a911      	add	r1, sp, #68	; 0x44
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f001 fd05 	bl	800c4b8 <__d2b>
 800aaae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800aab2:	ee08 0a10 	vmov	s16, r0
 800aab6:	2d00      	cmp	r5, #0
 800aab8:	f000 8084 	beq.w	800abc4 <_dtoa_r+0x204>
 800aabc:	ee19 3a90 	vmov	r3, s19
 800aac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aac4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aac8:	4656      	mov	r6, sl
 800aaca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aace:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aad2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800aad6:	4b74      	ldr	r3, [pc, #464]	; (800aca8 <_dtoa_r+0x2e8>)
 800aad8:	2200      	movs	r2, #0
 800aada:	4630      	mov	r0, r6
 800aadc:	4639      	mov	r1, r7
 800aade:	f7f5 fbeb 	bl	80002b8 <__aeabi_dsub>
 800aae2:	a365      	add	r3, pc, #404	; (adr r3, 800ac78 <_dtoa_r+0x2b8>)
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f7f5 fd9e 	bl	8000628 <__aeabi_dmul>
 800aaec:	a364      	add	r3, pc, #400	; (adr r3, 800ac80 <_dtoa_r+0x2c0>)
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	f7f5 fbe3 	bl	80002bc <__adddf3>
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	4628      	mov	r0, r5
 800aafa:	460f      	mov	r7, r1
 800aafc:	f7f5 fd2a 	bl	8000554 <__aeabi_i2d>
 800ab00:	a361      	add	r3, pc, #388	; (adr r3, 800ac88 <_dtoa_r+0x2c8>)
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	f7f5 fd8f 	bl	8000628 <__aeabi_dmul>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	4630      	mov	r0, r6
 800ab10:	4639      	mov	r1, r7
 800ab12:	f7f5 fbd3 	bl	80002bc <__adddf3>
 800ab16:	4606      	mov	r6, r0
 800ab18:	460f      	mov	r7, r1
 800ab1a:	f7f6 f835 	bl	8000b88 <__aeabi_d2iz>
 800ab1e:	2200      	movs	r2, #0
 800ab20:	9000      	str	r0, [sp, #0]
 800ab22:	2300      	movs	r3, #0
 800ab24:	4630      	mov	r0, r6
 800ab26:	4639      	mov	r1, r7
 800ab28:	f7f5 fff0 	bl	8000b0c <__aeabi_dcmplt>
 800ab2c:	b150      	cbz	r0, 800ab44 <_dtoa_r+0x184>
 800ab2e:	9800      	ldr	r0, [sp, #0]
 800ab30:	f7f5 fd10 	bl	8000554 <__aeabi_i2d>
 800ab34:	4632      	mov	r2, r6
 800ab36:	463b      	mov	r3, r7
 800ab38:	f7f5 ffde 	bl	8000af8 <__aeabi_dcmpeq>
 800ab3c:	b910      	cbnz	r0, 800ab44 <_dtoa_r+0x184>
 800ab3e:	9b00      	ldr	r3, [sp, #0]
 800ab40:	3b01      	subs	r3, #1
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	9b00      	ldr	r3, [sp, #0]
 800ab46:	2b16      	cmp	r3, #22
 800ab48:	d85a      	bhi.n	800ac00 <_dtoa_r+0x240>
 800ab4a:	9a00      	ldr	r2, [sp, #0]
 800ab4c:	4b57      	ldr	r3, [pc, #348]	; (800acac <_dtoa_r+0x2ec>)
 800ab4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab56:	ec51 0b19 	vmov	r0, r1, d9
 800ab5a:	f7f5 ffd7 	bl	8000b0c <__aeabi_dcmplt>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d050      	beq.n	800ac04 <_dtoa_r+0x244>
 800ab62:	9b00      	ldr	r3, [sp, #0]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	2300      	movs	r3, #0
 800ab6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab6e:	1b5d      	subs	r5, r3, r5
 800ab70:	1e6b      	subs	r3, r5, #1
 800ab72:	9305      	str	r3, [sp, #20]
 800ab74:	bf45      	ittet	mi
 800ab76:	f1c5 0301 	rsbmi	r3, r5, #1
 800ab7a:	9304      	strmi	r3, [sp, #16]
 800ab7c:	2300      	movpl	r3, #0
 800ab7e:	2300      	movmi	r3, #0
 800ab80:	bf4c      	ite	mi
 800ab82:	9305      	strmi	r3, [sp, #20]
 800ab84:	9304      	strpl	r3, [sp, #16]
 800ab86:	9b00      	ldr	r3, [sp, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	db3d      	blt.n	800ac08 <_dtoa_r+0x248>
 800ab8c:	9b05      	ldr	r3, [sp, #20]
 800ab8e:	9a00      	ldr	r2, [sp, #0]
 800ab90:	920a      	str	r2, [sp, #40]	; 0x28
 800ab92:	4413      	add	r3, r2
 800ab94:	9305      	str	r3, [sp, #20]
 800ab96:	2300      	movs	r3, #0
 800ab98:	9307      	str	r3, [sp, #28]
 800ab9a:	9b06      	ldr	r3, [sp, #24]
 800ab9c:	2b09      	cmp	r3, #9
 800ab9e:	f200 8089 	bhi.w	800acb4 <_dtoa_r+0x2f4>
 800aba2:	2b05      	cmp	r3, #5
 800aba4:	bfc4      	itt	gt
 800aba6:	3b04      	subgt	r3, #4
 800aba8:	9306      	strgt	r3, [sp, #24]
 800abaa:	9b06      	ldr	r3, [sp, #24]
 800abac:	f1a3 0302 	sub.w	r3, r3, #2
 800abb0:	bfcc      	ite	gt
 800abb2:	2500      	movgt	r5, #0
 800abb4:	2501      	movle	r5, #1
 800abb6:	2b03      	cmp	r3, #3
 800abb8:	f200 8087 	bhi.w	800acca <_dtoa_r+0x30a>
 800abbc:	e8df f003 	tbb	[pc, r3]
 800abc0:	59383a2d 	.word	0x59383a2d
 800abc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800abc8:	441d      	add	r5, r3
 800abca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800abce:	2b20      	cmp	r3, #32
 800abd0:	bfc1      	itttt	gt
 800abd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800abd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800abda:	fa0b f303 	lslgt.w	r3, fp, r3
 800abde:	fa26 f000 	lsrgt.w	r0, r6, r0
 800abe2:	bfda      	itte	le
 800abe4:	f1c3 0320 	rsble	r3, r3, #32
 800abe8:	fa06 f003 	lslle.w	r0, r6, r3
 800abec:	4318      	orrgt	r0, r3
 800abee:	f7f5 fca1 	bl	8000534 <__aeabi_ui2d>
 800abf2:	2301      	movs	r3, #1
 800abf4:	4606      	mov	r6, r0
 800abf6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800abfa:	3d01      	subs	r5, #1
 800abfc:	930e      	str	r3, [sp, #56]	; 0x38
 800abfe:	e76a      	b.n	800aad6 <_dtoa_r+0x116>
 800ac00:	2301      	movs	r3, #1
 800ac02:	e7b2      	b.n	800ab6a <_dtoa_r+0x1aa>
 800ac04:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac06:	e7b1      	b.n	800ab6c <_dtoa_r+0x1ac>
 800ac08:	9b04      	ldr	r3, [sp, #16]
 800ac0a:	9a00      	ldr	r2, [sp, #0]
 800ac0c:	1a9b      	subs	r3, r3, r2
 800ac0e:	9304      	str	r3, [sp, #16]
 800ac10:	4253      	negs	r3, r2
 800ac12:	9307      	str	r3, [sp, #28]
 800ac14:	2300      	movs	r3, #0
 800ac16:	930a      	str	r3, [sp, #40]	; 0x28
 800ac18:	e7bf      	b.n	800ab9a <_dtoa_r+0x1da>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	9308      	str	r3, [sp, #32]
 800ac1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	dc55      	bgt.n	800acd0 <_dtoa_r+0x310>
 800ac24:	2301      	movs	r3, #1
 800ac26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	9209      	str	r2, [sp, #36]	; 0x24
 800ac2e:	e00c      	b.n	800ac4a <_dtoa_r+0x28a>
 800ac30:	2301      	movs	r3, #1
 800ac32:	e7f3      	b.n	800ac1c <_dtoa_r+0x25c>
 800ac34:	2300      	movs	r3, #0
 800ac36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac38:	9308      	str	r3, [sp, #32]
 800ac3a:	9b00      	ldr	r3, [sp, #0]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	9302      	str	r3, [sp, #8]
 800ac40:	3301      	adds	r3, #1
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	9303      	str	r3, [sp, #12]
 800ac46:	bfb8      	it	lt
 800ac48:	2301      	movlt	r3, #1
 800ac4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	6042      	str	r2, [r0, #4]
 800ac50:	2204      	movs	r2, #4
 800ac52:	f102 0614 	add.w	r6, r2, #20
 800ac56:	429e      	cmp	r6, r3
 800ac58:	6841      	ldr	r1, [r0, #4]
 800ac5a:	d93d      	bls.n	800acd8 <_dtoa_r+0x318>
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f001 f83d 	bl	800bcdc <_Balloc>
 800ac62:	9001      	str	r0, [sp, #4]
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d13b      	bne.n	800ace0 <_dtoa_r+0x320>
 800ac68:	4b11      	ldr	r3, [pc, #68]	; (800acb0 <_dtoa_r+0x2f0>)
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ac70:	e6c0      	b.n	800a9f4 <_dtoa_r+0x34>
 800ac72:	2301      	movs	r3, #1
 800ac74:	e7df      	b.n	800ac36 <_dtoa_r+0x276>
 800ac76:	bf00      	nop
 800ac78:	636f4361 	.word	0x636f4361
 800ac7c:	3fd287a7 	.word	0x3fd287a7
 800ac80:	8b60c8b3 	.word	0x8b60c8b3
 800ac84:	3fc68a28 	.word	0x3fc68a28
 800ac88:	509f79fb 	.word	0x509f79fb
 800ac8c:	3fd34413 	.word	0x3fd34413
 800ac90:	0801047e 	.word	0x0801047e
 800ac94:	08010495 	.word	0x08010495
 800ac98:	7ff00000 	.word	0x7ff00000
 800ac9c:	0801047a 	.word	0x0801047a
 800aca0:	08010471 	.word	0x08010471
 800aca4:	080106ea 	.word	0x080106ea
 800aca8:	3ff80000 	.word	0x3ff80000
 800acac:	08010600 	.word	0x08010600
 800acb0:	080104f0 	.word	0x080104f0
 800acb4:	2501      	movs	r5, #1
 800acb6:	2300      	movs	r3, #0
 800acb8:	9306      	str	r3, [sp, #24]
 800acba:	9508      	str	r5, [sp, #32]
 800acbc:	f04f 33ff 	mov.w	r3, #4294967295
 800acc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800acc4:	2200      	movs	r2, #0
 800acc6:	2312      	movs	r3, #18
 800acc8:	e7b0      	b.n	800ac2c <_dtoa_r+0x26c>
 800acca:	2301      	movs	r3, #1
 800accc:	9308      	str	r3, [sp, #32]
 800acce:	e7f5      	b.n	800acbc <_dtoa_r+0x2fc>
 800acd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800acd6:	e7b8      	b.n	800ac4a <_dtoa_r+0x28a>
 800acd8:	3101      	adds	r1, #1
 800acda:	6041      	str	r1, [r0, #4]
 800acdc:	0052      	lsls	r2, r2, #1
 800acde:	e7b8      	b.n	800ac52 <_dtoa_r+0x292>
 800ace0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ace2:	9a01      	ldr	r2, [sp, #4]
 800ace4:	601a      	str	r2, [r3, #0]
 800ace6:	9b03      	ldr	r3, [sp, #12]
 800ace8:	2b0e      	cmp	r3, #14
 800acea:	f200 809d 	bhi.w	800ae28 <_dtoa_r+0x468>
 800acee:	2d00      	cmp	r5, #0
 800acf0:	f000 809a 	beq.w	800ae28 <_dtoa_r+0x468>
 800acf4:	9b00      	ldr	r3, [sp, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	dd32      	ble.n	800ad60 <_dtoa_r+0x3a0>
 800acfa:	4ab7      	ldr	r2, [pc, #732]	; (800afd8 <_dtoa_r+0x618>)
 800acfc:	f003 030f 	and.w	r3, r3, #15
 800ad00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad08:	9b00      	ldr	r3, [sp, #0]
 800ad0a:	05d8      	lsls	r0, r3, #23
 800ad0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ad10:	d516      	bpl.n	800ad40 <_dtoa_r+0x380>
 800ad12:	4bb2      	ldr	r3, [pc, #712]	; (800afdc <_dtoa_r+0x61c>)
 800ad14:	ec51 0b19 	vmov	r0, r1, d9
 800ad18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad1c:	f7f5 fdae 	bl	800087c <__aeabi_ddiv>
 800ad20:	f007 070f 	and.w	r7, r7, #15
 800ad24:	4682      	mov	sl, r0
 800ad26:	468b      	mov	fp, r1
 800ad28:	2503      	movs	r5, #3
 800ad2a:	4eac      	ldr	r6, [pc, #688]	; (800afdc <_dtoa_r+0x61c>)
 800ad2c:	b957      	cbnz	r7, 800ad44 <_dtoa_r+0x384>
 800ad2e:	4642      	mov	r2, r8
 800ad30:	464b      	mov	r3, r9
 800ad32:	4650      	mov	r0, sl
 800ad34:	4659      	mov	r1, fp
 800ad36:	f7f5 fda1 	bl	800087c <__aeabi_ddiv>
 800ad3a:	4682      	mov	sl, r0
 800ad3c:	468b      	mov	fp, r1
 800ad3e:	e028      	b.n	800ad92 <_dtoa_r+0x3d2>
 800ad40:	2502      	movs	r5, #2
 800ad42:	e7f2      	b.n	800ad2a <_dtoa_r+0x36a>
 800ad44:	07f9      	lsls	r1, r7, #31
 800ad46:	d508      	bpl.n	800ad5a <_dtoa_r+0x39a>
 800ad48:	4640      	mov	r0, r8
 800ad4a:	4649      	mov	r1, r9
 800ad4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad50:	f7f5 fc6a 	bl	8000628 <__aeabi_dmul>
 800ad54:	3501      	adds	r5, #1
 800ad56:	4680      	mov	r8, r0
 800ad58:	4689      	mov	r9, r1
 800ad5a:	107f      	asrs	r7, r7, #1
 800ad5c:	3608      	adds	r6, #8
 800ad5e:	e7e5      	b.n	800ad2c <_dtoa_r+0x36c>
 800ad60:	f000 809b 	beq.w	800ae9a <_dtoa_r+0x4da>
 800ad64:	9b00      	ldr	r3, [sp, #0]
 800ad66:	4f9d      	ldr	r7, [pc, #628]	; (800afdc <_dtoa_r+0x61c>)
 800ad68:	425e      	negs	r6, r3
 800ad6a:	4b9b      	ldr	r3, [pc, #620]	; (800afd8 <_dtoa_r+0x618>)
 800ad6c:	f006 020f 	and.w	r2, r6, #15
 800ad70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad78:	ec51 0b19 	vmov	r0, r1, d9
 800ad7c:	f7f5 fc54 	bl	8000628 <__aeabi_dmul>
 800ad80:	1136      	asrs	r6, r6, #4
 800ad82:	4682      	mov	sl, r0
 800ad84:	468b      	mov	fp, r1
 800ad86:	2300      	movs	r3, #0
 800ad88:	2502      	movs	r5, #2
 800ad8a:	2e00      	cmp	r6, #0
 800ad8c:	d17a      	bne.n	800ae84 <_dtoa_r+0x4c4>
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1d3      	bne.n	800ad3a <_dtoa_r+0x37a>
 800ad92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f000 8082 	beq.w	800ae9e <_dtoa_r+0x4de>
 800ad9a:	4b91      	ldr	r3, [pc, #580]	; (800afe0 <_dtoa_r+0x620>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	4650      	mov	r0, sl
 800ada0:	4659      	mov	r1, fp
 800ada2:	f7f5 feb3 	bl	8000b0c <__aeabi_dcmplt>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d079      	beq.n	800ae9e <_dtoa_r+0x4de>
 800adaa:	9b03      	ldr	r3, [sp, #12]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d076      	beq.n	800ae9e <_dtoa_r+0x4de>
 800adb0:	9b02      	ldr	r3, [sp, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	dd36      	ble.n	800ae24 <_dtoa_r+0x464>
 800adb6:	9b00      	ldr	r3, [sp, #0]
 800adb8:	4650      	mov	r0, sl
 800adba:	4659      	mov	r1, fp
 800adbc:	1e5f      	subs	r7, r3, #1
 800adbe:	2200      	movs	r2, #0
 800adc0:	4b88      	ldr	r3, [pc, #544]	; (800afe4 <_dtoa_r+0x624>)
 800adc2:	f7f5 fc31 	bl	8000628 <__aeabi_dmul>
 800adc6:	9e02      	ldr	r6, [sp, #8]
 800adc8:	4682      	mov	sl, r0
 800adca:	468b      	mov	fp, r1
 800adcc:	3501      	adds	r5, #1
 800adce:	4628      	mov	r0, r5
 800add0:	f7f5 fbc0 	bl	8000554 <__aeabi_i2d>
 800add4:	4652      	mov	r2, sl
 800add6:	465b      	mov	r3, fp
 800add8:	f7f5 fc26 	bl	8000628 <__aeabi_dmul>
 800addc:	4b82      	ldr	r3, [pc, #520]	; (800afe8 <_dtoa_r+0x628>)
 800adde:	2200      	movs	r2, #0
 800ade0:	f7f5 fa6c 	bl	80002bc <__adddf3>
 800ade4:	46d0      	mov	r8, sl
 800ade6:	46d9      	mov	r9, fp
 800ade8:	4682      	mov	sl, r0
 800adea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800adee:	2e00      	cmp	r6, #0
 800adf0:	d158      	bne.n	800aea4 <_dtoa_r+0x4e4>
 800adf2:	4b7e      	ldr	r3, [pc, #504]	; (800afec <_dtoa_r+0x62c>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	4640      	mov	r0, r8
 800adf8:	4649      	mov	r1, r9
 800adfa:	f7f5 fa5d 	bl	80002b8 <__aeabi_dsub>
 800adfe:	4652      	mov	r2, sl
 800ae00:	465b      	mov	r3, fp
 800ae02:	4680      	mov	r8, r0
 800ae04:	4689      	mov	r9, r1
 800ae06:	f7f5 fe9f 	bl	8000b48 <__aeabi_dcmpgt>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	f040 8295 	bne.w	800b33a <_dtoa_r+0x97a>
 800ae10:	4652      	mov	r2, sl
 800ae12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ae16:	4640      	mov	r0, r8
 800ae18:	4649      	mov	r1, r9
 800ae1a:	f7f5 fe77 	bl	8000b0c <__aeabi_dcmplt>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	f040 8289 	bne.w	800b336 <_dtoa_r+0x976>
 800ae24:	ec5b ab19 	vmov	sl, fp, d9
 800ae28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f2c0 8148 	blt.w	800b0c0 <_dtoa_r+0x700>
 800ae30:	9a00      	ldr	r2, [sp, #0]
 800ae32:	2a0e      	cmp	r2, #14
 800ae34:	f300 8144 	bgt.w	800b0c0 <_dtoa_r+0x700>
 800ae38:	4b67      	ldr	r3, [pc, #412]	; (800afd8 <_dtoa_r+0x618>)
 800ae3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f280 80d5 	bge.w	800aff4 <_dtoa_r+0x634>
 800ae4a:	9b03      	ldr	r3, [sp, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f300 80d1 	bgt.w	800aff4 <_dtoa_r+0x634>
 800ae52:	f040 826f 	bne.w	800b334 <_dtoa_r+0x974>
 800ae56:	4b65      	ldr	r3, [pc, #404]	; (800afec <_dtoa_r+0x62c>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	4649      	mov	r1, r9
 800ae5e:	f7f5 fbe3 	bl	8000628 <__aeabi_dmul>
 800ae62:	4652      	mov	r2, sl
 800ae64:	465b      	mov	r3, fp
 800ae66:	f7f5 fe65 	bl	8000b34 <__aeabi_dcmpge>
 800ae6a:	9e03      	ldr	r6, [sp, #12]
 800ae6c:	4637      	mov	r7, r6
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	f040 8245 	bne.w	800b2fe <_dtoa_r+0x93e>
 800ae74:	9d01      	ldr	r5, [sp, #4]
 800ae76:	2331      	movs	r3, #49	; 0x31
 800ae78:	f805 3b01 	strb.w	r3, [r5], #1
 800ae7c:	9b00      	ldr	r3, [sp, #0]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	9300      	str	r3, [sp, #0]
 800ae82:	e240      	b.n	800b306 <_dtoa_r+0x946>
 800ae84:	07f2      	lsls	r2, r6, #31
 800ae86:	d505      	bpl.n	800ae94 <_dtoa_r+0x4d4>
 800ae88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae8c:	f7f5 fbcc 	bl	8000628 <__aeabi_dmul>
 800ae90:	3501      	adds	r5, #1
 800ae92:	2301      	movs	r3, #1
 800ae94:	1076      	asrs	r6, r6, #1
 800ae96:	3708      	adds	r7, #8
 800ae98:	e777      	b.n	800ad8a <_dtoa_r+0x3ca>
 800ae9a:	2502      	movs	r5, #2
 800ae9c:	e779      	b.n	800ad92 <_dtoa_r+0x3d2>
 800ae9e:	9f00      	ldr	r7, [sp, #0]
 800aea0:	9e03      	ldr	r6, [sp, #12]
 800aea2:	e794      	b.n	800adce <_dtoa_r+0x40e>
 800aea4:	9901      	ldr	r1, [sp, #4]
 800aea6:	4b4c      	ldr	r3, [pc, #304]	; (800afd8 <_dtoa_r+0x618>)
 800aea8:	4431      	add	r1, r6
 800aeaa:	910d      	str	r1, [sp, #52]	; 0x34
 800aeac:	9908      	ldr	r1, [sp, #32]
 800aeae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aeb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aeb6:	2900      	cmp	r1, #0
 800aeb8:	d043      	beq.n	800af42 <_dtoa_r+0x582>
 800aeba:	494d      	ldr	r1, [pc, #308]	; (800aff0 <_dtoa_r+0x630>)
 800aebc:	2000      	movs	r0, #0
 800aebe:	f7f5 fcdd 	bl	800087c <__aeabi_ddiv>
 800aec2:	4652      	mov	r2, sl
 800aec4:	465b      	mov	r3, fp
 800aec6:	f7f5 f9f7 	bl	80002b8 <__aeabi_dsub>
 800aeca:	9d01      	ldr	r5, [sp, #4]
 800aecc:	4682      	mov	sl, r0
 800aece:	468b      	mov	fp, r1
 800aed0:	4649      	mov	r1, r9
 800aed2:	4640      	mov	r0, r8
 800aed4:	f7f5 fe58 	bl	8000b88 <__aeabi_d2iz>
 800aed8:	4606      	mov	r6, r0
 800aeda:	f7f5 fb3b 	bl	8000554 <__aeabi_i2d>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	4640      	mov	r0, r8
 800aee4:	4649      	mov	r1, r9
 800aee6:	f7f5 f9e7 	bl	80002b8 <__aeabi_dsub>
 800aeea:	3630      	adds	r6, #48	; 0x30
 800aeec:	f805 6b01 	strb.w	r6, [r5], #1
 800aef0:	4652      	mov	r2, sl
 800aef2:	465b      	mov	r3, fp
 800aef4:	4680      	mov	r8, r0
 800aef6:	4689      	mov	r9, r1
 800aef8:	f7f5 fe08 	bl	8000b0c <__aeabi_dcmplt>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d163      	bne.n	800afc8 <_dtoa_r+0x608>
 800af00:	4642      	mov	r2, r8
 800af02:	464b      	mov	r3, r9
 800af04:	4936      	ldr	r1, [pc, #216]	; (800afe0 <_dtoa_r+0x620>)
 800af06:	2000      	movs	r0, #0
 800af08:	f7f5 f9d6 	bl	80002b8 <__aeabi_dsub>
 800af0c:	4652      	mov	r2, sl
 800af0e:	465b      	mov	r3, fp
 800af10:	f7f5 fdfc 	bl	8000b0c <__aeabi_dcmplt>
 800af14:	2800      	cmp	r0, #0
 800af16:	f040 80b5 	bne.w	800b084 <_dtoa_r+0x6c4>
 800af1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af1c:	429d      	cmp	r5, r3
 800af1e:	d081      	beq.n	800ae24 <_dtoa_r+0x464>
 800af20:	4b30      	ldr	r3, [pc, #192]	; (800afe4 <_dtoa_r+0x624>)
 800af22:	2200      	movs	r2, #0
 800af24:	4650      	mov	r0, sl
 800af26:	4659      	mov	r1, fp
 800af28:	f7f5 fb7e 	bl	8000628 <__aeabi_dmul>
 800af2c:	4b2d      	ldr	r3, [pc, #180]	; (800afe4 <_dtoa_r+0x624>)
 800af2e:	4682      	mov	sl, r0
 800af30:	468b      	mov	fp, r1
 800af32:	4640      	mov	r0, r8
 800af34:	4649      	mov	r1, r9
 800af36:	2200      	movs	r2, #0
 800af38:	f7f5 fb76 	bl	8000628 <__aeabi_dmul>
 800af3c:	4680      	mov	r8, r0
 800af3e:	4689      	mov	r9, r1
 800af40:	e7c6      	b.n	800aed0 <_dtoa_r+0x510>
 800af42:	4650      	mov	r0, sl
 800af44:	4659      	mov	r1, fp
 800af46:	f7f5 fb6f 	bl	8000628 <__aeabi_dmul>
 800af4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af4c:	9d01      	ldr	r5, [sp, #4]
 800af4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800af50:	4682      	mov	sl, r0
 800af52:	468b      	mov	fp, r1
 800af54:	4649      	mov	r1, r9
 800af56:	4640      	mov	r0, r8
 800af58:	f7f5 fe16 	bl	8000b88 <__aeabi_d2iz>
 800af5c:	4606      	mov	r6, r0
 800af5e:	f7f5 faf9 	bl	8000554 <__aeabi_i2d>
 800af62:	3630      	adds	r6, #48	; 0x30
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	4640      	mov	r0, r8
 800af6a:	4649      	mov	r1, r9
 800af6c:	f7f5 f9a4 	bl	80002b8 <__aeabi_dsub>
 800af70:	f805 6b01 	strb.w	r6, [r5], #1
 800af74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af76:	429d      	cmp	r5, r3
 800af78:	4680      	mov	r8, r0
 800af7a:	4689      	mov	r9, r1
 800af7c:	f04f 0200 	mov.w	r2, #0
 800af80:	d124      	bne.n	800afcc <_dtoa_r+0x60c>
 800af82:	4b1b      	ldr	r3, [pc, #108]	; (800aff0 <_dtoa_r+0x630>)
 800af84:	4650      	mov	r0, sl
 800af86:	4659      	mov	r1, fp
 800af88:	f7f5 f998 	bl	80002bc <__adddf3>
 800af8c:	4602      	mov	r2, r0
 800af8e:	460b      	mov	r3, r1
 800af90:	4640      	mov	r0, r8
 800af92:	4649      	mov	r1, r9
 800af94:	f7f5 fdd8 	bl	8000b48 <__aeabi_dcmpgt>
 800af98:	2800      	cmp	r0, #0
 800af9a:	d173      	bne.n	800b084 <_dtoa_r+0x6c4>
 800af9c:	4652      	mov	r2, sl
 800af9e:	465b      	mov	r3, fp
 800afa0:	4913      	ldr	r1, [pc, #76]	; (800aff0 <_dtoa_r+0x630>)
 800afa2:	2000      	movs	r0, #0
 800afa4:	f7f5 f988 	bl	80002b8 <__aeabi_dsub>
 800afa8:	4602      	mov	r2, r0
 800afaa:	460b      	mov	r3, r1
 800afac:	4640      	mov	r0, r8
 800afae:	4649      	mov	r1, r9
 800afb0:	f7f5 fdac 	bl	8000b0c <__aeabi_dcmplt>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	f43f af35 	beq.w	800ae24 <_dtoa_r+0x464>
 800afba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800afbc:	1e6b      	subs	r3, r5, #1
 800afbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800afc0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800afc4:	2b30      	cmp	r3, #48	; 0x30
 800afc6:	d0f8      	beq.n	800afba <_dtoa_r+0x5fa>
 800afc8:	9700      	str	r7, [sp, #0]
 800afca:	e049      	b.n	800b060 <_dtoa_r+0x6a0>
 800afcc:	4b05      	ldr	r3, [pc, #20]	; (800afe4 <_dtoa_r+0x624>)
 800afce:	f7f5 fb2b 	bl	8000628 <__aeabi_dmul>
 800afd2:	4680      	mov	r8, r0
 800afd4:	4689      	mov	r9, r1
 800afd6:	e7bd      	b.n	800af54 <_dtoa_r+0x594>
 800afd8:	08010600 	.word	0x08010600
 800afdc:	080105d8 	.word	0x080105d8
 800afe0:	3ff00000 	.word	0x3ff00000
 800afe4:	40240000 	.word	0x40240000
 800afe8:	401c0000 	.word	0x401c0000
 800afec:	40140000 	.word	0x40140000
 800aff0:	3fe00000 	.word	0x3fe00000
 800aff4:	9d01      	ldr	r5, [sp, #4]
 800aff6:	4656      	mov	r6, sl
 800aff8:	465f      	mov	r7, fp
 800affa:	4642      	mov	r2, r8
 800affc:	464b      	mov	r3, r9
 800affe:	4630      	mov	r0, r6
 800b000:	4639      	mov	r1, r7
 800b002:	f7f5 fc3b 	bl	800087c <__aeabi_ddiv>
 800b006:	f7f5 fdbf 	bl	8000b88 <__aeabi_d2iz>
 800b00a:	4682      	mov	sl, r0
 800b00c:	f7f5 faa2 	bl	8000554 <__aeabi_i2d>
 800b010:	4642      	mov	r2, r8
 800b012:	464b      	mov	r3, r9
 800b014:	f7f5 fb08 	bl	8000628 <__aeabi_dmul>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4630      	mov	r0, r6
 800b01e:	4639      	mov	r1, r7
 800b020:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b024:	f7f5 f948 	bl	80002b8 <__aeabi_dsub>
 800b028:	f805 6b01 	strb.w	r6, [r5], #1
 800b02c:	9e01      	ldr	r6, [sp, #4]
 800b02e:	9f03      	ldr	r7, [sp, #12]
 800b030:	1bae      	subs	r6, r5, r6
 800b032:	42b7      	cmp	r7, r6
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	d135      	bne.n	800b0a6 <_dtoa_r+0x6e6>
 800b03a:	f7f5 f93f 	bl	80002bc <__adddf3>
 800b03e:	4642      	mov	r2, r8
 800b040:	464b      	mov	r3, r9
 800b042:	4606      	mov	r6, r0
 800b044:	460f      	mov	r7, r1
 800b046:	f7f5 fd7f 	bl	8000b48 <__aeabi_dcmpgt>
 800b04a:	b9d0      	cbnz	r0, 800b082 <_dtoa_r+0x6c2>
 800b04c:	4642      	mov	r2, r8
 800b04e:	464b      	mov	r3, r9
 800b050:	4630      	mov	r0, r6
 800b052:	4639      	mov	r1, r7
 800b054:	f7f5 fd50 	bl	8000af8 <__aeabi_dcmpeq>
 800b058:	b110      	cbz	r0, 800b060 <_dtoa_r+0x6a0>
 800b05a:	f01a 0f01 	tst.w	sl, #1
 800b05e:	d110      	bne.n	800b082 <_dtoa_r+0x6c2>
 800b060:	4620      	mov	r0, r4
 800b062:	ee18 1a10 	vmov	r1, s16
 800b066:	f000 fe79 	bl	800bd5c <_Bfree>
 800b06a:	2300      	movs	r3, #0
 800b06c:	9800      	ldr	r0, [sp, #0]
 800b06e:	702b      	strb	r3, [r5, #0]
 800b070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b072:	3001      	adds	r0, #1
 800b074:	6018      	str	r0, [r3, #0]
 800b076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f43f acf1 	beq.w	800aa60 <_dtoa_r+0xa0>
 800b07e:	601d      	str	r5, [r3, #0]
 800b080:	e4ee      	b.n	800aa60 <_dtoa_r+0xa0>
 800b082:	9f00      	ldr	r7, [sp, #0]
 800b084:	462b      	mov	r3, r5
 800b086:	461d      	mov	r5, r3
 800b088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b08c:	2a39      	cmp	r2, #57	; 0x39
 800b08e:	d106      	bne.n	800b09e <_dtoa_r+0x6de>
 800b090:	9a01      	ldr	r2, [sp, #4]
 800b092:	429a      	cmp	r2, r3
 800b094:	d1f7      	bne.n	800b086 <_dtoa_r+0x6c6>
 800b096:	9901      	ldr	r1, [sp, #4]
 800b098:	2230      	movs	r2, #48	; 0x30
 800b09a:	3701      	adds	r7, #1
 800b09c:	700a      	strb	r2, [r1, #0]
 800b09e:	781a      	ldrb	r2, [r3, #0]
 800b0a0:	3201      	adds	r2, #1
 800b0a2:	701a      	strb	r2, [r3, #0]
 800b0a4:	e790      	b.n	800afc8 <_dtoa_r+0x608>
 800b0a6:	4ba6      	ldr	r3, [pc, #664]	; (800b340 <_dtoa_r+0x980>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f7f5 fabd 	bl	8000628 <__aeabi_dmul>
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	460f      	mov	r7, r1
 800b0b6:	f7f5 fd1f 	bl	8000af8 <__aeabi_dcmpeq>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d09d      	beq.n	800affa <_dtoa_r+0x63a>
 800b0be:	e7cf      	b.n	800b060 <_dtoa_r+0x6a0>
 800b0c0:	9a08      	ldr	r2, [sp, #32]
 800b0c2:	2a00      	cmp	r2, #0
 800b0c4:	f000 80d7 	beq.w	800b276 <_dtoa_r+0x8b6>
 800b0c8:	9a06      	ldr	r2, [sp, #24]
 800b0ca:	2a01      	cmp	r2, #1
 800b0cc:	f300 80ba 	bgt.w	800b244 <_dtoa_r+0x884>
 800b0d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0d2:	2a00      	cmp	r2, #0
 800b0d4:	f000 80b2 	beq.w	800b23c <_dtoa_r+0x87c>
 800b0d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b0dc:	9e07      	ldr	r6, [sp, #28]
 800b0de:	9d04      	ldr	r5, [sp, #16]
 800b0e0:	9a04      	ldr	r2, [sp, #16]
 800b0e2:	441a      	add	r2, r3
 800b0e4:	9204      	str	r2, [sp, #16]
 800b0e6:	9a05      	ldr	r2, [sp, #20]
 800b0e8:	2101      	movs	r1, #1
 800b0ea:	441a      	add	r2, r3
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	9205      	str	r2, [sp, #20]
 800b0f0:	f000 ff36 	bl	800bf60 <__i2b>
 800b0f4:	4607      	mov	r7, r0
 800b0f6:	2d00      	cmp	r5, #0
 800b0f8:	dd0c      	ble.n	800b114 <_dtoa_r+0x754>
 800b0fa:	9b05      	ldr	r3, [sp, #20]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	dd09      	ble.n	800b114 <_dtoa_r+0x754>
 800b100:	42ab      	cmp	r3, r5
 800b102:	9a04      	ldr	r2, [sp, #16]
 800b104:	bfa8      	it	ge
 800b106:	462b      	movge	r3, r5
 800b108:	1ad2      	subs	r2, r2, r3
 800b10a:	9204      	str	r2, [sp, #16]
 800b10c:	9a05      	ldr	r2, [sp, #20]
 800b10e:	1aed      	subs	r5, r5, r3
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	9305      	str	r3, [sp, #20]
 800b114:	9b07      	ldr	r3, [sp, #28]
 800b116:	b31b      	cbz	r3, 800b160 <_dtoa_r+0x7a0>
 800b118:	9b08      	ldr	r3, [sp, #32]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f000 80af 	beq.w	800b27e <_dtoa_r+0x8be>
 800b120:	2e00      	cmp	r6, #0
 800b122:	dd13      	ble.n	800b14c <_dtoa_r+0x78c>
 800b124:	4639      	mov	r1, r7
 800b126:	4632      	mov	r2, r6
 800b128:	4620      	mov	r0, r4
 800b12a:	f000 ffd9 	bl	800c0e0 <__pow5mult>
 800b12e:	ee18 2a10 	vmov	r2, s16
 800b132:	4601      	mov	r1, r0
 800b134:	4607      	mov	r7, r0
 800b136:	4620      	mov	r0, r4
 800b138:	f000 ff28 	bl	800bf8c <__multiply>
 800b13c:	ee18 1a10 	vmov	r1, s16
 800b140:	4680      	mov	r8, r0
 800b142:	4620      	mov	r0, r4
 800b144:	f000 fe0a 	bl	800bd5c <_Bfree>
 800b148:	ee08 8a10 	vmov	s16, r8
 800b14c:	9b07      	ldr	r3, [sp, #28]
 800b14e:	1b9a      	subs	r2, r3, r6
 800b150:	d006      	beq.n	800b160 <_dtoa_r+0x7a0>
 800b152:	ee18 1a10 	vmov	r1, s16
 800b156:	4620      	mov	r0, r4
 800b158:	f000 ffc2 	bl	800c0e0 <__pow5mult>
 800b15c:	ee08 0a10 	vmov	s16, r0
 800b160:	2101      	movs	r1, #1
 800b162:	4620      	mov	r0, r4
 800b164:	f000 fefc 	bl	800bf60 <__i2b>
 800b168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	4606      	mov	r6, r0
 800b16e:	f340 8088 	ble.w	800b282 <_dtoa_r+0x8c2>
 800b172:	461a      	mov	r2, r3
 800b174:	4601      	mov	r1, r0
 800b176:	4620      	mov	r0, r4
 800b178:	f000 ffb2 	bl	800c0e0 <__pow5mult>
 800b17c:	9b06      	ldr	r3, [sp, #24]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	4606      	mov	r6, r0
 800b182:	f340 8081 	ble.w	800b288 <_dtoa_r+0x8c8>
 800b186:	f04f 0800 	mov.w	r8, #0
 800b18a:	6933      	ldr	r3, [r6, #16]
 800b18c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b190:	6918      	ldr	r0, [r3, #16]
 800b192:	f000 fe95 	bl	800bec0 <__hi0bits>
 800b196:	f1c0 0020 	rsb	r0, r0, #32
 800b19a:	9b05      	ldr	r3, [sp, #20]
 800b19c:	4418      	add	r0, r3
 800b19e:	f010 001f 	ands.w	r0, r0, #31
 800b1a2:	f000 8092 	beq.w	800b2ca <_dtoa_r+0x90a>
 800b1a6:	f1c0 0320 	rsb	r3, r0, #32
 800b1aa:	2b04      	cmp	r3, #4
 800b1ac:	f340 808a 	ble.w	800b2c4 <_dtoa_r+0x904>
 800b1b0:	f1c0 001c 	rsb	r0, r0, #28
 800b1b4:	9b04      	ldr	r3, [sp, #16]
 800b1b6:	4403      	add	r3, r0
 800b1b8:	9304      	str	r3, [sp, #16]
 800b1ba:	9b05      	ldr	r3, [sp, #20]
 800b1bc:	4403      	add	r3, r0
 800b1be:	4405      	add	r5, r0
 800b1c0:	9305      	str	r3, [sp, #20]
 800b1c2:	9b04      	ldr	r3, [sp, #16]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	dd07      	ble.n	800b1d8 <_dtoa_r+0x818>
 800b1c8:	ee18 1a10 	vmov	r1, s16
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f000 ffe0 	bl	800c194 <__lshift>
 800b1d4:	ee08 0a10 	vmov	s16, r0
 800b1d8:	9b05      	ldr	r3, [sp, #20]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	dd05      	ble.n	800b1ea <_dtoa_r+0x82a>
 800b1de:	4631      	mov	r1, r6
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f000 ffd6 	bl	800c194 <__lshift>
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d06e      	beq.n	800b2ce <_dtoa_r+0x90e>
 800b1f0:	ee18 0a10 	vmov	r0, s16
 800b1f4:	4631      	mov	r1, r6
 800b1f6:	f001 f83d 	bl	800c274 <__mcmp>
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	da67      	bge.n	800b2ce <_dtoa_r+0x90e>
 800b1fe:	9b00      	ldr	r3, [sp, #0]
 800b200:	3b01      	subs	r3, #1
 800b202:	ee18 1a10 	vmov	r1, s16
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	220a      	movs	r2, #10
 800b20a:	2300      	movs	r3, #0
 800b20c:	4620      	mov	r0, r4
 800b20e:	f000 fdc7 	bl	800bda0 <__multadd>
 800b212:	9b08      	ldr	r3, [sp, #32]
 800b214:	ee08 0a10 	vmov	s16, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 81b1 	beq.w	800b580 <_dtoa_r+0xbc0>
 800b21e:	2300      	movs	r3, #0
 800b220:	4639      	mov	r1, r7
 800b222:	220a      	movs	r2, #10
 800b224:	4620      	mov	r0, r4
 800b226:	f000 fdbb 	bl	800bda0 <__multadd>
 800b22a:	9b02      	ldr	r3, [sp, #8]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	4607      	mov	r7, r0
 800b230:	f300 808e 	bgt.w	800b350 <_dtoa_r+0x990>
 800b234:	9b06      	ldr	r3, [sp, #24]
 800b236:	2b02      	cmp	r3, #2
 800b238:	dc51      	bgt.n	800b2de <_dtoa_r+0x91e>
 800b23a:	e089      	b.n	800b350 <_dtoa_r+0x990>
 800b23c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b23e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b242:	e74b      	b.n	800b0dc <_dtoa_r+0x71c>
 800b244:	9b03      	ldr	r3, [sp, #12]
 800b246:	1e5e      	subs	r6, r3, #1
 800b248:	9b07      	ldr	r3, [sp, #28]
 800b24a:	42b3      	cmp	r3, r6
 800b24c:	bfbf      	itttt	lt
 800b24e:	9b07      	ldrlt	r3, [sp, #28]
 800b250:	9607      	strlt	r6, [sp, #28]
 800b252:	1af2      	sublt	r2, r6, r3
 800b254:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b256:	bfb6      	itet	lt
 800b258:	189b      	addlt	r3, r3, r2
 800b25a:	1b9e      	subge	r6, r3, r6
 800b25c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b25e:	9b03      	ldr	r3, [sp, #12]
 800b260:	bfb8      	it	lt
 800b262:	2600      	movlt	r6, #0
 800b264:	2b00      	cmp	r3, #0
 800b266:	bfb7      	itett	lt
 800b268:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b26c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b270:	1a9d      	sublt	r5, r3, r2
 800b272:	2300      	movlt	r3, #0
 800b274:	e734      	b.n	800b0e0 <_dtoa_r+0x720>
 800b276:	9e07      	ldr	r6, [sp, #28]
 800b278:	9d04      	ldr	r5, [sp, #16]
 800b27a:	9f08      	ldr	r7, [sp, #32]
 800b27c:	e73b      	b.n	800b0f6 <_dtoa_r+0x736>
 800b27e:	9a07      	ldr	r2, [sp, #28]
 800b280:	e767      	b.n	800b152 <_dtoa_r+0x792>
 800b282:	9b06      	ldr	r3, [sp, #24]
 800b284:	2b01      	cmp	r3, #1
 800b286:	dc18      	bgt.n	800b2ba <_dtoa_r+0x8fa>
 800b288:	f1ba 0f00 	cmp.w	sl, #0
 800b28c:	d115      	bne.n	800b2ba <_dtoa_r+0x8fa>
 800b28e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b292:	b993      	cbnz	r3, 800b2ba <_dtoa_r+0x8fa>
 800b294:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b298:	0d1b      	lsrs	r3, r3, #20
 800b29a:	051b      	lsls	r3, r3, #20
 800b29c:	b183      	cbz	r3, 800b2c0 <_dtoa_r+0x900>
 800b29e:	9b04      	ldr	r3, [sp, #16]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	9304      	str	r3, [sp, #16]
 800b2a4:	9b05      	ldr	r3, [sp, #20]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	9305      	str	r3, [sp, #20]
 800b2aa:	f04f 0801 	mov.w	r8, #1
 800b2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f47f af6a 	bne.w	800b18a <_dtoa_r+0x7ca>
 800b2b6:	2001      	movs	r0, #1
 800b2b8:	e76f      	b.n	800b19a <_dtoa_r+0x7da>
 800b2ba:	f04f 0800 	mov.w	r8, #0
 800b2be:	e7f6      	b.n	800b2ae <_dtoa_r+0x8ee>
 800b2c0:	4698      	mov	r8, r3
 800b2c2:	e7f4      	b.n	800b2ae <_dtoa_r+0x8ee>
 800b2c4:	f43f af7d 	beq.w	800b1c2 <_dtoa_r+0x802>
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	301c      	adds	r0, #28
 800b2cc:	e772      	b.n	800b1b4 <_dtoa_r+0x7f4>
 800b2ce:	9b03      	ldr	r3, [sp, #12]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	dc37      	bgt.n	800b344 <_dtoa_r+0x984>
 800b2d4:	9b06      	ldr	r3, [sp, #24]
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	dd34      	ble.n	800b344 <_dtoa_r+0x984>
 800b2da:	9b03      	ldr	r3, [sp, #12]
 800b2dc:	9302      	str	r3, [sp, #8]
 800b2de:	9b02      	ldr	r3, [sp, #8]
 800b2e0:	b96b      	cbnz	r3, 800b2fe <_dtoa_r+0x93e>
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	2205      	movs	r2, #5
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f000 fd5a 	bl	800bda0 <__multadd>
 800b2ec:	4601      	mov	r1, r0
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	ee18 0a10 	vmov	r0, s16
 800b2f4:	f000 ffbe 	bl	800c274 <__mcmp>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	f73f adbb 	bgt.w	800ae74 <_dtoa_r+0x4b4>
 800b2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b300:	9d01      	ldr	r5, [sp, #4]
 800b302:	43db      	mvns	r3, r3
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	f04f 0800 	mov.w	r8, #0
 800b30a:	4631      	mov	r1, r6
 800b30c:	4620      	mov	r0, r4
 800b30e:	f000 fd25 	bl	800bd5c <_Bfree>
 800b312:	2f00      	cmp	r7, #0
 800b314:	f43f aea4 	beq.w	800b060 <_dtoa_r+0x6a0>
 800b318:	f1b8 0f00 	cmp.w	r8, #0
 800b31c:	d005      	beq.n	800b32a <_dtoa_r+0x96a>
 800b31e:	45b8      	cmp	r8, r7
 800b320:	d003      	beq.n	800b32a <_dtoa_r+0x96a>
 800b322:	4641      	mov	r1, r8
 800b324:	4620      	mov	r0, r4
 800b326:	f000 fd19 	bl	800bd5c <_Bfree>
 800b32a:	4639      	mov	r1, r7
 800b32c:	4620      	mov	r0, r4
 800b32e:	f000 fd15 	bl	800bd5c <_Bfree>
 800b332:	e695      	b.n	800b060 <_dtoa_r+0x6a0>
 800b334:	2600      	movs	r6, #0
 800b336:	4637      	mov	r7, r6
 800b338:	e7e1      	b.n	800b2fe <_dtoa_r+0x93e>
 800b33a:	9700      	str	r7, [sp, #0]
 800b33c:	4637      	mov	r7, r6
 800b33e:	e599      	b.n	800ae74 <_dtoa_r+0x4b4>
 800b340:	40240000 	.word	0x40240000
 800b344:	9b08      	ldr	r3, [sp, #32]
 800b346:	2b00      	cmp	r3, #0
 800b348:	f000 80ca 	beq.w	800b4e0 <_dtoa_r+0xb20>
 800b34c:	9b03      	ldr	r3, [sp, #12]
 800b34e:	9302      	str	r3, [sp, #8]
 800b350:	2d00      	cmp	r5, #0
 800b352:	dd05      	ble.n	800b360 <_dtoa_r+0x9a0>
 800b354:	4639      	mov	r1, r7
 800b356:	462a      	mov	r2, r5
 800b358:	4620      	mov	r0, r4
 800b35a:	f000 ff1b 	bl	800c194 <__lshift>
 800b35e:	4607      	mov	r7, r0
 800b360:	f1b8 0f00 	cmp.w	r8, #0
 800b364:	d05b      	beq.n	800b41e <_dtoa_r+0xa5e>
 800b366:	6879      	ldr	r1, [r7, #4]
 800b368:	4620      	mov	r0, r4
 800b36a:	f000 fcb7 	bl	800bcdc <_Balloc>
 800b36e:	4605      	mov	r5, r0
 800b370:	b928      	cbnz	r0, 800b37e <_dtoa_r+0x9be>
 800b372:	4b87      	ldr	r3, [pc, #540]	; (800b590 <_dtoa_r+0xbd0>)
 800b374:	4602      	mov	r2, r0
 800b376:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b37a:	f7ff bb3b 	b.w	800a9f4 <_dtoa_r+0x34>
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	3202      	adds	r2, #2
 800b382:	0092      	lsls	r2, r2, #2
 800b384:	f107 010c 	add.w	r1, r7, #12
 800b388:	300c      	adds	r0, #12
 800b38a:	f7fd fc93 	bl	8008cb4 <memcpy>
 800b38e:	2201      	movs	r2, #1
 800b390:	4629      	mov	r1, r5
 800b392:	4620      	mov	r0, r4
 800b394:	f000 fefe 	bl	800c194 <__lshift>
 800b398:	9b01      	ldr	r3, [sp, #4]
 800b39a:	f103 0901 	add.w	r9, r3, #1
 800b39e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	9305      	str	r3, [sp, #20]
 800b3a6:	f00a 0301 	and.w	r3, sl, #1
 800b3aa:	46b8      	mov	r8, r7
 800b3ac:	9304      	str	r3, [sp, #16]
 800b3ae:	4607      	mov	r7, r0
 800b3b0:	4631      	mov	r1, r6
 800b3b2:	ee18 0a10 	vmov	r0, s16
 800b3b6:	f7ff fa75 	bl	800a8a4 <quorem>
 800b3ba:	4641      	mov	r1, r8
 800b3bc:	9002      	str	r0, [sp, #8]
 800b3be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b3c2:	ee18 0a10 	vmov	r0, s16
 800b3c6:	f000 ff55 	bl	800c274 <__mcmp>
 800b3ca:	463a      	mov	r2, r7
 800b3cc:	9003      	str	r0, [sp, #12]
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f000 ff6b 	bl	800c2ac <__mdiff>
 800b3d6:	68c2      	ldr	r2, [r0, #12]
 800b3d8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b3dc:	4605      	mov	r5, r0
 800b3de:	bb02      	cbnz	r2, 800b422 <_dtoa_r+0xa62>
 800b3e0:	4601      	mov	r1, r0
 800b3e2:	ee18 0a10 	vmov	r0, s16
 800b3e6:	f000 ff45 	bl	800c274 <__mcmp>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	4629      	mov	r1, r5
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	9207      	str	r2, [sp, #28]
 800b3f2:	f000 fcb3 	bl	800bd5c <_Bfree>
 800b3f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b3fa:	ea43 0102 	orr.w	r1, r3, r2
 800b3fe:	9b04      	ldr	r3, [sp, #16]
 800b400:	430b      	orrs	r3, r1
 800b402:	464d      	mov	r5, r9
 800b404:	d10f      	bne.n	800b426 <_dtoa_r+0xa66>
 800b406:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b40a:	d02a      	beq.n	800b462 <_dtoa_r+0xaa2>
 800b40c:	9b03      	ldr	r3, [sp, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	dd02      	ble.n	800b418 <_dtoa_r+0xa58>
 800b412:	9b02      	ldr	r3, [sp, #8]
 800b414:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b418:	f88b a000 	strb.w	sl, [fp]
 800b41c:	e775      	b.n	800b30a <_dtoa_r+0x94a>
 800b41e:	4638      	mov	r0, r7
 800b420:	e7ba      	b.n	800b398 <_dtoa_r+0x9d8>
 800b422:	2201      	movs	r2, #1
 800b424:	e7e2      	b.n	800b3ec <_dtoa_r+0xa2c>
 800b426:	9b03      	ldr	r3, [sp, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	db04      	blt.n	800b436 <_dtoa_r+0xa76>
 800b42c:	9906      	ldr	r1, [sp, #24]
 800b42e:	430b      	orrs	r3, r1
 800b430:	9904      	ldr	r1, [sp, #16]
 800b432:	430b      	orrs	r3, r1
 800b434:	d122      	bne.n	800b47c <_dtoa_r+0xabc>
 800b436:	2a00      	cmp	r2, #0
 800b438:	ddee      	ble.n	800b418 <_dtoa_r+0xa58>
 800b43a:	ee18 1a10 	vmov	r1, s16
 800b43e:	2201      	movs	r2, #1
 800b440:	4620      	mov	r0, r4
 800b442:	f000 fea7 	bl	800c194 <__lshift>
 800b446:	4631      	mov	r1, r6
 800b448:	ee08 0a10 	vmov	s16, r0
 800b44c:	f000 ff12 	bl	800c274 <__mcmp>
 800b450:	2800      	cmp	r0, #0
 800b452:	dc03      	bgt.n	800b45c <_dtoa_r+0xa9c>
 800b454:	d1e0      	bne.n	800b418 <_dtoa_r+0xa58>
 800b456:	f01a 0f01 	tst.w	sl, #1
 800b45a:	d0dd      	beq.n	800b418 <_dtoa_r+0xa58>
 800b45c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b460:	d1d7      	bne.n	800b412 <_dtoa_r+0xa52>
 800b462:	2339      	movs	r3, #57	; 0x39
 800b464:	f88b 3000 	strb.w	r3, [fp]
 800b468:	462b      	mov	r3, r5
 800b46a:	461d      	mov	r5, r3
 800b46c:	3b01      	subs	r3, #1
 800b46e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b472:	2a39      	cmp	r2, #57	; 0x39
 800b474:	d071      	beq.n	800b55a <_dtoa_r+0xb9a>
 800b476:	3201      	adds	r2, #1
 800b478:	701a      	strb	r2, [r3, #0]
 800b47a:	e746      	b.n	800b30a <_dtoa_r+0x94a>
 800b47c:	2a00      	cmp	r2, #0
 800b47e:	dd07      	ble.n	800b490 <_dtoa_r+0xad0>
 800b480:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b484:	d0ed      	beq.n	800b462 <_dtoa_r+0xaa2>
 800b486:	f10a 0301 	add.w	r3, sl, #1
 800b48a:	f88b 3000 	strb.w	r3, [fp]
 800b48e:	e73c      	b.n	800b30a <_dtoa_r+0x94a>
 800b490:	9b05      	ldr	r3, [sp, #20]
 800b492:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b496:	4599      	cmp	r9, r3
 800b498:	d047      	beq.n	800b52a <_dtoa_r+0xb6a>
 800b49a:	ee18 1a10 	vmov	r1, s16
 800b49e:	2300      	movs	r3, #0
 800b4a0:	220a      	movs	r2, #10
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f000 fc7c 	bl	800bda0 <__multadd>
 800b4a8:	45b8      	cmp	r8, r7
 800b4aa:	ee08 0a10 	vmov	s16, r0
 800b4ae:	f04f 0300 	mov.w	r3, #0
 800b4b2:	f04f 020a 	mov.w	r2, #10
 800b4b6:	4641      	mov	r1, r8
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	d106      	bne.n	800b4ca <_dtoa_r+0xb0a>
 800b4bc:	f000 fc70 	bl	800bda0 <__multadd>
 800b4c0:	4680      	mov	r8, r0
 800b4c2:	4607      	mov	r7, r0
 800b4c4:	f109 0901 	add.w	r9, r9, #1
 800b4c8:	e772      	b.n	800b3b0 <_dtoa_r+0x9f0>
 800b4ca:	f000 fc69 	bl	800bda0 <__multadd>
 800b4ce:	4639      	mov	r1, r7
 800b4d0:	4680      	mov	r8, r0
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	220a      	movs	r2, #10
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f000 fc62 	bl	800bda0 <__multadd>
 800b4dc:	4607      	mov	r7, r0
 800b4de:	e7f1      	b.n	800b4c4 <_dtoa_r+0xb04>
 800b4e0:	9b03      	ldr	r3, [sp, #12]
 800b4e2:	9302      	str	r3, [sp, #8]
 800b4e4:	9d01      	ldr	r5, [sp, #4]
 800b4e6:	ee18 0a10 	vmov	r0, s16
 800b4ea:	4631      	mov	r1, r6
 800b4ec:	f7ff f9da 	bl	800a8a4 <quorem>
 800b4f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b4f4:	9b01      	ldr	r3, [sp, #4]
 800b4f6:	f805 ab01 	strb.w	sl, [r5], #1
 800b4fa:	1aea      	subs	r2, r5, r3
 800b4fc:	9b02      	ldr	r3, [sp, #8]
 800b4fe:	4293      	cmp	r3, r2
 800b500:	dd09      	ble.n	800b516 <_dtoa_r+0xb56>
 800b502:	ee18 1a10 	vmov	r1, s16
 800b506:	2300      	movs	r3, #0
 800b508:	220a      	movs	r2, #10
 800b50a:	4620      	mov	r0, r4
 800b50c:	f000 fc48 	bl	800bda0 <__multadd>
 800b510:	ee08 0a10 	vmov	s16, r0
 800b514:	e7e7      	b.n	800b4e6 <_dtoa_r+0xb26>
 800b516:	9b02      	ldr	r3, [sp, #8]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	bfc8      	it	gt
 800b51c:	461d      	movgt	r5, r3
 800b51e:	9b01      	ldr	r3, [sp, #4]
 800b520:	bfd8      	it	le
 800b522:	2501      	movle	r5, #1
 800b524:	441d      	add	r5, r3
 800b526:	f04f 0800 	mov.w	r8, #0
 800b52a:	ee18 1a10 	vmov	r1, s16
 800b52e:	2201      	movs	r2, #1
 800b530:	4620      	mov	r0, r4
 800b532:	f000 fe2f 	bl	800c194 <__lshift>
 800b536:	4631      	mov	r1, r6
 800b538:	ee08 0a10 	vmov	s16, r0
 800b53c:	f000 fe9a 	bl	800c274 <__mcmp>
 800b540:	2800      	cmp	r0, #0
 800b542:	dc91      	bgt.n	800b468 <_dtoa_r+0xaa8>
 800b544:	d102      	bne.n	800b54c <_dtoa_r+0xb8c>
 800b546:	f01a 0f01 	tst.w	sl, #1
 800b54a:	d18d      	bne.n	800b468 <_dtoa_r+0xaa8>
 800b54c:	462b      	mov	r3, r5
 800b54e:	461d      	mov	r5, r3
 800b550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b554:	2a30      	cmp	r2, #48	; 0x30
 800b556:	d0fa      	beq.n	800b54e <_dtoa_r+0xb8e>
 800b558:	e6d7      	b.n	800b30a <_dtoa_r+0x94a>
 800b55a:	9a01      	ldr	r2, [sp, #4]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d184      	bne.n	800b46a <_dtoa_r+0xaaa>
 800b560:	9b00      	ldr	r3, [sp, #0]
 800b562:	3301      	adds	r3, #1
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	2331      	movs	r3, #49	; 0x31
 800b568:	7013      	strb	r3, [r2, #0]
 800b56a:	e6ce      	b.n	800b30a <_dtoa_r+0x94a>
 800b56c:	4b09      	ldr	r3, [pc, #36]	; (800b594 <_dtoa_r+0xbd4>)
 800b56e:	f7ff ba95 	b.w	800aa9c <_dtoa_r+0xdc>
 800b572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b574:	2b00      	cmp	r3, #0
 800b576:	f47f aa6e 	bne.w	800aa56 <_dtoa_r+0x96>
 800b57a:	4b07      	ldr	r3, [pc, #28]	; (800b598 <_dtoa_r+0xbd8>)
 800b57c:	f7ff ba8e 	b.w	800aa9c <_dtoa_r+0xdc>
 800b580:	9b02      	ldr	r3, [sp, #8]
 800b582:	2b00      	cmp	r3, #0
 800b584:	dcae      	bgt.n	800b4e4 <_dtoa_r+0xb24>
 800b586:	9b06      	ldr	r3, [sp, #24]
 800b588:	2b02      	cmp	r3, #2
 800b58a:	f73f aea8 	bgt.w	800b2de <_dtoa_r+0x91e>
 800b58e:	e7a9      	b.n	800b4e4 <_dtoa_r+0xb24>
 800b590:	080104f0 	.word	0x080104f0
 800b594:	080106e9 	.word	0x080106e9
 800b598:	08010471 	.word	0x08010471

0800b59c <rshift>:
 800b59c:	6903      	ldr	r3, [r0, #16]
 800b59e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b5a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b5aa:	f100 0414 	add.w	r4, r0, #20
 800b5ae:	dd45      	ble.n	800b63c <rshift+0xa0>
 800b5b0:	f011 011f 	ands.w	r1, r1, #31
 800b5b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b5b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b5bc:	d10c      	bne.n	800b5d8 <rshift+0x3c>
 800b5be:	f100 0710 	add.w	r7, r0, #16
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	42b1      	cmp	r1, r6
 800b5c6:	d334      	bcc.n	800b632 <rshift+0x96>
 800b5c8:	1a9b      	subs	r3, r3, r2
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	1eea      	subs	r2, r5, #3
 800b5ce:	4296      	cmp	r6, r2
 800b5d0:	bf38      	it	cc
 800b5d2:	2300      	movcc	r3, #0
 800b5d4:	4423      	add	r3, r4
 800b5d6:	e015      	b.n	800b604 <rshift+0x68>
 800b5d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b5dc:	f1c1 0820 	rsb	r8, r1, #32
 800b5e0:	40cf      	lsrs	r7, r1
 800b5e2:	f105 0e04 	add.w	lr, r5, #4
 800b5e6:	46a1      	mov	r9, r4
 800b5e8:	4576      	cmp	r6, lr
 800b5ea:	46f4      	mov	ip, lr
 800b5ec:	d815      	bhi.n	800b61a <rshift+0x7e>
 800b5ee:	1a9a      	subs	r2, r3, r2
 800b5f0:	0092      	lsls	r2, r2, #2
 800b5f2:	3a04      	subs	r2, #4
 800b5f4:	3501      	adds	r5, #1
 800b5f6:	42ae      	cmp	r6, r5
 800b5f8:	bf38      	it	cc
 800b5fa:	2200      	movcc	r2, #0
 800b5fc:	18a3      	adds	r3, r4, r2
 800b5fe:	50a7      	str	r7, [r4, r2]
 800b600:	b107      	cbz	r7, 800b604 <rshift+0x68>
 800b602:	3304      	adds	r3, #4
 800b604:	1b1a      	subs	r2, r3, r4
 800b606:	42a3      	cmp	r3, r4
 800b608:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b60c:	bf08      	it	eq
 800b60e:	2300      	moveq	r3, #0
 800b610:	6102      	str	r2, [r0, #16]
 800b612:	bf08      	it	eq
 800b614:	6143      	streq	r3, [r0, #20]
 800b616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b61a:	f8dc c000 	ldr.w	ip, [ip]
 800b61e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b622:	ea4c 0707 	orr.w	r7, ip, r7
 800b626:	f849 7b04 	str.w	r7, [r9], #4
 800b62a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b62e:	40cf      	lsrs	r7, r1
 800b630:	e7da      	b.n	800b5e8 <rshift+0x4c>
 800b632:	f851 cb04 	ldr.w	ip, [r1], #4
 800b636:	f847 cf04 	str.w	ip, [r7, #4]!
 800b63a:	e7c3      	b.n	800b5c4 <rshift+0x28>
 800b63c:	4623      	mov	r3, r4
 800b63e:	e7e1      	b.n	800b604 <rshift+0x68>

0800b640 <__hexdig_fun>:
 800b640:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b644:	2b09      	cmp	r3, #9
 800b646:	d802      	bhi.n	800b64e <__hexdig_fun+0xe>
 800b648:	3820      	subs	r0, #32
 800b64a:	b2c0      	uxtb	r0, r0
 800b64c:	4770      	bx	lr
 800b64e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b652:	2b05      	cmp	r3, #5
 800b654:	d801      	bhi.n	800b65a <__hexdig_fun+0x1a>
 800b656:	3847      	subs	r0, #71	; 0x47
 800b658:	e7f7      	b.n	800b64a <__hexdig_fun+0xa>
 800b65a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b65e:	2b05      	cmp	r3, #5
 800b660:	d801      	bhi.n	800b666 <__hexdig_fun+0x26>
 800b662:	3827      	subs	r0, #39	; 0x27
 800b664:	e7f1      	b.n	800b64a <__hexdig_fun+0xa>
 800b666:	2000      	movs	r0, #0
 800b668:	4770      	bx	lr
	...

0800b66c <__gethex>:
 800b66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b670:	ed2d 8b02 	vpush	{d8}
 800b674:	b089      	sub	sp, #36	; 0x24
 800b676:	ee08 0a10 	vmov	s16, r0
 800b67a:	9304      	str	r3, [sp, #16]
 800b67c:	4bb4      	ldr	r3, [pc, #720]	; (800b950 <__gethex+0x2e4>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	9301      	str	r3, [sp, #4]
 800b682:	4618      	mov	r0, r3
 800b684:	468b      	mov	fp, r1
 800b686:	4690      	mov	r8, r2
 800b688:	f7f4 fdb4 	bl	80001f4 <strlen>
 800b68c:	9b01      	ldr	r3, [sp, #4]
 800b68e:	f8db 2000 	ldr.w	r2, [fp]
 800b692:	4403      	add	r3, r0
 800b694:	4682      	mov	sl, r0
 800b696:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b69a:	9305      	str	r3, [sp, #20]
 800b69c:	1c93      	adds	r3, r2, #2
 800b69e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b6a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b6a6:	32fe      	adds	r2, #254	; 0xfe
 800b6a8:	18d1      	adds	r1, r2, r3
 800b6aa:	461f      	mov	r7, r3
 800b6ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b6b0:	9100      	str	r1, [sp, #0]
 800b6b2:	2830      	cmp	r0, #48	; 0x30
 800b6b4:	d0f8      	beq.n	800b6a8 <__gethex+0x3c>
 800b6b6:	f7ff ffc3 	bl	800b640 <__hexdig_fun>
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d13a      	bne.n	800b736 <__gethex+0xca>
 800b6c0:	9901      	ldr	r1, [sp, #4]
 800b6c2:	4652      	mov	r2, sl
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	f001 fda3 	bl	800d210 <strncmp>
 800b6ca:	4605      	mov	r5, r0
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d168      	bne.n	800b7a2 <__gethex+0x136>
 800b6d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b6d4:	eb07 060a 	add.w	r6, r7, sl
 800b6d8:	f7ff ffb2 	bl	800b640 <__hexdig_fun>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d062      	beq.n	800b7a6 <__gethex+0x13a>
 800b6e0:	4633      	mov	r3, r6
 800b6e2:	7818      	ldrb	r0, [r3, #0]
 800b6e4:	2830      	cmp	r0, #48	; 0x30
 800b6e6:	461f      	mov	r7, r3
 800b6e8:	f103 0301 	add.w	r3, r3, #1
 800b6ec:	d0f9      	beq.n	800b6e2 <__gethex+0x76>
 800b6ee:	f7ff ffa7 	bl	800b640 <__hexdig_fun>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	fab0 f480 	clz	r4, r0
 800b6f8:	0964      	lsrs	r4, r4, #5
 800b6fa:	4635      	mov	r5, r6
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	463a      	mov	r2, r7
 800b700:	4616      	mov	r6, r2
 800b702:	3201      	adds	r2, #1
 800b704:	7830      	ldrb	r0, [r6, #0]
 800b706:	f7ff ff9b 	bl	800b640 <__hexdig_fun>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	d1f8      	bne.n	800b700 <__gethex+0x94>
 800b70e:	9901      	ldr	r1, [sp, #4]
 800b710:	4652      	mov	r2, sl
 800b712:	4630      	mov	r0, r6
 800b714:	f001 fd7c 	bl	800d210 <strncmp>
 800b718:	b980      	cbnz	r0, 800b73c <__gethex+0xd0>
 800b71a:	b94d      	cbnz	r5, 800b730 <__gethex+0xc4>
 800b71c:	eb06 050a 	add.w	r5, r6, sl
 800b720:	462a      	mov	r2, r5
 800b722:	4616      	mov	r6, r2
 800b724:	3201      	adds	r2, #1
 800b726:	7830      	ldrb	r0, [r6, #0]
 800b728:	f7ff ff8a 	bl	800b640 <__hexdig_fun>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d1f8      	bne.n	800b722 <__gethex+0xb6>
 800b730:	1bad      	subs	r5, r5, r6
 800b732:	00ad      	lsls	r5, r5, #2
 800b734:	e004      	b.n	800b740 <__gethex+0xd4>
 800b736:	2400      	movs	r4, #0
 800b738:	4625      	mov	r5, r4
 800b73a:	e7e0      	b.n	800b6fe <__gethex+0x92>
 800b73c:	2d00      	cmp	r5, #0
 800b73e:	d1f7      	bne.n	800b730 <__gethex+0xc4>
 800b740:	7833      	ldrb	r3, [r6, #0]
 800b742:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b746:	2b50      	cmp	r3, #80	; 0x50
 800b748:	d13b      	bne.n	800b7c2 <__gethex+0x156>
 800b74a:	7873      	ldrb	r3, [r6, #1]
 800b74c:	2b2b      	cmp	r3, #43	; 0x2b
 800b74e:	d02c      	beq.n	800b7aa <__gethex+0x13e>
 800b750:	2b2d      	cmp	r3, #45	; 0x2d
 800b752:	d02e      	beq.n	800b7b2 <__gethex+0x146>
 800b754:	1c71      	adds	r1, r6, #1
 800b756:	f04f 0900 	mov.w	r9, #0
 800b75a:	7808      	ldrb	r0, [r1, #0]
 800b75c:	f7ff ff70 	bl	800b640 <__hexdig_fun>
 800b760:	1e43      	subs	r3, r0, #1
 800b762:	b2db      	uxtb	r3, r3
 800b764:	2b18      	cmp	r3, #24
 800b766:	d82c      	bhi.n	800b7c2 <__gethex+0x156>
 800b768:	f1a0 0210 	sub.w	r2, r0, #16
 800b76c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b770:	f7ff ff66 	bl	800b640 <__hexdig_fun>
 800b774:	1e43      	subs	r3, r0, #1
 800b776:	b2db      	uxtb	r3, r3
 800b778:	2b18      	cmp	r3, #24
 800b77a:	d91d      	bls.n	800b7b8 <__gethex+0x14c>
 800b77c:	f1b9 0f00 	cmp.w	r9, #0
 800b780:	d000      	beq.n	800b784 <__gethex+0x118>
 800b782:	4252      	negs	r2, r2
 800b784:	4415      	add	r5, r2
 800b786:	f8cb 1000 	str.w	r1, [fp]
 800b78a:	b1e4      	cbz	r4, 800b7c6 <__gethex+0x15a>
 800b78c:	9b00      	ldr	r3, [sp, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	bf14      	ite	ne
 800b792:	2700      	movne	r7, #0
 800b794:	2706      	moveq	r7, #6
 800b796:	4638      	mov	r0, r7
 800b798:	b009      	add	sp, #36	; 0x24
 800b79a:	ecbd 8b02 	vpop	{d8}
 800b79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a2:	463e      	mov	r6, r7
 800b7a4:	4625      	mov	r5, r4
 800b7a6:	2401      	movs	r4, #1
 800b7a8:	e7ca      	b.n	800b740 <__gethex+0xd4>
 800b7aa:	f04f 0900 	mov.w	r9, #0
 800b7ae:	1cb1      	adds	r1, r6, #2
 800b7b0:	e7d3      	b.n	800b75a <__gethex+0xee>
 800b7b2:	f04f 0901 	mov.w	r9, #1
 800b7b6:	e7fa      	b.n	800b7ae <__gethex+0x142>
 800b7b8:	230a      	movs	r3, #10
 800b7ba:	fb03 0202 	mla	r2, r3, r2, r0
 800b7be:	3a10      	subs	r2, #16
 800b7c0:	e7d4      	b.n	800b76c <__gethex+0x100>
 800b7c2:	4631      	mov	r1, r6
 800b7c4:	e7df      	b.n	800b786 <__gethex+0x11a>
 800b7c6:	1bf3      	subs	r3, r6, r7
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	2b07      	cmp	r3, #7
 800b7ce:	dc0b      	bgt.n	800b7e8 <__gethex+0x17c>
 800b7d0:	ee18 0a10 	vmov	r0, s16
 800b7d4:	f000 fa82 	bl	800bcdc <_Balloc>
 800b7d8:	4604      	mov	r4, r0
 800b7da:	b940      	cbnz	r0, 800b7ee <__gethex+0x182>
 800b7dc:	4b5d      	ldr	r3, [pc, #372]	; (800b954 <__gethex+0x2e8>)
 800b7de:	4602      	mov	r2, r0
 800b7e0:	21de      	movs	r1, #222	; 0xde
 800b7e2:	485d      	ldr	r0, [pc, #372]	; (800b958 <__gethex+0x2ec>)
 800b7e4:	f001 fde4 	bl	800d3b0 <__assert_func>
 800b7e8:	3101      	adds	r1, #1
 800b7ea:	105b      	asrs	r3, r3, #1
 800b7ec:	e7ee      	b.n	800b7cc <__gethex+0x160>
 800b7ee:	f100 0914 	add.w	r9, r0, #20
 800b7f2:	f04f 0b00 	mov.w	fp, #0
 800b7f6:	f1ca 0301 	rsb	r3, sl, #1
 800b7fa:	f8cd 9008 	str.w	r9, [sp, #8]
 800b7fe:	f8cd b000 	str.w	fp, [sp]
 800b802:	9306      	str	r3, [sp, #24]
 800b804:	42b7      	cmp	r7, r6
 800b806:	d340      	bcc.n	800b88a <__gethex+0x21e>
 800b808:	9802      	ldr	r0, [sp, #8]
 800b80a:	9b00      	ldr	r3, [sp, #0]
 800b80c:	f840 3b04 	str.w	r3, [r0], #4
 800b810:	eba0 0009 	sub.w	r0, r0, r9
 800b814:	1080      	asrs	r0, r0, #2
 800b816:	0146      	lsls	r6, r0, #5
 800b818:	6120      	str	r0, [r4, #16]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 fb50 	bl	800bec0 <__hi0bits>
 800b820:	1a30      	subs	r0, r6, r0
 800b822:	f8d8 6000 	ldr.w	r6, [r8]
 800b826:	42b0      	cmp	r0, r6
 800b828:	dd63      	ble.n	800b8f2 <__gethex+0x286>
 800b82a:	1b87      	subs	r7, r0, r6
 800b82c:	4639      	mov	r1, r7
 800b82e:	4620      	mov	r0, r4
 800b830:	f000 fef4 	bl	800c61c <__any_on>
 800b834:	4682      	mov	sl, r0
 800b836:	b1a8      	cbz	r0, 800b864 <__gethex+0x1f8>
 800b838:	1e7b      	subs	r3, r7, #1
 800b83a:	1159      	asrs	r1, r3, #5
 800b83c:	f003 021f 	and.w	r2, r3, #31
 800b840:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b844:	f04f 0a01 	mov.w	sl, #1
 800b848:	fa0a f202 	lsl.w	r2, sl, r2
 800b84c:	420a      	tst	r2, r1
 800b84e:	d009      	beq.n	800b864 <__gethex+0x1f8>
 800b850:	4553      	cmp	r3, sl
 800b852:	dd05      	ble.n	800b860 <__gethex+0x1f4>
 800b854:	1eb9      	subs	r1, r7, #2
 800b856:	4620      	mov	r0, r4
 800b858:	f000 fee0 	bl	800c61c <__any_on>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d145      	bne.n	800b8ec <__gethex+0x280>
 800b860:	f04f 0a02 	mov.w	sl, #2
 800b864:	4639      	mov	r1, r7
 800b866:	4620      	mov	r0, r4
 800b868:	f7ff fe98 	bl	800b59c <rshift>
 800b86c:	443d      	add	r5, r7
 800b86e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b872:	42ab      	cmp	r3, r5
 800b874:	da4c      	bge.n	800b910 <__gethex+0x2a4>
 800b876:	ee18 0a10 	vmov	r0, s16
 800b87a:	4621      	mov	r1, r4
 800b87c:	f000 fa6e 	bl	800bd5c <_Bfree>
 800b880:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b882:	2300      	movs	r3, #0
 800b884:	6013      	str	r3, [r2, #0]
 800b886:	27a3      	movs	r7, #163	; 0xa3
 800b888:	e785      	b.n	800b796 <__gethex+0x12a>
 800b88a:	1e73      	subs	r3, r6, #1
 800b88c:	9a05      	ldr	r2, [sp, #20]
 800b88e:	9303      	str	r3, [sp, #12]
 800b890:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b894:	4293      	cmp	r3, r2
 800b896:	d019      	beq.n	800b8cc <__gethex+0x260>
 800b898:	f1bb 0f20 	cmp.w	fp, #32
 800b89c:	d107      	bne.n	800b8ae <__gethex+0x242>
 800b89e:	9b02      	ldr	r3, [sp, #8]
 800b8a0:	9a00      	ldr	r2, [sp, #0]
 800b8a2:	f843 2b04 	str.w	r2, [r3], #4
 800b8a6:	9302      	str	r3, [sp, #8]
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	469b      	mov	fp, r3
 800b8ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b8b2:	f7ff fec5 	bl	800b640 <__hexdig_fun>
 800b8b6:	9b00      	ldr	r3, [sp, #0]
 800b8b8:	f000 000f 	and.w	r0, r0, #15
 800b8bc:	fa00 f00b 	lsl.w	r0, r0, fp
 800b8c0:	4303      	orrs	r3, r0
 800b8c2:	9300      	str	r3, [sp, #0]
 800b8c4:	f10b 0b04 	add.w	fp, fp, #4
 800b8c8:	9b03      	ldr	r3, [sp, #12]
 800b8ca:	e00d      	b.n	800b8e8 <__gethex+0x27c>
 800b8cc:	9b03      	ldr	r3, [sp, #12]
 800b8ce:	9a06      	ldr	r2, [sp, #24]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	42bb      	cmp	r3, r7
 800b8d4:	d3e0      	bcc.n	800b898 <__gethex+0x22c>
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	9901      	ldr	r1, [sp, #4]
 800b8da:	9307      	str	r3, [sp, #28]
 800b8dc:	4652      	mov	r2, sl
 800b8de:	f001 fc97 	bl	800d210 <strncmp>
 800b8e2:	9b07      	ldr	r3, [sp, #28]
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d1d7      	bne.n	800b898 <__gethex+0x22c>
 800b8e8:	461e      	mov	r6, r3
 800b8ea:	e78b      	b.n	800b804 <__gethex+0x198>
 800b8ec:	f04f 0a03 	mov.w	sl, #3
 800b8f0:	e7b8      	b.n	800b864 <__gethex+0x1f8>
 800b8f2:	da0a      	bge.n	800b90a <__gethex+0x29e>
 800b8f4:	1a37      	subs	r7, r6, r0
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	ee18 0a10 	vmov	r0, s16
 800b8fc:	463a      	mov	r2, r7
 800b8fe:	f000 fc49 	bl	800c194 <__lshift>
 800b902:	1bed      	subs	r5, r5, r7
 800b904:	4604      	mov	r4, r0
 800b906:	f100 0914 	add.w	r9, r0, #20
 800b90a:	f04f 0a00 	mov.w	sl, #0
 800b90e:	e7ae      	b.n	800b86e <__gethex+0x202>
 800b910:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b914:	42a8      	cmp	r0, r5
 800b916:	dd72      	ble.n	800b9fe <__gethex+0x392>
 800b918:	1b45      	subs	r5, r0, r5
 800b91a:	42ae      	cmp	r6, r5
 800b91c:	dc36      	bgt.n	800b98c <__gethex+0x320>
 800b91e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b922:	2b02      	cmp	r3, #2
 800b924:	d02a      	beq.n	800b97c <__gethex+0x310>
 800b926:	2b03      	cmp	r3, #3
 800b928:	d02c      	beq.n	800b984 <__gethex+0x318>
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d11c      	bne.n	800b968 <__gethex+0x2fc>
 800b92e:	42ae      	cmp	r6, r5
 800b930:	d11a      	bne.n	800b968 <__gethex+0x2fc>
 800b932:	2e01      	cmp	r6, #1
 800b934:	d112      	bne.n	800b95c <__gethex+0x2f0>
 800b936:	9a04      	ldr	r2, [sp, #16]
 800b938:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b93c:	6013      	str	r3, [r2, #0]
 800b93e:	2301      	movs	r3, #1
 800b940:	6123      	str	r3, [r4, #16]
 800b942:	f8c9 3000 	str.w	r3, [r9]
 800b946:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b948:	2762      	movs	r7, #98	; 0x62
 800b94a:	601c      	str	r4, [r3, #0]
 800b94c:	e723      	b.n	800b796 <__gethex+0x12a>
 800b94e:	bf00      	nop
 800b950:	08010568 	.word	0x08010568
 800b954:	080104f0 	.word	0x080104f0
 800b958:	08010501 	.word	0x08010501
 800b95c:	1e71      	subs	r1, r6, #1
 800b95e:	4620      	mov	r0, r4
 800b960:	f000 fe5c 	bl	800c61c <__any_on>
 800b964:	2800      	cmp	r0, #0
 800b966:	d1e6      	bne.n	800b936 <__gethex+0x2ca>
 800b968:	ee18 0a10 	vmov	r0, s16
 800b96c:	4621      	mov	r1, r4
 800b96e:	f000 f9f5 	bl	800bd5c <_Bfree>
 800b972:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b974:	2300      	movs	r3, #0
 800b976:	6013      	str	r3, [r2, #0]
 800b978:	2750      	movs	r7, #80	; 0x50
 800b97a:	e70c      	b.n	800b796 <__gethex+0x12a>
 800b97c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1f2      	bne.n	800b968 <__gethex+0x2fc>
 800b982:	e7d8      	b.n	800b936 <__gethex+0x2ca>
 800b984:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b986:	2b00      	cmp	r3, #0
 800b988:	d1d5      	bne.n	800b936 <__gethex+0x2ca>
 800b98a:	e7ed      	b.n	800b968 <__gethex+0x2fc>
 800b98c:	1e6f      	subs	r7, r5, #1
 800b98e:	f1ba 0f00 	cmp.w	sl, #0
 800b992:	d131      	bne.n	800b9f8 <__gethex+0x38c>
 800b994:	b127      	cbz	r7, 800b9a0 <__gethex+0x334>
 800b996:	4639      	mov	r1, r7
 800b998:	4620      	mov	r0, r4
 800b99a:	f000 fe3f 	bl	800c61c <__any_on>
 800b99e:	4682      	mov	sl, r0
 800b9a0:	117b      	asrs	r3, r7, #5
 800b9a2:	2101      	movs	r1, #1
 800b9a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b9a8:	f007 071f 	and.w	r7, r7, #31
 800b9ac:	fa01 f707 	lsl.w	r7, r1, r7
 800b9b0:	421f      	tst	r7, r3
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	bf18      	it	ne
 800b9b8:	f04a 0a02 	orrne.w	sl, sl, #2
 800b9bc:	1b76      	subs	r6, r6, r5
 800b9be:	f7ff fded 	bl	800b59c <rshift>
 800b9c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b9c6:	2702      	movs	r7, #2
 800b9c8:	f1ba 0f00 	cmp.w	sl, #0
 800b9cc:	d048      	beq.n	800ba60 <__gethex+0x3f4>
 800b9ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d015      	beq.n	800ba02 <__gethex+0x396>
 800b9d6:	2b03      	cmp	r3, #3
 800b9d8:	d017      	beq.n	800ba0a <__gethex+0x39e>
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d109      	bne.n	800b9f2 <__gethex+0x386>
 800b9de:	f01a 0f02 	tst.w	sl, #2
 800b9e2:	d006      	beq.n	800b9f2 <__gethex+0x386>
 800b9e4:	f8d9 0000 	ldr.w	r0, [r9]
 800b9e8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b9ec:	f01a 0f01 	tst.w	sl, #1
 800b9f0:	d10e      	bne.n	800ba10 <__gethex+0x3a4>
 800b9f2:	f047 0710 	orr.w	r7, r7, #16
 800b9f6:	e033      	b.n	800ba60 <__gethex+0x3f4>
 800b9f8:	f04f 0a01 	mov.w	sl, #1
 800b9fc:	e7d0      	b.n	800b9a0 <__gethex+0x334>
 800b9fe:	2701      	movs	r7, #1
 800ba00:	e7e2      	b.n	800b9c8 <__gethex+0x35c>
 800ba02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba04:	f1c3 0301 	rsb	r3, r3, #1
 800ba08:	9315      	str	r3, [sp, #84]	; 0x54
 800ba0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d0f0      	beq.n	800b9f2 <__gethex+0x386>
 800ba10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba14:	f104 0314 	add.w	r3, r4, #20
 800ba18:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ba1c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ba20:	f04f 0c00 	mov.w	ip, #0
 800ba24:	4618      	mov	r0, r3
 800ba26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba2a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ba2e:	d01c      	beq.n	800ba6a <__gethex+0x3fe>
 800ba30:	3201      	adds	r2, #1
 800ba32:	6002      	str	r2, [r0, #0]
 800ba34:	2f02      	cmp	r7, #2
 800ba36:	f104 0314 	add.w	r3, r4, #20
 800ba3a:	d13f      	bne.n	800babc <__gethex+0x450>
 800ba3c:	f8d8 2000 	ldr.w	r2, [r8]
 800ba40:	3a01      	subs	r2, #1
 800ba42:	42b2      	cmp	r2, r6
 800ba44:	d10a      	bne.n	800ba5c <__gethex+0x3f0>
 800ba46:	1171      	asrs	r1, r6, #5
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba4e:	f006 061f 	and.w	r6, r6, #31
 800ba52:	fa02 f606 	lsl.w	r6, r2, r6
 800ba56:	421e      	tst	r6, r3
 800ba58:	bf18      	it	ne
 800ba5a:	4617      	movne	r7, r2
 800ba5c:	f047 0720 	orr.w	r7, r7, #32
 800ba60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba62:	601c      	str	r4, [r3, #0]
 800ba64:	9b04      	ldr	r3, [sp, #16]
 800ba66:	601d      	str	r5, [r3, #0]
 800ba68:	e695      	b.n	800b796 <__gethex+0x12a>
 800ba6a:	4299      	cmp	r1, r3
 800ba6c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ba70:	d8d8      	bhi.n	800ba24 <__gethex+0x3b8>
 800ba72:	68a3      	ldr	r3, [r4, #8]
 800ba74:	459b      	cmp	fp, r3
 800ba76:	db19      	blt.n	800baac <__gethex+0x440>
 800ba78:	6861      	ldr	r1, [r4, #4]
 800ba7a:	ee18 0a10 	vmov	r0, s16
 800ba7e:	3101      	adds	r1, #1
 800ba80:	f000 f92c 	bl	800bcdc <_Balloc>
 800ba84:	4681      	mov	r9, r0
 800ba86:	b918      	cbnz	r0, 800ba90 <__gethex+0x424>
 800ba88:	4b1a      	ldr	r3, [pc, #104]	; (800baf4 <__gethex+0x488>)
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	2184      	movs	r1, #132	; 0x84
 800ba8e:	e6a8      	b.n	800b7e2 <__gethex+0x176>
 800ba90:	6922      	ldr	r2, [r4, #16]
 800ba92:	3202      	adds	r2, #2
 800ba94:	f104 010c 	add.w	r1, r4, #12
 800ba98:	0092      	lsls	r2, r2, #2
 800ba9a:	300c      	adds	r0, #12
 800ba9c:	f7fd f90a 	bl	8008cb4 <memcpy>
 800baa0:	4621      	mov	r1, r4
 800baa2:	ee18 0a10 	vmov	r0, s16
 800baa6:	f000 f959 	bl	800bd5c <_Bfree>
 800baaa:	464c      	mov	r4, r9
 800baac:	6923      	ldr	r3, [r4, #16]
 800baae:	1c5a      	adds	r2, r3, #1
 800bab0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bab4:	6122      	str	r2, [r4, #16]
 800bab6:	2201      	movs	r2, #1
 800bab8:	615a      	str	r2, [r3, #20]
 800baba:	e7bb      	b.n	800ba34 <__gethex+0x3c8>
 800babc:	6922      	ldr	r2, [r4, #16]
 800babe:	455a      	cmp	r2, fp
 800bac0:	dd0b      	ble.n	800bada <__gethex+0x46e>
 800bac2:	2101      	movs	r1, #1
 800bac4:	4620      	mov	r0, r4
 800bac6:	f7ff fd69 	bl	800b59c <rshift>
 800baca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bace:	3501      	adds	r5, #1
 800bad0:	42ab      	cmp	r3, r5
 800bad2:	f6ff aed0 	blt.w	800b876 <__gethex+0x20a>
 800bad6:	2701      	movs	r7, #1
 800bad8:	e7c0      	b.n	800ba5c <__gethex+0x3f0>
 800bada:	f016 061f 	ands.w	r6, r6, #31
 800bade:	d0fa      	beq.n	800bad6 <__gethex+0x46a>
 800bae0:	4453      	add	r3, sl
 800bae2:	f1c6 0620 	rsb	r6, r6, #32
 800bae6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800baea:	f000 f9e9 	bl	800bec0 <__hi0bits>
 800baee:	42b0      	cmp	r0, r6
 800baf0:	dbe7      	blt.n	800bac2 <__gethex+0x456>
 800baf2:	e7f0      	b.n	800bad6 <__gethex+0x46a>
 800baf4:	080104f0 	.word	0x080104f0

0800baf8 <L_shift>:
 800baf8:	f1c2 0208 	rsb	r2, r2, #8
 800bafc:	0092      	lsls	r2, r2, #2
 800bafe:	b570      	push	{r4, r5, r6, lr}
 800bb00:	f1c2 0620 	rsb	r6, r2, #32
 800bb04:	6843      	ldr	r3, [r0, #4]
 800bb06:	6804      	ldr	r4, [r0, #0]
 800bb08:	fa03 f506 	lsl.w	r5, r3, r6
 800bb0c:	432c      	orrs	r4, r5
 800bb0e:	40d3      	lsrs	r3, r2
 800bb10:	6004      	str	r4, [r0, #0]
 800bb12:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb16:	4288      	cmp	r0, r1
 800bb18:	d3f4      	bcc.n	800bb04 <L_shift+0xc>
 800bb1a:	bd70      	pop	{r4, r5, r6, pc}

0800bb1c <__match>:
 800bb1c:	b530      	push	{r4, r5, lr}
 800bb1e:	6803      	ldr	r3, [r0, #0]
 800bb20:	3301      	adds	r3, #1
 800bb22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb26:	b914      	cbnz	r4, 800bb2e <__match+0x12>
 800bb28:	6003      	str	r3, [r0, #0]
 800bb2a:	2001      	movs	r0, #1
 800bb2c:	bd30      	pop	{r4, r5, pc}
 800bb2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb36:	2d19      	cmp	r5, #25
 800bb38:	bf98      	it	ls
 800bb3a:	3220      	addls	r2, #32
 800bb3c:	42a2      	cmp	r2, r4
 800bb3e:	d0f0      	beq.n	800bb22 <__match+0x6>
 800bb40:	2000      	movs	r0, #0
 800bb42:	e7f3      	b.n	800bb2c <__match+0x10>

0800bb44 <__hexnan>:
 800bb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	680b      	ldr	r3, [r1, #0]
 800bb4a:	115e      	asrs	r6, r3, #5
 800bb4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb50:	f013 031f 	ands.w	r3, r3, #31
 800bb54:	b087      	sub	sp, #28
 800bb56:	bf18      	it	ne
 800bb58:	3604      	addne	r6, #4
 800bb5a:	2500      	movs	r5, #0
 800bb5c:	1f37      	subs	r7, r6, #4
 800bb5e:	4690      	mov	r8, r2
 800bb60:	6802      	ldr	r2, [r0, #0]
 800bb62:	9301      	str	r3, [sp, #4]
 800bb64:	4682      	mov	sl, r0
 800bb66:	f846 5c04 	str.w	r5, [r6, #-4]
 800bb6a:	46b9      	mov	r9, r7
 800bb6c:	463c      	mov	r4, r7
 800bb6e:	9502      	str	r5, [sp, #8]
 800bb70:	46ab      	mov	fp, r5
 800bb72:	7851      	ldrb	r1, [r2, #1]
 800bb74:	1c53      	adds	r3, r2, #1
 800bb76:	9303      	str	r3, [sp, #12]
 800bb78:	b341      	cbz	r1, 800bbcc <__hexnan+0x88>
 800bb7a:	4608      	mov	r0, r1
 800bb7c:	9205      	str	r2, [sp, #20]
 800bb7e:	9104      	str	r1, [sp, #16]
 800bb80:	f7ff fd5e 	bl	800b640 <__hexdig_fun>
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d14f      	bne.n	800bc28 <__hexnan+0xe4>
 800bb88:	9904      	ldr	r1, [sp, #16]
 800bb8a:	9a05      	ldr	r2, [sp, #20]
 800bb8c:	2920      	cmp	r1, #32
 800bb8e:	d818      	bhi.n	800bbc2 <__hexnan+0x7e>
 800bb90:	9b02      	ldr	r3, [sp, #8]
 800bb92:	459b      	cmp	fp, r3
 800bb94:	dd13      	ble.n	800bbbe <__hexnan+0x7a>
 800bb96:	454c      	cmp	r4, r9
 800bb98:	d206      	bcs.n	800bba8 <__hexnan+0x64>
 800bb9a:	2d07      	cmp	r5, #7
 800bb9c:	dc04      	bgt.n	800bba8 <__hexnan+0x64>
 800bb9e:	462a      	mov	r2, r5
 800bba0:	4649      	mov	r1, r9
 800bba2:	4620      	mov	r0, r4
 800bba4:	f7ff ffa8 	bl	800baf8 <L_shift>
 800bba8:	4544      	cmp	r4, r8
 800bbaa:	d950      	bls.n	800bc4e <__hexnan+0x10a>
 800bbac:	2300      	movs	r3, #0
 800bbae:	f1a4 0904 	sub.w	r9, r4, #4
 800bbb2:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbb6:	f8cd b008 	str.w	fp, [sp, #8]
 800bbba:	464c      	mov	r4, r9
 800bbbc:	461d      	mov	r5, r3
 800bbbe:	9a03      	ldr	r2, [sp, #12]
 800bbc0:	e7d7      	b.n	800bb72 <__hexnan+0x2e>
 800bbc2:	2929      	cmp	r1, #41	; 0x29
 800bbc4:	d156      	bne.n	800bc74 <__hexnan+0x130>
 800bbc6:	3202      	adds	r2, #2
 800bbc8:	f8ca 2000 	str.w	r2, [sl]
 800bbcc:	f1bb 0f00 	cmp.w	fp, #0
 800bbd0:	d050      	beq.n	800bc74 <__hexnan+0x130>
 800bbd2:	454c      	cmp	r4, r9
 800bbd4:	d206      	bcs.n	800bbe4 <__hexnan+0xa0>
 800bbd6:	2d07      	cmp	r5, #7
 800bbd8:	dc04      	bgt.n	800bbe4 <__hexnan+0xa0>
 800bbda:	462a      	mov	r2, r5
 800bbdc:	4649      	mov	r1, r9
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f7ff ff8a 	bl	800baf8 <L_shift>
 800bbe4:	4544      	cmp	r4, r8
 800bbe6:	d934      	bls.n	800bc52 <__hexnan+0x10e>
 800bbe8:	f1a8 0204 	sub.w	r2, r8, #4
 800bbec:	4623      	mov	r3, r4
 800bbee:	f853 1b04 	ldr.w	r1, [r3], #4
 800bbf2:	f842 1f04 	str.w	r1, [r2, #4]!
 800bbf6:	429f      	cmp	r7, r3
 800bbf8:	d2f9      	bcs.n	800bbee <__hexnan+0xaa>
 800bbfa:	1b3b      	subs	r3, r7, r4
 800bbfc:	f023 0303 	bic.w	r3, r3, #3
 800bc00:	3304      	adds	r3, #4
 800bc02:	3401      	adds	r4, #1
 800bc04:	3e03      	subs	r6, #3
 800bc06:	42b4      	cmp	r4, r6
 800bc08:	bf88      	it	hi
 800bc0a:	2304      	movhi	r3, #4
 800bc0c:	4443      	add	r3, r8
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f843 2b04 	str.w	r2, [r3], #4
 800bc14:	429f      	cmp	r7, r3
 800bc16:	d2fb      	bcs.n	800bc10 <__hexnan+0xcc>
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	b91b      	cbnz	r3, 800bc24 <__hexnan+0xe0>
 800bc1c:	4547      	cmp	r7, r8
 800bc1e:	d127      	bne.n	800bc70 <__hexnan+0x12c>
 800bc20:	2301      	movs	r3, #1
 800bc22:	603b      	str	r3, [r7, #0]
 800bc24:	2005      	movs	r0, #5
 800bc26:	e026      	b.n	800bc76 <__hexnan+0x132>
 800bc28:	3501      	adds	r5, #1
 800bc2a:	2d08      	cmp	r5, #8
 800bc2c:	f10b 0b01 	add.w	fp, fp, #1
 800bc30:	dd06      	ble.n	800bc40 <__hexnan+0xfc>
 800bc32:	4544      	cmp	r4, r8
 800bc34:	d9c3      	bls.n	800bbbe <__hexnan+0x7a>
 800bc36:	2300      	movs	r3, #0
 800bc38:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc3c:	2501      	movs	r5, #1
 800bc3e:	3c04      	subs	r4, #4
 800bc40:	6822      	ldr	r2, [r4, #0]
 800bc42:	f000 000f 	and.w	r0, r0, #15
 800bc46:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bc4a:	6022      	str	r2, [r4, #0]
 800bc4c:	e7b7      	b.n	800bbbe <__hexnan+0x7a>
 800bc4e:	2508      	movs	r5, #8
 800bc50:	e7b5      	b.n	800bbbe <__hexnan+0x7a>
 800bc52:	9b01      	ldr	r3, [sp, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d0df      	beq.n	800bc18 <__hexnan+0xd4>
 800bc58:	f04f 32ff 	mov.w	r2, #4294967295
 800bc5c:	f1c3 0320 	rsb	r3, r3, #32
 800bc60:	fa22 f303 	lsr.w	r3, r2, r3
 800bc64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bc68:	401a      	ands	r2, r3
 800bc6a:	f846 2c04 	str.w	r2, [r6, #-4]
 800bc6e:	e7d3      	b.n	800bc18 <__hexnan+0xd4>
 800bc70:	3f04      	subs	r7, #4
 800bc72:	e7d1      	b.n	800bc18 <__hexnan+0xd4>
 800bc74:	2004      	movs	r0, #4
 800bc76:	b007      	add	sp, #28
 800bc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc7c <_localeconv_r>:
 800bc7c:	4800      	ldr	r0, [pc, #0]	; (800bc80 <_localeconv_r+0x4>)
 800bc7e:	4770      	bx	lr
 800bc80:	20000178 	.word	0x20000178

0800bc84 <_lseek_r>:
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	4d07      	ldr	r5, [pc, #28]	; (800bca4 <_lseek_r+0x20>)
 800bc88:	4604      	mov	r4, r0
 800bc8a:	4608      	mov	r0, r1
 800bc8c:	4611      	mov	r1, r2
 800bc8e:	2200      	movs	r2, #0
 800bc90:	602a      	str	r2, [r5, #0]
 800bc92:	461a      	mov	r2, r3
 800bc94:	f7f7 f960 	bl	8002f58 <_lseek>
 800bc98:	1c43      	adds	r3, r0, #1
 800bc9a:	d102      	bne.n	800bca2 <_lseek_r+0x1e>
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	b103      	cbz	r3, 800bca2 <_lseek_r+0x1e>
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	bd38      	pop	{r3, r4, r5, pc}
 800bca4:	20013ad8 	.word	0x20013ad8

0800bca8 <malloc>:
 800bca8:	4b02      	ldr	r3, [pc, #8]	; (800bcb4 <malloc+0xc>)
 800bcaa:	4601      	mov	r1, r0
 800bcac:	6818      	ldr	r0, [r3, #0]
 800bcae:	f000 bd59 	b.w	800c764 <_malloc_r>
 800bcb2:	bf00      	nop
 800bcb4:	20000020 	.word	0x20000020

0800bcb8 <__ascii_mbtowc>:
 800bcb8:	b082      	sub	sp, #8
 800bcba:	b901      	cbnz	r1, 800bcbe <__ascii_mbtowc+0x6>
 800bcbc:	a901      	add	r1, sp, #4
 800bcbe:	b142      	cbz	r2, 800bcd2 <__ascii_mbtowc+0x1a>
 800bcc0:	b14b      	cbz	r3, 800bcd6 <__ascii_mbtowc+0x1e>
 800bcc2:	7813      	ldrb	r3, [r2, #0]
 800bcc4:	600b      	str	r3, [r1, #0]
 800bcc6:	7812      	ldrb	r2, [r2, #0]
 800bcc8:	1e10      	subs	r0, r2, #0
 800bcca:	bf18      	it	ne
 800bccc:	2001      	movne	r0, #1
 800bcce:	b002      	add	sp, #8
 800bcd0:	4770      	bx	lr
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	e7fb      	b.n	800bcce <__ascii_mbtowc+0x16>
 800bcd6:	f06f 0001 	mvn.w	r0, #1
 800bcda:	e7f8      	b.n	800bcce <__ascii_mbtowc+0x16>

0800bcdc <_Balloc>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bce0:	4604      	mov	r4, r0
 800bce2:	460d      	mov	r5, r1
 800bce4:	b976      	cbnz	r6, 800bd04 <_Balloc+0x28>
 800bce6:	2010      	movs	r0, #16
 800bce8:	f7ff ffde 	bl	800bca8 <malloc>
 800bcec:	4602      	mov	r2, r0
 800bcee:	6260      	str	r0, [r4, #36]	; 0x24
 800bcf0:	b920      	cbnz	r0, 800bcfc <_Balloc+0x20>
 800bcf2:	4b18      	ldr	r3, [pc, #96]	; (800bd54 <_Balloc+0x78>)
 800bcf4:	4818      	ldr	r0, [pc, #96]	; (800bd58 <_Balloc+0x7c>)
 800bcf6:	2166      	movs	r1, #102	; 0x66
 800bcf8:	f001 fb5a 	bl	800d3b0 <__assert_func>
 800bcfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd00:	6006      	str	r6, [r0, #0]
 800bd02:	60c6      	str	r6, [r0, #12]
 800bd04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd06:	68f3      	ldr	r3, [r6, #12]
 800bd08:	b183      	cbz	r3, 800bd2c <_Balloc+0x50>
 800bd0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd12:	b9b8      	cbnz	r0, 800bd44 <_Balloc+0x68>
 800bd14:	2101      	movs	r1, #1
 800bd16:	fa01 f605 	lsl.w	r6, r1, r5
 800bd1a:	1d72      	adds	r2, r6, #5
 800bd1c:	0092      	lsls	r2, r2, #2
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f000 fc9d 	bl	800c65e <_calloc_r>
 800bd24:	b160      	cbz	r0, 800bd40 <_Balloc+0x64>
 800bd26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd2a:	e00e      	b.n	800bd4a <_Balloc+0x6e>
 800bd2c:	2221      	movs	r2, #33	; 0x21
 800bd2e:	2104      	movs	r1, #4
 800bd30:	4620      	mov	r0, r4
 800bd32:	f000 fc94 	bl	800c65e <_calloc_r>
 800bd36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd38:	60f0      	str	r0, [r6, #12]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d1e4      	bne.n	800bd0a <_Balloc+0x2e>
 800bd40:	2000      	movs	r0, #0
 800bd42:	bd70      	pop	{r4, r5, r6, pc}
 800bd44:	6802      	ldr	r2, [r0, #0]
 800bd46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd50:	e7f7      	b.n	800bd42 <_Balloc+0x66>
 800bd52:	bf00      	nop
 800bd54:	0801047e 	.word	0x0801047e
 800bd58:	0801057c 	.word	0x0801057c

0800bd5c <_Bfree>:
 800bd5c:	b570      	push	{r4, r5, r6, lr}
 800bd5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd60:	4605      	mov	r5, r0
 800bd62:	460c      	mov	r4, r1
 800bd64:	b976      	cbnz	r6, 800bd84 <_Bfree+0x28>
 800bd66:	2010      	movs	r0, #16
 800bd68:	f7ff ff9e 	bl	800bca8 <malloc>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	6268      	str	r0, [r5, #36]	; 0x24
 800bd70:	b920      	cbnz	r0, 800bd7c <_Bfree+0x20>
 800bd72:	4b09      	ldr	r3, [pc, #36]	; (800bd98 <_Bfree+0x3c>)
 800bd74:	4809      	ldr	r0, [pc, #36]	; (800bd9c <_Bfree+0x40>)
 800bd76:	218a      	movs	r1, #138	; 0x8a
 800bd78:	f001 fb1a 	bl	800d3b0 <__assert_func>
 800bd7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd80:	6006      	str	r6, [r0, #0]
 800bd82:	60c6      	str	r6, [r0, #12]
 800bd84:	b13c      	cbz	r4, 800bd96 <_Bfree+0x3a>
 800bd86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd88:	6862      	ldr	r2, [r4, #4]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd90:	6021      	str	r1, [r4, #0]
 800bd92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd96:	bd70      	pop	{r4, r5, r6, pc}
 800bd98:	0801047e 	.word	0x0801047e
 800bd9c:	0801057c 	.word	0x0801057c

0800bda0 <__multadd>:
 800bda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda4:	690d      	ldr	r5, [r1, #16]
 800bda6:	4607      	mov	r7, r0
 800bda8:	460c      	mov	r4, r1
 800bdaa:	461e      	mov	r6, r3
 800bdac:	f101 0c14 	add.w	ip, r1, #20
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	f8dc 3000 	ldr.w	r3, [ip]
 800bdb6:	b299      	uxth	r1, r3
 800bdb8:	fb02 6101 	mla	r1, r2, r1, r6
 800bdbc:	0c1e      	lsrs	r6, r3, #16
 800bdbe:	0c0b      	lsrs	r3, r1, #16
 800bdc0:	fb02 3306 	mla	r3, r2, r6, r3
 800bdc4:	b289      	uxth	r1, r1
 800bdc6:	3001      	adds	r0, #1
 800bdc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bdcc:	4285      	cmp	r5, r0
 800bdce:	f84c 1b04 	str.w	r1, [ip], #4
 800bdd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdd6:	dcec      	bgt.n	800bdb2 <__multadd+0x12>
 800bdd8:	b30e      	cbz	r6, 800be1e <__multadd+0x7e>
 800bdda:	68a3      	ldr	r3, [r4, #8]
 800bddc:	42ab      	cmp	r3, r5
 800bdde:	dc19      	bgt.n	800be14 <__multadd+0x74>
 800bde0:	6861      	ldr	r1, [r4, #4]
 800bde2:	4638      	mov	r0, r7
 800bde4:	3101      	adds	r1, #1
 800bde6:	f7ff ff79 	bl	800bcdc <_Balloc>
 800bdea:	4680      	mov	r8, r0
 800bdec:	b928      	cbnz	r0, 800bdfa <__multadd+0x5a>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	4b0c      	ldr	r3, [pc, #48]	; (800be24 <__multadd+0x84>)
 800bdf2:	480d      	ldr	r0, [pc, #52]	; (800be28 <__multadd+0x88>)
 800bdf4:	21b5      	movs	r1, #181	; 0xb5
 800bdf6:	f001 fadb 	bl	800d3b0 <__assert_func>
 800bdfa:	6922      	ldr	r2, [r4, #16]
 800bdfc:	3202      	adds	r2, #2
 800bdfe:	f104 010c 	add.w	r1, r4, #12
 800be02:	0092      	lsls	r2, r2, #2
 800be04:	300c      	adds	r0, #12
 800be06:	f7fc ff55 	bl	8008cb4 <memcpy>
 800be0a:	4621      	mov	r1, r4
 800be0c:	4638      	mov	r0, r7
 800be0e:	f7ff ffa5 	bl	800bd5c <_Bfree>
 800be12:	4644      	mov	r4, r8
 800be14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be18:	3501      	adds	r5, #1
 800be1a:	615e      	str	r6, [r3, #20]
 800be1c:	6125      	str	r5, [r4, #16]
 800be1e:	4620      	mov	r0, r4
 800be20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be24:	080104f0 	.word	0x080104f0
 800be28:	0801057c 	.word	0x0801057c

0800be2c <__s2b>:
 800be2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be30:	460c      	mov	r4, r1
 800be32:	4615      	mov	r5, r2
 800be34:	461f      	mov	r7, r3
 800be36:	2209      	movs	r2, #9
 800be38:	3308      	adds	r3, #8
 800be3a:	4606      	mov	r6, r0
 800be3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800be40:	2100      	movs	r1, #0
 800be42:	2201      	movs	r2, #1
 800be44:	429a      	cmp	r2, r3
 800be46:	db09      	blt.n	800be5c <__s2b+0x30>
 800be48:	4630      	mov	r0, r6
 800be4a:	f7ff ff47 	bl	800bcdc <_Balloc>
 800be4e:	b940      	cbnz	r0, 800be62 <__s2b+0x36>
 800be50:	4602      	mov	r2, r0
 800be52:	4b19      	ldr	r3, [pc, #100]	; (800beb8 <__s2b+0x8c>)
 800be54:	4819      	ldr	r0, [pc, #100]	; (800bebc <__s2b+0x90>)
 800be56:	21ce      	movs	r1, #206	; 0xce
 800be58:	f001 faaa 	bl	800d3b0 <__assert_func>
 800be5c:	0052      	lsls	r2, r2, #1
 800be5e:	3101      	adds	r1, #1
 800be60:	e7f0      	b.n	800be44 <__s2b+0x18>
 800be62:	9b08      	ldr	r3, [sp, #32]
 800be64:	6143      	str	r3, [r0, #20]
 800be66:	2d09      	cmp	r5, #9
 800be68:	f04f 0301 	mov.w	r3, #1
 800be6c:	6103      	str	r3, [r0, #16]
 800be6e:	dd16      	ble.n	800be9e <__s2b+0x72>
 800be70:	f104 0909 	add.w	r9, r4, #9
 800be74:	46c8      	mov	r8, r9
 800be76:	442c      	add	r4, r5
 800be78:	f818 3b01 	ldrb.w	r3, [r8], #1
 800be7c:	4601      	mov	r1, r0
 800be7e:	3b30      	subs	r3, #48	; 0x30
 800be80:	220a      	movs	r2, #10
 800be82:	4630      	mov	r0, r6
 800be84:	f7ff ff8c 	bl	800bda0 <__multadd>
 800be88:	45a0      	cmp	r8, r4
 800be8a:	d1f5      	bne.n	800be78 <__s2b+0x4c>
 800be8c:	f1a5 0408 	sub.w	r4, r5, #8
 800be90:	444c      	add	r4, r9
 800be92:	1b2d      	subs	r5, r5, r4
 800be94:	1963      	adds	r3, r4, r5
 800be96:	42bb      	cmp	r3, r7
 800be98:	db04      	blt.n	800bea4 <__s2b+0x78>
 800be9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be9e:	340a      	adds	r4, #10
 800bea0:	2509      	movs	r5, #9
 800bea2:	e7f6      	b.n	800be92 <__s2b+0x66>
 800bea4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bea8:	4601      	mov	r1, r0
 800beaa:	3b30      	subs	r3, #48	; 0x30
 800beac:	220a      	movs	r2, #10
 800beae:	4630      	mov	r0, r6
 800beb0:	f7ff ff76 	bl	800bda0 <__multadd>
 800beb4:	e7ee      	b.n	800be94 <__s2b+0x68>
 800beb6:	bf00      	nop
 800beb8:	080104f0 	.word	0x080104f0
 800bebc:	0801057c 	.word	0x0801057c

0800bec0 <__hi0bits>:
 800bec0:	0c03      	lsrs	r3, r0, #16
 800bec2:	041b      	lsls	r3, r3, #16
 800bec4:	b9d3      	cbnz	r3, 800befc <__hi0bits+0x3c>
 800bec6:	0400      	lsls	r0, r0, #16
 800bec8:	2310      	movs	r3, #16
 800beca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bece:	bf04      	itt	eq
 800bed0:	0200      	lsleq	r0, r0, #8
 800bed2:	3308      	addeq	r3, #8
 800bed4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bed8:	bf04      	itt	eq
 800beda:	0100      	lsleq	r0, r0, #4
 800bedc:	3304      	addeq	r3, #4
 800bede:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bee2:	bf04      	itt	eq
 800bee4:	0080      	lsleq	r0, r0, #2
 800bee6:	3302      	addeq	r3, #2
 800bee8:	2800      	cmp	r0, #0
 800beea:	db05      	blt.n	800bef8 <__hi0bits+0x38>
 800beec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bef0:	f103 0301 	add.w	r3, r3, #1
 800bef4:	bf08      	it	eq
 800bef6:	2320      	moveq	r3, #32
 800bef8:	4618      	mov	r0, r3
 800befa:	4770      	bx	lr
 800befc:	2300      	movs	r3, #0
 800befe:	e7e4      	b.n	800beca <__hi0bits+0xa>

0800bf00 <__lo0bits>:
 800bf00:	6803      	ldr	r3, [r0, #0]
 800bf02:	f013 0207 	ands.w	r2, r3, #7
 800bf06:	4601      	mov	r1, r0
 800bf08:	d00b      	beq.n	800bf22 <__lo0bits+0x22>
 800bf0a:	07da      	lsls	r2, r3, #31
 800bf0c:	d423      	bmi.n	800bf56 <__lo0bits+0x56>
 800bf0e:	0798      	lsls	r0, r3, #30
 800bf10:	bf49      	itett	mi
 800bf12:	085b      	lsrmi	r3, r3, #1
 800bf14:	089b      	lsrpl	r3, r3, #2
 800bf16:	2001      	movmi	r0, #1
 800bf18:	600b      	strmi	r3, [r1, #0]
 800bf1a:	bf5c      	itt	pl
 800bf1c:	600b      	strpl	r3, [r1, #0]
 800bf1e:	2002      	movpl	r0, #2
 800bf20:	4770      	bx	lr
 800bf22:	b298      	uxth	r0, r3
 800bf24:	b9a8      	cbnz	r0, 800bf52 <__lo0bits+0x52>
 800bf26:	0c1b      	lsrs	r3, r3, #16
 800bf28:	2010      	movs	r0, #16
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	b90a      	cbnz	r2, 800bf32 <__lo0bits+0x32>
 800bf2e:	3008      	adds	r0, #8
 800bf30:	0a1b      	lsrs	r3, r3, #8
 800bf32:	071a      	lsls	r2, r3, #28
 800bf34:	bf04      	itt	eq
 800bf36:	091b      	lsreq	r3, r3, #4
 800bf38:	3004      	addeq	r0, #4
 800bf3a:	079a      	lsls	r2, r3, #30
 800bf3c:	bf04      	itt	eq
 800bf3e:	089b      	lsreq	r3, r3, #2
 800bf40:	3002      	addeq	r0, #2
 800bf42:	07da      	lsls	r2, r3, #31
 800bf44:	d403      	bmi.n	800bf4e <__lo0bits+0x4e>
 800bf46:	085b      	lsrs	r3, r3, #1
 800bf48:	f100 0001 	add.w	r0, r0, #1
 800bf4c:	d005      	beq.n	800bf5a <__lo0bits+0x5a>
 800bf4e:	600b      	str	r3, [r1, #0]
 800bf50:	4770      	bx	lr
 800bf52:	4610      	mov	r0, r2
 800bf54:	e7e9      	b.n	800bf2a <__lo0bits+0x2a>
 800bf56:	2000      	movs	r0, #0
 800bf58:	4770      	bx	lr
 800bf5a:	2020      	movs	r0, #32
 800bf5c:	4770      	bx	lr
	...

0800bf60 <__i2b>:
 800bf60:	b510      	push	{r4, lr}
 800bf62:	460c      	mov	r4, r1
 800bf64:	2101      	movs	r1, #1
 800bf66:	f7ff feb9 	bl	800bcdc <_Balloc>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	b928      	cbnz	r0, 800bf7a <__i2b+0x1a>
 800bf6e:	4b05      	ldr	r3, [pc, #20]	; (800bf84 <__i2b+0x24>)
 800bf70:	4805      	ldr	r0, [pc, #20]	; (800bf88 <__i2b+0x28>)
 800bf72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bf76:	f001 fa1b 	bl	800d3b0 <__assert_func>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	6144      	str	r4, [r0, #20]
 800bf7e:	6103      	str	r3, [r0, #16]
 800bf80:	bd10      	pop	{r4, pc}
 800bf82:	bf00      	nop
 800bf84:	080104f0 	.word	0x080104f0
 800bf88:	0801057c 	.word	0x0801057c

0800bf8c <__multiply>:
 800bf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf90:	4691      	mov	r9, r2
 800bf92:	690a      	ldr	r2, [r1, #16]
 800bf94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	bfb8      	it	lt
 800bf9c:	460b      	movlt	r3, r1
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	bfbc      	itt	lt
 800bfa2:	464c      	movlt	r4, r9
 800bfa4:	4699      	movlt	r9, r3
 800bfa6:	6927      	ldr	r7, [r4, #16]
 800bfa8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bfac:	68a3      	ldr	r3, [r4, #8]
 800bfae:	6861      	ldr	r1, [r4, #4]
 800bfb0:	eb07 060a 	add.w	r6, r7, sl
 800bfb4:	42b3      	cmp	r3, r6
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	bfb8      	it	lt
 800bfba:	3101      	addlt	r1, #1
 800bfbc:	f7ff fe8e 	bl	800bcdc <_Balloc>
 800bfc0:	b930      	cbnz	r0, 800bfd0 <__multiply+0x44>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	4b44      	ldr	r3, [pc, #272]	; (800c0d8 <__multiply+0x14c>)
 800bfc6:	4845      	ldr	r0, [pc, #276]	; (800c0dc <__multiply+0x150>)
 800bfc8:	f240 115d 	movw	r1, #349	; 0x15d
 800bfcc:	f001 f9f0 	bl	800d3b0 <__assert_func>
 800bfd0:	f100 0514 	add.w	r5, r0, #20
 800bfd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bfd8:	462b      	mov	r3, r5
 800bfda:	2200      	movs	r2, #0
 800bfdc:	4543      	cmp	r3, r8
 800bfde:	d321      	bcc.n	800c024 <__multiply+0x98>
 800bfe0:	f104 0314 	add.w	r3, r4, #20
 800bfe4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bfe8:	f109 0314 	add.w	r3, r9, #20
 800bfec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bff0:	9202      	str	r2, [sp, #8]
 800bff2:	1b3a      	subs	r2, r7, r4
 800bff4:	3a15      	subs	r2, #21
 800bff6:	f022 0203 	bic.w	r2, r2, #3
 800bffa:	3204      	adds	r2, #4
 800bffc:	f104 0115 	add.w	r1, r4, #21
 800c000:	428f      	cmp	r7, r1
 800c002:	bf38      	it	cc
 800c004:	2204      	movcc	r2, #4
 800c006:	9201      	str	r2, [sp, #4]
 800c008:	9a02      	ldr	r2, [sp, #8]
 800c00a:	9303      	str	r3, [sp, #12]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d80c      	bhi.n	800c02a <__multiply+0x9e>
 800c010:	2e00      	cmp	r6, #0
 800c012:	dd03      	ble.n	800c01c <__multiply+0x90>
 800c014:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d05a      	beq.n	800c0d2 <__multiply+0x146>
 800c01c:	6106      	str	r6, [r0, #16]
 800c01e:	b005      	add	sp, #20
 800c020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c024:	f843 2b04 	str.w	r2, [r3], #4
 800c028:	e7d8      	b.n	800bfdc <__multiply+0x50>
 800c02a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c02e:	f1ba 0f00 	cmp.w	sl, #0
 800c032:	d024      	beq.n	800c07e <__multiply+0xf2>
 800c034:	f104 0e14 	add.w	lr, r4, #20
 800c038:	46a9      	mov	r9, r5
 800c03a:	f04f 0c00 	mov.w	ip, #0
 800c03e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c042:	f8d9 1000 	ldr.w	r1, [r9]
 800c046:	fa1f fb82 	uxth.w	fp, r2
 800c04a:	b289      	uxth	r1, r1
 800c04c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c050:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c054:	f8d9 2000 	ldr.w	r2, [r9]
 800c058:	4461      	add	r1, ip
 800c05a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c05e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c062:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c066:	b289      	uxth	r1, r1
 800c068:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c06c:	4577      	cmp	r7, lr
 800c06e:	f849 1b04 	str.w	r1, [r9], #4
 800c072:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c076:	d8e2      	bhi.n	800c03e <__multiply+0xb2>
 800c078:	9a01      	ldr	r2, [sp, #4]
 800c07a:	f845 c002 	str.w	ip, [r5, r2]
 800c07e:	9a03      	ldr	r2, [sp, #12]
 800c080:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c084:	3304      	adds	r3, #4
 800c086:	f1b9 0f00 	cmp.w	r9, #0
 800c08a:	d020      	beq.n	800c0ce <__multiply+0x142>
 800c08c:	6829      	ldr	r1, [r5, #0]
 800c08e:	f104 0c14 	add.w	ip, r4, #20
 800c092:	46ae      	mov	lr, r5
 800c094:	f04f 0a00 	mov.w	sl, #0
 800c098:	f8bc b000 	ldrh.w	fp, [ip]
 800c09c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c0a0:	fb09 220b 	mla	r2, r9, fp, r2
 800c0a4:	4492      	add	sl, r2
 800c0a6:	b289      	uxth	r1, r1
 800c0a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c0ac:	f84e 1b04 	str.w	r1, [lr], #4
 800c0b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c0b4:	f8be 1000 	ldrh.w	r1, [lr]
 800c0b8:	0c12      	lsrs	r2, r2, #16
 800c0ba:	fb09 1102 	mla	r1, r9, r2, r1
 800c0be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c0c2:	4567      	cmp	r7, ip
 800c0c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c0c8:	d8e6      	bhi.n	800c098 <__multiply+0x10c>
 800c0ca:	9a01      	ldr	r2, [sp, #4]
 800c0cc:	50a9      	str	r1, [r5, r2]
 800c0ce:	3504      	adds	r5, #4
 800c0d0:	e79a      	b.n	800c008 <__multiply+0x7c>
 800c0d2:	3e01      	subs	r6, #1
 800c0d4:	e79c      	b.n	800c010 <__multiply+0x84>
 800c0d6:	bf00      	nop
 800c0d8:	080104f0 	.word	0x080104f0
 800c0dc:	0801057c 	.word	0x0801057c

0800c0e0 <__pow5mult>:
 800c0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0e4:	4615      	mov	r5, r2
 800c0e6:	f012 0203 	ands.w	r2, r2, #3
 800c0ea:	4606      	mov	r6, r0
 800c0ec:	460f      	mov	r7, r1
 800c0ee:	d007      	beq.n	800c100 <__pow5mult+0x20>
 800c0f0:	4c25      	ldr	r4, [pc, #148]	; (800c188 <__pow5mult+0xa8>)
 800c0f2:	3a01      	subs	r2, #1
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0fa:	f7ff fe51 	bl	800bda0 <__multadd>
 800c0fe:	4607      	mov	r7, r0
 800c100:	10ad      	asrs	r5, r5, #2
 800c102:	d03d      	beq.n	800c180 <__pow5mult+0xa0>
 800c104:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c106:	b97c      	cbnz	r4, 800c128 <__pow5mult+0x48>
 800c108:	2010      	movs	r0, #16
 800c10a:	f7ff fdcd 	bl	800bca8 <malloc>
 800c10e:	4602      	mov	r2, r0
 800c110:	6270      	str	r0, [r6, #36]	; 0x24
 800c112:	b928      	cbnz	r0, 800c120 <__pow5mult+0x40>
 800c114:	4b1d      	ldr	r3, [pc, #116]	; (800c18c <__pow5mult+0xac>)
 800c116:	481e      	ldr	r0, [pc, #120]	; (800c190 <__pow5mult+0xb0>)
 800c118:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c11c:	f001 f948 	bl	800d3b0 <__assert_func>
 800c120:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c124:	6004      	str	r4, [r0, #0]
 800c126:	60c4      	str	r4, [r0, #12]
 800c128:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c12c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c130:	b94c      	cbnz	r4, 800c146 <__pow5mult+0x66>
 800c132:	f240 2171 	movw	r1, #625	; 0x271
 800c136:	4630      	mov	r0, r6
 800c138:	f7ff ff12 	bl	800bf60 <__i2b>
 800c13c:	2300      	movs	r3, #0
 800c13e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c142:	4604      	mov	r4, r0
 800c144:	6003      	str	r3, [r0, #0]
 800c146:	f04f 0900 	mov.w	r9, #0
 800c14a:	07eb      	lsls	r3, r5, #31
 800c14c:	d50a      	bpl.n	800c164 <__pow5mult+0x84>
 800c14e:	4639      	mov	r1, r7
 800c150:	4622      	mov	r2, r4
 800c152:	4630      	mov	r0, r6
 800c154:	f7ff ff1a 	bl	800bf8c <__multiply>
 800c158:	4639      	mov	r1, r7
 800c15a:	4680      	mov	r8, r0
 800c15c:	4630      	mov	r0, r6
 800c15e:	f7ff fdfd 	bl	800bd5c <_Bfree>
 800c162:	4647      	mov	r7, r8
 800c164:	106d      	asrs	r5, r5, #1
 800c166:	d00b      	beq.n	800c180 <__pow5mult+0xa0>
 800c168:	6820      	ldr	r0, [r4, #0]
 800c16a:	b938      	cbnz	r0, 800c17c <__pow5mult+0x9c>
 800c16c:	4622      	mov	r2, r4
 800c16e:	4621      	mov	r1, r4
 800c170:	4630      	mov	r0, r6
 800c172:	f7ff ff0b 	bl	800bf8c <__multiply>
 800c176:	6020      	str	r0, [r4, #0]
 800c178:	f8c0 9000 	str.w	r9, [r0]
 800c17c:	4604      	mov	r4, r0
 800c17e:	e7e4      	b.n	800c14a <__pow5mult+0x6a>
 800c180:	4638      	mov	r0, r7
 800c182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c186:	bf00      	nop
 800c188:	080106c8 	.word	0x080106c8
 800c18c:	0801047e 	.word	0x0801047e
 800c190:	0801057c 	.word	0x0801057c

0800c194 <__lshift>:
 800c194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c198:	460c      	mov	r4, r1
 800c19a:	6849      	ldr	r1, [r1, #4]
 800c19c:	6923      	ldr	r3, [r4, #16]
 800c19e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1a2:	68a3      	ldr	r3, [r4, #8]
 800c1a4:	4607      	mov	r7, r0
 800c1a6:	4691      	mov	r9, r2
 800c1a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1ac:	f108 0601 	add.w	r6, r8, #1
 800c1b0:	42b3      	cmp	r3, r6
 800c1b2:	db0b      	blt.n	800c1cc <__lshift+0x38>
 800c1b4:	4638      	mov	r0, r7
 800c1b6:	f7ff fd91 	bl	800bcdc <_Balloc>
 800c1ba:	4605      	mov	r5, r0
 800c1bc:	b948      	cbnz	r0, 800c1d2 <__lshift+0x3e>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	4b2a      	ldr	r3, [pc, #168]	; (800c26c <__lshift+0xd8>)
 800c1c2:	482b      	ldr	r0, [pc, #172]	; (800c270 <__lshift+0xdc>)
 800c1c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c1c8:	f001 f8f2 	bl	800d3b0 <__assert_func>
 800c1cc:	3101      	adds	r1, #1
 800c1ce:	005b      	lsls	r3, r3, #1
 800c1d0:	e7ee      	b.n	800c1b0 <__lshift+0x1c>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	f100 0114 	add.w	r1, r0, #20
 800c1d8:	f100 0210 	add.w	r2, r0, #16
 800c1dc:	4618      	mov	r0, r3
 800c1de:	4553      	cmp	r3, sl
 800c1e0:	db37      	blt.n	800c252 <__lshift+0xbe>
 800c1e2:	6920      	ldr	r0, [r4, #16]
 800c1e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1e8:	f104 0314 	add.w	r3, r4, #20
 800c1ec:	f019 091f 	ands.w	r9, r9, #31
 800c1f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c1f8:	d02f      	beq.n	800c25a <__lshift+0xc6>
 800c1fa:	f1c9 0e20 	rsb	lr, r9, #32
 800c1fe:	468a      	mov	sl, r1
 800c200:	f04f 0c00 	mov.w	ip, #0
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	fa02 f209 	lsl.w	r2, r2, r9
 800c20a:	ea42 020c 	orr.w	r2, r2, ip
 800c20e:	f84a 2b04 	str.w	r2, [sl], #4
 800c212:	f853 2b04 	ldr.w	r2, [r3], #4
 800c216:	4298      	cmp	r0, r3
 800c218:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c21c:	d8f2      	bhi.n	800c204 <__lshift+0x70>
 800c21e:	1b03      	subs	r3, r0, r4
 800c220:	3b15      	subs	r3, #21
 800c222:	f023 0303 	bic.w	r3, r3, #3
 800c226:	3304      	adds	r3, #4
 800c228:	f104 0215 	add.w	r2, r4, #21
 800c22c:	4290      	cmp	r0, r2
 800c22e:	bf38      	it	cc
 800c230:	2304      	movcc	r3, #4
 800c232:	f841 c003 	str.w	ip, [r1, r3]
 800c236:	f1bc 0f00 	cmp.w	ip, #0
 800c23a:	d001      	beq.n	800c240 <__lshift+0xac>
 800c23c:	f108 0602 	add.w	r6, r8, #2
 800c240:	3e01      	subs	r6, #1
 800c242:	4638      	mov	r0, r7
 800c244:	612e      	str	r6, [r5, #16]
 800c246:	4621      	mov	r1, r4
 800c248:	f7ff fd88 	bl	800bd5c <_Bfree>
 800c24c:	4628      	mov	r0, r5
 800c24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c252:	f842 0f04 	str.w	r0, [r2, #4]!
 800c256:	3301      	adds	r3, #1
 800c258:	e7c1      	b.n	800c1de <__lshift+0x4a>
 800c25a:	3904      	subs	r1, #4
 800c25c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c260:	f841 2f04 	str.w	r2, [r1, #4]!
 800c264:	4298      	cmp	r0, r3
 800c266:	d8f9      	bhi.n	800c25c <__lshift+0xc8>
 800c268:	e7ea      	b.n	800c240 <__lshift+0xac>
 800c26a:	bf00      	nop
 800c26c:	080104f0 	.word	0x080104f0
 800c270:	0801057c 	.word	0x0801057c

0800c274 <__mcmp>:
 800c274:	b530      	push	{r4, r5, lr}
 800c276:	6902      	ldr	r2, [r0, #16]
 800c278:	690c      	ldr	r4, [r1, #16]
 800c27a:	1b12      	subs	r2, r2, r4
 800c27c:	d10e      	bne.n	800c29c <__mcmp+0x28>
 800c27e:	f100 0314 	add.w	r3, r0, #20
 800c282:	3114      	adds	r1, #20
 800c284:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c288:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c28c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c290:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c294:	42a5      	cmp	r5, r4
 800c296:	d003      	beq.n	800c2a0 <__mcmp+0x2c>
 800c298:	d305      	bcc.n	800c2a6 <__mcmp+0x32>
 800c29a:	2201      	movs	r2, #1
 800c29c:	4610      	mov	r0, r2
 800c29e:	bd30      	pop	{r4, r5, pc}
 800c2a0:	4283      	cmp	r3, r0
 800c2a2:	d3f3      	bcc.n	800c28c <__mcmp+0x18>
 800c2a4:	e7fa      	b.n	800c29c <__mcmp+0x28>
 800c2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2aa:	e7f7      	b.n	800c29c <__mcmp+0x28>

0800c2ac <__mdiff>:
 800c2ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	4606      	mov	r6, r0
 800c2b4:	4611      	mov	r1, r2
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	4690      	mov	r8, r2
 800c2ba:	f7ff ffdb 	bl	800c274 <__mcmp>
 800c2be:	1e05      	subs	r5, r0, #0
 800c2c0:	d110      	bne.n	800c2e4 <__mdiff+0x38>
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	f7ff fd09 	bl	800bcdc <_Balloc>
 800c2ca:	b930      	cbnz	r0, 800c2da <__mdiff+0x2e>
 800c2cc:	4b3a      	ldr	r3, [pc, #232]	; (800c3b8 <__mdiff+0x10c>)
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	f240 2132 	movw	r1, #562	; 0x232
 800c2d4:	4839      	ldr	r0, [pc, #228]	; (800c3bc <__mdiff+0x110>)
 800c2d6:	f001 f86b 	bl	800d3b0 <__assert_func>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c2e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e4:	bfa4      	itt	ge
 800c2e6:	4643      	movge	r3, r8
 800c2e8:	46a0      	movge	r8, r4
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c2f0:	bfa6      	itte	ge
 800c2f2:	461c      	movge	r4, r3
 800c2f4:	2500      	movge	r5, #0
 800c2f6:	2501      	movlt	r5, #1
 800c2f8:	f7ff fcf0 	bl	800bcdc <_Balloc>
 800c2fc:	b920      	cbnz	r0, 800c308 <__mdiff+0x5c>
 800c2fe:	4b2e      	ldr	r3, [pc, #184]	; (800c3b8 <__mdiff+0x10c>)
 800c300:	4602      	mov	r2, r0
 800c302:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c306:	e7e5      	b.n	800c2d4 <__mdiff+0x28>
 800c308:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c30c:	6926      	ldr	r6, [r4, #16]
 800c30e:	60c5      	str	r5, [r0, #12]
 800c310:	f104 0914 	add.w	r9, r4, #20
 800c314:	f108 0514 	add.w	r5, r8, #20
 800c318:	f100 0e14 	add.w	lr, r0, #20
 800c31c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c320:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c324:	f108 0210 	add.w	r2, r8, #16
 800c328:	46f2      	mov	sl, lr
 800c32a:	2100      	movs	r1, #0
 800c32c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c330:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c334:	fa1f f883 	uxth.w	r8, r3
 800c338:	fa11 f18b 	uxtah	r1, r1, fp
 800c33c:	0c1b      	lsrs	r3, r3, #16
 800c33e:	eba1 0808 	sub.w	r8, r1, r8
 800c342:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c346:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c34a:	fa1f f888 	uxth.w	r8, r8
 800c34e:	1419      	asrs	r1, r3, #16
 800c350:	454e      	cmp	r6, r9
 800c352:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c356:	f84a 3b04 	str.w	r3, [sl], #4
 800c35a:	d8e7      	bhi.n	800c32c <__mdiff+0x80>
 800c35c:	1b33      	subs	r3, r6, r4
 800c35e:	3b15      	subs	r3, #21
 800c360:	f023 0303 	bic.w	r3, r3, #3
 800c364:	3304      	adds	r3, #4
 800c366:	3415      	adds	r4, #21
 800c368:	42a6      	cmp	r6, r4
 800c36a:	bf38      	it	cc
 800c36c:	2304      	movcc	r3, #4
 800c36e:	441d      	add	r5, r3
 800c370:	4473      	add	r3, lr
 800c372:	469e      	mov	lr, r3
 800c374:	462e      	mov	r6, r5
 800c376:	4566      	cmp	r6, ip
 800c378:	d30e      	bcc.n	800c398 <__mdiff+0xec>
 800c37a:	f10c 0203 	add.w	r2, ip, #3
 800c37e:	1b52      	subs	r2, r2, r5
 800c380:	f022 0203 	bic.w	r2, r2, #3
 800c384:	3d03      	subs	r5, #3
 800c386:	45ac      	cmp	ip, r5
 800c388:	bf38      	it	cc
 800c38a:	2200      	movcc	r2, #0
 800c38c:	441a      	add	r2, r3
 800c38e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c392:	b17b      	cbz	r3, 800c3b4 <__mdiff+0x108>
 800c394:	6107      	str	r7, [r0, #16]
 800c396:	e7a3      	b.n	800c2e0 <__mdiff+0x34>
 800c398:	f856 8b04 	ldr.w	r8, [r6], #4
 800c39c:	fa11 f288 	uxtah	r2, r1, r8
 800c3a0:	1414      	asrs	r4, r2, #16
 800c3a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c3a6:	b292      	uxth	r2, r2
 800c3a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c3ac:	f84e 2b04 	str.w	r2, [lr], #4
 800c3b0:	1421      	asrs	r1, r4, #16
 800c3b2:	e7e0      	b.n	800c376 <__mdiff+0xca>
 800c3b4:	3f01      	subs	r7, #1
 800c3b6:	e7ea      	b.n	800c38e <__mdiff+0xe2>
 800c3b8:	080104f0 	.word	0x080104f0
 800c3bc:	0801057c 	.word	0x0801057c

0800c3c0 <__ulp>:
 800c3c0:	b082      	sub	sp, #8
 800c3c2:	ed8d 0b00 	vstr	d0, [sp]
 800c3c6:	9b01      	ldr	r3, [sp, #4]
 800c3c8:	4912      	ldr	r1, [pc, #72]	; (800c414 <__ulp+0x54>)
 800c3ca:	4019      	ands	r1, r3
 800c3cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c3d0:	2900      	cmp	r1, #0
 800c3d2:	dd05      	ble.n	800c3e0 <__ulp+0x20>
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	ec43 2b10 	vmov	d0, r2, r3
 800c3dc:	b002      	add	sp, #8
 800c3de:	4770      	bx	lr
 800c3e0:	4249      	negs	r1, r1
 800c3e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c3e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c3ea:	f04f 0200 	mov.w	r2, #0
 800c3ee:	f04f 0300 	mov.w	r3, #0
 800c3f2:	da04      	bge.n	800c3fe <__ulp+0x3e>
 800c3f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c3f8:	fa41 f300 	asr.w	r3, r1, r0
 800c3fc:	e7ec      	b.n	800c3d8 <__ulp+0x18>
 800c3fe:	f1a0 0114 	sub.w	r1, r0, #20
 800c402:	291e      	cmp	r1, #30
 800c404:	bfda      	itte	le
 800c406:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c40a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c40e:	2101      	movgt	r1, #1
 800c410:	460a      	mov	r2, r1
 800c412:	e7e1      	b.n	800c3d8 <__ulp+0x18>
 800c414:	7ff00000 	.word	0x7ff00000

0800c418 <__b2d>:
 800c418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41a:	6905      	ldr	r5, [r0, #16]
 800c41c:	f100 0714 	add.w	r7, r0, #20
 800c420:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c424:	1f2e      	subs	r6, r5, #4
 800c426:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c42a:	4620      	mov	r0, r4
 800c42c:	f7ff fd48 	bl	800bec0 <__hi0bits>
 800c430:	f1c0 0320 	rsb	r3, r0, #32
 800c434:	280a      	cmp	r0, #10
 800c436:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c4b4 <__b2d+0x9c>
 800c43a:	600b      	str	r3, [r1, #0]
 800c43c:	dc14      	bgt.n	800c468 <__b2d+0x50>
 800c43e:	f1c0 0e0b 	rsb	lr, r0, #11
 800c442:	fa24 f10e 	lsr.w	r1, r4, lr
 800c446:	42b7      	cmp	r7, r6
 800c448:	ea41 030c 	orr.w	r3, r1, ip
 800c44c:	bf34      	ite	cc
 800c44e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c452:	2100      	movcs	r1, #0
 800c454:	3015      	adds	r0, #21
 800c456:	fa04 f000 	lsl.w	r0, r4, r0
 800c45a:	fa21 f10e 	lsr.w	r1, r1, lr
 800c45e:	ea40 0201 	orr.w	r2, r0, r1
 800c462:	ec43 2b10 	vmov	d0, r2, r3
 800c466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c468:	42b7      	cmp	r7, r6
 800c46a:	bf3a      	itte	cc
 800c46c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c470:	f1a5 0608 	subcc.w	r6, r5, #8
 800c474:	2100      	movcs	r1, #0
 800c476:	380b      	subs	r0, #11
 800c478:	d017      	beq.n	800c4aa <__b2d+0x92>
 800c47a:	f1c0 0c20 	rsb	ip, r0, #32
 800c47e:	fa04 f500 	lsl.w	r5, r4, r0
 800c482:	42be      	cmp	r6, r7
 800c484:	fa21 f40c 	lsr.w	r4, r1, ip
 800c488:	ea45 0504 	orr.w	r5, r5, r4
 800c48c:	bf8c      	ite	hi
 800c48e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c492:	2400      	movls	r4, #0
 800c494:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c498:	fa01 f000 	lsl.w	r0, r1, r0
 800c49c:	fa24 f40c 	lsr.w	r4, r4, ip
 800c4a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c4a4:	ea40 0204 	orr.w	r2, r0, r4
 800c4a8:	e7db      	b.n	800c462 <__b2d+0x4a>
 800c4aa:	ea44 030c 	orr.w	r3, r4, ip
 800c4ae:	460a      	mov	r2, r1
 800c4b0:	e7d7      	b.n	800c462 <__b2d+0x4a>
 800c4b2:	bf00      	nop
 800c4b4:	3ff00000 	.word	0x3ff00000

0800c4b8 <__d2b>:
 800c4b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4bc:	4689      	mov	r9, r1
 800c4be:	2101      	movs	r1, #1
 800c4c0:	ec57 6b10 	vmov	r6, r7, d0
 800c4c4:	4690      	mov	r8, r2
 800c4c6:	f7ff fc09 	bl	800bcdc <_Balloc>
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	b930      	cbnz	r0, 800c4dc <__d2b+0x24>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	4b25      	ldr	r3, [pc, #148]	; (800c568 <__d2b+0xb0>)
 800c4d2:	4826      	ldr	r0, [pc, #152]	; (800c56c <__d2b+0xb4>)
 800c4d4:	f240 310a 	movw	r1, #778	; 0x30a
 800c4d8:	f000 ff6a 	bl	800d3b0 <__assert_func>
 800c4dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c4e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c4e4:	bb35      	cbnz	r5, 800c534 <__d2b+0x7c>
 800c4e6:	2e00      	cmp	r6, #0
 800c4e8:	9301      	str	r3, [sp, #4]
 800c4ea:	d028      	beq.n	800c53e <__d2b+0x86>
 800c4ec:	4668      	mov	r0, sp
 800c4ee:	9600      	str	r6, [sp, #0]
 800c4f0:	f7ff fd06 	bl	800bf00 <__lo0bits>
 800c4f4:	9900      	ldr	r1, [sp, #0]
 800c4f6:	b300      	cbz	r0, 800c53a <__d2b+0x82>
 800c4f8:	9a01      	ldr	r2, [sp, #4]
 800c4fa:	f1c0 0320 	rsb	r3, r0, #32
 800c4fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c502:	430b      	orrs	r3, r1
 800c504:	40c2      	lsrs	r2, r0
 800c506:	6163      	str	r3, [r4, #20]
 800c508:	9201      	str	r2, [sp, #4]
 800c50a:	9b01      	ldr	r3, [sp, #4]
 800c50c:	61a3      	str	r3, [r4, #24]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	bf14      	ite	ne
 800c512:	2202      	movne	r2, #2
 800c514:	2201      	moveq	r2, #1
 800c516:	6122      	str	r2, [r4, #16]
 800c518:	b1d5      	cbz	r5, 800c550 <__d2b+0x98>
 800c51a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c51e:	4405      	add	r5, r0
 800c520:	f8c9 5000 	str.w	r5, [r9]
 800c524:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c528:	f8c8 0000 	str.w	r0, [r8]
 800c52c:	4620      	mov	r0, r4
 800c52e:	b003      	add	sp, #12
 800c530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c538:	e7d5      	b.n	800c4e6 <__d2b+0x2e>
 800c53a:	6161      	str	r1, [r4, #20]
 800c53c:	e7e5      	b.n	800c50a <__d2b+0x52>
 800c53e:	a801      	add	r0, sp, #4
 800c540:	f7ff fcde 	bl	800bf00 <__lo0bits>
 800c544:	9b01      	ldr	r3, [sp, #4]
 800c546:	6163      	str	r3, [r4, #20]
 800c548:	2201      	movs	r2, #1
 800c54a:	6122      	str	r2, [r4, #16]
 800c54c:	3020      	adds	r0, #32
 800c54e:	e7e3      	b.n	800c518 <__d2b+0x60>
 800c550:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c554:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c558:	f8c9 0000 	str.w	r0, [r9]
 800c55c:	6918      	ldr	r0, [r3, #16]
 800c55e:	f7ff fcaf 	bl	800bec0 <__hi0bits>
 800c562:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c566:	e7df      	b.n	800c528 <__d2b+0x70>
 800c568:	080104f0 	.word	0x080104f0
 800c56c:	0801057c 	.word	0x0801057c

0800c570 <__ratio>:
 800c570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c574:	4688      	mov	r8, r1
 800c576:	4669      	mov	r1, sp
 800c578:	4681      	mov	r9, r0
 800c57a:	f7ff ff4d 	bl	800c418 <__b2d>
 800c57e:	a901      	add	r1, sp, #4
 800c580:	4640      	mov	r0, r8
 800c582:	ec55 4b10 	vmov	r4, r5, d0
 800c586:	f7ff ff47 	bl	800c418 <__b2d>
 800c58a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c58e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c592:	eba3 0c02 	sub.w	ip, r3, r2
 800c596:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c59a:	1a9b      	subs	r3, r3, r2
 800c59c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c5a0:	ec51 0b10 	vmov	r0, r1, d0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	bfd6      	itet	le
 800c5a8:	460a      	movle	r2, r1
 800c5aa:	462a      	movgt	r2, r5
 800c5ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c5b0:	468b      	mov	fp, r1
 800c5b2:	462f      	mov	r7, r5
 800c5b4:	bfd4      	ite	le
 800c5b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c5ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c5be:	4620      	mov	r0, r4
 800c5c0:	ee10 2a10 	vmov	r2, s0
 800c5c4:	465b      	mov	r3, fp
 800c5c6:	4639      	mov	r1, r7
 800c5c8:	f7f4 f958 	bl	800087c <__aeabi_ddiv>
 800c5cc:	ec41 0b10 	vmov	d0, r0, r1
 800c5d0:	b003      	add	sp, #12
 800c5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5d6 <__copybits>:
 800c5d6:	3901      	subs	r1, #1
 800c5d8:	b570      	push	{r4, r5, r6, lr}
 800c5da:	1149      	asrs	r1, r1, #5
 800c5dc:	6914      	ldr	r4, [r2, #16]
 800c5de:	3101      	adds	r1, #1
 800c5e0:	f102 0314 	add.w	r3, r2, #20
 800c5e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c5e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c5ec:	1f05      	subs	r5, r0, #4
 800c5ee:	42a3      	cmp	r3, r4
 800c5f0:	d30c      	bcc.n	800c60c <__copybits+0x36>
 800c5f2:	1aa3      	subs	r3, r4, r2
 800c5f4:	3b11      	subs	r3, #17
 800c5f6:	f023 0303 	bic.w	r3, r3, #3
 800c5fa:	3211      	adds	r2, #17
 800c5fc:	42a2      	cmp	r2, r4
 800c5fe:	bf88      	it	hi
 800c600:	2300      	movhi	r3, #0
 800c602:	4418      	add	r0, r3
 800c604:	2300      	movs	r3, #0
 800c606:	4288      	cmp	r0, r1
 800c608:	d305      	bcc.n	800c616 <__copybits+0x40>
 800c60a:	bd70      	pop	{r4, r5, r6, pc}
 800c60c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c610:	f845 6f04 	str.w	r6, [r5, #4]!
 800c614:	e7eb      	b.n	800c5ee <__copybits+0x18>
 800c616:	f840 3b04 	str.w	r3, [r0], #4
 800c61a:	e7f4      	b.n	800c606 <__copybits+0x30>

0800c61c <__any_on>:
 800c61c:	f100 0214 	add.w	r2, r0, #20
 800c620:	6900      	ldr	r0, [r0, #16]
 800c622:	114b      	asrs	r3, r1, #5
 800c624:	4298      	cmp	r0, r3
 800c626:	b510      	push	{r4, lr}
 800c628:	db11      	blt.n	800c64e <__any_on+0x32>
 800c62a:	dd0a      	ble.n	800c642 <__any_on+0x26>
 800c62c:	f011 011f 	ands.w	r1, r1, #31
 800c630:	d007      	beq.n	800c642 <__any_on+0x26>
 800c632:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c636:	fa24 f001 	lsr.w	r0, r4, r1
 800c63a:	fa00 f101 	lsl.w	r1, r0, r1
 800c63e:	428c      	cmp	r4, r1
 800c640:	d10b      	bne.n	800c65a <__any_on+0x3e>
 800c642:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c646:	4293      	cmp	r3, r2
 800c648:	d803      	bhi.n	800c652 <__any_on+0x36>
 800c64a:	2000      	movs	r0, #0
 800c64c:	bd10      	pop	{r4, pc}
 800c64e:	4603      	mov	r3, r0
 800c650:	e7f7      	b.n	800c642 <__any_on+0x26>
 800c652:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c656:	2900      	cmp	r1, #0
 800c658:	d0f5      	beq.n	800c646 <__any_on+0x2a>
 800c65a:	2001      	movs	r0, #1
 800c65c:	e7f6      	b.n	800c64c <__any_on+0x30>

0800c65e <_calloc_r>:
 800c65e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c660:	fba1 2402 	umull	r2, r4, r1, r2
 800c664:	b94c      	cbnz	r4, 800c67a <_calloc_r+0x1c>
 800c666:	4611      	mov	r1, r2
 800c668:	9201      	str	r2, [sp, #4]
 800c66a:	f000 f87b 	bl	800c764 <_malloc_r>
 800c66e:	9a01      	ldr	r2, [sp, #4]
 800c670:	4605      	mov	r5, r0
 800c672:	b930      	cbnz	r0, 800c682 <_calloc_r+0x24>
 800c674:	4628      	mov	r0, r5
 800c676:	b003      	add	sp, #12
 800c678:	bd30      	pop	{r4, r5, pc}
 800c67a:	220c      	movs	r2, #12
 800c67c:	6002      	str	r2, [r0, #0]
 800c67e:	2500      	movs	r5, #0
 800c680:	e7f8      	b.n	800c674 <_calloc_r+0x16>
 800c682:	4621      	mov	r1, r4
 800c684:	f7fc fb24 	bl	8008cd0 <memset>
 800c688:	e7f4      	b.n	800c674 <_calloc_r+0x16>
	...

0800c68c <_free_r>:
 800c68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c68e:	2900      	cmp	r1, #0
 800c690:	d044      	beq.n	800c71c <_free_r+0x90>
 800c692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c696:	9001      	str	r0, [sp, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f1a1 0404 	sub.w	r4, r1, #4
 800c69e:	bfb8      	it	lt
 800c6a0:	18e4      	addlt	r4, r4, r3
 800c6a2:	f001 f889 	bl	800d7b8 <__malloc_lock>
 800c6a6:	4a1e      	ldr	r2, [pc, #120]	; (800c720 <_free_r+0x94>)
 800c6a8:	9801      	ldr	r0, [sp, #4]
 800c6aa:	6813      	ldr	r3, [r2, #0]
 800c6ac:	b933      	cbnz	r3, 800c6bc <_free_r+0x30>
 800c6ae:	6063      	str	r3, [r4, #4]
 800c6b0:	6014      	str	r4, [r2, #0]
 800c6b2:	b003      	add	sp, #12
 800c6b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6b8:	f001 b884 	b.w	800d7c4 <__malloc_unlock>
 800c6bc:	42a3      	cmp	r3, r4
 800c6be:	d908      	bls.n	800c6d2 <_free_r+0x46>
 800c6c0:	6825      	ldr	r5, [r4, #0]
 800c6c2:	1961      	adds	r1, r4, r5
 800c6c4:	428b      	cmp	r3, r1
 800c6c6:	bf01      	itttt	eq
 800c6c8:	6819      	ldreq	r1, [r3, #0]
 800c6ca:	685b      	ldreq	r3, [r3, #4]
 800c6cc:	1949      	addeq	r1, r1, r5
 800c6ce:	6021      	streq	r1, [r4, #0]
 800c6d0:	e7ed      	b.n	800c6ae <_free_r+0x22>
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	b10b      	cbz	r3, 800c6dc <_free_r+0x50>
 800c6d8:	42a3      	cmp	r3, r4
 800c6da:	d9fa      	bls.n	800c6d2 <_free_r+0x46>
 800c6dc:	6811      	ldr	r1, [r2, #0]
 800c6de:	1855      	adds	r5, r2, r1
 800c6e0:	42a5      	cmp	r5, r4
 800c6e2:	d10b      	bne.n	800c6fc <_free_r+0x70>
 800c6e4:	6824      	ldr	r4, [r4, #0]
 800c6e6:	4421      	add	r1, r4
 800c6e8:	1854      	adds	r4, r2, r1
 800c6ea:	42a3      	cmp	r3, r4
 800c6ec:	6011      	str	r1, [r2, #0]
 800c6ee:	d1e0      	bne.n	800c6b2 <_free_r+0x26>
 800c6f0:	681c      	ldr	r4, [r3, #0]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	6053      	str	r3, [r2, #4]
 800c6f6:	4421      	add	r1, r4
 800c6f8:	6011      	str	r1, [r2, #0]
 800c6fa:	e7da      	b.n	800c6b2 <_free_r+0x26>
 800c6fc:	d902      	bls.n	800c704 <_free_r+0x78>
 800c6fe:	230c      	movs	r3, #12
 800c700:	6003      	str	r3, [r0, #0]
 800c702:	e7d6      	b.n	800c6b2 <_free_r+0x26>
 800c704:	6825      	ldr	r5, [r4, #0]
 800c706:	1961      	adds	r1, r4, r5
 800c708:	428b      	cmp	r3, r1
 800c70a:	bf04      	itt	eq
 800c70c:	6819      	ldreq	r1, [r3, #0]
 800c70e:	685b      	ldreq	r3, [r3, #4]
 800c710:	6063      	str	r3, [r4, #4]
 800c712:	bf04      	itt	eq
 800c714:	1949      	addeq	r1, r1, r5
 800c716:	6021      	streq	r1, [r4, #0]
 800c718:	6054      	str	r4, [r2, #4]
 800c71a:	e7ca      	b.n	800c6b2 <_free_r+0x26>
 800c71c:	b003      	add	sp, #12
 800c71e:	bd30      	pop	{r4, r5, pc}
 800c720:	20013ad0 	.word	0x20013ad0

0800c724 <sbrk_aligned>:
 800c724:	b570      	push	{r4, r5, r6, lr}
 800c726:	4e0e      	ldr	r6, [pc, #56]	; (800c760 <sbrk_aligned+0x3c>)
 800c728:	460c      	mov	r4, r1
 800c72a:	6831      	ldr	r1, [r6, #0]
 800c72c:	4605      	mov	r5, r0
 800c72e:	b911      	cbnz	r1, 800c736 <sbrk_aligned+0x12>
 800c730:	f000 fd26 	bl	800d180 <_sbrk_r>
 800c734:	6030      	str	r0, [r6, #0]
 800c736:	4621      	mov	r1, r4
 800c738:	4628      	mov	r0, r5
 800c73a:	f000 fd21 	bl	800d180 <_sbrk_r>
 800c73e:	1c43      	adds	r3, r0, #1
 800c740:	d00a      	beq.n	800c758 <sbrk_aligned+0x34>
 800c742:	1cc4      	adds	r4, r0, #3
 800c744:	f024 0403 	bic.w	r4, r4, #3
 800c748:	42a0      	cmp	r0, r4
 800c74a:	d007      	beq.n	800c75c <sbrk_aligned+0x38>
 800c74c:	1a21      	subs	r1, r4, r0
 800c74e:	4628      	mov	r0, r5
 800c750:	f000 fd16 	bl	800d180 <_sbrk_r>
 800c754:	3001      	adds	r0, #1
 800c756:	d101      	bne.n	800c75c <sbrk_aligned+0x38>
 800c758:	f04f 34ff 	mov.w	r4, #4294967295
 800c75c:	4620      	mov	r0, r4
 800c75e:	bd70      	pop	{r4, r5, r6, pc}
 800c760:	20013ad4 	.word	0x20013ad4

0800c764 <_malloc_r>:
 800c764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c768:	1ccd      	adds	r5, r1, #3
 800c76a:	f025 0503 	bic.w	r5, r5, #3
 800c76e:	3508      	adds	r5, #8
 800c770:	2d0c      	cmp	r5, #12
 800c772:	bf38      	it	cc
 800c774:	250c      	movcc	r5, #12
 800c776:	2d00      	cmp	r5, #0
 800c778:	4607      	mov	r7, r0
 800c77a:	db01      	blt.n	800c780 <_malloc_r+0x1c>
 800c77c:	42a9      	cmp	r1, r5
 800c77e:	d905      	bls.n	800c78c <_malloc_r+0x28>
 800c780:	230c      	movs	r3, #12
 800c782:	603b      	str	r3, [r7, #0]
 800c784:	2600      	movs	r6, #0
 800c786:	4630      	mov	r0, r6
 800c788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c78c:	4e2e      	ldr	r6, [pc, #184]	; (800c848 <_malloc_r+0xe4>)
 800c78e:	f001 f813 	bl	800d7b8 <__malloc_lock>
 800c792:	6833      	ldr	r3, [r6, #0]
 800c794:	461c      	mov	r4, r3
 800c796:	bb34      	cbnz	r4, 800c7e6 <_malloc_r+0x82>
 800c798:	4629      	mov	r1, r5
 800c79a:	4638      	mov	r0, r7
 800c79c:	f7ff ffc2 	bl	800c724 <sbrk_aligned>
 800c7a0:	1c43      	adds	r3, r0, #1
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	d14d      	bne.n	800c842 <_malloc_r+0xde>
 800c7a6:	6834      	ldr	r4, [r6, #0]
 800c7a8:	4626      	mov	r6, r4
 800c7aa:	2e00      	cmp	r6, #0
 800c7ac:	d140      	bne.n	800c830 <_malloc_r+0xcc>
 800c7ae:	6823      	ldr	r3, [r4, #0]
 800c7b0:	4631      	mov	r1, r6
 800c7b2:	4638      	mov	r0, r7
 800c7b4:	eb04 0803 	add.w	r8, r4, r3
 800c7b8:	f000 fce2 	bl	800d180 <_sbrk_r>
 800c7bc:	4580      	cmp	r8, r0
 800c7be:	d13a      	bne.n	800c836 <_malloc_r+0xd2>
 800c7c0:	6821      	ldr	r1, [r4, #0]
 800c7c2:	3503      	adds	r5, #3
 800c7c4:	1a6d      	subs	r5, r5, r1
 800c7c6:	f025 0503 	bic.w	r5, r5, #3
 800c7ca:	3508      	adds	r5, #8
 800c7cc:	2d0c      	cmp	r5, #12
 800c7ce:	bf38      	it	cc
 800c7d0:	250c      	movcc	r5, #12
 800c7d2:	4629      	mov	r1, r5
 800c7d4:	4638      	mov	r0, r7
 800c7d6:	f7ff ffa5 	bl	800c724 <sbrk_aligned>
 800c7da:	3001      	adds	r0, #1
 800c7dc:	d02b      	beq.n	800c836 <_malloc_r+0xd2>
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	442b      	add	r3, r5
 800c7e2:	6023      	str	r3, [r4, #0]
 800c7e4:	e00e      	b.n	800c804 <_malloc_r+0xa0>
 800c7e6:	6822      	ldr	r2, [r4, #0]
 800c7e8:	1b52      	subs	r2, r2, r5
 800c7ea:	d41e      	bmi.n	800c82a <_malloc_r+0xc6>
 800c7ec:	2a0b      	cmp	r2, #11
 800c7ee:	d916      	bls.n	800c81e <_malloc_r+0xba>
 800c7f0:	1961      	adds	r1, r4, r5
 800c7f2:	42a3      	cmp	r3, r4
 800c7f4:	6025      	str	r5, [r4, #0]
 800c7f6:	bf18      	it	ne
 800c7f8:	6059      	strne	r1, [r3, #4]
 800c7fa:	6863      	ldr	r3, [r4, #4]
 800c7fc:	bf08      	it	eq
 800c7fe:	6031      	streq	r1, [r6, #0]
 800c800:	5162      	str	r2, [r4, r5]
 800c802:	604b      	str	r3, [r1, #4]
 800c804:	4638      	mov	r0, r7
 800c806:	f104 060b 	add.w	r6, r4, #11
 800c80a:	f000 ffdb 	bl	800d7c4 <__malloc_unlock>
 800c80e:	f026 0607 	bic.w	r6, r6, #7
 800c812:	1d23      	adds	r3, r4, #4
 800c814:	1af2      	subs	r2, r6, r3
 800c816:	d0b6      	beq.n	800c786 <_malloc_r+0x22>
 800c818:	1b9b      	subs	r3, r3, r6
 800c81a:	50a3      	str	r3, [r4, r2]
 800c81c:	e7b3      	b.n	800c786 <_malloc_r+0x22>
 800c81e:	6862      	ldr	r2, [r4, #4]
 800c820:	42a3      	cmp	r3, r4
 800c822:	bf0c      	ite	eq
 800c824:	6032      	streq	r2, [r6, #0]
 800c826:	605a      	strne	r2, [r3, #4]
 800c828:	e7ec      	b.n	800c804 <_malloc_r+0xa0>
 800c82a:	4623      	mov	r3, r4
 800c82c:	6864      	ldr	r4, [r4, #4]
 800c82e:	e7b2      	b.n	800c796 <_malloc_r+0x32>
 800c830:	4634      	mov	r4, r6
 800c832:	6876      	ldr	r6, [r6, #4]
 800c834:	e7b9      	b.n	800c7aa <_malloc_r+0x46>
 800c836:	230c      	movs	r3, #12
 800c838:	603b      	str	r3, [r7, #0]
 800c83a:	4638      	mov	r0, r7
 800c83c:	f000 ffc2 	bl	800d7c4 <__malloc_unlock>
 800c840:	e7a1      	b.n	800c786 <_malloc_r+0x22>
 800c842:	6025      	str	r5, [r4, #0]
 800c844:	e7de      	b.n	800c804 <_malloc_r+0xa0>
 800c846:	bf00      	nop
 800c848:	20013ad0 	.word	0x20013ad0

0800c84c <__ssputs_r>:
 800c84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c850:	688e      	ldr	r6, [r1, #8]
 800c852:	429e      	cmp	r6, r3
 800c854:	4682      	mov	sl, r0
 800c856:	460c      	mov	r4, r1
 800c858:	4690      	mov	r8, r2
 800c85a:	461f      	mov	r7, r3
 800c85c:	d838      	bhi.n	800c8d0 <__ssputs_r+0x84>
 800c85e:	898a      	ldrh	r2, [r1, #12]
 800c860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c864:	d032      	beq.n	800c8cc <__ssputs_r+0x80>
 800c866:	6825      	ldr	r5, [r4, #0]
 800c868:	6909      	ldr	r1, [r1, #16]
 800c86a:	eba5 0901 	sub.w	r9, r5, r1
 800c86e:	6965      	ldr	r5, [r4, #20]
 800c870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c878:	3301      	adds	r3, #1
 800c87a:	444b      	add	r3, r9
 800c87c:	106d      	asrs	r5, r5, #1
 800c87e:	429d      	cmp	r5, r3
 800c880:	bf38      	it	cc
 800c882:	461d      	movcc	r5, r3
 800c884:	0553      	lsls	r3, r2, #21
 800c886:	d531      	bpl.n	800c8ec <__ssputs_r+0xa0>
 800c888:	4629      	mov	r1, r5
 800c88a:	f7ff ff6b 	bl	800c764 <_malloc_r>
 800c88e:	4606      	mov	r6, r0
 800c890:	b950      	cbnz	r0, 800c8a8 <__ssputs_r+0x5c>
 800c892:	230c      	movs	r3, #12
 800c894:	f8ca 3000 	str.w	r3, [sl]
 800c898:	89a3      	ldrh	r3, [r4, #12]
 800c89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c89e:	81a3      	strh	r3, [r4, #12]
 800c8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a8:	6921      	ldr	r1, [r4, #16]
 800c8aa:	464a      	mov	r2, r9
 800c8ac:	f7fc fa02 	bl	8008cb4 <memcpy>
 800c8b0:	89a3      	ldrh	r3, [r4, #12]
 800c8b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8ba:	81a3      	strh	r3, [r4, #12]
 800c8bc:	6126      	str	r6, [r4, #16]
 800c8be:	6165      	str	r5, [r4, #20]
 800c8c0:	444e      	add	r6, r9
 800c8c2:	eba5 0509 	sub.w	r5, r5, r9
 800c8c6:	6026      	str	r6, [r4, #0]
 800c8c8:	60a5      	str	r5, [r4, #8]
 800c8ca:	463e      	mov	r6, r7
 800c8cc:	42be      	cmp	r6, r7
 800c8ce:	d900      	bls.n	800c8d2 <__ssputs_r+0x86>
 800c8d0:	463e      	mov	r6, r7
 800c8d2:	6820      	ldr	r0, [r4, #0]
 800c8d4:	4632      	mov	r2, r6
 800c8d6:	4641      	mov	r1, r8
 800c8d8:	f000 ff54 	bl	800d784 <memmove>
 800c8dc:	68a3      	ldr	r3, [r4, #8]
 800c8de:	1b9b      	subs	r3, r3, r6
 800c8e0:	60a3      	str	r3, [r4, #8]
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	4433      	add	r3, r6
 800c8e6:	6023      	str	r3, [r4, #0]
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	e7db      	b.n	800c8a4 <__ssputs_r+0x58>
 800c8ec:	462a      	mov	r2, r5
 800c8ee:	f000 ff6f 	bl	800d7d0 <_realloc_r>
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	d1e1      	bne.n	800c8bc <__ssputs_r+0x70>
 800c8f8:	6921      	ldr	r1, [r4, #16]
 800c8fa:	4650      	mov	r0, sl
 800c8fc:	f7ff fec6 	bl	800c68c <_free_r>
 800c900:	e7c7      	b.n	800c892 <__ssputs_r+0x46>
	...

0800c904 <_svfiprintf_r>:
 800c904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c908:	4698      	mov	r8, r3
 800c90a:	898b      	ldrh	r3, [r1, #12]
 800c90c:	061b      	lsls	r3, r3, #24
 800c90e:	b09d      	sub	sp, #116	; 0x74
 800c910:	4607      	mov	r7, r0
 800c912:	460d      	mov	r5, r1
 800c914:	4614      	mov	r4, r2
 800c916:	d50e      	bpl.n	800c936 <_svfiprintf_r+0x32>
 800c918:	690b      	ldr	r3, [r1, #16]
 800c91a:	b963      	cbnz	r3, 800c936 <_svfiprintf_r+0x32>
 800c91c:	2140      	movs	r1, #64	; 0x40
 800c91e:	f7ff ff21 	bl	800c764 <_malloc_r>
 800c922:	6028      	str	r0, [r5, #0]
 800c924:	6128      	str	r0, [r5, #16]
 800c926:	b920      	cbnz	r0, 800c932 <_svfiprintf_r+0x2e>
 800c928:	230c      	movs	r3, #12
 800c92a:	603b      	str	r3, [r7, #0]
 800c92c:	f04f 30ff 	mov.w	r0, #4294967295
 800c930:	e0d1      	b.n	800cad6 <_svfiprintf_r+0x1d2>
 800c932:	2340      	movs	r3, #64	; 0x40
 800c934:	616b      	str	r3, [r5, #20]
 800c936:	2300      	movs	r3, #0
 800c938:	9309      	str	r3, [sp, #36]	; 0x24
 800c93a:	2320      	movs	r3, #32
 800c93c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c940:	f8cd 800c 	str.w	r8, [sp, #12]
 800c944:	2330      	movs	r3, #48	; 0x30
 800c946:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800caf0 <_svfiprintf_r+0x1ec>
 800c94a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c94e:	f04f 0901 	mov.w	r9, #1
 800c952:	4623      	mov	r3, r4
 800c954:	469a      	mov	sl, r3
 800c956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c95a:	b10a      	cbz	r2, 800c960 <_svfiprintf_r+0x5c>
 800c95c:	2a25      	cmp	r2, #37	; 0x25
 800c95e:	d1f9      	bne.n	800c954 <_svfiprintf_r+0x50>
 800c960:	ebba 0b04 	subs.w	fp, sl, r4
 800c964:	d00b      	beq.n	800c97e <_svfiprintf_r+0x7a>
 800c966:	465b      	mov	r3, fp
 800c968:	4622      	mov	r2, r4
 800c96a:	4629      	mov	r1, r5
 800c96c:	4638      	mov	r0, r7
 800c96e:	f7ff ff6d 	bl	800c84c <__ssputs_r>
 800c972:	3001      	adds	r0, #1
 800c974:	f000 80aa 	beq.w	800cacc <_svfiprintf_r+0x1c8>
 800c978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c97a:	445a      	add	r2, fp
 800c97c:	9209      	str	r2, [sp, #36]	; 0x24
 800c97e:	f89a 3000 	ldrb.w	r3, [sl]
 800c982:	2b00      	cmp	r3, #0
 800c984:	f000 80a2 	beq.w	800cacc <_svfiprintf_r+0x1c8>
 800c988:	2300      	movs	r3, #0
 800c98a:	f04f 32ff 	mov.w	r2, #4294967295
 800c98e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c992:	f10a 0a01 	add.w	sl, sl, #1
 800c996:	9304      	str	r3, [sp, #16]
 800c998:	9307      	str	r3, [sp, #28]
 800c99a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c99e:	931a      	str	r3, [sp, #104]	; 0x68
 800c9a0:	4654      	mov	r4, sl
 800c9a2:	2205      	movs	r2, #5
 800c9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9a8:	4851      	ldr	r0, [pc, #324]	; (800caf0 <_svfiprintf_r+0x1ec>)
 800c9aa:	f7f3 fc31 	bl	8000210 <memchr>
 800c9ae:	9a04      	ldr	r2, [sp, #16]
 800c9b0:	b9d8      	cbnz	r0, 800c9ea <_svfiprintf_r+0xe6>
 800c9b2:	06d0      	lsls	r0, r2, #27
 800c9b4:	bf44      	itt	mi
 800c9b6:	2320      	movmi	r3, #32
 800c9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9bc:	0711      	lsls	r1, r2, #28
 800c9be:	bf44      	itt	mi
 800c9c0:	232b      	movmi	r3, #43	; 0x2b
 800c9c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9c6:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ca:	2b2a      	cmp	r3, #42	; 0x2a
 800c9cc:	d015      	beq.n	800c9fa <_svfiprintf_r+0xf6>
 800c9ce:	9a07      	ldr	r2, [sp, #28]
 800c9d0:	4654      	mov	r4, sl
 800c9d2:	2000      	movs	r0, #0
 800c9d4:	f04f 0c0a 	mov.w	ip, #10
 800c9d8:	4621      	mov	r1, r4
 800c9da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9de:	3b30      	subs	r3, #48	; 0x30
 800c9e0:	2b09      	cmp	r3, #9
 800c9e2:	d94e      	bls.n	800ca82 <_svfiprintf_r+0x17e>
 800c9e4:	b1b0      	cbz	r0, 800ca14 <_svfiprintf_r+0x110>
 800c9e6:	9207      	str	r2, [sp, #28]
 800c9e8:	e014      	b.n	800ca14 <_svfiprintf_r+0x110>
 800c9ea:	eba0 0308 	sub.w	r3, r0, r8
 800c9ee:	fa09 f303 	lsl.w	r3, r9, r3
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	9304      	str	r3, [sp, #16]
 800c9f6:	46a2      	mov	sl, r4
 800c9f8:	e7d2      	b.n	800c9a0 <_svfiprintf_r+0x9c>
 800c9fa:	9b03      	ldr	r3, [sp, #12]
 800c9fc:	1d19      	adds	r1, r3, #4
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	9103      	str	r1, [sp, #12]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	bfbb      	ittet	lt
 800ca06:	425b      	neglt	r3, r3
 800ca08:	f042 0202 	orrlt.w	r2, r2, #2
 800ca0c:	9307      	strge	r3, [sp, #28]
 800ca0e:	9307      	strlt	r3, [sp, #28]
 800ca10:	bfb8      	it	lt
 800ca12:	9204      	strlt	r2, [sp, #16]
 800ca14:	7823      	ldrb	r3, [r4, #0]
 800ca16:	2b2e      	cmp	r3, #46	; 0x2e
 800ca18:	d10c      	bne.n	800ca34 <_svfiprintf_r+0x130>
 800ca1a:	7863      	ldrb	r3, [r4, #1]
 800ca1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ca1e:	d135      	bne.n	800ca8c <_svfiprintf_r+0x188>
 800ca20:	9b03      	ldr	r3, [sp, #12]
 800ca22:	1d1a      	adds	r2, r3, #4
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	9203      	str	r2, [sp, #12]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	bfb8      	it	lt
 800ca2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca30:	3402      	adds	r4, #2
 800ca32:	9305      	str	r3, [sp, #20]
 800ca34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cb00 <_svfiprintf_r+0x1fc>
 800ca38:	7821      	ldrb	r1, [r4, #0]
 800ca3a:	2203      	movs	r2, #3
 800ca3c:	4650      	mov	r0, sl
 800ca3e:	f7f3 fbe7 	bl	8000210 <memchr>
 800ca42:	b140      	cbz	r0, 800ca56 <_svfiprintf_r+0x152>
 800ca44:	2340      	movs	r3, #64	; 0x40
 800ca46:	eba0 000a 	sub.w	r0, r0, sl
 800ca4a:	fa03 f000 	lsl.w	r0, r3, r0
 800ca4e:	9b04      	ldr	r3, [sp, #16]
 800ca50:	4303      	orrs	r3, r0
 800ca52:	3401      	adds	r4, #1
 800ca54:	9304      	str	r3, [sp, #16]
 800ca56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca5a:	4826      	ldr	r0, [pc, #152]	; (800caf4 <_svfiprintf_r+0x1f0>)
 800ca5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca60:	2206      	movs	r2, #6
 800ca62:	f7f3 fbd5 	bl	8000210 <memchr>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	d038      	beq.n	800cadc <_svfiprintf_r+0x1d8>
 800ca6a:	4b23      	ldr	r3, [pc, #140]	; (800caf8 <_svfiprintf_r+0x1f4>)
 800ca6c:	bb1b      	cbnz	r3, 800cab6 <_svfiprintf_r+0x1b2>
 800ca6e:	9b03      	ldr	r3, [sp, #12]
 800ca70:	3307      	adds	r3, #7
 800ca72:	f023 0307 	bic.w	r3, r3, #7
 800ca76:	3308      	adds	r3, #8
 800ca78:	9303      	str	r3, [sp, #12]
 800ca7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca7c:	4433      	add	r3, r6
 800ca7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca80:	e767      	b.n	800c952 <_svfiprintf_r+0x4e>
 800ca82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca86:	460c      	mov	r4, r1
 800ca88:	2001      	movs	r0, #1
 800ca8a:	e7a5      	b.n	800c9d8 <_svfiprintf_r+0xd4>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	3401      	adds	r4, #1
 800ca90:	9305      	str	r3, [sp, #20]
 800ca92:	4619      	mov	r1, r3
 800ca94:	f04f 0c0a 	mov.w	ip, #10
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca9e:	3a30      	subs	r2, #48	; 0x30
 800caa0:	2a09      	cmp	r2, #9
 800caa2:	d903      	bls.n	800caac <_svfiprintf_r+0x1a8>
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d0c5      	beq.n	800ca34 <_svfiprintf_r+0x130>
 800caa8:	9105      	str	r1, [sp, #20]
 800caaa:	e7c3      	b.n	800ca34 <_svfiprintf_r+0x130>
 800caac:	fb0c 2101 	mla	r1, ip, r1, r2
 800cab0:	4604      	mov	r4, r0
 800cab2:	2301      	movs	r3, #1
 800cab4:	e7f0      	b.n	800ca98 <_svfiprintf_r+0x194>
 800cab6:	ab03      	add	r3, sp, #12
 800cab8:	9300      	str	r3, [sp, #0]
 800caba:	462a      	mov	r2, r5
 800cabc:	4b0f      	ldr	r3, [pc, #60]	; (800cafc <_svfiprintf_r+0x1f8>)
 800cabe:	a904      	add	r1, sp, #16
 800cac0:	4638      	mov	r0, r7
 800cac2:	f7fc f9ad 	bl	8008e20 <_printf_float>
 800cac6:	1c42      	adds	r2, r0, #1
 800cac8:	4606      	mov	r6, r0
 800caca:	d1d6      	bne.n	800ca7a <_svfiprintf_r+0x176>
 800cacc:	89ab      	ldrh	r3, [r5, #12]
 800cace:	065b      	lsls	r3, r3, #25
 800cad0:	f53f af2c 	bmi.w	800c92c <_svfiprintf_r+0x28>
 800cad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cad6:	b01d      	add	sp, #116	; 0x74
 800cad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cadc:	ab03      	add	r3, sp, #12
 800cade:	9300      	str	r3, [sp, #0]
 800cae0:	462a      	mov	r2, r5
 800cae2:	4b06      	ldr	r3, [pc, #24]	; (800cafc <_svfiprintf_r+0x1f8>)
 800cae4:	a904      	add	r1, sp, #16
 800cae6:	4638      	mov	r0, r7
 800cae8:	f7fc fc3e 	bl	8009368 <_printf_i>
 800caec:	e7eb      	b.n	800cac6 <_svfiprintf_r+0x1c2>
 800caee:	bf00      	nop
 800caf0:	080106d4 	.word	0x080106d4
 800caf4:	080106de 	.word	0x080106de
 800caf8:	08008e21 	.word	0x08008e21
 800cafc:	0800c84d 	.word	0x0800c84d
 800cb00:	080106da 	.word	0x080106da

0800cb04 <_sungetc_r>:
 800cb04:	b538      	push	{r3, r4, r5, lr}
 800cb06:	1c4b      	adds	r3, r1, #1
 800cb08:	4614      	mov	r4, r2
 800cb0a:	d103      	bne.n	800cb14 <_sungetc_r+0x10>
 800cb0c:	f04f 35ff 	mov.w	r5, #4294967295
 800cb10:	4628      	mov	r0, r5
 800cb12:	bd38      	pop	{r3, r4, r5, pc}
 800cb14:	8993      	ldrh	r3, [r2, #12]
 800cb16:	f023 0320 	bic.w	r3, r3, #32
 800cb1a:	8193      	strh	r3, [r2, #12]
 800cb1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb1e:	6852      	ldr	r2, [r2, #4]
 800cb20:	b2cd      	uxtb	r5, r1
 800cb22:	b18b      	cbz	r3, 800cb48 <_sungetc_r+0x44>
 800cb24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cb26:	4293      	cmp	r3, r2
 800cb28:	dd08      	ble.n	800cb3c <_sungetc_r+0x38>
 800cb2a:	6823      	ldr	r3, [r4, #0]
 800cb2c:	1e5a      	subs	r2, r3, #1
 800cb2e:	6022      	str	r2, [r4, #0]
 800cb30:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cb34:	6863      	ldr	r3, [r4, #4]
 800cb36:	3301      	adds	r3, #1
 800cb38:	6063      	str	r3, [r4, #4]
 800cb3a:	e7e9      	b.n	800cb10 <_sungetc_r+0xc>
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	f000 fbef 	bl	800d320 <__submore>
 800cb42:	2800      	cmp	r0, #0
 800cb44:	d0f1      	beq.n	800cb2a <_sungetc_r+0x26>
 800cb46:	e7e1      	b.n	800cb0c <_sungetc_r+0x8>
 800cb48:	6921      	ldr	r1, [r4, #16]
 800cb4a:	6823      	ldr	r3, [r4, #0]
 800cb4c:	b151      	cbz	r1, 800cb64 <_sungetc_r+0x60>
 800cb4e:	4299      	cmp	r1, r3
 800cb50:	d208      	bcs.n	800cb64 <_sungetc_r+0x60>
 800cb52:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800cb56:	42a9      	cmp	r1, r5
 800cb58:	d104      	bne.n	800cb64 <_sungetc_r+0x60>
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	3201      	adds	r2, #1
 800cb5e:	6023      	str	r3, [r4, #0]
 800cb60:	6062      	str	r2, [r4, #4]
 800cb62:	e7d5      	b.n	800cb10 <_sungetc_r+0xc>
 800cb64:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cb68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb6c:	6363      	str	r3, [r4, #52]	; 0x34
 800cb6e:	2303      	movs	r3, #3
 800cb70:	63a3      	str	r3, [r4, #56]	; 0x38
 800cb72:	4623      	mov	r3, r4
 800cb74:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e7dc      	b.n	800cb38 <_sungetc_r+0x34>

0800cb7e <__ssrefill_r>:
 800cb7e:	b510      	push	{r4, lr}
 800cb80:	460c      	mov	r4, r1
 800cb82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cb84:	b169      	cbz	r1, 800cba2 <__ssrefill_r+0x24>
 800cb86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb8a:	4299      	cmp	r1, r3
 800cb8c:	d001      	beq.n	800cb92 <__ssrefill_r+0x14>
 800cb8e:	f7ff fd7d 	bl	800c68c <_free_r>
 800cb92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb94:	6063      	str	r3, [r4, #4]
 800cb96:	2000      	movs	r0, #0
 800cb98:	6360      	str	r0, [r4, #52]	; 0x34
 800cb9a:	b113      	cbz	r3, 800cba2 <__ssrefill_r+0x24>
 800cb9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cb9e:	6023      	str	r3, [r4, #0]
 800cba0:	bd10      	pop	{r4, pc}
 800cba2:	6923      	ldr	r3, [r4, #16]
 800cba4:	6023      	str	r3, [r4, #0]
 800cba6:	2300      	movs	r3, #0
 800cba8:	6063      	str	r3, [r4, #4]
 800cbaa:	89a3      	ldrh	r3, [r4, #12]
 800cbac:	f043 0320 	orr.w	r3, r3, #32
 800cbb0:	81a3      	strh	r3, [r4, #12]
 800cbb2:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb6:	e7f3      	b.n	800cba0 <__ssrefill_r+0x22>

0800cbb8 <__ssvfiscanf_r>:
 800cbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbbc:	460c      	mov	r4, r1
 800cbbe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800cbc8:	49a6      	ldr	r1, [pc, #664]	; (800ce64 <__ssvfiscanf_r+0x2ac>)
 800cbca:	91a0      	str	r1, [sp, #640]	; 0x280
 800cbcc:	f10d 0804 	add.w	r8, sp, #4
 800cbd0:	49a5      	ldr	r1, [pc, #660]	; (800ce68 <__ssvfiscanf_r+0x2b0>)
 800cbd2:	4fa6      	ldr	r7, [pc, #664]	; (800ce6c <__ssvfiscanf_r+0x2b4>)
 800cbd4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ce70 <__ssvfiscanf_r+0x2b8>
 800cbd8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cbdc:	4606      	mov	r6, r0
 800cbde:	91a1      	str	r1, [sp, #644]	; 0x284
 800cbe0:	9300      	str	r3, [sp, #0]
 800cbe2:	7813      	ldrb	r3, [r2, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f000 815a 	beq.w	800ce9e <__ssvfiscanf_r+0x2e6>
 800cbea:	5dd9      	ldrb	r1, [r3, r7]
 800cbec:	f011 0108 	ands.w	r1, r1, #8
 800cbf0:	f102 0501 	add.w	r5, r2, #1
 800cbf4:	d019      	beq.n	800cc2a <__ssvfiscanf_r+0x72>
 800cbf6:	6863      	ldr	r3, [r4, #4]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	dd0f      	ble.n	800cc1c <__ssvfiscanf_r+0x64>
 800cbfc:	6823      	ldr	r3, [r4, #0]
 800cbfe:	781a      	ldrb	r2, [r3, #0]
 800cc00:	5cba      	ldrb	r2, [r7, r2]
 800cc02:	0712      	lsls	r2, r2, #28
 800cc04:	d401      	bmi.n	800cc0a <__ssvfiscanf_r+0x52>
 800cc06:	462a      	mov	r2, r5
 800cc08:	e7eb      	b.n	800cbe2 <__ssvfiscanf_r+0x2a>
 800cc0a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cc0c:	3201      	adds	r2, #1
 800cc0e:	9245      	str	r2, [sp, #276]	; 0x114
 800cc10:	6862      	ldr	r2, [r4, #4]
 800cc12:	3301      	adds	r3, #1
 800cc14:	3a01      	subs	r2, #1
 800cc16:	6062      	str	r2, [r4, #4]
 800cc18:	6023      	str	r3, [r4, #0]
 800cc1a:	e7ec      	b.n	800cbf6 <__ssvfiscanf_r+0x3e>
 800cc1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cc1e:	4621      	mov	r1, r4
 800cc20:	4630      	mov	r0, r6
 800cc22:	4798      	blx	r3
 800cc24:	2800      	cmp	r0, #0
 800cc26:	d0e9      	beq.n	800cbfc <__ssvfiscanf_r+0x44>
 800cc28:	e7ed      	b.n	800cc06 <__ssvfiscanf_r+0x4e>
 800cc2a:	2b25      	cmp	r3, #37	; 0x25
 800cc2c:	d012      	beq.n	800cc54 <__ssvfiscanf_r+0x9c>
 800cc2e:	469a      	mov	sl, r3
 800cc30:	6863      	ldr	r3, [r4, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f340 8091 	ble.w	800cd5a <__ssvfiscanf_r+0x1a2>
 800cc38:	6822      	ldr	r2, [r4, #0]
 800cc3a:	7813      	ldrb	r3, [r2, #0]
 800cc3c:	4553      	cmp	r3, sl
 800cc3e:	f040 812e 	bne.w	800ce9e <__ssvfiscanf_r+0x2e6>
 800cc42:	6863      	ldr	r3, [r4, #4]
 800cc44:	3b01      	subs	r3, #1
 800cc46:	6063      	str	r3, [r4, #4]
 800cc48:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cc4a:	3201      	adds	r2, #1
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	6022      	str	r2, [r4, #0]
 800cc50:	9345      	str	r3, [sp, #276]	; 0x114
 800cc52:	e7d8      	b.n	800cc06 <__ssvfiscanf_r+0x4e>
 800cc54:	9141      	str	r1, [sp, #260]	; 0x104
 800cc56:	9143      	str	r1, [sp, #268]	; 0x10c
 800cc58:	7853      	ldrb	r3, [r2, #1]
 800cc5a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc5c:	bf02      	ittt	eq
 800cc5e:	2310      	moveq	r3, #16
 800cc60:	1c95      	addeq	r5, r2, #2
 800cc62:	9341      	streq	r3, [sp, #260]	; 0x104
 800cc64:	220a      	movs	r2, #10
 800cc66:	46aa      	mov	sl, r5
 800cc68:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800cc6c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800cc70:	2b09      	cmp	r3, #9
 800cc72:	d91d      	bls.n	800ccb0 <__ssvfiscanf_r+0xf8>
 800cc74:	487e      	ldr	r0, [pc, #504]	; (800ce70 <__ssvfiscanf_r+0x2b8>)
 800cc76:	2203      	movs	r2, #3
 800cc78:	f7f3 faca 	bl	8000210 <memchr>
 800cc7c:	b140      	cbz	r0, 800cc90 <__ssvfiscanf_r+0xd8>
 800cc7e:	2301      	movs	r3, #1
 800cc80:	eba0 0009 	sub.w	r0, r0, r9
 800cc84:	fa03 f000 	lsl.w	r0, r3, r0
 800cc88:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cc8a:	4318      	orrs	r0, r3
 800cc8c:	9041      	str	r0, [sp, #260]	; 0x104
 800cc8e:	4655      	mov	r5, sl
 800cc90:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cc94:	2b78      	cmp	r3, #120	; 0x78
 800cc96:	d806      	bhi.n	800cca6 <__ssvfiscanf_r+0xee>
 800cc98:	2b57      	cmp	r3, #87	; 0x57
 800cc9a:	d810      	bhi.n	800ccbe <__ssvfiscanf_r+0x106>
 800cc9c:	2b25      	cmp	r3, #37	; 0x25
 800cc9e:	d0c6      	beq.n	800cc2e <__ssvfiscanf_r+0x76>
 800cca0:	d856      	bhi.n	800cd50 <__ssvfiscanf_r+0x198>
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d064      	beq.n	800cd70 <__ssvfiscanf_r+0x1b8>
 800cca6:	2303      	movs	r3, #3
 800cca8:	9347      	str	r3, [sp, #284]	; 0x11c
 800ccaa:	230a      	movs	r3, #10
 800ccac:	9342      	str	r3, [sp, #264]	; 0x108
 800ccae:	e071      	b.n	800cd94 <__ssvfiscanf_r+0x1dc>
 800ccb0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ccb2:	fb02 1103 	mla	r1, r2, r3, r1
 800ccb6:	3930      	subs	r1, #48	; 0x30
 800ccb8:	9143      	str	r1, [sp, #268]	; 0x10c
 800ccba:	4655      	mov	r5, sl
 800ccbc:	e7d3      	b.n	800cc66 <__ssvfiscanf_r+0xae>
 800ccbe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ccc2:	2a20      	cmp	r2, #32
 800ccc4:	d8ef      	bhi.n	800cca6 <__ssvfiscanf_r+0xee>
 800ccc6:	a101      	add	r1, pc, #4	; (adr r1, 800cccc <__ssvfiscanf_r+0x114>)
 800ccc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cccc:	0800cd7f 	.word	0x0800cd7f
 800ccd0:	0800cca7 	.word	0x0800cca7
 800ccd4:	0800cca7 	.word	0x0800cca7
 800ccd8:	0800cddd 	.word	0x0800cddd
 800ccdc:	0800cca7 	.word	0x0800cca7
 800cce0:	0800cca7 	.word	0x0800cca7
 800cce4:	0800cca7 	.word	0x0800cca7
 800cce8:	0800cca7 	.word	0x0800cca7
 800ccec:	0800cca7 	.word	0x0800cca7
 800ccf0:	0800cca7 	.word	0x0800cca7
 800ccf4:	0800cca7 	.word	0x0800cca7
 800ccf8:	0800cdf3 	.word	0x0800cdf3
 800ccfc:	0800cdc9 	.word	0x0800cdc9
 800cd00:	0800cd57 	.word	0x0800cd57
 800cd04:	0800cd57 	.word	0x0800cd57
 800cd08:	0800cd57 	.word	0x0800cd57
 800cd0c:	0800cca7 	.word	0x0800cca7
 800cd10:	0800cdcd 	.word	0x0800cdcd
 800cd14:	0800cca7 	.word	0x0800cca7
 800cd18:	0800cca7 	.word	0x0800cca7
 800cd1c:	0800cca7 	.word	0x0800cca7
 800cd20:	0800cca7 	.word	0x0800cca7
 800cd24:	0800ce03 	.word	0x0800ce03
 800cd28:	0800cdd5 	.word	0x0800cdd5
 800cd2c:	0800cd77 	.word	0x0800cd77
 800cd30:	0800cca7 	.word	0x0800cca7
 800cd34:	0800cca7 	.word	0x0800cca7
 800cd38:	0800cdff 	.word	0x0800cdff
 800cd3c:	0800cca7 	.word	0x0800cca7
 800cd40:	0800cdc9 	.word	0x0800cdc9
 800cd44:	0800cca7 	.word	0x0800cca7
 800cd48:	0800cca7 	.word	0x0800cca7
 800cd4c:	0800cd7f 	.word	0x0800cd7f
 800cd50:	3b45      	subs	r3, #69	; 0x45
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d8a7      	bhi.n	800cca6 <__ssvfiscanf_r+0xee>
 800cd56:	2305      	movs	r3, #5
 800cd58:	e01b      	b.n	800cd92 <__ssvfiscanf_r+0x1da>
 800cd5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cd5c:	4621      	mov	r1, r4
 800cd5e:	4630      	mov	r0, r6
 800cd60:	4798      	blx	r3
 800cd62:	2800      	cmp	r0, #0
 800cd64:	f43f af68 	beq.w	800cc38 <__ssvfiscanf_r+0x80>
 800cd68:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	f040 808d 	bne.w	800ce8a <__ssvfiscanf_r+0x2d2>
 800cd70:	f04f 30ff 	mov.w	r0, #4294967295
 800cd74:	e08f      	b.n	800ce96 <__ssvfiscanf_r+0x2de>
 800cd76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cd78:	f042 0220 	orr.w	r2, r2, #32
 800cd7c:	9241      	str	r2, [sp, #260]	; 0x104
 800cd7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cd80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd84:	9241      	str	r2, [sp, #260]	; 0x104
 800cd86:	2210      	movs	r2, #16
 800cd88:	2b6f      	cmp	r3, #111	; 0x6f
 800cd8a:	9242      	str	r2, [sp, #264]	; 0x108
 800cd8c:	bf34      	ite	cc
 800cd8e:	2303      	movcc	r3, #3
 800cd90:	2304      	movcs	r3, #4
 800cd92:	9347      	str	r3, [sp, #284]	; 0x11c
 800cd94:	6863      	ldr	r3, [r4, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	dd42      	ble.n	800ce20 <__ssvfiscanf_r+0x268>
 800cd9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cd9c:	0659      	lsls	r1, r3, #25
 800cd9e:	d404      	bmi.n	800cdaa <__ssvfiscanf_r+0x1f2>
 800cda0:	6823      	ldr	r3, [r4, #0]
 800cda2:	781a      	ldrb	r2, [r3, #0]
 800cda4:	5cba      	ldrb	r2, [r7, r2]
 800cda6:	0712      	lsls	r2, r2, #28
 800cda8:	d441      	bmi.n	800ce2e <__ssvfiscanf_r+0x276>
 800cdaa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	dc50      	bgt.n	800ce52 <__ssvfiscanf_r+0x29a>
 800cdb0:	466b      	mov	r3, sp
 800cdb2:	4622      	mov	r2, r4
 800cdb4:	a941      	add	r1, sp, #260	; 0x104
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	f000 f876 	bl	800cea8 <_scanf_chars>
 800cdbc:	2801      	cmp	r0, #1
 800cdbe:	d06e      	beq.n	800ce9e <__ssvfiscanf_r+0x2e6>
 800cdc0:	2802      	cmp	r0, #2
 800cdc2:	f47f af20 	bne.w	800cc06 <__ssvfiscanf_r+0x4e>
 800cdc6:	e7cf      	b.n	800cd68 <__ssvfiscanf_r+0x1b0>
 800cdc8:	220a      	movs	r2, #10
 800cdca:	e7dd      	b.n	800cd88 <__ssvfiscanf_r+0x1d0>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	9342      	str	r3, [sp, #264]	; 0x108
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e7de      	b.n	800cd92 <__ssvfiscanf_r+0x1da>
 800cdd4:	2308      	movs	r3, #8
 800cdd6:	9342      	str	r3, [sp, #264]	; 0x108
 800cdd8:	2304      	movs	r3, #4
 800cdda:	e7da      	b.n	800cd92 <__ssvfiscanf_r+0x1da>
 800cddc:	4629      	mov	r1, r5
 800cdde:	4640      	mov	r0, r8
 800cde0:	f000 f9de 	bl	800d1a0 <__sccl>
 800cde4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cde6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdea:	9341      	str	r3, [sp, #260]	; 0x104
 800cdec:	4605      	mov	r5, r0
 800cdee:	2301      	movs	r3, #1
 800cdf0:	e7cf      	b.n	800cd92 <__ssvfiscanf_r+0x1da>
 800cdf2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cdf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdf8:	9341      	str	r3, [sp, #260]	; 0x104
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	e7c9      	b.n	800cd92 <__ssvfiscanf_r+0x1da>
 800cdfe:	2302      	movs	r3, #2
 800ce00:	e7c7      	b.n	800cd92 <__ssvfiscanf_r+0x1da>
 800ce02:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ce04:	06c3      	lsls	r3, r0, #27
 800ce06:	f53f aefe 	bmi.w	800cc06 <__ssvfiscanf_r+0x4e>
 800ce0a:	9b00      	ldr	r3, [sp, #0]
 800ce0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ce0e:	1d19      	adds	r1, r3, #4
 800ce10:	9100      	str	r1, [sp, #0]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f010 0f01 	tst.w	r0, #1
 800ce18:	bf14      	ite	ne
 800ce1a:	801a      	strhne	r2, [r3, #0]
 800ce1c:	601a      	streq	r2, [r3, #0]
 800ce1e:	e6f2      	b.n	800cc06 <__ssvfiscanf_r+0x4e>
 800ce20:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ce22:	4621      	mov	r1, r4
 800ce24:	4630      	mov	r0, r6
 800ce26:	4798      	blx	r3
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d0b6      	beq.n	800cd9a <__ssvfiscanf_r+0x1e2>
 800ce2c:	e79c      	b.n	800cd68 <__ssvfiscanf_r+0x1b0>
 800ce2e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ce30:	3201      	adds	r2, #1
 800ce32:	9245      	str	r2, [sp, #276]	; 0x114
 800ce34:	6862      	ldr	r2, [r4, #4]
 800ce36:	3a01      	subs	r2, #1
 800ce38:	2a00      	cmp	r2, #0
 800ce3a:	6062      	str	r2, [r4, #4]
 800ce3c:	dd02      	ble.n	800ce44 <__ssvfiscanf_r+0x28c>
 800ce3e:	3301      	adds	r3, #1
 800ce40:	6023      	str	r3, [r4, #0]
 800ce42:	e7ad      	b.n	800cda0 <__ssvfiscanf_r+0x1e8>
 800ce44:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ce46:	4621      	mov	r1, r4
 800ce48:	4630      	mov	r0, r6
 800ce4a:	4798      	blx	r3
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	d0a7      	beq.n	800cda0 <__ssvfiscanf_r+0x1e8>
 800ce50:	e78a      	b.n	800cd68 <__ssvfiscanf_r+0x1b0>
 800ce52:	2b04      	cmp	r3, #4
 800ce54:	dc0e      	bgt.n	800ce74 <__ssvfiscanf_r+0x2bc>
 800ce56:	466b      	mov	r3, sp
 800ce58:	4622      	mov	r2, r4
 800ce5a:	a941      	add	r1, sp, #260	; 0x104
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f000 f87d 	bl	800cf5c <_scanf_i>
 800ce62:	e7ab      	b.n	800cdbc <__ssvfiscanf_r+0x204>
 800ce64:	0800cb05 	.word	0x0800cb05
 800ce68:	0800cb7f 	.word	0x0800cb7f
 800ce6c:	08010371 	.word	0x08010371
 800ce70:	080106da 	.word	0x080106da
 800ce74:	4b0b      	ldr	r3, [pc, #44]	; (800cea4 <__ssvfiscanf_r+0x2ec>)
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	f43f aec5 	beq.w	800cc06 <__ssvfiscanf_r+0x4e>
 800ce7c:	466b      	mov	r3, sp
 800ce7e:	4622      	mov	r2, r4
 800ce80:	a941      	add	r1, sp, #260	; 0x104
 800ce82:	4630      	mov	r0, r6
 800ce84:	f7fc fb96 	bl	80095b4 <_scanf_float>
 800ce88:	e798      	b.n	800cdbc <__ssvfiscanf_r+0x204>
 800ce8a:	89a3      	ldrh	r3, [r4, #12]
 800ce8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ce90:	bf18      	it	ne
 800ce92:	f04f 30ff 	movne.w	r0, #4294967295
 800ce96:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ce9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce9e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cea0:	e7f9      	b.n	800ce96 <__ssvfiscanf_r+0x2de>
 800cea2:	bf00      	nop
 800cea4:	080095b5 	.word	0x080095b5

0800cea8 <_scanf_chars>:
 800cea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceac:	4615      	mov	r5, r2
 800ceae:	688a      	ldr	r2, [r1, #8]
 800ceb0:	4680      	mov	r8, r0
 800ceb2:	460c      	mov	r4, r1
 800ceb4:	b932      	cbnz	r2, 800cec4 <_scanf_chars+0x1c>
 800ceb6:	698a      	ldr	r2, [r1, #24]
 800ceb8:	2a00      	cmp	r2, #0
 800ceba:	bf0c      	ite	eq
 800cebc:	2201      	moveq	r2, #1
 800cebe:	f04f 32ff 	movne.w	r2, #4294967295
 800cec2:	608a      	str	r2, [r1, #8]
 800cec4:	6822      	ldr	r2, [r4, #0]
 800cec6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cf58 <_scanf_chars+0xb0>
 800ceca:	06d1      	lsls	r1, r2, #27
 800cecc:	bf5f      	itttt	pl
 800cece:	681a      	ldrpl	r2, [r3, #0]
 800ced0:	1d11      	addpl	r1, r2, #4
 800ced2:	6019      	strpl	r1, [r3, #0]
 800ced4:	6816      	ldrpl	r6, [r2, #0]
 800ced6:	2700      	movs	r7, #0
 800ced8:	69a0      	ldr	r0, [r4, #24]
 800ceda:	b188      	cbz	r0, 800cf00 <_scanf_chars+0x58>
 800cedc:	2801      	cmp	r0, #1
 800cede:	d107      	bne.n	800cef0 <_scanf_chars+0x48>
 800cee0:	682a      	ldr	r2, [r5, #0]
 800cee2:	7811      	ldrb	r1, [r2, #0]
 800cee4:	6962      	ldr	r2, [r4, #20]
 800cee6:	5c52      	ldrb	r2, [r2, r1]
 800cee8:	b952      	cbnz	r2, 800cf00 <_scanf_chars+0x58>
 800ceea:	2f00      	cmp	r7, #0
 800ceec:	d031      	beq.n	800cf52 <_scanf_chars+0xaa>
 800ceee:	e022      	b.n	800cf36 <_scanf_chars+0x8e>
 800cef0:	2802      	cmp	r0, #2
 800cef2:	d120      	bne.n	800cf36 <_scanf_chars+0x8e>
 800cef4:	682b      	ldr	r3, [r5, #0]
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cefc:	071b      	lsls	r3, r3, #28
 800cefe:	d41a      	bmi.n	800cf36 <_scanf_chars+0x8e>
 800cf00:	6823      	ldr	r3, [r4, #0]
 800cf02:	06da      	lsls	r2, r3, #27
 800cf04:	bf5e      	ittt	pl
 800cf06:	682b      	ldrpl	r3, [r5, #0]
 800cf08:	781b      	ldrbpl	r3, [r3, #0]
 800cf0a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cf0e:	682a      	ldr	r2, [r5, #0]
 800cf10:	686b      	ldr	r3, [r5, #4]
 800cf12:	3201      	adds	r2, #1
 800cf14:	602a      	str	r2, [r5, #0]
 800cf16:	68a2      	ldr	r2, [r4, #8]
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	3a01      	subs	r2, #1
 800cf1c:	606b      	str	r3, [r5, #4]
 800cf1e:	3701      	adds	r7, #1
 800cf20:	60a2      	str	r2, [r4, #8]
 800cf22:	b142      	cbz	r2, 800cf36 <_scanf_chars+0x8e>
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	dcd7      	bgt.n	800ced8 <_scanf_chars+0x30>
 800cf28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	4640      	mov	r0, r8
 800cf30:	4798      	blx	r3
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d0d0      	beq.n	800ced8 <_scanf_chars+0x30>
 800cf36:	6823      	ldr	r3, [r4, #0]
 800cf38:	f013 0310 	ands.w	r3, r3, #16
 800cf3c:	d105      	bne.n	800cf4a <_scanf_chars+0xa2>
 800cf3e:	68e2      	ldr	r2, [r4, #12]
 800cf40:	3201      	adds	r2, #1
 800cf42:	60e2      	str	r2, [r4, #12]
 800cf44:	69a2      	ldr	r2, [r4, #24]
 800cf46:	b102      	cbz	r2, 800cf4a <_scanf_chars+0xa2>
 800cf48:	7033      	strb	r3, [r6, #0]
 800cf4a:	6923      	ldr	r3, [r4, #16]
 800cf4c:	443b      	add	r3, r7
 800cf4e:	6123      	str	r3, [r4, #16]
 800cf50:	2000      	movs	r0, #0
 800cf52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf56:	bf00      	nop
 800cf58:	08010371 	.word	0x08010371

0800cf5c <_scanf_i>:
 800cf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf60:	4698      	mov	r8, r3
 800cf62:	4b76      	ldr	r3, [pc, #472]	; (800d13c <_scanf_i+0x1e0>)
 800cf64:	460c      	mov	r4, r1
 800cf66:	4682      	mov	sl, r0
 800cf68:	4616      	mov	r6, r2
 800cf6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf6e:	b087      	sub	sp, #28
 800cf70:	ab03      	add	r3, sp, #12
 800cf72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cf76:	4b72      	ldr	r3, [pc, #456]	; (800d140 <_scanf_i+0x1e4>)
 800cf78:	69a1      	ldr	r1, [r4, #24]
 800cf7a:	4a72      	ldr	r2, [pc, #456]	; (800d144 <_scanf_i+0x1e8>)
 800cf7c:	2903      	cmp	r1, #3
 800cf7e:	bf18      	it	ne
 800cf80:	461a      	movne	r2, r3
 800cf82:	68a3      	ldr	r3, [r4, #8]
 800cf84:	9201      	str	r2, [sp, #4]
 800cf86:	1e5a      	subs	r2, r3, #1
 800cf88:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cf8c:	bf88      	it	hi
 800cf8e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cf92:	4627      	mov	r7, r4
 800cf94:	bf82      	ittt	hi
 800cf96:	eb03 0905 	addhi.w	r9, r3, r5
 800cf9a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cf9e:	60a3      	strhi	r3, [r4, #8]
 800cfa0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cfa4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cfa8:	bf98      	it	ls
 800cfaa:	f04f 0900 	movls.w	r9, #0
 800cfae:	6023      	str	r3, [r4, #0]
 800cfb0:	463d      	mov	r5, r7
 800cfb2:	f04f 0b00 	mov.w	fp, #0
 800cfb6:	6831      	ldr	r1, [r6, #0]
 800cfb8:	ab03      	add	r3, sp, #12
 800cfba:	7809      	ldrb	r1, [r1, #0]
 800cfbc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cfc0:	2202      	movs	r2, #2
 800cfc2:	f7f3 f925 	bl	8000210 <memchr>
 800cfc6:	b328      	cbz	r0, 800d014 <_scanf_i+0xb8>
 800cfc8:	f1bb 0f01 	cmp.w	fp, #1
 800cfcc:	d159      	bne.n	800d082 <_scanf_i+0x126>
 800cfce:	6862      	ldr	r2, [r4, #4]
 800cfd0:	b92a      	cbnz	r2, 800cfde <_scanf_i+0x82>
 800cfd2:	6822      	ldr	r2, [r4, #0]
 800cfd4:	2308      	movs	r3, #8
 800cfd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cfda:	6063      	str	r3, [r4, #4]
 800cfdc:	6022      	str	r2, [r4, #0]
 800cfde:	6822      	ldr	r2, [r4, #0]
 800cfe0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cfe4:	6022      	str	r2, [r4, #0]
 800cfe6:	68a2      	ldr	r2, [r4, #8]
 800cfe8:	1e51      	subs	r1, r2, #1
 800cfea:	60a1      	str	r1, [r4, #8]
 800cfec:	b192      	cbz	r2, 800d014 <_scanf_i+0xb8>
 800cfee:	6832      	ldr	r2, [r6, #0]
 800cff0:	1c51      	adds	r1, r2, #1
 800cff2:	6031      	str	r1, [r6, #0]
 800cff4:	7812      	ldrb	r2, [r2, #0]
 800cff6:	f805 2b01 	strb.w	r2, [r5], #1
 800cffa:	6872      	ldr	r2, [r6, #4]
 800cffc:	3a01      	subs	r2, #1
 800cffe:	2a00      	cmp	r2, #0
 800d000:	6072      	str	r2, [r6, #4]
 800d002:	dc07      	bgt.n	800d014 <_scanf_i+0xb8>
 800d004:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d008:	4631      	mov	r1, r6
 800d00a:	4650      	mov	r0, sl
 800d00c:	4790      	blx	r2
 800d00e:	2800      	cmp	r0, #0
 800d010:	f040 8085 	bne.w	800d11e <_scanf_i+0x1c2>
 800d014:	f10b 0b01 	add.w	fp, fp, #1
 800d018:	f1bb 0f03 	cmp.w	fp, #3
 800d01c:	d1cb      	bne.n	800cfb6 <_scanf_i+0x5a>
 800d01e:	6863      	ldr	r3, [r4, #4]
 800d020:	b90b      	cbnz	r3, 800d026 <_scanf_i+0xca>
 800d022:	230a      	movs	r3, #10
 800d024:	6063      	str	r3, [r4, #4]
 800d026:	6863      	ldr	r3, [r4, #4]
 800d028:	4947      	ldr	r1, [pc, #284]	; (800d148 <_scanf_i+0x1ec>)
 800d02a:	6960      	ldr	r0, [r4, #20]
 800d02c:	1ac9      	subs	r1, r1, r3
 800d02e:	f000 f8b7 	bl	800d1a0 <__sccl>
 800d032:	f04f 0b00 	mov.w	fp, #0
 800d036:	68a3      	ldr	r3, [r4, #8]
 800d038:	6822      	ldr	r2, [r4, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d03d      	beq.n	800d0ba <_scanf_i+0x15e>
 800d03e:	6831      	ldr	r1, [r6, #0]
 800d040:	6960      	ldr	r0, [r4, #20]
 800d042:	f891 c000 	ldrb.w	ip, [r1]
 800d046:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d035      	beq.n	800d0ba <_scanf_i+0x15e>
 800d04e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d052:	d124      	bne.n	800d09e <_scanf_i+0x142>
 800d054:	0510      	lsls	r0, r2, #20
 800d056:	d522      	bpl.n	800d09e <_scanf_i+0x142>
 800d058:	f10b 0b01 	add.w	fp, fp, #1
 800d05c:	f1b9 0f00 	cmp.w	r9, #0
 800d060:	d003      	beq.n	800d06a <_scanf_i+0x10e>
 800d062:	3301      	adds	r3, #1
 800d064:	f109 39ff 	add.w	r9, r9, #4294967295
 800d068:	60a3      	str	r3, [r4, #8]
 800d06a:	6873      	ldr	r3, [r6, #4]
 800d06c:	3b01      	subs	r3, #1
 800d06e:	2b00      	cmp	r3, #0
 800d070:	6073      	str	r3, [r6, #4]
 800d072:	dd1b      	ble.n	800d0ac <_scanf_i+0x150>
 800d074:	6833      	ldr	r3, [r6, #0]
 800d076:	3301      	adds	r3, #1
 800d078:	6033      	str	r3, [r6, #0]
 800d07a:	68a3      	ldr	r3, [r4, #8]
 800d07c:	3b01      	subs	r3, #1
 800d07e:	60a3      	str	r3, [r4, #8]
 800d080:	e7d9      	b.n	800d036 <_scanf_i+0xda>
 800d082:	f1bb 0f02 	cmp.w	fp, #2
 800d086:	d1ae      	bne.n	800cfe6 <_scanf_i+0x8a>
 800d088:	6822      	ldr	r2, [r4, #0]
 800d08a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d08e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d092:	d1bf      	bne.n	800d014 <_scanf_i+0xb8>
 800d094:	2310      	movs	r3, #16
 800d096:	6063      	str	r3, [r4, #4]
 800d098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d09c:	e7a2      	b.n	800cfe4 <_scanf_i+0x88>
 800d09e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d0a2:	6022      	str	r2, [r4, #0]
 800d0a4:	780b      	ldrb	r3, [r1, #0]
 800d0a6:	f805 3b01 	strb.w	r3, [r5], #1
 800d0aa:	e7de      	b.n	800d06a <_scanf_i+0x10e>
 800d0ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d0b0:	4631      	mov	r1, r6
 800d0b2:	4650      	mov	r0, sl
 800d0b4:	4798      	blx	r3
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d0df      	beq.n	800d07a <_scanf_i+0x11e>
 800d0ba:	6823      	ldr	r3, [r4, #0]
 800d0bc:	05db      	lsls	r3, r3, #23
 800d0be:	d50d      	bpl.n	800d0dc <_scanf_i+0x180>
 800d0c0:	42bd      	cmp	r5, r7
 800d0c2:	d909      	bls.n	800d0d8 <_scanf_i+0x17c>
 800d0c4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d0c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d0cc:	4632      	mov	r2, r6
 800d0ce:	4650      	mov	r0, sl
 800d0d0:	4798      	blx	r3
 800d0d2:	f105 39ff 	add.w	r9, r5, #4294967295
 800d0d6:	464d      	mov	r5, r9
 800d0d8:	42bd      	cmp	r5, r7
 800d0da:	d02d      	beq.n	800d138 <_scanf_i+0x1dc>
 800d0dc:	6822      	ldr	r2, [r4, #0]
 800d0de:	f012 0210 	ands.w	r2, r2, #16
 800d0e2:	d113      	bne.n	800d10c <_scanf_i+0x1b0>
 800d0e4:	702a      	strb	r2, [r5, #0]
 800d0e6:	6863      	ldr	r3, [r4, #4]
 800d0e8:	9e01      	ldr	r6, [sp, #4]
 800d0ea:	4639      	mov	r1, r7
 800d0ec:	4650      	mov	r0, sl
 800d0ee:	47b0      	blx	r6
 800d0f0:	6821      	ldr	r1, [r4, #0]
 800d0f2:	f8d8 3000 	ldr.w	r3, [r8]
 800d0f6:	f011 0f20 	tst.w	r1, #32
 800d0fa:	d013      	beq.n	800d124 <_scanf_i+0x1c8>
 800d0fc:	1d1a      	adds	r2, r3, #4
 800d0fe:	f8c8 2000 	str.w	r2, [r8]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6018      	str	r0, [r3, #0]
 800d106:	68e3      	ldr	r3, [r4, #12]
 800d108:	3301      	adds	r3, #1
 800d10a:	60e3      	str	r3, [r4, #12]
 800d10c:	1bed      	subs	r5, r5, r7
 800d10e:	44ab      	add	fp, r5
 800d110:	6925      	ldr	r5, [r4, #16]
 800d112:	445d      	add	r5, fp
 800d114:	6125      	str	r5, [r4, #16]
 800d116:	2000      	movs	r0, #0
 800d118:	b007      	add	sp, #28
 800d11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d11e:	f04f 0b00 	mov.w	fp, #0
 800d122:	e7ca      	b.n	800d0ba <_scanf_i+0x15e>
 800d124:	1d1a      	adds	r2, r3, #4
 800d126:	f8c8 2000 	str.w	r2, [r8]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f011 0f01 	tst.w	r1, #1
 800d130:	bf14      	ite	ne
 800d132:	8018      	strhne	r0, [r3, #0]
 800d134:	6018      	streq	r0, [r3, #0]
 800d136:	e7e6      	b.n	800d106 <_scanf_i+0x1aa>
 800d138:	2001      	movs	r0, #1
 800d13a:	e7ed      	b.n	800d118 <_scanf_i+0x1bc>
 800d13c:	080102d4 	.word	0x080102d4
 800d140:	0800d31d 	.word	0x0800d31d
 800d144:	0800a85d 	.word	0x0800a85d
 800d148:	080106fe 	.word	0x080106fe

0800d14c <_read_r>:
 800d14c:	b538      	push	{r3, r4, r5, lr}
 800d14e:	4d07      	ldr	r5, [pc, #28]	; (800d16c <_read_r+0x20>)
 800d150:	4604      	mov	r4, r0
 800d152:	4608      	mov	r0, r1
 800d154:	4611      	mov	r1, r2
 800d156:	2200      	movs	r2, #0
 800d158:	602a      	str	r2, [r5, #0]
 800d15a:	461a      	mov	r2, r3
 800d15c:	f7f5 fe9c 	bl	8002e98 <_read>
 800d160:	1c43      	adds	r3, r0, #1
 800d162:	d102      	bne.n	800d16a <_read_r+0x1e>
 800d164:	682b      	ldr	r3, [r5, #0]
 800d166:	b103      	cbz	r3, 800d16a <_read_r+0x1e>
 800d168:	6023      	str	r3, [r4, #0]
 800d16a:	bd38      	pop	{r3, r4, r5, pc}
 800d16c:	20013ad8 	.word	0x20013ad8

0800d170 <nan>:
 800d170:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d178 <nan+0x8>
 800d174:	4770      	bx	lr
 800d176:	bf00      	nop
 800d178:	00000000 	.word	0x00000000
 800d17c:	7ff80000 	.word	0x7ff80000

0800d180 <_sbrk_r>:
 800d180:	b538      	push	{r3, r4, r5, lr}
 800d182:	4d06      	ldr	r5, [pc, #24]	; (800d19c <_sbrk_r+0x1c>)
 800d184:	2300      	movs	r3, #0
 800d186:	4604      	mov	r4, r0
 800d188:	4608      	mov	r0, r1
 800d18a:	602b      	str	r3, [r5, #0]
 800d18c:	f7f5 fef2 	bl	8002f74 <_sbrk>
 800d190:	1c43      	adds	r3, r0, #1
 800d192:	d102      	bne.n	800d19a <_sbrk_r+0x1a>
 800d194:	682b      	ldr	r3, [r5, #0]
 800d196:	b103      	cbz	r3, 800d19a <_sbrk_r+0x1a>
 800d198:	6023      	str	r3, [r4, #0]
 800d19a:	bd38      	pop	{r3, r4, r5, pc}
 800d19c:	20013ad8 	.word	0x20013ad8

0800d1a0 <__sccl>:
 800d1a0:	b570      	push	{r4, r5, r6, lr}
 800d1a2:	780b      	ldrb	r3, [r1, #0]
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	2b5e      	cmp	r3, #94	; 0x5e
 800d1a8:	bf0b      	itete	eq
 800d1aa:	784b      	ldrbeq	r3, [r1, #1]
 800d1ac:	1c48      	addne	r0, r1, #1
 800d1ae:	1c88      	addeq	r0, r1, #2
 800d1b0:	2200      	movne	r2, #0
 800d1b2:	bf08      	it	eq
 800d1b4:	2201      	moveq	r2, #1
 800d1b6:	1e61      	subs	r1, r4, #1
 800d1b8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d1bc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d1c0:	42a9      	cmp	r1, r5
 800d1c2:	d1fb      	bne.n	800d1bc <__sccl+0x1c>
 800d1c4:	b90b      	cbnz	r3, 800d1ca <__sccl+0x2a>
 800d1c6:	3801      	subs	r0, #1
 800d1c8:	bd70      	pop	{r4, r5, r6, pc}
 800d1ca:	f082 0201 	eor.w	r2, r2, #1
 800d1ce:	54e2      	strb	r2, [r4, r3]
 800d1d0:	4605      	mov	r5, r0
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d1d8:	292d      	cmp	r1, #45	; 0x2d
 800d1da:	d006      	beq.n	800d1ea <__sccl+0x4a>
 800d1dc:	295d      	cmp	r1, #93	; 0x5d
 800d1de:	d0f3      	beq.n	800d1c8 <__sccl+0x28>
 800d1e0:	b909      	cbnz	r1, 800d1e6 <__sccl+0x46>
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	e7f0      	b.n	800d1c8 <__sccl+0x28>
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	e7f1      	b.n	800d1ce <__sccl+0x2e>
 800d1ea:	786e      	ldrb	r6, [r5, #1]
 800d1ec:	2e5d      	cmp	r6, #93	; 0x5d
 800d1ee:	d0fa      	beq.n	800d1e6 <__sccl+0x46>
 800d1f0:	42b3      	cmp	r3, r6
 800d1f2:	dcf8      	bgt.n	800d1e6 <__sccl+0x46>
 800d1f4:	3502      	adds	r5, #2
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	3101      	adds	r1, #1
 800d1fa:	428e      	cmp	r6, r1
 800d1fc:	5462      	strb	r2, [r4, r1]
 800d1fe:	dcfb      	bgt.n	800d1f8 <__sccl+0x58>
 800d200:	1af1      	subs	r1, r6, r3
 800d202:	3901      	subs	r1, #1
 800d204:	1c58      	adds	r0, r3, #1
 800d206:	42b3      	cmp	r3, r6
 800d208:	bfa8      	it	ge
 800d20a:	2100      	movge	r1, #0
 800d20c:	1843      	adds	r3, r0, r1
 800d20e:	e7e0      	b.n	800d1d2 <__sccl+0x32>

0800d210 <strncmp>:
 800d210:	b510      	push	{r4, lr}
 800d212:	b17a      	cbz	r2, 800d234 <strncmp+0x24>
 800d214:	4603      	mov	r3, r0
 800d216:	3901      	subs	r1, #1
 800d218:	1884      	adds	r4, r0, r2
 800d21a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d21e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d222:	4290      	cmp	r0, r2
 800d224:	d101      	bne.n	800d22a <strncmp+0x1a>
 800d226:	42a3      	cmp	r3, r4
 800d228:	d101      	bne.n	800d22e <strncmp+0x1e>
 800d22a:	1a80      	subs	r0, r0, r2
 800d22c:	bd10      	pop	{r4, pc}
 800d22e:	2800      	cmp	r0, #0
 800d230:	d1f3      	bne.n	800d21a <strncmp+0xa>
 800d232:	e7fa      	b.n	800d22a <strncmp+0x1a>
 800d234:	4610      	mov	r0, r2
 800d236:	e7f9      	b.n	800d22c <strncmp+0x1c>

0800d238 <_strtoul_l.constprop.0>:
 800d238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d23c:	4f36      	ldr	r7, [pc, #216]	; (800d318 <_strtoul_l.constprop.0+0xe0>)
 800d23e:	4686      	mov	lr, r0
 800d240:	460d      	mov	r5, r1
 800d242:	4628      	mov	r0, r5
 800d244:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d248:	5de6      	ldrb	r6, [r4, r7]
 800d24a:	f016 0608 	ands.w	r6, r6, #8
 800d24e:	d1f8      	bne.n	800d242 <_strtoul_l.constprop.0+0xa>
 800d250:	2c2d      	cmp	r4, #45	; 0x2d
 800d252:	d12f      	bne.n	800d2b4 <_strtoul_l.constprop.0+0x7c>
 800d254:	782c      	ldrb	r4, [r5, #0]
 800d256:	2601      	movs	r6, #1
 800d258:	1c85      	adds	r5, r0, #2
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d057      	beq.n	800d30e <_strtoul_l.constprop.0+0xd6>
 800d25e:	2b10      	cmp	r3, #16
 800d260:	d109      	bne.n	800d276 <_strtoul_l.constprop.0+0x3e>
 800d262:	2c30      	cmp	r4, #48	; 0x30
 800d264:	d107      	bne.n	800d276 <_strtoul_l.constprop.0+0x3e>
 800d266:	7828      	ldrb	r0, [r5, #0]
 800d268:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d26c:	2858      	cmp	r0, #88	; 0x58
 800d26e:	d149      	bne.n	800d304 <_strtoul_l.constprop.0+0xcc>
 800d270:	786c      	ldrb	r4, [r5, #1]
 800d272:	2310      	movs	r3, #16
 800d274:	3502      	adds	r5, #2
 800d276:	f04f 38ff 	mov.w	r8, #4294967295
 800d27a:	2700      	movs	r7, #0
 800d27c:	fbb8 f8f3 	udiv	r8, r8, r3
 800d280:	fb03 f908 	mul.w	r9, r3, r8
 800d284:	ea6f 0909 	mvn.w	r9, r9
 800d288:	4638      	mov	r0, r7
 800d28a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d28e:	f1bc 0f09 	cmp.w	ip, #9
 800d292:	d814      	bhi.n	800d2be <_strtoul_l.constprop.0+0x86>
 800d294:	4664      	mov	r4, ip
 800d296:	42a3      	cmp	r3, r4
 800d298:	dd22      	ble.n	800d2e0 <_strtoul_l.constprop.0+0xa8>
 800d29a:	2f00      	cmp	r7, #0
 800d29c:	db1d      	blt.n	800d2da <_strtoul_l.constprop.0+0xa2>
 800d29e:	4580      	cmp	r8, r0
 800d2a0:	d31b      	bcc.n	800d2da <_strtoul_l.constprop.0+0xa2>
 800d2a2:	d101      	bne.n	800d2a8 <_strtoul_l.constprop.0+0x70>
 800d2a4:	45a1      	cmp	r9, r4
 800d2a6:	db18      	blt.n	800d2da <_strtoul_l.constprop.0+0xa2>
 800d2a8:	fb00 4003 	mla	r0, r0, r3, r4
 800d2ac:	2701      	movs	r7, #1
 800d2ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2b2:	e7ea      	b.n	800d28a <_strtoul_l.constprop.0+0x52>
 800d2b4:	2c2b      	cmp	r4, #43	; 0x2b
 800d2b6:	bf04      	itt	eq
 800d2b8:	782c      	ldrbeq	r4, [r5, #0]
 800d2ba:	1c85      	addeq	r5, r0, #2
 800d2bc:	e7cd      	b.n	800d25a <_strtoul_l.constprop.0+0x22>
 800d2be:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d2c2:	f1bc 0f19 	cmp.w	ip, #25
 800d2c6:	d801      	bhi.n	800d2cc <_strtoul_l.constprop.0+0x94>
 800d2c8:	3c37      	subs	r4, #55	; 0x37
 800d2ca:	e7e4      	b.n	800d296 <_strtoul_l.constprop.0+0x5e>
 800d2cc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d2d0:	f1bc 0f19 	cmp.w	ip, #25
 800d2d4:	d804      	bhi.n	800d2e0 <_strtoul_l.constprop.0+0xa8>
 800d2d6:	3c57      	subs	r4, #87	; 0x57
 800d2d8:	e7dd      	b.n	800d296 <_strtoul_l.constprop.0+0x5e>
 800d2da:	f04f 37ff 	mov.w	r7, #4294967295
 800d2de:	e7e6      	b.n	800d2ae <_strtoul_l.constprop.0+0x76>
 800d2e0:	2f00      	cmp	r7, #0
 800d2e2:	da07      	bge.n	800d2f4 <_strtoul_l.constprop.0+0xbc>
 800d2e4:	2322      	movs	r3, #34	; 0x22
 800d2e6:	f8ce 3000 	str.w	r3, [lr]
 800d2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ee:	b932      	cbnz	r2, 800d2fe <_strtoul_l.constprop.0+0xc6>
 800d2f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2f4:	b106      	cbz	r6, 800d2f8 <_strtoul_l.constprop.0+0xc0>
 800d2f6:	4240      	negs	r0, r0
 800d2f8:	2a00      	cmp	r2, #0
 800d2fa:	d0f9      	beq.n	800d2f0 <_strtoul_l.constprop.0+0xb8>
 800d2fc:	b107      	cbz	r7, 800d300 <_strtoul_l.constprop.0+0xc8>
 800d2fe:	1e69      	subs	r1, r5, #1
 800d300:	6011      	str	r1, [r2, #0]
 800d302:	e7f5      	b.n	800d2f0 <_strtoul_l.constprop.0+0xb8>
 800d304:	2430      	movs	r4, #48	; 0x30
 800d306:	2b00      	cmp	r3, #0
 800d308:	d1b5      	bne.n	800d276 <_strtoul_l.constprop.0+0x3e>
 800d30a:	2308      	movs	r3, #8
 800d30c:	e7b3      	b.n	800d276 <_strtoul_l.constprop.0+0x3e>
 800d30e:	2c30      	cmp	r4, #48	; 0x30
 800d310:	d0a9      	beq.n	800d266 <_strtoul_l.constprop.0+0x2e>
 800d312:	230a      	movs	r3, #10
 800d314:	e7af      	b.n	800d276 <_strtoul_l.constprop.0+0x3e>
 800d316:	bf00      	nop
 800d318:	08010371 	.word	0x08010371

0800d31c <_strtoul_r>:
 800d31c:	f7ff bf8c 	b.w	800d238 <_strtoul_l.constprop.0>

0800d320 <__submore>:
 800d320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d324:	460c      	mov	r4, r1
 800d326:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d32c:	4299      	cmp	r1, r3
 800d32e:	d11d      	bne.n	800d36c <__submore+0x4c>
 800d330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d334:	f7ff fa16 	bl	800c764 <_malloc_r>
 800d338:	b918      	cbnz	r0, 800d342 <__submore+0x22>
 800d33a:	f04f 30ff 	mov.w	r0, #4294967295
 800d33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d346:	63a3      	str	r3, [r4, #56]	; 0x38
 800d348:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d34c:	6360      	str	r0, [r4, #52]	; 0x34
 800d34e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d352:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d356:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d35a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d35e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d362:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d366:	6020      	str	r0, [r4, #0]
 800d368:	2000      	movs	r0, #0
 800d36a:	e7e8      	b.n	800d33e <__submore+0x1e>
 800d36c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d36e:	0077      	lsls	r7, r6, #1
 800d370:	463a      	mov	r2, r7
 800d372:	f000 fa2d 	bl	800d7d0 <_realloc_r>
 800d376:	4605      	mov	r5, r0
 800d378:	2800      	cmp	r0, #0
 800d37a:	d0de      	beq.n	800d33a <__submore+0x1a>
 800d37c:	eb00 0806 	add.w	r8, r0, r6
 800d380:	4601      	mov	r1, r0
 800d382:	4632      	mov	r2, r6
 800d384:	4640      	mov	r0, r8
 800d386:	f7fb fc95 	bl	8008cb4 <memcpy>
 800d38a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d38e:	f8c4 8000 	str.w	r8, [r4]
 800d392:	e7e9      	b.n	800d368 <__submore+0x48>

0800d394 <__ascii_wctomb>:
 800d394:	b149      	cbz	r1, 800d3aa <__ascii_wctomb+0x16>
 800d396:	2aff      	cmp	r2, #255	; 0xff
 800d398:	bf85      	ittet	hi
 800d39a:	238a      	movhi	r3, #138	; 0x8a
 800d39c:	6003      	strhi	r3, [r0, #0]
 800d39e:	700a      	strbls	r2, [r1, #0]
 800d3a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800d3a4:	bf98      	it	ls
 800d3a6:	2001      	movls	r0, #1
 800d3a8:	4770      	bx	lr
 800d3aa:	4608      	mov	r0, r1
 800d3ac:	4770      	bx	lr
	...

0800d3b0 <__assert_func>:
 800d3b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3b2:	4614      	mov	r4, r2
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	4b09      	ldr	r3, [pc, #36]	; (800d3dc <__assert_func+0x2c>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4605      	mov	r5, r0
 800d3bc:	68d8      	ldr	r0, [r3, #12]
 800d3be:	b14c      	cbz	r4, 800d3d4 <__assert_func+0x24>
 800d3c0:	4b07      	ldr	r3, [pc, #28]	; (800d3e0 <__assert_func+0x30>)
 800d3c2:	9100      	str	r1, [sp, #0]
 800d3c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3c8:	4906      	ldr	r1, [pc, #24]	; (800d3e4 <__assert_func+0x34>)
 800d3ca:	462b      	mov	r3, r5
 800d3cc:	f000 f9a6 	bl	800d71c <fiprintf>
 800d3d0:	f000 fc46 	bl	800dc60 <abort>
 800d3d4:	4b04      	ldr	r3, [pc, #16]	; (800d3e8 <__assert_func+0x38>)
 800d3d6:	461c      	mov	r4, r3
 800d3d8:	e7f3      	b.n	800d3c2 <__assert_func+0x12>
 800d3da:	bf00      	nop
 800d3dc:	20000020 	.word	0x20000020
 800d3e0:	08010700 	.word	0x08010700
 800d3e4:	0801070d 	.word	0x0801070d
 800d3e8:	0801073b 	.word	0x0801073b

0800d3ec <__sflush_r>:
 800d3ec:	898a      	ldrh	r2, [r1, #12]
 800d3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	0710      	lsls	r0, r2, #28
 800d3f6:	460c      	mov	r4, r1
 800d3f8:	d458      	bmi.n	800d4ac <__sflush_r+0xc0>
 800d3fa:	684b      	ldr	r3, [r1, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	dc05      	bgt.n	800d40c <__sflush_r+0x20>
 800d400:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d402:	2b00      	cmp	r3, #0
 800d404:	dc02      	bgt.n	800d40c <__sflush_r+0x20>
 800d406:	2000      	movs	r0, #0
 800d408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d40c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d40e:	2e00      	cmp	r6, #0
 800d410:	d0f9      	beq.n	800d406 <__sflush_r+0x1a>
 800d412:	2300      	movs	r3, #0
 800d414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d418:	682f      	ldr	r7, [r5, #0]
 800d41a:	602b      	str	r3, [r5, #0]
 800d41c:	d032      	beq.n	800d484 <__sflush_r+0x98>
 800d41e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d420:	89a3      	ldrh	r3, [r4, #12]
 800d422:	075a      	lsls	r2, r3, #29
 800d424:	d505      	bpl.n	800d432 <__sflush_r+0x46>
 800d426:	6863      	ldr	r3, [r4, #4]
 800d428:	1ac0      	subs	r0, r0, r3
 800d42a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d42c:	b10b      	cbz	r3, 800d432 <__sflush_r+0x46>
 800d42e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d430:	1ac0      	subs	r0, r0, r3
 800d432:	2300      	movs	r3, #0
 800d434:	4602      	mov	r2, r0
 800d436:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d438:	6a21      	ldr	r1, [r4, #32]
 800d43a:	4628      	mov	r0, r5
 800d43c:	47b0      	blx	r6
 800d43e:	1c43      	adds	r3, r0, #1
 800d440:	89a3      	ldrh	r3, [r4, #12]
 800d442:	d106      	bne.n	800d452 <__sflush_r+0x66>
 800d444:	6829      	ldr	r1, [r5, #0]
 800d446:	291d      	cmp	r1, #29
 800d448:	d82c      	bhi.n	800d4a4 <__sflush_r+0xb8>
 800d44a:	4a2a      	ldr	r2, [pc, #168]	; (800d4f4 <__sflush_r+0x108>)
 800d44c:	40ca      	lsrs	r2, r1
 800d44e:	07d6      	lsls	r6, r2, #31
 800d450:	d528      	bpl.n	800d4a4 <__sflush_r+0xb8>
 800d452:	2200      	movs	r2, #0
 800d454:	6062      	str	r2, [r4, #4]
 800d456:	04d9      	lsls	r1, r3, #19
 800d458:	6922      	ldr	r2, [r4, #16]
 800d45a:	6022      	str	r2, [r4, #0]
 800d45c:	d504      	bpl.n	800d468 <__sflush_r+0x7c>
 800d45e:	1c42      	adds	r2, r0, #1
 800d460:	d101      	bne.n	800d466 <__sflush_r+0x7a>
 800d462:	682b      	ldr	r3, [r5, #0]
 800d464:	b903      	cbnz	r3, 800d468 <__sflush_r+0x7c>
 800d466:	6560      	str	r0, [r4, #84]	; 0x54
 800d468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d46a:	602f      	str	r7, [r5, #0]
 800d46c:	2900      	cmp	r1, #0
 800d46e:	d0ca      	beq.n	800d406 <__sflush_r+0x1a>
 800d470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d474:	4299      	cmp	r1, r3
 800d476:	d002      	beq.n	800d47e <__sflush_r+0x92>
 800d478:	4628      	mov	r0, r5
 800d47a:	f7ff f907 	bl	800c68c <_free_r>
 800d47e:	2000      	movs	r0, #0
 800d480:	6360      	str	r0, [r4, #52]	; 0x34
 800d482:	e7c1      	b.n	800d408 <__sflush_r+0x1c>
 800d484:	6a21      	ldr	r1, [r4, #32]
 800d486:	2301      	movs	r3, #1
 800d488:	4628      	mov	r0, r5
 800d48a:	47b0      	blx	r6
 800d48c:	1c41      	adds	r1, r0, #1
 800d48e:	d1c7      	bne.n	800d420 <__sflush_r+0x34>
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d0c4      	beq.n	800d420 <__sflush_r+0x34>
 800d496:	2b1d      	cmp	r3, #29
 800d498:	d001      	beq.n	800d49e <__sflush_r+0xb2>
 800d49a:	2b16      	cmp	r3, #22
 800d49c:	d101      	bne.n	800d4a2 <__sflush_r+0xb6>
 800d49e:	602f      	str	r7, [r5, #0]
 800d4a0:	e7b1      	b.n	800d406 <__sflush_r+0x1a>
 800d4a2:	89a3      	ldrh	r3, [r4, #12]
 800d4a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4a8:	81a3      	strh	r3, [r4, #12]
 800d4aa:	e7ad      	b.n	800d408 <__sflush_r+0x1c>
 800d4ac:	690f      	ldr	r7, [r1, #16]
 800d4ae:	2f00      	cmp	r7, #0
 800d4b0:	d0a9      	beq.n	800d406 <__sflush_r+0x1a>
 800d4b2:	0793      	lsls	r3, r2, #30
 800d4b4:	680e      	ldr	r6, [r1, #0]
 800d4b6:	bf08      	it	eq
 800d4b8:	694b      	ldreq	r3, [r1, #20]
 800d4ba:	600f      	str	r7, [r1, #0]
 800d4bc:	bf18      	it	ne
 800d4be:	2300      	movne	r3, #0
 800d4c0:	eba6 0807 	sub.w	r8, r6, r7
 800d4c4:	608b      	str	r3, [r1, #8]
 800d4c6:	f1b8 0f00 	cmp.w	r8, #0
 800d4ca:	dd9c      	ble.n	800d406 <__sflush_r+0x1a>
 800d4cc:	6a21      	ldr	r1, [r4, #32]
 800d4ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d4d0:	4643      	mov	r3, r8
 800d4d2:	463a      	mov	r2, r7
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	47b0      	blx	r6
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	dc06      	bgt.n	800d4ea <__sflush_r+0xfe>
 800d4dc:	89a3      	ldrh	r3, [r4, #12]
 800d4de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4e2:	81a3      	strh	r3, [r4, #12]
 800d4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e8:	e78e      	b.n	800d408 <__sflush_r+0x1c>
 800d4ea:	4407      	add	r7, r0
 800d4ec:	eba8 0800 	sub.w	r8, r8, r0
 800d4f0:	e7e9      	b.n	800d4c6 <__sflush_r+0xda>
 800d4f2:	bf00      	nop
 800d4f4:	20400001 	.word	0x20400001

0800d4f8 <_fflush_r>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	690b      	ldr	r3, [r1, #16]
 800d4fc:	4605      	mov	r5, r0
 800d4fe:	460c      	mov	r4, r1
 800d500:	b913      	cbnz	r3, 800d508 <_fflush_r+0x10>
 800d502:	2500      	movs	r5, #0
 800d504:	4628      	mov	r0, r5
 800d506:	bd38      	pop	{r3, r4, r5, pc}
 800d508:	b118      	cbz	r0, 800d512 <_fflush_r+0x1a>
 800d50a:	6983      	ldr	r3, [r0, #24]
 800d50c:	b90b      	cbnz	r3, 800d512 <_fflush_r+0x1a>
 800d50e:	f000 f887 	bl	800d620 <__sinit>
 800d512:	4b14      	ldr	r3, [pc, #80]	; (800d564 <_fflush_r+0x6c>)
 800d514:	429c      	cmp	r4, r3
 800d516:	d11b      	bne.n	800d550 <_fflush_r+0x58>
 800d518:	686c      	ldr	r4, [r5, #4]
 800d51a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d0ef      	beq.n	800d502 <_fflush_r+0xa>
 800d522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d524:	07d0      	lsls	r0, r2, #31
 800d526:	d404      	bmi.n	800d532 <_fflush_r+0x3a>
 800d528:	0599      	lsls	r1, r3, #22
 800d52a:	d402      	bmi.n	800d532 <_fflush_r+0x3a>
 800d52c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d52e:	f000 f927 	bl	800d780 <__retarget_lock_acquire_recursive>
 800d532:	4628      	mov	r0, r5
 800d534:	4621      	mov	r1, r4
 800d536:	f7ff ff59 	bl	800d3ec <__sflush_r>
 800d53a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d53c:	07da      	lsls	r2, r3, #31
 800d53e:	4605      	mov	r5, r0
 800d540:	d4e0      	bmi.n	800d504 <_fflush_r+0xc>
 800d542:	89a3      	ldrh	r3, [r4, #12]
 800d544:	059b      	lsls	r3, r3, #22
 800d546:	d4dd      	bmi.n	800d504 <_fflush_r+0xc>
 800d548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d54a:	f000 f91a 	bl	800d782 <__retarget_lock_release_recursive>
 800d54e:	e7d9      	b.n	800d504 <_fflush_r+0xc>
 800d550:	4b05      	ldr	r3, [pc, #20]	; (800d568 <_fflush_r+0x70>)
 800d552:	429c      	cmp	r4, r3
 800d554:	d101      	bne.n	800d55a <_fflush_r+0x62>
 800d556:	68ac      	ldr	r4, [r5, #8]
 800d558:	e7df      	b.n	800d51a <_fflush_r+0x22>
 800d55a:	4b04      	ldr	r3, [pc, #16]	; (800d56c <_fflush_r+0x74>)
 800d55c:	429c      	cmp	r4, r3
 800d55e:	bf08      	it	eq
 800d560:	68ec      	ldreq	r4, [r5, #12]
 800d562:	e7da      	b.n	800d51a <_fflush_r+0x22>
 800d564:	0801075c 	.word	0x0801075c
 800d568:	0801077c 	.word	0x0801077c
 800d56c:	0801073c 	.word	0x0801073c

0800d570 <std>:
 800d570:	2300      	movs	r3, #0
 800d572:	b510      	push	{r4, lr}
 800d574:	4604      	mov	r4, r0
 800d576:	e9c0 3300 	strd	r3, r3, [r0]
 800d57a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d57e:	6083      	str	r3, [r0, #8]
 800d580:	8181      	strh	r1, [r0, #12]
 800d582:	6643      	str	r3, [r0, #100]	; 0x64
 800d584:	81c2      	strh	r2, [r0, #14]
 800d586:	6183      	str	r3, [r0, #24]
 800d588:	4619      	mov	r1, r3
 800d58a:	2208      	movs	r2, #8
 800d58c:	305c      	adds	r0, #92	; 0x5c
 800d58e:	f7fb fb9f 	bl	8008cd0 <memset>
 800d592:	4b05      	ldr	r3, [pc, #20]	; (800d5a8 <std+0x38>)
 800d594:	6263      	str	r3, [r4, #36]	; 0x24
 800d596:	4b05      	ldr	r3, [pc, #20]	; (800d5ac <std+0x3c>)
 800d598:	62a3      	str	r3, [r4, #40]	; 0x28
 800d59a:	4b05      	ldr	r3, [pc, #20]	; (800d5b0 <std+0x40>)
 800d59c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d59e:	4b05      	ldr	r3, [pc, #20]	; (800d5b4 <std+0x44>)
 800d5a0:	6224      	str	r4, [r4, #32]
 800d5a2:	6323      	str	r3, [r4, #48]	; 0x30
 800d5a4:	bd10      	pop	{r4, pc}
 800d5a6:	bf00      	nop
 800d5a8:	08009a79 	.word	0x08009a79
 800d5ac:	08009a9f 	.word	0x08009a9f
 800d5b0:	08009ad7 	.word	0x08009ad7
 800d5b4:	08009afb 	.word	0x08009afb

0800d5b8 <_cleanup_r>:
 800d5b8:	4901      	ldr	r1, [pc, #4]	; (800d5c0 <_cleanup_r+0x8>)
 800d5ba:	f000 b8c1 	b.w	800d740 <_fwalk_reent>
 800d5be:	bf00      	nop
 800d5c0:	0800d4f9 	.word	0x0800d4f9

0800d5c4 <__sfmoreglue>:
 800d5c4:	b570      	push	{r4, r5, r6, lr}
 800d5c6:	2268      	movs	r2, #104	; 0x68
 800d5c8:	1e4d      	subs	r5, r1, #1
 800d5ca:	4355      	muls	r5, r2
 800d5cc:	460e      	mov	r6, r1
 800d5ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d5d2:	f7ff f8c7 	bl	800c764 <_malloc_r>
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	b140      	cbz	r0, 800d5ec <__sfmoreglue+0x28>
 800d5da:	2100      	movs	r1, #0
 800d5dc:	e9c0 1600 	strd	r1, r6, [r0]
 800d5e0:	300c      	adds	r0, #12
 800d5e2:	60a0      	str	r0, [r4, #8]
 800d5e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d5e8:	f7fb fb72 	bl	8008cd0 <memset>
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	bd70      	pop	{r4, r5, r6, pc}

0800d5f0 <__sfp_lock_acquire>:
 800d5f0:	4801      	ldr	r0, [pc, #4]	; (800d5f8 <__sfp_lock_acquire+0x8>)
 800d5f2:	f000 b8c5 	b.w	800d780 <__retarget_lock_acquire_recursive>
 800d5f6:	bf00      	nop
 800d5f8:	20013add 	.word	0x20013add

0800d5fc <__sfp_lock_release>:
 800d5fc:	4801      	ldr	r0, [pc, #4]	; (800d604 <__sfp_lock_release+0x8>)
 800d5fe:	f000 b8c0 	b.w	800d782 <__retarget_lock_release_recursive>
 800d602:	bf00      	nop
 800d604:	20013add 	.word	0x20013add

0800d608 <__sinit_lock_acquire>:
 800d608:	4801      	ldr	r0, [pc, #4]	; (800d610 <__sinit_lock_acquire+0x8>)
 800d60a:	f000 b8b9 	b.w	800d780 <__retarget_lock_acquire_recursive>
 800d60e:	bf00      	nop
 800d610:	20013ade 	.word	0x20013ade

0800d614 <__sinit_lock_release>:
 800d614:	4801      	ldr	r0, [pc, #4]	; (800d61c <__sinit_lock_release+0x8>)
 800d616:	f000 b8b4 	b.w	800d782 <__retarget_lock_release_recursive>
 800d61a:	bf00      	nop
 800d61c:	20013ade 	.word	0x20013ade

0800d620 <__sinit>:
 800d620:	b510      	push	{r4, lr}
 800d622:	4604      	mov	r4, r0
 800d624:	f7ff fff0 	bl	800d608 <__sinit_lock_acquire>
 800d628:	69a3      	ldr	r3, [r4, #24]
 800d62a:	b11b      	cbz	r3, 800d634 <__sinit+0x14>
 800d62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d630:	f7ff bff0 	b.w	800d614 <__sinit_lock_release>
 800d634:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d638:	6523      	str	r3, [r4, #80]	; 0x50
 800d63a:	4b13      	ldr	r3, [pc, #76]	; (800d688 <__sinit+0x68>)
 800d63c:	4a13      	ldr	r2, [pc, #76]	; (800d68c <__sinit+0x6c>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	62a2      	str	r2, [r4, #40]	; 0x28
 800d642:	42a3      	cmp	r3, r4
 800d644:	bf04      	itt	eq
 800d646:	2301      	moveq	r3, #1
 800d648:	61a3      	streq	r3, [r4, #24]
 800d64a:	4620      	mov	r0, r4
 800d64c:	f000 f820 	bl	800d690 <__sfp>
 800d650:	6060      	str	r0, [r4, #4]
 800d652:	4620      	mov	r0, r4
 800d654:	f000 f81c 	bl	800d690 <__sfp>
 800d658:	60a0      	str	r0, [r4, #8]
 800d65a:	4620      	mov	r0, r4
 800d65c:	f000 f818 	bl	800d690 <__sfp>
 800d660:	2200      	movs	r2, #0
 800d662:	60e0      	str	r0, [r4, #12]
 800d664:	2104      	movs	r1, #4
 800d666:	6860      	ldr	r0, [r4, #4]
 800d668:	f7ff ff82 	bl	800d570 <std>
 800d66c:	68a0      	ldr	r0, [r4, #8]
 800d66e:	2201      	movs	r2, #1
 800d670:	2109      	movs	r1, #9
 800d672:	f7ff ff7d 	bl	800d570 <std>
 800d676:	68e0      	ldr	r0, [r4, #12]
 800d678:	2202      	movs	r2, #2
 800d67a:	2112      	movs	r1, #18
 800d67c:	f7ff ff78 	bl	800d570 <std>
 800d680:	2301      	movs	r3, #1
 800d682:	61a3      	str	r3, [r4, #24]
 800d684:	e7d2      	b.n	800d62c <__sinit+0xc>
 800d686:	bf00      	nop
 800d688:	080102e0 	.word	0x080102e0
 800d68c:	0800d5b9 	.word	0x0800d5b9

0800d690 <__sfp>:
 800d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d692:	4607      	mov	r7, r0
 800d694:	f7ff ffac 	bl	800d5f0 <__sfp_lock_acquire>
 800d698:	4b1e      	ldr	r3, [pc, #120]	; (800d714 <__sfp+0x84>)
 800d69a:	681e      	ldr	r6, [r3, #0]
 800d69c:	69b3      	ldr	r3, [r6, #24]
 800d69e:	b913      	cbnz	r3, 800d6a6 <__sfp+0x16>
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f7ff ffbd 	bl	800d620 <__sinit>
 800d6a6:	3648      	adds	r6, #72	; 0x48
 800d6a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d6ac:	3b01      	subs	r3, #1
 800d6ae:	d503      	bpl.n	800d6b8 <__sfp+0x28>
 800d6b0:	6833      	ldr	r3, [r6, #0]
 800d6b2:	b30b      	cbz	r3, 800d6f8 <__sfp+0x68>
 800d6b4:	6836      	ldr	r6, [r6, #0]
 800d6b6:	e7f7      	b.n	800d6a8 <__sfp+0x18>
 800d6b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d6bc:	b9d5      	cbnz	r5, 800d6f4 <__sfp+0x64>
 800d6be:	4b16      	ldr	r3, [pc, #88]	; (800d718 <__sfp+0x88>)
 800d6c0:	60e3      	str	r3, [r4, #12]
 800d6c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d6c6:	6665      	str	r5, [r4, #100]	; 0x64
 800d6c8:	f000 f859 	bl	800d77e <__retarget_lock_init_recursive>
 800d6cc:	f7ff ff96 	bl	800d5fc <__sfp_lock_release>
 800d6d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d6d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d6d8:	6025      	str	r5, [r4, #0]
 800d6da:	61a5      	str	r5, [r4, #24]
 800d6dc:	2208      	movs	r2, #8
 800d6de:	4629      	mov	r1, r5
 800d6e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d6e4:	f7fb faf4 	bl	8008cd0 <memset>
 800d6e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d6ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6f4:	3468      	adds	r4, #104	; 0x68
 800d6f6:	e7d9      	b.n	800d6ac <__sfp+0x1c>
 800d6f8:	2104      	movs	r1, #4
 800d6fa:	4638      	mov	r0, r7
 800d6fc:	f7ff ff62 	bl	800d5c4 <__sfmoreglue>
 800d700:	4604      	mov	r4, r0
 800d702:	6030      	str	r0, [r6, #0]
 800d704:	2800      	cmp	r0, #0
 800d706:	d1d5      	bne.n	800d6b4 <__sfp+0x24>
 800d708:	f7ff ff78 	bl	800d5fc <__sfp_lock_release>
 800d70c:	230c      	movs	r3, #12
 800d70e:	603b      	str	r3, [r7, #0]
 800d710:	e7ee      	b.n	800d6f0 <__sfp+0x60>
 800d712:	bf00      	nop
 800d714:	080102e0 	.word	0x080102e0
 800d718:	ffff0001 	.word	0xffff0001

0800d71c <fiprintf>:
 800d71c:	b40e      	push	{r1, r2, r3}
 800d71e:	b503      	push	{r0, r1, lr}
 800d720:	4601      	mov	r1, r0
 800d722:	ab03      	add	r3, sp, #12
 800d724:	4805      	ldr	r0, [pc, #20]	; (800d73c <fiprintf+0x20>)
 800d726:	f853 2b04 	ldr.w	r2, [r3], #4
 800d72a:	6800      	ldr	r0, [r0, #0]
 800d72c:	9301      	str	r3, [sp, #4]
 800d72e:	f000 f8a7 	bl	800d880 <_vfiprintf_r>
 800d732:	b002      	add	sp, #8
 800d734:	f85d eb04 	ldr.w	lr, [sp], #4
 800d738:	b003      	add	sp, #12
 800d73a:	4770      	bx	lr
 800d73c:	20000020 	.word	0x20000020

0800d740 <_fwalk_reent>:
 800d740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d744:	4606      	mov	r6, r0
 800d746:	4688      	mov	r8, r1
 800d748:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d74c:	2700      	movs	r7, #0
 800d74e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d752:	f1b9 0901 	subs.w	r9, r9, #1
 800d756:	d505      	bpl.n	800d764 <_fwalk_reent+0x24>
 800d758:	6824      	ldr	r4, [r4, #0]
 800d75a:	2c00      	cmp	r4, #0
 800d75c:	d1f7      	bne.n	800d74e <_fwalk_reent+0xe>
 800d75e:	4638      	mov	r0, r7
 800d760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d764:	89ab      	ldrh	r3, [r5, #12]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d907      	bls.n	800d77a <_fwalk_reent+0x3a>
 800d76a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d76e:	3301      	adds	r3, #1
 800d770:	d003      	beq.n	800d77a <_fwalk_reent+0x3a>
 800d772:	4629      	mov	r1, r5
 800d774:	4630      	mov	r0, r6
 800d776:	47c0      	blx	r8
 800d778:	4307      	orrs	r7, r0
 800d77a:	3568      	adds	r5, #104	; 0x68
 800d77c:	e7e9      	b.n	800d752 <_fwalk_reent+0x12>

0800d77e <__retarget_lock_init_recursive>:
 800d77e:	4770      	bx	lr

0800d780 <__retarget_lock_acquire_recursive>:
 800d780:	4770      	bx	lr

0800d782 <__retarget_lock_release_recursive>:
 800d782:	4770      	bx	lr

0800d784 <memmove>:
 800d784:	4288      	cmp	r0, r1
 800d786:	b510      	push	{r4, lr}
 800d788:	eb01 0402 	add.w	r4, r1, r2
 800d78c:	d902      	bls.n	800d794 <memmove+0x10>
 800d78e:	4284      	cmp	r4, r0
 800d790:	4623      	mov	r3, r4
 800d792:	d807      	bhi.n	800d7a4 <memmove+0x20>
 800d794:	1e43      	subs	r3, r0, #1
 800d796:	42a1      	cmp	r1, r4
 800d798:	d008      	beq.n	800d7ac <memmove+0x28>
 800d79a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d79e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7a2:	e7f8      	b.n	800d796 <memmove+0x12>
 800d7a4:	4402      	add	r2, r0
 800d7a6:	4601      	mov	r1, r0
 800d7a8:	428a      	cmp	r2, r1
 800d7aa:	d100      	bne.n	800d7ae <memmove+0x2a>
 800d7ac:	bd10      	pop	{r4, pc}
 800d7ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7b6:	e7f7      	b.n	800d7a8 <memmove+0x24>

0800d7b8 <__malloc_lock>:
 800d7b8:	4801      	ldr	r0, [pc, #4]	; (800d7c0 <__malloc_lock+0x8>)
 800d7ba:	f7ff bfe1 	b.w	800d780 <__retarget_lock_acquire_recursive>
 800d7be:	bf00      	nop
 800d7c0:	20013adc 	.word	0x20013adc

0800d7c4 <__malloc_unlock>:
 800d7c4:	4801      	ldr	r0, [pc, #4]	; (800d7cc <__malloc_unlock+0x8>)
 800d7c6:	f7ff bfdc 	b.w	800d782 <__retarget_lock_release_recursive>
 800d7ca:	bf00      	nop
 800d7cc:	20013adc 	.word	0x20013adc

0800d7d0 <_realloc_r>:
 800d7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d4:	4680      	mov	r8, r0
 800d7d6:	4614      	mov	r4, r2
 800d7d8:	460e      	mov	r6, r1
 800d7da:	b921      	cbnz	r1, 800d7e6 <_realloc_r+0x16>
 800d7dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e0:	4611      	mov	r1, r2
 800d7e2:	f7fe bfbf 	b.w	800c764 <_malloc_r>
 800d7e6:	b92a      	cbnz	r2, 800d7f4 <_realloc_r+0x24>
 800d7e8:	f7fe ff50 	bl	800c68c <_free_r>
 800d7ec:	4625      	mov	r5, r4
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f4:	f000 faa0 	bl	800dd38 <_malloc_usable_size_r>
 800d7f8:	4284      	cmp	r4, r0
 800d7fa:	4607      	mov	r7, r0
 800d7fc:	d802      	bhi.n	800d804 <_realloc_r+0x34>
 800d7fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d802:	d812      	bhi.n	800d82a <_realloc_r+0x5a>
 800d804:	4621      	mov	r1, r4
 800d806:	4640      	mov	r0, r8
 800d808:	f7fe ffac 	bl	800c764 <_malloc_r>
 800d80c:	4605      	mov	r5, r0
 800d80e:	2800      	cmp	r0, #0
 800d810:	d0ed      	beq.n	800d7ee <_realloc_r+0x1e>
 800d812:	42bc      	cmp	r4, r7
 800d814:	4622      	mov	r2, r4
 800d816:	4631      	mov	r1, r6
 800d818:	bf28      	it	cs
 800d81a:	463a      	movcs	r2, r7
 800d81c:	f7fb fa4a 	bl	8008cb4 <memcpy>
 800d820:	4631      	mov	r1, r6
 800d822:	4640      	mov	r0, r8
 800d824:	f7fe ff32 	bl	800c68c <_free_r>
 800d828:	e7e1      	b.n	800d7ee <_realloc_r+0x1e>
 800d82a:	4635      	mov	r5, r6
 800d82c:	e7df      	b.n	800d7ee <_realloc_r+0x1e>

0800d82e <__sfputc_r>:
 800d82e:	6893      	ldr	r3, [r2, #8]
 800d830:	3b01      	subs	r3, #1
 800d832:	2b00      	cmp	r3, #0
 800d834:	b410      	push	{r4}
 800d836:	6093      	str	r3, [r2, #8]
 800d838:	da08      	bge.n	800d84c <__sfputc_r+0x1e>
 800d83a:	6994      	ldr	r4, [r2, #24]
 800d83c:	42a3      	cmp	r3, r4
 800d83e:	db01      	blt.n	800d844 <__sfputc_r+0x16>
 800d840:	290a      	cmp	r1, #10
 800d842:	d103      	bne.n	800d84c <__sfputc_r+0x1e>
 800d844:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d848:	f000 b94a 	b.w	800dae0 <__swbuf_r>
 800d84c:	6813      	ldr	r3, [r2, #0]
 800d84e:	1c58      	adds	r0, r3, #1
 800d850:	6010      	str	r0, [r2, #0]
 800d852:	7019      	strb	r1, [r3, #0]
 800d854:	4608      	mov	r0, r1
 800d856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <__sfputs_r>:
 800d85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85e:	4606      	mov	r6, r0
 800d860:	460f      	mov	r7, r1
 800d862:	4614      	mov	r4, r2
 800d864:	18d5      	adds	r5, r2, r3
 800d866:	42ac      	cmp	r4, r5
 800d868:	d101      	bne.n	800d86e <__sfputs_r+0x12>
 800d86a:	2000      	movs	r0, #0
 800d86c:	e007      	b.n	800d87e <__sfputs_r+0x22>
 800d86e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d872:	463a      	mov	r2, r7
 800d874:	4630      	mov	r0, r6
 800d876:	f7ff ffda 	bl	800d82e <__sfputc_r>
 800d87a:	1c43      	adds	r3, r0, #1
 800d87c:	d1f3      	bne.n	800d866 <__sfputs_r+0xa>
 800d87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d880 <_vfiprintf_r>:
 800d880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d884:	460d      	mov	r5, r1
 800d886:	b09d      	sub	sp, #116	; 0x74
 800d888:	4614      	mov	r4, r2
 800d88a:	4698      	mov	r8, r3
 800d88c:	4606      	mov	r6, r0
 800d88e:	b118      	cbz	r0, 800d898 <_vfiprintf_r+0x18>
 800d890:	6983      	ldr	r3, [r0, #24]
 800d892:	b90b      	cbnz	r3, 800d898 <_vfiprintf_r+0x18>
 800d894:	f7ff fec4 	bl	800d620 <__sinit>
 800d898:	4b89      	ldr	r3, [pc, #548]	; (800dac0 <_vfiprintf_r+0x240>)
 800d89a:	429d      	cmp	r5, r3
 800d89c:	d11b      	bne.n	800d8d6 <_vfiprintf_r+0x56>
 800d89e:	6875      	ldr	r5, [r6, #4]
 800d8a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8a2:	07d9      	lsls	r1, r3, #31
 800d8a4:	d405      	bmi.n	800d8b2 <_vfiprintf_r+0x32>
 800d8a6:	89ab      	ldrh	r3, [r5, #12]
 800d8a8:	059a      	lsls	r2, r3, #22
 800d8aa:	d402      	bmi.n	800d8b2 <_vfiprintf_r+0x32>
 800d8ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8ae:	f7ff ff67 	bl	800d780 <__retarget_lock_acquire_recursive>
 800d8b2:	89ab      	ldrh	r3, [r5, #12]
 800d8b4:	071b      	lsls	r3, r3, #28
 800d8b6:	d501      	bpl.n	800d8bc <_vfiprintf_r+0x3c>
 800d8b8:	692b      	ldr	r3, [r5, #16]
 800d8ba:	b9eb      	cbnz	r3, 800d8f8 <_vfiprintf_r+0x78>
 800d8bc:	4629      	mov	r1, r5
 800d8be:	4630      	mov	r0, r6
 800d8c0:	f000 f960 	bl	800db84 <__swsetup_r>
 800d8c4:	b1c0      	cbz	r0, 800d8f8 <_vfiprintf_r+0x78>
 800d8c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8c8:	07dc      	lsls	r4, r3, #31
 800d8ca:	d50e      	bpl.n	800d8ea <_vfiprintf_r+0x6a>
 800d8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d0:	b01d      	add	sp, #116	; 0x74
 800d8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d6:	4b7b      	ldr	r3, [pc, #492]	; (800dac4 <_vfiprintf_r+0x244>)
 800d8d8:	429d      	cmp	r5, r3
 800d8da:	d101      	bne.n	800d8e0 <_vfiprintf_r+0x60>
 800d8dc:	68b5      	ldr	r5, [r6, #8]
 800d8de:	e7df      	b.n	800d8a0 <_vfiprintf_r+0x20>
 800d8e0:	4b79      	ldr	r3, [pc, #484]	; (800dac8 <_vfiprintf_r+0x248>)
 800d8e2:	429d      	cmp	r5, r3
 800d8e4:	bf08      	it	eq
 800d8e6:	68f5      	ldreq	r5, [r6, #12]
 800d8e8:	e7da      	b.n	800d8a0 <_vfiprintf_r+0x20>
 800d8ea:	89ab      	ldrh	r3, [r5, #12]
 800d8ec:	0598      	lsls	r0, r3, #22
 800d8ee:	d4ed      	bmi.n	800d8cc <_vfiprintf_r+0x4c>
 800d8f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8f2:	f7ff ff46 	bl	800d782 <__retarget_lock_release_recursive>
 800d8f6:	e7e9      	b.n	800d8cc <_vfiprintf_r+0x4c>
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d8fc:	2320      	movs	r3, #32
 800d8fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d902:	f8cd 800c 	str.w	r8, [sp, #12]
 800d906:	2330      	movs	r3, #48	; 0x30
 800d908:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dacc <_vfiprintf_r+0x24c>
 800d90c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d910:	f04f 0901 	mov.w	r9, #1
 800d914:	4623      	mov	r3, r4
 800d916:	469a      	mov	sl, r3
 800d918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d91c:	b10a      	cbz	r2, 800d922 <_vfiprintf_r+0xa2>
 800d91e:	2a25      	cmp	r2, #37	; 0x25
 800d920:	d1f9      	bne.n	800d916 <_vfiprintf_r+0x96>
 800d922:	ebba 0b04 	subs.w	fp, sl, r4
 800d926:	d00b      	beq.n	800d940 <_vfiprintf_r+0xc0>
 800d928:	465b      	mov	r3, fp
 800d92a:	4622      	mov	r2, r4
 800d92c:	4629      	mov	r1, r5
 800d92e:	4630      	mov	r0, r6
 800d930:	f7ff ff94 	bl	800d85c <__sfputs_r>
 800d934:	3001      	adds	r0, #1
 800d936:	f000 80aa 	beq.w	800da8e <_vfiprintf_r+0x20e>
 800d93a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d93c:	445a      	add	r2, fp
 800d93e:	9209      	str	r2, [sp, #36]	; 0x24
 800d940:	f89a 3000 	ldrb.w	r3, [sl]
 800d944:	2b00      	cmp	r3, #0
 800d946:	f000 80a2 	beq.w	800da8e <_vfiprintf_r+0x20e>
 800d94a:	2300      	movs	r3, #0
 800d94c:	f04f 32ff 	mov.w	r2, #4294967295
 800d950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d954:	f10a 0a01 	add.w	sl, sl, #1
 800d958:	9304      	str	r3, [sp, #16]
 800d95a:	9307      	str	r3, [sp, #28]
 800d95c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d960:	931a      	str	r3, [sp, #104]	; 0x68
 800d962:	4654      	mov	r4, sl
 800d964:	2205      	movs	r2, #5
 800d966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d96a:	4858      	ldr	r0, [pc, #352]	; (800dacc <_vfiprintf_r+0x24c>)
 800d96c:	f7f2 fc50 	bl	8000210 <memchr>
 800d970:	9a04      	ldr	r2, [sp, #16]
 800d972:	b9d8      	cbnz	r0, 800d9ac <_vfiprintf_r+0x12c>
 800d974:	06d1      	lsls	r1, r2, #27
 800d976:	bf44      	itt	mi
 800d978:	2320      	movmi	r3, #32
 800d97a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d97e:	0713      	lsls	r3, r2, #28
 800d980:	bf44      	itt	mi
 800d982:	232b      	movmi	r3, #43	; 0x2b
 800d984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d988:	f89a 3000 	ldrb.w	r3, [sl]
 800d98c:	2b2a      	cmp	r3, #42	; 0x2a
 800d98e:	d015      	beq.n	800d9bc <_vfiprintf_r+0x13c>
 800d990:	9a07      	ldr	r2, [sp, #28]
 800d992:	4654      	mov	r4, sl
 800d994:	2000      	movs	r0, #0
 800d996:	f04f 0c0a 	mov.w	ip, #10
 800d99a:	4621      	mov	r1, r4
 800d99c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9a0:	3b30      	subs	r3, #48	; 0x30
 800d9a2:	2b09      	cmp	r3, #9
 800d9a4:	d94e      	bls.n	800da44 <_vfiprintf_r+0x1c4>
 800d9a6:	b1b0      	cbz	r0, 800d9d6 <_vfiprintf_r+0x156>
 800d9a8:	9207      	str	r2, [sp, #28]
 800d9aa:	e014      	b.n	800d9d6 <_vfiprintf_r+0x156>
 800d9ac:	eba0 0308 	sub.w	r3, r0, r8
 800d9b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	9304      	str	r3, [sp, #16]
 800d9b8:	46a2      	mov	sl, r4
 800d9ba:	e7d2      	b.n	800d962 <_vfiprintf_r+0xe2>
 800d9bc:	9b03      	ldr	r3, [sp, #12]
 800d9be:	1d19      	adds	r1, r3, #4
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	9103      	str	r1, [sp, #12]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	bfbb      	ittet	lt
 800d9c8:	425b      	neglt	r3, r3
 800d9ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d9ce:	9307      	strge	r3, [sp, #28]
 800d9d0:	9307      	strlt	r3, [sp, #28]
 800d9d2:	bfb8      	it	lt
 800d9d4:	9204      	strlt	r2, [sp, #16]
 800d9d6:	7823      	ldrb	r3, [r4, #0]
 800d9d8:	2b2e      	cmp	r3, #46	; 0x2e
 800d9da:	d10c      	bne.n	800d9f6 <_vfiprintf_r+0x176>
 800d9dc:	7863      	ldrb	r3, [r4, #1]
 800d9de:	2b2a      	cmp	r3, #42	; 0x2a
 800d9e0:	d135      	bne.n	800da4e <_vfiprintf_r+0x1ce>
 800d9e2:	9b03      	ldr	r3, [sp, #12]
 800d9e4:	1d1a      	adds	r2, r3, #4
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	9203      	str	r2, [sp, #12]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	bfb8      	it	lt
 800d9ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9f2:	3402      	adds	r4, #2
 800d9f4:	9305      	str	r3, [sp, #20]
 800d9f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dadc <_vfiprintf_r+0x25c>
 800d9fa:	7821      	ldrb	r1, [r4, #0]
 800d9fc:	2203      	movs	r2, #3
 800d9fe:	4650      	mov	r0, sl
 800da00:	f7f2 fc06 	bl	8000210 <memchr>
 800da04:	b140      	cbz	r0, 800da18 <_vfiprintf_r+0x198>
 800da06:	2340      	movs	r3, #64	; 0x40
 800da08:	eba0 000a 	sub.w	r0, r0, sl
 800da0c:	fa03 f000 	lsl.w	r0, r3, r0
 800da10:	9b04      	ldr	r3, [sp, #16]
 800da12:	4303      	orrs	r3, r0
 800da14:	3401      	adds	r4, #1
 800da16:	9304      	str	r3, [sp, #16]
 800da18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da1c:	482c      	ldr	r0, [pc, #176]	; (800dad0 <_vfiprintf_r+0x250>)
 800da1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da22:	2206      	movs	r2, #6
 800da24:	f7f2 fbf4 	bl	8000210 <memchr>
 800da28:	2800      	cmp	r0, #0
 800da2a:	d03f      	beq.n	800daac <_vfiprintf_r+0x22c>
 800da2c:	4b29      	ldr	r3, [pc, #164]	; (800dad4 <_vfiprintf_r+0x254>)
 800da2e:	bb1b      	cbnz	r3, 800da78 <_vfiprintf_r+0x1f8>
 800da30:	9b03      	ldr	r3, [sp, #12]
 800da32:	3307      	adds	r3, #7
 800da34:	f023 0307 	bic.w	r3, r3, #7
 800da38:	3308      	adds	r3, #8
 800da3a:	9303      	str	r3, [sp, #12]
 800da3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da3e:	443b      	add	r3, r7
 800da40:	9309      	str	r3, [sp, #36]	; 0x24
 800da42:	e767      	b.n	800d914 <_vfiprintf_r+0x94>
 800da44:	fb0c 3202 	mla	r2, ip, r2, r3
 800da48:	460c      	mov	r4, r1
 800da4a:	2001      	movs	r0, #1
 800da4c:	e7a5      	b.n	800d99a <_vfiprintf_r+0x11a>
 800da4e:	2300      	movs	r3, #0
 800da50:	3401      	adds	r4, #1
 800da52:	9305      	str	r3, [sp, #20]
 800da54:	4619      	mov	r1, r3
 800da56:	f04f 0c0a 	mov.w	ip, #10
 800da5a:	4620      	mov	r0, r4
 800da5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da60:	3a30      	subs	r2, #48	; 0x30
 800da62:	2a09      	cmp	r2, #9
 800da64:	d903      	bls.n	800da6e <_vfiprintf_r+0x1ee>
 800da66:	2b00      	cmp	r3, #0
 800da68:	d0c5      	beq.n	800d9f6 <_vfiprintf_r+0x176>
 800da6a:	9105      	str	r1, [sp, #20]
 800da6c:	e7c3      	b.n	800d9f6 <_vfiprintf_r+0x176>
 800da6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800da72:	4604      	mov	r4, r0
 800da74:	2301      	movs	r3, #1
 800da76:	e7f0      	b.n	800da5a <_vfiprintf_r+0x1da>
 800da78:	ab03      	add	r3, sp, #12
 800da7a:	9300      	str	r3, [sp, #0]
 800da7c:	462a      	mov	r2, r5
 800da7e:	4b16      	ldr	r3, [pc, #88]	; (800dad8 <_vfiprintf_r+0x258>)
 800da80:	a904      	add	r1, sp, #16
 800da82:	4630      	mov	r0, r6
 800da84:	f7fb f9cc 	bl	8008e20 <_printf_float>
 800da88:	4607      	mov	r7, r0
 800da8a:	1c78      	adds	r0, r7, #1
 800da8c:	d1d6      	bne.n	800da3c <_vfiprintf_r+0x1bc>
 800da8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da90:	07d9      	lsls	r1, r3, #31
 800da92:	d405      	bmi.n	800daa0 <_vfiprintf_r+0x220>
 800da94:	89ab      	ldrh	r3, [r5, #12]
 800da96:	059a      	lsls	r2, r3, #22
 800da98:	d402      	bmi.n	800daa0 <_vfiprintf_r+0x220>
 800da9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da9c:	f7ff fe71 	bl	800d782 <__retarget_lock_release_recursive>
 800daa0:	89ab      	ldrh	r3, [r5, #12]
 800daa2:	065b      	lsls	r3, r3, #25
 800daa4:	f53f af12 	bmi.w	800d8cc <_vfiprintf_r+0x4c>
 800daa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800daaa:	e711      	b.n	800d8d0 <_vfiprintf_r+0x50>
 800daac:	ab03      	add	r3, sp, #12
 800daae:	9300      	str	r3, [sp, #0]
 800dab0:	462a      	mov	r2, r5
 800dab2:	4b09      	ldr	r3, [pc, #36]	; (800dad8 <_vfiprintf_r+0x258>)
 800dab4:	a904      	add	r1, sp, #16
 800dab6:	4630      	mov	r0, r6
 800dab8:	f7fb fc56 	bl	8009368 <_printf_i>
 800dabc:	e7e4      	b.n	800da88 <_vfiprintf_r+0x208>
 800dabe:	bf00      	nop
 800dac0:	0801075c 	.word	0x0801075c
 800dac4:	0801077c 	.word	0x0801077c
 800dac8:	0801073c 	.word	0x0801073c
 800dacc:	080106d4 	.word	0x080106d4
 800dad0:	080106de 	.word	0x080106de
 800dad4:	08008e21 	.word	0x08008e21
 800dad8:	0800d85d 	.word	0x0800d85d
 800dadc:	080106da 	.word	0x080106da

0800dae0 <__swbuf_r>:
 800dae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dae2:	460e      	mov	r6, r1
 800dae4:	4614      	mov	r4, r2
 800dae6:	4605      	mov	r5, r0
 800dae8:	b118      	cbz	r0, 800daf2 <__swbuf_r+0x12>
 800daea:	6983      	ldr	r3, [r0, #24]
 800daec:	b90b      	cbnz	r3, 800daf2 <__swbuf_r+0x12>
 800daee:	f7ff fd97 	bl	800d620 <__sinit>
 800daf2:	4b21      	ldr	r3, [pc, #132]	; (800db78 <__swbuf_r+0x98>)
 800daf4:	429c      	cmp	r4, r3
 800daf6:	d12b      	bne.n	800db50 <__swbuf_r+0x70>
 800daf8:	686c      	ldr	r4, [r5, #4]
 800dafa:	69a3      	ldr	r3, [r4, #24]
 800dafc:	60a3      	str	r3, [r4, #8]
 800dafe:	89a3      	ldrh	r3, [r4, #12]
 800db00:	071a      	lsls	r2, r3, #28
 800db02:	d52f      	bpl.n	800db64 <__swbuf_r+0x84>
 800db04:	6923      	ldr	r3, [r4, #16]
 800db06:	b36b      	cbz	r3, 800db64 <__swbuf_r+0x84>
 800db08:	6923      	ldr	r3, [r4, #16]
 800db0a:	6820      	ldr	r0, [r4, #0]
 800db0c:	1ac0      	subs	r0, r0, r3
 800db0e:	6963      	ldr	r3, [r4, #20]
 800db10:	b2f6      	uxtb	r6, r6
 800db12:	4283      	cmp	r3, r0
 800db14:	4637      	mov	r7, r6
 800db16:	dc04      	bgt.n	800db22 <__swbuf_r+0x42>
 800db18:	4621      	mov	r1, r4
 800db1a:	4628      	mov	r0, r5
 800db1c:	f7ff fcec 	bl	800d4f8 <_fflush_r>
 800db20:	bb30      	cbnz	r0, 800db70 <__swbuf_r+0x90>
 800db22:	68a3      	ldr	r3, [r4, #8]
 800db24:	3b01      	subs	r3, #1
 800db26:	60a3      	str	r3, [r4, #8]
 800db28:	6823      	ldr	r3, [r4, #0]
 800db2a:	1c5a      	adds	r2, r3, #1
 800db2c:	6022      	str	r2, [r4, #0]
 800db2e:	701e      	strb	r6, [r3, #0]
 800db30:	6963      	ldr	r3, [r4, #20]
 800db32:	3001      	adds	r0, #1
 800db34:	4283      	cmp	r3, r0
 800db36:	d004      	beq.n	800db42 <__swbuf_r+0x62>
 800db38:	89a3      	ldrh	r3, [r4, #12]
 800db3a:	07db      	lsls	r3, r3, #31
 800db3c:	d506      	bpl.n	800db4c <__swbuf_r+0x6c>
 800db3e:	2e0a      	cmp	r6, #10
 800db40:	d104      	bne.n	800db4c <__swbuf_r+0x6c>
 800db42:	4621      	mov	r1, r4
 800db44:	4628      	mov	r0, r5
 800db46:	f7ff fcd7 	bl	800d4f8 <_fflush_r>
 800db4a:	b988      	cbnz	r0, 800db70 <__swbuf_r+0x90>
 800db4c:	4638      	mov	r0, r7
 800db4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db50:	4b0a      	ldr	r3, [pc, #40]	; (800db7c <__swbuf_r+0x9c>)
 800db52:	429c      	cmp	r4, r3
 800db54:	d101      	bne.n	800db5a <__swbuf_r+0x7a>
 800db56:	68ac      	ldr	r4, [r5, #8]
 800db58:	e7cf      	b.n	800dafa <__swbuf_r+0x1a>
 800db5a:	4b09      	ldr	r3, [pc, #36]	; (800db80 <__swbuf_r+0xa0>)
 800db5c:	429c      	cmp	r4, r3
 800db5e:	bf08      	it	eq
 800db60:	68ec      	ldreq	r4, [r5, #12]
 800db62:	e7ca      	b.n	800dafa <__swbuf_r+0x1a>
 800db64:	4621      	mov	r1, r4
 800db66:	4628      	mov	r0, r5
 800db68:	f000 f80c 	bl	800db84 <__swsetup_r>
 800db6c:	2800      	cmp	r0, #0
 800db6e:	d0cb      	beq.n	800db08 <__swbuf_r+0x28>
 800db70:	f04f 37ff 	mov.w	r7, #4294967295
 800db74:	e7ea      	b.n	800db4c <__swbuf_r+0x6c>
 800db76:	bf00      	nop
 800db78:	0801075c 	.word	0x0801075c
 800db7c:	0801077c 	.word	0x0801077c
 800db80:	0801073c 	.word	0x0801073c

0800db84 <__swsetup_r>:
 800db84:	4b32      	ldr	r3, [pc, #200]	; (800dc50 <__swsetup_r+0xcc>)
 800db86:	b570      	push	{r4, r5, r6, lr}
 800db88:	681d      	ldr	r5, [r3, #0]
 800db8a:	4606      	mov	r6, r0
 800db8c:	460c      	mov	r4, r1
 800db8e:	b125      	cbz	r5, 800db9a <__swsetup_r+0x16>
 800db90:	69ab      	ldr	r3, [r5, #24]
 800db92:	b913      	cbnz	r3, 800db9a <__swsetup_r+0x16>
 800db94:	4628      	mov	r0, r5
 800db96:	f7ff fd43 	bl	800d620 <__sinit>
 800db9a:	4b2e      	ldr	r3, [pc, #184]	; (800dc54 <__swsetup_r+0xd0>)
 800db9c:	429c      	cmp	r4, r3
 800db9e:	d10f      	bne.n	800dbc0 <__swsetup_r+0x3c>
 800dba0:	686c      	ldr	r4, [r5, #4]
 800dba2:	89a3      	ldrh	r3, [r4, #12]
 800dba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dba8:	0719      	lsls	r1, r3, #28
 800dbaa:	d42c      	bmi.n	800dc06 <__swsetup_r+0x82>
 800dbac:	06dd      	lsls	r5, r3, #27
 800dbae:	d411      	bmi.n	800dbd4 <__swsetup_r+0x50>
 800dbb0:	2309      	movs	r3, #9
 800dbb2:	6033      	str	r3, [r6, #0]
 800dbb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dbb8:	81a3      	strh	r3, [r4, #12]
 800dbba:	f04f 30ff 	mov.w	r0, #4294967295
 800dbbe:	e03e      	b.n	800dc3e <__swsetup_r+0xba>
 800dbc0:	4b25      	ldr	r3, [pc, #148]	; (800dc58 <__swsetup_r+0xd4>)
 800dbc2:	429c      	cmp	r4, r3
 800dbc4:	d101      	bne.n	800dbca <__swsetup_r+0x46>
 800dbc6:	68ac      	ldr	r4, [r5, #8]
 800dbc8:	e7eb      	b.n	800dba2 <__swsetup_r+0x1e>
 800dbca:	4b24      	ldr	r3, [pc, #144]	; (800dc5c <__swsetup_r+0xd8>)
 800dbcc:	429c      	cmp	r4, r3
 800dbce:	bf08      	it	eq
 800dbd0:	68ec      	ldreq	r4, [r5, #12]
 800dbd2:	e7e6      	b.n	800dba2 <__swsetup_r+0x1e>
 800dbd4:	0758      	lsls	r0, r3, #29
 800dbd6:	d512      	bpl.n	800dbfe <__swsetup_r+0x7a>
 800dbd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbda:	b141      	cbz	r1, 800dbee <__swsetup_r+0x6a>
 800dbdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbe0:	4299      	cmp	r1, r3
 800dbe2:	d002      	beq.n	800dbea <__swsetup_r+0x66>
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	f7fe fd51 	bl	800c68c <_free_r>
 800dbea:	2300      	movs	r3, #0
 800dbec:	6363      	str	r3, [r4, #52]	; 0x34
 800dbee:	89a3      	ldrh	r3, [r4, #12]
 800dbf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbf4:	81a3      	strh	r3, [r4, #12]
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	6063      	str	r3, [r4, #4]
 800dbfa:	6923      	ldr	r3, [r4, #16]
 800dbfc:	6023      	str	r3, [r4, #0]
 800dbfe:	89a3      	ldrh	r3, [r4, #12]
 800dc00:	f043 0308 	orr.w	r3, r3, #8
 800dc04:	81a3      	strh	r3, [r4, #12]
 800dc06:	6923      	ldr	r3, [r4, #16]
 800dc08:	b94b      	cbnz	r3, 800dc1e <__swsetup_r+0x9a>
 800dc0a:	89a3      	ldrh	r3, [r4, #12]
 800dc0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc14:	d003      	beq.n	800dc1e <__swsetup_r+0x9a>
 800dc16:	4621      	mov	r1, r4
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f000 f84d 	bl	800dcb8 <__smakebuf_r>
 800dc1e:	89a0      	ldrh	r0, [r4, #12]
 800dc20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc24:	f010 0301 	ands.w	r3, r0, #1
 800dc28:	d00a      	beq.n	800dc40 <__swsetup_r+0xbc>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	60a3      	str	r3, [r4, #8]
 800dc2e:	6963      	ldr	r3, [r4, #20]
 800dc30:	425b      	negs	r3, r3
 800dc32:	61a3      	str	r3, [r4, #24]
 800dc34:	6923      	ldr	r3, [r4, #16]
 800dc36:	b943      	cbnz	r3, 800dc4a <__swsetup_r+0xc6>
 800dc38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc3c:	d1ba      	bne.n	800dbb4 <__swsetup_r+0x30>
 800dc3e:	bd70      	pop	{r4, r5, r6, pc}
 800dc40:	0781      	lsls	r1, r0, #30
 800dc42:	bf58      	it	pl
 800dc44:	6963      	ldrpl	r3, [r4, #20]
 800dc46:	60a3      	str	r3, [r4, #8]
 800dc48:	e7f4      	b.n	800dc34 <__swsetup_r+0xb0>
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	e7f7      	b.n	800dc3e <__swsetup_r+0xba>
 800dc4e:	bf00      	nop
 800dc50:	20000020 	.word	0x20000020
 800dc54:	0801075c 	.word	0x0801075c
 800dc58:	0801077c 	.word	0x0801077c
 800dc5c:	0801073c 	.word	0x0801073c

0800dc60 <abort>:
 800dc60:	b508      	push	{r3, lr}
 800dc62:	2006      	movs	r0, #6
 800dc64:	f000 f898 	bl	800dd98 <raise>
 800dc68:	2001      	movs	r0, #1
 800dc6a:	f7f5 f90b 	bl	8002e84 <_exit>

0800dc6e <__swhatbuf_r>:
 800dc6e:	b570      	push	{r4, r5, r6, lr}
 800dc70:	460e      	mov	r6, r1
 800dc72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc76:	2900      	cmp	r1, #0
 800dc78:	b096      	sub	sp, #88	; 0x58
 800dc7a:	4614      	mov	r4, r2
 800dc7c:	461d      	mov	r5, r3
 800dc7e:	da08      	bge.n	800dc92 <__swhatbuf_r+0x24>
 800dc80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dc84:	2200      	movs	r2, #0
 800dc86:	602a      	str	r2, [r5, #0]
 800dc88:	061a      	lsls	r2, r3, #24
 800dc8a:	d410      	bmi.n	800dcae <__swhatbuf_r+0x40>
 800dc8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc90:	e00e      	b.n	800dcb0 <__swhatbuf_r+0x42>
 800dc92:	466a      	mov	r2, sp
 800dc94:	f000 f89c 	bl	800ddd0 <_fstat_r>
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	dbf1      	blt.n	800dc80 <__swhatbuf_r+0x12>
 800dc9c:	9a01      	ldr	r2, [sp, #4]
 800dc9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dca2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dca6:	425a      	negs	r2, r3
 800dca8:	415a      	adcs	r2, r3
 800dcaa:	602a      	str	r2, [r5, #0]
 800dcac:	e7ee      	b.n	800dc8c <__swhatbuf_r+0x1e>
 800dcae:	2340      	movs	r3, #64	; 0x40
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	6023      	str	r3, [r4, #0]
 800dcb4:	b016      	add	sp, #88	; 0x58
 800dcb6:	bd70      	pop	{r4, r5, r6, pc}

0800dcb8 <__smakebuf_r>:
 800dcb8:	898b      	ldrh	r3, [r1, #12]
 800dcba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcbc:	079d      	lsls	r5, r3, #30
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	460c      	mov	r4, r1
 800dcc2:	d507      	bpl.n	800dcd4 <__smakebuf_r+0x1c>
 800dcc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dcc8:	6023      	str	r3, [r4, #0]
 800dcca:	6123      	str	r3, [r4, #16]
 800dccc:	2301      	movs	r3, #1
 800dcce:	6163      	str	r3, [r4, #20]
 800dcd0:	b002      	add	sp, #8
 800dcd2:	bd70      	pop	{r4, r5, r6, pc}
 800dcd4:	ab01      	add	r3, sp, #4
 800dcd6:	466a      	mov	r2, sp
 800dcd8:	f7ff ffc9 	bl	800dc6e <__swhatbuf_r>
 800dcdc:	9900      	ldr	r1, [sp, #0]
 800dcde:	4605      	mov	r5, r0
 800dce0:	4630      	mov	r0, r6
 800dce2:	f7fe fd3f 	bl	800c764 <_malloc_r>
 800dce6:	b948      	cbnz	r0, 800dcfc <__smakebuf_r+0x44>
 800dce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcec:	059a      	lsls	r2, r3, #22
 800dcee:	d4ef      	bmi.n	800dcd0 <__smakebuf_r+0x18>
 800dcf0:	f023 0303 	bic.w	r3, r3, #3
 800dcf4:	f043 0302 	orr.w	r3, r3, #2
 800dcf8:	81a3      	strh	r3, [r4, #12]
 800dcfa:	e7e3      	b.n	800dcc4 <__smakebuf_r+0xc>
 800dcfc:	4b0d      	ldr	r3, [pc, #52]	; (800dd34 <__smakebuf_r+0x7c>)
 800dcfe:	62b3      	str	r3, [r6, #40]	; 0x28
 800dd00:	89a3      	ldrh	r3, [r4, #12]
 800dd02:	6020      	str	r0, [r4, #0]
 800dd04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd08:	81a3      	strh	r3, [r4, #12]
 800dd0a:	9b00      	ldr	r3, [sp, #0]
 800dd0c:	6163      	str	r3, [r4, #20]
 800dd0e:	9b01      	ldr	r3, [sp, #4]
 800dd10:	6120      	str	r0, [r4, #16]
 800dd12:	b15b      	cbz	r3, 800dd2c <__smakebuf_r+0x74>
 800dd14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd18:	4630      	mov	r0, r6
 800dd1a:	f000 f86b 	bl	800ddf4 <_isatty_r>
 800dd1e:	b128      	cbz	r0, 800dd2c <__smakebuf_r+0x74>
 800dd20:	89a3      	ldrh	r3, [r4, #12]
 800dd22:	f023 0303 	bic.w	r3, r3, #3
 800dd26:	f043 0301 	orr.w	r3, r3, #1
 800dd2a:	81a3      	strh	r3, [r4, #12]
 800dd2c:	89a0      	ldrh	r0, [r4, #12]
 800dd2e:	4305      	orrs	r5, r0
 800dd30:	81a5      	strh	r5, [r4, #12]
 800dd32:	e7cd      	b.n	800dcd0 <__smakebuf_r+0x18>
 800dd34:	0800d5b9 	.word	0x0800d5b9

0800dd38 <_malloc_usable_size_r>:
 800dd38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd3c:	1f18      	subs	r0, r3, #4
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	bfbc      	itt	lt
 800dd42:	580b      	ldrlt	r3, [r1, r0]
 800dd44:	18c0      	addlt	r0, r0, r3
 800dd46:	4770      	bx	lr

0800dd48 <_raise_r>:
 800dd48:	291f      	cmp	r1, #31
 800dd4a:	b538      	push	{r3, r4, r5, lr}
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	460d      	mov	r5, r1
 800dd50:	d904      	bls.n	800dd5c <_raise_r+0x14>
 800dd52:	2316      	movs	r3, #22
 800dd54:	6003      	str	r3, [r0, #0]
 800dd56:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5a:	bd38      	pop	{r3, r4, r5, pc}
 800dd5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dd5e:	b112      	cbz	r2, 800dd66 <_raise_r+0x1e>
 800dd60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd64:	b94b      	cbnz	r3, 800dd7a <_raise_r+0x32>
 800dd66:	4620      	mov	r0, r4
 800dd68:	f000 f830 	bl	800ddcc <_getpid_r>
 800dd6c:	462a      	mov	r2, r5
 800dd6e:	4601      	mov	r1, r0
 800dd70:	4620      	mov	r0, r4
 800dd72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd76:	f000 b817 	b.w	800dda8 <_kill_r>
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d00a      	beq.n	800dd94 <_raise_r+0x4c>
 800dd7e:	1c59      	adds	r1, r3, #1
 800dd80:	d103      	bne.n	800dd8a <_raise_r+0x42>
 800dd82:	2316      	movs	r3, #22
 800dd84:	6003      	str	r3, [r0, #0]
 800dd86:	2001      	movs	r0, #1
 800dd88:	e7e7      	b.n	800dd5a <_raise_r+0x12>
 800dd8a:	2400      	movs	r4, #0
 800dd8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dd90:	4628      	mov	r0, r5
 800dd92:	4798      	blx	r3
 800dd94:	2000      	movs	r0, #0
 800dd96:	e7e0      	b.n	800dd5a <_raise_r+0x12>

0800dd98 <raise>:
 800dd98:	4b02      	ldr	r3, [pc, #8]	; (800dda4 <raise+0xc>)
 800dd9a:	4601      	mov	r1, r0
 800dd9c:	6818      	ldr	r0, [r3, #0]
 800dd9e:	f7ff bfd3 	b.w	800dd48 <_raise_r>
 800dda2:	bf00      	nop
 800dda4:	20000020 	.word	0x20000020

0800dda8 <_kill_r>:
 800dda8:	b538      	push	{r3, r4, r5, lr}
 800ddaa:	4d07      	ldr	r5, [pc, #28]	; (800ddc8 <_kill_r+0x20>)
 800ddac:	2300      	movs	r3, #0
 800ddae:	4604      	mov	r4, r0
 800ddb0:	4608      	mov	r0, r1
 800ddb2:	4611      	mov	r1, r2
 800ddb4:	602b      	str	r3, [r5, #0]
 800ddb6:	f7f5 f855 	bl	8002e64 <_kill>
 800ddba:	1c43      	adds	r3, r0, #1
 800ddbc:	d102      	bne.n	800ddc4 <_kill_r+0x1c>
 800ddbe:	682b      	ldr	r3, [r5, #0]
 800ddc0:	b103      	cbz	r3, 800ddc4 <_kill_r+0x1c>
 800ddc2:	6023      	str	r3, [r4, #0]
 800ddc4:	bd38      	pop	{r3, r4, r5, pc}
 800ddc6:	bf00      	nop
 800ddc8:	20013ad8 	.word	0x20013ad8

0800ddcc <_getpid_r>:
 800ddcc:	f7f5 b842 	b.w	8002e54 <_getpid>

0800ddd0 <_fstat_r>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4d07      	ldr	r5, [pc, #28]	; (800ddf0 <_fstat_r+0x20>)
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	4604      	mov	r4, r0
 800ddd8:	4608      	mov	r0, r1
 800ddda:	4611      	mov	r1, r2
 800dddc:	602b      	str	r3, [r5, #0]
 800ddde:	f7f5 f8a0 	bl	8002f22 <_fstat>
 800dde2:	1c43      	adds	r3, r0, #1
 800dde4:	d102      	bne.n	800ddec <_fstat_r+0x1c>
 800dde6:	682b      	ldr	r3, [r5, #0]
 800dde8:	b103      	cbz	r3, 800ddec <_fstat_r+0x1c>
 800ddea:	6023      	str	r3, [r4, #0]
 800ddec:	bd38      	pop	{r3, r4, r5, pc}
 800ddee:	bf00      	nop
 800ddf0:	20013ad8 	.word	0x20013ad8

0800ddf4 <_isatty_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	4d06      	ldr	r5, [pc, #24]	; (800de10 <_isatty_r+0x1c>)
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	4608      	mov	r0, r1
 800ddfe:	602b      	str	r3, [r5, #0]
 800de00:	f7f5 f89f 	bl	8002f42 <_isatty>
 800de04:	1c43      	adds	r3, r0, #1
 800de06:	d102      	bne.n	800de0e <_isatty_r+0x1a>
 800de08:	682b      	ldr	r3, [r5, #0]
 800de0a:	b103      	cbz	r3, 800de0e <_isatty_r+0x1a>
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	20013ad8 	.word	0x20013ad8
 800de14:	00000000 	.word	0x00000000

0800de18 <cos>:
 800de18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de1a:	ec53 2b10 	vmov	r2, r3, d0
 800de1e:	4826      	ldr	r0, [pc, #152]	; (800deb8 <cos+0xa0>)
 800de20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800de24:	4281      	cmp	r1, r0
 800de26:	dc06      	bgt.n	800de36 <cos+0x1e>
 800de28:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800deb0 <cos+0x98>
 800de2c:	b005      	add	sp, #20
 800de2e:	f85d eb04 	ldr.w	lr, [sp], #4
 800de32:	f001 b9f9 	b.w	800f228 <__kernel_cos>
 800de36:	4821      	ldr	r0, [pc, #132]	; (800debc <cos+0xa4>)
 800de38:	4281      	cmp	r1, r0
 800de3a:	dd09      	ble.n	800de50 <cos+0x38>
 800de3c:	ee10 0a10 	vmov	r0, s0
 800de40:	4619      	mov	r1, r3
 800de42:	f7f2 fa39 	bl	80002b8 <__aeabi_dsub>
 800de46:	ec41 0b10 	vmov	d0, r0, r1
 800de4a:	b005      	add	sp, #20
 800de4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800de50:	4668      	mov	r0, sp
 800de52:	f000 ff29 	bl	800eca8 <__ieee754_rem_pio2>
 800de56:	f000 0003 	and.w	r0, r0, #3
 800de5a:	2801      	cmp	r0, #1
 800de5c:	d00b      	beq.n	800de76 <cos+0x5e>
 800de5e:	2802      	cmp	r0, #2
 800de60:	d016      	beq.n	800de90 <cos+0x78>
 800de62:	b9e0      	cbnz	r0, 800de9e <cos+0x86>
 800de64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de68:	ed9d 0b00 	vldr	d0, [sp]
 800de6c:	f001 f9dc 	bl	800f228 <__kernel_cos>
 800de70:	ec51 0b10 	vmov	r0, r1, d0
 800de74:	e7e7      	b.n	800de46 <cos+0x2e>
 800de76:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de7a:	ed9d 0b00 	vldr	d0, [sp]
 800de7e:	f001 fdeb 	bl	800fa58 <__kernel_sin>
 800de82:	ec53 2b10 	vmov	r2, r3, d0
 800de86:	ee10 0a10 	vmov	r0, s0
 800de8a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800de8e:	e7da      	b.n	800de46 <cos+0x2e>
 800de90:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de94:	ed9d 0b00 	vldr	d0, [sp]
 800de98:	f001 f9c6 	bl	800f228 <__kernel_cos>
 800de9c:	e7f1      	b.n	800de82 <cos+0x6a>
 800de9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dea2:	ed9d 0b00 	vldr	d0, [sp]
 800dea6:	2001      	movs	r0, #1
 800dea8:	f001 fdd6 	bl	800fa58 <__kernel_sin>
 800deac:	e7e0      	b.n	800de70 <cos+0x58>
 800deae:	bf00      	nop
	...
 800deb8:	3fe921fb 	.word	0x3fe921fb
 800debc:	7fefffff 	.word	0x7fefffff

0800dec0 <sin>:
 800dec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dec2:	ec53 2b10 	vmov	r2, r3, d0
 800dec6:	4828      	ldr	r0, [pc, #160]	; (800df68 <sin+0xa8>)
 800dec8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800decc:	4281      	cmp	r1, r0
 800dece:	dc07      	bgt.n	800dee0 <sin+0x20>
 800ded0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800df60 <sin+0xa0>
 800ded4:	2000      	movs	r0, #0
 800ded6:	b005      	add	sp, #20
 800ded8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dedc:	f001 bdbc 	b.w	800fa58 <__kernel_sin>
 800dee0:	4822      	ldr	r0, [pc, #136]	; (800df6c <sin+0xac>)
 800dee2:	4281      	cmp	r1, r0
 800dee4:	dd09      	ble.n	800defa <sin+0x3a>
 800dee6:	ee10 0a10 	vmov	r0, s0
 800deea:	4619      	mov	r1, r3
 800deec:	f7f2 f9e4 	bl	80002b8 <__aeabi_dsub>
 800def0:	ec41 0b10 	vmov	d0, r0, r1
 800def4:	b005      	add	sp, #20
 800def6:	f85d fb04 	ldr.w	pc, [sp], #4
 800defa:	4668      	mov	r0, sp
 800defc:	f000 fed4 	bl	800eca8 <__ieee754_rem_pio2>
 800df00:	f000 0003 	and.w	r0, r0, #3
 800df04:	2801      	cmp	r0, #1
 800df06:	d00c      	beq.n	800df22 <sin+0x62>
 800df08:	2802      	cmp	r0, #2
 800df0a:	d011      	beq.n	800df30 <sin+0x70>
 800df0c:	b9f0      	cbnz	r0, 800df4c <sin+0x8c>
 800df0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df12:	ed9d 0b00 	vldr	d0, [sp]
 800df16:	2001      	movs	r0, #1
 800df18:	f001 fd9e 	bl	800fa58 <__kernel_sin>
 800df1c:	ec51 0b10 	vmov	r0, r1, d0
 800df20:	e7e6      	b.n	800def0 <sin+0x30>
 800df22:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df26:	ed9d 0b00 	vldr	d0, [sp]
 800df2a:	f001 f97d 	bl	800f228 <__kernel_cos>
 800df2e:	e7f5      	b.n	800df1c <sin+0x5c>
 800df30:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df34:	ed9d 0b00 	vldr	d0, [sp]
 800df38:	2001      	movs	r0, #1
 800df3a:	f001 fd8d 	bl	800fa58 <__kernel_sin>
 800df3e:	ec53 2b10 	vmov	r2, r3, d0
 800df42:	ee10 0a10 	vmov	r0, s0
 800df46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800df4a:	e7d1      	b.n	800def0 <sin+0x30>
 800df4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df50:	ed9d 0b00 	vldr	d0, [sp]
 800df54:	f001 f968 	bl	800f228 <__kernel_cos>
 800df58:	e7f1      	b.n	800df3e <sin+0x7e>
 800df5a:	bf00      	nop
 800df5c:	f3af 8000 	nop.w
	...
 800df68:	3fe921fb 	.word	0x3fe921fb
 800df6c:	7fefffff 	.word	0x7fefffff

0800df70 <atan2>:
 800df70:	f000 b89e 	b.w	800e0b0 <__ieee754_atan2>

0800df74 <pow>:
 800df74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df76:	ed2d 8b02 	vpush	{d8}
 800df7a:	eeb0 8a40 	vmov.f32	s16, s0
 800df7e:	eef0 8a60 	vmov.f32	s17, s1
 800df82:	ec55 4b11 	vmov	r4, r5, d1
 800df86:	f000 f95f 	bl	800e248 <__ieee754_pow>
 800df8a:	4622      	mov	r2, r4
 800df8c:	462b      	mov	r3, r5
 800df8e:	4620      	mov	r0, r4
 800df90:	4629      	mov	r1, r5
 800df92:	ec57 6b10 	vmov	r6, r7, d0
 800df96:	f7f2 fde1 	bl	8000b5c <__aeabi_dcmpun>
 800df9a:	2800      	cmp	r0, #0
 800df9c:	d13b      	bne.n	800e016 <pow+0xa2>
 800df9e:	ec51 0b18 	vmov	r0, r1, d8
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	f7f2 fda7 	bl	8000af8 <__aeabi_dcmpeq>
 800dfaa:	b1b8      	cbz	r0, 800dfdc <pow+0x68>
 800dfac:	2200      	movs	r2, #0
 800dfae:	2300      	movs	r3, #0
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	f7f2 fda0 	bl	8000af8 <__aeabi_dcmpeq>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d146      	bne.n	800e04a <pow+0xd6>
 800dfbc:	ec45 4b10 	vmov	d0, r4, r5
 800dfc0:	f001 ffe3 	bl	800ff8a <finite>
 800dfc4:	b338      	cbz	r0, 800e016 <pow+0xa2>
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	2300      	movs	r3, #0
 800dfca:	4620      	mov	r0, r4
 800dfcc:	4629      	mov	r1, r5
 800dfce:	f7f2 fd9d 	bl	8000b0c <__aeabi_dcmplt>
 800dfd2:	b300      	cbz	r0, 800e016 <pow+0xa2>
 800dfd4:	f7fa fe44 	bl	8008c60 <__errno>
 800dfd8:	2322      	movs	r3, #34	; 0x22
 800dfda:	e01b      	b.n	800e014 <pow+0xa0>
 800dfdc:	ec47 6b10 	vmov	d0, r6, r7
 800dfe0:	f001 ffd3 	bl	800ff8a <finite>
 800dfe4:	b9e0      	cbnz	r0, 800e020 <pow+0xac>
 800dfe6:	eeb0 0a48 	vmov.f32	s0, s16
 800dfea:	eef0 0a68 	vmov.f32	s1, s17
 800dfee:	f001 ffcc 	bl	800ff8a <finite>
 800dff2:	b1a8      	cbz	r0, 800e020 <pow+0xac>
 800dff4:	ec45 4b10 	vmov	d0, r4, r5
 800dff8:	f001 ffc7 	bl	800ff8a <finite>
 800dffc:	b180      	cbz	r0, 800e020 <pow+0xac>
 800dffe:	4632      	mov	r2, r6
 800e000:	463b      	mov	r3, r7
 800e002:	4630      	mov	r0, r6
 800e004:	4639      	mov	r1, r7
 800e006:	f7f2 fda9 	bl	8000b5c <__aeabi_dcmpun>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	d0e2      	beq.n	800dfd4 <pow+0x60>
 800e00e:	f7fa fe27 	bl	8008c60 <__errno>
 800e012:	2321      	movs	r3, #33	; 0x21
 800e014:	6003      	str	r3, [r0, #0]
 800e016:	ecbd 8b02 	vpop	{d8}
 800e01a:	ec47 6b10 	vmov	d0, r6, r7
 800e01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e020:	2200      	movs	r2, #0
 800e022:	2300      	movs	r3, #0
 800e024:	4630      	mov	r0, r6
 800e026:	4639      	mov	r1, r7
 800e028:	f7f2 fd66 	bl	8000af8 <__aeabi_dcmpeq>
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d0f2      	beq.n	800e016 <pow+0xa2>
 800e030:	eeb0 0a48 	vmov.f32	s0, s16
 800e034:	eef0 0a68 	vmov.f32	s1, s17
 800e038:	f001 ffa7 	bl	800ff8a <finite>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d0ea      	beq.n	800e016 <pow+0xa2>
 800e040:	ec45 4b10 	vmov	d0, r4, r5
 800e044:	f001 ffa1 	bl	800ff8a <finite>
 800e048:	e7c3      	b.n	800dfd2 <pow+0x5e>
 800e04a:	4f01      	ldr	r7, [pc, #4]	; (800e050 <pow+0xdc>)
 800e04c:	2600      	movs	r6, #0
 800e04e:	e7e2      	b.n	800e016 <pow+0xa2>
 800e050:	3ff00000 	.word	0x3ff00000

0800e054 <sqrt>:
 800e054:	b538      	push	{r3, r4, r5, lr}
 800e056:	ed2d 8b02 	vpush	{d8}
 800e05a:	ec55 4b10 	vmov	r4, r5, d0
 800e05e:	f001 f82f 	bl	800f0c0 <__ieee754_sqrt>
 800e062:	4622      	mov	r2, r4
 800e064:	462b      	mov	r3, r5
 800e066:	4620      	mov	r0, r4
 800e068:	4629      	mov	r1, r5
 800e06a:	eeb0 8a40 	vmov.f32	s16, s0
 800e06e:	eef0 8a60 	vmov.f32	s17, s1
 800e072:	f7f2 fd73 	bl	8000b5c <__aeabi_dcmpun>
 800e076:	b990      	cbnz	r0, 800e09e <sqrt+0x4a>
 800e078:	2200      	movs	r2, #0
 800e07a:	2300      	movs	r3, #0
 800e07c:	4620      	mov	r0, r4
 800e07e:	4629      	mov	r1, r5
 800e080:	f7f2 fd44 	bl	8000b0c <__aeabi_dcmplt>
 800e084:	b158      	cbz	r0, 800e09e <sqrt+0x4a>
 800e086:	f7fa fdeb 	bl	8008c60 <__errno>
 800e08a:	2321      	movs	r3, #33	; 0x21
 800e08c:	6003      	str	r3, [r0, #0]
 800e08e:	2200      	movs	r2, #0
 800e090:	2300      	movs	r3, #0
 800e092:	4610      	mov	r0, r2
 800e094:	4619      	mov	r1, r3
 800e096:	f7f2 fbf1 	bl	800087c <__aeabi_ddiv>
 800e09a:	ec41 0b18 	vmov	d8, r0, r1
 800e09e:	eeb0 0a48 	vmov.f32	s0, s16
 800e0a2:	eef0 0a68 	vmov.f32	s1, s17
 800e0a6:	ecbd 8b02 	vpop	{d8}
 800e0aa:	bd38      	pop	{r3, r4, r5, pc}
 800e0ac:	0000      	movs	r0, r0
	...

0800e0b0 <__ieee754_atan2>:
 800e0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0b4:	ec57 6b11 	vmov	r6, r7, d1
 800e0b8:	4273      	negs	r3, r6
 800e0ba:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e240 <__ieee754_atan2+0x190>
 800e0be:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e0c2:	4333      	orrs	r3, r6
 800e0c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e0c8:	4573      	cmp	r3, lr
 800e0ca:	ec51 0b10 	vmov	r0, r1, d0
 800e0ce:	ee11 8a10 	vmov	r8, s2
 800e0d2:	d80a      	bhi.n	800e0ea <__ieee754_atan2+0x3a>
 800e0d4:	4244      	negs	r4, r0
 800e0d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e0da:	4304      	orrs	r4, r0
 800e0dc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e0e0:	4574      	cmp	r4, lr
 800e0e2:	ee10 9a10 	vmov	r9, s0
 800e0e6:	468c      	mov	ip, r1
 800e0e8:	d907      	bls.n	800e0fa <__ieee754_atan2+0x4a>
 800e0ea:	4632      	mov	r2, r6
 800e0ec:	463b      	mov	r3, r7
 800e0ee:	f7f2 f8e5 	bl	80002bc <__adddf3>
 800e0f2:	ec41 0b10 	vmov	d0, r0, r1
 800e0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0fa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e0fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e102:	4334      	orrs	r4, r6
 800e104:	d103      	bne.n	800e10e <__ieee754_atan2+0x5e>
 800e106:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e10a:	f001 bd95 	b.w	800fc38 <atan>
 800e10e:	17bc      	asrs	r4, r7, #30
 800e110:	f004 0402 	and.w	r4, r4, #2
 800e114:	ea53 0909 	orrs.w	r9, r3, r9
 800e118:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e11c:	d107      	bne.n	800e12e <__ieee754_atan2+0x7e>
 800e11e:	2c02      	cmp	r4, #2
 800e120:	d060      	beq.n	800e1e4 <__ieee754_atan2+0x134>
 800e122:	2c03      	cmp	r4, #3
 800e124:	d1e5      	bne.n	800e0f2 <__ieee754_atan2+0x42>
 800e126:	a142      	add	r1, pc, #264	; (adr r1, 800e230 <__ieee754_atan2+0x180>)
 800e128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e12c:	e7e1      	b.n	800e0f2 <__ieee754_atan2+0x42>
 800e12e:	ea52 0808 	orrs.w	r8, r2, r8
 800e132:	d106      	bne.n	800e142 <__ieee754_atan2+0x92>
 800e134:	f1bc 0f00 	cmp.w	ip, #0
 800e138:	da5f      	bge.n	800e1fa <__ieee754_atan2+0x14a>
 800e13a:	a13f      	add	r1, pc, #252	; (adr r1, 800e238 <__ieee754_atan2+0x188>)
 800e13c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e140:	e7d7      	b.n	800e0f2 <__ieee754_atan2+0x42>
 800e142:	4572      	cmp	r2, lr
 800e144:	d10f      	bne.n	800e166 <__ieee754_atan2+0xb6>
 800e146:	4293      	cmp	r3, r2
 800e148:	f104 34ff 	add.w	r4, r4, #4294967295
 800e14c:	d107      	bne.n	800e15e <__ieee754_atan2+0xae>
 800e14e:	2c02      	cmp	r4, #2
 800e150:	d84c      	bhi.n	800e1ec <__ieee754_atan2+0x13c>
 800e152:	4b35      	ldr	r3, [pc, #212]	; (800e228 <__ieee754_atan2+0x178>)
 800e154:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e158:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e15c:	e7c9      	b.n	800e0f2 <__ieee754_atan2+0x42>
 800e15e:	2c02      	cmp	r4, #2
 800e160:	d848      	bhi.n	800e1f4 <__ieee754_atan2+0x144>
 800e162:	4b32      	ldr	r3, [pc, #200]	; (800e22c <__ieee754_atan2+0x17c>)
 800e164:	e7f6      	b.n	800e154 <__ieee754_atan2+0xa4>
 800e166:	4573      	cmp	r3, lr
 800e168:	d0e4      	beq.n	800e134 <__ieee754_atan2+0x84>
 800e16a:	1a9b      	subs	r3, r3, r2
 800e16c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e170:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e174:	da1e      	bge.n	800e1b4 <__ieee754_atan2+0x104>
 800e176:	2f00      	cmp	r7, #0
 800e178:	da01      	bge.n	800e17e <__ieee754_atan2+0xce>
 800e17a:	323c      	adds	r2, #60	; 0x3c
 800e17c:	db1e      	blt.n	800e1bc <__ieee754_atan2+0x10c>
 800e17e:	4632      	mov	r2, r6
 800e180:	463b      	mov	r3, r7
 800e182:	f7f2 fb7b 	bl	800087c <__aeabi_ddiv>
 800e186:	ec41 0b10 	vmov	d0, r0, r1
 800e18a:	f001 fef5 	bl	800ff78 <fabs>
 800e18e:	f001 fd53 	bl	800fc38 <atan>
 800e192:	ec51 0b10 	vmov	r0, r1, d0
 800e196:	2c01      	cmp	r4, #1
 800e198:	d013      	beq.n	800e1c2 <__ieee754_atan2+0x112>
 800e19a:	2c02      	cmp	r4, #2
 800e19c:	d015      	beq.n	800e1ca <__ieee754_atan2+0x11a>
 800e19e:	2c00      	cmp	r4, #0
 800e1a0:	d0a7      	beq.n	800e0f2 <__ieee754_atan2+0x42>
 800e1a2:	a319      	add	r3, pc, #100	; (adr r3, 800e208 <__ieee754_atan2+0x158>)
 800e1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a8:	f7f2 f886 	bl	80002b8 <__aeabi_dsub>
 800e1ac:	a318      	add	r3, pc, #96	; (adr r3, 800e210 <__ieee754_atan2+0x160>)
 800e1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b2:	e014      	b.n	800e1de <__ieee754_atan2+0x12e>
 800e1b4:	a118      	add	r1, pc, #96	; (adr r1, 800e218 <__ieee754_atan2+0x168>)
 800e1b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1ba:	e7ec      	b.n	800e196 <__ieee754_atan2+0xe6>
 800e1bc:	2000      	movs	r0, #0
 800e1be:	2100      	movs	r1, #0
 800e1c0:	e7e9      	b.n	800e196 <__ieee754_atan2+0xe6>
 800e1c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	e793      	b.n	800e0f2 <__ieee754_atan2+0x42>
 800e1ca:	a30f      	add	r3, pc, #60	; (adr r3, 800e208 <__ieee754_atan2+0x158>)
 800e1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d0:	f7f2 f872 	bl	80002b8 <__aeabi_dsub>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	a10d      	add	r1, pc, #52	; (adr r1, 800e210 <__ieee754_atan2+0x160>)
 800e1da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1de:	f7f2 f86b 	bl	80002b8 <__aeabi_dsub>
 800e1e2:	e786      	b.n	800e0f2 <__ieee754_atan2+0x42>
 800e1e4:	a10a      	add	r1, pc, #40	; (adr r1, 800e210 <__ieee754_atan2+0x160>)
 800e1e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1ea:	e782      	b.n	800e0f2 <__ieee754_atan2+0x42>
 800e1ec:	a10c      	add	r1, pc, #48	; (adr r1, 800e220 <__ieee754_atan2+0x170>)
 800e1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1f2:	e77e      	b.n	800e0f2 <__ieee754_atan2+0x42>
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	e77b      	b.n	800e0f2 <__ieee754_atan2+0x42>
 800e1fa:	a107      	add	r1, pc, #28	; (adr r1, 800e218 <__ieee754_atan2+0x168>)
 800e1fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e200:	e777      	b.n	800e0f2 <__ieee754_atan2+0x42>
 800e202:	bf00      	nop
 800e204:	f3af 8000 	nop.w
 800e208:	33145c07 	.word	0x33145c07
 800e20c:	3ca1a626 	.word	0x3ca1a626
 800e210:	54442d18 	.word	0x54442d18
 800e214:	400921fb 	.word	0x400921fb
 800e218:	54442d18 	.word	0x54442d18
 800e21c:	3ff921fb 	.word	0x3ff921fb
 800e220:	54442d18 	.word	0x54442d18
 800e224:	3fe921fb 	.word	0x3fe921fb
 800e228:	080107a0 	.word	0x080107a0
 800e22c:	080107b8 	.word	0x080107b8
 800e230:	54442d18 	.word	0x54442d18
 800e234:	c00921fb 	.word	0xc00921fb
 800e238:	54442d18 	.word	0x54442d18
 800e23c:	bff921fb 	.word	0xbff921fb
 800e240:	7ff00000 	.word	0x7ff00000
 800e244:	00000000 	.word	0x00000000

0800e248 <__ieee754_pow>:
 800e248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24c:	ed2d 8b06 	vpush	{d8-d10}
 800e250:	b089      	sub	sp, #36	; 0x24
 800e252:	ed8d 1b00 	vstr	d1, [sp]
 800e256:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e25a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e25e:	ea58 0102 	orrs.w	r1, r8, r2
 800e262:	ec57 6b10 	vmov	r6, r7, d0
 800e266:	d115      	bne.n	800e294 <__ieee754_pow+0x4c>
 800e268:	19b3      	adds	r3, r6, r6
 800e26a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e26e:	4152      	adcs	r2, r2
 800e270:	4299      	cmp	r1, r3
 800e272:	4b89      	ldr	r3, [pc, #548]	; (800e498 <__ieee754_pow+0x250>)
 800e274:	4193      	sbcs	r3, r2
 800e276:	f080 84d2 	bcs.w	800ec1e <__ieee754_pow+0x9d6>
 800e27a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e27e:	4630      	mov	r0, r6
 800e280:	4639      	mov	r1, r7
 800e282:	f7f2 f81b 	bl	80002bc <__adddf3>
 800e286:	ec41 0b10 	vmov	d0, r0, r1
 800e28a:	b009      	add	sp, #36	; 0x24
 800e28c:	ecbd 8b06 	vpop	{d8-d10}
 800e290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e294:	4b81      	ldr	r3, [pc, #516]	; (800e49c <__ieee754_pow+0x254>)
 800e296:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e29a:	429c      	cmp	r4, r3
 800e29c:	ee10 aa10 	vmov	sl, s0
 800e2a0:	463d      	mov	r5, r7
 800e2a2:	dc06      	bgt.n	800e2b2 <__ieee754_pow+0x6a>
 800e2a4:	d101      	bne.n	800e2aa <__ieee754_pow+0x62>
 800e2a6:	2e00      	cmp	r6, #0
 800e2a8:	d1e7      	bne.n	800e27a <__ieee754_pow+0x32>
 800e2aa:	4598      	cmp	r8, r3
 800e2ac:	dc01      	bgt.n	800e2b2 <__ieee754_pow+0x6a>
 800e2ae:	d10f      	bne.n	800e2d0 <__ieee754_pow+0x88>
 800e2b0:	b172      	cbz	r2, 800e2d0 <__ieee754_pow+0x88>
 800e2b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e2b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e2ba:	ea55 050a 	orrs.w	r5, r5, sl
 800e2be:	d1dc      	bne.n	800e27a <__ieee754_pow+0x32>
 800e2c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e2c4:	18db      	adds	r3, r3, r3
 800e2c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e2ca:	4152      	adcs	r2, r2
 800e2cc:	429d      	cmp	r5, r3
 800e2ce:	e7d0      	b.n	800e272 <__ieee754_pow+0x2a>
 800e2d0:	2d00      	cmp	r5, #0
 800e2d2:	da3b      	bge.n	800e34c <__ieee754_pow+0x104>
 800e2d4:	4b72      	ldr	r3, [pc, #456]	; (800e4a0 <__ieee754_pow+0x258>)
 800e2d6:	4598      	cmp	r8, r3
 800e2d8:	dc51      	bgt.n	800e37e <__ieee754_pow+0x136>
 800e2da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e2de:	4598      	cmp	r8, r3
 800e2e0:	f340 84ac 	ble.w	800ec3c <__ieee754_pow+0x9f4>
 800e2e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e2e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e2ec:	2b14      	cmp	r3, #20
 800e2ee:	dd0f      	ble.n	800e310 <__ieee754_pow+0xc8>
 800e2f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e2f4:	fa22 f103 	lsr.w	r1, r2, r3
 800e2f8:	fa01 f303 	lsl.w	r3, r1, r3
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	f040 849d 	bne.w	800ec3c <__ieee754_pow+0x9f4>
 800e302:	f001 0101 	and.w	r1, r1, #1
 800e306:	f1c1 0302 	rsb	r3, r1, #2
 800e30a:	9304      	str	r3, [sp, #16]
 800e30c:	b182      	cbz	r2, 800e330 <__ieee754_pow+0xe8>
 800e30e:	e05f      	b.n	800e3d0 <__ieee754_pow+0x188>
 800e310:	2a00      	cmp	r2, #0
 800e312:	d15b      	bne.n	800e3cc <__ieee754_pow+0x184>
 800e314:	f1c3 0314 	rsb	r3, r3, #20
 800e318:	fa48 f103 	asr.w	r1, r8, r3
 800e31c:	fa01 f303 	lsl.w	r3, r1, r3
 800e320:	4543      	cmp	r3, r8
 800e322:	f040 8488 	bne.w	800ec36 <__ieee754_pow+0x9ee>
 800e326:	f001 0101 	and.w	r1, r1, #1
 800e32a:	f1c1 0302 	rsb	r3, r1, #2
 800e32e:	9304      	str	r3, [sp, #16]
 800e330:	4b5c      	ldr	r3, [pc, #368]	; (800e4a4 <__ieee754_pow+0x25c>)
 800e332:	4598      	cmp	r8, r3
 800e334:	d132      	bne.n	800e39c <__ieee754_pow+0x154>
 800e336:	f1b9 0f00 	cmp.w	r9, #0
 800e33a:	f280 8478 	bge.w	800ec2e <__ieee754_pow+0x9e6>
 800e33e:	4959      	ldr	r1, [pc, #356]	; (800e4a4 <__ieee754_pow+0x25c>)
 800e340:	4632      	mov	r2, r6
 800e342:	463b      	mov	r3, r7
 800e344:	2000      	movs	r0, #0
 800e346:	f7f2 fa99 	bl	800087c <__aeabi_ddiv>
 800e34a:	e79c      	b.n	800e286 <__ieee754_pow+0x3e>
 800e34c:	2300      	movs	r3, #0
 800e34e:	9304      	str	r3, [sp, #16]
 800e350:	2a00      	cmp	r2, #0
 800e352:	d13d      	bne.n	800e3d0 <__ieee754_pow+0x188>
 800e354:	4b51      	ldr	r3, [pc, #324]	; (800e49c <__ieee754_pow+0x254>)
 800e356:	4598      	cmp	r8, r3
 800e358:	d1ea      	bne.n	800e330 <__ieee754_pow+0xe8>
 800e35a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e35e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e362:	ea53 030a 	orrs.w	r3, r3, sl
 800e366:	f000 845a 	beq.w	800ec1e <__ieee754_pow+0x9d6>
 800e36a:	4b4f      	ldr	r3, [pc, #316]	; (800e4a8 <__ieee754_pow+0x260>)
 800e36c:	429c      	cmp	r4, r3
 800e36e:	dd08      	ble.n	800e382 <__ieee754_pow+0x13a>
 800e370:	f1b9 0f00 	cmp.w	r9, #0
 800e374:	f2c0 8457 	blt.w	800ec26 <__ieee754_pow+0x9de>
 800e378:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e37c:	e783      	b.n	800e286 <__ieee754_pow+0x3e>
 800e37e:	2302      	movs	r3, #2
 800e380:	e7e5      	b.n	800e34e <__ieee754_pow+0x106>
 800e382:	f1b9 0f00 	cmp.w	r9, #0
 800e386:	f04f 0000 	mov.w	r0, #0
 800e38a:	f04f 0100 	mov.w	r1, #0
 800e38e:	f6bf af7a 	bge.w	800e286 <__ieee754_pow+0x3e>
 800e392:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e396:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e39a:	e774      	b.n	800e286 <__ieee754_pow+0x3e>
 800e39c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e3a0:	d106      	bne.n	800e3b0 <__ieee754_pow+0x168>
 800e3a2:	4632      	mov	r2, r6
 800e3a4:	463b      	mov	r3, r7
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	4639      	mov	r1, r7
 800e3aa:	f7f2 f93d 	bl	8000628 <__aeabi_dmul>
 800e3ae:	e76a      	b.n	800e286 <__ieee754_pow+0x3e>
 800e3b0:	4b3e      	ldr	r3, [pc, #248]	; (800e4ac <__ieee754_pow+0x264>)
 800e3b2:	4599      	cmp	r9, r3
 800e3b4:	d10c      	bne.n	800e3d0 <__ieee754_pow+0x188>
 800e3b6:	2d00      	cmp	r5, #0
 800e3b8:	db0a      	blt.n	800e3d0 <__ieee754_pow+0x188>
 800e3ba:	ec47 6b10 	vmov	d0, r6, r7
 800e3be:	b009      	add	sp, #36	; 0x24
 800e3c0:	ecbd 8b06 	vpop	{d8-d10}
 800e3c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c8:	f000 be7a 	b.w	800f0c0 <__ieee754_sqrt>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	9304      	str	r3, [sp, #16]
 800e3d0:	ec47 6b10 	vmov	d0, r6, r7
 800e3d4:	f001 fdd0 	bl	800ff78 <fabs>
 800e3d8:	ec51 0b10 	vmov	r0, r1, d0
 800e3dc:	f1ba 0f00 	cmp.w	sl, #0
 800e3e0:	d129      	bne.n	800e436 <__ieee754_pow+0x1ee>
 800e3e2:	b124      	cbz	r4, 800e3ee <__ieee754_pow+0x1a6>
 800e3e4:	4b2f      	ldr	r3, [pc, #188]	; (800e4a4 <__ieee754_pow+0x25c>)
 800e3e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d123      	bne.n	800e436 <__ieee754_pow+0x1ee>
 800e3ee:	f1b9 0f00 	cmp.w	r9, #0
 800e3f2:	da05      	bge.n	800e400 <__ieee754_pow+0x1b8>
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	460b      	mov	r3, r1
 800e3f8:	2000      	movs	r0, #0
 800e3fa:	492a      	ldr	r1, [pc, #168]	; (800e4a4 <__ieee754_pow+0x25c>)
 800e3fc:	f7f2 fa3e 	bl	800087c <__aeabi_ddiv>
 800e400:	2d00      	cmp	r5, #0
 800e402:	f6bf af40 	bge.w	800e286 <__ieee754_pow+0x3e>
 800e406:	9b04      	ldr	r3, [sp, #16]
 800e408:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e40c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e410:	4323      	orrs	r3, r4
 800e412:	d108      	bne.n	800e426 <__ieee754_pow+0x1de>
 800e414:	4602      	mov	r2, r0
 800e416:	460b      	mov	r3, r1
 800e418:	4610      	mov	r0, r2
 800e41a:	4619      	mov	r1, r3
 800e41c:	f7f1 ff4c 	bl	80002b8 <__aeabi_dsub>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	e78f      	b.n	800e346 <__ieee754_pow+0xfe>
 800e426:	9b04      	ldr	r3, [sp, #16]
 800e428:	2b01      	cmp	r3, #1
 800e42a:	f47f af2c 	bne.w	800e286 <__ieee754_pow+0x3e>
 800e42e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e432:	4619      	mov	r1, r3
 800e434:	e727      	b.n	800e286 <__ieee754_pow+0x3e>
 800e436:	0feb      	lsrs	r3, r5, #31
 800e438:	3b01      	subs	r3, #1
 800e43a:	9306      	str	r3, [sp, #24]
 800e43c:	9a06      	ldr	r2, [sp, #24]
 800e43e:	9b04      	ldr	r3, [sp, #16]
 800e440:	4313      	orrs	r3, r2
 800e442:	d102      	bne.n	800e44a <__ieee754_pow+0x202>
 800e444:	4632      	mov	r2, r6
 800e446:	463b      	mov	r3, r7
 800e448:	e7e6      	b.n	800e418 <__ieee754_pow+0x1d0>
 800e44a:	4b19      	ldr	r3, [pc, #100]	; (800e4b0 <__ieee754_pow+0x268>)
 800e44c:	4598      	cmp	r8, r3
 800e44e:	f340 80fb 	ble.w	800e648 <__ieee754_pow+0x400>
 800e452:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e456:	4598      	cmp	r8, r3
 800e458:	4b13      	ldr	r3, [pc, #76]	; (800e4a8 <__ieee754_pow+0x260>)
 800e45a:	dd0c      	ble.n	800e476 <__ieee754_pow+0x22e>
 800e45c:	429c      	cmp	r4, r3
 800e45e:	dc0f      	bgt.n	800e480 <__ieee754_pow+0x238>
 800e460:	f1b9 0f00 	cmp.w	r9, #0
 800e464:	da0f      	bge.n	800e486 <__ieee754_pow+0x23e>
 800e466:	2000      	movs	r0, #0
 800e468:	b009      	add	sp, #36	; 0x24
 800e46a:	ecbd 8b06 	vpop	{d8-d10}
 800e46e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e472:	f001 bbd6 	b.w	800fc22 <__math_oflow>
 800e476:	429c      	cmp	r4, r3
 800e478:	dbf2      	blt.n	800e460 <__ieee754_pow+0x218>
 800e47a:	4b0a      	ldr	r3, [pc, #40]	; (800e4a4 <__ieee754_pow+0x25c>)
 800e47c:	429c      	cmp	r4, r3
 800e47e:	dd19      	ble.n	800e4b4 <__ieee754_pow+0x26c>
 800e480:	f1b9 0f00 	cmp.w	r9, #0
 800e484:	dcef      	bgt.n	800e466 <__ieee754_pow+0x21e>
 800e486:	2000      	movs	r0, #0
 800e488:	b009      	add	sp, #36	; 0x24
 800e48a:	ecbd 8b06 	vpop	{d8-d10}
 800e48e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e492:	f001 bbbd 	b.w	800fc10 <__math_uflow>
 800e496:	bf00      	nop
 800e498:	fff00000 	.word	0xfff00000
 800e49c:	7ff00000 	.word	0x7ff00000
 800e4a0:	433fffff 	.word	0x433fffff
 800e4a4:	3ff00000 	.word	0x3ff00000
 800e4a8:	3fefffff 	.word	0x3fefffff
 800e4ac:	3fe00000 	.word	0x3fe00000
 800e4b0:	41e00000 	.word	0x41e00000
 800e4b4:	4b60      	ldr	r3, [pc, #384]	; (800e638 <__ieee754_pow+0x3f0>)
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	f7f1 fefe 	bl	80002b8 <__aeabi_dsub>
 800e4bc:	a354      	add	r3, pc, #336	; (adr r3, 800e610 <__ieee754_pow+0x3c8>)
 800e4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	460d      	mov	r5, r1
 800e4c6:	f7f2 f8af 	bl	8000628 <__aeabi_dmul>
 800e4ca:	a353      	add	r3, pc, #332	; (adr r3, 800e618 <__ieee754_pow+0x3d0>)
 800e4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d0:	4606      	mov	r6, r0
 800e4d2:	460f      	mov	r7, r1
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	4629      	mov	r1, r5
 800e4d8:	f7f2 f8a6 	bl	8000628 <__aeabi_dmul>
 800e4dc:	4b57      	ldr	r3, [pc, #348]	; (800e63c <__ieee754_pow+0x3f4>)
 800e4de:	4682      	mov	sl, r0
 800e4e0:	468b      	mov	fp, r1
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	4629      	mov	r1, r5
 800e4e8:	f7f2 f89e 	bl	8000628 <__aeabi_dmul>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	a14b      	add	r1, pc, #300	; (adr r1, 800e620 <__ieee754_pow+0x3d8>)
 800e4f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4f6:	f7f1 fedf 	bl	80002b8 <__aeabi_dsub>
 800e4fa:	4622      	mov	r2, r4
 800e4fc:	462b      	mov	r3, r5
 800e4fe:	f7f2 f893 	bl	8000628 <__aeabi_dmul>
 800e502:	4602      	mov	r2, r0
 800e504:	460b      	mov	r3, r1
 800e506:	2000      	movs	r0, #0
 800e508:	494d      	ldr	r1, [pc, #308]	; (800e640 <__ieee754_pow+0x3f8>)
 800e50a:	f7f1 fed5 	bl	80002b8 <__aeabi_dsub>
 800e50e:	4622      	mov	r2, r4
 800e510:	4680      	mov	r8, r0
 800e512:	4689      	mov	r9, r1
 800e514:	462b      	mov	r3, r5
 800e516:	4620      	mov	r0, r4
 800e518:	4629      	mov	r1, r5
 800e51a:	f7f2 f885 	bl	8000628 <__aeabi_dmul>
 800e51e:	4602      	mov	r2, r0
 800e520:	460b      	mov	r3, r1
 800e522:	4640      	mov	r0, r8
 800e524:	4649      	mov	r1, r9
 800e526:	f7f2 f87f 	bl	8000628 <__aeabi_dmul>
 800e52a:	a33f      	add	r3, pc, #252	; (adr r3, 800e628 <__ieee754_pow+0x3e0>)
 800e52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e530:	f7f2 f87a 	bl	8000628 <__aeabi_dmul>
 800e534:	4602      	mov	r2, r0
 800e536:	460b      	mov	r3, r1
 800e538:	4650      	mov	r0, sl
 800e53a:	4659      	mov	r1, fp
 800e53c:	f7f1 febc 	bl	80002b8 <__aeabi_dsub>
 800e540:	4602      	mov	r2, r0
 800e542:	460b      	mov	r3, r1
 800e544:	4680      	mov	r8, r0
 800e546:	4689      	mov	r9, r1
 800e548:	4630      	mov	r0, r6
 800e54a:	4639      	mov	r1, r7
 800e54c:	f7f1 feb6 	bl	80002bc <__adddf3>
 800e550:	2000      	movs	r0, #0
 800e552:	4632      	mov	r2, r6
 800e554:	463b      	mov	r3, r7
 800e556:	4604      	mov	r4, r0
 800e558:	460d      	mov	r5, r1
 800e55a:	f7f1 fead 	bl	80002b8 <__aeabi_dsub>
 800e55e:	4602      	mov	r2, r0
 800e560:	460b      	mov	r3, r1
 800e562:	4640      	mov	r0, r8
 800e564:	4649      	mov	r1, r9
 800e566:	f7f1 fea7 	bl	80002b8 <__aeabi_dsub>
 800e56a:	9b04      	ldr	r3, [sp, #16]
 800e56c:	9a06      	ldr	r2, [sp, #24]
 800e56e:	3b01      	subs	r3, #1
 800e570:	4313      	orrs	r3, r2
 800e572:	4682      	mov	sl, r0
 800e574:	468b      	mov	fp, r1
 800e576:	f040 81e7 	bne.w	800e948 <__ieee754_pow+0x700>
 800e57a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e630 <__ieee754_pow+0x3e8>
 800e57e:	eeb0 8a47 	vmov.f32	s16, s14
 800e582:	eef0 8a67 	vmov.f32	s17, s15
 800e586:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e58a:	2600      	movs	r6, #0
 800e58c:	4632      	mov	r2, r6
 800e58e:	463b      	mov	r3, r7
 800e590:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e594:	f7f1 fe90 	bl	80002b8 <__aeabi_dsub>
 800e598:	4622      	mov	r2, r4
 800e59a:	462b      	mov	r3, r5
 800e59c:	f7f2 f844 	bl	8000628 <__aeabi_dmul>
 800e5a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5a4:	4680      	mov	r8, r0
 800e5a6:	4689      	mov	r9, r1
 800e5a8:	4650      	mov	r0, sl
 800e5aa:	4659      	mov	r1, fp
 800e5ac:	f7f2 f83c 	bl	8000628 <__aeabi_dmul>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	4640      	mov	r0, r8
 800e5b6:	4649      	mov	r1, r9
 800e5b8:	f7f1 fe80 	bl	80002bc <__adddf3>
 800e5bc:	4632      	mov	r2, r6
 800e5be:	463b      	mov	r3, r7
 800e5c0:	4680      	mov	r8, r0
 800e5c2:	4689      	mov	r9, r1
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	4629      	mov	r1, r5
 800e5c8:	f7f2 f82e 	bl	8000628 <__aeabi_dmul>
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	4604      	mov	r4, r0
 800e5d0:	460d      	mov	r5, r1
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	4649      	mov	r1, r9
 800e5d6:	4640      	mov	r0, r8
 800e5d8:	f7f1 fe70 	bl	80002bc <__adddf3>
 800e5dc:	4b19      	ldr	r3, [pc, #100]	; (800e644 <__ieee754_pow+0x3fc>)
 800e5de:	4299      	cmp	r1, r3
 800e5e0:	ec45 4b19 	vmov	d9, r4, r5
 800e5e4:	4606      	mov	r6, r0
 800e5e6:	460f      	mov	r7, r1
 800e5e8:	468b      	mov	fp, r1
 800e5ea:	f340 82f1 	ble.w	800ebd0 <__ieee754_pow+0x988>
 800e5ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e5f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e5f6:	4303      	orrs	r3, r0
 800e5f8:	f000 81e4 	beq.w	800e9c4 <__ieee754_pow+0x77c>
 800e5fc:	ec51 0b18 	vmov	r0, r1, d8
 800e600:	2200      	movs	r2, #0
 800e602:	2300      	movs	r3, #0
 800e604:	f7f2 fa82 	bl	8000b0c <__aeabi_dcmplt>
 800e608:	3800      	subs	r0, #0
 800e60a:	bf18      	it	ne
 800e60c:	2001      	movne	r0, #1
 800e60e:	e72b      	b.n	800e468 <__ieee754_pow+0x220>
 800e610:	60000000 	.word	0x60000000
 800e614:	3ff71547 	.word	0x3ff71547
 800e618:	f85ddf44 	.word	0xf85ddf44
 800e61c:	3e54ae0b 	.word	0x3e54ae0b
 800e620:	55555555 	.word	0x55555555
 800e624:	3fd55555 	.word	0x3fd55555
 800e628:	652b82fe 	.word	0x652b82fe
 800e62c:	3ff71547 	.word	0x3ff71547
 800e630:	00000000 	.word	0x00000000
 800e634:	bff00000 	.word	0xbff00000
 800e638:	3ff00000 	.word	0x3ff00000
 800e63c:	3fd00000 	.word	0x3fd00000
 800e640:	3fe00000 	.word	0x3fe00000
 800e644:	408fffff 	.word	0x408fffff
 800e648:	4bd5      	ldr	r3, [pc, #852]	; (800e9a0 <__ieee754_pow+0x758>)
 800e64a:	402b      	ands	r3, r5
 800e64c:	2200      	movs	r2, #0
 800e64e:	b92b      	cbnz	r3, 800e65c <__ieee754_pow+0x414>
 800e650:	4bd4      	ldr	r3, [pc, #848]	; (800e9a4 <__ieee754_pow+0x75c>)
 800e652:	f7f1 ffe9 	bl	8000628 <__aeabi_dmul>
 800e656:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e65a:	460c      	mov	r4, r1
 800e65c:	1523      	asrs	r3, r4, #20
 800e65e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e662:	4413      	add	r3, r2
 800e664:	9305      	str	r3, [sp, #20]
 800e666:	4bd0      	ldr	r3, [pc, #832]	; (800e9a8 <__ieee754_pow+0x760>)
 800e668:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e66c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e670:	429c      	cmp	r4, r3
 800e672:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e676:	dd08      	ble.n	800e68a <__ieee754_pow+0x442>
 800e678:	4bcc      	ldr	r3, [pc, #816]	; (800e9ac <__ieee754_pow+0x764>)
 800e67a:	429c      	cmp	r4, r3
 800e67c:	f340 8162 	ble.w	800e944 <__ieee754_pow+0x6fc>
 800e680:	9b05      	ldr	r3, [sp, #20]
 800e682:	3301      	adds	r3, #1
 800e684:	9305      	str	r3, [sp, #20]
 800e686:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e68a:	2400      	movs	r4, #0
 800e68c:	00e3      	lsls	r3, r4, #3
 800e68e:	9307      	str	r3, [sp, #28]
 800e690:	4bc7      	ldr	r3, [pc, #796]	; (800e9b0 <__ieee754_pow+0x768>)
 800e692:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e696:	ed93 7b00 	vldr	d7, [r3]
 800e69a:	4629      	mov	r1, r5
 800e69c:	ec53 2b17 	vmov	r2, r3, d7
 800e6a0:	eeb0 9a47 	vmov.f32	s18, s14
 800e6a4:	eef0 9a67 	vmov.f32	s19, s15
 800e6a8:	4682      	mov	sl, r0
 800e6aa:	f7f1 fe05 	bl	80002b8 <__aeabi_dsub>
 800e6ae:	4652      	mov	r2, sl
 800e6b0:	4606      	mov	r6, r0
 800e6b2:	460f      	mov	r7, r1
 800e6b4:	462b      	mov	r3, r5
 800e6b6:	ec51 0b19 	vmov	r0, r1, d9
 800e6ba:	f7f1 fdff 	bl	80002bc <__adddf3>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	49bb      	ldr	r1, [pc, #748]	; (800e9b4 <__ieee754_pow+0x76c>)
 800e6c6:	f7f2 f8d9 	bl	800087c <__aeabi_ddiv>
 800e6ca:	ec41 0b1a 	vmov	d10, r0, r1
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	4639      	mov	r1, r7
 800e6d6:	f7f1 ffa7 	bl	8000628 <__aeabi_dmul>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6e0:	9302      	str	r3, [sp, #8]
 800e6e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e6e6:	46ab      	mov	fp, r5
 800e6e8:	106d      	asrs	r5, r5, #1
 800e6ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e6ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e6f2:	ec41 0b18 	vmov	d8, r0, r1
 800e6f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	4640      	mov	r0, r8
 800e6fe:	4649      	mov	r1, r9
 800e700:	4614      	mov	r4, r2
 800e702:	461d      	mov	r5, r3
 800e704:	f7f1 ff90 	bl	8000628 <__aeabi_dmul>
 800e708:	4602      	mov	r2, r0
 800e70a:	460b      	mov	r3, r1
 800e70c:	4630      	mov	r0, r6
 800e70e:	4639      	mov	r1, r7
 800e710:	f7f1 fdd2 	bl	80002b8 <__aeabi_dsub>
 800e714:	ec53 2b19 	vmov	r2, r3, d9
 800e718:	4606      	mov	r6, r0
 800e71a:	460f      	mov	r7, r1
 800e71c:	4620      	mov	r0, r4
 800e71e:	4629      	mov	r1, r5
 800e720:	f7f1 fdca 	bl	80002b8 <__aeabi_dsub>
 800e724:	4602      	mov	r2, r0
 800e726:	460b      	mov	r3, r1
 800e728:	4650      	mov	r0, sl
 800e72a:	4659      	mov	r1, fp
 800e72c:	f7f1 fdc4 	bl	80002b8 <__aeabi_dsub>
 800e730:	4642      	mov	r2, r8
 800e732:	464b      	mov	r3, r9
 800e734:	f7f1 ff78 	bl	8000628 <__aeabi_dmul>
 800e738:	4602      	mov	r2, r0
 800e73a:	460b      	mov	r3, r1
 800e73c:	4630      	mov	r0, r6
 800e73e:	4639      	mov	r1, r7
 800e740:	f7f1 fdba 	bl	80002b8 <__aeabi_dsub>
 800e744:	ec53 2b1a 	vmov	r2, r3, d10
 800e748:	f7f1 ff6e 	bl	8000628 <__aeabi_dmul>
 800e74c:	ec53 2b18 	vmov	r2, r3, d8
 800e750:	ec41 0b19 	vmov	d9, r0, r1
 800e754:	ec51 0b18 	vmov	r0, r1, d8
 800e758:	f7f1 ff66 	bl	8000628 <__aeabi_dmul>
 800e75c:	a37c      	add	r3, pc, #496	; (adr r3, 800e950 <__ieee754_pow+0x708>)
 800e75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e762:	4604      	mov	r4, r0
 800e764:	460d      	mov	r5, r1
 800e766:	f7f1 ff5f 	bl	8000628 <__aeabi_dmul>
 800e76a:	a37b      	add	r3, pc, #492	; (adr r3, 800e958 <__ieee754_pow+0x710>)
 800e76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e770:	f7f1 fda4 	bl	80002bc <__adddf3>
 800e774:	4622      	mov	r2, r4
 800e776:	462b      	mov	r3, r5
 800e778:	f7f1 ff56 	bl	8000628 <__aeabi_dmul>
 800e77c:	a378      	add	r3, pc, #480	; (adr r3, 800e960 <__ieee754_pow+0x718>)
 800e77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e782:	f7f1 fd9b 	bl	80002bc <__adddf3>
 800e786:	4622      	mov	r2, r4
 800e788:	462b      	mov	r3, r5
 800e78a:	f7f1 ff4d 	bl	8000628 <__aeabi_dmul>
 800e78e:	a376      	add	r3, pc, #472	; (adr r3, 800e968 <__ieee754_pow+0x720>)
 800e790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e794:	f7f1 fd92 	bl	80002bc <__adddf3>
 800e798:	4622      	mov	r2, r4
 800e79a:	462b      	mov	r3, r5
 800e79c:	f7f1 ff44 	bl	8000628 <__aeabi_dmul>
 800e7a0:	a373      	add	r3, pc, #460	; (adr r3, 800e970 <__ieee754_pow+0x728>)
 800e7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a6:	f7f1 fd89 	bl	80002bc <__adddf3>
 800e7aa:	4622      	mov	r2, r4
 800e7ac:	462b      	mov	r3, r5
 800e7ae:	f7f1 ff3b 	bl	8000628 <__aeabi_dmul>
 800e7b2:	a371      	add	r3, pc, #452	; (adr r3, 800e978 <__ieee754_pow+0x730>)
 800e7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b8:	f7f1 fd80 	bl	80002bc <__adddf3>
 800e7bc:	4622      	mov	r2, r4
 800e7be:	4606      	mov	r6, r0
 800e7c0:	460f      	mov	r7, r1
 800e7c2:	462b      	mov	r3, r5
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	4629      	mov	r1, r5
 800e7c8:	f7f1 ff2e 	bl	8000628 <__aeabi_dmul>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	f7f1 ff28 	bl	8000628 <__aeabi_dmul>
 800e7d8:	4642      	mov	r2, r8
 800e7da:	4604      	mov	r4, r0
 800e7dc:	460d      	mov	r5, r1
 800e7de:	464b      	mov	r3, r9
 800e7e0:	ec51 0b18 	vmov	r0, r1, d8
 800e7e4:	f7f1 fd6a 	bl	80002bc <__adddf3>
 800e7e8:	ec53 2b19 	vmov	r2, r3, d9
 800e7ec:	f7f1 ff1c 	bl	8000628 <__aeabi_dmul>
 800e7f0:	4622      	mov	r2, r4
 800e7f2:	462b      	mov	r3, r5
 800e7f4:	f7f1 fd62 	bl	80002bc <__adddf3>
 800e7f8:	4642      	mov	r2, r8
 800e7fa:	4682      	mov	sl, r0
 800e7fc:	468b      	mov	fp, r1
 800e7fe:	464b      	mov	r3, r9
 800e800:	4640      	mov	r0, r8
 800e802:	4649      	mov	r1, r9
 800e804:	f7f1 ff10 	bl	8000628 <__aeabi_dmul>
 800e808:	4b6b      	ldr	r3, [pc, #428]	; (800e9b8 <__ieee754_pow+0x770>)
 800e80a:	2200      	movs	r2, #0
 800e80c:	4606      	mov	r6, r0
 800e80e:	460f      	mov	r7, r1
 800e810:	f7f1 fd54 	bl	80002bc <__adddf3>
 800e814:	4652      	mov	r2, sl
 800e816:	465b      	mov	r3, fp
 800e818:	f7f1 fd50 	bl	80002bc <__adddf3>
 800e81c:	2000      	movs	r0, #0
 800e81e:	4604      	mov	r4, r0
 800e820:	460d      	mov	r5, r1
 800e822:	4602      	mov	r2, r0
 800e824:	460b      	mov	r3, r1
 800e826:	4640      	mov	r0, r8
 800e828:	4649      	mov	r1, r9
 800e82a:	f7f1 fefd 	bl	8000628 <__aeabi_dmul>
 800e82e:	4b62      	ldr	r3, [pc, #392]	; (800e9b8 <__ieee754_pow+0x770>)
 800e830:	4680      	mov	r8, r0
 800e832:	4689      	mov	r9, r1
 800e834:	2200      	movs	r2, #0
 800e836:	4620      	mov	r0, r4
 800e838:	4629      	mov	r1, r5
 800e83a:	f7f1 fd3d 	bl	80002b8 <__aeabi_dsub>
 800e83e:	4632      	mov	r2, r6
 800e840:	463b      	mov	r3, r7
 800e842:	f7f1 fd39 	bl	80002b8 <__aeabi_dsub>
 800e846:	4602      	mov	r2, r0
 800e848:	460b      	mov	r3, r1
 800e84a:	4650      	mov	r0, sl
 800e84c:	4659      	mov	r1, fp
 800e84e:	f7f1 fd33 	bl	80002b8 <__aeabi_dsub>
 800e852:	ec53 2b18 	vmov	r2, r3, d8
 800e856:	f7f1 fee7 	bl	8000628 <__aeabi_dmul>
 800e85a:	4622      	mov	r2, r4
 800e85c:	4606      	mov	r6, r0
 800e85e:	460f      	mov	r7, r1
 800e860:	462b      	mov	r3, r5
 800e862:	ec51 0b19 	vmov	r0, r1, d9
 800e866:	f7f1 fedf 	bl	8000628 <__aeabi_dmul>
 800e86a:	4602      	mov	r2, r0
 800e86c:	460b      	mov	r3, r1
 800e86e:	4630      	mov	r0, r6
 800e870:	4639      	mov	r1, r7
 800e872:	f7f1 fd23 	bl	80002bc <__adddf3>
 800e876:	4606      	mov	r6, r0
 800e878:	460f      	mov	r7, r1
 800e87a:	4602      	mov	r2, r0
 800e87c:	460b      	mov	r3, r1
 800e87e:	4640      	mov	r0, r8
 800e880:	4649      	mov	r1, r9
 800e882:	f7f1 fd1b 	bl	80002bc <__adddf3>
 800e886:	a33e      	add	r3, pc, #248	; (adr r3, 800e980 <__ieee754_pow+0x738>)
 800e888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88c:	2000      	movs	r0, #0
 800e88e:	4604      	mov	r4, r0
 800e890:	460d      	mov	r5, r1
 800e892:	f7f1 fec9 	bl	8000628 <__aeabi_dmul>
 800e896:	4642      	mov	r2, r8
 800e898:	ec41 0b18 	vmov	d8, r0, r1
 800e89c:	464b      	mov	r3, r9
 800e89e:	4620      	mov	r0, r4
 800e8a0:	4629      	mov	r1, r5
 800e8a2:	f7f1 fd09 	bl	80002b8 <__aeabi_dsub>
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	4639      	mov	r1, r7
 800e8ae:	f7f1 fd03 	bl	80002b8 <__aeabi_dsub>
 800e8b2:	a335      	add	r3, pc, #212	; (adr r3, 800e988 <__ieee754_pow+0x740>)
 800e8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b8:	f7f1 feb6 	bl	8000628 <__aeabi_dmul>
 800e8bc:	a334      	add	r3, pc, #208	; (adr r3, 800e990 <__ieee754_pow+0x748>)
 800e8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c2:	4606      	mov	r6, r0
 800e8c4:	460f      	mov	r7, r1
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	f7f1 fead 	bl	8000628 <__aeabi_dmul>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	4630      	mov	r0, r6
 800e8d4:	4639      	mov	r1, r7
 800e8d6:	f7f1 fcf1 	bl	80002bc <__adddf3>
 800e8da:	9a07      	ldr	r2, [sp, #28]
 800e8dc:	4b37      	ldr	r3, [pc, #220]	; (800e9bc <__ieee754_pow+0x774>)
 800e8de:	4413      	add	r3, r2
 800e8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e4:	f7f1 fcea 	bl	80002bc <__adddf3>
 800e8e8:	4682      	mov	sl, r0
 800e8ea:	9805      	ldr	r0, [sp, #20]
 800e8ec:	468b      	mov	fp, r1
 800e8ee:	f7f1 fe31 	bl	8000554 <__aeabi_i2d>
 800e8f2:	9a07      	ldr	r2, [sp, #28]
 800e8f4:	4b32      	ldr	r3, [pc, #200]	; (800e9c0 <__ieee754_pow+0x778>)
 800e8f6:	4413      	add	r3, r2
 800e8f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8fc:	4606      	mov	r6, r0
 800e8fe:	460f      	mov	r7, r1
 800e900:	4652      	mov	r2, sl
 800e902:	465b      	mov	r3, fp
 800e904:	ec51 0b18 	vmov	r0, r1, d8
 800e908:	f7f1 fcd8 	bl	80002bc <__adddf3>
 800e90c:	4642      	mov	r2, r8
 800e90e:	464b      	mov	r3, r9
 800e910:	f7f1 fcd4 	bl	80002bc <__adddf3>
 800e914:	4632      	mov	r2, r6
 800e916:	463b      	mov	r3, r7
 800e918:	f7f1 fcd0 	bl	80002bc <__adddf3>
 800e91c:	2000      	movs	r0, #0
 800e91e:	4632      	mov	r2, r6
 800e920:	463b      	mov	r3, r7
 800e922:	4604      	mov	r4, r0
 800e924:	460d      	mov	r5, r1
 800e926:	f7f1 fcc7 	bl	80002b8 <__aeabi_dsub>
 800e92a:	4642      	mov	r2, r8
 800e92c:	464b      	mov	r3, r9
 800e92e:	f7f1 fcc3 	bl	80002b8 <__aeabi_dsub>
 800e932:	ec53 2b18 	vmov	r2, r3, d8
 800e936:	f7f1 fcbf 	bl	80002b8 <__aeabi_dsub>
 800e93a:	4602      	mov	r2, r0
 800e93c:	460b      	mov	r3, r1
 800e93e:	4650      	mov	r0, sl
 800e940:	4659      	mov	r1, fp
 800e942:	e610      	b.n	800e566 <__ieee754_pow+0x31e>
 800e944:	2401      	movs	r4, #1
 800e946:	e6a1      	b.n	800e68c <__ieee754_pow+0x444>
 800e948:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e998 <__ieee754_pow+0x750>
 800e94c:	e617      	b.n	800e57e <__ieee754_pow+0x336>
 800e94e:	bf00      	nop
 800e950:	4a454eef 	.word	0x4a454eef
 800e954:	3fca7e28 	.word	0x3fca7e28
 800e958:	93c9db65 	.word	0x93c9db65
 800e95c:	3fcd864a 	.word	0x3fcd864a
 800e960:	a91d4101 	.word	0xa91d4101
 800e964:	3fd17460 	.word	0x3fd17460
 800e968:	518f264d 	.word	0x518f264d
 800e96c:	3fd55555 	.word	0x3fd55555
 800e970:	db6fabff 	.word	0xdb6fabff
 800e974:	3fdb6db6 	.word	0x3fdb6db6
 800e978:	33333303 	.word	0x33333303
 800e97c:	3fe33333 	.word	0x3fe33333
 800e980:	e0000000 	.word	0xe0000000
 800e984:	3feec709 	.word	0x3feec709
 800e988:	dc3a03fd 	.word	0xdc3a03fd
 800e98c:	3feec709 	.word	0x3feec709
 800e990:	145b01f5 	.word	0x145b01f5
 800e994:	be3e2fe0 	.word	0xbe3e2fe0
 800e998:	00000000 	.word	0x00000000
 800e99c:	3ff00000 	.word	0x3ff00000
 800e9a0:	7ff00000 	.word	0x7ff00000
 800e9a4:	43400000 	.word	0x43400000
 800e9a8:	0003988e 	.word	0x0003988e
 800e9ac:	000bb679 	.word	0x000bb679
 800e9b0:	080107d0 	.word	0x080107d0
 800e9b4:	3ff00000 	.word	0x3ff00000
 800e9b8:	40080000 	.word	0x40080000
 800e9bc:	080107f0 	.word	0x080107f0
 800e9c0:	080107e0 	.word	0x080107e0
 800e9c4:	a3b5      	add	r3, pc, #724	; (adr r3, 800ec9c <__ieee754_pow+0xa54>)
 800e9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ca:	4640      	mov	r0, r8
 800e9cc:	4649      	mov	r1, r9
 800e9ce:	f7f1 fc75 	bl	80002bc <__adddf3>
 800e9d2:	4622      	mov	r2, r4
 800e9d4:	ec41 0b1a 	vmov	d10, r0, r1
 800e9d8:	462b      	mov	r3, r5
 800e9da:	4630      	mov	r0, r6
 800e9dc:	4639      	mov	r1, r7
 800e9de:	f7f1 fc6b 	bl	80002b8 <__aeabi_dsub>
 800e9e2:	4602      	mov	r2, r0
 800e9e4:	460b      	mov	r3, r1
 800e9e6:	ec51 0b1a 	vmov	r0, r1, d10
 800e9ea:	f7f2 f8ad 	bl	8000b48 <__aeabi_dcmpgt>
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	f47f ae04 	bne.w	800e5fc <__ieee754_pow+0x3b4>
 800e9f4:	4aa4      	ldr	r2, [pc, #656]	; (800ec88 <__ieee754_pow+0xa40>)
 800e9f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	f340 8108 	ble.w	800ec10 <__ieee754_pow+0x9c8>
 800ea00:	151b      	asrs	r3, r3, #20
 800ea02:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ea06:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ea0a:	fa4a f303 	asr.w	r3, sl, r3
 800ea0e:	445b      	add	r3, fp
 800ea10:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ea14:	4e9d      	ldr	r6, [pc, #628]	; (800ec8c <__ieee754_pow+0xa44>)
 800ea16:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ea1a:	4116      	asrs	r6, r2
 800ea1c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ea20:	2000      	movs	r0, #0
 800ea22:	ea23 0106 	bic.w	r1, r3, r6
 800ea26:	f1c2 0214 	rsb	r2, r2, #20
 800ea2a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ea2e:	fa4a fa02 	asr.w	sl, sl, r2
 800ea32:	f1bb 0f00 	cmp.w	fp, #0
 800ea36:	4602      	mov	r2, r0
 800ea38:	460b      	mov	r3, r1
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	4629      	mov	r1, r5
 800ea3e:	bfb8      	it	lt
 800ea40:	f1ca 0a00 	rsblt	sl, sl, #0
 800ea44:	f7f1 fc38 	bl	80002b8 <__aeabi_dsub>
 800ea48:	ec41 0b19 	vmov	d9, r0, r1
 800ea4c:	4642      	mov	r2, r8
 800ea4e:	464b      	mov	r3, r9
 800ea50:	ec51 0b19 	vmov	r0, r1, d9
 800ea54:	f7f1 fc32 	bl	80002bc <__adddf3>
 800ea58:	a37b      	add	r3, pc, #492	; (adr r3, 800ec48 <__ieee754_pow+0xa00>)
 800ea5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5e:	2000      	movs	r0, #0
 800ea60:	4604      	mov	r4, r0
 800ea62:	460d      	mov	r5, r1
 800ea64:	f7f1 fde0 	bl	8000628 <__aeabi_dmul>
 800ea68:	ec53 2b19 	vmov	r2, r3, d9
 800ea6c:	4606      	mov	r6, r0
 800ea6e:	460f      	mov	r7, r1
 800ea70:	4620      	mov	r0, r4
 800ea72:	4629      	mov	r1, r5
 800ea74:	f7f1 fc20 	bl	80002b8 <__aeabi_dsub>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	4640      	mov	r0, r8
 800ea7e:	4649      	mov	r1, r9
 800ea80:	f7f1 fc1a 	bl	80002b8 <__aeabi_dsub>
 800ea84:	a372      	add	r3, pc, #456	; (adr r3, 800ec50 <__ieee754_pow+0xa08>)
 800ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8a:	f7f1 fdcd 	bl	8000628 <__aeabi_dmul>
 800ea8e:	a372      	add	r3, pc, #456	; (adr r3, 800ec58 <__ieee754_pow+0xa10>)
 800ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea94:	4680      	mov	r8, r0
 800ea96:	4689      	mov	r9, r1
 800ea98:	4620      	mov	r0, r4
 800ea9a:	4629      	mov	r1, r5
 800ea9c:	f7f1 fdc4 	bl	8000628 <__aeabi_dmul>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	460b      	mov	r3, r1
 800eaa4:	4640      	mov	r0, r8
 800eaa6:	4649      	mov	r1, r9
 800eaa8:	f7f1 fc08 	bl	80002bc <__adddf3>
 800eaac:	4604      	mov	r4, r0
 800eaae:	460d      	mov	r5, r1
 800eab0:	4602      	mov	r2, r0
 800eab2:	460b      	mov	r3, r1
 800eab4:	4630      	mov	r0, r6
 800eab6:	4639      	mov	r1, r7
 800eab8:	f7f1 fc00 	bl	80002bc <__adddf3>
 800eabc:	4632      	mov	r2, r6
 800eabe:	463b      	mov	r3, r7
 800eac0:	4680      	mov	r8, r0
 800eac2:	4689      	mov	r9, r1
 800eac4:	f7f1 fbf8 	bl	80002b8 <__aeabi_dsub>
 800eac8:	4602      	mov	r2, r0
 800eaca:	460b      	mov	r3, r1
 800eacc:	4620      	mov	r0, r4
 800eace:	4629      	mov	r1, r5
 800ead0:	f7f1 fbf2 	bl	80002b8 <__aeabi_dsub>
 800ead4:	4642      	mov	r2, r8
 800ead6:	4606      	mov	r6, r0
 800ead8:	460f      	mov	r7, r1
 800eada:	464b      	mov	r3, r9
 800eadc:	4640      	mov	r0, r8
 800eade:	4649      	mov	r1, r9
 800eae0:	f7f1 fda2 	bl	8000628 <__aeabi_dmul>
 800eae4:	a35e      	add	r3, pc, #376	; (adr r3, 800ec60 <__ieee754_pow+0xa18>)
 800eae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaea:	4604      	mov	r4, r0
 800eaec:	460d      	mov	r5, r1
 800eaee:	f7f1 fd9b 	bl	8000628 <__aeabi_dmul>
 800eaf2:	a35d      	add	r3, pc, #372	; (adr r3, 800ec68 <__ieee754_pow+0xa20>)
 800eaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf8:	f7f1 fbde 	bl	80002b8 <__aeabi_dsub>
 800eafc:	4622      	mov	r2, r4
 800eafe:	462b      	mov	r3, r5
 800eb00:	f7f1 fd92 	bl	8000628 <__aeabi_dmul>
 800eb04:	a35a      	add	r3, pc, #360	; (adr r3, 800ec70 <__ieee754_pow+0xa28>)
 800eb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0a:	f7f1 fbd7 	bl	80002bc <__adddf3>
 800eb0e:	4622      	mov	r2, r4
 800eb10:	462b      	mov	r3, r5
 800eb12:	f7f1 fd89 	bl	8000628 <__aeabi_dmul>
 800eb16:	a358      	add	r3, pc, #352	; (adr r3, 800ec78 <__ieee754_pow+0xa30>)
 800eb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1c:	f7f1 fbcc 	bl	80002b8 <__aeabi_dsub>
 800eb20:	4622      	mov	r2, r4
 800eb22:	462b      	mov	r3, r5
 800eb24:	f7f1 fd80 	bl	8000628 <__aeabi_dmul>
 800eb28:	a355      	add	r3, pc, #340	; (adr r3, 800ec80 <__ieee754_pow+0xa38>)
 800eb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2e:	f7f1 fbc5 	bl	80002bc <__adddf3>
 800eb32:	4622      	mov	r2, r4
 800eb34:	462b      	mov	r3, r5
 800eb36:	f7f1 fd77 	bl	8000628 <__aeabi_dmul>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	4640      	mov	r0, r8
 800eb40:	4649      	mov	r1, r9
 800eb42:	f7f1 fbb9 	bl	80002b8 <__aeabi_dsub>
 800eb46:	4604      	mov	r4, r0
 800eb48:	460d      	mov	r5, r1
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	460b      	mov	r3, r1
 800eb4e:	4640      	mov	r0, r8
 800eb50:	4649      	mov	r1, r9
 800eb52:	f7f1 fd69 	bl	8000628 <__aeabi_dmul>
 800eb56:	2200      	movs	r2, #0
 800eb58:	ec41 0b19 	vmov	d9, r0, r1
 800eb5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eb60:	4620      	mov	r0, r4
 800eb62:	4629      	mov	r1, r5
 800eb64:	f7f1 fba8 	bl	80002b8 <__aeabi_dsub>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	ec51 0b19 	vmov	r0, r1, d9
 800eb70:	f7f1 fe84 	bl	800087c <__aeabi_ddiv>
 800eb74:	4632      	mov	r2, r6
 800eb76:	4604      	mov	r4, r0
 800eb78:	460d      	mov	r5, r1
 800eb7a:	463b      	mov	r3, r7
 800eb7c:	4640      	mov	r0, r8
 800eb7e:	4649      	mov	r1, r9
 800eb80:	f7f1 fd52 	bl	8000628 <__aeabi_dmul>
 800eb84:	4632      	mov	r2, r6
 800eb86:	463b      	mov	r3, r7
 800eb88:	f7f1 fb98 	bl	80002bc <__adddf3>
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	460b      	mov	r3, r1
 800eb90:	4620      	mov	r0, r4
 800eb92:	4629      	mov	r1, r5
 800eb94:	f7f1 fb90 	bl	80002b8 <__aeabi_dsub>
 800eb98:	4642      	mov	r2, r8
 800eb9a:	464b      	mov	r3, r9
 800eb9c:	f7f1 fb8c 	bl	80002b8 <__aeabi_dsub>
 800eba0:	460b      	mov	r3, r1
 800eba2:	4602      	mov	r2, r0
 800eba4:	493a      	ldr	r1, [pc, #232]	; (800ec90 <__ieee754_pow+0xa48>)
 800eba6:	2000      	movs	r0, #0
 800eba8:	f7f1 fb86 	bl	80002b8 <__aeabi_dsub>
 800ebac:	ec41 0b10 	vmov	d0, r0, r1
 800ebb0:	ee10 3a90 	vmov	r3, s1
 800ebb4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ebb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ebbc:	da2b      	bge.n	800ec16 <__ieee754_pow+0x9ce>
 800ebbe:	4650      	mov	r0, sl
 800ebc0:	f001 fa6e 	bl	80100a0 <scalbn>
 800ebc4:	ec51 0b10 	vmov	r0, r1, d0
 800ebc8:	ec53 2b18 	vmov	r2, r3, d8
 800ebcc:	f7ff bbed 	b.w	800e3aa <__ieee754_pow+0x162>
 800ebd0:	4b30      	ldr	r3, [pc, #192]	; (800ec94 <__ieee754_pow+0xa4c>)
 800ebd2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ebd6:	429e      	cmp	r6, r3
 800ebd8:	f77f af0c 	ble.w	800e9f4 <__ieee754_pow+0x7ac>
 800ebdc:	4b2e      	ldr	r3, [pc, #184]	; (800ec98 <__ieee754_pow+0xa50>)
 800ebde:	440b      	add	r3, r1
 800ebe0:	4303      	orrs	r3, r0
 800ebe2:	d009      	beq.n	800ebf8 <__ieee754_pow+0x9b0>
 800ebe4:	ec51 0b18 	vmov	r0, r1, d8
 800ebe8:	2200      	movs	r2, #0
 800ebea:	2300      	movs	r3, #0
 800ebec:	f7f1 ff8e 	bl	8000b0c <__aeabi_dcmplt>
 800ebf0:	3800      	subs	r0, #0
 800ebf2:	bf18      	it	ne
 800ebf4:	2001      	movne	r0, #1
 800ebf6:	e447      	b.n	800e488 <__ieee754_pow+0x240>
 800ebf8:	4622      	mov	r2, r4
 800ebfa:	462b      	mov	r3, r5
 800ebfc:	f7f1 fb5c 	bl	80002b8 <__aeabi_dsub>
 800ec00:	4642      	mov	r2, r8
 800ec02:	464b      	mov	r3, r9
 800ec04:	f7f1 ff96 	bl	8000b34 <__aeabi_dcmpge>
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	f43f aef3 	beq.w	800e9f4 <__ieee754_pow+0x7ac>
 800ec0e:	e7e9      	b.n	800ebe4 <__ieee754_pow+0x99c>
 800ec10:	f04f 0a00 	mov.w	sl, #0
 800ec14:	e71a      	b.n	800ea4c <__ieee754_pow+0x804>
 800ec16:	ec51 0b10 	vmov	r0, r1, d0
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	e7d4      	b.n	800ebc8 <__ieee754_pow+0x980>
 800ec1e:	491c      	ldr	r1, [pc, #112]	; (800ec90 <__ieee754_pow+0xa48>)
 800ec20:	2000      	movs	r0, #0
 800ec22:	f7ff bb30 	b.w	800e286 <__ieee754_pow+0x3e>
 800ec26:	2000      	movs	r0, #0
 800ec28:	2100      	movs	r1, #0
 800ec2a:	f7ff bb2c 	b.w	800e286 <__ieee754_pow+0x3e>
 800ec2e:	4630      	mov	r0, r6
 800ec30:	4639      	mov	r1, r7
 800ec32:	f7ff bb28 	b.w	800e286 <__ieee754_pow+0x3e>
 800ec36:	9204      	str	r2, [sp, #16]
 800ec38:	f7ff bb7a 	b.w	800e330 <__ieee754_pow+0xe8>
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	f7ff bb64 	b.w	800e30a <__ieee754_pow+0xc2>
 800ec42:	bf00      	nop
 800ec44:	f3af 8000 	nop.w
 800ec48:	00000000 	.word	0x00000000
 800ec4c:	3fe62e43 	.word	0x3fe62e43
 800ec50:	fefa39ef 	.word	0xfefa39ef
 800ec54:	3fe62e42 	.word	0x3fe62e42
 800ec58:	0ca86c39 	.word	0x0ca86c39
 800ec5c:	be205c61 	.word	0xbe205c61
 800ec60:	72bea4d0 	.word	0x72bea4d0
 800ec64:	3e663769 	.word	0x3e663769
 800ec68:	c5d26bf1 	.word	0xc5d26bf1
 800ec6c:	3ebbbd41 	.word	0x3ebbbd41
 800ec70:	af25de2c 	.word	0xaf25de2c
 800ec74:	3f11566a 	.word	0x3f11566a
 800ec78:	16bebd93 	.word	0x16bebd93
 800ec7c:	3f66c16c 	.word	0x3f66c16c
 800ec80:	5555553e 	.word	0x5555553e
 800ec84:	3fc55555 	.word	0x3fc55555
 800ec88:	3fe00000 	.word	0x3fe00000
 800ec8c:	000fffff 	.word	0x000fffff
 800ec90:	3ff00000 	.word	0x3ff00000
 800ec94:	4090cbff 	.word	0x4090cbff
 800ec98:	3f6f3400 	.word	0x3f6f3400
 800ec9c:	652b82fe 	.word	0x652b82fe
 800eca0:	3c971547 	.word	0x3c971547
 800eca4:	00000000 	.word	0x00000000

0800eca8 <__ieee754_rem_pio2>:
 800eca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecac:	ed2d 8b02 	vpush	{d8}
 800ecb0:	ec55 4b10 	vmov	r4, r5, d0
 800ecb4:	4bca      	ldr	r3, [pc, #808]	; (800efe0 <__ieee754_rem_pio2+0x338>)
 800ecb6:	b08b      	sub	sp, #44	; 0x2c
 800ecb8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ecbc:	4598      	cmp	r8, r3
 800ecbe:	4682      	mov	sl, r0
 800ecc0:	9502      	str	r5, [sp, #8]
 800ecc2:	dc08      	bgt.n	800ecd6 <__ieee754_rem_pio2+0x2e>
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	ed80 0b00 	vstr	d0, [r0]
 800eccc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ecd0:	f04f 0b00 	mov.w	fp, #0
 800ecd4:	e028      	b.n	800ed28 <__ieee754_rem_pio2+0x80>
 800ecd6:	4bc3      	ldr	r3, [pc, #780]	; (800efe4 <__ieee754_rem_pio2+0x33c>)
 800ecd8:	4598      	cmp	r8, r3
 800ecda:	dc78      	bgt.n	800edce <__ieee754_rem_pio2+0x126>
 800ecdc:	9b02      	ldr	r3, [sp, #8]
 800ecde:	4ec2      	ldr	r6, [pc, #776]	; (800efe8 <__ieee754_rem_pio2+0x340>)
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	ee10 0a10 	vmov	r0, s0
 800ece6:	a3b0      	add	r3, pc, #704	; (adr r3, 800efa8 <__ieee754_rem_pio2+0x300>)
 800ece8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecec:	4629      	mov	r1, r5
 800ecee:	dd39      	ble.n	800ed64 <__ieee754_rem_pio2+0xbc>
 800ecf0:	f7f1 fae2 	bl	80002b8 <__aeabi_dsub>
 800ecf4:	45b0      	cmp	r8, r6
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	460d      	mov	r5, r1
 800ecfa:	d01b      	beq.n	800ed34 <__ieee754_rem_pio2+0x8c>
 800ecfc:	a3ac      	add	r3, pc, #688	; (adr r3, 800efb0 <__ieee754_rem_pio2+0x308>)
 800ecfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed02:	f7f1 fad9 	bl	80002b8 <__aeabi_dsub>
 800ed06:	4602      	mov	r2, r0
 800ed08:	460b      	mov	r3, r1
 800ed0a:	e9ca 2300 	strd	r2, r3, [sl]
 800ed0e:	4620      	mov	r0, r4
 800ed10:	4629      	mov	r1, r5
 800ed12:	f7f1 fad1 	bl	80002b8 <__aeabi_dsub>
 800ed16:	a3a6      	add	r3, pc, #664	; (adr r3, 800efb0 <__ieee754_rem_pio2+0x308>)
 800ed18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed1c:	f7f1 facc 	bl	80002b8 <__aeabi_dsub>
 800ed20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed24:	f04f 0b01 	mov.w	fp, #1
 800ed28:	4658      	mov	r0, fp
 800ed2a:	b00b      	add	sp, #44	; 0x2c
 800ed2c:	ecbd 8b02 	vpop	{d8}
 800ed30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed34:	a3a0      	add	r3, pc, #640	; (adr r3, 800efb8 <__ieee754_rem_pio2+0x310>)
 800ed36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3a:	f7f1 fabd 	bl	80002b8 <__aeabi_dsub>
 800ed3e:	a3a0      	add	r3, pc, #640	; (adr r3, 800efc0 <__ieee754_rem_pio2+0x318>)
 800ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed44:	4604      	mov	r4, r0
 800ed46:	460d      	mov	r5, r1
 800ed48:	f7f1 fab6 	bl	80002b8 <__aeabi_dsub>
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	460b      	mov	r3, r1
 800ed50:	e9ca 2300 	strd	r2, r3, [sl]
 800ed54:	4620      	mov	r0, r4
 800ed56:	4629      	mov	r1, r5
 800ed58:	f7f1 faae 	bl	80002b8 <__aeabi_dsub>
 800ed5c:	a398      	add	r3, pc, #608	; (adr r3, 800efc0 <__ieee754_rem_pio2+0x318>)
 800ed5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed62:	e7db      	b.n	800ed1c <__ieee754_rem_pio2+0x74>
 800ed64:	f7f1 faaa 	bl	80002bc <__adddf3>
 800ed68:	45b0      	cmp	r8, r6
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	460d      	mov	r5, r1
 800ed6e:	d016      	beq.n	800ed9e <__ieee754_rem_pio2+0xf6>
 800ed70:	a38f      	add	r3, pc, #572	; (adr r3, 800efb0 <__ieee754_rem_pio2+0x308>)
 800ed72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed76:	f7f1 faa1 	bl	80002bc <__adddf3>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	e9ca 2300 	strd	r2, r3, [sl]
 800ed82:	4620      	mov	r0, r4
 800ed84:	4629      	mov	r1, r5
 800ed86:	f7f1 fa97 	bl	80002b8 <__aeabi_dsub>
 800ed8a:	a389      	add	r3, pc, #548	; (adr r3, 800efb0 <__ieee754_rem_pio2+0x308>)
 800ed8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed90:	f7f1 fa94 	bl	80002bc <__adddf3>
 800ed94:	f04f 3bff 	mov.w	fp, #4294967295
 800ed98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed9c:	e7c4      	b.n	800ed28 <__ieee754_rem_pio2+0x80>
 800ed9e:	a386      	add	r3, pc, #536	; (adr r3, 800efb8 <__ieee754_rem_pio2+0x310>)
 800eda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda4:	f7f1 fa8a 	bl	80002bc <__adddf3>
 800eda8:	a385      	add	r3, pc, #532	; (adr r3, 800efc0 <__ieee754_rem_pio2+0x318>)
 800edaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edae:	4604      	mov	r4, r0
 800edb0:	460d      	mov	r5, r1
 800edb2:	f7f1 fa83 	bl	80002bc <__adddf3>
 800edb6:	4602      	mov	r2, r0
 800edb8:	460b      	mov	r3, r1
 800edba:	e9ca 2300 	strd	r2, r3, [sl]
 800edbe:	4620      	mov	r0, r4
 800edc0:	4629      	mov	r1, r5
 800edc2:	f7f1 fa79 	bl	80002b8 <__aeabi_dsub>
 800edc6:	a37e      	add	r3, pc, #504	; (adr r3, 800efc0 <__ieee754_rem_pio2+0x318>)
 800edc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edcc:	e7e0      	b.n	800ed90 <__ieee754_rem_pio2+0xe8>
 800edce:	4b87      	ldr	r3, [pc, #540]	; (800efec <__ieee754_rem_pio2+0x344>)
 800edd0:	4598      	cmp	r8, r3
 800edd2:	f300 80d9 	bgt.w	800ef88 <__ieee754_rem_pio2+0x2e0>
 800edd6:	f001 f8cf 	bl	800ff78 <fabs>
 800edda:	ec55 4b10 	vmov	r4, r5, d0
 800edde:	ee10 0a10 	vmov	r0, s0
 800ede2:	a379      	add	r3, pc, #484	; (adr r3, 800efc8 <__ieee754_rem_pio2+0x320>)
 800ede4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede8:	4629      	mov	r1, r5
 800edea:	f7f1 fc1d 	bl	8000628 <__aeabi_dmul>
 800edee:	4b80      	ldr	r3, [pc, #512]	; (800eff0 <__ieee754_rem_pio2+0x348>)
 800edf0:	2200      	movs	r2, #0
 800edf2:	f7f1 fa63 	bl	80002bc <__adddf3>
 800edf6:	f7f1 fec7 	bl	8000b88 <__aeabi_d2iz>
 800edfa:	4683      	mov	fp, r0
 800edfc:	f7f1 fbaa 	bl	8000554 <__aeabi_i2d>
 800ee00:	4602      	mov	r2, r0
 800ee02:	460b      	mov	r3, r1
 800ee04:	ec43 2b18 	vmov	d8, r2, r3
 800ee08:	a367      	add	r3, pc, #412	; (adr r3, 800efa8 <__ieee754_rem_pio2+0x300>)
 800ee0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0e:	f7f1 fc0b 	bl	8000628 <__aeabi_dmul>
 800ee12:	4602      	mov	r2, r0
 800ee14:	460b      	mov	r3, r1
 800ee16:	4620      	mov	r0, r4
 800ee18:	4629      	mov	r1, r5
 800ee1a:	f7f1 fa4d 	bl	80002b8 <__aeabi_dsub>
 800ee1e:	a364      	add	r3, pc, #400	; (adr r3, 800efb0 <__ieee754_rem_pio2+0x308>)
 800ee20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee24:	4606      	mov	r6, r0
 800ee26:	460f      	mov	r7, r1
 800ee28:	ec51 0b18 	vmov	r0, r1, d8
 800ee2c:	f7f1 fbfc 	bl	8000628 <__aeabi_dmul>
 800ee30:	f1bb 0f1f 	cmp.w	fp, #31
 800ee34:	4604      	mov	r4, r0
 800ee36:	460d      	mov	r5, r1
 800ee38:	dc0d      	bgt.n	800ee56 <__ieee754_rem_pio2+0x1ae>
 800ee3a:	4b6e      	ldr	r3, [pc, #440]	; (800eff4 <__ieee754_rem_pio2+0x34c>)
 800ee3c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ee40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee44:	4543      	cmp	r3, r8
 800ee46:	d006      	beq.n	800ee56 <__ieee754_rem_pio2+0x1ae>
 800ee48:	4622      	mov	r2, r4
 800ee4a:	462b      	mov	r3, r5
 800ee4c:	4630      	mov	r0, r6
 800ee4e:	4639      	mov	r1, r7
 800ee50:	f7f1 fa32 	bl	80002b8 <__aeabi_dsub>
 800ee54:	e00f      	b.n	800ee76 <__ieee754_rem_pio2+0x1ce>
 800ee56:	462b      	mov	r3, r5
 800ee58:	4622      	mov	r2, r4
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	4639      	mov	r1, r7
 800ee5e:	f7f1 fa2b 	bl	80002b8 <__aeabi_dsub>
 800ee62:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ee66:	9303      	str	r3, [sp, #12]
 800ee68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ee6c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ee70:	f1b8 0f10 	cmp.w	r8, #16
 800ee74:	dc02      	bgt.n	800ee7c <__ieee754_rem_pio2+0x1d4>
 800ee76:	e9ca 0100 	strd	r0, r1, [sl]
 800ee7a:	e039      	b.n	800eef0 <__ieee754_rem_pio2+0x248>
 800ee7c:	a34e      	add	r3, pc, #312	; (adr r3, 800efb8 <__ieee754_rem_pio2+0x310>)
 800ee7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee82:	ec51 0b18 	vmov	r0, r1, d8
 800ee86:	f7f1 fbcf 	bl	8000628 <__aeabi_dmul>
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	460d      	mov	r5, r1
 800ee8e:	4602      	mov	r2, r0
 800ee90:	460b      	mov	r3, r1
 800ee92:	4630      	mov	r0, r6
 800ee94:	4639      	mov	r1, r7
 800ee96:	f7f1 fa0f 	bl	80002b8 <__aeabi_dsub>
 800ee9a:	4602      	mov	r2, r0
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	4680      	mov	r8, r0
 800eea0:	4689      	mov	r9, r1
 800eea2:	4630      	mov	r0, r6
 800eea4:	4639      	mov	r1, r7
 800eea6:	f7f1 fa07 	bl	80002b8 <__aeabi_dsub>
 800eeaa:	4622      	mov	r2, r4
 800eeac:	462b      	mov	r3, r5
 800eeae:	f7f1 fa03 	bl	80002b8 <__aeabi_dsub>
 800eeb2:	a343      	add	r3, pc, #268	; (adr r3, 800efc0 <__ieee754_rem_pio2+0x318>)
 800eeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb8:	4604      	mov	r4, r0
 800eeba:	460d      	mov	r5, r1
 800eebc:	ec51 0b18 	vmov	r0, r1, d8
 800eec0:	f7f1 fbb2 	bl	8000628 <__aeabi_dmul>
 800eec4:	4622      	mov	r2, r4
 800eec6:	462b      	mov	r3, r5
 800eec8:	f7f1 f9f6 	bl	80002b8 <__aeabi_dsub>
 800eecc:	4602      	mov	r2, r0
 800eece:	460b      	mov	r3, r1
 800eed0:	4604      	mov	r4, r0
 800eed2:	460d      	mov	r5, r1
 800eed4:	4640      	mov	r0, r8
 800eed6:	4649      	mov	r1, r9
 800eed8:	f7f1 f9ee 	bl	80002b8 <__aeabi_dsub>
 800eedc:	9a03      	ldr	r2, [sp, #12]
 800eede:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eee2:	1ad3      	subs	r3, r2, r3
 800eee4:	2b31      	cmp	r3, #49	; 0x31
 800eee6:	dc24      	bgt.n	800ef32 <__ieee754_rem_pio2+0x28a>
 800eee8:	e9ca 0100 	strd	r0, r1, [sl]
 800eeec:	4646      	mov	r6, r8
 800eeee:	464f      	mov	r7, r9
 800eef0:	e9da 8900 	ldrd	r8, r9, [sl]
 800eef4:	4630      	mov	r0, r6
 800eef6:	4642      	mov	r2, r8
 800eef8:	464b      	mov	r3, r9
 800eefa:	4639      	mov	r1, r7
 800eefc:	f7f1 f9dc 	bl	80002b8 <__aeabi_dsub>
 800ef00:	462b      	mov	r3, r5
 800ef02:	4622      	mov	r2, r4
 800ef04:	f7f1 f9d8 	bl	80002b8 <__aeabi_dsub>
 800ef08:	9b02      	ldr	r3, [sp, #8]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef10:	f6bf af0a 	bge.w	800ed28 <__ieee754_rem_pio2+0x80>
 800ef14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ef18:	f8ca 3004 	str.w	r3, [sl, #4]
 800ef1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef20:	f8ca 8000 	str.w	r8, [sl]
 800ef24:	f8ca 0008 	str.w	r0, [sl, #8]
 800ef28:	f8ca 300c 	str.w	r3, [sl, #12]
 800ef2c:	f1cb 0b00 	rsb	fp, fp, #0
 800ef30:	e6fa      	b.n	800ed28 <__ieee754_rem_pio2+0x80>
 800ef32:	a327      	add	r3, pc, #156	; (adr r3, 800efd0 <__ieee754_rem_pio2+0x328>)
 800ef34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef38:	ec51 0b18 	vmov	r0, r1, d8
 800ef3c:	f7f1 fb74 	bl	8000628 <__aeabi_dmul>
 800ef40:	4604      	mov	r4, r0
 800ef42:	460d      	mov	r5, r1
 800ef44:	4602      	mov	r2, r0
 800ef46:	460b      	mov	r3, r1
 800ef48:	4640      	mov	r0, r8
 800ef4a:	4649      	mov	r1, r9
 800ef4c:	f7f1 f9b4 	bl	80002b8 <__aeabi_dsub>
 800ef50:	4602      	mov	r2, r0
 800ef52:	460b      	mov	r3, r1
 800ef54:	4606      	mov	r6, r0
 800ef56:	460f      	mov	r7, r1
 800ef58:	4640      	mov	r0, r8
 800ef5a:	4649      	mov	r1, r9
 800ef5c:	f7f1 f9ac 	bl	80002b8 <__aeabi_dsub>
 800ef60:	4622      	mov	r2, r4
 800ef62:	462b      	mov	r3, r5
 800ef64:	f7f1 f9a8 	bl	80002b8 <__aeabi_dsub>
 800ef68:	a31b      	add	r3, pc, #108	; (adr r3, 800efd8 <__ieee754_rem_pio2+0x330>)
 800ef6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6e:	4604      	mov	r4, r0
 800ef70:	460d      	mov	r5, r1
 800ef72:	ec51 0b18 	vmov	r0, r1, d8
 800ef76:	f7f1 fb57 	bl	8000628 <__aeabi_dmul>
 800ef7a:	4622      	mov	r2, r4
 800ef7c:	462b      	mov	r3, r5
 800ef7e:	f7f1 f99b 	bl	80002b8 <__aeabi_dsub>
 800ef82:	4604      	mov	r4, r0
 800ef84:	460d      	mov	r5, r1
 800ef86:	e75f      	b.n	800ee48 <__ieee754_rem_pio2+0x1a0>
 800ef88:	4b1b      	ldr	r3, [pc, #108]	; (800eff8 <__ieee754_rem_pio2+0x350>)
 800ef8a:	4598      	cmp	r8, r3
 800ef8c:	dd36      	ble.n	800effc <__ieee754_rem_pio2+0x354>
 800ef8e:	ee10 2a10 	vmov	r2, s0
 800ef92:	462b      	mov	r3, r5
 800ef94:	4620      	mov	r0, r4
 800ef96:	4629      	mov	r1, r5
 800ef98:	f7f1 f98e 	bl	80002b8 <__aeabi_dsub>
 800ef9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800efa0:	e9ca 0100 	strd	r0, r1, [sl]
 800efa4:	e694      	b.n	800ecd0 <__ieee754_rem_pio2+0x28>
 800efa6:	bf00      	nop
 800efa8:	54400000 	.word	0x54400000
 800efac:	3ff921fb 	.word	0x3ff921fb
 800efb0:	1a626331 	.word	0x1a626331
 800efb4:	3dd0b461 	.word	0x3dd0b461
 800efb8:	1a600000 	.word	0x1a600000
 800efbc:	3dd0b461 	.word	0x3dd0b461
 800efc0:	2e037073 	.word	0x2e037073
 800efc4:	3ba3198a 	.word	0x3ba3198a
 800efc8:	6dc9c883 	.word	0x6dc9c883
 800efcc:	3fe45f30 	.word	0x3fe45f30
 800efd0:	2e000000 	.word	0x2e000000
 800efd4:	3ba3198a 	.word	0x3ba3198a
 800efd8:	252049c1 	.word	0x252049c1
 800efdc:	397b839a 	.word	0x397b839a
 800efe0:	3fe921fb 	.word	0x3fe921fb
 800efe4:	4002d97b 	.word	0x4002d97b
 800efe8:	3ff921fb 	.word	0x3ff921fb
 800efec:	413921fb 	.word	0x413921fb
 800eff0:	3fe00000 	.word	0x3fe00000
 800eff4:	08010800 	.word	0x08010800
 800eff8:	7fefffff 	.word	0x7fefffff
 800effc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f000:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f004:	ee10 0a10 	vmov	r0, s0
 800f008:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f00c:	ee10 6a10 	vmov	r6, s0
 800f010:	460f      	mov	r7, r1
 800f012:	f7f1 fdb9 	bl	8000b88 <__aeabi_d2iz>
 800f016:	f7f1 fa9d 	bl	8000554 <__aeabi_i2d>
 800f01a:	4602      	mov	r2, r0
 800f01c:	460b      	mov	r3, r1
 800f01e:	4630      	mov	r0, r6
 800f020:	4639      	mov	r1, r7
 800f022:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f026:	f7f1 f947 	bl	80002b8 <__aeabi_dsub>
 800f02a:	4b23      	ldr	r3, [pc, #140]	; (800f0b8 <__ieee754_rem_pio2+0x410>)
 800f02c:	2200      	movs	r2, #0
 800f02e:	f7f1 fafb 	bl	8000628 <__aeabi_dmul>
 800f032:	460f      	mov	r7, r1
 800f034:	4606      	mov	r6, r0
 800f036:	f7f1 fda7 	bl	8000b88 <__aeabi_d2iz>
 800f03a:	f7f1 fa8b 	bl	8000554 <__aeabi_i2d>
 800f03e:	4602      	mov	r2, r0
 800f040:	460b      	mov	r3, r1
 800f042:	4630      	mov	r0, r6
 800f044:	4639      	mov	r1, r7
 800f046:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f04a:	f7f1 f935 	bl	80002b8 <__aeabi_dsub>
 800f04e:	4b1a      	ldr	r3, [pc, #104]	; (800f0b8 <__ieee754_rem_pio2+0x410>)
 800f050:	2200      	movs	r2, #0
 800f052:	f7f1 fae9 	bl	8000628 <__aeabi_dmul>
 800f056:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f05a:	ad04      	add	r5, sp, #16
 800f05c:	f04f 0803 	mov.w	r8, #3
 800f060:	46a9      	mov	r9, r5
 800f062:	2600      	movs	r6, #0
 800f064:	2700      	movs	r7, #0
 800f066:	4632      	mov	r2, r6
 800f068:	463b      	mov	r3, r7
 800f06a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f06e:	46c3      	mov	fp, r8
 800f070:	3d08      	subs	r5, #8
 800f072:	f108 38ff 	add.w	r8, r8, #4294967295
 800f076:	f7f1 fd3f 	bl	8000af8 <__aeabi_dcmpeq>
 800f07a:	2800      	cmp	r0, #0
 800f07c:	d1f3      	bne.n	800f066 <__ieee754_rem_pio2+0x3be>
 800f07e:	4b0f      	ldr	r3, [pc, #60]	; (800f0bc <__ieee754_rem_pio2+0x414>)
 800f080:	9301      	str	r3, [sp, #4]
 800f082:	2302      	movs	r3, #2
 800f084:	9300      	str	r3, [sp, #0]
 800f086:	4622      	mov	r2, r4
 800f088:	465b      	mov	r3, fp
 800f08a:	4651      	mov	r1, sl
 800f08c:	4648      	mov	r0, r9
 800f08e:	f000 f993 	bl	800f3b8 <__kernel_rem_pio2>
 800f092:	9b02      	ldr	r3, [sp, #8]
 800f094:	2b00      	cmp	r3, #0
 800f096:	4683      	mov	fp, r0
 800f098:	f6bf ae46 	bge.w	800ed28 <__ieee754_rem_pio2+0x80>
 800f09c:	e9da 2100 	ldrd	r2, r1, [sl]
 800f0a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0a4:	e9ca 2300 	strd	r2, r3, [sl]
 800f0a8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f0ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0b0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f0b4:	e73a      	b.n	800ef2c <__ieee754_rem_pio2+0x284>
 800f0b6:	bf00      	nop
 800f0b8:	41700000 	.word	0x41700000
 800f0bc:	08010880 	.word	0x08010880

0800f0c0 <__ieee754_sqrt>:
 800f0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c4:	ec55 4b10 	vmov	r4, r5, d0
 800f0c8:	4e55      	ldr	r6, [pc, #340]	; (800f220 <__ieee754_sqrt+0x160>)
 800f0ca:	43ae      	bics	r6, r5
 800f0cc:	ee10 0a10 	vmov	r0, s0
 800f0d0:	ee10 3a10 	vmov	r3, s0
 800f0d4:	462a      	mov	r2, r5
 800f0d6:	4629      	mov	r1, r5
 800f0d8:	d110      	bne.n	800f0fc <__ieee754_sqrt+0x3c>
 800f0da:	ee10 2a10 	vmov	r2, s0
 800f0de:	462b      	mov	r3, r5
 800f0e0:	f7f1 faa2 	bl	8000628 <__aeabi_dmul>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	460b      	mov	r3, r1
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	f7f1 f8e6 	bl	80002bc <__adddf3>
 800f0f0:	4604      	mov	r4, r0
 800f0f2:	460d      	mov	r5, r1
 800f0f4:	ec45 4b10 	vmov	d0, r4, r5
 800f0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0fc:	2d00      	cmp	r5, #0
 800f0fe:	dc10      	bgt.n	800f122 <__ieee754_sqrt+0x62>
 800f100:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f104:	4330      	orrs	r0, r6
 800f106:	d0f5      	beq.n	800f0f4 <__ieee754_sqrt+0x34>
 800f108:	b15d      	cbz	r5, 800f122 <__ieee754_sqrt+0x62>
 800f10a:	ee10 2a10 	vmov	r2, s0
 800f10e:	462b      	mov	r3, r5
 800f110:	ee10 0a10 	vmov	r0, s0
 800f114:	f7f1 f8d0 	bl	80002b8 <__aeabi_dsub>
 800f118:	4602      	mov	r2, r0
 800f11a:	460b      	mov	r3, r1
 800f11c:	f7f1 fbae 	bl	800087c <__aeabi_ddiv>
 800f120:	e7e6      	b.n	800f0f0 <__ieee754_sqrt+0x30>
 800f122:	1512      	asrs	r2, r2, #20
 800f124:	d074      	beq.n	800f210 <__ieee754_sqrt+0x150>
 800f126:	07d4      	lsls	r4, r2, #31
 800f128:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f12c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f130:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f134:	bf5e      	ittt	pl
 800f136:	0fda      	lsrpl	r2, r3, #31
 800f138:	005b      	lslpl	r3, r3, #1
 800f13a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f13e:	2400      	movs	r4, #0
 800f140:	0fda      	lsrs	r2, r3, #31
 800f142:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f146:	107f      	asrs	r7, r7, #1
 800f148:	005b      	lsls	r3, r3, #1
 800f14a:	2516      	movs	r5, #22
 800f14c:	4620      	mov	r0, r4
 800f14e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f152:	1886      	adds	r6, r0, r2
 800f154:	428e      	cmp	r6, r1
 800f156:	bfde      	ittt	le
 800f158:	1b89      	suble	r1, r1, r6
 800f15a:	18b0      	addle	r0, r6, r2
 800f15c:	18a4      	addle	r4, r4, r2
 800f15e:	0049      	lsls	r1, r1, #1
 800f160:	3d01      	subs	r5, #1
 800f162:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f166:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f16a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f16e:	d1f0      	bne.n	800f152 <__ieee754_sqrt+0x92>
 800f170:	462a      	mov	r2, r5
 800f172:	f04f 0e20 	mov.w	lr, #32
 800f176:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f17a:	4281      	cmp	r1, r0
 800f17c:	eb06 0c05 	add.w	ip, r6, r5
 800f180:	dc02      	bgt.n	800f188 <__ieee754_sqrt+0xc8>
 800f182:	d113      	bne.n	800f1ac <__ieee754_sqrt+0xec>
 800f184:	459c      	cmp	ip, r3
 800f186:	d811      	bhi.n	800f1ac <__ieee754_sqrt+0xec>
 800f188:	f1bc 0f00 	cmp.w	ip, #0
 800f18c:	eb0c 0506 	add.w	r5, ip, r6
 800f190:	da43      	bge.n	800f21a <__ieee754_sqrt+0x15a>
 800f192:	2d00      	cmp	r5, #0
 800f194:	db41      	blt.n	800f21a <__ieee754_sqrt+0x15a>
 800f196:	f100 0801 	add.w	r8, r0, #1
 800f19a:	1a09      	subs	r1, r1, r0
 800f19c:	459c      	cmp	ip, r3
 800f19e:	bf88      	it	hi
 800f1a0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f1a4:	eba3 030c 	sub.w	r3, r3, ip
 800f1a8:	4432      	add	r2, r6
 800f1aa:	4640      	mov	r0, r8
 800f1ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f1b0:	f1be 0e01 	subs.w	lr, lr, #1
 800f1b4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f1b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f1bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f1c0:	d1db      	bne.n	800f17a <__ieee754_sqrt+0xba>
 800f1c2:	430b      	orrs	r3, r1
 800f1c4:	d006      	beq.n	800f1d4 <__ieee754_sqrt+0x114>
 800f1c6:	1c50      	adds	r0, r2, #1
 800f1c8:	bf13      	iteet	ne
 800f1ca:	3201      	addne	r2, #1
 800f1cc:	3401      	addeq	r4, #1
 800f1ce:	4672      	moveq	r2, lr
 800f1d0:	f022 0201 	bicne.w	r2, r2, #1
 800f1d4:	1063      	asrs	r3, r4, #1
 800f1d6:	0852      	lsrs	r2, r2, #1
 800f1d8:	07e1      	lsls	r1, r4, #31
 800f1da:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f1de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f1e2:	bf48      	it	mi
 800f1e4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f1e8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f1ec:	4614      	mov	r4, r2
 800f1ee:	e781      	b.n	800f0f4 <__ieee754_sqrt+0x34>
 800f1f0:	0ad9      	lsrs	r1, r3, #11
 800f1f2:	3815      	subs	r0, #21
 800f1f4:	055b      	lsls	r3, r3, #21
 800f1f6:	2900      	cmp	r1, #0
 800f1f8:	d0fa      	beq.n	800f1f0 <__ieee754_sqrt+0x130>
 800f1fa:	02cd      	lsls	r5, r1, #11
 800f1fc:	d50a      	bpl.n	800f214 <__ieee754_sqrt+0x154>
 800f1fe:	f1c2 0420 	rsb	r4, r2, #32
 800f202:	fa23 f404 	lsr.w	r4, r3, r4
 800f206:	1e55      	subs	r5, r2, #1
 800f208:	4093      	lsls	r3, r2
 800f20a:	4321      	orrs	r1, r4
 800f20c:	1b42      	subs	r2, r0, r5
 800f20e:	e78a      	b.n	800f126 <__ieee754_sqrt+0x66>
 800f210:	4610      	mov	r0, r2
 800f212:	e7f0      	b.n	800f1f6 <__ieee754_sqrt+0x136>
 800f214:	0049      	lsls	r1, r1, #1
 800f216:	3201      	adds	r2, #1
 800f218:	e7ef      	b.n	800f1fa <__ieee754_sqrt+0x13a>
 800f21a:	4680      	mov	r8, r0
 800f21c:	e7bd      	b.n	800f19a <__ieee754_sqrt+0xda>
 800f21e:	bf00      	nop
 800f220:	7ff00000 	.word	0x7ff00000
 800f224:	00000000 	.word	0x00000000

0800f228 <__kernel_cos>:
 800f228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f22c:	ec57 6b10 	vmov	r6, r7, d0
 800f230:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f234:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f238:	ed8d 1b00 	vstr	d1, [sp]
 800f23c:	da07      	bge.n	800f24e <__kernel_cos+0x26>
 800f23e:	ee10 0a10 	vmov	r0, s0
 800f242:	4639      	mov	r1, r7
 800f244:	f7f1 fca0 	bl	8000b88 <__aeabi_d2iz>
 800f248:	2800      	cmp	r0, #0
 800f24a:	f000 8088 	beq.w	800f35e <__kernel_cos+0x136>
 800f24e:	4632      	mov	r2, r6
 800f250:	463b      	mov	r3, r7
 800f252:	4630      	mov	r0, r6
 800f254:	4639      	mov	r1, r7
 800f256:	f7f1 f9e7 	bl	8000628 <__aeabi_dmul>
 800f25a:	4b51      	ldr	r3, [pc, #324]	; (800f3a0 <__kernel_cos+0x178>)
 800f25c:	2200      	movs	r2, #0
 800f25e:	4604      	mov	r4, r0
 800f260:	460d      	mov	r5, r1
 800f262:	f7f1 f9e1 	bl	8000628 <__aeabi_dmul>
 800f266:	a340      	add	r3, pc, #256	; (adr r3, 800f368 <__kernel_cos+0x140>)
 800f268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26c:	4682      	mov	sl, r0
 800f26e:	468b      	mov	fp, r1
 800f270:	4620      	mov	r0, r4
 800f272:	4629      	mov	r1, r5
 800f274:	f7f1 f9d8 	bl	8000628 <__aeabi_dmul>
 800f278:	a33d      	add	r3, pc, #244	; (adr r3, 800f370 <__kernel_cos+0x148>)
 800f27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27e:	f7f1 f81d 	bl	80002bc <__adddf3>
 800f282:	4622      	mov	r2, r4
 800f284:	462b      	mov	r3, r5
 800f286:	f7f1 f9cf 	bl	8000628 <__aeabi_dmul>
 800f28a:	a33b      	add	r3, pc, #236	; (adr r3, 800f378 <__kernel_cos+0x150>)
 800f28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f290:	f7f1 f812 	bl	80002b8 <__aeabi_dsub>
 800f294:	4622      	mov	r2, r4
 800f296:	462b      	mov	r3, r5
 800f298:	f7f1 f9c6 	bl	8000628 <__aeabi_dmul>
 800f29c:	a338      	add	r3, pc, #224	; (adr r3, 800f380 <__kernel_cos+0x158>)
 800f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a2:	f7f1 f80b 	bl	80002bc <__adddf3>
 800f2a6:	4622      	mov	r2, r4
 800f2a8:	462b      	mov	r3, r5
 800f2aa:	f7f1 f9bd 	bl	8000628 <__aeabi_dmul>
 800f2ae:	a336      	add	r3, pc, #216	; (adr r3, 800f388 <__kernel_cos+0x160>)
 800f2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b4:	f7f1 f800 	bl	80002b8 <__aeabi_dsub>
 800f2b8:	4622      	mov	r2, r4
 800f2ba:	462b      	mov	r3, r5
 800f2bc:	f7f1 f9b4 	bl	8000628 <__aeabi_dmul>
 800f2c0:	a333      	add	r3, pc, #204	; (adr r3, 800f390 <__kernel_cos+0x168>)
 800f2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c6:	f7f0 fff9 	bl	80002bc <__adddf3>
 800f2ca:	4622      	mov	r2, r4
 800f2cc:	462b      	mov	r3, r5
 800f2ce:	f7f1 f9ab 	bl	8000628 <__aeabi_dmul>
 800f2d2:	4622      	mov	r2, r4
 800f2d4:	462b      	mov	r3, r5
 800f2d6:	f7f1 f9a7 	bl	8000628 <__aeabi_dmul>
 800f2da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2de:	4604      	mov	r4, r0
 800f2e0:	460d      	mov	r5, r1
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	4639      	mov	r1, r7
 800f2e6:	f7f1 f99f 	bl	8000628 <__aeabi_dmul>
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	f7f0 ffe1 	bl	80002b8 <__aeabi_dsub>
 800f2f6:	4b2b      	ldr	r3, [pc, #172]	; (800f3a4 <__kernel_cos+0x17c>)
 800f2f8:	4598      	cmp	r8, r3
 800f2fa:	4606      	mov	r6, r0
 800f2fc:	460f      	mov	r7, r1
 800f2fe:	dc10      	bgt.n	800f322 <__kernel_cos+0xfa>
 800f300:	4602      	mov	r2, r0
 800f302:	460b      	mov	r3, r1
 800f304:	4650      	mov	r0, sl
 800f306:	4659      	mov	r1, fp
 800f308:	f7f0 ffd6 	bl	80002b8 <__aeabi_dsub>
 800f30c:	460b      	mov	r3, r1
 800f30e:	4926      	ldr	r1, [pc, #152]	; (800f3a8 <__kernel_cos+0x180>)
 800f310:	4602      	mov	r2, r0
 800f312:	2000      	movs	r0, #0
 800f314:	f7f0 ffd0 	bl	80002b8 <__aeabi_dsub>
 800f318:	ec41 0b10 	vmov	d0, r0, r1
 800f31c:	b003      	add	sp, #12
 800f31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f322:	4b22      	ldr	r3, [pc, #136]	; (800f3ac <__kernel_cos+0x184>)
 800f324:	4920      	ldr	r1, [pc, #128]	; (800f3a8 <__kernel_cos+0x180>)
 800f326:	4598      	cmp	r8, r3
 800f328:	bfcc      	ite	gt
 800f32a:	4d21      	ldrgt	r5, [pc, #132]	; (800f3b0 <__kernel_cos+0x188>)
 800f32c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f330:	2400      	movs	r4, #0
 800f332:	4622      	mov	r2, r4
 800f334:	462b      	mov	r3, r5
 800f336:	2000      	movs	r0, #0
 800f338:	f7f0 ffbe 	bl	80002b8 <__aeabi_dsub>
 800f33c:	4622      	mov	r2, r4
 800f33e:	4680      	mov	r8, r0
 800f340:	4689      	mov	r9, r1
 800f342:	462b      	mov	r3, r5
 800f344:	4650      	mov	r0, sl
 800f346:	4659      	mov	r1, fp
 800f348:	f7f0 ffb6 	bl	80002b8 <__aeabi_dsub>
 800f34c:	4632      	mov	r2, r6
 800f34e:	463b      	mov	r3, r7
 800f350:	f7f0 ffb2 	bl	80002b8 <__aeabi_dsub>
 800f354:	4602      	mov	r2, r0
 800f356:	460b      	mov	r3, r1
 800f358:	4640      	mov	r0, r8
 800f35a:	4649      	mov	r1, r9
 800f35c:	e7da      	b.n	800f314 <__kernel_cos+0xec>
 800f35e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f398 <__kernel_cos+0x170>
 800f362:	e7db      	b.n	800f31c <__kernel_cos+0xf4>
 800f364:	f3af 8000 	nop.w
 800f368:	be8838d4 	.word	0xbe8838d4
 800f36c:	bda8fae9 	.word	0xbda8fae9
 800f370:	bdb4b1c4 	.word	0xbdb4b1c4
 800f374:	3e21ee9e 	.word	0x3e21ee9e
 800f378:	809c52ad 	.word	0x809c52ad
 800f37c:	3e927e4f 	.word	0x3e927e4f
 800f380:	19cb1590 	.word	0x19cb1590
 800f384:	3efa01a0 	.word	0x3efa01a0
 800f388:	16c15177 	.word	0x16c15177
 800f38c:	3f56c16c 	.word	0x3f56c16c
 800f390:	5555554c 	.word	0x5555554c
 800f394:	3fa55555 	.word	0x3fa55555
 800f398:	00000000 	.word	0x00000000
 800f39c:	3ff00000 	.word	0x3ff00000
 800f3a0:	3fe00000 	.word	0x3fe00000
 800f3a4:	3fd33332 	.word	0x3fd33332
 800f3a8:	3ff00000 	.word	0x3ff00000
 800f3ac:	3fe90000 	.word	0x3fe90000
 800f3b0:	3fd20000 	.word	0x3fd20000
 800f3b4:	00000000 	.word	0x00000000

0800f3b8 <__kernel_rem_pio2>:
 800f3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3bc:	ed2d 8b02 	vpush	{d8}
 800f3c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f3c4:	f112 0f14 	cmn.w	r2, #20
 800f3c8:	9308      	str	r3, [sp, #32]
 800f3ca:	9101      	str	r1, [sp, #4]
 800f3cc:	4bc4      	ldr	r3, [pc, #784]	; (800f6e0 <__kernel_rem_pio2+0x328>)
 800f3ce:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f3d0:	900b      	str	r0, [sp, #44]	; 0x2c
 800f3d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f3d6:	9302      	str	r3, [sp, #8]
 800f3d8:	9b08      	ldr	r3, [sp, #32]
 800f3da:	f103 33ff 	add.w	r3, r3, #4294967295
 800f3de:	bfa8      	it	ge
 800f3e0:	1ed4      	subge	r4, r2, #3
 800f3e2:	9306      	str	r3, [sp, #24]
 800f3e4:	bfb2      	itee	lt
 800f3e6:	2400      	movlt	r4, #0
 800f3e8:	2318      	movge	r3, #24
 800f3ea:	fb94 f4f3 	sdivge	r4, r4, r3
 800f3ee:	f06f 0317 	mvn.w	r3, #23
 800f3f2:	fb04 3303 	mla	r3, r4, r3, r3
 800f3f6:	eb03 0a02 	add.w	sl, r3, r2
 800f3fa:	9b02      	ldr	r3, [sp, #8]
 800f3fc:	9a06      	ldr	r2, [sp, #24]
 800f3fe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800f6d0 <__kernel_rem_pio2+0x318>
 800f402:	eb03 0802 	add.w	r8, r3, r2
 800f406:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f408:	1aa7      	subs	r7, r4, r2
 800f40a:	ae22      	add	r6, sp, #136	; 0x88
 800f40c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f410:	2500      	movs	r5, #0
 800f412:	4545      	cmp	r5, r8
 800f414:	dd13      	ble.n	800f43e <__kernel_rem_pio2+0x86>
 800f416:	9b08      	ldr	r3, [sp, #32]
 800f418:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800f6d0 <__kernel_rem_pio2+0x318>
 800f41c:	aa22      	add	r2, sp, #136	; 0x88
 800f41e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f422:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f426:	f04f 0800 	mov.w	r8, #0
 800f42a:	9b02      	ldr	r3, [sp, #8]
 800f42c:	4598      	cmp	r8, r3
 800f42e:	dc2f      	bgt.n	800f490 <__kernel_rem_pio2+0xd8>
 800f430:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f434:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f438:	462f      	mov	r7, r5
 800f43a:	2600      	movs	r6, #0
 800f43c:	e01b      	b.n	800f476 <__kernel_rem_pio2+0xbe>
 800f43e:	42ef      	cmn	r7, r5
 800f440:	d407      	bmi.n	800f452 <__kernel_rem_pio2+0x9a>
 800f442:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f446:	f7f1 f885 	bl	8000554 <__aeabi_i2d>
 800f44a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f44e:	3501      	adds	r5, #1
 800f450:	e7df      	b.n	800f412 <__kernel_rem_pio2+0x5a>
 800f452:	ec51 0b18 	vmov	r0, r1, d8
 800f456:	e7f8      	b.n	800f44a <__kernel_rem_pio2+0x92>
 800f458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f45c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f460:	f7f1 f8e2 	bl	8000628 <__aeabi_dmul>
 800f464:	4602      	mov	r2, r0
 800f466:	460b      	mov	r3, r1
 800f468:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f46c:	f7f0 ff26 	bl	80002bc <__adddf3>
 800f470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f474:	3601      	adds	r6, #1
 800f476:	9b06      	ldr	r3, [sp, #24]
 800f478:	429e      	cmp	r6, r3
 800f47a:	f1a7 0708 	sub.w	r7, r7, #8
 800f47e:	ddeb      	ble.n	800f458 <__kernel_rem_pio2+0xa0>
 800f480:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f484:	f108 0801 	add.w	r8, r8, #1
 800f488:	ecab 7b02 	vstmia	fp!, {d7}
 800f48c:	3508      	adds	r5, #8
 800f48e:	e7cc      	b.n	800f42a <__kernel_rem_pio2+0x72>
 800f490:	9b02      	ldr	r3, [sp, #8]
 800f492:	aa0e      	add	r2, sp, #56	; 0x38
 800f494:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f498:	930d      	str	r3, [sp, #52]	; 0x34
 800f49a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f49c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f4a0:	9c02      	ldr	r4, [sp, #8]
 800f4a2:	930c      	str	r3, [sp, #48]	; 0x30
 800f4a4:	00e3      	lsls	r3, r4, #3
 800f4a6:	930a      	str	r3, [sp, #40]	; 0x28
 800f4a8:	ab9a      	add	r3, sp, #616	; 0x268
 800f4aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f4ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f4b2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f4b6:	ab72      	add	r3, sp, #456	; 0x1c8
 800f4b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f4bc:	46c3      	mov	fp, r8
 800f4be:	46a1      	mov	r9, r4
 800f4c0:	f1b9 0f00 	cmp.w	r9, #0
 800f4c4:	f1a5 0508 	sub.w	r5, r5, #8
 800f4c8:	dc77      	bgt.n	800f5ba <__kernel_rem_pio2+0x202>
 800f4ca:	ec47 6b10 	vmov	d0, r6, r7
 800f4ce:	4650      	mov	r0, sl
 800f4d0:	f000 fde6 	bl	80100a0 <scalbn>
 800f4d4:	ec57 6b10 	vmov	r6, r7, d0
 800f4d8:	2200      	movs	r2, #0
 800f4da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f4de:	ee10 0a10 	vmov	r0, s0
 800f4e2:	4639      	mov	r1, r7
 800f4e4:	f7f1 f8a0 	bl	8000628 <__aeabi_dmul>
 800f4e8:	ec41 0b10 	vmov	d0, r0, r1
 800f4ec:	f000 fd58 	bl	800ffa0 <floor>
 800f4f0:	4b7c      	ldr	r3, [pc, #496]	; (800f6e4 <__kernel_rem_pio2+0x32c>)
 800f4f2:	ec51 0b10 	vmov	r0, r1, d0
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	f7f1 f896 	bl	8000628 <__aeabi_dmul>
 800f4fc:	4602      	mov	r2, r0
 800f4fe:	460b      	mov	r3, r1
 800f500:	4630      	mov	r0, r6
 800f502:	4639      	mov	r1, r7
 800f504:	f7f0 fed8 	bl	80002b8 <__aeabi_dsub>
 800f508:	460f      	mov	r7, r1
 800f50a:	4606      	mov	r6, r0
 800f50c:	f7f1 fb3c 	bl	8000b88 <__aeabi_d2iz>
 800f510:	9004      	str	r0, [sp, #16]
 800f512:	f7f1 f81f 	bl	8000554 <__aeabi_i2d>
 800f516:	4602      	mov	r2, r0
 800f518:	460b      	mov	r3, r1
 800f51a:	4630      	mov	r0, r6
 800f51c:	4639      	mov	r1, r7
 800f51e:	f7f0 fecb 	bl	80002b8 <__aeabi_dsub>
 800f522:	f1ba 0f00 	cmp.w	sl, #0
 800f526:	4606      	mov	r6, r0
 800f528:	460f      	mov	r7, r1
 800f52a:	dd6d      	ble.n	800f608 <__kernel_rem_pio2+0x250>
 800f52c:	1e62      	subs	r2, r4, #1
 800f52e:	ab0e      	add	r3, sp, #56	; 0x38
 800f530:	9d04      	ldr	r5, [sp, #16]
 800f532:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f536:	f1ca 0118 	rsb	r1, sl, #24
 800f53a:	fa40 f301 	asr.w	r3, r0, r1
 800f53e:	441d      	add	r5, r3
 800f540:	408b      	lsls	r3, r1
 800f542:	1ac0      	subs	r0, r0, r3
 800f544:	ab0e      	add	r3, sp, #56	; 0x38
 800f546:	9504      	str	r5, [sp, #16]
 800f548:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f54c:	f1ca 0317 	rsb	r3, sl, #23
 800f550:	fa40 fb03 	asr.w	fp, r0, r3
 800f554:	f1bb 0f00 	cmp.w	fp, #0
 800f558:	dd65      	ble.n	800f626 <__kernel_rem_pio2+0x26e>
 800f55a:	9b04      	ldr	r3, [sp, #16]
 800f55c:	2200      	movs	r2, #0
 800f55e:	3301      	adds	r3, #1
 800f560:	9304      	str	r3, [sp, #16]
 800f562:	4615      	mov	r5, r2
 800f564:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f568:	4294      	cmp	r4, r2
 800f56a:	f300 809c 	bgt.w	800f6a6 <__kernel_rem_pio2+0x2ee>
 800f56e:	f1ba 0f00 	cmp.w	sl, #0
 800f572:	dd07      	ble.n	800f584 <__kernel_rem_pio2+0x1cc>
 800f574:	f1ba 0f01 	cmp.w	sl, #1
 800f578:	f000 80c0 	beq.w	800f6fc <__kernel_rem_pio2+0x344>
 800f57c:	f1ba 0f02 	cmp.w	sl, #2
 800f580:	f000 80c6 	beq.w	800f710 <__kernel_rem_pio2+0x358>
 800f584:	f1bb 0f02 	cmp.w	fp, #2
 800f588:	d14d      	bne.n	800f626 <__kernel_rem_pio2+0x26e>
 800f58a:	4632      	mov	r2, r6
 800f58c:	463b      	mov	r3, r7
 800f58e:	4956      	ldr	r1, [pc, #344]	; (800f6e8 <__kernel_rem_pio2+0x330>)
 800f590:	2000      	movs	r0, #0
 800f592:	f7f0 fe91 	bl	80002b8 <__aeabi_dsub>
 800f596:	4606      	mov	r6, r0
 800f598:	460f      	mov	r7, r1
 800f59a:	2d00      	cmp	r5, #0
 800f59c:	d043      	beq.n	800f626 <__kernel_rem_pio2+0x26e>
 800f59e:	4650      	mov	r0, sl
 800f5a0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800f6d8 <__kernel_rem_pio2+0x320>
 800f5a4:	f000 fd7c 	bl	80100a0 <scalbn>
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	4639      	mov	r1, r7
 800f5ac:	ec53 2b10 	vmov	r2, r3, d0
 800f5b0:	f7f0 fe82 	bl	80002b8 <__aeabi_dsub>
 800f5b4:	4606      	mov	r6, r0
 800f5b6:	460f      	mov	r7, r1
 800f5b8:	e035      	b.n	800f626 <__kernel_rem_pio2+0x26e>
 800f5ba:	4b4c      	ldr	r3, [pc, #304]	; (800f6ec <__kernel_rem_pio2+0x334>)
 800f5bc:	2200      	movs	r2, #0
 800f5be:	4630      	mov	r0, r6
 800f5c0:	4639      	mov	r1, r7
 800f5c2:	f7f1 f831 	bl	8000628 <__aeabi_dmul>
 800f5c6:	f7f1 fadf 	bl	8000b88 <__aeabi_d2iz>
 800f5ca:	f7f0 ffc3 	bl	8000554 <__aeabi_i2d>
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	460b      	mov	r3, r1
 800f5d2:	ec43 2b18 	vmov	d8, r2, r3
 800f5d6:	4b46      	ldr	r3, [pc, #280]	; (800f6f0 <__kernel_rem_pio2+0x338>)
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f7f1 f825 	bl	8000628 <__aeabi_dmul>
 800f5de:	4602      	mov	r2, r0
 800f5e0:	460b      	mov	r3, r1
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	4639      	mov	r1, r7
 800f5e6:	f7f0 fe67 	bl	80002b8 <__aeabi_dsub>
 800f5ea:	f7f1 facd 	bl	8000b88 <__aeabi_d2iz>
 800f5ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f5f2:	f84b 0b04 	str.w	r0, [fp], #4
 800f5f6:	ec51 0b18 	vmov	r0, r1, d8
 800f5fa:	f7f0 fe5f 	bl	80002bc <__adddf3>
 800f5fe:	f109 39ff 	add.w	r9, r9, #4294967295
 800f602:	4606      	mov	r6, r0
 800f604:	460f      	mov	r7, r1
 800f606:	e75b      	b.n	800f4c0 <__kernel_rem_pio2+0x108>
 800f608:	d106      	bne.n	800f618 <__kernel_rem_pio2+0x260>
 800f60a:	1e63      	subs	r3, r4, #1
 800f60c:	aa0e      	add	r2, sp, #56	; 0x38
 800f60e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f612:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f616:	e79d      	b.n	800f554 <__kernel_rem_pio2+0x19c>
 800f618:	4b36      	ldr	r3, [pc, #216]	; (800f6f4 <__kernel_rem_pio2+0x33c>)
 800f61a:	2200      	movs	r2, #0
 800f61c:	f7f1 fa8a 	bl	8000b34 <__aeabi_dcmpge>
 800f620:	2800      	cmp	r0, #0
 800f622:	d13d      	bne.n	800f6a0 <__kernel_rem_pio2+0x2e8>
 800f624:	4683      	mov	fp, r0
 800f626:	2200      	movs	r2, #0
 800f628:	2300      	movs	r3, #0
 800f62a:	4630      	mov	r0, r6
 800f62c:	4639      	mov	r1, r7
 800f62e:	f7f1 fa63 	bl	8000af8 <__aeabi_dcmpeq>
 800f632:	2800      	cmp	r0, #0
 800f634:	f000 80c0 	beq.w	800f7b8 <__kernel_rem_pio2+0x400>
 800f638:	1e65      	subs	r5, r4, #1
 800f63a:	462b      	mov	r3, r5
 800f63c:	2200      	movs	r2, #0
 800f63e:	9902      	ldr	r1, [sp, #8]
 800f640:	428b      	cmp	r3, r1
 800f642:	da6c      	bge.n	800f71e <__kernel_rem_pio2+0x366>
 800f644:	2a00      	cmp	r2, #0
 800f646:	f000 8089 	beq.w	800f75c <__kernel_rem_pio2+0x3a4>
 800f64a:	ab0e      	add	r3, sp, #56	; 0x38
 800f64c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f650:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f654:	2b00      	cmp	r3, #0
 800f656:	f000 80ad 	beq.w	800f7b4 <__kernel_rem_pio2+0x3fc>
 800f65a:	4650      	mov	r0, sl
 800f65c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800f6d8 <__kernel_rem_pio2+0x320>
 800f660:	f000 fd1e 	bl	80100a0 <scalbn>
 800f664:	ab9a      	add	r3, sp, #616	; 0x268
 800f666:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f66a:	ec57 6b10 	vmov	r6, r7, d0
 800f66e:	00ec      	lsls	r4, r5, #3
 800f670:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f674:	46aa      	mov	sl, r5
 800f676:	f1ba 0f00 	cmp.w	sl, #0
 800f67a:	f280 80d6 	bge.w	800f82a <__kernel_rem_pio2+0x472>
 800f67e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800f6d0 <__kernel_rem_pio2+0x318>
 800f682:	462e      	mov	r6, r5
 800f684:	2e00      	cmp	r6, #0
 800f686:	f2c0 8104 	blt.w	800f892 <__kernel_rem_pio2+0x4da>
 800f68a:	ab72      	add	r3, sp, #456	; 0x1c8
 800f68c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f690:	f8df a064 	ldr.w	sl, [pc, #100]	; 800f6f8 <__kernel_rem_pio2+0x340>
 800f694:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f698:	f04f 0800 	mov.w	r8, #0
 800f69c:	1baf      	subs	r7, r5, r6
 800f69e:	e0ea      	b.n	800f876 <__kernel_rem_pio2+0x4be>
 800f6a0:	f04f 0b02 	mov.w	fp, #2
 800f6a4:	e759      	b.n	800f55a <__kernel_rem_pio2+0x1a2>
 800f6a6:	f8d8 3000 	ldr.w	r3, [r8]
 800f6aa:	b955      	cbnz	r5, 800f6c2 <__kernel_rem_pio2+0x30a>
 800f6ac:	b123      	cbz	r3, 800f6b8 <__kernel_rem_pio2+0x300>
 800f6ae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f6b2:	f8c8 3000 	str.w	r3, [r8]
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	3201      	adds	r2, #1
 800f6ba:	f108 0804 	add.w	r8, r8, #4
 800f6be:	461d      	mov	r5, r3
 800f6c0:	e752      	b.n	800f568 <__kernel_rem_pio2+0x1b0>
 800f6c2:	1acb      	subs	r3, r1, r3
 800f6c4:	f8c8 3000 	str.w	r3, [r8]
 800f6c8:	462b      	mov	r3, r5
 800f6ca:	e7f5      	b.n	800f6b8 <__kernel_rem_pio2+0x300>
 800f6cc:	f3af 8000 	nop.w
	...
 800f6dc:	3ff00000 	.word	0x3ff00000
 800f6e0:	080109c8 	.word	0x080109c8
 800f6e4:	40200000 	.word	0x40200000
 800f6e8:	3ff00000 	.word	0x3ff00000
 800f6ec:	3e700000 	.word	0x3e700000
 800f6f0:	41700000 	.word	0x41700000
 800f6f4:	3fe00000 	.word	0x3fe00000
 800f6f8:	08010988 	.word	0x08010988
 800f6fc:	1e62      	subs	r2, r4, #1
 800f6fe:	ab0e      	add	r3, sp, #56	; 0x38
 800f700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f704:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f708:	a90e      	add	r1, sp, #56	; 0x38
 800f70a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f70e:	e739      	b.n	800f584 <__kernel_rem_pio2+0x1cc>
 800f710:	1e62      	subs	r2, r4, #1
 800f712:	ab0e      	add	r3, sp, #56	; 0x38
 800f714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f718:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f71c:	e7f4      	b.n	800f708 <__kernel_rem_pio2+0x350>
 800f71e:	a90e      	add	r1, sp, #56	; 0x38
 800f720:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f724:	3b01      	subs	r3, #1
 800f726:	430a      	orrs	r2, r1
 800f728:	e789      	b.n	800f63e <__kernel_rem_pio2+0x286>
 800f72a:	3301      	adds	r3, #1
 800f72c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f730:	2900      	cmp	r1, #0
 800f732:	d0fa      	beq.n	800f72a <__kernel_rem_pio2+0x372>
 800f734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f736:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800f73a:	446a      	add	r2, sp
 800f73c:	3a98      	subs	r2, #152	; 0x98
 800f73e:	920a      	str	r2, [sp, #40]	; 0x28
 800f740:	9a08      	ldr	r2, [sp, #32]
 800f742:	18e3      	adds	r3, r4, r3
 800f744:	18a5      	adds	r5, r4, r2
 800f746:	aa22      	add	r2, sp, #136	; 0x88
 800f748:	f104 0801 	add.w	r8, r4, #1
 800f74c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f750:	9304      	str	r3, [sp, #16]
 800f752:	9b04      	ldr	r3, [sp, #16]
 800f754:	4543      	cmp	r3, r8
 800f756:	da04      	bge.n	800f762 <__kernel_rem_pio2+0x3aa>
 800f758:	461c      	mov	r4, r3
 800f75a:	e6a3      	b.n	800f4a4 <__kernel_rem_pio2+0xec>
 800f75c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f75e:	2301      	movs	r3, #1
 800f760:	e7e4      	b.n	800f72c <__kernel_rem_pio2+0x374>
 800f762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f764:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f768:	f7f0 fef4 	bl	8000554 <__aeabi_i2d>
 800f76c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f772:	46ab      	mov	fp, r5
 800f774:	461c      	mov	r4, r3
 800f776:	f04f 0900 	mov.w	r9, #0
 800f77a:	2600      	movs	r6, #0
 800f77c:	2700      	movs	r7, #0
 800f77e:	9b06      	ldr	r3, [sp, #24]
 800f780:	4599      	cmp	r9, r3
 800f782:	dd06      	ble.n	800f792 <__kernel_rem_pio2+0x3da>
 800f784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f786:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f78a:	f108 0801 	add.w	r8, r8, #1
 800f78e:	930a      	str	r3, [sp, #40]	; 0x28
 800f790:	e7df      	b.n	800f752 <__kernel_rem_pio2+0x39a>
 800f792:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f796:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f79a:	f7f0 ff45 	bl	8000628 <__aeabi_dmul>
 800f79e:	4602      	mov	r2, r0
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	4639      	mov	r1, r7
 800f7a6:	f7f0 fd89 	bl	80002bc <__adddf3>
 800f7aa:	f109 0901 	add.w	r9, r9, #1
 800f7ae:	4606      	mov	r6, r0
 800f7b0:	460f      	mov	r7, r1
 800f7b2:	e7e4      	b.n	800f77e <__kernel_rem_pio2+0x3c6>
 800f7b4:	3d01      	subs	r5, #1
 800f7b6:	e748      	b.n	800f64a <__kernel_rem_pio2+0x292>
 800f7b8:	ec47 6b10 	vmov	d0, r6, r7
 800f7bc:	f1ca 0000 	rsb	r0, sl, #0
 800f7c0:	f000 fc6e 	bl	80100a0 <scalbn>
 800f7c4:	ec57 6b10 	vmov	r6, r7, d0
 800f7c8:	4ba0      	ldr	r3, [pc, #640]	; (800fa4c <__kernel_rem_pio2+0x694>)
 800f7ca:	ee10 0a10 	vmov	r0, s0
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	4639      	mov	r1, r7
 800f7d2:	f7f1 f9af 	bl	8000b34 <__aeabi_dcmpge>
 800f7d6:	b1f8      	cbz	r0, 800f818 <__kernel_rem_pio2+0x460>
 800f7d8:	4b9d      	ldr	r3, [pc, #628]	; (800fa50 <__kernel_rem_pio2+0x698>)
 800f7da:	2200      	movs	r2, #0
 800f7dc:	4630      	mov	r0, r6
 800f7de:	4639      	mov	r1, r7
 800f7e0:	f7f0 ff22 	bl	8000628 <__aeabi_dmul>
 800f7e4:	f7f1 f9d0 	bl	8000b88 <__aeabi_d2iz>
 800f7e8:	4680      	mov	r8, r0
 800f7ea:	f7f0 feb3 	bl	8000554 <__aeabi_i2d>
 800f7ee:	4b97      	ldr	r3, [pc, #604]	; (800fa4c <__kernel_rem_pio2+0x694>)
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f7f0 ff19 	bl	8000628 <__aeabi_dmul>
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	4639      	mov	r1, r7
 800f7fc:	4630      	mov	r0, r6
 800f7fe:	f7f0 fd5b 	bl	80002b8 <__aeabi_dsub>
 800f802:	f7f1 f9c1 	bl	8000b88 <__aeabi_d2iz>
 800f806:	1c65      	adds	r5, r4, #1
 800f808:	ab0e      	add	r3, sp, #56	; 0x38
 800f80a:	f10a 0a18 	add.w	sl, sl, #24
 800f80e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f812:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f816:	e720      	b.n	800f65a <__kernel_rem_pio2+0x2a2>
 800f818:	4630      	mov	r0, r6
 800f81a:	4639      	mov	r1, r7
 800f81c:	f7f1 f9b4 	bl	8000b88 <__aeabi_d2iz>
 800f820:	ab0e      	add	r3, sp, #56	; 0x38
 800f822:	4625      	mov	r5, r4
 800f824:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f828:	e717      	b.n	800f65a <__kernel_rem_pio2+0x2a2>
 800f82a:	ab0e      	add	r3, sp, #56	; 0x38
 800f82c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f830:	f7f0 fe90 	bl	8000554 <__aeabi_i2d>
 800f834:	4632      	mov	r2, r6
 800f836:	463b      	mov	r3, r7
 800f838:	f7f0 fef6 	bl	8000628 <__aeabi_dmul>
 800f83c:	4b84      	ldr	r3, [pc, #528]	; (800fa50 <__kernel_rem_pio2+0x698>)
 800f83e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f842:	2200      	movs	r2, #0
 800f844:	4630      	mov	r0, r6
 800f846:	4639      	mov	r1, r7
 800f848:	f7f0 feee 	bl	8000628 <__aeabi_dmul>
 800f84c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f850:	4606      	mov	r6, r0
 800f852:	460f      	mov	r7, r1
 800f854:	e70f      	b.n	800f676 <__kernel_rem_pio2+0x2be>
 800f856:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f85a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f85e:	f7f0 fee3 	bl	8000628 <__aeabi_dmul>
 800f862:	4602      	mov	r2, r0
 800f864:	460b      	mov	r3, r1
 800f866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f86a:	f7f0 fd27 	bl	80002bc <__adddf3>
 800f86e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f872:	f108 0801 	add.w	r8, r8, #1
 800f876:	9b02      	ldr	r3, [sp, #8]
 800f878:	4598      	cmp	r8, r3
 800f87a:	dc01      	bgt.n	800f880 <__kernel_rem_pio2+0x4c8>
 800f87c:	45b8      	cmp	r8, r7
 800f87e:	ddea      	ble.n	800f856 <__kernel_rem_pio2+0x49e>
 800f880:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f884:	ab4a      	add	r3, sp, #296	; 0x128
 800f886:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f88a:	ed87 7b00 	vstr	d7, [r7]
 800f88e:	3e01      	subs	r6, #1
 800f890:	e6f8      	b.n	800f684 <__kernel_rem_pio2+0x2cc>
 800f892:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f894:	2b02      	cmp	r3, #2
 800f896:	dc0b      	bgt.n	800f8b0 <__kernel_rem_pio2+0x4f8>
 800f898:	2b00      	cmp	r3, #0
 800f89a:	dc35      	bgt.n	800f908 <__kernel_rem_pio2+0x550>
 800f89c:	d059      	beq.n	800f952 <__kernel_rem_pio2+0x59a>
 800f89e:	9b04      	ldr	r3, [sp, #16]
 800f8a0:	f003 0007 	and.w	r0, r3, #7
 800f8a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f8a8:	ecbd 8b02 	vpop	{d8}
 800f8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f8b2:	2b03      	cmp	r3, #3
 800f8b4:	d1f3      	bne.n	800f89e <__kernel_rem_pio2+0x4e6>
 800f8b6:	ab4a      	add	r3, sp, #296	; 0x128
 800f8b8:	4423      	add	r3, r4
 800f8ba:	9306      	str	r3, [sp, #24]
 800f8bc:	461c      	mov	r4, r3
 800f8be:	469a      	mov	sl, r3
 800f8c0:	9502      	str	r5, [sp, #8]
 800f8c2:	9b02      	ldr	r3, [sp, #8]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	f1aa 0a08 	sub.w	sl, sl, #8
 800f8ca:	dc6b      	bgt.n	800f9a4 <__kernel_rem_pio2+0x5ec>
 800f8cc:	46aa      	mov	sl, r5
 800f8ce:	f1ba 0f01 	cmp.w	sl, #1
 800f8d2:	f1a4 0408 	sub.w	r4, r4, #8
 800f8d6:	f300 8085 	bgt.w	800f9e4 <__kernel_rem_pio2+0x62c>
 800f8da:	9c06      	ldr	r4, [sp, #24]
 800f8dc:	2000      	movs	r0, #0
 800f8de:	3408      	adds	r4, #8
 800f8e0:	2100      	movs	r1, #0
 800f8e2:	2d01      	cmp	r5, #1
 800f8e4:	f300 809d 	bgt.w	800fa22 <__kernel_rem_pio2+0x66a>
 800f8e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f8ec:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f8f0:	f1bb 0f00 	cmp.w	fp, #0
 800f8f4:	f040 809b 	bne.w	800fa2e <__kernel_rem_pio2+0x676>
 800f8f8:	9b01      	ldr	r3, [sp, #4]
 800f8fa:	e9c3 5600 	strd	r5, r6, [r3]
 800f8fe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f902:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f906:	e7ca      	b.n	800f89e <__kernel_rem_pio2+0x4e6>
 800f908:	3408      	adds	r4, #8
 800f90a:	ab4a      	add	r3, sp, #296	; 0x128
 800f90c:	441c      	add	r4, r3
 800f90e:	462e      	mov	r6, r5
 800f910:	2000      	movs	r0, #0
 800f912:	2100      	movs	r1, #0
 800f914:	2e00      	cmp	r6, #0
 800f916:	da36      	bge.n	800f986 <__kernel_rem_pio2+0x5ce>
 800f918:	f1bb 0f00 	cmp.w	fp, #0
 800f91c:	d039      	beq.n	800f992 <__kernel_rem_pio2+0x5da>
 800f91e:	4602      	mov	r2, r0
 800f920:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f924:	9c01      	ldr	r4, [sp, #4]
 800f926:	e9c4 2300 	strd	r2, r3, [r4]
 800f92a:	4602      	mov	r2, r0
 800f92c:	460b      	mov	r3, r1
 800f92e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f932:	f7f0 fcc1 	bl	80002b8 <__aeabi_dsub>
 800f936:	ae4c      	add	r6, sp, #304	; 0x130
 800f938:	2401      	movs	r4, #1
 800f93a:	42a5      	cmp	r5, r4
 800f93c:	da2c      	bge.n	800f998 <__kernel_rem_pio2+0x5e0>
 800f93e:	f1bb 0f00 	cmp.w	fp, #0
 800f942:	d002      	beq.n	800f94a <__kernel_rem_pio2+0x592>
 800f944:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f948:	4619      	mov	r1, r3
 800f94a:	9b01      	ldr	r3, [sp, #4]
 800f94c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f950:	e7a5      	b.n	800f89e <__kernel_rem_pio2+0x4e6>
 800f952:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f956:	eb0d 0403 	add.w	r4, sp, r3
 800f95a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f95e:	2000      	movs	r0, #0
 800f960:	2100      	movs	r1, #0
 800f962:	2d00      	cmp	r5, #0
 800f964:	da09      	bge.n	800f97a <__kernel_rem_pio2+0x5c2>
 800f966:	f1bb 0f00 	cmp.w	fp, #0
 800f96a:	d002      	beq.n	800f972 <__kernel_rem_pio2+0x5ba>
 800f96c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f970:	4619      	mov	r1, r3
 800f972:	9b01      	ldr	r3, [sp, #4]
 800f974:	e9c3 0100 	strd	r0, r1, [r3]
 800f978:	e791      	b.n	800f89e <__kernel_rem_pio2+0x4e6>
 800f97a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f97e:	f7f0 fc9d 	bl	80002bc <__adddf3>
 800f982:	3d01      	subs	r5, #1
 800f984:	e7ed      	b.n	800f962 <__kernel_rem_pio2+0x5aa>
 800f986:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f98a:	f7f0 fc97 	bl	80002bc <__adddf3>
 800f98e:	3e01      	subs	r6, #1
 800f990:	e7c0      	b.n	800f914 <__kernel_rem_pio2+0x55c>
 800f992:	4602      	mov	r2, r0
 800f994:	460b      	mov	r3, r1
 800f996:	e7c5      	b.n	800f924 <__kernel_rem_pio2+0x56c>
 800f998:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f99c:	f7f0 fc8e 	bl	80002bc <__adddf3>
 800f9a0:	3401      	adds	r4, #1
 800f9a2:	e7ca      	b.n	800f93a <__kernel_rem_pio2+0x582>
 800f9a4:	e9da 8900 	ldrd	r8, r9, [sl]
 800f9a8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f9ac:	9b02      	ldr	r3, [sp, #8]
 800f9ae:	3b01      	subs	r3, #1
 800f9b0:	9302      	str	r3, [sp, #8]
 800f9b2:	4632      	mov	r2, r6
 800f9b4:	463b      	mov	r3, r7
 800f9b6:	4640      	mov	r0, r8
 800f9b8:	4649      	mov	r1, r9
 800f9ba:	f7f0 fc7f 	bl	80002bc <__adddf3>
 800f9be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	460b      	mov	r3, r1
 800f9c6:	4640      	mov	r0, r8
 800f9c8:	4649      	mov	r1, r9
 800f9ca:	f7f0 fc75 	bl	80002b8 <__aeabi_dsub>
 800f9ce:	4632      	mov	r2, r6
 800f9d0:	463b      	mov	r3, r7
 800f9d2:	f7f0 fc73 	bl	80002bc <__adddf3>
 800f9d6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f9da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f9de:	ed8a 7b00 	vstr	d7, [sl]
 800f9e2:	e76e      	b.n	800f8c2 <__kernel_rem_pio2+0x50a>
 800f9e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f9e8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f9ec:	4640      	mov	r0, r8
 800f9ee:	4632      	mov	r2, r6
 800f9f0:	463b      	mov	r3, r7
 800f9f2:	4649      	mov	r1, r9
 800f9f4:	f7f0 fc62 	bl	80002bc <__adddf3>
 800f9f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	460b      	mov	r3, r1
 800fa00:	4640      	mov	r0, r8
 800fa02:	4649      	mov	r1, r9
 800fa04:	f7f0 fc58 	bl	80002b8 <__aeabi_dsub>
 800fa08:	4632      	mov	r2, r6
 800fa0a:	463b      	mov	r3, r7
 800fa0c:	f7f0 fc56 	bl	80002bc <__adddf3>
 800fa10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fa18:	ed84 7b00 	vstr	d7, [r4]
 800fa1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa20:	e755      	b.n	800f8ce <__kernel_rem_pio2+0x516>
 800fa22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fa26:	f7f0 fc49 	bl	80002bc <__adddf3>
 800fa2a:	3d01      	subs	r5, #1
 800fa2c:	e759      	b.n	800f8e2 <__kernel_rem_pio2+0x52a>
 800fa2e:	9b01      	ldr	r3, [sp, #4]
 800fa30:	9a01      	ldr	r2, [sp, #4]
 800fa32:	601d      	str	r5, [r3, #0]
 800fa34:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800fa38:	605c      	str	r4, [r3, #4]
 800fa3a:	609f      	str	r7, [r3, #8]
 800fa3c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800fa40:	60d3      	str	r3, [r2, #12]
 800fa42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa46:	6110      	str	r0, [r2, #16]
 800fa48:	6153      	str	r3, [r2, #20]
 800fa4a:	e728      	b.n	800f89e <__kernel_rem_pio2+0x4e6>
 800fa4c:	41700000 	.word	0x41700000
 800fa50:	3e700000 	.word	0x3e700000
 800fa54:	00000000 	.word	0x00000000

0800fa58 <__kernel_sin>:
 800fa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa5c:	ed2d 8b04 	vpush	{d8-d9}
 800fa60:	eeb0 8a41 	vmov.f32	s16, s2
 800fa64:	eef0 8a61 	vmov.f32	s17, s3
 800fa68:	ec55 4b10 	vmov	r4, r5, d0
 800fa6c:	b083      	sub	sp, #12
 800fa6e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fa72:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fa76:	9001      	str	r0, [sp, #4]
 800fa78:	da06      	bge.n	800fa88 <__kernel_sin+0x30>
 800fa7a:	ee10 0a10 	vmov	r0, s0
 800fa7e:	4629      	mov	r1, r5
 800fa80:	f7f1 f882 	bl	8000b88 <__aeabi_d2iz>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d051      	beq.n	800fb2c <__kernel_sin+0xd4>
 800fa88:	4622      	mov	r2, r4
 800fa8a:	462b      	mov	r3, r5
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	4629      	mov	r1, r5
 800fa90:	f7f0 fdca 	bl	8000628 <__aeabi_dmul>
 800fa94:	4682      	mov	sl, r0
 800fa96:	468b      	mov	fp, r1
 800fa98:	4602      	mov	r2, r0
 800fa9a:	460b      	mov	r3, r1
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	4629      	mov	r1, r5
 800faa0:	f7f0 fdc2 	bl	8000628 <__aeabi_dmul>
 800faa4:	a341      	add	r3, pc, #260	; (adr r3, 800fbac <__kernel_sin+0x154>)
 800faa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faaa:	4680      	mov	r8, r0
 800faac:	4689      	mov	r9, r1
 800faae:	4650      	mov	r0, sl
 800fab0:	4659      	mov	r1, fp
 800fab2:	f7f0 fdb9 	bl	8000628 <__aeabi_dmul>
 800fab6:	a33f      	add	r3, pc, #252	; (adr r3, 800fbb4 <__kernel_sin+0x15c>)
 800fab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabc:	f7f0 fbfc 	bl	80002b8 <__aeabi_dsub>
 800fac0:	4652      	mov	r2, sl
 800fac2:	465b      	mov	r3, fp
 800fac4:	f7f0 fdb0 	bl	8000628 <__aeabi_dmul>
 800fac8:	a33c      	add	r3, pc, #240	; (adr r3, 800fbbc <__kernel_sin+0x164>)
 800faca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800face:	f7f0 fbf5 	bl	80002bc <__adddf3>
 800fad2:	4652      	mov	r2, sl
 800fad4:	465b      	mov	r3, fp
 800fad6:	f7f0 fda7 	bl	8000628 <__aeabi_dmul>
 800fada:	a33a      	add	r3, pc, #232	; (adr r3, 800fbc4 <__kernel_sin+0x16c>)
 800fadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae0:	f7f0 fbea 	bl	80002b8 <__aeabi_dsub>
 800fae4:	4652      	mov	r2, sl
 800fae6:	465b      	mov	r3, fp
 800fae8:	f7f0 fd9e 	bl	8000628 <__aeabi_dmul>
 800faec:	a337      	add	r3, pc, #220	; (adr r3, 800fbcc <__kernel_sin+0x174>)
 800faee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf2:	f7f0 fbe3 	bl	80002bc <__adddf3>
 800faf6:	9b01      	ldr	r3, [sp, #4]
 800faf8:	4606      	mov	r6, r0
 800fafa:	460f      	mov	r7, r1
 800fafc:	b9eb      	cbnz	r3, 800fb3a <__kernel_sin+0xe2>
 800fafe:	4602      	mov	r2, r0
 800fb00:	460b      	mov	r3, r1
 800fb02:	4650      	mov	r0, sl
 800fb04:	4659      	mov	r1, fp
 800fb06:	f7f0 fd8f 	bl	8000628 <__aeabi_dmul>
 800fb0a:	a325      	add	r3, pc, #148	; (adr r3, 800fba0 <__kernel_sin+0x148>)
 800fb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb10:	f7f0 fbd2 	bl	80002b8 <__aeabi_dsub>
 800fb14:	4642      	mov	r2, r8
 800fb16:	464b      	mov	r3, r9
 800fb18:	f7f0 fd86 	bl	8000628 <__aeabi_dmul>
 800fb1c:	4602      	mov	r2, r0
 800fb1e:	460b      	mov	r3, r1
 800fb20:	4620      	mov	r0, r4
 800fb22:	4629      	mov	r1, r5
 800fb24:	f7f0 fbca 	bl	80002bc <__adddf3>
 800fb28:	4604      	mov	r4, r0
 800fb2a:	460d      	mov	r5, r1
 800fb2c:	ec45 4b10 	vmov	d0, r4, r5
 800fb30:	b003      	add	sp, #12
 800fb32:	ecbd 8b04 	vpop	{d8-d9}
 800fb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb3a:	4b1b      	ldr	r3, [pc, #108]	; (800fba8 <__kernel_sin+0x150>)
 800fb3c:	ec51 0b18 	vmov	r0, r1, d8
 800fb40:	2200      	movs	r2, #0
 800fb42:	f7f0 fd71 	bl	8000628 <__aeabi_dmul>
 800fb46:	4632      	mov	r2, r6
 800fb48:	ec41 0b19 	vmov	d9, r0, r1
 800fb4c:	463b      	mov	r3, r7
 800fb4e:	4640      	mov	r0, r8
 800fb50:	4649      	mov	r1, r9
 800fb52:	f7f0 fd69 	bl	8000628 <__aeabi_dmul>
 800fb56:	4602      	mov	r2, r0
 800fb58:	460b      	mov	r3, r1
 800fb5a:	ec51 0b19 	vmov	r0, r1, d9
 800fb5e:	f7f0 fbab 	bl	80002b8 <__aeabi_dsub>
 800fb62:	4652      	mov	r2, sl
 800fb64:	465b      	mov	r3, fp
 800fb66:	f7f0 fd5f 	bl	8000628 <__aeabi_dmul>
 800fb6a:	ec53 2b18 	vmov	r2, r3, d8
 800fb6e:	f7f0 fba3 	bl	80002b8 <__aeabi_dsub>
 800fb72:	a30b      	add	r3, pc, #44	; (adr r3, 800fba0 <__kernel_sin+0x148>)
 800fb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb78:	4606      	mov	r6, r0
 800fb7a:	460f      	mov	r7, r1
 800fb7c:	4640      	mov	r0, r8
 800fb7e:	4649      	mov	r1, r9
 800fb80:	f7f0 fd52 	bl	8000628 <__aeabi_dmul>
 800fb84:	4602      	mov	r2, r0
 800fb86:	460b      	mov	r3, r1
 800fb88:	4630      	mov	r0, r6
 800fb8a:	4639      	mov	r1, r7
 800fb8c:	f7f0 fb96 	bl	80002bc <__adddf3>
 800fb90:	4602      	mov	r2, r0
 800fb92:	460b      	mov	r3, r1
 800fb94:	4620      	mov	r0, r4
 800fb96:	4629      	mov	r1, r5
 800fb98:	f7f0 fb8e 	bl	80002b8 <__aeabi_dsub>
 800fb9c:	e7c4      	b.n	800fb28 <__kernel_sin+0xd0>
 800fb9e:	bf00      	nop
 800fba0:	55555549 	.word	0x55555549
 800fba4:	3fc55555 	.word	0x3fc55555
 800fba8:	3fe00000 	.word	0x3fe00000
 800fbac:	5acfd57c 	.word	0x5acfd57c
 800fbb0:	3de5d93a 	.word	0x3de5d93a
 800fbb4:	8a2b9ceb 	.word	0x8a2b9ceb
 800fbb8:	3e5ae5e6 	.word	0x3e5ae5e6
 800fbbc:	57b1fe7d 	.word	0x57b1fe7d
 800fbc0:	3ec71de3 	.word	0x3ec71de3
 800fbc4:	19c161d5 	.word	0x19c161d5
 800fbc8:	3f2a01a0 	.word	0x3f2a01a0
 800fbcc:	1110f8a6 	.word	0x1110f8a6
 800fbd0:	3f811111 	.word	0x3f811111

0800fbd4 <with_errno>:
 800fbd4:	b570      	push	{r4, r5, r6, lr}
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	460d      	mov	r5, r1
 800fbda:	4616      	mov	r6, r2
 800fbdc:	f7f9 f840 	bl	8008c60 <__errno>
 800fbe0:	4629      	mov	r1, r5
 800fbe2:	6006      	str	r6, [r0, #0]
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	bd70      	pop	{r4, r5, r6, pc}

0800fbe8 <xflow>:
 800fbe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbea:	4614      	mov	r4, r2
 800fbec:	461d      	mov	r5, r3
 800fbee:	b108      	cbz	r0, 800fbf4 <xflow+0xc>
 800fbf0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fbf4:	e9cd 2300 	strd	r2, r3, [sp]
 800fbf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	4629      	mov	r1, r5
 800fc00:	f7f0 fd12 	bl	8000628 <__aeabi_dmul>
 800fc04:	2222      	movs	r2, #34	; 0x22
 800fc06:	b003      	add	sp, #12
 800fc08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc0c:	f7ff bfe2 	b.w	800fbd4 <with_errno>

0800fc10 <__math_uflow>:
 800fc10:	b508      	push	{r3, lr}
 800fc12:	2200      	movs	r2, #0
 800fc14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fc18:	f7ff ffe6 	bl	800fbe8 <xflow>
 800fc1c:	ec41 0b10 	vmov	d0, r0, r1
 800fc20:	bd08      	pop	{r3, pc}

0800fc22 <__math_oflow>:
 800fc22:	b508      	push	{r3, lr}
 800fc24:	2200      	movs	r2, #0
 800fc26:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800fc2a:	f7ff ffdd 	bl	800fbe8 <xflow>
 800fc2e:	ec41 0b10 	vmov	d0, r0, r1
 800fc32:	bd08      	pop	{r3, pc}
 800fc34:	0000      	movs	r0, r0
	...

0800fc38 <atan>:
 800fc38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc3c:	ec55 4b10 	vmov	r4, r5, d0
 800fc40:	4bc3      	ldr	r3, [pc, #780]	; (800ff50 <atan+0x318>)
 800fc42:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fc46:	429e      	cmp	r6, r3
 800fc48:	46ab      	mov	fp, r5
 800fc4a:	dd18      	ble.n	800fc7e <atan+0x46>
 800fc4c:	4bc1      	ldr	r3, [pc, #772]	; (800ff54 <atan+0x31c>)
 800fc4e:	429e      	cmp	r6, r3
 800fc50:	dc01      	bgt.n	800fc56 <atan+0x1e>
 800fc52:	d109      	bne.n	800fc68 <atan+0x30>
 800fc54:	b144      	cbz	r4, 800fc68 <atan+0x30>
 800fc56:	4622      	mov	r2, r4
 800fc58:	462b      	mov	r3, r5
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	4629      	mov	r1, r5
 800fc5e:	f7f0 fb2d 	bl	80002bc <__adddf3>
 800fc62:	4604      	mov	r4, r0
 800fc64:	460d      	mov	r5, r1
 800fc66:	e006      	b.n	800fc76 <atan+0x3e>
 800fc68:	f1bb 0f00 	cmp.w	fp, #0
 800fc6c:	f300 8131 	bgt.w	800fed2 <atan+0x29a>
 800fc70:	a59b      	add	r5, pc, #620	; (adr r5, 800fee0 <atan+0x2a8>)
 800fc72:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fc76:	ec45 4b10 	vmov	d0, r4, r5
 800fc7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc7e:	4bb6      	ldr	r3, [pc, #728]	; (800ff58 <atan+0x320>)
 800fc80:	429e      	cmp	r6, r3
 800fc82:	dc14      	bgt.n	800fcae <atan+0x76>
 800fc84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fc88:	429e      	cmp	r6, r3
 800fc8a:	dc0d      	bgt.n	800fca8 <atan+0x70>
 800fc8c:	a396      	add	r3, pc, #600	; (adr r3, 800fee8 <atan+0x2b0>)
 800fc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc92:	ee10 0a10 	vmov	r0, s0
 800fc96:	4629      	mov	r1, r5
 800fc98:	f7f0 fb10 	bl	80002bc <__adddf3>
 800fc9c:	4baf      	ldr	r3, [pc, #700]	; (800ff5c <atan+0x324>)
 800fc9e:	2200      	movs	r2, #0
 800fca0:	f7f0 ff52 	bl	8000b48 <__aeabi_dcmpgt>
 800fca4:	2800      	cmp	r0, #0
 800fca6:	d1e6      	bne.n	800fc76 <atan+0x3e>
 800fca8:	f04f 3aff 	mov.w	sl, #4294967295
 800fcac:	e02b      	b.n	800fd06 <atan+0xce>
 800fcae:	f000 f963 	bl	800ff78 <fabs>
 800fcb2:	4bab      	ldr	r3, [pc, #684]	; (800ff60 <atan+0x328>)
 800fcb4:	429e      	cmp	r6, r3
 800fcb6:	ec55 4b10 	vmov	r4, r5, d0
 800fcba:	f300 80bf 	bgt.w	800fe3c <atan+0x204>
 800fcbe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fcc2:	429e      	cmp	r6, r3
 800fcc4:	f300 80a0 	bgt.w	800fe08 <atan+0x1d0>
 800fcc8:	ee10 2a10 	vmov	r2, s0
 800fccc:	ee10 0a10 	vmov	r0, s0
 800fcd0:	462b      	mov	r3, r5
 800fcd2:	4629      	mov	r1, r5
 800fcd4:	f7f0 faf2 	bl	80002bc <__adddf3>
 800fcd8:	4ba0      	ldr	r3, [pc, #640]	; (800ff5c <atan+0x324>)
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f7f0 faec 	bl	80002b8 <__aeabi_dsub>
 800fce0:	2200      	movs	r2, #0
 800fce2:	4606      	mov	r6, r0
 800fce4:	460f      	mov	r7, r1
 800fce6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fcea:	4620      	mov	r0, r4
 800fcec:	4629      	mov	r1, r5
 800fcee:	f7f0 fae5 	bl	80002bc <__adddf3>
 800fcf2:	4602      	mov	r2, r0
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	4630      	mov	r0, r6
 800fcf8:	4639      	mov	r1, r7
 800fcfa:	f7f0 fdbf 	bl	800087c <__aeabi_ddiv>
 800fcfe:	f04f 0a00 	mov.w	sl, #0
 800fd02:	4604      	mov	r4, r0
 800fd04:	460d      	mov	r5, r1
 800fd06:	4622      	mov	r2, r4
 800fd08:	462b      	mov	r3, r5
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	4629      	mov	r1, r5
 800fd0e:	f7f0 fc8b 	bl	8000628 <__aeabi_dmul>
 800fd12:	4602      	mov	r2, r0
 800fd14:	460b      	mov	r3, r1
 800fd16:	4680      	mov	r8, r0
 800fd18:	4689      	mov	r9, r1
 800fd1a:	f7f0 fc85 	bl	8000628 <__aeabi_dmul>
 800fd1e:	a374      	add	r3, pc, #464	; (adr r3, 800fef0 <atan+0x2b8>)
 800fd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd24:	4606      	mov	r6, r0
 800fd26:	460f      	mov	r7, r1
 800fd28:	f7f0 fc7e 	bl	8000628 <__aeabi_dmul>
 800fd2c:	a372      	add	r3, pc, #456	; (adr r3, 800fef8 <atan+0x2c0>)
 800fd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd32:	f7f0 fac3 	bl	80002bc <__adddf3>
 800fd36:	4632      	mov	r2, r6
 800fd38:	463b      	mov	r3, r7
 800fd3a:	f7f0 fc75 	bl	8000628 <__aeabi_dmul>
 800fd3e:	a370      	add	r3, pc, #448	; (adr r3, 800ff00 <atan+0x2c8>)
 800fd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd44:	f7f0 faba 	bl	80002bc <__adddf3>
 800fd48:	4632      	mov	r2, r6
 800fd4a:	463b      	mov	r3, r7
 800fd4c:	f7f0 fc6c 	bl	8000628 <__aeabi_dmul>
 800fd50:	a36d      	add	r3, pc, #436	; (adr r3, 800ff08 <atan+0x2d0>)
 800fd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd56:	f7f0 fab1 	bl	80002bc <__adddf3>
 800fd5a:	4632      	mov	r2, r6
 800fd5c:	463b      	mov	r3, r7
 800fd5e:	f7f0 fc63 	bl	8000628 <__aeabi_dmul>
 800fd62:	a36b      	add	r3, pc, #428	; (adr r3, 800ff10 <atan+0x2d8>)
 800fd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd68:	f7f0 faa8 	bl	80002bc <__adddf3>
 800fd6c:	4632      	mov	r2, r6
 800fd6e:	463b      	mov	r3, r7
 800fd70:	f7f0 fc5a 	bl	8000628 <__aeabi_dmul>
 800fd74:	a368      	add	r3, pc, #416	; (adr r3, 800ff18 <atan+0x2e0>)
 800fd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7a:	f7f0 fa9f 	bl	80002bc <__adddf3>
 800fd7e:	4642      	mov	r2, r8
 800fd80:	464b      	mov	r3, r9
 800fd82:	f7f0 fc51 	bl	8000628 <__aeabi_dmul>
 800fd86:	a366      	add	r3, pc, #408	; (adr r3, 800ff20 <atan+0x2e8>)
 800fd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8c:	4680      	mov	r8, r0
 800fd8e:	4689      	mov	r9, r1
 800fd90:	4630      	mov	r0, r6
 800fd92:	4639      	mov	r1, r7
 800fd94:	f7f0 fc48 	bl	8000628 <__aeabi_dmul>
 800fd98:	a363      	add	r3, pc, #396	; (adr r3, 800ff28 <atan+0x2f0>)
 800fd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd9e:	f7f0 fa8b 	bl	80002b8 <__aeabi_dsub>
 800fda2:	4632      	mov	r2, r6
 800fda4:	463b      	mov	r3, r7
 800fda6:	f7f0 fc3f 	bl	8000628 <__aeabi_dmul>
 800fdaa:	a361      	add	r3, pc, #388	; (adr r3, 800ff30 <atan+0x2f8>)
 800fdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb0:	f7f0 fa82 	bl	80002b8 <__aeabi_dsub>
 800fdb4:	4632      	mov	r2, r6
 800fdb6:	463b      	mov	r3, r7
 800fdb8:	f7f0 fc36 	bl	8000628 <__aeabi_dmul>
 800fdbc:	a35e      	add	r3, pc, #376	; (adr r3, 800ff38 <atan+0x300>)
 800fdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc2:	f7f0 fa79 	bl	80002b8 <__aeabi_dsub>
 800fdc6:	4632      	mov	r2, r6
 800fdc8:	463b      	mov	r3, r7
 800fdca:	f7f0 fc2d 	bl	8000628 <__aeabi_dmul>
 800fdce:	a35c      	add	r3, pc, #368	; (adr r3, 800ff40 <atan+0x308>)
 800fdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd4:	f7f0 fa70 	bl	80002b8 <__aeabi_dsub>
 800fdd8:	4632      	mov	r2, r6
 800fdda:	463b      	mov	r3, r7
 800fddc:	f7f0 fc24 	bl	8000628 <__aeabi_dmul>
 800fde0:	4602      	mov	r2, r0
 800fde2:	460b      	mov	r3, r1
 800fde4:	4640      	mov	r0, r8
 800fde6:	4649      	mov	r1, r9
 800fde8:	f7f0 fa68 	bl	80002bc <__adddf3>
 800fdec:	4622      	mov	r2, r4
 800fdee:	462b      	mov	r3, r5
 800fdf0:	f7f0 fc1a 	bl	8000628 <__aeabi_dmul>
 800fdf4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fdf8:	4602      	mov	r2, r0
 800fdfa:	460b      	mov	r3, r1
 800fdfc:	d14b      	bne.n	800fe96 <atan+0x25e>
 800fdfe:	4620      	mov	r0, r4
 800fe00:	4629      	mov	r1, r5
 800fe02:	f7f0 fa59 	bl	80002b8 <__aeabi_dsub>
 800fe06:	e72c      	b.n	800fc62 <atan+0x2a>
 800fe08:	ee10 0a10 	vmov	r0, s0
 800fe0c:	4b53      	ldr	r3, [pc, #332]	; (800ff5c <atan+0x324>)
 800fe0e:	2200      	movs	r2, #0
 800fe10:	4629      	mov	r1, r5
 800fe12:	f7f0 fa51 	bl	80002b8 <__aeabi_dsub>
 800fe16:	4b51      	ldr	r3, [pc, #324]	; (800ff5c <atan+0x324>)
 800fe18:	4606      	mov	r6, r0
 800fe1a:	460f      	mov	r7, r1
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	4620      	mov	r0, r4
 800fe20:	4629      	mov	r1, r5
 800fe22:	f7f0 fa4b 	bl	80002bc <__adddf3>
 800fe26:	4602      	mov	r2, r0
 800fe28:	460b      	mov	r3, r1
 800fe2a:	4630      	mov	r0, r6
 800fe2c:	4639      	mov	r1, r7
 800fe2e:	f7f0 fd25 	bl	800087c <__aeabi_ddiv>
 800fe32:	f04f 0a01 	mov.w	sl, #1
 800fe36:	4604      	mov	r4, r0
 800fe38:	460d      	mov	r5, r1
 800fe3a:	e764      	b.n	800fd06 <atan+0xce>
 800fe3c:	4b49      	ldr	r3, [pc, #292]	; (800ff64 <atan+0x32c>)
 800fe3e:	429e      	cmp	r6, r3
 800fe40:	da1d      	bge.n	800fe7e <atan+0x246>
 800fe42:	ee10 0a10 	vmov	r0, s0
 800fe46:	4b48      	ldr	r3, [pc, #288]	; (800ff68 <atan+0x330>)
 800fe48:	2200      	movs	r2, #0
 800fe4a:	4629      	mov	r1, r5
 800fe4c:	f7f0 fa34 	bl	80002b8 <__aeabi_dsub>
 800fe50:	4b45      	ldr	r3, [pc, #276]	; (800ff68 <atan+0x330>)
 800fe52:	4606      	mov	r6, r0
 800fe54:	460f      	mov	r7, r1
 800fe56:	2200      	movs	r2, #0
 800fe58:	4620      	mov	r0, r4
 800fe5a:	4629      	mov	r1, r5
 800fe5c:	f7f0 fbe4 	bl	8000628 <__aeabi_dmul>
 800fe60:	4b3e      	ldr	r3, [pc, #248]	; (800ff5c <atan+0x324>)
 800fe62:	2200      	movs	r2, #0
 800fe64:	f7f0 fa2a 	bl	80002bc <__adddf3>
 800fe68:	4602      	mov	r2, r0
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	4630      	mov	r0, r6
 800fe6e:	4639      	mov	r1, r7
 800fe70:	f7f0 fd04 	bl	800087c <__aeabi_ddiv>
 800fe74:	f04f 0a02 	mov.w	sl, #2
 800fe78:	4604      	mov	r4, r0
 800fe7a:	460d      	mov	r5, r1
 800fe7c:	e743      	b.n	800fd06 <atan+0xce>
 800fe7e:	462b      	mov	r3, r5
 800fe80:	ee10 2a10 	vmov	r2, s0
 800fe84:	4939      	ldr	r1, [pc, #228]	; (800ff6c <atan+0x334>)
 800fe86:	2000      	movs	r0, #0
 800fe88:	f7f0 fcf8 	bl	800087c <__aeabi_ddiv>
 800fe8c:	f04f 0a03 	mov.w	sl, #3
 800fe90:	4604      	mov	r4, r0
 800fe92:	460d      	mov	r5, r1
 800fe94:	e737      	b.n	800fd06 <atan+0xce>
 800fe96:	4b36      	ldr	r3, [pc, #216]	; (800ff70 <atan+0x338>)
 800fe98:	4e36      	ldr	r6, [pc, #216]	; (800ff74 <atan+0x33c>)
 800fe9a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fe9e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800fea2:	e9da 2300 	ldrd	r2, r3, [sl]
 800fea6:	f7f0 fa07 	bl	80002b8 <__aeabi_dsub>
 800feaa:	4622      	mov	r2, r4
 800feac:	462b      	mov	r3, r5
 800feae:	f7f0 fa03 	bl	80002b8 <__aeabi_dsub>
 800feb2:	4602      	mov	r2, r0
 800feb4:	460b      	mov	r3, r1
 800feb6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800feba:	f7f0 f9fd 	bl	80002b8 <__aeabi_dsub>
 800febe:	f1bb 0f00 	cmp.w	fp, #0
 800fec2:	4604      	mov	r4, r0
 800fec4:	460d      	mov	r5, r1
 800fec6:	f6bf aed6 	bge.w	800fc76 <atan+0x3e>
 800feca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fece:	461d      	mov	r5, r3
 800fed0:	e6d1      	b.n	800fc76 <atan+0x3e>
 800fed2:	a51d      	add	r5, pc, #116	; (adr r5, 800ff48 <atan+0x310>)
 800fed4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fed8:	e6cd      	b.n	800fc76 <atan+0x3e>
 800feda:	bf00      	nop
 800fedc:	f3af 8000 	nop.w
 800fee0:	54442d18 	.word	0x54442d18
 800fee4:	bff921fb 	.word	0xbff921fb
 800fee8:	8800759c 	.word	0x8800759c
 800feec:	7e37e43c 	.word	0x7e37e43c
 800fef0:	e322da11 	.word	0xe322da11
 800fef4:	3f90ad3a 	.word	0x3f90ad3a
 800fef8:	24760deb 	.word	0x24760deb
 800fefc:	3fa97b4b 	.word	0x3fa97b4b
 800ff00:	a0d03d51 	.word	0xa0d03d51
 800ff04:	3fb10d66 	.word	0x3fb10d66
 800ff08:	c54c206e 	.word	0xc54c206e
 800ff0c:	3fb745cd 	.word	0x3fb745cd
 800ff10:	920083ff 	.word	0x920083ff
 800ff14:	3fc24924 	.word	0x3fc24924
 800ff18:	5555550d 	.word	0x5555550d
 800ff1c:	3fd55555 	.word	0x3fd55555
 800ff20:	2c6a6c2f 	.word	0x2c6a6c2f
 800ff24:	bfa2b444 	.word	0xbfa2b444
 800ff28:	52defd9a 	.word	0x52defd9a
 800ff2c:	3fadde2d 	.word	0x3fadde2d
 800ff30:	af749a6d 	.word	0xaf749a6d
 800ff34:	3fb3b0f2 	.word	0x3fb3b0f2
 800ff38:	fe231671 	.word	0xfe231671
 800ff3c:	3fbc71c6 	.word	0x3fbc71c6
 800ff40:	9998ebc4 	.word	0x9998ebc4
 800ff44:	3fc99999 	.word	0x3fc99999
 800ff48:	54442d18 	.word	0x54442d18
 800ff4c:	3ff921fb 	.word	0x3ff921fb
 800ff50:	440fffff 	.word	0x440fffff
 800ff54:	7ff00000 	.word	0x7ff00000
 800ff58:	3fdbffff 	.word	0x3fdbffff
 800ff5c:	3ff00000 	.word	0x3ff00000
 800ff60:	3ff2ffff 	.word	0x3ff2ffff
 800ff64:	40038000 	.word	0x40038000
 800ff68:	3ff80000 	.word	0x3ff80000
 800ff6c:	bff00000 	.word	0xbff00000
 800ff70:	080109f8 	.word	0x080109f8
 800ff74:	080109d8 	.word	0x080109d8

0800ff78 <fabs>:
 800ff78:	ec51 0b10 	vmov	r0, r1, d0
 800ff7c:	ee10 2a10 	vmov	r2, s0
 800ff80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff84:	ec43 2b10 	vmov	d0, r2, r3
 800ff88:	4770      	bx	lr

0800ff8a <finite>:
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	ed8d 0b00 	vstr	d0, [sp]
 800ff90:	9801      	ldr	r0, [sp, #4]
 800ff92:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ff96:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ff9a:	0fc0      	lsrs	r0, r0, #31
 800ff9c:	b002      	add	sp, #8
 800ff9e:	4770      	bx	lr

0800ffa0 <floor>:
 800ffa0:	ec51 0b10 	vmov	r0, r1, d0
 800ffa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ffac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ffb0:	2e13      	cmp	r6, #19
 800ffb2:	ee10 5a10 	vmov	r5, s0
 800ffb6:	ee10 8a10 	vmov	r8, s0
 800ffba:	460c      	mov	r4, r1
 800ffbc:	dc32      	bgt.n	8010024 <floor+0x84>
 800ffbe:	2e00      	cmp	r6, #0
 800ffc0:	da14      	bge.n	800ffec <floor+0x4c>
 800ffc2:	a333      	add	r3, pc, #204	; (adr r3, 8010090 <floor+0xf0>)
 800ffc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc8:	f7f0 f978 	bl	80002bc <__adddf3>
 800ffcc:	2200      	movs	r2, #0
 800ffce:	2300      	movs	r3, #0
 800ffd0:	f7f0 fdba 	bl	8000b48 <__aeabi_dcmpgt>
 800ffd4:	b138      	cbz	r0, 800ffe6 <floor+0x46>
 800ffd6:	2c00      	cmp	r4, #0
 800ffd8:	da57      	bge.n	801008a <floor+0xea>
 800ffda:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ffde:	431d      	orrs	r5, r3
 800ffe0:	d001      	beq.n	800ffe6 <floor+0x46>
 800ffe2:	4c2d      	ldr	r4, [pc, #180]	; (8010098 <floor+0xf8>)
 800ffe4:	2500      	movs	r5, #0
 800ffe6:	4621      	mov	r1, r4
 800ffe8:	4628      	mov	r0, r5
 800ffea:	e025      	b.n	8010038 <floor+0x98>
 800ffec:	4f2b      	ldr	r7, [pc, #172]	; (801009c <floor+0xfc>)
 800ffee:	4137      	asrs	r7, r6
 800fff0:	ea01 0307 	and.w	r3, r1, r7
 800fff4:	4303      	orrs	r3, r0
 800fff6:	d01f      	beq.n	8010038 <floor+0x98>
 800fff8:	a325      	add	r3, pc, #148	; (adr r3, 8010090 <floor+0xf0>)
 800fffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffe:	f7f0 f95d 	bl	80002bc <__adddf3>
 8010002:	2200      	movs	r2, #0
 8010004:	2300      	movs	r3, #0
 8010006:	f7f0 fd9f 	bl	8000b48 <__aeabi_dcmpgt>
 801000a:	2800      	cmp	r0, #0
 801000c:	d0eb      	beq.n	800ffe6 <floor+0x46>
 801000e:	2c00      	cmp	r4, #0
 8010010:	bfbe      	ittt	lt
 8010012:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010016:	fa43 f606 	asrlt.w	r6, r3, r6
 801001a:	19a4      	addlt	r4, r4, r6
 801001c:	ea24 0407 	bic.w	r4, r4, r7
 8010020:	2500      	movs	r5, #0
 8010022:	e7e0      	b.n	800ffe6 <floor+0x46>
 8010024:	2e33      	cmp	r6, #51	; 0x33
 8010026:	dd0b      	ble.n	8010040 <floor+0xa0>
 8010028:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801002c:	d104      	bne.n	8010038 <floor+0x98>
 801002e:	ee10 2a10 	vmov	r2, s0
 8010032:	460b      	mov	r3, r1
 8010034:	f7f0 f942 	bl	80002bc <__adddf3>
 8010038:	ec41 0b10 	vmov	d0, r0, r1
 801003c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010040:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010044:	f04f 33ff 	mov.w	r3, #4294967295
 8010048:	fa23 f707 	lsr.w	r7, r3, r7
 801004c:	4207      	tst	r7, r0
 801004e:	d0f3      	beq.n	8010038 <floor+0x98>
 8010050:	a30f      	add	r3, pc, #60	; (adr r3, 8010090 <floor+0xf0>)
 8010052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010056:	f7f0 f931 	bl	80002bc <__adddf3>
 801005a:	2200      	movs	r2, #0
 801005c:	2300      	movs	r3, #0
 801005e:	f7f0 fd73 	bl	8000b48 <__aeabi_dcmpgt>
 8010062:	2800      	cmp	r0, #0
 8010064:	d0bf      	beq.n	800ffe6 <floor+0x46>
 8010066:	2c00      	cmp	r4, #0
 8010068:	da02      	bge.n	8010070 <floor+0xd0>
 801006a:	2e14      	cmp	r6, #20
 801006c:	d103      	bne.n	8010076 <floor+0xd6>
 801006e:	3401      	adds	r4, #1
 8010070:	ea25 0507 	bic.w	r5, r5, r7
 8010074:	e7b7      	b.n	800ffe6 <floor+0x46>
 8010076:	2301      	movs	r3, #1
 8010078:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801007c:	fa03 f606 	lsl.w	r6, r3, r6
 8010080:	4435      	add	r5, r6
 8010082:	4545      	cmp	r5, r8
 8010084:	bf38      	it	cc
 8010086:	18e4      	addcc	r4, r4, r3
 8010088:	e7f2      	b.n	8010070 <floor+0xd0>
 801008a:	2500      	movs	r5, #0
 801008c:	462c      	mov	r4, r5
 801008e:	e7aa      	b.n	800ffe6 <floor+0x46>
 8010090:	8800759c 	.word	0x8800759c
 8010094:	7e37e43c 	.word	0x7e37e43c
 8010098:	bff00000 	.word	0xbff00000
 801009c:	000fffff 	.word	0x000fffff

080100a0 <scalbn>:
 80100a0:	b570      	push	{r4, r5, r6, lr}
 80100a2:	ec55 4b10 	vmov	r4, r5, d0
 80100a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80100aa:	4606      	mov	r6, r0
 80100ac:	462b      	mov	r3, r5
 80100ae:	b99a      	cbnz	r2, 80100d8 <scalbn+0x38>
 80100b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80100b4:	4323      	orrs	r3, r4
 80100b6:	d036      	beq.n	8010126 <scalbn+0x86>
 80100b8:	4b39      	ldr	r3, [pc, #228]	; (80101a0 <scalbn+0x100>)
 80100ba:	4629      	mov	r1, r5
 80100bc:	ee10 0a10 	vmov	r0, s0
 80100c0:	2200      	movs	r2, #0
 80100c2:	f7f0 fab1 	bl	8000628 <__aeabi_dmul>
 80100c6:	4b37      	ldr	r3, [pc, #220]	; (80101a4 <scalbn+0x104>)
 80100c8:	429e      	cmp	r6, r3
 80100ca:	4604      	mov	r4, r0
 80100cc:	460d      	mov	r5, r1
 80100ce:	da10      	bge.n	80100f2 <scalbn+0x52>
 80100d0:	a32b      	add	r3, pc, #172	; (adr r3, 8010180 <scalbn+0xe0>)
 80100d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d6:	e03a      	b.n	801014e <scalbn+0xae>
 80100d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80100dc:	428a      	cmp	r2, r1
 80100de:	d10c      	bne.n	80100fa <scalbn+0x5a>
 80100e0:	ee10 2a10 	vmov	r2, s0
 80100e4:	4620      	mov	r0, r4
 80100e6:	4629      	mov	r1, r5
 80100e8:	f7f0 f8e8 	bl	80002bc <__adddf3>
 80100ec:	4604      	mov	r4, r0
 80100ee:	460d      	mov	r5, r1
 80100f0:	e019      	b.n	8010126 <scalbn+0x86>
 80100f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80100f6:	460b      	mov	r3, r1
 80100f8:	3a36      	subs	r2, #54	; 0x36
 80100fa:	4432      	add	r2, r6
 80100fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010100:	428a      	cmp	r2, r1
 8010102:	dd08      	ble.n	8010116 <scalbn+0x76>
 8010104:	2d00      	cmp	r5, #0
 8010106:	a120      	add	r1, pc, #128	; (adr r1, 8010188 <scalbn+0xe8>)
 8010108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801010c:	da1c      	bge.n	8010148 <scalbn+0xa8>
 801010e:	a120      	add	r1, pc, #128	; (adr r1, 8010190 <scalbn+0xf0>)
 8010110:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010114:	e018      	b.n	8010148 <scalbn+0xa8>
 8010116:	2a00      	cmp	r2, #0
 8010118:	dd08      	ble.n	801012c <scalbn+0x8c>
 801011a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801011e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010122:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010126:	ec45 4b10 	vmov	d0, r4, r5
 801012a:	bd70      	pop	{r4, r5, r6, pc}
 801012c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010130:	da19      	bge.n	8010166 <scalbn+0xc6>
 8010132:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010136:	429e      	cmp	r6, r3
 8010138:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801013c:	dd0a      	ble.n	8010154 <scalbn+0xb4>
 801013e:	a112      	add	r1, pc, #72	; (adr r1, 8010188 <scalbn+0xe8>)
 8010140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d1e2      	bne.n	801010e <scalbn+0x6e>
 8010148:	a30f      	add	r3, pc, #60	; (adr r3, 8010188 <scalbn+0xe8>)
 801014a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014e:	f7f0 fa6b 	bl	8000628 <__aeabi_dmul>
 8010152:	e7cb      	b.n	80100ec <scalbn+0x4c>
 8010154:	a10a      	add	r1, pc, #40	; (adr r1, 8010180 <scalbn+0xe0>)
 8010156:	e9d1 0100 	ldrd	r0, r1, [r1]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d0b8      	beq.n	80100d0 <scalbn+0x30>
 801015e:	a10e      	add	r1, pc, #56	; (adr r1, 8010198 <scalbn+0xf8>)
 8010160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010164:	e7b4      	b.n	80100d0 <scalbn+0x30>
 8010166:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801016a:	3236      	adds	r2, #54	; 0x36
 801016c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010170:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010174:	4620      	mov	r0, r4
 8010176:	4b0c      	ldr	r3, [pc, #48]	; (80101a8 <scalbn+0x108>)
 8010178:	2200      	movs	r2, #0
 801017a:	e7e8      	b.n	801014e <scalbn+0xae>
 801017c:	f3af 8000 	nop.w
 8010180:	c2f8f359 	.word	0xc2f8f359
 8010184:	01a56e1f 	.word	0x01a56e1f
 8010188:	8800759c 	.word	0x8800759c
 801018c:	7e37e43c 	.word	0x7e37e43c
 8010190:	8800759c 	.word	0x8800759c
 8010194:	fe37e43c 	.word	0xfe37e43c
 8010198:	c2f8f359 	.word	0xc2f8f359
 801019c:	81a56e1f 	.word	0x81a56e1f
 80101a0:	43500000 	.word	0x43500000
 80101a4:	ffff3cb0 	.word	0xffff3cb0
 80101a8:	3c900000 	.word	0x3c900000

080101ac <_init>:
 80101ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ae:	bf00      	nop
 80101b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101b2:	bc08      	pop	{r3}
 80101b4:	469e      	mov	lr, r3
 80101b6:	4770      	bx	lr

080101b8 <_fini>:
 80101b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ba:	bf00      	nop
 80101bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101be:	bc08      	pop	{r3}
 80101c0:	469e      	mov	lr, r3
 80101c2:	4770      	bx	lr
