
Prueba_Comandos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007afc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08007ca0  08007ca0  00017ca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082ec  080082ec  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080082ec  080082ec  000182ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082f4  080082f4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082f4  080082f4  000182f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082f8  080082f8  000182f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080082fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000938  200001d8  080084d4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  080084d4  00020b10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003423  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d6d  00000000  00000000  0002362b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000318  00000000  00000000  00024398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000290  00000000  00000000  000246b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ab4  00000000  00000000  00024940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000048d7  00000000  00000000  000353f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005804a  00000000  00000000  00039ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00091d15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002348  00000000  00000000  00091d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c84 	.word	0x08007c84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08007c84 	.word	0x08007c84

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9dd 	b.w	8001094 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f86b 	bl	8000dc4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f85e 	bl	8000dc4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f84d 	bl	8000dc4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f83f 	bl	8000dc4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff fed3 	bl	8000b0c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc49 	bl	8000628 <__aeabi_dmul>
 8000d96:	f7ff ff1f 	bl	8000bd8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbca 	bl	8000534 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc40 	bl	8000628 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa82 	bl	80002b8 <__aeabi_dsub>
 8000db4:	f7ff ff10 	bl	8000bd8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <main>:
uint8_t counterRecepcion = 0;          //Variable para la posicion del arrelgo
char bufferRecepcion[64] = {0};        //Arreglo que almacena el comando ingresado


int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	//Realizamos la configuracuion inicial
	int_Hardware();
 800109c:	f000 f812 	bl	80010c4 <int_Hardware>

	while(1)
	{
		///Verificamos para ejecuta el comando ingresando
		if(commandComplete==1)
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <main+0x24>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d106      	bne.n	80010b6 <main+0x1e>
		{
			runCommand(bufferRecepcion);
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <main+0x28>)
 80010aa:	f000 f90f 	bl	80012cc <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 80010ae:	4b03      	ldr	r3, [pc, #12]	; (80010bc <main+0x24>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	e7f4      	b.n	80010a0 <main+0x8>
		}
		else
		{
			__NOP();
 80010b6:	bf00      	nop
		if(commandComplete==1)
 80010b8:	e7f2      	b.n	80010a0 <main+0x8>
 80010ba:	bf00      	nop
 80010bc:	20000001 	.word	0x20000001
 80010c0:	20000260 	.word	0x20000260

080010c4 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af02      	add	r7, sp, #8
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 80010ca:	4b51      	ldr	r3, [pc, #324]	; (8001210 <int_Hardware+0x14c>)
 80010cc:	4a51      	ldr	r2, [pc, #324]	; (8001214 <int_Hardware+0x150>)
 80010ce:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 80010d0:	4b4f      	ldr	r3, [pc, #316]	; (8001210 <int_Hardware+0x14c>)
 80010d2:	2205      	movs	r2, #5
 80010d4:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80010d6:	2300      	movs	r3, #0
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	2300      	movs	r3, #0
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	2200      	movs	r2, #0
 80010e2:	2101      	movs	r1, #1
 80010e4:	484a      	ldr	r0, [pc, #296]	; (8001210 <int_Hardware+0x14c>)
 80010e6:	f000 fbf1 	bl	80018cc <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 80010ea:	4849      	ldr	r0, [pc, #292]	; (8001210 <int_Hardware+0x14c>)
 80010ec:	f000 fc10 	bl	8001910 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 80010f0:	4b49      	ldr	r3, [pc, #292]	; (8001218 <int_Hardware+0x154>)
 80010f2:	4a48      	ldr	r2, [pc, #288]	; (8001214 <int_Hardware+0x150>)
 80010f4:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 80010f6:	4b48      	ldr	r3, [pc, #288]	; (8001218 <int_Hardware+0x154>)
 80010f8:	2202      	movs	r2, #2
 80010fa:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80010fc:	2307      	movs	r3, #7
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	2300      	movs	r3, #0
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2200      	movs	r2, #0
 8001108:	2102      	movs	r1, #2
 800110a:	4843      	ldr	r0, [pc, #268]	; (8001218 <int_Hardware+0x154>)
 800110c:	f000 fbde 	bl	80018cc <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001110:	4841      	ldr	r0, [pc, #260]	; (8001218 <int_Hardware+0x154>)
 8001112:	f000 fbfd 	bl	8001910 <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 8001116:	4b41      	ldr	r3, [pc, #260]	; (800121c <int_Hardware+0x158>)
 8001118:	4a3e      	ldr	r2, [pc, #248]	; (8001214 <int_Hardware+0x150>)
 800111a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 800111c:	4b3f      	ldr	r3, [pc, #252]	; (800121c <int_Hardware+0x158>)
 800111e:	2203      	movs	r2, #3
 8001120:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001122:	2307      	movs	r3, #7
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	2300      	movs	r3, #0
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2301      	movs	r3, #1
 800112c:	2200      	movs	r2, #0
 800112e:	2102      	movs	r1, #2
 8001130:	483a      	ldr	r0, [pc, #232]	; (800121c <int_Hardware+0x158>)
 8001132:	f000 fbcb 	bl	80018cc <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 8001136:	4839      	ldr	r0, [pc, #228]	; (800121c <int_Hardware+0x158>)
 8001138:	f000 fbea 	bl	8001910 <GPIO_Config>

	//---------------------------PWM--------------------------------
	//---------------PIN: PB6----------------
	//------------AF2: TIM4_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_LED.pGPIOx = GPIOB;
 800113c:	4b38      	ldr	r3, [pc, #224]	; (8001220 <int_Hardware+0x15c>)
 800113e:	4a39      	ldr	r2, [pc, #228]	; (8001224 <int_Hardware+0x160>)
 8001140:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_LED.GPIO_PinConfig.GPIO_PinNumber = PIN_6; 						//PIN_x, 0-15
 8001142:	4b37      	ldr	r3, [pc, #220]	; (8001220 <int_Hardware+0x15c>)
 8001144:	2206      	movs	r2, #6
 8001146:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_LED, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8001148:	2302      	movs	r3, #2
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	2300      	movs	r3, #0
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	2200      	movs	r2, #0
 8001154:	2102      	movs	r1, #2
 8001156:	4832      	ldr	r0, [pc, #200]	; (8001220 <int_Hardware+0x15c>)
 8001158:	f000 fbb8 	bl	80018cc <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_LED);
 800115c:	4830      	ldr	r0, [pc, #192]	; (8001220 <int_Hardware+0x15c>)
 800115e:	f000 fbd7 	bl	8001910 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <int_Hardware+0x164>)
 8001164:	4a31      	ldr	r2, [pc, #196]	; (800122c <int_Hardware+0x168>)
 8001166:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8001168:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <int_Hardware+0x164>)
 800116a:	2202      	movs	r2, #2
 800116c:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_115200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <int_Hardware+0x164>)
 8001170:	2202      	movs	r2, #2
 8001172:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8001174:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <int_Hardware+0x164>)
 8001176:	2200      	movs	r2, #0
 8001178:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800117a:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <int_Hardware+0x164>)
 800117c:	2200      	movs	r2, #0
 800117e:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <int_Hardware+0x164>)
 8001182:	2201      	movs	r2, #1
 8001184:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <int_Hardware+0x164>)
 8001188:	2201      	movs	r2, #1
 800118a:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 800118c:	4826      	ldr	r0, [pc, #152]	; (8001228 <int_Hardware+0x164>)
 800118e:	f001 f829 	bl	80021e4 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8001192:	4b27      	ldr	r3, [pc, #156]	; (8001230 <int_Hardware+0x16c>)
 8001194:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001198:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <int_Hardware+0x16c>)
 800119c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011a0:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <int_Hardware+0x16c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <int_Hardware+0x16c>)
 80011aa:	22fa      	movs	r2, #250	; 0xfa
 80011ac:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <int_Hardware+0x16c>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80011b4:	481e      	ldr	r0, [pc, #120]	; (8001230 <int_Hardware+0x16c>)
 80011b6:	f000 fa33 	bl	8001620 <BasicTimer_Config>

	//---------------TIM4----------------
	//Definimos el TIMx a usar
	handler_TIMER_LED.ptrTIMx = TIM4;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <int_Hardware+0x170>)
 80011bc:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <int_Hardware+0x174>)
 80011be:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_LED.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <int_Hardware+0x170>)
 80011c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011c6:	805a      	strh	r2, [r3, #2]
	handler_TIMER_LED.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <int_Hardware+0x170>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
	handler_TIMER_LED.TIMx_Config.TIMX_period = 500;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <int_Hardware+0x170>)
 80011d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011d4:	605a      	str	r2, [r3, #4]
	handler_TIMER_LED.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <int_Hardware+0x170>)
 80011d8:	2200      	movs	r2, #0
 80011da:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_LED);
 80011dc:	4815      	ldr	r0, [pc, #84]	; (8001234 <int_Hardware+0x170>)
 80011de:	f000 fa1f 	bl	8001620 <BasicTimer_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM4_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_LED.ptrTIMx = TIM4;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <int_Hardware+0x178>)
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <int_Hardware+0x174>)
 80011e6:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_LED.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <int_Hardware+0x178>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
	handler_PWM_LED.config.duttyCicle = 50;             //Valor del Dutty como multiplo del periodo del CNT
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <int_Hardware+0x178>)
 80011f0:	2232      	movs	r2, #50	; 0x32
 80011f2:	805a      	strh	r2, [r3, #2]
	handler_PWM_LED.config.polarity = POLARITY_HIGH;    //POLARITY_x x-> HIGH, LOW
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <int_Hardware+0x178>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_LED);
 80011fa:	4810      	ldr	r0, [pc, #64]	; (800123c <int_Hardware+0x178>)
 80011fc:	f000 fcfe 	bl	8001bfc <pwm_Config>
	//Desactivamos el PWM
	statusInOutPWM(&handler_PWM_LED, CHANNEL_DISABLE);
 8001200:	2100      	movs	r1, #0
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <int_Hardware+0x178>)
 8001204:	f000 fe5a 	bl	8001ebc <statusInOutPWM>

	//---------------------Fin de Configuracion PWM_Channelx-----------------------



}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200001f4 	.word	0x200001f4
 8001214:	40020000 	.word	0x40020000
 8001218:	20000238 	.word	0x20000238
 800121c:	20000244 	.word	0x20000244
 8001220:	20000210 	.word	0x20000210
 8001224:	40020400 	.word	0x40020400
 8001228:	20000250 	.word	0x20000250
 800122c:	40004400 	.word	0x40004400
 8001230:	20000200 	.word	0x20000200
 8001234:	2000021c 	.word	0x2000021c
 8001238:	40000800 	.word	0x40000800
 800123c:	2000022c 	.word	0x2000022c

08001240 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <BasicTimer2_Callback+0x10>)
 8001246:	f000 fc8d 	bl	8001b64 <GPIOxTooglePin>
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200001f4 	.word	0x200001f4

08001254 <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 8001258:	f001 fa6e 	bl	8002738 <getRxData>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b02      	ldr	r3, [pc, #8]	; (800126c <BasicUSART2_Callback+0x18>)
 8001262:	701a      	strb	r2, [r3, #0]
	//Funcion que almacena los caracteres del comando recibido
	recepcionCommand();
 8001264:	f000 f804 	bl	8001270 <recepcionCommand>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000000 	.word	0x20000000

08001270 <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	if(charRead == '@')
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <recepcionCommand+0x4c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b40      	cmp	r3, #64	; 0x40
 800127a:	d10c      	bne.n	8001296 <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <recepcionCommand+0x50>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <recepcionCommand+0x54>)
 8001284:	2100      	movs	r1, #0
 8001286:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <recepcionCommand+0x58>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <recepcionCommand+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 8001294:	e00c      	b.n	80012b0 <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <recepcionCommand+0x50>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <recepcionCommand+0x4c>)
 800129e:	7819      	ldrb	r1, [r3, #0]
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <recepcionCommand+0x54>)
 80012a2:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <recepcionCommand+0x50>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <recepcionCommand+0x50>)
 80012ae:	701a      	strb	r2, [r3, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000000 	.word	0x20000000
 80012c0:	2000025c 	.word	0x2000025c
 80012c4:	20000260 	.word	0x20000260
 80012c8:	20000001 	.word	0x20000001

080012cc <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b094      	sub	sp, #80	; 0x50
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	223c      	movs	r2, #60	; 0x3c
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 fc1d 	bl	8002b20 <memset>
	int firtsParameter = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u", cmd, &firtsParameter);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	f107 0210 	add.w	r2, r7, #16
 80012f2:	4936      	ldr	r1, [pc, #216]	; (80013cc <runCommand+0x100>)
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f002 fabb 	bl	8003870 <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	4934      	ldr	r1, [pc, #208]	; (80013d0 <runCommand+0x104>)
 8001300:	4618      	mov	r0, r3
 8001302:	f7fe ff6d 	bl	80001e0 <strcmp>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d110      	bne.n	800132e <runCommand+0x62>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 800130c:	4931      	ldr	r1, [pc, #196]	; (80013d4 <runCommand+0x108>)
 800130e:	4832      	ldr	r0, [pc, #200]	; (80013d8 <runCommand+0x10c>)
 8001310:	f001 f9d4 	bl	80026bc <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 8001314:	4931      	ldr	r1, [pc, #196]	; (80013dc <runCommand+0x110>)
 8001316:	4830      	ldr	r0, [pc, #192]	; (80013d8 <runCommand+0x10c>)
 8001318:	f001 f9d0 	bl	80026bc <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) duttyLed # ---Establece el valor del dutty del led, entre 0 a 100. \n");
 800131c:	4930      	ldr	r1, [pc, #192]	; (80013e0 <runCommand+0x114>)
 800131e:	482e      	ldr	r0, [pc, #184]	; (80013d8 <runCommand+0x10c>)
 8001320:	f001 f9cc 	bl	80026bc <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) statusLed # ---Habilita o desabilita el pwm del led, valor 1 o 0. \n");
 8001324:	492f      	ldr	r1, [pc, #188]	; (80013e4 <runCommand+0x118>)
 8001326:	482c      	ldr	r0, [pc, #176]	; (80013d8 <runCommand+0x10c>)
 8001328:	f001 f9c8 	bl	80026bc <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 800132c:	e049      	b.n	80013c2 <runCommand+0xf6>
	else if (strcmp(cmd, "duttyLed") == 0)
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	492d      	ldr	r1, [pc, #180]	; (80013e8 <runCommand+0x11c>)
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ff53 	bl	80001e0 <strcmp>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d115      	bne.n	800136c <runCommand+0xa0>
		if(firtsParameter>=0 && firtsParameter<=100)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0d      	blt.n	8001362 <runCommand+0x96>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	dc0a      	bgt.n	8001362 <runCommand+0x96>
			updateDuttyCyclePercentage(&handler_PWM_LED, firtsParameter);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4619      	mov	r1, r3
 8001352:	4826      	ldr	r0, [pc, #152]	; (80013ec <runCommand+0x120>)
 8001354:	f000 ff0a 	bl	800216c <updateDuttyCyclePercentage>
			writeMsgForTXE(&handler_USART_USB, "Nuevo valor de Dutty establecido \n");
 8001358:	4925      	ldr	r1, [pc, #148]	; (80013f0 <runCommand+0x124>)
 800135a:	481f      	ldr	r0, [pc, #124]	; (80013d8 <runCommand+0x10c>)
 800135c:	f001 f9ae 	bl	80026bc <writeMsgForTXE>
 8001360:	e02f      	b.n	80013c2 <runCommand+0xf6>
			writeMsgForTXE(&handler_USART_USB, "Valor ingresado no valido \n");
 8001362:	4924      	ldr	r1, [pc, #144]	; (80013f4 <runCommand+0x128>)
 8001364:	481c      	ldr	r0, [pc, #112]	; (80013d8 <runCommand+0x10c>)
 8001366:	f001 f9a9 	bl	80026bc <writeMsgForTXE>
}
 800136a:	e02a      	b.n	80013c2 <runCommand+0xf6>
	else if (strcmp(cmd, "statusLed") == 0)
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4921      	ldr	r1, [pc, #132]	; (80013f8 <runCommand+0x12c>)
 8001372:	4618      	mov	r0, r3
 8001374:	f7fe ff34 	bl	80001e0 <strcmp>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d11c      	bne.n	80013b8 <runCommand+0xec>
		switch (firtsParameter)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <runCommand+0xbe>
 8001384:	2b01      	cmp	r3, #1
 8001386:	d009      	beq.n	800139c <runCommand+0xd0>
 8001388:	e011      	b.n	80013ae <runCommand+0xe2>
				statusInOutPWM(&handler_PWM_LED, CHANNEL_DISABLE);
 800138a:	2100      	movs	r1, #0
 800138c:	4817      	ldr	r0, [pc, #92]	; (80013ec <runCommand+0x120>)
 800138e:	f000 fd95 	bl	8001ebc <statusInOutPWM>
				writeMsgForTXE(&handler_USART_USB, "PWM del led desabilitado \n");
 8001392:	491a      	ldr	r1, [pc, #104]	; (80013fc <runCommand+0x130>)
 8001394:	4810      	ldr	r0, [pc, #64]	; (80013d8 <runCommand+0x10c>)
 8001396:	f001 f991 	bl	80026bc <writeMsgForTXE>
				break;
 800139a:	e012      	b.n	80013c2 <runCommand+0xf6>
				statusInOutPWM(&handler_PWM_LED, CHANNEL_ENABLE);
 800139c:	2101      	movs	r1, #1
 800139e:	4813      	ldr	r0, [pc, #76]	; (80013ec <runCommand+0x120>)
 80013a0:	f000 fd8c 	bl	8001ebc <statusInOutPWM>
				writeMsgForTXE(&handler_USART_USB, "PWM del led Habilitado \n");
 80013a4:	4916      	ldr	r1, [pc, #88]	; (8001400 <runCommand+0x134>)
 80013a6:	480c      	ldr	r0, [pc, #48]	; (80013d8 <runCommand+0x10c>)
 80013a8:	f001 f988 	bl	80026bc <writeMsgForTXE>
				break;
 80013ac:	e009      	b.n	80013c2 <runCommand+0xf6>
				writeMsgForTXE(&handler_USART_USB, "Valor ingresado no valido \n");
 80013ae:	4911      	ldr	r1, [pc, #68]	; (80013f4 <runCommand+0x128>)
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <runCommand+0x10c>)
 80013b2:	f001 f983 	bl	80026bc <writeMsgForTXE>
				break;
 80013b6:	e004      	b.n	80013c2 <runCommand+0xf6>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 80013b8:	4912      	ldr	r1, [pc, #72]	; (8001404 <runCommand+0x138>)
 80013ba:	4807      	ldr	r0, [pc, #28]	; (80013d8 <runCommand+0x10c>)
 80013bc:	f001 f97e 	bl	80026bc <writeMsgForTXE>
}
 80013c0:	e7ff      	b.n	80013c2 <runCommand+0xf6>
 80013c2:	bf00      	nop
 80013c4:	3750      	adds	r7, #80	; 0x50
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	08007ca0 	.word	0x08007ca0
 80013d0:	08007ca8 	.word	0x08007ca8
 80013d4:	08007cb0 	.word	0x08007cb0
 80013d8:	20000250 	.word	0x20000250
 80013dc:	08007cc0 	.word	0x08007cc0
 80013e0:	08007cec 	.word	0x08007cec
 80013e4:	08007d34 	.word	0x08007d34
 80013e8:	08007d7c 	.word	0x08007d7c
 80013ec:	2000022c 	.word	0x2000022c
 80013f0:	08007d88 	.word	0x08007d88
 80013f4:	08007dac 	.word	0x08007dac
 80013f8:	08007dc8 	.word	0x08007dc8
 80013fc:	08007dd4 	.word	0x08007dd4
 8001400:	08007df0 	.word	0x08007df0
 8001404:	08007e0c 	.word	0x08007e0c

08001408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800140a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800140c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <LoopForever+0x6>)
  ldr r1, =_edata
 8001412:	490d      	ldr	r1, [pc, #52]	; (8001448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <LoopForever+0xe>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001418:	e002      	b.n	8001420 <LoopCopyDataInit>

0800141a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800141c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141e:	3304      	adds	r3, #4

08001420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001424:	d3f9      	bcc.n	800141a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001428:	4c0a      	ldr	r4, [pc, #40]	; (8001454 <LoopForever+0x16>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800142c:	e001      	b.n	8001432 <LoopFillZerobss>

0800142e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001430:	3204      	adds	r2, #4

08001432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001434:	d3fb      	bcc.n	800142e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001436:	f001 fb4f 	bl	8002ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800143a:	f7ff fe2d 	bl	8001098 <main>

0800143e <LoopForever>:

LoopForever:
    b LoopForever
 800143e:	e7fe      	b.n	800143e <LoopForever>
  ldr   r0, =_estack
 8001440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800144c:	080082fc 	.word	0x080082fc
  ldr r2, =_sbss
 8001450:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001454:	20000b10 	.word	0x20000b10

08001458 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC_IRQHandler>

0800145a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
	return 1;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <_kill>:

int _kill(int pid, int sig)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001474:	f001 fb2a 	bl	8002acc <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	2216      	movs	r2, #22
 800147c:	601a      	str	r2, [r3, #0]
	return -1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_exit>:

void _exit (int status)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001492:	f04f 31ff 	mov.w	r1, #4294967295
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffe7 	bl	800146a <_kill>
	while (1) {}		/* Make sure we hang here */
 800149c:	e7fe      	b.n	800149c <_exit+0x12>

0800149e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e00a      	b.n	80014c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014b0:	f3af 8000 	nop.w
 80014b4:	4601      	mov	r1, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	60ba      	str	r2, [r7, #8]
 80014bc:	b2ca      	uxtb	r2, r1
 80014be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3301      	adds	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	dbf0      	blt.n	80014b0 <_read+0x12>
	}

return len;
 80014ce:	687b      	ldr	r3, [r7, #4]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	e009      	b.n	80014fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	60ba      	str	r2, [r7, #8]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	dbf1      	blt.n	80014ea <_write+0x12>
	}
	return len;
 8001506:	687b      	ldr	r3, [r7, #4]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_close>:

int _close(int file)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	return -1;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001538:	605a      	str	r2, [r3, #4]
	return 0;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_isatty>:

int _isatty(int file)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	return 1;
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
	return 0;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f001 fa90 	bl	8002acc <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	220c      	movs	r2, #12
 80015b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20020000 	.word	0x20020000
 80015d8:	00000400 	.word	0x00000400
 80015dc:	200002a0 	.word	0x200002a0
 80015e0:	20000b10 	.word	0x20000b10

080015e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	db0b      	blt.n	800160e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f003 021f 	and.w	r2, r3, #31
 80015fc:	4907      	ldr	r1, [pc, #28]	; (800161c <__NVIC_EnableIRQ+0x38>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	2001      	movs	r0, #1
 8001606:	fa00 f202 	lsl.w	r2, r0, r2
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000e100 	.word	0xe000e100

08001620 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001630:	d10a      	bne.n	8001648 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001632:	4b62      	ldr	r3, [pc, #392]	; (80017bc <BasicTimer_Config+0x19c>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a61      	ldr	r2, [pc, #388]	; (80017bc <BasicTimer_Config+0x19c>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	4a5f      	ldr	r2, [pc, #380]	; (80017c0 <BasicTimer_Config+0x1a0>)
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e02e      	b.n	80016a6 <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4a5d      	ldr	r2, [pc, #372]	; (80017c4 <BasicTimer_Config+0x1a4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d10a      	bne.n	8001668 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001652:	4b5a      	ldr	r3, [pc, #360]	; (80017bc <BasicTimer_Config+0x19c>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a59      	ldr	r2, [pc, #356]	; (80017bc <BasicTimer_Config+0x19c>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	4a59      	ldr	r2, [pc, #356]	; (80017c8 <BasicTimer_Config+0x1a8>)
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e01e      	b.n	80016a6 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4a57      	ldr	r2, [pc, #348]	; (80017cc <BasicTimer_Config+0x1ac>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d10a      	bne.n	8001688 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001672:	4b52      	ldr	r3, [pc, #328]	; (80017bc <BasicTimer_Config+0x19c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a51      	ldr	r2, [pc, #324]	; (80017bc <BasicTimer_Config+0x19c>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	4a53      	ldr	r2, [pc, #332]	; (80017d0 <BasicTimer_Config+0x1b0>)
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e00e      	b.n	80016a6 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4a51      	ldr	r2, [pc, #324]	; (80017d4 <BasicTimer_Config+0x1b4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d109      	bne.n	80016a6 <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001692:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <BasicTimer_Config+0x19c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a49      	ldr	r2, [pc, #292]	; (80017bc <BasicTimer_Config+0x19c>)
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	4a4d      	ldr	r2, [pc, #308]	; (80017d8 <BasicTimer_Config+0x1b8>)
 80016a4:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 80016a6:	f000 fa75 	bl	8001b94 <getConfigPLL>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80016ae:	f000 fa8d 	bl	8001bcc <getClockAPB1>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 80016b6:	7bbb      	ldrb	r3, [r7, #14]
 80016b8:	2b31      	cmp	r3, #49	; 0x31
 80016ba:	d903      	bls.n	80016c4 <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
 80016c2:	e000      	b.n	80016c6 <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 80016c4:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	8852      	ldrh	r2, [r2, #2]
 80016cc:	fb02 f303 	mul.w	r3, r2, r3
 80016d0:	1e5a      	subs	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d112      	bne.n	8001706 <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	f022 0210 	bic.w	r2, r2, #16
 80016ee:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	3201      	adds	r2, #1
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
 8001704:	e018      	b.n	8001738 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f022 0210 	bic.w	r2, r2, #16
 8001714:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f042 0210 	orr.w	r2, r2, #16
 8001724:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6852      	ldr	r2, [r2, #4]
 8001736:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001744:	d103      	bne.n	800174e <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001746:	201c      	movs	r0, #28
 8001748:	f7ff ff4c 	bl	80015e4 <__NVIC_EnableIRQ>
 800174c:	e019      	b.n	8001782 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <BasicTimer_Config+0x1a4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d103      	bne.n	8001760 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001758:	201d      	movs	r0, #29
 800175a:	f7ff ff43 	bl	80015e4 <__NVIC_EnableIRQ>
 800175e:	e010      	b.n	8001782 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4a19      	ldr	r2, [pc, #100]	; (80017cc <BasicTimer_Config+0x1ac>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d103      	bne.n	8001772 <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 800176a:	201e      	movs	r0, #30
 800176c:	f7ff ff3a 	bl	80015e4 <__NVIC_EnableIRQ>
 8001770:	e007      	b.n	8001782 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <BasicTimer_Config+0x1b4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d102      	bne.n	8001782 <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 800177c:	2032      	movs	r0, #50	; 0x32
 800177e:	f7ff ff31 	bl	80015e4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001782:	b662      	cpsie	i
}
 8001784:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7a1b      	ldrb	r3, [r3, #8]
 800178a:	4619      	mov	r1, r3
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f87d 	bl	800188c <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f042 0201 	orr.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	200002a4 	.word	0x200002a4
 80017c4:	40000400 	.word	0x40000400
 80017c8:	200002a8 	.word	0x200002a8
 80017cc:	40000800 	.word	0x40000800
 80017d0:	200002ac 	.word	0x200002ac
 80017d4:	40000c00 	.word	0x40000c00
 80017d8:	200002b0 	.word	0x200002b0

080017dc <BasicTimer3_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
	__NOP();
 80017e0:	bf00      	nop
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <BasicTimer4_Callback>:

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
	__NOP();
 80017f0:	bf00      	nop
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
	__NOP();
 8001800:	bf00      	nop
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <TIM2_IRQHandler+0x1c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691a      	ldr	r2, [r3, #16]
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <TIM2_IRQHandler+0x1c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8001820:	f7ff fd0e 	bl	8001240 <BasicTimer2_Callback>

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200002a4 	.word	0x200002a4

0800182c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <TIM3_IRQHandler+0x1c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	4b04      	ldr	r3, [pc, #16]	; (8001848 <TIM3_IRQHandler+0x1c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0201 	bic.w	r2, r2, #1
 800183e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8001840:	f7ff ffcc 	bl	80017dc <BasicTimer3_Callback>

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200002a8 	.word	0x200002a8

0800184c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <TIM4_IRQHandler+0x1c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691a      	ldr	r2, [r3, #16]
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <TIM4_IRQHandler+0x1c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0201 	bic.w	r2, r2, #1
 800185e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8001860:	f7ff ffc4 	bl	80017ec <BasicTimer4_Callback>

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200002ac 	.word	0x200002ac

0800186c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <TIM5_IRQHandler+0x1c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691a      	ldr	r2, [r3, #16]
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <TIM5_IRQHandler+0x1c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8001880:	f7ff ffbc 	bl	80017fc <BasicTimer5_Callback>

}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200002b0 	.word	0x200002b0

0800188c <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d108      	bne.n	80018b0 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f042 0201 	orr.w	r2, r2, #1
 80018ac:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 80018ae:	e007      	b.n	80018c0 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	60da      	str	r2, [r3, #12]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	70fb      	strb	r3, [r7, #3]
 80018de:	460b      	mov	r3, r1
 80018e0:	70bb      	strb	r3, [r7, #2]
 80018e2:	4613      	mov	r3, r2
 80018e4:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	78ba      	ldrb	r2, [r7, #2]
 80018f0:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	787a      	ldrb	r2, [r7, #1]
 80018f6:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7c3a      	ldrb	r2, [r7, #16]
 80018fc:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7d3a      	ldrb	r2, [r7, #20]
 8001902:	715a      	strb	r2, [r3, #5]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a88      	ldr	r2, [pc, #544]	; (8001b48 <GPIO_Config+0x238>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d106      	bne.n	8001938 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 800192a:	4b88      	ldr	r3, [pc, #544]	; (8001b4c <GPIO_Config+0x23c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a87      	ldr	r2, [pc, #540]	; (8001b4c <GPIO_Config+0x23c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	e03a      	b.n	80019ae <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a84      	ldr	r2, [pc, #528]	; (8001b50 <GPIO_Config+0x240>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d106      	bne.n	8001950 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8001942:	4b82      	ldr	r3, [pc, #520]	; (8001b4c <GPIO_Config+0x23c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a81      	ldr	r2, [pc, #516]	; (8001b4c <GPIO_Config+0x23c>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	e02e      	b.n	80019ae <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a7f      	ldr	r2, [pc, #508]	; (8001b54 <GPIO_Config+0x244>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d106      	bne.n	8001968 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 800195a:	4b7c      	ldr	r3, [pc, #496]	; (8001b4c <GPIO_Config+0x23c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a7b      	ldr	r2, [pc, #492]	; (8001b4c <GPIO_Config+0x23c>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	e022      	b.n	80019ae <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a7a      	ldr	r2, [pc, #488]	; (8001b58 <GPIO_Config+0x248>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d106      	bne.n	8001980 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8001972:	4b76      	ldr	r3, [pc, #472]	; (8001b4c <GPIO_Config+0x23c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a75      	ldr	r2, [pc, #468]	; (8001b4c <GPIO_Config+0x23c>)
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	e016      	b.n	80019ae <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a75      	ldr	r2, [pc, #468]	; (8001b5c <GPIO_Config+0x24c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d106      	bne.n	8001998 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 800198a:	4b70      	ldr	r3, [pc, #448]	; (8001b4c <GPIO_Config+0x23c>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a6f      	ldr	r2, [pc, #444]	; (8001b4c <GPIO_Config+0x23c>)
 8001990:	f043 0310 	orr.w	r3, r3, #16
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	e00a      	b.n	80019ae <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a70      	ldr	r2, [pc, #448]	; (8001b60 <GPIO_Config+0x250>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d105      	bne.n	80019ae <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 80019a2:	4b6a      	ldr	r3, [pc, #424]	; (8001b4c <GPIO_Config+0x23c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a69      	ldr	r2, [pc, #420]	; (8001b4c <GPIO_Config+0x23c>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	785b      	ldrb	r3, [r3, #1]
 80019b2:	461a      	mov	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2103      	movs	r1, #3
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	4619      	mov	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	400a      	ands	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	789b      	ldrb	r3, [r3, #2]
 80019f2:	461a      	mov	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	408b      	lsls	r3, r1
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	4619      	mov	r1, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	400a      	ands	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	78db      	ldrb	r3, [r3, #3]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	2103      	movs	r1, #3
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	4619      	mov	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	400a      	ands	r2, r1
 8001a58:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	6899      	ldr	r1, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	791b      	ldrb	r3, [r3, #4]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2103      	movs	r1, #3
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	4619      	mov	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	400a      	ands	r2, r1
 8001a98:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	68d9      	ldr	r1, [r3, #12]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	785b      	ldrb	r3, [r3, #1]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d143      	bne.n	8001b3a <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b07      	cmp	r3, #7
 8001ab8:	d81f      	bhi.n	8001afa <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	6a1a      	ldr	r2, [r3, #32]
 8001ac8:	210f      	movs	r1, #15
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	400a      	ands	r2, r1
 8001ada:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	6a1a      	ldr	r2, [r3, #32]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	795b      	ldrb	r3, [r3, #5]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	4619      	mov	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8001af8:	e01f      	b.n	8001b3a <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	3b08      	subs	r3, #8
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	795b      	ldrb	r3, [r3, #5]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	4619      	mov	r1, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40021c00 	.word	0x40021c00

08001b64 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	4619      	mov	r1, r3
 8001b78:	2301      	movs	r3, #1
 8001b7a:	408b      	lsls	r3, r1
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	404a      	eors	r2, r1
 8001b84:	615a      	str	r2, [r3, #20]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <getConfigPLL+0x30>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d103      	bne.n	8001bb2 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <getConfigPLL+0x34>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
 8001bb0:	e001      	b.n	8001bb6 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8001bb2:	2310      	movs	r3, #16
 8001bb4:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	200002b4 	.word	0x200002b4

08001bcc <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8001bd2:	f7ff ffdf 	bl	8001b94 <getConfigPLL>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8001bda:	2300      	movs	r3, #0
 8001bdc:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8001bde:	79bb      	ldrb	r3, [r7, #6]
 8001be0:	2b31      	cmp	r3, #49	; 0x31
 8001be2:	d802      	bhi.n	8001bea <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8001be4:	79bb      	ldrb	r3, [r7, #6]
 8001be6:	71fb      	strb	r3, [r7, #7]
 8001be8:	e002      	b.n	8001bf0 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8001bea:	79bb      	ldrb	r3, [r7, #6]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0c:	d106      	bne.n	8001c1c <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001c0e:	4b81      	ldr	r3, [pc, #516]	; (8001e14 <pwm_Config+0x218>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a80      	ldr	r2, [pc, #512]	; (8001e14 <pwm_Config+0x218>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	e024      	b.n	8001c66 <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4a7d      	ldr	r2, [pc, #500]	; (8001e18 <pwm_Config+0x21c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d106      	bne.n	8001c34 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001c26:	4b7b      	ldr	r3, [pc, #492]	; (8001e14 <pwm_Config+0x218>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a7a      	ldr	r2, [pc, #488]	; (8001e14 <pwm_Config+0x218>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	e018      	b.n	8001c66 <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	4a78      	ldr	r2, [pc, #480]	; (8001e1c <pwm_Config+0x220>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d106      	bne.n	8001c4c <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001c3e:	4b75      	ldr	r3, [pc, #468]	; (8001e14 <pwm_Config+0x218>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a74      	ldr	r2, [pc, #464]	; (8001e14 <pwm_Config+0x218>)
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	e00c      	b.n	8001c66 <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4a73      	ldr	r2, [pc, #460]	; (8001e20 <pwm_Config+0x224>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d106      	bne.n	8001c64 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001c56:	4b6f      	ldr	r3, [pc, #444]	; (8001e14 <pwm_Config+0x218>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a6e      	ldr	r2, [pc, #440]	; (8001e14 <pwm_Config+0x218>)
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	e000      	b.n	8001c66 <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8001c64:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fa4c 	bl	8002104 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	f200 8118 	bhi.w	8001ea6 <pwm_Config+0x2aa>
 8001c76:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <pwm_Config+0x80>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001d0f 	.word	0x08001d0f
 8001c84:	08001d91 	.word	0x08001d91
 8001c88:	08001e25 	.word	0x08001e25
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	699a      	ldr	r2, [r3, #24]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f022 0203 	bic.w	r2, r2, #3
 8001c9a:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001caa:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001cba:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f022 0208 	bic.w	r2, r2, #8
 8001cca:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	699a      	ldr	r2, [r3, #24]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f042 0208 	orr.w	r2, r2, #8
 8001cda:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f022 0204 	bic.w	r2, r2, #4
 8001cea:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f042 0204 	orr.w	r2, r2, #4
 8001cfa:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d0a:	619a      	str	r2, [r3, #24]

		break;
 8001d0c:	e0cc      	b.n	8001ea8 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f022 0203 	bic.w	r2, r2, #3
 8001d1c:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001d2c:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	699a      	ldr	r2, [r3, #24]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001d3c:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	699a      	ldr	r2, [r3, #24]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d4c:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	699a      	ldr	r2, [r3, #24]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d5c:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d6c:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d7c:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d8c:	619a      	str	r2, [r3, #24]

		break;
 8001d8e:	e08b      	b.n	8001ea8 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	69da      	ldr	r2, [r3, #28]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f022 0203 	bic.w	r2, r2, #3
 8001d9e:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001dae:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	69da      	ldr	r2, [r3, #28]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001dbe:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	69da      	ldr	r2, [r3, #28]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f022 0208 	bic.w	r2, r2, #8
 8001dce:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	69da      	ldr	r2, [r3, #28]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f042 0208 	orr.w	r2, r2, #8
 8001dde:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f022 0204 	bic.w	r2, r2, #4
 8001dee:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	69da      	ldr	r2, [r3, #28]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f042 0204 	orr.w	r2, r2, #4
 8001dfe:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e0e:	61da      	str	r2, [r3, #28]

		break;
 8001e10:	e04a      	b.n	8001ea8 <pwm_Config+0x2ac>
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40000800 	.word	0x40000800
 8001e20:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	69da      	ldr	r2, [r3, #28]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e32:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	69da      	ldr	r2, [r3, #28]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001e42:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001e52:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e62:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	69da      	ldr	r2, [r3, #28]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e72:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e82:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e92:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	69da      	ldr	r2, [r3, #28]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea2:	61da      	str	r2, [r3, #28]

		break;
 8001ea4:	e000      	b.n	8001ea8 <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 8001ea6:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	791b      	ldrb	r3, [r3, #4]
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f896 	bl	8001fe0 <statusPolarityPWM>

}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d87f      	bhi.n	8001fd0 <statusInOutPWM+0x114>
 8001ed0:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <statusInOutPWM+0x1c>)
 8001ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed6:	bf00      	nop
 8001ed8:	08001ee9 	.word	0x08001ee9
 8001edc:	08001f23 	.word	0x08001f23
 8001ee0:	08001f5d 	.word	0x08001f5d
 8001ee4:	08001f97 	.word	0x08001f97
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d110      	bne.n	8001f10 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	6a1a      	ldr	r2, [r3, #32]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f022 0201 	bic.w	r2, r2, #1
 8001efc:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	6a1a      	ldr	r2, [r3, #32]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8001f0e:	e060      	b.n	8001fd2 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	621a      	str	r2, [r3, #32]
		break;
 8001f20:	e057      	b.n	8001fd2 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d110      	bne.n	8001f4a <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	6a1a      	ldr	r2, [r3, #32]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f022 0210 	bic.w	r2, r2, #16
 8001f36:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	6a1a      	ldr	r2, [r3, #32]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f042 0210 	orr.w	r2, r2, #16
 8001f46:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 8001f48:	e043      	b.n	8001fd2 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	6a1a      	ldr	r2, [r3, #32]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f022 0210 	bic.w	r2, r2, #16
 8001f58:	621a      	str	r2, [r3, #32]
		break;
 8001f5a:	e03a      	b.n	8001fd2 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d110      	bne.n	8001f84 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	6a1a      	ldr	r2, [r3, #32]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f70:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	6a1a      	ldr	r2, [r3, #32]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f80:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 8001f82:	e026      	b.n	8001fd2 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	6a1a      	ldr	r2, [r3, #32]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f92:	621a      	str	r2, [r3, #32]
		break;
 8001f94:	e01d      	b.n	8001fd2 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d110      	bne.n	8001fbe <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	6a1a      	ldr	r2, [r3, #32]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001faa:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	6a1a      	ldr	r2, [r3, #32]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fba:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8001fbc:	e009      	b.n	8001fd2 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fcc:	621a      	str	r2, [r3, #32]
		break;
 8001fce:	e000      	b.n	8001fd2 <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 8001fd0:	bf00      	nop
	}
	}
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop

08001fe0 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d87f      	bhi.n	80020f4 <statusPolarityPWM+0x114>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <statusPolarityPWM+0x1c>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	0800200d 	.word	0x0800200d
 8002000:	08002047 	.word	0x08002047
 8002004:	08002081 	.word	0x08002081
 8002008:	080020bb 	.word	0x080020bb
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d110      	bne.n	8002034 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	6a1a      	ldr	r2, [r3, #32]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f022 0202 	bic.w	r2, r2, #2
 8002020:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f042 0202 	orr.w	r2, r2, #2
 8002030:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 8002032:	e060      	b.n	80020f6 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	6a1a      	ldr	r2, [r3, #32]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f022 0202 	bic.w	r2, r2, #2
 8002042:	621a      	str	r2, [r3, #32]
		break;
 8002044:	e057      	b.n	80020f6 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d110      	bne.n	800206e <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	6a1a      	ldr	r2, [r3, #32]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f022 0220 	bic.w	r2, r2, #32
 800205a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	6a1a      	ldr	r2, [r3, #32]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f042 0220 	orr.w	r2, r2, #32
 800206a:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 800206c:	e043      	b.n	80020f6 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	6a1a      	ldr	r2, [r3, #32]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f022 0220 	bic.w	r2, r2, #32
 800207c:	621a      	str	r2, [r3, #32]
		break;
 800207e:	e03a      	b.n	80020f6 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d110      	bne.n	80020a8 <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	6a1a      	ldr	r2, [r3, #32]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002094:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	6a1a      	ldr	r2, [r3, #32]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a4:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 80020a6:	e026      	b.n	80020f6 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	6a1a      	ldr	r2, [r3, #32]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020b6:	621a      	str	r2, [r3, #32]
		break;
 80020b8:	e01d      	b.n	80020f6 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d110      	bne.n	80020e2 <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	6a1a      	ldr	r2, [r3, #32]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ce:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	6a1a      	ldr	r2, [r3, #32]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020de:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 80020e0:	e009      	b.n	80020f6 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020f0:	621a      	str	r2, [r3, #32]
		break;
 80020f2:	e000      	b.n	80020f6 <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 80020f4:	bf00      	nop
	}
	}

}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop

08002104 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d823      	bhi.n	800215c <setDuttyCycle+0x58>
 8002114:	a201      	add	r2, pc, #4	; (adr r2, 800211c <setDuttyCycle+0x18>)
 8002116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211a:	bf00      	nop
 800211c:	0800212d 	.word	0x0800212d
 8002120:	08002139 	.word	0x08002139
 8002124:	08002145 	.word	0x08002145
 8002128:	08002151 	.word	0x08002151
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	885a      	ldrh	r2, [r3, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002136:	e012      	b.n	800215e <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	885a      	ldrh	r2, [r3, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002142:	e00c      	b.n	800215e <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	885a      	ldrh	r2, [r3, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800214e:	e006      	b.n	800215e <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	885a      	ldrh	r2, [r3, #2]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800215a:	e000      	b.n	800215e <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 800215c:	bf00      	nop
	}
	}

}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <updateDuttyCyclePercentage>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje
void updateDuttyCyclePercentage(PWM_Handler_t *prtPwmHandler, uint8_t newDuttyPercentage)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <updateDuttyCyclePercentage+0x38>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	095b      	lsrs	r3, r3, #5
 8002186:	b29a      	uxth	r2, r3
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	b29b      	uxth	r3, r3
 800218c:	fb12 f303 	smulbb	r3, r2, r3
 8002190:	b29a      	uxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ffb4 	bl	8002104 <setDuttyCycle>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	51eb851f 	.word	0x51eb851f

080021a8 <__NVIC_EnableIRQ>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db0b      	blt.n	80021d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4907      	ldr	r1, [pc, #28]	; (80021e0 <__NVIC_EnableIRQ+0x38>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2001      	movs	r0, #1
 80021ca:	fa00 f202 	lsl.w	r2, r0, r2
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4a8f      	ldr	r2, [pc, #572]	; (8002430 <USART_Config+0x24c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d107      	bne.n	8002206 <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 80021f6:	4b8f      	ldr	r3, [pc, #572]	; (8002434 <USART_Config+0x250>)
 80021f8:	2210      	movs	r2, #16
 80021fa:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	4a8d      	ldr	r2, [pc, #564]	; (8002438 <USART_Config+0x254>)
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e019      	b.n	800223a <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	4a8c      	ldr	r2, [pc, #560]	; (800243c <USART_Config+0x258>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d108      	bne.n	8002222 <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8002210:	4b88      	ldr	r3, [pc, #544]	; (8002434 <USART_Config+0x250>)
 8002212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002216:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a88      	ldr	r2, [pc, #544]	; (8002440 <USART_Config+0x25c>)
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	e00b      	b.n	800223a <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	4a87      	ldr	r2, [pc, #540]	; (8002444 <USART_Config+0x260>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d106      	bne.n	800223a <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 800222c:	4b81      	ldr	r3, [pc, #516]	; (8002434 <USART_Config+0x250>)
 800222e:	2220      	movs	r2, #32
 8002230:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4a84      	ldr	r2, [pc, #528]	; (8002448 <USART_Config+0x264>)
 8002238:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	789b      	ldrb	r3, [r3, #2]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d03d      	beq.n	80022ce <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002260:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002270:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002280:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002290:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	789b      	ldrb	r3, [r3, #2]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d110      	bne.n	80022bc <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022a8:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	e018      	b.n	80022ee <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	e00f      	b.n	80022ee <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022dc:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022ec:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	78db      	ldrb	r3, [r3, #3]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d84c      	bhi.n	8002390 <USART_Config+0x1ac>
 80022f6:	a201      	add	r2, pc, #4	; (adr r2, 80022fc <USART_Config+0x118>)
 80022f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fc:	0800230d 	.word	0x0800230d
 8002300:	0800232b 	.word	0x0800232b
 8002304:	0800234d 	.word	0x0800234d
 8002308:	0800236f 	.word	0x0800236f
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800231a:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	6912      	ldr	r2, [r2, #16]
 8002326:	611a      	str	r2, [r3, #16]
		break;
 8002328:	e041      	b.n	80023ae <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002338:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002348:	611a      	str	r2, [r3, #16]
		break;
 800234a:	e030      	b.n	80023ae <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800235a:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800236a:	611a      	str	r2, [r3, #16]
		break;
 800236c:	e01f      	b.n	80023ae <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800237c:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800238c:	611a      	str	r2, [r3, #16]
		break;
 800238e:	e00e      	b.n	80023ae <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800239e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	6912      	ldr	r2, [r2, #16]
 80023aa:	611a      	str	r2, [r3, #16]
		break;
 80023ac:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	4a21      	ldr	r2, [pc, #132]	; (800243c <USART_Config+0x258>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d104      	bne.n	80023c6 <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80023bc:	f7ff fc06 	bl	8001bcc <getClockAPB1>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73fb      	strb	r3, [r7, #15]
 80023c4:	e003      	b.n	80023ce <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 80023c6:	f7ff fbe5 	bl	8001b94 <getConfigPLL>
 80023ca:	4603      	mov	r3, r0
 80023cc:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	785b      	ldrb	r3, [r3, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10b      	bne.n	80023ee <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f91f 	bl	8002620 <getValueBaudRate>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	e02f      	b.n	800244e <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	785b      	ldrb	r3, [r3, #1]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d10b      	bne.n	800240e <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f90f 	bl	8002620 <getValueBaudRate>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	e01f      	b.n	800244e <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	785b      	ldrb	r3, [r3, #1]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d11a      	bne.n	800244c <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f8ff 	bl	8002620 <getValueBaudRate>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	e00f      	b.n	800244e <USART_Config+0x26a>
 800242e:	bf00      	nop
 8002430:	40011000 	.word	0x40011000
 8002434:	40023800 	.word	0x40023800
 8002438:	200002b8 	.word	0x200002b8
 800243c:	40004400 	.word	0x40004400
 8002440:	200002bc 	.word	0x200002bc
 8002444:	40011400 	.word	0x40011400
 8002448:	200002c0 	.word	0x200002c0
	}
	else
	{
		__NOP();
 800244c:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d866      	bhi.n	8002524 <USART_Config+0x340>
 8002456:	a201      	add	r2, pc, #4	; (adr r2, 800245c <USART_Config+0x278>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	0800246d 	.word	0x0800246d
 8002460:	0800248f 	.word	0x0800248f
 8002464:	080024b1 	.word	0x080024b1
 8002468:	080024f3 	.word	0x080024f3
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f022 0208 	bic.w	r2, r2, #8
 800247a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f042 0208 	orr.w	r2, r2, #8
 800248a:	60da      	str	r2, [r3, #12]

		break;
 800248c:	e063      	b.n	8002556 <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f022 0204 	bic.w	r2, r2, #4
 800249c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f042 0204 	orr.w	r2, r2, #4
 80024ac:	60da      	str	r2, [r3, #12]

		break;
 80024ae:	e052      	b.n	8002556 <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f022 0208 	bic.w	r2, r2, #8
 80024be:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f042 0208 	orr.w	r2, r2, #8
 80024ce:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f022 0204 	bic.w	r2, r2, #4
 80024de:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f042 0204 	orr.w	r2, r2, #4
 80024ee:	60da      	str	r2, [r3, #12]


		break;
 80024f0:	e031      	b.n	8002556 <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002500:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f022 0208 	bic.w	r2, r2, #8
 8002510:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f022 0204 	bic.w	r2, r2, #4
 8002520:	60da      	str	r2, [r3, #12]
		break;
 8002522:	e018      	b.n	8002556 <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002532:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f022 0208 	bic.w	r2, r2, #8
 8002542:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f022 0204 	bic.w	r2, r2, #4
 8002552:	60da      	str	r2, [r3, #12]
		break;
 8002554:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8002556:	b672      	cpsid	i
}
 8002558:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	791b      	ldrb	r3, [r3, #4]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d110      	bne.n	8002584 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f022 0220 	bic.w	r2, r2, #32
 8002570:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f042 0220 	orr.w	r2, r2, #32
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	e007      	b.n	8002594 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f022 0220 	bic.w	r2, r2, #32
 8002592:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	791b      	ldrb	r3, [r3, #4]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d003      	beq.n	80025a4 <USART_Config+0x3c0>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	795b      	ldrb	r3, [r3, #5]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d11a      	bne.n	80025da <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <USART_Config+0x430>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d103      	bne.n	80025b6 <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 80025ae:	2025      	movs	r0, #37	; 0x25
 80025b0:	f7ff fdfa 	bl	80021a8 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80025b4:	e013      	b.n	80025de <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4a17      	ldr	r2, [pc, #92]	; (8002618 <USART_Config+0x434>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d103      	bne.n	80025c8 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 80025c0:	2026      	movs	r0, #38	; 0x26
 80025c2:	f7ff fdf1 	bl	80021a8 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80025c6:	e00a      	b.n	80025de <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a13      	ldr	r2, [pc, #76]	; (800261c <USART_Config+0x438>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d105      	bne.n	80025de <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 80025d2:	2047      	movs	r0, #71	; 0x47
 80025d4:	f7ff fde8 	bl	80021a8 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80025d8:	e001      	b.n	80025de <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 80025da:	bf00      	nop
 80025dc:	e000      	b.n	80025e0 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80025de:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80025e0:	b662      	cpsie	i
}
 80025e2:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d00f      	beq.n	800260c <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025fa:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800260a:	60da      	str	r2, [r3, #12]
	}
}
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40011000 	.word	0x40011000
 8002618:	40004400 	.word	0x40004400
 800261c:	40011400 	.word	0x40011400

08002620 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8002620:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	4601      	mov	r1, r0
 800262c:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 800262e:	79f9      	ldrb	r1, [r7, #7]
 8002630:	2000      	movs	r0, #0
 8002632:	460a      	mov	r2, r1
 8002634:	4603      	mov	r3, r0
 8002636:	491f      	ldr	r1, [pc, #124]	; (80026b4 <getValueBaudRate+0x94>)
 8002638:	fb01 f003 	mul.w	r0, r1, r3
 800263c:	2102      	movs	r1, #2
 800263e:	fb02 f101 	mul.w	r1, r2, r1
 8002642:	4401      	add	r1, r0
 8002644:	481b      	ldr	r0, [pc, #108]	; (80026b4 <getValueBaudRate+0x94>)
 8002646:	fba2 4500 	umull	r4, r5, r2, r0
 800264a:	194b      	adds	r3, r1, r5
 800264c:	461d      	mov	r5, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	2200      	movs	r2, #0
 8002654:	4698      	mov	r8, r3
 8002656:	4691      	mov	r9, r2
 8002658:	4642      	mov	r2, r8
 800265a:	464b      	mov	r3, r9
 800265c:	4620      	mov	r0, r4
 800265e:	4629      	mov	r1, r5
 8002660:	f7fe fb2a 	bl	8000cb8 <__aeabi_ldivmod>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4613      	mov	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <getValueBaudRate+0x98>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	0b5b      	lsrs	r3, r3, #13
 8002676:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f242 7210 	movw	r2, #10000	; 0x2710
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <getValueBaudRate+0x98>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	0a5b      	lsrs	r3, r3, #9
 8002696:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	b29b      	uxth	r3, r3
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	b29a      	uxth	r2, r3
 80026a0:	7afb      	ldrb	r3, [r7, #11]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	4313      	orrs	r3, r2
 80026a6:	813b      	strh	r3, [r7, #8]

    return value;
 80026a8:	893b      	ldrh	r3, [r7, #8]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026b4:	540be400 	.word	0x540be400
 80026b8:	d1b71759 	.word	0xd1b71759

080026bc <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <writeMsgForTXE+0x64>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d111      	bne.n	80026f2 <writeMsgForTXE+0x36>
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <writeMsgForTXE+0x68>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10d      	bne.n	80026f2 <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 80026d6:	6839      	ldr	r1, [r7, #0]
 80026d8:	4813      	ldr	r0, [pc, #76]	; (8002728 <writeMsgForTXE+0x6c>)
 80026da:	f001 f8a9 	bl	8003830 <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <writeMsgForTXE+0x70>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2101      	movs	r1, #1
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f830 	bl	8002750 <interruptionTX>
 80026f0:	e012      	b.n	8002718 <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <writeMsgForTXE+0x74>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	2364      	movs	r3, #100	; 0x64
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <writeMsgForTXE+0x78>)
 8002700:	4413      	add	r3, r2
 8002702:	6839      	ldr	r1, [r7, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f001 f893 	bl	8003830 <siprintf>
		inLine++;
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <writeMsgForTXE+0x74>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <writeMsgForTXE+0x74>)
 8002714:	701a      	strb	r2, [r3, #0]
	}
}
 8002716:	bf00      	nop
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000afe 	.word	0x20000afe
 8002724:	20000afd 	.word	0x20000afd
 8002728:	200002c8 	.word	0x200002c8
 800272c:	20000aff 	.word	0x20000aff
 8002730:	20000afc 	.word	0x20000afc
 8002734:	2000032c 	.word	0x2000032c

08002738 <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
	return auxRxData;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <getRxData+0x14>)
 800273e:	781b      	ldrb	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	200002c4 	.word	0x200002c4

08002750 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d10c      	bne.n	800277c <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 800277a:	e005      	b.n	8002788 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	60da      	str	r2, [r3, #12]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
	__NOP();
 8002798:	bf00      	nop
}
 800279a:	bf00      	nop
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
	__NOP();
 80027a8:	bf00      	nop
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 80027b8:	4b37      	ldr	r3, [pc, #220]	; (8002898 <USART1_IRQHandler+0xe4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 80027c6:	4b34      	ldr	r3, [pc, #208]	; (8002898 <USART1_IRQHandler+0xe4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4b33      	ldr	r3, [pc, #204]	; (800289c <USART1_IRQHandler+0xe8>)
 80027d0:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 80027d2:	f7ff ffdf 	bl	8002794 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 80027d6:	e05d      	b.n	8002894 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 80027d8:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <USART1_IRQHandler+0xe4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d055      	beq.n	8002892 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80027e6:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <USART1_IRQHandler+0xec>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10b      	bne.n	8002806 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 80027ee:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <USART1_IRQHandler+0xf0>)
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	4b29      	ldr	r3, [pc, #164]	; (8002898 <USART1_IRQHandler+0xe4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <USART1_IRQHandler+0xe4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ffa6 	bl	8002750 <interruptionTX>
}
 8002804:	e046      	b.n	8002894 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <USART1_IRQHandler+0xec>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d142      	bne.n	8002894 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <USART1_IRQHandler+0xf4>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	4b25      	ldr	r3, [pc, #148]	; (80028ac <USART1_IRQHandler+0xf8>)
 8002816:	5c9b      	ldrb	r3, [r3, r2]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00e      	beq.n	800283a <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 800281c:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <USART1_IRQHandler+0xf4>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4b22      	ldr	r3, [pc, #136]	; (80028ac <USART1_IRQHandler+0xf8>)
 8002824:	5c9a      	ldrb	r2, [r3, r2]
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <USART1_IRQHandler+0xe4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
				posChar++;
 800282c:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <USART1_IRQHandler+0xf4>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <USART1_IRQHandler+0xf4>)
 8002836:	701a      	strb	r2, [r3, #0]
}
 8002838:	e02c      	b.n	8002894 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <USART1_IRQHandler+0xfc>)
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <USART1_IRQHandler+0x100>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d215      	bcs.n	8002872 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <USART1_IRQHandler+0xfc>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	2364      	movs	r3, #100	; 0x64
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <USART1_IRQHandler+0x104>)
 8002854:	4413      	add	r3, r2
 8002856:	4619      	mov	r1, r3
 8002858:	4814      	ldr	r0, [pc, #80]	; (80028ac <USART1_IRQHandler+0xf8>)
 800285a:	f000 ffe9 	bl	8003830 <siprintf>
					posChar = 0;
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <USART1_IRQHandler+0xf4>)
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <USART1_IRQHandler+0xfc>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <USART1_IRQHandler+0xfc>)
 800286e:	701a      	strb	r2, [r3, #0]
}
 8002870:	e010      	b.n	8002894 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <USART1_IRQHandler+0xe4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff69 	bl	8002750 <interruptionTX>
					posChar = 0;
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <USART1_IRQHandler+0xf4>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <USART1_IRQHandler+0xfc>)
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <USART1_IRQHandler+0x100>)
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
}
 8002890:	e000      	b.n	8002894 <USART1_IRQHandler+0xe0>
		__NOP();
 8002892:	bf00      	nop
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200002b8 	.word	0x200002b8
 800289c:	200002c4 	.word	0x200002c4
 80028a0:	20000aff 	.word	0x20000aff
 80028a4:	200002c5 	.word	0x200002c5
 80028a8:	20000afe 	.word	0x20000afe
 80028ac:	200002c8 	.word	0x200002c8
 80028b0:	20000afd 	.word	0x20000afd
 80028b4:	20000afc 	.word	0x20000afc
 80028b8:	2000032c 	.word	0x2000032c

080028bc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 80028c0:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <USART2_IRQHandler+0xe4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 80028ce:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <USART2_IRQHandler+0xe4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <USART2_IRQHandler+0xe8>)
 80028d8:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 80028da:	f7fe fcbb 	bl	8001254 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 80028de:	e05d      	b.n	800299c <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 80028e0:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <USART2_IRQHandler+0xe4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d055      	beq.n	800299a <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80028ee:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <USART2_IRQHandler+0xec>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10b      	bne.n	800290e <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 80028f6:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <USART2_IRQHandler+0xf0>)
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <USART2_IRQHandler+0xe4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <USART2_IRQHandler+0xe4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff22 	bl	8002750 <interruptionTX>
}
 800290c:	e046      	b.n	800299c <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800290e:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <USART2_IRQHandler+0xec>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d142      	bne.n	800299c <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8002916:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <USART2_IRQHandler+0xf4>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <USART2_IRQHandler+0xf8>)
 800291e:	5c9b      	ldrb	r3, [r3, r2]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00e      	beq.n	8002942 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8002924:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <USART2_IRQHandler+0xf4>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <USART2_IRQHandler+0xf8>)
 800292c:	5c9a      	ldrb	r2, [r3, r2]
 800292e:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <USART2_IRQHandler+0xe4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
				posChar++;
 8002934:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <USART2_IRQHandler+0xf4>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	b2da      	uxtb	r2, r3
 800293c:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <USART2_IRQHandler+0xf4>)
 800293e:	701a      	strb	r2, [r3, #0]
}
 8002940:	e02c      	b.n	800299c <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <USART2_IRQHandler+0xfc>)
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <USART2_IRQHandler+0x100>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d215      	bcs.n	800297a <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <USART2_IRQHandler+0xfc>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	2364      	movs	r3, #100	; 0x64
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <USART2_IRQHandler+0x104>)
 800295c:	4413      	add	r3, r2
 800295e:	4619      	mov	r1, r3
 8002960:	4814      	ldr	r0, [pc, #80]	; (80029b4 <USART2_IRQHandler+0xf8>)
 8002962:	f000 ff65 	bl	8003830 <siprintf>
					posChar = 0;
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <USART2_IRQHandler+0xf4>)
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <USART2_IRQHandler+0xfc>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	3301      	adds	r3, #1
 8002972:	b2da      	uxtb	r2, r3
 8002974:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <USART2_IRQHandler+0xfc>)
 8002976:	701a      	strb	r2, [r3, #0]
}
 8002978:	e010      	b.n	800299c <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <USART2_IRQHandler+0xe4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fee5 	bl	8002750 <interruptionTX>
					posChar = 0;
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <USART2_IRQHandler+0xf4>)
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <USART2_IRQHandler+0xfc>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <USART2_IRQHandler+0x100>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
}
 8002998:	e000      	b.n	800299c <USART2_IRQHandler+0xe0>
		__NOP();
 800299a:	bf00      	nop
}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200002bc 	.word	0x200002bc
 80029a4:	200002c4 	.word	0x200002c4
 80029a8:	20000aff 	.word	0x20000aff
 80029ac:	200002c5 	.word	0x200002c5
 80029b0:	20000afe 	.word	0x20000afe
 80029b4:	200002c8 	.word	0x200002c8
 80029b8:	20000afd 	.word	0x20000afd
 80029bc:	20000afc 	.word	0x20000afc
 80029c0:	2000032c 	.word	0x2000032c

080029c4 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 80029c8:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <USART6_IRQHandler+0xe4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d008      	beq.n	80029e8 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 80029d6:	4b34      	ldr	r3, [pc, #208]	; (8002aa8 <USART6_IRQHandler+0xe4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4b33      	ldr	r3, [pc, #204]	; (8002aac <USART6_IRQHandler+0xe8>)
 80029e0:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 80029e2:	f7ff fedf 	bl	80027a4 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 80029e6:	e05d      	b.n	8002aa4 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 80029e8:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <USART6_IRQHandler+0xe4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d055      	beq.n	8002aa2 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80029f6:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <USART6_IRQHandler+0xec>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10b      	bne.n	8002a16 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 80029fe:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <USART6_IRQHandler+0xf0>)
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	4b29      	ldr	r3, [pc, #164]	; (8002aa8 <USART6_IRQHandler+0xe4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8002a08:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <USART6_IRQHandler+0xe4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fe9e 	bl	8002750 <interruptionTX>
}
 8002a14:	e046      	b.n	8002aa4 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8002a16:	4b26      	ldr	r3, [pc, #152]	; (8002ab0 <USART6_IRQHandler+0xec>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d142      	bne.n	8002aa4 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8002a1e:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <USART6_IRQHandler+0xf4>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <USART6_IRQHandler+0xf8>)
 8002a26:	5c9b      	ldrb	r3, [r3, r2]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00e      	beq.n	8002a4a <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8002a2c:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <USART6_IRQHandler+0xf4>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b22      	ldr	r3, [pc, #136]	; (8002abc <USART6_IRQHandler+0xf8>)
 8002a34:	5c9a      	ldrb	r2, [r3, r2]
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <USART6_IRQHandler+0xe4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
				posChar++;
 8002a3c:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <USART6_IRQHandler+0xf4>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	3301      	adds	r3, #1
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <USART6_IRQHandler+0xf4>)
 8002a46:	701a      	strb	r2, [r3, #0]
}
 8002a48:	e02c      	b.n	8002aa4 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <USART6_IRQHandler+0xfc>)
 8002a4c:	781a      	ldrb	r2, [r3, #0]
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <USART6_IRQHandler+0x100>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d215      	bcs.n	8002a82 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <USART6_IRQHandler+0xfc>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2364      	movs	r3, #100	; 0x64
 8002a5e:	fb02 f303 	mul.w	r3, r2, r3
 8002a62:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <USART6_IRQHandler+0x104>)
 8002a64:	4413      	add	r3, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	4814      	ldr	r0, [pc, #80]	; (8002abc <USART6_IRQHandler+0xf8>)
 8002a6a:	f000 fee1 	bl	8003830 <siprintf>
					posChar = 0;
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <USART6_IRQHandler+0xf4>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8002a74:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <USART6_IRQHandler+0xfc>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <USART6_IRQHandler+0xfc>)
 8002a7e:	701a      	strb	r2, [r3, #0]
}
 8002a80:	e010      	b.n	8002aa4 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8002a82:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <USART6_IRQHandler+0xe4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fe61 	bl	8002750 <interruptionTX>
					posChar = 0;
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <USART6_IRQHandler+0xf4>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <USART6_IRQHandler+0xfc>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <USART6_IRQHandler+0x100>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
}
 8002aa0:	e000      	b.n	8002aa4 <USART6_IRQHandler+0xe0>
		__NOP();
 8002aa2:	bf00      	nop
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	200002c0 	.word	0x200002c0
 8002aac:	200002c4 	.word	0x200002c4
 8002ab0:	20000aff 	.word	0x20000aff
 8002ab4:	200002c5 	.word	0x200002c5
 8002ab8:	20000afe 	.word	0x20000afe
 8002abc:	200002c8 	.word	0x200002c8
 8002ac0:	20000afd 	.word	0x20000afd
 8002ac4:	20000afc 	.word	0x20000afc
 8002ac8:	2000032c 	.word	0x2000032c

08002acc <__errno>:
 8002acc:	4b01      	ldr	r3, [pc, #4]	; (8002ad4 <__errno+0x8>)
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <__libc_init_array>:
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	4d0d      	ldr	r5, [pc, #52]	; (8002b10 <__libc_init_array+0x38>)
 8002adc:	4c0d      	ldr	r4, [pc, #52]	; (8002b14 <__libc_init_array+0x3c>)
 8002ade:	1b64      	subs	r4, r4, r5
 8002ae0:	10a4      	asrs	r4, r4, #2
 8002ae2:	2600      	movs	r6, #0
 8002ae4:	42a6      	cmp	r6, r4
 8002ae6:	d109      	bne.n	8002afc <__libc_init_array+0x24>
 8002ae8:	4d0b      	ldr	r5, [pc, #44]	; (8002b18 <__libc_init_array+0x40>)
 8002aea:	4c0c      	ldr	r4, [pc, #48]	; (8002b1c <__libc_init_array+0x44>)
 8002aec:	f005 f8ca 	bl	8007c84 <_init>
 8002af0:	1b64      	subs	r4, r4, r5
 8002af2:	10a4      	asrs	r4, r4, #2
 8002af4:	2600      	movs	r6, #0
 8002af6:	42a6      	cmp	r6, r4
 8002af8:	d105      	bne.n	8002b06 <__libc_init_array+0x2e>
 8002afa:	bd70      	pop	{r4, r5, r6, pc}
 8002afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b00:	4798      	blx	r3
 8002b02:	3601      	adds	r6, #1
 8002b04:	e7ee      	b.n	8002ae4 <__libc_init_array+0xc>
 8002b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b0a:	4798      	blx	r3
 8002b0c:	3601      	adds	r6, #1
 8002b0e:	e7f2      	b.n	8002af6 <__libc_init_array+0x1e>
 8002b10:	080082f4 	.word	0x080082f4
 8002b14:	080082f4 	.word	0x080082f4
 8002b18:	080082f4 	.word	0x080082f4
 8002b1c:	080082f8 	.word	0x080082f8

08002b20 <memset>:
 8002b20:	4402      	add	r2, r0
 8002b22:	4603      	mov	r3, r0
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d100      	bne.n	8002b2a <memset+0xa>
 8002b28:	4770      	bx	lr
 8002b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b2e:	e7f9      	b.n	8002b24 <memset+0x4>

08002b30 <__cvt>:
 8002b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b34:	ec55 4b10 	vmov	r4, r5, d0
 8002b38:	2d00      	cmp	r5, #0
 8002b3a:	460e      	mov	r6, r1
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	462b      	mov	r3, r5
 8002b40:	bfbb      	ittet	lt
 8002b42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002b46:	461d      	movlt	r5, r3
 8002b48:	2300      	movge	r3, #0
 8002b4a:	232d      	movlt	r3, #45	; 0x2d
 8002b4c:	700b      	strb	r3, [r1, #0]
 8002b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002b54:	4691      	mov	r9, r2
 8002b56:	f023 0820 	bic.w	r8, r3, #32
 8002b5a:	bfbc      	itt	lt
 8002b5c:	4622      	movlt	r2, r4
 8002b5e:	4614      	movlt	r4, r2
 8002b60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b64:	d005      	beq.n	8002b72 <__cvt+0x42>
 8002b66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002b6a:	d100      	bne.n	8002b6e <__cvt+0x3e>
 8002b6c:	3601      	adds	r6, #1
 8002b6e:	2102      	movs	r1, #2
 8002b70:	e000      	b.n	8002b74 <__cvt+0x44>
 8002b72:	2103      	movs	r1, #3
 8002b74:	ab03      	add	r3, sp, #12
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	ab02      	add	r3, sp, #8
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	ec45 4b10 	vmov	d0, r4, r5
 8002b80:	4653      	mov	r3, sl
 8002b82:	4632      	mov	r2, r6
 8002b84:	f001 fe44 	bl	8004810 <_dtoa_r>
 8002b88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002b8c:	4607      	mov	r7, r0
 8002b8e:	d102      	bne.n	8002b96 <__cvt+0x66>
 8002b90:	f019 0f01 	tst.w	r9, #1
 8002b94:	d022      	beq.n	8002bdc <__cvt+0xac>
 8002b96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b9a:	eb07 0906 	add.w	r9, r7, r6
 8002b9e:	d110      	bne.n	8002bc2 <__cvt+0x92>
 8002ba0:	783b      	ldrb	r3, [r7, #0]
 8002ba2:	2b30      	cmp	r3, #48	; 0x30
 8002ba4:	d10a      	bne.n	8002bbc <__cvt+0x8c>
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2300      	movs	r3, #0
 8002baa:	4620      	mov	r0, r4
 8002bac:	4629      	mov	r1, r5
 8002bae:	f7fd ffa3 	bl	8000af8 <__aeabi_dcmpeq>
 8002bb2:	b918      	cbnz	r0, 8002bbc <__cvt+0x8c>
 8002bb4:	f1c6 0601 	rsb	r6, r6, #1
 8002bb8:	f8ca 6000 	str.w	r6, [sl]
 8002bbc:	f8da 3000 	ldr.w	r3, [sl]
 8002bc0:	4499      	add	r9, r3
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	4629      	mov	r1, r5
 8002bca:	f7fd ff95 	bl	8000af8 <__aeabi_dcmpeq>
 8002bce:	b108      	cbz	r0, 8002bd4 <__cvt+0xa4>
 8002bd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8002bd4:	2230      	movs	r2, #48	; 0x30
 8002bd6:	9b03      	ldr	r3, [sp, #12]
 8002bd8:	454b      	cmp	r3, r9
 8002bda:	d307      	bcc.n	8002bec <__cvt+0xbc>
 8002bdc:	9b03      	ldr	r3, [sp, #12]
 8002bde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002be0:	1bdb      	subs	r3, r3, r7
 8002be2:	4638      	mov	r0, r7
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	b004      	add	sp, #16
 8002be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bec:	1c59      	adds	r1, r3, #1
 8002bee:	9103      	str	r1, [sp, #12]
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e7f0      	b.n	8002bd6 <__cvt+0xa6>

08002bf4 <__exponent>:
 8002bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2900      	cmp	r1, #0
 8002bfa:	bfb8      	it	lt
 8002bfc:	4249      	neglt	r1, r1
 8002bfe:	f803 2b02 	strb.w	r2, [r3], #2
 8002c02:	bfb4      	ite	lt
 8002c04:	222d      	movlt	r2, #45	; 0x2d
 8002c06:	222b      	movge	r2, #43	; 0x2b
 8002c08:	2909      	cmp	r1, #9
 8002c0a:	7042      	strb	r2, [r0, #1]
 8002c0c:	dd2a      	ble.n	8002c64 <__exponent+0x70>
 8002c0e:	f10d 0407 	add.w	r4, sp, #7
 8002c12:	46a4      	mov	ip, r4
 8002c14:	270a      	movs	r7, #10
 8002c16:	46a6      	mov	lr, r4
 8002c18:	460a      	mov	r2, r1
 8002c1a:	fb91 f6f7 	sdiv	r6, r1, r7
 8002c1e:	fb07 1516 	mls	r5, r7, r6, r1
 8002c22:	3530      	adds	r5, #48	; 0x30
 8002c24:	2a63      	cmp	r2, #99	; 0x63
 8002c26:	f104 34ff 	add.w	r4, r4, #4294967295
 8002c2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002c2e:	4631      	mov	r1, r6
 8002c30:	dcf1      	bgt.n	8002c16 <__exponent+0x22>
 8002c32:	3130      	adds	r1, #48	; 0x30
 8002c34:	f1ae 0502 	sub.w	r5, lr, #2
 8002c38:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002c3c:	1c44      	adds	r4, r0, #1
 8002c3e:	4629      	mov	r1, r5
 8002c40:	4561      	cmp	r1, ip
 8002c42:	d30a      	bcc.n	8002c5a <__exponent+0x66>
 8002c44:	f10d 0209 	add.w	r2, sp, #9
 8002c48:	eba2 020e 	sub.w	r2, r2, lr
 8002c4c:	4565      	cmp	r5, ip
 8002c4e:	bf88      	it	hi
 8002c50:	2200      	movhi	r2, #0
 8002c52:	4413      	add	r3, r2
 8002c54:	1a18      	subs	r0, r3, r0
 8002c56:	b003      	add	sp, #12
 8002c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002c62:	e7ed      	b.n	8002c40 <__exponent+0x4c>
 8002c64:	2330      	movs	r3, #48	; 0x30
 8002c66:	3130      	adds	r1, #48	; 0x30
 8002c68:	7083      	strb	r3, [r0, #2]
 8002c6a:	70c1      	strb	r1, [r0, #3]
 8002c6c:	1d03      	adds	r3, r0, #4
 8002c6e:	e7f1      	b.n	8002c54 <__exponent+0x60>

08002c70 <_printf_float>:
 8002c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c74:	ed2d 8b02 	vpush	{d8}
 8002c78:	b08d      	sub	sp, #52	; 0x34
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002c80:	4616      	mov	r6, r2
 8002c82:	461f      	mov	r7, r3
 8002c84:	4605      	mov	r5, r0
 8002c86:	f002 ff21 	bl	8005acc <_localeconv_r>
 8002c8a:	f8d0 a000 	ldr.w	sl, [r0]
 8002c8e:	4650      	mov	r0, sl
 8002c90:	f7fd fab0 	bl	80001f4 <strlen>
 8002c94:	2300      	movs	r3, #0
 8002c96:	930a      	str	r3, [sp, #40]	; 0x28
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	9305      	str	r3, [sp, #20]
 8002c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8002ca0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002ca4:	3307      	adds	r3, #7
 8002ca6:	f023 0307 	bic.w	r3, r3, #7
 8002caa:	f103 0208 	add.w	r2, r3, #8
 8002cae:	f8c8 2000 	str.w	r2, [r8]
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002cba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002cbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002cc2:	9307      	str	r3, [sp, #28]
 8002cc4:	f8cd 8018 	str.w	r8, [sp, #24]
 8002cc8:	ee08 0a10 	vmov	s16, r0
 8002ccc:	4b9f      	ldr	r3, [pc, #636]	; (8002f4c <_printf_float+0x2dc>)
 8002cce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd6:	f7fd ff41 	bl	8000b5c <__aeabi_dcmpun>
 8002cda:	bb88      	cbnz	r0, 8002d40 <_printf_float+0xd0>
 8002cdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002ce0:	4b9a      	ldr	r3, [pc, #616]	; (8002f4c <_printf_float+0x2dc>)
 8002ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce6:	f7fd ff1b 	bl	8000b20 <__aeabi_dcmple>
 8002cea:	bb48      	cbnz	r0, 8002d40 <_printf_float+0xd0>
 8002cec:	2200      	movs	r2, #0
 8002cee:	2300      	movs	r3, #0
 8002cf0:	4640      	mov	r0, r8
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	f7fd ff0a 	bl	8000b0c <__aeabi_dcmplt>
 8002cf8:	b110      	cbz	r0, 8002d00 <_printf_float+0x90>
 8002cfa:	232d      	movs	r3, #45	; 0x2d
 8002cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d00:	4b93      	ldr	r3, [pc, #588]	; (8002f50 <_printf_float+0x2e0>)
 8002d02:	4894      	ldr	r0, [pc, #592]	; (8002f54 <_printf_float+0x2e4>)
 8002d04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002d08:	bf94      	ite	ls
 8002d0a:	4698      	movls	r8, r3
 8002d0c:	4680      	movhi	r8, r0
 8002d0e:	2303      	movs	r3, #3
 8002d10:	6123      	str	r3, [r4, #16]
 8002d12:	9b05      	ldr	r3, [sp, #20]
 8002d14:	f023 0204 	bic.w	r2, r3, #4
 8002d18:	6022      	str	r2, [r4, #0]
 8002d1a:	f04f 0900 	mov.w	r9, #0
 8002d1e:	9700      	str	r7, [sp, #0]
 8002d20:	4633      	mov	r3, r6
 8002d22:	aa0b      	add	r2, sp, #44	; 0x2c
 8002d24:	4621      	mov	r1, r4
 8002d26:	4628      	mov	r0, r5
 8002d28:	f000 f9d8 	bl	80030dc <_printf_common>
 8002d2c:	3001      	adds	r0, #1
 8002d2e:	f040 8090 	bne.w	8002e52 <_printf_float+0x1e2>
 8002d32:	f04f 30ff 	mov.w	r0, #4294967295
 8002d36:	b00d      	add	sp, #52	; 0x34
 8002d38:	ecbd 8b02 	vpop	{d8}
 8002d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	4640      	mov	r0, r8
 8002d46:	4649      	mov	r1, r9
 8002d48:	f7fd ff08 	bl	8000b5c <__aeabi_dcmpun>
 8002d4c:	b140      	cbz	r0, 8002d60 <_printf_float+0xf0>
 8002d4e:	464b      	mov	r3, r9
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bfbc      	itt	lt
 8002d54:	232d      	movlt	r3, #45	; 0x2d
 8002d56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002d5a:	487f      	ldr	r0, [pc, #508]	; (8002f58 <_printf_float+0x2e8>)
 8002d5c:	4b7f      	ldr	r3, [pc, #508]	; (8002f5c <_printf_float+0x2ec>)
 8002d5e:	e7d1      	b.n	8002d04 <_printf_float+0x94>
 8002d60:	6863      	ldr	r3, [r4, #4]
 8002d62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002d66:	9206      	str	r2, [sp, #24]
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	d13f      	bne.n	8002dec <_printf_float+0x17c>
 8002d6c:	2306      	movs	r3, #6
 8002d6e:	6063      	str	r3, [r4, #4]
 8002d70:	9b05      	ldr	r3, [sp, #20]
 8002d72:	6861      	ldr	r1, [r4, #4]
 8002d74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9303      	str	r3, [sp, #12]
 8002d7c:	ab0a      	add	r3, sp, #40	; 0x28
 8002d7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002d82:	ab09      	add	r3, sp, #36	; 0x24
 8002d84:	ec49 8b10 	vmov	d0, r8, r9
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	6022      	str	r2, [r4, #0]
 8002d8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002d90:	4628      	mov	r0, r5
 8002d92:	f7ff fecd 	bl	8002b30 <__cvt>
 8002d96:	9b06      	ldr	r3, [sp, #24]
 8002d98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d9a:	2b47      	cmp	r3, #71	; 0x47
 8002d9c:	4680      	mov	r8, r0
 8002d9e:	d108      	bne.n	8002db2 <_printf_float+0x142>
 8002da0:	1cc8      	adds	r0, r1, #3
 8002da2:	db02      	blt.n	8002daa <_printf_float+0x13a>
 8002da4:	6863      	ldr	r3, [r4, #4]
 8002da6:	4299      	cmp	r1, r3
 8002da8:	dd41      	ble.n	8002e2e <_printf_float+0x1be>
 8002daa:	f1ab 0b02 	sub.w	fp, fp, #2
 8002dae:	fa5f fb8b 	uxtb.w	fp, fp
 8002db2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002db6:	d820      	bhi.n	8002dfa <_printf_float+0x18a>
 8002db8:	3901      	subs	r1, #1
 8002dba:	465a      	mov	r2, fp
 8002dbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002dc0:	9109      	str	r1, [sp, #36]	; 0x24
 8002dc2:	f7ff ff17 	bl	8002bf4 <__exponent>
 8002dc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002dc8:	1813      	adds	r3, r2, r0
 8002dca:	2a01      	cmp	r2, #1
 8002dcc:	4681      	mov	r9, r0
 8002dce:	6123      	str	r3, [r4, #16]
 8002dd0:	dc02      	bgt.n	8002dd8 <_printf_float+0x168>
 8002dd2:	6822      	ldr	r2, [r4, #0]
 8002dd4:	07d2      	lsls	r2, r2, #31
 8002dd6:	d501      	bpl.n	8002ddc <_printf_float+0x16c>
 8002dd8:	3301      	adds	r3, #1
 8002dda:	6123      	str	r3, [r4, #16]
 8002ddc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d09c      	beq.n	8002d1e <_printf_float+0xae>
 8002de4:	232d      	movs	r3, #45	; 0x2d
 8002de6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dea:	e798      	b.n	8002d1e <_printf_float+0xae>
 8002dec:	9a06      	ldr	r2, [sp, #24]
 8002dee:	2a47      	cmp	r2, #71	; 0x47
 8002df0:	d1be      	bne.n	8002d70 <_printf_float+0x100>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1bc      	bne.n	8002d70 <_printf_float+0x100>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e7b9      	b.n	8002d6e <_printf_float+0xfe>
 8002dfa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002dfe:	d118      	bne.n	8002e32 <_printf_float+0x1c2>
 8002e00:	2900      	cmp	r1, #0
 8002e02:	6863      	ldr	r3, [r4, #4]
 8002e04:	dd0b      	ble.n	8002e1e <_printf_float+0x1ae>
 8002e06:	6121      	str	r1, [r4, #16]
 8002e08:	b913      	cbnz	r3, 8002e10 <_printf_float+0x1a0>
 8002e0a:	6822      	ldr	r2, [r4, #0]
 8002e0c:	07d0      	lsls	r0, r2, #31
 8002e0e:	d502      	bpl.n	8002e16 <_printf_float+0x1a6>
 8002e10:	3301      	adds	r3, #1
 8002e12:	440b      	add	r3, r1
 8002e14:	6123      	str	r3, [r4, #16]
 8002e16:	65a1      	str	r1, [r4, #88]	; 0x58
 8002e18:	f04f 0900 	mov.w	r9, #0
 8002e1c:	e7de      	b.n	8002ddc <_printf_float+0x16c>
 8002e1e:	b913      	cbnz	r3, 8002e26 <_printf_float+0x1b6>
 8002e20:	6822      	ldr	r2, [r4, #0]
 8002e22:	07d2      	lsls	r2, r2, #31
 8002e24:	d501      	bpl.n	8002e2a <_printf_float+0x1ba>
 8002e26:	3302      	adds	r3, #2
 8002e28:	e7f4      	b.n	8002e14 <_printf_float+0x1a4>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e7f2      	b.n	8002e14 <_printf_float+0x1a4>
 8002e2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e34:	4299      	cmp	r1, r3
 8002e36:	db05      	blt.n	8002e44 <_printf_float+0x1d4>
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	6121      	str	r1, [r4, #16]
 8002e3c:	07d8      	lsls	r0, r3, #31
 8002e3e:	d5ea      	bpl.n	8002e16 <_printf_float+0x1a6>
 8002e40:	1c4b      	adds	r3, r1, #1
 8002e42:	e7e7      	b.n	8002e14 <_printf_float+0x1a4>
 8002e44:	2900      	cmp	r1, #0
 8002e46:	bfd4      	ite	le
 8002e48:	f1c1 0202 	rsble	r2, r1, #2
 8002e4c:	2201      	movgt	r2, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	e7e0      	b.n	8002e14 <_printf_float+0x1a4>
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	055a      	lsls	r2, r3, #21
 8002e56:	d407      	bmi.n	8002e68 <_printf_float+0x1f8>
 8002e58:	6923      	ldr	r3, [r4, #16]
 8002e5a:	4642      	mov	r2, r8
 8002e5c:	4631      	mov	r1, r6
 8002e5e:	4628      	mov	r0, r5
 8002e60:	47b8      	blx	r7
 8002e62:	3001      	adds	r0, #1
 8002e64:	d12c      	bne.n	8002ec0 <_printf_float+0x250>
 8002e66:	e764      	b.n	8002d32 <_printf_float+0xc2>
 8002e68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002e6c:	f240 80e0 	bls.w	8003030 <_printf_float+0x3c0>
 8002e70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e74:	2200      	movs	r2, #0
 8002e76:	2300      	movs	r3, #0
 8002e78:	f7fd fe3e 	bl	8000af8 <__aeabi_dcmpeq>
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	d034      	beq.n	8002eea <_printf_float+0x27a>
 8002e80:	4a37      	ldr	r2, [pc, #220]	; (8002f60 <_printf_float+0x2f0>)
 8002e82:	2301      	movs	r3, #1
 8002e84:	4631      	mov	r1, r6
 8002e86:	4628      	mov	r0, r5
 8002e88:	47b8      	blx	r7
 8002e8a:	3001      	adds	r0, #1
 8002e8c:	f43f af51 	beq.w	8002d32 <_printf_float+0xc2>
 8002e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e94:	429a      	cmp	r2, r3
 8002e96:	db02      	blt.n	8002e9e <_printf_float+0x22e>
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	07d8      	lsls	r0, r3, #31
 8002e9c:	d510      	bpl.n	8002ec0 <_printf_float+0x250>
 8002e9e:	ee18 3a10 	vmov	r3, s16
 8002ea2:	4652      	mov	r2, sl
 8002ea4:	4631      	mov	r1, r6
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	47b8      	blx	r7
 8002eaa:	3001      	adds	r0, #1
 8002eac:	f43f af41 	beq.w	8002d32 <_printf_float+0xc2>
 8002eb0:	f04f 0800 	mov.w	r8, #0
 8002eb4:	f104 091a 	add.w	r9, r4, #26
 8002eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	4543      	cmp	r3, r8
 8002ebe:	dc09      	bgt.n	8002ed4 <_printf_float+0x264>
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	079b      	lsls	r3, r3, #30
 8002ec4:	f100 8105 	bmi.w	80030d2 <_printf_float+0x462>
 8002ec8:	68e0      	ldr	r0, [r4, #12]
 8002eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ecc:	4298      	cmp	r0, r3
 8002ece:	bfb8      	it	lt
 8002ed0:	4618      	movlt	r0, r3
 8002ed2:	e730      	b.n	8002d36 <_printf_float+0xc6>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	464a      	mov	r2, r9
 8002ed8:	4631      	mov	r1, r6
 8002eda:	4628      	mov	r0, r5
 8002edc:	47b8      	blx	r7
 8002ede:	3001      	adds	r0, #1
 8002ee0:	f43f af27 	beq.w	8002d32 <_printf_float+0xc2>
 8002ee4:	f108 0801 	add.w	r8, r8, #1
 8002ee8:	e7e6      	b.n	8002eb8 <_printf_float+0x248>
 8002eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	dc39      	bgt.n	8002f64 <_printf_float+0x2f4>
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	; (8002f60 <_printf_float+0x2f0>)
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	4631      	mov	r1, r6
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	47b8      	blx	r7
 8002efa:	3001      	adds	r0, #1
 8002efc:	f43f af19 	beq.w	8002d32 <_printf_float+0xc2>
 8002f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f04:	4313      	orrs	r3, r2
 8002f06:	d102      	bne.n	8002f0e <_printf_float+0x29e>
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	07d9      	lsls	r1, r3, #31
 8002f0c:	d5d8      	bpl.n	8002ec0 <_printf_float+0x250>
 8002f0e:	ee18 3a10 	vmov	r3, s16
 8002f12:	4652      	mov	r2, sl
 8002f14:	4631      	mov	r1, r6
 8002f16:	4628      	mov	r0, r5
 8002f18:	47b8      	blx	r7
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	f43f af09 	beq.w	8002d32 <_printf_float+0xc2>
 8002f20:	f04f 0900 	mov.w	r9, #0
 8002f24:	f104 0a1a 	add.w	sl, r4, #26
 8002f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f2a:	425b      	negs	r3, r3
 8002f2c:	454b      	cmp	r3, r9
 8002f2e:	dc01      	bgt.n	8002f34 <_printf_float+0x2c4>
 8002f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f32:	e792      	b.n	8002e5a <_printf_float+0x1ea>
 8002f34:	2301      	movs	r3, #1
 8002f36:	4652      	mov	r2, sl
 8002f38:	4631      	mov	r1, r6
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	47b8      	blx	r7
 8002f3e:	3001      	adds	r0, #1
 8002f40:	f43f aef7 	beq.w	8002d32 <_printf_float+0xc2>
 8002f44:	f109 0901 	add.w	r9, r9, #1
 8002f48:	e7ee      	b.n	8002f28 <_printf_float+0x2b8>
 8002f4a:	bf00      	nop
 8002f4c:	7fefffff 	.word	0x7fefffff
 8002f50:	08007e34 	.word	0x08007e34
 8002f54:	08007e38 	.word	0x08007e38
 8002f58:	08007e40 	.word	0x08007e40
 8002f5c:	08007e3c 	.word	0x08007e3c
 8002f60:	08008239 	.word	0x08008239
 8002f64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	bfa8      	it	ge
 8002f6c:	461a      	movge	r2, r3
 8002f6e:	2a00      	cmp	r2, #0
 8002f70:	4691      	mov	r9, r2
 8002f72:	dc37      	bgt.n	8002fe4 <_printf_float+0x374>
 8002f74:	f04f 0b00 	mov.w	fp, #0
 8002f78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f7c:	f104 021a 	add.w	r2, r4, #26
 8002f80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f82:	9305      	str	r3, [sp, #20]
 8002f84:	eba3 0309 	sub.w	r3, r3, r9
 8002f88:	455b      	cmp	r3, fp
 8002f8a:	dc33      	bgt.n	8002ff4 <_printf_float+0x384>
 8002f8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f90:	429a      	cmp	r2, r3
 8002f92:	db3b      	blt.n	800300c <_printf_float+0x39c>
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	07da      	lsls	r2, r3, #31
 8002f98:	d438      	bmi.n	800300c <_printf_float+0x39c>
 8002f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f9c:	9a05      	ldr	r2, [sp, #20]
 8002f9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002fa0:	1a9a      	subs	r2, r3, r2
 8002fa2:	eba3 0901 	sub.w	r9, r3, r1
 8002fa6:	4591      	cmp	r9, r2
 8002fa8:	bfa8      	it	ge
 8002faa:	4691      	movge	r9, r2
 8002fac:	f1b9 0f00 	cmp.w	r9, #0
 8002fb0:	dc35      	bgt.n	800301e <_printf_float+0x3ae>
 8002fb2:	f04f 0800 	mov.w	r8, #0
 8002fb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002fba:	f104 0a1a 	add.w	sl, r4, #26
 8002fbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	eba3 0309 	sub.w	r3, r3, r9
 8002fc8:	4543      	cmp	r3, r8
 8002fca:	f77f af79 	ble.w	8002ec0 <_printf_float+0x250>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	4652      	mov	r2, sl
 8002fd2:	4631      	mov	r1, r6
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	47b8      	blx	r7
 8002fd8:	3001      	adds	r0, #1
 8002fda:	f43f aeaa 	beq.w	8002d32 <_printf_float+0xc2>
 8002fde:	f108 0801 	add.w	r8, r8, #1
 8002fe2:	e7ec      	b.n	8002fbe <_printf_float+0x34e>
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	4631      	mov	r1, r6
 8002fe8:	4642      	mov	r2, r8
 8002fea:	4628      	mov	r0, r5
 8002fec:	47b8      	blx	r7
 8002fee:	3001      	adds	r0, #1
 8002ff0:	d1c0      	bne.n	8002f74 <_printf_float+0x304>
 8002ff2:	e69e      	b.n	8002d32 <_printf_float+0xc2>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	4631      	mov	r1, r6
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	9205      	str	r2, [sp, #20]
 8002ffc:	47b8      	blx	r7
 8002ffe:	3001      	adds	r0, #1
 8003000:	f43f ae97 	beq.w	8002d32 <_printf_float+0xc2>
 8003004:	9a05      	ldr	r2, [sp, #20]
 8003006:	f10b 0b01 	add.w	fp, fp, #1
 800300a:	e7b9      	b.n	8002f80 <_printf_float+0x310>
 800300c:	ee18 3a10 	vmov	r3, s16
 8003010:	4652      	mov	r2, sl
 8003012:	4631      	mov	r1, r6
 8003014:	4628      	mov	r0, r5
 8003016:	47b8      	blx	r7
 8003018:	3001      	adds	r0, #1
 800301a:	d1be      	bne.n	8002f9a <_printf_float+0x32a>
 800301c:	e689      	b.n	8002d32 <_printf_float+0xc2>
 800301e:	9a05      	ldr	r2, [sp, #20]
 8003020:	464b      	mov	r3, r9
 8003022:	4442      	add	r2, r8
 8003024:	4631      	mov	r1, r6
 8003026:	4628      	mov	r0, r5
 8003028:	47b8      	blx	r7
 800302a:	3001      	adds	r0, #1
 800302c:	d1c1      	bne.n	8002fb2 <_printf_float+0x342>
 800302e:	e680      	b.n	8002d32 <_printf_float+0xc2>
 8003030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003032:	2a01      	cmp	r2, #1
 8003034:	dc01      	bgt.n	800303a <_printf_float+0x3ca>
 8003036:	07db      	lsls	r3, r3, #31
 8003038:	d538      	bpl.n	80030ac <_printf_float+0x43c>
 800303a:	2301      	movs	r3, #1
 800303c:	4642      	mov	r2, r8
 800303e:	4631      	mov	r1, r6
 8003040:	4628      	mov	r0, r5
 8003042:	47b8      	blx	r7
 8003044:	3001      	adds	r0, #1
 8003046:	f43f ae74 	beq.w	8002d32 <_printf_float+0xc2>
 800304a:	ee18 3a10 	vmov	r3, s16
 800304e:	4652      	mov	r2, sl
 8003050:	4631      	mov	r1, r6
 8003052:	4628      	mov	r0, r5
 8003054:	47b8      	blx	r7
 8003056:	3001      	adds	r0, #1
 8003058:	f43f ae6b 	beq.w	8002d32 <_printf_float+0xc2>
 800305c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003060:	2200      	movs	r2, #0
 8003062:	2300      	movs	r3, #0
 8003064:	f7fd fd48 	bl	8000af8 <__aeabi_dcmpeq>
 8003068:	b9d8      	cbnz	r0, 80030a2 <_printf_float+0x432>
 800306a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800306c:	f108 0201 	add.w	r2, r8, #1
 8003070:	3b01      	subs	r3, #1
 8003072:	4631      	mov	r1, r6
 8003074:	4628      	mov	r0, r5
 8003076:	47b8      	blx	r7
 8003078:	3001      	adds	r0, #1
 800307a:	d10e      	bne.n	800309a <_printf_float+0x42a>
 800307c:	e659      	b.n	8002d32 <_printf_float+0xc2>
 800307e:	2301      	movs	r3, #1
 8003080:	4652      	mov	r2, sl
 8003082:	4631      	mov	r1, r6
 8003084:	4628      	mov	r0, r5
 8003086:	47b8      	blx	r7
 8003088:	3001      	adds	r0, #1
 800308a:	f43f ae52 	beq.w	8002d32 <_printf_float+0xc2>
 800308e:	f108 0801 	add.w	r8, r8, #1
 8003092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003094:	3b01      	subs	r3, #1
 8003096:	4543      	cmp	r3, r8
 8003098:	dcf1      	bgt.n	800307e <_printf_float+0x40e>
 800309a:	464b      	mov	r3, r9
 800309c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80030a0:	e6dc      	b.n	8002e5c <_printf_float+0x1ec>
 80030a2:	f04f 0800 	mov.w	r8, #0
 80030a6:	f104 0a1a 	add.w	sl, r4, #26
 80030aa:	e7f2      	b.n	8003092 <_printf_float+0x422>
 80030ac:	2301      	movs	r3, #1
 80030ae:	4642      	mov	r2, r8
 80030b0:	e7df      	b.n	8003072 <_printf_float+0x402>
 80030b2:	2301      	movs	r3, #1
 80030b4:	464a      	mov	r2, r9
 80030b6:	4631      	mov	r1, r6
 80030b8:	4628      	mov	r0, r5
 80030ba:	47b8      	blx	r7
 80030bc:	3001      	adds	r0, #1
 80030be:	f43f ae38 	beq.w	8002d32 <_printf_float+0xc2>
 80030c2:	f108 0801 	add.w	r8, r8, #1
 80030c6:	68e3      	ldr	r3, [r4, #12]
 80030c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030ca:	1a5b      	subs	r3, r3, r1
 80030cc:	4543      	cmp	r3, r8
 80030ce:	dcf0      	bgt.n	80030b2 <_printf_float+0x442>
 80030d0:	e6fa      	b.n	8002ec8 <_printf_float+0x258>
 80030d2:	f04f 0800 	mov.w	r8, #0
 80030d6:	f104 0919 	add.w	r9, r4, #25
 80030da:	e7f4      	b.n	80030c6 <_printf_float+0x456>

080030dc <_printf_common>:
 80030dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e0:	4616      	mov	r6, r2
 80030e2:	4699      	mov	r9, r3
 80030e4:	688a      	ldr	r2, [r1, #8]
 80030e6:	690b      	ldr	r3, [r1, #16]
 80030e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030ec:	4293      	cmp	r3, r2
 80030ee:	bfb8      	it	lt
 80030f0:	4613      	movlt	r3, r2
 80030f2:	6033      	str	r3, [r6, #0]
 80030f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030f8:	4607      	mov	r7, r0
 80030fa:	460c      	mov	r4, r1
 80030fc:	b10a      	cbz	r2, 8003102 <_printf_common+0x26>
 80030fe:	3301      	adds	r3, #1
 8003100:	6033      	str	r3, [r6, #0]
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	0699      	lsls	r1, r3, #26
 8003106:	bf42      	ittt	mi
 8003108:	6833      	ldrmi	r3, [r6, #0]
 800310a:	3302      	addmi	r3, #2
 800310c:	6033      	strmi	r3, [r6, #0]
 800310e:	6825      	ldr	r5, [r4, #0]
 8003110:	f015 0506 	ands.w	r5, r5, #6
 8003114:	d106      	bne.n	8003124 <_printf_common+0x48>
 8003116:	f104 0a19 	add.w	sl, r4, #25
 800311a:	68e3      	ldr	r3, [r4, #12]
 800311c:	6832      	ldr	r2, [r6, #0]
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	42ab      	cmp	r3, r5
 8003122:	dc26      	bgt.n	8003172 <_printf_common+0x96>
 8003124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003128:	1e13      	subs	r3, r2, #0
 800312a:	6822      	ldr	r2, [r4, #0]
 800312c:	bf18      	it	ne
 800312e:	2301      	movne	r3, #1
 8003130:	0692      	lsls	r2, r2, #26
 8003132:	d42b      	bmi.n	800318c <_printf_common+0xb0>
 8003134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003138:	4649      	mov	r1, r9
 800313a:	4638      	mov	r0, r7
 800313c:	47c0      	blx	r8
 800313e:	3001      	adds	r0, #1
 8003140:	d01e      	beq.n	8003180 <_printf_common+0xa4>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	68e5      	ldr	r5, [r4, #12]
 8003146:	6832      	ldr	r2, [r6, #0]
 8003148:	f003 0306 	and.w	r3, r3, #6
 800314c:	2b04      	cmp	r3, #4
 800314e:	bf08      	it	eq
 8003150:	1aad      	subeq	r5, r5, r2
 8003152:	68a3      	ldr	r3, [r4, #8]
 8003154:	6922      	ldr	r2, [r4, #16]
 8003156:	bf0c      	ite	eq
 8003158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800315c:	2500      	movne	r5, #0
 800315e:	4293      	cmp	r3, r2
 8003160:	bfc4      	itt	gt
 8003162:	1a9b      	subgt	r3, r3, r2
 8003164:	18ed      	addgt	r5, r5, r3
 8003166:	2600      	movs	r6, #0
 8003168:	341a      	adds	r4, #26
 800316a:	42b5      	cmp	r5, r6
 800316c:	d11a      	bne.n	80031a4 <_printf_common+0xc8>
 800316e:	2000      	movs	r0, #0
 8003170:	e008      	b.n	8003184 <_printf_common+0xa8>
 8003172:	2301      	movs	r3, #1
 8003174:	4652      	mov	r2, sl
 8003176:	4649      	mov	r1, r9
 8003178:	4638      	mov	r0, r7
 800317a:	47c0      	blx	r8
 800317c:	3001      	adds	r0, #1
 800317e:	d103      	bne.n	8003188 <_printf_common+0xac>
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003188:	3501      	adds	r5, #1
 800318a:	e7c6      	b.n	800311a <_printf_common+0x3e>
 800318c:	18e1      	adds	r1, r4, r3
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	2030      	movs	r0, #48	; 0x30
 8003192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003196:	4422      	add	r2, r4
 8003198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800319c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031a0:	3302      	adds	r3, #2
 80031a2:	e7c7      	b.n	8003134 <_printf_common+0x58>
 80031a4:	2301      	movs	r3, #1
 80031a6:	4622      	mov	r2, r4
 80031a8:	4649      	mov	r1, r9
 80031aa:	4638      	mov	r0, r7
 80031ac:	47c0      	blx	r8
 80031ae:	3001      	adds	r0, #1
 80031b0:	d0e6      	beq.n	8003180 <_printf_common+0xa4>
 80031b2:	3601      	adds	r6, #1
 80031b4:	e7d9      	b.n	800316a <_printf_common+0x8e>
	...

080031b8 <_printf_i>:
 80031b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031bc:	7e0f      	ldrb	r7, [r1, #24]
 80031be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031c0:	2f78      	cmp	r7, #120	; 0x78
 80031c2:	4691      	mov	r9, r2
 80031c4:	4680      	mov	r8, r0
 80031c6:	460c      	mov	r4, r1
 80031c8:	469a      	mov	sl, r3
 80031ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031ce:	d807      	bhi.n	80031e0 <_printf_i+0x28>
 80031d0:	2f62      	cmp	r7, #98	; 0x62
 80031d2:	d80a      	bhi.n	80031ea <_printf_i+0x32>
 80031d4:	2f00      	cmp	r7, #0
 80031d6:	f000 80d8 	beq.w	800338a <_printf_i+0x1d2>
 80031da:	2f58      	cmp	r7, #88	; 0x58
 80031dc:	f000 80a3 	beq.w	8003326 <_printf_i+0x16e>
 80031e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031e8:	e03a      	b.n	8003260 <_printf_i+0xa8>
 80031ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031ee:	2b15      	cmp	r3, #21
 80031f0:	d8f6      	bhi.n	80031e0 <_printf_i+0x28>
 80031f2:	a101      	add	r1, pc, #4	; (adr r1, 80031f8 <_printf_i+0x40>)
 80031f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031f8:	08003251 	.word	0x08003251
 80031fc:	08003265 	.word	0x08003265
 8003200:	080031e1 	.word	0x080031e1
 8003204:	080031e1 	.word	0x080031e1
 8003208:	080031e1 	.word	0x080031e1
 800320c:	080031e1 	.word	0x080031e1
 8003210:	08003265 	.word	0x08003265
 8003214:	080031e1 	.word	0x080031e1
 8003218:	080031e1 	.word	0x080031e1
 800321c:	080031e1 	.word	0x080031e1
 8003220:	080031e1 	.word	0x080031e1
 8003224:	08003371 	.word	0x08003371
 8003228:	08003295 	.word	0x08003295
 800322c:	08003353 	.word	0x08003353
 8003230:	080031e1 	.word	0x080031e1
 8003234:	080031e1 	.word	0x080031e1
 8003238:	08003393 	.word	0x08003393
 800323c:	080031e1 	.word	0x080031e1
 8003240:	08003295 	.word	0x08003295
 8003244:	080031e1 	.word	0x080031e1
 8003248:	080031e1 	.word	0x080031e1
 800324c:	0800335b 	.word	0x0800335b
 8003250:	682b      	ldr	r3, [r5, #0]
 8003252:	1d1a      	adds	r2, r3, #4
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	602a      	str	r2, [r5, #0]
 8003258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800325c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003260:	2301      	movs	r3, #1
 8003262:	e0a3      	b.n	80033ac <_printf_i+0x1f4>
 8003264:	6820      	ldr	r0, [r4, #0]
 8003266:	6829      	ldr	r1, [r5, #0]
 8003268:	0606      	lsls	r6, r0, #24
 800326a:	f101 0304 	add.w	r3, r1, #4
 800326e:	d50a      	bpl.n	8003286 <_printf_i+0xce>
 8003270:	680e      	ldr	r6, [r1, #0]
 8003272:	602b      	str	r3, [r5, #0]
 8003274:	2e00      	cmp	r6, #0
 8003276:	da03      	bge.n	8003280 <_printf_i+0xc8>
 8003278:	232d      	movs	r3, #45	; 0x2d
 800327a:	4276      	negs	r6, r6
 800327c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003280:	485e      	ldr	r0, [pc, #376]	; (80033fc <_printf_i+0x244>)
 8003282:	230a      	movs	r3, #10
 8003284:	e019      	b.n	80032ba <_printf_i+0x102>
 8003286:	680e      	ldr	r6, [r1, #0]
 8003288:	602b      	str	r3, [r5, #0]
 800328a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800328e:	bf18      	it	ne
 8003290:	b236      	sxthne	r6, r6
 8003292:	e7ef      	b.n	8003274 <_printf_i+0xbc>
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	6820      	ldr	r0, [r4, #0]
 8003298:	1d19      	adds	r1, r3, #4
 800329a:	6029      	str	r1, [r5, #0]
 800329c:	0601      	lsls	r1, r0, #24
 800329e:	d501      	bpl.n	80032a4 <_printf_i+0xec>
 80032a0:	681e      	ldr	r6, [r3, #0]
 80032a2:	e002      	b.n	80032aa <_printf_i+0xf2>
 80032a4:	0646      	lsls	r6, r0, #25
 80032a6:	d5fb      	bpl.n	80032a0 <_printf_i+0xe8>
 80032a8:	881e      	ldrh	r6, [r3, #0]
 80032aa:	4854      	ldr	r0, [pc, #336]	; (80033fc <_printf_i+0x244>)
 80032ac:	2f6f      	cmp	r7, #111	; 0x6f
 80032ae:	bf0c      	ite	eq
 80032b0:	2308      	moveq	r3, #8
 80032b2:	230a      	movne	r3, #10
 80032b4:	2100      	movs	r1, #0
 80032b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032ba:	6865      	ldr	r5, [r4, #4]
 80032bc:	60a5      	str	r5, [r4, #8]
 80032be:	2d00      	cmp	r5, #0
 80032c0:	bfa2      	ittt	ge
 80032c2:	6821      	ldrge	r1, [r4, #0]
 80032c4:	f021 0104 	bicge.w	r1, r1, #4
 80032c8:	6021      	strge	r1, [r4, #0]
 80032ca:	b90e      	cbnz	r6, 80032d0 <_printf_i+0x118>
 80032cc:	2d00      	cmp	r5, #0
 80032ce:	d04d      	beq.n	800336c <_printf_i+0x1b4>
 80032d0:	4615      	mov	r5, r2
 80032d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80032d6:	fb03 6711 	mls	r7, r3, r1, r6
 80032da:	5dc7      	ldrb	r7, [r0, r7]
 80032dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032e0:	4637      	mov	r7, r6
 80032e2:	42bb      	cmp	r3, r7
 80032e4:	460e      	mov	r6, r1
 80032e6:	d9f4      	bls.n	80032d2 <_printf_i+0x11a>
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d10b      	bne.n	8003304 <_printf_i+0x14c>
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	07de      	lsls	r6, r3, #31
 80032f0:	d508      	bpl.n	8003304 <_printf_i+0x14c>
 80032f2:	6923      	ldr	r3, [r4, #16]
 80032f4:	6861      	ldr	r1, [r4, #4]
 80032f6:	4299      	cmp	r1, r3
 80032f8:	bfde      	ittt	le
 80032fa:	2330      	movle	r3, #48	; 0x30
 80032fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003300:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003304:	1b52      	subs	r2, r2, r5
 8003306:	6122      	str	r2, [r4, #16]
 8003308:	f8cd a000 	str.w	sl, [sp]
 800330c:	464b      	mov	r3, r9
 800330e:	aa03      	add	r2, sp, #12
 8003310:	4621      	mov	r1, r4
 8003312:	4640      	mov	r0, r8
 8003314:	f7ff fee2 	bl	80030dc <_printf_common>
 8003318:	3001      	adds	r0, #1
 800331a:	d14c      	bne.n	80033b6 <_printf_i+0x1fe>
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	b004      	add	sp, #16
 8003322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003326:	4835      	ldr	r0, [pc, #212]	; (80033fc <_printf_i+0x244>)
 8003328:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800332c:	6829      	ldr	r1, [r5, #0]
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	f851 6b04 	ldr.w	r6, [r1], #4
 8003334:	6029      	str	r1, [r5, #0]
 8003336:	061d      	lsls	r5, r3, #24
 8003338:	d514      	bpl.n	8003364 <_printf_i+0x1ac>
 800333a:	07df      	lsls	r7, r3, #31
 800333c:	bf44      	itt	mi
 800333e:	f043 0320 	orrmi.w	r3, r3, #32
 8003342:	6023      	strmi	r3, [r4, #0]
 8003344:	b91e      	cbnz	r6, 800334e <_printf_i+0x196>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	f023 0320 	bic.w	r3, r3, #32
 800334c:	6023      	str	r3, [r4, #0]
 800334e:	2310      	movs	r3, #16
 8003350:	e7b0      	b.n	80032b4 <_printf_i+0xfc>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	f043 0320 	orr.w	r3, r3, #32
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	2378      	movs	r3, #120	; 0x78
 800335c:	4828      	ldr	r0, [pc, #160]	; (8003400 <_printf_i+0x248>)
 800335e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003362:	e7e3      	b.n	800332c <_printf_i+0x174>
 8003364:	0659      	lsls	r1, r3, #25
 8003366:	bf48      	it	mi
 8003368:	b2b6      	uxthmi	r6, r6
 800336a:	e7e6      	b.n	800333a <_printf_i+0x182>
 800336c:	4615      	mov	r5, r2
 800336e:	e7bb      	b.n	80032e8 <_printf_i+0x130>
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	6826      	ldr	r6, [r4, #0]
 8003374:	6961      	ldr	r1, [r4, #20]
 8003376:	1d18      	adds	r0, r3, #4
 8003378:	6028      	str	r0, [r5, #0]
 800337a:	0635      	lsls	r5, r6, #24
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	d501      	bpl.n	8003384 <_printf_i+0x1cc>
 8003380:	6019      	str	r1, [r3, #0]
 8003382:	e002      	b.n	800338a <_printf_i+0x1d2>
 8003384:	0670      	lsls	r0, r6, #25
 8003386:	d5fb      	bpl.n	8003380 <_printf_i+0x1c8>
 8003388:	8019      	strh	r1, [r3, #0]
 800338a:	2300      	movs	r3, #0
 800338c:	6123      	str	r3, [r4, #16]
 800338e:	4615      	mov	r5, r2
 8003390:	e7ba      	b.n	8003308 <_printf_i+0x150>
 8003392:	682b      	ldr	r3, [r5, #0]
 8003394:	1d1a      	adds	r2, r3, #4
 8003396:	602a      	str	r2, [r5, #0]
 8003398:	681d      	ldr	r5, [r3, #0]
 800339a:	6862      	ldr	r2, [r4, #4]
 800339c:	2100      	movs	r1, #0
 800339e:	4628      	mov	r0, r5
 80033a0:	f7fc ff36 	bl	8000210 <memchr>
 80033a4:	b108      	cbz	r0, 80033aa <_printf_i+0x1f2>
 80033a6:	1b40      	subs	r0, r0, r5
 80033a8:	6060      	str	r0, [r4, #4]
 80033aa:	6863      	ldr	r3, [r4, #4]
 80033ac:	6123      	str	r3, [r4, #16]
 80033ae:	2300      	movs	r3, #0
 80033b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b4:	e7a8      	b.n	8003308 <_printf_i+0x150>
 80033b6:	6923      	ldr	r3, [r4, #16]
 80033b8:	462a      	mov	r2, r5
 80033ba:	4649      	mov	r1, r9
 80033bc:	4640      	mov	r0, r8
 80033be:	47d0      	blx	sl
 80033c0:	3001      	adds	r0, #1
 80033c2:	d0ab      	beq.n	800331c <_printf_i+0x164>
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	079b      	lsls	r3, r3, #30
 80033c8:	d413      	bmi.n	80033f2 <_printf_i+0x23a>
 80033ca:	68e0      	ldr	r0, [r4, #12]
 80033cc:	9b03      	ldr	r3, [sp, #12]
 80033ce:	4298      	cmp	r0, r3
 80033d0:	bfb8      	it	lt
 80033d2:	4618      	movlt	r0, r3
 80033d4:	e7a4      	b.n	8003320 <_printf_i+0x168>
 80033d6:	2301      	movs	r3, #1
 80033d8:	4632      	mov	r2, r6
 80033da:	4649      	mov	r1, r9
 80033dc:	4640      	mov	r0, r8
 80033de:	47d0      	blx	sl
 80033e0:	3001      	adds	r0, #1
 80033e2:	d09b      	beq.n	800331c <_printf_i+0x164>
 80033e4:	3501      	adds	r5, #1
 80033e6:	68e3      	ldr	r3, [r4, #12]
 80033e8:	9903      	ldr	r1, [sp, #12]
 80033ea:	1a5b      	subs	r3, r3, r1
 80033ec:	42ab      	cmp	r3, r5
 80033ee:	dcf2      	bgt.n	80033d6 <_printf_i+0x21e>
 80033f0:	e7eb      	b.n	80033ca <_printf_i+0x212>
 80033f2:	2500      	movs	r5, #0
 80033f4:	f104 0619 	add.w	r6, r4, #25
 80033f8:	e7f5      	b.n	80033e6 <_printf_i+0x22e>
 80033fa:	bf00      	nop
 80033fc:	08007e44 	.word	0x08007e44
 8003400:	08007e55 	.word	0x08007e55

08003404 <_scanf_float>:
 8003404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003408:	b087      	sub	sp, #28
 800340a:	4617      	mov	r7, r2
 800340c:	9303      	str	r3, [sp, #12]
 800340e:	688b      	ldr	r3, [r1, #8]
 8003410:	1e5a      	subs	r2, r3, #1
 8003412:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003416:	bf83      	ittte	hi
 8003418:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800341c:	195b      	addhi	r3, r3, r5
 800341e:	9302      	strhi	r3, [sp, #8]
 8003420:	2300      	movls	r3, #0
 8003422:	bf86      	itte	hi
 8003424:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003428:	608b      	strhi	r3, [r1, #8]
 800342a:	9302      	strls	r3, [sp, #8]
 800342c:	680b      	ldr	r3, [r1, #0]
 800342e:	468b      	mov	fp, r1
 8003430:	2500      	movs	r5, #0
 8003432:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003436:	f84b 3b1c 	str.w	r3, [fp], #28
 800343a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800343e:	4680      	mov	r8, r0
 8003440:	460c      	mov	r4, r1
 8003442:	465e      	mov	r6, fp
 8003444:	46aa      	mov	sl, r5
 8003446:	46a9      	mov	r9, r5
 8003448:	9501      	str	r5, [sp, #4]
 800344a:	68a2      	ldr	r2, [r4, #8]
 800344c:	b152      	cbz	r2, 8003464 <_scanf_float+0x60>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b4e      	cmp	r3, #78	; 0x4e
 8003454:	d864      	bhi.n	8003520 <_scanf_float+0x11c>
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	d83c      	bhi.n	80034d4 <_scanf_float+0xd0>
 800345a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800345e:	b2c8      	uxtb	r0, r1
 8003460:	280e      	cmp	r0, #14
 8003462:	d93a      	bls.n	80034da <_scanf_float+0xd6>
 8003464:	f1b9 0f00 	cmp.w	r9, #0
 8003468:	d003      	beq.n	8003472 <_scanf_float+0x6e>
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003470:	6023      	str	r3, [r4, #0]
 8003472:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003476:	f1ba 0f01 	cmp.w	sl, #1
 800347a:	f200 8113 	bhi.w	80036a4 <_scanf_float+0x2a0>
 800347e:	455e      	cmp	r6, fp
 8003480:	f200 8105 	bhi.w	800368e <_scanf_float+0x28a>
 8003484:	2501      	movs	r5, #1
 8003486:	4628      	mov	r0, r5
 8003488:	b007      	add	sp, #28
 800348a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800348e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003492:	2a0d      	cmp	r2, #13
 8003494:	d8e6      	bhi.n	8003464 <_scanf_float+0x60>
 8003496:	a101      	add	r1, pc, #4	; (adr r1, 800349c <_scanf_float+0x98>)
 8003498:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800349c:	080035db 	.word	0x080035db
 80034a0:	08003465 	.word	0x08003465
 80034a4:	08003465 	.word	0x08003465
 80034a8:	08003465 	.word	0x08003465
 80034ac:	0800363b 	.word	0x0800363b
 80034b0:	08003613 	.word	0x08003613
 80034b4:	08003465 	.word	0x08003465
 80034b8:	08003465 	.word	0x08003465
 80034bc:	080035e9 	.word	0x080035e9
 80034c0:	08003465 	.word	0x08003465
 80034c4:	08003465 	.word	0x08003465
 80034c8:	08003465 	.word	0x08003465
 80034cc:	08003465 	.word	0x08003465
 80034d0:	080035a1 	.word	0x080035a1
 80034d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80034d8:	e7db      	b.n	8003492 <_scanf_float+0x8e>
 80034da:	290e      	cmp	r1, #14
 80034dc:	d8c2      	bhi.n	8003464 <_scanf_float+0x60>
 80034de:	a001      	add	r0, pc, #4	; (adr r0, 80034e4 <_scanf_float+0xe0>)
 80034e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80034e4:	08003593 	.word	0x08003593
 80034e8:	08003465 	.word	0x08003465
 80034ec:	08003593 	.word	0x08003593
 80034f0:	08003627 	.word	0x08003627
 80034f4:	08003465 	.word	0x08003465
 80034f8:	08003541 	.word	0x08003541
 80034fc:	0800357d 	.word	0x0800357d
 8003500:	0800357d 	.word	0x0800357d
 8003504:	0800357d 	.word	0x0800357d
 8003508:	0800357d 	.word	0x0800357d
 800350c:	0800357d 	.word	0x0800357d
 8003510:	0800357d 	.word	0x0800357d
 8003514:	0800357d 	.word	0x0800357d
 8003518:	0800357d 	.word	0x0800357d
 800351c:	0800357d 	.word	0x0800357d
 8003520:	2b6e      	cmp	r3, #110	; 0x6e
 8003522:	d809      	bhi.n	8003538 <_scanf_float+0x134>
 8003524:	2b60      	cmp	r3, #96	; 0x60
 8003526:	d8b2      	bhi.n	800348e <_scanf_float+0x8a>
 8003528:	2b54      	cmp	r3, #84	; 0x54
 800352a:	d077      	beq.n	800361c <_scanf_float+0x218>
 800352c:	2b59      	cmp	r3, #89	; 0x59
 800352e:	d199      	bne.n	8003464 <_scanf_float+0x60>
 8003530:	2d07      	cmp	r5, #7
 8003532:	d197      	bne.n	8003464 <_scanf_float+0x60>
 8003534:	2508      	movs	r5, #8
 8003536:	e029      	b.n	800358c <_scanf_float+0x188>
 8003538:	2b74      	cmp	r3, #116	; 0x74
 800353a:	d06f      	beq.n	800361c <_scanf_float+0x218>
 800353c:	2b79      	cmp	r3, #121	; 0x79
 800353e:	e7f6      	b.n	800352e <_scanf_float+0x12a>
 8003540:	6821      	ldr	r1, [r4, #0]
 8003542:	05c8      	lsls	r0, r1, #23
 8003544:	d51a      	bpl.n	800357c <_scanf_float+0x178>
 8003546:	9b02      	ldr	r3, [sp, #8]
 8003548:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800354c:	6021      	str	r1, [r4, #0]
 800354e:	f109 0901 	add.w	r9, r9, #1
 8003552:	b11b      	cbz	r3, 800355c <_scanf_float+0x158>
 8003554:	3b01      	subs	r3, #1
 8003556:	3201      	adds	r2, #1
 8003558:	9302      	str	r3, [sp, #8]
 800355a:	60a2      	str	r2, [r4, #8]
 800355c:	68a3      	ldr	r3, [r4, #8]
 800355e:	3b01      	subs	r3, #1
 8003560:	60a3      	str	r3, [r4, #8]
 8003562:	6923      	ldr	r3, [r4, #16]
 8003564:	3301      	adds	r3, #1
 8003566:	6123      	str	r3, [r4, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	f340 8084 	ble.w	800367c <_scanf_float+0x278>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	3301      	adds	r3, #1
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	e766      	b.n	800344a <_scanf_float+0x46>
 800357c:	eb1a 0f05 	cmn.w	sl, r5
 8003580:	f47f af70 	bne.w	8003464 <_scanf_float+0x60>
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800358a:	6022      	str	r2, [r4, #0]
 800358c:	f806 3b01 	strb.w	r3, [r6], #1
 8003590:	e7e4      	b.n	800355c <_scanf_float+0x158>
 8003592:	6822      	ldr	r2, [r4, #0]
 8003594:	0610      	lsls	r0, r2, #24
 8003596:	f57f af65 	bpl.w	8003464 <_scanf_float+0x60>
 800359a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800359e:	e7f4      	b.n	800358a <_scanf_float+0x186>
 80035a0:	f1ba 0f00 	cmp.w	sl, #0
 80035a4:	d10e      	bne.n	80035c4 <_scanf_float+0x1c0>
 80035a6:	f1b9 0f00 	cmp.w	r9, #0
 80035aa:	d10e      	bne.n	80035ca <_scanf_float+0x1c6>
 80035ac:	6822      	ldr	r2, [r4, #0]
 80035ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80035b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80035b6:	d108      	bne.n	80035ca <_scanf_float+0x1c6>
 80035b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80035bc:	6022      	str	r2, [r4, #0]
 80035be:	f04f 0a01 	mov.w	sl, #1
 80035c2:	e7e3      	b.n	800358c <_scanf_float+0x188>
 80035c4:	f1ba 0f02 	cmp.w	sl, #2
 80035c8:	d055      	beq.n	8003676 <_scanf_float+0x272>
 80035ca:	2d01      	cmp	r5, #1
 80035cc:	d002      	beq.n	80035d4 <_scanf_float+0x1d0>
 80035ce:	2d04      	cmp	r5, #4
 80035d0:	f47f af48 	bne.w	8003464 <_scanf_float+0x60>
 80035d4:	3501      	adds	r5, #1
 80035d6:	b2ed      	uxtb	r5, r5
 80035d8:	e7d8      	b.n	800358c <_scanf_float+0x188>
 80035da:	f1ba 0f01 	cmp.w	sl, #1
 80035de:	f47f af41 	bne.w	8003464 <_scanf_float+0x60>
 80035e2:	f04f 0a02 	mov.w	sl, #2
 80035e6:	e7d1      	b.n	800358c <_scanf_float+0x188>
 80035e8:	b97d      	cbnz	r5, 800360a <_scanf_float+0x206>
 80035ea:	f1b9 0f00 	cmp.w	r9, #0
 80035ee:	f47f af3c 	bne.w	800346a <_scanf_float+0x66>
 80035f2:	6822      	ldr	r2, [r4, #0]
 80035f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80035f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80035fc:	f47f af39 	bne.w	8003472 <_scanf_float+0x6e>
 8003600:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003604:	6022      	str	r2, [r4, #0]
 8003606:	2501      	movs	r5, #1
 8003608:	e7c0      	b.n	800358c <_scanf_float+0x188>
 800360a:	2d03      	cmp	r5, #3
 800360c:	d0e2      	beq.n	80035d4 <_scanf_float+0x1d0>
 800360e:	2d05      	cmp	r5, #5
 8003610:	e7de      	b.n	80035d0 <_scanf_float+0x1cc>
 8003612:	2d02      	cmp	r5, #2
 8003614:	f47f af26 	bne.w	8003464 <_scanf_float+0x60>
 8003618:	2503      	movs	r5, #3
 800361a:	e7b7      	b.n	800358c <_scanf_float+0x188>
 800361c:	2d06      	cmp	r5, #6
 800361e:	f47f af21 	bne.w	8003464 <_scanf_float+0x60>
 8003622:	2507      	movs	r5, #7
 8003624:	e7b2      	b.n	800358c <_scanf_float+0x188>
 8003626:	6822      	ldr	r2, [r4, #0]
 8003628:	0591      	lsls	r1, r2, #22
 800362a:	f57f af1b 	bpl.w	8003464 <_scanf_float+0x60>
 800362e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003632:	6022      	str	r2, [r4, #0]
 8003634:	f8cd 9004 	str.w	r9, [sp, #4]
 8003638:	e7a8      	b.n	800358c <_scanf_float+0x188>
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003640:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003644:	d006      	beq.n	8003654 <_scanf_float+0x250>
 8003646:	0550      	lsls	r0, r2, #21
 8003648:	f57f af0c 	bpl.w	8003464 <_scanf_float+0x60>
 800364c:	f1b9 0f00 	cmp.w	r9, #0
 8003650:	f43f af0f 	beq.w	8003472 <_scanf_float+0x6e>
 8003654:	0591      	lsls	r1, r2, #22
 8003656:	bf58      	it	pl
 8003658:	9901      	ldrpl	r1, [sp, #4]
 800365a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800365e:	bf58      	it	pl
 8003660:	eba9 0101 	subpl.w	r1, r9, r1
 8003664:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003668:	bf58      	it	pl
 800366a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800366e:	6022      	str	r2, [r4, #0]
 8003670:	f04f 0900 	mov.w	r9, #0
 8003674:	e78a      	b.n	800358c <_scanf_float+0x188>
 8003676:	f04f 0a03 	mov.w	sl, #3
 800367a:	e787      	b.n	800358c <_scanf_float+0x188>
 800367c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003680:	4639      	mov	r1, r7
 8003682:	4640      	mov	r0, r8
 8003684:	4798      	blx	r3
 8003686:	2800      	cmp	r0, #0
 8003688:	f43f aedf 	beq.w	800344a <_scanf_float+0x46>
 800368c:	e6ea      	b.n	8003464 <_scanf_float+0x60>
 800368e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003692:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003696:	463a      	mov	r2, r7
 8003698:	4640      	mov	r0, r8
 800369a:	4798      	blx	r3
 800369c:	6923      	ldr	r3, [r4, #16]
 800369e:	3b01      	subs	r3, #1
 80036a0:	6123      	str	r3, [r4, #16]
 80036a2:	e6ec      	b.n	800347e <_scanf_float+0x7a>
 80036a4:	1e6b      	subs	r3, r5, #1
 80036a6:	2b06      	cmp	r3, #6
 80036a8:	d825      	bhi.n	80036f6 <_scanf_float+0x2f2>
 80036aa:	2d02      	cmp	r5, #2
 80036ac:	d836      	bhi.n	800371c <_scanf_float+0x318>
 80036ae:	455e      	cmp	r6, fp
 80036b0:	f67f aee8 	bls.w	8003484 <_scanf_float+0x80>
 80036b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80036bc:	463a      	mov	r2, r7
 80036be:	4640      	mov	r0, r8
 80036c0:	4798      	blx	r3
 80036c2:	6923      	ldr	r3, [r4, #16]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	6123      	str	r3, [r4, #16]
 80036c8:	e7f1      	b.n	80036ae <_scanf_float+0x2aa>
 80036ca:	9802      	ldr	r0, [sp, #8]
 80036cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80036d4:	9002      	str	r0, [sp, #8]
 80036d6:	463a      	mov	r2, r7
 80036d8:	4640      	mov	r0, r8
 80036da:	4798      	blx	r3
 80036dc:	6923      	ldr	r3, [r4, #16]
 80036de:	3b01      	subs	r3, #1
 80036e0:	6123      	str	r3, [r4, #16]
 80036e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80036e6:	fa5f fa8a 	uxtb.w	sl, sl
 80036ea:	f1ba 0f02 	cmp.w	sl, #2
 80036ee:	d1ec      	bne.n	80036ca <_scanf_float+0x2c6>
 80036f0:	3d03      	subs	r5, #3
 80036f2:	b2ed      	uxtb	r5, r5
 80036f4:	1b76      	subs	r6, r6, r5
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	05da      	lsls	r2, r3, #23
 80036fa:	d52f      	bpl.n	800375c <_scanf_float+0x358>
 80036fc:	055b      	lsls	r3, r3, #21
 80036fe:	d510      	bpl.n	8003722 <_scanf_float+0x31e>
 8003700:	455e      	cmp	r6, fp
 8003702:	f67f aebf 	bls.w	8003484 <_scanf_float+0x80>
 8003706:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800370a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800370e:	463a      	mov	r2, r7
 8003710:	4640      	mov	r0, r8
 8003712:	4798      	blx	r3
 8003714:	6923      	ldr	r3, [r4, #16]
 8003716:	3b01      	subs	r3, #1
 8003718:	6123      	str	r3, [r4, #16]
 800371a:	e7f1      	b.n	8003700 <_scanf_float+0x2fc>
 800371c:	46aa      	mov	sl, r5
 800371e:	9602      	str	r6, [sp, #8]
 8003720:	e7df      	b.n	80036e2 <_scanf_float+0x2de>
 8003722:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003726:	6923      	ldr	r3, [r4, #16]
 8003728:	2965      	cmp	r1, #101	; 0x65
 800372a:	f103 33ff 	add.w	r3, r3, #4294967295
 800372e:	f106 35ff 	add.w	r5, r6, #4294967295
 8003732:	6123      	str	r3, [r4, #16]
 8003734:	d00c      	beq.n	8003750 <_scanf_float+0x34c>
 8003736:	2945      	cmp	r1, #69	; 0x45
 8003738:	d00a      	beq.n	8003750 <_scanf_float+0x34c>
 800373a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800373e:	463a      	mov	r2, r7
 8003740:	4640      	mov	r0, r8
 8003742:	4798      	blx	r3
 8003744:	6923      	ldr	r3, [r4, #16]
 8003746:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800374a:	3b01      	subs	r3, #1
 800374c:	1eb5      	subs	r5, r6, #2
 800374e:	6123      	str	r3, [r4, #16]
 8003750:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003754:	463a      	mov	r2, r7
 8003756:	4640      	mov	r0, r8
 8003758:	4798      	blx	r3
 800375a:	462e      	mov	r6, r5
 800375c:	6825      	ldr	r5, [r4, #0]
 800375e:	f015 0510 	ands.w	r5, r5, #16
 8003762:	d159      	bne.n	8003818 <_scanf_float+0x414>
 8003764:	7035      	strb	r5, [r6, #0]
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800376c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003770:	d11b      	bne.n	80037aa <_scanf_float+0x3a6>
 8003772:	9b01      	ldr	r3, [sp, #4]
 8003774:	454b      	cmp	r3, r9
 8003776:	eba3 0209 	sub.w	r2, r3, r9
 800377a:	d123      	bne.n	80037c4 <_scanf_float+0x3c0>
 800377c:	2200      	movs	r2, #0
 800377e:	4659      	mov	r1, fp
 8003780:	4640      	mov	r0, r8
 8003782:	f000 ff0b 	bl	800459c <_strtod_r>
 8003786:	6822      	ldr	r2, [r4, #0]
 8003788:	9b03      	ldr	r3, [sp, #12]
 800378a:	f012 0f02 	tst.w	r2, #2
 800378e:	ec57 6b10 	vmov	r6, r7, d0
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	d021      	beq.n	80037da <_scanf_float+0x3d6>
 8003796:	9903      	ldr	r1, [sp, #12]
 8003798:	1d1a      	adds	r2, r3, #4
 800379a:	600a      	str	r2, [r1, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	e9c3 6700 	strd	r6, r7, [r3]
 80037a2:	68e3      	ldr	r3, [r4, #12]
 80037a4:	3301      	adds	r3, #1
 80037a6:	60e3      	str	r3, [r4, #12]
 80037a8:	e66d      	b.n	8003486 <_scanf_float+0x82>
 80037aa:	9b04      	ldr	r3, [sp, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0e5      	beq.n	800377c <_scanf_float+0x378>
 80037b0:	9905      	ldr	r1, [sp, #20]
 80037b2:	230a      	movs	r3, #10
 80037b4:	462a      	mov	r2, r5
 80037b6:	3101      	adds	r1, #1
 80037b8:	4640      	mov	r0, r8
 80037ba:	f000 ff77 	bl	80046ac <_strtol_r>
 80037be:	9b04      	ldr	r3, [sp, #16]
 80037c0:	9e05      	ldr	r6, [sp, #20]
 80037c2:	1ac2      	subs	r2, r0, r3
 80037c4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80037c8:	429e      	cmp	r6, r3
 80037ca:	bf28      	it	cs
 80037cc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80037d0:	4912      	ldr	r1, [pc, #72]	; (800381c <_scanf_float+0x418>)
 80037d2:	4630      	mov	r0, r6
 80037d4:	f000 f82c 	bl	8003830 <siprintf>
 80037d8:	e7d0      	b.n	800377c <_scanf_float+0x378>
 80037da:	9903      	ldr	r1, [sp, #12]
 80037dc:	f012 0f04 	tst.w	r2, #4
 80037e0:	f103 0204 	add.w	r2, r3, #4
 80037e4:	600a      	str	r2, [r1, #0]
 80037e6:	d1d9      	bne.n	800379c <_scanf_float+0x398>
 80037e8:	f8d3 8000 	ldr.w	r8, [r3]
 80037ec:	ee10 2a10 	vmov	r2, s0
 80037f0:	ee10 0a10 	vmov	r0, s0
 80037f4:	463b      	mov	r3, r7
 80037f6:	4639      	mov	r1, r7
 80037f8:	f7fd f9b0 	bl	8000b5c <__aeabi_dcmpun>
 80037fc:	b128      	cbz	r0, 800380a <_scanf_float+0x406>
 80037fe:	4808      	ldr	r0, [pc, #32]	; (8003820 <_scanf_float+0x41c>)
 8003800:	f000 f810 	bl	8003824 <nanf>
 8003804:	ed88 0a00 	vstr	s0, [r8]
 8003808:	e7cb      	b.n	80037a2 <_scanf_float+0x39e>
 800380a:	4630      	mov	r0, r6
 800380c:	4639      	mov	r1, r7
 800380e:	f7fd fa03 	bl	8000c18 <__aeabi_d2f>
 8003812:	f8c8 0000 	str.w	r0, [r8]
 8003816:	e7c4      	b.n	80037a2 <_scanf_float+0x39e>
 8003818:	2500      	movs	r5, #0
 800381a:	e634      	b.n	8003486 <_scanf_float+0x82>
 800381c:	08007e66 	.word	0x08007e66
 8003820:	0800828b 	.word	0x0800828b

08003824 <nanf>:
 8003824:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800382c <nanf+0x8>
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	7fc00000 	.word	0x7fc00000

08003830 <siprintf>:
 8003830:	b40e      	push	{r1, r2, r3}
 8003832:	b500      	push	{lr}
 8003834:	b09c      	sub	sp, #112	; 0x70
 8003836:	ab1d      	add	r3, sp, #116	; 0x74
 8003838:	9002      	str	r0, [sp, #8]
 800383a:	9006      	str	r0, [sp, #24]
 800383c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003840:	4809      	ldr	r0, [pc, #36]	; (8003868 <siprintf+0x38>)
 8003842:	9107      	str	r1, [sp, #28]
 8003844:	9104      	str	r1, [sp, #16]
 8003846:	4909      	ldr	r1, [pc, #36]	; (800386c <siprintf+0x3c>)
 8003848:	f853 2b04 	ldr.w	r2, [r3], #4
 800384c:	9105      	str	r1, [sp, #20]
 800384e:	6800      	ldr	r0, [r0, #0]
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	a902      	add	r1, sp, #8
 8003854:	f002 ff8c 	bl	8006770 <_svfiprintf_r>
 8003858:	9b02      	ldr	r3, [sp, #8]
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	b01c      	add	sp, #112	; 0x70
 8003860:	f85d eb04 	ldr.w	lr, [sp], #4
 8003864:	b003      	add	sp, #12
 8003866:	4770      	bx	lr
 8003868:	20000004 	.word	0x20000004
 800386c:	ffff0208 	.word	0xffff0208

08003870 <siscanf>:
 8003870:	b40e      	push	{r1, r2, r3}
 8003872:	b510      	push	{r4, lr}
 8003874:	b09f      	sub	sp, #124	; 0x7c
 8003876:	ac21      	add	r4, sp, #132	; 0x84
 8003878:	f44f 7101 	mov.w	r1, #516	; 0x204
 800387c:	f854 2b04 	ldr.w	r2, [r4], #4
 8003880:	9201      	str	r2, [sp, #4]
 8003882:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003886:	9004      	str	r0, [sp, #16]
 8003888:	9008      	str	r0, [sp, #32]
 800388a:	f7fc fcb3 	bl	80001f4 <strlen>
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <siscanf+0x50>)
 8003890:	9005      	str	r0, [sp, #20]
 8003892:	9009      	str	r0, [sp, #36]	; 0x24
 8003894:	930d      	str	r3, [sp, #52]	; 0x34
 8003896:	480b      	ldr	r0, [pc, #44]	; (80038c4 <siscanf+0x54>)
 8003898:	9a01      	ldr	r2, [sp, #4]
 800389a:	6800      	ldr	r0, [r0, #0]
 800389c:	9403      	str	r4, [sp, #12]
 800389e:	2300      	movs	r3, #0
 80038a0:	9311      	str	r3, [sp, #68]	; 0x44
 80038a2:	9316      	str	r3, [sp, #88]	; 0x58
 80038a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038a8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80038ac:	a904      	add	r1, sp, #16
 80038ae:	4623      	mov	r3, r4
 80038b0:	f003 f8b8 	bl	8006a24 <__ssvfiscanf_r>
 80038b4:	b01f      	add	sp, #124	; 0x7c
 80038b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038ba:	b003      	add	sp, #12
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	080038eb 	.word	0x080038eb
 80038c4:	20000004 	.word	0x20000004

080038c8 <__sread>:
 80038c8:	b510      	push	{r4, lr}
 80038ca:	460c      	mov	r4, r1
 80038cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d0:	f003 fb72 	bl	8006fb8 <_read_r>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	bfab      	itete	ge
 80038d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038da:	89a3      	ldrhlt	r3, [r4, #12]
 80038dc:	181b      	addge	r3, r3, r0
 80038de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038e2:	bfac      	ite	ge
 80038e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80038e6:	81a3      	strhlt	r3, [r4, #12]
 80038e8:	bd10      	pop	{r4, pc}

080038ea <__seofread>:
 80038ea:	2000      	movs	r0, #0
 80038ec:	4770      	bx	lr

080038ee <__swrite>:
 80038ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f2:	461f      	mov	r7, r3
 80038f4:	898b      	ldrh	r3, [r1, #12]
 80038f6:	05db      	lsls	r3, r3, #23
 80038f8:	4605      	mov	r5, r0
 80038fa:	460c      	mov	r4, r1
 80038fc:	4616      	mov	r6, r2
 80038fe:	d505      	bpl.n	800390c <__swrite+0x1e>
 8003900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003904:	2302      	movs	r3, #2
 8003906:	2200      	movs	r2, #0
 8003908:	f002 f8e4 	bl	8005ad4 <_lseek_r>
 800390c:	89a3      	ldrh	r3, [r4, #12]
 800390e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003916:	81a3      	strh	r3, [r4, #12]
 8003918:	4632      	mov	r2, r6
 800391a:	463b      	mov	r3, r7
 800391c:	4628      	mov	r0, r5
 800391e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003922:	f000 bec5 	b.w	80046b0 <_write_r>

08003926 <__sseek>:
 8003926:	b510      	push	{r4, lr}
 8003928:	460c      	mov	r4, r1
 800392a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800392e:	f002 f8d1 	bl	8005ad4 <_lseek_r>
 8003932:	1c43      	adds	r3, r0, #1
 8003934:	89a3      	ldrh	r3, [r4, #12]
 8003936:	bf15      	itete	ne
 8003938:	6560      	strne	r0, [r4, #84]	; 0x54
 800393a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800393e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003942:	81a3      	strheq	r3, [r4, #12]
 8003944:	bf18      	it	ne
 8003946:	81a3      	strhne	r3, [r4, #12]
 8003948:	bd10      	pop	{r4, pc}

0800394a <__sclose>:
 800394a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800394e:	f000 bec1 	b.w	80046d4 <_close_r>

08003952 <sulp>:
 8003952:	b570      	push	{r4, r5, r6, lr}
 8003954:	4604      	mov	r4, r0
 8003956:	460d      	mov	r5, r1
 8003958:	ec45 4b10 	vmov	d0, r4, r5
 800395c:	4616      	mov	r6, r2
 800395e:	f002 fc65 	bl	800622c <__ulp>
 8003962:	ec51 0b10 	vmov	r0, r1, d0
 8003966:	b17e      	cbz	r6, 8003988 <sulp+0x36>
 8003968:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800396c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003970:	2b00      	cmp	r3, #0
 8003972:	dd09      	ble.n	8003988 <sulp+0x36>
 8003974:	051b      	lsls	r3, r3, #20
 8003976:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800397a:	2400      	movs	r4, #0
 800397c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003980:	4622      	mov	r2, r4
 8003982:	462b      	mov	r3, r5
 8003984:	f7fc fe50 	bl	8000628 <__aeabi_dmul>
 8003988:	bd70      	pop	{r4, r5, r6, pc}
 800398a:	0000      	movs	r0, r0
 800398c:	0000      	movs	r0, r0
	...

08003990 <_strtod_l>:
 8003990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003994:	ed2d 8b02 	vpush	{d8}
 8003998:	b09d      	sub	sp, #116	; 0x74
 800399a:	461f      	mov	r7, r3
 800399c:	2300      	movs	r3, #0
 800399e:	9318      	str	r3, [sp, #96]	; 0x60
 80039a0:	4ba2      	ldr	r3, [pc, #648]	; (8003c2c <_strtod_l+0x29c>)
 80039a2:	9213      	str	r2, [sp, #76]	; 0x4c
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	9305      	str	r3, [sp, #20]
 80039a8:	4604      	mov	r4, r0
 80039aa:	4618      	mov	r0, r3
 80039ac:	4688      	mov	r8, r1
 80039ae:	f7fc fc21 	bl	80001f4 <strlen>
 80039b2:	f04f 0a00 	mov.w	sl, #0
 80039b6:	4605      	mov	r5, r0
 80039b8:	f04f 0b00 	mov.w	fp, #0
 80039bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80039c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039c2:	781a      	ldrb	r2, [r3, #0]
 80039c4:	2a2b      	cmp	r2, #43	; 0x2b
 80039c6:	d04e      	beq.n	8003a66 <_strtod_l+0xd6>
 80039c8:	d83b      	bhi.n	8003a42 <_strtod_l+0xb2>
 80039ca:	2a0d      	cmp	r2, #13
 80039cc:	d834      	bhi.n	8003a38 <_strtod_l+0xa8>
 80039ce:	2a08      	cmp	r2, #8
 80039d0:	d834      	bhi.n	8003a3c <_strtod_l+0xac>
 80039d2:	2a00      	cmp	r2, #0
 80039d4:	d03e      	beq.n	8003a54 <_strtod_l+0xc4>
 80039d6:	2300      	movs	r3, #0
 80039d8:	930a      	str	r3, [sp, #40]	; 0x28
 80039da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80039dc:	7833      	ldrb	r3, [r6, #0]
 80039de:	2b30      	cmp	r3, #48	; 0x30
 80039e0:	f040 80b0 	bne.w	8003b44 <_strtod_l+0x1b4>
 80039e4:	7873      	ldrb	r3, [r6, #1]
 80039e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80039ea:	2b58      	cmp	r3, #88	; 0x58
 80039ec:	d168      	bne.n	8003ac0 <_strtod_l+0x130>
 80039ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	ab18      	add	r3, sp, #96	; 0x60
 80039f4:	9702      	str	r7, [sp, #8]
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	4a8d      	ldr	r2, [pc, #564]	; (8003c30 <_strtod_l+0x2a0>)
 80039fa:	ab19      	add	r3, sp, #100	; 0x64
 80039fc:	a917      	add	r1, sp, #92	; 0x5c
 80039fe:	4620      	mov	r0, r4
 8003a00:	f001 fd5c 	bl	80054bc <__gethex>
 8003a04:	f010 0707 	ands.w	r7, r0, #7
 8003a08:	4605      	mov	r5, r0
 8003a0a:	d005      	beq.n	8003a18 <_strtod_l+0x88>
 8003a0c:	2f06      	cmp	r7, #6
 8003a0e:	d12c      	bne.n	8003a6a <_strtod_l+0xda>
 8003a10:	3601      	adds	r6, #1
 8003a12:	2300      	movs	r3, #0
 8003a14:	9617      	str	r6, [sp, #92]	; 0x5c
 8003a16:	930a      	str	r3, [sp, #40]	; 0x28
 8003a18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f040 8590 	bne.w	8004540 <_strtod_l+0xbb0>
 8003a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a22:	b1eb      	cbz	r3, 8003a60 <_strtod_l+0xd0>
 8003a24:	4652      	mov	r2, sl
 8003a26:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003a2a:	ec43 2b10 	vmov	d0, r2, r3
 8003a2e:	b01d      	add	sp, #116	; 0x74
 8003a30:	ecbd 8b02 	vpop	{d8}
 8003a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a38:	2a20      	cmp	r2, #32
 8003a3a:	d1cc      	bne.n	80039d6 <_strtod_l+0x46>
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	9317      	str	r3, [sp, #92]	; 0x5c
 8003a40:	e7be      	b.n	80039c0 <_strtod_l+0x30>
 8003a42:	2a2d      	cmp	r2, #45	; 0x2d
 8003a44:	d1c7      	bne.n	80039d6 <_strtod_l+0x46>
 8003a46:	2201      	movs	r2, #1
 8003a48:	920a      	str	r2, [sp, #40]	; 0x28
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8003a4e:	785b      	ldrb	r3, [r3, #1]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1c2      	bne.n	80039da <_strtod_l+0x4a>
 8003a54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003a56:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f040 856e 	bne.w	800453c <_strtod_l+0xbac>
 8003a60:	4652      	mov	r2, sl
 8003a62:	465b      	mov	r3, fp
 8003a64:	e7e1      	b.n	8003a2a <_strtod_l+0x9a>
 8003a66:	2200      	movs	r2, #0
 8003a68:	e7ee      	b.n	8003a48 <_strtod_l+0xb8>
 8003a6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003a6c:	b13a      	cbz	r2, 8003a7e <_strtod_l+0xee>
 8003a6e:	2135      	movs	r1, #53	; 0x35
 8003a70:	a81a      	add	r0, sp, #104	; 0x68
 8003a72:	f002 fce6 	bl	8006442 <__copybits>
 8003a76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f002 f8a5 	bl	8005bc8 <_Bfree>
 8003a7e:	3f01      	subs	r7, #1
 8003a80:	2f04      	cmp	r7, #4
 8003a82:	d806      	bhi.n	8003a92 <_strtod_l+0x102>
 8003a84:	e8df f007 	tbb	[pc, r7]
 8003a88:	1714030a 	.word	0x1714030a
 8003a8c:	0a          	.byte	0x0a
 8003a8d:	00          	.byte	0x00
 8003a8e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8003a92:	0728      	lsls	r0, r5, #28
 8003a94:	d5c0      	bpl.n	8003a18 <_strtod_l+0x88>
 8003a96:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003a9a:	e7bd      	b.n	8003a18 <_strtod_l+0x88>
 8003a9c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8003aa0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003aa2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003aa6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003aaa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003aae:	e7f0      	b.n	8003a92 <_strtod_l+0x102>
 8003ab0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8003c34 <_strtod_l+0x2a4>
 8003ab4:	e7ed      	b.n	8003a92 <_strtod_l+0x102>
 8003ab6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003aba:	f04f 3aff 	mov.w	sl, #4294967295
 8003abe:	e7e8      	b.n	8003a92 <_strtod_l+0x102>
 8003ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	9217      	str	r2, [sp, #92]	; 0x5c
 8003ac6:	785b      	ldrb	r3, [r3, #1]
 8003ac8:	2b30      	cmp	r3, #48	; 0x30
 8003aca:	d0f9      	beq.n	8003ac0 <_strtod_l+0x130>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0a3      	beq.n	8003a18 <_strtod_l+0x88>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f04f 0900 	mov.w	r9, #0
 8003ad6:	9304      	str	r3, [sp, #16]
 8003ad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003ada:	9308      	str	r3, [sp, #32]
 8003adc:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ae0:	464f      	mov	r7, r9
 8003ae2:	220a      	movs	r2, #10
 8003ae4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003ae6:	7806      	ldrb	r6, [r0, #0]
 8003ae8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8003aec:	b2d9      	uxtb	r1, r3
 8003aee:	2909      	cmp	r1, #9
 8003af0:	d92a      	bls.n	8003b48 <_strtod_l+0x1b8>
 8003af2:	9905      	ldr	r1, [sp, #20]
 8003af4:	462a      	mov	r2, r5
 8003af6:	f003 fac3 	bl	8007080 <strncmp>
 8003afa:	b398      	cbz	r0, 8003b64 <_strtod_l+0x1d4>
 8003afc:	2000      	movs	r0, #0
 8003afe:	4632      	mov	r2, r6
 8003b00:	463d      	mov	r5, r7
 8003b02:	9005      	str	r0, [sp, #20]
 8003b04:	4603      	mov	r3, r0
 8003b06:	2a65      	cmp	r2, #101	; 0x65
 8003b08:	d001      	beq.n	8003b0e <_strtod_l+0x17e>
 8003b0a:	2a45      	cmp	r2, #69	; 0x45
 8003b0c:	d118      	bne.n	8003b40 <_strtod_l+0x1b0>
 8003b0e:	b91d      	cbnz	r5, 8003b18 <_strtod_l+0x188>
 8003b10:	9a04      	ldr	r2, [sp, #16]
 8003b12:	4302      	orrs	r2, r0
 8003b14:	d09e      	beq.n	8003a54 <_strtod_l+0xc4>
 8003b16:	2500      	movs	r5, #0
 8003b18:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8003b1c:	f108 0201 	add.w	r2, r8, #1
 8003b20:	9217      	str	r2, [sp, #92]	; 0x5c
 8003b22:	f898 2001 	ldrb.w	r2, [r8, #1]
 8003b26:	2a2b      	cmp	r2, #43	; 0x2b
 8003b28:	d075      	beq.n	8003c16 <_strtod_l+0x286>
 8003b2a:	2a2d      	cmp	r2, #45	; 0x2d
 8003b2c:	d07b      	beq.n	8003c26 <_strtod_l+0x296>
 8003b2e:	f04f 0c00 	mov.w	ip, #0
 8003b32:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003b36:	2909      	cmp	r1, #9
 8003b38:	f240 8082 	bls.w	8003c40 <_strtod_l+0x2b0>
 8003b3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003b40:	2600      	movs	r6, #0
 8003b42:	e09d      	b.n	8003c80 <_strtod_l+0x2f0>
 8003b44:	2300      	movs	r3, #0
 8003b46:	e7c4      	b.n	8003ad2 <_strtod_l+0x142>
 8003b48:	2f08      	cmp	r7, #8
 8003b4a:	bfd8      	it	le
 8003b4c:	9907      	ldrle	r1, [sp, #28]
 8003b4e:	f100 0001 	add.w	r0, r0, #1
 8003b52:	bfda      	itte	le
 8003b54:	fb02 3301 	mlale	r3, r2, r1, r3
 8003b58:	9307      	strle	r3, [sp, #28]
 8003b5a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8003b5e:	3701      	adds	r7, #1
 8003b60:	9017      	str	r0, [sp, #92]	; 0x5c
 8003b62:	e7bf      	b.n	8003ae4 <_strtod_l+0x154>
 8003b64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003b66:	195a      	adds	r2, r3, r5
 8003b68:	9217      	str	r2, [sp, #92]	; 0x5c
 8003b6a:	5d5a      	ldrb	r2, [r3, r5]
 8003b6c:	2f00      	cmp	r7, #0
 8003b6e:	d037      	beq.n	8003be0 <_strtod_l+0x250>
 8003b70:	9005      	str	r0, [sp, #20]
 8003b72:	463d      	mov	r5, r7
 8003b74:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003b78:	2b09      	cmp	r3, #9
 8003b7a:	d912      	bls.n	8003ba2 <_strtod_l+0x212>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e7c2      	b.n	8003b06 <_strtod_l+0x176>
 8003b80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	9217      	str	r2, [sp, #92]	; 0x5c
 8003b86:	785a      	ldrb	r2, [r3, #1]
 8003b88:	3001      	adds	r0, #1
 8003b8a:	2a30      	cmp	r2, #48	; 0x30
 8003b8c:	d0f8      	beq.n	8003b80 <_strtod_l+0x1f0>
 8003b8e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	f200 84d9 	bhi.w	800454a <_strtod_l+0xbba>
 8003b98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003b9a:	9005      	str	r0, [sp, #20]
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	9308      	str	r3, [sp, #32]
 8003ba0:	4605      	mov	r5, r0
 8003ba2:	3a30      	subs	r2, #48	; 0x30
 8003ba4:	f100 0301 	add.w	r3, r0, #1
 8003ba8:	d014      	beq.n	8003bd4 <_strtod_l+0x244>
 8003baa:	9905      	ldr	r1, [sp, #20]
 8003bac:	4419      	add	r1, r3
 8003bae:	9105      	str	r1, [sp, #20]
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	eb00 0e05 	add.w	lr, r0, r5
 8003bb6:	210a      	movs	r1, #10
 8003bb8:	4573      	cmp	r3, lr
 8003bba:	d113      	bne.n	8003be4 <_strtod_l+0x254>
 8003bbc:	182b      	adds	r3, r5, r0
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	f105 0501 	add.w	r5, r5, #1
 8003bc4:	4405      	add	r5, r0
 8003bc6:	dc1c      	bgt.n	8003c02 <_strtod_l+0x272>
 8003bc8:	9907      	ldr	r1, [sp, #28]
 8003bca:	230a      	movs	r3, #10
 8003bcc:	fb03 2301 	mla	r3, r3, r1, r2
 8003bd0:	9307      	str	r3, [sp, #28]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003bd6:	1c51      	adds	r1, r2, #1
 8003bd8:	9117      	str	r1, [sp, #92]	; 0x5c
 8003bda:	7852      	ldrb	r2, [r2, #1]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	e7c9      	b.n	8003b74 <_strtod_l+0x1e4>
 8003be0:	4638      	mov	r0, r7
 8003be2:	e7d2      	b.n	8003b8a <_strtod_l+0x1fa>
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	dc04      	bgt.n	8003bf2 <_strtod_l+0x262>
 8003be8:	9e07      	ldr	r6, [sp, #28]
 8003bea:	434e      	muls	r6, r1
 8003bec:	9607      	str	r6, [sp, #28]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	e7e2      	b.n	8003bb8 <_strtod_l+0x228>
 8003bf2:	f103 0c01 	add.w	ip, r3, #1
 8003bf6:	f1bc 0f10 	cmp.w	ip, #16
 8003bfa:	bfd8      	it	le
 8003bfc:	fb01 f909 	mulle.w	r9, r1, r9
 8003c00:	e7f5      	b.n	8003bee <_strtod_l+0x25e>
 8003c02:	2d10      	cmp	r5, #16
 8003c04:	bfdc      	itt	le
 8003c06:	230a      	movle	r3, #10
 8003c08:	fb03 2909 	mlale	r9, r3, r9, r2
 8003c0c:	e7e1      	b.n	8003bd2 <_strtod_l+0x242>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	9305      	str	r3, [sp, #20]
 8003c12:	2301      	movs	r3, #1
 8003c14:	e77c      	b.n	8003b10 <_strtod_l+0x180>
 8003c16:	f04f 0c00 	mov.w	ip, #0
 8003c1a:	f108 0202 	add.w	r2, r8, #2
 8003c1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8003c20:	f898 2002 	ldrb.w	r2, [r8, #2]
 8003c24:	e785      	b.n	8003b32 <_strtod_l+0x1a2>
 8003c26:	f04f 0c01 	mov.w	ip, #1
 8003c2a:	e7f6      	b.n	8003c1a <_strtod_l+0x28a>
 8003c2c:	080080b8 	.word	0x080080b8
 8003c30:	08007e6c 	.word	0x08007e6c
 8003c34:	7ff00000 	.word	0x7ff00000
 8003c38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003c3a:	1c51      	adds	r1, r2, #1
 8003c3c:	9117      	str	r1, [sp, #92]	; 0x5c
 8003c3e:	7852      	ldrb	r2, [r2, #1]
 8003c40:	2a30      	cmp	r2, #48	; 0x30
 8003c42:	d0f9      	beq.n	8003c38 <_strtod_l+0x2a8>
 8003c44:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003c48:	2908      	cmp	r1, #8
 8003c4a:	f63f af79 	bhi.w	8003b40 <_strtod_l+0x1b0>
 8003c4e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8003c52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003c54:	9206      	str	r2, [sp, #24]
 8003c56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003c58:	1c51      	adds	r1, r2, #1
 8003c5a:	9117      	str	r1, [sp, #92]	; 0x5c
 8003c5c:	7852      	ldrb	r2, [r2, #1]
 8003c5e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8003c62:	2e09      	cmp	r6, #9
 8003c64:	d937      	bls.n	8003cd6 <_strtod_l+0x346>
 8003c66:	9e06      	ldr	r6, [sp, #24]
 8003c68:	1b89      	subs	r1, r1, r6
 8003c6a:	2908      	cmp	r1, #8
 8003c6c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8003c70:	dc02      	bgt.n	8003c78 <_strtod_l+0x2e8>
 8003c72:	4576      	cmp	r6, lr
 8003c74:	bfa8      	it	ge
 8003c76:	4676      	movge	r6, lr
 8003c78:	f1bc 0f00 	cmp.w	ip, #0
 8003c7c:	d000      	beq.n	8003c80 <_strtod_l+0x2f0>
 8003c7e:	4276      	negs	r6, r6
 8003c80:	2d00      	cmp	r5, #0
 8003c82:	d14d      	bne.n	8003d20 <_strtod_l+0x390>
 8003c84:	9904      	ldr	r1, [sp, #16]
 8003c86:	4301      	orrs	r1, r0
 8003c88:	f47f aec6 	bne.w	8003a18 <_strtod_l+0x88>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f47f aee1 	bne.w	8003a54 <_strtod_l+0xc4>
 8003c92:	2a69      	cmp	r2, #105	; 0x69
 8003c94:	d027      	beq.n	8003ce6 <_strtod_l+0x356>
 8003c96:	dc24      	bgt.n	8003ce2 <_strtod_l+0x352>
 8003c98:	2a49      	cmp	r2, #73	; 0x49
 8003c9a:	d024      	beq.n	8003ce6 <_strtod_l+0x356>
 8003c9c:	2a4e      	cmp	r2, #78	; 0x4e
 8003c9e:	f47f aed9 	bne.w	8003a54 <_strtod_l+0xc4>
 8003ca2:	499f      	ldr	r1, [pc, #636]	; (8003f20 <_strtod_l+0x590>)
 8003ca4:	a817      	add	r0, sp, #92	; 0x5c
 8003ca6:	f001 fe61 	bl	800596c <__match>
 8003caa:	2800      	cmp	r0, #0
 8003cac:	f43f aed2 	beq.w	8003a54 <_strtod_l+0xc4>
 8003cb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b28      	cmp	r3, #40	; 0x28
 8003cb6:	d12d      	bne.n	8003d14 <_strtod_l+0x384>
 8003cb8:	499a      	ldr	r1, [pc, #616]	; (8003f24 <_strtod_l+0x594>)
 8003cba:	aa1a      	add	r2, sp, #104	; 0x68
 8003cbc:	a817      	add	r0, sp, #92	; 0x5c
 8003cbe:	f001 fe69 	bl	8005994 <__hexnan>
 8003cc2:	2805      	cmp	r0, #5
 8003cc4:	d126      	bne.n	8003d14 <_strtod_l+0x384>
 8003cc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003cc8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8003ccc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003cd0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003cd4:	e6a0      	b.n	8003a18 <_strtod_l+0x88>
 8003cd6:	210a      	movs	r1, #10
 8003cd8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8003cdc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003ce0:	e7b9      	b.n	8003c56 <_strtod_l+0x2c6>
 8003ce2:	2a6e      	cmp	r2, #110	; 0x6e
 8003ce4:	e7db      	b.n	8003c9e <_strtod_l+0x30e>
 8003ce6:	4990      	ldr	r1, [pc, #576]	; (8003f28 <_strtod_l+0x598>)
 8003ce8:	a817      	add	r0, sp, #92	; 0x5c
 8003cea:	f001 fe3f 	bl	800596c <__match>
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	f43f aeb0 	beq.w	8003a54 <_strtod_l+0xc4>
 8003cf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003cf6:	498d      	ldr	r1, [pc, #564]	; (8003f2c <_strtod_l+0x59c>)
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	a817      	add	r0, sp, #92	; 0x5c
 8003cfc:	9317      	str	r3, [sp, #92]	; 0x5c
 8003cfe:	f001 fe35 	bl	800596c <__match>
 8003d02:	b910      	cbnz	r0, 8003d0a <_strtod_l+0x37a>
 8003d04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003d06:	3301      	adds	r3, #1
 8003d08:	9317      	str	r3, [sp, #92]	; 0x5c
 8003d0a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8003f3c <_strtod_l+0x5ac>
 8003d0e:	f04f 0a00 	mov.w	sl, #0
 8003d12:	e681      	b.n	8003a18 <_strtod_l+0x88>
 8003d14:	4886      	ldr	r0, [pc, #536]	; (8003f30 <_strtod_l+0x5a0>)
 8003d16:	f003 f963 	bl	8006fe0 <nan>
 8003d1a:	ec5b ab10 	vmov	sl, fp, d0
 8003d1e:	e67b      	b.n	8003a18 <_strtod_l+0x88>
 8003d20:	9b05      	ldr	r3, [sp, #20]
 8003d22:	9807      	ldr	r0, [sp, #28]
 8003d24:	1af3      	subs	r3, r6, r3
 8003d26:	2f00      	cmp	r7, #0
 8003d28:	bf08      	it	eq
 8003d2a:	462f      	moveq	r7, r5
 8003d2c:	2d10      	cmp	r5, #16
 8003d2e:	9306      	str	r3, [sp, #24]
 8003d30:	46a8      	mov	r8, r5
 8003d32:	bfa8      	it	ge
 8003d34:	f04f 0810 	movge.w	r8, #16
 8003d38:	f7fc fbfc 	bl	8000534 <__aeabi_ui2d>
 8003d3c:	2d09      	cmp	r5, #9
 8003d3e:	4682      	mov	sl, r0
 8003d40:	468b      	mov	fp, r1
 8003d42:	dd13      	ble.n	8003d6c <_strtod_l+0x3dc>
 8003d44:	4b7b      	ldr	r3, [pc, #492]	; (8003f34 <_strtod_l+0x5a4>)
 8003d46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003d4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003d4e:	f7fc fc6b 	bl	8000628 <__aeabi_dmul>
 8003d52:	4682      	mov	sl, r0
 8003d54:	4648      	mov	r0, r9
 8003d56:	468b      	mov	fp, r1
 8003d58:	f7fc fbec 	bl	8000534 <__aeabi_ui2d>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4650      	mov	r0, sl
 8003d62:	4659      	mov	r1, fp
 8003d64:	f7fc faaa 	bl	80002bc <__adddf3>
 8003d68:	4682      	mov	sl, r0
 8003d6a:	468b      	mov	fp, r1
 8003d6c:	2d0f      	cmp	r5, #15
 8003d6e:	dc38      	bgt.n	8003de2 <_strtod_l+0x452>
 8003d70:	9b06      	ldr	r3, [sp, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f43f ae50 	beq.w	8003a18 <_strtod_l+0x88>
 8003d78:	dd24      	ble.n	8003dc4 <_strtod_l+0x434>
 8003d7a:	2b16      	cmp	r3, #22
 8003d7c:	dc0b      	bgt.n	8003d96 <_strtod_l+0x406>
 8003d7e:	496d      	ldr	r1, [pc, #436]	; (8003f34 <_strtod_l+0x5a4>)
 8003d80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d88:	4652      	mov	r2, sl
 8003d8a:	465b      	mov	r3, fp
 8003d8c:	f7fc fc4c 	bl	8000628 <__aeabi_dmul>
 8003d90:	4682      	mov	sl, r0
 8003d92:	468b      	mov	fp, r1
 8003d94:	e640      	b.n	8003a18 <_strtod_l+0x88>
 8003d96:	9a06      	ldr	r2, [sp, #24]
 8003d98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	db20      	blt.n	8003de2 <_strtod_l+0x452>
 8003da0:	4c64      	ldr	r4, [pc, #400]	; (8003f34 <_strtod_l+0x5a4>)
 8003da2:	f1c5 050f 	rsb	r5, r5, #15
 8003da6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003daa:	4652      	mov	r2, sl
 8003dac:	465b      	mov	r3, fp
 8003dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003db2:	f7fc fc39 	bl	8000628 <__aeabi_dmul>
 8003db6:	9b06      	ldr	r3, [sp, #24]
 8003db8:	1b5d      	subs	r5, r3, r5
 8003dba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003dbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003dc2:	e7e3      	b.n	8003d8c <_strtod_l+0x3fc>
 8003dc4:	9b06      	ldr	r3, [sp, #24]
 8003dc6:	3316      	adds	r3, #22
 8003dc8:	db0b      	blt.n	8003de2 <_strtod_l+0x452>
 8003dca:	9b05      	ldr	r3, [sp, #20]
 8003dcc:	1b9e      	subs	r6, r3, r6
 8003dce:	4b59      	ldr	r3, [pc, #356]	; (8003f34 <_strtod_l+0x5a4>)
 8003dd0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8003dd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003dd8:	4650      	mov	r0, sl
 8003dda:	4659      	mov	r1, fp
 8003ddc:	f7fc fd4e 	bl	800087c <__aeabi_ddiv>
 8003de0:	e7d6      	b.n	8003d90 <_strtod_l+0x400>
 8003de2:	9b06      	ldr	r3, [sp, #24]
 8003de4:	eba5 0808 	sub.w	r8, r5, r8
 8003de8:	4498      	add	r8, r3
 8003dea:	f1b8 0f00 	cmp.w	r8, #0
 8003dee:	dd74      	ble.n	8003eda <_strtod_l+0x54a>
 8003df0:	f018 030f 	ands.w	r3, r8, #15
 8003df4:	d00a      	beq.n	8003e0c <_strtod_l+0x47c>
 8003df6:	494f      	ldr	r1, [pc, #316]	; (8003f34 <_strtod_l+0x5a4>)
 8003df8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003dfc:	4652      	mov	r2, sl
 8003dfe:	465b      	mov	r3, fp
 8003e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e04:	f7fc fc10 	bl	8000628 <__aeabi_dmul>
 8003e08:	4682      	mov	sl, r0
 8003e0a:	468b      	mov	fp, r1
 8003e0c:	f038 080f 	bics.w	r8, r8, #15
 8003e10:	d04f      	beq.n	8003eb2 <_strtod_l+0x522>
 8003e12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003e16:	dd22      	ble.n	8003e5e <_strtod_l+0x4ce>
 8003e18:	2500      	movs	r5, #0
 8003e1a:	462e      	mov	r6, r5
 8003e1c:	9507      	str	r5, [sp, #28]
 8003e1e:	9505      	str	r5, [sp, #20]
 8003e20:	2322      	movs	r3, #34	; 0x22
 8003e22:	f8df b118 	ldr.w	fp, [pc, #280]	; 8003f3c <_strtod_l+0x5ac>
 8003e26:	6023      	str	r3, [r4, #0]
 8003e28:	f04f 0a00 	mov.w	sl, #0
 8003e2c:	9b07      	ldr	r3, [sp, #28]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f43f adf2 	beq.w	8003a18 <_strtod_l+0x88>
 8003e34:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003e36:	4620      	mov	r0, r4
 8003e38:	f001 fec6 	bl	8005bc8 <_Bfree>
 8003e3c:	9905      	ldr	r1, [sp, #20]
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f001 fec2 	bl	8005bc8 <_Bfree>
 8003e44:	4631      	mov	r1, r6
 8003e46:	4620      	mov	r0, r4
 8003e48:	f001 febe 	bl	8005bc8 <_Bfree>
 8003e4c:	9907      	ldr	r1, [sp, #28]
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f001 feba 	bl	8005bc8 <_Bfree>
 8003e54:	4629      	mov	r1, r5
 8003e56:	4620      	mov	r0, r4
 8003e58:	f001 feb6 	bl	8005bc8 <_Bfree>
 8003e5c:	e5dc      	b.n	8003a18 <_strtod_l+0x88>
 8003e5e:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <_strtod_l+0x5a8>)
 8003e60:	9304      	str	r3, [sp, #16]
 8003e62:	2300      	movs	r3, #0
 8003e64:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003e68:	4650      	mov	r0, sl
 8003e6a:	4659      	mov	r1, fp
 8003e6c:	4699      	mov	r9, r3
 8003e6e:	f1b8 0f01 	cmp.w	r8, #1
 8003e72:	dc21      	bgt.n	8003eb8 <_strtod_l+0x528>
 8003e74:	b10b      	cbz	r3, 8003e7a <_strtod_l+0x4ea>
 8003e76:	4682      	mov	sl, r0
 8003e78:	468b      	mov	fp, r1
 8003e7a:	4b2f      	ldr	r3, [pc, #188]	; (8003f38 <_strtod_l+0x5a8>)
 8003e7c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003e80:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003e84:	4652      	mov	r2, sl
 8003e86:	465b      	mov	r3, fp
 8003e88:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003e8c:	f7fc fbcc 	bl	8000628 <__aeabi_dmul>
 8003e90:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <_strtod_l+0x5ac>)
 8003e92:	460a      	mov	r2, r1
 8003e94:	400b      	ands	r3, r1
 8003e96:	492a      	ldr	r1, [pc, #168]	; (8003f40 <_strtod_l+0x5b0>)
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	4682      	mov	sl, r0
 8003e9c:	d8bc      	bhi.n	8003e18 <_strtod_l+0x488>
 8003e9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003ea2:	428b      	cmp	r3, r1
 8003ea4:	bf86      	itte	hi
 8003ea6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8003f44 <_strtod_l+0x5b4>
 8003eaa:	f04f 3aff 	movhi.w	sl, #4294967295
 8003eae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	9304      	str	r3, [sp, #16]
 8003eb6:	e084      	b.n	8003fc2 <_strtod_l+0x632>
 8003eb8:	f018 0f01 	tst.w	r8, #1
 8003ebc:	d005      	beq.n	8003eca <_strtod_l+0x53a>
 8003ebe:	9b04      	ldr	r3, [sp, #16]
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	f7fc fbb0 	bl	8000628 <__aeabi_dmul>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	9a04      	ldr	r2, [sp, #16]
 8003ecc:	3208      	adds	r2, #8
 8003ece:	f109 0901 	add.w	r9, r9, #1
 8003ed2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003ed6:	9204      	str	r2, [sp, #16]
 8003ed8:	e7c9      	b.n	8003e6e <_strtod_l+0x4de>
 8003eda:	d0ea      	beq.n	8003eb2 <_strtod_l+0x522>
 8003edc:	f1c8 0800 	rsb	r8, r8, #0
 8003ee0:	f018 020f 	ands.w	r2, r8, #15
 8003ee4:	d00a      	beq.n	8003efc <_strtod_l+0x56c>
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <_strtod_l+0x5a4>)
 8003ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003eec:	4650      	mov	r0, sl
 8003eee:	4659      	mov	r1, fp
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f7fc fcc2 	bl	800087c <__aeabi_ddiv>
 8003ef8:	4682      	mov	sl, r0
 8003efa:	468b      	mov	fp, r1
 8003efc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003f00:	d0d7      	beq.n	8003eb2 <_strtod_l+0x522>
 8003f02:	f1b8 0f1f 	cmp.w	r8, #31
 8003f06:	dd1f      	ble.n	8003f48 <_strtod_l+0x5b8>
 8003f08:	2500      	movs	r5, #0
 8003f0a:	462e      	mov	r6, r5
 8003f0c:	9507      	str	r5, [sp, #28]
 8003f0e:	9505      	str	r5, [sp, #20]
 8003f10:	2322      	movs	r3, #34	; 0x22
 8003f12:	f04f 0a00 	mov.w	sl, #0
 8003f16:	f04f 0b00 	mov.w	fp, #0
 8003f1a:	6023      	str	r3, [r4, #0]
 8003f1c:	e786      	b.n	8003e2c <_strtod_l+0x49c>
 8003f1e:	bf00      	nop
 8003f20:	08007e41 	.word	0x08007e41
 8003f24:	08007e80 	.word	0x08007e80
 8003f28:	08007e39 	.word	0x08007e39
 8003f2c:	08007fc4 	.word	0x08007fc4
 8003f30:	0800828b 	.word	0x0800828b
 8003f34:	08008150 	.word	0x08008150
 8003f38:	08008128 	.word	0x08008128
 8003f3c:	7ff00000 	.word	0x7ff00000
 8003f40:	7ca00000 	.word	0x7ca00000
 8003f44:	7fefffff 	.word	0x7fefffff
 8003f48:	f018 0310 	ands.w	r3, r8, #16
 8003f4c:	bf18      	it	ne
 8003f4e:	236a      	movne	r3, #106	; 0x6a
 8003f50:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004300 <_strtod_l+0x970>
 8003f54:	9304      	str	r3, [sp, #16]
 8003f56:	4650      	mov	r0, sl
 8003f58:	4659      	mov	r1, fp
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f018 0f01 	tst.w	r8, #1
 8003f60:	d004      	beq.n	8003f6c <_strtod_l+0x5dc>
 8003f62:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003f66:	f7fc fb5f 	bl	8000628 <__aeabi_dmul>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8003f70:	f109 0908 	add.w	r9, r9, #8
 8003f74:	d1f2      	bne.n	8003f5c <_strtod_l+0x5cc>
 8003f76:	b10b      	cbz	r3, 8003f7c <_strtod_l+0x5ec>
 8003f78:	4682      	mov	sl, r0
 8003f7a:	468b      	mov	fp, r1
 8003f7c:	9b04      	ldr	r3, [sp, #16]
 8003f7e:	b1c3      	cbz	r3, 8003fb2 <_strtod_l+0x622>
 8003f80:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8003f84:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	4659      	mov	r1, fp
 8003f8c:	dd11      	ble.n	8003fb2 <_strtod_l+0x622>
 8003f8e:	2b1f      	cmp	r3, #31
 8003f90:	f340 8124 	ble.w	80041dc <_strtod_l+0x84c>
 8003f94:	2b34      	cmp	r3, #52	; 0x34
 8003f96:	bfde      	ittt	le
 8003f98:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8003f9c:	f04f 33ff 	movle.w	r3, #4294967295
 8003fa0:	fa03 f202 	lslle.w	r2, r3, r2
 8003fa4:	f04f 0a00 	mov.w	sl, #0
 8003fa8:	bfcc      	ite	gt
 8003faa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003fae:	ea02 0b01 	andle.w	fp, r2, r1
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	4650      	mov	r0, sl
 8003fb8:	4659      	mov	r1, fp
 8003fba:	f7fc fd9d 	bl	8000af8 <__aeabi_dcmpeq>
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	d1a2      	bne.n	8003f08 <_strtod_l+0x578>
 8003fc2:	9b07      	ldr	r3, [sp, #28]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	9908      	ldr	r1, [sp, #32]
 8003fc8:	462b      	mov	r3, r5
 8003fca:	463a      	mov	r2, r7
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f001 fe63 	bl	8005c98 <__s2b>
 8003fd2:	9007      	str	r0, [sp, #28]
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	f43f af1f 	beq.w	8003e18 <_strtod_l+0x488>
 8003fda:	9b05      	ldr	r3, [sp, #20]
 8003fdc:	1b9e      	subs	r6, r3, r6
 8003fde:	9b06      	ldr	r3, [sp, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bfb4      	ite	lt
 8003fe4:	4633      	movlt	r3, r6
 8003fe6:	2300      	movge	r3, #0
 8003fe8:	930c      	str	r3, [sp, #48]	; 0x30
 8003fea:	9b06      	ldr	r3, [sp, #24]
 8003fec:	2500      	movs	r5, #0
 8003fee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003ff2:	9312      	str	r3, [sp, #72]	; 0x48
 8003ff4:	462e      	mov	r6, r5
 8003ff6:	9b07      	ldr	r3, [sp, #28]
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	6859      	ldr	r1, [r3, #4]
 8003ffc:	f001 fda4 	bl	8005b48 <_Balloc>
 8004000:	9005      	str	r0, [sp, #20]
 8004002:	2800      	cmp	r0, #0
 8004004:	f43f af0c 	beq.w	8003e20 <_strtod_l+0x490>
 8004008:	9b07      	ldr	r3, [sp, #28]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	3202      	adds	r2, #2
 800400e:	f103 010c 	add.w	r1, r3, #12
 8004012:	0092      	lsls	r2, r2, #2
 8004014:	300c      	adds	r0, #12
 8004016:	f001 fd89 	bl	8005b2c <memcpy>
 800401a:	ec4b ab10 	vmov	d0, sl, fp
 800401e:	aa1a      	add	r2, sp, #104	; 0x68
 8004020:	a919      	add	r1, sp, #100	; 0x64
 8004022:	4620      	mov	r0, r4
 8004024:	f002 f97e 	bl	8006324 <__d2b>
 8004028:	ec4b ab18 	vmov	d8, sl, fp
 800402c:	9018      	str	r0, [sp, #96]	; 0x60
 800402e:	2800      	cmp	r0, #0
 8004030:	f43f aef6 	beq.w	8003e20 <_strtod_l+0x490>
 8004034:	2101      	movs	r1, #1
 8004036:	4620      	mov	r0, r4
 8004038:	f001 fec8 	bl	8005dcc <__i2b>
 800403c:	4606      	mov	r6, r0
 800403e:	2800      	cmp	r0, #0
 8004040:	f43f aeee 	beq.w	8003e20 <_strtod_l+0x490>
 8004044:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004046:	9904      	ldr	r1, [sp, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	bfab      	itete	ge
 800404c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800404e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004050:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004052:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004056:	bfac      	ite	ge
 8004058:	eb03 0902 	addge.w	r9, r3, r2
 800405c:	1ad7      	sublt	r7, r2, r3
 800405e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004060:	eba3 0801 	sub.w	r8, r3, r1
 8004064:	4490      	add	r8, r2
 8004066:	4ba1      	ldr	r3, [pc, #644]	; (80042ec <_strtod_l+0x95c>)
 8004068:	f108 38ff 	add.w	r8, r8, #4294967295
 800406c:	4598      	cmp	r8, r3
 800406e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004072:	f280 80c7 	bge.w	8004204 <_strtod_l+0x874>
 8004076:	eba3 0308 	sub.w	r3, r3, r8
 800407a:	2b1f      	cmp	r3, #31
 800407c:	eba2 0203 	sub.w	r2, r2, r3
 8004080:	f04f 0101 	mov.w	r1, #1
 8004084:	f300 80b1 	bgt.w	80041ea <_strtod_l+0x85a>
 8004088:	fa01 f303 	lsl.w	r3, r1, r3
 800408c:	930d      	str	r3, [sp, #52]	; 0x34
 800408e:	2300      	movs	r3, #0
 8004090:	9308      	str	r3, [sp, #32]
 8004092:	eb09 0802 	add.w	r8, r9, r2
 8004096:	9b04      	ldr	r3, [sp, #16]
 8004098:	45c1      	cmp	r9, r8
 800409a:	4417      	add	r7, r2
 800409c:	441f      	add	r7, r3
 800409e:	464b      	mov	r3, r9
 80040a0:	bfa8      	it	ge
 80040a2:	4643      	movge	r3, r8
 80040a4:	42bb      	cmp	r3, r7
 80040a6:	bfa8      	it	ge
 80040a8:	463b      	movge	r3, r7
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bfc2      	ittt	gt
 80040ae:	eba8 0803 	subgt.w	r8, r8, r3
 80040b2:	1aff      	subgt	r7, r7, r3
 80040b4:	eba9 0903 	subgt.w	r9, r9, r3
 80040b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	dd17      	ble.n	80040ee <_strtod_l+0x75e>
 80040be:	4631      	mov	r1, r6
 80040c0:	461a      	mov	r2, r3
 80040c2:	4620      	mov	r0, r4
 80040c4:	f001 ff42 	bl	8005f4c <__pow5mult>
 80040c8:	4606      	mov	r6, r0
 80040ca:	2800      	cmp	r0, #0
 80040cc:	f43f aea8 	beq.w	8003e20 <_strtod_l+0x490>
 80040d0:	4601      	mov	r1, r0
 80040d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80040d4:	4620      	mov	r0, r4
 80040d6:	f001 fe8f 	bl	8005df8 <__multiply>
 80040da:	900b      	str	r0, [sp, #44]	; 0x2c
 80040dc:	2800      	cmp	r0, #0
 80040de:	f43f ae9f 	beq.w	8003e20 <_strtod_l+0x490>
 80040e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80040e4:	4620      	mov	r0, r4
 80040e6:	f001 fd6f 	bl	8005bc8 <_Bfree>
 80040ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040ec:	9318      	str	r3, [sp, #96]	; 0x60
 80040ee:	f1b8 0f00 	cmp.w	r8, #0
 80040f2:	f300 808c 	bgt.w	800420e <_strtod_l+0x87e>
 80040f6:	9b06      	ldr	r3, [sp, #24]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	dd08      	ble.n	800410e <_strtod_l+0x77e>
 80040fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80040fe:	9905      	ldr	r1, [sp, #20]
 8004100:	4620      	mov	r0, r4
 8004102:	f001 ff23 	bl	8005f4c <__pow5mult>
 8004106:	9005      	str	r0, [sp, #20]
 8004108:	2800      	cmp	r0, #0
 800410a:	f43f ae89 	beq.w	8003e20 <_strtod_l+0x490>
 800410e:	2f00      	cmp	r7, #0
 8004110:	dd08      	ble.n	8004124 <_strtod_l+0x794>
 8004112:	9905      	ldr	r1, [sp, #20]
 8004114:	463a      	mov	r2, r7
 8004116:	4620      	mov	r0, r4
 8004118:	f001 ff72 	bl	8006000 <__lshift>
 800411c:	9005      	str	r0, [sp, #20]
 800411e:	2800      	cmp	r0, #0
 8004120:	f43f ae7e 	beq.w	8003e20 <_strtod_l+0x490>
 8004124:	f1b9 0f00 	cmp.w	r9, #0
 8004128:	dd08      	ble.n	800413c <_strtod_l+0x7ac>
 800412a:	4631      	mov	r1, r6
 800412c:	464a      	mov	r2, r9
 800412e:	4620      	mov	r0, r4
 8004130:	f001 ff66 	bl	8006000 <__lshift>
 8004134:	4606      	mov	r6, r0
 8004136:	2800      	cmp	r0, #0
 8004138:	f43f ae72 	beq.w	8003e20 <_strtod_l+0x490>
 800413c:	9a05      	ldr	r2, [sp, #20]
 800413e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004140:	4620      	mov	r0, r4
 8004142:	f001 ffe9 	bl	8006118 <__mdiff>
 8004146:	4605      	mov	r5, r0
 8004148:	2800      	cmp	r0, #0
 800414a:	f43f ae69 	beq.w	8003e20 <_strtod_l+0x490>
 800414e:	68c3      	ldr	r3, [r0, #12]
 8004150:	930b      	str	r3, [sp, #44]	; 0x2c
 8004152:	2300      	movs	r3, #0
 8004154:	60c3      	str	r3, [r0, #12]
 8004156:	4631      	mov	r1, r6
 8004158:	f001 ffc2 	bl	80060e0 <__mcmp>
 800415c:	2800      	cmp	r0, #0
 800415e:	da60      	bge.n	8004222 <_strtod_l+0x892>
 8004160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004162:	ea53 030a 	orrs.w	r3, r3, sl
 8004166:	f040 8082 	bne.w	800426e <_strtod_l+0x8de>
 800416a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800416e:	2b00      	cmp	r3, #0
 8004170:	d17d      	bne.n	800426e <_strtod_l+0x8de>
 8004172:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004176:	0d1b      	lsrs	r3, r3, #20
 8004178:	051b      	lsls	r3, r3, #20
 800417a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800417e:	d976      	bls.n	800426e <_strtod_l+0x8de>
 8004180:	696b      	ldr	r3, [r5, #20]
 8004182:	b913      	cbnz	r3, 800418a <_strtod_l+0x7fa>
 8004184:	692b      	ldr	r3, [r5, #16]
 8004186:	2b01      	cmp	r3, #1
 8004188:	dd71      	ble.n	800426e <_strtod_l+0x8de>
 800418a:	4629      	mov	r1, r5
 800418c:	2201      	movs	r2, #1
 800418e:	4620      	mov	r0, r4
 8004190:	f001 ff36 	bl	8006000 <__lshift>
 8004194:	4631      	mov	r1, r6
 8004196:	4605      	mov	r5, r0
 8004198:	f001 ffa2 	bl	80060e0 <__mcmp>
 800419c:	2800      	cmp	r0, #0
 800419e:	dd66      	ble.n	800426e <_strtod_l+0x8de>
 80041a0:	9904      	ldr	r1, [sp, #16]
 80041a2:	4a53      	ldr	r2, [pc, #332]	; (80042f0 <_strtod_l+0x960>)
 80041a4:	465b      	mov	r3, fp
 80041a6:	2900      	cmp	r1, #0
 80041a8:	f000 8081 	beq.w	80042ae <_strtod_l+0x91e>
 80041ac:	ea02 010b 	and.w	r1, r2, fp
 80041b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80041b4:	dc7b      	bgt.n	80042ae <_strtod_l+0x91e>
 80041b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80041ba:	f77f aea9 	ble.w	8003f10 <_strtod_l+0x580>
 80041be:	4b4d      	ldr	r3, [pc, #308]	; (80042f4 <_strtod_l+0x964>)
 80041c0:	4650      	mov	r0, sl
 80041c2:	4659      	mov	r1, fp
 80041c4:	2200      	movs	r2, #0
 80041c6:	f7fc fa2f 	bl	8000628 <__aeabi_dmul>
 80041ca:	460b      	mov	r3, r1
 80041cc:	4303      	orrs	r3, r0
 80041ce:	bf08      	it	eq
 80041d0:	2322      	moveq	r3, #34	; 0x22
 80041d2:	4682      	mov	sl, r0
 80041d4:	468b      	mov	fp, r1
 80041d6:	bf08      	it	eq
 80041d8:	6023      	streq	r3, [r4, #0]
 80041da:	e62b      	b.n	8003e34 <_strtod_l+0x4a4>
 80041dc:	f04f 32ff 	mov.w	r2, #4294967295
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	ea03 0a0a 	and.w	sl, r3, sl
 80041e8:	e6e3      	b.n	8003fb2 <_strtod_l+0x622>
 80041ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80041ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80041f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80041f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80041fa:	fa01 f308 	lsl.w	r3, r1, r8
 80041fe:	9308      	str	r3, [sp, #32]
 8004200:	910d      	str	r1, [sp, #52]	; 0x34
 8004202:	e746      	b.n	8004092 <_strtod_l+0x702>
 8004204:	2300      	movs	r3, #0
 8004206:	9308      	str	r3, [sp, #32]
 8004208:	2301      	movs	r3, #1
 800420a:	930d      	str	r3, [sp, #52]	; 0x34
 800420c:	e741      	b.n	8004092 <_strtod_l+0x702>
 800420e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004210:	4642      	mov	r2, r8
 8004212:	4620      	mov	r0, r4
 8004214:	f001 fef4 	bl	8006000 <__lshift>
 8004218:	9018      	str	r0, [sp, #96]	; 0x60
 800421a:	2800      	cmp	r0, #0
 800421c:	f47f af6b 	bne.w	80040f6 <_strtod_l+0x766>
 8004220:	e5fe      	b.n	8003e20 <_strtod_l+0x490>
 8004222:	465f      	mov	r7, fp
 8004224:	d16e      	bne.n	8004304 <_strtod_l+0x974>
 8004226:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004228:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800422c:	b342      	cbz	r2, 8004280 <_strtod_l+0x8f0>
 800422e:	4a32      	ldr	r2, [pc, #200]	; (80042f8 <_strtod_l+0x968>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d128      	bne.n	8004286 <_strtod_l+0x8f6>
 8004234:	9b04      	ldr	r3, [sp, #16]
 8004236:	4651      	mov	r1, sl
 8004238:	b1eb      	cbz	r3, 8004276 <_strtod_l+0x8e6>
 800423a:	4b2d      	ldr	r3, [pc, #180]	; (80042f0 <_strtod_l+0x960>)
 800423c:	403b      	ands	r3, r7
 800423e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004242:	f04f 32ff 	mov.w	r2, #4294967295
 8004246:	d819      	bhi.n	800427c <_strtod_l+0x8ec>
 8004248:	0d1b      	lsrs	r3, r3, #20
 800424a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	4299      	cmp	r1, r3
 8004254:	d117      	bne.n	8004286 <_strtod_l+0x8f6>
 8004256:	4b29      	ldr	r3, [pc, #164]	; (80042fc <_strtod_l+0x96c>)
 8004258:	429f      	cmp	r7, r3
 800425a:	d102      	bne.n	8004262 <_strtod_l+0x8d2>
 800425c:	3101      	adds	r1, #1
 800425e:	f43f addf 	beq.w	8003e20 <_strtod_l+0x490>
 8004262:	4b23      	ldr	r3, [pc, #140]	; (80042f0 <_strtod_l+0x960>)
 8004264:	403b      	ands	r3, r7
 8004266:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800426a:	f04f 0a00 	mov.w	sl, #0
 800426e:	9b04      	ldr	r3, [sp, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1a4      	bne.n	80041be <_strtod_l+0x82e>
 8004274:	e5de      	b.n	8003e34 <_strtod_l+0x4a4>
 8004276:	f04f 33ff 	mov.w	r3, #4294967295
 800427a:	e7ea      	b.n	8004252 <_strtod_l+0x8c2>
 800427c:	4613      	mov	r3, r2
 800427e:	e7e8      	b.n	8004252 <_strtod_l+0x8c2>
 8004280:	ea53 030a 	orrs.w	r3, r3, sl
 8004284:	d08c      	beq.n	80041a0 <_strtod_l+0x810>
 8004286:	9b08      	ldr	r3, [sp, #32]
 8004288:	b1db      	cbz	r3, 80042c2 <_strtod_l+0x932>
 800428a:	423b      	tst	r3, r7
 800428c:	d0ef      	beq.n	800426e <_strtod_l+0x8de>
 800428e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004290:	9a04      	ldr	r2, [sp, #16]
 8004292:	4650      	mov	r0, sl
 8004294:	4659      	mov	r1, fp
 8004296:	b1c3      	cbz	r3, 80042ca <_strtod_l+0x93a>
 8004298:	f7ff fb5b 	bl	8003952 <sulp>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	ec51 0b18 	vmov	r0, r1, d8
 80042a4:	f7fc f80a 	bl	80002bc <__adddf3>
 80042a8:	4682      	mov	sl, r0
 80042aa:	468b      	mov	fp, r1
 80042ac:	e7df      	b.n	800426e <_strtod_l+0x8de>
 80042ae:	4013      	ands	r3, r2
 80042b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80042b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80042b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80042bc:	f04f 3aff 	mov.w	sl, #4294967295
 80042c0:	e7d5      	b.n	800426e <_strtod_l+0x8de>
 80042c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042c4:	ea13 0f0a 	tst.w	r3, sl
 80042c8:	e7e0      	b.n	800428c <_strtod_l+0x8fc>
 80042ca:	f7ff fb42 	bl	8003952 <sulp>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	ec51 0b18 	vmov	r0, r1, d8
 80042d6:	f7fb ffef 	bl	80002b8 <__aeabi_dsub>
 80042da:	2200      	movs	r2, #0
 80042dc:	2300      	movs	r3, #0
 80042de:	4682      	mov	sl, r0
 80042e0:	468b      	mov	fp, r1
 80042e2:	f7fc fc09 	bl	8000af8 <__aeabi_dcmpeq>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d0c1      	beq.n	800426e <_strtod_l+0x8de>
 80042ea:	e611      	b.n	8003f10 <_strtod_l+0x580>
 80042ec:	fffffc02 	.word	0xfffffc02
 80042f0:	7ff00000 	.word	0x7ff00000
 80042f4:	39500000 	.word	0x39500000
 80042f8:	000fffff 	.word	0x000fffff
 80042fc:	7fefffff 	.word	0x7fefffff
 8004300:	08007e98 	.word	0x08007e98
 8004304:	4631      	mov	r1, r6
 8004306:	4628      	mov	r0, r5
 8004308:	f002 f868 	bl	80063dc <__ratio>
 800430c:	ec59 8b10 	vmov	r8, r9, d0
 8004310:	ee10 0a10 	vmov	r0, s0
 8004314:	2200      	movs	r2, #0
 8004316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800431a:	4649      	mov	r1, r9
 800431c:	f7fc fc00 	bl	8000b20 <__aeabi_dcmple>
 8004320:	2800      	cmp	r0, #0
 8004322:	d07a      	beq.n	800441a <_strtod_l+0xa8a>
 8004324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d04a      	beq.n	80043c0 <_strtod_l+0xa30>
 800432a:	4b95      	ldr	r3, [pc, #596]	; (8004580 <_strtod_l+0xbf0>)
 800432c:	2200      	movs	r2, #0
 800432e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004332:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004580 <_strtod_l+0xbf0>
 8004336:	f04f 0800 	mov.w	r8, #0
 800433a:	4b92      	ldr	r3, [pc, #584]	; (8004584 <_strtod_l+0xbf4>)
 800433c:	403b      	ands	r3, r7
 800433e:	930d      	str	r3, [sp, #52]	; 0x34
 8004340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004342:	4b91      	ldr	r3, [pc, #580]	; (8004588 <_strtod_l+0xbf8>)
 8004344:	429a      	cmp	r2, r3
 8004346:	f040 80b0 	bne.w	80044aa <_strtod_l+0xb1a>
 800434a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800434e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004352:	ec4b ab10 	vmov	d0, sl, fp
 8004356:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800435a:	f001 ff67 	bl	800622c <__ulp>
 800435e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004362:	ec53 2b10 	vmov	r2, r3, d0
 8004366:	f7fc f95f 	bl	8000628 <__aeabi_dmul>
 800436a:	4652      	mov	r2, sl
 800436c:	465b      	mov	r3, fp
 800436e:	f7fb ffa5 	bl	80002bc <__adddf3>
 8004372:	460b      	mov	r3, r1
 8004374:	4983      	ldr	r1, [pc, #524]	; (8004584 <_strtod_l+0xbf4>)
 8004376:	4a85      	ldr	r2, [pc, #532]	; (800458c <_strtod_l+0xbfc>)
 8004378:	4019      	ands	r1, r3
 800437a:	4291      	cmp	r1, r2
 800437c:	4682      	mov	sl, r0
 800437e:	d960      	bls.n	8004442 <_strtod_l+0xab2>
 8004380:	ee18 3a90 	vmov	r3, s17
 8004384:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004388:	4293      	cmp	r3, r2
 800438a:	d104      	bne.n	8004396 <_strtod_l+0xa06>
 800438c:	ee18 3a10 	vmov	r3, s16
 8004390:	3301      	adds	r3, #1
 8004392:	f43f ad45 	beq.w	8003e20 <_strtod_l+0x490>
 8004396:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004598 <_strtod_l+0xc08>
 800439a:	f04f 3aff 	mov.w	sl, #4294967295
 800439e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80043a0:	4620      	mov	r0, r4
 80043a2:	f001 fc11 	bl	8005bc8 <_Bfree>
 80043a6:	9905      	ldr	r1, [sp, #20]
 80043a8:	4620      	mov	r0, r4
 80043aa:	f001 fc0d 	bl	8005bc8 <_Bfree>
 80043ae:	4631      	mov	r1, r6
 80043b0:	4620      	mov	r0, r4
 80043b2:	f001 fc09 	bl	8005bc8 <_Bfree>
 80043b6:	4629      	mov	r1, r5
 80043b8:	4620      	mov	r0, r4
 80043ba:	f001 fc05 	bl	8005bc8 <_Bfree>
 80043be:	e61a      	b.n	8003ff6 <_strtod_l+0x666>
 80043c0:	f1ba 0f00 	cmp.w	sl, #0
 80043c4:	d11b      	bne.n	80043fe <_strtod_l+0xa6e>
 80043c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80043ca:	b9f3      	cbnz	r3, 800440a <_strtod_l+0xa7a>
 80043cc:	4b6c      	ldr	r3, [pc, #432]	; (8004580 <_strtod_l+0xbf0>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	4640      	mov	r0, r8
 80043d2:	4649      	mov	r1, r9
 80043d4:	f7fc fb9a 	bl	8000b0c <__aeabi_dcmplt>
 80043d8:	b9d0      	cbnz	r0, 8004410 <_strtod_l+0xa80>
 80043da:	4640      	mov	r0, r8
 80043dc:	4649      	mov	r1, r9
 80043de:	4b6c      	ldr	r3, [pc, #432]	; (8004590 <_strtod_l+0xc00>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	f7fc f921 	bl	8000628 <__aeabi_dmul>
 80043e6:	4680      	mov	r8, r0
 80043e8:	4689      	mov	r9, r1
 80043ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80043ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80043f2:	9315      	str	r3, [sp, #84]	; 0x54
 80043f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80043f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80043fc:	e79d      	b.n	800433a <_strtod_l+0x9aa>
 80043fe:	f1ba 0f01 	cmp.w	sl, #1
 8004402:	d102      	bne.n	800440a <_strtod_l+0xa7a>
 8004404:	2f00      	cmp	r7, #0
 8004406:	f43f ad83 	beq.w	8003f10 <_strtod_l+0x580>
 800440a:	4b62      	ldr	r3, [pc, #392]	; (8004594 <_strtod_l+0xc04>)
 800440c:	2200      	movs	r2, #0
 800440e:	e78e      	b.n	800432e <_strtod_l+0x99e>
 8004410:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004590 <_strtod_l+0xc00>
 8004414:	f04f 0800 	mov.w	r8, #0
 8004418:	e7e7      	b.n	80043ea <_strtod_l+0xa5a>
 800441a:	4b5d      	ldr	r3, [pc, #372]	; (8004590 <_strtod_l+0xc00>)
 800441c:	4640      	mov	r0, r8
 800441e:	4649      	mov	r1, r9
 8004420:	2200      	movs	r2, #0
 8004422:	f7fc f901 	bl	8000628 <__aeabi_dmul>
 8004426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004428:	4680      	mov	r8, r0
 800442a:	4689      	mov	r9, r1
 800442c:	b933      	cbnz	r3, 800443c <_strtod_l+0xaac>
 800442e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004432:	900e      	str	r0, [sp, #56]	; 0x38
 8004434:	930f      	str	r3, [sp, #60]	; 0x3c
 8004436:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800443a:	e7dd      	b.n	80043f8 <_strtod_l+0xa68>
 800443c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004440:	e7f9      	b.n	8004436 <_strtod_l+0xaa6>
 8004442:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004446:	9b04      	ldr	r3, [sp, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1a8      	bne.n	800439e <_strtod_l+0xa0e>
 800444c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004450:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004452:	0d1b      	lsrs	r3, r3, #20
 8004454:	051b      	lsls	r3, r3, #20
 8004456:	429a      	cmp	r2, r3
 8004458:	d1a1      	bne.n	800439e <_strtod_l+0xa0e>
 800445a:	4640      	mov	r0, r8
 800445c:	4649      	mov	r1, r9
 800445e:	f7fc fc7b 	bl	8000d58 <__aeabi_d2lz>
 8004462:	f7fc f8b3 	bl	80005cc <__aeabi_l2d>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4640      	mov	r0, r8
 800446c:	4649      	mov	r1, r9
 800446e:	f7fb ff23 	bl	80002b8 <__aeabi_dsub>
 8004472:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004474:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004478:	ea43 030a 	orr.w	r3, r3, sl
 800447c:	4313      	orrs	r3, r2
 800447e:	4680      	mov	r8, r0
 8004480:	4689      	mov	r9, r1
 8004482:	d055      	beq.n	8004530 <_strtod_l+0xba0>
 8004484:	a336      	add	r3, pc, #216	; (adr r3, 8004560 <_strtod_l+0xbd0>)
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	f7fc fb3f 	bl	8000b0c <__aeabi_dcmplt>
 800448e:	2800      	cmp	r0, #0
 8004490:	f47f acd0 	bne.w	8003e34 <_strtod_l+0x4a4>
 8004494:	a334      	add	r3, pc, #208	; (adr r3, 8004568 <_strtod_l+0xbd8>)
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	4640      	mov	r0, r8
 800449c:	4649      	mov	r1, r9
 800449e:	f7fc fb53 	bl	8000b48 <__aeabi_dcmpgt>
 80044a2:	2800      	cmp	r0, #0
 80044a4:	f43f af7b 	beq.w	800439e <_strtod_l+0xa0e>
 80044a8:	e4c4      	b.n	8003e34 <_strtod_l+0x4a4>
 80044aa:	9b04      	ldr	r3, [sp, #16]
 80044ac:	b333      	cbz	r3, 80044fc <_strtod_l+0xb6c>
 80044ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80044b4:	d822      	bhi.n	80044fc <_strtod_l+0xb6c>
 80044b6:	a32e      	add	r3, pc, #184	; (adr r3, 8004570 <_strtod_l+0xbe0>)
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	4640      	mov	r0, r8
 80044be:	4649      	mov	r1, r9
 80044c0:	f7fc fb2e 	bl	8000b20 <__aeabi_dcmple>
 80044c4:	b1a0      	cbz	r0, 80044f0 <_strtod_l+0xb60>
 80044c6:	4649      	mov	r1, r9
 80044c8:	4640      	mov	r0, r8
 80044ca:	f7fc fb85 	bl	8000bd8 <__aeabi_d2uiz>
 80044ce:	2801      	cmp	r0, #1
 80044d0:	bf38      	it	cc
 80044d2:	2001      	movcc	r0, #1
 80044d4:	f7fc f82e 	bl	8000534 <__aeabi_ui2d>
 80044d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044da:	4680      	mov	r8, r0
 80044dc:	4689      	mov	r9, r1
 80044de:	bb23      	cbnz	r3, 800452a <_strtod_l+0xb9a>
 80044e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044e4:	9010      	str	r0, [sp, #64]	; 0x40
 80044e6:	9311      	str	r3, [sp, #68]	; 0x44
 80044e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80044ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80044f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80044f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	9309      	str	r3, [sp, #36]	; 0x24
 80044fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004500:	eeb0 0a48 	vmov.f32	s0, s16
 8004504:	eef0 0a68 	vmov.f32	s1, s17
 8004508:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800450c:	f001 fe8e 	bl	800622c <__ulp>
 8004510:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004514:	ec53 2b10 	vmov	r2, r3, d0
 8004518:	f7fc f886 	bl	8000628 <__aeabi_dmul>
 800451c:	ec53 2b18 	vmov	r2, r3, d8
 8004520:	f7fb fecc 	bl	80002bc <__adddf3>
 8004524:	4682      	mov	sl, r0
 8004526:	468b      	mov	fp, r1
 8004528:	e78d      	b.n	8004446 <_strtod_l+0xab6>
 800452a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800452e:	e7db      	b.n	80044e8 <_strtod_l+0xb58>
 8004530:	a311      	add	r3, pc, #68	; (adr r3, 8004578 <_strtod_l+0xbe8>)
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	f7fc fae9 	bl	8000b0c <__aeabi_dcmplt>
 800453a:	e7b2      	b.n	80044a2 <_strtod_l+0xb12>
 800453c:	2300      	movs	r3, #0
 800453e:	930a      	str	r3, [sp, #40]	; 0x28
 8004540:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004542:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	f7ff ba6b 	b.w	8003a20 <_strtod_l+0x90>
 800454a:	2a65      	cmp	r2, #101	; 0x65
 800454c:	f43f ab5f 	beq.w	8003c0e <_strtod_l+0x27e>
 8004550:	2a45      	cmp	r2, #69	; 0x45
 8004552:	f43f ab5c 	beq.w	8003c0e <_strtod_l+0x27e>
 8004556:	2301      	movs	r3, #1
 8004558:	f7ff bb94 	b.w	8003c84 <_strtod_l+0x2f4>
 800455c:	f3af 8000 	nop.w
 8004560:	94a03595 	.word	0x94a03595
 8004564:	3fdfffff 	.word	0x3fdfffff
 8004568:	35afe535 	.word	0x35afe535
 800456c:	3fe00000 	.word	0x3fe00000
 8004570:	ffc00000 	.word	0xffc00000
 8004574:	41dfffff 	.word	0x41dfffff
 8004578:	94a03595 	.word	0x94a03595
 800457c:	3fcfffff 	.word	0x3fcfffff
 8004580:	3ff00000 	.word	0x3ff00000
 8004584:	7ff00000 	.word	0x7ff00000
 8004588:	7fe00000 	.word	0x7fe00000
 800458c:	7c9fffff 	.word	0x7c9fffff
 8004590:	3fe00000 	.word	0x3fe00000
 8004594:	bff00000 	.word	0xbff00000
 8004598:	7fefffff 	.word	0x7fefffff

0800459c <_strtod_r>:
 800459c:	4b01      	ldr	r3, [pc, #4]	; (80045a4 <_strtod_r+0x8>)
 800459e:	f7ff b9f7 	b.w	8003990 <_strtod_l>
 80045a2:	bf00      	nop
 80045a4:	2000006c 	.word	0x2000006c

080045a8 <_strtol_l.constprop.0>:
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045ae:	d001      	beq.n	80045b4 <_strtol_l.constprop.0+0xc>
 80045b0:	2b24      	cmp	r3, #36	; 0x24
 80045b2:	d906      	bls.n	80045c2 <_strtol_l.constprop.0+0x1a>
 80045b4:	f7fe fa8a 	bl	8002acc <__errno>
 80045b8:	2316      	movs	r3, #22
 80045ba:	6003      	str	r3, [r0, #0]
 80045bc:	2000      	movs	r0, #0
 80045be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80046a8 <_strtol_l.constprop.0+0x100>
 80045c6:	460d      	mov	r5, r1
 80045c8:	462e      	mov	r6, r5
 80045ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045ce:	f814 700c 	ldrb.w	r7, [r4, ip]
 80045d2:	f017 0708 	ands.w	r7, r7, #8
 80045d6:	d1f7      	bne.n	80045c8 <_strtol_l.constprop.0+0x20>
 80045d8:	2c2d      	cmp	r4, #45	; 0x2d
 80045da:	d132      	bne.n	8004642 <_strtol_l.constprop.0+0x9a>
 80045dc:	782c      	ldrb	r4, [r5, #0]
 80045de:	2701      	movs	r7, #1
 80045e0:	1cb5      	adds	r5, r6, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d05b      	beq.n	800469e <_strtol_l.constprop.0+0xf6>
 80045e6:	2b10      	cmp	r3, #16
 80045e8:	d109      	bne.n	80045fe <_strtol_l.constprop.0+0x56>
 80045ea:	2c30      	cmp	r4, #48	; 0x30
 80045ec:	d107      	bne.n	80045fe <_strtol_l.constprop.0+0x56>
 80045ee:	782c      	ldrb	r4, [r5, #0]
 80045f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80045f4:	2c58      	cmp	r4, #88	; 0x58
 80045f6:	d14d      	bne.n	8004694 <_strtol_l.constprop.0+0xec>
 80045f8:	786c      	ldrb	r4, [r5, #1]
 80045fa:	2310      	movs	r3, #16
 80045fc:	3502      	adds	r5, #2
 80045fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004602:	f108 38ff 	add.w	r8, r8, #4294967295
 8004606:	f04f 0c00 	mov.w	ip, #0
 800460a:	fbb8 f9f3 	udiv	r9, r8, r3
 800460e:	4666      	mov	r6, ip
 8004610:	fb03 8a19 	mls	sl, r3, r9, r8
 8004614:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004618:	f1be 0f09 	cmp.w	lr, #9
 800461c:	d816      	bhi.n	800464c <_strtol_l.constprop.0+0xa4>
 800461e:	4674      	mov	r4, lr
 8004620:	42a3      	cmp	r3, r4
 8004622:	dd24      	ble.n	800466e <_strtol_l.constprop.0+0xc6>
 8004624:	f1bc 0f00 	cmp.w	ip, #0
 8004628:	db1e      	blt.n	8004668 <_strtol_l.constprop.0+0xc0>
 800462a:	45b1      	cmp	r9, r6
 800462c:	d31c      	bcc.n	8004668 <_strtol_l.constprop.0+0xc0>
 800462e:	d101      	bne.n	8004634 <_strtol_l.constprop.0+0x8c>
 8004630:	45a2      	cmp	sl, r4
 8004632:	db19      	blt.n	8004668 <_strtol_l.constprop.0+0xc0>
 8004634:	fb06 4603 	mla	r6, r6, r3, r4
 8004638:	f04f 0c01 	mov.w	ip, #1
 800463c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004640:	e7e8      	b.n	8004614 <_strtol_l.constprop.0+0x6c>
 8004642:	2c2b      	cmp	r4, #43	; 0x2b
 8004644:	bf04      	itt	eq
 8004646:	782c      	ldrbeq	r4, [r5, #0]
 8004648:	1cb5      	addeq	r5, r6, #2
 800464a:	e7ca      	b.n	80045e2 <_strtol_l.constprop.0+0x3a>
 800464c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004650:	f1be 0f19 	cmp.w	lr, #25
 8004654:	d801      	bhi.n	800465a <_strtol_l.constprop.0+0xb2>
 8004656:	3c37      	subs	r4, #55	; 0x37
 8004658:	e7e2      	b.n	8004620 <_strtol_l.constprop.0+0x78>
 800465a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800465e:	f1be 0f19 	cmp.w	lr, #25
 8004662:	d804      	bhi.n	800466e <_strtol_l.constprop.0+0xc6>
 8004664:	3c57      	subs	r4, #87	; 0x57
 8004666:	e7db      	b.n	8004620 <_strtol_l.constprop.0+0x78>
 8004668:	f04f 3cff 	mov.w	ip, #4294967295
 800466c:	e7e6      	b.n	800463c <_strtol_l.constprop.0+0x94>
 800466e:	f1bc 0f00 	cmp.w	ip, #0
 8004672:	da05      	bge.n	8004680 <_strtol_l.constprop.0+0xd8>
 8004674:	2322      	movs	r3, #34	; 0x22
 8004676:	6003      	str	r3, [r0, #0]
 8004678:	4646      	mov	r6, r8
 800467a:	b942      	cbnz	r2, 800468e <_strtol_l.constprop.0+0xe6>
 800467c:	4630      	mov	r0, r6
 800467e:	e79e      	b.n	80045be <_strtol_l.constprop.0+0x16>
 8004680:	b107      	cbz	r7, 8004684 <_strtol_l.constprop.0+0xdc>
 8004682:	4276      	negs	r6, r6
 8004684:	2a00      	cmp	r2, #0
 8004686:	d0f9      	beq.n	800467c <_strtol_l.constprop.0+0xd4>
 8004688:	f1bc 0f00 	cmp.w	ip, #0
 800468c:	d000      	beq.n	8004690 <_strtol_l.constprop.0+0xe8>
 800468e:	1e69      	subs	r1, r5, #1
 8004690:	6011      	str	r1, [r2, #0]
 8004692:	e7f3      	b.n	800467c <_strtol_l.constprop.0+0xd4>
 8004694:	2430      	movs	r4, #48	; 0x30
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1b1      	bne.n	80045fe <_strtol_l.constprop.0+0x56>
 800469a:	2308      	movs	r3, #8
 800469c:	e7af      	b.n	80045fe <_strtol_l.constprop.0+0x56>
 800469e:	2c30      	cmp	r4, #48	; 0x30
 80046a0:	d0a5      	beq.n	80045ee <_strtol_l.constprop.0+0x46>
 80046a2:	230a      	movs	r3, #10
 80046a4:	e7ab      	b.n	80045fe <_strtol_l.constprop.0+0x56>
 80046a6:	bf00      	nop
 80046a8:	08007ec1 	.word	0x08007ec1

080046ac <_strtol_r>:
 80046ac:	f7ff bf7c 	b.w	80045a8 <_strtol_l.constprop.0>

080046b0 <_write_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4d07      	ldr	r5, [pc, #28]	; (80046d0 <_write_r+0x20>)
 80046b4:	4604      	mov	r4, r0
 80046b6:	4608      	mov	r0, r1
 80046b8:	4611      	mov	r1, r2
 80046ba:	2200      	movs	r2, #0
 80046bc:	602a      	str	r2, [r5, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	f7fc ff0a 	bl	80014d8 <_write>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d102      	bne.n	80046ce <_write_r+0x1e>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	b103      	cbz	r3, 80046ce <_write_r+0x1e>
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	20000b08 	.word	0x20000b08

080046d4 <_close_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4d06      	ldr	r5, [pc, #24]	; (80046f0 <_close_r+0x1c>)
 80046d8:	2300      	movs	r3, #0
 80046da:	4604      	mov	r4, r0
 80046dc:	4608      	mov	r0, r1
 80046de:	602b      	str	r3, [r5, #0]
 80046e0:	f7fc ff16 	bl	8001510 <_close>
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	d102      	bne.n	80046ee <_close_r+0x1a>
 80046e8:	682b      	ldr	r3, [r5, #0]
 80046ea:	b103      	cbz	r3, 80046ee <_close_r+0x1a>
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	bd38      	pop	{r3, r4, r5, pc}
 80046f0:	20000b08 	.word	0x20000b08

080046f4 <quorem>:
 80046f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f8:	6903      	ldr	r3, [r0, #16]
 80046fa:	690c      	ldr	r4, [r1, #16]
 80046fc:	42a3      	cmp	r3, r4
 80046fe:	4607      	mov	r7, r0
 8004700:	f2c0 8081 	blt.w	8004806 <quorem+0x112>
 8004704:	3c01      	subs	r4, #1
 8004706:	f101 0814 	add.w	r8, r1, #20
 800470a:	f100 0514 	add.w	r5, r0, #20
 800470e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800471c:	3301      	adds	r3, #1
 800471e:	429a      	cmp	r2, r3
 8004720:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004724:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004728:	fbb2 f6f3 	udiv	r6, r2, r3
 800472c:	d331      	bcc.n	8004792 <quorem+0x9e>
 800472e:	f04f 0e00 	mov.w	lr, #0
 8004732:	4640      	mov	r0, r8
 8004734:	46ac      	mov	ip, r5
 8004736:	46f2      	mov	sl, lr
 8004738:	f850 2b04 	ldr.w	r2, [r0], #4
 800473c:	b293      	uxth	r3, r2
 800473e:	fb06 e303 	mla	r3, r6, r3, lr
 8004742:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004746:	b29b      	uxth	r3, r3
 8004748:	ebaa 0303 	sub.w	r3, sl, r3
 800474c:	f8dc a000 	ldr.w	sl, [ip]
 8004750:	0c12      	lsrs	r2, r2, #16
 8004752:	fa13 f38a 	uxtah	r3, r3, sl
 8004756:	fb06 e202 	mla	r2, r6, r2, lr
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	9b00      	ldr	r3, [sp, #0]
 800475e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004762:	b292      	uxth	r2, r2
 8004764:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004768:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800476c:	f8bd 3000 	ldrh.w	r3, [sp]
 8004770:	4581      	cmp	r9, r0
 8004772:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004776:	f84c 3b04 	str.w	r3, [ip], #4
 800477a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800477e:	d2db      	bcs.n	8004738 <quorem+0x44>
 8004780:	f855 300b 	ldr.w	r3, [r5, fp]
 8004784:	b92b      	cbnz	r3, 8004792 <quorem+0x9e>
 8004786:	9b01      	ldr	r3, [sp, #4]
 8004788:	3b04      	subs	r3, #4
 800478a:	429d      	cmp	r5, r3
 800478c:	461a      	mov	r2, r3
 800478e:	d32e      	bcc.n	80047ee <quorem+0xfa>
 8004790:	613c      	str	r4, [r7, #16]
 8004792:	4638      	mov	r0, r7
 8004794:	f001 fca4 	bl	80060e0 <__mcmp>
 8004798:	2800      	cmp	r0, #0
 800479a:	db24      	blt.n	80047e6 <quorem+0xf2>
 800479c:	3601      	adds	r6, #1
 800479e:	4628      	mov	r0, r5
 80047a0:	f04f 0c00 	mov.w	ip, #0
 80047a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80047a8:	f8d0 e000 	ldr.w	lr, [r0]
 80047ac:	b293      	uxth	r3, r2
 80047ae:	ebac 0303 	sub.w	r3, ip, r3
 80047b2:	0c12      	lsrs	r2, r2, #16
 80047b4:	fa13 f38e 	uxtah	r3, r3, lr
 80047b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80047bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047c6:	45c1      	cmp	r9, r8
 80047c8:	f840 3b04 	str.w	r3, [r0], #4
 80047cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80047d0:	d2e8      	bcs.n	80047a4 <quorem+0xb0>
 80047d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047da:	b922      	cbnz	r2, 80047e6 <quorem+0xf2>
 80047dc:	3b04      	subs	r3, #4
 80047de:	429d      	cmp	r5, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	d30a      	bcc.n	80047fa <quorem+0x106>
 80047e4:	613c      	str	r4, [r7, #16]
 80047e6:	4630      	mov	r0, r6
 80047e8:	b003      	add	sp, #12
 80047ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	3b04      	subs	r3, #4
 80047f2:	2a00      	cmp	r2, #0
 80047f4:	d1cc      	bne.n	8004790 <quorem+0x9c>
 80047f6:	3c01      	subs	r4, #1
 80047f8:	e7c7      	b.n	800478a <quorem+0x96>
 80047fa:	6812      	ldr	r2, [r2, #0]
 80047fc:	3b04      	subs	r3, #4
 80047fe:	2a00      	cmp	r2, #0
 8004800:	d1f0      	bne.n	80047e4 <quorem+0xf0>
 8004802:	3c01      	subs	r4, #1
 8004804:	e7eb      	b.n	80047de <quorem+0xea>
 8004806:	2000      	movs	r0, #0
 8004808:	e7ee      	b.n	80047e8 <quorem+0xf4>
 800480a:	0000      	movs	r0, r0
 800480c:	0000      	movs	r0, r0
	...

08004810 <_dtoa_r>:
 8004810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004814:	ed2d 8b04 	vpush	{d8-d9}
 8004818:	ec57 6b10 	vmov	r6, r7, d0
 800481c:	b093      	sub	sp, #76	; 0x4c
 800481e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004820:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004824:	9106      	str	r1, [sp, #24]
 8004826:	ee10 aa10 	vmov	sl, s0
 800482a:	4604      	mov	r4, r0
 800482c:	9209      	str	r2, [sp, #36]	; 0x24
 800482e:	930c      	str	r3, [sp, #48]	; 0x30
 8004830:	46bb      	mov	fp, r7
 8004832:	b975      	cbnz	r5, 8004852 <_dtoa_r+0x42>
 8004834:	2010      	movs	r0, #16
 8004836:	f001 f95f 	bl	8005af8 <malloc>
 800483a:	4602      	mov	r2, r0
 800483c:	6260      	str	r0, [r4, #36]	; 0x24
 800483e:	b920      	cbnz	r0, 800484a <_dtoa_r+0x3a>
 8004840:	4ba7      	ldr	r3, [pc, #668]	; (8004ae0 <_dtoa_r+0x2d0>)
 8004842:	21ea      	movs	r1, #234	; 0xea
 8004844:	48a7      	ldr	r0, [pc, #668]	; (8004ae4 <_dtoa_r+0x2d4>)
 8004846:	f002 fceb 	bl	8007220 <__assert_func>
 800484a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800484e:	6005      	str	r5, [r0, #0]
 8004850:	60c5      	str	r5, [r0, #12]
 8004852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004854:	6819      	ldr	r1, [r3, #0]
 8004856:	b151      	cbz	r1, 800486e <_dtoa_r+0x5e>
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	604a      	str	r2, [r1, #4]
 800485c:	2301      	movs	r3, #1
 800485e:	4093      	lsls	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
 8004862:	4620      	mov	r0, r4
 8004864:	f001 f9b0 	bl	8005bc8 <_Bfree>
 8004868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	1e3b      	subs	r3, r7, #0
 8004870:	bfaa      	itet	ge
 8004872:	2300      	movge	r3, #0
 8004874:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004878:	f8c8 3000 	strge.w	r3, [r8]
 800487c:	4b9a      	ldr	r3, [pc, #616]	; (8004ae8 <_dtoa_r+0x2d8>)
 800487e:	bfbc      	itt	lt
 8004880:	2201      	movlt	r2, #1
 8004882:	f8c8 2000 	strlt.w	r2, [r8]
 8004886:	ea33 030b 	bics.w	r3, r3, fp
 800488a:	d11b      	bne.n	80048c4 <_dtoa_r+0xb4>
 800488c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800488e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004898:	4333      	orrs	r3, r6
 800489a:	f000 8592 	beq.w	80053c2 <_dtoa_r+0xbb2>
 800489e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048a0:	b963      	cbnz	r3, 80048bc <_dtoa_r+0xac>
 80048a2:	4b92      	ldr	r3, [pc, #584]	; (8004aec <_dtoa_r+0x2dc>)
 80048a4:	e022      	b.n	80048ec <_dtoa_r+0xdc>
 80048a6:	4b92      	ldr	r3, [pc, #584]	; (8004af0 <_dtoa_r+0x2e0>)
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	3308      	adds	r3, #8
 80048ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	9801      	ldr	r0, [sp, #4]
 80048b2:	b013      	add	sp, #76	; 0x4c
 80048b4:	ecbd 8b04 	vpop	{d8-d9}
 80048b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048bc:	4b8b      	ldr	r3, [pc, #556]	; (8004aec <_dtoa_r+0x2dc>)
 80048be:	9301      	str	r3, [sp, #4]
 80048c0:	3303      	adds	r3, #3
 80048c2:	e7f3      	b.n	80048ac <_dtoa_r+0x9c>
 80048c4:	2200      	movs	r2, #0
 80048c6:	2300      	movs	r3, #0
 80048c8:	4650      	mov	r0, sl
 80048ca:	4659      	mov	r1, fp
 80048cc:	f7fc f914 	bl	8000af8 <__aeabi_dcmpeq>
 80048d0:	ec4b ab19 	vmov	d9, sl, fp
 80048d4:	4680      	mov	r8, r0
 80048d6:	b158      	cbz	r0, 80048f0 <_dtoa_r+0xe0>
 80048d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048da:	2301      	movs	r3, #1
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 856b 	beq.w	80053bc <_dtoa_r+0xbac>
 80048e6:	4883      	ldr	r0, [pc, #524]	; (8004af4 <_dtoa_r+0x2e4>)
 80048e8:	6018      	str	r0, [r3, #0]
 80048ea:	1e43      	subs	r3, r0, #1
 80048ec:	9301      	str	r3, [sp, #4]
 80048ee:	e7df      	b.n	80048b0 <_dtoa_r+0xa0>
 80048f0:	ec4b ab10 	vmov	d0, sl, fp
 80048f4:	aa10      	add	r2, sp, #64	; 0x40
 80048f6:	a911      	add	r1, sp, #68	; 0x44
 80048f8:	4620      	mov	r0, r4
 80048fa:	f001 fd13 	bl	8006324 <__d2b>
 80048fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004902:	ee08 0a10 	vmov	s16, r0
 8004906:	2d00      	cmp	r5, #0
 8004908:	f000 8084 	beq.w	8004a14 <_dtoa_r+0x204>
 800490c:	ee19 3a90 	vmov	r3, s19
 8004910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004914:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004918:	4656      	mov	r6, sl
 800491a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800491e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004922:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004926:	4b74      	ldr	r3, [pc, #464]	; (8004af8 <_dtoa_r+0x2e8>)
 8004928:	2200      	movs	r2, #0
 800492a:	4630      	mov	r0, r6
 800492c:	4639      	mov	r1, r7
 800492e:	f7fb fcc3 	bl	80002b8 <__aeabi_dsub>
 8004932:	a365      	add	r3, pc, #404	; (adr r3, 8004ac8 <_dtoa_r+0x2b8>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f7fb fe76 	bl	8000628 <__aeabi_dmul>
 800493c:	a364      	add	r3, pc, #400	; (adr r3, 8004ad0 <_dtoa_r+0x2c0>)
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	f7fb fcbb 	bl	80002bc <__adddf3>
 8004946:	4606      	mov	r6, r0
 8004948:	4628      	mov	r0, r5
 800494a:	460f      	mov	r7, r1
 800494c:	f7fb fe02 	bl	8000554 <__aeabi_i2d>
 8004950:	a361      	add	r3, pc, #388	; (adr r3, 8004ad8 <_dtoa_r+0x2c8>)
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	f7fb fe67 	bl	8000628 <__aeabi_dmul>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4630      	mov	r0, r6
 8004960:	4639      	mov	r1, r7
 8004962:	f7fb fcab 	bl	80002bc <__adddf3>
 8004966:	4606      	mov	r6, r0
 8004968:	460f      	mov	r7, r1
 800496a:	f7fc f90d 	bl	8000b88 <__aeabi_d2iz>
 800496e:	2200      	movs	r2, #0
 8004970:	9000      	str	r0, [sp, #0]
 8004972:	2300      	movs	r3, #0
 8004974:	4630      	mov	r0, r6
 8004976:	4639      	mov	r1, r7
 8004978:	f7fc f8c8 	bl	8000b0c <__aeabi_dcmplt>
 800497c:	b150      	cbz	r0, 8004994 <_dtoa_r+0x184>
 800497e:	9800      	ldr	r0, [sp, #0]
 8004980:	f7fb fde8 	bl	8000554 <__aeabi_i2d>
 8004984:	4632      	mov	r2, r6
 8004986:	463b      	mov	r3, r7
 8004988:	f7fc f8b6 	bl	8000af8 <__aeabi_dcmpeq>
 800498c:	b910      	cbnz	r0, 8004994 <_dtoa_r+0x184>
 800498e:	9b00      	ldr	r3, [sp, #0]
 8004990:	3b01      	subs	r3, #1
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	9b00      	ldr	r3, [sp, #0]
 8004996:	2b16      	cmp	r3, #22
 8004998:	d85a      	bhi.n	8004a50 <_dtoa_r+0x240>
 800499a:	9a00      	ldr	r2, [sp, #0]
 800499c:	4b57      	ldr	r3, [pc, #348]	; (8004afc <_dtoa_r+0x2ec>)
 800499e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	ec51 0b19 	vmov	r0, r1, d9
 80049aa:	f7fc f8af 	bl	8000b0c <__aeabi_dcmplt>
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d050      	beq.n	8004a54 <_dtoa_r+0x244>
 80049b2:	9b00      	ldr	r3, [sp, #0]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	2300      	movs	r3, #0
 80049ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80049bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049be:	1b5d      	subs	r5, r3, r5
 80049c0:	1e6b      	subs	r3, r5, #1
 80049c2:	9305      	str	r3, [sp, #20]
 80049c4:	bf45      	ittet	mi
 80049c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80049ca:	9304      	strmi	r3, [sp, #16]
 80049cc:	2300      	movpl	r3, #0
 80049ce:	2300      	movmi	r3, #0
 80049d0:	bf4c      	ite	mi
 80049d2:	9305      	strmi	r3, [sp, #20]
 80049d4:	9304      	strpl	r3, [sp, #16]
 80049d6:	9b00      	ldr	r3, [sp, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	db3d      	blt.n	8004a58 <_dtoa_r+0x248>
 80049dc:	9b05      	ldr	r3, [sp, #20]
 80049de:	9a00      	ldr	r2, [sp, #0]
 80049e0:	920a      	str	r2, [sp, #40]	; 0x28
 80049e2:	4413      	add	r3, r2
 80049e4:	9305      	str	r3, [sp, #20]
 80049e6:	2300      	movs	r3, #0
 80049e8:	9307      	str	r3, [sp, #28]
 80049ea:	9b06      	ldr	r3, [sp, #24]
 80049ec:	2b09      	cmp	r3, #9
 80049ee:	f200 8089 	bhi.w	8004b04 <_dtoa_r+0x2f4>
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	bfc4      	itt	gt
 80049f6:	3b04      	subgt	r3, #4
 80049f8:	9306      	strgt	r3, [sp, #24]
 80049fa:	9b06      	ldr	r3, [sp, #24]
 80049fc:	f1a3 0302 	sub.w	r3, r3, #2
 8004a00:	bfcc      	ite	gt
 8004a02:	2500      	movgt	r5, #0
 8004a04:	2501      	movle	r5, #1
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	f200 8087 	bhi.w	8004b1a <_dtoa_r+0x30a>
 8004a0c:	e8df f003 	tbb	[pc, r3]
 8004a10:	59383a2d 	.word	0x59383a2d
 8004a14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004a18:	441d      	add	r5, r3
 8004a1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	bfc1      	itttt	gt
 8004a22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004a2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8004a2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004a32:	bfda      	itte	le
 8004a34:	f1c3 0320 	rsble	r3, r3, #32
 8004a38:	fa06 f003 	lslle.w	r0, r6, r3
 8004a3c:	4318      	orrgt	r0, r3
 8004a3e:	f7fb fd79 	bl	8000534 <__aeabi_ui2d>
 8004a42:	2301      	movs	r3, #1
 8004a44:	4606      	mov	r6, r0
 8004a46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004a4a:	3d01      	subs	r5, #1
 8004a4c:	930e      	str	r3, [sp, #56]	; 0x38
 8004a4e:	e76a      	b.n	8004926 <_dtoa_r+0x116>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e7b2      	b.n	80049ba <_dtoa_r+0x1aa>
 8004a54:	900b      	str	r0, [sp, #44]	; 0x2c
 8004a56:	e7b1      	b.n	80049bc <_dtoa_r+0x1ac>
 8004a58:	9b04      	ldr	r3, [sp, #16]
 8004a5a:	9a00      	ldr	r2, [sp, #0]
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	9304      	str	r3, [sp, #16]
 8004a60:	4253      	negs	r3, r2
 8004a62:	9307      	str	r3, [sp, #28]
 8004a64:	2300      	movs	r3, #0
 8004a66:	930a      	str	r3, [sp, #40]	; 0x28
 8004a68:	e7bf      	b.n	80049ea <_dtoa_r+0x1da>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	9308      	str	r3, [sp, #32]
 8004a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	dc55      	bgt.n	8004b20 <_dtoa_r+0x310>
 8004a74:	2301      	movs	r3, #1
 8004a76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a7e:	e00c      	b.n	8004a9a <_dtoa_r+0x28a>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e7f3      	b.n	8004a6c <_dtoa_r+0x25c>
 8004a84:	2300      	movs	r3, #0
 8004a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a88:	9308      	str	r3, [sp, #32]
 8004a8a:	9b00      	ldr	r3, [sp, #0]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	9302      	str	r3, [sp, #8]
 8004a90:	3301      	adds	r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	9303      	str	r3, [sp, #12]
 8004a96:	bfb8      	it	lt
 8004a98:	2301      	movlt	r3, #1
 8004a9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	6042      	str	r2, [r0, #4]
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	f102 0614 	add.w	r6, r2, #20
 8004aa6:	429e      	cmp	r6, r3
 8004aa8:	6841      	ldr	r1, [r0, #4]
 8004aaa:	d93d      	bls.n	8004b28 <_dtoa_r+0x318>
 8004aac:	4620      	mov	r0, r4
 8004aae:	f001 f84b 	bl	8005b48 <_Balloc>
 8004ab2:	9001      	str	r0, [sp, #4]
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	d13b      	bne.n	8004b30 <_dtoa_r+0x320>
 8004ab8:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <_dtoa_r+0x2f0>)
 8004aba:	4602      	mov	r2, r0
 8004abc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ac0:	e6c0      	b.n	8004844 <_dtoa_r+0x34>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e7df      	b.n	8004a86 <_dtoa_r+0x276>
 8004ac6:	bf00      	nop
 8004ac8:	636f4361 	.word	0x636f4361
 8004acc:	3fd287a7 	.word	0x3fd287a7
 8004ad0:	8b60c8b3 	.word	0x8b60c8b3
 8004ad4:	3fc68a28 	.word	0x3fc68a28
 8004ad8:	509f79fb 	.word	0x509f79fb
 8004adc:	3fd34413 	.word	0x3fd34413
 8004ae0:	08007fce 	.word	0x08007fce
 8004ae4:	08007fe5 	.word	0x08007fe5
 8004ae8:	7ff00000 	.word	0x7ff00000
 8004aec:	08007fca 	.word	0x08007fca
 8004af0:	08007fc1 	.word	0x08007fc1
 8004af4:	0800823a 	.word	0x0800823a
 8004af8:	3ff80000 	.word	0x3ff80000
 8004afc:	08008150 	.word	0x08008150
 8004b00:	08008040 	.word	0x08008040
 8004b04:	2501      	movs	r5, #1
 8004b06:	2300      	movs	r3, #0
 8004b08:	9306      	str	r3, [sp, #24]
 8004b0a:	9508      	str	r5, [sp, #32]
 8004b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2312      	movs	r3, #18
 8004b18:	e7b0      	b.n	8004a7c <_dtoa_r+0x26c>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	9308      	str	r3, [sp, #32]
 8004b1e:	e7f5      	b.n	8004b0c <_dtoa_r+0x2fc>
 8004b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004b26:	e7b8      	b.n	8004a9a <_dtoa_r+0x28a>
 8004b28:	3101      	adds	r1, #1
 8004b2a:	6041      	str	r1, [r0, #4]
 8004b2c:	0052      	lsls	r2, r2, #1
 8004b2e:	e7b8      	b.n	8004aa2 <_dtoa_r+0x292>
 8004b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b32:	9a01      	ldr	r2, [sp, #4]
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	9b03      	ldr	r3, [sp, #12]
 8004b38:	2b0e      	cmp	r3, #14
 8004b3a:	f200 809d 	bhi.w	8004c78 <_dtoa_r+0x468>
 8004b3e:	2d00      	cmp	r5, #0
 8004b40:	f000 809a 	beq.w	8004c78 <_dtoa_r+0x468>
 8004b44:	9b00      	ldr	r3, [sp, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	dd32      	ble.n	8004bb0 <_dtoa_r+0x3a0>
 8004b4a:	4ab7      	ldr	r2, [pc, #732]	; (8004e28 <_dtoa_r+0x618>)
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b58:	9b00      	ldr	r3, [sp, #0]
 8004b5a:	05d8      	lsls	r0, r3, #23
 8004b5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004b60:	d516      	bpl.n	8004b90 <_dtoa_r+0x380>
 8004b62:	4bb2      	ldr	r3, [pc, #712]	; (8004e2c <_dtoa_r+0x61c>)
 8004b64:	ec51 0b19 	vmov	r0, r1, d9
 8004b68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b6c:	f7fb fe86 	bl	800087c <__aeabi_ddiv>
 8004b70:	f007 070f 	and.w	r7, r7, #15
 8004b74:	4682      	mov	sl, r0
 8004b76:	468b      	mov	fp, r1
 8004b78:	2503      	movs	r5, #3
 8004b7a:	4eac      	ldr	r6, [pc, #688]	; (8004e2c <_dtoa_r+0x61c>)
 8004b7c:	b957      	cbnz	r7, 8004b94 <_dtoa_r+0x384>
 8004b7e:	4642      	mov	r2, r8
 8004b80:	464b      	mov	r3, r9
 8004b82:	4650      	mov	r0, sl
 8004b84:	4659      	mov	r1, fp
 8004b86:	f7fb fe79 	bl	800087c <__aeabi_ddiv>
 8004b8a:	4682      	mov	sl, r0
 8004b8c:	468b      	mov	fp, r1
 8004b8e:	e028      	b.n	8004be2 <_dtoa_r+0x3d2>
 8004b90:	2502      	movs	r5, #2
 8004b92:	e7f2      	b.n	8004b7a <_dtoa_r+0x36a>
 8004b94:	07f9      	lsls	r1, r7, #31
 8004b96:	d508      	bpl.n	8004baa <_dtoa_r+0x39a>
 8004b98:	4640      	mov	r0, r8
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ba0:	f7fb fd42 	bl	8000628 <__aeabi_dmul>
 8004ba4:	3501      	adds	r5, #1
 8004ba6:	4680      	mov	r8, r0
 8004ba8:	4689      	mov	r9, r1
 8004baa:	107f      	asrs	r7, r7, #1
 8004bac:	3608      	adds	r6, #8
 8004bae:	e7e5      	b.n	8004b7c <_dtoa_r+0x36c>
 8004bb0:	f000 809b 	beq.w	8004cea <_dtoa_r+0x4da>
 8004bb4:	9b00      	ldr	r3, [sp, #0]
 8004bb6:	4f9d      	ldr	r7, [pc, #628]	; (8004e2c <_dtoa_r+0x61c>)
 8004bb8:	425e      	negs	r6, r3
 8004bba:	4b9b      	ldr	r3, [pc, #620]	; (8004e28 <_dtoa_r+0x618>)
 8004bbc:	f006 020f 	and.w	r2, r6, #15
 8004bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	ec51 0b19 	vmov	r0, r1, d9
 8004bcc:	f7fb fd2c 	bl	8000628 <__aeabi_dmul>
 8004bd0:	1136      	asrs	r6, r6, #4
 8004bd2:	4682      	mov	sl, r0
 8004bd4:	468b      	mov	fp, r1
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2502      	movs	r5, #2
 8004bda:	2e00      	cmp	r6, #0
 8004bdc:	d17a      	bne.n	8004cd4 <_dtoa_r+0x4c4>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1d3      	bne.n	8004b8a <_dtoa_r+0x37a>
 8004be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8082 	beq.w	8004cee <_dtoa_r+0x4de>
 8004bea:	4b91      	ldr	r3, [pc, #580]	; (8004e30 <_dtoa_r+0x620>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	4650      	mov	r0, sl
 8004bf0:	4659      	mov	r1, fp
 8004bf2:	f7fb ff8b 	bl	8000b0c <__aeabi_dcmplt>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d079      	beq.n	8004cee <_dtoa_r+0x4de>
 8004bfa:	9b03      	ldr	r3, [sp, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d076      	beq.n	8004cee <_dtoa_r+0x4de>
 8004c00:	9b02      	ldr	r3, [sp, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	dd36      	ble.n	8004c74 <_dtoa_r+0x464>
 8004c06:	9b00      	ldr	r3, [sp, #0]
 8004c08:	4650      	mov	r0, sl
 8004c0a:	4659      	mov	r1, fp
 8004c0c:	1e5f      	subs	r7, r3, #1
 8004c0e:	2200      	movs	r2, #0
 8004c10:	4b88      	ldr	r3, [pc, #544]	; (8004e34 <_dtoa_r+0x624>)
 8004c12:	f7fb fd09 	bl	8000628 <__aeabi_dmul>
 8004c16:	9e02      	ldr	r6, [sp, #8]
 8004c18:	4682      	mov	sl, r0
 8004c1a:	468b      	mov	fp, r1
 8004c1c:	3501      	adds	r5, #1
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f7fb fc98 	bl	8000554 <__aeabi_i2d>
 8004c24:	4652      	mov	r2, sl
 8004c26:	465b      	mov	r3, fp
 8004c28:	f7fb fcfe 	bl	8000628 <__aeabi_dmul>
 8004c2c:	4b82      	ldr	r3, [pc, #520]	; (8004e38 <_dtoa_r+0x628>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f7fb fb44 	bl	80002bc <__adddf3>
 8004c34:	46d0      	mov	r8, sl
 8004c36:	46d9      	mov	r9, fp
 8004c38:	4682      	mov	sl, r0
 8004c3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004c3e:	2e00      	cmp	r6, #0
 8004c40:	d158      	bne.n	8004cf4 <_dtoa_r+0x4e4>
 8004c42:	4b7e      	ldr	r3, [pc, #504]	; (8004e3c <_dtoa_r+0x62c>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	4640      	mov	r0, r8
 8004c48:	4649      	mov	r1, r9
 8004c4a:	f7fb fb35 	bl	80002b8 <__aeabi_dsub>
 8004c4e:	4652      	mov	r2, sl
 8004c50:	465b      	mov	r3, fp
 8004c52:	4680      	mov	r8, r0
 8004c54:	4689      	mov	r9, r1
 8004c56:	f7fb ff77 	bl	8000b48 <__aeabi_dcmpgt>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	f040 8295 	bne.w	800518a <_dtoa_r+0x97a>
 8004c60:	4652      	mov	r2, sl
 8004c62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004c66:	4640      	mov	r0, r8
 8004c68:	4649      	mov	r1, r9
 8004c6a:	f7fb ff4f 	bl	8000b0c <__aeabi_dcmplt>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	f040 8289 	bne.w	8005186 <_dtoa_r+0x976>
 8004c74:	ec5b ab19 	vmov	sl, fp, d9
 8004c78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f2c0 8148 	blt.w	8004f10 <_dtoa_r+0x700>
 8004c80:	9a00      	ldr	r2, [sp, #0]
 8004c82:	2a0e      	cmp	r2, #14
 8004c84:	f300 8144 	bgt.w	8004f10 <_dtoa_r+0x700>
 8004c88:	4b67      	ldr	r3, [pc, #412]	; (8004e28 <_dtoa_r+0x618>)
 8004c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f280 80d5 	bge.w	8004e44 <_dtoa_r+0x634>
 8004c9a:	9b03      	ldr	r3, [sp, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f300 80d1 	bgt.w	8004e44 <_dtoa_r+0x634>
 8004ca2:	f040 826f 	bne.w	8005184 <_dtoa_r+0x974>
 8004ca6:	4b65      	ldr	r3, [pc, #404]	; (8004e3c <_dtoa_r+0x62c>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	4640      	mov	r0, r8
 8004cac:	4649      	mov	r1, r9
 8004cae:	f7fb fcbb 	bl	8000628 <__aeabi_dmul>
 8004cb2:	4652      	mov	r2, sl
 8004cb4:	465b      	mov	r3, fp
 8004cb6:	f7fb ff3d 	bl	8000b34 <__aeabi_dcmpge>
 8004cba:	9e03      	ldr	r6, [sp, #12]
 8004cbc:	4637      	mov	r7, r6
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	f040 8245 	bne.w	800514e <_dtoa_r+0x93e>
 8004cc4:	9d01      	ldr	r5, [sp, #4]
 8004cc6:	2331      	movs	r3, #49	; 0x31
 8004cc8:	f805 3b01 	strb.w	r3, [r5], #1
 8004ccc:	9b00      	ldr	r3, [sp, #0]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	e240      	b.n	8005156 <_dtoa_r+0x946>
 8004cd4:	07f2      	lsls	r2, r6, #31
 8004cd6:	d505      	bpl.n	8004ce4 <_dtoa_r+0x4d4>
 8004cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cdc:	f7fb fca4 	bl	8000628 <__aeabi_dmul>
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	1076      	asrs	r6, r6, #1
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	e777      	b.n	8004bda <_dtoa_r+0x3ca>
 8004cea:	2502      	movs	r5, #2
 8004cec:	e779      	b.n	8004be2 <_dtoa_r+0x3d2>
 8004cee:	9f00      	ldr	r7, [sp, #0]
 8004cf0:	9e03      	ldr	r6, [sp, #12]
 8004cf2:	e794      	b.n	8004c1e <_dtoa_r+0x40e>
 8004cf4:	9901      	ldr	r1, [sp, #4]
 8004cf6:	4b4c      	ldr	r3, [pc, #304]	; (8004e28 <_dtoa_r+0x618>)
 8004cf8:	4431      	add	r1, r6
 8004cfa:	910d      	str	r1, [sp, #52]	; 0x34
 8004cfc:	9908      	ldr	r1, [sp, #32]
 8004cfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d06:	2900      	cmp	r1, #0
 8004d08:	d043      	beq.n	8004d92 <_dtoa_r+0x582>
 8004d0a:	494d      	ldr	r1, [pc, #308]	; (8004e40 <_dtoa_r+0x630>)
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f7fb fdb5 	bl	800087c <__aeabi_ddiv>
 8004d12:	4652      	mov	r2, sl
 8004d14:	465b      	mov	r3, fp
 8004d16:	f7fb facf 	bl	80002b8 <__aeabi_dsub>
 8004d1a:	9d01      	ldr	r5, [sp, #4]
 8004d1c:	4682      	mov	sl, r0
 8004d1e:	468b      	mov	fp, r1
 8004d20:	4649      	mov	r1, r9
 8004d22:	4640      	mov	r0, r8
 8004d24:	f7fb ff30 	bl	8000b88 <__aeabi_d2iz>
 8004d28:	4606      	mov	r6, r0
 8004d2a:	f7fb fc13 	bl	8000554 <__aeabi_i2d>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4640      	mov	r0, r8
 8004d34:	4649      	mov	r1, r9
 8004d36:	f7fb fabf 	bl	80002b8 <__aeabi_dsub>
 8004d3a:	3630      	adds	r6, #48	; 0x30
 8004d3c:	f805 6b01 	strb.w	r6, [r5], #1
 8004d40:	4652      	mov	r2, sl
 8004d42:	465b      	mov	r3, fp
 8004d44:	4680      	mov	r8, r0
 8004d46:	4689      	mov	r9, r1
 8004d48:	f7fb fee0 	bl	8000b0c <__aeabi_dcmplt>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d163      	bne.n	8004e18 <_dtoa_r+0x608>
 8004d50:	4642      	mov	r2, r8
 8004d52:	464b      	mov	r3, r9
 8004d54:	4936      	ldr	r1, [pc, #216]	; (8004e30 <_dtoa_r+0x620>)
 8004d56:	2000      	movs	r0, #0
 8004d58:	f7fb faae 	bl	80002b8 <__aeabi_dsub>
 8004d5c:	4652      	mov	r2, sl
 8004d5e:	465b      	mov	r3, fp
 8004d60:	f7fb fed4 	bl	8000b0c <__aeabi_dcmplt>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	f040 80b5 	bne.w	8004ed4 <_dtoa_r+0x6c4>
 8004d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d6c:	429d      	cmp	r5, r3
 8004d6e:	d081      	beq.n	8004c74 <_dtoa_r+0x464>
 8004d70:	4b30      	ldr	r3, [pc, #192]	; (8004e34 <_dtoa_r+0x624>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	4650      	mov	r0, sl
 8004d76:	4659      	mov	r1, fp
 8004d78:	f7fb fc56 	bl	8000628 <__aeabi_dmul>
 8004d7c:	4b2d      	ldr	r3, [pc, #180]	; (8004e34 <_dtoa_r+0x624>)
 8004d7e:	4682      	mov	sl, r0
 8004d80:	468b      	mov	fp, r1
 8004d82:	4640      	mov	r0, r8
 8004d84:	4649      	mov	r1, r9
 8004d86:	2200      	movs	r2, #0
 8004d88:	f7fb fc4e 	bl	8000628 <__aeabi_dmul>
 8004d8c:	4680      	mov	r8, r0
 8004d8e:	4689      	mov	r9, r1
 8004d90:	e7c6      	b.n	8004d20 <_dtoa_r+0x510>
 8004d92:	4650      	mov	r0, sl
 8004d94:	4659      	mov	r1, fp
 8004d96:	f7fb fc47 	bl	8000628 <__aeabi_dmul>
 8004d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d9c:	9d01      	ldr	r5, [sp, #4]
 8004d9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004da0:	4682      	mov	sl, r0
 8004da2:	468b      	mov	fp, r1
 8004da4:	4649      	mov	r1, r9
 8004da6:	4640      	mov	r0, r8
 8004da8:	f7fb feee 	bl	8000b88 <__aeabi_d2iz>
 8004dac:	4606      	mov	r6, r0
 8004dae:	f7fb fbd1 	bl	8000554 <__aeabi_i2d>
 8004db2:	3630      	adds	r6, #48	; 0x30
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4640      	mov	r0, r8
 8004dba:	4649      	mov	r1, r9
 8004dbc:	f7fb fa7c 	bl	80002b8 <__aeabi_dsub>
 8004dc0:	f805 6b01 	strb.w	r6, [r5], #1
 8004dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dc6:	429d      	cmp	r5, r3
 8004dc8:	4680      	mov	r8, r0
 8004dca:	4689      	mov	r9, r1
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	d124      	bne.n	8004e1c <_dtoa_r+0x60c>
 8004dd2:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <_dtoa_r+0x630>)
 8004dd4:	4650      	mov	r0, sl
 8004dd6:	4659      	mov	r1, fp
 8004dd8:	f7fb fa70 	bl	80002bc <__adddf3>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4640      	mov	r0, r8
 8004de2:	4649      	mov	r1, r9
 8004de4:	f7fb feb0 	bl	8000b48 <__aeabi_dcmpgt>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d173      	bne.n	8004ed4 <_dtoa_r+0x6c4>
 8004dec:	4652      	mov	r2, sl
 8004dee:	465b      	mov	r3, fp
 8004df0:	4913      	ldr	r1, [pc, #76]	; (8004e40 <_dtoa_r+0x630>)
 8004df2:	2000      	movs	r0, #0
 8004df4:	f7fb fa60 	bl	80002b8 <__aeabi_dsub>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4640      	mov	r0, r8
 8004dfe:	4649      	mov	r1, r9
 8004e00:	f7fb fe84 	bl	8000b0c <__aeabi_dcmplt>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	f43f af35 	beq.w	8004c74 <_dtoa_r+0x464>
 8004e0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004e0c:	1e6b      	subs	r3, r5, #1
 8004e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e14:	2b30      	cmp	r3, #48	; 0x30
 8004e16:	d0f8      	beq.n	8004e0a <_dtoa_r+0x5fa>
 8004e18:	9700      	str	r7, [sp, #0]
 8004e1a:	e049      	b.n	8004eb0 <_dtoa_r+0x6a0>
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <_dtoa_r+0x624>)
 8004e1e:	f7fb fc03 	bl	8000628 <__aeabi_dmul>
 8004e22:	4680      	mov	r8, r0
 8004e24:	4689      	mov	r9, r1
 8004e26:	e7bd      	b.n	8004da4 <_dtoa_r+0x594>
 8004e28:	08008150 	.word	0x08008150
 8004e2c:	08008128 	.word	0x08008128
 8004e30:	3ff00000 	.word	0x3ff00000
 8004e34:	40240000 	.word	0x40240000
 8004e38:	401c0000 	.word	0x401c0000
 8004e3c:	40140000 	.word	0x40140000
 8004e40:	3fe00000 	.word	0x3fe00000
 8004e44:	9d01      	ldr	r5, [sp, #4]
 8004e46:	4656      	mov	r6, sl
 8004e48:	465f      	mov	r7, fp
 8004e4a:	4642      	mov	r2, r8
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	4630      	mov	r0, r6
 8004e50:	4639      	mov	r1, r7
 8004e52:	f7fb fd13 	bl	800087c <__aeabi_ddiv>
 8004e56:	f7fb fe97 	bl	8000b88 <__aeabi_d2iz>
 8004e5a:	4682      	mov	sl, r0
 8004e5c:	f7fb fb7a 	bl	8000554 <__aeabi_i2d>
 8004e60:	4642      	mov	r2, r8
 8004e62:	464b      	mov	r3, r9
 8004e64:	f7fb fbe0 	bl	8000628 <__aeabi_dmul>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	4639      	mov	r1, r7
 8004e70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004e74:	f7fb fa20 	bl	80002b8 <__aeabi_dsub>
 8004e78:	f805 6b01 	strb.w	r6, [r5], #1
 8004e7c:	9e01      	ldr	r6, [sp, #4]
 8004e7e:	9f03      	ldr	r7, [sp, #12]
 8004e80:	1bae      	subs	r6, r5, r6
 8004e82:	42b7      	cmp	r7, r6
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	d135      	bne.n	8004ef6 <_dtoa_r+0x6e6>
 8004e8a:	f7fb fa17 	bl	80002bc <__adddf3>
 8004e8e:	4642      	mov	r2, r8
 8004e90:	464b      	mov	r3, r9
 8004e92:	4606      	mov	r6, r0
 8004e94:	460f      	mov	r7, r1
 8004e96:	f7fb fe57 	bl	8000b48 <__aeabi_dcmpgt>
 8004e9a:	b9d0      	cbnz	r0, 8004ed2 <_dtoa_r+0x6c2>
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	4639      	mov	r1, r7
 8004ea4:	f7fb fe28 	bl	8000af8 <__aeabi_dcmpeq>
 8004ea8:	b110      	cbz	r0, 8004eb0 <_dtoa_r+0x6a0>
 8004eaa:	f01a 0f01 	tst.w	sl, #1
 8004eae:	d110      	bne.n	8004ed2 <_dtoa_r+0x6c2>
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	ee18 1a10 	vmov	r1, s16
 8004eb6:	f000 fe87 	bl	8005bc8 <_Bfree>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	9800      	ldr	r0, [sp, #0]
 8004ebe:	702b      	strb	r3, [r5, #0]
 8004ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	6018      	str	r0, [r3, #0]
 8004ec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f43f acf1 	beq.w	80048b0 <_dtoa_r+0xa0>
 8004ece:	601d      	str	r5, [r3, #0]
 8004ed0:	e4ee      	b.n	80048b0 <_dtoa_r+0xa0>
 8004ed2:	9f00      	ldr	r7, [sp, #0]
 8004ed4:	462b      	mov	r3, r5
 8004ed6:	461d      	mov	r5, r3
 8004ed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004edc:	2a39      	cmp	r2, #57	; 0x39
 8004ede:	d106      	bne.n	8004eee <_dtoa_r+0x6de>
 8004ee0:	9a01      	ldr	r2, [sp, #4]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d1f7      	bne.n	8004ed6 <_dtoa_r+0x6c6>
 8004ee6:	9901      	ldr	r1, [sp, #4]
 8004ee8:	2230      	movs	r2, #48	; 0x30
 8004eea:	3701      	adds	r7, #1
 8004eec:	700a      	strb	r2, [r1, #0]
 8004eee:	781a      	ldrb	r2, [r3, #0]
 8004ef0:	3201      	adds	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e790      	b.n	8004e18 <_dtoa_r+0x608>
 8004ef6:	4ba6      	ldr	r3, [pc, #664]	; (8005190 <_dtoa_r+0x980>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f7fb fb95 	bl	8000628 <__aeabi_dmul>
 8004efe:	2200      	movs	r2, #0
 8004f00:	2300      	movs	r3, #0
 8004f02:	4606      	mov	r6, r0
 8004f04:	460f      	mov	r7, r1
 8004f06:	f7fb fdf7 	bl	8000af8 <__aeabi_dcmpeq>
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	d09d      	beq.n	8004e4a <_dtoa_r+0x63a>
 8004f0e:	e7cf      	b.n	8004eb0 <_dtoa_r+0x6a0>
 8004f10:	9a08      	ldr	r2, [sp, #32]
 8004f12:	2a00      	cmp	r2, #0
 8004f14:	f000 80d7 	beq.w	80050c6 <_dtoa_r+0x8b6>
 8004f18:	9a06      	ldr	r2, [sp, #24]
 8004f1a:	2a01      	cmp	r2, #1
 8004f1c:	f300 80ba 	bgt.w	8005094 <_dtoa_r+0x884>
 8004f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f22:	2a00      	cmp	r2, #0
 8004f24:	f000 80b2 	beq.w	800508c <_dtoa_r+0x87c>
 8004f28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f2c:	9e07      	ldr	r6, [sp, #28]
 8004f2e:	9d04      	ldr	r5, [sp, #16]
 8004f30:	9a04      	ldr	r2, [sp, #16]
 8004f32:	441a      	add	r2, r3
 8004f34:	9204      	str	r2, [sp, #16]
 8004f36:	9a05      	ldr	r2, [sp, #20]
 8004f38:	2101      	movs	r1, #1
 8004f3a:	441a      	add	r2, r3
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	9205      	str	r2, [sp, #20]
 8004f40:	f000 ff44 	bl	8005dcc <__i2b>
 8004f44:	4607      	mov	r7, r0
 8004f46:	2d00      	cmp	r5, #0
 8004f48:	dd0c      	ble.n	8004f64 <_dtoa_r+0x754>
 8004f4a:	9b05      	ldr	r3, [sp, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	dd09      	ble.n	8004f64 <_dtoa_r+0x754>
 8004f50:	42ab      	cmp	r3, r5
 8004f52:	9a04      	ldr	r2, [sp, #16]
 8004f54:	bfa8      	it	ge
 8004f56:	462b      	movge	r3, r5
 8004f58:	1ad2      	subs	r2, r2, r3
 8004f5a:	9204      	str	r2, [sp, #16]
 8004f5c:	9a05      	ldr	r2, [sp, #20]
 8004f5e:	1aed      	subs	r5, r5, r3
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	9305      	str	r3, [sp, #20]
 8004f64:	9b07      	ldr	r3, [sp, #28]
 8004f66:	b31b      	cbz	r3, 8004fb0 <_dtoa_r+0x7a0>
 8004f68:	9b08      	ldr	r3, [sp, #32]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 80af 	beq.w	80050ce <_dtoa_r+0x8be>
 8004f70:	2e00      	cmp	r6, #0
 8004f72:	dd13      	ble.n	8004f9c <_dtoa_r+0x78c>
 8004f74:	4639      	mov	r1, r7
 8004f76:	4632      	mov	r2, r6
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f000 ffe7 	bl	8005f4c <__pow5mult>
 8004f7e:	ee18 2a10 	vmov	r2, s16
 8004f82:	4601      	mov	r1, r0
 8004f84:	4607      	mov	r7, r0
 8004f86:	4620      	mov	r0, r4
 8004f88:	f000 ff36 	bl	8005df8 <__multiply>
 8004f8c:	ee18 1a10 	vmov	r1, s16
 8004f90:	4680      	mov	r8, r0
 8004f92:	4620      	mov	r0, r4
 8004f94:	f000 fe18 	bl	8005bc8 <_Bfree>
 8004f98:	ee08 8a10 	vmov	s16, r8
 8004f9c:	9b07      	ldr	r3, [sp, #28]
 8004f9e:	1b9a      	subs	r2, r3, r6
 8004fa0:	d006      	beq.n	8004fb0 <_dtoa_r+0x7a0>
 8004fa2:	ee18 1a10 	vmov	r1, s16
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	f000 ffd0 	bl	8005f4c <__pow5mult>
 8004fac:	ee08 0a10 	vmov	s16, r0
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f000 ff0a 	bl	8005dcc <__i2b>
 8004fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	f340 8088 	ble.w	80050d2 <_dtoa_r+0x8c2>
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4601      	mov	r1, r0
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f000 ffc0 	bl	8005f4c <__pow5mult>
 8004fcc:	9b06      	ldr	r3, [sp, #24]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	4606      	mov	r6, r0
 8004fd2:	f340 8081 	ble.w	80050d8 <_dtoa_r+0x8c8>
 8004fd6:	f04f 0800 	mov.w	r8, #0
 8004fda:	6933      	ldr	r3, [r6, #16]
 8004fdc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004fe0:	6918      	ldr	r0, [r3, #16]
 8004fe2:	f000 fea3 	bl	8005d2c <__hi0bits>
 8004fe6:	f1c0 0020 	rsb	r0, r0, #32
 8004fea:	9b05      	ldr	r3, [sp, #20]
 8004fec:	4418      	add	r0, r3
 8004fee:	f010 001f 	ands.w	r0, r0, #31
 8004ff2:	f000 8092 	beq.w	800511a <_dtoa_r+0x90a>
 8004ff6:	f1c0 0320 	rsb	r3, r0, #32
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	f340 808a 	ble.w	8005114 <_dtoa_r+0x904>
 8005000:	f1c0 001c 	rsb	r0, r0, #28
 8005004:	9b04      	ldr	r3, [sp, #16]
 8005006:	4403      	add	r3, r0
 8005008:	9304      	str	r3, [sp, #16]
 800500a:	9b05      	ldr	r3, [sp, #20]
 800500c:	4403      	add	r3, r0
 800500e:	4405      	add	r5, r0
 8005010:	9305      	str	r3, [sp, #20]
 8005012:	9b04      	ldr	r3, [sp, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	dd07      	ble.n	8005028 <_dtoa_r+0x818>
 8005018:	ee18 1a10 	vmov	r1, s16
 800501c:	461a      	mov	r2, r3
 800501e:	4620      	mov	r0, r4
 8005020:	f000 ffee 	bl	8006000 <__lshift>
 8005024:	ee08 0a10 	vmov	s16, r0
 8005028:	9b05      	ldr	r3, [sp, #20]
 800502a:	2b00      	cmp	r3, #0
 800502c:	dd05      	ble.n	800503a <_dtoa_r+0x82a>
 800502e:	4631      	mov	r1, r6
 8005030:	461a      	mov	r2, r3
 8005032:	4620      	mov	r0, r4
 8005034:	f000 ffe4 	bl	8006000 <__lshift>
 8005038:	4606      	mov	r6, r0
 800503a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800503c:	2b00      	cmp	r3, #0
 800503e:	d06e      	beq.n	800511e <_dtoa_r+0x90e>
 8005040:	ee18 0a10 	vmov	r0, s16
 8005044:	4631      	mov	r1, r6
 8005046:	f001 f84b 	bl	80060e0 <__mcmp>
 800504a:	2800      	cmp	r0, #0
 800504c:	da67      	bge.n	800511e <_dtoa_r+0x90e>
 800504e:	9b00      	ldr	r3, [sp, #0]
 8005050:	3b01      	subs	r3, #1
 8005052:	ee18 1a10 	vmov	r1, s16
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	220a      	movs	r2, #10
 800505a:	2300      	movs	r3, #0
 800505c:	4620      	mov	r0, r4
 800505e:	f000 fdd5 	bl	8005c0c <__multadd>
 8005062:	9b08      	ldr	r3, [sp, #32]
 8005064:	ee08 0a10 	vmov	s16, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 81b1 	beq.w	80053d0 <_dtoa_r+0xbc0>
 800506e:	2300      	movs	r3, #0
 8005070:	4639      	mov	r1, r7
 8005072:	220a      	movs	r2, #10
 8005074:	4620      	mov	r0, r4
 8005076:	f000 fdc9 	bl	8005c0c <__multadd>
 800507a:	9b02      	ldr	r3, [sp, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	4607      	mov	r7, r0
 8005080:	f300 808e 	bgt.w	80051a0 <_dtoa_r+0x990>
 8005084:	9b06      	ldr	r3, [sp, #24]
 8005086:	2b02      	cmp	r3, #2
 8005088:	dc51      	bgt.n	800512e <_dtoa_r+0x91e>
 800508a:	e089      	b.n	80051a0 <_dtoa_r+0x990>
 800508c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800508e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005092:	e74b      	b.n	8004f2c <_dtoa_r+0x71c>
 8005094:	9b03      	ldr	r3, [sp, #12]
 8005096:	1e5e      	subs	r6, r3, #1
 8005098:	9b07      	ldr	r3, [sp, #28]
 800509a:	42b3      	cmp	r3, r6
 800509c:	bfbf      	itttt	lt
 800509e:	9b07      	ldrlt	r3, [sp, #28]
 80050a0:	9607      	strlt	r6, [sp, #28]
 80050a2:	1af2      	sublt	r2, r6, r3
 80050a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80050a6:	bfb6      	itet	lt
 80050a8:	189b      	addlt	r3, r3, r2
 80050aa:	1b9e      	subge	r6, r3, r6
 80050ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80050ae:	9b03      	ldr	r3, [sp, #12]
 80050b0:	bfb8      	it	lt
 80050b2:	2600      	movlt	r6, #0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bfb7      	itett	lt
 80050b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80050bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80050c0:	1a9d      	sublt	r5, r3, r2
 80050c2:	2300      	movlt	r3, #0
 80050c4:	e734      	b.n	8004f30 <_dtoa_r+0x720>
 80050c6:	9e07      	ldr	r6, [sp, #28]
 80050c8:	9d04      	ldr	r5, [sp, #16]
 80050ca:	9f08      	ldr	r7, [sp, #32]
 80050cc:	e73b      	b.n	8004f46 <_dtoa_r+0x736>
 80050ce:	9a07      	ldr	r2, [sp, #28]
 80050d0:	e767      	b.n	8004fa2 <_dtoa_r+0x792>
 80050d2:	9b06      	ldr	r3, [sp, #24]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	dc18      	bgt.n	800510a <_dtoa_r+0x8fa>
 80050d8:	f1ba 0f00 	cmp.w	sl, #0
 80050dc:	d115      	bne.n	800510a <_dtoa_r+0x8fa>
 80050de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050e2:	b993      	cbnz	r3, 800510a <_dtoa_r+0x8fa>
 80050e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80050e8:	0d1b      	lsrs	r3, r3, #20
 80050ea:	051b      	lsls	r3, r3, #20
 80050ec:	b183      	cbz	r3, 8005110 <_dtoa_r+0x900>
 80050ee:	9b04      	ldr	r3, [sp, #16]
 80050f0:	3301      	adds	r3, #1
 80050f2:	9304      	str	r3, [sp, #16]
 80050f4:	9b05      	ldr	r3, [sp, #20]
 80050f6:	3301      	adds	r3, #1
 80050f8:	9305      	str	r3, [sp, #20]
 80050fa:	f04f 0801 	mov.w	r8, #1
 80050fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005100:	2b00      	cmp	r3, #0
 8005102:	f47f af6a 	bne.w	8004fda <_dtoa_r+0x7ca>
 8005106:	2001      	movs	r0, #1
 8005108:	e76f      	b.n	8004fea <_dtoa_r+0x7da>
 800510a:	f04f 0800 	mov.w	r8, #0
 800510e:	e7f6      	b.n	80050fe <_dtoa_r+0x8ee>
 8005110:	4698      	mov	r8, r3
 8005112:	e7f4      	b.n	80050fe <_dtoa_r+0x8ee>
 8005114:	f43f af7d 	beq.w	8005012 <_dtoa_r+0x802>
 8005118:	4618      	mov	r0, r3
 800511a:	301c      	adds	r0, #28
 800511c:	e772      	b.n	8005004 <_dtoa_r+0x7f4>
 800511e:	9b03      	ldr	r3, [sp, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	dc37      	bgt.n	8005194 <_dtoa_r+0x984>
 8005124:	9b06      	ldr	r3, [sp, #24]
 8005126:	2b02      	cmp	r3, #2
 8005128:	dd34      	ble.n	8005194 <_dtoa_r+0x984>
 800512a:	9b03      	ldr	r3, [sp, #12]
 800512c:	9302      	str	r3, [sp, #8]
 800512e:	9b02      	ldr	r3, [sp, #8]
 8005130:	b96b      	cbnz	r3, 800514e <_dtoa_r+0x93e>
 8005132:	4631      	mov	r1, r6
 8005134:	2205      	movs	r2, #5
 8005136:	4620      	mov	r0, r4
 8005138:	f000 fd68 	bl	8005c0c <__multadd>
 800513c:	4601      	mov	r1, r0
 800513e:	4606      	mov	r6, r0
 8005140:	ee18 0a10 	vmov	r0, s16
 8005144:	f000 ffcc 	bl	80060e0 <__mcmp>
 8005148:	2800      	cmp	r0, #0
 800514a:	f73f adbb 	bgt.w	8004cc4 <_dtoa_r+0x4b4>
 800514e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005150:	9d01      	ldr	r5, [sp, #4]
 8005152:	43db      	mvns	r3, r3
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	f04f 0800 	mov.w	r8, #0
 800515a:	4631      	mov	r1, r6
 800515c:	4620      	mov	r0, r4
 800515e:	f000 fd33 	bl	8005bc8 <_Bfree>
 8005162:	2f00      	cmp	r7, #0
 8005164:	f43f aea4 	beq.w	8004eb0 <_dtoa_r+0x6a0>
 8005168:	f1b8 0f00 	cmp.w	r8, #0
 800516c:	d005      	beq.n	800517a <_dtoa_r+0x96a>
 800516e:	45b8      	cmp	r8, r7
 8005170:	d003      	beq.n	800517a <_dtoa_r+0x96a>
 8005172:	4641      	mov	r1, r8
 8005174:	4620      	mov	r0, r4
 8005176:	f000 fd27 	bl	8005bc8 <_Bfree>
 800517a:	4639      	mov	r1, r7
 800517c:	4620      	mov	r0, r4
 800517e:	f000 fd23 	bl	8005bc8 <_Bfree>
 8005182:	e695      	b.n	8004eb0 <_dtoa_r+0x6a0>
 8005184:	2600      	movs	r6, #0
 8005186:	4637      	mov	r7, r6
 8005188:	e7e1      	b.n	800514e <_dtoa_r+0x93e>
 800518a:	9700      	str	r7, [sp, #0]
 800518c:	4637      	mov	r7, r6
 800518e:	e599      	b.n	8004cc4 <_dtoa_r+0x4b4>
 8005190:	40240000 	.word	0x40240000
 8005194:	9b08      	ldr	r3, [sp, #32]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 80ca 	beq.w	8005330 <_dtoa_r+0xb20>
 800519c:	9b03      	ldr	r3, [sp, #12]
 800519e:	9302      	str	r3, [sp, #8]
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	dd05      	ble.n	80051b0 <_dtoa_r+0x9a0>
 80051a4:	4639      	mov	r1, r7
 80051a6:	462a      	mov	r2, r5
 80051a8:	4620      	mov	r0, r4
 80051aa:	f000 ff29 	bl	8006000 <__lshift>
 80051ae:	4607      	mov	r7, r0
 80051b0:	f1b8 0f00 	cmp.w	r8, #0
 80051b4:	d05b      	beq.n	800526e <_dtoa_r+0xa5e>
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4620      	mov	r0, r4
 80051ba:	f000 fcc5 	bl	8005b48 <_Balloc>
 80051be:	4605      	mov	r5, r0
 80051c0:	b928      	cbnz	r0, 80051ce <_dtoa_r+0x9be>
 80051c2:	4b87      	ldr	r3, [pc, #540]	; (80053e0 <_dtoa_r+0xbd0>)
 80051c4:	4602      	mov	r2, r0
 80051c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80051ca:	f7ff bb3b 	b.w	8004844 <_dtoa_r+0x34>
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	3202      	adds	r2, #2
 80051d2:	0092      	lsls	r2, r2, #2
 80051d4:	f107 010c 	add.w	r1, r7, #12
 80051d8:	300c      	adds	r0, #12
 80051da:	f000 fca7 	bl	8005b2c <memcpy>
 80051de:	2201      	movs	r2, #1
 80051e0:	4629      	mov	r1, r5
 80051e2:	4620      	mov	r0, r4
 80051e4:	f000 ff0c 	bl	8006000 <__lshift>
 80051e8:	9b01      	ldr	r3, [sp, #4]
 80051ea:	f103 0901 	add.w	r9, r3, #1
 80051ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80051f2:	4413      	add	r3, r2
 80051f4:	9305      	str	r3, [sp, #20]
 80051f6:	f00a 0301 	and.w	r3, sl, #1
 80051fa:	46b8      	mov	r8, r7
 80051fc:	9304      	str	r3, [sp, #16]
 80051fe:	4607      	mov	r7, r0
 8005200:	4631      	mov	r1, r6
 8005202:	ee18 0a10 	vmov	r0, s16
 8005206:	f7ff fa75 	bl	80046f4 <quorem>
 800520a:	4641      	mov	r1, r8
 800520c:	9002      	str	r0, [sp, #8]
 800520e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005212:	ee18 0a10 	vmov	r0, s16
 8005216:	f000 ff63 	bl	80060e0 <__mcmp>
 800521a:	463a      	mov	r2, r7
 800521c:	9003      	str	r0, [sp, #12]
 800521e:	4631      	mov	r1, r6
 8005220:	4620      	mov	r0, r4
 8005222:	f000 ff79 	bl	8006118 <__mdiff>
 8005226:	68c2      	ldr	r2, [r0, #12]
 8005228:	f109 3bff 	add.w	fp, r9, #4294967295
 800522c:	4605      	mov	r5, r0
 800522e:	bb02      	cbnz	r2, 8005272 <_dtoa_r+0xa62>
 8005230:	4601      	mov	r1, r0
 8005232:	ee18 0a10 	vmov	r0, s16
 8005236:	f000 ff53 	bl	80060e0 <__mcmp>
 800523a:	4602      	mov	r2, r0
 800523c:	4629      	mov	r1, r5
 800523e:	4620      	mov	r0, r4
 8005240:	9207      	str	r2, [sp, #28]
 8005242:	f000 fcc1 	bl	8005bc8 <_Bfree>
 8005246:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800524a:	ea43 0102 	orr.w	r1, r3, r2
 800524e:	9b04      	ldr	r3, [sp, #16]
 8005250:	430b      	orrs	r3, r1
 8005252:	464d      	mov	r5, r9
 8005254:	d10f      	bne.n	8005276 <_dtoa_r+0xa66>
 8005256:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800525a:	d02a      	beq.n	80052b2 <_dtoa_r+0xaa2>
 800525c:	9b03      	ldr	r3, [sp, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	dd02      	ble.n	8005268 <_dtoa_r+0xa58>
 8005262:	9b02      	ldr	r3, [sp, #8]
 8005264:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005268:	f88b a000 	strb.w	sl, [fp]
 800526c:	e775      	b.n	800515a <_dtoa_r+0x94a>
 800526e:	4638      	mov	r0, r7
 8005270:	e7ba      	b.n	80051e8 <_dtoa_r+0x9d8>
 8005272:	2201      	movs	r2, #1
 8005274:	e7e2      	b.n	800523c <_dtoa_r+0xa2c>
 8005276:	9b03      	ldr	r3, [sp, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	db04      	blt.n	8005286 <_dtoa_r+0xa76>
 800527c:	9906      	ldr	r1, [sp, #24]
 800527e:	430b      	orrs	r3, r1
 8005280:	9904      	ldr	r1, [sp, #16]
 8005282:	430b      	orrs	r3, r1
 8005284:	d122      	bne.n	80052cc <_dtoa_r+0xabc>
 8005286:	2a00      	cmp	r2, #0
 8005288:	ddee      	ble.n	8005268 <_dtoa_r+0xa58>
 800528a:	ee18 1a10 	vmov	r1, s16
 800528e:	2201      	movs	r2, #1
 8005290:	4620      	mov	r0, r4
 8005292:	f000 feb5 	bl	8006000 <__lshift>
 8005296:	4631      	mov	r1, r6
 8005298:	ee08 0a10 	vmov	s16, r0
 800529c:	f000 ff20 	bl	80060e0 <__mcmp>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	dc03      	bgt.n	80052ac <_dtoa_r+0xa9c>
 80052a4:	d1e0      	bne.n	8005268 <_dtoa_r+0xa58>
 80052a6:	f01a 0f01 	tst.w	sl, #1
 80052aa:	d0dd      	beq.n	8005268 <_dtoa_r+0xa58>
 80052ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80052b0:	d1d7      	bne.n	8005262 <_dtoa_r+0xa52>
 80052b2:	2339      	movs	r3, #57	; 0x39
 80052b4:	f88b 3000 	strb.w	r3, [fp]
 80052b8:	462b      	mov	r3, r5
 80052ba:	461d      	mov	r5, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80052c2:	2a39      	cmp	r2, #57	; 0x39
 80052c4:	d071      	beq.n	80053aa <_dtoa_r+0xb9a>
 80052c6:	3201      	adds	r2, #1
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	e746      	b.n	800515a <_dtoa_r+0x94a>
 80052cc:	2a00      	cmp	r2, #0
 80052ce:	dd07      	ble.n	80052e0 <_dtoa_r+0xad0>
 80052d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80052d4:	d0ed      	beq.n	80052b2 <_dtoa_r+0xaa2>
 80052d6:	f10a 0301 	add.w	r3, sl, #1
 80052da:	f88b 3000 	strb.w	r3, [fp]
 80052de:	e73c      	b.n	800515a <_dtoa_r+0x94a>
 80052e0:	9b05      	ldr	r3, [sp, #20]
 80052e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80052e6:	4599      	cmp	r9, r3
 80052e8:	d047      	beq.n	800537a <_dtoa_r+0xb6a>
 80052ea:	ee18 1a10 	vmov	r1, s16
 80052ee:	2300      	movs	r3, #0
 80052f0:	220a      	movs	r2, #10
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 fc8a 	bl	8005c0c <__multadd>
 80052f8:	45b8      	cmp	r8, r7
 80052fa:	ee08 0a10 	vmov	s16, r0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	f04f 020a 	mov.w	r2, #10
 8005306:	4641      	mov	r1, r8
 8005308:	4620      	mov	r0, r4
 800530a:	d106      	bne.n	800531a <_dtoa_r+0xb0a>
 800530c:	f000 fc7e 	bl	8005c0c <__multadd>
 8005310:	4680      	mov	r8, r0
 8005312:	4607      	mov	r7, r0
 8005314:	f109 0901 	add.w	r9, r9, #1
 8005318:	e772      	b.n	8005200 <_dtoa_r+0x9f0>
 800531a:	f000 fc77 	bl	8005c0c <__multadd>
 800531e:	4639      	mov	r1, r7
 8005320:	4680      	mov	r8, r0
 8005322:	2300      	movs	r3, #0
 8005324:	220a      	movs	r2, #10
 8005326:	4620      	mov	r0, r4
 8005328:	f000 fc70 	bl	8005c0c <__multadd>
 800532c:	4607      	mov	r7, r0
 800532e:	e7f1      	b.n	8005314 <_dtoa_r+0xb04>
 8005330:	9b03      	ldr	r3, [sp, #12]
 8005332:	9302      	str	r3, [sp, #8]
 8005334:	9d01      	ldr	r5, [sp, #4]
 8005336:	ee18 0a10 	vmov	r0, s16
 800533a:	4631      	mov	r1, r6
 800533c:	f7ff f9da 	bl	80046f4 <quorem>
 8005340:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005344:	9b01      	ldr	r3, [sp, #4]
 8005346:	f805 ab01 	strb.w	sl, [r5], #1
 800534a:	1aea      	subs	r2, r5, r3
 800534c:	9b02      	ldr	r3, [sp, #8]
 800534e:	4293      	cmp	r3, r2
 8005350:	dd09      	ble.n	8005366 <_dtoa_r+0xb56>
 8005352:	ee18 1a10 	vmov	r1, s16
 8005356:	2300      	movs	r3, #0
 8005358:	220a      	movs	r2, #10
 800535a:	4620      	mov	r0, r4
 800535c:	f000 fc56 	bl	8005c0c <__multadd>
 8005360:	ee08 0a10 	vmov	s16, r0
 8005364:	e7e7      	b.n	8005336 <_dtoa_r+0xb26>
 8005366:	9b02      	ldr	r3, [sp, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	bfc8      	it	gt
 800536c:	461d      	movgt	r5, r3
 800536e:	9b01      	ldr	r3, [sp, #4]
 8005370:	bfd8      	it	le
 8005372:	2501      	movle	r5, #1
 8005374:	441d      	add	r5, r3
 8005376:	f04f 0800 	mov.w	r8, #0
 800537a:	ee18 1a10 	vmov	r1, s16
 800537e:	2201      	movs	r2, #1
 8005380:	4620      	mov	r0, r4
 8005382:	f000 fe3d 	bl	8006000 <__lshift>
 8005386:	4631      	mov	r1, r6
 8005388:	ee08 0a10 	vmov	s16, r0
 800538c:	f000 fea8 	bl	80060e0 <__mcmp>
 8005390:	2800      	cmp	r0, #0
 8005392:	dc91      	bgt.n	80052b8 <_dtoa_r+0xaa8>
 8005394:	d102      	bne.n	800539c <_dtoa_r+0xb8c>
 8005396:	f01a 0f01 	tst.w	sl, #1
 800539a:	d18d      	bne.n	80052b8 <_dtoa_r+0xaa8>
 800539c:	462b      	mov	r3, r5
 800539e:	461d      	mov	r5, r3
 80053a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053a4:	2a30      	cmp	r2, #48	; 0x30
 80053a6:	d0fa      	beq.n	800539e <_dtoa_r+0xb8e>
 80053a8:	e6d7      	b.n	800515a <_dtoa_r+0x94a>
 80053aa:	9a01      	ldr	r2, [sp, #4]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d184      	bne.n	80052ba <_dtoa_r+0xaaa>
 80053b0:	9b00      	ldr	r3, [sp, #0]
 80053b2:	3301      	adds	r3, #1
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	2331      	movs	r3, #49	; 0x31
 80053b8:	7013      	strb	r3, [r2, #0]
 80053ba:	e6ce      	b.n	800515a <_dtoa_r+0x94a>
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <_dtoa_r+0xbd4>)
 80053be:	f7ff ba95 	b.w	80048ec <_dtoa_r+0xdc>
 80053c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f47f aa6e 	bne.w	80048a6 <_dtoa_r+0x96>
 80053ca:	4b07      	ldr	r3, [pc, #28]	; (80053e8 <_dtoa_r+0xbd8>)
 80053cc:	f7ff ba8e 	b.w	80048ec <_dtoa_r+0xdc>
 80053d0:	9b02      	ldr	r3, [sp, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	dcae      	bgt.n	8005334 <_dtoa_r+0xb24>
 80053d6:	9b06      	ldr	r3, [sp, #24]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	f73f aea8 	bgt.w	800512e <_dtoa_r+0x91e>
 80053de:	e7a9      	b.n	8005334 <_dtoa_r+0xb24>
 80053e0:	08008040 	.word	0x08008040
 80053e4:	08008239 	.word	0x08008239
 80053e8:	08007fc1 	.word	0x08007fc1

080053ec <rshift>:
 80053ec:	6903      	ldr	r3, [r0, #16]
 80053ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80053f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80053fa:	f100 0414 	add.w	r4, r0, #20
 80053fe:	dd45      	ble.n	800548c <rshift+0xa0>
 8005400:	f011 011f 	ands.w	r1, r1, #31
 8005404:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005408:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800540c:	d10c      	bne.n	8005428 <rshift+0x3c>
 800540e:	f100 0710 	add.w	r7, r0, #16
 8005412:	4629      	mov	r1, r5
 8005414:	42b1      	cmp	r1, r6
 8005416:	d334      	bcc.n	8005482 <rshift+0x96>
 8005418:	1a9b      	subs	r3, r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	1eea      	subs	r2, r5, #3
 800541e:	4296      	cmp	r6, r2
 8005420:	bf38      	it	cc
 8005422:	2300      	movcc	r3, #0
 8005424:	4423      	add	r3, r4
 8005426:	e015      	b.n	8005454 <rshift+0x68>
 8005428:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800542c:	f1c1 0820 	rsb	r8, r1, #32
 8005430:	40cf      	lsrs	r7, r1
 8005432:	f105 0e04 	add.w	lr, r5, #4
 8005436:	46a1      	mov	r9, r4
 8005438:	4576      	cmp	r6, lr
 800543a:	46f4      	mov	ip, lr
 800543c:	d815      	bhi.n	800546a <rshift+0x7e>
 800543e:	1a9a      	subs	r2, r3, r2
 8005440:	0092      	lsls	r2, r2, #2
 8005442:	3a04      	subs	r2, #4
 8005444:	3501      	adds	r5, #1
 8005446:	42ae      	cmp	r6, r5
 8005448:	bf38      	it	cc
 800544a:	2200      	movcc	r2, #0
 800544c:	18a3      	adds	r3, r4, r2
 800544e:	50a7      	str	r7, [r4, r2]
 8005450:	b107      	cbz	r7, 8005454 <rshift+0x68>
 8005452:	3304      	adds	r3, #4
 8005454:	1b1a      	subs	r2, r3, r4
 8005456:	42a3      	cmp	r3, r4
 8005458:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800545c:	bf08      	it	eq
 800545e:	2300      	moveq	r3, #0
 8005460:	6102      	str	r2, [r0, #16]
 8005462:	bf08      	it	eq
 8005464:	6143      	streq	r3, [r0, #20]
 8005466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800546a:	f8dc c000 	ldr.w	ip, [ip]
 800546e:	fa0c fc08 	lsl.w	ip, ip, r8
 8005472:	ea4c 0707 	orr.w	r7, ip, r7
 8005476:	f849 7b04 	str.w	r7, [r9], #4
 800547a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800547e:	40cf      	lsrs	r7, r1
 8005480:	e7da      	b.n	8005438 <rshift+0x4c>
 8005482:	f851 cb04 	ldr.w	ip, [r1], #4
 8005486:	f847 cf04 	str.w	ip, [r7, #4]!
 800548a:	e7c3      	b.n	8005414 <rshift+0x28>
 800548c:	4623      	mov	r3, r4
 800548e:	e7e1      	b.n	8005454 <rshift+0x68>

08005490 <__hexdig_fun>:
 8005490:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005494:	2b09      	cmp	r3, #9
 8005496:	d802      	bhi.n	800549e <__hexdig_fun+0xe>
 8005498:	3820      	subs	r0, #32
 800549a:	b2c0      	uxtb	r0, r0
 800549c:	4770      	bx	lr
 800549e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80054a2:	2b05      	cmp	r3, #5
 80054a4:	d801      	bhi.n	80054aa <__hexdig_fun+0x1a>
 80054a6:	3847      	subs	r0, #71	; 0x47
 80054a8:	e7f7      	b.n	800549a <__hexdig_fun+0xa>
 80054aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d801      	bhi.n	80054b6 <__hexdig_fun+0x26>
 80054b2:	3827      	subs	r0, #39	; 0x27
 80054b4:	e7f1      	b.n	800549a <__hexdig_fun+0xa>
 80054b6:	2000      	movs	r0, #0
 80054b8:	4770      	bx	lr
	...

080054bc <__gethex>:
 80054bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c0:	ed2d 8b02 	vpush	{d8}
 80054c4:	b089      	sub	sp, #36	; 0x24
 80054c6:	ee08 0a10 	vmov	s16, r0
 80054ca:	9304      	str	r3, [sp, #16]
 80054cc:	4bb4      	ldr	r3, [pc, #720]	; (80057a0 <__gethex+0x2e4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	4618      	mov	r0, r3
 80054d4:	468b      	mov	fp, r1
 80054d6:	4690      	mov	r8, r2
 80054d8:	f7fa fe8c 	bl	80001f4 <strlen>
 80054dc:	9b01      	ldr	r3, [sp, #4]
 80054de:	f8db 2000 	ldr.w	r2, [fp]
 80054e2:	4403      	add	r3, r0
 80054e4:	4682      	mov	sl, r0
 80054e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80054ea:	9305      	str	r3, [sp, #20]
 80054ec:	1c93      	adds	r3, r2, #2
 80054ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80054f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80054f6:	32fe      	adds	r2, #254	; 0xfe
 80054f8:	18d1      	adds	r1, r2, r3
 80054fa:	461f      	mov	r7, r3
 80054fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005500:	9100      	str	r1, [sp, #0]
 8005502:	2830      	cmp	r0, #48	; 0x30
 8005504:	d0f8      	beq.n	80054f8 <__gethex+0x3c>
 8005506:	f7ff ffc3 	bl	8005490 <__hexdig_fun>
 800550a:	4604      	mov	r4, r0
 800550c:	2800      	cmp	r0, #0
 800550e:	d13a      	bne.n	8005586 <__gethex+0xca>
 8005510:	9901      	ldr	r1, [sp, #4]
 8005512:	4652      	mov	r2, sl
 8005514:	4638      	mov	r0, r7
 8005516:	f001 fdb3 	bl	8007080 <strncmp>
 800551a:	4605      	mov	r5, r0
 800551c:	2800      	cmp	r0, #0
 800551e:	d168      	bne.n	80055f2 <__gethex+0x136>
 8005520:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005524:	eb07 060a 	add.w	r6, r7, sl
 8005528:	f7ff ffb2 	bl	8005490 <__hexdig_fun>
 800552c:	2800      	cmp	r0, #0
 800552e:	d062      	beq.n	80055f6 <__gethex+0x13a>
 8005530:	4633      	mov	r3, r6
 8005532:	7818      	ldrb	r0, [r3, #0]
 8005534:	2830      	cmp	r0, #48	; 0x30
 8005536:	461f      	mov	r7, r3
 8005538:	f103 0301 	add.w	r3, r3, #1
 800553c:	d0f9      	beq.n	8005532 <__gethex+0x76>
 800553e:	f7ff ffa7 	bl	8005490 <__hexdig_fun>
 8005542:	2301      	movs	r3, #1
 8005544:	fab0 f480 	clz	r4, r0
 8005548:	0964      	lsrs	r4, r4, #5
 800554a:	4635      	mov	r5, r6
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	463a      	mov	r2, r7
 8005550:	4616      	mov	r6, r2
 8005552:	3201      	adds	r2, #1
 8005554:	7830      	ldrb	r0, [r6, #0]
 8005556:	f7ff ff9b 	bl	8005490 <__hexdig_fun>
 800555a:	2800      	cmp	r0, #0
 800555c:	d1f8      	bne.n	8005550 <__gethex+0x94>
 800555e:	9901      	ldr	r1, [sp, #4]
 8005560:	4652      	mov	r2, sl
 8005562:	4630      	mov	r0, r6
 8005564:	f001 fd8c 	bl	8007080 <strncmp>
 8005568:	b980      	cbnz	r0, 800558c <__gethex+0xd0>
 800556a:	b94d      	cbnz	r5, 8005580 <__gethex+0xc4>
 800556c:	eb06 050a 	add.w	r5, r6, sl
 8005570:	462a      	mov	r2, r5
 8005572:	4616      	mov	r6, r2
 8005574:	3201      	adds	r2, #1
 8005576:	7830      	ldrb	r0, [r6, #0]
 8005578:	f7ff ff8a 	bl	8005490 <__hexdig_fun>
 800557c:	2800      	cmp	r0, #0
 800557e:	d1f8      	bne.n	8005572 <__gethex+0xb6>
 8005580:	1bad      	subs	r5, r5, r6
 8005582:	00ad      	lsls	r5, r5, #2
 8005584:	e004      	b.n	8005590 <__gethex+0xd4>
 8005586:	2400      	movs	r4, #0
 8005588:	4625      	mov	r5, r4
 800558a:	e7e0      	b.n	800554e <__gethex+0x92>
 800558c:	2d00      	cmp	r5, #0
 800558e:	d1f7      	bne.n	8005580 <__gethex+0xc4>
 8005590:	7833      	ldrb	r3, [r6, #0]
 8005592:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005596:	2b50      	cmp	r3, #80	; 0x50
 8005598:	d13b      	bne.n	8005612 <__gethex+0x156>
 800559a:	7873      	ldrb	r3, [r6, #1]
 800559c:	2b2b      	cmp	r3, #43	; 0x2b
 800559e:	d02c      	beq.n	80055fa <__gethex+0x13e>
 80055a0:	2b2d      	cmp	r3, #45	; 0x2d
 80055a2:	d02e      	beq.n	8005602 <__gethex+0x146>
 80055a4:	1c71      	adds	r1, r6, #1
 80055a6:	f04f 0900 	mov.w	r9, #0
 80055aa:	7808      	ldrb	r0, [r1, #0]
 80055ac:	f7ff ff70 	bl	8005490 <__hexdig_fun>
 80055b0:	1e43      	subs	r3, r0, #1
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b18      	cmp	r3, #24
 80055b6:	d82c      	bhi.n	8005612 <__gethex+0x156>
 80055b8:	f1a0 0210 	sub.w	r2, r0, #16
 80055bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80055c0:	f7ff ff66 	bl	8005490 <__hexdig_fun>
 80055c4:	1e43      	subs	r3, r0, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b18      	cmp	r3, #24
 80055ca:	d91d      	bls.n	8005608 <__gethex+0x14c>
 80055cc:	f1b9 0f00 	cmp.w	r9, #0
 80055d0:	d000      	beq.n	80055d4 <__gethex+0x118>
 80055d2:	4252      	negs	r2, r2
 80055d4:	4415      	add	r5, r2
 80055d6:	f8cb 1000 	str.w	r1, [fp]
 80055da:	b1e4      	cbz	r4, 8005616 <__gethex+0x15a>
 80055dc:	9b00      	ldr	r3, [sp, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bf14      	ite	ne
 80055e2:	2700      	movne	r7, #0
 80055e4:	2706      	moveq	r7, #6
 80055e6:	4638      	mov	r0, r7
 80055e8:	b009      	add	sp, #36	; 0x24
 80055ea:	ecbd 8b02 	vpop	{d8}
 80055ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f2:	463e      	mov	r6, r7
 80055f4:	4625      	mov	r5, r4
 80055f6:	2401      	movs	r4, #1
 80055f8:	e7ca      	b.n	8005590 <__gethex+0xd4>
 80055fa:	f04f 0900 	mov.w	r9, #0
 80055fe:	1cb1      	adds	r1, r6, #2
 8005600:	e7d3      	b.n	80055aa <__gethex+0xee>
 8005602:	f04f 0901 	mov.w	r9, #1
 8005606:	e7fa      	b.n	80055fe <__gethex+0x142>
 8005608:	230a      	movs	r3, #10
 800560a:	fb03 0202 	mla	r2, r3, r2, r0
 800560e:	3a10      	subs	r2, #16
 8005610:	e7d4      	b.n	80055bc <__gethex+0x100>
 8005612:	4631      	mov	r1, r6
 8005614:	e7df      	b.n	80055d6 <__gethex+0x11a>
 8005616:	1bf3      	subs	r3, r6, r7
 8005618:	3b01      	subs	r3, #1
 800561a:	4621      	mov	r1, r4
 800561c:	2b07      	cmp	r3, #7
 800561e:	dc0b      	bgt.n	8005638 <__gethex+0x17c>
 8005620:	ee18 0a10 	vmov	r0, s16
 8005624:	f000 fa90 	bl	8005b48 <_Balloc>
 8005628:	4604      	mov	r4, r0
 800562a:	b940      	cbnz	r0, 800563e <__gethex+0x182>
 800562c:	4b5d      	ldr	r3, [pc, #372]	; (80057a4 <__gethex+0x2e8>)
 800562e:	4602      	mov	r2, r0
 8005630:	21de      	movs	r1, #222	; 0xde
 8005632:	485d      	ldr	r0, [pc, #372]	; (80057a8 <__gethex+0x2ec>)
 8005634:	f001 fdf4 	bl	8007220 <__assert_func>
 8005638:	3101      	adds	r1, #1
 800563a:	105b      	asrs	r3, r3, #1
 800563c:	e7ee      	b.n	800561c <__gethex+0x160>
 800563e:	f100 0914 	add.w	r9, r0, #20
 8005642:	f04f 0b00 	mov.w	fp, #0
 8005646:	f1ca 0301 	rsb	r3, sl, #1
 800564a:	f8cd 9008 	str.w	r9, [sp, #8]
 800564e:	f8cd b000 	str.w	fp, [sp]
 8005652:	9306      	str	r3, [sp, #24]
 8005654:	42b7      	cmp	r7, r6
 8005656:	d340      	bcc.n	80056da <__gethex+0x21e>
 8005658:	9802      	ldr	r0, [sp, #8]
 800565a:	9b00      	ldr	r3, [sp, #0]
 800565c:	f840 3b04 	str.w	r3, [r0], #4
 8005660:	eba0 0009 	sub.w	r0, r0, r9
 8005664:	1080      	asrs	r0, r0, #2
 8005666:	0146      	lsls	r6, r0, #5
 8005668:	6120      	str	r0, [r4, #16]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fb5e 	bl	8005d2c <__hi0bits>
 8005670:	1a30      	subs	r0, r6, r0
 8005672:	f8d8 6000 	ldr.w	r6, [r8]
 8005676:	42b0      	cmp	r0, r6
 8005678:	dd63      	ble.n	8005742 <__gethex+0x286>
 800567a:	1b87      	subs	r7, r0, r6
 800567c:	4639      	mov	r1, r7
 800567e:	4620      	mov	r0, r4
 8005680:	f000 ff02 	bl	8006488 <__any_on>
 8005684:	4682      	mov	sl, r0
 8005686:	b1a8      	cbz	r0, 80056b4 <__gethex+0x1f8>
 8005688:	1e7b      	subs	r3, r7, #1
 800568a:	1159      	asrs	r1, r3, #5
 800568c:	f003 021f 	and.w	r2, r3, #31
 8005690:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005694:	f04f 0a01 	mov.w	sl, #1
 8005698:	fa0a f202 	lsl.w	r2, sl, r2
 800569c:	420a      	tst	r2, r1
 800569e:	d009      	beq.n	80056b4 <__gethex+0x1f8>
 80056a0:	4553      	cmp	r3, sl
 80056a2:	dd05      	ble.n	80056b0 <__gethex+0x1f4>
 80056a4:	1eb9      	subs	r1, r7, #2
 80056a6:	4620      	mov	r0, r4
 80056a8:	f000 feee 	bl	8006488 <__any_on>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d145      	bne.n	800573c <__gethex+0x280>
 80056b0:	f04f 0a02 	mov.w	sl, #2
 80056b4:	4639      	mov	r1, r7
 80056b6:	4620      	mov	r0, r4
 80056b8:	f7ff fe98 	bl	80053ec <rshift>
 80056bc:	443d      	add	r5, r7
 80056be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80056c2:	42ab      	cmp	r3, r5
 80056c4:	da4c      	bge.n	8005760 <__gethex+0x2a4>
 80056c6:	ee18 0a10 	vmov	r0, s16
 80056ca:	4621      	mov	r1, r4
 80056cc:	f000 fa7c 	bl	8005bc8 <_Bfree>
 80056d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80056d2:	2300      	movs	r3, #0
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	27a3      	movs	r7, #163	; 0xa3
 80056d8:	e785      	b.n	80055e6 <__gethex+0x12a>
 80056da:	1e73      	subs	r3, r6, #1
 80056dc:	9a05      	ldr	r2, [sp, #20]
 80056de:	9303      	str	r3, [sp, #12]
 80056e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d019      	beq.n	800571c <__gethex+0x260>
 80056e8:	f1bb 0f20 	cmp.w	fp, #32
 80056ec:	d107      	bne.n	80056fe <__gethex+0x242>
 80056ee:	9b02      	ldr	r3, [sp, #8]
 80056f0:	9a00      	ldr	r2, [sp, #0]
 80056f2:	f843 2b04 	str.w	r2, [r3], #4
 80056f6:	9302      	str	r3, [sp, #8]
 80056f8:	2300      	movs	r3, #0
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	469b      	mov	fp, r3
 80056fe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005702:	f7ff fec5 	bl	8005490 <__hexdig_fun>
 8005706:	9b00      	ldr	r3, [sp, #0]
 8005708:	f000 000f 	and.w	r0, r0, #15
 800570c:	fa00 f00b 	lsl.w	r0, r0, fp
 8005710:	4303      	orrs	r3, r0
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	f10b 0b04 	add.w	fp, fp, #4
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	e00d      	b.n	8005738 <__gethex+0x27c>
 800571c:	9b03      	ldr	r3, [sp, #12]
 800571e:	9a06      	ldr	r2, [sp, #24]
 8005720:	4413      	add	r3, r2
 8005722:	42bb      	cmp	r3, r7
 8005724:	d3e0      	bcc.n	80056e8 <__gethex+0x22c>
 8005726:	4618      	mov	r0, r3
 8005728:	9901      	ldr	r1, [sp, #4]
 800572a:	9307      	str	r3, [sp, #28]
 800572c:	4652      	mov	r2, sl
 800572e:	f001 fca7 	bl	8007080 <strncmp>
 8005732:	9b07      	ldr	r3, [sp, #28]
 8005734:	2800      	cmp	r0, #0
 8005736:	d1d7      	bne.n	80056e8 <__gethex+0x22c>
 8005738:	461e      	mov	r6, r3
 800573a:	e78b      	b.n	8005654 <__gethex+0x198>
 800573c:	f04f 0a03 	mov.w	sl, #3
 8005740:	e7b8      	b.n	80056b4 <__gethex+0x1f8>
 8005742:	da0a      	bge.n	800575a <__gethex+0x29e>
 8005744:	1a37      	subs	r7, r6, r0
 8005746:	4621      	mov	r1, r4
 8005748:	ee18 0a10 	vmov	r0, s16
 800574c:	463a      	mov	r2, r7
 800574e:	f000 fc57 	bl	8006000 <__lshift>
 8005752:	1bed      	subs	r5, r5, r7
 8005754:	4604      	mov	r4, r0
 8005756:	f100 0914 	add.w	r9, r0, #20
 800575a:	f04f 0a00 	mov.w	sl, #0
 800575e:	e7ae      	b.n	80056be <__gethex+0x202>
 8005760:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005764:	42a8      	cmp	r0, r5
 8005766:	dd72      	ble.n	800584e <__gethex+0x392>
 8005768:	1b45      	subs	r5, r0, r5
 800576a:	42ae      	cmp	r6, r5
 800576c:	dc36      	bgt.n	80057dc <__gethex+0x320>
 800576e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d02a      	beq.n	80057cc <__gethex+0x310>
 8005776:	2b03      	cmp	r3, #3
 8005778:	d02c      	beq.n	80057d4 <__gethex+0x318>
 800577a:	2b01      	cmp	r3, #1
 800577c:	d11c      	bne.n	80057b8 <__gethex+0x2fc>
 800577e:	42ae      	cmp	r6, r5
 8005780:	d11a      	bne.n	80057b8 <__gethex+0x2fc>
 8005782:	2e01      	cmp	r6, #1
 8005784:	d112      	bne.n	80057ac <__gethex+0x2f0>
 8005786:	9a04      	ldr	r2, [sp, #16]
 8005788:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	2301      	movs	r3, #1
 8005790:	6123      	str	r3, [r4, #16]
 8005792:	f8c9 3000 	str.w	r3, [r9]
 8005796:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005798:	2762      	movs	r7, #98	; 0x62
 800579a:	601c      	str	r4, [r3, #0]
 800579c:	e723      	b.n	80055e6 <__gethex+0x12a>
 800579e:	bf00      	nop
 80057a0:	080080b8 	.word	0x080080b8
 80057a4:	08008040 	.word	0x08008040
 80057a8:	08008051 	.word	0x08008051
 80057ac:	1e71      	subs	r1, r6, #1
 80057ae:	4620      	mov	r0, r4
 80057b0:	f000 fe6a 	bl	8006488 <__any_on>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d1e6      	bne.n	8005786 <__gethex+0x2ca>
 80057b8:	ee18 0a10 	vmov	r0, s16
 80057bc:	4621      	mov	r1, r4
 80057be:	f000 fa03 	bl	8005bc8 <_Bfree>
 80057c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80057c4:	2300      	movs	r3, #0
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	2750      	movs	r7, #80	; 0x50
 80057ca:	e70c      	b.n	80055e6 <__gethex+0x12a>
 80057cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f2      	bne.n	80057b8 <__gethex+0x2fc>
 80057d2:	e7d8      	b.n	8005786 <__gethex+0x2ca>
 80057d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1d5      	bne.n	8005786 <__gethex+0x2ca>
 80057da:	e7ed      	b.n	80057b8 <__gethex+0x2fc>
 80057dc:	1e6f      	subs	r7, r5, #1
 80057de:	f1ba 0f00 	cmp.w	sl, #0
 80057e2:	d131      	bne.n	8005848 <__gethex+0x38c>
 80057e4:	b127      	cbz	r7, 80057f0 <__gethex+0x334>
 80057e6:	4639      	mov	r1, r7
 80057e8:	4620      	mov	r0, r4
 80057ea:	f000 fe4d 	bl	8006488 <__any_on>
 80057ee:	4682      	mov	sl, r0
 80057f0:	117b      	asrs	r3, r7, #5
 80057f2:	2101      	movs	r1, #1
 80057f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80057f8:	f007 071f 	and.w	r7, r7, #31
 80057fc:	fa01 f707 	lsl.w	r7, r1, r7
 8005800:	421f      	tst	r7, r3
 8005802:	4629      	mov	r1, r5
 8005804:	4620      	mov	r0, r4
 8005806:	bf18      	it	ne
 8005808:	f04a 0a02 	orrne.w	sl, sl, #2
 800580c:	1b76      	subs	r6, r6, r5
 800580e:	f7ff fded 	bl	80053ec <rshift>
 8005812:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005816:	2702      	movs	r7, #2
 8005818:	f1ba 0f00 	cmp.w	sl, #0
 800581c:	d048      	beq.n	80058b0 <__gethex+0x3f4>
 800581e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d015      	beq.n	8005852 <__gethex+0x396>
 8005826:	2b03      	cmp	r3, #3
 8005828:	d017      	beq.n	800585a <__gethex+0x39e>
 800582a:	2b01      	cmp	r3, #1
 800582c:	d109      	bne.n	8005842 <__gethex+0x386>
 800582e:	f01a 0f02 	tst.w	sl, #2
 8005832:	d006      	beq.n	8005842 <__gethex+0x386>
 8005834:	f8d9 0000 	ldr.w	r0, [r9]
 8005838:	ea4a 0a00 	orr.w	sl, sl, r0
 800583c:	f01a 0f01 	tst.w	sl, #1
 8005840:	d10e      	bne.n	8005860 <__gethex+0x3a4>
 8005842:	f047 0710 	orr.w	r7, r7, #16
 8005846:	e033      	b.n	80058b0 <__gethex+0x3f4>
 8005848:	f04f 0a01 	mov.w	sl, #1
 800584c:	e7d0      	b.n	80057f0 <__gethex+0x334>
 800584e:	2701      	movs	r7, #1
 8005850:	e7e2      	b.n	8005818 <__gethex+0x35c>
 8005852:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005854:	f1c3 0301 	rsb	r3, r3, #1
 8005858:	9315      	str	r3, [sp, #84]	; 0x54
 800585a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0f0      	beq.n	8005842 <__gethex+0x386>
 8005860:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005864:	f104 0314 	add.w	r3, r4, #20
 8005868:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800586c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005870:	f04f 0c00 	mov.w	ip, #0
 8005874:	4618      	mov	r0, r3
 8005876:	f853 2b04 	ldr.w	r2, [r3], #4
 800587a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800587e:	d01c      	beq.n	80058ba <__gethex+0x3fe>
 8005880:	3201      	adds	r2, #1
 8005882:	6002      	str	r2, [r0, #0]
 8005884:	2f02      	cmp	r7, #2
 8005886:	f104 0314 	add.w	r3, r4, #20
 800588a:	d13f      	bne.n	800590c <__gethex+0x450>
 800588c:	f8d8 2000 	ldr.w	r2, [r8]
 8005890:	3a01      	subs	r2, #1
 8005892:	42b2      	cmp	r2, r6
 8005894:	d10a      	bne.n	80058ac <__gethex+0x3f0>
 8005896:	1171      	asrs	r1, r6, #5
 8005898:	2201      	movs	r2, #1
 800589a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800589e:	f006 061f 	and.w	r6, r6, #31
 80058a2:	fa02 f606 	lsl.w	r6, r2, r6
 80058a6:	421e      	tst	r6, r3
 80058a8:	bf18      	it	ne
 80058aa:	4617      	movne	r7, r2
 80058ac:	f047 0720 	orr.w	r7, r7, #32
 80058b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80058b2:	601c      	str	r4, [r3, #0]
 80058b4:	9b04      	ldr	r3, [sp, #16]
 80058b6:	601d      	str	r5, [r3, #0]
 80058b8:	e695      	b.n	80055e6 <__gethex+0x12a>
 80058ba:	4299      	cmp	r1, r3
 80058bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80058c0:	d8d8      	bhi.n	8005874 <__gethex+0x3b8>
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	459b      	cmp	fp, r3
 80058c6:	db19      	blt.n	80058fc <__gethex+0x440>
 80058c8:	6861      	ldr	r1, [r4, #4]
 80058ca:	ee18 0a10 	vmov	r0, s16
 80058ce:	3101      	adds	r1, #1
 80058d0:	f000 f93a 	bl	8005b48 <_Balloc>
 80058d4:	4681      	mov	r9, r0
 80058d6:	b918      	cbnz	r0, 80058e0 <__gethex+0x424>
 80058d8:	4b1a      	ldr	r3, [pc, #104]	; (8005944 <__gethex+0x488>)
 80058da:	4602      	mov	r2, r0
 80058dc:	2184      	movs	r1, #132	; 0x84
 80058de:	e6a8      	b.n	8005632 <__gethex+0x176>
 80058e0:	6922      	ldr	r2, [r4, #16]
 80058e2:	3202      	adds	r2, #2
 80058e4:	f104 010c 	add.w	r1, r4, #12
 80058e8:	0092      	lsls	r2, r2, #2
 80058ea:	300c      	adds	r0, #12
 80058ec:	f000 f91e 	bl	8005b2c <memcpy>
 80058f0:	4621      	mov	r1, r4
 80058f2:	ee18 0a10 	vmov	r0, s16
 80058f6:	f000 f967 	bl	8005bc8 <_Bfree>
 80058fa:	464c      	mov	r4, r9
 80058fc:	6923      	ldr	r3, [r4, #16]
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005904:	6122      	str	r2, [r4, #16]
 8005906:	2201      	movs	r2, #1
 8005908:	615a      	str	r2, [r3, #20]
 800590a:	e7bb      	b.n	8005884 <__gethex+0x3c8>
 800590c:	6922      	ldr	r2, [r4, #16]
 800590e:	455a      	cmp	r2, fp
 8005910:	dd0b      	ble.n	800592a <__gethex+0x46e>
 8005912:	2101      	movs	r1, #1
 8005914:	4620      	mov	r0, r4
 8005916:	f7ff fd69 	bl	80053ec <rshift>
 800591a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800591e:	3501      	adds	r5, #1
 8005920:	42ab      	cmp	r3, r5
 8005922:	f6ff aed0 	blt.w	80056c6 <__gethex+0x20a>
 8005926:	2701      	movs	r7, #1
 8005928:	e7c0      	b.n	80058ac <__gethex+0x3f0>
 800592a:	f016 061f 	ands.w	r6, r6, #31
 800592e:	d0fa      	beq.n	8005926 <__gethex+0x46a>
 8005930:	4453      	add	r3, sl
 8005932:	f1c6 0620 	rsb	r6, r6, #32
 8005936:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800593a:	f000 f9f7 	bl	8005d2c <__hi0bits>
 800593e:	42b0      	cmp	r0, r6
 8005940:	dbe7      	blt.n	8005912 <__gethex+0x456>
 8005942:	e7f0      	b.n	8005926 <__gethex+0x46a>
 8005944:	08008040 	.word	0x08008040

08005948 <L_shift>:
 8005948:	f1c2 0208 	rsb	r2, r2, #8
 800594c:	0092      	lsls	r2, r2, #2
 800594e:	b570      	push	{r4, r5, r6, lr}
 8005950:	f1c2 0620 	rsb	r6, r2, #32
 8005954:	6843      	ldr	r3, [r0, #4]
 8005956:	6804      	ldr	r4, [r0, #0]
 8005958:	fa03 f506 	lsl.w	r5, r3, r6
 800595c:	432c      	orrs	r4, r5
 800595e:	40d3      	lsrs	r3, r2
 8005960:	6004      	str	r4, [r0, #0]
 8005962:	f840 3f04 	str.w	r3, [r0, #4]!
 8005966:	4288      	cmp	r0, r1
 8005968:	d3f4      	bcc.n	8005954 <L_shift+0xc>
 800596a:	bd70      	pop	{r4, r5, r6, pc}

0800596c <__match>:
 800596c:	b530      	push	{r4, r5, lr}
 800596e:	6803      	ldr	r3, [r0, #0]
 8005970:	3301      	adds	r3, #1
 8005972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005976:	b914      	cbnz	r4, 800597e <__match+0x12>
 8005978:	6003      	str	r3, [r0, #0]
 800597a:	2001      	movs	r0, #1
 800597c:	bd30      	pop	{r4, r5, pc}
 800597e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005982:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005986:	2d19      	cmp	r5, #25
 8005988:	bf98      	it	ls
 800598a:	3220      	addls	r2, #32
 800598c:	42a2      	cmp	r2, r4
 800598e:	d0f0      	beq.n	8005972 <__match+0x6>
 8005990:	2000      	movs	r0, #0
 8005992:	e7f3      	b.n	800597c <__match+0x10>

08005994 <__hexnan>:
 8005994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005998:	680b      	ldr	r3, [r1, #0]
 800599a:	115e      	asrs	r6, r3, #5
 800599c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80059a0:	f013 031f 	ands.w	r3, r3, #31
 80059a4:	b087      	sub	sp, #28
 80059a6:	bf18      	it	ne
 80059a8:	3604      	addne	r6, #4
 80059aa:	2500      	movs	r5, #0
 80059ac:	1f37      	subs	r7, r6, #4
 80059ae:	4690      	mov	r8, r2
 80059b0:	6802      	ldr	r2, [r0, #0]
 80059b2:	9301      	str	r3, [sp, #4]
 80059b4:	4682      	mov	sl, r0
 80059b6:	f846 5c04 	str.w	r5, [r6, #-4]
 80059ba:	46b9      	mov	r9, r7
 80059bc:	463c      	mov	r4, r7
 80059be:	9502      	str	r5, [sp, #8]
 80059c0:	46ab      	mov	fp, r5
 80059c2:	7851      	ldrb	r1, [r2, #1]
 80059c4:	1c53      	adds	r3, r2, #1
 80059c6:	9303      	str	r3, [sp, #12]
 80059c8:	b341      	cbz	r1, 8005a1c <__hexnan+0x88>
 80059ca:	4608      	mov	r0, r1
 80059cc:	9205      	str	r2, [sp, #20]
 80059ce:	9104      	str	r1, [sp, #16]
 80059d0:	f7ff fd5e 	bl	8005490 <__hexdig_fun>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d14f      	bne.n	8005a78 <__hexnan+0xe4>
 80059d8:	9904      	ldr	r1, [sp, #16]
 80059da:	9a05      	ldr	r2, [sp, #20]
 80059dc:	2920      	cmp	r1, #32
 80059de:	d818      	bhi.n	8005a12 <__hexnan+0x7e>
 80059e0:	9b02      	ldr	r3, [sp, #8]
 80059e2:	459b      	cmp	fp, r3
 80059e4:	dd13      	ble.n	8005a0e <__hexnan+0x7a>
 80059e6:	454c      	cmp	r4, r9
 80059e8:	d206      	bcs.n	80059f8 <__hexnan+0x64>
 80059ea:	2d07      	cmp	r5, #7
 80059ec:	dc04      	bgt.n	80059f8 <__hexnan+0x64>
 80059ee:	462a      	mov	r2, r5
 80059f0:	4649      	mov	r1, r9
 80059f2:	4620      	mov	r0, r4
 80059f4:	f7ff ffa8 	bl	8005948 <L_shift>
 80059f8:	4544      	cmp	r4, r8
 80059fa:	d950      	bls.n	8005a9e <__hexnan+0x10a>
 80059fc:	2300      	movs	r3, #0
 80059fe:	f1a4 0904 	sub.w	r9, r4, #4
 8005a02:	f844 3c04 	str.w	r3, [r4, #-4]
 8005a06:	f8cd b008 	str.w	fp, [sp, #8]
 8005a0a:	464c      	mov	r4, r9
 8005a0c:	461d      	mov	r5, r3
 8005a0e:	9a03      	ldr	r2, [sp, #12]
 8005a10:	e7d7      	b.n	80059c2 <__hexnan+0x2e>
 8005a12:	2929      	cmp	r1, #41	; 0x29
 8005a14:	d156      	bne.n	8005ac4 <__hexnan+0x130>
 8005a16:	3202      	adds	r2, #2
 8005a18:	f8ca 2000 	str.w	r2, [sl]
 8005a1c:	f1bb 0f00 	cmp.w	fp, #0
 8005a20:	d050      	beq.n	8005ac4 <__hexnan+0x130>
 8005a22:	454c      	cmp	r4, r9
 8005a24:	d206      	bcs.n	8005a34 <__hexnan+0xa0>
 8005a26:	2d07      	cmp	r5, #7
 8005a28:	dc04      	bgt.n	8005a34 <__hexnan+0xa0>
 8005a2a:	462a      	mov	r2, r5
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f7ff ff8a 	bl	8005948 <L_shift>
 8005a34:	4544      	cmp	r4, r8
 8005a36:	d934      	bls.n	8005aa2 <__hexnan+0x10e>
 8005a38:	f1a8 0204 	sub.w	r2, r8, #4
 8005a3c:	4623      	mov	r3, r4
 8005a3e:	f853 1b04 	ldr.w	r1, [r3], #4
 8005a42:	f842 1f04 	str.w	r1, [r2, #4]!
 8005a46:	429f      	cmp	r7, r3
 8005a48:	d2f9      	bcs.n	8005a3e <__hexnan+0xaa>
 8005a4a:	1b3b      	subs	r3, r7, r4
 8005a4c:	f023 0303 	bic.w	r3, r3, #3
 8005a50:	3304      	adds	r3, #4
 8005a52:	3401      	adds	r4, #1
 8005a54:	3e03      	subs	r6, #3
 8005a56:	42b4      	cmp	r4, r6
 8005a58:	bf88      	it	hi
 8005a5a:	2304      	movhi	r3, #4
 8005a5c:	4443      	add	r3, r8
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f843 2b04 	str.w	r2, [r3], #4
 8005a64:	429f      	cmp	r7, r3
 8005a66:	d2fb      	bcs.n	8005a60 <__hexnan+0xcc>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	b91b      	cbnz	r3, 8005a74 <__hexnan+0xe0>
 8005a6c:	4547      	cmp	r7, r8
 8005a6e:	d127      	bne.n	8005ac0 <__hexnan+0x12c>
 8005a70:	2301      	movs	r3, #1
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	2005      	movs	r0, #5
 8005a76:	e026      	b.n	8005ac6 <__hexnan+0x132>
 8005a78:	3501      	adds	r5, #1
 8005a7a:	2d08      	cmp	r5, #8
 8005a7c:	f10b 0b01 	add.w	fp, fp, #1
 8005a80:	dd06      	ble.n	8005a90 <__hexnan+0xfc>
 8005a82:	4544      	cmp	r4, r8
 8005a84:	d9c3      	bls.n	8005a0e <__hexnan+0x7a>
 8005a86:	2300      	movs	r3, #0
 8005a88:	f844 3c04 	str.w	r3, [r4, #-4]
 8005a8c:	2501      	movs	r5, #1
 8005a8e:	3c04      	subs	r4, #4
 8005a90:	6822      	ldr	r2, [r4, #0]
 8005a92:	f000 000f 	and.w	r0, r0, #15
 8005a96:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005a9a:	6022      	str	r2, [r4, #0]
 8005a9c:	e7b7      	b.n	8005a0e <__hexnan+0x7a>
 8005a9e:	2508      	movs	r5, #8
 8005aa0:	e7b5      	b.n	8005a0e <__hexnan+0x7a>
 8005aa2:	9b01      	ldr	r3, [sp, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0df      	beq.n	8005a68 <__hexnan+0xd4>
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aac:	f1c3 0320 	rsb	r3, r3, #32
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005ab8:	401a      	ands	r2, r3
 8005aba:	f846 2c04 	str.w	r2, [r6, #-4]
 8005abe:	e7d3      	b.n	8005a68 <__hexnan+0xd4>
 8005ac0:	3f04      	subs	r7, #4
 8005ac2:	e7d1      	b.n	8005a68 <__hexnan+0xd4>
 8005ac4:	2004      	movs	r0, #4
 8005ac6:	b007      	add	sp, #28
 8005ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005acc <_localeconv_r>:
 8005acc:	4800      	ldr	r0, [pc, #0]	; (8005ad0 <_localeconv_r+0x4>)
 8005ace:	4770      	bx	lr
 8005ad0:	2000015c 	.word	0x2000015c

08005ad4 <_lseek_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	4d07      	ldr	r5, [pc, #28]	; (8005af4 <_lseek_r+0x20>)
 8005ad8:	4604      	mov	r4, r0
 8005ada:	4608      	mov	r0, r1
 8005adc:	4611      	mov	r1, r2
 8005ade:	2200      	movs	r2, #0
 8005ae0:	602a      	str	r2, [r5, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f7fb fd3b 	bl	800155e <_lseek>
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	d102      	bne.n	8005af2 <_lseek_r+0x1e>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	b103      	cbz	r3, 8005af2 <_lseek_r+0x1e>
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	20000b08 	.word	0x20000b08

08005af8 <malloc>:
 8005af8:	4b02      	ldr	r3, [pc, #8]	; (8005b04 <malloc+0xc>)
 8005afa:	4601      	mov	r1, r0
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	f000 bd67 	b.w	80065d0 <_malloc_r>
 8005b02:	bf00      	nop
 8005b04:	20000004 	.word	0x20000004

08005b08 <__ascii_mbtowc>:
 8005b08:	b082      	sub	sp, #8
 8005b0a:	b901      	cbnz	r1, 8005b0e <__ascii_mbtowc+0x6>
 8005b0c:	a901      	add	r1, sp, #4
 8005b0e:	b142      	cbz	r2, 8005b22 <__ascii_mbtowc+0x1a>
 8005b10:	b14b      	cbz	r3, 8005b26 <__ascii_mbtowc+0x1e>
 8005b12:	7813      	ldrb	r3, [r2, #0]
 8005b14:	600b      	str	r3, [r1, #0]
 8005b16:	7812      	ldrb	r2, [r2, #0]
 8005b18:	1e10      	subs	r0, r2, #0
 8005b1a:	bf18      	it	ne
 8005b1c:	2001      	movne	r0, #1
 8005b1e:	b002      	add	sp, #8
 8005b20:	4770      	bx	lr
 8005b22:	4610      	mov	r0, r2
 8005b24:	e7fb      	b.n	8005b1e <__ascii_mbtowc+0x16>
 8005b26:	f06f 0001 	mvn.w	r0, #1
 8005b2a:	e7f8      	b.n	8005b1e <__ascii_mbtowc+0x16>

08005b2c <memcpy>:
 8005b2c:	440a      	add	r2, r1
 8005b2e:	4291      	cmp	r1, r2
 8005b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b34:	d100      	bne.n	8005b38 <memcpy+0xc>
 8005b36:	4770      	bx	lr
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b42:	4291      	cmp	r1, r2
 8005b44:	d1f9      	bne.n	8005b3a <memcpy+0xe>
 8005b46:	bd10      	pop	{r4, pc}

08005b48 <_Balloc>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	460d      	mov	r5, r1
 8005b50:	b976      	cbnz	r6, 8005b70 <_Balloc+0x28>
 8005b52:	2010      	movs	r0, #16
 8005b54:	f7ff ffd0 	bl	8005af8 <malloc>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	6260      	str	r0, [r4, #36]	; 0x24
 8005b5c:	b920      	cbnz	r0, 8005b68 <_Balloc+0x20>
 8005b5e:	4b18      	ldr	r3, [pc, #96]	; (8005bc0 <_Balloc+0x78>)
 8005b60:	4818      	ldr	r0, [pc, #96]	; (8005bc4 <_Balloc+0x7c>)
 8005b62:	2166      	movs	r1, #102	; 0x66
 8005b64:	f001 fb5c 	bl	8007220 <__assert_func>
 8005b68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b6c:	6006      	str	r6, [r0, #0]
 8005b6e:	60c6      	str	r6, [r0, #12]
 8005b70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b72:	68f3      	ldr	r3, [r6, #12]
 8005b74:	b183      	cbz	r3, 8005b98 <_Balloc+0x50>
 8005b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b7e:	b9b8      	cbnz	r0, 8005bb0 <_Balloc+0x68>
 8005b80:	2101      	movs	r1, #1
 8005b82:	fa01 f605 	lsl.w	r6, r1, r5
 8005b86:	1d72      	adds	r2, r6, #5
 8005b88:	0092      	lsls	r2, r2, #2
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f000 fc9d 	bl	80064ca <_calloc_r>
 8005b90:	b160      	cbz	r0, 8005bac <_Balloc+0x64>
 8005b92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b96:	e00e      	b.n	8005bb6 <_Balloc+0x6e>
 8005b98:	2221      	movs	r2, #33	; 0x21
 8005b9a:	2104      	movs	r1, #4
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f000 fc94 	bl	80064ca <_calloc_r>
 8005ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ba4:	60f0      	str	r0, [r6, #12]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e4      	bne.n	8005b76 <_Balloc+0x2e>
 8005bac:	2000      	movs	r0, #0
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	6802      	ldr	r2, [r0, #0]
 8005bb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005bbc:	e7f7      	b.n	8005bae <_Balloc+0x66>
 8005bbe:	bf00      	nop
 8005bc0:	08007fce 	.word	0x08007fce
 8005bc4:	080080cc 	.word	0x080080cc

08005bc8 <_Bfree>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005bcc:	4605      	mov	r5, r0
 8005bce:	460c      	mov	r4, r1
 8005bd0:	b976      	cbnz	r6, 8005bf0 <_Bfree+0x28>
 8005bd2:	2010      	movs	r0, #16
 8005bd4:	f7ff ff90 	bl	8005af8 <malloc>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	6268      	str	r0, [r5, #36]	; 0x24
 8005bdc:	b920      	cbnz	r0, 8005be8 <_Bfree+0x20>
 8005bde:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <_Bfree+0x3c>)
 8005be0:	4809      	ldr	r0, [pc, #36]	; (8005c08 <_Bfree+0x40>)
 8005be2:	218a      	movs	r1, #138	; 0x8a
 8005be4:	f001 fb1c 	bl	8007220 <__assert_func>
 8005be8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bec:	6006      	str	r6, [r0, #0]
 8005bee:	60c6      	str	r6, [r0, #12]
 8005bf0:	b13c      	cbz	r4, 8005c02 <_Bfree+0x3a>
 8005bf2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bf4:	6862      	ldr	r2, [r4, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bfc:	6021      	str	r1, [r4, #0]
 8005bfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	08007fce 	.word	0x08007fce
 8005c08:	080080cc 	.word	0x080080cc

08005c0c <__multadd>:
 8005c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c10:	690d      	ldr	r5, [r1, #16]
 8005c12:	4607      	mov	r7, r0
 8005c14:	460c      	mov	r4, r1
 8005c16:	461e      	mov	r6, r3
 8005c18:	f101 0c14 	add.w	ip, r1, #20
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	f8dc 3000 	ldr.w	r3, [ip]
 8005c22:	b299      	uxth	r1, r3
 8005c24:	fb02 6101 	mla	r1, r2, r1, r6
 8005c28:	0c1e      	lsrs	r6, r3, #16
 8005c2a:	0c0b      	lsrs	r3, r1, #16
 8005c2c:	fb02 3306 	mla	r3, r2, r6, r3
 8005c30:	b289      	uxth	r1, r1
 8005c32:	3001      	adds	r0, #1
 8005c34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c38:	4285      	cmp	r5, r0
 8005c3a:	f84c 1b04 	str.w	r1, [ip], #4
 8005c3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c42:	dcec      	bgt.n	8005c1e <__multadd+0x12>
 8005c44:	b30e      	cbz	r6, 8005c8a <__multadd+0x7e>
 8005c46:	68a3      	ldr	r3, [r4, #8]
 8005c48:	42ab      	cmp	r3, r5
 8005c4a:	dc19      	bgt.n	8005c80 <__multadd+0x74>
 8005c4c:	6861      	ldr	r1, [r4, #4]
 8005c4e:	4638      	mov	r0, r7
 8005c50:	3101      	adds	r1, #1
 8005c52:	f7ff ff79 	bl	8005b48 <_Balloc>
 8005c56:	4680      	mov	r8, r0
 8005c58:	b928      	cbnz	r0, 8005c66 <__multadd+0x5a>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <__multadd+0x84>)
 8005c5e:	480d      	ldr	r0, [pc, #52]	; (8005c94 <__multadd+0x88>)
 8005c60:	21b5      	movs	r1, #181	; 0xb5
 8005c62:	f001 fadd 	bl	8007220 <__assert_func>
 8005c66:	6922      	ldr	r2, [r4, #16]
 8005c68:	3202      	adds	r2, #2
 8005c6a:	f104 010c 	add.w	r1, r4, #12
 8005c6e:	0092      	lsls	r2, r2, #2
 8005c70:	300c      	adds	r0, #12
 8005c72:	f7ff ff5b 	bl	8005b2c <memcpy>
 8005c76:	4621      	mov	r1, r4
 8005c78:	4638      	mov	r0, r7
 8005c7a:	f7ff ffa5 	bl	8005bc8 <_Bfree>
 8005c7e:	4644      	mov	r4, r8
 8005c80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c84:	3501      	adds	r5, #1
 8005c86:	615e      	str	r6, [r3, #20]
 8005c88:	6125      	str	r5, [r4, #16]
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c90:	08008040 	.word	0x08008040
 8005c94:	080080cc 	.word	0x080080cc

08005c98 <__s2b>:
 8005c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	4615      	mov	r5, r2
 8005ca0:	461f      	mov	r7, r3
 8005ca2:	2209      	movs	r2, #9
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cac:	2100      	movs	r1, #0
 8005cae:	2201      	movs	r2, #1
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	db09      	blt.n	8005cc8 <__s2b+0x30>
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f7ff ff47 	bl	8005b48 <_Balloc>
 8005cba:	b940      	cbnz	r0, 8005cce <__s2b+0x36>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	4b19      	ldr	r3, [pc, #100]	; (8005d24 <__s2b+0x8c>)
 8005cc0:	4819      	ldr	r0, [pc, #100]	; (8005d28 <__s2b+0x90>)
 8005cc2:	21ce      	movs	r1, #206	; 0xce
 8005cc4:	f001 faac 	bl	8007220 <__assert_func>
 8005cc8:	0052      	lsls	r2, r2, #1
 8005cca:	3101      	adds	r1, #1
 8005ccc:	e7f0      	b.n	8005cb0 <__s2b+0x18>
 8005cce:	9b08      	ldr	r3, [sp, #32]
 8005cd0:	6143      	str	r3, [r0, #20]
 8005cd2:	2d09      	cmp	r5, #9
 8005cd4:	f04f 0301 	mov.w	r3, #1
 8005cd8:	6103      	str	r3, [r0, #16]
 8005cda:	dd16      	ble.n	8005d0a <__s2b+0x72>
 8005cdc:	f104 0909 	add.w	r9, r4, #9
 8005ce0:	46c8      	mov	r8, r9
 8005ce2:	442c      	add	r4, r5
 8005ce4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005ce8:	4601      	mov	r1, r0
 8005cea:	3b30      	subs	r3, #48	; 0x30
 8005cec:	220a      	movs	r2, #10
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f7ff ff8c 	bl	8005c0c <__multadd>
 8005cf4:	45a0      	cmp	r8, r4
 8005cf6:	d1f5      	bne.n	8005ce4 <__s2b+0x4c>
 8005cf8:	f1a5 0408 	sub.w	r4, r5, #8
 8005cfc:	444c      	add	r4, r9
 8005cfe:	1b2d      	subs	r5, r5, r4
 8005d00:	1963      	adds	r3, r4, r5
 8005d02:	42bb      	cmp	r3, r7
 8005d04:	db04      	blt.n	8005d10 <__s2b+0x78>
 8005d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d0a:	340a      	adds	r4, #10
 8005d0c:	2509      	movs	r5, #9
 8005d0e:	e7f6      	b.n	8005cfe <__s2b+0x66>
 8005d10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005d14:	4601      	mov	r1, r0
 8005d16:	3b30      	subs	r3, #48	; 0x30
 8005d18:	220a      	movs	r2, #10
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f7ff ff76 	bl	8005c0c <__multadd>
 8005d20:	e7ee      	b.n	8005d00 <__s2b+0x68>
 8005d22:	bf00      	nop
 8005d24:	08008040 	.word	0x08008040
 8005d28:	080080cc 	.word	0x080080cc

08005d2c <__hi0bits>:
 8005d2c:	0c03      	lsrs	r3, r0, #16
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	b9d3      	cbnz	r3, 8005d68 <__hi0bits+0x3c>
 8005d32:	0400      	lsls	r0, r0, #16
 8005d34:	2310      	movs	r3, #16
 8005d36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005d3a:	bf04      	itt	eq
 8005d3c:	0200      	lsleq	r0, r0, #8
 8005d3e:	3308      	addeq	r3, #8
 8005d40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005d44:	bf04      	itt	eq
 8005d46:	0100      	lsleq	r0, r0, #4
 8005d48:	3304      	addeq	r3, #4
 8005d4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005d4e:	bf04      	itt	eq
 8005d50:	0080      	lsleq	r0, r0, #2
 8005d52:	3302      	addeq	r3, #2
 8005d54:	2800      	cmp	r0, #0
 8005d56:	db05      	blt.n	8005d64 <__hi0bits+0x38>
 8005d58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005d5c:	f103 0301 	add.w	r3, r3, #1
 8005d60:	bf08      	it	eq
 8005d62:	2320      	moveq	r3, #32
 8005d64:	4618      	mov	r0, r3
 8005d66:	4770      	bx	lr
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e7e4      	b.n	8005d36 <__hi0bits+0xa>

08005d6c <__lo0bits>:
 8005d6c:	6803      	ldr	r3, [r0, #0]
 8005d6e:	f013 0207 	ands.w	r2, r3, #7
 8005d72:	4601      	mov	r1, r0
 8005d74:	d00b      	beq.n	8005d8e <__lo0bits+0x22>
 8005d76:	07da      	lsls	r2, r3, #31
 8005d78:	d423      	bmi.n	8005dc2 <__lo0bits+0x56>
 8005d7a:	0798      	lsls	r0, r3, #30
 8005d7c:	bf49      	itett	mi
 8005d7e:	085b      	lsrmi	r3, r3, #1
 8005d80:	089b      	lsrpl	r3, r3, #2
 8005d82:	2001      	movmi	r0, #1
 8005d84:	600b      	strmi	r3, [r1, #0]
 8005d86:	bf5c      	itt	pl
 8005d88:	600b      	strpl	r3, [r1, #0]
 8005d8a:	2002      	movpl	r0, #2
 8005d8c:	4770      	bx	lr
 8005d8e:	b298      	uxth	r0, r3
 8005d90:	b9a8      	cbnz	r0, 8005dbe <__lo0bits+0x52>
 8005d92:	0c1b      	lsrs	r3, r3, #16
 8005d94:	2010      	movs	r0, #16
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	b90a      	cbnz	r2, 8005d9e <__lo0bits+0x32>
 8005d9a:	3008      	adds	r0, #8
 8005d9c:	0a1b      	lsrs	r3, r3, #8
 8005d9e:	071a      	lsls	r2, r3, #28
 8005da0:	bf04      	itt	eq
 8005da2:	091b      	lsreq	r3, r3, #4
 8005da4:	3004      	addeq	r0, #4
 8005da6:	079a      	lsls	r2, r3, #30
 8005da8:	bf04      	itt	eq
 8005daa:	089b      	lsreq	r3, r3, #2
 8005dac:	3002      	addeq	r0, #2
 8005dae:	07da      	lsls	r2, r3, #31
 8005db0:	d403      	bmi.n	8005dba <__lo0bits+0x4e>
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	f100 0001 	add.w	r0, r0, #1
 8005db8:	d005      	beq.n	8005dc6 <__lo0bits+0x5a>
 8005dba:	600b      	str	r3, [r1, #0]
 8005dbc:	4770      	bx	lr
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	e7e9      	b.n	8005d96 <__lo0bits+0x2a>
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	4770      	bx	lr
 8005dc6:	2020      	movs	r0, #32
 8005dc8:	4770      	bx	lr
	...

08005dcc <__i2b>:
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	460c      	mov	r4, r1
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	f7ff feb9 	bl	8005b48 <_Balloc>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	b928      	cbnz	r0, 8005de6 <__i2b+0x1a>
 8005dda:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <__i2b+0x24>)
 8005ddc:	4805      	ldr	r0, [pc, #20]	; (8005df4 <__i2b+0x28>)
 8005dde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005de2:	f001 fa1d 	bl	8007220 <__assert_func>
 8005de6:	2301      	movs	r3, #1
 8005de8:	6144      	str	r4, [r0, #20]
 8005dea:	6103      	str	r3, [r0, #16]
 8005dec:	bd10      	pop	{r4, pc}
 8005dee:	bf00      	nop
 8005df0:	08008040 	.word	0x08008040
 8005df4:	080080cc 	.word	0x080080cc

08005df8 <__multiply>:
 8005df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfc:	4691      	mov	r9, r2
 8005dfe:	690a      	ldr	r2, [r1, #16]
 8005e00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	bfb8      	it	lt
 8005e08:	460b      	movlt	r3, r1
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	bfbc      	itt	lt
 8005e0e:	464c      	movlt	r4, r9
 8005e10:	4699      	movlt	r9, r3
 8005e12:	6927      	ldr	r7, [r4, #16]
 8005e14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e18:	68a3      	ldr	r3, [r4, #8]
 8005e1a:	6861      	ldr	r1, [r4, #4]
 8005e1c:	eb07 060a 	add.w	r6, r7, sl
 8005e20:	42b3      	cmp	r3, r6
 8005e22:	b085      	sub	sp, #20
 8005e24:	bfb8      	it	lt
 8005e26:	3101      	addlt	r1, #1
 8005e28:	f7ff fe8e 	bl	8005b48 <_Balloc>
 8005e2c:	b930      	cbnz	r0, 8005e3c <__multiply+0x44>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	4b44      	ldr	r3, [pc, #272]	; (8005f44 <__multiply+0x14c>)
 8005e32:	4845      	ldr	r0, [pc, #276]	; (8005f48 <__multiply+0x150>)
 8005e34:	f240 115d 	movw	r1, #349	; 0x15d
 8005e38:	f001 f9f2 	bl	8007220 <__assert_func>
 8005e3c:	f100 0514 	add.w	r5, r0, #20
 8005e40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e44:	462b      	mov	r3, r5
 8005e46:	2200      	movs	r2, #0
 8005e48:	4543      	cmp	r3, r8
 8005e4a:	d321      	bcc.n	8005e90 <__multiply+0x98>
 8005e4c:	f104 0314 	add.w	r3, r4, #20
 8005e50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005e54:	f109 0314 	add.w	r3, r9, #20
 8005e58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005e5c:	9202      	str	r2, [sp, #8]
 8005e5e:	1b3a      	subs	r2, r7, r4
 8005e60:	3a15      	subs	r2, #21
 8005e62:	f022 0203 	bic.w	r2, r2, #3
 8005e66:	3204      	adds	r2, #4
 8005e68:	f104 0115 	add.w	r1, r4, #21
 8005e6c:	428f      	cmp	r7, r1
 8005e6e:	bf38      	it	cc
 8005e70:	2204      	movcc	r2, #4
 8005e72:	9201      	str	r2, [sp, #4]
 8005e74:	9a02      	ldr	r2, [sp, #8]
 8005e76:	9303      	str	r3, [sp, #12]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d80c      	bhi.n	8005e96 <__multiply+0x9e>
 8005e7c:	2e00      	cmp	r6, #0
 8005e7e:	dd03      	ble.n	8005e88 <__multiply+0x90>
 8005e80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d05a      	beq.n	8005f3e <__multiply+0x146>
 8005e88:	6106      	str	r6, [r0, #16]
 8005e8a:	b005      	add	sp, #20
 8005e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e90:	f843 2b04 	str.w	r2, [r3], #4
 8005e94:	e7d8      	b.n	8005e48 <__multiply+0x50>
 8005e96:	f8b3 a000 	ldrh.w	sl, [r3]
 8005e9a:	f1ba 0f00 	cmp.w	sl, #0
 8005e9e:	d024      	beq.n	8005eea <__multiply+0xf2>
 8005ea0:	f104 0e14 	add.w	lr, r4, #20
 8005ea4:	46a9      	mov	r9, r5
 8005ea6:	f04f 0c00 	mov.w	ip, #0
 8005eaa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005eae:	f8d9 1000 	ldr.w	r1, [r9]
 8005eb2:	fa1f fb82 	uxth.w	fp, r2
 8005eb6:	b289      	uxth	r1, r1
 8005eb8:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ebc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005ec0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ec4:	4461      	add	r1, ip
 8005ec6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005eca:	fb0a c20b 	mla	r2, sl, fp, ip
 8005ece:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005ed2:	b289      	uxth	r1, r1
 8005ed4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ed8:	4577      	cmp	r7, lr
 8005eda:	f849 1b04 	str.w	r1, [r9], #4
 8005ede:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ee2:	d8e2      	bhi.n	8005eaa <__multiply+0xb2>
 8005ee4:	9a01      	ldr	r2, [sp, #4]
 8005ee6:	f845 c002 	str.w	ip, [r5, r2]
 8005eea:	9a03      	ldr	r2, [sp, #12]
 8005eec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	f1b9 0f00 	cmp.w	r9, #0
 8005ef6:	d020      	beq.n	8005f3a <__multiply+0x142>
 8005ef8:	6829      	ldr	r1, [r5, #0]
 8005efa:	f104 0c14 	add.w	ip, r4, #20
 8005efe:	46ae      	mov	lr, r5
 8005f00:	f04f 0a00 	mov.w	sl, #0
 8005f04:	f8bc b000 	ldrh.w	fp, [ip]
 8005f08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005f0c:	fb09 220b 	mla	r2, r9, fp, r2
 8005f10:	4492      	add	sl, r2
 8005f12:	b289      	uxth	r1, r1
 8005f14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005f18:	f84e 1b04 	str.w	r1, [lr], #4
 8005f1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005f20:	f8be 1000 	ldrh.w	r1, [lr]
 8005f24:	0c12      	lsrs	r2, r2, #16
 8005f26:	fb09 1102 	mla	r1, r9, r2, r1
 8005f2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005f2e:	4567      	cmp	r7, ip
 8005f30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f34:	d8e6      	bhi.n	8005f04 <__multiply+0x10c>
 8005f36:	9a01      	ldr	r2, [sp, #4]
 8005f38:	50a9      	str	r1, [r5, r2]
 8005f3a:	3504      	adds	r5, #4
 8005f3c:	e79a      	b.n	8005e74 <__multiply+0x7c>
 8005f3e:	3e01      	subs	r6, #1
 8005f40:	e79c      	b.n	8005e7c <__multiply+0x84>
 8005f42:	bf00      	nop
 8005f44:	08008040 	.word	0x08008040
 8005f48:	080080cc 	.word	0x080080cc

08005f4c <__pow5mult>:
 8005f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f50:	4615      	mov	r5, r2
 8005f52:	f012 0203 	ands.w	r2, r2, #3
 8005f56:	4606      	mov	r6, r0
 8005f58:	460f      	mov	r7, r1
 8005f5a:	d007      	beq.n	8005f6c <__pow5mult+0x20>
 8005f5c:	4c25      	ldr	r4, [pc, #148]	; (8005ff4 <__pow5mult+0xa8>)
 8005f5e:	3a01      	subs	r2, #1
 8005f60:	2300      	movs	r3, #0
 8005f62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f66:	f7ff fe51 	bl	8005c0c <__multadd>
 8005f6a:	4607      	mov	r7, r0
 8005f6c:	10ad      	asrs	r5, r5, #2
 8005f6e:	d03d      	beq.n	8005fec <__pow5mult+0xa0>
 8005f70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f72:	b97c      	cbnz	r4, 8005f94 <__pow5mult+0x48>
 8005f74:	2010      	movs	r0, #16
 8005f76:	f7ff fdbf 	bl	8005af8 <malloc>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	6270      	str	r0, [r6, #36]	; 0x24
 8005f7e:	b928      	cbnz	r0, 8005f8c <__pow5mult+0x40>
 8005f80:	4b1d      	ldr	r3, [pc, #116]	; (8005ff8 <__pow5mult+0xac>)
 8005f82:	481e      	ldr	r0, [pc, #120]	; (8005ffc <__pow5mult+0xb0>)
 8005f84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005f88:	f001 f94a 	bl	8007220 <__assert_func>
 8005f8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f90:	6004      	str	r4, [r0, #0]
 8005f92:	60c4      	str	r4, [r0, #12]
 8005f94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005f98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f9c:	b94c      	cbnz	r4, 8005fb2 <__pow5mult+0x66>
 8005f9e:	f240 2171 	movw	r1, #625	; 0x271
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f7ff ff12 	bl	8005dcc <__i2b>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fae:	4604      	mov	r4, r0
 8005fb0:	6003      	str	r3, [r0, #0]
 8005fb2:	f04f 0900 	mov.w	r9, #0
 8005fb6:	07eb      	lsls	r3, r5, #31
 8005fb8:	d50a      	bpl.n	8005fd0 <__pow5mult+0x84>
 8005fba:	4639      	mov	r1, r7
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f7ff ff1a 	bl	8005df8 <__multiply>
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	4680      	mov	r8, r0
 8005fc8:	4630      	mov	r0, r6
 8005fca:	f7ff fdfd 	bl	8005bc8 <_Bfree>
 8005fce:	4647      	mov	r7, r8
 8005fd0:	106d      	asrs	r5, r5, #1
 8005fd2:	d00b      	beq.n	8005fec <__pow5mult+0xa0>
 8005fd4:	6820      	ldr	r0, [r4, #0]
 8005fd6:	b938      	cbnz	r0, 8005fe8 <__pow5mult+0x9c>
 8005fd8:	4622      	mov	r2, r4
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7ff ff0b 	bl	8005df8 <__multiply>
 8005fe2:	6020      	str	r0, [r4, #0]
 8005fe4:	f8c0 9000 	str.w	r9, [r0]
 8005fe8:	4604      	mov	r4, r0
 8005fea:	e7e4      	b.n	8005fb6 <__pow5mult+0x6a>
 8005fec:	4638      	mov	r0, r7
 8005fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff2:	bf00      	nop
 8005ff4:	08008218 	.word	0x08008218
 8005ff8:	08007fce 	.word	0x08007fce
 8005ffc:	080080cc 	.word	0x080080cc

08006000 <__lshift>:
 8006000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006004:	460c      	mov	r4, r1
 8006006:	6849      	ldr	r1, [r1, #4]
 8006008:	6923      	ldr	r3, [r4, #16]
 800600a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800600e:	68a3      	ldr	r3, [r4, #8]
 8006010:	4607      	mov	r7, r0
 8006012:	4691      	mov	r9, r2
 8006014:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006018:	f108 0601 	add.w	r6, r8, #1
 800601c:	42b3      	cmp	r3, r6
 800601e:	db0b      	blt.n	8006038 <__lshift+0x38>
 8006020:	4638      	mov	r0, r7
 8006022:	f7ff fd91 	bl	8005b48 <_Balloc>
 8006026:	4605      	mov	r5, r0
 8006028:	b948      	cbnz	r0, 800603e <__lshift+0x3e>
 800602a:	4602      	mov	r2, r0
 800602c:	4b2a      	ldr	r3, [pc, #168]	; (80060d8 <__lshift+0xd8>)
 800602e:	482b      	ldr	r0, [pc, #172]	; (80060dc <__lshift+0xdc>)
 8006030:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006034:	f001 f8f4 	bl	8007220 <__assert_func>
 8006038:	3101      	adds	r1, #1
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	e7ee      	b.n	800601c <__lshift+0x1c>
 800603e:	2300      	movs	r3, #0
 8006040:	f100 0114 	add.w	r1, r0, #20
 8006044:	f100 0210 	add.w	r2, r0, #16
 8006048:	4618      	mov	r0, r3
 800604a:	4553      	cmp	r3, sl
 800604c:	db37      	blt.n	80060be <__lshift+0xbe>
 800604e:	6920      	ldr	r0, [r4, #16]
 8006050:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006054:	f104 0314 	add.w	r3, r4, #20
 8006058:	f019 091f 	ands.w	r9, r9, #31
 800605c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006060:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006064:	d02f      	beq.n	80060c6 <__lshift+0xc6>
 8006066:	f1c9 0e20 	rsb	lr, r9, #32
 800606a:	468a      	mov	sl, r1
 800606c:	f04f 0c00 	mov.w	ip, #0
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	fa02 f209 	lsl.w	r2, r2, r9
 8006076:	ea42 020c 	orr.w	r2, r2, ip
 800607a:	f84a 2b04 	str.w	r2, [sl], #4
 800607e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006082:	4298      	cmp	r0, r3
 8006084:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006088:	d8f2      	bhi.n	8006070 <__lshift+0x70>
 800608a:	1b03      	subs	r3, r0, r4
 800608c:	3b15      	subs	r3, #21
 800608e:	f023 0303 	bic.w	r3, r3, #3
 8006092:	3304      	adds	r3, #4
 8006094:	f104 0215 	add.w	r2, r4, #21
 8006098:	4290      	cmp	r0, r2
 800609a:	bf38      	it	cc
 800609c:	2304      	movcc	r3, #4
 800609e:	f841 c003 	str.w	ip, [r1, r3]
 80060a2:	f1bc 0f00 	cmp.w	ip, #0
 80060a6:	d001      	beq.n	80060ac <__lshift+0xac>
 80060a8:	f108 0602 	add.w	r6, r8, #2
 80060ac:	3e01      	subs	r6, #1
 80060ae:	4638      	mov	r0, r7
 80060b0:	612e      	str	r6, [r5, #16]
 80060b2:	4621      	mov	r1, r4
 80060b4:	f7ff fd88 	bl	8005bc8 <_Bfree>
 80060b8:	4628      	mov	r0, r5
 80060ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060be:	f842 0f04 	str.w	r0, [r2, #4]!
 80060c2:	3301      	adds	r3, #1
 80060c4:	e7c1      	b.n	800604a <__lshift+0x4a>
 80060c6:	3904      	subs	r1, #4
 80060c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80060d0:	4298      	cmp	r0, r3
 80060d2:	d8f9      	bhi.n	80060c8 <__lshift+0xc8>
 80060d4:	e7ea      	b.n	80060ac <__lshift+0xac>
 80060d6:	bf00      	nop
 80060d8:	08008040 	.word	0x08008040
 80060dc:	080080cc 	.word	0x080080cc

080060e0 <__mcmp>:
 80060e0:	b530      	push	{r4, r5, lr}
 80060e2:	6902      	ldr	r2, [r0, #16]
 80060e4:	690c      	ldr	r4, [r1, #16]
 80060e6:	1b12      	subs	r2, r2, r4
 80060e8:	d10e      	bne.n	8006108 <__mcmp+0x28>
 80060ea:	f100 0314 	add.w	r3, r0, #20
 80060ee:	3114      	adds	r1, #20
 80060f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80060f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80060f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80060fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006100:	42a5      	cmp	r5, r4
 8006102:	d003      	beq.n	800610c <__mcmp+0x2c>
 8006104:	d305      	bcc.n	8006112 <__mcmp+0x32>
 8006106:	2201      	movs	r2, #1
 8006108:	4610      	mov	r0, r2
 800610a:	bd30      	pop	{r4, r5, pc}
 800610c:	4283      	cmp	r3, r0
 800610e:	d3f3      	bcc.n	80060f8 <__mcmp+0x18>
 8006110:	e7fa      	b.n	8006108 <__mcmp+0x28>
 8006112:	f04f 32ff 	mov.w	r2, #4294967295
 8006116:	e7f7      	b.n	8006108 <__mcmp+0x28>

08006118 <__mdiff>:
 8006118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	460c      	mov	r4, r1
 800611e:	4606      	mov	r6, r0
 8006120:	4611      	mov	r1, r2
 8006122:	4620      	mov	r0, r4
 8006124:	4690      	mov	r8, r2
 8006126:	f7ff ffdb 	bl	80060e0 <__mcmp>
 800612a:	1e05      	subs	r5, r0, #0
 800612c:	d110      	bne.n	8006150 <__mdiff+0x38>
 800612e:	4629      	mov	r1, r5
 8006130:	4630      	mov	r0, r6
 8006132:	f7ff fd09 	bl	8005b48 <_Balloc>
 8006136:	b930      	cbnz	r0, 8006146 <__mdiff+0x2e>
 8006138:	4b3a      	ldr	r3, [pc, #232]	; (8006224 <__mdiff+0x10c>)
 800613a:	4602      	mov	r2, r0
 800613c:	f240 2132 	movw	r1, #562	; 0x232
 8006140:	4839      	ldr	r0, [pc, #228]	; (8006228 <__mdiff+0x110>)
 8006142:	f001 f86d 	bl	8007220 <__assert_func>
 8006146:	2301      	movs	r3, #1
 8006148:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800614c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006150:	bfa4      	itt	ge
 8006152:	4643      	movge	r3, r8
 8006154:	46a0      	movge	r8, r4
 8006156:	4630      	mov	r0, r6
 8006158:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800615c:	bfa6      	itte	ge
 800615e:	461c      	movge	r4, r3
 8006160:	2500      	movge	r5, #0
 8006162:	2501      	movlt	r5, #1
 8006164:	f7ff fcf0 	bl	8005b48 <_Balloc>
 8006168:	b920      	cbnz	r0, 8006174 <__mdiff+0x5c>
 800616a:	4b2e      	ldr	r3, [pc, #184]	; (8006224 <__mdiff+0x10c>)
 800616c:	4602      	mov	r2, r0
 800616e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006172:	e7e5      	b.n	8006140 <__mdiff+0x28>
 8006174:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006178:	6926      	ldr	r6, [r4, #16]
 800617a:	60c5      	str	r5, [r0, #12]
 800617c:	f104 0914 	add.w	r9, r4, #20
 8006180:	f108 0514 	add.w	r5, r8, #20
 8006184:	f100 0e14 	add.w	lr, r0, #20
 8006188:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800618c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006190:	f108 0210 	add.w	r2, r8, #16
 8006194:	46f2      	mov	sl, lr
 8006196:	2100      	movs	r1, #0
 8006198:	f859 3b04 	ldr.w	r3, [r9], #4
 800619c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80061a0:	fa1f f883 	uxth.w	r8, r3
 80061a4:	fa11 f18b 	uxtah	r1, r1, fp
 80061a8:	0c1b      	lsrs	r3, r3, #16
 80061aa:	eba1 0808 	sub.w	r8, r1, r8
 80061ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80061b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80061b6:	fa1f f888 	uxth.w	r8, r8
 80061ba:	1419      	asrs	r1, r3, #16
 80061bc:	454e      	cmp	r6, r9
 80061be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80061c2:	f84a 3b04 	str.w	r3, [sl], #4
 80061c6:	d8e7      	bhi.n	8006198 <__mdiff+0x80>
 80061c8:	1b33      	subs	r3, r6, r4
 80061ca:	3b15      	subs	r3, #21
 80061cc:	f023 0303 	bic.w	r3, r3, #3
 80061d0:	3304      	adds	r3, #4
 80061d2:	3415      	adds	r4, #21
 80061d4:	42a6      	cmp	r6, r4
 80061d6:	bf38      	it	cc
 80061d8:	2304      	movcc	r3, #4
 80061da:	441d      	add	r5, r3
 80061dc:	4473      	add	r3, lr
 80061de:	469e      	mov	lr, r3
 80061e0:	462e      	mov	r6, r5
 80061e2:	4566      	cmp	r6, ip
 80061e4:	d30e      	bcc.n	8006204 <__mdiff+0xec>
 80061e6:	f10c 0203 	add.w	r2, ip, #3
 80061ea:	1b52      	subs	r2, r2, r5
 80061ec:	f022 0203 	bic.w	r2, r2, #3
 80061f0:	3d03      	subs	r5, #3
 80061f2:	45ac      	cmp	ip, r5
 80061f4:	bf38      	it	cc
 80061f6:	2200      	movcc	r2, #0
 80061f8:	441a      	add	r2, r3
 80061fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80061fe:	b17b      	cbz	r3, 8006220 <__mdiff+0x108>
 8006200:	6107      	str	r7, [r0, #16]
 8006202:	e7a3      	b.n	800614c <__mdiff+0x34>
 8006204:	f856 8b04 	ldr.w	r8, [r6], #4
 8006208:	fa11 f288 	uxtah	r2, r1, r8
 800620c:	1414      	asrs	r4, r2, #16
 800620e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006212:	b292      	uxth	r2, r2
 8006214:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006218:	f84e 2b04 	str.w	r2, [lr], #4
 800621c:	1421      	asrs	r1, r4, #16
 800621e:	e7e0      	b.n	80061e2 <__mdiff+0xca>
 8006220:	3f01      	subs	r7, #1
 8006222:	e7ea      	b.n	80061fa <__mdiff+0xe2>
 8006224:	08008040 	.word	0x08008040
 8006228:	080080cc 	.word	0x080080cc

0800622c <__ulp>:
 800622c:	b082      	sub	sp, #8
 800622e:	ed8d 0b00 	vstr	d0, [sp]
 8006232:	9b01      	ldr	r3, [sp, #4]
 8006234:	4912      	ldr	r1, [pc, #72]	; (8006280 <__ulp+0x54>)
 8006236:	4019      	ands	r1, r3
 8006238:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800623c:	2900      	cmp	r1, #0
 800623e:	dd05      	ble.n	800624c <__ulp+0x20>
 8006240:	2200      	movs	r2, #0
 8006242:	460b      	mov	r3, r1
 8006244:	ec43 2b10 	vmov	d0, r2, r3
 8006248:	b002      	add	sp, #8
 800624a:	4770      	bx	lr
 800624c:	4249      	negs	r1, r1
 800624e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006252:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006256:	f04f 0200 	mov.w	r2, #0
 800625a:	f04f 0300 	mov.w	r3, #0
 800625e:	da04      	bge.n	800626a <__ulp+0x3e>
 8006260:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006264:	fa41 f300 	asr.w	r3, r1, r0
 8006268:	e7ec      	b.n	8006244 <__ulp+0x18>
 800626a:	f1a0 0114 	sub.w	r1, r0, #20
 800626e:	291e      	cmp	r1, #30
 8006270:	bfda      	itte	le
 8006272:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006276:	fa20 f101 	lsrle.w	r1, r0, r1
 800627a:	2101      	movgt	r1, #1
 800627c:	460a      	mov	r2, r1
 800627e:	e7e1      	b.n	8006244 <__ulp+0x18>
 8006280:	7ff00000 	.word	0x7ff00000

08006284 <__b2d>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	6905      	ldr	r5, [r0, #16]
 8006288:	f100 0714 	add.w	r7, r0, #20
 800628c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006290:	1f2e      	subs	r6, r5, #4
 8006292:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006296:	4620      	mov	r0, r4
 8006298:	f7ff fd48 	bl	8005d2c <__hi0bits>
 800629c:	f1c0 0320 	rsb	r3, r0, #32
 80062a0:	280a      	cmp	r0, #10
 80062a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006320 <__b2d+0x9c>
 80062a6:	600b      	str	r3, [r1, #0]
 80062a8:	dc14      	bgt.n	80062d4 <__b2d+0x50>
 80062aa:	f1c0 0e0b 	rsb	lr, r0, #11
 80062ae:	fa24 f10e 	lsr.w	r1, r4, lr
 80062b2:	42b7      	cmp	r7, r6
 80062b4:	ea41 030c 	orr.w	r3, r1, ip
 80062b8:	bf34      	ite	cc
 80062ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80062be:	2100      	movcs	r1, #0
 80062c0:	3015      	adds	r0, #21
 80062c2:	fa04 f000 	lsl.w	r0, r4, r0
 80062c6:	fa21 f10e 	lsr.w	r1, r1, lr
 80062ca:	ea40 0201 	orr.w	r2, r0, r1
 80062ce:	ec43 2b10 	vmov	d0, r2, r3
 80062d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062d4:	42b7      	cmp	r7, r6
 80062d6:	bf3a      	itte	cc
 80062d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80062dc:	f1a5 0608 	subcc.w	r6, r5, #8
 80062e0:	2100      	movcs	r1, #0
 80062e2:	380b      	subs	r0, #11
 80062e4:	d017      	beq.n	8006316 <__b2d+0x92>
 80062e6:	f1c0 0c20 	rsb	ip, r0, #32
 80062ea:	fa04 f500 	lsl.w	r5, r4, r0
 80062ee:	42be      	cmp	r6, r7
 80062f0:	fa21 f40c 	lsr.w	r4, r1, ip
 80062f4:	ea45 0504 	orr.w	r5, r5, r4
 80062f8:	bf8c      	ite	hi
 80062fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80062fe:	2400      	movls	r4, #0
 8006300:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006304:	fa01 f000 	lsl.w	r0, r1, r0
 8006308:	fa24 f40c 	lsr.w	r4, r4, ip
 800630c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006310:	ea40 0204 	orr.w	r2, r0, r4
 8006314:	e7db      	b.n	80062ce <__b2d+0x4a>
 8006316:	ea44 030c 	orr.w	r3, r4, ip
 800631a:	460a      	mov	r2, r1
 800631c:	e7d7      	b.n	80062ce <__b2d+0x4a>
 800631e:	bf00      	nop
 8006320:	3ff00000 	.word	0x3ff00000

08006324 <__d2b>:
 8006324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006328:	4689      	mov	r9, r1
 800632a:	2101      	movs	r1, #1
 800632c:	ec57 6b10 	vmov	r6, r7, d0
 8006330:	4690      	mov	r8, r2
 8006332:	f7ff fc09 	bl	8005b48 <_Balloc>
 8006336:	4604      	mov	r4, r0
 8006338:	b930      	cbnz	r0, 8006348 <__d2b+0x24>
 800633a:	4602      	mov	r2, r0
 800633c:	4b25      	ldr	r3, [pc, #148]	; (80063d4 <__d2b+0xb0>)
 800633e:	4826      	ldr	r0, [pc, #152]	; (80063d8 <__d2b+0xb4>)
 8006340:	f240 310a 	movw	r1, #778	; 0x30a
 8006344:	f000 ff6c 	bl	8007220 <__assert_func>
 8006348:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800634c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006350:	bb35      	cbnz	r5, 80063a0 <__d2b+0x7c>
 8006352:	2e00      	cmp	r6, #0
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	d028      	beq.n	80063aa <__d2b+0x86>
 8006358:	4668      	mov	r0, sp
 800635a:	9600      	str	r6, [sp, #0]
 800635c:	f7ff fd06 	bl	8005d6c <__lo0bits>
 8006360:	9900      	ldr	r1, [sp, #0]
 8006362:	b300      	cbz	r0, 80063a6 <__d2b+0x82>
 8006364:	9a01      	ldr	r2, [sp, #4]
 8006366:	f1c0 0320 	rsb	r3, r0, #32
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	430b      	orrs	r3, r1
 8006370:	40c2      	lsrs	r2, r0
 8006372:	6163      	str	r3, [r4, #20]
 8006374:	9201      	str	r2, [sp, #4]
 8006376:	9b01      	ldr	r3, [sp, #4]
 8006378:	61a3      	str	r3, [r4, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf14      	ite	ne
 800637e:	2202      	movne	r2, #2
 8006380:	2201      	moveq	r2, #1
 8006382:	6122      	str	r2, [r4, #16]
 8006384:	b1d5      	cbz	r5, 80063bc <__d2b+0x98>
 8006386:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800638a:	4405      	add	r5, r0
 800638c:	f8c9 5000 	str.w	r5, [r9]
 8006390:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006394:	f8c8 0000 	str.w	r0, [r8]
 8006398:	4620      	mov	r0, r4
 800639a:	b003      	add	sp, #12
 800639c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063a4:	e7d5      	b.n	8006352 <__d2b+0x2e>
 80063a6:	6161      	str	r1, [r4, #20]
 80063a8:	e7e5      	b.n	8006376 <__d2b+0x52>
 80063aa:	a801      	add	r0, sp, #4
 80063ac:	f7ff fcde 	bl	8005d6c <__lo0bits>
 80063b0:	9b01      	ldr	r3, [sp, #4]
 80063b2:	6163      	str	r3, [r4, #20]
 80063b4:	2201      	movs	r2, #1
 80063b6:	6122      	str	r2, [r4, #16]
 80063b8:	3020      	adds	r0, #32
 80063ba:	e7e3      	b.n	8006384 <__d2b+0x60>
 80063bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80063c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063c4:	f8c9 0000 	str.w	r0, [r9]
 80063c8:	6918      	ldr	r0, [r3, #16]
 80063ca:	f7ff fcaf 	bl	8005d2c <__hi0bits>
 80063ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80063d2:	e7df      	b.n	8006394 <__d2b+0x70>
 80063d4:	08008040 	.word	0x08008040
 80063d8:	080080cc 	.word	0x080080cc

080063dc <__ratio>:
 80063dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e0:	4688      	mov	r8, r1
 80063e2:	4669      	mov	r1, sp
 80063e4:	4681      	mov	r9, r0
 80063e6:	f7ff ff4d 	bl	8006284 <__b2d>
 80063ea:	a901      	add	r1, sp, #4
 80063ec:	4640      	mov	r0, r8
 80063ee:	ec55 4b10 	vmov	r4, r5, d0
 80063f2:	f7ff ff47 	bl	8006284 <__b2d>
 80063f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80063fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80063fe:	eba3 0c02 	sub.w	ip, r3, r2
 8006402:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006406:	1a9b      	subs	r3, r3, r2
 8006408:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800640c:	ec51 0b10 	vmov	r0, r1, d0
 8006410:	2b00      	cmp	r3, #0
 8006412:	bfd6      	itet	le
 8006414:	460a      	movle	r2, r1
 8006416:	462a      	movgt	r2, r5
 8006418:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800641c:	468b      	mov	fp, r1
 800641e:	462f      	mov	r7, r5
 8006420:	bfd4      	ite	le
 8006422:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006426:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800642a:	4620      	mov	r0, r4
 800642c:	ee10 2a10 	vmov	r2, s0
 8006430:	465b      	mov	r3, fp
 8006432:	4639      	mov	r1, r7
 8006434:	f7fa fa22 	bl	800087c <__aeabi_ddiv>
 8006438:	ec41 0b10 	vmov	d0, r0, r1
 800643c:	b003      	add	sp, #12
 800643e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006442 <__copybits>:
 8006442:	3901      	subs	r1, #1
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	1149      	asrs	r1, r1, #5
 8006448:	6914      	ldr	r4, [r2, #16]
 800644a:	3101      	adds	r1, #1
 800644c:	f102 0314 	add.w	r3, r2, #20
 8006450:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006454:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006458:	1f05      	subs	r5, r0, #4
 800645a:	42a3      	cmp	r3, r4
 800645c:	d30c      	bcc.n	8006478 <__copybits+0x36>
 800645e:	1aa3      	subs	r3, r4, r2
 8006460:	3b11      	subs	r3, #17
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	3211      	adds	r2, #17
 8006468:	42a2      	cmp	r2, r4
 800646a:	bf88      	it	hi
 800646c:	2300      	movhi	r3, #0
 800646e:	4418      	add	r0, r3
 8006470:	2300      	movs	r3, #0
 8006472:	4288      	cmp	r0, r1
 8006474:	d305      	bcc.n	8006482 <__copybits+0x40>
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	f853 6b04 	ldr.w	r6, [r3], #4
 800647c:	f845 6f04 	str.w	r6, [r5, #4]!
 8006480:	e7eb      	b.n	800645a <__copybits+0x18>
 8006482:	f840 3b04 	str.w	r3, [r0], #4
 8006486:	e7f4      	b.n	8006472 <__copybits+0x30>

08006488 <__any_on>:
 8006488:	f100 0214 	add.w	r2, r0, #20
 800648c:	6900      	ldr	r0, [r0, #16]
 800648e:	114b      	asrs	r3, r1, #5
 8006490:	4298      	cmp	r0, r3
 8006492:	b510      	push	{r4, lr}
 8006494:	db11      	blt.n	80064ba <__any_on+0x32>
 8006496:	dd0a      	ble.n	80064ae <__any_on+0x26>
 8006498:	f011 011f 	ands.w	r1, r1, #31
 800649c:	d007      	beq.n	80064ae <__any_on+0x26>
 800649e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80064a2:	fa24 f001 	lsr.w	r0, r4, r1
 80064a6:	fa00 f101 	lsl.w	r1, r0, r1
 80064aa:	428c      	cmp	r4, r1
 80064ac:	d10b      	bne.n	80064c6 <__any_on+0x3e>
 80064ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d803      	bhi.n	80064be <__any_on+0x36>
 80064b6:	2000      	movs	r0, #0
 80064b8:	bd10      	pop	{r4, pc}
 80064ba:	4603      	mov	r3, r0
 80064bc:	e7f7      	b.n	80064ae <__any_on+0x26>
 80064be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80064c2:	2900      	cmp	r1, #0
 80064c4:	d0f5      	beq.n	80064b2 <__any_on+0x2a>
 80064c6:	2001      	movs	r0, #1
 80064c8:	e7f6      	b.n	80064b8 <__any_on+0x30>

080064ca <_calloc_r>:
 80064ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064cc:	fba1 2402 	umull	r2, r4, r1, r2
 80064d0:	b94c      	cbnz	r4, 80064e6 <_calloc_r+0x1c>
 80064d2:	4611      	mov	r1, r2
 80064d4:	9201      	str	r2, [sp, #4]
 80064d6:	f000 f87b 	bl	80065d0 <_malloc_r>
 80064da:	9a01      	ldr	r2, [sp, #4]
 80064dc:	4605      	mov	r5, r0
 80064de:	b930      	cbnz	r0, 80064ee <_calloc_r+0x24>
 80064e0:	4628      	mov	r0, r5
 80064e2:	b003      	add	sp, #12
 80064e4:	bd30      	pop	{r4, r5, pc}
 80064e6:	220c      	movs	r2, #12
 80064e8:	6002      	str	r2, [r0, #0]
 80064ea:	2500      	movs	r5, #0
 80064ec:	e7f8      	b.n	80064e0 <_calloc_r+0x16>
 80064ee:	4621      	mov	r1, r4
 80064f0:	f7fc fb16 	bl	8002b20 <memset>
 80064f4:	e7f4      	b.n	80064e0 <_calloc_r+0x16>
	...

080064f8 <_free_r>:
 80064f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064fa:	2900      	cmp	r1, #0
 80064fc:	d044      	beq.n	8006588 <_free_r+0x90>
 80064fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006502:	9001      	str	r0, [sp, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	f1a1 0404 	sub.w	r4, r1, #4
 800650a:	bfb8      	it	lt
 800650c:	18e4      	addlt	r4, r4, r3
 800650e:	f001 f88b 	bl	8007628 <__malloc_lock>
 8006512:	4a1e      	ldr	r2, [pc, #120]	; (800658c <_free_r+0x94>)
 8006514:	9801      	ldr	r0, [sp, #4]
 8006516:	6813      	ldr	r3, [r2, #0]
 8006518:	b933      	cbnz	r3, 8006528 <_free_r+0x30>
 800651a:	6063      	str	r3, [r4, #4]
 800651c:	6014      	str	r4, [r2, #0]
 800651e:	b003      	add	sp, #12
 8006520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006524:	f001 b886 	b.w	8007634 <__malloc_unlock>
 8006528:	42a3      	cmp	r3, r4
 800652a:	d908      	bls.n	800653e <_free_r+0x46>
 800652c:	6825      	ldr	r5, [r4, #0]
 800652e:	1961      	adds	r1, r4, r5
 8006530:	428b      	cmp	r3, r1
 8006532:	bf01      	itttt	eq
 8006534:	6819      	ldreq	r1, [r3, #0]
 8006536:	685b      	ldreq	r3, [r3, #4]
 8006538:	1949      	addeq	r1, r1, r5
 800653a:	6021      	streq	r1, [r4, #0]
 800653c:	e7ed      	b.n	800651a <_free_r+0x22>
 800653e:	461a      	mov	r2, r3
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	b10b      	cbz	r3, 8006548 <_free_r+0x50>
 8006544:	42a3      	cmp	r3, r4
 8006546:	d9fa      	bls.n	800653e <_free_r+0x46>
 8006548:	6811      	ldr	r1, [r2, #0]
 800654a:	1855      	adds	r5, r2, r1
 800654c:	42a5      	cmp	r5, r4
 800654e:	d10b      	bne.n	8006568 <_free_r+0x70>
 8006550:	6824      	ldr	r4, [r4, #0]
 8006552:	4421      	add	r1, r4
 8006554:	1854      	adds	r4, r2, r1
 8006556:	42a3      	cmp	r3, r4
 8006558:	6011      	str	r1, [r2, #0]
 800655a:	d1e0      	bne.n	800651e <_free_r+0x26>
 800655c:	681c      	ldr	r4, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	6053      	str	r3, [r2, #4]
 8006562:	4421      	add	r1, r4
 8006564:	6011      	str	r1, [r2, #0]
 8006566:	e7da      	b.n	800651e <_free_r+0x26>
 8006568:	d902      	bls.n	8006570 <_free_r+0x78>
 800656a:	230c      	movs	r3, #12
 800656c:	6003      	str	r3, [r0, #0]
 800656e:	e7d6      	b.n	800651e <_free_r+0x26>
 8006570:	6825      	ldr	r5, [r4, #0]
 8006572:	1961      	adds	r1, r4, r5
 8006574:	428b      	cmp	r3, r1
 8006576:	bf04      	itt	eq
 8006578:	6819      	ldreq	r1, [r3, #0]
 800657a:	685b      	ldreq	r3, [r3, #4]
 800657c:	6063      	str	r3, [r4, #4]
 800657e:	bf04      	itt	eq
 8006580:	1949      	addeq	r1, r1, r5
 8006582:	6021      	streq	r1, [r4, #0]
 8006584:	6054      	str	r4, [r2, #4]
 8006586:	e7ca      	b.n	800651e <_free_r+0x26>
 8006588:	b003      	add	sp, #12
 800658a:	bd30      	pop	{r4, r5, pc}
 800658c:	20000b00 	.word	0x20000b00

08006590 <sbrk_aligned>:
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	4e0e      	ldr	r6, [pc, #56]	; (80065cc <sbrk_aligned+0x3c>)
 8006594:	460c      	mov	r4, r1
 8006596:	6831      	ldr	r1, [r6, #0]
 8006598:	4605      	mov	r5, r0
 800659a:	b911      	cbnz	r1, 80065a2 <sbrk_aligned+0x12>
 800659c:	f000 fd28 	bl	8006ff0 <_sbrk_r>
 80065a0:	6030      	str	r0, [r6, #0]
 80065a2:	4621      	mov	r1, r4
 80065a4:	4628      	mov	r0, r5
 80065a6:	f000 fd23 	bl	8006ff0 <_sbrk_r>
 80065aa:	1c43      	adds	r3, r0, #1
 80065ac:	d00a      	beq.n	80065c4 <sbrk_aligned+0x34>
 80065ae:	1cc4      	adds	r4, r0, #3
 80065b0:	f024 0403 	bic.w	r4, r4, #3
 80065b4:	42a0      	cmp	r0, r4
 80065b6:	d007      	beq.n	80065c8 <sbrk_aligned+0x38>
 80065b8:	1a21      	subs	r1, r4, r0
 80065ba:	4628      	mov	r0, r5
 80065bc:	f000 fd18 	bl	8006ff0 <_sbrk_r>
 80065c0:	3001      	adds	r0, #1
 80065c2:	d101      	bne.n	80065c8 <sbrk_aligned+0x38>
 80065c4:	f04f 34ff 	mov.w	r4, #4294967295
 80065c8:	4620      	mov	r0, r4
 80065ca:	bd70      	pop	{r4, r5, r6, pc}
 80065cc:	20000b04 	.word	0x20000b04

080065d0 <_malloc_r>:
 80065d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d4:	1ccd      	adds	r5, r1, #3
 80065d6:	f025 0503 	bic.w	r5, r5, #3
 80065da:	3508      	adds	r5, #8
 80065dc:	2d0c      	cmp	r5, #12
 80065de:	bf38      	it	cc
 80065e0:	250c      	movcc	r5, #12
 80065e2:	2d00      	cmp	r5, #0
 80065e4:	4607      	mov	r7, r0
 80065e6:	db01      	blt.n	80065ec <_malloc_r+0x1c>
 80065e8:	42a9      	cmp	r1, r5
 80065ea:	d905      	bls.n	80065f8 <_malloc_r+0x28>
 80065ec:	230c      	movs	r3, #12
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	2600      	movs	r6, #0
 80065f2:	4630      	mov	r0, r6
 80065f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f8:	4e2e      	ldr	r6, [pc, #184]	; (80066b4 <_malloc_r+0xe4>)
 80065fa:	f001 f815 	bl	8007628 <__malloc_lock>
 80065fe:	6833      	ldr	r3, [r6, #0]
 8006600:	461c      	mov	r4, r3
 8006602:	bb34      	cbnz	r4, 8006652 <_malloc_r+0x82>
 8006604:	4629      	mov	r1, r5
 8006606:	4638      	mov	r0, r7
 8006608:	f7ff ffc2 	bl	8006590 <sbrk_aligned>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	4604      	mov	r4, r0
 8006610:	d14d      	bne.n	80066ae <_malloc_r+0xde>
 8006612:	6834      	ldr	r4, [r6, #0]
 8006614:	4626      	mov	r6, r4
 8006616:	2e00      	cmp	r6, #0
 8006618:	d140      	bne.n	800669c <_malloc_r+0xcc>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	4631      	mov	r1, r6
 800661e:	4638      	mov	r0, r7
 8006620:	eb04 0803 	add.w	r8, r4, r3
 8006624:	f000 fce4 	bl	8006ff0 <_sbrk_r>
 8006628:	4580      	cmp	r8, r0
 800662a:	d13a      	bne.n	80066a2 <_malloc_r+0xd2>
 800662c:	6821      	ldr	r1, [r4, #0]
 800662e:	3503      	adds	r5, #3
 8006630:	1a6d      	subs	r5, r5, r1
 8006632:	f025 0503 	bic.w	r5, r5, #3
 8006636:	3508      	adds	r5, #8
 8006638:	2d0c      	cmp	r5, #12
 800663a:	bf38      	it	cc
 800663c:	250c      	movcc	r5, #12
 800663e:	4629      	mov	r1, r5
 8006640:	4638      	mov	r0, r7
 8006642:	f7ff ffa5 	bl	8006590 <sbrk_aligned>
 8006646:	3001      	adds	r0, #1
 8006648:	d02b      	beq.n	80066a2 <_malloc_r+0xd2>
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	442b      	add	r3, r5
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	e00e      	b.n	8006670 <_malloc_r+0xa0>
 8006652:	6822      	ldr	r2, [r4, #0]
 8006654:	1b52      	subs	r2, r2, r5
 8006656:	d41e      	bmi.n	8006696 <_malloc_r+0xc6>
 8006658:	2a0b      	cmp	r2, #11
 800665a:	d916      	bls.n	800668a <_malloc_r+0xba>
 800665c:	1961      	adds	r1, r4, r5
 800665e:	42a3      	cmp	r3, r4
 8006660:	6025      	str	r5, [r4, #0]
 8006662:	bf18      	it	ne
 8006664:	6059      	strne	r1, [r3, #4]
 8006666:	6863      	ldr	r3, [r4, #4]
 8006668:	bf08      	it	eq
 800666a:	6031      	streq	r1, [r6, #0]
 800666c:	5162      	str	r2, [r4, r5]
 800666e:	604b      	str	r3, [r1, #4]
 8006670:	4638      	mov	r0, r7
 8006672:	f104 060b 	add.w	r6, r4, #11
 8006676:	f000 ffdd 	bl	8007634 <__malloc_unlock>
 800667a:	f026 0607 	bic.w	r6, r6, #7
 800667e:	1d23      	adds	r3, r4, #4
 8006680:	1af2      	subs	r2, r6, r3
 8006682:	d0b6      	beq.n	80065f2 <_malloc_r+0x22>
 8006684:	1b9b      	subs	r3, r3, r6
 8006686:	50a3      	str	r3, [r4, r2]
 8006688:	e7b3      	b.n	80065f2 <_malloc_r+0x22>
 800668a:	6862      	ldr	r2, [r4, #4]
 800668c:	42a3      	cmp	r3, r4
 800668e:	bf0c      	ite	eq
 8006690:	6032      	streq	r2, [r6, #0]
 8006692:	605a      	strne	r2, [r3, #4]
 8006694:	e7ec      	b.n	8006670 <_malloc_r+0xa0>
 8006696:	4623      	mov	r3, r4
 8006698:	6864      	ldr	r4, [r4, #4]
 800669a:	e7b2      	b.n	8006602 <_malloc_r+0x32>
 800669c:	4634      	mov	r4, r6
 800669e:	6876      	ldr	r6, [r6, #4]
 80066a0:	e7b9      	b.n	8006616 <_malloc_r+0x46>
 80066a2:	230c      	movs	r3, #12
 80066a4:	603b      	str	r3, [r7, #0]
 80066a6:	4638      	mov	r0, r7
 80066a8:	f000 ffc4 	bl	8007634 <__malloc_unlock>
 80066ac:	e7a1      	b.n	80065f2 <_malloc_r+0x22>
 80066ae:	6025      	str	r5, [r4, #0]
 80066b0:	e7de      	b.n	8006670 <_malloc_r+0xa0>
 80066b2:	bf00      	nop
 80066b4:	20000b00 	.word	0x20000b00

080066b8 <__ssputs_r>:
 80066b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066bc:	688e      	ldr	r6, [r1, #8]
 80066be:	429e      	cmp	r6, r3
 80066c0:	4682      	mov	sl, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	4690      	mov	r8, r2
 80066c6:	461f      	mov	r7, r3
 80066c8:	d838      	bhi.n	800673c <__ssputs_r+0x84>
 80066ca:	898a      	ldrh	r2, [r1, #12]
 80066cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066d0:	d032      	beq.n	8006738 <__ssputs_r+0x80>
 80066d2:	6825      	ldr	r5, [r4, #0]
 80066d4:	6909      	ldr	r1, [r1, #16]
 80066d6:	eba5 0901 	sub.w	r9, r5, r1
 80066da:	6965      	ldr	r5, [r4, #20]
 80066dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066e4:	3301      	adds	r3, #1
 80066e6:	444b      	add	r3, r9
 80066e8:	106d      	asrs	r5, r5, #1
 80066ea:	429d      	cmp	r5, r3
 80066ec:	bf38      	it	cc
 80066ee:	461d      	movcc	r5, r3
 80066f0:	0553      	lsls	r3, r2, #21
 80066f2:	d531      	bpl.n	8006758 <__ssputs_r+0xa0>
 80066f4:	4629      	mov	r1, r5
 80066f6:	f7ff ff6b 	bl	80065d0 <_malloc_r>
 80066fa:	4606      	mov	r6, r0
 80066fc:	b950      	cbnz	r0, 8006714 <__ssputs_r+0x5c>
 80066fe:	230c      	movs	r3, #12
 8006700:	f8ca 3000 	str.w	r3, [sl]
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800670a:	81a3      	strh	r3, [r4, #12]
 800670c:	f04f 30ff 	mov.w	r0, #4294967295
 8006710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006714:	6921      	ldr	r1, [r4, #16]
 8006716:	464a      	mov	r2, r9
 8006718:	f7ff fa08 	bl	8005b2c <memcpy>
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006726:	81a3      	strh	r3, [r4, #12]
 8006728:	6126      	str	r6, [r4, #16]
 800672a:	6165      	str	r5, [r4, #20]
 800672c:	444e      	add	r6, r9
 800672e:	eba5 0509 	sub.w	r5, r5, r9
 8006732:	6026      	str	r6, [r4, #0]
 8006734:	60a5      	str	r5, [r4, #8]
 8006736:	463e      	mov	r6, r7
 8006738:	42be      	cmp	r6, r7
 800673a:	d900      	bls.n	800673e <__ssputs_r+0x86>
 800673c:	463e      	mov	r6, r7
 800673e:	6820      	ldr	r0, [r4, #0]
 8006740:	4632      	mov	r2, r6
 8006742:	4641      	mov	r1, r8
 8006744:	f000 ff56 	bl	80075f4 <memmove>
 8006748:	68a3      	ldr	r3, [r4, #8]
 800674a:	1b9b      	subs	r3, r3, r6
 800674c:	60a3      	str	r3, [r4, #8]
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	4433      	add	r3, r6
 8006752:	6023      	str	r3, [r4, #0]
 8006754:	2000      	movs	r0, #0
 8006756:	e7db      	b.n	8006710 <__ssputs_r+0x58>
 8006758:	462a      	mov	r2, r5
 800675a:	f000 ff71 	bl	8007640 <_realloc_r>
 800675e:	4606      	mov	r6, r0
 8006760:	2800      	cmp	r0, #0
 8006762:	d1e1      	bne.n	8006728 <__ssputs_r+0x70>
 8006764:	6921      	ldr	r1, [r4, #16]
 8006766:	4650      	mov	r0, sl
 8006768:	f7ff fec6 	bl	80064f8 <_free_r>
 800676c:	e7c7      	b.n	80066fe <__ssputs_r+0x46>
	...

08006770 <_svfiprintf_r>:
 8006770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	4698      	mov	r8, r3
 8006776:	898b      	ldrh	r3, [r1, #12]
 8006778:	061b      	lsls	r3, r3, #24
 800677a:	b09d      	sub	sp, #116	; 0x74
 800677c:	4607      	mov	r7, r0
 800677e:	460d      	mov	r5, r1
 8006780:	4614      	mov	r4, r2
 8006782:	d50e      	bpl.n	80067a2 <_svfiprintf_r+0x32>
 8006784:	690b      	ldr	r3, [r1, #16]
 8006786:	b963      	cbnz	r3, 80067a2 <_svfiprintf_r+0x32>
 8006788:	2140      	movs	r1, #64	; 0x40
 800678a:	f7ff ff21 	bl	80065d0 <_malloc_r>
 800678e:	6028      	str	r0, [r5, #0]
 8006790:	6128      	str	r0, [r5, #16]
 8006792:	b920      	cbnz	r0, 800679e <_svfiprintf_r+0x2e>
 8006794:	230c      	movs	r3, #12
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	f04f 30ff 	mov.w	r0, #4294967295
 800679c:	e0d1      	b.n	8006942 <_svfiprintf_r+0x1d2>
 800679e:	2340      	movs	r3, #64	; 0x40
 80067a0:	616b      	str	r3, [r5, #20]
 80067a2:	2300      	movs	r3, #0
 80067a4:	9309      	str	r3, [sp, #36]	; 0x24
 80067a6:	2320      	movs	r3, #32
 80067a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80067b0:	2330      	movs	r3, #48	; 0x30
 80067b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800695c <_svfiprintf_r+0x1ec>
 80067b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067ba:	f04f 0901 	mov.w	r9, #1
 80067be:	4623      	mov	r3, r4
 80067c0:	469a      	mov	sl, r3
 80067c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067c6:	b10a      	cbz	r2, 80067cc <_svfiprintf_r+0x5c>
 80067c8:	2a25      	cmp	r2, #37	; 0x25
 80067ca:	d1f9      	bne.n	80067c0 <_svfiprintf_r+0x50>
 80067cc:	ebba 0b04 	subs.w	fp, sl, r4
 80067d0:	d00b      	beq.n	80067ea <_svfiprintf_r+0x7a>
 80067d2:	465b      	mov	r3, fp
 80067d4:	4622      	mov	r2, r4
 80067d6:	4629      	mov	r1, r5
 80067d8:	4638      	mov	r0, r7
 80067da:	f7ff ff6d 	bl	80066b8 <__ssputs_r>
 80067de:	3001      	adds	r0, #1
 80067e0:	f000 80aa 	beq.w	8006938 <_svfiprintf_r+0x1c8>
 80067e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067e6:	445a      	add	r2, fp
 80067e8:	9209      	str	r2, [sp, #36]	; 0x24
 80067ea:	f89a 3000 	ldrb.w	r3, [sl]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 80a2 	beq.w	8006938 <_svfiprintf_r+0x1c8>
 80067f4:	2300      	movs	r3, #0
 80067f6:	f04f 32ff 	mov.w	r2, #4294967295
 80067fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067fe:	f10a 0a01 	add.w	sl, sl, #1
 8006802:	9304      	str	r3, [sp, #16]
 8006804:	9307      	str	r3, [sp, #28]
 8006806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800680a:	931a      	str	r3, [sp, #104]	; 0x68
 800680c:	4654      	mov	r4, sl
 800680e:	2205      	movs	r2, #5
 8006810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006814:	4851      	ldr	r0, [pc, #324]	; (800695c <_svfiprintf_r+0x1ec>)
 8006816:	f7f9 fcfb 	bl	8000210 <memchr>
 800681a:	9a04      	ldr	r2, [sp, #16]
 800681c:	b9d8      	cbnz	r0, 8006856 <_svfiprintf_r+0xe6>
 800681e:	06d0      	lsls	r0, r2, #27
 8006820:	bf44      	itt	mi
 8006822:	2320      	movmi	r3, #32
 8006824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006828:	0711      	lsls	r1, r2, #28
 800682a:	bf44      	itt	mi
 800682c:	232b      	movmi	r3, #43	; 0x2b
 800682e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006832:	f89a 3000 	ldrb.w	r3, [sl]
 8006836:	2b2a      	cmp	r3, #42	; 0x2a
 8006838:	d015      	beq.n	8006866 <_svfiprintf_r+0xf6>
 800683a:	9a07      	ldr	r2, [sp, #28]
 800683c:	4654      	mov	r4, sl
 800683e:	2000      	movs	r0, #0
 8006840:	f04f 0c0a 	mov.w	ip, #10
 8006844:	4621      	mov	r1, r4
 8006846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800684a:	3b30      	subs	r3, #48	; 0x30
 800684c:	2b09      	cmp	r3, #9
 800684e:	d94e      	bls.n	80068ee <_svfiprintf_r+0x17e>
 8006850:	b1b0      	cbz	r0, 8006880 <_svfiprintf_r+0x110>
 8006852:	9207      	str	r2, [sp, #28]
 8006854:	e014      	b.n	8006880 <_svfiprintf_r+0x110>
 8006856:	eba0 0308 	sub.w	r3, r0, r8
 800685a:	fa09 f303 	lsl.w	r3, r9, r3
 800685e:	4313      	orrs	r3, r2
 8006860:	9304      	str	r3, [sp, #16]
 8006862:	46a2      	mov	sl, r4
 8006864:	e7d2      	b.n	800680c <_svfiprintf_r+0x9c>
 8006866:	9b03      	ldr	r3, [sp, #12]
 8006868:	1d19      	adds	r1, r3, #4
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	9103      	str	r1, [sp, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	bfbb      	ittet	lt
 8006872:	425b      	neglt	r3, r3
 8006874:	f042 0202 	orrlt.w	r2, r2, #2
 8006878:	9307      	strge	r3, [sp, #28]
 800687a:	9307      	strlt	r3, [sp, #28]
 800687c:	bfb8      	it	lt
 800687e:	9204      	strlt	r2, [sp, #16]
 8006880:	7823      	ldrb	r3, [r4, #0]
 8006882:	2b2e      	cmp	r3, #46	; 0x2e
 8006884:	d10c      	bne.n	80068a0 <_svfiprintf_r+0x130>
 8006886:	7863      	ldrb	r3, [r4, #1]
 8006888:	2b2a      	cmp	r3, #42	; 0x2a
 800688a:	d135      	bne.n	80068f8 <_svfiprintf_r+0x188>
 800688c:	9b03      	ldr	r3, [sp, #12]
 800688e:	1d1a      	adds	r2, r3, #4
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	9203      	str	r2, [sp, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	bfb8      	it	lt
 8006898:	f04f 33ff 	movlt.w	r3, #4294967295
 800689c:	3402      	adds	r4, #2
 800689e:	9305      	str	r3, [sp, #20]
 80068a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800696c <_svfiprintf_r+0x1fc>
 80068a4:	7821      	ldrb	r1, [r4, #0]
 80068a6:	2203      	movs	r2, #3
 80068a8:	4650      	mov	r0, sl
 80068aa:	f7f9 fcb1 	bl	8000210 <memchr>
 80068ae:	b140      	cbz	r0, 80068c2 <_svfiprintf_r+0x152>
 80068b0:	2340      	movs	r3, #64	; 0x40
 80068b2:	eba0 000a 	sub.w	r0, r0, sl
 80068b6:	fa03 f000 	lsl.w	r0, r3, r0
 80068ba:	9b04      	ldr	r3, [sp, #16]
 80068bc:	4303      	orrs	r3, r0
 80068be:	3401      	adds	r4, #1
 80068c0:	9304      	str	r3, [sp, #16]
 80068c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c6:	4826      	ldr	r0, [pc, #152]	; (8006960 <_svfiprintf_r+0x1f0>)
 80068c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068cc:	2206      	movs	r2, #6
 80068ce:	f7f9 fc9f 	bl	8000210 <memchr>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d038      	beq.n	8006948 <_svfiprintf_r+0x1d8>
 80068d6:	4b23      	ldr	r3, [pc, #140]	; (8006964 <_svfiprintf_r+0x1f4>)
 80068d8:	bb1b      	cbnz	r3, 8006922 <_svfiprintf_r+0x1b2>
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	3307      	adds	r3, #7
 80068de:	f023 0307 	bic.w	r3, r3, #7
 80068e2:	3308      	adds	r3, #8
 80068e4:	9303      	str	r3, [sp, #12]
 80068e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e8:	4433      	add	r3, r6
 80068ea:	9309      	str	r3, [sp, #36]	; 0x24
 80068ec:	e767      	b.n	80067be <_svfiprintf_r+0x4e>
 80068ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80068f2:	460c      	mov	r4, r1
 80068f4:	2001      	movs	r0, #1
 80068f6:	e7a5      	b.n	8006844 <_svfiprintf_r+0xd4>
 80068f8:	2300      	movs	r3, #0
 80068fa:	3401      	adds	r4, #1
 80068fc:	9305      	str	r3, [sp, #20]
 80068fe:	4619      	mov	r1, r3
 8006900:	f04f 0c0a 	mov.w	ip, #10
 8006904:	4620      	mov	r0, r4
 8006906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800690a:	3a30      	subs	r2, #48	; 0x30
 800690c:	2a09      	cmp	r2, #9
 800690e:	d903      	bls.n	8006918 <_svfiprintf_r+0x1a8>
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0c5      	beq.n	80068a0 <_svfiprintf_r+0x130>
 8006914:	9105      	str	r1, [sp, #20]
 8006916:	e7c3      	b.n	80068a0 <_svfiprintf_r+0x130>
 8006918:	fb0c 2101 	mla	r1, ip, r1, r2
 800691c:	4604      	mov	r4, r0
 800691e:	2301      	movs	r3, #1
 8006920:	e7f0      	b.n	8006904 <_svfiprintf_r+0x194>
 8006922:	ab03      	add	r3, sp, #12
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	462a      	mov	r2, r5
 8006928:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <_svfiprintf_r+0x1f8>)
 800692a:	a904      	add	r1, sp, #16
 800692c:	4638      	mov	r0, r7
 800692e:	f7fc f99f 	bl	8002c70 <_printf_float>
 8006932:	1c42      	adds	r2, r0, #1
 8006934:	4606      	mov	r6, r0
 8006936:	d1d6      	bne.n	80068e6 <_svfiprintf_r+0x176>
 8006938:	89ab      	ldrh	r3, [r5, #12]
 800693a:	065b      	lsls	r3, r3, #25
 800693c:	f53f af2c 	bmi.w	8006798 <_svfiprintf_r+0x28>
 8006940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006942:	b01d      	add	sp, #116	; 0x74
 8006944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006948:	ab03      	add	r3, sp, #12
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	462a      	mov	r2, r5
 800694e:	4b06      	ldr	r3, [pc, #24]	; (8006968 <_svfiprintf_r+0x1f8>)
 8006950:	a904      	add	r1, sp, #16
 8006952:	4638      	mov	r0, r7
 8006954:	f7fc fc30 	bl	80031b8 <_printf_i>
 8006958:	e7eb      	b.n	8006932 <_svfiprintf_r+0x1c2>
 800695a:	bf00      	nop
 800695c:	08008224 	.word	0x08008224
 8006960:	0800822e 	.word	0x0800822e
 8006964:	08002c71 	.word	0x08002c71
 8006968:	080066b9 	.word	0x080066b9
 800696c:	0800822a 	.word	0x0800822a

08006970 <_sungetc_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	1c4b      	adds	r3, r1, #1
 8006974:	4614      	mov	r4, r2
 8006976:	d103      	bne.n	8006980 <_sungetc_r+0x10>
 8006978:	f04f 35ff 	mov.w	r5, #4294967295
 800697c:	4628      	mov	r0, r5
 800697e:	bd38      	pop	{r3, r4, r5, pc}
 8006980:	8993      	ldrh	r3, [r2, #12]
 8006982:	f023 0320 	bic.w	r3, r3, #32
 8006986:	8193      	strh	r3, [r2, #12]
 8006988:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800698a:	6852      	ldr	r2, [r2, #4]
 800698c:	b2cd      	uxtb	r5, r1
 800698e:	b18b      	cbz	r3, 80069b4 <_sungetc_r+0x44>
 8006990:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006992:	4293      	cmp	r3, r2
 8006994:	dd08      	ble.n	80069a8 <_sungetc_r+0x38>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	1e5a      	subs	r2, r3, #1
 800699a:	6022      	str	r2, [r4, #0]
 800699c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80069a0:	6863      	ldr	r3, [r4, #4]
 80069a2:	3301      	adds	r3, #1
 80069a4:	6063      	str	r3, [r4, #4]
 80069a6:	e7e9      	b.n	800697c <_sungetc_r+0xc>
 80069a8:	4621      	mov	r1, r4
 80069aa:	f000 fbf1 	bl	8007190 <__submore>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d0f1      	beq.n	8006996 <_sungetc_r+0x26>
 80069b2:	e7e1      	b.n	8006978 <_sungetc_r+0x8>
 80069b4:	6921      	ldr	r1, [r4, #16]
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	b151      	cbz	r1, 80069d0 <_sungetc_r+0x60>
 80069ba:	4299      	cmp	r1, r3
 80069bc:	d208      	bcs.n	80069d0 <_sungetc_r+0x60>
 80069be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80069c2:	42a9      	cmp	r1, r5
 80069c4:	d104      	bne.n	80069d0 <_sungetc_r+0x60>
 80069c6:	3b01      	subs	r3, #1
 80069c8:	3201      	adds	r2, #1
 80069ca:	6023      	str	r3, [r4, #0]
 80069cc:	6062      	str	r2, [r4, #4]
 80069ce:	e7d5      	b.n	800697c <_sungetc_r+0xc>
 80069d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80069d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069d8:	6363      	str	r3, [r4, #52]	; 0x34
 80069da:	2303      	movs	r3, #3
 80069dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80069de:	4623      	mov	r3, r4
 80069e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	2301      	movs	r3, #1
 80069e8:	e7dc      	b.n	80069a4 <_sungetc_r+0x34>

080069ea <__ssrefill_r>:
 80069ea:	b510      	push	{r4, lr}
 80069ec:	460c      	mov	r4, r1
 80069ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80069f0:	b169      	cbz	r1, 8006a0e <__ssrefill_r+0x24>
 80069f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069f6:	4299      	cmp	r1, r3
 80069f8:	d001      	beq.n	80069fe <__ssrefill_r+0x14>
 80069fa:	f7ff fd7d 	bl	80064f8 <_free_r>
 80069fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a00:	6063      	str	r3, [r4, #4]
 8006a02:	2000      	movs	r0, #0
 8006a04:	6360      	str	r0, [r4, #52]	; 0x34
 8006a06:	b113      	cbz	r3, 8006a0e <__ssrefill_r+0x24>
 8006a08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a0a:	6023      	str	r3, [r4, #0]
 8006a0c:	bd10      	pop	{r4, pc}
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	2300      	movs	r3, #0
 8006a14:	6063      	str	r3, [r4, #4]
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	f043 0320 	orr.w	r3, r3, #32
 8006a1c:	81a3      	strh	r3, [r4, #12]
 8006a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a22:	e7f3      	b.n	8006a0c <__ssrefill_r+0x22>

08006a24 <__ssvfiscanf_r>:
 8006a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a28:	460c      	mov	r4, r1
 8006a2a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006a2e:	2100      	movs	r1, #0
 8006a30:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006a34:	49a6      	ldr	r1, [pc, #664]	; (8006cd0 <__ssvfiscanf_r+0x2ac>)
 8006a36:	91a0      	str	r1, [sp, #640]	; 0x280
 8006a38:	f10d 0804 	add.w	r8, sp, #4
 8006a3c:	49a5      	ldr	r1, [pc, #660]	; (8006cd4 <__ssvfiscanf_r+0x2b0>)
 8006a3e:	4fa6      	ldr	r7, [pc, #664]	; (8006cd8 <__ssvfiscanf_r+0x2b4>)
 8006a40:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006cdc <__ssvfiscanf_r+0x2b8>
 8006a44:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006a48:	4606      	mov	r6, r0
 8006a4a:	91a1      	str	r1, [sp, #644]	; 0x284
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	7813      	ldrb	r3, [r2, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 815a 	beq.w	8006d0a <__ssvfiscanf_r+0x2e6>
 8006a56:	5dd9      	ldrb	r1, [r3, r7]
 8006a58:	f011 0108 	ands.w	r1, r1, #8
 8006a5c:	f102 0501 	add.w	r5, r2, #1
 8006a60:	d019      	beq.n	8006a96 <__ssvfiscanf_r+0x72>
 8006a62:	6863      	ldr	r3, [r4, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dd0f      	ble.n	8006a88 <__ssvfiscanf_r+0x64>
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	781a      	ldrb	r2, [r3, #0]
 8006a6c:	5cba      	ldrb	r2, [r7, r2]
 8006a6e:	0712      	lsls	r2, r2, #28
 8006a70:	d401      	bmi.n	8006a76 <__ssvfiscanf_r+0x52>
 8006a72:	462a      	mov	r2, r5
 8006a74:	e7eb      	b.n	8006a4e <__ssvfiscanf_r+0x2a>
 8006a76:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006a78:	3201      	adds	r2, #1
 8006a7a:	9245      	str	r2, [sp, #276]	; 0x114
 8006a7c:	6862      	ldr	r2, [r4, #4]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	3a01      	subs	r2, #1
 8006a82:	6062      	str	r2, [r4, #4]
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	e7ec      	b.n	8006a62 <__ssvfiscanf_r+0x3e>
 8006a88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	4798      	blx	r3
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d0e9      	beq.n	8006a68 <__ssvfiscanf_r+0x44>
 8006a94:	e7ed      	b.n	8006a72 <__ssvfiscanf_r+0x4e>
 8006a96:	2b25      	cmp	r3, #37	; 0x25
 8006a98:	d012      	beq.n	8006ac0 <__ssvfiscanf_r+0x9c>
 8006a9a:	469a      	mov	sl, r3
 8006a9c:	6863      	ldr	r3, [r4, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f340 8091 	ble.w	8006bc6 <__ssvfiscanf_r+0x1a2>
 8006aa4:	6822      	ldr	r2, [r4, #0]
 8006aa6:	7813      	ldrb	r3, [r2, #0]
 8006aa8:	4553      	cmp	r3, sl
 8006aaa:	f040 812e 	bne.w	8006d0a <__ssvfiscanf_r+0x2e6>
 8006aae:	6863      	ldr	r3, [r4, #4]
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	6063      	str	r3, [r4, #4]
 8006ab4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006ab6:	3201      	adds	r2, #1
 8006ab8:	3301      	adds	r3, #1
 8006aba:	6022      	str	r2, [r4, #0]
 8006abc:	9345      	str	r3, [sp, #276]	; 0x114
 8006abe:	e7d8      	b.n	8006a72 <__ssvfiscanf_r+0x4e>
 8006ac0:	9141      	str	r1, [sp, #260]	; 0x104
 8006ac2:	9143      	str	r1, [sp, #268]	; 0x10c
 8006ac4:	7853      	ldrb	r3, [r2, #1]
 8006ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ac8:	bf02      	ittt	eq
 8006aca:	2310      	moveq	r3, #16
 8006acc:	1c95      	addeq	r5, r2, #2
 8006ace:	9341      	streq	r3, [sp, #260]	; 0x104
 8006ad0:	220a      	movs	r2, #10
 8006ad2:	46aa      	mov	sl, r5
 8006ad4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006ad8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006adc:	2b09      	cmp	r3, #9
 8006ade:	d91d      	bls.n	8006b1c <__ssvfiscanf_r+0xf8>
 8006ae0:	487e      	ldr	r0, [pc, #504]	; (8006cdc <__ssvfiscanf_r+0x2b8>)
 8006ae2:	2203      	movs	r2, #3
 8006ae4:	f7f9 fb94 	bl	8000210 <memchr>
 8006ae8:	b140      	cbz	r0, 8006afc <__ssvfiscanf_r+0xd8>
 8006aea:	2301      	movs	r3, #1
 8006aec:	eba0 0009 	sub.w	r0, r0, r9
 8006af0:	fa03 f000 	lsl.w	r0, r3, r0
 8006af4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006af6:	4318      	orrs	r0, r3
 8006af8:	9041      	str	r0, [sp, #260]	; 0x104
 8006afa:	4655      	mov	r5, sl
 8006afc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b00:	2b78      	cmp	r3, #120	; 0x78
 8006b02:	d806      	bhi.n	8006b12 <__ssvfiscanf_r+0xee>
 8006b04:	2b57      	cmp	r3, #87	; 0x57
 8006b06:	d810      	bhi.n	8006b2a <__ssvfiscanf_r+0x106>
 8006b08:	2b25      	cmp	r3, #37	; 0x25
 8006b0a:	d0c6      	beq.n	8006a9a <__ssvfiscanf_r+0x76>
 8006b0c:	d856      	bhi.n	8006bbc <__ssvfiscanf_r+0x198>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d064      	beq.n	8006bdc <__ssvfiscanf_r+0x1b8>
 8006b12:	2303      	movs	r3, #3
 8006b14:	9347      	str	r3, [sp, #284]	; 0x11c
 8006b16:	230a      	movs	r3, #10
 8006b18:	9342      	str	r3, [sp, #264]	; 0x108
 8006b1a:	e071      	b.n	8006c00 <__ssvfiscanf_r+0x1dc>
 8006b1c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006b1e:	fb02 1103 	mla	r1, r2, r3, r1
 8006b22:	3930      	subs	r1, #48	; 0x30
 8006b24:	9143      	str	r1, [sp, #268]	; 0x10c
 8006b26:	4655      	mov	r5, sl
 8006b28:	e7d3      	b.n	8006ad2 <__ssvfiscanf_r+0xae>
 8006b2a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006b2e:	2a20      	cmp	r2, #32
 8006b30:	d8ef      	bhi.n	8006b12 <__ssvfiscanf_r+0xee>
 8006b32:	a101      	add	r1, pc, #4	; (adr r1, 8006b38 <__ssvfiscanf_r+0x114>)
 8006b34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b38:	08006beb 	.word	0x08006beb
 8006b3c:	08006b13 	.word	0x08006b13
 8006b40:	08006b13 	.word	0x08006b13
 8006b44:	08006c49 	.word	0x08006c49
 8006b48:	08006b13 	.word	0x08006b13
 8006b4c:	08006b13 	.word	0x08006b13
 8006b50:	08006b13 	.word	0x08006b13
 8006b54:	08006b13 	.word	0x08006b13
 8006b58:	08006b13 	.word	0x08006b13
 8006b5c:	08006b13 	.word	0x08006b13
 8006b60:	08006b13 	.word	0x08006b13
 8006b64:	08006c5f 	.word	0x08006c5f
 8006b68:	08006c35 	.word	0x08006c35
 8006b6c:	08006bc3 	.word	0x08006bc3
 8006b70:	08006bc3 	.word	0x08006bc3
 8006b74:	08006bc3 	.word	0x08006bc3
 8006b78:	08006b13 	.word	0x08006b13
 8006b7c:	08006c39 	.word	0x08006c39
 8006b80:	08006b13 	.word	0x08006b13
 8006b84:	08006b13 	.word	0x08006b13
 8006b88:	08006b13 	.word	0x08006b13
 8006b8c:	08006b13 	.word	0x08006b13
 8006b90:	08006c6f 	.word	0x08006c6f
 8006b94:	08006c41 	.word	0x08006c41
 8006b98:	08006be3 	.word	0x08006be3
 8006b9c:	08006b13 	.word	0x08006b13
 8006ba0:	08006b13 	.word	0x08006b13
 8006ba4:	08006c6b 	.word	0x08006c6b
 8006ba8:	08006b13 	.word	0x08006b13
 8006bac:	08006c35 	.word	0x08006c35
 8006bb0:	08006b13 	.word	0x08006b13
 8006bb4:	08006b13 	.word	0x08006b13
 8006bb8:	08006beb 	.word	0x08006beb
 8006bbc:	3b45      	subs	r3, #69	; 0x45
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d8a7      	bhi.n	8006b12 <__ssvfiscanf_r+0xee>
 8006bc2:	2305      	movs	r3, #5
 8006bc4:	e01b      	b.n	8006bfe <__ssvfiscanf_r+0x1da>
 8006bc6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4630      	mov	r0, r6
 8006bcc:	4798      	blx	r3
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	f43f af68 	beq.w	8006aa4 <__ssvfiscanf_r+0x80>
 8006bd4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	f040 808d 	bne.w	8006cf6 <__ssvfiscanf_r+0x2d2>
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006be0:	e08f      	b.n	8006d02 <__ssvfiscanf_r+0x2de>
 8006be2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006be4:	f042 0220 	orr.w	r2, r2, #32
 8006be8:	9241      	str	r2, [sp, #260]	; 0x104
 8006bea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bf0:	9241      	str	r2, [sp, #260]	; 0x104
 8006bf2:	2210      	movs	r2, #16
 8006bf4:	2b6f      	cmp	r3, #111	; 0x6f
 8006bf6:	9242      	str	r2, [sp, #264]	; 0x108
 8006bf8:	bf34      	ite	cc
 8006bfa:	2303      	movcc	r3, #3
 8006bfc:	2304      	movcs	r3, #4
 8006bfe:	9347      	str	r3, [sp, #284]	; 0x11c
 8006c00:	6863      	ldr	r3, [r4, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	dd42      	ble.n	8006c8c <__ssvfiscanf_r+0x268>
 8006c06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006c08:	0659      	lsls	r1, r3, #25
 8006c0a:	d404      	bmi.n	8006c16 <__ssvfiscanf_r+0x1f2>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	781a      	ldrb	r2, [r3, #0]
 8006c10:	5cba      	ldrb	r2, [r7, r2]
 8006c12:	0712      	lsls	r2, r2, #28
 8006c14:	d441      	bmi.n	8006c9a <__ssvfiscanf_r+0x276>
 8006c16:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	dc50      	bgt.n	8006cbe <__ssvfiscanf_r+0x29a>
 8006c1c:	466b      	mov	r3, sp
 8006c1e:	4622      	mov	r2, r4
 8006c20:	a941      	add	r1, sp, #260	; 0x104
 8006c22:	4630      	mov	r0, r6
 8006c24:	f000 f876 	bl	8006d14 <_scanf_chars>
 8006c28:	2801      	cmp	r0, #1
 8006c2a:	d06e      	beq.n	8006d0a <__ssvfiscanf_r+0x2e6>
 8006c2c:	2802      	cmp	r0, #2
 8006c2e:	f47f af20 	bne.w	8006a72 <__ssvfiscanf_r+0x4e>
 8006c32:	e7cf      	b.n	8006bd4 <__ssvfiscanf_r+0x1b0>
 8006c34:	220a      	movs	r2, #10
 8006c36:	e7dd      	b.n	8006bf4 <__ssvfiscanf_r+0x1d0>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	9342      	str	r3, [sp, #264]	; 0x108
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e7de      	b.n	8006bfe <__ssvfiscanf_r+0x1da>
 8006c40:	2308      	movs	r3, #8
 8006c42:	9342      	str	r3, [sp, #264]	; 0x108
 8006c44:	2304      	movs	r3, #4
 8006c46:	e7da      	b.n	8006bfe <__ssvfiscanf_r+0x1da>
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	f000 f9e0 	bl	8007010 <__sccl>
 8006c50:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c56:	9341      	str	r3, [sp, #260]	; 0x104
 8006c58:	4605      	mov	r5, r0
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e7cf      	b.n	8006bfe <__ssvfiscanf_r+0x1da>
 8006c5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c64:	9341      	str	r3, [sp, #260]	; 0x104
 8006c66:	2300      	movs	r3, #0
 8006c68:	e7c9      	b.n	8006bfe <__ssvfiscanf_r+0x1da>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e7c7      	b.n	8006bfe <__ssvfiscanf_r+0x1da>
 8006c6e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006c70:	06c3      	lsls	r3, r0, #27
 8006c72:	f53f aefe 	bmi.w	8006a72 <__ssvfiscanf_r+0x4e>
 8006c76:	9b00      	ldr	r3, [sp, #0]
 8006c78:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006c7a:	1d19      	adds	r1, r3, #4
 8006c7c:	9100      	str	r1, [sp, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f010 0f01 	tst.w	r0, #1
 8006c84:	bf14      	ite	ne
 8006c86:	801a      	strhne	r2, [r3, #0]
 8006c88:	601a      	streq	r2, [r3, #0]
 8006c8a:	e6f2      	b.n	8006a72 <__ssvfiscanf_r+0x4e>
 8006c8c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006c8e:	4621      	mov	r1, r4
 8006c90:	4630      	mov	r0, r6
 8006c92:	4798      	blx	r3
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d0b6      	beq.n	8006c06 <__ssvfiscanf_r+0x1e2>
 8006c98:	e79c      	b.n	8006bd4 <__ssvfiscanf_r+0x1b0>
 8006c9a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006c9c:	3201      	adds	r2, #1
 8006c9e:	9245      	str	r2, [sp, #276]	; 0x114
 8006ca0:	6862      	ldr	r2, [r4, #4]
 8006ca2:	3a01      	subs	r2, #1
 8006ca4:	2a00      	cmp	r2, #0
 8006ca6:	6062      	str	r2, [r4, #4]
 8006ca8:	dd02      	ble.n	8006cb0 <__ssvfiscanf_r+0x28c>
 8006caa:	3301      	adds	r3, #1
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	e7ad      	b.n	8006c0c <__ssvfiscanf_r+0x1e8>
 8006cb0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	4798      	blx	r3
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d0a7      	beq.n	8006c0c <__ssvfiscanf_r+0x1e8>
 8006cbc:	e78a      	b.n	8006bd4 <__ssvfiscanf_r+0x1b0>
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	dc0e      	bgt.n	8006ce0 <__ssvfiscanf_r+0x2bc>
 8006cc2:	466b      	mov	r3, sp
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	a941      	add	r1, sp, #260	; 0x104
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f000 f87d 	bl	8006dc8 <_scanf_i>
 8006cce:	e7ab      	b.n	8006c28 <__ssvfiscanf_r+0x204>
 8006cd0:	08006971 	.word	0x08006971
 8006cd4:	080069eb 	.word	0x080069eb
 8006cd8:	08007ec1 	.word	0x08007ec1
 8006cdc:	0800822a 	.word	0x0800822a
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <__ssvfiscanf_r+0x2ec>)
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f43f aec5 	beq.w	8006a72 <__ssvfiscanf_r+0x4e>
 8006ce8:	466b      	mov	r3, sp
 8006cea:	4622      	mov	r2, r4
 8006cec:	a941      	add	r1, sp, #260	; 0x104
 8006cee:	4630      	mov	r0, r6
 8006cf0:	f7fc fb88 	bl	8003404 <_scanf_float>
 8006cf4:	e798      	b.n	8006c28 <__ssvfiscanf_r+0x204>
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006cfc:	bf18      	it	ne
 8006cfe:	f04f 30ff 	movne.w	r0, #4294967295
 8006d02:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006d0c:	e7f9      	b.n	8006d02 <__ssvfiscanf_r+0x2de>
 8006d0e:	bf00      	nop
 8006d10:	08003405 	.word	0x08003405

08006d14 <_scanf_chars>:
 8006d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d18:	4615      	mov	r5, r2
 8006d1a:	688a      	ldr	r2, [r1, #8]
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	b932      	cbnz	r2, 8006d30 <_scanf_chars+0x1c>
 8006d22:	698a      	ldr	r2, [r1, #24]
 8006d24:	2a00      	cmp	r2, #0
 8006d26:	bf0c      	ite	eq
 8006d28:	2201      	moveq	r2, #1
 8006d2a:	f04f 32ff 	movne.w	r2, #4294967295
 8006d2e:	608a      	str	r2, [r1, #8]
 8006d30:	6822      	ldr	r2, [r4, #0]
 8006d32:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006dc4 <_scanf_chars+0xb0>
 8006d36:	06d1      	lsls	r1, r2, #27
 8006d38:	bf5f      	itttt	pl
 8006d3a:	681a      	ldrpl	r2, [r3, #0]
 8006d3c:	1d11      	addpl	r1, r2, #4
 8006d3e:	6019      	strpl	r1, [r3, #0]
 8006d40:	6816      	ldrpl	r6, [r2, #0]
 8006d42:	2700      	movs	r7, #0
 8006d44:	69a0      	ldr	r0, [r4, #24]
 8006d46:	b188      	cbz	r0, 8006d6c <_scanf_chars+0x58>
 8006d48:	2801      	cmp	r0, #1
 8006d4a:	d107      	bne.n	8006d5c <_scanf_chars+0x48>
 8006d4c:	682a      	ldr	r2, [r5, #0]
 8006d4e:	7811      	ldrb	r1, [r2, #0]
 8006d50:	6962      	ldr	r2, [r4, #20]
 8006d52:	5c52      	ldrb	r2, [r2, r1]
 8006d54:	b952      	cbnz	r2, 8006d6c <_scanf_chars+0x58>
 8006d56:	2f00      	cmp	r7, #0
 8006d58:	d031      	beq.n	8006dbe <_scanf_chars+0xaa>
 8006d5a:	e022      	b.n	8006da2 <_scanf_chars+0x8e>
 8006d5c:	2802      	cmp	r0, #2
 8006d5e:	d120      	bne.n	8006da2 <_scanf_chars+0x8e>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006d68:	071b      	lsls	r3, r3, #28
 8006d6a:	d41a      	bmi.n	8006da2 <_scanf_chars+0x8e>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	06da      	lsls	r2, r3, #27
 8006d70:	bf5e      	ittt	pl
 8006d72:	682b      	ldrpl	r3, [r5, #0]
 8006d74:	781b      	ldrbpl	r3, [r3, #0]
 8006d76:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006d7a:	682a      	ldr	r2, [r5, #0]
 8006d7c:	686b      	ldr	r3, [r5, #4]
 8006d7e:	3201      	adds	r2, #1
 8006d80:	602a      	str	r2, [r5, #0]
 8006d82:	68a2      	ldr	r2, [r4, #8]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	3a01      	subs	r2, #1
 8006d88:	606b      	str	r3, [r5, #4]
 8006d8a:	3701      	adds	r7, #1
 8006d8c:	60a2      	str	r2, [r4, #8]
 8006d8e:	b142      	cbz	r2, 8006da2 <_scanf_chars+0x8e>
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	dcd7      	bgt.n	8006d44 <_scanf_chars+0x30>
 8006d94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d98:	4629      	mov	r1, r5
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	4798      	blx	r3
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d0d0      	beq.n	8006d44 <_scanf_chars+0x30>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	f013 0310 	ands.w	r3, r3, #16
 8006da8:	d105      	bne.n	8006db6 <_scanf_chars+0xa2>
 8006daa:	68e2      	ldr	r2, [r4, #12]
 8006dac:	3201      	adds	r2, #1
 8006dae:	60e2      	str	r2, [r4, #12]
 8006db0:	69a2      	ldr	r2, [r4, #24]
 8006db2:	b102      	cbz	r2, 8006db6 <_scanf_chars+0xa2>
 8006db4:	7033      	strb	r3, [r6, #0]
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	443b      	add	r3, r7
 8006dba:	6123      	str	r3, [r4, #16]
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc2:	bf00      	nop
 8006dc4:	08007ec1 	.word	0x08007ec1

08006dc8 <_scanf_i>:
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	4698      	mov	r8, r3
 8006dce:	4b76      	ldr	r3, [pc, #472]	; (8006fa8 <_scanf_i+0x1e0>)
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	4682      	mov	sl, r0
 8006dd4:	4616      	mov	r6, r2
 8006dd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	ab03      	add	r3, sp, #12
 8006dde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006de2:	4b72      	ldr	r3, [pc, #456]	; (8006fac <_scanf_i+0x1e4>)
 8006de4:	69a1      	ldr	r1, [r4, #24]
 8006de6:	4a72      	ldr	r2, [pc, #456]	; (8006fb0 <_scanf_i+0x1e8>)
 8006de8:	2903      	cmp	r1, #3
 8006dea:	bf18      	it	ne
 8006dec:	461a      	movne	r2, r3
 8006dee:	68a3      	ldr	r3, [r4, #8]
 8006df0:	9201      	str	r2, [sp, #4]
 8006df2:	1e5a      	subs	r2, r3, #1
 8006df4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006df8:	bf88      	it	hi
 8006dfa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006dfe:	4627      	mov	r7, r4
 8006e00:	bf82      	ittt	hi
 8006e02:	eb03 0905 	addhi.w	r9, r3, r5
 8006e06:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e0a:	60a3      	strhi	r3, [r4, #8]
 8006e0c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006e10:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006e14:	bf98      	it	ls
 8006e16:	f04f 0900 	movls.w	r9, #0
 8006e1a:	6023      	str	r3, [r4, #0]
 8006e1c:	463d      	mov	r5, r7
 8006e1e:	f04f 0b00 	mov.w	fp, #0
 8006e22:	6831      	ldr	r1, [r6, #0]
 8006e24:	ab03      	add	r3, sp, #12
 8006e26:	7809      	ldrb	r1, [r1, #0]
 8006e28:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	f7f9 f9ef 	bl	8000210 <memchr>
 8006e32:	b328      	cbz	r0, 8006e80 <_scanf_i+0xb8>
 8006e34:	f1bb 0f01 	cmp.w	fp, #1
 8006e38:	d159      	bne.n	8006eee <_scanf_i+0x126>
 8006e3a:	6862      	ldr	r2, [r4, #4]
 8006e3c:	b92a      	cbnz	r2, 8006e4a <_scanf_i+0x82>
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	2308      	movs	r3, #8
 8006e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e46:	6063      	str	r3, [r4, #4]
 8006e48:	6022      	str	r2, [r4, #0]
 8006e4a:	6822      	ldr	r2, [r4, #0]
 8006e4c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006e50:	6022      	str	r2, [r4, #0]
 8006e52:	68a2      	ldr	r2, [r4, #8]
 8006e54:	1e51      	subs	r1, r2, #1
 8006e56:	60a1      	str	r1, [r4, #8]
 8006e58:	b192      	cbz	r2, 8006e80 <_scanf_i+0xb8>
 8006e5a:	6832      	ldr	r2, [r6, #0]
 8006e5c:	1c51      	adds	r1, r2, #1
 8006e5e:	6031      	str	r1, [r6, #0]
 8006e60:	7812      	ldrb	r2, [r2, #0]
 8006e62:	f805 2b01 	strb.w	r2, [r5], #1
 8006e66:	6872      	ldr	r2, [r6, #4]
 8006e68:	3a01      	subs	r2, #1
 8006e6a:	2a00      	cmp	r2, #0
 8006e6c:	6072      	str	r2, [r6, #4]
 8006e6e:	dc07      	bgt.n	8006e80 <_scanf_i+0xb8>
 8006e70:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006e74:	4631      	mov	r1, r6
 8006e76:	4650      	mov	r0, sl
 8006e78:	4790      	blx	r2
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	f040 8085 	bne.w	8006f8a <_scanf_i+0x1c2>
 8006e80:	f10b 0b01 	add.w	fp, fp, #1
 8006e84:	f1bb 0f03 	cmp.w	fp, #3
 8006e88:	d1cb      	bne.n	8006e22 <_scanf_i+0x5a>
 8006e8a:	6863      	ldr	r3, [r4, #4]
 8006e8c:	b90b      	cbnz	r3, 8006e92 <_scanf_i+0xca>
 8006e8e:	230a      	movs	r3, #10
 8006e90:	6063      	str	r3, [r4, #4]
 8006e92:	6863      	ldr	r3, [r4, #4]
 8006e94:	4947      	ldr	r1, [pc, #284]	; (8006fb4 <_scanf_i+0x1ec>)
 8006e96:	6960      	ldr	r0, [r4, #20]
 8006e98:	1ac9      	subs	r1, r1, r3
 8006e9a:	f000 f8b9 	bl	8007010 <__sccl>
 8006e9e:	f04f 0b00 	mov.w	fp, #0
 8006ea2:	68a3      	ldr	r3, [r4, #8]
 8006ea4:	6822      	ldr	r2, [r4, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d03d      	beq.n	8006f26 <_scanf_i+0x15e>
 8006eaa:	6831      	ldr	r1, [r6, #0]
 8006eac:	6960      	ldr	r0, [r4, #20]
 8006eae:	f891 c000 	ldrb.w	ip, [r1]
 8006eb2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d035      	beq.n	8006f26 <_scanf_i+0x15e>
 8006eba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006ebe:	d124      	bne.n	8006f0a <_scanf_i+0x142>
 8006ec0:	0510      	lsls	r0, r2, #20
 8006ec2:	d522      	bpl.n	8006f0a <_scanf_i+0x142>
 8006ec4:	f10b 0b01 	add.w	fp, fp, #1
 8006ec8:	f1b9 0f00 	cmp.w	r9, #0
 8006ecc:	d003      	beq.n	8006ed6 <_scanf_i+0x10e>
 8006ece:	3301      	adds	r3, #1
 8006ed0:	f109 39ff 	add.w	r9, r9, #4294967295
 8006ed4:	60a3      	str	r3, [r4, #8]
 8006ed6:	6873      	ldr	r3, [r6, #4]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	6073      	str	r3, [r6, #4]
 8006ede:	dd1b      	ble.n	8006f18 <_scanf_i+0x150>
 8006ee0:	6833      	ldr	r3, [r6, #0]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	6033      	str	r3, [r6, #0]
 8006ee6:	68a3      	ldr	r3, [r4, #8]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	60a3      	str	r3, [r4, #8]
 8006eec:	e7d9      	b.n	8006ea2 <_scanf_i+0xda>
 8006eee:	f1bb 0f02 	cmp.w	fp, #2
 8006ef2:	d1ae      	bne.n	8006e52 <_scanf_i+0x8a>
 8006ef4:	6822      	ldr	r2, [r4, #0]
 8006ef6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006efa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006efe:	d1bf      	bne.n	8006e80 <_scanf_i+0xb8>
 8006f00:	2310      	movs	r3, #16
 8006f02:	6063      	str	r3, [r4, #4]
 8006f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f08:	e7a2      	b.n	8006e50 <_scanf_i+0x88>
 8006f0a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006f0e:	6022      	str	r2, [r4, #0]
 8006f10:	780b      	ldrb	r3, [r1, #0]
 8006f12:	f805 3b01 	strb.w	r3, [r5], #1
 8006f16:	e7de      	b.n	8006ed6 <_scanf_i+0x10e>
 8006f18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4650      	mov	r0, sl
 8006f20:	4798      	blx	r3
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d0df      	beq.n	8006ee6 <_scanf_i+0x11e>
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	05db      	lsls	r3, r3, #23
 8006f2a:	d50d      	bpl.n	8006f48 <_scanf_i+0x180>
 8006f2c:	42bd      	cmp	r5, r7
 8006f2e:	d909      	bls.n	8006f44 <_scanf_i+0x17c>
 8006f30:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006f34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f38:	4632      	mov	r2, r6
 8006f3a:	4650      	mov	r0, sl
 8006f3c:	4798      	blx	r3
 8006f3e:	f105 39ff 	add.w	r9, r5, #4294967295
 8006f42:	464d      	mov	r5, r9
 8006f44:	42bd      	cmp	r5, r7
 8006f46:	d02d      	beq.n	8006fa4 <_scanf_i+0x1dc>
 8006f48:	6822      	ldr	r2, [r4, #0]
 8006f4a:	f012 0210 	ands.w	r2, r2, #16
 8006f4e:	d113      	bne.n	8006f78 <_scanf_i+0x1b0>
 8006f50:	702a      	strb	r2, [r5, #0]
 8006f52:	6863      	ldr	r3, [r4, #4]
 8006f54:	9e01      	ldr	r6, [sp, #4]
 8006f56:	4639      	mov	r1, r7
 8006f58:	4650      	mov	r0, sl
 8006f5a:	47b0      	blx	r6
 8006f5c:	6821      	ldr	r1, [r4, #0]
 8006f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f62:	f011 0f20 	tst.w	r1, #32
 8006f66:	d013      	beq.n	8006f90 <_scanf_i+0x1c8>
 8006f68:	1d1a      	adds	r2, r3, #4
 8006f6a:	f8c8 2000 	str.w	r2, [r8]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6018      	str	r0, [r3, #0]
 8006f72:	68e3      	ldr	r3, [r4, #12]
 8006f74:	3301      	adds	r3, #1
 8006f76:	60e3      	str	r3, [r4, #12]
 8006f78:	1bed      	subs	r5, r5, r7
 8006f7a:	44ab      	add	fp, r5
 8006f7c:	6925      	ldr	r5, [r4, #16]
 8006f7e:	445d      	add	r5, fp
 8006f80:	6125      	str	r5, [r4, #16]
 8006f82:	2000      	movs	r0, #0
 8006f84:	b007      	add	sp, #28
 8006f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8a:	f04f 0b00 	mov.w	fp, #0
 8006f8e:	e7ca      	b.n	8006f26 <_scanf_i+0x15e>
 8006f90:	1d1a      	adds	r2, r3, #4
 8006f92:	f8c8 2000 	str.w	r2, [r8]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f011 0f01 	tst.w	r1, #1
 8006f9c:	bf14      	ite	ne
 8006f9e:	8018      	strhne	r0, [r3, #0]
 8006fa0:	6018      	streq	r0, [r3, #0]
 8006fa2:	e7e6      	b.n	8006f72 <_scanf_i+0x1aa>
 8006fa4:	2001      	movs	r0, #1
 8006fa6:	e7ed      	b.n	8006f84 <_scanf_i+0x1bc>
 8006fa8:	08007e24 	.word	0x08007e24
 8006fac:	0800718d 	.word	0x0800718d
 8006fb0:	080046ad 	.word	0x080046ad
 8006fb4:	0800824e 	.word	0x0800824e

08006fb8 <_read_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4d07      	ldr	r5, [pc, #28]	; (8006fd8 <_read_r+0x20>)
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	4608      	mov	r0, r1
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	602a      	str	r2, [r5, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f7fa fa69 	bl	800149e <_read>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_read_r+0x1e>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_read_r+0x1e>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	20000b08 	.word	0x20000b08
 8006fdc:	00000000 	.word	0x00000000

08006fe0 <nan>:
 8006fe0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006fe8 <nan+0x8>
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	00000000 	.word	0x00000000
 8006fec:	7ff80000 	.word	0x7ff80000

08006ff0 <_sbrk_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d06      	ldr	r5, [pc, #24]	; (800700c <_sbrk_r+0x1c>)
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	4608      	mov	r0, r1
 8006ffa:	602b      	str	r3, [r5, #0]
 8006ffc:	f7fa fabc 	bl	8001578 <_sbrk>
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	d102      	bne.n	800700a <_sbrk_r+0x1a>
 8007004:	682b      	ldr	r3, [r5, #0]
 8007006:	b103      	cbz	r3, 800700a <_sbrk_r+0x1a>
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	20000b08 	.word	0x20000b08

08007010 <__sccl>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	780b      	ldrb	r3, [r1, #0]
 8007014:	4604      	mov	r4, r0
 8007016:	2b5e      	cmp	r3, #94	; 0x5e
 8007018:	bf0b      	itete	eq
 800701a:	784b      	ldrbeq	r3, [r1, #1]
 800701c:	1c48      	addne	r0, r1, #1
 800701e:	1c88      	addeq	r0, r1, #2
 8007020:	2200      	movne	r2, #0
 8007022:	bf08      	it	eq
 8007024:	2201      	moveq	r2, #1
 8007026:	1e61      	subs	r1, r4, #1
 8007028:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800702c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007030:	42a9      	cmp	r1, r5
 8007032:	d1fb      	bne.n	800702c <__sccl+0x1c>
 8007034:	b90b      	cbnz	r3, 800703a <__sccl+0x2a>
 8007036:	3801      	subs	r0, #1
 8007038:	bd70      	pop	{r4, r5, r6, pc}
 800703a:	f082 0201 	eor.w	r2, r2, #1
 800703e:	54e2      	strb	r2, [r4, r3]
 8007040:	4605      	mov	r5, r0
 8007042:	4628      	mov	r0, r5
 8007044:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007048:	292d      	cmp	r1, #45	; 0x2d
 800704a:	d006      	beq.n	800705a <__sccl+0x4a>
 800704c:	295d      	cmp	r1, #93	; 0x5d
 800704e:	d0f3      	beq.n	8007038 <__sccl+0x28>
 8007050:	b909      	cbnz	r1, 8007056 <__sccl+0x46>
 8007052:	4628      	mov	r0, r5
 8007054:	e7f0      	b.n	8007038 <__sccl+0x28>
 8007056:	460b      	mov	r3, r1
 8007058:	e7f1      	b.n	800703e <__sccl+0x2e>
 800705a:	786e      	ldrb	r6, [r5, #1]
 800705c:	2e5d      	cmp	r6, #93	; 0x5d
 800705e:	d0fa      	beq.n	8007056 <__sccl+0x46>
 8007060:	42b3      	cmp	r3, r6
 8007062:	dcf8      	bgt.n	8007056 <__sccl+0x46>
 8007064:	3502      	adds	r5, #2
 8007066:	4619      	mov	r1, r3
 8007068:	3101      	adds	r1, #1
 800706a:	428e      	cmp	r6, r1
 800706c:	5462      	strb	r2, [r4, r1]
 800706e:	dcfb      	bgt.n	8007068 <__sccl+0x58>
 8007070:	1af1      	subs	r1, r6, r3
 8007072:	3901      	subs	r1, #1
 8007074:	1c58      	adds	r0, r3, #1
 8007076:	42b3      	cmp	r3, r6
 8007078:	bfa8      	it	ge
 800707a:	2100      	movge	r1, #0
 800707c:	1843      	adds	r3, r0, r1
 800707e:	e7e0      	b.n	8007042 <__sccl+0x32>

08007080 <strncmp>:
 8007080:	b510      	push	{r4, lr}
 8007082:	b17a      	cbz	r2, 80070a4 <strncmp+0x24>
 8007084:	4603      	mov	r3, r0
 8007086:	3901      	subs	r1, #1
 8007088:	1884      	adds	r4, r0, r2
 800708a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800708e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007092:	4290      	cmp	r0, r2
 8007094:	d101      	bne.n	800709a <strncmp+0x1a>
 8007096:	42a3      	cmp	r3, r4
 8007098:	d101      	bne.n	800709e <strncmp+0x1e>
 800709a:	1a80      	subs	r0, r0, r2
 800709c:	bd10      	pop	{r4, pc}
 800709e:	2800      	cmp	r0, #0
 80070a0:	d1f3      	bne.n	800708a <strncmp+0xa>
 80070a2:	e7fa      	b.n	800709a <strncmp+0x1a>
 80070a4:	4610      	mov	r0, r2
 80070a6:	e7f9      	b.n	800709c <strncmp+0x1c>

080070a8 <_strtoul_l.constprop.0>:
 80070a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070ac:	4f36      	ldr	r7, [pc, #216]	; (8007188 <_strtoul_l.constprop.0+0xe0>)
 80070ae:	4686      	mov	lr, r0
 80070b0:	460d      	mov	r5, r1
 80070b2:	4628      	mov	r0, r5
 80070b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070b8:	5de6      	ldrb	r6, [r4, r7]
 80070ba:	f016 0608 	ands.w	r6, r6, #8
 80070be:	d1f8      	bne.n	80070b2 <_strtoul_l.constprop.0+0xa>
 80070c0:	2c2d      	cmp	r4, #45	; 0x2d
 80070c2:	d12f      	bne.n	8007124 <_strtoul_l.constprop.0+0x7c>
 80070c4:	782c      	ldrb	r4, [r5, #0]
 80070c6:	2601      	movs	r6, #1
 80070c8:	1c85      	adds	r5, r0, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d057      	beq.n	800717e <_strtoul_l.constprop.0+0xd6>
 80070ce:	2b10      	cmp	r3, #16
 80070d0:	d109      	bne.n	80070e6 <_strtoul_l.constprop.0+0x3e>
 80070d2:	2c30      	cmp	r4, #48	; 0x30
 80070d4:	d107      	bne.n	80070e6 <_strtoul_l.constprop.0+0x3e>
 80070d6:	7828      	ldrb	r0, [r5, #0]
 80070d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80070dc:	2858      	cmp	r0, #88	; 0x58
 80070de:	d149      	bne.n	8007174 <_strtoul_l.constprop.0+0xcc>
 80070e0:	786c      	ldrb	r4, [r5, #1]
 80070e2:	2310      	movs	r3, #16
 80070e4:	3502      	adds	r5, #2
 80070e6:	f04f 38ff 	mov.w	r8, #4294967295
 80070ea:	2700      	movs	r7, #0
 80070ec:	fbb8 f8f3 	udiv	r8, r8, r3
 80070f0:	fb03 f908 	mul.w	r9, r3, r8
 80070f4:	ea6f 0909 	mvn.w	r9, r9
 80070f8:	4638      	mov	r0, r7
 80070fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80070fe:	f1bc 0f09 	cmp.w	ip, #9
 8007102:	d814      	bhi.n	800712e <_strtoul_l.constprop.0+0x86>
 8007104:	4664      	mov	r4, ip
 8007106:	42a3      	cmp	r3, r4
 8007108:	dd22      	ble.n	8007150 <_strtoul_l.constprop.0+0xa8>
 800710a:	2f00      	cmp	r7, #0
 800710c:	db1d      	blt.n	800714a <_strtoul_l.constprop.0+0xa2>
 800710e:	4580      	cmp	r8, r0
 8007110:	d31b      	bcc.n	800714a <_strtoul_l.constprop.0+0xa2>
 8007112:	d101      	bne.n	8007118 <_strtoul_l.constprop.0+0x70>
 8007114:	45a1      	cmp	r9, r4
 8007116:	db18      	blt.n	800714a <_strtoul_l.constprop.0+0xa2>
 8007118:	fb00 4003 	mla	r0, r0, r3, r4
 800711c:	2701      	movs	r7, #1
 800711e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007122:	e7ea      	b.n	80070fa <_strtoul_l.constprop.0+0x52>
 8007124:	2c2b      	cmp	r4, #43	; 0x2b
 8007126:	bf04      	itt	eq
 8007128:	782c      	ldrbeq	r4, [r5, #0]
 800712a:	1c85      	addeq	r5, r0, #2
 800712c:	e7cd      	b.n	80070ca <_strtoul_l.constprop.0+0x22>
 800712e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007132:	f1bc 0f19 	cmp.w	ip, #25
 8007136:	d801      	bhi.n	800713c <_strtoul_l.constprop.0+0x94>
 8007138:	3c37      	subs	r4, #55	; 0x37
 800713a:	e7e4      	b.n	8007106 <_strtoul_l.constprop.0+0x5e>
 800713c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007140:	f1bc 0f19 	cmp.w	ip, #25
 8007144:	d804      	bhi.n	8007150 <_strtoul_l.constprop.0+0xa8>
 8007146:	3c57      	subs	r4, #87	; 0x57
 8007148:	e7dd      	b.n	8007106 <_strtoul_l.constprop.0+0x5e>
 800714a:	f04f 37ff 	mov.w	r7, #4294967295
 800714e:	e7e6      	b.n	800711e <_strtoul_l.constprop.0+0x76>
 8007150:	2f00      	cmp	r7, #0
 8007152:	da07      	bge.n	8007164 <_strtoul_l.constprop.0+0xbc>
 8007154:	2322      	movs	r3, #34	; 0x22
 8007156:	f8ce 3000 	str.w	r3, [lr]
 800715a:	f04f 30ff 	mov.w	r0, #4294967295
 800715e:	b932      	cbnz	r2, 800716e <_strtoul_l.constprop.0+0xc6>
 8007160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007164:	b106      	cbz	r6, 8007168 <_strtoul_l.constprop.0+0xc0>
 8007166:	4240      	negs	r0, r0
 8007168:	2a00      	cmp	r2, #0
 800716a:	d0f9      	beq.n	8007160 <_strtoul_l.constprop.0+0xb8>
 800716c:	b107      	cbz	r7, 8007170 <_strtoul_l.constprop.0+0xc8>
 800716e:	1e69      	subs	r1, r5, #1
 8007170:	6011      	str	r1, [r2, #0]
 8007172:	e7f5      	b.n	8007160 <_strtoul_l.constprop.0+0xb8>
 8007174:	2430      	movs	r4, #48	; 0x30
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1b5      	bne.n	80070e6 <_strtoul_l.constprop.0+0x3e>
 800717a:	2308      	movs	r3, #8
 800717c:	e7b3      	b.n	80070e6 <_strtoul_l.constprop.0+0x3e>
 800717e:	2c30      	cmp	r4, #48	; 0x30
 8007180:	d0a9      	beq.n	80070d6 <_strtoul_l.constprop.0+0x2e>
 8007182:	230a      	movs	r3, #10
 8007184:	e7af      	b.n	80070e6 <_strtoul_l.constprop.0+0x3e>
 8007186:	bf00      	nop
 8007188:	08007ec1 	.word	0x08007ec1

0800718c <_strtoul_r>:
 800718c:	f7ff bf8c 	b.w	80070a8 <_strtoul_l.constprop.0>

08007190 <__submore>:
 8007190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007194:	460c      	mov	r4, r1
 8007196:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800719c:	4299      	cmp	r1, r3
 800719e:	d11d      	bne.n	80071dc <__submore+0x4c>
 80071a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80071a4:	f7ff fa14 	bl	80065d0 <_malloc_r>
 80071a8:	b918      	cbnz	r0, 80071b2 <__submore+0x22>
 80071aa:	f04f 30ff 	mov.w	r0, #4294967295
 80071ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80071b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80071bc:	6360      	str	r0, [r4, #52]	; 0x34
 80071be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80071c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80071c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80071ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80071ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80071d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80071d6:	6020      	str	r0, [r4, #0]
 80071d8:	2000      	movs	r0, #0
 80071da:	e7e8      	b.n	80071ae <__submore+0x1e>
 80071dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80071de:	0077      	lsls	r7, r6, #1
 80071e0:	463a      	mov	r2, r7
 80071e2:	f000 fa2d 	bl	8007640 <_realloc_r>
 80071e6:	4605      	mov	r5, r0
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d0de      	beq.n	80071aa <__submore+0x1a>
 80071ec:	eb00 0806 	add.w	r8, r0, r6
 80071f0:	4601      	mov	r1, r0
 80071f2:	4632      	mov	r2, r6
 80071f4:	4640      	mov	r0, r8
 80071f6:	f7fe fc99 	bl	8005b2c <memcpy>
 80071fa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80071fe:	f8c4 8000 	str.w	r8, [r4]
 8007202:	e7e9      	b.n	80071d8 <__submore+0x48>

08007204 <__ascii_wctomb>:
 8007204:	b149      	cbz	r1, 800721a <__ascii_wctomb+0x16>
 8007206:	2aff      	cmp	r2, #255	; 0xff
 8007208:	bf85      	ittet	hi
 800720a:	238a      	movhi	r3, #138	; 0x8a
 800720c:	6003      	strhi	r3, [r0, #0]
 800720e:	700a      	strbls	r2, [r1, #0]
 8007210:	f04f 30ff 	movhi.w	r0, #4294967295
 8007214:	bf98      	it	ls
 8007216:	2001      	movls	r0, #1
 8007218:	4770      	bx	lr
 800721a:	4608      	mov	r0, r1
 800721c:	4770      	bx	lr
	...

08007220 <__assert_func>:
 8007220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007222:	4614      	mov	r4, r2
 8007224:	461a      	mov	r2, r3
 8007226:	4b09      	ldr	r3, [pc, #36]	; (800724c <__assert_func+0x2c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4605      	mov	r5, r0
 800722c:	68d8      	ldr	r0, [r3, #12]
 800722e:	b14c      	cbz	r4, 8007244 <__assert_func+0x24>
 8007230:	4b07      	ldr	r3, [pc, #28]	; (8007250 <__assert_func+0x30>)
 8007232:	9100      	str	r1, [sp, #0]
 8007234:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007238:	4906      	ldr	r1, [pc, #24]	; (8007254 <__assert_func+0x34>)
 800723a:	462b      	mov	r3, r5
 800723c:	f000 f9a6 	bl	800758c <fiprintf>
 8007240:	f000 fc46 	bl	8007ad0 <abort>
 8007244:	4b04      	ldr	r3, [pc, #16]	; (8007258 <__assert_func+0x38>)
 8007246:	461c      	mov	r4, r3
 8007248:	e7f3      	b.n	8007232 <__assert_func+0x12>
 800724a:	bf00      	nop
 800724c:	20000004 	.word	0x20000004
 8007250:	08008250 	.word	0x08008250
 8007254:	0800825d 	.word	0x0800825d
 8007258:	0800828b 	.word	0x0800828b

0800725c <__sflush_r>:
 800725c:	898a      	ldrh	r2, [r1, #12]
 800725e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007262:	4605      	mov	r5, r0
 8007264:	0710      	lsls	r0, r2, #28
 8007266:	460c      	mov	r4, r1
 8007268:	d458      	bmi.n	800731c <__sflush_r+0xc0>
 800726a:	684b      	ldr	r3, [r1, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	dc05      	bgt.n	800727c <__sflush_r+0x20>
 8007270:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007272:	2b00      	cmp	r3, #0
 8007274:	dc02      	bgt.n	800727c <__sflush_r+0x20>
 8007276:	2000      	movs	r0, #0
 8007278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800727c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800727e:	2e00      	cmp	r6, #0
 8007280:	d0f9      	beq.n	8007276 <__sflush_r+0x1a>
 8007282:	2300      	movs	r3, #0
 8007284:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007288:	682f      	ldr	r7, [r5, #0]
 800728a:	602b      	str	r3, [r5, #0]
 800728c:	d032      	beq.n	80072f4 <__sflush_r+0x98>
 800728e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	075a      	lsls	r2, r3, #29
 8007294:	d505      	bpl.n	80072a2 <__sflush_r+0x46>
 8007296:	6863      	ldr	r3, [r4, #4]
 8007298:	1ac0      	subs	r0, r0, r3
 800729a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800729c:	b10b      	cbz	r3, 80072a2 <__sflush_r+0x46>
 800729e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072a0:	1ac0      	subs	r0, r0, r3
 80072a2:	2300      	movs	r3, #0
 80072a4:	4602      	mov	r2, r0
 80072a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072a8:	6a21      	ldr	r1, [r4, #32]
 80072aa:	4628      	mov	r0, r5
 80072ac:	47b0      	blx	r6
 80072ae:	1c43      	adds	r3, r0, #1
 80072b0:	89a3      	ldrh	r3, [r4, #12]
 80072b2:	d106      	bne.n	80072c2 <__sflush_r+0x66>
 80072b4:	6829      	ldr	r1, [r5, #0]
 80072b6:	291d      	cmp	r1, #29
 80072b8:	d82c      	bhi.n	8007314 <__sflush_r+0xb8>
 80072ba:	4a2a      	ldr	r2, [pc, #168]	; (8007364 <__sflush_r+0x108>)
 80072bc:	40ca      	lsrs	r2, r1
 80072be:	07d6      	lsls	r6, r2, #31
 80072c0:	d528      	bpl.n	8007314 <__sflush_r+0xb8>
 80072c2:	2200      	movs	r2, #0
 80072c4:	6062      	str	r2, [r4, #4]
 80072c6:	04d9      	lsls	r1, r3, #19
 80072c8:	6922      	ldr	r2, [r4, #16]
 80072ca:	6022      	str	r2, [r4, #0]
 80072cc:	d504      	bpl.n	80072d8 <__sflush_r+0x7c>
 80072ce:	1c42      	adds	r2, r0, #1
 80072d0:	d101      	bne.n	80072d6 <__sflush_r+0x7a>
 80072d2:	682b      	ldr	r3, [r5, #0]
 80072d4:	b903      	cbnz	r3, 80072d8 <__sflush_r+0x7c>
 80072d6:	6560      	str	r0, [r4, #84]	; 0x54
 80072d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072da:	602f      	str	r7, [r5, #0]
 80072dc:	2900      	cmp	r1, #0
 80072de:	d0ca      	beq.n	8007276 <__sflush_r+0x1a>
 80072e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072e4:	4299      	cmp	r1, r3
 80072e6:	d002      	beq.n	80072ee <__sflush_r+0x92>
 80072e8:	4628      	mov	r0, r5
 80072ea:	f7ff f905 	bl	80064f8 <_free_r>
 80072ee:	2000      	movs	r0, #0
 80072f0:	6360      	str	r0, [r4, #52]	; 0x34
 80072f2:	e7c1      	b.n	8007278 <__sflush_r+0x1c>
 80072f4:	6a21      	ldr	r1, [r4, #32]
 80072f6:	2301      	movs	r3, #1
 80072f8:	4628      	mov	r0, r5
 80072fa:	47b0      	blx	r6
 80072fc:	1c41      	adds	r1, r0, #1
 80072fe:	d1c7      	bne.n	8007290 <__sflush_r+0x34>
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0c4      	beq.n	8007290 <__sflush_r+0x34>
 8007306:	2b1d      	cmp	r3, #29
 8007308:	d001      	beq.n	800730e <__sflush_r+0xb2>
 800730a:	2b16      	cmp	r3, #22
 800730c:	d101      	bne.n	8007312 <__sflush_r+0xb6>
 800730e:	602f      	str	r7, [r5, #0]
 8007310:	e7b1      	b.n	8007276 <__sflush_r+0x1a>
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007318:	81a3      	strh	r3, [r4, #12]
 800731a:	e7ad      	b.n	8007278 <__sflush_r+0x1c>
 800731c:	690f      	ldr	r7, [r1, #16]
 800731e:	2f00      	cmp	r7, #0
 8007320:	d0a9      	beq.n	8007276 <__sflush_r+0x1a>
 8007322:	0793      	lsls	r3, r2, #30
 8007324:	680e      	ldr	r6, [r1, #0]
 8007326:	bf08      	it	eq
 8007328:	694b      	ldreq	r3, [r1, #20]
 800732a:	600f      	str	r7, [r1, #0]
 800732c:	bf18      	it	ne
 800732e:	2300      	movne	r3, #0
 8007330:	eba6 0807 	sub.w	r8, r6, r7
 8007334:	608b      	str	r3, [r1, #8]
 8007336:	f1b8 0f00 	cmp.w	r8, #0
 800733a:	dd9c      	ble.n	8007276 <__sflush_r+0x1a>
 800733c:	6a21      	ldr	r1, [r4, #32]
 800733e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007340:	4643      	mov	r3, r8
 8007342:	463a      	mov	r2, r7
 8007344:	4628      	mov	r0, r5
 8007346:	47b0      	blx	r6
 8007348:	2800      	cmp	r0, #0
 800734a:	dc06      	bgt.n	800735a <__sflush_r+0xfe>
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007352:	81a3      	strh	r3, [r4, #12]
 8007354:	f04f 30ff 	mov.w	r0, #4294967295
 8007358:	e78e      	b.n	8007278 <__sflush_r+0x1c>
 800735a:	4407      	add	r7, r0
 800735c:	eba8 0800 	sub.w	r8, r8, r0
 8007360:	e7e9      	b.n	8007336 <__sflush_r+0xda>
 8007362:	bf00      	nop
 8007364:	20400001 	.word	0x20400001

08007368 <_fflush_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	690b      	ldr	r3, [r1, #16]
 800736c:	4605      	mov	r5, r0
 800736e:	460c      	mov	r4, r1
 8007370:	b913      	cbnz	r3, 8007378 <_fflush_r+0x10>
 8007372:	2500      	movs	r5, #0
 8007374:	4628      	mov	r0, r5
 8007376:	bd38      	pop	{r3, r4, r5, pc}
 8007378:	b118      	cbz	r0, 8007382 <_fflush_r+0x1a>
 800737a:	6983      	ldr	r3, [r0, #24]
 800737c:	b90b      	cbnz	r3, 8007382 <_fflush_r+0x1a>
 800737e:	f000 f887 	bl	8007490 <__sinit>
 8007382:	4b14      	ldr	r3, [pc, #80]	; (80073d4 <_fflush_r+0x6c>)
 8007384:	429c      	cmp	r4, r3
 8007386:	d11b      	bne.n	80073c0 <_fflush_r+0x58>
 8007388:	686c      	ldr	r4, [r5, #4]
 800738a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0ef      	beq.n	8007372 <_fflush_r+0xa>
 8007392:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007394:	07d0      	lsls	r0, r2, #31
 8007396:	d404      	bmi.n	80073a2 <_fflush_r+0x3a>
 8007398:	0599      	lsls	r1, r3, #22
 800739a:	d402      	bmi.n	80073a2 <_fflush_r+0x3a>
 800739c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800739e:	f000 f927 	bl	80075f0 <__retarget_lock_acquire_recursive>
 80073a2:	4628      	mov	r0, r5
 80073a4:	4621      	mov	r1, r4
 80073a6:	f7ff ff59 	bl	800725c <__sflush_r>
 80073aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073ac:	07da      	lsls	r2, r3, #31
 80073ae:	4605      	mov	r5, r0
 80073b0:	d4e0      	bmi.n	8007374 <_fflush_r+0xc>
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	059b      	lsls	r3, r3, #22
 80073b6:	d4dd      	bmi.n	8007374 <_fflush_r+0xc>
 80073b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ba:	f000 f91a 	bl	80075f2 <__retarget_lock_release_recursive>
 80073be:	e7d9      	b.n	8007374 <_fflush_r+0xc>
 80073c0:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <_fflush_r+0x70>)
 80073c2:	429c      	cmp	r4, r3
 80073c4:	d101      	bne.n	80073ca <_fflush_r+0x62>
 80073c6:	68ac      	ldr	r4, [r5, #8]
 80073c8:	e7df      	b.n	800738a <_fflush_r+0x22>
 80073ca:	4b04      	ldr	r3, [pc, #16]	; (80073dc <_fflush_r+0x74>)
 80073cc:	429c      	cmp	r4, r3
 80073ce:	bf08      	it	eq
 80073d0:	68ec      	ldreq	r4, [r5, #12]
 80073d2:	e7da      	b.n	800738a <_fflush_r+0x22>
 80073d4:	080082ac 	.word	0x080082ac
 80073d8:	080082cc 	.word	0x080082cc
 80073dc:	0800828c 	.word	0x0800828c

080073e0 <std>:
 80073e0:	2300      	movs	r3, #0
 80073e2:	b510      	push	{r4, lr}
 80073e4:	4604      	mov	r4, r0
 80073e6:	e9c0 3300 	strd	r3, r3, [r0]
 80073ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073ee:	6083      	str	r3, [r0, #8]
 80073f0:	8181      	strh	r1, [r0, #12]
 80073f2:	6643      	str	r3, [r0, #100]	; 0x64
 80073f4:	81c2      	strh	r2, [r0, #14]
 80073f6:	6183      	str	r3, [r0, #24]
 80073f8:	4619      	mov	r1, r3
 80073fa:	2208      	movs	r2, #8
 80073fc:	305c      	adds	r0, #92	; 0x5c
 80073fe:	f7fb fb8f 	bl	8002b20 <memset>
 8007402:	4b05      	ldr	r3, [pc, #20]	; (8007418 <std+0x38>)
 8007404:	6263      	str	r3, [r4, #36]	; 0x24
 8007406:	4b05      	ldr	r3, [pc, #20]	; (800741c <std+0x3c>)
 8007408:	62a3      	str	r3, [r4, #40]	; 0x28
 800740a:	4b05      	ldr	r3, [pc, #20]	; (8007420 <std+0x40>)
 800740c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800740e:	4b05      	ldr	r3, [pc, #20]	; (8007424 <std+0x44>)
 8007410:	6224      	str	r4, [r4, #32]
 8007412:	6323      	str	r3, [r4, #48]	; 0x30
 8007414:	bd10      	pop	{r4, pc}
 8007416:	bf00      	nop
 8007418:	080038c9 	.word	0x080038c9
 800741c:	080038ef 	.word	0x080038ef
 8007420:	08003927 	.word	0x08003927
 8007424:	0800394b 	.word	0x0800394b

08007428 <_cleanup_r>:
 8007428:	4901      	ldr	r1, [pc, #4]	; (8007430 <_cleanup_r+0x8>)
 800742a:	f000 b8c1 	b.w	80075b0 <_fwalk_reent>
 800742e:	bf00      	nop
 8007430:	08007369 	.word	0x08007369

08007434 <__sfmoreglue>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	2268      	movs	r2, #104	; 0x68
 8007438:	1e4d      	subs	r5, r1, #1
 800743a:	4355      	muls	r5, r2
 800743c:	460e      	mov	r6, r1
 800743e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007442:	f7ff f8c5 	bl	80065d0 <_malloc_r>
 8007446:	4604      	mov	r4, r0
 8007448:	b140      	cbz	r0, 800745c <__sfmoreglue+0x28>
 800744a:	2100      	movs	r1, #0
 800744c:	e9c0 1600 	strd	r1, r6, [r0]
 8007450:	300c      	adds	r0, #12
 8007452:	60a0      	str	r0, [r4, #8]
 8007454:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007458:	f7fb fb62 	bl	8002b20 <memset>
 800745c:	4620      	mov	r0, r4
 800745e:	bd70      	pop	{r4, r5, r6, pc}

08007460 <__sfp_lock_acquire>:
 8007460:	4801      	ldr	r0, [pc, #4]	; (8007468 <__sfp_lock_acquire+0x8>)
 8007462:	f000 b8c5 	b.w	80075f0 <__retarget_lock_acquire_recursive>
 8007466:	bf00      	nop
 8007468:	20000b0d 	.word	0x20000b0d

0800746c <__sfp_lock_release>:
 800746c:	4801      	ldr	r0, [pc, #4]	; (8007474 <__sfp_lock_release+0x8>)
 800746e:	f000 b8c0 	b.w	80075f2 <__retarget_lock_release_recursive>
 8007472:	bf00      	nop
 8007474:	20000b0d 	.word	0x20000b0d

08007478 <__sinit_lock_acquire>:
 8007478:	4801      	ldr	r0, [pc, #4]	; (8007480 <__sinit_lock_acquire+0x8>)
 800747a:	f000 b8b9 	b.w	80075f0 <__retarget_lock_acquire_recursive>
 800747e:	bf00      	nop
 8007480:	20000b0e 	.word	0x20000b0e

08007484 <__sinit_lock_release>:
 8007484:	4801      	ldr	r0, [pc, #4]	; (800748c <__sinit_lock_release+0x8>)
 8007486:	f000 b8b4 	b.w	80075f2 <__retarget_lock_release_recursive>
 800748a:	bf00      	nop
 800748c:	20000b0e 	.word	0x20000b0e

08007490 <__sinit>:
 8007490:	b510      	push	{r4, lr}
 8007492:	4604      	mov	r4, r0
 8007494:	f7ff fff0 	bl	8007478 <__sinit_lock_acquire>
 8007498:	69a3      	ldr	r3, [r4, #24]
 800749a:	b11b      	cbz	r3, 80074a4 <__sinit+0x14>
 800749c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a0:	f7ff bff0 	b.w	8007484 <__sinit_lock_release>
 80074a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80074a8:	6523      	str	r3, [r4, #80]	; 0x50
 80074aa:	4b13      	ldr	r3, [pc, #76]	; (80074f8 <__sinit+0x68>)
 80074ac:	4a13      	ldr	r2, [pc, #76]	; (80074fc <__sinit+0x6c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80074b2:	42a3      	cmp	r3, r4
 80074b4:	bf04      	itt	eq
 80074b6:	2301      	moveq	r3, #1
 80074b8:	61a3      	streq	r3, [r4, #24]
 80074ba:	4620      	mov	r0, r4
 80074bc:	f000 f820 	bl	8007500 <__sfp>
 80074c0:	6060      	str	r0, [r4, #4]
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 f81c 	bl	8007500 <__sfp>
 80074c8:	60a0      	str	r0, [r4, #8]
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 f818 	bl	8007500 <__sfp>
 80074d0:	2200      	movs	r2, #0
 80074d2:	60e0      	str	r0, [r4, #12]
 80074d4:	2104      	movs	r1, #4
 80074d6:	6860      	ldr	r0, [r4, #4]
 80074d8:	f7ff ff82 	bl	80073e0 <std>
 80074dc:	68a0      	ldr	r0, [r4, #8]
 80074de:	2201      	movs	r2, #1
 80074e0:	2109      	movs	r1, #9
 80074e2:	f7ff ff7d 	bl	80073e0 <std>
 80074e6:	68e0      	ldr	r0, [r4, #12]
 80074e8:	2202      	movs	r2, #2
 80074ea:	2112      	movs	r1, #18
 80074ec:	f7ff ff78 	bl	80073e0 <std>
 80074f0:	2301      	movs	r3, #1
 80074f2:	61a3      	str	r3, [r4, #24]
 80074f4:	e7d2      	b.n	800749c <__sinit+0xc>
 80074f6:	bf00      	nop
 80074f8:	08007e30 	.word	0x08007e30
 80074fc:	08007429 	.word	0x08007429

08007500 <__sfp>:
 8007500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007502:	4607      	mov	r7, r0
 8007504:	f7ff ffac 	bl	8007460 <__sfp_lock_acquire>
 8007508:	4b1e      	ldr	r3, [pc, #120]	; (8007584 <__sfp+0x84>)
 800750a:	681e      	ldr	r6, [r3, #0]
 800750c:	69b3      	ldr	r3, [r6, #24]
 800750e:	b913      	cbnz	r3, 8007516 <__sfp+0x16>
 8007510:	4630      	mov	r0, r6
 8007512:	f7ff ffbd 	bl	8007490 <__sinit>
 8007516:	3648      	adds	r6, #72	; 0x48
 8007518:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800751c:	3b01      	subs	r3, #1
 800751e:	d503      	bpl.n	8007528 <__sfp+0x28>
 8007520:	6833      	ldr	r3, [r6, #0]
 8007522:	b30b      	cbz	r3, 8007568 <__sfp+0x68>
 8007524:	6836      	ldr	r6, [r6, #0]
 8007526:	e7f7      	b.n	8007518 <__sfp+0x18>
 8007528:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800752c:	b9d5      	cbnz	r5, 8007564 <__sfp+0x64>
 800752e:	4b16      	ldr	r3, [pc, #88]	; (8007588 <__sfp+0x88>)
 8007530:	60e3      	str	r3, [r4, #12]
 8007532:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007536:	6665      	str	r5, [r4, #100]	; 0x64
 8007538:	f000 f859 	bl	80075ee <__retarget_lock_init_recursive>
 800753c:	f7ff ff96 	bl	800746c <__sfp_lock_release>
 8007540:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007544:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007548:	6025      	str	r5, [r4, #0]
 800754a:	61a5      	str	r5, [r4, #24]
 800754c:	2208      	movs	r2, #8
 800754e:	4629      	mov	r1, r5
 8007550:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007554:	f7fb fae4 	bl	8002b20 <memset>
 8007558:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800755c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007560:	4620      	mov	r0, r4
 8007562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007564:	3468      	adds	r4, #104	; 0x68
 8007566:	e7d9      	b.n	800751c <__sfp+0x1c>
 8007568:	2104      	movs	r1, #4
 800756a:	4638      	mov	r0, r7
 800756c:	f7ff ff62 	bl	8007434 <__sfmoreglue>
 8007570:	4604      	mov	r4, r0
 8007572:	6030      	str	r0, [r6, #0]
 8007574:	2800      	cmp	r0, #0
 8007576:	d1d5      	bne.n	8007524 <__sfp+0x24>
 8007578:	f7ff ff78 	bl	800746c <__sfp_lock_release>
 800757c:	230c      	movs	r3, #12
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	e7ee      	b.n	8007560 <__sfp+0x60>
 8007582:	bf00      	nop
 8007584:	08007e30 	.word	0x08007e30
 8007588:	ffff0001 	.word	0xffff0001

0800758c <fiprintf>:
 800758c:	b40e      	push	{r1, r2, r3}
 800758e:	b503      	push	{r0, r1, lr}
 8007590:	4601      	mov	r1, r0
 8007592:	ab03      	add	r3, sp, #12
 8007594:	4805      	ldr	r0, [pc, #20]	; (80075ac <fiprintf+0x20>)
 8007596:	f853 2b04 	ldr.w	r2, [r3], #4
 800759a:	6800      	ldr	r0, [r0, #0]
 800759c:	9301      	str	r3, [sp, #4]
 800759e:	f000 f8a7 	bl	80076f0 <_vfiprintf_r>
 80075a2:	b002      	add	sp, #8
 80075a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075a8:	b003      	add	sp, #12
 80075aa:	4770      	bx	lr
 80075ac:	20000004 	.word	0x20000004

080075b0 <_fwalk_reent>:
 80075b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b4:	4606      	mov	r6, r0
 80075b6:	4688      	mov	r8, r1
 80075b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075bc:	2700      	movs	r7, #0
 80075be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075c2:	f1b9 0901 	subs.w	r9, r9, #1
 80075c6:	d505      	bpl.n	80075d4 <_fwalk_reent+0x24>
 80075c8:	6824      	ldr	r4, [r4, #0]
 80075ca:	2c00      	cmp	r4, #0
 80075cc:	d1f7      	bne.n	80075be <_fwalk_reent+0xe>
 80075ce:	4638      	mov	r0, r7
 80075d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075d4:	89ab      	ldrh	r3, [r5, #12]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d907      	bls.n	80075ea <_fwalk_reent+0x3a>
 80075da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075de:	3301      	adds	r3, #1
 80075e0:	d003      	beq.n	80075ea <_fwalk_reent+0x3a>
 80075e2:	4629      	mov	r1, r5
 80075e4:	4630      	mov	r0, r6
 80075e6:	47c0      	blx	r8
 80075e8:	4307      	orrs	r7, r0
 80075ea:	3568      	adds	r5, #104	; 0x68
 80075ec:	e7e9      	b.n	80075c2 <_fwalk_reent+0x12>

080075ee <__retarget_lock_init_recursive>:
 80075ee:	4770      	bx	lr

080075f0 <__retarget_lock_acquire_recursive>:
 80075f0:	4770      	bx	lr

080075f2 <__retarget_lock_release_recursive>:
 80075f2:	4770      	bx	lr

080075f4 <memmove>:
 80075f4:	4288      	cmp	r0, r1
 80075f6:	b510      	push	{r4, lr}
 80075f8:	eb01 0402 	add.w	r4, r1, r2
 80075fc:	d902      	bls.n	8007604 <memmove+0x10>
 80075fe:	4284      	cmp	r4, r0
 8007600:	4623      	mov	r3, r4
 8007602:	d807      	bhi.n	8007614 <memmove+0x20>
 8007604:	1e43      	subs	r3, r0, #1
 8007606:	42a1      	cmp	r1, r4
 8007608:	d008      	beq.n	800761c <memmove+0x28>
 800760a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800760e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007612:	e7f8      	b.n	8007606 <memmove+0x12>
 8007614:	4402      	add	r2, r0
 8007616:	4601      	mov	r1, r0
 8007618:	428a      	cmp	r2, r1
 800761a:	d100      	bne.n	800761e <memmove+0x2a>
 800761c:	bd10      	pop	{r4, pc}
 800761e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007626:	e7f7      	b.n	8007618 <memmove+0x24>

08007628 <__malloc_lock>:
 8007628:	4801      	ldr	r0, [pc, #4]	; (8007630 <__malloc_lock+0x8>)
 800762a:	f7ff bfe1 	b.w	80075f0 <__retarget_lock_acquire_recursive>
 800762e:	bf00      	nop
 8007630:	20000b0c 	.word	0x20000b0c

08007634 <__malloc_unlock>:
 8007634:	4801      	ldr	r0, [pc, #4]	; (800763c <__malloc_unlock+0x8>)
 8007636:	f7ff bfdc 	b.w	80075f2 <__retarget_lock_release_recursive>
 800763a:	bf00      	nop
 800763c:	20000b0c 	.word	0x20000b0c

08007640 <_realloc_r>:
 8007640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007644:	4680      	mov	r8, r0
 8007646:	4614      	mov	r4, r2
 8007648:	460e      	mov	r6, r1
 800764a:	b921      	cbnz	r1, 8007656 <_realloc_r+0x16>
 800764c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007650:	4611      	mov	r1, r2
 8007652:	f7fe bfbd 	b.w	80065d0 <_malloc_r>
 8007656:	b92a      	cbnz	r2, 8007664 <_realloc_r+0x24>
 8007658:	f7fe ff4e 	bl	80064f8 <_free_r>
 800765c:	4625      	mov	r5, r4
 800765e:	4628      	mov	r0, r5
 8007660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007664:	f000 faa0 	bl	8007ba8 <_malloc_usable_size_r>
 8007668:	4284      	cmp	r4, r0
 800766a:	4607      	mov	r7, r0
 800766c:	d802      	bhi.n	8007674 <_realloc_r+0x34>
 800766e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007672:	d812      	bhi.n	800769a <_realloc_r+0x5a>
 8007674:	4621      	mov	r1, r4
 8007676:	4640      	mov	r0, r8
 8007678:	f7fe ffaa 	bl	80065d0 <_malloc_r>
 800767c:	4605      	mov	r5, r0
 800767e:	2800      	cmp	r0, #0
 8007680:	d0ed      	beq.n	800765e <_realloc_r+0x1e>
 8007682:	42bc      	cmp	r4, r7
 8007684:	4622      	mov	r2, r4
 8007686:	4631      	mov	r1, r6
 8007688:	bf28      	it	cs
 800768a:	463a      	movcs	r2, r7
 800768c:	f7fe fa4e 	bl	8005b2c <memcpy>
 8007690:	4631      	mov	r1, r6
 8007692:	4640      	mov	r0, r8
 8007694:	f7fe ff30 	bl	80064f8 <_free_r>
 8007698:	e7e1      	b.n	800765e <_realloc_r+0x1e>
 800769a:	4635      	mov	r5, r6
 800769c:	e7df      	b.n	800765e <_realloc_r+0x1e>

0800769e <__sfputc_r>:
 800769e:	6893      	ldr	r3, [r2, #8]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	b410      	push	{r4}
 80076a6:	6093      	str	r3, [r2, #8]
 80076a8:	da08      	bge.n	80076bc <__sfputc_r+0x1e>
 80076aa:	6994      	ldr	r4, [r2, #24]
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	db01      	blt.n	80076b4 <__sfputc_r+0x16>
 80076b0:	290a      	cmp	r1, #10
 80076b2:	d103      	bne.n	80076bc <__sfputc_r+0x1e>
 80076b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076b8:	f000 b94a 	b.w	8007950 <__swbuf_r>
 80076bc:	6813      	ldr	r3, [r2, #0]
 80076be:	1c58      	adds	r0, r3, #1
 80076c0:	6010      	str	r0, [r2, #0]
 80076c2:	7019      	strb	r1, [r3, #0]
 80076c4:	4608      	mov	r0, r1
 80076c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <__sfputs_r>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	4606      	mov	r6, r0
 80076d0:	460f      	mov	r7, r1
 80076d2:	4614      	mov	r4, r2
 80076d4:	18d5      	adds	r5, r2, r3
 80076d6:	42ac      	cmp	r4, r5
 80076d8:	d101      	bne.n	80076de <__sfputs_r+0x12>
 80076da:	2000      	movs	r0, #0
 80076dc:	e007      	b.n	80076ee <__sfputs_r+0x22>
 80076de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e2:	463a      	mov	r2, r7
 80076e4:	4630      	mov	r0, r6
 80076e6:	f7ff ffda 	bl	800769e <__sfputc_r>
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	d1f3      	bne.n	80076d6 <__sfputs_r+0xa>
 80076ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076f0 <_vfiprintf_r>:
 80076f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	460d      	mov	r5, r1
 80076f6:	b09d      	sub	sp, #116	; 0x74
 80076f8:	4614      	mov	r4, r2
 80076fa:	4698      	mov	r8, r3
 80076fc:	4606      	mov	r6, r0
 80076fe:	b118      	cbz	r0, 8007708 <_vfiprintf_r+0x18>
 8007700:	6983      	ldr	r3, [r0, #24]
 8007702:	b90b      	cbnz	r3, 8007708 <_vfiprintf_r+0x18>
 8007704:	f7ff fec4 	bl	8007490 <__sinit>
 8007708:	4b89      	ldr	r3, [pc, #548]	; (8007930 <_vfiprintf_r+0x240>)
 800770a:	429d      	cmp	r5, r3
 800770c:	d11b      	bne.n	8007746 <_vfiprintf_r+0x56>
 800770e:	6875      	ldr	r5, [r6, #4]
 8007710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007712:	07d9      	lsls	r1, r3, #31
 8007714:	d405      	bmi.n	8007722 <_vfiprintf_r+0x32>
 8007716:	89ab      	ldrh	r3, [r5, #12]
 8007718:	059a      	lsls	r2, r3, #22
 800771a:	d402      	bmi.n	8007722 <_vfiprintf_r+0x32>
 800771c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800771e:	f7ff ff67 	bl	80075f0 <__retarget_lock_acquire_recursive>
 8007722:	89ab      	ldrh	r3, [r5, #12]
 8007724:	071b      	lsls	r3, r3, #28
 8007726:	d501      	bpl.n	800772c <_vfiprintf_r+0x3c>
 8007728:	692b      	ldr	r3, [r5, #16]
 800772a:	b9eb      	cbnz	r3, 8007768 <_vfiprintf_r+0x78>
 800772c:	4629      	mov	r1, r5
 800772e:	4630      	mov	r0, r6
 8007730:	f000 f960 	bl	80079f4 <__swsetup_r>
 8007734:	b1c0      	cbz	r0, 8007768 <_vfiprintf_r+0x78>
 8007736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007738:	07dc      	lsls	r4, r3, #31
 800773a:	d50e      	bpl.n	800775a <_vfiprintf_r+0x6a>
 800773c:	f04f 30ff 	mov.w	r0, #4294967295
 8007740:	b01d      	add	sp, #116	; 0x74
 8007742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007746:	4b7b      	ldr	r3, [pc, #492]	; (8007934 <_vfiprintf_r+0x244>)
 8007748:	429d      	cmp	r5, r3
 800774a:	d101      	bne.n	8007750 <_vfiprintf_r+0x60>
 800774c:	68b5      	ldr	r5, [r6, #8]
 800774e:	e7df      	b.n	8007710 <_vfiprintf_r+0x20>
 8007750:	4b79      	ldr	r3, [pc, #484]	; (8007938 <_vfiprintf_r+0x248>)
 8007752:	429d      	cmp	r5, r3
 8007754:	bf08      	it	eq
 8007756:	68f5      	ldreq	r5, [r6, #12]
 8007758:	e7da      	b.n	8007710 <_vfiprintf_r+0x20>
 800775a:	89ab      	ldrh	r3, [r5, #12]
 800775c:	0598      	lsls	r0, r3, #22
 800775e:	d4ed      	bmi.n	800773c <_vfiprintf_r+0x4c>
 8007760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007762:	f7ff ff46 	bl	80075f2 <__retarget_lock_release_recursive>
 8007766:	e7e9      	b.n	800773c <_vfiprintf_r+0x4c>
 8007768:	2300      	movs	r3, #0
 800776a:	9309      	str	r3, [sp, #36]	; 0x24
 800776c:	2320      	movs	r3, #32
 800776e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007772:	f8cd 800c 	str.w	r8, [sp, #12]
 8007776:	2330      	movs	r3, #48	; 0x30
 8007778:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800793c <_vfiprintf_r+0x24c>
 800777c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007780:	f04f 0901 	mov.w	r9, #1
 8007784:	4623      	mov	r3, r4
 8007786:	469a      	mov	sl, r3
 8007788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800778c:	b10a      	cbz	r2, 8007792 <_vfiprintf_r+0xa2>
 800778e:	2a25      	cmp	r2, #37	; 0x25
 8007790:	d1f9      	bne.n	8007786 <_vfiprintf_r+0x96>
 8007792:	ebba 0b04 	subs.w	fp, sl, r4
 8007796:	d00b      	beq.n	80077b0 <_vfiprintf_r+0xc0>
 8007798:	465b      	mov	r3, fp
 800779a:	4622      	mov	r2, r4
 800779c:	4629      	mov	r1, r5
 800779e:	4630      	mov	r0, r6
 80077a0:	f7ff ff94 	bl	80076cc <__sfputs_r>
 80077a4:	3001      	adds	r0, #1
 80077a6:	f000 80aa 	beq.w	80078fe <_vfiprintf_r+0x20e>
 80077aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077ac:	445a      	add	r2, fp
 80077ae:	9209      	str	r2, [sp, #36]	; 0x24
 80077b0:	f89a 3000 	ldrb.w	r3, [sl]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 80a2 	beq.w	80078fe <_vfiprintf_r+0x20e>
 80077ba:	2300      	movs	r3, #0
 80077bc:	f04f 32ff 	mov.w	r2, #4294967295
 80077c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077c4:	f10a 0a01 	add.w	sl, sl, #1
 80077c8:	9304      	str	r3, [sp, #16]
 80077ca:	9307      	str	r3, [sp, #28]
 80077cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077d0:	931a      	str	r3, [sp, #104]	; 0x68
 80077d2:	4654      	mov	r4, sl
 80077d4:	2205      	movs	r2, #5
 80077d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077da:	4858      	ldr	r0, [pc, #352]	; (800793c <_vfiprintf_r+0x24c>)
 80077dc:	f7f8 fd18 	bl	8000210 <memchr>
 80077e0:	9a04      	ldr	r2, [sp, #16]
 80077e2:	b9d8      	cbnz	r0, 800781c <_vfiprintf_r+0x12c>
 80077e4:	06d1      	lsls	r1, r2, #27
 80077e6:	bf44      	itt	mi
 80077e8:	2320      	movmi	r3, #32
 80077ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ee:	0713      	lsls	r3, r2, #28
 80077f0:	bf44      	itt	mi
 80077f2:	232b      	movmi	r3, #43	; 0x2b
 80077f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077f8:	f89a 3000 	ldrb.w	r3, [sl]
 80077fc:	2b2a      	cmp	r3, #42	; 0x2a
 80077fe:	d015      	beq.n	800782c <_vfiprintf_r+0x13c>
 8007800:	9a07      	ldr	r2, [sp, #28]
 8007802:	4654      	mov	r4, sl
 8007804:	2000      	movs	r0, #0
 8007806:	f04f 0c0a 	mov.w	ip, #10
 800780a:	4621      	mov	r1, r4
 800780c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007810:	3b30      	subs	r3, #48	; 0x30
 8007812:	2b09      	cmp	r3, #9
 8007814:	d94e      	bls.n	80078b4 <_vfiprintf_r+0x1c4>
 8007816:	b1b0      	cbz	r0, 8007846 <_vfiprintf_r+0x156>
 8007818:	9207      	str	r2, [sp, #28]
 800781a:	e014      	b.n	8007846 <_vfiprintf_r+0x156>
 800781c:	eba0 0308 	sub.w	r3, r0, r8
 8007820:	fa09 f303 	lsl.w	r3, r9, r3
 8007824:	4313      	orrs	r3, r2
 8007826:	9304      	str	r3, [sp, #16]
 8007828:	46a2      	mov	sl, r4
 800782a:	e7d2      	b.n	80077d2 <_vfiprintf_r+0xe2>
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	1d19      	adds	r1, r3, #4
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	9103      	str	r1, [sp, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	bfbb      	ittet	lt
 8007838:	425b      	neglt	r3, r3
 800783a:	f042 0202 	orrlt.w	r2, r2, #2
 800783e:	9307      	strge	r3, [sp, #28]
 8007840:	9307      	strlt	r3, [sp, #28]
 8007842:	bfb8      	it	lt
 8007844:	9204      	strlt	r2, [sp, #16]
 8007846:	7823      	ldrb	r3, [r4, #0]
 8007848:	2b2e      	cmp	r3, #46	; 0x2e
 800784a:	d10c      	bne.n	8007866 <_vfiprintf_r+0x176>
 800784c:	7863      	ldrb	r3, [r4, #1]
 800784e:	2b2a      	cmp	r3, #42	; 0x2a
 8007850:	d135      	bne.n	80078be <_vfiprintf_r+0x1ce>
 8007852:	9b03      	ldr	r3, [sp, #12]
 8007854:	1d1a      	adds	r2, r3, #4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	9203      	str	r2, [sp, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	bfb8      	it	lt
 800785e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007862:	3402      	adds	r4, #2
 8007864:	9305      	str	r3, [sp, #20]
 8007866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800794c <_vfiprintf_r+0x25c>
 800786a:	7821      	ldrb	r1, [r4, #0]
 800786c:	2203      	movs	r2, #3
 800786e:	4650      	mov	r0, sl
 8007870:	f7f8 fcce 	bl	8000210 <memchr>
 8007874:	b140      	cbz	r0, 8007888 <_vfiprintf_r+0x198>
 8007876:	2340      	movs	r3, #64	; 0x40
 8007878:	eba0 000a 	sub.w	r0, r0, sl
 800787c:	fa03 f000 	lsl.w	r0, r3, r0
 8007880:	9b04      	ldr	r3, [sp, #16]
 8007882:	4303      	orrs	r3, r0
 8007884:	3401      	adds	r4, #1
 8007886:	9304      	str	r3, [sp, #16]
 8007888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800788c:	482c      	ldr	r0, [pc, #176]	; (8007940 <_vfiprintf_r+0x250>)
 800788e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007892:	2206      	movs	r2, #6
 8007894:	f7f8 fcbc 	bl	8000210 <memchr>
 8007898:	2800      	cmp	r0, #0
 800789a:	d03f      	beq.n	800791c <_vfiprintf_r+0x22c>
 800789c:	4b29      	ldr	r3, [pc, #164]	; (8007944 <_vfiprintf_r+0x254>)
 800789e:	bb1b      	cbnz	r3, 80078e8 <_vfiprintf_r+0x1f8>
 80078a0:	9b03      	ldr	r3, [sp, #12]
 80078a2:	3307      	adds	r3, #7
 80078a4:	f023 0307 	bic.w	r3, r3, #7
 80078a8:	3308      	adds	r3, #8
 80078aa:	9303      	str	r3, [sp, #12]
 80078ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ae:	443b      	add	r3, r7
 80078b0:	9309      	str	r3, [sp, #36]	; 0x24
 80078b2:	e767      	b.n	8007784 <_vfiprintf_r+0x94>
 80078b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80078b8:	460c      	mov	r4, r1
 80078ba:	2001      	movs	r0, #1
 80078bc:	e7a5      	b.n	800780a <_vfiprintf_r+0x11a>
 80078be:	2300      	movs	r3, #0
 80078c0:	3401      	adds	r4, #1
 80078c2:	9305      	str	r3, [sp, #20]
 80078c4:	4619      	mov	r1, r3
 80078c6:	f04f 0c0a 	mov.w	ip, #10
 80078ca:	4620      	mov	r0, r4
 80078cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078d0:	3a30      	subs	r2, #48	; 0x30
 80078d2:	2a09      	cmp	r2, #9
 80078d4:	d903      	bls.n	80078de <_vfiprintf_r+0x1ee>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0c5      	beq.n	8007866 <_vfiprintf_r+0x176>
 80078da:	9105      	str	r1, [sp, #20]
 80078dc:	e7c3      	b.n	8007866 <_vfiprintf_r+0x176>
 80078de:	fb0c 2101 	mla	r1, ip, r1, r2
 80078e2:	4604      	mov	r4, r0
 80078e4:	2301      	movs	r3, #1
 80078e6:	e7f0      	b.n	80078ca <_vfiprintf_r+0x1da>
 80078e8:	ab03      	add	r3, sp, #12
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	462a      	mov	r2, r5
 80078ee:	4b16      	ldr	r3, [pc, #88]	; (8007948 <_vfiprintf_r+0x258>)
 80078f0:	a904      	add	r1, sp, #16
 80078f2:	4630      	mov	r0, r6
 80078f4:	f7fb f9bc 	bl	8002c70 <_printf_float>
 80078f8:	4607      	mov	r7, r0
 80078fa:	1c78      	adds	r0, r7, #1
 80078fc:	d1d6      	bne.n	80078ac <_vfiprintf_r+0x1bc>
 80078fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007900:	07d9      	lsls	r1, r3, #31
 8007902:	d405      	bmi.n	8007910 <_vfiprintf_r+0x220>
 8007904:	89ab      	ldrh	r3, [r5, #12]
 8007906:	059a      	lsls	r2, r3, #22
 8007908:	d402      	bmi.n	8007910 <_vfiprintf_r+0x220>
 800790a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800790c:	f7ff fe71 	bl	80075f2 <__retarget_lock_release_recursive>
 8007910:	89ab      	ldrh	r3, [r5, #12]
 8007912:	065b      	lsls	r3, r3, #25
 8007914:	f53f af12 	bmi.w	800773c <_vfiprintf_r+0x4c>
 8007918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800791a:	e711      	b.n	8007740 <_vfiprintf_r+0x50>
 800791c:	ab03      	add	r3, sp, #12
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	462a      	mov	r2, r5
 8007922:	4b09      	ldr	r3, [pc, #36]	; (8007948 <_vfiprintf_r+0x258>)
 8007924:	a904      	add	r1, sp, #16
 8007926:	4630      	mov	r0, r6
 8007928:	f7fb fc46 	bl	80031b8 <_printf_i>
 800792c:	e7e4      	b.n	80078f8 <_vfiprintf_r+0x208>
 800792e:	bf00      	nop
 8007930:	080082ac 	.word	0x080082ac
 8007934:	080082cc 	.word	0x080082cc
 8007938:	0800828c 	.word	0x0800828c
 800793c:	08008224 	.word	0x08008224
 8007940:	0800822e 	.word	0x0800822e
 8007944:	08002c71 	.word	0x08002c71
 8007948:	080076cd 	.word	0x080076cd
 800794c:	0800822a 	.word	0x0800822a

08007950 <__swbuf_r>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	460e      	mov	r6, r1
 8007954:	4614      	mov	r4, r2
 8007956:	4605      	mov	r5, r0
 8007958:	b118      	cbz	r0, 8007962 <__swbuf_r+0x12>
 800795a:	6983      	ldr	r3, [r0, #24]
 800795c:	b90b      	cbnz	r3, 8007962 <__swbuf_r+0x12>
 800795e:	f7ff fd97 	bl	8007490 <__sinit>
 8007962:	4b21      	ldr	r3, [pc, #132]	; (80079e8 <__swbuf_r+0x98>)
 8007964:	429c      	cmp	r4, r3
 8007966:	d12b      	bne.n	80079c0 <__swbuf_r+0x70>
 8007968:	686c      	ldr	r4, [r5, #4]
 800796a:	69a3      	ldr	r3, [r4, #24]
 800796c:	60a3      	str	r3, [r4, #8]
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	071a      	lsls	r2, r3, #28
 8007972:	d52f      	bpl.n	80079d4 <__swbuf_r+0x84>
 8007974:	6923      	ldr	r3, [r4, #16]
 8007976:	b36b      	cbz	r3, 80079d4 <__swbuf_r+0x84>
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	6820      	ldr	r0, [r4, #0]
 800797c:	1ac0      	subs	r0, r0, r3
 800797e:	6963      	ldr	r3, [r4, #20]
 8007980:	b2f6      	uxtb	r6, r6
 8007982:	4283      	cmp	r3, r0
 8007984:	4637      	mov	r7, r6
 8007986:	dc04      	bgt.n	8007992 <__swbuf_r+0x42>
 8007988:	4621      	mov	r1, r4
 800798a:	4628      	mov	r0, r5
 800798c:	f7ff fcec 	bl	8007368 <_fflush_r>
 8007990:	bb30      	cbnz	r0, 80079e0 <__swbuf_r+0x90>
 8007992:	68a3      	ldr	r3, [r4, #8]
 8007994:	3b01      	subs	r3, #1
 8007996:	60a3      	str	r3, [r4, #8]
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	6022      	str	r2, [r4, #0]
 800799e:	701e      	strb	r6, [r3, #0]
 80079a0:	6963      	ldr	r3, [r4, #20]
 80079a2:	3001      	adds	r0, #1
 80079a4:	4283      	cmp	r3, r0
 80079a6:	d004      	beq.n	80079b2 <__swbuf_r+0x62>
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	07db      	lsls	r3, r3, #31
 80079ac:	d506      	bpl.n	80079bc <__swbuf_r+0x6c>
 80079ae:	2e0a      	cmp	r6, #10
 80079b0:	d104      	bne.n	80079bc <__swbuf_r+0x6c>
 80079b2:	4621      	mov	r1, r4
 80079b4:	4628      	mov	r0, r5
 80079b6:	f7ff fcd7 	bl	8007368 <_fflush_r>
 80079ba:	b988      	cbnz	r0, 80079e0 <__swbuf_r+0x90>
 80079bc:	4638      	mov	r0, r7
 80079be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c0:	4b0a      	ldr	r3, [pc, #40]	; (80079ec <__swbuf_r+0x9c>)
 80079c2:	429c      	cmp	r4, r3
 80079c4:	d101      	bne.n	80079ca <__swbuf_r+0x7a>
 80079c6:	68ac      	ldr	r4, [r5, #8]
 80079c8:	e7cf      	b.n	800796a <__swbuf_r+0x1a>
 80079ca:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <__swbuf_r+0xa0>)
 80079cc:	429c      	cmp	r4, r3
 80079ce:	bf08      	it	eq
 80079d0:	68ec      	ldreq	r4, [r5, #12]
 80079d2:	e7ca      	b.n	800796a <__swbuf_r+0x1a>
 80079d4:	4621      	mov	r1, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 f80c 	bl	80079f4 <__swsetup_r>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d0cb      	beq.n	8007978 <__swbuf_r+0x28>
 80079e0:	f04f 37ff 	mov.w	r7, #4294967295
 80079e4:	e7ea      	b.n	80079bc <__swbuf_r+0x6c>
 80079e6:	bf00      	nop
 80079e8:	080082ac 	.word	0x080082ac
 80079ec:	080082cc 	.word	0x080082cc
 80079f0:	0800828c 	.word	0x0800828c

080079f4 <__swsetup_r>:
 80079f4:	4b32      	ldr	r3, [pc, #200]	; (8007ac0 <__swsetup_r+0xcc>)
 80079f6:	b570      	push	{r4, r5, r6, lr}
 80079f8:	681d      	ldr	r5, [r3, #0]
 80079fa:	4606      	mov	r6, r0
 80079fc:	460c      	mov	r4, r1
 80079fe:	b125      	cbz	r5, 8007a0a <__swsetup_r+0x16>
 8007a00:	69ab      	ldr	r3, [r5, #24]
 8007a02:	b913      	cbnz	r3, 8007a0a <__swsetup_r+0x16>
 8007a04:	4628      	mov	r0, r5
 8007a06:	f7ff fd43 	bl	8007490 <__sinit>
 8007a0a:	4b2e      	ldr	r3, [pc, #184]	; (8007ac4 <__swsetup_r+0xd0>)
 8007a0c:	429c      	cmp	r4, r3
 8007a0e:	d10f      	bne.n	8007a30 <__swsetup_r+0x3c>
 8007a10:	686c      	ldr	r4, [r5, #4]
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a18:	0719      	lsls	r1, r3, #28
 8007a1a:	d42c      	bmi.n	8007a76 <__swsetup_r+0x82>
 8007a1c:	06dd      	lsls	r5, r3, #27
 8007a1e:	d411      	bmi.n	8007a44 <__swsetup_r+0x50>
 8007a20:	2309      	movs	r3, #9
 8007a22:	6033      	str	r3, [r6, #0]
 8007a24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a28:	81a3      	strh	r3, [r4, #12]
 8007a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2e:	e03e      	b.n	8007aae <__swsetup_r+0xba>
 8007a30:	4b25      	ldr	r3, [pc, #148]	; (8007ac8 <__swsetup_r+0xd4>)
 8007a32:	429c      	cmp	r4, r3
 8007a34:	d101      	bne.n	8007a3a <__swsetup_r+0x46>
 8007a36:	68ac      	ldr	r4, [r5, #8]
 8007a38:	e7eb      	b.n	8007a12 <__swsetup_r+0x1e>
 8007a3a:	4b24      	ldr	r3, [pc, #144]	; (8007acc <__swsetup_r+0xd8>)
 8007a3c:	429c      	cmp	r4, r3
 8007a3e:	bf08      	it	eq
 8007a40:	68ec      	ldreq	r4, [r5, #12]
 8007a42:	e7e6      	b.n	8007a12 <__swsetup_r+0x1e>
 8007a44:	0758      	lsls	r0, r3, #29
 8007a46:	d512      	bpl.n	8007a6e <__swsetup_r+0x7a>
 8007a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a4a:	b141      	cbz	r1, 8007a5e <__swsetup_r+0x6a>
 8007a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a50:	4299      	cmp	r1, r3
 8007a52:	d002      	beq.n	8007a5a <__swsetup_r+0x66>
 8007a54:	4630      	mov	r0, r6
 8007a56:	f7fe fd4f 	bl	80064f8 <_free_r>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	6363      	str	r3, [r4, #52]	; 0x34
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a64:	81a3      	strh	r3, [r4, #12]
 8007a66:	2300      	movs	r3, #0
 8007a68:	6063      	str	r3, [r4, #4]
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	f043 0308 	orr.w	r3, r3, #8
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	b94b      	cbnz	r3, 8007a8e <__swsetup_r+0x9a>
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a84:	d003      	beq.n	8007a8e <__swsetup_r+0x9a>
 8007a86:	4621      	mov	r1, r4
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f000 f84d 	bl	8007b28 <__smakebuf_r>
 8007a8e:	89a0      	ldrh	r0, [r4, #12]
 8007a90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a94:	f010 0301 	ands.w	r3, r0, #1
 8007a98:	d00a      	beq.n	8007ab0 <__swsetup_r+0xbc>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60a3      	str	r3, [r4, #8]
 8007a9e:	6963      	ldr	r3, [r4, #20]
 8007aa0:	425b      	negs	r3, r3
 8007aa2:	61a3      	str	r3, [r4, #24]
 8007aa4:	6923      	ldr	r3, [r4, #16]
 8007aa6:	b943      	cbnz	r3, 8007aba <__swsetup_r+0xc6>
 8007aa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007aac:	d1ba      	bne.n	8007a24 <__swsetup_r+0x30>
 8007aae:	bd70      	pop	{r4, r5, r6, pc}
 8007ab0:	0781      	lsls	r1, r0, #30
 8007ab2:	bf58      	it	pl
 8007ab4:	6963      	ldrpl	r3, [r4, #20]
 8007ab6:	60a3      	str	r3, [r4, #8]
 8007ab8:	e7f4      	b.n	8007aa4 <__swsetup_r+0xb0>
 8007aba:	2000      	movs	r0, #0
 8007abc:	e7f7      	b.n	8007aae <__swsetup_r+0xba>
 8007abe:	bf00      	nop
 8007ac0:	20000004 	.word	0x20000004
 8007ac4:	080082ac 	.word	0x080082ac
 8007ac8:	080082cc 	.word	0x080082cc
 8007acc:	0800828c 	.word	0x0800828c

08007ad0 <abort>:
 8007ad0:	b508      	push	{r3, lr}
 8007ad2:	2006      	movs	r0, #6
 8007ad4:	f000 f898 	bl	8007c08 <raise>
 8007ad8:	2001      	movs	r0, #1
 8007ada:	f7f9 fcd6 	bl	800148a <_exit>

08007ade <__swhatbuf_r>:
 8007ade:	b570      	push	{r4, r5, r6, lr}
 8007ae0:	460e      	mov	r6, r1
 8007ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae6:	2900      	cmp	r1, #0
 8007ae8:	b096      	sub	sp, #88	; 0x58
 8007aea:	4614      	mov	r4, r2
 8007aec:	461d      	mov	r5, r3
 8007aee:	da08      	bge.n	8007b02 <__swhatbuf_r+0x24>
 8007af0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	602a      	str	r2, [r5, #0]
 8007af8:	061a      	lsls	r2, r3, #24
 8007afa:	d410      	bmi.n	8007b1e <__swhatbuf_r+0x40>
 8007afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b00:	e00e      	b.n	8007b20 <__swhatbuf_r+0x42>
 8007b02:	466a      	mov	r2, sp
 8007b04:	f000 f89c 	bl	8007c40 <_fstat_r>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	dbf1      	blt.n	8007af0 <__swhatbuf_r+0x12>
 8007b0c:	9a01      	ldr	r2, [sp, #4]
 8007b0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b16:	425a      	negs	r2, r3
 8007b18:	415a      	adcs	r2, r3
 8007b1a:	602a      	str	r2, [r5, #0]
 8007b1c:	e7ee      	b.n	8007afc <__swhatbuf_r+0x1e>
 8007b1e:	2340      	movs	r3, #64	; 0x40
 8007b20:	2000      	movs	r0, #0
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	b016      	add	sp, #88	; 0x58
 8007b26:	bd70      	pop	{r4, r5, r6, pc}

08007b28 <__smakebuf_r>:
 8007b28:	898b      	ldrh	r3, [r1, #12]
 8007b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b2c:	079d      	lsls	r5, r3, #30
 8007b2e:	4606      	mov	r6, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	d507      	bpl.n	8007b44 <__smakebuf_r+0x1c>
 8007b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	6123      	str	r3, [r4, #16]
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	6163      	str	r3, [r4, #20]
 8007b40:	b002      	add	sp, #8
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	ab01      	add	r3, sp, #4
 8007b46:	466a      	mov	r2, sp
 8007b48:	f7ff ffc9 	bl	8007ade <__swhatbuf_r>
 8007b4c:	9900      	ldr	r1, [sp, #0]
 8007b4e:	4605      	mov	r5, r0
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7fe fd3d 	bl	80065d0 <_malloc_r>
 8007b56:	b948      	cbnz	r0, 8007b6c <__smakebuf_r+0x44>
 8007b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5c:	059a      	lsls	r2, r3, #22
 8007b5e:	d4ef      	bmi.n	8007b40 <__smakebuf_r+0x18>
 8007b60:	f023 0303 	bic.w	r3, r3, #3
 8007b64:	f043 0302 	orr.w	r3, r3, #2
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	e7e3      	b.n	8007b34 <__smakebuf_r+0xc>
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <__smakebuf_r+0x7c>)
 8007b6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	6020      	str	r0, [r4, #0]
 8007b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	9b00      	ldr	r3, [sp, #0]
 8007b7c:	6163      	str	r3, [r4, #20]
 8007b7e:	9b01      	ldr	r3, [sp, #4]
 8007b80:	6120      	str	r0, [r4, #16]
 8007b82:	b15b      	cbz	r3, 8007b9c <__smakebuf_r+0x74>
 8007b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f000 f86b 	bl	8007c64 <_isatty_r>
 8007b8e:	b128      	cbz	r0, 8007b9c <__smakebuf_r+0x74>
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	f023 0303 	bic.w	r3, r3, #3
 8007b96:	f043 0301 	orr.w	r3, r3, #1
 8007b9a:	81a3      	strh	r3, [r4, #12]
 8007b9c:	89a0      	ldrh	r0, [r4, #12]
 8007b9e:	4305      	orrs	r5, r0
 8007ba0:	81a5      	strh	r5, [r4, #12]
 8007ba2:	e7cd      	b.n	8007b40 <__smakebuf_r+0x18>
 8007ba4:	08007429 	.word	0x08007429

08007ba8 <_malloc_usable_size_r>:
 8007ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bac:	1f18      	subs	r0, r3, #4
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	bfbc      	itt	lt
 8007bb2:	580b      	ldrlt	r3, [r1, r0]
 8007bb4:	18c0      	addlt	r0, r0, r3
 8007bb6:	4770      	bx	lr

08007bb8 <_raise_r>:
 8007bb8:	291f      	cmp	r1, #31
 8007bba:	b538      	push	{r3, r4, r5, lr}
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	460d      	mov	r5, r1
 8007bc0:	d904      	bls.n	8007bcc <_raise_r+0x14>
 8007bc2:	2316      	movs	r3, #22
 8007bc4:	6003      	str	r3, [r0, #0]
 8007bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007bce:	b112      	cbz	r2, 8007bd6 <_raise_r+0x1e>
 8007bd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bd4:	b94b      	cbnz	r3, 8007bea <_raise_r+0x32>
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f000 f830 	bl	8007c3c <_getpid_r>
 8007bdc:	462a      	mov	r2, r5
 8007bde:	4601      	mov	r1, r0
 8007be0:	4620      	mov	r0, r4
 8007be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007be6:	f000 b817 	b.w	8007c18 <_kill_r>
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d00a      	beq.n	8007c04 <_raise_r+0x4c>
 8007bee:	1c59      	adds	r1, r3, #1
 8007bf0:	d103      	bne.n	8007bfa <_raise_r+0x42>
 8007bf2:	2316      	movs	r3, #22
 8007bf4:	6003      	str	r3, [r0, #0]
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	e7e7      	b.n	8007bca <_raise_r+0x12>
 8007bfa:	2400      	movs	r4, #0
 8007bfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c00:	4628      	mov	r0, r5
 8007c02:	4798      	blx	r3
 8007c04:	2000      	movs	r0, #0
 8007c06:	e7e0      	b.n	8007bca <_raise_r+0x12>

08007c08 <raise>:
 8007c08:	4b02      	ldr	r3, [pc, #8]	; (8007c14 <raise+0xc>)
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	f7ff bfd3 	b.w	8007bb8 <_raise_r>
 8007c12:	bf00      	nop
 8007c14:	20000004 	.word	0x20000004

08007c18 <_kill_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d07      	ldr	r5, [pc, #28]	; (8007c38 <_kill_r+0x20>)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	4611      	mov	r1, r2
 8007c24:	602b      	str	r3, [r5, #0]
 8007c26:	f7f9 fc20 	bl	800146a <_kill>
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	d102      	bne.n	8007c34 <_kill_r+0x1c>
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	b103      	cbz	r3, 8007c34 <_kill_r+0x1c>
 8007c32:	6023      	str	r3, [r4, #0]
 8007c34:	bd38      	pop	{r3, r4, r5, pc}
 8007c36:	bf00      	nop
 8007c38:	20000b08 	.word	0x20000b08

08007c3c <_getpid_r>:
 8007c3c:	f7f9 bc0d 	b.w	800145a <_getpid>

08007c40 <_fstat_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4d07      	ldr	r5, [pc, #28]	; (8007c60 <_fstat_r+0x20>)
 8007c44:	2300      	movs	r3, #0
 8007c46:	4604      	mov	r4, r0
 8007c48:	4608      	mov	r0, r1
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	f7f9 fc6b 	bl	8001528 <_fstat>
 8007c52:	1c43      	adds	r3, r0, #1
 8007c54:	d102      	bne.n	8007c5c <_fstat_r+0x1c>
 8007c56:	682b      	ldr	r3, [r5, #0]
 8007c58:	b103      	cbz	r3, 8007c5c <_fstat_r+0x1c>
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	bd38      	pop	{r3, r4, r5, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000b08 	.word	0x20000b08

08007c64 <_isatty_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d06      	ldr	r5, [pc, #24]	; (8007c80 <_isatty_r+0x1c>)
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	f7f9 fc6a 	bl	8001548 <_isatty>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_isatty_r+0x1a>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_isatty_r+0x1a>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	20000b08 	.word	0x20000b08

08007c84 <_init>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	bf00      	nop
 8007c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8a:	bc08      	pop	{r3}
 8007c8c:	469e      	mov	lr, r3
 8007c8e:	4770      	bx	lr

08007c90 <_fini>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	bf00      	nop
 8007c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c96:	bc08      	pop	{r3}
 8007c98:	469e      	mov	lr, r3
 8007c9a:	4770      	bx	lr
