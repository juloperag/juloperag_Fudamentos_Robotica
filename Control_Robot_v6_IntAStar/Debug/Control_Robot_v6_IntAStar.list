
Control_Robot_v6_IntAStar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a98  0800fbf0  0800fbf0  0001fbf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010688  08010688  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08010688  08010688  00020688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010690  08010690  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010690  08010690  00020690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010694  08010694  00020694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08010698  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009b20  200001f0  08010888  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009d10  08010888  00039d10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083fc  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b02  00000000  00000000  0003861c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0003a120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b8  00000000  00000000  0003a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011ceb  00000000  00000000  0003ad98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a45b  00000000  00000000  0004ca83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000599d2  00000000  00000000  00056ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b08b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037fc  00000000  00000000  000b0900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fbd4 	.word	0x0800fbd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800fbd4 	.word	0x0800fbd4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9dd 	b.w	8001094 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f86b 	bl	8000dc4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f85e 	bl	8000dc4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f84d 	bl	8000dc4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f83f 	bl	8000dc4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff fed3 	bl	8000b0c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc49 	bl	8000628 <__aeabi_dmul>
 8000d96:	f7ff ff1f 	bl	8000bd8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbca 	bl	8000534 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc40 	bl	8000628 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa82 	bl	80002b8 <__aeabi_dsub>
 8000db4:	f7ff ff10 	bl	8000bd8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <aplicattion_A_Star>:
#include "A_Star.h"
#include <float.h>
#include <math.h>

//-----------------------------------------------Funciones para la implementacion de A Star------------------------------------------------------------------
file_cell_t* aplicattion_A_Star(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float start_x, float start_y, float goal_x, float goal_y) {
 8001098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800109c:	f5ad 4dd5 	sub.w	sp, sp, #27264	; 0x6a80
 80010a0:	b087      	sub	sp, #28
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010a8:	f6a3 2374 	subw	r3, r3, #2676	; 0xa74
 80010ac:	6018      	str	r0, [r3, #0]
 80010ae:	4608      	mov	r0, r1
 80010b0:	4611      	mov	r1, r2
 80010b2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010b6:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 80010ba:	ed83 0a00 	vstr	s0, [r3]
 80010be:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010c2:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 80010c6:	edc3 0a00 	vstr	s1, [r3]
 80010ca:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010ce:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 80010d2:	ed83 1a00 	vstr	s2, [r3]
 80010d6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010da:	f6a3 2388 	subw	r3, r3, #2696	; 0xa88
 80010de:	edc3 1a00 	vstr	s3, [r3]
 80010e2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010e6:	f6a3 2375 	subw	r3, r3, #2677	; 0xa75
 80010ea:	4602      	mov	r2, r0
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010f2:	f6a3 2376 	subw	r3, r3, #2678	; 0xa76
 80010f6:	460a      	mov	r2, r1
 80010f8:	701a      	strb	r2, [r3, #0]
  //Variables
  file_cell_t *ptrFile;                           //Puntero a la ficha de la secuencia actual de A Star
  file_cell_t file_Open[100] = {0};               //Arreglo de fichas abiertas
 80010fa:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80010fe:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 8001102:	4618      	mov	r0, r3
 8001104:	f646 2340 	movw	r3, #27200	; 0x6a40
 8001108:	461a      	mov	r2, r3
 800110a:	2100      	movs	r1, #0
 800110c:	f006 ffd6 	bl	80080bc <memset>
  uint64_t file_Open_Availability = 0b1;          //Conjunto de bits que indica que fichas abiertas estan disponibles para la comparacion
 8001110:	f04f 0201 	mov.w	r2, #1
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	f507 41d5 	add.w	r1, r7, #27264	; 0x6a80
 800111c:	f101 0108 	add.w	r1, r1, #8
 8001120:	e9c1 2300 	strd	r2, r3, [r1]
  uint8_t bit_file_cell = 0;                      //bit de una ficha que indica su disponibilidad
 8001124:	2300      	movs	r3, #0
 8001126:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800112a:	f102 0270 	add.w	r2, r2, #112	; 0x70
 800112e:	7013      	strb	r3, [r2, #0]
  uint8_t index_ptr = 0;                          //Indice de la ficha de la secuencia actual de A Star
 8001130:	2300      	movs	r3, #0
 8001132:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001136:	f102 0207 	add.w	r2, r2, #7
 800113a:	7013      	strb	r3, [r2, #0]
  float min_h;                                    //Valor minimo de la heuristica H
  uint8_t index_file_Open;                        //Indice de la ficha de la ficha abierta a crear

  //----------------Se crea la ficha inicial----------------
  //Se crea la ficha inicial
  file_Open[0].num_parent = 0;
 800113c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001140:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  file_Open[0].cost_g = 0.0f;
 800114a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800114e:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  //Por medio de un puntero se asigna la ficha inicial
  ptrFile = &file_Open[0];
 800115a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800115e:	3b6c      	subs	r3, #108	; 0x6c
 8001160:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001164:	f102 0214 	add.w	r2, r2, #20
 8001168:	6013      	str	r3, [r2, #0]
  
  // ------------- Se identifica la celda inicial -----------
  for (int i = 0; i < row; i++) 
 800116a:	2300      	movs	r3, #0
 800116c:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001170:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e09d      	b.n	80012b4 <aplicattion_A_Star+0x21c>
  {
    for (int j = 0; j < colum; j++) 
 8001178:	2300      	movs	r3, #0
 800117a:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800117e:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e07e      	b.n	8001284 <aplicattion_A_Star+0x1ec>
    {
      if (grid[i][j].coor_x == start_x && grid[i][j].coor_y == start_y) 
 8001186:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800118a:	f103 0378 	add.w	r3, r3, #120	; 0x78
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001194:	fb02 f303 	mul.w	r3, r2, r3
 8001198:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 800119c:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	441a      	add	r2, r3
 80011a4:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80011a8:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2158      	movs	r1, #88	; 0x58
 80011b0:	fb01 f303 	mul.w	r3, r1, r3
 80011b4:	4413      	add	r3, r2
 80011b6:	3304      	adds	r3, #4
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80011c0:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 80011c4:	ed93 7a00 	vldr	s14, [r3]
 80011c8:	eeb4 7a67 	vcmp.f32	s14, s15
 80011cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d0:	d14d      	bne.n	800126e <aplicattion_A_Star+0x1d6>
 80011d2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80011d6:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 80011e8:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	441a      	add	r2, r3
 80011f0:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80011f4:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2158      	movs	r1, #88	; 0x58
 80011fc:	fb01 f303 	mul.w	r3, r1, r3
 8001200:	4413      	add	r3, r2
 8001202:	3308      	adds	r3, #8
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800120c:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 8001210:	ed93 7a00 	vldr	s14, [r3]
 8001214:	eeb4 7a67 	vcmp.f32	s14, s15
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	d127      	bne.n	800126e <aplicattion_A_Star+0x1d6>
      {
        ptrFile->ptrCell_file = &grid[i][j];  
 800121e:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001222:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 8001234:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	441a      	add	r2, r3
 800123c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001240:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2158      	movs	r1, #88	; 0x58
 8001248:	fb01 f303 	mul.w	r3, r1, r3
 800124c:	441a      	add	r2, r3
 800124e:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001252:	f103 0314 	add.w	r3, r3, #20
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	601a      	str	r2, [r3, #0]
        ptrFile->ptrCell_file->status  = OPEN;
 800125a:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800125e:	f103 0314 	add.w	r3, r3, #20
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        break;
 800126c:	e017      	b.n	800129e <aplicattion_A_Star+0x206>
    for (int j = 0; j < colum; j++) 
 800126e:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001272:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800127e:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001288:	f6a3 2376 	subw	r3, r3, #2678	; 0xa76
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001292:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	f6ff af74 	blt.w	8001186 <aplicattion_A_Star+0xee>
  for (int i = 0; i < row; i++) 
 800129e:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80012a2:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80012ae:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012b8:	f6a3 2375 	subw	r3, r3, #2677	; 0xa75
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80012c2:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	f6ff af55 	blt.w	8001178 <aplicattion_A_Star+0xe0>
    }
  }

  while (1) {
    // Inicializamos variables
    min_f = DBL_MAX;
 80012ce:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80012d2:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80012d6:	6013      	str	r3, [r2, #0]
    min_h = DBL_MAX;
 80012d8:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80012dc:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80012e0:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80012e4:	6013      	str	r3, [r2, #0]

    //---------------------Creacion de las diferentes fichas de las celdas vecinas-----------------
    for(uint8_t k = 0; k < 8; k++) 
 80012e6:	2300      	movs	r3, #0
 80012e8:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80012ec:	f102 0273 	add.w	r2, r2, #115	; 0x73
 80012f0:	7013      	strb	r3, [r2, #0]
 80012f2:	e1a4      	b.n	800163e <aplicattion_A_Star+0x5a6>
    {
      if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k] != NULL) 
 80012f4:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80012f8:	f103 0314 	add.w	r3, r3, #20
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001304:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	3302      	adds	r3, #2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8188 	beq.w	8001628 <aplicattion_A_Star+0x590>
      {
        if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h != -1.0f && ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status < OPEN)
 8001318:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800131c:	f103 0314 	add.w	r3, r3, #20
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001328:	f103 0373 	add.w	r3, r3, #115	; 0x73
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3302      	adds	r3, #2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800133a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800133e:	eef4 7a47 	vcmp.f32	s15, s14
 8001342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001346:	f000 816f 	beq.w	8001628 <aplicattion_A_Star+0x590>
 800134a:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800134e:	f103 0314 	add.w	r3, r3, #20
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800135a:	f103 0373 	add.w	r3, r3, #115	; 0x73
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	3302      	adds	r3, #2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800136c:	2b00      	cmp	r3, #0
 800136e:	f040 815b 	bne.w	8001628 <aplicattion_A_Star+0x590>
        {
          //Se busca la posicion que ocupada la nueva ficha en la lista de fichas abiertas
          index_file_Open = search_position_file_Open(file_Open, file_Open_Availability);
 8001372:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001376:	396c      	subs	r1, #108	; 0x6c
 8001378:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800137c:	f103 0308 	add.w	r3, r3, #8
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	4608      	mov	r0, r1
 8001386:	f000 fae2 	bl	800194e <search_position_file_Open>
 800138a:	4603      	mov	r3, r0
 800138c:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001390:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 8001394:	7013      	strb	r3, [r2, #0]
          //Se abre la celda
          ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status = OPEN;
 8001396:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800139a:	f103 0314 	add.w	r3, r3, #20
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80013a6:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	3302      	adds	r3, #2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          //Se crea la ficha
          file_Open[index_file_Open].ptrCell_file = ptrFile->ptrCell_file->neighbors.ptrCellMap[k];
 80013ba:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80013be:	f103 0314 	add.w	r3, r3, #20
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80013ca:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	f507 41d4 	add.w	r1, r7, #27136	; 0x6a00
 80013d4:	f101 016f 	add.w	r1, r1, #111	; 0x6f
 80013d8:	7809      	ldrb	r1, [r1, #0]
 80013da:	3302      	adds	r3, #2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80013e6:	f6a3 206c 	subw	r0, r3, #2668	; 0xa6c
 80013ea:	460b      	mov	r3, r1
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	440b      	add	r3, r1
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	4403      	add	r3, r0
 80013f4:	601a      	str	r2, [r3, #0]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80013fc:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001400:	7013      	strb	r3, [r2, #0]
 8001402:	e02d      	b.n	8001460 <aplicattion_A_Star+0x3c8>
          {
            file_Open[index_file_Open].ptrCell_parent[u] = ptrFile->ptrCell_parent[u];
 8001404:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001408:	f103 0372 	add.w	r3, r3, #114	; 0x72
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001412:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 8001416:	7811      	ldrb	r1, [r2, #0]
 8001418:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800141c:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001420:	7814      	ldrb	r4, [r2, #0]
 8001422:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001426:	f102 0214 	add.w	r2, r2, #20
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	6858      	ldr	r0, [r3, #4]
 8001432:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001436:	f6a3 226c 	subw	r2, r3, #2668	; 0xa6c
 800143a:	460b      	mov	r3, r1
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	440b      	add	r3, r1
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4423      	add	r3, r4
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	6058      	str	r0, [r3, #4]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 800144a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800144e:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800145a:	f102 0272 	add.w	r2, r2, #114	; 0x72
 800145e:	7013      	strb	r3, [r2, #0]
 8001460:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001464:	f103 0314 	add.w	r3, r3, #20
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800146e:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001472:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001476:	7812      	ldrb	r2, [r2, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d3c3      	bcc.n	8001404 <aplicattion_A_Star+0x36c>
          }
          file_Open[index_file_Open].ptrCell_parent[ptrFile->num_parent] = ptrFile->ptrCell_file;
 800147c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001480:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800148a:	f103 0314 	add.w	r3, r3, #20
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8001494:	461c      	mov	r4, r3
 8001496:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800149a:	f103 0314 	add.w	r3, r3, #20
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80014a6:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80014aa:	4613      	mov	r3, r2
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4423      	add	r3, r4
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	6058      	str	r0, [r3, #4]
          file_Open[index_file_Open].ptrCell_parent[(ptrFile->num_parent+1)] = NULL;
 80014ba:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80014be:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80014c2:	781a      	ldrb	r2, [r3, #0]
 80014c4:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80014c8:	f103 0314 	add.w	r3, r3, #20
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80014d2:	1c58      	adds	r0, r3, #1
 80014d4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80014d8:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80014dc:	4613      	mov	r3, r2
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4403      	add	r3, r0
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	2200      	movs	r2, #0
 80014ec:	605a      	str	r2, [r3, #4]
          file_Open[index_file_Open].num_parent = ptrFile->num_parent+1;
 80014ee:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80014f2:	f103 0314 	add.w	r3, r3, #20
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80014fc:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001500:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	b2d8      	uxtb	r0, r3
 800150a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800150e:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001512:	4613      	mov	r3, r2
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	4413      	add	r3, r2
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	440b      	add	r3, r1
 800151c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001520:	4602      	mov	r2, r0
 8001522:	701a      	strb	r2, [r3, #0]
          file_Open[index_file_Open].cost_g = ptrFile->ptrCell_file->neighbors.distance_neigh[k]+ptrFile->cost_g;
 8001524:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001528:	f103 0314 	add.w	r3, r3, #20
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001534:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	330a      	adds	r3, #10
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	3304      	adds	r3, #4
 8001542:	ed93 7a00 	vldr	s14, [r3]
 8001546:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800154a:	f103 0314 	add.w	r3, r3, #20
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8001554:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001558:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001562:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001566:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800156a:	4613      	mov	r3, r2
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	4413      	add	r3, r2
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	440b      	add	r3, r1
 8001574:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001578:	edc3 7a00 	vstr	s15, [r3]
          file_Open[index_file_Open].function_F = file_Open[index_file_Open].cost_g + ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h;
 800157c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001580:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 8001584:	781a      	ldrb	r2, [r3, #0]
 8001586:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800158a:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800158e:	4613      	mov	r3, r2
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	4413      	add	r3, r2
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	440b      	add	r3, r1
 8001598:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800159c:	ed93 7a00 	vldr	s14, [r3]
 80015a0:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80015a4:	f103 0314 	add.w	r3, r3, #20
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80015b0:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	3302      	adds	r3, #2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80015c2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80015c6:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80015d4:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80015d8:	4613      	mov	r3, r2
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	4413      	add	r3, r2
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	440b      	add	r3, r1
 80015e2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80015e6:	edc3 7a00 	vstr	s15, [r3]
          //Indicacion de la disponibilidad de la ficha
          file_Open_Availability |= (0b1 << index_file_Open);
 80015ea:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80015ee:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2201      	movs	r2, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	17da      	asrs	r2, r3, #31
 80015fc:	469a      	mov	sl, r3
 80015fe:	4693      	mov	fp, r2
 8001600:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001604:	f103 0308 	add.w	r3, r3, #8
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	ea42 010a 	orr.w	r1, r2, sl
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	ea43 030b 	orr.w	r3, r3, fp
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 800161c:	f102 0208 	add.w	r2, r2, #8
 8001620:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001624:	e9c2 3400 	strd	r3, r4, [r2]
    for(uint8_t k = 0; k < 8; k++) 
 8001628:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800162c:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001638:	f102 0273 	add.w	r2, r2, #115	; 0x73
 800163c:	7013      	strb	r3, [r2, #0]
 800163e:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001642:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b07      	cmp	r3, #7
 800164a:	f67f ae53 	bls.w	80012f4 <aplicattion_A_Star+0x25c>
      }
    }
    
    //-----------------Cerramos la ficha actual del puntero----------------------
    //indicamos el nuevo estado de la celda
    ptrFile->ptrCell_file->status = CLOSED;
 800164e:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001652:	f103 0314 	add.w	r3, r3, #20
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    //Indicacion de la no disponibilidad de la ficha
    file_Open_Availability &=  ~(0b1 << index_ptr);
 8001660:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001664:	f103 0307 	add.w	r3, r3, #7
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2201      	movs	r2, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	17da      	asrs	r2, r3, #31
 8001674:	461d      	mov	r5, r3
 8001676:	4616      	mov	r6, r2
 8001678:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800167c:	f103 0308 	add.w	r3, r3, #8
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	ea02 0105 	and.w	r1, r2, r5
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	4033      	ands	r3, r6
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001692:	f102 0208 	add.w	r2, r2, #8
 8001696:	e9d7 3400 	ldrd	r3, r4, [r7]
 800169a:	e9c2 3400 	strd	r3, r4, [r2]
     
    //---------------- Comparación función F ---------------------
    for (uint8_t k = 0; k < 64; k++) {
 800169e:	2300      	movs	r3, #0
 80016a0:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80016a4:	f102 0271 	add.w	r2, r2, #113	; 0x71
 80016a8:	7013      	strb	r3, [r2, #0]
 80016aa:	e101      	b.n	80018b0 <aplicattion_A_Star+0x818>
      //Recorrido
      bit_file_cell = (file_Open_Availability >> k) & 0b1;
 80016ac:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80016b0:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80016b4:	7818      	ldrb	r0, [r3, #0]
 80016b6:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80016ba:	f103 0308 	add.w	r3, r3, #8
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f1c0 0420 	rsb	r4, r0, #32
 80016c6:	f1a0 0120 	sub.w	r1, r0, #32
 80016ca:	fa22 f800 	lsr.w	r8, r2, r0
 80016ce:	fa03 f404 	lsl.w	r4, r3, r4
 80016d2:	ea48 0804 	orr.w	r8, r8, r4
 80016d6:	fa23 f101 	lsr.w	r1, r3, r1
 80016da:	ea48 0801 	orr.w	r8, r8, r1
 80016de:	fa23 f900 	lsr.w	r9, r3, r0
 80016e2:	fa5f f388 	uxtb.w	r3, r8
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80016ee:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80016f2:	7013      	strb	r3, [r2, #0]
      //Se el bit es un valor logico de 1 entonces la ficha esta disponible para su comparacion con las demas
      if(bit_file_cell==1 && file_Open[k].ptrCell_file != NULL)
 80016f4:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80016f8:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	f040 80cb 	bne.w	800189a <aplicattion_A_Star+0x802>
 8001704:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001708:	f103 0371 	add.w	r3, r3, #113	; 0x71
 800170c:	781a      	ldrb	r2, [r3, #0]
 800170e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001712:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001716:	4613      	mov	r3, r2
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	4413      	add	r3, r2
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	440b      	add	r3, r1
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 80b9 	beq.w	800189a <aplicattion_A_Star+0x802>
      {
        // Verificar que la función F sea menor al valor anterior
        if (file_Open[k].function_F < min_f) {
 8001728:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800172c:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001730:	781a      	ldrb	r2, [r3, #0]
 8001732:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001736:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800173a:	4613      	mov	r3, r2
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4413      	add	r3, r2
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	440b      	add	r3, r1
 8001744:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001750:	ed93 7a00 	vldr	s14, [r3]
 8001754:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175c:	dd33      	ble.n	80017c6 <aplicattion_A_Star+0x72e>
          // Reemplazamos valores
          min_f = file_Open[k].function_F;
 800175e:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001762:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800176c:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001770:	4613      	mov	r3, r2
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	4413      	add	r3, r2
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	440b      	add	r3, r1
 800177a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001784:	6013      	str	r3, [r2, #0]
          min_h = file_Open[k].ptrCell_file->h;
 8001786:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800178a:	f103 0371 	add.w	r3, r3, #113	; 0x71
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001794:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001798:	4613      	mov	r3, r2
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4413      	add	r3, r2
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	440b      	add	r3, r1
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a6:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80017aa:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80017ae:	6013      	str	r3, [r2, #0]
          index_ptr = k;
 80017b0:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80017b4:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80017be:	f102 0207 	add.w	r2, r2, #7
 80017c2:	7013      	strb	r3, [r2, #0]
 80017c4:	e069      	b.n	800189a <aplicattion_A_Star+0x802>
        }
        // Verificar que la función F sea igual al valor anterior, si es así se desempata con el valor h
        else if (file_Open[k].function_F == min_f) {
 80017c6:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80017ca:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80017d4:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80017d8:	4613      	mov	r3, r2
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	4413      	add	r3, r2
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	440b      	add	r3, r1
 80017e2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80017ee:	ed93 7a00 	vldr	s14, [r3]
 80017f2:	eeb4 7a67 	vcmp.f32	s14, s15
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	d14e      	bne.n	800189a <aplicattion_A_Star+0x802>
          if (file_Open[k].ptrCell_file->h < min_h) {
 80017fc:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001800:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800180a:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800180e:	4613      	mov	r3, r2
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4413      	add	r3, r2
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	440b      	add	r3, r1
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800181e:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001822:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8001826:	ed93 7a00 	vldr	s14, [r3]
 800182a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001832:	dd32      	ble.n	800189a <aplicattion_A_Star+0x802>
              // Reemplazamos valores
              min_f = file_Open[k].function_F;
 8001834:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001838:	f103 0371 	add.w	r3, r3, #113	; 0x71
 800183c:	781a      	ldrb	r2, [r3, #0]
 800183e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001842:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001846:	4613      	mov	r3, r2
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	440b      	add	r3, r1
 8001850:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 800185a:	6013      	str	r3, [r2, #0]
              min_h = file_Open[k].ptrCell_file->h;
 800185c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001860:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800186a:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800186e:	4613      	mov	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	4413      	add	r3, r2
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	440b      	add	r3, r1
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187c:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001880:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001884:	6013      	str	r3, [r2, #0]
              index_ptr = k;         
 8001886:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800188a:	f103 0371 	add.w	r3, r3, #113	; 0x71
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001894:	f102 0207 	add.w	r2, r2, #7
 8001898:	7013      	strb	r3, [r2, #0]
    for (uint8_t k = 0; k < 64; k++) {
 800189a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800189e:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80018aa:	f102 0271 	add.w	r2, r2, #113	; 0x71
 80018ae:	7013      	strb	r3, [r2, #0]
 80018b0:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80018b4:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b3f      	cmp	r3, #63	; 0x3f
 80018bc:	f67f aef6 	bls.w	80016ac <aplicattion_A_Star+0x614>
        }
      }
    }
    
    //--------------- Seleccionamos nueva ficha para el puntero--------------------
    ptrFile = &file_Open[index_ptr];
 80018c0:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80018c4:	f103 0307 	add.w	r3, r3, #7
 80018c8:	7819      	ldrb	r1, [r3, #0]
 80018ca:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80018ce:	3a6c      	subs	r2, #108	; 0x6c
 80018d0:	460b      	mov	r3, r1
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	440b      	add	r3, r1
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	4413      	add	r3, r2
 80018da:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80018de:	f102 0214 	add.w	r2, r2, #20
 80018e2:	6013      	str	r3, [r2, #0]
    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrFile->ptrCell_file->coor_x == goal_x && ptrFile->ptrCell_file->coor_y == goal_y) {
 80018e4:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80018e8:	f103 0314 	add.w	r3, r3, #20
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80018f4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80018f8:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 80018fc:	ed93 7a00 	vldr	s14, [r3]
 8001900:	eeb4 7a67 	vcmp.f32	s14, s15
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	f47f ace1 	bne.w	80012ce <aplicattion_A_Star+0x236>
 800190c:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001910:	f103 0314 	add.w	r3, r3, #20
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	edd3 7a02 	vldr	s15, [r3, #8]
 800191c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001920:	f6a3 2388 	subw	r3, r3, #2696	; 0xa88
 8001924:	ed93 7a00 	vldr	s14, [r3]
 8001928:	eeb4 7a67 	vcmp.f32	s14, s15
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	d000      	beq.n	8001934 <aplicattion_A_Star+0x89c>
    min_f = DBL_MAX;
 8001932:	e4cc      	b.n	80012ce <aplicattion_A_Star+0x236>
        break;
 8001934:	bf00      	nop
    }
  }
  return ptrFile;
 8001936:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800193a:	f103 0314 	add.w	r3, r3, #20
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	f507 47d5 	add.w	r7, r7, #27264	; 0x6a80
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800194e <search_position_file_Open>:


uint8_t search_position_file_Open(file_cell_t list_file[64], uint64_t avan_file)
{
 800194e:	b4f0      	push	{r4, r5, r6, r7}
 8001950:	b08a      	sub	sp, #40	; 0x28
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	e9c7 2300 	strd	r2, r3, [r7]
  //Variables
  uint8_t bit_list = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 110;
 800195e:	236e      	movs	r3, #110	; 0x6e
 8001960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  float value_f = 0;
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  //bucle para recorrer la lista de bits
  for(int i = 0; i<110; i++)
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	e01e      	b.n	80019ae <search_position_file_Open+0x60>
  {
    //Recorrido
    bit_list = (avan_file >> i) & 0b1;
 8001970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001974:	69f9      	ldr	r1, [r7, #28]
 8001976:	f1c1 0620 	rsb	r6, r1, #32
 800197a:	f1a1 0020 	sub.w	r0, r1, #32
 800197e:	fa22 f401 	lsr.w	r4, r2, r1
 8001982:	fa03 f606 	lsl.w	r6, r3, r6
 8001986:	4334      	orrs	r4, r6
 8001988:	fa23 f000 	lsr.w	r0, r3, r0
 800198c:	4304      	orrs	r4, r0
 800198e:	fa23 f501 	lsr.w	r5, r3, r1
 8001992:	b2e3      	uxtb	r3, r4
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
    //Se comprueba el bit de correspondiente a la disponibilidad de la ficha
    if(bit_list  == 0)
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <search_position_file_Open+0x5a>
    {
      index = i;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80019a6:	e005      	b.n	80019b4 <search_position_file_Open+0x66>
  for(int i = 0; i<110; i++)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	3301      	adds	r3, #1
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	2b6d      	cmp	r3, #109	; 0x6d
 80019b2:	dddd      	ble.n	8001970 <search_position_file_Open+0x22>
    }
  }
  /*En caso que no se indico un valor diferente a 100 para el indice, se busca una ubicacion dentro 
  de la lista de fichas abiertas, seleccionando aquella ubicacion donde el valor de la funcion f
  sea la mayor*/
  if (index == 110)
 80019b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019b8:	2b6e      	cmp	r3, #110	; 0x6e
 80019ba:	d132      	bne.n	8001a22 <search_position_file_Open+0xd4>
  {  
    //Recorrido del arreglo de fichas abiertas
    for(int k = 0; k<64; k++)
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	e02c      	b.n	8001a1c <search_position_file_Open+0xce>
    {  
      //Se busca el mayor valor de la funcion f
      if(list_file[k].ptrCell_file != NULL && list_file[k].function_F > value_f)
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4613      	mov	r3, r2
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	4413      	add	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	461a      	mov	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4413      	add	r3, r2
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d01e      	beq.n	8001a16 <search_position_file_Open+0xc8>
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4613      	mov	r3, r2
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4413      	add	r3, r2
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	461a      	mov	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 80019ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80019f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	d50d      	bpl.n	8001a16 <search_position_file_Open+0xc8>
      {
        value_f = list_file[k].function_F;
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4613      	mov	r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	4413      	add	r3, r2
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	461a      	mov	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001a0e:	623b      	str	r3, [r7, #32]
        index = k;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(int k = 0; k<64; k++)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b3f      	cmp	r3, #63	; 0x3f
 8001a20:	ddcf      	ble.n	80019c2 <search_position_file_Open+0x74>
      }
    }
  }
  
  return index;
 8001a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a2e:	4770      	bx	lr

08001a30 <heuristic_cell_map>:



//-----------------------------------------------Funciones calculo heuristica----------------------------------------------------------------
void heuristic_cell_map(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float goal_x, float goal_y){
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a3e:	edc7 0a00 	vstr	s1, [r7]
 8001a42:	72fb      	strb	r3, [r7, #11]
 8001a44:	4613      	mov	r3, r2
 8001a46:	72bb      	strb	r3, [r7, #10]
  //Recorrido por cada una de las celdas
  for (int i = 0; i < row; i++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e071      	b.n	8001b32 <heuristic_cell_map+0x102>
  {
    for (int j = 0; j < colum; j++) 
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	e067      	b.n	8001b24 <heuristic_cell_map+0xf4>
    {
      //Calculo heuristica
      if(grid[i][j].feature =='G')
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	441a      	add	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2158      	movs	r1, #88	; 0x58
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	334c      	adds	r3, #76	; 0x4c
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b47      	cmp	r3, #71	; 0x47
 8001a72:	d110      	bne.n	8001a96 <heuristic_cell_map+0x66>
      {
        grid[i][j].h = 0.0f;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	441a      	add	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2158      	movs	r1, #88	; 0x58
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3350      	adds	r3, #80	; 0x50
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e043      	b.n	8001b1e <heuristic_cell_map+0xee>
      }
      else if(grid[i][j].feature=='#')
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	441a      	add	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2158      	movs	r1, #88	; 0x58
 8001aa8:	fb01 f303 	mul.w	r3, r1, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	334c      	adds	r3, #76	; 0x4c
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b23      	cmp	r3, #35	; 0x23
 8001ab4:	d10f      	bne.n	8001ad6 <heuristic_cell_map+0xa6>
      {
        grid[i][j].h = -1.0f;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001abc:	fb02 f303 	mul.w	r3, r2, r3
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	441a      	add	r2, r3
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2158      	movs	r1, #88	; 0x58
 8001ac8:	fb01 f303 	mul.w	r3, r1, r3
 8001acc:	4413      	add	r3, r2
 8001ace:	3350      	adds	r3, #80	; 0x50
 8001ad0:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <heuristic_cell_map+0x114>)
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e023      	b.n	8001b1e <heuristic_cell_map+0xee>
      }
      else
      {
        grid[i][j].h = heuristic_single_cell(&grid[i][j], goal_x, goal_y); 
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001adc:	fb02 f303 	mul.w	r3, r2, r3
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	441a      	add	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2158      	movs	r1, #88	; 0x58
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	18d1      	adds	r1, r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	18d4      	adds	r4, r2, r3
 8001afc:	edd7 0a00 	vldr	s1, [r7]
 8001b00:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b04:	4608      	mov	r0, r1
 8001b06:	f000 f81f 	bl	8001b48 <heuristic_single_cell>
 8001b0a:	eef0 7a40 	vmov.f32	s15, s0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2258      	movs	r2, #88	; 0x58
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	4423      	add	r3, r4
 8001b18:	3350      	adds	r3, #80	; 0x50
 8001b1a:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < colum; j++) 
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	3301      	adds	r3, #1
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	7abb      	ldrb	r3, [r7, #10]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	db93      	blt.n	8001a54 <heuristic_cell_map+0x24>
  for (int i = 0; i < row; i++)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	7afb      	ldrb	r3, [r7, #11]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	db89      	blt.n	8001a4e <heuristic_cell_map+0x1e>
      }   
    }
  }  
}
 8001b3a:	bf00      	nop
 8001b3c:	bf00      	nop
 8001b3e:	371c      	adds	r7, #28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd90      	pop	{r4, r7, pc}
 8001b44:	bf800000 	.word	0xbf800000

08001b48 <heuristic_single_cell>:


float heuristic_single_cell(Cell_map_t *cell, float  goal_x, float goal_y)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	ed2d 8b02 	vpush	{d8}
 8001b4e:	b0a3      	sub	sp, #140	; 0x8c
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b58:	edc7 0a01 	vstr	s1, [r7, #4]
  //---------Definicion de variables--------
  //Variables del calculo heuristica
  Cell_map_t *ptrCell = cell;                 //Puntero a la celda actual
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  float total_distante = 0;                   //Distancia total entre la celda actual y la celda del gol
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  float dis[8];                               //Distancia entre la celda vecina y la recta
  uint8_t best_index;                         //Mejor indice de las celdas vecinas
  float min_distance;                         //Distancia minima entre la celda vecina y la recta
  //Variables Recta
  float A_recta;                              //Parametros de la recta
  float B_recta = -1.0f;
 8001b6a:	4be3      	ldr	r3, [pc, #908]	; (8001ef8 <heuristic_single_cell+0x3b0>)
 8001b6c:	673b      	str	r3, [r7, #112]	; 0x70
  float delta_x;                              //Diferencia la coordenada x entre la celda inicial y la final
  float mag_delta;                            //Magnitud del vector resultante de la diferencia de las coordenadas

  
   //---------------Calculos parametros de la recta-----------------
  delta_y = goal_y - cell->coor_y;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b74:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b7c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
  delta_x = goal_x - cell->coor_x;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b86:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
  mag_delta = sqrtf(delta_x * delta_x + delta_y * delta_y);
 8001b92:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b96:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b9a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001b9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8001baa:	f00b fd13 	bl	800d5d4 <sqrtf>
 8001bae:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
  A_recta =  delta_y / delta_x;
 8001bb2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001bb6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bbe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  C_recta = cell->coor_y - A_recta * cell->coor_x;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	edd3 6a01 	vldr	s13, [r3, #4]
 8001bce:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bda:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

  while (1)
  { 
    //Inicializamos variables
    best_index = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    min_distance = DBL_MAX;
 8001be4:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8001be8:	67bb      	str	r3, [r7, #120]	; 0x78

    //------------------Calculo parametros de cada una de las celdas vecinas--------------------
    for (uint8_t k = 0; k < 8; k++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001bf0:	e0fc      	b.n	8001dec <heuristic_single_cell+0x2a4>
    {
      //Verificamos que el puntero al vecino no es nulo
      if (ptrCell->neighbors.ptrCellMap[k] == NULL)
 8001bf2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001bf6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d110      	bne.n	8001c28 <heuristic_single_cell+0xe0>
      {
        ang_between_vector[k] = -1.0f;
 8001c06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	3388      	adds	r3, #136	; 0x88
 8001c0e:	443b      	add	r3, r7
 8001c10:	3b58      	subs	r3, #88	; 0x58
 8001c12:	4ab9      	ldr	r2, [pc, #740]	; (8001ef8 <heuristic_single_cell+0x3b0>)
 8001c14:	601a      	str	r2, [r3, #0]
        dis[k] = -1.0f;          
 8001c16:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	3388      	adds	r3, #136	; 0x88
 8001c1e:	443b      	add	r3, r7
 8001c20:	3b78      	subs	r3, #120	; 0x78
 8001c22:	4ab5      	ldr	r2, [pc, #724]	; (8001ef8 <heuristic_single_cell+0x3b0>)
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e0dc      	b.n	8001de2 <heuristic_single_cell+0x29a>
      }
      else
      {
        //Calculo vector relativo
        rel_x = ptrCell->neighbors.ptrCellMap[k]->coor_x - ptrCell->coor_x;
 8001c28:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001c2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c30:	3302      	adds	r3, #2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c40:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        rel_y = ptrCell->neighbors.ptrCellMap[k]->coor_y - ptrCell->coor_y;
 8001c4c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001c50:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c54:	3302      	adds	r3, #2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c64:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        //Calculo parametros
        res = round(((rel_x*delta_x + rel_y*delta_y) / (ptrCell->neighbors.distance_neigh[k] * mag_delta)) * 10000) / 10000;
 8001c70:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001c74:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001c80:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c88:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001c8c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001c90:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c94:	330a      	adds	r3, #10
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	ed93 7a00 	vldr	s14, [r3]
 8001ca0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cac:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001efc <heuristic_single_cell+0x3b4>
 8001cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb4:	ee17 0a90 	vmov	r0, s15
 8001cb8:	f7fe fc5e 	bl	8000578 <__aeabi_f2d>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	ec43 2b10 	vmov	d0, r2, r3
 8001cc4:	f00b fb14 	bl	800d2f0 <round>
 8001cc8:	ec51 0b10 	vmov	r0, r1, d0
 8001ccc:	a388      	add	r3, pc, #544	; (adr r3, 8001ef0 <heuristic_single_cell+0x3a8>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fdd3 	bl	800087c <__aeabi_ddiv>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7fe ff9b 	bl	8000c18 <__aeabi_d2f>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	653b      	str	r3, [r7, #80]	; 0x50
        ang_between_vector[k] = acos(res);
 8001ce6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001ce8:	f7fe fc46 	bl	8000578 <__aeabi_f2d>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	ec43 2b10 	vmov	d0, r2, r3
 8001cf4:	f00b fb9c 	bl	800d430 <acos>
 8001cf8:	ec53 2b10 	vmov	r2, r3, d0
 8001cfc:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe ff88 	bl	8000c18 <__aeabi_d2f>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	00a3      	lsls	r3, r4, #2
 8001d0c:	3388      	adds	r3, #136	; 0x88
 8001d0e:	443b      	add	r3, r7
 8001d10:	3b58      	subs	r3, #88	; 0x58
 8001d12:	601a      	str	r2, [r3, #0]
        if(A_recta != INFINITY && A_recta != -INFINITY)
 8001d14:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d18:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001f00 <heuristic_single_cell+0x3b8>
 8001d1c:	eef4 7a47 	vcmp.f32	s15, s14
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	dc45      	bgt.n	8001db2 <heuristic_single_cell+0x26a>
 8001d26:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d2a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001f04 <heuristic_single_cell+0x3bc>
 8001d2e:	eef4 7a47 	vcmp.f32	s15, s14
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	d43c      	bmi.n	8001db2 <heuristic_single_cell+0x26a>
        {
          dis[k] = fabsf(A_recta * ptrCell->neighbors.ptrCellMap[k]->coor_x + B_recta * ptrCell->neighbors.ptrCellMap[k]->coor_y + C_recta) / sqrtf(A_recta * A_recta + 1);  
 8001d38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001d3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d40:	3302      	adds	r3, #2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d4c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001d58:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d68:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d74:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7c:	eeb0 8ae7 	vabs.f32	s16, s15
 8001d80:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d90:	eeb0 0a67 	vmov.f32	s0, s15
 8001d94:	f00b fc1e 	bl	800d5d4 <sqrtf>
 8001d98:	eeb0 7a40 	vmov.f32	s14, s0
 8001d9c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001da0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	3388      	adds	r3, #136	; 0x88
 8001da8:	443b      	add	r3, r7
 8001daa:	3b78      	subs	r3, #120	; 0x78
 8001dac:	edc3 7a00 	vstr	s15, [r3]
 8001db0:	e017      	b.n	8001de2 <heuristic_single_cell+0x29a>
        }
        else
        {
          dis[k] = fabsf(ptrCell->neighbors.ptrCellMap[k]->coor_x-goal_x);
 8001db2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001db6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001dba:	3302      	adds	r3, #2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001dd2:	eef0 7ae7 	vabs.f32	s15, s15
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	3388      	adds	r3, #136	; 0x88
 8001dda:	443b      	add	r3, r7
 8001ddc:	3b78      	subs	r3, #120	; 0x78
 8001dde:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t k = 0; k < 8; k++)
 8001de2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001de6:	3301      	adds	r3, #1
 8001de8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001dec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001df0:	2b07      	cmp	r3, #7
 8001df2:	f67f aefe 	bls.w	8001bf2 <heuristic_single_cell+0xaa>
      }            
    }

    //----------------Buscamos la celda vecina mas cercana a la recta y que este en la misma direccion que la recta---------------------
    //Recorremos los parametros para encontrar la mejor celda
    for (uint8_t k = 0; k < 8; k++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001dfc:	e03f      	b.n	8001e7e <heuristic_single_cell+0x336>
    {
      //Verificamos que no sea -1
      if (ptrCell->neighbors.distance_neigh[k] != -1.0f)
 8001dfe:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e02:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e06:	330a      	adds	r3, #10
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001e16:	eef4 7a47 	vcmp.f32	s15, s14
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	d029      	beq.n	8001e74 <heuristic_single_cell+0x32c>
      {
        //Verificamos que la diferencia entre los angulos no sea superior a 45°
        if (ang_between_vector[k] <= 1.5f)
 8001e20:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	3388      	adds	r3, #136	; 0x88
 8001e28:	443b      	add	r3, r7
 8001e2a:	3b58      	subs	r3, #88	; 0x58
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3c:	d81a      	bhi.n	8001e74 <heuristic_single_cell+0x32c>
        {
          //Verificar que la distancia sea menor a la anterior menor distancia
          if (dis[k] < min_distance)
 8001e3e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	3388      	adds	r3, #136	; 0x88
 8001e46:	443b      	add	r3, r7
 8001e48:	3b78      	subs	r3, #120	; 0x78
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001e52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5a:	dd0b      	ble.n	8001e74 <heuristic_single_cell+0x32c>
          {
            min_distance = dis[k];
 8001e5c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	3388      	adds	r3, #136	; 0x88
 8001e64:	443b      	add	r3, r7
 8001e66:	3b78      	subs	r3, #120	; 0x78
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	67bb      	str	r3, [r7, #120]	; 0x78
            best_index = k;
 8001e6c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    for (uint8_t k = 0; k < 8; k++)
 8001e74:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e78:	3301      	adds	r3, #1
 8001e7a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001e7e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e82:	2b07      	cmp	r3, #7
 8001e84:	d9bb      	bls.n	8001dfe <heuristic_single_cell+0x2b6>
      }        
    }

    
    //--------------Seleccionamos la celda vecina y sumamos su distancia--------------------
    total_distante = total_distante + ptrCell->neighbors.distance_neigh[best_index];
 8001e86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001e8a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e8e:	330a      	adds	r3, #10
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	3304      	adds	r3, #4
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    ptrCell = ptrCell->neighbors.ptrCellMap[best_index];    
 8001ea6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001eaa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001eae:	3302      	adds	r3, #2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrCell->coor_x == goal_x && ptrCell->coor_y == goal_y)
 8001eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ebe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ec2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ec6:	eeb4 7a67 	vcmp.f32	s14, s15
 8001eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ece:	f47f ae86 	bne.w	8001bde <heuristic_single_cell+0x96>
 8001ed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ed6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001eda:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ede:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	d00f      	beq.n	8001f08 <heuristic_single_cell+0x3c0>
    best_index = 0;
 8001ee8:	e679      	b.n	8001bde <heuristic_single_cell+0x96>
 8001eea:	bf00      	nop
 8001eec:	f3af 8000 	nop.w
 8001ef0:	00000000 	.word	0x00000000
 8001ef4:	40c38800 	.word	0x40c38800
 8001ef8:	bf800000 	.word	0xbf800000
 8001efc:	461c4000 	.word	0x461c4000
 8001f00:	7f7fffff 	.word	0x7f7fffff
 8001f04:	ff7fffff 	.word	0xff7fffff
    {
      break;
 8001f08:	bf00      	nop
    }
  }

  return total_distante;
 8001f0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f0e:	ee07 3a90 	vmov	s15, r3
}
 8001f12:	eeb0 0a67 	vmov.f32	s0, s15
 8001f16:	378c      	adds	r7, #140	; 0x8c
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	ecbd 8b02 	vpop	{d8}
 8001f1e:	bd90      	pop	{r4, r7, pc}

08001f20 <readMPU>:
}


//Funcion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
float readMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead, int16_t offset)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	70fb      	strb	r3, [r7, #3]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	803b      	strh	r3, [r7, #0]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	75fb      	strb	r3, [r7, #23]
	uint8_t address_L = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	75bb      	strb	r3, [r7, #22]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	81fb      	strh	r3, [r7, #14]
	uint16_t aux_L = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	81bb      	strh	r3, [r7, #12]
	int16_t   aux  = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	817b      	strh	r3, [r7, #10]
	float res  = 0;
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d82d      	bhi.n	8001fac <readMPU+0x8c>
 8001f50:	a201      	add	r2, pc, #4	; (adr r2, 8001f58 <readMPU+0x38>)
 8001f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f56:	bf00      	nop
 8001f58:	08001f71 	.word	0x08001f71
 8001f5c:	08001f7b 	.word	0x08001f7b
 8001f60:	08001f85 	.word	0x08001f85
 8001f64:	08001f8f 	.word	0x08001f8f
 8001f68:	08001f99 	.word	0x08001f99
 8001f6c:	08001fa3 	.word	0x08001fa3
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 8001f70:	233b      	movs	r3, #59	; 0x3b
 8001f72:	75fb      	strb	r3, [r7, #23]
 8001f74:	233c      	movs	r3, #60	; 0x3c
 8001f76:	75bb      	strb	r3, [r7, #22]
 8001f78:	e019      	b.n	8001fae <readMPU+0x8e>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 8001f7a:	233d      	movs	r3, #61	; 0x3d
 8001f7c:	75fb      	strb	r3, [r7, #23]
 8001f7e:	233e      	movs	r3, #62	; 0x3e
 8001f80:	75bb      	strb	r3, [r7, #22]
 8001f82:	e014      	b.n	8001fae <readMPU+0x8e>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 8001f84:	233f      	movs	r3, #63	; 0x3f
 8001f86:	75fb      	strb	r3, [r7, #23]
 8001f88:	2340      	movs	r3, #64	; 0x40
 8001f8a:	75bb      	strb	r3, [r7, #22]
 8001f8c:	e00f      	b.n	8001fae <readMPU+0x8e>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 8001f8e:	2343      	movs	r3, #67	; 0x43
 8001f90:	75fb      	strb	r3, [r7, #23]
 8001f92:	2344      	movs	r3, #68	; 0x44
 8001f94:	75bb      	strb	r3, [r7, #22]
 8001f96:	e00a      	b.n	8001fae <readMPU+0x8e>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 8001f98:	2345      	movs	r3, #69	; 0x45
 8001f9a:	75fb      	strb	r3, [r7, #23]
 8001f9c:	2346      	movs	r3, #70	; 0x46
 8001f9e:	75bb      	strb	r3, [r7, #22]
 8001fa0:	e005      	b.n	8001fae <readMPU+0x8e>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 8001fa2:	2347      	movs	r3, #71	; 0x47
 8001fa4:	75fb      	strb	r3, [r7, #23]
 8001fa6:	2348      	movs	r3, #72	; 0x48
 8001fa8:	75bb      	strb	r3, [r7, #22]
 8001faa:	e000      	b.n	8001fae <readMPU+0x8e>
		default:{ break; }
 8001fac:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	7dfa      	ldrb	r2, [r7, #23]
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f004 fe8a 	bl	8006cd0 <i2c_ReadSingleRegister>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	81fb      	strh	r3, [r7, #14]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	7dba      	ldrb	r2, [r7, #22]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f004 fe81 	bl	8006cd0 <i2c_ReadSingleRegister>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	81bb      	strh	r3, [r7, #12]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = ((int16_t) ((aux_H << 8) | (aux_L))) - offset;
 8001fd2:	89fb      	ldrh	r3, [r7, #14]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	b21a      	sxth	r2, r3
 8001fd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b21b      	sxth	r3, r3
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	883b      	ldrh	r3, [r7, #0]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	817b      	strh	r3, [r7, #10]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje
	switch(elementRead)
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	dc02      	bgt.n	8001ff6 <readMPU+0xd6>
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	da05      	bge.n	8002000 <readMPU+0xe0>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
				default:{ break; }
			}
			break;
		}
		default:{ break; }
 8001ff4:	e0d6      	b.n	80021a4 <readMPU+0x284>
 8001ff6:	3b03      	subs	r3, #3
	switch(elementRead)
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	f200 80d3 	bhi.w	80021a4 <readMPU+0x284>
 8001ffe:	e081      	b.n	8002104 <readMPU+0x1e4>
			switch (ptrMPUAccel->fullScaleACCEL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d87b      	bhi.n	8002100 <readMPU+0x1e0>
 8002008:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <readMPU+0xf0>)
 800200a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200e:	bf00      	nop
 8002010:	08002021 	.word	0x08002021
 8002014:	08002059 	.word	0x08002059
 8002018:	08002091 	.word	0x08002091
 800201c:	080020c9 	.word	0x080020c9
				case ACCEL_2G :{res = (aux*9.77)/ACCEL_2G_SENS; break;}
 8002020:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fa95 	bl	8000554 <__aeabi_i2d>
 800202a:	a363      	add	r3, pc, #396	; (adr r3, 80021b8 <readMPU+0x298>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe fafa 	bl	8000628 <__aeabi_dmul>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	4b5f      	ldr	r3, [pc, #380]	; (80021c0 <readMPU+0x2a0>)
 8002042:	f7fe fc1b 	bl	800087c <__aeabi_ddiv>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fde3 	bl	8000c18 <__aeabi_d2f>
 8002052:	4603      	mov	r3, r0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	e054      	b.n	8002102 <readMPU+0x1e2>
				case ACCEL_4G :{res = (aux*9.77)/ACCEL_4G_SENS; break;}
 8002058:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fa79 	bl	8000554 <__aeabi_i2d>
 8002062:	a355      	add	r3, pc, #340	; (adr r3, 80021b8 <readMPU+0x298>)
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	f7fe fade 	bl	8000628 <__aeabi_dmul>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4610      	mov	r0, r2
 8002072:	4619      	mov	r1, r3
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	4b52      	ldr	r3, [pc, #328]	; (80021c4 <readMPU+0x2a4>)
 800207a:	f7fe fbff 	bl	800087c <__aeabi_ddiv>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f7fe fdc7 	bl	8000c18 <__aeabi_d2f>
 800208a:	4603      	mov	r3, r0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	e038      	b.n	8002102 <readMPU+0x1e2>
				case ACCEL_8G :{res = (aux*9.77)/ACCEL_8G_SENS; break;}
 8002090:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa5d 	bl	8000554 <__aeabi_i2d>
 800209a:	a347      	add	r3, pc, #284	; (adr r3, 80021b8 <readMPU+0x298>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe fac2 	bl	8000628 <__aeabi_dmul>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	4b45      	ldr	r3, [pc, #276]	; (80021c8 <readMPU+0x2a8>)
 80020b2:	f7fe fbe3 	bl	800087c <__aeabi_ddiv>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	f7fe fdab 	bl	8000c18 <__aeabi_d2f>
 80020c2:	4603      	mov	r3, r0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	e01c      	b.n	8002102 <readMPU+0x1e2>
				case ACCEL_16G :{res = (aux*9.77)/ACCEL_16G_SENS; break;}
 80020c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fa41 	bl	8000554 <__aeabi_i2d>
 80020d2:	a339      	add	r3, pc, #228	; (adr r3, 80021b8 <readMPU+0x298>)
 80020d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d8:	f7fe faa6 	bl	8000628 <__aeabi_dmul>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4610      	mov	r0, r2
 80020e2:	4619      	mov	r1, r3
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4b38      	ldr	r3, [pc, #224]	; (80021cc <readMPU+0x2ac>)
 80020ea:	f7fe fbc7 	bl	800087c <__aeabi_ddiv>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7fe fd8f 	bl	8000c18 <__aeabi_d2f>
 80020fa:	4603      	mov	r3, r0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	e000      	b.n	8002102 <readMPU+0x1e2>
				default:{ break; }
 8002100:	bf00      	nop
			break;
 8002102:	e050      	b.n	80021a6 <readMPU+0x286>
			switch (ptrMPUAccel->fullScaleGYRO)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	785b      	ldrb	r3, [r3, #1]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d849      	bhi.n	80021a0 <readMPU+0x280>
 800210c:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <readMPU+0x1f4>)
 800210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002112:	bf00      	nop
 8002114:	08002125 	.word	0x08002125
 8002118:	08002145 	.word	0x08002145
 800211c:	08002165 	.word	0x08002165
 8002120:	08002185 	.word	0x08002185
				case GYRO_250 :{ res = aux/GYRO_250_SENS; break;}
 8002124:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002128:	4a29      	ldr	r2, [pc, #164]	; (80021d0 <readMPU+0x2b0>)
 800212a:	fb82 1203 	smull	r1, r2, r2, r3
 800212e:	1152      	asrs	r2, r2, #5
 8002130:	17db      	asrs	r3, r3, #31
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	b21b      	sxth	r3, r3
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800213e:	edc7 7a04 	vstr	s15, [r7, #16]
 8002142:	e02e      	b.n	80021a2 <readMPU+0x282>
				case GYRO_500 :{ res = aux/GYRO_500_SENS; break;}
 8002144:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002148:	4a22      	ldr	r2, [pc, #136]	; (80021d4 <readMPU+0x2b4>)
 800214a:	fb82 1203 	smull	r1, r2, r2, r3
 800214e:	1112      	asrs	r2, r2, #4
 8002150:	17db      	asrs	r3, r3, #31
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	b21b      	sxth	r3, r3
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800215e:	edc7 7a04 	vstr	s15, [r7, #16]
 8002162:	e01e      	b.n	80021a2 <readMPU+0x282>
				case GYRO_1000 :{ res = aux/GYRO_1000_SENS; break;}
 8002164:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002168:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <readMPU+0x2b4>)
 800216a:	fb82 1203 	smull	r1, r2, r2, r3
 800216e:	10d2      	asrs	r2, r2, #3
 8002170:	17db      	asrs	r3, r3, #31
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	b21b      	sxth	r3, r3
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800217e:	edc7 7a04 	vstr	s15, [r7, #16]
 8002182:	e00e      	b.n	80021a2 <readMPU+0x282>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
 8002184:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002188:	2b00      	cmp	r3, #0
 800218a:	da00      	bge.n	800218e <readMPU+0x26e>
 800218c:	330f      	adds	r3, #15
 800218e:	111b      	asrs	r3, r3, #4
 8002190:	b21b      	sxth	r3, r3
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219a:	edc7 7a04 	vstr	s15, [r7, #16]
 800219e:	e000      	b.n	80021a2 <readMPU+0x282>
				default:{ break; }
 80021a0:	bf00      	nop
			break;
 80021a2:	e000      	b.n	80021a6 <readMPU+0x286>
		default:{ break; }
 80021a4:	bf00      	nop
	}
	//Retornamos valor
	return res;
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	ee07 3a90 	vmov	s15, r3
}
 80021ac:	eeb0 0a67 	vmov.f32	s0, s15
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	70a3d70a 	.word	0x70a3d70a
 80021bc:	40238a3d 	.word	0x40238a3d
 80021c0:	40d00000 	.word	0x40d00000
 80021c4:	40c00000 	.word	0x40c00000
 80021c8:	40b00000 	.word	0x40b00000
 80021cc:	40a00000 	.word	0x40a00000
 80021d0:	3e88cb3d 	.word	0x3e88cb3d
 80021d4:	3e0f83e1 	.word	0x3e0f83e1

080021d8 <getAngle>:
}


//Funcion para calcular el nuevo angulo de uno de los ejes del girsocopio
float getAngle(MPUAccel_Handler_t *ptrMPUAccel, MPUTimerSample_t *timer, float ang_init, uint8_t axis, int16_t offset_Axis)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80021e6:	4611      	mov	r1, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	460b      	mov	r3, r1
 80021ec:	70fb      	strb	r3, [r7, #3]
 80021ee:	4613      	mov	r3, r2
 80021f0:	803b      	strh	r3, [r7, #0]
	//Lectura velocidad angular
	float w_Angular= readMPU(ptrMPUAccel, axis, offset_Axis);
 80021f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	4619      	mov	r1, r3
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7ff fe90 	bl	8001f20 <readMPU>
 8002200:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	//Calculo del tiempo trascurrido tras el ultima leida
	uint64_t time_now = getTicksMs();
 8002204:	f005 f9fa 	bl	80075fc <getTicksMs>
 8002208:	e9c7 0106 	strd	r0, r1, [r7, #24]
	timer->delta_timer =  time_now - timer->timer_prev;
 800220c:	8b39      	ldrh	r1, [r7, #24]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002214:	b293      	uxth	r3, r2
 8002216:	1acb      	subs	r3, r1, r3
 8002218:	b29a      	uxth	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	811a      	strh	r2, [r3, #8]
	timer->timer_prev = time_now;
 800221e:	68b9      	ldr	r1, [r7, #8]
 8002220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002224:	e9c1 2300 	strd	r2, r3, [r1]
	//Calculo angulo
	float ang = ang_init + (w_Angular*timer->delta_timer)/1000;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	891b      	ldrh	r3, [r3, #8]
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002234:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800223c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002260 <getAngle+0x88>
 8002240:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002244:	ed97 7a01 	vldr	s14, [r7, #4]
 8002248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800224c:	edc7 7a05 	vstr	s15, [r7, #20]

	return ang;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	ee07 3a90 	vmov	s15, r3
}
 8002256:	eeb0 0a67 	vmov.f32	s0, s15
 800225a:	3728      	adds	r7, #40	; 0x28
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	447a0000 	.word	0x447a0000

08002264 <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	631a      	str	r2, [r3, #48]	; 0x30
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002280:	eeb0 0a67 	vmov.f32	s0, s15
 8002284:	4610      	mov	r0, r2
 8002286:	f005 f93b 	bl	8007500 <updateDuttyCyclePercentageFloat>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4619      	mov	r1, r3
 80022c8:	4610      	mov	r0, r2
 80022ca:	f004 fb25 	bl	8006918 <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	4619      	mov	r1, r3
 80022e0:	4610      	mov	r0, r2
 80022e2:	f005 f847 	bl	8007374 <statusPolarityPWM>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <build_Operation>:
#include <math.h>


//-------------------------Funcion para la definicion de operaciones--------------------------
void build_Operation(Parameters_Operation_t *prtList, Parameter_build_t *prtbuild, double finishline_x, double finishline_y)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6178      	str	r0, [r7, #20]
 80022f8:	6139      	str	r1, [r7, #16]
 80022fa:	ed87 0b02 	vstr	d0, [r7, #8]
 80022fe:	ed87 1b00 	vstr	d1, [r7]
	//Definicion el vector director
	double delta[2] = {finishline_x - prtbuild->initline_x, finishline_y - prtbuild->initline_y};
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800230c:	f7fd ffd4 	bl	80002b8 <__aeabi_dsub>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800231e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002322:	f7fd ffc9 	bl	80002b8 <__aeabi_dsub>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	//Calculo angululo entre vectores directores
	double grad_turn_res = calculed_ang_turn(prtbuild->delta_before, delta);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	3310      	adds	r3, #16
 8002332:	f107 0218 	add.w	r2, r7, #24
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fad1 	bl	80028e0 <calculed_ang_turn>
 800233e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	//condicional de cambio de angulo
	if(grad_turn_res == 0)
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800234e:	f7fe fbd3 	bl	8000af8 <__aeabi_dcmpeq>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00e      	beq.n	8002376 <build_Operation+0x86>
	{
		//agregar operacion de linea recta
		 add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800235e:	ed9f 2b2a 	vldr	d2, [pc, #168]	; 8002408 <build_Operation+0x118>
 8002362:	ed97 1b00 	vldr	d1, [r7]
 8002366:	ed97 0b02 	vldr	d0, [r7, #8]
 800236a:	2201      	movs	r2, #1
 800236c:	4619      	mov	r1, r3
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f000 f84e 	bl	8002410 <add_Operation>
 8002374:	e030      	b.n	80023d8 <build_Operation+0xe8>
	}
	else
	{
		//Agregar operacion de rotacion
		if(prtbuild->routelist>0){ prtbuild->number_operation++; }
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <build_Operation+0xa0>
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002386:	3301      	adds	r3, #1
 8002388:	b2da      	uxtb	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		add_Operation(prtList, prtbuild->number_operation, TURN, 0, 0, grad_turn_res);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002396:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800239a:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8002408 <build_Operation+0x118>
 800239e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8002408 <build_Operation+0x118>
 80023a2:	2202      	movs	r2, #2
 80023a4:	4619      	mov	r1, r3
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f000 f832 	bl	8002410 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80023b2:	3301      	adds	r3, #1
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80023c2:	ed9f 2b11 	vldr	d2, [pc, #68]	; 8002408 <build_Operation+0x118>
 80023c6:	ed97 1b00 	vldr	d1, [r7]
 80023ca:	ed97 0b02 	vldr	d0, [r7, #8]
 80023ce:	2201      	movs	r2, #1
 80023d0:	4619      	mov	r1, r3
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f000 f81c 	bl	8002410 <add_Operation>
	}
	//Se redefine los valores iniciales
	prtbuild->delta_before[0] = delta[0];
 80023d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023dc:	6939      	ldr	r1, [r7, #16]
 80023de:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtbuild->delta_before[1] = delta[1];
 80023e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023e6:	6939      	ldr	r1, [r7, #16]
 80023e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prtbuild->initline_x = finishline_x;
 80023ec:	6939      	ldr	r1, [r7, #16]
 80023ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023f2:	e9c1 2300 	strd	r2, r3, [r1]
	prtbuild->initline_y = finishline_y;
 80023f6:	6939      	ldr	r1, [r7, #16]
 80023f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002400:	bf00      	nop
 8002402:	3730      	adds	r7, #48	; 0x30
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
	...

08002410 <add_Operation>:

void add_Operation(Parameters_Operation_t *prtList, uint8_t num_operation, uint8_t type_operation, double coor_x, double coor_y, double grad_turn)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	61f8      	str	r0, [r7, #28]
 8002418:	460b      	mov	r3, r1
 800241a:	ed87 0b04 	vstr	d0, [r7, #16]
 800241e:	ed87 1b02 	vstr	d1, [r7, #8]
 8002422:	ed87 2b00 	vstr	d2, [r7]
 8002426:	76fb      	strb	r3, [r7, #27]
 8002428:	4613      	mov	r3, r2
 800242a:	76bb      	strb	r3, [r7, #26]
	prtList[num_operation].operacion = type_operation;
 800242c:	7efb      	ldrb	r3, [r7, #27]
 800242e:	015b      	lsls	r3, r3, #5
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	4413      	add	r3, r2
 8002434:	7eba      	ldrb	r2, [r7, #26]
 8002436:	701a      	strb	r2, [r3, #0]
	prtList[num_operation].x_destination = coor_x;
 8002438:	7efb      	ldrb	r3, [r7, #27]
 800243a:	015b      	lsls	r3, r3, #5
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	18d1      	adds	r1, r2, r3
 8002440:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002444:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prtList[num_operation].y_destination = coor_y;
 8002448:	7efb      	ldrb	r3, [r7, #27]
 800244a:	015b      	lsls	r3, r3, #5
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	18d1      	adds	r1, r2, r3
 8002450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002454:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtList[num_operation].grad_Rotative = grad_turn;
 8002458:	7efb      	ldrb	r3, [r7, #27]
 800245a:	015b      	lsls	r3, r3, #5
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	18d1      	adds	r1, r2, r3
 8002460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002464:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002468:	bf00      	nop
 800246a:	3724      	adds	r7, #36	; 0x24
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	0000      	movs	r0, r0
	...

08002478 <change_position>:


//-----------------Funciones para definir los parametros de la poscion teorica--------------
void change_position(Parameters_Path_t *ptrParameterPath, int distance, double starcoor_x, double starcoor_y)
{
 8002478:	b5b0      	push	{r4, r5, r7, lr}
 800247a:	b08a      	sub	sp, #40	; 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6178      	str	r0, [r7, #20]
 8002480:	6139      	str	r1, [r7, #16]
 8002482:	ed87 0b02 	vstr	d0, [r7, #8]
 8002486:	ed87 1b00 	vstr	d1, [r7]
	//Definimos la distancia
	 ptrParameterPath->line_Distance = distance;                  //[mm]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40
	//Calculamos la posicicion
	double pot_x = ptrParameterPath->line_Distance*cos((ptrParameterPath->rotative_Grad*M_PI)/180);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f85d 	bl	8000554 <__aeabi_i2d>
 800249a:	4604      	mov	r4, r0
 800249c:	460d      	mov	r5, r1
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f856 	bl	8000554 <__aeabi_i2d>
 80024a8:	a33b      	add	r3, pc, #236	; (adr r3, 8002598 <change_position+0x120>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	f7fe f8bb 	bl	8000628 <__aeabi_dmul>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <change_position+0x128>)
 80024c0:	f7fe f9dc 	bl	800087c <__aeabi_ddiv>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	ec43 2b17 	vmov	d7, r2, r3
 80024cc:	eeb0 0a47 	vmov.f32	s0, s14
 80024d0:	eef0 0a67 	vmov.f32	s1, s15
 80024d4:	f00a feb8 	bl	800d248 <cos>
 80024d8:	ec53 2b10 	vmov	r2, r3, d0
 80024dc:	4620      	mov	r0, r4
 80024de:	4629      	mov	r1, r5
 80024e0:	f7fe f8a2 	bl	8000628 <__aeabi_dmul>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double pot_y = ptrParameterPath->line_Distance*sin((ptrParameterPath->rotative_Grad*M_PI)/180);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe f82f 	bl	8000554 <__aeabi_i2d>
 80024f6:	4604      	mov	r4, r0
 80024f8:	460d      	mov	r5, r1
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe f828 	bl	8000554 <__aeabi_i2d>
 8002504:	a324      	add	r3, pc, #144	; (adr r3, 8002598 <change_position+0x120>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f7fe f88d 	bl	8000628 <__aeabi_dmul>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <change_position+0x128>)
 800251c:	f7fe f9ae 	bl	800087c <__aeabi_ddiv>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	ec43 2b17 	vmov	d7, r2, r3
 8002528:	eeb0 0a47 	vmov.f32	s0, s14
 800252c:	eef0 0a67 	vmov.f32	s1, s15
 8002530:	f00a ff26 	bl	800d380 <sin>
 8002534:	ec53 2b10 	vmov	r2, r3, d0
 8002538:	4620      	mov	r0, r4
 800253a:	4629      	mov	r1, r5
 800253c:	f7fe f874 	bl	8000628 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Guardamos Coordenadas iniciales
	ptrParameterPath->start_position_x = starcoor_x;
 8002548:	6979      	ldr	r1, [r7, #20]
 800254a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800254e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrParameterPath->start_position_y = starcoor_y;
 8002552:	6979      	ldr	r1, [r7, #20]
 8002554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002558:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x += pot_x;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002566:	f7fd fea9 	bl	80002bc <__adddf3>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	6979      	ldr	r1, [r7, #20]
 8002570:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrParameterPath->goal_Position_y += pot_y;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800257a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800257e:	f7fd fe9d 	bl	80002bc <__adddf3>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	6979      	ldr	r1, [r7, #20]
 8002588:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 800258c:	bf00      	nop
 800258e:	3728      	adds	r7, #40	; 0x28
 8002590:	46bd      	mov	sp, r7
 8002592:	bdb0      	pop	{r4, r5, r7, pc}
 8002594:	f3af 8000 	nop.w
 8002598:	54442d18 	.word	0x54442d18
 800259c:	400921fb 	.word	0x400921fb
 80025a0:	40668000 	.word	0x40668000
 80025a4:	00000000 	.word	0x00000000

080025a8 <change_coordinates_position>:

void change_coordinates_position(Parameters_Path_t *ptrParameterPath, double goalcoor_x, double goalcoor_y, double starcoor_x, double starcoor_y)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6278      	str	r0, [r7, #36]	; 0x24
 80025b0:	ed87 0b06 	vstr	d0, [r7, #24]
 80025b4:	ed87 1b04 	vstr	d1, [r7, #16]
 80025b8:	ed87 2b02 	vstr	d2, [r7, #8]
 80025bc:	ed87 3b00 	vstr	d3, [r7]
	//Guardamos Coordenadas iniciales
	ptrParameterPath->start_position_x = starcoor_x;
 80025c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrParameterPath->start_position_y = starcoor_y;
 80025ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x = goalcoor_x;
 80025d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025da:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrParameterPath->goal_Position_y = goalcoor_y;
 80025de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025e4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	//Definimos la distancia
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80025f4:	f7fd fe60 	bl	80002b8 <__aeabi_dsub>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	ec43 2b17 	vmov	d7, r2, r3
 8002600:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8002678 <change_coordinates_position+0xd0>
 8002604:	eeb0 0a47 	vmov.f32	s0, s14
 8002608:	eef0 0a67 	vmov.f32	s1, s15
 800260c:	f00a ff46 	bl	800d49c <pow>
 8002610:	ec55 4b10 	vmov	r4, r5, d0
			pow(ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y,2));;                  //[mm]
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002620:	f7fd fe4a 	bl	80002b8 <__aeabi_dsub>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	ec43 2b17 	vmov	d7, r2, r3
 800262c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002678 <change_coordinates_position+0xd0>
 8002630:	eeb0 0a47 	vmov.f32	s0, s14
 8002634:	eef0 0a67 	vmov.f32	s1, s15
 8002638:	f00a ff30 	bl	800d49c <pow>
 800263c:	ec53 2b10 	vmov	r2, r3, d0
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8002640:	4620      	mov	r0, r4
 8002642:	4629      	mov	r1, r5
 8002644:	f7fd fe3a 	bl	80002bc <__adddf3>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	ec43 2b17 	vmov	d7, r2, r3
 8002650:	eeb0 0a47 	vmov.f32	s0, s14
 8002654:	eef0 0a67 	vmov.f32	s1, s15
 8002658:	f00a ff90 	bl	800d57c <sqrt>
 800265c:	ec53 2b10 	vmov	r2, r3, d0
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	f7fe fa90 	bl	8000b88 <__aeabi_d2iz>
 8002668:	4602      	mov	r2, r0
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	641a      	str	r2, [r3, #64]	; 0x40

}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	; 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bdb0      	pop	{r4, r5, r7, pc}
 8002676:	bf00      	nop
 8002678:	00000000 	.word	0x00000000
 800267c:	40000000 	.word	0x40000000

08002680 <calculation_parameter_distance>:

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8002680:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002684:	b08a      	sub	sp, #40	; 0x28
 8002686:	af00      	add	r7, sp, #0
 8002688:	6178      	str	r0, [r7, #20]
	//Calculo del vector director de la recta
	double a = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002696:	f7fd fe0f 	bl	80002b8 <__aeabi_dsub>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double b = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80026ae:	f7fd fe03 	bl	80002b8 <__aeabi_dsub>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->parametersStraight.magnitude_d = sqrt(pow(a,2)+pow(b,2));
 80026ba:	ed9f 1b43 	vldr	d1, [pc, #268]	; 80027c8 <calculation_parameter_distance+0x148>
 80026be:	ed97 0b08 	vldr	d0, [r7, #32]
 80026c2:	f00a feeb 	bl	800d49c <pow>
 80026c6:	ec59 8b10 	vmov	r8, r9, d0
 80026ca:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 80027c8 <calculation_parameter_distance+0x148>
 80026ce:	ed97 0b06 	vldr	d0, [r7, #24]
 80026d2:	f00a fee3 	bl	800d49c <pow>
 80026d6:	ec53 2b10 	vmov	r2, r3, d0
 80026da:	4640      	mov	r0, r8
 80026dc:	4649      	mov	r1, r9
 80026de:	f7fd fded 	bl	80002bc <__adddf3>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	ec43 2b17 	vmov	d7, r2, r3
 80026ea:	eeb0 0a47 	vmov.f32	s0, s14
 80026ee:	eef0 0a67 	vmov.f32	s1, s15
 80026f2:	f00a ff43 	bl	800d57c <sqrt>
 80026f6:	eeb0 7a40 	vmov.f32	s14, s0
 80026fa:	eef0 7a60 	vmov.f32	s15, s1
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->parametersStraight.proy_A = a;
 8002704:	6979      	ldr	r1, [r7, #20]
 8002706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800270a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->parametersStraight.proy_B = b;
 800270e:	6979      	ldr	r1, [r7, #20]
 8002710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002714:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->parametersStraight.proy_C = -1*a*ptrParameterPath->start_position_x - b*ptrParameterPath->start_position_y;
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800272a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800272e:	f7fd ff7b 	bl	8000628 <__aeabi_dmul>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4690      	mov	r8, r2
 8002738:	4699      	mov	r9, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002744:	f7fd ff70 	bl	8000628 <__aeabi_dmul>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4640      	mov	r0, r8
 800274e:	4649      	mov	r1, r9
 8002750:	f7fd fdb2 	bl	80002b8 <__aeabi_dsub>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	6979      	ldr	r1, [r7, #20]
 800275a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->parametersStraight.dis_point_A = b;
 800275e:	6979      	ldr	r1, [r7, #20]
 8002760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002764:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->parametersStraight.dis_point_B = -1*a;
 8002768:	6a3c      	ldr	r4, [r7, #32]
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->parametersStraight.dis_point_C = -1*b*ptrParameterPath->start_position_x + a*ptrParameterPath->start_position_y;
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002788:	e9d7 0100 	ldrd	r0, r1, [r7]
 800278c:	f7fd ff4c 	bl	8000628 <__aeabi_dmul>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4614      	mov	r4, r2
 8002796:	461d      	mov	r5, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800279e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027a2:	f7fd ff41 	bl	8000628 <__aeabi_dmul>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4620      	mov	r0, r4
 80027ac:	4629      	mov	r1, r5
 80027ae:	f7fd fd85 	bl	80002bc <__adddf3>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	6979      	ldr	r1, [r7, #20]
 80027b8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 80027bc:	bf00      	nop
 80027be:	3728      	adds	r7, #40	; 0x28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027c6:	bf00      	nop
 80027c8:	00000000 	.word	0x00000000
 80027cc:	40000000 	.word	0x40000000

080027d0 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double position_x, double position_y)
{
 80027d0:	b5b0      	push	{r4, r5, r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6178      	str	r0, [r7, #20]
 80027d8:	ed87 0b02 	vstr	d0, [r7, #8]
 80027dc:	ed87 1b00 	vstr	d1, [r7]
	//Calculo
	double distance = -1*((ptrParameterPath->parametersStraight.dis_point_A*position_x + ptrParameterPath->parametersStraight.dis_point_B*position_y
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80027e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ea:	f7fd ff1d 	bl	8000628 <__aeabi_dmul>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4614      	mov	r4, r2
 80027f4:	461d      	mov	r5, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80027fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002800:	f7fd ff12 	bl	8000628 <__aeabi_dmul>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4620      	mov	r0, r4
 800280a:	4629      	mov	r1, r5
 800280c:	f7fd fd56 	bl	80002bc <__adddf3>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4610      	mov	r0, r2
 8002816:	4619      	mov	r1, r3
			+ ptrParameterPath->parametersStraight.dis_point_C)/ptrParameterPath->parametersStraight.magnitude_d);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800281e:	f7fd fd4d 	bl	80002bc <__adddf3>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f7fe f824 	bl	800087c <__aeabi_ddiv>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->parametersStraight.dis_point_A*position_x + ptrParameterPath->parametersStraight.dis_point_B*position_y
 8002838:	4611      	mov	r1, r2
 800283a:	61b9      	str	r1, [r7, #24]
 800283c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002840:	61fb      	str	r3, [r7, #28]
	//Retornar
	return distance;
 8002842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002846:	ec43 2b17 	vmov	d7, r2, r3
}
 800284a:	eeb0 0a47 	vmov.f32	s0, s14
 800284e:	eef0 0a67 	vmov.f32	s1, s15
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bdb0      	pop	{r4, r5, r7, pc}

08002858 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double position_x, double position_y)
{
 8002858:	b5b0      	push	{r4, r5, r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	6178      	str	r0, [r7, #20]
 8002860:	ed87 0b02 	vstr	d0, [r7, #8]
 8002864:	ed87 1b00 	vstr	d1, [r7]
	//Calculo
	double distance_Tra = (ptrParameterPath->parametersStraight.proy_A*position_x + ptrParameterPath->parametersStraight.proy_B*position_y
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800286e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002872:	f7fd fed9 	bl	8000628 <__aeabi_dmul>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4614      	mov	r4, r2
 800287c:	461d      	mov	r5, r3
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002888:	f7fd fece 	bl	8000628 <__aeabi_dmul>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4620      	mov	r0, r4
 8002892:	4629      	mov	r1, r5
 8002894:	f7fd fd12 	bl	80002bc <__adddf3>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
			+ ptrParameterPath->parametersStraight.proy_C)/ptrParameterPath->parametersStraight.magnitude_d;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80028a6:	f7fd fd09 	bl	80002bc <__adddf3>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->parametersStraight.proy_A*position_x + ptrParameterPath->parametersStraight.proy_B*position_y
 80028b8:	f7fd ffe0 	bl	800087c <__aeabi_ddiv>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 80028c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028c8:	ec43 2b17 	vmov	d7, r2, r3
}
 80028cc:	eeb0 0a47 	vmov.f32	s0, s14
 80028d0:	eef0 0a67 	vmov.f32	s1, s15
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bdb0      	pop	{r4, r5, r7, pc}
 80028da:	0000      	movs	r0, r0
 80028dc:	0000      	movs	r0, r0
	...

080028e0 <calculed_ang_turn>:


//------------------------------Funciones auxiliares-----------------------------

double calculed_ang_turn(double vector_a[2], double vector_b[2])
{
 80028e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028e4:	b08a      	sub	sp, #40	; 0x28
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
    //Calculo de los diferentes elementos
    double dot = vector_a[0]*vector_b[1]-vector_b[0]*vector_b[1];
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	3308      	adds	r3, #8
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	f7fd fe95 	bl	8000628 <__aeabi_dmul>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4690      	mov	r8, r2
 8002904:	4699      	mov	r9, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	e9d3 0100 	ldrd	r0, r1, [r3]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	3308      	adds	r3, #8
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f7fd fe88 	bl	8000628 <__aeabi_dmul>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4640      	mov	r0, r8
 800291e:	4649      	mov	r1, r9
 8002920:	f7fd fcca 	bl	80002b8 <__aeabi_dsub>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double magvector_a = sqrt(pow(vector_a[0],2)+pow(vector_a[1],2));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	ed93 7b00 	vldr	d7, [r3]
 8002932:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8002ab0 <calculed_ang_turn+0x1d0>
 8002936:	eeb0 0a47 	vmov.f32	s0, s14
 800293a:	eef0 0a67 	vmov.f32	s1, s15
 800293e:	f00a fdad 	bl	800d49c <pow>
 8002942:	ec59 8b10 	vmov	r8, r9, d0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3308      	adds	r3, #8
 800294a:	ed93 7b00 	vldr	d7, [r3]
 800294e:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8002ab0 <calculed_ang_turn+0x1d0>
 8002952:	eeb0 0a47 	vmov.f32	s0, s14
 8002956:	eef0 0a67 	vmov.f32	s1, s15
 800295a:	f00a fd9f 	bl	800d49c <pow>
 800295e:	ec53 2b10 	vmov	r2, r3, d0
 8002962:	4640      	mov	r0, r8
 8002964:	4649      	mov	r1, r9
 8002966:	f7fd fca9 	bl	80002bc <__adddf3>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	ec43 2b17 	vmov	d7, r2, r3
 8002972:	eeb0 0a47 	vmov.f32	s0, s14
 8002976:	eef0 0a67 	vmov.f32	s1, s15
 800297a:	f00a fdff 	bl	800d57c <sqrt>
 800297e:	ed87 0b04 	vstr	d0, [r7, #16]
    double magvector_b = sqrt(pow(vector_b[0],2)+pow(vector_b[1],2));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	ed93 7b00 	vldr	d7, [r3]
 8002988:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8002ab0 <calculed_ang_turn+0x1d0>
 800298c:	eeb0 0a47 	vmov.f32	s0, s14
 8002990:	eef0 0a67 	vmov.f32	s1, s15
 8002994:	f00a fd82 	bl	800d49c <pow>
 8002998:	ec59 8b10 	vmov	r8, r9, d0
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	3308      	adds	r3, #8
 80029a0:	ed93 7b00 	vldr	d7, [r3]
 80029a4:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8002ab0 <calculed_ang_turn+0x1d0>
 80029a8:	eeb0 0a47 	vmov.f32	s0, s14
 80029ac:	eef0 0a67 	vmov.f32	s1, s15
 80029b0:	f00a fd74 	bl	800d49c <pow>
 80029b4:	ec53 2b10 	vmov	r2, r3, d0
 80029b8:	4640      	mov	r0, r8
 80029ba:	4649      	mov	r1, r9
 80029bc:	f7fd fc7e 	bl	80002bc <__adddf3>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	ec43 2b17 	vmov	d7, r2, r3
 80029c8:	eeb0 0a47 	vmov.f32	s0, s14
 80029cc:	eef0 0a67 	vmov.f32	s1, s15
 80029d0:	f00a fdd4 	bl	800d57c <sqrt>
 80029d4:	ed87 0b02 	vstr	d0, [r7, #8]
    double ang_between_vector = acos((vector_a[0]*vector_b[0]+vector_a[1]*vector_b[1])/(magvector_b*magvector_a));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fe20 	bl	8000628 <__aeabi_dmul>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4690      	mov	r8, r2
 80029ee:	4699      	mov	r9, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3308      	adds	r3, #8
 80029f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	3308      	adds	r3, #8
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	f7fd fe12 	bl	8000628 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4640      	mov	r0, r8
 8002a0a:	4649      	mov	r1, r9
 8002a0c:	f7fd fc56 	bl	80002bc <__adddf3>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4690      	mov	r8, r2
 8002a16:	4699      	mov	r9, r3
 8002a18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a20:	f7fd fe02 	bl	8000628 <__aeabi_dmul>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4640      	mov	r0, r8
 8002a2a:	4649      	mov	r1, r9
 8002a2c:	f7fd ff26 	bl	800087c <__aeabi_ddiv>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	ec43 2b17 	vmov	d7, r2, r3
 8002a38:	eeb0 0a47 	vmov.f32	s0, s14
 8002a3c:	eef0 0a67 	vmov.f32	s1, s15
 8002a40:	f00a fcf6 	bl	800d430 <acos>
 8002a44:	ed87 0b08 	vstr	d0, [r7, #32]
    //conversion a grados
    ang_between_vector = (ang_between_vector*180)/M_PI;
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <calculed_ang_turn+0x1e0>)
 8002a4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a52:	f7fd fde9 	bl	8000628 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	a316      	add	r3, pc, #88	; (adr r3, 8002ab8 <calculed_ang_turn+0x1d8>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd ff0a 	bl	800087c <__aeabi_ddiv>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //agregamos la direccion de giro
    if(dot<0){ ang_between_vector = -ang_between_vector;}
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a7c:	f7fe f846 	bl	8000b0c <__aeabi_dcmplt>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <calculed_ang_turn+0x1b2>
 8002a86:	6a3c      	ldr	r4, [r7, #32]
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002a8e:	e9c7 4508 	strd	r4, r5, [r7, #32]
    //Retornar valor
    return ang_between_vector;
 8002a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a96:	ec43 2b17 	vmov	d7, r2, r3
}
 8002a9a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a9e:	eef0 0a67 	vmov.f32	s1, s15
 8002aa2:	3728      	adds	r7, #40	; 0x28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002aaa:	bf00      	nop
 8002aac:	f3af 8000 	nop.w
 8002ab0:	00000000 	.word	0x00000000
 8002ab4:	40000000 	.word	0x40000000
 8002ab8:	54442d18 	.word	0x54442d18
 8002abc:	400921fb 	.word	0x400921fb
 8002ac0:	40668000 	.word	0x40668000

08002ac4 <build_grid_map>:
int8_t ne_pos_x[8] = {-1, 0, 1, 1, 1, 0, -1, -1};
int8_t ne_pos_y[8] = {1, 1, 1, 0, -1, -1, -1, 0};

// Función para crear la malla de celdas
void build_grid_map(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float separation)
{  
 8002ac4:	b5b0      	push	{r4, r5, r7, lr}
 8002ac6:	b08e      	sub	sp, #56	; 0x38
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	460b      	mov	r3, r1
 8002ace:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ad2:	72fb      	strb	r3, [r7, #11]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	72bb      	strb	r3, [r7, #10]
    float rel_x;
    float rel_y;

    //---------------------Asignacion de informacion------------------------
    // Llenar la matriz de celdas con valores predeterminados
    for (int i = 0; i < row; i++) {
 8002ad8:	2300      	movs	r3, #0
 8002ada:	637b      	str	r3, [r7, #52]	; 0x34
 8002adc:	e0fa      	b.n	8002cd4 <build_grid_map+0x210>
        for (int j = 0; j < colum; j++) {
 8002ade:	2300      	movs	r3, #0
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae2:	e0ef      	b.n	8002cc4 <build_grid_map+0x200>
            // Asignar valores a la celda
            grid[i][j].id[0] = 'A' + j;             // Asignar un identificador simple, 'A', 'B', ...
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aea:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8002aee:	fb01 f202 	mul.w	r2, r1, r2
 8002af2:	68f9      	ldr	r1, [r7, #12]
 8002af4:	440a      	add	r2, r1
 8002af6:	3341      	adds	r3, #65	; 0x41
 8002af8:	b2d8      	uxtb	r0, r3
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	2158      	movs	r1, #88	; 0x58
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	4602      	mov	r2, r0
 8002b06:	701a      	strb	r2, [r3, #0]
            grid[i][j].id[1] = '0' + i;             // Asignar una cifra simple, '0', '1', '2', ...
 8002b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b0e:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8002b12:	fb01 f202 	mul.w	r2, r1, r2
 8002b16:	68f9      	ldr	r1, [r7, #12]
 8002b18:	440a      	add	r2, r1
 8002b1a:	3330      	adds	r3, #48	; 0x30
 8002b1c:	b2d8      	uxtb	r0, r3
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	2158      	movs	r1, #88	; 0x58
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3301      	adds	r3, #1
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	701a      	strb	r2, [r3, #0]
            grid[i][j].index_row = i;               // Asignar el indice de la fila
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002b34:	fb02 f303 	mul.w	r3, r2, r3
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	441a      	add	r2, r3
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3e:	b2d8      	uxtb	r0, r3
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	2158      	movs	r1, #88	; 0x58
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	701a      	strb	r2, [r3, #0]
            grid[i][j].index_col = j;               // Asignar el indice de la columna
 8002b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b52:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	441a      	add	r2, r3
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	b2d8      	uxtb	r0, r3
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	2158      	movs	r1, #88	; 0x58
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3303      	adds	r3, #3
 8002b6e:	4602      	mov	r2, r0
 8002b70:	701a      	strb	r2, [r3, #0]
            grid[i][j].coor_x = separation * j;     // Asignar la posición x de la celda
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	ee07 3a90 	vmov	s15, r3
 8002b78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7e:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	441a      	add	r2, r3
 8002b8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	2158      	movs	r1, #88	; 0x58
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	edc3 7a00 	vstr	s15, [r3]
            grid[i][j].coor_y = separation * i;     // Asignar la posición y de la celda
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba4:	ee07 3a90 	vmov	s15, r3
 8002ba8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bae:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	441a      	add	r2, r3
 8002bba:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	2158      	movs	r1, #88	; 0x58
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3308      	adds	r3, #8
 8002bce:	edc3 7a00 	vstr	s15, [r3]
            grid[i][j].status = 0;                  // Inicializar el estado de la celda;             
 8002bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	441a      	add	r2, r3
 8002be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be2:	2158      	movs	r1, #88	; 0x58
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3354      	adds	r3, #84	; 0x54
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
            // Asignacion de vecinos a la celda actual
            for (uint8_t k = 0; k < 8; k++) {
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002bf6:	e05e      	b.n	8002cb6 <build_grid_map+0x1f2>
                int8_t index_row_ne = i + ne_pos_x[k]; 
 8002bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bfc:	4a9a      	ldr	r2, [pc, #616]	; (8002e68 <build_grid_map+0x3a4>)
 8002bfe:	56d3      	ldrsb	r3, [r2, r3]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	75fb      	strb	r3, [r7, #23]
                int8_t index_colum_ne = j + ne_pos_y[k]; 
 8002c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c10:	4a96      	ldr	r2, [pc, #600]	; (8002e6c <build_grid_map+0x3a8>)
 8002c12:	56d3      	ldrsb	r3, [r2, r3]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	75bb      	strb	r3, [r7, #22]
                // Se evalua si el indice esta dentro de la malla
                if (index_row_ne >= 0 && index_row_ne < row && index_colum_ne >= 0 && index_colum_ne < colum) 
 8002c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db2e      	blt.n	8002c86 <build_grid_map+0x1c2>
 8002c28:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002c2c:	7afb      	ldrb	r3, [r7, #11]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	da29      	bge.n	8002c86 <build_grid_map+0x1c2>
 8002c32:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db25      	blt.n	8002c86 <build_grid_map+0x1c2>
 8002c3a:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002c3e:	7abb      	ldrb	r3, [r7, #10]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	da20      	bge.n	8002c86 <build_grid_map+0x1c2>
                {
                    grid[i][j].neighbors.ptrCellMap[k] = &grid[index_row_ne][index_colum_ne];
 8002c44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c48:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002c4c:	fb02 f303 	mul.w	r3, r2, r3
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	18d0      	adds	r0, r2, r3
 8002c54:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5a:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	68f9      	ldr	r1, [r7, #12]
 8002c64:	4419      	add	r1, r3
 8002c66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c6a:	2458      	movs	r4, #88	; 0x58
 8002c6c:	fb04 f202 	mul.w	r2, r4, r2
 8002c70:	4402      	add	r2, r0
 8002c72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c74:	2416      	movs	r4, #22
 8002c76:	fb04 f000 	mul.w	r0, r4, r0
 8002c7a:	4403      	add	r3, r0
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	e012      	b.n	8002cac <build_grid_map+0x1e8>
                } 
                else 
                {
                    grid[i][j].neighbors.ptrCellMap[k] = NULL;                    
 8002c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c88:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002c8c:	fb02 f303 	mul.w	r3, r2, r3
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	441a      	add	r2, r3
 8002c94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c9a:	2016      	movs	r0, #22
 8002c9c:	fb00 f101 	mul.w	r1, r0, r1
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	2200      	movs	r2, #0
 8002caa:	605a      	str	r2, [r3, #4]
            for (uint8_t k = 0; k < 8; k++) {
 8002cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cba:	2b07      	cmp	r3, #7
 8002cbc:	d99c      	bls.n	8002bf8 <build_grid_map+0x134>
        for (int j = 0; j < colum; j++) {
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc4:	7abb      	ldrb	r3, [r7, #10]
 8002cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	f6ff af0b 	blt.w	8002ae4 <build_grid_map+0x20>
    for (int i = 0; i < row; i++) {
 8002cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd4:	7afb      	ldrb	r3, [r7, #11]
 8002cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	f6ff af00 	blt.w	8002ade <build_grid_map+0x1a>
        }
    }
    
    //------------------Distancias entre celdas------------------------
    //Se calcula la distancia de cada celda vecina
    for (int i = 0; i < row; i++) {
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce2:	e0b6      	b.n	8002e52 <build_grid_map+0x38e>
        for (int j = 0; j < colum; j++) {
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce8:	e0ab      	b.n	8002e42 <build_grid_map+0x37e>
            for (uint8_t k = 0; k < 8; k++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cf0:	e09f      	b.n	8002e32 <build_grid_map+0x36e>
            {    
                if(grid[i][j].neighbors.ptrCellMap[k] != NULL)
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002cf8:	fb02 f303 	mul.w	r3, r2, r3
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	441a      	add	r2, r3
 8002d00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d06:	2016      	movs	r0, #22
 8002d08:	fb00 f101 	mul.w	r1, r0, r1
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3302      	adds	r3, #2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d072      	beq.n	8002e00 <build_grid_map+0x33c>
                {
                    //Calculo vector relativo
                    rel_x = grid[i][j].neighbors.ptrCellMap[k]->coor_x - grid[i][j].coor_x;
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002d20:	fb02 f303 	mul.w	r3, r2, r3
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	441a      	add	r2, r3
 8002d28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d2e:	2016      	movs	r0, #22
 8002d30:	fb00 f101 	mul.w	r1, r0, r1
 8002d34:	440b      	add	r3, r1
 8002d36:	3302      	adds	r3, #2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002d48:	fb02 f303 	mul.w	r3, r2, r3
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	441a      	add	r2, r3
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	2158      	movs	r1, #88	; 0x58
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d64:	edc7 7a07 	vstr	s15, [r7, #28]
                    rel_y = grid[i][j].neighbors.ptrCellMap[k]->coor_y - grid[i][j].coor_y;
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	441a      	add	r2, r3
 8002d76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d7c:	2016      	movs	r0, #22
 8002d7e:	fb00 f101 	mul.w	r1, r0, r1
 8002d82:	440b      	add	r3, r1
 8002d84:	3302      	adds	r3, #2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	441a      	add	r2, r3
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	2158      	movs	r1, #88	; 0x58
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3308      	adds	r3, #8
 8002daa:	edd3 7a00 	vldr	s15, [r3]
 8002dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002db2:	edc7 7a06 	vstr	s15, [r7, #24]
                    //Ingresamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = sqrtf(rel_x * rel_x + rel_y * rel_y);
 8002db6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002dbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002dd0:	fb02 f303 	mul.w	r3, r2, r3
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	18d4      	adds	r4, r2, r3
 8002dd8:	f897 5023 	ldrb.w	r5, [r7, #35]	; 0x23
 8002ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8002de0:	f00a fbf8 	bl	800d5d4 <sqrtf>
 8002de4:	eef0 7a40 	vmov.f32	s15, s0
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	2216      	movs	r2, #22
 8002dec:	fb02 f303 	mul.w	r3, r2, r3
 8002df0:	442b      	add	r3, r5
 8002df2:	330a      	adds	r3, #10
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4423      	add	r3, r4
 8002df8:	3304      	adds	r3, #4
 8002dfa:	edc3 7a00 	vstr	s15, [r3]
 8002dfe:	e013      	b.n	8002e28 <build_grid_map+0x364>
                }
                else
                {
                    //Ingreamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = -1.0f;
 8002e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e02:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002e06:	fb02 f303 	mul.w	r3, r2, r3
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	441a      	add	r2, r3
 8002e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e14:	2016      	movs	r0, #22
 8002e16:	fb00 f101 	mul.w	r1, r0, r1
 8002e1a:	440b      	add	r3, r1
 8002e1c:	330a      	adds	r3, #10
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	3304      	adds	r3, #4
 8002e24:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <build_grid_map+0x3ac>)
 8002e26:	601a      	str	r2, [r3, #0]
            for (uint8_t k = 0; k < 8; k++)
 8002e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e36:	2b07      	cmp	r3, #7
 8002e38:	f67f af5b 	bls.w	8002cf2 <build_grid_map+0x22e>
        for (int j = 0; j < colum; j++) {
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	3301      	adds	r3, #1
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
 8002e42:	7abb      	ldrb	r3, [r7, #10]
 8002e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e46:	429a      	cmp	r2, r3
 8002e48:	f6ff af4f 	blt.w	8002cea <build_grid_map+0x226>
    for (int i = 0; i < row; i++) {
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	3301      	adds	r3, #1
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e52:	7afb      	ldrb	r3, [r7, #11]
 8002e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e56:	429a      	cmp	r2, r3
 8002e58:	f6ff af44 	blt.w	8002ce4 <build_grid_map+0x220>
                }                
            }
        }
    }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3738      	adds	r7, #56	; 0x38
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bdb0      	pop	{r4, r5, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	20000008 	.word	0x20000008
 8002e70:	bf800000 	.word	0xbf800000
 8002e74:	00000000 	.word	0x00000000

08002e78 <main>:
char bufferRecepcion[64] = {0};                  //Arreglo que almacena el comando ingresado

float distance_recta = 0;

int main(void)
{
 8002e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e7c:	b088      	sub	sp, #32
 8002e7e:	af02      	add	r7, sp, #8
	//Definicion de variables
	//float distance_recta = 0;
	float sampling_timer = 0;
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
	float distance_c = 0;
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]

	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 8002e8c:	2364      	movs	r3, #100	; 0x64
 8002e8e:	73fb      	strb	r3, [r7, #15]
	configPLL(clock);
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f003 ff4e 	bl	8006d34 <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 8002e98:	f000 fb6e 	bl	8003578 <int_Hardware>
	//Activamos el Systick
	config_SysTick_ms();
 8002e9c:	f004 fb74 	bl	8007588 <config_SysTick_ms>
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 8002ea0:	4b95      	ldr	r3, [pc, #596]	; (80030f8 <main+0x280>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea6:	4a94      	ldr	r2, [pc, #592]	; (80030f8 <main+0x280>)
 8002ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 8002eb0:	f000 fd30 	bl	8003914 <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	4891      	ldr	r0, [pc, #580]	; (80030fc <main+0x284>)
 8002eb8:	f003 fd2e 	bl	8006918 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4890      	ldr	r0, [pc, #576]	; (8003100 <main+0x288>)
 8002ec0:	f003 fd2a 	bl	8006918 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	488f      	ldr	r0, [pc, #572]	; (8003104 <main+0x28c>)
 8002ec8:	f003 fd26 	bl	8006918 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8002ecc:	2101      	movs	r1, #1
 8002ece:	488e      	ldr	r0, [pc, #568]	; (8003108 <main+0x290>)
 8002ed0:	f003 fd22 	bl	8006918 <GPIO_writePin>
	int_Config_Motor();
 8002ed4:	f000 fd28 	bl	8003928 <int_Config_Motor>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 8002ed8:	4b8c      	ldr	r3, [pc, #560]	; (800310c <main+0x294>)
 8002eda:	4a8d      	ldr	r2, [pc, #564]	; (8003110 <main+0x298>)
 8002edc:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = ((M_PI*DL)/(100*Ce));  //[mm/cuentas]
 8002ede:	4b8d      	ldr	r3, [pc, #564]	; (8003114 <main+0x29c>)
 8002ee0:	4a8d      	ldr	r2, [pc, #564]	; (8003118 <main+0x2a0>)
 8002ee2:	601a      	str	r2, [r3, #0]
	cm_R =	((M_PI*DR)/(100*Ce));  //[mm/cuentas]
 8002ee4:	4b8d      	ldr	r3, [pc, #564]	; (800311c <main+0x2a4>)
 8002ee6:	4a8e      	ldr	r2, [pc, #568]	; (8003120 <main+0x2a8>)
 8002ee8:	601a      	str	r2, [r3, #0]
	//Calculamos el setpoint
	velSetPoint = (0.00169*duttySetPoint + 0.0619);
 8002eea:	4b8e      	ldr	r3, [pc, #568]	; (8003124 <main+0x2ac>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fb30 	bl	8000554 <__aeabi_i2d>
 8002ef4:	a37c      	add	r3, pc, #496	; (adr r3, 80030e8 <main+0x270>)
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f7fd fb95 	bl	8000628 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	a37a      	add	r3, pc, #488	; (adr r3, 80030f0 <main+0x278>)
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	f7fd f9d6 	bl	80002bc <__adddf3>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4610      	mov	r0, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	f7fd fe7e 	bl	8000c18 <__aeabi_d2f>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4a82      	ldr	r2, [pc, #520]	; (8003128 <main+0x2b0>)
 8002f20:	6013      	str	r3, [r2, #0]


	while(1)
	{
		//-----------------------------Comandos------------------------------------
		if(commandComplete==1)
 8002f22:	4b82      	ldr	r3, [pc, #520]	; (800312c <main+0x2b4>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d106      	bne.n	8002f38 <main+0xc0>
		{
			runCommand(bufferRecepcion);
 8002f2a:	4881      	ldr	r0, [pc, #516]	; (8003130 <main+0x2b8>)
 8002f2c:	f000 ffcc 	bl	8003ec8 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 8002f30:	4b7e      	ldr	r3, [pc, #504]	; (800312c <main+0x2b4>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e000      	b.n	8002f3a <main+0xc2>
		}
		else
		{ __NOP(); }
 8002f38:	bf00      	nop


		//----------------------------A-Star------------------------------------
		if(flag_A_Star==1 && string_aStar_Complete==1)
 8002f3a:	4b7e      	ldr	r3, [pc, #504]	; (8003134 <main+0x2bc>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d158      	bne.n	8002ff4 <main+0x17c>
 8002f42:	4b7d      	ldr	r3, [pc, #500]	; (8003138 <main+0x2c0>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d154      	bne.n	8002ff4 <main+0x17c>
		{
		 //-------------Separar el String en los parametros del grid m-------------
		  Separate_parameters(grid_map, bufferParameterStringGM);
 8002f4a:	497c      	ldr	r1, [pc, #496]	; (800313c <main+0x2c4>)
 8002f4c:	487c      	ldr	r0, [pc, #496]	; (8003140 <main+0x2c8>)
 8002f4e:	f001 f98d 	bl	800426c <Separate_parameters>
		  //---------Creacion de la malla con cada una de sus celdas-----------
		  build_grid_map(grid_map, grid_map_row, grid_map_colum, cell_separation);
 8002f52:	4b7c      	ldr	r3, [pc, #496]	; (8003144 <main+0x2cc>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	4a7c      	ldr	r2, [pc, #496]	; (8003148 <main+0x2d0>)
 8002f58:	7812      	ldrb	r2, [r2, #0]
 8002f5a:	497c      	ldr	r1, [pc, #496]	; (800314c <main+0x2d4>)
 8002f5c:	edd1 7a00 	vldr	s15, [r1]
 8002f60:	eeb0 0a67 	vmov.f32	s0, s15
 8002f64:	4619      	mov	r1, r3
 8002f66:	4876      	ldr	r0, [pc, #472]	; (8003140 <main+0x2c8>)
 8002f68:	f7ff fdac 	bl	8002ac4 <build_grid_map>
		  //-------Calculo de la heuristica de la celda de acuerdo a la posicion objetivo-------
		  heuristic_cell_map(grid_map, grid_map_row, grid_map_colum, goal_x, goal_y);
 8002f6c:	4b75      	ldr	r3, [pc, #468]	; (8003144 <main+0x2cc>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	4a75      	ldr	r2, [pc, #468]	; (8003148 <main+0x2d0>)
 8002f72:	7812      	ldrb	r2, [r2, #0]
 8002f74:	4976      	ldr	r1, [pc, #472]	; (8003150 <main+0x2d8>)
 8002f76:	edd1 7a00 	vldr	s15, [r1]
 8002f7a:	4976      	ldr	r1, [pc, #472]	; (8003154 <main+0x2dc>)
 8002f7c:	ed91 7a00 	vldr	s14, [r1]
 8002f80:	eef0 0a47 	vmov.f32	s1, s14
 8002f84:	eeb0 0a67 	vmov.f32	s0, s15
 8002f88:	4619      	mov	r1, r3
 8002f8a:	486d      	ldr	r0, [pc, #436]	; (8003140 <main+0x2c8>)
 8002f8c:	f7fe fd50 	bl	8001a30 <heuristic_cell_map>
		  //------------------Aplicacion del algoritmo A star------------------
		  file_path = aplicattion_A_Star(grid_map, grid_map_row, grid_map_colum, start_x, start_y, goal_x, goal_y);
 8002f90:	4b6c      	ldr	r3, [pc, #432]	; (8003144 <main+0x2cc>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	4a6c      	ldr	r2, [pc, #432]	; (8003148 <main+0x2d0>)
 8002f96:	7812      	ldrb	r2, [r2, #0]
 8002f98:	496f      	ldr	r1, [pc, #444]	; (8003158 <main+0x2e0>)
 8002f9a:	edd1 7a00 	vldr	s15, [r1]
 8002f9e:	496f      	ldr	r1, [pc, #444]	; (800315c <main+0x2e4>)
 8002fa0:	ed91 7a00 	vldr	s14, [r1]
 8002fa4:	496a      	ldr	r1, [pc, #424]	; (8003150 <main+0x2d8>)
 8002fa6:	edd1 6a00 	vldr	s13, [r1]
 8002faa:	496a      	ldr	r1, [pc, #424]	; (8003154 <main+0x2dc>)
 8002fac:	ed91 6a00 	vldr	s12, [r1]
 8002fb0:	eef0 1a46 	vmov.f32	s3, s12
 8002fb4:	eeb0 1a66 	vmov.f32	s2, s13
 8002fb8:	eef0 0a47 	vmov.f32	s1, s14
 8002fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	485f      	ldr	r0, [pc, #380]	; (8003140 <main+0x2c8>)
 8002fc4:	f7fe f868 	bl	8001098 <aplicattion_A_Star>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4a65      	ldr	r2, [pc, #404]	; (8003160 <main+0x2e8>)
 8002fcc:	6013      	str	r3, [r2, #0]
		  //-----------------Impresion de la ruta encontrada--------------------
		  send_path(file_path, grid_map, grid_map_row, grid_map_colum);
 8002fce:	4b64      	ldr	r3, [pc, #400]	; (8003160 <main+0x2e8>)
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	4b5c      	ldr	r3, [pc, #368]	; (8003144 <main+0x2cc>)
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	4b5c      	ldr	r3, [pc, #368]	; (8003148 <main+0x2d0>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	4959      	ldr	r1, [pc, #356]	; (8003140 <main+0x2c8>)
 8002fdc:	f001 fa86 	bl	80044ec <send_path>
		  //Subimos bandera
		  flag_navegation_AStar = 1;
 8002fe0:	4b60      	ldr	r3, [pc, #384]	; (8003164 <main+0x2ec>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
		  //Reinicamos banderas
		  flag_A_Star = 0;
 8002fe6:	4b53      	ldr	r3, [pc, #332]	; (8003134 <main+0x2bc>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
		  string_aStar_Complete = 0;
 8002fec:	4b52      	ldr	r3, [pc, #328]	; (8003138 <main+0x2c0>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	e000      	b.n	8002ff6 <main+0x17e>
		}
		else{  __NOP(); }
 8002ff4:	bf00      	nop


		//----------------------------Accion de seleccion de operacion--------------------------------
		if(flag_multioperation == 1)
 8002ff6:	4b5c      	ldr	r3, [pc, #368]	; (8003168 <main+0x2f0>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d16f      	bne.n	80030de <main+0x266>
		{
			//Verificamos el modo de operacion
			if(flag_mode == 0)
 8002ffe:	4b5b      	ldr	r3, [pc, #364]	; (800316c <main+0x2f4>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d16d      	bne.n	80030e2 <main+0x26a>
			{
				//Delay para espera la finalizacion del modo
				delay_ms(500);
 8003006:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800300a:	f004 fb05 	bl	8007618 <delay_ms>
				//Ejecucion de operacion
				switch(list_operation[counting_operation].operacion)
 800300e:	4b58      	ldr	r3, [pc, #352]	; (8003170 <main+0x2f8>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	4a58      	ldr	r2, [pc, #352]	; (8003174 <main+0x2fc>)
 8003014:	015b      	lsls	r3, r3, #5
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d047      	beq.n	80030ae <main+0x236>
 800301e:	2b02      	cmp	r3, #2
 8003020:	f300 80b0 	bgt.w	8003184 <main+0x30c>
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <main+0x1b6>
 8003028:	2b01      	cmp	r3, #1
 800302a:	d00b      	beq.n	8003044 <main+0x1cc>
						turn_itself(list_operation[counting_operation].grad_Rotative);
						//Aumentamos valor del contador
						counting_operation ++;
						break;
					}
					default:{ break; }
 800302c:	e0aa      	b.n	8003184 <main+0x30c>
						flag_multioperation = 0;
 800302e:	4b4e      	ldr	r3, [pc, #312]	; (8003168 <main+0x2f0>)
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
						counting_operation = 0;
 8003034:	4b4e      	ldr	r3, [pc, #312]	; (8003170 <main+0x2f8>)
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
						writeMsgForTXE(&handler_USART_USB, "Operaciones finalizadas");
 800303a:	494f      	ldr	r1, [pc, #316]	; (8003178 <main+0x300>)
 800303c:	484f      	ldr	r0, [pc, #316]	; (800317c <main+0x304>)
 800303e:	f004 fe03 	bl	8007c48 <writeMsgForTXE>
						break;
 8003042:	e0a0      	b.n	8003186 <main+0x30e>
						change_coordinates_position(&parameter_Path_Robot, list_operation[counting_operation].x_destination, list_operation[counting_operation].y_destination,
 8003044:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <main+0x2f8>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4a4a      	ldr	r2, [pc, #296]	; (8003174 <main+0x2fc>)
 800304a:	015b      	lsls	r3, r3, #5
 800304c:	4413      	add	r3, r2
 800304e:	3308      	adds	r3, #8
 8003050:	ed93 7b00 	vldr	d7, [r3]
 8003054:	4b46      	ldr	r3, [pc, #280]	; (8003170 <main+0x2f8>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	4a46      	ldr	r2, [pc, #280]	; (8003174 <main+0x2fc>)
 800305a:	015b      	lsls	r3, r3, #5
 800305c:	4413      	add	r3, r2
 800305e:	3310      	adds	r3, #16
 8003060:	ed93 6b00 	vldr	d6, [r3]
 8003064:	4b46      	ldr	r3, [pc, #280]	; (8003180 <main+0x308>)
 8003066:	ed93 5b16 	vldr	d5, [r3, #88]	; 0x58
 800306a:	4b45      	ldr	r3, [pc, #276]	; (8003180 <main+0x308>)
 800306c:	ed93 4b18 	vldr	d4, [r3, #96]	; 0x60
 8003070:	eeb0 3a44 	vmov.f32	s6, s8
 8003074:	eef0 3a64 	vmov.f32	s7, s9
 8003078:	eeb0 2a45 	vmov.f32	s4, s10
 800307c:	eef0 2a65 	vmov.f32	s5, s11
 8003080:	eeb0 1a46 	vmov.f32	s2, s12
 8003084:	eef0 1a66 	vmov.f32	s3, s13
 8003088:	eeb0 0a47 	vmov.f32	s0, s14
 800308c:	eef0 0a67 	vmov.f32	s1, s15
 8003090:	483b      	ldr	r0, [pc, #236]	; (8003180 <main+0x308>)
 8003092:	f7ff fa89 	bl	80025a8 <change_coordinates_position>
						straight_line(duttySetPoint);
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <main+0x2ac>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f001 facc 	bl	8004638 <straight_line>
						counting_operation++;
 80030a0:	4b33      	ldr	r3, [pc, #204]	; (8003170 <main+0x2f8>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	4b31      	ldr	r3, [pc, #196]	; (8003170 <main+0x2f8>)
 80030aa:	701a      	strb	r2, [r3, #0]
						break;
 80030ac:	e06b      	b.n	8003186 <main+0x30e>
						turn_itself(list_operation[counting_operation].grad_Rotative);
 80030ae:	4b30      	ldr	r3, [pc, #192]	; (8003170 <main+0x2f8>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	4a30      	ldr	r2, [pc, #192]	; (8003174 <main+0x2fc>)
 80030b4:	015b      	lsls	r3, r3, #5
 80030b6:	4413      	add	r3, r2
 80030b8:	3318      	adds	r3, #24
 80030ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	f7fd fd61 	bl	8000b88 <__aeabi_d2iz>
 80030c6:	4603      	mov	r3, r0
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	4618      	mov	r0, r3
 80030cc:	f001 fbb8 	bl	8004840 <turn_itself>
						counting_operation ++;
 80030d0:	4b27      	ldr	r3, [pc, #156]	; (8003170 <main+0x2f8>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <main+0x2f8>)
 80030da:	701a      	strb	r2, [r3, #0]
						break;
 80030dc:	e053      	b.n	8003186 <main+0x30e>
				}
			}
		}
		else{ __NOP(); }
 80030de:	bf00      	nop
 80030e0:	e051      	b.n	8003186 <main+0x30e>
			}
 80030e2:	bf00      	nop
 80030e4:	e04f      	b.n	8003186 <main+0x30e>
 80030e6:	bf00      	nop
 80030e8:	aebc408e 	.word	0xaebc408e
 80030ec:	3f5bb05f 	.word	0x3f5bb05f
 80030f0:	573eab36 	.word	0x573eab36
 80030f4:	3fafb15b 	.word	0x3fafb15b
 80030f8:	e000ed00 	.word	0xe000ed00
 80030fc:	200002f4 	.word	0x200002f4
 8003100:	20000368 	.word	0x20000368
 8003104:	20000300 	.word	0x20000300
 8003108:	20000374 	.word	0x20000374
 800310c:	20009420 	.word	0x20009420
 8003110:	20000318 	.word	0x20000318
 8003114:	20009048 	.word	0x20009048
 8003118:	40105fa7 	.word	0x40105fa7
 800311c:	2000904c 	.word	0x2000904c
 8003120:	400facee 	.word	0x400facee
 8003124:	20000018 	.word	0x20000018
 8003128:	20009430 	.word	0x20009430
 800312c:	20000019 	.word	0x20000019
 8003130:	20009440 	.word	0x20009440
 8003134:	20008f51 	.word	0x20008f51
 8003138:	20008f50 	.word	0x20008f50
 800313c:	20008d70 	.word	0x20008d70
 8003140:	200003f0 	.word	0x200003f0
 8003144:	20008f3a 	.word	0x20008f3a
 8003148:	20008f3b 	.word	0x20008f3b
 800314c:	20008f3c 	.word	0x20008f3c
 8003150:	20008f48 	.word	0x20008f48
 8003154:	20008f4c 	.word	0x20008f4c
 8003158:	20008f40 	.word	0x20008f40
 800315c:	20008f44 	.word	0x20008f44
 8003160:	20008f34 	.word	0x20008f34
 8003164:	20008f52 	.word	0x20008f52
 8003168:	20009424 	.word	0x20009424
 800316c:	20009426 	.word	0x20009426
 8003170:	20009427 	.word	0x20009427
 8003174:	20009060 	.word	0x20009060
 8003178:	0800fbf0 	.word	0x0800fbf0
 800317c:	2000029c 	.word	0x2000029c
 8003180:	20008f78 	.word	0x20008f78
					default:{ break; }
 8003184:	bf00      	nop

		//--------------------------Accion especifica del modo-----------------------------
		if(flag_action == 1)
 8003186:	4bb4      	ldr	r3, [pc, #720]	; (8003458 <main+0x5e0>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b01      	cmp	r3, #1
 800318c:	f040 818c 	bne.w	80034a8 <main+0x630>
		{
			//Verificamos el modo de operacion
			if(flag_mode == 1)
 8003190:	4bb2      	ldr	r3, [pc, #712]	; (800345c <main+0x5e4>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 815a 	bne.w	800344e <main+0x5d6>
			{
				//Conversion de tiempo
				sampling_timer = ((float) time_accion/1000);
 800319a:	4bb1      	ldr	r3, [pc, #708]	; (8003460 <main+0x5e8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031a6:	eddf 6aaf 	vldr	s13, [pc, #700]	; 8003464 <main+0x5ec>
 80031aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031ae:	edc7 7a05 	vstr	s15, [r7, #20]
				//Calculo odometria
				distance_c = (handler_Motor_R.parametersMotor.distance+handler_Motor_L.parametersMotor.distance)/2;  	//[mm]
 80031b2:	4bad      	ldr	r3, [pc, #692]	; (8003468 <main+0x5f0>)
 80031b4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80031b8:	4bac      	ldr	r3, [pc, #688]	; (800346c <main+0x5f4>)
 80031ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80031be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80031c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031ca:	edc7 7a04 	vstr	s15, [r7, #16]
				parameter_Posicion_Robot.xr_position += distance_c*(cos(parameter_Posicion_Robot.phi_relativo));        //[mm]
 80031ce:	4ba8      	ldr	r3, [pc, #672]	; (8003470 <main+0x5f8>)
 80031d0:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 80031d4:	6938      	ldr	r0, [r7, #16]
 80031d6:	f7fd f9cf 	bl	8000578 <__aeabi_f2d>
 80031da:	e9c7 0100 	strd	r0, r1, [r7]
 80031de:	4ba4      	ldr	r3, [pc, #656]	; (8003470 <main+0x5f8>)
 80031e0:	ed93 7b02 	vldr	d7, [r3, #8]
 80031e4:	eeb0 0a47 	vmov.f32	s0, s14
 80031e8:	eef0 0a67 	vmov.f32	s1, s15
 80031ec:	f00a f82c 	bl	800d248 <cos>
 80031f0:	ec53 2b10 	vmov	r2, r3, d0
 80031f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031f8:	f7fd fa16 	bl	8000628 <__aeabi_dmul>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4650      	mov	r0, sl
 8003202:	4659      	mov	r1, fp
 8003204:	f7fd f85a 	bl	80002bc <__adddf3>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4998      	ldr	r1, [pc, #608]	; (8003470 <main+0x5f8>)
 800320e:	e9c1 2306 	strd	r2, r3, [r1, #24]
				parameter_Posicion_Robot.yr_position += distance_c*(sin(parameter_Posicion_Robot.phi_relativo));       //[mm]
 8003212:	4b97      	ldr	r3, [pc, #604]	; (8003470 <main+0x5f8>)
 8003214:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 8003218:	6938      	ldr	r0, [r7, #16]
 800321a:	f7fd f9ad 	bl	8000578 <__aeabi_f2d>
 800321e:	e9c7 0100 	strd	r0, r1, [r7]
 8003222:	4b93      	ldr	r3, [pc, #588]	; (8003470 <main+0x5f8>)
 8003224:	ed93 7b02 	vldr	d7, [r3, #8]
 8003228:	eeb0 0a47 	vmov.f32	s0, s14
 800322c:	eef0 0a67 	vmov.f32	s1, s15
 8003230:	f00a f8a6 	bl	800d380 <sin>
 8003234:	ec53 2b10 	vmov	r2, r3, d0
 8003238:	e9d7 0100 	ldrd	r0, r1, [r7]
 800323c:	f7fd f9f4 	bl	8000628 <__aeabi_dmul>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4650      	mov	r0, sl
 8003246:	4659      	mov	r1, fp
 8003248:	f7fd f838 	bl	80002bc <__adddf3>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4987      	ldr	r1, [pc, #540]	; (8003470 <main+0x5f8>)
 8003252:	e9c1 2308 	strd	r2, r3, [r1, #32]
				//Paso de c.relativa a c.globales
				parameter_Posicion_Robot.xg_position = parameter_Posicion_Robot.xg_position_inicial + parameter_Posicion_Robot.xr_position*cos_cal - parameter_Posicion_Robot.yr_position*sin_cal;
 8003256:	4b86      	ldr	r3, [pc, #536]	; (8003470 <main+0x5f8>)
 8003258:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 800325c:	4b84      	ldr	r3, [pc, #528]	; (8003470 <main+0x5f8>)
 800325e:	ed93 7b06 	vldr	d7, [r3, #24]
 8003262:	ed87 7b00 	vstr	d7, [r7]
 8003266:	4b83      	ldr	r3, [pc, #524]	; (8003474 <main+0x5fc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd f984 	bl	8000578 <__aeabi_f2d>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003278:	f7fd f9d6 	bl	8000628 <__aeabi_dmul>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4650      	mov	r0, sl
 8003282:	4659      	mov	r1, fp
 8003284:	f7fd f81a 	bl	80002bc <__adddf3>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	e9c7 2300 	strd	r2, r3, [r7]
 8003290:	4b77      	ldr	r3, [pc, #476]	; (8003470 <main+0x5f8>)
 8003292:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 8003296:	4b78      	ldr	r3, [pc, #480]	; (8003478 <main+0x600>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd f96c 	bl	8000578 <__aeabi_f2d>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4650      	mov	r0, sl
 80032a6:	4659      	mov	r1, fp
 80032a8:	f7fd f9be 	bl	8000628 <__aeabi_dmul>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032b4:	f7fd f800 	bl	80002b8 <__aeabi_dsub>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	496c      	ldr	r1, [pc, #432]	; (8003470 <main+0x5f8>)
 80032be:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				parameter_Posicion_Robot.yg_position = parameter_Posicion_Robot.yg_position_inicial + parameter_Posicion_Robot.xr_position*sin_cal + parameter_Posicion_Robot.yr_position*cos_cal;
 80032c2:	4b6b      	ldr	r3, [pc, #428]	; (8003470 <main+0x5f8>)
 80032c4:	e9d3 ab0c 	ldrd	sl, fp, [r3, #48]	; 0x30
 80032c8:	4b69      	ldr	r3, [pc, #420]	; (8003470 <main+0x5f8>)
 80032ca:	ed93 7b06 	vldr	d7, [r3, #24]
 80032ce:	ed87 7b00 	vstr	d7, [r7]
 80032d2:	4b69      	ldr	r3, [pc, #420]	; (8003478 <main+0x600>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd f94e 	bl	8000578 <__aeabi_f2d>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032e4:	f7fd f9a0 	bl	8000628 <__aeabi_dmul>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4650      	mov	r0, sl
 80032ee:	4659      	mov	r1, fp
 80032f0:	f7fc ffe4 	bl	80002bc <__adddf3>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	e9c7 2300 	strd	r2, r3, [r7]
 80032fc:	4b5c      	ldr	r3, [pc, #368]	; (8003470 <main+0x5f8>)
 80032fe:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 8003302:	4b5c      	ldr	r3, [pc, #368]	; (8003474 <main+0x5fc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd f936 	bl	8000578 <__aeabi_f2d>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4650      	mov	r0, sl
 8003312:	4659      	mov	r1, fp
 8003314:	f7fd f988 	bl	8000628 <__aeabi_dmul>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003320:	f7fc ffcc 	bl	80002bc <__adddf3>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4951      	ldr	r1, [pc, #324]	; (8003470 <main+0x5f8>)
 800332a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
				//Convertimos el valor y imprimemos
				sprintf(bufferMsg,"&%#.4f\t%#.4f\n", parameter_Posicion_Robot.xg_position , parameter_Posicion_Robot.yg_position);
 800332e:	4b50      	ldr	r3, [pc, #320]	; (8003470 <main+0x5f8>)
 8003330:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003334:	4b4e      	ldr	r3, [pc, #312]	; (8003470 <main+0x5f8>)
 8003336:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800333a:	e9cd 2300 	strd	r2, r3, [sp]
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	494e      	ldr	r1, [pc, #312]	; (800347c <main+0x604>)
 8003344:	484e      	ldr	r0, [pc, #312]	; (8003480 <main+0x608>)
 8003346:	f005 fd41 	bl	8008dcc <siprintf>
				writeMsgForTXE(&handler_USART_USB, bufferMsg);
 800334a:	494d      	ldr	r1, [pc, #308]	; (8003480 <main+0x608>)
 800334c:	484d      	ldr	r0, [pc, #308]	; (8003484 <main+0x60c>)
 800334e:	f004 fc7b 	bl	8007c48 <writeMsgForTXE>
				//Control PID para la distancia
				distance_recta = (distance_to_straight_line(&parameter_Path_Robot, parameter_Posicion_Robot.xg_position, parameter_Posicion_Robot.yg_position))/1000;
 8003352:	4b47      	ldr	r3, [pc, #284]	; (8003470 <main+0x5f8>)
 8003354:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8003358:	4b45      	ldr	r3, [pc, #276]	; (8003470 <main+0x5f8>)
 800335a:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800335e:	eeb0 1a46 	vmov.f32	s2, s12
 8003362:	eef0 1a66 	vmov.f32	s3, s13
 8003366:	eeb0 0a47 	vmov.f32	s0, s14
 800336a:	eef0 0a67 	vmov.f32	s1, s15
 800336e:	4846      	ldr	r0, [pc, #280]	; (8003488 <main+0x610>)
 8003370:	f7ff fa2e 	bl	80027d0 <distance_to_straight_line>
 8003374:	ec51 0b10 	vmov	r0, r1, d0
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	4b43      	ldr	r3, [pc, #268]	; (800348c <main+0x614>)
 800337e:	f7fd fa7d 	bl	800087c <__aeabi_ddiv>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4610      	mov	r0, r2
 8003388:	4619      	mov	r1, r3
 800338a:	f7fd fc45 	bl	8000c18 <__aeabi_d2f>
 800338e:	4603      	mov	r3, r0
 8003390:	4a3f      	ldr	r2, [pc, #252]	; (8003490 <main+0x618>)
 8003392:	6013      	str	r3, [r2, #0]
				PID_simple(&parameter_PID_distace, sampling_timer, 0,  distance_recta);
 8003394:	4b3e      	ldr	r3, [pc, #248]	; (8003490 <main+0x618>)
 8003396:	edd3 7a00 	vldr	s15, [r3]
 800339a:	eeb0 1a67 	vmov.f32	s2, s15
 800339e:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8003494 <main+0x61c>
 80033a2:	ed97 0a05 	vldr	s0, [r7, #20]
 80033a6:	483c      	ldr	r0, [pc, #240]	; (8003498 <main+0x620>)
 80033a8:	f001 fcda 	bl	8004d60 <PID_simple>
				//Aplicacndo correcion
				vel_Setpoint_L = velSetPoint - parameter_PID_distace.u;
 80033ac:	4b3b      	ldr	r3, [pc, #236]	; (800349c <main+0x624>)
 80033ae:	ed93 7a00 	vldr	s14, [r3]
 80033b2:	4b39      	ldr	r3, [pc, #228]	; (8003498 <main+0x620>)
 80033b4:	edd3 7a00 	vldr	s15, [r3]
 80033b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033bc:	4b38      	ldr	r3, [pc, #224]	; (80034a0 <main+0x628>)
 80033be:	edc3 7a00 	vstr	s15, [r3]
				vel_Setpoint_R = velSetPoint + parameter_PID_distace.u;
 80033c2:	4b35      	ldr	r3, [pc, #212]	; (8003498 <main+0x620>)
 80033c4:	ed93 7a00 	vldr	s14, [r3]
 80033c8:	4b34      	ldr	r3, [pc, #208]	; (800349c <main+0x624>)
 80033ca:	edd3 7a00 	vldr	s15, [r3]
 80033ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d2:	4b34      	ldr	r3, [pc, #208]	; (80034a4 <main+0x62c>)
 80033d4:	edc3 7a00 	vstr	s15, [r3]
				//Aplicacion del PID
				PID_simple(&handler_Motor_L.parametersMotor.parametersPID, sampling_timer, vel_Setpoint_L,  handler_Motor_L.parametersMotor.velocity);
 80033d8:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <main+0x628>)
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	4b23      	ldr	r3, [pc, #140]	; (800346c <main+0x5f4>)
 80033e0:	ed93 7a08 	vldr	s14, [r3, #32]
 80033e4:	eeb0 1a47 	vmov.f32	s2, s14
 80033e8:	eef0 0a67 	vmov.f32	s1, s15
 80033ec:	ed97 0a05 	vldr	s0, [r7, #20]
 80033f0:	481e      	ldr	r0, [pc, #120]	; (800346c <main+0x5f4>)
 80033f2:	f001 fcb5 	bl	8004d60 <PID_simple>
				PID_simple(&handler_Motor_R.parametersMotor.parametersPID, sampling_timer, vel_Setpoint_R,  handler_Motor_R.parametersMotor.velocity);
 80033f6:	4b2b      	ldr	r3, [pc, #172]	; (80034a4 <main+0x62c>)
 80033f8:	edd3 7a00 	vldr	s15, [r3]
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <main+0x5f0>)
 80033fe:	ed93 7a08 	vldr	s14, [r3, #32]
 8003402:	eeb0 1a47 	vmov.f32	s2, s14
 8003406:	eef0 0a67 	vmov.f32	s1, s15
 800340a:	ed97 0a05 	vldr	s0, [r7, #20]
 800340e:	4816      	ldr	r0, [pc, #88]	; (8003468 <main+0x5f0>)
 8003410:	f001 fca6 	bl	8004d60 <PID_simple>
				//Cambiamos valores
				handler_Motor_L.configMotor.new_dutty += handler_Motor_L.parametersMotor.parametersPID.u;
 8003414:	4b15      	ldr	r3, [pc, #84]	; (800346c <main+0x5f4>)
 8003416:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800341a:	4b14      	ldr	r3, [pc, #80]	; (800346c <main+0x5f4>)
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003424:	4b11      	ldr	r3, [pc, #68]	; (800346c <main+0x5f4>)
 8003426:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
				handler_Motor_R.configMotor.new_dutty += handler_Motor_R.parametersMotor.parametersPID.u;
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <main+0x5f0>)
 800342c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <main+0x5f0>)
 8003432:	edd3 7a00 	vldr	s15, [r3]
 8003436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <main+0x5f0>)
 800343c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
				//Correccion del dutty
				correction(&handler_Motor_L);
 8003440:	480a      	ldr	r0, [pc, #40]	; (800346c <main+0x5f4>)
 8003442:	f001 fce9 	bl	8004e18 <correction>
				correction(&handler_Motor_R);
 8003446:	4808      	ldr	r0, [pc, #32]	; (8003468 <main+0x5f0>)
 8003448:	f001 fce6 	bl	8004e18 <correction>
 800344c:	e000      	b.n	8003450 <main+0x5d8>
			}
			else{ __NOP(); }
 800344e:	bf00      	nop
			//Bajamos Bandera
			flag_action = 0;
 8003450:	4b01      	ldr	r3, [pc, #4]	; (8003458 <main+0x5e0>)
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	e028      	b.n	80034aa <main+0x632>
 8003458:	20009425 	.word	0x20009425
 800345c:	20009426 	.word	0x20009426
 8003460:	20009434 	.word	0x20009434
 8003464:	447a0000 	.word	0x447a0000
 8003468:	20000318 	.word	0x20000318
 800346c:	2000038c 	.word	0x2000038c
 8003470:	20008fe0 	.word	0x20008fe0
 8003474:	20009038 	.word	0x20009038
 8003478:	2000903c 	.word	0x2000903c
 800347c:	0800fc08 	.word	0x0800fc08
 8003480:	200002a8 	.word	0x200002a8
 8003484:	2000029c 	.word	0x2000029c
 8003488:	20008f78 	.word	0x20008f78
 800348c:	408f4000 	.word	0x408f4000
 8003490:	20009480 	.word	0x20009480
 8003494:	00000000 	.word	0x00000000
 8003498:	20008f58 	.word	0x20008f58
 800349c:	20009430 	.word	0x20009430
 80034a0:	2000942c 	.word	0x2000942c
 80034a4:	20009428 	.word	0x20009428
		}
		else{ __NOP(); }
 80034a8:	bf00      	nop


		//------------------------------Accion para finalizar modo------------------------------------
		//Verificamos las condiciones de parada
		if(flag_mode==1)
 80034aa:	4b2e      	ldr	r3, [pc, #184]	; (8003564 <main+0x6ec>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d130      	bne.n	8003514 <main+0x69c>
		{
			if(distance_traveled(&parameter_Path_Robot, parameter_Posicion_Robot.xg_position, parameter_Posicion_Robot.yg_position)>parameter_Path_Robot.line_Distance){
 80034b2:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <main+0x6f0>)
 80034b4:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80034b8:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <main+0x6f0>)
 80034ba:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80034be:	eeb0 1a46 	vmov.f32	s2, s12
 80034c2:	eef0 1a66 	vmov.f32	s3, s13
 80034c6:	eeb0 0a47 	vmov.f32	s0, s14
 80034ca:	eef0 0a67 	vmov.f32	s1, s15
 80034ce:	4827      	ldr	r0, [pc, #156]	; (800356c <main+0x6f4>)
 80034d0:	f7ff f9c2 	bl	8002858 <distance_traveled>
 80034d4:	ec5b ab10 	vmov	sl, fp, d0
 80034d8:	4b24      	ldr	r3, [pc, #144]	; (800356c <main+0x6f4>)
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd f839 	bl	8000554 <__aeabi_i2d>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4650      	mov	r0, sl
 80034e8:	4659      	mov	r1, fp
 80034ea:	f7fd fb2d 	bl	8000b48 <__aeabi_dcmpgt>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d036      	beq.n	8003562 <main+0x6ea>
				//desactivamos los motores
				status_motor(RESET);
 80034f4:	2080      	movs	r0, #128	; 0x80
 80034f6:	f001 fccd 	bl	8004e94 <status_motor>
				//Guardamos la posicion final
				parameter_Posicion_Robot.xg_position_inicial = parameter_Posicion_Robot.xg_position;
 80034fa:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <main+0x6f0>)
 80034fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003500:	4919      	ldr	r1, [pc, #100]	; (8003568 <main+0x6f0>)
 8003502:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				parameter_Posicion_Robot.yg_position_inicial = parameter_Posicion_Robot.yg_position;
 8003506:	4b18      	ldr	r3, [pc, #96]	; (8003568 <main+0x6f0>)
 8003508:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800350c:	4916      	ldr	r1, [pc, #88]	; (8003568 <main+0x6f0>)
 800350e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8003512:	e506      	b.n	8002f22 <main+0xaa>
			}
		}
		else if(flag_mode==2)
 8003514:	4b13      	ldr	r3, [pc, #76]	; (8003564 <main+0x6ec>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d121      	bne.n	8003560 <main+0x6e8>
		{
			if(fabs(ang_complementary) > fabs(parameter_Path_Robot.rotative_Grad_Relative)){
 800351c:	4b14      	ldr	r3, [pc, #80]	; (8003570 <main+0x6f8>)
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	4614      	mov	r4, r2
 8003524:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003528:	4b10      	ldr	r3, [pc, #64]	; (800356c <main+0x6f4>)
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd f811 	bl	8000554 <__aeabi_i2d>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4690      	mov	r8, r2
 8003538:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800353c:	4642      	mov	r2, r8
 800353e:	464b      	mov	r3, r9
 8003540:	4620      	mov	r0, r4
 8003542:	4629      	mov	r1, r5
 8003544:	f7fd fb00 	bl	8000b48 <__aeabi_dcmpgt>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <main+0x6ea>
				//Paramos los motores
				status_motor(RESET);
 800354e:	2080      	movs	r0, #128	; 0x80
 8003550:	f001 fca0 	bl	8004e94 <status_motor>
				updateDirMotor(handler_Motor_Execute);
 8003554:	4b07      	ldr	r3, [pc, #28]	; (8003574 <main+0x6fc>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe fe9a 	bl	8002292 <updateDirMotor>
 800355e:	e4e0      	b.n	8002f22 <main+0xaa>
			}
		}
		else{ __NOP(); }
 8003560:	bf00      	nop
		if(commandComplete==1)
 8003562:	e4de      	b.n	8002f22 <main+0xaa>
 8003564:	20009426 	.word	0x20009426
 8003568:	20008fe0 	.word	0x20008fe0
 800356c:	20008f78 	.word	0x20008f78
 8003570:	20009058 	.word	0x20009058
 8003574:	20009420 	.word	0x20009420

08003578 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 800357e:	4bae      	ldr	r3, [pc, #696]	; (8003838 <int_Hardware+0x2c0>)
 8003580:	4aae      	ldr	r2, [pc, #696]	; (800383c <int_Hardware+0x2c4>)
 8003582:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 8003584:	4bac      	ldr	r3, [pc, #688]	; (8003838 <int_Hardware+0x2c0>)
 8003586:	2208      	movs	r2, #8
 8003588:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800358a:	2300      	movs	r3, #0
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	2300      	movs	r3, #0
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2301      	movs	r3, #1
 8003594:	2200      	movs	r2, #0
 8003596:	2101      	movs	r1, #1
 8003598:	48a7      	ldr	r0, [pc, #668]	; (8003838 <int_Hardware+0x2c0>)
 800359a:	f003 f871 	bl	8006680 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 800359e:	48a6      	ldr	r0, [pc, #664]	; (8003838 <int_Hardware+0x2c0>)
 80035a0:	f003 f890 	bl	80066c4 <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 80035a4:	4ba6      	ldr	r3, [pc, #664]	; (8003840 <int_Hardware+0x2c8>)
 80035a6:	4aa7      	ldr	r2, [pc, #668]	; (8003844 <int_Hardware+0x2cc>)
 80035a8:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 80035aa:	4ba5      	ldr	r3, [pc, #660]	; (8003840 <int_Hardware+0x2c8>)
 80035ac:	2205      	movs	r2, #5
 80035ae:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80035b0:	2300      	movs	r3, #0
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	2300      	movs	r3, #0
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	2301      	movs	r3, #1
 80035ba:	2200      	movs	r2, #0
 80035bc:	2101      	movs	r1, #1
 80035be:	48a0      	ldr	r0, [pc, #640]	; (8003840 <int_Hardware+0x2c8>)
 80035c0:	f003 f85e 	bl	8006680 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 80035c4:	489e      	ldr	r0, [pc, #632]	; (8003840 <int_Hardware+0x2c8>)
 80035c6:	f003 f87d 	bl	80066c4 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 80035ca:	4b9f      	ldr	r3, [pc, #636]	; (8003848 <int_Hardware+0x2d0>)
 80035cc:	4a9d      	ldr	r2, [pc, #628]	; (8003844 <int_Hardware+0x2cc>)
 80035ce:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 80035d0:	4b9d      	ldr	r3, [pc, #628]	; (8003848 <int_Hardware+0x2d0>)
 80035d2:	2202      	movs	r2, #2
 80035d4:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80035d6:	2307      	movs	r3, #7
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	2300      	movs	r3, #0
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	2301      	movs	r3, #1
 80035e0:	2200      	movs	r2, #0
 80035e2:	2102      	movs	r1, #2
 80035e4:	4898      	ldr	r0, [pc, #608]	; (8003848 <int_Hardware+0x2d0>)
 80035e6:	f003 f84b 	bl	8006680 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 80035ea:	4897      	ldr	r0, [pc, #604]	; (8003848 <int_Hardware+0x2d0>)
 80035ec:	f003 f86a 	bl	80066c4 <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 80035f0:	4b96      	ldr	r3, [pc, #600]	; (800384c <int_Hardware+0x2d4>)
 80035f2:	4a94      	ldr	r2, [pc, #592]	; (8003844 <int_Hardware+0x2cc>)
 80035f4:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 80035f6:	4b95      	ldr	r3, [pc, #596]	; (800384c <int_Hardware+0x2d4>)
 80035f8:	2203      	movs	r2, #3
 80035fa:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80035fc:	2307      	movs	r3, #7
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	2300      	movs	r3, #0
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	2301      	movs	r3, #1
 8003606:	2200      	movs	r2, #0
 8003608:	2102      	movs	r1, #2
 800360a:	4890      	ldr	r0, [pc, #576]	; (800384c <int_Hardware+0x2d4>)
 800360c:	f003 f838 	bl	8006680 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 8003610:	488e      	ldr	r0, [pc, #568]	; (800384c <int_Hardware+0x2d4>)
 8003612:	f003 f857 	bl	80066c4 <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8003616:	4b8e      	ldr	r3, [pc, #568]	; (8003850 <int_Hardware+0x2d8>)
 8003618:	4a8a      	ldr	r2, [pc, #552]	; (8003844 <int_Hardware+0x2cc>)
 800361a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 800361c:	4b8c      	ldr	r3, [pc, #560]	; (8003850 <int_Hardware+0x2d8>)
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8003622:	2302      	movs	r3, #2
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	2300      	movs	r3, #0
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	2301      	movs	r3, #1
 800362c:	2200      	movs	r2, #0
 800362e:	2102      	movs	r1, #2
 8003630:	4887      	ldr	r0, [pc, #540]	; (8003850 <int_Hardware+0x2d8>)
 8003632:	f003 f825 	bl	8006680 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8003636:	4886      	ldr	r0, [pc, #536]	; (8003850 <int_Hardware+0x2d8>)
 8003638:	f003 f844 	bl	80066c4 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 800363c:	4b85      	ldr	r3, [pc, #532]	; (8003854 <int_Hardware+0x2dc>)
 800363e:	4a7f      	ldr	r2, [pc, #508]	; (800383c <int_Hardware+0x2c4>)
 8003640:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 8003642:	4b84      	ldr	r3, [pc, #528]	; (8003854 <int_Hardware+0x2dc>)
 8003644:	220c      	movs	r2, #12
 8003646:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003648:	2300      	movs	r3, #0
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	2300      	movs	r3, #0
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2301      	movs	r3, #1
 8003652:	2200      	movs	r2, #0
 8003654:	2101      	movs	r1, #1
 8003656:	487f      	ldr	r0, [pc, #508]	; (8003854 <int_Hardware+0x2dc>)
 8003658:	f003 f812 	bl	8006680 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 800365c:	487d      	ldr	r0, [pc, #500]	; (8003854 <int_Hardware+0x2dc>)
 800365e:	f003 f831 	bl	80066c4 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 8003662:	4b7d      	ldr	r3, [pc, #500]	; (8003858 <int_Hardware+0x2e0>)
 8003664:	4a75      	ldr	r2, [pc, #468]	; (800383c <int_Hardware+0x2c4>)
 8003666:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8003668:	4b7b      	ldr	r3, [pc, #492]	; (8003858 <int_Hardware+0x2e0>)
 800366a:	220a      	movs	r2, #10
 800366c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800366e:	2300      	movs	r3, #0
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	2300      	movs	r3, #0
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	2301      	movs	r3, #1
 8003678:	2200      	movs	r2, #0
 800367a:	2101      	movs	r1, #1
 800367c:	4876      	ldr	r0, [pc, #472]	; (8003858 <int_Hardware+0x2e0>)
 800367e:	f002 ffff 	bl	8006680 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 8003682:	4875      	ldr	r0, [pc, #468]	; (8003858 <int_Hardware+0x2e0>)
 8003684:	f003 f81e 	bl	80066c4 <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 8003688:	4b74      	ldr	r3, [pc, #464]	; (800385c <int_Hardware+0x2e4>)
 800368a:	4a6e      	ldr	r2, [pc, #440]	; (8003844 <int_Hardware+0x2cc>)
 800368c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 800368e:	4b73      	ldr	r3, [pc, #460]	; (800385c <int_Hardware+0x2e4>)
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8003694:	2302      	movs	r3, #2
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	2300      	movs	r3, #0
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	2301      	movs	r3, #1
 800369e:	2200      	movs	r2, #0
 80036a0:	2102      	movs	r1, #2
 80036a2:	486e      	ldr	r0, [pc, #440]	; (800385c <int_Hardware+0x2e4>)
 80036a4:	f002 ffec 	bl	8006680 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 80036a8:	486c      	ldr	r0, [pc, #432]	; (800385c <int_Hardware+0x2e4>)
 80036aa:	f003 f80b 	bl	80066c4 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 80036ae:	4b6c      	ldr	r3, [pc, #432]	; (8003860 <int_Hardware+0x2e8>)
 80036b0:	4a6c      	ldr	r2, [pc, #432]	; (8003864 <int_Hardware+0x2ec>)
 80036b2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 80036b4:	4b6a      	ldr	r3, [pc, #424]	; (8003860 <int_Hardware+0x2e8>)
 80036b6:	2202      	movs	r2, #2
 80036b8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80036ba:	2300      	movs	r3, #0
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	2300      	movs	r3, #0
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	2301      	movs	r3, #1
 80036c4:	2200      	movs	r2, #0
 80036c6:	2101      	movs	r1, #1
 80036c8:	4865      	ldr	r0, [pc, #404]	; (8003860 <int_Hardware+0x2e8>)
 80036ca:	f002 ffd9 	bl	8006680 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 80036ce:	4864      	ldr	r0, [pc, #400]	; (8003860 <int_Hardware+0x2e8>)
 80036d0:	f002 fff8 	bl	80066c4 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 80036d4:	4b64      	ldr	r3, [pc, #400]	; (8003868 <int_Hardware+0x2f0>)
 80036d6:	4a59      	ldr	r2, [pc, #356]	; (800383c <int_Hardware+0x2c4>)
 80036d8:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 80036da:	4b63      	ldr	r3, [pc, #396]	; (8003868 <int_Hardware+0x2f0>)
 80036dc:	220b      	movs	r2, #11
 80036de:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80036e0:	2300      	movs	r3, #0
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	2300      	movs	r3, #0
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	2301      	movs	r3, #1
 80036ea:	2200      	movs	r2, #0
 80036ec:	2101      	movs	r1, #1
 80036ee:	485e      	ldr	r0, [pc, #376]	; (8003868 <int_Hardware+0x2f0>)
 80036f0:	f002 ffc6 	bl	8006680 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 80036f4:	485c      	ldr	r0, [pc, #368]	; (8003868 <int_Hardware+0x2f0>)
 80036f6:	f002 ffe5 	bl	80066c4 <GPIO_Config>

	//---------------------------I2C--------------------------------
	//---------------PIN: PB8----------------
	//------------AF4: I2C1_SCL----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SCL_MPU6050.pGPIOx = GPIOB;
 80036fa:	4b5c      	ldr	r3, [pc, #368]	; (800386c <int_Hardware+0x2f4>)
 80036fc:	4a5c      	ldr	r2, [pc, #368]	; (8003870 <int_Hardware+0x2f8>)
 80036fe:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SCL_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 8003700:	4b5a      	ldr	r3, [pc, #360]	; (800386c <int_Hardware+0x2f4>)
 8003702:	2208      	movs	r2, #8
 8003704:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SCL_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8003706:	2304      	movs	r3, #4
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	2300      	movs	r3, #0
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	2302      	movs	r3, #2
 8003710:	2201      	movs	r2, #1
 8003712:	2102      	movs	r1, #2
 8003714:	4855      	ldr	r0, [pc, #340]	; (800386c <int_Hardware+0x2f4>)
 8003716:	f002 ffb3 	bl	8006680 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SCL_MPU6050);
 800371a:	4854      	ldr	r0, [pc, #336]	; (800386c <int_Hardware+0x2f4>)
 800371c:	f002 ffd2 	bl	80066c4 <GPIO_Config>

	//---------------PIN: PB9----------------
	//------------AF4: I2C1_SDA----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SDA_MPU6050.pGPIOx = GPIOB;
 8003720:	4b54      	ldr	r3, [pc, #336]	; (8003874 <int_Hardware+0x2fc>)
 8003722:	4a53      	ldr	r2, [pc, #332]	; (8003870 <int_Hardware+0x2f8>)
 8003724:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SDA_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8003726:	4b53      	ldr	r3, [pc, #332]	; (8003874 <int_Hardware+0x2fc>)
 8003728:	2209      	movs	r2, #9
 800372a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SDA_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 800372c:	2304      	movs	r3, #4
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	2300      	movs	r3, #0
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2302      	movs	r3, #2
 8003736:	2201      	movs	r2, #1
 8003738:	2102      	movs	r1, #2
 800373a:	484e      	ldr	r0, [pc, #312]	; (8003874 <int_Hardware+0x2fc>)
 800373c:	f002 ffa0 	bl	8006680 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SDA_MPU6050);
 8003740:	484c      	ldr	r0, [pc, #304]	; (8003874 <int_Hardware+0x2fc>)
 8003742:	f002 ffbf 	bl	80066c4 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 8003746:	4b4c      	ldr	r3, [pc, #304]	; (8003878 <int_Hardware+0x300>)
 8003748:	4a4c      	ldr	r2, [pc, #304]	; (800387c <int_Hardware+0x304>)
 800374a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 800374c:	4b4a      	ldr	r3, [pc, #296]	; (8003878 <int_Hardware+0x300>)
 800374e:	2202      	movs	r2, #2
 8003750:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8003752:	4b49      	ldr	r3, [pc, #292]	; (8003878 <int_Hardware+0x300>)
 8003754:	2201      	movs	r2, #1
 8003756:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8003758:	4b47      	ldr	r3, [pc, #284]	; (8003878 <int_Hardware+0x300>)
 800375a:	2200      	movs	r2, #0
 800375c:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800375e:	4b46      	ldr	r3, [pc, #280]	; (8003878 <int_Hardware+0x300>)
 8003760:	2200      	movs	r2, #0
 8003762:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8003764:	4b44      	ldr	r3, [pc, #272]	; (8003878 <int_Hardware+0x300>)
 8003766:	2201      	movs	r2, #1
 8003768:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 800376a:	4b43      	ldr	r3, [pc, #268]	; (8003878 <int_Hardware+0x300>)
 800376c:	2201      	movs	r2, #1
 800376e:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 8003770:	4841      	ldr	r0, [pc, #260]	; (8003878 <int_Hardware+0x300>)
 8003772:	f003 ffc5 	bl	8007700 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8003776:	4b42      	ldr	r3, [pc, #264]	; (8003880 <int_Hardware+0x308>)
 8003778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800377c:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800377e:	4b40      	ldr	r3, [pc, #256]	; (8003880 <int_Hardware+0x308>)
 8003780:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003784:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8003786:	4b3e      	ldr	r3, [pc, #248]	; (8003880 <int_Hardware+0x308>)
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 800378c:	4b3c      	ldr	r3, [pc, #240]	; (8003880 <int_Hardware+0x308>)
 800378e:	22fa      	movs	r2, #250	; 0xfa
 8003790:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8003792:	4b3b      	ldr	r3, [pc, #236]	; (8003880 <int_Hardware+0x308>)
 8003794:	2201      	movs	r2, #1
 8003796:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 8003798:	4839      	ldr	r0, [pc, #228]	; (8003880 <int_Hardware+0x308>)
 800379a:	f001 fd4d 	bl	8005238 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Sampling.ptrTIMx = TIM3;
 800379e:	4b39      	ldr	r3, [pc, #228]	; (8003884 <int_Hardware+0x30c>)
 80037a0:	4a39      	ldr	r2, [pc, #228]	; (8003888 <int_Hardware+0x310>)
 80037a2:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Sampling.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80037a4:	4b37      	ldr	r3, [pc, #220]	; (8003884 <int_Hardware+0x30c>)
 80037a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037aa:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Sampling.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80037ac:	4b35      	ldr	r3, [pc, #212]	; (8003884 <int_Hardware+0x30c>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Sampling.TIMx_Config.TIMX_period = 16;   //Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80037b2:	4b34      	ldr	r3, [pc, #208]	; (8003884 <int_Hardware+0x30c>)
 80037b4:	2210      	movs	r2, #16
 80037b6:	605a      	str	r2, [r3, #4]
	handler_TIMER_Sampling.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80037b8:	4b32      	ldr	r3, [pc, #200]	; (8003884 <int_Hardware+0x30c>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Sampling);
 80037be:	4831      	ldr	r0, [pc, #196]	; (8003884 <int_Hardware+0x30c>)
 80037c0:	f001 fd3a 	bl	8005238 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 80037c4:	4b31      	ldr	r3, [pc, #196]	; (800388c <int_Hardware+0x314>)
 80037c6:	4a32      	ldr	r2, [pc, #200]	; (8003890 <int_Hardware+0x318>)
 80037c8:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80037ca:	4b30      	ldr	r3, [pc, #192]	; (800388c <int_Hardware+0x314>)
 80037cc:	220a      	movs	r2, #10
 80037ce:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80037d0:	4b2e      	ldr	r3, [pc, #184]	; (800388c <int_Hardware+0x314>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80037d6:	4b2d      	ldr	r3, [pc, #180]	; (800388c <int_Hardware+0x314>)
 80037d8:	2264      	movs	r2, #100	; 0x64
 80037da:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <int_Hardware+0x314>)
 80037de:	2200      	movs	r2, #0
 80037e0:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 80037e2:	482a      	ldr	r0, [pc, #168]	; (800388c <int_Hardware+0x314>)
 80037e4:	f001 fd28 	bl	8005238 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 80037e8:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <int_Hardware+0x31c>)
 80037ea:	4a14      	ldr	r2, [pc, #80]	; (800383c <int_Hardware+0x2c4>)
 80037ec:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <int_Hardware+0x31c>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 80037f4:	4b28      	ldr	r3, [pc, #160]	; (8003898 <int_Hardware+0x320>)
 80037f6:	4a27      	ldr	r2, [pc, #156]	; (8003894 <int_Hardware+0x31c>)
 80037f8:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 80037fa:	4b27      	ldr	r3, [pc, #156]	; (8003898 <int_Hardware+0x320>)
 80037fc:	2202      	movs	r2, #2
 80037fe:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 8003800:	4825      	ldr	r0, [pc, #148]	; (8003898 <int_Hardware+0x320>)
 8003802:	f001 fe9d 	bl	8005540 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8003806:	4b25      	ldr	r3, [pc, #148]	; (800389c <int_Hardware+0x324>)
 8003808:	4a0c      	ldr	r2, [pc, #48]	; (800383c <int_Hardware+0x2c4>)
 800380a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800380c:	4b23      	ldr	r3, [pc, #140]	; (800389c <int_Hardware+0x324>)
 800380e:	2203      	movs	r2, #3
 8003810:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8003812:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <int_Hardware+0x328>)
 8003814:	4a21      	ldr	r2, [pc, #132]	; (800389c <int_Hardware+0x324>)
 8003816:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8003818:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <int_Hardware+0x328>)
 800381a:	2202      	movs	r2, #2
 800381c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 800381e:	4820      	ldr	r0, [pc, #128]	; (80038a0 <int_Hardware+0x328>)
 8003820:	f001 fe8e 	bl	8005540 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8003824:	4b1f      	ldr	r3, [pc, #124]	; (80038a4 <int_Hardware+0x32c>)
 8003826:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <int_Hardware+0x318>)
 8003828:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 800382a:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <int_Hardware+0x32c>)
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8003830:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <int_Hardware+0x32c>)
 8003832:	220a      	movs	r2, #10
 8003834:	805a      	strh	r2, [r3, #2]
 8003836:	e037      	b.n	80038a8 <int_Hardware+0x330>
 8003838:	20000228 	.word	0x20000228
 800383c:	40020800 	.word	0x40020800
 8003840:	2000020c 	.word	0x2000020c
 8003844:	40020000 	.word	0x40020000
 8003848:	20000284 	.word	0x20000284
 800384c:	20000290 	.word	0x20000290
 8003850:	200002e8 	.word	0x200002e8
 8003854:	200002f4 	.word	0x200002f4
 8003858:	20000300 	.word	0x20000300
 800385c:	2000035c 	.word	0x2000035c
 8003860:	20000368 	.word	0x20000368
 8003864:	40020c00 	.word	0x40020c00
 8003868:	20000374 	.word	0x20000374
 800386c:	2000025c 	.word	0x2000025c
 8003870:	40020400 	.word	0x40020400
 8003874:	20000268 	.word	0x20000268
 8003878:	2000029c 	.word	0x2000029c
 800387c:	40004400 	.word	0x40004400
 8003880:	20000218 	.word	0x20000218
 8003884:	200003e0 	.word	0x200003e0
 8003888:	40000400 	.word	0x40000400
 800388c:	200003d0 	.word	0x200003d0
 8003890:	40000c00 	.word	0x40000c00
 8003894:	20000234 	.word	0x20000234
 8003898:	20000240 	.word	0x20000240
 800389c:	20000248 	.word	0x20000248
 80038a0:	20000254 	.word	0x20000254
 80038a4:	2000030c 	.word	0x2000030c
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <int_Hardware+0x388>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 80038ae:	4814      	ldr	r0, [pc, #80]	; (8003900 <int_Hardware+0x388>)
 80038b0:	f003 fb6e 	bl	8006f90 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 80038b4:	2101      	movs	r1, #1
 80038b6:	4812      	ldr	r0, [pc, #72]	; (8003900 <int_Hardware+0x388>)
 80038b8:	f003 fcca 	bl	8007250 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <int_Hardware+0x38c>)
 80038be:	4a12      	ldr	r2, [pc, #72]	; (8003908 <int_Hardware+0x390>)
 80038c0:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <int_Hardware+0x38c>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <int_Hardware+0x38c>)
 80038ca:	220a      	movs	r2, #10
 80038cc:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <int_Hardware+0x38c>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 80038d4:	480b      	ldr	r0, [pc, #44]	; (8003904 <int_Hardware+0x38c>)
 80038d6:	f003 fb5b 	bl	8006f90 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 80038da:	2101      	movs	r1, #1
 80038dc:	4809      	ldr	r0, [pc, #36]	; (8003904 <int_Hardware+0x38c>)
 80038de:	f003 fcb7 	bl	8007250 <statusInOutPWM>

	//-------------------Inicio de Configuracion I2Cx----------------------

	//---------------I2C1----------------
	//Definimos el I2Cx a usar
	handler_I2C_MPU6050.prtI2Cx = I2C1;
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <int_Hardware+0x394>)
 80038e4:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <int_Hardware+0x398>)
 80038e6:	601a      	str	r2, [r3, #0]
	//Definimos la configuracion para el I2C
	handler_I2C_MPU6050.modeI2C = I2C_MODE_FM;               //I2C_MODE_x  x->SM,FM
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <int_Hardware+0x394>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	715a      	strb	r2, [r3, #5]
	handler_I2C_MPU6050.slaveAddress = ADDRESS_DOWN;         //Direccion del Sclave
 80038ee:	4b07      	ldr	r3, [pc, #28]	; (800390c <int_Hardware+0x394>)
 80038f0:	2268      	movs	r2, #104	; 0x68
 80038f2:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	i2c_Config(&handler_I2C_MPU6050);
 80038f4:	4805      	ldr	r0, [pc, #20]	; (800390c <int_Hardware+0x394>)
 80038f6:	f003 f851 	bl	800699c <i2c_Config>

	//---------------------Fin de Configuracion I2Cx----------------------

}
 80038fa:	bf00      	nop
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	2000030c 	.word	0x2000030c
 8003904:	20000380 	.word	0x20000380
 8003908:	40000c00 	.word	0x40000c00
 800390c:	20000274 	.word	0x20000274
 8003910:	40005400 	.word	0x40005400

08003914 <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 8003918:	2000      	movs	r0, #0
 800391a:	f003 fabd 	bl	8006e98 <configMCO2>
	configMCO2PRE(4);
 800391e:	2004      	movs	r0, #4
 8003920:	f003 fad6 	bl	8006ed0 <configMCO2PRE>
}
 8003924:	bf00      	nop
 8003926:	bd80      	pop	{r7, pc}

08003928 <int_Config_Motor>:



//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  28;
 800392c:	4b3c      	ldr	r3, [pc, #240]	; (8003a20 <int_Config_Motor+0xf8>)
 800392e:	4a3d      	ldr	r2, [pc, #244]	; (8003a24 <int_Config_Motor+0xfc>)
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_R.configMotor.frecuency = &value_period;
 8003932:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <int_Config_Motor+0xf8>)
 8003934:	4a3c      	ldr	r2, [pc, #240]	; (8003a28 <int_Config_Motor+0x100>)
 8003936:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_R.configMotor.dir = SET;
 8003938:	4b39      	ldr	r3, [pc, #228]	; (8003a20 <int_Config_Motor+0xf8>)
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 8003940:	4b37      	ldr	r3, [pc, #220]	; (8003a20 <int_Config_Motor+0xf8>)
 8003942:	4a3a      	ldr	r2, [pc, #232]	; (8003a2c <int_Config_Motor+0x104>)
 8003944:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 8003946:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <int_Config_Motor+0xf8>)
 8003948:	4a39      	ldr	r2, [pc, #228]	; (8003a30 <int_Config_Motor+0x108>)
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 800394c:	4b34      	ldr	r3, [pc, #208]	; (8003a20 <int_Config_Motor+0xf8>)
 800394e:	4a39      	ldr	r2, [pc, #228]	; (8003a34 <int_Config_Motor+0x10c>)
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 8003952:	4b33      	ldr	r3, [pc, #204]	; (8003a20 <int_Config_Motor+0xf8>)
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <int_Config_Motor+0xf8>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	4a30      	ldr	r2, [pc, #192]	; (8003a20 <int_Config_Motor+0xf8>)
 8003960:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 8003962:	4b2f      	ldr	r3, [pc, #188]	; (8003a20 <int_Config_Motor+0xf8>)
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	609a      	str	r2, [r3, #8]
 800396a:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <int_Config_Motor+0xf8>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	4a2c      	ldr	r2, [pc, #176]	; (8003a20 <int_Config_Motor+0xf8>)
 8003970:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_R.parametersMotor.parametersPID.kp = 250;
 8003972:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <int_Config_Motor+0xf8>)
 8003974:	4a30      	ldr	r2, [pc, #192]	; (8003a38 <int_Config_Motor+0x110>)
 8003976:	611a      	str	r2, [r3, #16]
	handler_Motor_R.parametersMotor.parametersPID.ki = 0;
 8003978:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <int_Config_Motor+0xf8>)
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	615a      	str	r2, [r3, #20]
	handler_Motor_R.parametersMotor.parametersPID.kd = 100;
 8003980:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <int_Config_Motor+0xf8>)
 8003982:	4a2e      	ldr	r2, [pc, #184]	; (8003a3c <int_Config_Motor+0x114>)
 8003984:	619a      	str	r2, [r3, #24]

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  28;
 8003986:	4b2e      	ldr	r3, [pc, #184]	; (8003a40 <int_Config_Motor+0x118>)
 8003988:	4a26      	ldr	r2, [pc, #152]	; (8003a24 <int_Config_Motor+0xfc>)
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_L.configMotor.frecuency = &value_period;
 800398c:	4b2c      	ldr	r3, [pc, #176]	; (8003a40 <int_Config_Motor+0x118>)
 800398e:	4a26      	ldr	r2, [pc, #152]	; (8003a28 <int_Config_Motor+0x100>)
 8003990:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_L.configMotor.dir = SET;
 8003992:	4b2b      	ldr	r3, [pc, #172]	; (8003a40 <int_Config_Motor+0x118>)
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 800399a:	4b29      	ldr	r3, [pc, #164]	; (8003a40 <int_Config_Motor+0x118>)
 800399c:	4a29      	ldr	r2, [pc, #164]	; (8003a44 <int_Config_Motor+0x11c>)
 800399e:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 80039a0:	4b27      	ldr	r3, [pc, #156]	; (8003a40 <int_Config_Motor+0x118>)
 80039a2:	4a29      	ldr	r2, [pc, #164]	; (8003a48 <int_Config_Motor+0x120>)
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 80039a6:	4b26      	ldr	r3, [pc, #152]	; (8003a40 <int_Config_Motor+0x118>)
 80039a8:	4a28      	ldr	r2, [pc, #160]	; (8003a4c <int_Config_Motor+0x124>)
 80039aa:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 80039ac:	4b24      	ldr	r3, [pc, #144]	; (8003a40 <int_Config_Motor+0x118>)
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	60da      	str	r2, [r3, #12]
 80039b4:	4b22      	ldr	r3, [pc, #136]	; (8003a40 <int_Config_Motor+0x118>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4a21      	ldr	r2, [pc, #132]	; (8003a40 <int_Config_Motor+0x118>)
 80039ba:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 80039bc:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <int_Config_Motor+0x118>)
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <int_Config_Motor+0x118>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <int_Config_Motor+0x118>)
 80039ca:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_L.parametersMotor.parametersPID.kp = 250;
 80039cc:	4b1c      	ldr	r3, [pc, #112]	; (8003a40 <int_Config_Motor+0x118>)
 80039ce:	4a1a      	ldr	r2, [pc, #104]	; (8003a38 <int_Config_Motor+0x110>)
 80039d0:	611a      	str	r2, [r3, #16]
	handler_Motor_L.parametersMotor.parametersPID.ki = 0;
 80039d2:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <int_Config_Motor+0x118>)
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	615a      	str	r2, [r3, #20]
	handler_Motor_L.parametersMotor.parametersPID.kd = 100;
 80039da:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <int_Config_Motor+0x118>)
 80039dc:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <int_Config_Motor+0x114>)
 80039de:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distace.e = parameter_PID_distace.e_prev = 0;
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <int_Config_Motor+0x128>)
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <int_Config_Motor+0x128>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <int_Config_Motor+0x128>)
 80039ee:	6053      	str	r3, [r2, #4]
	parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 80039f0:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <int_Config_Motor+0x128>)
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <int_Config_Motor+0x128>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a14      	ldr	r2, [pc, #80]	; (8003a50 <int_Config_Motor+0x128>)
 80039fe:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	parameter_PID_distace.kp = 1.0;
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <int_Config_Motor+0x128>)
 8003a02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a06:	611a      	str	r2, [r3, #16]
	parameter_PID_distace.ki = 0.1;
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <int_Config_Motor+0x128>)
 8003a0a:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <int_Config_Motor+0x12c>)
 8003a0c:	615a      	str	r2, [r3, #20]
	parameter_PID_distace.kd = 0.8;
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <int_Config_Motor+0x128>)
 8003a10:	4a11      	ldr	r2, [pc, #68]	; (8003a58 <int_Config_Motor+0x130>)
 8003a12:	619a      	str	r2, [r3, #24]
};
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000318 	.word	0x20000318
 8003a24:	41e00000 	.word	0x41e00000
 8003a28:	20000012 	.word	0x20000012
 8003a2c:	20000300 	.word	0x20000300
 8003a30:	200002f4 	.word	0x200002f4
 8003a34:	2000030c 	.word	0x2000030c
 8003a38:	437a0000 	.word	0x437a0000
 8003a3c:	42c80000 	.word	0x42c80000
 8003a40:	2000038c 	.word	0x2000038c
 8003a44:	20000374 	.word	0x20000374
 8003a48:	20000368 	.word	0x20000368
 8003a4c:	20000380 	.word	0x20000380
 8003a50:	20008f58 	.word	0x20008f58
 8003a54:	3dcccccd 	.word	0x3dcccccd
 8003a58:	3f4ccccd 	.word	0x3f4ccccd

08003a5c <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 8003a60:	4802      	ldr	r0, [pc, #8]	; (8003a6c <BasicTimer2_Callback+0x10>)
 8003a62:	f002 ff84 	bl	800696e <GPIOxTooglePin>
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	2000020c 	.word	0x2000020c

08003a70 <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 8003a74:	f004 f926 	bl	8007cc4 <getRxData>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <BasicUSART2_Callback+0x2c>)
 8003a7e:	701a      	strb	r2, [r3, #0]
	//Funciones que almacena los caracteres del comando recibido
	if(flag_A_Star){ recepcion_Sring_Parameter_Grid_Map(charRead); }
 8003a80:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <BasicUSART2_Callback+0x30>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <BasicUSART2_Callback+0x24>
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <BasicUSART2_Callback+0x2c>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fbb9 	bl	8004204 <recepcion_Sring_Parameter_Grid_Map>
	else{ recepcionCommand(); }
}
 8003a92:	e001      	b.n	8003a98 <BasicUSART2_Callback+0x28>
	else{ recepcionCommand(); }
 8003a94:	f000 f9ea 	bl	8003e6c <recepcionCommand>
}
 8003a98:	bf00      	nop
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000010 	.word	0x20000010
 8003aa0:	20008f51 	.word	0x20008f51
 8003aa4:	00000000 	.word	0x00000000

08003aa8 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	ed2d 8b02 	vpush	{d8}
 8003aae:	af00      	add	r7, sp, #0
	//----------------Accion a Realizar con el tiempo del TIMER--------------------
	//Leemos el angulo
	parameter_Posicion_Robot.grad_relativo = getAngle(&handler_MPUAccel_MPU6050, &sample_Gyro, parameter_Posicion_Robot.grad_relativo, READ_GYRO_Z, gyro_offset);
 8003ab0:	4bb9      	ldr	r3, [pc, #740]	; (8003d98 <BasicTimer3_Callback+0x2f0>)
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	4619      	mov	r1, r3
 8003aba:	f7fd f8ad 	bl	8000c18 <__aeabi_d2f>
 8003abe:	4601      	mov	r1, r0
 8003ac0:	4bb6      	ldr	r3, [pc, #728]	; (8003d9c <BasicTimer3_Callback+0x2f4>)
 8003ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ac6:	2205      	movs	r2, #5
 8003ac8:	ee00 1a10 	vmov	s0, r1
 8003acc:	49b4      	ldr	r1, [pc, #720]	; (8003da0 <BasicTimer3_Callback+0x2f8>)
 8003ace:	48b5      	ldr	r0, [pc, #724]	; (8003da4 <BasicTimer3_Callback+0x2fc>)
 8003ad0:	f7fe fb82 	bl	80021d8 <getAngle>
 8003ad4:	ee10 3a10 	vmov	r3, s0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fc fd4d 	bl	8000578 <__aeabi_f2d>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	49ad      	ldr	r1, [pc, #692]	; (8003d98 <BasicTimer3_Callback+0x2f0>)
 8003ae4:	e9c1 2300 	strd	r2, r3, [r1]
	//Verificamos el modo
	if(flag_mode == 1)
 8003ae8:	4baf      	ldr	r3, [pc, #700]	; (8003da8 <BasicTimer3_Callback+0x300>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	f040 80cb 	bne.w	8003c88 <BasicTimer3_Callback+0x1e0>
	{
		//Acumulamos los angulos
		sum_ang += parameter_Posicion_Robot.grad_relativo;
 8003af2:	4bae      	ldr	r3, [pc, #696]	; (8003dac <BasicTimer3_Callback+0x304>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fc fd3e 	bl	8000578 <__aeabi_f2d>
 8003afc:	4ba6      	ldr	r3, [pc, #664]	; (8003d98 <BasicTimer3_Callback+0x2f0>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f7fc fbdb 	bl	80002bc <__adddf3>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	f7fd f883 	bl	8000c18 <__aeabi_d2f>
 8003b12:	4603      	mov	r3, r0
 8003b14:	4aa5      	ldr	r2, [pc, #660]	; (8003dac <BasicTimer3_Callback+0x304>)
 8003b16:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += sample_Gyro.delta_timer;
 8003b18:	4ba1      	ldr	r3, [pc, #644]	; (8003da0 <BasicTimer3_Callback+0x2f8>)
 8003b1a:	891a      	ldrh	r2, [r3, #8]
 8003b1c:	4ba4      	ldr	r3, [pc, #656]	; (8003db0 <BasicTimer3_Callback+0x308>)
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	4413      	add	r3, r2
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	4ba2      	ldr	r3, [pc, #648]	; (8003db0 <BasicTimer3_Callback+0x308>)
 8003b26:	801a      	strh	r2, [r3, #0]

		//----------------Accion a realizar con un tiempo especifico--------------------
		if(counting_action>=timeAction_TIMER_Sampling)
 8003b28:	4ba2      	ldr	r3, [pc, #648]	; (8003db4 <BasicTimer3_Callback+0x30c>)
 8003b2a:	881a      	ldrh	r2, [r3, #0]
 8003b2c:	4ba2      	ldr	r3, [pc, #648]	; (8003db8 <BasicTimer3_Callback+0x310>)
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	f0c0 80a2 	bcc.w	8003c7a <BasicTimer3_Callback+0x1d2>
		{
			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8003b36:	4b9e      	ldr	r3, [pc, #632]	; (8003db0 <BasicTimer3_Callback+0x308>)
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b9f      	ldr	r3, [pc, #636]	; (8003dbc <BasicTimer3_Callback+0x314>)
 8003b3e:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemis como el angulo relativo
			prom_ang = sum_ang/counting_action;
 8003b40:	4b9a      	ldr	r3, [pc, #616]	; (8003dac <BasicTimer3_Callback+0x304>)
 8003b42:	edd3 6a00 	vldr	s13, [r3]
 8003b46:	4b9b      	ldr	r3, [pc, #620]	; (8003db4 <BasicTimer3_Callback+0x30c>)
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b56:	4b9a      	ldr	r3, [pc, #616]	; (8003dc0 <BasicTimer3_Callback+0x318>)
 8003b58:	edc3 7a00 	vstr	s15, [r3]
			parameter_Posicion_Robot.phi_relativo = (prom_ang*M_PI)/180;          //[rad]
 8003b5c:	4b98      	ldr	r3, [pc, #608]	; (8003dc0 <BasicTimer3_Callback+0x318>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fc fd09 	bl	8000578 <__aeabi_f2d>
 8003b66:	a388      	add	r3, pc, #544	; (adr r3, 8003d88 <BasicTimer3_Callback+0x2e0>)
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f7fc fd5c 	bl	8000628 <__aeabi_dmul>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4610      	mov	r0, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	4b91      	ldr	r3, [pc, #580]	; (8003dc4 <BasicTimer3_Callback+0x31c>)
 8003b7e:	f7fc fe7d 	bl	800087c <__aeabi_ddiv>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4984      	ldr	r1, [pc, #528]	; (8003d98 <BasicTimer3_Callback+0x2f0>)
 8003b88:	e9c1 2302 	strd	r2, r3, [r1, #8]
			parameter_Posicion_Robot.phi_relativo = atan2(sin(parameter_Posicion_Robot.phi_relativo),cos(parameter_Posicion_Robot.phi_relativo));
 8003b8c:	4b82      	ldr	r3, [pc, #520]	; (8003d98 <BasicTimer3_Callback+0x2f0>)
 8003b8e:	ed93 7b02 	vldr	d7, [r3, #8]
 8003b92:	eeb0 0a47 	vmov.f32	s0, s14
 8003b96:	eef0 0a67 	vmov.f32	s1, s15
 8003b9a:	f009 fbf1 	bl	800d380 <sin>
 8003b9e:	eeb0 8a40 	vmov.f32	s16, s0
 8003ba2:	eef0 8a60 	vmov.f32	s17, s1
 8003ba6:	4b7c      	ldr	r3, [pc, #496]	; (8003d98 <BasicTimer3_Callback+0x2f0>)
 8003ba8:	ed93 7b02 	vldr	d7, [r3, #8]
 8003bac:	eeb0 0a47 	vmov.f32	s0, s14
 8003bb0:	eef0 0a67 	vmov.f32	s1, s15
 8003bb4:	f009 fb48 	bl	800d248 <cos>
 8003bb8:	eeb0 7a40 	vmov.f32	s14, s0
 8003bbc:	eef0 7a60 	vmov.f32	s15, s1
 8003bc0:	eeb0 1a47 	vmov.f32	s2, s14
 8003bc4:	eef0 1a67 	vmov.f32	s3, s15
 8003bc8:	eeb0 0a48 	vmov.f32	s0, s16
 8003bcc:	eef0 0a68 	vmov.f32	s1, s17
 8003bd0:	f009 fc62 	bl	800d498 <atan2>
 8003bd4:	eeb0 7a40 	vmov.f32	s14, s0
 8003bd8:	eef0 7a60 	vmov.f32	s15, s1
 8003bdc:	4b6e      	ldr	r3, [pc, #440]	; (8003d98 <BasicTimer3_Callback+0x2f0>)
 8003bde:	ed83 7b02 	vstr	d7, [r3, #8]
			//Calculamos la velocidad
			handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 8003be2:	4b79      	ldr	r3, [pc, #484]	; (8003dc8 <BasicTimer3_Callback+0x320>)
 8003be4:	8b9b      	ldrh	r3, [r3, #28]
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bee:	4b77      	ldr	r3, [pc, #476]	; (8003dcc <BasicTimer3_Callback+0x324>)
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf8:	4b73      	ldr	r3, [pc, #460]	; (8003dc8 <BasicTimer3_Callback+0x320>)
 8003bfa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 8003bfe:	4b74      	ldr	r3, [pc, #464]	; (8003dd0 <BasicTimer3_Callback+0x328>)
 8003c00:	8b9b      	ldrh	r3, [r3, #28]
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c0a:	4b72      	ldr	r3, [pc, #456]	; (8003dd4 <BasicTimer3_Callback+0x32c>)
 8003c0c:	edd3 7a00 	vldr	s15, [r3]
 8003c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c14:	4b6e      	ldr	r3, [pc, #440]	; (8003dd0 <BasicTimer3_Callback+0x328>)
 8003c16:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/time_accion;      //[m/s]
 8003c1a:	4b6b      	ldr	r3, [pc, #428]	; (8003dc8 <BasicTimer3_Callback+0x320>)
 8003c1c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003c20:	4b66      	ldr	r3, [pc, #408]	; (8003dbc <BasicTimer3_Callback+0x314>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	ee07 3a90 	vmov	s15, r3
 8003c28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c30:	4b65      	ldr	r3, [pc, #404]	; (8003dc8 <BasicTimer3_Callback+0x320>)
 8003c32:	edc3 7a08 	vstr	s15, [r3, #32]
			handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/time_accion;      //[m/s]
 8003c36:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <BasicTimer3_Callback+0x328>)
 8003c38:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003c3c:	4b5f      	ldr	r3, [pc, #380]	; (8003dbc <BasicTimer3_Callback+0x314>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	ee07 3a90 	vmov	s15, r3
 8003c44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c4c:	4b60      	ldr	r3, [pc, #384]	; (8003dd0 <BasicTimer3_Callback+0x328>)
 8003c4e:	edc3 7a08 	vstr	s15, [r3, #32]
			//Reiniciamos el numero de conteos
			handler_Motor_R.parametersMotor.count = 0;
 8003c52:	4b5f      	ldr	r3, [pc, #380]	; (8003dd0 <BasicTimer3_Callback+0x328>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	839a      	strh	r2, [r3, #28]
			handler_Motor_L.parametersMotor.count = 0;
 8003c58:	4b5b      	ldr	r3, [pc, #364]	; (8003dc8 <BasicTimer3_Callback+0x320>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	839a      	strh	r2, [r3, #28]
			//Reiniciamos variable
			sum_ang = 0;
 8003c5e:	4b53      	ldr	r3, [pc, #332]	; (8003dac <BasicTimer3_Callback+0x304>)
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
			//Reiniciamos tiempo
			time_accumulated = 0;
 8003c66:	4b52      	ldr	r3, [pc, #328]	; (8003db0 <BasicTimer3_Callback+0x308>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	801a      	strh	r2, [r3, #0]
			//Reiniciamos el contador de accion
			counting_action = 0;
 8003c6c:	4b51      	ldr	r3, [pc, #324]	; (8003db4 <BasicTimer3_Callback+0x30c>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	801a      	strh	r2, [r3, #0]
			//Levantamos bandera
			flag_action = 1;
 8003c72:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <BasicTimer3_Callback+0x330>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]

		//Combinar ambos ángulos
		ang_complementary = parameter_Posicion_Robot.grad_relativo + ang_for_Displament_ICR;
	}
	else{  __NOP(); }
}
 8003c78:	e0cb      	b.n	8003e12 <BasicTimer3_Callback+0x36a>
		else{ counting_action++; }
 8003c7a:	4b4e      	ldr	r3, [pc, #312]	; (8003db4 <BasicTimer3_Callback+0x30c>)
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	4b4c      	ldr	r3, [pc, #304]	; (8003db4 <BasicTimer3_Callback+0x30c>)
 8003c84:	801a      	strh	r2, [r3, #0]
}
 8003c86:	e0c4      	b.n	8003e12 <BasicTimer3_Callback+0x36a>
	else if(flag_mode==2)
 8003c88:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <BasicTimer3_Callback+0x300>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	f040 80bf 	bne.w	8003e10 <BasicTimer3_Callback+0x368>
		if(counting_action>=timeAction_TIMER_Sampling)
 8003c92:	4b48      	ldr	r3, [pc, #288]	; (8003db4 <BasicTimer3_Callback+0x30c>)
 8003c94:	881a      	ldrh	r2, [r3, #0]
 8003c96:	4b48      	ldr	r3, [pc, #288]	; (8003db8 <BasicTimer3_Callback+0x310>)
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	f0c0 80a4 	bcc.w	8003de8 <BasicTimer3_Callback+0x340>
			time_accion = time_accumulated;
 8003ca0:	4b43      	ldr	r3, [pc, #268]	; (8003db0 <BasicTimer3_Callback+0x308>)
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b45      	ldr	r3, [pc, #276]	; (8003dbc <BasicTimer3_Callback+0x314>)
 8003ca8:	601a      	str	r2, [r3, #0]
			handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 8003caa:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <BasicTimer3_Callback+0x320>)
 8003cac:	8b9b      	ldrh	r3, [r3, #28]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cb6:	4b45      	ldr	r3, [pc, #276]	; (8003dcc <BasicTimer3_Callback+0x324>)
 8003cb8:	edd3 7a00 	vldr	s15, [r3]
 8003cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc0:	4b41      	ldr	r3, [pc, #260]	; (8003dc8 <BasicTimer3_Callback+0x320>)
 8003cc2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 8003cc6:	4b42      	ldr	r3, [pc, #264]	; (8003dd0 <BasicTimer3_Callback+0x328>)
 8003cc8:	8b9b      	ldrh	r3, [r3, #28]
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cd2:	4b40      	ldr	r3, [pc, #256]	; (8003dd4 <BasicTimer3_Callback+0x32c>)
 8003cd4:	edd3 7a00 	vldr	s15, [r3]
 8003cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cdc:	4b3c      	ldr	r3, [pc, #240]	; (8003dd0 <BasicTimer3_Callback+0x328>)
 8003cde:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/time_accion;      //[m/s]
 8003ce2:	4b39      	ldr	r3, [pc, #228]	; (8003dc8 <BasicTimer3_Callback+0x320>)
 8003ce4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003ce8:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <BasicTimer3_Callback+0x314>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cf8:	4b33      	ldr	r3, [pc, #204]	; (8003dc8 <BasicTimer3_Callback+0x320>)
 8003cfa:	edc3 7a08 	vstr	s15, [r3, #32]
			handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/time_accion;      //[m/s]
 8003cfe:	4b34      	ldr	r3, [pc, #208]	; (8003dd0 <BasicTimer3_Callback+0x328>)
 8003d00:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003d04:	4b2d      	ldr	r3, [pc, #180]	; (8003dbc <BasicTimer3_Callback+0x314>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d14:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <BasicTimer3_Callback+0x328>)
 8003d16:	edc3 7a08 	vstr	s15, [r3, #32]
			handler_Motor_R.parametersMotor.count = 0;
 8003d1a:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <BasicTimer3_Callback+0x328>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	839a      	strh	r2, [r3, #28]
			handler_Motor_L.parametersMotor.count = 0;
 8003d20:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <BasicTimer3_Callback+0x320>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	839a      	strh	r2, [r3, #28]
			ang_for_Displament_ICR += (((handler_Motor_R.parametersMotor.distance - handler_Motor_L.parametersMotor.distance)*100)
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <BasicTimer3_Callback+0x328>)
 8003d28:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003d2c:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <BasicTimer3_Callback+0x320>)
 8003d2e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003d32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d36:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003ddc <BasicTimer3_Callback+0x334>
 8003d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
					/distanceBetweenWheels)*(180/M_PI); //[rad]
 8003d3e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003de0 <BasicTimer3_Callback+0x338>
 8003d42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d46:	ee16 0a90 	vmov	r0, s13
 8003d4a:	f7fc fc15 	bl	8000578 <__aeabi_f2d>
 8003d4e:	a310      	add	r3, pc, #64	; (adr r3, 8003d90 <BasicTimer3_Callback+0x2e8>)
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f7fc fc68 	bl	8000628 <__aeabi_dmul>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
			ang_for_Displament_ICR += (((handler_Motor_R.parametersMotor.distance - handler_Motor_L.parametersMotor.distance)*100)
 8003d60:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <BasicTimer3_Callback+0x33c>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f7fc faa9 	bl	80002bc <__adddf3>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	491d      	ldr	r1, [pc, #116]	; (8003de4 <BasicTimer3_Callback+0x33c>)
 8003d70:	e9c1 2300 	strd	r2, r3, [r1]
			time_accumulated = 0;
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <BasicTimer3_Callback+0x308>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	801a      	strh	r2, [r3, #0]
			counting_action = 0;
 8003d7a:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <BasicTimer3_Callback+0x30c>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	801a      	strh	r2, [r3, #0]
 8003d80:	e038      	b.n	8003df4 <BasicTimer3_Callback+0x34c>
 8003d82:	bf00      	nop
 8003d84:	f3af 8000 	nop.w
 8003d88:	54442d18 	.word	0x54442d18
 8003d8c:	400921fb 	.word	0x400921fb
 8003d90:	1a63c1f8 	.word	0x1a63c1f8
 8003d94:	404ca5dc 	.word	0x404ca5dc
 8003d98:	20008fe0 	.word	0x20008fe0
 8003d9c:	20008f54 	.word	0x20008f54
 8003da0:	20009028 	.word	0x20009028
 8003da4:	2000027c 	.word	0x2000027c
 8003da8:	20009426 	.word	0x20009426
 8003dac:	20009040 	.word	0x20009040
 8003db0:	20009438 	.word	0x20009438
 8003db4:	2000943a 	.word	0x2000943a
 8003db8:	20000014 	.word	0x20000014
 8003dbc:	20009434 	.word	0x20009434
 8003dc0:	20009044 	.word	0x20009044
 8003dc4:	40668000 	.word	0x40668000
 8003dc8:	2000038c 	.word	0x2000038c
 8003dcc:	20009048 	.word	0x20009048
 8003dd0:	20000318 	.word	0x20000318
 8003dd4:	2000904c 	.word	0x2000904c
 8003dd8:	20009425 	.word	0x20009425
 8003ddc:	42c80000 	.word	0x42c80000
 8003de0:	4625a000 	.word	0x4625a000
 8003de4:	20009050 	.word	0x20009050
		else{counting_action++;}
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <BasicTimer3_Callback+0x374>)
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	3301      	adds	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <BasicTimer3_Callback+0x374>)
 8003df2:	801a      	strh	r2, [r3, #0]
		ang_complementary = parameter_Posicion_Robot.grad_relativo + ang_for_Displament_ICR;
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <BasicTimer3_Callback+0x378>)
 8003df6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <BasicTimer3_Callback+0x37c>)
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	f7fc fa5c 	bl	80002bc <__adddf3>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4907      	ldr	r1, [pc, #28]	; (8003e28 <BasicTimer3_Callback+0x380>)
 8003e0a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003e0e:	e000      	b.n	8003e12 <BasicTimer3_Callback+0x36a>
	else{  __NOP(); }
 8003e10:	bf00      	nop
}
 8003e12:	bf00      	nop
 8003e14:	46bd      	mov	sp, r7
 8003e16:	ecbd 8b02 	vpop	{d8}
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	2000943a 	.word	0x2000943a
 8003e20:	20008fe0 	.word	0x20008fe0
 8003e24:	20009050 	.word	0x20009050
 8003e28:	20009058 	.word	0x20009058

08003e2c <callback_extInt1>:

//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
	//Aumentamos valor en als cuentas
	handler_Motor_R.parametersMotor.count++;
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <callback_extInt1+0x1c>)
 8003e32:	8b9b      	ldrh	r3, [r3, #28]
 8003e34:	3301      	adds	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <callback_extInt1+0x1c>)
 8003e3a:	839a      	strh	r2, [r3, #28]
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000318 	.word	0x20000318

08003e4c <callback_extInt3>:
void callback_extInt3(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
	//Aumentamos valor en las cuentas
	handler_Motor_L.parametersMotor.count++;
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <callback_extInt3+0x1c>)
 8003e52:	8b9b      	ldrh	r3, [r3, #28]
 8003e54:	3301      	adds	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <callback_extInt3+0x1c>)
 8003e5a:	839a      	strh	r2, [r3, #28]
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	2000038c 	.word	0x2000038c

08003e6c <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
	if(charRead == '@')
 8003e70:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <recepcionCommand+0x4c>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d10c      	bne.n	8003e92 <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 8003e78:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <recepcionCommand+0x50>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <recepcionCommand+0x54>)
 8003e80:	2100      	movs	r1, #0
 8003e82:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 8003e84:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <recepcionCommand+0x58>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <recepcionCommand+0x50>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 8003e90:	e00c      	b.n	8003eac <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 8003e92:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <recepcionCommand+0x50>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <recepcionCommand+0x4c>)
 8003e9a:	7819      	ldrb	r1, [r3, #0]
 8003e9c:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <recepcionCommand+0x54>)
 8003e9e:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <recepcionCommand+0x50>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <recepcionCommand+0x50>)
 8003eaa:	701a      	strb	r2, [r3, #0]
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000010 	.word	0x20000010
 8003ebc:	2000943c 	.word	0x2000943c
 8003ec0:	20009440 	.word	0x20009440
 8003ec4:	20000019 	.word	0x20000019

08003ec8 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 8003ec8:	b5b0      	push	{r4, r5, r7, lr}
 8003eca:	b09a      	sub	sp, #104	; 0x68
 8003ecc:	af04      	add	r7, sp, #16
 8003ece:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	f107 031c 	add.w	r3, r7, #28
 8003ed8:	223c      	movs	r2, #60	; 0x3c
 8003eda:	2100      	movs	r1, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f004 f8ed 	bl	80080bc <memset>
	int firtsParameter = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
	int secondParameter = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	613b      	str	r3, [r7, #16]
	int thirdParameter = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
	int forthParameter = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 8003ef2:	f107 0114 	add.w	r1, r7, #20
 8003ef6:	f107 0218 	add.w	r2, r7, #24
 8003efa:	f107 0308 	add.w	r3, r7, #8
 8003efe:	9302      	str	r3, [sp, #8]
 8003f00:	f107 030c 	add.w	r3, r7, #12
 8003f04:	9301      	str	r3, [sp, #4]
 8003f06:	f107 0310 	add.w	r3, r7, #16
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4998      	ldr	r1, [pc, #608]	; (8004170 <runCommand+0x2a8>)
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f004 ff7b 	bl	8008e0c <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 8003f16:	f107 0318 	add.w	r3, r7, #24
 8003f1a:	4996      	ldr	r1, [pc, #600]	; (8004174 <runCommand+0x2ac>)
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fc f95f 	bl	80001e0 <strcmp>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d12c      	bne.n	8003f82 <runCommand+0xba>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 8003f28:	4993      	ldr	r1, [pc, #588]	; (8004178 <runCommand+0x2b0>)
 8003f2a:	4894      	ldr	r0, [pc, #592]	; (800417c <runCommand+0x2b4>)
 8003f2c:	f003 fe8c 	bl	8007c48 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 8003f30:	4993      	ldr	r1, [pc, #588]	; (8004180 <runCommand+0x2b8>)
 8003f32:	4892      	ldr	r0, [pc, #584]	; (800417c <runCommand+0x2b4>)
 8003f34:	f003 fe88 	bl	8007c48 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) dutty # --- Cambiar el valor de dutty [%] \n");
 8003f38:	4992      	ldr	r1, [pc, #584]	; (8004184 <runCommand+0x2bc>)
 8003f3a:	4890      	ldr	r0, [pc, #576]	; (800417c <runCommand+0x2b4>)
 8003f3c:	f003 fe84 	bl	8007c48 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) frequency # --- Cambiar el valor de la frecuenencia del motor [HZ] \n");
 8003f40:	4991      	ldr	r1, [pc, #580]	; (8004188 <runCommand+0x2c0>)
 8003f42:	488e      	ldr	r0, [pc, #568]	; (800417c <runCommand+0x2b4>)
 8003f44:	f003 fe80 	bl	8007c48 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) line # ---Inicia Linea recta, #: dist [mm]  \n");
 8003f48:	4990      	ldr	r1, [pc, #576]	; (800418c <runCommand+0x2c4>)
 8003f4a:	488c      	ldr	r0, [pc, #560]	; (800417c <runCommand+0x2b4>)
 8003f4c:	f003 fe7c 	bl	8007c48 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "5) turn # # ---Iniciamos el giro del robot #: ang [grados]# \n");
 8003f50:	498f      	ldr	r1, [pc, #572]	; (8004190 <runCommand+0x2c8>)
 8003f52:	488a      	ldr	r0, [pc, #552]	; (800417c <runCommand+0x2b4>)
 8003f54:	f003 fe78 	bl	8007c48 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) square # # --- Ejecucion del cuadrado #: lado [mm], #: dir 0->L 1->R \n");
 8003f58:	498e      	ldr	r1, [pc, #568]	; (8004194 <runCommand+0x2cc>)
 8003f5a:	4888      	ldr	r0, [pc, #544]	; (800417c <runCommand+0x2b4>)
 8003f5c:	f003 fe74 	bl	8007c48 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "7) applyastar --- Indicador de calcular trayectoria con A-Star \n");
 8003f60:	498d      	ldr	r1, [pc, #564]	; (8004198 <runCommand+0x2d0>)
 8003f62:	4886      	ldr	r0, [pc, #536]	; (800417c <runCommand+0x2b4>)
 8003f64:	f003 fe70 	bl	8007c48 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "8) exepathastar --- se ejecuta el A-Star calculado \n");
 8003f68:	498c      	ldr	r1, [pc, #560]	; (800419c <runCommand+0x2d4>)
 8003f6a:	4884      	ldr	r0, [pc, #528]	; (800417c <runCommand+0x2b4>)
 8003f6c:	f003 fe6c 	bl	8007c48 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "9) stop --- Para la ejecucion de los motore \n");
 8003f70:	498b      	ldr	r1, [pc, #556]	; (80041a0 <runCommand+0x2d8>)
 8003f72:	4882      	ldr	r0, [pc, #520]	; (800417c <runCommand+0x2b4>)
 8003f74:	f003 fe68 	bl	8007c48 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "10) init --- Reinicia las coordenadas globales \n");
 8003f78:	498a      	ldr	r1, [pc, #552]	; (80041a4 <runCommand+0x2dc>)
 8003f7a:	4880      	ldr	r0, [pc, #512]	; (800417c <runCommand+0x2b4>)
 8003f7c:	f003 fe64 	bl	8007c48 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 8003f80:	e0e9      	b.n	8004156 <runCommand+0x28e>
	else if (strcmp(cmd, "dutty") == 0)
 8003f82:	f107 0318 	add.w	r3, r7, #24
 8003f86:	4988      	ldr	r1, [pc, #544]	; (80041a8 <runCommand+0x2e0>)
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fc f929 	bl	80001e0 <strcmp>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d120      	bne.n	8003fd6 <runCommand+0x10e>
		duttySetPoint= firtsParameter;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	4b84      	ldr	r3, [pc, #528]	; (80041ac <runCommand+0x2e4>)
 8003f9a:	701a      	strb	r2, [r3, #0]
		velSetPoint = (0.00169*duttySetPoint + 0.0619);
 8003f9c:	4b83      	ldr	r3, [pc, #524]	; (80041ac <runCommand+0x2e4>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fc fad7 	bl	8000554 <__aeabi_i2d>
 8003fa6:	a36e      	add	r3, pc, #440	; (adr r3, 8004160 <runCommand+0x298>)
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	f7fc fb3c 	bl	8000628 <__aeabi_dmul>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	a36b      	add	r3, pc, #428	; (adr r3, 8004168 <runCommand+0x2a0>)
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	f7fc f97d 	bl	80002bc <__adddf3>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	4619      	mov	r1, r3
 8003fca:	f7fc fe25 	bl	8000c18 <__aeabi_d2f>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4a77      	ldr	r2, [pc, #476]	; (80041b0 <runCommand+0x2e8>)
 8003fd2:	6013      	str	r3, [r2, #0]
}
 8003fd4:	e0bf      	b.n	8004156 <runCommand+0x28e>
	else if (strcmp(cmd, "frequency") == 0)
 8003fd6:	f107 0318 	add.w	r3, r7, #24
 8003fda:	4976      	ldr	r1, [pc, #472]	; (80041b4 <runCommand+0x2ec>)
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fc f8ff 	bl	80001e0 <strcmp>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d104      	bne.n	8003ff2 <runCommand+0x12a>
		frequency_PWM_Motor = firtsParameter;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	4b72      	ldr	r3, [pc, #456]	; (80041b8 <runCommand+0x2f0>)
 8003fee:	801a      	strh	r2, [r3, #0]
}
 8003ff0:	e0b1      	b.n	8004156 <runCommand+0x28e>
	else if (strcmp(cmd, "line") == 0)
 8003ff2:	f107 0318 	add.w	r3, r7, #24
 8003ff6:	4971      	ldr	r1, [pc, #452]	; (80041bc <runCommand+0x2f4>)
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fc f8f1 	bl	80001e0 <strcmp>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d118      	bne.n	8004036 <runCommand+0x16e>
		change_position(&parameter_Path_Robot, firtsParameter, parameter_Path_Robot.goal_Position_x, parameter_Path_Robot.goal_Position_y);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	4a6e      	ldr	r2, [pc, #440]	; (80041c0 <runCommand+0x2f8>)
 8004008:	ed92 7b16 	vldr	d7, [r2, #88]	; 0x58
 800400c:	4a6c      	ldr	r2, [pc, #432]	; (80041c0 <runCommand+0x2f8>)
 800400e:	ed92 6b18 	vldr	d6, [r2, #96]	; 0x60
 8004012:	eeb0 1a46 	vmov.f32	s2, s12
 8004016:	eef0 1a66 	vmov.f32	s3, s13
 800401a:	eeb0 0a47 	vmov.f32	s0, s14
 800401e:	eef0 0a67 	vmov.f32	s1, s15
 8004022:	4619      	mov	r1, r3
 8004024:	4866      	ldr	r0, [pc, #408]	; (80041c0 <runCommand+0x2f8>)
 8004026:	f7fe fa27 	bl	8002478 <change_position>
		straight_line(duttySetPoint);
 800402a:	4b60      	ldr	r3, [pc, #384]	; (80041ac <runCommand+0x2e4>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fb02 	bl	8004638 <straight_line>
}
 8004034:	e08f      	b.n	8004156 <runCommand+0x28e>
	else if (strcmp(cmd, "turn") == 0)
 8004036:	f107 0318 	add.w	r3, r7, #24
 800403a:	4962      	ldr	r1, [pc, #392]	; (80041c4 <runCommand+0x2fc>)
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc f8cf 	bl	80001e0 <strcmp>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <runCommand+0x198>
		if(secondParameter==1){ firtsParameter = -1*firtsParameter;}
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d102      	bne.n	8004054 <runCommand+0x18c>
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	425b      	negs	r3, r3
 8004052:	617b      	str	r3, [r7, #20]
		turn_itself(firtsParameter);    //a = [grados], b = Direccion giro, c = Porcentaje dutty
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	b21b      	sxth	r3, r3
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fbf1 	bl	8004840 <turn_itself>
}
 800405e:	e07a      	b.n	8004156 <runCommand+0x28e>
	else if (strcmp(cmd, "square") == 0)
 8004060:	f107 0318 	add.w	r3, r7, #24
 8004064:	4958      	ldr	r1, [pc, #352]	; (80041c8 <runCommand+0x300>)
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc f8ba 	bl	80001e0 <strcmp>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d11b      	bne.n	80040aa <runCommand+0x1e2>
		init_coordinates();
 8004072:	f000 fc51 	bl	8004918 <init_coordinates>
		set_operation_square(list_operation, firtsParameter, secondParameter);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc fa6b 	bl	8000554 <__aeabi_i2d>
 800407e:	4604      	mov	r4, r0
 8004080:	460d      	mov	r5, r1
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4618      	mov	r0, r3
 8004086:	f7fc fa65 	bl	8000554 <__aeabi_i2d>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	ec43 2b11 	vmov	d1, r2, r3
 8004092:	ec45 4b10 	vmov	d0, r4, r5
 8004096:	484d      	ldr	r0, [pc, #308]	; (80041cc <runCommand+0x304>)
 8004098:	f000 fcc0 	bl	8004a1c <set_operation_square>
		counting_operation = 0;
 800409c:	4b4c      	ldr	r3, [pc, #304]	; (80041d0 <runCommand+0x308>)
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]
		flag_multioperation = 1;
 80040a2:	4b4c      	ldr	r3, [pc, #304]	; (80041d4 <runCommand+0x30c>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	701a      	strb	r2, [r3, #0]
}
 80040a8:	e055      	b.n	8004156 <runCommand+0x28e>
	else if (strcmp(cmd,"applyastar") == 0)
 80040aa:	f107 0318 	add.w	r3, r7, #24
 80040ae:	494a      	ldr	r1, [pc, #296]	; (80041d8 <runCommand+0x310>)
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fc f895 	bl	80001e0 <strcmp>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <runCommand+0x1fc>
		flag_A_Star = 1;
 80040bc:	4b47      	ldr	r3, [pc, #284]	; (80041dc <runCommand+0x314>)
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
}
 80040c2:	e048      	b.n	8004156 <runCommand+0x28e>
	else if (strcmp(cmd,"exepathastar") == 0)
 80040c4:	f107 0318 	add.w	r3, r7, #24
 80040c8:	4945      	ldr	r1, [pc, #276]	; (80041e0 <runCommand+0x318>)
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc f888 	bl	80001e0 <strcmp>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d118      	bne.n	8004108 <runCommand+0x240>
		if(flag_navegation_AStar)
 80040d6:	4b43      	ldr	r3, [pc, #268]	; (80041e4 <runCommand+0x31c>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00f      	beq.n	80040fe <runCommand+0x236>
			init_coordinates();
 80040de:	f000 fc1b 	bl	8004918 <init_coordinates>
			set_operation_AStar(list_operation, file_path, &parameter_Posicion_Robot, &parameter_Path_Robot);
 80040e2:	4b41      	ldr	r3, [pc, #260]	; (80041e8 <runCommand+0x320>)
 80040e4:	6819      	ldr	r1, [r3, #0]
 80040e6:	4b36      	ldr	r3, [pc, #216]	; (80041c0 <runCommand+0x2f8>)
 80040e8:	4a40      	ldr	r2, [pc, #256]	; (80041ec <runCommand+0x324>)
 80040ea:	4838      	ldr	r0, [pc, #224]	; (80041cc <runCommand+0x304>)
 80040ec:	f000 fd54 	bl	8004b98 <set_operation_AStar>
			counting_operation = 0;
 80040f0:	4b37      	ldr	r3, [pc, #220]	; (80041d0 <runCommand+0x308>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
			flag_multioperation = 1;
 80040f6:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <runCommand+0x30c>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	701a      	strb	r2, [r3, #0]
}
 80040fc:	e02b      	b.n	8004156 <runCommand+0x28e>
		else{writeMsgForTXE(&handler_USART_USB, "Accion no valida. No se a ingresado el grid map \n");}
 80040fe:	493c      	ldr	r1, [pc, #240]	; (80041f0 <runCommand+0x328>)
 8004100:	481e      	ldr	r0, [pc, #120]	; (800417c <runCommand+0x2b4>)
 8004102:	f003 fda1 	bl	8007c48 <writeMsgForTXE>
}
 8004106:	e026      	b.n	8004156 <runCommand+0x28e>
	else if (strcmp(cmd, "stop") == 0)
 8004108:	f107 0318 	add.w	r3, r7, #24
 800410c:	4939      	ldr	r1, [pc, #228]	; (80041f4 <runCommand+0x32c>)
 800410e:	4618      	mov	r0, r3
 8004110:	f7fc f866 	bl	80001e0 <strcmp>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10d      	bne.n	8004136 <runCommand+0x26e>
		flag_multioperation = 0;
 800411a:	4b2e      	ldr	r3, [pc, #184]	; (80041d4 <runCommand+0x30c>)
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
		counting_operation = 0;
 8004120:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <runCommand+0x308>)
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
		status_motor(RESET);
 8004126:	2080      	movs	r0, #128	; 0x80
 8004128:	f000 feb4 	bl	8004e94 <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Operacion Detenida \n");
 800412c:	4932      	ldr	r1, [pc, #200]	; (80041f8 <runCommand+0x330>)
 800412e:	4813      	ldr	r0, [pc, #76]	; (800417c <runCommand+0x2b4>)
 8004130:	f003 fd8a 	bl	8007c48 <writeMsgForTXE>
}
 8004134:	e00f      	b.n	8004156 <runCommand+0x28e>
	else if (strcmp(cmd, "init") == 0)
 8004136:	f107 0318 	add.w	r3, r7, #24
 800413a:	4930      	ldr	r1, [pc, #192]	; (80041fc <runCommand+0x334>)
 800413c:	4618      	mov	r0, r3
 800413e:	f7fc f84f 	bl	80001e0 <strcmp>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <runCommand+0x286>
		init_coordinates();
 8004148:	f000 fbe6 	bl	8004918 <init_coordinates>
}
 800414c:	e003      	b.n	8004156 <runCommand+0x28e>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 800414e:	492c      	ldr	r1, [pc, #176]	; (8004200 <runCommand+0x338>)
 8004150:	480a      	ldr	r0, [pc, #40]	; (800417c <runCommand+0x2b4>)
 8004152:	f003 fd79 	bl	8007c48 <writeMsgForTXE>
}
 8004156:	bf00      	nop
 8004158:	3758      	adds	r7, #88	; 0x58
 800415a:	46bd      	mov	sp, r7
 800415c:	bdb0      	pop	{r4, r5, r7, pc}
 800415e:	bf00      	nop
 8004160:	aebc408e 	.word	0xaebc408e
 8004164:	3f5bb05f 	.word	0x3f5bb05f
 8004168:	573eab36 	.word	0x573eab36
 800416c:	3fafb15b 	.word	0x3fafb15b
 8004170:	0800fc18 	.word	0x0800fc18
 8004174:	0800fc28 	.word	0x0800fc28
 8004178:	0800fc30 	.word	0x0800fc30
 800417c:	2000029c 	.word	0x2000029c
 8004180:	0800fc40 	.word	0x0800fc40
 8004184:	0800fc6c 	.word	0x0800fc6c
 8004188:	0800fc9c 	.word	0x0800fc9c
 800418c:	0800fce4 	.word	0x0800fce4
 8004190:	0800fd18 	.word	0x0800fd18
 8004194:	0800fd58 	.word	0x0800fd58
 8004198:	0800fda4 	.word	0x0800fda4
 800419c:	0800fde8 	.word	0x0800fde8
 80041a0:	0800fe20 	.word	0x0800fe20
 80041a4:	0800fe50 	.word	0x0800fe50
 80041a8:	0800fe84 	.word	0x0800fe84
 80041ac:	20000018 	.word	0x20000018
 80041b0:	20009430 	.word	0x20009430
 80041b4:	0800fe8c 	.word	0x0800fe8c
 80041b8:	20000016 	.word	0x20000016
 80041bc:	0800fe98 	.word	0x0800fe98
 80041c0:	20008f78 	.word	0x20008f78
 80041c4:	0800fea0 	.word	0x0800fea0
 80041c8:	0800fea8 	.word	0x0800fea8
 80041cc:	20009060 	.word	0x20009060
 80041d0:	20009427 	.word	0x20009427
 80041d4:	20009424 	.word	0x20009424
 80041d8:	0800feb0 	.word	0x0800feb0
 80041dc:	20008f51 	.word	0x20008f51
 80041e0:	0800febc 	.word	0x0800febc
 80041e4:	20008f52 	.word	0x20008f52
 80041e8:	20008f34 	.word	0x20008f34
 80041ec:	20008fe0 	.word	0x20008fe0
 80041f0:	0800fecc 	.word	0x0800fecc
 80041f4:	0800ff00 	.word	0x0800ff00
 80041f8:	0800ff08 	.word	0x0800ff08
 80041fc:	0800ff20 	.word	0x0800ff20
 8004200:	0800ff28 	.word	0x0800ff28

08004204 <recepcion_Sring_Parameter_Grid_Map>:

//------------------------------Inicio de la definicion de funciones del A-STAR----------------------------------------

//Funcion para la recepcion de los parametros del grip map
void recepcion_Sring_Parameter_Grid_Map(char newchar)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
	if(string_aStar_Complete!=1)
 800420e:	4b14      	ldr	r3, [pc, #80]	; (8004260 <recepcion_Sring_Parameter_Grid_Map+0x5c>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d01c      	beq.n	8004250 <recepcion_Sring_Parameter_Grid_Map+0x4c>
		if(newchar == '$')
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	2b24      	cmp	r3, #36	; 0x24
 800421a:	d10c      	bne.n	8004236 <recepcion_Sring_Parameter_Grid_Map+0x32>
		{
			//Almacenamos el elemento nulo
			bufferParameterStringGM[index_String_GM]= '\0';
 800421c:	4b11      	ldr	r3, [pc, #68]	; (8004264 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	4b11      	ldr	r3, [pc, #68]	; (8004268 <recepcion_Sring_Parameter_Grid_Map+0x64>)
 8004224:	2100      	movs	r1, #0
 8004226:	5499      	strb	r1, [r3, r2]
			//Establecemos la bandera como alta
			string_aStar_Complete = 1;
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <recepcion_Sring_Parameter_Grid_Map+0x5c>)
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
			//Reiniciamos contador
			index_String_GM = 0;
 800422e:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 8004230:	2200      	movs	r2, #0
 8004232:	801a      	strh	r2, [r3, #0]
			bufferParameterStringGM[index_String_GM] = newchar;
			//Aumentamos en uno la posicion del arreglo
			index_String_GM++;
		}
	else{__NOP();}
}
 8004234:	e00d      	b.n	8004252 <recepcion_Sring_Parameter_Grid_Map+0x4e>
			bufferParameterStringGM[index_String_GM] = newchar;
 8004236:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	4619      	mov	r1, r3
 800423c:	4a0a      	ldr	r2, [pc, #40]	; (8004268 <recepcion_Sring_Parameter_Grid_Map+0x64>)
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	5453      	strb	r3, [r2, r1]
			index_String_GM++;
 8004242:	4b08      	ldr	r3, [pc, #32]	; (8004264 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	3301      	adds	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 800424c:	801a      	strh	r2, [r3, #0]
}
 800424e:	e000      	b.n	8004252 <recepcion_Sring_Parameter_Grid_Map+0x4e>
	else{__NOP();}
 8004250:	bf00      	nop
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20008f50 	.word	0x20008f50
 8004264:	20008f38 	.word	0x20008f38
 8004268:	20008d70 	.word	0x20008d70

0800426c <Separate_parameters>:

//Funcion para separar los diferentes parametros del string
void Separate_parameters(Cell_map_t array_string[20][20], char *parameter_string)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  //Definicion de variables
  char buffercharSeparate[10];
  uint8_t index_charSeparate = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t flag_Separate = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t status_parameter = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t index_init_Grid_map = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  //---------------Definicion de los parametros iniciales---------------
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 800428e:	2300      	movs	r3, #0
 8004290:	847b      	strh	r3, [r7, #34]	; 0x22
 8004292:	e068      	b.n	8004366 <Separate_parameters+0xfa>
  {
    //Verificacion del estado
    if(status_parameter<3)
 8004294:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004298:	2b02      	cmp	r3, #2
 800429a:	d85d      	bhi.n	8004358 <Separate_parameters+0xec>
    {
      //Busqueda de la separacion dentro del string
      if (parameter_string[i] == ':')
 800429c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	4413      	add	r3, r2
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b3a      	cmp	r3, #58	; 0x3a
 80042a6:	d10d      	bne.n	80042c4 <Separate_parameters+0x58>
      {
        buffercharSeparate[index_charSeparate] = '\0';
 80042a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ac:	3328      	adds	r3, #40	; 0x28
 80042ae:	443b      	add	r3, r7
 80042b0:	2200      	movs	r2, #0
 80042b2:	f803 2c20 	strb.w	r2, [r3, #-32]
        index_charSeparate = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        flag_Separate = 1;
 80042bc:	2301      	movs	r3, #1
 80042be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80042c2:	e00e      	b.n	80042e2 <Separate_parameters+0x76>
      }
      else
      {
        buffercharSeparate[index_charSeparate] = parameter_string[i];
 80042c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	441a      	add	r2, r3
 80042ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ce:	7812      	ldrb	r2, [r2, #0]
 80042d0:	3328      	adds	r3, #40	; 0x28
 80042d2:	443b      	add	r3, r7
 80042d4:	f803 2c20 	strb.w	r2, [r3, #-32]
        index_charSeparate++;
 80042d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042dc:	3301      	adds	r3, #1
 80042de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      //Si la bandera se levanta se asigna el valor correspondiente al parametro
      if(flag_Separate == 1)
 80042e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d13a      	bne.n	8004360 <Separate_parameters+0xf4>
      {
        switch(status_parameter)
 80042ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d01a      	beq.n	8004328 <Separate_parameters+0xbc>
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	dc27      	bgt.n	8004346 <Separate_parameters+0xda>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <Separate_parameters+0x94>
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d00a      	beq.n	8004314 <Separate_parameters+0xa8>
 80042fe:	e022      	b.n	8004346 <Separate_parameters+0xda>
        {
          case 0:
          {
            grid_map_row = atoi(buffercharSeparate);
 8004300:	f107 0308 	add.w	r3, r7, #8
 8004304:	4618      	mov	r0, r3
 8004306:	f003 feaa 	bl	800805e <atoi>
 800430a:	4603      	mov	r3, r0
 800430c:	b2da      	uxtb	r2, r3
 800430e:	4b70      	ldr	r3, [pc, #448]	; (80044d0 <Separate_parameters+0x264>)
 8004310:	701a      	strb	r2, [r3, #0]
            break;
 8004312:	e018      	b.n	8004346 <Separate_parameters+0xda>
          }
          case 1:
          {
            grid_map_colum = atoi(buffercharSeparate);
 8004314:	f107 0308 	add.w	r3, r7, #8
 8004318:	4618      	mov	r0, r3
 800431a:	f003 fea0 	bl	800805e <atoi>
 800431e:	4603      	mov	r3, r0
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4b6c      	ldr	r3, [pc, #432]	; (80044d4 <Separate_parameters+0x268>)
 8004324:	701a      	strb	r2, [r3, #0]
            break;
 8004326:	e00e      	b.n	8004346 <Separate_parameters+0xda>
          }
          case 2:
          {
            cell_separation = atof(buffercharSeparate);
 8004328:	f107 0308 	add.w	r3, r7, #8
 800432c:	4618      	mov	r0, r3
 800432e:	f003 fe93 	bl	8008058 <atof>
 8004332:	ec53 2b10 	vmov	r2, r3, d0
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	f7fc fc6d 	bl	8000c18 <__aeabi_d2f>
 800433e:	4603      	mov	r3, r0
 8004340:	4a65      	ldr	r2, [pc, #404]	; (80044d8 <Separate_parameters+0x26c>)
 8004342:	6013      	str	r3, [r2, #0]
            break;
 8004344:	bf00      	nop
          }
        }
        status_parameter++;
 8004346:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800434a:	3301      	adds	r3, #1
 800434c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        flag_Separate = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004356:	e003      	b.n	8004360 <Separate_parameters+0xf4>
      }
    }
    else
    {
      index_init_Grid_map = i;
 8004358:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800435a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      break;
 800435e:	e008      	b.n	8004372 <Separate_parameters+0x106>
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 8004360:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004362:	3301      	adds	r3, #1
 8004364:	847b      	strh	r3, [r7, #34]	; 0x22
 8004366:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	4413      	add	r3, r2
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d190      	bne.n	8004294 <Separate_parameters+0x28>
    }
  }
  //---------------transformacion del string grid map en un array---------------
  //Variables para los indices
  uint8_t index_row = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t index_col = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	f887 3020 	strb.w	r3, [r7, #32]

  //Separacion de cada caracter
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 800437e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004382:	83fb      	strh	r3, [r7, #30]
 8004384:	e02b      	b.n	80043de <Separate_parameters+0x172>
  {
    if (parameter_string[i] == ';')
 8004386:	8bfb      	ldrh	r3, [r7, #30]
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	4413      	add	r3, r2
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b3b      	cmp	r3, #59	; 0x3b
 8004390:	d108      	bne.n	80043a4 <Separate_parameters+0x138>
    {
      //Se aumenta el indice de la fila y se reinicia el indice de la columna
      index_row++;
 8004392:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004396:	3301      	adds	r3, #1
 8004398:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      index_col = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	f887 3020 	strb.w	r3, [r7, #32]
 80043a2:	e019      	b.n	80043d8 <Separate_parameters+0x16c>
    }
    else
    {
      //Se guarda el caracter
      array_string[index_row][index_col].feature = parameter_string[i];
 80043a4:	8bfb      	ldrh	r3, [r7, #30]
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	18d1      	adds	r1, r2, r3
 80043aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80043ae:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	441a      	add	r2, r3
 80043ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043be:	7808      	ldrb	r0, [r1, #0]
 80043c0:	2158      	movs	r1, #88	; 0x58
 80043c2:	fb01 f303 	mul.w	r3, r1, r3
 80043c6:	4413      	add	r3, r2
 80043c8:	334c      	adds	r3, #76	; 0x4c
 80043ca:	4602      	mov	r2, r0
 80043cc:	701a      	strb	r2, [r3, #0]
      //se aumenta el indice de la columna
      index_col++;
 80043ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043d2:	3301      	adds	r3, #1
 80043d4:	f887 3020 	strb.w	r3, [r7, #32]
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 80043d8:	8bfb      	ldrh	r3, [r7, #30]
 80043da:	3301      	adds	r3, #1
 80043dc:	83fb      	strh	r3, [r7, #30]
 80043de:	8bfb      	ldrh	r3, [r7, #30]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	4413      	add	r3, r2
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1cd      	bne.n	8004386 <Separate_parameters+0x11a>
    }
  }
  //---------------Definicion del start y del goal---------------
  //Recorremo el array creado para encontrar la posicion de los objetivos
  for(int i = 0; i < grid_map_row; i++)
 80043ea:	2300      	movs	r3, #0
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	e063      	b.n	80044b8 <Separate_parameters+0x24c>
  {
    for(int j = 0; j < grid_map_colum; j++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	e057      	b.n	80044a6 <Separate_parameters+0x23a>
    {
      if(array_string[i][j].feature == 'S')
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80043fc:	fb02 f303 	mul.w	r3, r2, r3
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	441a      	add	r2, r3
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2158      	movs	r1, #88	; 0x58
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	4413      	add	r3, r2
 800440e:	334c      	adds	r3, #76	; 0x4c
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b53      	cmp	r3, #83	; 0x53
 8004414:	d11a      	bne.n	800444c <Separate_parameters+0x1e0>
      {
        //Definimos su posicion
        start_x = j*cell_separation;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	ee07 3a90 	vmov	s15, r3
 800441c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004420:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <Separate_parameters+0x26c>)
 8004422:	edd3 7a00 	vldr	s15, [r3]
 8004426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442a:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <Separate_parameters+0x270>)
 800442c:	edc3 7a00 	vstr	s15, [r3]
        start_y = i*cell_separation;
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800443a:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <Separate_parameters+0x26c>)
 800443c:	edd3 7a00 	vldr	s15, [r3]
 8004440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004444:	4b26      	ldr	r3, [pc, #152]	; (80044e0 <Separate_parameters+0x274>)
 8004446:	edc3 7a00 	vstr	s15, [r3]
 800444a:	e029      	b.n	80044a0 <Separate_parameters+0x234>
      }
      else if (array_string[i][j].feature == 'G')
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	441a      	add	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2158      	movs	r1, #88	; 0x58
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	4413      	add	r3, r2
 8004464:	334c      	adds	r3, #76	; 0x4c
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b47      	cmp	r3, #71	; 0x47
 800446a:	d119      	bne.n	80044a0 <Separate_parameters+0x234>
      {
      //Definimos su posicion
        goal_x= j*cell_separation;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004476:	4b18      	ldr	r3, [pc, #96]	; (80044d8 <Separate_parameters+0x26c>)
 8004478:	edd3 7a00 	vldr	s15, [r3]
 800447c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <Separate_parameters+0x278>)
 8004482:	edc3 7a00 	vstr	s15, [r3]
        goal_y= i*cell_separation;
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	ee07 3a90 	vmov	s15, r3
 800448c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004490:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <Separate_parameters+0x26c>)
 8004492:	edd3 7a00 	vldr	s15, [r3]
 8004496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <Separate_parameters+0x27c>)
 800449c:	edc3 7a00 	vstr	s15, [r3]
    for(int j = 0; j < grid_map_colum; j++)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	3301      	adds	r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <Separate_parameters+0x268>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	4293      	cmp	r3, r2
 80044b0:	dba1      	blt.n	80043f6 <Separate_parameters+0x18a>
  for(int i = 0; i < grid_map_row; i++)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	3301      	adds	r3, #1
 80044b6:	61bb      	str	r3, [r7, #24]
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <Separate_parameters+0x264>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	4293      	cmp	r3, r2
 80044c2:	db95      	blt.n	80043f0 <Separate_parameters+0x184>
      }
    }
  }
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	3728      	adds	r7, #40	; 0x28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20008f3a 	.word	0x20008f3a
 80044d4:	20008f3b 	.word	0x20008f3b
 80044d8:	20008f3c 	.word	0x20008f3c
 80044dc:	20008f40 	.word	0x20008f40
 80044e0:	20008f44 	.word	0x20008f44
 80044e4:	20008f48 	.word	0x20008f48
 80044e8:	20008f4c 	.word	0x20008f4c

080044ec <send_path>:


//Funcion para imprimir la ruta encontrada
void send_path(file_cell_t *file_cell, Cell_map_t array_string[20][20], uint8_t row, uint8_t colum)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08e      	sub	sp, #56	; 0x38
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	4611      	mov	r1, r2
 80044f8:	461a      	mov	r2, r3
 80044fa:	460b      	mov	r3, r1
 80044fc:	71fb      	strb	r3, [r7, #7]
 80044fe:	4613      	mov	r3, r2
 8004500:	71bb      	strb	r3, [r7, #6]
  //Variables
  uint8_t index = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  char buffermsg[22] = {0};
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	f107 0318 	add.w	r3, r7, #24
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	821a      	strh	r2, [r3, #16]

  //Cambiamos los caracteres de la malla de strings por caracteres que indican la ruta establecida con A Star
  while(1)
  {
	if(file_cell->ptrCell_parent[index] != NULL)
 800451c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d022      	beq.n	8004572 <send_path+0x86>
	{
	   array_string[file_cell->ptrCell_parent[index]->index_row][file_cell->ptrCell_parent[index]->index_col].feature = '+';
 800452c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	789b      	ldrb	r3, [r3, #2]
 800453a:	461a      	mov	r2, r3
 800453c:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8004540:	fb02 f303 	mul.w	r3, r2, r3
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	441a      	add	r2, r3
 8004548:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800454c:	68f9      	ldr	r1, [r7, #12]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	78db      	ldrb	r3, [r3, #3]
 8004556:	4619      	mov	r1, r3
 8004558:	2358      	movs	r3, #88	; 0x58
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	334c      	adds	r3, #76	; 0x4c
 8004562:	222b      	movs	r2, #43	; 0x2b
 8004564:	701a      	strb	r2, [r3, #0]
	  index++;
 8004566:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800456a:	3301      	adds	r3, #1
 800456c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(file_cell->ptrCell_parent[index] != NULL)
 8004570:	e7d4      	b.n	800451c <send_path+0x30>
	}
	else
	{
	  break;
 8004572:	bf00      	nop
	}
  }
  //Indica de nuevo el inicio del recorrido
   array_string[file_cell->ptrCell_parent[0]->index_row][file_cell->ptrCell_parent[0]->index_col].feature = 'S';
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	789b      	ldrb	r3, [r3, #2]
 800457a:	461a      	mov	r2, r3
 800457c:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8004580:	fb02 f303 	mul.w	r3, r2, r3
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	441a      	add	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	78db      	ldrb	r3, [r3, #3]
 800458e:	4619      	mov	r1, r3
 8004590:	2358      	movs	r3, #88	; 0x58
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	4413      	add	r3, r2
 8004598:	334c      	adds	r3, #76	; 0x4c
 800459a:	2253      	movs	r2, #83	; 0x53
 800459c:	701a      	strb	r2, [r3, #0]

  //Envio de caracter para indicar que se trata del grid map
  writeChar(&handler_USART_USB, '$');
 800459e:	2124      	movs	r1, #36	; 0x24
 80045a0:	4822      	ldr	r0, [pc, #136]	; (800462c <send_path+0x140>)
 80045a2:	f003 fb19 	bl	8007bd8 <writeChar>
  //Imprimir la malla modificada
  for(int i=0;i<row;i++)
 80045a6:	2300      	movs	r3, #0
 80045a8:	633b      	str	r3, [r7, #48]	; 0x30
 80045aa:	e036      	b.n	800461a <send_path+0x12e>
  {
	for(int j=0;j<colum;j++)
 80045ac:	2300      	movs	r3, #0
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b0:	e019      	b.n	80045e6 <send_path+0xfa>
	{
	  //Agregamos las caracteristicas por fila a un buffer
	  buffermsg[j] = array_string[i][j].feature;
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80045b8:	fb02 f303 	mul.w	r3, r2, r3
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	441a      	add	r2, r3
 80045c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c2:	2158      	movs	r1, #88	; 0x58
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	334c      	adds	r3, #76	; 0x4c
 80045cc:	7819      	ldrb	r1, [r3, #0]
 80045ce:	f107 0214 	add.w	r2, r7, #20
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	4413      	add	r3, r2
 80045d6:	460a      	mov	r2, r1
 80045d8:	701a      	strb	r2, [r3, #0]
	  index = j;
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for(int j=0;j<colum;j++)
 80045e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e2:	3301      	adds	r3, #1
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e6:	79bb      	ldrb	r3, [r7, #6]
 80045e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ea:	429a      	cmp	r2, r3
 80045ec:	dbe1      	blt.n	80045b2 <send_path+0xc6>
	}
	//Agragamos el valor nullo al final del string
	buffermsg[index+1] = '\0';
 80045ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80045f2:	3301      	adds	r3, #1
 80045f4:	3338      	adds	r3, #56	; 0x38
 80045f6:	443b      	add	r3, r7
 80045f8:	2200      	movs	r2, #0
 80045fa:	f803 2c24 	strb.w	r2, [r3, #-36]
	//imprimimos el string
	sprintf(bufferMsg, "%s;",buffermsg);
 80045fe:	f107 0314 	add.w	r3, r7, #20
 8004602:	461a      	mov	r2, r3
 8004604:	490a      	ldr	r1, [pc, #40]	; (8004630 <send_path+0x144>)
 8004606:	480b      	ldr	r0, [pc, #44]	; (8004634 <send_path+0x148>)
 8004608:	f004 fbe0 	bl	8008dcc <siprintf>
	writeMsg(&handler_USART_USB, bufferMsg);
 800460c:	4909      	ldr	r1, [pc, #36]	; (8004634 <send_path+0x148>)
 800460e:	4807      	ldr	r0, [pc, #28]	; (800462c <send_path+0x140>)
 8004610:	f003 fafb 	bl	8007c0a <writeMsg>
  for(int i=0;i<row;i++)
 8004614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004616:	3301      	adds	r3, #1
 8004618:	633b      	str	r3, [r7, #48]	; 0x30
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461e:	429a      	cmp	r2, r3
 8004620:	dbc4      	blt.n	80045ac <send_path+0xc0>
  }
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	3738      	adds	r7, #56	; 0x38
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	2000029c 	.word	0x2000029c
 8004630:	0800ff40 	.word	0x0800ff40
 8004634:	200002a8 	.word	0x200002a8

08004638 <straight_line>:


//------------------------------Inicio de la definicion de funciones del modo----------------------------------------
//------linea recta------
void straight_line(uint8_t dutty)   //a = [mm]
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	71fb      	strb	r3, [r7, #7]
	//---------Calculo parametros de la linea recta---------
	calculation_parameter_distance(&parameter_Path_Robot);
 8004642:	4871      	ldr	r0, [pc, #452]	; (8004808 <straight_line+0x1d0>)
 8004644:	f7fe f81c 	bl	8002680 <calculation_parameter_distance>
	//---------Configuracion coordenadas medidas---------
	//Coordenadas Globales
	parameter_Posicion_Robot.grad_grobal += ang_complementary;
 8004648:	4b70      	ldr	r3, [pc, #448]	; (800480c <straight_line+0x1d4>)
 800464a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800464e:	4b70      	ldr	r3, [pc, #448]	; (8004810 <straight_line+0x1d8>)
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f7fb fe32 	bl	80002bc <__adddf3>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	496b      	ldr	r1, [pc, #428]	; (800480c <straight_line+0x1d4>)
 800465e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	//Reiniciaos Coordenadas relativas
	parameter_Posicion_Robot.xr_position = parameter_Posicion_Robot.yr_position = 0;
 8004662:	496a      	ldr	r1, [pc, #424]	; (800480c <straight_line+0x1d4>)
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8004670:	4b66      	ldr	r3, [pc, #408]	; (800480c <straight_line+0x1d4>)
 8004672:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004676:	4965      	ldr	r1, [pc, #404]	; (800480c <straight_line+0x1d4>)
 8004678:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.phi_relativo = 0;
 800467c:	4963      	ldr	r1, [pc, #396]	; (800480c <straight_line+0x1d4>)
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.grad_relativo = 0;
 800468a:	4960      	ldr	r1, [pc, #384]	; (800480c <straight_line+0x1d4>)
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9c1 2300 	strd	r2, r3, [r1]
	ang_for_Displament_ICR = 0;
 8004698:	495e      	ldr	r1, [pc, #376]	; (8004814 <straight_line+0x1dc>)
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	e9c1 2300 	strd	r2, r3, [r1]
	//---------Configuracion coordenadas teoricas---------
	parameter_Path_Robot.rotative_Grad_Relative = 0;
 80046a6:	4b58      	ldr	r3, [pc, #352]	; (8004808 <straight_line+0x1d0>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38
	//Calculos extra
	cos_cal = cos(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 80046ac:	4b57      	ldr	r3, [pc, #348]	; (800480c <straight_line+0x1d4>)
 80046ae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80046b2:	a353      	add	r3, pc, #332	; (adr r3, 8004800 <straight_line+0x1c8>)
 80046b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b8:	f7fb ffb6 	bl	8000628 <__aeabi_dmul>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	4b53      	ldr	r3, [pc, #332]	; (8004818 <straight_line+0x1e0>)
 80046ca:	f7fc f8d7 	bl	800087c <__aeabi_ddiv>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	ec43 2b17 	vmov	d7, r2, r3
 80046d6:	eeb0 0a47 	vmov.f32	s0, s14
 80046da:	eef0 0a67 	vmov.f32	s1, s15
 80046de:	f008 fdb3 	bl	800d248 <cos>
 80046e2:	ec53 2b10 	vmov	r2, r3, d0
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	f7fc fa95 	bl	8000c18 <__aeabi_d2f>
 80046ee:	4603      	mov	r3, r0
 80046f0:	4a4a      	ldr	r2, [pc, #296]	; (800481c <straight_line+0x1e4>)
 80046f2:	6013      	str	r3, [r2, #0]
	sin_cal = sin(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 80046f4:	4b45      	ldr	r3, [pc, #276]	; (800480c <straight_line+0x1d4>)
 80046f6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80046fa:	a341      	add	r3, pc, #260	; (adr r3, 8004800 <straight_line+0x1c8>)
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f7fb ff92 	bl	8000628 <__aeabi_dmul>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4610      	mov	r0, r2
 800470a:	4619      	mov	r1, r3
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	4b41      	ldr	r3, [pc, #260]	; (8004818 <straight_line+0x1e0>)
 8004712:	f7fc f8b3 	bl	800087c <__aeabi_ddiv>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	ec43 2b17 	vmov	d7, r2, r3
 800471e:	eeb0 0a47 	vmov.f32	s0, s14
 8004722:	eef0 0a67 	vmov.f32	s1, s15
 8004726:	f008 fe2b 	bl	800d380 <sin>
 800472a:	ec53 2b10 	vmov	r2, r3, d0
 800472e:	4610      	mov	r0, r2
 8004730:	4619      	mov	r1, r3
 8004732:	f7fc fa71 	bl	8000c18 <__aeabi_d2f>
 8004736:	4603      	mov	r3, r0
 8004738:	4a39      	ldr	r2, [pc, #228]	; (8004820 <straight_line+0x1e8>)
 800473a:	6013      	str	r3, [r2, #0]
	//-----------------PID-------------------------
	//Establecemos valores iniciales
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 800473c:	4b39      	ldr	r3, [pc, #228]	; (8004824 <straight_line+0x1ec>)
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	60da      	str	r2, [r3, #12]
 8004744:	4b37      	ldr	r3, [pc, #220]	; (8004824 <straight_line+0x1ec>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4a36      	ldr	r2, [pc, #216]	; (8004824 <straight_line+0x1ec>)
 800474a:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 800474c:	4b35      	ldr	r3, [pc, #212]	; (8004824 <straight_line+0x1ec>)
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	609a      	str	r2, [r3, #8]
 8004754:	4b33      	ldr	r3, [pc, #204]	; (8004824 <straight_line+0x1ec>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4a32      	ldr	r2, [pc, #200]	; (8004824 <straight_line+0x1ec>)
 800475a:	6013      	str	r3, [r2, #0]
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 800475c:	4b32      	ldr	r3, [pc, #200]	; (8004828 <straight_line+0x1f0>)
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	60da      	str	r2, [r3, #12]
 8004764:	4b30      	ldr	r3, [pc, #192]	; (8004828 <straight_line+0x1f0>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4a2f      	ldr	r2, [pc, #188]	; (8004828 <straight_line+0x1f0>)
 800476a:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 800476c:	4b2e      	ldr	r3, [pc, #184]	; (8004828 <straight_line+0x1f0>)
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	4b2c      	ldr	r3, [pc, #176]	; (8004828 <straight_line+0x1f0>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a2b      	ldr	r2, [pc, #172]	; (8004828 <straight_line+0x1f0>)
 800477a:	6013      	str	r3, [r2, #0]
	parameter_PID_distace.e = parameter_PID_distace.e_prev = parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 800477c:	4b2b      	ldr	r3, [pc, #172]	; (800482c <straight_line+0x1f4>)
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	609a      	str	r2, [r3, #8]
 8004784:	4b29      	ldr	r3, [pc, #164]	; (800482c <straight_line+0x1f4>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4a28      	ldr	r2, [pc, #160]	; (800482c <straight_line+0x1f4>)
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	4b27      	ldr	r3, [pc, #156]	; (800482c <straight_line+0x1f4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a26      	ldr	r2, [pc, #152]	; (800482c <straight_line+0x1f4>)
 8004792:	60d3      	str	r3, [r2, #12]
 8004794:	4b25      	ldr	r3, [pc, #148]	; (800482c <straight_line+0x1f4>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4a24      	ldr	r2, [pc, #144]	; (800482c <straight_line+0x1f4>)
 800479a:	6053      	str	r3, [r2, #4]
	//-------------Configruacion Modo--------------
	//Definimos el dutty inicial
	handler_Motor_L.configMotor.new_dutty = duttySetPoint;
 800479c:	4b24      	ldr	r3, [pc, #144]	; (8004830 <straight_line+0x1f8>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	ee07 3a90 	vmov	s15, r3
 80047a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a8:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <straight_line+0x1ec>)
 80047aa:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	handler_Motor_R.configMotor.new_dutty = duttySetPoint;
 80047ae:	4b20      	ldr	r3, [pc, #128]	; (8004830 <straight_line+0x1f8>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <straight_line+0x1f0>)
 80047bc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	//Reiniciamos variables
	time_accumulated = counting_action = flag_action = 0;
 80047c0:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <straight_line+0x1fc>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <straight_line+0x200>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	801a      	strh	r2, [r3, #0]
 80047cc:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <straight_line+0x200>)
 80047ce:	881a      	ldrh	r2, [r3, #0]
 80047d0:	4b1a      	ldr	r3, [pc, #104]	; (800483c <straight_line+0x204>)
 80047d2:	801a      	strh	r2, [r3, #0]
	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(1, dutty, dutty);
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	ee07 3a10 	vmov	s14, r3
 80047e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047e8:	eef0 0a47 	vmov.f32	s1, s14
 80047ec:	eeb0 0a67 	vmov.f32	s0, s15
 80047f0:	2001      	movs	r0, #1
 80047f2:	f000 f861 	bl	80048b8 <config_mode>
}
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	54442d18 	.word	0x54442d18
 8004804:	400921fb 	.word	0x400921fb
 8004808:	20008f78 	.word	0x20008f78
 800480c:	20008fe0 	.word	0x20008fe0
 8004810:	20009058 	.word	0x20009058
 8004814:	20009050 	.word	0x20009050
 8004818:	40668000 	.word	0x40668000
 800481c:	20009038 	.word	0x20009038
 8004820:	2000903c 	.word	0x2000903c
 8004824:	2000038c 	.word	0x2000038c
 8004828:	20000318 	.word	0x20000318
 800482c:	20008f58 	.word	0x20008f58
 8004830:	20000018 	.word	0x20000018
 8004834:	20009425 	.word	0x20009425
 8004838:	2000943a 	.word	0x2000943a
 800483c:	20009438 	.word	0x20009438

08004840 <turn_itself>:

//---------Giro sobre si mismo---------
void turn_itself(int16_t turn_grad)     //a = [grados], b = direccion giro
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	4603      	mov	r3, r0
 8004848:	80fb      	strh	r3, [r7, #6]
	//-------------Configruacion Modo--------------
	//Definicion del angulo de giro
	parameter_Path_Robot.rotative_Grad += parameter_Path_Robot.rotative_Grad_Relative += turn_grad;
 800484a:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <turn_itself+0x68>)
 800484c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004852:	4413      	add	r3, r2
 8004854:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <turn_itself+0x68>)
 8004856:	6393      	str	r3, [r2, #56]	; 0x38
 8004858:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <turn_itself+0x68>)
 800485a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <turn_itself+0x68>)
 800485e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004860:	4413      	add	r3, r2
 8004862:	4a11      	ldr	r2, [pc, #68]	; (80048a8 <turn_itself+0x68>)
 8004864:	63d3      	str	r3, [r2, #60]	; 0x3c
	//Cambiamso la direccion del motor
	if(turn_grad<0)
 8004866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800486a:	2b00      	cmp	r3, #0
 800486c:	da08      	bge.n	8004880 <turn_itself+0x40>
	{
		//Seleccionamos el motor derecho
		handler_Motor_Execute = &handler_Motor_R;
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <turn_itself+0x6c>)
 8004870:	4a0f      	ldr	r2, [pc, #60]	; (80048b0 <turn_itself+0x70>)
 8004872:	601a      	str	r2, [r3, #0]
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8004874:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <turn_itself+0x6c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f7fd fd0a 	bl	8002292 <updateDirMotor>
 800487e:	e007      	b.n	8004890 <turn_itself+0x50>
	}
	else
	{
		//Seleccionamos el motor izquierdo
		handler_Motor_Execute = &handler_Motor_L;
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <turn_itself+0x6c>)
 8004882:	4a0c      	ldr	r2, [pc, #48]	; (80048b4 <turn_itself+0x74>)
 8004884:	601a      	str	r2, [r3, #0]
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8004886:	4b09      	ldr	r3, [pc, #36]	; (80048ac <turn_itself+0x6c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f7fd fd01 	bl	8002292 <updateDirMotor>
	}

	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(2,20,21);
 8004890:	eef3 0a05 	vmov.f32	s1, #53	; 0x41a80000  21.0
 8004894:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8004898:	2002      	movs	r0, #2
 800489a:	f000 f80d 	bl	80048b8 <config_mode>
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20008f78 	.word	0x20008f78
 80048ac:	20009420 	.word	0x20009420
 80048b0:	20000318 	.word	0x20000318
 80048b4:	2000038c 	.word	0x2000038c

080048b8 <config_mode>:


void config_mode(uint8_t status, float dutty_L, float dutty_R)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80048c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80048c8:	73fb      	strb	r3, [r7, #15]
	//Cargamos la configuracion
	config_motor(status, dutty_L, dutty_R, frequency_PWM_Motor); //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
 80048ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80048ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80048d2:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <config_mode+0x58>)
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	eef0 0a67 	vmov.f32	s1, s15
 80048e4:	ed97 0a01 	vldr	s0, [r7, #4]
 80048e8:	ee17 1a10 	vmov	r1, s14
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fb51 	bl	8004f94 <config_motor>
	//Iniciamos los motores
	status_motor(SET);
 80048f2:	2001      	movs	r0, #1
 80048f4:	f000 face 	bl	8004e94 <status_motor>
	//Medimos el tiempo inicial
	sample_Gyro.timer_prev = getTicksMs();
 80048f8:	f002 fe80 	bl	80075fc <getTicksMs>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4904      	ldr	r1, [pc, #16]	; (8004914 <config_mode+0x5c>)
 8004902:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004906:	bf00      	nop
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000016 	.word	0x20000016
 8004914:	20009028 	.word	0x20009028

08004918 <init_coordinates>:

void init_coordinates(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
	//Reinicio de varibable
	ang_for_Displament_ICR = 0;
 800491c:	493b      	ldr	r1, [pc, #236]	; (8004a0c <init_coordinates+0xf4>)
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	e9c1 2300 	strd	r2, r3, [r1]
	ang_complementary = 0;
 800492a:	4939      	ldr	r1, [pc, #228]	; (8004a10 <init_coordinates+0xf8>)
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	e9c1 2300 	strd	r2, r3, [r1]
	//Reinicio de parametros de la structura de la posicion del robot
	parameter_Posicion_Robot.grad_grobal = 0; parameter_Posicion_Robot.grad_relativo = 0; parameter_Posicion_Robot.phi_relativo = 0;
 8004938:	4936      	ldr	r1, [pc, #216]	; (8004a14 <init_coordinates+0xfc>)
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004946:	4933      	ldr	r1, [pc, #204]	; (8004a14 <init_coordinates+0xfc>)
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	e9c1 2300 	strd	r2, r3, [r1]
 8004954:	492f      	ldr	r1, [pc, #188]	; (8004a14 <init_coordinates+0xfc>)
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.xg_position = 0; parameter_Posicion_Robot.xg_position_inicial = 0; parameter_Posicion_Robot.xr_position = 0;
 8004962:	492c      	ldr	r1, [pc, #176]	; (8004a14 <init_coordinates+0xfc>)
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8004970:	4928      	ldr	r1, [pc, #160]	; (8004a14 <init_coordinates+0xfc>)
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800497e:	4925      	ldr	r1, [pc, #148]	; (8004a14 <init_coordinates+0xfc>)
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.yg_position = 0; parameter_Posicion_Robot.yg_position_inicial = 0; parameter_Posicion_Robot.yr_position = 0;
 800498c:	4921      	ldr	r1, [pc, #132]	; (8004a14 <init_coordinates+0xfc>)
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800499a:	491e      	ldr	r1, [pc, #120]	; (8004a14 <init_coordinates+0xfc>)
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80049a8:	491a      	ldr	r1, [pc, #104]	; (8004a14 <init_coordinates+0xfc>)
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Reinicio de parametros de la structura de path
	parameter_Path_Robot.goal_Position_x = 0; parameter_Path_Robot.goal_Position_y = 0;
 80049b6:	4918      	ldr	r1, [pc, #96]	; (8004a18 <init_coordinates+0x100>)
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 80049c4:	4914      	ldr	r1, [pc, #80]	; (8004a18 <init_coordinates+0x100>)
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	parameter_Path_Robot.line_Distance = 0;
 80049d2:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <init_coordinates+0x100>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40
	parameter_Path_Robot.rotative_Grad = 0; parameter_Path_Robot.rotative_Grad_Relative = 0;
 80049d8:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <init_coordinates+0x100>)
 80049da:	2200      	movs	r2, #0
 80049dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80049de:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <init_coordinates+0x100>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	639a      	str	r2, [r3, #56]	; 0x38
	parameter_Path_Robot.start_position_x = 0; parameter_Path_Robot.start_position_y = 0;
 80049e4:	490c      	ldr	r1, [pc, #48]	; (8004a18 <init_coordinates+0x100>)
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 80049f2:	4909      	ldr	r1, [pc, #36]	; (8004a18 <init_coordinates+0x100>)
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20009050 	.word	0x20009050
 8004a10:	20009058 	.word	0x20009058
 8004a14:	20008fe0 	.word	0x20008fe0
 8004a18:	20008f78 	.word	0x20008f78

08004a1c <set_operation_square>:
//-----------------------------Fin de la definicio de funciones del modo--------------------------------------------


//-------------Inicio de la definicion de las funciones para la contruccion de la lista de operaciones ----------------------------------
void set_operation_square(Parameters_Operation_t *prtList, double dis_side, double direction_square)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b0a8      	sub	sp, #160	; 0xa0
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6178      	str	r0, [r7, #20]
 8004a24:	ed87 0b02 	vstr	d0, [r7, #8]
 8004a28:	ed87 1b00 	vstr	d1, [r7]
	//Definicion de variables
	Parameter_build_t parameter_build = {0};
 8004a2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004a30:	2230      	movs	r2, #48	; 0x30
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f003 fb41 	bl	80080bc <memset>
	int8_t value_side = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	//Definicion de las coordenadas del cuadrado
	if(direction_square == 0){value_side = 1;}
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a4c:	f7fc f854 	bl	8000af8 <__aeabi_dcmpeq>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <set_operation_square+0x42>
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8004a5c:	e002      	b.n	8004a64 <set_operation_square+0x48>
	else{ value_side = -1;}
 8004a5e:	23ff      	movs	r3, #255	; 0xff
 8004a60:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	double coordination_position_square[2][5] = {{0, dis_side, dis_side, 0, 0},{0, 0, value_side*dis_side,value_side*dis_side,0}};
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8004a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a74:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004a78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a7c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004ab0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fb fd4d 	bl	8000554 <__aeabi_i2d>
 8004aba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004abe:	f7fb fdb3 	bl	8000628 <__aeabi_dmul>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8004aca:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fb fd40 	bl	8000554 <__aeabi_i2d>
 8004ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ad8:	f7fb fda6 	bl	8000628 <__aeabi_dmul>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	//Definimos la posicion inicial del cuadrado
	parameter_build.initline_x = coordination_position_square[0][0]; parameter_build.initline_y = coordination_position_square[0][0];
 8004af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8004af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004afc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	parameter_build.grad_vector_init = 0; parameter_build.number_operation = 0;
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	parameter_build.delta_before[0] = dis_side; parameter_build.delta_before[1] = 0;
 8004b12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b16:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	//Construccion de las operaciones
	for(uint8_t i=1; i<5; i++)
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8004b2c:	e023      	b.n	8004b76 <set_operation_square+0x15a>
	{
		build_Operation(prtList, &parameter_build, coordination_position_square[0][i], coordination_position_square[1][i]);
 8004b2e:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	33a0      	adds	r3, #160	; 0xa0
 8004b36:	443b      	add	r3, r7
 8004b38:	3b88      	subs	r3, #136	; 0x88
 8004b3a:	ed93 7b00 	vldr	d7, [r3]
 8004b3e:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8004b42:	3305      	adds	r3, #5
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	33a0      	adds	r3, #160	; 0xa0
 8004b48:	443b      	add	r3, r7
 8004b4a:	3b88      	subs	r3, #136	; 0x88
 8004b4c:	ed93 6b00 	vldr	d6, [r3]
 8004b50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004b54:	eeb0 1a46 	vmov.f32	s2, s12
 8004b58:	eef0 1a66 	vmov.f32	s3, s13
 8004b5c:	eeb0 0a47 	vmov.f32	s0, s14
 8004b60:	eef0 0a67 	vmov.f32	s1, s15
 8004b64:	4619      	mov	r1, r3
 8004b66:	6978      	ldr	r0, [r7, #20]
 8004b68:	f7fd fbc2 	bl	80022f0 <build_Operation>
	for(uint8_t i=1; i<5; i++)
 8004b6c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8004b70:	3301      	adds	r3, #1
 8004b72:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8004b76:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d9d7      	bls.n	8004b2e <set_operation_square+0x112>
	}
	//Agregamos indicador de la operacion final
	prtList[parameter_build.number_operation+1].operacion = NULL_OPERATION;
 8004b7e:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8004b82:	3301      	adds	r3, #1
 8004b84:	015b      	lsls	r3, r3, #5
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4413      	add	r3, r2
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	37a0      	adds	r7, #160	; 0xa0
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <set_operation_AStar>:


void set_operation_AStar(Parameters_Operation_t *prtList, file_cell_t *file_cell, Parameters_Position_t *ptrParameterPosition, Parameters_Path_t *ptrParameterPath)
{
 8004b98:	b5b0      	push	{r4, r5, r7, lr}
 8004b9a:	b092      	sub	sp, #72	; 0x48
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
	//Definicion de variables
	Parameter_build_t parameter_build = {0};
 8004ba6:	f107 0310 	add.w	r3, r7, #16
 8004baa:	2230      	movs	r2, #48	; 0x30
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f003 fa84 	bl	80080bc <memset>
	//Definimos la posicion inicial del cuadrado
	//-----------------NOTA: RECORDAR QUE EL OPPY ESTA INICIALMENTE ORIENTADO 90 GRADOS CON RESPECTO AL EJE X---------------
	ptrParameterPath->rotative_Grad = ptrParameterPosition->grad_grobal = 90;
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	4b67      	ldr	r3, [pc, #412]	; (8004d58 <set_operation_AStar+0x1c0>)
 8004bbc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	225a      	movs	r2, #90	; 0x5a
 8004bc4:	63da      	str	r2, [r3, #60]	; 0x3c
	parameter_build.initline_x = ptrParameterPosition->xg_position_inicial = ptrParameterPath->goal_Position_x = (file_cell->ptrCell_parent[0]->coor_x)*10;
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	edd3 7a01 	vldr	s15, [r3, #4]
 8004bce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bd6:	ee17 0a90 	vmov	r0, s15
 8004bda:	f7fb fccd 	bl	8000578 <__aeabi_f2d>
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	6839      	ldr	r1, [r7, #0]
 8004be4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004bfa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	parameter_build.initline_y = ptrParameterPosition->yg_position_inicial = ptrParameterPath->goal_Position_y = (file_cell->ptrCell_parent[0]->coor_y)*10;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c06:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c0e:	ee17 0a90 	vmov	r0, s15
 8004c12:	f7fb fcb1 	bl	8000578 <__aeabi_f2d>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	6839      	ldr	r1, [r7, #0]
 8004c1c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004c32:	e9c7 2306 	strd	r2, r3, [r7, #24]
	parameter_build.grad_vector_init = 0; parameter_build.number_operation = parameter_build.routelist = 0;
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004c42:	2300      	movs	r3, #0
 8004c44:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8004c48:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004c4c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	parameter_build.delta_before[0] = 0; parameter_build.delta_before[1] = 10;
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	4b3e      	ldr	r3, [pc, #248]	; (8004d5c <set_operation_AStar+0x1c4>)
 8004c62:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	//Construccion de las operaciones
	for(uint8_t i=1; i<100; i++)
 8004c66:	2301      	movs	r3, #1
 8004c68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004c6c:	e03e      	b.n	8004cec <set_operation_AStar+0x154>
	{
		//Comprobamos si la celda no es un elemento nulo
		if(file_cell->ptrCell_parent[i] != NULL)
 8004c6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d03b      	beq.n	8004cf6 <set_operation_AStar+0x15e>
		{
			//Construimos la operacion
			build_Operation(prtList, &parameter_build, (file_cell->ptrCell_parent[i]->coor_x)*10, (file_cell->ptrCell_parent[i]->coor_y)*10);
 8004c7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c8e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c96:	ee17 0a90 	vmov	r0, s15
 8004c9a:	f7fb fc6d 	bl	8000578 <__aeabi_f2d>
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	460d      	mov	r5, r1
 8004ca2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	edd3 7a02 	vldr	s15, [r3, #8]
 8004cb2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cba:	ee17 0a90 	vmov	r0, s15
 8004cbe:	f7fb fc5b 	bl	8000578 <__aeabi_f2d>
 8004cc2:	f107 0310 	add.w	r3, r7, #16
 8004cc6:	ec41 0b11 	vmov	d1, r0, r1
 8004cca:	ec45 4b10 	vmov	d0, r4, r5
 8004cce:	4619      	mov	r1, r3
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7fd fb0d 	bl	80022f0 <build_Operation>
			//Aumentamos el valor en el recorrido
			parameter_build.routelist++;
 8004cd6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004cda:	3301      	adds	r3, #1
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	for(uint8_t i=1; i<100; i++)
 8004ce2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004cec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004cf0:	2b63      	cmp	r3, #99	; 0x63
 8004cf2:	d9bc      	bls.n	8004c6e <set_operation_AStar+0xd6>
 8004cf4:	e000      	b.n	8004cf8 <set_operation_AStar+0x160>
		}
		else{break;}
 8004cf6:	bf00      	nop
	}
	//Se Agrega la operacion final para llegar al goal
	//Construimos la operacion
	build_Operation(prtList, &parameter_build, (file_cell->ptrCell_file->coor_x)*10, (file_cell->ptrCell_file->coor_y)*10);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d08:	ee17 0a90 	vmov	r0, s15
 8004d0c:	f7fb fc34 	bl	8000578 <__aeabi_f2d>
 8004d10:	4604      	mov	r4, r0
 8004d12:	460d      	mov	r5, r1
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d1c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d24:	ee17 0a90 	vmov	r0, s15
 8004d28:	f7fb fc26 	bl	8000578 <__aeabi_f2d>
 8004d2c:	f107 0310 	add.w	r3, r7, #16
 8004d30:	ec41 0b11 	vmov	d1, r0, r1
 8004d34:	ec45 4b10 	vmov	d0, r4, r5
 8004d38:	4619      	mov	r1, r3
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f7fd fad8 	bl	80022f0 <build_Operation>
	//Agregamos indicador de la operacion final
	prtList[parameter_build.number_operation+1].operacion = NULL_OPERATION;
 8004d40:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004d44:	3301      	adds	r3, #1
 8004d46:	015b      	lsls	r3, r3, #5
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
}
 8004d50:	bf00      	nop
 8004d52:	3748      	adds	r7, #72	; 0x48
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bdb0      	pop	{r4, r5, r7, pc}
 8004d58:	40568000 	.word	0x40568000
 8004d5c:	40240000 	.word	0x40240000

08004d60 <PID_simple>:

//----------------------------Inicio de la definicion de las funciones-----------------------------------------


void PID_simple(Parameters_PID_t *ptrPIDHandler, float timer, float setpoint, float measure)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d6c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004d70:	ed87 1a00 	vstr	s2, [r7]
	//Calculo del error
	ptrPIDHandler->e = setpoint-measure;
 8004d74:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d78:	edd7 7a00 	vldr	s15, [r7]
 8004d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float pro =  ptrPIDHandler->kp*ptrPIDHandler->e;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	ed93 7a04 	vldr	s14, [r3, #16]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->e_intel +=  ptrPIDHandler->e*timer;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	edd3 6a01 	vldr	s13, [r3, #4]
 8004da6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	edc3 7a02 	vstr	s15, [r3, #8]
	float deriv =  ptrPIDHandler->kd*(ptrPIDHandler->e - ptrPIDHandler->e_prev)/timer;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	ed93 7a06 	vldr	s14, [r3, #24]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	edd3 6a01 	vldr	s13, [r3, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004dca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004dce:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004dd2:	ed97 7a02 	vldr	s14, [r7, #8]
 8004dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dda:	edc7 7a04 	vstr	s15, [r7, #16]
	ptrPIDHandler->u =  pro + ptrPIDHandler->ki*ptrPIDHandler->e_intel + deriv;        //Ley del controlador PID discreto
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	ed93 7a05 	vldr	s14, [r3, #20]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	edd3 7a02 	vldr	s15, [r3, #8]
 8004dea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dee:	edd7 7a05 	vldr	s15, [r7, #20]
 8004df2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004df6:	edd7 7a04 	vldr	s15, [r7, #16]
 8004dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	edc3 7a00 	vstr	s15, [r3]
     //Retorno a los valores reales
	ptrPIDHandler->e_prev = ptrPIDHandler->e;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	60da      	str	r2, [r3, #12]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <correction>:

void correction(Motor_Handler_t *ptrMotorHandler)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
	//Definimos variables auxiliares
	float port_dutty = 0;
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
	//Guardamos valor
	port_dutty = ptrMotorHandler->configMotor.new_dutty;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	60fb      	str	r3, [r7, #12]
    //Saturo el porcentaje de dutty en un tope maximo y minimo
    if (port_dutty >= 60) { port_dutty = 60; }
 8004e2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e30:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004e88 <correction+0x70>
 8004e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3c:	db02      	blt.n	8004e44 <correction+0x2c>
 8004e3e:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <correction+0x74>)
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e018      	b.n	8004e76 <correction+0x5e>
    else if(port_dutty <= duttySetPoint-5) { port_dutty = duttySetPoint-5; }
 8004e44:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <correction+0x78>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	3b05      	subs	r3, #5
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e52:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5e:	d809      	bhi.n	8004e74 <correction+0x5c>
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <correction+0x78>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	3b05      	subs	r3, #5
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e6e:	edc7 7a03 	vstr	s15, [r7, #12]
 8004e72:	e000      	b.n	8004e76 <correction+0x5e>
    else{ __NOP();}
 8004e74:	bf00      	nop

    //Actualizamoe el valor del dutty
    updateDuttyMotor(ptrMotorHandler, port_dutty);
 8004e76:	ed97 0a03 	vldr	s0, [r7, #12]
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fd f9f2 	bl	8002264 <updateDuttyMotor>
}
 8004e80:	bf00      	nop
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	42700000 	.word	0x42700000
 8004e8c:	42700000 	.word	0x42700000
 8004e90:	20000018 	.word	0x20000018

08004e94 <status_motor>:

//--------------------Operacion Motor----------------------
void status_motor(uint8_t status)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d134      	bne.n	8004f0e <status_motor+0x7a>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8004ea4:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <status_motor+0xf0>)
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f002 f9d0 	bl	8007250 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8004eb0:	4b35      	ldr	r3, [pc, #212]	; (8004f88 <status_motor+0xf4>)
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f002 f9ca 	bl	8007250 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 8004ebc:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <status_motor+0xf0>)
 8004ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ec0:	4b30      	ldr	r3, [pc, #192]	; (8004f84 <status_motor+0xf0>)
 8004ec2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f001 fd22 	bl	8006918 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 8004ed4:	4b2c      	ldr	r3, [pc, #176]	; (8004f88 <status_motor+0xf4>)
 8004ed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed8:	4b2b      	ldr	r3, [pc, #172]	; (8004f88 <status_motor+0xf4>)
 8004eda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f001 fd16 	bl	8006918 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 8004eec:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <status_motor+0xf0>)
 8004eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef0:	2180      	movs	r1, #128	; 0x80
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f001 fd10 	bl	8006918 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 8004ef8:	4b23      	ldr	r3, [pc, #140]	; (8004f88 <status_motor+0xf4>)
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	2180      	movs	r1, #128	; 0x80
 8004efe:	4618      	mov	r0, r3
 8004f00:	f001 fd0a 	bl	8006918 <GPIO_writePin>
		//Activamos la interrupcion
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_ENABLE);
 8004f04:	2101      	movs	r1, #1
 8004f06:	4821      	ldr	r0, [pc, #132]	; (8004f8c <status_motor+0xf8>)
 8004f08:	f000 fac4 	bl	8005494 <statusiInterruptionTimer>
		//Reiniciamos Bandera
		flag_mode = 0;
		//Desactivamos interrupcion
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
	}
}
 8004f0c:	e036      	b.n	8004f7c <status_motor+0xe8>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 8004f0e:	4b1d      	ldr	r3, [pc, #116]	; (8004f84 <status_motor+0xf0>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	2100      	movs	r1, #0
 8004f14:	4618      	mov	r0, r3
 8004f16:	f002 f99b 	bl	8007250 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 8004f1a:	4b1b      	ldr	r3, [pc, #108]	; (8004f88 <status_motor+0xf4>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	2100      	movs	r1, #0
 8004f20:	4618      	mov	r0, r3
 8004f22:	f002 f995 	bl	8007250 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 8004f26:	4b17      	ldr	r3, [pc, #92]	; (8004f84 <status_motor+0xf0>)
 8004f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2a:	4b16      	ldr	r3, [pc, #88]	; (8004f84 <status_motor+0xf0>)
 8004f2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	4619      	mov	r1, r3
 8004f38:	4610      	mov	r0, r2
 8004f3a:	f001 fced 	bl	8006918 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 8004f3e:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <status_motor+0xf4>)
 8004f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f42:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <status_motor+0xf4>)
 8004f44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f001 fce1 	bl	8006918 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <status_motor+0xf0>)
 8004f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f001 fcdb 	bl	8006918 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 8004f62:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <status_motor+0xf4>)
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	2101      	movs	r1, #1
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f001 fcd5 	bl	8006918 <GPIO_writePin>
		flag_mode = 0;
 8004f6e:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <status_motor+0xfc>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
 8004f74:	2100      	movs	r1, #0
 8004f76:	4805      	ldr	r0, [pc, #20]	; (8004f8c <status_motor+0xf8>)
 8004f78:	f000 fa8c 	bl	8005494 <statusiInterruptionTimer>
}
 8004f7c:	bf00      	nop
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	2000038c 	.word	0x2000038c
 8004f88:	20000318 	.word	0x20000318
 8004f8c:	200003e0 	.word	0x200003e0
 8004f90:	20009426 	.word	0x20009426

08004f94 <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third)  //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004fa2:	edc7 0a00 	vstr	s1, [r7]
 8004fa6:	73fb      	strb	r3, [r7, #15]
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 8004fa8:	4b17      	ldr	r3, [pc, #92]	; (8005008 <config_motor+0x74>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	839a      	strh	r2, [r3, #28]
	handler_Motor_L.parametersMotor.count = 0;
 8004fae:	4b17      	ldr	r3, [pc, #92]	; (800500c <config_motor+0x78>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	839a      	strh	r2, [r3, #28]
	//Actualizamos el valor del dutty y frecuencia
	value_period = 100000/third;
 8004fb4:	eddf 6a16 	vldr	s13, [pc, #88]	; 8005010 <config_motor+0x7c>
 8004fb8:	ed97 7a00 	vldr	s14, [r7]
 8004fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc4:	ee17 3a90 	vmov	r3, s15
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	4b12      	ldr	r3, [pc, #72]	; (8005014 <config_motor+0x80>)
 8004fcc:	801a      	strh	r2, [r3, #0]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <config_motor+0x80>)
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4810      	ldr	r0, [pc, #64]	; (8005018 <config_motor+0x84>)
 8004fd6:	f000 fa7d 	bl	80054d4 <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, second);
 8004fda:	ed97 0a01 	vldr	s0, [r7, #4]
 8004fde:	480a      	ldr	r0, [pc, #40]	; (8005008 <config_motor+0x74>)
 8004fe0:	f7fd f940 	bl	8002264 <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, firth);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fee:	eeb0 0a67 	vmov.f32	s0, s15
 8004ff2:	4806      	ldr	r0, [pc, #24]	; (800500c <config_motor+0x78>)
 8004ff4:	f7fd f936 	bl	8002264 <updateDuttyMotor>
	//Cambio valor bandera
	flag_mode=status;
 8004ff8:	4a08      	ldr	r2, [pc, #32]	; (800501c <config_motor+0x88>)
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	7013      	strb	r3, [r2, #0]
}
 8004ffe:	bf00      	nop
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000318 	.word	0x20000318
 800500c:	2000038c 	.word	0x2000038c
 8005010:	47c35000 	.word	0x47c35000
 8005014:	20000012 	.word	0x20000012
 8005018:	200003d0 	.word	0x200003d0
 800501c:	20009426 	.word	0x20009426

08005020 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005020:	480d      	ldr	r0, [pc, #52]	; (8005058 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005022:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005024:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005028:	480c      	ldr	r0, [pc, #48]	; (800505c <LoopForever+0x6>)
  ldr r1, =_edata
 800502a:	490d      	ldr	r1, [pc, #52]	; (8005060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800502c:	4a0d      	ldr	r2, [pc, #52]	; (8005064 <LoopForever+0xe>)
  movs r3, #0
 800502e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005030:	e002      	b.n	8005038 <LoopCopyDataInit>

08005032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005036:	3304      	adds	r3, #4

08005038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800503a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800503c:	d3f9      	bcc.n	8005032 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800503e:	4a0a      	ldr	r2, [pc, #40]	; (8005068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005040:	4c0a      	ldr	r4, [pc, #40]	; (800506c <LoopForever+0x16>)
  movs r3, #0
 8005042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005044:	e001      	b.n	800504a <LoopFillZerobss>

08005046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005048:	3204      	adds	r2, #4

0800504a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800504a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800504c:	d3fb      	bcc.n	8005046 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800504e:	f003 f811 	bl	8008074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005052:	f7fd ff11 	bl	8002e78 <main>

08005056 <LoopForever>:

LoopForever:
    b LoopForever
 8005056:	e7fe      	b.n	8005056 <LoopForever>
  ldr   r0, =_estack
 8005058:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800505c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005060:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005064:	08010698 	.word	0x08010698
  ldr r2, =_sbss
 8005068:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800506c:	20009d10 	.word	0x20009d10

08005070 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005070:	e7fe      	b.n	8005070 <ADC_IRQHandler>

08005072 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005072:	b480      	push	{r7}
 8005074:	af00      	add	r7, sp, #0
	return 1;
 8005076:	2301      	movs	r3, #1
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <_kill>:

int _kill(int pid, int sig)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800508c:	f002 ffec 	bl	8008068 <__errno>
 8005090:	4603      	mov	r3, r0
 8005092:	2216      	movs	r2, #22
 8005094:	601a      	str	r2, [r3, #0]
	return -1;
 8005096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <_exit>:

void _exit (int status)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b082      	sub	sp, #8
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80050aa:	f04f 31ff 	mov.w	r1, #4294967295
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff ffe7 	bl	8005082 <_kill>
	while (1) {}		/* Make sure we hang here */
 80050b4:	e7fe      	b.n	80050b4 <_exit+0x12>

080050b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b086      	sub	sp, #24
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e00a      	b.n	80050de <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80050c8:	f3af 8000 	nop.w
 80050cc:	4601      	mov	r1, r0
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	60ba      	str	r2, [r7, #8]
 80050d4:	b2ca      	uxtb	r2, r1
 80050d6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	3301      	adds	r3, #1
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	dbf0      	blt.n	80050c8 <_read+0x12>
	}

return len;
 80050e6:	687b      	ldr	r3, [r7, #4]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050fc:	2300      	movs	r3, #0
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	e009      	b.n	8005116 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	60ba      	str	r2, [r7, #8]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	3301      	adds	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	429a      	cmp	r2, r3
 800511c:	dbf1      	blt.n	8005102 <_write+0x12>
	}
	return len;
 800511e:	687b      	ldr	r3, [r7, #4]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <_close>:

int _close(int file)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
	return -1;
 8005130:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005134:	4618      	mov	r0, r3
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005150:	605a      	str	r2, [r3, #4]
	return 0;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <_isatty>:

int _isatty(int file)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
	return 1;
 8005168:	2301      	movs	r3, #1
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
	return 0;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005198:	4a14      	ldr	r2, [pc, #80]	; (80051ec <_sbrk+0x5c>)
 800519a:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <_sbrk+0x60>)
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051a4:	4b13      	ldr	r3, [pc, #76]	; (80051f4 <_sbrk+0x64>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d102      	bne.n	80051b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051ac:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <_sbrk+0x64>)
 80051ae:	4a12      	ldr	r2, [pc, #72]	; (80051f8 <_sbrk+0x68>)
 80051b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051b2:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <_sbrk+0x64>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4413      	add	r3, r2
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d207      	bcs.n	80051d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051c0:	f002 ff52 	bl	8008068 <__errno>
 80051c4:	4603      	mov	r3, r0
 80051c6:	220c      	movs	r2, #12
 80051c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051ca:	f04f 33ff 	mov.w	r3, #4294967295
 80051ce:	e009      	b.n	80051e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051d0:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <_sbrk+0x64>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051d6:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <_sbrk+0x64>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4413      	add	r3, r2
 80051de:	4a05      	ldr	r2, [pc, #20]	; (80051f4 <_sbrk+0x64>)
 80051e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051e2:	68fb      	ldr	r3, [r7, #12]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20020000 	.word	0x20020000
 80051f0:	00000400 	.word	0x00000400
 80051f4:	20009484 	.word	0x20009484
 80051f8:	20009d10 	.word	0x20009d10

080051fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	4603      	mov	r3, r0
 8005204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520a:	2b00      	cmp	r3, #0
 800520c:	db0b      	blt.n	8005226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	f003 021f 	and.w	r2, r3, #31
 8005214:	4907      	ldr	r1, [pc, #28]	; (8005234 <__NVIC_EnableIRQ+0x38>)
 8005216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	2001      	movs	r0, #1
 800521e:	fa00 f202 	lsl.w	r2, r0, r2
 8005222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	e000e100 	.word	0xe000e100

08005238 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005248:	d10a      	bne.n	8005260 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800524a:	4b62      	ldr	r3, [pc, #392]	; (80053d4 <BasicTimer_Config+0x19c>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	4a61      	ldr	r2, [pc, #388]	; (80053d4 <BasicTimer_Config+0x19c>)
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	4a5f      	ldr	r2, [pc, #380]	; (80053d8 <BasicTimer_Config+0x1a0>)
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	e02e      	b.n	80052be <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	4a5d      	ldr	r2, [pc, #372]	; (80053dc <BasicTimer_Config+0x1a4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d10a      	bne.n	8005280 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800526a:	4b5a      	ldr	r3, [pc, #360]	; (80053d4 <BasicTimer_Config+0x19c>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	4a59      	ldr	r2, [pc, #356]	; (80053d4 <BasicTimer_Config+0x19c>)
 8005270:	f043 0302 	orr.w	r3, r3, #2
 8005274:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	4a59      	ldr	r2, [pc, #356]	; (80053e0 <BasicTimer_Config+0x1a8>)
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	e01e      	b.n	80052be <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	4a57      	ldr	r2, [pc, #348]	; (80053e4 <BasicTimer_Config+0x1ac>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d10a      	bne.n	80052a0 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800528a:	4b52      	ldr	r3, [pc, #328]	; (80053d4 <BasicTimer_Config+0x19c>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	4a51      	ldr	r2, [pc, #324]	; (80053d4 <BasicTimer_Config+0x19c>)
 8005290:	f043 0304 	orr.w	r3, r3, #4
 8005294:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	4a53      	ldr	r2, [pc, #332]	; (80053e8 <BasicTimer_Config+0x1b0>)
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	e00e      	b.n	80052be <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a51      	ldr	r2, [pc, #324]	; (80053ec <BasicTimer_Config+0x1b4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d109      	bne.n	80052be <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80052aa:	4b4a      	ldr	r3, [pc, #296]	; (80053d4 <BasicTimer_Config+0x19c>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	4a49      	ldr	r2, [pc, #292]	; (80053d4 <BasicTimer_Config+0x19c>)
 80052b0:	f043 0308 	orr.w	r3, r3, #8
 80052b4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	4a4d      	ldr	r2, [pc, #308]	; (80053f0 <BasicTimer_Config+0x1b8>)
 80052bc:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 80052be:	f001 fdb7 	bl	8006e30 <getConfigPLL>
 80052c2:	4603      	mov	r3, r0
 80052c4:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80052c6:	f001 fdcf 	bl	8006e68 <getClockAPB1>
 80052ca:	4603      	mov	r3, r0
 80052cc:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 80052ce:	7bbb      	ldrb	r3, [r7, #14]
 80052d0:	2b31      	cmp	r3, #49	; 0x31
 80052d2:	d903      	bls.n	80052dc <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	73fb      	strb	r3, [r7, #15]
 80052da:	e000      	b.n	80052de <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 80052dc:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	8852      	ldrh	r2, [r2, #2]
 80052e4:	fb02 f303 	mul.w	r3, r2, r3
 80052e8:	1e5a      	subs	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d112      	bne.n	800531e <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f022 0210 	bic.w	r2, r2, #16
 8005306:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	3201      	adds	r2, #1
 8005312:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	625a      	str	r2, [r3, #36]	; 0x24
 800531c:	e018      	b.n	8005350 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f022 0210 	bic.w	r2, r2, #16
 800532c:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f042 0210 	orr.w	r2, r2, #16
 800533c:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6852      	ldr	r2, [r2, #4]
 800534e:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005350:	b672      	cpsid	i
}
 8005352:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535c:	d103      	bne.n	8005366 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800535e:	201c      	movs	r0, #28
 8005360:	f7ff ff4c 	bl	80051fc <__NVIC_EnableIRQ>
 8005364:	e019      	b.n	800539a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	4a1c      	ldr	r2, [pc, #112]	; (80053dc <BasicTimer_Config+0x1a4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d103      	bne.n	8005378 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8005370:	201d      	movs	r0, #29
 8005372:	f7ff ff43 	bl	80051fc <__NVIC_EnableIRQ>
 8005376:	e010      	b.n	800539a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <BasicTimer_Config+0x1ac>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d103      	bne.n	800538a <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8005382:	201e      	movs	r0, #30
 8005384:	f7ff ff3a 	bl	80051fc <__NVIC_EnableIRQ>
 8005388:	e007      	b.n	800539a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	4a17      	ldr	r2, [pc, #92]	; (80053ec <BasicTimer_Config+0x1b4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d102      	bne.n	800539a <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8005394:	2032      	movs	r0, #50	; 0x32
 8005396:	f7ff ff31 	bl	80051fc <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800539a:	b662      	cpsie	i
}
 800539c:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	7a1b      	ldrb	r3, [r3, #8]
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f875 	bl	8005494 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f022 0201 	bic.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f042 0201 	orr.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
}
 80053ca:	bf00      	nop
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800
 80053d8:	20009488 	.word	0x20009488
 80053dc:	40000400 	.word	0x40000400
 80053e0:	2000948c 	.word	0x2000948c
 80053e4:	40000800 	.word	0x40000800
 80053e8:	20009490 	.word	0x20009490
 80053ec:	40000c00 	.word	0x40000c00
 80053f0:	20009494 	.word	0x20009494

080053f4 <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
	__NOP();
 80053f8:	bf00      	nop
}
 80053fa:	bf00      	nop
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
	__NOP();
 8005408:	bf00      	nop
}
 800540a:	bf00      	nop
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <TIM2_IRQHandler+0x1c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	4b04      	ldr	r3, [pc, #16]	; (8005430 <TIM2_IRQHandler+0x1c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0201 	bic.w	r2, r2, #1
 8005426:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8005428:	f7fe fb18 	bl	8003a5c <BasicTimer2_Callback>

}
 800542c:	bf00      	nop
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20009488 	.word	0x20009488

08005434 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8005438:	4b05      	ldr	r3, [pc, #20]	; (8005450 <TIM3_IRQHandler+0x1c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	4b04      	ldr	r3, [pc, #16]	; (8005450 <TIM3_IRQHandler+0x1c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8005448:	f7fe fb2e 	bl	8003aa8 <BasicTimer3_Callback>

}
 800544c:	bf00      	nop
 800544e:	bd80      	pop	{r7, pc}
 8005450:	2000948c 	.word	0x2000948c

08005454 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8005458:	4b05      	ldr	r3, [pc, #20]	; (8005470 <TIM4_IRQHandler+0x1c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	4b04      	ldr	r3, [pc, #16]	; (8005470 <TIM4_IRQHandler+0x1c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0201 	bic.w	r2, r2, #1
 8005466:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8005468:	f7ff ffc4 	bl	80053f4 <BasicTimer4_Callback>

}
 800546c:	bf00      	nop
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20009490 	.word	0x20009490

08005474 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <TIM5_IRQHandler+0x1c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	4b04      	ldr	r3, [pc, #16]	; (8005490 <TIM5_IRQHandler+0x1c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0201 	bic.w	r2, r2, #1
 8005486:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8005488:	f7ff ffbc 	bl	8005404 <BasicTimer5_Callback>

}
 800548c:	bf00      	nop
 800548e:	bd80      	pop	{r7, pc}
 8005490:	20009494 	.word	0x20009494

08005494 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d108      	bne.n	80054b8 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 80054b6:	e007      	b.n	80054c8 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f022 0201 	bic.w	r2, r2, #1
 80054c6:	60da      	str	r2, [r3, #12]
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 80054e0:	887a      	ldrh	r2, [r7, #2]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6852      	ldr	r2, [r2, #4]
 80054f6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <__NVIC_EnableIRQ>:
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800550e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005512:	2b00      	cmp	r3, #0
 8005514:	db0b      	blt.n	800552e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	f003 021f 	and.w	r2, r3, #31
 800551c:	4907      	ldr	r1, [pc, #28]	; (800553c <__NVIC_EnableIRQ+0x38>)
 800551e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005522:	095b      	lsrs	r3, r3, #5
 8005524:	2001      	movs	r0, #1
 8005526:	fa00 f202 	lsl.w	r2, r0, r2
 800552a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	e000e100 	.word	0xe000e100

08005540 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af02      	add	r7, sp, #8
 8005546:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	2300      	movs	r3, #0
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	2300      	movs	r3, #0
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	2301      	movs	r3, #1
 8005556:	2200      	movs	r2, #0
 8005558:	2100      	movs	r1, #0
 800555a:	f001 f891 	bl	8006680 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f001 f8ae 	bl	80066c4 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8005568:	4b97      	ldr	r3, [pc, #604]	; (80057c8 <extInt_Config+0x288>)
 800556a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556c:	4a96      	ldr	r2, [pc, #600]	; (80057c8 <extInt_Config+0x288>)
 800556e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005572:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b0f      	cmp	r3, #15
 800557c:	f200 85cf 	bhi.w	800611e <extInt_Config+0xbde>
 8005580:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <extInt_Config+0x48>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	080055c9 	.word	0x080055c9
 800558c:	0800567f 	.word	0x0800567f
 8005590:	08005735 	.word	0x08005735
 8005594:	0800580b 	.word	0x0800580b
 8005598:	080058c1 	.word	0x080058c1
 800559c:	0800596f 	.word	0x0800596f
 80055a0:	08005a35 	.word	0x08005a35
 80055a4:	08005add 	.word	0x08005add
 80055a8:	08005b85 	.word	0x08005b85
 80055ac:	08005c2d 	.word	0x08005c2d
 80055b0:	08005cf3 	.word	0x08005cf3
 80055b4:	08005d9b 	.word	0x08005d9b
 80055b8:	08005e43 	.word	0x08005e43
 80055bc:	08005f09 	.word	0x08005f09
 80055c0:	08005fb1 	.word	0x08005fb1
 80055c4:	08006059 	.word	0x08006059
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 80055c8:	4b80      	ldr	r3, [pc, #512]	; (80057cc <extInt_Config+0x28c>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	4a7f      	ldr	r2, [pc, #508]	; (80057cc <extInt_Config+0x28c>)
 80055ce:	f023 030f 	bic.w	r3, r3, #15
 80055d2:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	4a7d      	ldr	r2, [pc, #500]	; (80057d0 <extInt_Config+0x290>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d105      	bne.n	80055ec <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80055e0:	4b7a      	ldr	r3, [pc, #488]	; (80057cc <extInt_Config+0x28c>)
 80055e2:	4a7a      	ldr	r2, [pc, #488]	; (80057cc <extInt_Config+0x28c>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80055e8:	f000 bd9b 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	4a78      	ldr	r2, [pc, #480]	; (80057d4 <extInt_Config+0x294>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d107      	bne.n	8005608 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80055f8:	4b74      	ldr	r3, [pc, #464]	; (80057cc <extInt_Config+0x28c>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	4a73      	ldr	r2, [pc, #460]	; (80057cc <extInt_Config+0x28c>)
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	6093      	str	r3, [r2, #8]
		break;
 8005604:	f000 bd8d 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	4a72      	ldr	r2, [pc, #456]	; (80057d8 <extInt_Config+0x298>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d107      	bne.n	8005624 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8005614:	4b6d      	ldr	r3, [pc, #436]	; (80057cc <extInt_Config+0x28c>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4a6c      	ldr	r2, [pc, #432]	; (80057cc <extInt_Config+0x28c>)
 800561a:	f043 0302 	orr.w	r3, r3, #2
 800561e:	6093      	str	r3, [r2, #8]
		break;
 8005620:	f000 bd7f 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	4a6c      	ldr	r2, [pc, #432]	; (80057dc <extInt_Config+0x29c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d107      	bne.n	8005640 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8005630:	4b66      	ldr	r3, [pc, #408]	; (80057cc <extInt_Config+0x28c>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	4a65      	ldr	r2, [pc, #404]	; (80057cc <extInt_Config+0x28c>)
 8005636:	f043 0303 	orr.w	r3, r3, #3
 800563a:	6093      	str	r3, [r2, #8]
		break;
 800563c:	f000 bd71 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	4a66      	ldr	r2, [pc, #408]	; (80057e0 <extInt_Config+0x2a0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d107      	bne.n	800565c <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 800564c:	4b5f      	ldr	r3, [pc, #380]	; (80057cc <extInt_Config+0x28c>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	4a5e      	ldr	r2, [pc, #376]	; (80057cc <extInt_Config+0x28c>)
 8005652:	f043 0304 	orr.w	r3, r3, #4
 8005656:	6093      	str	r3, [r2, #8]
		break;
 8005658:	f000 bd63 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	4a60      	ldr	r2, [pc, #384]	; (80057e4 <extInt_Config+0x2a4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d107      	bne.n	8005678 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8005668:	4b58      	ldr	r3, [pc, #352]	; (80057cc <extInt_Config+0x28c>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	4a57      	ldr	r2, [pc, #348]	; (80057cc <extInt_Config+0x28c>)
 800566e:	f043 0307 	orr.w	r3, r3, #7
 8005672:	6093      	str	r3, [r2, #8]
		break;
 8005674:	f000 bd55 	b.w	8006122 <extInt_Config+0xbe2>
			__NOP();
 8005678:	bf00      	nop
		break;
 800567a:	f000 bd52 	b.w	8006122 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 800567e:	4b53      	ldr	r3, [pc, #332]	; (80057cc <extInt_Config+0x28c>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	4a52      	ldr	r2, [pc, #328]	; (80057cc <extInt_Config+0x28c>)
 8005684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005688:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	4a4f      	ldr	r2, [pc, #316]	; (80057d0 <extInt_Config+0x290>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d105      	bne.n	80056a2 <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8005696:	4b4d      	ldr	r3, [pc, #308]	; (80057cc <extInt_Config+0x28c>)
 8005698:	4a4c      	ldr	r2, [pc, #304]	; (80057cc <extInt_Config+0x28c>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 800569e:	f000 bd40 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	4a4a      	ldr	r2, [pc, #296]	; (80057d4 <extInt_Config+0x294>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d107      	bne.n	80056be <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 80056ae:	4b47      	ldr	r3, [pc, #284]	; (80057cc <extInt_Config+0x28c>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	4a46      	ldr	r2, [pc, #280]	; (80057cc <extInt_Config+0x28c>)
 80056b4:	f043 0310 	orr.w	r3, r3, #16
 80056b8:	6093      	str	r3, [r2, #8]
		break;
 80056ba:	f000 bd32 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	4a44      	ldr	r2, [pc, #272]	; (80057d8 <extInt_Config+0x298>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d107      	bne.n	80056da <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80056ca:	4b40      	ldr	r3, [pc, #256]	; (80057cc <extInt_Config+0x28c>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	4a3f      	ldr	r2, [pc, #252]	; (80057cc <extInt_Config+0x28c>)
 80056d0:	f043 0320 	orr.w	r3, r3, #32
 80056d4:	6093      	str	r3, [r2, #8]
		break;
 80056d6:	f000 bd24 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4a3e      	ldr	r2, [pc, #248]	; (80057dc <extInt_Config+0x29c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d107      	bne.n	80056f6 <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80056e6:	4b39      	ldr	r3, [pc, #228]	; (80057cc <extInt_Config+0x28c>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	4a38      	ldr	r2, [pc, #224]	; (80057cc <extInt_Config+0x28c>)
 80056ec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80056f0:	6093      	str	r3, [r2, #8]
		break;
 80056f2:	f000 bd16 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4a38      	ldr	r2, [pc, #224]	; (80057e0 <extInt_Config+0x2a0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d107      	bne.n	8005712 <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8005702:	4b32      	ldr	r3, [pc, #200]	; (80057cc <extInt_Config+0x28c>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	4a31      	ldr	r2, [pc, #196]	; (80057cc <extInt_Config+0x28c>)
 8005708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800570c:	6093      	str	r3, [r2, #8]
		break;
 800570e:	f000 bd08 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	4a32      	ldr	r2, [pc, #200]	; (80057e4 <extInt_Config+0x2a4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d107      	bne.n	800572e <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 800571e:	4b2b      	ldr	r3, [pc, #172]	; (80057cc <extInt_Config+0x28c>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	4a2a      	ldr	r2, [pc, #168]	; (80057cc <extInt_Config+0x28c>)
 8005724:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005728:	6093      	str	r3, [r2, #8]
		break;
 800572a:	f000 bcfa 	b.w	8006122 <extInt_Config+0xbe2>
			__NOP();
 800572e:	bf00      	nop
		break;
 8005730:	f000 bcf7 	b.w	8006122 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8005734:	4b25      	ldr	r3, [pc, #148]	; (80057cc <extInt_Config+0x28c>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	4a24      	ldr	r2, [pc, #144]	; (80057cc <extInt_Config+0x28c>)
 800573a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800573e:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	4a22      	ldr	r2, [pc, #136]	; (80057d0 <extInt_Config+0x290>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d105      	bne.n	8005758 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 800574c:	4b1f      	ldr	r3, [pc, #124]	; (80057cc <extInt_Config+0x28c>)
 800574e:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <extInt_Config+0x28c>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8005754:	f000 bce5 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	4a1d      	ldr	r2, [pc, #116]	; (80057d4 <extInt_Config+0x294>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d107      	bne.n	8005774 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8005764:	4b19      	ldr	r3, [pc, #100]	; (80057cc <extInt_Config+0x28c>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	4a18      	ldr	r2, [pc, #96]	; (80057cc <extInt_Config+0x28c>)
 800576a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576e:	6093      	str	r3, [r2, #8]
		break;
 8005770:	f000 bcd7 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	4a17      	ldr	r2, [pc, #92]	; (80057d8 <extInt_Config+0x298>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d107      	bne.n	8005790 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8005780:	4b12      	ldr	r3, [pc, #72]	; (80057cc <extInt_Config+0x28c>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	4a11      	ldr	r2, [pc, #68]	; (80057cc <extInt_Config+0x28c>)
 8005786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800578a:	6093      	str	r3, [r2, #8]
		break;
 800578c:	f000 bcc9 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	4a11      	ldr	r2, [pc, #68]	; (80057dc <extInt_Config+0x29c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d107      	bne.n	80057ac <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 800579c:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <extInt_Config+0x28c>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	4a0a      	ldr	r2, [pc, #40]	; (80057cc <extInt_Config+0x28c>)
 80057a2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80057a6:	6093      	str	r3, [r2, #8]
		break;
 80057a8:	f000 bcbb 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	4a0b      	ldr	r2, [pc, #44]	; (80057e0 <extInt_Config+0x2a0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d117      	bne.n	80057e8 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 80057b8:	4b04      	ldr	r3, [pc, #16]	; (80057cc <extInt_Config+0x28c>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4a03      	ldr	r2, [pc, #12]	; (80057cc <extInt_Config+0x28c>)
 80057be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057c2:	6093      	str	r3, [r2, #8]
		break;
 80057c4:	f000 bcad 	b.w	8006122 <extInt_Config+0xbe2>
 80057c8:	40023800 	.word	0x40023800
 80057cc:	40013800 	.word	0x40013800
 80057d0:	40020000 	.word	0x40020000
 80057d4:	40020400 	.word	0x40020400
 80057d8:	40020800 	.word	0x40020800
 80057dc:	40020c00 	.word	0x40020c00
 80057e0:	40021000 	.word	0x40021000
 80057e4:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	4a8a      	ldr	r2, [pc, #552]	; (8005a18 <extInt_Config+0x4d8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d107      	bne.n	8005804 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80057f4:	4b89      	ldr	r3, [pc, #548]	; (8005a1c <extInt_Config+0x4dc>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	4a88      	ldr	r2, [pc, #544]	; (8005a1c <extInt_Config+0x4dc>)
 80057fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057fe:	6093      	str	r3, [r2, #8]
		break;
 8005800:	f000 bc8f 	b.w	8006122 <extInt_Config+0xbe2>
			__NOP();
 8005804:	bf00      	nop
		break;
 8005806:	f000 bc8c 	b.w	8006122 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 800580a:	4b84      	ldr	r3, [pc, #528]	; (8005a1c <extInt_Config+0x4dc>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4a83      	ldr	r2, [pc, #524]	; (8005a1c <extInt_Config+0x4dc>)
 8005810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005814:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	4a80      	ldr	r2, [pc, #512]	; (8005a20 <extInt_Config+0x4e0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d105      	bne.n	800582e <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8005822:	4b7e      	ldr	r3, [pc, #504]	; (8005a1c <extInt_Config+0x4dc>)
 8005824:	4a7d      	ldr	r2, [pc, #500]	; (8005a1c <extInt_Config+0x4dc>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 800582a:	f000 bc7a 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4a7b      	ldr	r2, [pc, #492]	; (8005a24 <extInt_Config+0x4e4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d107      	bne.n	800584a <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 800583a:	4b78      	ldr	r3, [pc, #480]	; (8005a1c <extInt_Config+0x4dc>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	4a77      	ldr	r2, [pc, #476]	; (8005a1c <extInt_Config+0x4dc>)
 8005840:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005844:	6093      	str	r3, [r2, #8]
		break;
 8005846:	f000 bc6c 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	4a75      	ldr	r2, [pc, #468]	; (8005a28 <extInt_Config+0x4e8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d107      	bne.n	8005866 <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8005856:	4b71      	ldr	r3, [pc, #452]	; (8005a1c <extInt_Config+0x4dc>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	4a70      	ldr	r2, [pc, #448]	; (8005a1c <extInt_Config+0x4dc>)
 800585c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005860:	6093      	str	r3, [r2, #8]
		break;
 8005862:	f000 bc5e 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4a6f      	ldr	r2, [pc, #444]	; (8005a2c <extInt_Config+0x4ec>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d107      	bne.n	8005882 <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8005872:	4b6a      	ldr	r3, [pc, #424]	; (8005a1c <extInt_Config+0x4dc>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	4a69      	ldr	r2, [pc, #420]	; (8005a1c <extInt_Config+0x4dc>)
 8005878:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800587c:	6093      	str	r3, [r2, #8]
		break;
 800587e:	f000 bc50 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	4a69      	ldr	r2, [pc, #420]	; (8005a30 <extInt_Config+0x4f0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d107      	bne.n	800589e <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 800588e:	4b63      	ldr	r3, [pc, #396]	; (8005a1c <extInt_Config+0x4dc>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	4a62      	ldr	r2, [pc, #392]	; (8005a1c <extInt_Config+0x4dc>)
 8005894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005898:	6093      	str	r3, [r2, #8]
		break;
 800589a:	f000 bc42 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4a5c      	ldr	r2, [pc, #368]	; (8005a18 <extInt_Config+0x4d8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d107      	bne.n	80058ba <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 80058aa:	4b5c      	ldr	r3, [pc, #368]	; (8005a1c <extInt_Config+0x4dc>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	4a5b      	ldr	r2, [pc, #364]	; (8005a1c <extInt_Config+0x4dc>)
 80058b0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80058b4:	6093      	str	r3, [r2, #8]
		break;
 80058b6:	f000 bc34 	b.w	8006122 <extInt_Config+0xbe2>
			__NOP();
 80058ba:	bf00      	nop
		break;
 80058bc:	f000 bc31 	b.w	8006122 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 80058c0:	4b56      	ldr	r3, [pc, #344]	; (8005a1c <extInt_Config+0x4dc>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	4a55      	ldr	r2, [pc, #340]	; (8005a1c <extInt_Config+0x4dc>)
 80058c6:	f023 030f 	bic.w	r3, r3, #15
 80058ca:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	4a53      	ldr	r2, [pc, #332]	; (8005a20 <extInt_Config+0x4e0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d105      	bne.n	80058e4 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80058d8:	4b50      	ldr	r3, [pc, #320]	; (8005a1c <extInt_Config+0x4dc>)
 80058da:	4a50      	ldr	r2, [pc, #320]	; (8005a1c <extInt_Config+0x4dc>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80058e0:	f000 bc1f 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	4a4e      	ldr	r2, [pc, #312]	; (8005a24 <extInt_Config+0x4e4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d107      	bne.n	8005900 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80058f0:	4b4a      	ldr	r3, [pc, #296]	; (8005a1c <extInt_Config+0x4dc>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4a49      	ldr	r2, [pc, #292]	; (8005a1c <extInt_Config+0x4dc>)
 80058f6:	f043 0301 	orr.w	r3, r3, #1
 80058fa:	60d3      	str	r3, [r2, #12]
		break;
 80058fc:	f000 bc11 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	4a48      	ldr	r2, [pc, #288]	; (8005a28 <extInt_Config+0x4e8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d107      	bne.n	800591c <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 800590c:	4b43      	ldr	r3, [pc, #268]	; (8005a1c <extInt_Config+0x4dc>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4a42      	ldr	r2, [pc, #264]	; (8005a1c <extInt_Config+0x4dc>)
 8005912:	f043 0302 	orr.w	r3, r3, #2
 8005916:	60d3      	str	r3, [r2, #12]
		break;
 8005918:	f000 bc03 	b.w	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	4a42      	ldr	r2, [pc, #264]	; (8005a2c <extInt_Config+0x4ec>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d106      	bne.n	8005936 <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8005928:	4b3c      	ldr	r3, [pc, #240]	; (8005a1c <extInt_Config+0x4dc>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	4a3b      	ldr	r2, [pc, #236]	; (8005a1c <extInt_Config+0x4dc>)
 800592e:	f043 0303 	orr.w	r3, r3, #3
 8005932:	60d3      	str	r3, [r2, #12]
		break;
 8005934:	e3f5      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4a3c      	ldr	r2, [pc, #240]	; (8005a30 <extInt_Config+0x4f0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d106      	bne.n	8005950 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8005942:	4b36      	ldr	r3, [pc, #216]	; (8005a1c <extInt_Config+0x4dc>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	4a35      	ldr	r2, [pc, #212]	; (8005a1c <extInt_Config+0x4dc>)
 8005948:	f043 0304 	orr.w	r3, r3, #4
 800594c:	60d3      	str	r3, [r2, #12]
		break;
 800594e:	e3e8      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	4a30      	ldr	r2, [pc, #192]	; (8005a18 <extInt_Config+0x4d8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d106      	bne.n	800596a <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 800595c:	4b2f      	ldr	r3, [pc, #188]	; (8005a1c <extInt_Config+0x4dc>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4a2e      	ldr	r2, [pc, #184]	; (8005a1c <extInt_Config+0x4dc>)
 8005962:	f043 0307 	orr.w	r3, r3, #7
 8005966:	60d3      	str	r3, [r2, #12]
		break;
 8005968:	e3db      	b.n	8006122 <extInt_Config+0xbe2>
			__NOP();
 800596a:	bf00      	nop
		break;
 800596c:	e3d9      	b.n	8006122 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 800596e:	4b2b      	ldr	r3, [pc, #172]	; (8005a1c <extInt_Config+0x4dc>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	4a2a      	ldr	r2, [pc, #168]	; (8005a1c <extInt_Config+0x4dc>)
 8005974:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005978:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	4a27      	ldr	r2, [pc, #156]	; (8005a20 <extInt_Config+0x4e0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d104      	bne.n	8005990 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8005986:	4b25      	ldr	r3, [pc, #148]	; (8005a1c <extInt_Config+0x4dc>)
 8005988:	4a24      	ldr	r2, [pc, #144]	; (8005a1c <extInt_Config+0x4dc>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800598e:	e3c8      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	4a23      	ldr	r2, [pc, #140]	; (8005a24 <extInt_Config+0x4e4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d106      	bne.n	80059aa <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 800599c:	4b1f      	ldr	r3, [pc, #124]	; (8005a1c <extInt_Config+0x4dc>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	4a1e      	ldr	r2, [pc, #120]	; (8005a1c <extInt_Config+0x4dc>)
 80059a2:	f043 0310 	orr.w	r3, r3, #16
 80059a6:	60d3      	str	r3, [r2, #12]
		break;
 80059a8:	e3bb      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	4a1d      	ldr	r2, [pc, #116]	; (8005a28 <extInt_Config+0x4e8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d106      	bne.n	80059c4 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80059b6:	4b19      	ldr	r3, [pc, #100]	; (8005a1c <extInt_Config+0x4dc>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	4a18      	ldr	r2, [pc, #96]	; (8005a1c <extInt_Config+0x4dc>)
 80059bc:	f043 0320 	orr.w	r3, r3, #32
 80059c0:	60d3      	str	r3, [r2, #12]
		break;
 80059c2:	e3ae      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	4a18      	ldr	r2, [pc, #96]	; (8005a2c <extInt_Config+0x4ec>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d106      	bne.n	80059de <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80059d0:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <extInt_Config+0x4dc>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	4a11      	ldr	r2, [pc, #68]	; (8005a1c <extInt_Config+0x4dc>)
 80059d6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80059da:	60d3      	str	r3, [r2, #12]
		break;
 80059dc:	e3a1      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4a12      	ldr	r2, [pc, #72]	; (8005a30 <extInt_Config+0x4f0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d106      	bne.n	80059f8 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80059ea:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <extInt_Config+0x4dc>)
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	4a0b      	ldr	r2, [pc, #44]	; (8005a1c <extInt_Config+0x4dc>)
 80059f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059f4:	60d3      	str	r3, [r2, #12]
		break;
 80059f6:	e394      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	4a06      	ldr	r2, [pc, #24]	; (8005a18 <extInt_Config+0x4d8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d106      	bne.n	8005a12 <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <extInt_Config+0x4dc>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	4a04      	ldr	r2, [pc, #16]	; (8005a1c <extInt_Config+0x4dc>)
 8005a0a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005a0e:	60d3      	str	r3, [r2, #12]
		break;
 8005a10:	e387      	b.n	8006122 <extInt_Config+0xbe2>
			__NOP();
 8005a12:	bf00      	nop
		break;
 8005a14:	e385      	b.n	8006122 <extInt_Config+0xbe2>
 8005a16:	bf00      	nop
 8005a18:	40021c00 	.word	0x40021c00
 8005a1c:	40013800 	.word	0x40013800
 8005a20:	40020000 	.word	0x40020000
 8005a24:	40020400 	.word	0x40020400
 8005a28:	40020800 	.word	0x40020800
 8005a2c:	40020c00 	.word	0x40020c00
 8005a30:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 8005a34:	4b86      	ldr	r3, [pc, #536]	; (8005c50 <extInt_Config+0x710>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	4a85      	ldr	r2, [pc, #532]	; (8005c50 <extInt_Config+0x710>)
 8005a3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a3e:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	4a83      	ldr	r2, [pc, #524]	; (8005c54 <extInt_Config+0x714>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d104      	bne.n	8005a56 <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8005a4c:	4b80      	ldr	r3, [pc, #512]	; (8005c50 <extInt_Config+0x710>)
 8005a4e:	4a80      	ldr	r2, [pc, #512]	; (8005c50 <extInt_Config+0x710>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8005a54:	e365      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4a7e      	ldr	r2, [pc, #504]	; (8005c58 <extInt_Config+0x718>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d106      	bne.n	8005a70 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8005a62:	4b7b      	ldr	r3, [pc, #492]	; (8005c50 <extInt_Config+0x710>)
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	4a7a      	ldr	r2, [pc, #488]	; (8005c50 <extInt_Config+0x710>)
 8005a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6c:	60d3      	str	r3, [r2, #12]
		break;
 8005a6e:	e358      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	4a79      	ldr	r2, [pc, #484]	; (8005c5c <extInt_Config+0x71c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d106      	bne.n	8005a8a <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8005a7c:	4b74      	ldr	r3, [pc, #464]	; (8005c50 <extInt_Config+0x710>)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	4a73      	ldr	r2, [pc, #460]	; (8005c50 <extInt_Config+0x710>)
 8005a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a86:	60d3      	str	r3, [r2, #12]
		break;
 8005a88:	e34b      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4a73      	ldr	r2, [pc, #460]	; (8005c60 <extInt_Config+0x720>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d106      	bne.n	8005aa4 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8005a96:	4b6e      	ldr	r3, [pc, #440]	; (8005c50 <extInt_Config+0x710>)
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	4a6d      	ldr	r2, [pc, #436]	; (8005c50 <extInt_Config+0x710>)
 8005a9c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005aa0:	60d3      	str	r3, [r2, #12]
		break;
 8005aa2:	e33e      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	4a6e      	ldr	r2, [pc, #440]	; (8005c64 <extInt_Config+0x724>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d106      	bne.n	8005abe <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8005ab0:	4b67      	ldr	r3, [pc, #412]	; (8005c50 <extInt_Config+0x710>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4a66      	ldr	r2, [pc, #408]	; (8005c50 <extInt_Config+0x710>)
 8005ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005aba:	60d3      	str	r3, [r2, #12]
		break;
 8005abc:	e331      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	4a68      	ldr	r2, [pc, #416]	; (8005c68 <extInt_Config+0x728>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d106      	bne.n	8005ad8 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8005aca:	4b61      	ldr	r3, [pc, #388]	; (8005c50 <extInt_Config+0x710>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	4a60      	ldr	r2, [pc, #384]	; (8005c50 <extInt_Config+0x710>)
 8005ad0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ad4:	60d3      	str	r3, [r2, #12]
		break;
 8005ad6:	e324      	b.n	8006122 <extInt_Config+0xbe2>
			__NOP();
 8005ad8:	bf00      	nop
		break;
 8005ada:	e322      	b.n	8006122 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 8005adc:	4b5c      	ldr	r3, [pc, #368]	; (8005c50 <extInt_Config+0x710>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	4a5b      	ldr	r2, [pc, #364]	; (8005c50 <extInt_Config+0x710>)
 8005ae2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ae6:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	4a59      	ldr	r2, [pc, #356]	; (8005c54 <extInt_Config+0x714>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d104      	bne.n	8005afe <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8005af4:	4b56      	ldr	r3, [pc, #344]	; (8005c50 <extInt_Config+0x710>)
 8005af6:	4a56      	ldr	r2, [pc, #344]	; (8005c50 <extInt_Config+0x710>)
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8005afc:	e311      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	4a54      	ldr	r2, [pc, #336]	; (8005c58 <extInt_Config+0x718>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d106      	bne.n	8005b18 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8005b0a:	4b51      	ldr	r3, [pc, #324]	; (8005c50 <extInt_Config+0x710>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	4a50      	ldr	r2, [pc, #320]	; (8005c50 <extInt_Config+0x710>)
 8005b10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b14:	60d3      	str	r3, [r2, #12]
		break;
 8005b16:	e304      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	4a4f      	ldr	r2, [pc, #316]	; (8005c5c <extInt_Config+0x71c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d106      	bne.n	8005b32 <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8005b24:	4b4a      	ldr	r3, [pc, #296]	; (8005c50 <extInt_Config+0x710>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4a49      	ldr	r2, [pc, #292]	; (8005c50 <extInt_Config+0x710>)
 8005b2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b2e:	60d3      	str	r3, [r2, #12]
		break;
 8005b30:	e2f7      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	4a49      	ldr	r2, [pc, #292]	; (8005c60 <extInt_Config+0x720>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d106      	bne.n	8005b4c <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8005b3e:	4b44      	ldr	r3, [pc, #272]	; (8005c50 <extInt_Config+0x710>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	4a43      	ldr	r2, [pc, #268]	; (8005c50 <extInt_Config+0x710>)
 8005b44:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005b48:	60d3      	str	r3, [r2, #12]
		break;
 8005b4a:	e2ea      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	4a44      	ldr	r2, [pc, #272]	; (8005c64 <extInt_Config+0x724>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d106      	bne.n	8005b66 <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8005b58:	4b3d      	ldr	r3, [pc, #244]	; (8005c50 <extInt_Config+0x710>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4a3c      	ldr	r2, [pc, #240]	; (8005c50 <extInt_Config+0x710>)
 8005b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b62:	60d3      	str	r3, [r2, #12]
		break;
 8005b64:	e2dd      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	4a3e      	ldr	r2, [pc, #248]	; (8005c68 <extInt_Config+0x728>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d106      	bne.n	8005b80 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8005b72:	4b37      	ldr	r3, [pc, #220]	; (8005c50 <extInt_Config+0x710>)
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	4a36      	ldr	r2, [pc, #216]	; (8005c50 <extInt_Config+0x710>)
 8005b78:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005b7c:	60d3      	str	r3, [r2, #12]
		break;
 8005b7e:	e2d0      	b.n	8006122 <extInt_Config+0xbe2>
			__NOP();
 8005b80:	bf00      	nop
		break;
 8005b82:	e2ce      	b.n	8006122 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 8005b84:	4b32      	ldr	r3, [pc, #200]	; (8005c50 <extInt_Config+0x710>)
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	4a31      	ldr	r2, [pc, #196]	; (8005c50 <extInt_Config+0x710>)
 8005b8a:	f023 030f 	bic.w	r3, r3, #15
 8005b8e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	4a2f      	ldr	r2, [pc, #188]	; (8005c54 <extInt_Config+0x714>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d104      	bne.n	8005ba6 <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8005b9c:	4b2c      	ldr	r3, [pc, #176]	; (8005c50 <extInt_Config+0x710>)
 8005b9e:	4a2c      	ldr	r2, [pc, #176]	; (8005c50 <extInt_Config+0x710>)
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8005ba4:	e2bd      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	4a2a      	ldr	r2, [pc, #168]	; (8005c58 <extInt_Config+0x718>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d106      	bne.n	8005bc0 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8005bb2:	4b27      	ldr	r3, [pc, #156]	; (8005c50 <extInt_Config+0x710>)
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	4a26      	ldr	r2, [pc, #152]	; (8005c50 <extInt_Config+0x710>)
 8005bb8:	f043 0301 	orr.w	r3, r3, #1
 8005bbc:	6113      	str	r3, [r2, #16]
		break;
 8005bbe:	e2b0      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	4a25      	ldr	r2, [pc, #148]	; (8005c5c <extInt_Config+0x71c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d106      	bne.n	8005bda <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8005bcc:	4b20      	ldr	r3, [pc, #128]	; (8005c50 <extInt_Config+0x710>)
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	4a1f      	ldr	r2, [pc, #124]	; (8005c50 <extInt_Config+0x710>)
 8005bd2:	f043 0302 	orr.w	r3, r3, #2
 8005bd6:	6113      	str	r3, [r2, #16]
		break;
 8005bd8:	e2a3      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	4a1f      	ldr	r2, [pc, #124]	; (8005c60 <extInt_Config+0x720>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d106      	bne.n	8005bf4 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8005be6:	4b1a      	ldr	r3, [pc, #104]	; (8005c50 <extInt_Config+0x710>)
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	4a19      	ldr	r2, [pc, #100]	; (8005c50 <extInt_Config+0x710>)
 8005bec:	f043 0303 	orr.w	r3, r3, #3
 8005bf0:	6113      	str	r3, [r2, #16]
		break;
 8005bf2:	e296      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	4a1a      	ldr	r2, [pc, #104]	; (8005c64 <extInt_Config+0x724>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d106      	bne.n	8005c0e <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8005c00:	4b13      	ldr	r3, [pc, #76]	; (8005c50 <extInt_Config+0x710>)
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	4a12      	ldr	r2, [pc, #72]	; (8005c50 <extInt_Config+0x710>)
 8005c06:	f043 0304 	orr.w	r3, r3, #4
 8005c0a:	6113      	str	r3, [r2, #16]
		break;
 8005c0c:	e289      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	4a14      	ldr	r2, [pc, #80]	; (8005c68 <extInt_Config+0x728>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d106      	bne.n	8005c28 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8005c1a:	4b0d      	ldr	r3, [pc, #52]	; (8005c50 <extInt_Config+0x710>)
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	4a0c      	ldr	r2, [pc, #48]	; (8005c50 <extInt_Config+0x710>)
 8005c20:	f043 0307 	orr.w	r3, r3, #7
 8005c24:	6113      	str	r3, [r2, #16]
		break;
 8005c26:	e27c      	b.n	8006122 <extInt_Config+0xbe2>
			__NOP();
 8005c28:	bf00      	nop
		break;
 8005c2a:	e27a      	b.n	8006122 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8005c2c:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <extInt_Config+0x710>)
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	4a07      	ldr	r2, [pc, #28]	; (8005c50 <extInt_Config+0x710>)
 8005c32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c36:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	4a05      	ldr	r2, [pc, #20]	; (8005c54 <extInt_Config+0x714>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d113      	bne.n	8005c6c <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8005c44:	4b02      	ldr	r3, [pc, #8]	; (8005c50 <extInt_Config+0x710>)
 8005c46:	4a02      	ldr	r2, [pc, #8]	; (8005c50 <extInt_Config+0x710>)
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8005c4c:	e269      	b.n	8006122 <extInt_Config+0xbe2>
 8005c4e:	bf00      	nop
 8005c50:	40013800 	.word	0x40013800
 8005c54:	40020000 	.word	0x40020000
 8005c58:	40020400 	.word	0x40020400
 8005c5c:	40020800 	.word	0x40020800
 8005c60:	40020c00 	.word	0x40020c00
 8005c64:	40021000 	.word	0x40021000
 8005c68:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	4a83      	ldr	r2, [pc, #524]	; (8005e80 <extInt_Config+0x940>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d106      	bne.n	8005c86 <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8005c78:	4b82      	ldr	r3, [pc, #520]	; (8005e84 <extInt_Config+0x944>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	4a81      	ldr	r2, [pc, #516]	; (8005e84 <extInt_Config+0x944>)
 8005c7e:	f043 0310 	orr.w	r3, r3, #16
 8005c82:	6113      	str	r3, [r2, #16]
		break;
 8005c84:	e24d      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	4a7e      	ldr	r2, [pc, #504]	; (8005e88 <extInt_Config+0x948>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d106      	bne.n	8005ca0 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8005c92:	4b7c      	ldr	r3, [pc, #496]	; (8005e84 <extInt_Config+0x944>)
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	4a7b      	ldr	r2, [pc, #492]	; (8005e84 <extInt_Config+0x944>)
 8005c98:	f043 0320 	orr.w	r3, r3, #32
 8005c9c:	6113      	str	r3, [r2, #16]
		break;
 8005c9e:	e240      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	4a79      	ldr	r2, [pc, #484]	; (8005e8c <extInt_Config+0x94c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d106      	bne.n	8005cba <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8005cac:	4b75      	ldr	r3, [pc, #468]	; (8005e84 <extInt_Config+0x944>)
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	4a74      	ldr	r2, [pc, #464]	; (8005e84 <extInt_Config+0x944>)
 8005cb2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005cb6:	6113      	str	r3, [r2, #16]
		break;
 8005cb8:	e233      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	4a73      	ldr	r2, [pc, #460]	; (8005e90 <extInt_Config+0x950>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d106      	bne.n	8005cd4 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8005cc6:	4b6f      	ldr	r3, [pc, #444]	; (8005e84 <extInt_Config+0x944>)
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	4a6e      	ldr	r2, [pc, #440]	; (8005e84 <extInt_Config+0x944>)
 8005ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd0:	6113      	str	r3, [r2, #16]
		break;
 8005cd2:	e226      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	4a6e      	ldr	r2, [pc, #440]	; (8005e94 <extInt_Config+0x954>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d106      	bne.n	8005cee <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8005ce0:	4b68      	ldr	r3, [pc, #416]	; (8005e84 <extInt_Config+0x944>)
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	4a67      	ldr	r2, [pc, #412]	; (8005e84 <extInt_Config+0x944>)
 8005ce6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005cea:	6113      	str	r3, [r2, #16]
		break;
 8005cec:	e219      	b.n	8006122 <extInt_Config+0xbe2>
			__NOP();
 8005cee:	bf00      	nop
		break;
 8005cf0:	e217      	b.n	8006122 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 8005cf2:	4b64      	ldr	r3, [pc, #400]	; (8005e84 <extInt_Config+0x944>)
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	4a63      	ldr	r2, [pc, #396]	; (8005e84 <extInt_Config+0x944>)
 8005cf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005cfc:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	4a64      	ldr	r2, [pc, #400]	; (8005e98 <extInt_Config+0x958>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d104      	bne.n	8005d14 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8005d0a:	4b5e      	ldr	r3, [pc, #376]	; (8005e84 <extInt_Config+0x944>)
 8005d0c:	4a5d      	ldr	r2, [pc, #372]	; (8005e84 <extInt_Config+0x944>)
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8005d12:	e206      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	4a59      	ldr	r2, [pc, #356]	; (8005e80 <extInt_Config+0x940>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d106      	bne.n	8005d2e <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8005d20:	4b58      	ldr	r3, [pc, #352]	; (8005e84 <extInt_Config+0x944>)
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	4a57      	ldr	r2, [pc, #348]	; (8005e84 <extInt_Config+0x944>)
 8005d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d2a:	6113      	str	r3, [r2, #16]
		break;
 8005d2c:	e1f9      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4a54      	ldr	r2, [pc, #336]	; (8005e88 <extInt_Config+0x948>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d106      	bne.n	8005d48 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8005d3a:	4b52      	ldr	r3, [pc, #328]	; (8005e84 <extInt_Config+0x944>)
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	4a51      	ldr	r2, [pc, #324]	; (8005e84 <extInt_Config+0x944>)
 8005d40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d44:	6113      	str	r3, [r2, #16]
		break;
 8005d46:	e1ec      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	4a4f      	ldr	r2, [pc, #316]	; (8005e8c <extInt_Config+0x94c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d106      	bne.n	8005d62 <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8005d54:	4b4b      	ldr	r3, [pc, #300]	; (8005e84 <extInt_Config+0x944>)
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	4a4a      	ldr	r2, [pc, #296]	; (8005e84 <extInt_Config+0x944>)
 8005d5a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005d5e:	6113      	str	r3, [r2, #16]
		break;
 8005d60:	e1df      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	4a49      	ldr	r2, [pc, #292]	; (8005e90 <extInt_Config+0x950>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d106      	bne.n	8005d7c <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8005d6e:	4b45      	ldr	r3, [pc, #276]	; (8005e84 <extInt_Config+0x944>)
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	4a44      	ldr	r2, [pc, #272]	; (8005e84 <extInt_Config+0x944>)
 8005d74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d78:	6113      	str	r3, [r2, #16]
		break;
 8005d7a:	e1d2      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	4a44      	ldr	r2, [pc, #272]	; (8005e94 <extInt_Config+0x954>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d106      	bne.n	8005d96 <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8005d88:	4b3e      	ldr	r3, [pc, #248]	; (8005e84 <extInt_Config+0x944>)
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	4a3d      	ldr	r2, [pc, #244]	; (8005e84 <extInt_Config+0x944>)
 8005d8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d92:	6113      	str	r3, [r2, #16]
		break;
 8005d94:	e1c5      	b.n	8006122 <extInt_Config+0xbe2>
			__NOP();
 8005d96:	bf00      	nop
		break;
 8005d98:	e1c3      	b.n	8006122 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8005d9a:	4b3a      	ldr	r3, [pc, #232]	; (8005e84 <extInt_Config+0x944>)
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	4a39      	ldr	r2, [pc, #228]	; (8005e84 <extInt_Config+0x944>)
 8005da0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005da4:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	4a3a      	ldr	r2, [pc, #232]	; (8005e98 <extInt_Config+0x958>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d104      	bne.n	8005dbc <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8005db2:	4b34      	ldr	r3, [pc, #208]	; (8005e84 <extInt_Config+0x944>)
 8005db4:	4a33      	ldr	r2, [pc, #204]	; (8005e84 <extInt_Config+0x944>)
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8005dba:	e1b2      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	4a2f      	ldr	r2, [pc, #188]	; (8005e80 <extInt_Config+0x940>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d106      	bne.n	8005dd6 <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8005dc8:	4b2e      	ldr	r3, [pc, #184]	; (8005e84 <extInt_Config+0x944>)
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	4a2d      	ldr	r2, [pc, #180]	; (8005e84 <extInt_Config+0x944>)
 8005dce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dd2:	6113      	str	r3, [r2, #16]
		break;
 8005dd4:	e1a5      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <extInt_Config+0x948>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d106      	bne.n	8005df0 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8005de2:	4b28      	ldr	r3, [pc, #160]	; (8005e84 <extInt_Config+0x944>)
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	4a27      	ldr	r2, [pc, #156]	; (8005e84 <extInt_Config+0x944>)
 8005de8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005dec:	6113      	str	r3, [r2, #16]
		break;
 8005dee:	e198      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	4a25      	ldr	r2, [pc, #148]	; (8005e8c <extInt_Config+0x94c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d106      	bne.n	8005e0a <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8005dfc:	4b21      	ldr	r3, [pc, #132]	; (8005e84 <extInt_Config+0x944>)
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	4a20      	ldr	r2, [pc, #128]	; (8005e84 <extInt_Config+0x944>)
 8005e02:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005e06:	6113      	str	r3, [r2, #16]
		break;
 8005e08:	e18b      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <extInt_Config+0x950>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d106      	bne.n	8005e24 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8005e16:	4b1b      	ldr	r3, [pc, #108]	; (8005e84 <extInt_Config+0x944>)
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	4a1a      	ldr	r2, [pc, #104]	; (8005e84 <extInt_Config+0x944>)
 8005e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e20:	6113      	str	r3, [r2, #16]
		break;
 8005e22:	e17e      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	4a1a      	ldr	r2, [pc, #104]	; (8005e94 <extInt_Config+0x954>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d106      	bne.n	8005e3e <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8005e30:	4b14      	ldr	r3, [pc, #80]	; (8005e84 <extInt_Config+0x944>)
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <extInt_Config+0x944>)
 8005e36:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005e3a:	6113      	str	r3, [r2, #16]
		break;
 8005e3c:	e171      	b.n	8006122 <extInt_Config+0xbe2>
			__NOP();
 8005e3e:	bf00      	nop
		break;
 8005e40:	e16f      	b.n	8006122 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 8005e42:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <extInt_Config+0x944>)
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	4a0f      	ldr	r2, [pc, #60]	; (8005e84 <extInt_Config+0x944>)
 8005e48:	f023 030f 	bic.w	r3, r3, #15
 8005e4c:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	4a10      	ldr	r2, [pc, #64]	; (8005e98 <extInt_Config+0x958>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d104      	bne.n	8005e64 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8005e5a:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <extInt_Config+0x944>)
 8005e5c:	4a09      	ldr	r2, [pc, #36]	; (8005e84 <extInt_Config+0x944>)
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8005e62:	e15e      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	4a05      	ldr	r2, [pc, #20]	; (8005e80 <extInt_Config+0x940>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d115      	bne.n	8005e9c <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8005e70:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <extInt_Config+0x944>)
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	4a03      	ldr	r2, [pc, #12]	; (8005e84 <extInt_Config+0x944>)
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	6153      	str	r3, [r2, #20]
		break;
 8005e7c:	e151      	b.n	8006122 <extInt_Config+0xbe2>
 8005e7e:	bf00      	nop
 8005e80:	40020400 	.word	0x40020400
 8005e84:	40013800 	.word	0x40013800
 8005e88:	40020800 	.word	0x40020800
 8005e8c:	40020c00 	.word	0x40020c00
 8005e90:	40021000 	.word	0x40021000
 8005e94:	40021c00 	.word	0x40021c00
 8005e98:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	4a83      	ldr	r2, [pc, #524]	; (80060b0 <extInt_Config+0xb70>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d106      	bne.n	8005eb6 <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8005ea8:	4b82      	ldr	r3, [pc, #520]	; (80060b4 <extInt_Config+0xb74>)
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	4a81      	ldr	r2, [pc, #516]	; (80060b4 <extInt_Config+0xb74>)
 8005eae:	f043 0302 	orr.w	r3, r3, #2
 8005eb2:	6153      	str	r3, [r2, #20]
		break;
 8005eb4:	e135      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	4a7e      	ldr	r2, [pc, #504]	; (80060b8 <extInt_Config+0xb78>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d106      	bne.n	8005ed0 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8005ec2:	4b7c      	ldr	r3, [pc, #496]	; (80060b4 <extInt_Config+0xb74>)
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	4a7b      	ldr	r2, [pc, #492]	; (80060b4 <extInt_Config+0xb74>)
 8005ec8:	f043 0303 	orr.w	r3, r3, #3
 8005ecc:	6153      	str	r3, [r2, #20]
		break;
 8005ece:	e128      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	4a79      	ldr	r2, [pc, #484]	; (80060bc <extInt_Config+0xb7c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d106      	bne.n	8005eea <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8005edc:	4b75      	ldr	r3, [pc, #468]	; (80060b4 <extInt_Config+0xb74>)
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	4a74      	ldr	r2, [pc, #464]	; (80060b4 <extInt_Config+0xb74>)
 8005ee2:	f043 0304 	orr.w	r3, r3, #4
 8005ee6:	6153      	str	r3, [r2, #20]
		break;
 8005ee8:	e11b      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	4a73      	ldr	r2, [pc, #460]	; (80060c0 <extInt_Config+0xb80>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d106      	bne.n	8005f04 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8005ef6:	4b6f      	ldr	r3, [pc, #444]	; (80060b4 <extInt_Config+0xb74>)
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	4a6e      	ldr	r2, [pc, #440]	; (80060b4 <extInt_Config+0xb74>)
 8005efc:	f043 0307 	orr.w	r3, r3, #7
 8005f00:	6153      	str	r3, [r2, #20]
		break;
 8005f02:	e10e      	b.n	8006122 <extInt_Config+0xbe2>
			__NOP();
 8005f04:	bf00      	nop
		break;
 8005f06:	e10c      	b.n	8006122 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8005f08:	4b6a      	ldr	r3, [pc, #424]	; (80060b4 <extInt_Config+0xb74>)
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	4a69      	ldr	r2, [pc, #420]	; (80060b4 <extInt_Config+0xb74>)
 8005f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f12:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	4a6a      	ldr	r2, [pc, #424]	; (80060c4 <extInt_Config+0xb84>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d104      	bne.n	8005f2a <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8005f20:	4b64      	ldr	r3, [pc, #400]	; (80060b4 <extInt_Config+0xb74>)
 8005f22:	4a64      	ldr	r2, [pc, #400]	; (80060b4 <extInt_Config+0xb74>)
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8005f28:	e0fb      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	4a65      	ldr	r2, [pc, #404]	; (80060c8 <extInt_Config+0xb88>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d106      	bne.n	8005f44 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8005f36:	4b5f      	ldr	r3, [pc, #380]	; (80060b4 <extInt_Config+0xb74>)
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	4a5e      	ldr	r2, [pc, #376]	; (80060b4 <extInt_Config+0xb74>)
 8005f3c:	f043 0310 	orr.w	r3, r3, #16
 8005f40:	6153      	str	r3, [r2, #20]
		break;
 8005f42:	e0ee      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	4a59      	ldr	r2, [pc, #356]	; (80060b0 <extInt_Config+0xb70>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d106      	bne.n	8005f5e <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8005f50:	4b58      	ldr	r3, [pc, #352]	; (80060b4 <extInt_Config+0xb74>)
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	4a57      	ldr	r2, [pc, #348]	; (80060b4 <extInt_Config+0xb74>)
 8005f56:	f043 0320 	orr.w	r3, r3, #32
 8005f5a:	6153      	str	r3, [r2, #20]
		break;
 8005f5c:	e0e1      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	4a54      	ldr	r2, [pc, #336]	; (80060b8 <extInt_Config+0xb78>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d106      	bne.n	8005f78 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8005f6a:	4b52      	ldr	r3, [pc, #328]	; (80060b4 <extInt_Config+0xb74>)
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	4a51      	ldr	r2, [pc, #324]	; (80060b4 <extInt_Config+0xb74>)
 8005f70:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005f74:	6153      	str	r3, [r2, #20]
		break;
 8005f76:	e0d4      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	4a4f      	ldr	r2, [pc, #316]	; (80060bc <extInt_Config+0xb7c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d106      	bne.n	8005f92 <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8005f84:	4b4b      	ldr	r3, [pc, #300]	; (80060b4 <extInt_Config+0xb74>)
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	4a4a      	ldr	r2, [pc, #296]	; (80060b4 <extInt_Config+0xb74>)
 8005f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f8e:	6153      	str	r3, [r2, #20]
		break;
 8005f90:	e0c7      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	4a49      	ldr	r2, [pc, #292]	; (80060c0 <extInt_Config+0xb80>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d106      	bne.n	8005fac <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8005f9e:	4b45      	ldr	r3, [pc, #276]	; (80060b4 <extInt_Config+0xb74>)
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	4a44      	ldr	r2, [pc, #272]	; (80060b4 <extInt_Config+0xb74>)
 8005fa4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005fa8:	6153      	str	r3, [r2, #20]
		break;
 8005faa:	e0ba      	b.n	8006122 <extInt_Config+0xbe2>
			__NOP();
 8005fac:	bf00      	nop
		break;
 8005fae:	e0b8      	b.n	8006122 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8005fb0:	4b40      	ldr	r3, [pc, #256]	; (80060b4 <extInt_Config+0xb74>)
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	4a3f      	ldr	r2, [pc, #252]	; (80060b4 <extInt_Config+0xb74>)
 8005fb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005fba:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	4a40      	ldr	r2, [pc, #256]	; (80060c4 <extInt_Config+0xb84>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d104      	bne.n	8005fd2 <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8005fc8:	4b3a      	ldr	r3, [pc, #232]	; (80060b4 <extInt_Config+0xb74>)
 8005fca:	4a3a      	ldr	r2, [pc, #232]	; (80060b4 <extInt_Config+0xb74>)
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8005fd0:	e0a7      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	4a3b      	ldr	r2, [pc, #236]	; (80060c8 <extInt_Config+0xb88>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d106      	bne.n	8005fec <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8005fde:	4b35      	ldr	r3, [pc, #212]	; (80060b4 <extInt_Config+0xb74>)
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	4a34      	ldr	r2, [pc, #208]	; (80060b4 <extInt_Config+0xb74>)
 8005fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe8:	6153      	str	r3, [r2, #20]
		break;
 8005fea:	e09a      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	4a2f      	ldr	r2, [pc, #188]	; (80060b0 <extInt_Config+0xb70>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d106      	bne.n	8006006 <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8005ff8:	4b2e      	ldr	r3, [pc, #184]	; (80060b4 <extInt_Config+0xb74>)
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	4a2d      	ldr	r2, [pc, #180]	; (80060b4 <extInt_Config+0xb74>)
 8005ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006002:	6153      	str	r3, [r2, #20]
		break;
 8006004:	e08d      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	4a2a      	ldr	r2, [pc, #168]	; (80060b8 <extInt_Config+0xb78>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d106      	bne.n	8006020 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8006012:	4b28      	ldr	r3, [pc, #160]	; (80060b4 <extInt_Config+0xb74>)
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	4a27      	ldr	r2, [pc, #156]	; (80060b4 <extInt_Config+0xb74>)
 8006018:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800601c:	6153      	str	r3, [r2, #20]
		break;
 800601e:	e080      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	4a25      	ldr	r2, [pc, #148]	; (80060bc <extInt_Config+0xb7c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d106      	bne.n	800603a <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 800602c:	4b21      	ldr	r3, [pc, #132]	; (80060b4 <extInt_Config+0xb74>)
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	4a20      	ldr	r2, [pc, #128]	; (80060b4 <extInt_Config+0xb74>)
 8006032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006036:	6153      	str	r3, [r2, #20]
		break;
 8006038:	e073      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	4a1f      	ldr	r2, [pc, #124]	; (80060c0 <extInt_Config+0xb80>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d106      	bne.n	8006054 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8006046:	4b1b      	ldr	r3, [pc, #108]	; (80060b4 <extInt_Config+0xb74>)
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <extInt_Config+0xb74>)
 800604c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006050:	6153      	str	r3, [r2, #20]
		break;
 8006052:	e066      	b.n	8006122 <extInt_Config+0xbe2>
			__NOP();
 8006054:	bf00      	nop
		break;
 8006056:	e064      	b.n	8006122 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8006058:	4b16      	ldr	r3, [pc, #88]	; (80060b4 <extInt_Config+0xb74>)
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	4a15      	ldr	r2, [pc, #84]	; (80060b4 <extInt_Config+0xb74>)
 800605e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006062:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	4a16      	ldr	r2, [pc, #88]	; (80060c4 <extInt_Config+0xb84>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d104      	bne.n	800607a <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8006070:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <extInt_Config+0xb74>)
 8006072:	4a10      	ldr	r2, [pc, #64]	; (80060b4 <extInt_Config+0xb74>)
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8006078:	e053      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	4a11      	ldr	r2, [pc, #68]	; (80060c8 <extInt_Config+0xb88>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d106      	bne.n	8006094 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8006086:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <extInt_Config+0xb74>)
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	4a0a      	ldr	r2, [pc, #40]	; (80060b4 <extInt_Config+0xb74>)
 800608c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006090:	6153      	str	r3, [r2, #20]
		break;
 8006092:	e046      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	4a05      	ldr	r2, [pc, #20]	; (80060b0 <extInt_Config+0xb70>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d115      	bne.n	80060cc <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 80060a0:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <extInt_Config+0xb74>)
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	4a03      	ldr	r2, [pc, #12]	; (80060b4 <extInt_Config+0xb74>)
 80060a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80060aa:	6153      	str	r3, [r2, #20]
		break;
 80060ac:	e039      	b.n	8006122 <extInt_Config+0xbe2>
 80060ae:	bf00      	nop
 80060b0:	40020800 	.word	0x40020800
 80060b4:	40013800 	.word	0x40013800
 80060b8:	40020c00 	.word	0x40020c00
 80060bc:	40021000 	.word	0x40021000
 80060c0:	40021c00 	.word	0x40021c00
 80060c4:	40020000 	.word	0x40020000
 80060c8:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	4a9d      	ldr	r2, [pc, #628]	; (8006348 <extInt_Config+0xe08>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d106      	bne.n	80060e6 <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80060d8:	4b9c      	ldr	r3, [pc, #624]	; (800634c <extInt_Config+0xe0c>)
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	4a9b      	ldr	r2, [pc, #620]	; (800634c <extInt_Config+0xe0c>)
 80060de:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80060e2:	6153      	str	r3, [r2, #20]
		break;
 80060e4:	e01d      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	4a98      	ldr	r2, [pc, #608]	; (8006350 <extInt_Config+0xe10>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d106      	bne.n	8006100 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80060f2:	4b96      	ldr	r3, [pc, #600]	; (800634c <extInt_Config+0xe0c>)
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	4a95      	ldr	r2, [pc, #596]	; (800634c <extInt_Config+0xe0c>)
 80060f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060fc:	6153      	str	r3, [r2, #20]
		break;
 80060fe:	e010      	b.n	8006122 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	4a93      	ldr	r2, [pc, #588]	; (8006354 <extInt_Config+0xe14>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d106      	bne.n	800611a <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 800610c:	4b8f      	ldr	r3, [pc, #572]	; (800634c <extInt_Config+0xe0c>)
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	4a8e      	ldr	r2, [pc, #568]	; (800634c <extInt_Config+0xe0c>)
 8006112:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006116:	6153      	str	r3, [r2, #20]
		break;
 8006118:	e003      	b.n	8006122 <extInt_Config+0xbe2>
			__NOP();
 800611a:	bf00      	nop
		break;
 800611c:	e001      	b.n	8006122 <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 800611e:	bf00      	nop
		break;
 8006120:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	791b      	ldrb	r3, [r3, #4]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d126      	bne.n	8006178 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800612a:	4b8b      	ldr	r3, [pc, #556]	; (8006358 <extInt_Config+0xe18>)
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	7812      	ldrb	r2, [r2, #0]
 8006134:	4611      	mov	r1, r2
 8006136:	2201      	movs	r2, #1
 8006138:	408a      	lsls	r2, r1
 800613a:	43d2      	mvns	r2, r2
 800613c:	4611      	mov	r1, r2
 800613e:	4a86      	ldr	r2, [pc, #536]	; (8006358 <extInt_Config+0xe18>)
 8006140:	400b      	ands	r3, r1
 8006142:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006144:	4b84      	ldr	r3, [pc, #528]	; (8006358 <extInt_Config+0xe18>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	7812      	ldrb	r2, [r2, #0]
 800614e:	4611      	mov	r1, r2
 8006150:	2201      	movs	r2, #1
 8006152:	408a      	lsls	r2, r1
 8006154:	43d2      	mvns	r2, r2
 8006156:	4611      	mov	r1, r2
 8006158:	4a7f      	ldr	r2, [pc, #508]	; (8006358 <extInt_Config+0xe18>)
 800615a:	400b      	ands	r3, r1
 800615c:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800615e:	4b7e      	ldr	r3, [pc, #504]	; (8006358 <extInt_Config+0xe18>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	7812      	ldrb	r2, [r2, #0]
 8006168:	4611      	mov	r1, r2
 800616a:	2201      	movs	r2, #1
 800616c:	408a      	lsls	r2, r1
 800616e:	4611      	mov	r1, r2
 8006170:	4a79      	ldr	r2, [pc, #484]	; (8006358 <extInt_Config+0xe18>)
 8006172:	430b      	orrs	r3, r1
 8006174:	6093      	str	r3, [r2, #8]
 8006176:	e05c      	b.n	8006232 <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	791b      	ldrb	r3, [r3, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d126      	bne.n	80061ce <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006180:	4b75      	ldr	r3, [pc, #468]	; (8006358 <extInt_Config+0xe18>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6812      	ldr	r2, [r2, #0]
 8006188:	7812      	ldrb	r2, [r2, #0]
 800618a:	4611      	mov	r1, r2
 800618c:	2201      	movs	r2, #1
 800618e:	408a      	lsls	r2, r1
 8006190:	43d2      	mvns	r2, r2
 8006192:	4611      	mov	r1, r2
 8006194:	4a70      	ldr	r2, [pc, #448]	; (8006358 <extInt_Config+0xe18>)
 8006196:	400b      	ands	r3, r1
 8006198:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800619a:	4b6f      	ldr	r3, [pc, #444]	; (8006358 <extInt_Config+0xe18>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6812      	ldr	r2, [r2, #0]
 80061a2:	7812      	ldrb	r2, [r2, #0]
 80061a4:	4611      	mov	r1, r2
 80061a6:	2201      	movs	r2, #1
 80061a8:	408a      	lsls	r2, r1
 80061aa:	43d2      	mvns	r2, r2
 80061ac:	4611      	mov	r1, r2
 80061ae:	4a6a      	ldr	r2, [pc, #424]	; (8006358 <extInt_Config+0xe18>)
 80061b0:	400b      	ands	r3, r1
 80061b2:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80061b4:	4b68      	ldr	r3, [pc, #416]	; (8006358 <extInt_Config+0xe18>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	7812      	ldrb	r2, [r2, #0]
 80061be:	4611      	mov	r1, r2
 80061c0:	2201      	movs	r2, #1
 80061c2:	408a      	lsls	r2, r1
 80061c4:	4611      	mov	r1, r2
 80061c6:	4a64      	ldr	r2, [pc, #400]	; (8006358 <extInt_Config+0xe18>)
 80061c8:	430b      	orrs	r3, r1
 80061ca:	60d3      	str	r3, [r2, #12]
 80061cc:	e031      	b.n	8006232 <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80061ce:	4b62      	ldr	r3, [pc, #392]	; (8006358 <extInt_Config+0xe18>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	7812      	ldrb	r2, [r2, #0]
 80061d8:	4611      	mov	r1, r2
 80061da:	2201      	movs	r2, #1
 80061dc:	408a      	lsls	r2, r1
 80061de:	43d2      	mvns	r2, r2
 80061e0:	4611      	mov	r1, r2
 80061e2:	4a5d      	ldr	r2, [pc, #372]	; (8006358 <extInt_Config+0xe18>)
 80061e4:	400b      	ands	r3, r1
 80061e6:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80061e8:	4b5b      	ldr	r3, [pc, #364]	; (8006358 <extInt_Config+0xe18>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6812      	ldr	r2, [r2, #0]
 80061f0:	7812      	ldrb	r2, [r2, #0]
 80061f2:	4611      	mov	r1, r2
 80061f4:	2201      	movs	r2, #1
 80061f6:	408a      	lsls	r2, r1
 80061f8:	43d2      	mvns	r2, r2
 80061fa:	4611      	mov	r1, r2
 80061fc:	4a56      	ldr	r2, [pc, #344]	; (8006358 <extInt_Config+0xe18>)
 80061fe:	400b      	ands	r3, r1
 8006200:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006202:	4b55      	ldr	r3, [pc, #340]	; (8006358 <extInt_Config+0xe18>)
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	7812      	ldrb	r2, [r2, #0]
 800620c:	4611      	mov	r1, r2
 800620e:	2201      	movs	r2, #1
 8006210:	408a      	lsls	r2, r1
 8006212:	4611      	mov	r1, r2
 8006214:	4a50      	ldr	r2, [pc, #320]	; (8006358 <extInt_Config+0xe18>)
 8006216:	430b      	orrs	r3, r1
 8006218:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800621a:	4b4f      	ldr	r3, [pc, #316]	; (8006358 <extInt_Config+0xe18>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	7812      	ldrb	r2, [r2, #0]
 8006224:	4611      	mov	r1, r2
 8006226:	2201      	movs	r2, #1
 8006228:	408a      	lsls	r2, r1
 800622a:	4611      	mov	r1, r2
 800622c:	4a4a      	ldr	r2, [pc, #296]	; (8006358 <extInt_Config+0xe18>)
 800622e:	430b      	orrs	r3, r1
 8006230:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006232:	4b49      	ldr	r3, [pc, #292]	; (8006358 <extInt_Config+0xe18>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6812      	ldr	r2, [r2, #0]
 800623a:	7812      	ldrb	r2, [r2, #0]
 800623c:	4611      	mov	r1, r2
 800623e:	2201      	movs	r2, #1
 8006240:	408a      	lsls	r2, r1
 8006242:	43d2      	mvns	r2, r2
 8006244:	4611      	mov	r1, r2
 8006246:	4a44      	ldr	r2, [pc, #272]	; (8006358 <extInt_Config+0xe18>)
 8006248:	400b      	ands	r3, r1
 800624a:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800624c:	4b42      	ldr	r3, [pc, #264]	; (8006358 <extInt_Config+0xe18>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6812      	ldr	r2, [r2, #0]
 8006254:	7812      	ldrb	r2, [r2, #0]
 8006256:	4611      	mov	r1, r2
 8006258:	2201      	movs	r2, #1
 800625a:	408a      	lsls	r2, r1
 800625c:	4611      	mov	r1, r2
 800625e:	4a3e      	ldr	r2, [pc, #248]	; (8006358 <extInt_Config+0xe18>)
 8006260:	430b      	orrs	r3, r1
 8006262:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006264:	b672      	cpsid	i
}
 8006266:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b0f      	cmp	r3, #15
 8006270:	d862      	bhi.n	8006338 <extInt_Config+0xdf8>
 8006272:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <extInt_Config+0xd38>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	080062b9 	.word	0x080062b9
 800627c:	080062c1 	.word	0x080062c1
 8006280:	080062c9 	.word	0x080062c9
 8006284:	080062d1 	.word	0x080062d1
 8006288:	080062d9 	.word	0x080062d9
 800628c:	080062e1 	.word	0x080062e1
 8006290:	080062e9 	.word	0x080062e9
 8006294:	080062f1 	.word	0x080062f1
 8006298:	080062f9 	.word	0x080062f9
 800629c:	08006301 	.word	0x08006301
 80062a0:	08006309 	.word	0x08006309
 80062a4:	08006311 	.word	0x08006311
 80062a8:	08006319 	.word	0x08006319
 80062ac:	08006321 	.word	0x08006321
 80062b0:	08006329 	.word	0x08006329
 80062b4:	08006331 	.word	0x08006331
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 80062b8:	2006      	movs	r0, #6
 80062ba:	f7ff f923 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 80062be:	e03c      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 80062c0:	2007      	movs	r0, #7
 80062c2:	f7ff f91f 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 80062c6:	e038      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 80062c8:	2008      	movs	r0, #8
 80062ca:	f7ff f91b 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 80062ce:	e034      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 80062d0:	2009      	movs	r0, #9
 80062d2:	f7ff f917 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 80062d6:	e030      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 80062d8:	200a      	movs	r0, #10
 80062da:	f7ff f913 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 80062de:	e02c      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80062e0:	2017      	movs	r0, #23
 80062e2:	f7ff f90f 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 80062e6:	e028      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80062e8:	2017      	movs	r0, #23
 80062ea:	f7ff f90b 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 80062ee:	e024      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80062f0:	2017      	movs	r0, #23
 80062f2:	f7ff f907 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 80062f6:	e020      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80062f8:	2017      	movs	r0, #23
 80062fa:	f7ff f903 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 80062fe:	e01c      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006300:	2017      	movs	r0, #23
 8006302:	f7ff f8ff 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 8006306:	e018      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006308:	2028      	movs	r0, #40	; 0x28
 800630a:	f7ff f8fb 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 800630e:	e014      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006310:	2028      	movs	r0, #40	; 0x28
 8006312:	f7ff f8f7 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 8006316:	e010      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006318:	2028      	movs	r0, #40	; 0x28
 800631a:	f7ff f8f3 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 800631e:	e00c      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006320:	2028      	movs	r0, #40	; 0x28
 8006322:	f7ff f8ef 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 8006326:	e008      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006328:	2028      	movs	r0, #40	; 0x28
 800632a:	f7ff f8eb 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 800632e:	e004      	b.n	800633a <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006330:	2028      	movs	r0, #40	; 0x28
 8006332:	f7ff f8e7 	bl	8005504 <__NVIC_EnableIRQ>
		break;
 8006336:	e000      	b.n	800633a <extInt_Config+0xdfa>
	}

	default: {
		break;
 8006338:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800633a:	b662      	cpsie	i
}
 800633c:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 800633e:	bf00      	nop
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40020c00 	.word	0x40020c00
 800634c:	40013800 	.word	0x40013800
 8006350:	40021000 	.word	0x40021000
 8006354:	40021c00 	.word	0x40021c00
 8006358:	40013c00 	.word	0x40013c00

0800635c <callback_extInt0>:
	__enable_irq();
}


//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
	__NOP();
 8006360:	bf00      	nop
}
 8006362:	bf00      	nop
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
	__NOP();
 8006370:	bf00      	nop
}
 8006372:	bf00      	nop
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
	__NOP();
 8006380:	bf00      	nop
}
 8006382:	bf00      	nop
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
	__NOP();
 8006390:	bf00      	nop
}
 8006392:	bf00      	nop
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
	__NOP();
 80063a0:	bf00      	nop
}
 80063a2:	bf00      	nop
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
	__NOP();
 80063b0:	bf00      	nop
}
 80063b2:	bf00      	nop
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
	__NOP();
 80063c0:	bf00      	nop
}
 80063c2:	bf00      	nop
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
	__NOP();
 80063d0:	bf00      	nop
}
 80063d2:	bf00      	nop
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
	__NOP();
 80063e0:	bf00      	nop
}
 80063e2:	bf00      	nop
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
	__NOP();
 80063f0:	bf00      	nop
}
 80063f2:	bf00      	nop
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
	__NOP();
 8006400:	bf00      	nop
}
 8006402:	bf00      	nop
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
	__NOP();
 8006410:	bf00      	nop
}
 8006412:	bf00      	nop
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
	__NOP();
 8006420:	bf00      	nop
}
 8006422:	bf00      	nop
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
	__NOP();
 8006430:	bf00      	nop
}
 8006432:	bf00      	nop
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8006440:	4b08      	ldr	r3, [pc, #32]	; (8006464 <EXTI0_IRQHandler+0x28>)
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 800644c:	4b05      	ldr	r3, [pc, #20]	; (8006464 <EXTI0_IRQHandler+0x28>)
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	4a04      	ldr	r2, [pc, #16]	; (8006464 <EXTI0_IRQHandler+0x28>)
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8006458:	f7ff ff80 	bl	800635c <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 800645c:	e000      	b.n	8006460 <EXTI0_IRQHandler+0x24>
		__NOP();
 800645e:	bf00      	nop
}
 8006460:	bf00      	nop
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40013c00 	.word	0x40013c00

08006468 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 800646c:	4b08      	ldr	r3, [pc, #32]	; (8006490 <EXTI1_IRQHandler+0x28>)
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d008      	beq.n	800648a <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8006478:	4b05      	ldr	r3, [pc, #20]	; (8006490 <EXTI1_IRQHandler+0x28>)
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	4a04      	ldr	r2, [pc, #16]	; (8006490 <EXTI1_IRQHandler+0x28>)
 800647e:	f043 0302 	orr.w	r3, r3, #2
 8006482:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8006484:	f7fd fcd2 	bl	8003e2c <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8006488:	e000      	b.n	800648c <EXTI1_IRQHandler+0x24>
		__NOP();
 800648a:	bf00      	nop
}
 800648c:	bf00      	nop
 800648e:	bd80      	pop	{r7, pc}
 8006490:	40013c00 	.word	0x40013c00

08006494 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8006498:	4b08      	ldr	r3, [pc, #32]	; (80064bc <EXTI2_IRQHandler+0x28>)
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <EXTI2_IRQHandler+0x28>)
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	4a04      	ldr	r2, [pc, #16]	; (80064bc <EXTI2_IRQHandler+0x28>)
 80064aa:	f043 0304 	orr.w	r3, r3, #4
 80064ae:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 80064b0:	f7ff ff5c 	bl	800636c <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 80064b4:	e000      	b.n	80064b8 <EXTI2_IRQHandler+0x24>
		__NOP();
 80064b6:	bf00      	nop
}
 80064b8:	bf00      	nop
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40013c00 	.word	0x40013c00

080064c0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 80064c4:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <EXTI3_IRQHandler+0x28>)
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 80064d0:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <EXTI3_IRQHandler+0x28>)
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	4a04      	ldr	r2, [pc, #16]	; (80064e8 <EXTI3_IRQHandler+0x28>)
 80064d6:	f043 0308 	orr.w	r3, r3, #8
 80064da:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 80064dc:	f7fd fcb6 	bl	8003e4c <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 80064e0:	e000      	b.n	80064e4 <EXTI3_IRQHandler+0x24>
		__NOP();
 80064e2:	bf00      	nop
}
 80064e4:	bf00      	nop
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	40013c00 	.word	0x40013c00

080064ec <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 80064f0:	4b08      	ldr	r3, [pc, #32]	; (8006514 <EXTI4_IRQHandler+0x28>)
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d008      	beq.n	800650e <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 80064fc:	4b05      	ldr	r3, [pc, #20]	; (8006514 <EXTI4_IRQHandler+0x28>)
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	4a04      	ldr	r2, [pc, #16]	; (8006514 <EXTI4_IRQHandler+0x28>)
 8006502:	f043 0310 	orr.w	r3, r3, #16
 8006506:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8006508:	f7ff ff38 	bl	800637c <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 800650c:	e000      	b.n	8006510 <EXTI4_IRQHandler+0x24>
		__NOP();
 800650e:	bf00      	nop
}
 8006510:	bf00      	nop
 8006512:	bd80      	pop	{r7, pc}
 8006514:	40013c00 	.word	0x40013c00

08006518 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 800651c:	4b26      	ldr	r3, [pc, #152]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b00      	cmp	r3, #0
 8006526:	d008      	beq.n	800653a <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8006528:	4b23      	ldr	r3, [pc, #140]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	4a22      	ldr	r2, [pc, #136]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 800652e:	f043 0320 	orr.w	r3, r3, #32
 8006532:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 8006534:	f7ff ff2a 	bl	800638c <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8006538:	e03c      	b.n	80065b4 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 800653a:	4b1f      	ldr	r3, [pc, #124]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d008      	beq.n	8006558 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 8006546:	4b1c      	ldr	r3, [pc, #112]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 800654c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006550:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 8006552:	f7ff ff23 	bl	800639c <callback_extInt6>
}
 8006556:	e02d      	b.n	80065b4 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8006558:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006560:	2b00      	cmp	r3, #0
 8006562:	d008      	beq.n	8006576 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 8006564:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 800656a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656e:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8006570:	f7ff ff1c 	bl	80063ac <callback_extInt7>
}
 8006574:	e01e      	b.n	80065b4 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 8006576:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657e:	2b00      	cmp	r3, #0
 8006580:	d008      	beq.n	8006594 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 8006582:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	4a0c      	ldr	r2, [pc, #48]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 8006588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800658c:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 800658e:	f7ff ff15 	bl	80063bc <callback_extInt8>
}
 8006592:	e00f      	b.n	80065b4 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 8006594:	4b08      	ldr	r3, [pc, #32]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800659c:	2b00      	cmp	r3, #0
 800659e:	d008      	beq.n	80065b2 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 80065a0:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	4a04      	ldr	r2, [pc, #16]	; (80065b8 <EXTI9_5_IRQHandler+0xa0>)
 80065a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065aa:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 80065ac:	f7ff ff0e 	bl	80063cc <callback_extInt9>
}
 80065b0:	e000      	b.n	80065b4 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 80065b2:	bf00      	nop
}
 80065b4:	bf00      	nop
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40013c00 	.word	0x40013c00

080065bc <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 80065c0:	4b2e      	ldr	r3, [pc, #184]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d008      	beq.n	80065de <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 80065cc:	4b2b      	ldr	r3, [pc, #172]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	4a2a      	ldr	r2, [pc, #168]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 80065d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065d6:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 80065d8:	f7ff ff00 	bl	80063dc <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 80065dc:	e04b      	b.n	8006676 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 80065de:	4b27      	ldr	r3, [pc, #156]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d008      	beq.n	80065fc <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 80065ea:	4b24      	ldr	r3, [pc, #144]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	4a23      	ldr	r2, [pc, #140]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 80065f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065f4:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 80065f6:	f7ff fef9 	bl	80063ec <callback_extInt11>
}
 80065fa:	e03c      	b.n	8006676 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 80065fc:	4b1f      	ldr	r3, [pc, #124]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8006608:	4b1c      	ldr	r3, [pc, #112]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	4a1b      	ldr	r2, [pc, #108]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 800660e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006612:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 8006614:	f7ff fef2 	bl	80063fc <callback_extInt12>
}
 8006618:	e02d      	b.n	8006676 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 800661a:	4b18      	ldr	r3, [pc, #96]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d008      	beq.n	8006638 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 8006626:	4b15      	ldr	r3, [pc, #84]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	4a14      	ldr	r2, [pc, #80]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 800662c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006630:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 8006632:	f7ff feeb 	bl	800640c <callback_extInt13>
}
 8006636:	e01e      	b.n	8006676 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8006638:	4b10      	ldr	r3, [pc, #64]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d008      	beq.n	8006656 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8006644:	4b0d      	ldr	r3, [pc, #52]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	4a0c      	ldr	r2, [pc, #48]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 800664a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800664e:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8006650:	f7ff fee4 	bl	800641c <callback_extInt14>
}
 8006654:	e00f      	b.n	8006676 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 8006656:	4b09      	ldr	r3, [pc, #36]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d008      	beq.n	8006674 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 8006662:	4b06      	ldr	r3, [pc, #24]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	4a05      	ldr	r2, [pc, #20]	; (800667c <EXTI15_10_IRQHandler+0xc0>)
 8006668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800666c:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 800666e:	f7ff fedd 	bl	800642c <callback_extInt15>
}
 8006672:	e000      	b.n	8006676 <EXTI15_10_IRQHandler+0xba>
		__NOP();
 8006674:	bf00      	nop
}
 8006676:	bf00      	nop
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	40013c00 	.word	0x40013c00

08006680 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	4608      	mov	r0, r1
 800668a:	4611      	mov	r1, r2
 800668c:	461a      	mov	r2, r3
 800668e:	4603      	mov	r3, r0
 8006690:	70fb      	strb	r3, [r7, #3]
 8006692:	460b      	mov	r3, r1
 8006694:	70bb      	strb	r3, [r7, #2]
 8006696:	4613      	mov	r3, r2
 8006698:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	78fa      	ldrb	r2, [r7, #3]
 800669e:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	78ba      	ldrb	r2, [r7, #2]
 80066a4:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	787a      	ldrb	r2, [r7, #1]
 80066aa:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	7c3a      	ldrb	r2, [r7, #16]
 80066b0:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	7d3a      	ldrb	r2, [r7, #20]
 80066b6:	715a      	strb	r2, [r3, #5]
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	4a88      	ldr	r2, [pc, #544]	; (80068fc <GPIO_Config+0x238>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d106      	bne.n	80066ec <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 80066de:	4b88      	ldr	r3, [pc, #544]	; (8006900 <GPIO_Config+0x23c>)
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	4a87      	ldr	r2, [pc, #540]	; (8006900 <GPIO_Config+0x23c>)
 80066e4:	f043 0301 	orr.w	r3, r3, #1
 80066e8:	6313      	str	r3, [r2, #48]	; 0x30
 80066ea:	e03a      	b.n	8006762 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	4a84      	ldr	r2, [pc, #528]	; (8006904 <GPIO_Config+0x240>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d106      	bne.n	8006704 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 80066f6:	4b82      	ldr	r3, [pc, #520]	; (8006900 <GPIO_Config+0x23c>)
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	4a81      	ldr	r2, [pc, #516]	; (8006900 <GPIO_Config+0x23c>)
 80066fc:	f043 0302 	orr.w	r3, r3, #2
 8006700:	6313      	str	r3, [r2, #48]	; 0x30
 8006702:	e02e      	b.n	8006762 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	4a7f      	ldr	r2, [pc, #508]	; (8006908 <GPIO_Config+0x244>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d106      	bne.n	800671c <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 800670e:	4b7c      	ldr	r3, [pc, #496]	; (8006900 <GPIO_Config+0x23c>)
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	4a7b      	ldr	r2, [pc, #492]	; (8006900 <GPIO_Config+0x23c>)
 8006714:	f043 0304 	orr.w	r3, r3, #4
 8006718:	6313      	str	r3, [r2, #48]	; 0x30
 800671a:	e022      	b.n	8006762 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	4a7a      	ldr	r2, [pc, #488]	; (800690c <GPIO_Config+0x248>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d106      	bne.n	8006734 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8006726:	4b76      	ldr	r3, [pc, #472]	; (8006900 <GPIO_Config+0x23c>)
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	4a75      	ldr	r2, [pc, #468]	; (8006900 <GPIO_Config+0x23c>)
 800672c:	f043 0308 	orr.w	r3, r3, #8
 8006730:	6313      	str	r3, [r2, #48]	; 0x30
 8006732:	e016      	b.n	8006762 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	4a75      	ldr	r2, [pc, #468]	; (8006910 <GPIO_Config+0x24c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d106      	bne.n	800674c <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 800673e:	4b70      	ldr	r3, [pc, #448]	; (8006900 <GPIO_Config+0x23c>)
 8006740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006742:	4a6f      	ldr	r2, [pc, #444]	; (8006900 <GPIO_Config+0x23c>)
 8006744:	f043 0310 	orr.w	r3, r3, #16
 8006748:	6313      	str	r3, [r2, #48]	; 0x30
 800674a:	e00a      	b.n	8006762 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	4a70      	ldr	r2, [pc, #448]	; (8006914 <GPIO_Config+0x250>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d105      	bne.n	8006762 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8006756:	4b6a      	ldr	r3, [pc, #424]	; (8006900 <GPIO_Config+0x23c>)
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	4a69      	ldr	r2, [pc, #420]	; (8006900 <GPIO_Config+0x23c>)
 800675c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006760:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	461a      	mov	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	2103      	movs	r1, #3
 8006782:	fa01 f303 	lsl.w	r3, r1, r3
 8006786:	43db      	mvns	r3, r3
 8006788:	4619      	mov	r1, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	400a      	ands	r2, r1
 8006790:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	6819      	ldr	r1, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	430a      	orrs	r2, r1
 80067a0:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	789b      	ldrb	r3, [r3, #2]
 80067a6:	461a      	mov	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	4619      	mov	r1, r3
 80067be:	2301      	movs	r3, #1
 80067c0:	408b      	lsls	r3, r1
 80067c2:	43db      	mvns	r3, r3
 80067c4:	4619      	mov	r1, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	400a      	ands	r2, r1
 80067cc:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	6859      	ldr	r1, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	430a      	orrs	r2, r1
 80067dc:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	78db      	ldrb	r3, [r3, #3]
 80067e2:	461a      	mov	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	fa02 f303 	lsl.w	r3, r2, r3
 80067ee:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	2103      	movs	r1, #3
 80067fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006802:	43db      	mvns	r3, r3
 8006804:	4619      	mov	r1, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	400a      	ands	r2, r1
 800680c:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	6899      	ldr	r1, [r3, #8]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	430a      	orrs	r2, r1
 800681c:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	791b      	ldrb	r3, [r3, #4]
 8006822:	461a      	mov	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	fa02 f303 	lsl.w	r3, r2, r3
 800682e:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	2103      	movs	r1, #3
 800683e:	fa01 f303 	lsl.w	r3, r1, r3
 8006842:	43db      	mvns	r3, r3
 8006844:	4619      	mov	r1, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	400a      	ands	r2, r1
 800684c:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	68d9      	ldr	r1, [r3, #12]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	430a      	orrs	r2, r1
 800685c:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	785b      	ldrb	r3, [r3, #1]
 8006862:	2b02      	cmp	r3, #2
 8006864:	d143      	bne.n	80068ee <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b07      	cmp	r3, #7
 800686c:	d81f      	bhi.n	80068ae <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	6a1a      	ldr	r2, [r3, #32]
 800687c:	210f      	movs	r1, #15
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	fa01 f303 	lsl.w	r3, r1, r3
 8006884:	43db      	mvns	r3, r3
 8006886:	4619      	mov	r1, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	400a      	ands	r2, r1
 800688e:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	6a1a      	ldr	r2, [r3, #32]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	795b      	ldrb	r3, [r3, #5]
 800689a:	4619      	mov	r1, r3
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	fa01 f303 	lsl.w	r3, r1, r3
 80068a2:	4619      	mov	r1, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 80068ac:	e01f      	b.n	80068ee <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	3b08      	subs	r3, #8
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068be:	210f      	movs	r1, #15
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	fa01 f303 	lsl.w	r3, r1, r3
 80068c6:	43db      	mvns	r3, r3
 80068c8:	4619      	mov	r1, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	400a      	ands	r2, r1
 80068d0:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	795b      	ldrb	r3, [r3, #5]
 80068dc:	4619      	mov	r1, r3
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	fa01 f303 	lsl.w	r3, r1, r3
 80068e4:	4619      	mov	r1, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80068ee:	bf00      	nop
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	40020000 	.word	0x40020000
 8006900:	40023800 	.word	0x40023800
 8006904:	40020400 	.word	0x40020400
 8006908:	40020800 	.word	0x40020800
 800690c:	40020c00 	.word	0x40020c00
 8006910:	40021000 	.word	0x40021000
 8006914:	40021c00 	.word	0x40021c00

08006918 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d10d      	bne.n	8006946 <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	699a      	ldr	r2, [r3, #24]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	4619      	mov	r1, r3
 8006936:	2301      	movs	r3, #1
 8006938:	408b      	lsls	r3, r1
 800693a:	4619      	mov	r1, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	430a      	orrs	r2, r1
 8006942:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 8006944:	e00d      	b.n	8006962 <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	699a      	ldr	r2, [r3, #24]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	3310      	adds	r3, #16
 8006952:	2101      	movs	r1, #1
 8006954:	fa01 f303 	lsl.w	r3, r1, r3
 8006958:	4619      	mov	r1, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	430a      	orrs	r2, r1
 8006960:	619a      	str	r2, [r3, #24]
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	695a      	ldr	r2, [r3, #20]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	4619      	mov	r1, r3
 8006982:	2301      	movs	r3, #1
 8006984:	408b      	lsls	r3, r1
 8006986:	4619      	mov	r1, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	404a      	eors	r2, r1
 800698e:	615a      	str	r2, [r3, #20]
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <i2c_Config>:
 * Recordar de configurar los pines GPIOx por medio de las funciones alternativas,
 * Ademas de configurar dichos pines como open_drain
 */

void i2c_Config(I2C_Handler_t *ptrHandlerI2C)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	uint8_t clockAPB1 = getClockAPB1();     //Variable que guarda la velocidad de reloj entregada al bus APB1
 80069a4:	f000 fa60 	bl	8006e68 <getClockAPB1>
 80069a8:	4603      	mov	r3, r0
 80069aa:	73fb      	strb	r3, [r7, #15]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	if(ptrHandlerI2C->prtI2Cx == I2C1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a60      	ldr	r2, [pc, #384]	; (8006b34 <i2c_Config+0x198>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d106      	bne.n	80069c4 <i2c_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80069b6:	4b60      	ldr	r3, [pc, #384]	; (8006b38 <i2c_Config+0x19c>)
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	4a5f      	ldr	r2, [pc, #380]	; (8006b38 <i2c_Config+0x19c>)
 80069bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069c0:	6413      	str	r3, [r2, #64]	; 0x40
 80069c2:	e016      	b.n	80069f2 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C2)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a5c      	ldr	r2, [pc, #368]	; (8006b3c <i2c_Config+0x1a0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d106      	bne.n	80069dc <i2c_Config+0x40>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 80069ce:	4b5a      	ldr	r3, [pc, #360]	; (8006b38 <i2c_Config+0x19c>)
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	4a59      	ldr	r2, [pc, #356]	; (8006b38 <i2c_Config+0x19c>)
 80069d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069d8:	6413      	str	r3, [r2, #64]	; 0x40
 80069da:	e00a      	b.n	80069f2 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C3)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a57      	ldr	r2, [pc, #348]	; (8006b40 <i2c_Config+0x1a4>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d105      	bne.n	80069f2 <i2c_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 80069e6:	4b54      	ldr	r3, [pc, #336]	; (8006b38 <i2c_Config+0x19c>)
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	4a53      	ldr	r2, [pc, #332]	; (8006b38 <i2c_Config+0x19c>)
 80069ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069f0:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//---------------------------------2) Reiniciamos el periferico------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_SWRST;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a00:	601a      	str	r2, [r3, #0]
	__NOP();
 8006a02:	bf00      	nop
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_SWRST;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a12:	601a      	str	r2, [r3, #0]

	//-----------------------------------3) Valor del reloj principal------------------------------------------
	//Registro: CR2

	ptrHandlerI2C->prtI2Cx->CR2 &= ~(0b111111<<I2C_CR2_FREQ_Pos);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006a22:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->prtI2Cx->CR2 |= (clockAPB1<<I2C_CR2_FREQ_Pos);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6859      	ldr	r1, [r3, #4]
 8006a2a:	7bfa      	ldrb	r2, [r7, #15]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	605a      	str	r2, [r3, #4]
	//-------------------------------------4) Configuracion del I2C------------------------------------------
	//Registro: CCR
	//Registro: TRISE

	//Variables que almacenan el respectivo valor a cargar en los registros CRR y Trise
	uint16_t valueCRR = 0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	81bb      	strh	r3, [r7, #12]
	uint8_t valueTrise = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	72fb      	strb	r3, [r7, #11]

	//definimos inicialmente los registro en 0
	ptrHandlerI2C->prtI2Cx->CCR = 0;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2200      	movs	r2, #0
 8006a42:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->prtI2Cx->TRISE = 0;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	621a      	str	r2, [r3, #32]

	//Configuramos el I2C deacuerdo al modo selsecionado
	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	795b      	ldrb	r3, [r3, #5]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d121      	bne.n	8006a98 <i2c_Config+0xfc>
	{
		//Seleccionamos el modo estandar
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	69da      	ldr	r2, [r3, #28]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a62:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (5000*clockAPB1)/1000;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	461a      	mov	r2, r3
 8006a6a:	0092      	lsls	r2, r2, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69d9      	ldr	r1, [r3, #28]
 8006a76:	89ba      	ldrh	r2, [r7, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((1000*clockAPB1)/1000)+1;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	3301      	adds	r3, #1
 8006a84:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6a19      	ldr	r1, [r3, #32]
 8006a8c:	7afa      	ldrb	r2, [r7, #11]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	621a      	str	r2, [r3, #32]
 8006a96:	e039      	b.n	8006b0c <i2c_Config+0x170>
	}
	else
	{
		//Seleccionamos el modo Fast
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69da      	ldr	r2, [r3, #28]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006aa6:	61da      	str	r2, [r3, #28]
		ptrHandlerI2C->prtI2Cx->CCR |= I2C_CCR_FS;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69da      	ldr	r2, [r3, #28]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ab6:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (2500*clockAPB1)/3000;
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006abe:	fb02 f303 	mul.w	r3, r2, r3
 8006ac2:	4a20      	ldr	r2, [pc, #128]	; (8006b44 <i2c_Config+0x1a8>)
 8006ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8006ac8:	1192      	asrs	r2, r2, #6
 8006aca:	17db      	asrs	r3, r3, #31
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69d9      	ldr	r1, [r3, #28]
 8006ad6:	89ba      	ldrh	r2, [r7, #12]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((300*clockAPB1)/1000)+1;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
 8006ae2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006ae6:	fb02 f303 	mul.w	r3, r2, r3
 8006aea:	4a17      	ldr	r2, [pc, #92]	; (8006b48 <i2c_Config+0x1ac>)
 8006aec:	fb82 1203 	smull	r1, r2, r2, r3
 8006af0:	1192      	asrs	r2, r2, #6
 8006af2:	17db      	asrs	r3, r3, #31
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	3301      	adds	r3, #1
 8006afa:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6a19      	ldr	r1, [r3, #32]
 8006b02:	7afa      	ldrb	r2, [r7, #11]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	621a      	str	r2, [r3, #32]
	}

	//-----------------------------------5) Activamos el modulo I2C------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_PE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0201 	bic.w	r2, r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_PE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]
}
 8006b2c:	bf00      	nop
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40005400 	.word	0x40005400
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	40005800 	.word	0x40005800
 8006b40:	40005c00 	.word	0x40005c00
 8006b44:	057619f1 	.word	0x057619f1
 8006b48:	10624dd3 	.word	0x10624dd3

08006b4c <i2c_StartTrasaction>:

//----------------------------------------Funciones para la Transaccion----------------------------------------
//Funcion para empezar la Transaccion
void i2c_StartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
	/*verificamos que la linea no esta ocupada
	 * bit "busy" en I2C
	 */
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8006b54:	e000      	b.n	8006b58 <i2c_StartTrasaction+0xc>
	{
		__NOP();
 8006b56:	bf00      	nop
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f7      	bne.n	8006b56 <i2c_StartTrasaction+0xa>
	}
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b74:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8006b76:	e000      	b.n	8006b7a <i2c_StartTrasaction+0x2e>
	{
		__NOP();
 8006b78:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d0f7      	beq.n	8006b78 <i2c_StartTrasaction+0x2c>
	}
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <i2c_ReStartTrasaction>:

//Generar de nuevo una señal para empazar la Transaccion
void i2c_ReStartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bac:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8006bae:	e000      	b.n	8006bb2 <i2c_ReStartTrasaction+0x1c>
	{
		__NOP();
 8006bb0:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0f7      	beq.n	8006bb0 <i2c_ReStartTrasaction+0x1a>
	}
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <i2c_SendSlaveAddressRW>:

//Funcion para enviar la direcion de Slave ademas de definir la lectura o escritura del Sclave
void i2c_SendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	70fb      	strb	r3, [r7, #3]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	70bb      	strb	r3, [r7, #2]
	//Definimos una variable auxiliar
	uint8_t auxByte = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	//Cargamos la direccion del Sclave, ademas cargamos el bit de lectura o escritura
	ptrHandlerI2C->prtI2Cx->DR = (slaveAddress<<1) | readOrWrite;
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	005a      	lsls	r2, r3, #1
 8006be6:	78bb      	ldrb	r3, [r7, #2]
 8006be8:	431a      	orrs	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "ADDR" del evento "Address" se levante
	//Se limpia la bandera "ADDR" leyendo SR1->leyendo en SR2
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8006bf0:	e000      	b.n	8006bf4 <i2c_SendSlaveAddressRW+0x26>
	{
		__NOP();
 8006bf2:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0f7      	beq.n	8006bf2 <i2c_SendSlaveAddressRW+0x24>
	}
	//Se limpia la bandera "ADDR"
	auxByte = ptrHandlerI2C->prtI2Cx->SR1;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->prtI2Cx->SR2;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	73fb      	strb	r3, [r7, #15]
}
 8006c12:	bf00      	nop
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <i2c_SendMemoryAddress>:

//Enviamos la direccion de memoria que deseamos leer o escribir
void i2c_SendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	460b      	mov	r3, r1
 8006c28:	70fb      	strb	r3, [r7, #3]
	//Enviamos la direccion de memoria que desamos leer
	ptrHandlerI2C->prtI2Cx->DR = memAddr;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	78fa      	ldrb	r2, [r7, #3]
 8006c30:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "TXE" del evento "Data1" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 8006c32:	e000      	b.n	8006c36 <i2c_SendMemoryAddress+0x18>
	{
		__NOP();
 8006c34:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f7      	beq.n	8006c34 <i2c_SendMemoryAddress+0x16>
	}
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <i2c_ReadDataByte>:
	}
}

//Lectura de datos
uint8_t i2c_ReadDataByte(I2C_Handler_t *ptrHandlerI2C)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
	//Esperamos a que la bandera "RxNE" del evento "Recepcion" se levante
	//Se limpia la bandera "RxNE" leyendo el registro DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8006c5a:	e000      	b.n	8006c5e <i2c_ReadDataByte+0xc>
	{
		__NOP();
 8006c5c:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f7      	beq.n	8006c5c <i2c_ReadDataByte+0xa>
	}
	//guardamos los datos recibimos
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->prtI2Cx->DR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C ;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	799b      	ldrb	r3, [r3, #6]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <i2c_SendNoAck>:

//Funcion para activar la indicaicon de NoACK(indicacion para el Sclave de terminar la transmision de datos)
void i2c_SendNoAck(I2C_Handler_t *ptrHandlerI2C)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
	//Esribimos cero en el bit Ack del registro CR1
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_ACK;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c9e:	601a      	str	r2, [r3, #0]

}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <i2c_StopTrasaction>:
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_ACK;
}

//Funcion para generar el Stop bit
void i2c_StopTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_STOP;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc2:	601a      	str	r2, [r3, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <i2c_ReadSingleRegister>:

//------------------------------------Funciones para la comunicacion por I2C----------------------------------------

uint8_t i2c_ReadSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
	//0. Creacion de una variable auxiliara para recibir el dato leido
	uint8_t auxRead = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	73fb      	strb	r3, [r7, #15]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff ff33 	bl	8006b4c <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	791b      	ldrb	r3, [r3, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff ff6d 	bl	8006bce <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos leer
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff ff90 	bl	8006c1e <i2c_SendMemoryAddress>
	//4. Creamos una condicion de re start
	i2c_ReStartTrasaction(ptrHandlerI2C);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff ff49 	bl	8006b96 <i2c_ReStartTrasaction>
	//5. Enviamos la direccion del Sclavo e indicamos que se desea leer el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	791b      	ldrb	r3, [r3, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff ff5e 	bl	8006bce <i2c_SendSlaveAddressRW>
	//6. Leemos el dato que envia el Sclavo
	auxRead = i2c_ReadDataByte(ptrHandlerI2C);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff ff9d 	bl	8006c52 <i2c_ReadDataByte>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]
	//7. Generamso la condicio de NoAck
	i2c_SendNoAck(ptrHandlerI2C);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7ff ffb3 	bl	8006c88 <i2c_SendNoAck>
	//8. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff ffc2 	bl	8006cac <i2c_StopTrasaction>

	return auxRead;
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8006d3e:	4a39      	ldr	r2, [pc, #228]	; (8006e24 <configPLL+0xf0>)
 8006d40:	79fb      	ldrb	r3, [r7, #7]
 8006d42:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	2b31      	cmp	r3, #49	; 0x31
 8006d48:	d804      	bhi.n	8006d54 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8006d4a:	4b37      	ldr	r3, [pc, #220]	; (8006e28 <configPLL+0xf4>)
 8006d4c:	4a36      	ldr	r2, [pc, #216]	; (8006e28 <configPLL+0xf4>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	6093      	str	r3, [r2, #8]
 8006d52:	e005      	b.n	8006d60 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8006d54:	4b34      	ldr	r3, [pc, #208]	; (8006e28 <configPLL+0xf4>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	4a33      	ldr	r2, [pc, #204]	; (8006e28 <configPLL+0xf4>)
 8006d5a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8006d5e:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8006d60:	4b31      	ldr	r3, [pc, #196]	; (8006e28 <configPLL+0xf4>)
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	4a30      	ldr	r2, [pc, #192]	; (8006e28 <configPLL+0xf4>)
 8006d66:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006d6a:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8006d6c:	4b2e      	ldr	r3, [pc, #184]	; (8006e28 <configPLL+0xf4>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	4a2d      	ldr	r2, [pc, #180]	; (8006e28 <configPLL+0xf4>)
 8006d72:	f043 0312 	orr.w	r3, r3, #18
 8006d76:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8006d78:	4b2b      	ldr	r3, [pc, #172]	; (8006e28 <configPLL+0xf4>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	79fa      	ldrb	r2, [r7, #7]
 8006d7e:	0092      	lsls	r2, r2, #2
 8006d80:	3a0e      	subs	r2, #14
 8006d82:	0192      	lsls	r2, r2, #6
 8006d84:	4611      	mov	r1, r2
 8006d86:	4a28      	ldr	r2, [pc, #160]	; (8006e28 <configPLL+0xf4>)
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8006d8c:	4b26      	ldr	r3, [pc, #152]	; (8006e28 <configPLL+0xf4>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4a25      	ldr	r2, [pc, #148]	; (8006e28 <configPLL+0xf4>)
 8006d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d96:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8006d98:	4b23      	ldr	r3, [pc, #140]	; (8006e28 <configPLL+0xf4>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a22      	ldr	r2, [pc, #136]	; (8006e28 <configPLL+0xf4>)
 8006d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006da2:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8006da4:	e000      	b.n	8006da8 <configPLL+0x74>
	{
		__NOP();
 8006da6:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8006da8:	4b1f      	ldr	r3, [pc, #124]	; (8006e28 <configPLL+0xf4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0f8      	beq.n	8006da6 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8006db4:	79fb      	ldrb	r3, [r7, #7]
 8006db6:	2b5a      	cmp	r3, #90	; 0x5a
 8006db8:	d909      	bls.n	8006dce <configPLL+0x9a>
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	2b64      	cmp	r3, #100	; 0x64
 8006dbe:	d806      	bhi.n	8006dce <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8006dc0:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <configPLL+0xf8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a19      	ldr	r2, [pc, #100]	; (8006e2c <configPLL+0xf8>)
 8006dc6:	f043 0303 	orr.w	r3, r3, #3
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	e01d      	b.n	8006e0a <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	2b40      	cmp	r3, #64	; 0x40
 8006dd2:	d909      	bls.n	8006de8 <configPLL+0xb4>
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
 8006dd6:	2b5a      	cmp	r3, #90	; 0x5a
 8006dd8:	d806      	bhi.n	8006de8 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8006dda:	4b14      	ldr	r3, [pc, #80]	; (8006e2c <configPLL+0xf8>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a13      	ldr	r2, [pc, #76]	; (8006e2c <configPLL+0xf8>)
 8006de0:	f043 0302 	orr.w	r3, r3, #2
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	e010      	b.n	8006e0a <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	2b1e      	cmp	r3, #30
 8006dec:	d909      	bls.n	8006e02 <configPLL+0xce>
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	2b40      	cmp	r3, #64	; 0x40
 8006df2:	d806      	bhi.n	8006e02 <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8006df4:	4b0d      	ldr	r3, [pc, #52]	; (8006e2c <configPLL+0xf8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a0c      	ldr	r2, [pc, #48]	; (8006e2c <configPLL+0xf8>)
 8006dfa:	f043 0301 	orr.w	r3, r3, #1
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	e003      	b.n	8006e0a <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8006e02:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <configPLL+0xf8>)
 8006e04:	4a09      	ldr	r2, [pc, #36]	; (8006e2c <configPLL+0xf8>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 8006e0a:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <configPLL+0xf4>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	4a06      	ldr	r2, [pc, #24]	; (8006e28 <configPLL+0xf4>)
 8006e10:	f043 0302 	orr.w	r3, r3, #2
 8006e14:	6093      	str	r3, [r2, #8]

}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20009498 	.word	0x20009498
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	40023c00 	.word	0x40023c00

08006e30 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 8006e3a:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <getConfigPLL+0x30>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d103      	bne.n	8006e4e <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8006e46:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <getConfigPLL+0x34>)
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	71fb      	strb	r3, [r7, #7]
 8006e4c:	e001      	b.n	8006e52 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8006e4e:	2310      	movs	r3, #16
 8006e50:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8006e52:	79fb      	ldrb	r3, [r7, #7]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	40023800 	.word	0x40023800
 8006e64:	20009498 	.word	0x20009498

08006e68 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8006e6e:	f7ff ffdf 	bl	8006e30 <getConfigPLL>
 8006e72:	4603      	mov	r3, r0
 8006e74:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8006e76:	2300      	movs	r3, #0
 8006e78:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8006e7a:	79bb      	ldrb	r3, [r7, #6]
 8006e7c:	2b31      	cmp	r3, #49	; 0x31
 8006e7e:	d802      	bhi.n	8006e86 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8006e80:	79bb      	ldrb	r3, [r7, #6]
 8006e82:	71fb      	strb	r3, [r7, #7]
 8006e84:	e002      	b.n	8006e8c <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8006e86:	79bb      	ldrb	r3, [r7, #6]
 8006e88:	089b      	lsrs	r3, r3, #2
 8006e8a:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 8006ea2:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <configMCO2+0x34>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	4a09      	ldr	r2, [pc, #36]	; (8006ecc <configMCO2+0x34>)
 8006ea8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006eac:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 8006eae:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <configMCO2+0x34>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	79fa      	ldrb	r2, [r7, #7]
 8006eb4:	0792      	lsls	r2, r2, #30
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	4a04      	ldr	r2, [pc, #16]	; (8006ecc <configMCO2+0x34>)
 8006eba:	430b      	orrs	r3, r1
 8006ebc:	6093      	str	r3, [r2, #8]
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	40023800 	.word	0x40023800

08006ed0 <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d84b      	bhi.n	8006f7a <configMCO2PRE+0xaa>
 8006ee2:	a201      	add	r2, pc, #4	; (adr r2, 8006ee8 <configMCO2PRE+0x18>)
 8006ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee8:	08006efd 	.word	0x08006efd
 8006eec:	08006f13 	.word	0x08006f13
 8006ef0:	08006f2d 	.word	0x08006f2d
 8006ef4:	08006f47 	.word	0x08006f47
 8006ef8:	08006f61 	.word	0x08006f61
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8006efc:	4b23      	ldr	r3, [pc, #140]	; (8006f8c <configMCO2PRE+0xbc>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	4a22      	ldr	r2, [pc, #136]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f02:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8006f06:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 8006f08:	4b20      	ldr	r3, [pc, #128]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f0a:	4a20      	ldr	r2, [pc, #128]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	6093      	str	r3, [r2, #8]
			break;
 8006f10:	e035      	b.n	8006f7e <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8006f12:	4b1e      	ldr	r3, [pc, #120]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	4a1d      	ldr	r2, [pc, #116]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f18:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8006f1c:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 8006f1e:	4b1b      	ldr	r3, [pc, #108]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	4a1a      	ldr	r2, [pc, #104]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f28:	6093      	str	r3, [r2, #8]
			break;
 8006f2a:	e028      	b.n	8006f7e <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8006f2c:	4b17      	ldr	r3, [pc, #92]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	4a16      	ldr	r2, [pc, #88]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f32:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8006f36:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 8006f38:	4b14      	ldr	r3, [pc, #80]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	4a13      	ldr	r2, [pc, #76]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f3e:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 8006f42:	6093      	str	r3, [r2, #8]
			break;
 8006f44:	e01b      	b.n	8006f7e <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8006f46:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	4a10      	ldr	r2, [pc, #64]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f4c:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8006f50:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 8006f52:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	4a0d      	ldr	r2, [pc, #52]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f58:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8006f5c:	6093      	str	r3, [r2, #8]
			break;
 8006f5e:	e00e      	b.n	8006f7e <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8006f60:	4b0a      	ldr	r3, [pc, #40]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	4a09      	ldr	r2, [pc, #36]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f66:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8006f6a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 8006f6c:	4b07      	ldr	r3, [pc, #28]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	4a06      	ldr	r2, [pc, #24]	; (8006f8c <configMCO2PRE+0xbc>)
 8006f72:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8006f76:	6093      	str	r3, [r2, #8]
			break;
 8006f78:	e001      	b.n	8006f7e <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 8006f7a:	bf00      	nop
			break;
 8006f7c:	bf00      	nop
		}
	}

}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40023800 	.word	0x40023800

08006f90 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa0:	d106      	bne.n	8006fb0 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8006fa2:	4b81      	ldr	r3, [pc, #516]	; (80071a8 <pwm_Config+0x218>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	4a80      	ldr	r2, [pc, #512]	; (80071a8 <pwm_Config+0x218>)
 8006fa8:	f043 0301 	orr.w	r3, r3, #1
 8006fac:	6413      	str	r3, [r2, #64]	; 0x40
 8006fae:	e024      	b.n	8006ffa <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	4a7d      	ldr	r2, [pc, #500]	; (80071ac <pwm_Config+0x21c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d106      	bne.n	8006fc8 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8006fba:	4b7b      	ldr	r3, [pc, #492]	; (80071a8 <pwm_Config+0x218>)
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	4a7a      	ldr	r2, [pc, #488]	; (80071a8 <pwm_Config+0x218>)
 8006fc0:	f043 0302 	orr.w	r3, r3, #2
 8006fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fc6:	e018      	b.n	8006ffa <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	4a78      	ldr	r2, [pc, #480]	; (80071b0 <pwm_Config+0x220>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d106      	bne.n	8006fe0 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8006fd2:	4b75      	ldr	r3, [pc, #468]	; (80071a8 <pwm_Config+0x218>)
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	4a74      	ldr	r2, [pc, #464]	; (80071a8 <pwm_Config+0x218>)
 8006fd8:	f043 0304 	orr.w	r3, r3, #4
 8006fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8006fde:	e00c      	b.n	8006ffa <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	4a73      	ldr	r2, [pc, #460]	; (80071b4 <pwm_Config+0x224>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d106      	bne.n	8006ff8 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8006fea:	4b6f      	ldr	r3, [pc, #444]	; (80071a8 <pwm_Config+0x218>)
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	4a6e      	ldr	r2, [pc, #440]	; (80071a8 <pwm_Config+0x218>)
 8006ff0:	f043 0308 	orr.w	r3, r3, #8
 8006ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ff6:	e000      	b.n	8006ffa <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8006ff8:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa4c 	bl	8007498 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b03      	cmp	r3, #3
 8007006:	f200 8118 	bhi.w	800723a <pwm_Config+0x2aa>
 800700a:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <pwm_Config+0x80>)
 800700c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007010:	08007021 	.word	0x08007021
 8007014:	080070a3 	.word	0x080070a3
 8007018:	08007125 	.word	0x08007125
 800701c:	080071b9 	.word	0x080071b9
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	699a      	ldr	r2, [r3, #24]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f022 0203 	bic.w	r2, r2, #3
 800702e:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	699a      	ldr	r2, [r3, #24]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800703e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800704e:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	699a      	ldr	r2, [r3, #24]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f022 0208 	bic.w	r2, r2, #8
 800705e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	699a      	ldr	r2, [r3, #24]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f042 0208 	orr.w	r2, r2, #8
 800706e:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f022 0204 	bic.w	r2, r2, #4
 800707e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	699a      	ldr	r2, [r3, #24]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f042 0204 	orr.w	r2, r2, #4
 800708e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	699a      	ldr	r2, [r3, #24]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800709e:	619a      	str	r2, [r3, #24]

		break;
 80070a0:	e0cc      	b.n	800723c <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	699a      	ldr	r2, [r3, #24]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f022 0203 	bic.w	r2, r2, #3
 80070b0:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	699a      	ldr	r2, [r3, #24]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80070c0:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	699a      	ldr	r2, [r3, #24]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80070d0:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	699a      	ldr	r2, [r3, #24]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070e0:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	699a      	ldr	r2, [r3, #24]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070f0:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	699a      	ldr	r2, [r3, #24]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007100:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	699a      	ldr	r2, [r3, #24]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007110:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	699a      	ldr	r2, [r3, #24]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007120:	619a      	str	r2, [r3, #24]

		break;
 8007122:	e08b      	b.n	800723c <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	69da      	ldr	r2, [r3, #28]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f022 0203 	bic.w	r2, r2, #3
 8007132:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	69da      	ldr	r2, [r3, #28]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007142:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	69da      	ldr	r2, [r3, #28]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007152:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	69da      	ldr	r2, [r3, #28]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f022 0208 	bic.w	r2, r2, #8
 8007162:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	69da      	ldr	r2, [r3, #28]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f042 0208 	orr.w	r2, r2, #8
 8007172:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	69da      	ldr	r2, [r3, #28]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f022 0204 	bic.w	r2, r2, #4
 8007182:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	69da      	ldr	r2, [r3, #28]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f042 0204 	orr.w	r2, r2, #4
 8007192:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	69da      	ldr	r2, [r3, #28]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071a2:	61da      	str	r2, [r3, #28]

		break;
 80071a4:	e04a      	b.n	800723c <pwm_Config+0x2ac>
 80071a6:	bf00      	nop
 80071a8:	40023800 	.word	0x40023800
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40000800 	.word	0x40000800
 80071b4:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	69da      	ldr	r2, [r3, #28]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80071c6:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	69da      	ldr	r2, [r3, #28]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80071d6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	69da      	ldr	r2, [r3, #28]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80071e6:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	69da      	ldr	r2, [r3, #28]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071f6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	69da      	ldr	r2, [r3, #28]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007206:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	69da      	ldr	r2, [r3, #28]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007216:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	69da      	ldr	r2, [r3, #28]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007226:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	69da      	ldr	r2, [r3, #28]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007236:	61da      	str	r2, [r3, #28]

		break;
 8007238:	e000      	b.n	800723c <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 800723a:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	791b      	ldrb	r3, [r3, #4]
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f896 	bl	8007374 <statusPolarityPWM>

}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b03      	cmp	r3, #3
 8007262:	d87f      	bhi.n	8007364 <statusInOutPWM+0x114>
 8007264:	a201      	add	r2, pc, #4	; (adr r2, 800726c <statusInOutPWM+0x1c>)
 8007266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726a:	bf00      	nop
 800726c:	0800727d 	.word	0x0800727d
 8007270:	080072b7 	.word	0x080072b7
 8007274:	080072f1 	.word	0x080072f1
 8007278:	0800732b 	.word	0x0800732b
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d110      	bne.n	80072a4 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	6a1a      	ldr	r2, [r3, #32]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f022 0201 	bic.w	r2, r2, #1
 8007290:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	6a1a      	ldr	r2, [r3, #32]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f042 0201 	orr.w	r2, r2, #1
 80072a0:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 80072a2:	e060      	b.n	8007366 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	6a1a      	ldr	r2, [r3, #32]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f022 0201 	bic.w	r2, r2, #1
 80072b2:	621a      	str	r2, [r3, #32]
		break;
 80072b4:	e057      	b.n	8007366 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 80072b6:	78fb      	ldrb	r3, [r7, #3]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d110      	bne.n	80072de <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	6a1a      	ldr	r2, [r3, #32]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f022 0210 	bic.w	r2, r2, #16
 80072ca:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	6a1a      	ldr	r2, [r3, #32]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f042 0210 	orr.w	r2, r2, #16
 80072da:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 80072dc:	e043      	b.n	8007366 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	6a1a      	ldr	r2, [r3, #32]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f022 0210 	bic.w	r2, r2, #16
 80072ec:	621a      	str	r2, [r3, #32]
		break;
 80072ee:	e03a      	b.n	8007366 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d110      	bne.n	8007318 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007304:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	6a1a      	ldr	r2, [r3, #32]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007314:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 8007316:	e026      	b.n	8007366 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	6a1a      	ldr	r2, [r3, #32]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007326:	621a      	str	r2, [r3, #32]
		break;
 8007328:	e01d      	b.n	8007366 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 800732a:	78fb      	ldrb	r3, [r7, #3]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d110      	bne.n	8007352 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	6a1a      	ldr	r2, [r3, #32]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800733e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	6a1a      	ldr	r2, [r3, #32]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800734e:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8007350:	e009      	b.n	8007366 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	6a1a      	ldr	r2, [r3, #32]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007360:	621a      	str	r2, [r3, #32]
		break;
 8007362:	e000      	b.n	8007366 <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 8007364:	bf00      	nop
	}
	}
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop

08007374 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	2b03      	cmp	r3, #3
 8007386:	d87f      	bhi.n	8007488 <statusPolarityPWM+0x114>
 8007388:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <statusPolarityPWM+0x1c>)
 800738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738e:	bf00      	nop
 8007390:	080073a1 	.word	0x080073a1
 8007394:	080073db 	.word	0x080073db
 8007398:	08007415 	.word	0x08007415
 800739c:	0800744f 	.word	0x0800744f
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d110      	bne.n	80073c8 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	6a1a      	ldr	r2, [r3, #32]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f022 0202 	bic.w	r2, r2, #2
 80073b4:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	6a1a      	ldr	r2, [r3, #32]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f042 0202 	orr.w	r2, r2, #2
 80073c4:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 80073c6:	e060      	b.n	800748a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	6a1a      	ldr	r2, [r3, #32]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f022 0202 	bic.w	r2, r2, #2
 80073d6:	621a      	str	r2, [r3, #32]
		break;
 80073d8:	e057      	b.n	800748a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d110      	bne.n	8007402 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	6a1a      	ldr	r2, [r3, #32]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f022 0220 	bic.w	r2, r2, #32
 80073ee:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	6a1a      	ldr	r2, [r3, #32]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f042 0220 	orr.w	r2, r2, #32
 80073fe:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8007400:	e043      	b.n	800748a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	6a1a      	ldr	r2, [r3, #32]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f022 0220 	bic.w	r2, r2, #32
 8007410:	621a      	str	r2, [r3, #32]
		break;
 8007412:	e03a      	b.n	800748a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d110      	bne.n	800743c <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	6a1a      	ldr	r2, [r3, #32]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007428:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	6a1a      	ldr	r2, [r3, #32]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007438:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 800743a:	e026      	b.n	800748a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	6a1a      	ldr	r2, [r3, #32]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800744a:	621a      	str	r2, [r3, #32]
		break;
 800744c:	e01d      	b.n	800748a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 800744e:	78fb      	ldrb	r3, [r7, #3]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d110      	bne.n	8007476 <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	6a1a      	ldr	r2, [r3, #32]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007462:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	6a1a      	ldr	r2, [r3, #32]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007472:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 8007474:	e009      	b.n	800748a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	6a1a      	ldr	r2, [r3, #32]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007484:	621a      	str	r2, [r3, #32]
		break;
 8007486:	e000      	b.n	800748a <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 8007488:	bf00      	nop
	}
	}

}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop

08007498 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d823      	bhi.n	80074f0 <setDuttyCycle+0x58>
 80074a8:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <setDuttyCycle+0x18>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	080074c1 	.word	0x080074c1
 80074b4:	080074cd 	.word	0x080074cd
 80074b8:	080074d9 	.word	0x080074d9
 80074bc:	080074e5 	.word	0x080074e5
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	885a      	ldrh	r2, [r3, #2]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80074ca:	e012      	b.n	80074f2 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	885a      	ldrh	r2, [r3, #2]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80074d6:	e00c      	b.n	80074f2 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	885a      	ldrh	r2, [r3, #2]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80074e2:	e006      	b.n	80074f2 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	885a      	ldrh	r2, [r3, #2]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80074ee:	e000      	b.n	80074f2 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 80074f0:	bf00      	nop
	}
	}

}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop

08007500 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	4a0d      	ldr	r2, [pc, #52]	; (8007548 <updateDuttyCyclePercentageFloat+0x48>)
 8007514:	fba2 2303 	umull	r2, r3, r2, r3
 8007518:	095b      	lsrs	r3, r3, #5
 800751a:	b29b      	uxth	r3, r3
 800751c:	ee07 3a90 	vmov	s15, r3
 8007520:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007524:	edd7 7a00 	vldr	s15, [r7]
 8007528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007530:	ee17 3a90 	vmov	r3, s15
 8007534:	b29a      	uxth	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff ffac 	bl	8007498 <setDuttyCycle>
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	51eb851f 	.word	0x51eb851f

0800754c <__NVIC_EnableIRQ>:
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	4603      	mov	r3, r0
 8007554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800755a:	2b00      	cmp	r3, #0
 800755c:	db0b      	blt.n	8007576 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	f003 021f 	and.w	r2, r3, #31
 8007564:	4907      	ldr	r1, [pc, #28]	; (8007584 <__NVIC_EnableIRQ+0x38>)
 8007566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	2001      	movs	r0, #1
 800756e:	fa00 f202 	lsl.w	r2, r0, r2
 8007572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	e000e100 	.word	0xe000e100

08007588 <config_SysTick_ms>:
uint64_t ticks_start = 0;
uint64_t ticks_counting = 0;

//Funcion para la configurar del Systick
void config_SysTick_ms(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
	//Reiniciamos el valor de la variable que cuenta el tiempo
	ticks = 0;
 800758e:	4919      	ldr	r1, [pc, #100]	; (80075f4 <config_SysTick_ms+0x6c>)
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	e9c1 2300 	strd	r2, r3, [r1]

	/*Cargamos el valor del limite de incrementos que representa 1ms
	 * Depende de la señal de reloj interno del MCU
	 */

	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 800759c:	f7ff fc48 	bl	8006e30 <getConfigPLL>
 80075a0:	4603      	mov	r3, r0
 80075a2:	71fb      	strb	r3, [r7, #7]
	SysTick->LOAD = clock*1000;              //Cargamos el valor correspondiente a 1 ms
 80075a4:	79fb      	ldrb	r3, [r7, #7]
 80075a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075aa:	fb03 f202 	mul.w	r2, r3, r2
 80075ae:	4b12      	ldr	r3, [pc, #72]	; (80075f8 <config_SysTick_ms+0x70>)
 80075b0:	605a      	str	r2, [r3, #4]
//		break;
//	}
//	}

	//Limpiamos el valor actual del Systick
	SysTick->VAL = 0;
 80075b2:	4b11      	ldr	r3, [pc, #68]	; (80075f8 <config_SysTick_ms+0x70>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	609a      	str	r2, [r3, #8]

	//Configuramos el relog interno como el reloj para el timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 80075b8:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <config_SysTick_ms+0x70>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a0e      	ldr	r2, [pc, #56]	; (80075f8 <config_SysTick_ms+0x70>)
 80075be:	f043 0304 	orr.w	r3, r3, #4
 80075c2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80075c4:	b672      	cpsid	i
}
 80075c6:	bf00      	nop
	//Desactivamos las interrupciones globales

	__disable_irq();

	//Matriculamos la interrupcion en el NVIC
	NVIC_EnableIRQ(SysTick_IRQn);
 80075c8:	f04f 30ff 	mov.w	r0, #4294967295
 80075cc:	f7ff ffbe 	bl	800754c <__NVIC_EnableIRQ>
	//Activamos la interrupcion debido al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80075d0:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <config_SysTick_ms+0x70>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <config_SysTick_ms+0x70>)
 80075d6:	f043 0302 	orr.w	r3, r3, #2
 80075da:	6013      	str	r3, [r2, #0]
	//Actimos el timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80075dc:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <config_SysTick_ms+0x70>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a05      	ldr	r2, [pc, #20]	; (80075f8 <config_SysTick_ms+0x70>)
 80075e2:	f043 0301 	orr.w	r3, r3, #1
 80075e6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80075e8:	b662      	cpsie	i
}
 80075ea:	bf00      	nop
	//Activamos las interrupciones globales
	__enable_irq();

}
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	200094a0 	.word	0x200094a0
 80075f8:	e000e010 	.word	0xe000e010

080075fc <getTicksMs>:

//Funcion que retorna el tiempo en ms transcurrido desde que que inicio el SysTick
uint64_t getTicksMs(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
	return ticks;
 8007600:	4b04      	ldr	r3, [pc, #16]	; (8007614 <getTicksMs+0x18>)
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8007606:	4610      	mov	r0, r2
 8007608:	4619      	mov	r1, r3
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	200094a0 	.word	0x200094a0

08007618 <delay_ms>:

//Funcion que genera un delay de ms
void delay_ms(uint32_t wait_time_ms)
{
 8007618:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
	//Guardamos el valor de ticks transcurridos hasta el momento
	ticks_start = getTicksMs();
 8007622:	f7ff ffeb 	bl	80075fc <getTicksMs>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4914      	ldr	r1, [pc, #80]	; (800767c <delay_ms+0x64>)
 800762c:	e9c1 2300 	strd	r2, r3, [r1]
	//Guardamos tambien el valor de ticks transcurridos hasta el momento en una nueva variable
	ticks_counting = getTicksMs();
 8007630:	f7ff ffe4 	bl	80075fc <getTicksMs>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4911      	ldr	r1, [pc, #68]	; (8007680 <delay_ms+0x68>)
 800763a:	e9c1 2300 	strd	r2, r3, [r1]

	//Realizamos un while que espera que se cumpla el tiempo asignado
	while(ticks_counting<(ticks_start+(uint64_t)wait_time_ms))
 800763e:	e006      	b.n	800764e <delay_ms+0x36>
	{
		//Actualizamos el valor
		ticks_counting = getTicksMs();
 8007640:	f7ff ffdc 	bl	80075fc <getTicksMs>
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	490d      	ldr	r1, [pc, #52]	; (8007680 <delay_ms+0x68>)
 800764a:	e9c1 2300 	strd	r2, r3, [r1]
	while(ticks_counting<(ticks_start+(uint64_t)wait_time_ms))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	4698      	mov	r8, r3
 8007654:	4691      	mov	r9, r2
 8007656:	4b09      	ldr	r3, [pc, #36]	; (800767c <delay_ms+0x64>)
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	eb18 0402 	adds.w	r4, r8, r2
 8007660:	eb49 0503 	adc.w	r5, r9, r3
 8007664:	4b06      	ldr	r3, [pc, #24]	; (8007680 <delay_ms+0x68>)
 8007666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766a:	42a2      	cmp	r2, r4
 800766c:	41ab      	sbcs	r3, r5
 800766e:	d3e7      	bcc.n	8007640 <delay_ms+0x28>
	}
}
 8007670:	bf00      	nop
 8007672:	bf00      	nop
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800767c:	200094a8 	.word	0x200094a8
 8007680:	200094b0 	.word	0x200094b0

08007684 <SysTick_Handler>:

/* Cuando se produce una interrupcion en el NVIC debido SysTick, apuntara a esta
 * funcion en el vector de interrupciones
 */
void SysTick_Handler(void)
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
	//Verificamos que la interrupcion se lance
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 8007688:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <SysTick_Handler+0x38>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00e      	beq.n	80076b2 <SysTick_Handler+0x2e>
	{
		//Limpiamos la bandera
		SysTick->CTRL &= ~ SysTick_CTRL_COUNTFLAG_Msk;
 8007694:	4b09      	ldr	r3, [pc, #36]	; (80076bc <SysTick_Handler+0x38>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a08      	ldr	r2, [pc, #32]	; (80076bc <SysTick_Handler+0x38>)
 800769a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800769e:	6013      	str	r3, [r2, #0]

		//Incrementamos en 1 el contador
		ticks++;
 80076a0:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <SysTick_Handler+0x3c>)
 80076a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a6:	1c50      	adds	r0, r2, #1
 80076a8:	f143 0100 	adc.w	r1, r3, #0
 80076ac:	4b04      	ldr	r3, [pc, #16]	; (80076c0 <SysTick_Handler+0x3c>)
 80076ae:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 80076b2:	bf00      	nop
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	e000e010 	.word	0xe000e010
 80076c0:	200094a0 	.word	0x200094a0

080076c4 <__NVIC_EnableIRQ>:
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	db0b      	blt.n	80076ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	f003 021f 	and.w	r2, r3, #31
 80076dc:	4907      	ldr	r1, [pc, #28]	; (80076fc <__NVIC_EnableIRQ+0x38>)
 80076de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076e2:	095b      	lsrs	r3, r3, #5
 80076e4:	2001      	movs	r0, #1
 80076e6:	fa00 f202 	lsl.w	r2, r0, r2
 80076ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	e000e100 	.word	0xe000e100

08007700 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	4a8f      	ldr	r2, [pc, #572]	; (800794c <USART_Config+0x24c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d107      	bne.n	8007722 <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8007712:	4b8f      	ldr	r3, [pc, #572]	; (8007950 <USART_Config+0x250>)
 8007714:	2210      	movs	r2, #16
 8007716:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	4a8d      	ldr	r2, [pc, #564]	; (8007954 <USART_Config+0x254>)
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	e019      	b.n	8007756 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	4a8c      	ldr	r2, [pc, #560]	; (8007958 <USART_Config+0x258>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d108      	bne.n	800773e <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 800772c:	4b88      	ldr	r3, [pc, #544]	; (8007950 <USART_Config+0x250>)
 800772e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007732:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	4a88      	ldr	r2, [pc, #544]	; (800795c <USART_Config+0x25c>)
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	e00b      	b.n	8007756 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	4a87      	ldr	r2, [pc, #540]	; (8007960 <USART_Config+0x260>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d106      	bne.n	8007756 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8007748:	4b81      	ldr	r3, [pc, #516]	; (8007950 <USART_Config+0x250>)
 800774a:	2220      	movs	r2, #32
 800774c:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	4a84      	ldr	r2, [pc, #528]	; (8007964 <USART_Config+0x264>)
 8007754:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	2200      	movs	r2, #0
 800775c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	2200      	movs	r2, #0
 8007764:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	789b      	ldrb	r3, [r3, #2]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d03d      	beq.n	80077ea <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	68da      	ldr	r2, [r3, #12]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800777c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800778c:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800779c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077ac:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	789b      	ldrb	r3, [r3, #2]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d110      	bne.n	80077d8 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	68da      	ldr	r2, [r3, #12]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80077c4:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077d4:	60da      	str	r2, [r3, #12]
 80077d6:	e018      	b.n	800780a <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80077e6:	60da      	str	r2, [r3, #12]
 80077e8:	e00f      	b.n	800780a <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	68da      	ldr	r2, [r3, #12]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f8:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007808:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	78db      	ldrb	r3, [r3, #3]
 800780e:	2b03      	cmp	r3, #3
 8007810:	d84c      	bhi.n	80078ac <USART_Config+0x1ac>
 8007812:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <USART_Config+0x118>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	08007829 	.word	0x08007829
 800781c:	08007847 	.word	0x08007847
 8007820:	08007869 	.word	0x08007869
 8007824:	0800788b 	.word	0x0800788b
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	691a      	ldr	r2, [r3, #16]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007836:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	6912      	ldr	r2, [r2, #16]
 8007842:	611a      	str	r2, [r3, #16]
		break;
 8007844:	e041      	b.n	80078ca <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	691a      	ldr	r2, [r3, #16]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007854:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	691a      	ldr	r2, [r3, #16]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007864:	611a      	str	r2, [r3, #16]
		break;
 8007866:	e030      	b.n	80078ca <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	691a      	ldr	r2, [r3, #16]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007876:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	691a      	ldr	r2, [r3, #16]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007886:	611a      	str	r2, [r3, #16]
		break;
 8007888:	e01f      	b.n	80078ca <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007898:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80078a8:	611a      	str	r2, [r3, #16]
		break;
 80078aa:	e00e      	b.n	80078ca <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	691a      	ldr	r2, [r3, #16]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80078ba:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	6912      	ldr	r2, [r2, #16]
 80078c6:	611a      	str	r2, [r3, #16]
		break;
 80078c8:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	4a21      	ldr	r2, [pc, #132]	; (8007958 <USART_Config+0x258>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d104      	bne.n	80078e2 <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80078d8:	f7ff fac6 	bl	8006e68 <getClockAPB1>
 80078dc:	4603      	mov	r3, r0
 80078de:	73fb      	strb	r3, [r7, #15]
 80078e0:	e003      	b.n	80078ea <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 80078e2:	f7ff faa5 	bl	8006e30 <getConfigPLL>
 80078e6:	4603      	mov	r3, r0
 80078e8:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	785b      	ldrb	r3, [r3, #1]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10b      	bne.n	800790a <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 f91f 	bl	8007b3c <getValueBaudRate>
 80078fe:	4603      	mov	r3, r0
 8007900:	461a      	mov	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	609a      	str	r2, [r3, #8]
 8007908:	e02f      	b.n	800796a <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	785b      	ldrb	r3, [r3, #1]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d10b      	bne.n	800792a <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8007918:	4618      	mov	r0, r3
 800791a:	f000 f90f 	bl	8007b3c <getValueBaudRate>
 800791e:	4603      	mov	r3, r0
 8007920:	461a      	mov	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	609a      	str	r2, [r3, #8]
 8007928:	e01f      	b.n	800796a <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d11a      	bne.n	8007968 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8007938:	4618      	mov	r0, r3
 800793a:	f000 f8ff 	bl	8007b3c <getValueBaudRate>
 800793e:	4603      	mov	r3, r0
 8007940:	461a      	mov	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	609a      	str	r2, [r3, #8]
 8007948:	e00f      	b.n	800796a <USART_Config+0x26a>
 800794a:	bf00      	nop
 800794c:	40011000 	.word	0x40011000
 8007950:	40023800 	.word	0x40023800
 8007954:	200094b8 	.word	0x200094b8
 8007958:	40004400 	.word	0x40004400
 800795c:	200094bc 	.word	0x200094bc
 8007960:	40011400 	.word	0x40011400
 8007964:	200094c0 	.word	0x200094c0
	}
	else
	{
		__NOP();
 8007968:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b03      	cmp	r3, #3
 8007970:	d866      	bhi.n	8007a40 <USART_Config+0x340>
 8007972:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <USART_Config+0x278>)
 8007974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007978:	08007989 	.word	0x08007989
 800797c:	080079ab 	.word	0x080079ab
 8007980:	080079cd 	.word	0x080079cd
 8007984:	08007a0f 	.word	0x08007a0f
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	68da      	ldr	r2, [r3, #12]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f022 0208 	bic.w	r2, r2, #8
 8007996:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f042 0208 	orr.w	r2, r2, #8
 80079a6:	60da      	str	r2, [r3, #12]

		break;
 80079a8:	e063      	b.n	8007a72 <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f022 0204 	bic.w	r2, r2, #4
 80079b8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f042 0204 	orr.w	r2, r2, #4
 80079c8:	60da      	str	r2, [r3, #12]

		break;
 80079ca:	e052      	b.n	8007a72 <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f022 0208 	bic.w	r2, r2, #8
 80079da:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f042 0208 	orr.w	r2, r2, #8
 80079ea:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f022 0204 	bic.w	r2, r2, #4
 80079fa:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	68da      	ldr	r2, [r3, #12]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f042 0204 	orr.w	r2, r2, #4
 8007a0a:	60da      	str	r2, [r3, #12]


		break;
 8007a0c:	e031      	b.n	8007a72 <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a1c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	68da      	ldr	r2, [r3, #12]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f022 0208 	bic.w	r2, r2, #8
 8007a2c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f022 0204 	bic.w	r2, r2, #4
 8007a3c:	60da      	str	r2, [r3, #12]
		break;
 8007a3e:	e018      	b.n	8007a72 <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a4e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f022 0208 	bic.w	r2, r2, #8
 8007a5e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f022 0204 	bic.w	r2, r2, #4
 8007a6e:	60da      	str	r2, [r3, #12]
		break;
 8007a70:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8007a72:	b672      	cpsid	i
}
 8007a74:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	791b      	ldrb	r3, [r3, #4]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d110      	bne.n	8007aa0 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f022 0220 	bic.w	r2, r2, #32
 8007a8c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f042 0220 	orr.w	r2, r2, #32
 8007a9c:	60da      	str	r2, [r3, #12]
 8007a9e:	e007      	b.n	8007ab0 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f022 0220 	bic.w	r2, r2, #32
 8007aae:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	791b      	ldrb	r3, [r3, #4]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d003      	beq.n	8007ac0 <USART_Config+0x3c0>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	795b      	ldrb	r3, [r3, #5]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d11a      	bne.n	8007af6 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	4a1a      	ldr	r2, [pc, #104]	; (8007b30 <USART_Config+0x430>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d103      	bne.n	8007ad2 <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8007aca:	2025      	movs	r0, #37	; 0x25
 8007acc:	f7ff fdfa 	bl	80076c4 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8007ad0:	e013      	b.n	8007afa <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	4a17      	ldr	r2, [pc, #92]	; (8007b34 <USART_Config+0x434>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d103      	bne.n	8007ae4 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8007adc:	2026      	movs	r0, #38	; 0x26
 8007ade:	f7ff fdf1 	bl	80076c4 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8007ae2:	e00a      	b.n	8007afa <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	4a13      	ldr	r2, [pc, #76]	; (8007b38 <USART_Config+0x438>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d105      	bne.n	8007afa <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8007aee:	2047      	movs	r0, #71	; 0x47
 8007af0:	f7ff fde8 	bl	80076c4 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8007af4:	e001      	b.n	8007afa <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8007af6:	bf00      	nop
 8007af8:	e000      	b.n	8007afc <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8007afa:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8007afc:	b662      	cpsie	i
}
 8007afe:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d00f      	beq.n	8007b28 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b16:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b26:	60da      	str	r2, [r3, #12]
	}
}
 8007b28:	bf00      	nop
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40011000 	.word	0x40011000
 8007b34:	40004400 	.word	0x40004400
 8007b38:	40011400 	.word	0x40011400

08007b3c <getValueBaudRate>:
		__enable_irq();
}

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8007b3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007b40:	b086      	sub	sp, #24
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6039      	str	r1, [r7, #0]
 8007b46:	4601      	mov	r1, r0
 8007b48:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8007b4a:	79f9      	ldrb	r1, [r7, #7]
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	460a      	mov	r2, r1
 8007b50:	4603      	mov	r3, r0
 8007b52:	491f      	ldr	r1, [pc, #124]	; (8007bd0 <getValueBaudRate+0x94>)
 8007b54:	fb01 f003 	mul.w	r0, r1, r3
 8007b58:	2102      	movs	r1, #2
 8007b5a:	fb02 f101 	mul.w	r1, r2, r1
 8007b5e:	4401      	add	r1, r0
 8007b60:	481b      	ldr	r0, [pc, #108]	; (8007bd0 <getValueBaudRate+0x94>)
 8007b62:	fba2 4500 	umull	r4, r5, r2, r0
 8007b66:	194b      	adds	r3, r1, r5
 8007b68:	461d      	mov	r5, r3
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	2200      	movs	r2, #0
 8007b70:	4698      	mov	r8, r3
 8007b72:	4691      	mov	r9, r2
 8007b74:	4642      	mov	r2, r8
 8007b76:	464b      	mov	r3, r9
 8007b78:	4620      	mov	r0, r4
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	f7f9 f89c 	bl	8000cb8 <__aeabi_ldivmod>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4613      	mov	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	4a12      	ldr	r2, [pc, #72]	; (8007bd4 <getValueBaudRate+0x98>)
 8007b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b90:	0b5b      	lsrs	r3, r3, #13
 8007b92:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f242 7210 	movw	r2, #10000	; 0x2710
 8007b9a:	fb02 f303 	mul.w	r3, r2, r3
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8007baa:	4a0a      	ldr	r2, [pc, #40]	; (8007bd4 <getValueBaudRate+0x98>)
 8007bac:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb0:	0a5b      	lsrs	r3, r3, #9
 8007bb2:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	011b      	lsls	r3, r3, #4
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	7afb      	ldrb	r3, [r7, #11]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	813b      	strh	r3, [r7, #8]

    return value;
 8007bc4:	893b      	ldrh	r3, [r7, #8]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007bd0:	540be400 	.word	0x540be400
 8007bd4:	d1b71759 	.word	0xd1b71759

08007bd8 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8007be4:	e000      	b.n	8007be8 <writeChar+0x10>
	{
		__NOP();
 8007be6:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d0f7      	beq.n	8007be6 <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	78fa      	ldrb	r2, [r7, #3]
 8007bfc:	605a      	str	r2, [r3, #4]

}
 8007bfe:	bf00      	nop
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 8007c18:	e00a      	b.n	8007c30 <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	4413      	add	r3, r2
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7ff ffd7 	bl	8007bd8 <writeChar>
		i++;
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	4413      	add	r3, r2
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1ee      	bne.n	8007c1a <writeMsg+0x10>
	}
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
	...

08007c48 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 8007c52:	4b16      	ldr	r3, [pc, #88]	; (8007cac <writeMsgForTXE+0x64>)
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d111      	bne.n	8007c7e <writeMsgForTXE+0x36>
 8007c5a:	4b15      	ldr	r3, [pc, #84]	; (8007cb0 <writeMsgForTXE+0x68>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10d      	bne.n	8007c7e <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	4813      	ldr	r0, [pc, #76]	; (8007cb4 <writeMsgForTXE+0x6c>)
 8007c66:	f001 f8b1 	bl	8008dcc <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 8007c6a:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <writeMsgForTXE+0x70>)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2101      	movs	r1, #1
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 f830 	bl	8007cdc <interruptionTX>
 8007c7c:	e012      	b.n	8007ca4 <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 8007c7e:	4b0f      	ldr	r3, [pc, #60]	; (8007cbc <writeMsgForTXE+0x74>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	2364      	movs	r3, #100	; 0x64
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	4a0d      	ldr	r2, [pc, #52]	; (8007cc0 <writeMsgForTXE+0x78>)
 8007c8c:	4413      	add	r3, r2
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f001 f89b 	bl	8008dcc <siprintf>
		inLine++;
 8007c96:	4b09      	ldr	r3, [pc, #36]	; (8007cbc <writeMsgForTXE+0x74>)
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	4b07      	ldr	r3, [pc, #28]	; (8007cbc <writeMsgForTXE+0x74>)
 8007ca0:	701a      	strb	r2, [r3, #0]
	}
}
 8007ca2:	bf00      	nop
 8007ca4:	bf00      	nop
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	20009cfe 	.word	0x20009cfe
 8007cb0:	20009cfd 	.word	0x20009cfd
 8007cb4:	200094c8 	.word	0x200094c8
 8007cb8:	20009cff 	.word	0x20009cff
 8007cbc:	20009cfc 	.word	0x20009cfc
 8007cc0:	2000952c 	.word	0x2000952c

08007cc4 <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	af00      	add	r7, sp, #0
	return auxRxData;
 8007cc8:	4b03      	ldr	r3, [pc, #12]	; (8007cd8 <getRxData+0x14>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	200094c4 	.word	0x200094c4

08007cdc <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d10c      	bne.n	8007d08 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8007d06:	e005      	b.n	8007d14 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	60da      	str	r2, [r3, #12]
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
	__NOP();
 8007d24:	bf00      	nop
}
 8007d26:	bf00      	nop
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
	__NOP();
 8007d34:	bf00      	nop
}
 8007d36:	bf00      	nop
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8007d44:	4b37      	ldr	r3, [pc, #220]	; (8007e24 <USART1_IRQHandler+0xe4>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d008      	beq.n	8007d64 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 8007d52:	4b34      	ldr	r3, [pc, #208]	; (8007e24 <USART1_IRQHandler+0xe4>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	4b33      	ldr	r3, [pc, #204]	; (8007e28 <USART1_IRQHandler+0xe8>)
 8007d5c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 8007d5e:	f7ff ffdf 	bl	8007d20 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 8007d62:	e05d      	b.n	8007e20 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8007d64:	4b2f      	ldr	r3, [pc, #188]	; (8007e24 <USART1_IRQHandler+0xe4>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d055      	beq.n	8007e1e <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8007d72:	4b2e      	ldr	r3, [pc, #184]	; (8007e2c <USART1_IRQHandler+0xec>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10b      	bne.n	8007d92 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8007d7a:	4b2d      	ldr	r3, [pc, #180]	; (8007e30 <USART1_IRQHandler+0xf0>)
 8007d7c:	781a      	ldrb	r2, [r3, #0]
 8007d7e:	4b29      	ldr	r3, [pc, #164]	; (8007e24 <USART1_IRQHandler+0xe4>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8007d84:	4b27      	ldr	r3, [pc, #156]	; (8007e24 <USART1_IRQHandler+0xe4>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2100      	movs	r1, #0
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff ffa6 	bl	8007cdc <interruptionTX>
}
 8007d90:	e046      	b.n	8007e20 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8007d92:	4b26      	ldr	r3, [pc, #152]	; (8007e2c <USART1_IRQHandler+0xec>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d142      	bne.n	8007e20 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8007d9a:	4b26      	ldr	r3, [pc, #152]	; (8007e34 <USART1_IRQHandler+0xf4>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	4b25      	ldr	r3, [pc, #148]	; (8007e38 <USART1_IRQHandler+0xf8>)
 8007da2:	5c9b      	ldrb	r3, [r3, r2]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00e      	beq.n	8007dc6 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8007da8:	4b22      	ldr	r3, [pc, #136]	; (8007e34 <USART1_IRQHandler+0xf4>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	4b22      	ldr	r3, [pc, #136]	; (8007e38 <USART1_IRQHandler+0xf8>)
 8007db0:	5c9a      	ldrb	r2, [r3, r2]
 8007db2:	4b1c      	ldr	r3, [pc, #112]	; (8007e24 <USART1_IRQHandler+0xe4>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	605a      	str	r2, [r3, #4]
				posChar++;
 8007db8:	4b1e      	ldr	r3, [pc, #120]	; (8007e34 <USART1_IRQHandler+0xf4>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	4b1c      	ldr	r3, [pc, #112]	; (8007e34 <USART1_IRQHandler+0xf4>)
 8007dc2:	701a      	strb	r2, [r3, #0]
}
 8007dc4:	e02c      	b.n	8007e20 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8007dc6:	4b1d      	ldr	r3, [pc, #116]	; (8007e3c <USART1_IRQHandler+0xfc>)
 8007dc8:	781a      	ldrb	r2, [r3, #0]
 8007dca:	4b1d      	ldr	r3, [pc, #116]	; (8007e40 <USART1_IRQHandler+0x100>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d215      	bcs.n	8007dfe <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8007dd2:	4b1a      	ldr	r3, [pc, #104]	; (8007e3c <USART1_IRQHandler+0xfc>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	2364      	movs	r3, #100	; 0x64
 8007dda:	fb02 f303 	mul.w	r3, r2, r3
 8007dde:	4a19      	ldr	r2, [pc, #100]	; (8007e44 <USART1_IRQHandler+0x104>)
 8007de0:	4413      	add	r3, r2
 8007de2:	4619      	mov	r1, r3
 8007de4:	4814      	ldr	r0, [pc, #80]	; (8007e38 <USART1_IRQHandler+0xf8>)
 8007de6:	f000 fff1 	bl	8008dcc <siprintf>
					posChar = 0;
 8007dea:	4b12      	ldr	r3, [pc, #72]	; (8007e34 <USART1_IRQHandler+0xf4>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8007df0:	4b12      	ldr	r3, [pc, #72]	; (8007e3c <USART1_IRQHandler+0xfc>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	3301      	adds	r3, #1
 8007df6:	b2da      	uxtb	r2, r3
 8007df8:	4b10      	ldr	r3, [pc, #64]	; (8007e3c <USART1_IRQHandler+0xfc>)
 8007dfa:	701a      	strb	r2, [r3, #0]
}
 8007dfc:	e010      	b.n	8007e20 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8007dfe:	4b09      	ldr	r3, [pc, #36]	; (8007e24 <USART1_IRQHandler+0xe4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2100      	movs	r1, #0
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff ff69 	bl	8007cdc <interruptionTX>
					posChar = 0;
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <USART1_IRQHandler+0xf4>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8007e10:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <USART1_IRQHandler+0xfc>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8007e16:	4b0a      	ldr	r3, [pc, #40]	; (8007e40 <USART1_IRQHandler+0x100>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	701a      	strb	r2, [r3, #0]
}
 8007e1c:	e000      	b.n	8007e20 <USART1_IRQHandler+0xe0>
		__NOP();
 8007e1e:	bf00      	nop
}
 8007e20:	bf00      	nop
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	200094b8 	.word	0x200094b8
 8007e28:	200094c4 	.word	0x200094c4
 8007e2c:	20009cff 	.word	0x20009cff
 8007e30:	200094c5 	.word	0x200094c5
 8007e34:	20009cfe 	.word	0x20009cfe
 8007e38:	200094c8 	.word	0x200094c8
 8007e3c:	20009cfd 	.word	0x20009cfd
 8007e40:	20009cfc 	.word	0x20009cfc
 8007e44:	2000952c 	.word	0x2000952c

08007e48 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8007e4c:	4b37      	ldr	r3, [pc, #220]	; (8007f2c <USART2_IRQHandler+0xe4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d008      	beq.n	8007e6c <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8007e5a:	4b34      	ldr	r3, [pc, #208]	; (8007f2c <USART2_IRQHandler+0xe4>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	4b33      	ldr	r3, [pc, #204]	; (8007f30 <USART2_IRQHandler+0xe8>)
 8007e64:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8007e66:	f7fb fe03 	bl	8003a70 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8007e6a:	e05d      	b.n	8007f28 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8007e6c:	4b2f      	ldr	r3, [pc, #188]	; (8007f2c <USART2_IRQHandler+0xe4>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d055      	beq.n	8007f26 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8007e7a:	4b2e      	ldr	r3, [pc, #184]	; (8007f34 <USART2_IRQHandler+0xec>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10b      	bne.n	8007e9a <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8007e82:	4b2d      	ldr	r3, [pc, #180]	; (8007f38 <USART2_IRQHandler+0xf0>)
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	4b29      	ldr	r3, [pc, #164]	; (8007f2c <USART2_IRQHandler+0xe4>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8007e8c:	4b27      	ldr	r3, [pc, #156]	; (8007f2c <USART2_IRQHandler+0xe4>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2100      	movs	r1, #0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7ff ff22 	bl	8007cdc <interruptionTX>
}
 8007e98:	e046      	b.n	8007f28 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8007e9a:	4b26      	ldr	r3, [pc, #152]	; (8007f34 <USART2_IRQHandler+0xec>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d142      	bne.n	8007f28 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8007ea2:	4b26      	ldr	r3, [pc, #152]	; (8007f3c <USART2_IRQHandler+0xf4>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	4b25      	ldr	r3, [pc, #148]	; (8007f40 <USART2_IRQHandler+0xf8>)
 8007eaa:	5c9b      	ldrb	r3, [r3, r2]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00e      	beq.n	8007ece <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8007eb0:	4b22      	ldr	r3, [pc, #136]	; (8007f3c <USART2_IRQHandler+0xf4>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	4b22      	ldr	r3, [pc, #136]	; (8007f40 <USART2_IRQHandler+0xf8>)
 8007eb8:	5c9a      	ldrb	r2, [r3, r2]
 8007eba:	4b1c      	ldr	r3, [pc, #112]	; (8007f2c <USART2_IRQHandler+0xe4>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	605a      	str	r2, [r3, #4]
				posChar++;
 8007ec0:	4b1e      	ldr	r3, [pc, #120]	; (8007f3c <USART2_IRQHandler+0xf4>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	4b1c      	ldr	r3, [pc, #112]	; (8007f3c <USART2_IRQHandler+0xf4>)
 8007eca:	701a      	strb	r2, [r3, #0]
}
 8007ecc:	e02c      	b.n	8007f28 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8007ece:	4b1d      	ldr	r3, [pc, #116]	; (8007f44 <USART2_IRQHandler+0xfc>)
 8007ed0:	781a      	ldrb	r2, [r3, #0]
 8007ed2:	4b1d      	ldr	r3, [pc, #116]	; (8007f48 <USART2_IRQHandler+0x100>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d215      	bcs.n	8007f06 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8007eda:	4b1a      	ldr	r3, [pc, #104]	; (8007f44 <USART2_IRQHandler+0xfc>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	2364      	movs	r3, #100	; 0x64
 8007ee2:	fb02 f303 	mul.w	r3, r2, r3
 8007ee6:	4a19      	ldr	r2, [pc, #100]	; (8007f4c <USART2_IRQHandler+0x104>)
 8007ee8:	4413      	add	r3, r2
 8007eea:	4619      	mov	r1, r3
 8007eec:	4814      	ldr	r0, [pc, #80]	; (8007f40 <USART2_IRQHandler+0xf8>)
 8007eee:	f000 ff6d 	bl	8008dcc <siprintf>
					posChar = 0;
 8007ef2:	4b12      	ldr	r3, [pc, #72]	; (8007f3c <USART2_IRQHandler+0xf4>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8007ef8:	4b12      	ldr	r3, [pc, #72]	; (8007f44 <USART2_IRQHandler+0xfc>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	3301      	adds	r3, #1
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	4b10      	ldr	r3, [pc, #64]	; (8007f44 <USART2_IRQHandler+0xfc>)
 8007f02:	701a      	strb	r2, [r3, #0]
}
 8007f04:	e010      	b.n	8007f28 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8007f06:	4b09      	ldr	r3, [pc, #36]	; (8007f2c <USART2_IRQHandler+0xe4>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff fee5 	bl	8007cdc <interruptionTX>
					posChar = 0;
 8007f12:	4b0a      	ldr	r3, [pc, #40]	; (8007f3c <USART2_IRQHandler+0xf4>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8007f18:	4b0a      	ldr	r3, [pc, #40]	; (8007f44 <USART2_IRQHandler+0xfc>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8007f1e:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <USART2_IRQHandler+0x100>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	701a      	strb	r2, [r3, #0]
}
 8007f24:	e000      	b.n	8007f28 <USART2_IRQHandler+0xe0>
		__NOP();
 8007f26:	bf00      	nop
}
 8007f28:	bf00      	nop
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	200094bc 	.word	0x200094bc
 8007f30:	200094c4 	.word	0x200094c4
 8007f34:	20009cff 	.word	0x20009cff
 8007f38:	200094c5 	.word	0x200094c5
 8007f3c:	20009cfe 	.word	0x20009cfe
 8007f40:	200094c8 	.word	0x200094c8
 8007f44:	20009cfd 	.word	0x20009cfd
 8007f48:	20009cfc 	.word	0x20009cfc
 8007f4c:	2000952c 	.word	0x2000952c

08007f50 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8007f54:	4b37      	ldr	r3, [pc, #220]	; (8008034 <USART6_IRQHandler+0xe4>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d008      	beq.n	8007f74 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 8007f62:	4b34      	ldr	r3, [pc, #208]	; (8008034 <USART6_IRQHandler+0xe4>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	4b33      	ldr	r3, [pc, #204]	; (8008038 <USART6_IRQHandler+0xe8>)
 8007f6c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8007f6e:	f7ff fedf 	bl	8007d30 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 8007f72:	e05d      	b.n	8008030 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8007f74:	4b2f      	ldr	r3, [pc, #188]	; (8008034 <USART6_IRQHandler+0xe4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d055      	beq.n	800802e <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8007f82:	4b2e      	ldr	r3, [pc, #184]	; (800803c <USART6_IRQHandler+0xec>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10b      	bne.n	8007fa2 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8007f8a:	4b2d      	ldr	r3, [pc, #180]	; (8008040 <USART6_IRQHandler+0xf0>)
 8007f8c:	781a      	ldrb	r2, [r3, #0]
 8007f8e:	4b29      	ldr	r3, [pc, #164]	; (8008034 <USART6_IRQHandler+0xe4>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8007f94:	4b27      	ldr	r3, [pc, #156]	; (8008034 <USART6_IRQHandler+0xe4>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2100      	movs	r1, #0
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff fe9e 	bl	8007cdc <interruptionTX>
}
 8007fa0:	e046      	b.n	8008030 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8007fa2:	4b26      	ldr	r3, [pc, #152]	; (800803c <USART6_IRQHandler+0xec>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d142      	bne.n	8008030 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8007faa:	4b26      	ldr	r3, [pc, #152]	; (8008044 <USART6_IRQHandler+0xf4>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	4b25      	ldr	r3, [pc, #148]	; (8008048 <USART6_IRQHandler+0xf8>)
 8007fb2:	5c9b      	ldrb	r3, [r3, r2]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00e      	beq.n	8007fd6 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8007fb8:	4b22      	ldr	r3, [pc, #136]	; (8008044 <USART6_IRQHandler+0xf4>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	4b22      	ldr	r3, [pc, #136]	; (8008048 <USART6_IRQHandler+0xf8>)
 8007fc0:	5c9a      	ldrb	r2, [r3, r2]
 8007fc2:	4b1c      	ldr	r3, [pc, #112]	; (8008034 <USART6_IRQHandler+0xe4>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	605a      	str	r2, [r3, #4]
				posChar++;
 8007fc8:	4b1e      	ldr	r3, [pc, #120]	; (8008044 <USART6_IRQHandler+0xf4>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <USART6_IRQHandler+0xf4>)
 8007fd2:	701a      	strb	r2, [r3, #0]
}
 8007fd4:	e02c      	b.n	8008030 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8007fd6:	4b1d      	ldr	r3, [pc, #116]	; (800804c <USART6_IRQHandler+0xfc>)
 8007fd8:	781a      	ldrb	r2, [r3, #0]
 8007fda:	4b1d      	ldr	r3, [pc, #116]	; (8008050 <USART6_IRQHandler+0x100>)
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d215      	bcs.n	800800e <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8007fe2:	4b1a      	ldr	r3, [pc, #104]	; (800804c <USART6_IRQHandler+0xfc>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	2364      	movs	r3, #100	; 0x64
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
 8007fee:	4a19      	ldr	r2, [pc, #100]	; (8008054 <USART6_IRQHandler+0x104>)
 8007ff0:	4413      	add	r3, r2
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4814      	ldr	r0, [pc, #80]	; (8008048 <USART6_IRQHandler+0xf8>)
 8007ff6:	f000 fee9 	bl	8008dcc <siprintf>
					posChar = 0;
 8007ffa:	4b12      	ldr	r3, [pc, #72]	; (8008044 <USART6_IRQHandler+0xf4>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8008000:	4b12      	ldr	r3, [pc, #72]	; (800804c <USART6_IRQHandler+0xfc>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	3301      	adds	r3, #1
 8008006:	b2da      	uxtb	r2, r3
 8008008:	4b10      	ldr	r3, [pc, #64]	; (800804c <USART6_IRQHandler+0xfc>)
 800800a:	701a      	strb	r2, [r3, #0]
}
 800800c:	e010      	b.n	8008030 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800800e:	4b09      	ldr	r3, [pc, #36]	; (8008034 <USART6_IRQHandler+0xe4>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2100      	movs	r1, #0
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff fe61 	bl	8007cdc <interruptionTX>
					posChar = 0;
 800801a:	4b0a      	ldr	r3, [pc, #40]	; (8008044 <USART6_IRQHandler+0xf4>)
 800801c:	2200      	movs	r2, #0
 800801e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8008020:	4b0a      	ldr	r3, [pc, #40]	; (800804c <USART6_IRQHandler+0xfc>)
 8008022:	2200      	movs	r2, #0
 8008024:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8008026:	4b0a      	ldr	r3, [pc, #40]	; (8008050 <USART6_IRQHandler+0x100>)
 8008028:	2200      	movs	r2, #0
 800802a:	701a      	strb	r2, [r3, #0]
}
 800802c:	e000      	b.n	8008030 <USART6_IRQHandler+0xe0>
		__NOP();
 800802e:	bf00      	nop
}
 8008030:	bf00      	nop
 8008032:	bd80      	pop	{r7, pc}
 8008034:	200094c0 	.word	0x200094c0
 8008038:	200094c4 	.word	0x200094c4
 800803c:	20009cff 	.word	0x20009cff
 8008040:	200094c5 	.word	0x200094c5
 8008044:	20009cfe 	.word	0x20009cfe
 8008048:	200094c8 	.word	0x200094c8
 800804c:	20009cfd 	.word	0x20009cfd
 8008050:	20009cfc 	.word	0x20009cfc
 8008054:	2000952c 	.word	0x2000952c

08008058 <atof>:
 8008058:	2100      	movs	r1, #0
 800805a:	f001 bd71 	b.w	8009b40 <strtod>

0800805e <atoi>:
 800805e:	220a      	movs	r2, #10
 8008060:	2100      	movs	r1, #0
 8008062:	f001 bdfd 	b.w	8009c60 <strtol>
	...

08008068 <__errno>:
 8008068:	4b01      	ldr	r3, [pc, #4]	; (8008070 <__errno+0x8>)
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	2000001c 	.word	0x2000001c

08008074 <__libc_init_array>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	4d0d      	ldr	r5, [pc, #52]	; (80080ac <__libc_init_array+0x38>)
 8008078:	4c0d      	ldr	r4, [pc, #52]	; (80080b0 <__libc_init_array+0x3c>)
 800807a:	1b64      	subs	r4, r4, r5
 800807c:	10a4      	asrs	r4, r4, #2
 800807e:	2600      	movs	r6, #0
 8008080:	42a6      	cmp	r6, r4
 8008082:	d109      	bne.n	8008098 <__libc_init_array+0x24>
 8008084:	4d0b      	ldr	r5, [pc, #44]	; (80080b4 <__libc_init_array+0x40>)
 8008086:	4c0c      	ldr	r4, [pc, #48]	; (80080b8 <__libc_init_array+0x44>)
 8008088:	f007 fda4 	bl	800fbd4 <_init>
 800808c:	1b64      	subs	r4, r4, r5
 800808e:	10a4      	asrs	r4, r4, #2
 8008090:	2600      	movs	r6, #0
 8008092:	42a6      	cmp	r6, r4
 8008094:	d105      	bne.n	80080a2 <__libc_init_array+0x2e>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	f855 3b04 	ldr.w	r3, [r5], #4
 800809c:	4798      	blx	r3
 800809e:	3601      	adds	r6, #1
 80080a0:	e7ee      	b.n	8008080 <__libc_init_array+0xc>
 80080a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a6:	4798      	blx	r3
 80080a8:	3601      	adds	r6, #1
 80080aa:	e7f2      	b.n	8008092 <__libc_init_array+0x1e>
 80080ac:	08010690 	.word	0x08010690
 80080b0:	08010690 	.word	0x08010690
 80080b4:	08010690 	.word	0x08010690
 80080b8:	08010694 	.word	0x08010694

080080bc <memset>:
 80080bc:	4402      	add	r2, r0
 80080be:	4603      	mov	r3, r0
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d100      	bne.n	80080c6 <memset+0xa>
 80080c4:	4770      	bx	lr
 80080c6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ca:	e7f9      	b.n	80080c0 <memset+0x4>

080080cc <__cvt>:
 80080cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080d0:	ec55 4b10 	vmov	r4, r5, d0
 80080d4:	2d00      	cmp	r5, #0
 80080d6:	460e      	mov	r6, r1
 80080d8:	4619      	mov	r1, r3
 80080da:	462b      	mov	r3, r5
 80080dc:	bfbb      	ittet	lt
 80080de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080e2:	461d      	movlt	r5, r3
 80080e4:	2300      	movge	r3, #0
 80080e6:	232d      	movlt	r3, #45	; 0x2d
 80080e8:	700b      	strb	r3, [r1, #0]
 80080ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080f0:	4691      	mov	r9, r2
 80080f2:	f023 0820 	bic.w	r8, r3, #32
 80080f6:	bfbc      	itt	lt
 80080f8:	4622      	movlt	r2, r4
 80080fa:	4614      	movlt	r4, r2
 80080fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008100:	d005      	beq.n	800810e <__cvt+0x42>
 8008102:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008106:	d100      	bne.n	800810a <__cvt+0x3e>
 8008108:	3601      	adds	r6, #1
 800810a:	2102      	movs	r1, #2
 800810c:	e000      	b.n	8008110 <__cvt+0x44>
 800810e:	2103      	movs	r1, #3
 8008110:	ab03      	add	r3, sp, #12
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	ab02      	add	r3, sp, #8
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	ec45 4b10 	vmov	d0, r4, r5
 800811c:	4653      	mov	r3, sl
 800811e:	4632      	mov	r2, r6
 8008120:	f001 fe56 	bl	8009dd0 <_dtoa_r>
 8008124:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008128:	4607      	mov	r7, r0
 800812a:	d102      	bne.n	8008132 <__cvt+0x66>
 800812c:	f019 0f01 	tst.w	r9, #1
 8008130:	d022      	beq.n	8008178 <__cvt+0xac>
 8008132:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008136:	eb07 0906 	add.w	r9, r7, r6
 800813a:	d110      	bne.n	800815e <__cvt+0x92>
 800813c:	783b      	ldrb	r3, [r7, #0]
 800813e:	2b30      	cmp	r3, #48	; 0x30
 8008140:	d10a      	bne.n	8008158 <__cvt+0x8c>
 8008142:	2200      	movs	r2, #0
 8008144:	2300      	movs	r3, #0
 8008146:	4620      	mov	r0, r4
 8008148:	4629      	mov	r1, r5
 800814a:	f7f8 fcd5 	bl	8000af8 <__aeabi_dcmpeq>
 800814e:	b918      	cbnz	r0, 8008158 <__cvt+0x8c>
 8008150:	f1c6 0601 	rsb	r6, r6, #1
 8008154:	f8ca 6000 	str.w	r6, [sl]
 8008158:	f8da 3000 	ldr.w	r3, [sl]
 800815c:	4499      	add	r9, r3
 800815e:	2200      	movs	r2, #0
 8008160:	2300      	movs	r3, #0
 8008162:	4620      	mov	r0, r4
 8008164:	4629      	mov	r1, r5
 8008166:	f7f8 fcc7 	bl	8000af8 <__aeabi_dcmpeq>
 800816a:	b108      	cbz	r0, 8008170 <__cvt+0xa4>
 800816c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008170:	2230      	movs	r2, #48	; 0x30
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	454b      	cmp	r3, r9
 8008176:	d307      	bcc.n	8008188 <__cvt+0xbc>
 8008178:	9b03      	ldr	r3, [sp, #12]
 800817a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800817c:	1bdb      	subs	r3, r3, r7
 800817e:	4638      	mov	r0, r7
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	b004      	add	sp, #16
 8008184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008188:	1c59      	adds	r1, r3, #1
 800818a:	9103      	str	r1, [sp, #12]
 800818c:	701a      	strb	r2, [r3, #0]
 800818e:	e7f0      	b.n	8008172 <__cvt+0xa6>

08008190 <__exponent>:
 8008190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008192:	4603      	mov	r3, r0
 8008194:	2900      	cmp	r1, #0
 8008196:	bfb8      	it	lt
 8008198:	4249      	neglt	r1, r1
 800819a:	f803 2b02 	strb.w	r2, [r3], #2
 800819e:	bfb4      	ite	lt
 80081a0:	222d      	movlt	r2, #45	; 0x2d
 80081a2:	222b      	movge	r2, #43	; 0x2b
 80081a4:	2909      	cmp	r1, #9
 80081a6:	7042      	strb	r2, [r0, #1]
 80081a8:	dd2a      	ble.n	8008200 <__exponent+0x70>
 80081aa:	f10d 0407 	add.w	r4, sp, #7
 80081ae:	46a4      	mov	ip, r4
 80081b0:	270a      	movs	r7, #10
 80081b2:	46a6      	mov	lr, r4
 80081b4:	460a      	mov	r2, r1
 80081b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80081ba:	fb07 1516 	mls	r5, r7, r6, r1
 80081be:	3530      	adds	r5, #48	; 0x30
 80081c0:	2a63      	cmp	r2, #99	; 0x63
 80081c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80081c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081ca:	4631      	mov	r1, r6
 80081cc:	dcf1      	bgt.n	80081b2 <__exponent+0x22>
 80081ce:	3130      	adds	r1, #48	; 0x30
 80081d0:	f1ae 0502 	sub.w	r5, lr, #2
 80081d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081d8:	1c44      	adds	r4, r0, #1
 80081da:	4629      	mov	r1, r5
 80081dc:	4561      	cmp	r1, ip
 80081de:	d30a      	bcc.n	80081f6 <__exponent+0x66>
 80081e0:	f10d 0209 	add.w	r2, sp, #9
 80081e4:	eba2 020e 	sub.w	r2, r2, lr
 80081e8:	4565      	cmp	r5, ip
 80081ea:	bf88      	it	hi
 80081ec:	2200      	movhi	r2, #0
 80081ee:	4413      	add	r3, r2
 80081f0:	1a18      	subs	r0, r3, r0
 80081f2:	b003      	add	sp, #12
 80081f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081fe:	e7ed      	b.n	80081dc <__exponent+0x4c>
 8008200:	2330      	movs	r3, #48	; 0x30
 8008202:	3130      	adds	r1, #48	; 0x30
 8008204:	7083      	strb	r3, [r0, #2]
 8008206:	70c1      	strb	r1, [r0, #3]
 8008208:	1d03      	adds	r3, r0, #4
 800820a:	e7f1      	b.n	80081f0 <__exponent+0x60>

0800820c <_printf_float>:
 800820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	ed2d 8b02 	vpush	{d8}
 8008214:	b08d      	sub	sp, #52	; 0x34
 8008216:	460c      	mov	r4, r1
 8008218:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800821c:	4616      	mov	r6, r2
 800821e:	461f      	mov	r7, r3
 8008220:	4605      	mov	r5, r0
 8008222:	f002 ff33 	bl	800b08c <_localeconv_r>
 8008226:	f8d0 a000 	ldr.w	sl, [r0]
 800822a:	4650      	mov	r0, sl
 800822c:	f7f7 ffe2 	bl	80001f4 <strlen>
 8008230:	2300      	movs	r3, #0
 8008232:	930a      	str	r3, [sp, #40]	; 0x28
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	9305      	str	r3, [sp, #20]
 8008238:	f8d8 3000 	ldr.w	r3, [r8]
 800823c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008240:	3307      	adds	r3, #7
 8008242:	f023 0307 	bic.w	r3, r3, #7
 8008246:	f103 0208 	add.w	r2, r3, #8
 800824a:	f8c8 2000 	str.w	r2, [r8]
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008256:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800825a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800825e:	9307      	str	r3, [sp, #28]
 8008260:	f8cd 8018 	str.w	r8, [sp, #24]
 8008264:	ee08 0a10 	vmov	s16, r0
 8008268:	4b9f      	ldr	r3, [pc, #636]	; (80084e8 <_printf_float+0x2dc>)
 800826a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800826e:	f04f 32ff 	mov.w	r2, #4294967295
 8008272:	f7f8 fc73 	bl	8000b5c <__aeabi_dcmpun>
 8008276:	bb88      	cbnz	r0, 80082dc <_printf_float+0xd0>
 8008278:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800827c:	4b9a      	ldr	r3, [pc, #616]	; (80084e8 <_printf_float+0x2dc>)
 800827e:	f04f 32ff 	mov.w	r2, #4294967295
 8008282:	f7f8 fc4d 	bl	8000b20 <__aeabi_dcmple>
 8008286:	bb48      	cbnz	r0, 80082dc <_printf_float+0xd0>
 8008288:	2200      	movs	r2, #0
 800828a:	2300      	movs	r3, #0
 800828c:	4640      	mov	r0, r8
 800828e:	4649      	mov	r1, r9
 8008290:	f7f8 fc3c 	bl	8000b0c <__aeabi_dcmplt>
 8008294:	b110      	cbz	r0, 800829c <_printf_float+0x90>
 8008296:	232d      	movs	r3, #45	; 0x2d
 8008298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800829c:	4b93      	ldr	r3, [pc, #588]	; (80084ec <_printf_float+0x2e0>)
 800829e:	4894      	ldr	r0, [pc, #592]	; (80084f0 <_printf_float+0x2e4>)
 80082a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80082a4:	bf94      	ite	ls
 80082a6:	4698      	movls	r8, r3
 80082a8:	4680      	movhi	r8, r0
 80082aa:	2303      	movs	r3, #3
 80082ac:	6123      	str	r3, [r4, #16]
 80082ae:	9b05      	ldr	r3, [sp, #20]
 80082b0:	f023 0204 	bic.w	r2, r3, #4
 80082b4:	6022      	str	r2, [r4, #0]
 80082b6:	f04f 0900 	mov.w	r9, #0
 80082ba:	9700      	str	r7, [sp, #0]
 80082bc:	4633      	mov	r3, r6
 80082be:	aa0b      	add	r2, sp, #44	; 0x2c
 80082c0:	4621      	mov	r1, r4
 80082c2:	4628      	mov	r0, r5
 80082c4:	f000 f9d8 	bl	8008678 <_printf_common>
 80082c8:	3001      	adds	r0, #1
 80082ca:	f040 8090 	bne.w	80083ee <_printf_float+0x1e2>
 80082ce:	f04f 30ff 	mov.w	r0, #4294967295
 80082d2:	b00d      	add	sp, #52	; 0x34
 80082d4:	ecbd 8b02 	vpop	{d8}
 80082d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082dc:	4642      	mov	r2, r8
 80082de:	464b      	mov	r3, r9
 80082e0:	4640      	mov	r0, r8
 80082e2:	4649      	mov	r1, r9
 80082e4:	f7f8 fc3a 	bl	8000b5c <__aeabi_dcmpun>
 80082e8:	b140      	cbz	r0, 80082fc <_printf_float+0xf0>
 80082ea:	464b      	mov	r3, r9
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	bfbc      	itt	lt
 80082f0:	232d      	movlt	r3, #45	; 0x2d
 80082f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082f6:	487f      	ldr	r0, [pc, #508]	; (80084f4 <_printf_float+0x2e8>)
 80082f8:	4b7f      	ldr	r3, [pc, #508]	; (80084f8 <_printf_float+0x2ec>)
 80082fa:	e7d1      	b.n	80082a0 <_printf_float+0x94>
 80082fc:	6863      	ldr	r3, [r4, #4]
 80082fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008302:	9206      	str	r2, [sp, #24]
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	d13f      	bne.n	8008388 <_printf_float+0x17c>
 8008308:	2306      	movs	r3, #6
 800830a:	6063      	str	r3, [r4, #4]
 800830c:	9b05      	ldr	r3, [sp, #20]
 800830e:	6861      	ldr	r1, [r4, #4]
 8008310:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008314:	2300      	movs	r3, #0
 8008316:	9303      	str	r3, [sp, #12]
 8008318:	ab0a      	add	r3, sp, #40	; 0x28
 800831a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800831e:	ab09      	add	r3, sp, #36	; 0x24
 8008320:	ec49 8b10 	vmov	d0, r8, r9
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	6022      	str	r2, [r4, #0]
 8008328:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800832c:	4628      	mov	r0, r5
 800832e:	f7ff fecd 	bl	80080cc <__cvt>
 8008332:	9b06      	ldr	r3, [sp, #24]
 8008334:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008336:	2b47      	cmp	r3, #71	; 0x47
 8008338:	4680      	mov	r8, r0
 800833a:	d108      	bne.n	800834e <_printf_float+0x142>
 800833c:	1cc8      	adds	r0, r1, #3
 800833e:	db02      	blt.n	8008346 <_printf_float+0x13a>
 8008340:	6863      	ldr	r3, [r4, #4]
 8008342:	4299      	cmp	r1, r3
 8008344:	dd41      	ble.n	80083ca <_printf_float+0x1be>
 8008346:	f1ab 0b02 	sub.w	fp, fp, #2
 800834a:	fa5f fb8b 	uxtb.w	fp, fp
 800834e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008352:	d820      	bhi.n	8008396 <_printf_float+0x18a>
 8008354:	3901      	subs	r1, #1
 8008356:	465a      	mov	r2, fp
 8008358:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800835c:	9109      	str	r1, [sp, #36]	; 0x24
 800835e:	f7ff ff17 	bl	8008190 <__exponent>
 8008362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008364:	1813      	adds	r3, r2, r0
 8008366:	2a01      	cmp	r2, #1
 8008368:	4681      	mov	r9, r0
 800836a:	6123      	str	r3, [r4, #16]
 800836c:	dc02      	bgt.n	8008374 <_printf_float+0x168>
 800836e:	6822      	ldr	r2, [r4, #0]
 8008370:	07d2      	lsls	r2, r2, #31
 8008372:	d501      	bpl.n	8008378 <_printf_float+0x16c>
 8008374:	3301      	adds	r3, #1
 8008376:	6123      	str	r3, [r4, #16]
 8008378:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800837c:	2b00      	cmp	r3, #0
 800837e:	d09c      	beq.n	80082ba <_printf_float+0xae>
 8008380:	232d      	movs	r3, #45	; 0x2d
 8008382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008386:	e798      	b.n	80082ba <_printf_float+0xae>
 8008388:	9a06      	ldr	r2, [sp, #24]
 800838a:	2a47      	cmp	r2, #71	; 0x47
 800838c:	d1be      	bne.n	800830c <_printf_float+0x100>
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1bc      	bne.n	800830c <_printf_float+0x100>
 8008392:	2301      	movs	r3, #1
 8008394:	e7b9      	b.n	800830a <_printf_float+0xfe>
 8008396:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800839a:	d118      	bne.n	80083ce <_printf_float+0x1c2>
 800839c:	2900      	cmp	r1, #0
 800839e:	6863      	ldr	r3, [r4, #4]
 80083a0:	dd0b      	ble.n	80083ba <_printf_float+0x1ae>
 80083a2:	6121      	str	r1, [r4, #16]
 80083a4:	b913      	cbnz	r3, 80083ac <_printf_float+0x1a0>
 80083a6:	6822      	ldr	r2, [r4, #0]
 80083a8:	07d0      	lsls	r0, r2, #31
 80083aa:	d502      	bpl.n	80083b2 <_printf_float+0x1a6>
 80083ac:	3301      	adds	r3, #1
 80083ae:	440b      	add	r3, r1
 80083b0:	6123      	str	r3, [r4, #16]
 80083b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80083b4:	f04f 0900 	mov.w	r9, #0
 80083b8:	e7de      	b.n	8008378 <_printf_float+0x16c>
 80083ba:	b913      	cbnz	r3, 80083c2 <_printf_float+0x1b6>
 80083bc:	6822      	ldr	r2, [r4, #0]
 80083be:	07d2      	lsls	r2, r2, #31
 80083c0:	d501      	bpl.n	80083c6 <_printf_float+0x1ba>
 80083c2:	3302      	adds	r3, #2
 80083c4:	e7f4      	b.n	80083b0 <_printf_float+0x1a4>
 80083c6:	2301      	movs	r3, #1
 80083c8:	e7f2      	b.n	80083b0 <_printf_float+0x1a4>
 80083ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d0:	4299      	cmp	r1, r3
 80083d2:	db05      	blt.n	80083e0 <_printf_float+0x1d4>
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	6121      	str	r1, [r4, #16]
 80083d8:	07d8      	lsls	r0, r3, #31
 80083da:	d5ea      	bpl.n	80083b2 <_printf_float+0x1a6>
 80083dc:	1c4b      	adds	r3, r1, #1
 80083de:	e7e7      	b.n	80083b0 <_printf_float+0x1a4>
 80083e0:	2900      	cmp	r1, #0
 80083e2:	bfd4      	ite	le
 80083e4:	f1c1 0202 	rsble	r2, r1, #2
 80083e8:	2201      	movgt	r2, #1
 80083ea:	4413      	add	r3, r2
 80083ec:	e7e0      	b.n	80083b0 <_printf_float+0x1a4>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	055a      	lsls	r2, r3, #21
 80083f2:	d407      	bmi.n	8008404 <_printf_float+0x1f8>
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	4642      	mov	r2, r8
 80083f8:	4631      	mov	r1, r6
 80083fa:	4628      	mov	r0, r5
 80083fc:	47b8      	blx	r7
 80083fe:	3001      	adds	r0, #1
 8008400:	d12c      	bne.n	800845c <_printf_float+0x250>
 8008402:	e764      	b.n	80082ce <_printf_float+0xc2>
 8008404:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008408:	f240 80e0 	bls.w	80085cc <_printf_float+0x3c0>
 800840c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008410:	2200      	movs	r2, #0
 8008412:	2300      	movs	r3, #0
 8008414:	f7f8 fb70 	bl	8000af8 <__aeabi_dcmpeq>
 8008418:	2800      	cmp	r0, #0
 800841a:	d034      	beq.n	8008486 <_printf_float+0x27a>
 800841c:	4a37      	ldr	r2, [pc, #220]	; (80084fc <_printf_float+0x2f0>)
 800841e:	2301      	movs	r3, #1
 8008420:	4631      	mov	r1, r6
 8008422:	4628      	mov	r0, r5
 8008424:	47b8      	blx	r7
 8008426:	3001      	adds	r0, #1
 8008428:	f43f af51 	beq.w	80082ce <_printf_float+0xc2>
 800842c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008430:	429a      	cmp	r2, r3
 8008432:	db02      	blt.n	800843a <_printf_float+0x22e>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	07d8      	lsls	r0, r3, #31
 8008438:	d510      	bpl.n	800845c <_printf_float+0x250>
 800843a:	ee18 3a10 	vmov	r3, s16
 800843e:	4652      	mov	r2, sl
 8008440:	4631      	mov	r1, r6
 8008442:	4628      	mov	r0, r5
 8008444:	47b8      	blx	r7
 8008446:	3001      	adds	r0, #1
 8008448:	f43f af41 	beq.w	80082ce <_printf_float+0xc2>
 800844c:	f04f 0800 	mov.w	r8, #0
 8008450:	f104 091a 	add.w	r9, r4, #26
 8008454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008456:	3b01      	subs	r3, #1
 8008458:	4543      	cmp	r3, r8
 800845a:	dc09      	bgt.n	8008470 <_printf_float+0x264>
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	079b      	lsls	r3, r3, #30
 8008460:	f100 8105 	bmi.w	800866e <_printf_float+0x462>
 8008464:	68e0      	ldr	r0, [r4, #12]
 8008466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008468:	4298      	cmp	r0, r3
 800846a:	bfb8      	it	lt
 800846c:	4618      	movlt	r0, r3
 800846e:	e730      	b.n	80082d2 <_printf_float+0xc6>
 8008470:	2301      	movs	r3, #1
 8008472:	464a      	mov	r2, r9
 8008474:	4631      	mov	r1, r6
 8008476:	4628      	mov	r0, r5
 8008478:	47b8      	blx	r7
 800847a:	3001      	adds	r0, #1
 800847c:	f43f af27 	beq.w	80082ce <_printf_float+0xc2>
 8008480:	f108 0801 	add.w	r8, r8, #1
 8008484:	e7e6      	b.n	8008454 <_printf_float+0x248>
 8008486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008488:	2b00      	cmp	r3, #0
 800848a:	dc39      	bgt.n	8008500 <_printf_float+0x2f4>
 800848c:	4a1b      	ldr	r2, [pc, #108]	; (80084fc <_printf_float+0x2f0>)
 800848e:	2301      	movs	r3, #1
 8008490:	4631      	mov	r1, r6
 8008492:	4628      	mov	r0, r5
 8008494:	47b8      	blx	r7
 8008496:	3001      	adds	r0, #1
 8008498:	f43f af19 	beq.w	80082ce <_printf_float+0xc2>
 800849c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084a0:	4313      	orrs	r3, r2
 80084a2:	d102      	bne.n	80084aa <_printf_float+0x29e>
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	07d9      	lsls	r1, r3, #31
 80084a8:	d5d8      	bpl.n	800845c <_printf_float+0x250>
 80084aa:	ee18 3a10 	vmov	r3, s16
 80084ae:	4652      	mov	r2, sl
 80084b0:	4631      	mov	r1, r6
 80084b2:	4628      	mov	r0, r5
 80084b4:	47b8      	blx	r7
 80084b6:	3001      	adds	r0, #1
 80084b8:	f43f af09 	beq.w	80082ce <_printf_float+0xc2>
 80084bc:	f04f 0900 	mov.w	r9, #0
 80084c0:	f104 0a1a 	add.w	sl, r4, #26
 80084c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c6:	425b      	negs	r3, r3
 80084c8:	454b      	cmp	r3, r9
 80084ca:	dc01      	bgt.n	80084d0 <_printf_float+0x2c4>
 80084cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ce:	e792      	b.n	80083f6 <_printf_float+0x1ea>
 80084d0:	2301      	movs	r3, #1
 80084d2:	4652      	mov	r2, sl
 80084d4:	4631      	mov	r1, r6
 80084d6:	4628      	mov	r0, r5
 80084d8:	47b8      	blx	r7
 80084da:	3001      	adds	r0, #1
 80084dc:	f43f aef7 	beq.w	80082ce <_printf_float+0xc2>
 80084e0:	f109 0901 	add.w	r9, r9, #1
 80084e4:	e7ee      	b.n	80084c4 <_printf_float+0x2b8>
 80084e6:	bf00      	nop
 80084e8:	7fefffff 	.word	0x7fefffff
 80084ec:	0800ff54 	.word	0x0800ff54
 80084f0:	0800ff58 	.word	0x0800ff58
 80084f4:	0800ff60 	.word	0x0800ff60
 80084f8:	0800ff5c 	.word	0x0800ff5c
 80084fc:	08010359 	.word	0x08010359
 8008500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008502:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008504:	429a      	cmp	r2, r3
 8008506:	bfa8      	it	ge
 8008508:	461a      	movge	r2, r3
 800850a:	2a00      	cmp	r2, #0
 800850c:	4691      	mov	r9, r2
 800850e:	dc37      	bgt.n	8008580 <_printf_float+0x374>
 8008510:	f04f 0b00 	mov.w	fp, #0
 8008514:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008518:	f104 021a 	add.w	r2, r4, #26
 800851c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800851e:	9305      	str	r3, [sp, #20]
 8008520:	eba3 0309 	sub.w	r3, r3, r9
 8008524:	455b      	cmp	r3, fp
 8008526:	dc33      	bgt.n	8008590 <_printf_float+0x384>
 8008528:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800852c:	429a      	cmp	r2, r3
 800852e:	db3b      	blt.n	80085a8 <_printf_float+0x39c>
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	07da      	lsls	r2, r3, #31
 8008534:	d438      	bmi.n	80085a8 <_printf_float+0x39c>
 8008536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008538:	9a05      	ldr	r2, [sp, #20]
 800853a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800853c:	1a9a      	subs	r2, r3, r2
 800853e:	eba3 0901 	sub.w	r9, r3, r1
 8008542:	4591      	cmp	r9, r2
 8008544:	bfa8      	it	ge
 8008546:	4691      	movge	r9, r2
 8008548:	f1b9 0f00 	cmp.w	r9, #0
 800854c:	dc35      	bgt.n	80085ba <_printf_float+0x3ae>
 800854e:	f04f 0800 	mov.w	r8, #0
 8008552:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008556:	f104 0a1a 	add.w	sl, r4, #26
 800855a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800855e:	1a9b      	subs	r3, r3, r2
 8008560:	eba3 0309 	sub.w	r3, r3, r9
 8008564:	4543      	cmp	r3, r8
 8008566:	f77f af79 	ble.w	800845c <_printf_float+0x250>
 800856a:	2301      	movs	r3, #1
 800856c:	4652      	mov	r2, sl
 800856e:	4631      	mov	r1, r6
 8008570:	4628      	mov	r0, r5
 8008572:	47b8      	blx	r7
 8008574:	3001      	adds	r0, #1
 8008576:	f43f aeaa 	beq.w	80082ce <_printf_float+0xc2>
 800857a:	f108 0801 	add.w	r8, r8, #1
 800857e:	e7ec      	b.n	800855a <_printf_float+0x34e>
 8008580:	4613      	mov	r3, r2
 8008582:	4631      	mov	r1, r6
 8008584:	4642      	mov	r2, r8
 8008586:	4628      	mov	r0, r5
 8008588:	47b8      	blx	r7
 800858a:	3001      	adds	r0, #1
 800858c:	d1c0      	bne.n	8008510 <_printf_float+0x304>
 800858e:	e69e      	b.n	80082ce <_printf_float+0xc2>
 8008590:	2301      	movs	r3, #1
 8008592:	4631      	mov	r1, r6
 8008594:	4628      	mov	r0, r5
 8008596:	9205      	str	r2, [sp, #20]
 8008598:	47b8      	blx	r7
 800859a:	3001      	adds	r0, #1
 800859c:	f43f ae97 	beq.w	80082ce <_printf_float+0xc2>
 80085a0:	9a05      	ldr	r2, [sp, #20]
 80085a2:	f10b 0b01 	add.w	fp, fp, #1
 80085a6:	e7b9      	b.n	800851c <_printf_float+0x310>
 80085a8:	ee18 3a10 	vmov	r3, s16
 80085ac:	4652      	mov	r2, sl
 80085ae:	4631      	mov	r1, r6
 80085b0:	4628      	mov	r0, r5
 80085b2:	47b8      	blx	r7
 80085b4:	3001      	adds	r0, #1
 80085b6:	d1be      	bne.n	8008536 <_printf_float+0x32a>
 80085b8:	e689      	b.n	80082ce <_printf_float+0xc2>
 80085ba:	9a05      	ldr	r2, [sp, #20]
 80085bc:	464b      	mov	r3, r9
 80085be:	4442      	add	r2, r8
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	d1c1      	bne.n	800854e <_printf_float+0x342>
 80085ca:	e680      	b.n	80082ce <_printf_float+0xc2>
 80085cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ce:	2a01      	cmp	r2, #1
 80085d0:	dc01      	bgt.n	80085d6 <_printf_float+0x3ca>
 80085d2:	07db      	lsls	r3, r3, #31
 80085d4:	d538      	bpl.n	8008648 <_printf_float+0x43c>
 80085d6:	2301      	movs	r3, #1
 80085d8:	4642      	mov	r2, r8
 80085da:	4631      	mov	r1, r6
 80085dc:	4628      	mov	r0, r5
 80085de:	47b8      	blx	r7
 80085e0:	3001      	adds	r0, #1
 80085e2:	f43f ae74 	beq.w	80082ce <_printf_float+0xc2>
 80085e6:	ee18 3a10 	vmov	r3, s16
 80085ea:	4652      	mov	r2, sl
 80085ec:	4631      	mov	r1, r6
 80085ee:	4628      	mov	r0, r5
 80085f0:	47b8      	blx	r7
 80085f2:	3001      	adds	r0, #1
 80085f4:	f43f ae6b 	beq.w	80082ce <_printf_float+0xc2>
 80085f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085fc:	2200      	movs	r2, #0
 80085fe:	2300      	movs	r3, #0
 8008600:	f7f8 fa7a 	bl	8000af8 <__aeabi_dcmpeq>
 8008604:	b9d8      	cbnz	r0, 800863e <_printf_float+0x432>
 8008606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008608:	f108 0201 	add.w	r2, r8, #1
 800860c:	3b01      	subs	r3, #1
 800860e:	4631      	mov	r1, r6
 8008610:	4628      	mov	r0, r5
 8008612:	47b8      	blx	r7
 8008614:	3001      	adds	r0, #1
 8008616:	d10e      	bne.n	8008636 <_printf_float+0x42a>
 8008618:	e659      	b.n	80082ce <_printf_float+0xc2>
 800861a:	2301      	movs	r3, #1
 800861c:	4652      	mov	r2, sl
 800861e:	4631      	mov	r1, r6
 8008620:	4628      	mov	r0, r5
 8008622:	47b8      	blx	r7
 8008624:	3001      	adds	r0, #1
 8008626:	f43f ae52 	beq.w	80082ce <_printf_float+0xc2>
 800862a:	f108 0801 	add.w	r8, r8, #1
 800862e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008630:	3b01      	subs	r3, #1
 8008632:	4543      	cmp	r3, r8
 8008634:	dcf1      	bgt.n	800861a <_printf_float+0x40e>
 8008636:	464b      	mov	r3, r9
 8008638:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800863c:	e6dc      	b.n	80083f8 <_printf_float+0x1ec>
 800863e:	f04f 0800 	mov.w	r8, #0
 8008642:	f104 0a1a 	add.w	sl, r4, #26
 8008646:	e7f2      	b.n	800862e <_printf_float+0x422>
 8008648:	2301      	movs	r3, #1
 800864a:	4642      	mov	r2, r8
 800864c:	e7df      	b.n	800860e <_printf_float+0x402>
 800864e:	2301      	movs	r3, #1
 8008650:	464a      	mov	r2, r9
 8008652:	4631      	mov	r1, r6
 8008654:	4628      	mov	r0, r5
 8008656:	47b8      	blx	r7
 8008658:	3001      	adds	r0, #1
 800865a:	f43f ae38 	beq.w	80082ce <_printf_float+0xc2>
 800865e:	f108 0801 	add.w	r8, r8, #1
 8008662:	68e3      	ldr	r3, [r4, #12]
 8008664:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008666:	1a5b      	subs	r3, r3, r1
 8008668:	4543      	cmp	r3, r8
 800866a:	dcf0      	bgt.n	800864e <_printf_float+0x442>
 800866c:	e6fa      	b.n	8008464 <_printf_float+0x258>
 800866e:	f04f 0800 	mov.w	r8, #0
 8008672:	f104 0919 	add.w	r9, r4, #25
 8008676:	e7f4      	b.n	8008662 <_printf_float+0x456>

08008678 <_printf_common>:
 8008678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800867c:	4616      	mov	r6, r2
 800867e:	4699      	mov	r9, r3
 8008680:	688a      	ldr	r2, [r1, #8]
 8008682:	690b      	ldr	r3, [r1, #16]
 8008684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008688:	4293      	cmp	r3, r2
 800868a:	bfb8      	it	lt
 800868c:	4613      	movlt	r3, r2
 800868e:	6033      	str	r3, [r6, #0]
 8008690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008694:	4607      	mov	r7, r0
 8008696:	460c      	mov	r4, r1
 8008698:	b10a      	cbz	r2, 800869e <_printf_common+0x26>
 800869a:	3301      	adds	r3, #1
 800869c:	6033      	str	r3, [r6, #0]
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	0699      	lsls	r1, r3, #26
 80086a2:	bf42      	ittt	mi
 80086a4:	6833      	ldrmi	r3, [r6, #0]
 80086a6:	3302      	addmi	r3, #2
 80086a8:	6033      	strmi	r3, [r6, #0]
 80086aa:	6825      	ldr	r5, [r4, #0]
 80086ac:	f015 0506 	ands.w	r5, r5, #6
 80086b0:	d106      	bne.n	80086c0 <_printf_common+0x48>
 80086b2:	f104 0a19 	add.w	sl, r4, #25
 80086b6:	68e3      	ldr	r3, [r4, #12]
 80086b8:	6832      	ldr	r2, [r6, #0]
 80086ba:	1a9b      	subs	r3, r3, r2
 80086bc:	42ab      	cmp	r3, r5
 80086be:	dc26      	bgt.n	800870e <_printf_common+0x96>
 80086c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086c4:	1e13      	subs	r3, r2, #0
 80086c6:	6822      	ldr	r2, [r4, #0]
 80086c8:	bf18      	it	ne
 80086ca:	2301      	movne	r3, #1
 80086cc:	0692      	lsls	r2, r2, #26
 80086ce:	d42b      	bmi.n	8008728 <_printf_common+0xb0>
 80086d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086d4:	4649      	mov	r1, r9
 80086d6:	4638      	mov	r0, r7
 80086d8:	47c0      	blx	r8
 80086da:	3001      	adds	r0, #1
 80086dc:	d01e      	beq.n	800871c <_printf_common+0xa4>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	68e5      	ldr	r5, [r4, #12]
 80086e2:	6832      	ldr	r2, [r6, #0]
 80086e4:	f003 0306 	and.w	r3, r3, #6
 80086e8:	2b04      	cmp	r3, #4
 80086ea:	bf08      	it	eq
 80086ec:	1aad      	subeq	r5, r5, r2
 80086ee:	68a3      	ldr	r3, [r4, #8]
 80086f0:	6922      	ldr	r2, [r4, #16]
 80086f2:	bf0c      	ite	eq
 80086f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086f8:	2500      	movne	r5, #0
 80086fa:	4293      	cmp	r3, r2
 80086fc:	bfc4      	itt	gt
 80086fe:	1a9b      	subgt	r3, r3, r2
 8008700:	18ed      	addgt	r5, r5, r3
 8008702:	2600      	movs	r6, #0
 8008704:	341a      	adds	r4, #26
 8008706:	42b5      	cmp	r5, r6
 8008708:	d11a      	bne.n	8008740 <_printf_common+0xc8>
 800870a:	2000      	movs	r0, #0
 800870c:	e008      	b.n	8008720 <_printf_common+0xa8>
 800870e:	2301      	movs	r3, #1
 8008710:	4652      	mov	r2, sl
 8008712:	4649      	mov	r1, r9
 8008714:	4638      	mov	r0, r7
 8008716:	47c0      	blx	r8
 8008718:	3001      	adds	r0, #1
 800871a:	d103      	bne.n	8008724 <_printf_common+0xac>
 800871c:	f04f 30ff 	mov.w	r0, #4294967295
 8008720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008724:	3501      	adds	r5, #1
 8008726:	e7c6      	b.n	80086b6 <_printf_common+0x3e>
 8008728:	18e1      	adds	r1, r4, r3
 800872a:	1c5a      	adds	r2, r3, #1
 800872c:	2030      	movs	r0, #48	; 0x30
 800872e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008732:	4422      	add	r2, r4
 8008734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800873c:	3302      	adds	r3, #2
 800873e:	e7c7      	b.n	80086d0 <_printf_common+0x58>
 8008740:	2301      	movs	r3, #1
 8008742:	4622      	mov	r2, r4
 8008744:	4649      	mov	r1, r9
 8008746:	4638      	mov	r0, r7
 8008748:	47c0      	blx	r8
 800874a:	3001      	adds	r0, #1
 800874c:	d0e6      	beq.n	800871c <_printf_common+0xa4>
 800874e:	3601      	adds	r6, #1
 8008750:	e7d9      	b.n	8008706 <_printf_common+0x8e>
	...

08008754 <_printf_i>:
 8008754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008758:	7e0f      	ldrb	r7, [r1, #24]
 800875a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800875c:	2f78      	cmp	r7, #120	; 0x78
 800875e:	4691      	mov	r9, r2
 8008760:	4680      	mov	r8, r0
 8008762:	460c      	mov	r4, r1
 8008764:	469a      	mov	sl, r3
 8008766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800876a:	d807      	bhi.n	800877c <_printf_i+0x28>
 800876c:	2f62      	cmp	r7, #98	; 0x62
 800876e:	d80a      	bhi.n	8008786 <_printf_i+0x32>
 8008770:	2f00      	cmp	r7, #0
 8008772:	f000 80d8 	beq.w	8008926 <_printf_i+0x1d2>
 8008776:	2f58      	cmp	r7, #88	; 0x58
 8008778:	f000 80a3 	beq.w	80088c2 <_printf_i+0x16e>
 800877c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008784:	e03a      	b.n	80087fc <_printf_i+0xa8>
 8008786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800878a:	2b15      	cmp	r3, #21
 800878c:	d8f6      	bhi.n	800877c <_printf_i+0x28>
 800878e:	a101      	add	r1, pc, #4	; (adr r1, 8008794 <_printf_i+0x40>)
 8008790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008794:	080087ed 	.word	0x080087ed
 8008798:	08008801 	.word	0x08008801
 800879c:	0800877d 	.word	0x0800877d
 80087a0:	0800877d 	.word	0x0800877d
 80087a4:	0800877d 	.word	0x0800877d
 80087a8:	0800877d 	.word	0x0800877d
 80087ac:	08008801 	.word	0x08008801
 80087b0:	0800877d 	.word	0x0800877d
 80087b4:	0800877d 	.word	0x0800877d
 80087b8:	0800877d 	.word	0x0800877d
 80087bc:	0800877d 	.word	0x0800877d
 80087c0:	0800890d 	.word	0x0800890d
 80087c4:	08008831 	.word	0x08008831
 80087c8:	080088ef 	.word	0x080088ef
 80087cc:	0800877d 	.word	0x0800877d
 80087d0:	0800877d 	.word	0x0800877d
 80087d4:	0800892f 	.word	0x0800892f
 80087d8:	0800877d 	.word	0x0800877d
 80087dc:	08008831 	.word	0x08008831
 80087e0:	0800877d 	.word	0x0800877d
 80087e4:	0800877d 	.word	0x0800877d
 80087e8:	080088f7 	.word	0x080088f7
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	1d1a      	adds	r2, r3, #4
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	602a      	str	r2, [r5, #0]
 80087f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087fc:	2301      	movs	r3, #1
 80087fe:	e0a3      	b.n	8008948 <_printf_i+0x1f4>
 8008800:	6820      	ldr	r0, [r4, #0]
 8008802:	6829      	ldr	r1, [r5, #0]
 8008804:	0606      	lsls	r6, r0, #24
 8008806:	f101 0304 	add.w	r3, r1, #4
 800880a:	d50a      	bpl.n	8008822 <_printf_i+0xce>
 800880c:	680e      	ldr	r6, [r1, #0]
 800880e:	602b      	str	r3, [r5, #0]
 8008810:	2e00      	cmp	r6, #0
 8008812:	da03      	bge.n	800881c <_printf_i+0xc8>
 8008814:	232d      	movs	r3, #45	; 0x2d
 8008816:	4276      	negs	r6, r6
 8008818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800881c:	485e      	ldr	r0, [pc, #376]	; (8008998 <_printf_i+0x244>)
 800881e:	230a      	movs	r3, #10
 8008820:	e019      	b.n	8008856 <_printf_i+0x102>
 8008822:	680e      	ldr	r6, [r1, #0]
 8008824:	602b      	str	r3, [r5, #0]
 8008826:	f010 0f40 	tst.w	r0, #64	; 0x40
 800882a:	bf18      	it	ne
 800882c:	b236      	sxthne	r6, r6
 800882e:	e7ef      	b.n	8008810 <_printf_i+0xbc>
 8008830:	682b      	ldr	r3, [r5, #0]
 8008832:	6820      	ldr	r0, [r4, #0]
 8008834:	1d19      	adds	r1, r3, #4
 8008836:	6029      	str	r1, [r5, #0]
 8008838:	0601      	lsls	r1, r0, #24
 800883a:	d501      	bpl.n	8008840 <_printf_i+0xec>
 800883c:	681e      	ldr	r6, [r3, #0]
 800883e:	e002      	b.n	8008846 <_printf_i+0xf2>
 8008840:	0646      	lsls	r6, r0, #25
 8008842:	d5fb      	bpl.n	800883c <_printf_i+0xe8>
 8008844:	881e      	ldrh	r6, [r3, #0]
 8008846:	4854      	ldr	r0, [pc, #336]	; (8008998 <_printf_i+0x244>)
 8008848:	2f6f      	cmp	r7, #111	; 0x6f
 800884a:	bf0c      	ite	eq
 800884c:	2308      	moveq	r3, #8
 800884e:	230a      	movne	r3, #10
 8008850:	2100      	movs	r1, #0
 8008852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008856:	6865      	ldr	r5, [r4, #4]
 8008858:	60a5      	str	r5, [r4, #8]
 800885a:	2d00      	cmp	r5, #0
 800885c:	bfa2      	ittt	ge
 800885e:	6821      	ldrge	r1, [r4, #0]
 8008860:	f021 0104 	bicge.w	r1, r1, #4
 8008864:	6021      	strge	r1, [r4, #0]
 8008866:	b90e      	cbnz	r6, 800886c <_printf_i+0x118>
 8008868:	2d00      	cmp	r5, #0
 800886a:	d04d      	beq.n	8008908 <_printf_i+0x1b4>
 800886c:	4615      	mov	r5, r2
 800886e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008872:	fb03 6711 	mls	r7, r3, r1, r6
 8008876:	5dc7      	ldrb	r7, [r0, r7]
 8008878:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800887c:	4637      	mov	r7, r6
 800887e:	42bb      	cmp	r3, r7
 8008880:	460e      	mov	r6, r1
 8008882:	d9f4      	bls.n	800886e <_printf_i+0x11a>
 8008884:	2b08      	cmp	r3, #8
 8008886:	d10b      	bne.n	80088a0 <_printf_i+0x14c>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	07de      	lsls	r6, r3, #31
 800888c:	d508      	bpl.n	80088a0 <_printf_i+0x14c>
 800888e:	6923      	ldr	r3, [r4, #16]
 8008890:	6861      	ldr	r1, [r4, #4]
 8008892:	4299      	cmp	r1, r3
 8008894:	bfde      	ittt	le
 8008896:	2330      	movle	r3, #48	; 0x30
 8008898:	f805 3c01 	strble.w	r3, [r5, #-1]
 800889c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088a0:	1b52      	subs	r2, r2, r5
 80088a2:	6122      	str	r2, [r4, #16]
 80088a4:	f8cd a000 	str.w	sl, [sp]
 80088a8:	464b      	mov	r3, r9
 80088aa:	aa03      	add	r2, sp, #12
 80088ac:	4621      	mov	r1, r4
 80088ae:	4640      	mov	r0, r8
 80088b0:	f7ff fee2 	bl	8008678 <_printf_common>
 80088b4:	3001      	adds	r0, #1
 80088b6:	d14c      	bne.n	8008952 <_printf_i+0x1fe>
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
 80088bc:	b004      	add	sp, #16
 80088be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c2:	4835      	ldr	r0, [pc, #212]	; (8008998 <_printf_i+0x244>)
 80088c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088c8:	6829      	ldr	r1, [r5, #0]
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80088d0:	6029      	str	r1, [r5, #0]
 80088d2:	061d      	lsls	r5, r3, #24
 80088d4:	d514      	bpl.n	8008900 <_printf_i+0x1ac>
 80088d6:	07df      	lsls	r7, r3, #31
 80088d8:	bf44      	itt	mi
 80088da:	f043 0320 	orrmi.w	r3, r3, #32
 80088de:	6023      	strmi	r3, [r4, #0]
 80088e0:	b91e      	cbnz	r6, 80088ea <_printf_i+0x196>
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	f023 0320 	bic.w	r3, r3, #32
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	2310      	movs	r3, #16
 80088ec:	e7b0      	b.n	8008850 <_printf_i+0xfc>
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	f043 0320 	orr.w	r3, r3, #32
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	2378      	movs	r3, #120	; 0x78
 80088f8:	4828      	ldr	r0, [pc, #160]	; (800899c <_printf_i+0x248>)
 80088fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088fe:	e7e3      	b.n	80088c8 <_printf_i+0x174>
 8008900:	0659      	lsls	r1, r3, #25
 8008902:	bf48      	it	mi
 8008904:	b2b6      	uxthmi	r6, r6
 8008906:	e7e6      	b.n	80088d6 <_printf_i+0x182>
 8008908:	4615      	mov	r5, r2
 800890a:	e7bb      	b.n	8008884 <_printf_i+0x130>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	6826      	ldr	r6, [r4, #0]
 8008910:	6961      	ldr	r1, [r4, #20]
 8008912:	1d18      	adds	r0, r3, #4
 8008914:	6028      	str	r0, [r5, #0]
 8008916:	0635      	lsls	r5, r6, #24
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	d501      	bpl.n	8008920 <_printf_i+0x1cc>
 800891c:	6019      	str	r1, [r3, #0]
 800891e:	e002      	b.n	8008926 <_printf_i+0x1d2>
 8008920:	0670      	lsls	r0, r6, #25
 8008922:	d5fb      	bpl.n	800891c <_printf_i+0x1c8>
 8008924:	8019      	strh	r1, [r3, #0]
 8008926:	2300      	movs	r3, #0
 8008928:	6123      	str	r3, [r4, #16]
 800892a:	4615      	mov	r5, r2
 800892c:	e7ba      	b.n	80088a4 <_printf_i+0x150>
 800892e:	682b      	ldr	r3, [r5, #0]
 8008930:	1d1a      	adds	r2, r3, #4
 8008932:	602a      	str	r2, [r5, #0]
 8008934:	681d      	ldr	r5, [r3, #0]
 8008936:	6862      	ldr	r2, [r4, #4]
 8008938:	2100      	movs	r1, #0
 800893a:	4628      	mov	r0, r5
 800893c:	f7f7 fc68 	bl	8000210 <memchr>
 8008940:	b108      	cbz	r0, 8008946 <_printf_i+0x1f2>
 8008942:	1b40      	subs	r0, r0, r5
 8008944:	6060      	str	r0, [r4, #4]
 8008946:	6863      	ldr	r3, [r4, #4]
 8008948:	6123      	str	r3, [r4, #16]
 800894a:	2300      	movs	r3, #0
 800894c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008950:	e7a8      	b.n	80088a4 <_printf_i+0x150>
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	462a      	mov	r2, r5
 8008956:	4649      	mov	r1, r9
 8008958:	4640      	mov	r0, r8
 800895a:	47d0      	blx	sl
 800895c:	3001      	adds	r0, #1
 800895e:	d0ab      	beq.n	80088b8 <_printf_i+0x164>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	079b      	lsls	r3, r3, #30
 8008964:	d413      	bmi.n	800898e <_printf_i+0x23a>
 8008966:	68e0      	ldr	r0, [r4, #12]
 8008968:	9b03      	ldr	r3, [sp, #12]
 800896a:	4298      	cmp	r0, r3
 800896c:	bfb8      	it	lt
 800896e:	4618      	movlt	r0, r3
 8008970:	e7a4      	b.n	80088bc <_printf_i+0x168>
 8008972:	2301      	movs	r3, #1
 8008974:	4632      	mov	r2, r6
 8008976:	4649      	mov	r1, r9
 8008978:	4640      	mov	r0, r8
 800897a:	47d0      	blx	sl
 800897c:	3001      	adds	r0, #1
 800897e:	d09b      	beq.n	80088b8 <_printf_i+0x164>
 8008980:	3501      	adds	r5, #1
 8008982:	68e3      	ldr	r3, [r4, #12]
 8008984:	9903      	ldr	r1, [sp, #12]
 8008986:	1a5b      	subs	r3, r3, r1
 8008988:	42ab      	cmp	r3, r5
 800898a:	dcf2      	bgt.n	8008972 <_printf_i+0x21e>
 800898c:	e7eb      	b.n	8008966 <_printf_i+0x212>
 800898e:	2500      	movs	r5, #0
 8008990:	f104 0619 	add.w	r6, r4, #25
 8008994:	e7f5      	b.n	8008982 <_printf_i+0x22e>
 8008996:	bf00      	nop
 8008998:	0800ff64 	.word	0x0800ff64
 800899c:	0800ff75 	.word	0x0800ff75

080089a0 <_scanf_float>:
 80089a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a4:	b087      	sub	sp, #28
 80089a6:	4617      	mov	r7, r2
 80089a8:	9303      	str	r3, [sp, #12]
 80089aa:	688b      	ldr	r3, [r1, #8]
 80089ac:	1e5a      	subs	r2, r3, #1
 80089ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80089b2:	bf83      	ittte	hi
 80089b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80089b8:	195b      	addhi	r3, r3, r5
 80089ba:	9302      	strhi	r3, [sp, #8]
 80089bc:	2300      	movls	r3, #0
 80089be:	bf86      	itte	hi
 80089c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089c4:	608b      	strhi	r3, [r1, #8]
 80089c6:	9302      	strls	r3, [sp, #8]
 80089c8:	680b      	ldr	r3, [r1, #0]
 80089ca:	468b      	mov	fp, r1
 80089cc:	2500      	movs	r5, #0
 80089ce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80089d2:	f84b 3b1c 	str.w	r3, [fp], #28
 80089d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80089da:	4680      	mov	r8, r0
 80089dc:	460c      	mov	r4, r1
 80089de:	465e      	mov	r6, fp
 80089e0:	46aa      	mov	sl, r5
 80089e2:	46a9      	mov	r9, r5
 80089e4:	9501      	str	r5, [sp, #4]
 80089e6:	68a2      	ldr	r2, [r4, #8]
 80089e8:	b152      	cbz	r2, 8008a00 <_scanf_float+0x60>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b4e      	cmp	r3, #78	; 0x4e
 80089f0:	d864      	bhi.n	8008abc <_scanf_float+0x11c>
 80089f2:	2b40      	cmp	r3, #64	; 0x40
 80089f4:	d83c      	bhi.n	8008a70 <_scanf_float+0xd0>
 80089f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80089fa:	b2c8      	uxtb	r0, r1
 80089fc:	280e      	cmp	r0, #14
 80089fe:	d93a      	bls.n	8008a76 <_scanf_float+0xd6>
 8008a00:	f1b9 0f00 	cmp.w	r9, #0
 8008a04:	d003      	beq.n	8008a0e <_scanf_float+0x6e>
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a12:	f1ba 0f01 	cmp.w	sl, #1
 8008a16:	f200 8113 	bhi.w	8008c40 <_scanf_float+0x2a0>
 8008a1a:	455e      	cmp	r6, fp
 8008a1c:	f200 8105 	bhi.w	8008c2a <_scanf_float+0x28a>
 8008a20:	2501      	movs	r5, #1
 8008a22:	4628      	mov	r0, r5
 8008a24:	b007      	add	sp, #28
 8008a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008a2e:	2a0d      	cmp	r2, #13
 8008a30:	d8e6      	bhi.n	8008a00 <_scanf_float+0x60>
 8008a32:	a101      	add	r1, pc, #4	; (adr r1, 8008a38 <_scanf_float+0x98>)
 8008a34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a38:	08008b77 	.word	0x08008b77
 8008a3c:	08008a01 	.word	0x08008a01
 8008a40:	08008a01 	.word	0x08008a01
 8008a44:	08008a01 	.word	0x08008a01
 8008a48:	08008bd7 	.word	0x08008bd7
 8008a4c:	08008baf 	.word	0x08008baf
 8008a50:	08008a01 	.word	0x08008a01
 8008a54:	08008a01 	.word	0x08008a01
 8008a58:	08008b85 	.word	0x08008b85
 8008a5c:	08008a01 	.word	0x08008a01
 8008a60:	08008a01 	.word	0x08008a01
 8008a64:	08008a01 	.word	0x08008a01
 8008a68:	08008a01 	.word	0x08008a01
 8008a6c:	08008b3d 	.word	0x08008b3d
 8008a70:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008a74:	e7db      	b.n	8008a2e <_scanf_float+0x8e>
 8008a76:	290e      	cmp	r1, #14
 8008a78:	d8c2      	bhi.n	8008a00 <_scanf_float+0x60>
 8008a7a:	a001      	add	r0, pc, #4	; (adr r0, 8008a80 <_scanf_float+0xe0>)
 8008a7c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008a80:	08008b2f 	.word	0x08008b2f
 8008a84:	08008a01 	.word	0x08008a01
 8008a88:	08008b2f 	.word	0x08008b2f
 8008a8c:	08008bc3 	.word	0x08008bc3
 8008a90:	08008a01 	.word	0x08008a01
 8008a94:	08008add 	.word	0x08008add
 8008a98:	08008b19 	.word	0x08008b19
 8008a9c:	08008b19 	.word	0x08008b19
 8008aa0:	08008b19 	.word	0x08008b19
 8008aa4:	08008b19 	.word	0x08008b19
 8008aa8:	08008b19 	.word	0x08008b19
 8008aac:	08008b19 	.word	0x08008b19
 8008ab0:	08008b19 	.word	0x08008b19
 8008ab4:	08008b19 	.word	0x08008b19
 8008ab8:	08008b19 	.word	0x08008b19
 8008abc:	2b6e      	cmp	r3, #110	; 0x6e
 8008abe:	d809      	bhi.n	8008ad4 <_scanf_float+0x134>
 8008ac0:	2b60      	cmp	r3, #96	; 0x60
 8008ac2:	d8b2      	bhi.n	8008a2a <_scanf_float+0x8a>
 8008ac4:	2b54      	cmp	r3, #84	; 0x54
 8008ac6:	d077      	beq.n	8008bb8 <_scanf_float+0x218>
 8008ac8:	2b59      	cmp	r3, #89	; 0x59
 8008aca:	d199      	bne.n	8008a00 <_scanf_float+0x60>
 8008acc:	2d07      	cmp	r5, #7
 8008ace:	d197      	bne.n	8008a00 <_scanf_float+0x60>
 8008ad0:	2508      	movs	r5, #8
 8008ad2:	e029      	b.n	8008b28 <_scanf_float+0x188>
 8008ad4:	2b74      	cmp	r3, #116	; 0x74
 8008ad6:	d06f      	beq.n	8008bb8 <_scanf_float+0x218>
 8008ad8:	2b79      	cmp	r3, #121	; 0x79
 8008ada:	e7f6      	b.n	8008aca <_scanf_float+0x12a>
 8008adc:	6821      	ldr	r1, [r4, #0]
 8008ade:	05c8      	lsls	r0, r1, #23
 8008ae0:	d51a      	bpl.n	8008b18 <_scanf_float+0x178>
 8008ae2:	9b02      	ldr	r3, [sp, #8]
 8008ae4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ae8:	6021      	str	r1, [r4, #0]
 8008aea:	f109 0901 	add.w	r9, r9, #1
 8008aee:	b11b      	cbz	r3, 8008af8 <_scanf_float+0x158>
 8008af0:	3b01      	subs	r3, #1
 8008af2:	3201      	adds	r2, #1
 8008af4:	9302      	str	r3, [sp, #8]
 8008af6:	60a2      	str	r2, [r4, #8]
 8008af8:	68a3      	ldr	r3, [r4, #8]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	60a3      	str	r3, [r4, #8]
 8008afe:	6923      	ldr	r3, [r4, #16]
 8008b00:	3301      	adds	r3, #1
 8008b02:	6123      	str	r3, [r4, #16]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	607b      	str	r3, [r7, #4]
 8008b0c:	f340 8084 	ble.w	8008c18 <_scanf_float+0x278>
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	3301      	adds	r3, #1
 8008b14:	603b      	str	r3, [r7, #0]
 8008b16:	e766      	b.n	80089e6 <_scanf_float+0x46>
 8008b18:	eb1a 0f05 	cmn.w	sl, r5
 8008b1c:	f47f af70 	bne.w	8008a00 <_scanf_float+0x60>
 8008b20:	6822      	ldr	r2, [r4, #0]
 8008b22:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008b26:	6022      	str	r2, [r4, #0]
 8008b28:	f806 3b01 	strb.w	r3, [r6], #1
 8008b2c:	e7e4      	b.n	8008af8 <_scanf_float+0x158>
 8008b2e:	6822      	ldr	r2, [r4, #0]
 8008b30:	0610      	lsls	r0, r2, #24
 8008b32:	f57f af65 	bpl.w	8008a00 <_scanf_float+0x60>
 8008b36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b3a:	e7f4      	b.n	8008b26 <_scanf_float+0x186>
 8008b3c:	f1ba 0f00 	cmp.w	sl, #0
 8008b40:	d10e      	bne.n	8008b60 <_scanf_float+0x1c0>
 8008b42:	f1b9 0f00 	cmp.w	r9, #0
 8008b46:	d10e      	bne.n	8008b66 <_scanf_float+0x1c6>
 8008b48:	6822      	ldr	r2, [r4, #0]
 8008b4a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b4e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b52:	d108      	bne.n	8008b66 <_scanf_float+0x1c6>
 8008b54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b58:	6022      	str	r2, [r4, #0]
 8008b5a:	f04f 0a01 	mov.w	sl, #1
 8008b5e:	e7e3      	b.n	8008b28 <_scanf_float+0x188>
 8008b60:	f1ba 0f02 	cmp.w	sl, #2
 8008b64:	d055      	beq.n	8008c12 <_scanf_float+0x272>
 8008b66:	2d01      	cmp	r5, #1
 8008b68:	d002      	beq.n	8008b70 <_scanf_float+0x1d0>
 8008b6a:	2d04      	cmp	r5, #4
 8008b6c:	f47f af48 	bne.w	8008a00 <_scanf_float+0x60>
 8008b70:	3501      	adds	r5, #1
 8008b72:	b2ed      	uxtb	r5, r5
 8008b74:	e7d8      	b.n	8008b28 <_scanf_float+0x188>
 8008b76:	f1ba 0f01 	cmp.w	sl, #1
 8008b7a:	f47f af41 	bne.w	8008a00 <_scanf_float+0x60>
 8008b7e:	f04f 0a02 	mov.w	sl, #2
 8008b82:	e7d1      	b.n	8008b28 <_scanf_float+0x188>
 8008b84:	b97d      	cbnz	r5, 8008ba6 <_scanf_float+0x206>
 8008b86:	f1b9 0f00 	cmp.w	r9, #0
 8008b8a:	f47f af3c 	bne.w	8008a06 <_scanf_float+0x66>
 8008b8e:	6822      	ldr	r2, [r4, #0]
 8008b90:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b94:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b98:	f47f af39 	bne.w	8008a0e <_scanf_float+0x6e>
 8008b9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ba0:	6022      	str	r2, [r4, #0]
 8008ba2:	2501      	movs	r5, #1
 8008ba4:	e7c0      	b.n	8008b28 <_scanf_float+0x188>
 8008ba6:	2d03      	cmp	r5, #3
 8008ba8:	d0e2      	beq.n	8008b70 <_scanf_float+0x1d0>
 8008baa:	2d05      	cmp	r5, #5
 8008bac:	e7de      	b.n	8008b6c <_scanf_float+0x1cc>
 8008bae:	2d02      	cmp	r5, #2
 8008bb0:	f47f af26 	bne.w	8008a00 <_scanf_float+0x60>
 8008bb4:	2503      	movs	r5, #3
 8008bb6:	e7b7      	b.n	8008b28 <_scanf_float+0x188>
 8008bb8:	2d06      	cmp	r5, #6
 8008bba:	f47f af21 	bne.w	8008a00 <_scanf_float+0x60>
 8008bbe:	2507      	movs	r5, #7
 8008bc0:	e7b2      	b.n	8008b28 <_scanf_float+0x188>
 8008bc2:	6822      	ldr	r2, [r4, #0]
 8008bc4:	0591      	lsls	r1, r2, #22
 8008bc6:	f57f af1b 	bpl.w	8008a00 <_scanf_float+0x60>
 8008bca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008bce:	6022      	str	r2, [r4, #0]
 8008bd0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bd4:	e7a8      	b.n	8008b28 <_scanf_float+0x188>
 8008bd6:	6822      	ldr	r2, [r4, #0]
 8008bd8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008bdc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008be0:	d006      	beq.n	8008bf0 <_scanf_float+0x250>
 8008be2:	0550      	lsls	r0, r2, #21
 8008be4:	f57f af0c 	bpl.w	8008a00 <_scanf_float+0x60>
 8008be8:	f1b9 0f00 	cmp.w	r9, #0
 8008bec:	f43f af0f 	beq.w	8008a0e <_scanf_float+0x6e>
 8008bf0:	0591      	lsls	r1, r2, #22
 8008bf2:	bf58      	it	pl
 8008bf4:	9901      	ldrpl	r1, [sp, #4]
 8008bf6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008bfa:	bf58      	it	pl
 8008bfc:	eba9 0101 	subpl.w	r1, r9, r1
 8008c00:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008c04:	bf58      	it	pl
 8008c06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c0a:	6022      	str	r2, [r4, #0]
 8008c0c:	f04f 0900 	mov.w	r9, #0
 8008c10:	e78a      	b.n	8008b28 <_scanf_float+0x188>
 8008c12:	f04f 0a03 	mov.w	sl, #3
 8008c16:	e787      	b.n	8008b28 <_scanf_float+0x188>
 8008c18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	4640      	mov	r0, r8
 8008c20:	4798      	blx	r3
 8008c22:	2800      	cmp	r0, #0
 8008c24:	f43f aedf 	beq.w	80089e6 <_scanf_float+0x46>
 8008c28:	e6ea      	b.n	8008a00 <_scanf_float+0x60>
 8008c2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c32:	463a      	mov	r2, r7
 8008c34:	4640      	mov	r0, r8
 8008c36:	4798      	blx	r3
 8008c38:	6923      	ldr	r3, [r4, #16]
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	6123      	str	r3, [r4, #16]
 8008c3e:	e6ec      	b.n	8008a1a <_scanf_float+0x7a>
 8008c40:	1e6b      	subs	r3, r5, #1
 8008c42:	2b06      	cmp	r3, #6
 8008c44:	d825      	bhi.n	8008c92 <_scanf_float+0x2f2>
 8008c46:	2d02      	cmp	r5, #2
 8008c48:	d836      	bhi.n	8008cb8 <_scanf_float+0x318>
 8008c4a:	455e      	cmp	r6, fp
 8008c4c:	f67f aee8 	bls.w	8008a20 <_scanf_float+0x80>
 8008c50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c54:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c58:	463a      	mov	r2, r7
 8008c5a:	4640      	mov	r0, r8
 8008c5c:	4798      	blx	r3
 8008c5e:	6923      	ldr	r3, [r4, #16]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	6123      	str	r3, [r4, #16]
 8008c64:	e7f1      	b.n	8008c4a <_scanf_float+0x2aa>
 8008c66:	9802      	ldr	r0, [sp, #8]
 8008c68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c6c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008c70:	9002      	str	r0, [sp, #8]
 8008c72:	463a      	mov	r2, r7
 8008c74:	4640      	mov	r0, r8
 8008c76:	4798      	blx	r3
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	6123      	str	r3, [r4, #16]
 8008c7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c82:	fa5f fa8a 	uxtb.w	sl, sl
 8008c86:	f1ba 0f02 	cmp.w	sl, #2
 8008c8a:	d1ec      	bne.n	8008c66 <_scanf_float+0x2c6>
 8008c8c:	3d03      	subs	r5, #3
 8008c8e:	b2ed      	uxtb	r5, r5
 8008c90:	1b76      	subs	r6, r6, r5
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	05da      	lsls	r2, r3, #23
 8008c96:	d52f      	bpl.n	8008cf8 <_scanf_float+0x358>
 8008c98:	055b      	lsls	r3, r3, #21
 8008c9a:	d510      	bpl.n	8008cbe <_scanf_float+0x31e>
 8008c9c:	455e      	cmp	r6, fp
 8008c9e:	f67f aebf 	bls.w	8008a20 <_scanf_float+0x80>
 8008ca2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ca6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008caa:	463a      	mov	r2, r7
 8008cac:	4640      	mov	r0, r8
 8008cae:	4798      	blx	r3
 8008cb0:	6923      	ldr	r3, [r4, #16]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	6123      	str	r3, [r4, #16]
 8008cb6:	e7f1      	b.n	8008c9c <_scanf_float+0x2fc>
 8008cb8:	46aa      	mov	sl, r5
 8008cba:	9602      	str	r6, [sp, #8]
 8008cbc:	e7df      	b.n	8008c7e <_scanf_float+0x2de>
 8008cbe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008cc2:	6923      	ldr	r3, [r4, #16]
 8008cc4:	2965      	cmp	r1, #101	; 0x65
 8008cc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008cca:	f106 35ff 	add.w	r5, r6, #4294967295
 8008cce:	6123      	str	r3, [r4, #16]
 8008cd0:	d00c      	beq.n	8008cec <_scanf_float+0x34c>
 8008cd2:	2945      	cmp	r1, #69	; 0x45
 8008cd4:	d00a      	beq.n	8008cec <_scanf_float+0x34c>
 8008cd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cda:	463a      	mov	r2, r7
 8008cdc:	4640      	mov	r0, r8
 8008cde:	4798      	blx	r3
 8008ce0:	6923      	ldr	r3, [r4, #16]
 8008ce2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	1eb5      	subs	r5, r6, #2
 8008cea:	6123      	str	r3, [r4, #16]
 8008cec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cf0:	463a      	mov	r2, r7
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	4798      	blx	r3
 8008cf6:	462e      	mov	r6, r5
 8008cf8:	6825      	ldr	r5, [r4, #0]
 8008cfa:	f015 0510 	ands.w	r5, r5, #16
 8008cfe:	d159      	bne.n	8008db4 <_scanf_float+0x414>
 8008d00:	7035      	strb	r5, [r6, #0]
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d0c:	d11b      	bne.n	8008d46 <_scanf_float+0x3a6>
 8008d0e:	9b01      	ldr	r3, [sp, #4]
 8008d10:	454b      	cmp	r3, r9
 8008d12:	eba3 0209 	sub.w	r2, r3, r9
 8008d16:	d123      	bne.n	8008d60 <_scanf_float+0x3c0>
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4659      	mov	r1, fp
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	f000 ff09 	bl	8009b34 <_strtod_r>
 8008d22:	6822      	ldr	r2, [r4, #0]
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	f012 0f02 	tst.w	r2, #2
 8008d2a:	ec57 6b10 	vmov	r6, r7, d0
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	d021      	beq.n	8008d76 <_scanf_float+0x3d6>
 8008d32:	9903      	ldr	r1, [sp, #12]
 8008d34:	1d1a      	adds	r2, r3, #4
 8008d36:	600a      	str	r2, [r1, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	e9c3 6700 	strd	r6, r7, [r3]
 8008d3e:	68e3      	ldr	r3, [r4, #12]
 8008d40:	3301      	adds	r3, #1
 8008d42:	60e3      	str	r3, [r4, #12]
 8008d44:	e66d      	b.n	8008a22 <_scanf_float+0x82>
 8008d46:	9b04      	ldr	r3, [sp, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d0e5      	beq.n	8008d18 <_scanf_float+0x378>
 8008d4c:	9905      	ldr	r1, [sp, #20]
 8008d4e:	230a      	movs	r3, #10
 8008d50:	462a      	mov	r2, r5
 8008d52:	3101      	adds	r1, #1
 8008d54:	4640      	mov	r0, r8
 8008d56:	f000 ff81 	bl	8009c5c <_strtol_r>
 8008d5a:	9b04      	ldr	r3, [sp, #16]
 8008d5c:	9e05      	ldr	r6, [sp, #20]
 8008d5e:	1ac2      	subs	r2, r0, r3
 8008d60:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008d64:	429e      	cmp	r6, r3
 8008d66:	bf28      	it	cs
 8008d68:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008d6c:	4912      	ldr	r1, [pc, #72]	; (8008db8 <_scanf_float+0x418>)
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f000 f82c 	bl	8008dcc <siprintf>
 8008d74:	e7d0      	b.n	8008d18 <_scanf_float+0x378>
 8008d76:	9903      	ldr	r1, [sp, #12]
 8008d78:	f012 0f04 	tst.w	r2, #4
 8008d7c:	f103 0204 	add.w	r2, r3, #4
 8008d80:	600a      	str	r2, [r1, #0]
 8008d82:	d1d9      	bne.n	8008d38 <_scanf_float+0x398>
 8008d84:	f8d3 8000 	ldr.w	r8, [r3]
 8008d88:	ee10 2a10 	vmov	r2, s0
 8008d8c:	ee10 0a10 	vmov	r0, s0
 8008d90:	463b      	mov	r3, r7
 8008d92:	4639      	mov	r1, r7
 8008d94:	f7f7 fee2 	bl	8000b5c <__aeabi_dcmpun>
 8008d98:	b128      	cbz	r0, 8008da6 <_scanf_float+0x406>
 8008d9a:	4808      	ldr	r0, [pc, #32]	; (8008dbc <_scanf_float+0x41c>)
 8008d9c:	f000 f810 	bl	8008dc0 <nanf>
 8008da0:	ed88 0a00 	vstr	s0, [r8]
 8008da4:	e7cb      	b.n	8008d3e <_scanf_float+0x39e>
 8008da6:	4630      	mov	r0, r6
 8008da8:	4639      	mov	r1, r7
 8008daa:	f7f7 ff35 	bl	8000c18 <__aeabi_d2f>
 8008dae:	f8c8 0000 	str.w	r0, [r8]
 8008db2:	e7c4      	b.n	8008d3e <_scanf_float+0x39e>
 8008db4:	2500      	movs	r5, #0
 8008db6:	e634      	b.n	8008a22 <_scanf_float+0x82>
 8008db8:	0800ff86 	.word	0x0800ff86
 8008dbc:	080103ab 	.word	0x080103ab

08008dc0 <nanf>:
 8008dc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008dc8 <nanf+0x8>
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	7fc00000 	.word	0x7fc00000

08008dcc <siprintf>:
 8008dcc:	b40e      	push	{r1, r2, r3}
 8008dce:	b500      	push	{lr}
 8008dd0:	b09c      	sub	sp, #112	; 0x70
 8008dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8008dd4:	9002      	str	r0, [sp, #8]
 8008dd6:	9006      	str	r0, [sp, #24]
 8008dd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ddc:	4809      	ldr	r0, [pc, #36]	; (8008e04 <siprintf+0x38>)
 8008dde:	9107      	str	r1, [sp, #28]
 8008de0:	9104      	str	r1, [sp, #16]
 8008de2:	4909      	ldr	r1, [pc, #36]	; (8008e08 <siprintf+0x3c>)
 8008de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de8:	9105      	str	r1, [sp, #20]
 8008dea:	6800      	ldr	r0, [r0, #0]
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	a902      	add	r1, sp, #8
 8008df0:	f002 ff9e 	bl	800bd30 <_svfiprintf_r>
 8008df4:	9b02      	ldr	r3, [sp, #8]
 8008df6:	2200      	movs	r2, #0
 8008df8:	701a      	strb	r2, [r3, #0]
 8008dfa:	b01c      	add	sp, #112	; 0x70
 8008dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e00:	b003      	add	sp, #12
 8008e02:	4770      	bx	lr
 8008e04:	2000001c 	.word	0x2000001c
 8008e08:	ffff0208 	.word	0xffff0208

08008e0c <siscanf>:
 8008e0c:	b40e      	push	{r1, r2, r3}
 8008e0e:	b510      	push	{r4, lr}
 8008e10:	b09f      	sub	sp, #124	; 0x7c
 8008e12:	ac21      	add	r4, sp, #132	; 0x84
 8008e14:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008e18:	f854 2b04 	ldr.w	r2, [r4], #4
 8008e1c:	9201      	str	r2, [sp, #4]
 8008e1e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008e22:	9004      	str	r0, [sp, #16]
 8008e24:	9008      	str	r0, [sp, #32]
 8008e26:	f7f7 f9e5 	bl	80001f4 <strlen>
 8008e2a:	4b0c      	ldr	r3, [pc, #48]	; (8008e5c <siscanf+0x50>)
 8008e2c:	9005      	str	r0, [sp, #20]
 8008e2e:	9009      	str	r0, [sp, #36]	; 0x24
 8008e30:	930d      	str	r3, [sp, #52]	; 0x34
 8008e32:	480b      	ldr	r0, [pc, #44]	; (8008e60 <siscanf+0x54>)
 8008e34:	9a01      	ldr	r2, [sp, #4]
 8008e36:	6800      	ldr	r0, [r0, #0]
 8008e38:	9403      	str	r4, [sp, #12]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	9311      	str	r3, [sp, #68]	; 0x44
 8008e3e:	9316      	str	r3, [sp, #88]	; 0x58
 8008e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e44:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008e48:	a904      	add	r1, sp, #16
 8008e4a:	4623      	mov	r3, r4
 8008e4c:	f003 f8ca 	bl	800bfe4 <__ssvfiscanf_r>
 8008e50:	b01f      	add	sp, #124	; 0x7c
 8008e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e56:	b003      	add	sp, #12
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	08008e87 	.word	0x08008e87
 8008e60:	2000001c 	.word	0x2000001c

08008e64 <__sread>:
 8008e64:	b510      	push	{r4, lr}
 8008e66:	460c      	mov	r4, r1
 8008e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e6c:	f003 fb84 	bl	800c578 <_read_r>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	bfab      	itete	ge
 8008e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e76:	89a3      	ldrhlt	r3, [r4, #12]
 8008e78:	181b      	addge	r3, r3, r0
 8008e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e7e:	bfac      	ite	ge
 8008e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e82:	81a3      	strhlt	r3, [r4, #12]
 8008e84:	bd10      	pop	{r4, pc}

08008e86 <__seofread>:
 8008e86:	2000      	movs	r0, #0
 8008e88:	4770      	bx	lr

08008e8a <__swrite>:
 8008e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8e:	461f      	mov	r7, r3
 8008e90:	898b      	ldrh	r3, [r1, #12]
 8008e92:	05db      	lsls	r3, r3, #23
 8008e94:	4605      	mov	r5, r0
 8008e96:	460c      	mov	r4, r1
 8008e98:	4616      	mov	r6, r2
 8008e9a:	d505      	bpl.n	8008ea8 <__swrite+0x1e>
 8008e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f002 f8f6 	bl	800b094 <_lseek_r>
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eb2:	81a3      	strh	r3, [r4, #12]
 8008eb4:	4632      	mov	r2, r6
 8008eb6:	463b      	mov	r3, r7
 8008eb8:	4628      	mov	r0, r5
 8008eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ebe:	f000 bed9 	b.w	8009c74 <_write_r>

08008ec2 <__sseek>:
 8008ec2:	b510      	push	{r4, lr}
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eca:	f002 f8e3 	bl	800b094 <_lseek_r>
 8008ece:	1c43      	adds	r3, r0, #1
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	bf15      	itete	ne
 8008ed4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ed6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008eda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ede:	81a3      	strheq	r3, [r4, #12]
 8008ee0:	bf18      	it	ne
 8008ee2:	81a3      	strhne	r3, [r4, #12]
 8008ee4:	bd10      	pop	{r4, pc}

08008ee6 <__sclose>:
 8008ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eea:	f000 bed5 	b.w	8009c98 <_close_r>

08008eee <sulp>:
 8008eee:	b570      	push	{r4, r5, r6, lr}
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	460d      	mov	r5, r1
 8008ef4:	ec45 4b10 	vmov	d0, r4, r5
 8008ef8:	4616      	mov	r6, r2
 8008efa:	f002 fc77 	bl	800b7ec <__ulp>
 8008efe:	ec51 0b10 	vmov	r0, r1, d0
 8008f02:	b17e      	cbz	r6, 8008f24 <sulp+0x36>
 8008f04:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008f08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	dd09      	ble.n	8008f24 <sulp+0x36>
 8008f10:	051b      	lsls	r3, r3, #20
 8008f12:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008f16:	2400      	movs	r4, #0
 8008f18:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008f1c:	4622      	mov	r2, r4
 8008f1e:	462b      	mov	r3, r5
 8008f20:	f7f7 fb82 	bl	8000628 <__aeabi_dmul>
 8008f24:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f28 <_strtod_l>:
 8008f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	ed2d 8b02 	vpush	{d8}
 8008f30:	b09d      	sub	sp, #116	; 0x74
 8008f32:	461f      	mov	r7, r3
 8008f34:	2300      	movs	r3, #0
 8008f36:	9318      	str	r3, [sp, #96]	; 0x60
 8008f38:	4ba2      	ldr	r3, [pc, #648]	; (80091c4 <_strtod_l+0x29c>)
 8008f3a:	9213      	str	r2, [sp, #76]	; 0x4c
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	9305      	str	r3, [sp, #20]
 8008f40:	4604      	mov	r4, r0
 8008f42:	4618      	mov	r0, r3
 8008f44:	4688      	mov	r8, r1
 8008f46:	f7f7 f955 	bl	80001f4 <strlen>
 8008f4a:	f04f 0a00 	mov.w	sl, #0
 8008f4e:	4605      	mov	r5, r0
 8008f50:	f04f 0b00 	mov.w	fp, #0
 8008f54:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008f58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f5a:	781a      	ldrb	r2, [r3, #0]
 8008f5c:	2a2b      	cmp	r2, #43	; 0x2b
 8008f5e:	d04e      	beq.n	8008ffe <_strtod_l+0xd6>
 8008f60:	d83b      	bhi.n	8008fda <_strtod_l+0xb2>
 8008f62:	2a0d      	cmp	r2, #13
 8008f64:	d834      	bhi.n	8008fd0 <_strtod_l+0xa8>
 8008f66:	2a08      	cmp	r2, #8
 8008f68:	d834      	bhi.n	8008fd4 <_strtod_l+0xac>
 8008f6a:	2a00      	cmp	r2, #0
 8008f6c:	d03e      	beq.n	8008fec <_strtod_l+0xc4>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	930a      	str	r3, [sp, #40]	; 0x28
 8008f72:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008f74:	7833      	ldrb	r3, [r6, #0]
 8008f76:	2b30      	cmp	r3, #48	; 0x30
 8008f78:	f040 80b0 	bne.w	80090dc <_strtod_l+0x1b4>
 8008f7c:	7873      	ldrb	r3, [r6, #1]
 8008f7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f82:	2b58      	cmp	r3, #88	; 0x58
 8008f84:	d168      	bne.n	8009058 <_strtod_l+0x130>
 8008f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f88:	9301      	str	r3, [sp, #4]
 8008f8a:	ab18      	add	r3, sp, #96	; 0x60
 8008f8c:	9702      	str	r7, [sp, #8]
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	4a8d      	ldr	r2, [pc, #564]	; (80091c8 <_strtod_l+0x2a0>)
 8008f92:	ab19      	add	r3, sp, #100	; 0x64
 8008f94:	a917      	add	r1, sp, #92	; 0x5c
 8008f96:	4620      	mov	r0, r4
 8008f98:	f001 fd70 	bl	800aa7c <__gethex>
 8008f9c:	f010 0707 	ands.w	r7, r0, #7
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	d005      	beq.n	8008fb0 <_strtod_l+0x88>
 8008fa4:	2f06      	cmp	r7, #6
 8008fa6:	d12c      	bne.n	8009002 <_strtod_l+0xda>
 8008fa8:	3601      	adds	r6, #1
 8008faa:	2300      	movs	r3, #0
 8008fac:	9617      	str	r6, [sp, #92]	; 0x5c
 8008fae:	930a      	str	r3, [sp, #40]	; 0x28
 8008fb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f040 8590 	bne.w	8009ad8 <_strtod_l+0xbb0>
 8008fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fba:	b1eb      	cbz	r3, 8008ff8 <_strtod_l+0xd0>
 8008fbc:	4652      	mov	r2, sl
 8008fbe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008fc2:	ec43 2b10 	vmov	d0, r2, r3
 8008fc6:	b01d      	add	sp, #116	; 0x74
 8008fc8:	ecbd 8b02 	vpop	{d8}
 8008fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd0:	2a20      	cmp	r2, #32
 8008fd2:	d1cc      	bne.n	8008f6e <_strtod_l+0x46>
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008fd8:	e7be      	b.n	8008f58 <_strtod_l+0x30>
 8008fda:	2a2d      	cmp	r2, #45	; 0x2d
 8008fdc:	d1c7      	bne.n	8008f6e <_strtod_l+0x46>
 8008fde:	2201      	movs	r2, #1
 8008fe0:	920a      	str	r2, [sp, #40]	; 0x28
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008fe6:	785b      	ldrb	r3, [r3, #1]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1c2      	bne.n	8008f72 <_strtod_l+0x4a>
 8008fec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f040 856e 	bne.w	8009ad4 <_strtod_l+0xbac>
 8008ff8:	4652      	mov	r2, sl
 8008ffa:	465b      	mov	r3, fp
 8008ffc:	e7e1      	b.n	8008fc2 <_strtod_l+0x9a>
 8008ffe:	2200      	movs	r2, #0
 8009000:	e7ee      	b.n	8008fe0 <_strtod_l+0xb8>
 8009002:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009004:	b13a      	cbz	r2, 8009016 <_strtod_l+0xee>
 8009006:	2135      	movs	r1, #53	; 0x35
 8009008:	a81a      	add	r0, sp, #104	; 0x68
 800900a:	f002 fcfa 	bl	800ba02 <__copybits>
 800900e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009010:	4620      	mov	r0, r4
 8009012:	f002 f8b9 	bl	800b188 <_Bfree>
 8009016:	3f01      	subs	r7, #1
 8009018:	2f04      	cmp	r7, #4
 800901a:	d806      	bhi.n	800902a <_strtod_l+0x102>
 800901c:	e8df f007 	tbb	[pc, r7]
 8009020:	1714030a 	.word	0x1714030a
 8009024:	0a          	.byte	0x0a
 8009025:	00          	.byte	0x00
 8009026:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800902a:	0728      	lsls	r0, r5, #28
 800902c:	d5c0      	bpl.n	8008fb0 <_strtod_l+0x88>
 800902e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009032:	e7bd      	b.n	8008fb0 <_strtod_l+0x88>
 8009034:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009038:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800903a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800903e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009042:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009046:	e7f0      	b.n	800902a <_strtod_l+0x102>
 8009048:	f8df b180 	ldr.w	fp, [pc, #384]	; 80091cc <_strtod_l+0x2a4>
 800904c:	e7ed      	b.n	800902a <_strtod_l+0x102>
 800904e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009052:	f04f 3aff 	mov.w	sl, #4294967295
 8009056:	e7e8      	b.n	800902a <_strtod_l+0x102>
 8009058:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	9217      	str	r2, [sp, #92]	; 0x5c
 800905e:	785b      	ldrb	r3, [r3, #1]
 8009060:	2b30      	cmp	r3, #48	; 0x30
 8009062:	d0f9      	beq.n	8009058 <_strtod_l+0x130>
 8009064:	2b00      	cmp	r3, #0
 8009066:	d0a3      	beq.n	8008fb0 <_strtod_l+0x88>
 8009068:	2301      	movs	r3, #1
 800906a:	f04f 0900 	mov.w	r9, #0
 800906e:	9304      	str	r3, [sp, #16]
 8009070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009072:	9308      	str	r3, [sp, #32]
 8009074:	f8cd 901c 	str.w	r9, [sp, #28]
 8009078:	464f      	mov	r7, r9
 800907a:	220a      	movs	r2, #10
 800907c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800907e:	7806      	ldrb	r6, [r0, #0]
 8009080:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009084:	b2d9      	uxtb	r1, r3
 8009086:	2909      	cmp	r1, #9
 8009088:	d92a      	bls.n	80090e0 <_strtod_l+0x1b8>
 800908a:	9905      	ldr	r1, [sp, #20]
 800908c:	462a      	mov	r2, r5
 800908e:	f003 fad7 	bl	800c640 <strncmp>
 8009092:	b398      	cbz	r0, 80090fc <_strtod_l+0x1d4>
 8009094:	2000      	movs	r0, #0
 8009096:	4632      	mov	r2, r6
 8009098:	463d      	mov	r5, r7
 800909a:	9005      	str	r0, [sp, #20]
 800909c:	4603      	mov	r3, r0
 800909e:	2a65      	cmp	r2, #101	; 0x65
 80090a0:	d001      	beq.n	80090a6 <_strtod_l+0x17e>
 80090a2:	2a45      	cmp	r2, #69	; 0x45
 80090a4:	d118      	bne.n	80090d8 <_strtod_l+0x1b0>
 80090a6:	b91d      	cbnz	r5, 80090b0 <_strtod_l+0x188>
 80090a8:	9a04      	ldr	r2, [sp, #16]
 80090aa:	4302      	orrs	r2, r0
 80090ac:	d09e      	beq.n	8008fec <_strtod_l+0xc4>
 80090ae:	2500      	movs	r5, #0
 80090b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80090b4:	f108 0201 	add.w	r2, r8, #1
 80090b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80090ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 80090be:	2a2b      	cmp	r2, #43	; 0x2b
 80090c0:	d075      	beq.n	80091ae <_strtod_l+0x286>
 80090c2:	2a2d      	cmp	r2, #45	; 0x2d
 80090c4:	d07b      	beq.n	80091be <_strtod_l+0x296>
 80090c6:	f04f 0c00 	mov.w	ip, #0
 80090ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80090ce:	2909      	cmp	r1, #9
 80090d0:	f240 8082 	bls.w	80091d8 <_strtod_l+0x2b0>
 80090d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80090d8:	2600      	movs	r6, #0
 80090da:	e09d      	b.n	8009218 <_strtod_l+0x2f0>
 80090dc:	2300      	movs	r3, #0
 80090de:	e7c4      	b.n	800906a <_strtod_l+0x142>
 80090e0:	2f08      	cmp	r7, #8
 80090e2:	bfd8      	it	le
 80090e4:	9907      	ldrle	r1, [sp, #28]
 80090e6:	f100 0001 	add.w	r0, r0, #1
 80090ea:	bfda      	itte	le
 80090ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80090f0:	9307      	strle	r3, [sp, #28]
 80090f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80090f6:	3701      	adds	r7, #1
 80090f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80090fa:	e7bf      	b.n	800907c <_strtod_l+0x154>
 80090fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090fe:	195a      	adds	r2, r3, r5
 8009100:	9217      	str	r2, [sp, #92]	; 0x5c
 8009102:	5d5a      	ldrb	r2, [r3, r5]
 8009104:	2f00      	cmp	r7, #0
 8009106:	d037      	beq.n	8009178 <_strtod_l+0x250>
 8009108:	9005      	str	r0, [sp, #20]
 800910a:	463d      	mov	r5, r7
 800910c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009110:	2b09      	cmp	r3, #9
 8009112:	d912      	bls.n	800913a <_strtod_l+0x212>
 8009114:	2301      	movs	r3, #1
 8009116:	e7c2      	b.n	800909e <_strtod_l+0x176>
 8009118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	9217      	str	r2, [sp, #92]	; 0x5c
 800911e:	785a      	ldrb	r2, [r3, #1]
 8009120:	3001      	adds	r0, #1
 8009122:	2a30      	cmp	r2, #48	; 0x30
 8009124:	d0f8      	beq.n	8009118 <_strtod_l+0x1f0>
 8009126:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800912a:	2b08      	cmp	r3, #8
 800912c:	f200 84d9 	bhi.w	8009ae2 <_strtod_l+0xbba>
 8009130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009132:	9005      	str	r0, [sp, #20]
 8009134:	2000      	movs	r0, #0
 8009136:	9308      	str	r3, [sp, #32]
 8009138:	4605      	mov	r5, r0
 800913a:	3a30      	subs	r2, #48	; 0x30
 800913c:	f100 0301 	add.w	r3, r0, #1
 8009140:	d014      	beq.n	800916c <_strtod_l+0x244>
 8009142:	9905      	ldr	r1, [sp, #20]
 8009144:	4419      	add	r1, r3
 8009146:	9105      	str	r1, [sp, #20]
 8009148:	462b      	mov	r3, r5
 800914a:	eb00 0e05 	add.w	lr, r0, r5
 800914e:	210a      	movs	r1, #10
 8009150:	4573      	cmp	r3, lr
 8009152:	d113      	bne.n	800917c <_strtod_l+0x254>
 8009154:	182b      	adds	r3, r5, r0
 8009156:	2b08      	cmp	r3, #8
 8009158:	f105 0501 	add.w	r5, r5, #1
 800915c:	4405      	add	r5, r0
 800915e:	dc1c      	bgt.n	800919a <_strtod_l+0x272>
 8009160:	9907      	ldr	r1, [sp, #28]
 8009162:	230a      	movs	r3, #10
 8009164:	fb03 2301 	mla	r3, r3, r1, r2
 8009168:	9307      	str	r3, [sp, #28]
 800916a:	2300      	movs	r3, #0
 800916c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800916e:	1c51      	adds	r1, r2, #1
 8009170:	9117      	str	r1, [sp, #92]	; 0x5c
 8009172:	7852      	ldrb	r2, [r2, #1]
 8009174:	4618      	mov	r0, r3
 8009176:	e7c9      	b.n	800910c <_strtod_l+0x1e4>
 8009178:	4638      	mov	r0, r7
 800917a:	e7d2      	b.n	8009122 <_strtod_l+0x1fa>
 800917c:	2b08      	cmp	r3, #8
 800917e:	dc04      	bgt.n	800918a <_strtod_l+0x262>
 8009180:	9e07      	ldr	r6, [sp, #28]
 8009182:	434e      	muls	r6, r1
 8009184:	9607      	str	r6, [sp, #28]
 8009186:	3301      	adds	r3, #1
 8009188:	e7e2      	b.n	8009150 <_strtod_l+0x228>
 800918a:	f103 0c01 	add.w	ip, r3, #1
 800918e:	f1bc 0f10 	cmp.w	ip, #16
 8009192:	bfd8      	it	le
 8009194:	fb01 f909 	mulle.w	r9, r1, r9
 8009198:	e7f5      	b.n	8009186 <_strtod_l+0x25e>
 800919a:	2d10      	cmp	r5, #16
 800919c:	bfdc      	itt	le
 800919e:	230a      	movle	r3, #10
 80091a0:	fb03 2909 	mlale	r9, r3, r9, r2
 80091a4:	e7e1      	b.n	800916a <_strtod_l+0x242>
 80091a6:	2300      	movs	r3, #0
 80091a8:	9305      	str	r3, [sp, #20]
 80091aa:	2301      	movs	r3, #1
 80091ac:	e77c      	b.n	80090a8 <_strtod_l+0x180>
 80091ae:	f04f 0c00 	mov.w	ip, #0
 80091b2:	f108 0202 	add.w	r2, r8, #2
 80091b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80091b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80091bc:	e785      	b.n	80090ca <_strtod_l+0x1a2>
 80091be:	f04f 0c01 	mov.w	ip, #1
 80091c2:	e7f6      	b.n	80091b2 <_strtod_l+0x28a>
 80091c4:	080101d8 	.word	0x080101d8
 80091c8:	0800ff8c 	.word	0x0800ff8c
 80091cc:	7ff00000 	.word	0x7ff00000
 80091d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091d2:	1c51      	adds	r1, r2, #1
 80091d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80091d6:	7852      	ldrb	r2, [r2, #1]
 80091d8:	2a30      	cmp	r2, #48	; 0x30
 80091da:	d0f9      	beq.n	80091d0 <_strtod_l+0x2a8>
 80091dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80091e0:	2908      	cmp	r1, #8
 80091e2:	f63f af79 	bhi.w	80090d8 <_strtod_l+0x1b0>
 80091e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80091ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091ec:	9206      	str	r2, [sp, #24]
 80091ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091f0:	1c51      	adds	r1, r2, #1
 80091f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80091f4:	7852      	ldrb	r2, [r2, #1]
 80091f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80091fa:	2e09      	cmp	r6, #9
 80091fc:	d937      	bls.n	800926e <_strtod_l+0x346>
 80091fe:	9e06      	ldr	r6, [sp, #24]
 8009200:	1b89      	subs	r1, r1, r6
 8009202:	2908      	cmp	r1, #8
 8009204:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009208:	dc02      	bgt.n	8009210 <_strtod_l+0x2e8>
 800920a:	4576      	cmp	r6, lr
 800920c:	bfa8      	it	ge
 800920e:	4676      	movge	r6, lr
 8009210:	f1bc 0f00 	cmp.w	ip, #0
 8009214:	d000      	beq.n	8009218 <_strtod_l+0x2f0>
 8009216:	4276      	negs	r6, r6
 8009218:	2d00      	cmp	r5, #0
 800921a:	d14d      	bne.n	80092b8 <_strtod_l+0x390>
 800921c:	9904      	ldr	r1, [sp, #16]
 800921e:	4301      	orrs	r1, r0
 8009220:	f47f aec6 	bne.w	8008fb0 <_strtod_l+0x88>
 8009224:	2b00      	cmp	r3, #0
 8009226:	f47f aee1 	bne.w	8008fec <_strtod_l+0xc4>
 800922a:	2a69      	cmp	r2, #105	; 0x69
 800922c:	d027      	beq.n	800927e <_strtod_l+0x356>
 800922e:	dc24      	bgt.n	800927a <_strtod_l+0x352>
 8009230:	2a49      	cmp	r2, #73	; 0x49
 8009232:	d024      	beq.n	800927e <_strtod_l+0x356>
 8009234:	2a4e      	cmp	r2, #78	; 0x4e
 8009236:	f47f aed9 	bne.w	8008fec <_strtod_l+0xc4>
 800923a:	499f      	ldr	r1, [pc, #636]	; (80094b8 <_strtod_l+0x590>)
 800923c:	a817      	add	r0, sp, #92	; 0x5c
 800923e:	f001 fe75 	bl	800af2c <__match>
 8009242:	2800      	cmp	r0, #0
 8009244:	f43f aed2 	beq.w	8008fec <_strtod_l+0xc4>
 8009248:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b28      	cmp	r3, #40	; 0x28
 800924e:	d12d      	bne.n	80092ac <_strtod_l+0x384>
 8009250:	499a      	ldr	r1, [pc, #616]	; (80094bc <_strtod_l+0x594>)
 8009252:	aa1a      	add	r2, sp, #104	; 0x68
 8009254:	a817      	add	r0, sp, #92	; 0x5c
 8009256:	f001 fe7d 	bl	800af54 <__hexnan>
 800925a:	2805      	cmp	r0, #5
 800925c:	d126      	bne.n	80092ac <_strtod_l+0x384>
 800925e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009260:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009264:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009268:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800926c:	e6a0      	b.n	8008fb0 <_strtod_l+0x88>
 800926e:	210a      	movs	r1, #10
 8009270:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009274:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009278:	e7b9      	b.n	80091ee <_strtod_l+0x2c6>
 800927a:	2a6e      	cmp	r2, #110	; 0x6e
 800927c:	e7db      	b.n	8009236 <_strtod_l+0x30e>
 800927e:	4990      	ldr	r1, [pc, #576]	; (80094c0 <_strtod_l+0x598>)
 8009280:	a817      	add	r0, sp, #92	; 0x5c
 8009282:	f001 fe53 	bl	800af2c <__match>
 8009286:	2800      	cmp	r0, #0
 8009288:	f43f aeb0 	beq.w	8008fec <_strtod_l+0xc4>
 800928c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800928e:	498d      	ldr	r1, [pc, #564]	; (80094c4 <_strtod_l+0x59c>)
 8009290:	3b01      	subs	r3, #1
 8009292:	a817      	add	r0, sp, #92	; 0x5c
 8009294:	9317      	str	r3, [sp, #92]	; 0x5c
 8009296:	f001 fe49 	bl	800af2c <__match>
 800929a:	b910      	cbnz	r0, 80092a2 <_strtod_l+0x37a>
 800929c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800929e:	3301      	adds	r3, #1
 80092a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80092a2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80094d4 <_strtod_l+0x5ac>
 80092a6:	f04f 0a00 	mov.w	sl, #0
 80092aa:	e681      	b.n	8008fb0 <_strtod_l+0x88>
 80092ac:	4886      	ldr	r0, [pc, #536]	; (80094c8 <_strtod_l+0x5a0>)
 80092ae:	f003 f977 	bl	800c5a0 <nan>
 80092b2:	ec5b ab10 	vmov	sl, fp, d0
 80092b6:	e67b      	b.n	8008fb0 <_strtod_l+0x88>
 80092b8:	9b05      	ldr	r3, [sp, #20]
 80092ba:	9807      	ldr	r0, [sp, #28]
 80092bc:	1af3      	subs	r3, r6, r3
 80092be:	2f00      	cmp	r7, #0
 80092c0:	bf08      	it	eq
 80092c2:	462f      	moveq	r7, r5
 80092c4:	2d10      	cmp	r5, #16
 80092c6:	9306      	str	r3, [sp, #24]
 80092c8:	46a8      	mov	r8, r5
 80092ca:	bfa8      	it	ge
 80092cc:	f04f 0810 	movge.w	r8, #16
 80092d0:	f7f7 f930 	bl	8000534 <__aeabi_ui2d>
 80092d4:	2d09      	cmp	r5, #9
 80092d6:	4682      	mov	sl, r0
 80092d8:	468b      	mov	fp, r1
 80092da:	dd13      	ble.n	8009304 <_strtod_l+0x3dc>
 80092dc:	4b7b      	ldr	r3, [pc, #492]	; (80094cc <_strtod_l+0x5a4>)
 80092de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80092e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80092e6:	f7f7 f99f 	bl	8000628 <__aeabi_dmul>
 80092ea:	4682      	mov	sl, r0
 80092ec:	4648      	mov	r0, r9
 80092ee:	468b      	mov	fp, r1
 80092f0:	f7f7 f920 	bl	8000534 <__aeabi_ui2d>
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	4650      	mov	r0, sl
 80092fa:	4659      	mov	r1, fp
 80092fc:	f7f6 ffde 	bl	80002bc <__adddf3>
 8009300:	4682      	mov	sl, r0
 8009302:	468b      	mov	fp, r1
 8009304:	2d0f      	cmp	r5, #15
 8009306:	dc38      	bgt.n	800937a <_strtod_l+0x452>
 8009308:	9b06      	ldr	r3, [sp, #24]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f43f ae50 	beq.w	8008fb0 <_strtod_l+0x88>
 8009310:	dd24      	ble.n	800935c <_strtod_l+0x434>
 8009312:	2b16      	cmp	r3, #22
 8009314:	dc0b      	bgt.n	800932e <_strtod_l+0x406>
 8009316:	496d      	ldr	r1, [pc, #436]	; (80094cc <_strtod_l+0x5a4>)
 8009318:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800931c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009320:	4652      	mov	r2, sl
 8009322:	465b      	mov	r3, fp
 8009324:	f7f7 f980 	bl	8000628 <__aeabi_dmul>
 8009328:	4682      	mov	sl, r0
 800932a:	468b      	mov	fp, r1
 800932c:	e640      	b.n	8008fb0 <_strtod_l+0x88>
 800932e:	9a06      	ldr	r2, [sp, #24]
 8009330:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009334:	4293      	cmp	r3, r2
 8009336:	db20      	blt.n	800937a <_strtod_l+0x452>
 8009338:	4c64      	ldr	r4, [pc, #400]	; (80094cc <_strtod_l+0x5a4>)
 800933a:	f1c5 050f 	rsb	r5, r5, #15
 800933e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009342:	4652      	mov	r2, sl
 8009344:	465b      	mov	r3, fp
 8009346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800934a:	f7f7 f96d 	bl	8000628 <__aeabi_dmul>
 800934e:	9b06      	ldr	r3, [sp, #24]
 8009350:	1b5d      	subs	r5, r3, r5
 8009352:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009356:	e9d4 2300 	ldrd	r2, r3, [r4]
 800935a:	e7e3      	b.n	8009324 <_strtod_l+0x3fc>
 800935c:	9b06      	ldr	r3, [sp, #24]
 800935e:	3316      	adds	r3, #22
 8009360:	db0b      	blt.n	800937a <_strtod_l+0x452>
 8009362:	9b05      	ldr	r3, [sp, #20]
 8009364:	1b9e      	subs	r6, r3, r6
 8009366:	4b59      	ldr	r3, [pc, #356]	; (80094cc <_strtod_l+0x5a4>)
 8009368:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800936c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009370:	4650      	mov	r0, sl
 8009372:	4659      	mov	r1, fp
 8009374:	f7f7 fa82 	bl	800087c <__aeabi_ddiv>
 8009378:	e7d6      	b.n	8009328 <_strtod_l+0x400>
 800937a:	9b06      	ldr	r3, [sp, #24]
 800937c:	eba5 0808 	sub.w	r8, r5, r8
 8009380:	4498      	add	r8, r3
 8009382:	f1b8 0f00 	cmp.w	r8, #0
 8009386:	dd74      	ble.n	8009472 <_strtod_l+0x54a>
 8009388:	f018 030f 	ands.w	r3, r8, #15
 800938c:	d00a      	beq.n	80093a4 <_strtod_l+0x47c>
 800938e:	494f      	ldr	r1, [pc, #316]	; (80094cc <_strtod_l+0x5a4>)
 8009390:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009394:	4652      	mov	r2, sl
 8009396:	465b      	mov	r3, fp
 8009398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800939c:	f7f7 f944 	bl	8000628 <__aeabi_dmul>
 80093a0:	4682      	mov	sl, r0
 80093a2:	468b      	mov	fp, r1
 80093a4:	f038 080f 	bics.w	r8, r8, #15
 80093a8:	d04f      	beq.n	800944a <_strtod_l+0x522>
 80093aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80093ae:	dd22      	ble.n	80093f6 <_strtod_l+0x4ce>
 80093b0:	2500      	movs	r5, #0
 80093b2:	462e      	mov	r6, r5
 80093b4:	9507      	str	r5, [sp, #28]
 80093b6:	9505      	str	r5, [sp, #20]
 80093b8:	2322      	movs	r3, #34	; 0x22
 80093ba:	f8df b118 	ldr.w	fp, [pc, #280]	; 80094d4 <_strtod_l+0x5ac>
 80093be:	6023      	str	r3, [r4, #0]
 80093c0:	f04f 0a00 	mov.w	sl, #0
 80093c4:	9b07      	ldr	r3, [sp, #28]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f43f adf2 	beq.w	8008fb0 <_strtod_l+0x88>
 80093cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80093ce:	4620      	mov	r0, r4
 80093d0:	f001 feda 	bl	800b188 <_Bfree>
 80093d4:	9905      	ldr	r1, [sp, #20]
 80093d6:	4620      	mov	r0, r4
 80093d8:	f001 fed6 	bl	800b188 <_Bfree>
 80093dc:	4631      	mov	r1, r6
 80093de:	4620      	mov	r0, r4
 80093e0:	f001 fed2 	bl	800b188 <_Bfree>
 80093e4:	9907      	ldr	r1, [sp, #28]
 80093e6:	4620      	mov	r0, r4
 80093e8:	f001 fece 	bl	800b188 <_Bfree>
 80093ec:	4629      	mov	r1, r5
 80093ee:	4620      	mov	r0, r4
 80093f0:	f001 feca 	bl	800b188 <_Bfree>
 80093f4:	e5dc      	b.n	8008fb0 <_strtod_l+0x88>
 80093f6:	4b36      	ldr	r3, [pc, #216]	; (80094d0 <_strtod_l+0x5a8>)
 80093f8:	9304      	str	r3, [sp, #16]
 80093fa:	2300      	movs	r3, #0
 80093fc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009400:	4650      	mov	r0, sl
 8009402:	4659      	mov	r1, fp
 8009404:	4699      	mov	r9, r3
 8009406:	f1b8 0f01 	cmp.w	r8, #1
 800940a:	dc21      	bgt.n	8009450 <_strtod_l+0x528>
 800940c:	b10b      	cbz	r3, 8009412 <_strtod_l+0x4ea>
 800940e:	4682      	mov	sl, r0
 8009410:	468b      	mov	fp, r1
 8009412:	4b2f      	ldr	r3, [pc, #188]	; (80094d0 <_strtod_l+0x5a8>)
 8009414:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009418:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800941c:	4652      	mov	r2, sl
 800941e:	465b      	mov	r3, fp
 8009420:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009424:	f7f7 f900 	bl	8000628 <__aeabi_dmul>
 8009428:	4b2a      	ldr	r3, [pc, #168]	; (80094d4 <_strtod_l+0x5ac>)
 800942a:	460a      	mov	r2, r1
 800942c:	400b      	ands	r3, r1
 800942e:	492a      	ldr	r1, [pc, #168]	; (80094d8 <_strtod_l+0x5b0>)
 8009430:	428b      	cmp	r3, r1
 8009432:	4682      	mov	sl, r0
 8009434:	d8bc      	bhi.n	80093b0 <_strtod_l+0x488>
 8009436:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800943a:	428b      	cmp	r3, r1
 800943c:	bf86      	itte	hi
 800943e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80094dc <_strtod_l+0x5b4>
 8009442:	f04f 3aff 	movhi.w	sl, #4294967295
 8009446:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800944a:	2300      	movs	r3, #0
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	e084      	b.n	800955a <_strtod_l+0x632>
 8009450:	f018 0f01 	tst.w	r8, #1
 8009454:	d005      	beq.n	8009462 <_strtod_l+0x53a>
 8009456:	9b04      	ldr	r3, [sp, #16]
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	f7f7 f8e4 	bl	8000628 <__aeabi_dmul>
 8009460:	2301      	movs	r3, #1
 8009462:	9a04      	ldr	r2, [sp, #16]
 8009464:	3208      	adds	r2, #8
 8009466:	f109 0901 	add.w	r9, r9, #1
 800946a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800946e:	9204      	str	r2, [sp, #16]
 8009470:	e7c9      	b.n	8009406 <_strtod_l+0x4de>
 8009472:	d0ea      	beq.n	800944a <_strtod_l+0x522>
 8009474:	f1c8 0800 	rsb	r8, r8, #0
 8009478:	f018 020f 	ands.w	r2, r8, #15
 800947c:	d00a      	beq.n	8009494 <_strtod_l+0x56c>
 800947e:	4b13      	ldr	r3, [pc, #76]	; (80094cc <_strtod_l+0x5a4>)
 8009480:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009484:	4650      	mov	r0, sl
 8009486:	4659      	mov	r1, fp
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	f7f7 f9f6 	bl	800087c <__aeabi_ddiv>
 8009490:	4682      	mov	sl, r0
 8009492:	468b      	mov	fp, r1
 8009494:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009498:	d0d7      	beq.n	800944a <_strtod_l+0x522>
 800949a:	f1b8 0f1f 	cmp.w	r8, #31
 800949e:	dd1f      	ble.n	80094e0 <_strtod_l+0x5b8>
 80094a0:	2500      	movs	r5, #0
 80094a2:	462e      	mov	r6, r5
 80094a4:	9507      	str	r5, [sp, #28]
 80094a6:	9505      	str	r5, [sp, #20]
 80094a8:	2322      	movs	r3, #34	; 0x22
 80094aa:	f04f 0a00 	mov.w	sl, #0
 80094ae:	f04f 0b00 	mov.w	fp, #0
 80094b2:	6023      	str	r3, [r4, #0]
 80094b4:	e786      	b.n	80093c4 <_strtod_l+0x49c>
 80094b6:	bf00      	nop
 80094b8:	0800ff61 	.word	0x0800ff61
 80094bc:	0800ffa0 	.word	0x0800ffa0
 80094c0:	0800ff59 	.word	0x0800ff59
 80094c4:	080100e4 	.word	0x080100e4
 80094c8:	080103ab 	.word	0x080103ab
 80094cc:	08010270 	.word	0x08010270
 80094d0:	08010248 	.word	0x08010248
 80094d4:	7ff00000 	.word	0x7ff00000
 80094d8:	7ca00000 	.word	0x7ca00000
 80094dc:	7fefffff 	.word	0x7fefffff
 80094e0:	f018 0310 	ands.w	r3, r8, #16
 80094e4:	bf18      	it	ne
 80094e6:	236a      	movne	r3, #106	; 0x6a
 80094e8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009898 <_strtod_l+0x970>
 80094ec:	9304      	str	r3, [sp, #16]
 80094ee:	4650      	mov	r0, sl
 80094f0:	4659      	mov	r1, fp
 80094f2:	2300      	movs	r3, #0
 80094f4:	f018 0f01 	tst.w	r8, #1
 80094f8:	d004      	beq.n	8009504 <_strtod_l+0x5dc>
 80094fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80094fe:	f7f7 f893 	bl	8000628 <__aeabi_dmul>
 8009502:	2301      	movs	r3, #1
 8009504:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009508:	f109 0908 	add.w	r9, r9, #8
 800950c:	d1f2      	bne.n	80094f4 <_strtod_l+0x5cc>
 800950e:	b10b      	cbz	r3, 8009514 <_strtod_l+0x5ec>
 8009510:	4682      	mov	sl, r0
 8009512:	468b      	mov	fp, r1
 8009514:	9b04      	ldr	r3, [sp, #16]
 8009516:	b1c3      	cbz	r3, 800954a <_strtod_l+0x622>
 8009518:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800951c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009520:	2b00      	cmp	r3, #0
 8009522:	4659      	mov	r1, fp
 8009524:	dd11      	ble.n	800954a <_strtod_l+0x622>
 8009526:	2b1f      	cmp	r3, #31
 8009528:	f340 8124 	ble.w	8009774 <_strtod_l+0x84c>
 800952c:	2b34      	cmp	r3, #52	; 0x34
 800952e:	bfde      	ittt	le
 8009530:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009534:	f04f 33ff 	movle.w	r3, #4294967295
 8009538:	fa03 f202 	lslle.w	r2, r3, r2
 800953c:	f04f 0a00 	mov.w	sl, #0
 8009540:	bfcc      	ite	gt
 8009542:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009546:	ea02 0b01 	andle.w	fp, r2, r1
 800954a:	2200      	movs	r2, #0
 800954c:	2300      	movs	r3, #0
 800954e:	4650      	mov	r0, sl
 8009550:	4659      	mov	r1, fp
 8009552:	f7f7 fad1 	bl	8000af8 <__aeabi_dcmpeq>
 8009556:	2800      	cmp	r0, #0
 8009558:	d1a2      	bne.n	80094a0 <_strtod_l+0x578>
 800955a:	9b07      	ldr	r3, [sp, #28]
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	9908      	ldr	r1, [sp, #32]
 8009560:	462b      	mov	r3, r5
 8009562:	463a      	mov	r2, r7
 8009564:	4620      	mov	r0, r4
 8009566:	f001 fe77 	bl	800b258 <__s2b>
 800956a:	9007      	str	r0, [sp, #28]
 800956c:	2800      	cmp	r0, #0
 800956e:	f43f af1f 	beq.w	80093b0 <_strtod_l+0x488>
 8009572:	9b05      	ldr	r3, [sp, #20]
 8009574:	1b9e      	subs	r6, r3, r6
 8009576:	9b06      	ldr	r3, [sp, #24]
 8009578:	2b00      	cmp	r3, #0
 800957a:	bfb4      	ite	lt
 800957c:	4633      	movlt	r3, r6
 800957e:	2300      	movge	r3, #0
 8009580:	930c      	str	r3, [sp, #48]	; 0x30
 8009582:	9b06      	ldr	r3, [sp, #24]
 8009584:	2500      	movs	r5, #0
 8009586:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800958a:	9312      	str	r3, [sp, #72]	; 0x48
 800958c:	462e      	mov	r6, r5
 800958e:	9b07      	ldr	r3, [sp, #28]
 8009590:	4620      	mov	r0, r4
 8009592:	6859      	ldr	r1, [r3, #4]
 8009594:	f001 fdb8 	bl	800b108 <_Balloc>
 8009598:	9005      	str	r0, [sp, #20]
 800959a:	2800      	cmp	r0, #0
 800959c:	f43f af0c 	beq.w	80093b8 <_strtod_l+0x490>
 80095a0:	9b07      	ldr	r3, [sp, #28]
 80095a2:	691a      	ldr	r2, [r3, #16]
 80095a4:	3202      	adds	r2, #2
 80095a6:	f103 010c 	add.w	r1, r3, #12
 80095aa:	0092      	lsls	r2, r2, #2
 80095ac:	300c      	adds	r0, #12
 80095ae:	f001 fd9d 	bl	800b0ec <memcpy>
 80095b2:	ec4b ab10 	vmov	d0, sl, fp
 80095b6:	aa1a      	add	r2, sp, #104	; 0x68
 80095b8:	a919      	add	r1, sp, #100	; 0x64
 80095ba:	4620      	mov	r0, r4
 80095bc:	f002 f992 	bl	800b8e4 <__d2b>
 80095c0:	ec4b ab18 	vmov	d8, sl, fp
 80095c4:	9018      	str	r0, [sp, #96]	; 0x60
 80095c6:	2800      	cmp	r0, #0
 80095c8:	f43f aef6 	beq.w	80093b8 <_strtod_l+0x490>
 80095cc:	2101      	movs	r1, #1
 80095ce:	4620      	mov	r0, r4
 80095d0:	f001 fedc 	bl	800b38c <__i2b>
 80095d4:	4606      	mov	r6, r0
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f43f aeee 	beq.w	80093b8 <_strtod_l+0x490>
 80095dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095de:	9904      	ldr	r1, [sp, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	bfab      	itete	ge
 80095e4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80095e6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80095e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80095ea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80095ee:	bfac      	ite	ge
 80095f0:	eb03 0902 	addge.w	r9, r3, r2
 80095f4:	1ad7      	sublt	r7, r2, r3
 80095f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80095f8:	eba3 0801 	sub.w	r8, r3, r1
 80095fc:	4490      	add	r8, r2
 80095fe:	4ba1      	ldr	r3, [pc, #644]	; (8009884 <_strtod_l+0x95c>)
 8009600:	f108 38ff 	add.w	r8, r8, #4294967295
 8009604:	4598      	cmp	r8, r3
 8009606:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800960a:	f280 80c7 	bge.w	800979c <_strtod_l+0x874>
 800960e:	eba3 0308 	sub.w	r3, r3, r8
 8009612:	2b1f      	cmp	r3, #31
 8009614:	eba2 0203 	sub.w	r2, r2, r3
 8009618:	f04f 0101 	mov.w	r1, #1
 800961c:	f300 80b1 	bgt.w	8009782 <_strtod_l+0x85a>
 8009620:	fa01 f303 	lsl.w	r3, r1, r3
 8009624:	930d      	str	r3, [sp, #52]	; 0x34
 8009626:	2300      	movs	r3, #0
 8009628:	9308      	str	r3, [sp, #32]
 800962a:	eb09 0802 	add.w	r8, r9, r2
 800962e:	9b04      	ldr	r3, [sp, #16]
 8009630:	45c1      	cmp	r9, r8
 8009632:	4417      	add	r7, r2
 8009634:	441f      	add	r7, r3
 8009636:	464b      	mov	r3, r9
 8009638:	bfa8      	it	ge
 800963a:	4643      	movge	r3, r8
 800963c:	42bb      	cmp	r3, r7
 800963e:	bfa8      	it	ge
 8009640:	463b      	movge	r3, r7
 8009642:	2b00      	cmp	r3, #0
 8009644:	bfc2      	ittt	gt
 8009646:	eba8 0803 	subgt.w	r8, r8, r3
 800964a:	1aff      	subgt	r7, r7, r3
 800964c:	eba9 0903 	subgt.w	r9, r9, r3
 8009650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009652:	2b00      	cmp	r3, #0
 8009654:	dd17      	ble.n	8009686 <_strtod_l+0x75e>
 8009656:	4631      	mov	r1, r6
 8009658:	461a      	mov	r2, r3
 800965a:	4620      	mov	r0, r4
 800965c:	f001 ff56 	bl	800b50c <__pow5mult>
 8009660:	4606      	mov	r6, r0
 8009662:	2800      	cmp	r0, #0
 8009664:	f43f aea8 	beq.w	80093b8 <_strtod_l+0x490>
 8009668:	4601      	mov	r1, r0
 800966a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800966c:	4620      	mov	r0, r4
 800966e:	f001 fea3 	bl	800b3b8 <__multiply>
 8009672:	900b      	str	r0, [sp, #44]	; 0x2c
 8009674:	2800      	cmp	r0, #0
 8009676:	f43f ae9f 	beq.w	80093b8 <_strtod_l+0x490>
 800967a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800967c:	4620      	mov	r0, r4
 800967e:	f001 fd83 	bl	800b188 <_Bfree>
 8009682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009684:	9318      	str	r3, [sp, #96]	; 0x60
 8009686:	f1b8 0f00 	cmp.w	r8, #0
 800968a:	f300 808c 	bgt.w	80097a6 <_strtod_l+0x87e>
 800968e:	9b06      	ldr	r3, [sp, #24]
 8009690:	2b00      	cmp	r3, #0
 8009692:	dd08      	ble.n	80096a6 <_strtod_l+0x77e>
 8009694:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009696:	9905      	ldr	r1, [sp, #20]
 8009698:	4620      	mov	r0, r4
 800969a:	f001 ff37 	bl	800b50c <__pow5mult>
 800969e:	9005      	str	r0, [sp, #20]
 80096a0:	2800      	cmp	r0, #0
 80096a2:	f43f ae89 	beq.w	80093b8 <_strtod_l+0x490>
 80096a6:	2f00      	cmp	r7, #0
 80096a8:	dd08      	ble.n	80096bc <_strtod_l+0x794>
 80096aa:	9905      	ldr	r1, [sp, #20]
 80096ac:	463a      	mov	r2, r7
 80096ae:	4620      	mov	r0, r4
 80096b0:	f001 ff86 	bl	800b5c0 <__lshift>
 80096b4:	9005      	str	r0, [sp, #20]
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f43f ae7e 	beq.w	80093b8 <_strtod_l+0x490>
 80096bc:	f1b9 0f00 	cmp.w	r9, #0
 80096c0:	dd08      	ble.n	80096d4 <_strtod_l+0x7ac>
 80096c2:	4631      	mov	r1, r6
 80096c4:	464a      	mov	r2, r9
 80096c6:	4620      	mov	r0, r4
 80096c8:	f001 ff7a 	bl	800b5c0 <__lshift>
 80096cc:	4606      	mov	r6, r0
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f43f ae72 	beq.w	80093b8 <_strtod_l+0x490>
 80096d4:	9a05      	ldr	r2, [sp, #20]
 80096d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80096d8:	4620      	mov	r0, r4
 80096da:	f001 fffd 	bl	800b6d8 <__mdiff>
 80096de:	4605      	mov	r5, r0
 80096e0:	2800      	cmp	r0, #0
 80096e2:	f43f ae69 	beq.w	80093b8 <_strtod_l+0x490>
 80096e6:	68c3      	ldr	r3, [r0, #12]
 80096e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80096ea:	2300      	movs	r3, #0
 80096ec:	60c3      	str	r3, [r0, #12]
 80096ee:	4631      	mov	r1, r6
 80096f0:	f001 ffd6 	bl	800b6a0 <__mcmp>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	da60      	bge.n	80097ba <_strtod_l+0x892>
 80096f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096fa:	ea53 030a 	orrs.w	r3, r3, sl
 80096fe:	f040 8082 	bne.w	8009806 <_strtod_l+0x8de>
 8009702:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009706:	2b00      	cmp	r3, #0
 8009708:	d17d      	bne.n	8009806 <_strtod_l+0x8de>
 800970a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800970e:	0d1b      	lsrs	r3, r3, #20
 8009710:	051b      	lsls	r3, r3, #20
 8009712:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009716:	d976      	bls.n	8009806 <_strtod_l+0x8de>
 8009718:	696b      	ldr	r3, [r5, #20]
 800971a:	b913      	cbnz	r3, 8009722 <_strtod_l+0x7fa>
 800971c:	692b      	ldr	r3, [r5, #16]
 800971e:	2b01      	cmp	r3, #1
 8009720:	dd71      	ble.n	8009806 <_strtod_l+0x8de>
 8009722:	4629      	mov	r1, r5
 8009724:	2201      	movs	r2, #1
 8009726:	4620      	mov	r0, r4
 8009728:	f001 ff4a 	bl	800b5c0 <__lshift>
 800972c:	4631      	mov	r1, r6
 800972e:	4605      	mov	r5, r0
 8009730:	f001 ffb6 	bl	800b6a0 <__mcmp>
 8009734:	2800      	cmp	r0, #0
 8009736:	dd66      	ble.n	8009806 <_strtod_l+0x8de>
 8009738:	9904      	ldr	r1, [sp, #16]
 800973a:	4a53      	ldr	r2, [pc, #332]	; (8009888 <_strtod_l+0x960>)
 800973c:	465b      	mov	r3, fp
 800973e:	2900      	cmp	r1, #0
 8009740:	f000 8081 	beq.w	8009846 <_strtod_l+0x91e>
 8009744:	ea02 010b 	and.w	r1, r2, fp
 8009748:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800974c:	dc7b      	bgt.n	8009846 <_strtod_l+0x91e>
 800974e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009752:	f77f aea9 	ble.w	80094a8 <_strtod_l+0x580>
 8009756:	4b4d      	ldr	r3, [pc, #308]	; (800988c <_strtod_l+0x964>)
 8009758:	4650      	mov	r0, sl
 800975a:	4659      	mov	r1, fp
 800975c:	2200      	movs	r2, #0
 800975e:	f7f6 ff63 	bl	8000628 <__aeabi_dmul>
 8009762:	460b      	mov	r3, r1
 8009764:	4303      	orrs	r3, r0
 8009766:	bf08      	it	eq
 8009768:	2322      	moveq	r3, #34	; 0x22
 800976a:	4682      	mov	sl, r0
 800976c:	468b      	mov	fp, r1
 800976e:	bf08      	it	eq
 8009770:	6023      	streq	r3, [r4, #0]
 8009772:	e62b      	b.n	80093cc <_strtod_l+0x4a4>
 8009774:	f04f 32ff 	mov.w	r2, #4294967295
 8009778:	fa02 f303 	lsl.w	r3, r2, r3
 800977c:	ea03 0a0a 	and.w	sl, r3, sl
 8009780:	e6e3      	b.n	800954a <_strtod_l+0x622>
 8009782:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009786:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800978a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800978e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009792:	fa01 f308 	lsl.w	r3, r1, r8
 8009796:	9308      	str	r3, [sp, #32]
 8009798:	910d      	str	r1, [sp, #52]	; 0x34
 800979a:	e746      	b.n	800962a <_strtod_l+0x702>
 800979c:	2300      	movs	r3, #0
 800979e:	9308      	str	r3, [sp, #32]
 80097a0:	2301      	movs	r3, #1
 80097a2:	930d      	str	r3, [sp, #52]	; 0x34
 80097a4:	e741      	b.n	800962a <_strtod_l+0x702>
 80097a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097a8:	4642      	mov	r2, r8
 80097aa:	4620      	mov	r0, r4
 80097ac:	f001 ff08 	bl	800b5c0 <__lshift>
 80097b0:	9018      	str	r0, [sp, #96]	; 0x60
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f47f af6b 	bne.w	800968e <_strtod_l+0x766>
 80097b8:	e5fe      	b.n	80093b8 <_strtod_l+0x490>
 80097ba:	465f      	mov	r7, fp
 80097bc:	d16e      	bne.n	800989c <_strtod_l+0x974>
 80097be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097c4:	b342      	cbz	r2, 8009818 <_strtod_l+0x8f0>
 80097c6:	4a32      	ldr	r2, [pc, #200]	; (8009890 <_strtod_l+0x968>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d128      	bne.n	800981e <_strtod_l+0x8f6>
 80097cc:	9b04      	ldr	r3, [sp, #16]
 80097ce:	4651      	mov	r1, sl
 80097d0:	b1eb      	cbz	r3, 800980e <_strtod_l+0x8e6>
 80097d2:	4b2d      	ldr	r3, [pc, #180]	; (8009888 <_strtod_l+0x960>)
 80097d4:	403b      	ands	r3, r7
 80097d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80097da:	f04f 32ff 	mov.w	r2, #4294967295
 80097de:	d819      	bhi.n	8009814 <_strtod_l+0x8ec>
 80097e0:	0d1b      	lsrs	r3, r3, #20
 80097e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80097e6:	fa02 f303 	lsl.w	r3, r2, r3
 80097ea:	4299      	cmp	r1, r3
 80097ec:	d117      	bne.n	800981e <_strtod_l+0x8f6>
 80097ee:	4b29      	ldr	r3, [pc, #164]	; (8009894 <_strtod_l+0x96c>)
 80097f0:	429f      	cmp	r7, r3
 80097f2:	d102      	bne.n	80097fa <_strtod_l+0x8d2>
 80097f4:	3101      	adds	r1, #1
 80097f6:	f43f addf 	beq.w	80093b8 <_strtod_l+0x490>
 80097fa:	4b23      	ldr	r3, [pc, #140]	; (8009888 <_strtod_l+0x960>)
 80097fc:	403b      	ands	r3, r7
 80097fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009802:	f04f 0a00 	mov.w	sl, #0
 8009806:	9b04      	ldr	r3, [sp, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1a4      	bne.n	8009756 <_strtod_l+0x82e>
 800980c:	e5de      	b.n	80093cc <_strtod_l+0x4a4>
 800980e:	f04f 33ff 	mov.w	r3, #4294967295
 8009812:	e7ea      	b.n	80097ea <_strtod_l+0x8c2>
 8009814:	4613      	mov	r3, r2
 8009816:	e7e8      	b.n	80097ea <_strtod_l+0x8c2>
 8009818:	ea53 030a 	orrs.w	r3, r3, sl
 800981c:	d08c      	beq.n	8009738 <_strtod_l+0x810>
 800981e:	9b08      	ldr	r3, [sp, #32]
 8009820:	b1db      	cbz	r3, 800985a <_strtod_l+0x932>
 8009822:	423b      	tst	r3, r7
 8009824:	d0ef      	beq.n	8009806 <_strtod_l+0x8de>
 8009826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009828:	9a04      	ldr	r2, [sp, #16]
 800982a:	4650      	mov	r0, sl
 800982c:	4659      	mov	r1, fp
 800982e:	b1c3      	cbz	r3, 8009862 <_strtod_l+0x93a>
 8009830:	f7ff fb5d 	bl	8008eee <sulp>
 8009834:	4602      	mov	r2, r0
 8009836:	460b      	mov	r3, r1
 8009838:	ec51 0b18 	vmov	r0, r1, d8
 800983c:	f7f6 fd3e 	bl	80002bc <__adddf3>
 8009840:	4682      	mov	sl, r0
 8009842:	468b      	mov	fp, r1
 8009844:	e7df      	b.n	8009806 <_strtod_l+0x8de>
 8009846:	4013      	ands	r3, r2
 8009848:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800984c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009850:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009854:	f04f 3aff 	mov.w	sl, #4294967295
 8009858:	e7d5      	b.n	8009806 <_strtod_l+0x8de>
 800985a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800985c:	ea13 0f0a 	tst.w	r3, sl
 8009860:	e7e0      	b.n	8009824 <_strtod_l+0x8fc>
 8009862:	f7ff fb44 	bl	8008eee <sulp>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	ec51 0b18 	vmov	r0, r1, d8
 800986e:	f7f6 fd23 	bl	80002b8 <__aeabi_dsub>
 8009872:	2200      	movs	r2, #0
 8009874:	2300      	movs	r3, #0
 8009876:	4682      	mov	sl, r0
 8009878:	468b      	mov	fp, r1
 800987a:	f7f7 f93d 	bl	8000af8 <__aeabi_dcmpeq>
 800987e:	2800      	cmp	r0, #0
 8009880:	d0c1      	beq.n	8009806 <_strtod_l+0x8de>
 8009882:	e611      	b.n	80094a8 <_strtod_l+0x580>
 8009884:	fffffc02 	.word	0xfffffc02
 8009888:	7ff00000 	.word	0x7ff00000
 800988c:	39500000 	.word	0x39500000
 8009890:	000fffff 	.word	0x000fffff
 8009894:	7fefffff 	.word	0x7fefffff
 8009898:	0800ffb8 	.word	0x0800ffb8
 800989c:	4631      	mov	r1, r6
 800989e:	4628      	mov	r0, r5
 80098a0:	f002 f87c 	bl	800b99c <__ratio>
 80098a4:	ec59 8b10 	vmov	r8, r9, d0
 80098a8:	ee10 0a10 	vmov	r0, s0
 80098ac:	2200      	movs	r2, #0
 80098ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098b2:	4649      	mov	r1, r9
 80098b4:	f7f7 f934 	bl	8000b20 <__aeabi_dcmple>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d07a      	beq.n	80099b2 <_strtod_l+0xa8a>
 80098bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d04a      	beq.n	8009958 <_strtod_l+0xa30>
 80098c2:	4b95      	ldr	r3, [pc, #596]	; (8009b18 <_strtod_l+0xbf0>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80098ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009b18 <_strtod_l+0xbf0>
 80098ce:	f04f 0800 	mov.w	r8, #0
 80098d2:	4b92      	ldr	r3, [pc, #584]	; (8009b1c <_strtod_l+0xbf4>)
 80098d4:	403b      	ands	r3, r7
 80098d6:	930d      	str	r3, [sp, #52]	; 0x34
 80098d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098da:	4b91      	ldr	r3, [pc, #580]	; (8009b20 <_strtod_l+0xbf8>)
 80098dc:	429a      	cmp	r2, r3
 80098de:	f040 80b0 	bne.w	8009a42 <_strtod_l+0xb1a>
 80098e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80098e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80098ea:	ec4b ab10 	vmov	d0, sl, fp
 80098ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80098f2:	f001 ff7b 	bl	800b7ec <__ulp>
 80098f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80098fa:	ec53 2b10 	vmov	r2, r3, d0
 80098fe:	f7f6 fe93 	bl	8000628 <__aeabi_dmul>
 8009902:	4652      	mov	r2, sl
 8009904:	465b      	mov	r3, fp
 8009906:	f7f6 fcd9 	bl	80002bc <__adddf3>
 800990a:	460b      	mov	r3, r1
 800990c:	4983      	ldr	r1, [pc, #524]	; (8009b1c <_strtod_l+0xbf4>)
 800990e:	4a85      	ldr	r2, [pc, #532]	; (8009b24 <_strtod_l+0xbfc>)
 8009910:	4019      	ands	r1, r3
 8009912:	4291      	cmp	r1, r2
 8009914:	4682      	mov	sl, r0
 8009916:	d960      	bls.n	80099da <_strtod_l+0xab2>
 8009918:	ee18 3a90 	vmov	r3, s17
 800991c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009920:	4293      	cmp	r3, r2
 8009922:	d104      	bne.n	800992e <_strtod_l+0xa06>
 8009924:	ee18 3a10 	vmov	r3, s16
 8009928:	3301      	adds	r3, #1
 800992a:	f43f ad45 	beq.w	80093b8 <_strtod_l+0x490>
 800992e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009b30 <_strtod_l+0xc08>
 8009932:	f04f 3aff 	mov.w	sl, #4294967295
 8009936:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009938:	4620      	mov	r0, r4
 800993a:	f001 fc25 	bl	800b188 <_Bfree>
 800993e:	9905      	ldr	r1, [sp, #20]
 8009940:	4620      	mov	r0, r4
 8009942:	f001 fc21 	bl	800b188 <_Bfree>
 8009946:	4631      	mov	r1, r6
 8009948:	4620      	mov	r0, r4
 800994a:	f001 fc1d 	bl	800b188 <_Bfree>
 800994e:	4629      	mov	r1, r5
 8009950:	4620      	mov	r0, r4
 8009952:	f001 fc19 	bl	800b188 <_Bfree>
 8009956:	e61a      	b.n	800958e <_strtod_l+0x666>
 8009958:	f1ba 0f00 	cmp.w	sl, #0
 800995c:	d11b      	bne.n	8009996 <_strtod_l+0xa6e>
 800995e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009962:	b9f3      	cbnz	r3, 80099a2 <_strtod_l+0xa7a>
 8009964:	4b6c      	ldr	r3, [pc, #432]	; (8009b18 <_strtod_l+0xbf0>)
 8009966:	2200      	movs	r2, #0
 8009968:	4640      	mov	r0, r8
 800996a:	4649      	mov	r1, r9
 800996c:	f7f7 f8ce 	bl	8000b0c <__aeabi_dcmplt>
 8009970:	b9d0      	cbnz	r0, 80099a8 <_strtod_l+0xa80>
 8009972:	4640      	mov	r0, r8
 8009974:	4649      	mov	r1, r9
 8009976:	4b6c      	ldr	r3, [pc, #432]	; (8009b28 <_strtod_l+0xc00>)
 8009978:	2200      	movs	r2, #0
 800997a:	f7f6 fe55 	bl	8000628 <__aeabi_dmul>
 800997e:	4680      	mov	r8, r0
 8009980:	4689      	mov	r9, r1
 8009982:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009986:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800998a:	9315      	str	r3, [sp, #84]	; 0x54
 800998c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009990:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009994:	e79d      	b.n	80098d2 <_strtod_l+0x9aa>
 8009996:	f1ba 0f01 	cmp.w	sl, #1
 800999a:	d102      	bne.n	80099a2 <_strtod_l+0xa7a>
 800999c:	2f00      	cmp	r7, #0
 800999e:	f43f ad83 	beq.w	80094a8 <_strtod_l+0x580>
 80099a2:	4b62      	ldr	r3, [pc, #392]	; (8009b2c <_strtod_l+0xc04>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	e78e      	b.n	80098c6 <_strtod_l+0x99e>
 80099a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009b28 <_strtod_l+0xc00>
 80099ac:	f04f 0800 	mov.w	r8, #0
 80099b0:	e7e7      	b.n	8009982 <_strtod_l+0xa5a>
 80099b2:	4b5d      	ldr	r3, [pc, #372]	; (8009b28 <_strtod_l+0xc00>)
 80099b4:	4640      	mov	r0, r8
 80099b6:	4649      	mov	r1, r9
 80099b8:	2200      	movs	r2, #0
 80099ba:	f7f6 fe35 	bl	8000628 <__aeabi_dmul>
 80099be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099c0:	4680      	mov	r8, r0
 80099c2:	4689      	mov	r9, r1
 80099c4:	b933      	cbnz	r3, 80099d4 <_strtod_l+0xaac>
 80099c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099ca:	900e      	str	r0, [sp, #56]	; 0x38
 80099cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80099ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80099d2:	e7dd      	b.n	8009990 <_strtod_l+0xa68>
 80099d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80099d8:	e7f9      	b.n	80099ce <_strtod_l+0xaa6>
 80099da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80099de:	9b04      	ldr	r3, [sp, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1a8      	bne.n	8009936 <_strtod_l+0xa0e>
 80099e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80099e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099ea:	0d1b      	lsrs	r3, r3, #20
 80099ec:	051b      	lsls	r3, r3, #20
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d1a1      	bne.n	8009936 <_strtod_l+0xa0e>
 80099f2:	4640      	mov	r0, r8
 80099f4:	4649      	mov	r1, r9
 80099f6:	f7f7 f9af 	bl	8000d58 <__aeabi_d2lz>
 80099fa:	f7f6 fde7 	bl	80005cc <__aeabi_l2d>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	4640      	mov	r0, r8
 8009a04:	4649      	mov	r1, r9
 8009a06:	f7f6 fc57 	bl	80002b8 <__aeabi_dsub>
 8009a0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a10:	ea43 030a 	orr.w	r3, r3, sl
 8009a14:	4313      	orrs	r3, r2
 8009a16:	4680      	mov	r8, r0
 8009a18:	4689      	mov	r9, r1
 8009a1a:	d055      	beq.n	8009ac8 <_strtod_l+0xba0>
 8009a1c:	a336      	add	r3, pc, #216	; (adr r3, 8009af8 <_strtod_l+0xbd0>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f7f7 f873 	bl	8000b0c <__aeabi_dcmplt>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	f47f acd0 	bne.w	80093cc <_strtod_l+0x4a4>
 8009a2c:	a334      	add	r3, pc, #208	; (adr r3, 8009b00 <_strtod_l+0xbd8>)
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	4640      	mov	r0, r8
 8009a34:	4649      	mov	r1, r9
 8009a36:	f7f7 f887 	bl	8000b48 <__aeabi_dcmpgt>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	f43f af7b 	beq.w	8009936 <_strtod_l+0xa0e>
 8009a40:	e4c4      	b.n	80093cc <_strtod_l+0x4a4>
 8009a42:	9b04      	ldr	r3, [sp, #16]
 8009a44:	b333      	cbz	r3, 8009a94 <_strtod_l+0xb6c>
 8009a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a48:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a4c:	d822      	bhi.n	8009a94 <_strtod_l+0xb6c>
 8009a4e:	a32e      	add	r3, pc, #184	; (adr r3, 8009b08 <_strtod_l+0xbe0>)
 8009a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a54:	4640      	mov	r0, r8
 8009a56:	4649      	mov	r1, r9
 8009a58:	f7f7 f862 	bl	8000b20 <__aeabi_dcmple>
 8009a5c:	b1a0      	cbz	r0, 8009a88 <_strtod_l+0xb60>
 8009a5e:	4649      	mov	r1, r9
 8009a60:	4640      	mov	r0, r8
 8009a62:	f7f7 f8b9 	bl	8000bd8 <__aeabi_d2uiz>
 8009a66:	2801      	cmp	r0, #1
 8009a68:	bf38      	it	cc
 8009a6a:	2001      	movcc	r0, #1
 8009a6c:	f7f6 fd62 	bl	8000534 <__aeabi_ui2d>
 8009a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a72:	4680      	mov	r8, r0
 8009a74:	4689      	mov	r9, r1
 8009a76:	bb23      	cbnz	r3, 8009ac2 <_strtod_l+0xb9a>
 8009a78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a7c:	9010      	str	r0, [sp, #64]	; 0x40
 8009a7e:	9311      	str	r3, [sp, #68]	; 0x44
 8009a80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a84:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a8c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009a90:	1a9b      	subs	r3, r3, r2
 8009a92:	9309      	str	r3, [sp, #36]	; 0x24
 8009a94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a98:	eeb0 0a48 	vmov.f32	s0, s16
 8009a9c:	eef0 0a68 	vmov.f32	s1, s17
 8009aa0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009aa4:	f001 fea2 	bl	800b7ec <__ulp>
 8009aa8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009aac:	ec53 2b10 	vmov	r2, r3, d0
 8009ab0:	f7f6 fdba 	bl	8000628 <__aeabi_dmul>
 8009ab4:	ec53 2b18 	vmov	r2, r3, d8
 8009ab8:	f7f6 fc00 	bl	80002bc <__adddf3>
 8009abc:	4682      	mov	sl, r0
 8009abe:	468b      	mov	fp, r1
 8009ac0:	e78d      	b.n	80099de <_strtod_l+0xab6>
 8009ac2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009ac6:	e7db      	b.n	8009a80 <_strtod_l+0xb58>
 8009ac8:	a311      	add	r3, pc, #68	; (adr r3, 8009b10 <_strtod_l+0xbe8>)
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f7f7 f81d 	bl	8000b0c <__aeabi_dcmplt>
 8009ad2:	e7b2      	b.n	8009a3a <_strtod_l+0xb12>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ad8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ada:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009adc:	6013      	str	r3, [r2, #0]
 8009ade:	f7ff ba6b 	b.w	8008fb8 <_strtod_l+0x90>
 8009ae2:	2a65      	cmp	r2, #101	; 0x65
 8009ae4:	f43f ab5f 	beq.w	80091a6 <_strtod_l+0x27e>
 8009ae8:	2a45      	cmp	r2, #69	; 0x45
 8009aea:	f43f ab5c 	beq.w	80091a6 <_strtod_l+0x27e>
 8009aee:	2301      	movs	r3, #1
 8009af0:	f7ff bb94 	b.w	800921c <_strtod_l+0x2f4>
 8009af4:	f3af 8000 	nop.w
 8009af8:	94a03595 	.word	0x94a03595
 8009afc:	3fdfffff 	.word	0x3fdfffff
 8009b00:	35afe535 	.word	0x35afe535
 8009b04:	3fe00000 	.word	0x3fe00000
 8009b08:	ffc00000 	.word	0xffc00000
 8009b0c:	41dfffff 	.word	0x41dfffff
 8009b10:	94a03595 	.word	0x94a03595
 8009b14:	3fcfffff 	.word	0x3fcfffff
 8009b18:	3ff00000 	.word	0x3ff00000
 8009b1c:	7ff00000 	.word	0x7ff00000
 8009b20:	7fe00000 	.word	0x7fe00000
 8009b24:	7c9fffff 	.word	0x7c9fffff
 8009b28:	3fe00000 	.word	0x3fe00000
 8009b2c:	bff00000 	.word	0xbff00000
 8009b30:	7fefffff 	.word	0x7fefffff

08009b34 <_strtod_r>:
 8009b34:	4b01      	ldr	r3, [pc, #4]	; (8009b3c <_strtod_r+0x8>)
 8009b36:	f7ff b9f7 	b.w	8008f28 <_strtod_l>
 8009b3a:	bf00      	nop
 8009b3c:	20000084 	.word	0x20000084

08009b40 <strtod>:
 8009b40:	460a      	mov	r2, r1
 8009b42:	4601      	mov	r1, r0
 8009b44:	4802      	ldr	r0, [pc, #8]	; (8009b50 <strtod+0x10>)
 8009b46:	4b03      	ldr	r3, [pc, #12]	; (8009b54 <strtod+0x14>)
 8009b48:	6800      	ldr	r0, [r0, #0]
 8009b4a:	f7ff b9ed 	b.w	8008f28 <_strtod_l>
 8009b4e:	bf00      	nop
 8009b50:	2000001c 	.word	0x2000001c
 8009b54:	20000084 	.word	0x20000084

08009b58 <_strtol_l.constprop.0>:
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b5e:	d001      	beq.n	8009b64 <_strtol_l.constprop.0+0xc>
 8009b60:	2b24      	cmp	r3, #36	; 0x24
 8009b62:	d906      	bls.n	8009b72 <_strtol_l.constprop.0+0x1a>
 8009b64:	f7fe fa80 	bl	8008068 <__errno>
 8009b68:	2316      	movs	r3, #22
 8009b6a:	6003      	str	r3, [r0, #0]
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009c58 <_strtol_l.constprop.0+0x100>
 8009b76:	460d      	mov	r5, r1
 8009b78:	462e      	mov	r6, r5
 8009b7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009b82:	f017 0708 	ands.w	r7, r7, #8
 8009b86:	d1f7      	bne.n	8009b78 <_strtol_l.constprop.0+0x20>
 8009b88:	2c2d      	cmp	r4, #45	; 0x2d
 8009b8a:	d132      	bne.n	8009bf2 <_strtol_l.constprop.0+0x9a>
 8009b8c:	782c      	ldrb	r4, [r5, #0]
 8009b8e:	2701      	movs	r7, #1
 8009b90:	1cb5      	adds	r5, r6, #2
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d05b      	beq.n	8009c4e <_strtol_l.constprop.0+0xf6>
 8009b96:	2b10      	cmp	r3, #16
 8009b98:	d109      	bne.n	8009bae <_strtol_l.constprop.0+0x56>
 8009b9a:	2c30      	cmp	r4, #48	; 0x30
 8009b9c:	d107      	bne.n	8009bae <_strtol_l.constprop.0+0x56>
 8009b9e:	782c      	ldrb	r4, [r5, #0]
 8009ba0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009ba4:	2c58      	cmp	r4, #88	; 0x58
 8009ba6:	d14d      	bne.n	8009c44 <_strtol_l.constprop.0+0xec>
 8009ba8:	786c      	ldrb	r4, [r5, #1]
 8009baa:	2310      	movs	r3, #16
 8009bac:	3502      	adds	r5, #2
 8009bae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009bb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bb6:	f04f 0c00 	mov.w	ip, #0
 8009bba:	fbb8 f9f3 	udiv	r9, r8, r3
 8009bbe:	4666      	mov	r6, ip
 8009bc0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009bc4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009bc8:	f1be 0f09 	cmp.w	lr, #9
 8009bcc:	d816      	bhi.n	8009bfc <_strtol_l.constprop.0+0xa4>
 8009bce:	4674      	mov	r4, lr
 8009bd0:	42a3      	cmp	r3, r4
 8009bd2:	dd24      	ble.n	8009c1e <_strtol_l.constprop.0+0xc6>
 8009bd4:	f1bc 0f00 	cmp.w	ip, #0
 8009bd8:	db1e      	blt.n	8009c18 <_strtol_l.constprop.0+0xc0>
 8009bda:	45b1      	cmp	r9, r6
 8009bdc:	d31c      	bcc.n	8009c18 <_strtol_l.constprop.0+0xc0>
 8009bde:	d101      	bne.n	8009be4 <_strtol_l.constprop.0+0x8c>
 8009be0:	45a2      	cmp	sl, r4
 8009be2:	db19      	blt.n	8009c18 <_strtol_l.constprop.0+0xc0>
 8009be4:	fb06 4603 	mla	r6, r6, r3, r4
 8009be8:	f04f 0c01 	mov.w	ip, #1
 8009bec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bf0:	e7e8      	b.n	8009bc4 <_strtol_l.constprop.0+0x6c>
 8009bf2:	2c2b      	cmp	r4, #43	; 0x2b
 8009bf4:	bf04      	itt	eq
 8009bf6:	782c      	ldrbeq	r4, [r5, #0]
 8009bf8:	1cb5      	addeq	r5, r6, #2
 8009bfa:	e7ca      	b.n	8009b92 <_strtol_l.constprop.0+0x3a>
 8009bfc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009c00:	f1be 0f19 	cmp.w	lr, #25
 8009c04:	d801      	bhi.n	8009c0a <_strtol_l.constprop.0+0xb2>
 8009c06:	3c37      	subs	r4, #55	; 0x37
 8009c08:	e7e2      	b.n	8009bd0 <_strtol_l.constprop.0+0x78>
 8009c0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009c0e:	f1be 0f19 	cmp.w	lr, #25
 8009c12:	d804      	bhi.n	8009c1e <_strtol_l.constprop.0+0xc6>
 8009c14:	3c57      	subs	r4, #87	; 0x57
 8009c16:	e7db      	b.n	8009bd0 <_strtol_l.constprop.0+0x78>
 8009c18:	f04f 3cff 	mov.w	ip, #4294967295
 8009c1c:	e7e6      	b.n	8009bec <_strtol_l.constprop.0+0x94>
 8009c1e:	f1bc 0f00 	cmp.w	ip, #0
 8009c22:	da05      	bge.n	8009c30 <_strtol_l.constprop.0+0xd8>
 8009c24:	2322      	movs	r3, #34	; 0x22
 8009c26:	6003      	str	r3, [r0, #0]
 8009c28:	4646      	mov	r6, r8
 8009c2a:	b942      	cbnz	r2, 8009c3e <_strtol_l.constprop.0+0xe6>
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	e79e      	b.n	8009b6e <_strtol_l.constprop.0+0x16>
 8009c30:	b107      	cbz	r7, 8009c34 <_strtol_l.constprop.0+0xdc>
 8009c32:	4276      	negs	r6, r6
 8009c34:	2a00      	cmp	r2, #0
 8009c36:	d0f9      	beq.n	8009c2c <_strtol_l.constprop.0+0xd4>
 8009c38:	f1bc 0f00 	cmp.w	ip, #0
 8009c3c:	d000      	beq.n	8009c40 <_strtol_l.constprop.0+0xe8>
 8009c3e:	1e69      	subs	r1, r5, #1
 8009c40:	6011      	str	r1, [r2, #0]
 8009c42:	e7f3      	b.n	8009c2c <_strtol_l.constprop.0+0xd4>
 8009c44:	2430      	movs	r4, #48	; 0x30
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1b1      	bne.n	8009bae <_strtol_l.constprop.0+0x56>
 8009c4a:	2308      	movs	r3, #8
 8009c4c:	e7af      	b.n	8009bae <_strtol_l.constprop.0+0x56>
 8009c4e:	2c30      	cmp	r4, #48	; 0x30
 8009c50:	d0a5      	beq.n	8009b9e <_strtol_l.constprop.0+0x46>
 8009c52:	230a      	movs	r3, #10
 8009c54:	e7ab      	b.n	8009bae <_strtol_l.constprop.0+0x56>
 8009c56:	bf00      	nop
 8009c58:	0800ffe1 	.word	0x0800ffe1

08009c5c <_strtol_r>:
 8009c5c:	f7ff bf7c 	b.w	8009b58 <_strtol_l.constprop.0>

08009c60 <strtol>:
 8009c60:	4613      	mov	r3, r2
 8009c62:	460a      	mov	r2, r1
 8009c64:	4601      	mov	r1, r0
 8009c66:	4802      	ldr	r0, [pc, #8]	; (8009c70 <strtol+0x10>)
 8009c68:	6800      	ldr	r0, [r0, #0]
 8009c6a:	f7ff bf75 	b.w	8009b58 <_strtol_l.constprop.0>
 8009c6e:	bf00      	nop
 8009c70:	2000001c 	.word	0x2000001c

08009c74 <_write_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4d07      	ldr	r5, [pc, #28]	; (8009c94 <_write_r+0x20>)
 8009c78:	4604      	mov	r4, r0
 8009c7a:	4608      	mov	r0, r1
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	2200      	movs	r2, #0
 8009c80:	602a      	str	r2, [r5, #0]
 8009c82:	461a      	mov	r2, r3
 8009c84:	f7fb fa34 	bl	80050f0 <_write>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d102      	bne.n	8009c92 <_write_r+0x1e>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	b103      	cbz	r3, 8009c92 <_write_r+0x1e>
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	20009d08 	.word	0x20009d08

08009c98 <_close_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4d06      	ldr	r5, [pc, #24]	; (8009cb4 <_close_r+0x1c>)
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	4608      	mov	r0, r1
 8009ca2:	602b      	str	r3, [r5, #0]
 8009ca4:	f7fb fa40 	bl	8005128 <_close>
 8009ca8:	1c43      	adds	r3, r0, #1
 8009caa:	d102      	bne.n	8009cb2 <_close_r+0x1a>
 8009cac:	682b      	ldr	r3, [r5, #0]
 8009cae:	b103      	cbz	r3, 8009cb2 <_close_r+0x1a>
 8009cb0:	6023      	str	r3, [r4, #0]
 8009cb2:	bd38      	pop	{r3, r4, r5, pc}
 8009cb4:	20009d08 	.word	0x20009d08

08009cb8 <quorem>:
 8009cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cbc:	6903      	ldr	r3, [r0, #16]
 8009cbe:	690c      	ldr	r4, [r1, #16]
 8009cc0:	42a3      	cmp	r3, r4
 8009cc2:	4607      	mov	r7, r0
 8009cc4:	f2c0 8081 	blt.w	8009dca <quorem+0x112>
 8009cc8:	3c01      	subs	r4, #1
 8009cca:	f101 0814 	add.w	r8, r1, #20
 8009cce:	f100 0514 	add.w	r5, r0, #20
 8009cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cd6:	9301      	str	r3, [sp, #4]
 8009cd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009cdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ce8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009cec:	fbb2 f6f3 	udiv	r6, r2, r3
 8009cf0:	d331      	bcc.n	8009d56 <quorem+0x9e>
 8009cf2:	f04f 0e00 	mov.w	lr, #0
 8009cf6:	4640      	mov	r0, r8
 8009cf8:	46ac      	mov	ip, r5
 8009cfa:	46f2      	mov	sl, lr
 8009cfc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d00:	b293      	uxth	r3, r2
 8009d02:	fb06 e303 	mla	r3, r6, r3, lr
 8009d06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	ebaa 0303 	sub.w	r3, sl, r3
 8009d10:	f8dc a000 	ldr.w	sl, [ip]
 8009d14:	0c12      	lsrs	r2, r2, #16
 8009d16:	fa13 f38a 	uxtah	r3, r3, sl
 8009d1a:	fb06 e202 	mla	r2, r6, r2, lr
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	9b00      	ldr	r3, [sp, #0]
 8009d22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d26:	b292      	uxth	r2, r2
 8009d28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009d2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d30:	f8bd 3000 	ldrh.w	r3, [sp]
 8009d34:	4581      	cmp	r9, r0
 8009d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d3a:	f84c 3b04 	str.w	r3, [ip], #4
 8009d3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009d42:	d2db      	bcs.n	8009cfc <quorem+0x44>
 8009d44:	f855 300b 	ldr.w	r3, [r5, fp]
 8009d48:	b92b      	cbnz	r3, 8009d56 <quorem+0x9e>
 8009d4a:	9b01      	ldr	r3, [sp, #4]
 8009d4c:	3b04      	subs	r3, #4
 8009d4e:	429d      	cmp	r5, r3
 8009d50:	461a      	mov	r2, r3
 8009d52:	d32e      	bcc.n	8009db2 <quorem+0xfa>
 8009d54:	613c      	str	r4, [r7, #16]
 8009d56:	4638      	mov	r0, r7
 8009d58:	f001 fca2 	bl	800b6a0 <__mcmp>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	db24      	blt.n	8009daa <quorem+0xf2>
 8009d60:	3601      	adds	r6, #1
 8009d62:	4628      	mov	r0, r5
 8009d64:	f04f 0c00 	mov.w	ip, #0
 8009d68:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d6c:	f8d0 e000 	ldr.w	lr, [r0]
 8009d70:	b293      	uxth	r3, r2
 8009d72:	ebac 0303 	sub.w	r3, ip, r3
 8009d76:	0c12      	lsrs	r2, r2, #16
 8009d78:	fa13 f38e 	uxtah	r3, r3, lr
 8009d7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d8a:	45c1      	cmp	r9, r8
 8009d8c:	f840 3b04 	str.w	r3, [r0], #4
 8009d90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d94:	d2e8      	bcs.n	8009d68 <quorem+0xb0>
 8009d96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d9e:	b922      	cbnz	r2, 8009daa <quorem+0xf2>
 8009da0:	3b04      	subs	r3, #4
 8009da2:	429d      	cmp	r5, r3
 8009da4:	461a      	mov	r2, r3
 8009da6:	d30a      	bcc.n	8009dbe <quorem+0x106>
 8009da8:	613c      	str	r4, [r7, #16]
 8009daa:	4630      	mov	r0, r6
 8009dac:	b003      	add	sp, #12
 8009dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db2:	6812      	ldr	r2, [r2, #0]
 8009db4:	3b04      	subs	r3, #4
 8009db6:	2a00      	cmp	r2, #0
 8009db8:	d1cc      	bne.n	8009d54 <quorem+0x9c>
 8009dba:	3c01      	subs	r4, #1
 8009dbc:	e7c7      	b.n	8009d4e <quorem+0x96>
 8009dbe:	6812      	ldr	r2, [r2, #0]
 8009dc0:	3b04      	subs	r3, #4
 8009dc2:	2a00      	cmp	r2, #0
 8009dc4:	d1f0      	bne.n	8009da8 <quorem+0xf0>
 8009dc6:	3c01      	subs	r4, #1
 8009dc8:	e7eb      	b.n	8009da2 <quorem+0xea>
 8009dca:	2000      	movs	r0, #0
 8009dcc:	e7ee      	b.n	8009dac <quorem+0xf4>
	...

08009dd0 <_dtoa_r>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	ed2d 8b04 	vpush	{d8-d9}
 8009dd8:	ec57 6b10 	vmov	r6, r7, d0
 8009ddc:	b093      	sub	sp, #76	; 0x4c
 8009dde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009de0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009de4:	9106      	str	r1, [sp, #24]
 8009de6:	ee10 aa10 	vmov	sl, s0
 8009dea:	4604      	mov	r4, r0
 8009dec:	9209      	str	r2, [sp, #36]	; 0x24
 8009dee:	930c      	str	r3, [sp, #48]	; 0x30
 8009df0:	46bb      	mov	fp, r7
 8009df2:	b975      	cbnz	r5, 8009e12 <_dtoa_r+0x42>
 8009df4:	2010      	movs	r0, #16
 8009df6:	f001 f95f 	bl	800b0b8 <malloc>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	6260      	str	r0, [r4, #36]	; 0x24
 8009dfe:	b920      	cbnz	r0, 8009e0a <_dtoa_r+0x3a>
 8009e00:	4ba7      	ldr	r3, [pc, #668]	; (800a0a0 <_dtoa_r+0x2d0>)
 8009e02:	21ea      	movs	r1, #234	; 0xea
 8009e04:	48a7      	ldr	r0, [pc, #668]	; (800a0a4 <_dtoa_r+0x2d4>)
 8009e06:	f002 fceb 	bl	800c7e0 <__assert_func>
 8009e0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e0e:	6005      	str	r5, [r0, #0]
 8009e10:	60c5      	str	r5, [r0, #12]
 8009e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e14:	6819      	ldr	r1, [r3, #0]
 8009e16:	b151      	cbz	r1, 8009e2e <_dtoa_r+0x5e>
 8009e18:	685a      	ldr	r2, [r3, #4]
 8009e1a:	604a      	str	r2, [r1, #4]
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	4093      	lsls	r3, r2
 8009e20:	608b      	str	r3, [r1, #8]
 8009e22:	4620      	mov	r0, r4
 8009e24:	f001 f9b0 	bl	800b188 <_Bfree>
 8009e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	1e3b      	subs	r3, r7, #0
 8009e30:	bfaa      	itet	ge
 8009e32:	2300      	movge	r3, #0
 8009e34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009e38:	f8c8 3000 	strge.w	r3, [r8]
 8009e3c:	4b9a      	ldr	r3, [pc, #616]	; (800a0a8 <_dtoa_r+0x2d8>)
 8009e3e:	bfbc      	itt	lt
 8009e40:	2201      	movlt	r2, #1
 8009e42:	f8c8 2000 	strlt.w	r2, [r8]
 8009e46:	ea33 030b 	bics.w	r3, r3, fp
 8009e4a:	d11b      	bne.n	8009e84 <_dtoa_r+0xb4>
 8009e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e52:	6013      	str	r3, [r2, #0]
 8009e54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e58:	4333      	orrs	r3, r6
 8009e5a:	f000 8592 	beq.w	800a982 <_dtoa_r+0xbb2>
 8009e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e60:	b963      	cbnz	r3, 8009e7c <_dtoa_r+0xac>
 8009e62:	4b92      	ldr	r3, [pc, #584]	; (800a0ac <_dtoa_r+0x2dc>)
 8009e64:	e022      	b.n	8009eac <_dtoa_r+0xdc>
 8009e66:	4b92      	ldr	r3, [pc, #584]	; (800a0b0 <_dtoa_r+0x2e0>)
 8009e68:	9301      	str	r3, [sp, #4]
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	9801      	ldr	r0, [sp, #4]
 8009e72:	b013      	add	sp, #76	; 0x4c
 8009e74:	ecbd 8b04 	vpop	{d8-d9}
 8009e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7c:	4b8b      	ldr	r3, [pc, #556]	; (800a0ac <_dtoa_r+0x2dc>)
 8009e7e:	9301      	str	r3, [sp, #4]
 8009e80:	3303      	adds	r3, #3
 8009e82:	e7f3      	b.n	8009e6c <_dtoa_r+0x9c>
 8009e84:	2200      	movs	r2, #0
 8009e86:	2300      	movs	r3, #0
 8009e88:	4650      	mov	r0, sl
 8009e8a:	4659      	mov	r1, fp
 8009e8c:	f7f6 fe34 	bl	8000af8 <__aeabi_dcmpeq>
 8009e90:	ec4b ab19 	vmov	d9, sl, fp
 8009e94:	4680      	mov	r8, r0
 8009e96:	b158      	cbz	r0, 8009eb0 <_dtoa_r+0xe0>
 8009e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f000 856b 	beq.w	800a97c <_dtoa_r+0xbac>
 8009ea6:	4883      	ldr	r0, [pc, #524]	; (800a0b4 <_dtoa_r+0x2e4>)
 8009ea8:	6018      	str	r0, [r3, #0]
 8009eaa:	1e43      	subs	r3, r0, #1
 8009eac:	9301      	str	r3, [sp, #4]
 8009eae:	e7df      	b.n	8009e70 <_dtoa_r+0xa0>
 8009eb0:	ec4b ab10 	vmov	d0, sl, fp
 8009eb4:	aa10      	add	r2, sp, #64	; 0x40
 8009eb6:	a911      	add	r1, sp, #68	; 0x44
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f001 fd13 	bl	800b8e4 <__d2b>
 8009ebe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009ec2:	ee08 0a10 	vmov	s16, r0
 8009ec6:	2d00      	cmp	r5, #0
 8009ec8:	f000 8084 	beq.w	8009fd4 <_dtoa_r+0x204>
 8009ecc:	ee19 3a90 	vmov	r3, s19
 8009ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ed4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009ed8:	4656      	mov	r6, sl
 8009eda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009ede:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ee2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009ee6:	4b74      	ldr	r3, [pc, #464]	; (800a0b8 <_dtoa_r+0x2e8>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	4630      	mov	r0, r6
 8009eec:	4639      	mov	r1, r7
 8009eee:	f7f6 f9e3 	bl	80002b8 <__aeabi_dsub>
 8009ef2:	a365      	add	r3, pc, #404	; (adr r3, 800a088 <_dtoa_r+0x2b8>)
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	f7f6 fb96 	bl	8000628 <__aeabi_dmul>
 8009efc:	a364      	add	r3, pc, #400	; (adr r3, 800a090 <_dtoa_r+0x2c0>)
 8009efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f02:	f7f6 f9db 	bl	80002bc <__adddf3>
 8009f06:	4606      	mov	r6, r0
 8009f08:	4628      	mov	r0, r5
 8009f0a:	460f      	mov	r7, r1
 8009f0c:	f7f6 fb22 	bl	8000554 <__aeabi_i2d>
 8009f10:	a361      	add	r3, pc, #388	; (adr r3, 800a098 <_dtoa_r+0x2c8>)
 8009f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f16:	f7f6 fb87 	bl	8000628 <__aeabi_dmul>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	4630      	mov	r0, r6
 8009f20:	4639      	mov	r1, r7
 8009f22:	f7f6 f9cb 	bl	80002bc <__adddf3>
 8009f26:	4606      	mov	r6, r0
 8009f28:	460f      	mov	r7, r1
 8009f2a:	f7f6 fe2d 	bl	8000b88 <__aeabi_d2iz>
 8009f2e:	2200      	movs	r2, #0
 8009f30:	9000      	str	r0, [sp, #0]
 8009f32:	2300      	movs	r3, #0
 8009f34:	4630      	mov	r0, r6
 8009f36:	4639      	mov	r1, r7
 8009f38:	f7f6 fde8 	bl	8000b0c <__aeabi_dcmplt>
 8009f3c:	b150      	cbz	r0, 8009f54 <_dtoa_r+0x184>
 8009f3e:	9800      	ldr	r0, [sp, #0]
 8009f40:	f7f6 fb08 	bl	8000554 <__aeabi_i2d>
 8009f44:	4632      	mov	r2, r6
 8009f46:	463b      	mov	r3, r7
 8009f48:	f7f6 fdd6 	bl	8000af8 <__aeabi_dcmpeq>
 8009f4c:	b910      	cbnz	r0, 8009f54 <_dtoa_r+0x184>
 8009f4e:	9b00      	ldr	r3, [sp, #0]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	9b00      	ldr	r3, [sp, #0]
 8009f56:	2b16      	cmp	r3, #22
 8009f58:	d85a      	bhi.n	800a010 <_dtoa_r+0x240>
 8009f5a:	9a00      	ldr	r2, [sp, #0]
 8009f5c:	4b57      	ldr	r3, [pc, #348]	; (800a0bc <_dtoa_r+0x2ec>)
 8009f5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	ec51 0b19 	vmov	r0, r1, d9
 8009f6a:	f7f6 fdcf 	bl	8000b0c <__aeabi_dcmplt>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d050      	beq.n	800a014 <_dtoa_r+0x244>
 8009f72:	9b00      	ldr	r3, [sp, #0]
 8009f74:	3b01      	subs	r3, #1
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f7e:	1b5d      	subs	r5, r3, r5
 8009f80:	1e6b      	subs	r3, r5, #1
 8009f82:	9305      	str	r3, [sp, #20]
 8009f84:	bf45      	ittet	mi
 8009f86:	f1c5 0301 	rsbmi	r3, r5, #1
 8009f8a:	9304      	strmi	r3, [sp, #16]
 8009f8c:	2300      	movpl	r3, #0
 8009f8e:	2300      	movmi	r3, #0
 8009f90:	bf4c      	ite	mi
 8009f92:	9305      	strmi	r3, [sp, #20]
 8009f94:	9304      	strpl	r3, [sp, #16]
 8009f96:	9b00      	ldr	r3, [sp, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	db3d      	blt.n	800a018 <_dtoa_r+0x248>
 8009f9c:	9b05      	ldr	r3, [sp, #20]
 8009f9e:	9a00      	ldr	r2, [sp, #0]
 8009fa0:	920a      	str	r2, [sp, #40]	; 0x28
 8009fa2:	4413      	add	r3, r2
 8009fa4:	9305      	str	r3, [sp, #20]
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	9307      	str	r3, [sp, #28]
 8009faa:	9b06      	ldr	r3, [sp, #24]
 8009fac:	2b09      	cmp	r3, #9
 8009fae:	f200 8089 	bhi.w	800a0c4 <_dtoa_r+0x2f4>
 8009fb2:	2b05      	cmp	r3, #5
 8009fb4:	bfc4      	itt	gt
 8009fb6:	3b04      	subgt	r3, #4
 8009fb8:	9306      	strgt	r3, [sp, #24]
 8009fba:	9b06      	ldr	r3, [sp, #24]
 8009fbc:	f1a3 0302 	sub.w	r3, r3, #2
 8009fc0:	bfcc      	ite	gt
 8009fc2:	2500      	movgt	r5, #0
 8009fc4:	2501      	movle	r5, #1
 8009fc6:	2b03      	cmp	r3, #3
 8009fc8:	f200 8087 	bhi.w	800a0da <_dtoa_r+0x30a>
 8009fcc:	e8df f003 	tbb	[pc, r3]
 8009fd0:	59383a2d 	.word	0x59383a2d
 8009fd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009fd8:	441d      	add	r5, r3
 8009fda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009fde:	2b20      	cmp	r3, #32
 8009fe0:	bfc1      	itttt	gt
 8009fe2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009fe6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009fea:	fa0b f303 	lslgt.w	r3, fp, r3
 8009fee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009ff2:	bfda      	itte	le
 8009ff4:	f1c3 0320 	rsble	r3, r3, #32
 8009ff8:	fa06 f003 	lslle.w	r0, r6, r3
 8009ffc:	4318      	orrgt	r0, r3
 8009ffe:	f7f6 fa99 	bl	8000534 <__aeabi_ui2d>
 800a002:	2301      	movs	r3, #1
 800a004:	4606      	mov	r6, r0
 800a006:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a00a:	3d01      	subs	r5, #1
 800a00c:	930e      	str	r3, [sp, #56]	; 0x38
 800a00e:	e76a      	b.n	8009ee6 <_dtoa_r+0x116>
 800a010:	2301      	movs	r3, #1
 800a012:	e7b2      	b.n	8009f7a <_dtoa_r+0x1aa>
 800a014:	900b      	str	r0, [sp, #44]	; 0x2c
 800a016:	e7b1      	b.n	8009f7c <_dtoa_r+0x1ac>
 800a018:	9b04      	ldr	r3, [sp, #16]
 800a01a:	9a00      	ldr	r2, [sp, #0]
 800a01c:	1a9b      	subs	r3, r3, r2
 800a01e:	9304      	str	r3, [sp, #16]
 800a020:	4253      	negs	r3, r2
 800a022:	9307      	str	r3, [sp, #28]
 800a024:	2300      	movs	r3, #0
 800a026:	930a      	str	r3, [sp, #40]	; 0x28
 800a028:	e7bf      	b.n	8009faa <_dtoa_r+0x1da>
 800a02a:	2300      	movs	r3, #0
 800a02c:	9308      	str	r3, [sp, #32]
 800a02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	dc55      	bgt.n	800a0e0 <_dtoa_r+0x310>
 800a034:	2301      	movs	r3, #1
 800a036:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a03a:	461a      	mov	r2, r3
 800a03c:	9209      	str	r2, [sp, #36]	; 0x24
 800a03e:	e00c      	b.n	800a05a <_dtoa_r+0x28a>
 800a040:	2301      	movs	r3, #1
 800a042:	e7f3      	b.n	800a02c <_dtoa_r+0x25c>
 800a044:	2300      	movs	r3, #0
 800a046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a048:	9308      	str	r3, [sp, #32]
 800a04a:	9b00      	ldr	r3, [sp, #0]
 800a04c:	4413      	add	r3, r2
 800a04e:	9302      	str	r3, [sp, #8]
 800a050:	3301      	adds	r3, #1
 800a052:	2b01      	cmp	r3, #1
 800a054:	9303      	str	r3, [sp, #12]
 800a056:	bfb8      	it	lt
 800a058:	2301      	movlt	r3, #1
 800a05a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a05c:	2200      	movs	r2, #0
 800a05e:	6042      	str	r2, [r0, #4]
 800a060:	2204      	movs	r2, #4
 800a062:	f102 0614 	add.w	r6, r2, #20
 800a066:	429e      	cmp	r6, r3
 800a068:	6841      	ldr	r1, [r0, #4]
 800a06a:	d93d      	bls.n	800a0e8 <_dtoa_r+0x318>
 800a06c:	4620      	mov	r0, r4
 800a06e:	f001 f84b 	bl	800b108 <_Balloc>
 800a072:	9001      	str	r0, [sp, #4]
 800a074:	2800      	cmp	r0, #0
 800a076:	d13b      	bne.n	800a0f0 <_dtoa_r+0x320>
 800a078:	4b11      	ldr	r3, [pc, #68]	; (800a0c0 <_dtoa_r+0x2f0>)
 800a07a:	4602      	mov	r2, r0
 800a07c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a080:	e6c0      	b.n	8009e04 <_dtoa_r+0x34>
 800a082:	2301      	movs	r3, #1
 800a084:	e7df      	b.n	800a046 <_dtoa_r+0x276>
 800a086:	bf00      	nop
 800a088:	636f4361 	.word	0x636f4361
 800a08c:	3fd287a7 	.word	0x3fd287a7
 800a090:	8b60c8b3 	.word	0x8b60c8b3
 800a094:	3fc68a28 	.word	0x3fc68a28
 800a098:	509f79fb 	.word	0x509f79fb
 800a09c:	3fd34413 	.word	0x3fd34413
 800a0a0:	080100ee 	.word	0x080100ee
 800a0a4:	08010105 	.word	0x08010105
 800a0a8:	7ff00000 	.word	0x7ff00000
 800a0ac:	080100ea 	.word	0x080100ea
 800a0b0:	080100e1 	.word	0x080100e1
 800a0b4:	0801035a 	.word	0x0801035a
 800a0b8:	3ff80000 	.word	0x3ff80000
 800a0bc:	08010270 	.word	0x08010270
 800a0c0:	08010160 	.word	0x08010160
 800a0c4:	2501      	movs	r5, #1
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	9306      	str	r3, [sp, #24]
 800a0ca:	9508      	str	r5, [sp, #32]
 800a0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	2312      	movs	r3, #18
 800a0d8:	e7b0      	b.n	800a03c <_dtoa_r+0x26c>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	9308      	str	r3, [sp, #32]
 800a0de:	e7f5      	b.n	800a0cc <_dtoa_r+0x2fc>
 800a0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a0e6:	e7b8      	b.n	800a05a <_dtoa_r+0x28a>
 800a0e8:	3101      	adds	r1, #1
 800a0ea:	6041      	str	r1, [r0, #4]
 800a0ec:	0052      	lsls	r2, r2, #1
 800a0ee:	e7b8      	b.n	800a062 <_dtoa_r+0x292>
 800a0f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0f2:	9a01      	ldr	r2, [sp, #4]
 800a0f4:	601a      	str	r2, [r3, #0]
 800a0f6:	9b03      	ldr	r3, [sp, #12]
 800a0f8:	2b0e      	cmp	r3, #14
 800a0fa:	f200 809d 	bhi.w	800a238 <_dtoa_r+0x468>
 800a0fe:	2d00      	cmp	r5, #0
 800a100:	f000 809a 	beq.w	800a238 <_dtoa_r+0x468>
 800a104:	9b00      	ldr	r3, [sp, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	dd32      	ble.n	800a170 <_dtoa_r+0x3a0>
 800a10a:	4ab7      	ldr	r2, [pc, #732]	; (800a3e8 <_dtoa_r+0x618>)
 800a10c:	f003 030f 	and.w	r3, r3, #15
 800a110:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a114:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a118:	9b00      	ldr	r3, [sp, #0]
 800a11a:	05d8      	lsls	r0, r3, #23
 800a11c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a120:	d516      	bpl.n	800a150 <_dtoa_r+0x380>
 800a122:	4bb2      	ldr	r3, [pc, #712]	; (800a3ec <_dtoa_r+0x61c>)
 800a124:	ec51 0b19 	vmov	r0, r1, d9
 800a128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a12c:	f7f6 fba6 	bl	800087c <__aeabi_ddiv>
 800a130:	f007 070f 	and.w	r7, r7, #15
 800a134:	4682      	mov	sl, r0
 800a136:	468b      	mov	fp, r1
 800a138:	2503      	movs	r5, #3
 800a13a:	4eac      	ldr	r6, [pc, #688]	; (800a3ec <_dtoa_r+0x61c>)
 800a13c:	b957      	cbnz	r7, 800a154 <_dtoa_r+0x384>
 800a13e:	4642      	mov	r2, r8
 800a140:	464b      	mov	r3, r9
 800a142:	4650      	mov	r0, sl
 800a144:	4659      	mov	r1, fp
 800a146:	f7f6 fb99 	bl	800087c <__aeabi_ddiv>
 800a14a:	4682      	mov	sl, r0
 800a14c:	468b      	mov	fp, r1
 800a14e:	e028      	b.n	800a1a2 <_dtoa_r+0x3d2>
 800a150:	2502      	movs	r5, #2
 800a152:	e7f2      	b.n	800a13a <_dtoa_r+0x36a>
 800a154:	07f9      	lsls	r1, r7, #31
 800a156:	d508      	bpl.n	800a16a <_dtoa_r+0x39a>
 800a158:	4640      	mov	r0, r8
 800a15a:	4649      	mov	r1, r9
 800a15c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a160:	f7f6 fa62 	bl	8000628 <__aeabi_dmul>
 800a164:	3501      	adds	r5, #1
 800a166:	4680      	mov	r8, r0
 800a168:	4689      	mov	r9, r1
 800a16a:	107f      	asrs	r7, r7, #1
 800a16c:	3608      	adds	r6, #8
 800a16e:	e7e5      	b.n	800a13c <_dtoa_r+0x36c>
 800a170:	f000 809b 	beq.w	800a2aa <_dtoa_r+0x4da>
 800a174:	9b00      	ldr	r3, [sp, #0]
 800a176:	4f9d      	ldr	r7, [pc, #628]	; (800a3ec <_dtoa_r+0x61c>)
 800a178:	425e      	negs	r6, r3
 800a17a:	4b9b      	ldr	r3, [pc, #620]	; (800a3e8 <_dtoa_r+0x618>)
 800a17c:	f006 020f 	and.w	r2, r6, #15
 800a180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	ec51 0b19 	vmov	r0, r1, d9
 800a18c:	f7f6 fa4c 	bl	8000628 <__aeabi_dmul>
 800a190:	1136      	asrs	r6, r6, #4
 800a192:	4682      	mov	sl, r0
 800a194:	468b      	mov	fp, r1
 800a196:	2300      	movs	r3, #0
 800a198:	2502      	movs	r5, #2
 800a19a:	2e00      	cmp	r6, #0
 800a19c:	d17a      	bne.n	800a294 <_dtoa_r+0x4c4>
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1d3      	bne.n	800a14a <_dtoa_r+0x37a>
 800a1a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 8082 	beq.w	800a2ae <_dtoa_r+0x4de>
 800a1aa:	4b91      	ldr	r3, [pc, #580]	; (800a3f0 <_dtoa_r+0x620>)
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	4650      	mov	r0, sl
 800a1b0:	4659      	mov	r1, fp
 800a1b2:	f7f6 fcab 	bl	8000b0c <__aeabi_dcmplt>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d079      	beq.n	800a2ae <_dtoa_r+0x4de>
 800a1ba:	9b03      	ldr	r3, [sp, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d076      	beq.n	800a2ae <_dtoa_r+0x4de>
 800a1c0:	9b02      	ldr	r3, [sp, #8]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	dd36      	ble.n	800a234 <_dtoa_r+0x464>
 800a1c6:	9b00      	ldr	r3, [sp, #0]
 800a1c8:	4650      	mov	r0, sl
 800a1ca:	4659      	mov	r1, fp
 800a1cc:	1e5f      	subs	r7, r3, #1
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	4b88      	ldr	r3, [pc, #544]	; (800a3f4 <_dtoa_r+0x624>)
 800a1d2:	f7f6 fa29 	bl	8000628 <__aeabi_dmul>
 800a1d6:	9e02      	ldr	r6, [sp, #8]
 800a1d8:	4682      	mov	sl, r0
 800a1da:	468b      	mov	fp, r1
 800a1dc:	3501      	adds	r5, #1
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f7f6 f9b8 	bl	8000554 <__aeabi_i2d>
 800a1e4:	4652      	mov	r2, sl
 800a1e6:	465b      	mov	r3, fp
 800a1e8:	f7f6 fa1e 	bl	8000628 <__aeabi_dmul>
 800a1ec:	4b82      	ldr	r3, [pc, #520]	; (800a3f8 <_dtoa_r+0x628>)
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f7f6 f864 	bl	80002bc <__adddf3>
 800a1f4:	46d0      	mov	r8, sl
 800a1f6:	46d9      	mov	r9, fp
 800a1f8:	4682      	mov	sl, r0
 800a1fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a1fe:	2e00      	cmp	r6, #0
 800a200:	d158      	bne.n	800a2b4 <_dtoa_r+0x4e4>
 800a202:	4b7e      	ldr	r3, [pc, #504]	; (800a3fc <_dtoa_r+0x62c>)
 800a204:	2200      	movs	r2, #0
 800a206:	4640      	mov	r0, r8
 800a208:	4649      	mov	r1, r9
 800a20a:	f7f6 f855 	bl	80002b8 <__aeabi_dsub>
 800a20e:	4652      	mov	r2, sl
 800a210:	465b      	mov	r3, fp
 800a212:	4680      	mov	r8, r0
 800a214:	4689      	mov	r9, r1
 800a216:	f7f6 fc97 	bl	8000b48 <__aeabi_dcmpgt>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	f040 8295 	bne.w	800a74a <_dtoa_r+0x97a>
 800a220:	4652      	mov	r2, sl
 800a222:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a226:	4640      	mov	r0, r8
 800a228:	4649      	mov	r1, r9
 800a22a:	f7f6 fc6f 	bl	8000b0c <__aeabi_dcmplt>
 800a22e:	2800      	cmp	r0, #0
 800a230:	f040 8289 	bne.w	800a746 <_dtoa_r+0x976>
 800a234:	ec5b ab19 	vmov	sl, fp, d9
 800a238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f2c0 8148 	blt.w	800a4d0 <_dtoa_r+0x700>
 800a240:	9a00      	ldr	r2, [sp, #0]
 800a242:	2a0e      	cmp	r2, #14
 800a244:	f300 8144 	bgt.w	800a4d0 <_dtoa_r+0x700>
 800a248:	4b67      	ldr	r3, [pc, #412]	; (800a3e8 <_dtoa_r+0x618>)
 800a24a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a24e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a254:	2b00      	cmp	r3, #0
 800a256:	f280 80d5 	bge.w	800a404 <_dtoa_r+0x634>
 800a25a:	9b03      	ldr	r3, [sp, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f300 80d1 	bgt.w	800a404 <_dtoa_r+0x634>
 800a262:	f040 826f 	bne.w	800a744 <_dtoa_r+0x974>
 800a266:	4b65      	ldr	r3, [pc, #404]	; (800a3fc <_dtoa_r+0x62c>)
 800a268:	2200      	movs	r2, #0
 800a26a:	4640      	mov	r0, r8
 800a26c:	4649      	mov	r1, r9
 800a26e:	f7f6 f9db 	bl	8000628 <__aeabi_dmul>
 800a272:	4652      	mov	r2, sl
 800a274:	465b      	mov	r3, fp
 800a276:	f7f6 fc5d 	bl	8000b34 <__aeabi_dcmpge>
 800a27a:	9e03      	ldr	r6, [sp, #12]
 800a27c:	4637      	mov	r7, r6
 800a27e:	2800      	cmp	r0, #0
 800a280:	f040 8245 	bne.w	800a70e <_dtoa_r+0x93e>
 800a284:	9d01      	ldr	r5, [sp, #4]
 800a286:	2331      	movs	r3, #49	; 0x31
 800a288:	f805 3b01 	strb.w	r3, [r5], #1
 800a28c:	9b00      	ldr	r3, [sp, #0]
 800a28e:	3301      	adds	r3, #1
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	e240      	b.n	800a716 <_dtoa_r+0x946>
 800a294:	07f2      	lsls	r2, r6, #31
 800a296:	d505      	bpl.n	800a2a4 <_dtoa_r+0x4d4>
 800a298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a29c:	f7f6 f9c4 	bl	8000628 <__aeabi_dmul>
 800a2a0:	3501      	adds	r5, #1
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	1076      	asrs	r6, r6, #1
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	e777      	b.n	800a19a <_dtoa_r+0x3ca>
 800a2aa:	2502      	movs	r5, #2
 800a2ac:	e779      	b.n	800a1a2 <_dtoa_r+0x3d2>
 800a2ae:	9f00      	ldr	r7, [sp, #0]
 800a2b0:	9e03      	ldr	r6, [sp, #12]
 800a2b2:	e794      	b.n	800a1de <_dtoa_r+0x40e>
 800a2b4:	9901      	ldr	r1, [sp, #4]
 800a2b6:	4b4c      	ldr	r3, [pc, #304]	; (800a3e8 <_dtoa_r+0x618>)
 800a2b8:	4431      	add	r1, r6
 800a2ba:	910d      	str	r1, [sp, #52]	; 0x34
 800a2bc:	9908      	ldr	r1, [sp, #32]
 800a2be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a2c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2c6:	2900      	cmp	r1, #0
 800a2c8:	d043      	beq.n	800a352 <_dtoa_r+0x582>
 800a2ca:	494d      	ldr	r1, [pc, #308]	; (800a400 <_dtoa_r+0x630>)
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	f7f6 fad5 	bl	800087c <__aeabi_ddiv>
 800a2d2:	4652      	mov	r2, sl
 800a2d4:	465b      	mov	r3, fp
 800a2d6:	f7f5 ffef 	bl	80002b8 <__aeabi_dsub>
 800a2da:	9d01      	ldr	r5, [sp, #4]
 800a2dc:	4682      	mov	sl, r0
 800a2de:	468b      	mov	fp, r1
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	f7f6 fc50 	bl	8000b88 <__aeabi_d2iz>
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	f7f6 f933 	bl	8000554 <__aeabi_i2d>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	f7f5 ffdf 	bl	80002b8 <__aeabi_dsub>
 800a2fa:	3630      	adds	r6, #48	; 0x30
 800a2fc:	f805 6b01 	strb.w	r6, [r5], #1
 800a300:	4652      	mov	r2, sl
 800a302:	465b      	mov	r3, fp
 800a304:	4680      	mov	r8, r0
 800a306:	4689      	mov	r9, r1
 800a308:	f7f6 fc00 	bl	8000b0c <__aeabi_dcmplt>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d163      	bne.n	800a3d8 <_dtoa_r+0x608>
 800a310:	4642      	mov	r2, r8
 800a312:	464b      	mov	r3, r9
 800a314:	4936      	ldr	r1, [pc, #216]	; (800a3f0 <_dtoa_r+0x620>)
 800a316:	2000      	movs	r0, #0
 800a318:	f7f5 ffce 	bl	80002b8 <__aeabi_dsub>
 800a31c:	4652      	mov	r2, sl
 800a31e:	465b      	mov	r3, fp
 800a320:	f7f6 fbf4 	bl	8000b0c <__aeabi_dcmplt>
 800a324:	2800      	cmp	r0, #0
 800a326:	f040 80b5 	bne.w	800a494 <_dtoa_r+0x6c4>
 800a32a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a32c:	429d      	cmp	r5, r3
 800a32e:	d081      	beq.n	800a234 <_dtoa_r+0x464>
 800a330:	4b30      	ldr	r3, [pc, #192]	; (800a3f4 <_dtoa_r+0x624>)
 800a332:	2200      	movs	r2, #0
 800a334:	4650      	mov	r0, sl
 800a336:	4659      	mov	r1, fp
 800a338:	f7f6 f976 	bl	8000628 <__aeabi_dmul>
 800a33c:	4b2d      	ldr	r3, [pc, #180]	; (800a3f4 <_dtoa_r+0x624>)
 800a33e:	4682      	mov	sl, r0
 800a340:	468b      	mov	fp, r1
 800a342:	4640      	mov	r0, r8
 800a344:	4649      	mov	r1, r9
 800a346:	2200      	movs	r2, #0
 800a348:	f7f6 f96e 	bl	8000628 <__aeabi_dmul>
 800a34c:	4680      	mov	r8, r0
 800a34e:	4689      	mov	r9, r1
 800a350:	e7c6      	b.n	800a2e0 <_dtoa_r+0x510>
 800a352:	4650      	mov	r0, sl
 800a354:	4659      	mov	r1, fp
 800a356:	f7f6 f967 	bl	8000628 <__aeabi_dmul>
 800a35a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a35c:	9d01      	ldr	r5, [sp, #4]
 800a35e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a360:	4682      	mov	sl, r0
 800a362:	468b      	mov	fp, r1
 800a364:	4649      	mov	r1, r9
 800a366:	4640      	mov	r0, r8
 800a368:	f7f6 fc0e 	bl	8000b88 <__aeabi_d2iz>
 800a36c:	4606      	mov	r6, r0
 800a36e:	f7f6 f8f1 	bl	8000554 <__aeabi_i2d>
 800a372:	3630      	adds	r6, #48	; 0x30
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	4640      	mov	r0, r8
 800a37a:	4649      	mov	r1, r9
 800a37c:	f7f5 ff9c 	bl	80002b8 <__aeabi_dsub>
 800a380:	f805 6b01 	strb.w	r6, [r5], #1
 800a384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a386:	429d      	cmp	r5, r3
 800a388:	4680      	mov	r8, r0
 800a38a:	4689      	mov	r9, r1
 800a38c:	f04f 0200 	mov.w	r2, #0
 800a390:	d124      	bne.n	800a3dc <_dtoa_r+0x60c>
 800a392:	4b1b      	ldr	r3, [pc, #108]	; (800a400 <_dtoa_r+0x630>)
 800a394:	4650      	mov	r0, sl
 800a396:	4659      	mov	r1, fp
 800a398:	f7f5 ff90 	bl	80002bc <__adddf3>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	4649      	mov	r1, r9
 800a3a4:	f7f6 fbd0 	bl	8000b48 <__aeabi_dcmpgt>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d173      	bne.n	800a494 <_dtoa_r+0x6c4>
 800a3ac:	4652      	mov	r2, sl
 800a3ae:	465b      	mov	r3, fp
 800a3b0:	4913      	ldr	r1, [pc, #76]	; (800a400 <_dtoa_r+0x630>)
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	f7f5 ff80 	bl	80002b8 <__aeabi_dsub>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4640      	mov	r0, r8
 800a3be:	4649      	mov	r1, r9
 800a3c0:	f7f6 fba4 	bl	8000b0c <__aeabi_dcmplt>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	f43f af35 	beq.w	800a234 <_dtoa_r+0x464>
 800a3ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a3cc:	1e6b      	subs	r3, r5, #1
 800a3ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3d4:	2b30      	cmp	r3, #48	; 0x30
 800a3d6:	d0f8      	beq.n	800a3ca <_dtoa_r+0x5fa>
 800a3d8:	9700      	str	r7, [sp, #0]
 800a3da:	e049      	b.n	800a470 <_dtoa_r+0x6a0>
 800a3dc:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <_dtoa_r+0x624>)
 800a3de:	f7f6 f923 	bl	8000628 <__aeabi_dmul>
 800a3e2:	4680      	mov	r8, r0
 800a3e4:	4689      	mov	r9, r1
 800a3e6:	e7bd      	b.n	800a364 <_dtoa_r+0x594>
 800a3e8:	08010270 	.word	0x08010270
 800a3ec:	08010248 	.word	0x08010248
 800a3f0:	3ff00000 	.word	0x3ff00000
 800a3f4:	40240000 	.word	0x40240000
 800a3f8:	401c0000 	.word	0x401c0000
 800a3fc:	40140000 	.word	0x40140000
 800a400:	3fe00000 	.word	0x3fe00000
 800a404:	9d01      	ldr	r5, [sp, #4]
 800a406:	4656      	mov	r6, sl
 800a408:	465f      	mov	r7, fp
 800a40a:	4642      	mov	r2, r8
 800a40c:	464b      	mov	r3, r9
 800a40e:	4630      	mov	r0, r6
 800a410:	4639      	mov	r1, r7
 800a412:	f7f6 fa33 	bl	800087c <__aeabi_ddiv>
 800a416:	f7f6 fbb7 	bl	8000b88 <__aeabi_d2iz>
 800a41a:	4682      	mov	sl, r0
 800a41c:	f7f6 f89a 	bl	8000554 <__aeabi_i2d>
 800a420:	4642      	mov	r2, r8
 800a422:	464b      	mov	r3, r9
 800a424:	f7f6 f900 	bl	8000628 <__aeabi_dmul>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4630      	mov	r0, r6
 800a42e:	4639      	mov	r1, r7
 800a430:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a434:	f7f5 ff40 	bl	80002b8 <__aeabi_dsub>
 800a438:	f805 6b01 	strb.w	r6, [r5], #1
 800a43c:	9e01      	ldr	r6, [sp, #4]
 800a43e:	9f03      	ldr	r7, [sp, #12]
 800a440:	1bae      	subs	r6, r5, r6
 800a442:	42b7      	cmp	r7, r6
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	d135      	bne.n	800a4b6 <_dtoa_r+0x6e6>
 800a44a:	f7f5 ff37 	bl	80002bc <__adddf3>
 800a44e:	4642      	mov	r2, r8
 800a450:	464b      	mov	r3, r9
 800a452:	4606      	mov	r6, r0
 800a454:	460f      	mov	r7, r1
 800a456:	f7f6 fb77 	bl	8000b48 <__aeabi_dcmpgt>
 800a45a:	b9d0      	cbnz	r0, 800a492 <_dtoa_r+0x6c2>
 800a45c:	4642      	mov	r2, r8
 800a45e:	464b      	mov	r3, r9
 800a460:	4630      	mov	r0, r6
 800a462:	4639      	mov	r1, r7
 800a464:	f7f6 fb48 	bl	8000af8 <__aeabi_dcmpeq>
 800a468:	b110      	cbz	r0, 800a470 <_dtoa_r+0x6a0>
 800a46a:	f01a 0f01 	tst.w	sl, #1
 800a46e:	d110      	bne.n	800a492 <_dtoa_r+0x6c2>
 800a470:	4620      	mov	r0, r4
 800a472:	ee18 1a10 	vmov	r1, s16
 800a476:	f000 fe87 	bl	800b188 <_Bfree>
 800a47a:	2300      	movs	r3, #0
 800a47c:	9800      	ldr	r0, [sp, #0]
 800a47e:	702b      	strb	r3, [r5, #0]
 800a480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a482:	3001      	adds	r0, #1
 800a484:	6018      	str	r0, [r3, #0]
 800a486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f43f acf1 	beq.w	8009e70 <_dtoa_r+0xa0>
 800a48e:	601d      	str	r5, [r3, #0]
 800a490:	e4ee      	b.n	8009e70 <_dtoa_r+0xa0>
 800a492:	9f00      	ldr	r7, [sp, #0]
 800a494:	462b      	mov	r3, r5
 800a496:	461d      	mov	r5, r3
 800a498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a49c:	2a39      	cmp	r2, #57	; 0x39
 800a49e:	d106      	bne.n	800a4ae <_dtoa_r+0x6de>
 800a4a0:	9a01      	ldr	r2, [sp, #4]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d1f7      	bne.n	800a496 <_dtoa_r+0x6c6>
 800a4a6:	9901      	ldr	r1, [sp, #4]
 800a4a8:	2230      	movs	r2, #48	; 0x30
 800a4aa:	3701      	adds	r7, #1
 800a4ac:	700a      	strb	r2, [r1, #0]
 800a4ae:	781a      	ldrb	r2, [r3, #0]
 800a4b0:	3201      	adds	r2, #1
 800a4b2:	701a      	strb	r2, [r3, #0]
 800a4b4:	e790      	b.n	800a3d8 <_dtoa_r+0x608>
 800a4b6:	4ba6      	ldr	r3, [pc, #664]	; (800a750 <_dtoa_r+0x980>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f7f6 f8b5 	bl	8000628 <__aeabi_dmul>
 800a4be:	2200      	movs	r2, #0
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	460f      	mov	r7, r1
 800a4c6:	f7f6 fb17 	bl	8000af8 <__aeabi_dcmpeq>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d09d      	beq.n	800a40a <_dtoa_r+0x63a>
 800a4ce:	e7cf      	b.n	800a470 <_dtoa_r+0x6a0>
 800a4d0:	9a08      	ldr	r2, [sp, #32]
 800a4d2:	2a00      	cmp	r2, #0
 800a4d4:	f000 80d7 	beq.w	800a686 <_dtoa_r+0x8b6>
 800a4d8:	9a06      	ldr	r2, [sp, #24]
 800a4da:	2a01      	cmp	r2, #1
 800a4dc:	f300 80ba 	bgt.w	800a654 <_dtoa_r+0x884>
 800a4e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4e2:	2a00      	cmp	r2, #0
 800a4e4:	f000 80b2 	beq.w	800a64c <_dtoa_r+0x87c>
 800a4e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a4ec:	9e07      	ldr	r6, [sp, #28]
 800a4ee:	9d04      	ldr	r5, [sp, #16]
 800a4f0:	9a04      	ldr	r2, [sp, #16]
 800a4f2:	441a      	add	r2, r3
 800a4f4:	9204      	str	r2, [sp, #16]
 800a4f6:	9a05      	ldr	r2, [sp, #20]
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	441a      	add	r2, r3
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	9205      	str	r2, [sp, #20]
 800a500:	f000 ff44 	bl	800b38c <__i2b>
 800a504:	4607      	mov	r7, r0
 800a506:	2d00      	cmp	r5, #0
 800a508:	dd0c      	ble.n	800a524 <_dtoa_r+0x754>
 800a50a:	9b05      	ldr	r3, [sp, #20]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	dd09      	ble.n	800a524 <_dtoa_r+0x754>
 800a510:	42ab      	cmp	r3, r5
 800a512:	9a04      	ldr	r2, [sp, #16]
 800a514:	bfa8      	it	ge
 800a516:	462b      	movge	r3, r5
 800a518:	1ad2      	subs	r2, r2, r3
 800a51a:	9204      	str	r2, [sp, #16]
 800a51c:	9a05      	ldr	r2, [sp, #20]
 800a51e:	1aed      	subs	r5, r5, r3
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	9305      	str	r3, [sp, #20]
 800a524:	9b07      	ldr	r3, [sp, #28]
 800a526:	b31b      	cbz	r3, 800a570 <_dtoa_r+0x7a0>
 800a528:	9b08      	ldr	r3, [sp, #32]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f000 80af 	beq.w	800a68e <_dtoa_r+0x8be>
 800a530:	2e00      	cmp	r6, #0
 800a532:	dd13      	ble.n	800a55c <_dtoa_r+0x78c>
 800a534:	4639      	mov	r1, r7
 800a536:	4632      	mov	r2, r6
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 ffe7 	bl	800b50c <__pow5mult>
 800a53e:	ee18 2a10 	vmov	r2, s16
 800a542:	4601      	mov	r1, r0
 800a544:	4607      	mov	r7, r0
 800a546:	4620      	mov	r0, r4
 800a548:	f000 ff36 	bl	800b3b8 <__multiply>
 800a54c:	ee18 1a10 	vmov	r1, s16
 800a550:	4680      	mov	r8, r0
 800a552:	4620      	mov	r0, r4
 800a554:	f000 fe18 	bl	800b188 <_Bfree>
 800a558:	ee08 8a10 	vmov	s16, r8
 800a55c:	9b07      	ldr	r3, [sp, #28]
 800a55e:	1b9a      	subs	r2, r3, r6
 800a560:	d006      	beq.n	800a570 <_dtoa_r+0x7a0>
 800a562:	ee18 1a10 	vmov	r1, s16
 800a566:	4620      	mov	r0, r4
 800a568:	f000 ffd0 	bl	800b50c <__pow5mult>
 800a56c:	ee08 0a10 	vmov	s16, r0
 800a570:	2101      	movs	r1, #1
 800a572:	4620      	mov	r0, r4
 800a574:	f000 ff0a 	bl	800b38c <__i2b>
 800a578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	4606      	mov	r6, r0
 800a57e:	f340 8088 	ble.w	800a692 <_dtoa_r+0x8c2>
 800a582:	461a      	mov	r2, r3
 800a584:	4601      	mov	r1, r0
 800a586:	4620      	mov	r0, r4
 800a588:	f000 ffc0 	bl	800b50c <__pow5mult>
 800a58c:	9b06      	ldr	r3, [sp, #24]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	4606      	mov	r6, r0
 800a592:	f340 8081 	ble.w	800a698 <_dtoa_r+0x8c8>
 800a596:	f04f 0800 	mov.w	r8, #0
 800a59a:	6933      	ldr	r3, [r6, #16]
 800a59c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a5a0:	6918      	ldr	r0, [r3, #16]
 800a5a2:	f000 fea3 	bl	800b2ec <__hi0bits>
 800a5a6:	f1c0 0020 	rsb	r0, r0, #32
 800a5aa:	9b05      	ldr	r3, [sp, #20]
 800a5ac:	4418      	add	r0, r3
 800a5ae:	f010 001f 	ands.w	r0, r0, #31
 800a5b2:	f000 8092 	beq.w	800a6da <_dtoa_r+0x90a>
 800a5b6:	f1c0 0320 	rsb	r3, r0, #32
 800a5ba:	2b04      	cmp	r3, #4
 800a5bc:	f340 808a 	ble.w	800a6d4 <_dtoa_r+0x904>
 800a5c0:	f1c0 001c 	rsb	r0, r0, #28
 800a5c4:	9b04      	ldr	r3, [sp, #16]
 800a5c6:	4403      	add	r3, r0
 800a5c8:	9304      	str	r3, [sp, #16]
 800a5ca:	9b05      	ldr	r3, [sp, #20]
 800a5cc:	4403      	add	r3, r0
 800a5ce:	4405      	add	r5, r0
 800a5d0:	9305      	str	r3, [sp, #20]
 800a5d2:	9b04      	ldr	r3, [sp, #16]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	dd07      	ble.n	800a5e8 <_dtoa_r+0x818>
 800a5d8:	ee18 1a10 	vmov	r1, s16
 800a5dc:	461a      	mov	r2, r3
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f000 ffee 	bl	800b5c0 <__lshift>
 800a5e4:	ee08 0a10 	vmov	s16, r0
 800a5e8:	9b05      	ldr	r3, [sp, #20]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	dd05      	ble.n	800a5fa <_dtoa_r+0x82a>
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f000 ffe4 	bl	800b5c0 <__lshift>
 800a5f8:	4606      	mov	r6, r0
 800a5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d06e      	beq.n	800a6de <_dtoa_r+0x90e>
 800a600:	ee18 0a10 	vmov	r0, s16
 800a604:	4631      	mov	r1, r6
 800a606:	f001 f84b 	bl	800b6a0 <__mcmp>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	da67      	bge.n	800a6de <_dtoa_r+0x90e>
 800a60e:	9b00      	ldr	r3, [sp, #0]
 800a610:	3b01      	subs	r3, #1
 800a612:	ee18 1a10 	vmov	r1, s16
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	220a      	movs	r2, #10
 800a61a:	2300      	movs	r3, #0
 800a61c:	4620      	mov	r0, r4
 800a61e:	f000 fdd5 	bl	800b1cc <__multadd>
 800a622:	9b08      	ldr	r3, [sp, #32]
 800a624:	ee08 0a10 	vmov	s16, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 81b1 	beq.w	800a990 <_dtoa_r+0xbc0>
 800a62e:	2300      	movs	r3, #0
 800a630:	4639      	mov	r1, r7
 800a632:	220a      	movs	r2, #10
 800a634:	4620      	mov	r0, r4
 800a636:	f000 fdc9 	bl	800b1cc <__multadd>
 800a63a:	9b02      	ldr	r3, [sp, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	4607      	mov	r7, r0
 800a640:	f300 808e 	bgt.w	800a760 <_dtoa_r+0x990>
 800a644:	9b06      	ldr	r3, [sp, #24]
 800a646:	2b02      	cmp	r3, #2
 800a648:	dc51      	bgt.n	800a6ee <_dtoa_r+0x91e>
 800a64a:	e089      	b.n	800a760 <_dtoa_r+0x990>
 800a64c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a64e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a652:	e74b      	b.n	800a4ec <_dtoa_r+0x71c>
 800a654:	9b03      	ldr	r3, [sp, #12]
 800a656:	1e5e      	subs	r6, r3, #1
 800a658:	9b07      	ldr	r3, [sp, #28]
 800a65a:	42b3      	cmp	r3, r6
 800a65c:	bfbf      	itttt	lt
 800a65e:	9b07      	ldrlt	r3, [sp, #28]
 800a660:	9607      	strlt	r6, [sp, #28]
 800a662:	1af2      	sublt	r2, r6, r3
 800a664:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a666:	bfb6      	itet	lt
 800a668:	189b      	addlt	r3, r3, r2
 800a66a:	1b9e      	subge	r6, r3, r6
 800a66c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a66e:	9b03      	ldr	r3, [sp, #12]
 800a670:	bfb8      	it	lt
 800a672:	2600      	movlt	r6, #0
 800a674:	2b00      	cmp	r3, #0
 800a676:	bfb7      	itett	lt
 800a678:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a67c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a680:	1a9d      	sublt	r5, r3, r2
 800a682:	2300      	movlt	r3, #0
 800a684:	e734      	b.n	800a4f0 <_dtoa_r+0x720>
 800a686:	9e07      	ldr	r6, [sp, #28]
 800a688:	9d04      	ldr	r5, [sp, #16]
 800a68a:	9f08      	ldr	r7, [sp, #32]
 800a68c:	e73b      	b.n	800a506 <_dtoa_r+0x736>
 800a68e:	9a07      	ldr	r2, [sp, #28]
 800a690:	e767      	b.n	800a562 <_dtoa_r+0x792>
 800a692:	9b06      	ldr	r3, [sp, #24]
 800a694:	2b01      	cmp	r3, #1
 800a696:	dc18      	bgt.n	800a6ca <_dtoa_r+0x8fa>
 800a698:	f1ba 0f00 	cmp.w	sl, #0
 800a69c:	d115      	bne.n	800a6ca <_dtoa_r+0x8fa>
 800a69e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6a2:	b993      	cbnz	r3, 800a6ca <_dtoa_r+0x8fa>
 800a6a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a6a8:	0d1b      	lsrs	r3, r3, #20
 800a6aa:	051b      	lsls	r3, r3, #20
 800a6ac:	b183      	cbz	r3, 800a6d0 <_dtoa_r+0x900>
 800a6ae:	9b04      	ldr	r3, [sp, #16]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	9304      	str	r3, [sp, #16]
 800a6b4:	9b05      	ldr	r3, [sp, #20]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	9305      	str	r3, [sp, #20]
 800a6ba:	f04f 0801 	mov.w	r8, #1
 800a6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f47f af6a 	bne.w	800a59a <_dtoa_r+0x7ca>
 800a6c6:	2001      	movs	r0, #1
 800a6c8:	e76f      	b.n	800a5aa <_dtoa_r+0x7da>
 800a6ca:	f04f 0800 	mov.w	r8, #0
 800a6ce:	e7f6      	b.n	800a6be <_dtoa_r+0x8ee>
 800a6d0:	4698      	mov	r8, r3
 800a6d2:	e7f4      	b.n	800a6be <_dtoa_r+0x8ee>
 800a6d4:	f43f af7d 	beq.w	800a5d2 <_dtoa_r+0x802>
 800a6d8:	4618      	mov	r0, r3
 800a6da:	301c      	adds	r0, #28
 800a6dc:	e772      	b.n	800a5c4 <_dtoa_r+0x7f4>
 800a6de:	9b03      	ldr	r3, [sp, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	dc37      	bgt.n	800a754 <_dtoa_r+0x984>
 800a6e4:	9b06      	ldr	r3, [sp, #24]
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	dd34      	ble.n	800a754 <_dtoa_r+0x984>
 800a6ea:	9b03      	ldr	r3, [sp, #12]
 800a6ec:	9302      	str	r3, [sp, #8]
 800a6ee:	9b02      	ldr	r3, [sp, #8]
 800a6f0:	b96b      	cbnz	r3, 800a70e <_dtoa_r+0x93e>
 800a6f2:	4631      	mov	r1, r6
 800a6f4:	2205      	movs	r2, #5
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f000 fd68 	bl	800b1cc <__multadd>
 800a6fc:	4601      	mov	r1, r0
 800a6fe:	4606      	mov	r6, r0
 800a700:	ee18 0a10 	vmov	r0, s16
 800a704:	f000 ffcc 	bl	800b6a0 <__mcmp>
 800a708:	2800      	cmp	r0, #0
 800a70a:	f73f adbb 	bgt.w	800a284 <_dtoa_r+0x4b4>
 800a70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a710:	9d01      	ldr	r5, [sp, #4]
 800a712:	43db      	mvns	r3, r3
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	f04f 0800 	mov.w	r8, #0
 800a71a:	4631      	mov	r1, r6
 800a71c:	4620      	mov	r0, r4
 800a71e:	f000 fd33 	bl	800b188 <_Bfree>
 800a722:	2f00      	cmp	r7, #0
 800a724:	f43f aea4 	beq.w	800a470 <_dtoa_r+0x6a0>
 800a728:	f1b8 0f00 	cmp.w	r8, #0
 800a72c:	d005      	beq.n	800a73a <_dtoa_r+0x96a>
 800a72e:	45b8      	cmp	r8, r7
 800a730:	d003      	beq.n	800a73a <_dtoa_r+0x96a>
 800a732:	4641      	mov	r1, r8
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fd27 	bl	800b188 <_Bfree>
 800a73a:	4639      	mov	r1, r7
 800a73c:	4620      	mov	r0, r4
 800a73e:	f000 fd23 	bl	800b188 <_Bfree>
 800a742:	e695      	b.n	800a470 <_dtoa_r+0x6a0>
 800a744:	2600      	movs	r6, #0
 800a746:	4637      	mov	r7, r6
 800a748:	e7e1      	b.n	800a70e <_dtoa_r+0x93e>
 800a74a:	9700      	str	r7, [sp, #0]
 800a74c:	4637      	mov	r7, r6
 800a74e:	e599      	b.n	800a284 <_dtoa_r+0x4b4>
 800a750:	40240000 	.word	0x40240000
 800a754:	9b08      	ldr	r3, [sp, #32]
 800a756:	2b00      	cmp	r3, #0
 800a758:	f000 80ca 	beq.w	800a8f0 <_dtoa_r+0xb20>
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	9302      	str	r3, [sp, #8]
 800a760:	2d00      	cmp	r5, #0
 800a762:	dd05      	ble.n	800a770 <_dtoa_r+0x9a0>
 800a764:	4639      	mov	r1, r7
 800a766:	462a      	mov	r2, r5
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 ff29 	bl	800b5c0 <__lshift>
 800a76e:	4607      	mov	r7, r0
 800a770:	f1b8 0f00 	cmp.w	r8, #0
 800a774:	d05b      	beq.n	800a82e <_dtoa_r+0xa5e>
 800a776:	6879      	ldr	r1, [r7, #4]
 800a778:	4620      	mov	r0, r4
 800a77a:	f000 fcc5 	bl	800b108 <_Balloc>
 800a77e:	4605      	mov	r5, r0
 800a780:	b928      	cbnz	r0, 800a78e <_dtoa_r+0x9be>
 800a782:	4b87      	ldr	r3, [pc, #540]	; (800a9a0 <_dtoa_r+0xbd0>)
 800a784:	4602      	mov	r2, r0
 800a786:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a78a:	f7ff bb3b 	b.w	8009e04 <_dtoa_r+0x34>
 800a78e:	693a      	ldr	r2, [r7, #16]
 800a790:	3202      	adds	r2, #2
 800a792:	0092      	lsls	r2, r2, #2
 800a794:	f107 010c 	add.w	r1, r7, #12
 800a798:	300c      	adds	r0, #12
 800a79a:	f000 fca7 	bl	800b0ec <memcpy>
 800a79e:	2201      	movs	r2, #1
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f000 ff0c 	bl	800b5c0 <__lshift>
 800a7a8:	9b01      	ldr	r3, [sp, #4]
 800a7aa:	f103 0901 	add.w	r9, r3, #1
 800a7ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	9305      	str	r3, [sp, #20]
 800a7b6:	f00a 0301 	and.w	r3, sl, #1
 800a7ba:	46b8      	mov	r8, r7
 800a7bc:	9304      	str	r3, [sp, #16]
 800a7be:	4607      	mov	r7, r0
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	ee18 0a10 	vmov	r0, s16
 800a7c6:	f7ff fa77 	bl	8009cb8 <quorem>
 800a7ca:	4641      	mov	r1, r8
 800a7cc:	9002      	str	r0, [sp, #8]
 800a7ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a7d2:	ee18 0a10 	vmov	r0, s16
 800a7d6:	f000 ff63 	bl	800b6a0 <__mcmp>
 800a7da:	463a      	mov	r2, r7
 800a7dc:	9003      	str	r0, [sp, #12]
 800a7de:	4631      	mov	r1, r6
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f000 ff79 	bl	800b6d8 <__mdiff>
 800a7e6:	68c2      	ldr	r2, [r0, #12]
 800a7e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a7ec:	4605      	mov	r5, r0
 800a7ee:	bb02      	cbnz	r2, 800a832 <_dtoa_r+0xa62>
 800a7f0:	4601      	mov	r1, r0
 800a7f2:	ee18 0a10 	vmov	r0, s16
 800a7f6:	f000 ff53 	bl	800b6a0 <__mcmp>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	4620      	mov	r0, r4
 800a800:	9207      	str	r2, [sp, #28]
 800a802:	f000 fcc1 	bl	800b188 <_Bfree>
 800a806:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a80a:	ea43 0102 	orr.w	r1, r3, r2
 800a80e:	9b04      	ldr	r3, [sp, #16]
 800a810:	430b      	orrs	r3, r1
 800a812:	464d      	mov	r5, r9
 800a814:	d10f      	bne.n	800a836 <_dtoa_r+0xa66>
 800a816:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a81a:	d02a      	beq.n	800a872 <_dtoa_r+0xaa2>
 800a81c:	9b03      	ldr	r3, [sp, #12]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	dd02      	ble.n	800a828 <_dtoa_r+0xa58>
 800a822:	9b02      	ldr	r3, [sp, #8]
 800a824:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a828:	f88b a000 	strb.w	sl, [fp]
 800a82c:	e775      	b.n	800a71a <_dtoa_r+0x94a>
 800a82e:	4638      	mov	r0, r7
 800a830:	e7ba      	b.n	800a7a8 <_dtoa_r+0x9d8>
 800a832:	2201      	movs	r2, #1
 800a834:	e7e2      	b.n	800a7fc <_dtoa_r+0xa2c>
 800a836:	9b03      	ldr	r3, [sp, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	db04      	blt.n	800a846 <_dtoa_r+0xa76>
 800a83c:	9906      	ldr	r1, [sp, #24]
 800a83e:	430b      	orrs	r3, r1
 800a840:	9904      	ldr	r1, [sp, #16]
 800a842:	430b      	orrs	r3, r1
 800a844:	d122      	bne.n	800a88c <_dtoa_r+0xabc>
 800a846:	2a00      	cmp	r2, #0
 800a848:	ddee      	ble.n	800a828 <_dtoa_r+0xa58>
 800a84a:	ee18 1a10 	vmov	r1, s16
 800a84e:	2201      	movs	r2, #1
 800a850:	4620      	mov	r0, r4
 800a852:	f000 feb5 	bl	800b5c0 <__lshift>
 800a856:	4631      	mov	r1, r6
 800a858:	ee08 0a10 	vmov	s16, r0
 800a85c:	f000 ff20 	bl	800b6a0 <__mcmp>
 800a860:	2800      	cmp	r0, #0
 800a862:	dc03      	bgt.n	800a86c <_dtoa_r+0xa9c>
 800a864:	d1e0      	bne.n	800a828 <_dtoa_r+0xa58>
 800a866:	f01a 0f01 	tst.w	sl, #1
 800a86a:	d0dd      	beq.n	800a828 <_dtoa_r+0xa58>
 800a86c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a870:	d1d7      	bne.n	800a822 <_dtoa_r+0xa52>
 800a872:	2339      	movs	r3, #57	; 0x39
 800a874:	f88b 3000 	strb.w	r3, [fp]
 800a878:	462b      	mov	r3, r5
 800a87a:	461d      	mov	r5, r3
 800a87c:	3b01      	subs	r3, #1
 800a87e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a882:	2a39      	cmp	r2, #57	; 0x39
 800a884:	d071      	beq.n	800a96a <_dtoa_r+0xb9a>
 800a886:	3201      	adds	r2, #1
 800a888:	701a      	strb	r2, [r3, #0]
 800a88a:	e746      	b.n	800a71a <_dtoa_r+0x94a>
 800a88c:	2a00      	cmp	r2, #0
 800a88e:	dd07      	ble.n	800a8a0 <_dtoa_r+0xad0>
 800a890:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a894:	d0ed      	beq.n	800a872 <_dtoa_r+0xaa2>
 800a896:	f10a 0301 	add.w	r3, sl, #1
 800a89a:	f88b 3000 	strb.w	r3, [fp]
 800a89e:	e73c      	b.n	800a71a <_dtoa_r+0x94a>
 800a8a0:	9b05      	ldr	r3, [sp, #20]
 800a8a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a8a6:	4599      	cmp	r9, r3
 800a8a8:	d047      	beq.n	800a93a <_dtoa_r+0xb6a>
 800a8aa:	ee18 1a10 	vmov	r1, s16
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	220a      	movs	r2, #10
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 fc8a 	bl	800b1cc <__multadd>
 800a8b8:	45b8      	cmp	r8, r7
 800a8ba:	ee08 0a10 	vmov	s16, r0
 800a8be:	f04f 0300 	mov.w	r3, #0
 800a8c2:	f04f 020a 	mov.w	r2, #10
 800a8c6:	4641      	mov	r1, r8
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	d106      	bne.n	800a8da <_dtoa_r+0xb0a>
 800a8cc:	f000 fc7e 	bl	800b1cc <__multadd>
 800a8d0:	4680      	mov	r8, r0
 800a8d2:	4607      	mov	r7, r0
 800a8d4:	f109 0901 	add.w	r9, r9, #1
 800a8d8:	e772      	b.n	800a7c0 <_dtoa_r+0x9f0>
 800a8da:	f000 fc77 	bl	800b1cc <__multadd>
 800a8de:	4639      	mov	r1, r7
 800a8e0:	4680      	mov	r8, r0
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	220a      	movs	r2, #10
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f000 fc70 	bl	800b1cc <__multadd>
 800a8ec:	4607      	mov	r7, r0
 800a8ee:	e7f1      	b.n	800a8d4 <_dtoa_r+0xb04>
 800a8f0:	9b03      	ldr	r3, [sp, #12]
 800a8f2:	9302      	str	r3, [sp, #8]
 800a8f4:	9d01      	ldr	r5, [sp, #4]
 800a8f6:	ee18 0a10 	vmov	r0, s16
 800a8fa:	4631      	mov	r1, r6
 800a8fc:	f7ff f9dc 	bl	8009cb8 <quorem>
 800a900:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a904:	9b01      	ldr	r3, [sp, #4]
 800a906:	f805 ab01 	strb.w	sl, [r5], #1
 800a90a:	1aea      	subs	r2, r5, r3
 800a90c:	9b02      	ldr	r3, [sp, #8]
 800a90e:	4293      	cmp	r3, r2
 800a910:	dd09      	ble.n	800a926 <_dtoa_r+0xb56>
 800a912:	ee18 1a10 	vmov	r1, s16
 800a916:	2300      	movs	r3, #0
 800a918:	220a      	movs	r2, #10
 800a91a:	4620      	mov	r0, r4
 800a91c:	f000 fc56 	bl	800b1cc <__multadd>
 800a920:	ee08 0a10 	vmov	s16, r0
 800a924:	e7e7      	b.n	800a8f6 <_dtoa_r+0xb26>
 800a926:	9b02      	ldr	r3, [sp, #8]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	bfc8      	it	gt
 800a92c:	461d      	movgt	r5, r3
 800a92e:	9b01      	ldr	r3, [sp, #4]
 800a930:	bfd8      	it	le
 800a932:	2501      	movle	r5, #1
 800a934:	441d      	add	r5, r3
 800a936:	f04f 0800 	mov.w	r8, #0
 800a93a:	ee18 1a10 	vmov	r1, s16
 800a93e:	2201      	movs	r2, #1
 800a940:	4620      	mov	r0, r4
 800a942:	f000 fe3d 	bl	800b5c0 <__lshift>
 800a946:	4631      	mov	r1, r6
 800a948:	ee08 0a10 	vmov	s16, r0
 800a94c:	f000 fea8 	bl	800b6a0 <__mcmp>
 800a950:	2800      	cmp	r0, #0
 800a952:	dc91      	bgt.n	800a878 <_dtoa_r+0xaa8>
 800a954:	d102      	bne.n	800a95c <_dtoa_r+0xb8c>
 800a956:	f01a 0f01 	tst.w	sl, #1
 800a95a:	d18d      	bne.n	800a878 <_dtoa_r+0xaa8>
 800a95c:	462b      	mov	r3, r5
 800a95e:	461d      	mov	r5, r3
 800a960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a964:	2a30      	cmp	r2, #48	; 0x30
 800a966:	d0fa      	beq.n	800a95e <_dtoa_r+0xb8e>
 800a968:	e6d7      	b.n	800a71a <_dtoa_r+0x94a>
 800a96a:	9a01      	ldr	r2, [sp, #4]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d184      	bne.n	800a87a <_dtoa_r+0xaaa>
 800a970:	9b00      	ldr	r3, [sp, #0]
 800a972:	3301      	adds	r3, #1
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	2331      	movs	r3, #49	; 0x31
 800a978:	7013      	strb	r3, [r2, #0]
 800a97a:	e6ce      	b.n	800a71a <_dtoa_r+0x94a>
 800a97c:	4b09      	ldr	r3, [pc, #36]	; (800a9a4 <_dtoa_r+0xbd4>)
 800a97e:	f7ff ba95 	b.w	8009eac <_dtoa_r+0xdc>
 800a982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a984:	2b00      	cmp	r3, #0
 800a986:	f47f aa6e 	bne.w	8009e66 <_dtoa_r+0x96>
 800a98a:	4b07      	ldr	r3, [pc, #28]	; (800a9a8 <_dtoa_r+0xbd8>)
 800a98c:	f7ff ba8e 	b.w	8009eac <_dtoa_r+0xdc>
 800a990:	9b02      	ldr	r3, [sp, #8]
 800a992:	2b00      	cmp	r3, #0
 800a994:	dcae      	bgt.n	800a8f4 <_dtoa_r+0xb24>
 800a996:	9b06      	ldr	r3, [sp, #24]
 800a998:	2b02      	cmp	r3, #2
 800a99a:	f73f aea8 	bgt.w	800a6ee <_dtoa_r+0x91e>
 800a99e:	e7a9      	b.n	800a8f4 <_dtoa_r+0xb24>
 800a9a0:	08010160 	.word	0x08010160
 800a9a4:	08010359 	.word	0x08010359
 800a9a8:	080100e1 	.word	0x080100e1

0800a9ac <rshift>:
 800a9ac:	6903      	ldr	r3, [r0, #16]
 800a9ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9ba:	f100 0414 	add.w	r4, r0, #20
 800a9be:	dd45      	ble.n	800aa4c <rshift+0xa0>
 800a9c0:	f011 011f 	ands.w	r1, r1, #31
 800a9c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9cc:	d10c      	bne.n	800a9e8 <rshift+0x3c>
 800a9ce:	f100 0710 	add.w	r7, r0, #16
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	42b1      	cmp	r1, r6
 800a9d6:	d334      	bcc.n	800aa42 <rshift+0x96>
 800a9d8:	1a9b      	subs	r3, r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	1eea      	subs	r2, r5, #3
 800a9de:	4296      	cmp	r6, r2
 800a9e0:	bf38      	it	cc
 800a9e2:	2300      	movcc	r3, #0
 800a9e4:	4423      	add	r3, r4
 800a9e6:	e015      	b.n	800aa14 <rshift+0x68>
 800a9e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9ec:	f1c1 0820 	rsb	r8, r1, #32
 800a9f0:	40cf      	lsrs	r7, r1
 800a9f2:	f105 0e04 	add.w	lr, r5, #4
 800a9f6:	46a1      	mov	r9, r4
 800a9f8:	4576      	cmp	r6, lr
 800a9fa:	46f4      	mov	ip, lr
 800a9fc:	d815      	bhi.n	800aa2a <rshift+0x7e>
 800a9fe:	1a9a      	subs	r2, r3, r2
 800aa00:	0092      	lsls	r2, r2, #2
 800aa02:	3a04      	subs	r2, #4
 800aa04:	3501      	adds	r5, #1
 800aa06:	42ae      	cmp	r6, r5
 800aa08:	bf38      	it	cc
 800aa0a:	2200      	movcc	r2, #0
 800aa0c:	18a3      	adds	r3, r4, r2
 800aa0e:	50a7      	str	r7, [r4, r2]
 800aa10:	b107      	cbz	r7, 800aa14 <rshift+0x68>
 800aa12:	3304      	adds	r3, #4
 800aa14:	1b1a      	subs	r2, r3, r4
 800aa16:	42a3      	cmp	r3, r4
 800aa18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa1c:	bf08      	it	eq
 800aa1e:	2300      	moveq	r3, #0
 800aa20:	6102      	str	r2, [r0, #16]
 800aa22:	bf08      	it	eq
 800aa24:	6143      	streq	r3, [r0, #20]
 800aa26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa2a:	f8dc c000 	ldr.w	ip, [ip]
 800aa2e:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa32:	ea4c 0707 	orr.w	r7, ip, r7
 800aa36:	f849 7b04 	str.w	r7, [r9], #4
 800aa3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa3e:	40cf      	lsrs	r7, r1
 800aa40:	e7da      	b.n	800a9f8 <rshift+0x4c>
 800aa42:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa46:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa4a:	e7c3      	b.n	800a9d4 <rshift+0x28>
 800aa4c:	4623      	mov	r3, r4
 800aa4e:	e7e1      	b.n	800aa14 <rshift+0x68>

0800aa50 <__hexdig_fun>:
 800aa50:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aa54:	2b09      	cmp	r3, #9
 800aa56:	d802      	bhi.n	800aa5e <__hexdig_fun+0xe>
 800aa58:	3820      	subs	r0, #32
 800aa5a:	b2c0      	uxtb	r0, r0
 800aa5c:	4770      	bx	lr
 800aa5e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aa62:	2b05      	cmp	r3, #5
 800aa64:	d801      	bhi.n	800aa6a <__hexdig_fun+0x1a>
 800aa66:	3847      	subs	r0, #71	; 0x47
 800aa68:	e7f7      	b.n	800aa5a <__hexdig_fun+0xa>
 800aa6a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aa6e:	2b05      	cmp	r3, #5
 800aa70:	d801      	bhi.n	800aa76 <__hexdig_fun+0x26>
 800aa72:	3827      	subs	r0, #39	; 0x27
 800aa74:	e7f1      	b.n	800aa5a <__hexdig_fun+0xa>
 800aa76:	2000      	movs	r0, #0
 800aa78:	4770      	bx	lr
	...

0800aa7c <__gethex>:
 800aa7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa80:	ed2d 8b02 	vpush	{d8}
 800aa84:	b089      	sub	sp, #36	; 0x24
 800aa86:	ee08 0a10 	vmov	s16, r0
 800aa8a:	9304      	str	r3, [sp, #16]
 800aa8c:	4bb4      	ldr	r3, [pc, #720]	; (800ad60 <__gethex+0x2e4>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	9301      	str	r3, [sp, #4]
 800aa92:	4618      	mov	r0, r3
 800aa94:	468b      	mov	fp, r1
 800aa96:	4690      	mov	r8, r2
 800aa98:	f7f5 fbac 	bl	80001f4 <strlen>
 800aa9c:	9b01      	ldr	r3, [sp, #4]
 800aa9e:	f8db 2000 	ldr.w	r2, [fp]
 800aaa2:	4403      	add	r3, r0
 800aaa4:	4682      	mov	sl, r0
 800aaa6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aaaa:	9305      	str	r3, [sp, #20]
 800aaac:	1c93      	adds	r3, r2, #2
 800aaae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aab2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aab6:	32fe      	adds	r2, #254	; 0xfe
 800aab8:	18d1      	adds	r1, r2, r3
 800aaba:	461f      	mov	r7, r3
 800aabc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aac0:	9100      	str	r1, [sp, #0]
 800aac2:	2830      	cmp	r0, #48	; 0x30
 800aac4:	d0f8      	beq.n	800aab8 <__gethex+0x3c>
 800aac6:	f7ff ffc3 	bl	800aa50 <__hexdig_fun>
 800aaca:	4604      	mov	r4, r0
 800aacc:	2800      	cmp	r0, #0
 800aace:	d13a      	bne.n	800ab46 <__gethex+0xca>
 800aad0:	9901      	ldr	r1, [sp, #4]
 800aad2:	4652      	mov	r2, sl
 800aad4:	4638      	mov	r0, r7
 800aad6:	f001 fdb3 	bl	800c640 <strncmp>
 800aada:	4605      	mov	r5, r0
 800aadc:	2800      	cmp	r0, #0
 800aade:	d168      	bne.n	800abb2 <__gethex+0x136>
 800aae0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800aae4:	eb07 060a 	add.w	r6, r7, sl
 800aae8:	f7ff ffb2 	bl	800aa50 <__hexdig_fun>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d062      	beq.n	800abb6 <__gethex+0x13a>
 800aaf0:	4633      	mov	r3, r6
 800aaf2:	7818      	ldrb	r0, [r3, #0]
 800aaf4:	2830      	cmp	r0, #48	; 0x30
 800aaf6:	461f      	mov	r7, r3
 800aaf8:	f103 0301 	add.w	r3, r3, #1
 800aafc:	d0f9      	beq.n	800aaf2 <__gethex+0x76>
 800aafe:	f7ff ffa7 	bl	800aa50 <__hexdig_fun>
 800ab02:	2301      	movs	r3, #1
 800ab04:	fab0 f480 	clz	r4, r0
 800ab08:	0964      	lsrs	r4, r4, #5
 800ab0a:	4635      	mov	r5, r6
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	463a      	mov	r2, r7
 800ab10:	4616      	mov	r6, r2
 800ab12:	3201      	adds	r2, #1
 800ab14:	7830      	ldrb	r0, [r6, #0]
 800ab16:	f7ff ff9b 	bl	800aa50 <__hexdig_fun>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d1f8      	bne.n	800ab10 <__gethex+0x94>
 800ab1e:	9901      	ldr	r1, [sp, #4]
 800ab20:	4652      	mov	r2, sl
 800ab22:	4630      	mov	r0, r6
 800ab24:	f001 fd8c 	bl	800c640 <strncmp>
 800ab28:	b980      	cbnz	r0, 800ab4c <__gethex+0xd0>
 800ab2a:	b94d      	cbnz	r5, 800ab40 <__gethex+0xc4>
 800ab2c:	eb06 050a 	add.w	r5, r6, sl
 800ab30:	462a      	mov	r2, r5
 800ab32:	4616      	mov	r6, r2
 800ab34:	3201      	adds	r2, #1
 800ab36:	7830      	ldrb	r0, [r6, #0]
 800ab38:	f7ff ff8a 	bl	800aa50 <__hexdig_fun>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d1f8      	bne.n	800ab32 <__gethex+0xb6>
 800ab40:	1bad      	subs	r5, r5, r6
 800ab42:	00ad      	lsls	r5, r5, #2
 800ab44:	e004      	b.n	800ab50 <__gethex+0xd4>
 800ab46:	2400      	movs	r4, #0
 800ab48:	4625      	mov	r5, r4
 800ab4a:	e7e0      	b.n	800ab0e <__gethex+0x92>
 800ab4c:	2d00      	cmp	r5, #0
 800ab4e:	d1f7      	bne.n	800ab40 <__gethex+0xc4>
 800ab50:	7833      	ldrb	r3, [r6, #0]
 800ab52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab56:	2b50      	cmp	r3, #80	; 0x50
 800ab58:	d13b      	bne.n	800abd2 <__gethex+0x156>
 800ab5a:	7873      	ldrb	r3, [r6, #1]
 800ab5c:	2b2b      	cmp	r3, #43	; 0x2b
 800ab5e:	d02c      	beq.n	800abba <__gethex+0x13e>
 800ab60:	2b2d      	cmp	r3, #45	; 0x2d
 800ab62:	d02e      	beq.n	800abc2 <__gethex+0x146>
 800ab64:	1c71      	adds	r1, r6, #1
 800ab66:	f04f 0900 	mov.w	r9, #0
 800ab6a:	7808      	ldrb	r0, [r1, #0]
 800ab6c:	f7ff ff70 	bl	800aa50 <__hexdig_fun>
 800ab70:	1e43      	subs	r3, r0, #1
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b18      	cmp	r3, #24
 800ab76:	d82c      	bhi.n	800abd2 <__gethex+0x156>
 800ab78:	f1a0 0210 	sub.w	r2, r0, #16
 800ab7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab80:	f7ff ff66 	bl	800aa50 <__hexdig_fun>
 800ab84:	1e43      	subs	r3, r0, #1
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	2b18      	cmp	r3, #24
 800ab8a:	d91d      	bls.n	800abc8 <__gethex+0x14c>
 800ab8c:	f1b9 0f00 	cmp.w	r9, #0
 800ab90:	d000      	beq.n	800ab94 <__gethex+0x118>
 800ab92:	4252      	negs	r2, r2
 800ab94:	4415      	add	r5, r2
 800ab96:	f8cb 1000 	str.w	r1, [fp]
 800ab9a:	b1e4      	cbz	r4, 800abd6 <__gethex+0x15a>
 800ab9c:	9b00      	ldr	r3, [sp, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	bf14      	ite	ne
 800aba2:	2700      	movne	r7, #0
 800aba4:	2706      	moveq	r7, #6
 800aba6:	4638      	mov	r0, r7
 800aba8:	b009      	add	sp, #36	; 0x24
 800abaa:	ecbd 8b02 	vpop	{d8}
 800abae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb2:	463e      	mov	r6, r7
 800abb4:	4625      	mov	r5, r4
 800abb6:	2401      	movs	r4, #1
 800abb8:	e7ca      	b.n	800ab50 <__gethex+0xd4>
 800abba:	f04f 0900 	mov.w	r9, #0
 800abbe:	1cb1      	adds	r1, r6, #2
 800abc0:	e7d3      	b.n	800ab6a <__gethex+0xee>
 800abc2:	f04f 0901 	mov.w	r9, #1
 800abc6:	e7fa      	b.n	800abbe <__gethex+0x142>
 800abc8:	230a      	movs	r3, #10
 800abca:	fb03 0202 	mla	r2, r3, r2, r0
 800abce:	3a10      	subs	r2, #16
 800abd0:	e7d4      	b.n	800ab7c <__gethex+0x100>
 800abd2:	4631      	mov	r1, r6
 800abd4:	e7df      	b.n	800ab96 <__gethex+0x11a>
 800abd6:	1bf3      	subs	r3, r6, r7
 800abd8:	3b01      	subs	r3, #1
 800abda:	4621      	mov	r1, r4
 800abdc:	2b07      	cmp	r3, #7
 800abde:	dc0b      	bgt.n	800abf8 <__gethex+0x17c>
 800abe0:	ee18 0a10 	vmov	r0, s16
 800abe4:	f000 fa90 	bl	800b108 <_Balloc>
 800abe8:	4604      	mov	r4, r0
 800abea:	b940      	cbnz	r0, 800abfe <__gethex+0x182>
 800abec:	4b5d      	ldr	r3, [pc, #372]	; (800ad64 <__gethex+0x2e8>)
 800abee:	4602      	mov	r2, r0
 800abf0:	21de      	movs	r1, #222	; 0xde
 800abf2:	485d      	ldr	r0, [pc, #372]	; (800ad68 <__gethex+0x2ec>)
 800abf4:	f001 fdf4 	bl	800c7e0 <__assert_func>
 800abf8:	3101      	adds	r1, #1
 800abfa:	105b      	asrs	r3, r3, #1
 800abfc:	e7ee      	b.n	800abdc <__gethex+0x160>
 800abfe:	f100 0914 	add.w	r9, r0, #20
 800ac02:	f04f 0b00 	mov.w	fp, #0
 800ac06:	f1ca 0301 	rsb	r3, sl, #1
 800ac0a:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac0e:	f8cd b000 	str.w	fp, [sp]
 800ac12:	9306      	str	r3, [sp, #24]
 800ac14:	42b7      	cmp	r7, r6
 800ac16:	d340      	bcc.n	800ac9a <__gethex+0x21e>
 800ac18:	9802      	ldr	r0, [sp, #8]
 800ac1a:	9b00      	ldr	r3, [sp, #0]
 800ac1c:	f840 3b04 	str.w	r3, [r0], #4
 800ac20:	eba0 0009 	sub.w	r0, r0, r9
 800ac24:	1080      	asrs	r0, r0, #2
 800ac26:	0146      	lsls	r6, r0, #5
 800ac28:	6120      	str	r0, [r4, #16]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 fb5e 	bl	800b2ec <__hi0bits>
 800ac30:	1a30      	subs	r0, r6, r0
 800ac32:	f8d8 6000 	ldr.w	r6, [r8]
 800ac36:	42b0      	cmp	r0, r6
 800ac38:	dd63      	ble.n	800ad02 <__gethex+0x286>
 800ac3a:	1b87      	subs	r7, r0, r6
 800ac3c:	4639      	mov	r1, r7
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f000 ff02 	bl	800ba48 <__any_on>
 800ac44:	4682      	mov	sl, r0
 800ac46:	b1a8      	cbz	r0, 800ac74 <__gethex+0x1f8>
 800ac48:	1e7b      	subs	r3, r7, #1
 800ac4a:	1159      	asrs	r1, r3, #5
 800ac4c:	f003 021f 	and.w	r2, r3, #31
 800ac50:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ac54:	f04f 0a01 	mov.w	sl, #1
 800ac58:	fa0a f202 	lsl.w	r2, sl, r2
 800ac5c:	420a      	tst	r2, r1
 800ac5e:	d009      	beq.n	800ac74 <__gethex+0x1f8>
 800ac60:	4553      	cmp	r3, sl
 800ac62:	dd05      	ble.n	800ac70 <__gethex+0x1f4>
 800ac64:	1eb9      	subs	r1, r7, #2
 800ac66:	4620      	mov	r0, r4
 800ac68:	f000 feee 	bl	800ba48 <__any_on>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d145      	bne.n	800acfc <__gethex+0x280>
 800ac70:	f04f 0a02 	mov.w	sl, #2
 800ac74:	4639      	mov	r1, r7
 800ac76:	4620      	mov	r0, r4
 800ac78:	f7ff fe98 	bl	800a9ac <rshift>
 800ac7c:	443d      	add	r5, r7
 800ac7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac82:	42ab      	cmp	r3, r5
 800ac84:	da4c      	bge.n	800ad20 <__gethex+0x2a4>
 800ac86:	ee18 0a10 	vmov	r0, s16
 800ac8a:	4621      	mov	r1, r4
 800ac8c:	f000 fa7c 	bl	800b188 <_Bfree>
 800ac90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac92:	2300      	movs	r3, #0
 800ac94:	6013      	str	r3, [r2, #0]
 800ac96:	27a3      	movs	r7, #163	; 0xa3
 800ac98:	e785      	b.n	800aba6 <__gethex+0x12a>
 800ac9a:	1e73      	subs	r3, r6, #1
 800ac9c:	9a05      	ldr	r2, [sp, #20]
 800ac9e:	9303      	str	r3, [sp, #12]
 800aca0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d019      	beq.n	800acdc <__gethex+0x260>
 800aca8:	f1bb 0f20 	cmp.w	fp, #32
 800acac:	d107      	bne.n	800acbe <__gethex+0x242>
 800acae:	9b02      	ldr	r3, [sp, #8]
 800acb0:	9a00      	ldr	r2, [sp, #0]
 800acb2:	f843 2b04 	str.w	r2, [r3], #4
 800acb6:	9302      	str	r3, [sp, #8]
 800acb8:	2300      	movs	r3, #0
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	469b      	mov	fp, r3
 800acbe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800acc2:	f7ff fec5 	bl	800aa50 <__hexdig_fun>
 800acc6:	9b00      	ldr	r3, [sp, #0]
 800acc8:	f000 000f 	and.w	r0, r0, #15
 800accc:	fa00 f00b 	lsl.w	r0, r0, fp
 800acd0:	4303      	orrs	r3, r0
 800acd2:	9300      	str	r3, [sp, #0]
 800acd4:	f10b 0b04 	add.w	fp, fp, #4
 800acd8:	9b03      	ldr	r3, [sp, #12]
 800acda:	e00d      	b.n	800acf8 <__gethex+0x27c>
 800acdc:	9b03      	ldr	r3, [sp, #12]
 800acde:	9a06      	ldr	r2, [sp, #24]
 800ace0:	4413      	add	r3, r2
 800ace2:	42bb      	cmp	r3, r7
 800ace4:	d3e0      	bcc.n	800aca8 <__gethex+0x22c>
 800ace6:	4618      	mov	r0, r3
 800ace8:	9901      	ldr	r1, [sp, #4]
 800acea:	9307      	str	r3, [sp, #28]
 800acec:	4652      	mov	r2, sl
 800acee:	f001 fca7 	bl	800c640 <strncmp>
 800acf2:	9b07      	ldr	r3, [sp, #28]
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d1d7      	bne.n	800aca8 <__gethex+0x22c>
 800acf8:	461e      	mov	r6, r3
 800acfa:	e78b      	b.n	800ac14 <__gethex+0x198>
 800acfc:	f04f 0a03 	mov.w	sl, #3
 800ad00:	e7b8      	b.n	800ac74 <__gethex+0x1f8>
 800ad02:	da0a      	bge.n	800ad1a <__gethex+0x29e>
 800ad04:	1a37      	subs	r7, r6, r0
 800ad06:	4621      	mov	r1, r4
 800ad08:	ee18 0a10 	vmov	r0, s16
 800ad0c:	463a      	mov	r2, r7
 800ad0e:	f000 fc57 	bl	800b5c0 <__lshift>
 800ad12:	1bed      	subs	r5, r5, r7
 800ad14:	4604      	mov	r4, r0
 800ad16:	f100 0914 	add.w	r9, r0, #20
 800ad1a:	f04f 0a00 	mov.w	sl, #0
 800ad1e:	e7ae      	b.n	800ac7e <__gethex+0x202>
 800ad20:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ad24:	42a8      	cmp	r0, r5
 800ad26:	dd72      	ble.n	800ae0e <__gethex+0x392>
 800ad28:	1b45      	subs	r5, r0, r5
 800ad2a:	42ae      	cmp	r6, r5
 800ad2c:	dc36      	bgt.n	800ad9c <__gethex+0x320>
 800ad2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d02a      	beq.n	800ad8c <__gethex+0x310>
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	d02c      	beq.n	800ad94 <__gethex+0x318>
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d11c      	bne.n	800ad78 <__gethex+0x2fc>
 800ad3e:	42ae      	cmp	r6, r5
 800ad40:	d11a      	bne.n	800ad78 <__gethex+0x2fc>
 800ad42:	2e01      	cmp	r6, #1
 800ad44:	d112      	bne.n	800ad6c <__gethex+0x2f0>
 800ad46:	9a04      	ldr	r2, [sp, #16]
 800ad48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad4c:	6013      	str	r3, [r2, #0]
 800ad4e:	2301      	movs	r3, #1
 800ad50:	6123      	str	r3, [r4, #16]
 800ad52:	f8c9 3000 	str.w	r3, [r9]
 800ad56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad58:	2762      	movs	r7, #98	; 0x62
 800ad5a:	601c      	str	r4, [r3, #0]
 800ad5c:	e723      	b.n	800aba6 <__gethex+0x12a>
 800ad5e:	bf00      	nop
 800ad60:	080101d8 	.word	0x080101d8
 800ad64:	08010160 	.word	0x08010160
 800ad68:	08010171 	.word	0x08010171
 800ad6c:	1e71      	subs	r1, r6, #1
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 fe6a 	bl	800ba48 <__any_on>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d1e6      	bne.n	800ad46 <__gethex+0x2ca>
 800ad78:	ee18 0a10 	vmov	r0, s16
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	f000 fa03 	bl	800b188 <_Bfree>
 800ad82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad84:	2300      	movs	r3, #0
 800ad86:	6013      	str	r3, [r2, #0]
 800ad88:	2750      	movs	r7, #80	; 0x50
 800ad8a:	e70c      	b.n	800aba6 <__gethex+0x12a>
 800ad8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1f2      	bne.n	800ad78 <__gethex+0x2fc>
 800ad92:	e7d8      	b.n	800ad46 <__gethex+0x2ca>
 800ad94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1d5      	bne.n	800ad46 <__gethex+0x2ca>
 800ad9a:	e7ed      	b.n	800ad78 <__gethex+0x2fc>
 800ad9c:	1e6f      	subs	r7, r5, #1
 800ad9e:	f1ba 0f00 	cmp.w	sl, #0
 800ada2:	d131      	bne.n	800ae08 <__gethex+0x38c>
 800ada4:	b127      	cbz	r7, 800adb0 <__gethex+0x334>
 800ada6:	4639      	mov	r1, r7
 800ada8:	4620      	mov	r0, r4
 800adaa:	f000 fe4d 	bl	800ba48 <__any_on>
 800adae:	4682      	mov	sl, r0
 800adb0:	117b      	asrs	r3, r7, #5
 800adb2:	2101      	movs	r1, #1
 800adb4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800adb8:	f007 071f 	and.w	r7, r7, #31
 800adbc:	fa01 f707 	lsl.w	r7, r1, r7
 800adc0:	421f      	tst	r7, r3
 800adc2:	4629      	mov	r1, r5
 800adc4:	4620      	mov	r0, r4
 800adc6:	bf18      	it	ne
 800adc8:	f04a 0a02 	orrne.w	sl, sl, #2
 800adcc:	1b76      	subs	r6, r6, r5
 800adce:	f7ff fded 	bl	800a9ac <rshift>
 800add2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800add6:	2702      	movs	r7, #2
 800add8:	f1ba 0f00 	cmp.w	sl, #0
 800addc:	d048      	beq.n	800ae70 <__gethex+0x3f4>
 800adde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d015      	beq.n	800ae12 <__gethex+0x396>
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	d017      	beq.n	800ae1a <__gethex+0x39e>
 800adea:	2b01      	cmp	r3, #1
 800adec:	d109      	bne.n	800ae02 <__gethex+0x386>
 800adee:	f01a 0f02 	tst.w	sl, #2
 800adf2:	d006      	beq.n	800ae02 <__gethex+0x386>
 800adf4:	f8d9 0000 	ldr.w	r0, [r9]
 800adf8:	ea4a 0a00 	orr.w	sl, sl, r0
 800adfc:	f01a 0f01 	tst.w	sl, #1
 800ae00:	d10e      	bne.n	800ae20 <__gethex+0x3a4>
 800ae02:	f047 0710 	orr.w	r7, r7, #16
 800ae06:	e033      	b.n	800ae70 <__gethex+0x3f4>
 800ae08:	f04f 0a01 	mov.w	sl, #1
 800ae0c:	e7d0      	b.n	800adb0 <__gethex+0x334>
 800ae0e:	2701      	movs	r7, #1
 800ae10:	e7e2      	b.n	800add8 <__gethex+0x35c>
 800ae12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae14:	f1c3 0301 	rsb	r3, r3, #1
 800ae18:	9315      	str	r3, [sp, #84]	; 0x54
 800ae1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d0f0      	beq.n	800ae02 <__gethex+0x386>
 800ae20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae24:	f104 0314 	add.w	r3, r4, #20
 800ae28:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ae2c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ae30:	f04f 0c00 	mov.w	ip, #0
 800ae34:	4618      	mov	r0, r3
 800ae36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae3a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ae3e:	d01c      	beq.n	800ae7a <__gethex+0x3fe>
 800ae40:	3201      	adds	r2, #1
 800ae42:	6002      	str	r2, [r0, #0]
 800ae44:	2f02      	cmp	r7, #2
 800ae46:	f104 0314 	add.w	r3, r4, #20
 800ae4a:	d13f      	bne.n	800aecc <__gethex+0x450>
 800ae4c:	f8d8 2000 	ldr.w	r2, [r8]
 800ae50:	3a01      	subs	r2, #1
 800ae52:	42b2      	cmp	r2, r6
 800ae54:	d10a      	bne.n	800ae6c <__gethex+0x3f0>
 800ae56:	1171      	asrs	r1, r6, #5
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae5e:	f006 061f 	and.w	r6, r6, #31
 800ae62:	fa02 f606 	lsl.w	r6, r2, r6
 800ae66:	421e      	tst	r6, r3
 800ae68:	bf18      	it	ne
 800ae6a:	4617      	movne	r7, r2
 800ae6c:	f047 0720 	orr.w	r7, r7, #32
 800ae70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae72:	601c      	str	r4, [r3, #0]
 800ae74:	9b04      	ldr	r3, [sp, #16]
 800ae76:	601d      	str	r5, [r3, #0]
 800ae78:	e695      	b.n	800aba6 <__gethex+0x12a>
 800ae7a:	4299      	cmp	r1, r3
 800ae7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae80:	d8d8      	bhi.n	800ae34 <__gethex+0x3b8>
 800ae82:	68a3      	ldr	r3, [r4, #8]
 800ae84:	459b      	cmp	fp, r3
 800ae86:	db19      	blt.n	800aebc <__gethex+0x440>
 800ae88:	6861      	ldr	r1, [r4, #4]
 800ae8a:	ee18 0a10 	vmov	r0, s16
 800ae8e:	3101      	adds	r1, #1
 800ae90:	f000 f93a 	bl	800b108 <_Balloc>
 800ae94:	4681      	mov	r9, r0
 800ae96:	b918      	cbnz	r0, 800aea0 <__gethex+0x424>
 800ae98:	4b1a      	ldr	r3, [pc, #104]	; (800af04 <__gethex+0x488>)
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	2184      	movs	r1, #132	; 0x84
 800ae9e:	e6a8      	b.n	800abf2 <__gethex+0x176>
 800aea0:	6922      	ldr	r2, [r4, #16]
 800aea2:	3202      	adds	r2, #2
 800aea4:	f104 010c 	add.w	r1, r4, #12
 800aea8:	0092      	lsls	r2, r2, #2
 800aeaa:	300c      	adds	r0, #12
 800aeac:	f000 f91e 	bl	800b0ec <memcpy>
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	ee18 0a10 	vmov	r0, s16
 800aeb6:	f000 f967 	bl	800b188 <_Bfree>
 800aeba:	464c      	mov	r4, r9
 800aebc:	6923      	ldr	r3, [r4, #16]
 800aebe:	1c5a      	adds	r2, r3, #1
 800aec0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aec4:	6122      	str	r2, [r4, #16]
 800aec6:	2201      	movs	r2, #1
 800aec8:	615a      	str	r2, [r3, #20]
 800aeca:	e7bb      	b.n	800ae44 <__gethex+0x3c8>
 800aecc:	6922      	ldr	r2, [r4, #16]
 800aece:	455a      	cmp	r2, fp
 800aed0:	dd0b      	ble.n	800aeea <__gethex+0x46e>
 800aed2:	2101      	movs	r1, #1
 800aed4:	4620      	mov	r0, r4
 800aed6:	f7ff fd69 	bl	800a9ac <rshift>
 800aeda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aede:	3501      	adds	r5, #1
 800aee0:	42ab      	cmp	r3, r5
 800aee2:	f6ff aed0 	blt.w	800ac86 <__gethex+0x20a>
 800aee6:	2701      	movs	r7, #1
 800aee8:	e7c0      	b.n	800ae6c <__gethex+0x3f0>
 800aeea:	f016 061f 	ands.w	r6, r6, #31
 800aeee:	d0fa      	beq.n	800aee6 <__gethex+0x46a>
 800aef0:	4453      	add	r3, sl
 800aef2:	f1c6 0620 	rsb	r6, r6, #32
 800aef6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aefa:	f000 f9f7 	bl	800b2ec <__hi0bits>
 800aefe:	42b0      	cmp	r0, r6
 800af00:	dbe7      	blt.n	800aed2 <__gethex+0x456>
 800af02:	e7f0      	b.n	800aee6 <__gethex+0x46a>
 800af04:	08010160 	.word	0x08010160

0800af08 <L_shift>:
 800af08:	f1c2 0208 	rsb	r2, r2, #8
 800af0c:	0092      	lsls	r2, r2, #2
 800af0e:	b570      	push	{r4, r5, r6, lr}
 800af10:	f1c2 0620 	rsb	r6, r2, #32
 800af14:	6843      	ldr	r3, [r0, #4]
 800af16:	6804      	ldr	r4, [r0, #0]
 800af18:	fa03 f506 	lsl.w	r5, r3, r6
 800af1c:	432c      	orrs	r4, r5
 800af1e:	40d3      	lsrs	r3, r2
 800af20:	6004      	str	r4, [r0, #0]
 800af22:	f840 3f04 	str.w	r3, [r0, #4]!
 800af26:	4288      	cmp	r0, r1
 800af28:	d3f4      	bcc.n	800af14 <L_shift+0xc>
 800af2a:	bd70      	pop	{r4, r5, r6, pc}

0800af2c <__match>:
 800af2c:	b530      	push	{r4, r5, lr}
 800af2e:	6803      	ldr	r3, [r0, #0]
 800af30:	3301      	adds	r3, #1
 800af32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af36:	b914      	cbnz	r4, 800af3e <__match+0x12>
 800af38:	6003      	str	r3, [r0, #0]
 800af3a:	2001      	movs	r0, #1
 800af3c:	bd30      	pop	{r4, r5, pc}
 800af3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800af46:	2d19      	cmp	r5, #25
 800af48:	bf98      	it	ls
 800af4a:	3220      	addls	r2, #32
 800af4c:	42a2      	cmp	r2, r4
 800af4e:	d0f0      	beq.n	800af32 <__match+0x6>
 800af50:	2000      	movs	r0, #0
 800af52:	e7f3      	b.n	800af3c <__match+0x10>

0800af54 <__hexnan>:
 800af54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af58:	680b      	ldr	r3, [r1, #0]
 800af5a:	115e      	asrs	r6, r3, #5
 800af5c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af60:	f013 031f 	ands.w	r3, r3, #31
 800af64:	b087      	sub	sp, #28
 800af66:	bf18      	it	ne
 800af68:	3604      	addne	r6, #4
 800af6a:	2500      	movs	r5, #0
 800af6c:	1f37      	subs	r7, r6, #4
 800af6e:	4690      	mov	r8, r2
 800af70:	6802      	ldr	r2, [r0, #0]
 800af72:	9301      	str	r3, [sp, #4]
 800af74:	4682      	mov	sl, r0
 800af76:	f846 5c04 	str.w	r5, [r6, #-4]
 800af7a:	46b9      	mov	r9, r7
 800af7c:	463c      	mov	r4, r7
 800af7e:	9502      	str	r5, [sp, #8]
 800af80:	46ab      	mov	fp, r5
 800af82:	7851      	ldrb	r1, [r2, #1]
 800af84:	1c53      	adds	r3, r2, #1
 800af86:	9303      	str	r3, [sp, #12]
 800af88:	b341      	cbz	r1, 800afdc <__hexnan+0x88>
 800af8a:	4608      	mov	r0, r1
 800af8c:	9205      	str	r2, [sp, #20]
 800af8e:	9104      	str	r1, [sp, #16]
 800af90:	f7ff fd5e 	bl	800aa50 <__hexdig_fun>
 800af94:	2800      	cmp	r0, #0
 800af96:	d14f      	bne.n	800b038 <__hexnan+0xe4>
 800af98:	9904      	ldr	r1, [sp, #16]
 800af9a:	9a05      	ldr	r2, [sp, #20]
 800af9c:	2920      	cmp	r1, #32
 800af9e:	d818      	bhi.n	800afd2 <__hexnan+0x7e>
 800afa0:	9b02      	ldr	r3, [sp, #8]
 800afa2:	459b      	cmp	fp, r3
 800afa4:	dd13      	ble.n	800afce <__hexnan+0x7a>
 800afa6:	454c      	cmp	r4, r9
 800afa8:	d206      	bcs.n	800afb8 <__hexnan+0x64>
 800afaa:	2d07      	cmp	r5, #7
 800afac:	dc04      	bgt.n	800afb8 <__hexnan+0x64>
 800afae:	462a      	mov	r2, r5
 800afb0:	4649      	mov	r1, r9
 800afb2:	4620      	mov	r0, r4
 800afb4:	f7ff ffa8 	bl	800af08 <L_shift>
 800afb8:	4544      	cmp	r4, r8
 800afba:	d950      	bls.n	800b05e <__hexnan+0x10a>
 800afbc:	2300      	movs	r3, #0
 800afbe:	f1a4 0904 	sub.w	r9, r4, #4
 800afc2:	f844 3c04 	str.w	r3, [r4, #-4]
 800afc6:	f8cd b008 	str.w	fp, [sp, #8]
 800afca:	464c      	mov	r4, r9
 800afcc:	461d      	mov	r5, r3
 800afce:	9a03      	ldr	r2, [sp, #12]
 800afd0:	e7d7      	b.n	800af82 <__hexnan+0x2e>
 800afd2:	2929      	cmp	r1, #41	; 0x29
 800afd4:	d156      	bne.n	800b084 <__hexnan+0x130>
 800afd6:	3202      	adds	r2, #2
 800afd8:	f8ca 2000 	str.w	r2, [sl]
 800afdc:	f1bb 0f00 	cmp.w	fp, #0
 800afe0:	d050      	beq.n	800b084 <__hexnan+0x130>
 800afe2:	454c      	cmp	r4, r9
 800afe4:	d206      	bcs.n	800aff4 <__hexnan+0xa0>
 800afe6:	2d07      	cmp	r5, #7
 800afe8:	dc04      	bgt.n	800aff4 <__hexnan+0xa0>
 800afea:	462a      	mov	r2, r5
 800afec:	4649      	mov	r1, r9
 800afee:	4620      	mov	r0, r4
 800aff0:	f7ff ff8a 	bl	800af08 <L_shift>
 800aff4:	4544      	cmp	r4, r8
 800aff6:	d934      	bls.n	800b062 <__hexnan+0x10e>
 800aff8:	f1a8 0204 	sub.w	r2, r8, #4
 800affc:	4623      	mov	r3, r4
 800affe:	f853 1b04 	ldr.w	r1, [r3], #4
 800b002:	f842 1f04 	str.w	r1, [r2, #4]!
 800b006:	429f      	cmp	r7, r3
 800b008:	d2f9      	bcs.n	800affe <__hexnan+0xaa>
 800b00a:	1b3b      	subs	r3, r7, r4
 800b00c:	f023 0303 	bic.w	r3, r3, #3
 800b010:	3304      	adds	r3, #4
 800b012:	3401      	adds	r4, #1
 800b014:	3e03      	subs	r6, #3
 800b016:	42b4      	cmp	r4, r6
 800b018:	bf88      	it	hi
 800b01a:	2304      	movhi	r3, #4
 800b01c:	4443      	add	r3, r8
 800b01e:	2200      	movs	r2, #0
 800b020:	f843 2b04 	str.w	r2, [r3], #4
 800b024:	429f      	cmp	r7, r3
 800b026:	d2fb      	bcs.n	800b020 <__hexnan+0xcc>
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	b91b      	cbnz	r3, 800b034 <__hexnan+0xe0>
 800b02c:	4547      	cmp	r7, r8
 800b02e:	d127      	bne.n	800b080 <__hexnan+0x12c>
 800b030:	2301      	movs	r3, #1
 800b032:	603b      	str	r3, [r7, #0]
 800b034:	2005      	movs	r0, #5
 800b036:	e026      	b.n	800b086 <__hexnan+0x132>
 800b038:	3501      	adds	r5, #1
 800b03a:	2d08      	cmp	r5, #8
 800b03c:	f10b 0b01 	add.w	fp, fp, #1
 800b040:	dd06      	ble.n	800b050 <__hexnan+0xfc>
 800b042:	4544      	cmp	r4, r8
 800b044:	d9c3      	bls.n	800afce <__hexnan+0x7a>
 800b046:	2300      	movs	r3, #0
 800b048:	f844 3c04 	str.w	r3, [r4, #-4]
 800b04c:	2501      	movs	r5, #1
 800b04e:	3c04      	subs	r4, #4
 800b050:	6822      	ldr	r2, [r4, #0]
 800b052:	f000 000f 	and.w	r0, r0, #15
 800b056:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b05a:	6022      	str	r2, [r4, #0]
 800b05c:	e7b7      	b.n	800afce <__hexnan+0x7a>
 800b05e:	2508      	movs	r5, #8
 800b060:	e7b5      	b.n	800afce <__hexnan+0x7a>
 800b062:	9b01      	ldr	r3, [sp, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d0df      	beq.n	800b028 <__hexnan+0xd4>
 800b068:	f04f 32ff 	mov.w	r2, #4294967295
 800b06c:	f1c3 0320 	rsb	r3, r3, #32
 800b070:	fa22 f303 	lsr.w	r3, r2, r3
 800b074:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b078:	401a      	ands	r2, r3
 800b07a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b07e:	e7d3      	b.n	800b028 <__hexnan+0xd4>
 800b080:	3f04      	subs	r7, #4
 800b082:	e7d1      	b.n	800b028 <__hexnan+0xd4>
 800b084:	2004      	movs	r0, #4
 800b086:	b007      	add	sp, #28
 800b088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b08c <_localeconv_r>:
 800b08c:	4800      	ldr	r0, [pc, #0]	; (800b090 <_localeconv_r+0x4>)
 800b08e:	4770      	bx	lr
 800b090:	20000174 	.word	0x20000174

0800b094 <_lseek_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	4d07      	ldr	r5, [pc, #28]	; (800b0b4 <_lseek_r+0x20>)
 800b098:	4604      	mov	r4, r0
 800b09a:	4608      	mov	r0, r1
 800b09c:	4611      	mov	r1, r2
 800b09e:	2200      	movs	r2, #0
 800b0a0:	602a      	str	r2, [r5, #0]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	f7fa f867 	bl	8005176 <_lseek>
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	d102      	bne.n	800b0b2 <_lseek_r+0x1e>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	b103      	cbz	r3, 800b0b2 <_lseek_r+0x1e>
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	20009d08 	.word	0x20009d08

0800b0b8 <malloc>:
 800b0b8:	4b02      	ldr	r3, [pc, #8]	; (800b0c4 <malloc+0xc>)
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	6818      	ldr	r0, [r3, #0]
 800b0be:	f000 bd67 	b.w	800bb90 <_malloc_r>
 800b0c2:	bf00      	nop
 800b0c4:	2000001c 	.word	0x2000001c

0800b0c8 <__ascii_mbtowc>:
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	b901      	cbnz	r1, 800b0ce <__ascii_mbtowc+0x6>
 800b0cc:	a901      	add	r1, sp, #4
 800b0ce:	b142      	cbz	r2, 800b0e2 <__ascii_mbtowc+0x1a>
 800b0d0:	b14b      	cbz	r3, 800b0e6 <__ascii_mbtowc+0x1e>
 800b0d2:	7813      	ldrb	r3, [r2, #0]
 800b0d4:	600b      	str	r3, [r1, #0]
 800b0d6:	7812      	ldrb	r2, [r2, #0]
 800b0d8:	1e10      	subs	r0, r2, #0
 800b0da:	bf18      	it	ne
 800b0dc:	2001      	movne	r0, #1
 800b0de:	b002      	add	sp, #8
 800b0e0:	4770      	bx	lr
 800b0e2:	4610      	mov	r0, r2
 800b0e4:	e7fb      	b.n	800b0de <__ascii_mbtowc+0x16>
 800b0e6:	f06f 0001 	mvn.w	r0, #1
 800b0ea:	e7f8      	b.n	800b0de <__ascii_mbtowc+0x16>

0800b0ec <memcpy>:
 800b0ec:	440a      	add	r2, r1
 800b0ee:	4291      	cmp	r1, r2
 800b0f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0f4:	d100      	bne.n	800b0f8 <memcpy+0xc>
 800b0f6:	4770      	bx	lr
 800b0f8:	b510      	push	{r4, lr}
 800b0fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b102:	4291      	cmp	r1, r2
 800b104:	d1f9      	bne.n	800b0fa <memcpy+0xe>
 800b106:	bd10      	pop	{r4, pc}

0800b108 <_Balloc>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b10c:	4604      	mov	r4, r0
 800b10e:	460d      	mov	r5, r1
 800b110:	b976      	cbnz	r6, 800b130 <_Balloc+0x28>
 800b112:	2010      	movs	r0, #16
 800b114:	f7ff ffd0 	bl	800b0b8 <malloc>
 800b118:	4602      	mov	r2, r0
 800b11a:	6260      	str	r0, [r4, #36]	; 0x24
 800b11c:	b920      	cbnz	r0, 800b128 <_Balloc+0x20>
 800b11e:	4b18      	ldr	r3, [pc, #96]	; (800b180 <_Balloc+0x78>)
 800b120:	4818      	ldr	r0, [pc, #96]	; (800b184 <_Balloc+0x7c>)
 800b122:	2166      	movs	r1, #102	; 0x66
 800b124:	f001 fb5c 	bl	800c7e0 <__assert_func>
 800b128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b12c:	6006      	str	r6, [r0, #0]
 800b12e:	60c6      	str	r6, [r0, #12]
 800b130:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b132:	68f3      	ldr	r3, [r6, #12]
 800b134:	b183      	cbz	r3, 800b158 <_Balloc+0x50>
 800b136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b13e:	b9b8      	cbnz	r0, 800b170 <_Balloc+0x68>
 800b140:	2101      	movs	r1, #1
 800b142:	fa01 f605 	lsl.w	r6, r1, r5
 800b146:	1d72      	adds	r2, r6, #5
 800b148:	0092      	lsls	r2, r2, #2
 800b14a:	4620      	mov	r0, r4
 800b14c:	f000 fc9d 	bl	800ba8a <_calloc_r>
 800b150:	b160      	cbz	r0, 800b16c <_Balloc+0x64>
 800b152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b156:	e00e      	b.n	800b176 <_Balloc+0x6e>
 800b158:	2221      	movs	r2, #33	; 0x21
 800b15a:	2104      	movs	r1, #4
 800b15c:	4620      	mov	r0, r4
 800b15e:	f000 fc94 	bl	800ba8a <_calloc_r>
 800b162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b164:	60f0      	str	r0, [r6, #12]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d1e4      	bne.n	800b136 <_Balloc+0x2e>
 800b16c:	2000      	movs	r0, #0
 800b16e:	bd70      	pop	{r4, r5, r6, pc}
 800b170:	6802      	ldr	r2, [r0, #0]
 800b172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b176:	2300      	movs	r3, #0
 800b178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b17c:	e7f7      	b.n	800b16e <_Balloc+0x66>
 800b17e:	bf00      	nop
 800b180:	080100ee 	.word	0x080100ee
 800b184:	080101ec 	.word	0x080101ec

0800b188 <_Bfree>:
 800b188:	b570      	push	{r4, r5, r6, lr}
 800b18a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b18c:	4605      	mov	r5, r0
 800b18e:	460c      	mov	r4, r1
 800b190:	b976      	cbnz	r6, 800b1b0 <_Bfree+0x28>
 800b192:	2010      	movs	r0, #16
 800b194:	f7ff ff90 	bl	800b0b8 <malloc>
 800b198:	4602      	mov	r2, r0
 800b19a:	6268      	str	r0, [r5, #36]	; 0x24
 800b19c:	b920      	cbnz	r0, 800b1a8 <_Bfree+0x20>
 800b19e:	4b09      	ldr	r3, [pc, #36]	; (800b1c4 <_Bfree+0x3c>)
 800b1a0:	4809      	ldr	r0, [pc, #36]	; (800b1c8 <_Bfree+0x40>)
 800b1a2:	218a      	movs	r1, #138	; 0x8a
 800b1a4:	f001 fb1c 	bl	800c7e0 <__assert_func>
 800b1a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1ac:	6006      	str	r6, [r0, #0]
 800b1ae:	60c6      	str	r6, [r0, #12]
 800b1b0:	b13c      	cbz	r4, 800b1c2 <_Bfree+0x3a>
 800b1b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1b4:	6862      	ldr	r2, [r4, #4]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1bc:	6021      	str	r1, [r4, #0]
 800b1be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1c2:	bd70      	pop	{r4, r5, r6, pc}
 800b1c4:	080100ee 	.word	0x080100ee
 800b1c8:	080101ec 	.word	0x080101ec

0800b1cc <__multadd>:
 800b1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d0:	690d      	ldr	r5, [r1, #16]
 800b1d2:	4607      	mov	r7, r0
 800b1d4:	460c      	mov	r4, r1
 800b1d6:	461e      	mov	r6, r3
 800b1d8:	f101 0c14 	add.w	ip, r1, #20
 800b1dc:	2000      	movs	r0, #0
 800b1de:	f8dc 3000 	ldr.w	r3, [ip]
 800b1e2:	b299      	uxth	r1, r3
 800b1e4:	fb02 6101 	mla	r1, r2, r1, r6
 800b1e8:	0c1e      	lsrs	r6, r3, #16
 800b1ea:	0c0b      	lsrs	r3, r1, #16
 800b1ec:	fb02 3306 	mla	r3, r2, r6, r3
 800b1f0:	b289      	uxth	r1, r1
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b1f8:	4285      	cmp	r5, r0
 800b1fa:	f84c 1b04 	str.w	r1, [ip], #4
 800b1fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b202:	dcec      	bgt.n	800b1de <__multadd+0x12>
 800b204:	b30e      	cbz	r6, 800b24a <__multadd+0x7e>
 800b206:	68a3      	ldr	r3, [r4, #8]
 800b208:	42ab      	cmp	r3, r5
 800b20a:	dc19      	bgt.n	800b240 <__multadd+0x74>
 800b20c:	6861      	ldr	r1, [r4, #4]
 800b20e:	4638      	mov	r0, r7
 800b210:	3101      	adds	r1, #1
 800b212:	f7ff ff79 	bl	800b108 <_Balloc>
 800b216:	4680      	mov	r8, r0
 800b218:	b928      	cbnz	r0, 800b226 <__multadd+0x5a>
 800b21a:	4602      	mov	r2, r0
 800b21c:	4b0c      	ldr	r3, [pc, #48]	; (800b250 <__multadd+0x84>)
 800b21e:	480d      	ldr	r0, [pc, #52]	; (800b254 <__multadd+0x88>)
 800b220:	21b5      	movs	r1, #181	; 0xb5
 800b222:	f001 fadd 	bl	800c7e0 <__assert_func>
 800b226:	6922      	ldr	r2, [r4, #16]
 800b228:	3202      	adds	r2, #2
 800b22a:	f104 010c 	add.w	r1, r4, #12
 800b22e:	0092      	lsls	r2, r2, #2
 800b230:	300c      	adds	r0, #12
 800b232:	f7ff ff5b 	bl	800b0ec <memcpy>
 800b236:	4621      	mov	r1, r4
 800b238:	4638      	mov	r0, r7
 800b23a:	f7ff ffa5 	bl	800b188 <_Bfree>
 800b23e:	4644      	mov	r4, r8
 800b240:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b244:	3501      	adds	r5, #1
 800b246:	615e      	str	r6, [r3, #20]
 800b248:	6125      	str	r5, [r4, #16]
 800b24a:	4620      	mov	r0, r4
 800b24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b250:	08010160 	.word	0x08010160
 800b254:	080101ec 	.word	0x080101ec

0800b258 <__s2b>:
 800b258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b25c:	460c      	mov	r4, r1
 800b25e:	4615      	mov	r5, r2
 800b260:	461f      	mov	r7, r3
 800b262:	2209      	movs	r2, #9
 800b264:	3308      	adds	r3, #8
 800b266:	4606      	mov	r6, r0
 800b268:	fb93 f3f2 	sdiv	r3, r3, r2
 800b26c:	2100      	movs	r1, #0
 800b26e:	2201      	movs	r2, #1
 800b270:	429a      	cmp	r2, r3
 800b272:	db09      	blt.n	800b288 <__s2b+0x30>
 800b274:	4630      	mov	r0, r6
 800b276:	f7ff ff47 	bl	800b108 <_Balloc>
 800b27a:	b940      	cbnz	r0, 800b28e <__s2b+0x36>
 800b27c:	4602      	mov	r2, r0
 800b27e:	4b19      	ldr	r3, [pc, #100]	; (800b2e4 <__s2b+0x8c>)
 800b280:	4819      	ldr	r0, [pc, #100]	; (800b2e8 <__s2b+0x90>)
 800b282:	21ce      	movs	r1, #206	; 0xce
 800b284:	f001 faac 	bl	800c7e0 <__assert_func>
 800b288:	0052      	lsls	r2, r2, #1
 800b28a:	3101      	adds	r1, #1
 800b28c:	e7f0      	b.n	800b270 <__s2b+0x18>
 800b28e:	9b08      	ldr	r3, [sp, #32]
 800b290:	6143      	str	r3, [r0, #20]
 800b292:	2d09      	cmp	r5, #9
 800b294:	f04f 0301 	mov.w	r3, #1
 800b298:	6103      	str	r3, [r0, #16]
 800b29a:	dd16      	ble.n	800b2ca <__s2b+0x72>
 800b29c:	f104 0909 	add.w	r9, r4, #9
 800b2a0:	46c8      	mov	r8, r9
 800b2a2:	442c      	add	r4, r5
 800b2a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b2a8:	4601      	mov	r1, r0
 800b2aa:	3b30      	subs	r3, #48	; 0x30
 800b2ac:	220a      	movs	r2, #10
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	f7ff ff8c 	bl	800b1cc <__multadd>
 800b2b4:	45a0      	cmp	r8, r4
 800b2b6:	d1f5      	bne.n	800b2a4 <__s2b+0x4c>
 800b2b8:	f1a5 0408 	sub.w	r4, r5, #8
 800b2bc:	444c      	add	r4, r9
 800b2be:	1b2d      	subs	r5, r5, r4
 800b2c0:	1963      	adds	r3, r4, r5
 800b2c2:	42bb      	cmp	r3, r7
 800b2c4:	db04      	blt.n	800b2d0 <__s2b+0x78>
 800b2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ca:	340a      	adds	r4, #10
 800b2cc:	2509      	movs	r5, #9
 800b2ce:	e7f6      	b.n	800b2be <__s2b+0x66>
 800b2d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2d4:	4601      	mov	r1, r0
 800b2d6:	3b30      	subs	r3, #48	; 0x30
 800b2d8:	220a      	movs	r2, #10
 800b2da:	4630      	mov	r0, r6
 800b2dc:	f7ff ff76 	bl	800b1cc <__multadd>
 800b2e0:	e7ee      	b.n	800b2c0 <__s2b+0x68>
 800b2e2:	bf00      	nop
 800b2e4:	08010160 	.word	0x08010160
 800b2e8:	080101ec 	.word	0x080101ec

0800b2ec <__hi0bits>:
 800b2ec:	0c03      	lsrs	r3, r0, #16
 800b2ee:	041b      	lsls	r3, r3, #16
 800b2f0:	b9d3      	cbnz	r3, 800b328 <__hi0bits+0x3c>
 800b2f2:	0400      	lsls	r0, r0, #16
 800b2f4:	2310      	movs	r3, #16
 800b2f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b2fa:	bf04      	itt	eq
 800b2fc:	0200      	lsleq	r0, r0, #8
 800b2fe:	3308      	addeq	r3, #8
 800b300:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b304:	bf04      	itt	eq
 800b306:	0100      	lsleq	r0, r0, #4
 800b308:	3304      	addeq	r3, #4
 800b30a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b30e:	bf04      	itt	eq
 800b310:	0080      	lsleq	r0, r0, #2
 800b312:	3302      	addeq	r3, #2
 800b314:	2800      	cmp	r0, #0
 800b316:	db05      	blt.n	800b324 <__hi0bits+0x38>
 800b318:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b31c:	f103 0301 	add.w	r3, r3, #1
 800b320:	bf08      	it	eq
 800b322:	2320      	moveq	r3, #32
 800b324:	4618      	mov	r0, r3
 800b326:	4770      	bx	lr
 800b328:	2300      	movs	r3, #0
 800b32a:	e7e4      	b.n	800b2f6 <__hi0bits+0xa>

0800b32c <__lo0bits>:
 800b32c:	6803      	ldr	r3, [r0, #0]
 800b32e:	f013 0207 	ands.w	r2, r3, #7
 800b332:	4601      	mov	r1, r0
 800b334:	d00b      	beq.n	800b34e <__lo0bits+0x22>
 800b336:	07da      	lsls	r2, r3, #31
 800b338:	d423      	bmi.n	800b382 <__lo0bits+0x56>
 800b33a:	0798      	lsls	r0, r3, #30
 800b33c:	bf49      	itett	mi
 800b33e:	085b      	lsrmi	r3, r3, #1
 800b340:	089b      	lsrpl	r3, r3, #2
 800b342:	2001      	movmi	r0, #1
 800b344:	600b      	strmi	r3, [r1, #0]
 800b346:	bf5c      	itt	pl
 800b348:	600b      	strpl	r3, [r1, #0]
 800b34a:	2002      	movpl	r0, #2
 800b34c:	4770      	bx	lr
 800b34e:	b298      	uxth	r0, r3
 800b350:	b9a8      	cbnz	r0, 800b37e <__lo0bits+0x52>
 800b352:	0c1b      	lsrs	r3, r3, #16
 800b354:	2010      	movs	r0, #16
 800b356:	b2da      	uxtb	r2, r3
 800b358:	b90a      	cbnz	r2, 800b35e <__lo0bits+0x32>
 800b35a:	3008      	adds	r0, #8
 800b35c:	0a1b      	lsrs	r3, r3, #8
 800b35e:	071a      	lsls	r2, r3, #28
 800b360:	bf04      	itt	eq
 800b362:	091b      	lsreq	r3, r3, #4
 800b364:	3004      	addeq	r0, #4
 800b366:	079a      	lsls	r2, r3, #30
 800b368:	bf04      	itt	eq
 800b36a:	089b      	lsreq	r3, r3, #2
 800b36c:	3002      	addeq	r0, #2
 800b36e:	07da      	lsls	r2, r3, #31
 800b370:	d403      	bmi.n	800b37a <__lo0bits+0x4e>
 800b372:	085b      	lsrs	r3, r3, #1
 800b374:	f100 0001 	add.w	r0, r0, #1
 800b378:	d005      	beq.n	800b386 <__lo0bits+0x5a>
 800b37a:	600b      	str	r3, [r1, #0]
 800b37c:	4770      	bx	lr
 800b37e:	4610      	mov	r0, r2
 800b380:	e7e9      	b.n	800b356 <__lo0bits+0x2a>
 800b382:	2000      	movs	r0, #0
 800b384:	4770      	bx	lr
 800b386:	2020      	movs	r0, #32
 800b388:	4770      	bx	lr
	...

0800b38c <__i2b>:
 800b38c:	b510      	push	{r4, lr}
 800b38e:	460c      	mov	r4, r1
 800b390:	2101      	movs	r1, #1
 800b392:	f7ff feb9 	bl	800b108 <_Balloc>
 800b396:	4602      	mov	r2, r0
 800b398:	b928      	cbnz	r0, 800b3a6 <__i2b+0x1a>
 800b39a:	4b05      	ldr	r3, [pc, #20]	; (800b3b0 <__i2b+0x24>)
 800b39c:	4805      	ldr	r0, [pc, #20]	; (800b3b4 <__i2b+0x28>)
 800b39e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3a2:	f001 fa1d 	bl	800c7e0 <__assert_func>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	6144      	str	r4, [r0, #20]
 800b3aa:	6103      	str	r3, [r0, #16]
 800b3ac:	bd10      	pop	{r4, pc}
 800b3ae:	bf00      	nop
 800b3b0:	08010160 	.word	0x08010160
 800b3b4:	080101ec 	.word	0x080101ec

0800b3b8 <__multiply>:
 800b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	4691      	mov	r9, r2
 800b3be:	690a      	ldr	r2, [r1, #16]
 800b3c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	bfb8      	it	lt
 800b3c8:	460b      	movlt	r3, r1
 800b3ca:	460c      	mov	r4, r1
 800b3cc:	bfbc      	itt	lt
 800b3ce:	464c      	movlt	r4, r9
 800b3d0:	4699      	movlt	r9, r3
 800b3d2:	6927      	ldr	r7, [r4, #16]
 800b3d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b3d8:	68a3      	ldr	r3, [r4, #8]
 800b3da:	6861      	ldr	r1, [r4, #4]
 800b3dc:	eb07 060a 	add.w	r6, r7, sl
 800b3e0:	42b3      	cmp	r3, r6
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	bfb8      	it	lt
 800b3e6:	3101      	addlt	r1, #1
 800b3e8:	f7ff fe8e 	bl	800b108 <_Balloc>
 800b3ec:	b930      	cbnz	r0, 800b3fc <__multiply+0x44>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	4b44      	ldr	r3, [pc, #272]	; (800b504 <__multiply+0x14c>)
 800b3f2:	4845      	ldr	r0, [pc, #276]	; (800b508 <__multiply+0x150>)
 800b3f4:	f240 115d 	movw	r1, #349	; 0x15d
 800b3f8:	f001 f9f2 	bl	800c7e0 <__assert_func>
 800b3fc:	f100 0514 	add.w	r5, r0, #20
 800b400:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b404:	462b      	mov	r3, r5
 800b406:	2200      	movs	r2, #0
 800b408:	4543      	cmp	r3, r8
 800b40a:	d321      	bcc.n	800b450 <__multiply+0x98>
 800b40c:	f104 0314 	add.w	r3, r4, #20
 800b410:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b414:	f109 0314 	add.w	r3, r9, #20
 800b418:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b41c:	9202      	str	r2, [sp, #8]
 800b41e:	1b3a      	subs	r2, r7, r4
 800b420:	3a15      	subs	r2, #21
 800b422:	f022 0203 	bic.w	r2, r2, #3
 800b426:	3204      	adds	r2, #4
 800b428:	f104 0115 	add.w	r1, r4, #21
 800b42c:	428f      	cmp	r7, r1
 800b42e:	bf38      	it	cc
 800b430:	2204      	movcc	r2, #4
 800b432:	9201      	str	r2, [sp, #4]
 800b434:	9a02      	ldr	r2, [sp, #8]
 800b436:	9303      	str	r3, [sp, #12]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d80c      	bhi.n	800b456 <__multiply+0x9e>
 800b43c:	2e00      	cmp	r6, #0
 800b43e:	dd03      	ble.n	800b448 <__multiply+0x90>
 800b440:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b444:	2b00      	cmp	r3, #0
 800b446:	d05a      	beq.n	800b4fe <__multiply+0x146>
 800b448:	6106      	str	r6, [r0, #16]
 800b44a:	b005      	add	sp, #20
 800b44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b450:	f843 2b04 	str.w	r2, [r3], #4
 800b454:	e7d8      	b.n	800b408 <__multiply+0x50>
 800b456:	f8b3 a000 	ldrh.w	sl, [r3]
 800b45a:	f1ba 0f00 	cmp.w	sl, #0
 800b45e:	d024      	beq.n	800b4aa <__multiply+0xf2>
 800b460:	f104 0e14 	add.w	lr, r4, #20
 800b464:	46a9      	mov	r9, r5
 800b466:	f04f 0c00 	mov.w	ip, #0
 800b46a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b46e:	f8d9 1000 	ldr.w	r1, [r9]
 800b472:	fa1f fb82 	uxth.w	fp, r2
 800b476:	b289      	uxth	r1, r1
 800b478:	fb0a 110b 	mla	r1, sl, fp, r1
 800b47c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b480:	f8d9 2000 	ldr.w	r2, [r9]
 800b484:	4461      	add	r1, ip
 800b486:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b48a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b48e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b492:	b289      	uxth	r1, r1
 800b494:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b498:	4577      	cmp	r7, lr
 800b49a:	f849 1b04 	str.w	r1, [r9], #4
 800b49e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4a2:	d8e2      	bhi.n	800b46a <__multiply+0xb2>
 800b4a4:	9a01      	ldr	r2, [sp, #4]
 800b4a6:	f845 c002 	str.w	ip, [r5, r2]
 800b4aa:	9a03      	ldr	r2, [sp, #12]
 800b4ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	f1b9 0f00 	cmp.w	r9, #0
 800b4b6:	d020      	beq.n	800b4fa <__multiply+0x142>
 800b4b8:	6829      	ldr	r1, [r5, #0]
 800b4ba:	f104 0c14 	add.w	ip, r4, #20
 800b4be:	46ae      	mov	lr, r5
 800b4c0:	f04f 0a00 	mov.w	sl, #0
 800b4c4:	f8bc b000 	ldrh.w	fp, [ip]
 800b4c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b4cc:	fb09 220b 	mla	r2, r9, fp, r2
 800b4d0:	4492      	add	sl, r2
 800b4d2:	b289      	uxth	r1, r1
 800b4d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b4d8:	f84e 1b04 	str.w	r1, [lr], #4
 800b4dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b4e0:	f8be 1000 	ldrh.w	r1, [lr]
 800b4e4:	0c12      	lsrs	r2, r2, #16
 800b4e6:	fb09 1102 	mla	r1, r9, r2, r1
 800b4ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b4ee:	4567      	cmp	r7, ip
 800b4f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4f4:	d8e6      	bhi.n	800b4c4 <__multiply+0x10c>
 800b4f6:	9a01      	ldr	r2, [sp, #4]
 800b4f8:	50a9      	str	r1, [r5, r2]
 800b4fa:	3504      	adds	r5, #4
 800b4fc:	e79a      	b.n	800b434 <__multiply+0x7c>
 800b4fe:	3e01      	subs	r6, #1
 800b500:	e79c      	b.n	800b43c <__multiply+0x84>
 800b502:	bf00      	nop
 800b504:	08010160 	.word	0x08010160
 800b508:	080101ec 	.word	0x080101ec

0800b50c <__pow5mult>:
 800b50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b510:	4615      	mov	r5, r2
 800b512:	f012 0203 	ands.w	r2, r2, #3
 800b516:	4606      	mov	r6, r0
 800b518:	460f      	mov	r7, r1
 800b51a:	d007      	beq.n	800b52c <__pow5mult+0x20>
 800b51c:	4c25      	ldr	r4, [pc, #148]	; (800b5b4 <__pow5mult+0xa8>)
 800b51e:	3a01      	subs	r2, #1
 800b520:	2300      	movs	r3, #0
 800b522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b526:	f7ff fe51 	bl	800b1cc <__multadd>
 800b52a:	4607      	mov	r7, r0
 800b52c:	10ad      	asrs	r5, r5, #2
 800b52e:	d03d      	beq.n	800b5ac <__pow5mult+0xa0>
 800b530:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b532:	b97c      	cbnz	r4, 800b554 <__pow5mult+0x48>
 800b534:	2010      	movs	r0, #16
 800b536:	f7ff fdbf 	bl	800b0b8 <malloc>
 800b53a:	4602      	mov	r2, r0
 800b53c:	6270      	str	r0, [r6, #36]	; 0x24
 800b53e:	b928      	cbnz	r0, 800b54c <__pow5mult+0x40>
 800b540:	4b1d      	ldr	r3, [pc, #116]	; (800b5b8 <__pow5mult+0xac>)
 800b542:	481e      	ldr	r0, [pc, #120]	; (800b5bc <__pow5mult+0xb0>)
 800b544:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b548:	f001 f94a 	bl	800c7e0 <__assert_func>
 800b54c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b550:	6004      	str	r4, [r0, #0]
 800b552:	60c4      	str	r4, [r0, #12]
 800b554:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b55c:	b94c      	cbnz	r4, 800b572 <__pow5mult+0x66>
 800b55e:	f240 2171 	movw	r1, #625	; 0x271
 800b562:	4630      	mov	r0, r6
 800b564:	f7ff ff12 	bl	800b38c <__i2b>
 800b568:	2300      	movs	r3, #0
 800b56a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b56e:	4604      	mov	r4, r0
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	f04f 0900 	mov.w	r9, #0
 800b576:	07eb      	lsls	r3, r5, #31
 800b578:	d50a      	bpl.n	800b590 <__pow5mult+0x84>
 800b57a:	4639      	mov	r1, r7
 800b57c:	4622      	mov	r2, r4
 800b57e:	4630      	mov	r0, r6
 800b580:	f7ff ff1a 	bl	800b3b8 <__multiply>
 800b584:	4639      	mov	r1, r7
 800b586:	4680      	mov	r8, r0
 800b588:	4630      	mov	r0, r6
 800b58a:	f7ff fdfd 	bl	800b188 <_Bfree>
 800b58e:	4647      	mov	r7, r8
 800b590:	106d      	asrs	r5, r5, #1
 800b592:	d00b      	beq.n	800b5ac <__pow5mult+0xa0>
 800b594:	6820      	ldr	r0, [r4, #0]
 800b596:	b938      	cbnz	r0, 800b5a8 <__pow5mult+0x9c>
 800b598:	4622      	mov	r2, r4
 800b59a:	4621      	mov	r1, r4
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7ff ff0b 	bl	800b3b8 <__multiply>
 800b5a2:	6020      	str	r0, [r4, #0]
 800b5a4:	f8c0 9000 	str.w	r9, [r0]
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	e7e4      	b.n	800b576 <__pow5mult+0x6a>
 800b5ac:	4638      	mov	r0, r7
 800b5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5b2:	bf00      	nop
 800b5b4:	08010338 	.word	0x08010338
 800b5b8:	080100ee 	.word	0x080100ee
 800b5bc:	080101ec 	.word	0x080101ec

0800b5c0 <__lshift>:
 800b5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	6849      	ldr	r1, [r1, #4]
 800b5c8:	6923      	ldr	r3, [r4, #16]
 800b5ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5ce:	68a3      	ldr	r3, [r4, #8]
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	4691      	mov	r9, r2
 800b5d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5d8:	f108 0601 	add.w	r6, r8, #1
 800b5dc:	42b3      	cmp	r3, r6
 800b5de:	db0b      	blt.n	800b5f8 <__lshift+0x38>
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f7ff fd91 	bl	800b108 <_Balloc>
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	b948      	cbnz	r0, 800b5fe <__lshift+0x3e>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	4b2a      	ldr	r3, [pc, #168]	; (800b698 <__lshift+0xd8>)
 800b5ee:	482b      	ldr	r0, [pc, #172]	; (800b69c <__lshift+0xdc>)
 800b5f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b5f4:	f001 f8f4 	bl	800c7e0 <__assert_func>
 800b5f8:	3101      	adds	r1, #1
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	e7ee      	b.n	800b5dc <__lshift+0x1c>
 800b5fe:	2300      	movs	r3, #0
 800b600:	f100 0114 	add.w	r1, r0, #20
 800b604:	f100 0210 	add.w	r2, r0, #16
 800b608:	4618      	mov	r0, r3
 800b60a:	4553      	cmp	r3, sl
 800b60c:	db37      	blt.n	800b67e <__lshift+0xbe>
 800b60e:	6920      	ldr	r0, [r4, #16]
 800b610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b614:	f104 0314 	add.w	r3, r4, #20
 800b618:	f019 091f 	ands.w	r9, r9, #31
 800b61c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b620:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b624:	d02f      	beq.n	800b686 <__lshift+0xc6>
 800b626:	f1c9 0e20 	rsb	lr, r9, #32
 800b62a:	468a      	mov	sl, r1
 800b62c:	f04f 0c00 	mov.w	ip, #0
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	fa02 f209 	lsl.w	r2, r2, r9
 800b636:	ea42 020c 	orr.w	r2, r2, ip
 800b63a:	f84a 2b04 	str.w	r2, [sl], #4
 800b63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b642:	4298      	cmp	r0, r3
 800b644:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b648:	d8f2      	bhi.n	800b630 <__lshift+0x70>
 800b64a:	1b03      	subs	r3, r0, r4
 800b64c:	3b15      	subs	r3, #21
 800b64e:	f023 0303 	bic.w	r3, r3, #3
 800b652:	3304      	adds	r3, #4
 800b654:	f104 0215 	add.w	r2, r4, #21
 800b658:	4290      	cmp	r0, r2
 800b65a:	bf38      	it	cc
 800b65c:	2304      	movcc	r3, #4
 800b65e:	f841 c003 	str.w	ip, [r1, r3]
 800b662:	f1bc 0f00 	cmp.w	ip, #0
 800b666:	d001      	beq.n	800b66c <__lshift+0xac>
 800b668:	f108 0602 	add.w	r6, r8, #2
 800b66c:	3e01      	subs	r6, #1
 800b66e:	4638      	mov	r0, r7
 800b670:	612e      	str	r6, [r5, #16]
 800b672:	4621      	mov	r1, r4
 800b674:	f7ff fd88 	bl	800b188 <_Bfree>
 800b678:	4628      	mov	r0, r5
 800b67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b67e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b682:	3301      	adds	r3, #1
 800b684:	e7c1      	b.n	800b60a <__lshift+0x4a>
 800b686:	3904      	subs	r1, #4
 800b688:	f853 2b04 	ldr.w	r2, [r3], #4
 800b68c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b690:	4298      	cmp	r0, r3
 800b692:	d8f9      	bhi.n	800b688 <__lshift+0xc8>
 800b694:	e7ea      	b.n	800b66c <__lshift+0xac>
 800b696:	bf00      	nop
 800b698:	08010160 	.word	0x08010160
 800b69c:	080101ec 	.word	0x080101ec

0800b6a0 <__mcmp>:
 800b6a0:	b530      	push	{r4, r5, lr}
 800b6a2:	6902      	ldr	r2, [r0, #16]
 800b6a4:	690c      	ldr	r4, [r1, #16]
 800b6a6:	1b12      	subs	r2, r2, r4
 800b6a8:	d10e      	bne.n	800b6c8 <__mcmp+0x28>
 800b6aa:	f100 0314 	add.w	r3, r0, #20
 800b6ae:	3114      	adds	r1, #20
 800b6b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6c0:	42a5      	cmp	r5, r4
 800b6c2:	d003      	beq.n	800b6cc <__mcmp+0x2c>
 800b6c4:	d305      	bcc.n	800b6d2 <__mcmp+0x32>
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	bd30      	pop	{r4, r5, pc}
 800b6cc:	4283      	cmp	r3, r0
 800b6ce:	d3f3      	bcc.n	800b6b8 <__mcmp+0x18>
 800b6d0:	e7fa      	b.n	800b6c8 <__mcmp+0x28>
 800b6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d6:	e7f7      	b.n	800b6c8 <__mcmp+0x28>

0800b6d8 <__mdiff>:
 800b6d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	460c      	mov	r4, r1
 800b6de:	4606      	mov	r6, r0
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	4690      	mov	r8, r2
 800b6e6:	f7ff ffdb 	bl	800b6a0 <__mcmp>
 800b6ea:	1e05      	subs	r5, r0, #0
 800b6ec:	d110      	bne.n	800b710 <__mdiff+0x38>
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f7ff fd09 	bl	800b108 <_Balloc>
 800b6f6:	b930      	cbnz	r0, 800b706 <__mdiff+0x2e>
 800b6f8:	4b3a      	ldr	r3, [pc, #232]	; (800b7e4 <__mdiff+0x10c>)
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	f240 2132 	movw	r1, #562	; 0x232
 800b700:	4839      	ldr	r0, [pc, #228]	; (800b7e8 <__mdiff+0x110>)
 800b702:	f001 f86d 	bl	800c7e0 <__assert_func>
 800b706:	2301      	movs	r3, #1
 800b708:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b70c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b710:	bfa4      	itt	ge
 800b712:	4643      	movge	r3, r8
 800b714:	46a0      	movge	r8, r4
 800b716:	4630      	mov	r0, r6
 800b718:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b71c:	bfa6      	itte	ge
 800b71e:	461c      	movge	r4, r3
 800b720:	2500      	movge	r5, #0
 800b722:	2501      	movlt	r5, #1
 800b724:	f7ff fcf0 	bl	800b108 <_Balloc>
 800b728:	b920      	cbnz	r0, 800b734 <__mdiff+0x5c>
 800b72a:	4b2e      	ldr	r3, [pc, #184]	; (800b7e4 <__mdiff+0x10c>)
 800b72c:	4602      	mov	r2, r0
 800b72e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b732:	e7e5      	b.n	800b700 <__mdiff+0x28>
 800b734:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b738:	6926      	ldr	r6, [r4, #16]
 800b73a:	60c5      	str	r5, [r0, #12]
 800b73c:	f104 0914 	add.w	r9, r4, #20
 800b740:	f108 0514 	add.w	r5, r8, #20
 800b744:	f100 0e14 	add.w	lr, r0, #20
 800b748:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b74c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b750:	f108 0210 	add.w	r2, r8, #16
 800b754:	46f2      	mov	sl, lr
 800b756:	2100      	movs	r1, #0
 800b758:	f859 3b04 	ldr.w	r3, [r9], #4
 800b75c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b760:	fa1f f883 	uxth.w	r8, r3
 800b764:	fa11 f18b 	uxtah	r1, r1, fp
 800b768:	0c1b      	lsrs	r3, r3, #16
 800b76a:	eba1 0808 	sub.w	r8, r1, r8
 800b76e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b772:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b776:	fa1f f888 	uxth.w	r8, r8
 800b77a:	1419      	asrs	r1, r3, #16
 800b77c:	454e      	cmp	r6, r9
 800b77e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b782:	f84a 3b04 	str.w	r3, [sl], #4
 800b786:	d8e7      	bhi.n	800b758 <__mdiff+0x80>
 800b788:	1b33      	subs	r3, r6, r4
 800b78a:	3b15      	subs	r3, #21
 800b78c:	f023 0303 	bic.w	r3, r3, #3
 800b790:	3304      	adds	r3, #4
 800b792:	3415      	adds	r4, #21
 800b794:	42a6      	cmp	r6, r4
 800b796:	bf38      	it	cc
 800b798:	2304      	movcc	r3, #4
 800b79a:	441d      	add	r5, r3
 800b79c:	4473      	add	r3, lr
 800b79e:	469e      	mov	lr, r3
 800b7a0:	462e      	mov	r6, r5
 800b7a2:	4566      	cmp	r6, ip
 800b7a4:	d30e      	bcc.n	800b7c4 <__mdiff+0xec>
 800b7a6:	f10c 0203 	add.w	r2, ip, #3
 800b7aa:	1b52      	subs	r2, r2, r5
 800b7ac:	f022 0203 	bic.w	r2, r2, #3
 800b7b0:	3d03      	subs	r5, #3
 800b7b2:	45ac      	cmp	ip, r5
 800b7b4:	bf38      	it	cc
 800b7b6:	2200      	movcc	r2, #0
 800b7b8:	441a      	add	r2, r3
 800b7ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b7be:	b17b      	cbz	r3, 800b7e0 <__mdiff+0x108>
 800b7c0:	6107      	str	r7, [r0, #16]
 800b7c2:	e7a3      	b.n	800b70c <__mdiff+0x34>
 800b7c4:	f856 8b04 	ldr.w	r8, [r6], #4
 800b7c8:	fa11 f288 	uxtah	r2, r1, r8
 800b7cc:	1414      	asrs	r4, r2, #16
 800b7ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b7d2:	b292      	uxth	r2, r2
 800b7d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b7d8:	f84e 2b04 	str.w	r2, [lr], #4
 800b7dc:	1421      	asrs	r1, r4, #16
 800b7de:	e7e0      	b.n	800b7a2 <__mdiff+0xca>
 800b7e0:	3f01      	subs	r7, #1
 800b7e2:	e7ea      	b.n	800b7ba <__mdiff+0xe2>
 800b7e4:	08010160 	.word	0x08010160
 800b7e8:	080101ec 	.word	0x080101ec

0800b7ec <__ulp>:
 800b7ec:	b082      	sub	sp, #8
 800b7ee:	ed8d 0b00 	vstr	d0, [sp]
 800b7f2:	9b01      	ldr	r3, [sp, #4]
 800b7f4:	4912      	ldr	r1, [pc, #72]	; (800b840 <__ulp+0x54>)
 800b7f6:	4019      	ands	r1, r3
 800b7f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b7fc:	2900      	cmp	r1, #0
 800b7fe:	dd05      	ble.n	800b80c <__ulp+0x20>
 800b800:	2200      	movs	r2, #0
 800b802:	460b      	mov	r3, r1
 800b804:	ec43 2b10 	vmov	d0, r2, r3
 800b808:	b002      	add	sp, #8
 800b80a:	4770      	bx	lr
 800b80c:	4249      	negs	r1, r1
 800b80e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b812:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b816:	f04f 0200 	mov.w	r2, #0
 800b81a:	f04f 0300 	mov.w	r3, #0
 800b81e:	da04      	bge.n	800b82a <__ulp+0x3e>
 800b820:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b824:	fa41 f300 	asr.w	r3, r1, r0
 800b828:	e7ec      	b.n	800b804 <__ulp+0x18>
 800b82a:	f1a0 0114 	sub.w	r1, r0, #20
 800b82e:	291e      	cmp	r1, #30
 800b830:	bfda      	itte	le
 800b832:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b836:	fa20 f101 	lsrle.w	r1, r0, r1
 800b83a:	2101      	movgt	r1, #1
 800b83c:	460a      	mov	r2, r1
 800b83e:	e7e1      	b.n	800b804 <__ulp+0x18>
 800b840:	7ff00000 	.word	0x7ff00000

0800b844 <__b2d>:
 800b844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b846:	6905      	ldr	r5, [r0, #16]
 800b848:	f100 0714 	add.w	r7, r0, #20
 800b84c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b850:	1f2e      	subs	r6, r5, #4
 800b852:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b856:	4620      	mov	r0, r4
 800b858:	f7ff fd48 	bl	800b2ec <__hi0bits>
 800b85c:	f1c0 0320 	rsb	r3, r0, #32
 800b860:	280a      	cmp	r0, #10
 800b862:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b8e0 <__b2d+0x9c>
 800b866:	600b      	str	r3, [r1, #0]
 800b868:	dc14      	bgt.n	800b894 <__b2d+0x50>
 800b86a:	f1c0 0e0b 	rsb	lr, r0, #11
 800b86e:	fa24 f10e 	lsr.w	r1, r4, lr
 800b872:	42b7      	cmp	r7, r6
 800b874:	ea41 030c 	orr.w	r3, r1, ip
 800b878:	bf34      	ite	cc
 800b87a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b87e:	2100      	movcs	r1, #0
 800b880:	3015      	adds	r0, #21
 800b882:	fa04 f000 	lsl.w	r0, r4, r0
 800b886:	fa21 f10e 	lsr.w	r1, r1, lr
 800b88a:	ea40 0201 	orr.w	r2, r0, r1
 800b88e:	ec43 2b10 	vmov	d0, r2, r3
 800b892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b894:	42b7      	cmp	r7, r6
 800b896:	bf3a      	itte	cc
 800b898:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b89c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b8a0:	2100      	movcs	r1, #0
 800b8a2:	380b      	subs	r0, #11
 800b8a4:	d017      	beq.n	800b8d6 <__b2d+0x92>
 800b8a6:	f1c0 0c20 	rsb	ip, r0, #32
 800b8aa:	fa04 f500 	lsl.w	r5, r4, r0
 800b8ae:	42be      	cmp	r6, r7
 800b8b0:	fa21 f40c 	lsr.w	r4, r1, ip
 800b8b4:	ea45 0504 	orr.w	r5, r5, r4
 800b8b8:	bf8c      	ite	hi
 800b8ba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b8be:	2400      	movls	r4, #0
 800b8c0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b8c4:	fa01 f000 	lsl.w	r0, r1, r0
 800b8c8:	fa24 f40c 	lsr.w	r4, r4, ip
 800b8cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b8d0:	ea40 0204 	orr.w	r2, r0, r4
 800b8d4:	e7db      	b.n	800b88e <__b2d+0x4a>
 800b8d6:	ea44 030c 	orr.w	r3, r4, ip
 800b8da:	460a      	mov	r2, r1
 800b8dc:	e7d7      	b.n	800b88e <__b2d+0x4a>
 800b8de:	bf00      	nop
 800b8e0:	3ff00000 	.word	0x3ff00000

0800b8e4 <__d2b>:
 800b8e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8e8:	4689      	mov	r9, r1
 800b8ea:	2101      	movs	r1, #1
 800b8ec:	ec57 6b10 	vmov	r6, r7, d0
 800b8f0:	4690      	mov	r8, r2
 800b8f2:	f7ff fc09 	bl	800b108 <_Balloc>
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	b930      	cbnz	r0, 800b908 <__d2b+0x24>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	4b25      	ldr	r3, [pc, #148]	; (800b994 <__d2b+0xb0>)
 800b8fe:	4826      	ldr	r0, [pc, #152]	; (800b998 <__d2b+0xb4>)
 800b900:	f240 310a 	movw	r1, #778	; 0x30a
 800b904:	f000 ff6c 	bl	800c7e0 <__assert_func>
 800b908:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b90c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b910:	bb35      	cbnz	r5, 800b960 <__d2b+0x7c>
 800b912:	2e00      	cmp	r6, #0
 800b914:	9301      	str	r3, [sp, #4]
 800b916:	d028      	beq.n	800b96a <__d2b+0x86>
 800b918:	4668      	mov	r0, sp
 800b91a:	9600      	str	r6, [sp, #0]
 800b91c:	f7ff fd06 	bl	800b32c <__lo0bits>
 800b920:	9900      	ldr	r1, [sp, #0]
 800b922:	b300      	cbz	r0, 800b966 <__d2b+0x82>
 800b924:	9a01      	ldr	r2, [sp, #4]
 800b926:	f1c0 0320 	rsb	r3, r0, #32
 800b92a:	fa02 f303 	lsl.w	r3, r2, r3
 800b92e:	430b      	orrs	r3, r1
 800b930:	40c2      	lsrs	r2, r0
 800b932:	6163      	str	r3, [r4, #20]
 800b934:	9201      	str	r2, [sp, #4]
 800b936:	9b01      	ldr	r3, [sp, #4]
 800b938:	61a3      	str	r3, [r4, #24]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	bf14      	ite	ne
 800b93e:	2202      	movne	r2, #2
 800b940:	2201      	moveq	r2, #1
 800b942:	6122      	str	r2, [r4, #16]
 800b944:	b1d5      	cbz	r5, 800b97c <__d2b+0x98>
 800b946:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b94a:	4405      	add	r5, r0
 800b94c:	f8c9 5000 	str.w	r5, [r9]
 800b950:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b954:	f8c8 0000 	str.w	r0, [r8]
 800b958:	4620      	mov	r0, r4
 800b95a:	b003      	add	sp, #12
 800b95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b964:	e7d5      	b.n	800b912 <__d2b+0x2e>
 800b966:	6161      	str	r1, [r4, #20]
 800b968:	e7e5      	b.n	800b936 <__d2b+0x52>
 800b96a:	a801      	add	r0, sp, #4
 800b96c:	f7ff fcde 	bl	800b32c <__lo0bits>
 800b970:	9b01      	ldr	r3, [sp, #4]
 800b972:	6163      	str	r3, [r4, #20]
 800b974:	2201      	movs	r2, #1
 800b976:	6122      	str	r2, [r4, #16]
 800b978:	3020      	adds	r0, #32
 800b97a:	e7e3      	b.n	800b944 <__d2b+0x60>
 800b97c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b980:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b984:	f8c9 0000 	str.w	r0, [r9]
 800b988:	6918      	ldr	r0, [r3, #16]
 800b98a:	f7ff fcaf 	bl	800b2ec <__hi0bits>
 800b98e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b992:	e7df      	b.n	800b954 <__d2b+0x70>
 800b994:	08010160 	.word	0x08010160
 800b998:	080101ec 	.word	0x080101ec

0800b99c <__ratio>:
 800b99c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a0:	4688      	mov	r8, r1
 800b9a2:	4669      	mov	r1, sp
 800b9a4:	4681      	mov	r9, r0
 800b9a6:	f7ff ff4d 	bl	800b844 <__b2d>
 800b9aa:	a901      	add	r1, sp, #4
 800b9ac:	4640      	mov	r0, r8
 800b9ae:	ec55 4b10 	vmov	r4, r5, d0
 800b9b2:	f7ff ff47 	bl	800b844 <__b2d>
 800b9b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9ba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b9be:	eba3 0c02 	sub.w	ip, r3, r2
 800b9c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b9c6:	1a9b      	subs	r3, r3, r2
 800b9c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b9cc:	ec51 0b10 	vmov	r0, r1, d0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	bfd6      	itet	le
 800b9d4:	460a      	movle	r2, r1
 800b9d6:	462a      	movgt	r2, r5
 800b9d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b9dc:	468b      	mov	fp, r1
 800b9de:	462f      	mov	r7, r5
 800b9e0:	bfd4      	ite	le
 800b9e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b9e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	ee10 2a10 	vmov	r2, s0
 800b9f0:	465b      	mov	r3, fp
 800b9f2:	4639      	mov	r1, r7
 800b9f4:	f7f4 ff42 	bl	800087c <__aeabi_ddiv>
 800b9f8:	ec41 0b10 	vmov	d0, r0, r1
 800b9fc:	b003      	add	sp, #12
 800b9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba02 <__copybits>:
 800ba02:	3901      	subs	r1, #1
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	1149      	asrs	r1, r1, #5
 800ba08:	6914      	ldr	r4, [r2, #16]
 800ba0a:	3101      	adds	r1, #1
 800ba0c:	f102 0314 	add.w	r3, r2, #20
 800ba10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba18:	1f05      	subs	r5, r0, #4
 800ba1a:	42a3      	cmp	r3, r4
 800ba1c:	d30c      	bcc.n	800ba38 <__copybits+0x36>
 800ba1e:	1aa3      	subs	r3, r4, r2
 800ba20:	3b11      	subs	r3, #17
 800ba22:	f023 0303 	bic.w	r3, r3, #3
 800ba26:	3211      	adds	r2, #17
 800ba28:	42a2      	cmp	r2, r4
 800ba2a:	bf88      	it	hi
 800ba2c:	2300      	movhi	r3, #0
 800ba2e:	4418      	add	r0, r3
 800ba30:	2300      	movs	r3, #0
 800ba32:	4288      	cmp	r0, r1
 800ba34:	d305      	bcc.n	800ba42 <__copybits+0x40>
 800ba36:	bd70      	pop	{r4, r5, r6, pc}
 800ba38:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba3c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba40:	e7eb      	b.n	800ba1a <__copybits+0x18>
 800ba42:	f840 3b04 	str.w	r3, [r0], #4
 800ba46:	e7f4      	b.n	800ba32 <__copybits+0x30>

0800ba48 <__any_on>:
 800ba48:	f100 0214 	add.w	r2, r0, #20
 800ba4c:	6900      	ldr	r0, [r0, #16]
 800ba4e:	114b      	asrs	r3, r1, #5
 800ba50:	4298      	cmp	r0, r3
 800ba52:	b510      	push	{r4, lr}
 800ba54:	db11      	blt.n	800ba7a <__any_on+0x32>
 800ba56:	dd0a      	ble.n	800ba6e <__any_on+0x26>
 800ba58:	f011 011f 	ands.w	r1, r1, #31
 800ba5c:	d007      	beq.n	800ba6e <__any_on+0x26>
 800ba5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba62:	fa24 f001 	lsr.w	r0, r4, r1
 800ba66:	fa00 f101 	lsl.w	r1, r0, r1
 800ba6a:	428c      	cmp	r4, r1
 800ba6c:	d10b      	bne.n	800ba86 <__any_on+0x3e>
 800ba6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d803      	bhi.n	800ba7e <__any_on+0x36>
 800ba76:	2000      	movs	r0, #0
 800ba78:	bd10      	pop	{r4, pc}
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	e7f7      	b.n	800ba6e <__any_on+0x26>
 800ba7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba82:	2900      	cmp	r1, #0
 800ba84:	d0f5      	beq.n	800ba72 <__any_on+0x2a>
 800ba86:	2001      	movs	r0, #1
 800ba88:	e7f6      	b.n	800ba78 <__any_on+0x30>

0800ba8a <_calloc_r>:
 800ba8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba8c:	fba1 2402 	umull	r2, r4, r1, r2
 800ba90:	b94c      	cbnz	r4, 800baa6 <_calloc_r+0x1c>
 800ba92:	4611      	mov	r1, r2
 800ba94:	9201      	str	r2, [sp, #4]
 800ba96:	f000 f87b 	bl	800bb90 <_malloc_r>
 800ba9a:	9a01      	ldr	r2, [sp, #4]
 800ba9c:	4605      	mov	r5, r0
 800ba9e:	b930      	cbnz	r0, 800baae <_calloc_r+0x24>
 800baa0:	4628      	mov	r0, r5
 800baa2:	b003      	add	sp, #12
 800baa4:	bd30      	pop	{r4, r5, pc}
 800baa6:	220c      	movs	r2, #12
 800baa8:	6002      	str	r2, [r0, #0]
 800baaa:	2500      	movs	r5, #0
 800baac:	e7f8      	b.n	800baa0 <_calloc_r+0x16>
 800baae:	4621      	mov	r1, r4
 800bab0:	f7fc fb04 	bl	80080bc <memset>
 800bab4:	e7f4      	b.n	800baa0 <_calloc_r+0x16>
	...

0800bab8 <_free_r>:
 800bab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800baba:	2900      	cmp	r1, #0
 800babc:	d044      	beq.n	800bb48 <_free_r+0x90>
 800babe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bac2:	9001      	str	r0, [sp, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f1a1 0404 	sub.w	r4, r1, #4
 800baca:	bfb8      	it	lt
 800bacc:	18e4      	addlt	r4, r4, r3
 800bace:	f001 f88b 	bl	800cbe8 <__malloc_lock>
 800bad2:	4a1e      	ldr	r2, [pc, #120]	; (800bb4c <_free_r+0x94>)
 800bad4:	9801      	ldr	r0, [sp, #4]
 800bad6:	6813      	ldr	r3, [r2, #0]
 800bad8:	b933      	cbnz	r3, 800bae8 <_free_r+0x30>
 800bada:	6063      	str	r3, [r4, #4]
 800badc:	6014      	str	r4, [r2, #0]
 800bade:	b003      	add	sp, #12
 800bae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bae4:	f001 b886 	b.w	800cbf4 <__malloc_unlock>
 800bae8:	42a3      	cmp	r3, r4
 800baea:	d908      	bls.n	800bafe <_free_r+0x46>
 800baec:	6825      	ldr	r5, [r4, #0]
 800baee:	1961      	adds	r1, r4, r5
 800baf0:	428b      	cmp	r3, r1
 800baf2:	bf01      	itttt	eq
 800baf4:	6819      	ldreq	r1, [r3, #0]
 800baf6:	685b      	ldreq	r3, [r3, #4]
 800baf8:	1949      	addeq	r1, r1, r5
 800bafa:	6021      	streq	r1, [r4, #0]
 800bafc:	e7ed      	b.n	800bada <_free_r+0x22>
 800bafe:	461a      	mov	r2, r3
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	b10b      	cbz	r3, 800bb08 <_free_r+0x50>
 800bb04:	42a3      	cmp	r3, r4
 800bb06:	d9fa      	bls.n	800bafe <_free_r+0x46>
 800bb08:	6811      	ldr	r1, [r2, #0]
 800bb0a:	1855      	adds	r5, r2, r1
 800bb0c:	42a5      	cmp	r5, r4
 800bb0e:	d10b      	bne.n	800bb28 <_free_r+0x70>
 800bb10:	6824      	ldr	r4, [r4, #0]
 800bb12:	4421      	add	r1, r4
 800bb14:	1854      	adds	r4, r2, r1
 800bb16:	42a3      	cmp	r3, r4
 800bb18:	6011      	str	r1, [r2, #0]
 800bb1a:	d1e0      	bne.n	800bade <_free_r+0x26>
 800bb1c:	681c      	ldr	r4, [r3, #0]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	6053      	str	r3, [r2, #4]
 800bb22:	4421      	add	r1, r4
 800bb24:	6011      	str	r1, [r2, #0]
 800bb26:	e7da      	b.n	800bade <_free_r+0x26>
 800bb28:	d902      	bls.n	800bb30 <_free_r+0x78>
 800bb2a:	230c      	movs	r3, #12
 800bb2c:	6003      	str	r3, [r0, #0]
 800bb2e:	e7d6      	b.n	800bade <_free_r+0x26>
 800bb30:	6825      	ldr	r5, [r4, #0]
 800bb32:	1961      	adds	r1, r4, r5
 800bb34:	428b      	cmp	r3, r1
 800bb36:	bf04      	itt	eq
 800bb38:	6819      	ldreq	r1, [r3, #0]
 800bb3a:	685b      	ldreq	r3, [r3, #4]
 800bb3c:	6063      	str	r3, [r4, #4]
 800bb3e:	bf04      	itt	eq
 800bb40:	1949      	addeq	r1, r1, r5
 800bb42:	6021      	streq	r1, [r4, #0]
 800bb44:	6054      	str	r4, [r2, #4]
 800bb46:	e7ca      	b.n	800bade <_free_r+0x26>
 800bb48:	b003      	add	sp, #12
 800bb4a:	bd30      	pop	{r4, r5, pc}
 800bb4c:	20009d00 	.word	0x20009d00

0800bb50 <sbrk_aligned>:
 800bb50:	b570      	push	{r4, r5, r6, lr}
 800bb52:	4e0e      	ldr	r6, [pc, #56]	; (800bb8c <sbrk_aligned+0x3c>)
 800bb54:	460c      	mov	r4, r1
 800bb56:	6831      	ldr	r1, [r6, #0]
 800bb58:	4605      	mov	r5, r0
 800bb5a:	b911      	cbnz	r1, 800bb62 <sbrk_aligned+0x12>
 800bb5c:	f000 fd28 	bl	800c5b0 <_sbrk_r>
 800bb60:	6030      	str	r0, [r6, #0]
 800bb62:	4621      	mov	r1, r4
 800bb64:	4628      	mov	r0, r5
 800bb66:	f000 fd23 	bl	800c5b0 <_sbrk_r>
 800bb6a:	1c43      	adds	r3, r0, #1
 800bb6c:	d00a      	beq.n	800bb84 <sbrk_aligned+0x34>
 800bb6e:	1cc4      	adds	r4, r0, #3
 800bb70:	f024 0403 	bic.w	r4, r4, #3
 800bb74:	42a0      	cmp	r0, r4
 800bb76:	d007      	beq.n	800bb88 <sbrk_aligned+0x38>
 800bb78:	1a21      	subs	r1, r4, r0
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	f000 fd18 	bl	800c5b0 <_sbrk_r>
 800bb80:	3001      	adds	r0, #1
 800bb82:	d101      	bne.n	800bb88 <sbrk_aligned+0x38>
 800bb84:	f04f 34ff 	mov.w	r4, #4294967295
 800bb88:	4620      	mov	r0, r4
 800bb8a:	bd70      	pop	{r4, r5, r6, pc}
 800bb8c:	20009d04 	.word	0x20009d04

0800bb90 <_malloc_r>:
 800bb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb94:	1ccd      	adds	r5, r1, #3
 800bb96:	f025 0503 	bic.w	r5, r5, #3
 800bb9a:	3508      	adds	r5, #8
 800bb9c:	2d0c      	cmp	r5, #12
 800bb9e:	bf38      	it	cc
 800bba0:	250c      	movcc	r5, #12
 800bba2:	2d00      	cmp	r5, #0
 800bba4:	4607      	mov	r7, r0
 800bba6:	db01      	blt.n	800bbac <_malloc_r+0x1c>
 800bba8:	42a9      	cmp	r1, r5
 800bbaa:	d905      	bls.n	800bbb8 <_malloc_r+0x28>
 800bbac:	230c      	movs	r3, #12
 800bbae:	603b      	str	r3, [r7, #0]
 800bbb0:	2600      	movs	r6, #0
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbb8:	4e2e      	ldr	r6, [pc, #184]	; (800bc74 <_malloc_r+0xe4>)
 800bbba:	f001 f815 	bl	800cbe8 <__malloc_lock>
 800bbbe:	6833      	ldr	r3, [r6, #0]
 800bbc0:	461c      	mov	r4, r3
 800bbc2:	bb34      	cbnz	r4, 800bc12 <_malloc_r+0x82>
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	4638      	mov	r0, r7
 800bbc8:	f7ff ffc2 	bl	800bb50 <sbrk_aligned>
 800bbcc:	1c43      	adds	r3, r0, #1
 800bbce:	4604      	mov	r4, r0
 800bbd0:	d14d      	bne.n	800bc6e <_malloc_r+0xde>
 800bbd2:	6834      	ldr	r4, [r6, #0]
 800bbd4:	4626      	mov	r6, r4
 800bbd6:	2e00      	cmp	r6, #0
 800bbd8:	d140      	bne.n	800bc5c <_malloc_r+0xcc>
 800bbda:	6823      	ldr	r3, [r4, #0]
 800bbdc:	4631      	mov	r1, r6
 800bbde:	4638      	mov	r0, r7
 800bbe0:	eb04 0803 	add.w	r8, r4, r3
 800bbe4:	f000 fce4 	bl	800c5b0 <_sbrk_r>
 800bbe8:	4580      	cmp	r8, r0
 800bbea:	d13a      	bne.n	800bc62 <_malloc_r+0xd2>
 800bbec:	6821      	ldr	r1, [r4, #0]
 800bbee:	3503      	adds	r5, #3
 800bbf0:	1a6d      	subs	r5, r5, r1
 800bbf2:	f025 0503 	bic.w	r5, r5, #3
 800bbf6:	3508      	adds	r5, #8
 800bbf8:	2d0c      	cmp	r5, #12
 800bbfa:	bf38      	it	cc
 800bbfc:	250c      	movcc	r5, #12
 800bbfe:	4629      	mov	r1, r5
 800bc00:	4638      	mov	r0, r7
 800bc02:	f7ff ffa5 	bl	800bb50 <sbrk_aligned>
 800bc06:	3001      	adds	r0, #1
 800bc08:	d02b      	beq.n	800bc62 <_malloc_r+0xd2>
 800bc0a:	6823      	ldr	r3, [r4, #0]
 800bc0c:	442b      	add	r3, r5
 800bc0e:	6023      	str	r3, [r4, #0]
 800bc10:	e00e      	b.n	800bc30 <_malloc_r+0xa0>
 800bc12:	6822      	ldr	r2, [r4, #0]
 800bc14:	1b52      	subs	r2, r2, r5
 800bc16:	d41e      	bmi.n	800bc56 <_malloc_r+0xc6>
 800bc18:	2a0b      	cmp	r2, #11
 800bc1a:	d916      	bls.n	800bc4a <_malloc_r+0xba>
 800bc1c:	1961      	adds	r1, r4, r5
 800bc1e:	42a3      	cmp	r3, r4
 800bc20:	6025      	str	r5, [r4, #0]
 800bc22:	bf18      	it	ne
 800bc24:	6059      	strne	r1, [r3, #4]
 800bc26:	6863      	ldr	r3, [r4, #4]
 800bc28:	bf08      	it	eq
 800bc2a:	6031      	streq	r1, [r6, #0]
 800bc2c:	5162      	str	r2, [r4, r5]
 800bc2e:	604b      	str	r3, [r1, #4]
 800bc30:	4638      	mov	r0, r7
 800bc32:	f104 060b 	add.w	r6, r4, #11
 800bc36:	f000 ffdd 	bl	800cbf4 <__malloc_unlock>
 800bc3a:	f026 0607 	bic.w	r6, r6, #7
 800bc3e:	1d23      	adds	r3, r4, #4
 800bc40:	1af2      	subs	r2, r6, r3
 800bc42:	d0b6      	beq.n	800bbb2 <_malloc_r+0x22>
 800bc44:	1b9b      	subs	r3, r3, r6
 800bc46:	50a3      	str	r3, [r4, r2]
 800bc48:	e7b3      	b.n	800bbb2 <_malloc_r+0x22>
 800bc4a:	6862      	ldr	r2, [r4, #4]
 800bc4c:	42a3      	cmp	r3, r4
 800bc4e:	bf0c      	ite	eq
 800bc50:	6032      	streq	r2, [r6, #0]
 800bc52:	605a      	strne	r2, [r3, #4]
 800bc54:	e7ec      	b.n	800bc30 <_malloc_r+0xa0>
 800bc56:	4623      	mov	r3, r4
 800bc58:	6864      	ldr	r4, [r4, #4]
 800bc5a:	e7b2      	b.n	800bbc2 <_malloc_r+0x32>
 800bc5c:	4634      	mov	r4, r6
 800bc5e:	6876      	ldr	r6, [r6, #4]
 800bc60:	e7b9      	b.n	800bbd6 <_malloc_r+0x46>
 800bc62:	230c      	movs	r3, #12
 800bc64:	603b      	str	r3, [r7, #0]
 800bc66:	4638      	mov	r0, r7
 800bc68:	f000 ffc4 	bl	800cbf4 <__malloc_unlock>
 800bc6c:	e7a1      	b.n	800bbb2 <_malloc_r+0x22>
 800bc6e:	6025      	str	r5, [r4, #0]
 800bc70:	e7de      	b.n	800bc30 <_malloc_r+0xa0>
 800bc72:	bf00      	nop
 800bc74:	20009d00 	.word	0x20009d00

0800bc78 <__ssputs_r>:
 800bc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc7c:	688e      	ldr	r6, [r1, #8]
 800bc7e:	429e      	cmp	r6, r3
 800bc80:	4682      	mov	sl, r0
 800bc82:	460c      	mov	r4, r1
 800bc84:	4690      	mov	r8, r2
 800bc86:	461f      	mov	r7, r3
 800bc88:	d838      	bhi.n	800bcfc <__ssputs_r+0x84>
 800bc8a:	898a      	ldrh	r2, [r1, #12]
 800bc8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc90:	d032      	beq.n	800bcf8 <__ssputs_r+0x80>
 800bc92:	6825      	ldr	r5, [r4, #0]
 800bc94:	6909      	ldr	r1, [r1, #16]
 800bc96:	eba5 0901 	sub.w	r9, r5, r1
 800bc9a:	6965      	ldr	r5, [r4, #20]
 800bc9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bca4:	3301      	adds	r3, #1
 800bca6:	444b      	add	r3, r9
 800bca8:	106d      	asrs	r5, r5, #1
 800bcaa:	429d      	cmp	r5, r3
 800bcac:	bf38      	it	cc
 800bcae:	461d      	movcc	r5, r3
 800bcb0:	0553      	lsls	r3, r2, #21
 800bcb2:	d531      	bpl.n	800bd18 <__ssputs_r+0xa0>
 800bcb4:	4629      	mov	r1, r5
 800bcb6:	f7ff ff6b 	bl	800bb90 <_malloc_r>
 800bcba:	4606      	mov	r6, r0
 800bcbc:	b950      	cbnz	r0, 800bcd4 <__ssputs_r+0x5c>
 800bcbe:	230c      	movs	r3, #12
 800bcc0:	f8ca 3000 	str.w	r3, [sl]
 800bcc4:	89a3      	ldrh	r3, [r4, #12]
 800bcc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcca:	81a3      	strh	r3, [r4, #12]
 800bccc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd4:	6921      	ldr	r1, [r4, #16]
 800bcd6:	464a      	mov	r2, r9
 800bcd8:	f7ff fa08 	bl	800b0ec <memcpy>
 800bcdc:	89a3      	ldrh	r3, [r4, #12]
 800bcde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bce6:	81a3      	strh	r3, [r4, #12]
 800bce8:	6126      	str	r6, [r4, #16]
 800bcea:	6165      	str	r5, [r4, #20]
 800bcec:	444e      	add	r6, r9
 800bcee:	eba5 0509 	sub.w	r5, r5, r9
 800bcf2:	6026      	str	r6, [r4, #0]
 800bcf4:	60a5      	str	r5, [r4, #8]
 800bcf6:	463e      	mov	r6, r7
 800bcf8:	42be      	cmp	r6, r7
 800bcfa:	d900      	bls.n	800bcfe <__ssputs_r+0x86>
 800bcfc:	463e      	mov	r6, r7
 800bcfe:	6820      	ldr	r0, [r4, #0]
 800bd00:	4632      	mov	r2, r6
 800bd02:	4641      	mov	r1, r8
 800bd04:	f000 ff56 	bl	800cbb4 <memmove>
 800bd08:	68a3      	ldr	r3, [r4, #8]
 800bd0a:	1b9b      	subs	r3, r3, r6
 800bd0c:	60a3      	str	r3, [r4, #8]
 800bd0e:	6823      	ldr	r3, [r4, #0]
 800bd10:	4433      	add	r3, r6
 800bd12:	6023      	str	r3, [r4, #0]
 800bd14:	2000      	movs	r0, #0
 800bd16:	e7db      	b.n	800bcd0 <__ssputs_r+0x58>
 800bd18:	462a      	mov	r2, r5
 800bd1a:	f000 ff71 	bl	800cc00 <_realloc_r>
 800bd1e:	4606      	mov	r6, r0
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d1e1      	bne.n	800bce8 <__ssputs_r+0x70>
 800bd24:	6921      	ldr	r1, [r4, #16]
 800bd26:	4650      	mov	r0, sl
 800bd28:	f7ff fec6 	bl	800bab8 <_free_r>
 800bd2c:	e7c7      	b.n	800bcbe <__ssputs_r+0x46>
	...

0800bd30 <_svfiprintf_r>:
 800bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd34:	4698      	mov	r8, r3
 800bd36:	898b      	ldrh	r3, [r1, #12]
 800bd38:	061b      	lsls	r3, r3, #24
 800bd3a:	b09d      	sub	sp, #116	; 0x74
 800bd3c:	4607      	mov	r7, r0
 800bd3e:	460d      	mov	r5, r1
 800bd40:	4614      	mov	r4, r2
 800bd42:	d50e      	bpl.n	800bd62 <_svfiprintf_r+0x32>
 800bd44:	690b      	ldr	r3, [r1, #16]
 800bd46:	b963      	cbnz	r3, 800bd62 <_svfiprintf_r+0x32>
 800bd48:	2140      	movs	r1, #64	; 0x40
 800bd4a:	f7ff ff21 	bl	800bb90 <_malloc_r>
 800bd4e:	6028      	str	r0, [r5, #0]
 800bd50:	6128      	str	r0, [r5, #16]
 800bd52:	b920      	cbnz	r0, 800bd5e <_svfiprintf_r+0x2e>
 800bd54:	230c      	movs	r3, #12
 800bd56:	603b      	str	r3, [r7, #0]
 800bd58:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5c:	e0d1      	b.n	800bf02 <_svfiprintf_r+0x1d2>
 800bd5e:	2340      	movs	r3, #64	; 0x40
 800bd60:	616b      	str	r3, [r5, #20]
 800bd62:	2300      	movs	r3, #0
 800bd64:	9309      	str	r3, [sp, #36]	; 0x24
 800bd66:	2320      	movs	r3, #32
 800bd68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd70:	2330      	movs	r3, #48	; 0x30
 800bd72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bf1c <_svfiprintf_r+0x1ec>
 800bd76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd7a:	f04f 0901 	mov.w	r9, #1
 800bd7e:	4623      	mov	r3, r4
 800bd80:	469a      	mov	sl, r3
 800bd82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd86:	b10a      	cbz	r2, 800bd8c <_svfiprintf_r+0x5c>
 800bd88:	2a25      	cmp	r2, #37	; 0x25
 800bd8a:	d1f9      	bne.n	800bd80 <_svfiprintf_r+0x50>
 800bd8c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd90:	d00b      	beq.n	800bdaa <_svfiprintf_r+0x7a>
 800bd92:	465b      	mov	r3, fp
 800bd94:	4622      	mov	r2, r4
 800bd96:	4629      	mov	r1, r5
 800bd98:	4638      	mov	r0, r7
 800bd9a:	f7ff ff6d 	bl	800bc78 <__ssputs_r>
 800bd9e:	3001      	adds	r0, #1
 800bda0:	f000 80aa 	beq.w	800bef8 <_svfiprintf_r+0x1c8>
 800bda4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bda6:	445a      	add	r2, fp
 800bda8:	9209      	str	r2, [sp, #36]	; 0x24
 800bdaa:	f89a 3000 	ldrb.w	r3, [sl]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f000 80a2 	beq.w	800bef8 <_svfiprintf_r+0x1c8>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdbe:	f10a 0a01 	add.w	sl, sl, #1
 800bdc2:	9304      	str	r3, [sp, #16]
 800bdc4:	9307      	str	r3, [sp, #28]
 800bdc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdca:	931a      	str	r3, [sp, #104]	; 0x68
 800bdcc:	4654      	mov	r4, sl
 800bdce:	2205      	movs	r2, #5
 800bdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd4:	4851      	ldr	r0, [pc, #324]	; (800bf1c <_svfiprintf_r+0x1ec>)
 800bdd6:	f7f4 fa1b 	bl	8000210 <memchr>
 800bdda:	9a04      	ldr	r2, [sp, #16]
 800bddc:	b9d8      	cbnz	r0, 800be16 <_svfiprintf_r+0xe6>
 800bdde:	06d0      	lsls	r0, r2, #27
 800bde0:	bf44      	itt	mi
 800bde2:	2320      	movmi	r3, #32
 800bde4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bde8:	0711      	lsls	r1, r2, #28
 800bdea:	bf44      	itt	mi
 800bdec:	232b      	movmi	r3, #43	; 0x2b
 800bdee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdf2:	f89a 3000 	ldrb.w	r3, [sl]
 800bdf6:	2b2a      	cmp	r3, #42	; 0x2a
 800bdf8:	d015      	beq.n	800be26 <_svfiprintf_r+0xf6>
 800bdfa:	9a07      	ldr	r2, [sp, #28]
 800bdfc:	4654      	mov	r4, sl
 800bdfe:	2000      	movs	r0, #0
 800be00:	f04f 0c0a 	mov.w	ip, #10
 800be04:	4621      	mov	r1, r4
 800be06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be0a:	3b30      	subs	r3, #48	; 0x30
 800be0c:	2b09      	cmp	r3, #9
 800be0e:	d94e      	bls.n	800beae <_svfiprintf_r+0x17e>
 800be10:	b1b0      	cbz	r0, 800be40 <_svfiprintf_r+0x110>
 800be12:	9207      	str	r2, [sp, #28]
 800be14:	e014      	b.n	800be40 <_svfiprintf_r+0x110>
 800be16:	eba0 0308 	sub.w	r3, r0, r8
 800be1a:	fa09 f303 	lsl.w	r3, r9, r3
 800be1e:	4313      	orrs	r3, r2
 800be20:	9304      	str	r3, [sp, #16]
 800be22:	46a2      	mov	sl, r4
 800be24:	e7d2      	b.n	800bdcc <_svfiprintf_r+0x9c>
 800be26:	9b03      	ldr	r3, [sp, #12]
 800be28:	1d19      	adds	r1, r3, #4
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	9103      	str	r1, [sp, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	bfbb      	ittet	lt
 800be32:	425b      	neglt	r3, r3
 800be34:	f042 0202 	orrlt.w	r2, r2, #2
 800be38:	9307      	strge	r3, [sp, #28]
 800be3a:	9307      	strlt	r3, [sp, #28]
 800be3c:	bfb8      	it	lt
 800be3e:	9204      	strlt	r2, [sp, #16]
 800be40:	7823      	ldrb	r3, [r4, #0]
 800be42:	2b2e      	cmp	r3, #46	; 0x2e
 800be44:	d10c      	bne.n	800be60 <_svfiprintf_r+0x130>
 800be46:	7863      	ldrb	r3, [r4, #1]
 800be48:	2b2a      	cmp	r3, #42	; 0x2a
 800be4a:	d135      	bne.n	800beb8 <_svfiprintf_r+0x188>
 800be4c:	9b03      	ldr	r3, [sp, #12]
 800be4e:	1d1a      	adds	r2, r3, #4
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	9203      	str	r2, [sp, #12]
 800be54:	2b00      	cmp	r3, #0
 800be56:	bfb8      	it	lt
 800be58:	f04f 33ff 	movlt.w	r3, #4294967295
 800be5c:	3402      	adds	r4, #2
 800be5e:	9305      	str	r3, [sp, #20]
 800be60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bf2c <_svfiprintf_r+0x1fc>
 800be64:	7821      	ldrb	r1, [r4, #0]
 800be66:	2203      	movs	r2, #3
 800be68:	4650      	mov	r0, sl
 800be6a:	f7f4 f9d1 	bl	8000210 <memchr>
 800be6e:	b140      	cbz	r0, 800be82 <_svfiprintf_r+0x152>
 800be70:	2340      	movs	r3, #64	; 0x40
 800be72:	eba0 000a 	sub.w	r0, r0, sl
 800be76:	fa03 f000 	lsl.w	r0, r3, r0
 800be7a:	9b04      	ldr	r3, [sp, #16]
 800be7c:	4303      	orrs	r3, r0
 800be7e:	3401      	adds	r4, #1
 800be80:	9304      	str	r3, [sp, #16]
 800be82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be86:	4826      	ldr	r0, [pc, #152]	; (800bf20 <_svfiprintf_r+0x1f0>)
 800be88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be8c:	2206      	movs	r2, #6
 800be8e:	f7f4 f9bf 	bl	8000210 <memchr>
 800be92:	2800      	cmp	r0, #0
 800be94:	d038      	beq.n	800bf08 <_svfiprintf_r+0x1d8>
 800be96:	4b23      	ldr	r3, [pc, #140]	; (800bf24 <_svfiprintf_r+0x1f4>)
 800be98:	bb1b      	cbnz	r3, 800bee2 <_svfiprintf_r+0x1b2>
 800be9a:	9b03      	ldr	r3, [sp, #12]
 800be9c:	3307      	adds	r3, #7
 800be9e:	f023 0307 	bic.w	r3, r3, #7
 800bea2:	3308      	adds	r3, #8
 800bea4:	9303      	str	r3, [sp, #12]
 800bea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bea8:	4433      	add	r3, r6
 800beaa:	9309      	str	r3, [sp, #36]	; 0x24
 800beac:	e767      	b.n	800bd7e <_svfiprintf_r+0x4e>
 800beae:	fb0c 3202 	mla	r2, ip, r2, r3
 800beb2:	460c      	mov	r4, r1
 800beb4:	2001      	movs	r0, #1
 800beb6:	e7a5      	b.n	800be04 <_svfiprintf_r+0xd4>
 800beb8:	2300      	movs	r3, #0
 800beba:	3401      	adds	r4, #1
 800bebc:	9305      	str	r3, [sp, #20]
 800bebe:	4619      	mov	r1, r3
 800bec0:	f04f 0c0a 	mov.w	ip, #10
 800bec4:	4620      	mov	r0, r4
 800bec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beca:	3a30      	subs	r2, #48	; 0x30
 800becc:	2a09      	cmp	r2, #9
 800bece:	d903      	bls.n	800bed8 <_svfiprintf_r+0x1a8>
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d0c5      	beq.n	800be60 <_svfiprintf_r+0x130>
 800bed4:	9105      	str	r1, [sp, #20]
 800bed6:	e7c3      	b.n	800be60 <_svfiprintf_r+0x130>
 800bed8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bedc:	4604      	mov	r4, r0
 800bede:	2301      	movs	r3, #1
 800bee0:	e7f0      	b.n	800bec4 <_svfiprintf_r+0x194>
 800bee2:	ab03      	add	r3, sp, #12
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	462a      	mov	r2, r5
 800bee8:	4b0f      	ldr	r3, [pc, #60]	; (800bf28 <_svfiprintf_r+0x1f8>)
 800beea:	a904      	add	r1, sp, #16
 800beec:	4638      	mov	r0, r7
 800beee:	f7fc f98d 	bl	800820c <_printf_float>
 800bef2:	1c42      	adds	r2, r0, #1
 800bef4:	4606      	mov	r6, r0
 800bef6:	d1d6      	bne.n	800bea6 <_svfiprintf_r+0x176>
 800bef8:	89ab      	ldrh	r3, [r5, #12]
 800befa:	065b      	lsls	r3, r3, #25
 800befc:	f53f af2c 	bmi.w	800bd58 <_svfiprintf_r+0x28>
 800bf00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf02:	b01d      	add	sp, #116	; 0x74
 800bf04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf08:	ab03      	add	r3, sp, #12
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	462a      	mov	r2, r5
 800bf0e:	4b06      	ldr	r3, [pc, #24]	; (800bf28 <_svfiprintf_r+0x1f8>)
 800bf10:	a904      	add	r1, sp, #16
 800bf12:	4638      	mov	r0, r7
 800bf14:	f7fc fc1e 	bl	8008754 <_printf_i>
 800bf18:	e7eb      	b.n	800bef2 <_svfiprintf_r+0x1c2>
 800bf1a:	bf00      	nop
 800bf1c:	08010344 	.word	0x08010344
 800bf20:	0801034e 	.word	0x0801034e
 800bf24:	0800820d 	.word	0x0800820d
 800bf28:	0800bc79 	.word	0x0800bc79
 800bf2c:	0801034a 	.word	0x0801034a

0800bf30 <_sungetc_r>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	1c4b      	adds	r3, r1, #1
 800bf34:	4614      	mov	r4, r2
 800bf36:	d103      	bne.n	800bf40 <_sungetc_r+0x10>
 800bf38:	f04f 35ff 	mov.w	r5, #4294967295
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	bd38      	pop	{r3, r4, r5, pc}
 800bf40:	8993      	ldrh	r3, [r2, #12]
 800bf42:	f023 0320 	bic.w	r3, r3, #32
 800bf46:	8193      	strh	r3, [r2, #12]
 800bf48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf4a:	6852      	ldr	r2, [r2, #4]
 800bf4c:	b2cd      	uxtb	r5, r1
 800bf4e:	b18b      	cbz	r3, 800bf74 <_sungetc_r+0x44>
 800bf50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bf52:	4293      	cmp	r3, r2
 800bf54:	dd08      	ble.n	800bf68 <_sungetc_r+0x38>
 800bf56:	6823      	ldr	r3, [r4, #0]
 800bf58:	1e5a      	subs	r2, r3, #1
 800bf5a:	6022      	str	r2, [r4, #0]
 800bf5c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bf60:	6863      	ldr	r3, [r4, #4]
 800bf62:	3301      	adds	r3, #1
 800bf64:	6063      	str	r3, [r4, #4]
 800bf66:	e7e9      	b.n	800bf3c <_sungetc_r+0xc>
 800bf68:	4621      	mov	r1, r4
 800bf6a:	f000 fbf1 	bl	800c750 <__submore>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	d0f1      	beq.n	800bf56 <_sungetc_r+0x26>
 800bf72:	e7e1      	b.n	800bf38 <_sungetc_r+0x8>
 800bf74:	6921      	ldr	r1, [r4, #16]
 800bf76:	6823      	ldr	r3, [r4, #0]
 800bf78:	b151      	cbz	r1, 800bf90 <_sungetc_r+0x60>
 800bf7a:	4299      	cmp	r1, r3
 800bf7c:	d208      	bcs.n	800bf90 <_sungetc_r+0x60>
 800bf7e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bf82:	42a9      	cmp	r1, r5
 800bf84:	d104      	bne.n	800bf90 <_sungetc_r+0x60>
 800bf86:	3b01      	subs	r3, #1
 800bf88:	3201      	adds	r2, #1
 800bf8a:	6023      	str	r3, [r4, #0]
 800bf8c:	6062      	str	r2, [r4, #4]
 800bf8e:	e7d5      	b.n	800bf3c <_sungetc_r+0xc>
 800bf90:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bf94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf98:	6363      	str	r3, [r4, #52]	; 0x34
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf9e:	4623      	mov	r3, r4
 800bfa0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bfa4:	6023      	str	r3, [r4, #0]
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e7dc      	b.n	800bf64 <_sungetc_r+0x34>

0800bfaa <__ssrefill_r>:
 800bfaa:	b510      	push	{r4, lr}
 800bfac:	460c      	mov	r4, r1
 800bfae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bfb0:	b169      	cbz	r1, 800bfce <__ssrefill_r+0x24>
 800bfb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfb6:	4299      	cmp	r1, r3
 800bfb8:	d001      	beq.n	800bfbe <__ssrefill_r+0x14>
 800bfba:	f7ff fd7d 	bl	800bab8 <_free_r>
 800bfbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfc0:	6063      	str	r3, [r4, #4]
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	6360      	str	r0, [r4, #52]	; 0x34
 800bfc6:	b113      	cbz	r3, 800bfce <__ssrefill_r+0x24>
 800bfc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bfca:	6023      	str	r3, [r4, #0]
 800bfcc:	bd10      	pop	{r4, pc}
 800bfce:	6923      	ldr	r3, [r4, #16]
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	6063      	str	r3, [r4, #4]
 800bfd6:	89a3      	ldrh	r3, [r4, #12]
 800bfd8:	f043 0320 	orr.w	r3, r3, #32
 800bfdc:	81a3      	strh	r3, [r4, #12]
 800bfde:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe2:	e7f3      	b.n	800bfcc <__ssrefill_r+0x22>

0800bfe4 <__ssvfiscanf_r>:
 800bfe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe8:	460c      	mov	r4, r1
 800bfea:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bfee:	2100      	movs	r1, #0
 800bff0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bff4:	49a6      	ldr	r1, [pc, #664]	; (800c290 <__ssvfiscanf_r+0x2ac>)
 800bff6:	91a0      	str	r1, [sp, #640]	; 0x280
 800bff8:	f10d 0804 	add.w	r8, sp, #4
 800bffc:	49a5      	ldr	r1, [pc, #660]	; (800c294 <__ssvfiscanf_r+0x2b0>)
 800bffe:	4fa6      	ldr	r7, [pc, #664]	; (800c298 <__ssvfiscanf_r+0x2b4>)
 800c000:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c29c <__ssvfiscanf_r+0x2b8>
 800c004:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c008:	4606      	mov	r6, r0
 800c00a:	91a1      	str	r1, [sp, #644]	; 0x284
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	7813      	ldrb	r3, [r2, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 815a 	beq.w	800c2ca <__ssvfiscanf_r+0x2e6>
 800c016:	5dd9      	ldrb	r1, [r3, r7]
 800c018:	f011 0108 	ands.w	r1, r1, #8
 800c01c:	f102 0501 	add.w	r5, r2, #1
 800c020:	d019      	beq.n	800c056 <__ssvfiscanf_r+0x72>
 800c022:	6863      	ldr	r3, [r4, #4]
 800c024:	2b00      	cmp	r3, #0
 800c026:	dd0f      	ble.n	800c048 <__ssvfiscanf_r+0x64>
 800c028:	6823      	ldr	r3, [r4, #0]
 800c02a:	781a      	ldrb	r2, [r3, #0]
 800c02c:	5cba      	ldrb	r2, [r7, r2]
 800c02e:	0712      	lsls	r2, r2, #28
 800c030:	d401      	bmi.n	800c036 <__ssvfiscanf_r+0x52>
 800c032:	462a      	mov	r2, r5
 800c034:	e7eb      	b.n	800c00e <__ssvfiscanf_r+0x2a>
 800c036:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c038:	3201      	adds	r2, #1
 800c03a:	9245      	str	r2, [sp, #276]	; 0x114
 800c03c:	6862      	ldr	r2, [r4, #4]
 800c03e:	3301      	adds	r3, #1
 800c040:	3a01      	subs	r2, #1
 800c042:	6062      	str	r2, [r4, #4]
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	e7ec      	b.n	800c022 <__ssvfiscanf_r+0x3e>
 800c048:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c04a:	4621      	mov	r1, r4
 800c04c:	4630      	mov	r0, r6
 800c04e:	4798      	blx	r3
 800c050:	2800      	cmp	r0, #0
 800c052:	d0e9      	beq.n	800c028 <__ssvfiscanf_r+0x44>
 800c054:	e7ed      	b.n	800c032 <__ssvfiscanf_r+0x4e>
 800c056:	2b25      	cmp	r3, #37	; 0x25
 800c058:	d012      	beq.n	800c080 <__ssvfiscanf_r+0x9c>
 800c05a:	469a      	mov	sl, r3
 800c05c:	6863      	ldr	r3, [r4, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f340 8091 	ble.w	800c186 <__ssvfiscanf_r+0x1a2>
 800c064:	6822      	ldr	r2, [r4, #0]
 800c066:	7813      	ldrb	r3, [r2, #0]
 800c068:	4553      	cmp	r3, sl
 800c06a:	f040 812e 	bne.w	800c2ca <__ssvfiscanf_r+0x2e6>
 800c06e:	6863      	ldr	r3, [r4, #4]
 800c070:	3b01      	subs	r3, #1
 800c072:	6063      	str	r3, [r4, #4]
 800c074:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c076:	3201      	adds	r2, #1
 800c078:	3301      	adds	r3, #1
 800c07a:	6022      	str	r2, [r4, #0]
 800c07c:	9345      	str	r3, [sp, #276]	; 0x114
 800c07e:	e7d8      	b.n	800c032 <__ssvfiscanf_r+0x4e>
 800c080:	9141      	str	r1, [sp, #260]	; 0x104
 800c082:	9143      	str	r1, [sp, #268]	; 0x10c
 800c084:	7853      	ldrb	r3, [r2, #1]
 800c086:	2b2a      	cmp	r3, #42	; 0x2a
 800c088:	bf02      	ittt	eq
 800c08a:	2310      	moveq	r3, #16
 800c08c:	1c95      	addeq	r5, r2, #2
 800c08e:	9341      	streq	r3, [sp, #260]	; 0x104
 800c090:	220a      	movs	r2, #10
 800c092:	46aa      	mov	sl, r5
 800c094:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c098:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c09c:	2b09      	cmp	r3, #9
 800c09e:	d91d      	bls.n	800c0dc <__ssvfiscanf_r+0xf8>
 800c0a0:	487e      	ldr	r0, [pc, #504]	; (800c29c <__ssvfiscanf_r+0x2b8>)
 800c0a2:	2203      	movs	r2, #3
 800c0a4:	f7f4 f8b4 	bl	8000210 <memchr>
 800c0a8:	b140      	cbz	r0, 800c0bc <__ssvfiscanf_r+0xd8>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	eba0 0009 	sub.w	r0, r0, r9
 800c0b0:	fa03 f000 	lsl.w	r0, r3, r0
 800c0b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c0b6:	4318      	orrs	r0, r3
 800c0b8:	9041      	str	r0, [sp, #260]	; 0x104
 800c0ba:	4655      	mov	r5, sl
 800c0bc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c0c0:	2b78      	cmp	r3, #120	; 0x78
 800c0c2:	d806      	bhi.n	800c0d2 <__ssvfiscanf_r+0xee>
 800c0c4:	2b57      	cmp	r3, #87	; 0x57
 800c0c6:	d810      	bhi.n	800c0ea <__ssvfiscanf_r+0x106>
 800c0c8:	2b25      	cmp	r3, #37	; 0x25
 800c0ca:	d0c6      	beq.n	800c05a <__ssvfiscanf_r+0x76>
 800c0cc:	d856      	bhi.n	800c17c <__ssvfiscanf_r+0x198>
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d064      	beq.n	800c19c <__ssvfiscanf_r+0x1b8>
 800c0d2:	2303      	movs	r3, #3
 800c0d4:	9347      	str	r3, [sp, #284]	; 0x11c
 800c0d6:	230a      	movs	r3, #10
 800c0d8:	9342      	str	r3, [sp, #264]	; 0x108
 800c0da:	e071      	b.n	800c1c0 <__ssvfiscanf_r+0x1dc>
 800c0dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c0de:	fb02 1103 	mla	r1, r2, r3, r1
 800c0e2:	3930      	subs	r1, #48	; 0x30
 800c0e4:	9143      	str	r1, [sp, #268]	; 0x10c
 800c0e6:	4655      	mov	r5, sl
 800c0e8:	e7d3      	b.n	800c092 <__ssvfiscanf_r+0xae>
 800c0ea:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c0ee:	2a20      	cmp	r2, #32
 800c0f0:	d8ef      	bhi.n	800c0d2 <__ssvfiscanf_r+0xee>
 800c0f2:	a101      	add	r1, pc, #4	; (adr r1, 800c0f8 <__ssvfiscanf_r+0x114>)
 800c0f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c0f8:	0800c1ab 	.word	0x0800c1ab
 800c0fc:	0800c0d3 	.word	0x0800c0d3
 800c100:	0800c0d3 	.word	0x0800c0d3
 800c104:	0800c209 	.word	0x0800c209
 800c108:	0800c0d3 	.word	0x0800c0d3
 800c10c:	0800c0d3 	.word	0x0800c0d3
 800c110:	0800c0d3 	.word	0x0800c0d3
 800c114:	0800c0d3 	.word	0x0800c0d3
 800c118:	0800c0d3 	.word	0x0800c0d3
 800c11c:	0800c0d3 	.word	0x0800c0d3
 800c120:	0800c0d3 	.word	0x0800c0d3
 800c124:	0800c21f 	.word	0x0800c21f
 800c128:	0800c1f5 	.word	0x0800c1f5
 800c12c:	0800c183 	.word	0x0800c183
 800c130:	0800c183 	.word	0x0800c183
 800c134:	0800c183 	.word	0x0800c183
 800c138:	0800c0d3 	.word	0x0800c0d3
 800c13c:	0800c1f9 	.word	0x0800c1f9
 800c140:	0800c0d3 	.word	0x0800c0d3
 800c144:	0800c0d3 	.word	0x0800c0d3
 800c148:	0800c0d3 	.word	0x0800c0d3
 800c14c:	0800c0d3 	.word	0x0800c0d3
 800c150:	0800c22f 	.word	0x0800c22f
 800c154:	0800c201 	.word	0x0800c201
 800c158:	0800c1a3 	.word	0x0800c1a3
 800c15c:	0800c0d3 	.word	0x0800c0d3
 800c160:	0800c0d3 	.word	0x0800c0d3
 800c164:	0800c22b 	.word	0x0800c22b
 800c168:	0800c0d3 	.word	0x0800c0d3
 800c16c:	0800c1f5 	.word	0x0800c1f5
 800c170:	0800c0d3 	.word	0x0800c0d3
 800c174:	0800c0d3 	.word	0x0800c0d3
 800c178:	0800c1ab 	.word	0x0800c1ab
 800c17c:	3b45      	subs	r3, #69	; 0x45
 800c17e:	2b02      	cmp	r3, #2
 800c180:	d8a7      	bhi.n	800c0d2 <__ssvfiscanf_r+0xee>
 800c182:	2305      	movs	r3, #5
 800c184:	e01b      	b.n	800c1be <__ssvfiscanf_r+0x1da>
 800c186:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c188:	4621      	mov	r1, r4
 800c18a:	4630      	mov	r0, r6
 800c18c:	4798      	blx	r3
 800c18e:	2800      	cmp	r0, #0
 800c190:	f43f af68 	beq.w	800c064 <__ssvfiscanf_r+0x80>
 800c194:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c196:	2800      	cmp	r0, #0
 800c198:	f040 808d 	bne.w	800c2b6 <__ssvfiscanf_r+0x2d2>
 800c19c:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a0:	e08f      	b.n	800c2c2 <__ssvfiscanf_r+0x2de>
 800c1a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c1a4:	f042 0220 	orr.w	r2, r2, #32
 800c1a8:	9241      	str	r2, [sp, #260]	; 0x104
 800c1aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c1ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1b0:	9241      	str	r2, [sp, #260]	; 0x104
 800c1b2:	2210      	movs	r2, #16
 800c1b4:	2b6f      	cmp	r3, #111	; 0x6f
 800c1b6:	9242      	str	r2, [sp, #264]	; 0x108
 800c1b8:	bf34      	ite	cc
 800c1ba:	2303      	movcc	r3, #3
 800c1bc:	2304      	movcs	r3, #4
 800c1be:	9347      	str	r3, [sp, #284]	; 0x11c
 800c1c0:	6863      	ldr	r3, [r4, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	dd42      	ble.n	800c24c <__ssvfiscanf_r+0x268>
 800c1c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c1c8:	0659      	lsls	r1, r3, #25
 800c1ca:	d404      	bmi.n	800c1d6 <__ssvfiscanf_r+0x1f2>
 800c1cc:	6823      	ldr	r3, [r4, #0]
 800c1ce:	781a      	ldrb	r2, [r3, #0]
 800c1d0:	5cba      	ldrb	r2, [r7, r2]
 800c1d2:	0712      	lsls	r2, r2, #28
 800c1d4:	d441      	bmi.n	800c25a <__ssvfiscanf_r+0x276>
 800c1d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c1d8:	2b02      	cmp	r3, #2
 800c1da:	dc50      	bgt.n	800c27e <__ssvfiscanf_r+0x29a>
 800c1dc:	466b      	mov	r3, sp
 800c1de:	4622      	mov	r2, r4
 800c1e0:	a941      	add	r1, sp, #260	; 0x104
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	f000 f876 	bl	800c2d4 <_scanf_chars>
 800c1e8:	2801      	cmp	r0, #1
 800c1ea:	d06e      	beq.n	800c2ca <__ssvfiscanf_r+0x2e6>
 800c1ec:	2802      	cmp	r0, #2
 800c1ee:	f47f af20 	bne.w	800c032 <__ssvfiscanf_r+0x4e>
 800c1f2:	e7cf      	b.n	800c194 <__ssvfiscanf_r+0x1b0>
 800c1f4:	220a      	movs	r2, #10
 800c1f6:	e7dd      	b.n	800c1b4 <__ssvfiscanf_r+0x1d0>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	9342      	str	r3, [sp, #264]	; 0x108
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	e7de      	b.n	800c1be <__ssvfiscanf_r+0x1da>
 800c200:	2308      	movs	r3, #8
 800c202:	9342      	str	r3, [sp, #264]	; 0x108
 800c204:	2304      	movs	r3, #4
 800c206:	e7da      	b.n	800c1be <__ssvfiscanf_r+0x1da>
 800c208:	4629      	mov	r1, r5
 800c20a:	4640      	mov	r0, r8
 800c20c:	f000 f9e0 	bl	800c5d0 <__sccl>
 800c210:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c216:	9341      	str	r3, [sp, #260]	; 0x104
 800c218:	4605      	mov	r5, r0
 800c21a:	2301      	movs	r3, #1
 800c21c:	e7cf      	b.n	800c1be <__ssvfiscanf_r+0x1da>
 800c21e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c224:	9341      	str	r3, [sp, #260]	; 0x104
 800c226:	2300      	movs	r3, #0
 800c228:	e7c9      	b.n	800c1be <__ssvfiscanf_r+0x1da>
 800c22a:	2302      	movs	r3, #2
 800c22c:	e7c7      	b.n	800c1be <__ssvfiscanf_r+0x1da>
 800c22e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c230:	06c3      	lsls	r3, r0, #27
 800c232:	f53f aefe 	bmi.w	800c032 <__ssvfiscanf_r+0x4e>
 800c236:	9b00      	ldr	r3, [sp, #0]
 800c238:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c23a:	1d19      	adds	r1, r3, #4
 800c23c:	9100      	str	r1, [sp, #0]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f010 0f01 	tst.w	r0, #1
 800c244:	bf14      	ite	ne
 800c246:	801a      	strhne	r2, [r3, #0]
 800c248:	601a      	streq	r2, [r3, #0]
 800c24a:	e6f2      	b.n	800c032 <__ssvfiscanf_r+0x4e>
 800c24c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c24e:	4621      	mov	r1, r4
 800c250:	4630      	mov	r0, r6
 800c252:	4798      	blx	r3
 800c254:	2800      	cmp	r0, #0
 800c256:	d0b6      	beq.n	800c1c6 <__ssvfiscanf_r+0x1e2>
 800c258:	e79c      	b.n	800c194 <__ssvfiscanf_r+0x1b0>
 800c25a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c25c:	3201      	adds	r2, #1
 800c25e:	9245      	str	r2, [sp, #276]	; 0x114
 800c260:	6862      	ldr	r2, [r4, #4]
 800c262:	3a01      	subs	r2, #1
 800c264:	2a00      	cmp	r2, #0
 800c266:	6062      	str	r2, [r4, #4]
 800c268:	dd02      	ble.n	800c270 <__ssvfiscanf_r+0x28c>
 800c26a:	3301      	adds	r3, #1
 800c26c:	6023      	str	r3, [r4, #0]
 800c26e:	e7ad      	b.n	800c1cc <__ssvfiscanf_r+0x1e8>
 800c270:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c272:	4621      	mov	r1, r4
 800c274:	4630      	mov	r0, r6
 800c276:	4798      	blx	r3
 800c278:	2800      	cmp	r0, #0
 800c27a:	d0a7      	beq.n	800c1cc <__ssvfiscanf_r+0x1e8>
 800c27c:	e78a      	b.n	800c194 <__ssvfiscanf_r+0x1b0>
 800c27e:	2b04      	cmp	r3, #4
 800c280:	dc0e      	bgt.n	800c2a0 <__ssvfiscanf_r+0x2bc>
 800c282:	466b      	mov	r3, sp
 800c284:	4622      	mov	r2, r4
 800c286:	a941      	add	r1, sp, #260	; 0x104
 800c288:	4630      	mov	r0, r6
 800c28a:	f000 f87d 	bl	800c388 <_scanf_i>
 800c28e:	e7ab      	b.n	800c1e8 <__ssvfiscanf_r+0x204>
 800c290:	0800bf31 	.word	0x0800bf31
 800c294:	0800bfab 	.word	0x0800bfab
 800c298:	0800ffe1 	.word	0x0800ffe1
 800c29c:	0801034a 	.word	0x0801034a
 800c2a0:	4b0b      	ldr	r3, [pc, #44]	; (800c2d0 <__ssvfiscanf_r+0x2ec>)
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f43f aec5 	beq.w	800c032 <__ssvfiscanf_r+0x4e>
 800c2a8:	466b      	mov	r3, sp
 800c2aa:	4622      	mov	r2, r4
 800c2ac:	a941      	add	r1, sp, #260	; 0x104
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	f7fc fb76 	bl	80089a0 <_scanf_float>
 800c2b4:	e798      	b.n	800c1e8 <__ssvfiscanf_r+0x204>
 800c2b6:	89a3      	ldrh	r3, [r4, #12]
 800c2b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c2bc:	bf18      	it	ne
 800c2be:	f04f 30ff 	movne.w	r0, #4294967295
 800c2c2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ca:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c2cc:	e7f9      	b.n	800c2c2 <__ssvfiscanf_r+0x2de>
 800c2ce:	bf00      	nop
 800c2d0:	080089a1 	.word	0x080089a1

0800c2d4 <_scanf_chars>:
 800c2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2d8:	4615      	mov	r5, r2
 800c2da:	688a      	ldr	r2, [r1, #8]
 800c2dc:	4680      	mov	r8, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	b932      	cbnz	r2, 800c2f0 <_scanf_chars+0x1c>
 800c2e2:	698a      	ldr	r2, [r1, #24]
 800c2e4:	2a00      	cmp	r2, #0
 800c2e6:	bf0c      	ite	eq
 800c2e8:	2201      	moveq	r2, #1
 800c2ea:	f04f 32ff 	movne.w	r2, #4294967295
 800c2ee:	608a      	str	r2, [r1, #8]
 800c2f0:	6822      	ldr	r2, [r4, #0]
 800c2f2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c384 <_scanf_chars+0xb0>
 800c2f6:	06d1      	lsls	r1, r2, #27
 800c2f8:	bf5f      	itttt	pl
 800c2fa:	681a      	ldrpl	r2, [r3, #0]
 800c2fc:	1d11      	addpl	r1, r2, #4
 800c2fe:	6019      	strpl	r1, [r3, #0]
 800c300:	6816      	ldrpl	r6, [r2, #0]
 800c302:	2700      	movs	r7, #0
 800c304:	69a0      	ldr	r0, [r4, #24]
 800c306:	b188      	cbz	r0, 800c32c <_scanf_chars+0x58>
 800c308:	2801      	cmp	r0, #1
 800c30a:	d107      	bne.n	800c31c <_scanf_chars+0x48>
 800c30c:	682a      	ldr	r2, [r5, #0]
 800c30e:	7811      	ldrb	r1, [r2, #0]
 800c310:	6962      	ldr	r2, [r4, #20]
 800c312:	5c52      	ldrb	r2, [r2, r1]
 800c314:	b952      	cbnz	r2, 800c32c <_scanf_chars+0x58>
 800c316:	2f00      	cmp	r7, #0
 800c318:	d031      	beq.n	800c37e <_scanf_chars+0xaa>
 800c31a:	e022      	b.n	800c362 <_scanf_chars+0x8e>
 800c31c:	2802      	cmp	r0, #2
 800c31e:	d120      	bne.n	800c362 <_scanf_chars+0x8e>
 800c320:	682b      	ldr	r3, [r5, #0]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c328:	071b      	lsls	r3, r3, #28
 800c32a:	d41a      	bmi.n	800c362 <_scanf_chars+0x8e>
 800c32c:	6823      	ldr	r3, [r4, #0]
 800c32e:	06da      	lsls	r2, r3, #27
 800c330:	bf5e      	ittt	pl
 800c332:	682b      	ldrpl	r3, [r5, #0]
 800c334:	781b      	ldrbpl	r3, [r3, #0]
 800c336:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c33a:	682a      	ldr	r2, [r5, #0]
 800c33c:	686b      	ldr	r3, [r5, #4]
 800c33e:	3201      	adds	r2, #1
 800c340:	602a      	str	r2, [r5, #0]
 800c342:	68a2      	ldr	r2, [r4, #8]
 800c344:	3b01      	subs	r3, #1
 800c346:	3a01      	subs	r2, #1
 800c348:	606b      	str	r3, [r5, #4]
 800c34a:	3701      	adds	r7, #1
 800c34c:	60a2      	str	r2, [r4, #8]
 800c34e:	b142      	cbz	r2, 800c362 <_scanf_chars+0x8e>
 800c350:	2b00      	cmp	r3, #0
 800c352:	dcd7      	bgt.n	800c304 <_scanf_chars+0x30>
 800c354:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c358:	4629      	mov	r1, r5
 800c35a:	4640      	mov	r0, r8
 800c35c:	4798      	blx	r3
 800c35e:	2800      	cmp	r0, #0
 800c360:	d0d0      	beq.n	800c304 <_scanf_chars+0x30>
 800c362:	6823      	ldr	r3, [r4, #0]
 800c364:	f013 0310 	ands.w	r3, r3, #16
 800c368:	d105      	bne.n	800c376 <_scanf_chars+0xa2>
 800c36a:	68e2      	ldr	r2, [r4, #12]
 800c36c:	3201      	adds	r2, #1
 800c36e:	60e2      	str	r2, [r4, #12]
 800c370:	69a2      	ldr	r2, [r4, #24]
 800c372:	b102      	cbz	r2, 800c376 <_scanf_chars+0xa2>
 800c374:	7033      	strb	r3, [r6, #0]
 800c376:	6923      	ldr	r3, [r4, #16]
 800c378:	443b      	add	r3, r7
 800c37a:	6123      	str	r3, [r4, #16]
 800c37c:	2000      	movs	r0, #0
 800c37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c382:	bf00      	nop
 800c384:	0800ffe1 	.word	0x0800ffe1

0800c388 <_scanf_i>:
 800c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38c:	4698      	mov	r8, r3
 800c38e:	4b76      	ldr	r3, [pc, #472]	; (800c568 <_scanf_i+0x1e0>)
 800c390:	460c      	mov	r4, r1
 800c392:	4682      	mov	sl, r0
 800c394:	4616      	mov	r6, r2
 800c396:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c39a:	b087      	sub	sp, #28
 800c39c:	ab03      	add	r3, sp, #12
 800c39e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c3a2:	4b72      	ldr	r3, [pc, #456]	; (800c56c <_scanf_i+0x1e4>)
 800c3a4:	69a1      	ldr	r1, [r4, #24]
 800c3a6:	4a72      	ldr	r2, [pc, #456]	; (800c570 <_scanf_i+0x1e8>)
 800c3a8:	2903      	cmp	r1, #3
 800c3aa:	bf18      	it	ne
 800c3ac:	461a      	movne	r2, r3
 800c3ae:	68a3      	ldr	r3, [r4, #8]
 800c3b0:	9201      	str	r2, [sp, #4]
 800c3b2:	1e5a      	subs	r2, r3, #1
 800c3b4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c3b8:	bf88      	it	hi
 800c3ba:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c3be:	4627      	mov	r7, r4
 800c3c0:	bf82      	ittt	hi
 800c3c2:	eb03 0905 	addhi.w	r9, r3, r5
 800c3c6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c3ca:	60a3      	strhi	r3, [r4, #8]
 800c3cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c3d0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c3d4:	bf98      	it	ls
 800c3d6:	f04f 0900 	movls.w	r9, #0
 800c3da:	6023      	str	r3, [r4, #0]
 800c3dc:	463d      	mov	r5, r7
 800c3de:	f04f 0b00 	mov.w	fp, #0
 800c3e2:	6831      	ldr	r1, [r6, #0]
 800c3e4:	ab03      	add	r3, sp, #12
 800c3e6:	7809      	ldrb	r1, [r1, #0]
 800c3e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c3ec:	2202      	movs	r2, #2
 800c3ee:	f7f3 ff0f 	bl	8000210 <memchr>
 800c3f2:	b328      	cbz	r0, 800c440 <_scanf_i+0xb8>
 800c3f4:	f1bb 0f01 	cmp.w	fp, #1
 800c3f8:	d159      	bne.n	800c4ae <_scanf_i+0x126>
 800c3fa:	6862      	ldr	r2, [r4, #4]
 800c3fc:	b92a      	cbnz	r2, 800c40a <_scanf_i+0x82>
 800c3fe:	6822      	ldr	r2, [r4, #0]
 800c400:	2308      	movs	r3, #8
 800c402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c406:	6063      	str	r3, [r4, #4]
 800c408:	6022      	str	r2, [r4, #0]
 800c40a:	6822      	ldr	r2, [r4, #0]
 800c40c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c410:	6022      	str	r2, [r4, #0]
 800c412:	68a2      	ldr	r2, [r4, #8]
 800c414:	1e51      	subs	r1, r2, #1
 800c416:	60a1      	str	r1, [r4, #8]
 800c418:	b192      	cbz	r2, 800c440 <_scanf_i+0xb8>
 800c41a:	6832      	ldr	r2, [r6, #0]
 800c41c:	1c51      	adds	r1, r2, #1
 800c41e:	6031      	str	r1, [r6, #0]
 800c420:	7812      	ldrb	r2, [r2, #0]
 800c422:	f805 2b01 	strb.w	r2, [r5], #1
 800c426:	6872      	ldr	r2, [r6, #4]
 800c428:	3a01      	subs	r2, #1
 800c42a:	2a00      	cmp	r2, #0
 800c42c:	6072      	str	r2, [r6, #4]
 800c42e:	dc07      	bgt.n	800c440 <_scanf_i+0xb8>
 800c430:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c434:	4631      	mov	r1, r6
 800c436:	4650      	mov	r0, sl
 800c438:	4790      	blx	r2
 800c43a:	2800      	cmp	r0, #0
 800c43c:	f040 8085 	bne.w	800c54a <_scanf_i+0x1c2>
 800c440:	f10b 0b01 	add.w	fp, fp, #1
 800c444:	f1bb 0f03 	cmp.w	fp, #3
 800c448:	d1cb      	bne.n	800c3e2 <_scanf_i+0x5a>
 800c44a:	6863      	ldr	r3, [r4, #4]
 800c44c:	b90b      	cbnz	r3, 800c452 <_scanf_i+0xca>
 800c44e:	230a      	movs	r3, #10
 800c450:	6063      	str	r3, [r4, #4]
 800c452:	6863      	ldr	r3, [r4, #4]
 800c454:	4947      	ldr	r1, [pc, #284]	; (800c574 <_scanf_i+0x1ec>)
 800c456:	6960      	ldr	r0, [r4, #20]
 800c458:	1ac9      	subs	r1, r1, r3
 800c45a:	f000 f8b9 	bl	800c5d0 <__sccl>
 800c45e:	f04f 0b00 	mov.w	fp, #0
 800c462:	68a3      	ldr	r3, [r4, #8]
 800c464:	6822      	ldr	r2, [r4, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d03d      	beq.n	800c4e6 <_scanf_i+0x15e>
 800c46a:	6831      	ldr	r1, [r6, #0]
 800c46c:	6960      	ldr	r0, [r4, #20]
 800c46e:	f891 c000 	ldrb.w	ip, [r1]
 800c472:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c476:	2800      	cmp	r0, #0
 800c478:	d035      	beq.n	800c4e6 <_scanf_i+0x15e>
 800c47a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c47e:	d124      	bne.n	800c4ca <_scanf_i+0x142>
 800c480:	0510      	lsls	r0, r2, #20
 800c482:	d522      	bpl.n	800c4ca <_scanf_i+0x142>
 800c484:	f10b 0b01 	add.w	fp, fp, #1
 800c488:	f1b9 0f00 	cmp.w	r9, #0
 800c48c:	d003      	beq.n	800c496 <_scanf_i+0x10e>
 800c48e:	3301      	adds	r3, #1
 800c490:	f109 39ff 	add.w	r9, r9, #4294967295
 800c494:	60a3      	str	r3, [r4, #8]
 800c496:	6873      	ldr	r3, [r6, #4]
 800c498:	3b01      	subs	r3, #1
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	6073      	str	r3, [r6, #4]
 800c49e:	dd1b      	ble.n	800c4d8 <_scanf_i+0x150>
 800c4a0:	6833      	ldr	r3, [r6, #0]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	6033      	str	r3, [r6, #0]
 800c4a6:	68a3      	ldr	r3, [r4, #8]
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	60a3      	str	r3, [r4, #8]
 800c4ac:	e7d9      	b.n	800c462 <_scanf_i+0xda>
 800c4ae:	f1bb 0f02 	cmp.w	fp, #2
 800c4b2:	d1ae      	bne.n	800c412 <_scanf_i+0x8a>
 800c4b4:	6822      	ldr	r2, [r4, #0]
 800c4b6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c4ba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c4be:	d1bf      	bne.n	800c440 <_scanf_i+0xb8>
 800c4c0:	2310      	movs	r3, #16
 800c4c2:	6063      	str	r3, [r4, #4]
 800c4c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c4c8:	e7a2      	b.n	800c410 <_scanf_i+0x88>
 800c4ca:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c4ce:	6022      	str	r2, [r4, #0]
 800c4d0:	780b      	ldrb	r3, [r1, #0]
 800c4d2:	f805 3b01 	strb.w	r3, [r5], #1
 800c4d6:	e7de      	b.n	800c496 <_scanf_i+0x10e>
 800c4d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c4dc:	4631      	mov	r1, r6
 800c4de:	4650      	mov	r0, sl
 800c4e0:	4798      	blx	r3
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	d0df      	beq.n	800c4a6 <_scanf_i+0x11e>
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	05db      	lsls	r3, r3, #23
 800c4ea:	d50d      	bpl.n	800c508 <_scanf_i+0x180>
 800c4ec:	42bd      	cmp	r5, r7
 800c4ee:	d909      	bls.n	800c504 <_scanf_i+0x17c>
 800c4f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c4f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c4f8:	4632      	mov	r2, r6
 800c4fa:	4650      	mov	r0, sl
 800c4fc:	4798      	blx	r3
 800c4fe:	f105 39ff 	add.w	r9, r5, #4294967295
 800c502:	464d      	mov	r5, r9
 800c504:	42bd      	cmp	r5, r7
 800c506:	d02d      	beq.n	800c564 <_scanf_i+0x1dc>
 800c508:	6822      	ldr	r2, [r4, #0]
 800c50a:	f012 0210 	ands.w	r2, r2, #16
 800c50e:	d113      	bne.n	800c538 <_scanf_i+0x1b0>
 800c510:	702a      	strb	r2, [r5, #0]
 800c512:	6863      	ldr	r3, [r4, #4]
 800c514:	9e01      	ldr	r6, [sp, #4]
 800c516:	4639      	mov	r1, r7
 800c518:	4650      	mov	r0, sl
 800c51a:	47b0      	blx	r6
 800c51c:	6821      	ldr	r1, [r4, #0]
 800c51e:	f8d8 3000 	ldr.w	r3, [r8]
 800c522:	f011 0f20 	tst.w	r1, #32
 800c526:	d013      	beq.n	800c550 <_scanf_i+0x1c8>
 800c528:	1d1a      	adds	r2, r3, #4
 800c52a:	f8c8 2000 	str.w	r2, [r8]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	6018      	str	r0, [r3, #0]
 800c532:	68e3      	ldr	r3, [r4, #12]
 800c534:	3301      	adds	r3, #1
 800c536:	60e3      	str	r3, [r4, #12]
 800c538:	1bed      	subs	r5, r5, r7
 800c53a:	44ab      	add	fp, r5
 800c53c:	6925      	ldr	r5, [r4, #16]
 800c53e:	445d      	add	r5, fp
 800c540:	6125      	str	r5, [r4, #16]
 800c542:	2000      	movs	r0, #0
 800c544:	b007      	add	sp, #28
 800c546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c54a:	f04f 0b00 	mov.w	fp, #0
 800c54e:	e7ca      	b.n	800c4e6 <_scanf_i+0x15e>
 800c550:	1d1a      	adds	r2, r3, #4
 800c552:	f8c8 2000 	str.w	r2, [r8]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f011 0f01 	tst.w	r1, #1
 800c55c:	bf14      	ite	ne
 800c55e:	8018      	strhne	r0, [r3, #0]
 800c560:	6018      	streq	r0, [r3, #0]
 800c562:	e7e6      	b.n	800c532 <_scanf_i+0x1aa>
 800c564:	2001      	movs	r0, #1
 800c566:	e7ed      	b.n	800c544 <_scanf_i+0x1bc>
 800c568:	0800ff44 	.word	0x0800ff44
 800c56c:	0800c74d 	.word	0x0800c74d
 800c570:	08009c5d 	.word	0x08009c5d
 800c574:	0801036e 	.word	0x0801036e

0800c578 <_read_r>:
 800c578:	b538      	push	{r3, r4, r5, lr}
 800c57a:	4d07      	ldr	r5, [pc, #28]	; (800c598 <_read_r+0x20>)
 800c57c:	4604      	mov	r4, r0
 800c57e:	4608      	mov	r0, r1
 800c580:	4611      	mov	r1, r2
 800c582:	2200      	movs	r2, #0
 800c584:	602a      	str	r2, [r5, #0]
 800c586:	461a      	mov	r2, r3
 800c588:	f7f8 fd95 	bl	80050b6 <_read>
 800c58c:	1c43      	adds	r3, r0, #1
 800c58e:	d102      	bne.n	800c596 <_read_r+0x1e>
 800c590:	682b      	ldr	r3, [r5, #0]
 800c592:	b103      	cbz	r3, 800c596 <_read_r+0x1e>
 800c594:	6023      	str	r3, [r4, #0]
 800c596:	bd38      	pop	{r3, r4, r5, pc}
 800c598:	20009d08 	.word	0x20009d08
 800c59c:	00000000 	.word	0x00000000

0800c5a0 <nan>:
 800c5a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c5a8 <nan+0x8>
 800c5a4:	4770      	bx	lr
 800c5a6:	bf00      	nop
 800c5a8:	00000000 	.word	0x00000000
 800c5ac:	7ff80000 	.word	0x7ff80000

0800c5b0 <_sbrk_r>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4d06      	ldr	r5, [pc, #24]	; (800c5cc <_sbrk_r+0x1c>)
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	4608      	mov	r0, r1
 800c5ba:	602b      	str	r3, [r5, #0]
 800c5bc:	f7f8 fde8 	bl	8005190 <_sbrk>
 800c5c0:	1c43      	adds	r3, r0, #1
 800c5c2:	d102      	bne.n	800c5ca <_sbrk_r+0x1a>
 800c5c4:	682b      	ldr	r3, [r5, #0]
 800c5c6:	b103      	cbz	r3, 800c5ca <_sbrk_r+0x1a>
 800c5c8:	6023      	str	r3, [r4, #0]
 800c5ca:	bd38      	pop	{r3, r4, r5, pc}
 800c5cc:	20009d08 	.word	0x20009d08

0800c5d0 <__sccl>:
 800c5d0:	b570      	push	{r4, r5, r6, lr}
 800c5d2:	780b      	ldrb	r3, [r1, #0]
 800c5d4:	4604      	mov	r4, r0
 800c5d6:	2b5e      	cmp	r3, #94	; 0x5e
 800c5d8:	bf0b      	itete	eq
 800c5da:	784b      	ldrbeq	r3, [r1, #1]
 800c5dc:	1c48      	addne	r0, r1, #1
 800c5de:	1c88      	addeq	r0, r1, #2
 800c5e0:	2200      	movne	r2, #0
 800c5e2:	bf08      	it	eq
 800c5e4:	2201      	moveq	r2, #1
 800c5e6:	1e61      	subs	r1, r4, #1
 800c5e8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c5ec:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c5f0:	42a9      	cmp	r1, r5
 800c5f2:	d1fb      	bne.n	800c5ec <__sccl+0x1c>
 800c5f4:	b90b      	cbnz	r3, 800c5fa <__sccl+0x2a>
 800c5f6:	3801      	subs	r0, #1
 800c5f8:	bd70      	pop	{r4, r5, r6, pc}
 800c5fa:	f082 0201 	eor.w	r2, r2, #1
 800c5fe:	54e2      	strb	r2, [r4, r3]
 800c600:	4605      	mov	r5, r0
 800c602:	4628      	mov	r0, r5
 800c604:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c608:	292d      	cmp	r1, #45	; 0x2d
 800c60a:	d006      	beq.n	800c61a <__sccl+0x4a>
 800c60c:	295d      	cmp	r1, #93	; 0x5d
 800c60e:	d0f3      	beq.n	800c5f8 <__sccl+0x28>
 800c610:	b909      	cbnz	r1, 800c616 <__sccl+0x46>
 800c612:	4628      	mov	r0, r5
 800c614:	e7f0      	b.n	800c5f8 <__sccl+0x28>
 800c616:	460b      	mov	r3, r1
 800c618:	e7f1      	b.n	800c5fe <__sccl+0x2e>
 800c61a:	786e      	ldrb	r6, [r5, #1]
 800c61c:	2e5d      	cmp	r6, #93	; 0x5d
 800c61e:	d0fa      	beq.n	800c616 <__sccl+0x46>
 800c620:	42b3      	cmp	r3, r6
 800c622:	dcf8      	bgt.n	800c616 <__sccl+0x46>
 800c624:	3502      	adds	r5, #2
 800c626:	4619      	mov	r1, r3
 800c628:	3101      	adds	r1, #1
 800c62a:	428e      	cmp	r6, r1
 800c62c:	5462      	strb	r2, [r4, r1]
 800c62e:	dcfb      	bgt.n	800c628 <__sccl+0x58>
 800c630:	1af1      	subs	r1, r6, r3
 800c632:	3901      	subs	r1, #1
 800c634:	1c58      	adds	r0, r3, #1
 800c636:	42b3      	cmp	r3, r6
 800c638:	bfa8      	it	ge
 800c63a:	2100      	movge	r1, #0
 800c63c:	1843      	adds	r3, r0, r1
 800c63e:	e7e0      	b.n	800c602 <__sccl+0x32>

0800c640 <strncmp>:
 800c640:	b510      	push	{r4, lr}
 800c642:	b17a      	cbz	r2, 800c664 <strncmp+0x24>
 800c644:	4603      	mov	r3, r0
 800c646:	3901      	subs	r1, #1
 800c648:	1884      	adds	r4, r0, r2
 800c64a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c64e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c652:	4290      	cmp	r0, r2
 800c654:	d101      	bne.n	800c65a <strncmp+0x1a>
 800c656:	42a3      	cmp	r3, r4
 800c658:	d101      	bne.n	800c65e <strncmp+0x1e>
 800c65a:	1a80      	subs	r0, r0, r2
 800c65c:	bd10      	pop	{r4, pc}
 800c65e:	2800      	cmp	r0, #0
 800c660:	d1f3      	bne.n	800c64a <strncmp+0xa>
 800c662:	e7fa      	b.n	800c65a <strncmp+0x1a>
 800c664:	4610      	mov	r0, r2
 800c666:	e7f9      	b.n	800c65c <strncmp+0x1c>

0800c668 <_strtoul_l.constprop.0>:
 800c668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c66c:	4f36      	ldr	r7, [pc, #216]	; (800c748 <_strtoul_l.constprop.0+0xe0>)
 800c66e:	4686      	mov	lr, r0
 800c670:	460d      	mov	r5, r1
 800c672:	4628      	mov	r0, r5
 800c674:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c678:	5de6      	ldrb	r6, [r4, r7]
 800c67a:	f016 0608 	ands.w	r6, r6, #8
 800c67e:	d1f8      	bne.n	800c672 <_strtoul_l.constprop.0+0xa>
 800c680:	2c2d      	cmp	r4, #45	; 0x2d
 800c682:	d12f      	bne.n	800c6e4 <_strtoul_l.constprop.0+0x7c>
 800c684:	782c      	ldrb	r4, [r5, #0]
 800c686:	2601      	movs	r6, #1
 800c688:	1c85      	adds	r5, r0, #2
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d057      	beq.n	800c73e <_strtoul_l.constprop.0+0xd6>
 800c68e:	2b10      	cmp	r3, #16
 800c690:	d109      	bne.n	800c6a6 <_strtoul_l.constprop.0+0x3e>
 800c692:	2c30      	cmp	r4, #48	; 0x30
 800c694:	d107      	bne.n	800c6a6 <_strtoul_l.constprop.0+0x3e>
 800c696:	7828      	ldrb	r0, [r5, #0]
 800c698:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c69c:	2858      	cmp	r0, #88	; 0x58
 800c69e:	d149      	bne.n	800c734 <_strtoul_l.constprop.0+0xcc>
 800c6a0:	786c      	ldrb	r4, [r5, #1]
 800c6a2:	2310      	movs	r3, #16
 800c6a4:	3502      	adds	r5, #2
 800c6a6:	f04f 38ff 	mov.w	r8, #4294967295
 800c6aa:	2700      	movs	r7, #0
 800c6ac:	fbb8 f8f3 	udiv	r8, r8, r3
 800c6b0:	fb03 f908 	mul.w	r9, r3, r8
 800c6b4:	ea6f 0909 	mvn.w	r9, r9
 800c6b8:	4638      	mov	r0, r7
 800c6ba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c6be:	f1bc 0f09 	cmp.w	ip, #9
 800c6c2:	d814      	bhi.n	800c6ee <_strtoul_l.constprop.0+0x86>
 800c6c4:	4664      	mov	r4, ip
 800c6c6:	42a3      	cmp	r3, r4
 800c6c8:	dd22      	ble.n	800c710 <_strtoul_l.constprop.0+0xa8>
 800c6ca:	2f00      	cmp	r7, #0
 800c6cc:	db1d      	blt.n	800c70a <_strtoul_l.constprop.0+0xa2>
 800c6ce:	4580      	cmp	r8, r0
 800c6d0:	d31b      	bcc.n	800c70a <_strtoul_l.constprop.0+0xa2>
 800c6d2:	d101      	bne.n	800c6d8 <_strtoul_l.constprop.0+0x70>
 800c6d4:	45a1      	cmp	r9, r4
 800c6d6:	db18      	blt.n	800c70a <_strtoul_l.constprop.0+0xa2>
 800c6d8:	fb00 4003 	mla	r0, r0, r3, r4
 800c6dc:	2701      	movs	r7, #1
 800c6de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6e2:	e7ea      	b.n	800c6ba <_strtoul_l.constprop.0+0x52>
 800c6e4:	2c2b      	cmp	r4, #43	; 0x2b
 800c6e6:	bf04      	itt	eq
 800c6e8:	782c      	ldrbeq	r4, [r5, #0]
 800c6ea:	1c85      	addeq	r5, r0, #2
 800c6ec:	e7cd      	b.n	800c68a <_strtoul_l.constprop.0+0x22>
 800c6ee:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c6f2:	f1bc 0f19 	cmp.w	ip, #25
 800c6f6:	d801      	bhi.n	800c6fc <_strtoul_l.constprop.0+0x94>
 800c6f8:	3c37      	subs	r4, #55	; 0x37
 800c6fa:	e7e4      	b.n	800c6c6 <_strtoul_l.constprop.0+0x5e>
 800c6fc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c700:	f1bc 0f19 	cmp.w	ip, #25
 800c704:	d804      	bhi.n	800c710 <_strtoul_l.constprop.0+0xa8>
 800c706:	3c57      	subs	r4, #87	; 0x57
 800c708:	e7dd      	b.n	800c6c6 <_strtoul_l.constprop.0+0x5e>
 800c70a:	f04f 37ff 	mov.w	r7, #4294967295
 800c70e:	e7e6      	b.n	800c6de <_strtoul_l.constprop.0+0x76>
 800c710:	2f00      	cmp	r7, #0
 800c712:	da07      	bge.n	800c724 <_strtoul_l.constprop.0+0xbc>
 800c714:	2322      	movs	r3, #34	; 0x22
 800c716:	f8ce 3000 	str.w	r3, [lr]
 800c71a:	f04f 30ff 	mov.w	r0, #4294967295
 800c71e:	b932      	cbnz	r2, 800c72e <_strtoul_l.constprop.0+0xc6>
 800c720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c724:	b106      	cbz	r6, 800c728 <_strtoul_l.constprop.0+0xc0>
 800c726:	4240      	negs	r0, r0
 800c728:	2a00      	cmp	r2, #0
 800c72a:	d0f9      	beq.n	800c720 <_strtoul_l.constprop.0+0xb8>
 800c72c:	b107      	cbz	r7, 800c730 <_strtoul_l.constprop.0+0xc8>
 800c72e:	1e69      	subs	r1, r5, #1
 800c730:	6011      	str	r1, [r2, #0]
 800c732:	e7f5      	b.n	800c720 <_strtoul_l.constprop.0+0xb8>
 800c734:	2430      	movs	r4, #48	; 0x30
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1b5      	bne.n	800c6a6 <_strtoul_l.constprop.0+0x3e>
 800c73a:	2308      	movs	r3, #8
 800c73c:	e7b3      	b.n	800c6a6 <_strtoul_l.constprop.0+0x3e>
 800c73e:	2c30      	cmp	r4, #48	; 0x30
 800c740:	d0a9      	beq.n	800c696 <_strtoul_l.constprop.0+0x2e>
 800c742:	230a      	movs	r3, #10
 800c744:	e7af      	b.n	800c6a6 <_strtoul_l.constprop.0+0x3e>
 800c746:	bf00      	nop
 800c748:	0800ffe1 	.word	0x0800ffe1

0800c74c <_strtoul_r>:
 800c74c:	f7ff bf8c 	b.w	800c668 <_strtoul_l.constprop.0>

0800c750 <__submore>:
 800c750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c754:	460c      	mov	r4, r1
 800c756:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c75c:	4299      	cmp	r1, r3
 800c75e:	d11d      	bne.n	800c79c <__submore+0x4c>
 800c760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c764:	f7ff fa14 	bl	800bb90 <_malloc_r>
 800c768:	b918      	cbnz	r0, 800c772 <__submore+0x22>
 800c76a:	f04f 30ff 	mov.w	r0, #4294967295
 800c76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c776:	63a3      	str	r3, [r4, #56]	; 0x38
 800c778:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c77c:	6360      	str	r0, [r4, #52]	; 0x34
 800c77e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c782:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c786:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c78a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c78e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c792:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c796:	6020      	str	r0, [r4, #0]
 800c798:	2000      	movs	r0, #0
 800c79a:	e7e8      	b.n	800c76e <__submore+0x1e>
 800c79c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c79e:	0077      	lsls	r7, r6, #1
 800c7a0:	463a      	mov	r2, r7
 800c7a2:	f000 fa2d 	bl	800cc00 <_realloc_r>
 800c7a6:	4605      	mov	r5, r0
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d0de      	beq.n	800c76a <__submore+0x1a>
 800c7ac:	eb00 0806 	add.w	r8, r0, r6
 800c7b0:	4601      	mov	r1, r0
 800c7b2:	4632      	mov	r2, r6
 800c7b4:	4640      	mov	r0, r8
 800c7b6:	f7fe fc99 	bl	800b0ec <memcpy>
 800c7ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c7be:	f8c4 8000 	str.w	r8, [r4]
 800c7c2:	e7e9      	b.n	800c798 <__submore+0x48>

0800c7c4 <__ascii_wctomb>:
 800c7c4:	b149      	cbz	r1, 800c7da <__ascii_wctomb+0x16>
 800c7c6:	2aff      	cmp	r2, #255	; 0xff
 800c7c8:	bf85      	ittet	hi
 800c7ca:	238a      	movhi	r3, #138	; 0x8a
 800c7cc:	6003      	strhi	r3, [r0, #0]
 800c7ce:	700a      	strbls	r2, [r1, #0]
 800c7d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c7d4:	bf98      	it	ls
 800c7d6:	2001      	movls	r0, #1
 800c7d8:	4770      	bx	lr
 800c7da:	4608      	mov	r0, r1
 800c7dc:	4770      	bx	lr
	...

0800c7e0 <__assert_func>:
 800c7e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7e2:	4614      	mov	r4, r2
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	4b09      	ldr	r3, [pc, #36]	; (800c80c <__assert_func+0x2c>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4605      	mov	r5, r0
 800c7ec:	68d8      	ldr	r0, [r3, #12]
 800c7ee:	b14c      	cbz	r4, 800c804 <__assert_func+0x24>
 800c7f0:	4b07      	ldr	r3, [pc, #28]	; (800c810 <__assert_func+0x30>)
 800c7f2:	9100      	str	r1, [sp, #0]
 800c7f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7f8:	4906      	ldr	r1, [pc, #24]	; (800c814 <__assert_func+0x34>)
 800c7fa:	462b      	mov	r3, r5
 800c7fc:	f000 f9a6 	bl	800cb4c <fiprintf>
 800c800:	f000 fc46 	bl	800d090 <abort>
 800c804:	4b04      	ldr	r3, [pc, #16]	; (800c818 <__assert_func+0x38>)
 800c806:	461c      	mov	r4, r3
 800c808:	e7f3      	b.n	800c7f2 <__assert_func+0x12>
 800c80a:	bf00      	nop
 800c80c:	2000001c 	.word	0x2000001c
 800c810:	08010370 	.word	0x08010370
 800c814:	0801037d 	.word	0x0801037d
 800c818:	080103ab 	.word	0x080103ab

0800c81c <__sflush_r>:
 800c81c:	898a      	ldrh	r2, [r1, #12]
 800c81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c822:	4605      	mov	r5, r0
 800c824:	0710      	lsls	r0, r2, #28
 800c826:	460c      	mov	r4, r1
 800c828:	d458      	bmi.n	800c8dc <__sflush_r+0xc0>
 800c82a:	684b      	ldr	r3, [r1, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	dc05      	bgt.n	800c83c <__sflush_r+0x20>
 800c830:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c832:	2b00      	cmp	r3, #0
 800c834:	dc02      	bgt.n	800c83c <__sflush_r+0x20>
 800c836:	2000      	movs	r0, #0
 800c838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c83c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c83e:	2e00      	cmp	r6, #0
 800c840:	d0f9      	beq.n	800c836 <__sflush_r+0x1a>
 800c842:	2300      	movs	r3, #0
 800c844:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c848:	682f      	ldr	r7, [r5, #0]
 800c84a:	602b      	str	r3, [r5, #0]
 800c84c:	d032      	beq.n	800c8b4 <__sflush_r+0x98>
 800c84e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c850:	89a3      	ldrh	r3, [r4, #12]
 800c852:	075a      	lsls	r2, r3, #29
 800c854:	d505      	bpl.n	800c862 <__sflush_r+0x46>
 800c856:	6863      	ldr	r3, [r4, #4]
 800c858:	1ac0      	subs	r0, r0, r3
 800c85a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c85c:	b10b      	cbz	r3, 800c862 <__sflush_r+0x46>
 800c85e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c860:	1ac0      	subs	r0, r0, r3
 800c862:	2300      	movs	r3, #0
 800c864:	4602      	mov	r2, r0
 800c866:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c868:	6a21      	ldr	r1, [r4, #32]
 800c86a:	4628      	mov	r0, r5
 800c86c:	47b0      	blx	r6
 800c86e:	1c43      	adds	r3, r0, #1
 800c870:	89a3      	ldrh	r3, [r4, #12]
 800c872:	d106      	bne.n	800c882 <__sflush_r+0x66>
 800c874:	6829      	ldr	r1, [r5, #0]
 800c876:	291d      	cmp	r1, #29
 800c878:	d82c      	bhi.n	800c8d4 <__sflush_r+0xb8>
 800c87a:	4a2a      	ldr	r2, [pc, #168]	; (800c924 <__sflush_r+0x108>)
 800c87c:	40ca      	lsrs	r2, r1
 800c87e:	07d6      	lsls	r6, r2, #31
 800c880:	d528      	bpl.n	800c8d4 <__sflush_r+0xb8>
 800c882:	2200      	movs	r2, #0
 800c884:	6062      	str	r2, [r4, #4]
 800c886:	04d9      	lsls	r1, r3, #19
 800c888:	6922      	ldr	r2, [r4, #16]
 800c88a:	6022      	str	r2, [r4, #0]
 800c88c:	d504      	bpl.n	800c898 <__sflush_r+0x7c>
 800c88e:	1c42      	adds	r2, r0, #1
 800c890:	d101      	bne.n	800c896 <__sflush_r+0x7a>
 800c892:	682b      	ldr	r3, [r5, #0]
 800c894:	b903      	cbnz	r3, 800c898 <__sflush_r+0x7c>
 800c896:	6560      	str	r0, [r4, #84]	; 0x54
 800c898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c89a:	602f      	str	r7, [r5, #0]
 800c89c:	2900      	cmp	r1, #0
 800c89e:	d0ca      	beq.n	800c836 <__sflush_r+0x1a>
 800c8a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8a4:	4299      	cmp	r1, r3
 800c8a6:	d002      	beq.n	800c8ae <__sflush_r+0x92>
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	f7ff f905 	bl	800bab8 <_free_r>
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	6360      	str	r0, [r4, #52]	; 0x34
 800c8b2:	e7c1      	b.n	800c838 <__sflush_r+0x1c>
 800c8b4:	6a21      	ldr	r1, [r4, #32]
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	47b0      	blx	r6
 800c8bc:	1c41      	adds	r1, r0, #1
 800c8be:	d1c7      	bne.n	800c850 <__sflush_r+0x34>
 800c8c0:	682b      	ldr	r3, [r5, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d0c4      	beq.n	800c850 <__sflush_r+0x34>
 800c8c6:	2b1d      	cmp	r3, #29
 800c8c8:	d001      	beq.n	800c8ce <__sflush_r+0xb2>
 800c8ca:	2b16      	cmp	r3, #22
 800c8cc:	d101      	bne.n	800c8d2 <__sflush_r+0xb6>
 800c8ce:	602f      	str	r7, [r5, #0]
 800c8d0:	e7b1      	b.n	800c836 <__sflush_r+0x1a>
 800c8d2:	89a3      	ldrh	r3, [r4, #12]
 800c8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8d8:	81a3      	strh	r3, [r4, #12]
 800c8da:	e7ad      	b.n	800c838 <__sflush_r+0x1c>
 800c8dc:	690f      	ldr	r7, [r1, #16]
 800c8de:	2f00      	cmp	r7, #0
 800c8e0:	d0a9      	beq.n	800c836 <__sflush_r+0x1a>
 800c8e2:	0793      	lsls	r3, r2, #30
 800c8e4:	680e      	ldr	r6, [r1, #0]
 800c8e6:	bf08      	it	eq
 800c8e8:	694b      	ldreq	r3, [r1, #20]
 800c8ea:	600f      	str	r7, [r1, #0]
 800c8ec:	bf18      	it	ne
 800c8ee:	2300      	movne	r3, #0
 800c8f0:	eba6 0807 	sub.w	r8, r6, r7
 800c8f4:	608b      	str	r3, [r1, #8]
 800c8f6:	f1b8 0f00 	cmp.w	r8, #0
 800c8fa:	dd9c      	ble.n	800c836 <__sflush_r+0x1a>
 800c8fc:	6a21      	ldr	r1, [r4, #32]
 800c8fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c900:	4643      	mov	r3, r8
 800c902:	463a      	mov	r2, r7
 800c904:	4628      	mov	r0, r5
 800c906:	47b0      	blx	r6
 800c908:	2800      	cmp	r0, #0
 800c90a:	dc06      	bgt.n	800c91a <__sflush_r+0xfe>
 800c90c:	89a3      	ldrh	r3, [r4, #12]
 800c90e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c912:	81a3      	strh	r3, [r4, #12]
 800c914:	f04f 30ff 	mov.w	r0, #4294967295
 800c918:	e78e      	b.n	800c838 <__sflush_r+0x1c>
 800c91a:	4407      	add	r7, r0
 800c91c:	eba8 0800 	sub.w	r8, r8, r0
 800c920:	e7e9      	b.n	800c8f6 <__sflush_r+0xda>
 800c922:	bf00      	nop
 800c924:	20400001 	.word	0x20400001

0800c928 <_fflush_r>:
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	690b      	ldr	r3, [r1, #16]
 800c92c:	4605      	mov	r5, r0
 800c92e:	460c      	mov	r4, r1
 800c930:	b913      	cbnz	r3, 800c938 <_fflush_r+0x10>
 800c932:	2500      	movs	r5, #0
 800c934:	4628      	mov	r0, r5
 800c936:	bd38      	pop	{r3, r4, r5, pc}
 800c938:	b118      	cbz	r0, 800c942 <_fflush_r+0x1a>
 800c93a:	6983      	ldr	r3, [r0, #24]
 800c93c:	b90b      	cbnz	r3, 800c942 <_fflush_r+0x1a>
 800c93e:	f000 f887 	bl	800ca50 <__sinit>
 800c942:	4b14      	ldr	r3, [pc, #80]	; (800c994 <_fflush_r+0x6c>)
 800c944:	429c      	cmp	r4, r3
 800c946:	d11b      	bne.n	800c980 <_fflush_r+0x58>
 800c948:	686c      	ldr	r4, [r5, #4]
 800c94a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d0ef      	beq.n	800c932 <_fflush_r+0xa>
 800c952:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c954:	07d0      	lsls	r0, r2, #31
 800c956:	d404      	bmi.n	800c962 <_fflush_r+0x3a>
 800c958:	0599      	lsls	r1, r3, #22
 800c95a:	d402      	bmi.n	800c962 <_fflush_r+0x3a>
 800c95c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c95e:	f000 f927 	bl	800cbb0 <__retarget_lock_acquire_recursive>
 800c962:	4628      	mov	r0, r5
 800c964:	4621      	mov	r1, r4
 800c966:	f7ff ff59 	bl	800c81c <__sflush_r>
 800c96a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c96c:	07da      	lsls	r2, r3, #31
 800c96e:	4605      	mov	r5, r0
 800c970:	d4e0      	bmi.n	800c934 <_fflush_r+0xc>
 800c972:	89a3      	ldrh	r3, [r4, #12]
 800c974:	059b      	lsls	r3, r3, #22
 800c976:	d4dd      	bmi.n	800c934 <_fflush_r+0xc>
 800c978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c97a:	f000 f91a 	bl	800cbb2 <__retarget_lock_release_recursive>
 800c97e:	e7d9      	b.n	800c934 <_fflush_r+0xc>
 800c980:	4b05      	ldr	r3, [pc, #20]	; (800c998 <_fflush_r+0x70>)
 800c982:	429c      	cmp	r4, r3
 800c984:	d101      	bne.n	800c98a <_fflush_r+0x62>
 800c986:	68ac      	ldr	r4, [r5, #8]
 800c988:	e7df      	b.n	800c94a <_fflush_r+0x22>
 800c98a:	4b04      	ldr	r3, [pc, #16]	; (800c99c <_fflush_r+0x74>)
 800c98c:	429c      	cmp	r4, r3
 800c98e:	bf08      	it	eq
 800c990:	68ec      	ldreq	r4, [r5, #12]
 800c992:	e7da      	b.n	800c94a <_fflush_r+0x22>
 800c994:	080103cc 	.word	0x080103cc
 800c998:	080103ec 	.word	0x080103ec
 800c99c:	080103ac 	.word	0x080103ac

0800c9a0 <std>:
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	b510      	push	{r4, lr}
 800c9a4:	4604      	mov	r4, r0
 800c9a6:	e9c0 3300 	strd	r3, r3, [r0]
 800c9aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9ae:	6083      	str	r3, [r0, #8]
 800c9b0:	8181      	strh	r1, [r0, #12]
 800c9b2:	6643      	str	r3, [r0, #100]	; 0x64
 800c9b4:	81c2      	strh	r2, [r0, #14]
 800c9b6:	6183      	str	r3, [r0, #24]
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	2208      	movs	r2, #8
 800c9bc:	305c      	adds	r0, #92	; 0x5c
 800c9be:	f7fb fb7d 	bl	80080bc <memset>
 800c9c2:	4b05      	ldr	r3, [pc, #20]	; (800c9d8 <std+0x38>)
 800c9c4:	6263      	str	r3, [r4, #36]	; 0x24
 800c9c6:	4b05      	ldr	r3, [pc, #20]	; (800c9dc <std+0x3c>)
 800c9c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9ca:	4b05      	ldr	r3, [pc, #20]	; (800c9e0 <std+0x40>)
 800c9cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9ce:	4b05      	ldr	r3, [pc, #20]	; (800c9e4 <std+0x44>)
 800c9d0:	6224      	str	r4, [r4, #32]
 800c9d2:	6323      	str	r3, [r4, #48]	; 0x30
 800c9d4:	bd10      	pop	{r4, pc}
 800c9d6:	bf00      	nop
 800c9d8:	08008e65 	.word	0x08008e65
 800c9dc:	08008e8b 	.word	0x08008e8b
 800c9e0:	08008ec3 	.word	0x08008ec3
 800c9e4:	08008ee7 	.word	0x08008ee7

0800c9e8 <_cleanup_r>:
 800c9e8:	4901      	ldr	r1, [pc, #4]	; (800c9f0 <_cleanup_r+0x8>)
 800c9ea:	f000 b8c1 	b.w	800cb70 <_fwalk_reent>
 800c9ee:	bf00      	nop
 800c9f0:	0800c929 	.word	0x0800c929

0800c9f4 <__sfmoreglue>:
 800c9f4:	b570      	push	{r4, r5, r6, lr}
 800c9f6:	2268      	movs	r2, #104	; 0x68
 800c9f8:	1e4d      	subs	r5, r1, #1
 800c9fa:	4355      	muls	r5, r2
 800c9fc:	460e      	mov	r6, r1
 800c9fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca02:	f7ff f8c5 	bl	800bb90 <_malloc_r>
 800ca06:	4604      	mov	r4, r0
 800ca08:	b140      	cbz	r0, 800ca1c <__sfmoreglue+0x28>
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	e9c0 1600 	strd	r1, r6, [r0]
 800ca10:	300c      	adds	r0, #12
 800ca12:	60a0      	str	r0, [r4, #8]
 800ca14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca18:	f7fb fb50 	bl	80080bc <memset>
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	bd70      	pop	{r4, r5, r6, pc}

0800ca20 <__sfp_lock_acquire>:
 800ca20:	4801      	ldr	r0, [pc, #4]	; (800ca28 <__sfp_lock_acquire+0x8>)
 800ca22:	f000 b8c5 	b.w	800cbb0 <__retarget_lock_acquire_recursive>
 800ca26:	bf00      	nop
 800ca28:	20009d0d 	.word	0x20009d0d

0800ca2c <__sfp_lock_release>:
 800ca2c:	4801      	ldr	r0, [pc, #4]	; (800ca34 <__sfp_lock_release+0x8>)
 800ca2e:	f000 b8c0 	b.w	800cbb2 <__retarget_lock_release_recursive>
 800ca32:	bf00      	nop
 800ca34:	20009d0d 	.word	0x20009d0d

0800ca38 <__sinit_lock_acquire>:
 800ca38:	4801      	ldr	r0, [pc, #4]	; (800ca40 <__sinit_lock_acquire+0x8>)
 800ca3a:	f000 b8b9 	b.w	800cbb0 <__retarget_lock_acquire_recursive>
 800ca3e:	bf00      	nop
 800ca40:	20009d0e 	.word	0x20009d0e

0800ca44 <__sinit_lock_release>:
 800ca44:	4801      	ldr	r0, [pc, #4]	; (800ca4c <__sinit_lock_release+0x8>)
 800ca46:	f000 b8b4 	b.w	800cbb2 <__retarget_lock_release_recursive>
 800ca4a:	bf00      	nop
 800ca4c:	20009d0e 	.word	0x20009d0e

0800ca50 <__sinit>:
 800ca50:	b510      	push	{r4, lr}
 800ca52:	4604      	mov	r4, r0
 800ca54:	f7ff fff0 	bl	800ca38 <__sinit_lock_acquire>
 800ca58:	69a3      	ldr	r3, [r4, #24]
 800ca5a:	b11b      	cbz	r3, 800ca64 <__sinit+0x14>
 800ca5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca60:	f7ff bff0 	b.w	800ca44 <__sinit_lock_release>
 800ca64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ca68:	6523      	str	r3, [r4, #80]	; 0x50
 800ca6a:	4b13      	ldr	r3, [pc, #76]	; (800cab8 <__sinit+0x68>)
 800ca6c:	4a13      	ldr	r2, [pc, #76]	; (800cabc <__sinit+0x6c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca72:	42a3      	cmp	r3, r4
 800ca74:	bf04      	itt	eq
 800ca76:	2301      	moveq	r3, #1
 800ca78:	61a3      	streq	r3, [r4, #24]
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f000 f820 	bl	800cac0 <__sfp>
 800ca80:	6060      	str	r0, [r4, #4]
 800ca82:	4620      	mov	r0, r4
 800ca84:	f000 f81c 	bl	800cac0 <__sfp>
 800ca88:	60a0      	str	r0, [r4, #8]
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	f000 f818 	bl	800cac0 <__sfp>
 800ca90:	2200      	movs	r2, #0
 800ca92:	60e0      	str	r0, [r4, #12]
 800ca94:	2104      	movs	r1, #4
 800ca96:	6860      	ldr	r0, [r4, #4]
 800ca98:	f7ff ff82 	bl	800c9a0 <std>
 800ca9c:	68a0      	ldr	r0, [r4, #8]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	2109      	movs	r1, #9
 800caa2:	f7ff ff7d 	bl	800c9a0 <std>
 800caa6:	68e0      	ldr	r0, [r4, #12]
 800caa8:	2202      	movs	r2, #2
 800caaa:	2112      	movs	r1, #18
 800caac:	f7ff ff78 	bl	800c9a0 <std>
 800cab0:	2301      	movs	r3, #1
 800cab2:	61a3      	str	r3, [r4, #24]
 800cab4:	e7d2      	b.n	800ca5c <__sinit+0xc>
 800cab6:	bf00      	nop
 800cab8:	0800ff50 	.word	0x0800ff50
 800cabc:	0800c9e9 	.word	0x0800c9e9

0800cac0 <__sfp>:
 800cac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac2:	4607      	mov	r7, r0
 800cac4:	f7ff ffac 	bl	800ca20 <__sfp_lock_acquire>
 800cac8:	4b1e      	ldr	r3, [pc, #120]	; (800cb44 <__sfp+0x84>)
 800caca:	681e      	ldr	r6, [r3, #0]
 800cacc:	69b3      	ldr	r3, [r6, #24]
 800cace:	b913      	cbnz	r3, 800cad6 <__sfp+0x16>
 800cad0:	4630      	mov	r0, r6
 800cad2:	f7ff ffbd 	bl	800ca50 <__sinit>
 800cad6:	3648      	adds	r6, #72	; 0x48
 800cad8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cadc:	3b01      	subs	r3, #1
 800cade:	d503      	bpl.n	800cae8 <__sfp+0x28>
 800cae0:	6833      	ldr	r3, [r6, #0]
 800cae2:	b30b      	cbz	r3, 800cb28 <__sfp+0x68>
 800cae4:	6836      	ldr	r6, [r6, #0]
 800cae6:	e7f7      	b.n	800cad8 <__sfp+0x18>
 800cae8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800caec:	b9d5      	cbnz	r5, 800cb24 <__sfp+0x64>
 800caee:	4b16      	ldr	r3, [pc, #88]	; (800cb48 <__sfp+0x88>)
 800caf0:	60e3      	str	r3, [r4, #12]
 800caf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800caf6:	6665      	str	r5, [r4, #100]	; 0x64
 800caf8:	f000 f859 	bl	800cbae <__retarget_lock_init_recursive>
 800cafc:	f7ff ff96 	bl	800ca2c <__sfp_lock_release>
 800cb00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cb04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cb08:	6025      	str	r5, [r4, #0]
 800cb0a:	61a5      	str	r5, [r4, #24]
 800cb0c:	2208      	movs	r2, #8
 800cb0e:	4629      	mov	r1, r5
 800cb10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb14:	f7fb fad2 	bl	80080bc <memset>
 800cb18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb20:	4620      	mov	r0, r4
 800cb22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb24:	3468      	adds	r4, #104	; 0x68
 800cb26:	e7d9      	b.n	800cadc <__sfp+0x1c>
 800cb28:	2104      	movs	r1, #4
 800cb2a:	4638      	mov	r0, r7
 800cb2c:	f7ff ff62 	bl	800c9f4 <__sfmoreglue>
 800cb30:	4604      	mov	r4, r0
 800cb32:	6030      	str	r0, [r6, #0]
 800cb34:	2800      	cmp	r0, #0
 800cb36:	d1d5      	bne.n	800cae4 <__sfp+0x24>
 800cb38:	f7ff ff78 	bl	800ca2c <__sfp_lock_release>
 800cb3c:	230c      	movs	r3, #12
 800cb3e:	603b      	str	r3, [r7, #0]
 800cb40:	e7ee      	b.n	800cb20 <__sfp+0x60>
 800cb42:	bf00      	nop
 800cb44:	0800ff50 	.word	0x0800ff50
 800cb48:	ffff0001 	.word	0xffff0001

0800cb4c <fiprintf>:
 800cb4c:	b40e      	push	{r1, r2, r3}
 800cb4e:	b503      	push	{r0, r1, lr}
 800cb50:	4601      	mov	r1, r0
 800cb52:	ab03      	add	r3, sp, #12
 800cb54:	4805      	ldr	r0, [pc, #20]	; (800cb6c <fiprintf+0x20>)
 800cb56:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb5a:	6800      	ldr	r0, [r0, #0]
 800cb5c:	9301      	str	r3, [sp, #4]
 800cb5e:	f000 f8a7 	bl	800ccb0 <_vfiprintf_r>
 800cb62:	b002      	add	sp, #8
 800cb64:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb68:	b003      	add	sp, #12
 800cb6a:	4770      	bx	lr
 800cb6c:	2000001c 	.word	0x2000001c

0800cb70 <_fwalk_reent>:
 800cb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb74:	4606      	mov	r6, r0
 800cb76:	4688      	mov	r8, r1
 800cb78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb7c:	2700      	movs	r7, #0
 800cb7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb82:	f1b9 0901 	subs.w	r9, r9, #1
 800cb86:	d505      	bpl.n	800cb94 <_fwalk_reent+0x24>
 800cb88:	6824      	ldr	r4, [r4, #0]
 800cb8a:	2c00      	cmp	r4, #0
 800cb8c:	d1f7      	bne.n	800cb7e <_fwalk_reent+0xe>
 800cb8e:	4638      	mov	r0, r7
 800cb90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb94:	89ab      	ldrh	r3, [r5, #12]
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d907      	bls.n	800cbaa <_fwalk_reent+0x3a>
 800cb9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	d003      	beq.n	800cbaa <_fwalk_reent+0x3a>
 800cba2:	4629      	mov	r1, r5
 800cba4:	4630      	mov	r0, r6
 800cba6:	47c0      	blx	r8
 800cba8:	4307      	orrs	r7, r0
 800cbaa:	3568      	adds	r5, #104	; 0x68
 800cbac:	e7e9      	b.n	800cb82 <_fwalk_reent+0x12>

0800cbae <__retarget_lock_init_recursive>:
 800cbae:	4770      	bx	lr

0800cbb0 <__retarget_lock_acquire_recursive>:
 800cbb0:	4770      	bx	lr

0800cbb2 <__retarget_lock_release_recursive>:
 800cbb2:	4770      	bx	lr

0800cbb4 <memmove>:
 800cbb4:	4288      	cmp	r0, r1
 800cbb6:	b510      	push	{r4, lr}
 800cbb8:	eb01 0402 	add.w	r4, r1, r2
 800cbbc:	d902      	bls.n	800cbc4 <memmove+0x10>
 800cbbe:	4284      	cmp	r4, r0
 800cbc0:	4623      	mov	r3, r4
 800cbc2:	d807      	bhi.n	800cbd4 <memmove+0x20>
 800cbc4:	1e43      	subs	r3, r0, #1
 800cbc6:	42a1      	cmp	r1, r4
 800cbc8:	d008      	beq.n	800cbdc <memmove+0x28>
 800cbca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbd2:	e7f8      	b.n	800cbc6 <memmove+0x12>
 800cbd4:	4402      	add	r2, r0
 800cbd6:	4601      	mov	r1, r0
 800cbd8:	428a      	cmp	r2, r1
 800cbda:	d100      	bne.n	800cbde <memmove+0x2a>
 800cbdc:	bd10      	pop	{r4, pc}
 800cbde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbe6:	e7f7      	b.n	800cbd8 <memmove+0x24>

0800cbe8 <__malloc_lock>:
 800cbe8:	4801      	ldr	r0, [pc, #4]	; (800cbf0 <__malloc_lock+0x8>)
 800cbea:	f7ff bfe1 	b.w	800cbb0 <__retarget_lock_acquire_recursive>
 800cbee:	bf00      	nop
 800cbf0:	20009d0c 	.word	0x20009d0c

0800cbf4 <__malloc_unlock>:
 800cbf4:	4801      	ldr	r0, [pc, #4]	; (800cbfc <__malloc_unlock+0x8>)
 800cbf6:	f7ff bfdc 	b.w	800cbb2 <__retarget_lock_release_recursive>
 800cbfa:	bf00      	nop
 800cbfc:	20009d0c 	.word	0x20009d0c

0800cc00 <_realloc_r>:
 800cc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc04:	4680      	mov	r8, r0
 800cc06:	4614      	mov	r4, r2
 800cc08:	460e      	mov	r6, r1
 800cc0a:	b921      	cbnz	r1, 800cc16 <_realloc_r+0x16>
 800cc0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc10:	4611      	mov	r1, r2
 800cc12:	f7fe bfbd 	b.w	800bb90 <_malloc_r>
 800cc16:	b92a      	cbnz	r2, 800cc24 <_realloc_r+0x24>
 800cc18:	f7fe ff4e 	bl	800bab8 <_free_r>
 800cc1c:	4625      	mov	r5, r4
 800cc1e:	4628      	mov	r0, r5
 800cc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc24:	f000 faa0 	bl	800d168 <_malloc_usable_size_r>
 800cc28:	4284      	cmp	r4, r0
 800cc2a:	4607      	mov	r7, r0
 800cc2c:	d802      	bhi.n	800cc34 <_realloc_r+0x34>
 800cc2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc32:	d812      	bhi.n	800cc5a <_realloc_r+0x5a>
 800cc34:	4621      	mov	r1, r4
 800cc36:	4640      	mov	r0, r8
 800cc38:	f7fe ffaa 	bl	800bb90 <_malloc_r>
 800cc3c:	4605      	mov	r5, r0
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d0ed      	beq.n	800cc1e <_realloc_r+0x1e>
 800cc42:	42bc      	cmp	r4, r7
 800cc44:	4622      	mov	r2, r4
 800cc46:	4631      	mov	r1, r6
 800cc48:	bf28      	it	cs
 800cc4a:	463a      	movcs	r2, r7
 800cc4c:	f7fe fa4e 	bl	800b0ec <memcpy>
 800cc50:	4631      	mov	r1, r6
 800cc52:	4640      	mov	r0, r8
 800cc54:	f7fe ff30 	bl	800bab8 <_free_r>
 800cc58:	e7e1      	b.n	800cc1e <_realloc_r+0x1e>
 800cc5a:	4635      	mov	r5, r6
 800cc5c:	e7df      	b.n	800cc1e <_realloc_r+0x1e>

0800cc5e <__sfputc_r>:
 800cc5e:	6893      	ldr	r3, [r2, #8]
 800cc60:	3b01      	subs	r3, #1
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	b410      	push	{r4}
 800cc66:	6093      	str	r3, [r2, #8]
 800cc68:	da08      	bge.n	800cc7c <__sfputc_r+0x1e>
 800cc6a:	6994      	ldr	r4, [r2, #24]
 800cc6c:	42a3      	cmp	r3, r4
 800cc6e:	db01      	blt.n	800cc74 <__sfputc_r+0x16>
 800cc70:	290a      	cmp	r1, #10
 800cc72:	d103      	bne.n	800cc7c <__sfputc_r+0x1e>
 800cc74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc78:	f000 b94a 	b.w	800cf10 <__swbuf_r>
 800cc7c:	6813      	ldr	r3, [r2, #0]
 800cc7e:	1c58      	adds	r0, r3, #1
 800cc80:	6010      	str	r0, [r2, #0]
 800cc82:	7019      	strb	r1, [r3, #0]
 800cc84:	4608      	mov	r0, r1
 800cc86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <__sfputs_r>:
 800cc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc8e:	4606      	mov	r6, r0
 800cc90:	460f      	mov	r7, r1
 800cc92:	4614      	mov	r4, r2
 800cc94:	18d5      	adds	r5, r2, r3
 800cc96:	42ac      	cmp	r4, r5
 800cc98:	d101      	bne.n	800cc9e <__sfputs_r+0x12>
 800cc9a:	2000      	movs	r0, #0
 800cc9c:	e007      	b.n	800ccae <__sfputs_r+0x22>
 800cc9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cca2:	463a      	mov	r2, r7
 800cca4:	4630      	mov	r0, r6
 800cca6:	f7ff ffda 	bl	800cc5e <__sfputc_r>
 800ccaa:	1c43      	adds	r3, r0, #1
 800ccac:	d1f3      	bne.n	800cc96 <__sfputs_r+0xa>
 800ccae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ccb0 <_vfiprintf_r>:
 800ccb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb4:	460d      	mov	r5, r1
 800ccb6:	b09d      	sub	sp, #116	; 0x74
 800ccb8:	4614      	mov	r4, r2
 800ccba:	4698      	mov	r8, r3
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	b118      	cbz	r0, 800ccc8 <_vfiprintf_r+0x18>
 800ccc0:	6983      	ldr	r3, [r0, #24]
 800ccc2:	b90b      	cbnz	r3, 800ccc8 <_vfiprintf_r+0x18>
 800ccc4:	f7ff fec4 	bl	800ca50 <__sinit>
 800ccc8:	4b89      	ldr	r3, [pc, #548]	; (800cef0 <_vfiprintf_r+0x240>)
 800ccca:	429d      	cmp	r5, r3
 800cccc:	d11b      	bne.n	800cd06 <_vfiprintf_r+0x56>
 800ccce:	6875      	ldr	r5, [r6, #4]
 800ccd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccd2:	07d9      	lsls	r1, r3, #31
 800ccd4:	d405      	bmi.n	800cce2 <_vfiprintf_r+0x32>
 800ccd6:	89ab      	ldrh	r3, [r5, #12]
 800ccd8:	059a      	lsls	r2, r3, #22
 800ccda:	d402      	bmi.n	800cce2 <_vfiprintf_r+0x32>
 800ccdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccde:	f7ff ff67 	bl	800cbb0 <__retarget_lock_acquire_recursive>
 800cce2:	89ab      	ldrh	r3, [r5, #12]
 800cce4:	071b      	lsls	r3, r3, #28
 800cce6:	d501      	bpl.n	800ccec <_vfiprintf_r+0x3c>
 800cce8:	692b      	ldr	r3, [r5, #16]
 800ccea:	b9eb      	cbnz	r3, 800cd28 <_vfiprintf_r+0x78>
 800ccec:	4629      	mov	r1, r5
 800ccee:	4630      	mov	r0, r6
 800ccf0:	f000 f960 	bl	800cfb4 <__swsetup_r>
 800ccf4:	b1c0      	cbz	r0, 800cd28 <_vfiprintf_r+0x78>
 800ccf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccf8:	07dc      	lsls	r4, r3, #31
 800ccfa:	d50e      	bpl.n	800cd1a <_vfiprintf_r+0x6a>
 800ccfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cd00:	b01d      	add	sp, #116	; 0x74
 800cd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd06:	4b7b      	ldr	r3, [pc, #492]	; (800cef4 <_vfiprintf_r+0x244>)
 800cd08:	429d      	cmp	r5, r3
 800cd0a:	d101      	bne.n	800cd10 <_vfiprintf_r+0x60>
 800cd0c:	68b5      	ldr	r5, [r6, #8]
 800cd0e:	e7df      	b.n	800ccd0 <_vfiprintf_r+0x20>
 800cd10:	4b79      	ldr	r3, [pc, #484]	; (800cef8 <_vfiprintf_r+0x248>)
 800cd12:	429d      	cmp	r5, r3
 800cd14:	bf08      	it	eq
 800cd16:	68f5      	ldreq	r5, [r6, #12]
 800cd18:	e7da      	b.n	800ccd0 <_vfiprintf_r+0x20>
 800cd1a:	89ab      	ldrh	r3, [r5, #12]
 800cd1c:	0598      	lsls	r0, r3, #22
 800cd1e:	d4ed      	bmi.n	800ccfc <_vfiprintf_r+0x4c>
 800cd20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd22:	f7ff ff46 	bl	800cbb2 <__retarget_lock_release_recursive>
 800cd26:	e7e9      	b.n	800ccfc <_vfiprintf_r+0x4c>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd2c:	2320      	movs	r3, #32
 800cd2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd32:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd36:	2330      	movs	r3, #48	; 0x30
 800cd38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cefc <_vfiprintf_r+0x24c>
 800cd3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd40:	f04f 0901 	mov.w	r9, #1
 800cd44:	4623      	mov	r3, r4
 800cd46:	469a      	mov	sl, r3
 800cd48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd4c:	b10a      	cbz	r2, 800cd52 <_vfiprintf_r+0xa2>
 800cd4e:	2a25      	cmp	r2, #37	; 0x25
 800cd50:	d1f9      	bne.n	800cd46 <_vfiprintf_r+0x96>
 800cd52:	ebba 0b04 	subs.w	fp, sl, r4
 800cd56:	d00b      	beq.n	800cd70 <_vfiprintf_r+0xc0>
 800cd58:	465b      	mov	r3, fp
 800cd5a:	4622      	mov	r2, r4
 800cd5c:	4629      	mov	r1, r5
 800cd5e:	4630      	mov	r0, r6
 800cd60:	f7ff ff94 	bl	800cc8c <__sfputs_r>
 800cd64:	3001      	adds	r0, #1
 800cd66:	f000 80aa 	beq.w	800cebe <_vfiprintf_r+0x20e>
 800cd6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd6c:	445a      	add	r2, fp
 800cd6e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd70:	f89a 3000 	ldrb.w	r3, [sl]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f000 80a2 	beq.w	800cebe <_vfiprintf_r+0x20e>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd84:	f10a 0a01 	add.w	sl, sl, #1
 800cd88:	9304      	str	r3, [sp, #16]
 800cd8a:	9307      	str	r3, [sp, #28]
 800cd8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd90:	931a      	str	r3, [sp, #104]	; 0x68
 800cd92:	4654      	mov	r4, sl
 800cd94:	2205      	movs	r2, #5
 800cd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd9a:	4858      	ldr	r0, [pc, #352]	; (800cefc <_vfiprintf_r+0x24c>)
 800cd9c:	f7f3 fa38 	bl	8000210 <memchr>
 800cda0:	9a04      	ldr	r2, [sp, #16]
 800cda2:	b9d8      	cbnz	r0, 800cddc <_vfiprintf_r+0x12c>
 800cda4:	06d1      	lsls	r1, r2, #27
 800cda6:	bf44      	itt	mi
 800cda8:	2320      	movmi	r3, #32
 800cdaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdae:	0713      	lsls	r3, r2, #28
 800cdb0:	bf44      	itt	mi
 800cdb2:	232b      	movmi	r3, #43	; 0x2b
 800cdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdb8:	f89a 3000 	ldrb.w	r3, [sl]
 800cdbc:	2b2a      	cmp	r3, #42	; 0x2a
 800cdbe:	d015      	beq.n	800cdec <_vfiprintf_r+0x13c>
 800cdc0:	9a07      	ldr	r2, [sp, #28]
 800cdc2:	4654      	mov	r4, sl
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	f04f 0c0a 	mov.w	ip, #10
 800cdca:	4621      	mov	r1, r4
 800cdcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdd0:	3b30      	subs	r3, #48	; 0x30
 800cdd2:	2b09      	cmp	r3, #9
 800cdd4:	d94e      	bls.n	800ce74 <_vfiprintf_r+0x1c4>
 800cdd6:	b1b0      	cbz	r0, 800ce06 <_vfiprintf_r+0x156>
 800cdd8:	9207      	str	r2, [sp, #28]
 800cdda:	e014      	b.n	800ce06 <_vfiprintf_r+0x156>
 800cddc:	eba0 0308 	sub.w	r3, r0, r8
 800cde0:	fa09 f303 	lsl.w	r3, r9, r3
 800cde4:	4313      	orrs	r3, r2
 800cde6:	9304      	str	r3, [sp, #16]
 800cde8:	46a2      	mov	sl, r4
 800cdea:	e7d2      	b.n	800cd92 <_vfiprintf_r+0xe2>
 800cdec:	9b03      	ldr	r3, [sp, #12]
 800cdee:	1d19      	adds	r1, r3, #4
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	9103      	str	r1, [sp, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	bfbb      	ittet	lt
 800cdf8:	425b      	neglt	r3, r3
 800cdfa:	f042 0202 	orrlt.w	r2, r2, #2
 800cdfe:	9307      	strge	r3, [sp, #28]
 800ce00:	9307      	strlt	r3, [sp, #28]
 800ce02:	bfb8      	it	lt
 800ce04:	9204      	strlt	r2, [sp, #16]
 800ce06:	7823      	ldrb	r3, [r4, #0]
 800ce08:	2b2e      	cmp	r3, #46	; 0x2e
 800ce0a:	d10c      	bne.n	800ce26 <_vfiprintf_r+0x176>
 800ce0c:	7863      	ldrb	r3, [r4, #1]
 800ce0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ce10:	d135      	bne.n	800ce7e <_vfiprintf_r+0x1ce>
 800ce12:	9b03      	ldr	r3, [sp, #12]
 800ce14:	1d1a      	adds	r2, r3, #4
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	9203      	str	r2, [sp, #12]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	bfb8      	it	lt
 800ce1e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce22:	3402      	adds	r4, #2
 800ce24:	9305      	str	r3, [sp, #20]
 800ce26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cf0c <_vfiprintf_r+0x25c>
 800ce2a:	7821      	ldrb	r1, [r4, #0]
 800ce2c:	2203      	movs	r2, #3
 800ce2e:	4650      	mov	r0, sl
 800ce30:	f7f3 f9ee 	bl	8000210 <memchr>
 800ce34:	b140      	cbz	r0, 800ce48 <_vfiprintf_r+0x198>
 800ce36:	2340      	movs	r3, #64	; 0x40
 800ce38:	eba0 000a 	sub.w	r0, r0, sl
 800ce3c:	fa03 f000 	lsl.w	r0, r3, r0
 800ce40:	9b04      	ldr	r3, [sp, #16]
 800ce42:	4303      	orrs	r3, r0
 800ce44:	3401      	adds	r4, #1
 800ce46:	9304      	str	r3, [sp, #16]
 800ce48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce4c:	482c      	ldr	r0, [pc, #176]	; (800cf00 <_vfiprintf_r+0x250>)
 800ce4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce52:	2206      	movs	r2, #6
 800ce54:	f7f3 f9dc 	bl	8000210 <memchr>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d03f      	beq.n	800cedc <_vfiprintf_r+0x22c>
 800ce5c:	4b29      	ldr	r3, [pc, #164]	; (800cf04 <_vfiprintf_r+0x254>)
 800ce5e:	bb1b      	cbnz	r3, 800cea8 <_vfiprintf_r+0x1f8>
 800ce60:	9b03      	ldr	r3, [sp, #12]
 800ce62:	3307      	adds	r3, #7
 800ce64:	f023 0307 	bic.w	r3, r3, #7
 800ce68:	3308      	adds	r3, #8
 800ce6a:	9303      	str	r3, [sp, #12]
 800ce6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce6e:	443b      	add	r3, r7
 800ce70:	9309      	str	r3, [sp, #36]	; 0x24
 800ce72:	e767      	b.n	800cd44 <_vfiprintf_r+0x94>
 800ce74:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce78:	460c      	mov	r4, r1
 800ce7a:	2001      	movs	r0, #1
 800ce7c:	e7a5      	b.n	800cdca <_vfiprintf_r+0x11a>
 800ce7e:	2300      	movs	r3, #0
 800ce80:	3401      	adds	r4, #1
 800ce82:	9305      	str	r3, [sp, #20]
 800ce84:	4619      	mov	r1, r3
 800ce86:	f04f 0c0a 	mov.w	ip, #10
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce90:	3a30      	subs	r2, #48	; 0x30
 800ce92:	2a09      	cmp	r2, #9
 800ce94:	d903      	bls.n	800ce9e <_vfiprintf_r+0x1ee>
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d0c5      	beq.n	800ce26 <_vfiprintf_r+0x176>
 800ce9a:	9105      	str	r1, [sp, #20]
 800ce9c:	e7c3      	b.n	800ce26 <_vfiprintf_r+0x176>
 800ce9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cea2:	4604      	mov	r4, r0
 800cea4:	2301      	movs	r3, #1
 800cea6:	e7f0      	b.n	800ce8a <_vfiprintf_r+0x1da>
 800cea8:	ab03      	add	r3, sp, #12
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	462a      	mov	r2, r5
 800ceae:	4b16      	ldr	r3, [pc, #88]	; (800cf08 <_vfiprintf_r+0x258>)
 800ceb0:	a904      	add	r1, sp, #16
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f7fb f9aa 	bl	800820c <_printf_float>
 800ceb8:	4607      	mov	r7, r0
 800ceba:	1c78      	adds	r0, r7, #1
 800cebc:	d1d6      	bne.n	800ce6c <_vfiprintf_r+0x1bc>
 800cebe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cec0:	07d9      	lsls	r1, r3, #31
 800cec2:	d405      	bmi.n	800ced0 <_vfiprintf_r+0x220>
 800cec4:	89ab      	ldrh	r3, [r5, #12]
 800cec6:	059a      	lsls	r2, r3, #22
 800cec8:	d402      	bmi.n	800ced0 <_vfiprintf_r+0x220>
 800ceca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cecc:	f7ff fe71 	bl	800cbb2 <__retarget_lock_release_recursive>
 800ced0:	89ab      	ldrh	r3, [r5, #12]
 800ced2:	065b      	lsls	r3, r3, #25
 800ced4:	f53f af12 	bmi.w	800ccfc <_vfiprintf_r+0x4c>
 800ced8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ceda:	e711      	b.n	800cd00 <_vfiprintf_r+0x50>
 800cedc:	ab03      	add	r3, sp, #12
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	462a      	mov	r2, r5
 800cee2:	4b09      	ldr	r3, [pc, #36]	; (800cf08 <_vfiprintf_r+0x258>)
 800cee4:	a904      	add	r1, sp, #16
 800cee6:	4630      	mov	r0, r6
 800cee8:	f7fb fc34 	bl	8008754 <_printf_i>
 800ceec:	e7e4      	b.n	800ceb8 <_vfiprintf_r+0x208>
 800ceee:	bf00      	nop
 800cef0:	080103cc 	.word	0x080103cc
 800cef4:	080103ec 	.word	0x080103ec
 800cef8:	080103ac 	.word	0x080103ac
 800cefc:	08010344 	.word	0x08010344
 800cf00:	0801034e 	.word	0x0801034e
 800cf04:	0800820d 	.word	0x0800820d
 800cf08:	0800cc8d 	.word	0x0800cc8d
 800cf0c:	0801034a 	.word	0x0801034a

0800cf10 <__swbuf_r>:
 800cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf12:	460e      	mov	r6, r1
 800cf14:	4614      	mov	r4, r2
 800cf16:	4605      	mov	r5, r0
 800cf18:	b118      	cbz	r0, 800cf22 <__swbuf_r+0x12>
 800cf1a:	6983      	ldr	r3, [r0, #24]
 800cf1c:	b90b      	cbnz	r3, 800cf22 <__swbuf_r+0x12>
 800cf1e:	f7ff fd97 	bl	800ca50 <__sinit>
 800cf22:	4b21      	ldr	r3, [pc, #132]	; (800cfa8 <__swbuf_r+0x98>)
 800cf24:	429c      	cmp	r4, r3
 800cf26:	d12b      	bne.n	800cf80 <__swbuf_r+0x70>
 800cf28:	686c      	ldr	r4, [r5, #4]
 800cf2a:	69a3      	ldr	r3, [r4, #24]
 800cf2c:	60a3      	str	r3, [r4, #8]
 800cf2e:	89a3      	ldrh	r3, [r4, #12]
 800cf30:	071a      	lsls	r2, r3, #28
 800cf32:	d52f      	bpl.n	800cf94 <__swbuf_r+0x84>
 800cf34:	6923      	ldr	r3, [r4, #16]
 800cf36:	b36b      	cbz	r3, 800cf94 <__swbuf_r+0x84>
 800cf38:	6923      	ldr	r3, [r4, #16]
 800cf3a:	6820      	ldr	r0, [r4, #0]
 800cf3c:	1ac0      	subs	r0, r0, r3
 800cf3e:	6963      	ldr	r3, [r4, #20]
 800cf40:	b2f6      	uxtb	r6, r6
 800cf42:	4283      	cmp	r3, r0
 800cf44:	4637      	mov	r7, r6
 800cf46:	dc04      	bgt.n	800cf52 <__swbuf_r+0x42>
 800cf48:	4621      	mov	r1, r4
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	f7ff fcec 	bl	800c928 <_fflush_r>
 800cf50:	bb30      	cbnz	r0, 800cfa0 <__swbuf_r+0x90>
 800cf52:	68a3      	ldr	r3, [r4, #8]
 800cf54:	3b01      	subs	r3, #1
 800cf56:	60a3      	str	r3, [r4, #8]
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	1c5a      	adds	r2, r3, #1
 800cf5c:	6022      	str	r2, [r4, #0]
 800cf5e:	701e      	strb	r6, [r3, #0]
 800cf60:	6963      	ldr	r3, [r4, #20]
 800cf62:	3001      	adds	r0, #1
 800cf64:	4283      	cmp	r3, r0
 800cf66:	d004      	beq.n	800cf72 <__swbuf_r+0x62>
 800cf68:	89a3      	ldrh	r3, [r4, #12]
 800cf6a:	07db      	lsls	r3, r3, #31
 800cf6c:	d506      	bpl.n	800cf7c <__swbuf_r+0x6c>
 800cf6e:	2e0a      	cmp	r6, #10
 800cf70:	d104      	bne.n	800cf7c <__swbuf_r+0x6c>
 800cf72:	4621      	mov	r1, r4
 800cf74:	4628      	mov	r0, r5
 800cf76:	f7ff fcd7 	bl	800c928 <_fflush_r>
 800cf7a:	b988      	cbnz	r0, 800cfa0 <__swbuf_r+0x90>
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf80:	4b0a      	ldr	r3, [pc, #40]	; (800cfac <__swbuf_r+0x9c>)
 800cf82:	429c      	cmp	r4, r3
 800cf84:	d101      	bne.n	800cf8a <__swbuf_r+0x7a>
 800cf86:	68ac      	ldr	r4, [r5, #8]
 800cf88:	e7cf      	b.n	800cf2a <__swbuf_r+0x1a>
 800cf8a:	4b09      	ldr	r3, [pc, #36]	; (800cfb0 <__swbuf_r+0xa0>)
 800cf8c:	429c      	cmp	r4, r3
 800cf8e:	bf08      	it	eq
 800cf90:	68ec      	ldreq	r4, [r5, #12]
 800cf92:	e7ca      	b.n	800cf2a <__swbuf_r+0x1a>
 800cf94:	4621      	mov	r1, r4
 800cf96:	4628      	mov	r0, r5
 800cf98:	f000 f80c 	bl	800cfb4 <__swsetup_r>
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	d0cb      	beq.n	800cf38 <__swbuf_r+0x28>
 800cfa0:	f04f 37ff 	mov.w	r7, #4294967295
 800cfa4:	e7ea      	b.n	800cf7c <__swbuf_r+0x6c>
 800cfa6:	bf00      	nop
 800cfa8:	080103cc 	.word	0x080103cc
 800cfac:	080103ec 	.word	0x080103ec
 800cfb0:	080103ac 	.word	0x080103ac

0800cfb4 <__swsetup_r>:
 800cfb4:	4b32      	ldr	r3, [pc, #200]	; (800d080 <__swsetup_r+0xcc>)
 800cfb6:	b570      	push	{r4, r5, r6, lr}
 800cfb8:	681d      	ldr	r5, [r3, #0]
 800cfba:	4606      	mov	r6, r0
 800cfbc:	460c      	mov	r4, r1
 800cfbe:	b125      	cbz	r5, 800cfca <__swsetup_r+0x16>
 800cfc0:	69ab      	ldr	r3, [r5, #24]
 800cfc2:	b913      	cbnz	r3, 800cfca <__swsetup_r+0x16>
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	f7ff fd43 	bl	800ca50 <__sinit>
 800cfca:	4b2e      	ldr	r3, [pc, #184]	; (800d084 <__swsetup_r+0xd0>)
 800cfcc:	429c      	cmp	r4, r3
 800cfce:	d10f      	bne.n	800cff0 <__swsetup_r+0x3c>
 800cfd0:	686c      	ldr	r4, [r5, #4]
 800cfd2:	89a3      	ldrh	r3, [r4, #12]
 800cfd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfd8:	0719      	lsls	r1, r3, #28
 800cfda:	d42c      	bmi.n	800d036 <__swsetup_r+0x82>
 800cfdc:	06dd      	lsls	r5, r3, #27
 800cfde:	d411      	bmi.n	800d004 <__swsetup_r+0x50>
 800cfe0:	2309      	movs	r3, #9
 800cfe2:	6033      	str	r3, [r6, #0]
 800cfe4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cfe8:	81a3      	strh	r3, [r4, #12]
 800cfea:	f04f 30ff 	mov.w	r0, #4294967295
 800cfee:	e03e      	b.n	800d06e <__swsetup_r+0xba>
 800cff0:	4b25      	ldr	r3, [pc, #148]	; (800d088 <__swsetup_r+0xd4>)
 800cff2:	429c      	cmp	r4, r3
 800cff4:	d101      	bne.n	800cffa <__swsetup_r+0x46>
 800cff6:	68ac      	ldr	r4, [r5, #8]
 800cff8:	e7eb      	b.n	800cfd2 <__swsetup_r+0x1e>
 800cffa:	4b24      	ldr	r3, [pc, #144]	; (800d08c <__swsetup_r+0xd8>)
 800cffc:	429c      	cmp	r4, r3
 800cffe:	bf08      	it	eq
 800d000:	68ec      	ldreq	r4, [r5, #12]
 800d002:	e7e6      	b.n	800cfd2 <__swsetup_r+0x1e>
 800d004:	0758      	lsls	r0, r3, #29
 800d006:	d512      	bpl.n	800d02e <__swsetup_r+0x7a>
 800d008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d00a:	b141      	cbz	r1, 800d01e <__swsetup_r+0x6a>
 800d00c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d010:	4299      	cmp	r1, r3
 800d012:	d002      	beq.n	800d01a <__swsetup_r+0x66>
 800d014:	4630      	mov	r0, r6
 800d016:	f7fe fd4f 	bl	800bab8 <_free_r>
 800d01a:	2300      	movs	r3, #0
 800d01c:	6363      	str	r3, [r4, #52]	; 0x34
 800d01e:	89a3      	ldrh	r3, [r4, #12]
 800d020:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d024:	81a3      	strh	r3, [r4, #12]
 800d026:	2300      	movs	r3, #0
 800d028:	6063      	str	r3, [r4, #4]
 800d02a:	6923      	ldr	r3, [r4, #16]
 800d02c:	6023      	str	r3, [r4, #0]
 800d02e:	89a3      	ldrh	r3, [r4, #12]
 800d030:	f043 0308 	orr.w	r3, r3, #8
 800d034:	81a3      	strh	r3, [r4, #12]
 800d036:	6923      	ldr	r3, [r4, #16]
 800d038:	b94b      	cbnz	r3, 800d04e <__swsetup_r+0x9a>
 800d03a:	89a3      	ldrh	r3, [r4, #12]
 800d03c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d044:	d003      	beq.n	800d04e <__swsetup_r+0x9a>
 800d046:	4621      	mov	r1, r4
 800d048:	4630      	mov	r0, r6
 800d04a:	f000 f84d 	bl	800d0e8 <__smakebuf_r>
 800d04e:	89a0      	ldrh	r0, [r4, #12]
 800d050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d054:	f010 0301 	ands.w	r3, r0, #1
 800d058:	d00a      	beq.n	800d070 <__swsetup_r+0xbc>
 800d05a:	2300      	movs	r3, #0
 800d05c:	60a3      	str	r3, [r4, #8]
 800d05e:	6963      	ldr	r3, [r4, #20]
 800d060:	425b      	negs	r3, r3
 800d062:	61a3      	str	r3, [r4, #24]
 800d064:	6923      	ldr	r3, [r4, #16]
 800d066:	b943      	cbnz	r3, 800d07a <__swsetup_r+0xc6>
 800d068:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d06c:	d1ba      	bne.n	800cfe4 <__swsetup_r+0x30>
 800d06e:	bd70      	pop	{r4, r5, r6, pc}
 800d070:	0781      	lsls	r1, r0, #30
 800d072:	bf58      	it	pl
 800d074:	6963      	ldrpl	r3, [r4, #20]
 800d076:	60a3      	str	r3, [r4, #8]
 800d078:	e7f4      	b.n	800d064 <__swsetup_r+0xb0>
 800d07a:	2000      	movs	r0, #0
 800d07c:	e7f7      	b.n	800d06e <__swsetup_r+0xba>
 800d07e:	bf00      	nop
 800d080:	2000001c 	.word	0x2000001c
 800d084:	080103cc 	.word	0x080103cc
 800d088:	080103ec 	.word	0x080103ec
 800d08c:	080103ac 	.word	0x080103ac

0800d090 <abort>:
 800d090:	b508      	push	{r3, lr}
 800d092:	2006      	movs	r0, #6
 800d094:	f000 f898 	bl	800d1c8 <raise>
 800d098:	2001      	movs	r0, #1
 800d09a:	f7f8 f802 	bl	80050a2 <_exit>

0800d09e <__swhatbuf_r>:
 800d09e:	b570      	push	{r4, r5, r6, lr}
 800d0a0:	460e      	mov	r6, r1
 800d0a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0a6:	2900      	cmp	r1, #0
 800d0a8:	b096      	sub	sp, #88	; 0x58
 800d0aa:	4614      	mov	r4, r2
 800d0ac:	461d      	mov	r5, r3
 800d0ae:	da08      	bge.n	800d0c2 <__swhatbuf_r+0x24>
 800d0b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	602a      	str	r2, [r5, #0]
 800d0b8:	061a      	lsls	r2, r3, #24
 800d0ba:	d410      	bmi.n	800d0de <__swhatbuf_r+0x40>
 800d0bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0c0:	e00e      	b.n	800d0e0 <__swhatbuf_r+0x42>
 800d0c2:	466a      	mov	r2, sp
 800d0c4:	f000 f89c 	bl	800d200 <_fstat_r>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	dbf1      	blt.n	800d0b0 <__swhatbuf_r+0x12>
 800d0cc:	9a01      	ldr	r2, [sp, #4]
 800d0ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d0d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d0d6:	425a      	negs	r2, r3
 800d0d8:	415a      	adcs	r2, r3
 800d0da:	602a      	str	r2, [r5, #0]
 800d0dc:	e7ee      	b.n	800d0bc <__swhatbuf_r+0x1e>
 800d0de:	2340      	movs	r3, #64	; 0x40
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	6023      	str	r3, [r4, #0]
 800d0e4:	b016      	add	sp, #88	; 0x58
 800d0e6:	bd70      	pop	{r4, r5, r6, pc}

0800d0e8 <__smakebuf_r>:
 800d0e8:	898b      	ldrh	r3, [r1, #12]
 800d0ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d0ec:	079d      	lsls	r5, r3, #30
 800d0ee:	4606      	mov	r6, r0
 800d0f0:	460c      	mov	r4, r1
 800d0f2:	d507      	bpl.n	800d104 <__smakebuf_r+0x1c>
 800d0f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	6123      	str	r3, [r4, #16]
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	6163      	str	r3, [r4, #20]
 800d100:	b002      	add	sp, #8
 800d102:	bd70      	pop	{r4, r5, r6, pc}
 800d104:	ab01      	add	r3, sp, #4
 800d106:	466a      	mov	r2, sp
 800d108:	f7ff ffc9 	bl	800d09e <__swhatbuf_r>
 800d10c:	9900      	ldr	r1, [sp, #0]
 800d10e:	4605      	mov	r5, r0
 800d110:	4630      	mov	r0, r6
 800d112:	f7fe fd3d 	bl	800bb90 <_malloc_r>
 800d116:	b948      	cbnz	r0, 800d12c <__smakebuf_r+0x44>
 800d118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d11c:	059a      	lsls	r2, r3, #22
 800d11e:	d4ef      	bmi.n	800d100 <__smakebuf_r+0x18>
 800d120:	f023 0303 	bic.w	r3, r3, #3
 800d124:	f043 0302 	orr.w	r3, r3, #2
 800d128:	81a3      	strh	r3, [r4, #12]
 800d12a:	e7e3      	b.n	800d0f4 <__smakebuf_r+0xc>
 800d12c:	4b0d      	ldr	r3, [pc, #52]	; (800d164 <__smakebuf_r+0x7c>)
 800d12e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d130:	89a3      	ldrh	r3, [r4, #12]
 800d132:	6020      	str	r0, [r4, #0]
 800d134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d138:	81a3      	strh	r3, [r4, #12]
 800d13a:	9b00      	ldr	r3, [sp, #0]
 800d13c:	6163      	str	r3, [r4, #20]
 800d13e:	9b01      	ldr	r3, [sp, #4]
 800d140:	6120      	str	r0, [r4, #16]
 800d142:	b15b      	cbz	r3, 800d15c <__smakebuf_r+0x74>
 800d144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d148:	4630      	mov	r0, r6
 800d14a:	f000 f86b 	bl	800d224 <_isatty_r>
 800d14e:	b128      	cbz	r0, 800d15c <__smakebuf_r+0x74>
 800d150:	89a3      	ldrh	r3, [r4, #12]
 800d152:	f023 0303 	bic.w	r3, r3, #3
 800d156:	f043 0301 	orr.w	r3, r3, #1
 800d15a:	81a3      	strh	r3, [r4, #12]
 800d15c:	89a0      	ldrh	r0, [r4, #12]
 800d15e:	4305      	orrs	r5, r0
 800d160:	81a5      	strh	r5, [r4, #12]
 800d162:	e7cd      	b.n	800d100 <__smakebuf_r+0x18>
 800d164:	0800c9e9 	.word	0x0800c9e9

0800d168 <_malloc_usable_size_r>:
 800d168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d16c:	1f18      	subs	r0, r3, #4
 800d16e:	2b00      	cmp	r3, #0
 800d170:	bfbc      	itt	lt
 800d172:	580b      	ldrlt	r3, [r1, r0]
 800d174:	18c0      	addlt	r0, r0, r3
 800d176:	4770      	bx	lr

0800d178 <_raise_r>:
 800d178:	291f      	cmp	r1, #31
 800d17a:	b538      	push	{r3, r4, r5, lr}
 800d17c:	4604      	mov	r4, r0
 800d17e:	460d      	mov	r5, r1
 800d180:	d904      	bls.n	800d18c <_raise_r+0x14>
 800d182:	2316      	movs	r3, #22
 800d184:	6003      	str	r3, [r0, #0]
 800d186:	f04f 30ff 	mov.w	r0, #4294967295
 800d18a:	bd38      	pop	{r3, r4, r5, pc}
 800d18c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d18e:	b112      	cbz	r2, 800d196 <_raise_r+0x1e>
 800d190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d194:	b94b      	cbnz	r3, 800d1aa <_raise_r+0x32>
 800d196:	4620      	mov	r0, r4
 800d198:	f000 f830 	bl	800d1fc <_getpid_r>
 800d19c:	462a      	mov	r2, r5
 800d19e:	4601      	mov	r1, r0
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1a6:	f000 b817 	b.w	800d1d8 <_kill_r>
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d00a      	beq.n	800d1c4 <_raise_r+0x4c>
 800d1ae:	1c59      	adds	r1, r3, #1
 800d1b0:	d103      	bne.n	800d1ba <_raise_r+0x42>
 800d1b2:	2316      	movs	r3, #22
 800d1b4:	6003      	str	r3, [r0, #0]
 800d1b6:	2001      	movs	r0, #1
 800d1b8:	e7e7      	b.n	800d18a <_raise_r+0x12>
 800d1ba:	2400      	movs	r4, #0
 800d1bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	4798      	blx	r3
 800d1c4:	2000      	movs	r0, #0
 800d1c6:	e7e0      	b.n	800d18a <_raise_r+0x12>

0800d1c8 <raise>:
 800d1c8:	4b02      	ldr	r3, [pc, #8]	; (800d1d4 <raise+0xc>)
 800d1ca:	4601      	mov	r1, r0
 800d1cc:	6818      	ldr	r0, [r3, #0]
 800d1ce:	f7ff bfd3 	b.w	800d178 <_raise_r>
 800d1d2:	bf00      	nop
 800d1d4:	2000001c 	.word	0x2000001c

0800d1d8 <_kill_r>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	4d07      	ldr	r5, [pc, #28]	; (800d1f8 <_kill_r+0x20>)
 800d1dc:	2300      	movs	r3, #0
 800d1de:	4604      	mov	r4, r0
 800d1e0:	4608      	mov	r0, r1
 800d1e2:	4611      	mov	r1, r2
 800d1e4:	602b      	str	r3, [r5, #0]
 800d1e6:	f7f7 ff4c 	bl	8005082 <_kill>
 800d1ea:	1c43      	adds	r3, r0, #1
 800d1ec:	d102      	bne.n	800d1f4 <_kill_r+0x1c>
 800d1ee:	682b      	ldr	r3, [r5, #0]
 800d1f0:	b103      	cbz	r3, 800d1f4 <_kill_r+0x1c>
 800d1f2:	6023      	str	r3, [r4, #0]
 800d1f4:	bd38      	pop	{r3, r4, r5, pc}
 800d1f6:	bf00      	nop
 800d1f8:	20009d08 	.word	0x20009d08

0800d1fc <_getpid_r>:
 800d1fc:	f7f7 bf39 	b.w	8005072 <_getpid>

0800d200 <_fstat_r>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	4d07      	ldr	r5, [pc, #28]	; (800d220 <_fstat_r+0x20>)
 800d204:	2300      	movs	r3, #0
 800d206:	4604      	mov	r4, r0
 800d208:	4608      	mov	r0, r1
 800d20a:	4611      	mov	r1, r2
 800d20c:	602b      	str	r3, [r5, #0]
 800d20e:	f7f7 ff97 	bl	8005140 <_fstat>
 800d212:	1c43      	adds	r3, r0, #1
 800d214:	d102      	bne.n	800d21c <_fstat_r+0x1c>
 800d216:	682b      	ldr	r3, [r5, #0]
 800d218:	b103      	cbz	r3, 800d21c <_fstat_r+0x1c>
 800d21a:	6023      	str	r3, [r4, #0]
 800d21c:	bd38      	pop	{r3, r4, r5, pc}
 800d21e:	bf00      	nop
 800d220:	20009d08 	.word	0x20009d08

0800d224 <_isatty_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4d06      	ldr	r5, [pc, #24]	; (800d240 <_isatty_r+0x1c>)
 800d228:	2300      	movs	r3, #0
 800d22a:	4604      	mov	r4, r0
 800d22c:	4608      	mov	r0, r1
 800d22e:	602b      	str	r3, [r5, #0]
 800d230:	f7f7 ff96 	bl	8005160 <_isatty>
 800d234:	1c43      	adds	r3, r0, #1
 800d236:	d102      	bne.n	800d23e <_isatty_r+0x1a>
 800d238:	682b      	ldr	r3, [r5, #0]
 800d23a:	b103      	cbz	r3, 800d23e <_isatty_r+0x1a>
 800d23c:	6023      	str	r3, [r4, #0]
 800d23e:	bd38      	pop	{r3, r4, r5, pc}
 800d240:	20009d08 	.word	0x20009d08
 800d244:	00000000 	.word	0x00000000

0800d248 <cos>:
 800d248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d24a:	ec53 2b10 	vmov	r2, r3, d0
 800d24e:	4826      	ldr	r0, [pc, #152]	; (800d2e8 <cos+0xa0>)
 800d250:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d254:	4281      	cmp	r1, r0
 800d256:	dc06      	bgt.n	800d266 <cos+0x1e>
 800d258:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d2e0 <cos+0x98>
 800d25c:	b005      	add	sp, #20
 800d25e:	f85d eb04 	ldr.w	lr, [sp], #4
 800d262:	f001 bcf5 	b.w	800ec50 <__kernel_cos>
 800d266:	4821      	ldr	r0, [pc, #132]	; (800d2ec <cos+0xa4>)
 800d268:	4281      	cmp	r1, r0
 800d26a:	dd09      	ble.n	800d280 <cos+0x38>
 800d26c:	ee10 0a10 	vmov	r0, s0
 800d270:	4619      	mov	r1, r3
 800d272:	f7f3 f821 	bl	80002b8 <__aeabi_dsub>
 800d276:	ec41 0b10 	vmov	d0, r0, r1
 800d27a:	b005      	add	sp, #20
 800d27c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d280:	4668      	mov	r0, sp
 800d282:	f001 fa21 	bl	800e6c8 <__ieee754_rem_pio2>
 800d286:	f000 0003 	and.w	r0, r0, #3
 800d28a:	2801      	cmp	r0, #1
 800d28c:	d00b      	beq.n	800d2a6 <cos+0x5e>
 800d28e:	2802      	cmp	r0, #2
 800d290:	d016      	beq.n	800d2c0 <cos+0x78>
 800d292:	b9e0      	cbnz	r0, 800d2ce <cos+0x86>
 800d294:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d298:	ed9d 0b00 	vldr	d0, [sp]
 800d29c:	f001 fcd8 	bl	800ec50 <__kernel_cos>
 800d2a0:	ec51 0b10 	vmov	r0, r1, d0
 800d2a4:	e7e7      	b.n	800d276 <cos+0x2e>
 800d2a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2aa:	ed9d 0b00 	vldr	d0, [sp]
 800d2ae:	f002 f8e7 	bl	800f480 <__kernel_sin>
 800d2b2:	ec53 2b10 	vmov	r2, r3, d0
 800d2b6:	ee10 0a10 	vmov	r0, s0
 800d2ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d2be:	e7da      	b.n	800d276 <cos+0x2e>
 800d2c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2c4:	ed9d 0b00 	vldr	d0, [sp]
 800d2c8:	f001 fcc2 	bl	800ec50 <__kernel_cos>
 800d2cc:	e7f1      	b.n	800d2b2 <cos+0x6a>
 800d2ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2d2:	ed9d 0b00 	vldr	d0, [sp]
 800d2d6:	2001      	movs	r0, #1
 800d2d8:	f002 f8d2 	bl	800f480 <__kernel_sin>
 800d2dc:	e7e0      	b.n	800d2a0 <cos+0x58>
 800d2de:	bf00      	nop
	...
 800d2e8:	3fe921fb 	.word	0x3fe921fb
 800d2ec:	7fefffff 	.word	0x7fefffff

0800d2f0 <round>:
 800d2f0:	ec51 0b10 	vmov	r0, r1, d0
 800d2f4:	b570      	push	{r4, r5, r6, lr}
 800d2f6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d2fa:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d2fe:	2c13      	cmp	r4, #19
 800d300:	ee10 2a10 	vmov	r2, s0
 800d304:	460b      	mov	r3, r1
 800d306:	dc19      	bgt.n	800d33c <round+0x4c>
 800d308:	2c00      	cmp	r4, #0
 800d30a:	da09      	bge.n	800d320 <round+0x30>
 800d30c:	3401      	adds	r4, #1
 800d30e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d312:	d103      	bne.n	800d31c <round+0x2c>
 800d314:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d318:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d31c:	2200      	movs	r2, #0
 800d31e:	e028      	b.n	800d372 <round+0x82>
 800d320:	4d15      	ldr	r5, [pc, #84]	; (800d378 <round+0x88>)
 800d322:	4125      	asrs	r5, r4
 800d324:	ea01 0605 	and.w	r6, r1, r5
 800d328:	4332      	orrs	r2, r6
 800d32a:	d00e      	beq.n	800d34a <round+0x5a>
 800d32c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d330:	fa42 f404 	asr.w	r4, r2, r4
 800d334:	4423      	add	r3, r4
 800d336:	ea23 0305 	bic.w	r3, r3, r5
 800d33a:	e7ef      	b.n	800d31c <round+0x2c>
 800d33c:	2c33      	cmp	r4, #51	; 0x33
 800d33e:	dd07      	ble.n	800d350 <round+0x60>
 800d340:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d344:	d101      	bne.n	800d34a <round+0x5a>
 800d346:	f7f2 ffb9 	bl	80002bc <__adddf3>
 800d34a:	ec41 0b10 	vmov	d0, r0, r1
 800d34e:	bd70      	pop	{r4, r5, r6, pc}
 800d350:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d354:	f04f 35ff 	mov.w	r5, #4294967295
 800d358:	40f5      	lsrs	r5, r6
 800d35a:	4228      	tst	r0, r5
 800d35c:	d0f5      	beq.n	800d34a <round+0x5a>
 800d35e:	2101      	movs	r1, #1
 800d360:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d364:	fa01 f404 	lsl.w	r4, r1, r4
 800d368:	1912      	adds	r2, r2, r4
 800d36a:	bf28      	it	cs
 800d36c:	185b      	addcs	r3, r3, r1
 800d36e:	ea22 0205 	bic.w	r2, r2, r5
 800d372:	4619      	mov	r1, r3
 800d374:	4610      	mov	r0, r2
 800d376:	e7e8      	b.n	800d34a <round+0x5a>
 800d378:	000fffff 	.word	0x000fffff
 800d37c:	00000000 	.word	0x00000000

0800d380 <sin>:
 800d380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d382:	ec53 2b10 	vmov	r2, r3, d0
 800d386:	4828      	ldr	r0, [pc, #160]	; (800d428 <sin+0xa8>)
 800d388:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d38c:	4281      	cmp	r1, r0
 800d38e:	dc07      	bgt.n	800d3a0 <sin+0x20>
 800d390:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d420 <sin+0xa0>
 800d394:	2000      	movs	r0, #0
 800d396:	b005      	add	sp, #20
 800d398:	f85d eb04 	ldr.w	lr, [sp], #4
 800d39c:	f002 b870 	b.w	800f480 <__kernel_sin>
 800d3a0:	4822      	ldr	r0, [pc, #136]	; (800d42c <sin+0xac>)
 800d3a2:	4281      	cmp	r1, r0
 800d3a4:	dd09      	ble.n	800d3ba <sin+0x3a>
 800d3a6:	ee10 0a10 	vmov	r0, s0
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	f7f2 ff84 	bl	80002b8 <__aeabi_dsub>
 800d3b0:	ec41 0b10 	vmov	d0, r0, r1
 800d3b4:	b005      	add	sp, #20
 800d3b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d3ba:	4668      	mov	r0, sp
 800d3bc:	f001 f984 	bl	800e6c8 <__ieee754_rem_pio2>
 800d3c0:	f000 0003 	and.w	r0, r0, #3
 800d3c4:	2801      	cmp	r0, #1
 800d3c6:	d00c      	beq.n	800d3e2 <sin+0x62>
 800d3c8:	2802      	cmp	r0, #2
 800d3ca:	d011      	beq.n	800d3f0 <sin+0x70>
 800d3cc:	b9f0      	cbnz	r0, 800d40c <sin+0x8c>
 800d3ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3d2:	ed9d 0b00 	vldr	d0, [sp]
 800d3d6:	2001      	movs	r0, #1
 800d3d8:	f002 f852 	bl	800f480 <__kernel_sin>
 800d3dc:	ec51 0b10 	vmov	r0, r1, d0
 800d3e0:	e7e6      	b.n	800d3b0 <sin+0x30>
 800d3e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3e6:	ed9d 0b00 	vldr	d0, [sp]
 800d3ea:	f001 fc31 	bl	800ec50 <__kernel_cos>
 800d3ee:	e7f5      	b.n	800d3dc <sin+0x5c>
 800d3f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3f4:	ed9d 0b00 	vldr	d0, [sp]
 800d3f8:	2001      	movs	r0, #1
 800d3fa:	f002 f841 	bl	800f480 <__kernel_sin>
 800d3fe:	ec53 2b10 	vmov	r2, r3, d0
 800d402:	ee10 0a10 	vmov	r0, s0
 800d406:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d40a:	e7d1      	b.n	800d3b0 <sin+0x30>
 800d40c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d410:	ed9d 0b00 	vldr	d0, [sp]
 800d414:	f001 fc1c 	bl	800ec50 <__kernel_cos>
 800d418:	e7f1      	b.n	800d3fe <sin+0x7e>
 800d41a:	bf00      	nop
 800d41c:	f3af 8000 	nop.w
	...
 800d428:	3fe921fb 	.word	0x3fe921fb
 800d42c:	7fefffff 	.word	0x7fefffff

0800d430 <acos>:
 800d430:	b538      	push	{r3, r4, r5, lr}
 800d432:	ed2d 8b02 	vpush	{d8}
 800d436:	ec55 4b10 	vmov	r4, r5, d0
 800d43a:	f000 f8e9 	bl	800d610 <__ieee754_acos>
 800d43e:	4622      	mov	r2, r4
 800d440:	462b      	mov	r3, r5
 800d442:	4620      	mov	r0, r4
 800d444:	4629      	mov	r1, r5
 800d446:	eeb0 8a40 	vmov.f32	s16, s0
 800d44a:	eef0 8a60 	vmov.f32	s17, s1
 800d44e:	f7f3 fb85 	bl	8000b5c <__aeabi_dcmpun>
 800d452:	b9a8      	cbnz	r0, 800d480 <acos+0x50>
 800d454:	ec45 4b10 	vmov	d0, r4, r5
 800d458:	f002 faa2 	bl	800f9a0 <fabs>
 800d45c:	4b0c      	ldr	r3, [pc, #48]	; (800d490 <acos+0x60>)
 800d45e:	ec51 0b10 	vmov	r0, r1, d0
 800d462:	2200      	movs	r2, #0
 800d464:	f7f3 fb70 	bl	8000b48 <__aeabi_dcmpgt>
 800d468:	b150      	cbz	r0, 800d480 <acos+0x50>
 800d46a:	f7fa fdfd 	bl	8008068 <__errno>
 800d46e:	ecbd 8b02 	vpop	{d8}
 800d472:	2321      	movs	r3, #33	; 0x21
 800d474:	6003      	str	r3, [r0, #0]
 800d476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d47a:	4806      	ldr	r0, [pc, #24]	; (800d494 <acos+0x64>)
 800d47c:	f7ff b890 	b.w	800c5a0 <nan>
 800d480:	eeb0 0a48 	vmov.f32	s0, s16
 800d484:	eef0 0a68 	vmov.f32	s1, s17
 800d488:	ecbd 8b02 	vpop	{d8}
 800d48c:	bd38      	pop	{r3, r4, r5, pc}
 800d48e:	bf00      	nop
 800d490:	3ff00000 	.word	0x3ff00000
 800d494:	080103ab 	.word	0x080103ab

0800d498 <atan2>:
 800d498:	f000 bb1a 	b.w	800dad0 <__ieee754_atan2>

0800d49c <pow>:
 800d49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d49e:	ed2d 8b02 	vpush	{d8}
 800d4a2:	eeb0 8a40 	vmov.f32	s16, s0
 800d4a6:	eef0 8a60 	vmov.f32	s17, s1
 800d4aa:	ec55 4b11 	vmov	r4, r5, d1
 800d4ae:	f000 fbdb 	bl	800dc68 <__ieee754_pow>
 800d4b2:	4622      	mov	r2, r4
 800d4b4:	462b      	mov	r3, r5
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	ec57 6b10 	vmov	r6, r7, d0
 800d4be:	f7f3 fb4d 	bl	8000b5c <__aeabi_dcmpun>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	d13b      	bne.n	800d53e <pow+0xa2>
 800d4c6:	ec51 0b18 	vmov	r0, r1, d8
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	f7f3 fb13 	bl	8000af8 <__aeabi_dcmpeq>
 800d4d2:	b1b8      	cbz	r0, 800d504 <pow+0x68>
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	4620      	mov	r0, r4
 800d4da:	4629      	mov	r1, r5
 800d4dc:	f7f3 fb0c 	bl	8000af8 <__aeabi_dcmpeq>
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	d146      	bne.n	800d572 <pow+0xd6>
 800d4e4:	ec45 4b10 	vmov	d0, r4, r5
 800d4e8:	f002 fa63 	bl	800f9b2 <finite>
 800d4ec:	b338      	cbz	r0, 800d53e <pow+0xa2>
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	f7f3 fb09 	bl	8000b0c <__aeabi_dcmplt>
 800d4fa:	b300      	cbz	r0, 800d53e <pow+0xa2>
 800d4fc:	f7fa fdb4 	bl	8008068 <__errno>
 800d500:	2322      	movs	r3, #34	; 0x22
 800d502:	e01b      	b.n	800d53c <pow+0xa0>
 800d504:	ec47 6b10 	vmov	d0, r6, r7
 800d508:	f002 fa53 	bl	800f9b2 <finite>
 800d50c:	b9e0      	cbnz	r0, 800d548 <pow+0xac>
 800d50e:	eeb0 0a48 	vmov.f32	s0, s16
 800d512:	eef0 0a68 	vmov.f32	s1, s17
 800d516:	f002 fa4c 	bl	800f9b2 <finite>
 800d51a:	b1a8      	cbz	r0, 800d548 <pow+0xac>
 800d51c:	ec45 4b10 	vmov	d0, r4, r5
 800d520:	f002 fa47 	bl	800f9b2 <finite>
 800d524:	b180      	cbz	r0, 800d548 <pow+0xac>
 800d526:	4632      	mov	r2, r6
 800d528:	463b      	mov	r3, r7
 800d52a:	4630      	mov	r0, r6
 800d52c:	4639      	mov	r1, r7
 800d52e:	f7f3 fb15 	bl	8000b5c <__aeabi_dcmpun>
 800d532:	2800      	cmp	r0, #0
 800d534:	d0e2      	beq.n	800d4fc <pow+0x60>
 800d536:	f7fa fd97 	bl	8008068 <__errno>
 800d53a:	2321      	movs	r3, #33	; 0x21
 800d53c:	6003      	str	r3, [r0, #0]
 800d53e:	ecbd 8b02 	vpop	{d8}
 800d542:	ec47 6b10 	vmov	d0, r6, r7
 800d546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d548:	2200      	movs	r2, #0
 800d54a:	2300      	movs	r3, #0
 800d54c:	4630      	mov	r0, r6
 800d54e:	4639      	mov	r1, r7
 800d550:	f7f3 fad2 	bl	8000af8 <__aeabi_dcmpeq>
 800d554:	2800      	cmp	r0, #0
 800d556:	d0f2      	beq.n	800d53e <pow+0xa2>
 800d558:	eeb0 0a48 	vmov.f32	s0, s16
 800d55c:	eef0 0a68 	vmov.f32	s1, s17
 800d560:	f002 fa27 	bl	800f9b2 <finite>
 800d564:	2800      	cmp	r0, #0
 800d566:	d0ea      	beq.n	800d53e <pow+0xa2>
 800d568:	ec45 4b10 	vmov	d0, r4, r5
 800d56c:	f002 fa21 	bl	800f9b2 <finite>
 800d570:	e7c3      	b.n	800d4fa <pow+0x5e>
 800d572:	4f01      	ldr	r7, [pc, #4]	; (800d578 <pow+0xdc>)
 800d574:	2600      	movs	r6, #0
 800d576:	e7e2      	b.n	800d53e <pow+0xa2>
 800d578:	3ff00000 	.word	0x3ff00000

0800d57c <sqrt>:
 800d57c:	b538      	push	{r3, r4, r5, lr}
 800d57e:	ed2d 8b02 	vpush	{d8}
 800d582:	ec55 4b10 	vmov	r4, r5, d0
 800d586:	f001 faab 	bl	800eae0 <__ieee754_sqrt>
 800d58a:	4622      	mov	r2, r4
 800d58c:	462b      	mov	r3, r5
 800d58e:	4620      	mov	r0, r4
 800d590:	4629      	mov	r1, r5
 800d592:	eeb0 8a40 	vmov.f32	s16, s0
 800d596:	eef0 8a60 	vmov.f32	s17, s1
 800d59a:	f7f3 fadf 	bl	8000b5c <__aeabi_dcmpun>
 800d59e:	b990      	cbnz	r0, 800d5c6 <sqrt+0x4a>
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	f7f3 fab0 	bl	8000b0c <__aeabi_dcmplt>
 800d5ac:	b158      	cbz	r0, 800d5c6 <sqrt+0x4a>
 800d5ae:	f7fa fd5b 	bl	8008068 <__errno>
 800d5b2:	2321      	movs	r3, #33	; 0x21
 800d5b4:	6003      	str	r3, [r0, #0]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	4610      	mov	r0, r2
 800d5bc:	4619      	mov	r1, r3
 800d5be:	f7f3 f95d 	bl	800087c <__aeabi_ddiv>
 800d5c2:	ec41 0b18 	vmov	d8, r0, r1
 800d5c6:	eeb0 0a48 	vmov.f32	s0, s16
 800d5ca:	eef0 0a68 	vmov.f32	s1, s17
 800d5ce:	ecbd 8b02 	vpop	{d8}
 800d5d2:	bd38      	pop	{r3, r4, r5, pc}

0800d5d4 <sqrtf>:
 800d5d4:	b508      	push	{r3, lr}
 800d5d6:	ed2d 8b02 	vpush	{d8}
 800d5da:	eeb0 8a40 	vmov.f32	s16, s0
 800d5de:	f001 fb31 	bl	800ec44 <__ieee754_sqrtf>
 800d5e2:	eeb4 8a48 	vcmp.f32	s16, s16
 800d5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ea:	d60c      	bvs.n	800d606 <sqrtf+0x32>
 800d5ec:	eddf 8a07 	vldr	s17, [pc, #28]	; 800d60c <sqrtf+0x38>
 800d5f0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5f8:	d505      	bpl.n	800d606 <sqrtf+0x32>
 800d5fa:	f7fa fd35 	bl	8008068 <__errno>
 800d5fe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d602:	2321      	movs	r3, #33	; 0x21
 800d604:	6003      	str	r3, [r0, #0]
 800d606:	ecbd 8b02 	vpop	{d8}
 800d60a:	bd08      	pop	{r3, pc}
 800d60c:	00000000 	.word	0x00000000

0800d610 <__ieee754_acos>:
 800d610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d614:	ec55 4b10 	vmov	r4, r5, d0
 800d618:	49b7      	ldr	r1, [pc, #732]	; (800d8f8 <__ieee754_acos+0x2e8>)
 800d61a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d61e:	428b      	cmp	r3, r1
 800d620:	dd1b      	ble.n	800d65a <__ieee754_acos+0x4a>
 800d622:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800d626:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d62a:	4323      	orrs	r3, r4
 800d62c:	d106      	bne.n	800d63c <__ieee754_acos+0x2c>
 800d62e:	2d00      	cmp	r5, #0
 800d630:	f300 8211 	bgt.w	800da56 <__ieee754_acos+0x446>
 800d634:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800d890 <__ieee754_acos+0x280>
 800d638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d63c:	ee10 2a10 	vmov	r2, s0
 800d640:	462b      	mov	r3, r5
 800d642:	ee10 0a10 	vmov	r0, s0
 800d646:	4629      	mov	r1, r5
 800d648:	f7f2 fe36 	bl	80002b8 <__aeabi_dsub>
 800d64c:	4602      	mov	r2, r0
 800d64e:	460b      	mov	r3, r1
 800d650:	f7f3 f914 	bl	800087c <__aeabi_ddiv>
 800d654:	ec41 0b10 	vmov	d0, r0, r1
 800d658:	e7ee      	b.n	800d638 <__ieee754_acos+0x28>
 800d65a:	49a8      	ldr	r1, [pc, #672]	; (800d8fc <__ieee754_acos+0x2ec>)
 800d65c:	428b      	cmp	r3, r1
 800d65e:	f300 8087 	bgt.w	800d770 <__ieee754_acos+0x160>
 800d662:	4aa7      	ldr	r2, [pc, #668]	; (800d900 <__ieee754_acos+0x2f0>)
 800d664:	4293      	cmp	r3, r2
 800d666:	f340 81f9 	ble.w	800da5c <__ieee754_acos+0x44c>
 800d66a:	ee10 2a10 	vmov	r2, s0
 800d66e:	ee10 0a10 	vmov	r0, s0
 800d672:	462b      	mov	r3, r5
 800d674:	4629      	mov	r1, r5
 800d676:	f7f2 ffd7 	bl	8000628 <__aeabi_dmul>
 800d67a:	a387      	add	r3, pc, #540	; (adr r3, 800d898 <__ieee754_acos+0x288>)
 800d67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d680:	4606      	mov	r6, r0
 800d682:	460f      	mov	r7, r1
 800d684:	f7f2 ffd0 	bl	8000628 <__aeabi_dmul>
 800d688:	a385      	add	r3, pc, #532	; (adr r3, 800d8a0 <__ieee754_acos+0x290>)
 800d68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68e:	f7f2 fe15 	bl	80002bc <__adddf3>
 800d692:	4632      	mov	r2, r6
 800d694:	463b      	mov	r3, r7
 800d696:	f7f2 ffc7 	bl	8000628 <__aeabi_dmul>
 800d69a:	a383      	add	r3, pc, #524	; (adr r3, 800d8a8 <__ieee754_acos+0x298>)
 800d69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a0:	f7f2 fe0a 	bl	80002b8 <__aeabi_dsub>
 800d6a4:	4632      	mov	r2, r6
 800d6a6:	463b      	mov	r3, r7
 800d6a8:	f7f2 ffbe 	bl	8000628 <__aeabi_dmul>
 800d6ac:	a380      	add	r3, pc, #512	; (adr r3, 800d8b0 <__ieee754_acos+0x2a0>)
 800d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b2:	f7f2 fe03 	bl	80002bc <__adddf3>
 800d6b6:	4632      	mov	r2, r6
 800d6b8:	463b      	mov	r3, r7
 800d6ba:	f7f2 ffb5 	bl	8000628 <__aeabi_dmul>
 800d6be:	a37e      	add	r3, pc, #504	; (adr r3, 800d8b8 <__ieee754_acos+0x2a8>)
 800d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c4:	f7f2 fdf8 	bl	80002b8 <__aeabi_dsub>
 800d6c8:	4632      	mov	r2, r6
 800d6ca:	463b      	mov	r3, r7
 800d6cc:	f7f2 ffac 	bl	8000628 <__aeabi_dmul>
 800d6d0:	a37b      	add	r3, pc, #492	; (adr r3, 800d8c0 <__ieee754_acos+0x2b0>)
 800d6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d6:	f7f2 fdf1 	bl	80002bc <__adddf3>
 800d6da:	4632      	mov	r2, r6
 800d6dc:	463b      	mov	r3, r7
 800d6de:	f7f2 ffa3 	bl	8000628 <__aeabi_dmul>
 800d6e2:	a379      	add	r3, pc, #484	; (adr r3, 800d8c8 <__ieee754_acos+0x2b8>)
 800d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e8:	4680      	mov	r8, r0
 800d6ea:	4689      	mov	r9, r1
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	4639      	mov	r1, r7
 800d6f0:	f7f2 ff9a 	bl	8000628 <__aeabi_dmul>
 800d6f4:	a376      	add	r3, pc, #472	; (adr r3, 800d8d0 <__ieee754_acos+0x2c0>)
 800d6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fa:	f7f2 fddd 	bl	80002b8 <__aeabi_dsub>
 800d6fe:	4632      	mov	r2, r6
 800d700:	463b      	mov	r3, r7
 800d702:	f7f2 ff91 	bl	8000628 <__aeabi_dmul>
 800d706:	a374      	add	r3, pc, #464	; (adr r3, 800d8d8 <__ieee754_acos+0x2c8>)
 800d708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70c:	f7f2 fdd6 	bl	80002bc <__adddf3>
 800d710:	4632      	mov	r2, r6
 800d712:	463b      	mov	r3, r7
 800d714:	f7f2 ff88 	bl	8000628 <__aeabi_dmul>
 800d718:	a371      	add	r3, pc, #452	; (adr r3, 800d8e0 <__ieee754_acos+0x2d0>)
 800d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71e:	f7f2 fdcb 	bl	80002b8 <__aeabi_dsub>
 800d722:	4632      	mov	r2, r6
 800d724:	463b      	mov	r3, r7
 800d726:	f7f2 ff7f 	bl	8000628 <__aeabi_dmul>
 800d72a:	4b76      	ldr	r3, [pc, #472]	; (800d904 <__ieee754_acos+0x2f4>)
 800d72c:	2200      	movs	r2, #0
 800d72e:	f7f2 fdc5 	bl	80002bc <__adddf3>
 800d732:	4602      	mov	r2, r0
 800d734:	460b      	mov	r3, r1
 800d736:	4640      	mov	r0, r8
 800d738:	4649      	mov	r1, r9
 800d73a:	f7f3 f89f 	bl	800087c <__aeabi_ddiv>
 800d73e:	4622      	mov	r2, r4
 800d740:	462b      	mov	r3, r5
 800d742:	f7f2 ff71 	bl	8000628 <__aeabi_dmul>
 800d746:	4602      	mov	r2, r0
 800d748:	460b      	mov	r3, r1
 800d74a:	a167      	add	r1, pc, #412	; (adr r1, 800d8e8 <__ieee754_acos+0x2d8>)
 800d74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d750:	f7f2 fdb2 	bl	80002b8 <__aeabi_dsub>
 800d754:	4602      	mov	r2, r0
 800d756:	460b      	mov	r3, r1
 800d758:	4620      	mov	r0, r4
 800d75a:	4629      	mov	r1, r5
 800d75c:	f7f2 fdac 	bl	80002b8 <__aeabi_dsub>
 800d760:	4602      	mov	r2, r0
 800d762:	460b      	mov	r3, r1
 800d764:	a162      	add	r1, pc, #392	; (adr r1, 800d8f0 <__ieee754_acos+0x2e0>)
 800d766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d76a:	f7f2 fda5 	bl	80002b8 <__aeabi_dsub>
 800d76e:	e771      	b.n	800d654 <__ieee754_acos+0x44>
 800d770:	2d00      	cmp	r5, #0
 800d772:	f280 80cb 	bge.w	800d90c <__ieee754_acos+0x2fc>
 800d776:	ee10 0a10 	vmov	r0, s0
 800d77a:	4b62      	ldr	r3, [pc, #392]	; (800d904 <__ieee754_acos+0x2f4>)
 800d77c:	2200      	movs	r2, #0
 800d77e:	4629      	mov	r1, r5
 800d780:	f7f2 fd9c 	bl	80002bc <__adddf3>
 800d784:	4b60      	ldr	r3, [pc, #384]	; (800d908 <__ieee754_acos+0x2f8>)
 800d786:	2200      	movs	r2, #0
 800d788:	f7f2 ff4e 	bl	8000628 <__aeabi_dmul>
 800d78c:	a342      	add	r3, pc, #264	; (adr r3, 800d898 <__ieee754_acos+0x288>)
 800d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d792:	4604      	mov	r4, r0
 800d794:	460d      	mov	r5, r1
 800d796:	f7f2 ff47 	bl	8000628 <__aeabi_dmul>
 800d79a:	a341      	add	r3, pc, #260	; (adr r3, 800d8a0 <__ieee754_acos+0x290>)
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	f7f2 fd8c 	bl	80002bc <__adddf3>
 800d7a4:	4622      	mov	r2, r4
 800d7a6:	462b      	mov	r3, r5
 800d7a8:	f7f2 ff3e 	bl	8000628 <__aeabi_dmul>
 800d7ac:	a33e      	add	r3, pc, #248	; (adr r3, 800d8a8 <__ieee754_acos+0x298>)
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	f7f2 fd81 	bl	80002b8 <__aeabi_dsub>
 800d7b6:	4622      	mov	r2, r4
 800d7b8:	462b      	mov	r3, r5
 800d7ba:	f7f2 ff35 	bl	8000628 <__aeabi_dmul>
 800d7be:	a33c      	add	r3, pc, #240	; (adr r3, 800d8b0 <__ieee754_acos+0x2a0>)
 800d7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c4:	f7f2 fd7a 	bl	80002bc <__adddf3>
 800d7c8:	4622      	mov	r2, r4
 800d7ca:	462b      	mov	r3, r5
 800d7cc:	f7f2 ff2c 	bl	8000628 <__aeabi_dmul>
 800d7d0:	a339      	add	r3, pc, #228	; (adr r3, 800d8b8 <__ieee754_acos+0x2a8>)
 800d7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d6:	f7f2 fd6f 	bl	80002b8 <__aeabi_dsub>
 800d7da:	4622      	mov	r2, r4
 800d7dc:	462b      	mov	r3, r5
 800d7de:	f7f2 ff23 	bl	8000628 <__aeabi_dmul>
 800d7e2:	a337      	add	r3, pc, #220	; (adr r3, 800d8c0 <__ieee754_acos+0x2b0>)
 800d7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e8:	f7f2 fd68 	bl	80002bc <__adddf3>
 800d7ec:	4622      	mov	r2, r4
 800d7ee:	462b      	mov	r3, r5
 800d7f0:	f7f2 ff1a 	bl	8000628 <__aeabi_dmul>
 800d7f4:	ec45 4b10 	vmov	d0, r4, r5
 800d7f8:	4680      	mov	r8, r0
 800d7fa:	4689      	mov	r9, r1
 800d7fc:	f001 f970 	bl	800eae0 <__ieee754_sqrt>
 800d800:	a331      	add	r3, pc, #196	; (adr r3, 800d8c8 <__ieee754_acos+0x2b8>)
 800d802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d806:	4620      	mov	r0, r4
 800d808:	4629      	mov	r1, r5
 800d80a:	ec57 6b10 	vmov	r6, r7, d0
 800d80e:	f7f2 ff0b 	bl	8000628 <__aeabi_dmul>
 800d812:	a32f      	add	r3, pc, #188	; (adr r3, 800d8d0 <__ieee754_acos+0x2c0>)
 800d814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d818:	f7f2 fd4e 	bl	80002b8 <__aeabi_dsub>
 800d81c:	4622      	mov	r2, r4
 800d81e:	462b      	mov	r3, r5
 800d820:	f7f2 ff02 	bl	8000628 <__aeabi_dmul>
 800d824:	a32c      	add	r3, pc, #176	; (adr r3, 800d8d8 <__ieee754_acos+0x2c8>)
 800d826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82a:	f7f2 fd47 	bl	80002bc <__adddf3>
 800d82e:	4622      	mov	r2, r4
 800d830:	462b      	mov	r3, r5
 800d832:	f7f2 fef9 	bl	8000628 <__aeabi_dmul>
 800d836:	a32a      	add	r3, pc, #168	; (adr r3, 800d8e0 <__ieee754_acos+0x2d0>)
 800d838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83c:	f7f2 fd3c 	bl	80002b8 <__aeabi_dsub>
 800d840:	4622      	mov	r2, r4
 800d842:	462b      	mov	r3, r5
 800d844:	f7f2 fef0 	bl	8000628 <__aeabi_dmul>
 800d848:	4b2e      	ldr	r3, [pc, #184]	; (800d904 <__ieee754_acos+0x2f4>)
 800d84a:	2200      	movs	r2, #0
 800d84c:	f7f2 fd36 	bl	80002bc <__adddf3>
 800d850:	4602      	mov	r2, r0
 800d852:	460b      	mov	r3, r1
 800d854:	4640      	mov	r0, r8
 800d856:	4649      	mov	r1, r9
 800d858:	f7f3 f810 	bl	800087c <__aeabi_ddiv>
 800d85c:	4632      	mov	r2, r6
 800d85e:	463b      	mov	r3, r7
 800d860:	f7f2 fee2 	bl	8000628 <__aeabi_dmul>
 800d864:	a320      	add	r3, pc, #128	; (adr r3, 800d8e8 <__ieee754_acos+0x2d8>)
 800d866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86a:	f7f2 fd25 	bl	80002b8 <__aeabi_dsub>
 800d86e:	4632      	mov	r2, r6
 800d870:	463b      	mov	r3, r7
 800d872:	f7f2 fd23 	bl	80002bc <__adddf3>
 800d876:	4602      	mov	r2, r0
 800d878:	460b      	mov	r3, r1
 800d87a:	f7f2 fd1f 	bl	80002bc <__adddf3>
 800d87e:	4602      	mov	r2, r0
 800d880:	460b      	mov	r3, r1
 800d882:	a103      	add	r1, pc, #12	; (adr r1, 800d890 <__ieee754_acos+0x280>)
 800d884:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d888:	e76f      	b.n	800d76a <__ieee754_acos+0x15a>
 800d88a:	bf00      	nop
 800d88c:	f3af 8000 	nop.w
 800d890:	54442d18 	.word	0x54442d18
 800d894:	400921fb 	.word	0x400921fb
 800d898:	0dfdf709 	.word	0x0dfdf709
 800d89c:	3f023de1 	.word	0x3f023de1
 800d8a0:	7501b288 	.word	0x7501b288
 800d8a4:	3f49efe0 	.word	0x3f49efe0
 800d8a8:	b5688f3b 	.word	0xb5688f3b
 800d8ac:	3fa48228 	.word	0x3fa48228
 800d8b0:	0e884455 	.word	0x0e884455
 800d8b4:	3fc9c155 	.word	0x3fc9c155
 800d8b8:	03eb6f7d 	.word	0x03eb6f7d
 800d8bc:	3fd4d612 	.word	0x3fd4d612
 800d8c0:	55555555 	.word	0x55555555
 800d8c4:	3fc55555 	.word	0x3fc55555
 800d8c8:	b12e9282 	.word	0xb12e9282
 800d8cc:	3fb3b8c5 	.word	0x3fb3b8c5
 800d8d0:	1b8d0159 	.word	0x1b8d0159
 800d8d4:	3fe6066c 	.word	0x3fe6066c
 800d8d8:	9c598ac8 	.word	0x9c598ac8
 800d8dc:	40002ae5 	.word	0x40002ae5
 800d8e0:	1c8a2d4b 	.word	0x1c8a2d4b
 800d8e4:	40033a27 	.word	0x40033a27
 800d8e8:	33145c07 	.word	0x33145c07
 800d8ec:	3c91a626 	.word	0x3c91a626
 800d8f0:	54442d18 	.word	0x54442d18
 800d8f4:	3ff921fb 	.word	0x3ff921fb
 800d8f8:	3fefffff 	.word	0x3fefffff
 800d8fc:	3fdfffff 	.word	0x3fdfffff
 800d900:	3c600000 	.word	0x3c600000
 800d904:	3ff00000 	.word	0x3ff00000
 800d908:	3fe00000 	.word	0x3fe00000
 800d90c:	ee10 2a10 	vmov	r2, s0
 800d910:	462b      	mov	r3, r5
 800d912:	496d      	ldr	r1, [pc, #436]	; (800dac8 <__ieee754_acos+0x4b8>)
 800d914:	2000      	movs	r0, #0
 800d916:	f7f2 fccf 	bl	80002b8 <__aeabi_dsub>
 800d91a:	4b6c      	ldr	r3, [pc, #432]	; (800dacc <__ieee754_acos+0x4bc>)
 800d91c:	2200      	movs	r2, #0
 800d91e:	f7f2 fe83 	bl	8000628 <__aeabi_dmul>
 800d922:	4604      	mov	r4, r0
 800d924:	460d      	mov	r5, r1
 800d926:	ec45 4b10 	vmov	d0, r4, r5
 800d92a:	f001 f8d9 	bl	800eae0 <__ieee754_sqrt>
 800d92e:	a34e      	add	r3, pc, #312	; (adr r3, 800da68 <__ieee754_acos+0x458>)
 800d930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d934:	4620      	mov	r0, r4
 800d936:	4629      	mov	r1, r5
 800d938:	ec59 8b10 	vmov	r8, r9, d0
 800d93c:	f7f2 fe74 	bl	8000628 <__aeabi_dmul>
 800d940:	a34b      	add	r3, pc, #300	; (adr r3, 800da70 <__ieee754_acos+0x460>)
 800d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d946:	f7f2 fcb9 	bl	80002bc <__adddf3>
 800d94a:	4622      	mov	r2, r4
 800d94c:	462b      	mov	r3, r5
 800d94e:	f7f2 fe6b 	bl	8000628 <__aeabi_dmul>
 800d952:	a349      	add	r3, pc, #292	; (adr r3, 800da78 <__ieee754_acos+0x468>)
 800d954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d958:	f7f2 fcae 	bl	80002b8 <__aeabi_dsub>
 800d95c:	4622      	mov	r2, r4
 800d95e:	462b      	mov	r3, r5
 800d960:	f7f2 fe62 	bl	8000628 <__aeabi_dmul>
 800d964:	a346      	add	r3, pc, #280	; (adr r3, 800da80 <__ieee754_acos+0x470>)
 800d966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96a:	f7f2 fca7 	bl	80002bc <__adddf3>
 800d96e:	4622      	mov	r2, r4
 800d970:	462b      	mov	r3, r5
 800d972:	f7f2 fe59 	bl	8000628 <__aeabi_dmul>
 800d976:	a344      	add	r3, pc, #272	; (adr r3, 800da88 <__ieee754_acos+0x478>)
 800d978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97c:	f7f2 fc9c 	bl	80002b8 <__aeabi_dsub>
 800d980:	4622      	mov	r2, r4
 800d982:	462b      	mov	r3, r5
 800d984:	f7f2 fe50 	bl	8000628 <__aeabi_dmul>
 800d988:	a341      	add	r3, pc, #260	; (adr r3, 800da90 <__ieee754_acos+0x480>)
 800d98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98e:	f7f2 fc95 	bl	80002bc <__adddf3>
 800d992:	4622      	mov	r2, r4
 800d994:	462b      	mov	r3, r5
 800d996:	f7f2 fe47 	bl	8000628 <__aeabi_dmul>
 800d99a:	a33f      	add	r3, pc, #252	; (adr r3, 800da98 <__ieee754_acos+0x488>)
 800d99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a0:	4682      	mov	sl, r0
 800d9a2:	468b      	mov	fp, r1
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	4629      	mov	r1, r5
 800d9a8:	f7f2 fe3e 	bl	8000628 <__aeabi_dmul>
 800d9ac:	a33c      	add	r3, pc, #240	; (adr r3, 800daa0 <__ieee754_acos+0x490>)
 800d9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b2:	f7f2 fc81 	bl	80002b8 <__aeabi_dsub>
 800d9b6:	4622      	mov	r2, r4
 800d9b8:	462b      	mov	r3, r5
 800d9ba:	f7f2 fe35 	bl	8000628 <__aeabi_dmul>
 800d9be:	a33a      	add	r3, pc, #232	; (adr r3, 800daa8 <__ieee754_acos+0x498>)
 800d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c4:	f7f2 fc7a 	bl	80002bc <__adddf3>
 800d9c8:	4622      	mov	r2, r4
 800d9ca:	462b      	mov	r3, r5
 800d9cc:	f7f2 fe2c 	bl	8000628 <__aeabi_dmul>
 800d9d0:	a337      	add	r3, pc, #220	; (adr r3, 800dab0 <__ieee754_acos+0x4a0>)
 800d9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d6:	f7f2 fc6f 	bl	80002b8 <__aeabi_dsub>
 800d9da:	4622      	mov	r2, r4
 800d9dc:	462b      	mov	r3, r5
 800d9de:	f7f2 fe23 	bl	8000628 <__aeabi_dmul>
 800d9e2:	4b39      	ldr	r3, [pc, #228]	; (800dac8 <__ieee754_acos+0x4b8>)
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f7f2 fc69 	bl	80002bc <__adddf3>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	4650      	mov	r0, sl
 800d9f0:	4659      	mov	r1, fp
 800d9f2:	f7f2 ff43 	bl	800087c <__aeabi_ddiv>
 800d9f6:	4642      	mov	r2, r8
 800d9f8:	464b      	mov	r3, r9
 800d9fa:	f7f2 fe15 	bl	8000628 <__aeabi_dmul>
 800d9fe:	2600      	movs	r6, #0
 800da00:	4682      	mov	sl, r0
 800da02:	468b      	mov	fp, r1
 800da04:	4632      	mov	r2, r6
 800da06:	464b      	mov	r3, r9
 800da08:	4630      	mov	r0, r6
 800da0a:	4649      	mov	r1, r9
 800da0c:	f7f2 fe0c 	bl	8000628 <__aeabi_dmul>
 800da10:	4602      	mov	r2, r0
 800da12:	460b      	mov	r3, r1
 800da14:	4620      	mov	r0, r4
 800da16:	4629      	mov	r1, r5
 800da18:	f7f2 fc4e 	bl	80002b8 <__aeabi_dsub>
 800da1c:	4632      	mov	r2, r6
 800da1e:	4604      	mov	r4, r0
 800da20:	460d      	mov	r5, r1
 800da22:	464b      	mov	r3, r9
 800da24:	4640      	mov	r0, r8
 800da26:	4649      	mov	r1, r9
 800da28:	f7f2 fc48 	bl	80002bc <__adddf3>
 800da2c:	4602      	mov	r2, r0
 800da2e:	460b      	mov	r3, r1
 800da30:	4620      	mov	r0, r4
 800da32:	4629      	mov	r1, r5
 800da34:	f7f2 ff22 	bl	800087c <__aeabi_ddiv>
 800da38:	4602      	mov	r2, r0
 800da3a:	460b      	mov	r3, r1
 800da3c:	4650      	mov	r0, sl
 800da3e:	4659      	mov	r1, fp
 800da40:	f7f2 fc3c 	bl	80002bc <__adddf3>
 800da44:	4632      	mov	r2, r6
 800da46:	464b      	mov	r3, r9
 800da48:	f7f2 fc38 	bl	80002bc <__adddf3>
 800da4c:	4602      	mov	r2, r0
 800da4e:	460b      	mov	r3, r1
 800da50:	f7f2 fc34 	bl	80002bc <__adddf3>
 800da54:	e5fe      	b.n	800d654 <__ieee754_acos+0x44>
 800da56:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800dab8 <__ieee754_acos+0x4a8>
 800da5a:	e5ed      	b.n	800d638 <__ieee754_acos+0x28>
 800da5c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800dac0 <__ieee754_acos+0x4b0>
 800da60:	e5ea      	b.n	800d638 <__ieee754_acos+0x28>
 800da62:	bf00      	nop
 800da64:	f3af 8000 	nop.w
 800da68:	0dfdf709 	.word	0x0dfdf709
 800da6c:	3f023de1 	.word	0x3f023de1
 800da70:	7501b288 	.word	0x7501b288
 800da74:	3f49efe0 	.word	0x3f49efe0
 800da78:	b5688f3b 	.word	0xb5688f3b
 800da7c:	3fa48228 	.word	0x3fa48228
 800da80:	0e884455 	.word	0x0e884455
 800da84:	3fc9c155 	.word	0x3fc9c155
 800da88:	03eb6f7d 	.word	0x03eb6f7d
 800da8c:	3fd4d612 	.word	0x3fd4d612
 800da90:	55555555 	.word	0x55555555
 800da94:	3fc55555 	.word	0x3fc55555
 800da98:	b12e9282 	.word	0xb12e9282
 800da9c:	3fb3b8c5 	.word	0x3fb3b8c5
 800daa0:	1b8d0159 	.word	0x1b8d0159
 800daa4:	3fe6066c 	.word	0x3fe6066c
 800daa8:	9c598ac8 	.word	0x9c598ac8
 800daac:	40002ae5 	.word	0x40002ae5
 800dab0:	1c8a2d4b 	.word	0x1c8a2d4b
 800dab4:	40033a27 	.word	0x40033a27
	...
 800dac0:	54442d18 	.word	0x54442d18
 800dac4:	3ff921fb 	.word	0x3ff921fb
 800dac8:	3ff00000 	.word	0x3ff00000
 800dacc:	3fe00000 	.word	0x3fe00000

0800dad0 <__ieee754_atan2>:
 800dad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dad4:	ec57 6b11 	vmov	r6, r7, d1
 800dad8:	4273      	negs	r3, r6
 800dada:	f8df e184 	ldr.w	lr, [pc, #388]	; 800dc60 <__ieee754_atan2+0x190>
 800dade:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800dae2:	4333      	orrs	r3, r6
 800dae4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800dae8:	4573      	cmp	r3, lr
 800daea:	ec51 0b10 	vmov	r0, r1, d0
 800daee:	ee11 8a10 	vmov	r8, s2
 800daf2:	d80a      	bhi.n	800db0a <__ieee754_atan2+0x3a>
 800daf4:	4244      	negs	r4, r0
 800daf6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dafa:	4304      	orrs	r4, r0
 800dafc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800db00:	4574      	cmp	r4, lr
 800db02:	ee10 9a10 	vmov	r9, s0
 800db06:	468c      	mov	ip, r1
 800db08:	d907      	bls.n	800db1a <__ieee754_atan2+0x4a>
 800db0a:	4632      	mov	r2, r6
 800db0c:	463b      	mov	r3, r7
 800db0e:	f7f2 fbd5 	bl	80002bc <__adddf3>
 800db12:	ec41 0b10 	vmov	d0, r0, r1
 800db16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db1a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800db1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800db22:	4334      	orrs	r4, r6
 800db24:	d103      	bne.n	800db2e <__ieee754_atan2+0x5e>
 800db26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db2a:	f001 bd99 	b.w	800f660 <atan>
 800db2e:	17bc      	asrs	r4, r7, #30
 800db30:	f004 0402 	and.w	r4, r4, #2
 800db34:	ea53 0909 	orrs.w	r9, r3, r9
 800db38:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800db3c:	d107      	bne.n	800db4e <__ieee754_atan2+0x7e>
 800db3e:	2c02      	cmp	r4, #2
 800db40:	d060      	beq.n	800dc04 <__ieee754_atan2+0x134>
 800db42:	2c03      	cmp	r4, #3
 800db44:	d1e5      	bne.n	800db12 <__ieee754_atan2+0x42>
 800db46:	a142      	add	r1, pc, #264	; (adr r1, 800dc50 <__ieee754_atan2+0x180>)
 800db48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db4c:	e7e1      	b.n	800db12 <__ieee754_atan2+0x42>
 800db4e:	ea52 0808 	orrs.w	r8, r2, r8
 800db52:	d106      	bne.n	800db62 <__ieee754_atan2+0x92>
 800db54:	f1bc 0f00 	cmp.w	ip, #0
 800db58:	da5f      	bge.n	800dc1a <__ieee754_atan2+0x14a>
 800db5a:	a13f      	add	r1, pc, #252	; (adr r1, 800dc58 <__ieee754_atan2+0x188>)
 800db5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db60:	e7d7      	b.n	800db12 <__ieee754_atan2+0x42>
 800db62:	4572      	cmp	r2, lr
 800db64:	d10f      	bne.n	800db86 <__ieee754_atan2+0xb6>
 800db66:	4293      	cmp	r3, r2
 800db68:	f104 34ff 	add.w	r4, r4, #4294967295
 800db6c:	d107      	bne.n	800db7e <__ieee754_atan2+0xae>
 800db6e:	2c02      	cmp	r4, #2
 800db70:	d84c      	bhi.n	800dc0c <__ieee754_atan2+0x13c>
 800db72:	4b35      	ldr	r3, [pc, #212]	; (800dc48 <__ieee754_atan2+0x178>)
 800db74:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800db78:	e9d4 0100 	ldrd	r0, r1, [r4]
 800db7c:	e7c9      	b.n	800db12 <__ieee754_atan2+0x42>
 800db7e:	2c02      	cmp	r4, #2
 800db80:	d848      	bhi.n	800dc14 <__ieee754_atan2+0x144>
 800db82:	4b32      	ldr	r3, [pc, #200]	; (800dc4c <__ieee754_atan2+0x17c>)
 800db84:	e7f6      	b.n	800db74 <__ieee754_atan2+0xa4>
 800db86:	4573      	cmp	r3, lr
 800db88:	d0e4      	beq.n	800db54 <__ieee754_atan2+0x84>
 800db8a:	1a9b      	subs	r3, r3, r2
 800db8c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800db90:	ea4f 5223 	mov.w	r2, r3, asr #20
 800db94:	da1e      	bge.n	800dbd4 <__ieee754_atan2+0x104>
 800db96:	2f00      	cmp	r7, #0
 800db98:	da01      	bge.n	800db9e <__ieee754_atan2+0xce>
 800db9a:	323c      	adds	r2, #60	; 0x3c
 800db9c:	db1e      	blt.n	800dbdc <__ieee754_atan2+0x10c>
 800db9e:	4632      	mov	r2, r6
 800dba0:	463b      	mov	r3, r7
 800dba2:	f7f2 fe6b 	bl	800087c <__aeabi_ddiv>
 800dba6:	ec41 0b10 	vmov	d0, r0, r1
 800dbaa:	f001 fef9 	bl	800f9a0 <fabs>
 800dbae:	f001 fd57 	bl	800f660 <atan>
 800dbb2:	ec51 0b10 	vmov	r0, r1, d0
 800dbb6:	2c01      	cmp	r4, #1
 800dbb8:	d013      	beq.n	800dbe2 <__ieee754_atan2+0x112>
 800dbba:	2c02      	cmp	r4, #2
 800dbbc:	d015      	beq.n	800dbea <__ieee754_atan2+0x11a>
 800dbbe:	2c00      	cmp	r4, #0
 800dbc0:	d0a7      	beq.n	800db12 <__ieee754_atan2+0x42>
 800dbc2:	a319      	add	r3, pc, #100	; (adr r3, 800dc28 <__ieee754_atan2+0x158>)
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	f7f2 fb76 	bl	80002b8 <__aeabi_dsub>
 800dbcc:	a318      	add	r3, pc, #96	; (adr r3, 800dc30 <__ieee754_atan2+0x160>)
 800dbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd2:	e014      	b.n	800dbfe <__ieee754_atan2+0x12e>
 800dbd4:	a118      	add	r1, pc, #96	; (adr r1, 800dc38 <__ieee754_atan2+0x168>)
 800dbd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbda:	e7ec      	b.n	800dbb6 <__ieee754_atan2+0xe6>
 800dbdc:	2000      	movs	r0, #0
 800dbde:	2100      	movs	r1, #0
 800dbe0:	e7e9      	b.n	800dbb6 <__ieee754_atan2+0xe6>
 800dbe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	e793      	b.n	800db12 <__ieee754_atan2+0x42>
 800dbea:	a30f      	add	r3, pc, #60	; (adr r3, 800dc28 <__ieee754_atan2+0x158>)
 800dbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf0:	f7f2 fb62 	bl	80002b8 <__aeabi_dsub>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	a10d      	add	r1, pc, #52	; (adr r1, 800dc30 <__ieee754_atan2+0x160>)
 800dbfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbfe:	f7f2 fb5b 	bl	80002b8 <__aeabi_dsub>
 800dc02:	e786      	b.n	800db12 <__ieee754_atan2+0x42>
 800dc04:	a10a      	add	r1, pc, #40	; (adr r1, 800dc30 <__ieee754_atan2+0x160>)
 800dc06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc0a:	e782      	b.n	800db12 <__ieee754_atan2+0x42>
 800dc0c:	a10c      	add	r1, pc, #48	; (adr r1, 800dc40 <__ieee754_atan2+0x170>)
 800dc0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc12:	e77e      	b.n	800db12 <__ieee754_atan2+0x42>
 800dc14:	2000      	movs	r0, #0
 800dc16:	2100      	movs	r1, #0
 800dc18:	e77b      	b.n	800db12 <__ieee754_atan2+0x42>
 800dc1a:	a107      	add	r1, pc, #28	; (adr r1, 800dc38 <__ieee754_atan2+0x168>)
 800dc1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc20:	e777      	b.n	800db12 <__ieee754_atan2+0x42>
 800dc22:	bf00      	nop
 800dc24:	f3af 8000 	nop.w
 800dc28:	33145c07 	.word	0x33145c07
 800dc2c:	3ca1a626 	.word	0x3ca1a626
 800dc30:	54442d18 	.word	0x54442d18
 800dc34:	400921fb 	.word	0x400921fb
 800dc38:	54442d18 	.word	0x54442d18
 800dc3c:	3ff921fb 	.word	0x3ff921fb
 800dc40:	54442d18 	.word	0x54442d18
 800dc44:	3fe921fb 	.word	0x3fe921fb
 800dc48:	08010410 	.word	0x08010410
 800dc4c:	08010428 	.word	0x08010428
 800dc50:	54442d18 	.word	0x54442d18
 800dc54:	c00921fb 	.word	0xc00921fb
 800dc58:	54442d18 	.word	0x54442d18
 800dc5c:	bff921fb 	.word	0xbff921fb
 800dc60:	7ff00000 	.word	0x7ff00000
 800dc64:	00000000 	.word	0x00000000

0800dc68 <__ieee754_pow>:
 800dc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc6c:	ed2d 8b06 	vpush	{d8-d10}
 800dc70:	b089      	sub	sp, #36	; 0x24
 800dc72:	ed8d 1b00 	vstr	d1, [sp]
 800dc76:	e9dd 2900 	ldrd	r2, r9, [sp]
 800dc7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800dc7e:	ea58 0102 	orrs.w	r1, r8, r2
 800dc82:	ec57 6b10 	vmov	r6, r7, d0
 800dc86:	d115      	bne.n	800dcb4 <__ieee754_pow+0x4c>
 800dc88:	19b3      	adds	r3, r6, r6
 800dc8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800dc8e:	4152      	adcs	r2, r2
 800dc90:	4299      	cmp	r1, r3
 800dc92:	4b89      	ldr	r3, [pc, #548]	; (800deb8 <__ieee754_pow+0x250>)
 800dc94:	4193      	sbcs	r3, r2
 800dc96:	f080 84d2 	bcs.w	800e63e <__ieee754_pow+0x9d6>
 800dc9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc9e:	4630      	mov	r0, r6
 800dca0:	4639      	mov	r1, r7
 800dca2:	f7f2 fb0b 	bl	80002bc <__adddf3>
 800dca6:	ec41 0b10 	vmov	d0, r0, r1
 800dcaa:	b009      	add	sp, #36	; 0x24
 800dcac:	ecbd 8b06 	vpop	{d8-d10}
 800dcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb4:	4b81      	ldr	r3, [pc, #516]	; (800debc <__ieee754_pow+0x254>)
 800dcb6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800dcba:	429c      	cmp	r4, r3
 800dcbc:	ee10 aa10 	vmov	sl, s0
 800dcc0:	463d      	mov	r5, r7
 800dcc2:	dc06      	bgt.n	800dcd2 <__ieee754_pow+0x6a>
 800dcc4:	d101      	bne.n	800dcca <__ieee754_pow+0x62>
 800dcc6:	2e00      	cmp	r6, #0
 800dcc8:	d1e7      	bne.n	800dc9a <__ieee754_pow+0x32>
 800dcca:	4598      	cmp	r8, r3
 800dccc:	dc01      	bgt.n	800dcd2 <__ieee754_pow+0x6a>
 800dcce:	d10f      	bne.n	800dcf0 <__ieee754_pow+0x88>
 800dcd0:	b172      	cbz	r2, 800dcf0 <__ieee754_pow+0x88>
 800dcd2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800dcd6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800dcda:	ea55 050a 	orrs.w	r5, r5, sl
 800dcde:	d1dc      	bne.n	800dc9a <__ieee754_pow+0x32>
 800dce0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dce4:	18db      	adds	r3, r3, r3
 800dce6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800dcea:	4152      	adcs	r2, r2
 800dcec:	429d      	cmp	r5, r3
 800dcee:	e7d0      	b.n	800dc92 <__ieee754_pow+0x2a>
 800dcf0:	2d00      	cmp	r5, #0
 800dcf2:	da3b      	bge.n	800dd6c <__ieee754_pow+0x104>
 800dcf4:	4b72      	ldr	r3, [pc, #456]	; (800dec0 <__ieee754_pow+0x258>)
 800dcf6:	4598      	cmp	r8, r3
 800dcf8:	dc51      	bgt.n	800dd9e <__ieee754_pow+0x136>
 800dcfa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800dcfe:	4598      	cmp	r8, r3
 800dd00:	f340 84ac 	ble.w	800e65c <__ieee754_pow+0x9f4>
 800dd04:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dd08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dd0c:	2b14      	cmp	r3, #20
 800dd0e:	dd0f      	ble.n	800dd30 <__ieee754_pow+0xc8>
 800dd10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dd14:	fa22 f103 	lsr.w	r1, r2, r3
 800dd18:	fa01 f303 	lsl.w	r3, r1, r3
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	f040 849d 	bne.w	800e65c <__ieee754_pow+0x9f4>
 800dd22:	f001 0101 	and.w	r1, r1, #1
 800dd26:	f1c1 0302 	rsb	r3, r1, #2
 800dd2a:	9304      	str	r3, [sp, #16]
 800dd2c:	b182      	cbz	r2, 800dd50 <__ieee754_pow+0xe8>
 800dd2e:	e05f      	b.n	800ddf0 <__ieee754_pow+0x188>
 800dd30:	2a00      	cmp	r2, #0
 800dd32:	d15b      	bne.n	800ddec <__ieee754_pow+0x184>
 800dd34:	f1c3 0314 	rsb	r3, r3, #20
 800dd38:	fa48 f103 	asr.w	r1, r8, r3
 800dd3c:	fa01 f303 	lsl.w	r3, r1, r3
 800dd40:	4543      	cmp	r3, r8
 800dd42:	f040 8488 	bne.w	800e656 <__ieee754_pow+0x9ee>
 800dd46:	f001 0101 	and.w	r1, r1, #1
 800dd4a:	f1c1 0302 	rsb	r3, r1, #2
 800dd4e:	9304      	str	r3, [sp, #16]
 800dd50:	4b5c      	ldr	r3, [pc, #368]	; (800dec4 <__ieee754_pow+0x25c>)
 800dd52:	4598      	cmp	r8, r3
 800dd54:	d132      	bne.n	800ddbc <__ieee754_pow+0x154>
 800dd56:	f1b9 0f00 	cmp.w	r9, #0
 800dd5a:	f280 8478 	bge.w	800e64e <__ieee754_pow+0x9e6>
 800dd5e:	4959      	ldr	r1, [pc, #356]	; (800dec4 <__ieee754_pow+0x25c>)
 800dd60:	4632      	mov	r2, r6
 800dd62:	463b      	mov	r3, r7
 800dd64:	2000      	movs	r0, #0
 800dd66:	f7f2 fd89 	bl	800087c <__aeabi_ddiv>
 800dd6a:	e79c      	b.n	800dca6 <__ieee754_pow+0x3e>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	9304      	str	r3, [sp, #16]
 800dd70:	2a00      	cmp	r2, #0
 800dd72:	d13d      	bne.n	800ddf0 <__ieee754_pow+0x188>
 800dd74:	4b51      	ldr	r3, [pc, #324]	; (800debc <__ieee754_pow+0x254>)
 800dd76:	4598      	cmp	r8, r3
 800dd78:	d1ea      	bne.n	800dd50 <__ieee754_pow+0xe8>
 800dd7a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dd7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dd82:	ea53 030a 	orrs.w	r3, r3, sl
 800dd86:	f000 845a 	beq.w	800e63e <__ieee754_pow+0x9d6>
 800dd8a:	4b4f      	ldr	r3, [pc, #316]	; (800dec8 <__ieee754_pow+0x260>)
 800dd8c:	429c      	cmp	r4, r3
 800dd8e:	dd08      	ble.n	800dda2 <__ieee754_pow+0x13a>
 800dd90:	f1b9 0f00 	cmp.w	r9, #0
 800dd94:	f2c0 8457 	blt.w	800e646 <__ieee754_pow+0x9de>
 800dd98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd9c:	e783      	b.n	800dca6 <__ieee754_pow+0x3e>
 800dd9e:	2302      	movs	r3, #2
 800dda0:	e7e5      	b.n	800dd6e <__ieee754_pow+0x106>
 800dda2:	f1b9 0f00 	cmp.w	r9, #0
 800dda6:	f04f 0000 	mov.w	r0, #0
 800ddaa:	f04f 0100 	mov.w	r1, #0
 800ddae:	f6bf af7a 	bge.w	800dca6 <__ieee754_pow+0x3e>
 800ddb2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ddb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ddba:	e774      	b.n	800dca6 <__ieee754_pow+0x3e>
 800ddbc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ddc0:	d106      	bne.n	800ddd0 <__ieee754_pow+0x168>
 800ddc2:	4632      	mov	r2, r6
 800ddc4:	463b      	mov	r3, r7
 800ddc6:	4630      	mov	r0, r6
 800ddc8:	4639      	mov	r1, r7
 800ddca:	f7f2 fc2d 	bl	8000628 <__aeabi_dmul>
 800ddce:	e76a      	b.n	800dca6 <__ieee754_pow+0x3e>
 800ddd0:	4b3e      	ldr	r3, [pc, #248]	; (800decc <__ieee754_pow+0x264>)
 800ddd2:	4599      	cmp	r9, r3
 800ddd4:	d10c      	bne.n	800ddf0 <__ieee754_pow+0x188>
 800ddd6:	2d00      	cmp	r5, #0
 800ddd8:	db0a      	blt.n	800ddf0 <__ieee754_pow+0x188>
 800ddda:	ec47 6b10 	vmov	d0, r6, r7
 800ddde:	b009      	add	sp, #36	; 0x24
 800dde0:	ecbd 8b06 	vpop	{d8-d10}
 800dde4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde8:	f000 be7a 	b.w	800eae0 <__ieee754_sqrt>
 800ddec:	2300      	movs	r3, #0
 800ddee:	9304      	str	r3, [sp, #16]
 800ddf0:	ec47 6b10 	vmov	d0, r6, r7
 800ddf4:	f001 fdd4 	bl	800f9a0 <fabs>
 800ddf8:	ec51 0b10 	vmov	r0, r1, d0
 800ddfc:	f1ba 0f00 	cmp.w	sl, #0
 800de00:	d129      	bne.n	800de56 <__ieee754_pow+0x1ee>
 800de02:	b124      	cbz	r4, 800de0e <__ieee754_pow+0x1a6>
 800de04:	4b2f      	ldr	r3, [pc, #188]	; (800dec4 <__ieee754_pow+0x25c>)
 800de06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d123      	bne.n	800de56 <__ieee754_pow+0x1ee>
 800de0e:	f1b9 0f00 	cmp.w	r9, #0
 800de12:	da05      	bge.n	800de20 <__ieee754_pow+0x1b8>
 800de14:	4602      	mov	r2, r0
 800de16:	460b      	mov	r3, r1
 800de18:	2000      	movs	r0, #0
 800de1a:	492a      	ldr	r1, [pc, #168]	; (800dec4 <__ieee754_pow+0x25c>)
 800de1c:	f7f2 fd2e 	bl	800087c <__aeabi_ddiv>
 800de20:	2d00      	cmp	r5, #0
 800de22:	f6bf af40 	bge.w	800dca6 <__ieee754_pow+0x3e>
 800de26:	9b04      	ldr	r3, [sp, #16]
 800de28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800de2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800de30:	4323      	orrs	r3, r4
 800de32:	d108      	bne.n	800de46 <__ieee754_pow+0x1de>
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	4610      	mov	r0, r2
 800de3a:	4619      	mov	r1, r3
 800de3c:	f7f2 fa3c 	bl	80002b8 <__aeabi_dsub>
 800de40:	4602      	mov	r2, r0
 800de42:	460b      	mov	r3, r1
 800de44:	e78f      	b.n	800dd66 <__ieee754_pow+0xfe>
 800de46:	9b04      	ldr	r3, [sp, #16]
 800de48:	2b01      	cmp	r3, #1
 800de4a:	f47f af2c 	bne.w	800dca6 <__ieee754_pow+0x3e>
 800de4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de52:	4619      	mov	r1, r3
 800de54:	e727      	b.n	800dca6 <__ieee754_pow+0x3e>
 800de56:	0feb      	lsrs	r3, r5, #31
 800de58:	3b01      	subs	r3, #1
 800de5a:	9306      	str	r3, [sp, #24]
 800de5c:	9a06      	ldr	r2, [sp, #24]
 800de5e:	9b04      	ldr	r3, [sp, #16]
 800de60:	4313      	orrs	r3, r2
 800de62:	d102      	bne.n	800de6a <__ieee754_pow+0x202>
 800de64:	4632      	mov	r2, r6
 800de66:	463b      	mov	r3, r7
 800de68:	e7e6      	b.n	800de38 <__ieee754_pow+0x1d0>
 800de6a:	4b19      	ldr	r3, [pc, #100]	; (800ded0 <__ieee754_pow+0x268>)
 800de6c:	4598      	cmp	r8, r3
 800de6e:	f340 80fb 	ble.w	800e068 <__ieee754_pow+0x400>
 800de72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800de76:	4598      	cmp	r8, r3
 800de78:	4b13      	ldr	r3, [pc, #76]	; (800dec8 <__ieee754_pow+0x260>)
 800de7a:	dd0c      	ble.n	800de96 <__ieee754_pow+0x22e>
 800de7c:	429c      	cmp	r4, r3
 800de7e:	dc0f      	bgt.n	800dea0 <__ieee754_pow+0x238>
 800de80:	f1b9 0f00 	cmp.w	r9, #0
 800de84:	da0f      	bge.n	800dea6 <__ieee754_pow+0x23e>
 800de86:	2000      	movs	r0, #0
 800de88:	b009      	add	sp, #36	; 0x24
 800de8a:	ecbd 8b06 	vpop	{d8-d10}
 800de8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de92:	f001 bbda 	b.w	800f64a <__math_oflow>
 800de96:	429c      	cmp	r4, r3
 800de98:	dbf2      	blt.n	800de80 <__ieee754_pow+0x218>
 800de9a:	4b0a      	ldr	r3, [pc, #40]	; (800dec4 <__ieee754_pow+0x25c>)
 800de9c:	429c      	cmp	r4, r3
 800de9e:	dd19      	ble.n	800ded4 <__ieee754_pow+0x26c>
 800dea0:	f1b9 0f00 	cmp.w	r9, #0
 800dea4:	dcef      	bgt.n	800de86 <__ieee754_pow+0x21e>
 800dea6:	2000      	movs	r0, #0
 800dea8:	b009      	add	sp, #36	; 0x24
 800deaa:	ecbd 8b06 	vpop	{d8-d10}
 800deae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb2:	f001 bbc1 	b.w	800f638 <__math_uflow>
 800deb6:	bf00      	nop
 800deb8:	fff00000 	.word	0xfff00000
 800debc:	7ff00000 	.word	0x7ff00000
 800dec0:	433fffff 	.word	0x433fffff
 800dec4:	3ff00000 	.word	0x3ff00000
 800dec8:	3fefffff 	.word	0x3fefffff
 800decc:	3fe00000 	.word	0x3fe00000
 800ded0:	41e00000 	.word	0x41e00000
 800ded4:	4b60      	ldr	r3, [pc, #384]	; (800e058 <__ieee754_pow+0x3f0>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	f7f2 f9ee 	bl	80002b8 <__aeabi_dsub>
 800dedc:	a354      	add	r3, pc, #336	; (adr r3, 800e030 <__ieee754_pow+0x3c8>)
 800dede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee2:	4604      	mov	r4, r0
 800dee4:	460d      	mov	r5, r1
 800dee6:	f7f2 fb9f 	bl	8000628 <__aeabi_dmul>
 800deea:	a353      	add	r3, pc, #332	; (adr r3, 800e038 <__ieee754_pow+0x3d0>)
 800deec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def0:	4606      	mov	r6, r0
 800def2:	460f      	mov	r7, r1
 800def4:	4620      	mov	r0, r4
 800def6:	4629      	mov	r1, r5
 800def8:	f7f2 fb96 	bl	8000628 <__aeabi_dmul>
 800defc:	4b57      	ldr	r3, [pc, #348]	; (800e05c <__ieee754_pow+0x3f4>)
 800defe:	4682      	mov	sl, r0
 800df00:	468b      	mov	fp, r1
 800df02:	2200      	movs	r2, #0
 800df04:	4620      	mov	r0, r4
 800df06:	4629      	mov	r1, r5
 800df08:	f7f2 fb8e 	bl	8000628 <__aeabi_dmul>
 800df0c:	4602      	mov	r2, r0
 800df0e:	460b      	mov	r3, r1
 800df10:	a14b      	add	r1, pc, #300	; (adr r1, 800e040 <__ieee754_pow+0x3d8>)
 800df12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df16:	f7f2 f9cf 	bl	80002b8 <__aeabi_dsub>
 800df1a:	4622      	mov	r2, r4
 800df1c:	462b      	mov	r3, r5
 800df1e:	f7f2 fb83 	bl	8000628 <__aeabi_dmul>
 800df22:	4602      	mov	r2, r0
 800df24:	460b      	mov	r3, r1
 800df26:	2000      	movs	r0, #0
 800df28:	494d      	ldr	r1, [pc, #308]	; (800e060 <__ieee754_pow+0x3f8>)
 800df2a:	f7f2 f9c5 	bl	80002b8 <__aeabi_dsub>
 800df2e:	4622      	mov	r2, r4
 800df30:	4680      	mov	r8, r0
 800df32:	4689      	mov	r9, r1
 800df34:	462b      	mov	r3, r5
 800df36:	4620      	mov	r0, r4
 800df38:	4629      	mov	r1, r5
 800df3a:	f7f2 fb75 	bl	8000628 <__aeabi_dmul>
 800df3e:	4602      	mov	r2, r0
 800df40:	460b      	mov	r3, r1
 800df42:	4640      	mov	r0, r8
 800df44:	4649      	mov	r1, r9
 800df46:	f7f2 fb6f 	bl	8000628 <__aeabi_dmul>
 800df4a:	a33f      	add	r3, pc, #252	; (adr r3, 800e048 <__ieee754_pow+0x3e0>)
 800df4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df50:	f7f2 fb6a 	bl	8000628 <__aeabi_dmul>
 800df54:	4602      	mov	r2, r0
 800df56:	460b      	mov	r3, r1
 800df58:	4650      	mov	r0, sl
 800df5a:	4659      	mov	r1, fp
 800df5c:	f7f2 f9ac 	bl	80002b8 <__aeabi_dsub>
 800df60:	4602      	mov	r2, r0
 800df62:	460b      	mov	r3, r1
 800df64:	4680      	mov	r8, r0
 800df66:	4689      	mov	r9, r1
 800df68:	4630      	mov	r0, r6
 800df6a:	4639      	mov	r1, r7
 800df6c:	f7f2 f9a6 	bl	80002bc <__adddf3>
 800df70:	2000      	movs	r0, #0
 800df72:	4632      	mov	r2, r6
 800df74:	463b      	mov	r3, r7
 800df76:	4604      	mov	r4, r0
 800df78:	460d      	mov	r5, r1
 800df7a:	f7f2 f99d 	bl	80002b8 <__aeabi_dsub>
 800df7e:	4602      	mov	r2, r0
 800df80:	460b      	mov	r3, r1
 800df82:	4640      	mov	r0, r8
 800df84:	4649      	mov	r1, r9
 800df86:	f7f2 f997 	bl	80002b8 <__aeabi_dsub>
 800df8a:	9b04      	ldr	r3, [sp, #16]
 800df8c:	9a06      	ldr	r2, [sp, #24]
 800df8e:	3b01      	subs	r3, #1
 800df90:	4313      	orrs	r3, r2
 800df92:	4682      	mov	sl, r0
 800df94:	468b      	mov	fp, r1
 800df96:	f040 81e7 	bne.w	800e368 <__ieee754_pow+0x700>
 800df9a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e050 <__ieee754_pow+0x3e8>
 800df9e:	eeb0 8a47 	vmov.f32	s16, s14
 800dfa2:	eef0 8a67 	vmov.f32	s17, s15
 800dfa6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dfaa:	2600      	movs	r6, #0
 800dfac:	4632      	mov	r2, r6
 800dfae:	463b      	mov	r3, r7
 800dfb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfb4:	f7f2 f980 	bl	80002b8 <__aeabi_dsub>
 800dfb8:	4622      	mov	r2, r4
 800dfba:	462b      	mov	r3, r5
 800dfbc:	f7f2 fb34 	bl	8000628 <__aeabi_dmul>
 800dfc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfc4:	4680      	mov	r8, r0
 800dfc6:	4689      	mov	r9, r1
 800dfc8:	4650      	mov	r0, sl
 800dfca:	4659      	mov	r1, fp
 800dfcc:	f7f2 fb2c 	bl	8000628 <__aeabi_dmul>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	4640      	mov	r0, r8
 800dfd6:	4649      	mov	r1, r9
 800dfd8:	f7f2 f970 	bl	80002bc <__adddf3>
 800dfdc:	4632      	mov	r2, r6
 800dfde:	463b      	mov	r3, r7
 800dfe0:	4680      	mov	r8, r0
 800dfe2:	4689      	mov	r9, r1
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	f7f2 fb1e 	bl	8000628 <__aeabi_dmul>
 800dfec:	460b      	mov	r3, r1
 800dfee:	4604      	mov	r4, r0
 800dff0:	460d      	mov	r5, r1
 800dff2:	4602      	mov	r2, r0
 800dff4:	4649      	mov	r1, r9
 800dff6:	4640      	mov	r0, r8
 800dff8:	f7f2 f960 	bl	80002bc <__adddf3>
 800dffc:	4b19      	ldr	r3, [pc, #100]	; (800e064 <__ieee754_pow+0x3fc>)
 800dffe:	4299      	cmp	r1, r3
 800e000:	ec45 4b19 	vmov	d9, r4, r5
 800e004:	4606      	mov	r6, r0
 800e006:	460f      	mov	r7, r1
 800e008:	468b      	mov	fp, r1
 800e00a:	f340 82f1 	ble.w	800e5f0 <__ieee754_pow+0x988>
 800e00e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e012:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e016:	4303      	orrs	r3, r0
 800e018:	f000 81e4 	beq.w	800e3e4 <__ieee754_pow+0x77c>
 800e01c:	ec51 0b18 	vmov	r0, r1, d8
 800e020:	2200      	movs	r2, #0
 800e022:	2300      	movs	r3, #0
 800e024:	f7f2 fd72 	bl	8000b0c <__aeabi_dcmplt>
 800e028:	3800      	subs	r0, #0
 800e02a:	bf18      	it	ne
 800e02c:	2001      	movne	r0, #1
 800e02e:	e72b      	b.n	800de88 <__ieee754_pow+0x220>
 800e030:	60000000 	.word	0x60000000
 800e034:	3ff71547 	.word	0x3ff71547
 800e038:	f85ddf44 	.word	0xf85ddf44
 800e03c:	3e54ae0b 	.word	0x3e54ae0b
 800e040:	55555555 	.word	0x55555555
 800e044:	3fd55555 	.word	0x3fd55555
 800e048:	652b82fe 	.word	0x652b82fe
 800e04c:	3ff71547 	.word	0x3ff71547
 800e050:	00000000 	.word	0x00000000
 800e054:	bff00000 	.word	0xbff00000
 800e058:	3ff00000 	.word	0x3ff00000
 800e05c:	3fd00000 	.word	0x3fd00000
 800e060:	3fe00000 	.word	0x3fe00000
 800e064:	408fffff 	.word	0x408fffff
 800e068:	4bd5      	ldr	r3, [pc, #852]	; (800e3c0 <__ieee754_pow+0x758>)
 800e06a:	402b      	ands	r3, r5
 800e06c:	2200      	movs	r2, #0
 800e06e:	b92b      	cbnz	r3, 800e07c <__ieee754_pow+0x414>
 800e070:	4bd4      	ldr	r3, [pc, #848]	; (800e3c4 <__ieee754_pow+0x75c>)
 800e072:	f7f2 fad9 	bl	8000628 <__aeabi_dmul>
 800e076:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e07a:	460c      	mov	r4, r1
 800e07c:	1523      	asrs	r3, r4, #20
 800e07e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e082:	4413      	add	r3, r2
 800e084:	9305      	str	r3, [sp, #20]
 800e086:	4bd0      	ldr	r3, [pc, #832]	; (800e3c8 <__ieee754_pow+0x760>)
 800e088:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e08c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e090:	429c      	cmp	r4, r3
 800e092:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e096:	dd08      	ble.n	800e0aa <__ieee754_pow+0x442>
 800e098:	4bcc      	ldr	r3, [pc, #816]	; (800e3cc <__ieee754_pow+0x764>)
 800e09a:	429c      	cmp	r4, r3
 800e09c:	f340 8162 	ble.w	800e364 <__ieee754_pow+0x6fc>
 800e0a0:	9b05      	ldr	r3, [sp, #20]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	9305      	str	r3, [sp, #20]
 800e0a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e0aa:	2400      	movs	r4, #0
 800e0ac:	00e3      	lsls	r3, r4, #3
 800e0ae:	9307      	str	r3, [sp, #28]
 800e0b0:	4bc7      	ldr	r3, [pc, #796]	; (800e3d0 <__ieee754_pow+0x768>)
 800e0b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e0b6:	ed93 7b00 	vldr	d7, [r3]
 800e0ba:	4629      	mov	r1, r5
 800e0bc:	ec53 2b17 	vmov	r2, r3, d7
 800e0c0:	eeb0 9a47 	vmov.f32	s18, s14
 800e0c4:	eef0 9a67 	vmov.f32	s19, s15
 800e0c8:	4682      	mov	sl, r0
 800e0ca:	f7f2 f8f5 	bl	80002b8 <__aeabi_dsub>
 800e0ce:	4652      	mov	r2, sl
 800e0d0:	4606      	mov	r6, r0
 800e0d2:	460f      	mov	r7, r1
 800e0d4:	462b      	mov	r3, r5
 800e0d6:	ec51 0b19 	vmov	r0, r1, d9
 800e0da:	f7f2 f8ef 	bl	80002bc <__adddf3>
 800e0de:	4602      	mov	r2, r0
 800e0e0:	460b      	mov	r3, r1
 800e0e2:	2000      	movs	r0, #0
 800e0e4:	49bb      	ldr	r1, [pc, #748]	; (800e3d4 <__ieee754_pow+0x76c>)
 800e0e6:	f7f2 fbc9 	bl	800087c <__aeabi_ddiv>
 800e0ea:	ec41 0b1a 	vmov	d10, r0, r1
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	4639      	mov	r1, r7
 800e0f6:	f7f2 fa97 	bl	8000628 <__aeabi_dmul>
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e100:	9302      	str	r3, [sp, #8]
 800e102:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e106:	46ab      	mov	fp, r5
 800e108:	106d      	asrs	r5, r5, #1
 800e10a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e10e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e112:	ec41 0b18 	vmov	d8, r0, r1
 800e116:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e11a:	2200      	movs	r2, #0
 800e11c:	4640      	mov	r0, r8
 800e11e:	4649      	mov	r1, r9
 800e120:	4614      	mov	r4, r2
 800e122:	461d      	mov	r5, r3
 800e124:	f7f2 fa80 	bl	8000628 <__aeabi_dmul>
 800e128:	4602      	mov	r2, r0
 800e12a:	460b      	mov	r3, r1
 800e12c:	4630      	mov	r0, r6
 800e12e:	4639      	mov	r1, r7
 800e130:	f7f2 f8c2 	bl	80002b8 <__aeabi_dsub>
 800e134:	ec53 2b19 	vmov	r2, r3, d9
 800e138:	4606      	mov	r6, r0
 800e13a:	460f      	mov	r7, r1
 800e13c:	4620      	mov	r0, r4
 800e13e:	4629      	mov	r1, r5
 800e140:	f7f2 f8ba 	bl	80002b8 <__aeabi_dsub>
 800e144:	4602      	mov	r2, r0
 800e146:	460b      	mov	r3, r1
 800e148:	4650      	mov	r0, sl
 800e14a:	4659      	mov	r1, fp
 800e14c:	f7f2 f8b4 	bl	80002b8 <__aeabi_dsub>
 800e150:	4642      	mov	r2, r8
 800e152:	464b      	mov	r3, r9
 800e154:	f7f2 fa68 	bl	8000628 <__aeabi_dmul>
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	4630      	mov	r0, r6
 800e15e:	4639      	mov	r1, r7
 800e160:	f7f2 f8aa 	bl	80002b8 <__aeabi_dsub>
 800e164:	ec53 2b1a 	vmov	r2, r3, d10
 800e168:	f7f2 fa5e 	bl	8000628 <__aeabi_dmul>
 800e16c:	ec53 2b18 	vmov	r2, r3, d8
 800e170:	ec41 0b19 	vmov	d9, r0, r1
 800e174:	ec51 0b18 	vmov	r0, r1, d8
 800e178:	f7f2 fa56 	bl	8000628 <__aeabi_dmul>
 800e17c:	a37c      	add	r3, pc, #496	; (adr r3, 800e370 <__ieee754_pow+0x708>)
 800e17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e182:	4604      	mov	r4, r0
 800e184:	460d      	mov	r5, r1
 800e186:	f7f2 fa4f 	bl	8000628 <__aeabi_dmul>
 800e18a:	a37b      	add	r3, pc, #492	; (adr r3, 800e378 <__ieee754_pow+0x710>)
 800e18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e190:	f7f2 f894 	bl	80002bc <__adddf3>
 800e194:	4622      	mov	r2, r4
 800e196:	462b      	mov	r3, r5
 800e198:	f7f2 fa46 	bl	8000628 <__aeabi_dmul>
 800e19c:	a378      	add	r3, pc, #480	; (adr r3, 800e380 <__ieee754_pow+0x718>)
 800e19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a2:	f7f2 f88b 	bl	80002bc <__adddf3>
 800e1a6:	4622      	mov	r2, r4
 800e1a8:	462b      	mov	r3, r5
 800e1aa:	f7f2 fa3d 	bl	8000628 <__aeabi_dmul>
 800e1ae:	a376      	add	r3, pc, #472	; (adr r3, 800e388 <__ieee754_pow+0x720>)
 800e1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b4:	f7f2 f882 	bl	80002bc <__adddf3>
 800e1b8:	4622      	mov	r2, r4
 800e1ba:	462b      	mov	r3, r5
 800e1bc:	f7f2 fa34 	bl	8000628 <__aeabi_dmul>
 800e1c0:	a373      	add	r3, pc, #460	; (adr r3, 800e390 <__ieee754_pow+0x728>)
 800e1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c6:	f7f2 f879 	bl	80002bc <__adddf3>
 800e1ca:	4622      	mov	r2, r4
 800e1cc:	462b      	mov	r3, r5
 800e1ce:	f7f2 fa2b 	bl	8000628 <__aeabi_dmul>
 800e1d2:	a371      	add	r3, pc, #452	; (adr r3, 800e398 <__ieee754_pow+0x730>)
 800e1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d8:	f7f2 f870 	bl	80002bc <__adddf3>
 800e1dc:	4622      	mov	r2, r4
 800e1de:	4606      	mov	r6, r0
 800e1e0:	460f      	mov	r7, r1
 800e1e2:	462b      	mov	r3, r5
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	4629      	mov	r1, r5
 800e1e8:	f7f2 fa1e 	bl	8000628 <__aeabi_dmul>
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	4639      	mov	r1, r7
 800e1f4:	f7f2 fa18 	bl	8000628 <__aeabi_dmul>
 800e1f8:	4642      	mov	r2, r8
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	460d      	mov	r5, r1
 800e1fe:	464b      	mov	r3, r9
 800e200:	ec51 0b18 	vmov	r0, r1, d8
 800e204:	f7f2 f85a 	bl	80002bc <__adddf3>
 800e208:	ec53 2b19 	vmov	r2, r3, d9
 800e20c:	f7f2 fa0c 	bl	8000628 <__aeabi_dmul>
 800e210:	4622      	mov	r2, r4
 800e212:	462b      	mov	r3, r5
 800e214:	f7f2 f852 	bl	80002bc <__adddf3>
 800e218:	4642      	mov	r2, r8
 800e21a:	4682      	mov	sl, r0
 800e21c:	468b      	mov	fp, r1
 800e21e:	464b      	mov	r3, r9
 800e220:	4640      	mov	r0, r8
 800e222:	4649      	mov	r1, r9
 800e224:	f7f2 fa00 	bl	8000628 <__aeabi_dmul>
 800e228:	4b6b      	ldr	r3, [pc, #428]	; (800e3d8 <__ieee754_pow+0x770>)
 800e22a:	2200      	movs	r2, #0
 800e22c:	4606      	mov	r6, r0
 800e22e:	460f      	mov	r7, r1
 800e230:	f7f2 f844 	bl	80002bc <__adddf3>
 800e234:	4652      	mov	r2, sl
 800e236:	465b      	mov	r3, fp
 800e238:	f7f2 f840 	bl	80002bc <__adddf3>
 800e23c:	2000      	movs	r0, #0
 800e23e:	4604      	mov	r4, r0
 800e240:	460d      	mov	r5, r1
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	4640      	mov	r0, r8
 800e248:	4649      	mov	r1, r9
 800e24a:	f7f2 f9ed 	bl	8000628 <__aeabi_dmul>
 800e24e:	4b62      	ldr	r3, [pc, #392]	; (800e3d8 <__ieee754_pow+0x770>)
 800e250:	4680      	mov	r8, r0
 800e252:	4689      	mov	r9, r1
 800e254:	2200      	movs	r2, #0
 800e256:	4620      	mov	r0, r4
 800e258:	4629      	mov	r1, r5
 800e25a:	f7f2 f82d 	bl	80002b8 <__aeabi_dsub>
 800e25e:	4632      	mov	r2, r6
 800e260:	463b      	mov	r3, r7
 800e262:	f7f2 f829 	bl	80002b8 <__aeabi_dsub>
 800e266:	4602      	mov	r2, r0
 800e268:	460b      	mov	r3, r1
 800e26a:	4650      	mov	r0, sl
 800e26c:	4659      	mov	r1, fp
 800e26e:	f7f2 f823 	bl	80002b8 <__aeabi_dsub>
 800e272:	ec53 2b18 	vmov	r2, r3, d8
 800e276:	f7f2 f9d7 	bl	8000628 <__aeabi_dmul>
 800e27a:	4622      	mov	r2, r4
 800e27c:	4606      	mov	r6, r0
 800e27e:	460f      	mov	r7, r1
 800e280:	462b      	mov	r3, r5
 800e282:	ec51 0b19 	vmov	r0, r1, d9
 800e286:	f7f2 f9cf 	bl	8000628 <__aeabi_dmul>
 800e28a:	4602      	mov	r2, r0
 800e28c:	460b      	mov	r3, r1
 800e28e:	4630      	mov	r0, r6
 800e290:	4639      	mov	r1, r7
 800e292:	f7f2 f813 	bl	80002bc <__adddf3>
 800e296:	4606      	mov	r6, r0
 800e298:	460f      	mov	r7, r1
 800e29a:	4602      	mov	r2, r0
 800e29c:	460b      	mov	r3, r1
 800e29e:	4640      	mov	r0, r8
 800e2a0:	4649      	mov	r1, r9
 800e2a2:	f7f2 f80b 	bl	80002bc <__adddf3>
 800e2a6:	a33e      	add	r3, pc, #248	; (adr r3, 800e3a0 <__ieee754_pow+0x738>)
 800e2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	460d      	mov	r5, r1
 800e2b2:	f7f2 f9b9 	bl	8000628 <__aeabi_dmul>
 800e2b6:	4642      	mov	r2, r8
 800e2b8:	ec41 0b18 	vmov	d8, r0, r1
 800e2bc:	464b      	mov	r3, r9
 800e2be:	4620      	mov	r0, r4
 800e2c0:	4629      	mov	r1, r5
 800e2c2:	f7f1 fff9 	bl	80002b8 <__aeabi_dsub>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	4630      	mov	r0, r6
 800e2cc:	4639      	mov	r1, r7
 800e2ce:	f7f1 fff3 	bl	80002b8 <__aeabi_dsub>
 800e2d2:	a335      	add	r3, pc, #212	; (adr r3, 800e3a8 <__ieee754_pow+0x740>)
 800e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d8:	f7f2 f9a6 	bl	8000628 <__aeabi_dmul>
 800e2dc:	a334      	add	r3, pc, #208	; (adr r3, 800e3b0 <__ieee754_pow+0x748>)
 800e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e2:	4606      	mov	r6, r0
 800e2e4:	460f      	mov	r7, r1
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	4629      	mov	r1, r5
 800e2ea:	f7f2 f99d 	bl	8000628 <__aeabi_dmul>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	4630      	mov	r0, r6
 800e2f4:	4639      	mov	r1, r7
 800e2f6:	f7f1 ffe1 	bl	80002bc <__adddf3>
 800e2fa:	9a07      	ldr	r2, [sp, #28]
 800e2fc:	4b37      	ldr	r3, [pc, #220]	; (800e3dc <__ieee754_pow+0x774>)
 800e2fe:	4413      	add	r3, r2
 800e300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e304:	f7f1 ffda 	bl	80002bc <__adddf3>
 800e308:	4682      	mov	sl, r0
 800e30a:	9805      	ldr	r0, [sp, #20]
 800e30c:	468b      	mov	fp, r1
 800e30e:	f7f2 f921 	bl	8000554 <__aeabi_i2d>
 800e312:	9a07      	ldr	r2, [sp, #28]
 800e314:	4b32      	ldr	r3, [pc, #200]	; (800e3e0 <__ieee754_pow+0x778>)
 800e316:	4413      	add	r3, r2
 800e318:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e31c:	4606      	mov	r6, r0
 800e31e:	460f      	mov	r7, r1
 800e320:	4652      	mov	r2, sl
 800e322:	465b      	mov	r3, fp
 800e324:	ec51 0b18 	vmov	r0, r1, d8
 800e328:	f7f1 ffc8 	bl	80002bc <__adddf3>
 800e32c:	4642      	mov	r2, r8
 800e32e:	464b      	mov	r3, r9
 800e330:	f7f1 ffc4 	bl	80002bc <__adddf3>
 800e334:	4632      	mov	r2, r6
 800e336:	463b      	mov	r3, r7
 800e338:	f7f1 ffc0 	bl	80002bc <__adddf3>
 800e33c:	2000      	movs	r0, #0
 800e33e:	4632      	mov	r2, r6
 800e340:	463b      	mov	r3, r7
 800e342:	4604      	mov	r4, r0
 800e344:	460d      	mov	r5, r1
 800e346:	f7f1 ffb7 	bl	80002b8 <__aeabi_dsub>
 800e34a:	4642      	mov	r2, r8
 800e34c:	464b      	mov	r3, r9
 800e34e:	f7f1 ffb3 	bl	80002b8 <__aeabi_dsub>
 800e352:	ec53 2b18 	vmov	r2, r3, d8
 800e356:	f7f1 ffaf 	bl	80002b8 <__aeabi_dsub>
 800e35a:	4602      	mov	r2, r0
 800e35c:	460b      	mov	r3, r1
 800e35e:	4650      	mov	r0, sl
 800e360:	4659      	mov	r1, fp
 800e362:	e610      	b.n	800df86 <__ieee754_pow+0x31e>
 800e364:	2401      	movs	r4, #1
 800e366:	e6a1      	b.n	800e0ac <__ieee754_pow+0x444>
 800e368:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e3b8 <__ieee754_pow+0x750>
 800e36c:	e617      	b.n	800df9e <__ieee754_pow+0x336>
 800e36e:	bf00      	nop
 800e370:	4a454eef 	.word	0x4a454eef
 800e374:	3fca7e28 	.word	0x3fca7e28
 800e378:	93c9db65 	.word	0x93c9db65
 800e37c:	3fcd864a 	.word	0x3fcd864a
 800e380:	a91d4101 	.word	0xa91d4101
 800e384:	3fd17460 	.word	0x3fd17460
 800e388:	518f264d 	.word	0x518f264d
 800e38c:	3fd55555 	.word	0x3fd55555
 800e390:	db6fabff 	.word	0xdb6fabff
 800e394:	3fdb6db6 	.word	0x3fdb6db6
 800e398:	33333303 	.word	0x33333303
 800e39c:	3fe33333 	.word	0x3fe33333
 800e3a0:	e0000000 	.word	0xe0000000
 800e3a4:	3feec709 	.word	0x3feec709
 800e3a8:	dc3a03fd 	.word	0xdc3a03fd
 800e3ac:	3feec709 	.word	0x3feec709
 800e3b0:	145b01f5 	.word	0x145b01f5
 800e3b4:	be3e2fe0 	.word	0xbe3e2fe0
 800e3b8:	00000000 	.word	0x00000000
 800e3bc:	3ff00000 	.word	0x3ff00000
 800e3c0:	7ff00000 	.word	0x7ff00000
 800e3c4:	43400000 	.word	0x43400000
 800e3c8:	0003988e 	.word	0x0003988e
 800e3cc:	000bb679 	.word	0x000bb679
 800e3d0:	08010440 	.word	0x08010440
 800e3d4:	3ff00000 	.word	0x3ff00000
 800e3d8:	40080000 	.word	0x40080000
 800e3dc:	08010460 	.word	0x08010460
 800e3e0:	08010450 	.word	0x08010450
 800e3e4:	a3b5      	add	r3, pc, #724	; (adr r3, 800e6bc <__ieee754_pow+0xa54>)
 800e3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ea:	4640      	mov	r0, r8
 800e3ec:	4649      	mov	r1, r9
 800e3ee:	f7f1 ff65 	bl	80002bc <__adddf3>
 800e3f2:	4622      	mov	r2, r4
 800e3f4:	ec41 0b1a 	vmov	d10, r0, r1
 800e3f8:	462b      	mov	r3, r5
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	4639      	mov	r1, r7
 800e3fe:	f7f1 ff5b 	bl	80002b8 <__aeabi_dsub>
 800e402:	4602      	mov	r2, r0
 800e404:	460b      	mov	r3, r1
 800e406:	ec51 0b1a 	vmov	r0, r1, d10
 800e40a:	f7f2 fb9d 	bl	8000b48 <__aeabi_dcmpgt>
 800e40e:	2800      	cmp	r0, #0
 800e410:	f47f ae04 	bne.w	800e01c <__ieee754_pow+0x3b4>
 800e414:	4aa4      	ldr	r2, [pc, #656]	; (800e6a8 <__ieee754_pow+0xa40>)
 800e416:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e41a:	4293      	cmp	r3, r2
 800e41c:	f340 8108 	ble.w	800e630 <__ieee754_pow+0x9c8>
 800e420:	151b      	asrs	r3, r3, #20
 800e422:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e426:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e42a:	fa4a f303 	asr.w	r3, sl, r3
 800e42e:	445b      	add	r3, fp
 800e430:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e434:	4e9d      	ldr	r6, [pc, #628]	; (800e6ac <__ieee754_pow+0xa44>)
 800e436:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e43a:	4116      	asrs	r6, r2
 800e43c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e440:	2000      	movs	r0, #0
 800e442:	ea23 0106 	bic.w	r1, r3, r6
 800e446:	f1c2 0214 	rsb	r2, r2, #20
 800e44a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e44e:	fa4a fa02 	asr.w	sl, sl, r2
 800e452:	f1bb 0f00 	cmp.w	fp, #0
 800e456:	4602      	mov	r2, r0
 800e458:	460b      	mov	r3, r1
 800e45a:	4620      	mov	r0, r4
 800e45c:	4629      	mov	r1, r5
 800e45e:	bfb8      	it	lt
 800e460:	f1ca 0a00 	rsblt	sl, sl, #0
 800e464:	f7f1 ff28 	bl	80002b8 <__aeabi_dsub>
 800e468:	ec41 0b19 	vmov	d9, r0, r1
 800e46c:	4642      	mov	r2, r8
 800e46e:	464b      	mov	r3, r9
 800e470:	ec51 0b19 	vmov	r0, r1, d9
 800e474:	f7f1 ff22 	bl	80002bc <__adddf3>
 800e478:	a37b      	add	r3, pc, #492	; (adr r3, 800e668 <__ieee754_pow+0xa00>)
 800e47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47e:	2000      	movs	r0, #0
 800e480:	4604      	mov	r4, r0
 800e482:	460d      	mov	r5, r1
 800e484:	f7f2 f8d0 	bl	8000628 <__aeabi_dmul>
 800e488:	ec53 2b19 	vmov	r2, r3, d9
 800e48c:	4606      	mov	r6, r0
 800e48e:	460f      	mov	r7, r1
 800e490:	4620      	mov	r0, r4
 800e492:	4629      	mov	r1, r5
 800e494:	f7f1 ff10 	bl	80002b8 <__aeabi_dsub>
 800e498:	4602      	mov	r2, r0
 800e49a:	460b      	mov	r3, r1
 800e49c:	4640      	mov	r0, r8
 800e49e:	4649      	mov	r1, r9
 800e4a0:	f7f1 ff0a 	bl	80002b8 <__aeabi_dsub>
 800e4a4:	a372      	add	r3, pc, #456	; (adr r3, 800e670 <__ieee754_pow+0xa08>)
 800e4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4aa:	f7f2 f8bd 	bl	8000628 <__aeabi_dmul>
 800e4ae:	a372      	add	r3, pc, #456	; (adr r3, 800e678 <__ieee754_pow+0xa10>)
 800e4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b4:	4680      	mov	r8, r0
 800e4b6:	4689      	mov	r9, r1
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	4629      	mov	r1, r5
 800e4bc:	f7f2 f8b4 	bl	8000628 <__aeabi_dmul>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	4640      	mov	r0, r8
 800e4c6:	4649      	mov	r1, r9
 800e4c8:	f7f1 fef8 	bl	80002bc <__adddf3>
 800e4cc:	4604      	mov	r4, r0
 800e4ce:	460d      	mov	r5, r1
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	4630      	mov	r0, r6
 800e4d6:	4639      	mov	r1, r7
 800e4d8:	f7f1 fef0 	bl	80002bc <__adddf3>
 800e4dc:	4632      	mov	r2, r6
 800e4de:	463b      	mov	r3, r7
 800e4e0:	4680      	mov	r8, r0
 800e4e2:	4689      	mov	r9, r1
 800e4e4:	f7f1 fee8 	bl	80002b8 <__aeabi_dsub>
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	4629      	mov	r1, r5
 800e4f0:	f7f1 fee2 	bl	80002b8 <__aeabi_dsub>
 800e4f4:	4642      	mov	r2, r8
 800e4f6:	4606      	mov	r6, r0
 800e4f8:	460f      	mov	r7, r1
 800e4fa:	464b      	mov	r3, r9
 800e4fc:	4640      	mov	r0, r8
 800e4fe:	4649      	mov	r1, r9
 800e500:	f7f2 f892 	bl	8000628 <__aeabi_dmul>
 800e504:	a35e      	add	r3, pc, #376	; (adr r3, 800e680 <__ieee754_pow+0xa18>)
 800e506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50a:	4604      	mov	r4, r0
 800e50c:	460d      	mov	r5, r1
 800e50e:	f7f2 f88b 	bl	8000628 <__aeabi_dmul>
 800e512:	a35d      	add	r3, pc, #372	; (adr r3, 800e688 <__ieee754_pow+0xa20>)
 800e514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e518:	f7f1 fece 	bl	80002b8 <__aeabi_dsub>
 800e51c:	4622      	mov	r2, r4
 800e51e:	462b      	mov	r3, r5
 800e520:	f7f2 f882 	bl	8000628 <__aeabi_dmul>
 800e524:	a35a      	add	r3, pc, #360	; (adr r3, 800e690 <__ieee754_pow+0xa28>)
 800e526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52a:	f7f1 fec7 	bl	80002bc <__adddf3>
 800e52e:	4622      	mov	r2, r4
 800e530:	462b      	mov	r3, r5
 800e532:	f7f2 f879 	bl	8000628 <__aeabi_dmul>
 800e536:	a358      	add	r3, pc, #352	; (adr r3, 800e698 <__ieee754_pow+0xa30>)
 800e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53c:	f7f1 febc 	bl	80002b8 <__aeabi_dsub>
 800e540:	4622      	mov	r2, r4
 800e542:	462b      	mov	r3, r5
 800e544:	f7f2 f870 	bl	8000628 <__aeabi_dmul>
 800e548:	a355      	add	r3, pc, #340	; (adr r3, 800e6a0 <__ieee754_pow+0xa38>)
 800e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54e:	f7f1 feb5 	bl	80002bc <__adddf3>
 800e552:	4622      	mov	r2, r4
 800e554:	462b      	mov	r3, r5
 800e556:	f7f2 f867 	bl	8000628 <__aeabi_dmul>
 800e55a:	4602      	mov	r2, r0
 800e55c:	460b      	mov	r3, r1
 800e55e:	4640      	mov	r0, r8
 800e560:	4649      	mov	r1, r9
 800e562:	f7f1 fea9 	bl	80002b8 <__aeabi_dsub>
 800e566:	4604      	mov	r4, r0
 800e568:	460d      	mov	r5, r1
 800e56a:	4602      	mov	r2, r0
 800e56c:	460b      	mov	r3, r1
 800e56e:	4640      	mov	r0, r8
 800e570:	4649      	mov	r1, r9
 800e572:	f7f2 f859 	bl	8000628 <__aeabi_dmul>
 800e576:	2200      	movs	r2, #0
 800e578:	ec41 0b19 	vmov	d9, r0, r1
 800e57c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e580:	4620      	mov	r0, r4
 800e582:	4629      	mov	r1, r5
 800e584:	f7f1 fe98 	bl	80002b8 <__aeabi_dsub>
 800e588:	4602      	mov	r2, r0
 800e58a:	460b      	mov	r3, r1
 800e58c:	ec51 0b19 	vmov	r0, r1, d9
 800e590:	f7f2 f974 	bl	800087c <__aeabi_ddiv>
 800e594:	4632      	mov	r2, r6
 800e596:	4604      	mov	r4, r0
 800e598:	460d      	mov	r5, r1
 800e59a:	463b      	mov	r3, r7
 800e59c:	4640      	mov	r0, r8
 800e59e:	4649      	mov	r1, r9
 800e5a0:	f7f2 f842 	bl	8000628 <__aeabi_dmul>
 800e5a4:	4632      	mov	r2, r6
 800e5a6:	463b      	mov	r3, r7
 800e5a8:	f7f1 fe88 	bl	80002bc <__adddf3>
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	460b      	mov	r3, r1
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	4629      	mov	r1, r5
 800e5b4:	f7f1 fe80 	bl	80002b8 <__aeabi_dsub>
 800e5b8:	4642      	mov	r2, r8
 800e5ba:	464b      	mov	r3, r9
 800e5bc:	f7f1 fe7c 	bl	80002b8 <__aeabi_dsub>
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	493a      	ldr	r1, [pc, #232]	; (800e6b0 <__ieee754_pow+0xa48>)
 800e5c6:	2000      	movs	r0, #0
 800e5c8:	f7f1 fe76 	bl	80002b8 <__aeabi_dsub>
 800e5cc:	ec41 0b10 	vmov	d0, r0, r1
 800e5d0:	ee10 3a90 	vmov	r3, s1
 800e5d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e5d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5dc:	da2b      	bge.n	800e636 <__ieee754_pow+0x9ce>
 800e5de:	4650      	mov	r0, sl
 800e5e0:	f001 fa72 	bl	800fac8 <scalbn>
 800e5e4:	ec51 0b10 	vmov	r0, r1, d0
 800e5e8:	ec53 2b18 	vmov	r2, r3, d8
 800e5ec:	f7ff bbed 	b.w	800ddca <__ieee754_pow+0x162>
 800e5f0:	4b30      	ldr	r3, [pc, #192]	; (800e6b4 <__ieee754_pow+0xa4c>)
 800e5f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e5f6:	429e      	cmp	r6, r3
 800e5f8:	f77f af0c 	ble.w	800e414 <__ieee754_pow+0x7ac>
 800e5fc:	4b2e      	ldr	r3, [pc, #184]	; (800e6b8 <__ieee754_pow+0xa50>)
 800e5fe:	440b      	add	r3, r1
 800e600:	4303      	orrs	r3, r0
 800e602:	d009      	beq.n	800e618 <__ieee754_pow+0x9b0>
 800e604:	ec51 0b18 	vmov	r0, r1, d8
 800e608:	2200      	movs	r2, #0
 800e60a:	2300      	movs	r3, #0
 800e60c:	f7f2 fa7e 	bl	8000b0c <__aeabi_dcmplt>
 800e610:	3800      	subs	r0, #0
 800e612:	bf18      	it	ne
 800e614:	2001      	movne	r0, #1
 800e616:	e447      	b.n	800dea8 <__ieee754_pow+0x240>
 800e618:	4622      	mov	r2, r4
 800e61a:	462b      	mov	r3, r5
 800e61c:	f7f1 fe4c 	bl	80002b8 <__aeabi_dsub>
 800e620:	4642      	mov	r2, r8
 800e622:	464b      	mov	r3, r9
 800e624:	f7f2 fa86 	bl	8000b34 <__aeabi_dcmpge>
 800e628:	2800      	cmp	r0, #0
 800e62a:	f43f aef3 	beq.w	800e414 <__ieee754_pow+0x7ac>
 800e62e:	e7e9      	b.n	800e604 <__ieee754_pow+0x99c>
 800e630:	f04f 0a00 	mov.w	sl, #0
 800e634:	e71a      	b.n	800e46c <__ieee754_pow+0x804>
 800e636:	ec51 0b10 	vmov	r0, r1, d0
 800e63a:	4619      	mov	r1, r3
 800e63c:	e7d4      	b.n	800e5e8 <__ieee754_pow+0x980>
 800e63e:	491c      	ldr	r1, [pc, #112]	; (800e6b0 <__ieee754_pow+0xa48>)
 800e640:	2000      	movs	r0, #0
 800e642:	f7ff bb30 	b.w	800dca6 <__ieee754_pow+0x3e>
 800e646:	2000      	movs	r0, #0
 800e648:	2100      	movs	r1, #0
 800e64a:	f7ff bb2c 	b.w	800dca6 <__ieee754_pow+0x3e>
 800e64e:	4630      	mov	r0, r6
 800e650:	4639      	mov	r1, r7
 800e652:	f7ff bb28 	b.w	800dca6 <__ieee754_pow+0x3e>
 800e656:	9204      	str	r2, [sp, #16]
 800e658:	f7ff bb7a 	b.w	800dd50 <__ieee754_pow+0xe8>
 800e65c:	2300      	movs	r3, #0
 800e65e:	f7ff bb64 	b.w	800dd2a <__ieee754_pow+0xc2>
 800e662:	bf00      	nop
 800e664:	f3af 8000 	nop.w
 800e668:	00000000 	.word	0x00000000
 800e66c:	3fe62e43 	.word	0x3fe62e43
 800e670:	fefa39ef 	.word	0xfefa39ef
 800e674:	3fe62e42 	.word	0x3fe62e42
 800e678:	0ca86c39 	.word	0x0ca86c39
 800e67c:	be205c61 	.word	0xbe205c61
 800e680:	72bea4d0 	.word	0x72bea4d0
 800e684:	3e663769 	.word	0x3e663769
 800e688:	c5d26bf1 	.word	0xc5d26bf1
 800e68c:	3ebbbd41 	.word	0x3ebbbd41
 800e690:	af25de2c 	.word	0xaf25de2c
 800e694:	3f11566a 	.word	0x3f11566a
 800e698:	16bebd93 	.word	0x16bebd93
 800e69c:	3f66c16c 	.word	0x3f66c16c
 800e6a0:	5555553e 	.word	0x5555553e
 800e6a4:	3fc55555 	.word	0x3fc55555
 800e6a8:	3fe00000 	.word	0x3fe00000
 800e6ac:	000fffff 	.word	0x000fffff
 800e6b0:	3ff00000 	.word	0x3ff00000
 800e6b4:	4090cbff 	.word	0x4090cbff
 800e6b8:	3f6f3400 	.word	0x3f6f3400
 800e6bc:	652b82fe 	.word	0x652b82fe
 800e6c0:	3c971547 	.word	0x3c971547
 800e6c4:	00000000 	.word	0x00000000

0800e6c8 <__ieee754_rem_pio2>:
 800e6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6cc:	ed2d 8b02 	vpush	{d8}
 800e6d0:	ec55 4b10 	vmov	r4, r5, d0
 800e6d4:	4bca      	ldr	r3, [pc, #808]	; (800ea00 <__ieee754_rem_pio2+0x338>)
 800e6d6:	b08b      	sub	sp, #44	; 0x2c
 800e6d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e6dc:	4598      	cmp	r8, r3
 800e6de:	4682      	mov	sl, r0
 800e6e0:	9502      	str	r5, [sp, #8]
 800e6e2:	dc08      	bgt.n	800e6f6 <__ieee754_rem_pio2+0x2e>
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	ed80 0b00 	vstr	d0, [r0]
 800e6ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e6f0:	f04f 0b00 	mov.w	fp, #0
 800e6f4:	e028      	b.n	800e748 <__ieee754_rem_pio2+0x80>
 800e6f6:	4bc3      	ldr	r3, [pc, #780]	; (800ea04 <__ieee754_rem_pio2+0x33c>)
 800e6f8:	4598      	cmp	r8, r3
 800e6fa:	dc78      	bgt.n	800e7ee <__ieee754_rem_pio2+0x126>
 800e6fc:	9b02      	ldr	r3, [sp, #8]
 800e6fe:	4ec2      	ldr	r6, [pc, #776]	; (800ea08 <__ieee754_rem_pio2+0x340>)
 800e700:	2b00      	cmp	r3, #0
 800e702:	ee10 0a10 	vmov	r0, s0
 800e706:	a3b0      	add	r3, pc, #704	; (adr r3, 800e9c8 <__ieee754_rem_pio2+0x300>)
 800e708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70c:	4629      	mov	r1, r5
 800e70e:	dd39      	ble.n	800e784 <__ieee754_rem_pio2+0xbc>
 800e710:	f7f1 fdd2 	bl	80002b8 <__aeabi_dsub>
 800e714:	45b0      	cmp	r8, r6
 800e716:	4604      	mov	r4, r0
 800e718:	460d      	mov	r5, r1
 800e71a:	d01b      	beq.n	800e754 <__ieee754_rem_pio2+0x8c>
 800e71c:	a3ac      	add	r3, pc, #688	; (adr r3, 800e9d0 <__ieee754_rem_pio2+0x308>)
 800e71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e722:	f7f1 fdc9 	bl	80002b8 <__aeabi_dsub>
 800e726:	4602      	mov	r2, r0
 800e728:	460b      	mov	r3, r1
 800e72a:	e9ca 2300 	strd	r2, r3, [sl]
 800e72e:	4620      	mov	r0, r4
 800e730:	4629      	mov	r1, r5
 800e732:	f7f1 fdc1 	bl	80002b8 <__aeabi_dsub>
 800e736:	a3a6      	add	r3, pc, #664	; (adr r3, 800e9d0 <__ieee754_rem_pio2+0x308>)
 800e738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73c:	f7f1 fdbc 	bl	80002b8 <__aeabi_dsub>
 800e740:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e744:	f04f 0b01 	mov.w	fp, #1
 800e748:	4658      	mov	r0, fp
 800e74a:	b00b      	add	sp, #44	; 0x2c
 800e74c:	ecbd 8b02 	vpop	{d8}
 800e750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e754:	a3a0      	add	r3, pc, #640	; (adr r3, 800e9d8 <__ieee754_rem_pio2+0x310>)
 800e756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75a:	f7f1 fdad 	bl	80002b8 <__aeabi_dsub>
 800e75e:	a3a0      	add	r3, pc, #640	; (adr r3, 800e9e0 <__ieee754_rem_pio2+0x318>)
 800e760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e764:	4604      	mov	r4, r0
 800e766:	460d      	mov	r5, r1
 800e768:	f7f1 fda6 	bl	80002b8 <__aeabi_dsub>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	e9ca 2300 	strd	r2, r3, [sl]
 800e774:	4620      	mov	r0, r4
 800e776:	4629      	mov	r1, r5
 800e778:	f7f1 fd9e 	bl	80002b8 <__aeabi_dsub>
 800e77c:	a398      	add	r3, pc, #608	; (adr r3, 800e9e0 <__ieee754_rem_pio2+0x318>)
 800e77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e782:	e7db      	b.n	800e73c <__ieee754_rem_pio2+0x74>
 800e784:	f7f1 fd9a 	bl	80002bc <__adddf3>
 800e788:	45b0      	cmp	r8, r6
 800e78a:	4604      	mov	r4, r0
 800e78c:	460d      	mov	r5, r1
 800e78e:	d016      	beq.n	800e7be <__ieee754_rem_pio2+0xf6>
 800e790:	a38f      	add	r3, pc, #572	; (adr r3, 800e9d0 <__ieee754_rem_pio2+0x308>)
 800e792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e796:	f7f1 fd91 	bl	80002bc <__adddf3>
 800e79a:	4602      	mov	r2, r0
 800e79c:	460b      	mov	r3, r1
 800e79e:	e9ca 2300 	strd	r2, r3, [sl]
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	f7f1 fd87 	bl	80002b8 <__aeabi_dsub>
 800e7aa:	a389      	add	r3, pc, #548	; (adr r3, 800e9d0 <__ieee754_rem_pio2+0x308>)
 800e7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b0:	f7f1 fd84 	bl	80002bc <__adddf3>
 800e7b4:	f04f 3bff 	mov.w	fp, #4294967295
 800e7b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e7bc:	e7c4      	b.n	800e748 <__ieee754_rem_pio2+0x80>
 800e7be:	a386      	add	r3, pc, #536	; (adr r3, 800e9d8 <__ieee754_rem_pio2+0x310>)
 800e7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c4:	f7f1 fd7a 	bl	80002bc <__adddf3>
 800e7c8:	a385      	add	r3, pc, #532	; (adr r3, 800e9e0 <__ieee754_rem_pio2+0x318>)
 800e7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	460d      	mov	r5, r1
 800e7d2:	f7f1 fd73 	bl	80002bc <__adddf3>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	460b      	mov	r3, r1
 800e7da:	e9ca 2300 	strd	r2, r3, [sl]
 800e7de:	4620      	mov	r0, r4
 800e7e0:	4629      	mov	r1, r5
 800e7e2:	f7f1 fd69 	bl	80002b8 <__aeabi_dsub>
 800e7e6:	a37e      	add	r3, pc, #504	; (adr r3, 800e9e0 <__ieee754_rem_pio2+0x318>)
 800e7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ec:	e7e0      	b.n	800e7b0 <__ieee754_rem_pio2+0xe8>
 800e7ee:	4b87      	ldr	r3, [pc, #540]	; (800ea0c <__ieee754_rem_pio2+0x344>)
 800e7f0:	4598      	cmp	r8, r3
 800e7f2:	f300 80d9 	bgt.w	800e9a8 <__ieee754_rem_pio2+0x2e0>
 800e7f6:	f001 f8d3 	bl	800f9a0 <fabs>
 800e7fa:	ec55 4b10 	vmov	r4, r5, d0
 800e7fe:	ee10 0a10 	vmov	r0, s0
 800e802:	a379      	add	r3, pc, #484	; (adr r3, 800e9e8 <__ieee754_rem_pio2+0x320>)
 800e804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e808:	4629      	mov	r1, r5
 800e80a:	f7f1 ff0d 	bl	8000628 <__aeabi_dmul>
 800e80e:	4b80      	ldr	r3, [pc, #512]	; (800ea10 <__ieee754_rem_pio2+0x348>)
 800e810:	2200      	movs	r2, #0
 800e812:	f7f1 fd53 	bl	80002bc <__adddf3>
 800e816:	f7f2 f9b7 	bl	8000b88 <__aeabi_d2iz>
 800e81a:	4683      	mov	fp, r0
 800e81c:	f7f1 fe9a 	bl	8000554 <__aeabi_i2d>
 800e820:	4602      	mov	r2, r0
 800e822:	460b      	mov	r3, r1
 800e824:	ec43 2b18 	vmov	d8, r2, r3
 800e828:	a367      	add	r3, pc, #412	; (adr r3, 800e9c8 <__ieee754_rem_pio2+0x300>)
 800e82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82e:	f7f1 fefb 	bl	8000628 <__aeabi_dmul>
 800e832:	4602      	mov	r2, r0
 800e834:	460b      	mov	r3, r1
 800e836:	4620      	mov	r0, r4
 800e838:	4629      	mov	r1, r5
 800e83a:	f7f1 fd3d 	bl	80002b8 <__aeabi_dsub>
 800e83e:	a364      	add	r3, pc, #400	; (adr r3, 800e9d0 <__ieee754_rem_pio2+0x308>)
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	4606      	mov	r6, r0
 800e846:	460f      	mov	r7, r1
 800e848:	ec51 0b18 	vmov	r0, r1, d8
 800e84c:	f7f1 feec 	bl	8000628 <__aeabi_dmul>
 800e850:	f1bb 0f1f 	cmp.w	fp, #31
 800e854:	4604      	mov	r4, r0
 800e856:	460d      	mov	r5, r1
 800e858:	dc0d      	bgt.n	800e876 <__ieee754_rem_pio2+0x1ae>
 800e85a:	4b6e      	ldr	r3, [pc, #440]	; (800ea14 <__ieee754_rem_pio2+0x34c>)
 800e85c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e864:	4543      	cmp	r3, r8
 800e866:	d006      	beq.n	800e876 <__ieee754_rem_pio2+0x1ae>
 800e868:	4622      	mov	r2, r4
 800e86a:	462b      	mov	r3, r5
 800e86c:	4630      	mov	r0, r6
 800e86e:	4639      	mov	r1, r7
 800e870:	f7f1 fd22 	bl	80002b8 <__aeabi_dsub>
 800e874:	e00f      	b.n	800e896 <__ieee754_rem_pio2+0x1ce>
 800e876:	462b      	mov	r3, r5
 800e878:	4622      	mov	r2, r4
 800e87a:	4630      	mov	r0, r6
 800e87c:	4639      	mov	r1, r7
 800e87e:	f7f1 fd1b 	bl	80002b8 <__aeabi_dsub>
 800e882:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e886:	9303      	str	r3, [sp, #12]
 800e888:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e88c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e890:	f1b8 0f10 	cmp.w	r8, #16
 800e894:	dc02      	bgt.n	800e89c <__ieee754_rem_pio2+0x1d4>
 800e896:	e9ca 0100 	strd	r0, r1, [sl]
 800e89a:	e039      	b.n	800e910 <__ieee754_rem_pio2+0x248>
 800e89c:	a34e      	add	r3, pc, #312	; (adr r3, 800e9d8 <__ieee754_rem_pio2+0x310>)
 800e89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a2:	ec51 0b18 	vmov	r0, r1, d8
 800e8a6:	f7f1 febf 	bl	8000628 <__aeabi_dmul>
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	460d      	mov	r5, r1
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	4639      	mov	r1, r7
 800e8b6:	f7f1 fcff 	bl	80002b8 <__aeabi_dsub>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	460b      	mov	r3, r1
 800e8be:	4680      	mov	r8, r0
 800e8c0:	4689      	mov	r9, r1
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	4639      	mov	r1, r7
 800e8c6:	f7f1 fcf7 	bl	80002b8 <__aeabi_dsub>
 800e8ca:	4622      	mov	r2, r4
 800e8cc:	462b      	mov	r3, r5
 800e8ce:	f7f1 fcf3 	bl	80002b8 <__aeabi_dsub>
 800e8d2:	a343      	add	r3, pc, #268	; (adr r3, 800e9e0 <__ieee754_rem_pio2+0x318>)
 800e8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d8:	4604      	mov	r4, r0
 800e8da:	460d      	mov	r5, r1
 800e8dc:	ec51 0b18 	vmov	r0, r1, d8
 800e8e0:	f7f1 fea2 	bl	8000628 <__aeabi_dmul>
 800e8e4:	4622      	mov	r2, r4
 800e8e6:	462b      	mov	r3, r5
 800e8e8:	f7f1 fce6 	bl	80002b8 <__aeabi_dsub>
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	460b      	mov	r3, r1
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	460d      	mov	r5, r1
 800e8f4:	4640      	mov	r0, r8
 800e8f6:	4649      	mov	r1, r9
 800e8f8:	f7f1 fcde 	bl	80002b8 <__aeabi_dsub>
 800e8fc:	9a03      	ldr	r2, [sp, #12]
 800e8fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e902:	1ad3      	subs	r3, r2, r3
 800e904:	2b31      	cmp	r3, #49	; 0x31
 800e906:	dc24      	bgt.n	800e952 <__ieee754_rem_pio2+0x28a>
 800e908:	e9ca 0100 	strd	r0, r1, [sl]
 800e90c:	4646      	mov	r6, r8
 800e90e:	464f      	mov	r7, r9
 800e910:	e9da 8900 	ldrd	r8, r9, [sl]
 800e914:	4630      	mov	r0, r6
 800e916:	4642      	mov	r2, r8
 800e918:	464b      	mov	r3, r9
 800e91a:	4639      	mov	r1, r7
 800e91c:	f7f1 fccc 	bl	80002b8 <__aeabi_dsub>
 800e920:	462b      	mov	r3, r5
 800e922:	4622      	mov	r2, r4
 800e924:	f7f1 fcc8 	bl	80002b8 <__aeabi_dsub>
 800e928:	9b02      	ldr	r3, [sp, #8]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e930:	f6bf af0a 	bge.w	800e748 <__ieee754_rem_pio2+0x80>
 800e934:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e938:	f8ca 3004 	str.w	r3, [sl, #4]
 800e93c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e940:	f8ca 8000 	str.w	r8, [sl]
 800e944:	f8ca 0008 	str.w	r0, [sl, #8]
 800e948:	f8ca 300c 	str.w	r3, [sl, #12]
 800e94c:	f1cb 0b00 	rsb	fp, fp, #0
 800e950:	e6fa      	b.n	800e748 <__ieee754_rem_pio2+0x80>
 800e952:	a327      	add	r3, pc, #156	; (adr r3, 800e9f0 <__ieee754_rem_pio2+0x328>)
 800e954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e958:	ec51 0b18 	vmov	r0, r1, d8
 800e95c:	f7f1 fe64 	bl	8000628 <__aeabi_dmul>
 800e960:	4604      	mov	r4, r0
 800e962:	460d      	mov	r5, r1
 800e964:	4602      	mov	r2, r0
 800e966:	460b      	mov	r3, r1
 800e968:	4640      	mov	r0, r8
 800e96a:	4649      	mov	r1, r9
 800e96c:	f7f1 fca4 	bl	80002b8 <__aeabi_dsub>
 800e970:	4602      	mov	r2, r0
 800e972:	460b      	mov	r3, r1
 800e974:	4606      	mov	r6, r0
 800e976:	460f      	mov	r7, r1
 800e978:	4640      	mov	r0, r8
 800e97a:	4649      	mov	r1, r9
 800e97c:	f7f1 fc9c 	bl	80002b8 <__aeabi_dsub>
 800e980:	4622      	mov	r2, r4
 800e982:	462b      	mov	r3, r5
 800e984:	f7f1 fc98 	bl	80002b8 <__aeabi_dsub>
 800e988:	a31b      	add	r3, pc, #108	; (adr r3, 800e9f8 <__ieee754_rem_pio2+0x330>)
 800e98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98e:	4604      	mov	r4, r0
 800e990:	460d      	mov	r5, r1
 800e992:	ec51 0b18 	vmov	r0, r1, d8
 800e996:	f7f1 fe47 	bl	8000628 <__aeabi_dmul>
 800e99a:	4622      	mov	r2, r4
 800e99c:	462b      	mov	r3, r5
 800e99e:	f7f1 fc8b 	bl	80002b8 <__aeabi_dsub>
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	460d      	mov	r5, r1
 800e9a6:	e75f      	b.n	800e868 <__ieee754_rem_pio2+0x1a0>
 800e9a8:	4b1b      	ldr	r3, [pc, #108]	; (800ea18 <__ieee754_rem_pio2+0x350>)
 800e9aa:	4598      	cmp	r8, r3
 800e9ac:	dd36      	ble.n	800ea1c <__ieee754_rem_pio2+0x354>
 800e9ae:	ee10 2a10 	vmov	r2, s0
 800e9b2:	462b      	mov	r3, r5
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	4629      	mov	r1, r5
 800e9b8:	f7f1 fc7e 	bl	80002b8 <__aeabi_dsub>
 800e9bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e9c0:	e9ca 0100 	strd	r0, r1, [sl]
 800e9c4:	e694      	b.n	800e6f0 <__ieee754_rem_pio2+0x28>
 800e9c6:	bf00      	nop
 800e9c8:	54400000 	.word	0x54400000
 800e9cc:	3ff921fb 	.word	0x3ff921fb
 800e9d0:	1a626331 	.word	0x1a626331
 800e9d4:	3dd0b461 	.word	0x3dd0b461
 800e9d8:	1a600000 	.word	0x1a600000
 800e9dc:	3dd0b461 	.word	0x3dd0b461
 800e9e0:	2e037073 	.word	0x2e037073
 800e9e4:	3ba3198a 	.word	0x3ba3198a
 800e9e8:	6dc9c883 	.word	0x6dc9c883
 800e9ec:	3fe45f30 	.word	0x3fe45f30
 800e9f0:	2e000000 	.word	0x2e000000
 800e9f4:	3ba3198a 	.word	0x3ba3198a
 800e9f8:	252049c1 	.word	0x252049c1
 800e9fc:	397b839a 	.word	0x397b839a
 800ea00:	3fe921fb 	.word	0x3fe921fb
 800ea04:	4002d97b 	.word	0x4002d97b
 800ea08:	3ff921fb 	.word	0x3ff921fb
 800ea0c:	413921fb 	.word	0x413921fb
 800ea10:	3fe00000 	.word	0x3fe00000
 800ea14:	08010470 	.word	0x08010470
 800ea18:	7fefffff 	.word	0x7fefffff
 800ea1c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ea20:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ea24:	ee10 0a10 	vmov	r0, s0
 800ea28:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ea2c:	ee10 6a10 	vmov	r6, s0
 800ea30:	460f      	mov	r7, r1
 800ea32:	f7f2 f8a9 	bl	8000b88 <__aeabi_d2iz>
 800ea36:	f7f1 fd8d 	bl	8000554 <__aeabi_i2d>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	4630      	mov	r0, r6
 800ea40:	4639      	mov	r1, r7
 800ea42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ea46:	f7f1 fc37 	bl	80002b8 <__aeabi_dsub>
 800ea4a:	4b23      	ldr	r3, [pc, #140]	; (800ead8 <__ieee754_rem_pio2+0x410>)
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f7f1 fdeb 	bl	8000628 <__aeabi_dmul>
 800ea52:	460f      	mov	r7, r1
 800ea54:	4606      	mov	r6, r0
 800ea56:	f7f2 f897 	bl	8000b88 <__aeabi_d2iz>
 800ea5a:	f7f1 fd7b 	bl	8000554 <__aeabi_i2d>
 800ea5e:	4602      	mov	r2, r0
 800ea60:	460b      	mov	r3, r1
 800ea62:	4630      	mov	r0, r6
 800ea64:	4639      	mov	r1, r7
 800ea66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ea6a:	f7f1 fc25 	bl	80002b8 <__aeabi_dsub>
 800ea6e:	4b1a      	ldr	r3, [pc, #104]	; (800ead8 <__ieee754_rem_pio2+0x410>)
 800ea70:	2200      	movs	r2, #0
 800ea72:	f7f1 fdd9 	bl	8000628 <__aeabi_dmul>
 800ea76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ea7a:	ad04      	add	r5, sp, #16
 800ea7c:	f04f 0803 	mov.w	r8, #3
 800ea80:	46a9      	mov	r9, r5
 800ea82:	2600      	movs	r6, #0
 800ea84:	2700      	movs	r7, #0
 800ea86:	4632      	mov	r2, r6
 800ea88:	463b      	mov	r3, r7
 800ea8a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ea8e:	46c3      	mov	fp, r8
 800ea90:	3d08      	subs	r5, #8
 800ea92:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea96:	f7f2 f82f 	bl	8000af8 <__aeabi_dcmpeq>
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	d1f3      	bne.n	800ea86 <__ieee754_rem_pio2+0x3be>
 800ea9e:	4b0f      	ldr	r3, [pc, #60]	; (800eadc <__ieee754_rem_pio2+0x414>)
 800eaa0:	9301      	str	r3, [sp, #4]
 800eaa2:	2302      	movs	r3, #2
 800eaa4:	9300      	str	r3, [sp, #0]
 800eaa6:	4622      	mov	r2, r4
 800eaa8:	465b      	mov	r3, fp
 800eaaa:	4651      	mov	r1, sl
 800eaac:	4648      	mov	r0, r9
 800eaae:	f000 f997 	bl	800ede0 <__kernel_rem_pio2>
 800eab2:	9b02      	ldr	r3, [sp, #8]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	4683      	mov	fp, r0
 800eab8:	f6bf ae46 	bge.w	800e748 <__ieee754_rem_pio2+0x80>
 800eabc:	e9da 2100 	ldrd	r2, r1, [sl]
 800eac0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eac4:	e9ca 2300 	strd	r2, r3, [sl]
 800eac8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800eacc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ead0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ead4:	e73a      	b.n	800e94c <__ieee754_rem_pio2+0x284>
 800ead6:	bf00      	nop
 800ead8:	41700000 	.word	0x41700000
 800eadc:	080104f0 	.word	0x080104f0

0800eae0 <__ieee754_sqrt>:
 800eae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae4:	ec55 4b10 	vmov	r4, r5, d0
 800eae8:	4e55      	ldr	r6, [pc, #340]	; (800ec40 <__ieee754_sqrt+0x160>)
 800eaea:	43ae      	bics	r6, r5
 800eaec:	ee10 0a10 	vmov	r0, s0
 800eaf0:	ee10 3a10 	vmov	r3, s0
 800eaf4:	462a      	mov	r2, r5
 800eaf6:	4629      	mov	r1, r5
 800eaf8:	d110      	bne.n	800eb1c <__ieee754_sqrt+0x3c>
 800eafa:	ee10 2a10 	vmov	r2, s0
 800eafe:	462b      	mov	r3, r5
 800eb00:	f7f1 fd92 	bl	8000628 <__aeabi_dmul>
 800eb04:	4602      	mov	r2, r0
 800eb06:	460b      	mov	r3, r1
 800eb08:	4620      	mov	r0, r4
 800eb0a:	4629      	mov	r1, r5
 800eb0c:	f7f1 fbd6 	bl	80002bc <__adddf3>
 800eb10:	4604      	mov	r4, r0
 800eb12:	460d      	mov	r5, r1
 800eb14:	ec45 4b10 	vmov	d0, r4, r5
 800eb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb1c:	2d00      	cmp	r5, #0
 800eb1e:	dc10      	bgt.n	800eb42 <__ieee754_sqrt+0x62>
 800eb20:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800eb24:	4330      	orrs	r0, r6
 800eb26:	d0f5      	beq.n	800eb14 <__ieee754_sqrt+0x34>
 800eb28:	b15d      	cbz	r5, 800eb42 <__ieee754_sqrt+0x62>
 800eb2a:	ee10 2a10 	vmov	r2, s0
 800eb2e:	462b      	mov	r3, r5
 800eb30:	ee10 0a10 	vmov	r0, s0
 800eb34:	f7f1 fbc0 	bl	80002b8 <__aeabi_dsub>
 800eb38:	4602      	mov	r2, r0
 800eb3a:	460b      	mov	r3, r1
 800eb3c:	f7f1 fe9e 	bl	800087c <__aeabi_ddiv>
 800eb40:	e7e6      	b.n	800eb10 <__ieee754_sqrt+0x30>
 800eb42:	1512      	asrs	r2, r2, #20
 800eb44:	d074      	beq.n	800ec30 <__ieee754_sqrt+0x150>
 800eb46:	07d4      	lsls	r4, r2, #31
 800eb48:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800eb4c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800eb50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800eb54:	bf5e      	ittt	pl
 800eb56:	0fda      	lsrpl	r2, r3, #31
 800eb58:	005b      	lslpl	r3, r3, #1
 800eb5a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800eb5e:	2400      	movs	r4, #0
 800eb60:	0fda      	lsrs	r2, r3, #31
 800eb62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800eb66:	107f      	asrs	r7, r7, #1
 800eb68:	005b      	lsls	r3, r3, #1
 800eb6a:	2516      	movs	r5, #22
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800eb72:	1886      	adds	r6, r0, r2
 800eb74:	428e      	cmp	r6, r1
 800eb76:	bfde      	ittt	le
 800eb78:	1b89      	suble	r1, r1, r6
 800eb7a:	18b0      	addle	r0, r6, r2
 800eb7c:	18a4      	addle	r4, r4, r2
 800eb7e:	0049      	lsls	r1, r1, #1
 800eb80:	3d01      	subs	r5, #1
 800eb82:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800eb86:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800eb8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eb8e:	d1f0      	bne.n	800eb72 <__ieee754_sqrt+0x92>
 800eb90:	462a      	mov	r2, r5
 800eb92:	f04f 0e20 	mov.w	lr, #32
 800eb96:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800eb9a:	4281      	cmp	r1, r0
 800eb9c:	eb06 0c05 	add.w	ip, r6, r5
 800eba0:	dc02      	bgt.n	800eba8 <__ieee754_sqrt+0xc8>
 800eba2:	d113      	bne.n	800ebcc <__ieee754_sqrt+0xec>
 800eba4:	459c      	cmp	ip, r3
 800eba6:	d811      	bhi.n	800ebcc <__ieee754_sqrt+0xec>
 800eba8:	f1bc 0f00 	cmp.w	ip, #0
 800ebac:	eb0c 0506 	add.w	r5, ip, r6
 800ebb0:	da43      	bge.n	800ec3a <__ieee754_sqrt+0x15a>
 800ebb2:	2d00      	cmp	r5, #0
 800ebb4:	db41      	blt.n	800ec3a <__ieee754_sqrt+0x15a>
 800ebb6:	f100 0801 	add.w	r8, r0, #1
 800ebba:	1a09      	subs	r1, r1, r0
 800ebbc:	459c      	cmp	ip, r3
 800ebbe:	bf88      	it	hi
 800ebc0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ebc4:	eba3 030c 	sub.w	r3, r3, ip
 800ebc8:	4432      	add	r2, r6
 800ebca:	4640      	mov	r0, r8
 800ebcc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ebd0:	f1be 0e01 	subs.w	lr, lr, #1
 800ebd4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ebd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ebdc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ebe0:	d1db      	bne.n	800eb9a <__ieee754_sqrt+0xba>
 800ebe2:	430b      	orrs	r3, r1
 800ebe4:	d006      	beq.n	800ebf4 <__ieee754_sqrt+0x114>
 800ebe6:	1c50      	adds	r0, r2, #1
 800ebe8:	bf13      	iteet	ne
 800ebea:	3201      	addne	r2, #1
 800ebec:	3401      	addeq	r4, #1
 800ebee:	4672      	moveq	r2, lr
 800ebf0:	f022 0201 	bicne.w	r2, r2, #1
 800ebf4:	1063      	asrs	r3, r4, #1
 800ebf6:	0852      	lsrs	r2, r2, #1
 800ebf8:	07e1      	lsls	r1, r4, #31
 800ebfa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ebfe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ec02:	bf48      	it	mi
 800ec04:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ec08:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ec0c:	4614      	mov	r4, r2
 800ec0e:	e781      	b.n	800eb14 <__ieee754_sqrt+0x34>
 800ec10:	0ad9      	lsrs	r1, r3, #11
 800ec12:	3815      	subs	r0, #21
 800ec14:	055b      	lsls	r3, r3, #21
 800ec16:	2900      	cmp	r1, #0
 800ec18:	d0fa      	beq.n	800ec10 <__ieee754_sqrt+0x130>
 800ec1a:	02cd      	lsls	r5, r1, #11
 800ec1c:	d50a      	bpl.n	800ec34 <__ieee754_sqrt+0x154>
 800ec1e:	f1c2 0420 	rsb	r4, r2, #32
 800ec22:	fa23 f404 	lsr.w	r4, r3, r4
 800ec26:	1e55      	subs	r5, r2, #1
 800ec28:	4093      	lsls	r3, r2
 800ec2a:	4321      	orrs	r1, r4
 800ec2c:	1b42      	subs	r2, r0, r5
 800ec2e:	e78a      	b.n	800eb46 <__ieee754_sqrt+0x66>
 800ec30:	4610      	mov	r0, r2
 800ec32:	e7f0      	b.n	800ec16 <__ieee754_sqrt+0x136>
 800ec34:	0049      	lsls	r1, r1, #1
 800ec36:	3201      	adds	r2, #1
 800ec38:	e7ef      	b.n	800ec1a <__ieee754_sqrt+0x13a>
 800ec3a:	4680      	mov	r8, r0
 800ec3c:	e7bd      	b.n	800ebba <__ieee754_sqrt+0xda>
 800ec3e:	bf00      	nop
 800ec40:	7ff00000 	.word	0x7ff00000

0800ec44 <__ieee754_sqrtf>:
 800ec44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ec48:	4770      	bx	lr
 800ec4a:	0000      	movs	r0, r0
 800ec4c:	0000      	movs	r0, r0
	...

0800ec50 <__kernel_cos>:
 800ec50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec54:	ec57 6b10 	vmov	r6, r7, d0
 800ec58:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ec5c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ec60:	ed8d 1b00 	vstr	d1, [sp]
 800ec64:	da07      	bge.n	800ec76 <__kernel_cos+0x26>
 800ec66:	ee10 0a10 	vmov	r0, s0
 800ec6a:	4639      	mov	r1, r7
 800ec6c:	f7f1 ff8c 	bl	8000b88 <__aeabi_d2iz>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	f000 8088 	beq.w	800ed86 <__kernel_cos+0x136>
 800ec76:	4632      	mov	r2, r6
 800ec78:	463b      	mov	r3, r7
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	4639      	mov	r1, r7
 800ec7e:	f7f1 fcd3 	bl	8000628 <__aeabi_dmul>
 800ec82:	4b51      	ldr	r3, [pc, #324]	; (800edc8 <__kernel_cos+0x178>)
 800ec84:	2200      	movs	r2, #0
 800ec86:	4604      	mov	r4, r0
 800ec88:	460d      	mov	r5, r1
 800ec8a:	f7f1 fccd 	bl	8000628 <__aeabi_dmul>
 800ec8e:	a340      	add	r3, pc, #256	; (adr r3, 800ed90 <__kernel_cos+0x140>)
 800ec90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec94:	4682      	mov	sl, r0
 800ec96:	468b      	mov	fp, r1
 800ec98:	4620      	mov	r0, r4
 800ec9a:	4629      	mov	r1, r5
 800ec9c:	f7f1 fcc4 	bl	8000628 <__aeabi_dmul>
 800eca0:	a33d      	add	r3, pc, #244	; (adr r3, 800ed98 <__kernel_cos+0x148>)
 800eca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca6:	f7f1 fb09 	bl	80002bc <__adddf3>
 800ecaa:	4622      	mov	r2, r4
 800ecac:	462b      	mov	r3, r5
 800ecae:	f7f1 fcbb 	bl	8000628 <__aeabi_dmul>
 800ecb2:	a33b      	add	r3, pc, #236	; (adr r3, 800eda0 <__kernel_cos+0x150>)
 800ecb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb8:	f7f1 fafe 	bl	80002b8 <__aeabi_dsub>
 800ecbc:	4622      	mov	r2, r4
 800ecbe:	462b      	mov	r3, r5
 800ecc0:	f7f1 fcb2 	bl	8000628 <__aeabi_dmul>
 800ecc4:	a338      	add	r3, pc, #224	; (adr r3, 800eda8 <__kernel_cos+0x158>)
 800ecc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecca:	f7f1 faf7 	bl	80002bc <__adddf3>
 800ecce:	4622      	mov	r2, r4
 800ecd0:	462b      	mov	r3, r5
 800ecd2:	f7f1 fca9 	bl	8000628 <__aeabi_dmul>
 800ecd6:	a336      	add	r3, pc, #216	; (adr r3, 800edb0 <__kernel_cos+0x160>)
 800ecd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecdc:	f7f1 faec 	bl	80002b8 <__aeabi_dsub>
 800ece0:	4622      	mov	r2, r4
 800ece2:	462b      	mov	r3, r5
 800ece4:	f7f1 fca0 	bl	8000628 <__aeabi_dmul>
 800ece8:	a333      	add	r3, pc, #204	; (adr r3, 800edb8 <__kernel_cos+0x168>)
 800ecea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecee:	f7f1 fae5 	bl	80002bc <__adddf3>
 800ecf2:	4622      	mov	r2, r4
 800ecf4:	462b      	mov	r3, r5
 800ecf6:	f7f1 fc97 	bl	8000628 <__aeabi_dmul>
 800ecfa:	4622      	mov	r2, r4
 800ecfc:	462b      	mov	r3, r5
 800ecfe:	f7f1 fc93 	bl	8000628 <__aeabi_dmul>
 800ed02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed06:	4604      	mov	r4, r0
 800ed08:	460d      	mov	r5, r1
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	4639      	mov	r1, r7
 800ed0e:	f7f1 fc8b 	bl	8000628 <__aeabi_dmul>
 800ed12:	460b      	mov	r3, r1
 800ed14:	4602      	mov	r2, r0
 800ed16:	4629      	mov	r1, r5
 800ed18:	4620      	mov	r0, r4
 800ed1a:	f7f1 facd 	bl	80002b8 <__aeabi_dsub>
 800ed1e:	4b2b      	ldr	r3, [pc, #172]	; (800edcc <__kernel_cos+0x17c>)
 800ed20:	4598      	cmp	r8, r3
 800ed22:	4606      	mov	r6, r0
 800ed24:	460f      	mov	r7, r1
 800ed26:	dc10      	bgt.n	800ed4a <__kernel_cos+0xfa>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	4650      	mov	r0, sl
 800ed2e:	4659      	mov	r1, fp
 800ed30:	f7f1 fac2 	bl	80002b8 <__aeabi_dsub>
 800ed34:	460b      	mov	r3, r1
 800ed36:	4926      	ldr	r1, [pc, #152]	; (800edd0 <__kernel_cos+0x180>)
 800ed38:	4602      	mov	r2, r0
 800ed3a:	2000      	movs	r0, #0
 800ed3c:	f7f1 fabc 	bl	80002b8 <__aeabi_dsub>
 800ed40:	ec41 0b10 	vmov	d0, r0, r1
 800ed44:	b003      	add	sp, #12
 800ed46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed4a:	4b22      	ldr	r3, [pc, #136]	; (800edd4 <__kernel_cos+0x184>)
 800ed4c:	4920      	ldr	r1, [pc, #128]	; (800edd0 <__kernel_cos+0x180>)
 800ed4e:	4598      	cmp	r8, r3
 800ed50:	bfcc      	ite	gt
 800ed52:	4d21      	ldrgt	r5, [pc, #132]	; (800edd8 <__kernel_cos+0x188>)
 800ed54:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ed58:	2400      	movs	r4, #0
 800ed5a:	4622      	mov	r2, r4
 800ed5c:	462b      	mov	r3, r5
 800ed5e:	2000      	movs	r0, #0
 800ed60:	f7f1 faaa 	bl	80002b8 <__aeabi_dsub>
 800ed64:	4622      	mov	r2, r4
 800ed66:	4680      	mov	r8, r0
 800ed68:	4689      	mov	r9, r1
 800ed6a:	462b      	mov	r3, r5
 800ed6c:	4650      	mov	r0, sl
 800ed6e:	4659      	mov	r1, fp
 800ed70:	f7f1 faa2 	bl	80002b8 <__aeabi_dsub>
 800ed74:	4632      	mov	r2, r6
 800ed76:	463b      	mov	r3, r7
 800ed78:	f7f1 fa9e 	bl	80002b8 <__aeabi_dsub>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	4640      	mov	r0, r8
 800ed82:	4649      	mov	r1, r9
 800ed84:	e7da      	b.n	800ed3c <__kernel_cos+0xec>
 800ed86:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800edc0 <__kernel_cos+0x170>
 800ed8a:	e7db      	b.n	800ed44 <__kernel_cos+0xf4>
 800ed8c:	f3af 8000 	nop.w
 800ed90:	be8838d4 	.word	0xbe8838d4
 800ed94:	bda8fae9 	.word	0xbda8fae9
 800ed98:	bdb4b1c4 	.word	0xbdb4b1c4
 800ed9c:	3e21ee9e 	.word	0x3e21ee9e
 800eda0:	809c52ad 	.word	0x809c52ad
 800eda4:	3e927e4f 	.word	0x3e927e4f
 800eda8:	19cb1590 	.word	0x19cb1590
 800edac:	3efa01a0 	.word	0x3efa01a0
 800edb0:	16c15177 	.word	0x16c15177
 800edb4:	3f56c16c 	.word	0x3f56c16c
 800edb8:	5555554c 	.word	0x5555554c
 800edbc:	3fa55555 	.word	0x3fa55555
 800edc0:	00000000 	.word	0x00000000
 800edc4:	3ff00000 	.word	0x3ff00000
 800edc8:	3fe00000 	.word	0x3fe00000
 800edcc:	3fd33332 	.word	0x3fd33332
 800edd0:	3ff00000 	.word	0x3ff00000
 800edd4:	3fe90000 	.word	0x3fe90000
 800edd8:	3fd20000 	.word	0x3fd20000
 800eddc:	00000000 	.word	0x00000000

0800ede0 <__kernel_rem_pio2>:
 800ede0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede4:	ed2d 8b02 	vpush	{d8}
 800ede8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800edec:	f112 0f14 	cmn.w	r2, #20
 800edf0:	9308      	str	r3, [sp, #32]
 800edf2:	9101      	str	r1, [sp, #4]
 800edf4:	4bc4      	ldr	r3, [pc, #784]	; (800f108 <__kernel_rem_pio2+0x328>)
 800edf6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800edf8:	900b      	str	r0, [sp, #44]	; 0x2c
 800edfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800edfe:	9302      	str	r3, [sp, #8]
 800ee00:	9b08      	ldr	r3, [sp, #32]
 800ee02:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee06:	bfa8      	it	ge
 800ee08:	1ed4      	subge	r4, r2, #3
 800ee0a:	9306      	str	r3, [sp, #24]
 800ee0c:	bfb2      	itee	lt
 800ee0e:	2400      	movlt	r4, #0
 800ee10:	2318      	movge	r3, #24
 800ee12:	fb94 f4f3 	sdivge	r4, r4, r3
 800ee16:	f06f 0317 	mvn.w	r3, #23
 800ee1a:	fb04 3303 	mla	r3, r4, r3, r3
 800ee1e:	eb03 0a02 	add.w	sl, r3, r2
 800ee22:	9b02      	ldr	r3, [sp, #8]
 800ee24:	9a06      	ldr	r2, [sp, #24]
 800ee26:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800f0f8 <__kernel_rem_pio2+0x318>
 800ee2a:	eb03 0802 	add.w	r8, r3, r2
 800ee2e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ee30:	1aa7      	subs	r7, r4, r2
 800ee32:	ae22      	add	r6, sp, #136	; 0x88
 800ee34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ee38:	2500      	movs	r5, #0
 800ee3a:	4545      	cmp	r5, r8
 800ee3c:	dd13      	ble.n	800ee66 <__kernel_rem_pio2+0x86>
 800ee3e:	9b08      	ldr	r3, [sp, #32]
 800ee40:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800f0f8 <__kernel_rem_pio2+0x318>
 800ee44:	aa22      	add	r2, sp, #136	; 0x88
 800ee46:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ee4a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ee4e:	f04f 0800 	mov.w	r8, #0
 800ee52:	9b02      	ldr	r3, [sp, #8]
 800ee54:	4598      	cmp	r8, r3
 800ee56:	dc2f      	bgt.n	800eeb8 <__kernel_rem_pio2+0xd8>
 800ee58:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ee5c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ee60:	462f      	mov	r7, r5
 800ee62:	2600      	movs	r6, #0
 800ee64:	e01b      	b.n	800ee9e <__kernel_rem_pio2+0xbe>
 800ee66:	42ef      	cmn	r7, r5
 800ee68:	d407      	bmi.n	800ee7a <__kernel_rem_pio2+0x9a>
 800ee6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ee6e:	f7f1 fb71 	bl	8000554 <__aeabi_i2d>
 800ee72:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ee76:	3501      	adds	r5, #1
 800ee78:	e7df      	b.n	800ee3a <__kernel_rem_pio2+0x5a>
 800ee7a:	ec51 0b18 	vmov	r0, r1, d8
 800ee7e:	e7f8      	b.n	800ee72 <__kernel_rem_pio2+0x92>
 800ee80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee84:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ee88:	f7f1 fbce 	bl	8000628 <__aeabi_dmul>
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	460b      	mov	r3, r1
 800ee90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee94:	f7f1 fa12 	bl	80002bc <__adddf3>
 800ee98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee9c:	3601      	adds	r6, #1
 800ee9e:	9b06      	ldr	r3, [sp, #24]
 800eea0:	429e      	cmp	r6, r3
 800eea2:	f1a7 0708 	sub.w	r7, r7, #8
 800eea6:	ddeb      	ble.n	800ee80 <__kernel_rem_pio2+0xa0>
 800eea8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800eeac:	f108 0801 	add.w	r8, r8, #1
 800eeb0:	ecab 7b02 	vstmia	fp!, {d7}
 800eeb4:	3508      	adds	r5, #8
 800eeb6:	e7cc      	b.n	800ee52 <__kernel_rem_pio2+0x72>
 800eeb8:	9b02      	ldr	r3, [sp, #8]
 800eeba:	aa0e      	add	r2, sp, #56	; 0x38
 800eebc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eec0:	930d      	str	r3, [sp, #52]	; 0x34
 800eec2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800eec4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800eec8:	9c02      	ldr	r4, [sp, #8]
 800eeca:	930c      	str	r3, [sp, #48]	; 0x30
 800eecc:	00e3      	lsls	r3, r4, #3
 800eece:	930a      	str	r3, [sp, #40]	; 0x28
 800eed0:	ab9a      	add	r3, sp, #616	; 0x268
 800eed2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eed6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800eeda:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800eede:	ab72      	add	r3, sp, #456	; 0x1c8
 800eee0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800eee4:	46c3      	mov	fp, r8
 800eee6:	46a1      	mov	r9, r4
 800eee8:	f1b9 0f00 	cmp.w	r9, #0
 800eeec:	f1a5 0508 	sub.w	r5, r5, #8
 800eef0:	dc77      	bgt.n	800efe2 <__kernel_rem_pio2+0x202>
 800eef2:	ec47 6b10 	vmov	d0, r6, r7
 800eef6:	4650      	mov	r0, sl
 800eef8:	f000 fde6 	bl	800fac8 <scalbn>
 800eefc:	ec57 6b10 	vmov	r6, r7, d0
 800ef00:	2200      	movs	r2, #0
 800ef02:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ef06:	ee10 0a10 	vmov	r0, s0
 800ef0a:	4639      	mov	r1, r7
 800ef0c:	f7f1 fb8c 	bl	8000628 <__aeabi_dmul>
 800ef10:	ec41 0b10 	vmov	d0, r0, r1
 800ef14:	f000 fd58 	bl	800f9c8 <floor>
 800ef18:	4b7c      	ldr	r3, [pc, #496]	; (800f10c <__kernel_rem_pio2+0x32c>)
 800ef1a:	ec51 0b10 	vmov	r0, r1, d0
 800ef1e:	2200      	movs	r2, #0
 800ef20:	f7f1 fb82 	bl	8000628 <__aeabi_dmul>
 800ef24:	4602      	mov	r2, r0
 800ef26:	460b      	mov	r3, r1
 800ef28:	4630      	mov	r0, r6
 800ef2a:	4639      	mov	r1, r7
 800ef2c:	f7f1 f9c4 	bl	80002b8 <__aeabi_dsub>
 800ef30:	460f      	mov	r7, r1
 800ef32:	4606      	mov	r6, r0
 800ef34:	f7f1 fe28 	bl	8000b88 <__aeabi_d2iz>
 800ef38:	9004      	str	r0, [sp, #16]
 800ef3a:	f7f1 fb0b 	bl	8000554 <__aeabi_i2d>
 800ef3e:	4602      	mov	r2, r0
 800ef40:	460b      	mov	r3, r1
 800ef42:	4630      	mov	r0, r6
 800ef44:	4639      	mov	r1, r7
 800ef46:	f7f1 f9b7 	bl	80002b8 <__aeabi_dsub>
 800ef4a:	f1ba 0f00 	cmp.w	sl, #0
 800ef4e:	4606      	mov	r6, r0
 800ef50:	460f      	mov	r7, r1
 800ef52:	dd6d      	ble.n	800f030 <__kernel_rem_pio2+0x250>
 800ef54:	1e62      	subs	r2, r4, #1
 800ef56:	ab0e      	add	r3, sp, #56	; 0x38
 800ef58:	9d04      	ldr	r5, [sp, #16]
 800ef5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ef5e:	f1ca 0118 	rsb	r1, sl, #24
 800ef62:	fa40 f301 	asr.w	r3, r0, r1
 800ef66:	441d      	add	r5, r3
 800ef68:	408b      	lsls	r3, r1
 800ef6a:	1ac0      	subs	r0, r0, r3
 800ef6c:	ab0e      	add	r3, sp, #56	; 0x38
 800ef6e:	9504      	str	r5, [sp, #16]
 800ef70:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ef74:	f1ca 0317 	rsb	r3, sl, #23
 800ef78:	fa40 fb03 	asr.w	fp, r0, r3
 800ef7c:	f1bb 0f00 	cmp.w	fp, #0
 800ef80:	dd65      	ble.n	800f04e <__kernel_rem_pio2+0x26e>
 800ef82:	9b04      	ldr	r3, [sp, #16]
 800ef84:	2200      	movs	r2, #0
 800ef86:	3301      	adds	r3, #1
 800ef88:	9304      	str	r3, [sp, #16]
 800ef8a:	4615      	mov	r5, r2
 800ef8c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ef90:	4294      	cmp	r4, r2
 800ef92:	f300 809c 	bgt.w	800f0ce <__kernel_rem_pio2+0x2ee>
 800ef96:	f1ba 0f00 	cmp.w	sl, #0
 800ef9a:	dd07      	ble.n	800efac <__kernel_rem_pio2+0x1cc>
 800ef9c:	f1ba 0f01 	cmp.w	sl, #1
 800efa0:	f000 80c0 	beq.w	800f124 <__kernel_rem_pio2+0x344>
 800efa4:	f1ba 0f02 	cmp.w	sl, #2
 800efa8:	f000 80c6 	beq.w	800f138 <__kernel_rem_pio2+0x358>
 800efac:	f1bb 0f02 	cmp.w	fp, #2
 800efb0:	d14d      	bne.n	800f04e <__kernel_rem_pio2+0x26e>
 800efb2:	4632      	mov	r2, r6
 800efb4:	463b      	mov	r3, r7
 800efb6:	4956      	ldr	r1, [pc, #344]	; (800f110 <__kernel_rem_pio2+0x330>)
 800efb8:	2000      	movs	r0, #0
 800efba:	f7f1 f97d 	bl	80002b8 <__aeabi_dsub>
 800efbe:	4606      	mov	r6, r0
 800efc0:	460f      	mov	r7, r1
 800efc2:	2d00      	cmp	r5, #0
 800efc4:	d043      	beq.n	800f04e <__kernel_rem_pio2+0x26e>
 800efc6:	4650      	mov	r0, sl
 800efc8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800f100 <__kernel_rem_pio2+0x320>
 800efcc:	f000 fd7c 	bl	800fac8 <scalbn>
 800efd0:	4630      	mov	r0, r6
 800efd2:	4639      	mov	r1, r7
 800efd4:	ec53 2b10 	vmov	r2, r3, d0
 800efd8:	f7f1 f96e 	bl	80002b8 <__aeabi_dsub>
 800efdc:	4606      	mov	r6, r0
 800efde:	460f      	mov	r7, r1
 800efe0:	e035      	b.n	800f04e <__kernel_rem_pio2+0x26e>
 800efe2:	4b4c      	ldr	r3, [pc, #304]	; (800f114 <__kernel_rem_pio2+0x334>)
 800efe4:	2200      	movs	r2, #0
 800efe6:	4630      	mov	r0, r6
 800efe8:	4639      	mov	r1, r7
 800efea:	f7f1 fb1d 	bl	8000628 <__aeabi_dmul>
 800efee:	f7f1 fdcb 	bl	8000b88 <__aeabi_d2iz>
 800eff2:	f7f1 faaf 	bl	8000554 <__aeabi_i2d>
 800eff6:	4602      	mov	r2, r0
 800eff8:	460b      	mov	r3, r1
 800effa:	ec43 2b18 	vmov	d8, r2, r3
 800effe:	4b46      	ldr	r3, [pc, #280]	; (800f118 <__kernel_rem_pio2+0x338>)
 800f000:	2200      	movs	r2, #0
 800f002:	f7f1 fb11 	bl	8000628 <__aeabi_dmul>
 800f006:	4602      	mov	r2, r0
 800f008:	460b      	mov	r3, r1
 800f00a:	4630      	mov	r0, r6
 800f00c:	4639      	mov	r1, r7
 800f00e:	f7f1 f953 	bl	80002b8 <__aeabi_dsub>
 800f012:	f7f1 fdb9 	bl	8000b88 <__aeabi_d2iz>
 800f016:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f01a:	f84b 0b04 	str.w	r0, [fp], #4
 800f01e:	ec51 0b18 	vmov	r0, r1, d8
 800f022:	f7f1 f94b 	bl	80002bc <__adddf3>
 800f026:	f109 39ff 	add.w	r9, r9, #4294967295
 800f02a:	4606      	mov	r6, r0
 800f02c:	460f      	mov	r7, r1
 800f02e:	e75b      	b.n	800eee8 <__kernel_rem_pio2+0x108>
 800f030:	d106      	bne.n	800f040 <__kernel_rem_pio2+0x260>
 800f032:	1e63      	subs	r3, r4, #1
 800f034:	aa0e      	add	r2, sp, #56	; 0x38
 800f036:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f03a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f03e:	e79d      	b.n	800ef7c <__kernel_rem_pio2+0x19c>
 800f040:	4b36      	ldr	r3, [pc, #216]	; (800f11c <__kernel_rem_pio2+0x33c>)
 800f042:	2200      	movs	r2, #0
 800f044:	f7f1 fd76 	bl	8000b34 <__aeabi_dcmpge>
 800f048:	2800      	cmp	r0, #0
 800f04a:	d13d      	bne.n	800f0c8 <__kernel_rem_pio2+0x2e8>
 800f04c:	4683      	mov	fp, r0
 800f04e:	2200      	movs	r2, #0
 800f050:	2300      	movs	r3, #0
 800f052:	4630      	mov	r0, r6
 800f054:	4639      	mov	r1, r7
 800f056:	f7f1 fd4f 	bl	8000af8 <__aeabi_dcmpeq>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	f000 80c0 	beq.w	800f1e0 <__kernel_rem_pio2+0x400>
 800f060:	1e65      	subs	r5, r4, #1
 800f062:	462b      	mov	r3, r5
 800f064:	2200      	movs	r2, #0
 800f066:	9902      	ldr	r1, [sp, #8]
 800f068:	428b      	cmp	r3, r1
 800f06a:	da6c      	bge.n	800f146 <__kernel_rem_pio2+0x366>
 800f06c:	2a00      	cmp	r2, #0
 800f06e:	f000 8089 	beq.w	800f184 <__kernel_rem_pio2+0x3a4>
 800f072:	ab0e      	add	r3, sp, #56	; 0x38
 800f074:	f1aa 0a18 	sub.w	sl, sl, #24
 800f078:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	f000 80ad 	beq.w	800f1dc <__kernel_rem_pio2+0x3fc>
 800f082:	4650      	mov	r0, sl
 800f084:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800f100 <__kernel_rem_pio2+0x320>
 800f088:	f000 fd1e 	bl	800fac8 <scalbn>
 800f08c:	ab9a      	add	r3, sp, #616	; 0x268
 800f08e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f092:	ec57 6b10 	vmov	r6, r7, d0
 800f096:	00ec      	lsls	r4, r5, #3
 800f098:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f09c:	46aa      	mov	sl, r5
 800f09e:	f1ba 0f00 	cmp.w	sl, #0
 800f0a2:	f280 80d6 	bge.w	800f252 <__kernel_rem_pio2+0x472>
 800f0a6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800f0f8 <__kernel_rem_pio2+0x318>
 800f0aa:	462e      	mov	r6, r5
 800f0ac:	2e00      	cmp	r6, #0
 800f0ae:	f2c0 8104 	blt.w	800f2ba <__kernel_rem_pio2+0x4da>
 800f0b2:	ab72      	add	r3, sp, #456	; 0x1c8
 800f0b4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f0b8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800f120 <__kernel_rem_pio2+0x340>
 800f0bc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f0c0:	f04f 0800 	mov.w	r8, #0
 800f0c4:	1baf      	subs	r7, r5, r6
 800f0c6:	e0ea      	b.n	800f29e <__kernel_rem_pio2+0x4be>
 800f0c8:	f04f 0b02 	mov.w	fp, #2
 800f0cc:	e759      	b.n	800ef82 <__kernel_rem_pio2+0x1a2>
 800f0ce:	f8d8 3000 	ldr.w	r3, [r8]
 800f0d2:	b955      	cbnz	r5, 800f0ea <__kernel_rem_pio2+0x30a>
 800f0d4:	b123      	cbz	r3, 800f0e0 <__kernel_rem_pio2+0x300>
 800f0d6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f0da:	f8c8 3000 	str.w	r3, [r8]
 800f0de:	2301      	movs	r3, #1
 800f0e0:	3201      	adds	r2, #1
 800f0e2:	f108 0804 	add.w	r8, r8, #4
 800f0e6:	461d      	mov	r5, r3
 800f0e8:	e752      	b.n	800ef90 <__kernel_rem_pio2+0x1b0>
 800f0ea:	1acb      	subs	r3, r1, r3
 800f0ec:	f8c8 3000 	str.w	r3, [r8]
 800f0f0:	462b      	mov	r3, r5
 800f0f2:	e7f5      	b.n	800f0e0 <__kernel_rem_pio2+0x300>
 800f0f4:	f3af 8000 	nop.w
	...
 800f104:	3ff00000 	.word	0x3ff00000
 800f108:	08010638 	.word	0x08010638
 800f10c:	40200000 	.word	0x40200000
 800f110:	3ff00000 	.word	0x3ff00000
 800f114:	3e700000 	.word	0x3e700000
 800f118:	41700000 	.word	0x41700000
 800f11c:	3fe00000 	.word	0x3fe00000
 800f120:	080105f8 	.word	0x080105f8
 800f124:	1e62      	subs	r2, r4, #1
 800f126:	ab0e      	add	r3, sp, #56	; 0x38
 800f128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f12c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f130:	a90e      	add	r1, sp, #56	; 0x38
 800f132:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f136:	e739      	b.n	800efac <__kernel_rem_pio2+0x1cc>
 800f138:	1e62      	subs	r2, r4, #1
 800f13a:	ab0e      	add	r3, sp, #56	; 0x38
 800f13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f140:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f144:	e7f4      	b.n	800f130 <__kernel_rem_pio2+0x350>
 800f146:	a90e      	add	r1, sp, #56	; 0x38
 800f148:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f14c:	3b01      	subs	r3, #1
 800f14e:	430a      	orrs	r2, r1
 800f150:	e789      	b.n	800f066 <__kernel_rem_pio2+0x286>
 800f152:	3301      	adds	r3, #1
 800f154:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f158:	2900      	cmp	r1, #0
 800f15a:	d0fa      	beq.n	800f152 <__kernel_rem_pio2+0x372>
 800f15c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f15e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800f162:	446a      	add	r2, sp
 800f164:	3a98      	subs	r2, #152	; 0x98
 800f166:	920a      	str	r2, [sp, #40]	; 0x28
 800f168:	9a08      	ldr	r2, [sp, #32]
 800f16a:	18e3      	adds	r3, r4, r3
 800f16c:	18a5      	adds	r5, r4, r2
 800f16e:	aa22      	add	r2, sp, #136	; 0x88
 800f170:	f104 0801 	add.w	r8, r4, #1
 800f174:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f178:	9304      	str	r3, [sp, #16]
 800f17a:	9b04      	ldr	r3, [sp, #16]
 800f17c:	4543      	cmp	r3, r8
 800f17e:	da04      	bge.n	800f18a <__kernel_rem_pio2+0x3aa>
 800f180:	461c      	mov	r4, r3
 800f182:	e6a3      	b.n	800eecc <__kernel_rem_pio2+0xec>
 800f184:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f186:	2301      	movs	r3, #1
 800f188:	e7e4      	b.n	800f154 <__kernel_rem_pio2+0x374>
 800f18a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f18c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f190:	f7f1 f9e0 	bl	8000554 <__aeabi_i2d>
 800f194:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f19a:	46ab      	mov	fp, r5
 800f19c:	461c      	mov	r4, r3
 800f19e:	f04f 0900 	mov.w	r9, #0
 800f1a2:	2600      	movs	r6, #0
 800f1a4:	2700      	movs	r7, #0
 800f1a6:	9b06      	ldr	r3, [sp, #24]
 800f1a8:	4599      	cmp	r9, r3
 800f1aa:	dd06      	ble.n	800f1ba <__kernel_rem_pio2+0x3da>
 800f1ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1ae:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f1b2:	f108 0801 	add.w	r8, r8, #1
 800f1b6:	930a      	str	r3, [sp, #40]	; 0x28
 800f1b8:	e7df      	b.n	800f17a <__kernel_rem_pio2+0x39a>
 800f1ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f1be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f1c2:	f7f1 fa31 	bl	8000628 <__aeabi_dmul>
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	4630      	mov	r0, r6
 800f1cc:	4639      	mov	r1, r7
 800f1ce:	f7f1 f875 	bl	80002bc <__adddf3>
 800f1d2:	f109 0901 	add.w	r9, r9, #1
 800f1d6:	4606      	mov	r6, r0
 800f1d8:	460f      	mov	r7, r1
 800f1da:	e7e4      	b.n	800f1a6 <__kernel_rem_pio2+0x3c6>
 800f1dc:	3d01      	subs	r5, #1
 800f1de:	e748      	b.n	800f072 <__kernel_rem_pio2+0x292>
 800f1e0:	ec47 6b10 	vmov	d0, r6, r7
 800f1e4:	f1ca 0000 	rsb	r0, sl, #0
 800f1e8:	f000 fc6e 	bl	800fac8 <scalbn>
 800f1ec:	ec57 6b10 	vmov	r6, r7, d0
 800f1f0:	4ba0      	ldr	r3, [pc, #640]	; (800f474 <__kernel_rem_pio2+0x694>)
 800f1f2:	ee10 0a10 	vmov	r0, s0
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	4639      	mov	r1, r7
 800f1fa:	f7f1 fc9b 	bl	8000b34 <__aeabi_dcmpge>
 800f1fe:	b1f8      	cbz	r0, 800f240 <__kernel_rem_pio2+0x460>
 800f200:	4b9d      	ldr	r3, [pc, #628]	; (800f478 <__kernel_rem_pio2+0x698>)
 800f202:	2200      	movs	r2, #0
 800f204:	4630      	mov	r0, r6
 800f206:	4639      	mov	r1, r7
 800f208:	f7f1 fa0e 	bl	8000628 <__aeabi_dmul>
 800f20c:	f7f1 fcbc 	bl	8000b88 <__aeabi_d2iz>
 800f210:	4680      	mov	r8, r0
 800f212:	f7f1 f99f 	bl	8000554 <__aeabi_i2d>
 800f216:	4b97      	ldr	r3, [pc, #604]	; (800f474 <__kernel_rem_pio2+0x694>)
 800f218:	2200      	movs	r2, #0
 800f21a:	f7f1 fa05 	bl	8000628 <__aeabi_dmul>
 800f21e:	460b      	mov	r3, r1
 800f220:	4602      	mov	r2, r0
 800f222:	4639      	mov	r1, r7
 800f224:	4630      	mov	r0, r6
 800f226:	f7f1 f847 	bl	80002b8 <__aeabi_dsub>
 800f22a:	f7f1 fcad 	bl	8000b88 <__aeabi_d2iz>
 800f22e:	1c65      	adds	r5, r4, #1
 800f230:	ab0e      	add	r3, sp, #56	; 0x38
 800f232:	f10a 0a18 	add.w	sl, sl, #24
 800f236:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f23a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f23e:	e720      	b.n	800f082 <__kernel_rem_pio2+0x2a2>
 800f240:	4630      	mov	r0, r6
 800f242:	4639      	mov	r1, r7
 800f244:	f7f1 fca0 	bl	8000b88 <__aeabi_d2iz>
 800f248:	ab0e      	add	r3, sp, #56	; 0x38
 800f24a:	4625      	mov	r5, r4
 800f24c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f250:	e717      	b.n	800f082 <__kernel_rem_pio2+0x2a2>
 800f252:	ab0e      	add	r3, sp, #56	; 0x38
 800f254:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f258:	f7f1 f97c 	bl	8000554 <__aeabi_i2d>
 800f25c:	4632      	mov	r2, r6
 800f25e:	463b      	mov	r3, r7
 800f260:	f7f1 f9e2 	bl	8000628 <__aeabi_dmul>
 800f264:	4b84      	ldr	r3, [pc, #528]	; (800f478 <__kernel_rem_pio2+0x698>)
 800f266:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f26a:	2200      	movs	r2, #0
 800f26c:	4630      	mov	r0, r6
 800f26e:	4639      	mov	r1, r7
 800f270:	f7f1 f9da 	bl	8000628 <__aeabi_dmul>
 800f274:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f278:	4606      	mov	r6, r0
 800f27a:	460f      	mov	r7, r1
 800f27c:	e70f      	b.n	800f09e <__kernel_rem_pio2+0x2be>
 800f27e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f282:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f286:	f7f1 f9cf 	bl	8000628 <__aeabi_dmul>
 800f28a:	4602      	mov	r2, r0
 800f28c:	460b      	mov	r3, r1
 800f28e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f292:	f7f1 f813 	bl	80002bc <__adddf3>
 800f296:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f29a:	f108 0801 	add.w	r8, r8, #1
 800f29e:	9b02      	ldr	r3, [sp, #8]
 800f2a0:	4598      	cmp	r8, r3
 800f2a2:	dc01      	bgt.n	800f2a8 <__kernel_rem_pio2+0x4c8>
 800f2a4:	45b8      	cmp	r8, r7
 800f2a6:	ddea      	ble.n	800f27e <__kernel_rem_pio2+0x49e>
 800f2a8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f2ac:	ab4a      	add	r3, sp, #296	; 0x128
 800f2ae:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f2b2:	ed87 7b00 	vstr	d7, [r7]
 800f2b6:	3e01      	subs	r6, #1
 800f2b8:	e6f8      	b.n	800f0ac <__kernel_rem_pio2+0x2cc>
 800f2ba:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f2bc:	2b02      	cmp	r3, #2
 800f2be:	dc0b      	bgt.n	800f2d8 <__kernel_rem_pio2+0x4f8>
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	dc35      	bgt.n	800f330 <__kernel_rem_pio2+0x550>
 800f2c4:	d059      	beq.n	800f37a <__kernel_rem_pio2+0x59a>
 800f2c6:	9b04      	ldr	r3, [sp, #16]
 800f2c8:	f003 0007 	and.w	r0, r3, #7
 800f2cc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f2d0:	ecbd 8b02 	vpop	{d8}
 800f2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2d8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f2da:	2b03      	cmp	r3, #3
 800f2dc:	d1f3      	bne.n	800f2c6 <__kernel_rem_pio2+0x4e6>
 800f2de:	ab4a      	add	r3, sp, #296	; 0x128
 800f2e0:	4423      	add	r3, r4
 800f2e2:	9306      	str	r3, [sp, #24]
 800f2e4:	461c      	mov	r4, r3
 800f2e6:	469a      	mov	sl, r3
 800f2e8:	9502      	str	r5, [sp, #8]
 800f2ea:	9b02      	ldr	r3, [sp, #8]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	f1aa 0a08 	sub.w	sl, sl, #8
 800f2f2:	dc6b      	bgt.n	800f3cc <__kernel_rem_pio2+0x5ec>
 800f2f4:	46aa      	mov	sl, r5
 800f2f6:	f1ba 0f01 	cmp.w	sl, #1
 800f2fa:	f1a4 0408 	sub.w	r4, r4, #8
 800f2fe:	f300 8085 	bgt.w	800f40c <__kernel_rem_pio2+0x62c>
 800f302:	9c06      	ldr	r4, [sp, #24]
 800f304:	2000      	movs	r0, #0
 800f306:	3408      	adds	r4, #8
 800f308:	2100      	movs	r1, #0
 800f30a:	2d01      	cmp	r5, #1
 800f30c:	f300 809d 	bgt.w	800f44a <__kernel_rem_pio2+0x66a>
 800f310:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f314:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f318:	f1bb 0f00 	cmp.w	fp, #0
 800f31c:	f040 809b 	bne.w	800f456 <__kernel_rem_pio2+0x676>
 800f320:	9b01      	ldr	r3, [sp, #4]
 800f322:	e9c3 5600 	strd	r5, r6, [r3]
 800f326:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f32a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f32e:	e7ca      	b.n	800f2c6 <__kernel_rem_pio2+0x4e6>
 800f330:	3408      	adds	r4, #8
 800f332:	ab4a      	add	r3, sp, #296	; 0x128
 800f334:	441c      	add	r4, r3
 800f336:	462e      	mov	r6, r5
 800f338:	2000      	movs	r0, #0
 800f33a:	2100      	movs	r1, #0
 800f33c:	2e00      	cmp	r6, #0
 800f33e:	da36      	bge.n	800f3ae <__kernel_rem_pio2+0x5ce>
 800f340:	f1bb 0f00 	cmp.w	fp, #0
 800f344:	d039      	beq.n	800f3ba <__kernel_rem_pio2+0x5da>
 800f346:	4602      	mov	r2, r0
 800f348:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f34c:	9c01      	ldr	r4, [sp, #4]
 800f34e:	e9c4 2300 	strd	r2, r3, [r4]
 800f352:	4602      	mov	r2, r0
 800f354:	460b      	mov	r3, r1
 800f356:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f35a:	f7f0 ffad 	bl	80002b8 <__aeabi_dsub>
 800f35e:	ae4c      	add	r6, sp, #304	; 0x130
 800f360:	2401      	movs	r4, #1
 800f362:	42a5      	cmp	r5, r4
 800f364:	da2c      	bge.n	800f3c0 <__kernel_rem_pio2+0x5e0>
 800f366:	f1bb 0f00 	cmp.w	fp, #0
 800f36a:	d002      	beq.n	800f372 <__kernel_rem_pio2+0x592>
 800f36c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f370:	4619      	mov	r1, r3
 800f372:	9b01      	ldr	r3, [sp, #4]
 800f374:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f378:	e7a5      	b.n	800f2c6 <__kernel_rem_pio2+0x4e6>
 800f37a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f37e:	eb0d 0403 	add.w	r4, sp, r3
 800f382:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f386:	2000      	movs	r0, #0
 800f388:	2100      	movs	r1, #0
 800f38a:	2d00      	cmp	r5, #0
 800f38c:	da09      	bge.n	800f3a2 <__kernel_rem_pio2+0x5c2>
 800f38e:	f1bb 0f00 	cmp.w	fp, #0
 800f392:	d002      	beq.n	800f39a <__kernel_rem_pio2+0x5ba>
 800f394:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f398:	4619      	mov	r1, r3
 800f39a:	9b01      	ldr	r3, [sp, #4]
 800f39c:	e9c3 0100 	strd	r0, r1, [r3]
 800f3a0:	e791      	b.n	800f2c6 <__kernel_rem_pio2+0x4e6>
 800f3a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f3a6:	f7f0 ff89 	bl	80002bc <__adddf3>
 800f3aa:	3d01      	subs	r5, #1
 800f3ac:	e7ed      	b.n	800f38a <__kernel_rem_pio2+0x5aa>
 800f3ae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f3b2:	f7f0 ff83 	bl	80002bc <__adddf3>
 800f3b6:	3e01      	subs	r6, #1
 800f3b8:	e7c0      	b.n	800f33c <__kernel_rem_pio2+0x55c>
 800f3ba:	4602      	mov	r2, r0
 800f3bc:	460b      	mov	r3, r1
 800f3be:	e7c5      	b.n	800f34c <__kernel_rem_pio2+0x56c>
 800f3c0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f3c4:	f7f0 ff7a 	bl	80002bc <__adddf3>
 800f3c8:	3401      	adds	r4, #1
 800f3ca:	e7ca      	b.n	800f362 <__kernel_rem_pio2+0x582>
 800f3cc:	e9da 8900 	ldrd	r8, r9, [sl]
 800f3d0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f3d4:	9b02      	ldr	r3, [sp, #8]
 800f3d6:	3b01      	subs	r3, #1
 800f3d8:	9302      	str	r3, [sp, #8]
 800f3da:	4632      	mov	r2, r6
 800f3dc:	463b      	mov	r3, r7
 800f3de:	4640      	mov	r0, r8
 800f3e0:	4649      	mov	r1, r9
 800f3e2:	f7f0 ff6b 	bl	80002bc <__adddf3>
 800f3e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	4640      	mov	r0, r8
 800f3f0:	4649      	mov	r1, r9
 800f3f2:	f7f0 ff61 	bl	80002b8 <__aeabi_dsub>
 800f3f6:	4632      	mov	r2, r6
 800f3f8:	463b      	mov	r3, r7
 800f3fa:	f7f0 ff5f 	bl	80002bc <__adddf3>
 800f3fe:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f402:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f406:	ed8a 7b00 	vstr	d7, [sl]
 800f40a:	e76e      	b.n	800f2ea <__kernel_rem_pio2+0x50a>
 800f40c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f410:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f414:	4640      	mov	r0, r8
 800f416:	4632      	mov	r2, r6
 800f418:	463b      	mov	r3, r7
 800f41a:	4649      	mov	r1, r9
 800f41c:	f7f0 ff4e 	bl	80002bc <__adddf3>
 800f420:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f424:	4602      	mov	r2, r0
 800f426:	460b      	mov	r3, r1
 800f428:	4640      	mov	r0, r8
 800f42a:	4649      	mov	r1, r9
 800f42c:	f7f0 ff44 	bl	80002b8 <__aeabi_dsub>
 800f430:	4632      	mov	r2, r6
 800f432:	463b      	mov	r3, r7
 800f434:	f7f0 ff42 	bl	80002bc <__adddf3>
 800f438:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f43c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f440:	ed84 7b00 	vstr	d7, [r4]
 800f444:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f448:	e755      	b.n	800f2f6 <__kernel_rem_pio2+0x516>
 800f44a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f44e:	f7f0 ff35 	bl	80002bc <__adddf3>
 800f452:	3d01      	subs	r5, #1
 800f454:	e759      	b.n	800f30a <__kernel_rem_pio2+0x52a>
 800f456:	9b01      	ldr	r3, [sp, #4]
 800f458:	9a01      	ldr	r2, [sp, #4]
 800f45a:	601d      	str	r5, [r3, #0]
 800f45c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f460:	605c      	str	r4, [r3, #4]
 800f462:	609f      	str	r7, [r3, #8]
 800f464:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f468:	60d3      	str	r3, [r2, #12]
 800f46a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f46e:	6110      	str	r0, [r2, #16]
 800f470:	6153      	str	r3, [r2, #20]
 800f472:	e728      	b.n	800f2c6 <__kernel_rem_pio2+0x4e6>
 800f474:	41700000 	.word	0x41700000
 800f478:	3e700000 	.word	0x3e700000
 800f47c:	00000000 	.word	0x00000000

0800f480 <__kernel_sin>:
 800f480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f484:	ed2d 8b04 	vpush	{d8-d9}
 800f488:	eeb0 8a41 	vmov.f32	s16, s2
 800f48c:	eef0 8a61 	vmov.f32	s17, s3
 800f490:	ec55 4b10 	vmov	r4, r5, d0
 800f494:	b083      	sub	sp, #12
 800f496:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f49a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f49e:	9001      	str	r0, [sp, #4]
 800f4a0:	da06      	bge.n	800f4b0 <__kernel_sin+0x30>
 800f4a2:	ee10 0a10 	vmov	r0, s0
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	f7f1 fb6e 	bl	8000b88 <__aeabi_d2iz>
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d051      	beq.n	800f554 <__kernel_sin+0xd4>
 800f4b0:	4622      	mov	r2, r4
 800f4b2:	462b      	mov	r3, r5
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	4629      	mov	r1, r5
 800f4b8:	f7f1 f8b6 	bl	8000628 <__aeabi_dmul>
 800f4bc:	4682      	mov	sl, r0
 800f4be:	468b      	mov	fp, r1
 800f4c0:	4602      	mov	r2, r0
 800f4c2:	460b      	mov	r3, r1
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	4629      	mov	r1, r5
 800f4c8:	f7f1 f8ae 	bl	8000628 <__aeabi_dmul>
 800f4cc:	a341      	add	r3, pc, #260	; (adr r3, 800f5d4 <__kernel_sin+0x154>)
 800f4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d2:	4680      	mov	r8, r0
 800f4d4:	4689      	mov	r9, r1
 800f4d6:	4650      	mov	r0, sl
 800f4d8:	4659      	mov	r1, fp
 800f4da:	f7f1 f8a5 	bl	8000628 <__aeabi_dmul>
 800f4de:	a33f      	add	r3, pc, #252	; (adr r3, 800f5dc <__kernel_sin+0x15c>)
 800f4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e4:	f7f0 fee8 	bl	80002b8 <__aeabi_dsub>
 800f4e8:	4652      	mov	r2, sl
 800f4ea:	465b      	mov	r3, fp
 800f4ec:	f7f1 f89c 	bl	8000628 <__aeabi_dmul>
 800f4f0:	a33c      	add	r3, pc, #240	; (adr r3, 800f5e4 <__kernel_sin+0x164>)
 800f4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f6:	f7f0 fee1 	bl	80002bc <__adddf3>
 800f4fa:	4652      	mov	r2, sl
 800f4fc:	465b      	mov	r3, fp
 800f4fe:	f7f1 f893 	bl	8000628 <__aeabi_dmul>
 800f502:	a33a      	add	r3, pc, #232	; (adr r3, 800f5ec <__kernel_sin+0x16c>)
 800f504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f508:	f7f0 fed6 	bl	80002b8 <__aeabi_dsub>
 800f50c:	4652      	mov	r2, sl
 800f50e:	465b      	mov	r3, fp
 800f510:	f7f1 f88a 	bl	8000628 <__aeabi_dmul>
 800f514:	a337      	add	r3, pc, #220	; (adr r3, 800f5f4 <__kernel_sin+0x174>)
 800f516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51a:	f7f0 fecf 	bl	80002bc <__adddf3>
 800f51e:	9b01      	ldr	r3, [sp, #4]
 800f520:	4606      	mov	r6, r0
 800f522:	460f      	mov	r7, r1
 800f524:	b9eb      	cbnz	r3, 800f562 <__kernel_sin+0xe2>
 800f526:	4602      	mov	r2, r0
 800f528:	460b      	mov	r3, r1
 800f52a:	4650      	mov	r0, sl
 800f52c:	4659      	mov	r1, fp
 800f52e:	f7f1 f87b 	bl	8000628 <__aeabi_dmul>
 800f532:	a325      	add	r3, pc, #148	; (adr r3, 800f5c8 <__kernel_sin+0x148>)
 800f534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f538:	f7f0 febe 	bl	80002b8 <__aeabi_dsub>
 800f53c:	4642      	mov	r2, r8
 800f53e:	464b      	mov	r3, r9
 800f540:	f7f1 f872 	bl	8000628 <__aeabi_dmul>
 800f544:	4602      	mov	r2, r0
 800f546:	460b      	mov	r3, r1
 800f548:	4620      	mov	r0, r4
 800f54a:	4629      	mov	r1, r5
 800f54c:	f7f0 feb6 	bl	80002bc <__adddf3>
 800f550:	4604      	mov	r4, r0
 800f552:	460d      	mov	r5, r1
 800f554:	ec45 4b10 	vmov	d0, r4, r5
 800f558:	b003      	add	sp, #12
 800f55a:	ecbd 8b04 	vpop	{d8-d9}
 800f55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f562:	4b1b      	ldr	r3, [pc, #108]	; (800f5d0 <__kernel_sin+0x150>)
 800f564:	ec51 0b18 	vmov	r0, r1, d8
 800f568:	2200      	movs	r2, #0
 800f56a:	f7f1 f85d 	bl	8000628 <__aeabi_dmul>
 800f56e:	4632      	mov	r2, r6
 800f570:	ec41 0b19 	vmov	d9, r0, r1
 800f574:	463b      	mov	r3, r7
 800f576:	4640      	mov	r0, r8
 800f578:	4649      	mov	r1, r9
 800f57a:	f7f1 f855 	bl	8000628 <__aeabi_dmul>
 800f57e:	4602      	mov	r2, r0
 800f580:	460b      	mov	r3, r1
 800f582:	ec51 0b19 	vmov	r0, r1, d9
 800f586:	f7f0 fe97 	bl	80002b8 <__aeabi_dsub>
 800f58a:	4652      	mov	r2, sl
 800f58c:	465b      	mov	r3, fp
 800f58e:	f7f1 f84b 	bl	8000628 <__aeabi_dmul>
 800f592:	ec53 2b18 	vmov	r2, r3, d8
 800f596:	f7f0 fe8f 	bl	80002b8 <__aeabi_dsub>
 800f59a:	a30b      	add	r3, pc, #44	; (adr r3, 800f5c8 <__kernel_sin+0x148>)
 800f59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a0:	4606      	mov	r6, r0
 800f5a2:	460f      	mov	r7, r1
 800f5a4:	4640      	mov	r0, r8
 800f5a6:	4649      	mov	r1, r9
 800f5a8:	f7f1 f83e 	bl	8000628 <__aeabi_dmul>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	4639      	mov	r1, r7
 800f5b4:	f7f0 fe82 	bl	80002bc <__adddf3>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	4620      	mov	r0, r4
 800f5be:	4629      	mov	r1, r5
 800f5c0:	f7f0 fe7a 	bl	80002b8 <__aeabi_dsub>
 800f5c4:	e7c4      	b.n	800f550 <__kernel_sin+0xd0>
 800f5c6:	bf00      	nop
 800f5c8:	55555549 	.word	0x55555549
 800f5cc:	3fc55555 	.word	0x3fc55555
 800f5d0:	3fe00000 	.word	0x3fe00000
 800f5d4:	5acfd57c 	.word	0x5acfd57c
 800f5d8:	3de5d93a 	.word	0x3de5d93a
 800f5dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800f5e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800f5e4:	57b1fe7d 	.word	0x57b1fe7d
 800f5e8:	3ec71de3 	.word	0x3ec71de3
 800f5ec:	19c161d5 	.word	0x19c161d5
 800f5f0:	3f2a01a0 	.word	0x3f2a01a0
 800f5f4:	1110f8a6 	.word	0x1110f8a6
 800f5f8:	3f811111 	.word	0x3f811111

0800f5fc <with_errno>:
 800f5fc:	b570      	push	{r4, r5, r6, lr}
 800f5fe:	4604      	mov	r4, r0
 800f600:	460d      	mov	r5, r1
 800f602:	4616      	mov	r6, r2
 800f604:	f7f8 fd30 	bl	8008068 <__errno>
 800f608:	4629      	mov	r1, r5
 800f60a:	6006      	str	r6, [r0, #0]
 800f60c:	4620      	mov	r0, r4
 800f60e:	bd70      	pop	{r4, r5, r6, pc}

0800f610 <xflow>:
 800f610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f612:	4614      	mov	r4, r2
 800f614:	461d      	mov	r5, r3
 800f616:	b108      	cbz	r0, 800f61c <xflow+0xc>
 800f618:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f61c:	e9cd 2300 	strd	r2, r3, [sp]
 800f620:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f624:	4620      	mov	r0, r4
 800f626:	4629      	mov	r1, r5
 800f628:	f7f0 fffe 	bl	8000628 <__aeabi_dmul>
 800f62c:	2222      	movs	r2, #34	; 0x22
 800f62e:	b003      	add	sp, #12
 800f630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f634:	f7ff bfe2 	b.w	800f5fc <with_errno>

0800f638 <__math_uflow>:
 800f638:	b508      	push	{r3, lr}
 800f63a:	2200      	movs	r2, #0
 800f63c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f640:	f7ff ffe6 	bl	800f610 <xflow>
 800f644:	ec41 0b10 	vmov	d0, r0, r1
 800f648:	bd08      	pop	{r3, pc}

0800f64a <__math_oflow>:
 800f64a:	b508      	push	{r3, lr}
 800f64c:	2200      	movs	r2, #0
 800f64e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f652:	f7ff ffdd 	bl	800f610 <xflow>
 800f656:	ec41 0b10 	vmov	d0, r0, r1
 800f65a:	bd08      	pop	{r3, pc}
 800f65c:	0000      	movs	r0, r0
	...

0800f660 <atan>:
 800f660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f664:	ec55 4b10 	vmov	r4, r5, d0
 800f668:	4bc3      	ldr	r3, [pc, #780]	; (800f978 <atan+0x318>)
 800f66a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f66e:	429e      	cmp	r6, r3
 800f670:	46ab      	mov	fp, r5
 800f672:	dd18      	ble.n	800f6a6 <atan+0x46>
 800f674:	4bc1      	ldr	r3, [pc, #772]	; (800f97c <atan+0x31c>)
 800f676:	429e      	cmp	r6, r3
 800f678:	dc01      	bgt.n	800f67e <atan+0x1e>
 800f67a:	d109      	bne.n	800f690 <atan+0x30>
 800f67c:	b144      	cbz	r4, 800f690 <atan+0x30>
 800f67e:	4622      	mov	r2, r4
 800f680:	462b      	mov	r3, r5
 800f682:	4620      	mov	r0, r4
 800f684:	4629      	mov	r1, r5
 800f686:	f7f0 fe19 	bl	80002bc <__adddf3>
 800f68a:	4604      	mov	r4, r0
 800f68c:	460d      	mov	r5, r1
 800f68e:	e006      	b.n	800f69e <atan+0x3e>
 800f690:	f1bb 0f00 	cmp.w	fp, #0
 800f694:	f300 8131 	bgt.w	800f8fa <atan+0x29a>
 800f698:	a59b      	add	r5, pc, #620	; (adr r5, 800f908 <atan+0x2a8>)
 800f69a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f69e:	ec45 4b10 	vmov	d0, r4, r5
 800f6a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6a6:	4bb6      	ldr	r3, [pc, #728]	; (800f980 <atan+0x320>)
 800f6a8:	429e      	cmp	r6, r3
 800f6aa:	dc14      	bgt.n	800f6d6 <atan+0x76>
 800f6ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f6b0:	429e      	cmp	r6, r3
 800f6b2:	dc0d      	bgt.n	800f6d0 <atan+0x70>
 800f6b4:	a396      	add	r3, pc, #600	; (adr r3, 800f910 <atan+0x2b0>)
 800f6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ba:	ee10 0a10 	vmov	r0, s0
 800f6be:	4629      	mov	r1, r5
 800f6c0:	f7f0 fdfc 	bl	80002bc <__adddf3>
 800f6c4:	4baf      	ldr	r3, [pc, #700]	; (800f984 <atan+0x324>)
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	f7f1 fa3e 	bl	8000b48 <__aeabi_dcmpgt>
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	d1e6      	bne.n	800f69e <atan+0x3e>
 800f6d0:	f04f 3aff 	mov.w	sl, #4294967295
 800f6d4:	e02b      	b.n	800f72e <atan+0xce>
 800f6d6:	f000 f963 	bl	800f9a0 <fabs>
 800f6da:	4bab      	ldr	r3, [pc, #684]	; (800f988 <atan+0x328>)
 800f6dc:	429e      	cmp	r6, r3
 800f6de:	ec55 4b10 	vmov	r4, r5, d0
 800f6e2:	f300 80bf 	bgt.w	800f864 <atan+0x204>
 800f6e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f6ea:	429e      	cmp	r6, r3
 800f6ec:	f300 80a0 	bgt.w	800f830 <atan+0x1d0>
 800f6f0:	ee10 2a10 	vmov	r2, s0
 800f6f4:	ee10 0a10 	vmov	r0, s0
 800f6f8:	462b      	mov	r3, r5
 800f6fa:	4629      	mov	r1, r5
 800f6fc:	f7f0 fdde 	bl	80002bc <__adddf3>
 800f700:	4ba0      	ldr	r3, [pc, #640]	; (800f984 <atan+0x324>)
 800f702:	2200      	movs	r2, #0
 800f704:	f7f0 fdd8 	bl	80002b8 <__aeabi_dsub>
 800f708:	2200      	movs	r2, #0
 800f70a:	4606      	mov	r6, r0
 800f70c:	460f      	mov	r7, r1
 800f70e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f712:	4620      	mov	r0, r4
 800f714:	4629      	mov	r1, r5
 800f716:	f7f0 fdd1 	bl	80002bc <__adddf3>
 800f71a:	4602      	mov	r2, r0
 800f71c:	460b      	mov	r3, r1
 800f71e:	4630      	mov	r0, r6
 800f720:	4639      	mov	r1, r7
 800f722:	f7f1 f8ab 	bl	800087c <__aeabi_ddiv>
 800f726:	f04f 0a00 	mov.w	sl, #0
 800f72a:	4604      	mov	r4, r0
 800f72c:	460d      	mov	r5, r1
 800f72e:	4622      	mov	r2, r4
 800f730:	462b      	mov	r3, r5
 800f732:	4620      	mov	r0, r4
 800f734:	4629      	mov	r1, r5
 800f736:	f7f0 ff77 	bl	8000628 <__aeabi_dmul>
 800f73a:	4602      	mov	r2, r0
 800f73c:	460b      	mov	r3, r1
 800f73e:	4680      	mov	r8, r0
 800f740:	4689      	mov	r9, r1
 800f742:	f7f0 ff71 	bl	8000628 <__aeabi_dmul>
 800f746:	a374      	add	r3, pc, #464	; (adr r3, 800f918 <atan+0x2b8>)
 800f748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74c:	4606      	mov	r6, r0
 800f74e:	460f      	mov	r7, r1
 800f750:	f7f0 ff6a 	bl	8000628 <__aeabi_dmul>
 800f754:	a372      	add	r3, pc, #456	; (adr r3, 800f920 <atan+0x2c0>)
 800f756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75a:	f7f0 fdaf 	bl	80002bc <__adddf3>
 800f75e:	4632      	mov	r2, r6
 800f760:	463b      	mov	r3, r7
 800f762:	f7f0 ff61 	bl	8000628 <__aeabi_dmul>
 800f766:	a370      	add	r3, pc, #448	; (adr r3, 800f928 <atan+0x2c8>)
 800f768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76c:	f7f0 fda6 	bl	80002bc <__adddf3>
 800f770:	4632      	mov	r2, r6
 800f772:	463b      	mov	r3, r7
 800f774:	f7f0 ff58 	bl	8000628 <__aeabi_dmul>
 800f778:	a36d      	add	r3, pc, #436	; (adr r3, 800f930 <atan+0x2d0>)
 800f77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77e:	f7f0 fd9d 	bl	80002bc <__adddf3>
 800f782:	4632      	mov	r2, r6
 800f784:	463b      	mov	r3, r7
 800f786:	f7f0 ff4f 	bl	8000628 <__aeabi_dmul>
 800f78a:	a36b      	add	r3, pc, #428	; (adr r3, 800f938 <atan+0x2d8>)
 800f78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f790:	f7f0 fd94 	bl	80002bc <__adddf3>
 800f794:	4632      	mov	r2, r6
 800f796:	463b      	mov	r3, r7
 800f798:	f7f0 ff46 	bl	8000628 <__aeabi_dmul>
 800f79c:	a368      	add	r3, pc, #416	; (adr r3, 800f940 <atan+0x2e0>)
 800f79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a2:	f7f0 fd8b 	bl	80002bc <__adddf3>
 800f7a6:	4642      	mov	r2, r8
 800f7a8:	464b      	mov	r3, r9
 800f7aa:	f7f0 ff3d 	bl	8000628 <__aeabi_dmul>
 800f7ae:	a366      	add	r3, pc, #408	; (adr r3, 800f948 <atan+0x2e8>)
 800f7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b4:	4680      	mov	r8, r0
 800f7b6:	4689      	mov	r9, r1
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	4639      	mov	r1, r7
 800f7bc:	f7f0 ff34 	bl	8000628 <__aeabi_dmul>
 800f7c0:	a363      	add	r3, pc, #396	; (adr r3, 800f950 <atan+0x2f0>)
 800f7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c6:	f7f0 fd77 	bl	80002b8 <__aeabi_dsub>
 800f7ca:	4632      	mov	r2, r6
 800f7cc:	463b      	mov	r3, r7
 800f7ce:	f7f0 ff2b 	bl	8000628 <__aeabi_dmul>
 800f7d2:	a361      	add	r3, pc, #388	; (adr r3, 800f958 <atan+0x2f8>)
 800f7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d8:	f7f0 fd6e 	bl	80002b8 <__aeabi_dsub>
 800f7dc:	4632      	mov	r2, r6
 800f7de:	463b      	mov	r3, r7
 800f7e0:	f7f0 ff22 	bl	8000628 <__aeabi_dmul>
 800f7e4:	a35e      	add	r3, pc, #376	; (adr r3, 800f960 <atan+0x300>)
 800f7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ea:	f7f0 fd65 	bl	80002b8 <__aeabi_dsub>
 800f7ee:	4632      	mov	r2, r6
 800f7f0:	463b      	mov	r3, r7
 800f7f2:	f7f0 ff19 	bl	8000628 <__aeabi_dmul>
 800f7f6:	a35c      	add	r3, pc, #368	; (adr r3, 800f968 <atan+0x308>)
 800f7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fc:	f7f0 fd5c 	bl	80002b8 <__aeabi_dsub>
 800f800:	4632      	mov	r2, r6
 800f802:	463b      	mov	r3, r7
 800f804:	f7f0 ff10 	bl	8000628 <__aeabi_dmul>
 800f808:	4602      	mov	r2, r0
 800f80a:	460b      	mov	r3, r1
 800f80c:	4640      	mov	r0, r8
 800f80e:	4649      	mov	r1, r9
 800f810:	f7f0 fd54 	bl	80002bc <__adddf3>
 800f814:	4622      	mov	r2, r4
 800f816:	462b      	mov	r3, r5
 800f818:	f7f0 ff06 	bl	8000628 <__aeabi_dmul>
 800f81c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f820:	4602      	mov	r2, r0
 800f822:	460b      	mov	r3, r1
 800f824:	d14b      	bne.n	800f8be <atan+0x25e>
 800f826:	4620      	mov	r0, r4
 800f828:	4629      	mov	r1, r5
 800f82a:	f7f0 fd45 	bl	80002b8 <__aeabi_dsub>
 800f82e:	e72c      	b.n	800f68a <atan+0x2a>
 800f830:	ee10 0a10 	vmov	r0, s0
 800f834:	4b53      	ldr	r3, [pc, #332]	; (800f984 <atan+0x324>)
 800f836:	2200      	movs	r2, #0
 800f838:	4629      	mov	r1, r5
 800f83a:	f7f0 fd3d 	bl	80002b8 <__aeabi_dsub>
 800f83e:	4b51      	ldr	r3, [pc, #324]	; (800f984 <atan+0x324>)
 800f840:	4606      	mov	r6, r0
 800f842:	460f      	mov	r7, r1
 800f844:	2200      	movs	r2, #0
 800f846:	4620      	mov	r0, r4
 800f848:	4629      	mov	r1, r5
 800f84a:	f7f0 fd37 	bl	80002bc <__adddf3>
 800f84e:	4602      	mov	r2, r0
 800f850:	460b      	mov	r3, r1
 800f852:	4630      	mov	r0, r6
 800f854:	4639      	mov	r1, r7
 800f856:	f7f1 f811 	bl	800087c <__aeabi_ddiv>
 800f85a:	f04f 0a01 	mov.w	sl, #1
 800f85e:	4604      	mov	r4, r0
 800f860:	460d      	mov	r5, r1
 800f862:	e764      	b.n	800f72e <atan+0xce>
 800f864:	4b49      	ldr	r3, [pc, #292]	; (800f98c <atan+0x32c>)
 800f866:	429e      	cmp	r6, r3
 800f868:	da1d      	bge.n	800f8a6 <atan+0x246>
 800f86a:	ee10 0a10 	vmov	r0, s0
 800f86e:	4b48      	ldr	r3, [pc, #288]	; (800f990 <atan+0x330>)
 800f870:	2200      	movs	r2, #0
 800f872:	4629      	mov	r1, r5
 800f874:	f7f0 fd20 	bl	80002b8 <__aeabi_dsub>
 800f878:	4b45      	ldr	r3, [pc, #276]	; (800f990 <atan+0x330>)
 800f87a:	4606      	mov	r6, r0
 800f87c:	460f      	mov	r7, r1
 800f87e:	2200      	movs	r2, #0
 800f880:	4620      	mov	r0, r4
 800f882:	4629      	mov	r1, r5
 800f884:	f7f0 fed0 	bl	8000628 <__aeabi_dmul>
 800f888:	4b3e      	ldr	r3, [pc, #248]	; (800f984 <atan+0x324>)
 800f88a:	2200      	movs	r2, #0
 800f88c:	f7f0 fd16 	bl	80002bc <__adddf3>
 800f890:	4602      	mov	r2, r0
 800f892:	460b      	mov	r3, r1
 800f894:	4630      	mov	r0, r6
 800f896:	4639      	mov	r1, r7
 800f898:	f7f0 fff0 	bl	800087c <__aeabi_ddiv>
 800f89c:	f04f 0a02 	mov.w	sl, #2
 800f8a0:	4604      	mov	r4, r0
 800f8a2:	460d      	mov	r5, r1
 800f8a4:	e743      	b.n	800f72e <atan+0xce>
 800f8a6:	462b      	mov	r3, r5
 800f8a8:	ee10 2a10 	vmov	r2, s0
 800f8ac:	4939      	ldr	r1, [pc, #228]	; (800f994 <atan+0x334>)
 800f8ae:	2000      	movs	r0, #0
 800f8b0:	f7f0 ffe4 	bl	800087c <__aeabi_ddiv>
 800f8b4:	f04f 0a03 	mov.w	sl, #3
 800f8b8:	4604      	mov	r4, r0
 800f8ba:	460d      	mov	r5, r1
 800f8bc:	e737      	b.n	800f72e <atan+0xce>
 800f8be:	4b36      	ldr	r3, [pc, #216]	; (800f998 <atan+0x338>)
 800f8c0:	4e36      	ldr	r6, [pc, #216]	; (800f99c <atan+0x33c>)
 800f8c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f8c6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f8ca:	e9da 2300 	ldrd	r2, r3, [sl]
 800f8ce:	f7f0 fcf3 	bl	80002b8 <__aeabi_dsub>
 800f8d2:	4622      	mov	r2, r4
 800f8d4:	462b      	mov	r3, r5
 800f8d6:	f7f0 fcef 	bl	80002b8 <__aeabi_dsub>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	460b      	mov	r3, r1
 800f8de:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f8e2:	f7f0 fce9 	bl	80002b8 <__aeabi_dsub>
 800f8e6:	f1bb 0f00 	cmp.w	fp, #0
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	460d      	mov	r5, r1
 800f8ee:	f6bf aed6 	bge.w	800f69e <atan+0x3e>
 800f8f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8f6:	461d      	mov	r5, r3
 800f8f8:	e6d1      	b.n	800f69e <atan+0x3e>
 800f8fa:	a51d      	add	r5, pc, #116	; (adr r5, 800f970 <atan+0x310>)
 800f8fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f900:	e6cd      	b.n	800f69e <atan+0x3e>
 800f902:	bf00      	nop
 800f904:	f3af 8000 	nop.w
 800f908:	54442d18 	.word	0x54442d18
 800f90c:	bff921fb 	.word	0xbff921fb
 800f910:	8800759c 	.word	0x8800759c
 800f914:	7e37e43c 	.word	0x7e37e43c
 800f918:	e322da11 	.word	0xe322da11
 800f91c:	3f90ad3a 	.word	0x3f90ad3a
 800f920:	24760deb 	.word	0x24760deb
 800f924:	3fa97b4b 	.word	0x3fa97b4b
 800f928:	a0d03d51 	.word	0xa0d03d51
 800f92c:	3fb10d66 	.word	0x3fb10d66
 800f930:	c54c206e 	.word	0xc54c206e
 800f934:	3fb745cd 	.word	0x3fb745cd
 800f938:	920083ff 	.word	0x920083ff
 800f93c:	3fc24924 	.word	0x3fc24924
 800f940:	5555550d 	.word	0x5555550d
 800f944:	3fd55555 	.word	0x3fd55555
 800f948:	2c6a6c2f 	.word	0x2c6a6c2f
 800f94c:	bfa2b444 	.word	0xbfa2b444
 800f950:	52defd9a 	.word	0x52defd9a
 800f954:	3fadde2d 	.word	0x3fadde2d
 800f958:	af749a6d 	.word	0xaf749a6d
 800f95c:	3fb3b0f2 	.word	0x3fb3b0f2
 800f960:	fe231671 	.word	0xfe231671
 800f964:	3fbc71c6 	.word	0x3fbc71c6
 800f968:	9998ebc4 	.word	0x9998ebc4
 800f96c:	3fc99999 	.word	0x3fc99999
 800f970:	54442d18 	.word	0x54442d18
 800f974:	3ff921fb 	.word	0x3ff921fb
 800f978:	440fffff 	.word	0x440fffff
 800f97c:	7ff00000 	.word	0x7ff00000
 800f980:	3fdbffff 	.word	0x3fdbffff
 800f984:	3ff00000 	.word	0x3ff00000
 800f988:	3ff2ffff 	.word	0x3ff2ffff
 800f98c:	40038000 	.word	0x40038000
 800f990:	3ff80000 	.word	0x3ff80000
 800f994:	bff00000 	.word	0xbff00000
 800f998:	08010668 	.word	0x08010668
 800f99c:	08010648 	.word	0x08010648

0800f9a0 <fabs>:
 800f9a0:	ec51 0b10 	vmov	r0, r1, d0
 800f9a4:	ee10 2a10 	vmov	r2, s0
 800f9a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f9ac:	ec43 2b10 	vmov	d0, r2, r3
 800f9b0:	4770      	bx	lr

0800f9b2 <finite>:
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	ed8d 0b00 	vstr	d0, [sp]
 800f9b8:	9801      	ldr	r0, [sp, #4]
 800f9ba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f9be:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f9c2:	0fc0      	lsrs	r0, r0, #31
 800f9c4:	b002      	add	sp, #8
 800f9c6:	4770      	bx	lr

0800f9c8 <floor>:
 800f9c8:	ec51 0b10 	vmov	r0, r1, d0
 800f9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f9d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f9d8:	2e13      	cmp	r6, #19
 800f9da:	ee10 5a10 	vmov	r5, s0
 800f9de:	ee10 8a10 	vmov	r8, s0
 800f9e2:	460c      	mov	r4, r1
 800f9e4:	dc32      	bgt.n	800fa4c <floor+0x84>
 800f9e6:	2e00      	cmp	r6, #0
 800f9e8:	da14      	bge.n	800fa14 <floor+0x4c>
 800f9ea:	a333      	add	r3, pc, #204	; (adr r3, 800fab8 <floor+0xf0>)
 800f9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f0:	f7f0 fc64 	bl	80002bc <__adddf3>
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	f7f1 f8a6 	bl	8000b48 <__aeabi_dcmpgt>
 800f9fc:	b138      	cbz	r0, 800fa0e <floor+0x46>
 800f9fe:	2c00      	cmp	r4, #0
 800fa00:	da57      	bge.n	800fab2 <floor+0xea>
 800fa02:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fa06:	431d      	orrs	r5, r3
 800fa08:	d001      	beq.n	800fa0e <floor+0x46>
 800fa0a:	4c2d      	ldr	r4, [pc, #180]	; (800fac0 <floor+0xf8>)
 800fa0c:	2500      	movs	r5, #0
 800fa0e:	4621      	mov	r1, r4
 800fa10:	4628      	mov	r0, r5
 800fa12:	e025      	b.n	800fa60 <floor+0x98>
 800fa14:	4f2b      	ldr	r7, [pc, #172]	; (800fac4 <floor+0xfc>)
 800fa16:	4137      	asrs	r7, r6
 800fa18:	ea01 0307 	and.w	r3, r1, r7
 800fa1c:	4303      	orrs	r3, r0
 800fa1e:	d01f      	beq.n	800fa60 <floor+0x98>
 800fa20:	a325      	add	r3, pc, #148	; (adr r3, 800fab8 <floor+0xf0>)
 800fa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa26:	f7f0 fc49 	bl	80002bc <__adddf3>
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	f7f1 f88b 	bl	8000b48 <__aeabi_dcmpgt>
 800fa32:	2800      	cmp	r0, #0
 800fa34:	d0eb      	beq.n	800fa0e <floor+0x46>
 800fa36:	2c00      	cmp	r4, #0
 800fa38:	bfbe      	ittt	lt
 800fa3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fa3e:	fa43 f606 	asrlt.w	r6, r3, r6
 800fa42:	19a4      	addlt	r4, r4, r6
 800fa44:	ea24 0407 	bic.w	r4, r4, r7
 800fa48:	2500      	movs	r5, #0
 800fa4a:	e7e0      	b.n	800fa0e <floor+0x46>
 800fa4c:	2e33      	cmp	r6, #51	; 0x33
 800fa4e:	dd0b      	ble.n	800fa68 <floor+0xa0>
 800fa50:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fa54:	d104      	bne.n	800fa60 <floor+0x98>
 800fa56:	ee10 2a10 	vmov	r2, s0
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	f7f0 fc2e 	bl	80002bc <__adddf3>
 800fa60:	ec41 0b10 	vmov	d0, r0, r1
 800fa64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa68:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800fa6c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa70:	fa23 f707 	lsr.w	r7, r3, r7
 800fa74:	4207      	tst	r7, r0
 800fa76:	d0f3      	beq.n	800fa60 <floor+0x98>
 800fa78:	a30f      	add	r3, pc, #60	; (adr r3, 800fab8 <floor+0xf0>)
 800fa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa7e:	f7f0 fc1d 	bl	80002bc <__adddf3>
 800fa82:	2200      	movs	r2, #0
 800fa84:	2300      	movs	r3, #0
 800fa86:	f7f1 f85f 	bl	8000b48 <__aeabi_dcmpgt>
 800fa8a:	2800      	cmp	r0, #0
 800fa8c:	d0bf      	beq.n	800fa0e <floor+0x46>
 800fa8e:	2c00      	cmp	r4, #0
 800fa90:	da02      	bge.n	800fa98 <floor+0xd0>
 800fa92:	2e14      	cmp	r6, #20
 800fa94:	d103      	bne.n	800fa9e <floor+0xd6>
 800fa96:	3401      	adds	r4, #1
 800fa98:	ea25 0507 	bic.w	r5, r5, r7
 800fa9c:	e7b7      	b.n	800fa0e <floor+0x46>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800faa4:	fa03 f606 	lsl.w	r6, r3, r6
 800faa8:	4435      	add	r5, r6
 800faaa:	4545      	cmp	r5, r8
 800faac:	bf38      	it	cc
 800faae:	18e4      	addcc	r4, r4, r3
 800fab0:	e7f2      	b.n	800fa98 <floor+0xd0>
 800fab2:	2500      	movs	r5, #0
 800fab4:	462c      	mov	r4, r5
 800fab6:	e7aa      	b.n	800fa0e <floor+0x46>
 800fab8:	8800759c 	.word	0x8800759c
 800fabc:	7e37e43c 	.word	0x7e37e43c
 800fac0:	bff00000 	.word	0xbff00000
 800fac4:	000fffff 	.word	0x000fffff

0800fac8 <scalbn>:
 800fac8:	b570      	push	{r4, r5, r6, lr}
 800faca:	ec55 4b10 	vmov	r4, r5, d0
 800face:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fad2:	4606      	mov	r6, r0
 800fad4:	462b      	mov	r3, r5
 800fad6:	b99a      	cbnz	r2, 800fb00 <scalbn+0x38>
 800fad8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fadc:	4323      	orrs	r3, r4
 800fade:	d036      	beq.n	800fb4e <scalbn+0x86>
 800fae0:	4b39      	ldr	r3, [pc, #228]	; (800fbc8 <scalbn+0x100>)
 800fae2:	4629      	mov	r1, r5
 800fae4:	ee10 0a10 	vmov	r0, s0
 800fae8:	2200      	movs	r2, #0
 800faea:	f7f0 fd9d 	bl	8000628 <__aeabi_dmul>
 800faee:	4b37      	ldr	r3, [pc, #220]	; (800fbcc <scalbn+0x104>)
 800faf0:	429e      	cmp	r6, r3
 800faf2:	4604      	mov	r4, r0
 800faf4:	460d      	mov	r5, r1
 800faf6:	da10      	bge.n	800fb1a <scalbn+0x52>
 800faf8:	a32b      	add	r3, pc, #172	; (adr r3, 800fba8 <scalbn+0xe0>)
 800fafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafe:	e03a      	b.n	800fb76 <scalbn+0xae>
 800fb00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fb04:	428a      	cmp	r2, r1
 800fb06:	d10c      	bne.n	800fb22 <scalbn+0x5a>
 800fb08:	ee10 2a10 	vmov	r2, s0
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	4629      	mov	r1, r5
 800fb10:	f7f0 fbd4 	bl	80002bc <__adddf3>
 800fb14:	4604      	mov	r4, r0
 800fb16:	460d      	mov	r5, r1
 800fb18:	e019      	b.n	800fb4e <scalbn+0x86>
 800fb1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fb1e:	460b      	mov	r3, r1
 800fb20:	3a36      	subs	r2, #54	; 0x36
 800fb22:	4432      	add	r2, r6
 800fb24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fb28:	428a      	cmp	r2, r1
 800fb2a:	dd08      	ble.n	800fb3e <scalbn+0x76>
 800fb2c:	2d00      	cmp	r5, #0
 800fb2e:	a120      	add	r1, pc, #128	; (adr r1, 800fbb0 <scalbn+0xe8>)
 800fb30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb34:	da1c      	bge.n	800fb70 <scalbn+0xa8>
 800fb36:	a120      	add	r1, pc, #128	; (adr r1, 800fbb8 <scalbn+0xf0>)
 800fb38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb3c:	e018      	b.n	800fb70 <scalbn+0xa8>
 800fb3e:	2a00      	cmp	r2, #0
 800fb40:	dd08      	ble.n	800fb54 <scalbn+0x8c>
 800fb42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fb46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fb4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fb4e:	ec45 4b10 	vmov	d0, r4, r5
 800fb52:	bd70      	pop	{r4, r5, r6, pc}
 800fb54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fb58:	da19      	bge.n	800fb8e <scalbn+0xc6>
 800fb5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fb5e:	429e      	cmp	r6, r3
 800fb60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800fb64:	dd0a      	ble.n	800fb7c <scalbn+0xb4>
 800fb66:	a112      	add	r1, pc, #72	; (adr r1, 800fbb0 <scalbn+0xe8>)
 800fb68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d1e2      	bne.n	800fb36 <scalbn+0x6e>
 800fb70:	a30f      	add	r3, pc, #60	; (adr r3, 800fbb0 <scalbn+0xe8>)
 800fb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb76:	f7f0 fd57 	bl	8000628 <__aeabi_dmul>
 800fb7a:	e7cb      	b.n	800fb14 <scalbn+0x4c>
 800fb7c:	a10a      	add	r1, pc, #40	; (adr r1, 800fba8 <scalbn+0xe0>)
 800fb7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d0b8      	beq.n	800faf8 <scalbn+0x30>
 800fb86:	a10e      	add	r1, pc, #56	; (adr r1, 800fbc0 <scalbn+0xf8>)
 800fb88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb8c:	e7b4      	b.n	800faf8 <scalbn+0x30>
 800fb8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fb92:	3236      	adds	r2, #54	; 0x36
 800fb94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fb98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	4b0c      	ldr	r3, [pc, #48]	; (800fbd0 <scalbn+0x108>)
 800fba0:	2200      	movs	r2, #0
 800fba2:	e7e8      	b.n	800fb76 <scalbn+0xae>
 800fba4:	f3af 8000 	nop.w
 800fba8:	c2f8f359 	.word	0xc2f8f359
 800fbac:	01a56e1f 	.word	0x01a56e1f
 800fbb0:	8800759c 	.word	0x8800759c
 800fbb4:	7e37e43c 	.word	0x7e37e43c
 800fbb8:	8800759c 	.word	0x8800759c
 800fbbc:	fe37e43c 	.word	0xfe37e43c
 800fbc0:	c2f8f359 	.word	0xc2f8f359
 800fbc4:	81a56e1f 	.word	0x81a56e1f
 800fbc8:	43500000 	.word	0x43500000
 800fbcc:	ffff3cb0 	.word	0xffff3cb0
 800fbd0:	3c900000 	.word	0x3c900000

0800fbd4 <_init>:
 800fbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbd6:	bf00      	nop
 800fbd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbda:	bc08      	pop	{r3}
 800fbdc:	469e      	mov	lr, r3
 800fbde:	4770      	bx	lr

0800fbe0 <_fini>:
 800fbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbe2:	bf00      	nop
 800fbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbe6:	bc08      	pop	{r3}
 800fbe8:	469e      	mov	lr, r3
 800fbea:	4770      	bx	lr
