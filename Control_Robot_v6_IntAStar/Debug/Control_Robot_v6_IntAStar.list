
Control_Robot_v6_IntAStar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  08010040  08010040  00020040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ac0  08010ac0  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08010ac0  08010ac0  00020ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ac8  08010ac8  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ac8  08010ac8  00020ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010acc  08010acc  00020acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08010ad0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009b18  200001f0  08010cc0  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009d08  08010cc0  00039d08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000813c  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001adf  00000000  00000000  0003835c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  00039e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  0003a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011ceb  00000000  00000000  0003aa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a38c  00000000  00000000  0004c783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005997a  00000000  00000000  00056b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b0489  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037fc  00000000  00000000  000b04dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010024 	.word	0x08010024

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08010024 	.word	0x08010024

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_frsub>:
 8000cb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	e002      	b.n	8000cc4 <__addsf3>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fsub>:
 8000cc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cc4 <__addsf3>:
 8000cc4:	0042      	lsls	r2, r0, #1
 8000cc6:	bf1f      	itttt	ne
 8000cc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ccc:	ea92 0f03 	teqne	r2, r3
 8000cd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd8:	d06a      	beq.n	8000db0 <__addsf3+0xec>
 8000cda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ce2:	bfc1      	itttt	gt
 8000ce4:	18d2      	addgt	r2, r2, r3
 8000ce6:	4041      	eorgt	r1, r0
 8000ce8:	4048      	eorgt	r0, r1
 8000cea:	4041      	eorgt	r1, r0
 8000cec:	bfb8      	it	lt
 8000cee:	425b      	neglt	r3, r3
 8000cf0:	2b19      	cmp	r3, #25
 8000cf2:	bf88      	it	hi
 8000cf4:	4770      	bxhi	lr
 8000cf6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4249      	negne	r1, r1
 8000d16:	ea92 0f03 	teq	r2, r3
 8000d1a:	d03f      	beq.n	8000d9c <__addsf3+0xd8>
 8000d1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d20:	fa41 fc03 	asr.w	ip, r1, r3
 8000d24:	eb10 000c 	adds.w	r0, r0, ip
 8000d28:	f1c3 0320 	rsb	r3, r3, #32
 8000d2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__addsf3+0x78>
 8000d36:	4249      	negs	r1, r1
 8000d38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d40:	d313      	bcc.n	8000d6a <__addsf3+0xa6>
 8000d42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d46:	d306      	bcc.n	8000d56 <__addsf3+0x92>
 8000d48:	0840      	lsrs	r0, r0, #1
 8000d4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d4e:	f102 0201 	add.w	r2, r2, #1
 8000d52:	2afe      	cmp	r2, #254	; 0xfe
 8000d54:	d251      	bcs.n	8000dfa <__addsf3+0x136>
 8000d56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5e:	bf08      	it	eq
 8000d60:	f020 0001 	biceq.w	r0, r0, #1
 8000d64:	ea40 0003 	orr.w	r0, r0, r3
 8000d68:	4770      	bx	lr
 8000d6a:	0049      	lsls	r1, r1, #1
 8000d6c:	eb40 0000 	adc.w	r0, r0, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	bf28      	it	cs
 8000d74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d78:	d2ed      	bcs.n	8000d56 <__addsf3+0x92>
 8000d7a:	fab0 fc80 	clz	ip, r0
 8000d7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d82:	ebb2 020c 	subs.w	r2, r2, ip
 8000d86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d8a:	bfaa      	itet	ge
 8000d8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d90:	4252      	neglt	r2, r2
 8000d92:	4318      	orrge	r0, r3
 8000d94:	bfbc      	itt	lt
 8000d96:	40d0      	lsrlt	r0, r2
 8000d98:	4318      	orrlt	r0, r3
 8000d9a:	4770      	bx	lr
 8000d9c:	f092 0f00 	teq	r2, #0
 8000da0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000da4:	bf06      	itte	eq
 8000da6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000daa:	3201      	addeq	r2, #1
 8000dac:	3b01      	subne	r3, #1
 8000dae:	e7b5      	b.n	8000d1c <__addsf3+0x58>
 8000db0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db8:	bf18      	it	ne
 8000dba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dbe:	d021      	beq.n	8000e04 <__addsf3+0x140>
 8000dc0:	ea92 0f03 	teq	r2, r3
 8000dc4:	d004      	beq.n	8000dd0 <__addsf3+0x10c>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	bf08      	it	eq
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	4770      	bx	lr
 8000dd0:	ea90 0f01 	teq	r0, r1
 8000dd4:	bf1c      	itt	ne
 8000dd6:	2000      	movne	r0, #0
 8000dd8:	4770      	bxne	lr
 8000dda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dde:	d104      	bne.n	8000dea <__addsf3+0x126>
 8000de0:	0040      	lsls	r0, r0, #1
 8000de2:	bf28      	it	cs
 8000de4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dee:	bf3c      	itt	cc
 8000df0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000df4:	4770      	bxcc	lr
 8000df6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	4770      	bx	lr
 8000e04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e08:	bf16      	itet	ne
 8000e0a:	4608      	movne	r0, r1
 8000e0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e10:	4601      	movne	r1, r0
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	bf06      	itte	eq
 8000e16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e1a:	ea90 0f01 	teqeq	r0, r1
 8000e1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_ui2f>:
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e004      	b.n	8000e34 <__aeabi_i2f+0x8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_i2f>:
 8000e2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e30:	bf48      	it	mi
 8000e32:	4240      	negmi	r0, r0
 8000e34:	ea5f 0c00 	movs.w	ip, r0
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e40:	4601      	mov	r1, r0
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	e01c      	b.n	8000e82 <__aeabi_l2f+0x2a>

08000e48 <__aeabi_ul2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e00a      	b.n	8000e6c <__aeabi_l2f+0x14>
 8000e56:	bf00      	nop

08000e58 <__aeabi_l2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_l2f+0x14>
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	ea5f 0c01 	movs.w	ip, r1
 8000e70:	bf02      	ittt	eq
 8000e72:	4684      	moveq	ip, r0
 8000e74:	4601      	moveq	r1, r0
 8000e76:	2000      	moveq	r0, #0
 8000e78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e7c:	bf08      	it	eq
 8000e7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e86:	fabc f28c 	clz	r2, ip
 8000e8a:	3a08      	subs	r2, #8
 8000e8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e90:	db10      	blt.n	8000eb4 <__aeabi_l2f+0x5c>
 8000e92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e96:	4463      	add	r3, ip
 8000e98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ea4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f102 0220 	add.w	r2, r2, #32
 8000eb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ec4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_ldivmod>:
 8000ed4:	b97b      	cbnz	r3, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed6:	b972      	cbnz	r2, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	bfbe      	ittt	lt
 8000edc:	2000      	movlt	r0, #0
 8000ede:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ee2:	e006      	blt.n	8000ef2 <__aeabi_ldivmod+0x1e>
 8000ee4:	bf08      	it	eq
 8000ee6:	2800      	cmpeq	r0, #0
 8000ee8:	bf1c      	itt	ne
 8000eea:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000eee:	f04f 30ff 	movne.w	r0, #4294967295
 8000ef2:	f000 b9dd 	b.w	80012b0 <__aeabi_idiv0>
 8000ef6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000efa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000efe:	2900      	cmp	r1, #0
 8000f00:	db09      	blt.n	8000f16 <__aeabi_ldivmod+0x42>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db1a      	blt.n	8000f3c <__aeabi_ldivmod+0x68>
 8000f06:	f000 f86b 	bl	8000fe0 <__udivmoddi4>
 8000f0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f12:	b004      	add	sp, #16
 8000f14:	4770      	bx	lr
 8000f16:	4240      	negs	r0, r0
 8000f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db1b      	blt.n	8000f58 <__aeabi_ldivmod+0x84>
 8000f20:	f000 f85e 	bl	8000fe0 <__udivmoddi4>
 8000f24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2c:	b004      	add	sp, #16
 8000f2e:	4240      	negs	r0, r0
 8000f30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f34:	4252      	negs	r2, r2
 8000f36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f3a:	4770      	bx	lr
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	f000 f84d 	bl	8000fe0 <__udivmoddi4>
 8000f46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f4e:	b004      	add	sp, #16
 8000f50:	4240      	negs	r0, r0
 8000f52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f56:	4770      	bx	lr
 8000f58:	4252      	negs	r2, r2
 8000f5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f5e:	f000 f83f 	bl	8000fe0 <__udivmoddi4>
 8000f62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f6a:	b004      	add	sp, #16
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_d2lz>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	2200      	movs	r2, #0
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	f7ff fdc5 	bl	8000b0c <__aeabi_dcmplt>
 8000f82:	b928      	cbnz	r0, 8000f90 <__aeabi_d2lz+0x1c>
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f8c:	f000 b80a 	b.w	8000fa4 <__aeabi_d2ulz>
 8000f90:	4620      	mov	r0, r4
 8000f92:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f96:	f000 f805 	bl	8000fa4 <__aeabi_d2ulz>
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_d2ulz>:
 8000fa4:	b5d0      	push	{r4, r6, r7, lr}
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__aeabi_d2ulz+0x34>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4606      	mov	r6, r0
 8000fac:	460f      	mov	r7, r1
 8000fae:	f7ff fb3b 	bl	8000628 <__aeabi_dmul>
 8000fb2:	f7ff fe11 	bl	8000bd8 <__aeabi_d2uiz>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	f7ff fabc 	bl	8000534 <__aeabi_ui2d>
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <__aeabi_d2ulz+0x38>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f7ff fb32 	bl	8000628 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4630      	mov	r0, r6
 8000fca:	4639      	mov	r1, r7
 8000fcc:	f7ff f974 	bl	80002b8 <__aeabi_dsub>
 8000fd0:	f7ff fe02 	bl	8000bd8 <__aeabi_d2uiz>
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	bdd0      	pop	{r4, r6, r7, pc}
 8000fd8:	3df00000 	.word	0x3df00000
 8000fdc:	41f00000 	.word	0x41f00000

08000fe0 <__udivmoddi4>:
 8000fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe4:	9d08      	ldr	r5, [sp, #32]
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	468e      	mov	lr, r1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d14d      	bne.n	800108a <__udivmoddi4+0xaa>
 8000fee:	428a      	cmp	r2, r1
 8000ff0:	4694      	mov	ip, r2
 8000ff2:	d969      	bls.n	80010c8 <__udivmoddi4+0xe8>
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	b152      	cbz	r2, 8001010 <__udivmoddi4+0x30>
 8000ffa:	fa01 f302 	lsl.w	r3, r1, r2
 8000ffe:	f1c2 0120 	rsb	r1, r2, #32
 8001002:	fa20 f101 	lsr.w	r1, r0, r1
 8001006:	fa0c fc02 	lsl.w	ip, ip, r2
 800100a:	ea41 0e03 	orr.w	lr, r1, r3
 800100e:	4094      	lsls	r4, r2
 8001010:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001014:	0c21      	lsrs	r1, r4, #16
 8001016:	fbbe f6f8 	udiv	r6, lr, r8
 800101a:	fa1f f78c 	uxth.w	r7, ip
 800101e:	fb08 e316 	mls	r3, r8, r6, lr
 8001022:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001026:	fb06 f107 	mul.w	r1, r6, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d90a      	bls.n	8001044 <__udivmoddi4+0x64>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f106 30ff 	add.w	r0, r6, #4294967295
 8001036:	f080 811f 	bcs.w	8001278 <__udivmoddi4+0x298>
 800103a:	4299      	cmp	r1, r3
 800103c:	f240 811c 	bls.w	8001278 <__udivmoddi4+0x298>
 8001040:	3e02      	subs	r6, #2
 8001042:	4463      	add	r3, ip
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	b2a4      	uxth	r4, r4
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3310 	mls	r3, r8, r0, r3
 8001050:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001054:	fb00 f707 	mul.w	r7, r0, r7
 8001058:	42a7      	cmp	r7, r4
 800105a:	d90a      	bls.n	8001072 <__udivmoddi4+0x92>
 800105c:	eb1c 0404 	adds.w	r4, ip, r4
 8001060:	f100 33ff 	add.w	r3, r0, #4294967295
 8001064:	f080 810a 	bcs.w	800127c <__udivmoddi4+0x29c>
 8001068:	42a7      	cmp	r7, r4
 800106a:	f240 8107 	bls.w	800127c <__udivmoddi4+0x29c>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001076:	1be4      	subs	r4, r4, r7
 8001078:	2600      	movs	r6, #0
 800107a:	b11d      	cbz	r5, 8001084 <__udivmoddi4+0xa4>
 800107c:	40d4      	lsrs	r4, r2
 800107e:	2300      	movs	r3, #0
 8001080:	e9c5 4300 	strd	r4, r3, [r5]
 8001084:	4631      	mov	r1, r6
 8001086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108a:	428b      	cmp	r3, r1
 800108c:	d909      	bls.n	80010a2 <__udivmoddi4+0xc2>
 800108e:	2d00      	cmp	r5, #0
 8001090:	f000 80ef 	beq.w	8001272 <__udivmoddi4+0x292>
 8001094:	2600      	movs	r6, #0
 8001096:	e9c5 0100 	strd	r0, r1, [r5]
 800109a:	4630      	mov	r0, r6
 800109c:	4631      	mov	r1, r6
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	fab3 f683 	clz	r6, r3
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d14a      	bne.n	8001140 <__udivmoddi4+0x160>
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d302      	bcc.n	80010b4 <__udivmoddi4+0xd4>
 80010ae:	4282      	cmp	r2, r0
 80010b0:	f200 80f9 	bhi.w	80012a6 <__udivmoddi4+0x2c6>
 80010b4:	1a84      	subs	r4, r0, r2
 80010b6:	eb61 0303 	sbc.w	r3, r1, r3
 80010ba:	2001      	movs	r0, #1
 80010bc:	469e      	mov	lr, r3
 80010be:	2d00      	cmp	r5, #0
 80010c0:	d0e0      	beq.n	8001084 <__udivmoddi4+0xa4>
 80010c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80010c6:	e7dd      	b.n	8001084 <__udivmoddi4+0xa4>
 80010c8:	b902      	cbnz	r2, 80010cc <__udivmoddi4+0xec>
 80010ca:	deff      	udf	#255	; 0xff
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f040 8092 	bne.w	80011fa <__udivmoddi4+0x21a>
 80010d6:	eba1 010c 	sub.w	r1, r1, ip
 80010da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010de:	fa1f fe8c 	uxth.w	lr, ip
 80010e2:	2601      	movs	r6, #1
 80010e4:	0c20      	lsrs	r0, r4, #16
 80010e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80010ea:	fb07 1113 	mls	r1, r7, r3, r1
 80010ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010f2:	fb0e f003 	mul.w	r0, lr, r3
 80010f6:	4288      	cmp	r0, r1
 80010f8:	d908      	bls.n	800110c <__udivmoddi4+0x12c>
 80010fa:	eb1c 0101 	adds.w	r1, ip, r1
 80010fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8001102:	d202      	bcs.n	800110a <__udivmoddi4+0x12a>
 8001104:	4288      	cmp	r0, r1
 8001106:	f200 80cb 	bhi.w	80012a0 <__udivmoddi4+0x2c0>
 800110a:	4643      	mov	r3, r8
 800110c:	1a09      	subs	r1, r1, r0
 800110e:	b2a4      	uxth	r4, r4
 8001110:	fbb1 f0f7 	udiv	r0, r1, r7
 8001114:	fb07 1110 	mls	r1, r7, r0, r1
 8001118:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800111c:	fb0e fe00 	mul.w	lr, lr, r0
 8001120:	45a6      	cmp	lr, r4
 8001122:	d908      	bls.n	8001136 <__udivmoddi4+0x156>
 8001124:	eb1c 0404 	adds.w	r4, ip, r4
 8001128:	f100 31ff 	add.w	r1, r0, #4294967295
 800112c:	d202      	bcs.n	8001134 <__udivmoddi4+0x154>
 800112e:	45a6      	cmp	lr, r4
 8001130:	f200 80bb 	bhi.w	80012aa <__udivmoddi4+0x2ca>
 8001134:	4608      	mov	r0, r1
 8001136:	eba4 040e 	sub.w	r4, r4, lr
 800113a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800113e:	e79c      	b.n	800107a <__udivmoddi4+0x9a>
 8001140:	f1c6 0720 	rsb	r7, r6, #32
 8001144:	40b3      	lsls	r3, r6
 8001146:	fa22 fc07 	lsr.w	ip, r2, r7
 800114a:	ea4c 0c03 	orr.w	ip, ip, r3
 800114e:	fa20 f407 	lsr.w	r4, r0, r7
 8001152:	fa01 f306 	lsl.w	r3, r1, r6
 8001156:	431c      	orrs	r4, r3
 8001158:	40f9      	lsrs	r1, r7
 800115a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800115e:	fa00 f306 	lsl.w	r3, r0, r6
 8001162:	fbb1 f8f9 	udiv	r8, r1, r9
 8001166:	0c20      	lsrs	r0, r4, #16
 8001168:	fa1f fe8c 	uxth.w	lr, ip
 800116c:	fb09 1118 	mls	r1, r9, r8, r1
 8001170:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001174:	fb08 f00e 	mul.w	r0, r8, lr
 8001178:	4288      	cmp	r0, r1
 800117a:	fa02 f206 	lsl.w	r2, r2, r6
 800117e:	d90b      	bls.n	8001198 <__udivmoddi4+0x1b8>
 8001180:	eb1c 0101 	adds.w	r1, ip, r1
 8001184:	f108 3aff 	add.w	sl, r8, #4294967295
 8001188:	f080 8088 	bcs.w	800129c <__udivmoddi4+0x2bc>
 800118c:	4288      	cmp	r0, r1
 800118e:	f240 8085 	bls.w	800129c <__udivmoddi4+0x2bc>
 8001192:	f1a8 0802 	sub.w	r8, r8, #2
 8001196:	4461      	add	r1, ip
 8001198:	1a09      	subs	r1, r1, r0
 800119a:	b2a4      	uxth	r4, r4
 800119c:	fbb1 f0f9 	udiv	r0, r1, r9
 80011a0:	fb09 1110 	mls	r1, r9, r0, r1
 80011a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ac:	458e      	cmp	lr, r1
 80011ae:	d908      	bls.n	80011c2 <__udivmoddi4+0x1e2>
 80011b0:	eb1c 0101 	adds.w	r1, ip, r1
 80011b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011b8:	d26c      	bcs.n	8001294 <__udivmoddi4+0x2b4>
 80011ba:	458e      	cmp	lr, r1
 80011bc:	d96a      	bls.n	8001294 <__udivmoddi4+0x2b4>
 80011be:	3802      	subs	r0, #2
 80011c0:	4461      	add	r1, ip
 80011c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011c6:	fba0 9402 	umull	r9, r4, r0, r2
 80011ca:	eba1 010e 	sub.w	r1, r1, lr
 80011ce:	42a1      	cmp	r1, r4
 80011d0:	46c8      	mov	r8, r9
 80011d2:	46a6      	mov	lr, r4
 80011d4:	d356      	bcc.n	8001284 <__udivmoddi4+0x2a4>
 80011d6:	d053      	beq.n	8001280 <__udivmoddi4+0x2a0>
 80011d8:	b15d      	cbz	r5, 80011f2 <__udivmoddi4+0x212>
 80011da:	ebb3 0208 	subs.w	r2, r3, r8
 80011de:	eb61 010e 	sbc.w	r1, r1, lr
 80011e2:	fa01 f707 	lsl.w	r7, r1, r7
 80011e6:	fa22 f306 	lsr.w	r3, r2, r6
 80011ea:	40f1      	lsrs	r1, r6
 80011ec:	431f      	orrs	r7, r3
 80011ee:	e9c5 7100 	strd	r7, r1, [r5]
 80011f2:	2600      	movs	r6, #0
 80011f4:	4631      	mov	r1, r6
 80011f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011fa:	f1c2 0320 	rsb	r3, r2, #32
 80011fe:	40d8      	lsrs	r0, r3
 8001200:	fa0c fc02 	lsl.w	ip, ip, r2
 8001204:	fa21 f303 	lsr.w	r3, r1, r3
 8001208:	4091      	lsls	r1, r2
 800120a:	4301      	orrs	r1, r0
 800120c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001210:	fa1f fe8c 	uxth.w	lr, ip
 8001214:	fbb3 f0f7 	udiv	r0, r3, r7
 8001218:	fb07 3610 	mls	r6, r7, r0, r3
 800121c:	0c0b      	lsrs	r3, r1, #16
 800121e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001222:	fb00 f60e 	mul.w	r6, r0, lr
 8001226:	429e      	cmp	r6, r3
 8001228:	fa04 f402 	lsl.w	r4, r4, r2
 800122c:	d908      	bls.n	8001240 <__udivmoddi4+0x260>
 800122e:	eb1c 0303 	adds.w	r3, ip, r3
 8001232:	f100 38ff 	add.w	r8, r0, #4294967295
 8001236:	d22f      	bcs.n	8001298 <__udivmoddi4+0x2b8>
 8001238:	429e      	cmp	r6, r3
 800123a:	d92d      	bls.n	8001298 <__udivmoddi4+0x2b8>
 800123c:	3802      	subs	r0, #2
 800123e:	4463      	add	r3, ip
 8001240:	1b9b      	subs	r3, r3, r6
 8001242:	b289      	uxth	r1, r1
 8001244:	fbb3 f6f7 	udiv	r6, r3, r7
 8001248:	fb07 3316 	mls	r3, r7, r6, r3
 800124c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001250:	fb06 f30e 	mul.w	r3, r6, lr
 8001254:	428b      	cmp	r3, r1
 8001256:	d908      	bls.n	800126a <__udivmoddi4+0x28a>
 8001258:	eb1c 0101 	adds.w	r1, ip, r1
 800125c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001260:	d216      	bcs.n	8001290 <__udivmoddi4+0x2b0>
 8001262:	428b      	cmp	r3, r1
 8001264:	d914      	bls.n	8001290 <__udivmoddi4+0x2b0>
 8001266:	3e02      	subs	r6, #2
 8001268:	4461      	add	r1, ip
 800126a:	1ac9      	subs	r1, r1, r3
 800126c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001270:	e738      	b.n	80010e4 <__udivmoddi4+0x104>
 8001272:	462e      	mov	r6, r5
 8001274:	4628      	mov	r0, r5
 8001276:	e705      	b.n	8001084 <__udivmoddi4+0xa4>
 8001278:	4606      	mov	r6, r0
 800127a:	e6e3      	b.n	8001044 <__udivmoddi4+0x64>
 800127c:	4618      	mov	r0, r3
 800127e:	e6f8      	b.n	8001072 <__udivmoddi4+0x92>
 8001280:	454b      	cmp	r3, r9
 8001282:	d2a9      	bcs.n	80011d8 <__udivmoddi4+0x1f8>
 8001284:	ebb9 0802 	subs.w	r8, r9, r2
 8001288:	eb64 0e0c 	sbc.w	lr, r4, ip
 800128c:	3801      	subs	r0, #1
 800128e:	e7a3      	b.n	80011d8 <__udivmoddi4+0x1f8>
 8001290:	4646      	mov	r6, r8
 8001292:	e7ea      	b.n	800126a <__udivmoddi4+0x28a>
 8001294:	4620      	mov	r0, r4
 8001296:	e794      	b.n	80011c2 <__udivmoddi4+0x1e2>
 8001298:	4640      	mov	r0, r8
 800129a:	e7d1      	b.n	8001240 <__udivmoddi4+0x260>
 800129c:	46d0      	mov	r8, sl
 800129e:	e77b      	b.n	8001198 <__udivmoddi4+0x1b8>
 80012a0:	3b02      	subs	r3, #2
 80012a2:	4461      	add	r1, ip
 80012a4:	e732      	b.n	800110c <__udivmoddi4+0x12c>
 80012a6:	4630      	mov	r0, r6
 80012a8:	e709      	b.n	80010be <__udivmoddi4+0xde>
 80012aa:	4464      	add	r4, ip
 80012ac:	3802      	subs	r0, #2
 80012ae:	e742      	b.n	8001136 <__udivmoddi4+0x156>

080012b0 <__aeabi_idiv0>:
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop

080012b4 <aplicattion_A_Star>:
#include "A_Star.h"
#include <float.h>
#include <math.h>

//-----------------------------------------------Funciones para la implementacion de A Star------------------------------------------------------------------
file_cell_t* aplicattion_A_Star(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float start_x, float start_y, float goal_x, float goal_y) {
 80012b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b8:	f5ad 4dd5 	sub.w	sp, sp, #27264	; 0x6a80
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012c4:	f6a3 2374 	subw	r3, r3, #2676	; 0xa74
 80012c8:	6018      	str	r0, [r3, #0]
 80012ca:	4608      	mov	r0, r1
 80012cc:	4611      	mov	r1, r2
 80012ce:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012d2:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 80012d6:	ed83 0a00 	vstr	s0, [r3]
 80012da:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012de:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 80012e2:	edc3 0a00 	vstr	s1, [r3]
 80012e6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012ea:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 80012ee:	ed83 1a00 	vstr	s2, [r3]
 80012f2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012f6:	f6a3 2388 	subw	r3, r3, #2696	; 0xa88
 80012fa:	edc3 1a00 	vstr	s3, [r3]
 80012fe:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001302:	f6a3 2375 	subw	r3, r3, #2677	; 0xa75
 8001306:	4602      	mov	r2, r0
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800130e:	f6a3 2376 	subw	r3, r3, #2678	; 0xa76
 8001312:	460a      	mov	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
  //Variables
  file_cell_t *ptrFile;                           //Puntero a la ficha de la secuencia actual de A Star
  file_cell_t file_Open[100] = {0};               //Arreglo de fichas abiertas
 8001316:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800131a:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 800131e:	4618      	mov	r0, r3
 8001320:	f646 2340 	movw	r3, #27200	; 0x6a40
 8001324:	461a      	mov	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	f007 f8f0 	bl	800850c <memset>
  uint64_t file_Open_Availability = 0b1;          //Conjunto de bits que indica que fichas abiertas estan disponibles para la comparacion
 800132c:	f04f 0201 	mov.w	r2, #1
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	f507 41d5 	add.w	r1, r7, #27264	; 0x6a80
 8001338:	f101 0108 	add.w	r1, r1, #8
 800133c:	e9c1 2300 	strd	r2, r3, [r1]
  uint8_t bit_file_cell = 0;                      //bit de una ficha que indica su disponibilidad
 8001340:	2300      	movs	r3, #0
 8001342:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001346:	f102 0270 	add.w	r2, r2, #112	; 0x70
 800134a:	7013      	strb	r3, [r2, #0]
  uint8_t index_ptr = 0;                          //Indice de la ficha de la secuencia actual de A Star
 800134c:	2300      	movs	r3, #0
 800134e:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001352:	f102 0207 	add.w	r2, r2, #7
 8001356:	7013      	strb	r3, [r2, #0]
  float min_h;                                    //Valor minimo de la heuristica H
  uint8_t index_file_Open;                        //Indice de la ficha de la ficha abierta a crear

  //----------------Se crea la ficha inicial----------------
  //Se crea la ficha inicial
  file_Open[0].num_parent = 0;
 8001358:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800135c:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  file_Open[0].cost_g = 0.0f;
 8001366:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800136a:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  //Por medio de un puntero se asigna la ficha inicial
  ptrFile = &file_Open[0];
 8001376:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800137a:	3b6c      	subs	r3, #108	; 0x6c
 800137c:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001380:	f102 0214 	add.w	r2, r2, #20
 8001384:	6013      	str	r3, [r2, #0]
  
  // ------------- Se identifica la celda inicial -----------
  for (int i = 0; i < row; i++) 
 8001386:	2300      	movs	r3, #0
 8001388:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800138c:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e09d      	b.n	80014d0 <aplicattion_A_Star+0x21c>
  {
    for (int j = 0; j < colum; j++) 
 8001394:	2300      	movs	r3, #0
 8001396:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800139a:	f102 0274 	add.w	r2, r2, #116	; 0x74
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e07e      	b.n	80014a0 <aplicattion_A_Star+0x1ec>
    {
      if (grid[i][j].coor_x == start_x && grid[i][j].coor_y == start_y) 
 80013a2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80013a6:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 80013b8:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	441a      	add	r2, r3
 80013c0:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80013c4:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2158      	movs	r1, #88	; 0x58
 80013cc:	fb01 f303 	mul.w	r3, r1, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	3304      	adds	r3, #4
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80013dc:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 80013e0:	ed93 7a00 	vldr	s14, [r3]
 80013e4:	eeb4 7a67 	vcmp.f32	s14, s15
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	d14d      	bne.n	800148a <aplicattion_A_Star+0x1d6>
 80013ee:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80013f2:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80013fc:	fb02 f303 	mul.w	r3, r2, r3
 8001400:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 8001404:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	441a      	add	r2, r3
 800140c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001410:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2158      	movs	r1, #88	; 0x58
 8001418:	fb01 f303 	mul.w	r3, r1, r3
 800141c:	4413      	add	r3, r2
 800141e:	3308      	adds	r3, #8
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001428:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 800142c:	ed93 7a00 	vldr	s14, [r3]
 8001430:	eeb4 7a67 	vcmp.f32	s14, s15
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	d127      	bne.n	800148a <aplicattion_A_Star+0x1d6>
      {
        ptrFile->ptrCell_file = &grid[i][j];  
 800143a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800143e:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 8001450:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	441a      	add	r2, r3
 8001458:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800145c:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2158      	movs	r1, #88	; 0x58
 8001464:	fb01 f303 	mul.w	r3, r1, r3
 8001468:	441a      	add	r2, r3
 800146a:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800146e:	f103 0314 	add.w	r3, r3, #20
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	601a      	str	r2, [r3, #0]
        ptrFile->ptrCell_file->status  = OPEN;
 8001476:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800147a:	f103 0314 	add.w	r3, r3, #20
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        break;
 8001488:	e017      	b.n	80014ba <aplicattion_A_Star+0x206>
    for (int j = 0; j < colum; j++) 
 800148a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800148e:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800149a:	f102 0274 	add.w	r2, r2, #116	; 0x74
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80014a4:	f6a3 2376 	subw	r3, r3, #2678	; 0xa76
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80014ae:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	f6ff af74 	blt.w	80013a2 <aplicattion_A_Star+0xee>
  for (int i = 0; i < row; i++) 
 80014ba:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80014be:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80014ca:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80014d4:	f6a3 2375 	subw	r3, r3, #2677	; 0xa75
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80014de:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f6ff af55 	blt.w	8001394 <aplicattion_A_Star+0xe0>
    }
  }

  while (1) {
    // Inicializamos variables
    min_f = DBL_MAX;
 80014ea:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80014ee:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80014f2:	6013      	str	r3, [r2, #0]
    min_h = DBL_MAX;
 80014f4:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80014f8:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80014fc:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001500:	6013      	str	r3, [r2, #0]

    //---------------------Creacion de las diferentes fichas de las celdas vecinas-----------------
    for(uint8_t k = 0; k < 8; k++) 
 8001502:	2300      	movs	r3, #0
 8001504:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001508:	f102 0273 	add.w	r2, r2, #115	; 0x73
 800150c:	7013      	strb	r3, [r2, #0]
 800150e:	e1a4      	b.n	800185a <aplicattion_A_Star+0x5a6>
    {
      if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k] != NULL) 
 8001510:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001514:	f103 0314 	add.w	r3, r3, #20
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001520:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	3302      	adds	r3, #2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8188 	beq.w	8001844 <aplicattion_A_Star+0x590>
      {
        if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h != -1.0f && ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status < OPEN)
 8001534:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001538:	f103 0314 	add.w	r3, r3, #20
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001544:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	3302      	adds	r3, #2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001556:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800155a:	eef4 7a47 	vcmp.f32	s15, s14
 800155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001562:	f000 816f 	beq.w	8001844 <aplicattion_A_Star+0x590>
 8001566:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800156a:	f103 0314 	add.w	r3, r3, #20
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001576:	f103 0373 	add.w	r3, r3, #115	; 0x73
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	3302      	adds	r3, #2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001588:	2b00      	cmp	r3, #0
 800158a:	f040 815b 	bne.w	8001844 <aplicattion_A_Star+0x590>
        {
          //Se busca la posicion que ocupada la nueva ficha en la lista de fichas abiertas
          index_file_Open = search_position_file_Open(file_Open, file_Open_Availability);
 800158e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001592:	396c      	subs	r1, #108	; 0x6c
 8001594:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001598:	f103 0308 	add.w	r3, r3, #8
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	4608      	mov	r0, r1
 80015a2:	f000 fae2 	bl	8001b6a <search_position_file_Open>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80015ac:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 80015b0:	7013      	strb	r3, [r2, #0]
          //Se abre la celda
          ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status = OPEN;
 80015b2:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80015b6:	f103 0314 	add.w	r3, r3, #20
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80015c2:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	3302      	adds	r3, #2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          //Se crea la ficha
          file_Open[index_file_Open].ptrCell_file = ptrFile->ptrCell_file->neighbors.ptrCellMap[k];
 80015d6:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80015da:	f103 0314 	add.w	r3, r3, #20
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80015e6:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	f507 41d4 	add.w	r1, r7, #27136	; 0x6a00
 80015f0:	f101 016f 	add.w	r1, r1, #111	; 0x6f
 80015f4:	7809      	ldrb	r1, [r1, #0]
 80015f6:	3302      	adds	r3, #2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001602:	f6a3 206c 	subw	r0, r3, #2668	; 0xa6c
 8001606:	460b      	mov	r3, r1
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	440b      	add	r3, r1
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	4403      	add	r3, r0
 8001610:	601a      	str	r2, [r3, #0]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 8001612:	2300      	movs	r3, #0
 8001614:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001618:	f102 0272 	add.w	r2, r2, #114	; 0x72
 800161c:	7013      	strb	r3, [r2, #0]
 800161e:	e02d      	b.n	800167c <aplicattion_A_Star+0x3c8>
          {
            file_Open[index_file_Open].ptrCell_parent[u] = ptrFile->ptrCell_parent[u];
 8001620:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001624:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800162e:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 8001632:	7811      	ldrb	r1, [r2, #0]
 8001634:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001638:	f102 0272 	add.w	r2, r2, #114	; 0x72
 800163c:	7814      	ldrb	r4, [r2, #0]
 800163e:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001642:	f102 0214 	add.w	r2, r2, #20
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	6858      	ldr	r0, [r3, #4]
 800164e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001652:	f6a3 226c 	subw	r2, r3, #2668	; 0xa6c
 8001656:	460b      	mov	r3, r1
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	440b      	add	r3, r1
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4423      	add	r3, r4
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	6058      	str	r0, [r3, #4]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 8001666:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800166a:	f103 0372 	add.w	r3, r3, #114	; 0x72
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001676:	f102 0272 	add.w	r2, r2, #114	; 0x72
 800167a:	7013      	strb	r3, [r2, #0]
 800167c:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001680:	f103 0314 	add.w	r3, r3, #20
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800168a:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800168e:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d3c3      	bcc.n	8001620 <aplicattion_A_Star+0x36c>
          }
          file_Open[index_file_Open].ptrCell_parent[ptrFile->num_parent] = ptrFile->ptrCell_file;
 8001698:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800169c:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80016a6:	f103 0314 	add.w	r3, r3, #20
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80016b0:	461c      	mov	r4, r3
 80016b2:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80016b6:	f103 0314 	add.w	r3, r3, #20
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80016c2:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80016c6:	4613      	mov	r3, r2
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4423      	add	r3, r4
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	6058      	str	r0, [r3, #4]
          file_Open[index_file_Open].ptrCell_parent[(ptrFile->num_parent+1)] = NULL;
 80016d6:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80016da:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80016de:	781a      	ldrb	r2, [r3, #0]
 80016e0:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80016e4:	f103 0314 	add.w	r3, r3, #20
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80016ee:	1c58      	adds	r0, r3, #1
 80016f0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80016f4:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80016f8:	4613      	mov	r3, r2
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4403      	add	r3, r0
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	2200      	movs	r2, #0
 8001708:	605a      	str	r2, [r3, #4]
          file_Open[index_file_Open].num_parent = ptrFile->num_parent+1;
 800170a:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800170e:	f103 0314 	add.w	r3, r3, #20
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8001718:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800171c:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 8001720:	7812      	ldrb	r2, [r2, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	b2d8      	uxtb	r0, r3
 8001726:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800172a:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800172e:	4613      	mov	r3, r2
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	4413      	add	r3, r2
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	440b      	add	r3, r1
 8001738:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800173c:	4602      	mov	r2, r0
 800173e:	701a      	strb	r2, [r3, #0]
          file_Open[index_file_Open].cost_g = ptrFile->ptrCell_file->neighbors.distance_neigh[k]+ptrFile->cost_g;
 8001740:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001744:	f103 0314 	add.w	r3, r3, #20
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001750:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	330a      	adds	r3, #10
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	3304      	adds	r3, #4
 800175e:	ed93 7a00 	vldr	s14, [r3]
 8001762:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001766:	f103 0314 	add.w	r3, r3, #20
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8001770:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001774:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001782:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001786:	4613      	mov	r3, r2
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4413      	add	r3, r2
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	440b      	add	r3, r1
 8001790:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001794:	edc3 7a00 	vstr	s15, [r3]
          file_Open[index_file_Open].function_F = file_Open[index_file_Open].cost_g + ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h;
 8001798:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800179c:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80017a0:	781a      	ldrb	r2, [r3, #0]
 80017a2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80017a6:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80017aa:	4613      	mov	r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	4413      	add	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	440b      	add	r3, r1
 80017b4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80017b8:	ed93 7a00 	vldr	s14, [r3]
 80017bc:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80017c0:	f103 0314 	add.w	r3, r3, #20
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80017cc:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	3302      	adds	r3, #2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80017de:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80017e2:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ec:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80017f0:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80017f4:	4613      	mov	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	4413      	add	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	440b      	add	r3, r1
 80017fe:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001802:	edc3 7a00 	vstr	s15, [r3]
          //Indicacion de la disponibilidad de la ficha
          file_Open_Availability |= (0b1 << index_file_Open);
 8001806:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800180a:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	17da      	asrs	r2, r3, #31
 8001818:	469a      	mov	sl, r3
 800181a:	4693      	mov	fp, r2
 800181c:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001820:	f103 0308 	add.w	r3, r3, #8
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	ea42 010a 	orr.w	r1, r2, sl
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	ea43 030b 	orr.w	r3, r3, fp
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001838:	f102 0208 	add.w	r2, r2, #8
 800183c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001840:	e9c2 3400 	strd	r3, r4, [r2]
    for(uint8_t k = 0; k < 8; k++) 
 8001844:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001848:	f103 0373 	add.w	r3, r3, #115	; 0x73
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001854:	f102 0273 	add.w	r2, r2, #115	; 0x73
 8001858:	7013      	strb	r3, [r2, #0]
 800185a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800185e:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b07      	cmp	r3, #7
 8001866:	f67f ae53 	bls.w	8001510 <aplicattion_A_Star+0x25c>
      }
    }
    
    //-----------------Cerramos la ficha actual del puntero----------------------
    //indicamos el nuevo estado de la celda
    ptrFile->ptrCell_file->status = CLOSED;
 800186a:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800186e:	f103 0314 	add.w	r3, r3, #20
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    //Indicacion de la no disponibilidad de la ficha
    file_Open_Availability &=  ~(0b1 << index_ptr);
 800187c:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001880:	f103 0307 	add.w	r3, r3, #7
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2201      	movs	r2, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	17da      	asrs	r2, r3, #31
 8001890:	461d      	mov	r5, r3
 8001892:	4616      	mov	r6, r2
 8001894:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001898:	f103 0308 	add.w	r3, r3, #8
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	ea02 0105 	and.w	r1, r2, r5
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	4033      	ands	r3, r6
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80018ae:	f102 0208 	add.w	r2, r2, #8
 80018b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018b6:	e9c2 3400 	strd	r3, r4, [r2]
     
    //---------------- Comparación función F ---------------------
    for (uint8_t k = 0; k < 64; k++) {
 80018ba:	2300      	movs	r3, #0
 80018bc:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80018c0:	f102 0271 	add.w	r2, r2, #113	; 0x71
 80018c4:	7013      	strb	r3, [r2, #0]
 80018c6:	e101      	b.n	8001acc <aplicattion_A_Star+0x818>
      //Recorrido
      bit_file_cell = (file_Open_Availability >> k) & 0b1;
 80018c8:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80018cc:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80018d0:	7818      	ldrb	r0, [r3, #0]
 80018d2:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80018d6:	f103 0308 	add.w	r3, r3, #8
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f1c0 0420 	rsb	r4, r0, #32
 80018e2:	f1a0 0120 	sub.w	r1, r0, #32
 80018e6:	fa22 f800 	lsr.w	r8, r2, r0
 80018ea:	fa03 f404 	lsl.w	r4, r3, r4
 80018ee:	ea48 0804 	orr.w	r8, r8, r4
 80018f2:	fa23 f101 	lsr.w	r1, r3, r1
 80018f6:	ea48 0801 	orr.w	r8, r8, r1
 80018fa:	fa23 f900 	lsr.w	r9, r3, r0
 80018fe:	fa5f f388 	uxtb.w	r3, r8
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800190a:	f102 0270 	add.w	r2, r2, #112	; 0x70
 800190e:	7013      	strb	r3, [r2, #0]
      //Se el bit es un valor logico de 1 entonces la ficha esta disponible para su comparacion con las demas
      if(bit_file_cell==1 && file_Open[k].ptrCell_file != NULL)
 8001910:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001914:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b01      	cmp	r3, #1
 800191c:	f040 80cb 	bne.w	8001ab6 <aplicattion_A_Star+0x802>
 8001920:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001924:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001928:	781a      	ldrb	r2, [r3, #0]
 800192a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800192e:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001932:	4613      	mov	r3, r2
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	4413      	add	r3, r2
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	440b      	add	r3, r1
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80b9 	beq.w	8001ab6 <aplicattion_A_Star+0x802>
      {
        // Verificar que la función F sea menor al valor anterior
        if (file_Open[k].function_F < min_f) {
 8001944:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001948:	f103 0371 	add.w	r3, r3, #113	; 0x71
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001952:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4413      	add	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	440b      	add	r3, r1
 8001960:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800196c:	ed93 7a00 	vldr	s14, [r3]
 8001970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001978:	dd33      	ble.n	80019e2 <aplicattion_A_Star+0x72e>
          // Reemplazamos valores
          min_f = file_Open[k].function_F;
 800197a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800197e:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001988:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	4413      	add	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	440b      	add	r3, r1
 8001996:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80019a0:	6013      	str	r3, [r2, #0]
          min_h = file_Open[k].ptrCell_file->h;
 80019a2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80019a6:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80019b0:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80019b4:	4613      	mov	r3, r2
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	440b      	add	r3, r1
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c2:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80019c6:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80019ca:	6013      	str	r3, [r2, #0]
          index_ptr = k;
 80019cc:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80019d0:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80019da:	f102 0207 	add.w	r2, r2, #7
 80019de:	7013      	strb	r3, [r2, #0]
 80019e0:	e069      	b.n	8001ab6 <aplicattion_A_Star+0x802>
        }
        // Verificar que la función F sea igual al valor anterior, si es así se desempata con el valor h
        else if (file_Open[k].function_F == min_f) {
 80019e2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80019e6:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80019ea:	781a      	ldrb	r2, [r3, #0]
 80019ec:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80019f0:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80019f4:	4613      	mov	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	440b      	add	r3, r1
 80019fe:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001a0a:	ed93 7a00 	vldr	s14, [r3]
 8001a0e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	d14e      	bne.n	8001ab6 <aplicattion_A_Star+0x802>
          if (file_Open[k].ptrCell_file->h < min_h) {
 8001a18:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001a1c:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001a26:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4413      	add	r3, r2
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	440b      	add	r3, r1
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001a3a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001a3e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8001a42:	ed93 7a00 	vldr	s14, [r3]
 8001a46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4e:	dd32      	ble.n	8001ab6 <aplicattion_A_Star+0x802>
              // Reemplazamos valores
              min_f = file_Open[k].function_F;
 8001a50:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001a54:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001a5e:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001a62:	4613      	mov	r3, r2
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4413      	add	r3, r2
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001a76:	6013      	str	r3, [r2, #0]
              min_h = file_Open[k].ptrCell_file->h;
 8001a78:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001a7c:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001a86:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	440b      	add	r3, r1
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a98:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001a9c:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001aa0:	6013      	str	r3, [r2, #0]
              index_ptr = k;         
 8001aa2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001aa6:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001ab0:	f102 0207 	add.w	r2, r2, #7
 8001ab4:	7013      	strb	r3, [r2, #0]
    for (uint8_t k = 0; k < 64; k++) {
 8001ab6:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001aba:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001ac6:	f102 0271 	add.w	r2, r2, #113	; 0x71
 8001aca:	7013      	strb	r3, [r2, #0]
 8001acc:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001ad0:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b3f      	cmp	r3, #63	; 0x3f
 8001ad8:	f67f aef6 	bls.w	80018c8 <aplicattion_A_Star+0x614>
        }
      }
    }
    
    //--------------- Seleccionamos nueva ficha para el puntero--------------------
    ptrFile = &file_Open[index_ptr];
 8001adc:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001ae0:	f103 0307 	add.w	r3, r3, #7
 8001ae4:	7819      	ldrb	r1, [r3, #0]
 8001ae6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001aea:	3a6c      	subs	r2, #108	; 0x6c
 8001aec:	460b      	mov	r3, r1
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	440b      	add	r3, r1
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4413      	add	r3, r2
 8001af6:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001afa:	f102 0214 	add.w	r2, r2, #20
 8001afe:	6013      	str	r3, [r2, #0]
    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrFile->ptrCell_file->coor_x == goal_x && ptrFile->ptrCell_file->coor_y == goal_y) {
 8001b00:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001b04:	f103 0314 	add.w	r3, r3, #20
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b10:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001b14:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 8001b18:	ed93 7a00 	vldr	s14, [r3]
 8001b1c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	f47f ace1 	bne.w	80014ea <aplicattion_A_Star+0x236>
 8001b28:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001b2c:	f103 0314 	add.w	r3, r3, #20
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b38:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001b3c:	f6a3 2388 	subw	r3, r3, #2696	; 0xa88
 8001b40:	ed93 7a00 	vldr	s14, [r3]
 8001b44:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	d000      	beq.n	8001b50 <aplicattion_A_Star+0x89c>
    min_f = DBL_MAX;
 8001b4e:	e4cc      	b.n	80014ea <aplicattion_A_Star+0x236>
        break;
 8001b50:	bf00      	nop
    }
  }
  return ptrFile;
 8001b52:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001b56:	f103 0314 	add.w	r3, r3, #20
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f507 47d5 	add.w	r7, r7, #27264	; 0x6a80
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001b6a <search_position_file_Open>:


uint8_t search_position_file_Open(file_cell_t list_file[64], uint64_t avan_file)
{
 8001b6a:	b4f0      	push	{r4, r5, r6, r7}
 8001b6c:	b08a      	sub	sp, #40	; 0x28
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	e9c7 2300 	strd	r2, r3, [r7]
  //Variables
  uint8_t bit_list = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 110;
 8001b7a:	236e      	movs	r3, #110	; 0x6e
 8001b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  float value_f = 0;
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  //bucle para recorrer la lista de bits
  for(int i = 0; i<110; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	e01e      	b.n	8001bca <search_position_file_Open+0x60>
  {
    //Recorrido
    bit_list = (avan_file >> i) & 0b1;
 8001b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b90:	69f9      	ldr	r1, [r7, #28]
 8001b92:	f1c1 0620 	rsb	r6, r1, #32
 8001b96:	f1a1 0020 	sub.w	r0, r1, #32
 8001b9a:	fa22 f401 	lsr.w	r4, r2, r1
 8001b9e:	fa03 f606 	lsl.w	r6, r3, r6
 8001ba2:	4334      	orrs	r4, r6
 8001ba4:	fa23 f000 	lsr.w	r0, r3, r0
 8001ba8:	4304      	orrs	r4, r0
 8001baa:	fa23 f501 	lsr.w	r5, r3, r1
 8001bae:	b2e3      	uxtb	r3, r4
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	75fb      	strb	r3, [r7, #23]
    //Se comprueba el bit de correspondiente a la disponibilidad de la ficha
    if(bit_list  == 0)
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d103      	bne.n	8001bc4 <search_position_file_Open+0x5a>
    {
      index = i;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001bc2:	e005      	b.n	8001bd0 <search_position_file_Open+0x66>
  for(int i = 0; i<110; i++)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	2b6d      	cmp	r3, #109	; 0x6d
 8001bce:	dddd      	ble.n	8001b8c <search_position_file_Open+0x22>
    }
  }
  /*En caso que no se indico un valor diferente a 100 para el indice, se busca una ubicacion dentro 
  de la lista de fichas abiertas, seleccionando aquella ubicacion donde el valor de la funcion f
  sea la mayor*/
  if (index == 110)
 8001bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bd4:	2b6e      	cmp	r3, #110	; 0x6e
 8001bd6:	d132      	bne.n	8001c3e <search_position_file_Open+0xd4>
  {  
    //Recorrido del arreglo de fichas abiertas
    for(int k = 0; k<64; k++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	e02c      	b.n	8001c38 <search_position_file_Open+0xce>
    {  
      //Se busca el mayor valor de la funcion f
      if(list_file[k].ptrCell_file != NULL && list_file[k].function_F > value_f)
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	4413      	add	r3, r2
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	461a      	mov	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01e      	beq.n	8001c32 <search_position_file_Open+0xc8>
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	4413      	add	r3, r2
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 8001c08:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	d50d      	bpl.n	8001c32 <search_position_file_Open+0xc8>
      {
        value_f = list_file[k].function_F;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	4413      	add	r3, r2
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	461a      	mov	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4413      	add	r3, r2
 8001c26:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c2a:	623b      	str	r3, [r7, #32]
        index = k;
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(int k = 0; k<64; k++)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61bb      	str	r3, [r7, #24]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2b3f      	cmp	r3, #63	; 0x3f
 8001c3c:	ddcf      	ble.n	8001bde <search_position_file_Open+0x74>
      }
    }
  }
  
  return index;
 8001c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bcf0      	pop	{r4, r5, r6, r7}
 8001c4a:	4770      	bx	lr

08001c4c <heuristic_cell_map>:



//-----------------------------------------------Funciones calculo heuristica----------------------------------------------------------------
void heuristic_cell_map(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float goal_x, float goal_y){
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	460b      	mov	r3, r1
 8001c56:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c5a:	edc7 0a00 	vstr	s1, [r7]
 8001c5e:	72fb      	strb	r3, [r7, #11]
 8001c60:	4613      	mov	r3, r2
 8001c62:	72bb      	strb	r3, [r7, #10]
  //Recorrido por cada una de las celdas
  for (int i = 0; i < row; i++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e071      	b.n	8001d4e <heuristic_cell_map+0x102>
  {
    for (int j = 0; j < colum; j++) 
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	e067      	b.n	8001d40 <heuristic_cell_map+0xf4>
    {
      //Calculo heuristica
      if(grid[i][j].feature =='G')
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	441a      	add	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2158      	movs	r1, #88	; 0x58
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	334c      	adds	r3, #76	; 0x4c
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b47      	cmp	r3, #71	; 0x47
 8001c8e:	d110      	bne.n	8001cb2 <heuristic_cell_map+0x66>
      {
        grid[i][j].h = 0.0f;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	441a      	add	r2, r3
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2158      	movs	r1, #88	; 0x58
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3350      	adds	r3, #80	; 0x50
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e043      	b.n	8001d3a <heuristic_cell_map+0xee>
      }
      else if(grid[i][j].feature=='#')
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	441a      	add	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2158      	movs	r1, #88	; 0x58
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	334c      	adds	r3, #76	; 0x4c
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b23      	cmp	r3, #35	; 0x23
 8001cd0:	d10f      	bne.n	8001cf2 <heuristic_cell_map+0xa6>
      {
        grid[i][j].h = -1.0f;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	441a      	add	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	2158      	movs	r1, #88	; 0x58
 8001ce4:	fb01 f303 	mul.w	r3, r1, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	3350      	adds	r3, #80	; 0x50
 8001cec:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <heuristic_cell_map+0x114>)
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	e023      	b.n	8001d3a <heuristic_cell_map+0xee>
      }
      else
      {
        grid[i][j].h = heuristic_single_cell(&grid[i][j], goal_x, goal_y); 
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	441a      	add	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2158      	movs	r1, #88	; 0x58
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	18d1      	adds	r1, r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001d10:	fb02 f303 	mul.w	r3, r2, r3
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	18d4      	adds	r4, r2, r3
 8001d18:	edd7 0a00 	vldr	s1, [r7]
 8001d1c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d20:	4608      	mov	r0, r1
 8001d22:	f000 f821 	bl	8001d68 <heuristic_single_cell>
 8001d26:	eef0 7a40 	vmov.f32	s15, s0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2258      	movs	r2, #88	; 0x58
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	4423      	add	r3, r4
 8001d34:	3350      	adds	r3, #80	; 0x50
 8001d36:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < colum; j++) 
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	7abb      	ldrb	r3, [r7, #10]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	db93      	blt.n	8001c70 <heuristic_cell_map+0x24>
  for (int i = 0; i < row; i++)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	db89      	blt.n	8001c6a <heuristic_cell_map+0x1e>
      }   
    }
  }  
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd90      	pop	{r4, r7, pc}
 8001d60:	bf800000 	.word	0xbf800000
 8001d64:	00000000 	.word	0x00000000

08001d68 <heuristic_single_cell>:


float heuristic_single_cell(Cell_map_t *cell, float  goal_x, float goal_y)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	ed2d 8b02 	vpush	{d8}
 8001d6e:	b0a3      	sub	sp, #140	; 0x8c
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d78:	edc7 0a01 	vstr	s1, [r7, #4]
  //---------Definicion de variables--------
  //Variables del calculo heuristica
  Cell_map_t *ptrCell = cell;                 //Puntero a la celda actual
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  float total_distante = 0;                   //Distancia total entre la celda actual y la celda del gol
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  float dis[8];                               //Distancia entre la celda vecina y la recta
  uint8_t best_index;                         //Mejor indice de las celdas vecinas
  float min_distance;                         //Distancia minima entre la celda vecina y la recta
  //Variables Recta
  float A_recta;                              //Parametros de la recta
  float B_recta = -1.0f;
 8001d8a:	4be3      	ldr	r3, [pc, #908]	; (8002118 <heuristic_single_cell+0x3b0>)
 8001d8c:	673b      	str	r3, [r7, #112]	; 0x70
  float delta_x;                              //Diferencia la coordenada x entre la celda inicial y la final
  float mag_delta;                            //Magnitud del vector resultante de la diferencia de las coordenadas

  
   //---------------Calculos parametros de la recta-----------------
  delta_y = goal_y - cell->coor_y;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d94:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d9c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
  delta_x = goal_x - cell->coor_x;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dae:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
  mag_delta = sqrtf(delta_x * delta_x + delta_y * delta_y);
 8001db2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001db6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001dba:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001dbe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dca:	f00b fe2b 	bl	800da24 <sqrtf>
 8001dce:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
  A_recta =  delta_y / delta_x;
 8001dd2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001dd6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dde:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  C_recta = cell->coor_y - A_recta * cell->coor_x;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	edd3 6a01 	vldr	s13, [r3, #4]
 8001dee:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

  while (1)
  { 
    //Inicializamos variables
    best_index = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    min_distance = DBL_MAX;
 8001e04:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8001e08:	67bb      	str	r3, [r7, #120]	; 0x78

    //------------------Calculo parametros de cada una de las celdas vecinas--------------------
    for (uint8_t k = 0; k < 8; k++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001e10:	e0fc      	b.n	800200c <heuristic_single_cell+0x2a4>
    {
      //Verificamos que el puntero al vecino no es nulo
      if (ptrCell->neighbors.ptrCellMap[k] == NULL)
 8001e12:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e16:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d110      	bne.n	8001e48 <heuristic_single_cell+0xe0>
      {
        ang_between_vector[k] = -1.0f;
 8001e26:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	3388      	adds	r3, #136	; 0x88
 8001e2e:	443b      	add	r3, r7
 8001e30:	3b58      	subs	r3, #88	; 0x58
 8001e32:	4ab9      	ldr	r2, [pc, #740]	; (8002118 <heuristic_single_cell+0x3b0>)
 8001e34:	601a      	str	r2, [r3, #0]
        dis[k] = -1.0f;          
 8001e36:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	3388      	adds	r3, #136	; 0x88
 8001e3e:	443b      	add	r3, r7
 8001e40:	3b78      	subs	r3, #120	; 0x78
 8001e42:	4ab5      	ldr	r2, [pc, #724]	; (8002118 <heuristic_single_cell+0x3b0>)
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e0dc      	b.n	8002002 <heuristic_single_cell+0x29a>
      }
      else
      {
        //Calculo vector relativo
        rel_x = ptrCell->neighbors.ptrCellMap[k]->coor_x - ptrCell->coor_x;
 8001e48:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e50:	3302      	adds	r3, #2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e68:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        rel_y = ptrCell->neighbors.ptrCellMap[k]->coor_y - ptrCell->coor_y;
 8001e6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e70:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e74:	3302      	adds	r3, #2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e84:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        //Calculo parametros
        res = round(((rel_x*delta_x + rel_y*delta_y) / (ptrCell->neighbors.distance_neigh[k] * mag_delta)) * 10000) / 10000;
 8001e90:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001e94:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e9c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001ea0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea8:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001eac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001eb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001eb4:	330a      	adds	r3, #10
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3304      	adds	r3, #4
 8001ebc:	ed93 7a00 	vldr	s14, [r3]
 8001ec0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ecc:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800211c <heuristic_single_cell+0x3b4>
 8001ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed4:	ee17 0a90 	vmov	r0, s15
 8001ed8:	f7fe fb4e 	bl	8000578 <__aeabi_f2d>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	ec43 2b10 	vmov	d0, r2, r3
 8001ee4:	f00b fc2c 	bl	800d740 <round>
 8001ee8:	ec51 0b10 	vmov	r0, r1, d0
 8001eec:	a388      	add	r3, pc, #544	; (adr r3, 8002110 <heuristic_single_cell+0x3a8>)
 8001eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef2:	f7fe fcc3 	bl	800087c <__aeabi_ddiv>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7fe fe8b 	bl	8000c18 <__aeabi_d2f>
 8001f02:	4603      	mov	r3, r0
 8001f04:	653b      	str	r3, [r7, #80]	; 0x50
        ang_between_vector[k] = acos(res);
 8001f06:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001f08:	f7fe fb36 	bl	8000578 <__aeabi_f2d>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	ec43 2b10 	vmov	d0, r2, r3
 8001f14:	f00b fcb4 	bl	800d880 <acos>
 8001f18:	ec53 2b10 	vmov	r2, r3, d0
 8001f1c:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fe78 	bl	8000c18 <__aeabi_d2f>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	00a3      	lsls	r3, r4, #2
 8001f2c:	3388      	adds	r3, #136	; 0x88
 8001f2e:	443b      	add	r3, r7
 8001f30:	3b58      	subs	r3, #88	; 0x58
 8001f32:	601a      	str	r2, [r3, #0]
        if(A_recta != INFINITY && A_recta != -INFINITY)
 8001f34:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f38:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002120 <heuristic_single_cell+0x3b8>
 8001f3c:	eef4 7a47 	vcmp.f32	s15, s14
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	dc45      	bgt.n	8001fd2 <heuristic_single_cell+0x26a>
 8001f46:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f4a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002124 <heuristic_single_cell+0x3bc>
 8001f4e:	eef4 7a47 	vcmp.f32	s15, s14
 8001f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f56:	d43c      	bmi.n	8001fd2 <heuristic_single_cell+0x26a>
        {
          dis[k] = fabsf(A_recta * ptrCell->neighbors.ptrCellMap[k]->coor_x + B_recta * ptrCell->neighbors.ptrCellMap[k]->coor_y + C_recta) / sqrtf(A_recta * A_recta + 1);  
 8001f58:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001f5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f60:	3302      	adds	r3, #2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f6c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f74:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001f78:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f88:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f94:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9c:	eeb0 8ae7 	vabs.f32	s16, s15
 8001fa0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001fa4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb4:	f00b fd36 	bl	800da24 <sqrtf>
 8001fb8:	eeb0 7a40 	vmov.f32	s14, s0
 8001fbc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001fc0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	3388      	adds	r3, #136	; 0x88
 8001fc8:	443b      	add	r3, r7
 8001fca:	3b78      	subs	r3, #120	; 0x78
 8001fcc:	edc3 7a00 	vstr	s15, [r3]
 8001fd0:	e017      	b.n	8002002 <heuristic_single_cell+0x29a>
        }
        else
        {
          dis[k] = fabsf(ptrCell->neighbors.ptrCellMap[k]->coor_x-goal_x);
 8001fd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001fd6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001fda:	3302      	adds	r3, #2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001ff2:	eef0 7ae7 	vabs.f32	s15, s15
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	3388      	adds	r3, #136	; 0x88
 8001ffa:	443b      	add	r3, r7
 8001ffc:	3b78      	subs	r3, #120	; 0x78
 8001ffe:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t k = 0; k < 8; k++)
 8002002:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002006:	3301      	adds	r3, #1
 8002008:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800200c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002010:	2b07      	cmp	r3, #7
 8002012:	f67f aefe 	bls.w	8001e12 <heuristic_single_cell+0xaa>
      }            
    }

    //----------------Buscamos la celda vecina mas cercana a la recta y que este en la misma direccion que la recta---------------------
    //Recorremos los parametros para encontrar la mejor celda
    for (uint8_t k = 0; k < 8; k++)
 8002016:	2300      	movs	r3, #0
 8002018:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800201c:	e03f      	b.n	800209e <heuristic_single_cell+0x336>
    {
      //Verificamos que no sea -1
      if (ptrCell->neighbors.distance_neigh[k] != -1.0f)
 800201e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002022:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002026:	330a      	adds	r3, #10
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	3304      	adds	r3, #4
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002036:	eef4 7a47 	vcmp.f32	s15, s14
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	d029      	beq.n	8002094 <heuristic_single_cell+0x32c>
      {
        //Verificamos que la diferencia entre los angulos no sea superior a 45°
        if (ang_between_vector[k] <= 1.5f)
 8002040:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3388      	adds	r3, #136	; 0x88
 8002048:	443b      	add	r3, r7
 800204a:	3b58      	subs	r3, #88	; 0x58
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002054:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205c:	d81a      	bhi.n	8002094 <heuristic_single_cell+0x32c>
        {
          //Verificar que la distancia sea menor a la anterior menor distancia
          if (dis[k] < min_distance)
 800205e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	3388      	adds	r3, #136	; 0x88
 8002066:	443b      	add	r3, r7
 8002068:	3b78      	subs	r3, #120	; 0x78
 800206a:	edd3 7a00 	vldr	s15, [r3]
 800206e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	dd0b      	ble.n	8002094 <heuristic_single_cell+0x32c>
          {
            min_distance = dis[k];
 800207c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	3388      	adds	r3, #136	; 0x88
 8002084:	443b      	add	r3, r7
 8002086:	3b78      	subs	r3, #120	; 0x78
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	67bb      	str	r3, [r7, #120]	; 0x78
            best_index = k;
 800208c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002090:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    for (uint8_t k = 0; k < 8; k++)
 8002094:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002098:	3301      	adds	r3, #1
 800209a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800209e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80020a2:	2b07      	cmp	r3, #7
 80020a4:	d9bb      	bls.n	800201e <heuristic_single_cell+0x2b6>
      }        
    }

    
    //--------------Seleccionamos la celda vecina y sumamos su distancia--------------------
    total_distante = total_distante + ptrCell->neighbors.distance_neigh[best_index];
 80020a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80020aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020ae:	330a      	adds	r3, #10
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80020be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    ptrCell = ptrCell->neighbors.ptrCellMap[best_index];    
 80020c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80020ca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020ce:	3302      	adds	r3, #2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrCell->coor_x == goal_x && ptrCell->coor_y == goal_y)
 80020da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020de:	edd3 7a01 	vldr	s15, [r3, #4]
 80020e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80020e6:	eeb4 7a67 	vcmp.f32	s14, s15
 80020ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ee:	f47f ae86 	bne.w	8001dfe <heuristic_single_cell+0x96>
 80020f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80020fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80020fe:	eeb4 7a67 	vcmp.f32	s14, s15
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	d00f      	beq.n	8002128 <heuristic_single_cell+0x3c0>
    best_index = 0;
 8002108:	e679      	b.n	8001dfe <heuristic_single_cell+0x96>
 800210a:	bf00      	nop
 800210c:	f3af 8000 	nop.w
 8002110:	00000000 	.word	0x00000000
 8002114:	40c38800 	.word	0x40c38800
 8002118:	bf800000 	.word	0xbf800000
 800211c:	461c4000 	.word	0x461c4000
 8002120:	7f7fffff 	.word	0x7f7fffff
 8002124:	ff7fffff 	.word	0xff7fffff
    {
      break;
 8002128:	bf00      	nop
    }
  }

  return total_distante;
 800212a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800212e:	ee07 3a90 	vmov	s15, r3
}
 8002132:	eeb0 0a67 	vmov.f32	s0, s15
 8002136:	378c      	adds	r7, #140	; 0x8c
 8002138:	46bd      	mov	sp, r7
 800213a:	ecbd 8b02 	vpop	{d8}
 800213e:	bd90      	pop	{r4, r7, pc}

08002140 <configMPUAccel>:
//Importacio de librerias
#include "MPUAccel.h"
#include <SysTickDriver.h>

void configMPUAccel (MPUAccel_Handler_t *ptrMPUAccel){
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	73bb      	strb	r3, [r7, #14]

	//------------Verificamos comunicacion con el MPU----------------
	while(!rdy){
 8002150:	e004      	b.n	800215c <configMPUAccel+0x1c>

		rdy = WHOIAM(ptrMPUAccel);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f84f 	bl	80021f6 <WHOIAM>
 8002158:	4603      	mov	r3, r0
 800215a:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f7      	beq.n	8002152 <configMPUAccel+0x12>
	}

	//------------------Reiniciamos el MPU--------------------------
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, PWR_MGMT_l, 0x00);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	216b      	movs	r1, #107	; 0x6b
 800216a:	4618      	mov	r0, r3
 800216c:	f004 ffe7 	bl	800713e <i2c_WriteSingleRegister>
	//Pausa
	delay_ms(1);
 8002170:	2001      	movs	r0, #1
 8002172:	f005 fc79 	bl	8007a68 <delay_ms>

	//---------------Configuracion Accel----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	211c      	movs	r1, #28
 800217c:	4618      	mov	r0, r3
 800217e:	f004 ffad 	bl	80070dc <i2c_ReadSingleRegister>
 8002182:	4603      	mov	r3, r0
 8002184:	73bb      	strb	r3, [r7, #14]
	byte &= ~(0b00011000);
 8002186:	7bbb      	ldrb	r3, [r7, #14]
 8002188:	f023 0318 	bic.w	r3, r3, #24
 800218c:	73bb      	strb	r3, [r7, #14]
	//Pausa
	delay_ms(1);
 800218e:	2001      	movs	r0, #1
 8002190:	f005 fc6a 	bl	8007a68 <delay_ms>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL<<3));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6858      	ldr	r0, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	b25a      	sxtb	r2, r3
 80021a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	211c      	movs	r1, #28
 80021ae:	f004 ffc6 	bl	800713e <i2c_WriteSingleRegister>

	//---------------Configuracion Giro----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	211b      	movs	r1, #27
 80021b8:	4618      	mov	r0, r3
 80021ba:	f004 ff8f 	bl	80070dc <i2c_ReadSingleRegister>
 80021be:	4603      	mov	r3, r0
 80021c0:	73bb      	strb	r3, [r7, #14]
	byte &= ~(0b00011000);
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	f023 0318 	bic.w	r3, r3, #24
 80021c8:	73bb      	strb	r3, [r7, #14]
	//Pausa
	delay_ms(1);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f005 fc4c 	bl	8007a68 <delay_ms>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL <<3));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6858      	ldr	r0, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	b25a      	sxtb	r2, r3
 80021dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	211b      	movs	r1, #27
 80021ea:	f004 ffa8 	bl	800713e <i2c_WriteSingleRegister>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <WHOIAM>:



//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Handler_t *ptrMPUAccel){
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
	//Variables auxiliares
	uint8_t whoami = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	73bb      	strb	r3, [r7, #14]
	//leemos el registro WHO_AM_I correspondiente
	whoami =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, WHO_AM_I);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2175      	movs	r1, #117	; 0x75
 800220c:	4618      	mov	r0, r3
 800220e:	f004 ff65 	bl	80070dc <i2c_ReadSingleRegister>
 8002212:	4603      	mov	r3, r0
 8002214:	73fb      	strb	r3, [r7, #15]
	//verificamos la transacción
	whoami &= ~(0b10000001);
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800221c:	73fb      	strb	r3, [r7, #15]
	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	085b      	lsrs	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf14      	ite	ne
 8002228:	2301      	movne	r3, #1
 800222a:	2300      	moveq	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8002230:	7bbb      	ldrb	r3, [r7, #14]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	0000      	movs	r0, r0
 800223c:	0000      	movs	r0, r0
	...

08002240 <readMPU>:


//Funcion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
float readMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead, int16_t offset)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	70fb      	strb	r3, [r7, #3]
 800224c:	4613      	mov	r3, r2
 800224e:	803b      	strh	r3, [r7, #0]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	75fb      	strb	r3, [r7, #23]
	uint8_t address_L = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	75bb      	strb	r3, [r7, #22]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	81fb      	strh	r3, [r7, #14]
	uint16_t aux_L = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	81bb      	strh	r3, [r7, #12]
	int16_t   aux  = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	817b      	strh	r3, [r7, #10]
	float res  = 0;
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	2b05      	cmp	r3, #5
 800226e:	d82d      	bhi.n	80022cc <readMPU+0x8c>
 8002270:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <readMPU+0x38>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	08002291 	.word	0x08002291
 800227c:	0800229b 	.word	0x0800229b
 8002280:	080022a5 	.word	0x080022a5
 8002284:	080022af 	.word	0x080022af
 8002288:	080022b9 	.word	0x080022b9
 800228c:	080022c3 	.word	0x080022c3
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 8002290:	233b      	movs	r3, #59	; 0x3b
 8002292:	75fb      	strb	r3, [r7, #23]
 8002294:	233c      	movs	r3, #60	; 0x3c
 8002296:	75bb      	strb	r3, [r7, #22]
 8002298:	e019      	b.n	80022ce <readMPU+0x8e>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 800229a:	233d      	movs	r3, #61	; 0x3d
 800229c:	75fb      	strb	r3, [r7, #23]
 800229e:	233e      	movs	r3, #62	; 0x3e
 80022a0:	75bb      	strb	r3, [r7, #22]
 80022a2:	e014      	b.n	80022ce <readMPU+0x8e>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 80022a4:	233f      	movs	r3, #63	; 0x3f
 80022a6:	75fb      	strb	r3, [r7, #23]
 80022a8:	2340      	movs	r3, #64	; 0x40
 80022aa:	75bb      	strb	r3, [r7, #22]
 80022ac:	e00f      	b.n	80022ce <readMPU+0x8e>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 80022ae:	2343      	movs	r3, #67	; 0x43
 80022b0:	75fb      	strb	r3, [r7, #23]
 80022b2:	2344      	movs	r3, #68	; 0x44
 80022b4:	75bb      	strb	r3, [r7, #22]
 80022b6:	e00a      	b.n	80022ce <readMPU+0x8e>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 80022b8:	2345      	movs	r3, #69	; 0x45
 80022ba:	75fb      	strb	r3, [r7, #23]
 80022bc:	2346      	movs	r3, #70	; 0x46
 80022be:	75bb      	strb	r3, [r7, #22]
 80022c0:	e005      	b.n	80022ce <readMPU+0x8e>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 80022c2:	2347      	movs	r3, #71	; 0x47
 80022c4:	75fb      	strb	r3, [r7, #23]
 80022c6:	2348      	movs	r3, #72	; 0x48
 80022c8:	75bb      	strb	r3, [r7, #22]
 80022ca:	e000      	b.n	80022ce <readMPU+0x8e>
		default:{ break; }
 80022cc:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	7dfa      	ldrb	r2, [r7, #23]
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f004 ff00 	bl	80070dc <i2c_ReadSingleRegister>
 80022dc:	4603      	mov	r3, r0
 80022de:	81fb      	strh	r3, [r7, #14]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	7dba      	ldrb	r2, [r7, #22]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 fef7 	bl	80070dc <i2c_ReadSingleRegister>
 80022ee:	4603      	mov	r3, r0
 80022f0:	81bb      	strh	r3, [r7, #12]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = ((int16_t) ((aux_H << 8) | (aux_L))) - offset;
 80022f2:	89fb      	ldrh	r3, [r7, #14]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	b21a      	sxth	r2, r3
 80022f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b21b      	sxth	r3, r3
 8002300:	b29a      	uxth	r2, r3
 8002302:	883b      	ldrh	r3, [r7, #0]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	b29b      	uxth	r3, r3
 8002308:	817b      	strh	r3, [r7, #10]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje
	switch(elementRead)
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	2b02      	cmp	r3, #2
 800230e:	dc02      	bgt.n	8002316 <readMPU+0xd6>
 8002310:	2b00      	cmp	r3, #0
 8002312:	da05      	bge.n	8002320 <readMPU+0xe0>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
				default:{ break; }
			}
			break;
		}
		default:{ break; }
 8002314:	e0d6      	b.n	80024c4 <readMPU+0x284>
 8002316:	3b03      	subs	r3, #3
	switch(elementRead)
 8002318:	2b02      	cmp	r3, #2
 800231a:	f200 80d3 	bhi.w	80024c4 <readMPU+0x284>
 800231e:	e081      	b.n	8002424 <readMPU+0x1e4>
			switch (ptrMPUAccel->fullScaleACCEL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d87b      	bhi.n	8002420 <readMPU+0x1e0>
 8002328:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <readMPU+0xf0>)
 800232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232e:	bf00      	nop
 8002330:	08002341 	.word	0x08002341
 8002334:	08002379 	.word	0x08002379
 8002338:	080023b1 	.word	0x080023b1
 800233c:	080023e9 	.word	0x080023e9
				case ACCEL_2G :{res = (aux*9.77)/ACCEL_2G_SENS; break;}
 8002340:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f905 	bl	8000554 <__aeabi_i2d>
 800234a:	a363      	add	r3, pc, #396	; (adr r3, 80024d8 <readMPU+0x298>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fe f96a 	bl	8000628 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	4b5f      	ldr	r3, [pc, #380]	; (80024e0 <readMPU+0x2a0>)
 8002362:	f7fe fa8b 	bl	800087c <__aeabi_ddiv>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fc53 	bl	8000c18 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	e054      	b.n	8002422 <readMPU+0x1e2>
				case ACCEL_4G :{res = (aux*9.77)/ACCEL_4G_SENS; break;}
 8002378:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8e9 	bl	8000554 <__aeabi_i2d>
 8002382:	a355      	add	r3, pc, #340	; (adr r3, 80024d8 <readMPU+0x298>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f94e 	bl	8000628 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	4b52      	ldr	r3, [pc, #328]	; (80024e4 <readMPU+0x2a4>)
 800239a:	f7fe fa6f 	bl	800087c <__aeabi_ddiv>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7fe fc37 	bl	8000c18 <__aeabi_d2f>
 80023aa:	4603      	mov	r3, r0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	e038      	b.n	8002422 <readMPU+0x1e2>
				case ACCEL_8G :{res = (aux*9.77)/ACCEL_8G_SENS; break;}
 80023b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f8cd 	bl	8000554 <__aeabi_i2d>
 80023ba:	a347      	add	r3, pc, #284	; (adr r3, 80024d8 <readMPU+0x298>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f7fe f932 	bl	8000628 <__aeabi_dmul>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	4b45      	ldr	r3, [pc, #276]	; (80024e8 <readMPU+0x2a8>)
 80023d2:	f7fe fa53 	bl	800087c <__aeabi_ddiv>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f7fe fc1b 	bl	8000c18 <__aeabi_d2f>
 80023e2:	4603      	mov	r3, r0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	e01c      	b.n	8002422 <readMPU+0x1e2>
				case ACCEL_16G :{res = (aux*9.77)/ACCEL_16G_SENS; break;}
 80023e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f8b1 	bl	8000554 <__aeabi_i2d>
 80023f2:	a339      	add	r3, pc, #228	; (adr r3, 80024d8 <readMPU+0x298>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fe f916 	bl	8000628 <__aeabi_dmul>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	4b38      	ldr	r3, [pc, #224]	; (80024ec <readMPU+0x2ac>)
 800240a:	f7fe fa37 	bl	800087c <__aeabi_ddiv>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	f7fe fbff 	bl	8000c18 <__aeabi_d2f>
 800241a:	4603      	mov	r3, r0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	e000      	b.n	8002422 <readMPU+0x1e2>
				default:{ break; }
 8002420:	bf00      	nop
			break;
 8002422:	e050      	b.n	80024c6 <readMPU+0x286>
			switch (ptrMPUAccel->fullScaleGYRO)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d849      	bhi.n	80024c0 <readMPU+0x280>
 800242c:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <readMPU+0x1f4>)
 800242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002432:	bf00      	nop
 8002434:	08002445 	.word	0x08002445
 8002438:	08002465 	.word	0x08002465
 800243c:	08002485 	.word	0x08002485
 8002440:	080024a5 	.word	0x080024a5
				case GYRO_250 :{ res = aux/GYRO_250_SENS; break;}
 8002444:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002448:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <readMPU+0x2b0>)
 800244a:	fb82 1203 	smull	r1, r2, r2, r3
 800244e:	1152      	asrs	r2, r2, #5
 8002450:	17db      	asrs	r3, r3, #31
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	b21b      	sxth	r3, r3
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800245e:	edc7 7a04 	vstr	s15, [r7, #16]
 8002462:	e02e      	b.n	80024c2 <readMPU+0x282>
				case GYRO_500 :{ res = aux/GYRO_500_SENS; break;}
 8002464:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002468:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <readMPU+0x2b4>)
 800246a:	fb82 1203 	smull	r1, r2, r2, r3
 800246e:	1112      	asrs	r2, r2, #4
 8002470:	17db      	asrs	r3, r3, #31
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	b21b      	sxth	r3, r3
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800247e:	edc7 7a04 	vstr	s15, [r7, #16]
 8002482:	e01e      	b.n	80024c2 <readMPU+0x282>
				case GYRO_1000 :{ res = aux/GYRO_1000_SENS; break;}
 8002484:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002488:	4a1a      	ldr	r2, [pc, #104]	; (80024f4 <readMPU+0x2b4>)
 800248a:	fb82 1203 	smull	r1, r2, r2, r3
 800248e:	10d2      	asrs	r2, r2, #3
 8002490:	17db      	asrs	r3, r3, #31
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	b21b      	sxth	r3, r3
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800249e:	edc7 7a04 	vstr	s15, [r7, #16]
 80024a2:	e00e      	b.n	80024c2 <readMPU+0x282>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
 80024a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	da00      	bge.n	80024ae <readMPU+0x26e>
 80024ac:	330f      	adds	r3, #15
 80024ae:	111b      	asrs	r3, r3, #4
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ba:	edc7 7a04 	vstr	s15, [r7, #16]
 80024be:	e000      	b.n	80024c2 <readMPU+0x282>
				default:{ break; }
 80024c0:	bf00      	nop
			break;
 80024c2:	e000      	b.n	80024c6 <readMPU+0x286>
		default:{ break; }
 80024c4:	bf00      	nop
	}
	//Retornamos valor
	return res;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	ee07 3a90 	vmov	s15, r3
}
 80024cc:	eeb0 0a67 	vmov.f32	s0, s15
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	70a3d70a 	.word	0x70a3d70a
 80024dc:	40238a3d 	.word	0x40238a3d
 80024e0:	40d00000 	.word	0x40d00000
 80024e4:	40c00000 	.word	0x40c00000
 80024e8:	40b00000 	.word	0x40b00000
 80024ec:	40a00000 	.word	0x40a00000
 80024f0:	3e88cb3d 	.word	0x3e88cb3d
 80024f4:	3e0f83e1 	.word	0x3e0f83e1

080024f8 <readCalibrationMPU>:

//Funcion para en el modo de calibracion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
int16_t readCalibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]
	uint8_t address_L = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	73bb      	strb	r3, [r7, #14]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_L = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	817b      	strh	r3, [r7, #10]
	int16_t   aux  = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	813b      	strh	r3, [r7, #8]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	2b05      	cmp	r3, #5
 800251c:	d82c      	bhi.n	8002578 <readCalibrationMPU+0x80>
 800251e:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <readCalibrationMPU+0x2c>)
 8002520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002524:	0800253d 	.word	0x0800253d
 8002528:	08002547 	.word	0x08002547
 800252c:	08002551 	.word	0x08002551
 8002530:	0800255b 	.word	0x0800255b
 8002534:	08002565 	.word	0x08002565
 8002538:	0800256f 	.word	0x0800256f
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 800253c:	233b      	movs	r3, #59	; 0x3b
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	233c      	movs	r3, #60	; 0x3c
 8002542:	73bb      	strb	r3, [r7, #14]
 8002544:	e019      	b.n	800257a <readCalibrationMPU+0x82>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 8002546:	233d      	movs	r3, #61	; 0x3d
 8002548:	73fb      	strb	r3, [r7, #15]
 800254a:	233e      	movs	r3, #62	; 0x3e
 800254c:	73bb      	strb	r3, [r7, #14]
 800254e:	e014      	b.n	800257a <readCalibrationMPU+0x82>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 8002550:	233f      	movs	r3, #63	; 0x3f
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	2340      	movs	r3, #64	; 0x40
 8002556:	73bb      	strb	r3, [r7, #14]
 8002558:	e00f      	b.n	800257a <readCalibrationMPU+0x82>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 800255a:	2343      	movs	r3, #67	; 0x43
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	2344      	movs	r3, #68	; 0x44
 8002560:	73bb      	strb	r3, [r7, #14]
 8002562:	e00a      	b.n	800257a <readCalibrationMPU+0x82>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 8002564:	2345      	movs	r3, #69	; 0x45
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	2346      	movs	r3, #70	; 0x46
 800256a:	73bb      	strb	r3, [r7, #14]
 800256c:	e005      	b.n	800257a <readCalibrationMPU+0x82>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 800256e:	2347      	movs	r3, #71	; 0x47
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	2348      	movs	r3, #72	; 0x48
 8002574:	73bb      	strb	r3, [r7, #14]
 8002576:	e000      	b.n	800257a <readCalibrationMPU+0x82>
		default:{ break; }
 8002578:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f004 fdaa 	bl	80070dc <i2c_ReadSingleRegister>
 8002588:	4603      	mov	r3, r0
 800258a:	81bb      	strh	r3, [r7, #12]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	7bba      	ldrb	r2, [r7, #14]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f004 fda1 	bl	80070dc <i2c_ReadSingleRegister>
 800259a:	4603      	mov	r3, r0
 800259c:	817b      	strh	r3, [r7, #10]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = (int16_t) ((aux_H << 8) | (aux_L));
 800259e:	89bb      	ldrh	r3, [r7, #12]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	b21a      	sxth	r2, r3
 80025a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	813b      	strh	r3, [r7, #8]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje

	//Retornamos valor
	return aux;
 80025ac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <calibrationMPU>:


//Funcion para la calibracion de las mediciones realizadas
float calibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementCalibration)
{
 80025b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025bc:	b088      	sub	sp, #32
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	70fb      	strb	r3, [r7, #3]
	//Variables la ejecucion de la calibracion
	int64_t aux_sum = 0;
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t num_samples = 200;
 80025d2:	23c8      	movs	r3, #200	; 0xc8
 80025d4:	827b      	strh	r3, [r7, #18]
	float offset = 0;
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
	//Realizacion acumulacion de valores
	for (int i = 0; i < num_samples; i++)
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e017      	b.n	8002612 <calibrationMPU+0x5a>
	{
		//Lectura del registro respectivo y acumulacion
		aux_sum += readCalibrationMPU(ptrMPUAccel, elementCalibration);
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ff86 	bl	80024f8 <readCalibrationMPU>
 80025ec:	4603      	mov	r3, r0
 80025ee:	b21b      	sxth	r3, r3
 80025f0:	17da      	asrs	r2, r3, #31
 80025f2:	461c      	mov	r4, r3
 80025f4:	4615      	mov	r5, r2
 80025f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025fa:	eb12 0804 	adds.w	r8, r2, r4
 80025fe:	eb43 0905 	adc.w	r9, r3, r5
 8002602:	e9c7 8906 	strd	r8, r9, [r7, #24]
		//Pausa
		delay_ms(1);
 8002606:	2001      	movs	r0, #1
 8002608:	f005 fa2e 	bl	8007a68 <delay_ms>
	for (int i = 0; i < num_samples; i++)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3301      	adds	r3, #1
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	8a7b      	ldrh	r3, [r7, #18]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	429a      	cmp	r2, r3
 8002618:	dbe3      	blt.n	80025e2 <calibrationMPU+0x2a>
	}
	//Promedio del eje medido
	 offset = aux_sum/num_samples;
 800261a:	8a7b      	ldrh	r3, [r7, #18]
 800261c:	2200      	movs	r2, #0
 800261e:	469a      	mov	sl, r3
 8002620:	4693      	mov	fp, r2
 8002622:	4652      	mov	r2, sl
 8002624:	465b      	mov	r3, fp
 8002626:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800262a:	f7fe fc53 	bl	8000ed4 <__aeabi_ldivmod>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	f7fe fc0f 	bl	8000e58 <__aeabi_l2f>
 800263a:	4603      	mov	r3, r0
 800263c:	60fb      	str	r3, [r7, #12]
	//Retornar valor
	return offset;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	ee07 3a90 	vmov	s15, r3
}
 8002644:	eeb0 0a67 	vmov.f32	s0, s15
 8002648:	3720      	adds	r7, #32
 800264a:	46bd      	mov	sp, r7
 800264c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002650 <getAngle>:


//Funcion para calcular el nuevo angulo de uno de los ejes del girsocopio
float getAngle(MPUAccel_Handler_t *ptrMPUAccel, MPUTimerSample_t *timer, float ang_init, uint8_t axis, int16_t offset_Axis)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	ed87 0a01 	vstr	s0, [r7, #4]
 800265e:	4611      	mov	r1, r2
 8002660:	461a      	mov	r2, r3
 8002662:	460b      	mov	r3, r1
 8002664:	70fb      	strb	r3, [r7, #3]
 8002666:	4613      	mov	r3, r2
 8002668:	803b      	strh	r3, [r7, #0]
	//Lectura velocidad angular
	float w_Angular= readMPU(ptrMPUAccel, axis, offset_Axis);
 800266a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	4619      	mov	r1, r3
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff fde4 	bl	8002240 <readMPU>
 8002678:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	//Calculo del tiempo trascurrido tras el ultima leida
	uint64_t time_now = getTicksMs();
 800267c:	f005 f9e6 	bl	8007a4c <getTicksMs>
 8002680:	e9c7 0106 	strd	r0, r1, [r7, #24]
	timer->delta_timer =  time_now - timer->timer_prev;
 8002684:	8b39      	ldrh	r1, [r7, #24]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	b293      	uxth	r3, r2
 800268e:	1acb      	subs	r3, r1, r3
 8002690:	b29a      	uxth	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	811a      	strh	r2, [r3, #8]
	timer->timer_prev = time_now;
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269c:	e9c1 2300 	strd	r2, r3, [r1]
	//Calculo angulo
	float ang = ang_init + (w_Angular*timer->delta_timer)/1000;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	891b      	ldrh	r3, [r3, #8]
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026b4:	eddf 6a08 	vldr	s13, [pc, #32]	; 80026d8 <getAngle+0x88>
 80026b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80026c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c4:	edc7 7a05 	vstr	s15, [r7, #20]

	return ang;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	ee07 3a90 	vmov	s15, r3
}
 80026ce:	eeb0 0a67 	vmov.f32	s0, s15
 80026d2:	3728      	adds	r7, #40	; 0x28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	447a0000 	.word	0x447a0000

080026dc <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	631a      	str	r2, [r3, #48]	; 0x30
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80026f8:	eeb0 0a67 	vmov.f32	s0, s15
 80026fc:	4610      	mov	r0, r2
 80026fe:	f005 f927 	bl	8007950 <updateDuttyCyclePercentageFloat>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	4619      	mov	r1, r3
 8002740:	4610      	mov	r0, r2
 8002742:	f004 fad5 	bl	8006cf0 <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	4619      	mov	r1, r3
 8002758:	4610      	mov	r0, r2
 800275a:	f005 f833 	bl	80077c4 <statusPolarityPWM>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <build_Operation>:
#include <math.h>


//-------------------------Funcion para la definicion de operaciones--------------------------
void build_Operation(Parameters_Operation_t *prtList, Parameter_build_t *prtbuild, double finishline_x, double finishline_y)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08c      	sub	sp, #48	; 0x30
 800276c:	af00      	add	r7, sp, #0
 800276e:	6178      	str	r0, [r7, #20]
 8002770:	6139      	str	r1, [r7, #16]
 8002772:	ed87 0b02 	vstr	d0, [r7, #8]
 8002776:	ed87 1b00 	vstr	d1, [r7]
	//Definicion el vector director
	double delta[2] = {finishline_x - prtbuild->initline_x, finishline_y - prtbuild->initline_y};
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002784:	f7fd fd98 	bl	80002b8 <__aeabi_dsub>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002796:	e9d7 0100 	ldrd	r0, r1, [r7]
 800279a:	f7fd fd8d 	bl	80002b8 <__aeabi_dsub>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	//Calculo angululo entre vectores directores
	double grad_turn_res = calculed_ang_turn(prtbuild->delta_before, delta);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	3310      	adds	r3, #16
 80027aa:	f107 0218 	add.w	r2, r7, #24
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fac9 	bl	8002d48 <calculed_ang_turn>
 80027b6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	//condicional de cambio de angulo
	if(grad_turn_res == 0)
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027c6:	f7fe f997 	bl	8000af8 <__aeabi_dcmpeq>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00e      	beq.n	80027ee <build_Operation+0x86>
	{
		//agregar operacion de linea recta
		 add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027d6:	ed9f 2b28 	vldr	d2, [pc, #160]	; 8002878 <build_Operation+0x110>
 80027da:	ed97 1b00 	vldr	d1, [r7]
 80027de:	ed97 0b02 	vldr	d0, [r7, #8]
 80027e2:	2201      	movs	r2, #1
 80027e4:	4619      	mov	r1, r3
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f000 f84a 	bl	8002880 <add_Operation>
 80027ec:	e02b      	b.n	8002846 <build_Operation+0xde>
	}
	else
	{
		//Agregar operacion de rotacion
		prtbuild->number_operation++;
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027f4:	3301      	adds	r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, prtbuild->number_operation, TURN, 0, 0, grad_turn_res);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002804:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002808:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8002878 <build_Operation+0x110>
 800280c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8002878 <build_Operation+0x110>
 8002810:	2202      	movs	r2, #2
 8002812:	4619      	mov	r1, r3
 8002814:	6978      	ldr	r0, [r7, #20]
 8002816:	f000 f833 	bl	8002880 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002820:	3301      	adds	r3, #1
 8002822:	b2da      	uxtb	r2, r3
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002830:	ed9f 2b11 	vldr	d2, [pc, #68]	; 8002878 <build_Operation+0x110>
 8002834:	ed97 1b00 	vldr	d1, [r7]
 8002838:	ed97 0b02 	vldr	d0, [r7, #8]
 800283c:	2201      	movs	r2, #1
 800283e:	4619      	mov	r1, r3
 8002840:	6978      	ldr	r0, [r7, #20]
 8002842:	f000 f81d 	bl	8002880 <add_Operation>
	}
	//Se redefine los valores iniciales
	prtbuild->delta_before[0] = delta[0];
 8002846:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800284a:	6939      	ldr	r1, [r7, #16]
 800284c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtbuild->delta_before[1] = delta[1];
 8002850:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002854:	6939      	ldr	r1, [r7, #16]
 8002856:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prtbuild->initline_x = finishline_x;
 800285a:	6939      	ldr	r1, [r7, #16]
 800285c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002860:	e9c1 2300 	strd	r2, r3, [r1]
	prtbuild->initline_y = finishline_y;
 8002864:	6939      	ldr	r1, [r7, #16]
 8002866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800286a:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 800286e:	bf00      	nop
 8002870:	3730      	adds	r7, #48	; 0x30
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
	...

08002880 <add_Operation>:

void add_Operation(Parameters_Operation_t *prtList, uint8_t num_operation, uint8_t type_operation, double coor_x, double coor_y, double grad_turn)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	61f8      	str	r0, [r7, #28]
 8002888:	460b      	mov	r3, r1
 800288a:	ed87 0b04 	vstr	d0, [r7, #16]
 800288e:	ed87 1b02 	vstr	d1, [r7, #8]
 8002892:	ed87 2b00 	vstr	d2, [r7]
 8002896:	76fb      	strb	r3, [r7, #27]
 8002898:	4613      	mov	r3, r2
 800289a:	76bb      	strb	r3, [r7, #26]
	prtList[num_operation].operacion = type_operation;
 800289c:	7efb      	ldrb	r3, [r7, #27]
 800289e:	015b      	lsls	r3, r3, #5
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	4413      	add	r3, r2
 80028a4:	7eba      	ldrb	r2, [r7, #26]
 80028a6:	701a      	strb	r2, [r3, #0]
	prtList[num_operation].x_destination = coor_x;
 80028a8:	7efb      	ldrb	r3, [r7, #27]
 80028aa:	015b      	lsls	r3, r3, #5
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	18d1      	adds	r1, r2, r3
 80028b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prtList[num_operation].y_destination = coor_y;
 80028b8:	7efb      	ldrb	r3, [r7, #27]
 80028ba:	015b      	lsls	r3, r3, #5
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	18d1      	adds	r1, r2, r3
 80028c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtList[num_operation].grad_Rotative = grad_turn;
 80028c8:	7efb      	ldrb	r3, [r7, #27]
 80028ca:	015b      	lsls	r3, r3, #5
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	18d1      	adds	r1, r2, r3
 80028d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80028d8:	bf00      	nop
 80028da:	3724      	adds	r7, #36	; 0x24
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	0000      	movs	r0, r0
	...

080028e8 <change_position>:


//-----------------Funciones para definir los parametros de la poscion teorica--------------
void change_position(Parameters_Path_t *ptrParameterPath, int distance)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
	//Definimos la distancia
	 ptrParameterPath->line_Distance = distance;                  //[mm]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
	//Calculamos la posicicion
	double pot_x = ptrParameterPath->line_Distance*cos((ptrParameterPath->rotative_Grad*M_PI)/180);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fd fe29 	bl	8000554 <__aeabi_i2d>
 8002902:	4604      	mov	r4, r0
 8002904:	460d      	mov	r5, r1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fe22 	bl	8000554 <__aeabi_i2d>
 8002910:	a33b      	add	r3, pc, #236	; (adr r3, 8002a00 <change_position+0x118>)
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	f7fd fe87 	bl	8000628 <__aeabi_dmul>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <change_position+0x120>)
 8002928:	f7fd ffa8 	bl	800087c <__aeabi_ddiv>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	ec43 2b17 	vmov	d7, r2, r3
 8002934:	eeb0 0a47 	vmov.f32	s0, s14
 8002938:	eef0 0a67 	vmov.f32	s1, s15
 800293c:	f00a feac 	bl	800d698 <cos>
 8002940:	ec53 2b10 	vmov	r2, r3, d0
 8002944:	4620      	mov	r0, r4
 8002946:	4629      	mov	r1, r5
 8002948:	f7fd fe6e 	bl	8000628 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double pot_y = ptrParameterPath->line_Distance*sin((ptrParameterPath->rotative_Grad*M_PI)/180);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	4618      	mov	r0, r3
 800295a:	f7fd fdfb 	bl	8000554 <__aeabi_i2d>
 800295e:	4604      	mov	r4, r0
 8002960:	460d      	mov	r5, r1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fdf4 	bl	8000554 <__aeabi_i2d>
 800296c:	a324      	add	r3, pc, #144	; (adr r3, 8002a00 <change_position+0x118>)
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	f7fd fe59 	bl	8000628 <__aeabi_dmul>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <change_position+0x120>)
 8002984:	f7fd ff7a 	bl	800087c <__aeabi_ddiv>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	ec43 2b17 	vmov	d7, r2, r3
 8002990:	eeb0 0a47 	vmov.f32	s0, s14
 8002994:	eef0 0a67 	vmov.f32	s1, s15
 8002998:	f00a ff1a 	bl	800d7d0 <sin>
 800299c:	ec53 2b10 	vmov	r2, r3, d0
 80029a0:	4620      	mov	r0, r4
 80029a2:	4629      	mov	r1, r5
 80029a4:	f7fd fe40 	bl	8000628 <__aeabi_dmul>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
	//Guardamos la posicion del Goal como la posicion de Start
	ptrParameterPath->start_position_x = ptrParameterPath->goal_Position_x;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrParameterPath->start_position_y = ptrParameterPath->goal_Position_y;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x += pot_x;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80029ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029d2:	f7fd fc73 	bl	80002bc <__adddf3>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrParameterPath->goal_Position_y += pot_y;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80029e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ea:	f7fd fc67 	bl	80002bc <__adddf3>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 80029f8:	bf00      	nop
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002a00:	54442d18 	.word	0x54442d18
 8002a04:	400921fb 	.word	0x400921fb
 8002a08:	40668000 	.word	0x40668000
 8002a0c:	00000000 	.word	0x00000000

08002a10 <change_coordinates_position>:

void change_coordinates_position(Parameters_Path_t *ptrParameterPath, double coor_x, double coor_y)
{
 8002a10:	b5b0      	push	{r4, r5, r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6178      	str	r0, [r7, #20]
 8002a18:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a1c:	ed87 1b00 	vstr	d1, [r7]
	//Guardamos la posicion del Goal como la posicion de Start
	ptrParameterPath->start_position_x = ptrParameterPath->goal_Position_x;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002a26:	6979      	ldr	r1, [r7, #20]
 8002a28:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ptrParameterPath->start_position_y = ptrParameterPath->goal_Position_y;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a32:	6979      	ldr	r1, [r7, #20]
 8002a34:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x = coor_x;
 8002a38:	6979      	ldr	r1, [r7, #20]
 8002a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a3e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrParameterPath->goal_Position_y = coor_y;
 8002a42:	6979      	ldr	r1, [r7, #20]
 8002a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a48:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	//Definimos la distancia
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002a58:	f7fd fc2e 	bl	80002b8 <__aeabi_dsub>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	ec43 2b17 	vmov	d7, r2, r3
 8002a64:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8002ae0 <change_coordinates_position+0xd0>
 8002a68:	eeb0 0a47 	vmov.f32	s0, s14
 8002a6c:	eef0 0a67 	vmov.f32	s1, s15
 8002a70:	f00a ff3c 	bl	800d8ec <pow>
 8002a74:	ec55 4b10 	vmov	r4, r5, d0
			pow(ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y,2));;                  //[mm]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002a84:	f7fd fc18 	bl	80002b8 <__aeabi_dsub>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	ec43 2b17 	vmov	d7, r2, r3
 8002a90:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8002ae0 <change_coordinates_position+0xd0>
 8002a94:	eeb0 0a47 	vmov.f32	s0, s14
 8002a98:	eef0 0a67 	vmov.f32	s1, s15
 8002a9c:	f00a ff26 	bl	800d8ec <pow>
 8002aa0:	ec53 2b10 	vmov	r2, r3, d0
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	f7fd fc08 	bl	80002bc <__adddf3>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	ec43 2b17 	vmov	d7, r2, r3
 8002ab4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ab8:	eef0 0a67 	vmov.f32	s1, s15
 8002abc:	f00a ff86 	bl	800d9cc <sqrt>
 8002ac0:	ec53 2b10 	vmov	r2, r3, d0
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7fe f85e 	bl	8000b88 <__aeabi_d2iz>
 8002acc:	4602      	mov	r2, r0
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40

}
 8002ad2:	bf00      	nop
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8002ada:	bf00      	nop
 8002adc:	f3af 8000 	nop.w
 8002ae0:	00000000 	.word	0x00000000
 8002ae4:	40000000 	.word	0x40000000

08002ae8 <calculation_parameter_distance>:

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8002ae8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002aec:	b08a      	sub	sp, #40	; 0x28
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6178      	str	r0, [r7, #20]
	//Calculo del vector director de la recta
	double a = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002afe:	f7fd fbdb 	bl	80002b8 <__aeabi_dsub>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double b = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002b16:	f7fd fbcf 	bl	80002b8 <__aeabi_dsub>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->parametersStraight.magnitude_d = sqrt(pow(a,2)+pow(b,2));
 8002b22:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8002c30 <calculation_parameter_distance+0x148>
 8002b26:	ed97 0b08 	vldr	d0, [r7, #32]
 8002b2a:	f00a fedf 	bl	800d8ec <pow>
 8002b2e:	ec59 8b10 	vmov	r8, r9, d0
 8002b32:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8002c30 <calculation_parameter_distance+0x148>
 8002b36:	ed97 0b06 	vldr	d0, [r7, #24]
 8002b3a:	f00a fed7 	bl	800d8ec <pow>
 8002b3e:	ec53 2b10 	vmov	r2, r3, d0
 8002b42:	4640      	mov	r0, r8
 8002b44:	4649      	mov	r1, r9
 8002b46:	f7fd fbb9 	bl	80002bc <__adddf3>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	ec43 2b17 	vmov	d7, r2, r3
 8002b52:	eeb0 0a47 	vmov.f32	s0, s14
 8002b56:	eef0 0a67 	vmov.f32	s1, s15
 8002b5a:	f00a ff37 	bl	800d9cc <sqrt>
 8002b5e:	eeb0 7a40 	vmov.f32	s14, s0
 8002b62:	eef0 7a60 	vmov.f32	s15, s1
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->parametersStraight.proy_A = a;
 8002b6c:	6979      	ldr	r1, [r7, #20]
 8002b6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b72:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->parametersStraight.proy_B = b;
 8002b76:	6979      	ldr	r1, [r7, #20]
 8002b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b7c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->parametersStraight.proy_C = -1*a*ptrParameterPath->start_position_x - b*ptrParameterPath->start_position_y;
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002b92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b96:	f7fd fd47 	bl	8000628 <__aeabi_dmul>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4690      	mov	r8, r2
 8002ba0:	4699      	mov	r9, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bac:	f7fd fd3c 	bl	8000628 <__aeabi_dmul>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4640      	mov	r0, r8
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	f7fd fb7e 	bl	80002b8 <__aeabi_dsub>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	6979      	ldr	r1, [r7, #20]
 8002bc2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->parametersStraight.dis_point_A = b;
 8002bc6:	6979      	ldr	r1, [r7, #20]
 8002bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bcc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->parametersStraight.dis_point_B = -1*a;
 8002bd0:	6a3c      	ldr	r4, [r7, #32]
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->parametersStraight.dis_point_C = -1*b*ptrParameterPath->start_position_x + a*ptrParameterPath->start_position_y;
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bf4:	f7fd fd18 	bl	8000628 <__aeabi_dmul>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4614      	mov	r4, r2
 8002bfe:	461d      	mov	r5, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002c06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c0a:	f7fd fd0d 	bl	8000628 <__aeabi_dmul>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4620      	mov	r0, r4
 8002c14:	4629      	mov	r1, r5
 8002c16:	f7fd fb51 	bl	80002bc <__adddf3>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	6979      	ldr	r1, [r7, #20]
 8002c20:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8002c24:	bf00      	nop
 8002c26:	3728      	adds	r7, #40	; 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c2e:	bf00      	nop
 8002c30:	00000000 	.word	0x00000000
 8002c34:	40000000 	.word	0x40000000

08002c38 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double position_x, double position_y)
{
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6178      	str	r0, [r7, #20]
 8002c40:	ed87 0b02 	vstr	d0, [r7, #8]
 8002c44:	ed87 1b00 	vstr	d1, [r7]
	//Calculo
	double distance = -1*((ptrParameterPath->parametersStraight.dis_point_A*position_x + ptrParameterPath->parametersStraight.dis_point_B*position_y
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002c4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c52:	f7fd fce9 	bl	8000628 <__aeabi_dmul>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4614      	mov	r4, r2
 8002c5c:	461d      	mov	r5, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c68:	f7fd fcde 	bl	8000628 <__aeabi_dmul>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4620      	mov	r0, r4
 8002c72:	4629      	mov	r1, r5
 8002c74:	f7fd fb22 	bl	80002bc <__adddf3>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
			+ ptrParameterPath->parametersStraight.dis_point_C)/ptrParameterPath->parametersStraight.magnitude_d);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c86:	f7fd fb19 	bl	80002bc <__adddf3>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	f7fd fdf0 	bl	800087c <__aeabi_ddiv>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->parametersStraight.dis_point_A*position_x + ptrParameterPath->parametersStraight.dis_point_B*position_y
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	61b9      	str	r1, [r7, #24]
 8002ca4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ca8:	61fb      	str	r3, [r7, #28]
	//Retornar
	return distance;
 8002caa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cae:	ec43 2b17 	vmov	d7, r2, r3
}
 8002cb2:	eeb0 0a47 	vmov.f32	s0, s14
 8002cb6:	eef0 0a67 	vmov.f32	s1, s15
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bdb0      	pop	{r4, r5, r7, pc}

08002cc0 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double position_x, double position_y)
{
 8002cc0:	b5b0      	push	{r4, r5, r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6178      	str	r0, [r7, #20]
 8002cc8:	ed87 0b02 	vstr	d0, [r7, #8]
 8002ccc:	ed87 1b00 	vstr	d1, [r7]
	//Calculo
	double distance_Tra = (ptrParameterPath->parametersStraight.proy_A*position_x + ptrParameterPath->parametersStraight.proy_B*position_y
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002cd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cda:	f7fd fca5 	bl	8000628 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4614      	mov	r4, r2
 8002ce4:	461d      	mov	r5, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cf0:	f7fd fc9a 	bl	8000628 <__aeabi_dmul>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	f7fd fade 	bl	80002bc <__adddf3>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
			+ ptrParameterPath->parametersStraight.proy_C)/ptrParameterPath->parametersStraight.magnitude_d;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d0e:	f7fd fad5 	bl	80002bc <__adddf3>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4610      	mov	r0, r2
 8002d18:	4619      	mov	r1, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->parametersStraight.proy_A*position_x + ptrParameterPath->parametersStraight.proy_B*position_y
 8002d20:	f7fd fdac 	bl	800087c <__aeabi_ddiv>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 8002d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d30:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d34:	eeb0 0a47 	vmov.f32	s0, s14
 8002d38:	eef0 0a67 	vmov.f32	s1, s15
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bdb0      	pop	{r4, r5, r7, pc}
 8002d42:	0000      	movs	r0, r0
 8002d44:	0000      	movs	r0, r0
	...

08002d48 <calculed_ang_turn>:


//------------------------------Funciones auxiliares-----------------------------

double calculed_ang_turn(double vector_a[2], double vector_b[2])
{
 8002d48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d4c:	b08a      	sub	sp, #40	; 0x28
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
    //Calculo de los diferentes elementos
    double dot = vector_a[0]*vector_b[1]-vector_b[0]*vector_b[1];
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	3308      	adds	r3, #8
 8002d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d62:	f7fd fc61 	bl	8000628 <__aeabi_dmul>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4690      	mov	r8, r2
 8002d6c:	4699      	mov	r9, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	3308      	adds	r3, #8
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	f7fd fc54 	bl	8000628 <__aeabi_dmul>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4640      	mov	r0, r8
 8002d86:	4649      	mov	r1, r9
 8002d88:	f7fd fa96 	bl	80002b8 <__aeabi_dsub>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double magvector_a = sqrt(pow(vector_a[0],2)+pow(vector_a[1],2));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	ed93 7b00 	vldr	d7, [r3]
 8002d9a:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8002f18 <calculed_ang_turn+0x1d0>
 8002d9e:	eeb0 0a47 	vmov.f32	s0, s14
 8002da2:	eef0 0a67 	vmov.f32	s1, s15
 8002da6:	f00a fda1 	bl	800d8ec <pow>
 8002daa:	ec59 8b10 	vmov	r8, r9, d0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3308      	adds	r3, #8
 8002db2:	ed93 7b00 	vldr	d7, [r3]
 8002db6:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8002f18 <calculed_ang_turn+0x1d0>
 8002dba:	eeb0 0a47 	vmov.f32	s0, s14
 8002dbe:	eef0 0a67 	vmov.f32	s1, s15
 8002dc2:	f00a fd93 	bl	800d8ec <pow>
 8002dc6:	ec53 2b10 	vmov	r2, r3, d0
 8002dca:	4640      	mov	r0, r8
 8002dcc:	4649      	mov	r1, r9
 8002dce:	f7fd fa75 	bl	80002bc <__adddf3>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	ec43 2b17 	vmov	d7, r2, r3
 8002dda:	eeb0 0a47 	vmov.f32	s0, s14
 8002dde:	eef0 0a67 	vmov.f32	s1, s15
 8002de2:	f00a fdf3 	bl	800d9cc <sqrt>
 8002de6:	ed87 0b04 	vstr	d0, [r7, #16]
    double magvector_b = sqrt(pow(vector_b[0],2)+pow(vector_b[1],2));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	ed93 7b00 	vldr	d7, [r3]
 8002df0:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8002f18 <calculed_ang_turn+0x1d0>
 8002df4:	eeb0 0a47 	vmov.f32	s0, s14
 8002df8:	eef0 0a67 	vmov.f32	s1, s15
 8002dfc:	f00a fd76 	bl	800d8ec <pow>
 8002e00:	ec59 8b10 	vmov	r8, r9, d0
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	3308      	adds	r3, #8
 8002e08:	ed93 7b00 	vldr	d7, [r3]
 8002e0c:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8002f18 <calculed_ang_turn+0x1d0>
 8002e10:	eeb0 0a47 	vmov.f32	s0, s14
 8002e14:	eef0 0a67 	vmov.f32	s1, s15
 8002e18:	f00a fd68 	bl	800d8ec <pow>
 8002e1c:	ec53 2b10 	vmov	r2, r3, d0
 8002e20:	4640      	mov	r0, r8
 8002e22:	4649      	mov	r1, r9
 8002e24:	f7fd fa4a 	bl	80002bc <__adddf3>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	ec43 2b17 	vmov	d7, r2, r3
 8002e30:	eeb0 0a47 	vmov.f32	s0, s14
 8002e34:	eef0 0a67 	vmov.f32	s1, s15
 8002e38:	f00a fdc8 	bl	800d9cc <sqrt>
 8002e3c:	ed87 0b02 	vstr	d0, [r7, #8]
    double ang_between_vector = acos((vector_a[0]*vector_b[0]+vector_a[1]*vector_b[1])/(magvector_b*magvector_a));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4c:	f7fd fbec 	bl	8000628 <__aeabi_dmul>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4690      	mov	r8, r2
 8002e56:	4699      	mov	r9, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	3308      	adds	r3, #8
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	f7fd fbde 	bl	8000628 <__aeabi_dmul>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4640      	mov	r0, r8
 8002e72:	4649      	mov	r1, r9
 8002e74:	f7fd fa22 	bl	80002bc <__adddf3>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4690      	mov	r8, r2
 8002e7e:	4699      	mov	r9, r3
 8002e80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e88:	f7fd fbce 	bl	8000628 <__aeabi_dmul>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4640      	mov	r0, r8
 8002e92:	4649      	mov	r1, r9
 8002e94:	f7fd fcf2 	bl	800087c <__aeabi_ddiv>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	ec43 2b17 	vmov	d7, r2, r3
 8002ea0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ea4:	eef0 0a67 	vmov.f32	s1, s15
 8002ea8:	f00a fcea 	bl	800d880 <acos>
 8002eac:	ed87 0b08 	vstr	d0, [r7, #32]
    //conversion a grados
    ang_between_vector = (ang_between_vector*180)/M_PI;
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <calculed_ang_turn+0x1e0>)
 8002eb6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002eba:	f7fd fbb5 	bl	8000628 <__aeabi_dmul>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	a316      	add	r3, pc, #88	; (adr r3, 8002f20 <calculed_ang_turn+0x1d8>)
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	f7fd fcd6 	bl	800087c <__aeabi_ddiv>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //agregamos la direccion de giro
    if(dot<0){ ang_between_vector = -ang_between_vector;}
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ee4:	f7fd fe12 	bl	8000b0c <__aeabi_dcmplt>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <calculed_ang_turn+0x1b2>
 8002eee:	6a3c      	ldr	r4, [r7, #32]
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002ef6:	e9c7 4508 	strd	r4, r5, [r7, #32]
    //Retornar valor
    return ang_between_vector;
 8002efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002efe:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f02:	eeb0 0a47 	vmov.f32	s0, s14
 8002f06:	eef0 0a67 	vmov.f32	s1, s15
 8002f0a:	3728      	adds	r7, #40	; 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f12:	bf00      	nop
 8002f14:	f3af 8000 	nop.w
 8002f18:	00000000 	.word	0x00000000
 8002f1c:	40000000 	.word	0x40000000
 8002f20:	54442d18 	.word	0x54442d18
 8002f24:	400921fb 	.word	0x400921fb
 8002f28:	40668000 	.word	0x40668000

08002f2c <build_grid_map>:
int8_t ne_pos_x[8] = {-1, 0, 1, 1, 1, 0, -1, -1};
int8_t ne_pos_y[8] = {1, 1, 1, 0, -1, -1, -1, 0};

// Función para crear la malla de celdas
void build_grid_map(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float separation)
{  
 8002f2c:	b5b0      	push	{r4, r5, r7, lr}
 8002f2e:	b08e      	sub	sp, #56	; 0x38
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	460b      	mov	r3, r1
 8002f36:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f3a:	72fb      	strb	r3, [r7, #11]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	72bb      	strb	r3, [r7, #10]
    float rel_x;
    float rel_y;

    //---------------------Asignacion de informacion------------------------
    // Llenar la matriz de celdas con valores predeterminados
    for (int i = 0; i < row; i++) {
 8002f40:	2300      	movs	r3, #0
 8002f42:	637b      	str	r3, [r7, #52]	; 0x34
 8002f44:	e0fa      	b.n	800313c <build_grid_map+0x210>
        for (int j = 0; j < colum; j++) {
 8002f46:	2300      	movs	r3, #0
 8002f48:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4a:	e0ef      	b.n	800312c <build_grid_map+0x200>
            // Asignar valores a la celda
            grid[i][j].id[0] = 'A' + j;             // Asignar un identificador simple, 'A', 'B', ...
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f52:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8002f56:	fb01 f202 	mul.w	r2, r1, r2
 8002f5a:	68f9      	ldr	r1, [r7, #12]
 8002f5c:	440a      	add	r2, r1
 8002f5e:	3341      	adds	r3, #65	; 0x41
 8002f60:	b2d8      	uxtb	r0, r3
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	2158      	movs	r1, #88	; 0x58
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	701a      	strb	r2, [r3, #0]
            grid[i][j].id[1] = '0' + i;             // Asignar una cifra simple, '0', '1', '2', ...
 8002f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f76:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8002f7a:	fb01 f202 	mul.w	r2, r1, r2
 8002f7e:	68f9      	ldr	r1, [r7, #12]
 8002f80:	440a      	add	r2, r1
 8002f82:	3330      	adds	r3, #48	; 0x30
 8002f84:	b2d8      	uxtb	r0, r3
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	2158      	movs	r1, #88	; 0x58
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	3301      	adds	r3, #1
 8002f92:	4602      	mov	r2, r0
 8002f94:	701a      	strb	r2, [r3, #0]
            grid[i][j].index_row = i;               // Asignar el indice de la fila
 8002f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f98:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002f9c:	fb02 f303 	mul.w	r3, r2, r3
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	441a      	add	r2, r3
 8002fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa6:	b2d8      	uxtb	r0, r3
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	2158      	movs	r1, #88	; 0x58
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	701a      	strb	r2, [r3, #0]
            grid[i][j].index_col = j;               // Asignar el indice de la columna
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fba:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	441a      	add	r2, r3
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	b2d8      	uxtb	r0, r3
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	2158      	movs	r1, #88	; 0x58
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3303      	adds	r3, #3
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	701a      	strb	r2, [r3, #0]
            grid[i][j].coor_x = separation * j;     // Asignar la posición x de la celda
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe6:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	441a      	add	r2, r3
 8002ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	2158      	movs	r1, #88	; 0x58
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3304      	adds	r3, #4
 8003006:	edc3 7a00 	vstr	s15, [r3]
            grid[i][j].coor_y = separation * i;     // Asignar la posición y de la celda
 800300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003016:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	441a      	add	r2, r3
 8003022:	edd7 7a01 	vldr	s15, [r7, #4]
 8003026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	2158      	movs	r1, #88	; 0x58
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	3308      	adds	r3, #8
 8003036:	edc3 7a00 	vstr	s15, [r3]
            grid[i][j].status = 0;                  // Inicializar el estado de la celda;             
 800303a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003040:	fb02 f303 	mul.w	r3, r2, r3
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	441a      	add	r2, r3
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	2158      	movs	r1, #88	; 0x58
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	3354      	adds	r3, #84	; 0x54
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
            // Asignacion de vecinos a la celda actual
            for (uint8_t k = 0; k < 8; k++) {
 8003058:	2300      	movs	r3, #0
 800305a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800305e:	e05e      	b.n	800311e <build_grid_map+0x1f2>
                int8_t index_row_ne = i + ne_pos_x[k]; 
 8003060:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003064:	4a9a      	ldr	r2, [pc, #616]	; (80032d0 <build_grid_map+0x3a4>)
 8003066:	56d3      	ldrsb	r3, [r2, r3]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	b2db      	uxtb	r3, r3
 800306e:	4413      	add	r3, r2
 8003070:	b2db      	uxtb	r3, r3
 8003072:	75fb      	strb	r3, [r7, #23]
                int8_t index_colum_ne = j + ne_pos_y[k]; 
 8003074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003078:	4a96      	ldr	r2, [pc, #600]	; (80032d4 <build_grid_map+0x3a8>)
 800307a:	56d3      	ldrsb	r3, [r2, r3]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4413      	add	r3, r2
 8003084:	b2db      	uxtb	r3, r3
 8003086:	75bb      	strb	r3, [r7, #22]
                // Se evalua si el indice esta dentro de la malla
                if (index_row_ne >= 0 && index_row_ne < row && index_colum_ne >= 0 && index_colum_ne < colum) 
 8003088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800308c:	2b00      	cmp	r3, #0
 800308e:	db2e      	blt.n	80030ee <build_grid_map+0x1c2>
 8003090:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8003094:	7afb      	ldrb	r3, [r7, #11]
 8003096:	429a      	cmp	r2, r3
 8003098:	da29      	bge.n	80030ee <build_grid_map+0x1c2>
 800309a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db25      	blt.n	80030ee <build_grid_map+0x1c2>
 80030a2:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80030a6:	7abb      	ldrb	r3, [r7, #10]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	da20      	bge.n	80030ee <build_grid_map+0x1c2>
                {
                    grid[i][j].neighbors.ptrCellMap[k] = &grid[index_row_ne][index_colum_ne];
 80030ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030b0:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80030b4:	fb02 f303 	mul.w	r3, r2, r3
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	18d0      	adds	r0, r2, r3
 80030bc:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80030c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c2:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	4419      	add	r1, r3
 80030ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030d2:	2458      	movs	r4, #88	; 0x58
 80030d4:	fb04 f202 	mul.w	r2, r4, r2
 80030d8:	4402      	add	r2, r0
 80030da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030dc:	2416      	movs	r4, #22
 80030de:	fb04 f000 	mul.w	r0, r4, r0
 80030e2:	4403      	add	r3, r0
 80030e4:	3302      	adds	r3, #2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	e012      	b.n	8003114 <build_grid_map+0x1e8>
                } 
                else 
                {
                    grid[i][j].neighbors.ptrCellMap[k] = NULL;                    
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f0:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80030f4:	fb02 f303 	mul.w	r3, r2, r3
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	441a      	add	r2, r3
 80030fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003100:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003102:	2016      	movs	r0, #22
 8003104:	fb00 f101 	mul.w	r1, r0, r1
 8003108:	440b      	add	r3, r1
 800310a:	3302      	adds	r3, #2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	2200      	movs	r2, #0
 8003112:	605a      	str	r2, [r3, #4]
            for (uint8_t k = 0; k < 8; k++) {
 8003114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003118:	3301      	adds	r3, #1
 800311a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800311e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003122:	2b07      	cmp	r3, #7
 8003124:	d99c      	bls.n	8003060 <build_grid_map+0x134>
        for (int j = 0; j < colum; j++) {
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	3301      	adds	r3, #1
 800312a:	633b      	str	r3, [r7, #48]	; 0x30
 800312c:	7abb      	ldrb	r3, [r7, #10]
 800312e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003130:	429a      	cmp	r2, r3
 8003132:	f6ff af0b 	blt.w	8002f4c <build_grid_map+0x20>
    for (int i = 0; i < row; i++) {
 8003136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003138:	3301      	adds	r3, #1
 800313a:	637b      	str	r3, [r7, #52]	; 0x34
 800313c:	7afb      	ldrb	r3, [r7, #11]
 800313e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003140:	429a      	cmp	r2, r3
 8003142:	f6ff af00 	blt.w	8002f46 <build_grid_map+0x1a>
        }
    }
    
    //------------------Distancias entre celdas------------------------
    //Se calcula la distancia de cada celda vecina
    for (int i = 0; i < row; i++) {
 8003146:	2300      	movs	r3, #0
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
 800314a:	e0b6      	b.n	80032ba <build_grid_map+0x38e>
        for (int j = 0; j < colum; j++) {
 800314c:	2300      	movs	r3, #0
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
 8003150:	e0ab      	b.n	80032aa <build_grid_map+0x37e>
            for (uint8_t k = 0; k < 8; k++)
 8003152:	2300      	movs	r3, #0
 8003154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003158:	e09f      	b.n	800329a <build_grid_map+0x36e>
            {    
                if(grid[i][j].neighbors.ptrCellMap[k] != NULL)
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	441a      	add	r2, r3
 8003168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800316c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800316e:	2016      	movs	r0, #22
 8003170:	fb00 f101 	mul.w	r1, r0, r1
 8003174:	440b      	add	r3, r1
 8003176:	3302      	adds	r3, #2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d072      	beq.n	8003268 <build_grid_map+0x33c>
                {
                    //Calculo vector relativo
                    rel_x = grid[i][j].neighbors.ptrCellMap[k]->coor_x - grid[i][j].coor_x;
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	441a      	add	r2, r3
 8003190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003196:	2016      	movs	r0, #22
 8003198:	fb00 f101 	mul.w	r1, r0, r1
 800319c:	440b      	add	r3, r1
 800319e:	3302      	adds	r3, #2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80031b0:	fb02 f303 	mul.w	r3, r2, r3
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	441a      	add	r2, r3
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	2158      	movs	r1, #88	; 0x58
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	4413      	add	r3, r2
 80031c2:	3304      	adds	r3, #4
 80031c4:	edd3 7a00 	vldr	s15, [r3]
 80031c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031cc:	edc7 7a07 	vstr	s15, [r7, #28]
                    rel_y = grid[i][j].neighbors.ptrCellMap[k]->coor_y - grid[i][j].coor_y;
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d2:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	441a      	add	r2, r3
 80031de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031e4:	2016      	movs	r0, #22
 80031e6:	fb00 f101 	mul.w	r1, r0, r1
 80031ea:	440b      	add	r3, r1
 80031ec:	3302      	adds	r3, #2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80031fe:	fb02 f303 	mul.w	r3, r2, r3
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	441a      	add	r2, r3
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	2158      	movs	r1, #88	; 0x58
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3308      	adds	r3, #8
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321a:	edc7 7a06 	vstr	s15, [r7, #24]
                    //Ingresamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = sqrtf(rel_x * rel_x + rel_y * rel_y);
 800321e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003222:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003226:	edd7 7a06 	vldr	s15, [r7, #24]
 800322a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800322e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003234:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003238:	fb02 f303 	mul.w	r3, r2, r3
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	18d4      	adds	r4, r2, r3
 8003240:	f897 5023 	ldrb.w	r5, [r7, #35]	; 0x23
 8003244:	eeb0 0a67 	vmov.f32	s0, s15
 8003248:	f00a fbec 	bl	800da24 <sqrtf>
 800324c:	eef0 7a40 	vmov.f32	s15, s0
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	2216      	movs	r2, #22
 8003254:	fb02 f303 	mul.w	r3, r2, r3
 8003258:	442b      	add	r3, r5
 800325a:	330a      	adds	r3, #10
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4423      	add	r3, r4
 8003260:	3304      	adds	r3, #4
 8003262:	edc3 7a00 	vstr	s15, [r3]
 8003266:	e013      	b.n	8003290 <build_grid_map+0x364>
                }
                else
                {
                    //Ingreamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = -1.0f;
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	441a      	add	r2, r3
 8003276:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800327a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800327c:	2016      	movs	r0, #22
 800327e:	fb00 f101 	mul.w	r1, r0, r1
 8003282:	440b      	add	r3, r1
 8003284:	330a      	adds	r3, #10
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	3304      	adds	r3, #4
 800328c:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <build_grid_map+0x3ac>)
 800328e:	601a      	str	r2, [r3, #0]
            for (uint8_t k = 0; k < 8; k++)
 8003290:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003294:	3301      	adds	r3, #1
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800329e:	2b07      	cmp	r3, #7
 80032a0:	f67f af5b 	bls.w	800315a <build_grid_map+0x22e>
        for (int j = 0; j < colum; j++) {
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	3301      	adds	r3, #1
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
 80032aa:	7abb      	ldrb	r3, [r7, #10]
 80032ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ae:	429a      	cmp	r2, r3
 80032b0:	f6ff af4f 	blt.w	8003152 <build_grid_map+0x226>
    for (int i = 0; i < row; i++) {
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	3301      	adds	r3, #1
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ba:	7afb      	ldrb	r3, [r7, #11]
 80032bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032be:	429a      	cmp	r2, r3
 80032c0:	f6ff af44 	blt.w	800314c <build_grid_map+0x220>
                }                
            }
        }
    }
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3738      	adds	r7, #56	; 0x38
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bdb0      	pop	{r4, r5, r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000000 	.word	0x20000000
 80032d4:	20000008 	.word	0x20000008
 80032d8:	bf800000 	.word	0xbf800000
 80032dc:	00000000 	.word	0x00000000

080032e0 <main>:
uint8_t counterRecepcion = 0;                    //Variable para la posicion del arrelgo
char bufferRecepcion[64] = {0};                  //Arreglo que almacena el comando ingresado


int main(void)
{
 80032e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e4:	b088      	sub	sp, #32
 80032e6:	af02      	add	r7, sp, #8
	//Definicion de variables
	float distance_recta = 0;
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
	float sampling_timer = 0;
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	613b      	str	r3, [r7, #16]
	float distance_c = 0;
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]

	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 80032fa:	2364      	movs	r3, #100	; 0x64
 80032fc:	72fb      	strb	r3, [r7, #11]
	configPLL(clock);
 80032fe:	7afb      	ldrb	r3, [r7, #11]
 8003300:	4618      	mov	r0, r3
 8003302:	f003 ff3f 	bl	8007184 <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 8003306:	f000 fb6d 	bl	80039e4 <int_Hardware>
	//Activamos el Systick
	config_SysTick_ms();
 800330a:	f004 fb65 	bl	80079d8 <config_SysTick_ms>
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 800330e:	4b96      	ldr	r3, [pc, #600]	; (8003568 <main+0x288>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	4a94      	ldr	r2, [pc, #592]	; (8003568 <main+0x288>)
 8003316:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800331a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 800331e:	f000 fd2f 	bl	8003d80 <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 8003322:	2101      	movs	r1, #1
 8003324:	4891      	ldr	r0, [pc, #580]	; (800356c <main+0x28c>)
 8003326:	f003 fce3 	bl	8006cf0 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 800332a:	2101      	movs	r1, #1
 800332c:	4890      	ldr	r0, [pc, #576]	; (8003570 <main+0x290>)
 800332e:	f003 fcdf 	bl	8006cf0 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 8003332:	2101      	movs	r1, #1
 8003334:	488f      	ldr	r0, [pc, #572]	; (8003574 <main+0x294>)
 8003336:	f003 fcdb 	bl	8006cf0 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 800333a:	2101      	movs	r1, #1
 800333c:	488e      	ldr	r0, [pc, #568]	; (8003578 <main+0x298>)
 800333e:	f003 fcd7 	bl	8006cf0 <GPIO_writePin>
	int_Config_Motor();
 8003342:	f000 fd3b 	bl	8003dbc <int_Config_Motor>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 8003346:	4b8d      	ldr	r3, [pc, #564]	; (800357c <main+0x29c>)
 8003348:	4a8d      	ldr	r2, [pc, #564]	; (8003580 <main+0x2a0>)
 800334a:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = ((M_PI*DL)/(100*Ce));  //[mm/cuentas]
 800334c:	4b8d      	ldr	r3, [pc, #564]	; (8003584 <main+0x2a4>)
 800334e:	4a8e      	ldr	r2, [pc, #568]	; (8003588 <main+0x2a8>)
 8003350:	601a      	str	r2, [r3, #0]
	cm_R =	((M_PI*DR)/(100*Ce));  //[mm/cuentas]
 8003352:	4b8e      	ldr	r3, [pc, #568]	; (800358c <main+0x2ac>)
 8003354:	4a8e      	ldr	r2, [pc, #568]	; (8003590 <main+0x2b0>)
 8003356:	601a      	str	r2, [r3, #0]
	//Calculamos el setpoint
	velSetPoint = (0.00169*duttySetPoint + 0.0619);
 8003358:	4b8e      	ldr	r3, [pc, #568]	; (8003594 <main+0x2b4>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd f8f9 	bl	8000554 <__aeabi_i2d>
 8003362:	a37d      	add	r3, pc, #500	; (adr r3, 8003558 <main+0x278>)
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f7fd f95e 	bl	8000628 <__aeabi_dmul>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	a37a      	add	r3, pc, #488	; (adr r3, 8003560 <main+0x280>)
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f7fc ff9f 	bl	80002bc <__adddf3>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	f7fd fc47 	bl	8000c18 <__aeabi_d2f>
 800338a:	4603      	mov	r3, r0
 800338c:	4a82      	ldr	r2, [pc, #520]	; (8003598 <main+0x2b8>)
 800338e:	6013      	str	r3, [r2, #0]

	//--------------------------Configuramos inicia el MPU----------------------
	//Configuracion MPU
	int_MPU();
 8003390:	f000 fd00 	bl	8003d94 <int_MPU>
	//Calibracion del eje Z del giroscopio
	gyro_offset = calibrationMPU(&handler_MPUAccel_MPU6050, CAL_GYRO_Z);
 8003394:	2105      	movs	r1, #5
 8003396:	4881      	ldr	r0, [pc, #516]	; (800359c <main+0x2bc>)
 8003398:	f7ff f90e 	bl	80025b8 <calibrationMPU>
 800339c:	eef0 7a40 	vmov.f32	s15, s0
 80033a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033a4:	ee17 3a90 	vmov	r3, s15
 80033a8:	b21a      	sxth	r2, r3
 80033aa:	4b7d      	ldr	r3, [pc, #500]	; (80035a0 <main+0x2c0>)
 80033ac:	801a      	strh	r2, [r3, #0]


	while(1)
	{
		//-----------------------------Comandos------------------------------------
		if(commandComplete==1)
 80033ae:	4b7d      	ldr	r3, [pc, #500]	; (80035a4 <main+0x2c4>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d106      	bne.n	80033c4 <main+0xe4>
		{
			runCommand(bufferRecepcion);
 80033b6:	487c      	ldr	r0, [pc, #496]	; (80035a8 <main+0x2c8>)
 80033b8:	f000 ffce 	bl	8004358 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 80033bc:	4b79      	ldr	r3, [pc, #484]	; (80035a4 <main+0x2c4>)
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e000      	b.n	80033c6 <main+0xe6>
		}
		else
		{ __NOP(); }
 80033c4:	bf00      	nop


		//----------------------------A-Star------------------------------------
		if(flag_A_Star==1 && string_aStar_Complete==1)
 80033c6:	4b79      	ldr	r3, [pc, #484]	; (80035ac <main+0x2cc>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d158      	bne.n	8003480 <main+0x1a0>
 80033ce:	4b78      	ldr	r3, [pc, #480]	; (80035b0 <main+0x2d0>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d154      	bne.n	8003480 <main+0x1a0>
		{
		 //-------------Separar el String en los parametros del grid m-------------
		  Separate_parameters(grid_map, bufferParameterStringGM);
 80033d6:	4977      	ldr	r1, [pc, #476]	; (80035b4 <main+0x2d4>)
 80033d8:	4877      	ldr	r0, [pc, #476]	; (80035b8 <main+0x2d8>)
 80033da:	f001 f97d 	bl	80046d8 <Separate_parameters>
		  //---------Creacion de la malla con cada una de sus celdas-----------
		  build_grid_map(grid_map, grid_map_row, grid_map_colum, cell_separation);
 80033de:	4b77      	ldr	r3, [pc, #476]	; (80035bc <main+0x2dc>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	4a77      	ldr	r2, [pc, #476]	; (80035c0 <main+0x2e0>)
 80033e4:	7812      	ldrb	r2, [r2, #0]
 80033e6:	4977      	ldr	r1, [pc, #476]	; (80035c4 <main+0x2e4>)
 80033e8:	edd1 7a00 	vldr	s15, [r1]
 80033ec:	eeb0 0a67 	vmov.f32	s0, s15
 80033f0:	4619      	mov	r1, r3
 80033f2:	4871      	ldr	r0, [pc, #452]	; (80035b8 <main+0x2d8>)
 80033f4:	f7ff fd9a 	bl	8002f2c <build_grid_map>
		  //-------Calculo de la heuristica de la celda de acuerdo a la posicion objetivo-------
		  heuristic_cell_map(grid_map, grid_map_row, grid_map_colum, goal_x, goal_y);
 80033f8:	4b70      	ldr	r3, [pc, #448]	; (80035bc <main+0x2dc>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	4a70      	ldr	r2, [pc, #448]	; (80035c0 <main+0x2e0>)
 80033fe:	7812      	ldrb	r2, [r2, #0]
 8003400:	4971      	ldr	r1, [pc, #452]	; (80035c8 <main+0x2e8>)
 8003402:	edd1 7a00 	vldr	s15, [r1]
 8003406:	4971      	ldr	r1, [pc, #452]	; (80035cc <main+0x2ec>)
 8003408:	ed91 7a00 	vldr	s14, [r1]
 800340c:	eef0 0a47 	vmov.f32	s1, s14
 8003410:	eeb0 0a67 	vmov.f32	s0, s15
 8003414:	4619      	mov	r1, r3
 8003416:	4868      	ldr	r0, [pc, #416]	; (80035b8 <main+0x2d8>)
 8003418:	f7fe fc18 	bl	8001c4c <heuristic_cell_map>
		  //------------------Aplicacion del algoritmo A star------------------
		  file_path = aplicattion_A_Star(grid_map, grid_map_row, grid_map_colum, start_x, start_y, goal_x, goal_y);
 800341c:	4b67      	ldr	r3, [pc, #412]	; (80035bc <main+0x2dc>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	4a67      	ldr	r2, [pc, #412]	; (80035c0 <main+0x2e0>)
 8003422:	7812      	ldrb	r2, [r2, #0]
 8003424:	496a      	ldr	r1, [pc, #424]	; (80035d0 <main+0x2f0>)
 8003426:	edd1 7a00 	vldr	s15, [r1]
 800342a:	496a      	ldr	r1, [pc, #424]	; (80035d4 <main+0x2f4>)
 800342c:	ed91 7a00 	vldr	s14, [r1]
 8003430:	4965      	ldr	r1, [pc, #404]	; (80035c8 <main+0x2e8>)
 8003432:	edd1 6a00 	vldr	s13, [r1]
 8003436:	4965      	ldr	r1, [pc, #404]	; (80035cc <main+0x2ec>)
 8003438:	ed91 6a00 	vldr	s12, [r1]
 800343c:	eef0 1a46 	vmov.f32	s3, s12
 8003440:	eeb0 1a66 	vmov.f32	s2, s13
 8003444:	eef0 0a47 	vmov.f32	s1, s14
 8003448:	eeb0 0a67 	vmov.f32	s0, s15
 800344c:	4619      	mov	r1, r3
 800344e:	485a      	ldr	r0, [pc, #360]	; (80035b8 <main+0x2d8>)
 8003450:	f7fd ff30 	bl	80012b4 <aplicattion_A_Star>
 8003454:	4603      	mov	r3, r0
 8003456:	4a60      	ldr	r2, [pc, #384]	; (80035d8 <main+0x2f8>)
 8003458:	6013      	str	r3, [r2, #0]
		  //-----------------Impresion de la ruta encontrada--------------------
		  send_path(file_path, grid_map, grid_map_colum, grid_map_row);
 800345a:	4b5f      	ldr	r3, [pc, #380]	; (80035d8 <main+0x2f8>)
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	4b58      	ldr	r3, [pc, #352]	; (80035c0 <main+0x2e0>)
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	4b56      	ldr	r3, [pc, #344]	; (80035bc <main+0x2dc>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	4954      	ldr	r1, [pc, #336]	; (80035b8 <main+0x2d8>)
 8003468:	f001 fa76 	bl	8004958 <send_path>
		  //Subimos bandera
		  flag_navegation_AStar = 1;
 800346c:	4b5b      	ldr	r3, [pc, #364]	; (80035dc <main+0x2fc>)
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
		  //Reinicamos banderas
		  flag_A_Star = 0;
 8003472:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <main+0x2cc>)
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
		  string_aStar_Complete = 0;
 8003478:	4b4d      	ldr	r3, [pc, #308]	; (80035b0 <main+0x2d0>)
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e000      	b.n	8003482 <main+0x1a2>
		}
		else{  __NOP(); }
 8003480:	bf00      	nop


		//----------------------------Accion de seleccion de operacion--------------------------------
		if(flag_multioperation == 1)
 8003482:	4b57      	ldr	r3, [pc, #348]	; (80035e0 <main+0x300>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d161      	bne.n	800354e <main+0x26e>
		{
			//Verificamos el modo de operacion
			if(flag_mode == 0)
 800348a:	4b56      	ldr	r3, [pc, #344]	; (80035e4 <main+0x304>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d15f      	bne.n	8003552 <main+0x272>
			{
				//Delay para espera la finalizacion del modo
				delay_ms(500);
 8003492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003496:	f004 fae7 	bl	8007a68 <delay_ms>
				//Ejecucion de operacion
				switch(list_operation[counting_operation].operacion)
 800349a:	4b53      	ldr	r3, [pc, #332]	; (80035e8 <main+0x308>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	4a53      	ldr	r2, [pc, #332]	; (80035ec <main+0x30c>)
 80034a0:	015b      	lsls	r3, r3, #5
 80034a2:	4413      	add	r3, r2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d039      	beq.n	800351e <main+0x23e>
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	f300 80a6 	bgt.w	80035fc <main+0x31c>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <main+0x1da>
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d00b      	beq.n	80034d0 <main+0x1f0>
						turn_itself(list_operation[counting_operation].grad_Rotative);
						//Aumentamos valor del contador
						counting_operation ++;
						break;
					}
					default:{ break; }
 80034b8:	e0a0      	b.n	80035fc <main+0x31c>
						flag_multioperation = 0;
 80034ba:	4b49      	ldr	r3, [pc, #292]	; (80035e0 <main+0x300>)
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
						counting_operation = 0;
 80034c0:	4b49      	ldr	r3, [pc, #292]	; (80035e8 <main+0x308>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
						writeMsgForTXE(&handler_USART_USB, "Operaciones finalizadas");
 80034c6:	494a      	ldr	r1, [pc, #296]	; (80035f0 <main+0x310>)
 80034c8:	484a      	ldr	r0, [pc, #296]	; (80035f4 <main+0x314>)
 80034ca:	f004 fde5 	bl	8008098 <writeMsgForTXE>
						break;
 80034ce:	e096      	b.n	80035fe <main+0x31e>
						change_coordinates_position(&parameter_Path_Robot, list_operation[counting_operation].x_destination, list_operation[counting_operation].y_destination);
 80034d0:	4b45      	ldr	r3, [pc, #276]	; (80035e8 <main+0x308>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	4a45      	ldr	r2, [pc, #276]	; (80035ec <main+0x30c>)
 80034d6:	015b      	lsls	r3, r3, #5
 80034d8:	4413      	add	r3, r2
 80034da:	3308      	adds	r3, #8
 80034dc:	ed93 7b00 	vldr	d7, [r3]
 80034e0:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <main+0x308>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	4a41      	ldr	r2, [pc, #260]	; (80035ec <main+0x30c>)
 80034e6:	015b      	lsls	r3, r3, #5
 80034e8:	4413      	add	r3, r2
 80034ea:	3310      	adds	r3, #16
 80034ec:	ed93 6b00 	vldr	d6, [r3]
 80034f0:	eeb0 1a46 	vmov.f32	s2, s12
 80034f4:	eef0 1a66 	vmov.f32	s3, s13
 80034f8:	eeb0 0a47 	vmov.f32	s0, s14
 80034fc:	eef0 0a67 	vmov.f32	s1, s15
 8003500:	483d      	ldr	r0, [pc, #244]	; (80035f8 <main+0x318>)
 8003502:	f7ff fa85 	bl	8002a10 <change_coordinates_position>
						straight_line(duttySetPoint);
 8003506:	4b23      	ldr	r3, [pc, #140]	; (8003594 <main+0x2b4>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f001 facc 	bl	8004aa8 <straight_line>
						counting_operation++;
 8003510:	4b35      	ldr	r3, [pc, #212]	; (80035e8 <main+0x308>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	b2da      	uxtb	r2, r3
 8003518:	4b33      	ldr	r3, [pc, #204]	; (80035e8 <main+0x308>)
 800351a:	701a      	strb	r2, [r3, #0]
						break;
 800351c:	e06f      	b.n	80035fe <main+0x31e>
						turn_itself(list_operation[counting_operation].grad_Rotative);
 800351e:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <main+0x308>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	4a32      	ldr	r2, [pc, #200]	; (80035ec <main+0x30c>)
 8003524:	015b      	lsls	r3, r3, #5
 8003526:	4413      	add	r3, r2
 8003528:	3318      	adds	r3, #24
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	f7fd fb29 	bl	8000b88 <__aeabi_d2iz>
 8003536:	4603      	mov	r3, r0
 8003538:	b21b      	sxth	r3, r3
 800353a:	4618      	mov	r0, r3
 800353c:	f001 fbb8 	bl	8004cb0 <turn_itself>
						counting_operation ++;
 8003540:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <main+0x308>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	3301      	adds	r3, #1
 8003546:	b2da      	uxtb	r2, r3
 8003548:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <main+0x308>)
 800354a:	701a      	strb	r2, [r3, #0]
						break;
 800354c:	e057      	b.n	80035fe <main+0x31e>
				}
			}
		}
		else{ __NOP(); }
 800354e:	bf00      	nop
 8003550:	e055      	b.n	80035fe <main+0x31e>
			}
 8003552:	bf00      	nop
 8003554:	e053      	b.n	80035fe <main+0x31e>
 8003556:	bf00      	nop
 8003558:	aebc408e 	.word	0xaebc408e
 800355c:	3f5bb05f 	.word	0x3f5bb05f
 8003560:	573eab36 	.word	0x573eab36
 8003564:	3fafb15b 	.word	0x3fafb15b
 8003568:	e000ed00 	.word	0xe000ed00
 800356c:	200002f4 	.word	0x200002f4
 8003570:	20000368 	.word	0x20000368
 8003574:	20000300 	.word	0x20000300
 8003578:	20000374 	.word	0x20000374
 800357c:	20009420 	.word	0x20009420
 8003580:	20000318 	.word	0x20000318
 8003584:	20009048 	.word	0x20009048
 8003588:	40105fa7 	.word	0x40105fa7
 800358c:	2000904c 	.word	0x2000904c
 8003590:	400facee 	.word	0x400facee
 8003594:	20000018 	.word	0x20000018
 8003598:	20009430 	.word	0x20009430
 800359c:	2000027c 	.word	0x2000027c
 80035a0:	20008f54 	.word	0x20008f54
 80035a4:	20000019 	.word	0x20000019
 80035a8:	20009440 	.word	0x20009440
 80035ac:	20008f51 	.word	0x20008f51
 80035b0:	20008f50 	.word	0x20008f50
 80035b4:	20008d70 	.word	0x20008d70
 80035b8:	200003f0 	.word	0x200003f0
 80035bc:	20008f3a 	.word	0x20008f3a
 80035c0:	20008f3b 	.word	0x20008f3b
 80035c4:	20008f3c 	.word	0x20008f3c
 80035c8:	20008f48 	.word	0x20008f48
 80035cc:	20008f4c 	.word	0x20008f4c
 80035d0:	20008f40 	.word	0x20008f40
 80035d4:	20008f44 	.word	0x20008f44
 80035d8:	20008f34 	.word	0x20008f34
 80035dc:	20008f52 	.word	0x20008f52
 80035e0:	20009424 	.word	0x20009424
 80035e4:	20009426 	.word	0x20009426
 80035e8:	20009427 	.word	0x20009427
 80035ec:	20009060 	.word	0x20009060
 80035f0:	08010040 	.word	0x08010040
 80035f4:	2000029c 	.word	0x2000029c
 80035f8:	20008f78 	.word	0x20008f78
					default:{ break; }
 80035fc:	bf00      	nop

		//--------------------------Accion especifica del modo-----------------------------
		if(flag_action == 1)
 80035fe:	4bb2      	ldr	r3, [pc, #712]	; (80038c8 <main+0x5e8>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b01      	cmp	r3, #1
 8003604:	f040 8186 	bne.w	8003914 <main+0x634>
		{
			//Verificamos el modo de operacion
			if(flag_mode == 1)
 8003608:	4bb0      	ldr	r3, [pc, #704]	; (80038cc <main+0x5ec>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	f040 8156 	bne.w	80038be <main+0x5de>
			{
				//Conversion de tiempo
				sampling_timer = ((float) time_accion/1000);
 8003612:	4baf      	ldr	r3, [pc, #700]	; (80038d0 <main+0x5f0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800361e:	eddf 6aad 	vldr	s13, [pc, #692]	; 80038d4 <main+0x5f4>
 8003622:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003626:	edc7 7a04 	vstr	s15, [r7, #16]
				//Calculo odometria
				distance_c = (handler_Motor_R.parametersMotor.distance+handler_Motor_L.parametersMotor.distance)/2;  	//[mm]
 800362a:	4bab      	ldr	r3, [pc, #684]	; (80038d8 <main+0x5f8>)
 800362c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003630:	4baa      	ldr	r3, [pc, #680]	; (80038dc <main+0x5fc>)
 8003632:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003636:	ee37 7a27 	vadd.f32	s14, s14, s15
 800363a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800363e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003642:	edc7 7a03 	vstr	s15, [r7, #12]
				parameter_Posicion_Robot.xr_position += distance_c*(cos(parameter_Posicion_Robot.phi_relativo));        //[mm]
 8003646:	4ba6      	ldr	r3, [pc, #664]	; (80038e0 <main+0x600>)
 8003648:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f7fc ff93 	bl	8000578 <__aeabi_f2d>
 8003652:	e9c7 0100 	strd	r0, r1, [r7]
 8003656:	4ba2      	ldr	r3, [pc, #648]	; (80038e0 <main+0x600>)
 8003658:	ed93 7b02 	vldr	d7, [r3, #8]
 800365c:	eeb0 0a47 	vmov.f32	s0, s14
 8003660:	eef0 0a67 	vmov.f32	s1, s15
 8003664:	f00a f818 	bl	800d698 <cos>
 8003668:	ec53 2b10 	vmov	r2, r3, d0
 800366c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003670:	f7fc ffda 	bl	8000628 <__aeabi_dmul>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4650      	mov	r0, sl
 800367a:	4659      	mov	r1, fp
 800367c:	f7fc fe1e 	bl	80002bc <__adddf3>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4996      	ldr	r1, [pc, #600]	; (80038e0 <main+0x600>)
 8003686:	e9c1 2306 	strd	r2, r3, [r1, #24]
				parameter_Posicion_Robot.yr_position += distance_c*(sin(parameter_Posicion_Robot.phi_relativo));       //[mm]
 800368a:	4b95      	ldr	r3, [pc, #596]	; (80038e0 <main+0x600>)
 800368c:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7fc ff71 	bl	8000578 <__aeabi_f2d>
 8003696:	e9c7 0100 	strd	r0, r1, [r7]
 800369a:	4b91      	ldr	r3, [pc, #580]	; (80038e0 <main+0x600>)
 800369c:	ed93 7b02 	vldr	d7, [r3, #8]
 80036a0:	eeb0 0a47 	vmov.f32	s0, s14
 80036a4:	eef0 0a67 	vmov.f32	s1, s15
 80036a8:	f00a f892 	bl	800d7d0 <sin>
 80036ac:	ec53 2b10 	vmov	r2, r3, d0
 80036b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036b4:	f7fc ffb8 	bl	8000628 <__aeabi_dmul>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4650      	mov	r0, sl
 80036be:	4659      	mov	r1, fp
 80036c0:	f7fc fdfc 	bl	80002bc <__adddf3>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4985      	ldr	r1, [pc, #532]	; (80038e0 <main+0x600>)
 80036ca:	e9c1 2308 	strd	r2, r3, [r1, #32]
				//Paso de c.relativa a c.globales
				parameter_Posicion_Robot.xg_position = parameter_Posicion_Robot.xg_position_inicial + parameter_Posicion_Robot.xr_position*cos_cal - parameter_Posicion_Robot.yr_position*sin_cal;
 80036ce:	4b84      	ldr	r3, [pc, #528]	; (80038e0 <main+0x600>)
 80036d0:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 80036d4:	4b82      	ldr	r3, [pc, #520]	; (80038e0 <main+0x600>)
 80036d6:	ed93 7b06 	vldr	d7, [r3, #24]
 80036da:	ed87 7b00 	vstr	d7, [r7]
 80036de:	4b81      	ldr	r3, [pc, #516]	; (80038e4 <main+0x604>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fc ff48 	bl	8000578 <__aeabi_f2d>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036f0:	f7fc ff9a 	bl	8000628 <__aeabi_dmul>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4650      	mov	r0, sl
 80036fa:	4659      	mov	r1, fp
 80036fc:	f7fc fdde 	bl	80002bc <__adddf3>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	e9c7 2300 	strd	r2, r3, [r7]
 8003708:	4b75      	ldr	r3, [pc, #468]	; (80038e0 <main+0x600>)
 800370a:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 800370e:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <main+0x608>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fc ff30 	bl	8000578 <__aeabi_f2d>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4650      	mov	r0, sl
 800371e:	4659      	mov	r1, fp
 8003720:	f7fc ff82 	bl	8000628 <__aeabi_dmul>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800372c:	f7fc fdc4 	bl	80002b8 <__aeabi_dsub>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	496a      	ldr	r1, [pc, #424]	; (80038e0 <main+0x600>)
 8003736:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				parameter_Posicion_Robot.yg_position = parameter_Posicion_Robot.yg_position_inicial + parameter_Posicion_Robot.xr_position*sin_cal + parameter_Posicion_Robot.yr_position*cos_cal;
 800373a:	4b69      	ldr	r3, [pc, #420]	; (80038e0 <main+0x600>)
 800373c:	e9d3 ab0c 	ldrd	sl, fp, [r3, #48]	; 0x30
 8003740:	4b67      	ldr	r3, [pc, #412]	; (80038e0 <main+0x600>)
 8003742:	ed93 7b06 	vldr	d7, [r3, #24]
 8003746:	ed87 7b00 	vstr	d7, [r7]
 800374a:	4b67      	ldr	r3, [pc, #412]	; (80038e8 <main+0x608>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fc ff12 	bl	8000578 <__aeabi_f2d>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	e9d7 0100 	ldrd	r0, r1, [r7]
 800375c:	f7fc ff64 	bl	8000628 <__aeabi_dmul>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4650      	mov	r0, sl
 8003766:	4659      	mov	r1, fp
 8003768:	f7fc fda8 	bl	80002bc <__adddf3>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	e9c7 2300 	strd	r2, r3, [r7]
 8003774:	4b5a      	ldr	r3, [pc, #360]	; (80038e0 <main+0x600>)
 8003776:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 800377a:	4b5a      	ldr	r3, [pc, #360]	; (80038e4 <main+0x604>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7fc fefa 	bl	8000578 <__aeabi_f2d>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4650      	mov	r0, sl
 800378a:	4659      	mov	r1, fp
 800378c:	f7fc ff4c 	bl	8000628 <__aeabi_dmul>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003798:	f7fc fd90 	bl	80002bc <__adddf3>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	494f      	ldr	r1, [pc, #316]	; (80038e0 <main+0x600>)
 80037a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
				//Convertimos el valor y imprimemos
				sprintf(bufferMsg,"&%#.4f\t%#.4f\n", parameter_Posicion_Robot.xg_position , parameter_Posicion_Robot.yg_position);
 80037a6:	4b4e      	ldr	r3, [pc, #312]	; (80038e0 <main+0x600>)
 80037a8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80037ac:	4b4c      	ldr	r3, [pc, #304]	; (80038e0 <main+0x600>)
 80037ae:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80037b2:	e9cd 2300 	strd	r2, r3, [sp]
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	494c      	ldr	r1, [pc, #304]	; (80038ec <main+0x60c>)
 80037bc:	484c      	ldr	r0, [pc, #304]	; (80038f0 <main+0x610>)
 80037be:	f005 fd2d 	bl	800921c <siprintf>
				writeMsgForTXE(&handler_USART_USB, bufferMsg);
 80037c2:	494b      	ldr	r1, [pc, #300]	; (80038f0 <main+0x610>)
 80037c4:	484b      	ldr	r0, [pc, #300]	; (80038f4 <main+0x614>)
 80037c6:	f004 fc67 	bl	8008098 <writeMsgForTXE>
				//Control PID para la distancia
				distance_recta = (distance_to_straight_line(&parameter_Path_Robot, parameter_Posicion_Robot.xg_position, parameter_Posicion_Robot.yg_position))/1000;
 80037ca:	4b45      	ldr	r3, [pc, #276]	; (80038e0 <main+0x600>)
 80037cc:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80037d0:	4b43      	ldr	r3, [pc, #268]	; (80038e0 <main+0x600>)
 80037d2:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80037d6:	eeb0 1a46 	vmov.f32	s2, s12
 80037da:	eef0 1a66 	vmov.f32	s3, s13
 80037de:	eeb0 0a47 	vmov.f32	s0, s14
 80037e2:	eef0 0a67 	vmov.f32	s1, s15
 80037e6:	4844      	ldr	r0, [pc, #272]	; (80038f8 <main+0x618>)
 80037e8:	f7ff fa26 	bl	8002c38 <distance_to_straight_line>
 80037ec:	ec51 0b10 	vmov	r0, r1, d0
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	4b41      	ldr	r3, [pc, #260]	; (80038fc <main+0x61c>)
 80037f6:	f7fd f841 	bl	800087c <__aeabi_ddiv>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	f7fd fa09 	bl	8000c18 <__aeabi_d2f>
 8003806:	4603      	mov	r3, r0
 8003808:	617b      	str	r3, [r7, #20]
				PID_simple(&parameter_PID_distace, sampling_timer, 0,  distance_recta);
 800380a:	ed97 1a05 	vldr	s2, [r7, #20]
 800380e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8003900 <main+0x620>
 8003812:	ed97 0a04 	vldr	s0, [r7, #16]
 8003816:	483b      	ldr	r0, [pc, #236]	; (8003904 <main+0x624>)
 8003818:	f001 fc8a 	bl	8005130 <PID_simple>
				//Aplicacndo correcion
				vel_Setpoint_L = velSetPoint - parameter_PID_distace.u;
 800381c:	4b3a      	ldr	r3, [pc, #232]	; (8003908 <main+0x628>)
 800381e:	ed93 7a00 	vldr	s14, [r3]
 8003822:	4b38      	ldr	r3, [pc, #224]	; (8003904 <main+0x624>)
 8003824:	edd3 7a00 	vldr	s15, [r3]
 8003828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800382c:	4b37      	ldr	r3, [pc, #220]	; (800390c <main+0x62c>)
 800382e:	edc3 7a00 	vstr	s15, [r3]
				vel_Setpoint_R = velSetPoint + parameter_PID_distace.u;
 8003832:	4b34      	ldr	r3, [pc, #208]	; (8003904 <main+0x624>)
 8003834:	ed93 7a00 	vldr	s14, [r3]
 8003838:	4b33      	ldr	r3, [pc, #204]	; (8003908 <main+0x628>)
 800383a:	edd3 7a00 	vldr	s15, [r3]
 800383e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003842:	4b33      	ldr	r3, [pc, #204]	; (8003910 <main+0x630>)
 8003844:	edc3 7a00 	vstr	s15, [r3]
				//Aplicacion del PID
				PID_simple(&handler_Motor_L.parametersMotor.parametersPID, sampling_timer, vel_Setpoint_L,  handler_Motor_L.parametersMotor.velocity);
 8003848:	4b30      	ldr	r3, [pc, #192]	; (800390c <main+0x62c>)
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	4b23      	ldr	r3, [pc, #140]	; (80038dc <main+0x5fc>)
 8003850:	ed93 7a08 	vldr	s14, [r3, #32]
 8003854:	eeb0 1a47 	vmov.f32	s2, s14
 8003858:	eef0 0a67 	vmov.f32	s1, s15
 800385c:	ed97 0a04 	vldr	s0, [r7, #16]
 8003860:	481e      	ldr	r0, [pc, #120]	; (80038dc <main+0x5fc>)
 8003862:	f001 fc65 	bl	8005130 <PID_simple>
				PID_simple(&handler_Motor_R.parametersMotor.parametersPID, sampling_timer, vel_Setpoint_R,  handler_Motor_R.parametersMotor.velocity);
 8003866:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <main+0x630>)
 8003868:	edd3 7a00 	vldr	s15, [r3]
 800386c:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <main+0x5f8>)
 800386e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003872:	eeb0 1a47 	vmov.f32	s2, s14
 8003876:	eef0 0a67 	vmov.f32	s1, s15
 800387a:	ed97 0a04 	vldr	s0, [r7, #16]
 800387e:	4816      	ldr	r0, [pc, #88]	; (80038d8 <main+0x5f8>)
 8003880:	f001 fc56 	bl	8005130 <PID_simple>
				//Cambiamos valores
				handler_Motor_L.configMotor.new_dutty += handler_Motor_L.parametersMotor.parametersPID.u;
 8003884:	4b15      	ldr	r3, [pc, #84]	; (80038dc <main+0x5fc>)
 8003886:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800388a:	4b14      	ldr	r3, [pc, #80]	; (80038dc <main+0x5fc>)
 800388c:	edd3 7a00 	vldr	s15, [r3]
 8003890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003894:	4b11      	ldr	r3, [pc, #68]	; (80038dc <main+0x5fc>)
 8003896:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
				handler_Motor_R.configMotor.new_dutty += handler_Motor_R.parametersMotor.parametersPID.u;
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <main+0x5f8>)
 800389c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <main+0x5f8>)
 80038a2:	edd3 7a00 	vldr	s15, [r3]
 80038a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <main+0x5f8>)
 80038ac:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
				//Correccion del dutty
				correction(&handler_Motor_L);
 80038b0:	480a      	ldr	r0, [pc, #40]	; (80038dc <main+0x5fc>)
 80038b2:	f001 fc99 	bl	80051e8 <correction>
				correction(&handler_Motor_R);
 80038b6:	4808      	ldr	r0, [pc, #32]	; (80038d8 <main+0x5f8>)
 80038b8:	f001 fc96 	bl	80051e8 <correction>
 80038bc:	e000      	b.n	80038c0 <main+0x5e0>
			}
			else{ __NOP(); }
 80038be:	bf00      	nop
			//Bajamos Bandera
			flag_action = 0;
 80038c0:	4b01      	ldr	r3, [pc, #4]	; (80038c8 <main+0x5e8>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	e026      	b.n	8003916 <main+0x636>
 80038c8:	20009425 	.word	0x20009425
 80038cc:	20009426 	.word	0x20009426
 80038d0:	20009434 	.word	0x20009434
 80038d4:	447a0000 	.word	0x447a0000
 80038d8:	20000318 	.word	0x20000318
 80038dc:	2000038c 	.word	0x2000038c
 80038e0:	20008fe0 	.word	0x20008fe0
 80038e4:	20009038 	.word	0x20009038
 80038e8:	2000903c 	.word	0x2000903c
 80038ec:	08010058 	.word	0x08010058
 80038f0:	200002a8 	.word	0x200002a8
 80038f4:	2000029c 	.word	0x2000029c
 80038f8:	20008f78 	.word	0x20008f78
 80038fc:	408f4000 	.word	0x408f4000
 8003900:	00000000 	.word	0x00000000
 8003904:	20008f58 	.word	0x20008f58
 8003908:	20009430 	.word	0x20009430
 800390c:	2000942c 	.word	0x2000942c
 8003910:	20009428 	.word	0x20009428
		}
		else{ __NOP(); }
 8003914:	bf00      	nop


		//------------------------------Accion para finalizar modo------------------------------------
		//Verificamos las condiciones de parada
		if(flag_mode==1)
 8003916:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <main+0x6f0>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d130      	bne.n	8003980 <main+0x6a0>
		{
			if(distance_traveled(&parameter_Path_Robot, parameter_Posicion_Robot.xg_position, parameter_Posicion_Robot.yg_position)>parameter_Path_Robot.line_Distance){
 800391e:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <main+0x6f4>)
 8003920:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8003924:	4b2b      	ldr	r3, [pc, #172]	; (80039d4 <main+0x6f4>)
 8003926:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800392a:	eeb0 1a46 	vmov.f32	s2, s12
 800392e:	eef0 1a66 	vmov.f32	s3, s13
 8003932:	eeb0 0a47 	vmov.f32	s0, s14
 8003936:	eef0 0a67 	vmov.f32	s1, s15
 800393a:	4827      	ldr	r0, [pc, #156]	; (80039d8 <main+0x6f8>)
 800393c:	f7ff f9c0 	bl	8002cc0 <distance_traveled>
 8003940:	ec5b ab10 	vmov	sl, fp, d0
 8003944:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <main+0x6f8>)
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	4618      	mov	r0, r3
 800394a:	f7fc fe03 	bl	8000554 <__aeabi_i2d>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4650      	mov	r0, sl
 8003954:	4659      	mov	r1, fp
 8003956:	f7fd f8f7 	bl	8000b48 <__aeabi_dcmpgt>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d036      	beq.n	80039ce <main+0x6ee>
				//desactivamos los motores
				status_motor(RESET);
 8003960:	2080      	movs	r0, #128	; 0x80
 8003962:	f001 fc7f 	bl	8005264 <status_motor>
				//Guardamos la posicion final
				parameter_Posicion_Robot.xg_position_inicial = parameter_Posicion_Robot.xg_position;
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <main+0x6f4>)
 8003968:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800396c:	4919      	ldr	r1, [pc, #100]	; (80039d4 <main+0x6f4>)
 800396e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				parameter_Posicion_Robot.yg_position_inicial = parameter_Posicion_Robot.yg_position;
 8003972:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <main+0x6f4>)
 8003974:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003978:	4916      	ldr	r1, [pc, #88]	; (80039d4 <main+0x6f4>)
 800397a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800397e:	e516      	b.n	80033ae <main+0xce>
			}
		}
		else if(flag_mode==2)
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <main+0x6f0>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d121      	bne.n	80039cc <main+0x6ec>
		{
			if(fabs(ang_complementary) > fabs(parameter_Path_Robot.rotative_Grad_Relative)){
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <main+0x6fc>)
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	4614      	mov	r4, r2
 8003990:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003994:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <main+0x6f8>)
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	4618      	mov	r0, r3
 800399a:	f7fc fddb 	bl	8000554 <__aeabi_i2d>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4690      	mov	r8, r2
 80039a4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	4620      	mov	r0, r4
 80039ae:	4629      	mov	r1, r5
 80039b0:	f7fd f8ca 	bl	8000b48 <__aeabi_dcmpgt>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <main+0x6ee>
				//Paramos los motores
				status_motor(RESET);
 80039ba:	2080      	movs	r0, #128	; 0x80
 80039bc:	f001 fc52 	bl	8005264 <status_motor>
				updateDirMotor(handler_Motor_Execute);
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <main+0x700>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fe fea0 	bl	800270a <updateDirMotor>
 80039ca:	e4f0      	b.n	80033ae <main+0xce>
			}
		}
		else{ __NOP(); }
 80039cc:	bf00      	nop
		if(commandComplete==1)
 80039ce:	e4ee      	b.n	80033ae <main+0xce>
 80039d0:	20009426 	.word	0x20009426
 80039d4:	20008fe0 	.word	0x20008fe0
 80039d8:	20008f78 	.word	0x20008f78
 80039dc:	20009058 	.word	0x20009058
 80039e0:	20009420 	.word	0x20009420

080039e4 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 80039ea:	4bae      	ldr	r3, [pc, #696]	; (8003ca4 <int_Hardware+0x2c0>)
 80039ec:	4aae      	ldr	r2, [pc, #696]	; (8003ca8 <int_Hardware+0x2c4>)
 80039ee:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 80039f0:	4bac      	ldr	r3, [pc, #688]	; (8003ca4 <int_Hardware+0x2c0>)
 80039f2:	2208      	movs	r2, #8
 80039f4:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80039f6:	2300      	movs	r3, #0
 80039f8:	9301      	str	r3, [sp, #4]
 80039fa:	2300      	movs	r3, #0
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	2301      	movs	r3, #1
 8003a00:	2200      	movs	r2, #0
 8003a02:	2101      	movs	r1, #1
 8003a04:	48a7      	ldr	r0, [pc, #668]	; (8003ca4 <int_Hardware+0x2c0>)
 8003a06:	f003 f827 	bl	8006a58 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 8003a0a:	48a6      	ldr	r0, [pc, #664]	; (8003ca4 <int_Hardware+0x2c0>)
 8003a0c:	f003 f846 	bl	8006a9c <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 8003a10:	4ba6      	ldr	r3, [pc, #664]	; (8003cac <int_Hardware+0x2c8>)
 8003a12:	4aa7      	ldr	r2, [pc, #668]	; (8003cb0 <int_Hardware+0x2cc>)
 8003a14:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8003a16:	4ba5      	ldr	r3, [pc, #660]	; (8003cac <int_Hardware+0x2c8>)
 8003a18:	2205      	movs	r2, #5
 8003a1a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	2300      	movs	r3, #0
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	2301      	movs	r3, #1
 8003a26:	2200      	movs	r2, #0
 8003a28:	2101      	movs	r1, #1
 8003a2a:	48a0      	ldr	r0, [pc, #640]	; (8003cac <int_Hardware+0x2c8>)
 8003a2c:	f003 f814 	bl	8006a58 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 8003a30:	489e      	ldr	r0, [pc, #632]	; (8003cac <int_Hardware+0x2c8>)
 8003a32:	f003 f833 	bl	8006a9c <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8003a36:	4b9f      	ldr	r3, [pc, #636]	; (8003cb4 <int_Hardware+0x2d0>)
 8003a38:	4a9d      	ldr	r2, [pc, #628]	; (8003cb0 <int_Hardware+0x2cc>)
 8003a3a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8003a3c:	4b9d      	ldr	r3, [pc, #628]	; (8003cb4 <int_Hardware+0x2d0>)
 8003a3e:	2209      	movs	r2, #9
 8003a40:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8003a42:	2307      	movs	r3, #7
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	2300      	movs	r3, #0
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2102      	movs	r1, #2
 8003a50:	4898      	ldr	r0, [pc, #608]	; (8003cb4 <int_Hardware+0x2d0>)
 8003a52:	f003 f801 	bl	8006a58 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8003a56:	4897      	ldr	r0, [pc, #604]	; (8003cb4 <int_Hardware+0x2d0>)
 8003a58:	f003 f820 	bl	8006a9c <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 8003a5c:	4b96      	ldr	r3, [pc, #600]	; (8003cb8 <int_Hardware+0x2d4>)
 8003a5e:	4a94      	ldr	r2, [pc, #592]	; (8003cb0 <int_Hardware+0x2cc>)
 8003a60:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8003a62:	4b95      	ldr	r3, [pc, #596]	; (8003cb8 <int_Hardware+0x2d4>)
 8003a64:	220a      	movs	r2, #10
 8003a66:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8003a68:	2307      	movs	r3, #7
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	2301      	movs	r3, #1
 8003a72:	2200      	movs	r2, #0
 8003a74:	2102      	movs	r1, #2
 8003a76:	4890      	ldr	r0, [pc, #576]	; (8003cb8 <int_Hardware+0x2d4>)
 8003a78:	f002 ffee 	bl	8006a58 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 8003a7c:	488e      	ldr	r0, [pc, #568]	; (8003cb8 <int_Hardware+0x2d4>)
 8003a7e:	f003 f80d 	bl	8006a9c <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8003a82:	4b8e      	ldr	r3, [pc, #568]	; (8003cbc <int_Hardware+0x2d8>)
 8003a84:	4a8a      	ldr	r2, [pc, #552]	; (8003cb0 <int_Hardware+0x2cc>)
 8003a86:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8003a88:	4b8c      	ldr	r3, [pc, #560]	; (8003cbc <int_Hardware+0x2d8>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8003a8e:	2302      	movs	r3, #2
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	2300      	movs	r3, #0
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	2301      	movs	r3, #1
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	4887      	ldr	r0, [pc, #540]	; (8003cbc <int_Hardware+0x2d8>)
 8003a9e:	f002 ffdb 	bl	8006a58 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8003aa2:	4886      	ldr	r0, [pc, #536]	; (8003cbc <int_Hardware+0x2d8>)
 8003aa4:	f002 fffa 	bl	8006a9c <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8003aa8:	4b85      	ldr	r3, [pc, #532]	; (8003cc0 <int_Hardware+0x2dc>)
 8003aaa:	4a7f      	ldr	r2, [pc, #508]	; (8003ca8 <int_Hardware+0x2c4>)
 8003aac:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 8003aae:	4b84      	ldr	r3, [pc, #528]	; (8003cc0 <int_Hardware+0x2dc>)
 8003ab0:	220c      	movs	r2, #12
 8003ab2:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2301      	movs	r3, #1
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	487f      	ldr	r0, [pc, #508]	; (8003cc0 <int_Hardware+0x2dc>)
 8003ac4:	f002 ffc8 	bl	8006a58 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 8003ac8:	487d      	ldr	r0, [pc, #500]	; (8003cc0 <int_Hardware+0x2dc>)
 8003aca:	f002 ffe7 	bl	8006a9c <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 8003ace:	4b7d      	ldr	r3, [pc, #500]	; (8003cc4 <int_Hardware+0x2e0>)
 8003ad0:	4a75      	ldr	r2, [pc, #468]	; (8003ca8 <int_Hardware+0x2c4>)
 8003ad2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8003ad4:	4b7b      	ldr	r3, [pc, #492]	; (8003cc4 <int_Hardware+0x2e0>)
 8003ad6:	220a      	movs	r2, #10
 8003ad8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003ada:	2300      	movs	r3, #0
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	4876      	ldr	r0, [pc, #472]	; (8003cc4 <int_Hardware+0x2e0>)
 8003aea:	f002 ffb5 	bl	8006a58 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 8003aee:	4875      	ldr	r0, [pc, #468]	; (8003cc4 <int_Hardware+0x2e0>)
 8003af0:	f002 ffd4 	bl	8006a9c <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 8003af4:	4b74      	ldr	r3, [pc, #464]	; (8003cc8 <int_Hardware+0x2e4>)
 8003af6:	4a6e      	ldr	r2, [pc, #440]	; (8003cb0 <int_Hardware+0x2cc>)
 8003af8:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 8003afa:	4b73      	ldr	r3, [pc, #460]	; (8003cc8 <int_Hardware+0x2e4>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8003b00:	2302      	movs	r3, #2
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	2300      	movs	r3, #0
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2301      	movs	r3, #1
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	486e      	ldr	r0, [pc, #440]	; (8003cc8 <int_Hardware+0x2e4>)
 8003b10:	f002 ffa2 	bl	8006a58 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8003b14:	486c      	ldr	r0, [pc, #432]	; (8003cc8 <int_Hardware+0x2e4>)
 8003b16:	f002 ffc1 	bl	8006a9c <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 8003b1a:	4b6c      	ldr	r3, [pc, #432]	; (8003ccc <int_Hardware+0x2e8>)
 8003b1c:	4a6c      	ldr	r2, [pc, #432]	; (8003cd0 <int_Hardware+0x2ec>)
 8003b1e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8003b20:	4b6a      	ldr	r3, [pc, #424]	; (8003ccc <int_Hardware+0x2e8>)
 8003b22:	2202      	movs	r2, #2
 8003b24:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003b26:	2300      	movs	r3, #0
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	2301      	movs	r3, #1
 8003b30:	2200      	movs	r2, #0
 8003b32:	2101      	movs	r1, #1
 8003b34:	4865      	ldr	r0, [pc, #404]	; (8003ccc <int_Hardware+0x2e8>)
 8003b36:	f002 ff8f 	bl	8006a58 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 8003b3a:	4864      	ldr	r0, [pc, #400]	; (8003ccc <int_Hardware+0x2e8>)
 8003b3c:	f002 ffae 	bl	8006a9c <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8003b40:	4b64      	ldr	r3, [pc, #400]	; (8003cd4 <int_Hardware+0x2f0>)
 8003b42:	4a59      	ldr	r2, [pc, #356]	; (8003ca8 <int_Hardware+0x2c4>)
 8003b44:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8003b46:	4b63      	ldr	r3, [pc, #396]	; (8003cd4 <int_Hardware+0x2f0>)
 8003b48:	220b      	movs	r2, #11
 8003b4a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	2300      	movs	r3, #0
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	2301      	movs	r3, #1
 8003b56:	2200      	movs	r2, #0
 8003b58:	2101      	movs	r1, #1
 8003b5a:	485e      	ldr	r0, [pc, #376]	; (8003cd4 <int_Hardware+0x2f0>)
 8003b5c:	f002 ff7c 	bl	8006a58 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8003b60:	485c      	ldr	r0, [pc, #368]	; (8003cd4 <int_Hardware+0x2f0>)
 8003b62:	f002 ff9b 	bl	8006a9c <GPIO_Config>

	//---------------------------I2C--------------------------------
	//---------------PIN: PB8----------------
	//------------AF4: I2C1_SCL----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SCL_MPU6050.pGPIOx = GPIOB;
 8003b66:	4b5c      	ldr	r3, [pc, #368]	; (8003cd8 <int_Hardware+0x2f4>)
 8003b68:	4a5c      	ldr	r2, [pc, #368]	; (8003cdc <int_Hardware+0x2f8>)
 8003b6a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SCL_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 8003b6c:	4b5a      	ldr	r3, [pc, #360]	; (8003cd8 <int_Hardware+0x2f4>)
 8003b6e:	2208      	movs	r2, #8
 8003b70:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SCL_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8003b72:	2304      	movs	r3, #4
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	2300      	movs	r3, #0
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	2102      	movs	r1, #2
 8003b80:	4855      	ldr	r0, [pc, #340]	; (8003cd8 <int_Hardware+0x2f4>)
 8003b82:	f002 ff69 	bl	8006a58 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SCL_MPU6050);
 8003b86:	4854      	ldr	r0, [pc, #336]	; (8003cd8 <int_Hardware+0x2f4>)
 8003b88:	f002 ff88 	bl	8006a9c <GPIO_Config>

	//---------------PIN: PB9----------------
	//------------AF4: I2C1_SDA----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SDA_MPU6050.pGPIOx = GPIOB;
 8003b8c:	4b54      	ldr	r3, [pc, #336]	; (8003ce0 <int_Hardware+0x2fc>)
 8003b8e:	4a53      	ldr	r2, [pc, #332]	; (8003cdc <int_Hardware+0x2f8>)
 8003b90:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SDA_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8003b92:	4b53      	ldr	r3, [pc, #332]	; (8003ce0 <int_Hardware+0x2fc>)
 8003b94:	2209      	movs	r2, #9
 8003b96:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SDA_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8003b98:	2304      	movs	r3, #4
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	484e      	ldr	r0, [pc, #312]	; (8003ce0 <int_Hardware+0x2fc>)
 8003ba8:	f002 ff56 	bl	8006a58 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SDA_MPU6050);
 8003bac:	484c      	ldr	r0, [pc, #304]	; (8003ce0 <int_Hardware+0x2fc>)
 8003bae:	f002 ff75 	bl	8006a9c <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART1;
 8003bb2:	4b4c      	ldr	r3, [pc, #304]	; (8003ce4 <int_Hardware+0x300>)
 8003bb4:	4a4c      	ldr	r2, [pc, #304]	; (8003ce8 <int_Hardware+0x304>)
 8003bb6:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8003bb8:	4b4a      	ldr	r3, [pc, #296]	; (8003ce4 <int_Hardware+0x300>)
 8003bba:	2202      	movs	r2, #2
 8003bbc:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8003bbe:	4b49      	ldr	r3, [pc, #292]	; (8003ce4 <int_Hardware+0x300>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8003bc4:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <int_Hardware+0x300>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 8003bca:	4b46      	ldr	r3, [pc, #280]	; (8003ce4 <int_Hardware+0x300>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8003bd0:	4b44      	ldr	r3, [pc, #272]	; (8003ce4 <int_Hardware+0x300>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 8003bd6:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <int_Hardware+0x300>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 8003bdc:	4841      	ldr	r0, [pc, #260]	; (8003ce4 <int_Hardware+0x300>)
 8003bde:	f003 ffb7 	bl	8007b50 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8003be2:	4b42      	ldr	r3, [pc, #264]	; (8003cec <int_Hardware+0x308>)
 8003be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003be8:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8003bea:	4b40      	ldr	r3, [pc, #256]	; (8003cec <int_Hardware+0x308>)
 8003bec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bf0:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8003bf2:	4b3e      	ldr	r3, [pc, #248]	; (8003cec <int_Hardware+0x308>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8003bf8:	4b3c      	ldr	r3, [pc, #240]	; (8003cec <int_Hardware+0x308>)
 8003bfa:	22fa      	movs	r2, #250	; 0xfa
 8003bfc:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8003bfe:	4b3b      	ldr	r3, [pc, #236]	; (8003cec <int_Hardware+0x308>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 8003c04:	4839      	ldr	r0, [pc, #228]	; (8003cec <int_Hardware+0x308>)
 8003c06:	f001 fd03 	bl	8005610 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Sampling.ptrTIMx = TIM3;
 8003c0a:	4b39      	ldr	r3, [pc, #228]	; (8003cf0 <int_Hardware+0x30c>)
 8003c0c:	4a39      	ldr	r2, [pc, #228]	; (8003cf4 <int_Hardware+0x310>)
 8003c0e:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Sampling.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8003c10:	4b37      	ldr	r3, [pc, #220]	; (8003cf0 <int_Hardware+0x30c>)
 8003c12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c16:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Sampling.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8003c18:	4b35      	ldr	r3, [pc, #212]	; (8003cf0 <int_Hardware+0x30c>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Sampling.TIMx_Config.TIMX_period = 16;   //Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8003c1e:	4b34      	ldr	r3, [pc, #208]	; (8003cf0 <int_Hardware+0x30c>)
 8003c20:	2210      	movs	r2, #16
 8003c22:	605a      	str	r2, [r3, #4]
	handler_TIMER_Sampling.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8003c24:	4b32      	ldr	r3, [pc, #200]	; (8003cf0 <int_Hardware+0x30c>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Sampling);
 8003c2a:	4831      	ldr	r0, [pc, #196]	; (8003cf0 <int_Hardware+0x30c>)
 8003c2c:	f001 fcf0 	bl	8005610 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 8003c30:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <int_Hardware+0x314>)
 8003c32:	4a32      	ldr	r2, [pc, #200]	; (8003cfc <int_Hardware+0x318>)
 8003c34:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8003c36:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <int_Hardware+0x314>)
 8003c38:	220a      	movs	r2, #10
 8003c3a:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8003c3c:	4b2e      	ldr	r3, [pc, #184]	; (8003cf8 <int_Hardware+0x314>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8003c42:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <int_Hardware+0x314>)
 8003c44:	2264      	movs	r2, #100	; 0x64
 8003c46:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8003c48:	4b2b      	ldr	r3, [pc, #172]	; (8003cf8 <int_Hardware+0x314>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 8003c4e:	482a      	ldr	r0, [pc, #168]	; (8003cf8 <int_Hardware+0x314>)
 8003c50:	f001 fcde 	bl	8005610 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 8003c54:	4b2a      	ldr	r3, [pc, #168]	; (8003d00 <int_Hardware+0x31c>)
 8003c56:	4a14      	ldr	r2, [pc, #80]	; (8003ca8 <int_Hardware+0x2c4>)
 8003c58:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8003c5a:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <int_Hardware+0x31c>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8003c60:	4b28      	ldr	r3, [pc, #160]	; (8003d04 <int_Hardware+0x320>)
 8003c62:	4a27      	ldr	r2, [pc, #156]	; (8003d00 <int_Hardware+0x31c>)
 8003c64:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8003c66:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <int_Hardware+0x320>)
 8003c68:	2202      	movs	r2, #2
 8003c6a:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 8003c6c:	4825      	ldr	r0, [pc, #148]	; (8003d04 <int_Hardware+0x320>)
 8003c6e:	f001 fe53 	bl	8005918 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8003c72:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <int_Hardware+0x324>)
 8003c74:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <int_Hardware+0x2c4>)
 8003c76:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8003c78:	4b23      	ldr	r3, [pc, #140]	; (8003d08 <int_Hardware+0x324>)
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8003c7e:	4b23      	ldr	r3, [pc, #140]	; (8003d0c <int_Hardware+0x328>)
 8003c80:	4a21      	ldr	r2, [pc, #132]	; (8003d08 <int_Hardware+0x324>)
 8003c82:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8003c84:	4b21      	ldr	r3, [pc, #132]	; (8003d0c <int_Hardware+0x328>)
 8003c86:	2202      	movs	r2, #2
 8003c88:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 8003c8a:	4820      	ldr	r0, [pc, #128]	; (8003d0c <int_Hardware+0x328>)
 8003c8c:	f001 fe44 	bl	8005918 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8003c90:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <int_Hardware+0x32c>)
 8003c92:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <int_Hardware+0x318>)
 8003c94:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 8003c96:	4b1e      	ldr	r3, [pc, #120]	; (8003d10 <int_Hardware+0x32c>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8003c9c:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <int_Hardware+0x32c>)
 8003c9e:	220a      	movs	r2, #10
 8003ca0:	805a      	strh	r2, [r3, #2]
 8003ca2:	e037      	b.n	8003d14 <int_Hardware+0x330>
 8003ca4:	20000228 	.word	0x20000228
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	2000020c 	.word	0x2000020c
 8003cb0:	40020000 	.word	0x40020000
 8003cb4:	20000284 	.word	0x20000284
 8003cb8:	20000290 	.word	0x20000290
 8003cbc:	200002e8 	.word	0x200002e8
 8003cc0:	200002f4 	.word	0x200002f4
 8003cc4:	20000300 	.word	0x20000300
 8003cc8:	2000035c 	.word	0x2000035c
 8003ccc:	20000368 	.word	0x20000368
 8003cd0:	40020c00 	.word	0x40020c00
 8003cd4:	20000374 	.word	0x20000374
 8003cd8:	2000025c 	.word	0x2000025c
 8003cdc:	40020400 	.word	0x40020400
 8003ce0:	20000268 	.word	0x20000268
 8003ce4:	2000029c 	.word	0x2000029c
 8003ce8:	40011000 	.word	0x40011000
 8003cec:	20000218 	.word	0x20000218
 8003cf0:	200003e0 	.word	0x200003e0
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	200003d0 	.word	0x200003d0
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	20000234 	.word	0x20000234
 8003d04:	20000240 	.word	0x20000240
 8003d08:	20000248 	.word	0x20000248
 8003d0c:	20000254 	.word	0x20000254
 8003d10:	2000030c 	.word	0x2000030c
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8003d14:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <int_Hardware+0x388>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 8003d1a:	4814      	ldr	r0, [pc, #80]	; (8003d6c <int_Hardware+0x388>)
 8003d1c:	f003 fb60 	bl	80073e0 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8003d20:	2101      	movs	r1, #1
 8003d22:	4812      	ldr	r0, [pc, #72]	; (8003d6c <int_Hardware+0x388>)
 8003d24:	f003 fcbc 	bl	80076a0 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <int_Hardware+0x38c>)
 8003d2a:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <int_Hardware+0x390>)
 8003d2c:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <int_Hardware+0x38c>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8003d34:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <int_Hardware+0x38c>)
 8003d36:	220a      	movs	r2, #10
 8003d38:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <int_Hardware+0x38c>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8003d40:	480b      	ldr	r0, [pc, #44]	; (8003d70 <int_Hardware+0x38c>)
 8003d42:	f003 fb4d 	bl	80073e0 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 8003d46:	2101      	movs	r1, #1
 8003d48:	4809      	ldr	r0, [pc, #36]	; (8003d70 <int_Hardware+0x38c>)
 8003d4a:	f003 fca9 	bl	80076a0 <statusInOutPWM>

	//-------------------Inicio de Configuracion I2Cx----------------------

	//---------------I2C1----------------
	//Definimos el I2Cx a usar
	handler_I2C_MPU6050.prtI2Cx = I2C1;
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <int_Hardware+0x394>)
 8003d50:	4a0a      	ldr	r2, [pc, #40]	; (8003d7c <int_Hardware+0x398>)
 8003d52:	601a      	str	r2, [r3, #0]
	//Definimos la configuracion para el I2C
	handler_I2C_MPU6050.modeI2C = I2C_MODE_FM;               //I2C_MODE_x  x->SM,FM
 8003d54:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <int_Hardware+0x394>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	715a      	strb	r2, [r3, #5]
	handler_I2C_MPU6050.slaveAddress = ADDRESS_DOWN;         //Direccion del Sclave
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <int_Hardware+0x394>)
 8003d5c:	2268      	movs	r2, #104	; 0x68
 8003d5e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	i2c_Config(&handler_I2C_MPU6050);
 8003d60:	4805      	ldr	r0, [pc, #20]	; (8003d78 <int_Hardware+0x394>)
 8003d62:	f003 f807 	bl	8006d74 <i2c_Config>

	//---------------------Fin de Configuracion I2Cx----------------------

}
 8003d66:	bf00      	nop
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	2000030c 	.word	0x2000030c
 8003d70:	20000380 	.word	0x20000380
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	20000274 	.word	0x20000274
 8003d7c:	40005400 	.word	0x40005400

08003d80 <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 8003d84:	2000      	movs	r0, #0
 8003d86:	f003 faaf 	bl	80072e8 <configMCO2>
	configMCO2PRE(4);
 8003d8a:	2004      	movs	r0, #4
 8003d8c:	f003 fac8 	bl	8007320 <configMCO2PRE>
}
 8003d90:	bf00      	nop
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <int_MPU>:
//------------------------------Fin configuracion MCO1------------------------------------------

//------------------------------Inicio configuracion del MPU------------------------------------------
void int_MPU(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
	//Definimos la escala de las diferentes magnitudes fisicas
	handler_MPUAccel_MPU6050.fullScaleACCEL = ACCEL_2G;
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <int_MPU+0x20>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_MPU6050.fullScaleGYRO = GYRO_250;
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <int_MPU+0x20>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	705a      	strb	r2, [r3, #1]
	//Definimos el handler correspondiente al I2C
	handler_MPUAccel_MPU6050.ptrI2Chandler = &handler_I2C_MPU6050;
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <int_MPU+0x20>)
 8003da6:	4a04      	ldr	r2, [pc, #16]	; (8003db8 <int_MPU+0x24>)
 8003da8:	605a      	str	r2, [r3, #4]
	//Cargamos configuracion
	configMPUAccel(&handler_MPUAccel_MPU6050);
 8003daa:	4802      	ldr	r0, [pc, #8]	; (8003db4 <int_MPU+0x20>)
 8003dac:	f7fe f9c8 	bl	8002140 <configMPUAccel>

}
 8003db0:	bf00      	nop
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	2000027c 	.word	0x2000027c
 8003db8:	20000274 	.word	0x20000274

08003dbc <int_Config_Motor>:



//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  28;
 8003dc0:	4b3c      	ldr	r3, [pc, #240]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003dc2:	4a3d      	ldr	r2, [pc, #244]	; (8003eb8 <int_Config_Motor+0xfc>)
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_R.configMotor.frecuency = &value_period;
 8003dc6:	4b3b      	ldr	r3, [pc, #236]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003dc8:	4a3c      	ldr	r2, [pc, #240]	; (8003ebc <int_Config_Motor+0x100>)
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_R.configMotor.dir = SET;
 8003dcc:	4b39      	ldr	r3, [pc, #228]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 8003dd4:	4b37      	ldr	r3, [pc, #220]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003dd6:	4a3a      	ldr	r2, [pc, #232]	; (8003ec0 <int_Config_Motor+0x104>)
 8003dd8:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 8003dda:	4b36      	ldr	r3, [pc, #216]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003ddc:	4a39      	ldr	r2, [pc, #228]	; (8003ec4 <int_Config_Motor+0x108>)
 8003dde:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 8003de0:	4b34      	ldr	r3, [pc, #208]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003de2:	4a39      	ldr	r2, [pc, #228]	; (8003ec8 <int_Config_Motor+0x10c>)
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 8003de6:	4b33      	ldr	r3, [pc, #204]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	60da      	str	r2, [r3, #12]
 8003dee:	4b31      	ldr	r3, [pc, #196]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	4a30      	ldr	r2, [pc, #192]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003df4:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 8003df6:	4b2f      	ldr	r3, [pc, #188]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]
 8003dfe:	4b2d      	ldr	r3, [pc, #180]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	4a2c      	ldr	r2, [pc, #176]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003e04:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_R.parametersMotor.parametersPID.kp = 250;
 8003e06:	4b2b      	ldr	r3, [pc, #172]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003e08:	4a30      	ldr	r2, [pc, #192]	; (8003ecc <int_Config_Motor+0x110>)
 8003e0a:	611a      	str	r2, [r3, #16]
	handler_Motor_R.parametersMotor.parametersPID.ki = 0;
 8003e0c:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	615a      	str	r2, [r3, #20]
	handler_Motor_R.parametersMotor.parametersPID.kd = 100;
 8003e14:	4b27      	ldr	r3, [pc, #156]	; (8003eb4 <int_Config_Motor+0xf8>)
 8003e16:	4a2e      	ldr	r2, [pc, #184]	; (8003ed0 <int_Config_Motor+0x114>)
 8003e18:	619a      	str	r2, [r3, #24]

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  28;
 8003e1a:	4b2e      	ldr	r3, [pc, #184]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e1c:	4a26      	ldr	r2, [pc, #152]	; (8003eb8 <int_Config_Motor+0xfc>)
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_L.configMotor.frecuency = &value_period;
 8003e20:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e22:	4a26      	ldr	r2, [pc, #152]	; (8003ebc <int_Config_Motor+0x100>)
 8003e24:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_L.configMotor.dir = SET;
 8003e26:	4b2b      	ldr	r3, [pc, #172]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 8003e2e:	4b29      	ldr	r3, [pc, #164]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e30:	4a29      	ldr	r2, [pc, #164]	; (8003ed8 <int_Config_Motor+0x11c>)
 8003e32:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 8003e34:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e36:	4a29      	ldr	r2, [pc, #164]	; (8003edc <int_Config_Motor+0x120>)
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 8003e3a:	4b26      	ldr	r3, [pc, #152]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e3c:	4a28      	ldr	r2, [pc, #160]	; (8003ee0 <int_Config_Motor+0x124>)
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 8003e40:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	60da      	str	r2, [r3, #12]
 8003e48:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a21      	ldr	r2, [pc, #132]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e4e:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 8003e50:	4b20      	ldr	r3, [pc, #128]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e5e:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_L.parametersMotor.parametersPID.kp = 250;
 8003e60:	4b1c      	ldr	r3, [pc, #112]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e62:	4a1a      	ldr	r2, [pc, #104]	; (8003ecc <int_Config_Motor+0x110>)
 8003e64:	611a      	str	r2, [r3, #16]
	handler_Motor_L.parametersMotor.parametersPID.ki = 0;
 8003e66:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	615a      	str	r2, [r3, #20]
	handler_Motor_L.parametersMotor.parametersPID.kd = 100;
 8003e6e:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <int_Config_Motor+0x118>)
 8003e70:	4a17      	ldr	r2, [pc, #92]	; (8003ed0 <int_Config_Motor+0x114>)
 8003e72:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distace.e = parameter_PID_distace.e_prev = 0;
 8003e74:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <int_Config_Motor+0x128>)
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	60da      	str	r2, [r3, #12]
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <int_Config_Motor+0x128>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <int_Config_Motor+0x128>)
 8003e82:	6053      	str	r3, [r2, #4]
	parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 8003e84:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <int_Config_Motor+0x128>)
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <int_Config_Motor+0x128>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	4a14      	ldr	r2, [pc, #80]	; (8003ee4 <int_Config_Motor+0x128>)
 8003e92:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	parameter_PID_distace.kp = 1.0;
 8003e94:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <int_Config_Motor+0x128>)
 8003e96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e9a:	611a      	str	r2, [r3, #16]
	parameter_PID_distace.ki = 0.1;
 8003e9c:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <int_Config_Motor+0x128>)
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <int_Config_Motor+0x12c>)
 8003ea0:	615a      	str	r2, [r3, #20]
	parameter_PID_distace.kd = 0.8;
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <int_Config_Motor+0x128>)
 8003ea4:	4a11      	ldr	r2, [pc, #68]	; (8003eec <int_Config_Motor+0x130>)
 8003ea6:	619a      	str	r2, [r3, #24]
};
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000318 	.word	0x20000318
 8003eb8:	41e00000 	.word	0x41e00000
 8003ebc:	20000012 	.word	0x20000012
 8003ec0:	20000300 	.word	0x20000300
 8003ec4:	200002f4 	.word	0x200002f4
 8003ec8:	2000030c 	.word	0x2000030c
 8003ecc:	437a0000 	.word	0x437a0000
 8003ed0:	42c80000 	.word	0x42c80000
 8003ed4:	2000038c 	.word	0x2000038c
 8003ed8:	20000374 	.word	0x20000374
 8003edc:	20000368 	.word	0x20000368
 8003ee0:	20000380 	.word	0x20000380
 8003ee4:	20008f58 	.word	0x20008f58
 8003ee8:	3dcccccd 	.word	0x3dcccccd
 8003eec:	3f4ccccd 	.word	0x3f4ccccd

08003ef0 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 8003ef4:	4802      	ldr	r0, [pc, #8]	; (8003f00 <BasicTimer2_Callback+0x10>)
 8003ef6:	f002 ff26 	bl	8006d46 <GPIOxTooglePin>
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	2000020c 	.word	0x2000020c

08003f04 <BasicUSART1_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART1_Callback(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 8003f08:	f004 f904 	bl	8008114 <getRxData>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <BasicUSART1_Callback+0x2c>)
 8003f12:	701a      	strb	r2, [r3, #0]
	//Funciones que almacena los caracteres del comando recibido
	if(flag_A_Star){ recepcion_Sring_Parameter_Grid_Map(charRead); }
 8003f14:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <BasicUSART1_Callback+0x30>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <BasicUSART1_Callback+0x24>
 8003f1c:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <BasicUSART1_Callback+0x2c>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fba5 	bl	8004670 <recepcion_Sring_Parameter_Grid_Map>
	else{ recepcionCommand(); }
}
 8003f26:	e001      	b.n	8003f2c <BasicUSART1_Callback+0x28>
	else{ recepcionCommand(); }
 8003f28:	f000 f9e8 	bl	80042fc <recepcionCommand>
}
 8003f2c:	bf00      	nop
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20000010 	.word	0x20000010
 8003f34:	20008f51 	.word	0x20008f51

08003f38 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	ed2d 8b02 	vpush	{d8}
 8003f3e:	af00      	add	r7, sp, #0
	//----------------Accion a Realizar con el tiempo del TIMER--------------------
	//Leemos el angulo
	parameter_Posicion_Robot.grad_relativo = getAngle(&handler_MPUAccel_MPU6050, &sample_Gyro, parameter_Posicion_Robot.grad_relativo, READ_GYRO_Z, gyro_offset);
 8003f40:	4bb9      	ldr	r3, [pc, #740]	; (8004228 <BasicTimer3_Callback+0x2f0>)
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f7fc fe65 	bl	8000c18 <__aeabi_d2f>
 8003f4e:	4601      	mov	r1, r0
 8003f50:	4bb6      	ldr	r3, [pc, #728]	; (800422c <BasicTimer3_Callback+0x2f4>)
 8003f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f56:	2205      	movs	r2, #5
 8003f58:	ee00 1a10 	vmov	s0, r1
 8003f5c:	49b4      	ldr	r1, [pc, #720]	; (8004230 <BasicTimer3_Callback+0x2f8>)
 8003f5e:	48b5      	ldr	r0, [pc, #724]	; (8004234 <BasicTimer3_Callback+0x2fc>)
 8003f60:	f7fe fb76 	bl	8002650 <getAngle>
 8003f64:	ee10 3a10 	vmov	r3, s0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fc fb05 	bl	8000578 <__aeabi_f2d>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	49ad      	ldr	r1, [pc, #692]	; (8004228 <BasicTimer3_Callback+0x2f0>)
 8003f74:	e9c1 2300 	strd	r2, r3, [r1]
	//Verificamos el modo
	if(flag_mode == 1)
 8003f78:	4baf      	ldr	r3, [pc, #700]	; (8004238 <BasicTimer3_Callback+0x300>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	f040 80cb 	bne.w	8004118 <BasicTimer3_Callback+0x1e0>
	{
		//Acumulamos los angulos
		sum_ang += parameter_Posicion_Robot.grad_relativo;
 8003f82:	4bae      	ldr	r3, [pc, #696]	; (800423c <BasicTimer3_Callback+0x304>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fc faf6 	bl	8000578 <__aeabi_f2d>
 8003f8c:	4ba6      	ldr	r3, [pc, #664]	; (8004228 <BasicTimer3_Callback+0x2f0>)
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	f7fc f993 	bl	80002bc <__adddf3>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f7fc fe3b 	bl	8000c18 <__aeabi_d2f>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4aa5      	ldr	r2, [pc, #660]	; (800423c <BasicTimer3_Callback+0x304>)
 8003fa6:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += sample_Gyro.delta_timer;
 8003fa8:	4ba1      	ldr	r3, [pc, #644]	; (8004230 <BasicTimer3_Callback+0x2f8>)
 8003faa:	891a      	ldrh	r2, [r3, #8]
 8003fac:	4ba4      	ldr	r3, [pc, #656]	; (8004240 <BasicTimer3_Callback+0x308>)
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	4ba2      	ldr	r3, [pc, #648]	; (8004240 <BasicTimer3_Callback+0x308>)
 8003fb6:	801a      	strh	r2, [r3, #0]

		//----------------Accion a realizar con un tiempo especifico--------------------
		if(counting_action>=timeAction_TIMER_Sampling)
 8003fb8:	4ba2      	ldr	r3, [pc, #648]	; (8004244 <BasicTimer3_Callback+0x30c>)
 8003fba:	881a      	ldrh	r2, [r3, #0]
 8003fbc:	4ba2      	ldr	r3, [pc, #648]	; (8004248 <BasicTimer3_Callback+0x310>)
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	f0c0 80a2 	bcc.w	800410a <BasicTimer3_Callback+0x1d2>
		{
			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8003fc6:	4b9e      	ldr	r3, [pc, #632]	; (8004240 <BasicTimer3_Callback+0x308>)
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b9f      	ldr	r3, [pc, #636]	; (800424c <BasicTimer3_Callback+0x314>)
 8003fce:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemis como el angulo relativo
			prom_ang = sum_ang/counting_action;
 8003fd0:	4b9a      	ldr	r3, [pc, #616]	; (800423c <BasicTimer3_Callback+0x304>)
 8003fd2:	edd3 6a00 	vldr	s13, [r3]
 8003fd6:	4b9b      	ldr	r3, [pc, #620]	; (8004244 <BasicTimer3_Callback+0x30c>)
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fe6:	4b9a      	ldr	r3, [pc, #616]	; (8004250 <BasicTimer3_Callback+0x318>)
 8003fe8:	edc3 7a00 	vstr	s15, [r3]
			parameter_Posicion_Robot.phi_relativo = (prom_ang*M_PI)/180;          //[rad]
 8003fec:	4b98      	ldr	r3, [pc, #608]	; (8004250 <BasicTimer3_Callback+0x318>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fc fac1 	bl	8000578 <__aeabi_f2d>
 8003ff6:	a388      	add	r3, pc, #544	; (adr r3, 8004218 <BasicTimer3_Callback+0x2e0>)
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f7fc fb14 	bl	8000628 <__aeabi_dmul>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4610      	mov	r0, r2
 8004006:	4619      	mov	r1, r3
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	4b91      	ldr	r3, [pc, #580]	; (8004254 <BasicTimer3_Callback+0x31c>)
 800400e:	f7fc fc35 	bl	800087c <__aeabi_ddiv>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4984      	ldr	r1, [pc, #528]	; (8004228 <BasicTimer3_Callback+0x2f0>)
 8004018:	e9c1 2302 	strd	r2, r3, [r1, #8]
			parameter_Posicion_Robot.phi_relativo = atan2(sin(parameter_Posicion_Robot.phi_relativo),cos(parameter_Posicion_Robot.phi_relativo));
 800401c:	4b82      	ldr	r3, [pc, #520]	; (8004228 <BasicTimer3_Callback+0x2f0>)
 800401e:	ed93 7b02 	vldr	d7, [r3, #8]
 8004022:	eeb0 0a47 	vmov.f32	s0, s14
 8004026:	eef0 0a67 	vmov.f32	s1, s15
 800402a:	f009 fbd1 	bl	800d7d0 <sin>
 800402e:	eeb0 8a40 	vmov.f32	s16, s0
 8004032:	eef0 8a60 	vmov.f32	s17, s1
 8004036:	4b7c      	ldr	r3, [pc, #496]	; (8004228 <BasicTimer3_Callback+0x2f0>)
 8004038:	ed93 7b02 	vldr	d7, [r3, #8]
 800403c:	eeb0 0a47 	vmov.f32	s0, s14
 8004040:	eef0 0a67 	vmov.f32	s1, s15
 8004044:	f009 fb28 	bl	800d698 <cos>
 8004048:	eeb0 7a40 	vmov.f32	s14, s0
 800404c:	eef0 7a60 	vmov.f32	s15, s1
 8004050:	eeb0 1a47 	vmov.f32	s2, s14
 8004054:	eef0 1a67 	vmov.f32	s3, s15
 8004058:	eeb0 0a48 	vmov.f32	s0, s16
 800405c:	eef0 0a68 	vmov.f32	s1, s17
 8004060:	f009 fc42 	bl	800d8e8 <atan2>
 8004064:	eeb0 7a40 	vmov.f32	s14, s0
 8004068:	eef0 7a60 	vmov.f32	s15, s1
 800406c:	4b6e      	ldr	r3, [pc, #440]	; (8004228 <BasicTimer3_Callback+0x2f0>)
 800406e:	ed83 7b02 	vstr	d7, [r3, #8]
			//Calculamos la velocidad
			handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 8004072:	4b79      	ldr	r3, [pc, #484]	; (8004258 <BasicTimer3_Callback+0x320>)
 8004074:	8b9b      	ldrh	r3, [r3, #28]
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800407e:	4b77      	ldr	r3, [pc, #476]	; (800425c <BasicTimer3_Callback+0x324>)
 8004080:	edd3 7a00 	vldr	s15, [r3]
 8004084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004088:	4b73      	ldr	r3, [pc, #460]	; (8004258 <BasicTimer3_Callback+0x320>)
 800408a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 800408e:	4b74      	ldr	r3, [pc, #464]	; (8004260 <BasicTimer3_Callback+0x328>)
 8004090:	8b9b      	ldrh	r3, [r3, #28]
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800409a:	4b72      	ldr	r3, [pc, #456]	; (8004264 <BasicTimer3_Callback+0x32c>)
 800409c:	edd3 7a00 	vldr	s15, [r3]
 80040a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a4:	4b6e      	ldr	r3, [pc, #440]	; (8004260 <BasicTimer3_Callback+0x328>)
 80040a6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/time_accion;      //[m/s]
 80040aa:	4b6b      	ldr	r3, [pc, #428]	; (8004258 <BasicTimer3_Callback+0x320>)
 80040ac:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80040b0:	4b66      	ldr	r3, [pc, #408]	; (800424c <BasicTimer3_Callback+0x314>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	ee07 3a90 	vmov	s15, r3
 80040b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040c0:	4b65      	ldr	r3, [pc, #404]	; (8004258 <BasicTimer3_Callback+0x320>)
 80040c2:	edc3 7a08 	vstr	s15, [r3, #32]
			handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/time_accion;      //[m/s]
 80040c6:	4b66      	ldr	r3, [pc, #408]	; (8004260 <BasicTimer3_Callback+0x328>)
 80040c8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80040cc:	4b5f      	ldr	r3, [pc, #380]	; (800424c <BasicTimer3_Callback+0x314>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	ee07 3a90 	vmov	s15, r3
 80040d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040dc:	4b60      	ldr	r3, [pc, #384]	; (8004260 <BasicTimer3_Callback+0x328>)
 80040de:	edc3 7a08 	vstr	s15, [r3, #32]
			//Reiniciamos el numero de conteos
			handler_Motor_R.parametersMotor.count = 0;
 80040e2:	4b5f      	ldr	r3, [pc, #380]	; (8004260 <BasicTimer3_Callback+0x328>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	839a      	strh	r2, [r3, #28]
			handler_Motor_L.parametersMotor.count = 0;
 80040e8:	4b5b      	ldr	r3, [pc, #364]	; (8004258 <BasicTimer3_Callback+0x320>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	839a      	strh	r2, [r3, #28]
			//Reiniciamos variable
			sum_ang = 0;
 80040ee:	4b53      	ldr	r3, [pc, #332]	; (800423c <BasicTimer3_Callback+0x304>)
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
			//Reiniciamos tiempo
			time_accumulated = 0;
 80040f6:	4b52      	ldr	r3, [pc, #328]	; (8004240 <BasicTimer3_Callback+0x308>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	801a      	strh	r2, [r3, #0]
			//Reiniciamos el contador de accion
			counting_action = 0;
 80040fc:	4b51      	ldr	r3, [pc, #324]	; (8004244 <BasicTimer3_Callback+0x30c>)
 80040fe:	2200      	movs	r2, #0
 8004100:	801a      	strh	r2, [r3, #0]
			//Levantamos bandera
			flag_action = 1;
 8004102:	4b59      	ldr	r3, [pc, #356]	; (8004268 <BasicTimer3_Callback+0x330>)
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]

		//Combinar ambos ángulos
		ang_complementary = parameter_Posicion_Robot.grad_relativo + ang_for_Displament_ICR;
	}
	else{  __NOP(); }
}
 8004108:	e0cb      	b.n	80042a2 <BasicTimer3_Callback+0x36a>
		else{ counting_action++; }
 800410a:	4b4e      	ldr	r3, [pc, #312]	; (8004244 <BasicTimer3_Callback+0x30c>)
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	3301      	adds	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	4b4c      	ldr	r3, [pc, #304]	; (8004244 <BasicTimer3_Callback+0x30c>)
 8004114:	801a      	strh	r2, [r3, #0]
}
 8004116:	e0c4      	b.n	80042a2 <BasicTimer3_Callback+0x36a>
	else if(flag_mode==2)
 8004118:	4b47      	ldr	r3, [pc, #284]	; (8004238 <BasicTimer3_Callback+0x300>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b02      	cmp	r3, #2
 800411e:	f040 80bf 	bne.w	80042a0 <BasicTimer3_Callback+0x368>
		if(counting_action>=timeAction_TIMER_Sampling)
 8004122:	4b48      	ldr	r3, [pc, #288]	; (8004244 <BasicTimer3_Callback+0x30c>)
 8004124:	881a      	ldrh	r2, [r3, #0]
 8004126:	4b48      	ldr	r3, [pc, #288]	; (8004248 <BasicTimer3_Callback+0x310>)
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	f0c0 80a4 	bcc.w	8004278 <BasicTimer3_Callback+0x340>
			time_accion = time_accumulated;
 8004130:	4b43      	ldr	r3, [pc, #268]	; (8004240 <BasicTimer3_Callback+0x308>)
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	4b45      	ldr	r3, [pc, #276]	; (800424c <BasicTimer3_Callback+0x314>)
 8004138:	601a      	str	r2, [r3, #0]
			handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 800413a:	4b47      	ldr	r3, [pc, #284]	; (8004258 <BasicTimer3_Callback+0x320>)
 800413c:	8b9b      	ldrh	r3, [r3, #28]
 800413e:	ee07 3a90 	vmov	s15, r3
 8004142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004146:	4b45      	ldr	r3, [pc, #276]	; (800425c <BasicTimer3_Callback+0x324>)
 8004148:	edd3 7a00 	vldr	s15, [r3]
 800414c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004150:	4b41      	ldr	r3, [pc, #260]	; (8004258 <BasicTimer3_Callback+0x320>)
 8004152:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 8004156:	4b42      	ldr	r3, [pc, #264]	; (8004260 <BasicTimer3_Callback+0x328>)
 8004158:	8b9b      	ldrh	r3, [r3, #28]
 800415a:	ee07 3a90 	vmov	s15, r3
 800415e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004162:	4b40      	ldr	r3, [pc, #256]	; (8004264 <BasicTimer3_Callback+0x32c>)
 8004164:	edd3 7a00 	vldr	s15, [r3]
 8004168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800416c:	4b3c      	ldr	r3, [pc, #240]	; (8004260 <BasicTimer3_Callback+0x328>)
 800416e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/time_accion;      //[m/s]
 8004172:	4b39      	ldr	r3, [pc, #228]	; (8004258 <BasicTimer3_Callback+0x320>)
 8004174:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004178:	4b34      	ldr	r3, [pc, #208]	; (800424c <BasicTimer3_Callback+0x314>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	ee07 3a90 	vmov	s15, r3
 8004180:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004188:	4b33      	ldr	r3, [pc, #204]	; (8004258 <BasicTimer3_Callback+0x320>)
 800418a:	edc3 7a08 	vstr	s15, [r3, #32]
			handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/time_accion;      //[m/s]
 800418e:	4b34      	ldr	r3, [pc, #208]	; (8004260 <BasicTimer3_Callback+0x328>)
 8004190:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004194:	4b2d      	ldr	r3, [pc, #180]	; (800424c <BasicTimer3_Callback+0x314>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	ee07 3a90 	vmov	s15, r3
 800419c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a4:	4b2e      	ldr	r3, [pc, #184]	; (8004260 <BasicTimer3_Callback+0x328>)
 80041a6:	edc3 7a08 	vstr	s15, [r3, #32]
			handler_Motor_R.parametersMotor.count = 0;
 80041aa:	4b2d      	ldr	r3, [pc, #180]	; (8004260 <BasicTimer3_Callback+0x328>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	839a      	strh	r2, [r3, #28]
			handler_Motor_L.parametersMotor.count = 0;
 80041b0:	4b29      	ldr	r3, [pc, #164]	; (8004258 <BasicTimer3_Callback+0x320>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	839a      	strh	r2, [r3, #28]
			ang_for_Displament_ICR += (((handler_Motor_R.parametersMotor.distance - handler_Motor_L.parametersMotor.distance)*100)
 80041b6:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <BasicTimer3_Callback+0x328>)
 80041b8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80041bc:	4b26      	ldr	r3, [pc, #152]	; (8004258 <BasicTimer3_Callback+0x320>)
 80041be:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80041c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041c6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800426c <BasicTimer3_Callback+0x334>
 80041ca:	ee67 7a87 	vmul.f32	s15, s15, s14
					/distanceBetweenWheels)*(180/M_PI); //[rad]
 80041ce:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004270 <BasicTimer3_Callback+0x338>
 80041d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80041d6:	ee16 0a90 	vmov	r0, s13
 80041da:	f7fc f9cd 	bl	8000578 <__aeabi_f2d>
 80041de:	a310      	add	r3, pc, #64	; (adr r3, 8004220 <BasicTimer3_Callback+0x2e8>)
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f7fc fa20 	bl	8000628 <__aeabi_dmul>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
			ang_for_Displament_ICR += (((handler_Motor_R.parametersMotor.distance - handler_Motor_L.parametersMotor.distance)*100)
 80041f0:	4b20      	ldr	r3, [pc, #128]	; (8004274 <BasicTimer3_Callback+0x33c>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f7fc f861 	bl	80002bc <__adddf3>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	491d      	ldr	r1, [pc, #116]	; (8004274 <BasicTimer3_Callback+0x33c>)
 8004200:	e9c1 2300 	strd	r2, r3, [r1]
			time_accumulated = 0;
 8004204:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <BasicTimer3_Callback+0x308>)
 8004206:	2200      	movs	r2, #0
 8004208:	801a      	strh	r2, [r3, #0]
			counting_action = 0;
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <BasicTimer3_Callback+0x30c>)
 800420c:	2200      	movs	r2, #0
 800420e:	801a      	strh	r2, [r3, #0]
 8004210:	e038      	b.n	8004284 <BasicTimer3_Callback+0x34c>
 8004212:	bf00      	nop
 8004214:	f3af 8000 	nop.w
 8004218:	54442d18 	.word	0x54442d18
 800421c:	400921fb 	.word	0x400921fb
 8004220:	1a63c1f8 	.word	0x1a63c1f8
 8004224:	404ca5dc 	.word	0x404ca5dc
 8004228:	20008fe0 	.word	0x20008fe0
 800422c:	20008f54 	.word	0x20008f54
 8004230:	20009028 	.word	0x20009028
 8004234:	2000027c 	.word	0x2000027c
 8004238:	20009426 	.word	0x20009426
 800423c:	20009040 	.word	0x20009040
 8004240:	20009438 	.word	0x20009438
 8004244:	2000943a 	.word	0x2000943a
 8004248:	20000014 	.word	0x20000014
 800424c:	20009434 	.word	0x20009434
 8004250:	20009044 	.word	0x20009044
 8004254:	40668000 	.word	0x40668000
 8004258:	2000038c 	.word	0x2000038c
 800425c:	20009048 	.word	0x20009048
 8004260:	20000318 	.word	0x20000318
 8004264:	2000904c 	.word	0x2000904c
 8004268:	20009425 	.word	0x20009425
 800426c:	42c80000 	.word	0x42c80000
 8004270:	4625a000 	.word	0x4625a000
 8004274:	20009050 	.word	0x20009050
		else{counting_action++;}
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <BasicTimer3_Callback+0x374>)
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <BasicTimer3_Callback+0x374>)
 8004282:	801a      	strh	r2, [r3, #0]
		ang_complementary = parameter_Posicion_Robot.grad_relativo + ang_for_Displament_ICR;
 8004284:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <BasicTimer3_Callback+0x378>)
 8004286:	e9d3 0100 	ldrd	r0, r1, [r3]
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <BasicTimer3_Callback+0x37c>)
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f7fc f814 	bl	80002bc <__adddf3>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4907      	ldr	r1, [pc, #28]	; (80042b8 <BasicTimer3_Callback+0x380>)
 800429a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800429e:	e000      	b.n	80042a2 <BasicTimer3_Callback+0x36a>
	else{  __NOP(); }
 80042a0:	bf00      	nop
}
 80042a2:	bf00      	nop
 80042a4:	46bd      	mov	sp, r7
 80042a6:	ecbd 8b02 	vpop	{d8}
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	2000943a 	.word	0x2000943a
 80042b0:	20008fe0 	.word	0x20008fe0
 80042b4:	20009050 	.word	0x20009050
 80042b8:	20009058 	.word	0x20009058

080042bc <callback_extInt1>:

//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
	//Aumentamos valor en als cuentas
	handler_Motor_R.parametersMotor.count++;
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <callback_extInt1+0x1c>)
 80042c2:	8b9b      	ldrh	r3, [r3, #28]
 80042c4:	3301      	adds	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <callback_extInt1+0x1c>)
 80042ca:	839a      	strh	r2, [r3, #28]
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	20000318 	.word	0x20000318

080042dc <callback_extInt3>:
void callback_extInt3(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
	//Aumentamos valor en las cuentas
	handler_Motor_L.parametersMotor.count++;
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <callback_extInt3+0x1c>)
 80042e2:	8b9b      	ldrh	r3, [r3, #28]
 80042e4:	3301      	adds	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <callback_extInt3+0x1c>)
 80042ea:	839a      	strh	r2, [r3, #28]
}
 80042ec:	bf00      	nop
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	2000038c 	.word	0x2000038c

080042fc <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
	if(charRead == '@')
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <recepcionCommand+0x4c>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d10c      	bne.n	8004322 <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 8004308:	4b10      	ldr	r3, [pc, #64]	; (800434c <recepcionCommand+0x50>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	4b10      	ldr	r3, [pc, #64]	; (8004350 <recepcionCommand+0x54>)
 8004310:	2100      	movs	r1, #0
 8004312:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <recepcionCommand+0x58>)
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 800431a:	4b0c      	ldr	r3, [pc, #48]	; (800434c <recepcionCommand+0x50>)
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 8004320:	e00c      	b.n	800433c <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <recepcionCommand+0x50>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	4b07      	ldr	r3, [pc, #28]	; (8004348 <recepcionCommand+0x4c>)
 800432a:	7819      	ldrb	r1, [r3, #0]
 800432c:	4b08      	ldr	r3, [pc, #32]	; (8004350 <recepcionCommand+0x54>)
 800432e:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <recepcionCommand+0x50>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	b2da      	uxtb	r2, r3
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <recepcionCommand+0x50>)
 800433a:	701a      	strb	r2, [r3, #0]
}
 800433c:	bf00      	nop
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000010 	.word	0x20000010
 800434c:	2000943c 	.word	0x2000943c
 8004350:	20009440 	.word	0x20009440
 8004354:	20000019 	.word	0x20000019

08004358 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 8004358:	b5b0      	push	{r4, r5, r7, lr}
 800435a:	b09a      	sub	sp, #104	; 0x68
 800435c:	af04      	add	r7, sp, #16
 800435e:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 8004360:	2300      	movs	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	f107 031c 	add.w	r3, r7, #28
 8004368:	223c      	movs	r2, #60	; 0x3c
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f004 f8cd 	bl	800850c <memset>
	int firtsParameter = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
	int secondParameter = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
	int thirdParameter = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
	int forthParameter = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 8004382:	f107 0114 	add.w	r1, r7, #20
 8004386:	f107 0218 	add.w	r2, r7, #24
 800438a:	f107 0308 	add.w	r3, r7, #8
 800438e:	9302      	str	r3, [sp, #8]
 8004390:	f107 030c 	add.w	r3, r7, #12
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	f107 0310 	add.w	r3, r7, #16
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	460b      	mov	r3, r1
 800439e:	4990      	ldr	r1, [pc, #576]	; (80045e0 <runCommand+0x288>)
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f004 ff5b 	bl	800925c <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 80043a6:	f107 0318 	add.w	r3, r7, #24
 80043aa:	498e      	ldr	r1, [pc, #568]	; (80045e4 <runCommand+0x28c>)
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fb ff17 	bl	80001e0 <strcmp>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d12c      	bne.n	8004412 <runCommand+0xba>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 80043b8:	498b      	ldr	r1, [pc, #556]	; (80045e8 <runCommand+0x290>)
 80043ba:	488c      	ldr	r0, [pc, #560]	; (80045ec <runCommand+0x294>)
 80043bc:	f003 fe6c 	bl	8008098 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 80043c0:	498b      	ldr	r1, [pc, #556]	; (80045f0 <runCommand+0x298>)
 80043c2:	488a      	ldr	r0, [pc, #552]	; (80045ec <runCommand+0x294>)
 80043c4:	f003 fe68 	bl	8008098 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) dutty # --- Cambiar el valor de dutty [%] \n");
 80043c8:	498a      	ldr	r1, [pc, #552]	; (80045f4 <runCommand+0x29c>)
 80043ca:	4888      	ldr	r0, [pc, #544]	; (80045ec <runCommand+0x294>)
 80043cc:	f003 fe64 	bl	8008098 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) frequency # --- Cambiar el valor de la frecuenencia del motor [HZ] \n");
 80043d0:	4989      	ldr	r1, [pc, #548]	; (80045f8 <runCommand+0x2a0>)
 80043d2:	4886      	ldr	r0, [pc, #536]	; (80045ec <runCommand+0x294>)
 80043d4:	f003 fe60 	bl	8008098 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) line # ---Inicia Linea recta, #: dist [mm]  \n");
 80043d8:	4988      	ldr	r1, [pc, #544]	; (80045fc <runCommand+0x2a4>)
 80043da:	4884      	ldr	r0, [pc, #528]	; (80045ec <runCommand+0x294>)
 80043dc:	f003 fe5c 	bl	8008098 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "5) turn # # ---Iniciamos el giro del robot #: ang [grados]# \n");
 80043e0:	4987      	ldr	r1, [pc, #540]	; (8004600 <runCommand+0x2a8>)
 80043e2:	4882      	ldr	r0, [pc, #520]	; (80045ec <runCommand+0x294>)
 80043e4:	f003 fe58 	bl	8008098 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) square # # --- Ejecucion del cuadrado #: lado [mm], #: dir 0->L 1->R \n");
 80043e8:	4986      	ldr	r1, [pc, #536]	; (8004604 <runCommand+0x2ac>)
 80043ea:	4880      	ldr	r0, [pc, #512]	; (80045ec <runCommand+0x294>)
 80043ec:	f003 fe54 	bl	8008098 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "7) aStar --- Indicador de calcular trayectoria con A-Star \n");
 80043f0:	4985      	ldr	r1, [pc, #532]	; (8004608 <runCommand+0x2b0>)
 80043f2:	487e      	ldr	r0, [pc, #504]	; (80045ec <runCommand+0x294>)
 80043f4:	f003 fe50 	bl	8008098 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "8) astarnav --- se ejecuta el A-Star calculado \n");
 80043f8:	4984      	ldr	r1, [pc, #528]	; (800460c <runCommand+0x2b4>)
 80043fa:	487c      	ldr	r0, [pc, #496]	; (80045ec <runCommand+0x294>)
 80043fc:	f003 fe4c 	bl	8008098 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "9) stop --- Para la ejecucion de los motore \n");
 8004400:	4983      	ldr	r1, [pc, #524]	; (8004610 <runCommand+0x2b8>)
 8004402:	487a      	ldr	r0, [pc, #488]	; (80045ec <runCommand+0x294>)
 8004404:	f003 fe48 	bl	8008098 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "10) init --- Reinicia las coordenadas globales \n");
 8004408:	4982      	ldr	r1, [pc, #520]	; (8004614 <runCommand+0x2bc>)
 800440a:	4878      	ldr	r0, [pc, #480]	; (80045ec <runCommand+0x294>)
 800440c:	f003 fe44 	bl	8008098 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 8004410:	e0da      	b.n	80045c8 <runCommand+0x270>
	else if (strcmp(cmd, "dutty") == 0)
 8004412:	f107 0318 	add.w	r3, r7, #24
 8004416:	4980      	ldr	r1, [pc, #512]	; (8004618 <runCommand+0x2c0>)
 8004418:	4618      	mov	r0, r3
 800441a:	f7fb fee1 	bl	80001e0 <strcmp>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d120      	bne.n	8004466 <runCommand+0x10e>
		duttySetPoint= firtsParameter;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	4b7c      	ldr	r3, [pc, #496]	; (800461c <runCommand+0x2c4>)
 800442a:	701a      	strb	r2, [r3, #0]
		velSetPoint = (0.00169*duttySetPoint + 0.0619);
 800442c:	4b7b      	ldr	r3, [pc, #492]	; (800461c <runCommand+0x2c4>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7fc f88f 	bl	8000554 <__aeabi_i2d>
 8004436:	a366      	add	r3, pc, #408	; (adr r3, 80045d0 <runCommand+0x278>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f7fc f8f4 	bl	8000628 <__aeabi_dmul>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4610      	mov	r0, r2
 8004446:	4619      	mov	r1, r3
 8004448:	a363      	add	r3, pc, #396	; (adr r3, 80045d8 <runCommand+0x280>)
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f7fb ff35 	bl	80002bc <__adddf3>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	f7fc fbdd 	bl	8000c18 <__aeabi_d2f>
 800445e:	4603      	mov	r3, r0
 8004460:	4a6f      	ldr	r2, [pc, #444]	; (8004620 <runCommand+0x2c8>)
 8004462:	6013      	str	r3, [r2, #0]
}
 8004464:	e0b0      	b.n	80045c8 <runCommand+0x270>
	else if (strcmp(cmd, "frequency") == 0)
 8004466:	f107 0318 	add.w	r3, r7, #24
 800446a:	496e      	ldr	r1, [pc, #440]	; (8004624 <runCommand+0x2cc>)
 800446c:	4618      	mov	r0, r3
 800446e:	f7fb feb7 	bl	80001e0 <strcmp>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d104      	bne.n	8004482 <runCommand+0x12a>
		frequency_PWM_Motor = firtsParameter;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	b29a      	uxth	r2, r3
 800447c:	4b6a      	ldr	r3, [pc, #424]	; (8004628 <runCommand+0x2d0>)
 800447e:	801a      	strh	r2, [r3, #0]
}
 8004480:	e0a2      	b.n	80045c8 <runCommand+0x270>
	else if (strcmp(cmd, "line") == 0)
 8004482:	f107 0318 	add.w	r3, r7, #24
 8004486:	4969      	ldr	r1, [pc, #420]	; (800462c <runCommand+0x2d4>)
 8004488:	4618      	mov	r0, r3
 800448a:	f7fb fea9 	bl	80001e0 <strcmp>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <runCommand+0x152>
		change_position(&parameter_Path_Robot, firtsParameter);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	4619      	mov	r1, r3
 8004498:	4865      	ldr	r0, [pc, #404]	; (8004630 <runCommand+0x2d8>)
 800449a:	f7fe fa25 	bl	80028e8 <change_position>
		straight_line(duttySetPoint);
 800449e:	4b5f      	ldr	r3, [pc, #380]	; (800461c <runCommand+0x2c4>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fb00 	bl	8004aa8 <straight_line>
}
 80044a8:	e08e      	b.n	80045c8 <runCommand+0x270>
	else if (strcmp(cmd, "turn") == 0)
 80044aa:	f107 0318 	add.w	r3, r7, #24
 80044ae:	4961      	ldr	r1, [pc, #388]	; (8004634 <runCommand+0x2dc>)
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fb fe95 	bl	80001e0 <strcmp>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10b      	bne.n	80044d4 <runCommand+0x17c>
		if(secondParameter==1){ firtsParameter = -1*firtsParameter;}
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d102      	bne.n	80044c8 <runCommand+0x170>
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	425b      	negs	r3, r3
 80044c6:	617b      	str	r3, [r7, #20]
		turn_itself(firtsParameter);    //a = [grados], b = Direccion giro, c = Porcentaje dutty
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	b21b      	sxth	r3, r3
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fbef 	bl	8004cb0 <turn_itself>
}
 80044d2:	e079      	b.n	80045c8 <runCommand+0x270>
	else if (strcmp(cmd, "square") == 0)
 80044d4:	f107 0318 	add.w	r3, r7, #24
 80044d8:	4957      	ldr	r1, [pc, #348]	; (8004638 <runCommand+0x2e0>)
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fb fe80 	bl	80001e0 <strcmp>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d11b      	bne.n	800451e <runCommand+0x1c6>
		init_coordinates();
 80044e6:	f000 fc4f 	bl	8004d88 <init_coordinates>
		set_operation_square(list_operation, firtsParameter, secondParameter);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fc f831 	bl	8000554 <__aeabi_i2d>
 80044f2:	4604      	mov	r4, r0
 80044f4:	460d      	mov	r5, r1
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fc f82b 	bl	8000554 <__aeabi_i2d>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	ec43 2b11 	vmov	d1, r2, r3
 8004506:	ec45 4b10 	vmov	d0, r4, r5
 800450a:	484c      	ldr	r0, [pc, #304]	; (800463c <runCommand+0x2e4>)
 800450c:	f000 fcbe 	bl	8004e8c <set_operation_square>
		counting_operation = 0;
 8004510:	4b4b      	ldr	r3, [pc, #300]	; (8004640 <runCommand+0x2e8>)
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
		flag_multioperation = 1;
 8004516:	4b4b      	ldr	r3, [pc, #300]	; (8004644 <runCommand+0x2ec>)
 8004518:	2201      	movs	r2, #1
 800451a:	701a      	strb	r2, [r3, #0]
}
 800451c:	e054      	b.n	80045c8 <runCommand+0x270>
	else if (strcmp(cmd,"aStar") == 0)
 800451e:	f107 0318 	add.w	r3, r7, #24
 8004522:	4949      	ldr	r1, [pc, #292]	; (8004648 <runCommand+0x2f0>)
 8004524:	4618      	mov	r0, r3
 8004526:	f7fb fe5b 	bl	80001e0 <strcmp>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d103      	bne.n	8004538 <runCommand+0x1e0>
		flag_A_Star = 1;
 8004530:	4b46      	ldr	r3, [pc, #280]	; (800464c <runCommand+0x2f4>)
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
}
 8004536:	e047      	b.n	80045c8 <runCommand+0x270>
	else if (strcmp(cmd,"astarnav") == 0)
 8004538:	f107 0318 	add.w	r3, r7, #24
 800453c:	4944      	ldr	r1, [pc, #272]	; (8004650 <runCommand+0x2f8>)
 800453e:	4618      	mov	r0, r3
 8004540:	f7fb fe4e 	bl	80001e0 <strcmp>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d117      	bne.n	800457a <runCommand+0x222>
		if(flag_navegation_AStar)
 800454a:	4b42      	ldr	r3, [pc, #264]	; (8004654 <runCommand+0x2fc>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00e      	beq.n	8004570 <runCommand+0x218>
			init_coordinates();
 8004552:	f000 fc19 	bl	8004d88 <init_coordinates>
			set_operation_AStar(list_operation, file_path);
 8004556:	4b40      	ldr	r3, [pc, #256]	; (8004658 <runCommand+0x300>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4619      	mov	r1, r3
 800455c:	4837      	ldr	r0, [pc, #220]	; (800463c <runCommand+0x2e4>)
 800455e:	f000 fd53 	bl	8005008 <set_operation_AStar>
			counting_operation = 0;
 8004562:	4b37      	ldr	r3, [pc, #220]	; (8004640 <runCommand+0x2e8>)
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
			flag_multioperation = 1;
 8004568:	4b36      	ldr	r3, [pc, #216]	; (8004644 <runCommand+0x2ec>)
 800456a:	2201      	movs	r2, #1
 800456c:	701a      	strb	r2, [r3, #0]
}
 800456e:	e02b      	b.n	80045c8 <runCommand+0x270>
		else{writeMsgForTXE(&handler_USART_USB, "Accion no valida. No se a ingresado el grid map \n");}
 8004570:	493a      	ldr	r1, [pc, #232]	; (800465c <runCommand+0x304>)
 8004572:	481e      	ldr	r0, [pc, #120]	; (80045ec <runCommand+0x294>)
 8004574:	f003 fd90 	bl	8008098 <writeMsgForTXE>
}
 8004578:	e026      	b.n	80045c8 <runCommand+0x270>
	else if (strcmp(cmd, "stop") == 0)
 800457a:	f107 0318 	add.w	r3, r7, #24
 800457e:	4938      	ldr	r1, [pc, #224]	; (8004660 <runCommand+0x308>)
 8004580:	4618      	mov	r0, r3
 8004582:	f7fb fe2d 	bl	80001e0 <strcmp>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10d      	bne.n	80045a8 <runCommand+0x250>
		flag_multioperation = 0;
 800458c:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <runCommand+0x2ec>)
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
		counting_operation = 0;
 8004592:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <runCommand+0x2e8>)
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
		status_motor(RESET);
 8004598:	2080      	movs	r0, #128	; 0x80
 800459a:	f000 fe63 	bl	8005264 <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Operacion Detenida \n");
 800459e:	4931      	ldr	r1, [pc, #196]	; (8004664 <runCommand+0x30c>)
 80045a0:	4812      	ldr	r0, [pc, #72]	; (80045ec <runCommand+0x294>)
 80045a2:	f003 fd79 	bl	8008098 <writeMsgForTXE>
}
 80045a6:	e00f      	b.n	80045c8 <runCommand+0x270>
	else if (strcmp(cmd, "init") == 0)
 80045a8:	f107 0318 	add.w	r3, r7, #24
 80045ac:	492e      	ldr	r1, [pc, #184]	; (8004668 <runCommand+0x310>)
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fb fe16 	bl	80001e0 <strcmp>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d102      	bne.n	80045c0 <runCommand+0x268>
		init_coordinates();
 80045ba:	f000 fbe5 	bl	8004d88 <init_coordinates>
}
 80045be:	e003      	b.n	80045c8 <runCommand+0x270>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 80045c0:	492a      	ldr	r1, [pc, #168]	; (800466c <runCommand+0x314>)
 80045c2:	480a      	ldr	r0, [pc, #40]	; (80045ec <runCommand+0x294>)
 80045c4:	f003 fd68 	bl	8008098 <writeMsgForTXE>
}
 80045c8:	bf00      	nop
 80045ca:	3758      	adds	r7, #88	; 0x58
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bdb0      	pop	{r4, r5, r7, pc}
 80045d0:	aebc408e 	.word	0xaebc408e
 80045d4:	3f5bb05f 	.word	0x3f5bb05f
 80045d8:	573eab36 	.word	0x573eab36
 80045dc:	3fafb15b 	.word	0x3fafb15b
 80045e0:	08010068 	.word	0x08010068
 80045e4:	08010078 	.word	0x08010078
 80045e8:	08010080 	.word	0x08010080
 80045ec:	2000029c 	.word	0x2000029c
 80045f0:	08010090 	.word	0x08010090
 80045f4:	080100bc 	.word	0x080100bc
 80045f8:	080100ec 	.word	0x080100ec
 80045fc:	08010134 	.word	0x08010134
 8004600:	08010168 	.word	0x08010168
 8004604:	080101a8 	.word	0x080101a8
 8004608:	080101f4 	.word	0x080101f4
 800460c:	08010230 	.word	0x08010230
 8004610:	08010264 	.word	0x08010264
 8004614:	08010294 	.word	0x08010294
 8004618:	080102c8 	.word	0x080102c8
 800461c:	20000018 	.word	0x20000018
 8004620:	20009430 	.word	0x20009430
 8004624:	080102d0 	.word	0x080102d0
 8004628:	20000016 	.word	0x20000016
 800462c:	080102dc 	.word	0x080102dc
 8004630:	20008f78 	.word	0x20008f78
 8004634:	080102e4 	.word	0x080102e4
 8004638:	080102ec 	.word	0x080102ec
 800463c:	20009060 	.word	0x20009060
 8004640:	20009427 	.word	0x20009427
 8004644:	20009424 	.word	0x20009424
 8004648:	080102f4 	.word	0x080102f4
 800464c:	20008f51 	.word	0x20008f51
 8004650:	080102fc 	.word	0x080102fc
 8004654:	20008f52 	.word	0x20008f52
 8004658:	20008f34 	.word	0x20008f34
 800465c:	08010308 	.word	0x08010308
 8004660:	0801033c 	.word	0x0801033c
 8004664:	08010344 	.word	0x08010344
 8004668:	0801035c 	.word	0x0801035c
 800466c:	08010364 	.word	0x08010364

08004670 <recepcion_Sring_Parameter_Grid_Map>:

//------------------------------Inicio de la definicion de funciones del A-STAR----------------------------------------

//Funcion para la recepcion de los parametros del grip map
void recepcion_Sring_Parameter_Grid_Map(char newchar)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	71fb      	strb	r3, [r7, #7]
	if(string_aStar_Complete!=1)
 800467a:	4b14      	ldr	r3, [pc, #80]	; (80046cc <recepcion_Sring_Parameter_Grid_Map+0x5c>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d01c      	beq.n	80046bc <recepcion_Sring_Parameter_Grid_Map+0x4c>
		if(newchar == '$')
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	2b24      	cmp	r3, #36	; 0x24
 8004686:	d10c      	bne.n	80046a2 <recepcion_Sring_Parameter_Grid_Map+0x32>
		{
			//Almacenamos el elemento nulo
			bufferParameterStringGM[index_String_GM]= '\0';
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <recepcion_Sring_Parameter_Grid_Map+0x64>)
 8004690:	2100      	movs	r1, #0
 8004692:	5499      	strb	r1, [r3, r2]
			//Establecemos la bandera como alta
			string_aStar_Complete = 1;
 8004694:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <recepcion_Sring_Parameter_Grid_Map+0x5c>)
 8004696:	2201      	movs	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
			//Reiniciamos contador
			index_String_GM = 0;
 800469a:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 800469c:	2200      	movs	r2, #0
 800469e:	801a      	strh	r2, [r3, #0]
			bufferParameterStringGM[index_String_GM] = newchar;
			//Aumentamos en uno la posicion del arreglo
			index_String_GM++;
		}
	else{__NOP();}
}
 80046a0:	e00d      	b.n	80046be <recepcion_Sring_Parameter_Grid_Map+0x4e>
			bufferParameterStringGM[index_String_GM] = newchar;
 80046a2:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	4619      	mov	r1, r3
 80046a8:	4a0a      	ldr	r2, [pc, #40]	; (80046d4 <recepcion_Sring_Parameter_Grid_Map+0x64>)
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	5453      	strb	r3, [r2, r1]
			index_String_GM++;
 80046ae:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <recepcion_Sring_Parameter_Grid_Map+0x60>)
 80046b8:	801a      	strh	r2, [r3, #0]
}
 80046ba:	e000      	b.n	80046be <recepcion_Sring_Parameter_Grid_Map+0x4e>
	else{__NOP();}
 80046bc:	bf00      	nop
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	20008f50 	.word	0x20008f50
 80046d0:	20008f38 	.word	0x20008f38
 80046d4:	20008d70 	.word	0x20008d70

080046d8 <Separate_parameters>:

//Funcion para separar los diferentes parametros del string
void Separate_parameters(Cell_map_t array_string[20][20], char *parameter_string)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08a      	sub	sp, #40	; 0x28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  //Definicion de variables
  char buffercharSeparate[10];
  uint8_t index_charSeparate = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t flag_Separate = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t status_parameter = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t index_init_Grid_map = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  //---------------Definicion de los parametros iniciales---------------
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 80046fa:	2300      	movs	r3, #0
 80046fc:	847b      	strh	r3, [r7, #34]	; 0x22
 80046fe:	e068      	b.n	80047d2 <Separate_parameters+0xfa>
  {
    //Verificacion del estado
    if(status_parameter<3)
 8004700:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004704:	2b02      	cmp	r3, #2
 8004706:	d85d      	bhi.n	80047c4 <Separate_parameters+0xec>
    {
      //Busqueda de la separacion dentro del string
      if (parameter_string[i] == ':')
 8004708:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	4413      	add	r3, r2
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b3a      	cmp	r3, #58	; 0x3a
 8004712:	d10d      	bne.n	8004730 <Separate_parameters+0x58>
      {
        buffercharSeparate[index_charSeparate] = '\0';
 8004714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004718:	3328      	adds	r3, #40	; 0x28
 800471a:	443b      	add	r3, r7
 800471c:	2200      	movs	r2, #0
 800471e:	f803 2c20 	strb.w	r2, [r3, #-32]
        index_charSeparate = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        flag_Separate = 1;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800472e:	e00e      	b.n	800474e <Separate_parameters+0x76>
      }
      else
      {
        buffercharSeparate[index_charSeparate] = parameter_string[i];
 8004730:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	441a      	add	r2, r3
 8004736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800473a:	7812      	ldrb	r2, [r2, #0]
 800473c:	3328      	adds	r3, #40	; 0x28
 800473e:	443b      	add	r3, r7
 8004740:	f803 2c20 	strb.w	r2, [r3, #-32]
        index_charSeparate++;
 8004744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004748:	3301      	adds	r3, #1
 800474a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      //Si la bandera se levanta se asigna el valor correspondiente al parametro
      if(flag_Separate == 1)
 800474e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004752:	2b01      	cmp	r3, #1
 8004754:	d13a      	bne.n	80047cc <Separate_parameters+0xf4>
      {
        switch(status_parameter)
 8004756:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800475a:	2b02      	cmp	r3, #2
 800475c:	d01a      	beq.n	8004794 <Separate_parameters+0xbc>
 800475e:	2b02      	cmp	r3, #2
 8004760:	dc27      	bgt.n	80047b2 <Separate_parameters+0xda>
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <Separate_parameters+0x94>
 8004766:	2b01      	cmp	r3, #1
 8004768:	d00a      	beq.n	8004780 <Separate_parameters+0xa8>
 800476a:	e022      	b.n	80047b2 <Separate_parameters+0xda>
        {
          case 0:
          {
            grid_map_row = atoi(buffercharSeparate);
 800476c:	f107 0308 	add.w	r3, r7, #8
 8004770:	4618      	mov	r0, r3
 8004772:	f003 fe9c 	bl	80084ae <atoi>
 8004776:	4603      	mov	r3, r0
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4b70      	ldr	r3, [pc, #448]	; (800493c <Separate_parameters+0x264>)
 800477c:	701a      	strb	r2, [r3, #0]
            break;
 800477e:	e018      	b.n	80047b2 <Separate_parameters+0xda>
          }
          case 1:
          {
            grid_map_colum = atoi(buffercharSeparate);
 8004780:	f107 0308 	add.w	r3, r7, #8
 8004784:	4618      	mov	r0, r3
 8004786:	f003 fe92 	bl	80084ae <atoi>
 800478a:	4603      	mov	r3, r0
 800478c:	b2da      	uxtb	r2, r3
 800478e:	4b6c      	ldr	r3, [pc, #432]	; (8004940 <Separate_parameters+0x268>)
 8004790:	701a      	strb	r2, [r3, #0]
            break;
 8004792:	e00e      	b.n	80047b2 <Separate_parameters+0xda>
          }
          case 2:
          {
            cell_separation = atof(buffercharSeparate);
 8004794:	f107 0308 	add.w	r3, r7, #8
 8004798:	4618      	mov	r0, r3
 800479a:	f003 fe85 	bl	80084a8 <atof>
 800479e:	ec53 2b10 	vmov	r2, r3, d0
 80047a2:	4610      	mov	r0, r2
 80047a4:	4619      	mov	r1, r3
 80047a6:	f7fc fa37 	bl	8000c18 <__aeabi_d2f>
 80047aa:	4603      	mov	r3, r0
 80047ac:	4a65      	ldr	r2, [pc, #404]	; (8004944 <Separate_parameters+0x26c>)
 80047ae:	6013      	str	r3, [r2, #0]
            break;
 80047b0:	bf00      	nop
          }
        }
        status_parameter++;
 80047b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80047b6:	3301      	adds	r3, #1
 80047b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        flag_Separate = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80047c2:	e003      	b.n	80047cc <Separate_parameters+0xf4>
      }
    }
    else
    {
      index_init_Grid_map = i;
 80047c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      break;
 80047ca:	e008      	b.n	80047de <Separate_parameters+0x106>
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 80047cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047ce:	3301      	adds	r3, #1
 80047d0:	847b      	strh	r3, [r7, #34]	; 0x22
 80047d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	4413      	add	r3, r2
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d190      	bne.n	8004700 <Separate_parameters+0x28>
    }
  }
  //---------------transformacion del string grid map en un array---------------
  //Variables para los indices
  uint8_t index_row = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t index_col = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	f887 3020 	strb.w	r3, [r7, #32]

  //Separacion de cada caracter
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 80047ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80047ee:	83fb      	strh	r3, [r7, #30]
 80047f0:	e02b      	b.n	800484a <Separate_parameters+0x172>
  {
    if (parameter_string[i] == ';')
 80047f2:	8bfb      	ldrh	r3, [r7, #30]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	4413      	add	r3, r2
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b3b      	cmp	r3, #59	; 0x3b
 80047fc:	d108      	bne.n	8004810 <Separate_parameters+0x138>
    {
      //Se aumenta el indice de la fila y se reinicia el indice de la columna
      index_row++;
 80047fe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004802:	3301      	adds	r3, #1
 8004804:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      index_col = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	f887 3020 	strb.w	r3, [r7, #32]
 800480e:	e019      	b.n	8004844 <Separate_parameters+0x16c>
    }
    else
    {
      //Se guarda el caracter
      array_string[index_row][index_col].feature = parameter_string[i];
 8004810:	8bfb      	ldrh	r3, [r7, #30]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	18d1      	adds	r1, r2, r3
 8004816:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800481a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	441a      	add	r2, r3
 8004826:	f897 3020 	ldrb.w	r3, [r7, #32]
 800482a:	7808      	ldrb	r0, [r1, #0]
 800482c:	2158      	movs	r1, #88	; 0x58
 800482e:	fb01 f303 	mul.w	r3, r1, r3
 8004832:	4413      	add	r3, r2
 8004834:	334c      	adds	r3, #76	; 0x4c
 8004836:	4602      	mov	r2, r0
 8004838:	701a      	strb	r2, [r3, #0]
      //se aumenta el indice de la columna
      index_col++;
 800483a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800483e:	3301      	adds	r3, #1
 8004840:	f887 3020 	strb.w	r3, [r7, #32]
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 8004844:	8bfb      	ldrh	r3, [r7, #30]
 8004846:	3301      	adds	r3, #1
 8004848:	83fb      	strh	r3, [r7, #30]
 800484a:	8bfb      	ldrh	r3, [r7, #30]
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	4413      	add	r3, r2
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1cd      	bne.n	80047f2 <Separate_parameters+0x11a>
    }
  }
  //---------------Definicion del start y del goal---------------
  //Recorremo el array creado para encontrar la posicion de los objetivos
  for(int i = 0; i < grid_map_row; i++)
 8004856:	2300      	movs	r3, #0
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	e063      	b.n	8004924 <Separate_parameters+0x24c>
  {
    for(int j = 0; j < grid_map_colum; j++)
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	e057      	b.n	8004912 <Separate_parameters+0x23a>
    {
      if(array_string[i][j].feature == 'S')
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8004868:	fb02 f303 	mul.w	r3, r2, r3
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	441a      	add	r2, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2158      	movs	r1, #88	; 0x58
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	4413      	add	r3, r2
 800487a:	334c      	adds	r3, #76	; 0x4c
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b53      	cmp	r3, #83	; 0x53
 8004880:	d11a      	bne.n	80048b8 <Separate_parameters+0x1e0>
      {
        //Definimos su posicion
        start_x = j*cell_separation;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	ee07 3a90 	vmov	s15, r3
 8004888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800488c:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <Separate_parameters+0x26c>)
 800488e:	edd3 7a00 	vldr	s15, [r3]
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	4b2c      	ldr	r3, [pc, #176]	; (8004948 <Separate_parameters+0x270>)
 8004898:	edc3 7a00 	vstr	s15, [r3]
        start_y = i*cell_separation;
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048a6:	4b27      	ldr	r3, [pc, #156]	; (8004944 <Separate_parameters+0x26c>)
 80048a8:	edd3 7a00 	vldr	s15, [r3]
 80048ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b0:	4b26      	ldr	r3, [pc, #152]	; (800494c <Separate_parameters+0x274>)
 80048b2:	edc3 7a00 	vstr	s15, [r3]
 80048b6:	e029      	b.n	800490c <Separate_parameters+0x234>
      }
      else if (array_string[i][j].feature == 'G')
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80048be:	fb02 f303 	mul.w	r3, r2, r3
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	441a      	add	r2, r3
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2158      	movs	r1, #88	; 0x58
 80048ca:	fb01 f303 	mul.w	r3, r1, r3
 80048ce:	4413      	add	r3, r2
 80048d0:	334c      	adds	r3, #76	; 0x4c
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b47      	cmp	r3, #71	; 0x47
 80048d6:	d119      	bne.n	800490c <Separate_parameters+0x234>
      {
      //Definimos su posicion
        goal_x= j*cell_separation;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048e2:	4b18      	ldr	r3, [pc, #96]	; (8004944 <Separate_parameters+0x26c>)
 80048e4:	edd3 7a00 	vldr	s15, [r3]
 80048e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ec:	4b18      	ldr	r3, [pc, #96]	; (8004950 <Separate_parameters+0x278>)
 80048ee:	edc3 7a00 	vstr	s15, [r3]
        goal_y= i*cell_separation;
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	ee07 3a90 	vmov	s15, r3
 80048f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <Separate_parameters+0x26c>)
 80048fe:	edd3 7a00 	vldr	s15, [r3]
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	4b13      	ldr	r3, [pc, #76]	; (8004954 <Separate_parameters+0x27c>)
 8004908:	edc3 7a00 	vstr	s15, [r3]
    for(int j = 0; j < grid_map_colum; j++)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	3301      	adds	r3, #1
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <Separate_parameters+0x268>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	4293      	cmp	r3, r2
 800491c:	dba1      	blt.n	8004862 <Separate_parameters+0x18a>
  for(int i = 0; i < grid_map_row; i++)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	3301      	adds	r3, #1
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <Separate_parameters+0x264>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	4293      	cmp	r3, r2
 800492e:	db95      	blt.n	800485c <Separate_parameters+0x184>
      }
    }
  }
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	3728      	adds	r7, #40	; 0x28
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20008f3a 	.word	0x20008f3a
 8004940:	20008f3b 	.word	0x20008f3b
 8004944:	20008f3c 	.word	0x20008f3c
 8004948:	20008f40 	.word	0x20008f40
 800494c:	20008f44 	.word	0x20008f44
 8004950:	20008f48 	.word	0x20008f48
 8004954:	20008f4c 	.word	0x20008f4c

08004958 <send_path>:


//Funcion para imprimir la ruta encontrada
void send_path(file_cell_t *file_cell, Cell_map_t array_string[20][20], uint8_t row, uint8_t colum)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08e      	sub	sp, #56	; 0x38
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	4611      	mov	r1, r2
 8004964:	461a      	mov	r2, r3
 8004966:	460b      	mov	r3, r1
 8004968:	71fb      	strb	r3, [r7, #7]
 800496a:	4613      	mov	r3, r2
 800496c:	71bb      	strb	r3, [r7, #6]
  //Variables
  uint8_t index = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  char buffermsg[22] = {0};
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	f107 0318 	add.w	r3, r7, #24
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	609a      	str	r2, [r3, #8]
 8004984:	60da      	str	r2, [r3, #12]
 8004986:	821a      	strh	r2, [r3, #16]

  //Cambiamos los caracteres de la malla de strings por caracteres que indican la ruta establecida con A Star
  while(1)
  {
	if(file_cell->ptrCell_parent[index] != NULL)
 8004988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d022      	beq.n	80049de <send_path+0x86>
	{
	   array_string[file_cell->ptrCell_parent[index]->index_row][file_cell->ptrCell_parent[index]->index_col].feature = '+';
 8004998:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	789b      	ldrb	r3, [r3, #2]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 80049ac:	fb02 f303 	mul.w	r3, r2, r3
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	441a      	add	r2, r3
 80049b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049b8:	68f9      	ldr	r1, [r7, #12]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	78db      	ldrb	r3, [r3, #3]
 80049c2:	4619      	mov	r1, r3
 80049c4:	2358      	movs	r3, #88	; 0x58
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
 80049ca:	4413      	add	r3, r2
 80049cc:	334c      	adds	r3, #76	; 0x4c
 80049ce:	222b      	movs	r2, #43	; 0x2b
 80049d0:	701a      	strb	r2, [r3, #0]
	  index++;
 80049d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049d6:	3301      	adds	r3, #1
 80049d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(file_cell->ptrCell_parent[index] != NULL)
 80049dc:	e7d4      	b.n	8004988 <send_path+0x30>
	}
	else
	{
	  break;
 80049de:	bf00      	nop
	}
  }
  //Indica de nuevo el inicio del recorrido
   array_string[file_cell->ptrCell_parent[0]->index_row][file_cell->ptrCell_parent[0]->index_col].feature = 'S';
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	789b      	ldrb	r3, [r3, #2]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 80049ec:	fb02 f303 	mul.w	r3, r2, r3
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	441a      	add	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	78db      	ldrb	r3, [r3, #3]
 80049fa:	4619      	mov	r1, r3
 80049fc:	2358      	movs	r3, #88	; 0x58
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	4413      	add	r3, r2
 8004a04:	334c      	adds	r3, #76	; 0x4c
 8004a06:	2253      	movs	r2, #83	; 0x53
 8004a08:	701a      	strb	r2, [r3, #0]

  //Envio de caracter para indicar que se trata del grid map
  writeChar(&handler_USART_USB, '$');
 8004a0a:	2124      	movs	r1, #36	; 0x24
 8004a0c:	4822      	ldr	r0, [pc, #136]	; (8004a98 <send_path+0x140>)
 8004a0e:	f003 fb0b 	bl	8008028 <writeChar>
  //Imprimir la malla modificada
  for(int i=0;i<row;i++)
 8004a12:	2300      	movs	r3, #0
 8004a14:	633b      	str	r3, [r7, #48]	; 0x30
 8004a16:	e036      	b.n	8004a86 <send_path+0x12e>
  {
	for(int j=0;j<colum;j++)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a1c:	e019      	b.n	8004a52 <send_path+0xfa>
	{
	  //Agregamos las caracteristicas por fila a un buffer
	  buffermsg[j] = array_string[i][j].feature;
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8004a24:	fb02 f303 	mul.w	r3, r2, r3
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	441a      	add	r2, r3
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	2158      	movs	r1, #88	; 0x58
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	334c      	adds	r3, #76	; 0x4c
 8004a38:	7819      	ldrb	r1, [r3, #0]
 8004a3a:	f107 0214 	add.w	r2, r7, #20
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	4413      	add	r3, r2
 8004a42:	460a      	mov	r2, r1
 8004a44:	701a      	strb	r2, [r3, #0]
	  index = j;
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for(int j=0;j<colum;j++)
 8004a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4e:	3301      	adds	r3, #1
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a52:	79bb      	ldrb	r3, [r7, #6]
 8004a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a56:	429a      	cmp	r2, r3
 8004a58:	dbe1      	blt.n	8004a1e <send_path+0xc6>
	}
	//Agragamos el valor nullo al final del string
	buffermsg[index+1] = '\0';
 8004a5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a5e:	3301      	adds	r3, #1
 8004a60:	3338      	adds	r3, #56	; 0x38
 8004a62:	443b      	add	r3, r7
 8004a64:	2200      	movs	r2, #0
 8004a66:	f803 2c24 	strb.w	r2, [r3, #-36]
	//imprimimos el string
	sprintf(bufferMsg, "%s;",buffermsg);
 8004a6a:	f107 0314 	add.w	r3, r7, #20
 8004a6e:	461a      	mov	r2, r3
 8004a70:	490a      	ldr	r1, [pc, #40]	; (8004a9c <send_path+0x144>)
 8004a72:	480b      	ldr	r0, [pc, #44]	; (8004aa0 <send_path+0x148>)
 8004a74:	f004 fbd2 	bl	800921c <siprintf>
	writeMsg(&handler_USART_USB, bufferMsg);
 8004a78:	4909      	ldr	r1, [pc, #36]	; (8004aa0 <send_path+0x148>)
 8004a7a:	4807      	ldr	r0, [pc, #28]	; (8004a98 <send_path+0x140>)
 8004a7c:	f003 faed 	bl	800805a <writeMsg>
  for(int i=0;i<row;i++)
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	3301      	adds	r3, #1
 8004a84:	633b      	str	r3, [r7, #48]	; 0x30
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	dbc4      	blt.n	8004a18 <send_path+0xc0>
  }
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	3738      	adds	r7, #56	; 0x38
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	2000029c 	.word	0x2000029c
 8004a9c:	0801037c 	.word	0x0801037c
 8004aa0:	200002a8 	.word	0x200002a8
 8004aa4:	00000000 	.word	0x00000000

08004aa8 <straight_line>:


//------------------------------Inicio de la definicion de funciones del modo----------------------------------------
//------linea recta------
void straight_line(uint8_t dutty)   //a = [mm]
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	71fb      	strb	r3, [r7, #7]
	//---------Calculo parametros de la linea recta---------
	calculation_parameter_distance(&parameter_Path_Robot);
 8004ab2:	4871      	ldr	r0, [pc, #452]	; (8004c78 <straight_line+0x1d0>)
 8004ab4:	f7fe f818 	bl	8002ae8 <calculation_parameter_distance>
	//---------Configuracion coordenadas medidas---------
	//Coordenadas Globales
	parameter_Posicion_Robot.grad_grobal += ang_complementary;
 8004ab8:	4b70      	ldr	r3, [pc, #448]	; (8004c7c <straight_line+0x1d4>)
 8004aba:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004abe:	4b70      	ldr	r3, [pc, #448]	; (8004c80 <straight_line+0x1d8>)
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f7fb fbfa 	bl	80002bc <__adddf3>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	496b      	ldr	r1, [pc, #428]	; (8004c7c <straight_line+0x1d4>)
 8004ace:	e9c1 2304 	strd	r2, r3, [r1, #16]
	//Reiniciaos Coordenadas relativas
	parameter_Posicion_Robot.xr_position = parameter_Posicion_Robot.yr_position = 0;
 8004ad2:	496a      	ldr	r1, [pc, #424]	; (8004c7c <straight_line+0x1d4>)
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8004ae0:	4b66      	ldr	r3, [pc, #408]	; (8004c7c <straight_line+0x1d4>)
 8004ae2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ae6:	4965      	ldr	r1, [pc, #404]	; (8004c7c <straight_line+0x1d4>)
 8004ae8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.phi_relativo = 0;
 8004aec:	4963      	ldr	r1, [pc, #396]	; (8004c7c <straight_line+0x1d4>)
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.grad_relativo = 0;
 8004afa:	4960      	ldr	r1, [pc, #384]	; (8004c7c <straight_line+0x1d4>)
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9c1 2300 	strd	r2, r3, [r1]
	ang_for_Displament_ICR = 0;
 8004b08:	495e      	ldr	r1, [pc, #376]	; (8004c84 <straight_line+0x1dc>)
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9c1 2300 	strd	r2, r3, [r1]
	//---------Configuracion coordenadas teoricas---------
	parameter_Path_Robot.rotative_Grad_Relative = 0;
 8004b16:	4b58      	ldr	r3, [pc, #352]	; (8004c78 <straight_line+0x1d0>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
	//Calculos extra
	cos_cal = cos(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 8004b1c:	4b57      	ldr	r3, [pc, #348]	; (8004c7c <straight_line+0x1d4>)
 8004b1e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004b22:	a353      	add	r3, pc, #332	; (adr r3, 8004c70 <straight_line+0x1c8>)
 8004b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b28:	f7fb fd7e 	bl	8000628 <__aeabi_dmul>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	4b53      	ldr	r3, [pc, #332]	; (8004c88 <straight_line+0x1e0>)
 8004b3a:	f7fb fe9f 	bl	800087c <__aeabi_ddiv>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	ec43 2b17 	vmov	d7, r2, r3
 8004b46:	eeb0 0a47 	vmov.f32	s0, s14
 8004b4a:	eef0 0a67 	vmov.f32	s1, s15
 8004b4e:	f008 fda3 	bl	800d698 <cos>
 8004b52:	ec53 2b10 	vmov	r2, r3, d0
 8004b56:	4610      	mov	r0, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f7fc f85d 	bl	8000c18 <__aeabi_d2f>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4a4a      	ldr	r2, [pc, #296]	; (8004c8c <straight_line+0x1e4>)
 8004b62:	6013      	str	r3, [r2, #0]
	sin_cal = sin(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 8004b64:	4b45      	ldr	r3, [pc, #276]	; (8004c7c <straight_line+0x1d4>)
 8004b66:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004b6a:	a341      	add	r3, pc, #260	; (adr r3, 8004c70 <straight_line+0x1c8>)
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f7fb fd5a 	bl	8000628 <__aeabi_dmul>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4610      	mov	r0, r2
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	4b41      	ldr	r3, [pc, #260]	; (8004c88 <straight_line+0x1e0>)
 8004b82:	f7fb fe7b 	bl	800087c <__aeabi_ddiv>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	ec43 2b17 	vmov	d7, r2, r3
 8004b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8004b92:	eef0 0a67 	vmov.f32	s1, s15
 8004b96:	f008 fe1b 	bl	800d7d0 <sin>
 8004b9a:	ec53 2b10 	vmov	r2, r3, d0
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	f7fc f839 	bl	8000c18 <__aeabi_d2f>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4a39      	ldr	r2, [pc, #228]	; (8004c90 <straight_line+0x1e8>)
 8004baa:	6013      	str	r3, [r2, #0]
	//-----------------PID-------------------------
	//Establecemos valores iniciales
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 8004bac:	4b39      	ldr	r3, [pc, #228]	; (8004c94 <straight_line+0x1ec>)
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	60da      	str	r2, [r3, #12]
 8004bb4:	4b37      	ldr	r3, [pc, #220]	; (8004c94 <straight_line+0x1ec>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	4a36      	ldr	r2, [pc, #216]	; (8004c94 <straight_line+0x1ec>)
 8004bba:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 8004bbc:	4b35      	ldr	r3, [pc, #212]	; (8004c94 <straight_line+0x1ec>)
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	609a      	str	r2, [r3, #8]
 8004bc4:	4b33      	ldr	r3, [pc, #204]	; (8004c94 <straight_line+0x1ec>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	4a32      	ldr	r2, [pc, #200]	; (8004c94 <straight_line+0x1ec>)
 8004bca:	6013      	str	r3, [r2, #0]
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 8004bcc:	4b32      	ldr	r3, [pc, #200]	; (8004c98 <straight_line+0x1f0>)
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	60da      	str	r2, [r3, #12]
 8004bd4:	4b30      	ldr	r3, [pc, #192]	; (8004c98 <straight_line+0x1f0>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4a2f      	ldr	r2, [pc, #188]	; (8004c98 <straight_line+0x1f0>)
 8004bda:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 8004bdc:	4b2e      	ldr	r3, [pc, #184]	; (8004c98 <straight_line+0x1f0>)
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <straight_line+0x1f0>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4a2b      	ldr	r2, [pc, #172]	; (8004c98 <straight_line+0x1f0>)
 8004bea:	6013      	str	r3, [r2, #0]
	parameter_PID_distace.e = parameter_PID_distace.e_prev = parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 8004bec:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <straight_line+0x1f4>)
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	4b29      	ldr	r3, [pc, #164]	; (8004c9c <straight_line+0x1f4>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	4a28      	ldr	r2, [pc, #160]	; (8004c9c <straight_line+0x1f4>)
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4b27      	ldr	r3, [pc, #156]	; (8004c9c <straight_line+0x1f4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a26      	ldr	r2, [pc, #152]	; (8004c9c <straight_line+0x1f4>)
 8004c02:	60d3      	str	r3, [r2, #12]
 8004c04:	4b25      	ldr	r3, [pc, #148]	; (8004c9c <straight_line+0x1f4>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <straight_line+0x1f4>)
 8004c0a:	6053      	str	r3, [r2, #4]
	//-------------Configruacion Modo--------------
	//Definimos el dutty inicial
	handler_Motor_L.configMotor.new_dutty = duttySetPoint;
 8004c0c:	4b24      	ldr	r3, [pc, #144]	; (8004ca0 <straight_line+0x1f8>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	ee07 3a90 	vmov	s15, r3
 8004c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c18:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <straight_line+0x1ec>)
 8004c1a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	handler_Motor_R.configMotor.new_dutty = duttySetPoint;
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <straight_line+0x1f8>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <straight_line+0x1f0>)
 8004c2c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	//Reiniciamos variables
	time_accumulated = counting_action = flag_action = 0;
 8004c30:	4b1c      	ldr	r3, [pc, #112]	; (8004ca4 <straight_line+0x1fc>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	4b1c      	ldr	r3, [pc, #112]	; (8004ca8 <straight_line+0x200>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	801a      	strh	r2, [r3, #0]
 8004c3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ca8 <straight_line+0x200>)
 8004c3e:	881a      	ldrh	r2, [r3, #0]
 8004c40:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <straight_line+0x204>)
 8004c42:	801a      	strh	r2, [r3, #0]
	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(1, dutty, dutty);
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	ee07 3a10 	vmov	s14, r3
 8004c54:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004c58:	eef0 0a47 	vmov.f32	s1, s14
 8004c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c60:	2001      	movs	r0, #1
 8004c62:	f000 f861 	bl	8004d28 <config_mode>
}
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	54442d18 	.word	0x54442d18
 8004c74:	400921fb 	.word	0x400921fb
 8004c78:	20008f78 	.word	0x20008f78
 8004c7c:	20008fe0 	.word	0x20008fe0
 8004c80:	20009058 	.word	0x20009058
 8004c84:	20009050 	.word	0x20009050
 8004c88:	40668000 	.word	0x40668000
 8004c8c:	20009038 	.word	0x20009038
 8004c90:	2000903c 	.word	0x2000903c
 8004c94:	2000038c 	.word	0x2000038c
 8004c98:	20000318 	.word	0x20000318
 8004c9c:	20008f58 	.word	0x20008f58
 8004ca0:	20000018 	.word	0x20000018
 8004ca4:	20009425 	.word	0x20009425
 8004ca8:	2000943a 	.word	0x2000943a
 8004cac:	20009438 	.word	0x20009438

08004cb0 <turn_itself>:

//---------Giro sobre si mismo---------
void turn_itself(int16_t turn_grad)     //a = [grados], b = direccion giro
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	80fb      	strh	r3, [r7, #6]
	//-------------Configruacion Modo--------------
	//Definicion del angulo de giro
	parameter_Path_Robot.rotative_Grad += parameter_Path_Robot.rotative_Grad_Relative += turn_grad;
 8004cba:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <turn_itself+0x68>)
 8004cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <turn_itself+0x68>)
 8004cc6:	6393      	str	r3, [r2, #56]	; 0x38
 8004cc8:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <turn_itself+0x68>)
 8004cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ccc:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <turn_itself+0x68>)
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	4413      	add	r3, r2
 8004cd2:	4a11      	ldr	r2, [pc, #68]	; (8004d18 <turn_itself+0x68>)
 8004cd4:	63d3      	str	r3, [r2, #60]	; 0x3c
	//Cambiamso la direccion del motor
	if(turn_grad<0)
 8004cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	da08      	bge.n	8004cf0 <turn_itself+0x40>
	{
		//Seleccionamos el motor derecho
		handler_Motor_Execute = &handler_Motor_R;
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <turn_itself+0x6c>)
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <turn_itself+0x70>)
 8004ce2:	601a      	str	r2, [r3, #0]
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8004ce4:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <turn_itself+0x6c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fd fd0e 	bl	800270a <updateDirMotor>
 8004cee:	e007      	b.n	8004d00 <turn_itself+0x50>
	}
	else
	{
		//Seleccionamos el motor izquierdo
		handler_Motor_Execute = &handler_Motor_L;
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <turn_itself+0x6c>)
 8004cf2:	4a0c      	ldr	r2, [pc, #48]	; (8004d24 <turn_itself+0x74>)
 8004cf4:	601a      	str	r2, [r3, #0]
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <turn_itself+0x6c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fd fd05 	bl	800270a <updateDirMotor>
	}

	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(2,20,21);
 8004d00:	eef3 0a05 	vmov.f32	s1, #53	; 0x41a80000  21.0
 8004d04:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8004d08:	2002      	movs	r0, #2
 8004d0a:	f000 f80d 	bl	8004d28 <config_mode>
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20008f78 	.word	0x20008f78
 8004d1c:	20009420 	.word	0x20009420
 8004d20:	20000318 	.word	0x20000318
 8004d24:	2000038c 	.word	0x2000038c

08004d28 <config_mode>:


void config_mode(uint8_t status, float dutty_L, float dutty_R)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d34:	edc7 0a01 	vstr	s1, [r7, #4]
 8004d38:	73fb      	strb	r3, [r7, #15]
	//Cargamos la configuracion
	config_motor(status, dutty_L, dutty_R, frequency_PWM_Motor); //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
 8004d3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004d42:	4b0f      	ldr	r3, [pc, #60]	; (8004d80 <config_mode+0x58>)
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	eef0 0a67 	vmov.f32	s1, s15
 8004d54:	ed97 0a01 	vldr	s0, [r7, #4]
 8004d58:	ee17 1a10 	vmov	r1, s14
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fb05 	bl	800536c <config_motor>
	//Iniciamos los motores
	status_motor(SET);
 8004d62:	2001      	movs	r0, #1
 8004d64:	f000 fa7e 	bl	8005264 <status_motor>
	//Medimos el tiempo inicial
	sample_Gyro.timer_prev = getTicksMs();
 8004d68:	f002 fe70 	bl	8007a4c <getTicksMs>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4904      	ldr	r1, [pc, #16]	; (8004d84 <config_mode+0x5c>)
 8004d72:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000016 	.word	0x20000016
 8004d84:	20009028 	.word	0x20009028

08004d88 <init_coordinates>:

void init_coordinates(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
	//Reinicio de varibable
	ang_for_Displament_ICR = 0;
 8004d8c:	493b      	ldr	r1, [pc, #236]	; (8004e7c <init_coordinates+0xf4>)
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	e9c1 2300 	strd	r2, r3, [r1]
	ang_complementary = 0;
 8004d9a:	4939      	ldr	r1, [pc, #228]	; (8004e80 <init_coordinates+0xf8>)
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9c1 2300 	strd	r2, r3, [r1]
	//Reinicio de parametros de la structura de la posicion del robot
	parameter_Posicion_Robot.grad_grobal = 0; parameter_Posicion_Robot.grad_relativo = 0; parameter_Posicion_Robot.phi_relativo = 0;
 8004da8:	4936      	ldr	r1, [pc, #216]	; (8004e84 <init_coordinates+0xfc>)
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004db6:	4933      	ldr	r1, [pc, #204]	; (8004e84 <init_coordinates+0xfc>)
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	e9c1 2300 	strd	r2, r3, [r1]
 8004dc4:	492f      	ldr	r1, [pc, #188]	; (8004e84 <init_coordinates+0xfc>)
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.xg_position = 0; parameter_Posicion_Robot.xg_position_inicial = 0; parameter_Posicion_Robot.xr_position = 0;
 8004dd2:	492c      	ldr	r1, [pc, #176]	; (8004e84 <init_coordinates+0xfc>)
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8004de0:	4928      	ldr	r1, [pc, #160]	; (8004e84 <init_coordinates+0xfc>)
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004dee:	4925      	ldr	r1, [pc, #148]	; (8004e84 <init_coordinates+0xfc>)
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.yg_position = 0; parameter_Posicion_Robot.yg_position_inicial = 0; parameter_Posicion_Robot.yr_position = 0;
 8004dfc:	4921      	ldr	r1, [pc, #132]	; (8004e84 <init_coordinates+0xfc>)
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004e0a:	491e      	ldr	r1, [pc, #120]	; (8004e84 <init_coordinates+0xfc>)
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8004e18:	491a      	ldr	r1, [pc, #104]	; (8004e84 <init_coordinates+0xfc>)
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Reinicio de parametros de la structura de path
	parameter_Path_Robot.goal_Position_x = 0; parameter_Path_Robot.goal_Position_y = 0;
 8004e26:	4918      	ldr	r1, [pc, #96]	; (8004e88 <init_coordinates+0x100>)
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8004e34:	4914      	ldr	r1, [pc, #80]	; (8004e88 <init_coordinates+0x100>)
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	parameter_Path_Robot.line_Distance = 0;
 8004e42:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <init_coordinates+0x100>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40
	parameter_Path_Robot.rotative_Grad = 0; parameter_Path_Robot.rotative_Grad_Relative = 0;
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <init_coordinates+0x100>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e4e:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <init_coordinates+0x100>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38
	parameter_Path_Robot.start_position_x = 0; parameter_Path_Robot.start_position_y = 0;
 8004e54:	490c      	ldr	r1, [pc, #48]	; (8004e88 <init_coordinates+0x100>)
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8004e62:	4909      	ldr	r1, [pc, #36]	; (8004e88 <init_coordinates+0x100>)
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8004e70:	bf00      	nop
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20009050 	.word	0x20009050
 8004e80:	20009058 	.word	0x20009058
 8004e84:	20008fe0 	.word	0x20008fe0
 8004e88:	20008f78 	.word	0x20008f78

08004e8c <set_operation_square>:
//-----------------------------Fin de la definicio de funciones del modo--------------------------------------------


//-------------Inicio de la definicion de las funciones para la contruccion de la lista de operaciones ----------------------------------
void set_operation_square(Parameters_Operation_t *prtList, double dis_side, double direction_square)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b0a8      	sub	sp, #160	; 0xa0
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6178      	str	r0, [r7, #20]
 8004e94:	ed87 0b02 	vstr	d0, [r7, #8]
 8004e98:	ed87 1b00 	vstr	d1, [r7]
	//Definicion de variables
	Parameter_build_t parameter_build = {0};
 8004e9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004ea0:	2230      	movs	r2, #48	; 0x30
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f003 fb31 	bl	800850c <memset>
	int8_t value_side = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	//Definicion de las coordenadas del cuadrado
	if(direction_square == 0){value_side = 1;}
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ebc:	f7fb fe1c 	bl	8000af8 <__aeabi_dcmpeq>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <set_operation_square+0x42>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8004ecc:	e002      	b.n	8004ed4 <set_operation_square+0x48>
	else{ value_side = -1;}
 8004ece:	23ff      	movs	r3, #255	; 0xff
 8004ed0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	double coordination_position_square[2][5] = {{0, dis_side, dis_side, 0, 0},{0, 0, value_side*dis_side,value_side*dis_side,0}};
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8004ee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ee4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004f20:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fb fb15 	bl	8000554 <__aeabi_i2d>
 8004f2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f2e:	f7fb fb7b 	bl	8000628 <__aeabi_dmul>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8004f3a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fb fb08 	bl	8000554 <__aeabi_i2d>
 8004f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f48:	f7fb fb6e 	bl	8000628 <__aeabi_dmul>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	//Definimos la posicion inicial del cuadrado
	parameter_build.initline_x = coordination_position_square[0][0]; parameter_build.initline_y = coordination_position_square[0][0];
 8004f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f64:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8004f68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f6c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	parameter_build.grad_vector_init = 0; parameter_build.number_operation = 0;
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	parameter_build.delta_before[0] = dis_side; parameter_build.delta_before[1] = 0;
 8004f82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f86:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	//Construccion de las operaciones
	for(uint8_t i=1; i<5; i++)
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8004f9c:	e023      	b.n	8004fe6 <set_operation_square+0x15a>
	{
		build_Operation(prtList, &parameter_build, coordination_position_square[0][i], coordination_position_square[1][i]);
 8004f9e:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	33a0      	adds	r3, #160	; 0xa0
 8004fa6:	443b      	add	r3, r7
 8004fa8:	3b88      	subs	r3, #136	; 0x88
 8004faa:	ed93 7b00 	vldr	d7, [r3]
 8004fae:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8004fb2:	3305      	adds	r3, #5
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	33a0      	adds	r3, #160	; 0xa0
 8004fb8:	443b      	add	r3, r7
 8004fba:	3b88      	subs	r3, #136	; 0x88
 8004fbc:	ed93 6b00 	vldr	d6, [r3]
 8004fc0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004fc4:	eeb0 1a46 	vmov.f32	s2, s12
 8004fc8:	eef0 1a66 	vmov.f32	s3, s13
 8004fcc:	eeb0 0a47 	vmov.f32	s0, s14
 8004fd0:	eef0 0a67 	vmov.f32	s1, s15
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	6978      	ldr	r0, [r7, #20]
 8004fd8:	f7fd fbc6 	bl	8002768 <build_Operation>
	for(uint8_t i=1; i<5; i++)
 8004fdc:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8004fe6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d9d7      	bls.n	8004f9e <set_operation_square+0x112>
	}
	//Agregamos indicador de la operacion final
	prtList[parameter_build.number_operation+1].operacion = NULL_OPERATION;
 8004fee:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	015b      	lsls	r3, r3, #5
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
}
 8004ffe:	bf00      	nop
 8005000:	37a0      	adds	r7, #160	; 0xa0
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <set_operation_AStar>:


void set_operation_AStar(Parameters_Operation_t *prtList, file_cell_t *file_cell)
{
 8005008:	b5b0      	push	{r4, r5, r7, lr}
 800500a:	b090      	sub	sp, #64	; 0x40
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
	//Definicion de variables
	Parameter_build_t parameter_build = {0};
 8005012:	f107 0308 	add.w	r3, r7, #8
 8005016:	2230      	movs	r2, #48	; 0x30
 8005018:	2100      	movs	r1, #0
 800501a:	4618      	mov	r0, r3
 800501c:	f003 fa76 	bl	800850c <memset>
	//Definimos la posicion inicial del cuadrado
	parameter_build.initline_x = (file_cell->ptrCell_parent[0]->coor_x)*100; parameter_build.initline_y = (file_cell->ptrCell_parent[0]->coor_y)*100;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	edd3 7a01 	vldr	s15, [r3, #4]
 8005028:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005128 <set_operation_AStar+0x120>
 800502c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005030:	ee17 0a90 	vmov	r0, s15
 8005034:	f7fb faa0 	bl	8000578 <__aeabi_f2d>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	edd3 7a02 	vldr	s15, [r3, #8]
 8005048:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005128 <set_operation_AStar+0x120>
 800504c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005050:	ee17 0a90 	vmov	r0, s15
 8005054:	f7fb fa90 	bl	8000578 <__aeabi_f2d>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	parameter_build.grad_vector_init = 0; parameter_build.number_operation = 0;
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800506c:	2300      	movs	r3, #0
 800506e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	parameter_build.delta_before[0] = 0; parameter_build.delta_before[1] = 10;
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	4b2a      	ldr	r3, [pc, #168]	; (800512c <set_operation_AStar+0x124>)
 8005084:	e9c7 2308 	strd	r2, r3, [r7, #32]
	//Construccion de las operaciones
	for(uint8_t i=1; i<100; i++)
 8005088:	2301      	movs	r3, #1
 800508a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800508e:	e038      	b.n	8005102 <set_operation_AStar+0xfa>
	{
		//Comprobamos si la celda no es un elemento nulo
		if(file_cell->ptrCell_parent[i] != NULL)
 8005090:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d035      	beq.n	800510c <set_operation_AStar+0x104>
		{
			build_Operation(prtList, &parameter_build, (file_cell->ptrCell_parent[i]->coor_x)*100, (file_cell->ptrCell_parent[i]->coor_y)*100);
 80050a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80050b0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005128 <set_operation_AStar+0x120>
 80050b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050b8:	ee17 0a90 	vmov	r0, s15
 80050bc:	f7fb fa5c 	bl	8000578 <__aeabi_f2d>
 80050c0:	4604      	mov	r4, r0
 80050c2:	460d      	mov	r5, r1
 80050c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80050d4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005128 <set_operation_AStar+0x120>
 80050d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050dc:	ee17 0a90 	vmov	r0, s15
 80050e0:	f7fb fa4a 	bl	8000578 <__aeabi_f2d>
 80050e4:	f107 0308 	add.w	r3, r7, #8
 80050e8:	ec41 0b11 	vmov	d1, r0, r1
 80050ec:	ec45 4b10 	vmov	d0, r4, r5
 80050f0:	4619      	mov	r1, r3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fd fb38 	bl	8002768 <build_Operation>
	for(uint8_t i=1; i<100; i++)
 80050f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80050fc:	3301      	adds	r3, #1
 80050fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005102:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005106:	2b63      	cmp	r3, #99	; 0x63
 8005108:	d9c2      	bls.n	8005090 <set_operation_AStar+0x88>
 800510a:	e000      	b.n	800510e <set_operation_AStar+0x106>
		}
		else{break;}
 800510c:	bf00      	nop
	}
	//Agregamos indicador de la operacion final
	prtList[parameter_build.number_operation+1].operacion = NULL_OPERATION;
 800510e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005112:	3301      	adds	r3, #1
 8005114:	015b      	lsls	r3, r3, #5
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4413      	add	r3, r2
 800511a:	2200      	movs	r2, #0
 800511c:	701a      	strb	r2, [r3, #0]
}
 800511e:	bf00      	nop
 8005120:	3740      	adds	r7, #64	; 0x40
 8005122:	46bd      	mov	sp, r7
 8005124:	bdb0      	pop	{r4, r5, r7, pc}
 8005126:	bf00      	nop
 8005128:	42c80000 	.word	0x42c80000
 800512c:	40240000 	.word	0x40240000

08005130 <PID_simple>:

//----------------------------Inicio de la definicion de las funciones-----------------------------------------


void PID_simple(Parameters_PID_t *ptrPIDHandler, float timer, float setpoint, float measure)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	ed87 0a02 	vstr	s0, [r7, #8]
 800513c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005140:	ed87 1a00 	vstr	s2, [r7]
	//Calculo del error
	ptrPIDHandler->e = setpoint-measure;
 8005144:	ed97 7a01 	vldr	s14, [r7, #4]
 8005148:	edd7 7a00 	vldr	s15, [r7]
 800514c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float pro =  ptrPIDHandler->kp*ptrPIDHandler->e;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	ed93 7a04 	vldr	s14, [r3, #16]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005166:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->e_intel +=  ptrPIDHandler->e*timer;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	edd3 6a01 	vldr	s13, [r3, #4]
 8005176:	edd7 7a02 	vldr	s15, [r7, #8]
 800517a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800517e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	edc3 7a02 	vstr	s15, [r3, #8]
	float deriv =  ptrPIDHandler->kd*(ptrPIDHandler->e - ptrPIDHandler->e_prev)/timer;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	ed93 7a06 	vldr	s14, [r3, #24]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	edd3 6a01 	vldr	s13, [r3, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	edd3 7a03 	vldr	s15, [r3, #12]
 800519a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800519e:	ee67 6a27 	vmul.f32	s13, s14, s15
 80051a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80051a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051aa:	edc7 7a04 	vstr	s15, [r7, #16]
	ptrPIDHandler->u =  pro + ptrPIDHandler->ki*ptrPIDHandler->e_intel + deriv;        //Ley del controlador PID discreto
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80051ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051be:	edd7 7a05 	vldr	s15, [r7, #20]
 80051c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80051ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	edc3 7a00 	vstr	s15, [r3]
     //Retorno a los valores reales
	ptrPIDHandler->e_prev = ptrPIDHandler->e;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	60da      	str	r2, [r3, #12]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <correction>:

void correction(Motor_Handler_t *ptrMotorHandler)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	//Definimos variables auxiliares
	float port_dutty = 0;
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]
	//Guardamos valor
	port_dutty = ptrMotorHandler->configMotor.new_dutty;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	60fb      	str	r3, [r7, #12]
    //Saturo el porcentaje de dutty en un tope maximo y minimo
    if (port_dutty >= 60) { port_dutty = 60; }
 80051fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005200:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005258 <correction+0x70>
 8005204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520c:	db02      	blt.n	8005214 <correction+0x2c>
 800520e:	4b13      	ldr	r3, [pc, #76]	; (800525c <correction+0x74>)
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	e018      	b.n	8005246 <correction+0x5e>
    else if(port_dutty <= duttySetPoint-5) { port_dutty = duttySetPoint-5; }
 8005214:	4b12      	ldr	r3, [pc, #72]	; (8005260 <correction+0x78>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	3b05      	subs	r3, #5
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005222:	ed97 7a03 	vldr	s14, [r7, #12]
 8005226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800522a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522e:	d809      	bhi.n	8005244 <correction+0x5c>
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <correction+0x78>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	3b05      	subs	r3, #5
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800523e:	edc7 7a03 	vstr	s15, [r7, #12]
 8005242:	e000      	b.n	8005246 <correction+0x5e>
    else{ __NOP();}
 8005244:	bf00      	nop

    //Actualizamoe el valor del dutty
    updateDuttyMotor(ptrMotorHandler, port_dutty);
 8005246:	ed97 0a03 	vldr	s0, [r7, #12]
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fd fa46 	bl	80026dc <updateDuttyMotor>
}
 8005250:	bf00      	nop
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	42700000 	.word	0x42700000
 800525c:	42700000 	.word	0x42700000
 8005260:	20000018 	.word	0x20000018

08005264 <status_motor>:

//--------------------Operacion Motor----------------------
void status_motor(uint8_t status)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d134      	bne.n	80052de <status_motor+0x7a>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8005274:	4b39      	ldr	r3, [pc, #228]	; (800535c <status_motor+0xf8>)
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	2101      	movs	r1, #1
 800527a:	4618      	mov	r0, r3
 800527c:	f002 fa10 	bl	80076a0 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8005280:	4b37      	ldr	r3, [pc, #220]	; (8005360 <status_motor+0xfc>)
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	2101      	movs	r1, #1
 8005286:	4618      	mov	r0, r3
 8005288:	f002 fa0a 	bl	80076a0 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 800528c:	4b33      	ldr	r3, [pc, #204]	; (800535c <status_motor+0xf8>)
 800528e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005290:	4b32      	ldr	r3, [pc, #200]	; (800535c <status_motor+0xf8>)
 8005292:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	b2db      	uxtb	r3, r3
 800529c:	4619      	mov	r1, r3
 800529e:	4610      	mov	r0, r2
 80052a0:	f001 fd26 	bl	8006cf0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 80052a4:	4b2e      	ldr	r3, [pc, #184]	; (8005360 <status_motor+0xfc>)
 80052a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052a8:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <status_motor+0xfc>)
 80052aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	4619      	mov	r1, r3
 80052b6:	4610      	mov	r0, r2
 80052b8:	f001 fd1a 	bl	8006cf0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 80052bc:	4b27      	ldr	r3, [pc, #156]	; (800535c <status_motor+0xf8>)
 80052be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c0:	2180      	movs	r1, #128	; 0x80
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 fd14 	bl	8006cf0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 80052c8:	4b25      	ldr	r3, [pc, #148]	; (8005360 <status_motor+0xfc>)
 80052ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052cc:	2180      	movs	r1, #128	; 0x80
 80052ce:	4618      	mov	r0, r3
 80052d0:	f001 fd0e 	bl	8006cf0 <GPIO_writePin>
		//Activamos la interrupcion
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_ENABLE);
 80052d4:	2101      	movs	r1, #1
 80052d6:	4823      	ldr	r0, [pc, #140]	; (8005364 <status_motor+0x100>)
 80052d8:	f000 fac8 	bl	800586c <statusiInterruptionTimer>
		flag_mode = 0;
		//Desactivamos interrupcion
		delay_ms(200);
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
	}
}
 80052dc:	e039      	b.n	8005352 <status_motor+0xee>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 80052de:	4b1f      	ldr	r3, [pc, #124]	; (800535c <status_motor+0xf8>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	2100      	movs	r1, #0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f002 f9db 	bl	80076a0 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 80052ea:	4b1d      	ldr	r3, [pc, #116]	; (8005360 <status_motor+0xfc>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	2100      	movs	r1, #0
 80052f0:	4618      	mov	r0, r3
 80052f2:	f002 f9d5 	bl	80076a0 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 80052f6:	4b19      	ldr	r3, [pc, #100]	; (800535c <status_motor+0xf8>)
 80052f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fa:	4b18      	ldr	r3, [pc, #96]	; (800535c <status_motor+0xf8>)
 80052fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005300:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005304:	b2db      	uxtb	r3, r3
 8005306:	4619      	mov	r1, r3
 8005308:	4610      	mov	r0, r2
 800530a:	f001 fcf1 	bl	8006cf0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 800530e:	4b14      	ldr	r3, [pc, #80]	; (8005360 <status_motor+0xfc>)
 8005310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005312:	4b13      	ldr	r3, [pc, #76]	; (8005360 <status_motor+0xfc>)
 8005314:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005318:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800531c:	b2db      	uxtb	r3, r3
 800531e:	4619      	mov	r1, r3
 8005320:	4610      	mov	r0, r2
 8005322:	f001 fce5 	bl	8006cf0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <status_motor+0xf8>)
 8005328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532a:	2101      	movs	r1, #1
 800532c:	4618      	mov	r0, r3
 800532e:	f001 fcdf 	bl	8006cf0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 8005332:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <status_motor+0xfc>)
 8005334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005336:	2101      	movs	r1, #1
 8005338:	4618      	mov	r0, r3
 800533a:	f001 fcd9 	bl	8006cf0 <GPIO_writePin>
		flag_mode = 0;
 800533e:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <status_motor+0x104>)
 8005340:	2200      	movs	r2, #0
 8005342:	701a      	strb	r2, [r3, #0]
		delay_ms(200);
 8005344:	20c8      	movs	r0, #200	; 0xc8
 8005346:	f002 fb8f 	bl	8007a68 <delay_ms>
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
 800534a:	2100      	movs	r1, #0
 800534c:	4805      	ldr	r0, [pc, #20]	; (8005364 <status_motor+0x100>)
 800534e:	f000 fa8d 	bl	800586c <statusiInterruptionTimer>
}
 8005352:	bf00      	nop
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	2000038c 	.word	0x2000038c
 8005360:	20000318 	.word	0x20000318
 8005364:	200003e0 	.word	0x200003e0
 8005368:	20009426 	.word	0x20009426

0800536c <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third)  //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	ed87 0a01 	vstr	s0, [r7, #4]
 800537a:	edc7 0a00 	vstr	s1, [r7]
 800537e:	73fb      	strb	r3, [r7, #15]
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 8005380:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <config_motor+0x74>)
 8005382:	2200      	movs	r2, #0
 8005384:	839a      	strh	r2, [r3, #28]
	handler_Motor_L.parametersMotor.count = 0;
 8005386:	4b17      	ldr	r3, [pc, #92]	; (80053e4 <config_motor+0x78>)
 8005388:	2200      	movs	r2, #0
 800538a:	839a      	strh	r2, [r3, #28]
	//Actualizamos el valor del dutty y frecuencia
	value_period = 100000/third;
 800538c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80053e8 <config_motor+0x7c>
 8005390:	ed97 7a00 	vldr	s14, [r7]
 8005394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800539c:	ee17 3a90 	vmov	r3, s15
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <config_motor+0x80>)
 80053a4:	801a      	strh	r2, [r3, #0]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 80053a6:	4b11      	ldr	r3, [pc, #68]	; (80053ec <config_motor+0x80>)
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	4619      	mov	r1, r3
 80053ac:	4810      	ldr	r0, [pc, #64]	; (80053f0 <config_motor+0x84>)
 80053ae:	f000 fa7d 	bl	80058ac <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, second);
 80053b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80053b6:	480a      	ldr	r0, [pc, #40]	; (80053e0 <config_motor+0x74>)
 80053b8:	f7fd f990 	bl	80026dc <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, firth);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053c6:	eeb0 0a67 	vmov.f32	s0, s15
 80053ca:	4806      	ldr	r0, [pc, #24]	; (80053e4 <config_motor+0x78>)
 80053cc:	f7fd f986 	bl	80026dc <updateDuttyMotor>
	//Cambio valor bandera
	flag_mode=status;
 80053d0:	4a08      	ldr	r2, [pc, #32]	; (80053f4 <config_motor+0x88>)
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	7013      	strb	r3, [r2, #0]
}
 80053d6:	bf00      	nop
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000318 	.word	0x20000318
 80053e4:	2000038c 	.word	0x2000038c
 80053e8:	47c35000 	.word	0x47c35000
 80053ec:	20000012 	.word	0x20000012
 80053f0:	200003d0 	.word	0x200003d0
 80053f4:	20009426 	.word	0x20009426

080053f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80053f8:	480d      	ldr	r0, [pc, #52]	; (8005430 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80053fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80053fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005400:	480c      	ldr	r0, [pc, #48]	; (8005434 <LoopForever+0x6>)
  ldr r1, =_edata
 8005402:	490d      	ldr	r1, [pc, #52]	; (8005438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005404:	4a0d      	ldr	r2, [pc, #52]	; (800543c <LoopForever+0xe>)
  movs r3, #0
 8005406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005408:	e002      	b.n	8005410 <LoopCopyDataInit>

0800540a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800540a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800540c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800540e:	3304      	adds	r3, #4

08005410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005414:	d3f9      	bcc.n	800540a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005416:	4a0a      	ldr	r2, [pc, #40]	; (8005440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005418:	4c0a      	ldr	r4, [pc, #40]	; (8005444 <LoopForever+0x16>)
  movs r3, #0
 800541a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800541c:	e001      	b.n	8005422 <LoopFillZerobss>

0800541e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800541e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005420:	3204      	adds	r2, #4

08005422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005424:	d3fb      	bcc.n	800541e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005426:	f003 f84d 	bl	80084c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800542a:	f7fd ff59 	bl	80032e0 <main>

0800542e <LoopForever>:

LoopForever:
    b LoopForever
 800542e:	e7fe      	b.n	800542e <LoopForever>
  ldr   r0, =_estack
 8005430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005438:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800543c:	08010ad0 	.word	0x08010ad0
  ldr r2, =_sbss
 8005440:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005444:	20009d08 	.word	0x20009d08

08005448 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005448:	e7fe      	b.n	8005448 <ADC_IRQHandler>

0800544a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800544a:	b480      	push	{r7}
 800544c:	af00      	add	r7, sp, #0
	return 1;
 800544e:	2301      	movs	r3, #1
}
 8005450:	4618      	mov	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <_kill>:

int _kill(int pid, int sig)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b082      	sub	sp, #8
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005464:	f003 f828 	bl	80084b8 <__errno>
 8005468:	4603      	mov	r3, r0
 800546a:	2216      	movs	r2, #22
 800546c:	601a      	str	r2, [r3, #0]
	return -1;
 800546e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <_exit>:

void _exit (int status)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005482:	f04f 31ff 	mov.w	r1, #4294967295
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff ffe7 	bl	800545a <_kill>
	while (1) {}		/* Make sure we hang here */
 800548c:	e7fe      	b.n	800548c <_exit+0x12>

0800548e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b086      	sub	sp, #24
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	e00a      	b.n	80054b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80054a0:	f3af 8000 	nop.w
 80054a4:	4601      	mov	r1, r0
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	60ba      	str	r2, [r7, #8]
 80054ac:	b2ca      	uxtb	r2, r1
 80054ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	3301      	adds	r3, #1
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	dbf0      	blt.n	80054a0 <_read+0x12>
	}

return len;
 80054be:	687b      	ldr	r3, [r7, #4]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e009      	b.n	80054ee <_write+0x26>
	{
		__io_putchar(*ptr++);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	60ba      	str	r2, [r7, #8]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	3301      	adds	r3, #1
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	dbf1      	blt.n	80054da <_write+0x12>
	}
	return len;
 80054f6:	687b      	ldr	r3, [r7, #4]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <_close>:

int _close(int file)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	return -1;
 8005508:	f04f 33ff 	mov.w	r3, #4294967295
}
 800550c:	4618      	mov	r0, r3
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005528:	605a      	str	r2, [r3, #4]
	return 0;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <_isatty>:

int _isatty(int file)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	return 1;
 8005540:	2301      	movs	r3, #1
}
 8005542:	4618      	mov	r0, r3
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
	return 0;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005570:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <_sbrk+0x5c>)
 8005572:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <_sbrk+0x60>)
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800557c:	4b13      	ldr	r3, [pc, #76]	; (80055cc <_sbrk+0x64>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d102      	bne.n	800558a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005584:	4b11      	ldr	r3, [pc, #68]	; (80055cc <_sbrk+0x64>)
 8005586:	4a12      	ldr	r2, [pc, #72]	; (80055d0 <_sbrk+0x68>)
 8005588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800558a:	4b10      	ldr	r3, [pc, #64]	; (80055cc <_sbrk+0x64>)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	429a      	cmp	r2, r3
 8005596:	d207      	bcs.n	80055a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005598:	f002 ff8e 	bl	80084b8 <__errno>
 800559c:	4603      	mov	r3, r0
 800559e:	220c      	movs	r2, #12
 80055a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055a2:	f04f 33ff 	mov.w	r3, #4294967295
 80055a6:	e009      	b.n	80055bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055a8:	4b08      	ldr	r3, [pc, #32]	; (80055cc <_sbrk+0x64>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055ae:	4b07      	ldr	r3, [pc, #28]	; (80055cc <_sbrk+0x64>)
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4413      	add	r3, r2
 80055b6:	4a05      	ldr	r2, [pc, #20]	; (80055cc <_sbrk+0x64>)
 80055b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055ba:	68fb      	ldr	r3, [r7, #12]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20020000 	.word	0x20020000
 80055c8:	00000400 	.word	0x00000400
 80055cc:	20009480 	.word	0x20009480
 80055d0:	20009d08 	.word	0x20009d08

080055d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	db0b      	blt.n	80055fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	f003 021f 	and.w	r2, r3, #31
 80055ec:	4907      	ldr	r1, [pc, #28]	; (800560c <__NVIC_EnableIRQ+0x38>)
 80055ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	2001      	movs	r0, #1
 80055f6:	fa00 f202 	lsl.w	r2, r0, r2
 80055fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	e000e100 	.word	0xe000e100

08005610 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005620:	d10a      	bne.n	8005638 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8005622:	4b62      	ldr	r3, [pc, #392]	; (80057ac <BasicTimer_Config+0x19c>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	4a61      	ldr	r2, [pc, #388]	; (80057ac <BasicTimer_Config+0x19c>)
 8005628:	f043 0301 	orr.w	r3, r3, #1
 800562c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	4a5f      	ldr	r2, [pc, #380]	; (80057b0 <BasicTimer_Config+0x1a0>)
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	e02e      	b.n	8005696 <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4a5d      	ldr	r2, [pc, #372]	; (80057b4 <BasicTimer_Config+0x1a4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d10a      	bne.n	8005658 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8005642:	4b5a      	ldr	r3, [pc, #360]	; (80057ac <BasicTimer_Config+0x19c>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	4a59      	ldr	r2, [pc, #356]	; (80057ac <BasicTimer_Config+0x19c>)
 8005648:	f043 0302 	orr.w	r3, r3, #2
 800564c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	4a59      	ldr	r2, [pc, #356]	; (80057b8 <BasicTimer_Config+0x1a8>)
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e01e      	b.n	8005696 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4a57      	ldr	r2, [pc, #348]	; (80057bc <BasicTimer_Config+0x1ac>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d10a      	bne.n	8005678 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8005662:	4b52      	ldr	r3, [pc, #328]	; (80057ac <BasicTimer_Config+0x19c>)
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	4a51      	ldr	r2, [pc, #324]	; (80057ac <BasicTimer_Config+0x19c>)
 8005668:	f043 0304 	orr.w	r3, r3, #4
 800566c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	4a53      	ldr	r2, [pc, #332]	; (80057c0 <BasicTimer_Config+0x1b0>)
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e00e      	b.n	8005696 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a51      	ldr	r2, [pc, #324]	; (80057c4 <BasicTimer_Config+0x1b4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d109      	bne.n	8005696 <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8005682:	4b4a      	ldr	r3, [pc, #296]	; (80057ac <BasicTimer_Config+0x19c>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	4a49      	ldr	r2, [pc, #292]	; (80057ac <BasicTimer_Config+0x19c>)
 8005688:	f043 0308 	orr.w	r3, r3, #8
 800568c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	4a4d      	ldr	r2, [pc, #308]	; (80057c8 <BasicTimer_Config+0x1b8>)
 8005694:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 8005696:	f001 fdf3 	bl	8007280 <getConfigPLL>
 800569a:	4603      	mov	r3, r0
 800569c:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 800569e:	f001 fe0b 	bl	80072b8 <getClockAPB1>
 80056a2:	4603      	mov	r3, r0
 80056a4:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 80056a6:	7bbb      	ldrb	r3, [r7, #14]
 80056a8:	2b31      	cmp	r3, #49	; 0x31
 80056aa:	d903      	bls.n	80056b4 <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
 80056b2:	e000      	b.n	80056b6 <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 80056b4:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	8852      	ldrh	r2, [r2, #2]
 80056bc:	fb02 f303 	mul.w	r3, r2, r3
 80056c0:	1e5a      	subs	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d112      	bne.n	80056f6 <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f022 0210 	bic.w	r2, r2, #16
 80056de:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	3201      	adds	r2, #1
 80056ea:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	625a      	str	r2, [r3, #36]	; 0x24
 80056f4:	e018      	b.n	8005728 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f022 0210 	bic.w	r2, r2, #16
 8005704:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f042 0210 	orr.w	r2, r2, #16
 8005714:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6852      	ldr	r2, [r2, #4]
 8005726:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005728:	b672      	cpsid	i
}
 800572a:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005734:	d103      	bne.n	800573e <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8005736:	201c      	movs	r0, #28
 8005738:	f7ff ff4c 	bl	80055d4 <__NVIC_EnableIRQ>
 800573c:	e019      	b.n	8005772 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	4a1c      	ldr	r2, [pc, #112]	; (80057b4 <BasicTimer_Config+0x1a4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d103      	bne.n	8005750 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8005748:	201d      	movs	r0, #29
 800574a:	f7ff ff43 	bl	80055d4 <__NVIC_EnableIRQ>
 800574e:	e010      	b.n	8005772 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a19      	ldr	r2, [pc, #100]	; (80057bc <BasicTimer_Config+0x1ac>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d103      	bne.n	8005762 <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 800575a:	201e      	movs	r0, #30
 800575c:	f7ff ff3a 	bl	80055d4 <__NVIC_EnableIRQ>
 8005760:	e007      	b.n	8005772 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	4a17      	ldr	r2, [pc, #92]	; (80057c4 <BasicTimer_Config+0x1b4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d102      	bne.n	8005772 <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 800576c:	2032      	movs	r0, #50	; 0x32
 800576e:	f7ff ff31 	bl	80055d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8005772:	b662      	cpsie	i
}
 8005774:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	7a1b      	ldrb	r3, [r3, #8]
 800577a:	4619      	mov	r1, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f875 	bl	800586c <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f022 0201 	bic.w	r2, r2, #1
 8005790:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f042 0201 	orr.w	r2, r2, #1
 80057a0:	601a      	str	r2, [r3, #0]
}
 80057a2:	bf00      	nop
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40023800 	.word	0x40023800
 80057b0:	20009484 	.word	0x20009484
 80057b4:	40000400 	.word	0x40000400
 80057b8:	20009488 	.word	0x20009488
 80057bc:	40000800 	.word	0x40000800
 80057c0:	2000948c 	.word	0x2000948c
 80057c4:	40000c00 	.word	0x40000c00
 80057c8:	20009490 	.word	0x20009490

080057cc <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
	__NOP();
 80057d0:	bf00      	nop
}
 80057d2:	bf00      	nop
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
	__NOP();
 80057e0:	bf00      	nop
}
 80057e2:	bf00      	nop
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <TIM2_IRQHandler+0x1c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	4b04      	ldr	r3, [pc, #16]	; (8005808 <TIM2_IRQHandler+0x1c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0201 	bic.w	r2, r2, #1
 80057fe:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8005800:	f7fe fb76 	bl	8003ef0 <BasicTimer2_Callback>

}
 8005804:	bf00      	nop
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20009484 	.word	0x20009484

0800580c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <TIM3_IRQHandler+0x1c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691a      	ldr	r2, [r3, #16]
 8005816:	4b04      	ldr	r3, [pc, #16]	; (8005828 <TIM3_IRQHandler+0x1c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8005820:	f7fe fb8a 	bl	8003f38 <BasicTimer3_Callback>

}
 8005824:	bf00      	nop
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20009488 	.word	0x20009488

0800582c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8005830:	4b05      	ldr	r3, [pc, #20]	; (8005848 <TIM4_IRQHandler+0x1c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	4b04      	ldr	r3, [pc, #16]	; (8005848 <TIM4_IRQHandler+0x1c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0201 	bic.w	r2, r2, #1
 800583e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8005840:	f7ff ffc4 	bl	80057cc <BasicTimer4_Callback>

}
 8005844:	bf00      	nop
 8005846:	bd80      	pop	{r7, pc}
 8005848:	2000948c 	.word	0x2000948c

0800584c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8005850:	4b05      	ldr	r3, [pc, #20]	; (8005868 <TIM5_IRQHandler+0x1c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	4b04      	ldr	r3, [pc, #16]	; (8005868 <TIM5_IRQHandler+0x1c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0201 	bic.w	r2, r2, #1
 800585e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8005860:	f7ff ffbc 	bl	80057dc <BasicTimer5_Callback>

}
 8005864:	bf00      	nop
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20009490 	.word	0x20009490

0800586c <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d108      	bne.n	8005890 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f042 0201 	orr.w	r2, r2, #1
 800588c:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 800588e:	e007      	b.n	80058a0 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f022 0201 	bic.w	r2, r2, #1
 800589e:	60da      	str	r2, [r3, #12]
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	460b      	mov	r3, r1
 80058b6:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 80058b8:	887a      	ldrh	r2, [r7, #2]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6852      	ldr	r2, [r2, #4]
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <__NVIC_EnableIRQ>:
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	db0b      	blt.n	8005906 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	f003 021f 	and.w	r2, r3, #31
 80058f4:	4907      	ldr	r1, [pc, #28]	; (8005914 <__NVIC_EnableIRQ+0x38>)
 80058f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	2001      	movs	r0, #1
 80058fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	e000e100 	.word	0xe000e100

08005918 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af02      	add	r7, sp, #8
 800591e:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	2300      	movs	r3, #0
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	2300      	movs	r3, #0
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	2301      	movs	r3, #1
 800592e:	2200      	movs	r2, #0
 8005930:	2100      	movs	r1, #0
 8005932:	f001 f891 	bl	8006a58 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f001 f8ae 	bl	8006a9c <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8005940:	4b97      	ldr	r3, [pc, #604]	; (8005ba0 <extInt_Config+0x288>)
 8005942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005944:	4a96      	ldr	r2, [pc, #600]	; (8005ba0 <extInt_Config+0x288>)
 8005946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800594a:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b0f      	cmp	r3, #15
 8005954:	f200 85cf 	bhi.w	80064f6 <extInt_Config+0xbde>
 8005958:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <extInt_Config+0x48>)
 800595a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595e:	bf00      	nop
 8005960:	080059a1 	.word	0x080059a1
 8005964:	08005a57 	.word	0x08005a57
 8005968:	08005b0d 	.word	0x08005b0d
 800596c:	08005be3 	.word	0x08005be3
 8005970:	08005c99 	.word	0x08005c99
 8005974:	08005d47 	.word	0x08005d47
 8005978:	08005e0d 	.word	0x08005e0d
 800597c:	08005eb5 	.word	0x08005eb5
 8005980:	08005f5d 	.word	0x08005f5d
 8005984:	08006005 	.word	0x08006005
 8005988:	080060cb 	.word	0x080060cb
 800598c:	08006173 	.word	0x08006173
 8005990:	0800621b 	.word	0x0800621b
 8005994:	080062e1 	.word	0x080062e1
 8005998:	08006389 	.word	0x08006389
 800599c:	08006431 	.word	0x08006431
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 80059a0:	4b80      	ldr	r3, [pc, #512]	; (8005ba4 <extInt_Config+0x28c>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4a7f      	ldr	r2, [pc, #508]	; (8005ba4 <extInt_Config+0x28c>)
 80059a6:	f023 030f 	bic.w	r3, r3, #15
 80059aa:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	4a7d      	ldr	r2, [pc, #500]	; (8005ba8 <extInt_Config+0x290>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d105      	bne.n	80059c4 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80059b8:	4b7a      	ldr	r3, [pc, #488]	; (8005ba4 <extInt_Config+0x28c>)
 80059ba:	4a7a      	ldr	r2, [pc, #488]	; (8005ba4 <extInt_Config+0x28c>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80059c0:	f000 bd9b 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	4a78      	ldr	r2, [pc, #480]	; (8005bac <extInt_Config+0x294>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d107      	bne.n	80059e0 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80059d0:	4b74      	ldr	r3, [pc, #464]	; (8005ba4 <extInt_Config+0x28c>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4a73      	ldr	r2, [pc, #460]	; (8005ba4 <extInt_Config+0x28c>)
 80059d6:	f043 0301 	orr.w	r3, r3, #1
 80059da:	6093      	str	r3, [r2, #8]
		break;
 80059dc:	f000 bd8d 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	4a72      	ldr	r2, [pc, #456]	; (8005bb0 <extInt_Config+0x298>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d107      	bne.n	80059fc <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 80059ec:	4b6d      	ldr	r3, [pc, #436]	; (8005ba4 <extInt_Config+0x28c>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	4a6c      	ldr	r2, [pc, #432]	; (8005ba4 <extInt_Config+0x28c>)
 80059f2:	f043 0302 	orr.w	r3, r3, #2
 80059f6:	6093      	str	r3, [r2, #8]
		break;
 80059f8:	f000 bd7f 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	4a6c      	ldr	r2, [pc, #432]	; (8005bb4 <extInt_Config+0x29c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d107      	bne.n	8005a18 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8005a08:	4b66      	ldr	r3, [pc, #408]	; (8005ba4 <extInt_Config+0x28c>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4a65      	ldr	r2, [pc, #404]	; (8005ba4 <extInt_Config+0x28c>)
 8005a0e:	f043 0303 	orr.w	r3, r3, #3
 8005a12:	6093      	str	r3, [r2, #8]
		break;
 8005a14:	f000 bd71 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	4a66      	ldr	r2, [pc, #408]	; (8005bb8 <extInt_Config+0x2a0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d107      	bne.n	8005a34 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8005a24:	4b5f      	ldr	r3, [pc, #380]	; (8005ba4 <extInt_Config+0x28c>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	4a5e      	ldr	r2, [pc, #376]	; (8005ba4 <extInt_Config+0x28c>)
 8005a2a:	f043 0304 	orr.w	r3, r3, #4
 8005a2e:	6093      	str	r3, [r2, #8]
		break;
 8005a30:	f000 bd63 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	4a60      	ldr	r2, [pc, #384]	; (8005bbc <extInt_Config+0x2a4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d107      	bne.n	8005a50 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8005a40:	4b58      	ldr	r3, [pc, #352]	; (8005ba4 <extInt_Config+0x28c>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	4a57      	ldr	r2, [pc, #348]	; (8005ba4 <extInt_Config+0x28c>)
 8005a46:	f043 0307 	orr.w	r3, r3, #7
 8005a4a:	6093      	str	r3, [r2, #8]
		break;
 8005a4c:	f000 bd55 	b.w	80064fa <extInt_Config+0xbe2>
			__NOP();
 8005a50:	bf00      	nop
		break;
 8005a52:	f000 bd52 	b.w	80064fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8005a56:	4b53      	ldr	r3, [pc, #332]	; (8005ba4 <extInt_Config+0x28c>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	4a52      	ldr	r2, [pc, #328]	; (8005ba4 <extInt_Config+0x28c>)
 8005a5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a60:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	4a4f      	ldr	r2, [pc, #316]	; (8005ba8 <extInt_Config+0x290>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d105      	bne.n	8005a7a <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8005a6e:	4b4d      	ldr	r3, [pc, #308]	; (8005ba4 <extInt_Config+0x28c>)
 8005a70:	4a4c      	ldr	r2, [pc, #304]	; (8005ba4 <extInt_Config+0x28c>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8005a76:	f000 bd40 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	4a4a      	ldr	r2, [pc, #296]	; (8005bac <extInt_Config+0x294>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d107      	bne.n	8005a96 <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8005a86:	4b47      	ldr	r3, [pc, #284]	; (8005ba4 <extInt_Config+0x28c>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	4a46      	ldr	r2, [pc, #280]	; (8005ba4 <extInt_Config+0x28c>)
 8005a8c:	f043 0310 	orr.w	r3, r3, #16
 8005a90:	6093      	str	r3, [r2, #8]
		break;
 8005a92:	f000 bd32 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	4a44      	ldr	r2, [pc, #272]	; (8005bb0 <extInt_Config+0x298>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d107      	bne.n	8005ab2 <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8005aa2:	4b40      	ldr	r3, [pc, #256]	; (8005ba4 <extInt_Config+0x28c>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	4a3f      	ldr	r2, [pc, #252]	; (8005ba4 <extInt_Config+0x28c>)
 8005aa8:	f043 0320 	orr.w	r3, r3, #32
 8005aac:	6093      	str	r3, [r2, #8]
		break;
 8005aae:	f000 bd24 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	4a3e      	ldr	r2, [pc, #248]	; (8005bb4 <extInt_Config+0x29c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d107      	bne.n	8005ace <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8005abe:	4b39      	ldr	r3, [pc, #228]	; (8005ba4 <extInt_Config+0x28c>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	4a38      	ldr	r2, [pc, #224]	; (8005ba4 <extInt_Config+0x28c>)
 8005ac4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005ac8:	6093      	str	r3, [r2, #8]
		break;
 8005aca:	f000 bd16 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	4a38      	ldr	r2, [pc, #224]	; (8005bb8 <extInt_Config+0x2a0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d107      	bne.n	8005aea <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8005ada:	4b32      	ldr	r3, [pc, #200]	; (8005ba4 <extInt_Config+0x28c>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	4a31      	ldr	r2, [pc, #196]	; (8005ba4 <extInt_Config+0x28c>)
 8005ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae4:	6093      	str	r3, [r2, #8]
		break;
 8005ae6:	f000 bd08 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	4a32      	ldr	r2, [pc, #200]	; (8005bbc <extInt_Config+0x2a4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d107      	bne.n	8005b06 <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8005af6:	4b2b      	ldr	r3, [pc, #172]	; (8005ba4 <extInt_Config+0x28c>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	4a2a      	ldr	r2, [pc, #168]	; (8005ba4 <extInt_Config+0x28c>)
 8005afc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005b00:	6093      	str	r3, [r2, #8]
		break;
 8005b02:	f000 bcfa 	b.w	80064fa <extInt_Config+0xbe2>
			__NOP();
 8005b06:	bf00      	nop
		break;
 8005b08:	f000 bcf7 	b.w	80064fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8005b0c:	4b25      	ldr	r3, [pc, #148]	; (8005ba4 <extInt_Config+0x28c>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	4a24      	ldr	r2, [pc, #144]	; (8005ba4 <extInt_Config+0x28c>)
 8005b12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b16:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	4a22      	ldr	r2, [pc, #136]	; (8005ba8 <extInt_Config+0x290>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d105      	bne.n	8005b30 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8005b24:	4b1f      	ldr	r3, [pc, #124]	; (8005ba4 <extInt_Config+0x28c>)
 8005b26:	4a1f      	ldr	r2, [pc, #124]	; (8005ba4 <extInt_Config+0x28c>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8005b2c:	f000 bce5 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	4a1d      	ldr	r2, [pc, #116]	; (8005bac <extInt_Config+0x294>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d107      	bne.n	8005b4c <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8005b3c:	4b19      	ldr	r3, [pc, #100]	; (8005ba4 <extInt_Config+0x28c>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <extInt_Config+0x28c>)
 8005b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b46:	6093      	str	r3, [r2, #8]
		break;
 8005b48:	f000 bcd7 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	4a17      	ldr	r2, [pc, #92]	; (8005bb0 <extInt_Config+0x298>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d107      	bne.n	8005b68 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8005b58:	4b12      	ldr	r3, [pc, #72]	; (8005ba4 <extInt_Config+0x28c>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	4a11      	ldr	r2, [pc, #68]	; (8005ba4 <extInt_Config+0x28c>)
 8005b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b62:	6093      	str	r3, [r2, #8]
		break;
 8005b64:	f000 bcc9 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	4a11      	ldr	r2, [pc, #68]	; (8005bb4 <extInt_Config+0x29c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d107      	bne.n	8005b84 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8005b74:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <extInt_Config+0x28c>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4a0a      	ldr	r2, [pc, #40]	; (8005ba4 <extInt_Config+0x28c>)
 8005b7a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005b7e:	6093      	str	r3, [r2, #8]
		break;
 8005b80:	f000 bcbb 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	4a0b      	ldr	r2, [pc, #44]	; (8005bb8 <extInt_Config+0x2a0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d117      	bne.n	8005bc0 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8005b90:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <extInt_Config+0x28c>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	4a03      	ldr	r2, [pc, #12]	; (8005ba4 <extInt_Config+0x28c>)
 8005b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b9a:	6093      	str	r3, [r2, #8]
		break;
 8005b9c:	f000 bcad 	b.w	80064fa <extInt_Config+0xbe2>
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	40013800 	.word	0x40013800
 8005ba8:	40020000 	.word	0x40020000
 8005bac:	40020400 	.word	0x40020400
 8005bb0:	40020800 	.word	0x40020800
 8005bb4:	40020c00 	.word	0x40020c00
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	4a8a      	ldr	r2, [pc, #552]	; (8005df0 <extInt_Config+0x4d8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d107      	bne.n	8005bdc <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8005bcc:	4b89      	ldr	r3, [pc, #548]	; (8005df4 <extInt_Config+0x4dc>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	4a88      	ldr	r2, [pc, #544]	; (8005df4 <extInt_Config+0x4dc>)
 8005bd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005bd6:	6093      	str	r3, [r2, #8]
		break;
 8005bd8:	f000 bc8f 	b.w	80064fa <extInt_Config+0xbe2>
			__NOP();
 8005bdc:	bf00      	nop
		break;
 8005bde:	f000 bc8c 	b.w	80064fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8005be2:	4b84      	ldr	r3, [pc, #528]	; (8005df4 <extInt_Config+0x4dc>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	4a83      	ldr	r2, [pc, #524]	; (8005df4 <extInt_Config+0x4dc>)
 8005be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bec:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	4a80      	ldr	r2, [pc, #512]	; (8005df8 <extInt_Config+0x4e0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d105      	bne.n	8005c06 <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8005bfa:	4b7e      	ldr	r3, [pc, #504]	; (8005df4 <extInt_Config+0x4dc>)
 8005bfc:	4a7d      	ldr	r2, [pc, #500]	; (8005df4 <extInt_Config+0x4dc>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8005c02:	f000 bc7a 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	4a7b      	ldr	r2, [pc, #492]	; (8005dfc <extInt_Config+0x4e4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d107      	bne.n	8005c22 <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8005c12:	4b78      	ldr	r3, [pc, #480]	; (8005df4 <extInt_Config+0x4dc>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	4a77      	ldr	r2, [pc, #476]	; (8005df4 <extInt_Config+0x4dc>)
 8005c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c1c:	6093      	str	r3, [r2, #8]
		break;
 8005c1e:	f000 bc6c 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	4a75      	ldr	r2, [pc, #468]	; (8005e00 <extInt_Config+0x4e8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d107      	bne.n	8005c3e <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8005c2e:	4b71      	ldr	r3, [pc, #452]	; (8005df4 <extInt_Config+0x4dc>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	4a70      	ldr	r2, [pc, #448]	; (8005df4 <extInt_Config+0x4dc>)
 8005c34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005c38:	6093      	str	r3, [r2, #8]
		break;
 8005c3a:	f000 bc5e 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	4a6f      	ldr	r2, [pc, #444]	; (8005e04 <extInt_Config+0x4ec>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d107      	bne.n	8005c5a <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8005c4a:	4b6a      	ldr	r3, [pc, #424]	; (8005df4 <extInt_Config+0x4dc>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	4a69      	ldr	r2, [pc, #420]	; (8005df4 <extInt_Config+0x4dc>)
 8005c50:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005c54:	6093      	str	r3, [r2, #8]
		break;
 8005c56:	f000 bc50 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	4a69      	ldr	r2, [pc, #420]	; (8005e08 <extInt_Config+0x4f0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d107      	bne.n	8005c76 <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8005c66:	4b63      	ldr	r3, [pc, #396]	; (8005df4 <extInt_Config+0x4dc>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	4a62      	ldr	r2, [pc, #392]	; (8005df4 <extInt_Config+0x4dc>)
 8005c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c70:	6093      	str	r3, [r2, #8]
		break;
 8005c72:	f000 bc42 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	4a5c      	ldr	r2, [pc, #368]	; (8005df0 <extInt_Config+0x4d8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d107      	bne.n	8005c92 <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8005c82:	4b5c      	ldr	r3, [pc, #368]	; (8005df4 <extInt_Config+0x4dc>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	4a5b      	ldr	r2, [pc, #364]	; (8005df4 <extInt_Config+0x4dc>)
 8005c88:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005c8c:	6093      	str	r3, [r2, #8]
		break;
 8005c8e:	f000 bc34 	b.w	80064fa <extInt_Config+0xbe2>
			__NOP();
 8005c92:	bf00      	nop
		break;
 8005c94:	f000 bc31 	b.w	80064fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 8005c98:	4b56      	ldr	r3, [pc, #344]	; (8005df4 <extInt_Config+0x4dc>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	4a55      	ldr	r2, [pc, #340]	; (8005df4 <extInt_Config+0x4dc>)
 8005c9e:	f023 030f 	bic.w	r3, r3, #15
 8005ca2:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	4a53      	ldr	r2, [pc, #332]	; (8005df8 <extInt_Config+0x4e0>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d105      	bne.n	8005cbc <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8005cb0:	4b50      	ldr	r3, [pc, #320]	; (8005df4 <extInt_Config+0x4dc>)
 8005cb2:	4a50      	ldr	r2, [pc, #320]	; (8005df4 <extInt_Config+0x4dc>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8005cb8:	f000 bc1f 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	4a4e      	ldr	r2, [pc, #312]	; (8005dfc <extInt_Config+0x4e4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d107      	bne.n	8005cd8 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8005cc8:	4b4a      	ldr	r3, [pc, #296]	; (8005df4 <extInt_Config+0x4dc>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	4a49      	ldr	r2, [pc, #292]	; (8005df4 <extInt_Config+0x4dc>)
 8005cce:	f043 0301 	orr.w	r3, r3, #1
 8005cd2:	60d3      	str	r3, [r2, #12]
		break;
 8005cd4:	f000 bc11 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	4a48      	ldr	r2, [pc, #288]	; (8005e00 <extInt_Config+0x4e8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d107      	bne.n	8005cf4 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8005ce4:	4b43      	ldr	r3, [pc, #268]	; (8005df4 <extInt_Config+0x4dc>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	4a42      	ldr	r2, [pc, #264]	; (8005df4 <extInt_Config+0x4dc>)
 8005cea:	f043 0302 	orr.w	r3, r3, #2
 8005cee:	60d3      	str	r3, [r2, #12]
		break;
 8005cf0:	f000 bc03 	b.w	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	4a42      	ldr	r2, [pc, #264]	; (8005e04 <extInt_Config+0x4ec>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d106      	bne.n	8005d0e <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8005d00:	4b3c      	ldr	r3, [pc, #240]	; (8005df4 <extInt_Config+0x4dc>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	4a3b      	ldr	r2, [pc, #236]	; (8005df4 <extInt_Config+0x4dc>)
 8005d06:	f043 0303 	orr.w	r3, r3, #3
 8005d0a:	60d3      	str	r3, [r2, #12]
		break;
 8005d0c:	e3f5      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4a3c      	ldr	r2, [pc, #240]	; (8005e08 <extInt_Config+0x4f0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d106      	bne.n	8005d28 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8005d1a:	4b36      	ldr	r3, [pc, #216]	; (8005df4 <extInt_Config+0x4dc>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	4a35      	ldr	r2, [pc, #212]	; (8005df4 <extInt_Config+0x4dc>)
 8005d20:	f043 0304 	orr.w	r3, r3, #4
 8005d24:	60d3      	str	r3, [r2, #12]
		break;
 8005d26:	e3e8      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	4a30      	ldr	r2, [pc, #192]	; (8005df0 <extInt_Config+0x4d8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d106      	bne.n	8005d42 <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8005d34:	4b2f      	ldr	r3, [pc, #188]	; (8005df4 <extInt_Config+0x4dc>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	4a2e      	ldr	r2, [pc, #184]	; (8005df4 <extInt_Config+0x4dc>)
 8005d3a:	f043 0307 	orr.w	r3, r3, #7
 8005d3e:	60d3      	str	r3, [r2, #12]
		break;
 8005d40:	e3db      	b.n	80064fa <extInt_Config+0xbe2>
			__NOP();
 8005d42:	bf00      	nop
		break;
 8005d44:	e3d9      	b.n	80064fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8005d46:	4b2b      	ldr	r3, [pc, #172]	; (8005df4 <extInt_Config+0x4dc>)
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	4a2a      	ldr	r2, [pc, #168]	; (8005df4 <extInt_Config+0x4dc>)
 8005d4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d50:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	4a27      	ldr	r2, [pc, #156]	; (8005df8 <extInt_Config+0x4e0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d104      	bne.n	8005d68 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8005d5e:	4b25      	ldr	r3, [pc, #148]	; (8005df4 <extInt_Config+0x4dc>)
 8005d60:	4a24      	ldr	r2, [pc, #144]	; (8005df4 <extInt_Config+0x4dc>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8005d66:	e3c8      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	4a23      	ldr	r2, [pc, #140]	; (8005dfc <extInt_Config+0x4e4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d106      	bne.n	8005d82 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8005d74:	4b1f      	ldr	r3, [pc, #124]	; (8005df4 <extInt_Config+0x4dc>)
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	4a1e      	ldr	r2, [pc, #120]	; (8005df4 <extInt_Config+0x4dc>)
 8005d7a:	f043 0310 	orr.w	r3, r3, #16
 8005d7e:	60d3      	str	r3, [r2, #12]
		break;
 8005d80:	e3bb      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	4a1d      	ldr	r2, [pc, #116]	; (8005e00 <extInt_Config+0x4e8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d106      	bne.n	8005d9c <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8005d8e:	4b19      	ldr	r3, [pc, #100]	; (8005df4 <extInt_Config+0x4dc>)
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	4a18      	ldr	r2, [pc, #96]	; (8005df4 <extInt_Config+0x4dc>)
 8005d94:	f043 0320 	orr.w	r3, r3, #32
 8005d98:	60d3      	str	r3, [r2, #12]
		break;
 8005d9a:	e3ae      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <extInt_Config+0x4ec>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d106      	bne.n	8005db6 <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8005da8:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <extInt_Config+0x4dc>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	4a11      	ldr	r2, [pc, #68]	; (8005df4 <extInt_Config+0x4dc>)
 8005dae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005db2:	60d3      	str	r3, [r2, #12]
		break;
 8005db4:	e3a1      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	4a12      	ldr	r2, [pc, #72]	; (8005e08 <extInt_Config+0x4f0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d106      	bne.n	8005dd0 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <extInt_Config+0x4dc>)
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	4a0b      	ldr	r2, [pc, #44]	; (8005df4 <extInt_Config+0x4dc>)
 8005dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dcc:	60d3      	str	r3, [r2, #12]
		break;
 8005dce:	e394      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	4a06      	ldr	r2, [pc, #24]	; (8005df0 <extInt_Config+0x4d8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d106      	bne.n	8005dea <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <extInt_Config+0x4dc>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	4a04      	ldr	r2, [pc, #16]	; (8005df4 <extInt_Config+0x4dc>)
 8005de2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005de6:	60d3      	str	r3, [r2, #12]
		break;
 8005de8:	e387      	b.n	80064fa <extInt_Config+0xbe2>
			__NOP();
 8005dea:	bf00      	nop
		break;
 8005dec:	e385      	b.n	80064fa <extInt_Config+0xbe2>
 8005dee:	bf00      	nop
 8005df0:	40021c00 	.word	0x40021c00
 8005df4:	40013800 	.word	0x40013800
 8005df8:	40020000 	.word	0x40020000
 8005dfc:	40020400 	.word	0x40020400
 8005e00:	40020800 	.word	0x40020800
 8005e04:	40020c00 	.word	0x40020c00
 8005e08:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 8005e0c:	4b86      	ldr	r3, [pc, #536]	; (8006028 <extInt_Config+0x710>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	4a85      	ldr	r2, [pc, #532]	; (8006028 <extInt_Config+0x710>)
 8005e12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e16:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	4a83      	ldr	r2, [pc, #524]	; (800602c <extInt_Config+0x714>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d104      	bne.n	8005e2e <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8005e24:	4b80      	ldr	r3, [pc, #512]	; (8006028 <extInt_Config+0x710>)
 8005e26:	4a80      	ldr	r2, [pc, #512]	; (8006028 <extInt_Config+0x710>)
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8005e2c:	e365      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	4a7e      	ldr	r2, [pc, #504]	; (8006030 <extInt_Config+0x718>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d106      	bne.n	8005e48 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8005e3a:	4b7b      	ldr	r3, [pc, #492]	; (8006028 <extInt_Config+0x710>)
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	4a7a      	ldr	r2, [pc, #488]	; (8006028 <extInt_Config+0x710>)
 8005e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e44:	60d3      	str	r3, [r2, #12]
		break;
 8005e46:	e358      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	4a79      	ldr	r2, [pc, #484]	; (8006034 <extInt_Config+0x71c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d106      	bne.n	8005e62 <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8005e54:	4b74      	ldr	r3, [pc, #464]	; (8006028 <extInt_Config+0x710>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	4a73      	ldr	r2, [pc, #460]	; (8006028 <extInt_Config+0x710>)
 8005e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e5e:	60d3      	str	r3, [r2, #12]
		break;
 8005e60:	e34b      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	4a73      	ldr	r2, [pc, #460]	; (8006038 <extInt_Config+0x720>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d106      	bne.n	8005e7c <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8005e6e:	4b6e      	ldr	r3, [pc, #440]	; (8006028 <extInt_Config+0x710>)
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	4a6d      	ldr	r2, [pc, #436]	; (8006028 <extInt_Config+0x710>)
 8005e74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005e78:	60d3      	str	r3, [r2, #12]
		break;
 8005e7a:	e33e      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	4a6e      	ldr	r2, [pc, #440]	; (800603c <extInt_Config+0x724>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d106      	bne.n	8005e96 <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8005e88:	4b67      	ldr	r3, [pc, #412]	; (8006028 <extInt_Config+0x710>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	4a66      	ldr	r2, [pc, #408]	; (8006028 <extInt_Config+0x710>)
 8005e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e92:	60d3      	str	r3, [r2, #12]
		break;
 8005e94:	e331      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	4a68      	ldr	r2, [pc, #416]	; (8006040 <extInt_Config+0x728>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d106      	bne.n	8005eb0 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8005ea2:	4b61      	ldr	r3, [pc, #388]	; (8006028 <extInt_Config+0x710>)
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	4a60      	ldr	r2, [pc, #384]	; (8006028 <extInt_Config+0x710>)
 8005ea8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005eac:	60d3      	str	r3, [r2, #12]
		break;
 8005eae:	e324      	b.n	80064fa <extInt_Config+0xbe2>
			__NOP();
 8005eb0:	bf00      	nop
		break;
 8005eb2:	e322      	b.n	80064fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 8005eb4:	4b5c      	ldr	r3, [pc, #368]	; (8006028 <extInt_Config+0x710>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	4a5b      	ldr	r2, [pc, #364]	; (8006028 <extInt_Config+0x710>)
 8005eba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ebe:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	4a59      	ldr	r2, [pc, #356]	; (800602c <extInt_Config+0x714>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d104      	bne.n	8005ed6 <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8005ecc:	4b56      	ldr	r3, [pc, #344]	; (8006028 <extInt_Config+0x710>)
 8005ece:	4a56      	ldr	r2, [pc, #344]	; (8006028 <extInt_Config+0x710>)
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8005ed4:	e311      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	4a54      	ldr	r2, [pc, #336]	; (8006030 <extInt_Config+0x718>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d106      	bne.n	8005ef0 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8005ee2:	4b51      	ldr	r3, [pc, #324]	; (8006028 <extInt_Config+0x710>)
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	4a50      	ldr	r2, [pc, #320]	; (8006028 <extInt_Config+0x710>)
 8005ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005eec:	60d3      	str	r3, [r2, #12]
		break;
 8005eee:	e304      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	4a4f      	ldr	r2, [pc, #316]	; (8006034 <extInt_Config+0x71c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d106      	bne.n	8005f0a <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8005efc:	4b4a      	ldr	r3, [pc, #296]	; (8006028 <extInt_Config+0x710>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	4a49      	ldr	r2, [pc, #292]	; (8006028 <extInt_Config+0x710>)
 8005f02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f06:	60d3      	str	r3, [r2, #12]
		break;
 8005f08:	e2f7      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	4a49      	ldr	r2, [pc, #292]	; (8006038 <extInt_Config+0x720>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d106      	bne.n	8005f24 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8005f16:	4b44      	ldr	r3, [pc, #272]	; (8006028 <extInt_Config+0x710>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	4a43      	ldr	r2, [pc, #268]	; (8006028 <extInt_Config+0x710>)
 8005f1c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005f20:	60d3      	str	r3, [r2, #12]
		break;
 8005f22:	e2ea      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	4a44      	ldr	r2, [pc, #272]	; (800603c <extInt_Config+0x724>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d106      	bne.n	8005f3e <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8005f30:	4b3d      	ldr	r3, [pc, #244]	; (8006028 <extInt_Config+0x710>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	4a3c      	ldr	r2, [pc, #240]	; (8006028 <extInt_Config+0x710>)
 8005f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f3a:	60d3      	str	r3, [r2, #12]
		break;
 8005f3c:	e2dd      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	4a3e      	ldr	r2, [pc, #248]	; (8006040 <extInt_Config+0x728>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d106      	bne.n	8005f58 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8005f4a:	4b37      	ldr	r3, [pc, #220]	; (8006028 <extInt_Config+0x710>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	4a36      	ldr	r2, [pc, #216]	; (8006028 <extInt_Config+0x710>)
 8005f50:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005f54:	60d3      	str	r3, [r2, #12]
		break;
 8005f56:	e2d0      	b.n	80064fa <extInt_Config+0xbe2>
			__NOP();
 8005f58:	bf00      	nop
		break;
 8005f5a:	e2ce      	b.n	80064fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 8005f5c:	4b32      	ldr	r3, [pc, #200]	; (8006028 <extInt_Config+0x710>)
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	4a31      	ldr	r2, [pc, #196]	; (8006028 <extInt_Config+0x710>)
 8005f62:	f023 030f 	bic.w	r3, r3, #15
 8005f66:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	4a2f      	ldr	r2, [pc, #188]	; (800602c <extInt_Config+0x714>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d104      	bne.n	8005f7e <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8005f74:	4b2c      	ldr	r3, [pc, #176]	; (8006028 <extInt_Config+0x710>)
 8005f76:	4a2c      	ldr	r2, [pc, #176]	; (8006028 <extInt_Config+0x710>)
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8005f7c:	e2bd      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	4a2a      	ldr	r2, [pc, #168]	; (8006030 <extInt_Config+0x718>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d106      	bne.n	8005f98 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8005f8a:	4b27      	ldr	r3, [pc, #156]	; (8006028 <extInt_Config+0x710>)
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	4a26      	ldr	r2, [pc, #152]	; (8006028 <extInt_Config+0x710>)
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	6113      	str	r3, [r2, #16]
		break;
 8005f96:	e2b0      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	4a25      	ldr	r2, [pc, #148]	; (8006034 <extInt_Config+0x71c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d106      	bne.n	8005fb2 <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8005fa4:	4b20      	ldr	r3, [pc, #128]	; (8006028 <extInt_Config+0x710>)
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	4a1f      	ldr	r2, [pc, #124]	; (8006028 <extInt_Config+0x710>)
 8005faa:	f043 0302 	orr.w	r3, r3, #2
 8005fae:	6113      	str	r3, [r2, #16]
		break;
 8005fb0:	e2a3      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	4a1f      	ldr	r2, [pc, #124]	; (8006038 <extInt_Config+0x720>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d106      	bne.n	8005fcc <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8005fbe:	4b1a      	ldr	r3, [pc, #104]	; (8006028 <extInt_Config+0x710>)
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	4a19      	ldr	r2, [pc, #100]	; (8006028 <extInt_Config+0x710>)
 8005fc4:	f043 0303 	orr.w	r3, r3, #3
 8005fc8:	6113      	str	r3, [r2, #16]
		break;
 8005fca:	e296      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	4a1a      	ldr	r2, [pc, #104]	; (800603c <extInt_Config+0x724>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d106      	bne.n	8005fe6 <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8005fd8:	4b13      	ldr	r3, [pc, #76]	; (8006028 <extInt_Config+0x710>)
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	4a12      	ldr	r2, [pc, #72]	; (8006028 <extInt_Config+0x710>)
 8005fde:	f043 0304 	orr.w	r3, r3, #4
 8005fe2:	6113      	str	r3, [r2, #16]
		break;
 8005fe4:	e289      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	4a14      	ldr	r2, [pc, #80]	; (8006040 <extInt_Config+0x728>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d106      	bne.n	8006000 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <extInt_Config+0x710>)
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	4a0c      	ldr	r2, [pc, #48]	; (8006028 <extInt_Config+0x710>)
 8005ff8:	f043 0307 	orr.w	r3, r3, #7
 8005ffc:	6113      	str	r3, [r2, #16]
		break;
 8005ffe:	e27c      	b.n	80064fa <extInt_Config+0xbe2>
			__NOP();
 8006000:	bf00      	nop
		break;
 8006002:	e27a      	b.n	80064fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8006004:	4b08      	ldr	r3, [pc, #32]	; (8006028 <extInt_Config+0x710>)
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	4a07      	ldr	r2, [pc, #28]	; (8006028 <extInt_Config+0x710>)
 800600a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800600e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	4a05      	ldr	r2, [pc, #20]	; (800602c <extInt_Config+0x714>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d113      	bne.n	8006044 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 800601c:	4b02      	ldr	r3, [pc, #8]	; (8006028 <extInt_Config+0x710>)
 800601e:	4a02      	ldr	r2, [pc, #8]	; (8006028 <extInt_Config+0x710>)
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8006024:	e269      	b.n	80064fa <extInt_Config+0xbe2>
 8006026:	bf00      	nop
 8006028:	40013800 	.word	0x40013800
 800602c:	40020000 	.word	0x40020000
 8006030:	40020400 	.word	0x40020400
 8006034:	40020800 	.word	0x40020800
 8006038:	40020c00 	.word	0x40020c00
 800603c:	40021000 	.word	0x40021000
 8006040:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	4a83      	ldr	r2, [pc, #524]	; (8006258 <extInt_Config+0x940>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d106      	bne.n	800605e <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8006050:	4b82      	ldr	r3, [pc, #520]	; (800625c <extInt_Config+0x944>)
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	4a81      	ldr	r2, [pc, #516]	; (800625c <extInt_Config+0x944>)
 8006056:	f043 0310 	orr.w	r3, r3, #16
 800605a:	6113      	str	r3, [r2, #16]
		break;
 800605c:	e24d      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	4a7e      	ldr	r2, [pc, #504]	; (8006260 <extInt_Config+0x948>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d106      	bne.n	8006078 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800606a:	4b7c      	ldr	r3, [pc, #496]	; (800625c <extInt_Config+0x944>)
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	4a7b      	ldr	r2, [pc, #492]	; (800625c <extInt_Config+0x944>)
 8006070:	f043 0320 	orr.w	r3, r3, #32
 8006074:	6113      	str	r3, [r2, #16]
		break;
 8006076:	e240      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	4a79      	ldr	r2, [pc, #484]	; (8006264 <extInt_Config+0x94c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d106      	bne.n	8006092 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8006084:	4b75      	ldr	r3, [pc, #468]	; (800625c <extInt_Config+0x944>)
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	4a74      	ldr	r2, [pc, #464]	; (800625c <extInt_Config+0x944>)
 800608a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800608e:	6113      	str	r3, [r2, #16]
		break;
 8006090:	e233      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	4a73      	ldr	r2, [pc, #460]	; (8006268 <extInt_Config+0x950>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d106      	bne.n	80060ac <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800609e:	4b6f      	ldr	r3, [pc, #444]	; (800625c <extInt_Config+0x944>)
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	4a6e      	ldr	r2, [pc, #440]	; (800625c <extInt_Config+0x944>)
 80060a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060a8:	6113      	str	r3, [r2, #16]
		break;
 80060aa:	e226      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	4a6e      	ldr	r2, [pc, #440]	; (800626c <extInt_Config+0x954>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d106      	bne.n	80060c6 <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80060b8:	4b68      	ldr	r3, [pc, #416]	; (800625c <extInt_Config+0x944>)
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	4a67      	ldr	r2, [pc, #412]	; (800625c <extInt_Config+0x944>)
 80060be:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80060c2:	6113      	str	r3, [r2, #16]
		break;
 80060c4:	e219      	b.n	80064fa <extInt_Config+0xbe2>
			__NOP();
 80060c6:	bf00      	nop
		break;
 80060c8:	e217      	b.n	80064fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 80060ca:	4b64      	ldr	r3, [pc, #400]	; (800625c <extInt_Config+0x944>)
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	4a63      	ldr	r2, [pc, #396]	; (800625c <extInt_Config+0x944>)
 80060d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060d4:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	4a64      	ldr	r2, [pc, #400]	; (8006270 <extInt_Config+0x958>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d104      	bne.n	80060ec <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 80060e2:	4b5e      	ldr	r3, [pc, #376]	; (800625c <extInt_Config+0x944>)
 80060e4:	4a5d      	ldr	r2, [pc, #372]	; (800625c <extInt_Config+0x944>)
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80060ea:	e206      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	4a59      	ldr	r2, [pc, #356]	; (8006258 <extInt_Config+0x940>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d106      	bne.n	8006106 <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80060f8:	4b58      	ldr	r3, [pc, #352]	; (800625c <extInt_Config+0x944>)
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	4a57      	ldr	r2, [pc, #348]	; (800625c <extInt_Config+0x944>)
 80060fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006102:	6113      	str	r3, [r2, #16]
		break;
 8006104:	e1f9      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	4a54      	ldr	r2, [pc, #336]	; (8006260 <extInt_Config+0x948>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d106      	bne.n	8006120 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8006112:	4b52      	ldr	r3, [pc, #328]	; (800625c <extInt_Config+0x944>)
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	4a51      	ldr	r2, [pc, #324]	; (800625c <extInt_Config+0x944>)
 8006118:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800611c:	6113      	str	r3, [r2, #16]
		break;
 800611e:	e1ec      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	4a4f      	ldr	r2, [pc, #316]	; (8006264 <extInt_Config+0x94c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d106      	bne.n	800613a <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800612c:	4b4b      	ldr	r3, [pc, #300]	; (800625c <extInt_Config+0x944>)
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	4a4a      	ldr	r2, [pc, #296]	; (800625c <extInt_Config+0x944>)
 8006132:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006136:	6113      	str	r3, [r2, #16]
		break;
 8006138:	e1df      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	4a49      	ldr	r2, [pc, #292]	; (8006268 <extInt_Config+0x950>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d106      	bne.n	8006154 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8006146:	4b45      	ldr	r3, [pc, #276]	; (800625c <extInt_Config+0x944>)
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	4a44      	ldr	r2, [pc, #272]	; (800625c <extInt_Config+0x944>)
 800614c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006150:	6113      	str	r3, [r2, #16]
		break;
 8006152:	e1d2      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	4a44      	ldr	r2, [pc, #272]	; (800626c <extInt_Config+0x954>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d106      	bne.n	800616e <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8006160:	4b3e      	ldr	r3, [pc, #248]	; (800625c <extInt_Config+0x944>)
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	4a3d      	ldr	r2, [pc, #244]	; (800625c <extInt_Config+0x944>)
 8006166:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800616a:	6113      	str	r3, [r2, #16]
		break;
 800616c:	e1c5      	b.n	80064fa <extInt_Config+0xbe2>
			__NOP();
 800616e:	bf00      	nop
		break;
 8006170:	e1c3      	b.n	80064fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8006172:	4b3a      	ldr	r3, [pc, #232]	; (800625c <extInt_Config+0x944>)
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	4a39      	ldr	r2, [pc, #228]	; (800625c <extInt_Config+0x944>)
 8006178:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800617c:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	4a3a      	ldr	r2, [pc, #232]	; (8006270 <extInt_Config+0x958>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d104      	bne.n	8006194 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800618a:	4b34      	ldr	r3, [pc, #208]	; (800625c <extInt_Config+0x944>)
 800618c:	4a33      	ldr	r2, [pc, #204]	; (800625c <extInt_Config+0x944>)
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8006192:	e1b2      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	4a2f      	ldr	r2, [pc, #188]	; (8006258 <extInt_Config+0x940>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d106      	bne.n	80061ae <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80061a0:	4b2e      	ldr	r3, [pc, #184]	; (800625c <extInt_Config+0x944>)
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	4a2d      	ldr	r2, [pc, #180]	; (800625c <extInt_Config+0x944>)
 80061a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061aa:	6113      	str	r3, [r2, #16]
		break;
 80061ac:	e1a5      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	4a2a      	ldr	r2, [pc, #168]	; (8006260 <extInt_Config+0x948>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d106      	bne.n	80061c8 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80061ba:	4b28      	ldr	r3, [pc, #160]	; (800625c <extInt_Config+0x944>)
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	4a27      	ldr	r2, [pc, #156]	; (800625c <extInt_Config+0x944>)
 80061c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80061c4:	6113      	str	r3, [r2, #16]
		break;
 80061c6:	e198      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	4a25      	ldr	r2, [pc, #148]	; (8006264 <extInt_Config+0x94c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d106      	bne.n	80061e2 <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 80061d4:	4b21      	ldr	r3, [pc, #132]	; (800625c <extInt_Config+0x944>)
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	4a20      	ldr	r2, [pc, #128]	; (800625c <extInt_Config+0x944>)
 80061da:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80061de:	6113      	str	r3, [r2, #16]
		break;
 80061e0:	e18b      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	4a1f      	ldr	r2, [pc, #124]	; (8006268 <extInt_Config+0x950>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d106      	bne.n	80061fc <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 80061ee:	4b1b      	ldr	r3, [pc, #108]	; (800625c <extInt_Config+0x944>)
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	4a1a      	ldr	r2, [pc, #104]	; (800625c <extInt_Config+0x944>)
 80061f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061f8:	6113      	str	r3, [r2, #16]
		break;
 80061fa:	e17e      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	4a1a      	ldr	r2, [pc, #104]	; (800626c <extInt_Config+0x954>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d106      	bne.n	8006216 <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8006208:	4b14      	ldr	r3, [pc, #80]	; (800625c <extInt_Config+0x944>)
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	4a13      	ldr	r2, [pc, #76]	; (800625c <extInt_Config+0x944>)
 800620e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006212:	6113      	str	r3, [r2, #16]
		break;
 8006214:	e171      	b.n	80064fa <extInt_Config+0xbe2>
			__NOP();
 8006216:	bf00      	nop
		break;
 8006218:	e16f      	b.n	80064fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 800621a:	4b10      	ldr	r3, [pc, #64]	; (800625c <extInt_Config+0x944>)
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	4a0f      	ldr	r2, [pc, #60]	; (800625c <extInt_Config+0x944>)
 8006220:	f023 030f 	bic.w	r3, r3, #15
 8006224:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	4a10      	ldr	r2, [pc, #64]	; (8006270 <extInt_Config+0x958>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d104      	bne.n	800623c <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8006232:	4b0a      	ldr	r3, [pc, #40]	; (800625c <extInt_Config+0x944>)
 8006234:	4a09      	ldr	r2, [pc, #36]	; (800625c <extInt_Config+0x944>)
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800623a:	e15e      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	4a05      	ldr	r2, [pc, #20]	; (8006258 <extInt_Config+0x940>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d115      	bne.n	8006274 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8006248:	4b04      	ldr	r3, [pc, #16]	; (800625c <extInt_Config+0x944>)
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	4a03      	ldr	r2, [pc, #12]	; (800625c <extInt_Config+0x944>)
 800624e:	f043 0301 	orr.w	r3, r3, #1
 8006252:	6153      	str	r3, [r2, #20]
		break;
 8006254:	e151      	b.n	80064fa <extInt_Config+0xbe2>
 8006256:	bf00      	nop
 8006258:	40020400 	.word	0x40020400
 800625c:	40013800 	.word	0x40013800
 8006260:	40020800 	.word	0x40020800
 8006264:	40020c00 	.word	0x40020c00
 8006268:	40021000 	.word	0x40021000
 800626c:	40021c00 	.word	0x40021c00
 8006270:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	4a83      	ldr	r2, [pc, #524]	; (8006488 <extInt_Config+0xb70>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d106      	bne.n	800628e <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8006280:	4b82      	ldr	r3, [pc, #520]	; (800648c <extInt_Config+0xb74>)
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	4a81      	ldr	r2, [pc, #516]	; (800648c <extInt_Config+0xb74>)
 8006286:	f043 0302 	orr.w	r3, r3, #2
 800628a:	6153      	str	r3, [r2, #20]
		break;
 800628c:	e135      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	4a7e      	ldr	r2, [pc, #504]	; (8006490 <extInt_Config+0xb78>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d106      	bne.n	80062a8 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800629a:	4b7c      	ldr	r3, [pc, #496]	; (800648c <extInt_Config+0xb74>)
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	4a7b      	ldr	r2, [pc, #492]	; (800648c <extInt_Config+0xb74>)
 80062a0:	f043 0303 	orr.w	r3, r3, #3
 80062a4:	6153      	str	r3, [r2, #20]
		break;
 80062a6:	e128      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	4a79      	ldr	r2, [pc, #484]	; (8006494 <extInt_Config+0xb7c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d106      	bne.n	80062c2 <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80062b4:	4b75      	ldr	r3, [pc, #468]	; (800648c <extInt_Config+0xb74>)
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	4a74      	ldr	r2, [pc, #464]	; (800648c <extInt_Config+0xb74>)
 80062ba:	f043 0304 	orr.w	r3, r3, #4
 80062be:	6153      	str	r3, [r2, #20]
		break;
 80062c0:	e11b      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	4a73      	ldr	r2, [pc, #460]	; (8006498 <extInt_Config+0xb80>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d106      	bne.n	80062dc <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80062ce:	4b6f      	ldr	r3, [pc, #444]	; (800648c <extInt_Config+0xb74>)
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	4a6e      	ldr	r2, [pc, #440]	; (800648c <extInt_Config+0xb74>)
 80062d4:	f043 0307 	orr.w	r3, r3, #7
 80062d8:	6153      	str	r3, [r2, #20]
		break;
 80062da:	e10e      	b.n	80064fa <extInt_Config+0xbe2>
			__NOP();
 80062dc:	bf00      	nop
		break;
 80062de:	e10c      	b.n	80064fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 80062e0:	4b6a      	ldr	r3, [pc, #424]	; (800648c <extInt_Config+0xb74>)
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	4a69      	ldr	r2, [pc, #420]	; (800648c <extInt_Config+0xb74>)
 80062e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ea:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	4a6a      	ldr	r2, [pc, #424]	; (800649c <extInt_Config+0xb84>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d104      	bne.n	8006302 <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 80062f8:	4b64      	ldr	r3, [pc, #400]	; (800648c <extInt_Config+0xb74>)
 80062fa:	4a64      	ldr	r2, [pc, #400]	; (800648c <extInt_Config+0xb74>)
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8006300:	e0fb      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	4a65      	ldr	r2, [pc, #404]	; (80064a0 <extInt_Config+0xb88>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d106      	bne.n	800631c <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800630e:	4b5f      	ldr	r3, [pc, #380]	; (800648c <extInt_Config+0xb74>)
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	4a5e      	ldr	r2, [pc, #376]	; (800648c <extInt_Config+0xb74>)
 8006314:	f043 0310 	orr.w	r3, r3, #16
 8006318:	6153      	str	r3, [r2, #20]
		break;
 800631a:	e0ee      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	4a59      	ldr	r2, [pc, #356]	; (8006488 <extInt_Config+0xb70>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d106      	bne.n	8006336 <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8006328:	4b58      	ldr	r3, [pc, #352]	; (800648c <extInt_Config+0xb74>)
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	4a57      	ldr	r2, [pc, #348]	; (800648c <extInt_Config+0xb74>)
 800632e:	f043 0320 	orr.w	r3, r3, #32
 8006332:	6153      	str	r3, [r2, #20]
		break;
 8006334:	e0e1      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	4a54      	ldr	r2, [pc, #336]	; (8006490 <extInt_Config+0xb78>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d106      	bne.n	8006350 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8006342:	4b52      	ldr	r3, [pc, #328]	; (800648c <extInt_Config+0xb74>)
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	4a51      	ldr	r2, [pc, #324]	; (800648c <extInt_Config+0xb74>)
 8006348:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800634c:	6153      	str	r3, [r2, #20]
		break;
 800634e:	e0d4      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	4a4f      	ldr	r2, [pc, #316]	; (8006494 <extInt_Config+0xb7c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d106      	bne.n	800636a <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800635c:	4b4b      	ldr	r3, [pc, #300]	; (800648c <extInt_Config+0xb74>)
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	4a4a      	ldr	r2, [pc, #296]	; (800648c <extInt_Config+0xb74>)
 8006362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006366:	6153      	str	r3, [r2, #20]
		break;
 8006368:	e0c7      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	4a49      	ldr	r2, [pc, #292]	; (8006498 <extInt_Config+0xb80>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d106      	bne.n	8006384 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8006376:	4b45      	ldr	r3, [pc, #276]	; (800648c <extInt_Config+0xb74>)
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	4a44      	ldr	r2, [pc, #272]	; (800648c <extInt_Config+0xb74>)
 800637c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006380:	6153      	str	r3, [r2, #20]
		break;
 8006382:	e0ba      	b.n	80064fa <extInt_Config+0xbe2>
			__NOP();
 8006384:	bf00      	nop
		break;
 8006386:	e0b8      	b.n	80064fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8006388:	4b40      	ldr	r3, [pc, #256]	; (800648c <extInt_Config+0xb74>)
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	4a3f      	ldr	r2, [pc, #252]	; (800648c <extInt_Config+0xb74>)
 800638e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006392:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	4a40      	ldr	r2, [pc, #256]	; (800649c <extInt_Config+0xb84>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d104      	bne.n	80063aa <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80063a0:	4b3a      	ldr	r3, [pc, #232]	; (800648c <extInt_Config+0xb74>)
 80063a2:	4a3a      	ldr	r2, [pc, #232]	; (800648c <extInt_Config+0xb74>)
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80063a8:	e0a7      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	4a3b      	ldr	r2, [pc, #236]	; (80064a0 <extInt_Config+0xb88>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d106      	bne.n	80063c4 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80063b6:	4b35      	ldr	r3, [pc, #212]	; (800648c <extInt_Config+0xb74>)
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	4a34      	ldr	r2, [pc, #208]	; (800648c <extInt_Config+0xb74>)
 80063bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c0:	6153      	str	r3, [r2, #20]
		break;
 80063c2:	e09a      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	4a2f      	ldr	r2, [pc, #188]	; (8006488 <extInt_Config+0xb70>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d106      	bne.n	80063de <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80063d0:	4b2e      	ldr	r3, [pc, #184]	; (800648c <extInt_Config+0xb74>)
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	4a2d      	ldr	r2, [pc, #180]	; (800648c <extInt_Config+0xb74>)
 80063d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063da:	6153      	str	r3, [r2, #20]
		break;
 80063dc:	e08d      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	4a2a      	ldr	r2, [pc, #168]	; (8006490 <extInt_Config+0xb78>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d106      	bne.n	80063f8 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 80063ea:	4b28      	ldr	r3, [pc, #160]	; (800648c <extInt_Config+0xb74>)
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	4a27      	ldr	r2, [pc, #156]	; (800648c <extInt_Config+0xb74>)
 80063f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80063f4:	6153      	str	r3, [r2, #20]
		break;
 80063f6:	e080      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	4a25      	ldr	r2, [pc, #148]	; (8006494 <extInt_Config+0xb7c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d106      	bne.n	8006412 <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8006404:	4b21      	ldr	r3, [pc, #132]	; (800648c <extInt_Config+0xb74>)
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	4a20      	ldr	r2, [pc, #128]	; (800648c <extInt_Config+0xb74>)
 800640a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800640e:	6153      	str	r3, [r2, #20]
		break;
 8006410:	e073      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	4a1f      	ldr	r2, [pc, #124]	; (8006498 <extInt_Config+0xb80>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d106      	bne.n	800642c <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 800641e:	4b1b      	ldr	r3, [pc, #108]	; (800648c <extInt_Config+0xb74>)
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	4a1a      	ldr	r2, [pc, #104]	; (800648c <extInt_Config+0xb74>)
 8006424:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006428:	6153      	str	r3, [r2, #20]
		break;
 800642a:	e066      	b.n	80064fa <extInt_Config+0xbe2>
			__NOP();
 800642c:	bf00      	nop
		break;
 800642e:	e064      	b.n	80064fa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8006430:	4b16      	ldr	r3, [pc, #88]	; (800648c <extInt_Config+0xb74>)
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	4a15      	ldr	r2, [pc, #84]	; (800648c <extInt_Config+0xb74>)
 8006436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800643a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	4a16      	ldr	r2, [pc, #88]	; (800649c <extInt_Config+0xb84>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d104      	bne.n	8006452 <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8006448:	4b10      	ldr	r3, [pc, #64]	; (800648c <extInt_Config+0xb74>)
 800644a:	4a10      	ldr	r2, [pc, #64]	; (800648c <extInt_Config+0xb74>)
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8006450:	e053      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	4a11      	ldr	r2, [pc, #68]	; (80064a0 <extInt_Config+0xb88>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d106      	bne.n	800646c <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800645e:	4b0b      	ldr	r3, [pc, #44]	; (800648c <extInt_Config+0xb74>)
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	4a0a      	ldr	r2, [pc, #40]	; (800648c <extInt_Config+0xb74>)
 8006464:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006468:	6153      	str	r3, [r2, #20]
		break;
 800646a:	e046      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	4a05      	ldr	r2, [pc, #20]	; (8006488 <extInt_Config+0xb70>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d115      	bne.n	80064a4 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8006478:	4b04      	ldr	r3, [pc, #16]	; (800648c <extInt_Config+0xb74>)
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	4a03      	ldr	r2, [pc, #12]	; (800648c <extInt_Config+0xb74>)
 800647e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006482:	6153      	str	r3, [r2, #20]
		break;
 8006484:	e039      	b.n	80064fa <extInt_Config+0xbe2>
 8006486:	bf00      	nop
 8006488:	40020800 	.word	0x40020800
 800648c:	40013800 	.word	0x40013800
 8006490:	40020c00 	.word	0x40020c00
 8006494:	40021000 	.word	0x40021000
 8006498:	40021c00 	.word	0x40021c00
 800649c:	40020000 	.word	0x40020000
 80064a0:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	4a9d      	ldr	r2, [pc, #628]	; (8006720 <extInt_Config+0xe08>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d106      	bne.n	80064be <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80064b0:	4b9c      	ldr	r3, [pc, #624]	; (8006724 <extInt_Config+0xe0c>)
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	4a9b      	ldr	r2, [pc, #620]	; (8006724 <extInt_Config+0xe0c>)
 80064b6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80064ba:	6153      	str	r3, [r2, #20]
		break;
 80064bc:	e01d      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	4a98      	ldr	r2, [pc, #608]	; (8006728 <extInt_Config+0xe10>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d106      	bne.n	80064d8 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80064ca:	4b96      	ldr	r3, [pc, #600]	; (8006724 <extInt_Config+0xe0c>)
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	4a95      	ldr	r2, [pc, #596]	; (8006724 <extInt_Config+0xe0c>)
 80064d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064d4:	6153      	str	r3, [r2, #20]
		break;
 80064d6:	e010      	b.n	80064fa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	4a93      	ldr	r2, [pc, #588]	; (800672c <extInt_Config+0xe14>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d106      	bne.n	80064f2 <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 80064e4:	4b8f      	ldr	r3, [pc, #572]	; (8006724 <extInt_Config+0xe0c>)
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	4a8e      	ldr	r2, [pc, #568]	; (8006724 <extInt_Config+0xe0c>)
 80064ea:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80064ee:	6153      	str	r3, [r2, #20]
		break;
 80064f0:	e003      	b.n	80064fa <extInt_Config+0xbe2>
			__NOP();
 80064f2:	bf00      	nop
		break;
 80064f4:	e001      	b.n	80064fa <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 80064f6:	bf00      	nop
		break;
 80064f8:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	791b      	ldrb	r3, [r3, #4]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d126      	bne.n	8006550 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006502:	4b8b      	ldr	r3, [pc, #556]	; (8006730 <extInt_Config+0xe18>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6812      	ldr	r2, [r2, #0]
 800650a:	7812      	ldrb	r2, [r2, #0]
 800650c:	4611      	mov	r1, r2
 800650e:	2201      	movs	r2, #1
 8006510:	408a      	lsls	r2, r1
 8006512:	43d2      	mvns	r2, r2
 8006514:	4611      	mov	r1, r2
 8006516:	4a86      	ldr	r2, [pc, #536]	; (8006730 <extInt_Config+0xe18>)
 8006518:	400b      	ands	r3, r1
 800651a:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800651c:	4b84      	ldr	r3, [pc, #528]	; (8006730 <extInt_Config+0xe18>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6812      	ldr	r2, [r2, #0]
 8006524:	7812      	ldrb	r2, [r2, #0]
 8006526:	4611      	mov	r1, r2
 8006528:	2201      	movs	r2, #1
 800652a:	408a      	lsls	r2, r1
 800652c:	43d2      	mvns	r2, r2
 800652e:	4611      	mov	r1, r2
 8006530:	4a7f      	ldr	r2, [pc, #508]	; (8006730 <extInt_Config+0xe18>)
 8006532:	400b      	ands	r3, r1
 8006534:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006536:	4b7e      	ldr	r3, [pc, #504]	; (8006730 <extInt_Config+0xe18>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6812      	ldr	r2, [r2, #0]
 800653e:	7812      	ldrb	r2, [r2, #0]
 8006540:	4611      	mov	r1, r2
 8006542:	2201      	movs	r2, #1
 8006544:	408a      	lsls	r2, r1
 8006546:	4611      	mov	r1, r2
 8006548:	4a79      	ldr	r2, [pc, #484]	; (8006730 <extInt_Config+0xe18>)
 800654a:	430b      	orrs	r3, r1
 800654c:	6093      	str	r3, [r2, #8]
 800654e:	e05c      	b.n	800660a <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	791b      	ldrb	r3, [r3, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d126      	bne.n	80065a6 <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006558:	4b75      	ldr	r3, [pc, #468]	; (8006730 <extInt_Config+0xe18>)
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	7812      	ldrb	r2, [r2, #0]
 8006562:	4611      	mov	r1, r2
 8006564:	2201      	movs	r2, #1
 8006566:	408a      	lsls	r2, r1
 8006568:	43d2      	mvns	r2, r2
 800656a:	4611      	mov	r1, r2
 800656c:	4a70      	ldr	r2, [pc, #448]	; (8006730 <extInt_Config+0xe18>)
 800656e:	400b      	ands	r3, r1
 8006570:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006572:	4b6f      	ldr	r3, [pc, #444]	; (8006730 <extInt_Config+0xe18>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	7812      	ldrb	r2, [r2, #0]
 800657c:	4611      	mov	r1, r2
 800657e:	2201      	movs	r2, #1
 8006580:	408a      	lsls	r2, r1
 8006582:	43d2      	mvns	r2, r2
 8006584:	4611      	mov	r1, r2
 8006586:	4a6a      	ldr	r2, [pc, #424]	; (8006730 <extInt_Config+0xe18>)
 8006588:	400b      	ands	r3, r1
 800658a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800658c:	4b68      	ldr	r3, [pc, #416]	; (8006730 <extInt_Config+0xe18>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	7812      	ldrb	r2, [r2, #0]
 8006596:	4611      	mov	r1, r2
 8006598:	2201      	movs	r2, #1
 800659a:	408a      	lsls	r2, r1
 800659c:	4611      	mov	r1, r2
 800659e:	4a64      	ldr	r2, [pc, #400]	; (8006730 <extInt_Config+0xe18>)
 80065a0:	430b      	orrs	r3, r1
 80065a2:	60d3      	str	r3, [r2, #12]
 80065a4:	e031      	b.n	800660a <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80065a6:	4b62      	ldr	r3, [pc, #392]	; (8006730 <extInt_Config+0xe18>)
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6812      	ldr	r2, [r2, #0]
 80065ae:	7812      	ldrb	r2, [r2, #0]
 80065b0:	4611      	mov	r1, r2
 80065b2:	2201      	movs	r2, #1
 80065b4:	408a      	lsls	r2, r1
 80065b6:	43d2      	mvns	r2, r2
 80065b8:	4611      	mov	r1, r2
 80065ba:	4a5d      	ldr	r2, [pc, #372]	; (8006730 <extInt_Config+0xe18>)
 80065bc:	400b      	ands	r3, r1
 80065be:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80065c0:	4b5b      	ldr	r3, [pc, #364]	; (8006730 <extInt_Config+0xe18>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6812      	ldr	r2, [r2, #0]
 80065c8:	7812      	ldrb	r2, [r2, #0]
 80065ca:	4611      	mov	r1, r2
 80065cc:	2201      	movs	r2, #1
 80065ce:	408a      	lsls	r2, r1
 80065d0:	43d2      	mvns	r2, r2
 80065d2:	4611      	mov	r1, r2
 80065d4:	4a56      	ldr	r2, [pc, #344]	; (8006730 <extInt_Config+0xe18>)
 80065d6:	400b      	ands	r3, r1
 80065d8:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80065da:	4b55      	ldr	r3, [pc, #340]	; (8006730 <extInt_Config+0xe18>)
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	4611      	mov	r1, r2
 80065e6:	2201      	movs	r2, #1
 80065e8:	408a      	lsls	r2, r1
 80065ea:	4611      	mov	r1, r2
 80065ec:	4a50      	ldr	r2, [pc, #320]	; (8006730 <extInt_Config+0xe18>)
 80065ee:	430b      	orrs	r3, r1
 80065f0:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80065f2:	4b4f      	ldr	r3, [pc, #316]	; (8006730 <extInt_Config+0xe18>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6812      	ldr	r2, [r2, #0]
 80065fa:	7812      	ldrb	r2, [r2, #0]
 80065fc:	4611      	mov	r1, r2
 80065fe:	2201      	movs	r2, #1
 8006600:	408a      	lsls	r2, r1
 8006602:	4611      	mov	r1, r2
 8006604:	4a4a      	ldr	r2, [pc, #296]	; (8006730 <extInt_Config+0xe18>)
 8006606:	430b      	orrs	r3, r1
 8006608:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800660a:	4b49      	ldr	r3, [pc, #292]	; (8006730 <extInt_Config+0xe18>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	7812      	ldrb	r2, [r2, #0]
 8006614:	4611      	mov	r1, r2
 8006616:	2201      	movs	r2, #1
 8006618:	408a      	lsls	r2, r1
 800661a:	43d2      	mvns	r2, r2
 800661c:	4611      	mov	r1, r2
 800661e:	4a44      	ldr	r2, [pc, #272]	; (8006730 <extInt_Config+0xe18>)
 8006620:	400b      	ands	r3, r1
 8006622:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006624:	4b42      	ldr	r3, [pc, #264]	; (8006730 <extInt_Config+0xe18>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	7812      	ldrb	r2, [r2, #0]
 800662e:	4611      	mov	r1, r2
 8006630:	2201      	movs	r2, #1
 8006632:	408a      	lsls	r2, r1
 8006634:	4611      	mov	r1, r2
 8006636:	4a3e      	ldr	r2, [pc, #248]	; (8006730 <extInt_Config+0xe18>)
 8006638:	430b      	orrs	r3, r1
 800663a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800663c:	b672      	cpsid	i
}
 800663e:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b0f      	cmp	r3, #15
 8006648:	d862      	bhi.n	8006710 <extInt_Config+0xdf8>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <extInt_Config+0xd38>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	08006691 	.word	0x08006691
 8006654:	08006699 	.word	0x08006699
 8006658:	080066a1 	.word	0x080066a1
 800665c:	080066a9 	.word	0x080066a9
 8006660:	080066b1 	.word	0x080066b1
 8006664:	080066b9 	.word	0x080066b9
 8006668:	080066c1 	.word	0x080066c1
 800666c:	080066c9 	.word	0x080066c9
 8006670:	080066d1 	.word	0x080066d1
 8006674:	080066d9 	.word	0x080066d9
 8006678:	080066e1 	.word	0x080066e1
 800667c:	080066e9 	.word	0x080066e9
 8006680:	080066f1 	.word	0x080066f1
 8006684:	080066f9 	.word	0x080066f9
 8006688:	08006701 	.word	0x08006701
 800668c:	08006709 	.word	0x08006709
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8006690:	2006      	movs	r0, #6
 8006692:	f7ff f923 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 8006696:	e03c      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8006698:	2007      	movs	r0, #7
 800669a:	f7ff f91f 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 800669e:	e038      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 80066a0:	2008      	movs	r0, #8
 80066a2:	f7ff f91b 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 80066a6:	e034      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 80066a8:	2009      	movs	r0, #9
 80066aa:	f7ff f917 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 80066ae:	e030      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 80066b0:	200a      	movs	r0, #10
 80066b2:	f7ff f913 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 80066b6:	e02c      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80066b8:	2017      	movs	r0, #23
 80066ba:	f7ff f90f 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 80066be:	e028      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80066c0:	2017      	movs	r0, #23
 80066c2:	f7ff f90b 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 80066c6:	e024      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80066c8:	2017      	movs	r0, #23
 80066ca:	f7ff f907 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 80066ce:	e020      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80066d0:	2017      	movs	r0, #23
 80066d2:	f7ff f903 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 80066d6:	e01c      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80066d8:	2017      	movs	r0, #23
 80066da:	f7ff f8ff 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 80066de:	e018      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80066e0:	2028      	movs	r0, #40	; 0x28
 80066e2:	f7ff f8fb 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 80066e6:	e014      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80066e8:	2028      	movs	r0, #40	; 0x28
 80066ea:	f7ff f8f7 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 80066ee:	e010      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80066f0:	2028      	movs	r0, #40	; 0x28
 80066f2:	f7ff f8f3 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 80066f6:	e00c      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80066f8:	2028      	movs	r0, #40	; 0x28
 80066fa:	f7ff f8ef 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 80066fe:	e008      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006700:	2028      	movs	r0, #40	; 0x28
 8006702:	f7ff f8eb 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 8006706:	e004      	b.n	8006712 <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006708:	2028      	movs	r0, #40	; 0x28
 800670a:	f7ff f8e7 	bl	80058dc <__NVIC_EnableIRQ>
		break;
 800670e:	e000      	b.n	8006712 <extInt_Config+0xdfa>
	}

	default: {
		break;
 8006710:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8006712:	b662      	cpsie	i
}
 8006714:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8006716:	bf00      	nop
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	40020c00 	.word	0x40020c00
 8006724:	40013800 	.word	0x40013800
 8006728:	40021000 	.word	0x40021000
 800672c:	40021c00 	.word	0x40021c00
 8006730:	40013c00 	.word	0x40013c00

08006734 <callback_extInt0>:
	__enable_irq();
}


//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8006734:	b480      	push	{r7}
 8006736:	af00      	add	r7, sp, #0
	__NOP();
 8006738:	bf00      	nop
}
 800673a:	bf00      	nop
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
	__NOP();
 8006748:	bf00      	nop
}
 800674a:	bf00      	nop
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
	__NOP();
 8006758:	bf00      	nop
}
 800675a:	bf00      	nop
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
	__NOP();
 8006768:	bf00      	nop
}
 800676a:	bf00      	nop
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
	__NOP();
 8006778:	bf00      	nop
}
 800677a:	bf00      	nop
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
	__NOP();
 8006788:	bf00      	nop
}
 800678a:	bf00      	nop
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
	__NOP();
 8006798:	bf00      	nop
}
 800679a:	bf00      	nop
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
	__NOP();
 80067a8:	bf00      	nop
}
 80067aa:	bf00      	nop
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
	__NOP();
 80067b8:	bf00      	nop
}
 80067ba:	bf00      	nop
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
	__NOP();
 80067c8:	bf00      	nop
}
 80067ca:	bf00      	nop
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
	__NOP();
 80067d8:	bf00      	nop
}
 80067da:	bf00      	nop
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
	__NOP();
 80067e8:	bf00      	nop
}
 80067ea:	bf00      	nop
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
	__NOP();
 80067f8:	bf00      	nop
}
 80067fa:	bf00      	nop
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
	__NOP();
 8006808:	bf00      	nop
}
 800680a:	bf00      	nop
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8006818:	4b08      	ldr	r3, [pc, #32]	; (800683c <EXTI0_IRQHandler+0x28>)
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d008      	beq.n	8006836 <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <EXTI0_IRQHandler+0x28>)
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	4a04      	ldr	r2, [pc, #16]	; (800683c <EXTI0_IRQHandler+0x28>)
 800682a:	f043 0301 	orr.w	r3, r3, #1
 800682e:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8006830:	f7ff ff80 	bl	8006734 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8006834:	e000      	b.n	8006838 <EXTI0_IRQHandler+0x24>
		__NOP();
 8006836:	bf00      	nop
}
 8006838:	bf00      	nop
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40013c00 	.word	0x40013c00

08006840 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8006844:	4b08      	ldr	r3, [pc, #32]	; (8006868 <EXTI1_IRQHandler+0x28>)
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d008      	beq.n	8006862 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8006850:	4b05      	ldr	r3, [pc, #20]	; (8006868 <EXTI1_IRQHandler+0x28>)
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	4a04      	ldr	r2, [pc, #16]	; (8006868 <EXTI1_IRQHandler+0x28>)
 8006856:	f043 0302 	orr.w	r3, r3, #2
 800685a:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 800685c:	f7fd fd2e 	bl	80042bc <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8006860:	e000      	b.n	8006864 <EXTI1_IRQHandler+0x24>
		__NOP();
 8006862:	bf00      	nop
}
 8006864:	bf00      	nop
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40013c00 	.word	0x40013c00

0800686c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8006870:	4b08      	ldr	r3, [pc, #32]	; (8006894 <EXTI2_IRQHandler+0x28>)
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d008      	beq.n	800688e <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <EXTI2_IRQHandler+0x28>)
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	4a04      	ldr	r2, [pc, #16]	; (8006894 <EXTI2_IRQHandler+0x28>)
 8006882:	f043 0304 	orr.w	r3, r3, #4
 8006886:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8006888:	f7ff ff5c 	bl	8006744 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 800688c:	e000      	b.n	8006890 <EXTI2_IRQHandler+0x24>
		__NOP();
 800688e:	bf00      	nop
}
 8006890:	bf00      	nop
 8006892:	bd80      	pop	{r7, pc}
 8006894:	40013c00 	.word	0x40013c00

08006898 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 800689c:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <EXTI3_IRQHandler+0x28>)
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	f003 0308 	and.w	r3, r3, #8
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d008      	beq.n	80068ba <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 80068a8:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <EXTI3_IRQHandler+0x28>)
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	4a04      	ldr	r2, [pc, #16]	; (80068c0 <EXTI3_IRQHandler+0x28>)
 80068ae:	f043 0308 	orr.w	r3, r3, #8
 80068b2:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 80068b4:	f7fd fd12 	bl	80042dc <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 80068b8:	e000      	b.n	80068bc <EXTI3_IRQHandler+0x24>
		__NOP();
 80068ba:	bf00      	nop
}
 80068bc:	bf00      	nop
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	40013c00 	.word	0x40013c00

080068c4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 80068c8:	4b08      	ldr	r3, [pc, #32]	; (80068ec <EXTI4_IRQHandler+0x28>)
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	f003 0310 	and.w	r3, r3, #16
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d008      	beq.n	80068e6 <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <EXTI4_IRQHandler+0x28>)
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	4a04      	ldr	r2, [pc, #16]	; (80068ec <EXTI4_IRQHandler+0x28>)
 80068da:	f043 0310 	orr.w	r3, r3, #16
 80068de:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 80068e0:	f7ff ff38 	bl	8006754 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 80068e4:	e000      	b.n	80068e8 <EXTI4_IRQHandler+0x24>
		__NOP();
 80068e6:	bf00      	nop
}
 80068e8:	bf00      	nop
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40013c00 	.word	0x40013c00

080068f0 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 80068f4:	4b26      	ldr	r3, [pc, #152]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d008      	beq.n	8006912 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8006900:	4b23      	ldr	r3, [pc, #140]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	4a22      	ldr	r2, [pc, #136]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 8006906:	f043 0320 	orr.w	r3, r3, #32
 800690a:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 800690c:	f7ff ff2a 	bl	8006764 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8006910:	e03c      	b.n	800698c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8006912:	4b1f      	ldr	r3, [pc, #124]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d008      	beq.n	8006930 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 800691e:	4b1c      	ldr	r3, [pc, #112]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	4a1b      	ldr	r2, [pc, #108]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 8006924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006928:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 800692a:	f7ff ff23 	bl	8006774 <callback_extInt6>
}
 800692e:	e02d      	b.n	800698c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8006930:	4b17      	ldr	r3, [pc, #92]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006938:	2b00      	cmp	r3, #0
 800693a:	d008      	beq.n	800694e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 800693c:	4b14      	ldr	r3, [pc, #80]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	4a13      	ldr	r2, [pc, #76]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 8006942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006946:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8006948:	f7ff ff1c 	bl	8006784 <callback_extInt7>
}
 800694c:	e01e      	b.n	800698c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 800694e:	4b10      	ldr	r3, [pc, #64]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006956:	2b00      	cmp	r3, #0
 8006958:	d008      	beq.n	800696c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 800695a:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	4a0c      	ldr	r2, [pc, #48]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 8006960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006964:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 8006966:	f7ff ff15 	bl	8006794 <callback_extInt8>
}
 800696a:	e00f      	b.n	800698c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 800696c:	4b08      	ldr	r3, [pc, #32]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006974:	2b00      	cmp	r3, #0
 8006976:	d008      	beq.n	800698a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8006978:	4b05      	ldr	r3, [pc, #20]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	4a04      	ldr	r2, [pc, #16]	; (8006990 <EXTI9_5_IRQHandler+0xa0>)
 800697e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006982:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8006984:	f7ff ff0e 	bl	80067a4 <callback_extInt9>
}
 8006988:	e000      	b.n	800698c <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800698a:	bf00      	nop
}
 800698c:	bf00      	nop
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40013c00 	.word	0x40013c00

08006994 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8006998:	4b2e      	ldr	r3, [pc, #184]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d008      	beq.n	80069b6 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 80069a4:	4b2b      	ldr	r3, [pc, #172]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	4a2a      	ldr	r2, [pc, #168]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 80069aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069ae:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 80069b0:	f7ff ff00 	bl	80067b4 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 80069b4:	e04b      	b.n	8006a4e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 80069b6:	4b27      	ldr	r3, [pc, #156]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d008      	beq.n	80069d4 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 80069c2:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	4a23      	ldr	r2, [pc, #140]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 80069c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069cc:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 80069ce:	f7ff fef9 	bl	80067c4 <callback_extInt11>
}
 80069d2:	e03c      	b.n	8006a4e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 80069d4:	4b1f      	ldr	r3, [pc, #124]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 80069e0:	4b1c      	ldr	r3, [pc, #112]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	4a1b      	ldr	r2, [pc, #108]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 80069e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069ea:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 80069ec:	f7ff fef2 	bl	80067d4 <callback_extInt12>
}
 80069f0:	e02d      	b.n	8006a4e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 80069f2:	4b18      	ldr	r3, [pc, #96]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d008      	beq.n	8006a10 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 80069fe:	4b15      	ldr	r3, [pc, #84]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	4a14      	ldr	r2, [pc, #80]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 8006a04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a08:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 8006a0a:	f7ff feeb 	bl	80067e4 <callback_extInt13>
}
 8006a0e:	e01e      	b.n	8006a4e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8006a10:	4b10      	ldr	r3, [pc, #64]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8006a1c:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	4a0c      	ldr	r2, [pc, #48]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 8006a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a26:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8006a28:	f7ff fee4 	bl	80067f4 <callback_extInt14>
}
 8006a2c:	e00f      	b.n	8006a4e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 8006a2e:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d008      	beq.n	8006a4c <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 8006a3a:	4b06      	ldr	r3, [pc, #24]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	4a05      	ldr	r2, [pc, #20]	; (8006a54 <EXTI15_10_IRQHandler+0xc0>)
 8006a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a44:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8006a46:	f7ff fedd 	bl	8006804 <callback_extInt15>
}
 8006a4a:	e000      	b.n	8006a4e <EXTI15_10_IRQHandler+0xba>
		__NOP();
 8006a4c:	bf00      	nop
}
 8006a4e:	bf00      	nop
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40013c00 	.word	0x40013c00

08006a58 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	4608      	mov	r0, r1
 8006a62:	4611      	mov	r1, r2
 8006a64:	461a      	mov	r2, r3
 8006a66:	4603      	mov	r3, r0
 8006a68:	70fb      	strb	r3, [r7, #3]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	70bb      	strb	r3, [r7, #2]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	78fa      	ldrb	r2, [r7, #3]
 8006a76:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	78ba      	ldrb	r2, [r7, #2]
 8006a7c:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	787a      	ldrb	r2, [r7, #1]
 8006a82:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	7c3a      	ldrb	r2, [r7, #16]
 8006a88:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	7d3a      	ldrb	r2, [r7, #20]
 8006a8e:	715a      	strb	r2, [r3, #5]
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	4a88      	ldr	r2, [pc, #544]	; (8006cd4 <GPIO_Config+0x238>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d106      	bne.n	8006ac4 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8006ab6:	4b88      	ldr	r3, [pc, #544]	; (8006cd8 <GPIO_Config+0x23c>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	4a87      	ldr	r2, [pc, #540]	; (8006cd8 <GPIO_Config+0x23c>)
 8006abc:	f043 0301 	orr.w	r3, r3, #1
 8006ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ac2:	e03a      	b.n	8006b3a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	4a84      	ldr	r2, [pc, #528]	; (8006cdc <GPIO_Config+0x240>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d106      	bne.n	8006adc <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8006ace:	4b82      	ldr	r3, [pc, #520]	; (8006cd8 <GPIO_Config+0x23c>)
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	4a81      	ldr	r2, [pc, #516]	; (8006cd8 <GPIO_Config+0x23c>)
 8006ad4:	f043 0302 	orr.w	r3, r3, #2
 8006ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8006ada:	e02e      	b.n	8006b3a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	4a7f      	ldr	r2, [pc, #508]	; (8006ce0 <GPIO_Config+0x244>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d106      	bne.n	8006af4 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8006ae6:	4b7c      	ldr	r3, [pc, #496]	; (8006cd8 <GPIO_Config+0x23c>)
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aea:	4a7b      	ldr	r2, [pc, #492]	; (8006cd8 <GPIO_Config+0x23c>)
 8006aec:	f043 0304 	orr.w	r3, r3, #4
 8006af0:	6313      	str	r3, [r2, #48]	; 0x30
 8006af2:	e022      	b.n	8006b3a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	4a7a      	ldr	r2, [pc, #488]	; (8006ce4 <GPIO_Config+0x248>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d106      	bne.n	8006b0c <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8006afe:	4b76      	ldr	r3, [pc, #472]	; (8006cd8 <GPIO_Config+0x23c>)
 8006b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b02:	4a75      	ldr	r2, [pc, #468]	; (8006cd8 <GPIO_Config+0x23c>)
 8006b04:	f043 0308 	orr.w	r3, r3, #8
 8006b08:	6313      	str	r3, [r2, #48]	; 0x30
 8006b0a:	e016      	b.n	8006b3a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	4a75      	ldr	r2, [pc, #468]	; (8006ce8 <GPIO_Config+0x24c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d106      	bne.n	8006b24 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8006b16:	4b70      	ldr	r3, [pc, #448]	; (8006cd8 <GPIO_Config+0x23c>)
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	4a6f      	ldr	r2, [pc, #444]	; (8006cd8 <GPIO_Config+0x23c>)
 8006b1c:	f043 0310 	orr.w	r3, r3, #16
 8006b20:	6313      	str	r3, [r2, #48]	; 0x30
 8006b22:	e00a      	b.n	8006b3a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	4a70      	ldr	r2, [pc, #448]	; (8006cec <GPIO_Config+0x250>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d105      	bne.n	8006b3a <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8006b2e:	4b6a      	ldr	r3, [pc, #424]	; (8006cd8 <GPIO_Config+0x23c>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	4a69      	ldr	r2, [pc, #420]	; (8006cd8 <GPIO_Config+0x23c>)
 8006b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b38:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	785b      	ldrb	r3, [r3, #1]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	2103      	movs	r1, #3
 8006b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5e:	43db      	mvns	r3, r3
 8006b60:	4619      	mov	r1, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	400a      	ands	r2, r1
 8006b68:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	6819      	ldr	r1, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	789b      	ldrb	r3, [r3, #2]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	fa02 f303 	lsl.w	r3, r2, r3
 8006b88:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	4619      	mov	r1, r3
 8006b96:	2301      	movs	r3, #1
 8006b98:	408b      	lsls	r3, r1
 8006b9a:	43db      	mvns	r3, r3
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	400a      	ands	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	6859      	ldr	r1, [r3, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	78db      	ldrb	r3, [r3, #3]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc6:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	2103      	movs	r1, #3
 8006bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bda:	43db      	mvns	r3, r3
 8006bdc:	4619      	mov	r1, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	400a      	ands	r2, r1
 8006be4:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	6899      	ldr	r1, [r3, #8]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	791b      	ldrb	r3, [r3, #4]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	fa02 f303 	lsl.w	r3, r2, r3
 8006c06:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	2103      	movs	r1, #3
 8006c16:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1a:	43db      	mvns	r3, r3
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	400a      	ands	r2, r1
 8006c24:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	68d9      	ldr	r1, [r3, #12]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	785b      	ldrb	r3, [r3, #1]
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d143      	bne.n	8006cc6 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b07      	cmp	r3, #7
 8006c44:	d81f      	bhi.n	8006c86 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	6a1a      	ldr	r2, [r3, #32]
 8006c54:	210f      	movs	r1, #15
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	fa01 f303 	lsl.w	r3, r1, r3
 8006c5c:	43db      	mvns	r3, r3
 8006c5e:	4619      	mov	r1, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	400a      	ands	r2, r1
 8006c66:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	6a1a      	ldr	r2, [r3, #32]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	795b      	ldrb	r3, [r3, #5]
 8006c72:	4619      	mov	r1, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	fa01 f303 	lsl.w	r3, r1, r3
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8006c84:	e01f      	b.n	8006cc6 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	3b08      	subs	r3, #8
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c96:	210f      	movs	r1, #15
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9e:	43db      	mvns	r3, r3
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	400a      	ands	r2, r1
 8006ca8:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	795b      	ldrb	r3, [r3, #5]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006cc6:	bf00      	nop
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40020000 	.word	0x40020000
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	40020400 	.word	0x40020400
 8006ce0:	40020800 	.word	0x40020800
 8006ce4:	40020c00 	.word	0x40020c00
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	40021c00 	.word	0x40021c00

08006cf0 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d10d      	bne.n	8006d1e <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	699a      	ldr	r2, [r3, #24]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	2301      	movs	r3, #1
 8006d10:	408b      	lsls	r3, r1
 8006d12:	4619      	mov	r1, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 8006d1c:	e00d      	b.n	8006d3a <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	699a      	ldr	r2, [r3, #24]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	3310      	adds	r3, #16
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d30:	4619      	mov	r1, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	619a      	str	r2, [r3, #24]
}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	695a      	ldr	r2, [r3, #20]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	408b      	lsls	r3, r1
 8006d5e:	4619      	mov	r1, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	404a      	eors	r2, r1
 8006d66:	615a      	str	r2, [r3, #20]
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <i2c_Config>:
 * Recordar de configurar los pines GPIOx por medio de las funciones alternativas,
 * Ademas de configurar dichos pines como open_drain
 */

void i2c_Config(I2C_Handler_t *ptrHandlerI2C)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	uint8_t clockAPB1 = getClockAPB1();     //Variable que guarda la velocidad de reloj entregada al bus APB1
 8006d7c:	f000 fa9c 	bl	80072b8 <getClockAPB1>
 8006d80:	4603      	mov	r3, r0
 8006d82:	73fb      	strb	r3, [r7, #15]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	if(ptrHandlerI2C->prtI2Cx == I2C1)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a60      	ldr	r2, [pc, #384]	; (8006f0c <i2c_Config+0x198>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d106      	bne.n	8006d9c <i2c_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8006d8e:	4b60      	ldr	r3, [pc, #384]	; (8006f10 <i2c_Config+0x19c>)
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	4a5f      	ldr	r2, [pc, #380]	; (8006f10 <i2c_Config+0x19c>)
 8006d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d98:	6413      	str	r3, [r2, #64]	; 0x40
 8006d9a:	e016      	b.n	8006dca <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C2)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a5c      	ldr	r2, [pc, #368]	; (8006f14 <i2c_Config+0x1a0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d106      	bne.n	8006db4 <i2c_Config+0x40>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8006da6:	4b5a      	ldr	r3, [pc, #360]	; (8006f10 <i2c_Config+0x19c>)
 8006da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006daa:	4a59      	ldr	r2, [pc, #356]	; (8006f10 <i2c_Config+0x19c>)
 8006dac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006db0:	6413      	str	r3, [r2, #64]	; 0x40
 8006db2:	e00a      	b.n	8006dca <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C3)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a57      	ldr	r2, [pc, #348]	; (8006f18 <i2c_Config+0x1a4>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d105      	bne.n	8006dca <i2c_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8006dbe:	4b54      	ldr	r3, [pc, #336]	; (8006f10 <i2c_Config+0x19c>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	4a53      	ldr	r2, [pc, #332]	; (8006f10 <i2c_Config+0x19c>)
 8006dc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dc8:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//---------------------------------2) Reiniciamos el periferico------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_SWRST;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dd8:	601a      	str	r2, [r3, #0]
	__NOP();
 8006dda:	bf00      	nop
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_SWRST;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dea:	601a      	str	r2, [r3, #0]

	//-----------------------------------3) Valor del reloj principal------------------------------------------
	//Registro: CR2

	ptrHandlerI2C->prtI2Cx->CR2 &= ~(0b111111<<I2C_CR2_FREQ_Pos);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006dfa:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->prtI2Cx->CR2 |= (clockAPB1<<I2C_CR2_FREQ_Pos);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6859      	ldr	r1, [r3, #4]
 8006e02:	7bfa      	ldrb	r2, [r7, #15]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	605a      	str	r2, [r3, #4]
	//-------------------------------------4) Configuracion del I2C------------------------------------------
	//Registro: CCR
	//Registro: TRISE

	//Variables que almacenan el respectivo valor a cargar en los registros CRR y Trise
	uint16_t valueCRR = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	81bb      	strh	r3, [r7, #12]
	uint8_t valueTrise = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	72fb      	strb	r3, [r7, #11]

	//definimos inicialmente los registro en 0
	ptrHandlerI2C->prtI2Cx->CCR = 0;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->prtI2Cx->TRISE = 0;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2200      	movs	r2, #0
 8006e22:	621a      	str	r2, [r3, #32]

	//Configuramos el I2C deacuerdo al modo selsecionado
	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	795b      	ldrb	r3, [r3, #5]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d121      	bne.n	8006e70 <i2c_Config+0xfc>
	{
		//Seleccionamos el modo estandar
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69da      	ldr	r2, [r3, #28]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e3a:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (5000*clockAPB1)/1000;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	461a      	mov	r2, r3
 8006e42:	0092      	lsls	r2, r2, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	69d9      	ldr	r1, [r3, #28]
 8006e4e:	89ba      	ldrh	r2, [r7, #12]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((1000*clockAPB1)/1000)+1;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6a19      	ldr	r1, [r3, #32]
 8006e64:	7afa      	ldrb	r2, [r7, #11]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	621a      	str	r2, [r3, #32]
 8006e6e:	e039      	b.n	8006ee4 <i2c_Config+0x170>
	}
	else
	{
		//Seleccionamos el modo Fast
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	69da      	ldr	r2, [r3, #28]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e7e:	61da      	str	r2, [r3, #28]
		ptrHandlerI2C->prtI2Cx->CCR |= I2C_CCR_FS;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	69da      	ldr	r2, [r3, #28]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e8e:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (2500*clockAPB1)/3000;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	4a20      	ldr	r2, [pc, #128]	; (8006f1c <i2c_Config+0x1a8>)
 8006e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8006ea0:	1192      	asrs	r2, r2, #6
 8006ea2:	17db      	asrs	r3, r3, #31
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	69d9      	ldr	r1, [r3, #28]
 8006eae:	89ba      	ldrh	r2, [r7, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((300*clockAPB1)/1000)+1;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006ebe:	fb02 f303 	mul.w	r3, r2, r3
 8006ec2:	4a17      	ldr	r2, [pc, #92]	; (8006f20 <i2c_Config+0x1ac>)
 8006ec4:	fb82 1203 	smull	r1, r2, r2, r3
 8006ec8:	1192      	asrs	r2, r2, #6
 8006eca:	17db      	asrs	r3, r3, #31
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6a19      	ldr	r1, [r3, #32]
 8006eda:	7afa      	ldrb	r2, [r7, #11]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	621a      	str	r2, [r3, #32]
	}

	//-----------------------------------5) Activamos el modulo I2C------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_PE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0201 	bic.w	r2, r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_PE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0201 	orr.w	r2, r2, #1
 8006f02:	601a      	str	r2, [r3, #0]
}
 8006f04:	bf00      	nop
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40005400 	.word	0x40005400
 8006f10:	40023800 	.word	0x40023800
 8006f14:	40005800 	.word	0x40005800
 8006f18:	40005c00 	.word	0x40005c00
 8006f1c:	057619f1 	.word	0x057619f1
 8006f20:	10624dd3 	.word	0x10624dd3

08006f24 <i2c_StartTrasaction>:

//----------------------------------------Funciones para la Transaccion----------------------------------------
//Funcion para empezar la Transaccion
void i2c_StartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
	/*verificamos que la linea no esta ocupada
	 * bit "busy" en I2C
	 */
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8006f2c:	e000      	b.n	8006f30 <i2c_StartTrasaction+0xc>
	{
		__NOP();
 8006f2e:	bf00      	nop
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1f7      	bne.n	8006f2e <i2c_StartTrasaction+0xa>
	}
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f4c:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8006f4e:	e000      	b.n	8006f52 <i2c_StartTrasaction+0x2e>
	{
		__NOP();
 8006f50:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d0f7      	beq.n	8006f50 <i2c_StartTrasaction+0x2c>
	}
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <i2c_ReStartTrasaction>:

//Generar de nuevo una señal para empazar la Transaccion
void i2c_ReStartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f84:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8006f86:	e000      	b.n	8006f8a <i2c_ReStartTrasaction+0x1c>
	{
		__NOP();
 8006f88:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d0f7      	beq.n	8006f88 <i2c_ReStartTrasaction+0x1a>
	}
}
 8006f98:	bf00      	nop
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <i2c_SendSlaveAddressRW>:

//Funcion para enviar la direcion de Slave ademas de definir la lectura o escritura del Sclave
void i2c_SendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b085      	sub	sp, #20
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	70fb      	strb	r3, [r7, #3]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	70bb      	strb	r3, [r7, #2]
	//Definimos una variable auxiliar
	uint8_t auxByte = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	//Cargamos la direccion del Sclave, ademas cargamos el bit de lectura o escritura
	ptrHandlerI2C->prtI2Cx->DR = (slaveAddress<<1) | readOrWrite;
 8006fba:	78fb      	ldrb	r3, [r7, #3]
 8006fbc:	005a      	lsls	r2, r3, #1
 8006fbe:	78bb      	ldrb	r3, [r7, #2]
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "ADDR" del evento "Address" se levante
	//Se limpia la bandera "ADDR" leyendo SR1->leyendo en SR2
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8006fc8:	e000      	b.n	8006fcc <i2c_SendSlaveAddressRW+0x26>
	{
		__NOP();
 8006fca:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0f7      	beq.n	8006fca <i2c_SendSlaveAddressRW+0x24>
	}
	//Se limpia la bandera "ADDR"
	auxByte = ptrHandlerI2C->prtI2Cx->SR1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->prtI2Cx->SR2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	73fb      	strb	r3, [r7, #15]
}
 8006fea:	bf00      	nop
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <i2c_SendMemoryAddress>:

//Enviamos la direccion de memoria que deseamos leer o escribir
void i2c_SendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	460b      	mov	r3, r1
 8007000:	70fb      	strb	r3, [r7, #3]
	//Enviamos la direccion de memoria que desamos leer
	ptrHandlerI2C->prtI2Cx->DR = memAddr;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	78fa      	ldrb	r2, [r7, #3]
 8007008:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "TXE" del evento "Data1" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 800700a:	e000      	b.n	800700e <i2c_SendMemoryAddress+0x18>
	{
		__NOP();
 800700c:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0f7      	beq.n	800700c <i2c_SendMemoryAddress+0x16>
	}
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <i2c_SendDataByte>:

//Escritura de datos
void i2c_SendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	460b      	mov	r3, r1
 8007034:	70fb      	strb	r3, [r7, #3]
	//Cargamos el valor que desasmos escribir
	ptrHandlerI2C->prtI2Cx->DR = dataToWrite;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "BTF" del evento "Transmision" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 800703e:	e000      	b.n	8007042 <i2c_SendDataByte+0x18>
	{
		__NOP();
 8007040:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0f7      	beq.n	8007040 <i2c_SendDataByte+0x16>
	}
}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <i2c_ReadDataByte>:

//Lectura de datos
uint8_t i2c_ReadDataByte(I2C_Handler_t *ptrHandlerI2C)
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
	//Esperamos a que la bandera "RxNE" del evento "Recepcion" se levante
	//Se limpia la bandera "RxNE" leyendo el registro DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8007066:	e000      	b.n	800706a <i2c_ReadDataByte+0xc>
	{
		__NOP();
 8007068:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0f7      	beq.n	8007068 <i2c_ReadDataByte+0xa>
	}
	//guardamos los datos recibimos
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->prtI2Cx->DR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	b2da      	uxtb	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C ;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	799b      	ldrb	r3, [r3, #6]
}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <i2c_SendNoAck>:

//Funcion para activar la indicaicon de NoACK(indicacion para el Sclave de terminar la transmision de datos)
void i2c_SendNoAck(I2C_Handler_t *ptrHandlerI2C)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
	//Esribimos cero en el bit Ack del registro CR1
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_ACK;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070aa:	601a      	str	r2, [r3, #0]

}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <i2c_StopTrasaction>:
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_ACK;
}

//Funcion para generar el Stop bit
void i2c_StopTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_STOP;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ce:	601a      	str	r2, [r3, #0]
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <i2c_ReadSingleRegister>:

//------------------------------------Funciones para la comunicacion por I2C----------------------------------------

uint8_t i2c_ReadSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
	//0. Creacion de una variable auxiliara para recibir el dato leido
	uint8_t auxRead = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73fb      	strb	r3, [r7, #15]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff ff19 	bl	8006f24 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	791b      	ldrb	r3, [r3, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff ff53 	bl	8006fa6 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos leer
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff ff76 	bl	8006ff6 <i2c_SendMemoryAddress>
	//4. Creamos una condicion de re start
	i2c_ReStartTrasaction(ptrHandlerI2C);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff ff2f 	bl	8006f6e <i2c_ReStartTrasaction>
	//5. Enviamos la direccion del Sclavo e indicamos que se desea leer el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	791b      	ldrb	r3, [r3, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff ff44 	bl	8006fa6 <i2c_SendSlaveAddressRW>
	//6. Leemos el dato que envia el Sclavo
	auxRead = i2c_ReadDataByte(ptrHandlerI2C);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff ff9d 	bl	800705e <i2c_ReadDataByte>
 8007124:	4603      	mov	r3, r0
 8007126:	73fb      	strb	r3, [r7, #15]
	//7. Generamso la condicio de NoAck
	i2c_SendNoAck(ptrHandlerI2C);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff ffb3 	bl	8007094 <i2c_SendNoAck>
	//8. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff ffc2 	bl	80070b8 <i2c_StopTrasaction>

	return auxRead;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <i2c_WriteSingleRegister>:

void i2c_WriteSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b082      	sub	sp, #8
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	460b      	mov	r3, r1
 8007148:	70fb      	strb	r3, [r7, #3]
 800714a:	4613      	mov	r3, r2
 800714c:	70bb      	strb	r3, [r7, #2]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff fee8 	bl	8006f24 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	791b      	ldrb	r3, [r3, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ff22 	bl	8006fa6 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos escribir
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7ff ff45 	bl	8006ff6 <i2c_SendMemoryAddress>
	//4. Enviamos el dato que se desea escribir en el Sclave
	i2c_SendDataByte(ptrHandlerI2C, newValue);
 800716c:	78bb      	ldrb	r3, [r7, #2]
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff ff5a 	bl	800702a <i2c_SendDataByte>
	//5. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff ff9e 	bl	80070b8 <i2c_StopTrasaction>
}
 800717c:	bf00      	nop
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 800718e:	4a39      	ldr	r2, [pc, #228]	; (8007274 <configPLL+0xf0>)
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	2b31      	cmp	r3, #49	; 0x31
 8007198:	d804      	bhi.n	80071a4 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800719a:	4b37      	ldr	r3, [pc, #220]	; (8007278 <configPLL+0xf4>)
 800719c:	4a36      	ldr	r2, [pc, #216]	; (8007278 <configPLL+0xf4>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	6093      	str	r3, [r2, #8]
 80071a2:	e005      	b.n	80071b0 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80071a4:	4b34      	ldr	r3, [pc, #208]	; (8007278 <configPLL+0xf4>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	4a33      	ldr	r2, [pc, #204]	; (8007278 <configPLL+0xf4>)
 80071aa:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80071ae:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 80071b0:	4b31      	ldr	r3, [pc, #196]	; (8007278 <configPLL+0xf4>)
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	4a30      	ldr	r2, [pc, #192]	; (8007278 <configPLL+0xf4>)
 80071b6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80071ba:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 80071bc:	4b2e      	ldr	r3, [pc, #184]	; (8007278 <configPLL+0xf4>)
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	4a2d      	ldr	r2, [pc, #180]	; (8007278 <configPLL+0xf4>)
 80071c2:	f043 0312 	orr.w	r3, r3, #18
 80071c6:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 80071c8:	4b2b      	ldr	r3, [pc, #172]	; (8007278 <configPLL+0xf4>)
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	79fa      	ldrb	r2, [r7, #7]
 80071ce:	0092      	lsls	r2, r2, #2
 80071d0:	3a0e      	subs	r2, #14
 80071d2:	0192      	lsls	r2, r2, #6
 80071d4:	4611      	mov	r1, r2
 80071d6:	4a28      	ldr	r2, [pc, #160]	; (8007278 <configPLL+0xf4>)
 80071d8:	430b      	orrs	r3, r1
 80071da:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 80071dc:	4b26      	ldr	r3, [pc, #152]	; (8007278 <configPLL+0xf4>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	4a25      	ldr	r2, [pc, #148]	; (8007278 <configPLL+0xf4>)
 80071e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071e6:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 80071e8:	4b23      	ldr	r3, [pc, #140]	; (8007278 <configPLL+0xf4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a22      	ldr	r2, [pc, #136]	; (8007278 <configPLL+0xf4>)
 80071ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071f2:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 80071f4:	e000      	b.n	80071f8 <configPLL+0x74>
	{
		__NOP();
 80071f6:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 80071f8:	4b1f      	ldr	r3, [pc, #124]	; (8007278 <configPLL+0xf4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0f8      	beq.n	80071f6 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	2b5a      	cmp	r3, #90	; 0x5a
 8007208:	d909      	bls.n	800721e <configPLL+0x9a>
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	2b64      	cmp	r3, #100	; 0x64
 800720e:	d806      	bhi.n	800721e <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8007210:	4b1a      	ldr	r3, [pc, #104]	; (800727c <configPLL+0xf8>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a19      	ldr	r2, [pc, #100]	; (800727c <configPLL+0xf8>)
 8007216:	f043 0303 	orr.w	r3, r3, #3
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	e01d      	b.n	800725a <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	2b40      	cmp	r3, #64	; 0x40
 8007222:	d909      	bls.n	8007238 <configPLL+0xb4>
 8007224:	79fb      	ldrb	r3, [r7, #7]
 8007226:	2b5a      	cmp	r3, #90	; 0x5a
 8007228:	d806      	bhi.n	8007238 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 800722a:	4b14      	ldr	r3, [pc, #80]	; (800727c <configPLL+0xf8>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a13      	ldr	r2, [pc, #76]	; (800727c <configPLL+0xf8>)
 8007230:	f043 0302 	orr.w	r3, r3, #2
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	e010      	b.n	800725a <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	2b1e      	cmp	r3, #30
 800723c:	d909      	bls.n	8007252 <configPLL+0xce>
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	2b40      	cmp	r3, #64	; 0x40
 8007242:	d806      	bhi.n	8007252 <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8007244:	4b0d      	ldr	r3, [pc, #52]	; (800727c <configPLL+0xf8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a0c      	ldr	r2, [pc, #48]	; (800727c <configPLL+0xf8>)
 800724a:	f043 0301 	orr.w	r3, r3, #1
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	e003      	b.n	800725a <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8007252:	4b0a      	ldr	r3, [pc, #40]	; (800727c <configPLL+0xf8>)
 8007254:	4a09      	ldr	r2, [pc, #36]	; (800727c <configPLL+0xf8>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <configPLL+0xf4>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	4a06      	ldr	r2, [pc, #24]	; (8007278 <configPLL+0xf4>)
 8007260:	f043 0302 	orr.w	r3, r3, #2
 8007264:	6093      	str	r3, [r2, #8]

}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	20009494 	.word	0x20009494
 8007278:	40023800 	.word	0x40023800
 800727c:	40023c00 	.word	0x40023c00

08007280 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 800728a:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <getConfigPLL+0x30>)
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	2b02      	cmp	r3, #2
 8007294:	d103      	bne.n	800729e <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8007296:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <getConfigPLL+0x34>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	71fb      	strb	r3, [r7, #7]
 800729c:	e001      	b.n	80072a2 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 800729e:	2310      	movs	r3, #16
 80072a0:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 80072a2:	79fb      	ldrb	r3, [r7, #7]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	40023800 	.word	0x40023800
 80072b4:	20009494 	.word	0x20009494

080072b8 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 80072be:	f7ff ffdf 	bl	8007280 <getConfigPLL>
 80072c2:	4603      	mov	r3, r0
 80072c4:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 80072c6:	2300      	movs	r3, #0
 80072c8:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 80072ca:	79bb      	ldrb	r3, [r7, #6]
 80072cc:	2b31      	cmp	r3, #49	; 0x31
 80072ce:	d802      	bhi.n	80072d6 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 80072d0:	79bb      	ldrb	r3, [r7, #6]
 80072d2:	71fb      	strb	r3, [r7, #7]
 80072d4:	e002      	b.n	80072dc <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 80072d6:	79bb      	ldrb	r3, [r7, #6]
 80072d8:	089b      	lsrs	r3, r3, #2
 80072da:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 80072dc:	79fb      	ldrb	r3, [r7, #7]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 80072f2:	4b0a      	ldr	r3, [pc, #40]	; (800731c <configMCO2+0x34>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	4a09      	ldr	r2, [pc, #36]	; (800731c <configMCO2+0x34>)
 80072f8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80072fc:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 80072fe:	4b07      	ldr	r3, [pc, #28]	; (800731c <configMCO2+0x34>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	79fa      	ldrb	r2, [r7, #7]
 8007304:	0792      	lsls	r2, r2, #30
 8007306:	4611      	mov	r1, r2
 8007308:	4a04      	ldr	r2, [pc, #16]	; (800731c <configMCO2+0x34>)
 800730a:	430b      	orrs	r3, r1
 800730c:	6093      	str	r3, [r2, #8]
}
 800730e:	bf00      	nop
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	40023800 	.word	0x40023800

08007320 <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	4603      	mov	r3, r0
 8007328:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	3b01      	subs	r3, #1
 800732e:	2b04      	cmp	r3, #4
 8007330:	d84b      	bhi.n	80073ca <configMCO2PRE+0xaa>
 8007332:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <configMCO2PRE+0x18>)
 8007334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007338:	0800734d 	.word	0x0800734d
 800733c:	08007363 	.word	0x08007363
 8007340:	0800737d 	.word	0x0800737d
 8007344:	08007397 	.word	0x08007397
 8007348:	080073b1 	.word	0x080073b1
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800734c:	4b23      	ldr	r3, [pc, #140]	; (80073dc <configMCO2PRE+0xbc>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	4a22      	ldr	r2, [pc, #136]	; (80073dc <configMCO2PRE+0xbc>)
 8007352:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8007356:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 8007358:	4b20      	ldr	r3, [pc, #128]	; (80073dc <configMCO2PRE+0xbc>)
 800735a:	4a20      	ldr	r2, [pc, #128]	; (80073dc <configMCO2PRE+0xbc>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	6093      	str	r3, [r2, #8]
			break;
 8007360:	e035      	b.n	80073ce <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8007362:	4b1e      	ldr	r3, [pc, #120]	; (80073dc <configMCO2PRE+0xbc>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	4a1d      	ldr	r2, [pc, #116]	; (80073dc <configMCO2PRE+0xbc>)
 8007368:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800736c:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 800736e:	4b1b      	ldr	r3, [pc, #108]	; (80073dc <configMCO2PRE+0xbc>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	4a1a      	ldr	r2, [pc, #104]	; (80073dc <configMCO2PRE+0xbc>)
 8007374:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007378:	6093      	str	r3, [r2, #8]
			break;
 800737a:	e028      	b.n	80073ce <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800737c:	4b17      	ldr	r3, [pc, #92]	; (80073dc <configMCO2PRE+0xbc>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	4a16      	ldr	r2, [pc, #88]	; (80073dc <configMCO2PRE+0xbc>)
 8007382:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8007386:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 8007388:	4b14      	ldr	r3, [pc, #80]	; (80073dc <configMCO2PRE+0xbc>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	4a13      	ldr	r2, [pc, #76]	; (80073dc <configMCO2PRE+0xbc>)
 800738e:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 8007392:	6093      	str	r3, [r2, #8]
			break;
 8007394:	e01b      	b.n	80073ce <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8007396:	4b11      	ldr	r3, [pc, #68]	; (80073dc <configMCO2PRE+0xbc>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	4a10      	ldr	r2, [pc, #64]	; (80073dc <configMCO2PRE+0xbc>)
 800739c:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80073a0:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 80073a2:	4b0e      	ldr	r3, [pc, #56]	; (80073dc <configMCO2PRE+0xbc>)
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	4a0d      	ldr	r2, [pc, #52]	; (80073dc <configMCO2PRE+0xbc>)
 80073a8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80073ac:	6093      	str	r3, [r2, #8]
			break;
 80073ae:	e00e      	b.n	80073ce <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80073b0:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <configMCO2PRE+0xbc>)
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	4a09      	ldr	r2, [pc, #36]	; (80073dc <configMCO2PRE+0xbc>)
 80073b6:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80073ba:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 80073bc:	4b07      	ldr	r3, [pc, #28]	; (80073dc <configMCO2PRE+0xbc>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	4a06      	ldr	r2, [pc, #24]	; (80073dc <configMCO2PRE+0xbc>)
 80073c2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80073c6:	6093      	str	r3, [r2, #8]
			break;
 80073c8:	e001      	b.n	80073ce <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 80073ca:	bf00      	nop
			break;
 80073cc:	bf00      	nop
		}
	}

}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	40023800 	.word	0x40023800

080073e0 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f0:	d106      	bne.n	8007400 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80073f2:	4b81      	ldr	r3, [pc, #516]	; (80075f8 <pwm_Config+0x218>)
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	4a80      	ldr	r2, [pc, #512]	; (80075f8 <pwm_Config+0x218>)
 80073f8:	f043 0301 	orr.w	r3, r3, #1
 80073fc:	6413      	str	r3, [r2, #64]	; 0x40
 80073fe:	e024      	b.n	800744a <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	4a7d      	ldr	r2, [pc, #500]	; (80075fc <pwm_Config+0x21c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d106      	bne.n	8007418 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800740a:	4b7b      	ldr	r3, [pc, #492]	; (80075f8 <pwm_Config+0x218>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	4a7a      	ldr	r2, [pc, #488]	; (80075f8 <pwm_Config+0x218>)
 8007410:	f043 0302 	orr.w	r3, r3, #2
 8007414:	6413      	str	r3, [r2, #64]	; 0x40
 8007416:	e018      	b.n	800744a <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	4a78      	ldr	r2, [pc, #480]	; (8007600 <pwm_Config+0x220>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d106      	bne.n	8007430 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8007422:	4b75      	ldr	r3, [pc, #468]	; (80075f8 <pwm_Config+0x218>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	4a74      	ldr	r2, [pc, #464]	; (80075f8 <pwm_Config+0x218>)
 8007428:	f043 0304 	orr.w	r3, r3, #4
 800742c:	6413      	str	r3, [r2, #64]	; 0x40
 800742e:	e00c      	b.n	800744a <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	4a73      	ldr	r2, [pc, #460]	; (8007604 <pwm_Config+0x224>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d106      	bne.n	8007448 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800743a:	4b6f      	ldr	r3, [pc, #444]	; (80075f8 <pwm_Config+0x218>)
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	4a6e      	ldr	r2, [pc, #440]	; (80075f8 <pwm_Config+0x218>)
 8007440:	f043 0308 	orr.w	r3, r3, #8
 8007444:	6413      	str	r3, [r2, #64]	; 0x40
 8007446:	e000      	b.n	800744a <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8007448:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fa4c 	bl	80078e8 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b03      	cmp	r3, #3
 8007456:	f200 8118 	bhi.w	800768a <pwm_Config+0x2aa>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <pwm_Config+0x80>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	08007471 	.word	0x08007471
 8007464:	080074f3 	.word	0x080074f3
 8007468:	08007575 	.word	0x08007575
 800746c:	08007609 	.word	0x08007609
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	699a      	ldr	r2, [r3, #24]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f022 0203 	bic.w	r2, r2, #3
 800747e:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	699a      	ldr	r2, [r3, #24]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800748e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	699a      	ldr	r2, [r3, #24]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800749e:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	699a      	ldr	r2, [r3, #24]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f022 0208 	bic.w	r2, r2, #8
 80074ae:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f042 0208 	orr.w	r2, r2, #8
 80074be:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	699a      	ldr	r2, [r3, #24]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f022 0204 	bic.w	r2, r2, #4
 80074ce:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	699a      	ldr	r2, [r3, #24]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f042 0204 	orr.w	r2, r2, #4
 80074de:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074ee:	619a      	str	r2, [r3, #24]

		break;
 80074f0:	e0cc      	b.n	800768c <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	699a      	ldr	r2, [r3, #24]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f022 0203 	bic.w	r2, r2, #3
 8007500:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	699a      	ldr	r2, [r3, #24]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007510:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8007520:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	699a      	ldr	r2, [r3, #24]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007530:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	699a      	ldr	r2, [r3, #24]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007540:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	699a      	ldr	r2, [r3, #24]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007550:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	699a      	ldr	r2, [r3, #24]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007560:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	699a      	ldr	r2, [r3, #24]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007570:	619a      	str	r2, [r3, #24]

		break;
 8007572:	e08b      	b.n	800768c <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	69da      	ldr	r2, [r3, #28]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f022 0203 	bic.w	r2, r2, #3
 8007582:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	69da      	ldr	r2, [r3, #28]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007592:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	69da      	ldr	r2, [r3, #28]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80075a2:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	69da      	ldr	r2, [r3, #28]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f022 0208 	bic.w	r2, r2, #8
 80075b2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	69da      	ldr	r2, [r3, #28]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f042 0208 	orr.w	r2, r2, #8
 80075c2:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	69da      	ldr	r2, [r3, #28]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f022 0204 	bic.w	r2, r2, #4
 80075d2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	69da      	ldr	r2, [r3, #28]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f042 0204 	orr.w	r2, r2, #4
 80075e2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	69da      	ldr	r2, [r3, #28]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075f2:	61da      	str	r2, [r3, #28]

		break;
 80075f4:	e04a      	b.n	800768c <pwm_Config+0x2ac>
 80075f6:	bf00      	nop
 80075f8:	40023800 	.word	0x40023800
 80075fc:	40000400 	.word	0x40000400
 8007600:	40000800 	.word	0x40000800
 8007604:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	69da      	ldr	r2, [r3, #28]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007616:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	69da      	ldr	r2, [r3, #28]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007626:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	69da      	ldr	r2, [r3, #28]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8007636:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	69da      	ldr	r2, [r3, #28]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007646:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	69da      	ldr	r2, [r3, #28]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007656:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	69da      	ldr	r2, [r3, #28]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007666:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	69da      	ldr	r2, [r3, #28]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007676:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	69da      	ldr	r2, [r3, #28]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007686:	61da      	str	r2, [r3, #28]

		break;
 8007688:	e000      	b.n	800768c <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 800768a:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	791b      	ldrb	r3, [r3, #4]
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f896 	bl	80077c4 <statusPolarityPWM>

}
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d87f      	bhi.n	80077b4 <statusInOutPWM+0x114>
 80076b4:	a201      	add	r2, pc, #4	; (adr r2, 80076bc <statusInOutPWM+0x1c>)
 80076b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ba:	bf00      	nop
 80076bc:	080076cd 	.word	0x080076cd
 80076c0:	08007707 	.word	0x08007707
 80076c4:	08007741 	.word	0x08007741
 80076c8:	0800777b 	.word	0x0800777b
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d110      	bne.n	80076f4 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	6a1a      	ldr	r2, [r3, #32]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f022 0201 	bic.w	r2, r2, #1
 80076e0:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	6a1a      	ldr	r2, [r3, #32]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f042 0201 	orr.w	r2, r2, #1
 80076f0:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 80076f2:	e060      	b.n	80077b6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	6a1a      	ldr	r2, [r3, #32]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f022 0201 	bic.w	r2, r2, #1
 8007702:	621a      	str	r2, [r3, #32]
		break;
 8007704:	e057      	b.n	80077b6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8007706:	78fb      	ldrb	r3, [r7, #3]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d110      	bne.n	800772e <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	6a1a      	ldr	r2, [r3, #32]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f022 0210 	bic.w	r2, r2, #16
 800771a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	6a1a      	ldr	r2, [r3, #32]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f042 0210 	orr.w	r2, r2, #16
 800772a:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 800772c:	e043      	b.n	80077b6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	6a1a      	ldr	r2, [r3, #32]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f022 0210 	bic.w	r2, r2, #16
 800773c:	621a      	str	r2, [r3, #32]
		break;
 800773e:	e03a      	b.n	80077b6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d110      	bne.n	8007768 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	6a1a      	ldr	r2, [r3, #32]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007754:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	6a1a      	ldr	r2, [r3, #32]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007764:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 8007766:	e026      	b.n	80077b6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	6a1a      	ldr	r2, [r3, #32]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007776:	621a      	str	r2, [r3, #32]
		break;
 8007778:	e01d      	b.n	80077b6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d110      	bne.n	80077a2 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	6a1a      	ldr	r2, [r3, #32]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800778e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	6a1a      	ldr	r2, [r3, #32]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800779e:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 80077a0:	e009      	b.n	80077b6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	6a1a      	ldr	r2, [r3, #32]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077b0:	621a      	str	r2, [r3, #32]
		break;
 80077b2:	e000      	b.n	80077b6 <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 80077b4:	bf00      	nop
	}
	}
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop

080077c4 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b03      	cmp	r3, #3
 80077d6:	d87f      	bhi.n	80078d8 <statusPolarityPWM+0x114>
 80077d8:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <statusPolarityPWM+0x1c>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	080077f1 	.word	0x080077f1
 80077e4:	0800782b 	.word	0x0800782b
 80077e8:	08007865 	.word	0x08007865
 80077ec:	0800789f 	.word	0x0800789f
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d110      	bne.n	8007818 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	6a1a      	ldr	r2, [r3, #32]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f022 0202 	bic.w	r2, r2, #2
 8007804:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	6a1a      	ldr	r2, [r3, #32]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f042 0202 	orr.w	r2, r2, #2
 8007814:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 8007816:	e060      	b.n	80078da <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	6a1a      	ldr	r2, [r3, #32]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f022 0202 	bic.w	r2, r2, #2
 8007826:	621a      	str	r2, [r3, #32]
		break;
 8007828:	e057      	b.n	80078da <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d110      	bne.n	8007852 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	6a1a      	ldr	r2, [r3, #32]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f022 0220 	bic.w	r2, r2, #32
 800783e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	6a1a      	ldr	r2, [r3, #32]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f042 0220 	orr.w	r2, r2, #32
 800784e:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8007850:	e043      	b.n	80078da <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	6a1a      	ldr	r2, [r3, #32]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f022 0220 	bic.w	r2, r2, #32
 8007860:	621a      	str	r2, [r3, #32]
		break;
 8007862:	e03a      	b.n	80078da <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d110      	bne.n	800788c <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	6a1a      	ldr	r2, [r3, #32]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007878:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	6a1a      	ldr	r2, [r3, #32]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007888:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 800788a:	e026      	b.n	80078da <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	6a1a      	ldr	r2, [r3, #32]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800789a:	621a      	str	r2, [r3, #32]
		break;
 800789c:	e01d      	b.n	80078da <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d110      	bne.n	80078c6 <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	6a1a      	ldr	r2, [r3, #32]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078b2:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	6a1a      	ldr	r2, [r3, #32]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078c2:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 80078c4:	e009      	b.n	80078da <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	6a1a      	ldr	r2, [r3, #32]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078d4:	621a      	str	r2, [r3, #32]
		break;
 80078d6:	e000      	b.n	80078da <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 80078d8:	bf00      	nop
	}
	}

}
 80078da:	bf00      	nop
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop

080078e8 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d823      	bhi.n	8007940 <setDuttyCycle+0x58>
 80078f8:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <setDuttyCycle+0x18>)
 80078fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fe:	bf00      	nop
 8007900:	08007911 	.word	0x08007911
 8007904:	0800791d 	.word	0x0800791d
 8007908:	08007929 	.word	0x08007929
 800790c:	08007935 	.word	0x08007935
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	885a      	ldrh	r2, [r3, #2]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800791a:	e012      	b.n	8007942 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	885a      	ldrh	r2, [r3, #2]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8007926:	e00c      	b.n	8007942 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	885a      	ldrh	r2, [r3, #2]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8007932:	e006      	b.n	8007942 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	885a      	ldrh	r2, [r3, #2]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800793e:	e000      	b.n	8007942 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8007940:	bf00      	nop
	}
	}

}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop

08007950 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	4a0d      	ldr	r2, [pc, #52]	; (8007998 <updateDuttyCyclePercentageFloat+0x48>)
 8007964:	fba2 2303 	umull	r2, r3, r2, r3
 8007968:	095b      	lsrs	r3, r3, #5
 800796a:	b29b      	uxth	r3, r3
 800796c:	ee07 3a90 	vmov	s15, r3
 8007970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007974:	edd7 7a00 	vldr	s15, [r7]
 8007978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007980:	ee17 3a90 	vmov	r3, s15
 8007984:	b29a      	uxth	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff ffac 	bl	80078e8 <setDuttyCycle>
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	51eb851f 	.word	0x51eb851f

0800799c <__NVIC_EnableIRQ>:
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	db0b      	blt.n	80079c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	f003 021f 	and.w	r2, r3, #31
 80079b4:	4907      	ldr	r1, [pc, #28]	; (80079d4 <__NVIC_EnableIRQ+0x38>)
 80079b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ba:	095b      	lsrs	r3, r3, #5
 80079bc:	2001      	movs	r0, #1
 80079be:	fa00 f202 	lsl.w	r2, r0, r2
 80079c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	e000e100 	.word	0xe000e100

080079d8 <config_SysTick_ms>:
uint64_t ticks_start = 0;
uint64_t ticks_counting = 0;

//Funcion para la configurar del Systick
void config_SysTick_ms(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
	//Reiniciamos el valor de la variable que cuenta el tiempo
	ticks = 0;
 80079de:	4919      	ldr	r1, [pc, #100]	; (8007a44 <config_SysTick_ms+0x6c>)
 80079e0:	f04f 0200 	mov.w	r2, #0
 80079e4:	f04f 0300 	mov.w	r3, #0
 80079e8:	e9c1 2300 	strd	r2, r3, [r1]

	/*Cargamos el valor del limite de incrementos que representa 1ms
	 * Depende de la señal de reloj interno del MCU
	 */

	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 80079ec:	f7ff fc48 	bl	8007280 <getConfigPLL>
 80079f0:	4603      	mov	r3, r0
 80079f2:	71fb      	strb	r3, [r7, #7]
	SysTick->LOAD = clock*1000;              //Cargamos el valor correspondiente a 1 ms
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079fa:	fb03 f202 	mul.w	r2, r3, r2
 80079fe:	4b12      	ldr	r3, [pc, #72]	; (8007a48 <config_SysTick_ms+0x70>)
 8007a00:	605a      	str	r2, [r3, #4]
//		break;
//	}
//	}

	//Limpiamos el valor actual del Systick
	SysTick->VAL = 0;
 8007a02:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <config_SysTick_ms+0x70>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	609a      	str	r2, [r3, #8]

	//Configuramos el relog interno como el reloj para el timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8007a08:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <config_SysTick_ms+0x70>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a0e      	ldr	r2, [pc, #56]	; (8007a48 <config_SysTick_ms+0x70>)
 8007a0e:	f043 0304 	orr.w	r3, r3, #4
 8007a12:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007a14:	b672      	cpsid	i
}
 8007a16:	bf00      	nop
	//Desactivamos las interrupciones globales

	__disable_irq();

	//Matriculamos la interrupcion en el NVIC
	NVIC_EnableIRQ(SysTick_IRQn);
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1c:	f7ff ffbe 	bl	800799c <__NVIC_EnableIRQ>
	//Activamos la interrupcion debido al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8007a20:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <config_SysTick_ms+0x70>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a08      	ldr	r2, [pc, #32]	; (8007a48 <config_SysTick_ms+0x70>)
 8007a26:	f043 0302 	orr.w	r3, r3, #2
 8007a2a:	6013      	str	r3, [r2, #0]
	//Actimos el timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8007a2c:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <config_SysTick_ms+0x70>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a05      	ldr	r2, [pc, #20]	; (8007a48 <config_SysTick_ms+0x70>)
 8007a32:	f043 0301 	orr.w	r3, r3, #1
 8007a36:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007a38:	b662      	cpsie	i
}
 8007a3a:	bf00      	nop
	//Activamos las interrupciones globales
	__enable_irq();

}
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20009498 	.word	0x20009498
 8007a48:	e000e010 	.word	0xe000e010

08007a4c <getTicksMs>:

//Funcion que retorna el tiempo en ms transcurrido desde que que inicio el SysTick
uint64_t getTicksMs(void)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	af00      	add	r7, sp, #0
	return ticks;
 8007a50:	4b04      	ldr	r3, [pc, #16]	; (8007a64 <getTicksMs+0x18>)
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8007a56:	4610      	mov	r0, r2
 8007a58:	4619      	mov	r1, r3
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	20009498 	.word	0x20009498

08007a68 <delay_ms>:

//Funcion que genera un delay de ms
void delay_ms(uint32_t wait_time_ms)
{
 8007a68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
	//Guardamos el valor de ticks transcurridos hasta el momento
	ticks_start = getTicksMs();
 8007a72:	f7ff ffeb 	bl	8007a4c <getTicksMs>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4914      	ldr	r1, [pc, #80]	; (8007acc <delay_ms+0x64>)
 8007a7c:	e9c1 2300 	strd	r2, r3, [r1]
	//Guardamos tambien el valor de ticks transcurridos hasta el momento en una nueva variable
	ticks_counting = getTicksMs();
 8007a80:	f7ff ffe4 	bl	8007a4c <getTicksMs>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4911      	ldr	r1, [pc, #68]	; (8007ad0 <delay_ms+0x68>)
 8007a8a:	e9c1 2300 	strd	r2, r3, [r1]

	//Realizamos un while que espera que se cumpla el tiempo asignado
	while(ticks_counting<(ticks_start+(uint64_t)wait_time_ms))
 8007a8e:	e006      	b.n	8007a9e <delay_ms+0x36>
	{
		//Actualizamos el valor
		ticks_counting = getTicksMs();
 8007a90:	f7ff ffdc 	bl	8007a4c <getTicksMs>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	490d      	ldr	r1, [pc, #52]	; (8007ad0 <delay_ms+0x68>)
 8007a9a:	e9c1 2300 	strd	r2, r3, [r1]
	while(ticks_counting<(ticks_start+(uint64_t)wait_time_ms))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	4698      	mov	r8, r3
 8007aa4:	4691      	mov	r9, r2
 8007aa6:	4b09      	ldr	r3, [pc, #36]	; (8007acc <delay_ms+0x64>)
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	eb18 0402 	adds.w	r4, r8, r2
 8007ab0:	eb49 0503 	adc.w	r5, r9, r3
 8007ab4:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <delay_ms+0x68>)
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	42a2      	cmp	r2, r4
 8007abc:	41ab      	sbcs	r3, r5
 8007abe:	d3e7      	bcc.n	8007a90 <delay_ms+0x28>
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	bf00      	nop
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007acc:	200094a0 	.word	0x200094a0
 8007ad0:	200094a8 	.word	0x200094a8

08007ad4 <SysTick_Handler>:

/* Cuando se produce una interrupcion en el NVIC debido SysTick, apuntara a esta
 * funcion en el vector de interrupciones
 */
void SysTick_Handler(void)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	af00      	add	r7, sp, #0
	//Verificamos que la interrupcion se lance
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 8007ad8:	4b0c      	ldr	r3, [pc, #48]	; (8007b0c <SysTick_Handler+0x38>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00e      	beq.n	8007b02 <SysTick_Handler+0x2e>
	{
		//Limpiamos la bandera
		SysTick->CTRL &= ~ SysTick_CTRL_COUNTFLAG_Msk;
 8007ae4:	4b09      	ldr	r3, [pc, #36]	; (8007b0c <SysTick_Handler+0x38>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a08      	ldr	r2, [pc, #32]	; (8007b0c <SysTick_Handler+0x38>)
 8007aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aee:	6013      	str	r3, [r2, #0]

		//Incrementamos en 1 el contador
		ticks++;
 8007af0:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <SysTick_Handler+0x3c>)
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	1c50      	adds	r0, r2, #1
 8007af8:	f143 0100 	adc.w	r1, r3, #0
 8007afc:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <SysTick_Handler+0x3c>)
 8007afe:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8007b02:	bf00      	nop
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	e000e010 	.word	0xe000e010
 8007b10:	20009498 	.word	0x20009498

08007b14 <__NVIC_EnableIRQ>:
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	db0b      	blt.n	8007b3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	f003 021f 	and.w	r2, r3, #31
 8007b2c:	4907      	ldr	r1, [pc, #28]	; (8007b4c <__NVIC_EnableIRQ+0x38>)
 8007b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b32:	095b      	lsrs	r3, r3, #5
 8007b34:	2001      	movs	r0, #1
 8007b36:	fa00 f202 	lsl.w	r2, r0, r2
 8007b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b3e:	bf00      	nop
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	e000e100 	.word	0xe000e100

08007b50 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	4a8f      	ldr	r2, [pc, #572]	; (8007d9c <USART_Config+0x24c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d107      	bne.n	8007b72 <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8007b62:	4b8f      	ldr	r3, [pc, #572]	; (8007da0 <USART_Config+0x250>)
 8007b64:	2210      	movs	r2, #16
 8007b66:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	4a8d      	ldr	r2, [pc, #564]	; (8007da4 <USART_Config+0x254>)
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	e019      	b.n	8007ba6 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	4a8c      	ldr	r2, [pc, #560]	; (8007da8 <USART_Config+0x258>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d108      	bne.n	8007b8e <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8007b7c:	4b88      	ldr	r3, [pc, #544]	; (8007da0 <USART_Config+0x250>)
 8007b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007b82:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	4a88      	ldr	r2, [pc, #544]	; (8007dac <USART_Config+0x25c>)
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	e00b      	b.n	8007ba6 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	4a87      	ldr	r2, [pc, #540]	; (8007db0 <USART_Config+0x260>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d106      	bne.n	8007ba6 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8007b98:	4b81      	ldr	r3, [pc, #516]	; (8007da0 <USART_Config+0x250>)
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	4a84      	ldr	r2, [pc, #528]	; (8007db4 <USART_Config+0x264>)
 8007ba4:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2200      	movs	r2, #0
 8007bac:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	789b      	ldrb	r3, [r3, #2]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d03d      	beq.n	8007c3a <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	68da      	ldr	r2, [r3, #12]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bcc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007bdc:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	68da      	ldr	r2, [r3, #12]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bec:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	68da      	ldr	r2, [r3, #12]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bfc:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	789b      	ldrb	r3, [r3, #2]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d110      	bne.n	8007c28 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c14:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c24:	60da      	str	r2, [r3, #12]
 8007c26:	e018      	b.n	8007c5a <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c36:	60da      	str	r2, [r3, #12]
 8007c38:	e00f      	b.n	8007c5a <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	68da      	ldr	r2, [r3, #12]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c48:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	68da      	ldr	r2, [r3, #12]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c58:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	78db      	ldrb	r3, [r3, #3]
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d84c      	bhi.n	8007cfc <USART_Config+0x1ac>
 8007c62:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <USART_Config+0x118>)
 8007c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c68:	08007c79 	.word	0x08007c79
 8007c6c:	08007c97 	.word	0x08007c97
 8007c70:	08007cb9 	.word	0x08007cb9
 8007c74:	08007cdb 	.word	0x08007cdb
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007c86:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	6912      	ldr	r2, [r2, #16]
 8007c92:	611a      	str	r2, [r3, #16]
		break;
 8007c94:	e041      	b.n	8007d1a <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	691a      	ldr	r2, [r3, #16]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007ca4:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	691a      	ldr	r2, [r3, #16]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007cb4:	611a      	str	r2, [r3, #16]
		break;
 8007cb6:	e030      	b.n	8007d1a <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	691a      	ldr	r2, [r3, #16]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007cc6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	691a      	ldr	r2, [r3, #16]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cd6:	611a      	str	r2, [r3, #16]
		break;
 8007cd8:	e01f      	b.n	8007d1a <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	691a      	ldr	r2, [r3, #16]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007ce8:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	691a      	ldr	r2, [r3, #16]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8007cf8:	611a      	str	r2, [r3, #16]
		break;
 8007cfa:	e00e      	b.n	8007d1a <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	691a      	ldr	r2, [r3, #16]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007d0a:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	6912      	ldr	r2, [r2, #16]
 8007d16:	611a      	str	r2, [r3, #16]
		break;
 8007d18:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	4a21      	ldr	r2, [pc, #132]	; (8007da8 <USART_Config+0x258>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d104      	bne.n	8007d32 <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8007d28:	f7ff fac6 	bl	80072b8 <getClockAPB1>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	73fb      	strb	r3, [r7, #15]
 8007d30:	e003      	b.n	8007d3a <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8007d32:	f7ff faa5 	bl	8007280 <getConfigPLL>
 8007d36:	4603      	mov	r3, r0
 8007d38:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	785b      	ldrb	r3, [r3, #1]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10b      	bne.n	8007d5a <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 f91f 	bl	8007f8c <getValueBaudRate>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	461a      	mov	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	609a      	str	r2, [r3, #8]
 8007d58:	e02f      	b.n	8007dba <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	785b      	ldrb	r3, [r3, #1]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d10b      	bne.n	8007d7a <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 f90f 	bl	8007f8c <getValueBaudRate>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	461a      	mov	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	609a      	str	r2, [r3, #8]
 8007d78:	e01f      	b.n	8007dba <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	785b      	ldrb	r3, [r3, #1]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d11a      	bne.n	8007db8 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 f8ff 	bl	8007f8c <getValueBaudRate>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	461a      	mov	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	609a      	str	r2, [r3, #8]
 8007d98:	e00f      	b.n	8007dba <USART_Config+0x26a>
 8007d9a:	bf00      	nop
 8007d9c:	40011000 	.word	0x40011000
 8007da0:	40023800 	.word	0x40023800
 8007da4:	200094b0 	.word	0x200094b0
 8007da8:	40004400 	.word	0x40004400
 8007dac:	200094b4 	.word	0x200094b4
 8007db0:	40011400 	.word	0x40011400
 8007db4:	200094b8 	.word	0x200094b8
	}
	else
	{
		__NOP();
 8007db8:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d866      	bhi.n	8007e90 <USART_Config+0x340>
 8007dc2:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <USART_Config+0x278>)
 8007dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc8:	08007dd9 	.word	0x08007dd9
 8007dcc:	08007dfb 	.word	0x08007dfb
 8007dd0:	08007e1d 	.word	0x08007e1d
 8007dd4:	08007e5f 	.word	0x08007e5f
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f022 0208 	bic.w	r2, r2, #8
 8007de6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	68da      	ldr	r2, [r3, #12]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f042 0208 	orr.w	r2, r2, #8
 8007df6:	60da      	str	r2, [r3, #12]

		break;
 8007df8:	e063      	b.n	8007ec2 <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	68da      	ldr	r2, [r3, #12]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f022 0204 	bic.w	r2, r2, #4
 8007e08:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f042 0204 	orr.w	r2, r2, #4
 8007e18:	60da      	str	r2, [r3, #12]

		break;
 8007e1a:	e052      	b.n	8007ec2 <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	68da      	ldr	r2, [r3, #12]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f022 0208 	bic.w	r2, r2, #8
 8007e2a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f042 0208 	orr.w	r2, r2, #8
 8007e3a:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f022 0204 	bic.w	r2, r2, #4
 8007e4a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f042 0204 	orr.w	r2, r2, #4
 8007e5a:	60da      	str	r2, [r3, #12]


		break;
 8007e5c:	e031      	b.n	8007ec2 <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e6c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f022 0208 	bic.w	r2, r2, #8
 8007e7c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f022 0204 	bic.w	r2, r2, #4
 8007e8c:	60da      	str	r2, [r3, #12]
		break;
 8007e8e:	e018      	b.n	8007ec2 <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	68da      	ldr	r2, [r3, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e9e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	68da      	ldr	r2, [r3, #12]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f022 0208 	bic.w	r2, r2, #8
 8007eae:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f022 0204 	bic.w	r2, r2, #4
 8007ebe:	60da      	str	r2, [r3, #12]
		break;
 8007ec0:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8007ec2:	b672      	cpsid	i
}
 8007ec4:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	791b      	ldrb	r3, [r3, #4]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d110      	bne.n	8007ef0 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f022 0220 	bic.w	r2, r2, #32
 8007edc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f042 0220 	orr.w	r2, r2, #32
 8007eec:	60da      	str	r2, [r3, #12]
 8007eee:	e007      	b.n	8007f00 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f022 0220 	bic.w	r2, r2, #32
 8007efe:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	791b      	ldrb	r3, [r3, #4]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d003      	beq.n	8007f10 <USART_Config+0x3c0>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	795b      	ldrb	r3, [r3, #5]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d11a      	bne.n	8007f46 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	4a1a      	ldr	r2, [pc, #104]	; (8007f80 <USART_Config+0x430>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d103      	bne.n	8007f22 <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8007f1a:	2025      	movs	r0, #37	; 0x25
 8007f1c:	f7ff fdfa 	bl	8007b14 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8007f20:	e013      	b.n	8007f4a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	4a17      	ldr	r2, [pc, #92]	; (8007f84 <USART_Config+0x434>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d103      	bne.n	8007f34 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8007f2c:	2026      	movs	r0, #38	; 0x26
 8007f2e:	f7ff fdf1 	bl	8007b14 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8007f32:	e00a      	b.n	8007f4a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	4a13      	ldr	r2, [pc, #76]	; (8007f88 <USART_Config+0x438>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d105      	bne.n	8007f4a <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8007f3e:	2047      	movs	r0, #71	; 0x47
 8007f40:	f7ff fde8 	bl	8007b14 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8007f44:	e001      	b.n	8007f4a <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8007f46:	bf00      	nop
 8007f48:	e000      	b.n	8007f4c <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8007f4a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8007f4c:	b662      	cpsie	i
}
 8007f4e:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	d00f      	beq.n	8007f78 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f66:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f76:	60da      	str	r2, [r3, #12]
	}
}
 8007f78:	bf00      	nop
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	40011000 	.word	0x40011000
 8007f84:	40004400 	.word	0x40004400
 8007f88:	40011400 	.word	0x40011400

08007f8c <getValueBaudRate>:
		__enable_irq();
}

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8007f8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007f90:	b086      	sub	sp, #24
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6039      	str	r1, [r7, #0]
 8007f96:	4601      	mov	r1, r0
 8007f98:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8007f9a:	79f9      	ldrb	r1, [r7, #7]
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	460a      	mov	r2, r1
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	491f      	ldr	r1, [pc, #124]	; (8008020 <getValueBaudRate+0x94>)
 8007fa4:	fb01 f003 	mul.w	r0, r1, r3
 8007fa8:	2102      	movs	r1, #2
 8007faa:	fb02 f101 	mul.w	r1, r2, r1
 8007fae:	4401      	add	r1, r0
 8007fb0:	481b      	ldr	r0, [pc, #108]	; (8008020 <getValueBaudRate+0x94>)
 8007fb2:	fba2 4500 	umull	r4, r5, r2, r0
 8007fb6:	194b      	adds	r3, r1, r5
 8007fb8:	461d      	mov	r5, r3
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	4698      	mov	r8, r3
 8007fc2:	4691      	mov	r9, r2
 8007fc4:	4642      	mov	r2, r8
 8007fc6:	464b      	mov	r3, r9
 8007fc8:	4620      	mov	r0, r4
 8007fca:	4629      	mov	r1, r5
 8007fcc:	f7f8 ff82 	bl	8000ed4 <__aeabi_ldivmod>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	4a12      	ldr	r2, [pc, #72]	; (8008024 <getValueBaudRate+0x98>)
 8007fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe0:	0b5b      	lsrs	r3, r3, #13
 8007fe2:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	f242 7210 	movw	r2, #10000	; 0x2710
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8007ffa:	4a0a      	ldr	r2, [pc, #40]	; (8008024 <getValueBaudRate+0x98>)
 8007ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8008000:	0a5b      	lsrs	r3, r3, #9
 8008002:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	b29b      	uxth	r3, r3
 8008008:	011b      	lsls	r3, r3, #4
 800800a:	b29a      	uxth	r2, r3
 800800c:	7afb      	ldrb	r3, [r7, #11]
 800800e:	b29b      	uxth	r3, r3
 8008010:	4313      	orrs	r3, r2
 8008012:	813b      	strh	r3, [r7, #8]

    return value;
 8008014:	893b      	ldrh	r3, [r7, #8]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008020:	540be400 	.word	0x540be400
 8008024:	d1b71759 	.word	0xd1b71759

08008028 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8008034:	e000      	b.n	8008038 <writeChar+0x10>
	{
		__NOP();
 8008036:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0f7      	beq.n	8008036 <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	78fa      	ldrb	r2, [r7, #3]
 800804c:	605a      	str	r2, [r3, #4]

}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8008064:	2300      	movs	r3, #0
 8008066:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 8008068:	e00a      	b.n	8008080 <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	4413      	add	r3, r2
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff ffd7 	bl	8008028 <writeChar>
		i++;
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	3301      	adds	r3, #1
 800807e:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	4413      	add	r3, r2
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1ee      	bne.n	800806a <writeMsg+0x10>
	}
}
 800808c:	bf00      	nop
 800808e:	bf00      	nop
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 80080a2:	4b16      	ldr	r3, [pc, #88]	; (80080fc <writeMsgForTXE+0x64>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d111      	bne.n	80080ce <writeMsgForTXE+0x36>
 80080aa:	4b15      	ldr	r3, [pc, #84]	; (8008100 <writeMsgForTXE+0x68>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10d      	bne.n	80080ce <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	4813      	ldr	r0, [pc, #76]	; (8008104 <writeMsgForTXE+0x6c>)
 80080b6:	f001 f8b1 	bl	800921c <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 80080ba:	4b13      	ldr	r3, [pc, #76]	; (8008108 <writeMsgForTXE+0x70>)
 80080bc:	2201      	movs	r2, #1
 80080be:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	2101      	movs	r1, #1
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 f830 	bl	800812c <interruptionTX>
 80080cc:	e012      	b.n	80080f4 <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 80080ce:	4b0f      	ldr	r3, [pc, #60]	; (800810c <writeMsgForTXE+0x74>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	2364      	movs	r3, #100	; 0x64
 80080d6:	fb02 f303 	mul.w	r3, r2, r3
 80080da:	4a0d      	ldr	r2, [pc, #52]	; (8008110 <writeMsgForTXE+0x78>)
 80080dc:	4413      	add	r3, r2
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f001 f89b 	bl	800921c <siprintf>
		inLine++;
 80080e6:	4b09      	ldr	r3, [pc, #36]	; (800810c <writeMsgForTXE+0x74>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	3301      	adds	r3, #1
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	4b07      	ldr	r3, [pc, #28]	; (800810c <writeMsgForTXE+0x74>)
 80080f0:	701a      	strb	r2, [r3, #0]
	}
}
 80080f2:	bf00      	nop
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20009cf6 	.word	0x20009cf6
 8008100:	20009cf5 	.word	0x20009cf5
 8008104:	200094c0 	.word	0x200094c0
 8008108:	20009cf7 	.word	0x20009cf7
 800810c:	20009cf4 	.word	0x20009cf4
 8008110:	20009524 	.word	0x20009524

08008114 <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
	return auxRxData;
 8008118:	4b03      	ldr	r3, [pc, #12]	; (8008128 <getRxData+0x14>)
 800811a:	781b      	ldrb	r3, [r3, #0]
}
 800811c:	4618      	mov	r0, r3
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	200094bc 	.word	0x200094bc

0800812c <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8008138:	78fb      	ldrb	r3, [r7, #3]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d10c      	bne.n	8008158 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8008156:	e005      	b.n	8008164 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	60da      	str	r2, [r3, #12]
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <BasicUSART2_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART2_Callback()
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
	__NOP();
 8008174:	bf00      	nop
}
 8008176:	bf00      	nop
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <BasicUSART6_Callback>:


__attribute__((weak)) void BasicUSART6_Callback()
{
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0
	__NOP();
 8008184:	bf00      	nop
}
 8008186:	bf00      	nop
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8008194:	4b37      	ldr	r3, [pc, #220]	; (8008274 <USART1_IRQHandler+0xe4>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0320 	and.w	r3, r3, #32
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d008      	beq.n	80081b4 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 80081a2:	4b34      	ldr	r3, [pc, #208]	; (8008274 <USART1_IRQHandler+0xe4>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	4b33      	ldr	r3, [pc, #204]	; (8008278 <USART1_IRQHandler+0xe8>)
 80081ac:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 80081ae:	f7fb fea9 	bl	8003f04 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 80081b2:	e05d      	b.n	8008270 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 80081b4:	4b2f      	ldr	r3, [pc, #188]	; (8008274 <USART1_IRQHandler+0xe4>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d055      	beq.n	800826e <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80081c2:	4b2e      	ldr	r3, [pc, #184]	; (800827c <USART1_IRQHandler+0xec>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10b      	bne.n	80081e2 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 80081ca:	4b2d      	ldr	r3, [pc, #180]	; (8008280 <USART1_IRQHandler+0xf0>)
 80081cc:	781a      	ldrb	r2, [r3, #0]
 80081ce:	4b29      	ldr	r3, [pc, #164]	; (8008274 <USART1_IRQHandler+0xe4>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80081d4:	4b27      	ldr	r3, [pc, #156]	; (8008274 <USART1_IRQHandler+0xe4>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2100      	movs	r1, #0
 80081da:	4618      	mov	r0, r3
 80081dc:	f7ff ffa6 	bl	800812c <interruptionTX>
}
 80081e0:	e046      	b.n	8008270 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80081e2:	4b26      	ldr	r3, [pc, #152]	; (800827c <USART1_IRQHandler+0xec>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d142      	bne.n	8008270 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80081ea:	4b26      	ldr	r3, [pc, #152]	; (8008284 <USART1_IRQHandler+0xf4>)
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	4b25      	ldr	r3, [pc, #148]	; (8008288 <USART1_IRQHandler+0xf8>)
 80081f2:	5c9b      	ldrb	r3, [r3, r2]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00e      	beq.n	8008216 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 80081f8:	4b22      	ldr	r3, [pc, #136]	; (8008284 <USART1_IRQHandler+0xf4>)
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	461a      	mov	r2, r3
 80081fe:	4b22      	ldr	r3, [pc, #136]	; (8008288 <USART1_IRQHandler+0xf8>)
 8008200:	5c9a      	ldrb	r2, [r3, r2]
 8008202:	4b1c      	ldr	r3, [pc, #112]	; (8008274 <USART1_IRQHandler+0xe4>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	605a      	str	r2, [r3, #4]
				posChar++;
 8008208:	4b1e      	ldr	r3, [pc, #120]	; (8008284 <USART1_IRQHandler+0xf4>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	3301      	adds	r3, #1
 800820e:	b2da      	uxtb	r2, r3
 8008210:	4b1c      	ldr	r3, [pc, #112]	; (8008284 <USART1_IRQHandler+0xf4>)
 8008212:	701a      	strb	r2, [r3, #0]
}
 8008214:	e02c      	b.n	8008270 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8008216:	4b1d      	ldr	r3, [pc, #116]	; (800828c <USART1_IRQHandler+0xfc>)
 8008218:	781a      	ldrb	r2, [r3, #0]
 800821a:	4b1d      	ldr	r3, [pc, #116]	; (8008290 <USART1_IRQHandler+0x100>)
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d215      	bcs.n	800824e <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8008222:	4b1a      	ldr	r3, [pc, #104]	; (800828c <USART1_IRQHandler+0xfc>)
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	2364      	movs	r3, #100	; 0x64
 800822a:	fb02 f303 	mul.w	r3, r2, r3
 800822e:	4a19      	ldr	r2, [pc, #100]	; (8008294 <USART1_IRQHandler+0x104>)
 8008230:	4413      	add	r3, r2
 8008232:	4619      	mov	r1, r3
 8008234:	4814      	ldr	r0, [pc, #80]	; (8008288 <USART1_IRQHandler+0xf8>)
 8008236:	f000 fff1 	bl	800921c <siprintf>
					posChar = 0;
 800823a:	4b12      	ldr	r3, [pc, #72]	; (8008284 <USART1_IRQHandler+0xf4>)
 800823c:	2200      	movs	r2, #0
 800823e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8008240:	4b12      	ldr	r3, [pc, #72]	; (800828c <USART1_IRQHandler+0xfc>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	3301      	adds	r3, #1
 8008246:	b2da      	uxtb	r2, r3
 8008248:	4b10      	ldr	r3, [pc, #64]	; (800828c <USART1_IRQHandler+0xfc>)
 800824a:	701a      	strb	r2, [r3, #0]
}
 800824c:	e010      	b.n	8008270 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 800824e:	4b09      	ldr	r3, [pc, #36]	; (8008274 <USART1_IRQHandler+0xe4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2100      	movs	r1, #0
 8008254:	4618      	mov	r0, r3
 8008256:	f7ff ff69 	bl	800812c <interruptionTX>
					posChar = 0;
 800825a:	4b0a      	ldr	r3, [pc, #40]	; (8008284 <USART1_IRQHandler+0xf4>)
 800825c:	2200      	movs	r2, #0
 800825e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8008260:	4b0a      	ldr	r3, [pc, #40]	; (800828c <USART1_IRQHandler+0xfc>)
 8008262:	2200      	movs	r2, #0
 8008264:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8008266:	4b0a      	ldr	r3, [pc, #40]	; (8008290 <USART1_IRQHandler+0x100>)
 8008268:	2200      	movs	r2, #0
 800826a:	701a      	strb	r2, [r3, #0]
}
 800826c:	e000      	b.n	8008270 <USART1_IRQHandler+0xe0>
		__NOP();
 800826e:	bf00      	nop
}
 8008270:	bf00      	nop
 8008272:	bd80      	pop	{r7, pc}
 8008274:	200094b0 	.word	0x200094b0
 8008278:	200094bc 	.word	0x200094bc
 800827c:	20009cf7 	.word	0x20009cf7
 8008280:	200094bd 	.word	0x200094bd
 8008284:	20009cf6 	.word	0x20009cf6
 8008288:	200094c0 	.word	0x200094c0
 800828c:	20009cf5 	.word	0x20009cf5
 8008290:	20009cf4 	.word	0x20009cf4
 8008294:	20009524 	.word	0x20009524

08008298 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 800829c:	4b37      	ldr	r3, [pc, #220]	; (800837c <USART2_IRQHandler+0xe4>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0320 	and.w	r3, r3, #32
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d008      	beq.n	80082bc <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 80082aa:	4b34      	ldr	r3, [pc, #208]	; (800837c <USART2_IRQHandler+0xe4>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	4b33      	ldr	r3, [pc, #204]	; (8008380 <USART2_IRQHandler+0xe8>)
 80082b4:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 80082b6:	f7ff ff5b 	bl	8008170 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 80082ba:	e05d      	b.n	8008378 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 80082bc:	4b2f      	ldr	r3, [pc, #188]	; (800837c <USART2_IRQHandler+0xe4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d055      	beq.n	8008376 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80082ca:	4b2e      	ldr	r3, [pc, #184]	; (8008384 <USART2_IRQHandler+0xec>)
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10b      	bne.n	80082ea <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 80082d2:	4b2d      	ldr	r3, [pc, #180]	; (8008388 <USART2_IRQHandler+0xf0>)
 80082d4:	781a      	ldrb	r2, [r3, #0]
 80082d6:	4b29      	ldr	r3, [pc, #164]	; (800837c <USART2_IRQHandler+0xe4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 80082dc:	4b27      	ldr	r3, [pc, #156]	; (800837c <USART2_IRQHandler+0xe4>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2100      	movs	r1, #0
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff ff22 	bl	800812c <interruptionTX>
}
 80082e8:	e046      	b.n	8008378 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80082ea:	4b26      	ldr	r3, [pc, #152]	; (8008384 <USART2_IRQHandler+0xec>)
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d142      	bne.n	8008378 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80082f2:	4b26      	ldr	r3, [pc, #152]	; (800838c <USART2_IRQHandler+0xf4>)
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	461a      	mov	r2, r3
 80082f8:	4b25      	ldr	r3, [pc, #148]	; (8008390 <USART2_IRQHandler+0xf8>)
 80082fa:	5c9b      	ldrb	r3, [r3, r2]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00e      	beq.n	800831e <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8008300:	4b22      	ldr	r3, [pc, #136]	; (800838c <USART2_IRQHandler+0xf4>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	461a      	mov	r2, r3
 8008306:	4b22      	ldr	r3, [pc, #136]	; (8008390 <USART2_IRQHandler+0xf8>)
 8008308:	5c9a      	ldrb	r2, [r3, r2]
 800830a:	4b1c      	ldr	r3, [pc, #112]	; (800837c <USART2_IRQHandler+0xe4>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	605a      	str	r2, [r3, #4]
				posChar++;
 8008310:	4b1e      	ldr	r3, [pc, #120]	; (800838c <USART2_IRQHandler+0xf4>)
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	3301      	adds	r3, #1
 8008316:	b2da      	uxtb	r2, r3
 8008318:	4b1c      	ldr	r3, [pc, #112]	; (800838c <USART2_IRQHandler+0xf4>)
 800831a:	701a      	strb	r2, [r3, #0]
}
 800831c:	e02c      	b.n	8008378 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800831e:	4b1d      	ldr	r3, [pc, #116]	; (8008394 <USART2_IRQHandler+0xfc>)
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	4b1d      	ldr	r3, [pc, #116]	; (8008398 <USART2_IRQHandler+0x100>)
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	429a      	cmp	r2, r3
 8008328:	d215      	bcs.n	8008356 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800832a:	4b1a      	ldr	r3, [pc, #104]	; (8008394 <USART2_IRQHandler+0xfc>)
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	2364      	movs	r3, #100	; 0x64
 8008332:	fb02 f303 	mul.w	r3, r2, r3
 8008336:	4a19      	ldr	r2, [pc, #100]	; (800839c <USART2_IRQHandler+0x104>)
 8008338:	4413      	add	r3, r2
 800833a:	4619      	mov	r1, r3
 800833c:	4814      	ldr	r0, [pc, #80]	; (8008390 <USART2_IRQHandler+0xf8>)
 800833e:	f000 ff6d 	bl	800921c <siprintf>
					posChar = 0;
 8008342:	4b12      	ldr	r3, [pc, #72]	; (800838c <USART2_IRQHandler+0xf4>)
 8008344:	2200      	movs	r2, #0
 8008346:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8008348:	4b12      	ldr	r3, [pc, #72]	; (8008394 <USART2_IRQHandler+0xfc>)
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	3301      	adds	r3, #1
 800834e:	b2da      	uxtb	r2, r3
 8008350:	4b10      	ldr	r3, [pc, #64]	; (8008394 <USART2_IRQHandler+0xfc>)
 8008352:	701a      	strb	r2, [r3, #0]
}
 8008354:	e010      	b.n	8008378 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8008356:	4b09      	ldr	r3, [pc, #36]	; (800837c <USART2_IRQHandler+0xe4>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2100      	movs	r1, #0
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff fee5 	bl	800812c <interruptionTX>
					posChar = 0;
 8008362:	4b0a      	ldr	r3, [pc, #40]	; (800838c <USART2_IRQHandler+0xf4>)
 8008364:	2200      	movs	r2, #0
 8008366:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8008368:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <USART2_IRQHandler+0xfc>)
 800836a:	2200      	movs	r2, #0
 800836c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800836e:	4b0a      	ldr	r3, [pc, #40]	; (8008398 <USART2_IRQHandler+0x100>)
 8008370:	2200      	movs	r2, #0
 8008372:	701a      	strb	r2, [r3, #0]
}
 8008374:	e000      	b.n	8008378 <USART2_IRQHandler+0xe0>
		__NOP();
 8008376:	bf00      	nop
}
 8008378:	bf00      	nop
 800837a:	bd80      	pop	{r7, pc}
 800837c:	200094b4 	.word	0x200094b4
 8008380:	200094bc 	.word	0x200094bc
 8008384:	20009cf7 	.word	0x20009cf7
 8008388:	200094bd 	.word	0x200094bd
 800838c:	20009cf6 	.word	0x20009cf6
 8008390:	200094c0 	.word	0x200094c0
 8008394:	20009cf5 	.word	0x20009cf5
 8008398:	20009cf4 	.word	0x20009cf4
 800839c:	20009524 	.word	0x20009524

080083a0 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 80083a4:	4b37      	ldr	r3, [pc, #220]	; (8008484 <USART6_IRQHandler+0xe4>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0320 	and.w	r3, r3, #32
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d008      	beq.n	80083c4 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 80083b2:	4b34      	ldr	r3, [pc, #208]	; (8008484 <USART6_IRQHandler+0xe4>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	4b33      	ldr	r3, [pc, #204]	; (8008488 <USART6_IRQHandler+0xe8>)
 80083bc:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 80083be:	f7ff fedf 	bl	8008180 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 80083c2:	e05d      	b.n	8008480 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 80083c4:	4b2f      	ldr	r3, [pc, #188]	; (8008484 <USART6_IRQHandler+0xe4>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d055      	beq.n	800847e <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80083d2:	4b2e      	ldr	r3, [pc, #184]	; (800848c <USART6_IRQHandler+0xec>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 80083da:	4b2d      	ldr	r3, [pc, #180]	; (8008490 <USART6_IRQHandler+0xf0>)
 80083dc:	781a      	ldrb	r2, [r3, #0]
 80083de:	4b29      	ldr	r3, [pc, #164]	; (8008484 <USART6_IRQHandler+0xe4>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 80083e4:	4b27      	ldr	r3, [pc, #156]	; (8008484 <USART6_IRQHandler+0xe4>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2100      	movs	r1, #0
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff fe9e 	bl	800812c <interruptionTX>
}
 80083f0:	e046      	b.n	8008480 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80083f2:	4b26      	ldr	r3, [pc, #152]	; (800848c <USART6_IRQHandler+0xec>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d142      	bne.n	8008480 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80083fa:	4b26      	ldr	r3, [pc, #152]	; (8008494 <USART6_IRQHandler+0xf4>)
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	4b25      	ldr	r3, [pc, #148]	; (8008498 <USART6_IRQHandler+0xf8>)
 8008402:	5c9b      	ldrb	r3, [r3, r2]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00e      	beq.n	8008426 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8008408:	4b22      	ldr	r3, [pc, #136]	; (8008494 <USART6_IRQHandler+0xf4>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	4b22      	ldr	r3, [pc, #136]	; (8008498 <USART6_IRQHandler+0xf8>)
 8008410:	5c9a      	ldrb	r2, [r3, r2]
 8008412:	4b1c      	ldr	r3, [pc, #112]	; (8008484 <USART6_IRQHandler+0xe4>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	605a      	str	r2, [r3, #4]
				posChar++;
 8008418:	4b1e      	ldr	r3, [pc, #120]	; (8008494 <USART6_IRQHandler+0xf4>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	3301      	adds	r3, #1
 800841e:	b2da      	uxtb	r2, r3
 8008420:	4b1c      	ldr	r3, [pc, #112]	; (8008494 <USART6_IRQHandler+0xf4>)
 8008422:	701a      	strb	r2, [r3, #0]
}
 8008424:	e02c      	b.n	8008480 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8008426:	4b1d      	ldr	r3, [pc, #116]	; (800849c <USART6_IRQHandler+0xfc>)
 8008428:	781a      	ldrb	r2, [r3, #0]
 800842a:	4b1d      	ldr	r3, [pc, #116]	; (80084a0 <USART6_IRQHandler+0x100>)
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	429a      	cmp	r2, r3
 8008430:	d215      	bcs.n	800845e <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8008432:	4b1a      	ldr	r3, [pc, #104]	; (800849c <USART6_IRQHandler+0xfc>)
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	461a      	mov	r2, r3
 8008438:	2364      	movs	r3, #100	; 0x64
 800843a:	fb02 f303 	mul.w	r3, r2, r3
 800843e:	4a19      	ldr	r2, [pc, #100]	; (80084a4 <USART6_IRQHandler+0x104>)
 8008440:	4413      	add	r3, r2
 8008442:	4619      	mov	r1, r3
 8008444:	4814      	ldr	r0, [pc, #80]	; (8008498 <USART6_IRQHandler+0xf8>)
 8008446:	f000 fee9 	bl	800921c <siprintf>
					posChar = 0;
 800844a:	4b12      	ldr	r3, [pc, #72]	; (8008494 <USART6_IRQHandler+0xf4>)
 800844c:	2200      	movs	r2, #0
 800844e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8008450:	4b12      	ldr	r3, [pc, #72]	; (800849c <USART6_IRQHandler+0xfc>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	3301      	adds	r3, #1
 8008456:	b2da      	uxtb	r2, r3
 8008458:	4b10      	ldr	r3, [pc, #64]	; (800849c <USART6_IRQHandler+0xfc>)
 800845a:	701a      	strb	r2, [r3, #0]
}
 800845c:	e010      	b.n	8008480 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800845e:	4b09      	ldr	r3, [pc, #36]	; (8008484 <USART6_IRQHandler+0xe4>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2100      	movs	r1, #0
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff fe61 	bl	800812c <interruptionTX>
					posChar = 0;
 800846a:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <USART6_IRQHandler+0xf4>)
 800846c:	2200      	movs	r2, #0
 800846e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8008470:	4b0a      	ldr	r3, [pc, #40]	; (800849c <USART6_IRQHandler+0xfc>)
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8008476:	4b0a      	ldr	r3, [pc, #40]	; (80084a0 <USART6_IRQHandler+0x100>)
 8008478:	2200      	movs	r2, #0
 800847a:	701a      	strb	r2, [r3, #0]
}
 800847c:	e000      	b.n	8008480 <USART6_IRQHandler+0xe0>
		__NOP();
 800847e:	bf00      	nop
}
 8008480:	bf00      	nop
 8008482:	bd80      	pop	{r7, pc}
 8008484:	200094b8 	.word	0x200094b8
 8008488:	200094bc 	.word	0x200094bc
 800848c:	20009cf7 	.word	0x20009cf7
 8008490:	200094bd 	.word	0x200094bd
 8008494:	20009cf6 	.word	0x20009cf6
 8008498:	200094c0 	.word	0x200094c0
 800849c:	20009cf5 	.word	0x20009cf5
 80084a0:	20009cf4 	.word	0x20009cf4
 80084a4:	20009524 	.word	0x20009524

080084a8 <atof>:
 80084a8:	2100      	movs	r1, #0
 80084aa:	f001 bd71 	b.w	8009f90 <strtod>

080084ae <atoi>:
 80084ae:	220a      	movs	r2, #10
 80084b0:	2100      	movs	r1, #0
 80084b2:	f001 bdfd 	b.w	800a0b0 <strtol>
	...

080084b8 <__errno>:
 80084b8:	4b01      	ldr	r3, [pc, #4]	; (80084c0 <__errno+0x8>)
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	2000001c 	.word	0x2000001c

080084c4 <__libc_init_array>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	4d0d      	ldr	r5, [pc, #52]	; (80084fc <__libc_init_array+0x38>)
 80084c8:	4c0d      	ldr	r4, [pc, #52]	; (8008500 <__libc_init_array+0x3c>)
 80084ca:	1b64      	subs	r4, r4, r5
 80084cc:	10a4      	asrs	r4, r4, #2
 80084ce:	2600      	movs	r6, #0
 80084d0:	42a6      	cmp	r6, r4
 80084d2:	d109      	bne.n	80084e8 <__libc_init_array+0x24>
 80084d4:	4d0b      	ldr	r5, [pc, #44]	; (8008504 <__libc_init_array+0x40>)
 80084d6:	4c0c      	ldr	r4, [pc, #48]	; (8008508 <__libc_init_array+0x44>)
 80084d8:	f007 fda4 	bl	8010024 <_init>
 80084dc:	1b64      	subs	r4, r4, r5
 80084de:	10a4      	asrs	r4, r4, #2
 80084e0:	2600      	movs	r6, #0
 80084e2:	42a6      	cmp	r6, r4
 80084e4:	d105      	bne.n	80084f2 <__libc_init_array+0x2e>
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ec:	4798      	blx	r3
 80084ee:	3601      	adds	r6, #1
 80084f0:	e7ee      	b.n	80084d0 <__libc_init_array+0xc>
 80084f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f6:	4798      	blx	r3
 80084f8:	3601      	adds	r6, #1
 80084fa:	e7f2      	b.n	80084e2 <__libc_init_array+0x1e>
 80084fc:	08010ac8 	.word	0x08010ac8
 8008500:	08010ac8 	.word	0x08010ac8
 8008504:	08010ac8 	.word	0x08010ac8
 8008508:	08010acc 	.word	0x08010acc

0800850c <memset>:
 800850c:	4402      	add	r2, r0
 800850e:	4603      	mov	r3, r0
 8008510:	4293      	cmp	r3, r2
 8008512:	d100      	bne.n	8008516 <memset+0xa>
 8008514:	4770      	bx	lr
 8008516:	f803 1b01 	strb.w	r1, [r3], #1
 800851a:	e7f9      	b.n	8008510 <memset+0x4>

0800851c <__cvt>:
 800851c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008520:	ec55 4b10 	vmov	r4, r5, d0
 8008524:	2d00      	cmp	r5, #0
 8008526:	460e      	mov	r6, r1
 8008528:	4619      	mov	r1, r3
 800852a:	462b      	mov	r3, r5
 800852c:	bfbb      	ittet	lt
 800852e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008532:	461d      	movlt	r5, r3
 8008534:	2300      	movge	r3, #0
 8008536:	232d      	movlt	r3, #45	; 0x2d
 8008538:	700b      	strb	r3, [r1, #0]
 800853a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800853c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008540:	4691      	mov	r9, r2
 8008542:	f023 0820 	bic.w	r8, r3, #32
 8008546:	bfbc      	itt	lt
 8008548:	4622      	movlt	r2, r4
 800854a:	4614      	movlt	r4, r2
 800854c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008550:	d005      	beq.n	800855e <__cvt+0x42>
 8008552:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008556:	d100      	bne.n	800855a <__cvt+0x3e>
 8008558:	3601      	adds	r6, #1
 800855a:	2102      	movs	r1, #2
 800855c:	e000      	b.n	8008560 <__cvt+0x44>
 800855e:	2103      	movs	r1, #3
 8008560:	ab03      	add	r3, sp, #12
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	ab02      	add	r3, sp, #8
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	ec45 4b10 	vmov	d0, r4, r5
 800856c:	4653      	mov	r3, sl
 800856e:	4632      	mov	r2, r6
 8008570:	f001 fe56 	bl	800a220 <_dtoa_r>
 8008574:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008578:	4607      	mov	r7, r0
 800857a:	d102      	bne.n	8008582 <__cvt+0x66>
 800857c:	f019 0f01 	tst.w	r9, #1
 8008580:	d022      	beq.n	80085c8 <__cvt+0xac>
 8008582:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008586:	eb07 0906 	add.w	r9, r7, r6
 800858a:	d110      	bne.n	80085ae <__cvt+0x92>
 800858c:	783b      	ldrb	r3, [r7, #0]
 800858e:	2b30      	cmp	r3, #48	; 0x30
 8008590:	d10a      	bne.n	80085a8 <__cvt+0x8c>
 8008592:	2200      	movs	r2, #0
 8008594:	2300      	movs	r3, #0
 8008596:	4620      	mov	r0, r4
 8008598:	4629      	mov	r1, r5
 800859a:	f7f8 faad 	bl	8000af8 <__aeabi_dcmpeq>
 800859e:	b918      	cbnz	r0, 80085a8 <__cvt+0x8c>
 80085a0:	f1c6 0601 	rsb	r6, r6, #1
 80085a4:	f8ca 6000 	str.w	r6, [sl]
 80085a8:	f8da 3000 	ldr.w	r3, [sl]
 80085ac:	4499      	add	r9, r3
 80085ae:	2200      	movs	r2, #0
 80085b0:	2300      	movs	r3, #0
 80085b2:	4620      	mov	r0, r4
 80085b4:	4629      	mov	r1, r5
 80085b6:	f7f8 fa9f 	bl	8000af8 <__aeabi_dcmpeq>
 80085ba:	b108      	cbz	r0, 80085c0 <__cvt+0xa4>
 80085bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80085c0:	2230      	movs	r2, #48	; 0x30
 80085c2:	9b03      	ldr	r3, [sp, #12]
 80085c4:	454b      	cmp	r3, r9
 80085c6:	d307      	bcc.n	80085d8 <__cvt+0xbc>
 80085c8:	9b03      	ldr	r3, [sp, #12]
 80085ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085cc:	1bdb      	subs	r3, r3, r7
 80085ce:	4638      	mov	r0, r7
 80085d0:	6013      	str	r3, [r2, #0]
 80085d2:	b004      	add	sp, #16
 80085d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d8:	1c59      	adds	r1, r3, #1
 80085da:	9103      	str	r1, [sp, #12]
 80085dc:	701a      	strb	r2, [r3, #0]
 80085de:	e7f0      	b.n	80085c2 <__cvt+0xa6>

080085e0 <__exponent>:
 80085e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085e2:	4603      	mov	r3, r0
 80085e4:	2900      	cmp	r1, #0
 80085e6:	bfb8      	it	lt
 80085e8:	4249      	neglt	r1, r1
 80085ea:	f803 2b02 	strb.w	r2, [r3], #2
 80085ee:	bfb4      	ite	lt
 80085f0:	222d      	movlt	r2, #45	; 0x2d
 80085f2:	222b      	movge	r2, #43	; 0x2b
 80085f4:	2909      	cmp	r1, #9
 80085f6:	7042      	strb	r2, [r0, #1]
 80085f8:	dd2a      	ble.n	8008650 <__exponent+0x70>
 80085fa:	f10d 0407 	add.w	r4, sp, #7
 80085fe:	46a4      	mov	ip, r4
 8008600:	270a      	movs	r7, #10
 8008602:	46a6      	mov	lr, r4
 8008604:	460a      	mov	r2, r1
 8008606:	fb91 f6f7 	sdiv	r6, r1, r7
 800860a:	fb07 1516 	mls	r5, r7, r6, r1
 800860e:	3530      	adds	r5, #48	; 0x30
 8008610:	2a63      	cmp	r2, #99	; 0x63
 8008612:	f104 34ff 	add.w	r4, r4, #4294967295
 8008616:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800861a:	4631      	mov	r1, r6
 800861c:	dcf1      	bgt.n	8008602 <__exponent+0x22>
 800861e:	3130      	adds	r1, #48	; 0x30
 8008620:	f1ae 0502 	sub.w	r5, lr, #2
 8008624:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008628:	1c44      	adds	r4, r0, #1
 800862a:	4629      	mov	r1, r5
 800862c:	4561      	cmp	r1, ip
 800862e:	d30a      	bcc.n	8008646 <__exponent+0x66>
 8008630:	f10d 0209 	add.w	r2, sp, #9
 8008634:	eba2 020e 	sub.w	r2, r2, lr
 8008638:	4565      	cmp	r5, ip
 800863a:	bf88      	it	hi
 800863c:	2200      	movhi	r2, #0
 800863e:	4413      	add	r3, r2
 8008640:	1a18      	subs	r0, r3, r0
 8008642:	b003      	add	sp, #12
 8008644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800864a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800864e:	e7ed      	b.n	800862c <__exponent+0x4c>
 8008650:	2330      	movs	r3, #48	; 0x30
 8008652:	3130      	adds	r1, #48	; 0x30
 8008654:	7083      	strb	r3, [r0, #2]
 8008656:	70c1      	strb	r1, [r0, #3]
 8008658:	1d03      	adds	r3, r0, #4
 800865a:	e7f1      	b.n	8008640 <__exponent+0x60>

0800865c <_printf_float>:
 800865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	ed2d 8b02 	vpush	{d8}
 8008664:	b08d      	sub	sp, #52	; 0x34
 8008666:	460c      	mov	r4, r1
 8008668:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800866c:	4616      	mov	r6, r2
 800866e:	461f      	mov	r7, r3
 8008670:	4605      	mov	r5, r0
 8008672:	f002 ff33 	bl	800b4dc <_localeconv_r>
 8008676:	f8d0 a000 	ldr.w	sl, [r0]
 800867a:	4650      	mov	r0, sl
 800867c:	f7f7 fdba 	bl	80001f4 <strlen>
 8008680:	2300      	movs	r3, #0
 8008682:	930a      	str	r3, [sp, #40]	; 0x28
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	9305      	str	r3, [sp, #20]
 8008688:	f8d8 3000 	ldr.w	r3, [r8]
 800868c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008690:	3307      	adds	r3, #7
 8008692:	f023 0307 	bic.w	r3, r3, #7
 8008696:	f103 0208 	add.w	r2, r3, #8
 800869a:	f8c8 2000 	str.w	r2, [r8]
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80086aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086ae:	9307      	str	r3, [sp, #28]
 80086b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80086b4:	ee08 0a10 	vmov	s16, r0
 80086b8:	4b9f      	ldr	r3, [pc, #636]	; (8008938 <_printf_float+0x2dc>)
 80086ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086be:	f04f 32ff 	mov.w	r2, #4294967295
 80086c2:	f7f8 fa4b 	bl	8000b5c <__aeabi_dcmpun>
 80086c6:	bb88      	cbnz	r0, 800872c <_printf_float+0xd0>
 80086c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086cc:	4b9a      	ldr	r3, [pc, #616]	; (8008938 <_printf_float+0x2dc>)
 80086ce:	f04f 32ff 	mov.w	r2, #4294967295
 80086d2:	f7f8 fa25 	bl	8000b20 <__aeabi_dcmple>
 80086d6:	bb48      	cbnz	r0, 800872c <_printf_float+0xd0>
 80086d8:	2200      	movs	r2, #0
 80086da:	2300      	movs	r3, #0
 80086dc:	4640      	mov	r0, r8
 80086de:	4649      	mov	r1, r9
 80086e0:	f7f8 fa14 	bl	8000b0c <__aeabi_dcmplt>
 80086e4:	b110      	cbz	r0, 80086ec <_printf_float+0x90>
 80086e6:	232d      	movs	r3, #45	; 0x2d
 80086e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ec:	4b93      	ldr	r3, [pc, #588]	; (800893c <_printf_float+0x2e0>)
 80086ee:	4894      	ldr	r0, [pc, #592]	; (8008940 <_printf_float+0x2e4>)
 80086f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086f4:	bf94      	ite	ls
 80086f6:	4698      	movls	r8, r3
 80086f8:	4680      	movhi	r8, r0
 80086fa:	2303      	movs	r3, #3
 80086fc:	6123      	str	r3, [r4, #16]
 80086fe:	9b05      	ldr	r3, [sp, #20]
 8008700:	f023 0204 	bic.w	r2, r3, #4
 8008704:	6022      	str	r2, [r4, #0]
 8008706:	f04f 0900 	mov.w	r9, #0
 800870a:	9700      	str	r7, [sp, #0]
 800870c:	4633      	mov	r3, r6
 800870e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008710:	4621      	mov	r1, r4
 8008712:	4628      	mov	r0, r5
 8008714:	f000 f9d8 	bl	8008ac8 <_printf_common>
 8008718:	3001      	adds	r0, #1
 800871a:	f040 8090 	bne.w	800883e <_printf_float+0x1e2>
 800871e:	f04f 30ff 	mov.w	r0, #4294967295
 8008722:	b00d      	add	sp, #52	; 0x34
 8008724:	ecbd 8b02 	vpop	{d8}
 8008728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872c:	4642      	mov	r2, r8
 800872e:	464b      	mov	r3, r9
 8008730:	4640      	mov	r0, r8
 8008732:	4649      	mov	r1, r9
 8008734:	f7f8 fa12 	bl	8000b5c <__aeabi_dcmpun>
 8008738:	b140      	cbz	r0, 800874c <_printf_float+0xf0>
 800873a:	464b      	mov	r3, r9
 800873c:	2b00      	cmp	r3, #0
 800873e:	bfbc      	itt	lt
 8008740:	232d      	movlt	r3, #45	; 0x2d
 8008742:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008746:	487f      	ldr	r0, [pc, #508]	; (8008944 <_printf_float+0x2e8>)
 8008748:	4b7f      	ldr	r3, [pc, #508]	; (8008948 <_printf_float+0x2ec>)
 800874a:	e7d1      	b.n	80086f0 <_printf_float+0x94>
 800874c:	6863      	ldr	r3, [r4, #4]
 800874e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008752:	9206      	str	r2, [sp, #24]
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	d13f      	bne.n	80087d8 <_printf_float+0x17c>
 8008758:	2306      	movs	r3, #6
 800875a:	6063      	str	r3, [r4, #4]
 800875c:	9b05      	ldr	r3, [sp, #20]
 800875e:	6861      	ldr	r1, [r4, #4]
 8008760:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008764:	2300      	movs	r3, #0
 8008766:	9303      	str	r3, [sp, #12]
 8008768:	ab0a      	add	r3, sp, #40	; 0x28
 800876a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800876e:	ab09      	add	r3, sp, #36	; 0x24
 8008770:	ec49 8b10 	vmov	d0, r8, r9
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	6022      	str	r2, [r4, #0]
 8008778:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800877c:	4628      	mov	r0, r5
 800877e:	f7ff fecd 	bl	800851c <__cvt>
 8008782:	9b06      	ldr	r3, [sp, #24]
 8008784:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008786:	2b47      	cmp	r3, #71	; 0x47
 8008788:	4680      	mov	r8, r0
 800878a:	d108      	bne.n	800879e <_printf_float+0x142>
 800878c:	1cc8      	adds	r0, r1, #3
 800878e:	db02      	blt.n	8008796 <_printf_float+0x13a>
 8008790:	6863      	ldr	r3, [r4, #4]
 8008792:	4299      	cmp	r1, r3
 8008794:	dd41      	ble.n	800881a <_printf_float+0x1be>
 8008796:	f1ab 0b02 	sub.w	fp, fp, #2
 800879a:	fa5f fb8b 	uxtb.w	fp, fp
 800879e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087a2:	d820      	bhi.n	80087e6 <_printf_float+0x18a>
 80087a4:	3901      	subs	r1, #1
 80087a6:	465a      	mov	r2, fp
 80087a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087ac:	9109      	str	r1, [sp, #36]	; 0x24
 80087ae:	f7ff ff17 	bl	80085e0 <__exponent>
 80087b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087b4:	1813      	adds	r3, r2, r0
 80087b6:	2a01      	cmp	r2, #1
 80087b8:	4681      	mov	r9, r0
 80087ba:	6123      	str	r3, [r4, #16]
 80087bc:	dc02      	bgt.n	80087c4 <_printf_float+0x168>
 80087be:	6822      	ldr	r2, [r4, #0]
 80087c0:	07d2      	lsls	r2, r2, #31
 80087c2:	d501      	bpl.n	80087c8 <_printf_float+0x16c>
 80087c4:	3301      	adds	r3, #1
 80087c6:	6123      	str	r3, [r4, #16]
 80087c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d09c      	beq.n	800870a <_printf_float+0xae>
 80087d0:	232d      	movs	r3, #45	; 0x2d
 80087d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087d6:	e798      	b.n	800870a <_printf_float+0xae>
 80087d8:	9a06      	ldr	r2, [sp, #24]
 80087da:	2a47      	cmp	r2, #71	; 0x47
 80087dc:	d1be      	bne.n	800875c <_printf_float+0x100>
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1bc      	bne.n	800875c <_printf_float+0x100>
 80087e2:	2301      	movs	r3, #1
 80087e4:	e7b9      	b.n	800875a <_printf_float+0xfe>
 80087e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087ea:	d118      	bne.n	800881e <_printf_float+0x1c2>
 80087ec:	2900      	cmp	r1, #0
 80087ee:	6863      	ldr	r3, [r4, #4]
 80087f0:	dd0b      	ble.n	800880a <_printf_float+0x1ae>
 80087f2:	6121      	str	r1, [r4, #16]
 80087f4:	b913      	cbnz	r3, 80087fc <_printf_float+0x1a0>
 80087f6:	6822      	ldr	r2, [r4, #0]
 80087f8:	07d0      	lsls	r0, r2, #31
 80087fa:	d502      	bpl.n	8008802 <_printf_float+0x1a6>
 80087fc:	3301      	adds	r3, #1
 80087fe:	440b      	add	r3, r1
 8008800:	6123      	str	r3, [r4, #16]
 8008802:	65a1      	str	r1, [r4, #88]	; 0x58
 8008804:	f04f 0900 	mov.w	r9, #0
 8008808:	e7de      	b.n	80087c8 <_printf_float+0x16c>
 800880a:	b913      	cbnz	r3, 8008812 <_printf_float+0x1b6>
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	07d2      	lsls	r2, r2, #31
 8008810:	d501      	bpl.n	8008816 <_printf_float+0x1ba>
 8008812:	3302      	adds	r3, #2
 8008814:	e7f4      	b.n	8008800 <_printf_float+0x1a4>
 8008816:	2301      	movs	r3, #1
 8008818:	e7f2      	b.n	8008800 <_printf_float+0x1a4>
 800881a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800881e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008820:	4299      	cmp	r1, r3
 8008822:	db05      	blt.n	8008830 <_printf_float+0x1d4>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	6121      	str	r1, [r4, #16]
 8008828:	07d8      	lsls	r0, r3, #31
 800882a:	d5ea      	bpl.n	8008802 <_printf_float+0x1a6>
 800882c:	1c4b      	adds	r3, r1, #1
 800882e:	e7e7      	b.n	8008800 <_printf_float+0x1a4>
 8008830:	2900      	cmp	r1, #0
 8008832:	bfd4      	ite	le
 8008834:	f1c1 0202 	rsble	r2, r1, #2
 8008838:	2201      	movgt	r2, #1
 800883a:	4413      	add	r3, r2
 800883c:	e7e0      	b.n	8008800 <_printf_float+0x1a4>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	055a      	lsls	r2, r3, #21
 8008842:	d407      	bmi.n	8008854 <_printf_float+0x1f8>
 8008844:	6923      	ldr	r3, [r4, #16]
 8008846:	4642      	mov	r2, r8
 8008848:	4631      	mov	r1, r6
 800884a:	4628      	mov	r0, r5
 800884c:	47b8      	blx	r7
 800884e:	3001      	adds	r0, #1
 8008850:	d12c      	bne.n	80088ac <_printf_float+0x250>
 8008852:	e764      	b.n	800871e <_printf_float+0xc2>
 8008854:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008858:	f240 80e0 	bls.w	8008a1c <_printf_float+0x3c0>
 800885c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008860:	2200      	movs	r2, #0
 8008862:	2300      	movs	r3, #0
 8008864:	f7f8 f948 	bl	8000af8 <__aeabi_dcmpeq>
 8008868:	2800      	cmp	r0, #0
 800886a:	d034      	beq.n	80088d6 <_printf_float+0x27a>
 800886c:	4a37      	ldr	r2, [pc, #220]	; (800894c <_printf_float+0x2f0>)
 800886e:	2301      	movs	r3, #1
 8008870:	4631      	mov	r1, r6
 8008872:	4628      	mov	r0, r5
 8008874:	47b8      	blx	r7
 8008876:	3001      	adds	r0, #1
 8008878:	f43f af51 	beq.w	800871e <_printf_float+0xc2>
 800887c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008880:	429a      	cmp	r2, r3
 8008882:	db02      	blt.n	800888a <_printf_float+0x22e>
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	07d8      	lsls	r0, r3, #31
 8008888:	d510      	bpl.n	80088ac <_printf_float+0x250>
 800888a:	ee18 3a10 	vmov	r3, s16
 800888e:	4652      	mov	r2, sl
 8008890:	4631      	mov	r1, r6
 8008892:	4628      	mov	r0, r5
 8008894:	47b8      	blx	r7
 8008896:	3001      	adds	r0, #1
 8008898:	f43f af41 	beq.w	800871e <_printf_float+0xc2>
 800889c:	f04f 0800 	mov.w	r8, #0
 80088a0:	f104 091a 	add.w	r9, r4, #26
 80088a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a6:	3b01      	subs	r3, #1
 80088a8:	4543      	cmp	r3, r8
 80088aa:	dc09      	bgt.n	80088c0 <_printf_float+0x264>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	079b      	lsls	r3, r3, #30
 80088b0:	f100 8105 	bmi.w	8008abe <_printf_float+0x462>
 80088b4:	68e0      	ldr	r0, [r4, #12]
 80088b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b8:	4298      	cmp	r0, r3
 80088ba:	bfb8      	it	lt
 80088bc:	4618      	movlt	r0, r3
 80088be:	e730      	b.n	8008722 <_printf_float+0xc6>
 80088c0:	2301      	movs	r3, #1
 80088c2:	464a      	mov	r2, r9
 80088c4:	4631      	mov	r1, r6
 80088c6:	4628      	mov	r0, r5
 80088c8:	47b8      	blx	r7
 80088ca:	3001      	adds	r0, #1
 80088cc:	f43f af27 	beq.w	800871e <_printf_float+0xc2>
 80088d0:	f108 0801 	add.w	r8, r8, #1
 80088d4:	e7e6      	b.n	80088a4 <_printf_float+0x248>
 80088d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d8:	2b00      	cmp	r3, #0
 80088da:	dc39      	bgt.n	8008950 <_printf_float+0x2f4>
 80088dc:	4a1b      	ldr	r2, [pc, #108]	; (800894c <_printf_float+0x2f0>)
 80088de:	2301      	movs	r3, #1
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	f43f af19 	beq.w	800871e <_printf_float+0xc2>
 80088ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088f0:	4313      	orrs	r3, r2
 80088f2:	d102      	bne.n	80088fa <_printf_float+0x29e>
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	07d9      	lsls	r1, r3, #31
 80088f8:	d5d8      	bpl.n	80088ac <_printf_float+0x250>
 80088fa:	ee18 3a10 	vmov	r3, s16
 80088fe:	4652      	mov	r2, sl
 8008900:	4631      	mov	r1, r6
 8008902:	4628      	mov	r0, r5
 8008904:	47b8      	blx	r7
 8008906:	3001      	adds	r0, #1
 8008908:	f43f af09 	beq.w	800871e <_printf_float+0xc2>
 800890c:	f04f 0900 	mov.w	r9, #0
 8008910:	f104 0a1a 	add.w	sl, r4, #26
 8008914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008916:	425b      	negs	r3, r3
 8008918:	454b      	cmp	r3, r9
 800891a:	dc01      	bgt.n	8008920 <_printf_float+0x2c4>
 800891c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800891e:	e792      	b.n	8008846 <_printf_float+0x1ea>
 8008920:	2301      	movs	r3, #1
 8008922:	4652      	mov	r2, sl
 8008924:	4631      	mov	r1, r6
 8008926:	4628      	mov	r0, r5
 8008928:	47b8      	blx	r7
 800892a:	3001      	adds	r0, #1
 800892c:	f43f aef7 	beq.w	800871e <_printf_float+0xc2>
 8008930:	f109 0901 	add.w	r9, r9, #1
 8008934:	e7ee      	b.n	8008914 <_printf_float+0x2b8>
 8008936:	bf00      	nop
 8008938:	7fefffff 	.word	0x7fefffff
 800893c:	08010390 	.word	0x08010390
 8008940:	08010394 	.word	0x08010394
 8008944:	0801039c 	.word	0x0801039c
 8008948:	08010398 	.word	0x08010398
 800894c:	08010791 	.word	0x08010791
 8008950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008952:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008954:	429a      	cmp	r2, r3
 8008956:	bfa8      	it	ge
 8008958:	461a      	movge	r2, r3
 800895a:	2a00      	cmp	r2, #0
 800895c:	4691      	mov	r9, r2
 800895e:	dc37      	bgt.n	80089d0 <_printf_float+0x374>
 8008960:	f04f 0b00 	mov.w	fp, #0
 8008964:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008968:	f104 021a 	add.w	r2, r4, #26
 800896c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800896e:	9305      	str	r3, [sp, #20]
 8008970:	eba3 0309 	sub.w	r3, r3, r9
 8008974:	455b      	cmp	r3, fp
 8008976:	dc33      	bgt.n	80089e0 <_printf_float+0x384>
 8008978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800897c:	429a      	cmp	r2, r3
 800897e:	db3b      	blt.n	80089f8 <_printf_float+0x39c>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	07da      	lsls	r2, r3, #31
 8008984:	d438      	bmi.n	80089f8 <_printf_float+0x39c>
 8008986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008988:	9a05      	ldr	r2, [sp, #20]
 800898a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800898c:	1a9a      	subs	r2, r3, r2
 800898e:	eba3 0901 	sub.w	r9, r3, r1
 8008992:	4591      	cmp	r9, r2
 8008994:	bfa8      	it	ge
 8008996:	4691      	movge	r9, r2
 8008998:	f1b9 0f00 	cmp.w	r9, #0
 800899c:	dc35      	bgt.n	8008a0a <_printf_float+0x3ae>
 800899e:	f04f 0800 	mov.w	r8, #0
 80089a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089a6:	f104 0a1a 	add.w	sl, r4, #26
 80089aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089ae:	1a9b      	subs	r3, r3, r2
 80089b0:	eba3 0309 	sub.w	r3, r3, r9
 80089b4:	4543      	cmp	r3, r8
 80089b6:	f77f af79 	ble.w	80088ac <_printf_float+0x250>
 80089ba:	2301      	movs	r3, #1
 80089bc:	4652      	mov	r2, sl
 80089be:	4631      	mov	r1, r6
 80089c0:	4628      	mov	r0, r5
 80089c2:	47b8      	blx	r7
 80089c4:	3001      	adds	r0, #1
 80089c6:	f43f aeaa 	beq.w	800871e <_printf_float+0xc2>
 80089ca:	f108 0801 	add.w	r8, r8, #1
 80089ce:	e7ec      	b.n	80089aa <_printf_float+0x34e>
 80089d0:	4613      	mov	r3, r2
 80089d2:	4631      	mov	r1, r6
 80089d4:	4642      	mov	r2, r8
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b8      	blx	r7
 80089da:	3001      	adds	r0, #1
 80089dc:	d1c0      	bne.n	8008960 <_printf_float+0x304>
 80089de:	e69e      	b.n	800871e <_printf_float+0xc2>
 80089e0:	2301      	movs	r3, #1
 80089e2:	4631      	mov	r1, r6
 80089e4:	4628      	mov	r0, r5
 80089e6:	9205      	str	r2, [sp, #20]
 80089e8:	47b8      	blx	r7
 80089ea:	3001      	adds	r0, #1
 80089ec:	f43f ae97 	beq.w	800871e <_printf_float+0xc2>
 80089f0:	9a05      	ldr	r2, [sp, #20]
 80089f2:	f10b 0b01 	add.w	fp, fp, #1
 80089f6:	e7b9      	b.n	800896c <_printf_float+0x310>
 80089f8:	ee18 3a10 	vmov	r3, s16
 80089fc:	4652      	mov	r2, sl
 80089fe:	4631      	mov	r1, r6
 8008a00:	4628      	mov	r0, r5
 8008a02:	47b8      	blx	r7
 8008a04:	3001      	adds	r0, #1
 8008a06:	d1be      	bne.n	8008986 <_printf_float+0x32a>
 8008a08:	e689      	b.n	800871e <_printf_float+0xc2>
 8008a0a:	9a05      	ldr	r2, [sp, #20]
 8008a0c:	464b      	mov	r3, r9
 8008a0e:	4442      	add	r2, r8
 8008a10:	4631      	mov	r1, r6
 8008a12:	4628      	mov	r0, r5
 8008a14:	47b8      	blx	r7
 8008a16:	3001      	adds	r0, #1
 8008a18:	d1c1      	bne.n	800899e <_printf_float+0x342>
 8008a1a:	e680      	b.n	800871e <_printf_float+0xc2>
 8008a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a1e:	2a01      	cmp	r2, #1
 8008a20:	dc01      	bgt.n	8008a26 <_printf_float+0x3ca>
 8008a22:	07db      	lsls	r3, r3, #31
 8008a24:	d538      	bpl.n	8008a98 <_printf_float+0x43c>
 8008a26:	2301      	movs	r3, #1
 8008a28:	4642      	mov	r2, r8
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	47b8      	blx	r7
 8008a30:	3001      	adds	r0, #1
 8008a32:	f43f ae74 	beq.w	800871e <_printf_float+0xc2>
 8008a36:	ee18 3a10 	vmov	r3, s16
 8008a3a:	4652      	mov	r2, sl
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4628      	mov	r0, r5
 8008a40:	47b8      	blx	r7
 8008a42:	3001      	adds	r0, #1
 8008a44:	f43f ae6b 	beq.w	800871e <_printf_float+0xc2>
 8008a48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f7f8 f852 	bl	8000af8 <__aeabi_dcmpeq>
 8008a54:	b9d8      	cbnz	r0, 8008a8e <_printf_float+0x432>
 8008a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a58:	f108 0201 	add.w	r2, r8, #1
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b8      	blx	r7
 8008a64:	3001      	adds	r0, #1
 8008a66:	d10e      	bne.n	8008a86 <_printf_float+0x42a>
 8008a68:	e659      	b.n	800871e <_printf_float+0xc2>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4652      	mov	r2, sl
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4628      	mov	r0, r5
 8008a72:	47b8      	blx	r7
 8008a74:	3001      	adds	r0, #1
 8008a76:	f43f ae52 	beq.w	800871e <_printf_float+0xc2>
 8008a7a:	f108 0801 	add.w	r8, r8, #1
 8008a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a80:	3b01      	subs	r3, #1
 8008a82:	4543      	cmp	r3, r8
 8008a84:	dcf1      	bgt.n	8008a6a <_printf_float+0x40e>
 8008a86:	464b      	mov	r3, r9
 8008a88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a8c:	e6dc      	b.n	8008848 <_printf_float+0x1ec>
 8008a8e:	f04f 0800 	mov.w	r8, #0
 8008a92:	f104 0a1a 	add.w	sl, r4, #26
 8008a96:	e7f2      	b.n	8008a7e <_printf_float+0x422>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	4642      	mov	r2, r8
 8008a9c:	e7df      	b.n	8008a5e <_printf_float+0x402>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	464a      	mov	r2, r9
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	47b8      	blx	r7
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	f43f ae38 	beq.w	800871e <_printf_float+0xc2>
 8008aae:	f108 0801 	add.w	r8, r8, #1
 8008ab2:	68e3      	ldr	r3, [r4, #12]
 8008ab4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ab6:	1a5b      	subs	r3, r3, r1
 8008ab8:	4543      	cmp	r3, r8
 8008aba:	dcf0      	bgt.n	8008a9e <_printf_float+0x442>
 8008abc:	e6fa      	b.n	80088b4 <_printf_float+0x258>
 8008abe:	f04f 0800 	mov.w	r8, #0
 8008ac2:	f104 0919 	add.w	r9, r4, #25
 8008ac6:	e7f4      	b.n	8008ab2 <_printf_float+0x456>

08008ac8 <_printf_common>:
 8008ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008acc:	4616      	mov	r6, r2
 8008ace:	4699      	mov	r9, r3
 8008ad0:	688a      	ldr	r2, [r1, #8]
 8008ad2:	690b      	ldr	r3, [r1, #16]
 8008ad4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	bfb8      	it	lt
 8008adc:	4613      	movlt	r3, r2
 8008ade:	6033      	str	r3, [r6, #0]
 8008ae0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	b10a      	cbz	r2, 8008aee <_printf_common+0x26>
 8008aea:	3301      	adds	r3, #1
 8008aec:	6033      	str	r3, [r6, #0]
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	0699      	lsls	r1, r3, #26
 8008af2:	bf42      	ittt	mi
 8008af4:	6833      	ldrmi	r3, [r6, #0]
 8008af6:	3302      	addmi	r3, #2
 8008af8:	6033      	strmi	r3, [r6, #0]
 8008afa:	6825      	ldr	r5, [r4, #0]
 8008afc:	f015 0506 	ands.w	r5, r5, #6
 8008b00:	d106      	bne.n	8008b10 <_printf_common+0x48>
 8008b02:	f104 0a19 	add.w	sl, r4, #25
 8008b06:	68e3      	ldr	r3, [r4, #12]
 8008b08:	6832      	ldr	r2, [r6, #0]
 8008b0a:	1a9b      	subs	r3, r3, r2
 8008b0c:	42ab      	cmp	r3, r5
 8008b0e:	dc26      	bgt.n	8008b5e <_printf_common+0x96>
 8008b10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b14:	1e13      	subs	r3, r2, #0
 8008b16:	6822      	ldr	r2, [r4, #0]
 8008b18:	bf18      	it	ne
 8008b1a:	2301      	movne	r3, #1
 8008b1c:	0692      	lsls	r2, r2, #26
 8008b1e:	d42b      	bmi.n	8008b78 <_printf_common+0xb0>
 8008b20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b24:	4649      	mov	r1, r9
 8008b26:	4638      	mov	r0, r7
 8008b28:	47c0      	blx	r8
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d01e      	beq.n	8008b6c <_printf_common+0xa4>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	68e5      	ldr	r5, [r4, #12]
 8008b32:	6832      	ldr	r2, [r6, #0]
 8008b34:	f003 0306 	and.w	r3, r3, #6
 8008b38:	2b04      	cmp	r3, #4
 8008b3a:	bf08      	it	eq
 8008b3c:	1aad      	subeq	r5, r5, r2
 8008b3e:	68a3      	ldr	r3, [r4, #8]
 8008b40:	6922      	ldr	r2, [r4, #16]
 8008b42:	bf0c      	ite	eq
 8008b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b48:	2500      	movne	r5, #0
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	bfc4      	itt	gt
 8008b4e:	1a9b      	subgt	r3, r3, r2
 8008b50:	18ed      	addgt	r5, r5, r3
 8008b52:	2600      	movs	r6, #0
 8008b54:	341a      	adds	r4, #26
 8008b56:	42b5      	cmp	r5, r6
 8008b58:	d11a      	bne.n	8008b90 <_printf_common+0xc8>
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	e008      	b.n	8008b70 <_printf_common+0xa8>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	4652      	mov	r2, sl
 8008b62:	4649      	mov	r1, r9
 8008b64:	4638      	mov	r0, r7
 8008b66:	47c0      	blx	r8
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d103      	bne.n	8008b74 <_printf_common+0xac>
 8008b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b74:	3501      	adds	r5, #1
 8008b76:	e7c6      	b.n	8008b06 <_printf_common+0x3e>
 8008b78:	18e1      	adds	r1, r4, r3
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	2030      	movs	r0, #48	; 0x30
 8008b7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b82:	4422      	add	r2, r4
 8008b84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b8c:	3302      	adds	r3, #2
 8008b8e:	e7c7      	b.n	8008b20 <_printf_common+0x58>
 8008b90:	2301      	movs	r3, #1
 8008b92:	4622      	mov	r2, r4
 8008b94:	4649      	mov	r1, r9
 8008b96:	4638      	mov	r0, r7
 8008b98:	47c0      	blx	r8
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d0e6      	beq.n	8008b6c <_printf_common+0xa4>
 8008b9e:	3601      	adds	r6, #1
 8008ba0:	e7d9      	b.n	8008b56 <_printf_common+0x8e>
	...

08008ba4 <_printf_i>:
 8008ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba8:	7e0f      	ldrb	r7, [r1, #24]
 8008baa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bac:	2f78      	cmp	r7, #120	; 0x78
 8008bae:	4691      	mov	r9, r2
 8008bb0:	4680      	mov	r8, r0
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	469a      	mov	sl, r3
 8008bb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bba:	d807      	bhi.n	8008bcc <_printf_i+0x28>
 8008bbc:	2f62      	cmp	r7, #98	; 0x62
 8008bbe:	d80a      	bhi.n	8008bd6 <_printf_i+0x32>
 8008bc0:	2f00      	cmp	r7, #0
 8008bc2:	f000 80d8 	beq.w	8008d76 <_printf_i+0x1d2>
 8008bc6:	2f58      	cmp	r7, #88	; 0x58
 8008bc8:	f000 80a3 	beq.w	8008d12 <_printf_i+0x16e>
 8008bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bd4:	e03a      	b.n	8008c4c <_printf_i+0xa8>
 8008bd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bda:	2b15      	cmp	r3, #21
 8008bdc:	d8f6      	bhi.n	8008bcc <_printf_i+0x28>
 8008bde:	a101      	add	r1, pc, #4	; (adr r1, 8008be4 <_printf_i+0x40>)
 8008be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008be4:	08008c3d 	.word	0x08008c3d
 8008be8:	08008c51 	.word	0x08008c51
 8008bec:	08008bcd 	.word	0x08008bcd
 8008bf0:	08008bcd 	.word	0x08008bcd
 8008bf4:	08008bcd 	.word	0x08008bcd
 8008bf8:	08008bcd 	.word	0x08008bcd
 8008bfc:	08008c51 	.word	0x08008c51
 8008c00:	08008bcd 	.word	0x08008bcd
 8008c04:	08008bcd 	.word	0x08008bcd
 8008c08:	08008bcd 	.word	0x08008bcd
 8008c0c:	08008bcd 	.word	0x08008bcd
 8008c10:	08008d5d 	.word	0x08008d5d
 8008c14:	08008c81 	.word	0x08008c81
 8008c18:	08008d3f 	.word	0x08008d3f
 8008c1c:	08008bcd 	.word	0x08008bcd
 8008c20:	08008bcd 	.word	0x08008bcd
 8008c24:	08008d7f 	.word	0x08008d7f
 8008c28:	08008bcd 	.word	0x08008bcd
 8008c2c:	08008c81 	.word	0x08008c81
 8008c30:	08008bcd 	.word	0x08008bcd
 8008c34:	08008bcd 	.word	0x08008bcd
 8008c38:	08008d47 	.word	0x08008d47
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	1d1a      	adds	r2, r3, #4
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	602a      	str	r2, [r5, #0]
 8008c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e0a3      	b.n	8008d98 <_printf_i+0x1f4>
 8008c50:	6820      	ldr	r0, [r4, #0]
 8008c52:	6829      	ldr	r1, [r5, #0]
 8008c54:	0606      	lsls	r6, r0, #24
 8008c56:	f101 0304 	add.w	r3, r1, #4
 8008c5a:	d50a      	bpl.n	8008c72 <_printf_i+0xce>
 8008c5c:	680e      	ldr	r6, [r1, #0]
 8008c5e:	602b      	str	r3, [r5, #0]
 8008c60:	2e00      	cmp	r6, #0
 8008c62:	da03      	bge.n	8008c6c <_printf_i+0xc8>
 8008c64:	232d      	movs	r3, #45	; 0x2d
 8008c66:	4276      	negs	r6, r6
 8008c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c6c:	485e      	ldr	r0, [pc, #376]	; (8008de8 <_printf_i+0x244>)
 8008c6e:	230a      	movs	r3, #10
 8008c70:	e019      	b.n	8008ca6 <_printf_i+0x102>
 8008c72:	680e      	ldr	r6, [r1, #0]
 8008c74:	602b      	str	r3, [r5, #0]
 8008c76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c7a:	bf18      	it	ne
 8008c7c:	b236      	sxthne	r6, r6
 8008c7e:	e7ef      	b.n	8008c60 <_printf_i+0xbc>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	6820      	ldr	r0, [r4, #0]
 8008c84:	1d19      	adds	r1, r3, #4
 8008c86:	6029      	str	r1, [r5, #0]
 8008c88:	0601      	lsls	r1, r0, #24
 8008c8a:	d501      	bpl.n	8008c90 <_printf_i+0xec>
 8008c8c:	681e      	ldr	r6, [r3, #0]
 8008c8e:	e002      	b.n	8008c96 <_printf_i+0xf2>
 8008c90:	0646      	lsls	r6, r0, #25
 8008c92:	d5fb      	bpl.n	8008c8c <_printf_i+0xe8>
 8008c94:	881e      	ldrh	r6, [r3, #0]
 8008c96:	4854      	ldr	r0, [pc, #336]	; (8008de8 <_printf_i+0x244>)
 8008c98:	2f6f      	cmp	r7, #111	; 0x6f
 8008c9a:	bf0c      	ite	eq
 8008c9c:	2308      	moveq	r3, #8
 8008c9e:	230a      	movne	r3, #10
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ca6:	6865      	ldr	r5, [r4, #4]
 8008ca8:	60a5      	str	r5, [r4, #8]
 8008caa:	2d00      	cmp	r5, #0
 8008cac:	bfa2      	ittt	ge
 8008cae:	6821      	ldrge	r1, [r4, #0]
 8008cb0:	f021 0104 	bicge.w	r1, r1, #4
 8008cb4:	6021      	strge	r1, [r4, #0]
 8008cb6:	b90e      	cbnz	r6, 8008cbc <_printf_i+0x118>
 8008cb8:	2d00      	cmp	r5, #0
 8008cba:	d04d      	beq.n	8008d58 <_printf_i+0x1b4>
 8008cbc:	4615      	mov	r5, r2
 8008cbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cc2:	fb03 6711 	mls	r7, r3, r1, r6
 8008cc6:	5dc7      	ldrb	r7, [r0, r7]
 8008cc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ccc:	4637      	mov	r7, r6
 8008cce:	42bb      	cmp	r3, r7
 8008cd0:	460e      	mov	r6, r1
 8008cd2:	d9f4      	bls.n	8008cbe <_printf_i+0x11a>
 8008cd4:	2b08      	cmp	r3, #8
 8008cd6:	d10b      	bne.n	8008cf0 <_printf_i+0x14c>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	07de      	lsls	r6, r3, #31
 8008cdc:	d508      	bpl.n	8008cf0 <_printf_i+0x14c>
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	6861      	ldr	r1, [r4, #4]
 8008ce2:	4299      	cmp	r1, r3
 8008ce4:	bfde      	ittt	le
 8008ce6:	2330      	movle	r3, #48	; 0x30
 8008ce8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cf0:	1b52      	subs	r2, r2, r5
 8008cf2:	6122      	str	r2, [r4, #16]
 8008cf4:	f8cd a000 	str.w	sl, [sp]
 8008cf8:	464b      	mov	r3, r9
 8008cfa:	aa03      	add	r2, sp, #12
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4640      	mov	r0, r8
 8008d00:	f7ff fee2 	bl	8008ac8 <_printf_common>
 8008d04:	3001      	adds	r0, #1
 8008d06:	d14c      	bne.n	8008da2 <_printf_i+0x1fe>
 8008d08:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0c:	b004      	add	sp, #16
 8008d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d12:	4835      	ldr	r0, [pc, #212]	; (8008de8 <_printf_i+0x244>)
 8008d14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d18:	6829      	ldr	r1, [r5, #0]
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d20:	6029      	str	r1, [r5, #0]
 8008d22:	061d      	lsls	r5, r3, #24
 8008d24:	d514      	bpl.n	8008d50 <_printf_i+0x1ac>
 8008d26:	07df      	lsls	r7, r3, #31
 8008d28:	bf44      	itt	mi
 8008d2a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d2e:	6023      	strmi	r3, [r4, #0]
 8008d30:	b91e      	cbnz	r6, 8008d3a <_printf_i+0x196>
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	f023 0320 	bic.w	r3, r3, #32
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	2310      	movs	r3, #16
 8008d3c:	e7b0      	b.n	8008ca0 <_printf_i+0xfc>
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	f043 0320 	orr.w	r3, r3, #32
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	2378      	movs	r3, #120	; 0x78
 8008d48:	4828      	ldr	r0, [pc, #160]	; (8008dec <_printf_i+0x248>)
 8008d4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d4e:	e7e3      	b.n	8008d18 <_printf_i+0x174>
 8008d50:	0659      	lsls	r1, r3, #25
 8008d52:	bf48      	it	mi
 8008d54:	b2b6      	uxthmi	r6, r6
 8008d56:	e7e6      	b.n	8008d26 <_printf_i+0x182>
 8008d58:	4615      	mov	r5, r2
 8008d5a:	e7bb      	b.n	8008cd4 <_printf_i+0x130>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	6826      	ldr	r6, [r4, #0]
 8008d60:	6961      	ldr	r1, [r4, #20]
 8008d62:	1d18      	adds	r0, r3, #4
 8008d64:	6028      	str	r0, [r5, #0]
 8008d66:	0635      	lsls	r5, r6, #24
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	d501      	bpl.n	8008d70 <_printf_i+0x1cc>
 8008d6c:	6019      	str	r1, [r3, #0]
 8008d6e:	e002      	b.n	8008d76 <_printf_i+0x1d2>
 8008d70:	0670      	lsls	r0, r6, #25
 8008d72:	d5fb      	bpl.n	8008d6c <_printf_i+0x1c8>
 8008d74:	8019      	strh	r1, [r3, #0]
 8008d76:	2300      	movs	r3, #0
 8008d78:	6123      	str	r3, [r4, #16]
 8008d7a:	4615      	mov	r5, r2
 8008d7c:	e7ba      	b.n	8008cf4 <_printf_i+0x150>
 8008d7e:	682b      	ldr	r3, [r5, #0]
 8008d80:	1d1a      	adds	r2, r3, #4
 8008d82:	602a      	str	r2, [r5, #0]
 8008d84:	681d      	ldr	r5, [r3, #0]
 8008d86:	6862      	ldr	r2, [r4, #4]
 8008d88:	2100      	movs	r1, #0
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	f7f7 fa40 	bl	8000210 <memchr>
 8008d90:	b108      	cbz	r0, 8008d96 <_printf_i+0x1f2>
 8008d92:	1b40      	subs	r0, r0, r5
 8008d94:	6060      	str	r0, [r4, #4]
 8008d96:	6863      	ldr	r3, [r4, #4]
 8008d98:	6123      	str	r3, [r4, #16]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008da0:	e7a8      	b.n	8008cf4 <_printf_i+0x150>
 8008da2:	6923      	ldr	r3, [r4, #16]
 8008da4:	462a      	mov	r2, r5
 8008da6:	4649      	mov	r1, r9
 8008da8:	4640      	mov	r0, r8
 8008daa:	47d0      	blx	sl
 8008dac:	3001      	adds	r0, #1
 8008dae:	d0ab      	beq.n	8008d08 <_printf_i+0x164>
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	079b      	lsls	r3, r3, #30
 8008db4:	d413      	bmi.n	8008dde <_printf_i+0x23a>
 8008db6:	68e0      	ldr	r0, [r4, #12]
 8008db8:	9b03      	ldr	r3, [sp, #12]
 8008dba:	4298      	cmp	r0, r3
 8008dbc:	bfb8      	it	lt
 8008dbe:	4618      	movlt	r0, r3
 8008dc0:	e7a4      	b.n	8008d0c <_printf_i+0x168>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	4632      	mov	r2, r6
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	4640      	mov	r0, r8
 8008dca:	47d0      	blx	sl
 8008dcc:	3001      	adds	r0, #1
 8008dce:	d09b      	beq.n	8008d08 <_printf_i+0x164>
 8008dd0:	3501      	adds	r5, #1
 8008dd2:	68e3      	ldr	r3, [r4, #12]
 8008dd4:	9903      	ldr	r1, [sp, #12]
 8008dd6:	1a5b      	subs	r3, r3, r1
 8008dd8:	42ab      	cmp	r3, r5
 8008dda:	dcf2      	bgt.n	8008dc2 <_printf_i+0x21e>
 8008ddc:	e7eb      	b.n	8008db6 <_printf_i+0x212>
 8008dde:	2500      	movs	r5, #0
 8008de0:	f104 0619 	add.w	r6, r4, #25
 8008de4:	e7f5      	b.n	8008dd2 <_printf_i+0x22e>
 8008de6:	bf00      	nop
 8008de8:	080103a0 	.word	0x080103a0
 8008dec:	080103b1 	.word	0x080103b1

08008df0 <_scanf_float>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	b087      	sub	sp, #28
 8008df6:	4617      	mov	r7, r2
 8008df8:	9303      	str	r3, [sp, #12]
 8008dfa:	688b      	ldr	r3, [r1, #8]
 8008dfc:	1e5a      	subs	r2, r3, #1
 8008dfe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e02:	bf83      	ittte	hi
 8008e04:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e08:	195b      	addhi	r3, r3, r5
 8008e0a:	9302      	strhi	r3, [sp, #8]
 8008e0c:	2300      	movls	r3, #0
 8008e0e:	bf86      	itte	hi
 8008e10:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e14:	608b      	strhi	r3, [r1, #8]
 8008e16:	9302      	strls	r3, [sp, #8]
 8008e18:	680b      	ldr	r3, [r1, #0]
 8008e1a:	468b      	mov	fp, r1
 8008e1c:	2500      	movs	r5, #0
 8008e1e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e22:	f84b 3b1c 	str.w	r3, [fp], #28
 8008e26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e2a:	4680      	mov	r8, r0
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	465e      	mov	r6, fp
 8008e30:	46aa      	mov	sl, r5
 8008e32:	46a9      	mov	r9, r5
 8008e34:	9501      	str	r5, [sp, #4]
 8008e36:	68a2      	ldr	r2, [r4, #8]
 8008e38:	b152      	cbz	r2, 8008e50 <_scanf_float+0x60>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2b4e      	cmp	r3, #78	; 0x4e
 8008e40:	d864      	bhi.n	8008f0c <_scanf_float+0x11c>
 8008e42:	2b40      	cmp	r3, #64	; 0x40
 8008e44:	d83c      	bhi.n	8008ec0 <_scanf_float+0xd0>
 8008e46:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e4a:	b2c8      	uxtb	r0, r1
 8008e4c:	280e      	cmp	r0, #14
 8008e4e:	d93a      	bls.n	8008ec6 <_scanf_float+0xd6>
 8008e50:	f1b9 0f00 	cmp.w	r9, #0
 8008e54:	d003      	beq.n	8008e5e <_scanf_float+0x6e>
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e62:	f1ba 0f01 	cmp.w	sl, #1
 8008e66:	f200 8113 	bhi.w	8009090 <_scanf_float+0x2a0>
 8008e6a:	455e      	cmp	r6, fp
 8008e6c:	f200 8105 	bhi.w	800907a <_scanf_float+0x28a>
 8008e70:	2501      	movs	r5, #1
 8008e72:	4628      	mov	r0, r5
 8008e74:	b007      	add	sp, #28
 8008e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e7e:	2a0d      	cmp	r2, #13
 8008e80:	d8e6      	bhi.n	8008e50 <_scanf_float+0x60>
 8008e82:	a101      	add	r1, pc, #4	; (adr r1, 8008e88 <_scanf_float+0x98>)
 8008e84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e88:	08008fc7 	.word	0x08008fc7
 8008e8c:	08008e51 	.word	0x08008e51
 8008e90:	08008e51 	.word	0x08008e51
 8008e94:	08008e51 	.word	0x08008e51
 8008e98:	08009027 	.word	0x08009027
 8008e9c:	08008fff 	.word	0x08008fff
 8008ea0:	08008e51 	.word	0x08008e51
 8008ea4:	08008e51 	.word	0x08008e51
 8008ea8:	08008fd5 	.word	0x08008fd5
 8008eac:	08008e51 	.word	0x08008e51
 8008eb0:	08008e51 	.word	0x08008e51
 8008eb4:	08008e51 	.word	0x08008e51
 8008eb8:	08008e51 	.word	0x08008e51
 8008ebc:	08008f8d 	.word	0x08008f8d
 8008ec0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008ec4:	e7db      	b.n	8008e7e <_scanf_float+0x8e>
 8008ec6:	290e      	cmp	r1, #14
 8008ec8:	d8c2      	bhi.n	8008e50 <_scanf_float+0x60>
 8008eca:	a001      	add	r0, pc, #4	; (adr r0, 8008ed0 <_scanf_float+0xe0>)
 8008ecc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ed0:	08008f7f 	.word	0x08008f7f
 8008ed4:	08008e51 	.word	0x08008e51
 8008ed8:	08008f7f 	.word	0x08008f7f
 8008edc:	08009013 	.word	0x08009013
 8008ee0:	08008e51 	.word	0x08008e51
 8008ee4:	08008f2d 	.word	0x08008f2d
 8008ee8:	08008f69 	.word	0x08008f69
 8008eec:	08008f69 	.word	0x08008f69
 8008ef0:	08008f69 	.word	0x08008f69
 8008ef4:	08008f69 	.word	0x08008f69
 8008ef8:	08008f69 	.word	0x08008f69
 8008efc:	08008f69 	.word	0x08008f69
 8008f00:	08008f69 	.word	0x08008f69
 8008f04:	08008f69 	.word	0x08008f69
 8008f08:	08008f69 	.word	0x08008f69
 8008f0c:	2b6e      	cmp	r3, #110	; 0x6e
 8008f0e:	d809      	bhi.n	8008f24 <_scanf_float+0x134>
 8008f10:	2b60      	cmp	r3, #96	; 0x60
 8008f12:	d8b2      	bhi.n	8008e7a <_scanf_float+0x8a>
 8008f14:	2b54      	cmp	r3, #84	; 0x54
 8008f16:	d077      	beq.n	8009008 <_scanf_float+0x218>
 8008f18:	2b59      	cmp	r3, #89	; 0x59
 8008f1a:	d199      	bne.n	8008e50 <_scanf_float+0x60>
 8008f1c:	2d07      	cmp	r5, #7
 8008f1e:	d197      	bne.n	8008e50 <_scanf_float+0x60>
 8008f20:	2508      	movs	r5, #8
 8008f22:	e029      	b.n	8008f78 <_scanf_float+0x188>
 8008f24:	2b74      	cmp	r3, #116	; 0x74
 8008f26:	d06f      	beq.n	8009008 <_scanf_float+0x218>
 8008f28:	2b79      	cmp	r3, #121	; 0x79
 8008f2a:	e7f6      	b.n	8008f1a <_scanf_float+0x12a>
 8008f2c:	6821      	ldr	r1, [r4, #0]
 8008f2e:	05c8      	lsls	r0, r1, #23
 8008f30:	d51a      	bpl.n	8008f68 <_scanf_float+0x178>
 8008f32:	9b02      	ldr	r3, [sp, #8]
 8008f34:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008f38:	6021      	str	r1, [r4, #0]
 8008f3a:	f109 0901 	add.w	r9, r9, #1
 8008f3e:	b11b      	cbz	r3, 8008f48 <_scanf_float+0x158>
 8008f40:	3b01      	subs	r3, #1
 8008f42:	3201      	adds	r2, #1
 8008f44:	9302      	str	r3, [sp, #8]
 8008f46:	60a2      	str	r2, [r4, #8]
 8008f48:	68a3      	ldr	r3, [r4, #8]
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	60a3      	str	r3, [r4, #8]
 8008f4e:	6923      	ldr	r3, [r4, #16]
 8008f50:	3301      	adds	r3, #1
 8008f52:	6123      	str	r3, [r4, #16]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	3b01      	subs	r3, #1
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	607b      	str	r3, [r7, #4]
 8008f5c:	f340 8084 	ble.w	8009068 <_scanf_float+0x278>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	3301      	adds	r3, #1
 8008f64:	603b      	str	r3, [r7, #0]
 8008f66:	e766      	b.n	8008e36 <_scanf_float+0x46>
 8008f68:	eb1a 0f05 	cmn.w	sl, r5
 8008f6c:	f47f af70 	bne.w	8008e50 <_scanf_float+0x60>
 8008f70:	6822      	ldr	r2, [r4, #0]
 8008f72:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f76:	6022      	str	r2, [r4, #0]
 8008f78:	f806 3b01 	strb.w	r3, [r6], #1
 8008f7c:	e7e4      	b.n	8008f48 <_scanf_float+0x158>
 8008f7e:	6822      	ldr	r2, [r4, #0]
 8008f80:	0610      	lsls	r0, r2, #24
 8008f82:	f57f af65 	bpl.w	8008e50 <_scanf_float+0x60>
 8008f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f8a:	e7f4      	b.n	8008f76 <_scanf_float+0x186>
 8008f8c:	f1ba 0f00 	cmp.w	sl, #0
 8008f90:	d10e      	bne.n	8008fb0 <_scanf_float+0x1c0>
 8008f92:	f1b9 0f00 	cmp.w	r9, #0
 8008f96:	d10e      	bne.n	8008fb6 <_scanf_float+0x1c6>
 8008f98:	6822      	ldr	r2, [r4, #0]
 8008f9a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f9e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fa2:	d108      	bne.n	8008fb6 <_scanf_float+0x1c6>
 8008fa4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fa8:	6022      	str	r2, [r4, #0]
 8008faa:	f04f 0a01 	mov.w	sl, #1
 8008fae:	e7e3      	b.n	8008f78 <_scanf_float+0x188>
 8008fb0:	f1ba 0f02 	cmp.w	sl, #2
 8008fb4:	d055      	beq.n	8009062 <_scanf_float+0x272>
 8008fb6:	2d01      	cmp	r5, #1
 8008fb8:	d002      	beq.n	8008fc0 <_scanf_float+0x1d0>
 8008fba:	2d04      	cmp	r5, #4
 8008fbc:	f47f af48 	bne.w	8008e50 <_scanf_float+0x60>
 8008fc0:	3501      	adds	r5, #1
 8008fc2:	b2ed      	uxtb	r5, r5
 8008fc4:	e7d8      	b.n	8008f78 <_scanf_float+0x188>
 8008fc6:	f1ba 0f01 	cmp.w	sl, #1
 8008fca:	f47f af41 	bne.w	8008e50 <_scanf_float+0x60>
 8008fce:	f04f 0a02 	mov.w	sl, #2
 8008fd2:	e7d1      	b.n	8008f78 <_scanf_float+0x188>
 8008fd4:	b97d      	cbnz	r5, 8008ff6 <_scanf_float+0x206>
 8008fd6:	f1b9 0f00 	cmp.w	r9, #0
 8008fda:	f47f af3c 	bne.w	8008e56 <_scanf_float+0x66>
 8008fde:	6822      	ldr	r2, [r4, #0]
 8008fe0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008fe4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fe8:	f47f af39 	bne.w	8008e5e <_scanf_float+0x6e>
 8008fec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ff0:	6022      	str	r2, [r4, #0]
 8008ff2:	2501      	movs	r5, #1
 8008ff4:	e7c0      	b.n	8008f78 <_scanf_float+0x188>
 8008ff6:	2d03      	cmp	r5, #3
 8008ff8:	d0e2      	beq.n	8008fc0 <_scanf_float+0x1d0>
 8008ffa:	2d05      	cmp	r5, #5
 8008ffc:	e7de      	b.n	8008fbc <_scanf_float+0x1cc>
 8008ffe:	2d02      	cmp	r5, #2
 8009000:	f47f af26 	bne.w	8008e50 <_scanf_float+0x60>
 8009004:	2503      	movs	r5, #3
 8009006:	e7b7      	b.n	8008f78 <_scanf_float+0x188>
 8009008:	2d06      	cmp	r5, #6
 800900a:	f47f af21 	bne.w	8008e50 <_scanf_float+0x60>
 800900e:	2507      	movs	r5, #7
 8009010:	e7b2      	b.n	8008f78 <_scanf_float+0x188>
 8009012:	6822      	ldr	r2, [r4, #0]
 8009014:	0591      	lsls	r1, r2, #22
 8009016:	f57f af1b 	bpl.w	8008e50 <_scanf_float+0x60>
 800901a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800901e:	6022      	str	r2, [r4, #0]
 8009020:	f8cd 9004 	str.w	r9, [sp, #4]
 8009024:	e7a8      	b.n	8008f78 <_scanf_float+0x188>
 8009026:	6822      	ldr	r2, [r4, #0]
 8009028:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800902c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009030:	d006      	beq.n	8009040 <_scanf_float+0x250>
 8009032:	0550      	lsls	r0, r2, #21
 8009034:	f57f af0c 	bpl.w	8008e50 <_scanf_float+0x60>
 8009038:	f1b9 0f00 	cmp.w	r9, #0
 800903c:	f43f af0f 	beq.w	8008e5e <_scanf_float+0x6e>
 8009040:	0591      	lsls	r1, r2, #22
 8009042:	bf58      	it	pl
 8009044:	9901      	ldrpl	r1, [sp, #4]
 8009046:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800904a:	bf58      	it	pl
 800904c:	eba9 0101 	subpl.w	r1, r9, r1
 8009050:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009054:	bf58      	it	pl
 8009056:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800905a:	6022      	str	r2, [r4, #0]
 800905c:	f04f 0900 	mov.w	r9, #0
 8009060:	e78a      	b.n	8008f78 <_scanf_float+0x188>
 8009062:	f04f 0a03 	mov.w	sl, #3
 8009066:	e787      	b.n	8008f78 <_scanf_float+0x188>
 8009068:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800906c:	4639      	mov	r1, r7
 800906e:	4640      	mov	r0, r8
 8009070:	4798      	blx	r3
 8009072:	2800      	cmp	r0, #0
 8009074:	f43f aedf 	beq.w	8008e36 <_scanf_float+0x46>
 8009078:	e6ea      	b.n	8008e50 <_scanf_float+0x60>
 800907a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800907e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009082:	463a      	mov	r2, r7
 8009084:	4640      	mov	r0, r8
 8009086:	4798      	blx	r3
 8009088:	6923      	ldr	r3, [r4, #16]
 800908a:	3b01      	subs	r3, #1
 800908c:	6123      	str	r3, [r4, #16]
 800908e:	e6ec      	b.n	8008e6a <_scanf_float+0x7a>
 8009090:	1e6b      	subs	r3, r5, #1
 8009092:	2b06      	cmp	r3, #6
 8009094:	d825      	bhi.n	80090e2 <_scanf_float+0x2f2>
 8009096:	2d02      	cmp	r5, #2
 8009098:	d836      	bhi.n	8009108 <_scanf_float+0x318>
 800909a:	455e      	cmp	r6, fp
 800909c:	f67f aee8 	bls.w	8008e70 <_scanf_float+0x80>
 80090a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090a8:	463a      	mov	r2, r7
 80090aa:	4640      	mov	r0, r8
 80090ac:	4798      	blx	r3
 80090ae:	6923      	ldr	r3, [r4, #16]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	6123      	str	r3, [r4, #16]
 80090b4:	e7f1      	b.n	800909a <_scanf_float+0x2aa>
 80090b6:	9802      	ldr	r0, [sp, #8]
 80090b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80090c0:	9002      	str	r0, [sp, #8]
 80090c2:	463a      	mov	r2, r7
 80090c4:	4640      	mov	r0, r8
 80090c6:	4798      	blx	r3
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	6123      	str	r3, [r4, #16]
 80090ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090d2:	fa5f fa8a 	uxtb.w	sl, sl
 80090d6:	f1ba 0f02 	cmp.w	sl, #2
 80090da:	d1ec      	bne.n	80090b6 <_scanf_float+0x2c6>
 80090dc:	3d03      	subs	r5, #3
 80090de:	b2ed      	uxtb	r5, r5
 80090e0:	1b76      	subs	r6, r6, r5
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	05da      	lsls	r2, r3, #23
 80090e6:	d52f      	bpl.n	8009148 <_scanf_float+0x358>
 80090e8:	055b      	lsls	r3, r3, #21
 80090ea:	d510      	bpl.n	800910e <_scanf_float+0x31e>
 80090ec:	455e      	cmp	r6, fp
 80090ee:	f67f aebf 	bls.w	8008e70 <_scanf_float+0x80>
 80090f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090fa:	463a      	mov	r2, r7
 80090fc:	4640      	mov	r0, r8
 80090fe:	4798      	blx	r3
 8009100:	6923      	ldr	r3, [r4, #16]
 8009102:	3b01      	subs	r3, #1
 8009104:	6123      	str	r3, [r4, #16]
 8009106:	e7f1      	b.n	80090ec <_scanf_float+0x2fc>
 8009108:	46aa      	mov	sl, r5
 800910a:	9602      	str	r6, [sp, #8]
 800910c:	e7df      	b.n	80090ce <_scanf_float+0x2de>
 800910e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009112:	6923      	ldr	r3, [r4, #16]
 8009114:	2965      	cmp	r1, #101	; 0x65
 8009116:	f103 33ff 	add.w	r3, r3, #4294967295
 800911a:	f106 35ff 	add.w	r5, r6, #4294967295
 800911e:	6123      	str	r3, [r4, #16]
 8009120:	d00c      	beq.n	800913c <_scanf_float+0x34c>
 8009122:	2945      	cmp	r1, #69	; 0x45
 8009124:	d00a      	beq.n	800913c <_scanf_float+0x34c>
 8009126:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800912a:	463a      	mov	r2, r7
 800912c:	4640      	mov	r0, r8
 800912e:	4798      	blx	r3
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009136:	3b01      	subs	r3, #1
 8009138:	1eb5      	subs	r5, r6, #2
 800913a:	6123      	str	r3, [r4, #16]
 800913c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009140:	463a      	mov	r2, r7
 8009142:	4640      	mov	r0, r8
 8009144:	4798      	blx	r3
 8009146:	462e      	mov	r6, r5
 8009148:	6825      	ldr	r5, [r4, #0]
 800914a:	f015 0510 	ands.w	r5, r5, #16
 800914e:	d159      	bne.n	8009204 <_scanf_float+0x414>
 8009150:	7035      	strb	r5, [r6, #0]
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800915c:	d11b      	bne.n	8009196 <_scanf_float+0x3a6>
 800915e:	9b01      	ldr	r3, [sp, #4]
 8009160:	454b      	cmp	r3, r9
 8009162:	eba3 0209 	sub.w	r2, r3, r9
 8009166:	d123      	bne.n	80091b0 <_scanf_float+0x3c0>
 8009168:	2200      	movs	r2, #0
 800916a:	4659      	mov	r1, fp
 800916c:	4640      	mov	r0, r8
 800916e:	f000 ff09 	bl	8009f84 <_strtod_r>
 8009172:	6822      	ldr	r2, [r4, #0]
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	f012 0f02 	tst.w	r2, #2
 800917a:	ec57 6b10 	vmov	r6, r7, d0
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	d021      	beq.n	80091c6 <_scanf_float+0x3d6>
 8009182:	9903      	ldr	r1, [sp, #12]
 8009184:	1d1a      	adds	r2, r3, #4
 8009186:	600a      	str	r2, [r1, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	e9c3 6700 	strd	r6, r7, [r3]
 800918e:	68e3      	ldr	r3, [r4, #12]
 8009190:	3301      	adds	r3, #1
 8009192:	60e3      	str	r3, [r4, #12]
 8009194:	e66d      	b.n	8008e72 <_scanf_float+0x82>
 8009196:	9b04      	ldr	r3, [sp, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d0e5      	beq.n	8009168 <_scanf_float+0x378>
 800919c:	9905      	ldr	r1, [sp, #20]
 800919e:	230a      	movs	r3, #10
 80091a0:	462a      	mov	r2, r5
 80091a2:	3101      	adds	r1, #1
 80091a4:	4640      	mov	r0, r8
 80091a6:	f000 ff81 	bl	800a0ac <_strtol_r>
 80091aa:	9b04      	ldr	r3, [sp, #16]
 80091ac:	9e05      	ldr	r6, [sp, #20]
 80091ae:	1ac2      	subs	r2, r0, r3
 80091b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80091b4:	429e      	cmp	r6, r3
 80091b6:	bf28      	it	cs
 80091b8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80091bc:	4912      	ldr	r1, [pc, #72]	; (8009208 <_scanf_float+0x418>)
 80091be:	4630      	mov	r0, r6
 80091c0:	f000 f82c 	bl	800921c <siprintf>
 80091c4:	e7d0      	b.n	8009168 <_scanf_float+0x378>
 80091c6:	9903      	ldr	r1, [sp, #12]
 80091c8:	f012 0f04 	tst.w	r2, #4
 80091cc:	f103 0204 	add.w	r2, r3, #4
 80091d0:	600a      	str	r2, [r1, #0]
 80091d2:	d1d9      	bne.n	8009188 <_scanf_float+0x398>
 80091d4:	f8d3 8000 	ldr.w	r8, [r3]
 80091d8:	ee10 2a10 	vmov	r2, s0
 80091dc:	ee10 0a10 	vmov	r0, s0
 80091e0:	463b      	mov	r3, r7
 80091e2:	4639      	mov	r1, r7
 80091e4:	f7f7 fcba 	bl	8000b5c <__aeabi_dcmpun>
 80091e8:	b128      	cbz	r0, 80091f6 <_scanf_float+0x406>
 80091ea:	4808      	ldr	r0, [pc, #32]	; (800920c <_scanf_float+0x41c>)
 80091ec:	f000 f810 	bl	8009210 <nanf>
 80091f0:	ed88 0a00 	vstr	s0, [r8]
 80091f4:	e7cb      	b.n	800918e <_scanf_float+0x39e>
 80091f6:	4630      	mov	r0, r6
 80091f8:	4639      	mov	r1, r7
 80091fa:	f7f7 fd0d 	bl	8000c18 <__aeabi_d2f>
 80091fe:	f8c8 0000 	str.w	r0, [r8]
 8009202:	e7c4      	b.n	800918e <_scanf_float+0x39e>
 8009204:	2500      	movs	r5, #0
 8009206:	e634      	b.n	8008e72 <_scanf_float+0x82>
 8009208:	080103c2 	.word	0x080103c2
 800920c:	080107e3 	.word	0x080107e3

08009210 <nanf>:
 8009210:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009218 <nanf+0x8>
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	7fc00000 	.word	0x7fc00000

0800921c <siprintf>:
 800921c:	b40e      	push	{r1, r2, r3}
 800921e:	b500      	push	{lr}
 8009220:	b09c      	sub	sp, #112	; 0x70
 8009222:	ab1d      	add	r3, sp, #116	; 0x74
 8009224:	9002      	str	r0, [sp, #8]
 8009226:	9006      	str	r0, [sp, #24]
 8009228:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800922c:	4809      	ldr	r0, [pc, #36]	; (8009254 <siprintf+0x38>)
 800922e:	9107      	str	r1, [sp, #28]
 8009230:	9104      	str	r1, [sp, #16]
 8009232:	4909      	ldr	r1, [pc, #36]	; (8009258 <siprintf+0x3c>)
 8009234:	f853 2b04 	ldr.w	r2, [r3], #4
 8009238:	9105      	str	r1, [sp, #20]
 800923a:	6800      	ldr	r0, [r0, #0]
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	a902      	add	r1, sp, #8
 8009240:	f002 ff9e 	bl	800c180 <_svfiprintf_r>
 8009244:	9b02      	ldr	r3, [sp, #8]
 8009246:	2200      	movs	r2, #0
 8009248:	701a      	strb	r2, [r3, #0]
 800924a:	b01c      	add	sp, #112	; 0x70
 800924c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009250:	b003      	add	sp, #12
 8009252:	4770      	bx	lr
 8009254:	2000001c 	.word	0x2000001c
 8009258:	ffff0208 	.word	0xffff0208

0800925c <siscanf>:
 800925c:	b40e      	push	{r1, r2, r3}
 800925e:	b510      	push	{r4, lr}
 8009260:	b09f      	sub	sp, #124	; 0x7c
 8009262:	ac21      	add	r4, sp, #132	; 0x84
 8009264:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009268:	f854 2b04 	ldr.w	r2, [r4], #4
 800926c:	9201      	str	r2, [sp, #4]
 800926e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009272:	9004      	str	r0, [sp, #16]
 8009274:	9008      	str	r0, [sp, #32]
 8009276:	f7f6 ffbd 	bl	80001f4 <strlen>
 800927a:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <siscanf+0x50>)
 800927c:	9005      	str	r0, [sp, #20]
 800927e:	9009      	str	r0, [sp, #36]	; 0x24
 8009280:	930d      	str	r3, [sp, #52]	; 0x34
 8009282:	480b      	ldr	r0, [pc, #44]	; (80092b0 <siscanf+0x54>)
 8009284:	9a01      	ldr	r2, [sp, #4]
 8009286:	6800      	ldr	r0, [r0, #0]
 8009288:	9403      	str	r4, [sp, #12]
 800928a:	2300      	movs	r3, #0
 800928c:	9311      	str	r3, [sp, #68]	; 0x44
 800928e:	9316      	str	r3, [sp, #88]	; 0x58
 8009290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009294:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009298:	a904      	add	r1, sp, #16
 800929a:	4623      	mov	r3, r4
 800929c:	f003 f8ca 	bl	800c434 <__ssvfiscanf_r>
 80092a0:	b01f      	add	sp, #124	; 0x7c
 80092a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092a6:	b003      	add	sp, #12
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	080092d7 	.word	0x080092d7
 80092b0:	2000001c 	.word	0x2000001c

080092b4 <__sread>:
 80092b4:	b510      	push	{r4, lr}
 80092b6:	460c      	mov	r4, r1
 80092b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092bc:	f003 fb84 	bl	800c9c8 <_read_r>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	bfab      	itete	ge
 80092c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092c6:	89a3      	ldrhlt	r3, [r4, #12]
 80092c8:	181b      	addge	r3, r3, r0
 80092ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092ce:	bfac      	ite	ge
 80092d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80092d2:	81a3      	strhlt	r3, [r4, #12]
 80092d4:	bd10      	pop	{r4, pc}

080092d6 <__seofread>:
 80092d6:	2000      	movs	r0, #0
 80092d8:	4770      	bx	lr

080092da <__swrite>:
 80092da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092de:	461f      	mov	r7, r3
 80092e0:	898b      	ldrh	r3, [r1, #12]
 80092e2:	05db      	lsls	r3, r3, #23
 80092e4:	4605      	mov	r5, r0
 80092e6:	460c      	mov	r4, r1
 80092e8:	4616      	mov	r6, r2
 80092ea:	d505      	bpl.n	80092f8 <__swrite+0x1e>
 80092ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f0:	2302      	movs	r3, #2
 80092f2:	2200      	movs	r2, #0
 80092f4:	f002 f8f6 	bl	800b4e4 <_lseek_r>
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	4632      	mov	r2, r6
 8009306:	463b      	mov	r3, r7
 8009308:	4628      	mov	r0, r5
 800930a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800930e:	f000 bed9 	b.w	800a0c4 <_write_r>

08009312 <__sseek>:
 8009312:	b510      	push	{r4, lr}
 8009314:	460c      	mov	r4, r1
 8009316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931a:	f002 f8e3 	bl	800b4e4 <_lseek_r>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	bf15      	itete	ne
 8009324:	6560      	strne	r0, [r4, #84]	; 0x54
 8009326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800932a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800932e:	81a3      	strheq	r3, [r4, #12]
 8009330:	bf18      	it	ne
 8009332:	81a3      	strhne	r3, [r4, #12]
 8009334:	bd10      	pop	{r4, pc}

08009336 <__sclose>:
 8009336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933a:	f000 bed5 	b.w	800a0e8 <_close_r>

0800933e <sulp>:
 800933e:	b570      	push	{r4, r5, r6, lr}
 8009340:	4604      	mov	r4, r0
 8009342:	460d      	mov	r5, r1
 8009344:	ec45 4b10 	vmov	d0, r4, r5
 8009348:	4616      	mov	r6, r2
 800934a:	f002 fc77 	bl	800bc3c <__ulp>
 800934e:	ec51 0b10 	vmov	r0, r1, d0
 8009352:	b17e      	cbz	r6, 8009374 <sulp+0x36>
 8009354:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009358:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800935c:	2b00      	cmp	r3, #0
 800935e:	dd09      	ble.n	8009374 <sulp+0x36>
 8009360:	051b      	lsls	r3, r3, #20
 8009362:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009366:	2400      	movs	r4, #0
 8009368:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800936c:	4622      	mov	r2, r4
 800936e:	462b      	mov	r3, r5
 8009370:	f7f7 f95a 	bl	8000628 <__aeabi_dmul>
 8009374:	bd70      	pop	{r4, r5, r6, pc}
	...

08009378 <_strtod_l>:
 8009378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937c:	ed2d 8b02 	vpush	{d8}
 8009380:	b09d      	sub	sp, #116	; 0x74
 8009382:	461f      	mov	r7, r3
 8009384:	2300      	movs	r3, #0
 8009386:	9318      	str	r3, [sp, #96]	; 0x60
 8009388:	4ba2      	ldr	r3, [pc, #648]	; (8009614 <_strtod_l+0x29c>)
 800938a:	9213      	str	r2, [sp, #76]	; 0x4c
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	9305      	str	r3, [sp, #20]
 8009390:	4604      	mov	r4, r0
 8009392:	4618      	mov	r0, r3
 8009394:	4688      	mov	r8, r1
 8009396:	f7f6 ff2d 	bl	80001f4 <strlen>
 800939a:	f04f 0a00 	mov.w	sl, #0
 800939e:	4605      	mov	r5, r0
 80093a0:	f04f 0b00 	mov.w	fp, #0
 80093a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80093a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093aa:	781a      	ldrb	r2, [r3, #0]
 80093ac:	2a2b      	cmp	r2, #43	; 0x2b
 80093ae:	d04e      	beq.n	800944e <_strtod_l+0xd6>
 80093b0:	d83b      	bhi.n	800942a <_strtod_l+0xb2>
 80093b2:	2a0d      	cmp	r2, #13
 80093b4:	d834      	bhi.n	8009420 <_strtod_l+0xa8>
 80093b6:	2a08      	cmp	r2, #8
 80093b8:	d834      	bhi.n	8009424 <_strtod_l+0xac>
 80093ba:	2a00      	cmp	r2, #0
 80093bc:	d03e      	beq.n	800943c <_strtod_l+0xc4>
 80093be:	2300      	movs	r3, #0
 80093c0:	930a      	str	r3, [sp, #40]	; 0x28
 80093c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80093c4:	7833      	ldrb	r3, [r6, #0]
 80093c6:	2b30      	cmp	r3, #48	; 0x30
 80093c8:	f040 80b0 	bne.w	800952c <_strtod_l+0x1b4>
 80093cc:	7873      	ldrb	r3, [r6, #1]
 80093ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093d2:	2b58      	cmp	r3, #88	; 0x58
 80093d4:	d168      	bne.n	80094a8 <_strtod_l+0x130>
 80093d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	ab18      	add	r3, sp, #96	; 0x60
 80093dc:	9702      	str	r7, [sp, #8]
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	4a8d      	ldr	r2, [pc, #564]	; (8009618 <_strtod_l+0x2a0>)
 80093e2:	ab19      	add	r3, sp, #100	; 0x64
 80093e4:	a917      	add	r1, sp, #92	; 0x5c
 80093e6:	4620      	mov	r0, r4
 80093e8:	f001 fd70 	bl	800aecc <__gethex>
 80093ec:	f010 0707 	ands.w	r7, r0, #7
 80093f0:	4605      	mov	r5, r0
 80093f2:	d005      	beq.n	8009400 <_strtod_l+0x88>
 80093f4:	2f06      	cmp	r7, #6
 80093f6:	d12c      	bne.n	8009452 <_strtod_l+0xda>
 80093f8:	3601      	adds	r6, #1
 80093fa:	2300      	movs	r3, #0
 80093fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80093fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009400:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009402:	2b00      	cmp	r3, #0
 8009404:	f040 8590 	bne.w	8009f28 <_strtod_l+0xbb0>
 8009408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800940a:	b1eb      	cbz	r3, 8009448 <_strtod_l+0xd0>
 800940c:	4652      	mov	r2, sl
 800940e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009412:	ec43 2b10 	vmov	d0, r2, r3
 8009416:	b01d      	add	sp, #116	; 0x74
 8009418:	ecbd 8b02 	vpop	{d8}
 800941c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009420:	2a20      	cmp	r2, #32
 8009422:	d1cc      	bne.n	80093be <_strtod_l+0x46>
 8009424:	3301      	adds	r3, #1
 8009426:	9317      	str	r3, [sp, #92]	; 0x5c
 8009428:	e7be      	b.n	80093a8 <_strtod_l+0x30>
 800942a:	2a2d      	cmp	r2, #45	; 0x2d
 800942c:	d1c7      	bne.n	80093be <_strtod_l+0x46>
 800942e:	2201      	movs	r2, #1
 8009430:	920a      	str	r2, [sp, #40]	; 0x28
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	9217      	str	r2, [sp, #92]	; 0x5c
 8009436:	785b      	ldrb	r3, [r3, #1]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1c2      	bne.n	80093c2 <_strtod_l+0x4a>
 800943c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800943e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009442:	2b00      	cmp	r3, #0
 8009444:	f040 856e 	bne.w	8009f24 <_strtod_l+0xbac>
 8009448:	4652      	mov	r2, sl
 800944a:	465b      	mov	r3, fp
 800944c:	e7e1      	b.n	8009412 <_strtod_l+0x9a>
 800944e:	2200      	movs	r2, #0
 8009450:	e7ee      	b.n	8009430 <_strtod_l+0xb8>
 8009452:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009454:	b13a      	cbz	r2, 8009466 <_strtod_l+0xee>
 8009456:	2135      	movs	r1, #53	; 0x35
 8009458:	a81a      	add	r0, sp, #104	; 0x68
 800945a:	f002 fcfa 	bl	800be52 <__copybits>
 800945e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009460:	4620      	mov	r0, r4
 8009462:	f002 f8b9 	bl	800b5d8 <_Bfree>
 8009466:	3f01      	subs	r7, #1
 8009468:	2f04      	cmp	r7, #4
 800946a:	d806      	bhi.n	800947a <_strtod_l+0x102>
 800946c:	e8df f007 	tbb	[pc, r7]
 8009470:	1714030a 	.word	0x1714030a
 8009474:	0a          	.byte	0x0a
 8009475:	00          	.byte	0x00
 8009476:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800947a:	0728      	lsls	r0, r5, #28
 800947c:	d5c0      	bpl.n	8009400 <_strtod_l+0x88>
 800947e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009482:	e7bd      	b.n	8009400 <_strtod_l+0x88>
 8009484:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009488:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800948a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800948e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009492:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009496:	e7f0      	b.n	800947a <_strtod_l+0x102>
 8009498:	f8df b180 	ldr.w	fp, [pc, #384]	; 800961c <_strtod_l+0x2a4>
 800949c:	e7ed      	b.n	800947a <_strtod_l+0x102>
 800949e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80094a2:	f04f 3aff 	mov.w	sl, #4294967295
 80094a6:	e7e8      	b.n	800947a <_strtod_l+0x102>
 80094a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80094ae:	785b      	ldrb	r3, [r3, #1]
 80094b0:	2b30      	cmp	r3, #48	; 0x30
 80094b2:	d0f9      	beq.n	80094a8 <_strtod_l+0x130>
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d0a3      	beq.n	8009400 <_strtod_l+0x88>
 80094b8:	2301      	movs	r3, #1
 80094ba:	f04f 0900 	mov.w	r9, #0
 80094be:	9304      	str	r3, [sp, #16]
 80094c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094c2:	9308      	str	r3, [sp, #32]
 80094c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80094c8:	464f      	mov	r7, r9
 80094ca:	220a      	movs	r2, #10
 80094cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80094ce:	7806      	ldrb	r6, [r0, #0]
 80094d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80094d4:	b2d9      	uxtb	r1, r3
 80094d6:	2909      	cmp	r1, #9
 80094d8:	d92a      	bls.n	8009530 <_strtod_l+0x1b8>
 80094da:	9905      	ldr	r1, [sp, #20]
 80094dc:	462a      	mov	r2, r5
 80094de:	f003 fad7 	bl	800ca90 <strncmp>
 80094e2:	b398      	cbz	r0, 800954c <_strtod_l+0x1d4>
 80094e4:	2000      	movs	r0, #0
 80094e6:	4632      	mov	r2, r6
 80094e8:	463d      	mov	r5, r7
 80094ea:	9005      	str	r0, [sp, #20]
 80094ec:	4603      	mov	r3, r0
 80094ee:	2a65      	cmp	r2, #101	; 0x65
 80094f0:	d001      	beq.n	80094f6 <_strtod_l+0x17e>
 80094f2:	2a45      	cmp	r2, #69	; 0x45
 80094f4:	d118      	bne.n	8009528 <_strtod_l+0x1b0>
 80094f6:	b91d      	cbnz	r5, 8009500 <_strtod_l+0x188>
 80094f8:	9a04      	ldr	r2, [sp, #16]
 80094fa:	4302      	orrs	r2, r0
 80094fc:	d09e      	beq.n	800943c <_strtod_l+0xc4>
 80094fe:	2500      	movs	r5, #0
 8009500:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009504:	f108 0201 	add.w	r2, r8, #1
 8009508:	9217      	str	r2, [sp, #92]	; 0x5c
 800950a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800950e:	2a2b      	cmp	r2, #43	; 0x2b
 8009510:	d075      	beq.n	80095fe <_strtod_l+0x286>
 8009512:	2a2d      	cmp	r2, #45	; 0x2d
 8009514:	d07b      	beq.n	800960e <_strtod_l+0x296>
 8009516:	f04f 0c00 	mov.w	ip, #0
 800951a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800951e:	2909      	cmp	r1, #9
 8009520:	f240 8082 	bls.w	8009628 <_strtod_l+0x2b0>
 8009524:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009528:	2600      	movs	r6, #0
 800952a:	e09d      	b.n	8009668 <_strtod_l+0x2f0>
 800952c:	2300      	movs	r3, #0
 800952e:	e7c4      	b.n	80094ba <_strtod_l+0x142>
 8009530:	2f08      	cmp	r7, #8
 8009532:	bfd8      	it	le
 8009534:	9907      	ldrle	r1, [sp, #28]
 8009536:	f100 0001 	add.w	r0, r0, #1
 800953a:	bfda      	itte	le
 800953c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009540:	9307      	strle	r3, [sp, #28]
 8009542:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009546:	3701      	adds	r7, #1
 8009548:	9017      	str	r0, [sp, #92]	; 0x5c
 800954a:	e7bf      	b.n	80094cc <_strtod_l+0x154>
 800954c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800954e:	195a      	adds	r2, r3, r5
 8009550:	9217      	str	r2, [sp, #92]	; 0x5c
 8009552:	5d5a      	ldrb	r2, [r3, r5]
 8009554:	2f00      	cmp	r7, #0
 8009556:	d037      	beq.n	80095c8 <_strtod_l+0x250>
 8009558:	9005      	str	r0, [sp, #20]
 800955a:	463d      	mov	r5, r7
 800955c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009560:	2b09      	cmp	r3, #9
 8009562:	d912      	bls.n	800958a <_strtod_l+0x212>
 8009564:	2301      	movs	r3, #1
 8009566:	e7c2      	b.n	80094ee <_strtod_l+0x176>
 8009568:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800956a:	1c5a      	adds	r2, r3, #1
 800956c:	9217      	str	r2, [sp, #92]	; 0x5c
 800956e:	785a      	ldrb	r2, [r3, #1]
 8009570:	3001      	adds	r0, #1
 8009572:	2a30      	cmp	r2, #48	; 0x30
 8009574:	d0f8      	beq.n	8009568 <_strtod_l+0x1f0>
 8009576:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800957a:	2b08      	cmp	r3, #8
 800957c:	f200 84d9 	bhi.w	8009f32 <_strtod_l+0xbba>
 8009580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009582:	9005      	str	r0, [sp, #20]
 8009584:	2000      	movs	r0, #0
 8009586:	9308      	str	r3, [sp, #32]
 8009588:	4605      	mov	r5, r0
 800958a:	3a30      	subs	r2, #48	; 0x30
 800958c:	f100 0301 	add.w	r3, r0, #1
 8009590:	d014      	beq.n	80095bc <_strtod_l+0x244>
 8009592:	9905      	ldr	r1, [sp, #20]
 8009594:	4419      	add	r1, r3
 8009596:	9105      	str	r1, [sp, #20]
 8009598:	462b      	mov	r3, r5
 800959a:	eb00 0e05 	add.w	lr, r0, r5
 800959e:	210a      	movs	r1, #10
 80095a0:	4573      	cmp	r3, lr
 80095a2:	d113      	bne.n	80095cc <_strtod_l+0x254>
 80095a4:	182b      	adds	r3, r5, r0
 80095a6:	2b08      	cmp	r3, #8
 80095a8:	f105 0501 	add.w	r5, r5, #1
 80095ac:	4405      	add	r5, r0
 80095ae:	dc1c      	bgt.n	80095ea <_strtod_l+0x272>
 80095b0:	9907      	ldr	r1, [sp, #28]
 80095b2:	230a      	movs	r3, #10
 80095b4:	fb03 2301 	mla	r3, r3, r1, r2
 80095b8:	9307      	str	r3, [sp, #28]
 80095ba:	2300      	movs	r3, #0
 80095bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095be:	1c51      	adds	r1, r2, #1
 80095c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80095c2:	7852      	ldrb	r2, [r2, #1]
 80095c4:	4618      	mov	r0, r3
 80095c6:	e7c9      	b.n	800955c <_strtod_l+0x1e4>
 80095c8:	4638      	mov	r0, r7
 80095ca:	e7d2      	b.n	8009572 <_strtod_l+0x1fa>
 80095cc:	2b08      	cmp	r3, #8
 80095ce:	dc04      	bgt.n	80095da <_strtod_l+0x262>
 80095d0:	9e07      	ldr	r6, [sp, #28]
 80095d2:	434e      	muls	r6, r1
 80095d4:	9607      	str	r6, [sp, #28]
 80095d6:	3301      	adds	r3, #1
 80095d8:	e7e2      	b.n	80095a0 <_strtod_l+0x228>
 80095da:	f103 0c01 	add.w	ip, r3, #1
 80095de:	f1bc 0f10 	cmp.w	ip, #16
 80095e2:	bfd8      	it	le
 80095e4:	fb01 f909 	mulle.w	r9, r1, r9
 80095e8:	e7f5      	b.n	80095d6 <_strtod_l+0x25e>
 80095ea:	2d10      	cmp	r5, #16
 80095ec:	bfdc      	itt	le
 80095ee:	230a      	movle	r3, #10
 80095f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80095f4:	e7e1      	b.n	80095ba <_strtod_l+0x242>
 80095f6:	2300      	movs	r3, #0
 80095f8:	9305      	str	r3, [sp, #20]
 80095fa:	2301      	movs	r3, #1
 80095fc:	e77c      	b.n	80094f8 <_strtod_l+0x180>
 80095fe:	f04f 0c00 	mov.w	ip, #0
 8009602:	f108 0202 	add.w	r2, r8, #2
 8009606:	9217      	str	r2, [sp, #92]	; 0x5c
 8009608:	f898 2002 	ldrb.w	r2, [r8, #2]
 800960c:	e785      	b.n	800951a <_strtod_l+0x1a2>
 800960e:	f04f 0c01 	mov.w	ip, #1
 8009612:	e7f6      	b.n	8009602 <_strtod_l+0x28a>
 8009614:	08010610 	.word	0x08010610
 8009618:	080103c8 	.word	0x080103c8
 800961c:	7ff00000 	.word	0x7ff00000
 8009620:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009622:	1c51      	adds	r1, r2, #1
 8009624:	9117      	str	r1, [sp, #92]	; 0x5c
 8009626:	7852      	ldrb	r2, [r2, #1]
 8009628:	2a30      	cmp	r2, #48	; 0x30
 800962a:	d0f9      	beq.n	8009620 <_strtod_l+0x2a8>
 800962c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009630:	2908      	cmp	r1, #8
 8009632:	f63f af79 	bhi.w	8009528 <_strtod_l+0x1b0>
 8009636:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800963a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800963c:	9206      	str	r2, [sp, #24]
 800963e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009640:	1c51      	adds	r1, r2, #1
 8009642:	9117      	str	r1, [sp, #92]	; 0x5c
 8009644:	7852      	ldrb	r2, [r2, #1]
 8009646:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800964a:	2e09      	cmp	r6, #9
 800964c:	d937      	bls.n	80096be <_strtod_l+0x346>
 800964e:	9e06      	ldr	r6, [sp, #24]
 8009650:	1b89      	subs	r1, r1, r6
 8009652:	2908      	cmp	r1, #8
 8009654:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009658:	dc02      	bgt.n	8009660 <_strtod_l+0x2e8>
 800965a:	4576      	cmp	r6, lr
 800965c:	bfa8      	it	ge
 800965e:	4676      	movge	r6, lr
 8009660:	f1bc 0f00 	cmp.w	ip, #0
 8009664:	d000      	beq.n	8009668 <_strtod_l+0x2f0>
 8009666:	4276      	negs	r6, r6
 8009668:	2d00      	cmp	r5, #0
 800966a:	d14d      	bne.n	8009708 <_strtod_l+0x390>
 800966c:	9904      	ldr	r1, [sp, #16]
 800966e:	4301      	orrs	r1, r0
 8009670:	f47f aec6 	bne.w	8009400 <_strtod_l+0x88>
 8009674:	2b00      	cmp	r3, #0
 8009676:	f47f aee1 	bne.w	800943c <_strtod_l+0xc4>
 800967a:	2a69      	cmp	r2, #105	; 0x69
 800967c:	d027      	beq.n	80096ce <_strtod_l+0x356>
 800967e:	dc24      	bgt.n	80096ca <_strtod_l+0x352>
 8009680:	2a49      	cmp	r2, #73	; 0x49
 8009682:	d024      	beq.n	80096ce <_strtod_l+0x356>
 8009684:	2a4e      	cmp	r2, #78	; 0x4e
 8009686:	f47f aed9 	bne.w	800943c <_strtod_l+0xc4>
 800968a:	499f      	ldr	r1, [pc, #636]	; (8009908 <_strtod_l+0x590>)
 800968c:	a817      	add	r0, sp, #92	; 0x5c
 800968e:	f001 fe75 	bl	800b37c <__match>
 8009692:	2800      	cmp	r0, #0
 8009694:	f43f aed2 	beq.w	800943c <_strtod_l+0xc4>
 8009698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	2b28      	cmp	r3, #40	; 0x28
 800969e:	d12d      	bne.n	80096fc <_strtod_l+0x384>
 80096a0:	499a      	ldr	r1, [pc, #616]	; (800990c <_strtod_l+0x594>)
 80096a2:	aa1a      	add	r2, sp, #104	; 0x68
 80096a4:	a817      	add	r0, sp, #92	; 0x5c
 80096a6:	f001 fe7d 	bl	800b3a4 <__hexnan>
 80096aa:	2805      	cmp	r0, #5
 80096ac:	d126      	bne.n	80096fc <_strtod_l+0x384>
 80096ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80096b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80096b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80096bc:	e6a0      	b.n	8009400 <_strtod_l+0x88>
 80096be:	210a      	movs	r1, #10
 80096c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80096c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80096c8:	e7b9      	b.n	800963e <_strtod_l+0x2c6>
 80096ca:	2a6e      	cmp	r2, #110	; 0x6e
 80096cc:	e7db      	b.n	8009686 <_strtod_l+0x30e>
 80096ce:	4990      	ldr	r1, [pc, #576]	; (8009910 <_strtod_l+0x598>)
 80096d0:	a817      	add	r0, sp, #92	; 0x5c
 80096d2:	f001 fe53 	bl	800b37c <__match>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	f43f aeb0 	beq.w	800943c <_strtod_l+0xc4>
 80096dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096de:	498d      	ldr	r1, [pc, #564]	; (8009914 <_strtod_l+0x59c>)
 80096e0:	3b01      	subs	r3, #1
 80096e2:	a817      	add	r0, sp, #92	; 0x5c
 80096e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80096e6:	f001 fe49 	bl	800b37c <__match>
 80096ea:	b910      	cbnz	r0, 80096f2 <_strtod_l+0x37a>
 80096ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096ee:	3301      	adds	r3, #1
 80096f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80096f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009924 <_strtod_l+0x5ac>
 80096f6:	f04f 0a00 	mov.w	sl, #0
 80096fa:	e681      	b.n	8009400 <_strtod_l+0x88>
 80096fc:	4886      	ldr	r0, [pc, #536]	; (8009918 <_strtod_l+0x5a0>)
 80096fe:	f003 f977 	bl	800c9f0 <nan>
 8009702:	ec5b ab10 	vmov	sl, fp, d0
 8009706:	e67b      	b.n	8009400 <_strtod_l+0x88>
 8009708:	9b05      	ldr	r3, [sp, #20]
 800970a:	9807      	ldr	r0, [sp, #28]
 800970c:	1af3      	subs	r3, r6, r3
 800970e:	2f00      	cmp	r7, #0
 8009710:	bf08      	it	eq
 8009712:	462f      	moveq	r7, r5
 8009714:	2d10      	cmp	r5, #16
 8009716:	9306      	str	r3, [sp, #24]
 8009718:	46a8      	mov	r8, r5
 800971a:	bfa8      	it	ge
 800971c:	f04f 0810 	movge.w	r8, #16
 8009720:	f7f6 ff08 	bl	8000534 <__aeabi_ui2d>
 8009724:	2d09      	cmp	r5, #9
 8009726:	4682      	mov	sl, r0
 8009728:	468b      	mov	fp, r1
 800972a:	dd13      	ble.n	8009754 <_strtod_l+0x3dc>
 800972c:	4b7b      	ldr	r3, [pc, #492]	; (800991c <_strtod_l+0x5a4>)
 800972e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009732:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009736:	f7f6 ff77 	bl	8000628 <__aeabi_dmul>
 800973a:	4682      	mov	sl, r0
 800973c:	4648      	mov	r0, r9
 800973e:	468b      	mov	fp, r1
 8009740:	f7f6 fef8 	bl	8000534 <__aeabi_ui2d>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4650      	mov	r0, sl
 800974a:	4659      	mov	r1, fp
 800974c:	f7f6 fdb6 	bl	80002bc <__adddf3>
 8009750:	4682      	mov	sl, r0
 8009752:	468b      	mov	fp, r1
 8009754:	2d0f      	cmp	r5, #15
 8009756:	dc38      	bgt.n	80097ca <_strtod_l+0x452>
 8009758:	9b06      	ldr	r3, [sp, #24]
 800975a:	2b00      	cmp	r3, #0
 800975c:	f43f ae50 	beq.w	8009400 <_strtod_l+0x88>
 8009760:	dd24      	ble.n	80097ac <_strtod_l+0x434>
 8009762:	2b16      	cmp	r3, #22
 8009764:	dc0b      	bgt.n	800977e <_strtod_l+0x406>
 8009766:	496d      	ldr	r1, [pc, #436]	; (800991c <_strtod_l+0x5a4>)
 8009768:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800976c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009770:	4652      	mov	r2, sl
 8009772:	465b      	mov	r3, fp
 8009774:	f7f6 ff58 	bl	8000628 <__aeabi_dmul>
 8009778:	4682      	mov	sl, r0
 800977a:	468b      	mov	fp, r1
 800977c:	e640      	b.n	8009400 <_strtod_l+0x88>
 800977e:	9a06      	ldr	r2, [sp, #24]
 8009780:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009784:	4293      	cmp	r3, r2
 8009786:	db20      	blt.n	80097ca <_strtod_l+0x452>
 8009788:	4c64      	ldr	r4, [pc, #400]	; (800991c <_strtod_l+0x5a4>)
 800978a:	f1c5 050f 	rsb	r5, r5, #15
 800978e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009792:	4652      	mov	r2, sl
 8009794:	465b      	mov	r3, fp
 8009796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800979a:	f7f6 ff45 	bl	8000628 <__aeabi_dmul>
 800979e:	9b06      	ldr	r3, [sp, #24]
 80097a0:	1b5d      	subs	r5, r3, r5
 80097a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80097a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80097aa:	e7e3      	b.n	8009774 <_strtod_l+0x3fc>
 80097ac:	9b06      	ldr	r3, [sp, #24]
 80097ae:	3316      	adds	r3, #22
 80097b0:	db0b      	blt.n	80097ca <_strtod_l+0x452>
 80097b2:	9b05      	ldr	r3, [sp, #20]
 80097b4:	1b9e      	subs	r6, r3, r6
 80097b6:	4b59      	ldr	r3, [pc, #356]	; (800991c <_strtod_l+0x5a4>)
 80097b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80097bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097c0:	4650      	mov	r0, sl
 80097c2:	4659      	mov	r1, fp
 80097c4:	f7f7 f85a 	bl	800087c <__aeabi_ddiv>
 80097c8:	e7d6      	b.n	8009778 <_strtod_l+0x400>
 80097ca:	9b06      	ldr	r3, [sp, #24]
 80097cc:	eba5 0808 	sub.w	r8, r5, r8
 80097d0:	4498      	add	r8, r3
 80097d2:	f1b8 0f00 	cmp.w	r8, #0
 80097d6:	dd74      	ble.n	80098c2 <_strtod_l+0x54a>
 80097d8:	f018 030f 	ands.w	r3, r8, #15
 80097dc:	d00a      	beq.n	80097f4 <_strtod_l+0x47c>
 80097de:	494f      	ldr	r1, [pc, #316]	; (800991c <_strtod_l+0x5a4>)
 80097e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097e4:	4652      	mov	r2, sl
 80097e6:	465b      	mov	r3, fp
 80097e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097ec:	f7f6 ff1c 	bl	8000628 <__aeabi_dmul>
 80097f0:	4682      	mov	sl, r0
 80097f2:	468b      	mov	fp, r1
 80097f4:	f038 080f 	bics.w	r8, r8, #15
 80097f8:	d04f      	beq.n	800989a <_strtod_l+0x522>
 80097fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80097fe:	dd22      	ble.n	8009846 <_strtod_l+0x4ce>
 8009800:	2500      	movs	r5, #0
 8009802:	462e      	mov	r6, r5
 8009804:	9507      	str	r5, [sp, #28]
 8009806:	9505      	str	r5, [sp, #20]
 8009808:	2322      	movs	r3, #34	; 0x22
 800980a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009924 <_strtod_l+0x5ac>
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	f04f 0a00 	mov.w	sl, #0
 8009814:	9b07      	ldr	r3, [sp, #28]
 8009816:	2b00      	cmp	r3, #0
 8009818:	f43f adf2 	beq.w	8009400 <_strtod_l+0x88>
 800981c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800981e:	4620      	mov	r0, r4
 8009820:	f001 feda 	bl	800b5d8 <_Bfree>
 8009824:	9905      	ldr	r1, [sp, #20]
 8009826:	4620      	mov	r0, r4
 8009828:	f001 fed6 	bl	800b5d8 <_Bfree>
 800982c:	4631      	mov	r1, r6
 800982e:	4620      	mov	r0, r4
 8009830:	f001 fed2 	bl	800b5d8 <_Bfree>
 8009834:	9907      	ldr	r1, [sp, #28]
 8009836:	4620      	mov	r0, r4
 8009838:	f001 fece 	bl	800b5d8 <_Bfree>
 800983c:	4629      	mov	r1, r5
 800983e:	4620      	mov	r0, r4
 8009840:	f001 feca 	bl	800b5d8 <_Bfree>
 8009844:	e5dc      	b.n	8009400 <_strtod_l+0x88>
 8009846:	4b36      	ldr	r3, [pc, #216]	; (8009920 <_strtod_l+0x5a8>)
 8009848:	9304      	str	r3, [sp, #16]
 800984a:	2300      	movs	r3, #0
 800984c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009850:	4650      	mov	r0, sl
 8009852:	4659      	mov	r1, fp
 8009854:	4699      	mov	r9, r3
 8009856:	f1b8 0f01 	cmp.w	r8, #1
 800985a:	dc21      	bgt.n	80098a0 <_strtod_l+0x528>
 800985c:	b10b      	cbz	r3, 8009862 <_strtod_l+0x4ea>
 800985e:	4682      	mov	sl, r0
 8009860:	468b      	mov	fp, r1
 8009862:	4b2f      	ldr	r3, [pc, #188]	; (8009920 <_strtod_l+0x5a8>)
 8009864:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009868:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800986c:	4652      	mov	r2, sl
 800986e:	465b      	mov	r3, fp
 8009870:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009874:	f7f6 fed8 	bl	8000628 <__aeabi_dmul>
 8009878:	4b2a      	ldr	r3, [pc, #168]	; (8009924 <_strtod_l+0x5ac>)
 800987a:	460a      	mov	r2, r1
 800987c:	400b      	ands	r3, r1
 800987e:	492a      	ldr	r1, [pc, #168]	; (8009928 <_strtod_l+0x5b0>)
 8009880:	428b      	cmp	r3, r1
 8009882:	4682      	mov	sl, r0
 8009884:	d8bc      	bhi.n	8009800 <_strtod_l+0x488>
 8009886:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800988a:	428b      	cmp	r3, r1
 800988c:	bf86      	itte	hi
 800988e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800992c <_strtod_l+0x5b4>
 8009892:	f04f 3aff 	movhi.w	sl, #4294967295
 8009896:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800989a:	2300      	movs	r3, #0
 800989c:	9304      	str	r3, [sp, #16]
 800989e:	e084      	b.n	80099aa <_strtod_l+0x632>
 80098a0:	f018 0f01 	tst.w	r8, #1
 80098a4:	d005      	beq.n	80098b2 <_strtod_l+0x53a>
 80098a6:	9b04      	ldr	r3, [sp, #16]
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f7f6 febc 	bl	8000628 <__aeabi_dmul>
 80098b0:	2301      	movs	r3, #1
 80098b2:	9a04      	ldr	r2, [sp, #16]
 80098b4:	3208      	adds	r2, #8
 80098b6:	f109 0901 	add.w	r9, r9, #1
 80098ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80098be:	9204      	str	r2, [sp, #16]
 80098c0:	e7c9      	b.n	8009856 <_strtod_l+0x4de>
 80098c2:	d0ea      	beq.n	800989a <_strtod_l+0x522>
 80098c4:	f1c8 0800 	rsb	r8, r8, #0
 80098c8:	f018 020f 	ands.w	r2, r8, #15
 80098cc:	d00a      	beq.n	80098e4 <_strtod_l+0x56c>
 80098ce:	4b13      	ldr	r3, [pc, #76]	; (800991c <_strtod_l+0x5a4>)
 80098d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098d4:	4650      	mov	r0, sl
 80098d6:	4659      	mov	r1, fp
 80098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098dc:	f7f6 ffce 	bl	800087c <__aeabi_ddiv>
 80098e0:	4682      	mov	sl, r0
 80098e2:	468b      	mov	fp, r1
 80098e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80098e8:	d0d7      	beq.n	800989a <_strtod_l+0x522>
 80098ea:	f1b8 0f1f 	cmp.w	r8, #31
 80098ee:	dd1f      	ble.n	8009930 <_strtod_l+0x5b8>
 80098f0:	2500      	movs	r5, #0
 80098f2:	462e      	mov	r6, r5
 80098f4:	9507      	str	r5, [sp, #28]
 80098f6:	9505      	str	r5, [sp, #20]
 80098f8:	2322      	movs	r3, #34	; 0x22
 80098fa:	f04f 0a00 	mov.w	sl, #0
 80098fe:	f04f 0b00 	mov.w	fp, #0
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	e786      	b.n	8009814 <_strtod_l+0x49c>
 8009906:	bf00      	nop
 8009908:	0801039d 	.word	0x0801039d
 800990c:	080103dc 	.word	0x080103dc
 8009910:	08010395 	.word	0x08010395
 8009914:	0801051c 	.word	0x0801051c
 8009918:	080107e3 	.word	0x080107e3
 800991c:	080106a8 	.word	0x080106a8
 8009920:	08010680 	.word	0x08010680
 8009924:	7ff00000 	.word	0x7ff00000
 8009928:	7ca00000 	.word	0x7ca00000
 800992c:	7fefffff 	.word	0x7fefffff
 8009930:	f018 0310 	ands.w	r3, r8, #16
 8009934:	bf18      	it	ne
 8009936:	236a      	movne	r3, #106	; 0x6a
 8009938:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009ce8 <_strtod_l+0x970>
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	4650      	mov	r0, sl
 8009940:	4659      	mov	r1, fp
 8009942:	2300      	movs	r3, #0
 8009944:	f018 0f01 	tst.w	r8, #1
 8009948:	d004      	beq.n	8009954 <_strtod_l+0x5dc>
 800994a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800994e:	f7f6 fe6b 	bl	8000628 <__aeabi_dmul>
 8009952:	2301      	movs	r3, #1
 8009954:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009958:	f109 0908 	add.w	r9, r9, #8
 800995c:	d1f2      	bne.n	8009944 <_strtod_l+0x5cc>
 800995e:	b10b      	cbz	r3, 8009964 <_strtod_l+0x5ec>
 8009960:	4682      	mov	sl, r0
 8009962:	468b      	mov	fp, r1
 8009964:	9b04      	ldr	r3, [sp, #16]
 8009966:	b1c3      	cbz	r3, 800999a <_strtod_l+0x622>
 8009968:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800996c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009970:	2b00      	cmp	r3, #0
 8009972:	4659      	mov	r1, fp
 8009974:	dd11      	ble.n	800999a <_strtod_l+0x622>
 8009976:	2b1f      	cmp	r3, #31
 8009978:	f340 8124 	ble.w	8009bc4 <_strtod_l+0x84c>
 800997c:	2b34      	cmp	r3, #52	; 0x34
 800997e:	bfde      	ittt	le
 8009980:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009984:	f04f 33ff 	movle.w	r3, #4294967295
 8009988:	fa03 f202 	lslle.w	r2, r3, r2
 800998c:	f04f 0a00 	mov.w	sl, #0
 8009990:	bfcc      	ite	gt
 8009992:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009996:	ea02 0b01 	andle.w	fp, r2, r1
 800999a:	2200      	movs	r2, #0
 800999c:	2300      	movs	r3, #0
 800999e:	4650      	mov	r0, sl
 80099a0:	4659      	mov	r1, fp
 80099a2:	f7f7 f8a9 	bl	8000af8 <__aeabi_dcmpeq>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d1a2      	bne.n	80098f0 <_strtod_l+0x578>
 80099aa:	9b07      	ldr	r3, [sp, #28]
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	9908      	ldr	r1, [sp, #32]
 80099b0:	462b      	mov	r3, r5
 80099b2:	463a      	mov	r2, r7
 80099b4:	4620      	mov	r0, r4
 80099b6:	f001 fe77 	bl	800b6a8 <__s2b>
 80099ba:	9007      	str	r0, [sp, #28]
 80099bc:	2800      	cmp	r0, #0
 80099be:	f43f af1f 	beq.w	8009800 <_strtod_l+0x488>
 80099c2:	9b05      	ldr	r3, [sp, #20]
 80099c4:	1b9e      	subs	r6, r3, r6
 80099c6:	9b06      	ldr	r3, [sp, #24]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bfb4      	ite	lt
 80099cc:	4633      	movlt	r3, r6
 80099ce:	2300      	movge	r3, #0
 80099d0:	930c      	str	r3, [sp, #48]	; 0x30
 80099d2:	9b06      	ldr	r3, [sp, #24]
 80099d4:	2500      	movs	r5, #0
 80099d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80099da:	9312      	str	r3, [sp, #72]	; 0x48
 80099dc:	462e      	mov	r6, r5
 80099de:	9b07      	ldr	r3, [sp, #28]
 80099e0:	4620      	mov	r0, r4
 80099e2:	6859      	ldr	r1, [r3, #4]
 80099e4:	f001 fdb8 	bl	800b558 <_Balloc>
 80099e8:	9005      	str	r0, [sp, #20]
 80099ea:	2800      	cmp	r0, #0
 80099ec:	f43f af0c 	beq.w	8009808 <_strtod_l+0x490>
 80099f0:	9b07      	ldr	r3, [sp, #28]
 80099f2:	691a      	ldr	r2, [r3, #16]
 80099f4:	3202      	adds	r2, #2
 80099f6:	f103 010c 	add.w	r1, r3, #12
 80099fa:	0092      	lsls	r2, r2, #2
 80099fc:	300c      	adds	r0, #12
 80099fe:	f001 fd9d 	bl	800b53c <memcpy>
 8009a02:	ec4b ab10 	vmov	d0, sl, fp
 8009a06:	aa1a      	add	r2, sp, #104	; 0x68
 8009a08:	a919      	add	r1, sp, #100	; 0x64
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f002 f992 	bl	800bd34 <__d2b>
 8009a10:	ec4b ab18 	vmov	d8, sl, fp
 8009a14:	9018      	str	r0, [sp, #96]	; 0x60
 8009a16:	2800      	cmp	r0, #0
 8009a18:	f43f aef6 	beq.w	8009808 <_strtod_l+0x490>
 8009a1c:	2101      	movs	r1, #1
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f001 fedc 	bl	800b7dc <__i2b>
 8009a24:	4606      	mov	r6, r0
 8009a26:	2800      	cmp	r0, #0
 8009a28:	f43f aeee 	beq.w	8009808 <_strtod_l+0x490>
 8009a2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a2e:	9904      	ldr	r1, [sp, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	bfab      	itete	ge
 8009a34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009a36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009a38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009a3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009a3e:	bfac      	ite	ge
 8009a40:	eb03 0902 	addge.w	r9, r3, r2
 8009a44:	1ad7      	sublt	r7, r2, r3
 8009a46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009a48:	eba3 0801 	sub.w	r8, r3, r1
 8009a4c:	4490      	add	r8, r2
 8009a4e:	4ba1      	ldr	r3, [pc, #644]	; (8009cd4 <_strtod_l+0x95c>)
 8009a50:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a54:	4598      	cmp	r8, r3
 8009a56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a5a:	f280 80c7 	bge.w	8009bec <_strtod_l+0x874>
 8009a5e:	eba3 0308 	sub.w	r3, r3, r8
 8009a62:	2b1f      	cmp	r3, #31
 8009a64:	eba2 0203 	sub.w	r2, r2, r3
 8009a68:	f04f 0101 	mov.w	r1, #1
 8009a6c:	f300 80b1 	bgt.w	8009bd2 <_strtod_l+0x85a>
 8009a70:	fa01 f303 	lsl.w	r3, r1, r3
 8009a74:	930d      	str	r3, [sp, #52]	; 0x34
 8009a76:	2300      	movs	r3, #0
 8009a78:	9308      	str	r3, [sp, #32]
 8009a7a:	eb09 0802 	add.w	r8, r9, r2
 8009a7e:	9b04      	ldr	r3, [sp, #16]
 8009a80:	45c1      	cmp	r9, r8
 8009a82:	4417      	add	r7, r2
 8009a84:	441f      	add	r7, r3
 8009a86:	464b      	mov	r3, r9
 8009a88:	bfa8      	it	ge
 8009a8a:	4643      	movge	r3, r8
 8009a8c:	42bb      	cmp	r3, r7
 8009a8e:	bfa8      	it	ge
 8009a90:	463b      	movge	r3, r7
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	bfc2      	ittt	gt
 8009a96:	eba8 0803 	subgt.w	r8, r8, r3
 8009a9a:	1aff      	subgt	r7, r7, r3
 8009a9c:	eba9 0903 	subgt.w	r9, r9, r3
 8009aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	dd17      	ble.n	8009ad6 <_strtod_l+0x75e>
 8009aa6:	4631      	mov	r1, r6
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f001 ff56 	bl	800b95c <__pow5mult>
 8009ab0:	4606      	mov	r6, r0
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	f43f aea8 	beq.w	8009808 <_strtod_l+0x490>
 8009ab8:	4601      	mov	r1, r0
 8009aba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009abc:	4620      	mov	r0, r4
 8009abe:	f001 fea3 	bl	800b808 <__multiply>
 8009ac2:	900b      	str	r0, [sp, #44]	; 0x2c
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	f43f ae9f 	beq.w	8009808 <_strtod_l+0x490>
 8009aca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009acc:	4620      	mov	r0, r4
 8009ace:	f001 fd83 	bl	800b5d8 <_Bfree>
 8009ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ad4:	9318      	str	r3, [sp, #96]	; 0x60
 8009ad6:	f1b8 0f00 	cmp.w	r8, #0
 8009ada:	f300 808c 	bgt.w	8009bf6 <_strtod_l+0x87e>
 8009ade:	9b06      	ldr	r3, [sp, #24]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	dd08      	ble.n	8009af6 <_strtod_l+0x77e>
 8009ae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ae6:	9905      	ldr	r1, [sp, #20]
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f001 ff37 	bl	800b95c <__pow5mult>
 8009aee:	9005      	str	r0, [sp, #20]
 8009af0:	2800      	cmp	r0, #0
 8009af2:	f43f ae89 	beq.w	8009808 <_strtod_l+0x490>
 8009af6:	2f00      	cmp	r7, #0
 8009af8:	dd08      	ble.n	8009b0c <_strtod_l+0x794>
 8009afa:	9905      	ldr	r1, [sp, #20]
 8009afc:	463a      	mov	r2, r7
 8009afe:	4620      	mov	r0, r4
 8009b00:	f001 ff86 	bl	800ba10 <__lshift>
 8009b04:	9005      	str	r0, [sp, #20]
 8009b06:	2800      	cmp	r0, #0
 8009b08:	f43f ae7e 	beq.w	8009808 <_strtod_l+0x490>
 8009b0c:	f1b9 0f00 	cmp.w	r9, #0
 8009b10:	dd08      	ble.n	8009b24 <_strtod_l+0x7ac>
 8009b12:	4631      	mov	r1, r6
 8009b14:	464a      	mov	r2, r9
 8009b16:	4620      	mov	r0, r4
 8009b18:	f001 ff7a 	bl	800ba10 <__lshift>
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	f43f ae72 	beq.w	8009808 <_strtod_l+0x490>
 8009b24:	9a05      	ldr	r2, [sp, #20]
 8009b26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f001 fffd 	bl	800bb28 <__mdiff>
 8009b2e:	4605      	mov	r5, r0
 8009b30:	2800      	cmp	r0, #0
 8009b32:	f43f ae69 	beq.w	8009808 <_strtod_l+0x490>
 8009b36:	68c3      	ldr	r3, [r0, #12]
 8009b38:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	60c3      	str	r3, [r0, #12]
 8009b3e:	4631      	mov	r1, r6
 8009b40:	f001 ffd6 	bl	800baf0 <__mcmp>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	da60      	bge.n	8009c0a <_strtod_l+0x892>
 8009b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b4a:	ea53 030a 	orrs.w	r3, r3, sl
 8009b4e:	f040 8082 	bne.w	8009c56 <_strtod_l+0x8de>
 8009b52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d17d      	bne.n	8009c56 <_strtod_l+0x8de>
 8009b5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b5e:	0d1b      	lsrs	r3, r3, #20
 8009b60:	051b      	lsls	r3, r3, #20
 8009b62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009b66:	d976      	bls.n	8009c56 <_strtod_l+0x8de>
 8009b68:	696b      	ldr	r3, [r5, #20]
 8009b6a:	b913      	cbnz	r3, 8009b72 <_strtod_l+0x7fa>
 8009b6c:	692b      	ldr	r3, [r5, #16]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	dd71      	ble.n	8009c56 <_strtod_l+0x8de>
 8009b72:	4629      	mov	r1, r5
 8009b74:	2201      	movs	r2, #1
 8009b76:	4620      	mov	r0, r4
 8009b78:	f001 ff4a 	bl	800ba10 <__lshift>
 8009b7c:	4631      	mov	r1, r6
 8009b7e:	4605      	mov	r5, r0
 8009b80:	f001 ffb6 	bl	800baf0 <__mcmp>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	dd66      	ble.n	8009c56 <_strtod_l+0x8de>
 8009b88:	9904      	ldr	r1, [sp, #16]
 8009b8a:	4a53      	ldr	r2, [pc, #332]	; (8009cd8 <_strtod_l+0x960>)
 8009b8c:	465b      	mov	r3, fp
 8009b8e:	2900      	cmp	r1, #0
 8009b90:	f000 8081 	beq.w	8009c96 <_strtod_l+0x91e>
 8009b94:	ea02 010b 	and.w	r1, r2, fp
 8009b98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b9c:	dc7b      	bgt.n	8009c96 <_strtod_l+0x91e>
 8009b9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009ba2:	f77f aea9 	ble.w	80098f8 <_strtod_l+0x580>
 8009ba6:	4b4d      	ldr	r3, [pc, #308]	; (8009cdc <_strtod_l+0x964>)
 8009ba8:	4650      	mov	r0, sl
 8009baa:	4659      	mov	r1, fp
 8009bac:	2200      	movs	r2, #0
 8009bae:	f7f6 fd3b 	bl	8000628 <__aeabi_dmul>
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	4303      	orrs	r3, r0
 8009bb6:	bf08      	it	eq
 8009bb8:	2322      	moveq	r3, #34	; 0x22
 8009bba:	4682      	mov	sl, r0
 8009bbc:	468b      	mov	fp, r1
 8009bbe:	bf08      	it	eq
 8009bc0:	6023      	streq	r3, [r4, #0]
 8009bc2:	e62b      	b.n	800981c <_strtod_l+0x4a4>
 8009bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bcc:	ea03 0a0a 	and.w	sl, r3, sl
 8009bd0:	e6e3      	b.n	800999a <_strtod_l+0x622>
 8009bd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009bd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009bda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009bde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009be2:	fa01 f308 	lsl.w	r3, r1, r8
 8009be6:	9308      	str	r3, [sp, #32]
 8009be8:	910d      	str	r1, [sp, #52]	; 0x34
 8009bea:	e746      	b.n	8009a7a <_strtod_l+0x702>
 8009bec:	2300      	movs	r3, #0
 8009bee:	9308      	str	r3, [sp, #32]
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	930d      	str	r3, [sp, #52]	; 0x34
 8009bf4:	e741      	b.n	8009a7a <_strtod_l+0x702>
 8009bf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009bf8:	4642      	mov	r2, r8
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f001 ff08 	bl	800ba10 <__lshift>
 8009c00:	9018      	str	r0, [sp, #96]	; 0x60
 8009c02:	2800      	cmp	r0, #0
 8009c04:	f47f af6b 	bne.w	8009ade <_strtod_l+0x766>
 8009c08:	e5fe      	b.n	8009808 <_strtod_l+0x490>
 8009c0a:	465f      	mov	r7, fp
 8009c0c:	d16e      	bne.n	8009cec <_strtod_l+0x974>
 8009c0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c14:	b342      	cbz	r2, 8009c68 <_strtod_l+0x8f0>
 8009c16:	4a32      	ldr	r2, [pc, #200]	; (8009ce0 <_strtod_l+0x968>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d128      	bne.n	8009c6e <_strtod_l+0x8f6>
 8009c1c:	9b04      	ldr	r3, [sp, #16]
 8009c1e:	4651      	mov	r1, sl
 8009c20:	b1eb      	cbz	r3, 8009c5e <_strtod_l+0x8e6>
 8009c22:	4b2d      	ldr	r3, [pc, #180]	; (8009cd8 <_strtod_l+0x960>)
 8009c24:	403b      	ands	r3, r7
 8009c26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c2e:	d819      	bhi.n	8009c64 <_strtod_l+0x8ec>
 8009c30:	0d1b      	lsrs	r3, r3, #20
 8009c32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c36:	fa02 f303 	lsl.w	r3, r2, r3
 8009c3a:	4299      	cmp	r1, r3
 8009c3c:	d117      	bne.n	8009c6e <_strtod_l+0x8f6>
 8009c3e:	4b29      	ldr	r3, [pc, #164]	; (8009ce4 <_strtod_l+0x96c>)
 8009c40:	429f      	cmp	r7, r3
 8009c42:	d102      	bne.n	8009c4a <_strtod_l+0x8d2>
 8009c44:	3101      	adds	r1, #1
 8009c46:	f43f addf 	beq.w	8009808 <_strtod_l+0x490>
 8009c4a:	4b23      	ldr	r3, [pc, #140]	; (8009cd8 <_strtod_l+0x960>)
 8009c4c:	403b      	ands	r3, r7
 8009c4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009c52:	f04f 0a00 	mov.w	sl, #0
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1a4      	bne.n	8009ba6 <_strtod_l+0x82e>
 8009c5c:	e5de      	b.n	800981c <_strtod_l+0x4a4>
 8009c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c62:	e7ea      	b.n	8009c3a <_strtod_l+0x8c2>
 8009c64:	4613      	mov	r3, r2
 8009c66:	e7e8      	b.n	8009c3a <_strtod_l+0x8c2>
 8009c68:	ea53 030a 	orrs.w	r3, r3, sl
 8009c6c:	d08c      	beq.n	8009b88 <_strtod_l+0x810>
 8009c6e:	9b08      	ldr	r3, [sp, #32]
 8009c70:	b1db      	cbz	r3, 8009caa <_strtod_l+0x932>
 8009c72:	423b      	tst	r3, r7
 8009c74:	d0ef      	beq.n	8009c56 <_strtod_l+0x8de>
 8009c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c78:	9a04      	ldr	r2, [sp, #16]
 8009c7a:	4650      	mov	r0, sl
 8009c7c:	4659      	mov	r1, fp
 8009c7e:	b1c3      	cbz	r3, 8009cb2 <_strtod_l+0x93a>
 8009c80:	f7ff fb5d 	bl	800933e <sulp>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	ec51 0b18 	vmov	r0, r1, d8
 8009c8c:	f7f6 fb16 	bl	80002bc <__adddf3>
 8009c90:	4682      	mov	sl, r0
 8009c92:	468b      	mov	fp, r1
 8009c94:	e7df      	b.n	8009c56 <_strtod_l+0x8de>
 8009c96:	4013      	ands	r3, r2
 8009c98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009ca0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ca4:	f04f 3aff 	mov.w	sl, #4294967295
 8009ca8:	e7d5      	b.n	8009c56 <_strtod_l+0x8de>
 8009caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cac:	ea13 0f0a 	tst.w	r3, sl
 8009cb0:	e7e0      	b.n	8009c74 <_strtod_l+0x8fc>
 8009cb2:	f7ff fb44 	bl	800933e <sulp>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	460b      	mov	r3, r1
 8009cba:	ec51 0b18 	vmov	r0, r1, d8
 8009cbe:	f7f6 fafb 	bl	80002b8 <__aeabi_dsub>
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	4682      	mov	sl, r0
 8009cc8:	468b      	mov	fp, r1
 8009cca:	f7f6 ff15 	bl	8000af8 <__aeabi_dcmpeq>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d0c1      	beq.n	8009c56 <_strtod_l+0x8de>
 8009cd2:	e611      	b.n	80098f8 <_strtod_l+0x580>
 8009cd4:	fffffc02 	.word	0xfffffc02
 8009cd8:	7ff00000 	.word	0x7ff00000
 8009cdc:	39500000 	.word	0x39500000
 8009ce0:	000fffff 	.word	0x000fffff
 8009ce4:	7fefffff 	.word	0x7fefffff
 8009ce8:	080103f0 	.word	0x080103f0
 8009cec:	4631      	mov	r1, r6
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f002 f87c 	bl	800bdec <__ratio>
 8009cf4:	ec59 8b10 	vmov	r8, r9, d0
 8009cf8:	ee10 0a10 	vmov	r0, s0
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d02:	4649      	mov	r1, r9
 8009d04:	f7f6 ff0c 	bl	8000b20 <__aeabi_dcmple>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d07a      	beq.n	8009e02 <_strtod_l+0xa8a>
 8009d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d04a      	beq.n	8009da8 <_strtod_l+0xa30>
 8009d12:	4b95      	ldr	r3, [pc, #596]	; (8009f68 <_strtod_l+0xbf0>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009f68 <_strtod_l+0xbf0>
 8009d1e:	f04f 0800 	mov.w	r8, #0
 8009d22:	4b92      	ldr	r3, [pc, #584]	; (8009f6c <_strtod_l+0xbf4>)
 8009d24:	403b      	ands	r3, r7
 8009d26:	930d      	str	r3, [sp, #52]	; 0x34
 8009d28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d2a:	4b91      	ldr	r3, [pc, #580]	; (8009f70 <_strtod_l+0xbf8>)
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	f040 80b0 	bne.w	8009e92 <_strtod_l+0xb1a>
 8009d32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009d3a:	ec4b ab10 	vmov	d0, sl, fp
 8009d3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d42:	f001 ff7b 	bl	800bc3c <__ulp>
 8009d46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d4a:	ec53 2b10 	vmov	r2, r3, d0
 8009d4e:	f7f6 fc6b 	bl	8000628 <__aeabi_dmul>
 8009d52:	4652      	mov	r2, sl
 8009d54:	465b      	mov	r3, fp
 8009d56:	f7f6 fab1 	bl	80002bc <__adddf3>
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	4983      	ldr	r1, [pc, #524]	; (8009f6c <_strtod_l+0xbf4>)
 8009d5e:	4a85      	ldr	r2, [pc, #532]	; (8009f74 <_strtod_l+0xbfc>)
 8009d60:	4019      	ands	r1, r3
 8009d62:	4291      	cmp	r1, r2
 8009d64:	4682      	mov	sl, r0
 8009d66:	d960      	bls.n	8009e2a <_strtod_l+0xab2>
 8009d68:	ee18 3a90 	vmov	r3, s17
 8009d6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d104      	bne.n	8009d7e <_strtod_l+0xa06>
 8009d74:	ee18 3a10 	vmov	r3, s16
 8009d78:	3301      	adds	r3, #1
 8009d7a:	f43f ad45 	beq.w	8009808 <_strtod_l+0x490>
 8009d7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009f80 <_strtod_l+0xc08>
 8009d82:	f04f 3aff 	mov.w	sl, #4294967295
 8009d86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f001 fc25 	bl	800b5d8 <_Bfree>
 8009d8e:	9905      	ldr	r1, [sp, #20]
 8009d90:	4620      	mov	r0, r4
 8009d92:	f001 fc21 	bl	800b5d8 <_Bfree>
 8009d96:	4631      	mov	r1, r6
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f001 fc1d 	bl	800b5d8 <_Bfree>
 8009d9e:	4629      	mov	r1, r5
 8009da0:	4620      	mov	r0, r4
 8009da2:	f001 fc19 	bl	800b5d8 <_Bfree>
 8009da6:	e61a      	b.n	80099de <_strtod_l+0x666>
 8009da8:	f1ba 0f00 	cmp.w	sl, #0
 8009dac:	d11b      	bne.n	8009de6 <_strtod_l+0xa6e>
 8009dae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009db2:	b9f3      	cbnz	r3, 8009df2 <_strtod_l+0xa7a>
 8009db4:	4b6c      	ldr	r3, [pc, #432]	; (8009f68 <_strtod_l+0xbf0>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	4640      	mov	r0, r8
 8009dba:	4649      	mov	r1, r9
 8009dbc:	f7f6 fea6 	bl	8000b0c <__aeabi_dcmplt>
 8009dc0:	b9d0      	cbnz	r0, 8009df8 <_strtod_l+0xa80>
 8009dc2:	4640      	mov	r0, r8
 8009dc4:	4649      	mov	r1, r9
 8009dc6:	4b6c      	ldr	r3, [pc, #432]	; (8009f78 <_strtod_l+0xc00>)
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f7f6 fc2d 	bl	8000628 <__aeabi_dmul>
 8009dce:	4680      	mov	r8, r0
 8009dd0:	4689      	mov	r9, r1
 8009dd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009dd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009dda:	9315      	str	r3, [sp, #84]	; 0x54
 8009ddc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009de0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009de4:	e79d      	b.n	8009d22 <_strtod_l+0x9aa>
 8009de6:	f1ba 0f01 	cmp.w	sl, #1
 8009dea:	d102      	bne.n	8009df2 <_strtod_l+0xa7a>
 8009dec:	2f00      	cmp	r7, #0
 8009dee:	f43f ad83 	beq.w	80098f8 <_strtod_l+0x580>
 8009df2:	4b62      	ldr	r3, [pc, #392]	; (8009f7c <_strtod_l+0xc04>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	e78e      	b.n	8009d16 <_strtod_l+0x99e>
 8009df8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009f78 <_strtod_l+0xc00>
 8009dfc:	f04f 0800 	mov.w	r8, #0
 8009e00:	e7e7      	b.n	8009dd2 <_strtod_l+0xa5a>
 8009e02:	4b5d      	ldr	r3, [pc, #372]	; (8009f78 <_strtod_l+0xc00>)
 8009e04:	4640      	mov	r0, r8
 8009e06:	4649      	mov	r1, r9
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f7f6 fc0d 	bl	8000628 <__aeabi_dmul>
 8009e0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e10:	4680      	mov	r8, r0
 8009e12:	4689      	mov	r9, r1
 8009e14:	b933      	cbnz	r3, 8009e24 <_strtod_l+0xaac>
 8009e16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e1a:	900e      	str	r0, [sp, #56]	; 0x38
 8009e1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009e22:	e7dd      	b.n	8009de0 <_strtod_l+0xa68>
 8009e24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009e28:	e7f9      	b.n	8009e1e <_strtod_l+0xaa6>
 8009e2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009e2e:	9b04      	ldr	r3, [sp, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1a8      	bne.n	8009d86 <_strtod_l+0xa0e>
 8009e34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e3a:	0d1b      	lsrs	r3, r3, #20
 8009e3c:	051b      	lsls	r3, r3, #20
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d1a1      	bne.n	8009d86 <_strtod_l+0xa0e>
 8009e42:	4640      	mov	r0, r8
 8009e44:	4649      	mov	r1, r9
 8009e46:	f7f7 f895 	bl	8000f74 <__aeabi_d2lz>
 8009e4a:	f7f6 fbbf 	bl	80005cc <__aeabi_l2d>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4640      	mov	r0, r8
 8009e54:	4649      	mov	r1, r9
 8009e56:	f7f6 fa2f 	bl	80002b8 <__aeabi_dsub>
 8009e5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e60:	ea43 030a 	orr.w	r3, r3, sl
 8009e64:	4313      	orrs	r3, r2
 8009e66:	4680      	mov	r8, r0
 8009e68:	4689      	mov	r9, r1
 8009e6a:	d055      	beq.n	8009f18 <_strtod_l+0xba0>
 8009e6c:	a336      	add	r3, pc, #216	; (adr r3, 8009f48 <_strtod_l+0xbd0>)
 8009e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e72:	f7f6 fe4b 	bl	8000b0c <__aeabi_dcmplt>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	f47f acd0 	bne.w	800981c <_strtod_l+0x4a4>
 8009e7c:	a334      	add	r3, pc, #208	; (adr r3, 8009f50 <_strtod_l+0xbd8>)
 8009e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e82:	4640      	mov	r0, r8
 8009e84:	4649      	mov	r1, r9
 8009e86:	f7f6 fe5f 	bl	8000b48 <__aeabi_dcmpgt>
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	f43f af7b 	beq.w	8009d86 <_strtod_l+0xa0e>
 8009e90:	e4c4      	b.n	800981c <_strtod_l+0x4a4>
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	b333      	cbz	r3, 8009ee4 <_strtod_l+0xb6c>
 8009e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e9c:	d822      	bhi.n	8009ee4 <_strtod_l+0xb6c>
 8009e9e:	a32e      	add	r3, pc, #184	; (adr r3, 8009f58 <_strtod_l+0xbe0>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	f7f6 fe3a 	bl	8000b20 <__aeabi_dcmple>
 8009eac:	b1a0      	cbz	r0, 8009ed8 <_strtod_l+0xb60>
 8009eae:	4649      	mov	r1, r9
 8009eb0:	4640      	mov	r0, r8
 8009eb2:	f7f6 fe91 	bl	8000bd8 <__aeabi_d2uiz>
 8009eb6:	2801      	cmp	r0, #1
 8009eb8:	bf38      	it	cc
 8009eba:	2001      	movcc	r0, #1
 8009ebc:	f7f6 fb3a 	bl	8000534 <__aeabi_ui2d>
 8009ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ec2:	4680      	mov	r8, r0
 8009ec4:	4689      	mov	r9, r1
 8009ec6:	bb23      	cbnz	r3, 8009f12 <_strtod_l+0xb9a>
 8009ec8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ecc:	9010      	str	r0, [sp, #64]	; 0x40
 8009ece:	9311      	str	r3, [sp, #68]	; 0x44
 8009ed0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ed4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009edc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009ee0:	1a9b      	subs	r3, r3, r2
 8009ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ee8:	eeb0 0a48 	vmov.f32	s0, s16
 8009eec:	eef0 0a68 	vmov.f32	s1, s17
 8009ef0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009ef4:	f001 fea2 	bl	800bc3c <__ulp>
 8009ef8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009efc:	ec53 2b10 	vmov	r2, r3, d0
 8009f00:	f7f6 fb92 	bl	8000628 <__aeabi_dmul>
 8009f04:	ec53 2b18 	vmov	r2, r3, d8
 8009f08:	f7f6 f9d8 	bl	80002bc <__adddf3>
 8009f0c:	4682      	mov	sl, r0
 8009f0e:	468b      	mov	fp, r1
 8009f10:	e78d      	b.n	8009e2e <_strtod_l+0xab6>
 8009f12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009f16:	e7db      	b.n	8009ed0 <_strtod_l+0xb58>
 8009f18:	a311      	add	r3, pc, #68	; (adr r3, 8009f60 <_strtod_l+0xbe8>)
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	f7f6 fdf5 	bl	8000b0c <__aeabi_dcmplt>
 8009f22:	e7b2      	b.n	8009e8a <_strtod_l+0xb12>
 8009f24:	2300      	movs	r3, #0
 8009f26:	930a      	str	r3, [sp, #40]	; 0x28
 8009f28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f2c:	6013      	str	r3, [r2, #0]
 8009f2e:	f7ff ba6b 	b.w	8009408 <_strtod_l+0x90>
 8009f32:	2a65      	cmp	r2, #101	; 0x65
 8009f34:	f43f ab5f 	beq.w	80095f6 <_strtod_l+0x27e>
 8009f38:	2a45      	cmp	r2, #69	; 0x45
 8009f3a:	f43f ab5c 	beq.w	80095f6 <_strtod_l+0x27e>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	f7ff bb94 	b.w	800966c <_strtod_l+0x2f4>
 8009f44:	f3af 8000 	nop.w
 8009f48:	94a03595 	.word	0x94a03595
 8009f4c:	3fdfffff 	.word	0x3fdfffff
 8009f50:	35afe535 	.word	0x35afe535
 8009f54:	3fe00000 	.word	0x3fe00000
 8009f58:	ffc00000 	.word	0xffc00000
 8009f5c:	41dfffff 	.word	0x41dfffff
 8009f60:	94a03595 	.word	0x94a03595
 8009f64:	3fcfffff 	.word	0x3fcfffff
 8009f68:	3ff00000 	.word	0x3ff00000
 8009f6c:	7ff00000 	.word	0x7ff00000
 8009f70:	7fe00000 	.word	0x7fe00000
 8009f74:	7c9fffff 	.word	0x7c9fffff
 8009f78:	3fe00000 	.word	0x3fe00000
 8009f7c:	bff00000 	.word	0xbff00000
 8009f80:	7fefffff 	.word	0x7fefffff

08009f84 <_strtod_r>:
 8009f84:	4b01      	ldr	r3, [pc, #4]	; (8009f8c <_strtod_r+0x8>)
 8009f86:	f7ff b9f7 	b.w	8009378 <_strtod_l>
 8009f8a:	bf00      	nop
 8009f8c:	20000084 	.word	0x20000084

08009f90 <strtod>:
 8009f90:	460a      	mov	r2, r1
 8009f92:	4601      	mov	r1, r0
 8009f94:	4802      	ldr	r0, [pc, #8]	; (8009fa0 <strtod+0x10>)
 8009f96:	4b03      	ldr	r3, [pc, #12]	; (8009fa4 <strtod+0x14>)
 8009f98:	6800      	ldr	r0, [r0, #0]
 8009f9a:	f7ff b9ed 	b.w	8009378 <_strtod_l>
 8009f9e:	bf00      	nop
 8009fa0:	2000001c 	.word	0x2000001c
 8009fa4:	20000084 	.word	0x20000084

08009fa8 <_strtol_l.constprop.0>:
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fae:	d001      	beq.n	8009fb4 <_strtol_l.constprop.0+0xc>
 8009fb0:	2b24      	cmp	r3, #36	; 0x24
 8009fb2:	d906      	bls.n	8009fc2 <_strtol_l.constprop.0+0x1a>
 8009fb4:	f7fe fa80 	bl	80084b8 <__errno>
 8009fb8:	2316      	movs	r3, #22
 8009fba:	6003      	str	r3, [r0, #0]
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a0a8 <_strtol_l.constprop.0+0x100>
 8009fc6:	460d      	mov	r5, r1
 8009fc8:	462e      	mov	r6, r5
 8009fca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fce:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009fd2:	f017 0708 	ands.w	r7, r7, #8
 8009fd6:	d1f7      	bne.n	8009fc8 <_strtol_l.constprop.0+0x20>
 8009fd8:	2c2d      	cmp	r4, #45	; 0x2d
 8009fda:	d132      	bne.n	800a042 <_strtol_l.constprop.0+0x9a>
 8009fdc:	782c      	ldrb	r4, [r5, #0]
 8009fde:	2701      	movs	r7, #1
 8009fe0:	1cb5      	adds	r5, r6, #2
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d05b      	beq.n	800a09e <_strtol_l.constprop.0+0xf6>
 8009fe6:	2b10      	cmp	r3, #16
 8009fe8:	d109      	bne.n	8009ffe <_strtol_l.constprop.0+0x56>
 8009fea:	2c30      	cmp	r4, #48	; 0x30
 8009fec:	d107      	bne.n	8009ffe <_strtol_l.constprop.0+0x56>
 8009fee:	782c      	ldrb	r4, [r5, #0]
 8009ff0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009ff4:	2c58      	cmp	r4, #88	; 0x58
 8009ff6:	d14d      	bne.n	800a094 <_strtol_l.constprop.0+0xec>
 8009ff8:	786c      	ldrb	r4, [r5, #1]
 8009ffa:	2310      	movs	r3, #16
 8009ffc:	3502      	adds	r5, #2
 8009ffe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a002:	f108 38ff 	add.w	r8, r8, #4294967295
 800a006:	f04f 0c00 	mov.w	ip, #0
 800a00a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a00e:	4666      	mov	r6, ip
 800a010:	fb03 8a19 	mls	sl, r3, r9, r8
 800a014:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a018:	f1be 0f09 	cmp.w	lr, #9
 800a01c:	d816      	bhi.n	800a04c <_strtol_l.constprop.0+0xa4>
 800a01e:	4674      	mov	r4, lr
 800a020:	42a3      	cmp	r3, r4
 800a022:	dd24      	ble.n	800a06e <_strtol_l.constprop.0+0xc6>
 800a024:	f1bc 0f00 	cmp.w	ip, #0
 800a028:	db1e      	blt.n	800a068 <_strtol_l.constprop.0+0xc0>
 800a02a:	45b1      	cmp	r9, r6
 800a02c:	d31c      	bcc.n	800a068 <_strtol_l.constprop.0+0xc0>
 800a02e:	d101      	bne.n	800a034 <_strtol_l.constprop.0+0x8c>
 800a030:	45a2      	cmp	sl, r4
 800a032:	db19      	blt.n	800a068 <_strtol_l.constprop.0+0xc0>
 800a034:	fb06 4603 	mla	r6, r6, r3, r4
 800a038:	f04f 0c01 	mov.w	ip, #1
 800a03c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a040:	e7e8      	b.n	800a014 <_strtol_l.constprop.0+0x6c>
 800a042:	2c2b      	cmp	r4, #43	; 0x2b
 800a044:	bf04      	itt	eq
 800a046:	782c      	ldrbeq	r4, [r5, #0]
 800a048:	1cb5      	addeq	r5, r6, #2
 800a04a:	e7ca      	b.n	8009fe2 <_strtol_l.constprop.0+0x3a>
 800a04c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a050:	f1be 0f19 	cmp.w	lr, #25
 800a054:	d801      	bhi.n	800a05a <_strtol_l.constprop.0+0xb2>
 800a056:	3c37      	subs	r4, #55	; 0x37
 800a058:	e7e2      	b.n	800a020 <_strtol_l.constprop.0+0x78>
 800a05a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a05e:	f1be 0f19 	cmp.w	lr, #25
 800a062:	d804      	bhi.n	800a06e <_strtol_l.constprop.0+0xc6>
 800a064:	3c57      	subs	r4, #87	; 0x57
 800a066:	e7db      	b.n	800a020 <_strtol_l.constprop.0+0x78>
 800a068:	f04f 3cff 	mov.w	ip, #4294967295
 800a06c:	e7e6      	b.n	800a03c <_strtol_l.constprop.0+0x94>
 800a06e:	f1bc 0f00 	cmp.w	ip, #0
 800a072:	da05      	bge.n	800a080 <_strtol_l.constprop.0+0xd8>
 800a074:	2322      	movs	r3, #34	; 0x22
 800a076:	6003      	str	r3, [r0, #0]
 800a078:	4646      	mov	r6, r8
 800a07a:	b942      	cbnz	r2, 800a08e <_strtol_l.constprop.0+0xe6>
 800a07c:	4630      	mov	r0, r6
 800a07e:	e79e      	b.n	8009fbe <_strtol_l.constprop.0+0x16>
 800a080:	b107      	cbz	r7, 800a084 <_strtol_l.constprop.0+0xdc>
 800a082:	4276      	negs	r6, r6
 800a084:	2a00      	cmp	r2, #0
 800a086:	d0f9      	beq.n	800a07c <_strtol_l.constprop.0+0xd4>
 800a088:	f1bc 0f00 	cmp.w	ip, #0
 800a08c:	d000      	beq.n	800a090 <_strtol_l.constprop.0+0xe8>
 800a08e:	1e69      	subs	r1, r5, #1
 800a090:	6011      	str	r1, [r2, #0]
 800a092:	e7f3      	b.n	800a07c <_strtol_l.constprop.0+0xd4>
 800a094:	2430      	movs	r4, #48	; 0x30
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1b1      	bne.n	8009ffe <_strtol_l.constprop.0+0x56>
 800a09a:	2308      	movs	r3, #8
 800a09c:	e7af      	b.n	8009ffe <_strtol_l.constprop.0+0x56>
 800a09e:	2c30      	cmp	r4, #48	; 0x30
 800a0a0:	d0a5      	beq.n	8009fee <_strtol_l.constprop.0+0x46>
 800a0a2:	230a      	movs	r3, #10
 800a0a4:	e7ab      	b.n	8009ffe <_strtol_l.constprop.0+0x56>
 800a0a6:	bf00      	nop
 800a0a8:	08010419 	.word	0x08010419

0800a0ac <_strtol_r>:
 800a0ac:	f7ff bf7c 	b.w	8009fa8 <_strtol_l.constprop.0>

0800a0b0 <strtol>:
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	460a      	mov	r2, r1
 800a0b4:	4601      	mov	r1, r0
 800a0b6:	4802      	ldr	r0, [pc, #8]	; (800a0c0 <strtol+0x10>)
 800a0b8:	6800      	ldr	r0, [r0, #0]
 800a0ba:	f7ff bf75 	b.w	8009fa8 <_strtol_l.constprop.0>
 800a0be:	bf00      	nop
 800a0c0:	2000001c 	.word	0x2000001c

0800a0c4 <_write_r>:
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	4d07      	ldr	r5, [pc, #28]	; (800a0e4 <_write_r+0x20>)
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	4608      	mov	r0, r1
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	602a      	str	r2, [r5, #0]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	f7fb f9f8 	bl	80054c8 <_write>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d102      	bne.n	800a0e2 <_write_r+0x1e>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	b103      	cbz	r3, 800a0e2 <_write_r+0x1e>
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	20009d00 	.word	0x20009d00

0800a0e8 <_close_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	4d06      	ldr	r5, [pc, #24]	; (800a104 <_close_r+0x1c>)
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	602b      	str	r3, [r5, #0]
 800a0f4:	f7fb fa04 	bl	8005500 <_close>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	d102      	bne.n	800a102 <_close_r+0x1a>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	b103      	cbz	r3, 800a102 <_close_r+0x1a>
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	20009d00 	.word	0x20009d00

0800a108 <quorem>:
 800a108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10c:	6903      	ldr	r3, [r0, #16]
 800a10e:	690c      	ldr	r4, [r1, #16]
 800a110:	42a3      	cmp	r3, r4
 800a112:	4607      	mov	r7, r0
 800a114:	f2c0 8081 	blt.w	800a21a <quorem+0x112>
 800a118:	3c01      	subs	r4, #1
 800a11a:	f101 0814 	add.w	r8, r1, #20
 800a11e:	f100 0514 	add.w	r5, r0, #20
 800a122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a126:	9301      	str	r3, [sp, #4]
 800a128:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a12c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a130:	3301      	adds	r3, #1
 800a132:	429a      	cmp	r2, r3
 800a134:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a138:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a13c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a140:	d331      	bcc.n	800a1a6 <quorem+0x9e>
 800a142:	f04f 0e00 	mov.w	lr, #0
 800a146:	4640      	mov	r0, r8
 800a148:	46ac      	mov	ip, r5
 800a14a:	46f2      	mov	sl, lr
 800a14c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a150:	b293      	uxth	r3, r2
 800a152:	fb06 e303 	mla	r3, r6, r3, lr
 800a156:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	ebaa 0303 	sub.w	r3, sl, r3
 800a160:	f8dc a000 	ldr.w	sl, [ip]
 800a164:	0c12      	lsrs	r2, r2, #16
 800a166:	fa13 f38a 	uxtah	r3, r3, sl
 800a16a:	fb06 e202 	mla	r2, r6, r2, lr
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	9b00      	ldr	r3, [sp, #0]
 800a172:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a176:	b292      	uxth	r2, r2
 800a178:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a17c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a180:	f8bd 3000 	ldrh.w	r3, [sp]
 800a184:	4581      	cmp	r9, r0
 800a186:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a18a:	f84c 3b04 	str.w	r3, [ip], #4
 800a18e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a192:	d2db      	bcs.n	800a14c <quorem+0x44>
 800a194:	f855 300b 	ldr.w	r3, [r5, fp]
 800a198:	b92b      	cbnz	r3, 800a1a6 <quorem+0x9e>
 800a19a:	9b01      	ldr	r3, [sp, #4]
 800a19c:	3b04      	subs	r3, #4
 800a19e:	429d      	cmp	r5, r3
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	d32e      	bcc.n	800a202 <quorem+0xfa>
 800a1a4:	613c      	str	r4, [r7, #16]
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	f001 fca2 	bl	800baf0 <__mcmp>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	db24      	blt.n	800a1fa <quorem+0xf2>
 800a1b0:	3601      	adds	r6, #1
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f04f 0c00 	mov.w	ip, #0
 800a1b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1bc:	f8d0 e000 	ldr.w	lr, [r0]
 800a1c0:	b293      	uxth	r3, r2
 800a1c2:	ebac 0303 	sub.w	r3, ip, r3
 800a1c6:	0c12      	lsrs	r2, r2, #16
 800a1c8:	fa13 f38e 	uxtah	r3, r3, lr
 800a1cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1da:	45c1      	cmp	r9, r8
 800a1dc:	f840 3b04 	str.w	r3, [r0], #4
 800a1e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1e4:	d2e8      	bcs.n	800a1b8 <quorem+0xb0>
 800a1e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1ee:	b922      	cbnz	r2, 800a1fa <quorem+0xf2>
 800a1f0:	3b04      	subs	r3, #4
 800a1f2:	429d      	cmp	r5, r3
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	d30a      	bcc.n	800a20e <quorem+0x106>
 800a1f8:	613c      	str	r4, [r7, #16]
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	b003      	add	sp, #12
 800a1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a202:	6812      	ldr	r2, [r2, #0]
 800a204:	3b04      	subs	r3, #4
 800a206:	2a00      	cmp	r2, #0
 800a208:	d1cc      	bne.n	800a1a4 <quorem+0x9c>
 800a20a:	3c01      	subs	r4, #1
 800a20c:	e7c7      	b.n	800a19e <quorem+0x96>
 800a20e:	6812      	ldr	r2, [r2, #0]
 800a210:	3b04      	subs	r3, #4
 800a212:	2a00      	cmp	r2, #0
 800a214:	d1f0      	bne.n	800a1f8 <quorem+0xf0>
 800a216:	3c01      	subs	r4, #1
 800a218:	e7eb      	b.n	800a1f2 <quorem+0xea>
 800a21a:	2000      	movs	r0, #0
 800a21c:	e7ee      	b.n	800a1fc <quorem+0xf4>
	...

0800a220 <_dtoa_r>:
 800a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	ed2d 8b04 	vpush	{d8-d9}
 800a228:	ec57 6b10 	vmov	r6, r7, d0
 800a22c:	b093      	sub	sp, #76	; 0x4c
 800a22e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a230:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a234:	9106      	str	r1, [sp, #24]
 800a236:	ee10 aa10 	vmov	sl, s0
 800a23a:	4604      	mov	r4, r0
 800a23c:	9209      	str	r2, [sp, #36]	; 0x24
 800a23e:	930c      	str	r3, [sp, #48]	; 0x30
 800a240:	46bb      	mov	fp, r7
 800a242:	b975      	cbnz	r5, 800a262 <_dtoa_r+0x42>
 800a244:	2010      	movs	r0, #16
 800a246:	f001 f95f 	bl	800b508 <malloc>
 800a24a:	4602      	mov	r2, r0
 800a24c:	6260      	str	r0, [r4, #36]	; 0x24
 800a24e:	b920      	cbnz	r0, 800a25a <_dtoa_r+0x3a>
 800a250:	4ba7      	ldr	r3, [pc, #668]	; (800a4f0 <_dtoa_r+0x2d0>)
 800a252:	21ea      	movs	r1, #234	; 0xea
 800a254:	48a7      	ldr	r0, [pc, #668]	; (800a4f4 <_dtoa_r+0x2d4>)
 800a256:	f002 fceb 	bl	800cc30 <__assert_func>
 800a25a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a25e:	6005      	str	r5, [r0, #0]
 800a260:	60c5      	str	r5, [r0, #12]
 800a262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a264:	6819      	ldr	r1, [r3, #0]
 800a266:	b151      	cbz	r1, 800a27e <_dtoa_r+0x5e>
 800a268:	685a      	ldr	r2, [r3, #4]
 800a26a:	604a      	str	r2, [r1, #4]
 800a26c:	2301      	movs	r3, #1
 800a26e:	4093      	lsls	r3, r2
 800a270:	608b      	str	r3, [r1, #8]
 800a272:	4620      	mov	r0, r4
 800a274:	f001 f9b0 	bl	800b5d8 <_Bfree>
 800a278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	1e3b      	subs	r3, r7, #0
 800a280:	bfaa      	itet	ge
 800a282:	2300      	movge	r3, #0
 800a284:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a288:	f8c8 3000 	strge.w	r3, [r8]
 800a28c:	4b9a      	ldr	r3, [pc, #616]	; (800a4f8 <_dtoa_r+0x2d8>)
 800a28e:	bfbc      	itt	lt
 800a290:	2201      	movlt	r2, #1
 800a292:	f8c8 2000 	strlt.w	r2, [r8]
 800a296:	ea33 030b 	bics.w	r3, r3, fp
 800a29a:	d11b      	bne.n	800a2d4 <_dtoa_r+0xb4>
 800a29c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a29e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2a2:	6013      	str	r3, [r2, #0]
 800a2a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2a8:	4333      	orrs	r3, r6
 800a2aa:	f000 8592 	beq.w	800add2 <_dtoa_r+0xbb2>
 800a2ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2b0:	b963      	cbnz	r3, 800a2cc <_dtoa_r+0xac>
 800a2b2:	4b92      	ldr	r3, [pc, #584]	; (800a4fc <_dtoa_r+0x2dc>)
 800a2b4:	e022      	b.n	800a2fc <_dtoa_r+0xdc>
 800a2b6:	4b92      	ldr	r3, [pc, #584]	; (800a500 <_dtoa_r+0x2e0>)
 800a2b8:	9301      	str	r3, [sp, #4]
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	9801      	ldr	r0, [sp, #4]
 800a2c2:	b013      	add	sp, #76	; 0x4c
 800a2c4:	ecbd 8b04 	vpop	{d8-d9}
 800a2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2cc:	4b8b      	ldr	r3, [pc, #556]	; (800a4fc <_dtoa_r+0x2dc>)
 800a2ce:	9301      	str	r3, [sp, #4]
 800a2d0:	3303      	adds	r3, #3
 800a2d2:	e7f3      	b.n	800a2bc <_dtoa_r+0x9c>
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	4650      	mov	r0, sl
 800a2da:	4659      	mov	r1, fp
 800a2dc:	f7f6 fc0c 	bl	8000af8 <__aeabi_dcmpeq>
 800a2e0:	ec4b ab19 	vmov	d9, sl, fp
 800a2e4:	4680      	mov	r8, r0
 800a2e6:	b158      	cbz	r0, 800a300 <_dtoa_r+0xe0>
 800a2e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	6013      	str	r3, [r2, #0]
 800a2ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 856b 	beq.w	800adcc <_dtoa_r+0xbac>
 800a2f6:	4883      	ldr	r0, [pc, #524]	; (800a504 <_dtoa_r+0x2e4>)
 800a2f8:	6018      	str	r0, [r3, #0]
 800a2fa:	1e43      	subs	r3, r0, #1
 800a2fc:	9301      	str	r3, [sp, #4]
 800a2fe:	e7df      	b.n	800a2c0 <_dtoa_r+0xa0>
 800a300:	ec4b ab10 	vmov	d0, sl, fp
 800a304:	aa10      	add	r2, sp, #64	; 0x40
 800a306:	a911      	add	r1, sp, #68	; 0x44
 800a308:	4620      	mov	r0, r4
 800a30a:	f001 fd13 	bl	800bd34 <__d2b>
 800a30e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a312:	ee08 0a10 	vmov	s16, r0
 800a316:	2d00      	cmp	r5, #0
 800a318:	f000 8084 	beq.w	800a424 <_dtoa_r+0x204>
 800a31c:	ee19 3a90 	vmov	r3, s19
 800a320:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a324:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a328:	4656      	mov	r6, sl
 800a32a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a32e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a332:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a336:	4b74      	ldr	r3, [pc, #464]	; (800a508 <_dtoa_r+0x2e8>)
 800a338:	2200      	movs	r2, #0
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f5 ffbb 	bl	80002b8 <__aeabi_dsub>
 800a342:	a365      	add	r3, pc, #404	; (adr r3, 800a4d8 <_dtoa_r+0x2b8>)
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f7f6 f96e 	bl	8000628 <__aeabi_dmul>
 800a34c:	a364      	add	r3, pc, #400	; (adr r3, 800a4e0 <_dtoa_r+0x2c0>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f7f5 ffb3 	bl	80002bc <__adddf3>
 800a356:	4606      	mov	r6, r0
 800a358:	4628      	mov	r0, r5
 800a35a:	460f      	mov	r7, r1
 800a35c:	f7f6 f8fa 	bl	8000554 <__aeabi_i2d>
 800a360:	a361      	add	r3, pc, #388	; (adr r3, 800a4e8 <_dtoa_r+0x2c8>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	f7f6 f95f 	bl	8000628 <__aeabi_dmul>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4630      	mov	r0, r6
 800a370:	4639      	mov	r1, r7
 800a372:	f7f5 ffa3 	bl	80002bc <__adddf3>
 800a376:	4606      	mov	r6, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	f7f6 fc05 	bl	8000b88 <__aeabi_d2iz>
 800a37e:	2200      	movs	r2, #0
 800a380:	9000      	str	r0, [sp, #0]
 800a382:	2300      	movs	r3, #0
 800a384:	4630      	mov	r0, r6
 800a386:	4639      	mov	r1, r7
 800a388:	f7f6 fbc0 	bl	8000b0c <__aeabi_dcmplt>
 800a38c:	b150      	cbz	r0, 800a3a4 <_dtoa_r+0x184>
 800a38e:	9800      	ldr	r0, [sp, #0]
 800a390:	f7f6 f8e0 	bl	8000554 <__aeabi_i2d>
 800a394:	4632      	mov	r2, r6
 800a396:	463b      	mov	r3, r7
 800a398:	f7f6 fbae 	bl	8000af8 <__aeabi_dcmpeq>
 800a39c:	b910      	cbnz	r0, 800a3a4 <_dtoa_r+0x184>
 800a39e:	9b00      	ldr	r3, [sp, #0]
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	9b00      	ldr	r3, [sp, #0]
 800a3a6:	2b16      	cmp	r3, #22
 800a3a8:	d85a      	bhi.n	800a460 <_dtoa_r+0x240>
 800a3aa:	9a00      	ldr	r2, [sp, #0]
 800a3ac:	4b57      	ldr	r3, [pc, #348]	; (800a50c <_dtoa_r+0x2ec>)
 800a3ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	ec51 0b19 	vmov	r0, r1, d9
 800a3ba:	f7f6 fba7 	bl	8000b0c <__aeabi_dcmplt>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d050      	beq.n	800a464 <_dtoa_r+0x244>
 800a3c2:	9b00      	ldr	r3, [sp, #0]
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3ce:	1b5d      	subs	r5, r3, r5
 800a3d0:	1e6b      	subs	r3, r5, #1
 800a3d2:	9305      	str	r3, [sp, #20]
 800a3d4:	bf45      	ittet	mi
 800a3d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a3da:	9304      	strmi	r3, [sp, #16]
 800a3dc:	2300      	movpl	r3, #0
 800a3de:	2300      	movmi	r3, #0
 800a3e0:	bf4c      	ite	mi
 800a3e2:	9305      	strmi	r3, [sp, #20]
 800a3e4:	9304      	strpl	r3, [sp, #16]
 800a3e6:	9b00      	ldr	r3, [sp, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	db3d      	blt.n	800a468 <_dtoa_r+0x248>
 800a3ec:	9b05      	ldr	r3, [sp, #20]
 800a3ee:	9a00      	ldr	r2, [sp, #0]
 800a3f0:	920a      	str	r2, [sp, #40]	; 0x28
 800a3f2:	4413      	add	r3, r2
 800a3f4:	9305      	str	r3, [sp, #20]
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	9307      	str	r3, [sp, #28]
 800a3fa:	9b06      	ldr	r3, [sp, #24]
 800a3fc:	2b09      	cmp	r3, #9
 800a3fe:	f200 8089 	bhi.w	800a514 <_dtoa_r+0x2f4>
 800a402:	2b05      	cmp	r3, #5
 800a404:	bfc4      	itt	gt
 800a406:	3b04      	subgt	r3, #4
 800a408:	9306      	strgt	r3, [sp, #24]
 800a40a:	9b06      	ldr	r3, [sp, #24]
 800a40c:	f1a3 0302 	sub.w	r3, r3, #2
 800a410:	bfcc      	ite	gt
 800a412:	2500      	movgt	r5, #0
 800a414:	2501      	movle	r5, #1
 800a416:	2b03      	cmp	r3, #3
 800a418:	f200 8087 	bhi.w	800a52a <_dtoa_r+0x30a>
 800a41c:	e8df f003 	tbb	[pc, r3]
 800a420:	59383a2d 	.word	0x59383a2d
 800a424:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a428:	441d      	add	r5, r3
 800a42a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a42e:	2b20      	cmp	r3, #32
 800a430:	bfc1      	itttt	gt
 800a432:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a436:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a43a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a43e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a442:	bfda      	itte	le
 800a444:	f1c3 0320 	rsble	r3, r3, #32
 800a448:	fa06 f003 	lslle.w	r0, r6, r3
 800a44c:	4318      	orrgt	r0, r3
 800a44e:	f7f6 f871 	bl	8000534 <__aeabi_ui2d>
 800a452:	2301      	movs	r3, #1
 800a454:	4606      	mov	r6, r0
 800a456:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a45a:	3d01      	subs	r5, #1
 800a45c:	930e      	str	r3, [sp, #56]	; 0x38
 800a45e:	e76a      	b.n	800a336 <_dtoa_r+0x116>
 800a460:	2301      	movs	r3, #1
 800a462:	e7b2      	b.n	800a3ca <_dtoa_r+0x1aa>
 800a464:	900b      	str	r0, [sp, #44]	; 0x2c
 800a466:	e7b1      	b.n	800a3cc <_dtoa_r+0x1ac>
 800a468:	9b04      	ldr	r3, [sp, #16]
 800a46a:	9a00      	ldr	r2, [sp, #0]
 800a46c:	1a9b      	subs	r3, r3, r2
 800a46e:	9304      	str	r3, [sp, #16]
 800a470:	4253      	negs	r3, r2
 800a472:	9307      	str	r3, [sp, #28]
 800a474:	2300      	movs	r3, #0
 800a476:	930a      	str	r3, [sp, #40]	; 0x28
 800a478:	e7bf      	b.n	800a3fa <_dtoa_r+0x1da>
 800a47a:	2300      	movs	r3, #0
 800a47c:	9308      	str	r3, [sp, #32]
 800a47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a480:	2b00      	cmp	r3, #0
 800a482:	dc55      	bgt.n	800a530 <_dtoa_r+0x310>
 800a484:	2301      	movs	r3, #1
 800a486:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a48a:	461a      	mov	r2, r3
 800a48c:	9209      	str	r2, [sp, #36]	; 0x24
 800a48e:	e00c      	b.n	800a4aa <_dtoa_r+0x28a>
 800a490:	2301      	movs	r3, #1
 800a492:	e7f3      	b.n	800a47c <_dtoa_r+0x25c>
 800a494:	2300      	movs	r3, #0
 800a496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a498:	9308      	str	r3, [sp, #32]
 800a49a:	9b00      	ldr	r3, [sp, #0]
 800a49c:	4413      	add	r3, r2
 800a49e:	9302      	str	r3, [sp, #8]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	9303      	str	r3, [sp, #12]
 800a4a6:	bfb8      	it	lt
 800a4a8:	2301      	movlt	r3, #1
 800a4aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	6042      	str	r2, [r0, #4]
 800a4b0:	2204      	movs	r2, #4
 800a4b2:	f102 0614 	add.w	r6, r2, #20
 800a4b6:	429e      	cmp	r6, r3
 800a4b8:	6841      	ldr	r1, [r0, #4]
 800a4ba:	d93d      	bls.n	800a538 <_dtoa_r+0x318>
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f001 f84b 	bl	800b558 <_Balloc>
 800a4c2:	9001      	str	r0, [sp, #4]
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d13b      	bne.n	800a540 <_dtoa_r+0x320>
 800a4c8:	4b11      	ldr	r3, [pc, #68]	; (800a510 <_dtoa_r+0x2f0>)
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4d0:	e6c0      	b.n	800a254 <_dtoa_r+0x34>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e7df      	b.n	800a496 <_dtoa_r+0x276>
 800a4d6:	bf00      	nop
 800a4d8:	636f4361 	.word	0x636f4361
 800a4dc:	3fd287a7 	.word	0x3fd287a7
 800a4e0:	8b60c8b3 	.word	0x8b60c8b3
 800a4e4:	3fc68a28 	.word	0x3fc68a28
 800a4e8:	509f79fb 	.word	0x509f79fb
 800a4ec:	3fd34413 	.word	0x3fd34413
 800a4f0:	08010526 	.word	0x08010526
 800a4f4:	0801053d 	.word	0x0801053d
 800a4f8:	7ff00000 	.word	0x7ff00000
 800a4fc:	08010522 	.word	0x08010522
 800a500:	08010519 	.word	0x08010519
 800a504:	08010792 	.word	0x08010792
 800a508:	3ff80000 	.word	0x3ff80000
 800a50c:	080106a8 	.word	0x080106a8
 800a510:	08010598 	.word	0x08010598
 800a514:	2501      	movs	r5, #1
 800a516:	2300      	movs	r3, #0
 800a518:	9306      	str	r3, [sp, #24]
 800a51a:	9508      	str	r5, [sp, #32]
 800a51c:	f04f 33ff 	mov.w	r3, #4294967295
 800a520:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a524:	2200      	movs	r2, #0
 800a526:	2312      	movs	r3, #18
 800a528:	e7b0      	b.n	800a48c <_dtoa_r+0x26c>
 800a52a:	2301      	movs	r3, #1
 800a52c:	9308      	str	r3, [sp, #32]
 800a52e:	e7f5      	b.n	800a51c <_dtoa_r+0x2fc>
 800a530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a532:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a536:	e7b8      	b.n	800a4aa <_dtoa_r+0x28a>
 800a538:	3101      	adds	r1, #1
 800a53a:	6041      	str	r1, [r0, #4]
 800a53c:	0052      	lsls	r2, r2, #1
 800a53e:	e7b8      	b.n	800a4b2 <_dtoa_r+0x292>
 800a540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a542:	9a01      	ldr	r2, [sp, #4]
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	9b03      	ldr	r3, [sp, #12]
 800a548:	2b0e      	cmp	r3, #14
 800a54a:	f200 809d 	bhi.w	800a688 <_dtoa_r+0x468>
 800a54e:	2d00      	cmp	r5, #0
 800a550:	f000 809a 	beq.w	800a688 <_dtoa_r+0x468>
 800a554:	9b00      	ldr	r3, [sp, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	dd32      	ble.n	800a5c0 <_dtoa_r+0x3a0>
 800a55a:	4ab7      	ldr	r2, [pc, #732]	; (800a838 <_dtoa_r+0x618>)
 800a55c:	f003 030f 	and.w	r3, r3, #15
 800a560:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a564:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a568:	9b00      	ldr	r3, [sp, #0]
 800a56a:	05d8      	lsls	r0, r3, #23
 800a56c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a570:	d516      	bpl.n	800a5a0 <_dtoa_r+0x380>
 800a572:	4bb2      	ldr	r3, [pc, #712]	; (800a83c <_dtoa_r+0x61c>)
 800a574:	ec51 0b19 	vmov	r0, r1, d9
 800a578:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a57c:	f7f6 f97e 	bl	800087c <__aeabi_ddiv>
 800a580:	f007 070f 	and.w	r7, r7, #15
 800a584:	4682      	mov	sl, r0
 800a586:	468b      	mov	fp, r1
 800a588:	2503      	movs	r5, #3
 800a58a:	4eac      	ldr	r6, [pc, #688]	; (800a83c <_dtoa_r+0x61c>)
 800a58c:	b957      	cbnz	r7, 800a5a4 <_dtoa_r+0x384>
 800a58e:	4642      	mov	r2, r8
 800a590:	464b      	mov	r3, r9
 800a592:	4650      	mov	r0, sl
 800a594:	4659      	mov	r1, fp
 800a596:	f7f6 f971 	bl	800087c <__aeabi_ddiv>
 800a59a:	4682      	mov	sl, r0
 800a59c:	468b      	mov	fp, r1
 800a59e:	e028      	b.n	800a5f2 <_dtoa_r+0x3d2>
 800a5a0:	2502      	movs	r5, #2
 800a5a2:	e7f2      	b.n	800a58a <_dtoa_r+0x36a>
 800a5a4:	07f9      	lsls	r1, r7, #31
 800a5a6:	d508      	bpl.n	800a5ba <_dtoa_r+0x39a>
 800a5a8:	4640      	mov	r0, r8
 800a5aa:	4649      	mov	r1, r9
 800a5ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5b0:	f7f6 f83a 	bl	8000628 <__aeabi_dmul>
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	4680      	mov	r8, r0
 800a5b8:	4689      	mov	r9, r1
 800a5ba:	107f      	asrs	r7, r7, #1
 800a5bc:	3608      	adds	r6, #8
 800a5be:	e7e5      	b.n	800a58c <_dtoa_r+0x36c>
 800a5c0:	f000 809b 	beq.w	800a6fa <_dtoa_r+0x4da>
 800a5c4:	9b00      	ldr	r3, [sp, #0]
 800a5c6:	4f9d      	ldr	r7, [pc, #628]	; (800a83c <_dtoa_r+0x61c>)
 800a5c8:	425e      	negs	r6, r3
 800a5ca:	4b9b      	ldr	r3, [pc, #620]	; (800a838 <_dtoa_r+0x618>)
 800a5cc:	f006 020f 	and.w	r2, r6, #15
 800a5d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d8:	ec51 0b19 	vmov	r0, r1, d9
 800a5dc:	f7f6 f824 	bl	8000628 <__aeabi_dmul>
 800a5e0:	1136      	asrs	r6, r6, #4
 800a5e2:	4682      	mov	sl, r0
 800a5e4:	468b      	mov	fp, r1
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	2502      	movs	r5, #2
 800a5ea:	2e00      	cmp	r6, #0
 800a5ec:	d17a      	bne.n	800a6e4 <_dtoa_r+0x4c4>
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1d3      	bne.n	800a59a <_dtoa_r+0x37a>
 800a5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f000 8082 	beq.w	800a6fe <_dtoa_r+0x4de>
 800a5fa:	4b91      	ldr	r3, [pc, #580]	; (800a840 <_dtoa_r+0x620>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	4650      	mov	r0, sl
 800a600:	4659      	mov	r1, fp
 800a602:	f7f6 fa83 	bl	8000b0c <__aeabi_dcmplt>
 800a606:	2800      	cmp	r0, #0
 800a608:	d079      	beq.n	800a6fe <_dtoa_r+0x4de>
 800a60a:	9b03      	ldr	r3, [sp, #12]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d076      	beq.n	800a6fe <_dtoa_r+0x4de>
 800a610:	9b02      	ldr	r3, [sp, #8]
 800a612:	2b00      	cmp	r3, #0
 800a614:	dd36      	ble.n	800a684 <_dtoa_r+0x464>
 800a616:	9b00      	ldr	r3, [sp, #0]
 800a618:	4650      	mov	r0, sl
 800a61a:	4659      	mov	r1, fp
 800a61c:	1e5f      	subs	r7, r3, #1
 800a61e:	2200      	movs	r2, #0
 800a620:	4b88      	ldr	r3, [pc, #544]	; (800a844 <_dtoa_r+0x624>)
 800a622:	f7f6 f801 	bl	8000628 <__aeabi_dmul>
 800a626:	9e02      	ldr	r6, [sp, #8]
 800a628:	4682      	mov	sl, r0
 800a62a:	468b      	mov	fp, r1
 800a62c:	3501      	adds	r5, #1
 800a62e:	4628      	mov	r0, r5
 800a630:	f7f5 ff90 	bl	8000554 <__aeabi_i2d>
 800a634:	4652      	mov	r2, sl
 800a636:	465b      	mov	r3, fp
 800a638:	f7f5 fff6 	bl	8000628 <__aeabi_dmul>
 800a63c:	4b82      	ldr	r3, [pc, #520]	; (800a848 <_dtoa_r+0x628>)
 800a63e:	2200      	movs	r2, #0
 800a640:	f7f5 fe3c 	bl	80002bc <__adddf3>
 800a644:	46d0      	mov	r8, sl
 800a646:	46d9      	mov	r9, fp
 800a648:	4682      	mov	sl, r0
 800a64a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a64e:	2e00      	cmp	r6, #0
 800a650:	d158      	bne.n	800a704 <_dtoa_r+0x4e4>
 800a652:	4b7e      	ldr	r3, [pc, #504]	; (800a84c <_dtoa_r+0x62c>)
 800a654:	2200      	movs	r2, #0
 800a656:	4640      	mov	r0, r8
 800a658:	4649      	mov	r1, r9
 800a65a:	f7f5 fe2d 	bl	80002b8 <__aeabi_dsub>
 800a65e:	4652      	mov	r2, sl
 800a660:	465b      	mov	r3, fp
 800a662:	4680      	mov	r8, r0
 800a664:	4689      	mov	r9, r1
 800a666:	f7f6 fa6f 	bl	8000b48 <__aeabi_dcmpgt>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	f040 8295 	bne.w	800ab9a <_dtoa_r+0x97a>
 800a670:	4652      	mov	r2, sl
 800a672:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a676:	4640      	mov	r0, r8
 800a678:	4649      	mov	r1, r9
 800a67a:	f7f6 fa47 	bl	8000b0c <__aeabi_dcmplt>
 800a67e:	2800      	cmp	r0, #0
 800a680:	f040 8289 	bne.w	800ab96 <_dtoa_r+0x976>
 800a684:	ec5b ab19 	vmov	sl, fp, d9
 800a688:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f2c0 8148 	blt.w	800a920 <_dtoa_r+0x700>
 800a690:	9a00      	ldr	r2, [sp, #0]
 800a692:	2a0e      	cmp	r2, #14
 800a694:	f300 8144 	bgt.w	800a920 <_dtoa_r+0x700>
 800a698:	4b67      	ldr	r3, [pc, #412]	; (800a838 <_dtoa_r+0x618>)
 800a69a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a69e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f280 80d5 	bge.w	800a854 <_dtoa_r+0x634>
 800a6aa:	9b03      	ldr	r3, [sp, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f300 80d1 	bgt.w	800a854 <_dtoa_r+0x634>
 800a6b2:	f040 826f 	bne.w	800ab94 <_dtoa_r+0x974>
 800a6b6:	4b65      	ldr	r3, [pc, #404]	; (800a84c <_dtoa_r+0x62c>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	4649      	mov	r1, r9
 800a6be:	f7f5 ffb3 	bl	8000628 <__aeabi_dmul>
 800a6c2:	4652      	mov	r2, sl
 800a6c4:	465b      	mov	r3, fp
 800a6c6:	f7f6 fa35 	bl	8000b34 <__aeabi_dcmpge>
 800a6ca:	9e03      	ldr	r6, [sp, #12]
 800a6cc:	4637      	mov	r7, r6
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f040 8245 	bne.w	800ab5e <_dtoa_r+0x93e>
 800a6d4:	9d01      	ldr	r5, [sp, #4]
 800a6d6:	2331      	movs	r3, #49	; 0x31
 800a6d8:	f805 3b01 	strb.w	r3, [r5], #1
 800a6dc:	9b00      	ldr	r3, [sp, #0]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	e240      	b.n	800ab66 <_dtoa_r+0x946>
 800a6e4:	07f2      	lsls	r2, r6, #31
 800a6e6:	d505      	bpl.n	800a6f4 <_dtoa_r+0x4d4>
 800a6e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ec:	f7f5 ff9c 	bl	8000628 <__aeabi_dmul>
 800a6f0:	3501      	adds	r5, #1
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	1076      	asrs	r6, r6, #1
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	e777      	b.n	800a5ea <_dtoa_r+0x3ca>
 800a6fa:	2502      	movs	r5, #2
 800a6fc:	e779      	b.n	800a5f2 <_dtoa_r+0x3d2>
 800a6fe:	9f00      	ldr	r7, [sp, #0]
 800a700:	9e03      	ldr	r6, [sp, #12]
 800a702:	e794      	b.n	800a62e <_dtoa_r+0x40e>
 800a704:	9901      	ldr	r1, [sp, #4]
 800a706:	4b4c      	ldr	r3, [pc, #304]	; (800a838 <_dtoa_r+0x618>)
 800a708:	4431      	add	r1, r6
 800a70a:	910d      	str	r1, [sp, #52]	; 0x34
 800a70c:	9908      	ldr	r1, [sp, #32]
 800a70e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a712:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a716:	2900      	cmp	r1, #0
 800a718:	d043      	beq.n	800a7a2 <_dtoa_r+0x582>
 800a71a:	494d      	ldr	r1, [pc, #308]	; (800a850 <_dtoa_r+0x630>)
 800a71c:	2000      	movs	r0, #0
 800a71e:	f7f6 f8ad 	bl	800087c <__aeabi_ddiv>
 800a722:	4652      	mov	r2, sl
 800a724:	465b      	mov	r3, fp
 800a726:	f7f5 fdc7 	bl	80002b8 <__aeabi_dsub>
 800a72a:	9d01      	ldr	r5, [sp, #4]
 800a72c:	4682      	mov	sl, r0
 800a72e:	468b      	mov	fp, r1
 800a730:	4649      	mov	r1, r9
 800a732:	4640      	mov	r0, r8
 800a734:	f7f6 fa28 	bl	8000b88 <__aeabi_d2iz>
 800a738:	4606      	mov	r6, r0
 800a73a:	f7f5 ff0b 	bl	8000554 <__aeabi_i2d>
 800a73e:	4602      	mov	r2, r0
 800a740:	460b      	mov	r3, r1
 800a742:	4640      	mov	r0, r8
 800a744:	4649      	mov	r1, r9
 800a746:	f7f5 fdb7 	bl	80002b8 <__aeabi_dsub>
 800a74a:	3630      	adds	r6, #48	; 0x30
 800a74c:	f805 6b01 	strb.w	r6, [r5], #1
 800a750:	4652      	mov	r2, sl
 800a752:	465b      	mov	r3, fp
 800a754:	4680      	mov	r8, r0
 800a756:	4689      	mov	r9, r1
 800a758:	f7f6 f9d8 	bl	8000b0c <__aeabi_dcmplt>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d163      	bne.n	800a828 <_dtoa_r+0x608>
 800a760:	4642      	mov	r2, r8
 800a762:	464b      	mov	r3, r9
 800a764:	4936      	ldr	r1, [pc, #216]	; (800a840 <_dtoa_r+0x620>)
 800a766:	2000      	movs	r0, #0
 800a768:	f7f5 fda6 	bl	80002b8 <__aeabi_dsub>
 800a76c:	4652      	mov	r2, sl
 800a76e:	465b      	mov	r3, fp
 800a770:	f7f6 f9cc 	bl	8000b0c <__aeabi_dcmplt>
 800a774:	2800      	cmp	r0, #0
 800a776:	f040 80b5 	bne.w	800a8e4 <_dtoa_r+0x6c4>
 800a77a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a77c:	429d      	cmp	r5, r3
 800a77e:	d081      	beq.n	800a684 <_dtoa_r+0x464>
 800a780:	4b30      	ldr	r3, [pc, #192]	; (800a844 <_dtoa_r+0x624>)
 800a782:	2200      	movs	r2, #0
 800a784:	4650      	mov	r0, sl
 800a786:	4659      	mov	r1, fp
 800a788:	f7f5 ff4e 	bl	8000628 <__aeabi_dmul>
 800a78c:	4b2d      	ldr	r3, [pc, #180]	; (800a844 <_dtoa_r+0x624>)
 800a78e:	4682      	mov	sl, r0
 800a790:	468b      	mov	fp, r1
 800a792:	4640      	mov	r0, r8
 800a794:	4649      	mov	r1, r9
 800a796:	2200      	movs	r2, #0
 800a798:	f7f5 ff46 	bl	8000628 <__aeabi_dmul>
 800a79c:	4680      	mov	r8, r0
 800a79e:	4689      	mov	r9, r1
 800a7a0:	e7c6      	b.n	800a730 <_dtoa_r+0x510>
 800a7a2:	4650      	mov	r0, sl
 800a7a4:	4659      	mov	r1, fp
 800a7a6:	f7f5 ff3f 	bl	8000628 <__aeabi_dmul>
 800a7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7ac:	9d01      	ldr	r5, [sp, #4]
 800a7ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7b0:	4682      	mov	sl, r0
 800a7b2:	468b      	mov	fp, r1
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	f7f6 f9e6 	bl	8000b88 <__aeabi_d2iz>
 800a7bc:	4606      	mov	r6, r0
 800a7be:	f7f5 fec9 	bl	8000554 <__aeabi_i2d>
 800a7c2:	3630      	adds	r6, #48	; 0x30
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	4649      	mov	r1, r9
 800a7cc:	f7f5 fd74 	bl	80002b8 <__aeabi_dsub>
 800a7d0:	f805 6b01 	strb.w	r6, [r5], #1
 800a7d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7d6:	429d      	cmp	r5, r3
 800a7d8:	4680      	mov	r8, r0
 800a7da:	4689      	mov	r9, r1
 800a7dc:	f04f 0200 	mov.w	r2, #0
 800a7e0:	d124      	bne.n	800a82c <_dtoa_r+0x60c>
 800a7e2:	4b1b      	ldr	r3, [pc, #108]	; (800a850 <_dtoa_r+0x630>)
 800a7e4:	4650      	mov	r0, sl
 800a7e6:	4659      	mov	r1, fp
 800a7e8:	f7f5 fd68 	bl	80002bc <__adddf3>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4640      	mov	r0, r8
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	f7f6 f9a8 	bl	8000b48 <__aeabi_dcmpgt>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d173      	bne.n	800a8e4 <_dtoa_r+0x6c4>
 800a7fc:	4652      	mov	r2, sl
 800a7fe:	465b      	mov	r3, fp
 800a800:	4913      	ldr	r1, [pc, #76]	; (800a850 <_dtoa_r+0x630>)
 800a802:	2000      	movs	r0, #0
 800a804:	f7f5 fd58 	bl	80002b8 <__aeabi_dsub>
 800a808:	4602      	mov	r2, r0
 800a80a:	460b      	mov	r3, r1
 800a80c:	4640      	mov	r0, r8
 800a80e:	4649      	mov	r1, r9
 800a810:	f7f6 f97c 	bl	8000b0c <__aeabi_dcmplt>
 800a814:	2800      	cmp	r0, #0
 800a816:	f43f af35 	beq.w	800a684 <_dtoa_r+0x464>
 800a81a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a81c:	1e6b      	subs	r3, r5, #1
 800a81e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a820:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a824:	2b30      	cmp	r3, #48	; 0x30
 800a826:	d0f8      	beq.n	800a81a <_dtoa_r+0x5fa>
 800a828:	9700      	str	r7, [sp, #0]
 800a82a:	e049      	b.n	800a8c0 <_dtoa_r+0x6a0>
 800a82c:	4b05      	ldr	r3, [pc, #20]	; (800a844 <_dtoa_r+0x624>)
 800a82e:	f7f5 fefb 	bl	8000628 <__aeabi_dmul>
 800a832:	4680      	mov	r8, r0
 800a834:	4689      	mov	r9, r1
 800a836:	e7bd      	b.n	800a7b4 <_dtoa_r+0x594>
 800a838:	080106a8 	.word	0x080106a8
 800a83c:	08010680 	.word	0x08010680
 800a840:	3ff00000 	.word	0x3ff00000
 800a844:	40240000 	.word	0x40240000
 800a848:	401c0000 	.word	0x401c0000
 800a84c:	40140000 	.word	0x40140000
 800a850:	3fe00000 	.word	0x3fe00000
 800a854:	9d01      	ldr	r5, [sp, #4]
 800a856:	4656      	mov	r6, sl
 800a858:	465f      	mov	r7, fp
 800a85a:	4642      	mov	r2, r8
 800a85c:	464b      	mov	r3, r9
 800a85e:	4630      	mov	r0, r6
 800a860:	4639      	mov	r1, r7
 800a862:	f7f6 f80b 	bl	800087c <__aeabi_ddiv>
 800a866:	f7f6 f98f 	bl	8000b88 <__aeabi_d2iz>
 800a86a:	4682      	mov	sl, r0
 800a86c:	f7f5 fe72 	bl	8000554 <__aeabi_i2d>
 800a870:	4642      	mov	r2, r8
 800a872:	464b      	mov	r3, r9
 800a874:	f7f5 fed8 	bl	8000628 <__aeabi_dmul>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	4630      	mov	r0, r6
 800a87e:	4639      	mov	r1, r7
 800a880:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a884:	f7f5 fd18 	bl	80002b8 <__aeabi_dsub>
 800a888:	f805 6b01 	strb.w	r6, [r5], #1
 800a88c:	9e01      	ldr	r6, [sp, #4]
 800a88e:	9f03      	ldr	r7, [sp, #12]
 800a890:	1bae      	subs	r6, r5, r6
 800a892:	42b7      	cmp	r7, r6
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	d135      	bne.n	800a906 <_dtoa_r+0x6e6>
 800a89a:	f7f5 fd0f 	bl	80002bc <__adddf3>
 800a89e:	4642      	mov	r2, r8
 800a8a0:	464b      	mov	r3, r9
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	460f      	mov	r7, r1
 800a8a6:	f7f6 f94f 	bl	8000b48 <__aeabi_dcmpgt>
 800a8aa:	b9d0      	cbnz	r0, 800a8e2 <_dtoa_r+0x6c2>
 800a8ac:	4642      	mov	r2, r8
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	4639      	mov	r1, r7
 800a8b4:	f7f6 f920 	bl	8000af8 <__aeabi_dcmpeq>
 800a8b8:	b110      	cbz	r0, 800a8c0 <_dtoa_r+0x6a0>
 800a8ba:	f01a 0f01 	tst.w	sl, #1
 800a8be:	d110      	bne.n	800a8e2 <_dtoa_r+0x6c2>
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	ee18 1a10 	vmov	r1, s16
 800a8c6:	f000 fe87 	bl	800b5d8 <_Bfree>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	9800      	ldr	r0, [sp, #0]
 800a8ce:	702b      	strb	r3, [r5, #0]
 800a8d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	6018      	str	r0, [r3, #0]
 800a8d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f43f acf1 	beq.w	800a2c0 <_dtoa_r+0xa0>
 800a8de:	601d      	str	r5, [r3, #0]
 800a8e0:	e4ee      	b.n	800a2c0 <_dtoa_r+0xa0>
 800a8e2:	9f00      	ldr	r7, [sp, #0]
 800a8e4:	462b      	mov	r3, r5
 800a8e6:	461d      	mov	r5, r3
 800a8e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8ec:	2a39      	cmp	r2, #57	; 0x39
 800a8ee:	d106      	bne.n	800a8fe <_dtoa_r+0x6de>
 800a8f0:	9a01      	ldr	r2, [sp, #4]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d1f7      	bne.n	800a8e6 <_dtoa_r+0x6c6>
 800a8f6:	9901      	ldr	r1, [sp, #4]
 800a8f8:	2230      	movs	r2, #48	; 0x30
 800a8fa:	3701      	adds	r7, #1
 800a8fc:	700a      	strb	r2, [r1, #0]
 800a8fe:	781a      	ldrb	r2, [r3, #0]
 800a900:	3201      	adds	r2, #1
 800a902:	701a      	strb	r2, [r3, #0]
 800a904:	e790      	b.n	800a828 <_dtoa_r+0x608>
 800a906:	4ba6      	ldr	r3, [pc, #664]	; (800aba0 <_dtoa_r+0x980>)
 800a908:	2200      	movs	r2, #0
 800a90a:	f7f5 fe8d 	bl	8000628 <__aeabi_dmul>
 800a90e:	2200      	movs	r2, #0
 800a910:	2300      	movs	r3, #0
 800a912:	4606      	mov	r6, r0
 800a914:	460f      	mov	r7, r1
 800a916:	f7f6 f8ef 	bl	8000af8 <__aeabi_dcmpeq>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d09d      	beq.n	800a85a <_dtoa_r+0x63a>
 800a91e:	e7cf      	b.n	800a8c0 <_dtoa_r+0x6a0>
 800a920:	9a08      	ldr	r2, [sp, #32]
 800a922:	2a00      	cmp	r2, #0
 800a924:	f000 80d7 	beq.w	800aad6 <_dtoa_r+0x8b6>
 800a928:	9a06      	ldr	r2, [sp, #24]
 800a92a:	2a01      	cmp	r2, #1
 800a92c:	f300 80ba 	bgt.w	800aaa4 <_dtoa_r+0x884>
 800a930:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a932:	2a00      	cmp	r2, #0
 800a934:	f000 80b2 	beq.w	800aa9c <_dtoa_r+0x87c>
 800a938:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a93c:	9e07      	ldr	r6, [sp, #28]
 800a93e:	9d04      	ldr	r5, [sp, #16]
 800a940:	9a04      	ldr	r2, [sp, #16]
 800a942:	441a      	add	r2, r3
 800a944:	9204      	str	r2, [sp, #16]
 800a946:	9a05      	ldr	r2, [sp, #20]
 800a948:	2101      	movs	r1, #1
 800a94a:	441a      	add	r2, r3
 800a94c:	4620      	mov	r0, r4
 800a94e:	9205      	str	r2, [sp, #20]
 800a950:	f000 ff44 	bl	800b7dc <__i2b>
 800a954:	4607      	mov	r7, r0
 800a956:	2d00      	cmp	r5, #0
 800a958:	dd0c      	ble.n	800a974 <_dtoa_r+0x754>
 800a95a:	9b05      	ldr	r3, [sp, #20]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dd09      	ble.n	800a974 <_dtoa_r+0x754>
 800a960:	42ab      	cmp	r3, r5
 800a962:	9a04      	ldr	r2, [sp, #16]
 800a964:	bfa8      	it	ge
 800a966:	462b      	movge	r3, r5
 800a968:	1ad2      	subs	r2, r2, r3
 800a96a:	9204      	str	r2, [sp, #16]
 800a96c:	9a05      	ldr	r2, [sp, #20]
 800a96e:	1aed      	subs	r5, r5, r3
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	9305      	str	r3, [sp, #20]
 800a974:	9b07      	ldr	r3, [sp, #28]
 800a976:	b31b      	cbz	r3, 800a9c0 <_dtoa_r+0x7a0>
 800a978:	9b08      	ldr	r3, [sp, #32]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f000 80af 	beq.w	800aade <_dtoa_r+0x8be>
 800a980:	2e00      	cmp	r6, #0
 800a982:	dd13      	ble.n	800a9ac <_dtoa_r+0x78c>
 800a984:	4639      	mov	r1, r7
 800a986:	4632      	mov	r2, r6
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 ffe7 	bl	800b95c <__pow5mult>
 800a98e:	ee18 2a10 	vmov	r2, s16
 800a992:	4601      	mov	r1, r0
 800a994:	4607      	mov	r7, r0
 800a996:	4620      	mov	r0, r4
 800a998:	f000 ff36 	bl	800b808 <__multiply>
 800a99c:	ee18 1a10 	vmov	r1, s16
 800a9a0:	4680      	mov	r8, r0
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 fe18 	bl	800b5d8 <_Bfree>
 800a9a8:	ee08 8a10 	vmov	s16, r8
 800a9ac:	9b07      	ldr	r3, [sp, #28]
 800a9ae:	1b9a      	subs	r2, r3, r6
 800a9b0:	d006      	beq.n	800a9c0 <_dtoa_r+0x7a0>
 800a9b2:	ee18 1a10 	vmov	r1, s16
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 ffd0 	bl	800b95c <__pow5mult>
 800a9bc:	ee08 0a10 	vmov	s16, r0
 800a9c0:	2101      	movs	r1, #1
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 ff0a 	bl	800b7dc <__i2b>
 800a9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	4606      	mov	r6, r0
 800a9ce:	f340 8088 	ble.w	800aae2 <_dtoa_r+0x8c2>
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	4601      	mov	r1, r0
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f000 ffc0 	bl	800b95c <__pow5mult>
 800a9dc:	9b06      	ldr	r3, [sp, #24]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	f340 8081 	ble.w	800aae8 <_dtoa_r+0x8c8>
 800a9e6:	f04f 0800 	mov.w	r8, #0
 800a9ea:	6933      	ldr	r3, [r6, #16]
 800a9ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a9f0:	6918      	ldr	r0, [r3, #16]
 800a9f2:	f000 fea3 	bl	800b73c <__hi0bits>
 800a9f6:	f1c0 0020 	rsb	r0, r0, #32
 800a9fa:	9b05      	ldr	r3, [sp, #20]
 800a9fc:	4418      	add	r0, r3
 800a9fe:	f010 001f 	ands.w	r0, r0, #31
 800aa02:	f000 8092 	beq.w	800ab2a <_dtoa_r+0x90a>
 800aa06:	f1c0 0320 	rsb	r3, r0, #32
 800aa0a:	2b04      	cmp	r3, #4
 800aa0c:	f340 808a 	ble.w	800ab24 <_dtoa_r+0x904>
 800aa10:	f1c0 001c 	rsb	r0, r0, #28
 800aa14:	9b04      	ldr	r3, [sp, #16]
 800aa16:	4403      	add	r3, r0
 800aa18:	9304      	str	r3, [sp, #16]
 800aa1a:	9b05      	ldr	r3, [sp, #20]
 800aa1c:	4403      	add	r3, r0
 800aa1e:	4405      	add	r5, r0
 800aa20:	9305      	str	r3, [sp, #20]
 800aa22:	9b04      	ldr	r3, [sp, #16]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	dd07      	ble.n	800aa38 <_dtoa_r+0x818>
 800aa28:	ee18 1a10 	vmov	r1, s16
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f000 ffee 	bl	800ba10 <__lshift>
 800aa34:	ee08 0a10 	vmov	s16, r0
 800aa38:	9b05      	ldr	r3, [sp, #20]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	dd05      	ble.n	800aa4a <_dtoa_r+0x82a>
 800aa3e:	4631      	mov	r1, r6
 800aa40:	461a      	mov	r2, r3
 800aa42:	4620      	mov	r0, r4
 800aa44:	f000 ffe4 	bl	800ba10 <__lshift>
 800aa48:	4606      	mov	r6, r0
 800aa4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d06e      	beq.n	800ab2e <_dtoa_r+0x90e>
 800aa50:	ee18 0a10 	vmov	r0, s16
 800aa54:	4631      	mov	r1, r6
 800aa56:	f001 f84b 	bl	800baf0 <__mcmp>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	da67      	bge.n	800ab2e <_dtoa_r+0x90e>
 800aa5e:	9b00      	ldr	r3, [sp, #0]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	ee18 1a10 	vmov	r1, s16
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	220a      	movs	r2, #10
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f000 fdd5 	bl	800b61c <__multadd>
 800aa72:	9b08      	ldr	r3, [sp, #32]
 800aa74:	ee08 0a10 	vmov	s16, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 81b1 	beq.w	800ade0 <_dtoa_r+0xbc0>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	4639      	mov	r1, r7
 800aa82:	220a      	movs	r2, #10
 800aa84:	4620      	mov	r0, r4
 800aa86:	f000 fdc9 	bl	800b61c <__multadd>
 800aa8a:	9b02      	ldr	r3, [sp, #8]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	4607      	mov	r7, r0
 800aa90:	f300 808e 	bgt.w	800abb0 <_dtoa_r+0x990>
 800aa94:	9b06      	ldr	r3, [sp, #24]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	dc51      	bgt.n	800ab3e <_dtoa_r+0x91e>
 800aa9a:	e089      	b.n	800abb0 <_dtoa_r+0x990>
 800aa9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aaa2:	e74b      	b.n	800a93c <_dtoa_r+0x71c>
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	1e5e      	subs	r6, r3, #1
 800aaa8:	9b07      	ldr	r3, [sp, #28]
 800aaaa:	42b3      	cmp	r3, r6
 800aaac:	bfbf      	itttt	lt
 800aaae:	9b07      	ldrlt	r3, [sp, #28]
 800aab0:	9607      	strlt	r6, [sp, #28]
 800aab2:	1af2      	sublt	r2, r6, r3
 800aab4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aab6:	bfb6      	itet	lt
 800aab8:	189b      	addlt	r3, r3, r2
 800aaba:	1b9e      	subge	r6, r3, r6
 800aabc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aabe:	9b03      	ldr	r3, [sp, #12]
 800aac0:	bfb8      	it	lt
 800aac2:	2600      	movlt	r6, #0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	bfb7      	itett	lt
 800aac8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aacc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aad0:	1a9d      	sublt	r5, r3, r2
 800aad2:	2300      	movlt	r3, #0
 800aad4:	e734      	b.n	800a940 <_dtoa_r+0x720>
 800aad6:	9e07      	ldr	r6, [sp, #28]
 800aad8:	9d04      	ldr	r5, [sp, #16]
 800aada:	9f08      	ldr	r7, [sp, #32]
 800aadc:	e73b      	b.n	800a956 <_dtoa_r+0x736>
 800aade:	9a07      	ldr	r2, [sp, #28]
 800aae0:	e767      	b.n	800a9b2 <_dtoa_r+0x792>
 800aae2:	9b06      	ldr	r3, [sp, #24]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	dc18      	bgt.n	800ab1a <_dtoa_r+0x8fa>
 800aae8:	f1ba 0f00 	cmp.w	sl, #0
 800aaec:	d115      	bne.n	800ab1a <_dtoa_r+0x8fa>
 800aaee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aaf2:	b993      	cbnz	r3, 800ab1a <_dtoa_r+0x8fa>
 800aaf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aaf8:	0d1b      	lsrs	r3, r3, #20
 800aafa:	051b      	lsls	r3, r3, #20
 800aafc:	b183      	cbz	r3, 800ab20 <_dtoa_r+0x900>
 800aafe:	9b04      	ldr	r3, [sp, #16]
 800ab00:	3301      	adds	r3, #1
 800ab02:	9304      	str	r3, [sp, #16]
 800ab04:	9b05      	ldr	r3, [sp, #20]
 800ab06:	3301      	adds	r3, #1
 800ab08:	9305      	str	r3, [sp, #20]
 800ab0a:	f04f 0801 	mov.w	r8, #1
 800ab0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f47f af6a 	bne.w	800a9ea <_dtoa_r+0x7ca>
 800ab16:	2001      	movs	r0, #1
 800ab18:	e76f      	b.n	800a9fa <_dtoa_r+0x7da>
 800ab1a:	f04f 0800 	mov.w	r8, #0
 800ab1e:	e7f6      	b.n	800ab0e <_dtoa_r+0x8ee>
 800ab20:	4698      	mov	r8, r3
 800ab22:	e7f4      	b.n	800ab0e <_dtoa_r+0x8ee>
 800ab24:	f43f af7d 	beq.w	800aa22 <_dtoa_r+0x802>
 800ab28:	4618      	mov	r0, r3
 800ab2a:	301c      	adds	r0, #28
 800ab2c:	e772      	b.n	800aa14 <_dtoa_r+0x7f4>
 800ab2e:	9b03      	ldr	r3, [sp, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	dc37      	bgt.n	800aba4 <_dtoa_r+0x984>
 800ab34:	9b06      	ldr	r3, [sp, #24]
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	dd34      	ble.n	800aba4 <_dtoa_r+0x984>
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	9302      	str	r3, [sp, #8]
 800ab3e:	9b02      	ldr	r3, [sp, #8]
 800ab40:	b96b      	cbnz	r3, 800ab5e <_dtoa_r+0x93e>
 800ab42:	4631      	mov	r1, r6
 800ab44:	2205      	movs	r2, #5
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 fd68 	bl	800b61c <__multadd>
 800ab4c:	4601      	mov	r1, r0
 800ab4e:	4606      	mov	r6, r0
 800ab50:	ee18 0a10 	vmov	r0, s16
 800ab54:	f000 ffcc 	bl	800baf0 <__mcmp>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	f73f adbb 	bgt.w	800a6d4 <_dtoa_r+0x4b4>
 800ab5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab60:	9d01      	ldr	r5, [sp, #4]
 800ab62:	43db      	mvns	r3, r3
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	f04f 0800 	mov.w	r8, #0
 800ab6a:	4631      	mov	r1, r6
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f000 fd33 	bl	800b5d8 <_Bfree>
 800ab72:	2f00      	cmp	r7, #0
 800ab74:	f43f aea4 	beq.w	800a8c0 <_dtoa_r+0x6a0>
 800ab78:	f1b8 0f00 	cmp.w	r8, #0
 800ab7c:	d005      	beq.n	800ab8a <_dtoa_r+0x96a>
 800ab7e:	45b8      	cmp	r8, r7
 800ab80:	d003      	beq.n	800ab8a <_dtoa_r+0x96a>
 800ab82:	4641      	mov	r1, r8
 800ab84:	4620      	mov	r0, r4
 800ab86:	f000 fd27 	bl	800b5d8 <_Bfree>
 800ab8a:	4639      	mov	r1, r7
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f000 fd23 	bl	800b5d8 <_Bfree>
 800ab92:	e695      	b.n	800a8c0 <_dtoa_r+0x6a0>
 800ab94:	2600      	movs	r6, #0
 800ab96:	4637      	mov	r7, r6
 800ab98:	e7e1      	b.n	800ab5e <_dtoa_r+0x93e>
 800ab9a:	9700      	str	r7, [sp, #0]
 800ab9c:	4637      	mov	r7, r6
 800ab9e:	e599      	b.n	800a6d4 <_dtoa_r+0x4b4>
 800aba0:	40240000 	.word	0x40240000
 800aba4:	9b08      	ldr	r3, [sp, #32]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f000 80ca 	beq.w	800ad40 <_dtoa_r+0xb20>
 800abac:	9b03      	ldr	r3, [sp, #12]
 800abae:	9302      	str	r3, [sp, #8]
 800abb0:	2d00      	cmp	r5, #0
 800abb2:	dd05      	ble.n	800abc0 <_dtoa_r+0x9a0>
 800abb4:	4639      	mov	r1, r7
 800abb6:	462a      	mov	r2, r5
 800abb8:	4620      	mov	r0, r4
 800abba:	f000 ff29 	bl	800ba10 <__lshift>
 800abbe:	4607      	mov	r7, r0
 800abc0:	f1b8 0f00 	cmp.w	r8, #0
 800abc4:	d05b      	beq.n	800ac7e <_dtoa_r+0xa5e>
 800abc6:	6879      	ldr	r1, [r7, #4]
 800abc8:	4620      	mov	r0, r4
 800abca:	f000 fcc5 	bl	800b558 <_Balloc>
 800abce:	4605      	mov	r5, r0
 800abd0:	b928      	cbnz	r0, 800abde <_dtoa_r+0x9be>
 800abd2:	4b87      	ldr	r3, [pc, #540]	; (800adf0 <_dtoa_r+0xbd0>)
 800abd4:	4602      	mov	r2, r0
 800abd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abda:	f7ff bb3b 	b.w	800a254 <_dtoa_r+0x34>
 800abde:	693a      	ldr	r2, [r7, #16]
 800abe0:	3202      	adds	r2, #2
 800abe2:	0092      	lsls	r2, r2, #2
 800abe4:	f107 010c 	add.w	r1, r7, #12
 800abe8:	300c      	adds	r0, #12
 800abea:	f000 fca7 	bl	800b53c <memcpy>
 800abee:	2201      	movs	r2, #1
 800abf0:	4629      	mov	r1, r5
 800abf2:	4620      	mov	r0, r4
 800abf4:	f000 ff0c 	bl	800ba10 <__lshift>
 800abf8:	9b01      	ldr	r3, [sp, #4]
 800abfa:	f103 0901 	add.w	r9, r3, #1
 800abfe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac02:	4413      	add	r3, r2
 800ac04:	9305      	str	r3, [sp, #20]
 800ac06:	f00a 0301 	and.w	r3, sl, #1
 800ac0a:	46b8      	mov	r8, r7
 800ac0c:	9304      	str	r3, [sp, #16]
 800ac0e:	4607      	mov	r7, r0
 800ac10:	4631      	mov	r1, r6
 800ac12:	ee18 0a10 	vmov	r0, s16
 800ac16:	f7ff fa77 	bl	800a108 <quorem>
 800ac1a:	4641      	mov	r1, r8
 800ac1c:	9002      	str	r0, [sp, #8]
 800ac1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac22:	ee18 0a10 	vmov	r0, s16
 800ac26:	f000 ff63 	bl	800baf0 <__mcmp>
 800ac2a:	463a      	mov	r2, r7
 800ac2c:	9003      	str	r0, [sp, #12]
 800ac2e:	4631      	mov	r1, r6
 800ac30:	4620      	mov	r0, r4
 800ac32:	f000 ff79 	bl	800bb28 <__mdiff>
 800ac36:	68c2      	ldr	r2, [r0, #12]
 800ac38:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac3c:	4605      	mov	r5, r0
 800ac3e:	bb02      	cbnz	r2, 800ac82 <_dtoa_r+0xa62>
 800ac40:	4601      	mov	r1, r0
 800ac42:	ee18 0a10 	vmov	r0, s16
 800ac46:	f000 ff53 	bl	800baf0 <__mcmp>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	4620      	mov	r0, r4
 800ac50:	9207      	str	r2, [sp, #28]
 800ac52:	f000 fcc1 	bl	800b5d8 <_Bfree>
 800ac56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ac5a:	ea43 0102 	orr.w	r1, r3, r2
 800ac5e:	9b04      	ldr	r3, [sp, #16]
 800ac60:	430b      	orrs	r3, r1
 800ac62:	464d      	mov	r5, r9
 800ac64:	d10f      	bne.n	800ac86 <_dtoa_r+0xa66>
 800ac66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac6a:	d02a      	beq.n	800acc2 <_dtoa_r+0xaa2>
 800ac6c:	9b03      	ldr	r3, [sp, #12]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	dd02      	ble.n	800ac78 <_dtoa_r+0xa58>
 800ac72:	9b02      	ldr	r3, [sp, #8]
 800ac74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ac78:	f88b a000 	strb.w	sl, [fp]
 800ac7c:	e775      	b.n	800ab6a <_dtoa_r+0x94a>
 800ac7e:	4638      	mov	r0, r7
 800ac80:	e7ba      	b.n	800abf8 <_dtoa_r+0x9d8>
 800ac82:	2201      	movs	r2, #1
 800ac84:	e7e2      	b.n	800ac4c <_dtoa_r+0xa2c>
 800ac86:	9b03      	ldr	r3, [sp, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	db04      	blt.n	800ac96 <_dtoa_r+0xa76>
 800ac8c:	9906      	ldr	r1, [sp, #24]
 800ac8e:	430b      	orrs	r3, r1
 800ac90:	9904      	ldr	r1, [sp, #16]
 800ac92:	430b      	orrs	r3, r1
 800ac94:	d122      	bne.n	800acdc <_dtoa_r+0xabc>
 800ac96:	2a00      	cmp	r2, #0
 800ac98:	ddee      	ble.n	800ac78 <_dtoa_r+0xa58>
 800ac9a:	ee18 1a10 	vmov	r1, s16
 800ac9e:	2201      	movs	r2, #1
 800aca0:	4620      	mov	r0, r4
 800aca2:	f000 feb5 	bl	800ba10 <__lshift>
 800aca6:	4631      	mov	r1, r6
 800aca8:	ee08 0a10 	vmov	s16, r0
 800acac:	f000 ff20 	bl	800baf0 <__mcmp>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	dc03      	bgt.n	800acbc <_dtoa_r+0xa9c>
 800acb4:	d1e0      	bne.n	800ac78 <_dtoa_r+0xa58>
 800acb6:	f01a 0f01 	tst.w	sl, #1
 800acba:	d0dd      	beq.n	800ac78 <_dtoa_r+0xa58>
 800acbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acc0:	d1d7      	bne.n	800ac72 <_dtoa_r+0xa52>
 800acc2:	2339      	movs	r3, #57	; 0x39
 800acc4:	f88b 3000 	strb.w	r3, [fp]
 800acc8:	462b      	mov	r3, r5
 800acca:	461d      	mov	r5, r3
 800accc:	3b01      	subs	r3, #1
 800acce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800acd2:	2a39      	cmp	r2, #57	; 0x39
 800acd4:	d071      	beq.n	800adba <_dtoa_r+0xb9a>
 800acd6:	3201      	adds	r2, #1
 800acd8:	701a      	strb	r2, [r3, #0]
 800acda:	e746      	b.n	800ab6a <_dtoa_r+0x94a>
 800acdc:	2a00      	cmp	r2, #0
 800acde:	dd07      	ble.n	800acf0 <_dtoa_r+0xad0>
 800ace0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ace4:	d0ed      	beq.n	800acc2 <_dtoa_r+0xaa2>
 800ace6:	f10a 0301 	add.w	r3, sl, #1
 800acea:	f88b 3000 	strb.w	r3, [fp]
 800acee:	e73c      	b.n	800ab6a <_dtoa_r+0x94a>
 800acf0:	9b05      	ldr	r3, [sp, #20]
 800acf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800acf6:	4599      	cmp	r9, r3
 800acf8:	d047      	beq.n	800ad8a <_dtoa_r+0xb6a>
 800acfa:	ee18 1a10 	vmov	r1, s16
 800acfe:	2300      	movs	r3, #0
 800ad00:	220a      	movs	r2, #10
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 fc8a 	bl	800b61c <__multadd>
 800ad08:	45b8      	cmp	r8, r7
 800ad0a:	ee08 0a10 	vmov	s16, r0
 800ad0e:	f04f 0300 	mov.w	r3, #0
 800ad12:	f04f 020a 	mov.w	r2, #10
 800ad16:	4641      	mov	r1, r8
 800ad18:	4620      	mov	r0, r4
 800ad1a:	d106      	bne.n	800ad2a <_dtoa_r+0xb0a>
 800ad1c:	f000 fc7e 	bl	800b61c <__multadd>
 800ad20:	4680      	mov	r8, r0
 800ad22:	4607      	mov	r7, r0
 800ad24:	f109 0901 	add.w	r9, r9, #1
 800ad28:	e772      	b.n	800ac10 <_dtoa_r+0x9f0>
 800ad2a:	f000 fc77 	bl	800b61c <__multadd>
 800ad2e:	4639      	mov	r1, r7
 800ad30:	4680      	mov	r8, r0
 800ad32:	2300      	movs	r3, #0
 800ad34:	220a      	movs	r2, #10
 800ad36:	4620      	mov	r0, r4
 800ad38:	f000 fc70 	bl	800b61c <__multadd>
 800ad3c:	4607      	mov	r7, r0
 800ad3e:	e7f1      	b.n	800ad24 <_dtoa_r+0xb04>
 800ad40:	9b03      	ldr	r3, [sp, #12]
 800ad42:	9302      	str	r3, [sp, #8]
 800ad44:	9d01      	ldr	r5, [sp, #4]
 800ad46:	ee18 0a10 	vmov	r0, s16
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	f7ff f9dc 	bl	800a108 <quorem>
 800ad50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad54:	9b01      	ldr	r3, [sp, #4]
 800ad56:	f805 ab01 	strb.w	sl, [r5], #1
 800ad5a:	1aea      	subs	r2, r5, r3
 800ad5c:	9b02      	ldr	r3, [sp, #8]
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	dd09      	ble.n	800ad76 <_dtoa_r+0xb56>
 800ad62:	ee18 1a10 	vmov	r1, s16
 800ad66:	2300      	movs	r3, #0
 800ad68:	220a      	movs	r2, #10
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f000 fc56 	bl	800b61c <__multadd>
 800ad70:	ee08 0a10 	vmov	s16, r0
 800ad74:	e7e7      	b.n	800ad46 <_dtoa_r+0xb26>
 800ad76:	9b02      	ldr	r3, [sp, #8]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bfc8      	it	gt
 800ad7c:	461d      	movgt	r5, r3
 800ad7e:	9b01      	ldr	r3, [sp, #4]
 800ad80:	bfd8      	it	le
 800ad82:	2501      	movle	r5, #1
 800ad84:	441d      	add	r5, r3
 800ad86:	f04f 0800 	mov.w	r8, #0
 800ad8a:	ee18 1a10 	vmov	r1, s16
 800ad8e:	2201      	movs	r2, #1
 800ad90:	4620      	mov	r0, r4
 800ad92:	f000 fe3d 	bl	800ba10 <__lshift>
 800ad96:	4631      	mov	r1, r6
 800ad98:	ee08 0a10 	vmov	s16, r0
 800ad9c:	f000 fea8 	bl	800baf0 <__mcmp>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	dc91      	bgt.n	800acc8 <_dtoa_r+0xaa8>
 800ada4:	d102      	bne.n	800adac <_dtoa_r+0xb8c>
 800ada6:	f01a 0f01 	tst.w	sl, #1
 800adaa:	d18d      	bne.n	800acc8 <_dtoa_r+0xaa8>
 800adac:	462b      	mov	r3, r5
 800adae:	461d      	mov	r5, r3
 800adb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adb4:	2a30      	cmp	r2, #48	; 0x30
 800adb6:	d0fa      	beq.n	800adae <_dtoa_r+0xb8e>
 800adb8:	e6d7      	b.n	800ab6a <_dtoa_r+0x94a>
 800adba:	9a01      	ldr	r2, [sp, #4]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d184      	bne.n	800acca <_dtoa_r+0xaaa>
 800adc0:	9b00      	ldr	r3, [sp, #0]
 800adc2:	3301      	adds	r3, #1
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	2331      	movs	r3, #49	; 0x31
 800adc8:	7013      	strb	r3, [r2, #0]
 800adca:	e6ce      	b.n	800ab6a <_dtoa_r+0x94a>
 800adcc:	4b09      	ldr	r3, [pc, #36]	; (800adf4 <_dtoa_r+0xbd4>)
 800adce:	f7ff ba95 	b.w	800a2fc <_dtoa_r+0xdc>
 800add2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800add4:	2b00      	cmp	r3, #0
 800add6:	f47f aa6e 	bne.w	800a2b6 <_dtoa_r+0x96>
 800adda:	4b07      	ldr	r3, [pc, #28]	; (800adf8 <_dtoa_r+0xbd8>)
 800addc:	f7ff ba8e 	b.w	800a2fc <_dtoa_r+0xdc>
 800ade0:	9b02      	ldr	r3, [sp, #8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	dcae      	bgt.n	800ad44 <_dtoa_r+0xb24>
 800ade6:	9b06      	ldr	r3, [sp, #24]
 800ade8:	2b02      	cmp	r3, #2
 800adea:	f73f aea8 	bgt.w	800ab3e <_dtoa_r+0x91e>
 800adee:	e7a9      	b.n	800ad44 <_dtoa_r+0xb24>
 800adf0:	08010598 	.word	0x08010598
 800adf4:	08010791 	.word	0x08010791
 800adf8:	08010519 	.word	0x08010519

0800adfc <rshift>:
 800adfc:	6903      	ldr	r3, [r0, #16]
 800adfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae0a:	f100 0414 	add.w	r4, r0, #20
 800ae0e:	dd45      	ble.n	800ae9c <rshift+0xa0>
 800ae10:	f011 011f 	ands.w	r1, r1, #31
 800ae14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae1c:	d10c      	bne.n	800ae38 <rshift+0x3c>
 800ae1e:	f100 0710 	add.w	r7, r0, #16
 800ae22:	4629      	mov	r1, r5
 800ae24:	42b1      	cmp	r1, r6
 800ae26:	d334      	bcc.n	800ae92 <rshift+0x96>
 800ae28:	1a9b      	subs	r3, r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	1eea      	subs	r2, r5, #3
 800ae2e:	4296      	cmp	r6, r2
 800ae30:	bf38      	it	cc
 800ae32:	2300      	movcc	r3, #0
 800ae34:	4423      	add	r3, r4
 800ae36:	e015      	b.n	800ae64 <rshift+0x68>
 800ae38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae3c:	f1c1 0820 	rsb	r8, r1, #32
 800ae40:	40cf      	lsrs	r7, r1
 800ae42:	f105 0e04 	add.w	lr, r5, #4
 800ae46:	46a1      	mov	r9, r4
 800ae48:	4576      	cmp	r6, lr
 800ae4a:	46f4      	mov	ip, lr
 800ae4c:	d815      	bhi.n	800ae7a <rshift+0x7e>
 800ae4e:	1a9a      	subs	r2, r3, r2
 800ae50:	0092      	lsls	r2, r2, #2
 800ae52:	3a04      	subs	r2, #4
 800ae54:	3501      	adds	r5, #1
 800ae56:	42ae      	cmp	r6, r5
 800ae58:	bf38      	it	cc
 800ae5a:	2200      	movcc	r2, #0
 800ae5c:	18a3      	adds	r3, r4, r2
 800ae5e:	50a7      	str	r7, [r4, r2]
 800ae60:	b107      	cbz	r7, 800ae64 <rshift+0x68>
 800ae62:	3304      	adds	r3, #4
 800ae64:	1b1a      	subs	r2, r3, r4
 800ae66:	42a3      	cmp	r3, r4
 800ae68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae6c:	bf08      	it	eq
 800ae6e:	2300      	moveq	r3, #0
 800ae70:	6102      	str	r2, [r0, #16]
 800ae72:	bf08      	it	eq
 800ae74:	6143      	streq	r3, [r0, #20]
 800ae76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae7a:	f8dc c000 	ldr.w	ip, [ip]
 800ae7e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae82:	ea4c 0707 	orr.w	r7, ip, r7
 800ae86:	f849 7b04 	str.w	r7, [r9], #4
 800ae8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae8e:	40cf      	lsrs	r7, r1
 800ae90:	e7da      	b.n	800ae48 <rshift+0x4c>
 800ae92:	f851 cb04 	ldr.w	ip, [r1], #4
 800ae96:	f847 cf04 	str.w	ip, [r7, #4]!
 800ae9a:	e7c3      	b.n	800ae24 <rshift+0x28>
 800ae9c:	4623      	mov	r3, r4
 800ae9e:	e7e1      	b.n	800ae64 <rshift+0x68>

0800aea0 <__hexdig_fun>:
 800aea0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aea4:	2b09      	cmp	r3, #9
 800aea6:	d802      	bhi.n	800aeae <__hexdig_fun+0xe>
 800aea8:	3820      	subs	r0, #32
 800aeaa:	b2c0      	uxtb	r0, r0
 800aeac:	4770      	bx	lr
 800aeae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aeb2:	2b05      	cmp	r3, #5
 800aeb4:	d801      	bhi.n	800aeba <__hexdig_fun+0x1a>
 800aeb6:	3847      	subs	r0, #71	; 0x47
 800aeb8:	e7f7      	b.n	800aeaa <__hexdig_fun+0xa>
 800aeba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aebe:	2b05      	cmp	r3, #5
 800aec0:	d801      	bhi.n	800aec6 <__hexdig_fun+0x26>
 800aec2:	3827      	subs	r0, #39	; 0x27
 800aec4:	e7f1      	b.n	800aeaa <__hexdig_fun+0xa>
 800aec6:	2000      	movs	r0, #0
 800aec8:	4770      	bx	lr
	...

0800aecc <__gethex>:
 800aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed0:	ed2d 8b02 	vpush	{d8}
 800aed4:	b089      	sub	sp, #36	; 0x24
 800aed6:	ee08 0a10 	vmov	s16, r0
 800aeda:	9304      	str	r3, [sp, #16]
 800aedc:	4bb4      	ldr	r3, [pc, #720]	; (800b1b0 <__gethex+0x2e4>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	9301      	str	r3, [sp, #4]
 800aee2:	4618      	mov	r0, r3
 800aee4:	468b      	mov	fp, r1
 800aee6:	4690      	mov	r8, r2
 800aee8:	f7f5 f984 	bl	80001f4 <strlen>
 800aeec:	9b01      	ldr	r3, [sp, #4]
 800aeee:	f8db 2000 	ldr.w	r2, [fp]
 800aef2:	4403      	add	r3, r0
 800aef4:	4682      	mov	sl, r0
 800aef6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aefa:	9305      	str	r3, [sp, #20]
 800aefc:	1c93      	adds	r3, r2, #2
 800aefe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af06:	32fe      	adds	r2, #254	; 0xfe
 800af08:	18d1      	adds	r1, r2, r3
 800af0a:	461f      	mov	r7, r3
 800af0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af10:	9100      	str	r1, [sp, #0]
 800af12:	2830      	cmp	r0, #48	; 0x30
 800af14:	d0f8      	beq.n	800af08 <__gethex+0x3c>
 800af16:	f7ff ffc3 	bl	800aea0 <__hexdig_fun>
 800af1a:	4604      	mov	r4, r0
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d13a      	bne.n	800af96 <__gethex+0xca>
 800af20:	9901      	ldr	r1, [sp, #4]
 800af22:	4652      	mov	r2, sl
 800af24:	4638      	mov	r0, r7
 800af26:	f001 fdb3 	bl	800ca90 <strncmp>
 800af2a:	4605      	mov	r5, r0
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d168      	bne.n	800b002 <__gethex+0x136>
 800af30:	f817 000a 	ldrb.w	r0, [r7, sl]
 800af34:	eb07 060a 	add.w	r6, r7, sl
 800af38:	f7ff ffb2 	bl	800aea0 <__hexdig_fun>
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d062      	beq.n	800b006 <__gethex+0x13a>
 800af40:	4633      	mov	r3, r6
 800af42:	7818      	ldrb	r0, [r3, #0]
 800af44:	2830      	cmp	r0, #48	; 0x30
 800af46:	461f      	mov	r7, r3
 800af48:	f103 0301 	add.w	r3, r3, #1
 800af4c:	d0f9      	beq.n	800af42 <__gethex+0x76>
 800af4e:	f7ff ffa7 	bl	800aea0 <__hexdig_fun>
 800af52:	2301      	movs	r3, #1
 800af54:	fab0 f480 	clz	r4, r0
 800af58:	0964      	lsrs	r4, r4, #5
 800af5a:	4635      	mov	r5, r6
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	463a      	mov	r2, r7
 800af60:	4616      	mov	r6, r2
 800af62:	3201      	adds	r2, #1
 800af64:	7830      	ldrb	r0, [r6, #0]
 800af66:	f7ff ff9b 	bl	800aea0 <__hexdig_fun>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d1f8      	bne.n	800af60 <__gethex+0x94>
 800af6e:	9901      	ldr	r1, [sp, #4]
 800af70:	4652      	mov	r2, sl
 800af72:	4630      	mov	r0, r6
 800af74:	f001 fd8c 	bl	800ca90 <strncmp>
 800af78:	b980      	cbnz	r0, 800af9c <__gethex+0xd0>
 800af7a:	b94d      	cbnz	r5, 800af90 <__gethex+0xc4>
 800af7c:	eb06 050a 	add.w	r5, r6, sl
 800af80:	462a      	mov	r2, r5
 800af82:	4616      	mov	r6, r2
 800af84:	3201      	adds	r2, #1
 800af86:	7830      	ldrb	r0, [r6, #0]
 800af88:	f7ff ff8a 	bl	800aea0 <__hexdig_fun>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d1f8      	bne.n	800af82 <__gethex+0xb6>
 800af90:	1bad      	subs	r5, r5, r6
 800af92:	00ad      	lsls	r5, r5, #2
 800af94:	e004      	b.n	800afa0 <__gethex+0xd4>
 800af96:	2400      	movs	r4, #0
 800af98:	4625      	mov	r5, r4
 800af9a:	e7e0      	b.n	800af5e <__gethex+0x92>
 800af9c:	2d00      	cmp	r5, #0
 800af9e:	d1f7      	bne.n	800af90 <__gethex+0xc4>
 800afa0:	7833      	ldrb	r3, [r6, #0]
 800afa2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800afa6:	2b50      	cmp	r3, #80	; 0x50
 800afa8:	d13b      	bne.n	800b022 <__gethex+0x156>
 800afaa:	7873      	ldrb	r3, [r6, #1]
 800afac:	2b2b      	cmp	r3, #43	; 0x2b
 800afae:	d02c      	beq.n	800b00a <__gethex+0x13e>
 800afb0:	2b2d      	cmp	r3, #45	; 0x2d
 800afb2:	d02e      	beq.n	800b012 <__gethex+0x146>
 800afb4:	1c71      	adds	r1, r6, #1
 800afb6:	f04f 0900 	mov.w	r9, #0
 800afba:	7808      	ldrb	r0, [r1, #0]
 800afbc:	f7ff ff70 	bl	800aea0 <__hexdig_fun>
 800afc0:	1e43      	subs	r3, r0, #1
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b18      	cmp	r3, #24
 800afc6:	d82c      	bhi.n	800b022 <__gethex+0x156>
 800afc8:	f1a0 0210 	sub.w	r2, r0, #16
 800afcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800afd0:	f7ff ff66 	bl	800aea0 <__hexdig_fun>
 800afd4:	1e43      	subs	r3, r0, #1
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	2b18      	cmp	r3, #24
 800afda:	d91d      	bls.n	800b018 <__gethex+0x14c>
 800afdc:	f1b9 0f00 	cmp.w	r9, #0
 800afe0:	d000      	beq.n	800afe4 <__gethex+0x118>
 800afe2:	4252      	negs	r2, r2
 800afe4:	4415      	add	r5, r2
 800afe6:	f8cb 1000 	str.w	r1, [fp]
 800afea:	b1e4      	cbz	r4, 800b026 <__gethex+0x15a>
 800afec:	9b00      	ldr	r3, [sp, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	bf14      	ite	ne
 800aff2:	2700      	movne	r7, #0
 800aff4:	2706      	moveq	r7, #6
 800aff6:	4638      	mov	r0, r7
 800aff8:	b009      	add	sp, #36	; 0x24
 800affa:	ecbd 8b02 	vpop	{d8}
 800affe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b002:	463e      	mov	r6, r7
 800b004:	4625      	mov	r5, r4
 800b006:	2401      	movs	r4, #1
 800b008:	e7ca      	b.n	800afa0 <__gethex+0xd4>
 800b00a:	f04f 0900 	mov.w	r9, #0
 800b00e:	1cb1      	adds	r1, r6, #2
 800b010:	e7d3      	b.n	800afba <__gethex+0xee>
 800b012:	f04f 0901 	mov.w	r9, #1
 800b016:	e7fa      	b.n	800b00e <__gethex+0x142>
 800b018:	230a      	movs	r3, #10
 800b01a:	fb03 0202 	mla	r2, r3, r2, r0
 800b01e:	3a10      	subs	r2, #16
 800b020:	e7d4      	b.n	800afcc <__gethex+0x100>
 800b022:	4631      	mov	r1, r6
 800b024:	e7df      	b.n	800afe6 <__gethex+0x11a>
 800b026:	1bf3      	subs	r3, r6, r7
 800b028:	3b01      	subs	r3, #1
 800b02a:	4621      	mov	r1, r4
 800b02c:	2b07      	cmp	r3, #7
 800b02e:	dc0b      	bgt.n	800b048 <__gethex+0x17c>
 800b030:	ee18 0a10 	vmov	r0, s16
 800b034:	f000 fa90 	bl	800b558 <_Balloc>
 800b038:	4604      	mov	r4, r0
 800b03a:	b940      	cbnz	r0, 800b04e <__gethex+0x182>
 800b03c:	4b5d      	ldr	r3, [pc, #372]	; (800b1b4 <__gethex+0x2e8>)
 800b03e:	4602      	mov	r2, r0
 800b040:	21de      	movs	r1, #222	; 0xde
 800b042:	485d      	ldr	r0, [pc, #372]	; (800b1b8 <__gethex+0x2ec>)
 800b044:	f001 fdf4 	bl	800cc30 <__assert_func>
 800b048:	3101      	adds	r1, #1
 800b04a:	105b      	asrs	r3, r3, #1
 800b04c:	e7ee      	b.n	800b02c <__gethex+0x160>
 800b04e:	f100 0914 	add.w	r9, r0, #20
 800b052:	f04f 0b00 	mov.w	fp, #0
 800b056:	f1ca 0301 	rsb	r3, sl, #1
 800b05a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b05e:	f8cd b000 	str.w	fp, [sp]
 800b062:	9306      	str	r3, [sp, #24]
 800b064:	42b7      	cmp	r7, r6
 800b066:	d340      	bcc.n	800b0ea <__gethex+0x21e>
 800b068:	9802      	ldr	r0, [sp, #8]
 800b06a:	9b00      	ldr	r3, [sp, #0]
 800b06c:	f840 3b04 	str.w	r3, [r0], #4
 800b070:	eba0 0009 	sub.w	r0, r0, r9
 800b074:	1080      	asrs	r0, r0, #2
 800b076:	0146      	lsls	r6, r0, #5
 800b078:	6120      	str	r0, [r4, #16]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 fb5e 	bl	800b73c <__hi0bits>
 800b080:	1a30      	subs	r0, r6, r0
 800b082:	f8d8 6000 	ldr.w	r6, [r8]
 800b086:	42b0      	cmp	r0, r6
 800b088:	dd63      	ble.n	800b152 <__gethex+0x286>
 800b08a:	1b87      	subs	r7, r0, r6
 800b08c:	4639      	mov	r1, r7
 800b08e:	4620      	mov	r0, r4
 800b090:	f000 ff02 	bl	800be98 <__any_on>
 800b094:	4682      	mov	sl, r0
 800b096:	b1a8      	cbz	r0, 800b0c4 <__gethex+0x1f8>
 800b098:	1e7b      	subs	r3, r7, #1
 800b09a:	1159      	asrs	r1, r3, #5
 800b09c:	f003 021f 	and.w	r2, r3, #31
 800b0a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b0a4:	f04f 0a01 	mov.w	sl, #1
 800b0a8:	fa0a f202 	lsl.w	r2, sl, r2
 800b0ac:	420a      	tst	r2, r1
 800b0ae:	d009      	beq.n	800b0c4 <__gethex+0x1f8>
 800b0b0:	4553      	cmp	r3, sl
 800b0b2:	dd05      	ble.n	800b0c0 <__gethex+0x1f4>
 800b0b4:	1eb9      	subs	r1, r7, #2
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f000 feee 	bl	800be98 <__any_on>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d145      	bne.n	800b14c <__gethex+0x280>
 800b0c0:	f04f 0a02 	mov.w	sl, #2
 800b0c4:	4639      	mov	r1, r7
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f7ff fe98 	bl	800adfc <rshift>
 800b0cc:	443d      	add	r5, r7
 800b0ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0d2:	42ab      	cmp	r3, r5
 800b0d4:	da4c      	bge.n	800b170 <__gethex+0x2a4>
 800b0d6:	ee18 0a10 	vmov	r0, s16
 800b0da:	4621      	mov	r1, r4
 800b0dc:	f000 fa7c 	bl	800b5d8 <_Bfree>
 800b0e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	6013      	str	r3, [r2, #0]
 800b0e6:	27a3      	movs	r7, #163	; 0xa3
 800b0e8:	e785      	b.n	800aff6 <__gethex+0x12a>
 800b0ea:	1e73      	subs	r3, r6, #1
 800b0ec:	9a05      	ldr	r2, [sp, #20]
 800b0ee:	9303      	str	r3, [sp, #12]
 800b0f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d019      	beq.n	800b12c <__gethex+0x260>
 800b0f8:	f1bb 0f20 	cmp.w	fp, #32
 800b0fc:	d107      	bne.n	800b10e <__gethex+0x242>
 800b0fe:	9b02      	ldr	r3, [sp, #8]
 800b100:	9a00      	ldr	r2, [sp, #0]
 800b102:	f843 2b04 	str.w	r2, [r3], #4
 800b106:	9302      	str	r3, [sp, #8]
 800b108:	2300      	movs	r3, #0
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	469b      	mov	fp, r3
 800b10e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b112:	f7ff fec5 	bl	800aea0 <__hexdig_fun>
 800b116:	9b00      	ldr	r3, [sp, #0]
 800b118:	f000 000f 	and.w	r0, r0, #15
 800b11c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b120:	4303      	orrs	r3, r0
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	f10b 0b04 	add.w	fp, fp, #4
 800b128:	9b03      	ldr	r3, [sp, #12]
 800b12a:	e00d      	b.n	800b148 <__gethex+0x27c>
 800b12c:	9b03      	ldr	r3, [sp, #12]
 800b12e:	9a06      	ldr	r2, [sp, #24]
 800b130:	4413      	add	r3, r2
 800b132:	42bb      	cmp	r3, r7
 800b134:	d3e0      	bcc.n	800b0f8 <__gethex+0x22c>
 800b136:	4618      	mov	r0, r3
 800b138:	9901      	ldr	r1, [sp, #4]
 800b13a:	9307      	str	r3, [sp, #28]
 800b13c:	4652      	mov	r2, sl
 800b13e:	f001 fca7 	bl	800ca90 <strncmp>
 800b142:	9b07      	ldr	r3, [sp, #28]
 800b144:	2800      	cmp	r0, #0
 800b146:	d1d7      	bne.n	800b0f8 <__gethex+0x22c>
 800b148:	461e      	mov	r6, r3
 800b14a:	e78b      	b.n	800b064 <__gethex+0x198>
 800b14c:	f04f 0a03 	mov.w	sl, #3
 800b150:	e7b8      	b.n	800b0c4 <__gethex+0x1f8>
 800b152:	da0a      	bge.n	800b16a <__gethex+0x29e>
 800b154:	1a37      	subs	r7, r6, r0
 800b156:	4621      	mov	r1, r4
 800b158:	ee18 0a10 	vmov	r0, s16
 800b15c:	463a      	mov	r2, r7
 800b15e:	f000 fc57 	bl	800ba10 <__lshift>
 800b162:	1bed      	subs	r5, r5, r7
 800b164:	4604      	mov	r4, r0
 800b166:	f100 0914 	add.w	r9, r0, #20
 800b16a:	f04f 0a00 	mov.w	sl, #0
 800b16e:	e7ae      	b.n	800b0ce <__gethex+0x202>
 800b170:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b174:	42a8      	cmp	r0, r5
 800b176:	dd72      	ble.n	800b25e <__gethex+0x392>
 800b178:	1b45      	subs	r5, r0, r5
 800b17a:	42ae      	cmp	r6, r5
 800b17c:	dc36      	bgt.n	800b1ec <__gethex+0x320>
 800b17e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b182:	2b02      	cmp	r3, #2
 800b184:	d02a      	beq.n	800b1dc <__gethex+0x310>
 800b186:	2b03      	cmp	r3, #3
 800b188:	d02c      	beq.n	800b1e4 <__gethex+0x318>
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d11c      	bne.n	800b1c8 <__gethex+0x2fc>
 800b18e:	42ae      	cmp	r6, r5
 800b190:	d11a      	bne.n	800b1c8 <__gethex+0x2fc>
 800b192:	2e01      	cmp	r6, #1
 800b194:	d112      	bne.n	800b1bc <__gethex+0x2f0>
 800b196:	9a04      	ldr	r2, [sp, #16]
 800b198:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b19c:	6013      	str	r3, [r2, #0]
 800b19e:	2301      	movs	r3, #1
 800b1a0:	6123      	str	r3, [r4, #16]
 800b1a2:	f8c9 3000 	str.w	r3, [r9]
 800b1a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1a8:	2762      	movs	r7, #98	; 0x62
 800b1aa:	601c      	str	r4, [r3, #0]
 800b1ac:	e723      	b.n	800aff6 <__gethex+0x12a>
 800b1ae:	bf00      	nop
 800b1b0:	08010610 	.word	0x08010610
 800b1b4:	08010598 	.word	0x08010598
 800b1b8:	080105a9 	.word	0x080105a9
 800b1bc:	1e71      	subs	r1, r6, #1
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f000 fe6a 	bl	800be98 <__any_on>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d1e6      	bne.n	800b196 <__gethex+0x2ca>
 800b1c8:	ee18 0a10 	vmov	r0, s16
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	f000 fa03 	bl	800b5d8 <_Bfree>
 800b1d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	2750      	movs	r7, #80	; 0x50
 800b1da:	e70c      	b.n	800aff6 <__gethex+0x12a>
 800b1dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1f2      	bne.n	800b1c8 <__gethex+0x2fc>
 800b1e2:	e7d8      	b.n	800b196 <__gethex+0x2ca>
 800b1e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d1d5      	bne.n	800b196 <__gethex+0x2ca>
 800b1ea:	e7ed      	b.n	800b1c8 <__gethex+0x2fc>
 800b1ec:	1e6f      	subs	r7, r5, #1
 800b1ee:	f1ba 0f00 	cmp.w	sl, #0
 800b1f2:	d131      	bne.n	800b258 <__gethex+0x38c>
 800b1f4:	b127      	cbz	r7, 800b200 <__gethex+0x334>
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f000 fe4d 	bl	800be98 <__any_on>
 800b1fe:	4682      	mov	sl, r0
 800b200:	117b      	asrs	r3, r7, #5
 800b202:	2101      	movs	r1, #1
 800b204:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b208:	f007 071f 	and.w	r7, r7, #31
 800b20c:	fa01 f707 	lsl.w	r7, r1, r7
 800b210:	421f      	tst	r7, r3
 800b212:	4629      	mov	r1, r5
 800b214:	4620      	mov	r0, r4
 800b216:	bf18      	it	ne
 800b218:	f04a 0a02 	orrne.w	sl, sl, #2
 800b21c:	1b76      	subs	r6, r6, r5
 800b21e:	f7ff fded 	bl	800adfc <rshift>
 800b222:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b226:	2702      	movs	r7, #2
 800b228:	f1ba 0f00 	cmp.w	sl, #0
 800b22c:	d048      	beq.n	800b2c0 <__gethex+0x3f4>
 800b22e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b232:	2b02      	cmp	r3, #2
 800b234:	d015      	beq.n	800b262 <__gethex+0x396>
 800b236:	2b03      	cmp	r3, #3
 800b238:	d017      	beq.n	800b26a <__gethex+0x39e>
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d109      	bne.n	800b252 <__gethex+0x386>
 800b23e:	f01a 0f02 	tst.w	sl, #2
 800b242:	d006      	beq.n	800b252 <__gethex+0x386>
 800b244:	f8d9 0000 	ldr.w	r0, [r9]
 800b248:	ea4a 0a00 	orr.w	sl, sl, r0
 800b24c:	f01a 0f01 	tst.w	sl, #1
 800b250:	d10e      	bne.n	800b270 <__gethex+0x3a4>
 800b252:	f047 0710 	orr.w	r7, r7, #16
 800b256:	e033      	b.n	800b2c0 <__gethex+0x3f4>
 800b258:	f04f 0a01 	mov.w	sl, #1
 800b25c:	e7d0      	b.n	800b200 <__gethex+0x334>
 800b25e:	2701      	movs	r7, #1
 800b260:	e7e2      	b.n	800b228 <__gethex+0x35c>
 800b262:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b264:	f1c3 0301 	rsb	r3, r3, #1
 800b268:	9315      	str	r3, [sp, #84]	; 0x54
 800b26a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d0f0      	beq.n	800b252 <__gethex+0x386>
 800b270:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b274:	f104 0314 	add.w	r3, r4, #20
 800b278:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b27c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b280:	f04f 0c00 	mov.w	ip, #0
 800b284:	4618      	mov	r0, r3
 800b286:	f853 2b04 	ldr.w	r2, [r3], #4
 800b28a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b28e:	d01c      	beq.n	800b2ca <__gethex+0x3fe>
 800b290:	3201      	adds	r2, #1
 800b292:	6002      	str	r2, [r0, #0]
 800b294:	2f02      	cmp	r7, #2
 800b296:	f104 0314 	add.w	r3, r4, #20
 800b29a:	d13f      	bne.n	800b31c <__gethex+0x450>
 800b29c:	f8d8 2000 	ldr.w	r2, [r8]
 800b2a0:	3a01      	subs	r2, #1
 800b2a2:	42b2      	cmp	r2, r6
 800b2a4:	d10a      	bne.n	800b2bc <__gethex+0x3f0>
 800b2a6:	1171      	asrs	r1, r6, #5
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2ae:	f006 061f 	and.w	r6, r6, #31
 800b2b2:	fa02 f606 	lsl.w	r6, r2, r6
 800b2b6:	421e      	tst	r6, r3
 800b2b8:	bf18      	it	ne
 800b2ba:	4617      	movne	r7, r2
 800b2bc:	f047 0720 	orr.w	r7, r7, #32
 800b2c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2c2:	601c      	str	r4, [r3, #0]
 800b2c4:	9b04      	ldr	r3, [sp, #16]
 800b2c6:	601d      	str	r5, [r3, #0]
 800b2c8:	e695      	b.n	800aff6 <__gethex+0x12a>
 800b2ca:	4299      	cmp	r1, r3
 800b2cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b2d0:	d8d8      	bhi.n	800b284 <__gethex+0x3b8>
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	459b      	cmp	fp, r3
 800b2d6:	db19      	blt.n	800b30c <__gethex+0x440>
 800b2d8:	6861      	ldr	r1, [r4, #4]
 800b2da:	ee18 0a10 	vmov	r0, s16
 800b2de:	3101      	adds	r1, #1
 800b2e0:	f000 f93a 	bl	800b558 <_Balloc>
 800b2e4:	4681      	mov	r9, r0
 800b2e6:	b918      	cbnz	r0, 800b2f0 <__gethex+0x424>
 800b2e8:	4b1a      	ldr	r3, [pc, #104]	; (800b354 <__gethex+0x488>)
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	2184      	movs	r1, #132	; 0x84
 800b2ee:	e6a8      	b.n	800b042 <__gethex+0x176>
 800b2f0:	6922      	ldr	r2, [r4, #16]
 800b2f2:	3202      	adds	r2, #2
 800b2f4:	f104 010c 	add.w	r1, r4, #12
 800b2f8:	0092      	lsls	r2, r2, #2
 800b2fa:	300c      	adds	r0, #12
 800b2fc:	f000 f91e 	bl	800b53c <memcpy>
 800b300:	4621      	mov	r1, r4
 800b302:	ee18 0a10 	vmov	r0, s16
 800b306:	f000 f967 	bl	800b5d8 <_Bfree>
 800b30a:	464c      	mov	r4, r9
 800b30c:	6923      	ldr	r3, [r4, #16]
 800b30e:	1c5a      	adds	r2, r3, #1
 800b310:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b314:	6122      	str	r2, [r4, #16]
 800b316:	2201      	movs	r2, #1
 800b318:	615a      	str	r2, [r3, #20]
 800b31a:	e7bb      	b.n	800b294 <__gethex+0x3c8>
 800b31c:	6922      	ldr	r2, [r4, #16]
 800b31e:	455a      	cmp	r2, fp
 800b320:	dd0b      	ble.n	800b33a <__gethex+0x46e>
 800b322:	2101      	movs	r1, #1
 800b324:	4620      	mov	r0, r4
 800b326:	f7ff fd69 	bl	800adfc <rshift>
 800b32a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b32e:	3501      	adds	r5, #1
 800b330:	42ab      	cmp	r3, r5
 800b332:	f6ff aed0 	blt.w	800b0d6 <__gethex+0x20a>
 800b336:	2701      	movs	r7, #1
 800b338:	e7c0      	b.n	800b2bc <__gethex+0x3f0>
 800b33a:	f016 061f 	ands.w	r6, r6, #31
 800b33e:	d0fa      	beq.n	800b336 <__gethex+0x46a>
 800b340:	4453      	add	r3, sl
 800b342:	f1c6 0620 	rsb	r6, r6, #32
 800b346:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b34a:	f000 f9f7 	bl	800b73c <__hi0bits>
 800b34e:	42b0      	cmp	r0, r6
 800b350:	dbe7      	blt.n	800b322 <__gethex+0x456>
 800b352:	e7f0      	b.n	800b336 <__gethex+0x46a>
 800b354:	08010598 	.word	0x08010598

0800b358 <L_shift>:
 800b358:	f1c2 0208 	rsb	r2, r2, #8
 800b35c:	0092      	lsls	r2, r2, #2
 800b35e:	b570      	push	{r4, r5, r6, lr}
 800b360:	f1c2 0620 	rsb	r6, r2, #32
 800b364:	6843      	ldr	r3, [r0, #4]
 800b366:	6804      	ldr	r4, [r0, #0]
 800b368:	fa03 f506 	lsl.w	r5, r3, r6
 800b36c:	432c      	orrs	r4, r5
 800b36e:	40d3      	lsrs	r3, r2
 800b370:	6004      	str	r4, [r0, #0]
 800b372:	f840 3f04 	str.w	r3, [r0, #4]!
 800b376:	4288      	cmp	r0, r1
 800b378:	d3f4      	bcc.n	800b364 <L_shift+0xc>
 800b37a:	bd70      	pop	{r4, r5, r6, pc}

0800b37c <__match>:
 800b37c:	b530      	push	{r4, r5, lr}
 800b37e:	6803      	ldr	r3, [r0, #0]
 800b380:	3301      	adds	r3, #1
 800b382:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b386:	b914      	cbnz	r4, 800b38e <__match+0x12>
 800b388:	6003      	str	r3, [r0, #0]
 800b38a:	2001      	movs	r0, #1
 800b38c:	bd30      	pop	{r4, r5, pc}
 800b38e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b392:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b396:	2d19      	cmp	r5, #25
 800b398:	bf98      	it	ls
 800b39a:	3220      	addls	r2, #32
 800b39c:	42a2      	cmp	r2, r4
 800b39e:	d0f0      	beq.n	800b382 <__match+0x6>
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	e7f3      	b.n	800b38c <__match+0x10>

0800b3a4 <__hexnan>:
 800b3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a8:	680b      	ldr	r3, [r1, #0]
 800b3aa:	115e      	asrs	r6, r3, #5
 800b3ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3b0:	f013 031f 	ands.w	r3, r3, #31
 800b3b4:	b087      	sub	sp, #28
 800b3b6:	bf18      	it	ne
 800b3b8:	3604      	addne	r6, #4
 800b3ba:	2500      	movs	r5, #0
 800b3bc:	1f37      	subs	r7, r6, #4
 800b3be:	4690      	mov	r8, r2
 800b3c0:	6802      	ldr	r2, [r0, #0]
 800b3c2:	9301      	str	r3, [sp, #4]
 800b3c4:	4682      	mov	sl, r0
 800b3c6:	f846 5c04 	str.w	r5, [r6, #-4]
 800b3ca:	46b9      	mov	r9, r7
 800b3cc:	463c      	mov	r4, r7
 800b3ce:	9502      	str	r5, [sp, #8]
 800b3d0:	46ab      	mov	fp, r5
 800b3d2:	7851      	ldrb	r1, [r2, #1]
 800b3d4:	1c53      	adds	r3, r2, #1
 800b3d6:	9303      	str	r3, [sp, #12]
 800b3d8:	b341      	cbz	r1, 800b42c <__hexnan+0x88>
 800b3da:	4608      	mov	r0, r1
 800b3dc:	9205      	str	r2, [sp, #20]
 800b3de:	9104      	str	r1, [sp, #16]
 800b3e0:	f7ff fd5e 	bl	800aea0 <__hexdig_fun>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	d14f      	bne.n	800b488 <__hexnan+0xe4>
 800b3e8:	9904      	ldr	r1, [sp, #16]
 800b3ea:	9a05      	ldr	r2, [sp, #20]
 800b3ec:	2920      	cmp	r1, #32
 800b3ee:	d818      	bhi.n	800b422 <__hexnan+0x7e>
 800b3f0:	9b02      	ldr	r3, [sp, #8]
 800b3f2:	459b      	cmp	fp, r3
 800b3f4:	dd13      	ble.n	800b41e <__hexnan+0x7a>
 800b3f6:	454c      	cmp	r4, r9
 800b3f8:	d206      	bcs.n	800b408 <__hexnan+0x64>
 800b3fa:	2d07      	cmp	r5, #7
 800b3fc:	dc04      	bgt.n	800b408 <__hexnan+0x64>
 800b3fe:	462a      	mov	r2, r5
 800b400:	4649      	mov	r1, r9
 800b402:	4620      	mov	r0, r4
 800b404:	f7ff ffa8 	bl	800b358 <L_shift>
 800b408:	4544      	cmp	r4, r8
 800b40a:	d950      	bls.n	800b4ae <__hexnan+0x10a>
 800b40c:	2300      	movs	r3, #0
 800b40e:	f1a4 0904 	sub.w	r9, r4, #4
 800b412:	f844 3c04 	str.w	r3, [r4, #-4]
 800b416:	f8cd b008 	str.w	fp, [sp, #8]
 800b41a:	464c      	mov	r4, r9
 800b41c:	461d      	mov	r5, r3
 800b41e:	9a03      	ldr	r2, [sp, #12]
 800b420:	e7d7      	b.n	800b3d2 <__hexnan+0x2e>
 800b422:	2929      	cmp	r1, #41	; 0x29
 800b424:	d156      	bne.n	800b4d4 <__hexnan+0x130>
 800b426:	3202      	adds	r2, #2
 800b428:	f8ca 2000 	str.w	r2, [sl]
 800b42c:	f1bb 0f00 	cmp.w	fp, #0
 800b430:	d050      	beq.n	800b4d4 <__hexnan+0x130>
 800b432:	454c      	cmp	r4, r9
 800b434:	d206      	bcs.n	800b444 <__hexnan+0xa0>
 800b436:	2d07      	cmp	r5, #7
 800b438:	dc04      	bgt.n	800b444 <__hexnan+0xa0>
 800b43a:	462a      	mov	r2, r5
 800b43c:	4649      	mov	r1, r9
 800b43e:	4620      	mov	r0, r4
 800b440:	f7ff ff8a 	bl	800b358 <L_shift>
 800b444:	4544      	cmp	r4, r8
 800b446:	d934      	bls.n	800b4b2 <__hexnan+0x10e>
 800b448:	f1a8 0204 	sub.w	r2, r8, #4
 800b44c:	4623      	mov	r3, r4
 800b44e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b452:	f842 1f04 	str.w	r1, [r2, #4]!
 800b456:	429f      	cmp	r7, r3
 800b458:	d2f9      	bcs.n	800b44e <__hexnan+0xaa>
 800b45a:	1b3b      	subs	r3, r7, r4
 800b45c:	f023 0303 	bic.w	r3, r3, #3
 800b460:	3304      	adds	r3, #4
 800b462:	3401      	adds	r4, #1
 800b464:	3e03      	subs	r6, #3
 800b466:	42b4      	cmp	r4, r6
 800b468:	bf88      	it	hi
 800b46a:	2304      	movhi	r3, #4
 800b46c:	4443      	add	r3, r8
 800b46e:	2200      	movs	r2, #0
 800b470:	f843 2b04 	str.w	r2, [r3], #4
 800b474:	429f      	cmp	r7, r3
 800b476:	d2fb      	bcs.n	800b470 <__hexnan+0xcc>
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	b91b      	cbnz	r3, 800b484 <__hexnan+0xe0>
 800b47c:	4547      	cmp	r7, r8
 800b47e:	d127      	bne.n	800b4d0 <__hexnan+0x12c>
 800b480:	2301      	movs	r3, #1
 800b482:	603b      	str	r3, [r7, #0]
 800b484:	2005      	movs	r0, #5
 800b486:	e026      	b.n	800b4d6 <__hexnan+0x132>
 800b488:	3501      	adds	r5, #1
 800b48a:	2d08      	cmp	r5, #8
 800b48c:	f10b 0b01 	add.w	fp, fp, #1
 800b490:	dd06      	ble.n	800b4a0 <__hexnan+0xfc>
 800b492:	4544      	cmp	r4, r8
 800b494:	d9c3      	bls.n	800b41e <__hexnan+0x7a>
 800b496:	2300      	movs	r3, #0
 800b498:	f844 3c04 	str.w	r3, [r4, #-4]
 800b49c:	2501      	movs	r5, #1
 800b49e:	3c04      	subs	r4, #4
 800b4a0:	6822      	ldr	r2, [r4, #0]
 800b4a2:	f000 000f 	and.w	r0, r0, #15
 800b4a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b4aa:	6022      	str	r2, [r4, #0]
 800b4ac:	e7b7      	b.n	800b41e <__hexnan+0x7a>
 800b4ae:	2508      	movs	r5, #8
 800b4b0:	e7b5      	b.n	800b41e <__hexnan+0x7a>
 800b4b2:	9b01      	ldr	r3, [sp, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d0df      	beq.n	800b478 <__hexnan+0xd4>
 800b4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4bc:	f1c3 0320 	rsb	r3, r3, #32
 800b4c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b4c8:	401a      	ands	r2, r3
 800b4ca:	f846 2c04 	str.w	r2, [r6, #-4]
 800b4ce:	e7d3      	b.n	800b478 <__hexnan+0xd4>
 800b4d0:	3f04      	subs	r7, #4
 800b4d2:	e7d1      	b.n	800b478 <__hexnan+0xd4>
 800b4d4:	2004      	movs	r0, #4
 800b4d6:	b007      	add	sp, #28
 800b4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4dc <_localeconv_r>:
 800b4dc:	4800      	ldr	r0, [pc, #0]	; (800b4e0 <_localeconv_r+0x4>)
 800b4de:	4770      	bx	lr
 800b4e0:	20000174 	.word	0x20000174

0800b4e4 <_lseek_r>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	4d07      	ldr	r5, [pc, #28]	; (800b504 <_lseek_r+0x20>)
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	4608      	mov	r0, r1
 800b4ec:	4611      	mov	r1, r2
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	602a      	str	r2, [r5, #0]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	f7fa f82b 	bl	800554e <_lseek>
 800b4f8:	1c43      	adds	r3, r0, #1
 800b4fa:	d102      	bne.n	800b502 <_lseek_r+0x1e>
 800b4fc:	682b      	ldr	r3, [r5, #0]
 800b4fe:	b103      	cbz	r3, 800b502 <_lseek_r+0x1e>
 800b500:	6023      	str	r3, [r4, #0]
 800b502:	bd38      	pop	{r3, r4, r5, pc}
 800b504:	20009d00 	.word	0x20009d00

0800b508 <malloc>:
 800b508:	4b02      	ldr	r3, [pc, #8]	; (800b514 <malloc+0xc>)
 800b50a:	4601      	mov	r1, r0
 800b50c:	6818      	ldr	r0, [r3, #0]
 800b50e:	f000 bd67 	b.w	800bfe0 <_malloc_r>
 800b512:	bf00      	nop
 800b514:	2000001c 	.word	0x2000001c

0800b518 <__ascii_mbtowc>:
 800b518:	b082      	sub	sp, #8
 800b51a:	b901      	cbnz	r1, 800b51e <__ascii_mbtowc+0x6>
 800b51c:	a901      	add	r1, sp, #4
 800b51e:	b142      	cbz	r2, 800b532 <__ascii_mbtowc+0x1a>
 800b520:	b14b      	cbz	r3, 800b536 <__ascii_mbtowc+0x1e>
 800b522:	7813      	ldrb	r3, [r2, #0]
 800b524:	600b      	str	r3, [r1, #0]
 800b526:	7812      	ldrb	r2, [r2, #0]
 800b528:	1e10      	subs	r0, r2, #0
 800b52a:	bf18      	it	ne
 800b52c:	2001      	movne	r0, #1
 800b52e:	b002      	add	sp, #8
 800b530:	4770      	bx	lr
 800b532:	4610      	mov	r0, r2
 800b534:	e7fb      	b.n	800b52e <__ascii_mbtowc+0x16>
 800b536:	f06f 0001 	mvn.w	r0, #1
 800b53a:	e7f8      	b.n	800b52e <__ascii_mbtowc+0x16>

0800b53c <memcpy>:
 800b53c:	440a      	add	r2, r1
 800b53e:	4291      	cmp	r1, r2
 800b540:	f100 33ff 	add.w	r3, r0, #4294967295
 800b544:	d100      	bne.n	800b548 <memcpy+0xc>
 800b546:	4770      	bx	lr
 800b548:	b510      	push	{r4, lr}
 800b54a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b54e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b552:	4291      	cmp	r1, r2
 800b554:	d1f9      	bne.n	800b54a <memcpy+0xe>
 800b556:	bd10      	pop	{r4, pc}

0800b558 <_Balloc>:
 800b558:	b570      	push	{r4, r5, r6, lr}
 800b55a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b55c:	4604      	mov	r4, r0
 800b55e:	460d      	mov	r5, r1
 800b560:	b976      	cbnz	r6, 800b580 <_Balloc+0x28>
 800b562:	2010      	movs	r0, #16
 800b564:	f7ff ffd0 	bl	800b508 <malloc>
 800b568:	4602      	mov	r2, r0
 800b56a:	6260      	str	r0, [r4, #36]	; 0x24
 800b56c:	b920      	cbnz	r0, 800b578 <_Balloc+0x20>
 800b56e:	4b18      	ldr	r3, [pc, #96]	; (800b5d0 <_Balloc+0x78>)
 800b570:	4818      	ldr	r0, [pc, #96]	; (800b5d4 <_Balloc+0x7c>)
 800b572:	2166      	movs	r1, #102	; 0x66
 800b574:	f001 fb5c 	bl	800cc30 <__assert_func>
 800b578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b57c:	6006      	str	r6, [r0, #0]
 800b57e:	60c6      	str	r6, [r0, #12]
 800b580:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b582:	68f3      	ldr	r3, [r6, #12]
 800b584:	b183      	cbz	r3, 800b5a8 <_Balloc+0x50>
 800b586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b58e:	b9b8      	cbnz	r0, 800b5c0 <_Balloc+0x68>
 800b590:	2101      	movs	r1, #1
 800b592:	fa01 f605 	lsl.w	r6, r1, r5
 800b596:	1d72      	adds	r2, r6, #5
 800b598:	0092      	lsls	r2, r2, #2
 800b59a:	4620      	mov	r0, r4
 800b59c:	f000 fc9d 	bl	800beda <_calloc_r>
 800b5a0:	b160      	cbz	r0, 800b5bc <_Balloc+0x64>
 800b5a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5a6:	e00e      	b.n	800b5c6 <_Balloc+0x6e>
 800b5a8:	2221      	movs	r2, #33	; 0x21
 800b5aa:	2104      	movs	r1, #4
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f000 fc94 	bl	800beda <_calloc_r>
 800b5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5b4:	60f0      	str	r0, [r6, #12]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1e4      	bne.n	800b586 <_Balloc+0x2e>
 800b5bc:	2000      	movs	r0, #0
 800b5be:	bd70      	pop	{r4, r5, r6, pc}
 800b5c0:	6802      	ldr	r2, [r0, #0]
 800b5c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5cc:	e7f7      	b.n	800b5be <_Balloc+0x66>
 800b5ce:	bf00      	nop
 800b5d0:	08010526 	.word	0x08010526
 800b5d4:	08010624 	.word	0x08010624

0800b5d8 <_Bfree>:
 800b5d8:	b570      	push	{r4, r5, r6, lr}
 800b5da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5dc:	4605      	mov	r5, r0
 800b5de:	460c      	mov	r4, r1
 800b5e0:	b976      	cbnz	r6, 800b600 <_Bfree+0x28>
 800b5e2:	2010      	movs	r0, #16
 800b5e4:	f7ff ff90 	bl	800b508 <malloc>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	6268      	str	r0, [r5, #36]	; 0x24
 800b5ec:	b920      	cbnz	r0, 800b5f8 <_Bfree+0x20>
 800b5ee:	4b09      	ldr	r3, [pc, #36]	; (800b614 <_Bfree+0x3c>)
 800b5f0:	4809      	ldr	r0, [pc, #36]	; (800b618 <_Bfree+0x40>)
 800b5f2:	218a      	movs	r1, #138	; 0x8a
 800b5f4:	f001 fb1c 	bl	800cc30 <__assert_func>
 800b5f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5fc:	6006      	str	r6, [r0, #0]
 800b5fe:	60c6      	str	r6, [r0, #12]
 800b600:	b13c      	cbz	r4, 800b612 <_Bfree+0x3a>
 800b602:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b604:	6862      	ldr	r2, [r4, #4]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b60c:	6021      	str	r1, [r4, #0]
 800b60e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b612:	bd70      	pop	{r4, r5, r6, pc}
 800b614:	08010526 	.word	0x08010526
 800b618:	08010624 	.word	0x08010624

0800b61c <__multadd>:
 800b61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b620:	690d      	ldr	r5, [r1, #16]
 800b622:	4607      	mov	r7, r0
 800b624:	460c      	mov	r4, r1
 800b626:	461e      	mov	r6, r3
 800b628:	f101 0c14 	add.w	ip, r1, #20
 800b62c:	2000      	movs	r0, #0
 800b62e:	f8dc 3000 	ldr.w	r3, [ip]
 800b632:	b299      	uxth	r1, r3
 800b634:	fb02 6101 	mla	r1, r2, r1, r6
 800b638:	0c1e      	lsrs	r6, r3, #16
 800b63a:	0c0b      	lsrs	r3, r1, #16
 800b63c:	fb02 3306 	mla	r3, r2, r6, r3
 800b640:	b289      	uxth	r1, r1
 800b642:	3001      	adds	r0, #1
 800b644:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b648:	4285      	cmp	r5, r0
 800b64a:	f84c 1b04 	str.w	r1, [ip], #4
 800b64e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b652:	dcec      	bgt.n	800b62e <__multadd+0x12>
 800b654:	b30e      	cbz	r6, 800b69a <__multadd+0x7e>
 800b656:	68a3      	ldr	r3, [r4, #8]
 800b658:	42ab      	cmp	r3, r5
 800b65a:	dc19      	bgt.n	800b690 <__multadd+0x74>
 800b65c:	6861      	ldr	r1, [r4, #4]
 800b65e:	4638      	mov	r0, r7
 800b660:	3101      	adds	r1, #1
 800b662:	f7ff ff79 	bl	800b558 <_Balloc>
 800b666:	4680      	mov	r8, r0
 800b668:	b928      	cbnz	r0, 800b676 <__multadd+0x5a>
 800b66a:	4602      	mov	r2, r0
 800b66c:	4b0c      	ldr	r3, [pc, #48]	; (800b6a0 <__multadd+0x84>)
 800b66e:	480d      	ldr	r0, [pc, #52]	; (800b6a4 <__multadd+0x88>)
 800b670:	21b5      	movs	r1, #181	; 0xb5
 800b672:	f001 fadd 	bl	800cc30 <__assert_func>
 800b676:	6922      	ldr	r2, [r4, #16]
 800b678:	3202      	adds	r2, #2
 800b67a:	f104 010c 	add.w	r1, r4, #12
 800b67e:	0092      	lsls	r2, r2, #2
 800b680:	300c      	adds	r0, #12
 800b682:	f7ff ff5b 	bl	800b53c <memcpy>
 800b686:	4621      	mov	r1, r4
 800b688:	4638      	mov	r0, r7
 800b68a:	f7ff ffa5 	bl	800b5d8 <_Bfree>
 800b68e:	4644      	mov	r4, r8
 800b690:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b694:	3501      	adds	r5, #1
 800b696:	615e      	str	r6, [r3, #20]
 800b698:	6125      	str	r5, [r4, #16]
 800b69a:	4620      	mov	r0, r4
 800b69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a0:	08010598 	.word	0x08010598
 800b6a4:	08010624 	.word	0x08010624

0800b6a8 <__s2b>:
 800b6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6ac:	460c      	mov	r4, r1
 800b6ae:	4615      	mov	r5, r2
 800b6b0:	461f      	mov	r7, r3
 800b6b2:	2209      	movs	r2, #9
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6bc:	2100      	movs	r1, #0
 800b6be:	2201      	movs	r2, #1
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	db09      	blt.n	800b6d8 <__s2b+0x30>
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	f7ff ff47 	bl	800b558 <_Balloc>
 800b6ca:	b940      	cbnz	r0, 800b6de <__s2b+0x36>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	4b19      	ldr	r3, [pc, #100]	; (800b734 <__s2b+0x8c>)
 800b6d0:	4819      	ldr	r0, [pc, #100]	; (800b738 <__s2b+0x90>)
 800b6d2:	21ce      	movs	r1, #206	; 0xce
 800b6d4:	f001 faac 	bl	800cc30 <__assert_func>
 800b6d8:	0052      	lsls	r2, r2, #1
 800b6da:	3101      	adds	r1, #1
 800b6dc:	e7f0      	b.n	800b6c0 <__s2b+0x18>
 800b6de:	9b08      	ldr	r3, [sp, #32]
 800b6e0:	6143      	str	r3, [r0, #20]
 800b6e2:	2d09      	cmp	r5, #9
 800b6e4:	f04f 0301 	mov.w	r3, #1
 800b6e8:	6103      	str	r3, [r0, #16]
 800b6ea:	dd16      	ble.n	800b71a <__s2b+0x72>
 800b6ec:	f104 0909 	add.w	r9, r4, #9
 800b6f0:	46c8      	mov	r8, r9
 800b6f2:	442c      	add	r4, r5
 800b6f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b6f8:	4601      	mov	r1, r0
 800b6fa:	3b30      	subs	r3, #48	; 0x30
 800b6fc:	220a      	movs	r2, #10
 800b6fe:	4630      	mov	r0, r6
 800b700:	f7ff ff8c 	bl	800b61c <__multadd>
 800b704:	45a0      	cmp	r8, r4
 800b706:	d1f5      	bne.n	800b6f4 <__s2b+0x4c>
 800b708:	f1a5 0408 	sub.w	r4, r5, #8
 800b70c:	444c      	add	r4, r9
 800b70e:	1b2d      	subs	r5, r5, r4
 800b710:	1963      	adds	r3, r4, r5
 800b712:	42bb      	cmp	r3, r7
 800b714:	db04      	blt.n	800b720 <__s2b+0x78>
 800b716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b71a:	340a      	adds	r4, #10
 800b71c:	2509      	movs	r5, #9
 800b71e:	e7f6      	b.n	800b70e <__s2b+0x66>
 800b720:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b724:	4601      	mov	r1, r0
 800b726:	3b30      	subs	r3, #48	; 0x30
 800b728:	220a      	movs	r2, #10
 800b72a:	4630      	mov	r0, r6
 800b72c:	f7ff ff76 	bl	800b61c <__multadd>
 800b730:	e7ee      	b.n	800b710 <__s2b+0x68>
 800b732:	bf00      	nop
 800b734:	08010598 	.word	0x08010598
 800b738:	08010624 	.word	0x08010624

0800b73c <__hi0bits>:
 800b73c:	0c03      	lsrs	r3, r0, #16
 800b73e:	041b      	lsls	r3, r3, #16
 800b740:	b9d3      	cbnz	r3, 800b778 <__hi0bits+0x3c>
 800b742:	0400      	lsls	r0, r0, #16
 800b744:	2310      	movs	r3, #16
 800b746:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b74a:	bf04      	itt	eq
 800b74c:	0200      	lsleq	r0, r0, #8
 800b74e:	3308      	addeq	r3, #8
 800b750:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b754:	bf04      	itt	eq
 800b756:	0100      	lsleq	r0, r0, #4
 800b758:	3304      	addeq	r3, #4
 800b75a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b75e:	bf04      	itt	eq
 800b760:	0080      	lsleq	r0, r0, #2
 800b762:	3302      	addeq	r3, #2
 800b764:	2800      	cmp	r0, #0
 800b766:	db05      	blt.n	800b774 <__hi0bits+0x38>
 800b768:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b76c:	f103 0301 	add.w	r3, r3, #1
 800b770:	bf08      	it	eq
 800b772:	2320      	moveq	r3, #32
 800b774:	4618      	mov	r0, r3
 800b776:	4770      	bx	lr
 800b778:	2300      	movs	r3, #0
 800b77a:	e7e4      	b.n	800b746 <__hi0bits+0xa>

0800b77c <__lo0bits>:
 800b77c:	6803      	ldr	r3, [r0, #0]
 800b77e:	f013 0207 	ands.w	r2, r3, #7
 800b782:	4601      	mov	r1, r0
 800b784:	d00b      	beq.n	800b79e <__lo0bits+0x22>
 800b786:	07da      	lsls	r2, r3, #31
 800b788:	d423      	bmi.n	800b7d2 <__lo0bits+0x56>
 800b78a:	0798      	lsls	r0, r3, #30
 800b78c:	bf49      	itett	mi
 800b78e:	085b      	lsrmi	r3, r3, #1
 800b790:	089b      	lsrpl	r3, r3, #2
 800b792:	2001      	movmi	r0, #1
 800b794:	600b      	strmi	r3, [r1, #0]
 800b796:	bf5c      	itt	pl
 800b798:	600b      	strpl	r3, [r1, #0]
 800b79a:	2002      	movpl	r0, #2
 800b79c:	4770      	bx	lr
 800b79e:	b298      	uxth	r0, r3
 800b7a0:	b9a8      	cbnz	r0, 800b7ce <__lo0bits+0x52>
 800b7a2:	0c1b      	lsrs	r3, r3, #16
 800b7a4:	2010      	movs	r0, #16
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	b90a      	cbnz	r2, 800b7ae <__lo0bits+0x32>
 800b7aa:	3008      	adds	r0, #8
 800b7ac:	0a1b      	lsrs	r3, r3, #8
 800b7ae:	071a      	lsls	r2, r3, #28
 800b7b0:	bf04      	itt	eq
 800b7b2:	091b      	lsreq	r3, r3, #4
 800b7b4:	3004      	addeq	r0, #4
 800b7b6:	079a      	lsls	r2, r3, #30
 800b7b8:	bf04      	itt	eq
 800b7ba:	089b      	lsreq	r3, r3, #2
 800b7bc:	3002      	addeq	r0, #2
 800b7be:	07da      	lsls	r2, r3, #31
 800b7c0:	d403      	bmi.n	800b7ca <__lo0bits+0x4e>
 800b7c2:	085b      	lsrs	r3, r3, #1
 800b7c4:	f100 0001 	add.w	r0, r0, #1
 800b7c8:	d005      	beq.n	800b7d6 <__lo0bits+0x5a>
 800b7ca:	600b      	str	r3, [r1, #0]
 800b7cc:	4770      	bx	lr
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	e7e9      	b.n	800b7a6 <__lo0bits+0x2a>
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	4770      	bx	lr
 800b7d6:	2020      	movs	r0, #32
 800b7d8:	4770      	bx	lr
	...

0800b7dc <__i2b>:
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	460c      	mov	r4, r1
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	f7ff feb9 	bl	800b558 <_Balloc>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	b928      	cbnz	r0, 800b7f6 <__i2b+0x1a>
 800b7ea:	4b05      	ldr	r3, [pc, #20]	; (800b800 <__i2b+0x24>)
 800b7ec:	4805      	ldr	r0, [pc, #20]	; (800b804 <__i2b+0x28>)
 800b7ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b7f2:	f001 fa1d 	bl	800cc30 <__assert_func>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	6144      	str	r4, [r0, #20]
 800b7fa:	6103      	str	r3, [r0, #16]
 800b7fc:	bd10      	pop	{r4, pc}
 800b7fe:	bf00      	nop
 800b800:	08010598 	.word	0x08010598
 800b804:	08010624 	.word	0x08010624

0800b808 <__multiply>:
 800b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80c:	4691      	mov	r9, r2
 800b80e:	690a      	ldr	r2, [r1, #16]
 800b810:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b814:	429a      	cmp	r2, r3
 800b816:	bfb8      	it	lt
 800b818:	460b      	movlt	r3, r1
 800b81a:	460c      	mov	r4, r1
 800b81c:	bfbc      	itt	lt
 800b81e:	464c      	movlt	r4, r9
 800b820:	4699      	movlt	r9, r3
 800b822:	6927      	ldr	r7, [r4, #16]
 800b824:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b828:	68a3      	ldr	r3, [r4, #8]
 800b82a:	6861      	ldr	r1, [r4, #4]
 800b82c:	eb07 060a 	add.w	r6, r7, sl
 800b830:	42b3      	cmp	r3, r6
 800b832:	b085      	sub	sp, #20
 800b834:	bfb8      	it	lt
 800b836:	3101      	addlt	r1, #1
 800b838:	f7ff fe8e 	bl	800b558 <_Balloc>
 800b83c:	b930      	cbnz	r0, 800b84c <__multiply+0x44>
 800b83e:	4602      	mov	r2, r0
 800b840:	4b44      	ldr	r3, [pc, #272]	; (800b954 <__multiply+0x14c>)
 800b842:	4845      	ldr	r0, [pc, #276]	; (800b958 <__multiply+0x150>)
 800b844:	f240 115d 	movw	r1, #349	; 0x15d
 800b848:	f001 f9f2 	bl	800cc30 <__assert_func>
 800b84c:	f100 0514 	add.w	r5, r0, #20
 800b850:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b854:	462b      	mov	r3, r5
 800b856:	2200      	movs	r2, #0
 800b858:	4543      	cmp	r3, r8
 800b85a:	d321      	bcc.n	800b8a0 <__multiply+0x98>
 800b85c:	f104 0314 	add.w	r3, r4, #20
 800b860:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b864:	f109 0314 	add.w	r3, r9, #20
 800b868:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b86c:	9202      	str	r2, [sp, #8]
 800b86e:	1b3a      	subs	r2, r7, r4
 800b870:	3a15      	subs	r2, #21
 800b872:	f022 0203 	bic.w	r2, r2, #3
 800b876:	3204      	adds	r2, #4
 800b878:	f104 0115 	add.w	r1, r4, #21
 800b87c:	428f      	cmp	r7, r1
 800b87e:	bf38      	it	cc
 800b880:	2204      	movcc	r2, #4
 800b882:	9201      	str	r2, [sp, #4]
 800b884:	9a02      	ldr	r2, [sp, #8]
 800b886:	9303      	str	r3, [sp, #12]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d80c      	bhi.n	800b8a6 <__multiply+0x9e>
 800b88c:	2e00      	cmp	r6, #0
 800b88e:	dd03      	ble.n	800b898 <__multiply+0x90>
 800b890:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b894:	2b00      	cmp	r3, #0
 800b896:	d05a      	beq.n	800b94e <__multiply+0x146>
 800b898:	6106      	str	r6, [r0, #16]
 800b89a:	b005      	add	sp, #20
 800b89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a0:	f843 2b04 	str.w	r2, [r3], #4
 800b8a4:	e7d8      	b.n	800b858 <__multiply+0x50>
 800b8a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8aa:	f1ba 0f00 	cmp.w	sl, #0
 800b8ae:	d024      	beq.n	800b8fa <__multiply+0xf2>
 800b8b0:	f104 0e14 	add.w	lr, r4, #20
 800b8b4:	46a9      	mov	r9, r5
 800b8b6:	f04f 0c00 	mov.w	ip, #0
 800b8ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b8be:	f8d9 1000 	ldr.w	r1, [r9]
 800b8c2:	fa1f fb82 	uxth.w	fp, r2
 800b8c6:	b289      	uxth	r1, r1
 800b8c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b8cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b8d0:	f8d9 2000 	ldr.w	r2, [r9]
 800b8d4:	4461      	add	r1, ip
 800b8d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8da:	fb0a c20b 	mla	r2, sl, fp, ip
 800b8de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b8e2:	b289      	uxth	r1, r1
 800b8e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b8e8:	4577      	cmp	r7, lr
 800b8ea:	f849 1b04 	str.w	r1, [r9], #4
 800b8ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8f2:	d8e2      	bhi.n	800b8ba <__multiply+0xb2>
 800b8f4:	9a01      	ldr	r2, [sp, #4]
 800b8f6:	f845 c002 	str.w	ip, [r5, r2]
 800b8fa:	9a03      	ldr	r2, [sp, #12]
 800b8fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b900:	3304      	adds	r3, #4
 800b902:	f1b9 0f00 	cmp.w	r9, #0
 800b906:	d020      	beq.n	800b94a <__multiply+0x142>
 800b908:	6829      	ldr	r1, [r5, #0]
 800b90a:	f104 0c14 	add.w	ip, r4, #20
 800b90e:	46ae      	mov	lr, r5
 800b910:	f04f 0a00 	mov.w	sl, #0
 800b914:	f8bc b000 	ldrh.w	fp, [ip]
 800b918:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b91c:	fb09 220b 	mla	r2, r9, fp, r2
 800b920:	4492      	add	sl, r2
 800b922:	b289      	uxth	r1, r1
 800b924:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b928:	f84e 1b04 	str.w	r1, [lr], #4
 800b92c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b930:	f8be 1000 	ldrh.w	r1, [lr]
 800b934:	0c12      	lsrs	r2, r2, #16
 800b936:	fb09 1102 	mla	r1, r9, r2, r1
 800b93a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b93e:	4567      	cmp	r7, ip
 800b940:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b944:	d8e6      	bhi.n	800b914 <__multiply+0x10c>
 800b946:	9a01      	ldr	r2, [sp, #4]
 800b948:	50a9      	str	r1, [r5, r2]
 800b94a:	3504      	adds	r5, #4
 800b94c:	e79a      	b.n	800b884 <__multiply+0x7c>
 800b94e:	3e01      	subs	r6, #1
 800b950:	e79c      	b.n	800b88c <__multiply+0x84>
 800b952:	bf00      	nop
 800b954:	08010598 	.word	0x08010598
 800b958:	08010624 	.word	0x08010624

0800b95c <__pow5mult>:
 800b95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b960:	4615      	mov	r5, r2
 800b962:	f012 0203 	ands.w	r2, r2, #3
 800b966:	4606      	mov	r6, r0
 800b968:	460f      	mov	r7, r1
 800b96a:	d007      	beq.n	800b97c <__pow5mult+0x20>
 800b96c:	4c25      	ldr	r4, [pc, #148]	; (800ba04 <__pow5mult+0xa8>)
 800b96e:	3a01      	subs	r2, #1
 800b970:	2300      	movs	r3, #0
 800b972:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b976:	f7ff fe51 	bl	800b61c <__multadd>
 800b97a:	4607      	mov	r7, r0
 800b97c:	10ad      	asrs	r5, r5, #2
 800b97e:	d03d      	beq.n	800b9fc <__pow5mult+0xa0>
 800b980:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b982:	b97c      	cbnz	r4, 800b9a4 <__pow5mult+0x48>
 800b984:	2010      	movs	r0, #16
 800b986:	f7ff fdbf 	bl	800b508 <malloc>
 800b98a:	4602      	mov	r2, r0
 800b98c:	6270      	str	r0, [r6, #36]	; 0x24
 800b98e:	b928      	cbnz	r0, 800b99c <__pow5mult+0x40>
 800b990:	4b1d      	ldr	r3, [pc, #116]	; (800ba08 <__pow5mult+0xac>)
 800b992:	481e      	ldr	r0, [pc, #120]	; (800ba0c <__pow5mult+0xb0>)
 800b994:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b998:	f001 f94a 	bl	800cc30 <__assert_func>
 800b99c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9a0:	6004      	str	r4, [r0, #0]
 800b9a2:	60c4      	str	r4, [r0, #12]
 800b9a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b9a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9ac:	b94c      	cbnz	r4, 800b9c2 <__pow5mult+0x66>
 800b9ae:	f240 2171 	movw	r1, #625	; 0x271
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f7ff ff12 	bl	800b7dc <__i2b>
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9be:	4604      	mov	r4, r0
 800b9c0:	6003      	str	r3, [r0, #0]
 800b9c2:	f04f 0900 	mov.w	r9, #0
 800b9c6:	07eb      	lsls	r3, r5, #31
 800b9c8:	d50a      	bpl.n	800b9e0 <__pow5mult+0x84>
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	4622      	mov	r2, r4
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f7ff ff1a 	bl	800b808 <__multiply>
 800b9d4:	4639      	mov	r1, r7
 800b9d6:	4680      	mov	r8, r0
 800b9d8:	4630      	mov	r0, r6
 800b9da:	f7ff fdfd 	bl	800b5d8 <_Bfree>
 800b9de:	4647      	mov	r7, r8
 800b9e0:	106d      	asrs	r5, r5, #1
 800b9e2:	d00b      	beq.n	800b9fc <__pow5mult+0xa0>
 800b9e4:	6820      	ldr	r0, [r4, #0]
 800b9e6:	b938      	cbnz	r0, 800b9f8 <__pow5mult+0x9c>
 800b9e8:	4622      	mov	r2, r4
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	f7ff ff0b 	bl	800b808 <__multiply>
 800b9f2:	6020      	str	r0, [r4, #0]
 800b9f4:	f8c0 9000 	str.w	r9, [r0]
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	e7e4      	b.n	800b9c6 <__pow5mult+0x6a>
 800b9fc:	4638      	mov	r0, r7
 800b9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba02:	bf00      	nop
 800ba04:	08010770 	.word	0x08010770
 800ba08:	08010526 	.word	0x08010526
 800ba0c:	08010624 	.word	0x08010624

0800ba10 <__lshift>:
 800ba10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba14:	460c      	mov	r4, r1
 800ba16:	6849      	ldr	r1, [r1, #4]
 800ba18:	6923      	ldr	r3, [r4, #16]
 800ba1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba1e:	68a3      	ldr	r3, [r4, #8]
 800ba20:	4607      	mov	r7, r0
 800ba22:	4691      	mov	r9, r2
 800ba24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba28:	f108 0601 	add.w	r6, r8, #1
 800ba2c:	42b3      	cmp	r3, r6
 800ba2e:	db0b      	blt.n	800ba48 <__lshift+0x38>
 800ba30:	4638      	mov	r0, r7
 800ba32:	f7ff fd91 	bl	800b558 <_Balloc>
 800ba36:	4605      	mov	r5, r0
 800ba38:	b948      	cbnz	r0, 800ba4e <__lshift+0x3e>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	4b2a      	ldr	r3, [pc, #168]	; (800bae8 <__lshift+0xd8>)
 800ba3e:	482b      	ldr	r0, [pc, #172]	; (800baec <__lshift+0xdc>)
 800ba40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba44:	f001 f8f4 	bl	800cc30 <__assert_func>
 800ba48:	3101      	adds	r1, #1
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	e7ee      	b.n	800ba2c <__lshift+0x1c>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	f100 0114 	add.w	r1, r0, #20
 800ba54:	f100 0210 	add.w	r2, r0, #16
 800ba58:	4618      	mov	r0, r3
 800ba5a:	4553      	cmp	r3, sl
 800ba5c:	db37      	blt.n	800bace <__lshift+0xbe>
 800ba5e:	6920      	ldr	r0, [r4, #16]
 800ba60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba64:	f104 0314 	add.w	r3, r4, #20
 800ba68:	f019 091f 	ands.w	r9, r9, #31
 800ba6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ba74:	d02f      	beq.n	800bad6 <__lshift+0xc6>
 800ba76:	f1c9 0e20 	rsb	lr, r9, #32
 800ba7a:	468a      	mov	sl, r1
 800ba7c:	f04f 0c00 	mov.w	ip, #0
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	fa02 f209 	lsl.w	r2, r2, r9
 800ba86:	ea42 020c 	orr.w	r2, r2, ip
 800ba8a:	f84a 2b04 	str.w	r2, [sl], #4
 800ba8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba92:	4298      	cmp	r0, r3
 800ba94:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ba98:	d8f2      	bhi.n	800ba80 <__lshift+0x70>
 800ba9a:	1b03      	subs	r3, r0, r4
 800ba9c:	3b15      	subs	r3, #21
 800ba9e:	f023 0303 	bic.w	r3, r3, #3
 800baa2:	3304      	adds	r3, #4
 800baa4:	f104 0215 	add.w	r2, r4, #21
 800baa8:	4290      	cmp	r0, r2
 800baaa:	bf38      	it	cc
 800baac:	2304      	movcc	r3, #4
 800baae:	f841 c003 	str.w	ip, [r1, r3]
 800bab2:	f1bc 0f00 	cmp.w	ip, #0
 800bab6:	d001      	beq.n	800babc <__lshift+0xac>
 800bab8:	f108 0602 	add.w	r6, r8, #2
 800babc:	3e01      	subs	r6, #1
 800babe:	4638      	mov	r0, r7
 800bac0:	612e      	str	r6, [r5, #16]
 800bac2:	4621      	mov	r1, r4
 800bac4:	f7ff fd88 	bl	800b5d8 <_Bfree>
 800bac8:	4628      	mov	r0, r5
 800baca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bace:	f842 0f04 	str.w	r0, [r2, #4]!
 800bad2:	3301      	adds	r3, #1
 800bad4:	e7c1      	b.n	800ba5a <__lshift+0x4a>
 800bad6:	3904      	subs	r1, #4
 800bad8:	f853 2b04 	ldr.w	r2, [r3], #4
 800badc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bae0:	4298      	cmp	r0, r3
 800bae2:	d8f9      	bhi.n	800bad8 <__lshift+0xc8>
 800bae4:	e7ea      	b.n	800babc <__lshift+0xac>
 800bae6:	bf00      	nop
 800bae8:	08010598 	.word	0x08010598
 800baec:	08010624 	.word	0x08010624

0800baf0 <__mcmp>:
 800baf0:	b530      	push	{r4, r5, lr}
 800baf2:	6902      	ldr	r2, [r0, #16]
 800baf4:	690c      	ldr	r4, [r1, #16]
 800baf6:	1b12      	subs	r2, r2, r4
 800baf8:	d10e      	bne.n	800bb18 <__mcmp+0x28>
 800bafa:	f100 0314 	add.w	r3, r0, #20
 800bafe:	3114      	adds	r1, #20
 800bb00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb10:	42a5      	cmp	r5, r4
 800bb12:	d003      	beq.n	800bb1c <__mcmp+0x2c>
 800bb14:	d305      	bcc.n	800bb22 <__mcmp+0x32>
 800bb16:	2201      	movs	r2, #1
 800bb18:	4610      	mov	r0, r2
 800bb1a:	bd30      	pop	{r4, r5, pc}
 800bb1c:	4283      	cmp	r3, r0
 800bb1e:	d3f3      	bcc.n	800bb08 <__mcmp+0x18>
 800bb20:	e7fa      	b.n	800bb18 <__mcmp+0x28>
 800bb22:	f04f 32ff 	mov.w	r2, #4294967295
 800bb26:	e7f7      	b.n	800bb18 <__mcmp+0x28>

0800bb28 <__mdiff>:
 800bb28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2c:	460c      	mov	r4, r1
 800bb2e:	4606      	mov	r6, r0
 800bb30:	4611      	mov	r1, r2
 800bb32:	4620      	mov	r0, r4
 800bb34:	4690      	mov	r8, r2
 800bb36:	f7ff ffdb 	bl	800baf0 <__mcmp>
 800bb3a:	1e05      	subs	r5, r0, #0
 800bb3c:	d110      	bne.n	800bb60 <__mdiff+0x38>
 800bb3e:	4629      	mov	r1, r5
 800bb40:	4630      	mov	r0, r6
 800bb42:	f7ff fd09 	bl	800b558 <_Balloc>
 800bb46:	b930      	cbnz	r0, 800bb56 <__mdiff+0x2e>
 800bb48:	4b3a      	ldr	r3, [pc, #232]	; (800bc34 <__mdiff+0x10c>)
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	f240 2132 	movw	r1, #562	; 0x232
 800bb50:	4839      	ldr	r0, [pc, #228]	; (800bc38 <__mdiff+0x110>)
 800bb52:	f001 f86d 	bl	800cc30 <__assert_func>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb60:	bfa4      	itt	ge
 800bb62:	4643      	movge	r3, r8
 800bb64:	46a0      	movge	r8, r4
 800bb66:	4630      	mov	r0, r6
 800bb68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb6c:	bfa6      	itte	ge
 800bb6e:	461c      	movge	r4, r3
 800bb70:	2500      	movge	r5, #0
 800bb72:	2501      	movlt	r5, #1
 800bb74:	f7ff fcf0 	bl	800b558 <_Balloc>
 800bb78:	b920      	cbnz	r0, 800bb84 <__mdiff+0x5c>
 800bb7a:	4b2e      	ldr	r3, [pc, #184]	; (800bc34 <__mdiff+0x10c>)
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bb82:	e7e5      	b.n	800bb50 <__mdiff+0x28>
 800bb84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb88:	6926      	ldr	r6, [r4, #16]
 800bb8a:	60c5      	str	r5, [r0, #12]
 800bb8c:	f104 0914 	add.w	r9, r4, #20
 800bb90:	f108 0514 	add.w	r5, r8, #20
 800bb94:	f100 0e14 	add.w	lr, r0, #20
 800bb98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bba0:	f108 0210 	add.w	r2, r8, #16
 800bba4:	46f2      	mov	sl, lr
 800bba6:	2100      	movs	r1, #0
 800bba8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bbac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bbb0:	fa1f f883 	uxth.w	r8, r3
 800bbb4:	fa11 f18b 	uxtah	r1, r1, fp
 800bbb8:	0c1b      	lsrs	r3, r3, #16
 800bbba:	eba1 0808 	sub.w	r8, r1, r8
 800bbbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bbc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bbc6:	fa1f f888 	uxth.w	r8, r8
 800bbca:	1419      	asrs	r1, r3, #16
 800bbcc:	454e      	cmp	r6, r9
 800bbce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bbd2:	f84a 3b04 	str.w	r3, [sl], #4
 800bbd6:	d8e7      	bhi.n	800bba8 <__mdiff+0x80>
 800bbd8:	1b33      	subs	r3, r6, r4
 800bbda:	3b15      	subs	r3, #21
 800bbdc:	f023 0303 	bic.w	r3, r3, #3
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	3415      	adds	r4, #21
 800bbe4:	42a6      	cmp	r6, r4
 800bbe6:	bf38      	it	cc
 800bbe8:	2304      	movcc	r3, #4
 800bbea:	441d      	add	r5, r3
 800bbec:	4473      	add	r3, lr
 800bbee:	469e      	mov	lr, r3
 800bbf0:	462e      	mov	r6, r5
 800bbf2:	4566      	cmp	r6, ip
 800bbf4:	d30e      	bcc.n	800bc14 <__mdiff+0xec>
 800bbf6:	f10c 0203 	add.w	r2, ip, #3
 800bbfa:	1b52      	subs	r2, r2, r5
 800bbfc:	f022 0203 	bic.w	r2, r2, #3
 800bc00:	3d03      	subs	r5, #3
 800bc02:	45ac      	cmp	ip, r5
 800bc04:	bf38      	it	cc
 800bc06:	2200      	movcc	r2, #0
 800bc08:	441a      	add	r2, r3
 800bc0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc0e:	b17b      	cbz	r3, 800bc30 <__mdiff+0x108>
 800bc10:	6107      	str	r7, [r0, #16]
 800bc12:	e7a3      	b.n	800bb5c <__mdiff+0x34>
 800bc14:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc18:	fa11 f288 	uxtah	r2, r1, r8
 800bc1c:	1414      	asrs	r4, r2, #16
 800bc1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc22:	b292      	uxth	r2, r2
 800bc24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc28:	f84e 2b04 	str.w	r2, [lr], #4
 800bc2c:	1421      	asrs	r1, r4, #16
 800bc2e:	e7e0      	b.n	800bbf2 <__mdiff+0xca>
 800bc30:	3f01      	subs	r7, #1
 800bc32:	e7ea      	b.n	800bc0a <__mdiff+0xe2>
 800bc34:	08010598 	.word	0x08010598
 800bc38:	08010624 	.word	0x08010624

0800bc3c <__ulp>:
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	ed8d 0b00 	vstr	d0, [sp]
 800bc42:	9b01      	ldr	r3, [sp, #4]
 800bc44:	4912      	ldr	r1, [pc, #72]	; (800bc90 <__ulp+0x54>)
 800bc46:	4019      	ands	r1, r3
 800bc48:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bc4c:	2900      	cmp	r1, #0
 800bc4e:	dd05      	ble.n	800bc5c <__ulp+0x20>
 800bc50:	2200      	movs	r2, #0
 800bc52:	460b      	mov	r3, r1
 800bc54:	ec43 2b10 	vmov	d0, r2, r3
 800bc58:	b002      	add	sp, #8
 800bc5a:	4770      	bx	lr
 800bc5c:	4249      	negs	r1, r1
 800bc5e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bc62:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bc66:	f04f 0200 	mov.w	r2, #0
 800bc6a:	f04f 0300 	mov.w	r3, #0
 800bc6e:	da04      	bge.n	800bc7a <__ulp+0x3e>
 800bc70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bc74:	fa41 f300 	asr.w	r3, r1, r0
 800bc78:	e7ec      	b.n	800bc54 <__ulp+0x18>
 800bc7a:	f1a0 0114 	sub.w	r1, r0, #20
 800bc7e:	291e      	cmp	r1, #30
 800bc80:	bfda      	itte	le
 800bc82:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bc86:	fa20 f101 	lsrle.w	r1, r0, r1
 800bc8a:	2101      	movgt	r1, #1
 800bc8c:	460a      	mov	r2, r1
 800bc8e:	e7e1      	b.n	800bc54 <__ulp+0x18>
 800bc90:	7ff00000 	.word	0x7ff00000

0800bc94 <__b2d>:
 800bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc96:	6905      	ldr	r5, [r0, #16]
 800bc98:	f100 0714 	add.w	r7, r0, #20
 800bc9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bca0:	1f2e      	subs	r6, r5, #4
 800bca2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bca6:	4620      	mov	r0, r4
 800bca8:	f7ff fd48 	bl	800b73c <__hi0bits>
 800bcac:	f1c0 0320 	rsb	r3, r0, #32
 800bcb0:	280a      	cmp	r0, #10
 800bcb2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bd30 <__b2d+0x9c>
 800bcb6:	600b      	str	r3, [r1, #0]
 800bcb8:	dc14      	bgt.n	800bce4 <__b2d+0x50>
 800bcba:	f1c0 0e0b 	rsb	lr, r0, #11
 800bcbe:	fa24 f10e 	lsr.w	r1, r4, lr
 800bcc2:	42b7      	cmp	r7, r6
 800bcc4:	ea41 030c 	orr.w	r3, r1, ip
 800bcc8:	bf34      	ite	cc
 800bcca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bcce:	2100      	movcs	r1, #0
 800bcd0:	3015      	adds	r0, #21
 800bcd2:	fa04 f000 	lsl.w	r0, r4, r0
 800bcd6:	fa21 f10e 	lsr.w	r1, r1, lr
 800bcda:	ea40 0201 	orr.w	r2, r0, r1
 800bcde:	ec43 2b10 	vmov	d0, r2, r3
 800bce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bce4:	42b7      	cmp	r7, r6
 800bce6:	bf3a      	itte	cc
 800bce8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bcec:	f1a5 0608 	subcc.w	r6, r5, #8
 800bcf0:	2100      	movcs	r1, #0
 800bcf2:	380b      	subs	r0, #11
 800bcf4:	d017      	beq.n	800bd26 <__b2d+0x92>
 800bcf6:	f1c0 0c20 	rsb	ip, r0, #32
 800bcfa:	fa04 f500 	lsl.w	r5, r4, r0
 800bcfe:	42be      	cmp	r6, r7
 800bd00:	fa21 f40c 	lsr.w	r4, r1, ip
 800bd04:	ea45 0504 	orr.w	r5, r5, r4
 800bd08:	bf8c      	ite	hi
 800bd0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bd0e:	2400      	movls	r4, #0
 800bd10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bd14:	fa01 f000 	lsl.w	r0, r1, r0
 800bd18:	fa24 f40c 	lsr.w	r4, r4, ip
 800bd1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd20:	ea40 0204 	orr.w	r2, r0, r4
 800bd24:	e7db      	b.n	800bcde <__b2d+0x4a>
 800bd26:	ea44 030c 	orr.w	r3, r4, ip
 800bd2a:	460a      	mov	r2, r1
 800bd2c:	e7d7      	b.n	800bcde <__b2d+0x4a>
 800bd2e:	bf00      	nop
 800bd30:	3ff00000 	.word	0x3ff00000

0800bd34 <__d2b>:
 800bd34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd38:	4689      	mov	r9, r1
 800bd3a:	2101      	movs	r1, #1
 800bd3c:	ec57 6b10 	vmov	r6, r7, d0
 800bd40:	4690      	mov	r8, r2
 800bd42:	f7ff fc09 	bl	800b558 <_Balloc>
 800bd46:	4604      	mov	r4, r0
 800bd48:	b930      	cbnz	r0, 800bd58 <__d2b+0x24>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	4b25      	ldr	r3, [pc, #148]	; (800bde4 <__d2b+0xb0>)
 800bd4e:	4826      	ldr	r0, [pc, #152]	; (800bde8 <__d2b+0xb4>)
 800bd50:	f240 310a 	movw	r1, #778	; 0x30a
 800bd54:	f000 ff6c 	bl	800cc30 <__assert_func>
 800bd58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bd5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd60:	bb35      	cbnz	r5, 800bdb0 <__d2b+0x7c>
 800bd62:	2e00      	cmp	r6, #0
 800bd64:	9301      	str	r3, [sp, #4]
 800bd66:	d028      	beq.n	800bdba <__d2b+0x86>
 800bd68:	4668      	mov	r0, sp
 800bd6a:	9600      	str	r6, [sp, #0]
 800bd6c:	f7ff fd06 	bl	800b77c <__lo0bits>
 800bd70:	9900      	ldr	r1, [sp, #0]
 800bd72:	b300      	cbz	r0, 800bdb6 <__d2b+0x82>
 800bd74:	9a01      	ldr	r2, [sp, #4]
 800bd76:	f1c0 0320 	rsb	r3, r0, #32
 800bd7a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd7e:	430b      	orrs	r3, r1
 800bd80:	40c2      	lsrs	r2, r0
 800bd82:	6163      	str	r3, [r4, #20]
 800bd84:	9201      	str	r2, [sp, #4]
 800bd86:	9b01      	ldr	r3, [sp, #4]
 800bd88:	61a3      	str	r3, [r4, #24]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	bf14      	ite	ne
 800bd8e:	2202      	movne	r2, #2
 800bd90:	2201      	moveq	r2, #1
 800bd92:	6122      	str	r2, [r4, #16]
 800bd94:	b1d5      	cbz	r5, 800bdcc <__d2b+0x98>
 800bd96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd9a:	4405      	add	r5, r0
 800bd9c:	f8c9 5000 	str.w	r5, [r9]
 800bda0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bda4:	f8c8 0000 	str.w	r0, [r8]
 800bda8:	4620      	mov	r0, r4
 800bdaa:	b003      	add	sp, #12
 800bdac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdb4:	e7d5      	b.n	800bd62 <__d2b+0x2e>
 800bdb6:	6161      	str	r1, [r4, #20]
 800bdb8:	e7e5      	b.n	800bd86 <__d2b+0x52>
 800bdba:	a801      	add	r0, sp, #4
 800bdbc:	f7ff fcde 	bl	800b77c <__lo0bits>
 800bdc0:	9b01      	ldr	r3, [sp, #4]
 800bdc2:	6163      	str	r3, [r4, #20]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	6122      	str	r2, [r4, #16]
 800bdc8:	3020      	adds	r0, #32
 800bdca:	e7e3      	b.n	800bd94 <__d2b+0x60>
 800bdcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bdd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bdd4:	f8c9 0000 	str.w	r0, [r9]
 800bdd8:	6918      	ldr	r0, [r3, #16]
 800bdda:	f7ff fcaf 	bl	800b73c <__hi0bits>
 800bdde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bde2:	e7df      	b.n	800bda4 <__d2b+0x70>
 800bde4:	08010598 	.word	0x08010598
 800bde8:	08010624 	.word	0x08010624

0800bdec <__ratio>:
 800bdec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf0:	4688      	mov	r8, r1
 800bdf2:	4669      	mov	r1, sp
 800bdf4:	4681      	mov	r9, r0
 800bdf6:	f7ff ff4d 	bl	800bc94 <__b2d>
 800bdfa:	a901      	add	r1, sp, #4
 800bdfc:	4640      	mov	r0, r8
 800bdfe:	ec55 4b10 	vmov	r4, r5, d0
 800be02:	f7ff ff47 	bl	800bc94 <__b2d>
 800be06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800be0e:	eba3 0c02 	sub.w	ip, r3, r2
 800be12:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be16:	1a9b      	subs	r3, r3, r2
 800be18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be1c:	ec51 0b10 	vmov	r0, r1, d0
 800be20:	2b00      	cmp	r3, #0
 800be22:	bfd6      	itet	le
 800be24:	460a      	movle	r2, r1
 800be26:	462a      	movgt	r2, r5
 800be28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be2c:	468b      	mov	fp, r1
 800be2e:	462f      	mov	r7, r5
 800be30:	bfd4      	ite	le
 800be32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be3a:	4620      	mov	r0, r4
 800be3c:	ee10 2a10 	vmov	r2, s0
 800be40:	465b      	mov	r3, fp
 800be42:	4639      	mov	r1, r7
 800be44:	f7f4 fd1a 	bl	800087c <__aeabi_ddiv>
 800be48:	ec41 0b10 	vmov	d0, r0, r1
 800be4c:	b003      	add	sp, #12
 800be4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be52 <__copybits>:
 800be52:	3901      	subs	r1, #1
 800be54:	b570      	push	{r4, r5, r6, lr}
 800be56:	1149      	asrs	r1, r1, #5
 800be58:	6914      	ldr	r4, [r2, #16]
 800be5a:	3101      	adds	r1, #1
 800be5c:	f102 0314 	add.w	r3, r2, #20
 800be60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be68:	1f05      	subs	r5, r0, #4
 800be6a:	42a3      	cmp	r3, r4
 800be6c:	d30c      	bcc.n	800be88 <__copybits+0x36>
 800be6e:	1aa3      	subs	r3, r4, r2
 800be70:	3b11      	subs	r3, #17
 800be72:	f023 0303 	bic.w	r3, r3, #3
 800be76:	3211      	adds	r2, #17
 800be78:	42a2      	cmp	r2, r4
 800be7a:	bf88      	it	hi
 800be7c:	2300      	movhi	r3, #0
 800be7e:	4418      	add	r0, r3
 800be80:	2300      	movs	r3, #0
 800be82:	4288      	cmp	r0, r1
 800be84:	d305      	bcc.n	800be92 <__copybits+0x40>
 800be86:	bd70      	pop	{r4, r5, r6, pc}
 800be88:	f853 6b04 	ldr.w	r6, [r3], #4
 800be8c:	f845 6f04 	str.w	r6, [r5, #4]!
 800be90:	e7eb      	b.n	800be6a <__copybits+0x18>
 800be92:	f840 3b04 	str.w	r3, [r0], #4
 800be96:	e7f4      	b.n	800be82 <__copybits+0x30>

0800be98 <__any_on>:
 800be98:	f100 0214 	add.w	r2, r0, #20
 800be9c:	6900      	ldr	r0, [r0, #16]
 800be9e:	114b      	asrs	r3, r1, #5
 800bea0:	4298      	cmp	r0, r3
 800bea2:	b510      	push	{r4, lr}
 800bea4:	db11      	blt.n	800beca <__any_on+0x32>
 800bea6:	dd0a      	ble.n	800bebe <__any_on+0x26>
 800bea8:	f011 011f 	ands.w	r1, r1, #31
 800beac:	d007      	beq.n	800bebe <__any_on+0x26>
 800beae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800beb2:	fa24 f001 	lsr.w	r0, r4, r1
 800beb6:	fa00 f101 	lsl.w	r1, r0, r1
 800beba:	428c      	cmp	r4, r1
 800bebc:	d10b      	bne.n	800bed6 <__any_on+0x3e>
 800bebe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d803      	bhi.n	800bece <__any_on+0x36>
 800bec6:	2000      	movs	r0, #0
 800bec8:	bd10      	pop	{r4, pc}
 800beca:	4603      	mov	r3, r0
 800becc:	e7f7      	b.n	800bebe <__any_on+0x26>
 800bece:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bed2:	2900      	cmp	r1, #0
 800bed4:	d0f5      	beq.n	800bec2 <__any_on+0x2a>
 800bed6:	2001      	movs	r0, #1
 800bed8:	e7f6      	b.n	800bec8 <__any_on+0x30>

0800beda <_calloc_r>:
 800beda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bedc:	fba1 2402 	umull	r2, r4, r1, r2
 800bee0:	b94c      	cbnz	r4, 800bef6 <_calloc_r+0x1c>
 800bee2:	4611      	mov	r1, r2
 800bee4:	9201      	str	r2, [sp, #4]
 800bee6:	f000 f87b 	bl	800bfe0 <_malloc_r>
 800beea:	9a01      	ldr	r2, [sp, #4]
 800beec:	4605      	mov	r5, r0
 800beee:	b930      	cbnz	r0, 800befe <_calloc_r+0x24>
 800bef0:	4628      	mov	r0, r5
 800bef2:	b003      	add	sp, #12
 800bef4:	bd30      	pop	{r4, r5, pc}
 800bef6:	220c      	movs	r2, #12
 800bef8:	6002      	str	r2, [r0, #0]
 800befa:	2500      	movs	r5, #0
 800befc:	e7f8      	b.n	800bef0 <_calloc_r+0x16>
 800befe:	4621      	mov	r1, r4
 800bf00:	f7fc fb04 	bl	800850c <memset>
 800bf04:	e7f4      	b.n	800bef0 <_calloc_r+0x16>
	...

0800bf08 <_free_r>:
 800bf08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf0a:	2900      	cmp	r1, #0
 800bf0c:	d044      	beq.n	800bf98 <_free_r+0x90>
 800bf0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf12:	9001      	str	r0, [sp, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f1a1 0404 	sub.w	r4, r1, #4
 800bf1a:	bfb8      	it	lt
 800bf1c:	18e4      	addlt	r4, r4, r3
 800bf1e:	f001 f88b 	bl	800d038 <__malloc_lock>
 800bf22:	4a1e      	ldr	r2, [pc, #120]	; (800bf9c <_free_r+0x94>)
 800bf24:	9801      	ldr	r0, [sp, #4]
 800bf26:	6813      	ldr	r3, [r2, #0]
 800bf28:	b933      	cbnz	r3, 800bf38 <_free_r+0x30>
 800bf2a:	6063      	str	r3, [r4, #4]
 800bf2c:	6014      	str	r4, [r2, #0]
 800bf2e:	b003      	add	sp, #12
 800bf30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf34:	f001 b886 	b.w	800d044 <__malloc_unlock>
 800bf38:	42a3      	cmp	r3, r4
 800bf3a:	d908      	bls.n	800bf4e <_free_r+0x46>
 800bf3c:	6825      	ldr	r5, [r4, #0]
 800bf3e:	1961      	adds	r1, r4, r5
 800bf40:	428b      	cmp	r3, r1
 800bf42:	bf01      	itttt	eq
 800bf44:	6819      	ldreq	r1, [r3, #0]
 800bf46:	685b      	ldreq	r3, [r3, #4]
 800bf48:	1949      	addeq	r1, r1, r5
 800bf4a:	6021      	streq	r1, [r4, #0]
 800bf4c:	e7ed      	b.n	800bf2a <_free_r+0x22>
 800bf4e:	461a      	mov	r2, r3
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	b10b      	cbz	r3, 800bf58 <_free_r+0x50>
 800bf54:	42a3      	cmp	r3, r4
 800bf56:	d9fa      	bls.n	800bf4e <_free_r+0x46>
 800bf58:	6811      	ldr	r1, [r2, #0]
 800bf5a:	1855      	adds	r5, r2, r1
 800bf5c:	42a5      	cmp	r5, r4
 800bf5e:	d10b      	bne.n	800bf78 <_free_r+0x70>
 800bf60:	6824      	ldr	r4, [r4, #0]
 800bf62:	4421      	add	r1, r4
 800bf64:	1854      	adds	r4, r2, r1
 800bf66:	42a3      	cmp	r3, r4
 800bf68:	6011      	str	r1, [r2, #0]
 800bf6a:	d1e0      	bne.n	800bf2e <_free_r+0x26>
 800bf6c:	681c      	ldr	r4, [r3, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	6053      	str	r3, [r2, #4]
 800bf72:	4421      	add	r1, r4
 800bf74:	6011      	str	r1, [r2, #0]
 800bf76:	e7da      	b.n	800bf2e <_free_r+0x26>
 800bf78:	d902      	bls.n	800bf80 <_free_r+0x78>
 800bf7a:	230c      	movs	r3, #12
 800bf7c:	6003      	str	r3, [r0, #0]
 800bf7e:	e7d6      	b.n	800bf2e <_free_r+0x26>
 800bf80:	6825      	ldr	r5, [r4, #0]
 800bf82:	1961      	adds	r1, r4, r5
 800bf84:	428b      	cmp	r3, r1
 800bf86:	bf04      	itt	eq
 800bf88:	6819      	ldreq	r1, [r3, #0]
 800bf8a:	685b      	ldreq	r3, [r3, #4]
 800bf8c:	6063      	str	r3, [r4, #4]
 800bf8e:	bf04      	itt	eq
 800bf90:	1949      	addeq	r1, r1, r5
 800bf92:	6021      	streq	r1, [r4, #0]
 800bf94:	6054      	str	r4, [r2, #4]
 800bf96:	e7ca      	b.n	800bf2e <_free_r+0x26>
 800bf98:	b003      	add	sp, #12
 800bf9a:	bd30      	pop	{r4, r5, pc}
 800bf9c:	20009cf8 	.word	0x20009cf8

0800bfa0 <sbrk_aligned>:
 800bfa0:	b570      	push	{r4, r5, r6, lr}
 800bfa2:	4e0e      	ldr	r6, [pc, #56]	; (800bfdc <sbrk_aligned+0x3c>)
 800bfa4:	460c      	mov	r4, r1
 800bfa6:	6831      	ldr	r1, [r6, #0]
 800bfa8:	4605      	mov	r5, r0
 800bfaa:	b911      	cbnz	r1, 800bfb2 <sbrk_aligned+0x12>
 800bfac:	f000 fd28 	bl	800ca00 <_sbrk_r>
 800bfb0:	6030      	str	r0, [r6, #0]
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	f000 fd23 	bl	800ca00 <_sbrk_r>
 800bfba:	1c43      	adds	r3, r0, #1
 800bfbc:	d00a      	beq.n	800bfd4 <sbrk_aligned+0x34>
 800bfbe:	1cc4      	adds	r4, r0, #3
 800bfc0:	f024 0403 	bic.w	r4, r4, #3
 800bfc4:	42a0      	cmp	r0, r4
 800bfc6:	d007      	beq.n	800bfd8 <sbrk_aligned+0x38>
 800bfc8:	1a21      	subs	r1, r4, r0
 800bfca:	4628      	mov	r0, r5
 800bfcc:	f000 fd18 	bl	800ca00 <_sbrk_r>
 800bfd0:	3001      	adds	r0, #1
 800bfd2:	d101      	bne.n	800bfd8 <sbrk_aligned+0x38>
 800bfd4:	f04f 34ff 	mov.w	r4, #4294967295
 800bfd8:	4620      	mov	r0, r4
 800bfda:	bd70      	pop	{r4, r5, r6, pc}
 800bfdc:	20009cfc 	.word	0x20009cfc

0800bfe0 <_malloc_r>:
 800bfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe4:	1ccd      	adds	r5, r1, #3
 800bfe6:	f025 0503 	bic.w	r5, r5, #3
 800bfea:	3508      	adds	r5, #8
 800bfec:	2d0c      	cmp	r5, #12
 800bfee:	bf38      	it	cc
 800bff0:	250c      	movcc	r5, #12
 800bff2:	2d00      	cmp	r5, #0
 800bff4:	4607      	mov	r7, r0
 800bff6:	db01      	blt.n	800bffc <_malloc_r+0x1c>
 800bff8:	42a9      	cmp	r1, r5
 800bffa:	d905      	bls.n	800c008 <_malloc_r+0x28>
 800bffc:	230c      	movs	r3, #12
 800bffe:	603b      	str	r3, [r7, #0]
 800c000:	2600      	movs	r6, #0
 800c002:	4630      	mov	r0, r6
 800c004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c008:	4e2e      	ldr	r6, [pc, #184]	; (800c0c4 <_malloc_r+0xe4>)
 800c00a:	f001 f815 	bl	800d038 <__malloc_lock>
 800c00e:	6833      	ldr	r3, [r6, #0]
 800c010:	461c      	mov	r4, r3
 800c012:	bb34      	cbnz	r4, 800c062 <_malloc_r+0x82>
 800c014:	4629      	mov	r1, r5
 800c016:	4638      	mov	r0, r7
 800c018:	f7ff ffc2 	bl	800bfa0 <sbrk_aligned>
 800c01c:	1c43      	adds	r3, r0, #1
 800c01e:	4604      	mov	r4, r0
 800c020:	d14d      	bne.n	800c0be <_malloc_r+0xde>
 800c022:	6834      	ldr	r4, [r6, #0]
 800c024:	4626      	mov	r6, r4
 800c026:	2e00      	cmp	r6, #0
 800c028:	d140      	bne.n	800c0ac <_malloc_r+0xcc>
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	4631      	mov	r1, r6
 800c02e:	4638      	mov	r0, r7
 800c030:	eb04 0803 	add.w	r8, r4, r3
 800c034:	f000 fce4 	bl	800ca00 <_sbrk_r>
 800c038:	4580      	cmp	r8, r0
 800c03a:	d13a      	bne.n	800c0b2 <_malloc_r+0xd2>
 800c03c:	6821      	ldr	r1, [r4, #0]
 800c03e:	3503      	adds	r5, #3
 800c040:	1a6d      	subs	r5, r5, r1
 800c042:	f025 0503 	bic.w	r5, r5, #3
 800c046:	3508      	adds	r5, #8
 800c048:	2d0c      	cmp	r5, #12
 800c04a:	bf38      	it	cc
 800c04c:	250c      	movcc	r5, #12
 800c04e:	4629      	mov	r1, r5
 800c050:	4638      	mov	r0, r7
 800c052:	f7ff ffa5 	bl	800bfa0 <sbrk_aligned>
 800c056:	3001      	adds	r0, #1
 800c058:	d02b      	beq.n	800c0b2 <_malloc_r+0xd2>
 800c05a:	6823      	ldr	r3, [r4, #0]
 800c05c:	442b      	add	r3, r5
 800c05e:	6023      	str	r3, [r4, #0]
 800c060:	e00e      	b.n	800c080 <_malloc_r+0xa0>
 800c062:	6822      	ldr	r2, [r4, #0]
 800c064:	1b52      	subs	r2, r2, r5
 800c066:	d41e      	bmi.n	800c0a6 <_malloc_r+0xc6>
 800c068:	2a0b      	cmp	r2, #11
 800c06a:	d916      	bls.n	800c09a <_malloc_r+0xba>
 800c06c:	1961      	adds	r1, r4, r5
 800c06e:	42a3      	cmp	r3, r4
 800c070:	6025      	str	r5, [r4, #0]
 800c072:	bf18      	it	ne
 800c074:	6059      	strne	r1, [r3, #4]
 800c076:	6863      	ldr	r3, [r4, #4]
 800c078:	bf08      	it	eq
 800c07a:	6031      	streq	r1, [r6, #0]
 800c07c:	5162      	str	r2, [r4, r5]
 800c07e:	604b      	str	r3, [r1, #4]
 800c080:	4638      	mov	r0, r7
 800c082:	f104 060b 	add.w	r6, r4, #11
 800c086:	f000 ffdd 	bl	800d044 <__malloc_unlock>
 800c08a:	f026 0607 	bic.w	r6, r6, #7
 800c08e:	1d23      	adds	r3, r4, #4
 800c090:	1af2      	subs	r2, r6, r3
 800c092:	d0b6      	beq.n	800c002 <_malloc_r+0x22>
 800c094:	1b9b      	subs	r3, r3, r6
 800c096:	50a3      	str	r3, [r4, r2]
 800c098:	e7b3      	b.n	800c002 <_malloc_r+0x22>
 800c09a:	6862      	ldr	r2, [r4, #4]
 800c09c:	42a3      	cmp	r3, r4
 800c09e:	bf0c      	ite	eq
 800c0a0:	6032      	streq	r2, [r6, #0]
 800c0a2:	605a      	strne	r2, [r3, #4]
 800c0a4:	e7ec      	b.n	800c080 <_malloc_r+0xa0>
 800c0a6:	4623      	mov	r3, r4
 800c0a8:	6864      	ldr	r4, [r4, #4]
 800c0aa:	e7b2      	b.n	800c012 <_malloc_r+0x32>
 800c0ac:	4634      	mov	r4, r6
 800c0ae:	6876      	ldr	r6, [r6, #4]
 800c0b0:	e7b9      	b.n	800c026 <_malloc_r+0x46>
 800c0b2:	230c      	movs	r3, #12
 800c0b4:	603b      	str	r3, [r7, #0]
 800c0b6:	4638      	mov	r0, r7
 800c0b8:	f000 ffc4 	bl	800d044 <__malloc_unlock>
 800c0bc:	e7a1      	b.n	800c002 <_malloc_r+0x22>
 800c0be:	6025      	str	r5, [r4, #0]
 800c0c0:	e7de      	b.n	800c080 <_malloc_r+0xa0>
 800c0c2:	bf00      	nop
 800c0c4:	20009cf8 	.word	0x20009cf8

0800c0c8 <__ssputs_r>:
 800c0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0cc:	688e      	ldr	r6, [r1, #8]
 800c0ce:	429e      	cmp	r6, r3
 800c0d0:	4682      	mov	sl, r0
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	4690      	mov	r8, r2
 800c0d6:	461f      	mov	r7, r3
 800c0d8:	d838      	bhi.n	800c14c <__ssputs_r+0x84>
 800c0da:	898a      	ldrh	r2, [r1, #12]
 800c0dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0e0:	d032      	beq.n	800c148 <__ssputs_r+0x80>
 800c0e2:	6825      	ldr	r5, [r4, #0]
 800c0e4:	6909      	ldr	r1, [r1, #16]
 800c0e6:	eba5 0901 	sub.w	r9, r5, r1
 800c0ea:	6965      	ldr	r5, [r4, #20]
 800c0ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	444b      	add	r3, r9
 800c0f8:	106d      	asrs	r5, r5, #1
 800c0fa:	429d      	cmp	r5, r3
 800c0fc:	bf38      	it	cc
 800c0fe:	461d      	movcc	r5, r3
 800c100:	0553      	lsls	r3, r2, #21
 800c102:	d531      	bpl.n	800c168 <__ssputs_r+0xa0>
 800c104:	4629      	mov	r1, r5
 800c106:	f7ff ff6b 	bl	800bfe0 <_malloc_r>
 800c10a:	4606      	mov	r6, r0
 800c10c:	b950      	cbnz	r0, 800c124 <__ssputs_r+0x5c>
 800c10e:	230c      	movs	r3, #12
 800c110:	f8ca 3000 	str.w	r3, [sl]
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c11a:	81a3      	strh	r3, [r4, #12]
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295
 800c120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c124:	6921      	ldr	r1, [r4, #16]
 800c126:	464a      	mov	r2, r9
 800c128:	f7ff fa08 	bl	800b53c <memcpy>
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c136:	81a3      	strh	r3, [r4, #12]
 800c138:	6126      	str	r6, [r4, #16]
 800c13a:	6165      	str	r5, [r4, #20]
 800c13c:	444e      	add	r6, r9
 800c13e:	eba5 0509 	sub.w	r5, r5, r9
 800c142:	6026      	str	r6, [r4, #0]
 800c144:	60a5      	str	r5, [r4, #8]
 800c146:	463e      	mov	r6, r7
 800c148:	42be      	cmp	r6, r7
 800c14a:	d900      	bls.n	800c14e <__ssputs_r+0x86>
 800c14c:	463e      	mov	r6, r7
 800c14e:	6820      	ldr	r0, [r4, #0]
 800c150:	4632      	mov	r2, r6
 800c152:	4641      	mov	r1, r8
 800c154:	f000 ff56 	bl	800d004 <memmove>
 800c158:	68a3      	ldr	r3, [r4, #8]
 800c15a:	1b9b      	subs	r3, r3, r6
 800c15c:	60a3      	str	r3, [r4, #8]
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	4433      	add	r3, r6
 800c162:	6023      	str	r3, [r4, #0]
 800c164:	2000      	movs	r0, #0
 800c166:	e7db      	b.n	800c120 <__ssputs_r+0x58>
 800c168:	462a      	mov	r2, r5
 800c16a:	f000 ff71 	bl	800d050 <_realloc_r>
 800c16e:	4606      	mov	r6, r0
 800c170:	2800      	cmp	r0, #0
 800c172:	d1e1      	bne.n	800c138 <__ssputs_r+0x70>
 800c174:	6921      	ldr	r1, [r4, #16]
 800c176:	4650      	mov	r0, sl
 800c178:	f7ff fec6 	bl	800bf08 <_free_r>
 800c17c:	e7c7      	b.n	800c10e <__ssputs_r+0x46>
	...

0800c180 <_svfiprintf_r>:
 800c180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c184:	4698      	mov	r8, r3
 800c186:	898b      	ldrh	r3, [r1, #12]
 800c188:	061b      	lsls	r3, r3, #24
 800c18a:	b09d      	sub	sp, #116	; 0x74
 800c18c:	4607      	mov	r7, r0
 800c18e:	460d      	mov	r5, r1
 800c190:	4614      	mov	r4, r2
 800c192:	d50e      	bpl.n	800c1b2 <_svfiprintf_r+0x32>
 800c194:	690b      	ldr	r3, [r1, #16]
 800c196:	b963      	cbnz	r3, 800c1b2 <_svfiprintf_r+0x32>
 800c198:	2140      	movs	r1, #64	; 0x40
 800c19a:	f7ff ff21 	bl	800bfe0 <_malloc_r>
 800c19e:	6028      	str	r0, [r5, #0]
 800c1a0:	6128      	str	r0, [r5, #16]
 800c1a2:	b920      	cbnz	r0, 800c1ae <_svfiprintf_r+0x2e>
 800c1a4:	230c      	movs	r3, #12
 800c1a6:	603b      	str	r3, [r7, #0]
 800c1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ac:	e0d1      	b.n	800c352 <_svfiprintf_r+0x1d2>
 800c1ae:	2340      	movs	r3, #64	; 0x40
 800c1b0:	616b      	str	r3, [r5, #20]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b6:	2320      	movs	r3, #32
 800c1b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1c0:	2330      	movs	r3, #48	; 0x30
 800c1c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c36c <_svfiprintf_r+0x1ec>
 800c1c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1ca:	f04f 0901 	mov.w	r9, #1
 800c1ce:	4623      	mov	r3, r4
 800c1d0:	469a      	mov	sl, r3
 800c1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1d6:	b10a      	cbz	r2, 800c1dc <_svfiprintf_r+0x5c>
 800c1d8:	2a25      	cmp	r2, #37	; 0x25
 800c1da:	d1f9      	bne.n	800c1d0 <_svfiprintf_r+0x50>
 800c1dc:	ebba 0b04 	subs.w	fp, sl, r4
 800c1e0:	d00b      	beq.n	800c1fa <_svfiprintf_r+0x7a>
 800c1e2:	465b      	mov	r3, fp
 800c1e4:	4622      	mov	r2, r4
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	4638      	mov	r0, r7
 800c1ea:	f7ff ff6d 	bl	800c0c8 <__ssputs_r>
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	f000 80aa 	beq.w	800c348 <_svfiprintf_r+0x1c8>
 800c1f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1f6:	445a      	add	r2, fp
 800c1f8:	9209      	str	r2, [sp, #36]	; 0x24
 800c1fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f000 80a2 	beq.w	800c348 <_svfiprintf_r+0x1c8>
 800c204:	2300      	movs	r3, #0
 800c206:	f04f 32ff 	mov.w	r2, #4294967295
 800c20a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c20e:	f10a 0a01 	add.w	sl, sl, #1
 800c212:	9304      	str	r3, [sp, #16]
 800c214:	9307      	str	r3, [sp, #28]
 800c216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c21a:	931a      	str	r3, [sp, #104]	; 0x68
 800c21c:	4654      	mov	r4, sl
 800c21e:	2205      	movs	r2, #5
 800c220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c224:	4851      	ldr	r0, [pc, #324]	; (800c36c <_svfiprintf_r+0x1ec>)
 800c226:	f7f3 fff3 	bl	8000210 <memchr>
 800c22a:	9a04      	ldr	r2, [sp, #16]
 800c22c:	b9d8      	cbnz	r0, 800c266 <_svfiprintf_r+0xe6>
 800c22e:	06d0      	lsls	r0, r2, #27
 800c230:	bf44      	itt	mi
 800c232:	2320      	movmi	r3, #32
 800c234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c238:	0711      	lsls	r1, r2, #28
 800c23a:	bf44      	itt	mi
 800c23c:	232b      	movmi	r3, #43	; 0x2b
 800c23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c242:	f89a 3000 	ldrb.w	r3, [sl]
 800c246:	2b2a      	cmp	r3, #42	; 0x2a
 800c248:	d015      	beq.n	800c276 <_svfiprintf_r+0xf6>
 800c24a:	9a07      	ldr	r2, [sp, #28]
 800c24c:	4654      	mov	r4, sl
 800c24e:	2000      	movs	r0, #0
 800c250:	f04f 0c0a 	mov.w	ip, #10
 800c254:	4621      	mov	r1, r4
 800c256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c25a:	3b30      	subs	r3, #48	; 0x30
 800c25c:	2b09      	cmp	r3, #9
 800c25e:	d94e      	bls.n	800c2fe <_svfiprintf_r+0x17e>
 800c260:	b1b0      	cbz	r0, 800c290 <_svfiprintf_r+0x110>
 800c262:	9207      	str	r2, [sp, #28]
 800c264:	e014      	b.n	800c290 <_svfiprintf_r+0x110>
 800c266:	eba0 0308 	sub.w	r3, r0, r8
 800c26a:	fa09 f303 	lsl.w	r3, r9, r3
 800c26e:	4313      	orrs	r3, r2
 800c270:	9304      	str	r3, [sp, #16]
 800c272:	46a2      	mov	sl, r4
 800c274:	e7d2      	b.n	800c21c <_svfiprintf_r+0x9c>
 800c276:	9b03      	ldr	r3, [sp, #12]
 800c278:	1d19      	adds	r1, r3, #4
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	9103      	str	r1, [sp, #12]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	bfbb      	ittet	lt
 800c282:	425b      	neglt	r3, r3
 800c284:	f042 0202 	orrlt.w	r2, r2, #2
 800c288:	9307      	strge	r3, [sp, #28]
 800c28a:	9307      	strlt	r3, [sp, #28]
 800c28c:	bfb8      	it	lt
 800c28e:	9204      	strlt	r2, [sp, #16]
 800c290:	7823      	ldrb	r3, [r4, #0]
 800c292:	2b2e      	cmp	r3, #46	; 0x2e
 800c294:	d10c      	bne.n	800c2b0 <_svfiprintf_r+0x130>
 800c296:	7863      	ldrb	r3, [r4, #1]
 800c298:	2b2a      	cmp	r3, #42	; 0x2a
 800c29a:	d135      	bne.n	800c308 <_svfiprintf_r+0x188>
 800c29c:	9b03      	ldr	r3, [sp, #12]
 800c29e:	1d1a      	adds	r2, r3, #4
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	9203      	str	r2, [sp, #12]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	bfb8      	it	lt
 800c2a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2ac:	3402      	adds	r4, #2
 800c2ae:	9305      	str	r3, [sp, #20]
 800c2b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c37c <_svfiprintf_r+0x1fc>
 800c2b4:	7821      	ldrb	r1, [r4, #0]
 800c2b6:	2203      	movs	r2, #3
 800c2b8:	4650      	mov	r0, sl
 800c2ba:	f7f3 ffa9 	bl	8000210 <memchr>
 800c2be:	b140      	cbz	r0, 800c2d2 <_svfiprintf_r+0x152>
 800c2c0:	2340      	movs	r3, #64	; 0x40
 800c2c2:	eba0 000a 	sub.w	r0, r0, sl
 800c2c6:	fa03 f000 	lsl.w	r0, r3, r0
 800c2ca:	9b04      	ldr	r3, [sp, #16]
 800c2cc:	4303      	orrs	r3, r0
 800c2ce:	3401      	adds	r4, #1
 800c2d0:	9304      	str	r3, [sp, #16]
 800c2d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2d6:	4826      	ldr	r0, [pc, #152]	; (800c370 <_svfiprintf_r+0x1f0>)
 800c2d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2dc:	2206      	movs	r2, #6
 800c2de:	f7f3 ff97 	bl	8000210 <memchr>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d038      	beq.n	800c358 <_svfiprintf_r+0x1d8>
 800c2e6:	4b23      	ldr	r3, [pc, #140]	; (800c374 <_svfiprintf_r+0x1f4>)
 800c2e8:	bb1b      	cbnz	r3, 800c332 <_svfiprintf_r+0x1b2>
 800c2ea:	9b03      	ldr	r3, [sp, #12]
 800c2ec:	3307      	adds	r3, #7
 800c2ee:	f023 0307 	bic.w	r3, r3, #7
 800c2f2:	3308      	adds	r3, #8
 800c2f4:	9303      	str	r3, [sp, #12]
 800c2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f8:	4433      	add	r3, r6
 800c2fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c2fc:	e767      	b.n	800c1ce <_svfiprintf_r+0x4e>
 800c2fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800c302:	460c      	mov	r4, r1
 800c304:	2001      	movs	r0, #1
 800c306:	e7a5      	b.n	800c254 <_svfiprintf_r+0xd4>
 800c308:	2300      	movs	r3, #0
 800c30a:	3401      	adds	r4, #1
 800c30c:	9305      	str	r3, [sp, #20]
 800c30e:	4619      	mov	r1, r3
 800c310:	f04f 0c0a 	mov.w	ip, #10
 800c314:	4620      	mov	r0, r4
 800c316:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c31a:	3a30      	subs	r2, #48	; 0x30
 800c31c:	2a09      	cmp	r2, #9
 800c31e:	d903      	bls.n	800c328 <_svfiprintf_r+0x1a8>
 800c320:	2b00      	cmp	r3, #0
 800c322:	d0c5      	beq.n	800c2b0 <_svfiprintf_r+0x130>
 800c324:	9105      	str	r1, [sp, #20]
 800c326:	e7c3      	b.n	800c2b0 <_svfiprintf_r+0x130>
 800c328:	fb0c 2101 	mla	r1, ip, r1, r2
 800c32c:	4604      	mov	r4, r0
 800c32e:	2301      	movs	r3, #1
 800c330:	e7f0      	b.n	800c314 <_svfiprintf_r+0x194>
 800c332:	ab03      	add	r3, sp, #12
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	462a      	mov	r2, r5
 800c338:	4b0f      	ldr	r3, [pc, #60]	; (800c378 <_svfiprintf_r+0x1f8>)
 800c33a:	a904      	add	r1, sp, #16
 800c33c:	4638      	mov	r0, r7
 800c33e:	f7fc f98d 	bl	800865c <_printf_float>
 800c342:	1c42      	adds	r2, r0, #1
 800c344:	4606      	mov	r6, r0
 800c346:	d1d6      	bne.n	800c2f6 <_svfiprintf_r+0x176>
 800c348:	89ab      	ldrh	r3, [r5, #12]
 800c34a:	065b      	lsls	r3, r3, #25
 800c34c:	f53f af2c 	bmi.w	800c1a8 <_svfiprintf_r+0x28>
 800c350:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c352:	b01d      	add	sp, #116	; 0x74
 800c354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c358:	ab03      	add	r3, sp, #12
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	462a      	mov	r2, r5
 800c35e:	4b06      	ldr	r3, [pc, #24]	; (800c378 <_svfiprintf_r+0x1f8>)
 800c360:	a904      	add	r1, sp, #16
 800c362:	4638      	mov	r0, r7
 800c364:	f7fc fc1e 	bl	8008ba4 <_printf_i>
 800c368:	e7eb      	b.n	800c342 <_svfiprintf_r+0x1c2>
 800c36a:	bf00      	nop
 800c36c:	0801077c 	.word	0x0801077c
 800c370:	08010786 	.word	0x08010786
 800c374:	0800865d 	.word	0x0800865d
 800c378:	0800c0c9 	.word	0x0800c0c9
 800c37c:	08010782 	.word	0x08010782

0800c380 <_sungetc_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	1c4b      	adds	r3, r1, #1
 800c384:	4614      	mov	r4, r2
 800c386:	d103      	bne.n	800c390 <_sungetc_r+0x10>
 800c388:	f04f 35ff 	mov.w	r5, #4294967295
 800c38c:	4628      	mov	r0, r5
 800c38e:	bd38      	pop	{r3, r4, r5, pc}
 800c390:	8993      	ldrh	r3, [r2, #12]
 800c392:	f023 0320 	bic.w	r3, r3, #32
 800c396:	8193      	strh	r3, [r2, #12]
 800c398:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c39a:	6852      	ldr	r2, [r2, #4]
 800c39c:	b2cd      	uxtb	r5, r1
 800c39e:	b18b      	cbz	r3, 800c3c4 <_sungetc_r+0x44>
 800c3a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	dd08      	ble.n	800c3b8 <_sungetc_r+0x38>
 800c3a6:	6823      	ldr	r3, [r4, #0]
 800c3a8:	1e5a      	subs	r2, r3, #1
 800c3aa:	6022      	str	r2, [r4, #0]
 800c3ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c3b0:	6863      	ldr	r3, [r4, #4]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	6063      	str	r3, [r4, #4]
 800c3b6:	e7e9      	b.n	800c38c <_sungetc_r+0xc>
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	f000 fbf1 	bl	800cba0 <__submore>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d0f1      	beq.n	800c3a6 <_sungetc_r+0x26>
 800c3c2:	e7e1      	b.n	800c388 <_sungetc_r+0x8>
 800c3c4:	6921      	ldr	r1, [r4, #16]
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	b151      	cbz	r1, 800c3e0 <_sungetc_r+0x60>
 800c3ca:	4299      	cmp	r1, r3
 800c3cc:	d208      	bcs.n	800c3e0 <_sungetc_r+0x60>
 800c3ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c3d2:	42a9      	cmp	r1, r5
 800c3d4:	d104      	bne.n	800c3e0 <_sungetc_r+0x60>
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	3201      	adds	r2, #1
 800c3da:	6023      	str	r3, [r4, #0]
 800c3dc:	6062      	str	r2, [r4, #4]
 800c3de:	e7d5      	b.n	800c38c <_sungetc_r+0xc>
 800c3e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c3e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3e8:	6363      	str	r3, [r4, #52]	; 0x34
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	63a3      	str	r3, [r4, #56]	; 0x38
 800c3ee:	4623      	mov	r3, r4
 800c3f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c3f4:	6023      	str	r3, [r4, #0]
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e7dc      	b.n	800c3b4 <_sungetc_r+0x34>

0800c3fa <__ssrefill_r>:
 800c3fa:	b510      	push	{r4, lr}
 800c3fc:	460c      	mov	r4, r1
 800c3fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c400:	b169      	cbz	r1, 800c41e <__ssrefill_r+0x24>
 800c402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c406:	4299      	cmp	r1, r3
 800c408:	d001      	beq.n	800c40e <__ssrefill_r+0x14>
 800c40a:	f7ff fd7d 	bl	800bf08 <_free_r>
 800c40e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c410:	6063      	str	r3, [r4, #4]
 800c412:	2000      	movs	r0, #0
 800c414:	6360      	str	r0, [r4, #52]	; 0x34
 800c416:	b113      	cbz	r3, 800c41e <__ssrefill_r+0x24>
 800c418:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c41a:	6023      	str	r3, [r4, #0]
 800c41c:	bd10      	pop	{r4, pc}
 800c41e:	6923      	ldr	r3, [r4, #16]
 800c420:	6023      	str	r3, [r4, #0]
 800c422:	2300      	movs	r3, #0
 800c424:	6063      	str	r3, [r4, #4]
 800c426:	89a3      	ldrh	r3, [r4, #12]
 800c428:	f043 0320 	orr.w	r3, r3, #32
 800c42c:	81a3      	strh	r3, [r4, #12]
 800c42e:	f04f 30ff 	mov.w	r0, #4294967295
 800c432:	e7f3      	b.n	800c41c <__ssrefill_r+0x22>

0800c434 <__ssvfiscanf_r>:
 800c434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c438:	460c      	mov	r4, r1
 800c43a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c43e:	2100      	movs	r1, #0
 800c440:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c444:	49a6      	ldr	r1, [pc, #664]	; (800c6e0 <__ssvfiscanf_r+0x2ac>)
 800c446:	91a0      	str	r1, [sp, #640]	; 0x280
 800c448:	f10d 0804 	add.w	r8, sp, #4
 800c44c:	49a5      	ldr	r1, [pc, #660]	; (800c6e4 <__ssvfiscanf_r+0x2b0>)
 800c44e:	4fa6      	ldr	r7, [pc, #664]	; (800c6e8 <__ssvfiscanf_r+0x2b4>)
 800c450:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c6ec <__ssvfiscanf_r+0x2b8>
 800c454:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c458:	4606      	mov	r6, r0
 800c45a:	91a1      	str	r1, [sp, #644]	; 0x284
 800c45c:	9300      	str	r3, [sp, #0]
 800c45e:	7813      	ldrb	r3, [r2, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	f000 815a 	beq.w	800c71a <__ssvfiscanf_r+0x2e6>
 800c466:	5dd9      	ldrb	r1, [r3, r7]
 800c468:	f011 0108 	ands.w	r1, r1, #8
 800c46c:	f102 0501 	add.w	r5, r2, #1
 800c470:	d019      	beq.n	800c4a6 <__ssvfiscanf_r+0x72>
 800c472:	6863      	ldr	r3, [r4, #4]
 800c474:	2b00      	cmp	r3, #0
 800c476:	dd0f      	ble.n	800c498 <__ssvfiscanf_r+0x64>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	781a      	ldrb	r2, [r3, #0]
 800c47c:	5cba      	ldrb	r2, [r7, r2]
 800c47e:	0712      	lsls	r2, r2, #28
 800c480:	d401      	bmi.n	800c486 <__ssvfiscanf_r+0x52>
 800c482:	462a      	mov	r2, r5
 800c484:	e7eb      	b.n	800c45e <__ssvfiscanf_r+0x2a>
 800c486:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c488:	3201      	adds	r2, #1
 800c48a:	9245      	str	r2, [sp, #276]	; 0x114
 800c48c:	6862      	ldr	r2, [r4, #4]
 800c48e:	3301      	adds	r3, #1
 800c490:	3a01      	subs	r2, #1
 800c492:	6062      	str	r2, [r4, #4]
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	e7ec      	b.n	800c472 <__ssvfiscanf_r+0x3e>
 800c498:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c49a:	4621      	mov	r1, r4
 800c49c:	4630      	mov	r0, r6
 800c49e:	4798      	blx	r3
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d0e9      	beq.n	800c478 <__ssvfiscanf_r+0x44>
 800c4a4:	e7ed      	b.n	800c482 <__ssvfiscanf_r+0x4e>
 800c4a6:	2b25      	cmp	r3, #37	; 0x25
 800c4a8:	d012      	beq.n	800c4d0 <__ssvfiscanf_r+0x9c>
 800c4aa:	469a      	mov	sl, r3
 800c4ac:	6863      	ldr	r3, [r4, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	f340 8091 	ble.w	800c5d6 <__ssvfiscanf_r+0x1a2>
 800c4b4:	6822      	ldr	r2, [r4, #0]
 800c4b6:	7813      	ldrb	r3, [r2, #0]
 800c4b8:	4553      	cmp	r3, sl
 800c4ba:	f040 812e 	bne.w	800c71a <__ssvfiscanf_r+0x2e6>
 800c4be:	6863      	ldr	r3, [r4, #4]
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	6063      	str	r3, [r4, #4]
 800c4c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c4c6:	3201      	adds	r2, #1
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	6022      	str	r2, [r4, #0]
 800c4cc:	9345      	str	r3, [sp, #276]	; 0x114
 800c4ce:	e7d8      	b.n	800c482 <__ssvfiscanf_r+0x4e>
 800c4d0:	9141      	str	r1, [sp, #260]	; 0x104
 800c4d2:	9143      	str	r1, [sp, #268]	; 0x10c
 800c4d4:	7853      	ldrb	r3, [r2, #1]
 800c4d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c4d8:	bf02      	ittt	eq
 800c4da:	2310      	moveq	r3, #16
 800c4dc:	1c95      	addeq	r5, r2, #2
 800c4de:	9341      	streq	r3, [sp, #260]	; 0x104
 800c4e0:	220a      	movs	r2, #10
 800c4e2:	46aa      	mov	sl, r5
 800c4e4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c4e8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c4ec:	2b09      	cmp	r3, #9
 800c4ee:	d91d      	bls.n	800c52c <__ssvfiscanf_r+0xf8>
 800c4f0:	487e      	ldr	r0, [pc, #504]	; (800c6ec <__ssvfiscanf_r+0x2b8>)
 800c4f2:	2203      	movs	r2, #3
 800c4f4:	f7f3 fe8c 	bl	8000210 <memchr>
 800c4f8:	b140      	cbz	r0, 800c50c <__ssvfiscanf_r+0xd8>
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	eba0 0009 	sub.w	r0, r0, r9
 800c500:	fa03 f000 	lsl.w	r0, r3, r0
 800c504:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c506:	4318      	orrs	r0, r3
 800c508:	9041      	str	r0, [sp, #260]	; 0x104
 800c50a:	4655      	mov	r5, sl
 800c50c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c510:	2b78      	cmp	r3, #120	; 0x78
 800c512:	d806      	bhi.n	800c522 <__ssvfiscanf_r+0xee>
 800c514:	2b57      	cmp	r3, #87	; 0x57
 800c516:	d810      	bhi.n	800c53a <__ssvfiscanf_r+0x106>
 800c518:	2b25      	cmp	r3, #37	; 0x25
 800c51a:	d0c6      	beq.n	800c4aa <__ssvfiscanf_r+0x76>
 800c51c:	d856      	bhi.n	800c5cc <__ssvfiscanf_r+0x198>
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d064      	beq.n	800c5ec <__ssvfiscanf_r+0x1b8>
 800c522:	2303      	movs	r3, #3
 800c524:	9347      	str	r3, [sp, #284]	; 0x11c
 800c526:	230a      	movs	r3, #10
 800c528:	9342      	str	r3, [sp, #264]	; 0x108
 800c52a:	e071      	b.n	800c610 <__ssvfiscanf_r+0x1dc>
 800c52c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c52e:	fb02 1103 	mla	r1, r2, r3, r1
 800c532:	3930      	subs	r1, #48	; 0x30
 800c534:	9143      	str	r1, [sp, #268]	; 0x10c
 800c536:	4655      	mov	r5, sl
 800c538:	e7d3      	b.n	800c4e2 <__ssvfiscanf_r+0xae>
 800c53a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c53e:	2a20      	cmp	r2, #32
 800c540:	d8ef      	bhi.n	800c522 <__ssvfiscanf_r+0xee>
 800c542:	a101      	add	r1, pc, #4	; (adr r1, 800c548 <__ssvfiscanf_r+0x114>)
 800c544:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c548:	0800c5fb 	.word	0x0800c5fb
 800c54c:	0800c523 	.word	0x0800c523
 800c550:	0800c523 	.word	0x0800c523
 800c554:	0800c659 	.word	0x0800c659
 800c558:	0800c523 	.word	0x0800c523
 800c55c:	0800c523 	.word	0x0800c523
 800c560:	0800c523 	.word	0x0800c523
 800c564:	0800c523 	.word	0x0800c523
 800c568:	0800c523 	.word	0x0800c523
 800c56c:	0800c523 	.word	0x0800c523
 800c570:	0800c523 	.word	0x0800c523
 800c574:	0800c66f 	.word	0x0800c66f
 800c578:	0800c645 	.word	0x0800c645
 800c57c:	0800c5d3 	.word	0x0800c5d3
 800c580:	0800c5d3 	.word	0x0800c5d3
 800c584:	0800c5d3 	.word	0x0800c5d3
 800c588:	0800c523 	.word	0x0800c523
 800c58c:	0800c649 	.word	0x0800c649
 800c590:	0800c523 	.word	0x0800c523
 800c594:	0800c523 	.word	0x0800c523
 800c598:	0800c523 	.word	0x0800c523
 800c59c:	0800c523 	.word	0x0800c523
 800c5a0:	0800c67f 	.word	0x0800c67f
 800c5a4:	0800c651 	.word	0x0800c651
 800c5a8:	0800c5f3 	.word	0x0800c5f3
 800c5ac:	0800c523 	.word	0x0800c523
 800c5b0:	0800c523 	.word	0x0800c523
 800c5b4:	0800c67b 	.word	0x0800c67b
 800c5b8:	0800c523 	.word	0x0800c523
 800c5bc:	0800c645 	.word	0x0800c645
 800c5c0:	0800c523 	.word	0x0800c523
 800c5c4:	0800c523 	.word	0x0800c523
 800c5c8:	0800c5fb 	.word	0x0800c5fb
 800c5cc:	3b45      	subs	r3, #69	; 0x45
 800c5ce:	2b02      	cmp	r3, #2
 800c5d0:	d8a7      	bhi.n	800c522 <__ssvfiscanf_r+0xee>
 800c5d2:	2305      	movs	r3, #5
 800c5d4:	e01b      	b.n	800c60e <__ssvfiscanf_r+0x1da>
 800c5d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c5d8:	4621      	mov	r1, r4
 800c5da:	4630      	mov	r0, r6
 800c5dc:	4798      	blx	r3
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	f43f af68 	beq.w	800c4b4 <__ssvfiscanf_r+0x80>
 800c5e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	f040 808d 	bne.w	800c706 <__ssvfiscanf_r+0x2d2>
 800c5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f0:	e08f      	b.n	800c712 <__ssvfiscanf_r+0x2de>
 800c5f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c5f4:	f042 0220 	orr.w	r2, r2, #32
 800c5f8:	9241      	str	r2, [sp, #260]	; 0x104
 800c5fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c5fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c600:	9241      	str	r2, [sp, #260]	; 0x104
 800c602:	2210      	movs	r2, #16
 800c604:	2b6f      	cmp	r3, #111	; 0x6f
 800c606:	9242      	str	r2, [sp, #264]	; 0x108
 800c608:	bf34      	ite	cc
 800c60a:	2303      	movcc	r3, #3
 800c60c:	2304      	movcs	r3, #4
 800c60e:	9347      	str	r3, [sp, #284]	; 0x11c
 800c610:	6863      	ldr	r3, [r4, #4]
 800c612:	2b00      	cmp	r3, #0
 800c614:	dd42      	ble.n	800c69c <__ssvfiscanf_r+0x268>
 800c616:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c618:	0659      	lsls	r1, r3, #25
 800c61a:	d404      	bmi.n	800c626 <__ssvfiscanf_r+0x1f2>
 800c61c:	6823      	ldr	r3, [r4, #0]
 800c61e:	781a      	ldrb	r2, [r3, #0]
 800c620:	5cba      	ldrb	r2, [r7, r2]
 800c622:	0712      	lsls	r2, r2, #28
 800c624:	d441      	bmi.n	800c6aa <__ssvfiscanf_r+0x276>
 800c626:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c628:	2b02      	cmp	r3, #2
 800c62a:	dc50      	bgt.n	800c6ce <__ssvfiscanf_r+0x29a>
 800c62c:	466b      	mov	r3, sp
 800c62e:	4622      	mov	r2, r4
 800c630:	a941      	add	r1, sp, #260	; 0x104
 800c632:	4630      	mov	r0, r6
 800c634:	f000 f876 	bl	800c724 <_scanf_chars>
 800c638:	2801      	cmp	r0, #1
 800c63a:	d06e      	beq.n	800c71a <__ssvfiscanf_r+0x2e6>
 800c63c:	2802      	cmp	r0, #2
 800c63e:	f47f af20 	bne.w	800c482 <__ssvfiscanf_r+0x4e>
 800c642:	e7cf      	b.n	800c5e4 <__ssvfiscanf_r+0x1b0>
 800c644:	220a      	movs	r2, #10
 800c646:	e7dd      	b.n	800c604 <__ssvfiscanf_r+0x1d0>
 800c648:	2300      	movs	r3, #0
 800c64a:	9342      	str	r3, [sp, #264]	; 0x108
 800c64c:	2303      	movs	r3, #3
 800c64e:	e7de      	b.n	800c60e <__ssvfiscanf_r+0x1da>
 800c650:	2308      	movs	r3, #8
 800c652:	9342      	str	r3, [sp, #264]	; 0x108
 800c654:	2304      	movs	r3, #4
 800c656:	e7da      	b.n	800c60e <__ssvfiscanf_r+0x1da>
 800c658:	4629      	mov	r1, r5
 800c65a:	4640      	mov	r0, r8
 800c65c:	f000 f9e0 	bl	800ca20 <__sccl>
 800c660:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c666:	9341      	str	r3, [sp, #260]	; 0x104
 800c668:	4605      	mov	r5, r0
 800c66a:	2301      	movs	r3, #1
 800c66c:	e7cf      	b.n	800c60e <__ssvfiscanf_r+0x1da>
 800c66e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c674:	9341      	str	r3, [sp, #260]	; 0x104
 800c676:	2300      	movs	r3, #0
 800c678:	e7c9      	b.n	800c60e <__ssvfiscanf_r+0x1da>
 800c67a:	2302      	movs	r3, #2
 800c67c:	e7c7      	b.n	800c60e <__ssvfiscanf_r+0x1da>
 800c67e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c680:	06c3      	lsls	r3, r0, #27
 800c682:	f53f aefe 	bmi.w	800c482 <__ssvfiscanf_r+0x4e>
 800c686:	9b00      	ldr	r3, [sp, #0]
 800c688:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c68a:	1d19      	adds	r1, r3, #4
 800c68c:	9100      	str	r1, [sp, #0]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f010 0f01 	tst.w	r0, #1
 800c694:	bf14      	ite	ne
 800c696:	801a      	strhne	r2, [r3, #0]
 800c698:	601a      	streq	r2, [r3, #0]
 800c69a:	e6f2      	b.n	800c482 <__ssvfiscanf_r+0x4e>
 800c69c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c69e:	4621      	mov	r1, r4
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	4798      	blx	r3
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d0b6      	beq.n	800c616 <__ssvfiscanf_r+0x1e2>
 800c6a8:	e79c      	b.n	800c5e4 <__ssvfiscanf_r+0x1b0>
 800c6aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c6ac:	3201      	adds	r2, #1
 800c6ae:	9245      	str	r2, [sp, #276]	; 0x114
 800c6b0:	6862      	ldr	r2, [r4, #4]
 800c6b2:	3a01      	subs	r2, #1
 800c6b4:	2a00      	cmp	r2, #0
 800c6b6:	6062      	str	r2, [r4, #4]
 800c6b8:	dd02      	ble.n	800c6c0 <__ssvfiscanf_r+0x28c>
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	6023      	str	r3, [r4, #0]
 800c6be:	e7ad      	b.n	800c61c <__ssvfiscanf_r+0x1e8>
 800c6c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c6c2:	4621      	mov	r1, r4
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	4798      	blx	r3
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d0a7      	beq.n	800c61c <__ssvfiscanf_r+0x1e8>
 800c6cc:	e78a      	b.n	800c5e4 <__ssvfiscanf_r+0x1b0>
 800c6ce:	2b04      	cmp	r3, #4
 800c6d0:	dc0e      	bgt.n	800c6f0 <__ssvfiscanf_r+0x2bc>
 800c6d2:	466b      	mov	r3, sp
 800c6d4:	4622      	mov	r2, r4
 800c6d6:	a941      	add	r1, sp, #260	; 0x104
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f000 f87d 	bl	800c7d8 <_scanf_i>
 800c6de:	e7ab      	b.n	800c638 <__ssvfiscanf_r+0x204>
 800c6e0:	0800c381 	.word	0x0800c381
 800c6e4:	0800c3fb 	.word	0x0800c3fb
 800c6e8:	08010419 	.word	0x08010419
 800c6ec:	08010782 	.word	0x08010782
 800c6f0:	4b0b      	ldr	r3, [pc, #44]	; (800c720 <__ssvfiscanf_r+0x2ec>)
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f43f aec5 	beq.w	800c482 <__ssvfiscanf_r+0x4e>
 800c6f8:	466b      	mov	r3, sp
 800c6fa:	4622      	mov	r2, r4
 800c6fc:	a941      	add	r1, sp, #260	; 0x104
 800c6fe:	4630      	mov	r0, r6
 800c700:	f7fc fb76 	bl	8008df0 <_scanf_float>
 800c704:	e798      	b.n	800c638 <__ssvfiscanf_r+0x204>
 800c706:	89a3      	ldrh	r3, [r4, #12]
 800c708:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c70c:	bf18      	it	ne
 800c70e:	f04f 30ff 	movne.w	r0, #4294967295
 800c712:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c71a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c71c:	e7f9      	b.n	800c712 <__ssvfiscanf_r+0x2de>
 800c71e:	bf00      	nop
 800c720:	08008df1 	.word	0x08008df1

0800c724 <_scanf_chars>:
 800c724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c728:	4615      	mov	r5, r2
 800c72a:	688a      	ldr	r2, [r1, #8]
 800c72c:	4680      	mov	r8, r0
 800c72e:	460c      	mov	r4, r1
 800c730:	b932      	cbnz	r2, 800c740 <_scanf_chars+0x1c>
 800c732:	698a      	ldr	r2, [r1, #24]
 800c734:	2a00      	cmp	r2, #0
 800c736:	bf0c      	ite	eq
 800c738:	2201      	moveq	r2, #1
 800c73a:	f04f 32ff 	movne.w	r2, #4294967295
 800c73e:	608a      	str	r2, [r1, #8]
 800c740:	6822      	ldr	r2, [r4, #0]
 800c742:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c7d4 <_scanf_chars+0xb0>
 800c746:	06d1      	lsls	r1, r2, #27
 800c748:	bf5f      	itttt	pl
 800c74a:	681a      	ldrpl	r2, [r3, #0]
 800c74c:	1d11      	addpl	r1, r2, #4
 800c74e:	6019      	strpl	r1, [r3, #0]
 800c750:	6816      	ldrpl	r6, [r2, #0]
 800c752:	2700      	movs	r7, #0
 800c754:	69a0      	ldr	r0, [r4, #24]
 800c756:	b188      	cbz	r0, 800c77c <_scanf_chars+0x58>
 800c758:	2801      	cmp	r0, #1
 800c75a:	d107      	bne.n	800c76c <_scanf_chars+0x48>
 800c75c:	682a      	ldr	r2, [r5, #0]
 800c75e:	7811      	ldrb	r1, [r2, #0]
 800c760:	6962      	ldr	r2, [r4, #20]
 800c762:	5c52      	ldrb	r2, [r2, r1]
 800c764:	b952      	cbnz	r2, 800c77c <_scanf_chars+0x58>
 800c766:	2f00      	cmp	r7, #0
 800c768:	d031      	beq.n	800c7ce <_scanf_chars+0xaa>
 800c76a:	e022      	b.n	800c7b2 <_scanf_chars+0x8e>
 800c76c:	2802      	cmp	r0, #2
 800c76e:	d120      	bne.n	800c7b2 <_scanf_chars+0x8e>
 800c770:	682b      	ldr	r3, [r5, #0]
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c778:	071b      	lsls	r3, r3, #28
 800c77a:	d41a      	bmi.n	800c7b2 <_scanf_chars+0x8e>
 800c77c:	6823      	ldr	r3, [r4, #0]
 800c77e:	06da      	lsls	r2, r3, #27
 800c780:	bf5e      	ittt	pl
 800c782:	682b      	ldrpl	r3, [r5, #0]
 800c784:	781b      	ldrbpl	r3, [r3, #0]
 800c786:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c78a:	682a      	ldr	r2, [r5, #0]
 800c78c:	686b      	ldr	r3, [r5, #4]
 800c78e:	3201      	adds	r2, #1
 800c790:	602a      	str	r2, [r5, #0]
 800c792:	68a2      	ldr	r2, [r4, #8]
 800c794:	3b01      	subs	r3, #1
 800c796:	3a01      	subs	r2, #1
 800c798:	606b      	str	r3, [r5, #4]
 800c79a:	3701      	adds	r7, #1
 800c79c:	60a2      	str	r2, [r4, #8]
 800c79e:	b142      	cbz	r2, 800c7b2 <_scanf_chars+0x8e>
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	dcd7      	bgt.n	800c754 <_scanf_chars+0x30>
 800c7a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	4640      	mov	r0, r8
 800c7ac:	4798      	blx	r3
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d0d0      	beq.n	800c754 <_scanf_chars+0x30>
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	f013 0310 	ands.w	r3, r3, #16
 800c7b8:	d105      	bne.n	800c7c6 <_scanf_chars+0xa2>
 800c7ba:	68e2      	ldr	r2, [r4, #12]
 800c7bc:	3201      	adds	r2, #1
 800c7be:	60e2      	str	r2, [r4, #12]
 800c7c0:	69a2      	ldr	r2, [r4, #24]
 800c7c2:	b102      	cbz	r2, 800c7c6 <_scanf_chars+0xa2>
 800c7c4:	7033      	strb	r3, [r6, #0]
 800c7c6:	6923      	ldr	r3, [r4, #16]
 800c7c8:	443b      	add	r3, r7
 800c7ca:	6123      	str	r3, [r4, #16]
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7d2:	bf00      	nop
 800c7d4:	08010419 	.word	0x08010419

0800c7d8 <_scanf_i>:
 800c7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7dc:	4698      	mov	r8, r3
 800c7de:	4b76      	ldr	r3, [pc, #472]	; (800c9b8 <_scanf_i+0x1e0>)
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	4682      	mov	sl, r0
 800c7e4:	4616      	mov	r6, r2
 800c7e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c7ea:	b087      	sub	sp, #28
 800c7ec:	ab03      	add	r3, sp, #12
 800c7ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c7f2:	4b72      	ldr	r3, [pc, #456]	; (800c9bc <_scanf_i+0x1e4>)
 800c7f4:	69a1      	ldr	r1, [r4, #24]
 800c7f6:	4a72      	ldr	r2, [pc, #456]	; (800c9c0 <_scanf_i+0x1e8>)
 800c7f8:	2903      	cmp	r1, #3
 800c7fa:	bf18      	it	ne
 800c7fc:	461a      	movne	r2, r3
 800c7fe:	68a3      	ldr	r3, [r4, #8]
 800c800:	9201      	str	r2, [sp, #4]
 800c802:	1e5a      	subs	r2, r3, #1
 800c804:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c808:	bf88      	it	hi
 800c80a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c80e:	4627      	mov	r7, r4
 800c810:	bf82      	ittt	hi
 800c812:	eb03 0905 	addhi.w	r9, r3, r5
 800c816:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c81a:	60a3      	strhi	r3, [r4, #8]
 800c81c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c820:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c824:	bf98      	it	ls
 800c826:	f04f 0900 	movls.w	r9, #0
 800c82a:	6023      	str	r3, [r4, #0]
 800c82c:	463d      	mov	r5, r7
 800c82e:	f04f 0b00 	mov.w	fp, #0
 800c832:	6831      	ldr	r1, [r6, #0]
 800c834:	ab03      	add	r3, sp, #12
 800c836:	7809      	ldrb	r1, [r1, #0]
 800c838:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c83c:	2202      	movs	r2, #2
 800c83e:	f7f3 fce7 	bl	8000210 <memchr>
 800c842:	b328      	cbz	r0, 800c890 <_scanf_i+0xb8>
 800c844:	f1bb 0f01 	cmp.w	fp, #1
 800c848:	d159      	bne.n	800c8fe <_scanf_i+0x126>
 800c84a:	6862      	ldr	r2, [r4, #4]
 800c84c:	b92a      	cbnz	r2, 800c85a <_scanf_i+0x82>
 800c84e:	6822      	ldr	r2, [r4, #0]
 800c850:	2308      	movs	r3, #8
 800c852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c856:	6063      	str	r3, [r4, #4]
 800c858:	6022      	str	r2, [r4, #0]
 800c85a:	6822      	ldr	r2, [r4, #0]
 800c85c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c860:	6022      	str	r2, [r4, #0]
 800c862:	68a2      	ldr	r2, [r4, #8]
 800c864:	1e51      	subs	r1, r2, #1
 800c866:	60a1      	str	r1, [r4, #8]
 800c868:	b192      	cbz	r2, 800c890 <_scanf_i+0xb8>
 800c86a:	6832      	ldr	r2, [r6, #0]
 800c86c:	1c51      	adds	r1, r2, #1
 800c86e:	6031      	str	r1, [r6, #0]
 800c870:	7812      	ldrb	r2, [r2, #0]
 800c872:	f805 2b01 	strb.w	r2, [r5], #1
 800c876:	6872      	ldr	r2, [r6, #4]
 800c878:	3a01      	subs	r2, #1
 800c87a:	2a00      	cmp	r2, #0
 800c87c:	6072      	str	r2, [r6, #4]
 800c87e:	dc07      	bgt.n	800c890 <_scanf_i+0xb8>
 800c880:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c884:	4631      	mov	r1, r6
 800c886:	4650      	mov	r0, sl
 800c888:	4790      	blx	r2
 800c88a:	2800      	cmp	r0, #0
 800c88c:	f040 8085 	bne.w	800c99a <_scanf_i+0x1c2>
 800c890:	f10b 0b01 	add.w	fp, fp, #1
 800c894:	f1bb 0f03 	cmp.w	fp, #3
 800c898:	d1cb      	bne.n	800c832 <_scanf_i+0x5a>
 800c89a:	6863      	ldr	r3, [r4, #4]
 800c89c:	b90b      	cbnz	r3, 800c8a2 <_scanf_i+0xca>
 800c89e:	230a      	movs	r3, #10
 800c8a0:	6063      	str	r3, [r4, #4]
 800c8a2:	6863      	ldr	r3, [r4, #4]
 800c8a4:	4947      	ldr	r1, [pc, #284]	; (800c9c4 <_scanf_i+0x1ec>)
 800c8a6:	6960      	ldr	r0, [r4, #20]
 800c8a8:	1ac9      	subs	r1, r1, r3
 800c8aa:	f000 f8b9 	bl	800ca20 <__sccl>
 800c8ae:	f04f 0b00 	mov.w	fp, #0
 800c8b2:	68a3      	ldr	r3, [r4, #8]
 800c8b4:	6822      	ldr	r2, [r4, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d03d      	beq.n	800c936 <_scanf_i+0x15e>
 800c8ba:	6831      	ldr	r1, [r6, #0]
 800c8bc:	6960      	ldr	r0, [r4, #20]
 800c8be:	f891 c000 	ldrb.w	ip, [r1]
 800c8c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d035      	beq.n	800c936 <_scanf_i+0x15e>
 800c8ca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c8ce:	d124      	bne.n	800c91a <_scanf_i+0x142>
 800c8d0:	0510      	lsls	r0, r2, #20
 800c8d2:	d522      	bpl.n	800c91a <_scanf_i+0x142>
 800c8d4:	f10b 0b01 	add.w	fp, fp, #1
 800c8d8:	f1b9 0f00 	cmp.w	r9, #0
 800c8dc:	d003      	beq.n	800c8e6 <_scanf_i+0x10e>
 800c8de:	3301      	adds	r3, #1
 800c8e0:	f109 39ff 	add.w	r9, r9, #4294967295
 800c8e4:	60a3      	str	r3, [r4, #8]
 800c8e6:	6873      	ldr	r3, [r6, #4]
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	6073      	str	r3, [r6, #4]
 800c8ee:	dd1b      	ble.n	800c928 <_scanf_i+0x150>
 800c8f0:	6833      	ldr	r3, [r6, #0]
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	6033      	str	r3, [r6, #0]
 800c8f6:	68a3      	ldr	r3, [r4, #8]
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	60a3      	str	r3, [r4, #8]
 800c8fc:	e7d9      	b.n	800c8b2 <_scanf_i+0xda>
 800c8fe:	f1bb 0f02 	cmp.w	fp, #2
 800c902:	d1ae      	bne.n	800c862 <_scanf_i+0x8a>
 800c904:	6822      	ldr	r2, [r4, #0]
 800c906:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c90a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c90e:	d1bf      	bne.n	800c890 <_scanf_i+0xb8>
 800c910:	2310      	movs	r3, #16
 800c912:	6063      	str	r3, [r4, #4]
 800c914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c918:	e7a2      	b.n	800c860 <_scanf_i+0x88>
 800c91a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c91e:	6022      	str	r2, [r4, #0]
 800c920:	780b      	ldrb	r3, [r1, #0]
 800c922:	f805 3b01 	strb.w	r3, [r5], #1
 800c926:	e7de      	b.n	800c8e6 <_scanf_i+0x10e>
 800c928:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c92c:	4631      	mov	r1, r6
 800c92e:	4650      	mov	r0, sl
 800c930:	4798      	blx	r3
 800c932:	2800      	cmp	r0, #0
 800c934:	d0df      	beq.n	800c8f6 <_scanf_i+0x11e>
 800c936:	6823      	ldr	r3, [r4, #0]
 800c938:	05db      	lsls	r3, r3, #23
 800c93a:	d50d      	bpl.n	800c958 <_scanf_i+0x180>
 800c93c:	42bd      	cmp	r5, r7
 800c93e:	d909      	bls.n	800c954 <_scanf_i+0x17c>
 800c940:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c944:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c948:	4632      	mov	r2, r6
 800c94a:	4650      	mov	r0, sl
 800c94c:	4798      	blx	r3
 800c94e:	f105 39ff 	add.w	r9, r5, #4294967295
 800c952:	464d      	mov	r5, r9
 800c954:	42bd      	cmp	r5, r7
 800c956:	d02d      	beq.n	800c9b4 <_scanf_i+0x1dc>
 800c958:	6822      	ldr	r2, [r4, #0]
 800c95a:	f012 0210 	ands.w	r2, r2, #16
 800c95e:	d113      	bne.n	800c988 <_scanf_i+0x1b0>
 800c960:	702a      	strb	r2, [r5, #0]
 800c962:	6863      	ldr	r3, [r4, #4]
 800c964:	9e01      	ldr	r6, [sp, #4]
 800c966:	4639      	mov	r1, r7
 800c968:	4650      	mov	r0, sl
 800c96a:	47b0      	blx	r6
 800c96c:	6821      	ldr	r1, [r4, #0]
 800c96e:	f8d8 3000 	ldr.w	r3, [r8]
 800c972:	f011 0f20 	tst.w	r1, #32
 800c976:	d013      	beq.n	800c9a0 <_scanf_i+0x1c8>
 800c978:	1d1a      	adds	r2, r3, #4
 800c97a:	f8c8 2000 	str.w	r2, [r8]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	6018      	str	r0, [r3, #0]
 800c982:	68e3      	ldr	r3, [r4, #12]
 800c984:	3301      	adds	r3, #1
 800c986:	60e3      	str	r3, [r4, #12]
 800c988:	1bed      	subs	r5, r5, r7
 800c98a:	44ab      	add	fp, r5
 800c98c:	6925      	ldr	r5, [r4, #16]
 800c98e:	445d      	add	r5, fp
 800c990:	6125      	str	r5, [r4, #16]
 800c992:	2000      	movs	r0, #0
 800c994:	b007      	add	sp, #28
 800c996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99a:	f04f 0b00 	mov.w	fp, #0
 800c99e:	e7ca      	b.n	800c936 <_scanf_i+0x15e>
 800c9a0:	1d1a      	adds	r2, r3, #4
 800c9a2:	f8c8 2000 	str.w	r2, [r8]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f011 0f01 	tst.w	r1, #1
 800c9ac:	bf14      	ite	ne
 800c9ae:	8018      	strhne	r0, [r3, #0]
 800c9b0:	6018      	streq	r0, [r3, #0]
 800c9b2:	e7e6      	b.n	800c982 <_scanf_i+0x1aa>
 800c9b4:	2001      	movs	r0, #1
 800c9b6:	e7ed      	b.n	800c994 <_scanf_i+0x1bc>
 800c9b8:	08010380 	.word	0x08010380
 800c9bc:	0800cb9d 	.word	0x0800cb9d
 800c9c0:	0800a0ad 	.word	0x0800a0ad
 800c9c4:	080107a6 	.word	0x080107a6

0800c9c8 <_read_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4d07      	ldr	r5, [pc, #28]	; (800c9e8 <_read_r+0x20>)
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	4608      	mov	r0, r1
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	602a      	str	r2, [r5, #0]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	f7f8 fd59 	bl	800548e <_read>
 800c9dc:	1c43      	adds	r3, r0, #1
 800c9de:	d102      	bne.n	800c9e6 <_read_r+0x1e>
 800c9e0:	682b      	ldr	r3, [r5, #0]
 800c9e2:	b103      	cbz	r3, 800c9e6 <_read_r+0x1e>
 800c9e4:	6023      	str	r3, [r4, #0]
 800c9e6:	bd38      	pop	{r3, r4, r5, pc}
 800c9e8:	20009d00 	.word	0x20009d00
 800c9ec:	00000000 	.word	0x00000000

0800c9f0 <nan>:
 800c9f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c9f8 <nan+0x8>
 800c9f4:	4770      	bx	lr
 800c9f6:	bf00      	nop
 800c9f8:	00000000 	.word	0x00000000
 800c9fc:	7ff80000 	.word	0x7ff80000

0800ca00 <_sbrk_r>:
 800ca00:	b538      	push	{r3, r4, r5, lr}
 800ca02:	4d06      	ldr	r5, [pc, #24]	; (800ca1c <_sbrk_r+0x1c>)
 800ca04:	2300      	movs	r3, #0
 800ca06:	4604      	mov	r4, r0
 800ca08:	4608      	mov	r0, r1
 800ca0a:	602b      	str	r3, [r5, #0]
 800ca0c:	f7f8 fdac 	bl	8005568 <_sbrk>
 800ca10:	1c43      	adds	r3, r0, #1
 800ca12:	d102      	bne.n	800ca1a <_sbrk_r+0x1a>
 800ca14:	682b      	ldr	r3, [r5, #0]
 800ca16:	b103      	cbz	r3, 800ca1a <_sbrk_r+0x1a>
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	bd38      	pop	{r3, r4, r5, pc}
 800ca1c:	20009d00 	.word	0x20009d00

0800ca20 <__sccl>:
 800ca20:	b570      	push	{r4, r5, r6, lr}
 800ca22:	780b      	ldrb	r3, [r1, #0]
 800ca24:	4604      	mov	r4, r0
 800ca26:	2b5e      	cmp	r3, #94	; 0x5e
 800ca28:	bf0b      	itete	eq
 800ca2a:	784b      	ldrbeq	r3, [r1, #1]
 800ca2c:	1c48      	addne	r0, r1, #1
 800ca2e:	1c88      	addeq	r0, r1, #2
 800ca30:	2200      	movne	r2, #0
 800ca32:	bf08      	it	eq
 800ca34:	2201      	moveq	r2, #1
 800ca36:	1e61      	subs	r1, r4, #1
 800ca38:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ca3c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ca40:	42a9      	cmp	r1, r5
 800ca42:	d1fb      	bne.n	800ca3c <__sccl+0x1c>
 800ca44:	b90b      	cbnz	r3, 800ca4a <__sccl+0x2a>
 800ca46:	3801      	subs	r0, #1
 800ca48:	bd70      	pop	{r4, r5, r6, pc}
 800ca4a:	f082 0201 	eor.w	r2, r2, #1
 800ca4e:	54e2      	strb	r2, [r4, r3]
 800ca50:	4605      	mov	r5, r0
 800ca52:	4628      	mov	r0, r5
 800ca54:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ca58:	292d      	cmp	r1, #45	; 0x2d
 800ca5a:	d006      	beq.n	800ca6a <__sccl+0x4a>
 800ca5c:	295d      	cmp	r1, #93	; 0x5d
 800ca5e:	d0f3      	beq.n	800ca48 <__sccl+0x28>
 800ca60:	b909      	cbnz	r1, 800ca66 <__sccl+0x46>
 800ca62:	4628      	mov	r0, r5
 800ca64:	e7f0      	b.n	800ca48 <__sccl+0x28>
 800ca66:	460b      	mov	r3, r1
 800ca68:	e7f1      	b.n	800ca4e <__sccl+0x2e>
 800ca6a:	786e      	ldrb	r6, [r5, #1]
 800ca6c:	2e5d      	cmp	r6, #93	; 0x5d
 800ca6e:	d0fa      	beq.n	800ca66 <__sccl+0x46>
 800ca70:	42b3      	cmp	r3, r6
 800ca72:	dcf8      	bgt.n	800ca66 <__sccl+0x46>
 800ca74:	3502      	adds	r5, #2
 800ca76:	4619      	mov	r1, r3
 800ca78:	3101      	adds	r1, #1
 800ca7a:	428e      	cmp	r6, r1
 800ca7c:	5462      	strb	r2, [r4, r1]
 800ca7e:	dcfb      	bgt.n	800ca78 <__sccl+0x58>
 800ca80:	1af1      	subs	r1, r6, r3
 800ca82:	3901      	subs	r1, #1
 800ca84:	1c58      	adds	r0, r3, #1
 800ca86:	42b3      	cmp	r3, r6
 800ca88:	bfa8      	it	ge
 800ca8a:	2100      	movge	r1, #0
 800ca8c:	1843      	adds	r3, r0, r1
 800ca8e:	e7e0      	b.n	800ca52 <__sccl+0x32>

0800ca90 <strncmp>:
 800ca90:	b510      	push	{r4, lr}
 800ca92:	b17a      	cbz	r2, 800cab4 <strncmp+0x24>
 800ca94:	4603      	mov	r3, r0
 800ca96:	3901      	subs	r1, #1
 800ca98:	1884      	adds	r4, r0, r2
 800ca9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ca9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800caa2:	4290      	cmp	r0, r2
 800caa4:	d101      	bne.n	800caaa <strncmp+0x1a>
 800caa6:	42a3      	cmp	r3, r4
 800caa8:	d101      	bne.n	800caae <strncmp+0x1e>
 800caaa:	1a80      	subs	r0, r0, r2
 800caac:	bd10      	pop	{r4, pc}
 800caae:	2800      	cmp	r0, #0
 800cab0:	d1f3      	bne.n	800ca9a <strncmp+0xa>
 800cab2:	e7fa      	b.n	800caaa <strncmp+0x1a>
 800cab4:	4610      	mov	r0, r2
 800cab6:	e7f9      	b.n	800caac <strncmp+0x1c>

0800cab8 <_strtoul_l.constprop.0>:
 800cab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cabc:	4f36      	ldr	r7, [pc, #216]	; (800cb98 <_strtoul_l.constprop.0+0xe0>)
 800cabe:	4686      	mov	lr, r0
 800cac0:	460d      	mov	r5, r1
 800cac2:	4628      	mov	r0, r5
 800cac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cac8:	5de6      	ldrb	r6, [r4, r7]
 800caca:	f016 0608 	ands.w	r6, r6, #8
 800cace:	d1f8      	bne.n	800cac2 <_strtoul_l.constprop.0+0xa>
 800cad0:	2c2d      	cmp	r4, #45	; 0x2d
 800cad2:	d12f      	bne.n	800cb34 <_strtoul_l.constprop.0+0x7c>
 800cad4:	782c      	ldrb	r4, [r5, #0]
 800cad6:	2601      	movs	r6, #1
 800cad8:	1c85      	adds	r5, r0, #2
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d057      	beq.n	800cb8e <_strtoul_l.constprop.0+0xd6>
 800cade:	2b10      	cmp	r3, #16
 800cae0:	d109      	bne.n	800caf6 <_strtoul_l.constprop.0+0x3e>
 800cae2:	2c30      	cmp	r4, #48	; 0x30
 800cae4:	d107      	bne.n	800caf6 <_strtoul_l.constprop.0+0x3e>
 800cae6:	7828      	ldrb	r0, [r5, #0]
 800cae8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800caec:	2858      	cmp	r0, #88	; 0x58
 800caee:	d149      	bne.n	800cb84 <_strtoul_l.constprop.0+0xcc>
 800caf0:	786c      	ldrb	r4, [r5, #1]
 800caf2:	2310      	movs	r3, #16
 800caf4:	3502      	adds	r5, #2
 800caf6:	f04f 38ff 	mov.w	r8, #4294967295
 800cafa:	2700      	movs	r7, #0
 800cafc:	fbb8 f8f3 	udiv	r8, r8, r3
 800cb00:	fb03 f908 	mul.w	r9, r3, r8
 800cb04:	ea6f 0909 	mvn.w	r9, r9
 800cb08:	4638      	mov	r0, r7
 800cb0a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cb0e:	f1bc 0f09 	cmp.w	ip, #9
 800cb12:	d814      	bhi.n	800cb3e <_strtoul_l.constprop.0+0x86>
 800cb14:	4664      	mov	r4, ip
 800cb16:	42a3      	cmp	r3, r4
 800cb18:	dd22      	ble.n	800cb60 <_strtoul_l.constprop.0+0xa8>
 800cb1a:	2f00      	cmp	r7, #0
 800cb1c:	db1d      	blt.n	800cb5a <_strtoul_l.constprop.0+0xa2>
 800cb1e:	4580      	cmp	r8, r0
 800cb20:	d31b      	bcc.n	800cb5a <_strtoul_l.constprop.0+0xa2>
 800cb22:	d101      	bne.n	800cb28 <_strtoul_l.constprop.0+0x70>
 800cb24:	45a1      	cmp	r9, r4
 800cb26:	db18      	blt.n	800cb5a <_strtoul_l.constprop.0+0xa2>
 800cb28:	fb00 4003 	mla	r0, r0, r3, r4
 800cb2c:	2701      	movs	r7, #1
 800cb2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb32:	e7ea      	b.n	800cb0a <_strtoul_l.constprop.0+0x52>
 800cb34:	2c2b      	cmp	r4, #43	; 0x2b
 800cb36:	bf04      	itt	eq
 800cb38:	782c      	ldrbeq	r4, [r5, #0]
 800cb3a:	1c85      	addeq	r5, r0, #2
 800cb3c:	e7cd      	b.n	800cada <_strtoul_l.constprop.0+0x22>
 800cb3e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cb42:	f1bc 0f19 	cmp.w	ip, #25
 800cb46:	d801      	bhi.n	800cb4c <_strtoul_l.constprop.0+0x94>
 800cb48:	3c37      	subs	r4, #55	; 0x37
 800cb4a:	e7e4      	b.n	800cb16 <_strtoul_l.constprop.0+0x5e>
 800cb4c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cb50:	f1bc 0f19 	cmp.w	ip, #25
 800cb54:	d804      	bhi.n	800cb60 <_strtoul_l.constprop.0+0xa8>
 800cb56:	3c57      	subs	r4, #87	; 0x57
 800cb58:	e7dd      	b.n	800cb16 <_strtoul_l.constprop.0+0x5e>
 800cb5a:	f04f 37ff 	mov.w	r7, #4294967295
 800cb5e:	e7e6      	b.n	800cb2e <_strtoul_l.constprop.0+0x76>
 800cb60:	2f00      	cmp	r7, #0
 800cb62:	da07      	bge.n	800cb74 <_strtoul_l.constprop.0+0xbc>
 800cb64:	2322      	movs	r3, #34	; 0x22
 800cb66:	f8ce 3000 	str.w	r3, [lr]
 800cb6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb6e:	b932      	cbnz	r2, 800cb7e <_strtoul_l.constprop.0+0xc6>
 800cb70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb74:	b106      	cbz	r6, 800cb78 <_strtoul_l.constprop.0+0xc0>
 800cb76:	4240      	negs	r0, r0
 800cb78:	2a00      	cmp	r2, #0
 800cb7a:	d0f9      	beq.n	800cb70 <_strtoul_l.constprop.0+0xb8>
 800cb7c:	b107      	cbz	r7, 800cb80 <_strtoul_l.constprop.0+0xc8>
 800cb7e:	1e69      	subs	r1, r5, #1
 800cb80:	6011      	str	r1, [r2, #0]
 800cb82:	e7f5      	b.n	800cb70 <_strtoul_l.constprop.0+0xb8>
 800cb84:	2430      	movs	r4, #48	; 0x30
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d1b5      	bne.n	800caf6 <_strtoul_l.constprop.0+0x3e>
 800cb8a:	2308      	movs	r3, #8
 800cb8c:	e7b3      	b.n	800caf6 <_strtoul_l.constprop.0+0x3e>
 800cb8e:	2c30      	cmp	r4, #48	; 0x30
 800cb90:	d0a9      	beq.n	800cae6 <_strtoul_l.constprop.0+0x2e>
 800cb92:	230a      	movs	r3, #10
 800cb94:	e7af      	b.n	800caf6 <_strtoul_l.constprop.0+0x3e>
 800cb96:	bf00      	nop
 800cb98:	08010419 	.word	0x08010419

0800cb9c <_strtoul_r>:
 800cb9c:	f7ff bf8c 	b.w	800cab8 <_strtoul_l.constprop.0>

0800cba0 <__submore>:
 800cba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cba4:	460c      	mov	r4, r1
 800cba6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbac:	4299      	cmp	r1, r3
 800cbae:	d11d      	bne.n	800cbec <__submore+0x4c>
 800cbb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cbb4:	f7ff fa14 	bl	800bfe0 <_malloc_r>
 800cbb8:	b918      	cbnz	r0, 800cbc2 <__submore+0x22>
 800cbba:	f04f 30ff 	mov.w	r0, #4294967295
 800cbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbc6:	63a3      	str	r3, [r4, #56]	; 0x38
 800cbc8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cbcc:	6360      	str	r0, [r4, #52]	; 0x34
 800cbce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cbd2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cbd6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cbda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cbde:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cbe2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cbe6:	6020      	str	r0, [r4, #0]
 800cbe8:	2000      	movs	r0, #0
 800cbea:	e7e8      	b.n	800cbbe <__submore+0x1e>
 800cbec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cbee:	0077      	lsls	r7, r6, #1
 800cbf0:	463a      	mov	r2, r7
 800cbf2:	f000 fa2d 	bl	800d050 <_realloc_r>
 800cbf6:	4605      	mov	r5, r0
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	d0de      	beq.n	800cbba <__submore+0x1a>
 800cbfc:	eb00 0806 	add.w	r8, r0, r6
 800cc00:	4601      	mov	r1, r0
 800cc02:	4632      	mov	r2, r6
 800cc04:	4640      	mov	r0, r8
 800cc06:	f7fe fc99 	bl	800b53c <memcpy>
 800cc0a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cc0e:	f8c4 8000 	str.w	r8, [r4]
 800cc12:	e7e9      	b.n	800cbe8 <__submore+0x48>

0800cc14 <__ascii_wctomb>:
 800cc14:	b149      	cbz	r1, 800cc2a <__ascii_wctomb+0x16>
 800cc16:	2aff      	cmp	r2, #255	; 0xff
 800cc18:	bf85      	ittet	hi
 800cc1a:	238a      	movhi	r3, #138	; 0x8a
 800cc1c:	6003      	strhi	r3, [r0, #0]
 800cc1e:	700a      	strbls	r2, [r1, #0]
 800cc20:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc24:	bf98      	it	ls
 800cc26:	2001      	movls	r0, #1
 800cc28:	4770      	bx	lr
 800cc2a:	4608      	mov	r0, r1
 800cc2c:	4770      	bx	lr
	...

0800cc30 <__assert_func>:
 800cc30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc32:	4614      	mov	r4, r2
 800cc34:	461a      	mov	r2, r3
 800cc36:	4b09      	ldr	r3, [pc, #36]	; (800cc5c <__assert_func+0x2c>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	68d8      	ldr	r0, [r3, #12]
 800cc3e:	b14c      	cbz	r4, 800cc54 <__assert_func+0x24>
 800cc40:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <__assert_func+0x30>)
 800cc42:	9100      	str	r1, [sp, #0]
 800cc44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc48:	4906      	ldr	r1, [pc, #24]	; (800cc64 <__assert_func+0x34>)
 800cc4a:	462b      	mov	r3, r5
 800cc4c:	f000 f9a6 	bl	800cf9c <fiprintf>
 800cc50:	f000 fc46 	bl	800d4e0 <abort>
 800cc54:	4b04      	ldr	r3, [pc, #16]	; (800cc68 <__assert_func+0x38>)
 800cc56:	461c      	mov	r4, r3
 800cc58:	e7f3      	b.n	800cc42 <__assert_func+0x12>
 800cc5a:	bf00      	nop
 800cc5c:	2000001c 	.word	0x2000001c
 800cc60:	080107a8 	.word	0x080107a8
 800cc64:	080107b5 	.word	0x080107b5
 800cc68:	080107e3 	.word	0x080107e3

0800cc6c <__sflush_r>:
 800cc6c:	898a      	ldrh	r2, [r1, #12]
 800cc6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc72:	4605      	mov	r5, r0
 800cc74:	0710      	lsls	r0, r2, #28
 800cc76:	460c      	mov	r4, r1
 800cc78:	d458      	bmi.n	800cd2c <__sflush_r+0xc0>
 800cc7a:	684b      	ldr	r3, [r1, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	dc05      	bgt.n	800cc8c <__sflush_r+0x20>
 800cc80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	dc02      	bgt.n	800cc8c <__sflush_r+0x20>
 800cc86:	2000      	movs	r0, #0
 800cc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc8e:	2e00      	cmp	r6, #0
 800cc90:	d0f9      	beq.n	800cc86 <__sflush_r+0x1a>
 800cc92:	2300      	movs	r3, #0
 800cc94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc98:	682f      	ldr	r7, [r5, #0]
 800cc9a:	602b      	str	r3, [r5, #0]
 800cc9c:	d032      	beq.n	800cd04 <__sflush_r+0x98>
 800cc9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cca0:	89a3      	ldrh	r3, [r4, #12]
 800cca2:	075a      	lsls	r2, r3, #29
 800cca4:	d505      	bpl.n	800ccb2 <__sflush_r+0x46>
 800cca6:	6863      	ldr	r3, [r4, #4]
 800cca8:	1ac0      	subs	r0, r0, r3
 800ccaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccac:	b10b      	cbz	r3, 800ccb2 <__sflush_r+0x46>
 800ccae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccb0:	1ac0      	subs	r0, r0, r3
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccb8:	6a21      	ldr	r1, [r4, #32]
 800ccba:	4628      	mov	r0, r5
 800ccbc:	47b0      	blx	r6
 800ccbe:	1c43      	adds	r3, r0, #1
 800ccc0:	89a3      	ldrh	r3, [r4, #12]
 800ccc2:	d106      	bne.n	800ccd2 <__sflush_r+0x66>
 800ccc4:	6829      	ldr	r1, [r5, #0]
 800ccc6:	291d      	cmp	r1, #29
 800ccc8:	d82c      	bhi.n	800cd24 <__sflush_r+0xb8>
 800ccca:	4a2a      	ldr	r2, [pc, #168]	; (800cd74 <__sflush_r+0x108>)
 800cccc:	40ca      	lsrs	r2, r1
 800ccce:	07d6      	lsls	r6, r2, #31
 800ccd0:	d528      	bpl.n	800cd24 <__sflush_r+0xb8>
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	6062      	str	r2, [r4, #4]
 800ccd6:	04d9      	lsls	r1, r3, #19
 800ccd8:	6922      	ldr	r2, [r4, #16]
 800ccda:	6022      	str	r2, [r4, #0]
 800ccdc:	d504      	bpl.n	800cce8 <__sflush_r+0x7c>
 800ccde:	1c42      	adds	r2, r0, #1
 800cce0:	d101      	bne.n	800cce6 <__sflush_r+0x7a>
 800cce2:	682b      	ldr	r3, [r5, #0]
 800cce4:	b903      	cbnz	r3, 800cce8 <__sflush_r+0x7c>
 800cce6:	6560      	str	r0, [r4, #84]	; 0x54
 800cce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccea:	602f      	str	r7, [r5, #0]
 800ccec:	2900      	cmp	r1, #0
 800ccee:	d0ca      	beq.n	800cc86 <__sflush_r+0x1a>
 800ccf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccf4:	4299      	cmp	r1, r3
 800ccf6:	d002      	beq.n	800ccfe <__sflush_r+0x92>
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	f7ff f905 	bl	800bf08 <_free_r>
 800ccfe:	2000      	movs	r0, #0
 800cd00:	6360      	str	r0, [r4, #52]	; 0x34
 800cd02:	e7c1      	b.n	800cc88 <__sflush_r+0x1c>
 800cd04:	6a21      	ldr	r1, [r4, #32]
 800cd06:	2301      	movs	r3, #1
 800cd08:	4628      	mov	r0, r5
 800cd0a:	47b0      	blx	r6
 800cd0c:	1c41      	adds	r1, r0, #1
 800cd0e:	d1c7      	bne.n	800cca0 <__sflush_r+0x34>
 800cd10:	682b      	ldr	r3, [r5, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d0c4      	beq.n	800cca0 <__sflush_r+0x34>
 800cd16:	2b1d      	cmp	r3, #29
 800cd18:	d001      	beq.n	800cd1e <__sflush_r+0xb2>
 800cd1a:	2b16      	cmp	r3, #22
 800cd1c:	d101      	bne.n	800cd22 <__sflush_r+0xb6>
 800cd1e:	602f      	str	r7, [r5, #0]
 800cd20:	e7b1      	b.n	800cc86 <__sflush_r+0x1a>
 800cd22:	89a3      	ldrh	r3, [r4, #12]
 800cd24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd28:	81a3      	strh	r3, [r4, #12]
 800cd2a:	e7ad      	b.n	800cc88 <__sflush_r+0x1c>
 800cd2c:	690f      	ldr	r7, [r1, #16]
 800cd2e:	2f00      	cmp	r7, #0
 800cd30:	d0a9      	beq.n	800cc86 <__sflush_r+0x1a>
 800cd32:	0793      	lsls	r3, r2, #30
 800cd34:	680e      	ldr	r6, [r1, #0]
 800cd36:	bf08      	it	eq
 800cd38:	694b      	ldreq	r3, [r1, #20]
 800cd3a:	600f      	str	r7, [r1, #0]
 800cd3c:	bf18      	it	ne
 800cd3e:	2300      	movne	r3, #0
 800cd40:	eba6 0807 	sub.w	r8, r6, r7
 800cd44:	608b      	str	r3, [r1, #8]
 800cd46:	f1b8 0f00 	cmp.w	r8, #0
 800cd4a:	dd9c      	ble.n	800cc86 <__sflush_r+0x1a>
 800cd4c:	6a21      	ldr	r1, [r4, #32]
 800cd4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd50:	4643      	mov	r3, r8
 800cd52:	463a      	mov	r2, r7
 800cd54:	4628      	mov	r0, r5
 800cd56:	47b0      	blx	r6
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	dc06      	bgt.n	800cd6a <__sflush_r+0xfe>
 800cd5c:	89a3      	ldrh	r3, [r4, #12]
 800cd5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd62:	81a3      	strh	r3, [r4, #12]
 800cd64:	f04f 30ff 	mov.w	r0, #4294967295
 800cd68:	e78e      	b.n	800cc88 <__sflush_r+0x1c>
 800cd6a:	4407      	add	r7, r0
 800cd6c:	eba8 0800 	sub.w	r8, r8, r0
 800cd70:	e7e9      	b.n	800cd46 <__sflush_r+0xda>
 800cd72:	bf00      	nop
 800cd74:	20400001 	.word	0x20400001

0800cd78 <_fflush_r>:
 800cd78:	b538      	push	{r3, r4, r5, lr}
 800cd7a:	690b      	ldr	r3, [r1, #16]
 800cd7c:	4605      	mov	r5, r0
 800cd7e:	460c      	mov	r4, r1
 800cd80:	b913      	cbnz	r3, 800cd88 <_fflush_r+0x10>
 800cd82:	2500      	movs	r5, #0
 800cd84:	4628      	mov	r0, r5
 800cd86:	bd38      	pop	{r3, r4, r5, pc}
 800cd88:	b118      	cbz	r0, 800cd92 <_fflush_r+0x1a>
 800cd8a:	6983      	ldr	r3, [r0, #24]
 800cd8c:	b90b      	cbnz	r3, 800cd92 <_fflush_r+0x1a>
 800cd8e:	f000 f887 	bl	800cea0 <__sinit>
 800cd92:	4b14      	ldr	r3, [pc, #80]	; (800cde4 <_fflush_r+0x6c>)
 800cd94:	429c      	cmp	r4, r3
 800cd96:	d11b      	bne.n	800cdd0 <_fflush_r+0x58>
 800cd98:	686c      	ldr	r4, [r5, #4]
 800cd9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d0ef      	beq.n	800cd82 <_fflush_r+0xa>
 800cda2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cda4:	07d0      	lsls	r0, r2, #31
 800cda6:	d404      	bmi.n	800cdb2 <_fflush_r+0x3a>
 800cda8:	0599      	lsls	r1, r3, #22
 800cdaa:	d402      	bmi.n	800cdb2 <_fflush_r+0x3a>
 800cdac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdae:	f000 f927 	bl	800d000 <__retarget_lock_acquire_recursive>
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	4621      	mov	r1, r4
 800cdb6:	f7ff ff59 	bl	800cc6c <__sflush_r>
 800cdba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdbc:	07da      	lsls	r2, r3, #31
 800cdbe:	4605      	mov	r5, r0
 800cdc0:	d4e0      	bmi.n	800cd84 <_fflush_r+0xc>
 800cdc2:	89a3      	ldrh	r3, [r4, #12]
 800cdc4:	059b      	lsls	r3, r3, #22
 800cdc6:	d4dd      	bmi.n	800cd84 <_fflush_r+0xc>
 800cdc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdca:	f000 f91a 	bl	800d002 <__retarget_lock_release_recursive>
 800cdce:	e7d9      	b.n	800cd84 <_fflush_r+0xc>
 800cdd0:	4b05      	ldr	r3, [pc, #20]	; (800cde8 <_fflush_r+0x70>)
 800cdd2:	429c      	cmp	r4, r3
 800cdd4:	d101      	bne.n	800cdda <_fflush_r+0x62>
 800cdd6:	68ac      	ldr	r4, [r5, #8]
 800cdd8:	e7df      	b.n	800cd9a <_fflush_r+0x22>
 800cdda:	4b04      	ldr	r3, [pc, #16]	; (800cdec <_fflush_r+0x74>)
 800cddc:	429c      	cmp	r4, r3
 800cdde:	bf08      	it	eq
 800cde0:	68ec      	ldreq	r4, [r5, #12]
 800cde2:	e7da      	b.n	800cd9a <_fflush_r+0x22>
 800cde4:	08010804 	.word	0x08010804
 800cde8:	08010824 	.word	0x08010824
 800cdec:	080107e4 	.word	0x080107e4

0800cdf0 <std>:
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	b510      	push	{r4, lr}
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	e9c0 3300 	strd	r3, r3, [r0]
 800cdfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdfe:	6083      	str	r3, [r0, #8]
 800ce00:	8181      	strh	r1, [r0, #12]
 800ce02:	6643      	str	r3, [r0, #100]	; 0x64
 800ce04:	81c2      	strh	r2, [r0, #14]
 800ce06:	6183      	str	r3, [r0, #24]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	2208      	movs	r2, #8
 800ce0c:	305c      	adds	r0, #92	; 0x5c
 800ce0e:	f7fb fb7d 	bl	800850c <memset>
 800ce12:	4b05      	ldr	r3, [pc, #20]	; (800ce28 <std+0x38>)
 800ce14:	6263      	str	r3, [r4, #36]	; 0x24
 800ce16:	4b05      	ldr	r3, [pc, #20]	; (800ce2c <std+0x3c>)
 800ce18:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce1a:	4b05      	ldr	r3, [pc, #20]	; (800ce30 <std+0x40>)
 800ce1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce1e:	4b05      	ldr	r3, [pc, #20]	; (800ce34 <std+0x44>)
 800ce20:	6224      	str	r4, [r4, #32]
 800ce22:	6323      	str	r3, [r4, #48]	; 0x30
 800ce24:	bd10      	pop	{r4, pc}
 800ce26:	bf00      	nop
 800ce28:	080092b5 	.word	0x080092b5
 800ce2c:	080092db 	.word	0x080092db
 800ce30:	08009313 	.word	0x08009313
 800ce34:	08009337 	.word	0x08009337

0800ce38 <_cleanup_r>:
 800ce38:	4901      	ldr	r1, [pc, #4]	; (800ce40 <_cleanup_r+0x8>)
 800ce3a:	f000 b8c1 	b.w	800cfc0 <_fwalk_reent>
 800ce3e:	bf00      	nop
 800ce40:	0800cd79 	.word	0x0800cd79

0800ce44 <__sfmoreglue>:
 800ce44:	b570      	push	{r4, r5, r6, lr}
 800ce46:	2268      	movs	r2, #104	; 0x68
 800ce48:	1e4d      	subs	r5, r1, #1
 800ce4a:	4355      	muls	r5, r2
 800ce4c:	460e      	mov	r6, r1
 800ce4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce52:	f7ff f8c5 	bl	800bfe0 <_malloc_r>
 800ce56:	4604      	mov	r4, r0
 800ce58:	b140      	cbz	r0, 800ce6c <__sfmoreglue+0x28>
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	e9c0 1600 	strd	r1, r6, [r0]
 800ce60:	300c      	adds	r0, #12
 800ce62:	60a0      	str	r0, [r4, #8]
 800ce64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce68:	f7fb fb50 	bl	800850c <memset>
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	bd70      	pop	{r4, r5, r6, pc}

0800ce70 <__sfp_lock_acquire>:
 800ce70:	4801      	ldr	r0, [pc, #4]	; (800ce78 <__sfp_lock_acquire+0x8>)
 800ce72:	f000 b8c5 	b.w	800d000 <__retarget_lock_acquire_recursive>
 800ce76:	bf00      	nop
 800ce78:	20009d05 	.word	0x20009d05

0800ce7c <__sfp_lock_release>:
 800ce7c:	4801      	ldr	r0, [pc, #4]	; (800ce84 <__sfp_lock_release+0x8>)
 800ce7e:	f000 b8c0 	b.w	800d002 <__retarget_lock_release_recursive>
 800ce82:	bf00      	nop
 800ce84:	20009d05 	.word	0x20009d05

0800ce88 <__sinit_lock_acquire>:
 800ce88:	4801      	ldr	r0, [pc, #4]	; (800ce90 <__sinit_lock_acquire+0x8>)
 800ce8a:	f000 b8b9 	b.w	800d000 <__retarget_lock_acquire_recursive>
 800ce8e:	bf00      	nop
 800ce90:	20009d06 	.word	0x20009d06

0800ce94 <__sinit_lock_release>:
 800ce94:	4801      	ldr	r0, [pc, #4]	; (800ce9c <__sinit_lock_release+0x8>)
 800ce96:	f000 b8b4 	b.w	800d002 <__retarget_lock_release_recursive>
 800ce9a:	bf00      	nop
 800ce9c:	20009d06 	.word	0x20009d06

0800cea0 <__sinit>:
 800cea0:	b510      	push	{r4, lr}
 800cea2:	4604      	mov	r4, r0
 800cea4:	f7ff fff0 	bl	800ce88 <__sinit_lock_acquire>
 800cea8:	69a3      	ldr	r3, [r4, #24]
 800ceaa:	b11b      	cbz	r3, 800ceb4 <__sinit+0x14>
 800ceac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceb0:	f7ff bff0 	b.w	800ce94 <__sinit_lock_release>
 800ceb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ceb8:	6523      	str	r3, [r4, #80]	; 0x50
 800ceba:	4b13      	ldr	r3, [pc, #76]	; (800cf08 <__sinit+0x68>)
 800cebc:	4a13      	ldr	r2, [pc, #76]	; (800cf0c <__sinit+0x6c>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	62a2      	str	r2, [r4, #40]	; 0x28
 800cec2:	42a3      	cmp	r3, r4
 800cec4:	bf04      	itt	eq
 800cec6:	2301      	moveq	r3, #1
 800cec8:	61a3      	streq	r3, [r4, #24]
 800ceca:	4620      	mov	r0, r4
 800cecc:	f000 f820 	bl	800cf10 <__sfp>
 800ced0:	6060      	str	r0, [r4, #4]
 800ced2:	4620      	mov	r0, r4
 800ced4:	f000 f81c 	bl	800cf10 <__sfp>
 800ced8:	60a0      	str	r0, [r4, #8]
 800ceda:	4620      	mov	r0, r4
 800cedc:	f000 f818 	bl	800cf10 <__sfp>
 800cee0:	2200      	movs	r2, #0
 800cee2:	60e0      	str	r0, [r4, #12]
 800cee4:	2104      	movs	r1, #4
 800cee6:	6860      	ldr	r0, [r4, #4]
 800cee8:	f7ff ff82 	bl	800cdf0 <std>
 800ceec:	68a0      	ldr	r0, [r4, #8]
 800ceee:	2201      	movs	r2, #1
 800cef0:	2109      	movs	r1, #9
 800cef2:	f7ff ff7d 	bl	800cdf0 <std>
 800cef6:	68e0      	ldr	r0, [r4, #12]
 800cef8:	2202      	movs	r2, #2
 800cefa:	2112      	movs	r1, #18
 800cefc:	f7ff ff78 	bl	800cdf0 <std>
 800cf00:	2301      	movs	r3, #1
 800cf02:	61a3      	str	r3, [r4, #24]
 800cf04:	e7d2      	b.n	800ceac <__sinit+0xc>
 800cf06:	bf00      	nop
 800cf08:	0801038c 	.word	0x0801038c
 800cf0c:	0800ce39 	.word	0x0800ce39

0800cf10 <__sfp>:
 800cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf12:	4607      	mov	r7, r0
 800cf14:	f7ff ffac 	bl	800ce70 <__sfp_lock_acquire>
 800cf18:	4b1e      	ldr	r3, [pc, #120]	; (800cf94 <__sfp+0x84>)
 800cf1a:	681e      	ldr	r6, [r3, #0]
 800cf1c:	69b3      	ldr	r3, [r6, #24]
 800cf1e:	b913      	cbnz	r3, 800cf26 <__sfp+0x16>
 800cf20:	4630      	mov	r0, r6
 800cf22:	f7ff ffbd 	bl	800cea0 <__sinit>
 800cf26:	3648      	adds	r6, #72	; 0x48
 800cf28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	d503      	bpl.n	800cf38 <__sfp+0x28>
 800cf30:	6833      	ldr	r3, [r6, #0]
 800cf32:	b30b      	cbz	r3, 800cf78 <__sfp+0x68>
 800cf34:	6836      	ldr	r6, [r6, #0]
 800cf36:	e7f7      	b.n	800cf28 <__sfp+0x18>
 800cf38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf3c:	b9d5      	cbnz	r5, 800cf74 <__sfp+0x64>
 800cf3e:	4b16      	ldr	r3, [pc, #88]	; (800cf98 <__sfp+0x88>)
 800cf40:	60e3      	str	r3, [r4, #12]
 800cf42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf46:	6665      	str	r5, [r4, #100]	; 0x64
 800cf48:	f000 f859 	bl	800cffe <__retarget_lock_init_recursive>
 800cf4c:	f7ff ff96 	bl	800ce7c <__sfp_lock_release>
 800cf50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf58:	6025      	str	r5, [r4, #0]
 800cf5a:	61a5      	str	r5, [r4, #24]
 800cf5c:	2208      	movs	r2, #8
 800cf5e:	4629      	mov	r1, r5
 800cf60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf64:	f7fb fad2 	bl	800850c <memset>
 800cf68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf70:	4620      	mov	r0, r4
 800cf72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf74:	3468      	adds	r4, #104	; 0x68
 800cf76:	e7d9      	b.n	800cf2c <__sfp+0x1c>
 800cf78:	2104      	movs	r1, #4
 800cf7a:	4638      	mov	r0, r7
 800cf7c:	f7ff ff62 	bl	800ce44 <__sfmoreglue>
 800cf80:	4604      	mov	r4, r0
 800cf82:	6030      	str	r0, [r6, #0]
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d1d5      	bne.n	800cf34 <__sfp+0x24>
 800cf88:	f7ff ff78 	bl	800ce7c <__sfp_lock_release>
 800cf8c:	230c      	movs	r3, #12
 800cf8e:	603b      	str	r3, [r7, #0]
 800cf90:	e7ee      	b.n	800cf70 <__sfp+0x60>
 800cf92:	bf00      	nop
 800cf94:	0801038c 	.word	0x0801038c
 800cf98:	ffff0001 	.word	0xffff0001

0800cf9c <fiprintf>:
 800cf9c:	b40e      	push	{r1, r2, r3}
 800cf9e:	b503      	push	{r0, r1, lr}
 800cfa0:	4601      	mov	r1, r0
 800cfa2:	ab03      	add	r3, sp, #12
 800cfa4:	4805      	ldr	r0, [pc, #20]	; (800cfbc <fiprintf+0x20>)
 800cfa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfaa:	6800      	ldr	r0, [r0, #0]
 800cfac:	9301      	str	r3, [sp, #4]
 800cfae:	f000 f8a7 	bl	800d100 <_vfiprintf_r>
 800cfb2:	b002      	add	sp, #8
 800cfb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfb8:	b003      	add	sp, #12
 800cfba:	4770      	bx	lr
 800cfbc:	2000001c 	.word	0x2000001c

0800cfc0 <_fwalk_reent>:
 800cfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfc4:	4606      	mov	r6, r0
 800cfc6:	4688      	mov	r8, r1
 800cfc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cfcc:	2700      	movs	r7, #0
 800cfce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfd2:	f1b9 0901 	subs.w	r9, r9, #1
 800cfd6:	d505      	bpl.n	800cfe4 <_fwalk_reent+0x24>
 800cfd8:	6824      	ldr	r4, [r4, #0]
 800cfda:	2c00      	cmp	r4, #0
 800cfdc:	d1f7      	bne.n	800cfce <_fwalk_reent+0xe>
 800cfde:	4638      	mov	r0, r7
 800cfe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfe4:	89ab      	ldrh	r3, [r5, #12]
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d907      	bls.n	800cffa <_fwalk_reent+0x3a>
 800cfea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfee:	3301      	adds	r3, #1
 800cff0:	d003      	beq.n	800cffa <_fwalk_reent+0x3a>
 800cff2:	4629      	mov	r1, r5
 800cff4:	4630      	mov	r0, r6
 800cff6:	47c0      	blx	r8
 800cff8:	4307      	orrs	r7, r0
 800cffa:	3568      	adds	r5, #104	; 0x68
 800cffc:	e7e9      	b.n	800cfd2 <_fwalk_reent+0x12>

0800cffe <__retarget_lock_init_recursive>:
 800cffe:	4770      	bx	lr

0800d000 <__retarget_lock_acquire_recursive>:
 800d000:	4770      	bx	lr

0800d002 <__retarget_lock_release_recursive>:
 800d002:	4770      	bx	lr

0800d004 <memmove>:
 800d004:	4288      	cmp	r0, r1
 800d006:	b510      	push	{r4, lr}
 800d008:	eb01 0402 	add.w	r4, r1, r2
 800d00c:	d902      	bls.n	800d014 <memmove+0x10>
 800d00e:	4284      	cmp	r4, r0
 800d010:	4623      	mov	r3, r4
 800d012:	d807      	bhi.n	800d024 <memmove+0x20>
 800d014:	1e43      	subs	r3, r0, #1
 800d016:	42a1      	cmp	r1, r4
 800d018:	d008      	beq.n	800d02c <memmove+0x28>
 800d01a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d01e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d022:	e7f8      	b.n	800d016 <memmove+0x12>
 800d024:	4402      	add	r2, r0
 800d026:	4601      	mov	r1, r0
 800d028:	428a      	cmp	r2, r1
 800d02a:	d100      	bne.n	800d02e <memmove+0x2a>
 800d02c:	bd10      	pop	{r4, pc}
 800d02e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d036:	e7f7      	b.n	800d028 <memmove+0x24>

0800d038 <__malloc_lock>:
 800d038:	4801      	ldr	r0, [pc, #4]	; (800d040 <__malloc_lock+0x8>)
 800d03a:	f7ff bfe1 	b.w	800d000 <__retarget_lock_acquire_recursive>
 800d03e:	bf00      	nop
 800d040:	20009d04 	.word	0x20009d04

0800d044 <__malloc_unlock>:
 800d044:	4801      	ldr	r0, [pc, #4]	; (800d04c <__malloc_unlock+0x8>)
 800d046:	f7ff bfdc 	b.w	800d002 <__retarget_lock_release_recursive>
 800d04a:	bf00      	nop
 800d04c:	20009d04 	.word	0x20009d04

0800d050 <_realloc_r>:
 800d050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d054:	4680      	mov	r8, r0
 800d056:	4614      	mov	r4, r2
 800d058:	460e      	mov	r6, r1
 800d05a:	b921      	cbnz	r1, 800d066 <_realloc_r+0x16>
 800d05c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d060:	4611      	mov	r1, r2
 800d062:	f7fe bfbd 	b.w	800bfe0 <_malloc_r>
 800d066:	b92a      	cbnz	r2, 800d074 <_realloc_r+0x24>
 800d068:	f7fe ff4e 	bl	800bf08 <_free_r>
 800d06c:	4625      	mov	r5, r4
 800d06e:	4628      	mov	r0, r5
 800d070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d074:	f000 faa0 	bl	800d5b8 <_malloc_usable_size_r>
 800d078:	4284      	cmp	r4, r0
 800d07a:	4607      	mov	r7, r0
 800d07c:	d802      	bhi.n	800d084 <_realloc_r+0x34>
 800d07e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d082:	d812      	bhi.n	800d0aa <_realloc_r+0x5a>
 800d084:	4621      	mov	r1, r4
 800d086:	4640      	mov	r0, r8
 800d088:	f7fe ffaa 	bl	800bfe0 <_malloc_r>
 800d08c:	4605      	mov	r5, r0
 800d08e:	2800      	cmp	r0, #0
 800d090:	d0ed      	beq.n	800d06e <_realloc_r+0x1e>
 800d092:	42bc      	cmp	r4, r7
 800d094:	4622      	mov	r2, r4
 800d096:	4631      	mov	r1, r6
 800d098:	bf28      	it	cs
 800d09a:	463a      	movcs	r2, r7
 800d09c:	f7fe fa4e 	bl	800b53c <memcpy>
 800d0a0:	4631      	mov	r1, r6
 800d0a2:	4640      	mov	r0, r8
 800d0a4:	f7fe ff30 	bl	800bf08 <_free_r>
 800d0a8:	e7e1      	b.n	800d06e <_realloc_r+0x1e>
 800d0aa:	4635      	mov	r5, r6
 800d0ac:	e7df      	b.n	800d06e <_realloc_r+0x1e>

0800d0ae <__sfputc_r>:
 800d0ae:	6893      	ldr	r3, [r2, #8]
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	b410      	push	{r4}
 800d0b6:	6093      	str	r3, [r2, #8]
 800d0b8:	da08      	bge.n	800d0cc <__sfputc_r+0x1e>
 800d0ba:	6994      	ldr	r4, [r2, #24]
 800d0bc:	42a3      	cmp	r3, r4
 800d0be:	db01      	blt.n	800d0c4 <__sfputc_r+0x16>
 800d0c0:	290a      	cmp	r1, #10
 800d0c2:	d103      	bne.n	800d0cc <__sfputc_r+0x1e>
 800d0c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0c8:	f000 b94a 	b.w	800d360 <__swbuf_r>
 800d0cc:	6813      	ldr	r3, [r2, #0]
 800d0ce:	1c58      	adds	r0, r3, #1
 800d0d0:	6010      	str	r0, [r2, #0]
 800d0d2:	7019      	strb	r1, [r3, #0]
 800d0d4:	4608      	mov	r0, r1
 800d0d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <__sfputs_r>:
 800d0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0de:	4606      	mov	r6, r0
 800d0e0:	460f      	mov	r7, r1
 800d0e2:	4614      	mov	r4, r2
 800d0e4:	18d5      	adds	r5, r2, r3
 800d0e6:	42ac      	cmp	r4, r5
 800d0e8:	d101      	bne.n	800d0ee <__sfputs_r+0x12>
 800d0ea:	2000      	movs	r0, #0
 800d0ec:	e007      	b.n	800d0fe <__sfputs_r+0x22>
 800d0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0f2:	463a      	mov	r2, r7
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	f7ff ffda 	bl	800d0ae <__sfputc_r>
 800d0fa:	1c43      	adds	r3, r0, #1
 800d0fc:	d1f3      	bne.n	800d0e6 <__sfputs_r+0xa>
 800d0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d100 <_vfiprintf_r>:
 800d100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d104:	460d      	mov	r5, r1
 800d106:	b09d      	sub	sp, #116	; 0x74
 800d108:	4614      	mov	r4, r2
 800d10a:	4698      	mov	r8, r3
 800d10c:	4606      	mov	r6, r0
 800d10e:	b118      	cbz	r0, 800d118 <_vfiprintf_r+0x18>
 800d110:	6983      	ldr	r3, [r0, #24]
 800d112:	b90b      	cbnz	r3, 800d118 <_vfiprintf_r+0x18>
 800d114:	f7ff fec4 	bl	800cea0 <__sinit>
 800d118:	4b89      	ldr	r3, [pc, #548]	; (800d340 <_vfiprintf_r+0x240>)
 800d11a:	429d      	cmp	r5, r3
 800d11c:	d11b      	bne.n	800d156 <_vfiprintf_r+0x56>
 800d11e:	6875      	ldr	r5, [r6, #4]
 800d120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d122:	07d9      	lsls	r1, r3, #31
 800d124:	d405      	bmi.n	800d132 <_vfiprintf_r+0x32>
 800d126:	89ab      	ldrh	r3, [r5, #12]
 800d128:	059a      	lsls	r2, r3, #22
 800d12a:	d402      	bmi.n	800d132 <_vfiprintf_r+0x32>
 800d12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d12e:	f7ff ff67 	bl	800d000 <__retarget_lock_acquire_recursive>
 800d132:	89ab      	ldrh	r3, [r5, #12]
 800d134:	071b      	lsls	r3, r3, #28
 800d136:	d501      	bpl.n	800d13c <_vfiprintf_r+0x3c>
 800d138:	692b      	ldr	r3, [r5, #16]
 800d13a:	b9eb      	cbnz	r3, 800d178 <_vfiprintf_r+0x78>
 800d13c:	4629      	mov	r1, r5
 800d13e:	4630      	mov	r0, r6
 800d140:	f000 f960 	bl	800d404 <__swsetup_r>
 800d144:	b1c0      	cbz	r0, 800d178 <_vfiprintf_r+0x78>
 800d146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d148:	07dc      	lsls	r4, r3, #31
 800d14a:	d50e      	bpl.n	800d16a <_vfiprintf_r+0x6a>
 800d14c:	f04f 30ff 	mov.w	r0, #4294967295
 800d150:	b01d      	add	sp, #116	; 0x74
 800d152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d156:	4b7b      	ldr	r3, [pc, #492]	; (800d344 <_vfiprintf_r+0x244>)
 800d158:	429d      	cmp	r5, r3
 800d15a:	d101      	bne.n	800d160 <_vfiprintf_r+0x60>
 800d15c:	68b5      	ldr	r5, [r6, #8]
 800d15e:	e7df      	b.n	800d120 <_vfiprintf_r+0x20>
 800d160:	4b79      	ldr	r3, [pc, #484]	; (800d348 <_vfiprintf_r+0x248>)
 800d162:	429d      	cmp	r5, r3
 800d164:	bf08      	it	eq
 800d166:	68f5      	ldreq	r5, [r6, #12]
 800d168:	e7da      	b.n	800d120 <_vfiprintf_r+0x20>
 800d16a:	89ab      	ldrh	r3, [r5, #12]
 800d16c:	0598      	lsls	r0, r3, #22
 800d16e:	d4ed      	bmi.n	800d14c <_vfiprintf_r+0x4c>
 800d170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d172:	f7ff ff46 	bl	800d002 <__retarget_lock_release_recursive>
 800d176:	e7e9      	b.n	800d14c <_vfiprintf_r+0x4c>
 800d178:	2300      	movs	r3, #0
 800d17a:	9309      	str	r3, [sp, #36]	; 0x24
 800d17c:	2320      	movs	r3, #32
 800d17e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d182:	f8cd 800c 	str.w	r8, [sp, #12]
 800d186:	2330      	movs	r3, #48	; 0x30
 800d188:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d34c <_vfiprintf_r+0x24c>
 800d18c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d190:	f04f 0901 	mov.w	r9, #1
 800d194:	4623      	mov	r3, r4
 800d196:	469a      	mov	sl, r3
 800d198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d19c:	b10a      	cbz	r2, 800d1a2 <_vfiprintf_r+0xa2>
 800d19e:	2a25      	cmp	r2, #37	; 0x25
 800d1a0:	d1f9      	bne.n	800d196 <_vfiprintf_r+0x96>
 800d1a2:	ebba 0b04 	subs.w	fp, sl, r4
 800d1a6:	d00b      	beq.n	800d1c0 <_vfiprintf_r+0xc0>
 800d1a8:	465b      	mov	r3, fp
 800d1aa:	4622      	mov	r2, r4
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	f7ff ff94 	bl	800d0dc <__sfputs_r>
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	f000 80aa 	beq.w	800d30e <_vfiprintf_r+0x20e>
 800d1ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1bc:	445a      	add	r2, fp
 800d1be:	9209      	str	r2, [sp, #36]	; 0x24
 800d1c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 80a2 	beq.w	800d30e <_vfiprintf_r+0x20e>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1d4:	f10a 0a01 	add.w	sl, sl, #1
 800d1d8:	9304      	str	r3, [sp, #16]
 800d1da:	9307      	str	r3, [sp, #28]
 800d1dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1e0:	931a      	str	r3, [sp, #104]	; 0x68
 800d1e2:	4654      	mov	r4, sl
 800d1e4:	2205      	movs	r2, #5
 800d1e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ea:	4858      	ldr	r0, [pc, #352]	; (800d34c <_vfiprintf_r+0x24c>)
 800d1ec:	f7f3 f810 	bl	8000210 <memchr>
 800d1f0:	9a04      	ldr	r2, [sp, #16]
 800d1f2:	b9d8      	cbnz	r0, 800d22c <_vfiprintf_r+0x12c>
 800d1f4:	06d1      	lsls	r1, r2, #27
 800d1f6:	bf44      	itt	mi
 800d1f8:	2320      	movmi	r3, #32
 800d1fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1fe:	0713      	lsls	r3, r2, #28
 800d200:	bf44      	itt	mi
 800d202:	232b      	movmi	r3, #43	; 0x2b
 800d204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d208:	f89a 3000 	ldrb.w	r3, [sl]
 800d20c:	2b2a      	cmp	r3, #42	; 0x2a
 800d20e:	d015      	beq.n	800d23c <_vfiprintf_r+0x13c>
 800d210:	9a07      	ldr	r2, [sp, #28]
 800d212:	4654      	mov	r4, sl
 800d214:	2000      	movs	r0, #0
 800d216:	f04f 0c0a 	mov.w	ip, #10
 800d21a:	4621      	mov	r1, r4
 800d21c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d220:	3b30      	subs	r3, #48	; 0x30
 800d222:	2b09      	cmp	r3, #9
 800d224:	d94e      	bls.n	800d2c4 <_vfiprintf_r+0x1c4>
 800d226:	b1b0      	cbz	r0, 800d256 <_vfiprintf_r+0x156>
 800d228:	9207      	str	r2, [sp, #28]
 800d22a:	e014      	b.n	800d256 <_vfiprintf_r+0x156>
 800d22c:	eba0 0308 	sub.w	r3, r0, r8
 800d230:	fa09 f303 	lsl.w	r3, r9, r3
 800d234:	4313      	orrs	r3, r2
 800d236:	9304      	str	r3, [sp, #16]
 800d238:	46a2      	mov	sl, r4
 800d23a:	e7d2      	b.n	800d1e2 <_vfiprintf_r+0xe2>
 800d23c:	9b03      	ldr	r3, [sp, #12]
 800d23e:	1d19      	adds	r1, r3, #4
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	9103      	str	r1, [sp, #12]
 800d244:	2b00      	cmp	r3, #0
 800d246:	bfbb      	ittet	lt
 800d248:	425b      	neglt	r3, r3
 800d24a:	f042 0202 	orrlt.w	r2, r2, #2
 800d24e:	9307      	strge	r3, [sp, #28]
 800d250:	9307      	strlt	r3, [sp, #28]
 800d252:	bfb8      	it	lt
 800d254:	9204      	strlt	r2, [sp, #16]
 800d256:	7823      	ldrb	r3, [r4, #0]
 800d258:	2b2e      	cmp	r3, #46	; 0x2e
 800d25a:	d10c      	bne.n	800d276 <_vfiprintf_r+0x176>
 800d25c:	7863      	ldrb	r3, [r4, #1]
 800d25e:	2b2a      	cmp	r3, #42	; 0x2a
 800d260:	d135      	bne.n	800d2ce <_vfiprintf_r+0x1ce>
 800d262:	9b03      	ldr	r3, [sp, #12]
 800d264:	1d1a      	adds	r2, r3, #4
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	9203      	str	r2, [sp, #12]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	bfb8      	it	lt
 800d26e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d272:	3402      	adds	r4, #2
 800d274:	9305      	str	r3, [sp, #20]
 800d276:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d35c <_vfiprintf_r+0x25c>
 800d27a:	7821      	ldrb	r1, [r4, #0]
 800d27c:	2203      	movs	r2, #3
 800d27e:	4650      	mov	r0, sl
 800d280:	f7f2 ffc6 	bl	8000210 <memchr>
 800d284:	b140      	cbz	r0, 800d298 <_vfiprintf_r+0x198>
 800d286:	2340      	movs	r3, #64	; 0x40
 800d288:	eba0 000a 	sub.w	r0, r0, sl
 800d28c:	fa03 f000 	lsl.w	r0, r3, r0
 800d290:	9b04      	ldr	r3, [sp, #16]
 800d292:	4303      	orrs	r3, r0
 800d294:	3401      	adds	r4, #1
 800d296:	9304      	str	r3, [sp, #16]
 800d298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d29c:	482c      	ldr	r0, [pc, #176]	; (800d350 <_vfiprintf_r+0x250>)
 800d29e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2a2:	2206      	movs	r2, #6
 800d2a4:	f7f2 ffb4 	bl	8000210 <memchr>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d03f      	beq.n	800d32c <_vfiprintf_r+0x22c>
 800d2ac:	4b29      	ldr	r3, [pc, #164]	; (800d354 <_vfiprintf_r+0x254>)
 800d2ae:	bb1b      	cbnz	r3, 800d2f8 <_vfiprintf_r+0x1f8>
 800d2b0:	9b03      	ldr	r3, [sp, #12]
 800d2b2:	3307      	adds	r3, #7
 800d2b4:	f023 0307 	bic.w	r3, r3, #7
 800d2b8:	3308      	adds	r3, #8
 800d2ba:	9303      	str	r3, [sp, #12]
 800d2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2be:	443b      	add	r3, r7
 800d2c0:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c2:	e767      	b.n	800d194 <_vfiprintf_r+0x94>
 800d2c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2c8:	460c      	mov	r4, r1
 800d2ca:	2001      	movs	r0, #1
 800d2cc:	e7a5      	b.n	800d21a <_vfiprintf_r+0x11a>
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	3401      	adds	r4, #1
 800d2d2:	9305      	str	r3, [sp, #20]
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	f04f 0c0a 	mov.w	ip, #10
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2e0:	3a30      	subs	r2, #48	; 0x30
 800d2e2:	2a09      	cmp	r2, #9
 800d2e4:	d903      	bls.n	800d2ee <_vfiprintf_r+0x1ee>
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d0c5      	beq.n	800d276 <_vfiprintf_r+0x176>
 800d2ea:	9105      	str	r1, [sp, #20]
 800d2ec:	e7c3      	b.n	800d276 <_vfiprintf_r+0x176>
 800d2ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	e7f0      	b.n	800d2da <_vfiprintf_r+0x1da>
 800d2f8:	ab03      	add	r3, sp, #12
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	462a      	mov	r2, r5
 800d2fe:	4b16      	ldr	r3, [pc, #88]	; (800d358 <_vfiprintf_r+0x258>)
 800d300:	a904      	add	r1, sp, #16
 800d302:	4630      	mov	r0, r6
 800d304:	f7fb f9aa 	bl	800865c <_printf_float>
 800d308:	4607      	mov	r7, r0
 800d30a:	1c78      	adds	r0, r7, #1
 800d30c:	d1d6      	bne.n	800d2bc <_vfiprintf_r+0x1bc>
 800d30e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d310:	07d9      	lsls	r1, r3, #31
 800d312:	d405      	bmi.n	800d320 <_vfiprintf_r+0x220>
 800d314:	89ab      	ldrh	r3, [r5, #12]
 800d316:	059a      	lsls	r2, r3, #22
 800d318:	d402      	bmi.n	800d320 <_vfiprintf_r+0x220>
 800d31a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d31c:	f7ff fe71 	bl	800d002 <__retarget_lock_release_recursive>
 800d320:	89ab      	ldrh	r3, [r5, #12]
 800d322:	065b      	lsls	r3, r3, #25
 800d324:	f53f af12 	bmi.w	800d14c <_vfiprintf_r+0x4c>
 800d328:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d32a:	e711      	b.n	800d150 <_vfiprintf_r+0x50>
 800d32c:	ab03      	add	r3, sp, #12
 800d32e:	9300      	str	r3, [sp, #0]
 800d330:	462a      	mov	r2, r5
 800d332:	4b09      	ldr	r3, [pc, #36]	; (800d358 <_vfiprintf_r+0x258>)
 800d334:	a904      	add	r1, sp, #16
 800d336:	4630      	mov	r0, r6
 800d338:	f7fb fc34 	bl	8008ba4 <_printf_i>
 800d33c:	e7e4      	b.n	800d308 <_vfiprintf_r+0x208>
 800d33e:	bf00      	nop
 800d340:	08010804 	.word	0x08010804
 800d344:	08010824 	.word	0x08010824
 800d348:	080107e4 	.word	0x080107e4
 800d34c:	0801077c 	.word	0x0801077c
 800d350:	08010786 	.word	0x08010786
 800d354:	0800865d 	.word	0x0800865d
 800d358:	0800d0dd 	.word	0x0800d0dd
 800d35c:	08010782 	.word	0x08010782

0800d360 <__swbuf_r>:
 800d360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d362:	460e      	mov	r6, r1
 800d364:	4614      	mov	r4, r2
 800d366:	4605      	mov	r5, r0
 800d368:	b118      	cbz	r0, 800d372 <__swbuf_r+0x12>
 800d36a:	6983      	ldr	r3, [r0, #24]
 800d36c:	b90b      	cbnz	r3, 800d372 <__swbuf_r+0x12>
 800d36e:	f7ff fd97 	bl	800cea0 <__sinit>
 800d372:	4b21      	ldr	r3, [pc, #132]	; (800d3f8 <__swbuf_r+0x98>)
 800d374:	429c      	cmp	r4, r3
 800d376:	d12b      	bne.n	800d3d0 <__swbuf_r+0x70>
 800d378:	686c      	ldr	r4, [r5, #4]
 800d37a:	69a3      	ldr	r3, [r4, #24]
 800d37c:	60a3      	str	r3, [r4, #8]
 800d37e:	89a3      	ldrh	r3, [r4, #12]
 800d380:	071a      	lsls	r2, r3, #28
 800d382:	d52f      	bpl.n	800d3e4 <__swbuf_r+0x84>
 800d384:	6923      	ldr	r3, [r4, #16]
 800d386:	b36b      	cbz	r3, 800d3e4 <__swbuf_r+0x84>
 800d388:	6923      	ldr	r3, [r4, #16]
 800d38a:	6820      	ldr	r0, [r4, #0]
 800d38c:	1ac0      	subs	r0, r0, r3
 800d38e:	6963      	ldr	r3, [r4, #20]
 800d390:	b2f6      	uxtb	r6, r6
 800d392:	4283      	cmp	r3, r0
 800d394:	4637      	mov	r7, r6
 800d396:	dc04      	bgt.n	800d3a2 <__swbuf_r+0x42>
 800d398:	4621      	mov	r1, r4
 800d39a:	4628      	mov	r0, r5
 800d39c:	f7ff fcec 	bl	800cd78 <_fflush_r>
 800d3a0:	bb30      	cbnz	r0, 800d3f0 <__swbuf_r+0x90>
 800d3a2:	68a3      	ldr	r3, [r4, #8]
 800d3a4:	3b01      	subs	r3, #1
 800d3a6:	60a3      	str	r3, [r4, #8]
 800d3a8:	6823      	ldr	r3, [r4, #0]
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	6022      	str	r2, [r4, #0]
 800d3ae:	701e      	strb	r6, [r3, #0]
 800d3b0:	6963      	ldr	r3, [r4, #20]
 800d3b2:	3001      	adds	r0, #1
 800d3b4:	4283      	cmp	r3, r0
 800d3b6:	d004      	beq.n	800d3c2 <__swbuf_r+0x62>
 800d3b8:	89a3      	ldrh	r3, [r4, #12]
 800d3ba:	07db      	lsls	r3, r3, #31
 800d3bc:	d506      	bpl.n	800d3cc <__swbuf_r+0x6c>
 800d3be:	2e0a      	cmp	r6, #10
 800d3c0:	d104      	bne.n	800d3cc <__swbuf_r+0x6c>
 800d3c2:	4621      	mov	r1, r4
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	f7ff fcd7 	bl	800cd78 <_fflush_r>
 800d3ca:	b988      	cbnz	r0, 800d3f0 <__swbuf_r+0x90>
 800d3cc:	4638      	mov	r0, r7
 800d3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3d0:	4b0a      	ldr	r3, [pc, #40]	; (800d3fc <__swbuf_r+0x9c>)
 800d3d2:	429c      	cmp	r4, r3
 800d3d4:	d101      	bne.n	800d3da <__swbuf_r+0x7a>
 800d3d6:	68ac      	ldr	r4, [r5, #8]
 800d3d8:	e7cf      	b.n	800d37a <__swbuf_r+0x1a>
 800d3da:	4b09      	ldr	r3, [pc, #36]	; (800d400 <__swbuf_r+0xa0>)
 800d3dc:	429c      	cmp	r4, r3
 800d3de:	bf08      	it	eq
 800d3e0:	68ec      	ldreq	r4, [r5, #12]
 800d3e2:	e7ca      	b.n	800d37a <__swbuf_r+0x1a>
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	4628      	mov	r0, r5
 800d3e8:	f000 f80c 	bl	800d404 <__swsetup_r>
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	d0cb      	beq.n	800d388 <__swbuf_r+0x28>
 800d3f0:	f04f 37ff 	mov.w	r7, #4294967295
 800d3f4:	e7ea      	b.n	800d3cc <__swbuf_r+0x6c>
 800d3f6:	bf00      	nop
 800d3f8:	08010804 	.word	0x08010804
 800d3fc:	08010824 	.word	0x08010824
 800d400:	080107e4 	.word	0x080107e4

0800d404 <__swsetup_r>:
 800d404:	4b32      	ldr	r3, [pc, #200]	; (800d4d0 <__swsetup_r+0xcc>)
 800d406:	b570      	push	{r4, r5, r6, lr}
 800d408:	681d      	ldr	r5, [r3, #0]
 800d40a:	4606      	mov	r6, r0
 800d40c:	460c      	mov	r4, r1
 800d40e:	b125      	cbz	r5, 800d41a <__swsetup_r+0x16>
 800d410:	69ab      	ldr	r3, [r5, #24]
 800d412:	b913      	cbnz	r3, 800d41a <__swsetup_r+0x16>
 800d414:	4628      	mov	r0, r5
 800d416:	f7ff fd43 	bl	800cea0 <__sinit>
 800d41a:	4b2e      	ldr	r3, [pc, #184]	; (800d4d4 <__swsetup_r+0xd0>)
 800d41c:	429c      	cmp	r4, r3
 800d41e:	d10f      	bne.n	800d440 <__swsetup_r+0x3c>
 800d420:	686c      	ldr	r4, [r5, #4]
 800d422:	89a3      	ldrh	r3, [r4, #12]
 800d424:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d428:	0719      	lsls	r1, r3, #28
 800d42a:	d42c      	bmi.n	800d486 <__swsetup_r+0x82>
 800d42c:	06dd      	lsls	r5, r3, #27
 800d42e:	d411      	bmi.n	800d454 <__swsetup_r+0x50>
 800d430:	2309      	movs	r3, #9
 800d432:	6033      	str	r3, [r6, #0]
 800d434:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d438:	81a3      	strh	r3, [r4, #12]
 800d43a:	f04f 30ff 	mov.w	r0, #4294967295
 800d43e:	e03e      	b.n	800d4be <__swsetup_r+0xba>
 800d440:	4b25      	ldr	r3, [pc, #148]	; (800d4d8 <__swsetup_r+0xd4>)
 800d442:	429c      	cmp	r4, r3
 800d444:	d101      	bne.n	800d44a <__swsetup_r+0x46>
 800d446:	68ac      	ldr	r4, [r5, #8]
 800d448:	e7eb      	b.n	800d422 <__swsetup_r+0x1e>
 800d44a:	4b24      	ldr	r3, [pc, #144]	; (800d4dc <__swsetup_r+0xd8>)
 800d44c:	429c      	cmp	r4, r3
 800d44e:	bf08      	it	eq
 800d450:	68ec      	ldreq	r4, [r5, #12]
 800d452:	e7e6      	b.n	800d422 <__swsetup_r+0x1e>
 800d454:	0758      	lsls	r0, r3, #29
 800d456:	d512      	bpl.n	800d47e <__swsetup_r+0x7a>
 800d458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d45a:	b141      	cbz	r1, 800d46e <__swsetup_r+0x6a>
 800d45c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d460:	4299      	cmp	r1, r3
 800d462:	d002      	beq.n	800d46a <__swsetup_r+0x66>
 800d464:	4630      	mov	r0, r6
 800d466:	f7fe fd4f 	bl	800bf08 <_free_r>
 800d46a:	2300      	movs	r3, #0
 800d46c:	6363      	str	r3, [r4, #52]	; 0x34
 800d46e:	89a3      	ldrh	r3, [r4, #12]
 800d470:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d474:	81a3      	strh	r3, [r4, #12]
 800d476:	2300      	movs	r3, #0
 800d478:	6063      	str	r3, [r4, #4]
 800d47a:	6923      	ldr	r3, [r4, #16]
 800d47c:	6023      	str	r3, [r4, #0]
 800d47e:	89a3      	ldrh	r3, [r4, #12]
 800d480:	f043 0308 	orr.w	r3, r3, #8
 800d484:	81a3      	strh	r3, [r4, #12]
 800d486:	6923      	ldr	r3, [r4, #16]
 800d488:	b94b      	cbnz	r3, 800d49e <__swsetup_r+0x9a>
 800d48a:	89a3      	ldrh	r3, [r4, #12]
 800d48c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d494:	d003      	beq.n	800d49e <__swsetup_r+0x9a>
 800d496:	4621      	mov	r1, r4
 800d498:	4630      	mov	r0, r6
 800d49a:	f000 f84d 	bl	800d538 <__smakebuf_r>
 800d49e:	89a0      	ldrh	r0, [r4, #12]
 800d4a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4a4:	f010 0301 	ands.w	r3, r0, #1
 800d4a8:	d00a      	beq.n	800d4c0 <__swsetup_r+0xbc>
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	60a3      	str	r3, [r4, #8]
 800d4ae:	6963      	ldr	r3, [r4, #20]
 800d4b0:	425b      	negs	r3, r3
 800d4b2:	61a3      	str	r3, [r4, #24]
 800d4b4:	6923      	ldr	r3, [r4, #16]
 800d4b6:	b943      	cbnz	r3, 800d4ca <__swsetup_r+0xc6>
 800d4b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4bc:	d1ba      	bne.n	800d434 <__swsetup_r+0x30>
 800d4be:	bd70      	pop	{r4, r5, r6, pc}
 800d4c0:	0781      	lsls	r1, r0, #30
 800d4c2:	bf58      	it	pl
 800d4c4:	6963      	ldrpl	r3, [r4, #20]
 800d4c6:	60a3      	str	r3, [r4, #8]
 800d4c8:	e7f4      	b.n	800d4b4 <__swsetup_r+0xb0>
 800d4ca:	2000      	movs	r0, #0
 800d4cc:	e7f7      	b.n	800d4be <__swsetup_r+0xba>
 800d4ce:	bf00      	nop
 800d4d0:	2000001c 	.word	0x2000001c
 800d4d4:	08010804 	.word	0x08010804
 800d4d8:	08010824 	.word	0x08010824
 800d4dc:	080107e4 	.word	0x080107e4

0800d4e0 <abort>:
 800d4e0:	b508      	push	{r3, lr}
 800d4e2:	2006      	movs	r0, #6
 800d4e4:	f000 f898 	bl	800d618 <raise>
 800d4e8:	2001      	movs	r0, #1
 800d4ea:	f7f7 ffc6 	bl	800547a <_exit>

0800d4ee <__swhatbuf_r>:
 800d4ee:	b570      	push	{r4, r5, r6, lr}
 800d4f0:	460e      	mov	r6, r1
 800d4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f6:	2900      	cmp	r1, #0
 800d4f8:	b096      	sub	sp, #88	; 0x58
 800d4fa:	4614      	mov	r4, r2
 800d4fc:	461d      	mov	r5, r3
 800d4fe:	da08      	bge.n	800d512 <__swhatbuf_r+0x24>
 800d500:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d504:	2200      	movs	r2, #0
 800d506:	602a      	str	r2, [r5, #0]
 800d508:	061a      	lsls	r2, r3, #24
 800d50a:	d410      	bmi.n	800d52e <__swhatbuf_r+0x40>
 800d50c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d510:	e00e      	b.n	800d530 <__swhatbuf_r+0x42>
 800d512:	466a      	mov	r2, sp
 800d514:	f000 f89c 	bl	800d650 <_fstat_r>
 800d518:	2800      	cmp	r0, #0
 800d51a:	dbf1      	blt.n	800d500 <__swhatbuf_r+0x12>
 800d51c:	9a01      	ldr	r2, [sp, #4]
 800d51e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d522:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d526:	425a      	negs	r2, r3
 800d528:	415a      	adcs	r2, r3
 800d52a:	602a      	str	r2, [r5, #0]
 800d52c:	e7ee      	b.n	800d50c <__swhatbuf_r+0x1e>
 800d52e:	2340      	movs	r3, #64	; 0x40
 800d530:	2000      	movs	r0, #0
 800d532:	6023      	str	r3, [r4, #0]
 800d534:	b016      	add	sp, #88	; 0x58
 800d536:	bd70      	pop	{r4, r5, r6, pc}

0800d538 <__smakebuf_r>:
 800d538:	898b      	ldrh	r3, [r1, #12]
 800d53a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d53c:	079d      	lsls	r5, r3, #30
 800d53e:	4606      	mov	r6, r0
 800d540:	460c      	mov	r4, r1
 800d542:	d507      	bpl.n	800d554 <__smakebuf_r+0x1c>
 800d544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d548:	6023      	str	r3, [r4, #0]
 800d54a:	6123      	str	r3, [r4, #16]
 800d54c:	2301      	movs	r3, #1
 800d54e:	6163      	str	r3, [r4, #20]
 800d550:	b002      	add	sp, #8
 800d552:	bd70      	pop	{r4, r5, r6, pc}
 800d554:	ab01      	add	r3, sp, #4
 800d556:	466a      	mov	r2, sp
 800d558:	f7ff ffc9 	bl	800d4ee <__swhatbuf_r>
 800d55c:	9900      	ldr	r1, [sp, #0]
 800d55e:	4605      	mov	r5, r0
 800d560:	4630      	mov	r0, r6
 800d562:	f7fe fd3d 	bl	800bfe0 <_malloc_r>
 800d566:	b948      	cbnz	r0, 800d57c <__smakebuf_r+0x44>
 800d568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d56c:	059a      	lsls	r2, r3, #22
 800d56e:	d4ef      	bmi.n	800d550 <__smakebuf_r+0x18>
 800d570:	f023 0303 	bic.w	r3, r3, #3
 800d574:	f043 0302 	orr.w	r3, r3, #2
 800d578:	81a3      	strh	r3, [r4, #12]
 800d57a:	e7e3      	b.n	800d544 <__smakebuf_r+0xc>
 800d57c:	4b0d      	ldr	r3, [pc, #52]	; (800d5b4 <__smakebuf_r+0x7c>)
 800d57e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d580:	89a3      	ldrh	r3, [r4, #12]
 800d582:	6020      	str	r0, [r4, #0]
 800d584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d588:	81a3      	strh	r3, [r4, #12]
 800d58a:	9b00      	ldr	r3, [sp, #0]
 800d58c:	6163      	str	r3, [r4, #20]
 800d58e:	9b01      	ldr	r3, [sp, #4]
 800d590:	6120      	str	r0, [r4, #16]
 800d592:	b15b      	cbz	r3, 800d5ac <__smakebuf_r+0x74>
 800d594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d598:	4630      	mov	r0, r6
 800d59a:	f000 f86b 	bl	800d674 <_isatty_r>
 800d59e:	b128      	cbz	r0, 800d5ac <__smakebuf_r+0x74>
 800d5a0:	89a3      	ldrh	r3, [r4, #12]
 800d5a2:	f023 0303 	bic.w	r3, r3, #3
 800d5a6:	f043 0301 	orr.w	r3, r3, #1
 800d5aa:	81a3      	strh	r3, [r4, #12]
 800d5ac:	89a0      	ldrh	r0, [r4, #12]
 800d5ae:	4305      	orrs	r5, r0
 800d5b0:	81a5      	strh	r5, [r4, #12]
 800d5b2:	e7cd      	b.n	800d550 <__smakebuf_r+0x18>
 800d5b4:	0800ce39 	.word	0x0800ce39

0800d5b8 <_malloc_usable_size_r>:
 800d5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5bc:	1f18      	subs	r0, r3, #4
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	bfbc      	itt	lt
 800d5c2:	580b      	ldrlt	r3, [r1, r0]
 800d5c4:	18c0      	addlt	r0, r0, r3
 800d5c6:	4770      	bx	lr

0800d5c8 <_raise_r>:
 800d5c8:	291f      	cmp	r1, #31
 800d5ca:	b538      	push	{r3, r4, r5, lr}
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	460d      	mov	r5, r1
 800d5d0:	d904      	bls.n	800d5dc <_raise_r+0x14>
 800d5d2:	2316      	movs	r3, #22
 800d5d4:	6003      	str	r3, [r0, #0]
 800d5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d5de:	b112      	cbz	r2, 800d5e6 <_raise_r+0x1e>
 800d5e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5e4:	b94b      	cbnz	r3, 800d5fa <_raise_r+0x32>
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f000 f830 	bl	800d64c <_getpid_r>
 800d5ec:	462a      	mov	r2, r5
 800d5ee:	4601      	mov	r1, r0
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5f6:	f000 b817 	b.w	800d628 <_kill_r>
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d00a      	beq.n	800d614 <_raise_r+0x4c>
 800d5fe:	1c59      	adds	r1, r3, #1
 800d600:	d103      	bne.n	800d60a <_raise_r+0x42>
 800d602:	2316      	movs	r3, #22
 800d604:	6003      	str	r3, [r0, #0]
 800d606:	2001      	movs	r0, #1
 800d608:	e7e7      	b.n	800d5da <_raise_r+0x12>
 800d60a:	2400      	movs	r4, #0
 800d60c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d610:	4628      	mov	r0, r5
 800d612:	4798      	blx	r3
 800d614:	2000      	movs	r0, #0
 800d616:	e7e0      	b.n	800d5da <_raise_r+0x12>

0800d618 <raise>:
 800d618:	4b02      	ldr	r3, [pc, #8]	; (800d624 <raise+0xc>)
 800d61a:	4601      	mov	r1, r0
 800d61c:	6818      	ldr	r0, [r3, #0]
 800d61e:	f7ff bfd3 	b.w	800d5c8 <_raise_r>
 800d622:	bf00      	nop
 800d624:	2000001c 	.word	0x2000001c

0800d628 <_kill_r>:
 800d628:	b538      	push	{r3, r4, r5, lr}
 800d62a:	4d07      	ldr	r5, [pc, #28]	; (800d648 <_kill_r+0x20>)
 800d62c:	2300      	movs	r3, #0
 800d62e:	4604      	mov	r4, r0
 800d630:	4608      	mov	r0, r1
 800d632:	4611      	mov	r1, r2
 800d634:	602b      	str	r3, [r5, #0]
 800d636:	f7f7 ff10 	bl	800545a <_kill>
 800d63a:	1c43      	adds	r3, r0, #1
 800d63c:	d102      	bne.n	800d644 <_kill_r+0x1c>
 800d63e:	682b      	ldr	r3, [r5, #0]
 800d640:	b103      	cbz	r3, 800d644 <_kill_r+0x1c>
 800d642:	6023      	str	r3, [r4, #0]
 800d644:	bd38      	pop	{r3, r4, r5, pc}
 800d646:	bf00      	nop
 800d648:	20009d00 	.word	0x20009d00

0800d64c <_getpid_r>:
 800d64c:	f7f7 befd 	b.w	800544a <_getpid>

0800d650 <_fstat_r>:
 800d650:	b538      	push	{r3, r4, r5, lr}
 800d652:	4d07      	ldr	r5, [pc, #28]	; (800d670 <_fstat_r+0x20>)
 800d654:	2300      	movs	r3, #0
 800d656:	4604      	mov	r4, r0
 800d658:	4608      	mov	r0, r1
 800d65a:	4611      	mov	r1, r2
 800d65c:	602b      	str	r3, [r5, #0]
 800d65e:	f7f7 ff5b 	bl	8005518 <_fstat>
 800d662:	1c43      	adds	r3, r0, #1
 800d664:	d102      	bne.n	800d66c <_fstat_r+0x1c>
 800d666:	682b      	ldr	r3, [r5, #0]
 800d668:	b103      	cbz	r3, 800d66c <_fstat_r+0x1c>
 800d66a:	6023      	str	r3, [r4, #0]
 800d66c:	bd38      	pop	{r3, r4, r5, pc}
 800d66e:	bf00      	nop
 800d670:	20009d00 	.word	0x20009d00

0800d674 <_isatty_r>:
 800d674:	b538      	push	{r3, r4, r5, lr}
 800d676:	4d06      	ldr	r5, [pc, #24]	; (800d690 <_isatty_r+0x1c>)
 800d678:	2300      	movs	r3, #0
 800d67a:	4604      	mov	r4, r0
 800d67c:	4608      	mov	r0, r1
 800d67e:	602b      	str	r3, [r5, #0]
 800d680:	f7f7 ff5a 	bl	8005538 <_isatty>
 800d684:	1c43      	adds	r3, r0, #1
 800d686:	d102      	bne.n	800d68e <_isatty_r+0x1a>
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	b103      	cbz	r3, 800d68e <_isatty_r+0x1a>
 800d68c:	6023      	str	r3, [r4, #0]
 800d68e:	bd38      	pop	{r3, r4, r5, pc}
 800d690:	20009d00 	.word	0x20009d00
 800d694:	00000000 	.word	0x00000000

0800d698 <cos>:
 800d698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d69a:	ec53 2b10 	vmov	r2, r3, d0
 800d69e:	4826      	ldr	r0, [pc, #152]	; (800d738 <cos+0xa0>)
 800d6a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d6a4:	4281      	cmp	r1, r0
 800d6a6:	dc06      	bgt.n	800d6b6 <cos+0x1e>
 800d6a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d730 <cos+0x98>
 800d6ac:	b005      	add	sp, #20
 800d6ae:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6b2:	f001 bcf5 	b.w	800f0a0 <__kernel_cos>
 800d6b6:	4821      	ldr	r0, [pc, #132]	; (800d73c <cos+0xa4>)
 800d6b8:	4281      	cmp	r1, r0
 800d6ba:	dd09      	ble.n	800d6d0 <cos+0x38>
 800d6bc:	ee10 0a10 	vmov	r0, s0
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	f7f2 fdf9 	bl	80002b8 <__aeabi_dsub>
 800d6c6:	ec41 0b10 	vmov	d0, r0, r1
 800d6ca:	b005      	add	sp, #20
 800d6cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6d0:	4668      	mov	r0, sp
 800d6d2:	f001 fa21 	bl	800eb18 <__ieee754_rem_pio2>
 800d6d6:	f000 0003 	and.w	r0, r0, #3
 800d6da:	2801      	cmp	r0, #1
 800d6dc:	d00b      	beq.n	800d6f6 <cos+0x5e>
 800d6de:	2802      	cmp	r0, #2
 800d6e0:	d016      	beq.n	800d710 <cos+0x78>
 800d6e2:	b9e0      	cbnz	r0, 800d71e <cos+0x86>
 800d6e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6e8:	ed9d 0b00 	vldr	d0, [sp]
 800d6ec:	f001 fcd8 	bl	800f0a0 <__kernel_cos>
 800d6f0:	ec51 0b10 	vmov	r0, r1, d0
 800d6f4:	e7e7      	b.n	800d6c6 <cos+0x2e>
 800d6f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6fa:	ed9d 0b00 	vldr	d0, [sp]
 800d6fe:	f002 f8e7 	bl	800f8d0 <__kernel_sin>
 800d702:	ec53 2b10 	vmov	r2, r3, d0
 800d706:	ee10 0a10 	vmov	r0, s0
 800d70a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d70e:	e7da      	b.n	800d6c6 <cos+0x2e>
 800d710:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d714:	ed9d 0b00 	vldr	d0, [sp]
 800d718:	f001 fcc2 	bl	800f0a0 <__kernel_cos>
 800d71c:	e7f1      	b.n	800d702 <cos+0x6a>
 800d71e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d722:	ed9d 0b00 	vldr	d0, [sp]
 800d726:	2001      	movs	r0, #1
 800d728:	f002 f8d2 	bl	800f8d0 <__kernel_sin>
 800d72c:	e7e0      	b.n	800d6f0 <cos+0x58>
 800d72e:	bf00      	nop
	...
 800d738:	3fe921fb 	.word	0x3fe921fb
 800d73c:	7fefffff 	.word	0x7fefffff

0800d740 <round>:
 800d740:	ec51 0b10 	vmov	r0, r1, d0
 800d744:	b570      	push	{r4, r5, r6, lr}
 800d746:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d74a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d74e:	2c13      	cmp	r4, #19
 800d750:	ee10 2a10 	vmov	r2, s0
 800d754:	460b      	mov	r3, r1
 800d756:	dc19      	bgt.n	800d78c <round+0x4c>
 800d758:	2c00      	cmp	r4, #0
 800d75a:	da09      	bge.n	800d770 <round+0x30>
 800d75c:	3401      	adds	r4, #1
 800d75e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d762:	d103      	bne.n	800d76c <round+0x2c>
 800d764:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d768:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d76c:	2200      	movs	r2, #0
 800d76e:	e028      	b.n	800d7c2 <round+0x82>
 800d770:	4d15      	ldr	r5, [pc, #84]	; (800d7c8 <round+0x88>)
 800d772:	4125      	asrs	r5, r4
 800d774:	ea01 0605 	and.w	r6, r1, r5
 800d778:	4332      	orrs	r2, r6
 800d77a:	d00e      	beq.n	800d79a <round+0x5a>
 800d77c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d780:	fa42 f404 	asr.w	r4, r2, r4
 800d784:	4423      	add	r3, r4
 800d786:	ea23 0305 	bic.w	r3, r3, r5
 800d78a:	e7ef      	b.n	800d76c <round+0x2c>
 800d78c:	2c33      	cmp	r4, #51	; 0x33
 800d78e:	dd07      	ble.n	800d7a0 <round+0x60>
 800d790:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d794:	d101      	bne.n	800d79a <round+0x5a>
 800d796:	f7f2 fd91 	bl	80002bc <__adddf3>
 800d79a:	ec41 0b10 	vmov	d0, r0, r1
 800d79e:	bd70      	pop	{r4, r5, r6, pc}
 800d7a0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d7a4:	f04f 35ff 	mov.w	r5, #4294967295
 800d7a8:	40f5      	lsrs	r5, r6
 800d7aa:	4228      	tst	r0, r5
 800d7ac:	d0f5      	beq.n	800d79a <round+0x5a>
 800d7ae:	2101      	movs	r1, #1
 800d7b0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d7b4:	fa01 f404 	lsl.w	r4, r1, r4
 800d7b8:	1912      	adds	r2, r2, r4
 800d7ba:	bf28      	it	cs
 800d7bc:	185b      	addcs	r3, r3, r1
 800d7be:	ea22 0205 	bic.w	r2, r2, r5
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	4610      	mov	r0, r2
 800d7c6:	e7e8      	b.n	800d79a <round+0x5a>
 800d7c8:	000fffff 	.word	0x000fffff
 800d7cc:	00000000 	.word	0x00000000

0800d7d0 <sin>:
 800d7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7d2:	ec53 2b10 	vmov	r2, r3, d0
 800d7d6:	4828      	ldr	r0, [pc, #160]	; (800d878 <sin+0xa8>)
 800d7d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d7dc:	4281      	cmp	r1, r0
 800d7de:	dc07      	bgt.n	800d7f0 <sin+0x20>
 800d7e0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d870 <sin+0xa0>
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	b005      	add	sp, #20
 800d7e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7ec:	f002 b870 	b.w	800f8d0 <__kernel_sin>
 800d7f0:	4822      	ldr	r0, [pc, #136]	; (800d87c <sin+0xac>)
 800d7f2:	4281      	cmp	r1, r0
 800d7f4:	dd09      	ble.n	800d80a <sin+0x3a>
 800d7f6:	ee10 0a10 	vmov	r0, s0
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	f7f2 fd5c 	bl	80002b8 <__aeabi_dsub>
 800d800:	ec41 0b10 	vmov	d0, r0, r1
 800d804:	b005      	add	sp, #20
 800d806:	f85d fb04 	ldr.w	pc, [sp], #4
 800d80a:	4668      	mov	r0, sp
 800d80c:	f001 f984 	bl	800eb18 <__ieee754_rem_pio2>
 800d810:	f000 0003 	and.w	r0, r0, #3
 800d814:	2801      	cmp	r0, #1
 800d816:	d00c      	beq.n	800d832 <sin+0x62>
 800d818:	2802      	cmp	r0, #2
 800d81a:	d011      	beq.n	800d840 <sin+0x70>
 800d81c:	b9f0      	cbnz	r0, 800d85c <sin+0x8c>
 800d81e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d822:	ed9d 0b00 	vldr	d0, [sp]
 800d826:	2001      	movs	r0, #1
 800d828:	f002 f852 	bl	800f8d0 <__kernel_sin>
 800d82c:	ec51 0b10 	vmov	r0, r1, d0
 800d830:	e7e6      	b.n	800d800 <sin+0x30>
 800d832:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d836:	ed9d 0b00 	vldr	d0, [sp]
 800d83a:	f001 fc31 	bl	800f0a0 <__kernel_cos>
 800d83e:	e7f5      	b.n	800d82c <sin+0x5c>
 800d840:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d844:	ed9d 0b00 	vldr	d0, [sp]
 800d848:	2001      	movs	r0, #1
 800d84a:	f002 f841 	bl	800f8d0 <__kernel_sin>
 800d84e:	ec53 2b10 	vmov	r2, r3, d0
 800d852:	ee10 0a10 	vmov	r0, s0
 800d856:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d85a:	e7d1      	b.n	800d800 <sin+0x30>
 800d85c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d860:	ed9d 0b00 	vldr	d0, [sp]
 800d864:	f001 fc1c 	bl	800f0a0 <__kernel_cos>
 800d868:	e7f1      	b.n	800d84e <sin+0x7e>
 800d86a:	bf00      	nop
 800d86c:	f3af 8000 	nop.w
	...
 800d878:	3fe921fb 	.word	0x3fe921fb
 800d87c:	7fefffff 	.word	0x7fefffff

0800d880 <acos>:
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	ed2d 8b02 	vpush	{d8}
 800d886:	ec55 4b10 	vmov	r4, r5, d0
 800d88a:	f000 f8e9 	bl	800da60 <__ieee754_acos>
 800d88e:	4622      	mov	r2, r4
 800d890:	462b      	mov	r3, r5
 800d892:	4620      	mov	r0, r4
 800d894:	4629      	mov	r1, r5
 800d896:	eeb0 8a40 	vmov.f32	s16, s0
 800d89a:	eef0 8a60 	vmov.f32	s17, s1
 800d89e:	f7f3 f95d 	bl	8000b5c <__aeabi_dcmpun>
 800d8a2:	b9a8      	cbnz	r0, 800d8d0 <acos+0x50>
 800d8a4:	ec45 4b10 	vmov	d0, r4, r5
 800d8a8:	f002 faa2 	bl	800fdf0 <fabs>
 800d8ac:	4b0c      	ldr	r3, [pc, #48]	; (800d8e0 <acos+0x60>)
 800d8ae:	ec51 0b10 	vmov	r0, r1, d0
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f7f3 f948 	bl	8000b48 <__aeabi_dcmpgt>
 800d8b8:	b150      	cbz	r0, 800d8d0 <acos+0x50>
 800d8ba:	f7fa fdfd 	bl	80084b8 <__errno>
 800d8be:	ecbd 8b02 	vpop	{d8}
 800d8c2:	2321      	movs	r3, #33	; 0x21
 800d8c4:	6003      	str	r3, [r0, #0]
 800d8c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8ca:	4806      	ldr	r0, [pc, #24]	; (800d8e4 <acos+0x64>)
 800d8cc:	f7ff b890 	b.w	800c9f0 <nan>
 800d8d0:	eeb0 0a48 	vmov.f32	s0, s16
 800d8d4:	eef0 0a68 	vmov.f32	s1, s17
 800d8d8:	ecbd 8b02 	vpop	{d8}
 800d8dc:	bd38      	pop	{r3, r4, r5, pc}
 800d8de:	bf00      	nop
 800d8e0:	3ff00000 	.word	0x3ff00000
 800d8e4:	080107e3 	.word	0x080107e3

0800d8e8 <atan2>:
 800d8e8:	f000 bb1a 	b.w	800df20 <__ieee754_atan2>

0800d8ec <pow>:
 800d8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ee:	ed2d 8b02 	vpush	{d8}
 800d8f2:	eeb0 8a40 	vmov.f32	s16, s0
 800d8f6:	eef0 8a60 	vmov.f32	s17, s1
 800d8fa:	ec55 4b11 	vmov	r4, r5, d1
 800d8fe:	f000 fbdb 	bl	800e0b8 <__ieee754_pow>
 800d902:	4622      	mov	r2, r4
 800d904:	462b      	mov	r3, r5
 800d906:	4620      	mov	r0, r4
 800d908:	4629      	mov	r1, r5
 800d90a:	ec57 6b10 	vmov	r6, r7, d0
 800d90e:	f7f3 f925 	bl	8000b5c <__aeabi_dcmpun>
 800d912:	2800      	cmp	r0, #0
 800d914:	d13b      	bne.n	800d98e <pow+0xa2>
 800d916:	ec51 0b18 	vmov	r0, r1, d8
 800d91a:	2200      	movs	r2, #0
 800d91c:	2300      	movs	r3, #0
 800d91e:	f7f3 f8eb 	bl	8000af8 <__aeabi_dcmpeq>
 800d922:	b1b8      	cbz	r0, 800d954 <pow+0x68>
 800d924:	2200      	movs	r2, #0
 800d926:	2300      	movs	r3, #0
 800d928:	4620      	mov	r0, r4
 800d92a:	4629      	mov	r1, r5
 800d92c:	f7f3 f8e4 	bl	8000af8 <__aeabi_dcmpeq>
 800d930:	2800      	cmp	r0, #0
 800d932:	d146      	bne.n	800d9c2 <pow+0xd6>
 800d934:	ec45 4b10 	vmov	d0, r4, r5
 800d938:	f002 fa63 	bl	800fe02 <finite>
 800d93c:	b338      	cbz	r0, 800d98e <pow+0xa2>
 800d93e:	2200      	movs	r2, #0
 800d940:	2300      	movs	r3, #0
 800d942:	4620      	mov	r0, r4
 800d944:	4629      	mov	r1, r5
 800d946:	f7f3 f8e1 	bl	8000b0c <__aeabi_dcmplt>
 800d94a:	b300      	cbz	r0, 800d98e <pow+0xa2>
 800d94c:	f7fa fdb4 	bl	80084b8 <__errno>
 800d950:	2322      	movs	r3, #34	; 0x22
 800d952:	e01b      	b.n	800d98c <pow+0xa0>
 800d954:	ec47 6b10 	vmov	d0, r6, r7
 800d958:	f002 fa53 	bl	800fe02 <finite>
 800d95c:	b9e0      	cbnz	r0, 800d998 <pow+0xac>
 800d95e:	eeb0 0a48 	vmov.f32	s0, s16
 800d962:	eef0 0a68 	vmov.f32	s1, s17
 800d966:	f002 fa4c 	bl	800fe02 <finite>
 800d96a:	b1a8      	cbz	r0, 800d998 <pow+0xac>
 800d96c:	ec45 4b10 	vmov	d0, r4, r5
 800d970:	f002 fa47 	bl	800fe02 <finite>
 800d974:	b180      	cbz	r0, 800d998 <pow+0xac>
 800d976:	4632      	mov	r2, r6
 800d978:	463b      	mov	r3, r7
 800d97a:	4630      	mov	r0, r6
 800d97c:	4639      	mov	r1, r7
 800d97e:	f7f3 f8ed 	bl	8000b5c <__aeabi_dcmpun>
 800d982:	2800      	cmp	r0, #0
 800d984:	d0e2      	beq.n	800d94c <pow+0x60>
 800d986:	f7fa fd97 	bl	80084b8 <__errno>
 800d98a:	2321      	movs	r3, #33	; 0x21
 800d98c:	6003      	str	r3, [r0, #0]
 800d98e:	ecbd 8b02 	vpop	{d8}
 800d992:	ec47 6b10 	vmov	d0, r6, r7
 800d996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d998:	2200      	movs	r2, #0
 800d99a:	2300      	movs	r3, #0
 800d99c:	4630      	mov	r0, r6
 800d99e:	4639      	mov	r1, r7
 800d9a0:	f7f3 f8aa 	bl	8000af8 <__aeabi_dcmpeq>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	d0f2      	beq.n	800d98e <pow+0xa2>
 800d9a8:	eeb0 0a48 	vmov.f32	s0, s16
 800d9ac:	eef0 0a68 	vmov.f32	s1, s17
 800d9b0:	f002 fa27 	bl	800fe02 <finite>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d0ea      	beq.n	800d98e <pow+0xa2>
 800d9b8:	ec45 4b10 	vmov	d0, r4, r5
 800d9bc:	f002 fa21 	bl	800fe02 <finite>
 800d9c0:	e7c3      	b.n	800d94a <pow+0x5e>
 800d9c2:	4f01      	ldr	r7, [pc, #4]	; (800d9c8 <pow+0xdc>)
 800d9c4:	2600      	movs	r6, #0
 800d9c6:	e7e2      	b.n	800d98e <pow+0xa2>
 800d9c8:	3ff00000 	.word	0x3ff00000

0800d9cc <sqrt>:
 800d9cc:	b538      	push	{r3, r4, r5, lr}
 800d9ce:	ed2d 8b02 	vpush	{d8}
 800d9d2:	ec55 4b10 	vmov	r4, r5, d0
 800d9d6:	f001 faab 	bl	800ef30 <__ieee754_sqrt>
 800d9da:	4622      	mov	r2, r4
 800d9dc:	462b      	mov	r3, r5
 800d9de:	4620      	mov	r0, r4
 800d9e0:	4629      	mov	r1, r5
 800d9e2:	eeb0 8a40 	vmov.f32	s16, s0
 800d9e6:	eef0 8a60 	vmov.f32	s17, s1
 800d9ea:	f7f3 f8b7 	bl	8000b5c <__aeabi_dcmpun>
 800d9ee:	b990      	cbnz	r0, 800da16 <sqrt+0x4a>
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	4629      	mov	r1, r5
 800d9f8:	f7f3 f888 	bl	8000b0c <__aeabi_dcmplt>
 800d9fc:	b158      	cbz	r0, 800da16 <sqrt+0x4a>
 800d9fe:	f7fa fd5b 	bl	80084b8 <__errno>
 800da02:	2321      	movs	r3, #33	; 0x21
 800da04:	6003      	str	r3, [r0, #0]
 800da06:	2200      	movs	r2, #0
 800da08:	2300      	movs	r3, #0
 800da0a:	4610      	mov	r0, r2
 800da0c:	4619      	mov	r1, r3
 800da0e:	f7f2 ff35 	bl	800087c <__aeabi_ddiv>
 800da12:	ec41 0b18 	vmov	d8, r0, r1
 800da16:	eeb0 0a48 	vmov.f32	s0, s16
 800da1a:	eef0 0a68 	vmov.f32	s1, s17
 800da1e:	ecbd 8b02 	vpop	{d8}
 800da22:	bd38      	pop	{r3, r4, r5, pc}

0800da24 <sqrtf>:
 800da24:	b508      	push	{r3, lr}
 800da26:	ed2d 8b02 	vpush	{d8}
 800da2a:	eeb0 8a40 	vmov.f32	s16, s0
 800da2e:	f001 fb31 	bl	800f094 <__ieee754_sqrtf>
 800da32:	eeb4 8a48 	vcmp.f32	s16, s16
 800da36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da3a:	d60c      	bvs.n	800da56 <sqrtf+0x32>
 800da3c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800da5c <sqrtf+0x38>
 800da40:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800da44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da48:	d505      	bpl.n	800da56 <sqrtf+0x32>
 800da4a:	f7fa fd35 	bl	80084b8 <__errno>
 800da4e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800da52:	2321      	movs	r3, #33	; 0x21
 800da54:	6003      	str	r3, [r0, #0]
 800da56:	ecbd 8b02 	vpop	{d8}
 800da5a:	bd08      	pop	{r3, pc}
 800da5c:	00000000 	.word	0x00000000

0800da60 <__ieee754_acos>:
 800da60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da64:	ec55 4b10 	vmov	r4, r5, d0
 800da68:	49b7      	ldr	r1, [pc, #732]	; (800dd48 <__ieee754_acos+0x2e8>)
 800da6a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800da6e:	428b      	cmp	r3, r1
 800da70:	dd1b      	ble.n	800daaa <__ieee754_acos+0x4a>
 800da72:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800da76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800da7a:	4323      	orrs	r3, r4
 800da7c:	d106      	bne.n	800da8c <__ieee754_acos+0x2c>
 800da7e:	2d00      	cmp	r5, #0
 800da80:	f300 8211 	bgt.w	800dea6 <__ieee754_acos+0x446>
 800da84:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800dce0 <__ieee754_acos+0x280>
 800da88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da8c:	ee10 2a10 	vmov	r2, s0
 800da90:	462b      	mov	r3, r5
 800da92:	ee10 0a10 	vmov	r0, s0
 800da96:	4629      	mov	r1, r5
 800da98:	f7f2 fc0e 	bl	80002b8 <__aeabi_dsub>
 800da9c:	4602      	mov	r2, r0
 800da9e:	460b      	mov	r3, r1
 800daa0:	f7f2 feec 	bl	800087c <__aeabi_ddiv>
 800daa4:	ec41 0b10 	vmov	d0, r0, r1
 800daa8:	e7ee      	b.n	800da88 <__ieee754_acos+0x28>
 800daaa:	49a8      	ldr	r1, [pc, #672]	; (800dd4c <__ieee754_acos+0x2ec>)
 800daac:	428b      	cmp	r3, r1
 800daae:	f300 8087 	bgt.w	800dbc0 <__ieee754_acos+0x160>
 800dab2:	4aa7      	ldr	r2, [pc, #668]	; (800dd50 <__ieee754_acos+0x2f0>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	f340 81f9 	ble.w	800deac <__ieee754_acos+0x44c>
 800daba:	ee10 2a10 	vmov	r2, s0
 800dabe:	ee10 0a10 	vmov	r0, s0
 800dac2:	462b      	mov	r3, r5
 800dac4:	4629      	mov	r1, r5
 800dac6:	f7f2 fdaf 	bl	8000628 <__aeabi_dmul>
 800daca:	a387      	add	r3, pc, #540	; (adr r3, 800dce8 <__ieee754_acos+0x288>)
 800dacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad0:	4606      	mov	r6, r0
 800dad2:	460f      	mov	r7, r1
 800dad4:	f7f2 fda8 	bl	8000628 <__aeabi_dmul>
 800dad8:	a385      	add	r3, pc, #532	; (adr r3, 800dcf0 <__ieee754_acos+0x290>)
 800dada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dade:	f7f2 fbed 	bl	80002bc <__adddf3>
 800dae2:	4632      	mov	r2, r6
 800dae4:	463b      	mov	r3, r7
 800dae6:	f7f2 fd9f 	bl	8000628 <__aeabi_dmul>
 800daea:	a383      	add	r3, pc, #524	; (adr r3, 800dcf8 <__ieee754_acos+0x298>)
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	f7f2 fbe2 	bl	80002b8 <__aeabi_dsub>
 800daf4:	4632      	mov	r2, r6
 800daf6:	463b      	mov	r3, r7
 800daf8:	f7f2 fd96 	bl	8000628 <__aeabi_dmul>
 800dafc:	a380      	add	r3, pc, #512	; (adr r3, 800dd00 <__ieee754_acos+0x2a0>)
 800dafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db02:	f7f2 fbdb 	bl	80002bc <__adddf3>
 800db06:	4632      	mov	r2, r6
 800db08:	463b      	mov	r3, r7
 800db0a:	f7f2 fd8d 	bl	8000628 <__aeabi_dmul>
 800db0e:	a37e      	add	r3, pc, #504	; (adr r3, 800dd08 <__ieee754_acos+0x2a8>)
 800db10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db14:	f7f2 fbd0 	bl	80002b8 <__aeabi_dsub>
 800db18:	4632      	mov	r2, r6
 800db1a:	463b      	mov	r3, r7
 800db1c:	f7f2 fd84 	bl	8000628 <__aeabi_dmul>
 800db20:	a37b      	add	r3, pc, #492	; (adr r3, 800dd10 <__ieee754_acos+0x2b0>)
 800db22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db26:	f7f2 fbc9 	bl	80002bc <__adddf3>
 800db2a:	4632      	mov	r2, r6
 800db2c:	463b      	mov	r3, r7
 800db2e:	f7f2 fd7b 	bl	8000628 <__aeabi_dmul>
 800db32:	a379      	add	r3, pc, #484	; (adr r3, 800dd18 <__ieee754_acos+0x2b8>)
 800db34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db38:	4680      	mov	r8, r0
 800db3a:	4689      	mov	r9, r1
 800db3c:	4630      	mov	r0, r6
 800db3e:	4639      	mov	r1, r7
 800db40:	f7f2 fd72 	bl	8000628 <__aeabi_dmul>
 800db44:	a376      	add	r3, pc, #472	; (adr r3, 800dd20 <__ieee754_acos+0x2c0>)
 800db46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4a:	f7f2 fbb5 	bl	80002b8 <__aeabi_dsub>
 800db4e:	4632      	mov	r2, r6
 800db50:	463b      	mov	r3, r7
 800db52:	f7f2 fd69 	bl	8000628 <__aeabi_dmul>
 800db56:	a374      	add	r3, pc, #464	; (adr r3, 800dd28 <__ieee754_acos+0x2c8>)
 800db58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5c:	f7f2 fbae 	bl	80002bc <__adddf3>
 800db60:	4632      	mov	r2, r6
 800db62:	463b      	mov	r3, r7
 800db64:	f7f2 fd60 	bl	8000628 <__aeabi_dmul>
 800db68:	a371      	add	r3, pc, #452	; (adr r3, 800dd30 <__ieee754_acos+0x2d0>)
 800db6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6e:	f7f2 fba3 	bl	80002b8 <__aeabi_dsub>
 800db72:	4632      	mov	r2, r6
 800db74:	463b      	mov	r3, r7
 800db76:	f7f2 fd57 	bl	8000628 <__aeabi_dmul>
 800db7a:	4b76      	ldr	r3, [pc, #472]	; (800dd54 <__ieee754_acos+0x2f4>)
 800db7c:	2200      	movs	r2, #0
 800db7e:	f7f2 fb9d 	bl	80002bc <__adddf3>
 800db82:	4602      	mov	r2, r0
 800db84:	460b      	mov	r3, r1
 800db86:	4640      	mov	r0, r8
 800db88:	4649      	mov	r1, r9
 800db8a:	f7f2 fe77 	bl	800087c <__aeabi_ddiv>
 800db8e:	4622      	mov	r2, r4
 800db90:	462b      	mov	r3, r5
 800db92:	f7f2 fd49 	bl	8000628 <__aeabi_dmul>
 800db96:	4602      	mov	r2, r0
 800db98:	460b      	mov	r3, r1
 800db9a:	a167      	add	r1, pc, #412	; (adr r1, 800dd38 <__ieee754_acos+0x2d8>)
 800db9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dba0:	f7f2 fb8a 	bl	80002b8 <__aeabi_dsub>
 800dba4:	4602      	mov	r2, r0
 800dba6:	460b      	mov	r3, r1
 800dba8:	4620      	mov	r0, r4
 800dbaa:	4629      	mov	r1, r5
 800dbac:	f7f2 fb84 	bl	80002b8 <__aeabi_dsub>
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	a162      	add	r1, pc, #392	; (adr r1, 800dd40 <__ieee754_acos+0x2e0>)
 800dbb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbba:	f7f2 fb7d 	bl	80002b8 <__aeabi_dsub>
 800dbbe:	e771      	b.n	800daa4 <__ieee754_acos+0x44>
 800dbc0:	2d00      	cmp	r5, #0
 800dbc2:	f280 80cb 	bge.w	800dd5c <__ieee754_acos+0x2fc>
 800dbc6:	ee10 0a10 	vmov	r0, s0
 800dbca:	4b62      	ldr	r3, [pc, #392]	; (800dd54 <__ieee754_acos+0x2f4>)
 800dbcc:	2200      	movs	r2, #0
 800dbce:	4629      	mov	r1, r5
 800dbd0:	f7f2 fb74 	bl	80002bc <__adddf3>
 800dbd4:	4b60      	ldr	r3, [pc, #384]	; (800dd58 <__ieee754_acos+0x2f8>)
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f7f2 fd26 	bl	8000628 <__aeabi_dmul>
 800dbdc:	a342      	add	r3, pc, #264	; (adr r3, 800dce8 <__ieee754_acos+0x288>)
 800dbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	460d      	mov	r5, r1
 800dbe6:	f7f2 fd1f 	bl	8000628 <__aeabi_dmul>
 800dbea:	a341      	add	r3, pc, #260	; (adr r3, 800dcf0 <__ieee754_acos+0x290>)
 800dbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf0:	f7f2 fb64 	bl	80002bc <__adddf3>
 800dbf4:	4622      	mov	r2, r4
 800dbf6:	462b      	mov	r3, r5
 800dbf8:	f7f2 fd16 	bl	8000628 <__aeabi_dmul>
 800dbfc:	a33e      	add	r3, pc, #248	; (adr r3, 800dcf8 <__ieee754_acos+0x298>)
 800dbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc02:	f7f2 fb59 	bl	80002b8 <__aeabi_dsub>
 800dc06:	4622      	mov	r2, r4
 800dc08:	462b      	mov	r3, r5
 800dc0a:	f7f2 fd0d 	bl	8000628 <__aeabi_dmul>
 800dc0e:	a33c      	add	r3, pc, #240	; (adr r3, 800dd00 <__ieee754_acos+0x2a0>)
 800dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc14:	f7f2 fb52 	bl	80002bc <__adddf3>
 800dc18:	4622      	mov	r2, r4
 800dc1a:	462b      	mov	r3, r5
 800dc1c:	f7f2 fd04 	bl	8000628 <__aeabi_dmul>
 800dc20:	a339      	add	r3, pc, #228	; (adr r3, 800dd08 <__ieee754_acos+0x2a8>)
 800dc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc26:	f7f2 fb47 	bl	80002b8 <__aeabi_dsub>
 800dc2a:	4622      	mov	r2, r4
 800dc2c:	462b      	mov	r3, r5
 800dc2e:	f7f2 fcfb 	bl	8000628 <__aeabi_dmul>
 800dc32:	a337      	add	r3, pc, #220	; (adr r3, 800dd10 <__ieee754_acos+0x2b0>)
 800dc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc38:	f7f2 fb40 	bl	80002bc <__adddf3>
 800dc3c:	4622      	mov	r2, r4
 800dc3e:	462b      	mov	r3, r5
 800dc40:	f7f2 fcf2 	bl	8000628 <__aeabi_dmul>
 800dc44:	ec45 4b10 	vmov	d0, r4, r5
 800dc48:	4680      	mov	r8, r0
 800dc4a:	4689      	mov	r9, r1
 800dc4c:	f001 f970 	bl	800ef30 <__ieee754_sqrt>
 800dc50:	a331      	add	r3, pc, #196	; (adr r3, 800dd18 <__ieee754_acos+0x2b8>)
 800dc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc56:	4620      	mov	r0, r4
 800dc58:	4629      	mov	r1, r5
 800dc5a:	ec57 6b10 	vmov	r6, r7, d0
 800dc5e:	f7f2 fce3 	bl	8000628 <__aeabi_dmul>
 800dc62:	a32f      	add	r3, pc, #188	; (adr r3, 800dd20 <__ieee754_acos+0x2c0>)
 800dc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc68:	f7f2 fb26 	bl	80002b8 <__aeabi_dsub>
 800dc6c:	4622      	mov	r2, r4
 800dc6e:	462b      	mov	r3, r5
 800dc70:	f7f2 fcda 	bl	8000628 <__aeabi_dmul>
 800dc74:	a32c      	add	r3, pc, #176	; (adr r3, 800dd28 <__ieee754_acos+0x2c8>)
 800dc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7a:	f7f2 fb1f 	bl	80002bc <__adddf3>
 800dc7e:	4622      	mov	r2, r4
 800dc80:	462b      	mov	r3, r5
 800dc82:	f7f2 fcd1 	bl	8000628 <__aeabi_dmul>
 800dc86:	a32a      	add	r3, pc, #168	; (adr r3, 800dd30 <__ieee754_acos+0x2d0>)
 800dc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8c:	f7f2 fb14 	bl	80002b8 <__aeabi_dsub>
 800dc90:	4622      	mov	r2, r4
 800dc92:	462b      	mov	r3, r5
 800dc94:	f7f2 fcc8 	bl	8000628 <__aeabi_dmul>
 800dc98:	4b2e      	ldr	r3, [pc, #184]	; (800dd54 <__ieee754_acos+0x2f4>)
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f7f2 fb0e 	bl	80002bc <__adddf3>
 800dca0:	4602      	mov	r2, r0
 800dca2:	460b      	mov	r3, r1
 800dca4:	4640      	mov	r0, r8
 800dca6:	4649      	mov	r1, r9
 800dca8:	f7f2 fde8 	bl	800087c <__aeabi_ddiv>
 800dcac:	4632      	mov	r2, r6
 800dcae:	463b      	mov	r3, r7
 800dcb0:	f7f2 fcba 	bl	8000628 <__aeabi_dmul>
 800dcb4:	a320      	add	r3, pc, #128	; (adr r3, 800dd38 <__ieee754_acos+0x2d8>)
 800dcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcba:	f7f2 fafd 	bl	80002b8 <__aeabi_dsub>
 800dcbe:	4632      	mov	r2, r6
 800dcc0:	463b      	mov	r3, r7
 800dcc2:	f7f2 fafb 	bl	80002bc <__adddf3>
 800dcc6:	4602      	mov	r2, r0
 800dcc8:	460b      	mov	r3, r1
 800dcca:	f7f2 faf7 	bl	80002bc <__adddf3>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	a103      	add	r1, pc, #12	; (adr r1, 800dce0 <__ieee754_acos+0x280>)
 800dcd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcd8:	e76f      	b.n	800dbba <__ieee754_acos+0x15a>
 800dcda:	bf00      	nop
 800dcdc:	f3af 8000 	nop.w
 800dce0:	54442d18 	.word	0x54442d18
 800dce4:	400921fb 	.word	0x400921fb
 800dce8:	0dfdf709 	.word	0x0dfdf709
 800dcec:	3f023de1 	.word	0x3f023de1
 800dcf0:	7501b288 	.word	0x7501b288
 800dcf4:	3f49efe0 	.word	0x3f49efe0
 800dcf8:	b5688f3b 	.word	0xb5688f3b
 800dcfc:	3fa48228 	.word	0x3fa48228
 800dd00:	0e884455 	.word	0x0e884455
 800dd04:	3fc9c155 	.word	0x3fc9c155
 800dd08:	03eb6f7d 	.word	0x03eb6f7d
 800dd0c:	3fd4d612 	.word	0x3fd4d612
 800dd10:	55555555 	.word	0x55555555
 800dd14:	3fc55555 	.word	0x3fc55555
 800dd18:	b12e9282 	.word	0xb12e9282
 800dd1c:	3fb3b8c5 	.word	0x3fb3b8c5
 800dd20:	1b8d0159 	.word	0x1b8d0159
 800dd24:	3fe6066c 	.word	0x3fe6066c
 800dd28:	9c598ac8 	.word	0x9c598ac8
 800dd2c:	40002ae5 	.word	0x40002ae5
 800dd30:	1c8a2d4b 	.word	0x1c8a2d4b
 800dd34:	40033a27 	.word	0x40033a27
 800dd38:	33145c07 	.word	0x33145c07
 800dd3c:	3c91a626 	.word	0x3c91a626
 800dd40:	54442d18 	.word	0x54442d18
 800dd44:	3ff921fb 	.word	0x3ff921fb
 800dd48:	3fefffff 	.word	0x3fefffff
 800dd4c:	3fdfffff 	.word	0x3fdfffff
 800dd50:	3c600000 	.word	0x3c600000
 800dd54:	3ff00000 	.word	0x3ff00000
 800dd58:	3fe00000 	.word	0x3fe00000
 800dd5c:	ee10 2a10 	vmov	r2, s0
 800dd60:	462b      	mov	r3, r5
 800dd62:	496d      	ldr	r1, [pc, #436]	; (800df18 <__ieee754_acos+0x4b8>)
 800dd64:	2000      	movs	r0, #0
 800dd66:	f7f2 faa7 	bl	80002b8 <__aeabi_dsub>
 800dd6a:	4b6c      	ldr	r3, [pc, #432]	; (800df1c <__ieee754_acos+0x4bc>)
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f7f2 fc5b 	bl	8000628 <__aeabi_dmul>
 800dd72:	4604      	mov	r4, r0
 800dd74:	460d      	mov	r5, r1
 800dd76:	ec45 4b10 	vmov	d0, r4, r5
 800dd7a:	f001 f8d9 	bl	800ef30 <__ieee754_sqrt>
 800dd7e:	a34e      	add	r3, pc, #312	; (adr r3, 800deb8 <__ieee754_acos+0x458>)
 800dd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd84:	4620      	mov	r0, r4
 800dd86:	4629      	mov	r1, r5
 800dd88:	ec59 8b10 	vmov	r8, r9, d0
 800dd8c:	f7f2 fc4c 	bl	8000628 <__aeabi_dmul>
 800dd90:	a34b      	add	r3, pc, #300	; (adr r3, 800dec0 <__ieee754_acos+0x460>)
 800dd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd96:	f7f2 fa91 	bl	80002bc <__adddf3>
 800dd9a:	4622      	mov	r2, r4
 800dd9c:	462b      	mov	r3, r5
 800dd9e:	f7f2 fc43 	bl	8000628 <__aeabi_dmul>
 800dda2:	a349      	add	r3, pc, #292	; (adr r3, 800dec8 <__ieee754_acos+0x468>)
 800dda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda8:	f7f2 fa86 	bl	80002b8 <__aeabi_dsub>
 800ddac:	4622      	mov	r2, r4
 800ddae:	462b      	mov	r3, r5
 800ddb0:	f7f2 fc3a 	bl	8000628 <__aeabi_dmul>
 800ddb4:	a346      	add	r3, pc, #280	; (adr r3, 800ded0 <__ieee754_acos+0x470>)
 800ddb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddba:	f7f2 fa7f 	bl	80002bc <__adddf3>
 800ddbe:	4622      	mov	r2, r4
 800ddc0:	462b      	mov	r3, r5
 800ddc2:	f7f2 fc31 	bl	8000628 <__aeabi_dmul>
 800ddc6:	a344      	add	r3, pc, #272	; (adr r3, 800ded8 <__ieee754_acos+0x478>)
 800ddc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddcc:	f7f2 fa74 	bl	80002b8 <__aeabi_dsub>
 800ddd0:	4622      	mov	r2, r4
 800ddd2:	462b      	mov	r3, r5
 800ddd4:	f7f2 fc28 	bl	8000628 <__aeabi_dmul>
 800ddd8:	a341      	add	r3, pc, #260	; (adr r3, 800dee0 <__ieee754_acos+0x480>)
 800ddda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddde:	f7f2 fa6d 	bl	80002bc <__adddf3>
 800dde2:	4622      	mov	r2, r4
 800dde4:	462b      	mov	r3, r5
 800dde6:	f7f2 fc1f 	bl	8000628 <__aeabi_dmul>
 800ddea:	a33f      	add	r3, pc, #252	; (adr r3, 800dee8 <__ieee754_acos+0x488>)
 800ddec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf0:	4682      	mov	sl, r0
 800ddf2:	468b      	mov	fp, r1
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	4629      	mov	r1, r5
 800ddf8:	f7f2 fc16 	bl	8000628 <__aeabi_dmul>
 800ddfc:	a33c      	add	r3, pc, #240	; (adr r3, 800def0 <__ieee754_acos+0x490>)
 800ddfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de02:	f7f2 fa59 	bl	80002b8 <__aeabi_dsub>
 800de06:	4622      	mov	r2, r4
 800de08:	462b      	mov	r3, r5
 800de0a:	f7f2 fc0d 	bl	8000628 <__aeabi_dmul>
 800de0e:	a33a      	add	r3, pc, #232	; (adr r3, 800def8 <__ieee754_acos+0x498>)
 800de10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de14:	f7f2 fa52 	bl	80002bc <__adddf3>
 800de18:	4622      	mov	r2, r4
 800de1a:	462b      	mov	r3, r5
 800de1c:	f7f2 fc04 	bl	8000628 <__aeabi_dmul>
 800de20:	a337      	add	r3, pc, #220	; (adr r3, 800df00 <__ieee754_acos+0x4a0>)
 800de22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de26:	f7f2 fa47 	bl	80002b8 <__aeabi_dsub>
 800de2a:	4622      	mov	r2, r4
 800de2c:	462b      	mov	r3, r5
 800de2e:	f7f2 fbfb 	bl	8000628 <__aeabi_dmul>
 800de32:	4b39      	ldr	r3, [pc, #228]	; (800df18 <__ieee754_acos+0x4b8>)
 800de34:	2200      	movs	r2, #0
 800de36:	f7f2 fa41 	bl	80002bc <__adddf3>
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	4650      	mov	r0, sl
 800de40:	4659      	mov	r1, fp
 800de42:	f7f2 fd1b 	bl	800087c <__aeabi_ddiv>
 800de46:	4642      	mov	r2, r8
 800de48:	464b      	mov	r3, r9
 800de4a:	f7f2 fbed 	bl	8000628 <__aeabi_dmul>
 800de4e:	2600      	movs	r6, #0
 800de50:	4682      	mov	sl, r0
 800de52:	468b      	mov	fp, r1
 800de54:	4632      	mov	r2, r6
 800de56:	464b      	mov	r3, r9
 800de58:	4630      	mov	r0, r6
 800de5a:	4649      	mov	r1, r9
 800de5c:	f7f2 fbe4 	bl	8000628 <__aeabi_dmul>
 800de60:	4602      	mov	r2, r0
 800de62:	460b      	mov	r3, r1
 800de64:	4620      	mov	r0, r4
 800de66:	4629      	mov	r1, r5
 800de68:	f7f2 fa26 	bl	80002b8 <__aeabi_dsub>
 800de6c:	4632      	mov	r2, r6
 800de6e:	4604      	mov	r4, r0
 800de70:	460d      	mov	r5, r1
 800de72:	464b      	mov	r3, r9
 800de74:	4640      	mov	r0, r8
 800de76:	4649      	mov	r1, r9
 800de78:	f7f2 fa20 	bl	80002bc <__adddf3>
 800de7c:	4602      	mov	r2, r0
 800de7e:	460b      	mov	r3, r1
 800de80:	4620      	mov	r0, r4
 800de82:	4629      	mov	r1, r5
 800de84:	f7f2 fcfa 	bl	800087c <__aeabi_ddiv>
 800de88:	4602      	mov	r2, r0
 800de8a:	460b      	mov	r3, r1
 800de8c:	4650      	mov	r0, sl
 800de8e:	4659      	mov	r1, fp
 800de90:	f7f2 fa14 	bl	80002bc <__adddf3>
 800de94:	4632      	mov	r2, r6
 800de96:	464b      	mov	r3, r9
 800de98:	f7f2 fa10 	bl	80002bc <__adddf3>
 800de9c:	4602      	mov	r2, r0
 800de9e:	460b      	mov	r3, r1
 800dea0:	f7f2 fa0c 	bl	80002bc <__adddf3>
 800dea4:	e5fe      	b.n	800daa4 <__ieee754_acos+0x44>
 800dea6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800df08 <__ieee754_acos+0x4a8>
 800deaa:	e5ed      	b.n	800da88 <__ieee754_acos+0x28>
 800deac:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800df10 <__ieee754_acos+0x4b0>
 800deb0:	e5ea      	b.n	800da88 <__ieee754_acos+0x28>
 800deb2:	bf00      	nop
 800deb4:	f3af 8000 	nop.w
 800deb8:	0dfdf709 	.word	0x0dfdf709
 800debc:	3f023de1 	.word	0x3f023de1
 800dec0:	7501b288 	.word	0x7501b288
 800dec4:	3f49efe0 	.word	0x3f49efe0
 800dec8:	b5688f3b 	.word	0xb5688f3b
 800decc:	3fa48228 	.word	0x3fa48228
 800ded0:	0e884455 	.word	0x0e884455
 800ded4:	3fc9c155 	.word	0x3fc9c155
 800ded8:	03eb6f7d 	.word	0x03eb6f7d
 800dedc:	3fd4d612 	.word	0x3fd4d612
 800dee0:	55555555 	.word	0x55555555
 800dee4:	3fc55555 	.word	0x3fc55555
 800dee8:	b12e9282 	.word	0xb12e9282
 800deec:	3fb3b8c5 	.word	0x3fb3b8c5
 800def0:	1b8d0159 	.word	0x1b8d0159
 800def4:	3fe6066c 	.word	0x3fe6066c
 800def8:	9c598ac8 	.word	0x9c598ac8
 800defc:	40002ae5 	.word	0x40002ae5
 800df00:	1c8a2d4b 	.word	0x1c8a2d4b
 800df04:	40033a27 	.word	0x40033a27
	...
 800df10:	54442d18 	.word	0x54442d18
 800df14:	3ff921fb 	.word	0x3ff921fb
 800df18:	3ff00000 	.word	0x3ff00000
 800df1c:	3fe00000 	.word	0x3fe00000

0800df20 <__ieee754_atan2>:
 800df20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df24:	ec57 6b11 	vmov	r6, r7, d1
 800df28:	4273      	negs	r3, r6
 800df2a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e0b0 <__ieee754_atan2+0x190>
 800df2e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800df32:	4333      	orrs	r3, r6
 800df34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800df38:	4573      	cmp	r3, lr
 800df3a:	ec51 0b10 	vmov	r0, r1, d0
 800df3e:	ee11 8a10 	vmov	r8, s2
 800df42:	d80a      	bhi.n	800df5a <__ieee754_atan2+0x3a>
 800df44:	4244      	negs	r4, r0
 800df46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df4a:	4304      	orrs	r4, r0
 800df4c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800df50:	4574      	cmp	r4, lr
 800df52:	ee10 9a10 	vmov	r9, s0
 800df56:	468c      	mov	ip, r1
 800df58:	d907      	bls.n	800df6a <__ieee754_atan2+0x4a>
 800df5a:	4632      	mov	r2, r6
 800df5c:	463b      	mov	r3, r7
 800df5e:	f7f2 f9ad 	bl	80002bc <__adddf3>
 800df62:	ec41 0b10 	vmov	d0, r0, r1
 800df66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df6a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800df6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800df72:	4334      	orrs	r4, r6
 800df74:	d103      	bne.n	800df7e <__ieee754_atan2+0x5e>
 800df76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df7a:	f001 bd99 	b.w	800fab0 <atan>
 800df7e:	17bc      	asrs	r4, r7, #30
 800df80:	f004 0402 	and.w	r4, r4, #2
 800df84:	ea53 0909 	orrs.w	r9, r3, r9
 800df88:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800df8c:	d107      	bne.n	800df9e <__ieee754_atan2+0x7e>
 800df8e:	2c02      	cmp	r4, #2
 800df90:	d060      	beq.n	800e054 <__ieee754_atan2+0x134>
 800df92:	2c03      	cmp	r4, #3
 800df94:	d1e5      	bne.n	800df62 <__ieee754_atan2+0x42>
 800df96:	a142      	add	r1, pc, #264	; (adr r1, 800e0a0 <__ieee754_atan2+0x180>)
 800df98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df9c:	e7e1      	b.n	800df62 <__ieee754_atan2+0x42>
 800df9e:	ea52 0808 	orrs.w	r8, r2, r8
 800dfa2:	d106      	bne.n	800dfb2 <__ieee754_atan2+0x92>
 800dfa4:	f1bc 0f00 	cmp.w	ip, #0
 800dfa8:	da5f      	bge.n	800e06a <__ieee754_atan2+0x14a>
 800dfaa:	a13f      	add	r1, pc, #252	; (adr r1, 800e0a8 <__ieee754_atan2+0x188>)
 800dfac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfb0:	e7d7      	b.n	800df62 <__ieee754_atan2+0x42>
 800dfb2:	4572      	cmp	r2, lr
 800dfb4:	d10f      	bne.n	800dfd6 <__ieee754_atan2+0xb6>
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	f104 34ff 	add.w	r4, r4, #4294967295
 800dfbc:	d107      	bne.n	800dfce <__ieee754_atan2+0xae>
 800dfbe:	2c02      	cmp	r4, #2
 800dfc0:	d84c      	bhi.n	800e05c <__ieee754_atan2+0x13c>
 800dfc2:	4b35      	ldr	r3, [pc, #212]	; (800e098 <__ieee754_atan2+0x178>)
 800dfc4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800dfc8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800dfcc:	e7c9      	b.n	800df62 <__ieee754_atan2+0x42>
 800dfce:	2c02      	cmp	r4, #2
 800dfd0:	d848      	bhi.n	800e064 <__ieee754_atan2+0x144>
 800dfd2:	4b32      	ldr	r3, [pc, #200]	; (800e09c <__ieee754_atan2+0x17c>)
 800dfd4:	e7f6      	b.n	800dfc4 <__ieee754_atan2+0xa4>
 800dfd6:	4573      	cmp	r3, lr
 800dfd8:	d0e4      	beq.n	800dfa4 <__ieee754_atan2+0x84>
 800dfda:	1a9b      	subs	r3, r3, r2
 800dfdc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800dfe0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dfe4:	da1e      	bge.n	800e024 <__ieee754_atan2+0x104>
 800dfe6:	2f00      	cmp	r7, #0
 800dfe8:	da01      	bge.n	800dfee <__ieee754_atan2+0xce>
 800dfea:	323c      	adds	r2, #60	; 0x3c
 800dfec:	db1e      	blt.n	800e02c <__ieee754_atan2+0x10c>
 800dfee:	4632      	mov	r2, r6
 800dff0:	463b      	mov	r3, r7
 800dff2:	f7f2 fc43 	bl	800087c <__aeabi_ddiv>
 800dff6:	ec41 0b10 	vmov	d0, r0, r1
 800dffa:	f001 fef9 	bl	800fdf0 <fabs>
 800dffe:	f001 fd57 	bl	800fab0 <atan>
 800e002:	ec51 0b10 	vmov	r0, r1, d0
 800e006:	2c01      	cmp	r4, #1
 800e008:	d013      	beq.n	800e032 <__ieee754_atan2+0x112>
 800e00a:	2c02      	cmp	r4, #2
 800e00c:	d015      	beq.n	800e03a <__ieee754_atan2+0x11a>
 800e00e:	2c00      	cmp	r4, #0
 800e010:	d0a7      	beq.n	800df62 <__ieee754_atan2+0x42>
 800e012:	a319      	add	r3, pc, #100	; (adr r3, 800e078 <__ieee754_atan2+0x158>)
 800e014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e018:	f7f2 f94e 	bl	80002b8 <__aeabi_dsub>
 800e01c:	a318      	add	r3, pc, #96	; (adr r3, 800e080 <__ieee754_atan2+0x160>)
 800e01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e022:	e014      	b.n	800e04e <__ieee754_atan2+0x12e>
 800e024:	a118      	add	r1, pc, #96	; (adr r1, 800e088 <__ieee754_atan2+0x168>)
 800e026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e02a:	e7ec      	b.n	800e006 <__ieee754_atan2+0xe6>
 800e02c:	2000      	movs	r0, #0
 800e02e:	2100      	movs	r1, #0
 800e030:	e7e9      	b.n	800e006 <__ieee754_atan2+0xe6>
 800e032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e036:	4619      	mov	r1, r3
 800e038:	e793      	b.n	800df62 <__ieee754_atan2+0x42>
 800e03a:	a30f      	add	r3, pc, #60	; (adr r3, 800e078 <__ieee754_atan2+0x158>)
 800e03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e040:	f7f2 f93a 	bl	80002b8 <__aeabi_dsub>
 800e044:	4602      	mov	r2, r0
 800e046:	460b      	mov	r3, r1
 800e048:	a10d      	add	r1, pc, #52	; (adr r1, 800e080 <__ieee754_atan2+0x160>)
 800e04a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e04e:	f7f2 f933 	bl	80002b8 <__aeabi_dsub>
 800e052:	e786      	b.n	800df62 <__ieee754_atan2+0x42>
 800e054:	a10a      	add	r1, pc, #40	; (adr r1, 800e080 <__ieee754_atan2+0x160>)
 800e056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e05a:	e782      	b.n	800df62 <__ieee754_atan2+0x42>
 800e05c:	a10c      	add	r1, pc, #48	; (adr r1, 800e090 <__ieee754_atan2+0x170>)
 800e05e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e062:	e77e      	b.n	800df62 <__ieee754_atan2+0x42>
 800e064:	2000      	movs	r0, #0
 800e066:	2100      	movs	r1, #0
 800e068:	e77b      	b.n	800df62 <__ieee754_atan2+0x42>
 800e06a:	a107      	add	r1, pc, #28	; (adr r1, 800e088 <__ieee754_atan2+0x168>)
 800e06c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e070:	e777      	b.n	800df62 <__ieee754_atan2+0x42>
 800e072:	bf00      	nop
 800e074:	f3af 8000 	nop.w
 800e078:	33145c07 	.word	0x33145c07
 800e07c:	3ca1a626 	.word	0x3ca1a626
 800e080:	54442d18 	.word	0x54442d18
 800e084:	400921fb 	.word	0x400921fb
 800e088:	54442d18 	.word	0x54442d18
 800e08c:	3ff921fb 	.word	0x3ff921fb
 800e090:	54442d18 	.word	0x54442d18
 800e094:	3fe921fb 	.word	0x3fe921fb
 800e098:	08010848 	.word	0x08010848
 800e09c:	08010860 	.word	0x08010860
 800e0a0:	54442d18 	.word	0x54442d18
 800e0a4:	c00921fb 	.word	0xc00921fb
 800e0a8:	54442d18 	.word	0x54442d18
 800e0ac:	bff921fb 	.word	0xbff921fb
 800e0b0:	7ff00000 	.word	0x7ff00000
 800e0b4:	00000000 	.word	0x00000000

0800e0b8 <__ieee754_pow>:
 800e0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0bc:	ed2d 8b06 	vpush	{d8-d10}
 800e0c0:	b089      	sub	sp, #36	; 0x24
 800e0c2:	ed8d 1b00 	vstr	d1, [sp]
 800e0c6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e0ca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e0ce:	ea58 0102 	orrs.w	r1, r8, r2
 800e0d2:	ec57 6b10 	vmov	r6, r7, d0
 800e0d6:	d115      	bne.n	800e104 <__ieee754_pow+0x4c>
 800e0d8:	19b3      	adds	r3, r6, r6
 800e0da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e0de:	4152      	adcs	r2, r2
 800e0e0:	4299      	cmp	r1, r3
 800e0e2:	4b89      	ldr	r3, [pc, #548]	; (800e308 <__ieee754_pow+0x250>)
 800e0e4:	4193      	sbcs	r3, r2
 800e0e6:	f080 84d2 	bcs.w	800ea8e <__ieee754_pow+0x9d6>
 800e0ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0ee:	4630      	mov	r0, r6
 800e0f0:	4639      	mov	r1, r7
 800e0f2:	f7f2 f8e3 	bl	80002bc <__adddf3>
 800e0f6:	ec41 0b10 	vmov	d0, r0, r1
 800e0fa:	b009      	add	sp, #36	; 0x24
 800e0fc:	ecbd 8b06 	vpop	{d8-d10}
 800e100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e104:	4b81      	ldr	r3, [pc, #516]	; (800e30c <__ieee754_pow+0x254>)
 800e106:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e10a:	429c      	cmp	r4, r3
 800e10c:	ee10 aa10 	vmov	sl, s0
 800e110:	463d      	mov	r5, r7
 800e112:	dc06      	bgt.n	800e122 <__ieee754_pow+0x6a>
 800e114:	d101      	bne.n	800e11a <__ieee754_pow+0x62>
 800e116:	2e00      	cmp	r6, #0
 800e118:	d1e7      	bne.n	800e0ea <__ieee754_pow+0x32>
 800e11a:	4598      	cmp	r8, r3
 800e11c:	dc01      	bgt.n	800e122 <__ieee754_pow+0x6a>
 800e11e:	d10f      	bne.n	800e140 <__ieee754_pow+0x88>
 800e120:	b172      	cbz	r2, 800e140 <__ieee754_pow+0x88>
 800e122:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e126:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e12a:	ea55 050a 	orrs.w	r5, r5, sl
 800e12e:	d1dc      	bne.n	800e0ea <__ieee754_pow+0x32>
 800e130:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e134:	18db      	adds	r3, r3, r3
 800e136:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e13a:	4152      	adcs	r2, r2
 800e13c:	429d      	cmp	r5, r3
 800e13e:	e7d0      	b.n	800e0e2 <__ieee754_pow+0x2a>
 800e140:	2d00      	cmp	r5, #0
 800e142:	da3b      	bge.n	800e1bc <__ieee754_pow+0x104>
 800e144:	4b72      	ldr	r3, [pc, #456]	; (800e310 <__ieee754_pow+0x258>)
 800e146:	4598      	cmp	r8, r3
 800e148:	dc51      	bgt.n	800e1ee <__ieee754_pow+0x136>
 800e14a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e14e:	4598      	cmp	r8, r3
 800e150:	f340 84ac 	ble.w	800eaac <__ieee754_pow+0x9f4>
 800e154:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e158:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e15c:	2b14      	cmp	r3, #20
 800e15e:	dd0f      	ble.n	800e180 <__ieee754_pow+0xc8>
 800e160:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e164:	fa22 f103 	lsr.w	r1, r2, r3
 800e168:	fa01 f303 	lsl.w	r3, r1, r3
 800e16c:	4293      	cmp	r3, r2
 800e16e:	f040 849d 	bne.w	800eaac <__ieee754_pow+0x9f4>
 800e172:	f001 0101 	and.w	r1, r1, #1
 800e176:	f1c1 0302 	rsb	r3, r1, #2
 800e17a:	9304      	str	r3, [sp, #16]
 800e17c:	b182      	cbz	r2, 800e1a0 <__ieee754_pow+0xe8>
 800e17e:	e05f      	b.n	800e240 <__ieee754_pow+0x188>
 800e180:	2a00      	cmp	r2, #0
 800e182:	d15b      	bne.n	800e23c <__ieee754_pow+0x184>
 800e184:	f1c3 0314 	rsb	r3, r3, #20
 800e188:	fa48 f103 	asr.w	r1, r8, r3
 800e18c:	fa01 f303 	lsl.w	r3, r1, r3
 800e190:	4543      	cmp	r3, r8
 800e192:	f040 8488 	bne.w	800eaa6 <__ieee754_pow+0x9ee>
 800e196:	f001 0101 	and.w	r1, r1, #1
 800e19a:	f1c1 0302 	rsb	r3, r1, #2
 800e19e:	9304      	str	r3, [sp, #16]
 800e1a0:	4b5c      	ldr	r3, [pc, #368]	; (800e314 <__ieee754_pow+0x25c>)
 800e1a2:	4598      	cmp	r8, r3
 800e1a4:	d132      	bne.n	800e20c <__ieee754_pow+0x154>
 800e1a6:	f1b9 0f00 	cmp.w	r9, #0
 800e1aa:	f280 8478 	bge.w	800ea9e <__ieee754_pow+0x9e6>
 800e1ae:	4959      	ldr	r1, [pc, #356]	; (800e314 <__ieee754_pow+0x25c>)
 800e1b0:	4632      	mov	r2, r6
 800e1b2:	463b      	mov	r3, r7
 800e1b4:	2000      	movs	r0, #0
 800e1b6:	f7f2 fb61 	bl	800087c <__aeabi_ddiv>
 800e1ba:	e79c      	b.n	800e0f6 <__ieee754_pow+0x3e>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	9304      	str	r3, [sp, #16]
 800e1c0:	2a00      	cmp	r2, #0
 800e1c2:	d13d      	bne.n	800e240 <__ieee754_pow+0x188>
 800e1c4:	4b51      	ldr	r3, [pc, #324]	; (800e30c <__ieee754_pow+0x254>)
 800e1c6:	4598      	cmp	r8, r3
 800e1c8:	d1ea      	bne.n	800e1a0 <__ieee754_pow+0xe8>
 800e1ca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e1ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e1d2:	ea53 030a 	orrs.w	r3, r3, sl
 800e1d6:	f000 845a 	beq.w	800ea8e <__ieee754_pow+0x9d6>
 800e1da:	4b4f      	ldr	r3, [pc, #316]	; (800e318 <__ieee754_pow+0x260>)
 800e1dc:	429c      	cmp	r4, r3
 800e1de:	dd08      	ble.n	800e1f2 <__ieee754_pow+0x13a>
 800e1e0:	f1b9 0f00 	cmp.w	r9, #0
 800e1e4:	f2c0 8457 	blt.w	800ea96 <__ieee754_pow+0x9de>
 800e1e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1ec:	e783      	b.n	800e0f6 <__ieee754_pow+0x3e>
 800e1ee:	2302      	movs	r3, #2
 800e1f0:	e7e5      	b.n	800e1be <__ieee754_pow+0x106>
 800e1f2:	f1b9 0f00 	cmp.w	r9, #0
 800e1f6:	f04f 0000 	mov.w	r0, #0
 800e1fa:	f04f 0100 	mov.w	r1, #0
 800e1fe:	f6bf af7a 	bge.w	800e0f6 <__ieee754_pow+0x3e>
 800e202:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e206:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e20a:	e774      	b.n	800e0f6 <__ieee754_pow+0x3e>
 800e20c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e210:	d106      	bne.n	800e220 <__ieee754_pow+0x168>
 800e212:	4632      	mov	r2, r6
 800e214:	463b      	mov	r3, r7
 800e216:	4630      	mov	r0, r6
 800e218:	4639      	mov	r1, r7
 800e21a:	f7f2 fa05 	bl	8000628 <__aeabi_dmul>
 800e21e:	e76a      	b.n	800e0f6 <__ieee754_pow+0x3e>
 800e220:	4b3e      	ldr	r3, [pc, #248]	; (800e31c <__ieee754_pow+0x264>)
 800e222:	4599      	cmp	r9, r3
 800e224:	d10c      	bne.n	800e240 <__ieee754_pow+0x188>
 800e226:	2d00      	cmp	r5, #0
 800e228:	db0a      	blt.n	800e240 <__ieee754_pow+0x188>
 800e22a:	ec47 6b10 	vmov	d0, r6, r7
 800e22e:	b009      	add	sp, #36	; 0x24
 800e230:	ecbd 8b06 	vpop	{d8-d10}
 800e234:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e238:	f000 be7a 	b.w	800ef30 <__ieee754_sqrt>
 800e23c:	2300      	movs	r3, #0
 800e23e:	9304      	str	r3, [sp, #16]
 800e240:	ec47 6b10 	vmov	d0, r6, r7
 800e244:	f001 fdd4 	bl	800fdf0 <fabs>
 800e248:	ec51 0b10 	vmov	r0, r1, d0
 800e24c:	f1ba 0f00 	cmp.w	sl, #0
 800e250:	d129      	bne.n	800e2a6 <__ieee754_pow+0x1ee>
 800e252:	b124      	cbz	r4, 800e25e <__ieee754_pow+0x1a6>
 800e254:	4b2f      	ldr	r3, [pc, #188]	; (800e314 <__ieee754_pow+0x25c>)
 800e256:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d123      	bne.n	800e2a6 <__ieee754_pow+0x1ee>
 800e25e:	f1b9 0f00 	cmp.w	r9, #0
 800e262:	da05      	bge.n	800e270 <__ieee754_pow+0x1b8>
 800e264:	4602      	mov	r2, r0
 800e266:	460b      	mov	r3, r1
 800e268:	2000      	movs	r0, #0
 800e26a:	492a      	ldr	r1, [pc, #168]	; (800e314 <__ieee754_pow+0x25c>)
 800e26c:	f7f2 fb06 	bl	800087c <__aeabi_ddiv>
 800e270:	2d00      	cmp	r5, #0
 800e272:	f6bf af40 	bge.w	800e0f6 <__ieee754_pow+0x3e>
 800e276:	9b04      	ldr	r3, [sp, #16]
 800e278:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e27c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e280:	4323      	orrs	r3, r4
 800e282:	d108      	bne.n	800e296 <__ieee754_pow+0x1de>
 800e284:	4602      	mov	r2, r0
 800e286:	460b      	mov	r3, r1
 800e288:	4610      	mov	r0, r2
 800e28a:	4619      	mov	r1, r3
 800e28c:	f7f2 f814 	bl	80002b8 <__aeabi_dsub>
 800e290:	4602      	mov	r2, r0
 800e292:	460b      	mov	r3, r1
 800e294:	e78f      	b.n	800e1b6 <__ieee754_pow+0xfe>
 800e296:	9b04      	ldr	r3, [sp, #16]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	f47f af2c 	bne.w	800e0f6 <__ieee754_pow+0x3e>
 800e29e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	e727      	b.n	800e0f6 <__ieee754_pow+0x3e>
 800e2a6:	0feb      	lsrs	r3, r5, #31
 800e2a8:	3b01      	subs	r3, #1
 800e2aa:	9306      	str	r3, [sp, #24]
 800e2ac:	9a06      	ldr	r2, [sp, #24]
 800e2ae:	9b04      	ldr	r3, [sp, #16]
 800e2b0:	4313      	orrs	r3, r2
 800e2b2:	d102      	bne.n	800e2ba <__ieee754_pow+0x202>
 800e2b4:	4632      	mov	r2, r6
 800e2b6:	463b      	mov	r3, r7
 800e2b8:	e7e6      	b.n	800e288 <__ieee754_pow+0x1d0>
 800e2ba:	4b19      	ldr	r3, [pc, #100]	; (800e320 <__ieee754_pow+0x268>)
 800e2bc:	4598      	cmp	r8, r3
 800e2be:	f340 80fb 	ble.w	800e4b8 <__ieee754_pow+0x400>
 800e2c2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e2c6:	4598      	cmp	r8, r3
 800e2c8:	4b13      	ldr	r3, [pc, #76]	; (800e318 <__ieee754_pow+0x260>)
 800e2ca:	dd0c      	ble.n	800e2e6 <__ieee754_pow+0x22e>
 800e2cc:	429c      	cmp	r4, r3
 800e2ce:	dc0f      	bgt.n	800e2f0 <__ieee754_pow+0x238>
 800e2d0:	f1b9 0f00 	cmp.w	r9, #0
 800e2d4:	da0f      	bge.n	800e2f6 <__ieee754_pow+0x23e>
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	b009      	add	sp, #36	; 0x24
 800e2da:	ecbd 8b06 	vpop	{d8-d10}
 800e2de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e2:	f001 bbda 	b.w	800fa9a <__math_oflow>
 800e2e6:	429c      	cmp	r4, r3
 800e2e8:	dbf2      	blt.n	800e2d0 <__ieee754_pow+0x218>
 800e2ea:	4b0a      	ldr	r3, [pc, #40]	; (800e314 <__ieee754_pow+0x25c>)
 800e2ec:	429c      	cmp	r4, r3
 800e2ee:	dd19      	ble.n	800e324 <__ieee754_pow+0x26c>
 800e2f0:	f1b9 0f00 	cmp.w	r9, #0
 800e2f4:	dcef      	bgt.n	800e2d6 <__ieee754_pow+0x21e>
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	b009      	add	sp, #36	; 0x24
 800e2fa:	ecbd 8b06 	vpop	{d8-d10}
 800e2fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e302:	f001 bbc1 	b.w	800fa88 <__math_uflow>
 800e306:	bf00      	nop
 800e308:	fff00000 	.word	0xfff00000
 800e30c:	7ff00000 	.word	0x7ff00000
 800e310:	433fffff 	.word	0x433fffff
 800e314:	3ff00000 	.word	0x3ff00000
 800e318:	3fefffff 	.word	0x3fefffff
 800e31c:	3fe00000 	.word	0x3fe00000
 800e320:	41e00000 	.word	0x41e00000
 800e324:	4b60      	ldr	r3, [pc, #384]	; (800e4a8 <__ieee754_pow+0x3f0>)
 800e326:	2200      	movs	r2, #0
 800e328:	f7f1 ffc6 	bl	80002b8 <__aeabi_dsub>
 800e32c:	a354      	add	r3, pc, #336	; (adr r3, 800e480 <__ieee754_pow+0x3c8>)
 800e32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e332:	4604      	mov	r4, r0
 800e334:	460d      	mov	r5, r1
 800e336:	f7f2 f977 	bl	8000628 <__aeabi_dmul>
 800e33a:	a353      	add	r3, pc, #332	; (adr r3, 800e488 <__ieee754_pow+0x3d0>)
 800e33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e340:	4606      	mov	r6, r0
 800e342:	460f      	mov	r7, r1
 800e344:	4620      	mov	r0, r4
 800e346:	4629      	mov	r1, r5
 800e348:	f7f2 f96e 	bl	8000628 <__aeabi_dmul>
 800e34c:	4b57      	ldr	r3, [pc, #348]	; (800e4ac <__ieee754_pow+0x3f4>)
 800e34e:	4682      	mov	sl, r0
 800e350:	468b      	mov	fp, r1
 800e352:	2200      	movs	r2, #0
 800e354:	4620      	mov	r0, r4
 800e356:	4629      	mov	r1, r5
 800e358:	f7f2 f966 	bl	8000628 <__aeabi_dmul>
 800e35c:	4602      	mov	r2, r0
 800e35e:	460b      	mov	r3, r1
 800e360:	a14b      	add	r1, pc, #300	; (adr r1, 800e490 <__ieee754_pow+0x3d8>)
 800e362:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e366:	f7f1 ffa7 	bl	80002b8 <__aeabi_dsub>
 800e36a:	4622      	mov	r2, r4
 800e36c:	462b      	mov	r3, r5
 800e36e:	f7f2 f95b 	bl	8000628 <__aeabi_dmul>
 800e372:	4602      	mov	r2, r0
 800e374:	460b      	mov	r3, r1
 800e376:	2000      	movs	r0, #0
 800e378:	494d      	ldr	r1, [pc, #308]	; (800e4b0 <__ieee754_pow+0x3f8>)
 800e37a:	f7f1 ff9d 	bl	80002b8 <__aeabi_dsub>
 800e37e:	4622      	mov	r2, r4
 800e380:	4680      	mov	r8, r0
 800e382:	4689      	mov	r9, r1
 800e384:	462b      	mov	r3, r5
 800e386:	4620      	mov	r0, r4
 800e388:	4629      	mov	r1, r5
 800e38a:	f7f2 f94d 	bl	8000628 <__aeabi_dmul>
 800e38e:	4602      	mov	r2, r0
 800e390:	460b      	mov	r3, r1
 800e392:	4640      	mov	r0, r8
 800e394:	4649      	mov	r1, r9
 800e396:	f7f2 f947 	bl	8000628 <__aeabi_dmul>
 800e39a:	a33f      	add	r3, pc, #252	; (adr r3, 800e498 <__ieee754_pow+0x3e0>)
 800e39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a0:	f7f2 f942 	bl	8000628 <__aeabi_dmul>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	460b      	mov	r3, r1
 800e3a8:	4650      	mov	r0, sl
 800e3aa:	4659      	mov	r1, fp
 800e3ac:	f7f1 ff84 	bl	80002b8 <__aeabi_dsub>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	4680      	mov	r8, r0
 800e3b6:	4689      	mov	r9, r1
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	4639      	mov	r1, r7
 800e3bc:	f7f1 ff7e 	bl	80002bc <__adddf3>
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	4632      	mov	r2, r6
 800e3c4:	463b      	mov	r3, r7
 800e3c6:	4604      	mov	r4, r0
 800e3c8:	460d      	mov	r5, r1
 800e3ca:	f7f1 ff75 	bl	80002b8 <__aeabi_dsub>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	4640      	mov	r0, r8
 800e3d4:	4649      	mov	r1, r9
 800e3d6:	f7f1 ff6f 	bl	80002b8 <__aeabi_dsub>
 800e3da:	9b04      	ldr	r3, [sp, #16]
 800e3dc:	9a06      	ldr	r2, [sp, #24]
 800e3de:	3b01      	subs	r3, #1
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	4682      	mov	sl, r0
 800e3e4:	468b      	mov	fp, r1
 800e3e6:	f040 81e7 	bne.w	800e7b8 <__ieee754_pow+0x700>
 800e3ea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e4a0 <__ieee754_pow+0x3e8>
 800e3ee:	eeb0 8a47 	vmov.f32	s16, s14
 800e3f2:	eef0 8a67 	vmov.f32	s17, s15
 800e3f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e3fa:	2600      	movs	r6, #0
 800e3fc:	4632      	mov	r2, r6
 800e3fe:	463b      	mov	r3, r7
 800e400:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e404:	f7f1 ff58 	bl	80002b8 <__aeabi_dsub>
 800e408:	4622      	mov	r2, r4
 800e40a:	462b      	mov	r3, r5
 800e40c:	f7f2 f90c 	bl	8000628 <__aeabi_dmul>
 800e410:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e414:	4680      	mov	r8, r0
 800e416:	4689      	mov	r9, r1
 800e418:	4650      	mov	r0, sl
 800e41a:	4659      	mov	r1, fp
 800e41c:	f7f2 f904 	bl	8000628 <__aeabi_dmul>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	4640      	mov	r0, r8
 800e426:	4649      	mov	r1, r9
 800e428:	f7f1 ff48 	bl	80002bc <__adddf3>
 800e42c:	4632      	mov	r2, r6
 800e42e:	463b      	mov	r3, r7
 800e430:	4680      	mov	r8, r0
 800e432:	4689      	mov	r9, r1
 800e434:	4620      	mov	r0, r4
 800e436:	4629      	mov	r1, r5
 800e438:	f7f2 f8f6 	bl	8000628 <__aeabi_dmul>
 800e43c:	460b      	mov	r3, r1
 800e43e:	4604      	mov	r4, r0
 800e440:	460d      	mov	r5, r1
 800e442:	4602      	mov	r2, r0
 800e444:	4649      	mov	r1, r9
 800e446:	4640      	mov	r0, r8
 800e448:	f7f1 ff38 	bl	80002bc <__adddf3>
 800e44c:	4b19      	ldr	r3, [pc, #100]	; (800e4b4 <__ieee754_pow+0x3fc>)
 800e44e:	4299      	cmp	r1, r3
 800e450:	ec45 4b19 	vmov	d9, r4, r5
 800e454:	4606      	mov	r6, r0
 800e456:	460f      	mov	r7, r1
 800e458:	468b      	mov	fp, r1
 800e45a:	f340 82f1 	ble.w	800ea40 <__ieee754_pow+0x988>
 800e45e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e462:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e466:	4303      	orrs	r3, r0
 800e468:	f000 81e4 	beq.w	800e834 <__ieee754_pow+0x77c>
 800e46c:	ec51 0b18 	vmov	r0, r1, d8
 800e470:	2200      	movs	r2, #0
 800e472:	2300      	movs	r3, #0
 800e474:	f7f2 fb4a 	bl	8000b0c <__aeabi_dcmplt>
 800e478:	3800      	subs	r0, #0
 800e47a:	bf18      	it	ne
 800e47c:	2001      	movne	r0, #1
 800e47e:	e72b      	b.n	800e2d8 <__ieee754_pow+0x220>
 800e480:	60000000 	.word	0x60000000
 800e484:	3ff71547 	.word	0x3ff71547
 800e488:	f85ddf44 	.word	0xf85ddf44
 800e48c:	3e54ae0b 	.word	0x3e54ae0b
 800e490:	55555555 	.word	0x55555555
 800e494:	3fd55555 	.word	0x3fd55555
 800e498:	652b82fe 	.word	0x652b82fe
 800e49c:	3ff71547 	.word	0x3ff71547
 800e4a0:	00000000 	.word	0x00000000
 800e4a4:	bff00000 	.word	0xbff00000
 800e4a8:	3ff00000 	.word	0x3ff00000
 800e4ac:	3fd00000 	.word	0x3fd00000
 800e4b0:	3fe00000 	.word	0x3fe00000
 800e4b4:	408fffff 	.word	0x408fffff
 800e4b8:	4bd5      	ldr	r3, [pc, #852]	; (800e810 <__ieee754_pow+0x758>)
 800e4ba:	402b      	ands	r3, r5
 800e4bc:	2200      	movs	r2, #0
 800e4be:	b92b      	cbnz	r3, 800e4cc <__ieee754_pow+0x414>
 800e4c0:	4bd4      	ldr	r3, [pc, #848]	; (800e814 <__ieee754_pow+0x75c>)
 800e4c2:	f7f2 f8b1 	bl	8000628 <__aeabi_dmul>
 800e4c6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e4ca:	460c      	mov	r4, r1
 800e4cc:	1523      	asrs	r3, r4, #20
 800e4ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e4d2:	4413      	add	r3, r2
 800e4d4:	9305      	str	r3, [sp, #20]
 800e4d6:	4bd0      	ldr	r3, [pc, #832]	; (800e818 <__ieee754_pow+0x760>)
 800e4d8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e4dc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e4e0:	429c      	cmp	r4, r3
 800e4e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e4e6:	dd08      	ble.n	800e4fa <__ieee754_pow+0x442>
 800e4e8:	4bcc      	ldr	r3, [pc, #816]	; (800e81c <__ieee754_pow+0x764>)
 800e4ea:	429c      	cmp	r4, r3
 800e4ec:	f340 8162 	ble.w	800e7b4 <__ieee754_pow+0x6fc>
 800e4f0:	9b05      	ldr	r3, [sp, #20]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	9305      	str	r3, [sp, #20]
 800e4f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e4fa:	2400      	movs	r4, #0
 800e4fc:	00e3      	lsls	r3, r4, #3
 800e4fe:	9307      	str	r3, [sp, #28]
 800e500:	4bc7      	ldr	r3, [pc, #796]	; (800e820 <__ieee754_pow+0x768>)
 800e502:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e506:	ed93 7b00 	vldr	d7, [r3]
 800e50a:	4629      	mov	r1, r5
 800e50c:	ec53 2b17 	vmov	r2, r3, d7
 800e510:	eeb0 9a47 	vmov.f32	s18, s14
 800e514:	eef0 9a67 	vmov.f32	s19, s15
 800e518:	4682      	mov	sl, r0
 800e51a:	f7f1 fecd 	bl	80002b8 <__aeabi_dsub>
 800e51e:	4652      	mov	r2, sl
 800e520:	4606      	mov	r6, r0
 800e522:	460f      	mov	r7, r1
 800e524:	462b      	mov	r3, r5
 800e526:	ec51 0b19 	vmov	r0, r1, d9
 800e52a:	f7f1 fec7 	bl	80002bc <__adddf3>
 800e52e:	4602      	mov	r2, r0
 800e530:	460b      	mov	r3, r1
 800e532:	2000      	movs	r0, #0
 800e534:	49bb      	ldr	r1, [pc, #748]	; (800e824 <__ieee754_pow+0x76c>)
 800e536:	f7f2 f9a1 	bl	800087c <__aeabi_ddiv>
 800e53a:	ec41 0b1a 	vmov	d10, r0, r1
 800e53e:	4602      	mov	r2, r0
 800e540:	460b      	mov	r3, r1
 800e542:	4630      	mov	r0, r6
 800e544:	4639      	mov	r1, r7
 800e546:	f7f2 f86f 	bl	8000628 <__aeabi_dmul>
 800e54a:	2300      	movs	r3, #0
 800e54c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e550:	9302      	str	r3, [sp, #8]
 800e552:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e556:	46ab      	mov	fp, r5
 800e558:	106d      	asrs	r5, r5, #1
 800e55a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e55e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e562:	ec41 0b18 	vmov	d8, r0, r1
 800e566:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e56a:	2200      	movs	r2, #0
 800e56c:	4640      	mov	r0, r8
 800e56e:	4649      	mov	r1, r9
 800e570:	4614      	mov	r4, r2
 800e572:	461d      	mov	r5, r3
 800e574:	f7f2 f858 	bl	8000628 <__aeabi_dmul>
 800e578:	4602      	mov	r2, r0
 800e57a:	460b      	mov	r3, r1
 800e57c:	4630      	mov	r0, r6
 800e57e:	4639      	mov	r1, r7
 800e580:	f7f1 fe9a 	bl	80002b8 <__aeabi_dsub>
 800e584:	ec53 2b19 	vmov	r2, r3, d9
 800e588:	4606      	mov	r6, r0
 800e58a:	460f      	mov	r7, r1
 800e58c:	4620      	mov	r0, r4
 800e58e:	4629      	mov	r1, r5
 800e590:	f7f1 fe92 	bl	80002b8 <__aeabi_dsub>
 800e594:	4602      	mov	r2, r0
 800e596:	460b      	mov	r3, r1
 800e598:	4650      	mov	r0, sl
 800e59a:	4659      	mov	r1, fp
 800e59c:	f7f1 fe8c 	bl	80002b8 <__aeabi_dsub>
 800e5a0:	4642      	mov	r2, r8
 800e5a2:	464b      	mov	r3, r9
 800e5a4:	f7f2 f840 	bl	8000628 <__aeabi_dmul>
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	460b      	mov	r3, r1
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	4639      	mov	r1, r7
 800e5b0:	f7f1 fe82 	bl	80002b8 <__aeabi_dsub>
 800e5b4:	ec53 2b1a 	vmov	r2, r3, d10
 800e5b8:	f7f2 f836 	bl	8000628 <__aeabi_dmul>
 800e5bc:	ec53 2b18 	vmov	r2, r3, d8
 800e5c0:	ec41 0b19 	vmov	d9, r0, r1
 800e5c4:	ec51 0b18 	vmov	r0, r1, d8
 800e5c8:	f7f2 f82e 	bl	8000628 <__aeabi_dmul>
 800e5cc:	a37c      	add	r3, pc, #496	; (adr r3, 800e7c0 <__ieee754_pow+0x708>)
 800e5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	460d      	mov	r5, r1
 800e5d6:	f7f2 f827 	bl	8000628 <__aeabi_dmul>
 800e5da:	a37b      	add	r3, pc, #492	; (adr r3, 800e7c8 <__ieee754_pow+0x710>)
 800e5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e0:	f7f1 fe6c 	bl	80002bc <__adddf3>
 800e5e4:	4622      	mov	r2, r4
 800e5e6:	462b      	mov	r3, r5
 800e5e8:	f7f2 f81e 	bl	8000628 <__aeabi_dmul>
 800e5ec:	a378      	add	r3, pc, #480	; (adr r3, 800e7d0 <__ieee754_pow+0x718>)
 800e5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f2:	f7f1 fe63 	bl	80002bc <__adddf3>
 800e5f6:	4622      	mov	r2, r4
 800e5f8:	462b      	mov	r3, r5
 800e5fa:	f7f2 f815 	bl	8000628 <__aeabi_dmul>
 800e5fe:	a376      	add	r3, pc, #472	; (adr r3, 800e7d8 <__ieee754_pow+0x720>)
 800e600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e604:	f7f1 fe5a 	bl	80002bc <__adddf3>
 800e608:	4622      	mov	r2, r4
 800e60a:	462b      	mov	r3, r5
 800e60c:	f7f2 f80c 	bl	8000628 <__aeabi_dmul>
 800e610:	a373      	add	r3, pc, #460	; (adr r3, 800e7e0 <__ieee754_pow+0x728>)
 800e612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e616:	f7f1 fe51 	bl	80002bc <__adddf3>
 800e61a:	4622      	mov	r2, r4
 800e61c:	462b      	mov	r3, r5
 800e61e:	f7f2 f803 	bl	8000628 <__aeabi_dmul>
 800e622:	a371      	add	r3, pc, #452	; (adr r3, 800e7e8 <__ieee754_pow+0x730>)
 800e624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e628:	f7f1 fe48 	bl	80002bc <__adddf3>
 800e62c:	4622      	mov	r2, r4
 800e62e:	4606      	mov	r6, r0
 800e630:	460f      	mov	r7, r1
 800e632:	462b      	mov	r3, r5
 800e634:	4620      	mov	r0, r4
 800e636:	4629      	mov	r1, r5
 800e638:	f7f1 fff6 	bl	8000628 <__aeabi_dmul>
 800e63c:	4602      	mov	r2, r0
 800e63e:	460b      	mov	r3, r1
 800e640:	4630      	mov	r0, r6
 800e642:	4639      	mov	r1, r7
 800e644:	f7f1 fff0 	bl	8000628 <__aeabi_dmul>
 800e648:	4642      	mov	r2, r8
 800e64a:	4604      	mov	r4, r0
 800e64c:	460d      	mov	r5, r1
 800e64e:	464b      	mov	r3, r9
 800e650:	ec51 0b18 	vmov	r0, r1, d8
 800e654:	f7f1 fe32 	bl	80002bc <__adddf3>
 800e658:	ec53 2b19 	vmov	r2, r3, d9
 800e65c:	f7f1 ffe4 	bl	8000628 <__aeabi_dmul>
 800e660:	4622      	mov	r2, r4
 800e662:	462b      	mov	r3, r5
 800e664:	f7f1 fe2a 	bl	80002bc <__adddf3>
 800e668:	4642      	mov	r2, r8
 800e66a:	4682      	mov	sl, r0
 800e66c:	468b      	mov	fp, r1
 800e66e:	464b      	mov	r3, r9
 800e670:	4640      	mov	r0, r8
 800e672:	4649      	mov	r1, r9
 800e674:	f7f1 ffd8 	bl	8000628 <__aeabi_dmul>
 800e678:	4b6b      	ldr	r3, [pc, #428]	; (800e828 <__ieee754_pow+0x770>)
 800e67a:	2200      	movs	r2, #0
 800e67c:	4606      	mov	r6, r0
 800e67e:	460f      	mov	r7, r1
 800e680:	f7f1 fe1c 	bl	80002bc <__adddf3>
 800e684:	4652      	mov	r2, sl
 800e686:	465b      	mov	r3, fp
 800e688:	f7f1 fe18 	bl	80002bc <__adddf3>
 800e68c:	2000      	movs	r0, #0
 800e68e:	4604      	mov	r4, r0
 800e690:	460d      	mov	r5, r1
 800e692:	4602      	mov	r2, r0
 800e694:	460b      	mov	r3, r1
 800e696:	4640      	mov	r0, r8
 800e698:	4649      	mov	r1, r9
 800e69a:	f7f1 ffc5 	bl	8000628 <__aeabi_dmul>
 800e69e:	4b62      	ldr	r3, [pc, #392]	; (800e828 <__ieee754_pow+0x770>)
 800e6a0:	4680      	mov	r8, r0
 800e6a2:	4689      	mov	r9, r1
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	4629      	mov	r1, r5
 800e6aa:	f7f1 fe05 	bl	80002b8 <__aeabi_dsub>
 800e6ae:	4632      	mov	r2, r6
 800e6b0:	463b      	mov	r3, r7
 800e6b2:	f7f1 fe01 	bl	80002b8 <__aeabi_dsub>
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	4650      	mov	r0, sl
 800e6bc:	4659      	mov	r1, fp
 800e6be:	f7f1 fdfb 	bl	80002b8 <__aeabi_dsub>
 800e6c2:	ec53 2b18 	vmov	r2, r3, d8
 800e6c6:	f7f1 ffaf 	bl	8000628 <__aeabi_dmul>
 800e6ca:	4622      	mov	r2, r4
 800e6cc:	4606      	mov	r6, r0
 800e6ce:	460f      	mov	r7, r1
 800e6d0:	462b      	mov	r3, r5
 800e6d2:	ec51 0b19 	vmov	r0, r1, d9
 800e6d6:	f7f1 ffa7 	bl	8000628 <__aeabi_dmul>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	460b      	mov	r3, r1
 800e6de:	4630      	mov	r0, r6
 800e6e0:	4639      	mov	r1, r7
 800e6e2:	f7f1 fdeb 	bl	80002bc <__adddf3>
 800e6e6:	4606      	mov	r6, r0
 800e6e8:	460f      	mov	r7, r1
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	4640      	mov	r0, r8
 800e6f0:	4649      	mov	r1, r9
 800e6f2:	f7f1 fde3 	bl	80002bc <__adddf3>
 800e6f6:	a33e      	add	r3, pc, #248	; (adr r3, 800e7f0 <__ieee754_pow+0x738>)
 800e6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fc:	2000      	movs	r0, #0
 800e6fe:	4604      	mov	r4, r0
 800e700:	460d      	mov	r5, r1
 800e702:	f7f1 ff91 	bl	8000628 <__aeabi_dmul>
 800e706:	4642      	mov	r2, r8
 800e708:	ec41 0b18 	vmov	d8, r0, r1
 800e70c:	464b      	mov	r3, r9
 800e70e:	4620      	mov	r0, r4
 800e710:	4629      	mov	r1, r5
 800e712:	f7f1 fdd1 	bl	80002b8 <__aeabi_dsub>
 800e716:	4602      	mov	r2, r0
 800e718:	460b      	mov	r3, r1
 800e71a:	4630      	mov	r0, r6
 800e71c:	4639      	mov	r1, r7
 800e71e:	f7f1 fdcb 	bl	80002b8 <__aeabi_dsub>
 800e722:	a335      	add	r3, pc, #212	; (adr r3, 800e7f8 <__ieee754_pow+0x740>)
 800e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e728:	f7f1 ff7e 	bl	8000628 <__aeabi_dmul>
 800e72c:	a334      	add	r3, pc, #208	; (adr r3, 800e800 <__ieee754_pow+0x748>)
 800e72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e732:	4606      	mov	r6, r0
 800e734:	460f      	mov	r7, r1
 800e736:	4620      	mov	r0, r4
 800e738:	4629      	mov	r1, r5
 800e73a:	f7f1 ff75 	bl	8000628 <__aeabi_dmul>
 800e73e:	4602      	mov	r2, r0
 800e740:	460b      	mov	r3, r1
 800e742:	4630      	mov	r0, r6
 800e744:	4639      	mov	r1, r7
 800e746:	f7f1 fdb9 	bl	80002bc <__adddf3>
 800e74a:	9a07      	ldr	r2, [sp, #28]
 800e74c:	4b37      	ldr	r3, [pc, #220]	; (800e82c <__ieee754_pow+0x774>)
 800e74e:	4413      	add	r3, r2
 800e750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e754:	f7f1 fdb2 	bl	80002bc <__adddf3>
 800e758:	4682      	mov	sl, r0
 800e75a:	9805      	ldr	r0, [sp, #20]
 800e75c:	468b      	mov	fp, r1
 800e75e:	f7f1 fef9 	bl	8000554 <__aeabi_i2d>
 800e762:	9a07      	ldr	r2, [sp, #28]
 800e764:	4b32      	ldr	r3, [pc, #200]	; (800e830 <__ieee754_pow+0x778>)
 800e766:	4413      	add	r3, r2
 800e768:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e76c:	4606      	mov	r6, r0
 800e76e:	460f      	mov	r7, r1
 800e770:	4652      	mov	r2, sl
 800e772:	465b      	mov	r3, fp
 800e774:	ec51 0b18 	vmov	r0, r1, d8
 800e778:	f7f1 fda0 	bl	80002bc <__adddf3>
 800e77c:	4642      	mov	r2, r8
 800e77e:	464b      	mov	r3, r9
 800e780:	f7f1 fd9c 	bl	80002bc <__adddf3>
 800e784:	4632      	mov	r2, r6
 800e786:	463b      	mov	r3, r7
 800e788:	f7f1 fd98 	bl	80002bc <__adddf3>
 800e78c:	2000      	movs	r0, #0
 800e78e:	4632      	mov	r2, r6
 800e790:	463b      	mov	r3, r7
 800e792:	4604      	mov	r4, r0
 800e794:	460d      	mov	r5, r1
 800e796:	f7f1 fd8f 	bl	80002b8 <__aeabi_dsub>
 800e79a:	4642      	mov	r2, r8
 800e79c:	464b      	mov	r3, r9
 800e79e:	f7f1 fd8b 	bl	80002b8 <__aeabi_dsub>
 800e7a2:	ec53 2b18 	vmov	r2, r3, d8
 800e7a6:	f7f1 fd87 	bl	80002b8 <__aeabi_dsub>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	4650      	mov	r0, sl
 800e7b0:	4659      	mov	r1, fp
 800e7b2:	e610      	b.n	800e3d6 <__ieee754_pow+0x31e>
 800e7b4:	2401      	movs	r4, #1
 800e7b6:	e6a1      	b.n	800e4fc <__ieee754_pow+0x444>
 800e7b8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e808 <__ieee754_pow+0x750>
 800e7bc:	e617      	b.n	800e3ee <__ieee754_pow+0x336>
 800e7be:	bf00      	nop
 800e7c0:	4a454eef 	.word	0x4a454eef
 800e7c4:	3fca7e28 	.word	0x3fca7e28
 800e7c8:	93c9db65 	.word	0x93c9db65
 800e7cc:	3fcd864a 	.word	0x3fcd864a
 800e7d0:	a91d4101 	.word	0xa91d4101
 800e7d4:	3fd17460 	.word	0x3fd17460
 800e7d8:	518f264d 	.word	0x518f264d
 800e7dc:	3fd55555 	.word	0x3fd55555
 800e7e0:	db6fabff 	.word	0xdb6fabff
 800e7e4:	3fdb6db6 	.word	0x3fdb6db6
 800e7e8:	33333303 	.word	0x33333303
 800e7ec:	3fe33333 	.word	0x3fe33333
 800e7f0:	e0000000 	.word	0xe0000000
 800e7f4:	3feec709 	.word	0x3feec709
 800e7f8:	dc3a03fd 	.word	0xdc3a03fd
 800e7fc:	3feec709 	.word	0x3feec709
 800e800:	145b01f5 	.word	0x145b01f5
 800e804:	be3e2fe0 	.word	0xbe3e2fe0
 800e808:	00000000 	.word	0x00000000
 800e80c:	3ff00000 	.word	0x3ff00000
 800e810:	7ff00000 	.word	0x7ff00000
 800e814:	43400000 	.word	0x43400000
 800e818:	0003988e 	.word	0x0003988e
 800e81c:	000bb679 	.word	0x000bb679
 800e820:	08010878 	.word	0x08010878
 800e824:	3ff00000 	.word	0x3ff00000
 800e828:	40080000 	.word	0x40080000
 800e82c:	08010898 	.word	0x08010898
 800e830:	08010888 	.word	0x08010888
 800e834:	a3b5      	add	r3, pc, #724	; (adr r3, 800eb0c <__ieee754_pow+0xa54>)
 800e836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83a:	4640      	mov	r0, r8
 800e83c:	4649      	mov	r1, r9
 800e83e:	f7f1 fd3d 	bl	80002bc <__adddf3>
 800e842:	4622      	mov	r2, r4
 800e844:	ec41 0b1a 	vmov	d10, r0, r1
 800e848:	462b      	mov	r3, r5
 800e84a:	4630      	mov	r0, r6
 800e84c:	4639      	mov	r1, r7
 800e84e:	f7f1 fd33 	bl	80002b8 <__aeabi_dsub>
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	ec51 0b1a 	vmov	r0, r1, d10
 800e85a:	f7f2 f975 	bl	8000b48 <__aeabi_dcmpgt>
 800e85e:	2800      	cmp	r0, #0
 800e860:	f47f ae04 	bne.w	800e46c <__ieee754_pow+0x3b4>
 800e864:	4aa4      	ldr	r2, [pc, #656]	; (800eaf8 <__ieee754_pow+0xa40>)
 800e866:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e86a:	4293      	cmp	r3, r2
 800e86c:	f340 8108 	ble.w	800ea80 <__ieee754_pow+0x9c8>
 800e870:	151b      	asrs	r3, r3, #20
 800e872:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e876:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e87a:	fa4a f303 	asr.w	r3, sl, r3
 800e87e:	445b      	add	r3, fp
 800e880:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e884:	4e9d      	ldr	r6, [pc, #628]	; (800eafc <__ieee754_pow+0xa44>)
 800e886:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e88a:	4116      	asrs	r6, r2
 800e88c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e890:	2000      	movs	r0, #0
 800e892:	ea23 0106 	bic.w	r1, r3, r6
 800e896:	f1c2 0214 	rsb	r2, r2, #20
 800e89a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e89e:	fa4a fa02 	asr.w	sl, sl, r2
 800e8a2:	f1bb 0f00 	cmp.w	fp, #0
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	4629      	mov	r1, r5
 800e8ae:	bfb8      	it	lt
 800e8b0:	f1ca 0a00 	rsblt	sl, sl, #0
 800e8b4:	f7f1 fd00 	bl	80002b8 <__aeabi_dsub>
 800e8b8:	ec41 0b19 	vmov	d9, r0, r1
 800e8bc:	4642      	mov	r2, r8
 800e8be:	464b      	mov	r3, r9
 800e8c0:	ec51 0b19 	vmov	r0, r1, d9
 800e8c4:	f7f1 fcfa 	bl	80002bc <__adddf3>
 800e8c8:	a37b      	add	r3, pc, #492	; (adr r3, 800eab8 <__ieee754_pow+0xa00>)
 800e8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ce:	2000      	movs	r0, #0
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	460d      	mov	r5, r1
 800e8d4:	f7f1 fea8 	bl	8000628 <__aeabi_dmul>
 800e8d8:	ec53 2b19 	vmov	r2, r3, d9
 800e8dc:	4606      	mov	r6, r0
 800e8de:	460f      	mov	r7, r1
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	4629      	mov	r1, r5
 800e8e4:	f7f1 fce8 	bl	80002b8 <__aeabi_dsub>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	4640      	mov	r0, r8
 800e8ee:	4649      	mov	r1, r9
 800e8f0:	f7f1 fce2 	bl	80002b8 <__aeabi_dsub>
 800e8f4:	a372      	add	r3, pc, #456	; (adr r3, 800eac0 <__ieee754_pow+0xa08>)
 800e8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fa:	f7f1 fe95 	bl	8000628 <__aeabi_dmul>
 800e8fe:	a372      	add	r3, pc, #456	; (adr r3, 800eac8 <__ieee754_pow+0xa10>)
 800e900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e904:	4680      	mov	r8, r0
 800e906:	4689      	mov	r9, r1
 800e908:	4620      	mov	r0, r4
 800e90a:	4629      	mov	r1, r5
 800e90c:	f7f1 fe8c 	bl	8000628 <__aeabi_dmul>
 800e910:	4602      	mov	r2, r0
 800e912:	460b      	mov	r3, r1
 800e914:	4640      	mov	r0, r8
 800e916:	4649      	mov	r1, r9
 800e918:	f7f1 fcd0 	bl	80002bc <__adddf3>
 800e91c:	4604      	mov	r4, r0
 800e91e:	460d      	mov	r5, r1
 800e920:	4602      	mov	r2, r0
 800e922:	460b      	mov	r3, r1
 800e924:	4630      	mov	r0, r6
 800e926:	4639      	mov	r1, r7
 800e928:	f7f1 fcc8 	bl	80002bc <__adddf3>
 800e92c:	4632      	mov	r2, r6
 800e92e:	463b      	mov	r3, r7
 800e930:	4680      	mov	r8, r0
 800e932:	4689      	mov	r9, r1
 800e934:	f7f1 fcc0 	bl	80002b8 <__aeabi_dsub>
 800e938:	4602      	mov	r2, r0
 800e93a:	460b      	mov	r3, r1
 800e93c:	4620      	mov	r0, r4
 800e93e:	4629      	mov	r1, r5
 800e940:	f7f1 fcba 	bl	80002b8 <__aeabi_dsub>
 800e944:	4642      	mov	r2, r8
 800e946:	4606      	mov	r6, r0
 800e948:	460f      	mov	r7, r1
 800e94a:	464b      	mov	r3, r9
 800e94c:	4640      	mov	r0, r8
 800e94e:	4649      	mov	r1, r9
 800e950:	f7f1 fe6a 	bl	8000628 <__aeabi_dmul>
 800e954:	a35e      	add	r3, pc, #376	; (adr r3, 800ead0 <__ieee754_pow+0xa18>)
 800e956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95a:	4604      	mov	r4, r0
 800e95c:	460d      	mov	r5, r1
 800e95e:	f7f1 fe63 	bl	8000628 <__aeabi_dmul>
 800e962:	a35d      	add	r3, pc, #372	; (adr r3, 800ead8 <__ieee754_pow+0xa20>)
 800e964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e968:	f7f1 fca6 	bl	80002b8 <__aeabi_dsub>
 800e96c:	4622      	mov	r2, r4
 800e96e:	462b      	mov	r3, r5
 800e970:	f7f1 fe5a 	bl	8000628 <__aeabi_dmul>
 800e974:	a35a      	add	r3, pc, #360	; (adr r3, 800eae0 <__ieee754_pow+0xa28>)
 800e976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97a:	f7f1 fc9f 	bl	80002bc <__adddf3>
 800e97e:	4622      	mov	r2, r4
 800e980:	462b      	mov	r3, r5
 800e982:	f7f1 fe51 	bl	8000628 <__aeabi_dmul>
 800e986:	a358      	add	r3, pc, #352	; (adr r3, 800eae8 <__ieee754_pow+0xa30>)
 800e988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98c:	f7f1 fc94 	bl	80002b8 <__aeabi_dsub>
 800e990:	4622      	mov	r2, r4
 800e992:	462b      	mov	r3, r5
 800e994:	f7f1 fe48 	bl	8000628 <__aeabi_dmul>
 800e998:	a355      	add	r3, pc, #340	; (adr r3, 800eaf0 <__ieee754_pow+0xa38>)
 800e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99e:	f7f1 fc8d 	bl	80002bc <__adddf3>
 800e9a2:	4622      	mov	r2, r4
 800e9a4:	462b      	mov	r3, r5
 800e9a6:	f7f1 fe3f 	bl	8000628 <__aeabi_dmul>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	4640      	mov	r0, r8
 800e9b0:	4649      	mov	r1, r9
 800e9b2:	f7f1 fc81 	bl	80002b8 <__aeabi_dsub>
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	460d      	mov	r5, r1
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	460b      	mov	r3, r1
 800e9be:	4640      	mov	r0, r8
 800e9c0:	4649      	mov	r1, r9
 800e9c2:	f7f1 fe31 	bl	8000628 <__aeabi_dmul>
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	ec41 0b19 	vmov	d9, r0, r1
 800e9cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	4629      	mov	r1, r5
 800e9d4:	f7f1 fc70 	bl	80002b8 <__aeabi_dsub>
 800e9d8:	4602      	mov	r2, r0
 800e9da:	460b      	mov	r3, r1
 800e9dc:	ec51 0b19 	vmov	r0, r1, d9
 800e9e0:	f7f1 ff4c 	bl	800087c <__aeabi_ddiv>
 800e9e4:	4632      	mov	r2, r6
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	460d      	mov	r5, r1
 800e9ea:	463b      	mov	r3, r7
 800e9ec:	4640      	mov	r0, r8
 800e9ee:	4649      	mov	r1, r9
 800e9f0:	f7f1 fe1a 	bl	8000628 <__aeabi_dmul>
 800e9f4:	4632      	mov	r2, r6
 800e9f6:	463b      	mov	r3, r7
 800e9f8:	f7f1 fc60 	bl	80002bc <__adddf3>
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	460b      	mov	r3, r1
 800ea00:	4620      	mov	r0, r4
 800ea02:	4629      	mov	r1, r5
 800ea04:	f7f1 fc58 	bl	80002b8 <__aeabi_dsub>
 800ea08:	4642      	mov	r2, r8
 800ea0a:	464b      	mov	r3, r9
 800ea0c:	f7f1 fc54 	bl	80002b8 <__aeabi_dsub>
 800ea10:	460b      	mov	r3, r1
 800ea12:	4602      	mov	r2, r0
 800ea14:	493a      	ldr	r1, [pc, #232]	; (800eb00 <__ieee754_pow+0xa48>)
 800ea16:	2000      	movs	r0, #0
 800ea18:	f7f1 fc4e 	bl	80002b8 <__aeabi_dsub>
 800ea1c:	ec41 0b10 	vmov	d0, r0, r1
 800ea20:	ee10 3a90 	vmov	r3, s1
 800ea24:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ea28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea2c:	da2b      	bge.n	800ea86 <__ieee754_pow+0x9ce>
 800ea2e:	4650      	mov	r0, sl
 800ea30:	f001 fa72 	bl	800ff18 <scalbn>
 800ea34:	ec51 0b10 	vmov	r0, r1, d0
 800ea38:	ec53 2b18 	vmov	r2, r3, d8
 800ea3c:	f7ff bbed 	b.w	800e21a <__ieee754_pow+0x162>
 800ea40:	4b30      	ldr	r3, [pc, #192]	; (800eb04 <__ieee754_pow+0xa4c>)
 800ea42:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ea46:	429e      	cmp	r6, r3
 800ea48:	f77f af0c 	ble.w	800e864 <__ieee754_pow+0x7ac>
 800ea4c:	4b2e      	ldr	r3, [pc, #184]	; (800eb08 <__ieee754_pow+0xa50>)
 800ea4e:	440b      	add	r3, r1
 800ea50:	4303      	orrs	r3, r0
 800ea52:	d009      	beq.n	800ea68 <__ieee754_pow+0x9b0>
 800ea54:	ec51 0b18 	vmov	r0, r1, d8
 800ea58:	2200      	movs	r2, #0
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	f7f2 f856 	bl	8000b0c <__aeabi_dcmplt>
 800ea60:	3800      	subs	r0, #0
 800ea62:	bf18      	it	ne
 800ea64:	2001      	movne	r0, #1
 800ea66:	e447      	b.n	800e2f8 <__ieee754_pow+0x240>
 800ea68:	4622      	mov	r2, r4
 800ea6a:	462b      	mov	r3, r5
 800ea6c:	f7f1 fc24 	bl	80002b8 <__aeabi_dsub>
 800ea70:	4642      	mov	r2, r8
 800ea72:	464b      	mov	r3, r9
 800ea74:	f7f2 f85e 	bl	8000b34 <__aeabi_dcmpge>
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	f43f aef3 	beq.w	800e864 <__ieee754_pow+0x7ac>
 800ea7e:	e7e9      	b.n	800ea54 <__ieee754_pow+0x99c>
 800ea80:	f04f 0a00 	mov.w	sl, #0
 800ea84:	e71a      	b.n	800e8bc <__ieee754_pow+0x804>
 800ea86:	ec51 0b10 	vmov	r0, r1, d0
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	e7d4      	b.n	800ea38 <__ieee754_pow+0x980>
 800ea8e:	491c      	ldr	r1, [pc, #112]	; (800eb00 <__ieee754_pow+0xa48>)
 800ea90:	2000      	movs	r0, #0
 800ea92:	f7ff bb30 	b.w	800e0f6 <__ieee754_pow+0x3e>
 800ea96:	2000      	movs	r0, #0
 800ea98:	2100      	movs	r1, #0
 800ea9a:	f7ff bb2c 	b.w	800e0f6 <__ieee754_pow+0x3e>
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	4639      	mov	r1, r7
 800eaa2:	f7ff bb28 	b.w	800e0f6 <__ieee754_pow+0x3e>
 800eaa6:	9204      	str	r2, [sp, #16]
 800eaa8:	f7ff bb7a 	b.w	800e1a0 <__ieee754_pow+0xe8>
 800eaac:	2300      	movs	r3, #0
 800eaae:	f7ff bb64 	b.w	800e17a <__ieee754_pow+0xc2>
 800eab2:	bf00      	nop
 800eab4:	f3af 8000 	nop.w
 800eab8:	00000000 	.word	0x00000000
 800eabc:	3fe62e43 	.word	0x3fe62e43
 800eac0:	fefa39ef 	.word	0xfefa39ef
 800eac4:	3fe62e42 	.word	0x3fe62e42
 800eac8:	0ca86c39 	.word	0x0ca86c39
 800eacc:	be205c61 	.word	0xbe205c61
 800ead0:	72bea4d0 	.word	0x72bea4d0
 800ead4:	3e663769 	.word	0x3e663769
 800ead8:	c5d26bf1 	.word	0xc5d26bf1
 800eadc:	3ebbbd41 	.word	0x3ebbbd41
 800eae0:	af25de2c 	.word	0xaf25de2c
 800eae4:	3f11566a 	.word	0x3f11566a
 800eae8:	16bebd93 	.word	0x16bebd93
 800eaec:	3f66c16c 	.word	0x3f66c16c
 800eaf0:	5555553e 	.word	0x5555553e
 800eaf4:	3fc55555 	.word	0x3fc55555
 800eaf8:	3fe00000 	.word	0x3fe00000
 800eafc:	000fffff 	.word	0x000fffff
 800eb00:	3ff00000 	.word	0x3ff00000
 800eb04:	4090cbff 	.word	0x4090cbff
 800eb08:	3f6f3400 	.word	0x3f6f3400
 800eb0c:	652b82fe 	.word	0x652b82fe
 800eb10:	3c971547 	.word	0x3c971547
 800eb14:	00000000 	.word	0x00000000

0800eb18 <__ieee754_rem_pio2>:
 800eb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb1c:	ed2d 8b02 	vpush	{d8}
 800eb20:	ec55 4b10 	vmov	r4, r5, d0
 800eb24:	4bca      	ldr	r3, [pc, #808]	; (800ee50 <__ieee754_rem_pio2+0x338>)
 800eb26:	b08b      	sub	sp, #44	; 0x2c
 800eb28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800eb2c:	4598      	cmp	r8, r3
 800eb2e:	4682      	mov	sl, r0
 800eb30:	9502      	str	r5, [sp, #8]
 800eb32:	dc08      	bgt.n	800eb46 <__ieee754_rem_pio2+0x2e>
 800eb34:	2200      	movs	r2, #0
 800eb36:	2300      	movs	r3, #0
 800eb38:	ed80 0b00 	vstr	d0, [r0]
 800eb3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eb40:	f04f 0b00 	mov.w	fp, #0
 800eb44:	e028      	b.n	800eb98 <__ieee754_rem_pio2+0x80>
 800eb46:	4bc3      	ldr	r3, [pc, #780]	; (800ee54 <__ieee754_rem_pio2+0x33c>)
 800eb48:	4598      	cmp	r8, r3
 800eb4a:	dc78      	bgt.n	800ec3e <__ieee754_rem_pio2+0x126>
 800eb4c:	9b02      	ldr	r3, [sp, #8]
 800eb4e:	4ec2      	ldr	r6, [pc, #776]	; (800ee58 <__ieee754_rem_pio2+0x340>)
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	ee10 0a10 	vmov	r0, s0
 800eb56:	a3b0      	add	r3, pc, #704	; (adr r3, 800ee18 <__ieee754_rem_pio2+0x300>)
 800eb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	dd39      	ble.n	800ebd4 <__ieee754_rem_pio2+0xbc>
 800eb60:	f7f1 fbaa 	bl	80002b8 <__aeabi_dsub>
 800eb64:	45b0      	cmp	r8, r6
 800eb66:	4604      	mov	r4, r0
 800eb68:	460d      	mov	r5, r1
 800eb6a:	d01b      	beq.n	800eba4 <__ieee754_rem_pio2+0x8c>
 800eb6c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ee20 <__ieee754_rem_pio2+0x308>)
 800eb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb72:	f7f1 fba1 	bl	80002b8 <__aeabi_dsub>
 800eb76:	4602      	mov	r2, r0
 800eb78:	460b      	mov	r3, r1
 800eb7a:	e9ca 2300 	strd	r2, r3, [sl]
 800eb7e:	4620      	mov	r0, r4
 800eb80:	4629      	mov	r1, r5
 800eb82:	f7f1 fb99 	bl	80002b8 <__aeabi_dsub>
 800eb86:	a3a6      	add	r3, pc, #664	; (adr r3, 800ee20 <__ieee754_rem_pio2+0x308>)
 800eb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8c:	f7f1 fb94 	bl	80002b8 <__aeabi_dsub>
 800eb90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eb94:	f04f 0b01 	mov.w	fp, #1
 800eb98:	4658      	mov	r0, fp
 800eb9a:	b00b      	add	sp, #44	; 0x2c
 800eb9c:	ecbd 8b02 	vpop	{d8}
 800eba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba4:	a3a0      	add	r3, pc, #640	; (adr r3, 800ee28 <__ieee754_rem_pio2+0x310>)
 800eba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebaa:	f7f1 fb85 	bl	80002b8 <__aeabi_dsub>
 800ebae:	a3a0      	add	r3, pc, #640	; (adr r3, 800ee30 <__ieee754_rem_pio2+0x318>)
 800ebb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb4:	4604      	mov	r4, r0
 800ebb6:	460d      	mov	r5, r1
 800ebb8:	f7f1 fb7e 	bl	80002b8 <__aeabi_dsub>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	460b      	mov	r3, r1
 800ebc0:	e9ca 2300 	strd	r2, r3, [sl]
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	4629      	mov	r1, r5
 800ebc8:	f7f1 fb76 	bl	80002b8 <__aeabi_dsub>
 800ebcc:	a398      	add	r3, pc, #608	; (adr r3, 800ee30 <__ieee754_rem_pio2+0x318>)
 800ebce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd2:	e7db      	b.n	800eb8c <__ieee754_rem_pio2+0x74>
 800ebd4:	f7f1 fb72 	bl	80002bc <__adddf3>
 800ebd8:	45b0      	cmp	r8, r6
 800ebda:	4604      	mov	r4, r0
 800ebdc:	460d      	mov	r5, r1
 800ebde:	d016      	beq.n	800ec0e <__ieee754_rem_pio2+0xf6>
 800ebe0:	a38f      	add	r3, pc, #572	; (adr r3, 800ee20 <__ieee754_rem_pio2+0x308>)
 800ebe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe6:	f7f1 fb69 	bl	80002bc <__adddf3>
 800ebea:	4602      	mov	r2, r0
 800ebec:	460b      	mov	r3, r1
 800ebee:	e9ca 2300 	strd	r2, r3, [sl]
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	4629      	mov	r1, r5
 800ebf6:	f7f1 fb5f 	bl	80002b8 <__aeabi_dsub>
 800ebfa:	a389      	add	r3, pc, #548	; (adr r3, 800ee20 <__ieee754_rem_pio2+0x308>)
 800ebfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec00:	f7f1 fb5c 	bl	80002bc <__adddf3>
 800ec04:	f04f 3bff 	mov.w	fp, #4294967295
 800ec08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec0c:	e7c4      	b.n	800eb98 <__ieee754_rem_pio2+0x80>
 800ec0e:	a386      	add	r3, pc, #536	; (adr r3, 800ee28 <__ieee754_rem_pio2+0x310>)
 800ec10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec14:	f7f1 fb52 	bl	80002bc <__adddf3>
 800ec18:	a385      	add	r3, pc, #532	; (adr r3, 800ee30 <__ieee754_rem_pio2+0x318>)
 800ec1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1e:	4604      	mov	r4, r0
 800ec20:	460d      	mov	r5, r1
 800ec22:	f7f1 fb4b 	bl	80002bc <__adddf3>
 800ec26:	4602      	mov	r2, r0
 800ec28:	460b      	mov	r3, r1
 800ec2a:	e9ca 2300 	strd	r2, r3, [sl]
 800ec2e:	4620      	mov	r0, r4
 800ec30:	4629      	mov	r1, r5
 800ec32:	f7f1 fb41 	bl	80002b8 <__aeabi_dsub>
 800ec36:	a37e      	add	r3, pc, #504	; (adr r3, 800ee30 <__ieee754_rem_pio2+0x318>)
 800ec38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3c:	e7e0      	b.n	800ec00 <__ieee754_rem_pio2+0xe8>
 800ec3e:	4b87      	ldr	r3, [pc, #540]	; (800ee5c <__ieee754_rem_pio2+0x344>)
 800ec40:	4598      	cmp	r8, r3
 800ec42:	f300 80d9 	bgt.w	800edf8 <__ieee754_rem_pio2+0x2e0>
 800ec46:	f001 f8d3 	bl	800fdf0 <fabs>
 800ec4a:	ec55 4b10 	vmov	r4, r5, d0
 800ec4e:	ee10 0a10 	vmov	r0, s0
 800ec52:	a379      	add	r3, pc, #484	; (adr r3, 800ee38 <__ieee754_rem_pio2+0x320>)
 800ec54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec58:	4629      	mov	r1, r5
 800ec5a:	f7f1 fce5 	bl	8000628 <__aeabi_dmul>
 800ec5e:	4b80      	ldr	r3, [pc, #512]	; (800ee60 <__ieee754_rem_pio2+0x348>)
 800ec60:	2200      	movs	r2, #0
 800ec62:	f7f1 fb2b 	bl	80002bc <__adddf3>
 800ec66:	f7f1 ff8f 	bl	8000b88 <__aeabi_d2iz>
 800ec6a:	4683      	mov	fp, r0
 800ec6c:	f7f1 fc72 	bl	8000554 <__aeabi_i2d>
 800ec70:	4602      	mov	r2, r0
 800ec72:	460b      	mov	r3, r1
 800ec74:	ec43 2b18 	vmov	d8, r2, r3
 800ec78:	a367      	add	r3, pc, #412	; (adr r3, 800ee18 <__ieee754_rem_pio2+0x300>)
 800ec7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7e:	f7f1 fcd3 	bl	8000628 <__aeabi_dmul>
 800ec82:	4602      	mov	r2, r0
 800ec84:	460b      	mov	r3, r1
 800ec86:	4620      	mov	r0, r4
 800ec88:	4629      	mov	r1, r5
 800ec8a:	f7f1 fb15 	bl	80002b8 <__aeabi_dsub>
 800ec8e:	a364      	add	r3, pc, #400	; (adr r3, 800ee20 <__ieee754_rem_pio2+0x308>)
 800ec90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec94:	4606      	mov	r6, r0
 800ec96:	460f      	mov	r7, r1
 800ec98:	ec51 0b18 	vmov	r0, r1, d8
 800ec9c:	f7f1 fcc4 	bl	8000628 <__aeabi_dmul>
 800eca0:	f1bb 0f1f 	cmp.w	fp, #31
 800eca4:	4604      	mov	r4, r0
 800eca6:	460d      	mov	r5, r1
 800eca8:	dc0d      	bgt.n	800ecc6 <__ieee754_rem_pio2+0x1ae>
 800ecaa:	4b6e      	ldr	r3, [pc, #440]	; (800ee64 <__ieee754_rem_pio2+0x34c>)
 800ecac:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ecb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecb4:	4543      	cmp	r3, r8
 800ecb6:	d006      	beq.n	800ecc6 <__ieee754_rem_pio2+0x1ae>
 800ecb8:	4622      	mov	r2, r4
 800ecba:	462b      	mov	r3, r5
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	4639      	mov	r1, r7
 800ecc0:	f7f1 fafa 	bl	80002b8 <__aeabi_dsub>
 800ecc4:	e00f      	b.n	800ece6 <__ieee754_rem_pio2+0x1ce>
 800ecc6:	462b      	mov	r3, r5
 800ecc8:	4622      	mov	r2, r4
 800ecca:	4630      	mov	r0, r6
 800eccc:	4639      	mov	r1, r7
 800ecce:	f7f1 faf3 	bl	80002b8 <__aeabi_dsub>
 800ecd2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ecd6:	9303      	str	r3, [sp, #12]
 800ecd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ecdc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ece0:	f1b8 0f10 	cmp.w	r8, #16
 800ece4:	dc02      	bgt.n	800ecec <__ieee754_rem_pio2+0x1d4>
 800ece6:	e9ca 0100 	strd	r0, r1, [sl]
 800ecea:	e039      	b.n	800ed60 <__ieee754_rem_pio2+0x248>
 800ecec:	a34e      	add	r3, pc, #312	; (adr r3, 800ee28 <__ieee754_rem_pio2+0x310>)
 800ecee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf2:	ec51 0b18 	vmov	r0, r1, d8
 800ecf6:	f7f1 fc97 	bl	8000628 <__aeabi_dmul>
 800ecfa:	4604      	mov	r4, r0
 800ecfc:	460d      	mov	r5, r1
 800ecfe:	4602      	mov	r2, r0
 800ed00:	460b      	mov	r3, r1
 800ed02:	4630      	mov	r0, r6
 800ed04:	4639      	mov	r1, r7
 800ed06:	f7f1 fad7 	bl	80002b8 <__aeabi_dsub>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	4680      	mov	r8, r0
 800ed10:	4689      	mov	r9, r1
 800ed12:	4630      	mov	r0, r6
 800ed14:	4639      	mov	r1, r7
 800ed16:	f7f1 facf 	bl	80002b8 <__aeabi_dsub>
 800ed1a:	4622      	mov	r2, r4
 800ed1c:	462b      	mov	r3, r5
 800ed1e:	f7f1 facb 	bl	80002b8 <__aeabi_dsub>
 800ed22:	a343      	add	r3, pc, #268	; (adr r3, 800ee30 <__ieee754_rem_pio2+0x318>)
 800ed24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed28:	4604      	mov	r4, r0
 800ed2a:	460d      	mov	r5, r1
 800ed2c:	ec51 0b18 	vmov	r0, r1, d8
 800ed30:	f7f1 fc7a 	bl	8000628 <__aeabi_dmul>
 800ed34:	4622      	mov	r2, r4
 800ed36:	462b      	mov	r3, r5
 800ed38:	f7f1 fabe 	bl	80002b8 <__aeabi_dsub>
 800ed3c:	4602      	mov	r2, r0
 800ed3e:	460b      	mov	r3, r1
 800ed40:	4604      	mov	r4, r0
 800ed42:	460d      	mov	r5, r1
 800ed44:	4640      	mov	r0, r8
 800ed46:	4649      	mov	r1, r9
 800ed48:	f7f1 fab6 	bl	80002b8 <__aeabi_dsub>
 800ed4c:	9a03      	ldr	r2, [sp, #12]
 800ed4e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ed52:	1ad3      	subs	r3, r2, r3
 800ed54:	2b31      	cmp	r3, #49	; 0x31
 800ed56:	dc24      	bgt.n	800eda2 <__ieee754_rem_pio2+0x28a>
 800ed58:	e9ca 0100 	strd	r0, r1, [sl]
 800ed5c:	4646      	mov	r6, r8
 800ed5e:	464f      	mov	r7, r9
 800ed60:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed64:	4630      	mov	r0, r6
 800ed66:	4642      	mov	r2, r8
 800ed68:	464b      	mov	r3, r9
 800ed6a:	4639      	mov	r1, r7
 800ed6c:	f7f1 faa4 	bl	80002b8 <__aeabi_dsub>
 800ed70:	462b      	mov	r3, r5
 800ed72:	4622      	mov	r2, r4
 800ed74:	f7f1 faa0 	bl	80002b8 <__aeabi_dsub>
 800ed78:	9b02      	ldr	r3, [sp, #8]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed80:	f6bf af0a 	bge.w	800eb98 <__ieee754_rem_pio2+0x80>
 800ed84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ed88:	f8ca 3004 	str.w	r3, [sl, #4]
 800ed8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed90:	f8ca 8000 	str.w	r8, [sl]
 800ed94:	f8ca 0008 	str.w	r0, [sl, #8]
 800ed98:	f8ca 300c 	str.w	r3, [sl, #12]
 800ed9c:	f1cb 0b00 	rsb	fp, fp, #0
 800eda0:	e6fa      	b.n	800eb98 <__ieee754_rem_pio2+0x80>
 800eda2:	a327      	add	r3, pc, #156	; (adr r3, 800ee40 <__ieee754_rem_pio2+0x328>)
 800eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda8:	ec51 0b18 	vmov	r0, r1, d8
 800edac:	f7f1 fc3c 	bl	8000628 <__aeabi_dmul>
 800edb0:	4604      	mov	r4, r0
 800edb2:	460d      	mov	r5, r1
 800edb4:	4602      	mov	r2, r0
 800edb6:	460b      	mov	r3, r1
 800edb8:	4640      	mov	r0, r8
 800edba:	4649      	mov	r1, r9
 800edbc:	f7f1 fa7c 	bl	80002b8 <__aeabi_dsub>
 800edc0:	4602      	mov	r2, r0
 800edc2:	460b      	mov	r3, r1
 800edc4:	4606      	mov	r6, r0
 800edc6:	460f      	mov	r7, r1
 800edc8:	4640      	mov	r0, r8
 800edca:	4649      	mov	r1, r9
 800edcc:	f7f1 fa74 	bl	80002b8 <__aeabi_dsub>
 800edd0:	4622      	mov	r2, r4
 800edd2:	462b      	mov	r3, r5
 800edd4:	f7f1 fa70 	bl	80002b8 <__aeabi_dsub>
 800edd8:	a31b      	add	r3, pc, #108	; (adr r3, 800ee48 <__ieee754_rem_pio2+0x330>)
 800edda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edde:	4604      	mov	r4, r0
 800ede0:	460d      	mov	r5, r1
 800ede2:	ec51 0b18 	vmov	r0, r1, d8
 800ede6:	f7f1 fc1f 	bl	8000628 <__aeabi_dmul>
 800edea:	4622      	mov	r2, r4
 800edec:	462b      	mov	r3, r5
 800edee:	f7f1 fa63 	bl	80002b8 <__aeabi_dsub>
 800edf2:	4604      	mov	r4, r0
 800edf4:	460d      	mov	r5, r1
 800edf6:	e75f      	b.n	800ecb8 <__ieee754_rem_pio2+0x1a0>
 800edf8:	4b1b      	ldr	r3, [pc, #108]	; (800ee68 <__ieee754_rem_pio2+0x350>)
 800edfa:	4598      	cmp	r8, r3
 800edfc:	dd36      	ble.n	800ee6c <__ieee754_rem_pio2+0x354>
 800edfe:	ee10 2a10 	vmov	r2, s0
 800ee02:	462b      	mov	r3, r5
 800ee04:	4620      	mov	r0, r4
 800ee06:	4629      	mov	r1, r5
 800ee08:	f7f1 fa56 	bl	80002b8 <__aeabi_dsub>
 800ee0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee10:	e9ca 0100 	strd	r0, r1, [sl]
 800ee14:	e694      	b.n	800eb40 <__ieee754_rem_pio2+0x28>
 800ee16:	bf00      	nop
 800ee18:	54400000 	.word	0x54400000
 800ee1c:	3ff921fb 	.word	0x3ff921fb
 800ee20:	1a626331 	.word	0x1a626331
 800ee24:	3dd0b461 	.word	0x3dd0b461
 800ee28:	1a600000 	.word	0x1a600000
 800ee2c:	3dd0b461 	.word	0x3dd0b461
 800ee30:	2e037073 	.word	0x2e037073
 800ee34:	3ba3198a 	.word	0x3ba3198a
 800ee38:	6dc9c883 	.word	0x6dc9c883
 800ee3c:	3fe45f30 	.word	0x3fe45f30
 800ee40:	2e000000 	.word	0x2e000000
 800ee44:	3ba3198a 	.word	0x3ba3198a
 800ee48:	252049c1 	.word	0x252049c1
 800ee4c:	397b839a 	.word	0x397b839a
 800ee50:	3fe921fb 	.word	0x3fe921fb
 800ee54:	4002d97b 	.word	0x4002d97b
 800ee58:	3ff921fb 	.word	0x3ff921fb
 800ee5c:	413921fb 	.word	0x413921fb
 800ee60:	3fe00000 	.word	0x3fe00000
 800ee64:	080108a8 	.word	0x080108a8
 800ee68:	7fefffff 	.word	0x7fefffff
 800ee6c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ee70:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ee74:	ee10 0a10 	vmov	r0, s0
 800ee78:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ee7c:	ee10 6a10 	vmov	r6, s0
 800ee80:	460f      	mov	r7, r1
 800ee82:	f7f1 fe81 	bl	8000b88 <__aeabi_d2iz>
 800ee86:	f7f1 fb65 	bl	8000554 <__aeabi_i2d>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	4630      	mov	r0, r6
 800ee90:	4639      	mov	r1, r7
 800ee92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ee96:	f7f1 fa0f 	bl	80002b8 <__aeabi_dsub>
 800ee9a:	4b23      	ldr	r3, [pc, #140]	; (800ef28 <__ieee754_rem_pio2+0x410>)
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f7f1 fbc3 	bl	8000628 <__aeabi_dmul>
 800eea2:	460f      	mov	r7, r1
 800eea4:	4606      	mov	r6, r0
 800eea6:	f7f1 fe6f 	bl	8000b88 <__aeabi_d2iz>
 800eeaa:	f7f1 fb53 	bl	8000554 <__aeabi_i2d>
 800eeae:	4602      	mov	r2, r0
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	4639      	mov	r1, r7
 800eeb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eeba:	f7f1 f9fd 	bl	80002b8 <__aeabi_dsub>
 800eebe:	4b1a      	ldr	r3, [pc, #104]	; (800ef28 <__ieee754_rem_pio2+0x410>)
 800eec0:	2200      	movs	r2, #0
 800eec2:	f7f1 fbb1 	bl	8000628 <__aeabi_dmul>
 800eec6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eeca:	ad04      	add	r5, sp, #16
 800eecc:	f04f 0803 	mov.w	r8, #3
 800eed0:	46a9      	mov	r9, r5
 800eed2:	2600      	movs	r6, #0
 800eed4:	2700      	movs	r7, #0
 800eed6:	4632      	mov	r2, r6
 800eed8:	463b      	mov	r3, r7
 800eeda:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800eede:	46c3      	mov	fp, r8
 800eee0:	3d08      	subs	r5, #8
 800eee2:	f108 38ff 	add.w	r8, r8, #4294967295
 800eee6:	f7f1 fe07 	bl	8000af8 <__aeabi_dcmpeq>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	d1f3      	bne.n	800eed6 <__ieee754_rem_pio2+0x3be>
 800eeee:	4b0f      	ldr	r3, [pc, #60]	; (800ef2c <__ieee754_rem_pio2+0x414>)
 800eef0:	9301      	str	r3, [sp, #4]
 800eef2:	2302      	movs	r3, #2
 800eef4:	9300      	str	r3, [sp, #0]
 800eef6:	4622      	mov	r2, r4
 800eef8:	465b      	mov	r3, fp
 800eefa:	4651      	mov	r1, sl
 800eefc:	4648      	mov	r0, r9
 800eefe:	f000 f997 	bl	800f230 <__kernel_rem_pio2>
 800ef02:	9b02      	ldr	r3, [sp, #8]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	4683      	mov	fp, r0
 800ef08:	f6bf ae46 	bge.w	800eb98 <__ieee754_rem_pio2+0x80>
 800ef0c:	e9da 2100 	ldrd	r2, r1, [sl]
 800ef10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef14:	e9ca 2300 	strd	r2, r3, [sl]
 800ef18:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ef1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef20:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ef24:	e73a      	b.n	800ed9c <__ieee754_rem_pio2+0x284>
 800ef26:	bf00      	nop
 800ef28:	41700000 	.word	0x41700000
 800ef2c:	08010928 	.word	0x08010928

0800ef30 <__ieee754_sqrt>:
 800ef30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef34:	ec55 4b10 	vmov	r4, r5, d0
 800ef38:	4e55      	ldr	r6, [pc, #340]	; (800f090 <__ieee754_sqrt+0x160>)
 800ef3a:	43ae      	bics	r6, r5
 800ef3c:	ee10 0a10 	vmov	r0, s0
 800ef40:	ee10 3a10 	vmov	r3, s0
 800ef44:	462a      	mov	r2, r5
 800ef46:	4629      	mov	r1, r5
 800ef48:	d110      	bne.n	800ef6c <__ieee754_sqrt+0x3c>
 800ef4a:	ee10 2a10 	vmov	r2, s0
 800ef4e:	462b      	mov	r3, r5
 800ef50:	f7f1 fb6a 	bl	8000628 <__aeabi_dmul>
 800ef54:	4602      	mov	r2, r0
 800ef56:	460b      	mov	r3, r1
 800ef58:	4620      	mov	r0, r4
 800ef5a:	4629      	mov	r1, r5
 800ef5c:	f7f1 f9ae 	bl	80002bc <__adddf3>
 800ef60:	4604      	mov	r4, r0
 800ef62:	460d      	mov	r5, r1
 800ef64:	ec45 4b10 	vmov	d0, r4, r5
 800ef68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef6c:	2d00      	cmp	r5, #0
 800ef6e:	dc10      	bgt.n	800ef92 <__ieee754_sqrt+0x62>
 800ef70:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ef74:	4330      	orrs	r0, r6
 800ef76:	d0f5      	beq.n	800ef64 <__ieee754_sqrt+0x34>
 800ef78:	b15d      	cbz	r5, 800ef92 <__ieee754_sqrt+0x62>
 800ef7a:	ee10 2a10 	vmov	r2, s0
 800ef7e:	462b      	mov	r3, r5
 800ef80:	ee10 0a10 	vmov	r0, s0
 800ef84:	f7f1 f998 	bl	80002b8 <__aeabi_dsub>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	460b      	mov	r3, r1
 800ef8c:	f7f1 fc76 	bl	800087c <__aeabi_ddiv>
 800ef90:	e7e6      	b.n	800ef60 <__ieee754_sqrt+0x30>
 800ef92:	1512      	asrs	r2, r2, #20
 800ef94:	d074      	beq.n	800f080 <__ieee754_sqrt+0x150>
 800ef96:	07d4      	lsls	r4, r2, #31
 800ef98:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ef9c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800efa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800efa4:	bf5e      	ittt	pl
 800efa6:	0fda      	lsrpl	r2, r3, #31
 800efa8:	005b      	lslpl	r3, r3, #1
 800efaa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800efae:	2400      	movs	r4, #0
 800efb0:	0fda      	lsrs	r2, r3, #31
 800efb2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800efb6:	107f      	asrs	r7, r7, #1
 800efb8:	005b      	lsls	r3, r3, #1
 800efba:	2516      	movs	r5, #22
 800efbc:	4620      	mov	r0, r4
 800efbe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800efc2:	1886      	adds	r6, r0, r2
 800efc4:	428e      	cmp	r6, r1
 800efc6:	bfde      	ittt	le
 800efc8:	1b89      	suble	r1, r1, r6
 800efca:	18b0      	addle	r0, r6, r2
 800efcc:	18a4      	addle	r4, r4, r2
 800efce:	0049      	lsls	r1, r1, #1
 800efd0:	3d01      	subs	r5, #1
 800efd2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800efd6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800efda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800efde:	d1f0      	bne.n	800efc2 <__ieee754_sqrt+0x92>
 800efe0:	462a      	mov	r2, r5
 800efe2:	f04f 0e20 	mov.w	lr, #32
 800efe6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800efea:	4281      	cmp	r1, r0
 800efec:	eb06 0c05 	add.w	ip, r6, r5
 800eff0:	dc02      	bgt.n	800eff8 <__ieee754_sqrt+0xc8>
 800eff2:	d113      	bne.n	800f01c <__ieee754_sqrt+0xec>
 800eff4:	459c      	cmp	ip, r3
 800eff6:	d811      	bhi.n	800f01c <__ieee754_sqrt+0xec>
 800eff8:	f1bc 0f00 	cmp.w	ip, #0
 800effc:	eb0c 0506 	add.w	r5, ip, r6
 800f000:	da43      	bge.n	800f08a <__ieee754_sqrt+0x15a>
 800f002:	2d00      	cmp	r5, #0
 800f004:	db41      	blt.n	800f08a <__ieee754_sqrt+0x15a>
 800f006:	f100 0801 	add.w	r8, r0, #1
 800f00a:	1a09      	subs	r1, r1, r0
 800f00c:	459c      	cmp	ip, r3
 800f00e:	bf88      	it	hi
 800f010:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f014:	eba3 030c 	sub.w	r3, r3, ip
 800f018:	4432      	add	r2, r6
 800f01a:	4640      	mov	r0, r8
 800f01c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f020:	f1be 0e01 	subs.w	lr, lr, #1
 800f024:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f028:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f02c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f030:	d1db      	bne.n	800efea <__ieee754_sqrt+0xba>
 800f032:	430b      	orrs	r3, r1
 800f034:	d006      	beq.n	800f044 <__ieee754_sqrt+0x114>
 800f036:	1c50      	adds	r0, r2, #1
 800f038:	bf13      	iteet	ne
 800f03a:	3201      	addne	r2, #1
 800f03c:	3401      	addeq	r4, #1
 800f03e:	4672      	moveq	r2, lr
 800f040:	f022 0201 	bicne.w	r2, r2, #1
 800f044:	1063      	asrs	r3, r4, #1
 800f046:	0852      	lsrs	r2, r2, #1
 800f048:	07e1      	lsls	r1, r4, #31
 800f04a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f04e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f052:	bf48      	it	mi
 800f054:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f058:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f05c:	4614      	mov	r4, r2
 800f05e:	e781      	b.n	800ef64 <__ieee754_sqrt+0x34>
 800f060:	0ad9      	lsrs	r1, r3, #11
 800f062:	3815      	subs	r0, #21
 800f064:	055b      	lsls	r3, r3, #21
 800f066:	2900      	cmp	r1, #0
 800f068:	d0fa      	beq.n	800f060 <__ieee754_sqrt+0x130>
 800f06a:	02cd      	lsls	r5, r1, #11
 800f06c:	d50a      	bpl.n	800f084 <__ieee754_sqrt+0x154>
 800f06e:	f1c2 0420 	rsb	r4, r2, #32
 800f072:	fa23 f404 	lsr.w	r4, r3, r4
 800f076:	1e55      	subs	r5, r2, #1
 800f078:	4093      	lsls	r3, r2
 800f07a:	4321      	orrs	r1, r4
 800f07c:	1b42      	subs	r2, r0, r5
 800f07e:	e78a      	b.n	800ef96 <__ieee754_sqrt+0x66>
 800f080:	4610      	mov	r0, r2
 800f082:	e7f0      	b.n	800f066 <__ieee754_sqrt+0x136>
 800f084:	0049      	lsls	r1, r1, #1
 800f086:	3201      	adds	r2, #1
 800f088:	e7ef      	b.n	800f06a <__ieee754_sqrt+0x13a>
 800f08a:	4680      	mov	r8, r0
 800f08c:	e7bd      	b.n	800f00a <__ieee754_sqrt+0xda>
 800f08e:	bf00      	nop
 800f090:	7ff00000 	.word	0x7ff00000

0800f094 <__ieee754_sqrtf>:
 800f094:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f098:	4770      	bx	lr
 800f09a:	0000      	movs	r0, r0
 800f09c:	0000      	movs	r0, r0
	...

0800f0a0 <__kernel_cos>:
 800f0a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a4:	ec57 6b10 	vmov	r6, r7, d0
 800f0a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f0ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f0b0:	ed8d 1b00 	vstr	d1, [sp]
 800f0b4:	da07      	bge.n	800f0c6 <__kernel_cos+0x26>
 800f0b6:	ee10 0a10 	vmov	r0, s0
 800f0ba:	4639      	mov	r1, r7
 800f0bc:	f7f1 fd64 	bl	8000b88 <__aeabi_d2iz>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	f000 8088 	beq.w	800f1d6 <__kernel_cos+0x136>
 800f0c6:	4632      	mov	r2, r6
 800f0c8:	463b      	mov	r3, r7
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	4639      	mov	r1, r7
 800f0ce:	f7f1 faab 	bl	8000628 <__aeabi_dmul>
 800f0d2:	4b51      	ldr	r3, [pc, #324]	; (800f218 <__kernel_cos+0x178>)
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	460d      	mov	r5, r1
 800f0da:	f7f1 faa5 	bl	8000628 <__aeabi_dmul>
 800f0de:	a340      	add	r3, pc, #256	; (adr r3, 800f1e0 <__kernel_cos+0x140>)
 800f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e4:	4682      	mov	sl, r0
 800f0e6:	468b      	mov	fp, r1
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	f7f1 fa9c 	bl	8000628 <__aeabi_dmul>
 800f0f0:	a33d      	add	r3, pc, #244	; (adr r3, 800f1e8 <__kernel_cos+0x148>)
 800f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f6:	f7f1 f8e1 	bl	80002bc <__adddf3>
 800f0fa:	4622      	mov	r2, r4
 800f0fc:	462b      	mov	r3, r5
 800f0fe:	f7f1 fa93 	bl	8000628 <__aeabi_dmul>
 800f102:	a33b      	add	r3, pc, #236	; (adr r3, 800f1f0 <__kernel_cos+0x150>)
 800f104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f108:	f7f1 f8d6 	bl	80002b8 <__aeabi_dsub>
 800f10c:	4622      	mov	r2, r4
 800f10e:	462b      	mov	r3, r5
 800f110:	f7f1 fa8a 	bl	8000628 <__aeabi_dmul>
 800f114:	a338      	add	r3, pc, #224	; (adr r3, 800f1f8 <__kernel_cos+0x158>)
 800f116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11a:	f7f1 f8cf 	bl	80002bc <__adddf3>
 800f11e:	4622      	mov	r2, r4
 800f120:	462b      	mov	r3, r5
 800f122:	f7f1 fa81 	bl	8000628 <__aeabi_dmul>
 800f126:	a336      	add	r3, pc, #216	; (adr r3, 800f200 <__kernel_cos+0x160>)
 800f128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12c:	f7f1 f8c4 	bl	80002b8 <__aeabi_dsub>
 800f130:	4622      	mov	r2, r4
 800f132:	462b      	mov	r3, r5
 800f134:	f7f1 fa78 	bl	8000628 <__aeabi_dmul>
 800f138:	a333      	add	r3, pc, #204	; (adr r3, 800f208 <__kernel_cos+0x168>)
 800f13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13e:	f7f1 f8bd 	bl	80002bc <__adddf3>
 800f142:	4622      	mov	r2, r4
 800f144:	462b      	mov	r3, r5
 800f146:	f7f1 fa6f 	bl	8000628 <__aeabi_dmul>
 800f14a:	4622      	mov	r2, r4
 800f14c:	462b      	mov	r3, r5
 800f14e:	f7f1 fa6b 	bl	8000628 <__aeabi_dmul>
 800f152:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f156:	4604      	mov	r4, r0
 800f158:	460d      	mov	r5, r1
 800f15a:	4630      	mov	r0, r6
 800f15c:	4639      	mov	r1, r7
 800f15e:	f7f1 fa63 	bl	8000628 <__aeabi_dmul>
 800f162:	460b      	mov	r3, r1
 800f164:	4602      	mov	r2, r0
 800f166:	4629      	mov	r1, r5
 800f168:	4620      	mov	r0, r4
 800f16a:	f7f1 f8a5 	bl	80002b8 <__aeabi_dsub>
 800f16e:	4b2b      	ldr	r3, [pc, #172]	; (800f21c <__kernel_cos+0x17c>)
 800f170:	4598      	cmp	r8, r3
 800f172:	4606      	mov	r6, r0
 800f174:	460f      	mov	r7, r1
 800f176:	dc10      	bgt.n	800f19a <__kernel_cos+0xfa>
 800f178:	4602      	mov	r2, r0
 800f17a:	460b      	mov	r3, r1
 800f17c:	4650      	mov	r0, sl
 800f17e:	4659      	mov	r1, fp
 800f180:	f7f1 f89a 	bl	80002b8 <__aeabi_dsub>
 800f184:	460b      	mov	r3, r1
 800f186:	4926      	ldr	r1, [pc, #152]	; (800f220 <__kernel_cos+0x180>)
 800f188:	4602      	mov	r2, r0
 800f18a:	2000      	movs	r0, #0
 800f18c:	f7f1 f894 	bl	80002b8 <__aeabi_dsub>
 800f190:	ec41 0b10 	vmov	d0, r0, r1
 800f194:	b003      	add	sp, #12
 800f196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f19a:	4b22      	ldr	r3, [pc, #136]	; (800f224 <__kernel_cos+0x184>)
 800f19c:	4920      	ldr	r1, [pc, #128]	; (800f220 <__kernel_cos+0x180>)
 800f19e:	4598      	cmp	r8, r3
 800f1a0:	bfcc      	ite	gt
 800f1a2:	4d21      	ldrgt	r5, [pc, #132]	; (800f228 <__kernel_cos+0x188>)
 800f1a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f1a8:	2400      	movs	r4, #0
 800f1aa:	4622      	mov	r2, r4
 800f1ac:	462b      	mov	r3, r5
 800f1ae:	2000      	movs	r0, #0
 800f1b0:	f7f1 f882 	bl	80002b8 <__aeabi_dsub>
 800f1b4:	4622      	mov	r2, r4
 800f1b6:	4680      	mov	r8, r0
 800f1b8:	4689      	mov	r9, r1
 800f1ba:	462b      	mov	r3, r5
 800f1bc:	4650      	mov	r0, sl
 800f1be:	4659      	mov	r1, fp
 800f1c0:	f7f1 f87a 	bl	80002b8 <__aeabi_dsub>
 800f1c4:	4632      	mov	r2, r6
 800f1c6:	463b      	mov	r3, r7
 800f1c8:	f7f1 f876 	bl	80002b8 <__aeabi_dsub>
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	4640      	mov	r0, r8
 800f1d2:	4649      	mov	r1, r9
 800f1d4:	e7da      	b.n	800f18c <__kernel_cos+0xec>
 800f1d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f210 <__kernel_cos+0x170>
 800f1da:	e7db      	b.n	800f194 <__kernel_cos+0xf4>
 800f1dc:	f3af 8000 	nop.w
 800f1e0:	be8838d4 	.word	0xbe8838d4
 800f1e4:	bda8fae9 	.word	0xbda8fae9
 800f1e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f1ec:	3e21ee9e 	.word	0x3e21ee9e
 800f1f0:	809c52ad 	.word	0x809c52ad
 800f1f4:	3e927e4f 	.word	0x3e927e4f
 800f1f8:	19cb1590 	.word	0x19cb1590
 800f1fc:	3efa01a0 	.word	0x3efa01a0
 800f200:	16c15177 	.word	0x16c15177
 800f204:	3f56c16c 	.word	0x3f56c16c
 800f208:	5555554c 	.word	0x5555554c
 800f20c:	3fa55555 	.word	0x3fa55555
 800f210:	00000000 	.word	0x00000000
 800f214:	3ff00000 	.word	0x3ff00000
 800f218:	3fe00000 	.word	0x3fe00000
 800f21c:	3fd33332 	.word	0x3fd33332
 800f220:	3ff00000 	.word	0x3ff00000
 800f224:	3fe90000 	.word	0x3fe90000
 800f228:	3fd20000 	.word	0x3fd20000
 800f22c:	00000000 	.word	0x00000000

0800f230 <__kernel_rem_pio2>:
 800f230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f234:	ed2d 8b02 	vpush	{d8}
 800f238:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f23c:	f112 0f14 	cmn.w	r2, #20
 800f240:	9308      	str	r3, [sp, #32]
 800f242:	9101      	str	r1, [sp, #4]
 800f244:	4bc4      	ldr	r3, [pc, #784]	; (800f558 <__kernel_rem_pio2+0x328>)
 800f246:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f248:	900b      	str	r0, [sp, #44]	; 0x2c
 800f24a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f24e:	9302      	str	r3, [sp, #8]
 800f250:	9b08      	ldr	r3, [sp, #32]
 800f252:	f103 33ff 	add.w	r3, r3, #4294967295
 800f256:	bfa8      	it	ge
 800f258:	1ed4      	subge	r4, r2, #3
 800f25a:	9306      	str	r3, [sp, #24]
 800f25c:	bfb2      	itee	lt
 800f25e:	2400      	movlt	r4, #0
 800f260:	2318      	movge	r3, #24
 800f262:	fb94 f4f3 	sdivge	r4, r4, r3
 800f266:	f06f 0317 	mvn.w	r3, #23
 800f26a:	fb04 3303 	mla	r3, r4, r3, r3
 800f26e:	eb03 0a02 	add.w	sl, r3, r2
 800f272:	9b02      	ldr	r3, [sp, #8]
 800f274:	9a06      	ldr	r2, [sp, #24]
 800f276:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800f548 <__kernel_rem_pio2+0x318>
 800f27a:	eb03 0802 	add.w	r8, r3, r2
 800f27e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f280:	1aa7      	subs	r7, r4, r2
 800f282:	ae22      	add	r6, sp, #136	; 0x88
 800f284:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f288:	2500      	movs	r5, #0
 800f28a:	4545      	cmp	r5, r8
 800f28c:	dd13      	ble.n	800f2b6 <__kernel_rem_pio2+0x86>
 800f28e:	9b08      	ldr	r3, [sp, #32]
 800f290:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800f548 <__kernel_rem_pio2+0x318>
 800f294:	aa22      	add	r2, sp, #136	; 0x88
 800f296:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f29a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f29e:	f04f 0800 	mov.w	r8, #0
 800f2a2:	9b02      	ldr	r3, [sp, #8]
 800f2a4:	4598      	cmp	r8, r3
 800f2a6:	dc2f      	bgt.n	800f308 <__kernel_rem_pio2+0xd8>
 800f2a8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f2ac:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f2b0:	462f      	mov	r7, r5
 800f2b2:	2600      	movs	r6, #0
 800f2b4:	e01b      	b.n	800f2ee <__kernel_rem_pio2+0xbe>
 800f2b6:	42ef      	cmn	r7, r5
 800f2b8:	d407      	bmi.n	800f2ca <__kernel_rem_pio2+0x9a>
 800f2ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f2be:	f7f1 f949 	bl	8000554 <__aeabi_i2d>
 800f2c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f2c6:	3501      	adds	r5, #1
 800f2c8:	e7df      	b.n	800f28a <__kernel_rem_pio2+0x5a>
 800f2ca:	ec51 0b18 	vmov	r0, r1, d8
 800f2ce:	e7f8      	b.n	800f2c2 <__kernel_rem_pio2+0x92>
 800f2d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f2d8:	f7f1 f9a6 	bl	8000628 <__aeabi_dmul>
 800f2dc:	4602      	mov	r2, r0
 800f2de:	460b      	mov	r3, r1
 800f2e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2e4:	f7f0 ffea 	bl	80002bc <__adddf3>
 800f2e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f2ec:	3601      	adds	r6, #1
 800f2ee:	9b06      	ldr	r3, [sp, #24]
 800f2f0:	429e      	cmp	r6, r3
 800f2f2:	f1a7 0708 	sub.w	r7, r7, #8
 800f2f6:	ddeb      	ble.n	800f2d0 <__kernel_rem_pio2+0xa0>
 800f2f8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f2fc:	f108 0801 	add.w	r8, r8, #1
 800f300:	ecab 7b02 	vstmia	fp!, {d7}
 800f304:	3508      	adds	r5, #8
 800f306:	e7cc      	b.n	800f2a2 <__kernel_rem_pio2+0x72>
 800f308:	9b02      	ldr	r3, [sp, #8]
 800f30a:	aa0e      	add	r2, sp, #56	; 0x38
 800f30c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f310:	930d      	str	r3, [sp, #52]	; 0x34
 800f312:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f314:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f318:	9c02      	ldr	r4, [sp, #8]
 800f31a:	930c      	str	r3, [sp, #48]	; 0x30
 800f31c:	00e3      	lsls	r3, r4, #3
 800f31e:	930a      	str	r3, [sp, #40]	; 0x28
 800f320:	ab9a      	add	r3, sp, #616	; 0x268
 800f322:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f326:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f32a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f32e:	ab72      	add	r3, sp, #456	; 0x1c8
 800f330:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f334:	46c3      	mov	fp, r8
 800f336:	46a1      	mov	r9, r4
 800f338:	f1b9 0f00 	cmp.w	r9, #0
 800f33c:	f1a5 0508 	sub.w	r5, r5, #8
 800f340:	dc77      	bgt.n	800f432 <__kernel_rem_pio2+0x202>
 800f342:	ec47 6b10 	vmov	d0, r6, r7
 800f346:	4650      	mov	r0, sl
 800f348:	f000 fde6 	bl	800ff18 <scalbn>
 800f34c:	ec57 6b10 	vmov	r6, r7, d0
 800f350:	2200      	movs	r2, #0
 800f352:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f356:	ee10 0a10 	vmov	r0, s0
 800f35a:	4639      	mov	r1, r7
 800f35c:	f7f1 f964 	bl	8000628 <__aeabi_dmul>
 800f360:	ec41 0b10 	vmov	d0, r0, r1
 800f364:	f000 fd58 	bl	800fe18 <floor>
 800f368:	4b7c      	ldr	r3, [pc, #496]	; (800f55c <__kernel_rem_pio2+0x32c>)
 800f36a:	ec51 0b10 	vmov	r0, r1, d0
 800f36e:	2200      	movs	r2, #0
 800f370:	f7f1 f95a 	bl	8000628 <__aeabi_dmul>
 800f374:	4602      	mov	r2, r0
 800f376:	460b      	mov	r3, r1
 800f378:	4630      	mov	r0, r6
 800f37a:	4639      	mov	r1, r7
 800f37c:	f7f0 ff9c 	bl	80002b8 <__aeabi_dsub>
 800f380:	460f      	mov	r7, r1
 800f382:	4606      	mov	r6, r0
 800f384:	f7f1 fc00 	bl	8000b88 <__aeabi_d2iz>
 800f388:	9004      	str	r0, [sp, #16]
 800f38a:	f7f1 f8e3 	bl	8000554 <__aeabi_i2d>
 800f38e:	4602      	mov	r2, r0
 800f390:	460b      	mov	r3, r1
 800f392:	4630      	mov	r0, r6
 800f394:	4639      	mov	r1, r7
 800f396:	f7f0 ff8f 	bl	80002b8 <__aeabi_dsub>
 800f39a:	f1ba 0f00 	cmp.w	sl, #0
 800f39e:	4606      	mov	r6, r0
 800f3a0:	460f      	mov	r7, r1
 800f3a2:	dd6d      	ble.n	800f480 <__kernel_rem_pio2+0x250>
 800f3a4:	1e62      	subs	r2, r4, #1
 800f3a6:	ab0e      	add	r3, sp, #56	; 0x38
 800f3a8:	9d04      	ldr	r5, [sp, #16]
 800f3aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f3ae:	f1ca 0118 	rsb	r1, sl, #24
 800f3b2:	fa40 f301 	asr.w	r3, r0, r1
 800f3b6:	441d      	add	r5, r3
 800f3b8:	408b      	lsls	r3, r1
 800f3ba:	1ac0      	subs	r0, r0, r3
 800f3bc:	ab0e      	add	r3, sp, #56	; 0x38
 800f3be:	9504      	str	r5, [sp, #16]
 800f3c0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f3c4:	f1ca 0317 	rsb	r3, sl, #23
 800f3c8:	fa40 fb03 	asr.w	fp, r0, r3
 800f3cc:	f1bb 0f00 	cmp.w	fp, #0
 800f3d0:	dd65      	ble.n	800f49e <__kernel_rem_pio2+0x26e>
 800f3d2:	9b04      	ldr	r3, [sp, #16]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	3301      	adds	r3, #1
 800f3d8:	9304      	str	r3, [sp, #16]
 800f3da:	4615      	mov	r5, r2
 800f3dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f3e0:	4294      	cmp	r4, r2
 800f3e2:	f300 809c 	bgt.w	800f51e <__kernel_rem_pio2+0x2ee>
 800f3e6:	f1ba 0f00 	cmp.w	sl, #0
 800f3ea:	dd07      	ble.n	800f3fc <__kernel_rem_pio2+0x1cc>
 800f3ec:	f1ba 0f01 	cmp.w	sl, #1
 800f3f0:	f000 80c0 	beq.w	800f574 <__kernel_rem_pio2+0x344>
 800f3f4:	f1ba 0f02 	cmp.w	sl, #2
 800f3f8:	f000 80c6 	beq.w	800f588 <__kernel_rem_pio2+0x358>
 800f3fc:	f1bb 0f02 	cmp.w	fp, #2
 800f400:	d14d      	bne.n	800f49e <__kernel_rem_pio2+0x26e>
 800f402:	4632      	mov	r2, r6
 800f404:	463b      	mov	r3, r7
 800f406:	4956      	ldr	r1, [pc, #344]	; (800f560 <__kernel_rem_pio2+0x330>)
 800f408:	2000      	movs	r0, #0
 800f40a:	f7f0 ff55 	bl	80002b8 <__aeabi_dsub>
 800f40e:	4606      	mov	r6, r0
 800f410:	460f      	mov	r7, r1
 800f412:	2d00      	cmp	r5, #0
 800f414:	d043      	beq.n	800f49e <__kernel_rem_pio2+0x26e>
 800f416:	4650      	mov	r0, sl
 800f418:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800f550 <__kernel_rem_pio2+0x320>
 800f41c:	f000 fd7c 	bl	800ff18 <scalbn>
 800f420:	4630      	mov	r0, r6
 800f422:	4639      	mov	r1, r7
 800f424:	ec53 2b10 	vmov	r2, r3, d0
 800f428:	f7f0 ff46 	bl	80002b8 <__aeabi_dsub>
 800f42c:	4606      	mov	r6, r0
 800f42e:	460f      	mov	r7, r1
 800f430:	e035      	b.n	800f49e <__kernel_rem_pio2+0x26e>
 800f432:	4b4c      	ldr	r3, [pc, #304]	; (800f564 <__kernel_rem_pio2+0x334>)
 800f434:	2200      	movs	r2, #0
 800f436:	4630      	mov	r0, r6
 800f438:	4639      	mov	r1, r7
 800f43a:	f7f1 f8f5 	bl	8000628 <__aeabi_dmul>
 800f43e:	f7f1 fba3 	bl	8000b88 <__aeabi_d2iz>
 800f442:	f7f1 f887 	bl	8000554 <__aeabi_i2d>
 800f446:	4602      	mov	r2, r0
 800f448:	460b      	mov	r3, r1
 800f44a:	ec43 2b18 	vmov	d8, r2, r3
 800f44e:	4b46      	ldr	r3, [pc, #280]	; (800f568 <__kernel_rem_pio2+0x338>)
 800f450:	2200      	movs	r2, #0
 800f452:	f7f1 f8e9 	bl	8000628 <__aeabi_dmul>
 800f456:	4602      	mov	r2, r0
 800f458:	460b      	mov	r3, r1
 800f45a:	4630      	mov	r0, r6
 800f45c:	4639      	mov	r1, r7
 800f45e:	f7f0 ff2b 	bl	80002b8 <__aeabi_dsub>
 800f462:	f7f1 fb91 	bl	8000b88 <__aeabi_d2iz>
 800f466:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f46a:	f84b 0b04 	str.w	r0, [fp], #4
 800f46e:	ec51 0b18 	vmov	r0, r1, d8
 800f472:	f7f0 ff23 	bl	80002bc <__adddf3>
 800f476:	f109 39ff 	add.w	r9, r9, #4294967295
 800f47a:	4606      	mov	r6, r0
 800f47c:	460f      	mov	r7, r1
 800f47e:	e75b      	b.n	800f338 <__kernel_rem_pio2+0x108>
 800f480:	d106      	bne.n	800f490 <__kernel_rem_pio2+0x260>
 800f482:	1e63      	subs	r3, r4, #1
 800f484:	aa0e      	add	r2, sp, #56	; 0x38
 800f486:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f48a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f48e:	e79d      	b.n	800f3cc <__kernel_rem_pio2+0x19c>
 800f490:	4b36      	ldr	r3, [pc, #216]	; (800f56c <__kernel_rem_pio2+0x33c>)
 800f492:	2200      	movs	r2, #0
 800f494:	f7f1 fb4e 	bl	8000b34 <__aeabi_dcmpge>
 800f498:	2800      	cmp	r0, #0
 800f49a:	d13d      	bne.n	800f518 <__kernel_rem_pio2+0x2e8>
 800f49c:	4683      	mov	fp, r0
 800f49e:	2200      	movs	r2, #0
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	4639      	mov	r1, r7
 800f4a6:	f7f1 fb27 	bl	8000af8 <__aeabi_dcmpeq>
 800f4aa:	2800      	cmp	r0, #0
 800f4ac:	f000 80c0 	beq.w	800f630 <__kernel_rem_pio2+0x400>
 800f4b0:	1e65      	subs	r5, r4, #1
 800f4b2:	462b      	mov	r3, r5
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	9902      	ldr	r1, [sp, #8]
 800f4b8:	428b      	cmp	r3, r1
 800f4ba:	da6c      	bge.n	800f596 <__kernel_rem_pio2+0x366>
 800f4bc:	2a00      	cmp	r2, #0
 800f4be:	f000 8089 	beq.w	800f5d4 <__kernel_rem_pio2+0x3a4>
 800f4c2:	ab0e      	add	r3, sp, #56	; 0x38
 800f4c4:	f1aa 0a18 	sub.w	sl, sl, #24
 800f4c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f000 80ad 	beq.w	800f62c <__kernel_rem_pio2+0x3fc>
 800f4d2:	4650      	mov	r0, sl
 800f4d4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800f550 <__kernel_rem_pio2+0x320>
 800f4d8:	f000 fd1e 	bl	800ff18 <scalbn>
 800f4dc:	ab9a      	add	r3, sp, #616	; 0x268
 800f4de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f4e2:	ec57 6b10 	vmov	r6, r7, d0
 800f4e6:	00ec      	lsls	r4, r5, #3
 800f4e8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f4ec:	46aa      	mov	sl, r5
 800f4ee:	f1ba 0f00 	cmp.w	sl, #0
 800f4f2:	f280 80d6 	bge.w	800f6a2 <__kernel_rem_pio2+0x472>
 800f4f6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800f548 <__kernel_rem_pio2+0x318>
 800f4fa:	462e      	mov	r6, r5
 800f4fc:	2e00      	cmp	r6, #0
 800f4fe:	f2c0 8104 	blt.w	800f70a <__kernel_rem_pio2+0x4da>
 800f502:	ab72      	add	r3, sp, #456	; 0x1c8
 800f504:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f508:	f8df a064 	ldr.w	sl, [pc, #100]	; 800f570 <__kernel_rem_pio2+0x340>
 800f50c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f510:	f04f 0800 	mov.w	r8, #0
 800f514:	1baf      	subs	r7, r5, r6
 800f516:	e0ea      	b.n	800f6ee <__kernel_rem_pio2+0x4be>
 800f518:	f04f 0b02 	mov.w	fp, #2
 800f51c:	e759      	b.n	800f3d2 <__kernel_rem_pio2+0x1a2>
 800f51e:	f8d8 3000 	ldr.w	r3, [r8]
 800f522:	b955      	cbnz	r5, 800f53a <__kernel_rem_pio2+0x30a>
 800f524:	b123      	cbz	r3, 800f530 <__kernel_rem_pio2+0x300>
 800f526:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f52a:	f8c8 3000 	str.w	r3, [r8]
 800f52e:	2301      	movs	r3, #1
 800f530:	3201      	adds	r2, #1
 800f532:	f108 0804 	add.w	r8, r8, #4
 800f536:	461d      	mov	r5, r3
 800f538:	e752      	b.n	800f3e0 <__kernel_rem_pio2+0x1b0>
 800f53a:	1acb      	subs	r3, r1, r3
 800f53c:	f8c8 3000 	str.w	r3, [r8]
 800f540:	462b      	mov	r3, r5
 800f542:	e7f5      	b.n	800f530 <__kernel_rem_pio2+0x300>
 800f544:	f3af 8000 	nop.w
	...
 800f554:	3ff00000 	.word	0x3ff00000
 800f558:	08010a70 	.word	0x08010a70
 800f55c:	40200000 	.word	0x40200000
 800f560:	3ff00000 	.word	0x3ff00000
 800f564:	3e700000 	.word	0x3e700000
 800f568:	41700000 	.word	0x41700000
 800f56c:	3fe00000 	.word	0x3fe00000
 800f570:	08010a30 	.word	0x08010a30
 800f574:	1e62      	subs	r2, r4, #1
 800f576:	ab0e      	add	r3, sp, #56	; 0x38
 800f578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f57c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f580:	a90e      	add	r1, sp, #56	; 0x38
 800f582:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f586:	e739      	b.n	800f3fc <__kernel_rem_pio2+0x1cc>
 800f588:	1e62      	subs	r2, r4, #1
 800f58a:	ab0e      	add	r3, sp, #56	; 0x38
 800f58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f590:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f594:	e7f4      	b.n	800f580 <__kernel_rem_pio2+0x350>
 800f596:	a90e      	add	r1, sp, #56	; 0x38
 800f598:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f59c:	3b01      	subs	r3, #1
 800f59e:	430a      	orrs	r2, r1
 800f5a0:	e789      	b.n	800f4b6 <__kernel_rem_pio2+0x286>
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f5a8:	2900      	cmp	r1, #0
 800f5aa:	d0fa      	beq.n	800f5a2 <__kernel_rem_pio2+0x372>
 800f5ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5ae:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800f5b2:	446a      	add	r2, sp
 800f5b4:	3a98      	subs	r2, #152	; 0x98
 800f5b6:	920a      	str	r2, [sp, #40]	; 0x28
 800f5b8:	9a08      	ldr	r2, [sp, #32]
 800f5ba:	18e3      	adds	r3, r4, r3
 800f5bc:	18a5      	adds	r5, r4, r2
 800f5be:	aa22      	add	r2, sp, #136	; 0x88
 800f5c0:	f104 0801 	add.w	r8, r4, #1
 800f5c4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f5c8:	9304      	str	r3, [sp, #16]
 800f5ca:	9b04      	ldr	r3, [sp, #16]
 800f5cc:	4543      	cmp	r3, r8
 800f5ce:	da04      	bge.n	800f5da <__kernel_rem_pio2+0x3aa>
 800f5d0:	461c      	mov	r4, r3
 800f5d2:	e6a3      	b.n	800f31c <__kernel_rem_pio2+0xec>
 800f5d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e7e4      	b.n	800f5a4 <__kernel_rem_pio2+0x374>
 800f5da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5dc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f5e0:	f7f0 ffb8 	bl	8000554 <__aeabi_i2d>
 800f5e4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f5e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5ea:	46ab      	mov	fp, r5
 800f5ec:	461c      	mov	r4, r3
 800f5ee:	f04f 0900 	mov.w	r9, #0
 800f5f2:	2600      	movs	r6, #0
 800f5f4:	2700      	movs	r7, #0
 800f5f6:	9b06      	ldr	r3, [sp, #24]
 800f5f8:	4599      	cmp	r9, r3
 800f5fa:	dd06      	ble.n	800f60a <__kernel_rem_pio2+0x3da>
 800f5fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5fe:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f602:	f108 0801 	add.w	r8, r8, #1
 800f606:	930a      	str	r3, [sp, #40]	; 0x28
 800f608:	e7df      	b.n	800f5ca <__kernel_rem_pio2+0x39a>
 800f60a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f60e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f612:	f7f1 f809 	bl	8000628 <__aeabi_dmul>
 800f616:	4602      	mov	r2, r0
 800f618:	460b      	mov	r3, r1
 800f61a:	4630      	mov	r0, r6
 800f61c:	4639      	mov	r1, r7
 800f61e:	f7f0 fe4d 	bl	80002bc <__adddf3>
 800f622:	f109 0901 	add.w	r9, r9, #1
 800f626:	4606      	mov	r6, r0
 800f628:	460f      	mov	r7, r1
 800f62a:	e7e4      	b.n	800f5f6 <__kernel_rem_pio2+0x3c6>
 800f62c:	3d01      	subs	r5, #1
 800f62e:	e748      	b.n	800f4c2 <__kernel_rem_pio2+0x292>
 800f630:	ec47 6b10 	vmov	d0, r6, r7
 800f634:	f1ca 0000 	rsb	r0, sl, #0
 800f638:	f000 fc6e 	bl	800ff18 <scalbn>
 800f63c:	ec57 6b10 	vmov	r6, r7, d0
 800f640:	4ba0      	ldr	r3, [pc, #640]	; (800f8c4 <__kernel_rem_pio2+0x694>)
 800f642:	ee10 0a10 	vmov	r0, s0
 800f646:	2200      	movs	r2, #0
 800f648:	4639      	mov	r1, r7
 800f64a:	f7f1 fa73 	bl	8000b34 <__aeabi_dcmpge>
 800f64e:	b1f8      	cbz	r0, 800f690 <__kernel_rem_pio2+0x460>
 800f650:	4b9d      	ldr	r3, [pc, #628]	; (800f8c8 <__kernel_rem_pio2+0x698>)
 800f652:	2200      	movs	r2, #0
 800f654:	4630      	mov	r0, r6
 800f656:	4639      	mov	r1, r7
 800f658:	f7f0 ffe6 	bl	8000628 <__aeabi_dmul>
 800f65c:	f7f1 fa94 	bl	8000b88 <__aeabi_d2iz>
 800f660:	4680      	mov	r8, r0
 800f662:	f7f0 ff77 	bl	8000554 <__aeabi_i2d>
 800f666:	4b97      	ldr	r3, [pc, #604]	; (800f8c4 <__kernel_rem_pio2+0x694>)
 800f668:	2200      	movs	r2, #0
 800f66a:	f7f0 ffdd 	bl	8000628 <__aeabi_dmul>
 800f66e:	460b      	mov	r3, r1
 800f670:	4602      	mov	r2, r0
 800f672:	4639      	mov	r1, r7
 800f674:	4630      	mov	r0, r6
 800f676:	f7f0 fe1f 	bl	80002b8 <__aeabi_dsub>
 800f67a:	f7f1 fa85 	bl	8000b88 <__aeabi_d2iz>
 800f67e:	1c65      	adds	r5, r4, #1
 800f680:	ab0e      	add	r3, sp, #56	; 0x38
 800f682:	f10a 0a18 	add.w	sl, sl, #24
 800f686:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f68a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f68e:	e720      	b.n	800f4d2 <__kernel_rem_pio2+0x2a2>
 800f690:	4630      	mov	r0, r6
 800f692:	4639      	mov	r1, r7
 800f694:	f7f1 fa78 	bl	8000b88 <__aeabi_d2iz>
 800f698:	ab0e      	add	r3, sp, #56	; 0x38
 800f69a:	4625      	mov	r5, r4
 800f69c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f6a0:	e717      	b.n	800f4d2 <__kernel_rem_pio2+0x2a2>
 800f6a2:	ab0e      	add	r3, sp, #56	; 0x38
 800f6a4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f6a8:	f7f0 ff54 	bl	8000554 <__aeabi_i2d>
 800f6ac:	4632      	mov	r2, r6
 800f6ae:	463b      	mov	r3, r7
 800f6b0:	f7f0 ffba 	bl	8000628 <__aeabi_dmul>
 800f6b4:	4b84      	ldr	r3, [pc, #528]	; (800f8c8 <__kernel_rem_pio2+0x698>)
 800f6b6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	4630      	mov	r0, r6
 800f6be:	4639      	mov	r1, r7
 800f6c0:	f7f0 ffb2 	bl	8000628 <__aeabi_dmul>
 800f6c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6c8:	4606      	mov	r6, r0
 800f6ca:	460f      	mov	r7, r1
 800f6cc:	e70f      	b.n	800f4ee <__kernel_rem_pio2+0x2be>
 800f6ce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f6d2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f6d6:	f7f0 ffa7 	bl	8000628 <__aeabi_dmul>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	460b      	mov	r3, r1
 800f6de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6e2:	f7f0 fdeb 	bl	80002bc <__adddf3>
 800f6e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f6ea:	f108 0801 	add.w	r8, r8, #1
 800f6ee:	9b02      	ldr	r3, [sp, #8]
 800f6f0:	4598      	cmp	r8, r3
 800f6f2:	dc01      	bgt.n	800f6f8 <__kernel_rem_pio2+0x4c8>
 800f6f4:	45b8      	cmp	r8, r7
 800f6f6:	ddea      	ble.n	800f6ce <__kernel_rem_pio2+0x49e>
 800f6f8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f6fc:	ab4a      	add	r3, sp, #296	; 0x128
 800f6fe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f702:	ed87 7b00 	vstr	d7, [r7]
 800f706:	3e01      	subs	r6, #1
 800f708:	e6f8      	b.n	800f4fc <__kernel_rem_pio2+0x2cc>
 800f70a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f70c:	2b02      	cmp	r3, #2
 800f70e:	dc0b      	bgt.n	800f728 <__kernel_rem_pio2+0x4f8>
 800f710:	2b00      	cmp	r3, #0
 800f712:	dc35      	bgt.n	800f780 <__kernel_rem_pio2+0x550>
 800f714:	d059      	beq.n	800f7ca <__kernel_rem_pio2+0x59a>
 800f716:	9b04      	ldr	r3, [sp, #16]
 800f718:	f003 0007 	and.w	r0, r3, #7
 800f71c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f720:	ecbd 8b02 	vpop	{d8}
 800f724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f728:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f72a:	2b03      	cmp	r3, #3
 800f72c:	d1f3      	bne.n	800f716 <__kernel_rem_pio2+0x4e6>
 800f72e:	ab4a      	add	r3, sp, #296	; 0x128
 800f730:	4423      	add	r3, r4
 800f732:	9306      	str	r3, [sp, #24]
 800f734:	461c      	mov	r4, r3
 800f736:	469a      	mov	sl, r3
 800f738:	9502      	str	r5, [sp, #8]
 800f73a:	9b02      	ldr	r3, [sp, #8]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f1aa 0a08 	sub.w	sl, sl, #8
 800f742:	dc6b      	bgt.n	800f81c <__kernel_rem_pio2+0x5ec>
 800f744:	46aa      	mov	sl, r5
 800f746:	f1ba 0f01 	cmp.w	sl, #1
 800f74a:	f1a4 0408 	sub.w	r4, r4, #8
 800f74e:	f300 8085 	bgt.w	800f85c <__kernel_rem_pio2+0x62c>
 800f752:	9c06      	ldr	r4, [sp, #24]
 800f754:	2000      	movs	r0, #0
 800f756:	3408      	adds	r4, #8
 800f758:	2100      	movs	r1, #0
 800f75a:	2d01      	cmp	r5, #1
 800f75c:	f300 809d 	bgt.w	800f89a <__kernel_rem_pio2+0x66a>
 800f760:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f764:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f768:	f1bb 0f00 	cmp.w	fp, #0
 800f76c:	f040 809b 	bne.w	800f8a6 <__kernel_rem_pio2+0x676>
 800f770:	9b01      	ldr	r3, [sp, #4]
 800f772:	e9c3 5600 	strd	r5, r6, [r3]
 800f776:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f77a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f77e:	e7ca      	b.n	800f716 <__kernel_rem_pio2+0x4e6>
 800f780:	3408      	adds	r4, #8
 800f782:	ab4a      	add	r3, sp, #296	; 0x128
 800f784:	441c      	add	r4, r3
 800f786:	462e      	mov	r6, r5
 800f788:	2000      	movs	r0, #0
 800f78a:	2100      	movs	r1, #0
 800f78c:	2e00      	cmp	r6, #0
 800f78e:	da36      	bge.n	800f7fe <__kernel_rem_pio2+0x5ce>
 800f790:	f1bb 0f00 	cmp.w	fp, #0
 800f794:	d039      	beq.n	800f80a <__kernel_rem_pio2+0x5da>
 800f796:	4602      	mov	r2, r0
 800f798:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f79c:	9c01      	ldr	r4, [sp, #4]
 800f79e:	e9c4 2300 	strd	r2, r3, [r4]
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f7aa:	f7f0 fd85 	bl	80002b8 <__aeabi_dsub>
 800f7ae:	ae4c      	add	r6, sp, #304	; 0x130
 800f7b0:	2401      	movs	r4, #1
 800f7b2:	42a5      	cmp	r5, r4
 800f7b4:	da2c      	bge.n	800f810 <__kernel_rem_pio2+0x5e0>
 800f7b6:	f1bb 0f00 	cmp.w	fp, #0
 800f7ba:	d002      	beq.n	800f7c2 <__kernel_rem_pio2+0x592>
 800f7bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	9b01      	ldr	r3, [sp, #4]
 800f7c4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f7c8:	e7a5      	b.n	800f716 <__kernel_rem_pio2+0x4e6>
 800f7ca:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f7ce:	eb0d 0403 	add.w	r4, sp, r3
 800f7d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f7d6:	2000      	movs	r0, #0
 800f7d8:	2100      	movs	r1, #0
 800f7da:	2d00      	cmp	r5, #0
 800f7dc:	da09      	bge.n	800f7f2 <__kernel_rem_pio2+0x5c2>
 800f7de:	f1bb 0f00 	cmp.w	fp, #0
 800f7e2:	d002      	beq.n	800f7ea <__kernel_rem_pio2+0x5ba>
 800f7e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	9b01      	ldr	r3, [sp, #4]
 800f7ec:	e9c3 0100 	strd	r0, r1, [r3]
 800f7f0:	e791      	b.n	800f716 <__kernel_rem_pio2+0x4e6>
 800f7f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f7f6:	f7f0 fd61 	bl	80002bc <__adddf3>
 800f7fa:	3d01      	subs	r5, #1
 800f7fc:	e7ed      	b.n	800f7da <__kernel_rem_pio2+0x5aa>
 800f7fe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f802:	f7f0 fd5b 	bl	80002bc <__adddf3>
 800f806:	3e01      	subs	r6, #1
 800f808:	e7c0      	b.n	800f78c <__kernel_rem_pio2+0x55c>
 800f80a:	4602      	mov	r2, r0
 800f80c:	460b      	mov	r3, r1
 800f80e:	e7c5      	b.n	800f79c <__kernel_rem_pio2+0x56c>
 800f810:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f814:	f7f0 fd52 	bl	80002bc <__adddf3>
 800f818:	3401      	adds	r4, #1
 800f81a:	e7ca      	b.n	800f7b2 <__kernel_rem_pio2+0x582>
 800f81c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f820:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f824:	9b02      	ldr	r3, [sp, #8]
 800f826:	3b01      	subs	r3, #1
 800f828:	9302      	str	r3, [sp, #8]
 800f82a:	4632      	mov	r2, r6
 800f82c:	463b      	mov	r3, r7
 800f82e:	4640      	mov	r0, r8
 800f830:	4649      	mov	r1, r9
 800f832:	f7f0 fd43 	bl	80002bc <__adddf3>
 800f836:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f83a:	4602      	mov	r2, r0
 800f83c:	460b      	mov	r3, r1
 800f83e:	4640      	mov	r0, r8
 800f840:	4649      	mov	r1, r9
 800f842:	f7f0 fd39 	bl	80002b8 <__aeabi_dsub>
 800f846:	4632      	mov	r2, r6
 800f848:	463b      	mov	r3, r7
 800f84a:	f7f0 fd37 	bl	80002bc <__adddf3>
 800f84e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f852:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f856:	ed8a 7b00 	vstr	d7, [sl]
 800f85a:	e76e      	b.n	800f73a <__kernel_rem_pio2+0x50a>
 800f85c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f860:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f864:	4640      	mov	r0, r8
 800f866:	4632      	mov	r2, r6
 800f868:	463b      	mov	r3, r7
 800f86a:	4649      	mov	r1, r9
 800f86c:	f7f0 fd26 	bl	80002bc <__adddf3>
 800f870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f874:	4602      	mov	r2, r0
 800f876:	460b      	mov	r3, r1
 800f878:	4640      	mov	r0, r8
 800f87a:	4649      	mov	r1, r9
 800f87c:	f7f0 fd1c 	bl	80002b8 <__aeabi_dsub>
 800f880:	4632      	mov	r2, r6
 800f882:	463b      	mov	r3, r7
 800f884:	f7f0 fd1a 	bl	80002bc <__adddf3>
 800f888:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f88c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f890:	ed84 7b00 	vstr	d7, [r4]
 800f894:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f898:	e755      	b.n	800f746 <__kernel_rem_pio2+0x516>
 800f89a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f89e:	f7f0 fd0d 	bl	80002bc <__adddf3>
 800f8a2:	3d01      	subs	r5, #1
 800f8a4:	e759      	b.n	800f75a <__kernel_rem_pio2+0x52a>
 800f8a6:	9b01      	ldr	r3, [sp, #4]
 800f8a8:	9a01      	ldr	r2, [sp, #4]
 800f8aa:	601d      	str	r5, [r3, #0]
 800f8ac:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f8b0:	605c      	str	r4, [r3, #4]
 800f8b2:	609f      	str	r7, [r3, #8]
 800f8b4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f8b8:	60d3      	str	r3, [r2, #12]
 800f8ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8be:	6110      	str	r0, [r2, #16]
 800f8c0:	6153      	str	r3, [r2, #20]
 800f8c2:	e728      	b.n	800f716 <__kernel_rem_pio2+0x4e6>
 800f8c4:	41700000 	.word	0x41700000
 800f8c8:	3e700000 	.word	0x3e700000
 800f8cc:	00000000 	.word	0x00000000

0800f8d0 <__kernel_sin>:
 800f8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d4:	ed2d 8b04 	vpush	{d8-d9}
 800f8d8:	eeb0 8a41 	vmov.f32	s16, s2
 800f8dc:	eef0 8a61 	vmov.f32	s17, s3
 800f8e0:	ec55 4b10 	vmov	r4, r5, d0
 800f8e4:	b083      	sub	sp, #12
 800f8e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f8ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f8ee:	9001      	str	r0, [sp, #4]
 800f8f0:	da06      	bge.n	800f900 <__kernel_sin+0x30>
 800f8f2:	ee10 0a10 	vmov	r0, s0
 800f8f6:	4629      	mov	r1, r5
 800f8f8:	f7f1 f946 	bl	8000b88 <__aeabi_d2iz>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	d051      	beq.n	800f9a4 <__kernel_sin+0xd4>
 800f900:	4622      	mov	r2, r4
 800f902:	462b      	mov	r3, r5
 800f904:	4620      	mov	r0, r4
 800f906:	4629      	mov	r1, r5
 800f908:	f7f0 fe8e 	bl	8000628 <__aeabi_dmul>
 800f90c:	4682      	mov	sl, r0
 800f90e:	468b      	mov	fp, r1
 800f910:	4602      	mov	r2, r0
 800f912:	460b      	mov	r3, r1
 800f914:	4620      	mov	r0, r4
 800f916:	4629      	mov	r1, r5
 800f918:	f7f0 fe86 	bl	8000628 <__aeabi_dmul>
 800f91c:	a341      	add	r3, pc, #260	; (adr r3, 800fa24 <__kernel_sin+0x154>)
 800f91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f922:	4680      	mov	r8, r0
 800f924:	4689      	mov	r9, r1
 800f926:	4650      	mov	r0, sl
 800f928:	4659      	mov	r1, fp
 800f92a:	f7f0 fe7d 	bl	8000628 <__aeabi_dmul>
 800f92e:	a33f      	add	r3, pc, #252	; (adr r3, 800fa2c <__kernel_sin+0x15c>)
 800f930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f934:	f7f0 fcc0 	bl	80002b8 <__aeabi_dsub>
 800f938:	4652      	mov	r2, sl
 800f93a:	465b      	mov	r3, fp
 800f93c:	f7f0 fe74 	bl	8000628 <__aeabi_dmul>
 800f940:	a33c      	add	r3, pc, #240	; (adr r3, 800fa34 <__kernel_sin+0x164>)
 800f942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f946:	f7f0 fcb9 	bl	80002bc <__adddf3>
 800f94a:	4652      	mov	r2, sl
 800f94c:	465b      	mov	r3, fp
 800f94e:	f7f0 fe6b 	bl	8000628 <__aeabi_dmul>
 800f952:	a33a      	add	r3, pc, #232	; (adr r3, 800fa3c <__kernel_sin+0x16c>)
 800f954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f958:	f7f0 fcae 	bl	80002b8 <__aeabi_dsub>
 800f95c:	4652      	mov	r2, sl
 800f95e:	465b      	mov	r3, fp
 800f960:	f7f0 fe62 	bl	8000628 <__aeabi_dmul>
 800f964:	a337      	add	r3, pc, #220	; (adr r3, 800fa44 <__kernel_sin+0x174>)
 800f966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96a:	f7f0 fca7 	bl	80002bc <__adddf3>
 800f96e:	9b01      	ldr	r3, [sp, #4]
 800f970:	4606      	mov	r6, r0
 800f972:	460f      	mov	r7, r1
 800f974:	b9eb      	cbnz	r3, 800f9b2 <__kernel_sin+0xe2>
 800f976:	4602      	mov	r2, r0
 800f978:	460b      	mov	r3, r1
 800f97a:	4650      	mov	r0, sl
 800f97c:	4659      	mov	r1, fp
 800f97e:	f7f0 fe53 	bl	8000628 <__aeabi_dmul>
 800f982:	a325      	add	r3, pc, #148	; (adr r3, 800fa18 <__kernel_sin+0x148>)
 800f984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f988:	f7f0 fc96 	bl	80002b8 <__aeabi_dsub>
 800f98c:	4642      	mov	r2, r8
 800f98e:	464b      	mov	r3, r9
 800f990:	f7f0 fe4a 	bl	8000628 <__aeabi_dmul>
 800f994:	4602      	mov	r2, r0
 800f996:	460b      	mov	r3, r1
 800f998:	4620      	mov	r0, r4
 800f99a:	4629      	mov	r1, r5
 800f99c:	f7f0 fc8e 	bl	80002bc <__adddf3>
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	460d      	mov	r5, r1
 800f9a4:	ec45 4b10 	vmov	d0, r4, r5
 800f9a8:	b003      	add	sp, #12
 800f9aa:	ecbd 8b04 	vpop	{d8-d9}
 800f9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b2:	4b1b      	ldr	r3, [pc, #108]	; (800fa20 <__kernel_sin+0x150>)
 800f9b4:	ec51 0b18 	vmov	r0, r1, d8
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	f7f0 fe35 	bl	8000628 <__aeabi_dmul>
 800f9be:	4632      	mov	r2, r6
 800f9c0:	ec41 0b19 	vmov	d9, r0, r1
 800f9c4:	463b      	mov	r3, r7
 800f9c6:	4640      	mov	r0, r8
 800f9c8:	4649      	mov	r1, r9
 800f9ca:	f7f0 fe2d 	bl	8000628 <__aeabi_dmul>
 800f9ce:	4602      	mov	r2, r0
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	ec51 0b19 	vmov	r0, r1, d9
 800f9d6:	f7f0 fc6f 	bl	80002b8 <__aeabi_dsub>
 800f9da:	4652      	mov	r2, sl
 800f9dc:	465b      	mov	r3, fp
 800f9de:	f7f0 fe23 	bl	8000628 <__aeabi_dmul>
 800f9e2:	ec53 2b18 	vmov	r2, r3, d8
 800f9e6:	f7f0 fc67 	bl	80002b8 <__aeabi_dsub>
 800f9ea:	a30b      	add	r3, pc, #44	; (adr r3, 800fa18 <__kernel_sin+0x148>)
 800f9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f0:	4606      	mov	r6, r0
 800f9f2:	460f      	mov	r7, r1
 800f9f4:	4640      	mov	r0, r8
 800f9f6:	4649      	mov	r1, r9
 800f9f8:	f7f0 fe16 	bl	8000628 <__aeabi_dmul>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	460b      	mov	r3, r1
 800fa00:	4630      	mov	r0, r6
 800fa02:	4639      	mov	r1, r7
 800fa04:	f7f0 fc5a 	bl	80002bc <__adddf3>
 800fa08:	4602      	mov	r2, r0
 800fa0a:	460b      	mov	r3, r1
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	4629      	mov	r1, r5
 800fa10:	f7f0 fc52 	bl	80002b8 <__aeabi_dsub>
 800fa14:	e7c4      	b.n	800f9a0 <__kernel_sin+0xd0>
 800fa16:	bf00      	nop
 800fa18:	55555549 	.word	0x55555549
 800fa1c:	3fc55555 	.word	0x3fc55555
 800fa20:	3fe00000 	.word	0x3fe00000
 800fa24:	5acfd57c 	.word	0x5acfd57c
 800fa28:	3de5d93a 	.word	0x3de5d93a
 800fa2c:	8a2b9ceb 	.word	0x8a2b9ceb
 800fa30:	3e5ae5e6 	.word	0x3e5ae5e6
 800fa34:	57b1fe7d 	.word	0x57b1fe7d
 800fa38:	3ec71de3 	.word	0x3ec71de3
 800fa3c:	19c161d5 	.word	0x19c161d5
 800fa40:	3f2a01a0 	.word	0x3f2a01a0
 800fa44:	1110f8a6 	.word	0x1110f8a6
 800fa48:	3f811111 	.word	0x3f811111

0800fa4c <with_errno>:
 800fa4c:	b570      	push	{r4, r5, r6, lr}
 800fa4e:	4604      	mov	r4, r0
 800fa50:	460d      	mov	r5, r1
 800fa52:	4616      	mov	r6, r2
 800fa54:	f7f8 fd30 	bl	80084b8 <__errno>
 800fa58:	4629      	mov	r1, r5
 800fa5a:	6006      	str	r6, [r0, #0]
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	bd70      	pop	{r4, r5, r6, pc}

0800fa60 <xflow>:
 800fa60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa62:	4614      	mov	r4, r2
 800fa64:	461d      	mov	r5, r3
 800fa66:	b108      	cbz	r0, 800fa6c <xflow+0xc>
 800fa68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fa6c:	e9cd 2300 	strd	r2, r3, [sp]
 800fa70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa74:	4620      	mov	r0, r4
 800fa76:	4629      	mov	r1, r5
 800fa78:	f7f0 fdd6 	bl	8000628 <__aeabi_dmul>
 800fa7c:	2222      	movs	r2, #34	; 0x22
 800fa7e:	b003      	add	sp, #12
 800fa80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa84:	f7ff bfe2 	b.w	800fa4c <with_errno>

0800fa88 <__math_uflow>:
 800fa88:	b508      	push	{r3, lr}
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fa90:	f7ff ffe6 	bl	800fa60 <xflow>
 800fa94:	ec41 0b10 	vmov	d0, r0, r1
 800fa98:	bd08      	pop	{r3, pc}

0800fa9a <__math_oflow>:
 800fa9a:	b508      	push	{r3, lr}
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800faa2:	f7ff ffdd 	bl	800fa60 <xflow>
 800faa6:	ec41 0b10 	vmov	d0, r0, r1
 800faaa:	bd08      	pop	{r3, pc}
 800faac:	0000      	movs	r0, r0
	...

0800fab0 <atan>:
 800fab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fab4:	ec55 4b10 	vmov	r4, r5, d0
 800fab8:	4bc3      	ldr	r3, [pc, #780]	; (800fdc8 <atan+0x318>)
 800faba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fabe:	429e      	cmp	r6, r3
 800fac0:	46ab      	mov	fp, r5
 800fac2:	dd18      	ble.n	800faf6 <atan+0x46>
 800fac4:	4bc1      	ldr	r3, [pc, #772]	; (800fdcc <atan+0x31c>)
 800fac6:	429e      	cmp	r6, r3
 800fac8:	dc01      	bgt.n	800face <atan+0x1e>
 800faca:	d109      	bne.n	800fae0 <atan+0x30>
 800facc:	b144      	cbz	r4, 800fae0 <atan+0x30>
 800face:	4622      	mov	r2, r4
 800fad0:	462b      	mov	r3, r5
 800fad2:	4620      	mov	r0, r4
 800fad4:	4629      	mov	r1, r5
 800fad6:	f7f0 fbf1 	bl	80002bc <__adddf3>
 800fada:	4604      	mov	r4, r0
 800fadc:	460d      	mov	r5, r1
 800fade:	e006      	b.n	800faee <atan+0x3e>
 800fae0:	f1bb 0f00 	cmp.w	fp, #0
 800fae4:	f300 8131 	bgt.w	800fd4a <atan+0x29a>
 800fae8:	a59b      	add	r5, pc, #620	; (adr r5, 800fd58 <atan+0x2a8>)
 800faea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800faee:	ec45 4b10 	vmov	d0, r4, r5
 800faf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf6:	4bb6      	ldr	r3, [pc, #728]	; (800fdd0 <atan+0x320>)
 800faf8:	429e      	cmp	r6, r3
 800fafa:	dc14      	bgt.n	800fb26 <atan+0x76>
 800fafc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fb00:	429e      	cmp	r6, r3
 800fb02:	dc0d      	bgt.n	800fb20 <atan+0x70>
 800fb04:	a396      	add	r3, pc, #600	; (adr r3, 800fd60 <atan+0x2b0>)
 800fb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0a:	ee10 0a10 	vmov	r0, s0
 800fb0e:	4629      	mov	r1, r5
 800fb10:	f7f0 fbd4 	bl	80002bc <__adddf3>
 800fb14:	4baf      	ldr	r3, [pc, #700]	; (800fdd4 <atan+0x324>)
 800fb16:	2200      	movs	r2, #0
 800fb18:	f7f1 f816 	bl	8000b48 <__aeabi_dcmpgt>
 800fb1c:	2800      	cmp	r0, #0
 800fb1e:	d1e6      	bne.n	800faee <atan+0x3e>
 800fb20:	f04f 3aff 	mov.w	sl, #4294967295
 800fb24:	e02b      	b.n	800fb7e <atan+0xce>
 800fb26:	f000 f963 	bl	800fdf0 <fabs>
 800fb2a:	4bab      	ldr	r3, [pc, #684]	; (800fdd8 <atan+0x328>)
 800fb2c:	429e      	cmp	r6, r3
 800fb2e:	ec55 4b10 	vmov	r4, r5, d0
 800fb32:	f300 80bf 	bgt.w	800fcb4 <atan+0x204>
 800fb36:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fb3a:	429e      	cmp	r6, r3
 800fb3c:	f300 80a0 	bgt.w	800fc80 <atan+0x1d0>
 800fb40:	ee10 2a10 	vmov	r2, s0
 800fb44:	ee10 0a10 	vmov	r0, s0
 800fb48:	462b      	mov	r3, r5
 800fb4a:	4629      	mov	r1, r5
 800fb4c:	f7f0 fbb6 	bl	80002bc <__adddf3>
 800fb50:	4ba0      	ldr	r3, [pc, #640]	; (800fdd4 <atan+0x324>)
 800fb52:	2200      	movs	r2, #0
 800fb54:	f7f0 fbb0 	bl	80002b8 <__aeabi_dsub>
 800fb58:	2200      	movs	r2, #0
 800fb5a:	4606      	mov	r6, r0
 800fb5c:	460f      	mov	r7, r1
 800fb5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fb62:	4620      	mov	r0, r4
 800fb64:	4629      	mov	r1, r5
 800fb66:	f7f0 fba9 	bl	80002bc <__adddf3>
 800fb6a:	4602      	mov	r2, r0
 800fb6c:	460b      	mov	r3, r1
 800fb6e:	4630      	mov	r0, r6
 800fb70:	4639      	mov	r1, r7
 800fb72:	f7f0 fe83 	bl	800087c <__aeabi_ddiv>
 800fb76:	f04f 0a00 	mov.w	sl, #0
 800fb7a:	4604      	mov	r4, r0
 800fb7c:	460d      	mov	r5, r1
 800fb7e:	4622      	mov	r2, r4
 800fb80:	462b      	mov	r3, r5
 800fb82:	4620      	mov	r0, r4
 800fb84:	4629      	mov	r1, r5
 800fb86:	f7f0 fd4f 	bl	8000628 <__aeabi_dmul>
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	4680      	mov	r8, r0
 800fb90:	4689      	mov	r9, r1
 800fb92:	f7f0 fd49 	bl	8000628 <__aeabi_dmul>
 800fb96:	a374      	add	r3, pc, #464	; (adr r3, 800fd68 <atan+0x2b8>)
 800fb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9c:	4606      	mov	r6, r0
 800fb9e:	460f      	mov	r7, r1
 800fba0:	f7f0 fd42 	bl	8000628 <__aeabi_dmul>
 800fba4:	a372      	add	r3, pc, #456	; (adr r3, 800fd70 <atan+0x2c0>)
 800fba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbaa:	f7f0 fb87 	bl	80002bc <__adddf3>
 800fbae:	4632      	mov	r2, r6
 800fbb0:	463b      	mov	r3, r7
 800fbb2:	f7f0 fd39 	bl	8000628 <__aeabi_dmul>
 800fbb6:	a370      	add	r3, pc, #448	; (adr r3, 800fd78 <atan+0x2c8>)
 800fbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbbc:	f7f0 fb7e 	bl	80002bc <__adddf3>
 800fbc0:	4632      	mov	r2, r6
 800fbc2:	463b      	mov	r3, r7
 800fbc4:	f7f0 fd30 	bl	8000628 <__aeabi_dmul>
 800fbc8:	a36d      	add	r3, pc, #436	; (adr r3, 800fd80 <atan+0x2d0>)
 800fbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbce:	f7f0 fb75 	bl	80002bc <__adddf3>
 800fbd2:	4632      	mov	r2, r6
 800fbd4:	463b      	mov	r3, r7
 800fbd6:	f7f0 fd27 	bl	8000628 <__aeabi_dmul>
 800fbda:	a36b      	add	r3, pc, #428	; (adr r3, 800fd88 <atan+0x2d8>)
 800fbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe0:	f7f0 fb6c 	bl	80002bc <__adddf3>
 800fbe4:	4632      	mov	r2, r6
 800fbe6:	463b      	mov	r3, r7
 800fbe8:	f7f0 fd1e 	bl	8000628 <__aeabi_dmul>
 800fbec:	a368      	add	r3, pc, #416	; (adr r3, 800fd90 <atan+0x2e0>)
 800fbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf2:	f7f0 fb63 	bl	80002bc <__adddf3>
 800fbf6:	4642      	mov	r2, r8
 800fbf8:	464b      	mov	r3, r9
 800fbfa:	f7f0 fd15 	bl	8000628 <__aeabi_dmul>
 800fbfe:	a366      	add	r3, pc, #408	; (adr r3, 800fd98 <atan+0x2e8>)
 800fc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc04:	4680      	mov	r8, r0
 800fc06:	4689      	mov	r9, r1
 800fc08:	4630      	mov	r0, r6
 800fc0a:	4639      	mov	r1, r7
 800fc0c:	f7f0 fd0c 	bl	8000628 <__aeabi_dmul>
 800fc10:	a363      	add	r3, pc, #396	; (adr r3, 800fda0 <atan+0x2f0>)
 800fc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc16:	f7f0 fb4f 	bl	80002b8 <__aeabi_dsub>
 800fc1a:	4632      	mov	r2, r6
 800fc1c:	463b      	mov	r3, r7
 800fc1e:	f7f0 fd03 	bl	8000628 <__aeabi_dmul>
 800fc22:	a361      	add	r3, pc, #388	; (adr r3, 800fda8 <atan+0x2f8>)
 800fc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc28:	f7f0 fb46 	bl	80002b8 <__aeabi_dsub>
 800fc2c:	4632      	mov	r2, r6
 800fc2e:	463b      	mov	r3, r7
 800fc30:	f7f0 fcfa 	bl	8000628 <__aeabi_dmul>
 800fc34:	a35e      	add	r3, pc, #376	; (adr r3, 800fdb0 <atan+0x300>)
 800fc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3a:	f7f0 fb3d 	bl	80002b8 <__aeabi_dsub>
 800fc3e:	4632      	mov	r2, r6
 800fc40:	463b      	mov	r3, r7
 800fc42:	f7f0 fcf1 	bl	8000628 <__aeabi_dmul>
 800fc46:	a35c      	add	r3, pc, #368	; (adr r3, 800fdb8 <atan+0x308>)
 800fc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4c:	f7f0 fb34 	bl	80002b8 <__aeabi_dsub>
 800fc50:	4632      	mov	r2, r6
 800fc52:	463b      	mov	r3, r7
 800fc54:	f7f0 fce8 	bl	8000628 <__aeabi_dmul>
 800fc58:	4602      	mov	r2, r0
 800fc5a:	460b      	mov	r3, r1
 800fc5c:	4640      	mov	r0, r8
 800fc5e:	4649      	mov	r1, r9
 800fc60:	f7f0 fb2c 	bl	80002bc <__adddf3>
 800fc64:	4622      	mov	r2, r4
 800fc66:	462b      	mov	r3, r5
 800fc68:	f7f0 fcde 	bl	8000628 <__aeabi_dmul>
 800fc6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fc70:	4602      	mov	r2, r0
 800fc72:	460b      	mov	r3, r1
 800fc74:	d14b      	bne.n	800fd0e <atan+0x25e>
 800fc76:	4620      	mov	r0, r4
 800fc78:	4629      	mov	r1, r5
 800fc7a:	f7f0 fb1d 	bl	80002b8 <__aeabi_dsub>
 800fc7e:	e72c      	b.n	800fada <atan+0x2a>
 800fc80:	ee10 0a10 	vmov	r0, s0
 800fc84:	4b53      	ldr	r3, [pc, #332]	; (800fdd4 <atan+0x324>)
 800fc86:	2200      	movs	r2, #0
 800fc88:	4629      	mov	r1, r5
 800fc8a:	f7f0 fb15 	bl	80002b8 <__aeabi_dsub>
 800fc8e:	4b51      	ldr	r3, [pc, #324]	; (800fdd4 <atan+0x324>)
 800fc90:	4606      	mov	r6, r0
 800fc92:	460f      	mov	r7, r1
 800fc94:	2200      	movs	r2, #0
 800fc96:	4620      	mov	r0, r4
 800fc98:	4629      	mov	r1, r5
 800fc9a:	f7f0 fb0f 	bl	80002bc <__adddf3>
 800fc9e:	4602      	mov	r2, r0
 800fca0:	460b      	mov	r3, r1
 800fca2:	4630      	mov	r0, r6
 800fca4:	4639      	mov	r1, r7
 800fca6:	f7f0 fde9 	bl	800087c <__aeabi_ddiv>
 800fcaa:	f04f 0a01 	mov.w	sl, #1
 800fcae:	4604      	mov	r4, r0
 800fcb0:	460d      	mov	r5, r1
 800fcb2:	e764      	b.n	800fb7e <atan+0xce>
 800fcb4:	4b49      	ldr	r3, [pc, #292]	; (800fddc <atan+0x32c>)
 800fcb6:	429e      	cmp	r6, r3
 800fcb8:	da1d      	bge.n	800fcf6 <atan+0x246>
 800fcba:	ee10 0a10 	vmov	r0, s0
 800fcbe:	4b48      	ldr	r3, [pc, #288]	; (800fde0 <atan+0x330>)
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	4629      	mov	r1, r5
 800fcc4:	f7f0 faf8 	bl	80002b8 <__aeabi_dsub>
 800fcc8:	4b45      	ldr	r3, [pc, #276]	; (800fde0 <atan+0x330>)
 800fcca:	4606      	mov	r6, r0
 800fccc:	460f      	mov	r7, r1
 800fcce:	2200      	movs	r2, #0
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	4629      	mov	r1, r5
 800fcd4:	f7f0 fca8 	bl	8000628 <__aeabi_dmul>
 800fcd8:	4b3e      	ldr	r3, [pc, #248]	; (800fdd4 <atan+0x324>)
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f7f0 faee 	bl	80002bc <__adddf3>
 800fce0:	4602      	mov	r2, r0
 800fce2:	460b      	mov	r3, r1
 800fce4:	4630      	mov	r0, r6
 800fce6:	4639      	mov	r1, r7
 800fce8:	f7f0 fdc8 	bl	800087c <__aeabi_ddiv>
 800fcec:	f04f 0a02 	mov.w	sl, #2
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	460d      	mov	r5, r1
 800fcf4:	e743      	b.n	800fb7e <atan+0xce>
 800fcf6:	462b      	mov	r3, r5
 800fcf8:	ee10 2a10 	vmov	r2, s0
 800fcfc:	4939      	ldr	r1, [pc, #228]	; (800fde4 <atan+0x334>)
 800fcfe:	2000      	movs	r0, #0
 800fd00:	f7f0 fdbc 	bl	800087c <__aeabi_ddiv>
 800fd04:	f04f 0a03 	mov.w	sl, #3
 800fd08:	4604      	mov	r4, r0
 800fd0a:	460d      	mov	r5, r1
 800fd0c:	e737      	b.n	800fb7e <atan+0xce>
 800fd0e:	4b36      	ldr	r3, [pc, #216]	; (800fde8 <atan+0x338>)
 800fd10:	4e36      	ldr	r6, [pc, #216]	; (800fdec <atan+0x33c>)
 800fd12:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fd16:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800fd1a:	e9da 2300 	ldrd	r2, r3, [sl]
 800fd1e:	f7f0 facb 	bl	80002b8 <__aeabi_dsub>
 800fd22:	4622      	mov	r2, r4
 800fd24:	462b      	mov	r3, r5
 800fd26:	f7f0 fac7 	bl	80002b8 <__aeabi_dsub>
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	460b      	mov	r3, r1
 800fd2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fd32:	f7f0 fac1 	bl	80002b8 <__aeabi_dsub>
 800fd36:	f1bb 0f00 	cmp.w	fp, #0
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	460d      	mov	r5, r1
 800fd3e:	f6bf aed6 	bge.w	800faee <atan+0x3e>
 800fd42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd46:	461d      	mov	r5, r3
 800fd48:	e6d1      	b.n	800faee <atan+0x3e>
 800fd4a:	a51d      	add	r5, pc, #116	; (adr r5, 800fdc0 <atan+0x310>)
 800fd4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fd50:	e6cd      	b.n	800faee <atan+0x3e>
 800fd52:	bf00      	nop
 800fd54:	f3af 8000 	nop.w
 800fd58:	54442d18 	.word	0x54442d18
 800fd5c:	bff921fb 	.word	0xbff921fb
 800fd60:	8800759c 	.word	0x8800759c
 800fd64:	7e37e43c 	.word	0x7e37e43c
 800fd68:	e322da11 	.word	0xe322da11
 800fd6c:	3f90ad3a 	.word	0x3f90ad3a
 800fd70:	24760deb 	.word	0x24760deb
 800fd74:	3fa97b4b 	.word	0x3fa97b4b
 800fd78:	a0d03d51 	.word	0xa0d03d51
 800fd7c:	3fb10d66 	.word	0x3fb10d66
 800fd80:	c54c206e 	.word	0xc54c206e
 800fd84:	3fb745cd 	.word	0x3fb745cd
 800fd88:	920083ff 	.word	0x920083ff
 800fd8c:	3fc24924 	.word	0x3fc24924
 800fd90:	5555550d 	.word	0x5555550d
 800fd94:	3fd55555 	.word	0x3fd55555
 800fd98:	2c6a6c2f 	.word	0x2c6a6c2f
 800fd9c:	bfa2b444 	.word	0xbfa2b444
 800fda0:	52defd9a 	.word	0x52defd9a
 800fda4:	3fadde2d 	.word	0x3fadde2d
 800fda8:	af749a6d 	.word	0xaf749a6d
 800fdac:	3fb3b0f2 	.word	0x3fb3b0f2
 800fdb0:	fe231671 	.word	0xfe231671
 800fdb4:	3fbc71c6 	.word	0x3fbc71c6
 800fdb8:	9998ebc4 	.word	0x9998ebc4
 800fdbc:	3fc99999 	.word	0x3fc99999
 800fdc0:	54442d18 	.word	0x54442d18
 800fdc4:	3ff921fb 	.word	0x3ff921fb
 800fdc8:	440fffff 	.word	0x440fffff
 800fdcc:	7ff00000 	.word	0x7ff00000
 800fdd0:	3fdbffff 	.word	0x3fdbffff
 800fdd4:	3ff00000 	.word	0x3ff00000
 800fdd8:	3ff2ffff 	.word	0x3ff2ffff
 800fddc:	40038000 	.word	0x40038000
 800fde0:	3ff80000 	.word	0x3ff80000
 800fde4:	bff00000 	.word	0xbff00000
 800fde8:	08010aa0 	.word	0x08010aa0
 800fdec:	08010a80 	.word	0x08010a80

0800fdf0 <fabs>:
 800fdf0:	ec51 0b10 	vmov	r0, r1, d0
 800fdf4:	ee10 2a10 	vmov	r2, s0
 800fdf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fdfc:	ec43 2b10 	vmov	d0, r2, r3
 800fe00:	4770      	bx	lr

0800fe02 <finite>:
 800fe02:	b082      	sub	sp, #8
 800fe04:	ed8d 0b00 	vstr	d0, [sp]
 800fe08:	9801      	ldr	r0, [sp, #4]
 800fe0a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800fe0e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fe12:	0fc0      	lsrs	r0, r0, #31
 800fe14:	b002      	add	sp, #8
 800fe16:	4770      	bx	lr

0800fe18 <floor>:
 800fe18:	ec51 0b10 	vmov	r0, r1, d0
 800fe1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800fe24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800fe28:	2e13      	cmp	r6, #19
 800fe2a:	ee10 5a10 	vmov	r5, s0
 800fe2e:	ee10 8a10 	vmov	r8, s0
 800fe32:	460c      	mov	r4, r1
 800fe34:	dc32      	bgt.n	800fe9c <floor+0x84>
 800fe36:	2e00      	cmp	r6, #0
 800fe38:	da14      	bge.n	800fe64 <floor+0x4c>
 800fe3a:	a333      	add	r3, pc, #204	; (adr r3, 800ff08 <floor+0xf0>)
 800fe3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe40:	f7f0 fa3c 	bl	80002bc <__adddf3>
 800fe44:	2200      	movs	r2, #0
 800fe46:	2300      	movs	r3, #0
 800fe48:	f7f0 fe7e 	bl	8000b48 <__aeabi_dcmpgt>
 800fe4c:	b138      	cbz	r0, 800fe5e <floor+0x46>
 800fe4e:	2c00      	cmp	r4, #0
 800fe50:	da57      	bge.n	800ff02 <floor+0xea>
 800fe52:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fe56:	431d      	orrs	r5, r3
 800fe58:	d001      	beq.n	800fe5e <floor+0x46>
 800fe5a:	4c2d      	ldr	r4, [pc, #180]	; (800ff10 <floor+0xf8>)
 800fe5c:	2500      	movs	r5, #0
 800fe5e:	4621      	mov	r1, r4
 800fe60:	4628      	mov	r0, r5
 800fe62:	e025      	b.n	800feb0 <floor+0x98>
 800fe64:	4f2b      	ldr	r7, [pc, #172]	; (800ff14 <floor+0xfc>)
 800fe66:	4137      	asrs	r7, r6
 800fe68:	ea01 0307 	and.w	r3, r1, r7
 800fe6c:	4303      	orrs	r3, r0
 800fe6e:	d01f      	beq.n	800feb0 <floor+0x98>
 800fe70:	a325      	add	r3, pc, #148	; (adr r3, 800ff08 <floor+0xf0>)
 800fe72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe76:	f7f0 fa21 	bl	80002bc <__adddf3>
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	f7f0 fe63 	bl	8000b48 <__aeabi_dcmpgt>
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d0eb      	beq.n	800fe5e <floor+0x46>
 800fe86:	2c00      	cmp	r4, #0
 800fe88:	bfbe      	ittt	lt
 800fe8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fe8e:	fa43 f606 	asrlt.w	r6, r3, r6
 800fe92:	19a4      	addlt	r4, r4, r6
 800fe94:	ea24 0407 	bic.w	r4, r4, r7
 800fe98:	2500      	movs	r5, #0
 800fe9a:	e7e0      	b.n	800fe5e <floor+0x46>
 800fe9c:	2e33      	cmp	r6, #51	; 0x33
 800fe9e:	dd0b      	ble.n	800feb8 <floor+0xa0>
 800fea0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fea4:	d104      	bne.n	800feb0 <floor+0x98>
 800fea6:	ee10 2a10 	vmov	r2, s0
 800feaa:	460b      	mov	r3, r1
 800feac:	f7f0 fa06 	bl	80002bc <__adddf3>
 800feb0:	ec41 0b10 	vmov	d0, r0, r1
 800feb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feb8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800febc:	f04f 33ff 	mov.w	r3, #4294967295
 800fec0:	fa23 f707 	lsr.w	r7, r3, r7
 800fec4:	4207      	tst	r7, r0
 800fec6:	d0f3      	beq.n	800feb0 <floor+0x98>
 800fec8:	a30f      	add	r3, pc, #60	; (adr r3, 800ff08 <floor+0xf0>)
 800feca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fece:	f7f0 f9f5 	bl	80002bc <__adddf3>
 800fed2:	2200      	movs	r2, #0
 800fed4:	2300      	movs	r3, #0
 800fed6:	f7f0 fe37 	bl	8000b48 <__aeabi_dcmpgt>
 800feda:	2800      	cmp	r0, #0
 800fedc:	d0bf      	beq.n	800fe5e <floor+0x46>
 800fede:	2c00      	cmp	r4, #0
 800fee0:	da02      	bge.n	800fee8 <floor+0xd0>
 800fee2:	2e14      	cmp	r6, #20
 800fee4:	d103      	bne.n	800feee <floor+0xd6>
 800fee6:	3401      	adds	r4, #1
 800fee8:	ea25 0507 	bic.w	r5, r5, r7
 800feec:	e7b7      	b.n	800fe5e <floor+0x46>
 800feee:	2301      	movs	r3, #1
 800fef0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fef4:	fa03 f606 	lsl.w	r6, r3, r6
 800fef8:	4435      	add	r5, r6
 800fefa:	4545      	cmp	r5, r8
 800fefc:	bf38      	it	cc
 800fefe:	18e4      	addcc	r4, r4, r3
 800ff00:	e7f2      	b.n	800fee8 <floor+0xd0>
 800ff02:	2500      	movs	r5, #0
 800ff04:	462c      	mov	r4, r5
 800ff06:	e7aa      	b.n	800fe5e <floor+0x46>
 800ff08:	8800759c 	.word	0x8800759c
 800ff0c:	7e37e43c 	.word	0x7e37e43c
 800ff10:	bff00000 	.word	0xbff00000
 800ff14:	000fffff 	.word	0x000fffff

0800ff18 <scalbn>:
 800ff18:	b570      	push	{r4, r5, r6, lr}
 800ff1a:	ec55 4b10 	vmov	r4, r5, d0
 800ff1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ff22:	4606      	mov	r6, r0
 800ff24:	462b      	mov	r3, r5
 800ff26:	b99a      	cbnz	r2, 800ff50 <scalbn+0x38>
 800ff28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ff2c:	4323      	orrs	r3, r4
 800ff2e:	d036      	beq.n	800ff9e <scalbn+0x86>
 800ff30:	4b39      	ldr	r3, [pc, #228]	; (8010018 <scalbn+0x100>)
 800ff32:	4629      	mov	r1, r5
 800ff34:	ee10 0a10 	vmov	r0, s0
 800ff38:	2200      	movs	r2, #0
 800ff3a:	f7f0 fb75 	bl	8000628 <__aeabi_dmul>
 800ff3e:	4b37      	ldr	r3, [pc, #220]	; (801001c <scalbn+0x104>)
 800ff40:	429e      	cmp	r6, r3
 800ff42:	4604      	mov	r4, r0
 800ff44:	460d      	mov	r5, r1
 800ff46:	da10      	bge.n	800ff6a <scalbn+0x52>
 800ff48:	a32b      	add	r3, pc, #172	; (adr r3, 800fff8 <scalbn+0xe0>)
 800ff4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4e:	e03a      	b.n	800ffc6 <scalbn+0xae>
 800ff50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ff54:	428a      	cmp	r2, r1
 800ff56:	d10c      	bne.n	800ff72 <scalbn+0x5a>
 800ff58:	ee10 2a10 	vmov	r2, s0
 800ff5c:	4620      	mov	r0, r4
 800ff5e:	4629      	mov	r1, r5
 800ff60:	f7f0 f9ac 	bl	80002bc <__adddf3>
 800ff64:	4604      	mov	r4, r0
 800ff66:	460d      	mov	r5, r1
 800ff68:	e019      	b.n	800ff9e <scalbn+0x86>
 800ff6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ff6e:	460b      	mov	r3, r1
 800ff70:	3a36      	subs	r2, #54	; 0x36
 800ff72:	4432      	add	r2, r6
 800ff74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ff78:	428a      	cmp	r2, r1
 800ff7a:	dd08      	ble.n	800ff8e <scalbn+0x76>
 800ff7c:	2d00      	cmp	r5, #0
 800ff7e:	a120      	add	r1, pc, #128	; (adr r1, 8010000 <scalbn+0xe8>)
 800ff80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff84:	da1c      	bge.n	800ffc0 <scalbn+0xa8>
 800ff86:	a120      	add	r1, pc, #128	; (adr r1, 8010008 <scalbn+0xf0>)
 800ff88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff8c:	e018      	b.n	800ffc0 <scalbn+0xa8>
 800ff8e:	2a00      	cmp	r2, #0
 800ff90:	dd08      	ble.n	800ffa4 <scalbn+0x8c>
 800ff92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ff96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ff9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ff9e:	ec45 4b10 	vmov	d0, r4, r5
 800ffa2:	bd70      	pop	{r4, r5, r6, pc}
 800ffa4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ffa8:	da19      	bge.n	800ffde <scalbn+0xc6>
 800ffaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ffae:	429e      	cmp	r6, r3
 800ffb0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ffb4:	dd0a      	ble.n	800ffcc <scalbn+0xb4>
 800ffb6:	a112      	add	r1, pc, #72	; (adr r1, 8010000 <scalbn+0xe8>)
 800ffb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d1e2      	bne.n	800ff86 <scalbn+0x6e>
 800ffc0:	a30f      	add	r3, pc, #60	; (adr r3, 8010000 <scalbn+0xe8>)
 800ffc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc6:	f7f0 fb2f 	bl	8000628 <__aeabi_dmul>
 800ffca:	e7cb      	b.n	800ff64 <scalbn+0x4c>
 800ffcc:	a10a      	add	r1, pc, #40	; (adr r1, 800fff8 <scalbn+0xe0>)
 800ffce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d0b8      	beq.n	800ff48 <scalbn+0x30>
 800ffd6:	a10e      	add	r1, pc, #56	; (adr r1, 8010010 <scalbn+0xf8>)
 800ffd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffdc:	e7b4      	b.n	800ff48 <scalbn+0x30>
 800ffde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ffe2:	3236      	adds	r2, #54	; 0x36
 800ffe4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ffe8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ffec:	4620      	mov	r0, r4
 800ffee:	4b0c      	ldr	r3, [pc, #48]	; (8010020 <scalbn+0x108>)
 800fff0:	2200      	movs	r2, #0
 800fff2:	e7e8      	b.n	800ffc6 <scalbn+0xae>
 800fff4:	f3af 8000 	nop.w
 800fff8:	c2f8f359 	.word	0xc2f8f359
 800fffc:	01a56e1f 	.word	0x01a56e1f
 8010000:	8800759c 	.word	0x8800759c
 8010004:	7e37e43c 	.word	0x7e37e43c
 8010008:	8800759c 	.word	0x8800759c
 801000c:	fe37e43c 	.word	0xfe37e43c
 8010010:	c2f8f359 	.word	0xc2f8f359
 8010014:	81a56e1f 	.word	0x81a56e1f
 8010018:	43500000 	.word	0x43500000
 801001c:	ffff3cb0 	.word	0xffff3cb0
 8010020:	3c900000 	.word	0x3c900000

08010024 <_init>:
 8010024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010026:	bf00      	nop
 8010028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801002a:	bc08      	pop	{r3}
 801002c:	469e      	mov	lr, r3
 801002e:	4770      	bx	lr

08010030 <_fini>:
 8010030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010032:	bf00      	nop
 8010034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010036:	bc08      	pop	{r3}
 8010038:	469e      	mov	lr, r3
 801003a:	4770      	bx	lr
