
Control_Robot_v6.2_ModTurn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffcc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a98  08010170  08010170  00020170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c08  08010c08  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08010c08  08010c08  00020c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c10  08010c10  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c10  08010c10  00020c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c14  08010c14  00020c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08010c18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009b28  200001f0  08010e08  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009d18  08010e08  00039d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008449  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b02  00000000  00000000  00038669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0003a170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b8  00000000  00000000  0003a830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011ceb  00000000  00000000  0003ade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a482  00000000  00000000  0004cad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000599e2  00000000  00000000  00056f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b0937  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000384c  00000000  00000000  000b0988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010154 	.word	0x08010154

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08010154 	.word	0x08010154

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_frsub>:
 8000cb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	e002      	b.n	8000cc4 <__addsf3>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fsub>:
 8000cc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cc4 <__addsf3>:
 8000cc4:	0042      	lsls	r2, r0, #1
 8000cc6:	bf1f      	itttt	ne
 8000cc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ccc:	ea92 0f03 	teqne	r2, r3
 8000cd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd8:	d06a      	beq.n	8000db0 <__addsf3+0xec>
 8000cda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ce2:	bfc1      	itttt	gt
 8000ce4:	18d2      	addgt	r2, r2, r3
 8000ce6:	4041      	eorgt	r1, r0
 8000ce8:	4048      	eorgt	r0, r1
 8000cea:	4041      	eorgt	r1, r0
 8000cec:	bfb8      	it	lt
 8000cee:	425b      	neglt	r3, r3
 8000cf0:	2b19      	cmp	r3, #25
 8000cf2:	bf88      	it	hi
 8000cf4:	4770      	bxhi	lr
 8000cf6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4249      	negne	r1, r1
 8000d16:	ea92 0f03 	teq	r2, r3
 8000d1a:	d03f      	beq.n	8000d9c <__addsf3+0xd8>
 8000d1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d20:	fa41 fc03 	asr.w	ip, r1, r3
 8000d24:	eb10 000c 	adds.w	r0, r0, ip
 8000d28:	f1c3 0320 	rsb	r3, r3, #32
 8000d2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__addsf3+0x78>
 8000d36:	4249      	negs	r1, r1
 8000d38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d40:	d313      	bcc.n	8000d6a <__addsf3+0xa6>
 8000d42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d46:	d306      	bcc.n	8000d56 <__addsf3+0x92>
 8000d48:	0840      	lsrs	r0, r0, #1
 8000d4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d4e:	f102 0201 	add.w	r2, r2, #1
 8000d52:	2afe      	cmp	r2, #254	; 0xfe
 8000d54:	d251      	bcs.n	8000dfa <__addsf3+0x136>
 8000d56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5e:	bf08      	it	eq
 8000d60:	f020 0001 	biceq.w	r0, r0, #1
 8000d64:	ea40 0003 	orr.w	r0, r0, r3
 8000d68:	4770      	bx	lr
 8000d6a:	0049      	lsls	r1, r1, #1
 8000d6c:	eb40 0000 	adc.w	r0, r0, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	bf28      	it	cs
 8000d74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d78:	d2ed      	bcs.n	8000d56 <__addsf3+0x92>
 8000d7a:	fab0 fc80 	clz	ip, r0
 8000d7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d82:	ebb2 020c 	subs.w	r2, r2, ip
 8000d86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d8a:	bfaa      	itet	ge
 8000d8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d90:	4252      	neglt	r2, r2
 8000d92:	4318      	orrge	r0, r3
 8000d94:	bfbc      	itt	lt
 8000d96:	40d0      	lsrlt	r0, r2
 8000d98:	4318      	orrlt	r0, r3
 8000d9a:	4770      	bx	lr
 8000d9c:	f092 0f00 	teq	r2, #0
 8000da0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000da4:	bf06      	itte	eq
 8000da6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000daa:	3201      	addeq	r2, #1
 8000dac:	3b01      	subne	r3, #1
 8000dae:	e7b5      	b.n	8000d1c <__addsf3+0x58>
 8000db0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db8:	bf18      	it	ne
 8000dba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dbe:	d021      	beq.n	8000e04 <__addsf3+0x140>
 8000dc0:	ea92 0f03 	teq	r2, r3
 8000dc4:	d004      	beq.n	8000dd0 <__addsf3+0x10c>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	bf08      	it	eq
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	4770      	bx	lr
 8000dd0:	ea90 0f01 	teq	r0, r1
 8000dd4:	bf1c      	itt	ne
 8000dd6:	2000      	movne	r0, #0
 8000dd8:	4770      	bxne	lr
 8000dda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dde:	d104      	bne.n	8000dea <__addsf3+0x126>
 8000de0:	0040      	lsls	r0, r0, #1
 8000de2:	bf28      	it	cs
 8000de4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dee:	bf3c      	itt	cc
 8000df0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000df4:	4770      	bxcc	lr
 8000df6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	4770      	bx	lr
 8000e04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e08:	bf16      	itet	ne
 8000e0a:	4608      	movne	r0, r1
 8000e0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e10:	4601      	movne	r1, r0
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	bf06      	itte	eq
 8000e16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e1a:	ea90 0f01 	teqeq	r0, r1
 8000e1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_ui2f>:
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e004      	b.n	8000e34 <__aeabi_i2f+0x8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_i2f>:
 8000e2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e30:	bf48      	it	mi
 8000e32:	4240      	negmi	r0, r0
 8000e34:	ea5f 0c00 	movs.w	ip, r0
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e40:	4601      	mov	r1, r0
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	e01c      	b.n	8000e82 <__aeabi_l2f+0x2a>

08000e48 <__aeabi_ul2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e00a      	b.n	8000e6c <__aeabi_l2f+0x14>
 8000e56:	bf00      	nop

08000e58 <__aeabi_l2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_l2f+0x14>
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	ea5f 0c01 	movs.w	ip, r1
 8000e70:	bf02      	ittt	eq
 8000e72:	4684      	moveq	ip, r0
 8000e74:	4601      	moveq	r1, r0
 8000e76:	2000      	moveq	r0, #0
 8000e78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e7c:	bf08      	it	eq
 8000e7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e86:	fabc f28c 	clz	r2, ip
 8000e8a:	3a08      	subs	r2, #8
 8000e8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e90:	db10      	blt.n	8000eb4 <__aeabi_l2f+0x5c>
 8000e92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e96:	4463      	add	r3, ip
 8000e98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ea4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f102 0220 	add.w	r2, r2, #32
 8000eb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ec4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_ldivmod>:
 8000ed4:	b97b      	cbnz	r3, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed6:	b972      	cbnz	r2, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	bfbe      	ittt	lt
 8000edc:	2000      	movlt	r0, #0
 8000ede:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ee2:	e006      	blt.n	8000ef2 <__aeabi_ldivmod+0x1e>
 8000ee4:	bf08      	it	eq
 8000ee6:	2800      	cmpeq	r0, #0
 8000ee8:	bf1c      	itt	ne
 8000eea:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000eee:	f04f 30ff 	movne.w	r0, #4294967295
 8000ef2:	f000 b9dd 	b.w	80012b0 <__aeabi_idiv0>
 8000ef6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000efa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000efe:	2900      	cmp	r1, #0
 8000f00:	db09      	blt.n	8000f16 <__aeabi_ldivmod+0x42>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db1a      	blt.n	8000f3c <__aeabi_ldivmod+0x68>
 8000f06:	f000 f86b 	bl	8000fe0 <__udivmoddi4>
 8000f0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f12:	b004      	add	sp, #16
 8000f14:	4770      	bx	lr
 8000f16:	4240      	negs	r0, r0
 8000f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db1b      	blt.n	8000f58 <__aeabi_ldivmod+0x84>
 8000f20:	f000 f85e 	bl	8000fe0 <__udivmoddi4>
 8000f24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2c:	b004      	add	sp, #16
 8000f2e:	4240      	negs	r0, r0
 8000f30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f34:	4252      	negs	r2, r2
 8000f36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f3a:	4770      	bx	lr
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	f000 f84d 	bl	8000fe0 <__udivmoddi4>
 8000f46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f4e:	b004      	add	sp, #16
 8000f50:	4240      	negs	r0, r0
 8000f52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f56:	4770      	bx	lr
 8000f58:	4252      	negs	r2, r2
 8000f5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f5e:	f000 f83f 	bl	8000fe0 <__udivmoddi4>
 8000f62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f6a:	b004      	add	sp, #16
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_d2lz>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	2200      	movs	r2, #0
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	f7ff fdc5 	bl	8000b0c <__aeabi_dcmplt>
 8000f82:	b928      	cbnz	r0, 8000f90 <__aeabi_d2lz+0x1c>
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f8c:	f000 b80a 	b.w	8000fa4 <__aeabi_d2ulz>
 8000f90:	4620      	mov	r0, r4
 8000f92:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f96:	f000 f805 	bl	8000fa4 <__aeabi_d2ulz>
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_d2ulz>:
 8000fa4:	b5d0      	push	{r4, r6, r7, lr}
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__aeabi_d2ulz+0x34>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4606      	mov	r6, r0
 8000fac:	460f      	mov	r7, r1
 8000fae:	f7ff fb3b 	bl	8000628 <__aeabi_dmul>
 8000fb2:	f7ff fe11 	bl	8000bd8 <__aeabi_d2uiz>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	f7ff fabc 	bl	8000534 <__aeabi_ui2d>
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <__aeabi_d2ulz+0x38>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f7ff fb32 	bl	8000628 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4630      	mov	r0, r6
 8000fca:	4639      	mov	r1, r7
 8000fcc:	f7ff f974 	bl	80002b8 <__aeabi_dsub>
 8000fd0:	f7ff fe02 	bl	8000bd8 <__aeabi_d2uiz>
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	bdd0      	pop	{r4, r6, r7, pc}
 8000fd8:	3df00000 	.word	0x3df00000
 8000fdc:	41f00000 	.word	0x41f00000

08000fe0 <__udivmoddi4>:
 8000fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe4:	9d08      	ldr	r5, [sp, #32]
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	468e      	mov	lr, r1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d14d      	bne.n	800108a <__udivmoddi4+0xaa>
 8000fee:	428a      	cmp	r2, r1
 8000ff0:	4694      	mov	ip, r2
 8000ff2:	d969      	bls.n	80010c8 <__udivmoddi4+0xe8>
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	b152      	cbz	r2, 8001010 <__udivmoddi4+0x30>
 8000ffa:	fa01 f302 	lsl.w	r3, r1, r2
 8000ffe:	f1c2 0120 	rsb	r1, r2, #32
 8001002:	fa20 f101 	lsr.w	r1, r0, r1
 8001006:	fa0c fc02 	lsl.w	ip, ip, r2
 800100a:	ea41 0e03 	orr.w	lr, r1, r3
 800100e:	4094      	lsls	r4, r2
 8001010:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001014:	0c21      	lsrs	r1, r4, #16
 8001016:	fbbe f6f8 	udiv	r6, lr, r8
 800101a:	fa1f f78c 	uxth.w	r7, ip
 800101e:	fb08 e316 	mls	r3, r8, r6, lr
 8001022:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001026:	fb06 f107 	mul.w	r1, r6, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d90a      	bls.n	8001044 <__udivmoddi4+0x64>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f106 30ff 	add.w	r0, r6, #4294967295
 8001036:	f080 811f 	bcs.w	8001278 <__udivmoddi4+0x298>
 800103a:	4299      	cmp	r1, r3
 800103c:	f240 811c 	bls.w	8001278 <__udivmoddi4+0x298>
 8001040:	3e02      	subs	r6, #2
 8001042:	4463      	add	r3, ip
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	b2a4      	uxth	r4, r4
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3310 	mls	r3, r8, r0, r3
 8001050:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001054:	fb00 f707 	mul.w	r7, r0, r7
 8001058:	42a7      	cmp	r7, r4
 800105a:	d90a      	bls.n	8001072 <__udivmoddi4+0x92>
 800105c:	eb1c 0404 	adds.w	r4, ip, r4
 8001060:	f100 33ff 	add.w	r3, r0, #4294967295
 8001064:	f080 810a 	bcs.w	800127c <__udivmoddi4+0x29c>
 8001068:	42a7      	cmp	r7, r4
 800106a:	f240 8107 	bls.w	800127c <__udivmoddi4+0x29c>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001076:	1be4      	subs	r4, r4, r7
 8001078:	2600      	movs	r6, #0
 800107a:	b11d      	cbz	r5, 8001084 <__udivmoddi4+0xa4>
 800107c:	40d4      	lsrs	r4, r2
 800107e:	2300      	movs	r3, #0
 8001080:	e9c5 4300 	strd	r4, r3, [r5]
 8001084:	4631      	mov	r1, r6
 8001086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108a:	428b      	cmp	r3, r1
 800108c:	d909      	bls.n	80010a2 <__udivmoddi4+0xc2>
 800108e:	2d00      	cmp	r5, #0
 8001090:	f000 80ef 	beq.w	8001272 <__udivmoddi4+0x292>
 8001094:	2600      	movs	r6, #0
 8001096:	e9c5 0100 	strd	r0, r1, [r5]
 800109a:	4630      	mov	r0, r6
 800109c:	4631      	mov	r1, r6
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	fab3 f683 	clz	r6, r3
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d14a      	bne.n	8001140 <__udivmoddi4+0x160>
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d302      	bcc.n	80010b4 <__udivmoddi4+0xd4>
 80010ae:	4282      	cmp	r2, r0
 80010b0:	f200 80f9 	bhi.w	80012a6 <__udivmoddi4+0x2c6>
 80010b4:	1a84      	subs	r4, r0, r2
 80010b6:	eb61 0303 	sbc.w	r3, r1, r3
 80010ba:	2001      	movs	r0, #1
 80010bc:	469e      	mov	lr, r3
 80010be:	2d00      	cmp	r5, #0
 80010c0:	d0e0      	beq.n	8001084 <__udivmoddi4+0xa4>
 80010c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80010c6:	e7dd      	b.n	8001084 <__udivmoddi4+0xa4>
 80010c8:	b902      	cbnz	r2, 80010cc <__udivmoddi4+0xec>
 80010ca:	deff      	udf	#255	; 0xff
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f040 8092 	bne.w	80011fa <__udivmoddi4+0x21a>
 80010d6:	eba1 010c 	sub.w	r1, r1, ip
 80010da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010de:	fa1f fe8c 	uxth.w	lr, ip
 80010e2:	2601      	movs	r6, #1
 80010e4:	0c20      	lsrs	r0, r4, #16
 80010e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80010ea:	fb07 1113 	mls	r1, r7, r3, r1
 80010ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010f2:	fb0e f003 	mul.w	r0, lr, r3
 80010f6:	4288      	cmp	r0, r1
 80010f8:	d908      	bls.n	800110c <__udivmoddi4+0x12c>
 80010fa:	eb1c 0101 	adds.w	r1, ip, r1
 80010fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8001102:	d202      	bcs.n	800110a <__udivmoddi4+0x12a>
 8001104:	4288      	cmp	r0, r1
 8001106:	f200 80cb 	bhi.w	80012a0 <__udivmoddi4+0x2c0>
 800110a:	4643      	mov	r3, r8
 800110c:	1a09      	subs	r1, r1, r0
 800110e:	b2a4      	uxth	r4, r4
 8001110:	fbb1 f0f7 	udiv	r0, r1, r7
 8001114:	fb07 1110 	mls	r1, r7, r0, r1
 8001118:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800111c:	fb0e fe00 	mul.w	lr, lr, r0
 8001120:	45a6      	cmp	lr, r4
 8001122:	d908      	bls.n	8001136 <__udivmoddi4+0x156>
 8001124:	eb1c 0404 	adds.w	r4, ip, r4
 8001128:	f100 31ff 	add.w	r1, r0, #4294967295
 800112c:	d202      	bcs.n	8001134 <__udivmoddi4+0x154>
 800112e:	45a6      	cmp	lr, r4
 8001130:	f200 80bb 	bhi.w	80012aa <__udivmoddi4+0x2ca>
 8001134:	4608      	mov	r0, r1
 8001136:	eba4 040e 	sub.w	r4, r4, lr
 800113a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800113e:	e79c      	b.n	800107a <__udivmoddi4+0x9a>
 8001140:	f1c6 0720 	rsb	r7, r6, #32
 8001144:	40b3      	lsls	r3, r6
 8001146:	fa22 fc07 	lsr.w	ip, r2, r7
 800114a:	ea4c 0c03 	orr.w	ip, ip, r3
 800114e:	fa20 f407 	lsr.w	r4, r0, r7
 8001152:	fa01 f306 	lsl.w	r3, r1, r6
 8001156:	431c      	orrs	r4, r3
 8001158:	40f9      	lsrs	r1, r7
 800115a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800115e:	fa00 f306 	lsl.w	r3, r0, r6
 8001162:	fbb1 f8f9 	udiv	r8, r1, r9
 8001166:	0c20      	lsrs	r0, r4, #16
 8001168:	fa1f fe8c 	uxth.w	lr, ip
 800116c:	fb09 1118 	mls	r1, r9, r8, r1
 8001170:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001174:	fb08 f00e 	mul.w	r0, r8, lr
 8001178:	4288      	cmp	r0, r1
 800117a:	fa02 f206 	lsl.w	r2, r2, r6
 800117e:	d90b      	bls.n	8001198 <__udivmoddi4+0x1b8>
 8001180:	eb1c 0101 	adds.w	r1, ip, r1
 8001184:	f108 3aff 	add.w	sl, r8, #4294967295
 8001188:	f080 8088 	bcs.w	800129c <__udivmoddi4+0x2bc>
 800118c:	4288      	cmp	r0, r1
 800118e:	f240 8085 	bls.w	800129c <__udivmoddi4+0x2bc>
 8001192:	f1a8 0802 	sub.w	r8, r8, #2
 8001196:	4461      	add	r1, ip
 8001198:	1a09      	subs	r1, r1, r0
 800119a:	b2a4      	uxth	r4, r4
 800119c:	fbb1 f0f9 	udiv	r0, r1, r9
 80011a0:	fb09 1110 	mls	r1, r9, r0, r1
 80011a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ac:	458e      	cmp	lr, r1
 80011ae:	d908      	bls.n	80011c2 <__udivmoddi4+0x1e2>
 80011b0:	eb1c 0101 	adds.w	r1, ip, r1
 80011b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011b8:	d26c      	bcs.n	8001294 <__udivmoddi4+0x2b4>
 80011ba:	458e      	cmp	lr, r1
 80011bc:	d96a      	bls.n	8001294 <__udivmoddi4+0x2b4>
 80011be:	3802      	subs	r0, #2
 80011c0:	4461      	add	r1, ip
 80011c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011c6:	fba0 9402 	umull	r9, r4, r0, r2
 80011ca:	eba1 010e 	sub.w	r1, r1, lr
 80011ce:	42a1      	cmp	r1, r4
 80011d0:	46c8      	mov	r8, r9
 80011d2:	46a6      	mov	lr, r4
 80011d4:	d356      	bcc.n	8001284 <__udivmoddi4+0x2a4>
 80011d6:	d053      	beq.n	8001280 <__udivmoddi4+0x2a0>
 80011d8:	b15d      	cbz	r5, 80011f2 <__udivmoddi4+0x212>
 80011da:	ebb3 0208 	subs.w	r2, r3, r8
 80011de:	eb61 010e 	sbc.w	r1, r1, lr
 80011e2:	fa01 f707 	lsl.w	r7, r1, r7
 80011e6:	fa22 f306 	lsr.w	r3, r2, r6
 80011ea:	40f1      	lsrs	r1, r6
 80011ec:	431f      	orrs	r7, r3
 80011ee:	e9c5 7100 	strd	r7, r1, [r5]
 80011f2:	2600      	movs	r6, #0
 80011f4:	4631      	mov	r1, r6
 80011f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011fa:	f1c2 0320 	rsb	r3, r2, #32
 80011fe:	40d8      	lsrs	r0, r3
 8001200:	fa0c fc02 	lsl.w	ip, ip, r2
 8001204:	fa21 f303 	lsr.w	r3, r1, r3
 8001208:	4091      	lsls	r1, r2
 800120a:	4301      	orrs	r1, r0
 800120c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001210:	fa1f fe8c 	uxth.w	lr, ip
 8001214:	fbb3 f0f7 	udiv	r0, r3, r7
 8001218:	fb07 3610 	mls	r6, r7, r0, r3
 800121c:	0c0b      	lsrs	r3, r1, #16
 800121e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001222:	fb00 f60e 	mul.w	r6, r0, lr
 8001226:	429e      	cmp	r6, r3
 8001228:	fa04 f402 	lsl.w	r4, r4, r2
 800122c:	d908      	bls.n	8001240 <__udivmoddi4+0x260>
 800122e:	eb1c 0303 	adds.w	r3, ip, r3
 8001232:	f100 38ff 	add.w	r8, r0, #4294967295
 8001236:	d22f      	bcs.n	8001298 <__udivmoddi4+0x2b8>
 8001238:	429e      	cmp	r6, r3
 800123a:	d92d      	bls.n	8001298 <__udivmoddi4+0x2b8>
 800123c:	3802      	subs	r0, #2
 800123e:	4463      	add	r3, ip
 8001240:	1b9b      	subs	r3, r3, r6
 8001242:	b289      	uxth	r1, r1
 8001244:	fbb3 f6f7 	udiv	r6, r3, r7
 8001248:	fb07 3316 	mls	r3, r7, r6, r3
 800124c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001250:	fb06 f30e 	mul.w	r3, r6, lr
 8001254:	428b      	cmp	r3, r1
 8001256:	d908      	bls.n	800126a <__udivmoddi4+0x28a>
 8001258:	eb1c 0101 	adds.w	r1, ip, r1
 800125c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001260:	d216      	bcs.n	8001290 <__udivmoddi4+0x2b0>
 8001262:	428b      	cmp	r3, r1
 8001264:	d914      	bls.n	8001290 <__udivmoddi4+0x2b0>
 8001266:	3e02      	subs	r6, #2
 8001268:	4461      	add	r1, ip
 800126a:	1ac9      	subs	r1, r1, r3
 800126c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001270:	e738      	b.n	80010e4 <__udivmoddi4+0x104>
 8001272:	462e      	mov	r6, r5
 8001274:	4628      	mov	r0, r5
 8001276:	e705      	b.n	8001084 <__udivmoddi4+0xa4>
 8001278:	4606      	mov	r6, r0
 800127a:	e6e3      	b.n	8001044 <__udivmoddi4+0x64>
 800127c:	4618      	mov	r0, r3
 800127e:	e6f8      	b.n	8001072 <__udivmoddi4+0x92>
 8001280:	454b      	cmp	r3, r9
 8001282:	d2a9      	bcs.n	80011d8 <__udivmoddi4+0x1f8>
 8001284:	ebb9 0802 	subs.w	r8, r9, r2
 8001288:	eb64 0e0c 	sbc.w	lr, r4, ip
 800128c:	3801      	subs	r0, #1
 800128e:	e7a3      	b.n	80011d8 <__udivmoddi4+0x1f8>
 8001290:	4646      	mov	r6, r8
 8001292:	e7ea      	b.n	800126a <__udivmoddi4+0x28a>
 8001294:	4620      	mov	r0, r4
 8001296:	e794      	b.n	80011c2 <__udivmoddi4+0x1e2>
 8001298:	4640      	mov	r0, r8
 800129a:	e7d1      	b.n	8001240 <__udivmoddi4+0x260>
 800129c:	46d0      	mov	r8, sl
 800129e:	e77b      	b.n	8001198 <__udivmoddi4+0x1b8>
 80012a0:	3b02      	subs	r3, #2
 80012a2:	4461      	add	r1, ip
 80012a4:	e732      	b.n	800110c <__udivmoddi4+0x12c>
 80012a6:	4630      	mov	r0, r6
 80012a8:	e709      	b.n	80010be <__udivmoddi4+0xde>
 80012aa:	4464      	add	r4, ip
 80012ac:	3802      	subs	r0, #2
 80012ae:	e742      	b.n	8001136 <__udivmoddi4+0x156>

080012b0 <__aeabi_idiv0>:
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop

080012b4 <aplicattion_A_Star>:
#include "A_Star.h"
#include <float.h>
#include <math.h>

//-----------------------------------------------Funciones para la implementacion de A Star------------------------------------------------------------------
file_cell_t* aplicattion_A_Star(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float start_x, float start_y, float goal_x, float goal_y) {
 80012b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b8:	f5ad 4dd5 	sub.w	sp, sp, #27264	; 0x6a80
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012c4:	f6a3 2374 	subw	r3, r3, #2676	; 0xa74
 80012c8:	6018      	str	r0, [r3, #0]
 80012ca:	4608      	mov	r0, r1
 80012cc:	4611      	mov	r1, r2
 80012ce:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012d2:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 80012d6:	ed83 0a00 	vstr	s0, [r3]
 80012da:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012de:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 80012e2:	edc3 0a00 	vstr	s1, [r3]
 80012e6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012ea:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 80012ee:	ed83 1a00 	vstr	s2, [r3]
 80012f2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80012f6:	f6a3 2388 	subw	r3, r3, #2696	; 0xa88
 80012fa:	edc3 1a00 	vstr	s3, [r3]
 80012fe:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001302:	f6a3 2375 	subw	r3, r3, #2677	; 0xa75
 8001306:	4602      	mov	r2, r0
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800130e:	f6a3 2376 	subw	r3, r3, #2678	; 0xa76
 8001312:	460a      	mov	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
  //Variables
  file_cell_t *ptrFile;                           //Puntero a la ficha de la secuencia actual de A Star
  file_cell_t file_Open[100] = {0};               //Arreglo de fichas abiertas
 8001316:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800131a:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 800131e:	4618      	mov	r0, r3
 8001320:	f646 2340 	movw	r3, #27200	; 0x6a40
 8001324:	461a      	mov	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	f007 f986 	bl	8008638 <memset>
  uint64_t file_Open_Availability = 0b1;          //Conjunto de bits que indica que fichas abiertas estan disponibles para la comparacion
 800132c:	f04f 0201 	mov.w	r2, #1
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	f507 41d5 	add.w	r1, r7, #27264	; 0x6a80
 8001338:	f101 0108 	add.w	r1, r1, #8
 800133c:	e9c1 2300 	strd	r2, r3, [r1]
  uint8_t bit_file_cell = 0;                      //bit de una ficha que indica su disponibilidad
 8001340:	2300      	movs	r3, #0
 8001342:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001346:	f102 0270 	add.w	r2, r2, #112	; 0x70
 800134a:	7013      	strb	r3, [r2, #0]
  uint8_t index_ptr = 0;                          //Indice de la ficha de la secuencia actual de A Star
 800134c:	2300      	movs	r3, #0
 800134e:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001352:	f102 0207 	add.w	r2, r2, #7
 8001356:	7013      	strb	r3, [r2, #0]
  float min_h;                                    //Valor minimo de la heuristica H
  uint8_t index_file_Open;                        //Indice de la ficha de la ficha abierta a crear

  //----------------Se crea la ficha inicial----------------
  //Se crea la ficha inicial
  file_Open[0].num_parent = 0;
 8001358:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800135c:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  file_Open[0].cost_g = 0.0f;
 8001366:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800136a:	f6a3 236c 	subw	r3, r3, #2668	; 0xa6c
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  //Por medio de un puntero se asigna la ficha inicial
  ptrFile = &file_Open[0];
 8001376:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800137a:	3b6c      	subs	r3, #108	; 0x6c
 800137c:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001380:	f102 0214 	add.w	r2, r2, #20
 8001384:	6013      	str	r3, [r2, #0]
  
  // ------------- Se identifica la celda inicial -----------
  for (int i = 0; i < row; i++) 
 8001386:	2300      	movs	r3, #0
 8001388:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800138c:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e09d      	b.n	80014d0 <aplicattion_A_Star+0x21c>
  {
    for (int j = 0; j < colum; j++) 
 8001394:	2300      	movs	r3, #0
 8001396:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800139a:	f102 0274 	add.w	r2, r2, #116	; 0x74
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e07e      	b.n	80014a0 <aplicattion_A_Star+0x1ec>
    {
      if (grid[i][j].coor_x == start_x && grid[i][j].coor_y == start_y) 
 80013a2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80013a6:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 80013b8:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	441a      	add	r2, r3
 80013c0:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80013c4:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2158      	movs	r1, #88	; 0x58
 80013cc:	fb01 f303 	mul.w	r3, r1, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	3304      	adds	r3, #4
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80013dc:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 80013e0:	ed93 7a00 	vldr	s14, [r3]
 80013e4:	eeb4 7a67 	vcmp.f32	s14, s15
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	d14d      	bne.n	800148a <aplicattion_A_Star+0x1d6>
 80013ee:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80013f2:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80013fc:	fb02 f303 	mul.w	r3, r2, r3
 8001400:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 8001404:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	441a      	add	r2, r3
 800140c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001410:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2158      	movs	r1, #88	; 0x58
 8001418:	fb01 f303 	mul.w	r3, r1, r3
 800141c:	4413      	add	r3, r2
 800141e:	3308      	adds	r3, #8
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001428:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 800142c:	ed93 7a00 	vldr	s14, [r3]
 8001430:	eeb4 7a67 	vcmp.f32	s14, s15
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	d127      	bne.n	800148a <aplicattion_A_Star+0x1d6>
      {
        ptrFile->ptrCell_file = &grid[i][j];  
 800143a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800143e:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	f607 2298 	addw	r2, r7, #2712	; 0xa98
 8001450:	f6a2 2274 	subw	r2, r2, #2676	; 0xa74
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	441a      	add	r2, r3
 8001458:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800145c:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2158      	movs	r1, #88	; 0x58
 8001464:	fb01 f303 	mul.w	r3, r1, r3
 8001468:	441a      	add	r2, r3
 800146a:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800146e:	f103 0314 	add.w	r3, r3, #20
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	601a      	str	r2, [r3, #0]
        ptrFile->ptrCell_file->status  = OPEN;
 8001476:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800147a:	f103 0314 	add.w	r3, r3, #20
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        break;
 8001488:	e017      	b.n	80014ba <aplicattion_A_Star+0x206>
    for (int j = 0; j < colum; j++) 
 800148a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800148e:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800149a:	f102 0274 	add.w	r2, r2, #116	; 0x74
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80014a4:	f6a3 2376 	subw	r3, r3, #2678	; 0xa76
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80014ae:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	f6ff af74 	blt.w	80013a2 <aplicattion_A_Star+0xee>
  for (int i = 0; i < row; i++) 
 80014ba:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80014be:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80014ca:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80014d4:	f6a3 2375 	subw	r3, r3, #2677	; 0xa75
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80014de:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f6ff af55 	blt.w	8001394 <aplicattion_A_Star+0xe0>
    }
  }

  while (1) {
    // Inicializamos variables
    min_f = DBL_MAX;
 80014ea:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80014ee:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80014f2:	6013      	str	r3, [r2, #0]
    min_h = DBL_MAX;
 80014f4:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80014f8:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80014fc:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001500:	6013      	str	r3, [r2, #0]

    //---------------------Creacion de las diferentes fichas de las celdas vecinas-----------------
    for(uint8_t k = 0; k < 8; k++) 
 8001502:	2300      	movs	r3, #0
 8001504:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001508:	f102 0273 	add.w	r2, r2, #115	; 0x73
 800150c:	7013      	strb	r3, [r2, #0]
 800150e:	e1a4      	b.n	800185a <aplicattion_A_Star+0x5a6>
    {
      if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k] != NULL) 
 8001510:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001514:	f103 0314 	add.w	r3, r3, #20
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001520:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	3302      	adds	r3, #2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8188 	beq.w	8001844 <aplicattion_A_Star+0x590>
      {
        if(ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h != -1.0f && ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status < OPEN)
 8001534:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001538:	f103 0314 	add.w	r3, r3, #20
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001544:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	3302      	adds	r3, #2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001556:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800155a:	eef4 7a47 	vcmp.f32	s15, s14
 800155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001562:	f000 816f 	beq.w	8001844 <aplicattion_A_Star+0x590>
 8001566:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800156a:	f103 0314 	add.w	r3, r3, #20
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001576:	f103 0373 	add.w	r3, r3, #115	; 0x73
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	3302      	adds	r3, #2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001588:	2b00      	cmp	r3, #0
 800158a:	f040 815b 	bne.w	8001844 <aplicattion_A_Star+0x590>
        {
          //Se busca la posicion que ocupada la nueva ficha en la lista de fichas abiertas
          index_file_Open = search_position_file_Open(file_Open, file_Open_Availability);
 800158e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001592:	396c      	subs	r1, #108	; 0x6c
 8001594:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001598:	f103 0308 	add.w	r3, r3, #8
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	4608      	mov	r0, r1
 80015a2:	f000 fae2 	bl	8001b6a <search_position_file_Open>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80015ac:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 80015b0:	7013      	strb	r3, [r2, #0]
          //Se abre la celda
          ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->status = OPEN;
 80015b2:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80015b6:	f103 0314 	add.w	r3, r3, #20
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80015c2:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	3302      	adds	r3, #2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          //Se crea la ficha
          file_Open[index_file_Open].ptrCell_file = ptrFile->ptrCell_file->neighbors.ptrCellMap[k];
 80015d6:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80015da:	f103 0314 	add.w	r3, r3, #20
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80015e6:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	f507 41d4 	add.w	r1, r7, #27136	; 0x6a00
 80015f0:	f101 016f 	add.w	r1, r1, #111	; 0x6f
 80015f4:	7809      	ldrb	r1, [r1, #0]
 80015f6:	3302      	adds	r3, #2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001602:	f6a3 206c 	subw	r0, r3, #2668	; 0xa6c
 8001606:	460b      	mov	r3, r1
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	440b      	add	r3, r1
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	4403      	add	r3, r0
 8001610:	601a      	str	r2, [r3, #0]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 8001612:	2300      	movs	r3, #0
 8001614:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001618:	f102 0272 	add.w	r2, r2, #114	; 0x72
 800161c:	7013      	strb	r3, [r2, #0]
 800161e:	e02d      	b.n	800167c <aplicattion_A_Star+0x3c8>
          {
            file_Open[index_file_Open].ptrCell_parent[u] = ptrFile->ptrCell_parent[u];
 8001620:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001624:	f103 0372 	add.w	r3, r3, #114	; 0x72
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800162e:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 8001632:	7811      	ldrb	r1, [r2, #0]
 8001634:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001638:	f102 0272 	add.w	r2, r2, #114	; 0x72
 800163c:	7814      	ldrb	r4, [r2, #0]
 800163e:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001642:	f102 0214 	add.w	r2, r2, #20
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	6858      	ldr	r0, [r3, #4]
 800164e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001652:	f6a3 226c 	subw	r2, r3, #2668	; 0xa6c
 8001656:	460b      	mov	r3, r1
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	440b      	add	r3, r1
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4423      	add	r3, r4
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	6058      	str	r0, [r3, #4]
          for(uint8_t u = 0; u < ptrFile->num_parent; u++)
 8001666:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800166a:	f103 0372 	add.w	r3, r3, #114	; 0x72
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001676:	f102 0272 	add.w	r2, r2, #114	; 0x72
 800167a:	7013      	strb	r3, [r2, #0]
 800167c:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001680:	f103 0314 	add.w	r3, r3, #20
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800168a:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800168e:	f102 0272 	add.w	r2, r2, #114	; 0x72
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d3c3      	bcc.n	8001620 <aplicattion_A_Star+0x36c>
          }
          file_Open[index_file_Open].ptrCell_parent[ptrFile->num_parent] = ptrFile->ptrCell_file;
 8001698:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800169c:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80016a6:	f103 0314 	add.w	r3, r3, #20
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80016b0:	461c      	mov	r4, r3
 80016b2:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80016b6:	f103 0314 	add.w	r3, r3, #20
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80016c2:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80016c6:	4613      	mov	r3, r2
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4423      	add	r3, r4
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	6058      	str	r0, [r3, #4]
          file_Open[index_file_Open].ptrCell_parent[(ptrFile->num_parent+1)] = NULL;
 80016d6:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80016da:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80016de:	781a      	ldrb	r2, [r3, #0]
 80016e0:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80016e4:	f103 0314 	add.w	r3, r3, #20
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80016ee:	1c58      	adds	r0, r3, #1
 80016f0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80016f4:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80016f8:	4613      	mov	r3, r2
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4403      	add	r3, r0
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	2200      	movs	r2, #0
 8001708:	605a      	str	r2, [r3, #4]
          file_Open[index_file_Open].num_parent = ptrFile->num_parent+1;
 800170a:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800170e:	f103 0314 	add.w	r3, r3, #20
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8001718:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800171c:	f102 026f 	add.w	r2, r2, #111	; 0x6f
 8001720:	7812      	ldrb	r2, [r2, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	b2d8      	uxtb	r0, r3
 8001726:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800172a:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800172e:	4613      	mov	r3, r2
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	4413      	add	r3, r2
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	440b      	add	r3, r1
 8001738:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800173c:	4602      	mov	r2, r0
 800173e:	701a      	strb	r2, [r3, #0]
          file_Open[index_file_Open].cost_g = ptrFile->ptrCell_file->neighbors.distance_neigh[k]+ptrFile->cost_g;
 8001740:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001744:	f103 0314 	add.w	r3, r3, #20
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001750:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	330a      	adds	r3, #10
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	3304      	adds	r3, #4
 800175e:	ed93 7a00 	vldr	s14, [r3]
 8001762:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001766:	f103 0314 	add.w	r3, r3, #20
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8001770:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001774:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001782:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001786:	4613      	mov	r3, r2
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4413      	add	r3, r2
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	440b      	add	r3, r1
 8001790:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001794:	edc3 7a00 	vstr	s15, [r3]
          file_Open[index_file_Open].function_F = file_Open[index_file_Open].cost_g + ptrFile->ptrCell_file->neighbors.ptrCellMap[k]->h;
 8001798:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800179c:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80017a0:	781a      	ldrb	r2, [r3, #0]
 80017a2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80017a6:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80017aa:	4613      	mov	r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	4413      	add	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	440b      	add	r3, r1
 80017b4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80017b8:	ed93 7a00 	vldr	s14, [r3]
 80017bc:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80017c0:	f103 0314 	add.w	r3, r3, #20
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80017cc:	f103 0373 	add.w	r3, r3, #115	; 0x73
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	3302      	adds	r3, #2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80017de:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80017e2:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ec:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80017f0:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80017f4:	4613      	mov	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	4413      	add	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	440b      	add	r3, r1
 80017fe:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001802:	edc3 7a00 	vstr	s15, [r3]
          //Indicacion de la disponibilidad de la ficha
          file_Open_Availability |= (0b1 << index_file_Open);
 8001806:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800180a:	f103 036f 	add.w	r3, r3, #111	; 0x6f
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	17da      	asrs	r2, r3, #31
 8001818:	469a      	mov	sl, r3
 800181a:	4693      	mov	fp, r2
 800181c:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001820:	f103 0308 	add.w	r3, r3, #8
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	ea42 010a 	orr.w	r1, r2, sl
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	ea43 030b 	orr.w	r3, r3, fp
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001838:	f102 0208 	add.w	r2, r2, #8
 800183c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001840:	e9c2 3400 	strd	r3, r4, [r2]
    for(uint8_t k = 0; k < 8; k++) 
 8001844:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001848:	f103 0373 	add.w	r3, r3, #115	; 0x73
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001854:	f102 0273 	add.w	r2, r2, #115	; 0x73
 8001858:	7013      	strb	r3, [r2, #0]
 800185a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800185e:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b07      	cmp	r3, #7
 8001866:	f67f ae53 	bls.w	8001510 <aplicattion_A_Star+0x25c>
      }
    }
    
    //-----------------Cerramos la ficha actual del puntero----------------------
    //indicamos el nuevo estado de la celda
    ptrFile->ptrCell_file->status = CLOSED;
 800186a:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800186e:	f103 0314 	add.w	r3, r3, #20
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    //Indicacion de la no disponibilidad de la ficha
    file_Open_Availability &=  ~(0b1 << index_ptr);
 800187c:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001880:	f103 0307 	add.w	r3, r3, #7
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2201      	movs	r2, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	17da      	asrs	r2, r3, #31
 8001890:	461d      	mov	r5, r3
 8001892:	4616      	mov	r6, r2
 8001894:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001898:	f103 0308 	add.w	r3, r3, #8
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	ea02 0105 	and.w	r1, r2, r5
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	4033      	ands	r3, r6
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80018ae:	f102 0208 	add.w	r2, r2, #8
 80018b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018b6:	e9c2 3400 	strd	r3, r4, [r2]
     
    //---------------- Comparación función F ---------------------
    for (uint8_t k = 0; k < 64; k++) {
 80018ba:	2300      	movs	r3, #0
 80018bc:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80018c0:	f102 0271 	add.w	r2, r2, #113	; 0x71
 80018c4:	7013      	strb	r3, [r2, #0]
 80018c6:	e101      	b.n	8001acc <aplicattion_A_Star+0x818>
      //Recorrido
      bit_file_cell = (file_Open_Availability >> k) & 0b1;
 80018c8:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80018cc:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80018d0:	7818      	ldrb	r0, [r3, #0]
 80018d2:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 80018d6:	f103 0308 	add.w	r3, r3, #8
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f1c0 0420 	rsb	r4, r0, #32
 80018e2:	f1a0 0120 	sub.w	r1, r0, #32
 80018e6:	fa22 f800 	lsr.w	r8, r2, r0
 80018ea:	fa03 f404 	lsl.w	r4, r3, r4
 80018ee:	ea48 0804 	orr.w	r8, r8, r4
 80018f2:	fa23 f101 	lsr.w	r1, r3, r1
 80018f6:	ea48 0801 	orr.w	r8, r8, r1
 80018fa:	fa23 f900 	lsr.w	r9, r3, r0
 80018fe:	fa5f f388 	uxtb.w	r3, r8
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 800190a:	f102 0270 	add.w	r2, r2, #112	; 0x70
 800190e:	7013      	strb	r3, [r2, #0]
      //Se el bit es un valor logico de 1 entonces la ficha esta disponible para su comparacion con las demas
      if(bit_file_cell==1 && file_Open[k].ptrCell_file != NULL)
 8001910:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001914:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b01      	cmp	r3, #1
 800191c:	f040 80cb 	bne.w	8001ab6 <aplicattion_A_Star+0x802>
 8001920:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001924:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001928:	781a      	ldrb	r2, [r3, #0]
 800192a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800192e:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001932:	4613      	mov	r3, r2
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	4413      	add	r3, r2
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	440b      	add	r3, r1
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80b9 	beq.w	8001ab6 <aplicattion_A_Star+0x802>
      {
        // Verificar que la función F sea menor al valor anterior
        if (file_Open[k].function_F < min_f) {
 8001944:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001948:	f103 0371 	add.w	r3, r3, #113	; 0x71
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001952:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4413      	add	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	440b      	add	r3, r1
 8001960:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 800196c:	ed93 7a00 	vldr	s14, [r3]
 8001970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001978:	dd33      	ble.n	80019e2 <aplicattion_A_Star+0x72e>
          // Reemplazamos valores
          min_f = file_Open[k].function_F;
 800197a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 800197e:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001988:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	4413      	add	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	440b      	add	r3, r1
 8001996:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80019a0:	6013      	str	r3, [r2, #0]
          min_h = file_Open[k].ptrCell_file->h;
 80019a2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80019a6:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80019b0:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80019b4:	4613      	mov	r3, r2
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	440b      	add	r3, r1
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c2:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 80019c6:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80019ca:	6013      	str	r3, [r2, #0]
          index_ptr = k;
 80019cc:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80019d0:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 80019da:	f102 0207 	add.w	r2, r2, #7
 80019de:	7013      	strb	r3, [r2, #0]
 80019e0:	e069      	b.n	8001ab6 <aplicattion_A_Star+0x802>
        }
        // Verificar que la función F sea igual al valor anterior, si es así se desempata con el valor h
        else if (file_Open[k].function_F == min_f) {
 80019e2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 80019e6:	f103 0371 	add.w	r3, r3, #113	; 0x71
 80019ea:	781a      	ldrb	r2, [r3, #0]
 80019ec:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80019f0:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 80019f4:	4613      	mov	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	440b      	add	r3, r1
 80019fe:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001a0a:	ed93 7a00 	vldr	s14, [r3]
 8001a0e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	d14e      	bne.n	8001ab6 <aplicattion_A_Star+0x802>
          if (file_Open[k].ptrCell_file->h < min_h) {
 8001a18:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001a1c:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001a26:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4413      	add	r3, r2
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	440b      	add	r3, r1
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001a3a:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001a3e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8001a42:	ed93 7a00 	vldr	s14, [r3]
 8001a46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4e:	dd32      	ble.n	8001ab6 <aplicattion_A_Star+0x802>
              // Reemplazamos valores
              min_f = file_Open[k].function_F;
 8001a50:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001a54:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001a5e:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001a62:	4613      	mov	r3, r2
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4413      	add	r3, r2
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001a76:	6013      	str	r3, [r2, #0]
              min_h = file_Open[k].ptrCell_file->h;
 8001a78:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001a7c:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001a86:	f6a3 216c 	subw	r1, r3, #2668	; 0xa6c
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	440b      	add	r3, r1
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a98:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001a9c:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001aa0:	6013      	str	r3, [r2, #0]
              index_ptr = k;         
 8001aa2:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001aa6:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001ab0:	f102 0207 	add.w	r2, r2, #7
 8001ab4:	7013      	strb	r3, [r2, #0]
    for (uint8_t k = 0; k < 64; k++) {
 8001ab6:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001aba:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8001ac6:	f102 0271 	add.w	r2, r2, #113	; 0x71
 8001aca:	7013      	strb	r3, [r2, #0]
 8001acc:	f507 43d4 	add.w	r3, r7, #27136	; 0x6a00
 8001ad0:	f103 0371 	add.w	r3, r3, #113	; 0x71
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b3f      	cmp	r3, #63	; 0x3f
 8001ad8:	f67f aef6 	bls.w	80018c8 <aplicattion_A_Star+0x614>
        }
      }
    }
    
    //--------------- Seleccionamos nueva ficha para el puntero--------------------
    ptrFile = &file_Open[index_ptr];
 8001adc:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001ae0:	f103 0307 	add.w	r3, r3, #7
 8001ae4:	7819      	ldrb	r1, [r3, #0]
 8001ae6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001aea:	3a6c      	subs	r2, #108	; 0x6c
 8001aec:	460b      	mov	r3, r1
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	440b      	add	r3, r1
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4413      	add	r3, r2
 8001af6:	f507 42d5 	add.w	r2, r7, #27264	; 0x6a80
 8001afa:	f102 0214 	add.w	r2, r2, #20
 8001afe:	6013      	str	r3, [r2, #0]
    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrFile->ptrCell_file->coor_x == goal_x && ptrFile->ptrCell_file->coor_y == goal_y) {
 8001b00:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001b04:	f103 0314 	add.w	r3, r3, #20
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b10:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001b14:	f6a3 2384 	subw	r3, r3, #2692	; 0xa84
 8001b18:	ed93 7a00 	vldr	s14, [r3]
 8001b1c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	f47f ace1 	bne.w	80014ea <aplicattion_A_Star+0x236>
 8001b28:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001b2c:	f103 0314 	add.w	r3, r3, #20
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b38:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001b3c:	f6a3 2388 	subw	r3, r3, #2696	; 0xa88
 8001b40:	ed93 7a00 	vldr	s14, [r3]
 8001b44:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	d000      	beq.n	8001b50 <aplicattion_A_Star+0x89c>
    min_f = DBL_MAX;
 8001b4e:	e4cc      	b.n	80014ea <aplicattion_A_Star+0x236>
        break;
 8001b50:	bf00      	nop
    }
  }
  return ptrFile;
 8001b52:	f507 43d5 	add.w	r3, r7, #27264	; 0x6a80
 8001b56:	f103 0314 	add.w	r3, r3, #20
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f507 47d5 	add.w	r7, r7, #27264	; 0x6a80
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001b6a <search_position_file_Open>:


uint8_t search_position_file_Open(file_cell_t list_file[64], uint64_t avan_file)
{
 8001b6a:	b4f0      	push	{r4, r5, r6, r7}
 8001b6c:	b08a      	sub	sp, #40	; 0x28
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	e9c7 2300 	strd	r2, r3, [r7]
  //Variables
  uint8_t bit_list = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 110;
 8001b7a:	236e      	movs	r3, #110	; 0x6e
 8001b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  float value_f = 0;
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  //bucle para recorrer la lista de bits
  for(int i = 0; i<110; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	e01e      	b.n	8001bca <search_position_file_Open+0x60>
  {
    //Recorrido
    bit_list = (avan_file >> i) & 0b1;
 8001b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b90:	69f9      	ldr	r1, [r7, #28]
 8001b92:	f1c1 0620 	rsb	r6, r1, #32
 8001b96:	f1a1 0020 	sub.w	r0, r1, #32
 8001b9a:	fa22 f401 	lsr.w	r4, r2, r1
 8001b9e:	fa03 f606 	lsl.w	r6, r3, r6
 8001ba2:	4334      	orrs	r4, r6
 8001ba4:	fa23 f000 	lsr.w	r0, r3, r0
 8001ba8:	4304      	orrs	r4, r0
 8001baa:	fa23 f501 	lsr.w	r5, r3, r1
 8001bae:	b2e3      	uxtb	r3, r4
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	75fb      	strb	r3, [r7, #23]
    //Se comprueba el bit de correspondiente a la disponibilidad de la ficha
    if(bit_list  == 0)
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d103      	bne.n	8001bc4 <search_position_file_Open+0x5a>
    {
      index = i;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001bc2:	e005      	b.n	8001bd0 <search_position_file_Open+0x66>
  for(int i = 0; i<110; i++)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	2b6d      	cmp	r3, #109	; 0x6d
 8001bce:	dddd      	ble.n	8001b8c <search_position_file_Open+0x22>
    }
  }
  /*En caso que no se indico un valor diferente a 100 para el indice, se busca una ubicacion dentro 
  de la lista de fichas abiertas, seleccionando aquella ubicacion donde el valor de la funcion f
  sea la mayor*/
  if (index == 110)
 8001bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bd4:	2b6e      	cmp	r3, #110	; 0x6e
 8001bd6:	d132      	bne.n	8001c3e <search_position_file_Open+0xd4>
  {  
    //Recorrido del arreglo de fichas abiertas
    for(int k = 0; k<64; k++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	e02c      	b.n	8001c38 <search_position_file_Open+0xce>
    {  
      //Se busca el mayor valor de la funcion f
      if(list_file[k].ptrCell_file != NULL && list_file[k].function_F > value_f)
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	4413      	add	r3, r2
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	461a      	mov	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01e      	beq.n	8001c32 <search_position_file_Open+0xc8>
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	4413      	add	r3, r2
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 8001c08:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c14:	d50d      	bpl.n	8001c32 <search_position_file_Open+0xc8>
      {
        value_f = list_file[k].function_F;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	4413      	add	r3, r2
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	461a      	mov	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4413      	add	r3, r2
 8001c26:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c2a:	623b      	str	r3, [r7, #32]
        index = k;
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(int k = 0; k<64; k++)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61bb      	str	r3, [r7, #24]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2b3f      	cmp	r3, #63	; 0x3f
 8001c3c:	ddcf      	ble.n	8001bde <search_position_file_Open+0x74>
      }
    }
  }
  
  return index;
 8001c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bcf0      	pop	{r4, r5, r6, r7}
 8001c4a:	4770      	bx	lr

08001c4c <heuristic_cell_map>:



//-----------------------------------------------Funciones calculo heuristica----------------------------------------------------------------
void heuristic_cell_map(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float goal_x, float goal_y){
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	460b      	mov	r3, r1
 8001c56:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c5a:	edc7 0a00 	vstr	s1, [r7]
 8001c5e:	72fb      	strb	r3, [r7, #11]
 8001c60:	4613      	mov	r3, r2
 8001c62:	72bb      	strb	r3, [r7, #10]
  //Recorrido por cada una de las celdas
  for (int i = 0; i < row; i++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e071      	b.n	8001d4e <heuristic_cell_map+0x102>
  {
    for (int j = 0; j < colum; j++) 
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	e067      	b.n	8001d40 <heuristic_cell_map+0xf4>
    {
      //Calculo heuristica
      if(grid[i][j].feature =='G')
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	441a      	add	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2158      	movs	r1, #88	; 0x58
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	334c      	adds	r3, #76	; 0x4c
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b47      	cmp	r3, #71	; 0x47
 8001c8e:	d110      	bne.n	8001cb2 <heuristic_cell_map+0x66>
      {
        grid[i][j].h = 0.0f;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	441a      	add	r2, r3
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2158      	movs	r1, #88	; 0x58
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3350      	adds	r3, #80	; 0x50
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e043      	b.n	8001d3a <heuristic_cell_map+0xee>
      }
      else if(grid[i][j].feature=='#')
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	441a      	add	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2158      	movs	r1, #88	; 0x58
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	334c      	adds	r3, #76	; 0x4c
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b23      	cmp	r3, #35	; 0x23
 8001cd0:	d10f      	bne.n	8001cf2 <heuristic_cell_map+0xa6>
      {
        grid[i][j].h = -1.0f;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	441a      	add	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	2158      	movs	r1, #88	; 0x58
 8001ce4:	fb01 f303 	mul.w	r3, r1, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	3350      	adds	r3, #80	; 0x50
 8001cec:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <heuristic_cell_map+0x114>)
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	e023      	b.n	8001d3a <heuristic_cell_map+0xee>
      }
      else
      {
        grid[i][j].h = heuristic_single_cell(&grid[i][j], goal_x, goal_y); 
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	441a      	add	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2158      	movs	r1, #88	; 0x58
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	18d1      	adds	r1, r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8001d10:	fb02 f303 	mul.w	r3, r2, r3
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	18d4      	adds	r4, r2, r3
 8001d18:	edd7 0a00 	vldr	s1, [r7]
 8001d1c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d20:	4608      	mov	r0, r1
 8001d22:	f000 f821 	bl	8001d68 <heuristic_single_cell>
 8001d26:	eef0 7a40 	vmov.f32	s15, s0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2258      	movs	r2, #88	; 0x58
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	4423      	add	r3, r4
 8001d34:	3350      	adds	r3, #80	; 0x50
 8001d36:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < colum; j++) 
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	7abb      	ldrb	r3, [r7, #10]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	db93      	blt.n	8001c70 <heuristic_cell_map+0x24>
  for (int i = 0; i < row; i++)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	db89      	blt.n	8001c6a <heuristic_cell_map+0x1e>
      }   
    }
  }  
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd90      	pop	{r4, r7, pc}
 8001d60:	bf800000 	.word	0xbf800000
 8001d64:	00000000 	.word	0x00000000

08001d68 <heuristic_single_cell>:


float heuristic_single_cell(Cell_map_t *cell, float  goal_x, float goal_y)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	ed2d 8b02 	vpush	{d8}
 8001d6e:	b0a3      	sub	sp, #140	; 0x8c
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d78:	edc7 0a01 	vstr	s1, [r7, #4]
  //---------Definicion de variables--------
  //Variables del calculo heuristica
  Cell_map_t *ptrCell = cell;                 //Puntero a la celda actual
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  float total_distante = 0;                   //Distancia total entre la celda actual y la celda del gol
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  float dis[8];                               //Distancia entre la celda vecina y la recta
  uint8_t best_index;                         //Mejor indice de las celdas vecinas
  float min_distance;                         //Distancia minima entre la celda vecina y la recta
  //Variables Recta
  float A_recta;                              //Parametros de la recta
  float B_recta = -1.0f;
 8001d8a:	4be3      	ldr	r3, [pc, #908]	; (8002118 <heuristic_single_cell+0x3b0>)
 8001d8c:	673b      	str	r3, [r7, #112]	; 0x70
  float delta_x;                              //Diferencia la coordenada x entre la celda inicial y la final
  float mag_delta;                            //Magnitud del vector resultante de la diferencia de las coordenadas

  
   //---------------Calculos parametros de la recta-----------------
  delta_y = goal_y - cell->coor_y;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d94:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d9c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
  delta_x = goal_x - cell->coor_x;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dae:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
  mag_delta = sqrtf(delta_x * delta_x + delta_y * delta_y);
 8001db2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001db6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001dba:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001dbe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dca:	f00b fec3 	bl	800db54 <sqrtf>
 8001dce:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
  A_recta =  delta_y / delta_x;
 8001dd2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001dd6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dde:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  C_recta = cell->coor_y - A_recta * cell->coor_x;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	edd3 6a01 	vldr	s13, [r3, #4]
 8001dee:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

  while (1)
  { 
    //Inicializamos variables
    best_index = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    min_distance = DBL_MAX;
 8001e04:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8001e08:	67bb      	str	r3, [r7, #120]	; 0x78

    //------------------Calculo parametros de cada una de las celdas vecinas--------------------
    for (uint8_t k = 0; k < 8; k++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001e10:	e0fc      	b.n	800200c <heuristic_single_cell+0x2a4>
    {
      //Verificamos que el puntero al vecino no es nulo
      if (ptrCell->neighbors.ptrCellMap[k] == NULL)
 8001e12:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e16:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d110      	bne.n	8001e48 <heuristic_single_cell+0xe0>
      {
        ang_between_vector[k] = -1.0f;
 8001e26:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	3388      	adds	r3, #136	; 0x88
 8001e2e:	443b      	add	r3, r7
 8001e30:	3b58      	subs	r3, #88	; 0x58
 8001e32:	4ab9      	ldr	r2, [pc, #740]	; (8002118 <heuristic_single_cell+0x3b0>)
 8001e34:	601a      	str	r2, [r3, #0]
        dis[k] = -1.0f;          
 8001e36:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	3388      	adds	r3, #136	; 0x88
 8001e3e:	443b      	add	r3, r7
 8001e40:	3b78      	subs	r3, #120	; 0x78
 8001e42:	4ab5      	ldr	r2, [pc, #724]	; (8002118 <heuristic_single_cell+0x3b0>)
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e0dc      	b.n	8002002 <heuristic_single_cell+0x29a>
      }
      else
      {
        //Calculo vector relativo
        rel_x = ptrCell->neighbors.ptrCellMap[k]->coor_x - ptrCell->coor_x;
 8001e48:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e50:	3302      	adds	r3, #2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e68:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        rel_y = ptrCell->neighbors.ptrCellMap[k]->coor_y - ptrCell->coor_y;
 8001e6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001e70:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e74:	3302      	adds	r3, #2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e84:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        //Calculo parametros
        res = round(((rel_x*delta_x + rel_y*delta_y) / (ptrCell->neighbors.distance_neigh[k] * mag_delta)) * 10000) / 10000;
 8001e90:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001e94:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e9c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001ea0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea8:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001eac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001eb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001eb4:	330a      	adds	r3, #10
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3304      	adds	r3, #4
 8001ebc:	ed93 7a00 	vldr	s14, [r3]
 8001ec0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ecc:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800211c <heuristic_single_cell+0x3b4>
 8001ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed4:	ee17 0a90 	vmov	r0, s15
 8001ed8:	f7fe fb4e 	bl	8000578 <__aeabi_f2d>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	ec43 2b10 	vmov	d0, r2, r3
 8001ee4:	f00b fcc4 	bl	800d870 <round>
 8001ee8:	ec51 0b10 	vmov	r0, r1, d0
 8001eec:	a388      	add	r3, pc, #544	; (adr r3, 8002110 <heuristic_single_cell+0x3a8>)
 8001eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef2:	f7fe fcc3 	bl	800087c <__aeabi_ddiv>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7fe fe8b 	bl	8000c18 <__aeabi_d2f>
 8001f02:	4603      	mov	r3, r0
 8001f04:	653b      	str	r3, [r7, #80]	; 0x50
        ang_between_vector[k] = acos(res);
 8001f06:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001f08:	f7fe fb36 	bl	8000578 <__aeabi_f2d>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	ec43 2b10 	vmov	d0, r2, r3
 8001f14:	f00b fd4c 	bl	800d9b0 <acos>
 8001f18:	ec53 2b10 	vmov	r2, r3, d0
 8001f1c:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fe78 	bl	8000c18 <__aeabi_d2f>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	00a3      	lsls	r3, r4, #2
 8001f2c:	3388      	adds	r3, #136	; 0x88
 8001f2e:	443b      	add	r3, r7
 8001f30:	3b58      	subs	r3, #88	; 0x58
 8001f32:	601a      	str	r2, [r3, #0]
        if(A_recta != INFINITY && A_recta != -INFINITY)
 8001f34:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f38:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002120 <heuristic_single_cell+0x3b8>
 8001f3c:	eef4 7a47 	vcmp.f32	s15, s14
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	dc45      	bgt.n	8001fd2 <heuristic_single_cell+0x26a>
 8001f46:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f4a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002124 <heuristic_single_cell+0x3bc>
 8001f4e:	eef4 7a47 	vcmp.f32	s15, s14
 8001f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f56:	d43c      	bmi.n	8001fd2 <heuristic_single_cell+0x26a>
        {
          dis[k] = fabsf(A_recta * ptrCell->neighbors.ptrCellMap[k]->coor_x + B_recta * ptrCell->neighbors.ptrCellMap[k]->coor_y + C_recta) / sqrtf(A_recta * A_recta + 1);  
 8001f58:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001f5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f60:	3302      	adds	r3, #2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f6c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f74:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001f78:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f88:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f94:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9c:	eeb0 8ae7 	vabs.f32	s16, s15
 8001fa0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001fa4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb4:	f00b fdce 	bl	800db54 <sqrtf>
 8001fb8:	eeb0 7a40 	vmov.f32	s14, s0
 8001fbc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001fc0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	3388      	adds	r3, #136	; 0x88
 8001fc8:	443b      	add	r3, r7
 8001fca:	3b78      	subs	r3, #120	; 0x78
 8001fcc:	edc3 7a00 	vstr	s15, [r3]
 8001fd0:	e017      	b.n	8002002 <heuristic_single_cell+0x29a>
        }
        else
        {
          dis[k] = fabsf(ptrCell->neighbors.ptrCellMap[k]->coor_x-goal_x);
 8001fd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001fd6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001fda:	3302      	adds	r3, #2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001ff2:	eef0 7ae7 	vabs.f32	s15, s15
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	3388      	adds	r3, #136	; 0x88
 8001ffa:	443b      	add	r3, r7
 8001ffc:	3b78      	subs	r3, #120	; 0x78
 8001ffe:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t k = 0; k < 8; k++)
 8002002:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002006:	3301      	adds	r3, #1
 8002008:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800200c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002010:	2b07      	cmp	r3, #7
 8002012:	f67f aefe 	bls.w	8001e12 <heuristic_single_cell+0xaa>
      }            
    }

    //----------------Buscamos la celda vecina mas cercana a la recta y que este en la misma direccion que la recta---------------------
    //Recorremos los parametros para encontrar la mejor celda
    for (uint8_t k = 0; k < 8; k++)
 8002016:	2300      	movs	r3, #0
 8002018:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800201c:	e03f      	b.n	800209e <heuristic_single_cell+0x336>
    {
      //Verificamos que no sea -1
      if (ptrCell->neighbors.distance_neigh[k] != -1.0f)
 800201e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002022:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002026:	330a      	adds	r3, #10
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	3304      	adds	r3, #4
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002036:	eef4 7a47 	vcmp.f32	s15, s14
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	d029      	beq.n	8002094 <heuristic_single_cell+0x32c>
      {
        //Verificamos que la diferencia entre los angulos no sea superior a 45°
        if (ang_between_vector[k] <= 1.5f)
 8002040:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3388      	adds	r3, #136	; 0x88
 8002048:	443b      	add	r3, r7
 800204a:	3b58      	subs	r3, #88	; 0x58
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002054:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205c:	d81a      	bhi.n	8002094 <heuristic_single_cell+0x32c>
        {
          //Verificar que la distancia sea menor a la anterior menor distancia
          if (dis[k] < min_distance)
 800205e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	3388      	adds	r3, #136	; 0x88
 8002066:	443b      	add	r3, r7
 8002068:	3b78      	subs	r3, #120	; 0x78
 800206a:	edd3 7a00 	vldr	s15, [r3]
 800206e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	dd0b      	ble.n	8002094 <heuristic_single_cell+0x32c>
          {
            min_distance = dis[k];
 800207c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	3388      	adds	r3, #136	; 0x88
 8002084:	443b      	add	r3, r7
 8002086:	3b78      	subs	r3, #120	; 0x78
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	67bb      	str	r3, [r7, #120]	; 0x78
            best_index = k;
 800208c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002090:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    for (uint8_t k = 0; k < 8; k++)
 8002094:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002098:	3301      	adds	r3, #1
 800209a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800209e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80020a2:	2b07      	cmp	r3, #7
 80020a4:	d9bb      	bls.n	800201e <heuristic_single_cell+0x2b6>
      }        
    }

    
    //--------------Seleccionamos la celda vecina y sumamos su distancia--------------------
    total_distante = total_distante + ptrCell->neighbors.distance_neigh[best_index];
 80020a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80020aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020ae:	330a      	adds	r3, #10
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80020be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    ptrCell = ptrCell->neighbors.ptrCellMap[best_index];    
 80020c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80020ca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020ce:	3302      	adds	r3, #2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    
    //-----------------Verificacion si se llego al gol----------------------
    if (ptrCell->coor_x == goal_x && ptrCell->coor_y == goal_y)
 80020da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020de:	edd3 7a01 	vldr	s15, [r3, #4]
 80020e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80020e6:	eeb4 7a67 	vcmp.f32	s14, s15
 80020ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ee:	f47f ae86 	bne.w	8001dfe <heuristic_single_cell+0x96>
 80020f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80020fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80020fe:	eeb4 7a67 	vcmp.f32	s14, s15
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	d00f      	beq.n	8002128 <heuristic_single_cell+0x3c0>
    best_index = 0;
 8002108:	e679      	b.n	8001dfe <heuristic_single_cell+0x96>
 800210a:	bf00      	nop
 800210c:	f3af 8000 	nop.w
 8002110:	00000000 	.word	0x00000000
 8002114:	40c38800 	.word	0x40c38800
 8002118:	bf800000 	.word	0xbf800000
 800211c:	461c4000 	.word	0x461c4000
 8002120:	7f7fffff 	.word	0x7f7fffff
 8002124:	ff7fffff 	.word	0xff7fffff
    {
      break;
 8002128:	bf00      	nop
    }
  }

  return total_distante;
 800212a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800212e:	ee07 3a90 	vmov	s15, r3
}
 8002132:	eeb0 0a67 	vmov.f32	s0, s15
 8002136:	378c      	adds	r7, #140	; 0x8c
 8002138:	46bd      	mov	sp, r7
 800213a:	ecbd 8b02 	vpop	{d8}
 800213e:	bd90      	pop	{r4, r7, pc}

08002140 <configMPUAccel>:
//Importacio de librerias
#include "MPUAccel.h"
#include <SysTickDriver.h>

void configMPUAccel (MPUAccel_Handler_t *ptrMPUAccel){
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	73bb      	strb	r3, [r7, #14]

	//------------Verificamos comunicacion con el MPU----------------
	while(!rdy){
 8002150:	e004      	b.n	800215c <configMPUAccel+0x1c>

		rdy = WHOIAM(ptrMPUAccel);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f84f 	bl	80021f6 <WHOIAM>
 8002158:	4603      	mov	r3, r0
 800215a:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f7      	beq.n	8002152 <configMPUAccel+0x12>
	}

	//------------------Reiniciamos el MPU--------------------------
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, PWR_MGMT_l, 0x00);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	216b      	movs	r1, #107	; 0x6b
 800216a:	4618      	mov	r0, r3
 800216c:	f005 f87d 	bl	800726a <i2c_WriteSingleRegister>
	//Pausa
	delay_ms(1);
 8002170:	2001      	movs	r0, #1
 8002172:	f005 fd0f 	bl	8007b94 <delay_ms>

	//---------------Configuracion Accel----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	211c      	movs	r1, #28
 800217c:	4618      	mov	r0, r3
 800217e:	f005 f843 	bl	8007208 <i2c_ReadSingleRegister>
 8002182:	4603      	mov	r3, r0
 8002184:	73bb      	strb	r3, [r7, #14]
	byte &= ~(0b00011000);
 8002186:	7bbb      	ldrb	r3, [r7, #14]
 8002188:	f023 0318 	bic.w	r3, r3, #24
 800218c:	73bb      	strb	r3, [r7, #14]
	//Pausa
	delay_ms(1);
 800218e:	2001      	movs	r0, #1
 8002190:	f005 fd00 	bl	8007b94 <delay_ms>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL<<3));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6858      	ldr	r0, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	b25a      	sxtb	r2, r3
 80021a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	211c      	movs	r1, #28
 80021ae:	f005 f85c 	bl	800726a <i2c_WriteSingleRegister>

	//---------------Configuracion Giro----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	211b      	movs	r1, #27
 80021b8:	4618      	mov	r0, r3
 80021ba:	f005 f825 	bl	8007208 <i2c_ReadSingleRegister>
 80021be:	4603      	mov	r3, r0
 80021c0:	73bb      	strb	r3, [r7, #14]
	byte &= ~(0b00011000);
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	f023 0318 	bic.w	r3, r3, #24
 80021c8:	73bb      	strb	r3, [r7, #14]
	//Pausa
	delay_ms(1);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f005 fce2 	bl	8007b94 <delay_ms>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL <<3));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6858      	ldr	r0, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	b25a      	sxtb	r2, r3
 80021dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	211b      	movs	r1, #27
 80021ea:	f005 f83e 	bl	800726a <i2c_WriteSingleRegister>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <WHOIAM>:



//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Handler_t *ptrMPUAccel){
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
	//Variables auxiliares
	uint8_t whoami = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	73bb      	strb	r3, [r7, #14]
	//leemos el registro WHO_AM_I correspondiente
	whoami =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, WHO_AM_I);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2175      	movs	r1, #117	; 0x75
 800220c:	4618      	mov	r0, r3
 800220e:	f004 fffb 	bl	8007208 <i2c_ReadSingleRegister>
 8002212:	4603      	mov	r3, r0
 8002214:	73fb      	strb	r3, [r7, #15]
	//verificamos la transacción
	whoami &= ~(0b10000001);
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800221c:	73fb      	strb	r3, [r7, #15]
	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	085b      	lsrs	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf14      	ite	ne
 8002228:	2301      	movne	r3, #1
 800222a:	2300      	moveq	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8002230:	7bbb      	ldrb	r3, [r7, #14]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	0000      	movs	r0, r0
 800223c:	0000      	movs	r0, r0
	...

08002240 <readMPU>:


//Funcion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
float readMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead, int16_t offset)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	70fb      	strb	r3, [r7, #3]
 800224c:	4613      	mov	r3, r2
 800224e:	803b      	strh	r3, [r7, #0]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	75fb      	strb	r3, [r7, #23]
	uint8_t address_L = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	75bb      	strb	r3, [r7, #22]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	81fb      	strh	r3, [r7, #14]
	uint16_t aux_L = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	81bb      	strh	r3, [r7, #12]
	int16_t   aux  = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	817b      	strh	r3, [r7, #10]
	float res  = 0;
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	2b05      	cmp	r3, #5
 800226e:	d82d      	bhi.n	80022cc <readMPU+0x8c>
 8002270:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <readMPU+0x38>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	08002291 	.word	0x08002291
 800227c:	0800229b 	.word	0x0800229b
 8002280:	080022a5 	.word	0x080022a5
 8002284:	080022af 	.word	0x080022af
 8002288:	080022b9 	.word	0x080022b9
 800228c:	080022c3 	.word	0x080022c3
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 8002290:	233b      	movs	r3, #59	; 0x3b
 8002292:	75fb      	strb	r3, [r7, #23]
 8002294:	233c      	movs	r3, #60	; 0x3c
 8002296:	75bb      	strb	r3, [r7, #22]
 8002298:	e019      	b.n	80022ce <readMPU+0x8e>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 800229a:	233d      	movs	r3, #61	; 0x3d
 800229c:	75fb      	strb	r3, [r7, #23]
 800229e:	233e      	movs	r3, #62	; 0x3e
 80022a0:	75bb      	strb	r3, [r7, #22]
 80022a2:	e014      	b.n	80022ce <readMPU+0x8e>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 80022a4:	233f      	movs	r3, #63	; 0x3f
 80022a6:	75fb      	strb	r3, [r7, #23]
 80022a8:	2340      	movs	r3, #64	; 0x40
 80022aa:	75bb      	strb	r3, [r7, #22]
 80022ac:	e00f      	b.n	80022ce <readMPU+0x8e>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 80022ae:	2343      	movs	r3, #67	; 0x43
 80022b0:	75fb      	strb	r3, [r7, #23]
 80022b2:	2344      	movs	r3, #68	; 0x44
 80022b4:	75bb      	strb	r3, [r7, #22]
 80022b6:	e00a      	b.n	80022ce <readMPU+0x8e>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 80022b8:	2345      	movs	r3, #69	; 0x45
 80022ba:	75fb      	strb	r3, [r7, #23]
 80022bc:	2346      	movs	r3, #70	; 0x46
 80022be:	75bb      	strb	r3, [r7, #22]
 80022c0:	e005      	b.n	80022ce <readMPU+0x8e>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 80022c2:	2347      	movs	r3, #71	; 0x47
 80022c4:	75fb      	strb	r3, [r7, #23]
 80022c6:	2348      	movs	r3, #72	; 0x48
 80022c8:	75bb      	strb	r3, [r7, #22]
 80022ca:	e000      	b.n	80022ce <readMPU+0x8e>
		default:{ break; }
 80022cc:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	7dfa      	ldrb	r2, [r7, #23]
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f004 ff96 	bl	8007208 <i2c_ReadSingleRegister>
 80022dc:	4603      	mov	r3, r0
 80022de:	81fb      	strh	r3, [r7, #14]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	7dba      	ldrb	r2, [r7, #22]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 ff8d 	bl	8007208 <i2c_ReadSingleRegister>
 80022ee:	4603      	mov	r3, r0
 80022f0:	81bb      	strh	r3, [r7, #12]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = ((int16_t) ((aux_H << 8) | (aux_L))) - offset;
 80022f2:	89fb      	ldrh	r3, [r7, #14]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	b21a      	sxth	r2, r3
 80022f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b21b      	sxth	r3, r3
 8002300:	b29a      	uxth	r2, r3
 8002302:	883b      	ldrh	r3, [r7, #0]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	b29b      	uxth	r3, r3
 8002308:	817b      	strh	r3, [r7, #10]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje
	switch(elementRead)
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	2b02      	cmp	r3, #2
 800230e:	dc02      	bgt.n	8002316 <readMPU+0xd6>
 8002310:	2b00      	cmp	r3, #0
 8002312:	da05      	bge.n	8002320 <readMPU+0xe0>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
				default:{ break; }
			}
			break;
		}
		default:{ break; }
 8002314:	e0d6      	b.n	80024c4 <readMPU+0x284>
 8002316:	3b03      	subs	r3, #3
	switch(elementRead)
 8002318:	2b02      	cmp	r3, #2
 800231a:	f200 80d3 	bhi.w	80024c4 <readMPU+0x284>
 800231e:	e081      	b.n	8002424 <readMPU+0x1e4>
			switch (ptrMPUAccel->fullScaleACCEL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d87b      	bhi.n	8002420 <readMPU+0x1e0>
 8002328:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <readMPU+0xf0>)
 800232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232e:	bf00      	nop
 8002330:	08002341 	.word	0x08002341
 8002334:	08002379 	.word	0x08002379
 8002338:	080023b1 	.word	0x080023b1
 800233c:	080023e9 	.word	0x080023e9
				case ACCEL_2G :{res = (aux*9.77)/ACCEL_2G_SENS; break;}
 8002340:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f905 	bl	8000554 <__aeabi_i2d>
 800234a:	a363      	add	r3, pc, #396	; (adr r3, 80024d8 <readMPU+0x298>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fe f96a 	bl	8000628 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	4b5f      	ldr	r3, [pc, #380]	; (80024e0 <readMPU+0x2a0>)
 8002362:	f7fe fa8b 	bl	800087c <__aeabi_ddiv>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fc53 	bl	8000c18 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	e054      	b.n	8002422 <readMPU+0x1e2>
				case ACCEL_4G :{res = (aux*9.77)/ACCEL_4G_SENS; break;}
 8002378:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8e9 	bl	8000554 <__aeabi_i2d>
 8002382:	a355      	add	r3, pc, #340	; (adr r3, 80024d8 <readMPU+0x298>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f94e 	bl	8000628 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	4b52      	ldr	r3, [pc, #328]	; (80024e4 <readMPU+0x2a4>)
 800239a:	f7fe fa6f 	bl	800087c <__aeabi_ddiv>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7fe fc37 	bl	8000c18 <__aeabi_d2f>
 80023aa:	4603      	mov	r3, r0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	e038      	b.n	8002422 <readMPU+0x1e2>
				case ACCEL_8G :{res = (aux*9.77)/ACCEL_8G_SENS; break;}
 80023b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f8cd 	bl	8000554 <__aeabi_i2d>
 80023ba:	a347      	add	r3, pc, #284	; (adr r3, 80024d8 <readMPU+0x298>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f7fe f932 	bl	8000628 <__aeabi_dmul>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	4b45      	ldr	r3, [pc, #276]	; (80024e8 <readMPU+0x2a8>)
 80023d2:	f7fe fa53 	bl	800087c <__aeabi_ddiv>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f7fe fc1b 	bl	8000c18 <__aeabi_d2f>
 80023e2:	4603      	mov	r3, r0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	e01c      	b.n	8002422 <readMPU+0x1e2>
				case ACCEL_16G :{res = (aux*9.77)/ACCEL_16G_SENS; break;}
 80023e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f8b1 	bl	8000554 <__aeabi_i2d>
 80023f2:	a339      	add	r3, pc, #228	; (adr r3, 80024d8 <readMPU+0x298>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fe f916 	bl	8000628 <__aeabi_dmul>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	4b38      	ldr	r3, [pc, #224]	; (80024ec <readMPU+0x2ac>)
 800240a:	f7fe fa37 	bl	800087c <__aeabi_ddiv>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	f7fe fbff 	bl	8000c18 <__aeabi_d2f>
 800241a:	4603      	mov	r3, r0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	e000      	b.n	8002422 <readMPU+0x1e2>
				default:{ break; }
 8002420:	bf00      	nop
			break;
 8002422:	e050      	b.n	80024c6 <readMPU+0x286>
			switch (ptrMPUAccel->fullScaleGYRO)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d849      	bhi.n	80024c0 <readMPU+0x280>
 800242c:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <readMPU+0x1f4>)
 800242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002432:	bf00      	nop
 8002434:	08002445 	.word	0x08002445
 8002438:	08002465 	.word	0x08002465
 800243c:	08002485 	.word	0x08002485
 8002440:	080024a5 	.word	0x080024a5
				case GYRO_250 :{ res = aux/GYRO_250_SENS; break;}
 8002444:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002448:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <readMPU+0x2b0>)
 800244a:	fb82 1203 	smull	r1, r2, r2, r3
 800244e:	1152      	asrs	r2, r2, #5
 8002450:	17db      	asrs	r3, r3, #31
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	b21b      	sxth	r3, r3
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800245e:	edc7 7a04 	vstr	s15, [r7, #16]
 8002462:	e02e      	b.n	80024c2 <readMPU+0x282>
				case GYRO_500 :{ res = aux/GYRO_500_SENS; break;}
 8002464:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002468:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <readMPU+0x2b4>)
 800246a:	fb82 1203 	smull	r1, r2, r2, r3
 800246e:	1112      	asrs	r2, r2, #4
 8002470:	17db      	asrs	r3, r3, #31
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	b21b      	sxth	r3, r3
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800247e:	edc7 7a04 	vstr	s15, [r7, #16]
 8002482:	e01e      	b.n	80024c2 <readMPU+0x282>
				case GYRO_1000 :{ res = aux/GYRO_1000_SENS; break;}
 8002484:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002488:	4a1a      	ldr	r2, [pc, #104]	; (80024f4 <readMPU+0x2b4>)
 800248a:	fb82 1203 	smull	r1, r2, r2, r3
 800248e:	10d2      	asrs	r2, r2, #3
 8002490:	17db      	asrs	r3, r3, #31
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	b21b      	sxth	r3, r3
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800249e:	edc7 7a04 	vstr	s15, [r7, #16]
 80024a2:	e00e      	b.n	80024c2 <readMPU+0x282>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
 80024a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	da00      	bge.n	80024ae <readMPU+0x26e>
 80024ac:	330f      	adds	r3, #15
 80024ae:	111b      	asrs	r3, r3, #4
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ba:	edc7 7a04 	vstr	s15, [r7, #16]
 80024be:	e000      	b.n	80024c2 <readMPU+0x282>
				default:{ break; }
 80024c0:	bf00      	nop
			break;
 80024c2:	e000      	b.n	80024c6 <readMPU+0x286>
		default:{ break; }
 80024c4:	bf00      	nop
	}
	//Retornamos valor
	return res;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	ee07 3a90 	vmov	s15, r3
}
 80024cc:	eeb0 0a67 	vmov.f32	s0, s15
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	70a3d70a 	.word	0x70a3d70a
 80024dc:	40238a3d 	.word	0x40238a3d
 80024e0:	40d00000 	.word	0x40d00000
 80024e4:	40c00000 	.word	0x40c00000
 80024e8:	40b00000 	.word	0x40b00000
 80024ec:	40a00000 	.word	0x40a00000
 80024f0:	3e88cb3d 	.word	0x3e88cb3d
 80024f4:	3e0f83e1 	.word	0x3e0f83e1

080024f8 <readCalibrationMPU>:

//Funcion para en el modo de calibracion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
int16_t readCalibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]
	uint8_t address_L = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	73bb      	strb	r3, [r7, #14]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_L = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	817b      	strh	r3, [r7, #10]
	int16_t   aux  = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	813b      	strh	r3, [r7, #8]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	2b05      	cmp	r3, #5
 800251c:	d82c      	bhi.n	8002578 <readCalibrationMPU+0x80>
 800251e:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <readCalibrationMPU+0x2c>)
 8002520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002524:	0800253d 	.word	0x0800253d
 8002528:	08002547 	.word	0x08002547
 800252c:	08002551 	.word	0x08002551
 8002530:	0800255b 	.word	0x0800255b
 8002534:	08002565 	.word	0x08002565
 8002538:	0800256f 	.word	0x0800256f
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 800253c:	233b      	movs	r3, #59	; 0x3b
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	233c      	movs	r3, #60	; 0x3c
 8002542:	73bb      	strb	r3, [r7, #14]
 8002544:	e019      	b.n	800257a <readCalibrationMPU+0x82>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 8002546:	233d      	movs	r3, #61	; 0x3d
 8002548:	73fb      	strb	r3, [r7, #15]
 800254a:	233e      	movs	r3, #62	; 0x3e
 800254c:	73bb      	strb	r3, [r7, #14]
 800254e:	e014      	b.n	800257a <readCalibrationMPU+0x82>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 8002550:	233f      	movs	r3, #63	; 0x3f
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	2340      	movs	r3, #64	; 0x40
 8002556:	73bb      	strb	r3, [r7, #14]
 8002558:	e00f      	b.n	800257a <readCalibrationMPU+0x82>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 800255a:	2343      	movs	r3, #67	; 0x43
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	2344      	movs	r3, #68	; 0x44
 8002560:	73bb      	strb	r3, [r7, #14]
 8002562:	e00a      	b.n	800257a <readCalibrationMPU+0x82>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 8002564:	2345      	movs	r3, #69	; 0x45
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	2346      	movs	r3, #70	; 0x46
 800256a:	73bb      	strb	r3, [r7, #14]
 800256c:	e005      	b.n	800257a <readCalibrationMPU+0x82>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 800256e:	2347      	movs	r3, #71	; 0x47
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	2348      	movs	r3, #72	; 0x48
 8002574:	73bb      	strb	r3, [r7, #14]
 8002576:	e000      	b.n	800257a <readCalibrationMPU+0x82>
		default:{ break; }
 8002578:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f004 fe40 	bl	8007208 <i2c_ReadSingleRegister>
 8002588:	4603      	mov	r3, r0
 800258a:	81bb      	strh	r3, [r7, #12]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	7bba      	ldrb	r2, [r7, #14]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f004 fe37 	bl	8007208 <i2c_ReadSingleRegister>
 800259a:	4603      	mov	r3, r0
 800259c:	817b      	strh	r3, [r7, #10]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = (int16_t) ((aux_H << 8) | (aux_L));
 800259e:	89bb      	ldrh	r3, [r7, #12]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	b21a      	sxth	r2, r3
 80025a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	813b      	strh	r3, [r7, #8]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje

	//Retornamos valor
	return aux;
 80025ac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <calibrationMPU>:


//Funcion para la calibracion de las mediciones realizadas
float calibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementCalibration)
{
 80025b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025bc:	b088      	sub	sp, #32
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	70fb      	strb	r3, [r7, #3]
	//Variables la ejecucion de la calibracion
	int64_t aux_sum = 0;
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t num_samples = 200;
 80025d2:	23c8      	movs	r3, #200	; 0xc8
 80025d4:	827b      	strh	r3, [r7, #18]
	float offset = 0;
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
	//Realizacion acumulacion de valores
	for (int i = 0; i < num_samples; i++)
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e017      	b.n	8002612 <calibrationMPU+0x5a>
	{
		//Lectura del registro respectivo y acumulacion
		aux_sum += readCalibrationMPU(ptrMPUAccel, elementCalibration);
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ff86 	bl	80024f8 <readCalibrationMPU>
 80025ec:	4603      	mov	r3, r0
 80025ee:	b21b      	sxth	r3, r3
 80025f0:	17da      	asrs	r2, r3, #31
 80025f2:	461c      	mov	r4, r3
 80025f4:	4615      	mov	r5, r2
 80025f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025fa:	eb12 0804 	adds.w	r8, r2, r4
 80025fe:	eb43 0905 	adc.w	r9, r3, r5
 8002602:	e9c7 8906 	strd	r8, r9, [r7, #24]
		//Pausa
		delay_ms(1);
 8002606:	2001      	movs	r0, #1
 8002608:	f005 fac4 	bl	8007b94 <delay_ms>
	for (int i = 0; i < num_samples; i++)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3301      	adds	r3, #1
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	8a7b      	ldrh	r3, [r7, #18]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	429a      	cmp	r2, r3
 8002618:	dbe3      	blt.n	80025e2 <calibrationMPU+0x2a>
	}
	//Promedio del eje medido
	 offset = aux_sum/num_samples;
 800261a:	8a7b      	ldrh	r3, [r7, #18]
 800261c:	2200      	movs	r2, #0
 800261e:	469a      	mov	sl, r3
 8002620:	4693      	mov	fp, r2
 8002622:	4652      	mov	r2, sl
 8002624:	465b      	mov	r3, fp
 8002626:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800262a:	f7fe fc53 	bl	8000ed4 <__aeabi_ldivmod>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	f7fe fc0f 	bl	8000e58 <__aeabi_l2f>
 800263a:	4603      	mov	r3, r0
 800263c:	60fb      	str	r3, [r7, #12]
	//Retornar valor
	return offset;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	ee07 3a90 	vmov	s15, r3
}
 8002644:	eeb0 0a67 	vmov.f32	s0, s15
 8002648:	3720      	adds	r7, #32
 800264a:	46bd      	mov	sp, r7
 800264c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002650 <getAngle>:


//Funcion para calcular el nuevo angulo de uno de los ejes del girsocopio
float getAngle(MPUAccel_Handler_t *ptrMPUAccel, MPUTimerSample_t *timer, float ang_init, uint8_t axis, int16_t offset_Axis)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	ed87 0a01 	vstr	s0, [r7, #4]
 800265e:	4611      	mov	r1, r2
 8002660:	461a      	mov	r2, r3
 8002662:	460b      	mov	r3, r1
 8002664:	70fb      	strb	r3, [r7, #3]
 8002666:	4613      	mov	r3, r2
 8002668:	803b      	strh	r3, [r7, #0]
	//Lectura velocidad angular
	float w_Angular= readMPU(ptrMPUAccel, axis, offset_Axis);
 800266a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	4619      	mov	r1, r3
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff fde4 	bl	8002240 <readMPU>
 8002678:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	//Calculo del tiempo trascurrido tras el ultima leida
	uint64_t time_now = getTicksMs();
 800267c:	f005 fa7c 	bl	8007b78 <getTicksMs>
 8002680:	e9c7 0106 	strd	r0, r1, [r7, #24]
	timer->delta_timer =  time_now - timer->timer_prev;
 8002684:	8b39      	ldrh	r1, [r7, #24]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	b293      	uxth	r3, r2
 800268e:	1acb      	subs	r3, r1, r3
 8002690:	b29a      	uxth	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	811a      	strh	r2, [r3, #8]
	timer->timer_prev = time_now;
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269c:	e9c1 2300 	strd	r2, r3, [r1]
	//Calculo angulo
	float ang = ang_init + (w_Angular*timer->delta_timer)/1000;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	891b      	ldrh	r3, [r3, #8]
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026b4:	eddf 6a08 	vldr	s13, [pc, #32]	; 80026d8 <getAngle+0x88>
 80026b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80026c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c4:	edc7 7a05 	vstr	s15, [r7, #20]

	return ang;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	ee07 3a90 	vmov	s15, r3
}
 80026ce:	eeb0 0a67 	vmov.f32	s0, s15
 80026d2:	3728      	adds	r7, #40	; 0x28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	447a0000 	.word	0x447a0000

080026dc <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	631a      	str	r2, [r3, #48]	; 0x30
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80026f8:	eeb0 0a67 	vmov.f32	s0, s15
 80026fc:	4610      	mov	r0, r2
 80026fe:	f005 f9bd 	bl	8007a7c <updateDuttyCyclePercentageFloat>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	4619      	mov	r1, r3
 8002740:	4610      	mov	r0, r2
 8002742:	f004 fb6b 	bl	8006e1c <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	4619      	mov	r1, r3
 8002758:	4610      	mov	r0, r2
 800275a:	f005 f8c9 	bl	80078f0 <statusPolarityPWM>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <build_Operation>:
#include <math.h>


//-------------------------Funcion para la definicion de operaciones--------------------------
void build_Operation(Parameters_Operation_t *prtList, Parameter_build_t *prtbuild, double finishline_x, double finishline_y)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08c      	sub	sp, #48	; 0x30
 800276c:	af00      	add	r7, sp, #0
 800276e:	6178      	str	r0, [r7, #20]
 8002770:	6139      	str	r1, [r7, #16]
 8002772:	ed87 0b02 	vstr	d0, [r7, #8]
 8002776:	ed87 1b00 	vstr	d1, [r7]
	//Definicion el vector director
	double delta[2] = {finishline_x - prtbuild->initline_x, finishline_y - prtbuild->initline_y};
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002784:	f7fd fd98 	bl	80002b8 <__aeabi_dsub>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002796:	e9d7 0100 	ldrd	r0, r1, [r7]
 800279a:	f7fd fd8d 	bl	80002b8 <__aeabi_dsub>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	//Calculo angululo entre vectores directores
	double grad_turn_res = calculed_ang_turn(prtbuild->delta_before, delta);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	3310      	adds	r3, #16
 80027aa:	f107 0218 	add.w	r2, r7, #24
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fad1 	bl	8002d58 <calculed_ang_turn>
 80027b6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	//condicional de cambio de angulo
	if(grad_turn_res == 0)
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027c6:	f7fe f997 	bl	8000af8 <__aeabi_dcmpeq>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00e      	beq.n	80027ee <build_Operation+0x86>
	{
		//agregar operacion de linea recta
		 add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80027d6:	ed9f 2b2a 	vldr	d2, [pc, #168]	; 8002880 <build_Operation+0x118>
 80027da:	ed97 1b00 	vldr	d1, [r7]
 80027de:	ed97 0b02 	vldr	d0, [r7, #8]
 80027e2:	2201      	movs	r2, #1
 80027e4:	4619      	mov	r1, r3
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f000 f84e 	bl	8002888 <add_Operation>
 80027ec:	e030      	b.n	8002850 <build_Operation+0xe8>
	}
	else
	{
		//Agregar operacion de rotacion
		if(prtbuild->routelist>0){ prtbuild->number_operation++; }
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <build_Operation+0xa0>
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80027fe:	3301      	adds	r3, #1
 8002800:	b2da      	uxtb	r2, r3
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		add_Operation(prtList, prtbuild->number_operation, TURN, 0, 0, grad_turn_res);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800280e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002812:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8002880 <build_Operation+0x118>
 8002816:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8002880 <build_Operation+0x118>
 800281a:	2202      	movs	r2, #2
 800281c:	4619      	mov	r1, r3
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	f000 f832 	bl	8002888 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800282a:	3301      	adds	r3, #1
 800282c:	b2da      	uxtb	r2, r3
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800283a:	ed9f 2b11 	vldr	d2, [pc, #68]	; 8002880 <build_Operation+0x118>
 800283e:	ed97 1b00 	vldr	d1, [r7]
 8002842:	ed97 0b02 	vldr	d0, [r7, #8]
 8002846:	2201      	movs	r2, #1
 8002848:	4619      	mov	r1, r3
 800284a:	6978      	ldr	r0, [r7, #20]
 800284c:	f000 f81c 	bl	8002888 <add_Operation>
	}
	//Se redefine los valores iniciales
	prtbuild->delta_before[0] = delta[0];
 8002850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002854:	6939      	ldr	r1, [r7, #16]
 8002856:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtbuild->delta_before[1] = delta[1];
 800285a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800285e:	6939      	ldr	r1, [r7, #16]
 8002860:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prtbuild->initline_x = finishline_x;
 8002864:	6939      	ldr	r1, [r7, #16]
 8002866:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800286a:	e9c1 2300 	strd	r2, r3, [r1]
	prtbuild->initline_y = finishline_y;
 800286e:	6939      	ldr	r1, [r7, #16]
 8002870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002874:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002878:	bf00      	nop
 800287a:	3730      	adds	r7, #48	; 0x30
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
	...

08002888 <add_Operation>:

void add_Operation(Parameters_Operation_t *prtList, uint8_t num_operation, uint8_t type_operation, double coor_x, double coor_y, double grad_turn)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	61f8      	str	r0, [r7, #28]
 8002890:	460b      	mov	r3, r1
 8002892:	ed87 0b04 	vstr	d0, [r7, #16]
 8002896:	ed87 1b02 	vstr	d1, [r7, #8]
 800289a:	ed87 2b00 	vstr	d2, [r7]
 800289e:	76fb      	strb	r3, [r7, #27]
 80028a0:	4613      	mov	r3, r2
 80028a2:	76bb      	strb	r3, [r7, #26]
	prtList[num_operation].operacion = type_operation;
 80028a4:	7efb      	ldrb	r3, [r7, #27]
 80028a6:	015b      	lsls	r3, r3, #5
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	7eba      	ldrb	r2, [r7, #26]
 80028ae:	701a      	strb	r2, [r3, #0]
	prtList[num_operation].x_destination = coor_x;
 80028b0:	7efb      	ldrb	r3, [r7, #27]
 80028b2:	015b      	lsls	r3, r3, #5
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	18d1      	adds	r1, r2, r3
 80028b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prtList[num_operation].y_destination = coor_y;
 80028c0:	7efb      	ldrb	r3, [r7, #27]
 80028c2:	015b      	lsls	r3, r3, #5
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	18d1      	adds	r1, r2, r3
 80028c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtList[num_operation].grad_Rotative = grad_turn;
 80028d0:	7efb      	ldrb	r3, [r7, #27]
 80028d2:	015b      	lsls	r3, r3, #5
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	18d1      	adds	r1, r2, r3
 80028d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80028e0:	bf00      	nop
 80028e2:	3724      	adds	r7, #36	; 0x24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	0000      	movs	r0, r0
	...

080028f0 <change_position>:


//-----------------Funciones para definir los parametros de la poscion teorica--------------
void change_position(Parameters_Path_t *ptrParameterPath, int distance, double starcoor_x, double starcoor_y)
{
 80028f0:	b5b0      	push	{r4, r5, r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6178      	str	r0, [r7, #20]
 80028f8:	6139      	str	r1, [r7, #16]
 80028fa:	ed87 0b02 	vstr	d0, [r7, #8]
 80028fe:	ed87 1b00 	vstr	d1, [r7]
	//Definimos la distancia
	 ptrParameterPath->line_Distance = distance;                  //[mm]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	649a      	str	r2, [r3, #72]	; 0x48
	//Calculamos la posicicion
	double pot_x = ptrParameterPath->line_Distance*cos((ptrParameterPath->rotative_Grad*M_PI)/180);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fe21 	bl	8000554 <__aeabi_i2d>
 8002912:	4604      	mov	r4, r0
 8002914:	460d      	mov	r5, r1
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fe1a 	bl	8000554 <__aeabi_i2d>
 8002920:	a33b      	add	r3, pc, #236	; (adr r3, 8002a10 <change_position+0x120>)
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	f7fd fe7f 	bl	8000628 <__aeabi_dmul>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	4b38      	ldr	r3, [pc, #224]	; (8002a18 <change_position+0x128>)
 8002938:	f7fd ffa0 	bl	800087c <__aeabi_ddiv>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	ec43 2b17 	vmov	d7, r2, r3
 8002944:	eeb0 0a47 	vmov.f32	s0, s14
 8002948:	eef0 0a67 	vmov.f32	s1, s15
 800294c:	f00a ff3c 	bl	800d7c8 <cos>
 8002950:	ec53 2b10 	vmov	r2, r3, d0
 8002954:	4620      	mov	r0, r4
 8002956:	4629      	mov	r1, r5
 8002958:	f7fd fe66 	bl	8000628 <__aeabi_dmul>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double pot_y = ptrParameterPath->line_Distance*sin((ptrParameterPath->rotative_Grad*M_PI)/180);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fdf3 	bl	8000554 <__aeabi_i2d>
 800296e:	4604      	mov	r4, r0
 8002970:	460d      	mov	r5, r1
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fdec 	bl	8000554 <__aeabi_i2d>
 800297c:	a324      	add	r3, pc, #144	; (adr r3, 8002a10 <change_position+0x120>)
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	f7fd fe51 	bl	8000628 <__aeabi_dmul>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <change_position+0x128>)
 8002994:	f7fd ff72 	bl	800087c <__aeabi_ddiv>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	ec43 2b17 	vmov	d7, r2, r3
 80029a0:	eeb0 0a47 	vmov.f32	s0, s14
 80029a4:	eef0 0a67 	vmov.f32	s1, s15
 80029a8:	f00a ffaa 	bl	800d900 <sin>
 80029ac:	ec53 2b10 	vmov	r2, r3, d0
 80029b0:	4620      	mov	r0, r4
 80029b2:	4629      	mov	r1, r5
 80029b4:	f7fd fe38 	bl	8000628 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Guardamos Coordenadas iniciales
	ptrParameterPath->start_position_x = starcoor_x;
 80029c0:	6979      	ldr	r1, [r7, #20]
 80029c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029c6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrParameterPath->start_position_y = starcoor_y;
 80029ca:	6979      	ldr	r1, [r7, #20]
 80029cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029d0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x += pot_x;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80029da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029de:	f7fd fc6d 	bl	80002bc <__adddf3>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	6979      	ldr	r1, [r7, #20]
 80029e8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrParameterPath->goal_Position_y += pot_y;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80029f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029f6:	f7fd fc61 	bl	80002bc <__adddf3>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	6979      	ldr	r1, [r7, #20]
 8002a00:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8002a04:	bf00      	nop
 8002a06:	3728      	adds	r7, #40	; 0x28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a0c:	f3af 8000 	nop.w
 8002a10:	54442d18 	.word	0x54442d18
 8002a14:	400921fb 	.word	0x400921fb
 8002a18:	40668000 	.word	0x40668000
 8002a1c:	00000000 	.word	0x00000000

08002a20 <change_coordinates_position>:

void change_coordinates_position(Parameters_Path_t *ptrParameterPath, double goalcoor_x, double goalcoor_y, double starcoor_x, double starcoor_y)
{
 8002a20:	b5b0      	push	{r4, r5, r7, lr}
 8002a22:	b08a      	sub	sp, #40	; 0x28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6278      	str	r0, [r7, #36]	; 0x24
 8002a28:	ed87 0b06 	vstr	d0, [r7, #24]
 8002a2c:	ed87 1b04 	vstr	d1, [r7, #16]
 8002a30:	ed87 2b02 	vstr	d2, [r7, #8]
 8002a34:	ed87 3b00 	vstr	d3, [r7]
	//Guardamos Coordenadas iniciales
	ptrParameterPath->start_position_x = starcoor_x;
 8002a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a3e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrParameterPath->start_position_y = starcoor_y;
 8002a42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a48:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x = goalcoor_x;
 8002a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a52:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrParameterPath->goal_Position_y = goalcoor_y;
 8002a56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a5c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	//Definimos la distancia
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002a6c:	f7fd fc24 	bl	80002b8 <__aeabi_dsub>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	ec43 2b17 	vmov	d7, r2, r3
 8002a78:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8002af0 <change_coordinates_position+0xd0>
 8002a7c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a80:	eef0 0a67 	vmov.f32	s1, s15
 8002a84:	f00a ffca 	bl	800da1c <pow>
 8002a88:	ec55 4b10 	vmov	r4, r5, d0
			pow(ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y,2));;                  //[mm]
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002a98:	f7fd fc0e 	bl	80002b8 <__aeabi_dsub>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	ec43 2b17 	vmov	d7, r2, r3
 8002aa4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002af0 <change_coordinates_position+0xd0>
 8002aa8:	eeb0 0a47 	vmov.f32	s0, s14
 8002aac:	eef0 0a67 	vmov.f32	s1, s15
 8002ab0:	f00a ffb4 	bl	800da1c <pow>
 8002ab4:	ec53 2b10 	vmov	r2, r3, d0
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 8002ab8:	4620      	mov	r0, r4
 8002aba:	4629      	mov	r1, r5
 8002abc:	f7fd fbfe 	bl	80002bc <__adddf3>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	ec43 2b17 	vmov	d7, r2, r3
 8002ac8:	eeb0 0a47 	vmov.f32	s0, s14
 8002acc:	eef0 0a67 	vmov.f32	s1, s15
 8002ad0:	f00b f814 	bl	800dafc <sqrt>
 8002ad4:	ec53 2b10 	vmov	r2, r3, d0
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	f7fe f854 	bl	8000b88 <__aeabi_d2iz>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	649a      	str	r2, [r3, #72]	; 0x48

}
 8002ae6:	bf00      	nop
 8002ae8:	3728      	adds	r7, #40	; 0x28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bdb0      	pop	{r4, r5, r7, pc}
 8002aee:	bf00      	nop
 8002af0:	00000000 	.word	0x00000000
 8002af4:	40000000 	.word	0x40000000

08002af8 <calculation_parameter_distance>:

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8002af8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002afc:	b08a      	sub	sp, #40	; 0x28
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6178      	str	r0, [r7, #20]
	//Calculo del vector director de la recta
	double a = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002b0e:	f7fd fbd3 	bl	80002b8 <__aeabi_dsub>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double b = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002b26:	f7fd fbc7 	bl	80002b8 <__aeabi_dsub>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->parametersStraight.magnitude_d = sqrt(pow(a,2)+pow(b,2));
 8002b32:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8002c40 <calculation_parameter_distance+0x148>
 8002b36:	ed97 0b08 	vldr	d0, [r7, #32]
 8002b3a:	f00a ff6f 	bl	800da1c <pow>
 8002b3e:	ec59 8b10 	vmov	r8, r9, d0
 8002b42:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8002c40 <calculation_parameter_distance+0x148>
 8002b46:	ed97 0b06 	vldr	d0, [r7, #24]
 8002b4a:	f00a ff67 	bl	800da1c <pow>
 8002b4e:	ec53 2b10 	vmov	r2, r3, d0
 8002b52:	4640      	mov	r0, r8
 8002b54:	4649      	mov	r1, r9
 8002b56:	f7fd fbb1 	bl	80002bc <__adddf3>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	ec43 2b17 	vmov	d7, r2, r3
 8002b62:	eeb0 0a47 	vmov.f32	s0, s14
 8002b66:	eef0 0a67 	vmov.f32	s1, s15
 8002b6a:	f00a ffc7 	bl	800dafc <sqrt>
 8002b6e:	eeb0 7a40 	vmov.f32	s14, s0
 8002b72:	eef0 7a60 	vmov.f32	s15, s1
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	ed83 7b02 	vstr	d7, [r3, #8]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->parametersStraight.proy_A = a;
 8002b7c:	6979      	ldr	r1, [r7, #20]
 8002b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b82:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->parametersStraight.proy_B = b;
 8002b86:	6979      	ldr	r1, [r7, #20]
 8002b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b8c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrParameterPath->parametersStraight.proy_C = -1*a*ptrParameterPath->start_position_x - b*ptrParameterPath->start_position_y;
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002ba2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ba6:	f7fd fd3f 	bl	8000628 <__aeabi_dmul>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4690      	mov	r8, r2
 8002bb0:	4699      	mov	r9, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bbc:	f7fd fd34 	bl	8000628 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4640      	mov	r0, r8
 8002bc6:	4649      	mov	r1, r9
 8002bc8:	f7fd fb76 	bl	80002b8 <__aeabi_dsub>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	6979      	ldr	r1, [r7, #20]
 8002bd2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->parametersStraight.dis_point_A = b;
 8002bd6:	6979      	ldr	r1, [r7, #20]
 8002bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bdc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrParameterPath->parametersStraight.dis_point_B = -1*a;
 8002be0:	6a3c      	ldr	r4, [r7, #32]
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	e9c3 450c 	strd	r4, r5, [r3, #48]	; 0x30
	ptrParameterPath->parametersStraight.dis_point_C = -1*b*ptrParameterPath->start_position_x + a*ptrParameterPath->start_position_y;
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002c00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c04:	f7fd fd10 	bl	8000628 <__aeabi_dmul>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4614      	mov	r4, r2
 8002c0e:	461d      	mov	r5, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c1a:	f7fd fd05 	bl	8000628 <__aeabi_dmul>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4620      	mov	r0, r4
 8002c24:	4629      	mov	r1, r5
 8002c26:	f7fd fb49 	bl	80002bc <__adddf3>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	6979      	ldr	r1, [r7, #20]
 8002c30:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8002c34:	bf00      	nop
 8002c36:	3728      	adds	r7, #40	; 0x28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c3e:	bf00      	nop
 8002c40:	00000000 	.word	0x00000000
 8002c44:	40000000 	.word	0x40000000

08002c48 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double position_x, double position_y)
{
 8002c48:	b5b0      	push	{r4, r5, r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6178      	str	r0, [r7, #20]
 8002c50:	ed87 0b02 	vstr	d0, [r7, #8]
 8002c54:	ed87 1b00 	vstr	d1, [r7]
	//Calculo
	double distance = -1*((ptrParameterPath->parametersStraight.dis_point_A*position_x + ptrParameterPath->parametersStraight.dis_point_B*position_y
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002c5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c62:	f7fd fce1 	bl	8000628 <__aeabi_dmul>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4614      	mov	r4, r2
 8002c6c:	461d      	mov	r5, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c78:	f7fd fcd6 	bl	8000628 <__aeabi_dmul>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4620      	mov	r0, r4
 8002c82:	4629      	mov	r1, r5
 8002c84:	f7fd fb1a 	bl	80002bc <__adddf3>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
			+ ptrParameterPath->parametersStraight.dis_point_C)/ptrParameterPath->parametersStraight.magnitude_d);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c96:	f7fd fb11 	bl	80002bc <__adddf3>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ca8:	f7fd fde8 	bl	800087c <__aeabi_ddiv>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->parametersStraight.dis_point_A*position_x + ptrParameterPath->parametersStraight.dis_point_B*position_y
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	61b9      	str	r1, [r7, #24]
 8002cb4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002cb8:	61fb      	str	r3, [r7, #28]
	//Retornar
	return distance;
 8002cba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cbe:	ec43 2b17 	vmov	d7, r2, r3
}
 8002cc2:	eeb0 0a47 	vmov.f32	s0, s14
 8002cc6:	eef0 0a67 	vmov.f32	s1, s15
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bdb0      	pop	{r4, r5, r7, pc}

08002cd0 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double position_x, double position_y)
{
 8002cd0:	b5b0      	push	{r4, r5, r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6178      	str	r0, [r7, #20]
 8002cd8:	ed87 0b02 	vstr	d0, [r7, #8]
 8002cdc:	ed87 1b00 	vstr	d1, [r7]
	//Calculo
	double distance_Tra = (ptrParameterPath->parametersStraight.proy_A*position_x + ptrParameterPath->parametersStraight.proy_B*position_y
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002ce6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cea:	f7fd fc9d 	bl	8000628 <__aeabi_dmul>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4614      	mov	r4, r2
 8002cf4:	461d      	mov	r5, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d00:	f7fd fc92 	bl	8000628 <__aeabi_dmul>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4620      	mov	r0, r4
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	f7fd fad6 	bl	80002bc <__adddf3>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
			+ ptrParameterPath->parametersStraight.proy_C)/ptrParameterPath->parametersStraight.magnitude_d;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002d1e:	f7fd facd 	bl	80002bc <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	double distance_Tra = (ptrParameterPath->parametersStraight.proy_A*position_x + ptrParameterPath->parametersStraight.proy_B*position_y
 8002d30:	f7fd fda4 	bl	800087c <__aeabi_ddiv>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 8002d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d40:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d44:	eeb0 0a47 	vmov.f32	s0, s14
 8002d48:	eef0 0a67 	vmov.f32	s1, s15
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bdb0      	pop	{r4, r5, r7, pc}
 8002d52:	0000      	movs	r0, r0
 8002d54:	0000      	movs	r0, r0
	...

08002d58 <calculed_ang_turn>:


//------------------------------Funciones auxiliares-----------------------------

double calculed_ang_turn(double vector_a[2], double vector_b[2])
{
 8002d58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d5c:	b08a      	sub	sp, #40	; 0x28
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
    //Calculo de los diferentes elementos
    double dot = vector_a[0]*vector_b[1]-vector_b[0]*vector_b[1];
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	3308      	adds	r3, #8
 8002d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d72:	f7fd fc59 	bl	8000628 <__aeabi_dmul>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4690      	mov	r8, r2
 8002d7c:	4699      	mov	r9, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	3308      	adds	r3, #8
 8002d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8c:	f7fd fc4c 	bl	8000628 <__aeabi_dmul>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4640      	mov	r0, r8
 8002d96:	4649      	mov	r1, r9
 8002d98:	f7fd fa8e 	bl	80002b8 <__aeabi_dsub>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double magvector_a = sqrt(pow(vector_a[0],2)+pow(vector_a[1],2));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	ed93 7b00 	vldr	d7, [r3]
 8002daa:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8002f28 <calculed_ang_turn+0x1d0>
 8002dae:	eeb0 0a47 	vmov.f32	s0, s14
 8002db2:	eef0 0a67 	vmov.f32	s1, s15
 8002db6:	f00a fe31 	bl	800da1c <pow>
 8002dba:	ec59 8b10 	vmov	r8, r9, d0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	ed93 7b00 	vldr	d7, [r3]
 8002dc6:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8002f28 <calculed_ang_turn+0x1d0>
 8002dca:	eeb0 0a47 	vmov.f32	s0, s14
 8002dce:	eef0 0a67 	vmov.f32	s1, s15
 8002dd2:	f00a fe23 	bl	800da1c <pow>
 8002dd6:	ec53 2b10 	vmov	r2, r3, d0
 8002dda:	4640      	mov	r0, r8
 8002ddc:	4649      	mov	r1, r9
 8002dde:	f7fd fa6d 	bl	80002bc <__adddf3>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	ec43 2b17 	vmov	d7, r2, r3
 8002dea:	eeb0 0a47 	vmov.f32	s0, s14
 8002dee:	eef0 0a67 	vmov.f32	s1, s15
 8002df2:	f00a fe83 	bl	800dafc <sqrt>
 8002df6:	ed87 0b04 	vstr	d0, [r7, #16]
    double magvector_b = sqrt(pow(vector_b[0],2)+pow(vector_b[1],2));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	ed93 7b00 	vldr	d7, [r3]
 8002e00:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8002f28 <calculed_ang_turn+0x1d0>
 8002e04:	eeb0 0a47 	vmov.f32	s0, s14
 8002e08:	eef0 0a67 	vmov.f32	s1, s15
 8002e0c:	f00a fe06 	bl	800da1c <pow>
 8002e10:	ec59 8b10 	vmov	r8, r9, d0
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	3308      	adds	r3, #8
 8002e18:	ed93 7b00 	vldr	d7, [r3]
 8002e1c:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8002f28 <calculed_ang_turn+0x1d0>
 8002e20:	eeb0 0a47 	vmov.f32	s0, s14
 8002e24:	eef0 0a67 	vmov.f32	s1, s15
 8002e28:	f00a fdf8 	bl	800da1c <pow>
 8002e2c:	ec53 2b10 	vmov	r2, r3, d0
 8002e30:	4640      	mov	r0, r8
 8002e32:	4649      	mov	r1, r9
 8002e34:	f7fd fa42 	bl	80002bc <__adddf3>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	ec43 2b17 	vmov	d7, r2, r3
 8002e40:	eeb0 0a47 	vmov.f32	s0, s14
 8002e44:	eef0 0a67 	vmov.f32	s1, s15
 8002e48:	f00a fe58 	bl	800dafc <sqrt>
 8002e4c:	ed87 0b02 	vstr	d0, [r7, #8]
    double ang_between_vector = acos((vector_a[0]*vector_b[0]+vector_a[1]*vector_b[1])/(magvector_b*magvector_a));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f7fd fbe4 	bl	8000628 <__aeabi_dmul>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4690      	mov	r8, r2
 8002e66:	4699      	mov	r9, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	3308      	adds	r3, #8
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f7fd fbd6 	bl	8000628 <__aeabi_dmul>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4640      	mov	r0, r8
 8002e82:	4649      	mov	r1, r9
 8002e84:	f7fd fa1a 	bl	80002bc <__adddf3>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4690      	mov	r8, r2
 8002e8e:	4699      	mov	r9, r3
 8002e90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e98:	f7fd fbc6 	bl	8000628 <__aeabi_dmul>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4640      	mov	r0, r8
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	f7fd fcea 	bl	800087c <__aeabi_ddiv>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	ec43 2b17 	vmov	d7, r2, r3
 8002eb0:	eeb0 0a47 	vmov.f32	s0, s14
 8002eb4:	eef0 0a67 	vmov.f32	s1, s15
 8002eb8:	f00a fd7a 	bl	800d9b0 <acos>
 8002ebc:	ed87 0b08 	vstr	d0, [r7, #32]
    //conversion a grados
    ang_between_vector = (ang_between_vector*180)/M_PI;
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <calculed_ang_turn+0x1e0>)
 8002ec6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002eca:	f7fd fbad 	bl	8000628 <__aeabi_dmul>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	a316      	add	r3, pc, #88	; (adr r3, 8002f30 <calculed_ang_turn+0x1d8>)
 8002ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002edc:	f7fd fcce 	bl	800087c <__aeabi_ddiv>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //agregamos la direccion de giro
    if(dot<0){ ang_between_vector = -ang_between_vector;}
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ef4:	f7fd fe0a 	bl	8000b0c <__aeabi_dcmplt>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <calculed_ang_turn+0x1b2>
 8002efe:	6a3c      	ldr	r4, [r7, #32]
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002f06:	e9c7 4508 	strd	r4, r5, [r7, #32]
    //Retornar valor
    return ang_between_vector;
 8002f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f0e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f12:	eeb0 0a47 	vmov.f32	s0, s14
 8002f16:	eef0 0a67 	vmov.f32	s1, s15
 8002f1a:	3728      	adds	r7, #40	; 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f22:	bf00      	nop
 8002f24:	f3af 8000 	nop.w
 8002f28:	00000000 	.word	0x00000000
 8002f2c:	40000000 	.word	0x40000000
 8002f30:	54442d18 	.word	0x54442d18
 8002f34:	400921fb 	.word	0x400921fb
 8002f38:	40668000 	.word	0x40668000

08002f3c <build_grid_map>:
int8_t ne_pos_x[8] = {-1, 0, 1, 1, 1, 0, -1, -1};
int8_t ne_pos_y[8] = {1, 1, 1, 0, -1, -1, -1, 0};

// Función para crear la malla de celdas
void build_grid_map(Cell_map_t grid[20][20], uint8_t row, uint8_t colum, float separation)
{  
 8002f3c:	b5b0      	push	{r4, r5, r7, lr}
 8002f3e:	b08e      	sub	sp, #56	; 0x38
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	460b      	mov	r3, r1
 8002f46:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f4a:	72fb      	strb	r3, [r7, #11]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	72bb      	strb	r3, [r7, #10]
    float rel_x;
    float rel_y;

    //---------------------Asignacion de informacion------------------------
    // Llenar la matriz de celdas con valores predeterminados
    for (int i = 0; i < row; i++) {
 8002f50:	2300      	movs	r3, #0
 8002f52:	637b      	str	r3, [r7, #52]	; 0x34
 8002f54:	e0fa      	b.n	800314c <build_grid_map+0x210>
        for (int j = 0; j < colum; j++) {
 8002f56:	2300      	movs	r3, #0
 8002f58:	633b      	str	r3, [r7, #48]	; 0x30
 8002f5a:	e0ef      	b.n	800313c <build_grid_map+0x200>
            // Asignar valores a la celda
            grid[i][j].id[0] = 'A' + j;             // Asignar un identificador simple, 'A', 'B', ...
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f62:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8002f66:	fb01 f202 	mul.w	r2, r1, r2
 8002f6a:	68f9      	ldr	r1, [r7, #12]
 8002f6c:	440a      	add	r2, r1
 8002f6e:	3341      	adds	r3, #65	; 0x41
 8002f70:	b2d8      	uxtb	r0, r3
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	2158      	movs	r1, #88	; 0x58
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	701a      	strb	r2, [r3, #0]
            grid[i][j].id[1] = '0' + i;             // Asignar una cifra simple, '0', '1', '2', ...
 8002f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f86:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8002f8a:	fb01 f202 	mul.w	r2, r1, r2
 8002f8e:	68f9      	ldr	r1, [r7, #12]
 8002f90:	440a      	add	r2, r1
 8002f92:	3330      	adds	r3, #48	; 0x30
 8002f94:	b2d8      	uxtb	r0, r3
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	2158      	movs	r1, #88	; 0x58
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	701a      	strb	r2, [r3, #0]
            grid[i][j].index_row = i;               // Asignar el indice de la fila
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa8:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002fac:	fb02 f303 	mul.w	r3, r2, r3
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	441a      	add	r2, r3
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb6:	b2d8      	uxtb	r0, r3
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	2158      	movs	r1, #88	; 0x58
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	701a      	strb	r2, [r3, #0]
            grid[i][j].index_col = j;               // Asignar el indice de la columna
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fca:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	441a      	add	r2, r3
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	b2d8      	uxtb	r0, r3
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	2158      	movs	r1, #88	; 0x58
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3303      	adds	r3, #3
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	701a      	strb	r2, [r3, #0]
            grid[i][j].coor_x = separation * j;     // Asignar la posición x de la celda
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff6:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	441a      	add	r2, r3
 8003002:	edd7 7a01 	vldr	s15, [r7, #4]
 8003006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	2158      	movs	r1, #88	; 0x58
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	3304      	adds	r3, #4
 8003016:	edc3 7a00 	vstr	s15, [r3]
            grid[i][j].coor_y = separation * i;     // Asignar la posición y de la celda
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	ee07 3a90 	vmov	s15, r3
 8003020:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003026:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	441a      	add	r2, r3
 8003032:	edd7 7a01 	vldr	s15, [r7, #4]
 8003036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	2158      	movs	r1, #88	; 0x58
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	4413      	add	r3, r2
 8003044:	3308      	adds	r3, #8
 8003046:	edc3 7a00 	vstr	s15, [r3]
            grid[i][j].status = 0;                  // Inicializar el estado de la celda;             
 800304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	441a      	add	r2, r3
 8003058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305a:	2158      	movs	r1, #88	; 0x58
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3354      	adds	r3, #84	; 0x54
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
            // Asignacion de vecinos a la celda actual
            for (uint8_t k = 0; k < 8; k++) {
 8003068:	2300      	movs	r3, #0
 800306a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800306e:	e05e      	b.n	800312e <build_grid_map+0x1f2>
                int8_t index_row_ne = i + ne_pos_x[k]; 
 8003070:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003074:	4a9a      	ldr	r2, [pc, #616]	; (80032e0 <build_grid_map+0x3a4>)
 8003076:	56d3      	ldrsb	r3, [r2, r3]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307c:	b2db      	uxtb	r3, r3
 800307e:	4413      	add	r3, r2
 8003080:	b2db      	uxtb	r3, r3
 8003082:	75fb      	strb	r3, [r7, #23]
                int8_t index_colum_ne = j + ne_pos_y[k]; 
 8003084:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003088:	4a96      	ldr	r2, [pc, #600]	; (80032e4 <build_grid_map+0x3a8>)
 800308a:	56d3      	ldrsb	r3, [r2, r3]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	b2db      	uxtb	r3, r3
 8003092:	4413      	add	r3, r2
 8003094:	b2db      	uxtb	r3, r3
 8003096:	75bb      	strb	r3, [r7, #22]
                // Se evalua si el indice esta dentro de la malla
                if (index_row_ne >= 0 && index_row_ne < row && index_colum_ne >= 0 && index_colum_ne < colum) 
 8003098:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800309c:	2b00      	cmp	r3, #0
 800309e:	db2e      	blt.n	80030fe <build_grid_map+0x1c2>
 80030a0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80030a4:	7afb      	ldrb	r3, [r7, #11]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	da29      	bge.n	80030fe <build_grid_map+0x1c2>
 80030aa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	db25      	blt.n	80030fe <build_grid_map+0x1c2>
 80030b2:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80030b6:	7abb      	ldrb	r3, [r7, #10]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	da20      	bge.n	80030fe <build_grid_map+0x1c2>
                {
                    grid[i][j].neighbors.ptrCellMap[k] = &grid[index_row_ne][index_colum_ne];
 80030bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030c0:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	18d0      	adds	r0, r2, r3
 80030cc:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80030d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d2:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	68f9      	ldr	r1, [r7, #12]
 80030dc:	4419      	add	r1, r3
 80030de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030e2:	2458      	movs	r4, #88	; 0x58
 80030e4:	fb04 f202 	mul.w	r2, r4, r2
 80030e8:	4402      	add	r2, r0
 80030ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ec:	2416      	movs	r4, #22
 80030ee:	fb04 f000 	mul.w	r0, r4, r0
 80030f2:	4403      	add	r3, r0
 80030f4:	3302      	adds	r3, #2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	e012      	b.n	8003124 <build_grid_map+0x1e8>
                } 
                else 
                {
                    grid[i][j].neighbors.ptrCellMap[k] = NULL;                    
 80030fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003100:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003104:	fb02 f303 	mul.w	r3, r2, r3
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	441a      	add	r2, r3
 800310c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003110:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003112:	2016      	movs	r0, #22
 8003114:	fb00 f101 	mul.w	r1, r0, r1
 8003118:	440b      	add	r3, r1
 800311a:	3302      	adds	r3, #2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	2200      	movs	r2, #0
 8003122:	605a      	str	r2, [r3, #4]
            for (uint8_t k = 0; k < 8; k++) {
 8003124:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003128:	3301      	adds	r3, #1
 800312a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800312e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003132:	2b07      	cmp	r3, #7
 8003134:	d99c      	bls.n	8003070 <build_grid_map+0x134>
        for (int j = 0; j < colum; j++) {
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	3301      	adds	r3, #1
 800313a:	633b      	str	r3, [r7, #48]	; 0x30
 800313c:	7abb      	ldrb	r3, [r7, #10]
 800313e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003140:	429a      	cmp	r2, r3
 8003142:	f6ff af0b 	blt.w	8002f5c <build_grid_map+0x20>
    for (int i = 0; i < row; i++) {
 8003146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003148:	3301      	adds	r3, #1
 800314a:	637b      	str	r3, [r7, #52]	; 0x34
 800314c:	7afb      	ldrb	r3, [r7, #11]
 800314e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003150:	429a      	cmp	r2, r3
 8003152:	f6ff af00 	blt.w	8002f56 <build_grid_map+0x1a>
        }
    }
    
    //------------------Distancias entre celdas------------------------
    //Se calcula la distancia de cada celda vecina
    for (int i = 0; i < row; i++) {
 8003156:	2300      	movs	r3, #0
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
 800315a:	e0b6      	b.n	80032ca <build_grid_map+0x38e>
        for (int j = 0; j < colum; j++) {
 800315c:	2300      	movs	r3, #0
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
 8003160:	e0ab      	b.n	80032ba <build_grid_map+0x37e>
            for (uint8_t k = 0; k < 8; k++)
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003168:	e09f      	b.n	80032aa <build_grid_map+0x36e>
            {    
                if(grid[i][j].neighbors.ptrCellMap[k] != NULL)
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003170:	fb02 f303 	mul.w	r3, r2, r3
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	441a      	add	r2, r3
 8003178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800317c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800317e:	2016      	movs	r0, #22
 8003180:	fb00 f101 	mul.w	r1, r0, r1
 8003184:	440b      	add	r3, r1
 8003186:	3302      	adds	r3, #2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d072      	beq.n	8003278 <build_grid_map+0x33c>
                {
                    //Calculo vector relativo
                    rel_x = grid[i][j].neighbors.ptrCellMap[k]->coor_x - grid[i][j].coor_x;
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003198:	fb02 f303 	mul.w	r3, r2, r3
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	441a      	add	r2, r3
 80031a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031a6:	2016      	movs	r0, #22
 80031a8:	fb00 f101 	mul.w	r1, r0, r1
 80031ac:	440b      	add	r3, r1
 80031ae:	3302      	adds	r3, #2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80031c0:	fb02 f303 	mul.w	r3, r2, r3
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	441a      	add	r2, r3
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	2158      	movs	r1, #88	; 0x58
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	3304      	adds	r3, #4
 80031d4:	edd3 7a00 	vldr	s15, [r3]
 80031d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031dc:	edc7 7a07 	vstr	s15, [r7, #28]
                    rel_y = grid[i][j].neighbors.ptrCellMap[k]->coor_y - grid[i][j].coor_y;
 80031e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e2:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	441a      	add	r2, r3
 80031ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f4:	2016      	movs	r0, #22
 80031f6:	fb00 f101 	mul.w	r1, r0, r1
 80031fa:	440b      	add	r3, r1
 80031fc:	3302      	adds	r3, #2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	ed93 7a02 	vldr	s14, [r3, #8]
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	441a      	add	r2, r3
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	2158      	movs	r1, #88	; 0x58
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	3308      	adds	r3, #8
 8003222:	edd3 7a00 	vldr	s15, [r3]
 8003226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800322a:	edc7 7a06 	vstr	s15, [r7, #24]
                    //Ingresamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = sqrtf(rel_x * rel_x + rel_y * rel_y);
 800322e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003232:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003236:	edd7 7a06 	vldr	s15, [r7, #24]
 800323a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800323e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8003248:	fb02 f303 	mul.w	r3, r2, r3
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	18d4      	adds	r4, r2, r3
 8003250:	f897 5023 	ldrb.w	r5, [r7, #35]	; 0x23
 8003254:	eeb0 0a67 	vmov.f32	s0, s15
 8003258:	f00a fc7c 	bl	800db54 <sqrtf>
 800325c:	eef0 7a40 	vmov.f32	s15, s0
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	2216      	movs	r2, #22
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	442b      	add	r3, r5
 800326a:	330a      	adds	r3, #10
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4423      	add	r3, r4
 8003270:	3304      	adds	r3, #4
 8003272:	edc3 7a00 	vstr	s15, [r3]
 8003276:	e013      	b.n	80032a0 <build_grid_map+0x364>
                }
                else
                {
                    //Ingreamos la distancia
                    grid[i][j].neighbors.distance_neigh[k] = -1.0f;
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	441a      	add	r2, r3
 8003286:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800328a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800328c:	2016      	movs	r0, #22
 800328e:	fb00 f101 	mul.w	r1, r0, r1
 8003292:	440b      	add	r3, r1
 8003294:	330a      	adds	r3, #10
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	3304      	adds	r3, #4
 800329c:	4a12      	ldr	r2, [pc, #72]	; (80032e8 <build_grid_map+0x3ac>)
 800329e:	601a      	str	r2, [r3, #0]
            for (uint8_t k = 0; k < 8; k++)
 80032a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032a4:	3301      	adds	r3, #1
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032ae:	2b07      	cmp	r3, #7
 80032b0:	f67f af5b 	bls.w	800316a <build_grid_map+0x22e>
        for (int j = 0; j < colum; j++) {
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	3301      	adds	r3, #1
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ba:	7abb      	ldrb	r3, [r7, #10]
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	429a      	cmp	r2, r3
 80032c0:	f6ff af4f 	blt.w	8003162 <build_grid_map+0x226>
    for (int i = 0; i < row; i++) {
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	3301      	adds	r3, #1
 80032c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ca:	7afb      	ldrb	r3, [r7, #11]
 80032cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ce:	429a      	cmp	r2, r3
 80032d0:	f6ff af44 	blt.w	800315c <build_grid_map+0x220>
                }                
            }
        }
    }
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	3738      	adds	r7, #56	; 0x38
 80032da:	46bd      	mov	sp, r7
 80032dc:	bdb0      	pop	{r4, r5, r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000000 	.word	0x20000000
 80032e4:	20000008 	.word	0x20000008
 80032e8:	bf800000 	.word	0xbf800000
 80032ec:	00000000 	.word	0x00000000

080032f0 <main>:
char bufferRecepcion[64] = {0};                  //Arreglo que almacena el comando ingresado

float distance_recta = 0;

int main(void)
{
 80032f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f4:	b088      	sub	sp, #32
 80032f6:	af02      	add	r7, sp, #8
	//Definicion de variables
	//float distance_recta = 0;
	float sampling_timer = 0;
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
	float distance_c = 0;
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	613b      	str	r3, [r7, #16]

	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 8003304:	2364      	movs	r3, #100	; 0x64
 8003306:	73fb      	strb	r3, [r7, #15]
	configPLL(clock);
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	4618      	mov	r0, r3
 800330c:	f003 ffd0 	bl	80072b0 <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 8003310:	f000 fb82 	bl	8003a18 <int_Hardware>
	//Activamos el Systick
	config_SysTick_ms();
 8003314:	f004 fbf6 	bl	8007b04 <config_SysTick_ms>
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 8003318:	4b9d      	ldr	r3, [pc, #628]	; (8003590 <main+0x2a0>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	4a9c      	ldr	r2, [pc, #624]	; (8003590 <main+0x2a0>)
 8003320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 8003328:	f000 fd44 	bl	8003db4 <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 800332c:	2101      	movs	r1, #1
 800332e:	4899      	ldr	r0, [pc, #612]	; (8003594 <main+0x2a4>)
 8003330:	f003 fd74 	bl	8006e1c <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8003334:	2101      	movs	r1, #1
 8003336:	4898      	ldr	r0, [pc, #608]	; (8003598 <main+0x2a8>)
 8003338:	f003 fd70 	bl	8006e1c <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 800333c:	2101      	movs	r1, #1
 800333e:	4897      	ldr	r0, [pc, #604]	; (800359c <main+0x2ac>)
 8003340:	f003 fd6c 	bl	8006e1c <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8003344:	2101      	movs	r1, #1
 8003346:	4896      	ldr	r0, [pc, #600]	; (80035a0 <main+0x2b0>)
 8003348:	f003 fd68 	bl	8006e1c <GPIO_writePin>
	int_Config_Motor();
 800334c:	f000 fd50 	bl	8003df0 <int_Config_Motor>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 8003350:	4b94      	ldr	r3, [pc, #592]	; (80035a4 <main+0x2b4>)
 8003352:	4a95      	ldr	r2, [pc, #596]	; (80035a8 <main+0x2b8>)
 8003354:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = ((M_PI*DL)/(100*Ce));  //[mm/cuentas]
 8003356:	4b95      	ldr	r3, [pc, #596]	; (80035ac <main+0x2bc>)
 8003358:	4a95      	ldr	r2, [pc, #596]	; (80035b0 <main+0x2c0>)
 800335a:	601a      	str	r2, [r3, #0]
	cm_R =	((M_PI*DR)/(100*Ce));  //[mm/cuentas]
 800335c:	4b95      	ldr	r3, [pc, #596]	; (80035b4 <main+0x2c4>)
 800335e:	4a96      	ldr	r2, [pc, #600]	; (80035b8 <main+0x2c8>)
 8003360:	601a      	str	r2, [r3, #0]
	//Calculamos el setpoint
	velSetPoint = (0.00169*duttySetPoint + 0.0619);
 8003362:	4b96      	ldr	r3, [pc, #600]	; (80035bc <main+0x2cc>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd f8f4 	bl	8000554 <__aeabi_i2d>
 800336c:	a384      	add	r3, pc, #528	; (adr r3, 8003580 <main+0x290>)
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	f7fd f959 	bl	8000628 <__aeabi_dmul>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	a382      	add	r3, pc, #520	; (adr r3, 8003588 <main+0x298>)
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f7fc ff9a 	bl	80002bc <__adddf3>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4610      	mov	r0, r2
 800338e:	4619      	mov	r1, r3
 8003390:	f7fd fc42 	bl	8000c18 <__aeabi_d2f>
 8003394:	4603      	mov	r3, r0
 8003396:	4a8a      	ldr	r2, [pc, #552]	; (80035c0 <main+0x2d0>)
 8003398:	6013      	str	r3, [r2, #0]

	//--------------------------Configuramos inicia el MPU----------------------
	//Configuracion MPU
	int_MPU();
 800339a:	f000 fd15 	bl	8003dc8 <int_MPU>
	//Calibracion del eje Z del giroscopio
	gyro_offset = calibrationMPU(&handler_MPUAccel_MPU6050, CAL_GYRO_Z);
 800339e:	2105      	movs	r1, #5
 80033a0:	4888      	ldr	r0, [pc, #544]	; (80035c4 <main+0x2d4>)
 80033a2:	f7ff f909 	bl	80025b8 <calibrationMPU>
 80033a6:	eef0 7a40 	vmov.f32	s15, s0
 80033aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ae:	ee17 3a90 	vmov	r3, s15
 80033b2:	b21a      	sxth	r2, r3
 80033b4:	4b84      	ldr	r3, [pc, #528]	; (80035c8 <main+0x2d8>)
 80033b6:	801a      	strh	r2, [r3, #0]


	while(1)
	{
		//-----------------------------Comandos------------------------------------
		if(commandComplete==1)
 80033b8:	4b84      	ldr	r3, [pc, #528]	; (80035cc <main+0x2dc>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d106      	bne.n	80033ce <main+0xde>
		{
			runCommand(bufferRecepcion);
 80033c0:	4883      	ldr	r0, [pc, #524]	; (80035d0 <main+0x2e0>)
 80033c2:	f000 fffd 	bl	80043c0 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 80033c6:	4b81      	ldr	r3, [pc, #516]	; (80035cc <main+0x2dc>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	e000      	b.n	80033d0 <main+0xe0>
		}
		else
		{ __NOP(); }
 80033ce:	bf00      	nop


		//----------------------------A-Star------------------------------------
		if(flag_A_Star==1 && string_aStar_Complete==1)
 80033d0:	4b80      	ldr	r3, [pc, #512]	; (80035d4 <main+0x2e4>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d158      	bne.n	800348a <main+0x19a>
 80033d8:	4b7f      	ldr	r3, [pc, #508]	; (80035d8 <main+0x2e8>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d154      	bne.n	800348a <main+0x19a>
		{
		 //-------------Separar el String en los parametros del grid m-------------
		  Separate_parameters(grid_map, bufferParameterStringGM);
 80033e0:	497e      	ldr	r1, [pc, #504]	; (80035dc <main+0x2ec>)
 80033e2:	487f      	ldr	r0, [pc, #508]	; (80035e0 <main+0x2f0>)
 80033e4:	f001 f9be 	bl	8004764 <Separate_parameters>
		  //---------Creacion de la malla con cada una de sus celdas-----------
		  build_grid_map(grid_map, grid_map_row, grid_map_colum, cell_separation);
 80033e8:	4b7e      	ldr	r3, [pc, #504]	; (80035e4 <main+0x2f4>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	4a7e      	ldr	r2, [pc, #504]	; (80035e8 <main+0x2f8>)
 80033ee:	7812      	ldrb	r2, [r2, #0]
 80033f0:	497e      	ldr	r1, [pc, #504]	; (80035ec <main+0x2fc>)
 80033f2:	edd1 7a00 	vldr	s15, [r1]
 80033f6:	eeb0 0a67 	vmov.f32	s0, s15
 80033fa:	4619      	mov	r1, r3
 80033fc:	4878      	ldr	r0, [pc, #480]	; (80035e0 <main+0x2f0>)
 80033fe:	f7ff fd9d 	bl	8002f3c <build_grid_map>
		  //-------Calculo de la heuristica de la celda de acuerdo a la posicion objetivo-------
		  heuristic_cell_map(grid_map, grid_map_row, grid_map_colum, goal_x, goal_y);
 8003402:	4b78      	ldr	r3, [pc, #480]	; (80035e4 <main+0x2f4>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	4a78      	ldr	r2, [pc, #480]	; (80035e8 <main+0x2f8>)
 8003408:	7812      	ldrb	r2, [r2, #0]
 800340a:	4979      	ldr	r1, [pc, #484]	; (80035f0 <main+0x300>)
 800340c:	edd1 7a00 	vldr	s15, [r1]
 8003410:	4978      	ldr	r1, [pc, #480]	; (80035f4 <main+0x304>)
 8003412:	ed91 7a00 	vldr	s14, [r1]
 8003416:	eef0 0a47 	vmov.f32	s1, s14
 800341a:	eeb0 0a67 	vmov.f32	s0, s15
 800341e:	4619      	mov	r1, r3
 8003420:	486f      	ldr	r0, [pc, #444]	; (80035e0 <main+0x2f0>)
 8003422:	f7fe fc13 	bl	8001c4c <heuristic_cell_map>
		  //------------------Aplicacion del algoritmo A star------------------
		  file_path = aplicattion_A_Star(grid_map, grid_map_row, grid_map_colum, start_x, start_y, goal_x, goal_y);
 8003426:	4b6f      	ldr	r3, [pc, #444]	; (80035e4 <main+0x2f4>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	4a6f      	ldr	r2, [pc, #444]	; (80035e8 <main+0x2f8>)
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	4972      	ldr	r1, [pc, #456]	; (80035f8 <main+0x308>)
 8003430:	edd1 7a00 	vldr	s15, [r1]
 8003434:	4971      	ldr	r1, [pc, #452]	; (80035fc <main+0x30c>)
 8003436:	ed91 7a00 	vldr	s14, [r1]
 800343a:	496d      	ldr	r1, [pc, #436]	; (80035f0 <main+0x300>)
 800343c:	edd1 6a00 	vldr	s13, [r1]
 8003440:	496c      	ldr	r1, [pc, #432]	; (80035f4 <main+0x304>)
 8003442:	ed91 6a00 	vldr	s12, [r1]
 8003446:	eef0 1a46 	vmov.f32	s3, s12
 800344a:	eeb0 1a66 	vmov.f32	s2, s13
 800344e:	eef0 0a47 	vmov.f32	s1, s14
 8003452:	eeb0 0a67 	vmov.f32	s0, s15
 8003456:	4619      	mov	r1, r3
 8003458:	4861      	ldr	r0, [pc, #388]	; (80035e0 <main+0x2f0>)
 800345a:	f7fd ff2b 	bl	80012b4 <aplicattion_A_Star>
 800345e:	4603      	mov	r3, r0
 8003460:	4a67      	ldr	r2, [pc, #412]	; (8003600 <main+0x310>)
 8003462:	6013      	str	r3, [r2, #0]
		  //-----------------Impresion de la ruta encontrada--------------------
		  send_path(file_path, grid_map, grid_map_row, grid_map_colum);
 8003464:	4b66      	ldr	r3, [pc, #408]	; (8003600 <main+0x310>)
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	4b5e      	ldr	r3, [pc, #376]	; (80035e4 <main+0x2f4>)
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	4b5e      	ldr	r3, [pc, #376]	; (80035e8 <main+0x2f8>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	495b      	ldr	r1, [pc, #364]	; (80035e0 <main+0x2f0>)
 8003472:	f001 fab7 	bl	80049e4 <send_path>
		  //Subimos bandera
		  flag_navegation_AStar = 1;
 8003476:	4b63      	ldr	r3, [pc, #396]	; (8003604 <main+0x314>)
 8003478:	2201      	movs	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]
		  //Reinicamos banderas
		  flag_A_Star = 0;
 800347c:	4b55      	ldr	r3, [pc, #340]	; (80035d4 <main+0x2e4>)
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
		  string_aStar_Complete = 0;
 8003482:	4b55      	ldr	r3, [pc, #340]	; (80035d8 <main+0x2e8>)
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
 8003488:	e000      	b.n	800348c <main+0x19c>
		}
		else{  __NOP(); }
 800348a:	bf00      	nop


		//----------------------------Accion de seleccion de operacion--------------------------------
		if(flag_multioperation == 1)
 800348c:	4b5e      	ldr	r3, [pc, #376]	; (8003608 <main+0x318>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d16f      	bne.n	8003574 <main+0x284>
		{
			//Verificamos el modo de operacion
			if(flag_mode == 0)
 8003494:	4b5d      	ldr	r3, [pc, #372]	; (800360c <main+0x31c>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d16d      	bne.n	8003578 <main+0x288>
			{
				//Delay para espera la finalizacion del modo
				delay_ms(500);
 800349c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034a0:	f004 fb78 	bl	8007b94 <delay_ms>
				//Ejecucion de operacion
				switch(list_operation[counting_operation].operacion)
 80034a4:	4b5a      	ldr	r3, [pc, #360]	; (8003610 <main+0x320>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	4a5a      	ldr	r2, [pc, #360]	; (8003614 <main+0x324>)
 80034aa:	015b      	lsls	r3, r3, #5
 80034ac:	4413      	add	r3, r2
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d047      	beq.n	8003544 <main+0x254>
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	f300 80b5 	bgt.w	8003624 <main+0x334>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <main+0x1d4>
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d00b      	beq.n	80034da <main+0x1ea>
						turn_itself(list_operation[counting_operation].grad_Rotative);
						//Aumentamos valor del contador
						counting_operation ++;
						break;
					}
					default:{ break; }
 80034c2:	e0af      	b.n	8003624 <main+0x334>
						flag_multioperation = 0;
 80034c4:	4b50      	ldr	r3, [pc, #320]	; (8003608 <main+0x318>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	701a      	strb	r2, [r3, #0]
						counting_operation = 0;
 80034ca:	4b51      	ldr	r3, [pc, #324]	; (8003610 <main+0x320>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
						writeMsgForTXE(&handler_USART_USB, "Operaciones finalizadas");
 80034d0:	4951      	ldr	r1, [pc, #324]	; (8003618 <main+0x328>)
 80034d2:	4852      	ldr	r0, [pc, #328]	; (800361c <main+0x32c>)
 80034d4:	f004 fe76 	bl	80081c4 <writeMsgForTXE>
						break;
 80034d8:	e0a5      	b.n	8003626 <main+0x336>
						change_coordinates_position(&parameter_Path_Robot, list_operation[counting_operation].x_destination, list_operation[counting_operation].y_destination,
 80034da:	4b4d      	ldr	r3, [pc, #308]	; (8003610 <main+0x320>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	4a4d      	ldr	r2, [pc, #308]	; (8003614 <main+0x324>)
 80034e0:	015b      	lsls	r3, r3, #5
 80034e2:	4413      	add	r3, r2
 80034e4:	3308      	adds	r3, #8
 80034e6:	ed93 7b00 	vldr	d7, [r3]
 80034ea:	4b49      	ldr	r3, [pc, #292]	; (8003610 <main+0x320>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	4a49      	ldr	r2, [pc, #292]	; (8003614 <main+0x324>)
 80034f0:	015b      	lsls	r3, r3, #5
 80034f2:	4413      	add	r3, r2
 80034f4:	3310      	adds	r3, #16
 80034f6:	ed93 6b00 	vldr	d6, [r3]
 80034fa:	4b49      	ldr	r3, [pc, #292]	; (8003620 <main+0x330>)
 80034fc:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8003500:	4b47      	ldr	r3, [pc, #284]	; (8003620 <main+0x330>)
 8003502:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
 8003506:	eeb0 3a44 	vmov.f32	s6, s8
 800350a:	eef0 3a64 	vmov.f32	s7, s9
 800350e:	eeb0 2a45 	vmov.f32	s4, s10
 8003512:	eef0 2a65 	vmov.f32	s5, s11
 8003516:	eeb0 1a46 	vmov.f32	s2, s12
 800351a:	eef0 1a66 	vmov.f32	s3, s13
 800351e:	eeb0 0a47 	vmov.f32	s0, s14
 8003522:	eef0 0a67 	vmov.f32	s1, s15
 8003526:	483e      	ldr	r0, [pc, #248]	; (8003620 <main+0x330>)
 8003528:	f7ff fa7a 	bl	8002a20 <change_coordinates_position>
						straight_line(duttySetPoint);
 800352c:	4b23      	ldr	r3, [pc, #140]	; (80035bc <main+0x2cc>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f001 fafd 	bl	8004b30 <straight_line>
						counting_operation++;
 8003536:	4b36      	ldr	r3, [pc, #216]	; (8003610 <main+0x320>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	3301      	adds	r3, #1
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4b34      	ldr	r3, [pc, #208]	; (8003610 <main+0x320>)
 8003540:	701a      	strb	r2, [r3, #0]
						break;
 8003542:	e070      	b.n	8003626 <main+0x336>
						turn_itself(list_operation[counting_operation].grad_Rotative);
 8003544:	4b32      	ldr	r3, [pc, #200]	; (8003610 <main+0x320>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	4a32      	ldr	r2, [pc, #200]	; (8003614 <main+0x324>)
 800354a:	015b      	lsls	r3, r3, #5
 800354c:	4413      	add	r3, r2
 800354e:	3318      	adds	r3, #24
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	f7fd fb16 	bl	8000b88 <__aeabi_d2iz>
 800355c:	4603      	mov	r3, r0
 800355e:	b21b      	sxth	r3, r3
 8003560:	4618      	mov	r0, r3
 8003562:	f001 fbe9 	bl	8004d38 <turn_itself>
						counting_operation ++;
 8003566:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <main+0x320>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	3301      	adds	r3, #1
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4b28      	ldr	r3, [pc, #160]	; (8003610 <main+0x320>)
 8003570:	701a      	strb	r2, [r3, #0]
						break;
 8003572:	e058      	b.n	8003626 <main+0x336>
				}
			}
		}
		else{ __NOP(); }
 8003574:	bf00      	nop
 8003576:	e056      	b.n	8003626 <main+0x336>
			}
 8003578:	bf00      	nop
 800357a:	e054      	b.n	8003626 <main+0x336>
 800357c:	f3af 8000 	nop.w
 8003580:	aebc408e 	.word	0xaebc408e
 8003584:	3f5bb05f 	.word	0x3f5bb05f
 8003588:	573eab36 	.word	0x573eab36
 800358c:	3fafb15b 	.word	0x3fafb15b
 8003590:	e000ed00 	.word	0xe000ed00
 8003594:	200002f4 	.word	0x200002f4
 8003598:	20000368 	.word	0x20000368
 800359c:	20000300 	.word	0x20000300
 80035a0:	20000374 	.word	0x20000374
 80035a4:	20009428 	.word	0x20009428
 80035a8:	20000318 	.word	0x20000318
 80035ac:	20009050 	.word	0x20009050
 80035b0:	40105fa7 	.word	0x40105fa7
 80035b4:	20009054 	.word	0x20009054
 80035b8:	400facee 	.word	0x400facee
 80035bc:	20000018 	.word	0x20000018
 80035c0:	20009438 	.word	0x20009438
 80035c4:	2000027c 	.word	0x2000027c
 80035c8:	20008f54 	.word	0x20008f54
 80035cc:	20000019 	.word	0x20000019
 80035d0:	20009448 	.word	0x20009448
 80035d4:	20008f51 	.word	0x20008f51
 80035d8:	20008f50 	.word	0x20008f50
 80035dc:	20008d70 	.word	0x20008d70
 80035e0:	200003f0 	.word	0x200003f0
 80035e4:	20008f3a 	.word	0x20008f3a
 80035e8:	20008f3b 	.word	0x20008f3b
 80035ec:	20008f3c 	.word	0x20008f3c
 80035f0:	20008f48 	.word	0x20008f48
 80035f4:	20008f4c 	.word	0x20008f4c
 80035f8:	20008f40 	.word	0x20008f40
 80035fc:	20008f44 	.word	0x20008f44
 8003600:	20008f34 	.word	0x20008f34
 8003604:	20008f52 	.word	0x20008f52
 8003608:	2000942c 	.word	0x2000942c
 800360c:	2000942e 	.word	0x2000942e
 8003610:	2000942f 	.word	0x2000942f
 8003614:	20009068 	.word	0x20009068
 8003618:	08010170 	.word	0x08010170
 800361c:	2000029c 	.word	0x2000029c
 8003620:	20008f78 	.word	0x20008f78
					default:{ break; }
 8003624:	bf00      	nop

		//--------------------------Accion especifica del modo-----------------------------
		if(flag_action == 1)
 8003626:	4bb4      	ldr	r3, [pc, #720]	; (80038f8 <main+0x608>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	f040 818c 	bne.w	8003948 <main+0x658>
		{
			//Verificamos el modo de operacion
			if(flag_mode == 1)
 8003630:	4bb2      	ldr	r3, [pc, #712]	; (80038fc <main+0x60c>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	f040 815a 	bne.w	80038ee <main+0x5fe>
			{
				//Conversion de tiempo
				sampling_timer = ((float) time_accion/1000);
 800363a:	4bb1      	ldr	r3, [pc, #708]	; (8003900 <main+0x610>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003646:	eddf 6aaf 	vldr	s13, [pc, #700]	; 8003904 <main+0x614>
 800364a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800364e:	edc7 7a05 	vstr	s15, [r7, #20]
				//Calculo odometria
				distance_c = (handler_Motor_R.parametersMotor.distance+handler_Motor_L.parametersMotor.distance)/2;  	//[mm]
 8003652:	4bad      	ldr	r3, [pc, #692]	; (8003908 <main+0x618>)
 8003654:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003658:	4bac      	ldr	r3, [pc, #688]	; (800390c <main+0x61c>)
 800365a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800365e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003662:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003666:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800366a:	edc7 7a04 	vstr	s15, [r7, #16]
				parameter_Posicion_Robot.xr_position += distance_c*(cos(parameter_Posicion_Robot.phi_relativo));        //[mm]
 800366e:	4ba8      	ldr	r3, [pc, #672]	; (8003910 <main+0x620>)
 8003670:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8003674:	6938      	ldr	r0, [r7, #16]
 8003676:	f7fc ff7f 	bl	8000578 <__aeabi_f2d>
 800367a:	e9c7 0100 	strd	r0, r1, [r7]
 800367e:	4ba4      	ldr	r3, [pc, #656]	; (8003910 <main+0x620>)
 8003680:	ed93 7b02 	vldr	d7, [r3, #8]
 8003684:	eeb0 0a47 	vmov.f32	s0, s14
 8003688:	eef0 0a67 	vmov.f32	s1, s15
 800368c:	f00a f89c 	bl	800d7c8 <cos>
 8003690:	ec53 2b10 	vmov	r2, r3, d0
 8003694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003698:	f7fc ffc6 	bl	8000628 <__aeabi_dmul>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4650      	mov	r0, sl
 80036a2:	4659      	mov	r1, fp
 80036a4:	f7fc fe0a 	bl	80002bc <__adddf3>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4998      	ldr	r1, [pc, #608]	; (8003910 <main+0x620>)
 80036ae:	e9c1 2306 	strd	r2, r3, [r1, #24]
				parameter_Posicion_Robot.yr_position += distance_c*(sin(parameter_Posicion_Robot.phi_relativo));       //[mm]
 80036b2:	4b97      	ldr	r3, [pc, #604]	; (8003910 <main+0x620>)
 80036b4:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 80036b8:	6938      	ldr	r0, [r7, #16]
 80036ba:	f7fc ff5d 	bl	8000578 <__aeabi_f2d>
 80036be:	e9c7 0100 	strd	r0, r1, [r7]
 80036c2:	4b93      	ldr	r3, [pc, #588]	; (8003910 <main+0x620>)
 80036c4:	ed93 7b02 	vldr	d7, [r3, #8]
 80036c8:	eeb0 0a47 	vmov.f32	s0, s14
 80036cc:	eef0 0a67 	vmov.f32	s1, s15
 80036d0:	f00a f916 	bl	800d900 <sin>
 80036d4:	ec53 2b10 	vmov	r2, r3, d0
 80036d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036dc:	f7fc ffa4 	bl	8000628 <__aeabi_dmul>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4650      	mov	r0, sl
 80036e6:	4659      	mov	r1, fp
 80036e8:	f7fc fde8 	bl	80002bc <__adddf3>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4987      	ldr	r1, [pc, #540]	; (8003910 <main+0x620>)
 80036f2:	e9c1 2308 	strd	r2, r3, [r1, #32]
				//Paso de c.relativa a c.globales
				parameter_Posicion_Robot.xg_position = parameter_Posicion_Robot.xg_position_inicial + parameter_Posicion_Robot.xr_position*cos_cal - parameter_Posicion_Robot.yr_position*sin_cal;
 80036f6:	4b86      	ldr	r3, [pc, #536]	; (8003910 <main+0x620>)
 80036f8:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 80036fc:	4b84      	ldr	r3, [pc, #528]	; (8003910 <main+0x620>)
 80036fe:	ed93 7b06 	vldr	d7, [r3, #24]
 8003702:	ed87 7b00 	vstr	d7, [r7]
 8003706:	4b83      	ldr	r3, [pc, #524]	; (8003914 <main+0x624>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fc ff34 	bl	8000578 <__aeabi_f2d>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003718:	f7fc ff86 	bl	8000628 <__aeabi_dmul>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4650      	mov	r0, sl
 8003722:	4659      	mov	r1, fp
 8003724:	f7fc fdca 	bl	80002bc <__adddf3>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	e9c7 2300 	strd	r2, r3, [r7]
 8003730:	4b77      	ldr	r3, [pc, #476]	; (8003910 <main+0x620>)
 8003732:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 8003736:	4b78      	ldr	r3, [pc, #480]	; (8003918 <main+0x628>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc ff1c 	bl	8000578 <__aeabi_f2d>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4650      	mov	r0, sl
 8003746:	4659      	mov	r1, fp
 8003748:	f7fc ff6e 	bl	8000628 <__aeabi_dmul>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003754:	f7fc fdb0 	bl	80002b8 <__aeabi_dsub>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	496c      	ldr	r1, [pc, #432]	; (8003910 <main+0x620>)
 800375e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				parameter_Posicion_Robot.yg_position = parameter_Posicion_Robot.yg_position_inicial + parameter_Posicion_Robot.xr_position*sin_cal + parameter_Posicion_Robot.yr_position*cos_cal;
 8003762:	4b6b      	ldr	r3, [pc, #428]	; (8003910 <main+0x620>)
 8003764:	e9d3 ab0c 	ldrd	sl, fp, [r3, #48]	; 0x30
 8003768:	4b69      	ldr	r3, [pc, #420]	; (8003910 <main+0x620>)
 800376a:	ed93 7b06 	vldr	d7, [r3, #24]
 800376e:	ed87 7b00 	vstr	d7, [r7]
 8003772:	4b69      	ldr	r3, [pc, #420]	; (8003918 <main+0x628>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fc fefe 	bl	8000578 <__aeabi_f2d>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003784:	f7fc ff50 	bl	8000628 <__aeabi_dmul>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4650      	mov	r0, sl
 800378e:	4659      	mov	r1, fp
 8003790:	f7fc fd94 	bl	80002bc <__adddf3>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	e9c7 2300 	strd	r2, r3, [r7]
 800379c:	4b5c      	ldr	r3, [pc, #368]	; (8003910 <main+0x620>)
 800379e:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 80037a2:	4b5c      	ldr	r3, [pc, #368]	; (8003914 <main+0x624>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fc fee6 	bl	8000578 <__aeabi_f2d>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4650      	mov	r0, sl
 80037b2:	4659      	mov	r1, fp
 80037b4:	f7fc ff38 	bl	8000628 <__aeabi_dmul>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037c0:	f7fc fd7c 	bl	80002bc <__adddf3>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4951      	ldr	r1, [pc, #324]	; (8003910 <main+0x620>)
 80037ca:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
				//Convertimos el valor y imprimemos
				sprintf(bufferMsg,"&%#.4f\t%#.4f\n", parameter_Posicion_Robot.xg_position , parameter_Posicion_Robot.yg_position);
 80037ce:	4b50      	ldr	r3, [pc, #320]	; (8003910 <main+0x620>)
 80037d0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80037d4:	4b4e      	ldr	r3, [pc, #312]	; (8003910 <main+0x620>)
 80037d6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80037da:	e9cd 2300 	strd	r2, r3, [sp]
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	494e      	ldr	r1, [pc, #312]	; (800391c <main+0x62c>)
 80037e4:	484e      	ldr	r0, [pc, #312]	; (8003920 <main+0x630>)
 80037e6:	f005 fdaf 	bl	8009348 <siprintf>
				writeMsgForTXE(&handler_USART_USB, bufferMsg);
 80037ea:	494d      	ldr	r1, [pc, #308]	; (8003920 <main+0x630>)
 80037ec:	484d      	ldr	r0, [pc, #308]	; (8003924 <main+0x634>)
 80037ee:	f004 fce9 	bl	80081c4 <writeMsgForTXE>
				//Control PID para la distancia
				distance_recta = (distance_to_straight_line(&parameter_Path_Robot, parameter_Posicion_Robot.xg_position, parameter_Posicion_Robot.yg_position))/1000;
 80037f2:	4b47      	ldr	r3, [pc, #284]	; (8003910 <main+0x620>)
 80037f4:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80037f8:	4b45      	ldr	r3, [pc, #276]	; (8003910 <main+0x620>)
 80037fa:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80037fe:	eeb0 1a46 	vmov.f32	s2, s12
 8003802:	eef0 1a66 	vmov.f32	s3, s13
 8003806:	eeb0 0a47 	vmov.f32	s0, s14
 800380a:	eef0 0a67 	vmov.f32	s1, s15
 800380e:	4846      	ldr	r0, [pc, #280]	; (8003928 <main+0x638>)
 8003810:	f7ff fa1a 	bl	8002c48 <distance_to_straight_line>
 8003814:	ec51 0b10 	vmov	r0, r1, d0
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	4b43      	ldr	r3, [pc, #268]	; (800392c <main+0x63c>)
 800381e:	f7fd f82d 	bl	800087c <__aeabi_ddiv>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4610      	mov	r0, r2
 8003828:	4619      	mov	r1, r3
 800382a:	f7fd f9f5 	bl	8000c18 <__aeabi_d2f>
 800382e:	4603      	mov	r3, r0
 8003830:	4a3f      	ldr	r2, [pc, #252]	; (8003930 <main+0x640>)
 8003832:	6013      	str	r3, [r2, #0]
				PID_simple(&parameter_PID_distace, sampling_timer, 0,  distance_recta);
 8003834:	4b3e      	ldr	r3, [pc, #248]	; (8003930 <main+0x640>)
 8003836:	edd3 7a00 	vldr	s15, [r3]
 800383a:	eeb0 1a67 	vmov.f32	s2, s15
 800383e:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8003934 <main+0x644>
 8003842:	ed97 0a05 	vldr	s0, [r7, #20]
 8003846:	483c      	ldr	r0, [pc, #240]	; (8003938 <main+0x648>)
 8003848:	f001 fd0c 	bl	8005264 <PID_simple>
				//Aplicacndo correcion
				vel_Setpoint_L = velSetPoint - parameter_PID_distace.u;
 800384c:	4b3b      	ldr	r3, [pc, #236]	; (800393c <main+0x64c>)
 800384e:	ed93 7a00 	vldr	s14, [r3]
 8003852:	4b39      	ldr	r3, [pc, #228]	; (8003938 <main+0x648>)
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800385c:	4b38      	ldr	r3, [pc, #224]	; (8003940 <main+0x650>)
 800385e:	edc3 7a00 	vstr	s15, [r3]
				vel_Setpoint_R = velSetPoint + parameter_PID_distace.u;
 8003862:	4b35      	ldr	r3, [pc, #212]	; (8003938 <main+0x648>)
 8003864:	ed93 7a00 	vldr	s14, [r3]
 8003868:	4b34      	ldr	r3, [pc, #208]	; (800393c <main+0x64c>)
 800386a:	edd3 7a00 	vldr	s15, [r3]
 800386e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003872:	4b34      	ldr	r3, [pc, #208]	; (8003944 <main+0x654>)
 8003874:	edc3 7a00 	vstr	s15, [r3]
				//Aplicacion del PID
				PID_simple(&handler_Motor_L.parametersMotor.parametersPID, sampling_timer, vel_Setpoint_L,  handler_Motor_L.parametersMotor.velocity);
 8003878:	4b31      	ldr	r3, [pc, #196]	; (8003940 <main+0x650>)
 800387a:	edd3 7a00 	vldr	s15, [r3]
 800387e:	4b23      	ldr	r3, [pc, #140]	; (800390c <main+0x61c>)
 8003880:	ed93 7a08 	vldr	s14, [r3, #32]
 8003884:	eeb0 1a47 	vmov.f32	s2, s14
 8003888:	eef0 0a67 	vmov.f32	s1, s15
 800388c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003890:	481e      	ldr	r0, [pc, #120]	; (800390c <main+0x61c>)
 8003892:	f001 fce7 	bl	8005264 <PID_simple>
				PID_simple(&handler_Motor_R.parametersMotor.parametersPID, sampling_timer, vel_Setpoint_R,  handler_Motor_R.parametersMotor.velocity);
 8003896:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <main+0x654>)
 8003898:	edd3 7a00 	vldr	s15, [r3]
 800389c:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <main+0x618>)
 800389e:	ed93 7a08 	vldr	s14, [r3, #32]
 80038a2:	eeb0 1a47 	vmov.f32	s2, s14
 80038a6:	eef0 0a67 	vmov.f32	s1, s15
 80038aa:	ed97 0a05 	vldr	s0, [r7, #20]
 80038ae:	4816      	ldr	r0, [pc, #88]	; (8003908 <main+0x618>)
 80038b0:	f001 fcd8 	bl	8005264 <PID_simple>
				//Cambiamos valores
				handler_Motor_L.configMotor.new_dutty += handler_Motor_L.parametersMotor.parametersPID.u;
 80038b4:	4b15      	ldr	r3, [pc, #84]	; (800390c <main+0x61c>)
 80038b6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <main+0x61c>)
 80038bc:	edd3 7a00 	vldr	s15, [r3]
 80038c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <main+0x61c>)
 80038c6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
				handler_Motor_R.configMotor.new_dutty += handler_Motor_R.parametersMotor.parametersPID.u;
 80038ca:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <main+0x618>)
 80038cc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80038d0:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <main+0x618>)
 80038d2:	edd3 7a00 	vldr	s15, [r3]
 80038d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038da:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <main+0x618>)
 80038dc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
				//Correccion del dutty
				correction(&handler_Motor_L);
 80038e0:	480a      	ldr	r0, [pc, #40]	; (800390c <main+0x61c>)
 80038e2:	f001 fd1b 	bl	800531c <correction>
				correction(&handler_Motor_R);
 80038e6:	4808      	ldr	r0, [pc, #32]	; (8003908 <main+0x618>)
 80038e8:	f001 fd18 	bl	800531c <correction>
 80038ec:	e000      	b.n	80038f0 <main+0x600>
			}
			else{ __NOP(); }
 80038ee:	bf00      	nop
			//Bajamos Bandera
			flag_action = 0;
 80038f0:	4b01      	ldr	r3, [pc, #4]	; (80038f8 <main+0x608>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	e028      	b.n	800394a <main+0x65a>
 80038f8:	2000942d 	.word	0x2000942d
 80038fc:	2000942e 	.word	0x2000942e
 8003900:	2000943c 	.word	0x2000943c
 8003904:	447a0000 	.word	0x447a0000
 8003908:	20000318 	.word	0x20000318
 800390c:	2000038c 	.word	0x2000038c
 8003910:	20008fe8 	.word	0x20008fe8
 8003914:	20009040 	.word	0x20009040
 8003918:	20009044 	.word	0x20009044
 800391c:	08010188 	.word	0x08010188
 8003920:	200002a8 	.word	0x200002a8
 8003924:	2000029c 	.word	0x2000029c
 8003928:	20008f78 	.word	0x20008f78
 800392c:	408f4000 	.word	0x408f4000
 8003930:	20009488 	.word	0x20009488
 8003934:	00000000 	.word	0x00000000
 8003938:	20008f58 	.word	0x20008f58
 800393c:	20009438 	.word	0x20009438
 8003940:	20009434 	.word	0x20009434
 8003944:	20009430 	.word	0x20009430
		}
		else{ __NOP(); }
 8003948:	bf00      	nop


		//------------------------------Accion para finalizar modo------------------------------------
		//Verificamos las condiciones de parada
		if(flag_mode==1)
 800394a:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <main+0x714>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d130      	bne.n	80039b4 <main+0x6c4>
		{
			if(distance_traveled(&parameter_Path_Robot, parameter_Posicion_Robot.xg_position, parameter_Posicion_Robot.yg_position)>parameter_Path_Robot.line_Distance){
 8003952:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <main+0x718>)
 8003954:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8003958:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <main+0x718>)
 800395a:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800395e:	eeb0 1a46 	vmov.f32	s2, s12
 8003962:	eef0 1a66 	vmov.f32	s3, s13
 8003966:	eeb0 0a47 	vmov.f32	s0, s14
 800396a:	eef0 0a67 	vmov.f32	s1, s15
 800396e:	4827      	ldr	r0, [pc, #156]	; (8003a0c <main+0x71c>)
 8003970:	f7ff f9ae 	bl	8002cd0 <distance_traveled>
 8003974:	ec5b ab10 	vmov	sl, fp, d0
 8003978:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <main+0x71c>)
 800397a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397c:	4618      	mov	r0, r3
 800397e:	f7fc fde9 	bl	8000554 <__aeabi_i2d>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4650      	mov	r0, sl
 8003988:	4659      	mov	r1, fp
 800398a:	f7fd f8dd 	bl	8000b48 <__aeabi_dcmpgt>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d036      	beq.n	8003a02 <main+0x712>
				//desactivamos los motores
				status_motor(RESET);
 8003994:	2080      	movs	r0, #128	; 0x80
 8003996:	f001 fcff 	bl	8005398 <status_motor>
				//Guardamos la posicion final
				parameter_Posicion_Robot.xg_position_inicial = parameter_Posicion_Robot.xg_position;
 800399a:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <main+0x718>)
 800399c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80039a0:	4919      	ldr	r1, [pc, #100]	; (8003a08 <main+0x718>)
 80039a2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
				parameter_Posicion_Robot.yg_position_inicial = parameter_Posicion_Robot.yg_position;
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <main+0x718>)
 80039a8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80039ac:	4916      	ldr	r1, [pc, #88]	; (8003a08 <main+0x718>)
 80039ae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80039b2:	e501      	b.n	80033b8 <main+0xc8>
			}
		}
		else if(flag_mode==2)
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <main+0x714>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d121      	bne.n	8003a00 <main+0x710>
		{
			if(fabs(ang_complementary) > fabs(parameter_Path_Robot.rotative_Grad_Relative)){
 80039bc:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <main+0x720>)
 80039be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c2:	4614      	mov	r4, r2
 80039c4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80039c8:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <main+0x71c>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fc fdc1 	bl	8000554 <__aeabi_i2d>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4690      	mov	r8, r2
 80039d8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80039dc:	4642      	mov	r2, r8
 80039de:	464b      	mov	r3, r9
 80039e0:	4620      	mov	r0, r4
 80039e2:	4629      	mov	r1, r5
 80039e4:	f7fd f8b0 	bl	8000b48 <__aeabi_dcmpgt>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <main+0x712>
				//Paramos los motores
				status_motor(RESET);
 80039ee:	2080      	movs	r0, #128	; 0x80
 80039f0:	f001 fcd2 	bl	8005398 <status_motor>
				updateDirMotor(handler_Motor_Execute);
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <main+0x724>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe fe86 	bl	800270a <updateDirMotor>
 80039fe:	e4db      	b.n	80033b8 <main+0xc8>
			}
		}
		else{ __NOP(); }
 8003a00:	bf00      	nop
		if(commandComplete==1)
 8003a02:	e4d9      	b.n	80033b8 <main+0xc8>
 8003a04:	2000942e 	.word	0x2000942e
 8003a08:	20008fe8 	.word	0x20008fe8
 8003a0c:	20008f78 	.word	0x20008f78
 8003a10:	20009060 	.word	0x20009060
 8003a14:	20009428 	.word	0x20009428

08003a18 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 8003a1e:	4bae      	ldr	r3, [pc, #696]	; (8003cd8 <int_Hardware+0x2c0>)
 8003a20:	4aae      	ldr	r2, [pc, #696]	; (8003cdc <int_Hardware+0x2c4>)
 8003a22:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 8003a24:	4bac      	ldr	r3, [pc, #688]	; (8003cd8 <int_Hardware+0x2c0>)
 8003a26:	2208      	movs	r2, #8
 8003a28:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2301      	movs	r3, #1
 8003a34:	2200      	movs	r2, #0
 8003a36:	2101      	movs	r1, #1
 8003a38:	48a7      	ldr	r0, [pc, #668]	; (8003cd8 <int_Hardware+0x2c0>)
 8003a3a:	f003 f8a3 	bl	8006b84 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 8003a3e:	48a6      	ldr	r0, [pc, #664]	; (8003cd8 <int_Hardware+0x2c0>)
 8003a40:	f003 f8c2 	bl	8006bc8 <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 8003a44:	4ba6      	ldr	r3, [pc, #664]	; (8003ce0 <int_Hardware+0x2c8>)
 8003a46:	4aa7      	ldr	r2, [pc, #668]	; (8003ce4 <int_Hardware+0x2cc>)
 8003a48:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8003a4a:	4ba5      	ldr	r3, [pc, #660]	; (8003ce0 <int_Hardware+0x2c8>)
 8003a4c:	2205      	movs	r2, #5
 8003a4e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003a50:	2300      	movs	r3, #0
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	2300      	movs	r3, #0
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	2301      	movs	r3, #1
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	48a0      	ldr	r0, [pc, #640]	; (8003ce0 <int_Hardware+0x2c8>)
 8003a60:	f003 f890 	bl	8006b84 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 8003a64:	489e      	ldr	r0, [pc, #632]	; (8003ce0 <int_Hardware+0x2c8>)
 8003a66:	f003 f8af 	bl	8006bc8 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8003a6a:	4b9f      	ldr	r3, [pc, #636]	; (8003ce8 <int_Hardware+0x2d0>)
 8003a6c:	4a9d      	ldr	r2, [pc, #628]	; (8003ce4 <int_Hardware+0x2cc>)
 8003a6e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8003a70:	4b9d      	ldr	r3, [pc, #628]	; (8003ce8 <int_Hardware+0x2d0>)
 8003a72:	2209      	movs	r2, #9
 8003a74:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8003a76:	2307      	movs	r3, #7
 8003a78:	9301      	str	r3, [sp, #4]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	2301      	movs	r3, #1
 8003a80:	2200      	movs	r2, #0
 8003a82:	2102      	movs	r1, #2
 8003a84:	4898      	ldr	r0, [pc, #608]	; (8003ce8 <int_Hardware+0x2d0>)
 8003a86:	f003 f87d 	bl	8006b84 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8003a8a:	4897      	ldr	r0, [pc, #604]	; (8003ce8 <int_Hardware+0x2d0>)
 8003a8c:	f003 f89c 	bl	8006bc8 <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 8003a90:	4b96      	ldr	r3, [pc, #600]	; (8003cec <int_Hardware+0x2d4>)
 8003a92:	4a94      	ldr	r2, [pc, #592]	; (8003ce4 <int_Hardware+0x2cc>)
 8003a94:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8003a96:	4b95      	ldr	r3, [pc, #596]	; (8003cec <int_Hardware+0x2d4>)
 8003a98:	220a      	movs	r2, #10
 8003a9a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8003a9c:	2307      	movs	r3, #7
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	4890      	ldr	r0, [pc, #576]	; (8003cec <int_Hardware+0x2d4>)
 8003aac:	f003 f86a 	bl	8006b84 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 8003ab0:	488e      	ldr	r0, [pc, #568]	; (8003cec <int_Hardware+0x2d4>)
 8003ab2:	f003 f889 	bl	8006bc8 <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8003ab6:	4b8e      	ldr	r3, [pc, #568]	; (8003cf0 <int_Hardware+0x2d8>)
 8003ab8:	4a8a      	ldr	r2, [pc, #552]	; (8003ce4 <int_Hardware+0x2cc>)
 8003aba:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8003abc:	4b8c      	ldr	r3, [pc, #560]	; (8003cf0 <int_Hardware+0x2d8>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	2301      	movs	r3, #1
 8003acc:	2200      	movs	r2, #0
 8003ace:	2102      	movs	r1, #2
 8003ad0:	4887      	ldr	r0, [pc, #540]	; (8003cf0 <int_Hardware+0x2d8>)
 8003ad2:	f003 f857 	bl	8006b84 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8003ad6:	4886      	ldr	r0, [pc, #536]	; (8003cf0 <int_Hardware+0x2d8>)
 8003ad8:	f003 f876 	bl	8006bc8 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8003adc:	4b85      	ldr	r3, [pc, #532]	; (8003cf4 <int_Hardware+0x2dc>)
 8003ade:	4a7f      	ldr	r2, [pc, #508]	; (8003cdc <int_Hardware+0x2c4>)
 8003ae0:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 8003ae2:	4b84      	ldr	r3, [pc, #528]	; (8003cf4 <int_Hardware+0x2dc>)
 8003ae4:	220c      	movs	r2, #12
 8003ae6:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003ae8:	2300      	movs	r3, #0
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	2300      	movs	r3, #0
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	2301      	movs	r3, #1
 8003af2:	2200      	movs	r2, #0
 8003af4:	2101      	movs	r1, #1
 8003af6:	487f      	ldr	r0, [pc, #508]	; (8003cf4 <int_Hardware+0x2dc>)
 8003af8:	f003 f844 	bl	8006b84 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 8003afc:	487d      	ldr	r0, [pc, #500]	; (8003cf4 <int_Hardware+0x2dc>)
 8003afe:	f003 f863 	bl	8006bc8 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 8003b02:	4b7d      	ldr	r3, [pc, #500]	; (8003cf8 <int_Hardware+0x2e0>)
 8003b04:	4a75      	ldr	r2, [pc, #468]	; (8003cdc <int_Hardware+0x2c4>)
 8003b06:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8003b08:	4b7b      	ldr	r3, [pc, #492]	; (8003cf8 <int_Hardware+0x2e0>)
 8003b0a:	220a      	movs	r2, #10
 8003b0c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	2300      	movs	r3, #0
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2301      	movs	r3, #1
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	4876      	ldr	r0, [pc, #472]	; (8003cf8 <int_Hardware+0x2e0>)
 8003b1e:	f003 f831 	bl	8006b84 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 8003b22:	4875      	ldr	r0, [pc, #468]	; (8003cf8 <int_Hardware+0x2e0>)
 8003b24:	f003 f850 	bl	8006bc8 <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 8003b28:	4b74      	ldr	r3, [pc, #464]	; (8003cfc <int_Hardware+0x2e4>)
 8003b2a:	4a6e      	ldr	r2, [pc, #440]	; (8003ce4 <int_Hardware+0x2cc>)
 8003b2c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 8003b2e:	4b73      	ldr	r3, [pc, #460]	; (8003cfc <int_Hardware+0x2e4>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8003b34:	2302      	movs	r3, #2
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2102      	movs	r1, #2
 8003b42:	486e      	ldr	r0, [pc, #440]	; (8003cfc <int_Hardware+0x2e4>)
 8003b44:	f003 f81e 	bl	8006b84 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8003b48:	486c      	ldr	r0, [pc, #432]	; (8003cfc <int_Hardware+0x2e4>)
 8003b4a:	f003 f83d 	bl	8006bc8 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 8003b4e:	4b6c      	ldr	r3, [pc, #432]	; (8003d00 <int_Hardware+0x2e8>)
 8003b50:	4a6c      	ldr	r2, [pc, #432]	; (8003d04 <int_Hardware+0x2ec>)
 8003b52:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8003b54:	4b6a      	ldr	r3, [pc, #424]	; (8003d00 <int_Hardware+0x2e8>)
 8003b56:	2202      	movs	r2, #2
 8003b58:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2301      	movs	r3, #1
 8003b64:	2200      	movs	r2, #0
 8003b66:	2101      	movs	r1, #1
 8003b68:	4865      	ldr	r0, [pc, #404]	; (8003d00 <int_Hardware+0x2e8>)
 8003b6a:	f003 f80b 	bl	8006b84 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 8003b6e:	4864      	ldr	r0, [pc, #400]	; (8003d00 <int_Hardware+0x2e8>)
 8003b70:	f003 f82a 	bl	8006bc8 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8003b74:	4b64      	ldr	r3, [pc, #400]	; (8003d08 <int_Hardware+0x2f0>)
 8003b76:	4a59      	ldr	r2, [pc, #356]	; (8003cdc <int_Hardware+0x2c4>)
 8003b78:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8003b7a:	4b63      	ldr	r3, [pc, #396]	; (8003d08 <int_Hardware+0x2f0>)
 8003b7c:	220b      	movs	r2, #11
 8003b7e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003b80:	2300      	movs	r3, #0
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	2300      	movs	r3, #0
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	2301      	movs	r3, #1
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	485e      	ldr	r0, [pc, #376]	; (8003d08 <int_Hardware+0x2f0>)
 8003b90:	f002 fff8 	bl	8006b84 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8003b94:	485c      	ldr	r0, [pc, #368]	; (8003d08 <int_Hardware+0x2f0>)
 8003b96:	f003 f817 	bl	8006bc8 <GPIO_Config>

	//---------------------------I2C--------------------------------
	//---------------PIN: PB8----------------
	//------------AF4: I2C1_SCL----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SCL_MPU6050.pGPIOx = GPIOB;
 8003b9a:	4b5c      	ldr	r3, [pc, #368]	; (8003d0c <int_Hardware+0x2f4>)
 8003b9c:	4a5c      	ldr	r2, [pc, #368]	; (8003d10 <int_Hardware+0x2f8>)
 8003b9e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SCL_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 8003ba0:	4b5a      	ldr	r3, [pc, #360]	; (8003d0c <int_Hardware+0x2f4>)
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SCL_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8003ba6:	2304      	movs	r3, #4
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	2300      	movs	r3, #0
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2302      	movs	r3, #2
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	4855      	ldr	r0, [pc, #340]	; (8003d0c <int_Hardware+0x2f4>)
 8003bb6:	f002 ffe5 	bl	8006b84 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SCL_MPU6050);
 8003bba:	4854      	ldr	r0, [pc, #336]	; (8003d0c <int_Hardware+0x2f4>)
 8003bbc:	f003 f804 	bl	8006bc8 <GPIO_Config>

	//---------------PIN: PB9----------------
	//------------AF4: I2C1_SDA----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SDA_MPU6050.pGPIOx = GPIOB;
 8003bc0:	4b54      	ldr	r3, [pc, #336]	; (8003d14 <int_Hardware+0x2fc>)
 8003bc2:	4a53      	ldr	r2, [pc, #332]	; (8003d10 <int_Hardware+0x2f8>)
 8003bc4:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SDA_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8003bc6:	4b53      	ldr	r3, [pc, #332]	; (8003d14 <int_Hardware+0x2fc>)
 8003bc8:	2209      	movs	r2, #9
 8003bca:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SDA_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8003bcc:	2304      	movs	r3, #4
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	2102      	movs	r1, #2
 8003bda:	484e      	ldr	r0, [pc, #312]	; (8003d14 <int_Hardware+0x2fc>)
 8003bdc:	f002 ffd2 	bl	8006b84 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SDA_MPU6050);
 8003be0:	484c      	ldr	r0, [pc, #304]	; (8003d14 <int_Hardware+0x2fc>)
 8003be2:	f002 fff1 	bl	8006bc8 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART1;
 8003be6:	4b4c      	ldr	r3, [pc, #304]	; (8003d18 <int_Hardware+0x300>)
 8003be8:	4a4c      	ldr	r2, [pc, #304]	; (8003d1c <int_Hardware+0x304>)
 8003bea:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8003bec:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <int_Hardware+0x300>)
 8003bee:	2202      	movs	r2, #2
 8003bf0:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8003bf2:	4b49      	ldr	r3, [pc, #292]	; (8003d18 <int_Hardware+0x300>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8003bf8:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <int_Hardware+0x300>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 8003bfe:	4b46      	ldr	r3, [pc, #280]	; (8003d18 <int_Hardware+0x300>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8003c04:	4b44      	ldr	r3, [pc, #272]	; (8003d18 <int_Hardware+0x300>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 8003c0a:	4b43      	ldr	r3, [pc, #268]	; (8003d18 <int_Hardware+0x300>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 8003c10:	4841      	ldr	r0, [pc, #260]	; (8003d18 <int_Hardware+0x300>)
 8003c12:	f004 f833 	bl	8007c7c <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8003c16:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <int_Hardware+0x308>)
 8003c18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c1c:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8003c1e:	4b40      	ldr	r3, [pc, #256]	; (8003d20 <int_Hardware+0x308>)
 8003c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c24:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8003c26:	4b3e      	ldr	r3, [pc, #248]	; (8003d20 <int_Hardware+0x308>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8003c2c:	4b3c      	ldr	r3, [pc, #240]	; (8003d20 <int_Hardware+0x308>)
 8003c2e:	22fa      	movs	r2, #250	; 0xfa
 8003c30:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8003c32:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <int_Hardware+0x308>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 8003c38:	4839      	ldr	r0, [pc, #228]	; (8003d20 <int_Hardware+0x308>)
 8003c3a:	f001 fd7f 	bl	800573c <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Sampling.ptrTIMx = TIM3;
 8003c3e:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <int_Hardware+0x30c>)
 8003c40:	4a39      	ldr	r2, [pc, #228]	; (8003d28 <int_Hardware+0x310>)
 8003c42:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Sampling.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8003c44:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <int_Hardware+0x30c>)
 8003c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c4a:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Sampling.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8003c4c:	4b35      	ldr	r3, [pc, #212]	; (8003d24 <int_Hardware+0x30c>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Sampling.TIMx_Config.TIMX_period = 16;   //Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <int_Hardware+0x30c>)
 8003c54:	2210      	movs	r2, #16
 8003c56:	605a      	str	r2, [r3, #4]
	handler_TIMER_Sampling.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8003c58:	4b32      	ldr	r3, [pc, #200]	; (8003d24 <int_Hardware+0x30c>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Sampling);
 8003c5e:	4831      	ldr	r0, [pc, #196]	; (8003d24 <int_Hardware+0x30c>)
 8003c60:	f001 fd6c 	bl	800573c <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 8003c64:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <int_Hardware+0x314>)
 8003c66:	4a32      	ldr	r2, [pc, #200]	; (8003d30 <int_Hardware+0x318>)
 8003c68:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8003c6a:	4b30      	ldr	r3, [pc, #192]	; (8003d2c <int_Hardware+0x314>)
 8003c6c:	220a      	movs	r2, #10
 8003c6e:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8003c70:	4b2e      	ldr	r3, [pc, #184]	; (8003d2c <int_Hardware+0x314>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8003c76:	4b2d      	ldr	r3, [pc, #180]	; (8003d2c <int_Hardware+0x314>)
 8003c78:	2264      	movs	r2, #100	; 0x64
 8003c7a:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8003c7c:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <int_Hardware+0x314>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 8003c82:	482a      	ldr	r0, [pc, #168]	; (8003d2c <int_Hardware+0x314>)
 8003c84:	f001 fd5a 	bl	800573c <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 8003c88:	4b2a      	ldr	r3, [pc, #168]	; (8003d34 <int_Hardware+0x31c>)
 8003c8a:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <int_Hardware+0x2c4>)
 8003c8c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8003c8e:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <int_Hardware+0x31c>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8003c94:	4b28      	ldr	r3, [pc, #160]	; (8003d38 <int_Hardware+0x320>)
 8003c96:	4a27      	ldr	r2, [pc, #156]	; (8003d34 <int_Hardware+0x31c>)
 8003c98:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8003c9a:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <int_Hardware+0x320>)
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 8003ca0:	4825      	ldr	r0, [pc, #148]	; (8003d38 <int_Hardware+0x320>)
 8003ca2:	f001 fecf 	bl	8005a44 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8003ca6:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <int_Hardware+0x324>)
 8003ca8:	4a0c      	ldr	r2, [pc, #48]	; (8003cdc <int_Hardware+0x2c4>)
 8003caa:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8003cac:	4b23      	ldr	r3, [pc, #140]	; (8003d3c <int_Hardware+0x324>)
 8003cae:	2203      	movs	r2, #3
 8003cb0:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8003cb2:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <int_Hardware+0x328>)
 8003cb4:	4a21      	ldr	r2, [pc, #132]	; (8003d3c <int_Hardware+0x324>)
 8003cb6:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8003cb8:	4b21      	ldr	r3, [pc, #132]	; (8003d40 <int_Hardware+0x328>)
 8003cba:	2202      	movs	r2, #2
 8003cbc:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 8003cbe:	4820      	ldr	r0, [pc, #128]	; (8003d40 <int_Hardware+0x328>)
 8003cc0:	f001 fec0 	bl	8005a44 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8003cc4:	4b1f      	ldr	r3, [pc, #124]	; (8003d44 <int_Hardware+0x32c>)
 8003cc6:	4a1a      	ldr	r2, [pc, #104]	; (8003d30 <int_Hardware+0x318>)
 8003cc8:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 8003cca:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <int_Hardware+0x32c>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8003cd0:	4b1c      	ldr	r3, [pc, #112]	; (8003d44 <int_Hardware+0x32c>)
 8003cd2:	220a      	movs	r2, #10
 8003cd4:	805a      	strh	r2, [r3, #2]
 8003cd6:	e037      	b.n	8003d48 <int_Hardware+0x330>
 8003cd8:	20000228 	.word	0x20000228
 8003cdc:	40020800 	.word	0x40020800
 8003ce0:	2000020c 	.word	0x2000020c
 8003ce4:	40020000 	.word	0x40020000
 8003ce8:	20000284 	.word	0x20000284
 8003cec:	20000290 	.word	0x20000290
 8003cf0:	200002e8 	.word	0x200002e8
 8003cf4:	200002f4 	.word	0x200002f4
 8003cf8:	20000300 	.word	0x20000300
 8003cfc:	2000035c 	.word	0x2000035c
 8003d00:	20000368 	.word	0x20000368
 8003d04:	40020c00 	.word	0x40020c00
 8003d08:	20000374 	.word	0x20000374
 8003d0c:	2000025c 	.word	0x2000025c
 8003d10:	40020400 	.word	0x40020400
 8003d14:	20000268 	.word	0x20000268
 8003d18:	2000029c 	.word	0x2000029c
 8003d1c:	40011000 	.word	0x40011000
 8003d20:	20000218 	.word	0x20000218
 8003d24:	200003e0 	.word	0x200003e0
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	200003d0 	.word	0x200003d0
 8003d30:	40000c00 	.word	0x40000c00
 8003d34:	20000234 	.word	0x20000234
 8003d38:	20000240 	.word	0x20000240
 8003d3c:	20000248 	.word	0x20000248
 8003d40:	20000254 	.word	0x20000254
 8003d44:	2000030c 	.word	0x2000030c
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <int_Hardware+0x388>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 8003d4e:	4814      	ldr	r0, [pc, #80]	; (8003da0 <int_Hardware+0x388>)
 8003d50:	f003 fbdc 	bl	800750c <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8003d54:	2101      	movs	r1, #1
 8003d56:	4812      	ldr	r0, [pc, #72]	; (8003da0 <int_Hardware+0x388>)
 8003d58:	f003 fd38 	bl	80077cc <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 8003d5c:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <int_Hardware+0x38c>)
 8003d5e:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <int_Hardware+0x390>)
 8003d60:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <int_Hardware+0x38c>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8003d68:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <int_Hardware+0x38c>)
 8003d6a:	220a      	movs	r2, #10
 8003d6c:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <int_Hardware+0x38c>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8003d74:	480b      	ldr	r0, [pc, #44]	; (8003da4 <int_Hardware+0x38c>)
 8003d76:	f003 fbc9 	bl	800750c <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	4809      	ldr	r0, [pc, #36]	; (8003da4 <int_Hardware+0x38c>)
 8003d7e:	f003 fd25 	bl	80077cc <statusInOutPWM>

	//-------------------Inicio de Configuracion I2Cx----------------------

	//---------------I2C1----------------
	//Definimos el I2Cx a usar
	handler_I2C_MPU6050.prtI2Cx = I2C1;
 8003d82:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <int_Hardware+0x394>)
 8003d84:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <int_Hardware+0x398>)
 8003d86:	601a      	str	r2, [r3, #0]
	//Definimos la configuracion para el I2C
	handler_I2C_MPU6050.modeI2C = I2C_MODE_FM;               //I2C_MODE_x  x->SM,FM
 8003d88:	4b08      	ldr	r3, [pc, #32]	; (8003dac <int_Hardware+0x394>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	715a      	strb	r2, [r3, #5]
	handler_I2C_MPU6050.slaveAddress = ADDRESS_DOWN;         //Direccion del Sclave
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <int_Hardware+0x394>)
 8003d90:	2268      	movs	r2, #104	; 0x68
 8003d92:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	i2c_Config(&handler_I2C_MPU6050);
 8003d94:	4805      	ldr	r0, [pc, #20]	; (8003dac <int_Hardware+0x394>)
 8003d96:	f003 f883 	bl	8006ea0 <i2c_Config>

	//---------------------Fin de Configuracion I2Cx----------------------

}
 8003d9a:	bf00      	nop
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	2000030c 	.word	0x2000030c
 8003da4:	20000380 	.word	0x20000380
 8003da8:	40000c00 	.word	0x40000c00
 8003dac:	20000274 	.word	0x20000274
 8003db0:	40005400 	.word	0x40005400

08003db4 <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 8003db8:	2000      	movs	r0, #0
 8003dba:	f003 fb2b 	bl	8007414 <configMCO2>
	configMCO2PRE(4);
 8003dbe:	2004      	movs	r0, #4
 8003dc0:	f003 fb44 	bl	800744c <configMCO2PRE>
}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <int_MPU>:
//------------------------------Fin configuracion MCO1------------------------------------------

//------------------------------Inicio configuracion del MPU------------------------------------------
void int_MPU(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
	//Definimos la escala de las diferentes magnitudes fisicas
	handler_MPUAccel_MPU6050.fullScaleACCEL = ACCEL_2G;
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <int_MPU+0x20>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_MPU6050.fullScaleGYRO = GYRO_250;
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <int_MPU+0x20>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	705a      	strb	r2, [r3, #1]
	//Definimos el handler correspondiente al I2C
	handler_MPUAccel_MPU6050.ptrI2Chandler = &handler_I2C_MPU6050;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <int_MPU+0x20>)
 8003dda:	4a04      	ldr	r2, [pc, #16]	; (8003dec <int_MPU+0x24>)
 8003ddc:	605a      	str	r2, [r3, #4]
	//Cargamos configuracion
	configMPUAccel(&handler_MPUAccel_MPU6050);
 8003dde:	4802      	ldr	r0, [pc, #8]	; (8003de8 <int_MPU+0x20>)
 8003de0:	f7fe f9ae 	bl	8002140 <configMPUAccel>

}
 8003de4:	bf00      	nop
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	2000027c 	.word	0x2000027c
 8003dec:	20000274 	.word	0x20000274

08003df0 <int_Config_Motor>:



//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  28;
 8003df4:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003df6:	4a3d      	ldr	r2, [pc, #244]	; (8003eec <int_Config_Motor+0xfc>)
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_R.configMotor.frecuency = &value_period;
 8003dfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003dfc:	4a3c      	ldr	r2, [pc, #240]	; (8003ef0 <int_Config_Motor+0x100>)
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_R.configMotor.dir = SET;
 8003e00:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 8003e08:	4b37      	ldr	r3, [pc, #220]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003e0a:	4a3a      	ldr	r2, [pc, #232]	; (8003ef4 <int_Config_Motor+0x104>)
 8003e0c:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 8003e0e:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003e10:	4a39      	ldr	r2, [pc, #228]	; (8003ef8 <int_Config_Motor+0x108>)
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 8003e14:	4b34      	ldr	r3, [pc, #208]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003e16:	4a39      	ldr	r2, [pc, #228]	; (8003efc <int_Config_Motor+0x10c>)
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 8003e1a:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	4a30      	ldr	r2, [pc, #192]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003e28:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 8003e2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	609a      	str	r2, [r3, #8]
 8003e32:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	4a2c      	ldr	r2, [pc, #176]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003e38:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_R.parametersMotor.parametersPID.kp = 250;
 8003e3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003e3c:	4a30      	ldr	r2, [pc, #192]	; (8003f00 <int_Config_Motor+0x110>)
 8003e3e:	611a      	str	r2, [r3, #16]
	handler_Motor_R.parametersMotor.parametersPID.ki = 0;
 8003e40:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	615a      	str	r2, [r3, #20]
	handler_Motor_R.parametersMotor.parametersPID.kd = 100;
 8003e48:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <int_Config_Motor+0xf8>)
 8003e4a:	4a2e      	ldr	r2, [pc, #184]	; (8003f04 <int_Config_Motor+0x114>)
 8003e4c:	619a      	str	r2, [r3, #24]

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  28;
 8003e4e:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <int_Config_Motor+0x118>)
 8003e50:	4a26      	ldr	r2, [pc, #152]	; (8003eec <int_Config_Motor+0xfc>)
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_L.configMotor.frecuency = &value_period;
 8003e54:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <int_Config_Motor+0x118>)
 8003e56:	4a26      	ldr	r2, [pc, #152]	; (8003ef0 <int_Config_Motor+0x100>)
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_L.configMotor.dir = SET;
 8003e5a:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <int_Config_Motor+0x118>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 8003e62:	4b29      	ldr	r3, [pc, #164]	; (8003f08 <int_Config_Motor+0x118>)
 8003e64:	4a29      	ldr	r2, [pc, #164]	; (8003f0c <int_Config_Motor+0x11c>)
 8003e66:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 8003e68:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <int_Config_Motor+0x118>)
 8003e6a:	4a29      	ldr	r2, [pc, #164]	; (8003f10 <int_Config_Motor+0x120>)
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 8003e6e:	4b26      	ldr	r3, [pc, #152]	; (8003f08 <int_Config_Motor+0x118>)
 8003e70:	4a28      	ldr	r2, [pc, #160]	; (8003f14 <int_Config_Motor+0x124>)
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 8003e74:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <int_Config_Motor+0x118>)
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	60da      	str	r2, [r3, #12]
 8003e7c:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <int_Config_Motor+0x118>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a21      	ldr	r2, [pc, #132]	; (8003f08 <int_Config_Motor+0x118>)
 8003e82:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 8003e84:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <int_Config_Motor+0x118>)
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <int_Config_Motor+0x118>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <int_Config_Motor+0x118>)
 8003e92:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	handler_Motor_L.parametersMotor.parametersPID.kp = 250;
 8003e94:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <int_Config_Motor+0x118>)
 8003e96:	4a1a      	ldr	r2, [pc, #104]	; (8003f00 <int_Config_Motor+0x110>)
 8003e98:	611a      	str	r2, [r3, #16]
	handler_Motor_L.parametersMotor.parametersPID.ki = 0;
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <int_Config_Motor+0x118>)
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	615a      	str	r2, [r3, #20]
	handler_Motor_L.parametersMotor.parametersPID.kd = 100;
 8003ea2:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <int_Config_Motor+0x118>)
 8003ea4:	4a17      	ldr	r2, [pc, #92]	; (8003f04 <int_Config_Motor+0x114>)
 8003ea6:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distace.e = parameter_PID_distace.e_prev = 0;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <int_Config_Motor+0x128>)
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	60da      	str	r2, [r3, #12]
 8003eb0:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <int_Config_Motor+0x128>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <int_Config_Motor+0x128>)
 8003eb6:	6053      	str	r3, [r2, #4]
	parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 8003eb8:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <int_Config_Motor+0x128>)
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <int_Config_Motor+0x128>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <int_Config_Motor+0x128>)
 8003ec6:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	parameter_PID_distace.kp = 1.0;
 8003ec8:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <int_Config_Motor+0x128>)
 8003eca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ece:	611a      	str	r2, [r3, #16]
	parameter_PID_distace.ki = 0.1;
 8003ed0:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <int_Config_Motor+0x128>)
 8003ed2:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <int_Config_Motor+0x12c>)
 8003ed4:	615a      	str	r2, [r3, #20]
	parameter_PID_distace.kd = 0.8;
 8003ed6:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <int_Config_Motor+0x128>)
 8003ed8:	4a11      	ldr	r2, [pc, #68]	; (8003f20 <int_Config_Motor+0x130>)
 8003eda:	619a      	str	r2, [r3, #24]
};
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	20000318 	.word	0x20000318
 8003eec:	41e00000 	.word	0x41e00000
 8003ef0:	20000012 	.word	0x20000012
 8003ef4:	20000300 	.word	0x20000300
 8003ef8:	200002f4 	.word	0x200002f4
 8003efc:	2000030c 	.word	0x2000030c
 8003f00:	437a0000 	.word	0x437a0000
 8003f04:	42c80000 	.word	0x42c80000
 8003f08:	2000038c 	.word	0x2000038c
 8003f0c:	20000374 	.word	0x20000374
 8003f10:	20000368 	.word	0x20000368
 8003f14:	20000380 	.word	0x20000380
 8003f18:	20008f58 	.word	0x20008f58
 8003f1c:	3dcccccd 	.word	0x3dcccccd
 8003f20:	3f4ccccd 	.word	0x3f4ccccd

08003f24 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 8003f28:	4802      	ldr	r0, [pc, #8]	; (8003f34 <BasicTimer2_Callback+0x10>)
 8003f2a:	f002 ffa2 	bl	8006e72 <GPIOxTooglePin>
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	2000020c 	.word	0x2000020c

08003f38 <BasicUSART1_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART1_Callback(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 8003f3c:	f004 f980 	bl	8008240 <getRxData>
 8003f40:	4603      	mov	r3, r0
 8003f42:	461a      	mov	r2, r3
 8003f44:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <BasicUSART1_Callback+0x2c>)
 8003f46:	701a      	strb	r2, [r3, #0]
	//Funciones que almacena los caracteres del comando recibido
	if(flag_A_Star){ recepcion_Sring_Parameter_Grid_Map(charRead); }
 8003f48:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <BasicUSART1_Callback+0x30>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <BasicUSART1_Callback+0x24>
 8003f50:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <BasicUSART1_Callback+0x2c>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fbd1 	bl	80046fc <recepcion_Sring_Parameter_Grid_Map>
	else{ recepcionCommand(); }
}
 8003f5a:	e001      	b.n	8003f60 <BasicUSART1_Callback+0x28>
	else{ recepcionCommand(); }
 8003f5c:	f000 fa02 	bl	8004364 <recepcionCommand>
}
 8003f60:	bf00      	nop
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20000010 	.word	0x20000010
 8003f68:	20008f51 	.word	0x20008f51
 8003f6c:	00000000 	.word	0x00000000

08003f70 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 8003f70:	b5b0      	push	{r4, r5, r7, lr}
 8003f72:	ed2d 8b02 	vpush	{d8}
 8003f76:	af00      	add	r7, sp, #0
	//----------------Accion a Realizar con el tiempo del TIMER--------------------
	//Verificamos el modo
	if(flag_mode == 1)
 8003f78:	4b77      	ldr	r3, [pc, #476]	; (8004158 <BasicTimer3_Callback+0x1e8>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	f040 810d 	bne.w	800419c <BasicTimer3_Callback+0x22c>
	{
		//Calculo del angulo
		parameter_Posicion_Robot.grad_relativo = getAngle(&handler_MPUAccel_MPU6050, &sample_Gyro, parameter_Posicion_Robot.grad_relativo, READ_GYRO_Z, gyro_offset);
 8003f82:	4b76      	ldr	r3, [pc, #472]	; (800415c <BasicTimer3_Callback+0x1ec>)
 8003f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f7fc fe44 	bl	8000c18 <__aeabi_d2f>
 8003f90:	4601      	mov	r1, r0
 8003f92:	4b73      	ldr	r3, [pc, #460]	; (8004160 <BasicTimer3_Callback+0x1f0>)
 8003f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f98:	2205      	movs	r2, #5
 8003f9a:	ee00 1a10 	vmov	s0, r1
 8003f9e:	4971      	ldr	r1, [pc, #452]	; (8004164 <BasicTimer3_Callback+0x1f4>)
 8003fa0:	4871      	ldr	r0, [pc, #452]	; (8004168 <BasicTimer3_Callback+0x1f8>)
 8003fa2:	f7fe fb55 	bl	8002650 <getAngle>
 8003fa6:	ee10 3a10 	vmov	r3, s0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fc fae4 	bl	8000578 <__aeabi_f2d>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4969      	ldr	r1, [pc, #420]	; (800415c <BasicTimer3_Callback+0x1ec>)
 8003fb6:	e9c1 2300 	strd	r2, r3, [r1]
		//Acumulamos los angulos
		sum_ang += parameter_Posicion_Robot.grad_relativo;
 8003fba:	4b6c      	ldr	r3, [pc, #432]	; (800416c <BasicTimer3_Callback+0x1fc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fc fada 	bl	8000578 <__aeabi_f2d>
 8003fc4:	4b65      	ldr	r3, [pc, #404]	; (800415c <BasicTimer3_Callback+0x1ec>)
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	f7fc f977 	bl	80002bc <__adddf3>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f7fc fe1f 	bl	8000c18 <__aeabi_d2f>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4a63      	ldr	r2, [pc, #396]	; (800416c <BasicTimer3_Callback+0x1fc>)
 8003fde:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += sample_Gyro.delta_timer;
 8003fe0:	4b60      	ldr	r3, [pc, #384]	; (8004164 <BasicTimer3_Callback+0x1f4>)
 8003fe2:	891a      	ldrh	r2, [r3, #8]
 8003fe4:	4b62      	ldr	r3, [pc, #392]	; (8004170 <BasicTimer3_Callback+0x200>)
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	4413      	add	r3, r2
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	4b60      	ldr	r3, [pc, #384]	; (8004170 <BasicTimer3_Callback+0x200>)
 8003fee:	801a      	strh	r2, [r3, #0]

		//----------------Accion a realizar con un tiempo especifico--------------------
		if(counting_action>=timeAction_TIMER_Sampling)
 8003ff0:	4b60      	ldr	r3, [pc, #384]	; (8004174 <BasicTimer3_Callback+0x204>)
 8003ff2:	881a      	ldrh	r2, [r3, #0]
 8003ff4:	4b60      	ldr	r3, [pc, #384]	; (8004178 <BasicTimer3_Callback+0x208>)
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	f0c0 80a2 	bcc.w	8004142 <BasicTimer3_Callback+0x1d2>
		{
			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8003ffe:	4b5c      	ldr	r3, [pc, #368]	; (8004170 <BasicTimer3_Callback+0x200>)
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	4b5d      	ldr	r3, [pc, #372]	; (800417c <BasicTimer3_Callback+0x20c>)
 8004006:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemis como el angulo relativo
			prom_ang = sum_ang/counting_action;
 8004008:	4b58      	ldr	r3, [pc, #352]	; (800416c <BasicTimer3_Callback+0x1fc>)
 800400a:	edd3 6a00 	vldr	s13, [r3]
 800400e:	4b59      	ldr	r3, [pc, #356]	; (8004174 <BasicTimer3_Callback+0x204>)
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800401a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800401e:	4b58      	ldr	r3, [pc, #352]	; (8004180 <BasicTimer3_Callback+0x210>)
 8004020:	edc3 7a00 	vstr	s15, [r3]
			parameter_Posicion_Robot.phi_relativo = (prom_ang*M_PI)/180;          //[rad]
 8004024:	4b56      	ldr	r3, [pc, #344]	; (8004180 <BasicTimer3_Callback+0x210>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f7fc faa5 	bl	8000578 <__aeabi_f2d>
 800402e:	a348      	add	r3, pc, #288	; (adr r3, 8004150 <BasicTimer3_Callback+0x1e0>)
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f7fc faf8 	bl	8000628 <__aeabi_dmul>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4610      	mov	r0, r2
 800403e:	4619      	mov	r1, r3
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	4b4f      	ldr	r3, [pc, #316]	; (8004184 <BasicTimer3_Callback+0x214>)
 8004046:	f7fc fc19 	bl	800087c <__aeabi_ddiv>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4943      	ldr	r1, [pc, #268]	; (800415c <BasicTimer3_Callback+0x1ec>)
 8004050:	e9c1 2302 	strd	r2, r3, [r1, #8]
			parameter_Posicion_Robot.phi_relativo = atan2(sin(parameter_Posicion_Robot.phi_relativo),cos(parameter_Posicion_Robot.phi_relativo));
 8004054:	4b41      	ldr	r3, [pc, #260]	; (800415c <BasicTimer3_Callback+0x1ec>)
 8004056:	ed93 7b02 	vldr	d7, [r3, #8]
 800405a:	eeb0 0a47 	vmov.f32	s0, s14
 800405e:	eef0 0a67 	vmov.f32	s1, s15
 8004062:	f009 fc4d 	bl	800d900 <sin>
 8004066:	eeb0 8a40 	vmov.f32	s16, s0
 800406a:	eef0 8a60 	vmov.f32	s17, s1
 800406e:	4b3b      	ldr	r3, [pc, #236]	; (800415c <BasicTimer3_Callback+0x1ec>)
 8004070:	ed93 7b02 	vldr	d7, [r3, #8]
 8004074:	eeb0 0a47 	vmov.f32	s0, s14
 8004078:	eef0 0a67 	vmov.f32	s1, s15
 800407c:	f009 fba4 	bl	800d7c8 <cos>
 8004080:	eeb0 7a40 	vmov.f32	s14, s0
 8004084:	eef0 7a60 	vmov.f32	s15, s1
 8004088:	eeb0 1a47 	vmov.f32	s2, s14
 800408c:	eef0 1a67 	vmov.f32	s3, s15
 8004090:	eeb0 0a48 	vmov.f32	s0, s16
 8004094:	eef0 0a68 	vmov.f32	s1, s17
 8004098:	f009 fcbe 	bl	800da18 <atan2>
 800409c:	eeb0 7a40 	vmov.f32	s14, s0
 80040a0:	eef0 7a60 	vmov.f32	s15, s1
 80040a4:	4b2d      	ldr	r3, [pc, #180]	; (800415c <BasicTimer3_Callback+0x1ec>)
 80040a6:	ed83 7b02 	vstr	d7, [r3, #8]
			//Calculamos la velocidad
			handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 80040aa:	4b37      	ldr	r3, [pc, #220]	; (8004188 <BasicTimer3_Callback+0x218>)
 80040ac:	8b9b      	ldrh	r3, [r3, #28]
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040b6:	4b35      	ldr	r3, [pc, #212]	; (800418c <BasicTimer3_Callback+0x21c>)
 80040b8:	edd3 7a00 	vldr	s15, [r3]
 80040bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c0:	4b31      	ldr	r3, [pc, #196]	; (8004188 <BasicTimer3_Callback+0x218>)
 80040c2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 80040c6:	4b32      	ldr	r3, [pc, #200]	; (8004190 <BasicTimer3_Callback+0x220>)
 80040c8:	8b9b      	ldrh	r3, [r3, #28]
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040d2:	4b30      	ldr	r3, [pc, #192]	; (8004194 <BasicTimer3_Callback+0x224>)
 80040d4:	edd3 7a00 	vldr	s15, [r3]
 80040d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040dc:	4b2c      	ldr	r3, [pc, #176]	; (8004190 <BasicTimer3_Callback+0x220>)
 80040de:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/time_accion;      //[m/s]
 80040e2:	4b29      	ldr	r3, [pc, #164]	; (8004188 <BasicTimer3_Callback+0x218>)
 80040e4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80040e8:	4b24      	ldr	r3, [pc, #144]	; (800417c <BasicTimer3_Callback+0x20c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	ee07 3a90 	vmov	s15, r3
 80040f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040f8:	4b23      	ldr	r3, [pc, #140]	; (8004188 <BasicTimer3_Callback+0x218>)
 80040fa:	edc3 7a08 	vstr	s15, [r3, #32]
			handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/time_accion;      //[m/s]
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <BasicTimer3_Callback+0x220>)
 8004100:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <BasicTimer3_Callback+0x20c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	ee07 3a90 	vmov	s15, r3
 800410c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004114:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <BasicTimer3_Callback+0x220>)
 8004116:	edc3 7a08 	vstr	s15, [r3, #32]
			//Reiniciamos el numero de conteos
			handler_Motor_R.parametersMotor.count = 0;
 800411a:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <BasicTimer3_Callback+0x220>)
 800411c:	2200      	movs	r2, #0
 800411e:	839a      	strh	r2, [r3, #28]
			handler_Motor_L.parametersMotor.count = 0;
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <BasicTimer3_Callback+0x218>)
 8004122:	2200      	movs	r2, #0
 8004124:	839a      	strh	r2, [r3, #28]
			//Reiniciamos variable
			sum_ang = 0;
 8004126:	4b11      	ldr	r3, [pc, #68]	; (800416c <BasicTimer3_Callback+0x1fc>)
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
			//Reiniciamos tiempo
			time_accumulated = 0;
 800412e:	4b10      	ldr	r3, [pc, #64]	; (8004170 <BasicTimer3_Callback+0x200>)
 8004130:	2200      	movs	r2, #0
 8004132:	801a      	strh	r2, [r3, #0]
			//Reiniciamos el contador de accion
			counting_action = 0;
 8004134:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <BasicTimer3_Callback+0x204>)
 8004136:	2200      	movs	r2, #0
 8004138:	801a      	strh	r2, [r3, #0]
			//Levantamos bandera
			flag_action = 1;
 800413a:	4b17      	ldr	r3, [pc, #92]	; (8004198 <BasicTimer3_Callback+0x228>)
 800413c:	2201      	movs	r2, #1
 800413e:	701a      	strb	r2, [r3, #0]
			counting_action = 0;
		}
		else{counting_action++;}
	}
	else{  __NOP(); }
}
 8004140:	e0ca      	b.n	80042d8 <BasicTimer3_Callback+0x368>
		else{ counting_action++; }
 8004142:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <BasicTimer3_Callback+0x204>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	3301      	adds	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <BasicTimer3_Callback+0x204>)
 800414c:	801a      	strh	r2, [r3, #0]
}
 800414e:	e0c3      	b.n	80042d8 <BasicTimer3_Callback+0x368>
 8004150:	54442d18 	.word	0x54442d18
 8004154:	400921fb 	.word	0x400921fb
 8004158:	2000942e 	.word	0x2000942e
 800415c:	20008fe8 	.word	0x20008fe8
 8004160:	20008f54 	.word	0x20008f54
 8004164:	20009030 	.word	0x20009030
 8004168:	2000027c 	.word	0x2000027c
 800416c:	20009048 	.word	0x20009048
 8004170:	20009440 	.word	0x20009440
 8004174:	20009442 	.word	0x20009442
 8004178:	20000014 	.word	0x20000014
 800417c:	2000943c 	.word	0x2000943c
 8004180:	2000904c 	.word	0x2000904c
 8004184:	40668000 	.word	0x40668000
 8004188:	2000038c 	.word	0x2000038c
 800418c:	20009050 	.word	0x20009050
 8004190:	20000318 	.word	0x20000318
 8004194:	20009054 	.word	0x20009054
 8004198:	2000942d 	.word	0x2000942d
	else if(flag_mode==2)
 800419c:	4b54      	ldr	r3, [pc, #336]	; (80042f0 <BasicTimer3_Callback+0x380>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	f040 8098 	bne.w	80042d6 <BasicTimer3_Callback+0x366>
		if(counting_action>=timeAction_TIMER_Sampling)
 80041a6:	4b53      	ldr	r3, [pc, #332]	; (80042f4 <BasicTimer3_Callback+0x384>)
 80041a8:	881a      	ldrh	r2, [r3, #0]
 80041aa:	4b53      	ldr	r3, [pc, #332]	; (80042f8 <BasicTimer3_Callback+0x388>)
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	f0c0 808a 	bcc.w	80042c8 <BasicTimer3_Callback+0x358>
			handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 80041b4:	4b51      	ldr	r3, [pc, #324]	; (80042fc <BasicTimer3_Callback+0x38c>)
 80041b6:	8b9b      	ldrh	r3, [r3, #28]
 80041b8:	ee07 3a90 	vmov	s15, r3
 80041bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041c0:	4b4f      	ldr	r3, [pc, #316]	; (8004300 <BasicTimer3_Callback+0x390>)
 80041c2:	edd3 7a00 	vldr	s15, [r3]
 80041c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ca:	4b4c      	ldr	r3, [pc, #304]	; (80042fc <BasicTimer3_Callback+0x38c>)
 80041cc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 80041d0:	4b4c      	ldr	r3, [pc, #304]	; (8004304 <BasicTimer3_Callback+0x394>)
 80041d2:	8b9b      	ldrh	r3, [r3, #28]
 80041d4:	ee07 3a90 	vmov	s15, r3
 80041d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041dc:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <BasicTimer3_Callback+0x398>)
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e6:	4b47      	ldr	r3, [pc, #284]	; (8004304 <BasicTimer3_Callback+0x394>)
 80041e8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			parameter_Posicion_Robot.grad_relativo += (parameter_Path_Robot.direction_turn*((handler_Motor_L.parametersMotor.distance+
 80041ec:	4b47      	ldr	r3, [pc, #284]	; (800430c <BasicTimer3_Callback+0x39c>)
 80041ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80041f2:	4b47      	ldr	r3, [pc, #284]	; (8004310 <BasicTimer3_Callback+0x3a0>)
 80041f4:	f993 3000 	ldrsb.w	r3, [r3]
 80041f8:	ee07 3a90 	vmov	s15, r3
 80041fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004200:	4b3e      	ldr	r3, [pc, #248]	; (80042fc <BasicTimer3_Callback+0x38c>)
 8004202:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
					handler_Motor_R.parametersMotor.distance)*100)/distanceBetweenWheels)*(180/M_PI);
 8004206:	4b3f      	ldr	r3, [pc, #252]	; (8004304 <BasicTimer3_Callback+0x394>)
 8004208:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
			parameter_Posicion_Robot.grad_relativo += (parameter_Path_Robot.direction_turn*((handler_Motor_L.parametersMotor.distance+
 800420c:	ee76 7aa7 	vadd.f32	s15, s13, s15
					handler_Motor_R.parametersMotor.distance)*100)/distanceBetweenWheels)*(180/M_PI);
 8004210:	eddf 6a40 	vldr	s13, [pc, #256]	; 8004314 <BasicTimer3_Callback+0x3a4>
 8004214:	ee67 7aa6 	vmul.f32	s15, s15, s13
			parameter_Posicion_Robot.grad_relativo += (parameter_Path_Robot.direction_turn*((handler_Motor_L.parametersMotor.distance+
 8004218:	ee67 7a27 	vmul.f32	s15, s14, s15
					handler_Motor_R.parametersMotor.distance)*100)/distanceBetweenWheels)*(180/M_PI);
 800421c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004318 <BasicTimer3_Callback+0x3a8>
 8004220:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004224:	ee16 0a90 	vmov	r0, s13
 8004228:	f7fc f9a6 	bl	8000578 <__aeabi_f2d>
 800422c:	a32e      	add	r3, pc, #184	; (adr r3, 80042e8 <BasicTimer3_Callback+0x378>)
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	f7fc f9f9 	bl	8000628 <__aeabi_dmul>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
			parameter_Posicion_Robot.grad_relativo += (parameter_Path_Robot.direction_turn*((handler_Motor_L.parametersMotor.distance+
 800423a:	4620      	mov	r0, r4
 800423c:	4629      	mov	r1, r5
 800423e:	f7fc f83d 	bl	80002bc <__adddf3>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4931      	ldr	r1, [pc, #196]	; (800430c <BasicTimer3_Callback+0x39c>)
 8004248:	e9c1 2300 	strd	r2, r3, [r1]
			handler_Motor_R.parametersMotor.count = 0;
 800424c:	4b2d      	ldr	r3, [pc, #180]	; (8004304 <BasicTimer3_Callback+0x394>)
 800424e:	2200      	movs	r2, #0
 8004250:	839a      	strh	r2, [r3, #28]
			handler_Motor_L.parametersMotor.count = 0;
 8004252:	4b2a      	ldr	r3, [pc, #168]	; (80042fc <BasicTimer3_Callback+0x38c>)
 8004254:	2200      	movs	r2, #0
 8004256:	839a      	strh	r2, [r3, #28]
			ang_for_Displament_ICR += (((handler_Motor_R.parametersMotor.distance - handler_Motor_L.parametersMotor.distance)*100)
 8004258:	4b2a      	ldr	r3, [pc, #168]	; (8004304 <BasicTimer3_Callback+0x394>)
 800425a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800425e:	4b27      	ldr	r3, [pc, #156]	; (80042fc <BasicTimer3_Callback+0x38c>)
 8004260:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004268:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004314 <BasicTimer3_Callback+0x3a4>
 800426c:	ee67 7a87 	vmul.f32	s15, s15, s14
					/distanceBetweenWheels)*(180/M_PI); //[rad]
 8004270:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004318 <BasicTimer3_Callback+0x3a8>
 8004274:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004278:	ee16 0a90 	vmov	r0, s13
 800427c:	f7fc f97c 	bl	8000578 <__aeabi_f2d>
 8004280:	a319      	add	r3, pc, #100	; (adr r3, 80042e8 <BasicTimer3_Callback+0x378>)
 8004282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004286:	f7fc f9cf 	bl	8000628 <__aeabi_dmul>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4610      	mov	r0, r2
 8004290:	4619      	mov	r1, r3
			ang_for_Displament_ICR += (((handler_Motor_R.parametersMotor.distance - handler_Motor_L.parametersMotor.distance)*100)
 8004292:	4b22      	ldr	r3, [pc, #136]	; (800431c <BasicTimer3_Callback+0x3ac>)
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f7fc f810 	bl	80002bc <__adddf3>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	491e      	ldr	r1, [pc, #120]	; (800431c <BasicTimer3_Callback+0x3ac>)
 80042a2:	e9c1 2300 	strd	r2, r3, [r1]
			ang_complementary = parameter_Posicion_Robot.grad_relativo + ang_for_Displament_ICR;
 80042a6:	4b19      	ldr	r3, [pc, #100]	; (800430c <BasicTimer3_Callback+0x39c>)
 80042a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042ac:	4b1b      	ldr	r3, [pc, #108]	; (800431c <BasicTimer3_Callback+0x3ac>)
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	f7fc f803 	bl	80002bc <__adddf3>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4919      	ldr	r1, [pc, #100]	; (8004320 <BasicTimer3_Callback+0x3b0>)
 80042bc:	e9c1 2300 	strd	r2, r3, [r1]
			counting_action = 0;
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <BasicTimer3_Callback+0x384>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	801a      	strh	r2, [r3, #0]
}
 80042c6:	e007      	b.n	80042d8 <BasicTimer3_Callback+0x368>
		else{counting_action++;}
 80042c8:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <BasicTimer3_Callback+0x384>)
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	3301      	adds	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <BasicTimer3_Callback+0x384>)
 80042d2:	801a      	strh	r2, [r3, #0]
}
 80042d4:	e000      	b.n	80042d8 <BasicTimer3_Callback+0x368>
	else{  __NOP(); }
 80042d6:	bf00      	nop
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	ecbd 8b02 	vpop	{d8}
 80042e0:	bdb0      	pop	{r4, r5, r7, pc}
 80042e2:	bf00      	nop
 80042e4:	f3af 8000 	nop.w
 80042e8:	1a63c1f8 	.word	0x1a63c1f8
 80042ec:	404ca5dc 	.word	0x404ca5dc
 80042f0:	2000942e 	.word	0x2000942e
 80042f4:	20009442 	.word	0x20009442
 80042f8:	20000014 	.word	0x20000014
 80042fc:	2000038c 	.word	0x2000038c
 8004300:	20009050 	.word	0x20009050
 8004304:	20000318 	.word	0x20000318
 8004308:	20009054 	.word	0x20009054
 800430c:	20008fe8 	.word	0x20008fe8
 8004310:	20008f78 	.word	0x20008f78
 8004314:	42c80000 	.word	0x42c80000
 8004318:	4625a000 	.word	0x4625a000
 800431c:	20009058 	.word	0x20009058
 8004320:	20009060 	.word	0x20009060

08004324 <callback_extInt1>:

//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
	//Aumentamos valor en als cuentas
	handler_Motor_R.parametersMotor.count++;
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <callback_extInt1+0x1c>)
 800432a:	8b9b      	ldrh	r3, [r3, #28]
 800432c:	3301      	adds	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	4b03      	ldr	r3, [pc, #12]	; (8004340 <callback_extInt1+0x1c>)
 8004332:	839a      	strh	r2, [r3, #28]
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	20000318 	.word	0x20000318

08004344 <callback_extInt3>:
void callback_extInt3(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
	//Aumentamos valor en las cuentas
	handler_Motor_L.parametersMotor.count++;
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <callback_extInt3+0x1c>)
 800434a:	8b9b      	ldrh	r3, [r3, #28]
 800434c:	3301      	adds	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <callback_extInt3+0x1c>)
 8004352:	839a      	strh	r2, [r3, #28]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	2000038c 	.word	0x2000038c

08004364 <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
	if(charRead == '@')
 8004368:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <recepcionCommand+0x4c>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b40      	cmp	r3, #64	; 0x40
 800436e:	d10c      	bne.n	800438a <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 8004370:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <recepcionCommand+0x50>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <recepcionCommand+0x54>)
 8004378:	2100      	movs	r1, #0
 800437a:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 800437c:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <recepcionCommand+0x58>)
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 8004382:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <recepcionCommand+0x50>)
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 8004388:	e00c      	b.n	80043a4 <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <recepcionCommand+0x50>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <recepcionCommand+0x4c>)
 8004392:	7819      	ldrb	r1, [r3, #0]
 8004394:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <recepcionCommand+0x54>)
 8004396:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <recepcionCommand+0x50>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	3301      	adds	r3, #1
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <recepcionCommand+0x50>)
 80043a2:	701a      	strb	r2, [r3, #0]
}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20000010 	.word	0x20000010
 80043b4:	20009444 	.word	0x20009444
 80043b8:	20009448 	.word	0x20009448
 80043bc:	20000019 	.word	0x20000019

080043c0 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 80043c0:	b5b0      	push	{r4, r5, r7, lr}
 80043c2:	b09a      	sub	sp, #104	; 0x68
 80043c4:	af04      	add	r7, sp, #16
 80043c6:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	f107 031c 	add.w	r3, r7, #28
 80043d0:	223c      	movs	r2, #60	; 0x3c
 80043d2:	2100      	movs	r1, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f004 f92f 	bl	8008638 <memset>
	int firtsParameter = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
	int secondParameter = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]
	int thirdParameter = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
	int forthParameter = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60bb      	str	r3, [r7, #8]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 80043ea:	f107 0114 	add.w	r1, r7, #20
 80043ee:	f107 0218 	add.w	r2, r7, #24
 80043f2:	f107 0308 	add.w	r3, r7, #8
 80043f6:	9302      	str	r3, [sp, #8]
 80043f8:	f107 030c 	add.w	r3, r7, #12
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	f107 0310 	add.w	r3, r7, #16
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	460b      	mov	r3, r1
 8004406:	4998      	ldr	r1, [pc, #608]	; (8004668 <runCommand+0x2a8>)
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f004 ffbd 	bl	8009388 <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 800440e:	f107 0318 	add.w	r3, r7, #24
 8004412:	4996      	ldr	r1, [pc, #600]	; (800466c <runCommand+0x2ac>)
 8004414:	4618      	mov	r0, r3
 8004416:	f7fb fee3 	bl	80001e0 <strcmp>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d12c      	bne.n	800447a <runCommand+0xba>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 8004420:	4993      	ldr	r1, [pc, #588]	; (8004670 <runCommand+0x2b0>)
 8004422:	4894      	ldr	r0, [pc, #592]	; (8004674 <runCommand+0x2b4>)
 8004424:	f003 fece 	bl	80081c4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 8004428:	4993      	ldr	r1, [pc, #588]	; (8004678 <runCommand+0x2b8>)
 800442a:	4892      	ldr	r0, [pc, #584]	; (8004674 <runCommand+0x2b4>)
 800442c:	f003 feca 	bl	80081c4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) dutty # --- Cambiar el valor de dutty [%] \n");
 8004430:	4992      	ldr	r1, [pc, #584]	; (800467c <runCommand+0x2bc>)
 8004432:	4890      	ldr	r0, [pc, #576]	; (8004674 <runCommand+0x2b4>)
 8004434:	f003 fec6 	bl	80081c4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) frequency # --- Cambiar el valor de la frecuenencia del motor [HZ] \n");
 8004438:	4991      	ldr	r1, [pc, #580]	; (8004680 <runCommand+0x2c0>)
 800443a:	488e      	ldr	r0, [pc, #568]	; (8004674 <runCommand+0x2b4>)
 800443c:	f003 fec2 	bl	80081c4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) line # ---Inicia Linea recta, #: dist [mm]  \n");
 8004440:	4990      	ldr	r1, [pc, #576]	; (8004684 <runCommand+0x2c4>)
 8004442:	488c      	ldr	r0, [pc, #560]	; (8004674 <runCommand+0x2b4>)
 8004444:	f003 febe 	bl	80081c4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "5) turn # # ---Iniciamos el giro del robot #: ang [grados]# \n");
 8004448:	498f      	ldr	r1, [pc, #572]	; (8004688 <runCommand+0x2c8>)
 800444a:	488a      	ldr	r0, [pc, #552]	; (8004674 <runCommand+0x2b4>)
 800444c:	f003 feba 	bl	80081c4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) square # # --- Ejecucion del cuadrado #: lado [mm], #: dir 0->L 1->R \n");
 8004450:	498e      	ldr	r1, [pc, #568]	; (800468c <runCommand+0x2cc>)
 8004452:	4888      	ldr	r0, [pc, #544]	; (8004674 <runCommand+0x2b4>)
 8004454:	f003 feb6 	bl	80081c4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "7) applyastar --- Indicador de calcular trayectoria con A-Star \n");
 8004458:	498d      	ldr	r1, [pc, #564]	; (8004690 <runCommand+0x2d0>)
 800445a:	4886      	ldr	r0, [pc, #536]	; (8004674 <runCommand+0x2b4>)
 800445c:	f003 feb2 	bl	80081c4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "8) exepathastar --- se ejecuta el A-Star calculado \n");
 8004460:	498c      	ldr	r1, [pc, #560]	; (8004694 <runCommand+0x2d4>)
 8004462:	4884      	ldr	r0, [pc, #528]	; (8004674 <runCommand+0x2b4>)
 8004464:	f003 feae 	bl	80081c4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "9) stop --- Para la ejecucion de los motore \n");
 8004468:	498b      	ldr	r1, [pc, #556]	; (8004698 <runCommand+0x2d8>)
 800446a:	4882      	ldr	r0, [pc, #520]	; (8004674 <runCommand+0x2b4>)
 800446c:	f003 feaa 	bl	80081c4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "10) init --- Reinicia las coordenadas globales \n");
 8004470:	498a      	ldr	r1, [pc, #552]	; (800469c <runCommand+0x2dc>)
 8004472:	4880      	ldr	r0, [pc, #512]	; (8004674 <runCommand+0x2b4>)
 8004474:	f003 fea6 	bl	80081c4 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 8004478:	e0e9      	b.n	800464e <runCommand+0x28e>
	else if (strcmp(cmd, "dutty") == 0)
 800447a:	f107 0318 	add.w	r3, r7, #24
 800447e:	4988      	ldr	r1, [pc, #544]	; (80046a0 <runCommand+0x2e0>)
 8004480:	4618      	mov	r0, r3
 8004482:	f7fb fead 	bl	80001e0 <strcmp>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d120      	bne.n	80044ce <runCommand+0x10e>
		duttySetPoint= firtsParameter;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	4b84      	ldr	r3, [pc, #528]	; (80046a4 <runCommand+0x2e4>)
 8004492:	701a      	strb	r2, [r3, #0]
		velSetPoint = (0.00169*duttySetPoint + 0.0619);
 8004494:	4b83      	ldr	r3, [pc, #524]	; (80046a4 <runCommand+0x2e4>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f7fc f85b 	bl	8000554 <__aeabi_i2d>
 800449e:	a36e      	add	r3, pc, #440	; (adr r3, 8004658 <runCommand+0x298>)
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f7fc f8c0 	bl	8000628 <__aeabi_dmul>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4610      	mov	r0, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	a36b      	add	r3, pc, #428	; (adr r3, 8004660 <runCommand+0x2a0>)
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	f7fb ff01 	bl	80002bc <__adddf3>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4610      	mov	r0, r2
 80044c0:	4619      	mov	r1, r3
 80044c2:	f7fc fba9 	bl	8000c18 <__aeabi_d2f>
 80044c6:	4603      	mov	r3, r0
 80044c8:	4a77      	ldr	r2, [pc, #476]	; (80046a8 <runCommand+0x2e8>)
 80044ca:	6013      	str	r3, [r2, #0]
}
 80044cc:	e0bf      	b.n	800464e <runCommand+0x28e>
	else if (strcmp(cmd, "frequency") == 0)
 80044ce:	f107 0318 	add.w	r3, r7, #24
 80044d2:	4976      	ldr	r1, [pc, #472]	; (80046ac <runCommand+0x2ec>)
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fb fe83 	bl	80001e0 <strcmp>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d104      	bne.n	80044ea <runCommand+0x12a>
		frequency_PWM_Motor = firtsParameter;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	4b72      	ldr	r3, [pc, #456]	; (80046b0 <runCommand+0x2f0>)
 80044e6:	801a      	strh	r2, [r3, #0]
}
 80044e8:	e0b1      	b.n	800464e <runCommand+0x28e>
	else if (strcmp(cmd, "line") == 0)
 80044ea:	f107 0318 	add.w	r3, r7, #24
 80044ee:	4971      	ldr	r1, [pc, #452]	; (80046b4 <runCommand+0x2f4>)
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fb fe75 	bl	80001e0 <strcmp>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d118      	bne.n	800452e <runCommand+0x16e>
		change_position(&parameter_Path_Robot, firtsParameter, parameter_Path_Robot.goal_Position_x, parameter_Path_Robot.goal_Position_y);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	4a6e      	ldr	r2, [pc, #440]	; (80046b8 <runCommand+0x2f8>)
 8004500:	ed92 7b18 	vldr	d7, [r2, #96]	; 0x60
 8004504:	4a6c      	ldr	r2, [pc, #432]	; (80046b8 <runCommand+0x2f8>)
 8004506:	ed92 6b1a 	vldr	d6, [r2, #104]	; 0x68
 800450a:	eeb0 1a46 	vmov.f32	s2, s12
 800450e:	eef0 1a66 	vmov.f32	s3, s13
 8004512:	eeb0 0a47 	vmov.f32	s0, s14
 8004516:	eef0 0a67 	vmov.f32	s1, s15
 800451a:	4619      	mov	r1, r3
 800451c:	4866      	ldr	r0, [pc, #408]	; (80046b8 <runCommand+0x2f8>)
 800451e:	f7fe f9e7 	bl	80028f0 <change_position>
		straight_line(duttySetPoint);
 8004522:	4b60      	ldr	r3, [pc, #384]	; (80046a4 <runCommand+0x2e4>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fb02 	bl	8004b30 <straight_line>
}
 800452c:	e08f      	b.n	800464e <runCommand+0x28e>
	else if (strcmp(cmd, "turn") == 0)
 800452e:	f107 0318 	add.w	r3, r7, #24
 8004532:	4962      	ldr	r1, [pc, #392]	; (80046bc <runCommand+0x2fc>)
 8004534:	4618      	mov	r0, r3
 8004536:	f7fb fe53 	bl	80001e0 <strcmp>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10b      	bne.n	8004558 <runCommand+0x198>
		if(secondParameter==1){ firtsParameter = -1*firtsParameter;}
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d102      	bne.n	800454c <runCommand+0x18c>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	425b      	negs	r3, r3
 800454a:	617b      	str	r3, [r7, #20]
		turn_itself(firtsParameter);    //a = [grados], b = Direccion giro, c = Porcentaje dutty
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	b21b      	sxth	r3, r3
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fbf1 	bl	8004d38 <turn_itself>
}
 8004556:	e07a      	b.n	800464e <runCommand+0x28e>
	else if (strcmp(cmd, "square") == 0)
 8004558:	f107 0318 	add.w	r3, r7, #24
 800455c:	4958      	ldr	r1, [pc, #352]	; (80046c0 <runCommand+0x300>)
 800455e:	4618      	mov	r0, r3
 8004560:	f7fb fe3e 	bl	80001e0 <strcmp>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d11b      	bne.n	80045a2 <runCommand+0x1e2>
		init_coordinates();
 800456a:	f000 fc57 	bl	8004e1c <init_coordinates>
		set_operation_square(list_operation, firtsParameter, secondParameter);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	4618      	mov	r0, r3
 8004572:	f7fb ffef 	bl	8000554 <__aeabi_i2d>
 8004576:	4604      	mov	r4, r0
 8004578:	460d      	mov	r5, r1
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fb ffe9 	bl	8000554 <__aeabi_i2d>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	ec43 2b11 	vmov	d1, r2, r3
 800458a:	ec45 4b10 	vmov	d0, r4, r5
 800458e:	484d      	ldr	r0, [pc, #308]	; (80046c4 <runCommand+0x304>)
 8004590:	f000 fcc6 	bl	8004f20 <set_operation_square>
		counting_operation = 0;
 8004594:	4b4c      	ldr	r3, [pc, #304]	; (80046c8 <runCommand+0x308>)
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]
		flag_multioperation = 1;
 800459a:	4b4c      	ldr	r3, [pc, #304]	; (80046cc <runCommand+0x30c>)
 800459c:	2201      	movs	r2, #1
 800459e:	701a      	strb	r2, [r3, #0]
}
 80045a0:	e055      	b.n	800464e <runCommand+0x28e>
	else if (strcmp(cmd,"applyastar") == 0)
 80045a2:	f107 0318 	add.w	r3, r7, #24
 80045a6:	494a      	ldr	r1, [pc, #296]	; (80046d0 <runCommand+0x310>)
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fb fe19 	bl	80001e0 <strcmp>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d103      	bne.n	80045bc <runCommand+0x1fc>
		flag_A_Star = 1;
 80045b4:	4b47      	ldr	r3, [pc, #284]	; (80046d4 <runCommand+0x314>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	701a      	strb	r2, [r3, #0]
}
 80045ba:	e048      	b.n	800464e <runCommand+0x28e>
	else if (strcmp(cmd,"exepathastar") == 0)
 80045bc:	f107 0318 	add.w	r3, r7, #24
 80045c0:	4945      	ldr	r1, [pc, #276]	; (80046d8 <runCommand+0x318>)
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fb fe0c 	bl	80001e0 <strcmp>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d118      	bne.n	8004600 <runCommand+0x240>
		if(flag_navegation_AStar)
 80045ce:	4b43      	ldr	r3, [pc, #268]	; (80046dc <runCommand+0x31c>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00f      	beq.n	80045f6 <runCommand+0x236>
			init_coordinates();
 80045d6:	f000 fc21 	bl	8004e1c <init_coordinates>
			set_operation_AStar(list_operation, file_path, &parameter_Posicion_Robot, &parameter_Path_Robot);
 80045da:	4b41      	ldr	r3, [pc, #260]	; (80046e0 <runCommand+0x320>)
 80045dc:	6819      	ldr	r1, [r3, #0]
 80045de:	4b36      	ldr	r3, [pc, #216]	; (80046b8 <runCommand+0x2f8>)
 80045e0:	4a40      	ldr	r2, [pc, #256]	; (80046e4 <runCommand+0x324>)
 80045e2:	4838      	ldr	r0, [pc, #224]	; (80046c4 <runCommand+0x304>)
 80045e4:	f000 fd5a 	bl	800509c <set_operation_AStar>
			counting_operation = 0;
 80045e8:	4b37      	ldr	r3, [pc, #220]	; (80046c8 <runCommand+0x308>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
			flag_multioperation = 1;
 80045ee:	4b37      	ldr	r3, [pc, #220]	; (80046cc <runCommand+0x30c>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	701a      	strb	r2, [r3, #0]
}
 80045f4:	e02b      	b.n	800464e <runCommand+0x28e>
		else{writeMsgForTXE(&handler_USART_USB, "Accion no valida. No se a ingresado el grid map \n");}
 80045f6:	493c      	ldr	r1, [pc, #240]	; (80046e8 <runCommand+0x328>)
 80045f8:	481e      	ldr	r0, [pc, #120]	; (8004674 <runCommand+0x2b4>)
 80045fa:	f003 fde3 	bl	80081c4 <writeMsgForTXE>
}
 80045fe:	e026      	b.n	800464e <runCommand+0x28e>
	else if (strcmp(cmd, "stop") == 0)
 8004600:	f107 0318 	add.w	r3, r7, #24
 8004604:	4939      	ldr	r1, [pc, #228]	; (80046ec <runCommand+0x32c>)
 8004606:	4618      	mov	r0, r3
 8004608:	f7fb fdea 	bl	80001e0 <strcmp>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10d      	bne.n	800462e <runCommand+0x26e>
		flag_multioperation = 0;
 8004612:	4b2e      	ldr	r3, [pc, #184]	; (80046cc <runCommand+0x30c>)
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]
		counting_operation = 0;
 8004618:	4b2b      	ldr	r3, [pc, #172]	; (80046c8 <runCommand+0x308>)
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
		status_motor(RESET);
 800461e:	2080      	movs	r0, #128	; 0x80
 8004620:	f000 feba 	bl	8005398 <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Operacion Detenida \n");
 8004624:	4932      	ldr	r1, [pc, #200]	; (80046f0 <runCommand+0x330>)
 8004626:	4813      	ldr	r0, [pc, #76]	; (8004674 <runCommand+0x2b4>)
 8004628:	f003 fdcc 	bl	80081c4 <writeMsgForTXE>
}
 800462c:	e00f      	b.n	800464e <runCommand+0x28e>
	else if (strcmp(cmd, "init") == 0)
 800462e:	f107 0318 	add.w	r3, r7, #24
 8004632:	4930      	ldr	r1, [pc, #192]	; (80046f4 <runCommand+0x334>)
 8004634:	4618      	mov	r0, r3
 8004636:	f7fb fdd3 	bl	80001e0 <strcmp>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <runCommand+0x286>
		init_coordinates();
 8004640:	f000 fbec 	bl	8004e1c <init_coordinates>
}
 8004644:	e003      	b.n	800464e <runCommand+0x28e>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 8004646:	492c      	ldr	r1, [pc, #176]	; (80046f8 <runCommand+0x338>)
 8004648:	480a      	ldr	r0, [pc, #40]	; (8004674 <runCommand+0x2b4>)
 800464a:	f003 fdbb 	bl	80081c4 <writeMsgForTXE>
}
 800464e:	bf00      	nop
 8004650:	3758      	adds	r7, #88	; 0x58
 8004652:	46bd      	mov	sp, r7
 8004654:	bdb0      	pop	{r4, r5, r7, pc}
 8004656:	bf00      	nop
 8004658:	aebc408e 	.word	0xaebc408e
 800465c:	3f5bb05f 	.word	0x3f5bb05f
 8004660:	573eab36 	.word	0x573eab36
 8004664:	3fafb15b 	.word	0x3fafb15b
 8004668:	08010198 	.word	0x08010198
 800466c:	080101a8 	.word	0x080101a8
 8004670:	080101b0 	.word	0x080101b0
 8004674:	2000029c 	.word	0x2000029c
 8004678:	080101c0 	.word	0x080101c0
 800467c:	080101ec 	.word	0x080101ec
 8004680:	0801021c 	.word	0x0801021c
 8004684:	08010264 	.word	0x08010264
 8004688:	08010298 	.word	0x08010298
 800468c:	080102d8 	.word	0x080102d8
 8004690:	08010324 	.word	0x08010324
 8004694:	08010368 	.word	0x08010368
 8004698:	080103a0 	.word	0x080103a0
 800469c:	080103d0 	.word	0x080103d0
 80046a0:	08010404 	.word	0x08010404
 80046a4:	20000018 	.word	0x20000018
 80046a8:	20009438 	.word	0x20009438
 80046ac:	0801040c 	.word	0x0801040c
 80046b0:	20000016 	.word	0x20000016
 80046b4:	08010418 	.word	0x08010418
 80046b8:	20008f78 	.word	0x20008f78
 80046bc:	08010420 	.word	0x08010420
 80046c0:	08010428 	.word	0x08010428
 80046c4:	20009068 	.word	0x20009068
 80046c8:	2000942f 	.word	0x2000942f
 80046cc:	2000942c 	.word	0x2000942c
 80046d0:	08010430 	.word	0x08010430
 80046d4:	20008f51 	.word	0x20008f51
 80046d8:	0801043c 	.word	0x0801043c
 80046dc:	20008f52 	.word	0x20008f52
 80046e0:	20008f34 	.word	0x20008f34
 80046e4:	20008fe8 	.word	0x20008fe8
 80046e8:	0801044c 	.word	0x0801044c
 80046ec:	08010480 	.word	0x08010480
 80046f0:	08010488 	.word	0x08010488
 80046f4:	080104a0 	.word	0x080104a0
 80046f8:	080104a8 	.word	0x080104a8

080046fc <recepcion_Sring_Parameter_Grid_Map>:

//------------------------------Inicio de la definicion de funciones del A-STAR----------------------------------------

//Funcion para la recepcion de los parametros del grip map
void recepcion_Sring_Parameter_Grid_Map(char newchar)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	71fb      	strb	r3, [r7, #7]
	if(string_aStar_Complete!=1)
 8004706:	4b14      	ldr	r3, [pc, #80]	; (8004758 <recepcion_Sring_Parameter_Grid_Map+0x5c>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d01c      	beq.n	8004748 <recepcion_Sring_Parameter_Grid_Map+0x4c>
		if(newchar == '$')
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	2b24      	cmp	r3, #36	; 0x24
 8004712:	d10c      	bne.n	800472e <recepcion_Sring_Parameter_Grid_Map+0x32>
		{
			//Almacenamos el elemento nulo
			bufferParameterStringGM[index_String_GM]= '\0';
 8004714:	4b11      	ldr	r3, [pc, #68]	; (800475c <recepcion_Sring_Parameter_Grid_Map+0x60>)
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	4b11      	ldr	r3, [pc, #68]	; (8004760 <recepcion_Sring_Parameter_Grid_Map+0x64>)
 800471c:	2100      	movs	r1, #0
 800471e:	5499      	strb	r1, [r3, r2]
			//Establecemos la bandera como alta
			string_aStar_Complete = 1;
 8004720:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <recepcion_Sring_Parameter_Grid_Map+0x5c>)
 8004722:	2201      	movs	r2, #1
 8004724:	701a      	strb	r2, [r3, #0]
			//Reiniciamos contador
			index_String_GM = 0;
 8004726:	4b0d      	ldr	r3, [pc, #52]	; (800475c <recepcion_Sring_Parameter_Grid_Map+0x60>)
 8004728:	2200      	movs	r2, #0
 800472a:	801a      	strh	r2, [r3, #0]
			bufferParameterStringGM[index_String_GM] = newchar;
			//Aumentamos en uno la posicion del arreglo
			index_String_GM++;
		}
	else{__NOP();}
}
 800472c:	e00d      	b.n	800474a <recepcion_Sring_Parameter_Grid_Map+0x4e>
			bufferParameterStringGM[index_String_GM] = newchar;
 800472e:	4b0b      	ldr	r3, [pc, #44]	; (800475c <recepcion_Sring_Parameter_Grid_Map+0x60>)
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	4619      	mov	r1, r3
 8004734:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <recepcion_Sring_Parameter_Grid_Map+0x64>)
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	5453      	strb	r3, [r2, r1]
			index_String_GM++;
 800473a:	4b08      	ldr	r3, [pc, #32]	; (800475c <recepcion_Sring_Parameter_Grid_Map+0x60>)
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	3301      	adds	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <recepcion_Sring_Parameter_Grid_Map+0x60>)
 8004744:	801a      	strh	r2, [r3, #0]
}
 8004746:	e000      	b.n	800474a <recepcion_Sring_Parameter_Grid_Map+0x4e>
	else{__NOP();}
 8004748:	bf00      	nop
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20008f50 	.word	0x20008f50
 800475c:	20008f38 	.word	0x20008f38
 8004760:	20008d70 	.word	0x20008d70

08004764 <Separate_parameters>:

//Funcion para separar los diferentes parametros del string
void Separate_parameters(Cell_map_t array_string[20][20], char *parameter_string)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  //Definicion de variables
  char buffercharSeparate[10];
  uint8_t index_charSeparate = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t flag_Separate = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t status_parameter = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t index_init_Grid_map = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  //---------------Definicion de los parametros iniciales---------------
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 8004786:	2300      	movs	r3, #0
 8004788:	847b      	strh	r3, [r7, #34]	; 0x22
 800478a:	e068      	b.n	800485e <Separate_parameters+0xfa>
  {
    //Verificacion del estado
    if(status_parameter<3)
 800478c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004790:	2b02      	cmp	r3, #2
 8004792:	d85d      	bhi.n	8004850 <Separate_parameters+0xec>
    {
      //Busqueda de la separacion dentro del string
      if (parameter_string[i] == ':')
 8004794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	4413      	add	r3, r2
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b3a      	cmp	r3, #58	; 0x3a
 800479e:	d10d      	bne.n	80047bc <Separate_parameters+0x58>
      {
        buffercharSeparate[index_charSeparate] = '\0';
 80047a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047a4:	3328      	adds	r3, #40	; 0x28
 80047a6:	443b      	add	r3, r7
 80047a8:	2200      	movs	r2, #0
 80047aa:	f803 2c20 	strb.w	r2, [r3, #-32]
        index_charSeparate = 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        flag_Separate = 1;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80047ba:	e00e      	b.n	80047da <Separate_parameters+0x76>
      }
      else
      {
        buffercharSeparate[index_charSeparate] = parameter_string[i];
 80047bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	441a      	add	r2, r3
 80047c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047c6:	7812      	ldrb	r2, [r2, #0]
 80047c8:	3328      	adds	r3, #40	; 0x28
 80047ca:	443b      	add	r3, r7
 80047cc:	f803 2c20 	strb.w	r2, [r3, #-32]
        index_charSeparate++;
 80047d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047d4:	3301      	adds	r3, #1
 80047d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      //Si la bandera se levanta se asigna el valor correspondiente al parametro
      if(flag_Separate == 1)
 80047da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d13a      	bne.n	8004858 <Separate_parameters+0xf4>
      {
        switch(status_parameter)
 80047e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d01a      	beq.n	8004820 <Separate_parameters+0xbc>
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	dc27      	bgt.n	800483e <Separate_parameters+0xda>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <Separate_parameters+0x94>
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d00a      	beq.n	800480c <Separate_parameters+0xa8>
 80047f6:	e022      	b.n	800483e <Separate_parameters+0xda>
        {
          case 0:
          {
            grid_map_row = atoi(buffercharSeparate);
 80047f8:	f107 0308 	add.w	r3, r7, #8
 80047fc:	4618      	mov	r0, r3
 80047fe:	f003 feec 	bl	80085da <atoi>
 8004802:	4603      	mov	r3, r0
 8004804:	b2da      	uxtb	r2, r3
 8004806:	4b70      	ldr	r3, [pc, #448]	; (80049c8 <Separate_parameters+0x264>)
 8004808:	701a      	strb	r2, [r3, #0]
            break;
 800480a:	e018      	b.n	800483e <Separate_parameters+0xda>
          }
          case 1:
          {
            grid_map_colum = atoi(buffercharSeparate);
 800480c:	f107 0308 	add.w	r3, r7, #8
 8004810:	4618      	mov	r0, r3
 8004812:	f003 fee2 	bl	80085da <atoi>
 8004816:	4603      	mov	r3, r0
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4b6c      	ldr	r3, [pc, #432]	; (80049cc <Separate_parameters+0x268>)
 800481c:	701a      	strb	r2, [r3, #0]
            break;
 800481e:	e00e      	b.n	800483e <Separate_parameters+0xda>
          }
          case 2:
          {
            cell_separation = atof(buffercharSeparate);
 8004820:	f107 0308 	add.w	r3, r7, #8
 8004824:	4618      	mov	r0, r3
 8004826:	f003 fed5 	bl	80085d4 <atof>
 800482a:	ec53 2b10 	vmov	r2, r3, d0
 800482e:	4610      	mov	r0, r2
 8004830:	4619      	mov	r1, r3
 8004832:	f7fc f9f1 	bl	8000c18 <__aeabi_d2f>
 8004836:	4603      	mov	r3, r0
 8004838:	4a65      	ldr	r2, [pc, #404]	; (80049d0 <Separate_parameters+0x26c>)
 800483a:	6013      	str	r3, [r2, #0]
            break;
 800483c:	bf00      	nop
          }
        }
        status_parameter++;
 800483e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004842:	3301      	adds	r3, #1
 8004844:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        flag_Separate = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800484e:	e003      	b.n	8004858 <Separate_parameters+0xf4>
      }
    }
    else
    {
      index_init_Grid_map = i;
 8004850:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004852:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      break;
 8004856:	e008      	b.n	800486a <Separate_parameters+0x106>
  for (uint16_t i = 0; parameter_string[i] != '\0'; i++)
 8004858:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800485a:	3301      	adds	r3, #1
 800485c:	847b      	strh	r3, [r7, #34]	; 0x22
 800485e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	4413      	add	r3, r2
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d190      	bne.n	800478c <Separate_parameters+0x28>
    }
  }
  //---------------transformacion del string grid map en un array---------------
  //Variables para los indices
  uint8_t index_row = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t index_col = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	f887 3020 	strb.w	r3, [r7, #32]

  //Separacion de cada caracter
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 8004876:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800487a:	83fb      	strh	r3, [r7, #30]
 800487c:	e02b      	b.n	80048d6 <Separate_parameters+0x172>
  {
    if (parameter_string[i] == ';')
 800487e:	8bfb      	ldrh	r3, [r7, #30]
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	4413      	add	r3, r2
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b3b      	cmp	r3, #59	; 0x3b
 8004888:	d108      	bne.n	800489c <Separate_parameters+0x138>
    {
      //Se aumenta el indice de la fila y se reinicia el indice de la columna
      index_row++;
 800488a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800488e:	3301      	adds	r3, #1
 8004890:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      index_col = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	f887 3020 	strb.w	r3, [r7, #32]
 800489a:	e019      	b.n	80048d0 <Separate_parameters+0x16c>
    }
    else
    {
      //Se guarda el caracter
      array_string[index_row][index_col].feature = parameter_string[i];
 800489c:	8bfb      	ldrh	r3, [r7, #30]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	18d1      	adds	r1, r2, r3
 80048a2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80048a6:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	441a      	add	r2, r3
 80048b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048b6:	7808      	ldrb	r0, [r1, #0]
 80048b8:	2158      	movs	r1, #88	; 0x58
 80048ba:	fb01 f303 	mul.w	r3, r1, r3
 80048be:	4413      	add	r3, r2
 80048c0:	334c      	adds	r3, #76	; 0x4c
 80048c2:	4602      	mov	r2, r0
 80048c4:	701a      	strb	r2, [r3, #0]
      //se aumenta el indice de la columna
      index_col++;
 80048c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048ca:	3301      	adds	r3, #1
 80048cc:	f887 3020 	strb.w	r3, [r7, #32]
  for (uint16_t i = index_init_Grid_map; parameter_string[i] != '\0'; i++)
 80048d0:	8bfb      	ldrh	r3, [r7, #30]
 80048d2:	3301      	adds	r3, #1
 80048d4:	83fb      	strh	r3, [r7, #30]
 80048d6:	8bfb      	ldrh	r3, [r7, #30]
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	4413      	add	r3, r2
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1cd      	bne.n	800487e <Separate_parameters+0x11a>
    }
  }
  //---------------Definicion del start y del goal---------------
  //Recorremo el array creado para encontrar la posicion de los objetivos
  for(int i = 0; i < grid_map_row; i++)
 80048e2:	2300      	movs	r3, #0
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	e063      	b.n	80049b0 <Separate_parameters+0x24c>
  {
    for(int j = 0; j < grid_map_colum; j++)
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e057      	b.n	800499e <Separate_parameters+0x23a>
    {
      if(array_string[i][j].feature == 'S')
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80048f4:	fb02 f303 	mul.w	r3, r2, r3
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	441a      	add	r2, r3
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2158      	movs	r1, #88	; 0x58
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	4413      	add	r3, r2
 8004906:	334c      	adds	r3, #76	; 0x4c
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b53      	cmp	r3, #83	; 0x53
 800490c:	d11a      	bne.n	8004944 <Separate_parameters+0x1e0>
      {
        //Definimos su posicion
        start_x = j*cell_separation;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	ee07 3a90 	vmov	s15, r3
 8004914:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004918:	4b2d      	ldr	r3, [pc, #180]	; (80049d0 <Separate_parameters+0x26c>)
 800491a:	edd3 7a00 	vldr	s15, [r3]
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <Separate_parameters+0x270>)
 8004924:	edc3 7a00 	vstr	s15, [r3]
        start_y = i*cell_separation;
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004932:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <Separate_parameters+0x26c>)
 8004934:	edd3 7a00 	vldr	s15, [r3]
 8004938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493c:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <Separate_parameters+0x274>)
 800493e:	edc3 7a00 	vstr	s15, [r3]
 8004942:	e029      	b.n	8004998 <Separate_parameters+0x234>
      }
      else if (array_string[i][j].feature == 'G')
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	441a      	add	r2, r3
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2158      	movs	r1, #88	; 0x58
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	4413      	add	r3, r2
 800495c:	334c      	adds	r3, #76	; 0x4c
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b47      	cmp	r3, #71	; 0x47
 8004962:	d119      	bne.n	8004998 <Separate_parameters+0x234>
      {
      //Definimos su posicion
        goal_x= j*cell_separation;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800496e:	4b18      	ldr	r3, [pc, #96]	; (80049d0 <Separate_parameters+0x26c>)
 8004970:	edd3 7a00 	vldr	s15, [r3]
 8004974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004978:	4b18      	ldr	r3, [pc, #96]	; (80049dc <Separate_parameters+0x278>)
 800497a:	edc3 7a00 	vstr	s15, [r3]
        goal_y= i*cell_separation;
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004988:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <Separate_parameters+0x26c>)
 800498a:	edd3 7a00 	vldr	s15, [r3]
 800498e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004992:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <Separate_parameters+0x27c>)
 8004994:	edc3 7a00 	vstr	s15, [r3]
    for(int j = 0; j < grid_map_colum; j++)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	3301      	adds	r3, #1
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <Separate_parameters+0x268>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	4293      	cmp	r3, r2
 80049a8:	dba1      	blt.n	80048ee <Separate_parameters+0x18a>
  for(int i = 0; i < grid_map_row; i++)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	3301      	adds	r3, #1
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <Separate_parameters+0x264>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	4293      	cmp	r3, r2
 80049ba:	db95      	blt.n	80048e8 <Separate_parameters+0x184>
      }
    }
  }
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	3728      	adds	r7, #40	; 0x28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20008f3a 	.word	0x20008f3a
 80049cc:	20008f3b 	.word	0x20008f3b
 80049d0:	20008f3c 	.word	0x20008f3c
 80049d4:	20008f40 	.word	0x20008f40
 80049d8:	20008f44 	.word	0x20008f44
 80049dc:	20008f48 	.word	0x20008f48
 80049e0:	20008f4c 	.word	0x20008f4c

080049e4 <send_path>:


//Funcion para imprimir la ruta encontrada
void send_path(file_cell_t *file_cell, Cell_map_t array_string[20][20], uint8_t row, uint8_t colum)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08e      	sub	sp, #56	; 0x38
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	4611      	mov	r1, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	460b      	mov	r3, r1
 80049f4:	71fb      	strb	r3, [r7, #7]
 80049f6:	4613      	mov	r3, r2
 80049f8:	71bb      	strb	r3, [r7, #6]
  //Variables
  uint8_t index = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  char buffermsg[22] = {0};
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	f107 0318 	add.w	r3, r7, #24
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	821a      	strh	r2, [r3, #16]

  //Cambiamos los caracteres de la malla de strings por caracteres que indican la ruta establecida con A Star
  while(1)
  {
	if(file_cell->ptrCell_parent[index] != NULL)
 8004a14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d022      	beq.n	8004a6a <send_path+0x86>
	{
	   array_string[file_cell->ptrCell_parent[index]->index_row][file_cell->ptrCell_parent[index]->index_col].feature = '+';
 8004a24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	789b      	ldrb	r3, [r3, #2]
 8004a32:	461a      	mov	r2, r3
 8004a34:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8004a38:	fb02 f303 	mul.w	r3, r2, r3
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	441a      	add	r2, r3
 8004a40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a44:	68f9      	ldr	r1, [r7, #12]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	78db      	ldrb	r3, [r3, #3]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	2358      	movs	r3, #88	; 0x58
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	334c      	adds	r3, #76	; 0x4c
 8004a5a:	222b      	movs	r2, #43	; 0x2b
 8004a5c:	701a      	strb	r2, [r3, #0]
	  index++;
 8004a5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a62:	3301      	adds	r3, #1
 8004a64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(file_cell->ptrCell_parent[index] != NULL)
 8004a68:	e7d4      	b.n	8004a14 <send_path+0x30>
	}
	else
	{
	  break;
 8004a6a:	bf00      	nop
	}
  }
  //Indica de nuevo el inicio del recorrido
   array_string[file_cell->ptrCell_parent[0]->index_row][file_cell->ptrCell_parent[0]->index_col].feature = 'S';
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	789b      	ldrb	r3, [r3, #2]
 8004a72:	461a      	mov	r2, r3
 8004a74:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8004a78:	fb02 f303 	mul.w	r3, r2, r3
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	441a      	add	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	78db      	ldrb	r3, [r3, #3]
 8004a86:	4619      	mov	r1, r3
 8004a88:	2358      	movs	r3, #88	; 0x58
 8004a8a:	fb01 f303 	mul.w	r3, r1, r3
 8004a8e:	4413      	add	r3, r2
 8004a90:	334c      	adds	r3, #76	; 0x4c
 8004a92:	2253      	movs	r2, #83	; 0x53
 8004a94:	701a      	strb	r2, [r3, #0]

  //Envio de caracter para indicar que se trata del grid map
  writeChar(&handler_USART_USB, '$');
 8004a96:	2124      	movs	r1, #36	; 0x24
 8004a98:	4822      	ldr	r0, [pc, #136]	; (8004b24 <send_path+0x140>)
 8004a9a:	f003 fb5b 	bl	8008154 <writeChar>
  //Imprimir la malla modificada
  for(int i=0;i<row;i++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8004aa2:	e036      	b.n	8004b12 <send_path+0x12e>
  {
	for(int j=0;j<colum;j++)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aa8:	e019      	b.n	8004ade <send_path+0xfa>
	{
	  //Agregamos las caracteristicas por fila a un buffer
	  buffermsg[j] = array_string[i][j].feature;
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8004ab0:	fb02 f303 	mul.w	r3, r2, r3
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	441a      	add	r2, r3
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	2158      	movs	r1, #88	; 0x58
 8004abc:	fb01 f303 	mul.w	r3, r1, r3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	334c      	adds	r3, #76	; 0x4c
 8004ac4:	7819      	ldrb	r1, [r3, #0]
 8004ac6:	f107 0214 	add.w	r2, r7, #20
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	4413      	add	r3, r2
 8004ace:	460a      	mov	r2, r1
 8004ad0:	701a      	strb	r2, [r3, #0]
	  index = j;
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for(int j=0;j<colum;j++)
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	3301      	adds	r3, #1
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ade:	79bb      	ldrb	r3, [r7, #6]
 8004ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	dbe1      	blt.n	8004aaa <send_path+0xc6>
	}
	//Agragamos el valor nullo al final del string
	buffermsg[index+1] = '\0';
 8004ae6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004aea:	3301      	adds	r3, #1
 8004aec:	3338      	adds	r3, #56	; 0x38
 8004aee:	443b      	add	r3, r7
 8004af0:	2200      	movs	r2, #0
 8004af2:	f803 2c24 	strb.w	r2, [r3, #-36]
	//imprimimos el string
	sprintf(bufferMsg, "%s;",buffermsg);
 8004af6:	f107 0314 	add.w	r3, r7, #20
 8004afa:	461a      	mov	r2, r3
 8004afc:	490a      	ldr	r1, [pc, #40]	; (8004b28 <send_path+0x144>)
 8004afe:	480b      	ldr	r0, [pc, #44]	; (8004b2c <send_path+0x148>)
 8004b00:	f004 fc22 	bl	8009348 <siprintf>
	writeMsg(&handler_USART_USB, bufferMsg);
 8004b04:	4909      	ldr	r1, [pc, #36]	; (8004b2c <send_path+0x148>)
 8004b06:	4807      	ldr	r0, [pc, #28]	; (8004b24 <send_path+0x140>)
 8004b08:	f003 fb3d 	bl	8008186 <writeMsg>
  for(int i=0;i<row;i++)
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	3301      	adds	r3, #1
 8004b10:	633b      	str	r3, [r7, #48]	; 0x30
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b16:	429a      	cmp	r2, r3
 8004b18:	dbc4      	blt.n	8004aa4 <send_path+0xc0>
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	bf00      	nop
 8004b1e:	3738      	adds	r7, #56	; 0x38
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	2000029c 	.word	0x2000029c
 8004b28:	080104c0 	.word	0x080104c0
 8004b2c:	200002a8 	.word	0x200002a8

08004b30 <straight_line>:


//------------------------------Inicio de la definicion de funciones del modo----------------------------------------
//------linea recta------
void straight_line(uint8_t dutty)   //a = [mm]
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	71fb      	strb	r3, [r7, #7]
	//---------Calculo parametros de la linea recta---------
	calculation_parameter_distance(&parameter_Path_Robot);
 8004b3a:	4871      	ldr	r0, [pc, #452]	; (8004d00 <straight_line+0x1d0>)
 8004b3c:	f7fd ffdc 	bl	8002af8 <calculation_parameter_distance>
	//---------Configuracion coordenadas medidas---------
	//Coordenadas Globales
	parameter_Posicion_Robot.grad_grobal += ang_complementary;
 8004b40:	4b70      	ldr	r3, [pc, #448]	; (8004d04 <straight_line+0x1d4>)
 8004b42:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004b46:	4b70      	ldr	r3, [pc, #448]	; (8004d08 <straight_line+0x1d8>)
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f7fb fbb6 	bl	80002bc <__adddf3>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	496b      	ldr	r1, [pc, #428]	; (8004d04 <straight_line+0x1d4>)
 8004b56:	e9c1 2304 	strd	r2, r3, [r1, #16]
	//Reiniciaos Coordenadas relativas
	parameter_Posicion_Robot.xr_position = parameter_Posicion_Robot.yr_position = 0;
 8004b5a:	496a      	ldr	r1, [pc, #424]	; (8004d04 <straight_line+0x1d4>)
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8004b68:	4b66      	ldr	r3, [pc, #408]	; (8004d04 <straight_line+0x1d4>)
 8004b6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b6e:	4965      	ldr	r1, [pc, #404]	; (8004d04 <straight_line+0x1d4>)
 8004b70:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.phi_relativo = 0;
 8004b74:	4963      	ldr	r1, [pc, #396]	; (8004d04 <straight_line+0x1d4>)
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.grad_relativo = 0;
 8004b82:	4960      	ldr	r1, [pc, #384]	; (8004d04 <straight_line+0x1d4>)
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	e9c1 2300 	strd	r2, r3, [r1]
	ang_for_Displament_ICR = 0;
 8004b90:	495e      	ldr	r1, [pc, #376]	; (8004d0c <straight_line+0x1dc>)
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	e9c1 2300 	strd	r2, r3, [r1]
	//---------Configuracion coordenadas teoricas---------
	parameter_Path_Robot.rotative_Grad_Relative = 0;
 8004b9e:	4b58      	ldr	r3, [pc, #352]	; (8004d00 <straight_line+0x1d0>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
	//Calculos extra
	cos_cal = cos(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 8004ba4:	4b57      	ldr	r3, [pc, #348]	; (8004d04 <straight_line+0x1d4>)
 8004ba6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004baa:	a353      	add	r3, pc, #332	; (adr r3, 8004cf8 <straight_line+0x1c8>)
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f7fb fd3a 	bl	8000628 <__aeabi_dmul>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4619      	mov	r1, r3
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	4b53      	ldr	r3, [pc, #332]	; (8004d10 <straight_line+0x1e0>)
 8004bc2:	f7fb fe5b 	bl	800087c <__aeabi_ddiv>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	ec43 2b17 	vmov	d7, r2, r3
 8004bce:	eeb0 0a47 	vmov.f32	s0, s14
 8004bd2:	eef0 0a67 	vmov.f32	s1, s15
 8004bd6:	f008 fdf7 	bl	800d7c8 <cos>
 8004bda:	ec53 2b10 	vmov	r2, r3, d0
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	f7fc f819 	bl	8000c18 <__aeabi_d2f>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4a4a      	ldr	r2, [pc, #296]	; (8004d14 <straight_line+0x1e4>)
 8004bea:	6013      	str	r3, [r2, #0]
	sin_cal = sin(((parameter_Posicion_Robot.grad_grobal*M_PI)/180));
 8004bec:	4b45      	ldr	r3, [pc, #276]	; (8004d04 <straight_line+0x1d4>)
 8004bee:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004bf2:	a341      	add	r3, pc, #260	; (adr r3, 8004cf8 <straight_line+0x1c8>)
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f7fb fd16 	bl	8000628 <__aeabi_dmul>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4610      	mov	r0, r2
 8004c02:	4619      	mov	r1, r3
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	4b41      	ldr	r3, [pc, #260]	; (8004d10 <straight_line+0x1e0>)
 8004c0a:	f7fb fe37 	bl	800087c <__aeabi_ddiv>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	ec43 2b17 	vmov	d7, r2, r3
 8004c16:	eeb0 0a47 	vmov.f32	s0, s14
 8004c1a:	eef0 0a67 	vmov.f32	s1, s15
 8004c1e:	f008 fe6f 	bl	800d900 <sin>
 8004c22:	ec53 2b10 	vmov	r2, r3, d0
 8004c26:	4610      	mov	r0, r2
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f7fb fff5 	bl	8000c18 <__aeabi_d2f>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4a39      	ldr	r2, [pc, #228]	; (8004d18 <straight_line+0x1e8>)
 8004c32:	6013      	str	r3, [r2, #0]
	//-----------------PID-------------------------
	//Establecemos valores iniciales
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_prev = 0;
 8004c34:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <straight_line+0x1ec>)
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	60da      	str	r2, [r3, #12]
 8004c3c:	4b37      	ldr	r3, [pc, #220]	; (8004d1c <straight_line+0x1ec>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4a36      	ldr	r2, [pc, #216]	; (8004d1c <straight_line+0x1ec>)
 8004c42:	6053      	str	r3, [r2, #4]
	handler_Motor_L.parametersMotor.parametersPID.u =  handler_Motor_L.parametersMotor.parametersPID.e_intel = 0;
 8004c44:	4b35      	ldr	r3, [pc, #212]	; (8004d1c <straight_line+0x1ec>)
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	609a      	str	r2, [r3, #8]
 8004c4c:	4b33      	ldr	r3, [pc, #204]	; (8004d1c <straight_line+0x1ec>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4a32      	ldr	r2, [pc, #200]	; (8004d1c <straight_line+0x1ec>)
 8004c52:	6013      	str	r3, [r2, #0]
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_prev = 0;
 8004c54:	4b32      	ldr	r3, [pc, #200]	; (8004d20 <straight_line+0x1f0>)
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	60da      	str	r2, [r3, #12]
 8004c5c:	4b30      	ldr	r3, [pc, #192]	; (8004d20 <straight_line+0x1f0>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4a2f      	ldr	r2, [pc, #188]	; (8004d20 <straight_line+0x1f0>)
 8004c62:	6053      	str	r3, [r2, #4]
	handler_Motor_R.parametersMotor.parametersPID.u =  handler_Motor_R.parametersMotor.parametersPID.e_intel = 0;
 8004c64:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <straight_line+0x1f0>)
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	609a      	str	r2, [r3, #8]
 8004c6c:	4b2c      	ldr	r3, [pc, #176]	; (8004d20 <straight_line+0x1f0>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	4a2b      	ldr	r2, [pc, #172]	; (8004d20 <straight_line+0x1f0>)
 8004c72:	6013      	str	r3, [r2, #0]
	parameter_PID_distace.e = parameter_PID_distace.e_prev = parameter_PID_distace.u =  parameter_PID_distace.e_intel = 0;
 8004c74:	4b2b      	ldr	r3, [pc, #172]	; (8004d24 <straight_line+0x1f4>)
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <straight_line+0x1f4>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	4a28      	ldr	r2, [pc, #160]	; (8004d24 <straight_line+0x1f4>)
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <straight_line+0x1f4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a26      	ldr	r2, [pc, #152]	; (8004d24 <straight_line+0x1f4>)
 8004c8a:	60d3      	str	r3, [r2, #12]
 8004c8c:	4b25      	ldr	r3, [pc, #148]	; (8004d24 <straight_line+0x1f4>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4a24      	ldr	r2, [pc, #144]	; (8004d24 <straight_line+0x1f4>)
 8004c92:	6053      	str	r3, [r2, #4]
	//-------------Configruacion Modo--------------
	//Definimos el dutty inicial
	handler_Motor_L.configMotor.new_dutty = duttySetPoint;
 8004c94:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <straight_line+0x1f8>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	ee07 3a90 	vmov	s15, r3
 8004c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca0:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <straight_line+0x1ec>)
 8004ca2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	handler_Motor_R.configMotor.new_dutty = duttySetPoint;
 8004ca6:	4b20      	ldr	r3, [pc, #128]	; (8004d28 <straight_line+0x1f8>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb2:	4b1b      	ldr	r3, [pc, #108]	; (8004d20 <straight_line+0x1f0>)
 8004cb4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	//Reiniciamos variables
	time_accumulated = counting_action = flag_action = 0;
 8004cb8:	4b1c      	ldr	r3, [pc, #112]	; (8004d2c <straight_line+0x1fc>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	4b1c      	ldr	r3, [pc, #112]	; (8004d30 <straight_line+0x200>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	4b1a      	ldr	r3, [pc, #104]	; (8004d30 <straight_line+0x200>)
 8004cc6:	881a      	ldrh	r2, [r3, #0]
 8004cc8:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <straight_line+0x204>)
 8004cca:	801a      	strh	r2, [r3, #0]
	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(1, dutty, dutty);
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	ee07 3a10 	vmov	s14, r3
 8004cdc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ce0:	eef0 0a47 	vmov.f32	s1, s14
 8004ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ce8:	2001      	movs	r0, #1
 8004cea:	f000 f867 	bl	8004dbc <config_mode>
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	54442d18 	.word	0x54442d18
 8004cfc:	400921fb 	.word	0x400921fb
 8004d00:	20008f78 	.word	0x20008f78
 8004d04:	20008fe8 	.word	0x20008fe8
 8004d08:	20009060 	.word	0x20009060
 8004d0c:	20009058 	.word	0x20009058
 8004d10:	40668000 	.word	0x40668000
 8004d14:	20009040 	.word	0x20009040
 8004d18:	20009044 	.word	0x20009044
 8004d1c:	2000038c 	.word	0x2000038c
 8004d20:	20000318 	.word	0x20000318
 8004d24:	20008f58 	.word	0x20008f58
 8004d28:	20000018 	.word	0x20000018
 8004d2c:	2000942d 	.word	0x2000942d
 8004d30:	20009442 	.word	0x20009442
 8004d34:	20009440 	.word	0x20009440

08004d38 <turn_itself>:

//---------Giro sobre si mismo---------
void turn_itself(int16_t turn_grad)     //a = [grados], b = direccion giro
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	80fb      	strh	r3, [r7, #6]
	//-------------Configruacion Modo--------------
	//Definicion del angulo de giro
	parameter_Path_Robot.rotative_Grad += parameter_Path_Robot.rotative_Grad_Relative += turn_grad;
 8004d42:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <turn_itself+0x74>)
 8004d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	4a17      	ldr	r2, [pc, #92]	; (8004dac <turn_itself+0x74>)
 8004d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8004d50:	4b16      	ldr	r3, [pc, #88]	; (8004dac <turn_itself+0x74>)
 8004d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d54:	4b15      	ldr	r3, [pc, #84]	; (8004dac <turn_itself+0x74>)
 8004d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d58:	4413      	add	r3, r2
 8004d5a:	4a14      	ldr	r2, [pc, #80]	; (8004dac <turn_itself+0x74>)
 8004d5c:	6453      	str	r3, [r2, #68]	; 0x44
	//Cambiamso la direccion del motor
	if(turn_grad<0)
 8004d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	da0b      	bge.n	8004d7e <turn_itself+0x46>
	{
		//Definimos la direccion de giro
		parameter_Path_Robot.direction_turn = -1;
 8004d66:	4b11      	ldr	r3, [pc, #68]	; (8004dac <turn_itself+0x74>)
 8004d68:	22ff      	movs	r2, #255	; 0xff
 8004d6a:	701a      	strb	r2, [r3, #0]
		//Seleccionamos el motor derecho
		handler_Motor_Execute = &handler_Motor_R;
 8004d6c:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <turn_itself+0x78>)
 8004d6e:	4a11      	ldr	r2, [pc, #68]	; (8004db4 <turn_itself+0x7c>)
 8004d70:	601a      	str	r2, [r3, #0]
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8004d72:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <turn_itself+0x78>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fd fcc7 	bl	800270a <updateDirMotor>
 8004d7c:	e00a      	b.n	8004d94 <turn_itself+0x5c>
	}
	else
	{
		//Definimos la direccion de giro
		parameter_Path_Robot.direction_turn = 1;
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <turn_itself+0x74>)
 8004d80:	2201      	movs	r2, #1
 8004d82:	701a      	strb	r2, [r3, #0]
		//Seleccionamos el motor izquierdo
		handler_Motor_Execute = &handler_Motor_L;
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <turn_itself+0x78>)
 8004d86:	4a0c      	ldr	r2, [pc, #48]	; (8004db8 <turn_itself+0x80>)
 8004d88:	601a      	str	r2, [r3, #0]
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8004d8a:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <turn_itself+0x78>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fd fcbb 	bl	800270a <updateDirMotor>
	}

	//Cargamos la configuracion del modo e iniciamos el modo
	config_mode(2,20,21);
 8004d94:	eef3 0a05 	vmov.f32	s1, #53	; 0x41a80000  21.0
 8004d98:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8004d9c:	2002      	movs	r0, #2
 8004d9e:	f000 f80d 	bl	8004dbc <config_mode>
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20008f78 	.word	0x20008f78
 8004db0:	20009428 	.word	0x20009428
 8004db4:	20000318 	.word	0x20000318
 8004db8:	2000038c 	.word	0x2000038c

08004dbc <config_mode>:


void config_mode(uint8_t status, float dutty_L, float dutty_R)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8004dc8:	edc7 0a01 	vstr	s1, [r7, #4]
 8004dcc:	73fb      	strb	r3, [r7, #15]
	//Cargamos la configuracion
	config_motor(status, dutty_L, dutty_R, frequency_PWM_Motor); //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
 8004dce:	edd7 7a02 	vldr	s15, [r7, #8]
 8004dd2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004dd6:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <config_mode+0x58>)
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	eef0 0a67 	vmov.f32	s1, s15
 8004de8:	ed97 0a01 	vldr	s0, [r7, #4]
 8004dec:	ee17 1a10 	vmov	r1, s14
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fb51 	bl	8005498 <config_motor>
	//Iniciamos los motores
	status_motor(SET);
 8004df6:	2001      	movs	r0, #1
 8004df8:	f000 face 	bl	8005398 <status_motor>
	//Medimos el tiempo inicial
	sample_Gyro.timer_prev = getTicksMs();
 8004dfc:	f002 febc 	bl	8007b78 <getTicksMs>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4904      	ldr	r1, [pc, #16]	; (8004e18 <config_mode+0x5c>)
 8004e06:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000016 	.word	0x20000016
 8004e18:	20009030 	.word	0x20009030

08004e1c <init_coordinates>:

void init_coordinates(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
	//Reinicio de varibable
	ang_for_Displament_ICR = 0;
 8004e20:	493b      	ldr	r1, [pc, #236]	; (8004f10 <init_coordinates+0xf4>)
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	e9c1 2300 	strd	r2, r3, [r1]
	ang_complementary = 0;
 8004e2e:	4939      	ldr	r1, [pc, #228]	; (8004f14 <init_coordinates+0xf8>)
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	e9c1 2300 	strd	r2, r3, [r1]
	//Reinicio de parametros de la structura de la posicion del robot
	parameter_Posicion_Robot.grad_grobal = 0; parameter_Posicion_Robot.grad_relativo = 0; parameter_Posicion_Robot.phi_relativo = 0;
 8004e3c:	4936      	ldr	r1, [pc, #216]	; (8004f18 <init_coordinates+0xfc>)
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004e4a:	4933      	ldr	r1, [pc, #204]	; (8004f18 <init_coordinates+0xfc>)
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9c1 2300 	strd	r2, r3, [r1]
 8004e58:	492f      	ldr	r1, [pc, #188]	; (8004f18 <init_coordinates+0xfc>)
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9c1 2302 	strd	r2, r3, [r1, #8]
	parameter_Posicion_Robot.xg_position = 0; parameter_Posicion_Robot.xg_position_inicial = 0; parameter_Posicion_Robot.xr_position = 0;
 8004e66:	492c      	ldr	r1, [pc, #176]	; (8004f18 <init_coordinates+0xfc>)
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8004e74:	4928      	ldr	r1, [pc, #160]	; (8004f18 <init_coordinates+0xfc>)
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004e82:	4925      	ldr	r1, [pc, #148]	; (8004f18 <init_coordinates+0xfc>)
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	parameter_Posicion_Robot.yg_position = 0; parameter_Posicion_Robot.yg_position_inicial = 0; parameter_Posicion_Robot.yr_position = 0;
 8004e90:	4921      	ldr	r1, [pc, #132]	; (8004f18 <init_coordinates+0xfc>)
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004e9e:	491e      	ldr	r1, [pc, #120]	; (8004f18 <init_coordinates+0xfc>)
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8004eac:	491a      	ldr	r1, [pc, #104]	; (8004f18 <init_coordinates+0xfc>)
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Reinicio de parametros de la structura de path
	parameter_Path_Robot.goal_Position_x = 0; parameter_Path_Robot.goal_Position_y = 0;
 8004eba:	4918      	ldr	r1, [pc, #96]	; (8004f1c <init_coordinates+0x100>)
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8004ec8:	4914      	ldr	r1, [pc, #80]	; (8004f1c <init_coordinates+0x100>)
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	f04f 0300 	mov.w	r3, #0
 8004ed2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	parameter_Path_Robot.line_Distance = 0;
 8004ed6:	4b11      	ldr	r3, [pc, #68]	; (8004f1c <init_coordinates+0x100>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	649a      	str	r2, [r3, #72]	; 0x48
	parameter_Path_Robot.rotative_Grad = 0; parameter_Path_Robot.rotative_Grad_Relative = 0;
 8004edc:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <init_coordinates+0x100>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ee2:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <init_coordinates+0x100>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	641a      	str	r2, [r3, #64]	; 0x40
	parameter_Path_Robot.start_position_x = 0; parameter_Path_Robot.start_position_y = 0;
 8004ee8:	490c      	ldr	r1, [pc, #48]	; (8004f1c <init_coordinates+0x100>)
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004ef6:	4909      	ldr	r1, [pc, #36]	; (8004f1c <init_coordinates+0x100>)
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	20009058 	.word	0x20009058
 8004f14:	20009060 	.word	0x20009060
 8004f18:	20008fe8 	.word	0x20008fe8
 8004f1c:	20008f78 	.word	0x20008f78

08004f20 <set_operation_square>:
//-----------------------------Fin de la definicio de funciones del modo--------------------------------------------


//-------------Inicio de la definicion de las funciones para la contruccion de la lista de operaciones ----------------------------------
void set_operation_square(Parameters_Operation_t *prtList, double dis_side, double direction_square)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b0a8      	sub	sp, #160	; 0xa0
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6178      	str	r0, [r7, #20]
 8004f28:	ed87 0b02 	vstr	d0, [r7, #8]
 8004f2c:	ed87 1b00 	vstr	d1, [r7]
	//Definicion de variables
	Parameter_build_t parameter_build = {0};
 8004f30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004f34:	2230      	movs	r2, #48	; 0x30
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f003 fb7d 	bl	8008638 <memset>
	int8_t value_side = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	//Definicion de las coordenadas del cuadrado
	if(direction_square == 0){value_side = 1;}
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f50:	f7fb fdd2 	bl	8000af8 <__aeabi_dcmpeq>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <set_operation_square+0x42>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8004f60:	e002      	b.n	8004f68 <set_operation_square+0x48>
	else{ value_side = -1;}
 8004f62:	23ff      	movs	r3, #255	; 0xff
 8004f64:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	double coordination_position_square[2][5] = {{0, dis_side, dis_side, 0, 0},{0, 0, value_side*dis_side,value_side*dis_side,0}};
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8004f74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f78:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f80:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004fb4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fb facb 	bl	8000554 <__aeabi_i2d>
 8004fbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fc2:	f7fb fb31 	bl	8000628 <__aeabi_dmul>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8004fce:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fb fabe 	bl	8000554 <__aeabi_i2d>
 8004fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fdc:	f7fb fb24 	bl	8000628 <__aeabi_dmul>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	//Definimos la posicion inicial del cuadrado
	parameter_build.initline_x = coordination_position_square[0][0]; parameter_build.initline_y = coordination_position_square[0][0];
 8004ff4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ff8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8004ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005000:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	parameter_build.grad_vector_init = 0; parameter_build.number_operation = 0;
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8005010:	2300      	movs	r3, #0
 8005012:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	parameter_build.delta_before[0] = dis_side; parameter_build.delta_before[1] = 0;
 8005016:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800501a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	//Construccion de las operaciones
	for(uint8_t i=1; i<5; i++)
 800502a:	2301      	movs	r3, #1
 800502c:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8005030:	e023      	b.n	800507a <set_operation_square+0x15a>
	{
		build_Operation(prtList, &parameter_build, coordination_position_square[0][i], coordination_position_square[1][i]);
 8005032:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	33a0      	adds	r3, #160	; 0xa0
 800503a:	443b      	add	r3, r7
 800503c:	3b88      	subs	r3, #136	; 0x88
 800503e:	ed93 7b00 	vldr	d7, [r3]
 8005042:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8005046:	3305      	adds	r3, #5
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	33a0      	adds	r3, #160	; 0xa0
 800504c:	443b      	add	r3, r7
 800504e:	3b88      	subs	r3, #136	; 0x88
 8005050:	ed93 6b00 	vldr	d6, [r3]
 8005054:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005058:	eeb0 1a46 	vmov.f32	s2, s12
 800505c:	eef0 1a66 	vmov.f32	s3, s13
 8005060:	eeb0 0a47 	vmov.f32	s0, s14
 8005064:	eef0 0a67 	vmov.f32	s1, s15
 8005068:	4619      	mov	r1, r3
 800506a:	6978      	ldr	r0, [r7, #20]
 800506c:	f7fd fb7c 	bl	8002768 <build_Operation>
	for(uint8_t i=1; i<5; i++)
 8005070:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8005074:	3301      	adds	r3, #1
 8005076:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800507a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800507e:	2b04      	cmp	r3, #4
 8005080:	d9d7      	bls.n	8005032 <set_operation_square+0x112>
	}
	//Agregamos indicador de la operacion final
	prtList[parameter_build.number_operation+1].operacion = NULL_OPERATION;
 8005082:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8005086:	3301      	adds	r3, #1
 8005088:	015b      	lsls	r3, r3, #5
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4413      	add	r3, r2
 800508e:	2200      	movs	r2, #0
 8005090:	701a      	strb	r2, [r3, #0]
}
 8005092:	bf00      	nop
 8005094:	37a0      	adds	r7, #160	; 0xa0
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <set_operation_AStar>:


void set_operation_AStar(Parameters_Operation_t *prtList, file_cell_t *file_cell, Parameters_Position_t *ptrParameterPosition, Parameters_Path_t *ptrParameterPath)
{
 800509c:	b5b0      	push	{r4, r5, r7, lr}
 800509e:	b092      	sub	sp, #72	; 0x48
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
	//Definicion de variables
	Parameter_build_t parameter_build = {0};
 80050aa:	f107 0310 	add.w	r3, r7, #16
 80050ae:	2230      	movs	r2, #48	; 0x30
 80050b0:	2100      	movs	r1, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	f003 fac0 	bl	8008638 <memset>
	//Definimos la posicion inicial del cuadrado
	//-----------------NOTA: RECORDAR QUE EL OPPY ESTA INICIALMENTE ORIENTADO 90 GRADOS CON RESPECTO AL EJE X---------------
	ptrParameterPath->rotative_Grad = ptrParameterPosition->grad_grobal = 90;
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	4b67      	ldr	r3, [pc, #412]	; (800525c <set_operation_AStar+0x1c0>)
 80050c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	225a      	movs	r2, #90	; 0x5a
 80050c8:	645a      	str	r2, [r3, #68]	; 0x44
	parameter_build.initline_x = ptrParameterPosition->xg_position_inicial = ptrParameterPath->goal_Position_x = (file_cell->ptrCell_parent[0]->coor_x)*10;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80050d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050da:	ee17 0a90 	vmov	r0, s15
 80050de:	f7fb fa4b 	bl	8000578 <__aeabi_f2d>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	6839      	ldr	r1, [r7, #0]
 80050e8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80050fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	parameter_build.initline_y = ptrParameterPosition->yg_position_inicial = ptrParameterPath->goal_Position_y = (file_cell->ptrCell_parent[0]->coor_y)*10;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	edd3 7a02 	vldr	s15, [r3, #8]
 800510a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800510e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005112:	ee17 0a90 	vmov	r0, s15
 8005116:	f7fb fa2f 	bl	8000578 <__aeabi_f2d>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005136:	e9c7 2306 	strd	r2, r3, [r7, #24]
	parameter_build.grad_vector_init = 0; parameter_build.number_operation = parameter_build.routelist = 0;
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005146:	2300      	movs	r3, #0
 8005148:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800514c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005150:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	parameter_build.delta_before[0] = 0; parameter_build.delta_before[1] = 10;
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	4b3e      	ldr	r3, [pc, #248]	; (8005260 <set_operation_AStar+0x1c4>)
 8005166:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	//Construccion de las operaciones
	for(uint8_t i=1; i<100; i++)
 800516a:	2301      	movs	r3, #1
 800516c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005170:	e03e      	b.n	80051f0 <set_operation_AStar+0x154>
	{
		//Comprobamos si la celda no es un elemento nulo
		if(file_cell->ptrCell_parent[i] != NULL)
 8005172:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d03b      	beq.n	80051fa <set_operation_AStar+0x15e>
		{
			//Construimos la operacion
			build_Operation(prtList, &parameter_build, (file_cell->ptrCell_parent[i]->coor_x)*10, (file_cell->ptrCell_parent[i]->coor_y)*10);
 8005182:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005192:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800519a:	ee17 0a90 	vmov	r0, s15
 800519e:	f7fb f9eb 	bl	8000578 <__aeabi_f2d>
 80051a2:	4604      	mov	r4, r0
 80051a4:	460d      	mov	r5, r1
 80051a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80051b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80051ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051be:	ee17 0a90 	vmov	r0, s15
 80051c2:	f7fb f9d9 	bl	8000578 <__aeabi_f2d>
 80051c6:	f107 0310 	add.w	r3, r7, #16
 80051ca:	ec41 0b11 	vmov	d1, r0, r1
 80051ce:	ec45 4b10 	vmov	d0, r4, r5
 80051d2:	4619      	mov	r1, r3
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f7fd fac7 	bl	8002768 <build_Operation>
			//Aumentamos el valor en el recorrido
			parameter_build.routelist++;
 80051da:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80051de:	3301      	adds	r3, #1
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	for(uint8_t i=1; i<100; i++)
 80051e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051ea:	3301      	adds	r3, #1
 80051ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80051f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051f4:	2b63      	cmp	r3, #99	; 0x63
 80051f6:	d9bc      	bls.n	8005172 <set_operation_AStar+0xd6>
 80051f8:	e000      	b.n	80051fc <set_operation_AStar+0x160>
		}
		else{break;}
 80051fa:	bf00      	nop
	}
	//Se Agrega la operacion final para llegar al goal
	//Construimos la operacion
	build_Operation(prtList, &parameter_build, (file_cell->ptrCell_file->coor_x)*10, (file_cell->ptrCell_file->coor_y)*10);
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	edd3 7a01 	vldr	s15, [r3, #4]
 8005204:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800520c:	ee17 0a90 	vmov	r0, s15
 8005210:	f7fb f9b2 	bl	8000578 <__aeabi_f2d>
 8005214:	4604      	mov	r4, r0
 8005216:	460d      	mov	r5, r1
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005220:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005228:	ee17 0a90 	vmov	r0, s15
 800522c:	f7fb f9a4 	bl	8000578 <__aeabi_f2d>
 8005230:	f107 0310 	add.w	r3, r7, #16
 8005234:	ec41 0b11 	vmov	d1, r0, r1
 8005238:	ec45 4b10 	vmov	d0, r4, r5
 800523c:	4619      	mov	r1, r3
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f7fd fa92 	bl	8002768 <build_Operation>
	//Agregamos indicador de la operacion final
	prtList[parameter_build.number_operation+1].operacion = NULL_OPERATION;
 8005244:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005248:	3301      	adds	r3, #1
 800524a:	015b      	lsls	r3, r3, #5
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
}
 8005254:	bf00      	nop
 8005256:	3748      	adds	r7, #72	; 0x48
 8005258:	46bd      	mov	sp, r7
 800525a:	bdb0      	pop	{r4, r5, r7, pc}
 800525c:	40568000 	.word	0x40568000
 8005260:	40240000 	.word	0x40240000

08005264 <PID_simple>:

//----------------------------Inicio de la definicion de las funciones-----------------------------------------


void PID_simple(Parameters_PID_t *ptrPIDHandler, float timer, float setpoint, float measure)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005270:	edc7 0a01 	vstr	s1, [r7, #4]
 8005274:	ed87 1a00 	vstr	s2, [r7]
	//Calculo del error
	ptrPIDHandler->e = setpoint-measure;
 8005278:	ed97 7a01 	vldr	s14, [r7, #4]
 800527c:	edd7 7a00 	vldr	s15, [r7]
 8005280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float pro =  ptrPIDHandler->kp*ptrPIDHandler->e;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	ed93 7a04 	vldr	s14, [r3, #16]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	edd3 7a01 	vldr	s15, [r3, #4]
 8005296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529a:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->e_intel +=  ptrPIDHandler->e*timer;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80052aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80052ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	edc3 7a02 	vstr	s15, [r3, #8]
	float deriv =  ptrPIDHandler->kd*(ptrPIDHandler->e - ptrPIDHandler->e_prev)/timer;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	ed93 7a06 	vldr	s14, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80052ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80052d2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80052d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80052da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052de:	edc7 7a04 	vstr	s15, [r7, #16]
	ptrPIDHandler->u =  pro + ptrPIDHandler->ki*ptrPIDHandler->e_intel + deriv;        //Ley del controlador PID discreto
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	ed93 7a05 	vldr	s14, [r3, #20]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80052ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80052f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80052fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	edc3 7a00 	vstr	s15, [r3]
     //Retorno a los valores reales
	ptrPIDHandler->e_prev = ptrPIDHandler->e;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	60da      	str	r2, [r3, #12]
}
 8005310:	bf00      	nop
 8005312:	371c      	adds	r7, #28
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <correction>:

void correction(Motor_Handler_t *ptrMotorHandler)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
	//Definimos variables auxiliares
	float port_dutty = 0;
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
	//Guardamos valor
	port_dutty = ptrMotorHandler->configMotor.new_dutty;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	60fb      	str	r3, [r7, #12]
    //Saturo el porcentaje de dutty en un tope maximo y minimo
    if (port_dutty >= 60) { port_dutty = 60; }
 8005330:	edd7 7a03 	vldr	s15, [r7, #12]
 8005334:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800538c <correction+0x70>
 8005338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800533c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005340:	db02      	blt.n	8005348 <correction+0x2c>
 8005342:	4b13      	ldr	r3, [pc, #76]	; (8005390 <correction+0x74>)
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	e018      	b.n	800537a <correction+0x5e>
    else if(port_dutty <= duttySetPoint-5) { port_dutty = duttySetPoint-5; }
 8005348:	4b12      	ldr	r3, [pc, #72]	; (8005394 <correction+0x78>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	3b05      	subs	r3, #5
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005356:	ed97 7a03 	vldr	s14, [r7, #12]
 800535a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800535e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005362:	d809      	bhi.n	8005378 <correction+0x5c>
 8005364:	4b0b      	ldr	r3, [pc, #44]	; (8005394 <correction+0x78>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	3b05      	subs	r3, #5
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005372:	edc7 7a03 	vstr	s15, [r7, #12]
 8005376:	e000      	b.n	800537a <correction+0x5e>
    else{ __NOP();}
 8005378:	bf00      	nop

    //Actualizamoe el valor del dutty
    updateDuttyMotor(ptrMotorHandler, port_dutty);
 800537a:	ed97 0a03 	vldr	s0, [r7, #12]
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fd f9ac 	bl	80026dc <updateDuttyMotor>
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	42700000 	.word	0x42700000
 8005390:	42700000 	.word	0x42700000
 8005394:	20000018 	.word	0x20000018

08005398 <status_motor>:

//--------------------Operacion Motor----------------------
void status_motor(uint8_t status)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	4603      	mov	r3, r0
 80053a0:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d134      	bne.n	8005412 <status_motor+0x7a>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 80053a8:	4b37      	ldr	r3, [pc, #220]	; (8005488 <status_motor+0xf0>)
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	2101      	movs	r1, #1
 80053ae:	4618      	mov	r0, r3
 80053b0:	f002 fa0c 	bl	80077cc <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 80053b4:	4b35      	ldr	r3, [pc, #212]	; (800548c <status_motor+0xf4>)
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	2101      	movs	r1, #1
 80053ba:	4618      	mov	r0, r3
 80053bc:	f002 fa06 	bl	80077cc <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 80053c0:	4b31      	ldr	r3, [pc, #196]	; (8005488 <status_motor+0xf0>)
 80053c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c4:	4b30      	ldr	r3, [pc, #192]	; (8005488 <status_motor+0xf0>)
 80053c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f001 fd22 	bl	8006e1c <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 80053d8:	4b2c      	ldr	r3, [pc, #176]	; (800548c <status_motor+0xf4>)
 80053da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053dc:	4b2b      	ldr	r3, [pc, #172]	; (800548c <status_motor+0xf4>)
 80053de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f001 fd16 	bl	8006e1c <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 80053f0:	4b25      	ldr	r3, [pc, #148]	; (8005488 <status_motor+0xf0>)
 80053f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f4:	2180      	movs	r1, #128	; 0x80
 80053f6:	4618      	mov	r0, r3
 80053f8:	f001 fd10 	bl	8006e1c <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 80053fc:	4b23      	ldr	r3, [pc, #140]	; (800548c <status_motor+0xf4>)
 80053fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005400:	2180      	movs	r1, #128	; 0x80
 8005402:	4618      	mov	r0, r3
 8005404:	f001 fd0a 	bl	8006e1c <GPIO_writePin>
		//Activamos la interrupcion
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_ENABLE);
 8005408:	2101      	movs	r1, #1
 800540a:	4821      	ldr	r0, [pc, #132]	; (8005490 <status_motor+0xf8>)
 800540c:	f000 fac4 	bl	8005998 <statusiInterruptionTimer>
		//Reiniciamos Bandera
		flag_mode = 0;
		//Desactivamos interrupcion
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
	}
}
 8005410:	e036      	b.n	8005480 <status_motor+0xe8>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 8005412:	4b1d      	ldr	r3, [pc, #116]	; (8005488 <status_motor+0xf0>)
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f002 f9d7 	bl	80077cc <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 800541e:	4b1b      	ldr	r3, [pc, #108]	; (800548c <status_motor+0xf4>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	2100      	movs	r1, #0
 8005424:	4618      	mov	r0, r3
 8005426:	f002 f9d1 	bl	80077cc <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 800542a:	4b17      	ldr	r3, [pc, #92]	; (8005488 <status_motor+0xf0>)
 800542c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542e:	4b16      	ldr	r3, [pc, #88]	; (8005488 <status_motor+0xf0>)
 8005430:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005434:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005438:	b2db      	uxtb	r3, r3
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f001 fced 	bl	8006e1c <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 8005442:	4b12      	ldr	r3, [pc, #72]	; (800548c <status_motor+0xf4>)
 8005444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005446:	4b11      	ldr	r3, [pc, #68]	; (800548c <status_motor+0xf4>)
 8005448:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800544c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005450:	b2db      	uxtb	r3, r3
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f001 fce1 	bl	8006e1c <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 800545a:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <status_motor+0xf0>)
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	2101      	movs	r1, #1
 8005460:	4618      	mov	r0, r3
 8005462:	f001 fcdb 	bl	8006e1c <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <status_motor+0xf4>)
 8005468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546a:	2101      	movs	r1, #1
 800546c:	4618      	mov	r0, r3
 800546e:	f001 fcd5 	bl	8006e1c <GPIO_writePin>
		flag_mode = 0;
 8005472:	4b08      	ldr	r3, [pc, #32]	; (8005494 <status_motor+0xfc>)
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
		statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
 8005478:	2100      	movs	r1, #0
 800547a:	4805      	ldr	r0, [pc, #20]	; (8005490 <status_motor+0xf8>)
 800547c:	f000 fa8c 	bl	8005998 <statusiInterruptionTimer>
}
 8005480:	bf00      	nop
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	2000038c 	.word	0x2000038c
 800548c:	20000318 	.word	0x20000318
 8005490:	200003e0 	.word	0x200003e0
 8005494:	2000942e 	.word	0x2000942e

08005498 <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third)  //Tipo de Estudio, por dutty L, por dutty R, fre pwm [hz]
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80054a6:	edc7 0a00 	vstr	s1, [r7]
 80054aa:	73fb      	strb	r3, [r7, #15]
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 80054ac:	4b17      	ldr	r3, [pc, #92]	; (800550c <config_motor+0x74>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	839a      	strh	r2, [r3, #28]
	handler_Motor_L.parametersMotor.count = 0;
 80054b2:	4b17      	ldr	r3, [pc, #92]	; (8005510 <config_motor+0x78>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	839a      	strh	r2, [r3, #28]
	//Actualizamos el valor del dutty y frecuencia
	value_period = 100000/third;
 80054b8:	eddf 6a16 	vldr	s13, [pc, #88]	; 8005514 <config_motor+0x7c>
 80054bc:	ed97 7a00 	vldr	s14, [r7]
 80054c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054c8:	ee17 3a90 	vmov	r3, s15
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	4b12      	ldr	r3, [pc, #72]	; (8005518 <config_motor+0x80>)
 80054d0:	801a      	strh	r2, [r3, #0]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 80054d2:	4b11      	ldr	r3, [pc, #68]	; (8005518 <config_motor+0x80>)
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	4619      	mov	r1, r3
 80054d8:	4810      	ldr	r0, [pc, #64]	; (800551c <config_motor+0x84>)
 80054da:	f000 fa7d 	bl	80059d8 <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, second);
 80054de:	ed97 0a01 	vldr	s0, [r7, #4]
 80054e2:	480a      	ldr	r0, [pc, #40]	; (800550c <config_motor+0x74>)
 80054e4:	f7fd f8fa 	bl	80026dc <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, firth);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054f2:	eeb0 0a67 	vmov.f32	s0, s15
 80054f6:	4806      	ldr	r0, [pc, #24]	; (8005510 <config_motor+0x78>)
 80054f8:	f7fd f8f0 	bl	80026dc <updateDuttyMotor>
	//Cambio valor bandera
	flag_mode=status;
 80054fc:	4a08      	ldr	r2, [pc, #32]	; (8005520 <config_motor+0x88>)
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	7013      	strb	r3, [r2, #0]
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000318 	.word	0x20000318
 8005510:	2000038c 	.word	0x2000038c
 8005514:	47c35000 	.word	0x47c35000
 8005518:	20000012 	.word	0x20000012
 800551c:	200003d0 	.word	0x200003d0
 8005520:	2000942e 	.word	0x2000942e

08005524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005524:	480d      	ldr	r0, [pc, #52]	; (800555c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005526:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005528:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800552c:	480c      	ldr	r0, [pc, #48]	; (8005560 <LoopForever+0x6>)
  ldr r1, =_edata
 800552e:	490d      	ldr	r1, [pc, #52]	; (8005564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005530:	4a0d      	ldr	r2, [pc, #52]	; (8005568 <LoopForever+0xe>)
  movs r3, #0
 8005532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005534:	e002      	b.n	800553c <LoopCopyDataInit>

08005536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800553a:	3304      	adds	r3, #4

0800553c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800553c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800553e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005540:	d3f9      	bcc.n	8005536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005542:	4a0a      	ldr	r2, [pc, #40]	; (800556c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005544:	4c0a      	ldr	r4, [pc, #40]	; (8005570 <LoopForever+0x16>)
  movs r3, #0
 8005546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005548:	e001      	b.n	800554e <LoopFillZerobss>

0800554a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800554a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800554c:	3204      	adds	r2, #4

0800554e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800554e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005550:	d3fb      	bcc.n	800554a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005552:	f003 f84d 	bl	80085f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005556:	f7fd fecb 	bl	80032f0 <main>

0800555a <LoopForever>:

LoopForever:
    b LoopForever
 800555a:	e7fe      	b.n	800555a <LoopForever>
  ldr   r0, =_estack
 800555c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005564:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005568:	08010c18 	.word	0x08010c18
  ldr r2, =_sbss
 800556c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005570:	20009d18 	.word	0x20009d18

08005574 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005574:	e7fe      	b.n	8005574 <ADC_IRQHandler>

08005576 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005576:	b480      	push	{r7}
 8005578:	af00      	add	r7, sp, #0
	return 1;
 800557a:	2301      	movs	r3, #1
}
 800557c:	4618      	mov	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <_kill>:

int _kill(int pid, int sig)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005590:	f003 f828 	bl	80085e4 <__errno>
 8005594:	4603      	mov	r3, r0
 8005596:	2216      	movs	r2, #22
 8005598:	601a      	str	r2, [r3, #0]
	return -1;
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <_exit>:

void _exit (int status)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80055ae:	f04f 31ff 	mov.w	r1, #4294967295
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff ffe7 	bl	8005586 <_kill>
	while (1) {}		/* Make sure we hang here */
 80055b8:	e7fe      	b.n	80055b8 <_exit+0x12>

080055ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	e00a      	b.n	80055e2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80055cc:	f3af 8000 	nop.w
 80055d0:	4601      	mov	r1, r0
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	60ba      	str	r2, [r7, #8]
 80055d8:	b2ca      	uxtb	r2, r1
 80055da:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	3301      	adds	r3, #1
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	dbf0      	blt.n	80055cc <_read+0x12>
	}

return len;
 80055ea:	687b      	ldr	r3, [r7, #4]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	e009      	b.n	800561a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	60ba      	str	r2, [r7, #8]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	3301      	adds	r3, #1
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	429a      	cmp	r2, r3
 8005620:	dbf1      	blt.n	8005606 <_write+0x12>
	}
	return len;
 8005622:	687b      	ldr	r3, [r7, #4]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <_close>:

int _close(int file)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	return -1;
 8005634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005654:	605a      	str	r2, [r3, #4]
	return 0;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <_isatty>:

int _isatty(int file)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
	return 1;
 800566c:	2301      	movs	r3, #1
}
 800566e:	4618      	mov	r0, r3
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800567a:	b480      	push	{r7}
 800567c:	b085      	sub	sp, #20
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
	return 0;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800569c:	4a14      	ldr	r2, [pc, #80]	; (80056f0 <_sbrk+0x5c>)
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <_sbrk+0x60>)
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056a8:	4b13      	ldr	r3, [pc, #76]	; (80056f8 <_sbrk+0x64>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d102      	bne.n	80056b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056b0:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <_sbrk+0x64>)
 80056b2:	4a12      	ldr	r2, [pc, #72]	; (80056fc <_sbrk+0x68>)
 80056b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056b6:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <_sbrk+0x64>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4413      	add	r3, r2
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d207      	bcs.n	80056d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056c4:	f002 ff8e 	bl	80085e4 <__errno>
 80056c8:	4603      	mov	r3, r0
 80056ca:	220c      	movs	r2, #12
 80056cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056ce:	f04f 33ff 	mov.w	r3, #4294967295
 80056d2:	e009      	b.n	80056e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056d4:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <_sbrk+0x64>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056da:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <_sbrk+0x64>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4413      	add	r3, r2
 80056e2:	4a05      	ldr	r2, [pc, #20]	; (80056f8 <_sbrk+0x64>)
 80056e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056e6:	68fb      	ldr	r3, [r7, #12]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20020000 	.word	0x20020000
 80056f4:	00000400 	.word	0x00000400
 80056f8:	2000948c 	.word	0x2000948c
 80056fc:	20009d18 	.word	0x20009d18

08005700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800570a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570e:	2b00      	cmp	r3, #0
 8005710:	db0b      	blt.n	800572a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	f003 021f 	and.w	r2, r3, #31
 8005718:	4907      	ldr	r1, [pc, #28]	; (8005738 <__NVIC_EnableIRQ+0x38>)
 800571a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571e:	095b      	lsrs	r3, r3, #5
 8005720:	2001      	movs	r0, #1
 8005722:	fa00 f202 	lsl.w	r2, r0, r2
 8005726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	e000e100 	.word	0xe000e100

0800573c <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574c:	d10a      	bne.n	8005764 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800574e:	4b62      	ldr	r3, [pc, #392]	; (80058d8 <BasicTimer_Config+0x19c>)
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	4a61      	ldr	r2, [pc, #388]	; (80058d8 <BasicTimer_Config+0x19c>)
 8005754:	f043 0301 	orr.w	r3, r3, #1
 8005758:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	4a5f      	ldr	r2, [pc, #380]	; (80058dc <BasicTimer_Config+0x1a0>)
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	e02e      	b.n	80057c2 <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4a5d      	ldr	r2, [pc, #372]	; (80058e0 <BasicTimer_Config+0x1a4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d10a      	bne.n	8005784 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800576e:	4b5a      	ldr	r3, [pc, #360]	; (80058d8 <BasicTimer_Config+0x19c>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	4a59      	ldr	r2, [pc, #356]	; (80058d8 <BasicTimer_Config+0x19c>)
 8005774:	f043 0302 	orr.w	r3, r3, #2
 8005778:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	4a59      	ldr	r2, [pc, #356]	; (80058e4 <BasicTimer_Config+0x1a8>)
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	e01e      	b.n	80057c2 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4a57      	ldr	r2, [pc, #348]	; (80058e8 <BasicTimer_Config+0x1ac>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d10a      	bne.n	80057a4 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800578e:	4b52      	ldr	r3, [pc, #328]	; (80058d8 <BasicTimer_Config+0x19c>)
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	4a51      	ldr	r2, [pc, #324]	; (80058d8 <BasicTimer_Config+0x19c>)
 8005794:	f043 0304 	orr.w	r3, r3, #4
 8005798:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	4a53      	ldr	r2, [pc, #332]	; (80058ec <BasicTimer_Config+0x1b0>)
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	e00e      	b.n	80057c2 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	4a51      	ldr	r2, [pc, #324]	; (80058f0 <BasicTimer_Config+0x1b4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d109      	bne.n	80057c2 <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80057ae:	4b4a      	ldr	r3, [pc, #296]	; (80058d8 <BasicTimer_Config+0x19c>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	4a49      	ldr	r2, [pc, #292]	; (80058d8 <BasicTimer_Config+0x19c>)
 80057b4:	f043 0308 	orr.w	r3, r3, #8
 80057b8:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	4a4d      	ldr	r2, [pc, #308]	; (80058f4 <BasicTimer_Config+0x1b8>)
 80057c0:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 80057c2:	f001 fdf3 	bl	80073ac <getConfigPLL>
 80057c6:	4603      	mov	r3, r0
 80057c8:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80057ca:	f001 fe0b 	bl	80073e4 <getClockAPB1>
 80057ce:	4603      	mov	r3, r0
 80057d0:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 80057d2:	7bbb      	ldrb	r3, [r7, #14]
 80057d4:	2b31      	cmp	r3, #49	; 0x31
 80057d6:	d903      	bls.n	80057e0 <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
 80057de:	e000      	b.n	80057e2 <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 80057e0:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	8852      	ldrh	r2, [r2, #2]
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
 80057ec:	1e5a      	subs	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d112      	bne.n	8005822 <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f022 0210 	bic.w	r2, r2, #16
 800580a:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	3201      	adds	r2, #1
 8005816:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	625a      	str	r2, [r3, #36]	; 0x24
 8005820:	e018      	b.n	8005854 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f022 0210 	bic.w	r2, r2, #16
 8005830:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f042 0210 	orr.w	r2, r2, #16
 8005840:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6852      	ldr	r2, [r2, #4]
 8005852:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005854:	b672      	cpsid	i
}
 8005856:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005860:	d103      	bne.n	800586a <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8005862:	201c      	movs	r0, #28
 8005864:	f7ff ff4c 	bl	8005700 <__NVIC_EnableIRQ>
 8005868:	e019      	b.n	800589e <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	4a1c      	ldr	r2, [pc, #112]	; (80058e0 <BasicTimer_Config+0x1a4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d103      	bne.n	800587c <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8005874:	201d      	movs	r0, #29
 8005876:	f7ff ff43 	bl	8005700 <__NVIC_EnableIRQ>
 800587a:	e010      	b.n	800589e <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4a19      	ldr	r2, [pc, #100]	; (80058e8 <BasicTimer_Config+0x1ac>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d103      	bne.n	800588e <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8005886:	201e      	movs	r0, #30
 8005888:	f7ff ff3a 	bl	8005700 <__NVIC_EnableIRQ>
 800588c:	e007      	b.n	800589e <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	4a17      	ldr	r2, [pc, #92]	; (80058f0 <BasicTimer_Config+0x1b4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d102      	bne.n	800589e <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8005898:	2032      	movs	r0, #50	; 0x32
 800589a:	f7ff ff31 	bl	8005700 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800589e:	b662      	cpsie	i
}
 80058a0:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	7a1b      	ldrb	r3, [r3, #8]
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f875 	bl	8005998 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f022 0201 	bic.w	r2, r2, #1
 80058bc:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f042 0201 	orr.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
}
 80058ce:	bf00      	nop
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40023800 	.word	0x40023800
 80058dc:	20009490 	.word	0x20009490
 80058e0:	40000400 	.word	0x40000400
 80058e4:	20009494 	.word	0x20009494
 80058e8:	40000800 	.word	0x40000800
 80058ec:	20009498 	.word	0x20009498
 80058f0:	40000c00 	.word	0x40000c00
 80058f4:	2000949c 	.word	0x2000949c

080058f8 <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
	__NOP();
 80058fc:	bf00      	nop
}
 80058fe:	bf00      	nop
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
	__NOP();
 800590c:	bf00      	nop
}
 800590e:	bf00      	nop
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <TIM2_IRQHandler+0x1c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	4b04      	ldr	r3, [pc, #16]	; (8005934 <TIM2_IRQHandler+0x1c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0201 	bic.w	r2, r2, #1
 800592a:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 800592c:	f7fe fafa 	bl	8003f24 <BasicTimer2_Callback>

}
 8005930:	bf00      	nop
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20009490 	.word	0x20009490

08005938 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 800593c:	4b05      	ldr	r3, [pc, #20]	; (8005954 <TIM3_IRQHandler+0x1c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	4b04      	ldr	r3, [pc, #16]	; (8005954 <TIM3_IRQHandler+0x1c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 800594c:	f7fe fb10 	bl	8003f70 <BasicTimer3_Callback>

}
 8005950:	bf00      	nop
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20009494 	.word	0x20009494

08005958 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 800595c:	4b05      	ldr	r3, [pc, #20]	; (8005974 <TIM4_IRQHandler+0x1c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	4b04      	ldr	r3, [pc, #16]	; (8005974 <TIM4_IRQHandler+0x1c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0201 	bic.w	r2, r2, #1
 800596a:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 800596c:	f7ff ffc4 	bl	80058f8 <BasicTimer4_Callback>

}
 8005970:	bf00      	nop
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20009498 	.word	0x20009498

08005978 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <TIM5_IRQHandler+0x1c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691a      	ldr	r2, [r3, #16]
 8005982:	4b04      	ldr	r3, [pc, #16]	; (8005994 <TIM5_IRQHandler+0x1c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0201 	bic.w	r2, r2, #1
 800598a:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 800598c:	f7ff ffbc 	bl	8005908 <BasicTimer5_Callback>

}
 8005990:	bf00      	nop
 8005992:	bd80      	pop	{r7, pc}
 8005994:	2000949c 	.word	0x2000949c

08005998 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d108      	bne.n	80059bc <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f042 0201 	orr.w	r2, r2, #1
 80059b8:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 80059ba:	e007      	b.n	80059cc <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f022 0201 	bic.w	r2, r2, #1
 80059ca:	60da      	str	r2, [r3, #12]
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 80059e4:	887a      	ldrh	r2, [r7, #2]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6852      	ldr	r2, [r2, #4]
 80059fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <__NVIC_EnableIRQ>:
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	db0b      	blt.n	8005a32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	f003 021f 	and.w	r2, r3, #31
 8005a20:	4907      	ldr	r1, [pc, #28]	; (8005a40 <__NVIC_EnableIRQ+0x38>)
 8005a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	2001      	movs	r0, #1
 8005a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	e000e100 	.word	0xe000e100

08005a44 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	2300      	movs	r3, #0
 8005a52:	9301      	str	r3, [sp, #4]
 8005a54:	2300      	movs	r3, #0
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	2301      	movs	r3, #1
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	f001 f891 	bl	8006b84 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f001 f8ae 	bl	8006bc8 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8005a6c:	4b97      	ldr	r3, [pc, #604]	; (8005ccc <extInt_Config+0x288>)
 8005a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a70:	4a96      	ldr	r2, [pc, #600]	; (8005ccc <extInt_Config+0x288>)
 8005a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a76:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b0f      	cmp	r3, #15
 8005a80:	f200 85cf 	bhi.w	8006622 <extInt_Config+0xbde>
 8005a84:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <extInt_Config+0x48>)
 8005a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8a:	bf00      	nop
 8005a8c:	08005acd 	.word	0x08005acd
 8005a90:	08005b83 	.word	0x08005b83
 8005a94:	08005c39 	.word	0x08005c39
 8005a98:	08005d0f 	.word	0x08005d0f
 8005a9c:	08005dc5 	.word	0x08005dc5
 8005aa0:	08005e73 	.word	0x08005e73
 8005aa4:	08005f39 	.word	0x08005f39
 8005aa8:	08005fe1 	.word	0x08005fe1
 8005aac:	08006089 	.word	0x08006089
 8005ab0:	08006131 	.word	0x08006131
 8005ab4:	080061f7 	.word	0x080061f7
 8005ab8:	0800629f 	.word	0x0800629f
 8005abc:	08006347 	.word	0x08006347
 8005ac0:	0800640d 	.word	0x0800640d
 8005ac4:	080064b5 	.word	0x080064b5
 8005ac8:	0800655d 	.word	0x0800655d
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 8005acc:	4b80      	ldr	r3, [pc, #512]	; (8005cd0 <extInt_Config+0x28c>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	4a7f      	ldr	r2, [pc, #508]	; (8005cd0 <extInt_Config+0x28c>)
 8005ad2:	f023 030f 	bic.w	r3, r3, #15
 8005ad6:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	4a7d      	ldr	r2, [pc, #500]	; (8005cd4 <extInt_Config+0x290>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d105      	bne.n	8005af0 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8005ae4:	4b7a      	ldr	r3, [pc, #488]	; (8005cd0 <extInt_Config+0x28c>)
 8005ae6:	4a7a      	ldr	r2, [pc, #488]	; (8005cd0 <extInt_Config+0x28c>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8005aec:	f000 bd9b 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	4a78      	ldr	r2, [pc, #480]	; (8005cd8 <extInt_Config+0x294>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d107      	bne.n	8005b0c <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8005afc:	4b74      	ldr	r3, [pc, #464]	; (8005cd0 <extInt_Config+0x28c>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	4a73      	ldr	r2, [pc, #460]	; (8005cd0 <extInt_Config+0x28c>)
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	6093      	str	r3, [r2, #8]
		break;
 8005b08:	f000 bd8d 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	4a72      	ldr	r2, [pc, #456]	; (8005cdc <extInt_Config+0x298>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d107      	bne.n	8005b28 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8005b18:	4b6d      	ldr	r3, [pc, #436]	; (8005cd0 <extInt_Config+0x28c>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	4a6c      	ldr	r2, [pc, #432]	; (8005cd0 <extInt_Config+0x28c>)
 8005b1e:	f043 0302 	orr.w	r3, r3, #2
 8005b22:	6093      	str	r3, [r2, #8]
		break;
 8005b24:	f000 bd7f 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	4a6c      	ldr	r2, [pc, #432]	; (8005ce0 <extInt_Config+0x29c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d107      	bne.n	8005b44 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8005b34:	4b66      	ldr	r3, [pc, #408]	; (8005cd0 <extInt_Config+0x28c>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	4a65      	ldr	r2, [pc, #404]	; (8005cd0 <extInt_Config+0x28c>)
 8005b3a:	f043 0303 	orr.w	r3, r3, #3
 8005b3e:	6093      	str	r3, [r2, #8]
		break;
 8005b40:	f000 bd71 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	4a66      	ldr	r2, [pc, #408]	; (8005ce4 <extInt_Config+0x2a0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d107      	bne.n	8005b60 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8005b50:	4b5f      	ldr	r3, [pc, #380]	; (8005cd0 <extInt_Config+0x28c>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	4a5e      	ldr	r2, [pc, #376]	; (8005cd0 <extInt_Config+0x28c>)
 8005b56:	f043 0304 	orr.w	r3, r3, #4
 8005b5a:	6093      	str	r3, [r2, #8]
		break;
 8005b5c:	f000 bd63 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	4a60      	ldr	r2, [pc, #384]	; (8005ce8 <extInt_Config+0x2a4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d107      	bne.n	8005b7c <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8005b6c:	4b58      	ldr	r3, [pc, #352]	; (8005cd0 <extInt_Config+0x28c>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	4a57      	ldr	r2, [pc, #348]	; (8005cd0 <extInt_Config+0x28c>)
 8005b72:	f043 0307 	orr.w	r3, r3, #7
 8005b76:	6093      	str	r3, [r2, #8]
		break;
 8005b78:	f000 bd55 	b.w	8006626 <extInt_Config+0xbe2>
			__NOP();
 8005b7c:	bf00      	nop
		break;
 8005b7e:	f000 bd52 	b.w	8006626 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8005b82:	4b53      	ldr	r3, [pc, #332]	; (8005cd0 <extInt_Config+0x28c>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	4a52      	ldr	r2, [pc, #328]	; (8005cd0 <extInt_Config+0x28c>)
 8005b88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b8c:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	4a4f      	ldr	r2, [pc, #316]	; (8005cd4 <extInt_Config+0x290>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d105      	bne.n	8005ba6 <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8005b9a:	4b4d      	ldr	r3, [pc, #308]	; (8005cd0 <extInt_Config+0x28c>)
 8005b9c:	4a4c      	ldr	r2, [pc, #304]	; (8005cd0 <extInt_Config+0x28c>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8005ba2:	f000 bd40 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	4a4a      	ldr	r2, [pc, #296]	; (8005cd8 <extInt_Config+0x294>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d107      	bne.n	8005bc2 <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8005bb2:	4b47      	ldr	r3, [pc, #284]	; (8005cd0 <extInt_Config+0x28c>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	4a46      	ldr	r2, [pc, #280]	; (8005cd0 <extInt_Config+0x28c>)
 8005bb8:	f043 0310 	orr.w	r3, r3, #16
 8005bbc:	6093      	str	r3, [r2, #8]
		break;
 8005bbe:	f000 bd32 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4a44      	ldr	r2, [pc, #272]	; (8005cdc <extInt_Config+0x298>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d107      	bne.n	8005bde <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8005bce:	4b40      	ldr	r3, [pc, #256]	; (8005cd0 <extInt_Config+0x28c>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	4a3f      	ldr	r2, [pc, #252]	; (8005cd0 <extInt_Config+0x28c>)
 8005bd4:	f043 0320 	orr.w	r3, r3, #32
 8005bd8:	6093      	str	r3, [r2, #8]
		break;
 8005bda:	f000 bd24 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	4a3e      	ldr	r2, [pc, #248]	; (8005ce0 <extInt_Config+0x29c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d107      	bne.n	8005bfa <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8005bea:	4b39      	ldr	r3, [pc, #228]	; (8005cd0 <extInt_Config+0x28c>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	4a38      	ldr	r2, [pc, #224]	; (8005cd0 <extInt_Config+0x28c>)
 8005bf0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005bf4:	6093      	str	r3, [r2, #8]
		break;
 8005bf6:	f000 bd16 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	4a38      	ldr	r2, [pc, #224]	; (8005ce4 <extInt_Config+0x2a0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d107      	bne.n	8005c16 <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8005c06:	4b32      	ldr	r3, [pc, #200]	; (8005cd0 <extInt_Config+0x28c>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	4a31      	ldr	r2, [pc, #196]	; (8005cd0 <extInt_Config+0x28c>)
 8005c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c10:	6093      	str	r3, [r2, #8]
		break;
 8005c12:	f000 bd08 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	4a32      	ldr	r2, [pc, #200]	; (8005ce8 <extInt_Config+0x2a4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d107      	bne.n	8005c32 <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8005c22:	4b2b      	ldr	r3, [pc, #172]	; (8005cd0 <extInt_Config+0x28c>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	4a2a      	ldr	r2, [pc, #168]	; (8005cd0 <extInt_Config+0x28c>)
 8005c28:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005c2c:	6093      	str	r3, [r2, #8]
		break;
 8005c2e:	f000 bcfa 	b.w	8006626 <extInt_Config+0xbe2>
			__NOP();
 8005c32:	bf00      	nop
		break;
 8005c34:	f000 bcf7 	b.w	8006626 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8005c38:	4b25      	ldr	r3, [pc, #148]	; (8005cd0 <extInt_Config+0x28c>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	4a24      	ldr	r2, [pc, #144]	; (8005cd0 <extInt_Config+0x28c>)
 8005c3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c42:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	4a22      	ldr	r2, [pc, #136]	; (8005cd4 <extInt_Config+0x290>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d105      	bne.n	8005c5c <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8005c50:	4b1f      	ldr	r3, [pc, #124]	; (8005cd0 <extInt_Config+0x28c>)
 8005c52:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <extInt_Config+0x28c>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8005c58:	f000 bce5 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	4a1d      	ldr	r2, [pc, #116]	; (8005cd8 <extInt_Config+0x294>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d107      	bne.n	8005c78 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8005c68:	4b19      	ldr	r3, [pc, #100]	; (8005cd0 <extInt_Config+0x28c>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	4a18      	ldr	r2, [pc, #96]	; (8005cd0 <extInt_Config+0x28c>)
 8005c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c72:	6093      	str	r3, [r2, #8]
		break;
 8005c74:	f000 bcd7 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <extInt_Config+0x298>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d107      	bne.n	8005c94 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8005c84:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <extInt_Config+0x28c>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	4a11      	ldr	r2, [pc, #68]	; (8005cd0 <extInt_Config+0x28c>)
 8005c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c8e:	6093      	str	r3, [r2, #8]
		break;
 8005c90:	f000 bcc9 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	4a11      	ldr	r2, [pc, #68]	; (8005ce0 <extInt_Config+0x29c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d107      	bne.n	8005cb0 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <extInt_Config+0x28c>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	4a0a      	ldr	r2, [pc, #40]	; (8005cd0 <extInt_Config+0x28c>)
 8005ca6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005caa:	6093      	str	r3, [r2, #8]
		break;
 8005cac:	f000 bcbb 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	4a0b      	ldr	r2, [pc, #44]	; (8005ce4 <extInt_Config+0x2a0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d117      	bne.n	8005cec <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8005cbc:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <extInt_Config+0x28c>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	4a03      	ldr	r2, [pc, #12]	; (8005cd0 <extInt_Config+0x28c>)
 8005cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cc6:	6093      	str	r3, [r2, #8]
		break;
 8005cc8:	f000 bcad 	b.w	8006626 <extInt_Config+0xbe2>
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	40013800 	.word	0x40013800
 8005cd4:	40020000 	.word	0x40020000
 8005cd8:	40020400 	.word	0x40020400
 8005cdc:	40020800 	.word	0x40020800
 8005ce0:	40020c00 	.word	0x40020c00
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	4a8a      	ldr	r2, [pc, #552]	; (8005f1c <extInt_Config+0x4d8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d107      	bne.n	8005d08 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8005cf8:	4b89      	ldr	r3, [pc, #548]	; (8005f20 <extInt_Config+0x4dc>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	4a88      	ldr	r2, [pc, #544]	; (8005f20 <extInt_Config+0x4dc>)
 8005cfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d02:	6093      	str	r3, [r2, #8]
		break;
 8005d04:	f000 bc8f 	b.w	8006626 <extInt_Config+0xbe2>
			__NOP();
 8005d08:	bf00      	nop
		break;
 8005d0a:	f000 bc8c 	b.w	8006626 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8005d0e:	4b84      	ldr	r3, [pc, #528]	; (8005f20 <extInt_Config+0x4dc>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	4a83      	ldr	r2, [pc, #524]	; (8005f20 <extInt_Config+0x4dc>)
 8005d14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d18:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	4a80      	ldr	r2, [pc, #512]	; (8005f24 <extInt_Config+0x4e0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d105      	bne.n	8005d32 <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8005d26:	4b7e      	ldr	r3, [pc, #504]	; (8005f20 <extInt_Config+0x4dc>)
 8005d28:	4a7d      	ldr	r2, [pc, #500]	; (8005f20 <extInt_Config+0x4dc>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8005d2e:	f000 bc7a 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	4a7b      	ldr	r2, [pc, #492]	; (8005f28 <extInt_Config+0x4e4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d107      	bne.n	8005d4e <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8005d3e:	4b78      	ldr	r3, [pc, #480]	; (8005f20 <extInt_Config+0x4dc>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	4a77      	ldr	r2, [pc, #476]	; (8005f20 <extInt_Config+0x4dc>)
 8005d44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d48:	6093      	str	r3, [r2, #8]
		break;
 8005d4a:	f000 bc6c 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4a75      	ldr	r2, [pc, #468]	; (8005f2c <extInt_Config+0x4e8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d107      	bne.n	8005d6a <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8005d5a:	4b71      	ldr	r3, [pc, #452]	; (8005f20 <extInt_Config+0x4dc>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	4a70      	ldr	r2, [pc, #448]	; (8005f20 <extInt_Config+0x4dc>)
 8005d60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d64:	6093      	str	r3, [r2, #8]
		break;
 8005d66:	f000 bc5e 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	4a6f      	ldr	r2, [pc, #444]	; (8005f30 <extInt_Config+0x4ec>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d107      	bne.n	8005d86 <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8005d76:	4b6a      	ldr	r3, [pc, #424]	; (8005f20 <extInt_Config+0x4dc>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	4a69      	ldr	r2, [pc, #420]	; (8005f20 <extInt_Config+0x4dc>)
 8005d7c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005d80:	6093      	str	r3, [r2, #8]
		break;
 8005d82:	f000 bc50 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	4a69      	ldr	r2, [pc, #420]	; (8005f34 <extInt_Config+0x4f0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d107      	bne.n	8005da2 <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8005d92:	4b63      	ldr	r3, [pc, #396]	; (8005f20 <extInt_Config+0x4dc>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	4a62      	ldr	r2, [pc, #392]	; (8005f20 <extInt_Config+0x4dc>)
 8005d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d9c:	6093      	str	r3, [r2, #8]
		break;
 8005d9e:	f000 bc42 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4a5c      	ldr	r2, [pc, #368]	; (8005f1c <extInt_Config+0x4d8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d107      	bne.n	8005dbe <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8005dae:	4b5c      	ldr	r3, [pc, #368]	; (8005f20 <extInt_Config+0x4dc>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	4a5b      	ldr	r2, [pc, #364]	; (8005f20 <extInt_Config+0x4dc>)
 8005db4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005db8:	6093      	str	r3, [r2, #8]
		break;
 8005dba:	f000 bc34 	b.w	8006626 <extInt_Config+0xbe2>
			__NOP();
 8005dbe:	bf00      	nop
		break;
 8005dc0:	f000 bc31 	b.w	8006626 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 8005dc4:	4b56      	ldr	r3, [pc, #344]	; (8005f20 <extInt_Config+0x4dc>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	4a55      	ldr	r2, [pc, #340]	; (8005f20 <extInt_Config+0x4dc>)
 8005dca:	f023 030f 	bic.w	r3, r3, #15
 8005dce:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	4a53      	ldr	r2, [pc, #332]	; (8005f24 <extInt_Config+0x4e0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d105      	bne.n	8005de8 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8005ddc:	4b50      	ldr	r3, [pc, #320]	; (8005f20 <extInt_Config+0x4dc>)
 8005dde:	4a50      	ldr	r2, [pc, #320]	; (8005f20 <extInt_Config+0x4dc>)
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8005de4:	f000 bc1f 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	4a4e      	ldr	r2, [pc, #312]	; (8005f28 <extInt_Config+0x4e4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d107      	bne.n	8005e04 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8005df4:	4b4a      	ldr	r3, [pc, #296]	; (8005f20 <extInt_Config+0x4dc>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	4a49      	ldr	r2, [pc, #292]	; (8005f20 <extInt_Config+0x4dc>)
 8005dfa:	f043 0301 	orr.w	r3, r3, #1
 8005dfe:	60d3      	str	r3, [r2, #12]
		break;
 8005e00:	f000 bc11 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	4a48      	ldr	r2, [pc, #288]	; (8005f2c <extInt_Config+0x4e8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d107      	bne.n	8005e20 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8005e10:	4b43      	ldr	r3, [pc, #268]	; (8005f20 <extInt_Config+0x4dc>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	4a42      	ldr	r2, [pc, #264]	; (8005f20 <extInt_Config+0x4dc>)
 8005e16:	f043 0302 	orr.w	r3, r3, #2
 8005e1a:	60d3      	str	r3, [r2, #12]
		break;
 8005e1c:	f000 bc03 	b.w	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	4a42      	ldr	r2, [pc, #264]	; (8005f30 <extInt_Config+0x4ec>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d106      	bne.n	8005e3a <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8005e2c:	4b3c      	ldr	r3, [pc, #240]	; (8005f20 <extInt_Config+0x4dc>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4a3b      	ldr	r2, [pc, #236]	; (8005f20 <extInt_Config+0x4dc>)
 8005e32:	f043 0303 	orr.w	r3, r3, #3
 8005e36:	60d3      	str	r3, [r2, #12]
		break;
 8005e38:	e3f5      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	4a3c      	ldr	r2, [pc, #240]	; (8005f34 <extInt_Config+0x4f0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d106      	bne.n	8005e54 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8005e46:	4b36      	ldr	r3, [pc, #216]	; (8005f20 <extInt_Config+0x4dc>)
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	4a35      	ldr	r2, [pc, #212]	; (8005f20 <extInt_Config+0x4dc>)
 8005e4c:	f043 0304 	orr.w	r3, r3, #4
 8005e50:	60d3      	str	r3, [r2, #12]
		break;
 8005e52:	e3e8      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	4a30      	ldr	r2, [pc, #192]	; (8005f1c <extInt_Config+0x4d8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d106      	bne.n	8005e6e <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8005e60:	4b2f      	ldr	r3, [pc, #188]	; (8005f20 <extInt_Config+0x4dc>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4a2e      	ldr	r2, [pc, #184]	; (8005f20 <extInt_Config+0x4dc>)
 8005e66:	f043 0307 	orr.w	r3, r3, #7
 8005e6a:	60d3      	str	r3, [r2, #12]
		break;
 8005e6c:	e3db      	b.n	8006626 <extInt_Config+0xbe2>
			__NOP();
 8005e6e:	bf00      	nop
		break;
 8005e70:	e3d9      	b.n	8006626 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8005e72:	4b2b      	ldr	r3, [pc, #172]	; (8005f20 <extInt_Config+0x4dc>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	4a2a      	ldr	r2, [pc, #168]	; (8005f20 <extInt_Config+0x4dc>)
 8005e78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e7c:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	4a27      	ldr	r2, [pc, #156]	; (8005f24 <extInt_Config+0x4e0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d104      	bne.n	8005e94 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8005e8a:	4b25      	ldr	r3, [pc, #148]	; (8005f20 <extInt_Config+0x4dc>)
 8005e8c:	4a24      	ldr	r2, [pc, #144]	; (8005f20 <extInt_Config+0x4dc>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8005e92:	e3c8      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	4a23      	ldr	r2, [pc, #140]	; (8005f28 <extInt_Config+0x4e4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d106      	bne.n	8005eae <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8005ea0:	4b1f      	ldr	r3, [pc, #124]	; (8005f20 <extInt_Config+0x4dc>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4a1e      	ldr	r2, [pc, #120]	; (8005f20 <extInt_Config+0x4dc>)
 8005ea6:	f043 0310 	orr.w	r3, r3, #16
 8005eaa:	60d3      	str	r3, [r2, #12]
		break;
 8005eac:	e3bb      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	4a1d      	ldr	r2, [pc, #116]	; (8005f2c <extInt_Config+0x4e8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d106      	bne.n	8005ec8 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8005eba:	4b19      	ldr	r3, [pc, #100]	; (8005f20 <extInt_Config+0x4dc>)
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	4a18      	ldr	r2, [pc, #96]	; (8005f20 <extInt_Config+0x4dc>)
 8005ec0:	f043 0320 	orr.w	r3, r3, #32
 8005ec4:	60d3      	str	r3, [r2, #12]
		break;
 8005ec6:	e3ae      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	4a18      	ldr	r2, [pc, #96]	; (8005f30 <extInt_Config+0x4ec>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d106      	bne.n	8005ee2 <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8005ed4:	4b12      	ldr	r3, [pc, #72]	; (8005f20 <extInt_Config+0x4dc>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	4a11      	ldr	r2, [pc, #68]	; (8005f20 <extInt_Config+0x4dc>)
 8005eda:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005ede:	60d3      	str	r3, [r2, #12]
		break;
 8005ee0:	e3a1      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	4a12      	ldr	r2, [pc, #72]	; (8005f34 <extInt_Config+0x4f0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d106      	bne.n	8005efc <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8005eee:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <extInt_Config+0x4dc>)
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	4a0b      	ldr	r2, [pc, #44]	; (8005f20 <extInt_Config+0x4dc>)
 8005ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ef8:	60d3      	str	r3, [r2, #12]
		break;
 8005efa:	e394      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	4a06      	ldr	r2, [pc, #24]	; (8005f1c <extInt_Config+0x4d8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d106      	bne.n	8005f16 <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8005f08:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <extInt_Config+0x4dc>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	4a04      	ldr	r2, [pc, #16]	; (8005f20 <extInt_Config+0x4dc>)
 8005f0e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005f12:	60d3      	str	r3, [r2, #12]
		break;
 8005f14:	e387      	b.n	8006626 <extInt_Config+0xbe2>
			__NOP();
 8005f16:	bf00      	nop
		break;
 8005f18:	e385      	b.n	8006626 <extInt_Config+0xbe2>
 8005f1a:	bf00      	nop
 8005f1c:	40021c00 	.word	0x40021c00
 8005f20:	40013800 	.word	0x40013800
 8005f24:	40020000 	.word	0x40020000
 8005f28:	40020400 	.word	0x40020400
 8005f2c:	40020800 	.word	0x40020800
 8005f30:	40020c00 	.word	0x40020c00
 8005f34:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 8005f38:	4b86      	ldr	r3, [pc, #536]	; (8006154 <extInt_Config+0x710>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	4a85      	ldr	r2, [pc, #532]	; (8006154 <extInt_Config+0x710>)
 8005f3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f42:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	4a83      	ldr	r2, [pc, #524]	; (8006158 <extInt_Config+0x714>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d104      	bne.n	8005f5a <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8005f50:	4b80      	ldr	r3, [pc, #512]	; (8006154 <extInt_Config+0x710>)
 8005f52:	4a80      	ldr	r2, [pc, #512]	; (8006154 <extInt_Config+0x710>)
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8005f58:	e365      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	4a7e      	ldr	r2, [pc, #504]	; (800615c <extInt_Config+0x718>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d106      	bne.n	8005f74 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8005f66:	4b7b      	ldr	r3, [pc, #492]	; (8006154 <extInt_Config+0x710>)
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	4a7a      	ldr	r2, [pc, #488]	; (8006154 <extInt_Config+0x710>)
 8005f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f70:	60d3      	str	r3, [r2, #12]
		break;
 8005f72:	e358      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	4a79      	ldr	r2, [pc, #484]	; (8006160 <extInt_Config+0x71c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d106      	bne.n	8005f8e <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8005f80:	4b74      	ldr	r3, [pc, #464]	; (8006154 <extInt_Config+0x710>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	4a73      	ldr	r2, [pc, #460]	; (8006154 <extInt_Config+0x710>)
 8005f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f8a:	60d3      	str	r3, [r2, #12]
		break;
 8005f8c:	e34b      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	4a73      	ldr	r2, [pc, #460]	; (8006164 <extInt_Config+0x720>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d106      	bne.n	8005fa8 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8005f9a:	4b6e      	ldr	r3, [pc, #440]	; (8006154 <extInt_Config+0x710>)
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	4a6d      	ldr	r2, [pc, #436]	; (8006154 <extInt_Config+0x710>)
 8005fa0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005fa4:	60d3      	str	r3, [r2, #12]
		break;
 8005fa6:	e33e      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	4a6e      	ldr	r2, [pc, #440]	; (8006168 <extInt_Config+0x724>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d106      	bne.n	8005fc2 <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8005fb4:	4b67      	ldr	r3, [pc, #412]	; (8006154 <extInt_Config+0x710>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	4a66      	ldr	r2, [pc, #408]	; (8006154 <extInt_Config+0x710>)
 8005fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fbe:	60d3      	str	r3, [r2, #12]
		break;
 8005fc0:	e331      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	4a68      	ldr	r2, [pc, #416]	; (800616c <extInt_Config+0x728>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d106      	bne.n	8005fdc <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8005fce:	4b61      	ldr	r3, [pc, #388]	; (8006154 <extInt_Config+0x710>)
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	4a60      	ldr	r2, [pc, #384]	; (8006154 <extInt_Config+0x710>)
 8005fd4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005fd8:	60d3      	str	r3, [r2, #12]
		break;
 8005fda:	e324      	b.n	8006626 <extInt_Config+0xbe2>
			__NOP();
 8005fdc:	bf00      	nop
		break;
 8005fde:	e322      	b.n	8006626 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 8005fe0:	4b5c      	ldr	r3, [pc, #368]	; (8006154 <extInt_Config+0x710>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	4a5b      	ldr	r2, [pc, #364]	; (8006154 <extInt_Config+0x710>)
 8005fe6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fea:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	4a59      	ldr	r2, [pc, #356]	; (8006158 <extInt_Config+0x714>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d104      	bne.n	8006002 <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8005ff8:	4b56      	ldr	r3, [pc, #344]	; (8006154 <extInt_Config+0x710>)
 8005ffa:	4a56      	ldr	r2, [pc, #344]	; (8006154 <extInt_Config+0x710>)
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8006000:	e311      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	4a54      	ldr	r2, [pc, #336]	; (800615c <extInt_Config+0x718>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d106      	bne.n	800601c <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 800600e:	4b51      	ldr	r3, [pc, #324]	; (8006154 <extInt_Config+0x710>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	4a50      	ldr	r2, [pc, #320]	; (8006154 <extInt_Config+0x710>)
 8006014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006018:	60d3      	str	r3, [r2, #12]
		break;
 800601a:	e304      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	4a4f      	ldr	r2, [pc, #316]	; (8006160 <extInt_Config+0x71c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d106      	bne.n	8006036 <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8006028:	4b4a      	ldr	r3, [pc, #296]	; (8006154 <extInt_Config+0x710>)
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	4a49      	ldr	r2, [pc, #292]	; (8006154 <extInt_Config+0x710>)
 800602e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006032:	60d3      	str	r3, [r2, #12]
		break;
 8006034:	e2f7      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	4a49      	ldr	r2, [pc, #292]	; (8006164 <extInt_Config+0x720>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d106      	bne.n	8006050 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8006042:	4b44      	ldr	r3, [pc, #272]	; (8006154 <extInt_Config+0x710>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	4a43      	ldr	r2, [pc, #268]	; (8006154 <extInt_Config+0x710>)
 8006048:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800604c:	60d3      	str	r3, [r2, #12]
		break;
 800604e:	e2ea      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	4a44      	ldr	r2, [pc, #272]	; (8006168 <extInt_Config+0x724>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d106      	bne.n	800606a <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 800605c:	4b3d      	ldr	r3, [pc, #244]	; (8006154 <extInt_Config+0x710>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	4a3c      	ldr	r2, [pc, #240]	; (8006154 <extInt_Config+0x710>)
 8006062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006066:	60d3      	str	r3, [r2, #12]
		break;
 8006068:	e2dd      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	4a3e      	ldr	r2, [pc, #248]	; (800616c <extInt_Config+0x728>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d106      	bne.n	8006084 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8006076:	4b37      	ldr	r3, [pc, #220]	; (8006154 <extInt_Config+0x710>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	4a36      	ldr	r2, [pc, #216]	; (8006154 <extInt_Config+0x710>)
 800607c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006080:	60d3      	str	r3, [r2, #12]
		break;
 8006082:	e2d0      	b.n	8006626 <extInt_Config+0xbe2>
			__NOP();
 8006084:	bf00      	nop
		break;
 8006086:	e2ce      	b.n	8006626 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 8006088:	4b32      	ldr	r3, [pc, #200]	; (8006154 <extInt_Config+0x710>)
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	4a31      	ldr	r2, [pc, #196]	; (8006154 <extInt_Config+0x710>)
 800608e:	f023 030f 	bic.w	r3, r3, #15
 8006092:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	4a2f      	ldr	r2, [pc, #188]	; (8006158 <extInt_Config+0x714>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d104      	bne.n	80060aa <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 80060a0:	4b2c      	ldr	r3, [pc, #176]	; (8006154 <extInt_Config+0x710>)
 80060a2:	4a2c      	ldr	r2, [pc, #176]	; (8006154 <extInt_Config+0x710>)
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80060a8:	e2bd      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	4a2a      	ldr	r2, [pc, #168]	; (800615c <extInt_Config+0x718>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d106      	bne.n	80060c4 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 80060b6:	4b27      	ldr	r3, [pc, #156]	; (8006154 <extInt_Config+0x710>)
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	4a26      	ldr	r2, [pc, #152]	; (8006154 <extInt_Config+0x710>)
 80060bc:	f043 0301 	orr.w	r3, r3, #1
 80060c0:	6113      	str	r3, [r2, #16]
		break;
 80060c2:	e2b0      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	4a25      	ldr	r2, [pc, #148]	; (8006160 <extInt_Config+0x71c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d106      	bne.n	80060de <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80060d0:	4b20      	ldr	r3, [pc, #128]	; (8006154 <extInt_Config+0x710>)
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	4a1f      	ldr	r2, [pc, #124]	; (8006154 <extInt_Config+0x710>)
 80060d6:	f043 0302 	orr.w	r3, r3, #2
 80060da:	6113      	str	r3, [r2, #16]
		break;
 80060dc:	e2a3      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	4a1f      	ldr	r2, [pc, #124]	; (8006164 <extInt_Config+0x720>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d106      	bne.n	80060f8 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80060ea:	4b1a      	ldr	r3, [pc, #104]	; (8006154 <extInt_Config+0x710>)
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	4a19      	ldr	r2, [pc, #100]	; (8006154 <extInt_Config+0x710>)
 80060f0:	f043 0303 	orr.w	r3, r3, #3
 80060f4:	6113      	str	r3, [r2, #16]
		break;
 80060f6:	e296      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	4a1a      	ldr	r2, [pc, #104]	; (8006168 <extInt_Config+0x724>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d106      	bne.n	8006112 <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8006104:	4b13      	ldr	r3, [pc, #76]	; (8006154 <extInt_Config+0x710>)
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	4a12      	ldr	r2, [pc, #72]	; (8006154 <extInt_Config+0x710>)
 800610a:	f043 0304 	orr.w	r3, r3, #4
 800610e:	6113      	str	r3, [r2, #16]
		break;
 8006110:	e289      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	4a14      	ldr	r2, [pc, #80]	; (800616c <extInt_Config+0x728>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d106      	bne.n	800612c <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 800611e:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <extInt_Config+0x710>)
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	4a0c      	ldr	r2, [pc, #48]	; (8006154 <extInt_Config+0x710>)
 8006124:	f043 0307 	orr.w	r3, r3, #7
 8006128:	6113      	str	r3, [r2, #16]
		break;
 800612a:	e27c      	b.n	8006626 <extInt_Config+0xbe2>
			__NOP();
 800612c:	bf00      	nop
		break;
 800612e:	e27a      	b.n	8006626 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8006130:	4b08      	ldr	r3, [pc, #32]	; (8006154 <extInt_Config+0x710>)
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	4a07      	ldr	r2, [pc, #28]	; (8006154 <extInt_Config+0x710>)
 8006136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800613a:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	4a05      	ldr	r2, [pc, #20]	; (8006158 <extInt_Config+0x714>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d113      	bne.n	8006170 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8006148:	4b02      	ldr	r3, [pc, #8]	; (8006154 <extInt_Config+0x710>)
 800614a:	4a02      	ldr	r2, [pc, #8]	; (8006154 <extInt_Config+0x710>)
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8006150:	e269      	b.n	8006626 <extInt_Config+0xbe2>
 8006152:	bf00      	nop
 8006154:	40013800 	.word	0x40013800
 8006158:	40020000 	.word	0x40020000
 800615c:	40020400 	.word	0x40020400
 8006160:	40020800 	.word	0x40020800
 8006164:	40020c00 	.word	0x40020c00
 8006168:	40021000 	.word	0x40021000
 800616c:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	4a83      	ldr	r2, [pc, #524]	; (8006384 <extInt_Config+0x940>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d106      	bne.n	800618a <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 800617c:	4b82      	ldr	r3, [pc, #520]	; (8006388 <extInt_Config+0x944>)
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	4a81      	ldr	r2, [pc, #516]	; (8006388 <extInt_Config+0x944>)
 8006182:	f043 0310 	orr.w	r3, r3, #16
 8006186:	6113      	str	r3, [r2, #16]
		break;
 8006188:	e24d      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	4a7e      	ldr	r2, [pc, #504]	; (800638c <extInt_Config+0x948>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d106      	bne.n	80061a4 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8006196:	4b7c      	ldr	r3, [pc, #496]	; (8006388 <extInt_Config+0x944>)
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	4a7b      	ldr	r2, [pc, #492]	; (8006388 <extInt_Config+0x944>)
 800619c:	f043 0320 	orr.w	r3, r3, #32
 80061a0:	6113      	str	r3, [r2, #16]
		break;
 80061a2:	e240      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	4a79      	ldr	r2, [pc, #484]	; (8006390 <extInt_Config+0x94c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d106      	bne.n	80061be <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 80061b0:	4b75      	ldr	r3, [pc, #468]	; (8006388 <extInt_Config+0x944>)
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	4a74      	ldr	r2, [pc, #464]	; (8006388 <extInt_Config+0x944>)
 80061b6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80061ba:	6113      	str	r3, [r2, #16]
		break;
 80061bc:	e233      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	4a73      	ldr	r2, [pc, #460]	; (8006394 <extInt_Config+0x950>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d106      	bne.n	80061d8 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 80061ca:	4b6f      	ldr	r3, [pc, #444]	; (8006388 <extInt_Config+0x944>)
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	4a6e      	ldr	r2, [pc, #440]	; (8006388 <extInt_Config+0x944>)
 80061d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061d4:	6113      	str	r3, [r2, #16]
		break;
 80061d6:	e226      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	4a6e      	ldr	r2, [pc, #440]	; (8006398 <extInt_Config+0x954>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d106      	bne.n	80061f2 <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80061e4:	4b68      	ldr	r3, [pc, #416]	; (8006388 <extInt_Config+0x944>)
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	4a67      	ldr	r2, [pc, #412]	; (8006388 <extInt_Config+0x944>)
 80061ea:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80061ee:	6113      	str	r3, [r2, #16]
		break;
 80061f0:	e219      	b.n	8006626 <extInt_Config+0xbe2>
			__NOP();
 80061f2:	bf00      	nop
		break;
 80061f4:	e217      	b.n	8006626 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 80061f6:	4b64      	ldr	r3, [pc, #400]	; (8006388 <extInt_Config+0x944>)
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	4a63      	ldr	r2, [pc, #396]	; (8006388 <extInt_Config+0x944>)
 80061fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006200:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	4a64      	ldr	r2, [pc, #400]	; (800639c <extInt_Config+0x958>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d104      	bne.n	8006218 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 800620e:	4b5e      	ldr	r3, [pc, #376]	; (8006388 <extInt_Config+0x944>)
 8006210:	4a5d      	ldr	r2, [pc, #372]	; (8006388 <extInt_Config+0x944>)
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8006216:	e206      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	4a59      	ldr	r2, [pc, #356]	; (8006384 <extInt_Config+0x940>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d106      	bne.n	8006232 <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8006224:	4b58      	ldr	r3, [pc, #352]	; (8006388 <extInt_Config+0x944>)
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	4a57      	ldr	r2, [pc, #348]	; (8006388 <extInt_Config+0x944>)
 800622a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800622e:	6113      	str	r3, [r2, #16]
		break;
 8006230:	e1f9      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4a54      	ldr	r2, [pc, #336]	; (800638c <extInt_Config+0x948>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d106      	bne.n	800624c <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 800623e:	4b52      	ldr	r3, [pc, #328]	; (8006388 <extInt_Config+0x944>)
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	4a51      	ldr	r2, [pc, #324]	; (8006388 <extInt_Config+0x944>)
 8006244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006248:	6113      	str	r3, [r2, #16]
		break;
 800624a:	e1ec      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	4a4f      	ldr	r2, [pc, #316]	; (8006390 <extInt_Config+0x94c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d106      	bne.n	8006266 <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8006258:	4b4b      	ldr	r3, [pc, #300]	; (8006388 <extInt_Config+0x944>)
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	4a4a      	ldr	r2, [pc, #296]	; (8006388 <extInt_Config+0x944>)
 800625e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006262:	6113      	str	r3, [r2, #16]
		break;
 8006264:	e1df      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	4a49      	ldr	r2, [pc, #292]	; (8006394 <extInt_Config+0x950>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d106      	bne.n	8006280 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8006272:	4b45      	ldr	r3, [pc, #276]	; (8006388 <extInt_Config+0x944>)
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	4a44      	ldr	r2, [pc, #272]	; (8006388 <extInt_Config+0x944>)
 8006278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800627c:	6113      	str	r3, [r2, #16]
		break;
 800627e:	e1d2      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	4a44      	ldr	r2, [pc, #272]	; (8006398 <extInt_Config+0x954>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d106      	bne.n	800629a <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 800628c:	4b3e      	ldr	r3, [pc, #248]	; (8006388 <extInt_Config+0x944>)
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	4a3d      	ldr	r2, [pc, #244]	; (8006388 <extInt_Config+0x944>)
 8006292:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006296:	6113      	str	r3, [r2, #16]
		break;
 8006298:	e1c5      	b.n	8006626 <extInt_Config+0xbe2>
			__NOP();
 800629a:	bf00      	nop
		break;
 800629c:	e1c3      	b.n	8006626 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 800629e:	4b3a      	ldr	r3, [pc, #232]	; (8006388 <extInt_Config+0x944>)
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	4a39      	ldr	r2, [pc, #228]	; (8006388 <extInt_Config+0x944>)
 80062a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062a8:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	4a3a      	ldr	r2, [pc, #232]	; (800639c <extInt_Config+0x958>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d104      	bne.n	80062c0 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 80062b6:	4b34      	ldr	r3, [pc, #208]	; (8006388 <extInt_Config+0x944>)
 80062b8:	4a33      	ldr	r2, [pc, #204]	; (8006388 <extInt_Config+0x944>)
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80062be:	e1b2      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	4a2f      	ldr	r2, [pc, #188]	; (8006384 <extInt_Config+0x940>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d106      	bne.n	80062da <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80062cc:	4b2e      	ldr	r3, [pc, #184]	; (8006388 <extInt_Config+0x944>)
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	4a2d      	ldr	r2, [pc, #180]	; (8006388 <extInt_Config+0x944>)
 80062d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062d6:	6113      	str	r3, [r2, #16]
		break;
 80062d8:	e1a5      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	4a2a      	ldr	r2, [pc, #168]	; (800638c <extInt_Config+0x948>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d106      	bne.n	80062f4 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80062e6:	4b28      	ldr	r3, [pc, #160]	; (8006388 <extInt_Config+0x944>)
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	4a27      	ldr	r2, [pc, #156]	; (8006388 <extInt_Config+0x944>)
 80062ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80062f0:	6113      	str	r3, [r2, #16]
		break;
 80062f2:	e198      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	4a25      	ldr	r2, [pc, #148]	; (8006390 <extInt_Config+0x94c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d106      	bne.n	800630e <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8006300:	4b21      	ldr	r3, [pc, #132]	; (8006388 <extInt_Config+0x944>)
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	4a20      	ldr	r2, [pc, #128]	; (8006388 <extInt_Config+0x944>)
 8006306:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800630a:	6113      	str	r3, [r2, #16]
		break;
 800630c:	e18b      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <extInt_Config+0x950>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d106      	bne.n	8006328 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800631a:	4b1b      	ldr	r3, [pc, #108]	; (8006388 <extInt_Config+0x944>)
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	4a1a      	ldr	r2, [pc, #104]	; (8006388 <extInt_Config+0x944>)
 8006320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006324:	6113      	str	r3, [r2, #16]
		break;
 8006326:	e17e      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	4a1a      	ldr	r2, [pc, #104]	; (8006398 <extInt_Config+0x954>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d106      	bne.n	8006342 <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8006334:	4b14      	ldr	r3, [pc, #80]	; (8006388 <extInt_Config+0x944>)
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	4a13      	ldr	r2, [pc, #76]	; (8006388 <extInt_Config+0x944>)
 800633a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800633e:	6113      	str	r3, [r2, #16]
		break;
 8006340:	e171      	b.n	8006626 <extInt_Config+0xbe2>
			__NOP();
 8006342:	bf00      	nop
		break;
 8006344:	e16f      	b.n	8006626 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 8006346:	4b10      	ldr	r3, [pc, #64]	; (8006388 <extInt_Config+0x944>)
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	4a0f      	ldr	r2, [pc, #60]	; (8006388 <extInt_Config+0x944>)
 800634c:	f023 030f 	bic.w	r3, r3, #15
 8006350:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	4a10      	ldr	r2, [pc, #64]	; (800639c <extInt_Config+0x958>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d104      	bne.n	8006368 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 800635e:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <extInt_Config+0x944>)
 8006360:	4a09      	ldr	r2, [pc, #36]	; (8006388 <extInt_Config+0x944>)
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8006366:	e15e      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	4a05      	ldr	r2, [pc, #20]	; (8006384 <extInt_Config+0x940>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d115      	bne.n	80063a0 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8006374:	4b04      	ldr	r3, [pc, #16]	; (8006388 <extInt_Config+0x944>)
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	4a03      	ldr	r2, [pc, #12]	; (8006388 <extInt_Config+0x944>)
 800637a:	f043 0301 	orr.w	r3, r3, #1
 800637e:	6153      	str	r3, [r2, #20]
		break;
 8006380:	e151      	b.n	8006626 <extInt_Config+0xbe2>
 8006382:	bf00      	nop
 8006384:	40020400 	.word	0x40020400
 8006388:	40013800 	.word	0x40013800
 800638c:	40020800 	.word	0x40020800
 8006390:	40020c00 	.word	0x40020c00
 8006394:	40021000 	.word	0x40021000
 8006398:	40021c00 	.word	0x40021c00
 800639c:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	4a83      	ldr	r2, [pc, #524]	; (80065b4 <extInt_Config+0xb70>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d106      	bne.n	80063ba <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 80063ac:	4b82      	ldr	r3, [pc, #520]	; (80065b8 <extInt_Config+0xb74>)
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	4a81      	ldr	r2, [pc, #516]	; (80065b8 <extInt_Config+0xb74>)
 80063b2:	f043 0302 	orr.w	r3, r3, #2
 80063b6:	6153      	str	r3, [r2, #20]
		break;
 80063b8:	e135      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	4a7e      	ldr	r2, [pc, #504]	; (80065bc <extInt_Config+0xb78>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d106      	bne.n	80063d4 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 80063c6:	4b7c      	ldr	r3, [pc, #496]	; (80065b8 <extInt_Config+0xb74>)
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	4a7b      	ldr	r2, [pc, #492]	; (80065b8 <extInt_Config+0xb74>)
 80063cc:	f043 0303 	orr.w	r3, r3, #3
 80063d0:	6153      	str	r3, [r2, #20]
		break;
 80063d2:	e128      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	4a79      	ldr	r2, [pc, #484]	; (80065c0 <extInt_Config+0xb7c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d106      	bne.n	80063ee <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80063e0:	4b75      	ldr	r3, [pc, #468]	; (80065b8 <extInt_Config+0xb74>)
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	4a74      	ldr	r2, [pc, #464]	; (80065b8 <extInt_Config+0xb74>)
 80063e6:	f043 0304 	orr.w	r3, r3, #4
 80063ea:	6153      	str	r3, [r2, #20]
		break;
 80063ec:	e11b      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	4a73      	ldr	r2, [pc, #460]	; (80065c4 <extInt_Config+0xb80>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d106      	bne.n	8006408 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80063fa:	4b6f      	ldr	r3, [pc, #444]	; (80065b8 <extInt_Config+0xb74>)
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	4a6e      	ldr	r2, [pc, #440]	; (80065b8 <extInt_Config+0xb74>)
 8006400:	f043 0307 	orr.w	r3, r3, #7
 8006404:	6153      	str	r3, [r2, #20]
		break;
 8006406:	e10e      	b.n	8006626 <extInt_Config+0xbe2>
			__NOP();
 8006408:	bf00      	nop
		break;
 800640a:	e10c      	b.n	8006626 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 800640c:	4b6a      	ldr	r3, [pc, #424]	; (80065b8 <extInt_Config+0xb74>)
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	4a69      	ldr	r2, [pc, #420]	; (80065b8 <extInt_Config+0xb74>)
 8006412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006416:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	4a6a      	ldr	r2, [pc, #424]	; (80065c8 <extInt_Config+0xb84>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d104      	bne.n	800642e <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8006424:	4b64      	ldr	r3, [pc, #400]	; (80065b8 <extInt_Config+0xb74>)
 8006426:	4a64      	ldr	r2, [pc, #400]	; (80065b8 <extInt_Config+0xb74>)
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800642c:	e0fb      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	4a65      	ldr	r2, [pc, #404]	; (80065cc <extInt_Config+0xb88>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d106      	bne.n	8006448 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800643a:	4b5f      	ldr	r3, [pc, #380]	; (80065b8 <extInt_Config+0xb74>)
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	4a5e      	ldr	r2, [pc, #376]	; (80065b8 <extInt_Config+0xb74>)
 8006440:	f043 0310 	orr.w	r3, r3, #16
 8006444:	6153      	str	r3, [r2, #20]
		break;
 8006446:	e0ee      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	4a59      	ldr	r2, [pc, #356]	; (80065b4 <extInt_Config+0xb70>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d106      	bne.n	8006462 <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8006454:	4b58      	ldr	r3, [pc, #352]	; (80065b8 <extInt_Config+0xb74>)
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	4a57      	ldr	r2, [pc, #348]	; (80065b8 <extInt_Config+0xb74>)
 800645a:	f043 0320 	orr.w	r3, r3, #32
 800645e:	6153      	str	r3, [r2, #20]
		break;
 8006460:	e0e1      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	4a54      	ldr	r2, [pc, #336]	; (80065bc <extInt_Config+0xb78>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d106      	bne.n	800647c <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800646e:	4b52      	ldr	r3, [pc, #328]	; (80065b8 <extInt_Config+0xb74>)
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	4a51      	ldr	r2, [pc, #324]	; (80065b8 <extInt_Config+0xb74>)
 8006474:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006478:	6153      	str	r3, [r2, #20]
		break;
 800647a:	e0d4      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	4a4f      	ldr	r2, [pc, #316]	; (80065c0 <extInt_Config+0xb7c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d106      	bne.n	8006496 <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8006488:	4b4b      	ldr	r3, [pc, #300]	; (80065b8 <extInt_Config+0xb74>)
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	4a4a      	ldr	r2, [pc, #296]	; (80065b8 <extInt_Config+0xb74>)
 800648e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006492:	6153      	str	r3, [r2, #20]
		break;
 8006494:	e0c7      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	4a49      	ldr	r2, [pc, #292]	; (80065c4 <extInt_Config+0xb80>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d106      	bne.n	80064b0 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 80064a2:	4b45      	ldr	r3, [pc, #276]	; (80065b8 <extInt_Config+0xb74>)
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	4a44      	ldr	r2, [pc, #272]	; (80065b8 <extInt_Config+0xb74>)
 80064a8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80064ac:	6153      	str	r3, [r2, #20]
		break;
 80064ae:	e0ba      	b.n	8006626 <extInt_Config+0xbe2>
			__NOP();
 80064b0:	bf00      	nop
		break;
 80064b2:	e0b8      	b.n	8006626 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 80064b4:	4b40      	ldr	r3, [pc, #256]	; (80065b8 <extInt_Config+0xb74>)
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	4a3f      	ldr	r2, [pc, #252]	; (80065b8 <extInt_Config+0xb74>)
 80064ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80064be:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	4a40      	ldr	r2, [pc, #256]	; (80065c8 <extInt_Config+0xb84>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d104      	bne.n	80064d6 <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80064cc:	4b3a      	ldr	r3, [pc, #232]	; (80065b8 <extInt_Config+0xb74>)
 80064ce:	4a3a      	ldr	r2, [pc, #232]	; (80065b8 <extInt_Config+0xb74>)
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80064d4:	e0a7      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	4a3b      	ldr	r2, [pc, #236]	; (80065cc <extInt_Config+0xb88>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d106      	bne.n	80064f0 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80064e2:	4b35      	ldr	r3, [pc, #212]	; (80065b8 <extInt_Config+0xb74>)
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	4a34      	ldr	r2, [pc, #208]	; (80065b8 <extInt_Config+0xb74>)
 80064e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ec:	6153      	str	r3, [r2, #20]
		break;
 80064ee:	e09a      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	4a2f      	ldr	r2, [pc, #188]	; (80065b4 <extInt_Config+0xb70>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d106      	bne.n	800650a <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80064fc:	4b2e      	ldr	r3, [pc, #184]	; (80065b8 <extInt_Config+0xb74>)
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	4a2d      	ldr	r2, [pc, #180]	; (80065b8 <extInt_Config+0xb74>)
 8006502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006506:	6153      	str	r3, [r2, #20]
		break;
 8006508:	e08d      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	4a2a      	ldr	r2, [pc, #168]	; (80065bc <extInt_Config+0xb78>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d106      	bne.n	8006524 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8006516:	4b28      	ldr	r3, [pc, #160]	; (80065b8 <extInt_Config+0xb74>)
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	4a27      	ldr	r2, [pc, #156]	; (80065b8 <extInt_Config+0xb74>)
 800651c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006520:	6153      	str	r3, [r2, #20]
		break;
 8006522:	e080      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	4a25      	ldr	r2, [pc, #148]	; (80065c0 <extInt_Config+0xb7c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d106      	bne.n	800653e <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8006530:	4b21      	ldr	r3, [pc, #132]	; (80065b8 <extInt_Config+0xb74>)
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	4a20      	ldr	r2, [pc, #128]	; (80065b8 <extInt_Config+0xb74>)
 8006536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800653a:	6153      	str	r3, [r2, #20]
		break;
 800653c:	e073      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	4a1f      	ldr	r2, [pc, #124]	; (80065c4 <extInt_Config+0xb80>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d106      	bne.n	8006558 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 800654a:	4b1b      	ldr	r3, [pc, #108]	; (80065b8 <extInt_Config+0xb74>)
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	4a1a      	ldr	r2, [pc, #104]	; (80065b8 <extInt_Config+0xb74>)
 8006550:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006554:	6153      	str	r3, [r2, #20]
		break;
 8006556:	e066      	b.n	8006626 <extInt_Config+0xbe2>
			__NOP();
 8006558:	bf00      	nop
		break;
 800655a:	e064      	b.n	8006626 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 800655c:	4b16      	ldr	r3, [pc, #88]	; (80065b8 <extInt_Config+0xb74>)
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <extInt_Config+0xb74>)
 8006562:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006566:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	4a16      	ldr	r2, [pc, #88]	; (80065c8 <extInt_Config+0xb84>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d104      	bne.n	800657e <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8006574:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <extInt_Config+0xb74>)
 8006576:	4a10      	ldr	r2, [pc, #64]	; (80065b8 <extInt_Config+0xb74>)
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800657c:	e053      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	4a11      	ldr	r2, [pc, #68]	; (80065cc <extInt_Config+0xb88>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d106      	bne.n	8006598 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800658a:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <extInt_Config+0xb74>)
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	4a0a      	ldr	r2, [pc, #40]	; (80065b8 <extInt_Config+0xb74>)
 8006590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006594:	6153      	str	r3, [r2, #20]
		break;
 8006596:	e046      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	4a05      	ldr	r2, [pc, #20]	; (80065b4 <extInt_Config+0xb70>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d115      	bne.n	80065d0 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 80065a4:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <extInt_Config+0xb74>)
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	4a03      	ldr	r2, [pc, #12]	; (80065b8 <extInt_Config+0xb74>)
 80065aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80065ae:	6153      	str	r3, [r2, #20]
		break;
 80065b0:	e039      	b.n	8006626 <extInt_Config+0xbe2>
 80065b2:	bf00      	nop
 80065b4:	40020800 	.word	0x40020800
 80065b8:	40013800 	.word	0x40013800
 80065bc:	40020c00 	.word	0x40020c00
 80065c0:	40021000 	.word	0x40021000
 80065c4:	40021c00 	.word	0x40021c00
 80065c8:	40020000 	.word	0x40020000
 80065cc:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	4a9d      	ldr	r2, [pc, #628]	; (800684c <extInt_Config+0xe08>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d106      	bne.n	80065ea <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80065dc:	4b9c      	ldr	r3, [pc, #624]	; (8006850 <extInt_Config+0xe0c>)
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	4a9b      	ldr	r2, [pc, #620]	; (8006850 <extInt_Config+0xe0c>)
 80065e2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80065e6:	6153      	str	r3, [r2, #20]
		break;
 80065e8:	e01d      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	4a98      	ldr	r2, [pc, #608]	; (8006854 <extInt_Config+0xe10>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d106      	bne.n	8006604 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80065f6:	4b96      	ldr	r3, [pc, #600]	; (8006850 <extInt_Config+0xe0c>)
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	4a95      	ldr	r2, [pc, #596]	; (8006850 <extInt_Config+0xe0c>)
 80065fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006600:	6153      	str	r3, [r2, #20]
		break;
 8006602:	e010      	b.n	8006626 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	4a93      	ldr	r2, [pc, #588]	; (8006858 <extInt_Config+0xe14>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d106      	bne.n	800661e <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8006610:	4b8f      	ldr	r3, [pc, #572]	; (8006850 <extInt_Config+0xe0c>)
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	4a8e      	ldr	r2, [pc, #568]	; (8006850 <extInt_Config+0xe0c>)
 8006616:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800661a:	6153      	str	r3, [r2, #20]
		break;
 800661c:	e003      	b.n	8006626 <extInt_Config+0xbe2>
			__NOP();
 800661e:	bf00      	nop
		break;
 8006620:	e001      	b.n	8006626 <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 8006622:	bf00      	nop
		break;
 8006624:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	791b      	ldrb	r3, [r3, #4]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d126      	bne.n	800667c <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800662e:	4b8b      	ldr	r3, [pc, #556]	; (800685c <extInt_Config+0xe18>)
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	7812      	ldrb	r2, [r2, #0]
 8006638:	4611      	mov	r1, r2
 800663a:	2201      	movs	r2, #1
 800663c:	408a      	lsls	r2, r1
 800663e:	43d2      	mvns	r2, r2
 8006640:	4611      	mov	r1, r2
 8006642:	4a86      	ldr	r2, [pc, #536]	; (800685c <extInt_Config+0xe18>)
 8006644:	400b      	ands	r3, r1
 8006646:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006648:	4b84      	ldr	r3, [pc, #528]	; (800685c <extInt_Config+0xe18>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	7812      	ldrb	r2, [r2, #0]
 8006652:	4611      	mov	r1, r2
 8006654:	2201      	movs	r2, #1
 8006656:	408a      	lsls	r2, r1
 8006658:	43d2      	mvns	r2, r2
 800665a:	4611      	mov	r1, r2
 800665c:	4a7f      	ldr	r2, [pc, #508]	; (800685c <extInt_Config+0xe18>)
 800665e:	400b      	ands	r3, r1
 8006660:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006662:	4b7e      	ldr	r3, [pc, #504]	; (800685c <extInt_Config+0xe18>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6812      	ldr	r2, [r2, #0]
 800666a:	7812      	ldrb	r2, [r2, #0]
 800666c:	4611      	mov	r1, r2
 800666e:	2201      	movs	r2, #1
 8006670:	408a      	lsls	r2, r1
 8006672:	4611      	mov	r1, r2
 8006674:	4a79      	ldr	r2, [pc, #484]	; (800685c <extInt_Config+0xe18>)
 8006676:	430b      	orrs	r3, r1
 8006678:	6093      	str	r3, [r2, #8]
 800667a:	e05c      	b.n	8006736 <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	791b      	ldrb	r3, [r3, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d126      	bne.n	80066d2 <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006684:	4b75      	ldr	r3, [pc, #468]	; (800685c <extInt_Config+0xe18>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6812      	ldr	r2, [r2, #0]
 800668c:	7812      	ldrb	r2, [r2, #0]
 800668e:	4611      	mov	r1, r2
 8006690:	2201      	movs	r2, #1
 8006692:	408a      	lsls	r2, r1
 8006694:	43d2      	mvns	r2, r2
 8006696:	4611      	mov	r1, r2
 8006698:	4a70      	ldr	r2, [pc, #448]	; (800685c <extInt_Config+0xe18>)
 800669a:	400b      	ands	r3, r1
 800669c:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800669e:	4b6f      	ldr	r3, [pc, #444]	; (800685c <extInt_Config+0xe18>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6812      	ldr	r2, [r2, #0]
 80066a6:	7812      	ldrb	r2, [r2, #0]
 80066a8:	4611      	mov	r1, r2
 80066aa:	2201      	movs	r2, #1
 80066ac:	408a      	lsls	r2, r1
 80066ae:	43d2      	mvns	r2, r2
 80066b0:	4611      	mov	r1, r2
 80066b2:	4a6a      	ldr	r2, [pc, #424]	; (800685c <extInt_Config+0xe18>)
 80066b4:	400b      	ands	r3, r1
 80066b6:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80066b8:	4b68      	ldr	r3, [pc, #416]	; (800685c <extInt_Config+0xe18>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	7812      	ldrb	r2, [r2, #0]
 80066c2:	4611      	mov	r1, r2
 80066c4:	2201      	movs	r2, #1
 80066c6:	408a      	lsls	r2, r1
 80066c8:	4611      	mov	r1, r2
 80066ca:	4a64      	ldr	r2, [pc, #400]	; (800685c <extInt_Config+0xe18>)
 80066cc:	430b      	orrs	r3, r1
 80066ce:	60d3      	str	r3, [r2, #12]
 80066d0:	e031      	b.n	8006736 <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80066d2:	4b62      	ldr	r3, [pc, #392]	; (800685c <extInt_Config+0xe18>)
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6812      	ldr	r2, [r2, #0]
 80066da:	7812      	ldrb	r2, [r2, #0]
 80066dc:	4611      	mov	r1, r2
 80066de:	2201      	movs	r2, #1
 80066e0:	408a      	lsls	r2, r1
 80066e2:	43d2      	mvns	r2, r2
 80066e4:	4611      	mov	r1, r2
 80066e6:	4a5d      	ldr	r2, [pc, #372]	; (800685c <extInt_Config+0xe18>)
 80066e8:	400b      	ands	r3, r1
 80066ea:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80066ec:	4b5b      	ldr	r3, [pc, #364]	; (800685c <extInt_Config+0xe18>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	7812      	ldrb	r2, [r2, #0]
 80066f6:	4611      	mov	r1, r2
 80066f8:	2201      	movs	r2, #1
 80066fa:	408a      	lsls	r2, r1
 80066fc:	43d2      	mvns	r2, r2
 80066fe:	4611      	mov	r1, r2
 8006700:	4a56      	ldr	r2, [pc, #344]	; (800685c <extInt_Config+0xe18>)
 8006702:	400b      	ands	r3, r1
 8006704:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006706:	4b55      	ldr	r3, [pc, #340]	; (800685c <extInt_Config+0xe18>)
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6812      	ldr	r2, [r2, #0]
 800670e:	7812      	ldrb	r2, [r2, #0]
 8006710:	4611      	mov	r1, r2
 8006712:	2201      	movs	r2, #1
 8006714:	408a      	lsls	r2, r1
 8006716:	4611      	mov	r1, r2
 8006718:	4a50      	ldr	r2, [pc, #320]	; (800685c <extInt_Config+0xe18>)
 800671a:	430b      	orrs	r3, r1
 800671c:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800671e:	4b4f      	ldr	r3, [pc, #316]	; (800685c <extInt_Config+0xe18>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6812      	ldr	r2, [r2, #0]
 8006726:	7812      	ldrb	r2, [r2, #0]
 8006728:	4611      	mov	r1, r2
 800672a:	2201      	movs	r2, #1
 800672c:	408a      	lsls	r2, r1
 800672e:	4611      	mov	r1, r2
 8006730:	4a4a      	ldr	r2, [pc, #296]	; (800685c <extInt_Config+0xe18>)
 8006732:	430b      	orrs	r3, r1
 8006734:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006736:	4b49      	ldr	r3, [pc, #292]	; (800685c <extInt_Config+0xe18>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6812      	ldr	r2, [r2, #0]
 800673e:	7812      	ldrb	r2, [r2, #0]
 8006740:	4611      	mov	r1, r2
 8006742:	2201      	movs	r2, #1
 8006744:	408a      	lsls	r2, r1
 8006746:	43d2      	mvns	r2, r2
 8006748:	4611      	mov	r1, r2
 800674a:	4a44      	ldr	r2, [pc, #272]	; (800685c <extInt_Config+0xe18>)
 800674c:	400b      	ands	r3, r1
 800674e:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006750:	4b42      	ldr	r3, [pc, #264]	; (800685c <extInt_Config+0xe18>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	6812      	ldr	r2, [r2, #0]
 8006758:	7812      	ldrb	r2, [r2, #0]
 800675a:	4611      	mov	r1, r2
 800675c:	2201      	movs	r2, #1
 800675e:	408a      	lsls	r2, r1
 8006760:	4611      	mov	r1, r2
 8006762:	4a3e      	ldr	r2, [pc, #248]	; (800685c <extInt_Config+0xe18>)
 8006764:	430b      	orrs	r3, r1
 8006766:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006768:	b672      	cpsid	i
}
 800676a:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b0f      	cmp	r3, #15
 8006774:	d862      	bhi.n	800683c <extInt_Config+0xdf8>
 8006776:	a201      	add	r2, pc, #4	; (adr r2, 800677c <extInt_Config+0xd38>)
 8006778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677c:	080067bd 	.word	0x080067bd
 8006780:	080067c5 	.word	0x080067c5
 8006784:	080067cd 	.word	0x080067cd
 8006788:	080067d5 	.word	0x080067d5
 800678c:	080067dd 	.word	0x080067dd
 8006790:	080067e5 	.word	0x080067e5
 8006794:	080067ed 	.word	0x080067ed
 8006798:	080067f5 	.word	0x080067f5
 800679c:	080067fd 	.word	0x080067fd
 80067a0:	08006805 	.word	0x08006805
 80067a4:	0800680d 	.word	0x0800680d
 80067a8:	08006815 	.word	0x08006815
 80067ac:	0800681d 	.word	0x0800681d
 80067b0:	08006825 	.word	0x08006825
 80067b4:	0800682d 	.word	0x0800682d
 80067b8:	08006835 	.word	0x08006835
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 80067bc:	2006      	movs	r0, #6
 80067be:	f7ff f923 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 80067c2:	e03c      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 80067c4:	2007      	movs	r0, #7
 80067c6:	f7ff f91f 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 80067ca:	e038      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 80067cc:	2008      	movs	r0, #8
 80067ce:	f7ff f91b 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 80067d2:	e034      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 80067d4:	2009      	movs	r0, #9
 80067d6:	f7ff f917 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 80067da:	e030      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 80067dc:	200a      	movs	r0, #10
 80067de:	f7ff f913 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 80067e2:	e02c      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80067e4:	2017      	movs	r0, #23
 80067e6:	f7ff f90f 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 80067ea:	e028      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80067ec:	2017      	movs	r0, #23
 80067ee:	f7ff f90b 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 80067f2:	e024      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80067f4:	2017      	movs	r0, #23
 80067f6:	f7ff f907 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 80067fa:	e020      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80067fc:	2017      	movs	r0, #23
 80067fe:	f7ff f903 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 8006802:	e01c      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006804:	2017      	movs	r0, #23
 8006806:	f7ff f8ff 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 800680a:	e018      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800680c:	2028      	movs	r0, #40	; 0x28
 800680e:	f7ff f8fb 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 8006812:	e014      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006814:	2028      	movs	r0, #40	; 0x28
 8006816:	f7ff f8f7 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 800681a:	e010      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800681c:	2028      	movs	r0, #40	; 0x28
 800681e:	f7ff f8f3 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 8006822:	e00c      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006824:	2028      	movs	r0, #40	; 0x28
 8006826:	f7ff f8ef 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 800682a:	e008      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800682c:	2028      	movs	r0, #40	; 0x28
 800682e:	f7ff f8eb 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 8006832:	e004      	b.n	800683e <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006834:	2028      	movs	r0, #40	; 0x28
 8006836:	f7ff f8e7 	bl	8005a08 <__NVIC_EnableIRQ>
		break;
 800683a:	e000      	b.n	800683e <extInt_Config+0xdfa>
	}

	default: {
		break;
 800683c:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800683e:	b662      	cpsie	i
}
 8006840:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	40020c00 	.word	0x40020c00
 8006850:	40013800 	.word	0x40013800
 8006854:	40021000 	.word	0x40021000
 8006858:	40021c00 	.word	0x40021c00
 800685c:	40013c00 	.word	0x40013c00

08006860 <callback_extInt0>:
	__enable_irq();
}


//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
	__NOP();
 8006864:	bf00      	nop
}
 8006866:	bf00      	nop
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
	__NOP();
 8006874:	bf00      	nop
}
 8006876:	bf00      	nop
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
	__NOP();
 8006884:	bf00      	nop
}
 8006886:	bf00      	nop
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
	__NOP();
 8006894:	bf00      	nop
}
 8006896:	bf00      	nop
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
	__NOP();
 80068a4:	bf00      	nop
}
 80068a6:	bf00      	nop
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
	__NOP();
 80068b4:	bf00      	nop
}
 80068b6:	bf00      	nop
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
	__NOP();
 80068c4:	bf00      	nop
}
 80068c6:	bf00      	nop
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
	__NOP();
 80068d4:	bf00      	nop
}
 80068d6:	bf00      	nop
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
	__NOP();
 80068e4:	bf00      	nop
}
 80068e6:	bf00      	nop
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
	__NOP();
 80068f4:	bf00      	nop
}
 80068f6:	bf00      	nop
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
	__NOP();
 8006904:	bf00      	nop
}
 8006906:	bf00      	nop
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
	__NOP();
 8006914:	bf00      	nop
}
 8006916:	bf00      	nop
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
	__NOP();
 8006924:	bf00      	nop
}
 8006926:	bf00      	nop
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
	__NOP();
 8006934:	bf00      	nop
}
 8006936:	bf00      	nop
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8006944:	4b08      	ldr	r3, [pc, #32]	; (8006968 <EXTI0_IRQHandler+0x28>)
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d008      	beq.n	8006962 <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8006950:	4b05      	ldr	r3, [pc, #20]	; (8006968 <EXTI0_IRQHandler+0x28>)
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	4a04      	ldr	r2, [pc, #16]	; (8006968 <EXTI0_IRQHandler+0x28>)
 8006956:	f043 0301 	orr.w	r3, r3, #1
 800695a:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 800695c:	f7ff ff80 	bl	8006860 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8006960:	e000      	b.n	8006964 <EXTI0_IRQHandler+0x24>
		__NOP();
 8006962:	bf00      	nop
}
 8006964:	bf00      	nop
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40013c00 	.word	0x40013c00

0800696c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8006970:	4b08      	ldr	r3, [pc, #32]	; (8006994 <EXTI1_IRQHandler+0x28>)
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 800697c:	4b05      	ldr	r3, [pc, #20]	; (8006994 <EXTI1_IRQHandler+0x28>)
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	4a04      	ldr	r2, [pc, #16]	; (8006994 <EXTI1_IRQHandler+0x28>)
 8006982:	f043 0302 	orr.w	r3, r3, #2
 8006986:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8006988:	f7fd fccc 	bl	8004324 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 800698c:	e000      	b.n	8006990 <EXTI1_IRQHandler+0x24>
		__NOP();
 800698e:	bf00      	nop
}
 8006990:	bf00      	nop
 8006992:	bd80      	pop	{r7, pc}
 8006994:	40013c00 	.word	0x40013c00

08006998 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 800699c:	4b08      	ldr	r3, [pc, #32]	; (80069c0 <EXTI2_IRQHandler+0x28>)
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d008      	beq.n	80069ba <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 80069a8:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <EXTI2_IRQHandler+0x28>)
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	4a04      	ldr	r2, [pc, #16]	; (80069c0 <EXTI2_IRQHandler+0x28>)
 80069ae:	f043 0304 	orr.w	r3, r3, #4
 80069b2:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 80069b4:	f7ff ff5c 	bl	8006870 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 80069b8:	e000      	b.n	80069bc <EXTI2_IRQHandler+0x24>
		__NOP();
 80069ba:	bf00      	nop
}
 80069bc:	bf00      	nop
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40013c00 	.word	0x40013c00

080069c4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 80069c8:	4b08      	ldr	r3, [pc, #32]	; (80069ec <EXTI3_IRQHandler+0x28>)
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	f003 0308 	and.w	r3, r3, #8
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d008      	beq.n	80069e6 <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <EXTI3_IRQHandler+0x28>)
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	4a04      	ldr	r2, [pc, #16]	; (80069ec <EXTI3_IRQHandler+0x28>)
 80069da:	f043 0308 	orr.w	r3, r3, #8
 80069de:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 80069e0:	f7fd fcb0 	bl	8004344 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 80069e4:	e000      	b.n	80069e8 <EXTI3_IRQHandler+0x24>
		__NOP();
 80069e6:	bf00      	nop
}
 80069e8:	bf00      	nop
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	40013c00 	.word	0x40013c00

080069f0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 80069f4:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <EXTI4_IRQHandler+0x28>)
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d008      	beq.n	8006a12 <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 8006a00:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <EXTI4_IRQHandler+0x28>)
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	4a04      	ldr	r2, [pc, #16]	; (8006a18 <EXTI4_IRQHandler+0x28>)
 8006a06:	f043 0310 	orr.w	r3, r3, #16
 8006a0a:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8006a0c:	f7ff ff38 	bl	8006880 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 8006a10:	e000      	b.n	8006a14 <EXTI4_IRQHandler+0x24>
		__NOP();
 8006a12:	bf00      	nop
}
 8006a14:	bf00      	nop
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40013c00 	.word	0x40013c00

08006a1c <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8006a20:	4b26      	ldr	r3, [pc, #152]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d008      	beq.n	8006a3e <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8006a2c:	4b23      	ldr	r3, [pc, #140]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	4a22      	ldr	r2, [pc, #136]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006a32:	f043 0320 	orr.w	r3, r3, #32
 8006a36:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 8006a38:	f7ff ff2a 	bl	8006890 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8006a3c:	e03c      	b.n	8006ab8 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8006a3e:	4b1f      	ldr	r3, [pc, #124]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d008      	beq.n	8006a5c <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 8006a4a:	4b1c      	ldr	r3, [pc, #112]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	4a1b      	ldr	r2, [pc, #108]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a54:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 8006a56:	f7ff ff23 	bl	80068a0 <callback_extInt6>
}
 8006a5a:	e02d      	b.n	8006ab8 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8006a5c:	4b17      	ldr	r3, [pc, #92]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d008      	beq.n	8006a7a <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 8006a68:	4b14      	ldr	r3, [pc, #80]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	4a13      	ldr	r2, [pc, #76]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a72:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8006a74:	f7ff ff1c 	bl	80068b0 <callback_extInt7>
}
 8006a78:	e01e      	b.n	8006ab8 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 8006a7a:	4b10      	ldr	r3, [pc, #64]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d008      	beq.n	8006a98 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 8006a86:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	4a0c      	ldr	r2, [pc, #48]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a90:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 8006a92:	f7ff ff15 	bl	80068c0 <callback_extInt8>
}
 8006a96:	e00f      	b.n	8006ab8 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 8006a98:	4b08      	ldr	r3, [pc, #32]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d008      	beq.n	8006ab6 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8006aa4:	4b05      	ldr	r3, [pc, #20]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	4a04      	ldr	r2, [pc, #16]	; (8006abc <EXTI9_5_IRQHandler+0xa0>)
 8006aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aae:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8006ab0:	f7ff ff0e 	bl	80068d0 <callback_extInt9>
}
 8006ab4:	e000      	b.n	8006ab8 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8006ab6:	bf00      	nop
}
 8006ab8:	bf00      	nop
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	40013c00 	.word	0x40013c00

08006ac0 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8006ac4:	4b2e      	ldr	r3, [pc, #184]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d008      	beq.n	8006ae2 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 8006ad0:	4b2b      	ldr	r3, [pc, #172]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	4a2a      	ldr	r2, [pc, #168]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ada:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 8006adc:	f7ff ff00 	bl	80068e0 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 8006ae0:	e04b      	b.n	8006b7a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 8006ae2:	4b27      	ldr	r3, [pc, #156]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d008      	beq.n	8006b00 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 8006aee:	4b24      	ldr	r3, [pc, #144]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	4a23      	ldr	r2, [pc, #140]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006af4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006af8:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 8006afa:	f7ff fef9 	bl	80068f0 <callback_extInt11>
}
 8006afe:	e03c      	b.n	8006b7a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 8006b00:	4b1f      	ldr	r3, [pc, #124]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d008      	beq.n	8006b1e <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8006b0c:	4b1c      	ldr	r3, [pc, #112]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	4a1b      	ldr	r2, [pc, #108]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006b12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b16:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 8006b18:	f7ff fef2 	bl	8006900 <callback_extInt12>
}
 8006b1c:	e02d      	b.n	8006b7a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 8006b1e:	4b18      	ldr	r3, [pc, #96]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d008      	beq.n	8006b3c <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 8006b2a:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	4a14      	ldr	r2, [pc, #80]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006b30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b34:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 8006b36:	f7ff feeb 	bl	8006910 <callback_extInt13>
}
 8006b3a:	e01e      	b.n	8006b7a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8006b3c:	4b10      	ldr	r3, [pc, #64]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8006b48:	4b0d      	ldr	r3, [pc, #52]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	4a0c      	ldr	r2, [pc, #48]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b52:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8006b54:	f7ff fee4 	bl	8006920 <callback_extInt14>
}
 8006b58:	e00f      	b.n	8006b7a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 8006b5a:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d008      	beq.n	8006b78 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 8006b66:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	4a05      	ldr	r2, [pc, #20]	; (8006b80 <EXTI15_10_IRQHandler+0xc0>)
 8006b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b70:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8006b72:	f7ff fedd 	bl	8006930 <callback_extInt15>
}
 8006b76:	e000      	b.n	8006b7a <EXTI15_10_IRQHandler+0xba>
		__NOP();
 8006b78:	bf00      	nop
}
 8006b7a:	bf00      	nop
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	40013c00 	.word	0x40013c00

08006b84 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	4611      	mov	r1, r2
 8006b90:	461a      	mov	r2, r3
 8006b92:	4603      	mov	r3, r0
 8006b94:	70fb      	strb	r3, [r7, #3]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70bb      	strb	r3, [r7, #2]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	78fa      	ldrb	r2, [r7, #3]
 8006ba2:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	78ba      	ldrb	r2, [r7, #2]
 8006ba8:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	787a      	ldrb	r2, [r7, #1]
 8006bae:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	7c3a      	ldrb	r2, [r7, #16]
 8006bb4:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	7d3a      	ldrb	r2, [r7, #20]
 8006bba:	715a      	strb	r2, [r3, #5]
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	4a88      	ldr	r2, [pc, #544]	; (8006e00 <GPIO_Config+0x238>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d106      	bne.n	8006bf0 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8006be2:	4b88      	ldr	r3, [pc, #544]	; (8006e04 <GPIO_Config+0x23c>)
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	4a87      	ldr	r2, [pc, #540]	; (8006e04 <GPIO_Config+0x23c>)
 8006be8:	f043 0301 	orr.w	r3, r3, #1
 8006bec:	6313      	str	r3, [r2, #48]	; 0x30
 8006bee:	e03a      	b.n	8006c66 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	4a84      	ldr	r2, [pc, #528]	; (8006e08 <GPIO_Config+0x240>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d106      	bne.n	8006c08 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8006bfa:	4b82      	ldr	r3, [pc, #520]	; (8006e04 <GPIO_Config+0x23c>)
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfe:	4a81      	ldr	r2, [pc, #516]	; (8006e04 <GPIO_Config+0x23c>)
 8006c00:	f043 0302 	orr.w	r3, r3, #2
 8006c04:	6313      	str	r3, [r2, #48]	; 0x30
 8006c06:	e02e      	b.n	8006c66 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	4a7f      	ldr	r2, [pc, #508]	; (8006e0c <GPIO_Config+0x244>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d106      	bne.n	8006c20 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8006c12:	4b7c      	ldr	r3, [pc, #496]	; (8006e04 <GPIO_Config+0x23c>)
 8006c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c16:	4a7b      	ldr	r2, [pc, #492]	; (8006e04 <GPIO_Config+0x23c>)
 8006c18:	f043 0304 	orr.w	r3, r3, #4
 8006c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c1e:	e022      	b.n	8006c66 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	4a7a      	ldr	r2, [pc, #488]	; (8006e10 <GPIO_Config+0x248>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d106      	bne.n	8006c38 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8006c2a:	4b76      	ldr	r3, [pc, #472]	; (8006e04 <GPIO_Config+0x23c>)
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2e:	4a75      	ldr	r2, [pc, #468]	; (8006e04 <GPIO_Config+0x23c>)
 8006c30:	f043 0308 	orr.w	r3, r3, #8
 8006c34:	6313      	str	r3, [r2, #48]	; 0x30
 8006c36:	e016      	b.n	8006c66 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	4a75      	ldr	r2, [pc, #468]	; (8006e14 <GPIO_Config+0x24c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d106      	bne.n	8006c50 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8006c42:	4b70      	ldr	r3, [pc, #448]	; (8006e04 <GPIO_Config+0x23c>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c46:	4a6f      	ldr	r2, [pc, #444]	; (8006e04 <GPIO_Config+0x23c>)
 8006c48:	f043 0310 	orr.w	r3, r3, #16
 8006c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c4e:	e00a      	b.n	8006c66 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	4a70      	ldr	r2, [pc, #448]	; (8006e18 <GPIO_Config+0x250>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d105      	bne.n	8006c66 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8006c5a:	4b6a      	ldr	r3, [pc, #424]	; (8006e04 <GPIO_Config+0x23c>)
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	4a69      	ldr	r2, [pc, #420]	; (8006e04 <GPIO_Config+0x23c>)
 8006c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c64:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	785b      	ldrb	r3, [r3, #1]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	fa02 f303 	lsl.w	r3, r2, r3
 8006c76:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	2103      	movs	r1, #3
 8006c86:	fa01 f303 	lsl.w	r3, r1, r3
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	400a      	ands	r2, r1
 8006c94:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	6819      	ldr	r1, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	789b      	ldrb	r3, [r3, #2]
 8006caa:	461a      	mov	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	408b      	lsls	r3, r1
 8006cc6:	43db      	mvns	r3, r3
 8006cc8:	4619      	mov	r1, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	400a      	ands	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	6859      	ldr	r1, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	78db      	ldrb	r3, [r3, #3]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	2103      	movs	r1, #3
 8006d02:	fa01 f303 	lsl.w	r3, r1, r3
 8006d06:	43db      	mvns	r3, r3
 8006d08:	4619      	mov	r1, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	400a      	ands	r2, r1
 8006d10:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	6899      	ldr	r1, [r3, #8]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	791b      	ldrb	r3, [r3, #4]
 8006d26:	461a      	mov	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	2103      	movs	r1, #3
 8006d42:	fa01 f303 	lsl.w	r3, r1, r3
 8006d46:	43db      	mvns	r3, r3
 8006d48:	4619      	mov	r1, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	400a      	ands	r2, r1
 8006d50:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	68d9      	ldr	r1, [r3, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d143      	bne.n	8006df2 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b07      	cmp	r3, #7
 8006d70:	d81f      	bhi.n	8006db2 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	6a1a      	ldr	r2, [r3, #32]
 8006d80:	210f      	movs	r1, #15
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	fa01 f303 	lsl.w	r3, r1, r3
 8006d88:	43db      	mvns	r3, r3
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	400a      	ands	r2, r1
 8006d92:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	6a1a      	ldr	r2, [r3, #32]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	795b      	ldrb	r3, [r3, #5]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	fa01 f303 	lsl.w	r3, r1, r3
 8006da6:	4619      	mov	r1, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8006db0:	e01f      	b.n	8006df2 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	3b08      	subs	r3, #8
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dc2:	210f      	movs	r1, #15
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dca:	43db      	mvns	r3, r3
 8006dcc:	4619      	mov	r1, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	400a      	ands	r2, r1
 8006dd4:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	795b      	ldrb	r3, [r3, #5]
 8006de0:	4619      	mov	r1, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	fa01 f303 	lsl.w	r3, r1, r3
 8006de8:	4619      	mov	r1, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006df2:	bf00      	nop
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40020000 	.word	0x40020000
 8006e04:	40023800 	.word	0x40023800
 8006e08:	40020400 	.word	0x40020400
 8006e0c:	40020800 	.word	0x40020800
 8006e10:	40020c00 	.word	0x40020c00
 8006e14:	40021000 	.word	0x40021000
 8006e18:	40021c00 	.word	0x40021c00

08006e1c <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d10d      	bne.n	8006e4a <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	408b      	lsls	r3, r1
 8006e3e:	4619      	mov	r1, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 8006e48:	e00d      	b.n	8006e66 <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	699a      	ldr	r2, [r3, #24]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	3310      	adds	r3, #16
 8006e56:	2101      	movs	r1, #1
 8006e58:	fa01 f303 	lsl.w	r3, r1, r3
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	619a      	str	r2, [r3, #24]
}
 8006e66:	bf00      	nop
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	695a      	ldr	r2, [r3, #20]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	4619      	mov	r1, r3
 8006e86:	2301      	movs	r3, #1
 8006e88:	408b      	lsls	r3, r1
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	404a      	eors	r2, r1
 8006e92:	615a      	str	r2, [r3, #20]
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <i2c_Config>:
 * Recordar de configurar los pines GPIOx por medio de las funciones alternativas,
 * Ademas de configurar dichos pines como open_drain
 */

void i2c_Config(I2C_Handler_t *ptrHandlerI2C)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
	uint8_t clockAPB1 = getClockAPB1();     //Variable que guarda la velocidad de reloj entregada al bus APB1
 8006ea8:	f000 fa9c 	bl	80073e4 <getClockAPB1>
 8006eac:	4603      	mov	r3, r0
 8006eae:	73fb      	strb	r3, [r7, #15]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	if(ptrHandlerI2C->prtI2Cx == I2C1)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a60      	ldr	r2, [pc, #384]	; (8007038 <i2c_Config+0x198>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d106      	bne.n	8006ec8 <i2c_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8006eba:	4b60      	ldr	r3, [pc, #384]	; (800703c <i2c_Config+0x19c>)
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	4a5f      	ldr	r2, [pc, #380]	; (800703c <i2c_Config+0x19c>)
 8006ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ec6:	e016      	b.n	8006ef6 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C2)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a5c      	ldr	r2, [pc, #368]	; (8007040 <i2c_Config+0x1a0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d106      	bne.n	8006ee0 <i2c_Config+0x40>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8006ed2:	4b5a      	ldr	r3, [pc, #360]	; (800703c <i2c_Config+0x19c>)
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	4a59      	ldr	r2, [pc, #356]	; (800703c <i2c_Config+0x19c>)
 8006ed8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006edc:	6413      	str	r3, [r2, #64]	; 0x40
 8006ede:	e00a      	b.n	8006ef6 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C3)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a57      	ldr	r2, [pc, #348]	; (8007044 <i2c_Config+0x1a4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d105      	bne.n	8006ef6 <i2c_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8006eea:	4b54      	ldr	r3, [pc, #336]	; (800703c <i2c_Config+0x19c>)
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	4a53      	ldr	r2, [pc, #332]	; (800703c <i2c_Config+0x19c>)
 8006ef0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ef4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//---------------------------------2) Reiniciamos el periferico------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_SWRST;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f04:	601a      	str	r2, [r3, #0]
	__NOP();
 8006f06:	bf00      	nop
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_SWRST;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f16:	601a      	str	r2, [r3, #0]

	//-----------------------------------3) Valor del reloj principal------------------------------------------
	//Registro: CR2

	ptrHandlerI2C->prtI2Cx->CR2 &= ~(0b111111<<I2C_CR2_FREQ_Pos);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006f26:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->prtI2Cx->CR2 |= (clockAPB1<<I2C_CR2_FREQ_Pos);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6859      	ldr	r1, [r3, #4]
 8006f2e:	7bfa      	ldrb	r2, [r7, #15]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	605a      	str	r2, [r3, #4]
	//-------------------------------------4) Configuracion del I2C------------------------------------------
	//Registro: CCR
	//Registro: TRISE

	//Variables que almacenan el respectivo valor a cargar en los registros CRR y Trise
	uint16_t valueCRR = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	81bb      	strh	r3, [r7, #12]
	uint8_t valueTrise = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	72fb      	strb	r3, [r7, #11]

	//definimos inicialmente los registro en 0
	ptrHandlerI2C->prtI2Cx->CCR = 0;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2200      	movs	r2, #0
 8006f46:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->prtI2Cx->TRISE = 0;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	621a      	str	r2, [r3, #32]

	//Configuramos el I2C deacuerdo al modo selsecionado
	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	795b      	ldrb	r3, [r3, #5]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d121      	bne.n	8006f9c <i2c_Config+0xfc>
	{
		//Seleccionamos el modo estandar
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	69da      	ldr	r2, [r3, #28]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f66:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (5000*clockAPB1)/1000;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	0092      	lsls	r2, r2, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69d9      	ldr	r1, [r3, #28]
 8006f7a:	89ba      	ldrh	r2, [r7, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((1000*clockAPB1)/1000)+1;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	3301      	adds	r3, #1
 8006f88:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6a19      	ldr	r1, [r3, #32]
 8006f90:	7afa      	ldrb	r2, [r7, #11]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	621a      	str	r2, [r3, #32]
 8006f9a:	e039      	b.n	8007010 <i2c_Config+0x170>
	}
	else
	{
		//Seleccionamos el modo Fast
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	69da      	ldr	r2, [r3, #28]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006faa:	61da      	str	r2, [r3, #28]
		ptrHandlerI2C->prtI2Cx->CCR |= I2C_CCR_FS;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	69da      	ldr	r2, [r3, #28]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fba:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (2500*clockAPB1)/3000;
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
 8006fbe:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006fc2:	fb02 f303 	mul.w	r3, r2, r3
 8006fc6:	4a20      	ldr	r2, [pc, #128]	; (8007048 <i2c_Config+0x1a8>)
 8006fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8006fcc:	1192      	asrs	r2, r2, #6
 8006fce:	17db      	asrs	r3, r3, #31
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	69d9      	ldr	r1, [r3, #28]
 8006fda:	89ba      	ldrh	r2, [r7, #12]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((300*clockAPB1)/1000)+1;
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	4a17      	ldr	r2, [pc, #92]	; (800704c <i2c_Config+0x1ac>)
 8006ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8006ff4:	1192      	asrs	r2, r2, #6
 8006ff6:	17db      	asrs	r3, r3, #31
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6a19      	ldr	r1, [r3, #32]
 8007006:	7afa      	ldrb	r2, [r7, #11]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	621a      	str	r2, [r3, #32]
	}

	//-----------------------------------5) Activamos el modulo I2C------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_PE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 0201 	bic.w	r2, r2, #1
 800701e:	601a      	str	r2, [r3, #0]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_PE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0201 	orr.w	r2, r2, #1
 800702e:	601a      	str	r2, [r3, #0]
}
 8007030:	bf00      	nop
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	40005400 	.word	0x40005400
 800703c:	40023800 	.word	0x40023800
 8007040:	40005800 	.word	0x40005800
 8007044:	40005c00 	.word	0x40005c00
 8007048:	057619f1 	.word	0x057619f1
 800704c:	10624dd3 	.word	0x10624dd3

08007050 <i2c_StartTrasaction>:

//----------------------------------------Funciones para la Transaccion----------------------------------------
//Funcion para empezar la Transaccion
void i2c_StartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	/*verificamos que la linea no esta ocupada
	 * bit "busy" en I2C
	 */
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8007058:	e000      	b.n	800705c <i2c_StartTrasaction+0xc>
	{
		__NOP();
 800705a:	bf00      	nop
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1f7      	bne.n	800705a <i2c_StartTrasaction+0xa>
	}
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007078:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800707a:	e000      	b.n	800707e <i2c_StartTrasaction+0x2e>
	{
		__NOP();
 800707c:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0f7      	beq.n	800707c <i2c_StartTrasaction+0x2c>
	}
}
 800708c:	bf00      	nop
 800708e:	bf00      	nop
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <i2c_ReStartTrasaction>:

//Generar de nuevo una señal para empazar la Transaccion
void i2c_ReStartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070b0:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 80070b2:	e000      	b.n	80070b6 <i2c_ReStartTrasaction+0x1c>
	{
		__NOP();
 80070b4:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d0f7      	beq.n	80070b4 <i2c_ReStartTrasaction+0x1a>
	}
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <i2c_SendSlaveAddressRW>:

//Funcion para enviar la direcion de Slave ademas de definir la lectura o escritura del Sclave
void i2c_SendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
 80070de:	4613      	mov	r3, r2
 80070e0:	70bb      	strb	r3, [r7, #2]
	//Definimos una variable auxiliar
	uint8_t auxByte = 0;
 80070e2:	2300      	movs	r3, #0
 80070e4:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	//Cargamos la direccion del Sclave, ademas cargamos el bit de lectura o escritura
	ptrHandlerI2C->prtI2Cx->DR = (slaveAddress<<1) | readOrWrite;
 80070e6:	78fb      	ldrb	r3, [r7, #3]
 80070e8:	005a      	lsls	r2, r3, #1
 80070ea:	78bb      	ldrb	r3, [r7, #2]
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "ADDR" del evento "Address" se levante
	//Se limpia la bandera "ADDR" leyendo SR1->leyendo en SR2
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 80070f4:	e000      	b.n	80070f8 <i2c_SendSlaveAddressRW+0x26>
	{
		__NOP();
 80070f6:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0f7      	beq.n	80070f6 <i2c_SendSlaveAddressRW+0x24>
	}
	//Se limpia la bandera "ADDR"
	auxByte = ptrHandlerI2C->prtI2Cx->SR1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->prtI2Cx->SR2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	73fb      	strb	r3, [r7, #15]
}
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <i2c_SendMemoryAddress>:

//Enviamos la direccion de memoria que deseamos leer o escribir
void i2c_SendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	460b      	mov	r3, r1
 800712c:	70fb      	strb	r3, [r7, #3]
	//Enviamos la direccion de memoria que desamos leer
	ptrHandlerI2C->prtI2Cx->DR = memAddr;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	78fa      	ldrb	r2, [r7, #3]
 8007134:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "TXE" del evento "Data1" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 8007136:	e000      	b.n	800713a <i2c_SendMemoryAddress+0x18>
	{
		__NOP();
 8007138:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0f7      	beq.n	8007138 <i2c_SendMemoryAddress+0x16>
	}
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <i2c_SendDataByte>:

//Escritura de datos
void i2c_SendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	460b      	mov	r3, r1
 8007160:	70fb      	strb	r3, [r7, #3]
	//Cargamos el valor que desasmos escribir
	ptrHandlerI2C->prtI2Cx->DR = dataToWrite;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	78fa      	ldrb	r2, [r7, #3]
 8007168:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "BTF" del evento "Transmision" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 800716a:	e000      	b.n	800716e <i2c_SendDataByte+0x18>
	{
		__NOP();
 800716c:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0f7      	beq.n	800716c <i2c_SendDataByte+0x16>
	}
}
 800717c:	bf00      	nop
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <i2c_ReadDataByte>:

//Lectura de datos
uint8_t i2c_ReadDataByte(I2C_Handler_t *ptrHandlerI2C)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
	//Esperamos a que la bandera "RxNE" del evento "Recepcion" se levante
	//Se limpia la bandera "RxNE" leyendo el registro DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8007192:	e000      	b.n	8007196 <i2c_ReadDataByte+0xc>
	{
		__NOP();
 8007194:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d0f7      	beq.n	8007194 <i2c_ReadDataByte+0xa>
	}
	//guardamos los datos recibimos
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->prtI2Cx->DR;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C ;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	799b      	ldrb	r3, [r3, #6]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <i2c_SendNoAck>:

//Funcion para activar la indicaicon de NoACK(indicacion para el Sclave de terminar la transmision de datos)
void i2c_SendNoAck(I2C_Handler_t *ptrHandlerI2C)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
	//Esribimos cero en el bit Ack del registro CR1
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_ACK;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071d6:	601a      	str	r2, [r3, #0]

}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <i2c_StopTrasaction>:
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_ACK;
}

//Funcion para generar el Stop bit
void i2c_StopTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_STOP;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071fa:	601a      	str	r2, [r3, #0]
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <i2c_ReadSingleRegister>:

//------------------------------------Funciones para la comunicacion por I2C----------------------------------------

uint8_t i2c_ReadSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	70fb      	strb	r3, [r7, #3]
	//0. Creacion de una variable auxiliara para recibir el dato leido
	uint8_t auxRead = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	73fb      	strb	r3, [r7, #15]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff ff19 	bl	8007050 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	791b      	ldrb	r3, [r3, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7ff ff53 	bl	80070d2 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos leer
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff ff76 	bl	8007122 <i2c_SendMemoryAddress>
	//4. Creamos una condicion de re start
	i2c_ReStartTrasaction(ptrHandlerI2C);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff ff2f 	bl	800709a <i2c_ReStartTrasaction>
	//5. Enviamos la direccion del Sclavo e indicamos que se desea leer el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	791b      	ldrb	r3, [r3, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff ff44 	bl	80070d2 <i2c_SendSlaveAddressRW>
	//6. Leemos el dato que envia el Sclavo
	auxRead = i2c_ReadDataByte(ptrHandlerI2C);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff ff9d 	bl	800718a <i2c_ReadDataByte>
 8007250:	4603      	mov	r3, r0
 8007252:	73fb      	strb	r3, [r7, #15]
	//7. Generamso la condicio de NoAck
	i2c_SendNoAck(ptrHandlerI2C);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff ffb3 	bl	80071c0 <i2c_SendNoAck>
	//8. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff ffc2 	bl	80071e4 <i2c_StopTrasaction>

	return auxRead;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <i2c_WriteSingleRegister>:

void i2c_WriteSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	460b      	mov	r3, r1
 8007274:	70fb      	strb	r3, [r7, #3]
 8007276:	4613      	mov	r3, r2
 8007278:	70bb      	strb	r3, [r7, #2]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7ff fee8 	bl	8007050 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	791b      	ldrb	r3, [r3, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff ff22 	bl	80070d2 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos escribir
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff ff45 	bl	8007122 <i2c_SendMemoryAddress>
	//4. Enviamos el dato que se desea escribir en el Sclave
	i2c_SendDataByte(ptrHandlerI2C, newValue);
 8007298:	78bb      	ldrb	r3, [r7, #2]
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff ff5a 	bl	8007156 <i2c_SendDataByte>
	//5. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff ff9e 	bl	80071e4 <i2c_StopTrasaction>
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	4603      	mov	r3, r0
 80072b8:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 80072ba:	4a39      	ldr	r2, [pc, #228]	; (80073a0 <configPLL+0xf0>)
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 80072c0:	79fb      	ldrb	r3, [r7, #7]
 80072c2:	2b31      	cmp	r3, #49	; 0x31
 80072c4:	d804      	bhi.n	80072d0 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 80072c6:	4b37      	ldr	r3, [pc, #220]	; (80073a4 <configPLL+0xf4>)
 80072c8:	4a36      	ldr	r2, [pc, #216]	; (80073a4 <configPLL+0xf4>)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	6093      	str	r3, [r2, #8]
 80072ce:	e005      	b.n	80072dc <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80072d0:	4b34      	ldr	r3, [pc, #208]	; (80073a4 <configPLL+0xf4>)
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	4a33      	ldr	r2, [pc, #204]	; (80073a4 <configPLL+0xf4>)
 80072d6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80072da:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 80072dc:	4b31      	ldr	r3, [pc, #196]	; (80073a4 <configPLL+0xf4>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	4a30      	ldr	r2, [pc, #192]	; (80073a4 <configPLL+0xf4>)
 80072e2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80072e6:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 80072e8:	4b2e      	ldr	r3, [pc, #184]	; (80073a4 <configPLL+0xf4>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	4a2d      	ldr	r2, [pc, #180]	; (80073a4 <configPLL+0xf4>)
 80072ee:	f043 0312 	orr.w	r3, r3, #18
 80072f2:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 80072f4:	4b2b      	ldr	r3, [pc, #172]	; (80073a4 <configPLL+0xf4>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	79fa      	ldrb	r2, [r7, #7]
 80072fa:	0092      	lsls	r2, r2, #2
 80072fc:	3a0e      	subs	r2, #14
 80072fe:	0192      	lsls	r2, r2, #6
 8007300:	4611      	mov	r1, r2
 8007302:	4a28      	ldr	r2, [pc, #160]	; (80073a4 <configPLL+0xf4>)
 8007304:	430b      	orrs	r3, r1
 8007306:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8007308:	4b26      	ldr	r3, [pc, #152]	; (80073a4 <configPLL+0xf4>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	4a25      	ldr	r2, [pc, #148]	; (80073a4 <configPLL+0xf4>)
 800730e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007312:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8007314:	4b23      	ldr	r3, [pc, #140]	; (80073a4 <configPLL+0xf4>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a22      	ldr	r2, [pc, #136]	; (80073a4 <configPLL+0xf4>)
 800731a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800731e:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8007320:	e000      	b.n	8007324 <configPLL+0x74>
	{
		__NOP();
 8007322:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8007324:	4b1f      	ldr	r3, [pc, #124]	; (80073a4 <configPLL+0xf4>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0f8      	beq.n	8007322 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	2b5a      	cmp	r3, #90	; 0x5a
 8007334:	d909      	bls.n	800734a <configPLL+0x9a>
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	2b64      	cmp	r3, #100	; 0x64
 800733a:	d806      	bhi.n	800734a <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 800733c:	4b1a      	ldr	r3, [pc, #104]	; (80073a8 <configPLL+0xf8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a19      	ldr	r2, [pc, #100]	; (80073a8 <configPLL+0xf8>)
 8007342:	f043 0303 	orr.w	r3, r3, #3
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	e01d      	b.n	8007386 <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	2b40      	cmp	r3, #64	; 0x40
 800734e:	d909      	bls.n	8007364 <configPLL+0xb4>
 8007350:	79fb      	ldrb	r3, [r7, #7]
 8007352:	2b5a      	cmp	r3, #90	; 0x5a
 8007354:	d806      	bhi.n	8007364 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8007356:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <configPLL+0xf8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a13      	ldr	r2, [pc, #76]	; (80073a8 <configPLL+0xf8>)
 800735c:	f043 0302 	orr.w	r3, r3, #2
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	e010      	b.n	8007386 <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8007364:	79fb      	ldrb	r3, [r7, #7]
 8007366:	2b1e      	cmp	r3, #30
 8007368:	d909      	bls.n	800737e <configPLL+0xce>
 800736a:	79fb      	ldrb	r3, [r7, #7]
 800736c:	2b40      	cmp	r3, #64	; 0x40
 800736e:	d806      	bhi.n	800737e <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8007370:	4b0d      	ldr	r3, [pc, #52]	; (80073a8 <configPLL+0xf8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a0c      	ldr	r2, [pc, #48]	; (80073a8 <configPLL+0xf8>)
 8007376:	f043 0301 	orr.w	r3, r3, #1
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	e003      	b.n	8007386 <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 800737e:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <configPLL+0xf8>)
 8007380:	4a09      	ldr	r2, [pc, #36]	; (80073a8 <configPLL+0xf8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 8007386:	4b07      	ldr	r3, [pc, #28]	; (80073a4 <configPLL+0xf4>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	4a06      	ldr	r2, [pc, #24]	; (80073a4 <configPLL+0xf4>)
 800738c:	f043 0302 	orr.w	r3, r3, #2
 8007390:	6093      	str	r3, [r2, #8]

}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	200094a0 	.word	0x200094a0
 80073a4:	40023800 	.word	0x40023800
 80073a8:	40023c00 	.word	0x40023c00

080073ac <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 80073b6:	4b09      	ldr	r3, [pc, #36]	; (80073dc <getConfigPLL+0x30>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d103      	bne.n	80073ca <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 80073c2:	4b07      	ldr	r3, [pc, #28]	; (80073e0 <getConfigPLL+0x34>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	71fb      	strb	r3, [r7, #7]
 80073c8:	e001      	b.n	80073ce <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 80073ca:	2310      	movs	r3, #16
 80073cc:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 80073ce:	79fb      	ldrb	r3, [r7, #7]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	40023800 	.word	0x40023800
 80073e0:	200094a0 	.word	0x200094a0

080073e4 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 80073ea:	f7ff ffdf 	bl	80073ac <getConfigPLL>
 80073ee:	4603      	mov	r3, r0
 80073f0:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 80073f2:	2300      	movs	r3, #0
 80073f4:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 80073f6:	79bb      	ldrb	r3, [r7, #6]
 80073f8:	2b31      	cmp	r3, #49	; 0x31
 80073fa:	d802      	bhi.n	8007402 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 80073fc:	79bb      	ldrb	r3, [r7, #6]
 80073fe:	71fb      	strb	r3, [r7, #7]
 8007400:	e002      	b.n	8007408 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8007402:	79bb      	ldrb	r3, [r7, #6]
 8007404:	089b      	lsrs	r3, r3, #2
 8007406:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8007408:	79fb      	ldrb	r3, [r7, #7]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 800741e:	4b0a      	ldr	r3, [pc, #40]	; (8007448 <configMCO2+0x34>)
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	4a09      	ldr	r2, [pc, #36]	; (8007448 <configMCO2+0x34>)
 8007424:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007428:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 800742a:	4b07      	ldr	r3, [pc, #28]	; (8007448 <configMCO2+0x34>)
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	79fa      	ldrb	r2, [r7, #7]
 8007430:	0792      	lsls	r2, r2, #30
 8007432:	4611      	mov	r1, r2
 8007434:	4a04      	ldr	r2, [pc, #16]	; (8007448 <configMCO2+0x34>)
 8007436:	430b      	orrs	r3, r1
 8007438:	6093      	str	r3, [r2, #8]
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40023800 	.word	0x40023800

0800744c <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 8007456:	79fb      	ldrb	r3, [r7, #7]
 8007458:	3b01      	subs	r3, #1
 800745a:	2b04      	cmp	r3, #4
 800745c:	d84b      	bhi.n	80074f6 <configMCO2PRE+0xaa>
 800745e:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <configMCO2PRE+0x18>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	08007479 	.word	0x08007479
 8007468:	0800748f 	.word	0x0800748f
 800746c:	080074a9 	.word	0x080074a9
 8007470:	080074c3 	.word	0x080074c3
 8007474:	080074dd 	.word	0x080074dd
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8007478:	4b23      	ldr	r3, [pc, #140]	; (8007508 <configMCO2PRE+0xbc>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	4a22      	ldr	r2, [pc, #136]	; (8007508 <configMCO2PRE+0xbc>)
 800747e:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8007482:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 8007484:	4b20      	ldr	r3, [pc, #128]	; (8007508 <configMCO2PRE+0xbc>)
 8007486:	4a20      	ldr	r2, [pc, #128]	; (8007508 <configMCO2PRE+0xbc>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	6093      	str	r3, [r2, #8]
			break;
 800748c:	e035      	b.n	80074fa <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800748e:	4b1e      	ldr	r3, [pc, #120]	; (8007508 <configMCO2PRE+0xbc>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	4a1d      	ldr	r2, [pc, #116]	; (8007508 <configMCO2PRE+0xbc>)
 8007494:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8007498:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 800749a:	4b1b      	ldr	r3, [pc, #108]	; (8007508 <configMCO2PRE+0xbc>)
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	4a1a      	ldr	r2, [pc, #104]	; (8007508 <configMCO2PRE+0xbc>)
 80074a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074a4:	6093      	str	r3, [r2, #8]
			break;
 80074a6:	e028      	b.n	80074fa <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80074a8:	4b17      	ldr	r3, [pc, #92]	; (8007508 <configMCO2PRE+0xbc>)
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	4a16      	ldr	r2, [pc, #88]	; (8007508 <configMCO2PRE+0xbc>)
 80074ae:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80074b2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 80074b4:	4b14      	ldr	r3, [pc, #80]	; (8007508 <configMCO2PRE+0xbc>)
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	4a13      	ldr	r2, [pc, #76]	; (8007508 <configMCO2PRE+0xbc>)
 80074ba:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 80074be:	6093      	str	r3, [r2, #8]
			break;
 80074c0:	e01b      	b.n	80074fa <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80074c2:	4b11      	ldr	r3, [pc, #68]	; (8007508 <configMCO2PRE+0xbc>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	4a10      	ldr	r2, [pc, #64]	; (8007508 <configMCO2PRE+0xbc>)
 80074c8:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80074cc:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 80074ce:	4b0e      	ldr	r3, [pc, #56]	; (8007508 <configMCO2PRE+0xbc>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	4a0d      	ldr	r2, [pc, #52]	; (8007508 <configMCO2PRE+0xbc>)
 80074d4:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80074d8:	6093      	str	r3, [r2, #8]
			break;
 80074da:	e00e      	b.n	80074fa <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80074dc:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <configMCO2PRE+0xbc>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	4a09      	ldr	r2, [pc, #36]	; (8007508 <configMCO2PRE+0xbc>)
 80074e2:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80074e6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 80074e8:	4b07      	ldr	r3, [pc, #28]	; (8007508 <configMCO2PRE+0xbc>)
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	4a06      	ldr	r2, [pc, #24]	; (8007508 <configMCO2PRE+0xbc>)
 80074ee:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80074f2:	6093      	str	r3, [r2, #8]
			break;
 80074f4:	e001      	b.n	80074fa <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 80074f6:	bf00      	nop
			break;
 80074f8:	bf00      	nop
		}
	}

}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40023800 	.word	0x40023800

0800750c <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751c:	d106      	bne.n	800752c <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800751e:	4b81      	ldr	r3, [pc, #516]	; (8007724 <pwm_Config+0x218>)
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	4a80      	ldr	r2, [pc, #512]	; (8007724 <pwm_Config+0x218>)
 8007524:	f043 0301 	orr.w	r3, r3, #1
 8007528:	6413      	str	r3, [r2, #64]	; 0x40
 800752a:	e024      	b.n	8007576 <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	4a7d      	ldr	r2, [pc, #500]	; (8007728 <pwm_Config+0x21c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d106      	bne.n	8007544 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8007536:	4b7b      	ldr	r3, [pc, #492]	; (8007724 <pwm_Config+0x218>)
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	4a7a      	ldr	r2, [pc, #488]	; (8007724 <pwm_Config+0x218>)
 800753c:	f043 0302 	orr.w	r3, r3, #2
 8007540:	6413      	str	r3, [r2, #64]	; 0x40
 8007542:	e018      	b.n	8007576 <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	4a78      	ldr	r2, [pc, #480]	; (800772c <pwm_Config+0x220>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d106      	bne.n	800755c <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800754e:	4b75      	ldr	r3, [pc, #468]	; (8007724 <pwm_Config+0x218>)
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	4a74      	ldr	r2, [pc, #464]	; (8007724 <pwm_Config+0x218>)
 8007554:	f043 0304 	orr.w	r3, r3, #4
 8007558:	6413      	str	r3, [r2, #64]	; 0x40
 800755a:	e00c      	b.n	8007576 <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	4a73      	ldr	r2, [pc, #460]	; (8007730 <pwm_Config+0x224>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d106      	bne.n	8007574 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8007566:	4b6f      	ldr	r3, [pc, #444]	; (8007724 <pwm_Config+0x218>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	4a6e      	ldr	r2, [pc, #440]	; (8007724 <pwm_Config+0x218>)
 800756c:	f043 0308 	orr.w	r3, r3, #8
 8007570:	6413      	str	r3, [r2, #64]	; 0x40
 8007572:	e000      	b.n	8007576 <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8007574:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fa4c 	bl	8007a14 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b03      	cmp	r3, #3
 8007582:	f200 8118 	bhi.w	80077b6 <pwm_Config+0x2aa>
 8007586:	a201      	add	r2, pc, #4	; (adr r2, 800758c <pwm_Config+0x80>)
 8007588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758c:	0800759d 	.word	0x0800759d
 8007590:	0800761f 	.word	0x0800761f
 8007594:	080076a1 	.word	0x080076a1
 8007598:	08007735 	.word	0x08007735
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	699a      	ldr	r2, [r3, #24]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f022 0203 	bic.w	r2, r2, #3
 80075aa:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80075ba:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80075ca:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	699a      	ldr	r2, [r3, #24]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f022 0208 	bic.w	r2, r2, #8
 80075da:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	699a      	ldr	r2, [r3, #24]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f042 0208 	orr.w	r2, r2, #8
 80075ea:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	699a      	ldr	r2, [r3, #24]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f022 0204 	bic.w	r2, r2, #4
 80075fa:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	699a      	ldr	r2, [r3, #24]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f042 0204 	orr.w	r2, r2, #4
 800760a:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	699a      	ldr	r2, [r3, #24]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800761a:	619a      	str	r2, [r3, #24]

		break;
 800761c:	e0cc      	b.n	80077b8 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	699a      	ldr	r2, [r3, #24]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f022 0203 	bic.w	r2, r2, #3
 800762c:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	699a      	ldr	r2, [r3, #24]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800763c:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	699a      	ldr	r2, [r3, #24]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800764c:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	699a      	ldr	r2, [r3, #24]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800765c:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	699a      	ldr	r2, [r3, #24]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800766c:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	699a      	ldr	r2, [r3, #24]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800767c:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	699a      	ldr	r2, [r3, #24]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800768c:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	699a      	ldr	r2, [r3, #24]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800769c:	619a      	str	r2, [r3, #24]

		break;
 800769e:	e08b      	b.n	80077b8 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	69da      	ldr	r2, [r3, #28]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f022 0203 	bic.w	r2, r2, #3
 80076ae:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	69da      	ldr	r2, [r3, #28]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80076be:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	69da      	ldr	r2, [r3, #28]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80076ce:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	69da      	ldr	r2, [r3, #28]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f022 0208 	bic.w	r2, r2, #8
 80076de:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	69da      	ldr	r2, [r3, #28]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f042 0208 	orr.w	r2, r2, #8
 80076ee:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	69da      	ldr	r2, [r3, #28]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f022 0204 	bic.w	r2, r2, #4
 80076fe:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	69da      	ldr	r2, [r3, #28]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f042 0204 	orr.w	r2, r2, #4
 800770e:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	69da      	ldr	r2, [r3, #28]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800771e:	61da      	str	r2, [r3, #28]

		break;
 8007720:	e04a      	b.n	80077b8 <pwm_Config+0x2ac>
 8007722:	bf00      	nop
 8007724:	40023800 	.word	0x40023800
 8007728:	40000400 	.word	0x40000400
 800772c:	40000800 	.word	0x40000800
 8007730:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	69da      	ldr	r2, [r3, #28]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007742:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	69da      	ldr	r2, [r3, #28]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007752:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	69da      	ldr	r2, [r3, #28]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8007762:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	69da      	ldr	r2, [r3, #28]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007772:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	69da      	ldr	r2, [r3, #28]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007782:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	69da      	ldr	r2, [r3, #28]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007792:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	69da      	ldr	r2, [r3, #28]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077a2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	69da      	ldr	r2, [r3, #28]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077b2:	61da      	str	r2, [r3, #28]

		break;
 80077b4:	e000      	b.n	80077b8 <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 80077b6:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	791b      	ldrb	r3, [r3, #4]
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f896 	bl	80078f0 <statusPolarityPWM>

}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d87f      	bhi.n	80078e0 <statusInOutPWM+0x114>
 80077e0:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <statusInOutPWM+0x1c>)
 80077e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e6:	bf00      	nop
 80077e8:	080077f9 	.word	0x080077f9
 80077ec:	08007833 	.word	0x08007833
 80077f0:	0800786d 	.word	0x0800786d
 80077f4:	080078a7 	.word	0x080078a7
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 80077f8:	78fb      	ldrb	r3, [r7, #3]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d110      	bne.n	8007820 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	6a1a      	ldr	r2, [r3, #32]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f022 0201 	bic.w	r2, r2, #1
 800780c:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	6a1a      	ldr	r2, [r3, #32]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f042 0201 	orr.w	r2, r2, #1
 800781c:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 800781e:	e060      	b.n	80078e2 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	6a1a      	ldr	r2, [r3, #32]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f022 0201 	bic.w	r2, r2, #1
 800782e:	621a      	str	r2, [r3, #32]
		break;
 8007830:	e057      	b.n	80078e2 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d110      	bne.n	800785a <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	6a1a      	ldr	r2, [r3, #32]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f022 0210 	bic.w	r2, r2, #16
 8007846:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	6a1a      	ldr	r2, [r3, #32]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f042 0210 	orr.w	r2, r2, #16
 8007856:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 8007858:	e043      	b.n	80078e2 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	6a1a      	ldr	r2, [r3, #32]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f022 0210 	bic.w	r2, r2, #16
 8007868:	621a      	str	r2, [r3, #32]
		break;
 800786a:	e03a      	b.n	80078e2 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 800786c:	78fb      	ldrb	r3, [r7, #3]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d110      	bne.n	8007894 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	6a1a      	ldr	r2, [r3, #32]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007880:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	6a1a      	ldr	r2, [r3, #32]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007890:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 8007892:	e026      	b.n	80078e2 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	6a1a      	ldr	r2, [r3, #32]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078a2:	621a      	str	r2, [r3, #32]
		break;
 80078a4:	e01d      	b.n	80078e2 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 80078a6:	78fb      	ldrb	r3, [r7, #3]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d110      	bne.n	80078ce <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	6a1a      	ldr	r2, [r3, #32]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078ba:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	6a1a      	ldr	r2, [r3, #32]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078ca:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 80078cc:	e009      	b.n	80078e2 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	6a1a      	ldr	r2, [r3, #32]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078dc:	621a      	str	r2, [r3, #32]
		break;
 80078de:	e000      	b.n	80078e2 <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 80078e0:	bf00      	nop
	}
	}
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop

080078f0 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b03      	cmp	r3, #3
 8007902:	d87f      	bhi.n	8007a04 <statusPolarityPWM+0x114>
 8007904:	a201      	add	r2, pc, #4	; (adr r2, 800790c <statusPolarityPWM+0x1c>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	0800791d 	.word	0x0800791d
 8007910:	08007957 	.word	0x08007957
 8007914:	08007991 	.word	0x08007991
 8007918:	080079cb 	.word	0x080079cb
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d110      	bne.n	8007944 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	6a1a      	ldr	r2, [r3, #32]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f022 0202 	bic.w	r2, r2, #2
 8007930:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	6a1a      	ldr	r2, [r3, #32]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f042 0202 	orr.w	r2, r2, #2
 8007940:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 8007942:	e060      	b.n	8007a06 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	6a1a      	ldr	r2, [r3, #32]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f022 0202 	bic.w	r2, r2, #2
 8007952:	621a      	str	r2, [r3, #32]
		break;
 8007954:	e057      	b.n	8007a06 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 8007956:	78fb      	ldrb	r3, [r7, #3]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d110      	bne.n	800797e <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	6a1a      	ldr	r2, [r3, #32]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f022 0220 	bic.w	r2, r2, #32
 800796a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	6a1a      	ldr	r2, [r3, #32]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f042 0220 	orr.w	r2, r2, #32
 800797a:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 800797c:	e043      	b.n	8007a06 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	6a1a      	ldr	r2, [r3, #32]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f022 0220 	bic.w	r2, r2, #32
 800798c:	621a      	str	r2, [r3, #32]
		break;
 800798e:	e03a      	b.n	8007a06 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d110      	bne.n	80079b8 <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	6a1a      	ldr	r2, [r3, #32]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80079a4:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	6a1a      	ldr	r2, [r3, #32]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079b4:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 80079b6:	e026      	b.n	8007a06 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	6a1a      	ldr	r2, [r3, #32]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80079c6:	621a      	str	r2, [r3, #32]
		break;
 80079c8:	e01d      	b.n	8007a06 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 80079ca:	78fb      	ldrb	r3, [r7, #3]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d110      	bne.n	80079f2 <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	6a1a      	ldr	r2, [r3, #32]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079de:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	6a1a      	ldr	r2, [r3, #32]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079ee:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 80079f0:	e009      	b.n	8007a06 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	6a1a      	ldr	r2, [r3, #32]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a00:	621a      	str	r2, [r3, #32]
		break;
 8007a02:	e000      	b.n	8007a06 <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 8007a04:	bf00      	nop
	}
	}

}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop

08007a14 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d823      	bhi.n	8007a6c <setDuttyCycle+0x58>
 8007a24:	a201      	add	r2, pc, #4	; (adr r2, 8007a2c <setDuttyCycle+0x18>)
 8007a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2a:	bf00      	nop
 8007a2c:	08007a3d 	.word	0x08007a3d
 8007a30:	08007a49 	.word	0x08007a49
 8007a34:	08007a55 	.word	0x08007a55
 8007a38:	08007a61 	.word	0x08007a61
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	885a      	ldrh	r2, [r3, #2]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8007a46:	e012      	b.n	8007a6e <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	885a      	ldrh	r2, [r3, #2]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8007a52:	e00c      	b.n	8007a6e <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	885a      	ldrh	r2, [r3, #2]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8007a5e:	e006      	b.n	8007a6e <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	885a      	ldrh	r2, [r3, #2]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8007a6a:	e000      	b.n	8007a6e <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8007a6c:	bf00      	nop
	}
	}

}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop

08007a7c <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8e:	4a0d      	ldr	r2, [pc, #52]	; (8007ac4 <updateDuttyCyclePercentageFloat+0x48>)
 8007a90:	fba2 2303 	umull	r2, r3, r2, r3
 8007a94:	095b      	lsrs	r3, r3, #5
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	ee07 3a90 	vmov	s15, r3
 8007a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007aa0:	edd7 7a00 	vldr	s15, [r7]
 8007aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aac:	ee17 3a90 	vmov	r3, s15
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7ff ffac 	bl	8007a14 <setDuttyCycle>
}
 8007abc:	bf00      	nop
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	51eb851f 	.word	0x51eb851f

08007ac8 <__NVIC_EnableIRQ>:
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	db0b      	blt.n	8007af2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	f003 021f 	and.w	r2, r3, #31
 8007ae0:	4907      	ldr	r1, [pc, #28]	; (8007b00 <__NVIC_EnableIRQ+0x38>)
 8007ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ae6:	095b      	lsrs	r3, r3, #5
 8007ae8:	2001      	movs	r0, #1
 8007aea:	fa00 f202 	lsl.w	r2, r0, r2
 8007aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	e000e100 	.word	0xe000e100

08007b04 <config_SysTick_ms>:
uint64_t ticks_start = 0;
uint64_t ticks_counting = 0;

//Funcion para la configurar del Systick
void config_SysTick_ms(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
	//Reiniciamos el valor de la variable que cuenta el tiempo
	ticks = 0;
 8007b0a:	4919      	ldr	r1, [pc, #100]	; (8007b70 <config_SysTick_ms+0x6c>)
 8007b0c:	f04f 0200 	mov.w	r2, #0
 8007b10:	f04f 0300 	mov.w	r3, #0
 8007b14:	e9c1 2300 	strd	r2, r3, [r1]

	/*Cargamos el valor del limite de incrementos que representa 1ms
	 * Depende de la señal de reloj interno del MCU
	 */

	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8007b18:	f7ff fc48 	bl	80073ac <getConfigPLL>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	71fb      	strb	r3, [r7, #7]
	SysTick->LOAD = clock*1000;              //Cargamos el valor correspondiente a 1 ms
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b26:	fb03 f202 	mul.w	r2, r3, r2
 8007b2a:	4b12      	ldr	r3, [pc, #72]	; (8007b74 <config_SysTick_ms+0x70>)
 8007b2c:	605a      	str	r2, [r3, #4]
//		break;
//	}
//	}

	//Limpiamos el valor actual del Systick
	SysTick->VAL = 0;
 8007b2e:	4b11      	ldr	r3, [pc, #68]	; (8007b74 <config_SysTick_ms+0x70>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	609a      	str	r2, [r3, #8]

	//Configuramos el relog interno como el reloj para el timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8007b34:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <config_SysTick_ms+0x70>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a0e      	ldr	r2, [pc, #56]	; (8007b74 <config_SysTick_ms+0x70>)
 8007b3a:	f043 0304 	orr.w	r3, r3, #4
 8007b3e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b40:	b672      	cpsid	i
}
 8007b42:	bf00      	nop
	//Desactivamos las interrupciones globales

	__disable_irq();

	//Matriculamos la interrupcion en el NVIC
	NVIC_EnableIRQ(SysTick_IRQn);
 8007b44:	f04f 30ff 	mov.w	r0, #4294967295
 8007b48:	f7ff ffbe 	bl	8007ac8 <__NVIC_EnableIRQ>
	//Activamos la interrupcion debido al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8007b4c:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <config_SysTick_ms+0x70>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a08      	ldr	r2, [pc, #32]	; (8007b74 <config_SysTick_ms+0x70>)
 8007b52:	f043 0302 	orr.w	r3, r3, #2
 8007b56:	6013      	str	r3, [r2, #0]
	//Actimos el timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8007b58:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <config_SysTick_ms+0x70>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a05      	ldr	r2, [pc, #20]	; (8007b74 <config_SysTick_ms+0x70>)
 8007b5e:	f043 0301 	orr.w	r3, r3, #1
 8007b62:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007b64:	b662      	cpsie	i
}
 8007b66:	bf00      	nop
	//Activamos las interrupciones globales
	__enable_irq();

}
 8007b68:	bf00      	nop
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	200094a8 	.word	0x200094a8
 8007b74:	e000e010 	.word	0xe000e010

08007b78 <getTicksMs>:

//Funcion que retorna el tiempo en ms transcurrido desde que que inicio el SysTick
uint64_t getTicksMs(void)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	af00      	add	r7, sp, #0
	return ticks;
 8007b7c:	4b04      	ldr	r3, [pc, #16]	; (8007b90 <getTicksMs+0x18>)
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8007b82:	4610      	mov	r0, r2
 8007b84:	4619      	mov	r1, r3
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	200094a8 	.word	0x200094a8

08007b94 <delay_ms>:

//Funcion que genera un delay de ms
void delay_ms(uint32_t wait_time_ms)
{
 8007b94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
	//Guardamos el valor de ticks transcurridos hasta el momento
	ticks_start = getTicksMs();
 8007b9e:	f7ff ffeb 	bl	8007b78 <getTicksMs>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4914      	ldr	r1, [pc, #80]	; (8007bf8 <delay_ms+0x64>)
 8007ba8:	e9c1 2300 	strd	r2, r3, [r1]
	//Guardamos tambien el valor de ticks transcurridos hasta el momento en una nueva variable
	ticks_counting = getTicksMs();
 8007bac:	f7ff ffe4 	bl	8007b78 <getTicksMs>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4911      	ldr	r1, [pc, #68]	; (8007bfc <delay_ms+0x68>)
 8007bb6:	e9c1 2300 	strd	r2, r3, [r1]

	//Realizamos un while que espera que se cumpla el tiempo asignado
	while(ticks_counting<(ticks_start+(uint64_t)wait_time_ms))
 8007bba:	e006      	b.n	8007bca <delay_ms+0x36>
	{
		//Actualizamos el valor
		ticks_counting = getTicksMs();
 8007bbc:	f7ff ffdc 	bl	8007b78 <getTicksMs>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	490d      	ldr	r1, [pc, #52]	; (8007bfc <delay_ms+0x68>)
 8007bc6:	e9c1 2300 	strd	r2, r3, [r1]
	while(ticks_counting<(ticks_start+(uint64_t)wait_time_ms))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	4698      	mov	r8, r3
 8007bd0:	4691      	mov	r9, r2
 8007bd2:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <delay_ms+0x64>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	eb18 0402 	adds.w	r4, r8, r2
 8007bdc:	eb49 0503 	adc.w	r5, r9, r3
 8007be0:	4b06      	ldr	r3, [pc, #24]	; (8007bfc <delay_ms+0x68>)
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	42a2      	cmp	r2, r4
 8007be8:	41ab      	sbcs	r3, r5
 8007bea:	d3e7      	bcc.n	8007bbc <delay_ms+0x28>
	}
}
 8007bec:	bf00      	nop
 8007bee:	bf00      	nop
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007bf8:	200094b0 	.word	0x200094b0
 8007bfc:	200094b8 	.word	0x200094b8

08007c00 <SysTick_Handler>:

/* Cuando se produce una interrupcion en el NVIC debido SysTick, apuntara a esta
 * funcion en el vector de interrupciones
 */
void SysTick_Handler(void)
{
 8007c00:	b480      	push	{r7}
 8007c02:	af00      	add	r7, sp, #0
	//Verificamos que la interrupcion se lance
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 8007c04:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <SysTick_Handler+0x38>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00e      	beq.n	8007c2e <SysTick_Handler+0x2e>
	{
		//Limpiamos la bandera
		SysTick->CTRL &= ~ SysTick_CTRL_COUNTFLAG_Msk;
 8007c10:	4b09      	ldr	r3, [pc, #36]	; (8007c38 <SysTick_Handler+0x38>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a08      	ldr	r2, [pc, #32]	; (8007c38 <SysTick_Handler+0x38>)
 8007c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c1a:	6013      	str	r3, [r2, #0]

		//Incrementamos en 1 el contador
		ticks++;
 8007c1c:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <SysTick_Handler+0x3c>)
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	1c50      	adds	r0, r2, #1
 8007c24:	f143 0100 	adc.w	r1, r3, #0
 8007c28:	4b04      	ldr	r3, [pc, #16]	; (8007c3c <SysTick_Handler+0x3c>)
 8007c2a:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8007c2e:	bf00      	nop
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	e000e010 	.word	0xe000e010
 8007c3c:	200094a8 	.word	0x200094a8

08007c40 <__NVIC_EnableIRQ>:
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	db0b      	blt.n	8007c6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	f003 021f 	and.w	r2, r3, #31
 8007c58:	4907      	ldr	r1, [pc, #28]	; (8007c78 <__NVIC_EnableIRQ+0x38>)
 8007c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c5e:	095b      	lsrs	r3, r3, #5
 8007c60:	2001      	movs	r0, #1
 8007c62:	fa00 f202 	lsl.w	r2, r0, r2
 8007c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	e000e100 	.word	0xe000e100

08007c7c <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	4a8f      	ldr	r2, [pc, #572]	; (8007ec8 <USART_Config+0x24c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d107      	bne.n	8007c9e <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8007c8e:	4b8f      	ldr	r3, [pc, #572]	; (8007ecc <USART_Config+0x250>)
 8007c90:	2210      	movs	r2, #16
 8007c92:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	4a8d      	ldr	r2, [pc, #564]	; (8007ed0 <USART_Config+0x254>)
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	e019      	b.n	8007cd2 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	4a8c      	ldr	r2, [pc, #560]	; (8007ed4 <USART_Config+0x258>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d108      	bne.n	8007cba <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8007ca8:	4b88      	ldr	r3, [pc, #544]	; (8007ecc <USART_Config+0x250>)
 8007caa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007cae:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	4a88      	ldr	r2, [pc, #544]	; (8007ed8 <USART_Config+0x25c>)
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	e00b      	b.n	8007cd2 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	4a87      	ldr	r2, [pc, #540]	; (8007edc <USART_Config+0x260>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d106      	bne.n	8007cd2 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8007cc4:	4b81      	ldr	r3, [pc, #516]	; (8007ecc <USART_Config+0x250>)
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	4a84      	ldr	r2, [pc, #528]	; (8007ee0 <USART_Config+0x264>)
 8007cd0:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	789b      	ldrb	r3, [r3, #2]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d03d      	beq.n	8007d66 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cf8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	68da      	ldr	r2, [r3, #12]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d08:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	68da      	ldr	r2, [r3, #12]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d18:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d28:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	789b      	ldrb	r3, [r3, #2]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d110      	bne.n	8007d54 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	68da      	ldr	r2, [r3, #12]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d40:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d50:	60da      	str	r2, [r3, #12]
 8007d52:	e018      	b.n	8007d86 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	68da      	ldr	r2, [r3, #12]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d62:	60da      	str	r2, [r3, #12]
 8007d64:	e00f      	b.n	8007d86 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d74:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	68da      	ldr	r2, [r3, #12]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d84:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	78db      	ldrb	r3, [r3, #3]
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d84c      	bhi.n	8007e28 <USART_Config+0x1ac>
 8007d8e:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <USART_Config+0x118>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007da5 	.word	0x08007da5
 8007d98:	08007dc3 	.word	0x08007dc3
 8007d9c:	08007de5 	.word	0x08007de5
 8007da0:	08007e07 	.word	0x08007e07
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	691a      	ldr	r2, [r3, #16]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007db2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689a      	ldr	r2, [r3, #8]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	6912      	ldr	r2, [r2, #16]
 8007dbe:	611a      	str	r2, [r3, #16]
		break;
 8007dc0:	e041      	b.n	8007e46 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	691a      	ldr	r2, [r3, #16]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007dd0:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	691a      	ldr	r2, [r3, #16]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007de0:	611a      	str	r2, [r3, #16]
		break;
 8007de2:	e030      	b.n	8007e46 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	691a      	ldr	r2, [r3, #16]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007df2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	691a      	ldr	r2, [r3, #16]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e02:	611a      	str	r2, [r3, #16]
		break;
 8007e04:	e01f      	b.n	8007e46 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	691a      	ldr	r2, [r3, #16]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007e14:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	691a      	ldr	r2, [r3, #16]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8007e24:	611a      	str	r2, [r3, #16]
		break;
 8007e26:	e00e      	b.n	8007e46 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	691a      	ldr	r2, [r3, #16]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007e36:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	6912      	ldr	r2, [r2, #16]
 8007e42:	611a      	str	r2, [r3, #16]
		break;
 8007e44:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	4a21      	ldr	r2, [pc, #132]	; (8007ed4 <USART_Config+0x258>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d104      	bne.n	8007e5e <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8007e54:	f7ff fac6 	bl	80073e4 <getClockAPB1>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]
 8007e5c:	e003      	b.n	8007e66 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8007e5e:	f7ff faa5 	bl	80073ac <getConfigPLL>
 8007e62:	4603      	mov	r3, r0
 8007e64:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10b      	bne.n	8007e86 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 f91f 	bl	80080b8 <getValueBaudRate>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	609a      	str	r2, [r3, #8]
 8007e84:	e02f      	b.n	8007ee6 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	785b      	ldrb	r3, [r3, #1]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d10b      	bne.n	8007ea6 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 f90f 	bl	80080b8 <getValueBaudRate>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	609a      	str	r2, [r3, #8]
 8007ea4:	e01f      	b.n	8007ee6 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	785b      	ldrb	r3, [r3, #1]
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d11a      	bne.n	8007ee4 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 f8ff 	bl	80080b8 <getValueBaudRate>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	609a      	str	r2, [r3, #8]
 8007ec4:	e00f      	b.n	8007ee6 <USART_Config+0x26a>
 8007ec6:	bf00      	nop
 8007ec8:	40011000 	.word	0x40011000
 8007ecc:	40023800 	.word	0x40023800
 8007ed0:	200094c0 	.word	0x200094c0
 8007ed4:	40004400 	.word	0x40004400
 8007ed8:	200094c4 	.word	0x200094c4
 8007edc:	40011400 	.word	0x40011400
 8007ee0:	200094c8 	.word	0x200094c8
	}
	else
	{
		__NOP();
 8007ee4:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d866      	bhi.n	8007fbc <USART_Config+0x340>
 8007eee:	a201      	add	r2, pc, #4	; (adr r2, 8007ef4 <USART_Config+0x278>)
 8007ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef4:	08007f05 	.word	0x08007f05
 8007ef8:	08007f27 	.word	0x08007f27
 8007efc:	08007f49 	.word	0x08007f49
 8007f00:	08007f8b 	.word	0x08007f8b
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f022 0208 	bic.w	r2, r2, #8
 8007f12:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f042 0208 	orr.w	r2, r2, #8
 8007f22:	60da      	str	r2, [r3, #12]

		break;
 8007f24:	e063      	b.n	8007fee <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f022 0204 	bic.w	r2, r2, #4
 8007f34:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f042 0204 	orr.w	r2, r2, #4
 8007f44:	60da      	str	r2, [r3, #12]

		break;
 8007f46:	e052      	b.n	8007fee <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f022 0208 	bic.w	r2, r2, #8
 8007f56:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f042 0208 	orr.w	r2, r2, #8
 8007f66:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f022 0204 	bic.w	r2, r2, #4
 8007f76:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f042 0204 	orr.w	r2, r2, #4
 8007f86:	60da      	str	r2, [r3, #12]


		break;
 8007f88:	e031      	b.n	8007fee <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	68da      	ldr	r2, [r3, #12]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f98:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f022 0208 	bic.w	r2, r2, #8
 8007fa8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f022 0204 	bic.w	r2, r2, #4
 8007fb8:	60da      	str	r2, [r3, #12]
		break;
 8007fba:	e018      	b.n	8007fee <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	68da      	ldr	r2, [r3, #12]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fca:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f022 0208 	bic.w	r2, r2, #8
 8007fda:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f022 0204 	bic.w	r2, r2, #4
 8007fea:	60da      	str	r2, [r3, #12]
		break;
 8007fec:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8007fee:	b672      	cpsid	i
}
 8007ff0:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	791b      	ldrb	r3, [r3, #4]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d110      	bne.n	800801c <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f022 0220 	bic.w	r2, r2, #32
 8008008:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	68da      	ldr	r2, [r3, #12]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f042 0220 	orr.w	r2, r2, #32
 8008018:	60da      	str	r2, [r3, #12]
 800801a:	e007      	b.n	800802c <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f022 0220 	bic.w	r2, r2, #32
 800802a:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	791b      	ldrb	r3, [r3, #4]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d003      	beq.n	800803c <USART_Config+0x3c0>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	795b      	ldrb	r3, [r3, #5]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d11a      	bne.n	8008072 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	4a1a      	ldr	r2, [pc, #104]	; (80080ac <USART_Config+0x430>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d103      	bne.n	800804e <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8008046:	2025      	movs	r0, #37	; 0x25
 8008048:	f7ff fdfa 	bl	8007c40 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800804c:	e013      	b.n	8008076 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	4a17      	ldr	r2, [pc, #92]	; (80080b0 <USART_Config+0x434>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d103      	bne.n	8008060 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8008058:	2026      	movs	r0, #38	; 0x26
 800805a:	f7ff fdf1 	bl	8007c40 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800805e:	e00a      	b.n	8008076 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	4a13      	ldr	r2, [pc, #76]	; (80080b4 <USART_Config+0x438>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d105      	bne.n	8008076 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 800806a:	2047      	movs	r0, #71	; 0x47
 800806c:	f7ff fde8 	bl	8007c40 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8008070:	e001      	b.n	8008076 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8008072:	bf00      	nop
 8008074:	e000      	b.n	8008078 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8008076:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8008078:	b662      	cpsie	i
}
 800807a:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b03      	cmp	r3, #3
 8008082:	d00f      	beq.n	80080a4 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	68da      	ldr	r2, [r3, #12]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008092:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080a2:	60da      	str	r2, [r3, #12]
	}
}
 80080a4:	bf00      	nop
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	40011000 	.word	0x40011000
 80080b0:	40004400 	.word	0x40004400
 80080b4:	40011400 	.word	0x40011400

080080b8 <getValueBaudRate>:
		__enable_irq();
}

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 80080b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80080bc:	b086      	sub	sp, #24
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6039      	str	r1, [r7, #0]
 80080c2:	4601      	mov	r1, r0
 80080c4:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 80080c6:	79f9      	ldrb	r1, [r7, #7]
 80080c8:	2000      	movs	r0, #0
 80080ca:	460a      	mov	r2, r1
 80080cc:	4603      	mov	r3, r0
 80080ce:	491f      	ldr	r1, [pc, #124]	; (800814c <getValueBaudRate+0x94>)
 80080d0:	fb01 f003 	mul.w	r0, r1, r3
 80080d4:	2102      	movs	r1, #2
 80080d6:	fb02 f101 	mul.w	r1, r2, r1
 80080da:	4401      	add	r1, r0
 80080dc:	481b      	ldr	r0, [pc, #108]	; (800814c <getValueBaudRate+0x94>)
 80080de:	fba2 4500 	umull	r4, r5, r2, r0
 80080e2:	194b      	adds	r3, r1, r5
 80080e4:	461d      	mov	r5, r3
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	011b      	lsls	r3, r3, #4
 80080ea:	2200      	movs	r2, #0
 80080ec:	4698      	mov	r8, r3
 80080ee:	4691      	mov	r9, r2
 80080f0:	4642      	mov	r2, r8
 80080f2:	464b      	mov	r3, r9
 80080f4:	4620      	mov	r0, r4
 80080f6:	4629      	mov	r1, r5
 80080f8:	f7f8 feec 	bl	8000ed4 <__aeabi_ldivmod>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	4613      	mov	r3, r2
 8008102:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	4a12      	ldr	r2, [pc, #72]	; (8008150 <getValueBaudRate+0x98>)
 8008108:	fba2 2303 	umull	r2, r3, r2, r3
 800810c:	0b5b      	lsrs	r3, r3, #13
 800810e:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	f242 7210 	movw	r2, #10000	; 0x2710
 8008116:	fb02 f303 	mul.w	r3, r2, r3
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8008126:	4a0a      	ldr	r2, [pc, #40]	; (8008150 <getValueBaudRate+0x98>)
 8008128:	fba2 2303 	umull	r2, r3, r2, r3
 800812c:	0a5b      	lsrs	r3, r3, #9
 800812e:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	b29b      	uxth	r3, r3
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	b29a      	uxth	r2, r3
 8008138:	7afb      	ldrb	r3, [r7, #11]
 800813a:	b29b      	uxth	r3, r3
 800813c:	4313      	orrs	r3, r2
 800813e:	813b      	strh	r3, [r7, #8]

    return value;
 8008140:	893b      	ldrh	r3, [r7, #8]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800814c:	540be400 	.word	0x540be400
 8008150:	d1b71759 	.word	0xd1b71759

08008154 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	460b      	mov	r3, r1
 800815e:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8008160:	e000      	b.n	8008164 <writeChar+0x10>
	{
		__NOP();
 8008162:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800816e:	2b00      	cmp	r3, #0
 8008170:	d0f7      	beq.n	8008162 <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	78fa      	ldrb	r2, [r7, #3]
 8008178:	605a      	str	r2, [r3, #4]

}
 800817a:	bf00      	nop
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 8008194:	e00a      	b.n	80081ac <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	4413      	add	r3, r2
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff ffd7 	bl	8008154 <writeChar>
		i++;
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	3301      	adds	r3, #1
 80081aa:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	4413      	add	r3, r2
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1ee      	bne.n	8008196 <writeMsg+0x10>
	}
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 80081ce:	4b16      	ldr	r3, [pc, #88]	; (8008228 <writeMsgForTXE+0x64>)
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d111      	bne.n	80081fa <writeMsgForTXE+0x36>
 80081d6:	4b15      	ldr	r3, [pc, #84]	; (800822c <writeMsgForTXE+0x68>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10d      	bne.n	80081fa <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	4813      	ldr	r0, [pc, #76]	; (8008230 <writeMsgForTXE+0x6c>)
 80081e2:	f001 f8b1 	bl	8009348 <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 80081e6:	4b13      	ldr	r3, [pc, #76]	; (8008234 <writeMsgForTXE+0x70>)
 80081e8:	2201      	movs	r2, #1
 80081ea:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	2101      	movs	r1, #1
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 f830 	bl	8008258 <interruptionTX>
 80081f8:	e012      	b.n	8008220 <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 80081fa:	4b0f      	ldr	r3, [pc, #60]	; (8008238 <writeMsgForTXE+0x74>)
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	2364      	movs	r3, #100	; 0x64
 8008202:	fb02 f303 	mul.w	r3, r2, r3
 8008206:	4a0d      	ldr	r2, [pc, #52]	; (800823c <writeMsgForTXE+0x78>)
 8008208:	4413      	add	r3, r2
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	4618      	mov	r0, r3
 800820e:	f001 f89b 	bl	8009348 <siprintf>
		inLine++;
 8008212:	4b09      	ldr	r3, [pc, #36]	; (8008238 <writeMsgForTXE+0x74>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	3301      	adds	r3, #1
 8008218:	b2da      	uxtb	r2, r3
 800821a:	4b07      	ldr	r3, [pc, #28]	; (8008238 <writeMsgForTXE+0x74>)
 800821c:	701a      	strb	r2, [r3, #0]
	}
}
 800821e:	bf00      	nop
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	20009d06 	.word	0x20009d06
 800822c:	20009d05 	.word	0x20009d05
 8008230:	200094d0 	.word	0x200094d0
 8008234:	20009d07 	.word	0x20009d07
 8008238:	20009d04 	.word	0x20009d04
 800823c:	20009534 	.word	0x20009534

08008240 <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 8008240:	b480      	push	{r7}
 8008242:	af00      	add	r7, sp, #0
	return auxRxData;
 8008244:	4b03      	ldr	r3, [pc, #12]	; (8008254 <getRxData+0x14>)
 8008246:	781b      	ldrb	r3, [r3, #0]
}
 8008248:	4618      	mov	r0, r3
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	200094cc 	.word	0x200094cc

08008258 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d10c      	bne.n	8008284 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8008282:	e005      	b.n	8008290 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	60da      	str	r2, [r3, #12]
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <BasicUSART2_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART2_Callback()
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
	__NOP();
 80082a0:	bf00      	nop
}
 80082a2:	bf00      	nop
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <BasicUSART6_Callback>:


__attribute__((weak)) void BasicUSART6_Callback()
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
	__NOP();
 80082b0:	bf00      	nop
}
 80082b2:	bf00      	nop
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 80082c0:	4b37      	ldr	r3, [pc, #220]	; (80083a0 <USART1_IRQHandler+0xe4>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0320 	and.w	r3, r3, #32
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d008      	beq.n	80082e0 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 80082ce:	4b34      	ldr	r3, [pc, #208]	; (80083a0 <USART1_IRQHandler+0xe4>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	4b33      	ldr	r3, [pc, #204]	; (80083a4 <USART1_IRQHandler+0xe8>)
 80082d8:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 80082da:	f7fb fe2d 	bl	8003f38 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 80082de:	e05d      	b.n	800839c <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 80082e0:	4b2f      	ldr	r3, [pc, #188]	; (80083a0 <USART1_IRQHandler+0xe4>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d055      	beq.n	800839a <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80082ee:	4b2e      	ldr	r3, [pc, #184]	; (80083a8 <USART1_IRQHandler+0xec>)
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10b      	bne.n	800830e <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 80082f6:	4b2d      	ldr	r3, [pc, #180]	; (80083ac <USART1_IRQHandler+0xf0>)
 80082f8:	781a      	ldrb	r2, [r3, #0]
 80082fa:	4b29      	ldr	r3, [pc, #164]	; (80083a0 <USART1_IRQHandler+0xe4>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8008300:	4b27      	ldr	r3, [pc, #156]	; (80083a0 <USART1_IRQHandler+0xe4>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2100      	movs	r1, #0
 8008306:	4618      	mov	r0, r3
 8008308:	f7ff ffa6 	bl	8008258 <interruptionTX>
}
 800830c:	e046      	b.n	800839c <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800830e:	4b26      	ldr	r3, [pc, #152]	; (80083a8 <USART1_IRQHandler+0xec>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d142      	bne.n	800839c <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8008316:	4b26      	ldr	r3, [pc, #152]	; (80083b0 <USART1_IRQHandler+0xf4>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	4b25      	ldr	r3, [pc, #148]	; (80083b4 <USART1_IRQHandler+0xf8>)
 800831e:	5c9b      	ldrb	r3, [r3, r2]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00e      	beq.n	8008342 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8008324:	4b22      	ldr	r3, [pc, #136]	; (80083b0 <USART1_IRQHandler+0xf4>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	4b22      	ldr	r3, [pc, #136]	; (80083b4 <USART1_IRQHandler+0xf8>)
 800832c:	5c9a      	ldrb	r2, [r3, r2]
 800832e:	4b1c      	ldr	r3, [pc, #112]	; (80083a0 <USART1_IRQHandler+0xe4>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	605a      	str	r2, [r3, #4]
				posChar++;
 8008334:	4b1e      	ldr	r3, [pc, #120]	; (80083b0 <USART1_IRQHandler+0xf4>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	3301      	adds	r3, #1
 800833a:	b2da      	uxtb	r2, r3
 800833c:	4b1c      	ldr	r3, [pc, #112]	; (80083b0 <USART1_IRQHandler+0xf4>)
 800833e:	701a      	strb	r2, [r3, #0]
}
 8008340:	e02c      	b.n	800839c <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8008342:	4b1d      	ldr	r3, [pc, #116]	; (80083b8 <USART1_IRQHandler+0xfc>)
 8008344:	781a      	ldrb	r2, [r3, #0]
 8008346:	4b1d      	ldr	r3, [pc, #116]	; (80083bc <USART1_IRQHandler+0x100>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d215      	bcs.n	800837a <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800834e:	4b1a      	ldr	r3, [pc, #104]	; (80083b8 <USART1_IRQHandler+0xfc>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	2364      	movs	r3, #100	; 0x64
 8008356:	fb02 f303 	mul.w	r3, r2, r3
 800835a:	4a19      	ldr	r2, [pc, #100]	; (80083c0 <USART1_IRQHandler+0x104>)
 800835c:	4413      	add	r3, r2
 800835e:	4619      	mov	r1, r3
 8008360:	4814      	ldr	r0, [pc, #80]	; (80083b4 <USART1_IRQHandler+0xf8>)
 8008362:	f000 fff1 	bl	8009348 <siprintf>
					posChar = 0;
 8008366:	4b12      	ldr	r3, [pc, #72]	; (80083b0 <USART1_IRQHandler+0xf4>)
 8008368:	2200      	movs	r2, #0
 800836a:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 800836c:	4b12      	ldr	r3, [pc, #72]	; (80083b8 <USART1_IRQHandler+0xfc>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	3301      	adds	r3, #1
 8008372:	b2da      	uxtb	r2, r3
 8008374:	4b10      	ldr	r3, [pc, #64]	; (80083b8 <USART1_IRQHandler+0xfc>)
 8008376:	701a      	strb	r2, [r3, #0]
}
 8008378:	e010      	b.n	800839c <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 800837a:	4b09      	ldr	r3, [pc, #36]	; (80083a0 <USART1_IRQHandler+0xe4>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2100      	movs	r1, #0
 8008380:	4618      	mov	r0, r3
 8008382:	f7ff ff69 	bl	8008258 <interruptionTX>
					posChar = 0;
 8008386:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <USART1_IRQHandler+0xf4>)
 8008388:	2200      	movs	r2, #0
 800838a:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800838c:	4b0a      	ldr	r3, [pc, #40]	; (80083b8 <USART1_IRQHandler+0xfc>)
 800838e:	2200      	movs	r2, #0
 8008390:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8008392:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <USART1_IRQHandler+0x100>)
 8008394:	2200      	movs	r2, #0
 8008396:	701a      	strb	r2, [r3, #0]
}
 8008398:	e000      	b.n	800839c <USART1_IRQHandler+0xe0>
		__NOP();
 800839a:	bf00      	nop
}
 800839c:	bf00      	nop
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	200094c0 	.word	0x200094c0
 80083a4:	200094cc 	.word	0x200094cc
 80083a8:	20009d07 	.word	0x20009d07
 80083ac:	200094cd 	.word	0x200094cd
 80083b0:	20009d06 	.word	0x20009d06
 80083b4:	200094d0 	.word	0x200094d0
 80083b8:	20009d05 	.word	0x20009d05
 80083bc:	20009d04 	.word	0x20009d04
 80083c0:	20009534 	.word	0x20009534

080083c4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 80083c8:	4b37      	ldr	r3, [pc, #220]	; (80084a8 <USART2_IRQHandler+0xe4>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0320 	and.w	r3, r3, #32
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d008      	beq.n	80083e8 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 80083d6:	4b34      	ldr	r3, [pc, #208]	; (80084a8 <USART2_IRQHandler+0xe4>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	4b33      	ldr	r3, [pc, #204]	; (80084ac <USART2_IRQHandler+0xe8>)
 80083e0:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 80083e2:	f7ff ff5b 	bl	800829c <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 80083e6:	e05d      	b.n	80084a4 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 80083e8:	4b2f      	ldr	r3, [pc, #188]	; (80084a8 <USART2_IRQHandler+0xe4>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d055      	beq.n	80084a2 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80083f6:	4b2e      	ldr	r3, [pc, #184]	; (80084b0 <USART2_IRQHandler+0xec>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10b      	bne.n	8008416 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 80083fe:	4b2d      	ldr	r3, [pc, #180]	; (80084b4 <USART2_IRQHandler+0xf0>)
 8008400:	781a      	ldrb	r2, [r3, #0]
 8008402:	4b29      	ldr	r3, [pc, #164]	; (80084a8 <USART2_IRQHandler+0xe4>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8008408:	4b27      	ldr	r3, [pc, #156]	; (80084a8 <USART2_IRQHandler+0xe4>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2100      	movs	r1, #0
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff ff22 	bl	8008258 <interruptionTX>
}
 8008414:	e046      	b.n	80084a4 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8008416:	4b26      	ldr	r3, [pc, #152]	; (80084b0 <USART2_IRQHandler+0xec>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d142      	bne.n	80084a4 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800841e:	4b26      	ldr	r3, [pc, #152]	; (80084b8 <USART2_IRQHandler+0xf4>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	4b25      	ldr	r3, [pc, #148]	; (80084bc <USART2_IRQHandler+0xf8>)
 8008426:	5c9b      	ldrb	r3, [r3, r2]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00e      	beq.n	800844a <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 800842c:	4b22      	ldr	r3, [pc, #136]	; (80084b8 <USART2_IRQHandler+0xf4>)
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	461a      	mov	r2, r3
 8008432:	4b22      	ldr	r3, [pc, #136]	; (80084bc <USART2_IRQHandler+0xf8>)
 8008434:	5c9a      	ldrb	r2, [r3, r2]
 8008436:	4b1c      	ldr	r3, [pc, #112]	; (80084a8 <USART2_IRQHandler+0xe4>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	605a      	str	r2, [r3, #4]
				posChar++;
 800843c:	4b1e      	ldr	r3, [pc, #120]	; (80084b8 <USART2_IRQHandler+0xf4>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	3301      	adds	r3, #1
 8008442:	b2da      	uxtb	r2, r3
 8008444:	4b1c      	ldr	r3, [pc, #112]	; (80084b8 <USART2_IRQHandler+0xf4>)
 8008446:	701a      	strb	r2, [r3, #0]
}
 8008448:	e02c      	b.n	80084a4 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800844a:	4b1d      	ldr	r3, [pc, #116]	; (80084c0 <USART2_IRQHandler+0xfc>)
 800844c:	781a      	ldrb	r2, [r3, #0]
 800844e:	4b1d      	ldr	r3, [pc, #116]	; (80084c4 <USART2_IRQHandler+0x100>)
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d215      	bcs.n	8008482 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8008456:	4b1a      	ldr	r3, [pc, #104]	; (80084c0 <USART2_IRQHandler+0xfc>)
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	2364      	movs	r3, #100	; 0x64
 800845e:	fb02 f303 	mul.w	r3, r2, r3
 8008462:	4a19      	ldr	r2, [pc, #100]	; (80084c8 <USART2_IRQHandler+0x104>)
 8008464:	4413      	add	r3, r2
 8008466:	4619      	mov	r1, r3
 8008468:	4814      	ldr	r0, [pc, #80]	; (80084bc <USART2_IRQHandler+0xf8>)
 800846a:	f000 ff6d 	bl	8009348 <siprintf>
					posChar = 0;
 800846e:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <USART2_IRQHandler+0xf4>)
 8008470:	2200      	movs	r2, #0
 8008472:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8008474:	4b12      	ldr	r3, [pc, #72]	; (80084c0 <USART2_IRQHandler+0xfc>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	3301      	adds	r3, #1
 800847a:	b2da      	uxtb	r2, r3
 800847c:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <USART2_IRQHandler+0xfc>)
 800847e:	701a      	strb	r2, [r3, #0]
}
 8008480:	e010      	b.n	80084a4 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8008482:	4b09      	ldr	r3, [pc, #36]	; (80084a8 <USART2_IRQHandler+0xe4>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2100      	movs	r1, #0
 8008488:	4618      	mov	r0, r3
 800848a:	f7ff fee5 	bl	8008258 <interruptionTX>
					posChar = 0;
 800848e:	4b0a      	ldr	r3, [pc, #40]	; (80084b8 <USART2_IRQHandler+0xf4>)
 8008490:	2200      	movs	r2, #0
 8008492:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8008494:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <USART2_IRQHandler+0xfc>)
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800849a:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <USART2_IRQHandler+0x100>)
 800849c:	2200      	movs	r2, #0
 800849e:	701a      	strb	r2, [r3, #0]
}
 80084a0:	e000      	b.n	80084a4 <USART2_IRQHandler+0xe0>
		__NOP();
 80084a2:	bf00      	nop
}
 80084a4:	bf00      	nop
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	200094c4 	.word	0x200094c4
 80084ac:	200094cc 	.word	0x200094cc
 80084b0:	20009d07 	.word	0x20009d07
 80084b4:	200094cd 	.word	0x200094cd
 80084b8:	20009d06 	.word	0x20009d06
 80084bc:	200094d0 	.word	0x200094d0
 80084c0:	20009d05 	.word	0x20009d05
 80084c4:	20009d04 	.word	0x20009d04
 80084c8:	20009534 	.word	0x20009534

080084cc <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 80084d0:	4b37      	ldr	r3, [pc, #220]	; (80085b0 <USART6_IRQHandler+0xe4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0320 	and.w	r3, r3, #32
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d008      	beq.n	80084f0 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 80084de:	4b34      	ldr	r3, [pc, #208]	; (80085b0 <USART6_IRQHandler+0xe4>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	4b33      	ldr	r3, [pc, #204]	; (80085b4 <USART6_IRQHandler+0xe8>)
 80084e8:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 80084ea:	f7ff fedf 	bl	80082ac <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 80084ee:	e05d      	b.n	80085ac <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 80084f0:	4b2f      	ldr	r3, [pc, #188]	; (80085b0 <USART6_IRQHandler+0xe4>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d055      	beq.n	80085aa <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80084fe:	4b2e      	ldr	r3, [pc, #184]	; (80085b8 <USART6_IRQHandler+0xec>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10b      	bne.n	800851e <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8008506:	4b2d      	ldr	r3, [pc, #180]	; (80085bc <USART6_IRQHandler+0xf0>)
 8008508:	781a      	ldrb	r2, [r3, #0]
 800850a:	4b29      	ldr	r3, [pc, #164]	; (80085b0 <USART6_IRQHandler+0xe4>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8008510:	4b27      	ldr	r3, [pc, #156]	; (80085b0 <USART6_IRQHandler+0xe4>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2100      	movs	r1, #0
 8008516:	4618      	mov	r0, r3
 8008518:	f7ff fe9e 	bl	8008258 <interruptionTX>
}
 800851c:	e046      	b.n	80085ac <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800851e:	4b26      	ldr	r3, [pc, #152]	; (80085b8 <USART6_IRQHandler+0xec>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d142      	bne.n	80085ac <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8008526:	4b26      	ldr	r3, [pc, #152]	; (80085c0 <USART6_IRQHandler+0xf4>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	4b25      	ldr	r3, [pc, #148]	; (80085c4 <USART6_IRQHandler+0xf8>)
 800852e:	5c9b      	ldrb	r3, [r3, r2]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00e      	beq.n	8008552 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8008534:	4b22      	ldr	r3, [pc, #136]	; (80085c0 <USART6_IRQHandler+0xf4>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	461a      	mov	r2, r3
 800853a:	4b22      	ldr	r3, [pc, #136]	; (80085c4 <USART6_IRQHandler+0xf8>)
 800853c:	5c9a      	ldrb	r2, [r3, r2]
 800853e:	4b1c      	ldr	r3, [pc, #112]	; (80085b0 <USART6_IRQHandler+0xe4>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	605a      	str	r2, [r3, #4]
				posChar++;
 8008544:	4b1e      	ldr	r3, [pc, #120]	; (80085c0 <USART6_IRQHandler+0xf4>)
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	3301      	adds	r3, #1
 800854a:	b2da      	uxtb	r2, r3
 800854c:	4b1c      	ldr	r3, [pc, #112]	; (80085c0 <USART6_IRQHandler+0xf4>)
 800854e:	701a      	strb	r2, [r3, #0]
}
 8008550:	e02c      	b.n	80085ac <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8008552:	4b1d      	ldr	r3, [pc, #116]	; (80085c8 <USART6_IRQHandler+0xfc>)
 8008554:	781a      	ldrb	r2, [r3, #0]
 8008556:	4b1d      	ldr	r3, [pc, #116]	; (80085cc <USART6_IRQHandler+0x100>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	d215      	bcs.n	800858a <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800855e:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <USART6_IRQHandler+0xfc>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	2364      	movs	r3, #100	; 0x64
 8008566:	fb02 f303 	mul.w	r3, r2, r3
 800856a:	4a19      	ldr	r2, [pc, #100]	; (80085d0 <USART6_IRQHandler+0x104>)
 800856c:	4413      	add	r3, r2
 800856e:	4619      	mov	r1, r3
 8008570:	4814      	ldr	r0, [pc, #80]	; (80085c4 <USART6_IRQHandler+0xf8>)
 8008572:	f000 fee9 	bl	8009348 <siprintf>
					posChar = 0;
 8008576:	4b12      	ldr	r3, [pc, #72]	; (80085c0 <USART6_IRQHandler+0xf4>)
 8008578:	2200      	movs	r2, #0
 800857a:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 800857c:	4b12      	ldr	r3, [pc, #72]	; (80085c8 <USART6_IRQHandler+0xfc>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	3301      	adds	r3, #1
 8008582:	b2da      	uxtb	r2, r3
 8008584:	4b10      	ldr	r3, [pc, #64]	; (80085c8 <USART6_IRQHandler+0xfc>)
 8008586:	701a      	strb	r2, [r3, #0]
}
 8008588:	e010      	b.n	80085ac <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800858a:	4b09      	ldr	r3, [pc, #36]	; (80085b0 <USART6_IRQHandler+0xe4>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2100      	movs	r1, #0
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fe61 	bl	8008258 <interruptionTX>
					posChar = 0;
 8008596:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <USART6_IRQHandler+0xf4>)
 8008598:	2200      	movs	r2, #0
 800859a:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800859c:	4b0a      	ldr	r3, [pc, #40]	; (80085c8 <USART6_IRQHandler+0xfc>)
 800859e:	2200      	movs	r2, #0
 80085a0:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80085a2:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <USART6_IRQHandler+0x100>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	701a      	strb	r2, [r3, #0]
}
 80085a8:	e000      	b.n	80085ac <USART6_IRQHandler+0xe0>
		__NOP();
 80085aa:	bf00      	nop
}
 80085ac:	bf00      	nop
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	200094c8 	.word	0x200094c8
 80085b4:	200094cc 	.word	0x200094cc
 80085b8:	20009d07 	.word	0x20009d07
 80085bc:	200094cd 	.word	0x200094cd
 80085c0:	20009d06 	.word	0x20009d06
 80085c4:	200094d0 	.word	0x200094d0
 80085c8:	20009d05 	.word	0x20009d05
 80085cc:	20009d04 	.word	0x20009d04
 80085d0:	20009534 	.word	0x20009534

080085d4 <atof>:
 80085d4:	2100      	movs	r1, #0
 80085d6:	f001 bd73 	b.w	800a0c0 <strtod>

080085da <atoi>:
 80085da:	220a      	movs	r2, #10
 80085dc:	2100      	movs	r1, #0
 80085de:	f001 bdff 	b.w	800a1e0 <strtol>
	...

080085e4 <__errno>:
 80085e4:	4b01      	ldr	r3, [pc, #4]	; (80085ec <__errno+0x8>)
 80085e6:	6818      	ldr	r0, [r3, #0]
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	2000001c 	.word	0x2000001c

080085f0 <__libc_init_array>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	4d0d      	ldr	r5, [pc, #52]	; (8008628 <__libc_init_array+0x38>)
 80085f4:	4c0d      	ldr	r4, [pc, #52]	; (800862c <__libc_init_array+0x3c>)
 80085f6:	1b64      	subs	r4, r4, r5
 80085f8:	10a4      	asrs	r4, r4, #2
 80085fa:	2600      	movs	r6, #0
 80085fc:	42a6      	cmp	r6, r4
 80085fe:	d109      	bne.n	8008614 <__libc_init_array+0x24>
 8008600:	4d0b      	ldr	r5, [pc, #44]	; (8008630 <__libc_init_array+0x40>)
 8008602:	4c0c      	ldr	r4, [pc, #48]	; (8008634 <__libc_init_array+0x44>)
 8008604:	f007 fda6 	bl	8010154 <_init>
 8008608:	1b64      	subs	r4, r4, r5
 800860a:	10a4      	asrs	r4, r4, #2
 800860c:	2600      	movs	r6, #0
 800860e:	42a6      	cmp	r6, r4
 8008610:	d105      	bne.n	800861e <__libc_init_array+0x2e>
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	f855 3b04 	ldr.w	r3, [r5], #4
 8008618:	4798      	blx	r3
 800861a:	3601      	adds	r6, #1
 800861c:	e7ee      	b.n	80085fc <__libc_init_array+0xc>
 800861e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008622:	4798      	blx	r3
 8008624:	3601      	adds	r6, #1
 8008626:	e7f2      	b.n	800860e <__libc_init_array+0x1e>
 8008628:	08010c10 	.word	0x08010c10
 800862c:	08010c10 	.word	0x08010c10
 8008630:	08010c10 	.word	0x08010c10
 8008634:	08010c14 	.word	0x08010c14

08008638 <memset>:
 8008638:	4402      	add	r2, r0
 800863a:	4603      	mov	r3, r0
 800863c:	4293      	cmp	r3, r2
 800863e:	d100      	bne.n	8008642 <memset+0xa>
 8008640:	4770      	bx	lr
 8008642:	f803 1b01 	strb.w	r1, [r3], #1
 8008646:	e7f9      	b.n	800863c <memset+0x4>

08008648 <__cvt>:
 8008648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800864c:	ec55 4b10 	vmov	r4, r5, d0
 8008650:	2d00      	cmp	r5, #0
 8008652:	460e      	mov	r6, r1
 8008654:	4619      	mov	r1, r3
 8008656:	462b      	mov	r3, r5
 8008658:	bfbb      	ittet	lt
 800865a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800865e:	461d      	movlt	r5, r3
 8008660:	2300      	movge	r3, #0
 8008662:	232d      	movlt	r3, #45	; 0x2d
 8008664:	700b      	strb	r3, [r1, #0]
 8008666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008668:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800866c:	4691      	mov	r9, r2
 800866e:	f023 0820 	bic.w	r8, r3, #32
 8008672:	bfbc      	itt	lt
 8008674:	4622      	movlt	r2, r4
 8008676:	4614      	movlt	r4, r2
 8008678:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800867c:	d005      	beq.n	800868a <__cvt+0x42>
 800867e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008682:	d100      	bne.n	8008686 <__cvt+0x3e>
 8008684:	3601      	adds	r6, #1
 8008686:	2102      	movs	r1, #2
 8008688:	e000      	b.n	800868c <__cvt+0x44>
 800868a:	2103      	movs	r1, #3
 800868c:	ab03      	add	r3, sp, #12
 800868e:	9301      	str	r3, [sp, #4]
 8008690:	ab02      	add	r3, sp, #8
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	ec45 4b10 	vmov	d0, r4, r5
 8008698:	4653      	mov	r3, sl
 800869a:	4632      	mov	r2, r6
 800869c:	f001 fe58 	bl	800a350 <_dtoa_r>
 80086a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086a4:	4607      	mov	r7, r0
 80086a6:	d102      	bne.n	80086ae <__cvt+0x66>
 80086a8:	f019 0f01 	tst.w	r9, #1
 80086ac:	d022      	beq.n	80086f4 <__cvt+0xac>
 80086ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086b2:	eb07 0906 	add.w	r9, r7, r6
 80086b6:	d110      	bne.n	80086da <__cvt+0x92>
 80086b8:	783b      	ldrb	r3, [r7, #0]
 80086ba:	2b30      	cmp	r3, #48	; 0x30
 80086bc:	d10a      	bne.n	80086d4 <__cvt+0x8c>
 80086be:	2200      	movs	r2, #0
 80086c0:	2300      	movs	r3, #0
 80086c2:	4620      	mov	r0, r4
 80086c4:	4629      	mov	r1, r5
 80086c6:	f7f8 fa17 	bl	8000af8 <__aeabi_dcmpeq>
 80086ca:	b918      	cbnz	r0, 80086d4 <__cvt+0x8c>
 80086cc:	f1c6 0601 	rsb	r6, r6, #1
 80086d0:	f8ca 6000 	str.w	r6, [sl]
 80086d4:	f8da 3000 	ldr.w	r3, [sl]
 80086d8:	4499      	add	r9, r3
 80086da:	2200      	movs	r2, #0
 80086dc:	2300      	movs	r3, #0
 80086de:	4620      	mov	r0, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	f7f8 fa09 	bl	8000af8 <__aeabi_dcmpeq>
 80086e6:	b108      	cbz	r0, 80086ec <__cvt+0xa4>
 80086e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80086ec:	2230      	movs	r2, #48	; 0x30
 80086ee:	9b03      	ldr	r3, [sp, #12]
 80086f0:	454b      	cmp	r3, r9
 80086f2:	d307      	bcc.n	8008704 <__cvt+0xbc>
 80086f4:	9b03      	ldr	r3, [sp, #12]
 80086f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086f8:	1bdb      	subs	r3, r3, r7
 80086fa:	4638      	mov	r0, r7
 80086fc:	6013      	str	r3, [r2, #0]
 80086fe:	b004      	add	sp, #16
 8008700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008704:	1c59      	adds	r1, r3, #1
 8008706:	9103      	str	r1, [sp, #12]
 8008708:	701a      	strb	r2, [r3, #0]
 800870a:	e7f0      	b.n	80086ee <__cvt+0xa6>

0800870c <__exponent>:
 800870c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800870e:	4603      	mov	r3, r0
 8008710:	2900      	cmp	r1, #0
 8008712:	bfb8      	it	lt
 8008714:	4249      	neglt	r1, r1
 8008716:	f803 2b02 	strb.w	r2, [r3], #2
 800871a:	bfb4      	ite	lt
 800871c:	222d      	movlt	r2, #45	; 0x2d
 800871e:	222b      	movge	r2, #43	; 0x2b
 8008720:	2909      	cmp	r1, #9
 8008722:	7042      	strb	r2, [r0, #1]
 8008724:	dd2a      	ble.n	800877c <__exponent+0x70>
 8008726:	f10d 0407 	add.w	r4, sp, #7
 800872a:	46a4      	mov	ip, r4
 800872c:	270a      	movs	r7, #10
 800872e:	46a6      	mov	lr, r4
 8008730:	460a      	mov	r2, r1
 8008732:	fb91 f6f7 	sdiv	r6, r1, r7
 8008736:	fb07 1516 	mls	r5, r7, r6, r1
 800873a:	3530      	adds	r5, #48	; 0x30
 800873c:	2a63      	cmp	r2, #99	; 0x63
 800873e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008742:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008746:	4631      	mov	r1, r6
 8008748:	dcf1      	bgt.n	800872e <__exponent+0x22>
 800874a:	3130      	adds	r1, #48	; 0x30
 800874c:	f1ae 0502 	sub.w	r5, lr, #2
 8008750:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008754:	1c44      	adds	r4, r0, #1
 8008756:	4629      	mov	r1, r5
 8008758:	4561      	cmp	r1, ip
 800875a:	d30a      	bcc.n	8008772 <__exponent+0x66>
 800875c:	f10d 0209 	add.w	r2, sp, #9
 8008760:	eba2 020e 	sub.w	r2, r2, lr
 8008764:	4565      	cmp	r5, ip
 8008766:	bf88      	it	hi
 8008768:	2200      	movhi	r2, #0
 800876a:	4413      	add	r3, r2
 800876c:	1a18      	subs	r0, r3, r0
 800876e:	b003      	add	sp, #12
 8008770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008776:	f804 2f01 	strb.w	r2, [r4, #1]!
 800877a:	e7ed      	b.n	8008758 <__exponent+0x4c>
 800877c:	2330      	movs	r3, #48	; 0x30
 800877e:	3130      	adds	r1, #48	; 0x30
 8008780:	7083      	strb	r3, [r0, #2]
 8008782:	70c1      	strb	r1, [r0, #3]
 8008784:	1d03      	adds	r3, r0, #4
 8008786:	e7f1      	b.n	800876c <__exponent+0x60>

08008788 <_printf_float>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	ed2d 8b02 	vpush	{d8}
 8008790:	b08d      	sub	sp, #52	; 0x34
 8008792:	460c      	mov	r4, r1
 8008794:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008798:	4616      	mov	r6, r2
 800879a:	461f      	mov	r7, r3
 800879c:	4605      	mov	r5, r0
 800879e:	f002 ff35 	bl	800b60c <_localeconv_r>
 80087a2:	f8d0 a000 	ldr.w	sl, [r0]
 80087a6:	4650      	mov	r0, sl
 80087a8:	f7f7 fd24 	bl	80001f4 <strlen>
 80087ac:	2300      	movs	r3, #0
 80087ae:	930a      	str	r3, [sp, #40]	; 0x28
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	9305      	str	r3, [sp, #20]
 80087b4:	f8d8 3000 	ldr.w	r3, [r8]
 80087b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087bc:	3307      	adds	r3, #7
 80087be:	f023 0307 	bic.w	r3, r3, #7
 80087c2:	f103 0208 	add.w	r2, r3, #8
 80087c6:	f8c8 2000 	str.w	r2, [r8]
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087da:	9307      	str	r3, [sp, #28]
 80087dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80087e0:	ee08 0a10 	vmov	s16, r0
 80087e4:	4b9f      	ldr	r3, [pc, #636]	; (8008a64 <_printf_float+0x2dc>)
 80087e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087ea:	f04f 32ff 	mov.w	r2, #4294967295
 80087ee:	f7f8 f9b5 	bl	8000b5c <__aeabi_dcmpun>
 80087f2:	bb88      	cbnz	r0, 8008858 <_printf_float+0xd0>
 80087f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087f8:	4b9a      	ldr	r3, [pc, #616]	; (8008a64 <_printf_float+0x2dc>)
 80087fa:	f04f 32ff 	mov.w	r2, #4294967295
 80087fe:	f7f8 f98f 	bl	8000b20 <__aeabi_dcmple>
 8008802:	bb48      	cbnz	r0, 8008858 <_printf_float+0xd0>
 8008804:	2200      	movs	r2, #0
 8008806:	2300      	movs	r3, #0
 8008808:	4640      	mov	r0, r8
 800880a:	4649      	mov	r1, r9
 800880c:	f7f8 f97e 	bl	8000b0c <__aeabi_dcmplt>
 8008810:	b110      	cbz	r0, 8008818 <_printf_float+0x90>
 8008812:	232d      	movs	r3, #45	; 0x2d
 8008814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008818:	4b93      	ldr	r3, [pc, #588]	; (8008a68 <_printf_float+0x2e0>)
 800881a:	4894      	ldr	r0, [pc, #592]	; (8008a6c <_printf_float+0x2e4>)
 800881c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008820:	bf94      	ite	ls
 8008822:	4698      	movls	r8, r3
 8008824:	4680      	movhi	r8, r0
 8008826:	2303      	movs	r3, #3
 8008828:	6123      	str	r3, [r4, #16]
 800882a:	9b05      	ldr	r3, [sp, #20]
 800882c:	f023 0204 	bic.w	r2, r3, #4
 8008830:	6022      	str	r2, [r4, #0]
 8008832:	f04f 0900 	mov.w	r9, #0
 8008836:	9700      	str	r7, [sp, #0]
 8008838:	4633      	mov	r3, r6
 800883a:	aa0b      	add	r2, sp, #44	; 0x2c
 800883c:	4621      	mov	r1, r4
 800883e:	4628      	mov	r0, r5
 8008840:	f000 f9d8 	bl	8008bf4 <_printf_common>
 8008844:	3001      	adds	r0, #1
 8008846:	f040 8090 	bne.w	800896a <_printf_float+0x1e2>
 800884a:	f04f 30ff 	mov.w	r0, #4294967295
 800884e:	b00d      	add	sp, #52	; 0x34
 8008850:	ecbd 8b02 	vpop	{d8}
 8008854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008858:	4642      	mov	r2, r8
 800885a:	464b      	mov	r3, r9
 800885c:	4640      	mov	r0, r8
 800885e:	4649      	mov	r1, r9
 8008860:	f7f8 f97c 	bl	8000b5c <__aeabi_dcmpun>
 8008864:	b140      	cbz	r0, 8008878 <_printf_float+0xf0>
 8008866:	464b      	mov	r3, r9
 8008868:	2b00      	cmp	r3, #0
 800886a:	bfbc      	itt	lt
 800886c:	232d      	movlt	r3, #45	; 0x2d
 800886e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008872:	487f      	ldr	r0, [pc, #508]	; (8008a70 <_printf_float+0x2e8>)
 8008874:	4b7f      	ldr	r3, [pc, #508]	; (8008a74 <_printf_float+0x2ec>)
 8008876:	e7d1      	b.n	800881c <_printf_float+0x94>
 8008878:	6863      	ldr	r3, [r4, #4]
 800887a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800887e:	9206      	str	r2, [sp, #24]
 8008880:	1c5a      	adds	r2, r3, #1
 8008882:	d13f      	bne.n	8008904 <_printf_float+0x17c>
 8008884:	2306      	movs	r3, #6
 8008886:	6063      	str	r3, [r4, #4]
 8008888:	9b05      	ldr	r3, [sp, #20]
 800888a:	6861      	ldr	r1, [r4, #4]
 800888c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008890:	2300      	movs	r3, #0
 8008892:	9303      	str	r3, [sp, #12]
 8008894:	ab0a      	add	r3, sp, #40	; 0x28
 8008896:	e9cd b301 	strd	fp, r3, [sp, #4]
 800889a:	ab09      	add	r3, sp, #36	; 0x24
 800889c:	ec49 8b10 	vmov	d0, r8, r9
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	6022      	str	r2, [r4, #0]
 80088a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80088a8:	4628      	mov	r0, r5
 80088aa:	f7ff fecd 	bl	8008648 <__cvt>
 80088ae:	9b06      	ldr	r3, [sp, #24]
 80088b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088b2:	2b47      	cmp	r3, #71	; 0x47
 80088b4:	4680      	mov	r8, r0
 80088b6:	d108      	bne.n	80088ca <_printf_float+0x142>
 80088b8:	1cc8      	adds	r0, r1, #3
 80088ba:	db02      	blt.n	80088c2 <_printf_float+0x13a>
 80088bc:	6863      	ldr	r3, [r4, #4]
 80088be:	4299      	cmp	r1, r3
 80088c0:	dd41      	ble.n	8008946 <_printf_float+0x1be>
 80088c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80088c6:	fa5f fb8b 	uxtb.w	fp, fp
 80088ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088ce:	d820      	bhi.n	8008912 <_printf_float+0x18a>
 80088d0:	3901      	subs	r1, #1
 80088d2:	465a      	mov	r2, fp
 80088d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088d8:	9109      	str	r1, [sp, #36]	; 0x24
 80088da:	f7ff ff17 	bl	800870c <__exponent>
 80088de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088e0:	1813      	adds	r3, r2, r0
 80088e2:	2a01      	cmp	r2, #1
 80088e4:	4681      	mov	r9, r0
 80088e6:	6123      	str	r3, [r4, #16]
 80088e8:	dc02      	bgt.n	80088f0 <_printf_float+0x168>
 80088ea:	6822      	ldr	r2, [r4, #0]
 80088ec:	07d2      	lsls	r2, r2, #31
 80088ee:	d501      	bpl.n	80088f4 <_printf_float+0x16c>
 80088f0:	3301      	adds	r3, #1
 80088f2:	6123      	str	r3, [r4, #16]
 80088f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d09c      	beq.n	8008836 <_printf_float+0xae>
 80088fc:	232d      	movs	r3, #45	; 0x2d
 80088fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008902:	e798      	b.n	8008836 <_printf_float+0xae>
 8008904:	9a06      	ldr	r2, [sp, #24]
 8008906:	2a47      	cmp	r2, #71	; 0x47
 8008908:	d1be      	bne.n	8008888 <_printf_float+0x100>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1bc      	bne.n	8008888 <_printf_float+0x100>
 800890e:	2301      	movs	r3, #1
 8008910:	e7b9      	b.n	8008886 <_printf_float+0xfe>
 8008912:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008916:	d118      	bne.n	800894a <_printf_float+0x1c2>
 8008918:	2900      	cmp	r1, #0
 800891a:	6863      	ldr	r3, [r4, #4]
 800891c:	dd0b      	ble.n	8008936 <_printf_float+0x1ae>
 800891e:	6121      	str	r1, [r4, #16]
 8008920:	b913      	cbnz	r3, 8008928 <_printf_float+0x1a0>
 8008922:	6822      	ldr	r2, [r4, #0]
 8008924:	07d0      	lsls	r0, r2, #31
 8008926:	d502      	bpl.n	800892e <_printf_float+0x1a6>
 8008928:	3301      	adds	r3, #1
 800892a:	440b      	add	r3, r1
 800892c:	6123      	str	r3, [r4, #16]
 800892e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008930:	f04f 0900 	mov.w	r9, #0
 8008934:	e7de      	b.n	80088f4 <_printf_float+0x16c>
 8008936:	b913      	cbnz	r3, 800893e <_printf_float+0x1b6>
 8008938:	6822      	ldr	r2, [r4, #0]
 800893a:	07d2      	lsls	r2, r2, #31
 800893c:	d501      	bpl.n	8008942 <_printf_float+0x1ba>
 800893e:	3302      	adds	r3, #2
 8008940:	e7f4      	b.n	800892c <_printf_float+0x1a4>
 8008942:	2301      	movs	r3, #1
 8008944:	e7f2      	b.n	800892c <_printf_float+0x1a4>
 8008946:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800894a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800894c:	4299      	cmp	r1, r3
 800894e:	db05      	blt.n	800895c <_printf_float+0x1d4>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	6121      	str	r1, [r4, #16]
 8008954:	07d8      	lsls	r0, r3, #31
 8008956:	d5ea      	bpl.n	800892e <_printf_float+0x1a6>
 8008958:	1c4b      	adds	r3, r1, #1
 800895a:	e7e7      	b.n	800892c <_printf_float+0x1a4>
 800895c:	2900      	cmp	r1, #0
 800895e:	bfd4      	ite	le
 8008960:	f1c1 0202 	rsble	r2, r1, #2
 8008964:	2201      	movgt	r2, #1
 8008966:	4413      	add	r3, r2
 8008968:	e7e0      	b.n	800892c <_printf_float+0x1a4>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	055a      	lsls	r2, r3, #21
 800896e:	d407      	bmi.n	8008980 <_printf_float+0x1f8>
 8008970:	6923      	ldr	r3, [r4, #16]
 8008972:	4642      	mov	r2, r8
 8008974:	4631      	mov	r1, r6
 8008976:	4628      	mov	r0, r5
 8008978:	47b8      	blx	r7
 800897a:	3001      	adds	r0, #1
 800897c:	d12c      	bne.n	80089d8 <_printf_float+0x250>
 800897e:	e764      	b.n	800884a <_printf_float+0xc2>
 8008980:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008984:	f240 80e0 	bls.w	8008b48 <_printf_float+0x3c0>
 8008988:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800898c:	2200      	movs	r2, #0
 800898e:	2300      	movs	r3, #0
 8008990:	f7f8 f8b2 	bl	8000af8 <__aeabi_dcmpeq>
 8008994:	2800      	cmp	r0, #0
 8008996:	d034      	beq.n	8008a02 <_printf_float+0x27a>
 8008998:	4a37      	ldr	r2, [pc, #220]	; (8008a78 <_printf_float+0x2f0>)
 800899a:	2301      	movs	r3, #1
 800899c:	4631      	mov	r1, r6
 800899e:	4628      	mov	r0, r5
 80089a0:	47b8      	blx	r7
 80089a2:	3001      	adds	r0, #1
 80089a4:	f43f af51 	beq.w	800884a <_printf_float+0xc2>
 80089a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089ac:	429a      	cmp	r2, r3
 80089ae:	db02      	blt.n	80089b6 <_printf_float+0x22e>
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	07d8      	lsls	r0, r3, #31
 80089b4:	d510      	bpl.n	80089d8 <_printf_float+0x250>
 80089b6:	ee18 3a10 	vmov	r3, s16
 80089ba:	4652      	mov	r2, sl
 80089bc:	4631      	mov	r1, r6
 80089be:	4628      	mov	r0, r5
 80089c0:	47b8      	blx	r7
 80089c2:	3001      	adds	r0, #1
 80089c4:	f43f af41 	beq.w	800884a <_printf_float+0xc2>
 80089c8:	f04f 0800 	mov.w	r8, #0
 80089cc:	f104 091a 	add.w	r9, r4, #26
 80089d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d2:	3b01      	subs	r3, #1
 80089d4:	4543      	cmp	r3, r8
 80089d6:	dc09      	bgt.n	80089ec <_printf_float+0x264>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	079b      	lsls	r3, r3, #30
 80089dc:	f100 8105 	bmi.w	8008bea <_printf_float+0x462>
 80089e0:	68e0      	ldr	r0, [r4, #12]
 80089e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089e4:	4298      	cmp	r0, r3
 80089e6:	bfb8      	it	lt
 80089e8:	4618      	movlt	r0, r3
 80089ea:	e730      	b.n	800884e <_printf_float+0xc6>
 80089ec:	2301      	movs	r3, #1
 80089ee:	464a      	mov	r2, r9
 80089f0:	4631      	mov	r1, r6
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b8      	blx	r7
 80089f6:	3001      	adds	r0, #1
 80089f8:	f43f af27 	beq.w	800884a <_printf_float+0xc2>
 80089fc:	f108 0801 	add.w	r8, r8, #1
 8008a00:	e7e6      	b.n	80089d0 <_printf_float+0x248>
 8008a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	dc39      	bgt.n	8008a7c <_printf_float+0x2f4>
 8008a08:	4a1b      	ldr	r2, [pc, #108]	; (8008a78 <_printf_float+0x2f0>)
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4628      	mov	r0, r5
 8008a10:	47b8      	blx	r7
 8008a12:	3001      	adds	r0, #1
 8008a14:	f43f af19 	beq.w	800884a <_printf_float+0xc2>
 8008a18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	d102      	bne.n	8008a26 <_printf_float+0x29e>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	07d9      	lsls	r1, r3, #31
 8008a24:	d5d8      	bpl.n	80089d8 <_printf_float+0x250>
 8008a26:	ee18 3a10 	vmov	r3, s16
 8008a2a:	4652      	mov	r2, sl
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4628      	mov	r0, r5
 8008a30:	47b8      	blx	r7
 8008a32:	3001      	adds	r0, #1
 8008a34:	f43f af09 	beq.w	800884a <_printf_float+0xc2>
 8008a38:	f04f 0900 	mov.w	r9, #0
 8008a3c:	f104 0a1a 	add.w	sl, r4, #26
 8008a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a42:	425b      	negs	r3, r3
 8008a44:	454b      	cmp	r3, r9
 8008a46:	dc01      	bgt.n	8008a4c <_printf_float+0x2c4>
 8008a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a4a:	e792      	b.n	8008972 <_printf_float+0x1ea>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4652      	mov	r2, sl
 8008a50:	4631      	mov	r1, r6
 8008a52:	4628      	mov	r0, r5
 8008a54:	47b8      	blx	r7
 8008a56:	3001      	adds	r0, #1
 8008a58:	f43f aef7 	beq.w	800884a <_printf_float+0xc2>
 8008a5c:	f109 0901 	add.w	r9, r9, #1
 8008a60:	e7ee      	b.n	8008a40 <_printf_float+0x2b8>
 8008a62:	bf00      	nop
 8008a64:	7fefffff 	.word	0x7fefffff
 8008a68:	080104d4 	.word	0x080104d4
 8008a6c:	080104d8 	.word	0x080104d8
 8008a70:	080104e0 	.word	0x080104e0
 8008a74:	080104dc 	.word	0x080104dc
 8008a78:	080108d9 	.word	0x080108d9
 8008a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a80:	429a      	cmp	r2, r3
 8008a82:	bfa8      	it	ge
 8008a84:	461a      	movge	r2, r3
 8008a86:	2a00      	cmp	r2, #0
 8008a88:	4691      	mov	r9, r2
 8008a8a:	dc37      	bgt.n	8008afc <_printf_float+0x374>
 8008a8c:	f04f 0b00 	mov.w	fp, #0
 8008a90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a94:	f104 021a 	add.w	r2, r4, #26
 8008a98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a9a:	9305      	str	r3, [sp, #20]
 8008a9c:	eba3 0309 	sub.w	r3, r3, r9
 8008aa0:	455b      	cmp	r3, fp
 8008aa2:	dc33      	bgt.n	8008b0c <_printf_float+0x384>
 8008aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	db3b      	blt.n	8008b24 <_printf_float+0x39c>
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	07da      	lsls	r2, r3, #31
 8008ab0:	d438      	bmi.n	8008b24 <_printf_float+0x39c>
 8008ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab4:	9a05      	ldr	r2, [sp, #20]
 8008ab6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ab8:	1a9a      	subs	r2, r3, r2
 8008aba:	eba3 0901 	sub.w	r9, r3, r1
 8008abe:	4591      	cmp	r9, r2
 8008ac0:	bfa8      	it	ge
 8008ac2:	4691      	movge	r9, r2
 8008ac4:	f1b9 0f00 	cmp.w	r9, #0
 8008ac8:	dc35      	bgt.n	8008b36 <_printf_float+0x3ae>
 8008aca:	f04f 0800 	mov.w	r8, #0
 8008ace:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ad2:	f104 0a1a 	add.w	sl, r4, #26
 8008ad6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ada:	1a9b      	subs	r3, r3, r2
 8008adc:	eba3 0309 	sub.w	r3, r3, r9
 8008ae0:	4543      	cmp	r3, r8
 8008ae2:	f77f af79 	ble.w	80089d8 <_printf_float+0x250>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	4652      	mov	r2, sl
 8008aea:	4631      	mov	r1, r6
 8008aec:	4628      	mov	r0, r5
 8008aee:	47b8      	blx	r7
 8008af0:	3001      	adds	r0, #1
 8008af2:	f43f aeaa 	beq.w	800884a <_printf_float+0xc2>
 8008af6:	f108 0801 	add.w	r8, r8, #1
 8008afa:	e7ec      	b.n	8008ad6 <_printf_float+0x34e>
 8008afc:	4613      	mov	r3, r2
 8008afe:	4631      	mov	r1, r6
 8008b00:	4642      	mov	r2, r8
 8008b02:	4628      	mov	r0, r5
 8008b04:	47b8      	blx	r7
 8008b06:	3001      	adds	r0, #1
 8008b08:	d1c0      	bne.n	8008a8c <_printf_float+0x304>
 8008b0a:	e69e      	b.n	800884a <_printf_float+0xc2>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	4631      	mov	r1, r6
 8008b10:	4628      	mov	r0, r5
 8008b12:	9205      	str	r2, [sp, #20]
 8008b14:	47b8      	blx	r7
 8008b16:	3001      	adds	r0, #1
 8008b18:	f43f ae97 	beq.w	800884a <_printf_float+0xc2>
 8008b1c:	9a05      	ldr	r2, [sp, #20]
 8008b1e:	f10b 0b01 	add.w	fp, fp, #1
 8008b22:	e7b9      	b.n	8008a98 <_printf_float+0x310>
 8008b24:	ee18 3a10 	vmov	r3, s16
 8008b28:	4652      	mov	r2, sl
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	47b8      	blx	r7
 8008b30:	3001      	adds	r0, #1
 8008b32:	d1be      	bne.n	8008ab2 <_printf_float+0x32a>
 8008b34:	e689      	b.n	800884a <_printf_float+0xc2>
 8008b36:	9a05      	ldr	r2, [sp, #20]
 8008b38:	464b      	mov	r3, r9
 8008b3a:	4442      	add	r2, r8
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	4628      	mov	r0, r5
 8008b40:	47b8      	blx	r7
 8008b42:	3001      	adds	r0, #1
 8008b44:	d1c1      	bne.n	8008aca <_printf_float+0x342>
 8008b46:	e680      	b.n	800884a <_printf_float+0xc2>
 8008b48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b4a:	2a01      	cmp	r2, #1
 8008b4c:	dc01      	bgt.n	8008b52 <_printf_float+0x3ca>
 8008b4e:	07db      	lsls	r3, r3, #31
 8008b50:	d538      	bpl.n	8008bc4 <_printf_float+0x43c>
 8008b52:	2301      	movs	r3, #1
 8008b54:	4642      	mov	r2, r8
 8008b56:	4631      	mov	r1, r6
 8008b58:	4628      	mov	r0, r5
 8008b5a:	47b8      	blx	r7
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	f43f ae74 	beq.w	800884a <_printf_float+0xc2>
 8008b62:	ee18 3a10 	vmov	r3, s16
 8008b66:	4652      	mov	r2, sl
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	47b8      	blx	r7
 8008b6e:	3001      	adds	r0, #1
 8008b70:	f43f ae6b 	beq.w	800884a <_printf_float+0xc2>
 8008b74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f7f7 ffbc 	bl	8000af8 <__aeabi_dcmpeq>
 8008b80:	b9d8      	cbnz	r0, 8008bba <_printf_float+0x432>
 8008b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b84:	f108 0201 	add.w	r2, r8, #1
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	47b8      	blx	r7
 8008b90:	3001      	adds	r0, #1
 8008b92:	d10e      	bne.n	8008bb2 <_printf_float+0x42a>
 8008b94:	e659      	b.n	800884a <_printf_float+0xc2>
 8008b96:	2301      	movs	r3, #1
 8008b98:	4652      	mov	r2, sl
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	47b8      	blx	r7
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	f43f ae52 	beq.w	800884a <_printf_float+0xc2>
 8008ba6:	f108 0801 	add.w	r8, r8, #1
 8008baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bac:	3b01      	subs	r3, #1
 8008bae:	4543      	cmp	r3, r8
 8008bb0:	dcf1      	bgt.n	8008b96 <_printf_float+0x40e>
 8008bb2:	464b      	mov	r3, r9
 8008bb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008bb8:	e6dc      	b.n	8008974 <_printf_float+0x1ec>
 8008bba:	f04f 0800 	mov.w	r8, #0
 8008bbe:	f104 0a1a 	add.w	sl, r4, #26
 8008bc2:	e7f2      	b.n	8008baa <_printf_float+0x422>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	4642      	mov	r2, r8
 8008bc8:	e7df      	b.n	8008b8a <_printf_float+0x402>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	464a      	mov	r2, r9
 8008bce:	4631      	mov	r1, r6
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	47b8      	blx	r7
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	f43f ae38 	beq.w	800884a <_printf_float+0xc2>
 8008bda:	f108 0801 	add.w	r8, r8, #1
 8008bde:	68e3      	ldr	r3, [r4, #12]
 8008be0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008be2:	1a5b      	subs	r3, r3, r1
 8008be4:	4543      	cmp	r3, r8
 8008be6:	dcf0      	bgt.n	8008bca <_printf_float+0x442>
 8008be8:	e6fa      	b.n	80089e0 <_printf_float+0x258>
 8008bea:	f04f 0800 	mov.w	r8, #0
 8008bee:	f104 0919 	add.w	r9, r4, #25
 8008bf2:	e7f4      	b.n	8008bde <_printf_float+0x456>

08008bf4 <_printf_common>:
 8008bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf8:	4616      	mov	r6, r2
 8008bfa:	4699      	mov	r9, r3
 8008bfc:	688a      	ldr	r2, [r1, #8]
 8008bfe:	690b      	ldr	r3, [r1, #16]
 8008c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c04:	4293      	cmp	r3, r2
 8008c06:	bfb8      	it	lt
 8008c08:	4613      	movlt	r3, r2
 8008c0a:	6033      	str	r3, [r6, #0]
 8008c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c10:	4607      	mov	r7, r0
 8008c12:	460c      	mov	r4, r1
 8008c14:	b10a      	cbz	r2, 8008c1a <_printf_common+0x26>
 8008c16:	3301      	adds	r3, #1
 8008c18:	6033      	str	r3, [r6, #0]
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	0699      	lsls	r1, r3, #26
 8008c1e:	bf42      	ittt	mi
 8008c20:	6833      	ldrmi	r3, [r6, #0]
 8008c22:	3302      	addmi	r3, #2
 8008c24:	6033      	strmi	r3, [r6, #0]
 8008c26:	6825      	ldr	r5, [r4, #0]
 8008c28:	f015 0506 	ands.w	r5, r5, #6
 8008c2c:	d106      	bne.n	8008c3c <_printf_common+0x48>
 8008c2e:	f104 0a19 	add.w	sl, r4, #25
 8008c32:	68e3      	ldr	r3, [r4, #12]
 8008c34:	6832      	ldr	r2, [r6, #0]
 8008c36:	1a9b      	subs	r3, r3, r2
 8008c38:	42ab      	cmp	r3, r5
 8008c3a:	dc26      	bgt.n	8008c8a <_printf_common+0x96>
 8008c3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c40:	1e13      	subs	r3, r2, #0
 8008c42:	6822      	ldr	r2, [r4, #0]
 8008c44:	bf18      	it	ne
 8008c46:	2301      	movne	r3, #1
 8008c48:	0692      	lsls	r2, r2, #26
 8008c4a:	d42b      	bmi.n	8008ca4 <_printf_common+0xb0>
 8008c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c50:	4649      	mov	r1, r9
 8008c52:	4638      	mov	r0, r7
 8008c54:	47c0      	blx	r8
 8008c56:	3001      	adds	r0, #1
 8008c58:	d01e      	beq.n	8008c98 <_printf_common+0xa4>
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	68e5      	ldr	r5, [r4, #12]
 8008c5e:	6832      	ldr	r2, [r6, #0]
 8008c60:	f003 0306 	and.w	r3, r3, #6
 8008c64:	2b04      	cmp	r3, #4
 8008c66:	bf08      	it	eq
 8008c68:	1aad      	subeq	r5, r5, r2
 8008c6a:	68a3      	ldr	r3, [r4, #8]
 8008c6c:	6922      	ldr	r2, [r4, #16]
 8008c6e:	bf0c      	ite	eq
 8008c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c74:	2500      	movne	r5, #0
 8008c76:	4293      	cmp	r3, r2
 8008c78:	bfc4      	itt	gt
 8008c7a:	1a9b      	subgt	r3, r3, r2
 8008c7c:	18ed      	addgt	r5, r5, r3
 8008c7e:	2600      	movs	r6, #0
 8008c80:	341a      	adds	r4, #26
 8008c82:	42b5      	cmp	r5, r6
 8008c84:	d11a      	bne.n	8008cbc <_printf_common+0xc8>
 8008c86:	2000      	movs	r0, #0
 8008c88:	e008      	b.n	8008c9c <_printf_common+0xa8>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	4652      	mov	r2, sl
 8008c8e:	4649      	mov	r1, r9
 8008c90:	4638      	mov	r0, r7
 8008c92:	47c0      	blx	r8
 8008c94:	3001      	adds	r0, #1
 8008c96:	d103      	bne.n	8008ca0 <_printf_common+0xac>
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca0:	3501      	adds	r5, #1
 8008ca2:	e7c6      	b.n	8008c32 <_printf_common+0x3e>
 8008ca4:	18e1      	adds	r1, r4, r3
 8008ca6:	1c5a      	adds	r2, r3, #1
 8008ca8:	2030      	movs	r0, #48	; 0x30
 8008caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cae:	4422      	add	r2, r4
 8008cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cb8:	3302      	adds	r3, #2
 8008cba:	e7c7      	b.n	8008c4c <_printf_common+0x58>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	4622      	mov	r2, r4
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	4638      	mov	r0, r7
 8008cc4:	47c0      	blx	r8
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	d0e6      	beq.n	8008c98 <_printf_common+0xa4>
 8008cca:	3601      	adds	r6, #1
 8008ccc:	e7d9      	b.n	8008c82 <_printf_common+0x8e>
	...

08008cd0 <_printf_i>:
 8008cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd4:	7e0f      	ldrb	r7, [r1, #24]
 8008cd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cd8:	2f78      	cmp	r7, #120	; 0x78
 8008cda:	4691      	mov	r9, r2
 8008cdc:	4680      	mov	r8, r0
 8008cde:	460c      	mov	r4, r1
 8008ce0:	469a      	mov	sl, r3
 8008ce2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ce6:	d807      	bhi.n	8008cf8 <_printf_i+0x28>
 8008ce8:	2f62      	cmp	r7, #98	; 0x62
 8008cea:	d80a      	bhi.n	8008d02 <_printf_i+0x32>
 8008cec:	2f00      	cmp	r7, #0
 8008cee:	f000 80d8 	beq.w	8008ea2 <_printf_i+0x1d2>
 8008cf2:	2f58      	cmp	r7, #88	; 0x58
 8008cf4:	f000 80a3 	beq.w	8008e3e <_printf_i+0x16e>
 8008cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d00:	e03a      	b.n	8008d78 <_printf_i+0xa8>
 8008d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d06:	2b15      	cmp	r3, #21
 8008d08:	d8f6      	bhi.n	8008cf8 <_printf_i+0x28>
 8008d0a:	a101      	add	r1, pc, #4	; (adr r1, 8008d10 <_printf_i+0x40>)
 8008d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d10:	08008d69 	.word	0x08008d69
 8008d14:	08008d7d 	.word	0x08008d7d
 8008d18:	08008cf9 	.word	0x08008cf9
 8008d1c:	08008cf9 	.word	0x08008cf9
 8008d20:	08008cf9 	.word	0x08008cf9
 8008d24:	08008cf9 	.word	0x08008cf9
 8008d28:	08008d7d 	.word	0x08008d7d
 8008d2c:	08008cf9 	.word	0x08008cf9
 8008d30:	08008cf9 	.word	0x08008cf9
 8008d34:	08008cf9 	.word	0x08008cf9
 8008d38:	08008cf9 	.word	0x08008cf9
 8008d3c:	08008e89 	.word	0x08008e89
 8008d40:	08008dad 	.word	0x08008dad
 8008d44:	08008e6b 	.word	0x08008e6b
 8008d48:	08008cf9 	.word	0x08008cf9
 8008d4c:	08008cf9 	.word	0x08008cf9
 8008d50:	08008eab 	.word	0x08008eab
 8008d54:	08008cf9 	.word	0x08008cf9
 8008d58:	08008dad 	.word	0x08008dad
 8008d5c:	08008cf9 	.word	0x08008cf9
 8008d60:	08008cf9 	.word	0x08008cf9
 8008d64:	08008e73 	.word	0x08008e73
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	1d1a      	adds	r2, r3, #4
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	602a      	str	r2, [r5, #0]
 8008d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e0a3      	b.n	8008ec4 <_printf_i+0x1f4>
 8008d7c:	6820      	ldr	r0, [r4, #0]
 8008d7e:	6829      	ldr	r1, [r5, #0]
 8008d80:	0606      	lsls	r6, r0, #24
 8008d82:	f101 0304 	add.w	r3, r1, #4
 8008d86:	d50a      	bpl.n	8008d9e <_printf_i+0xce>
 8008d88:	680e      	ldr	r6, [r1, #0]
 8008d8a:	602b      	str	r3, [r5, #0]
 8008d8c:	2e00      	cmp	r6, #0
 8008d8e:	da03      	bge.n	8008d98 <_printf_i+0xc8>
 8008d90:	232d      	movs	r3, #45	; 0x2d
 8008d92:	4276      	negs	r6, r6
 8008d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d98:	485e      	ldr	r0, [pc, #376]	; (8008f14 <_printf_i+0x244>)
 8008d9a:	230a      	movs	r3, #10
 8008d9c:	e019      	b.n	8008dd2 <_printf_i+0x102>
 8008d9e:	680e      	ldr	r6, [r1, #0]
 8008da0:	602b      	str	r3, [r5, #0]
 8008da2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008da6:	bf18      	it	ne
 8008da8:	b236      	sxthne	r6, r6
 8008daa:	e7ef      	b.n	8008d8c <_printf_i+0xbc>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	6820      	ldr	r0, [r4, #0]
 8008db0:	1d19      	adds	r1, r3, #4
 8008db2:	6029      	str	r1, [r5, #0]
 8008db4:	0601      	lsls	r1, r0, #24
 8008db6:	d501      	bpl.n	8008dbc <_printf_i+0xec>
 8008db8:	681e      	ldr	r6, [r3, #0]
 8008dba:	e002      	b.n	8008dc2 <_printf_i+0xf2>
 8008dbc:	0646      	lsls	r6, r0, #25
 8008dbe:	d5fb      	bpl.n	8008db8 <_printf_i+0xe8>
 8008dc0:	881e      	ldrh	r6, [r3, #0]
 8008dc2:	4854      	ldr	r0, [pc, #336]	; (8008f14 <_printf_i+0x244>)
 8008dc4:	2f6f      	cmp	r7, #111	; 0x6f
 8008dc6:	bf0c      	ite	eq
 8008dc8:	2308      	moveq	r3, #8
 8008dca:	230a      	movne	r3, #10
 8008dcc:	2100      	movs	r1, #0
 8008dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dd2:	6865      	ldr	r5, [r4, #4]
 8008dd4:	60a5      	str	r5, [r4, #8]
 8008dd6:	2d00      	cmp	r5, #0
 8008dd8:	bfa2      	ittt	ge
 8008dda:	6821      	ldrge	r1, [r4, #0]
 8008ddc:	f021 0104 	bicge.w	r1, r1, #4
 8008de0:	6021      	strge	r1, [r4, #0]
 8008de2:	b90e      	cbnz	r6, 8008de8 <_printf_i+0x118>
 8008de4:	2d00      	cmp	r5, #0
 8008de6:	d04d      	beq.n	8008e84 <_printf_i+0x1b4>
 8008de8:	4615      	mov	r5, r2
 8008dea:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dee:	fb03 6711 	mls	r7, r3, r1, r6
 8008df2:	5dc7      	ldrb	r7, [r0, r7]
 8008df4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008df8:	4637      	mov	r7, r6
 8008dfa:	42bb      	cmp	r3, r7
 8008dfc:	460e      	mov	r6, r1
 8008dfe:	d9f4      	bls.n	8008dea <_printf_i+0x11a>
 8008e00:	2b08      	cmp	r3, #8
 8008e02:	d10b      	bne.n	8008e1c <_printf_i+0x14c>
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	07de      	lsls	r6, r3, #31
 8008e08:	d508      	bpl.n	8008e1c <_printf_i+0x14c>
 8008e0a:	6923      	ldr	r3, [r4, #16]
 8008e0c:	6861      	ldr	r1, [r4, #4]
 8008e0e:	4299      	cmp	r1, r3
 8008e10:	bfde      	ittt	le
 8008e12:	2330      	movle	r3, #48	; 0x30
 8008e14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e1c:	1b52      	subs	r2, r2, r5
 8008e1e:	6122      	str	r2, [r4, #16]
 8008e20:	f8cd a000 	str.w	sl, [sp]
 8008e24:	464b      	mov	r3, r9
 8008e26:	aa03      	add	r2, sp, #12
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	f7ff fee2 	bl	8008bf4 <_printf_common>
 8008e30:	3001      	adds	r0, #1
 8008e32:	d14c      	bne.n	8008ece <_printf_i+0x1fe>
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	b004      	add	sp, #16
 8008e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e3e:	4835      	ldr	r0, [pc, #212]	; (8008f14 <_printf_i+0x244>)
 8008e40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e44:	6829      	ldr	r1, [r5, #0]
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e4c:	6029      	str	r1, [r5, #0]
 8008e4e:	061d      	lsls	r5, r3, #24
 8008e50:	d514      	bpl.n	8008e7c <_printf_i+0x1ac>
 8008e52:	07df      	lsls	r7, r3, #31
 8008e54:	bf44      	itt	mi
 8008e56:	f043 0320 	orrmi.w	r3, r3, #32
 8008e5a:	6023      	strmi	r3, [r4, #0]
 8008e5c:	b91e      	cbnz	r6, 8008e66 <_printf_i+0x196>
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	f023 0320 	bic.w	r3, r3, #32
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	2310      	movs	r3, #16
 8008e68:	e7b0      	b.n	8008dcc <_printf_i+0xfc>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	f043 0320 	orr.w	r3, r3, #32
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	2378      	movs	r3, #120	; 0x78
 8008e74:	4828      	ldr	r0, [pc, #160]	; (8008f18 <_printf_i+0x248>)
 8008e76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e7a:	e7e3      	b.n	8008e44 <_printf_i+0x174>
 8008e7c:	0659      	lsls	r1, r3, #25
 8008e7e:	bf48      	it	mi
 8008e80:	b2b6      	uxthmi	r6, r6
 8008e82:	e7e6      	b.n	8008e52 <_printf_i+0x182>
 8008e84:	4615      	mov	r5, r2
 8008e86:	e7bb      	b.n	8008e00 <_printf_i+0x130>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	6826      	ldr	r6, [r4, #0]
 8008e8c:	6961      	ldr	r1, [r4, #20]
 8008e8e:	1d18      	adds	r0, r3, #4
 8008e90:	6028      	str	r0, [r5, #0]
 8008e92:	0635      	lsls	r5, r6, #24
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	d501      	bpl.n	8008e9c <_printf_i+0x1cc>
 8008e98:	6019      	str	r1, [r3, #0]
 8008e9a:	e002      	b.n	8008ea2 <_printf_i+0x1d2>
 8008e9c:	0670      	lsls	r0, r6, #25
 8008e9e:	d5fb      	bpl.n	8008e98 <_printf_i+0x1c8>
 8008ea0:	8019      	strh	r1, [r3, #0]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	6123      	str	r3, [r4, #16]
 8008ea6:	4615      	mov	r5, r2
 8008ea8:	e7ba      	b.n	8008e20 <_printf_i+0x150>
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	1d1a      	adds	r2, r3, #4
 8008eae:	602a      	str	r2, [r5, #0]
 8008eb0:	681d      	ldr	r5, [r3, #0]
 8008eb2:	6862      	ldr	r2, [r4, #4]
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f7f7 f9aa 	bl	8000210 <memchr>
 8008ebc:	b108      	cbz	r0, 8008ec2 <_printf_i+0x1f2>
 8008ebe:	1b40      	subs	r0, r0, r5
 8008ec0:	6060      	str	r0, [r4, #4]
 8008ec2:	6863      	ldr	r3, [r4, #4]
 8008ec4:	6123      	str	r3, [r4, #16]
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ecc:	e7a8      	b.n	8008e20 <_printf_i+0x150>
 8008ece:	6923      	ldr	r3, [r4, #16]
 8008ed0:	462a      	mov	r2, r5
 8008ed2:	4649      	mov	r1, r9
 8008ed4:	4640      	mov	r0, r8
 8008ed6:	47d0      	blx	sl
 8008ed8:	3001      	adds	r0, #1
 8008eda:	d0ab      	beq.n	8008e34 <_printf_i+0x164>
 8008edc:	6823      	ldr	r3, [r4, #0]
 8008ede:	079b      	lsls	r3, r3, #30
 8008ee0:	d413      	bmi.n	8008f0a <_printf_i+0x23a>
 8008ee2:	68e0      	ldr	r0, [r4, #12]
 8008ee4:	9b03      	ldr	r3, [sp, #12]
 8008ee6:	4298      	cmp	r0, r3
 8008ee8:	bfb8      	it	lt
 8008eea:	4618      	movlt	r0, r3
 8008eec:	e7a4      	b.n	8008e38 <_printf_i+0x168>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	4632      	mov	r2, r6
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	4640      	mov	r0, r8
 8008ef6:	47d0      	blx	sl
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d09b      	beq.n	8008e34 <_printf_i+0x164>
 8008efc:	3501      	adds	r5, #1
 8008efe:	68e3      	ldr	r3, [r4, #12]
 8008f00:	9903      	ldr	r1, [sp, #12]
 8008f02:	1a5b      	subs	r3, r3, r1
 8008f04:	42ab      	cmp	r3, r5
 8008f06:	dcf2      	bgt.n	8008eee <_printf_i+0x21e>
 8008f08:	e7eb      	b.n	8008ee2 <_printf_i+0x212>
 8008f0a:	2500      	movs	r5, #0
 8008f0c:	f104 0619 	add.w	r6, r4, #25
 8008f10:	e7f5      	b.n	8008efe <_printf_i+0x22e>
 8008f12:	bf00      	nop
 8008f14:	080104e4 	.word	0x080104e4
 8008f18:	080104f5 	.word	0x080104f5

08008f1c <_scanf_float>:
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	b087      	sub	sp, #28
 8008f22:	4617      	mov	r7, r2
 8008f24:	9303      	str	r3, [sp, #12]
 8008f26:	688b      	ldr	r3, [r1, #8]
 8008f28:	1e5a      	subs	r2, r3, #1
 8008f2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f2e:	bf83      	ittte	hi
 8008f30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f34:	195b      	addhi	r3, r3, r5
 8008f36:	9302      	strhi	r3, [sp, #8]
 8008f38:	2300      	movls	r3, #0
 8008f3a:	bf86      	itte	hi
 8008f3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f40:	608b      	strhi	r3, [r1, #8]
 8008f42:	9302      	strls	r3, [sp, #8]
 8008f44:	680b      	ldr	r3, [r1, #0]
 8008f46:	468b      	mov	fp, r1
 8008f48:	2500      	movs	r5, #0
 8008f4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008f4e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008f52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008f56:	4680      	mov	r8, r0
 8008f58:	460c      	mov	r4, r1
 8008f5a:	465e      	mov	r6, fp
 8008f5c:	46aa      	mov	sl, r5
 8008f5e:	46a9      	mov	r9, r5
 8008f60:	9501      	str	r5, [sp, #4]
 8008f62:	68a2      	ldr	r2, [r4, #8]
 8008f64:	b152      	cbz	r2, 8008f7c <_scanf_float+0x60>
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b4e      	cmp	r3, #78	; 0x4e
 8008f6c:	d864      	bhi.n	8009038 <_scanf_float+0x11c>
 8008f6e:	2b40      	cmp	r3, #64	; 0x40
 8008f70:	d83c      	bhi.n	8008fec <_scanf_float+0xd0>
 8008f72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008f76:	b2c8      	uxtb	r0, r1
 8008f78:	280e      	cmp	r0, #14
 8008f7a:	d93a      	bls.n	8008ff2 <_scanf_float+0xd6>
 8008f7c:	f1b9 0f00 	cmp.w	r9, #0
 8008f80:	d003      	beq.n	8008f8a <_scanf_float+0x6e>
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f8e:	f1ba 0f01 	cmp.w	sl, #1
 8008f92:	f200 8113 	bhi.w	80091bc <_scanf_float+0x2a0>
 8008f96:	455e      	cmp	r6, fp
 8008f98:	f200 8105 	bhi.w	80091a6 <_scanf_float+0x28a>
 8008f9c:	2501      	movs	r5, #1
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	b007      	add	sp, #28
 8008fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008faa:	2a0d      	cmp	r2, #13
 8008fac:	d8e6      	bhi.n	8008f7c <_scanf_float+0x60>
 8008fae:	a101      	add	r1, pc, #4	; (adr r1, 8008fb4 <_scanf_float+0x98>)
 8008fb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008fb4:	080090f3 	.word	0x080090f3
 8008fb8:	08008f7d 	.word	0x08008f7d
 8008fbc:	08008f7d 	.word	0x08008f7d
 8008fc0:	08008f7d 	.word	0x08008f7d
 8008fc4:	08009153 	.word	0x08009153
 8008fc8:	0800912b 	.word	0x0800912b
 8008fcc:	08008f7d 	.word	0x08008f7d
 8008fd0:	08008f7d 	.word	0x08008f7d
 8008fd4:	08009101 	.word	0x08009101
 8008fd8:	08008f7d 	.word	0x08008f7d
 8008fdc:	08008f7d 	.word	0x08008f7d
 8008fe0:	08008f7d 	.word	0x08008f7d
 8008fe4:	08008f7d 	.word	0x08008f7d
 8008fe8:	080090b9 	.word	0x080090b9
 8008fec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008ff0:	e7db      	b.n	8008faa <_scanf_float+0x8e>
 8008ff2:	290e      	cmp	r1, #14
 8008ff4:	d8c2      	bhi.n	8008f7c <_scanf_float+0x60>
 8008ff6:	a001      	add	r0, pc, #4	; (adr r0, 8008ffc <_scanf_float+0xe0>)
 8008ff8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ffc:	080090ab 	.word	0x080090ab
 8009000:	08008f7d 	.word	0x08008f7d
 8009004:	080090ab 	.word	0x080090ab
 8009008:	0800913f 	.word	0x0800913f
 800900c:	08008f7d 	.word	0x08008f7d
 8009010:	08009059 	.word	0x08009059
 8009014:	08009095 	.word	0x08009095
 8009018:	08009095 	.word	0x08009095
 800901c:	08009095 	.word	0x08009095
 8009020:	08009095 	.word	0x08009095
 8009024:	08009095 	.word	0x08009095
 8009028:	08009095 	.word	0x08009095
 800902c:	08009095 	.word	0x08009095
 8009030:	08009095 	.word	0x08009095
 8009034:	08009095 	.word	0x08009095
 8009038:	2b6e      	cmp	r3, #110	; 0x6e
 800903a:	d809      	bhi.n	8009050 <_scanf_float+0x134>
 800903c:	2b60      	cmp	r3, #96	; 0x60
 800903e:	d8b2      	bhi.n	8008fa6 <_scanf_float+0x8a>
 8009040:	2b54      	cmp	r3, #84	; 0x54
 8009042:	d077      	beq.n	8009134 <_scanf_float+0x218>
 8009044:	2b59      	cmp	r3, #89	; 0x59
 8009046:	d199      	bne.n	8008f7c <_scanf_float+0x60>
 8009048:	2d07      	cmp	r5, #7
 800904a:	d197      	bne.n	8008f7c <_scanf_float+0x60>
 800904c:	2508      	movs	r5, #8
 800904e:	e029      	b.n	80090a4 <_scanf_float+0x188>
 8009050:	2b74      	cmp	r3, #116	; 0x74
 8009052:	d06f      	beq.n	8009134 <_scanf_float+0x218>
 8009054:	2b79      	cmp	r3, #121	; 0x79
 8009056:	e7f6      	b.n	8009046 <_scanf_float+0x12a>
 8009058:	6821      	ldr	r1, [r4, #0]
 800905a:	05c8      	lsls	r0, r1, #23
 800905c:	d51a      	bpl.n	8009094 <_scanf_float+0x178>
 800905e:	9b02      	ldr	r3, [sp, #8]
 8009060:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009064:	6021      	str	r1, [r4, #0]
 8009066:	f109 0901 	add.w	r9, r9, #1
 800906a:	b11b      	cbz	r3, 8009074 <_scanf_float+0x158>
 800906c:	3b01      	subs	r3, #1
 800906e:	3201      	adds	r2, #1
 8009070:	9302      	str	r3, [sp, #8]
 8009072:	60a2      	str	r2, [r4, #8]
 8009074:	68a3      	ldr	r3, [r4, #8]
 8009076:	3b01      	subs	r3, #1
 8009078:	60a3      	str	r3, [r4, #8]
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	3301      	adds	r3, #1
 800907e:	6123      	str	r3, [r4, #16]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	3b01      	subs	r3, #1
 8009084:	2b00      	cmp	r3, #0
 8009086:	607b      	str	r3, [r7, #4]
 8009088:	f340 8084 	ble.w	8009194 <_scanf_float+0x278>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	3301      	adds	r3, #1
 8009090:	603b      	str	r3, [r7, #0]
 8009092:	e766      	b.n	8008f62 <_scanf_float+0x46>
 8009094:	eb1a 0f05 	cmn.w	sl, r5
 8009098:	f47f af70 	bne.w	8008f7c <_scanf_float+0x60>
 800909c:	6822      	ldr	r2, [r4, #0]
 800909e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80090a2:	6022      	str	r2, [r4, #0]
 80090a4:	f806 3b01 	strb.w	r3, [r6], #1
 80090a8:	e7e4      	b.n	8009074 <_scanf_float+0x158>
 80090aa:	6822      	ldr	r2, [r4, #0]
 80090ac:	0610      	lsls	r0, r2, #24
 80090ae:	f57f af65 	bpl.w	8008f7c <_scanf_float+0x60>
 80090b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090b6:	e7f4      	b.n	80090a2 <_scanf_float+0x186>
 80090b8:	f1ba 0f00 	cmp.w	sl, #0
 80090bc:	d10e      	bne.n	80090dc <_scanf_float+0x1c0>
 80090be:	f1b9 0f00 	cmp.w	r9, #0
 80090c2:	d10e      	bne.n	80090e2 <_scanf_float+0x1c6>
 80090c4:	6822      	ldr	r2, [r4, #0]
 80090c6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090ca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090ce:	d108      	bne.n	80090e2 <_scanf_float+0x1c6>
 80090d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090d4:	6022      	str	r2, [r4, #0]
 80090d6:	f04f 0a01 	mov.w	sl, #1
 80090da:	e7e3      	b.n	80090a4 <_scanf_float+0x188>
 80090dc:	f1ba 0f02 	cmp.w	sl, #2
 80090e0:	d055      	beq.n	800918e <_scanf_float+0x272>
 80090e2:	2d01      	cmp	r5, #1
 80090e4:	d002      	beq.n	80090ec <_scanf_float+0x1d0>
 80090e6:	2d04      	cmp	r5, #4
 80090e8:	f47f af48 	bne.w	8008f7c <_scanf_float+0x60>
 80090ec:	3501      	adds	r5, #1
 80090ee:	b2ed      	uxtb	r5, r5
 80090f0:	e7d8      	b.n	80090a4 <_scanf_float+0x188>
 80090f2:	f1ba 0f01 	cmp.w	sl, #1
 80090f6:	f47f af41 	bne.w	8008f7c <_scanf_float+0x60>
 80090fa:	f04f 0a02 	mov.w	sl, #2
 80090fe:	e7d1      	b.n	80090a4 <_scanf_float+0x188>
 8009100:	b97d      	cbnz	r5, 8009122 <_scanf_float+0x206>
 8009102:	f1b9 0f00 	cmp.w	r9, #0
 8009106:	f47f af3c 	bne.w	8008f82 <_scanf_float+0x66>
 800910a:	6822      	ldr	r2, [r4, #0]
 800910c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009110:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009114:	f47f af39 	bne.w	8008f8a <_scanf_float+0x6e>
 8009118:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800911c:	6022      	str	r2, [r4, #0]
 800911e:	2501      	movs	r5, #1
 8009120:	e7c0      	b.n	80090a4 <_scanf_float+0x188>
 8009122:	2d03      	cmp	r5, #3
 8009124:	d0e2      	beq.n	80090ec <_scanf_float+0x1d0>
 8009126:	2d05      	cmp	r5, #5
 8009128:	e7de      	b.n	80090e8 <_scanf_float+0x1cc>
 800912a:	2d02      	cmp	r5, #2
 800912c:	f47f af26 	bne.w	8008f7c <_scanf_float+0x60>
 8009130:	2503      	movs	r5, #3
 8009132:	e7b7      	b.n	80090a4 <_scanf_float+0x188>
 8009134:	2d06      	cmp	r5, #6
 8009136:	f47f af21 	bne.w	8008f7c <_scanf_float+0x60>
 800913a:	2507      	movs	r5, #7
 800913c:	e7b2      	b.n	80090a4 <_scanf_float+0x188>
 800913e:	6822      	ldr	r2, [r4, #0]
 8009140:	0591      	lsls	r1, r2, #22
 8009142:	f57f af1b 	bpl.w	8008f7c <_scanf_float+0x60>
 8009146:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800914a:	6022      	str	r2, [r4, #0]
 800914c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009150:	e7a8      	b.n	80090a4 <_scanf_float+0x188>
 8009152:	6822      	ldr	r2, [r4, #0]
 8009154:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009158:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800915c:	d006      	beq.n	800916c <_scanf_float+0x250>
 800915e:	0550      	lsls	r0, r2, #21
 8009160:	f57f af0c 	bpl.w	8008f7c <_scanf_float+0x60>
 8009164:	f1b9 0f00 	cmp.w	r9, #0
 8009168:	f43f af0f 	beq.w	8008f8a <_scanf_float+0x6e>
 800916c:	0591      	lsls	r1, r2, #22
 800916e:	bf58      	it	pl
 8009170:	9901      	ldrpl	r1, [sp, #4]
 8009172:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009176:	bf58      	it	pl
 8009178:	eba9 0101 	subpl.w	r1, r9, r1
 800917c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009180:	bf58      	it	pl
 8009182:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009186:	6022      	str	r2, [r4, #0]
 8009188:	f04f 0900 	mov.w	r9, #0
 800918c:	e78a      	b.n	80090a4 <_scanf_float+0x188>
 800918e:	f04f 0a03 	mov.w	sl, #3
 8009192:	e787      	b.n	80090a4 <_scanf_float+0x188>
 8009194:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009198:	4639      	mov	r1, r7
 800919a:	4640      	mov	r0, r8
 800919c:	4798      	blx	r3
 800919e:	2800      	cmp	r0, #0
 80091a0:	f43f aedf 	beq.w	8008f62 <_scanf_float+0x46>
 80091a4:	e6ea      	b.n	8008f7c <_scanf_float+0x60>
 80091a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091ae:	463a      	mov	r2, r7
 80091b0:	4640      	mov	r0, r8
 80091b2:	4798      	blx	r3
 80091b4:	6923      	ldr	r3, [r4, #16]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	6123      	str	r3, [r4, #16]
 80091ba:	e6ec      	b.n	8008f96 <_scanf_float+0x7a>
 80091bc:	1e6b      	subs	r3, r5, #1
 80091be:	2b06      	cmp	r3, #6
 80091c0:	d825      	bhi.n	800920e <_scanf_float+0x2f2>
 80091c2:	2d02      	cmp	r5, #2
 80091c4:	d836      	bhi.n	8009234 <_scanf_float+0x318>
 80091c6:	455e      	cmp	r6, fp
 80091c8:	f67f aee8 	bls.w	8008f9c <_scanf_float+0x80>
 80091cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091d4:	463a      	mov	r2, r7
 80091d6:	4640      	mov	r0, r8
 80091d8:	4798      	blx	r3
 80091da:	6923      	ldr	r3, [r4, #16]
 80091dc:	3b01      	subs	r3, #1
 80091de:	6123      	str	r3, [r4, #16]
 80091e0:	e7f1      	b.n	80091c6 <_scanf_float+0x2aa>
 80091e2:	9802      	ldr	r0, [sp, #8]
 80091e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091e8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80091ec:	9002      	str	r0, [sp, #8]
 80091ee:	463a      	mov	r2, r7
 80091f0:	4640      	mov	r0, r8
 80091f2:	4798      	blx	r3
 80091f4:	6923      	ldr	r3, [r4, #16]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	6123      	str	r3, [r4, #16]
 80091fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091fe:	fa5f fa8a 	uxtb.w	sl, sl
 8009202:	f1ba 0f02 	cmp.w	sl, #2
 8009206:	d1ec      	bne.n	80091e2 <_scanf_float+0x2c6>
 8009208:	3d03      	subs	r5, #3
 800920a:	b2ed      	uxtb	r5, r5
 800920c:	1b76      	subs	r6, r6, r5
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	05da      	lsls	r2, r3, #23
 8009212:	d52f      	bpl.n	8009274 <_scanf_float+0x358>
 8009214:	055b      	lsls	r3, r3, #21
 8009216:	d510      	bpl.n	800923a <_scanf_float+0x31e>
 8009218:	455e      	cmp	r6, fp
 800921a:	f67f aebf 	bls.w	8008f9c <_scanf_float+0x80>
 800921e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009222:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009226:	463a      	mov	r2, r7
 8009228:	4640      	mov	r0, r8
 800922a:	4798      	blx	r3
 800922c:	6923      	ldr	r3, [r4, #16]
 800922e:	3b01      	subs	r3, #1
 8009230:	6123      	str	r3, [r4, #16]
 8009232:	e7f1      	b.n	8009218 <_scanf_float+0x2fc>
 8009234:	46aa      	mov	sl, r5
 8009236:	9602      	str	r6, [sp, #8]
 8009238:	e7df      	b.n	80091fa <_scanf_float+0x2de>
 800923a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800923e:	6923      	ldr	r3, [r4, #16]
 8009240:	2965      	cmp	r1, #101	; 0x65
 8009242:	f103 33ff 	add.w	r3, r3, #4294967295
 8009246:	f106 35ff 	add.w	r5, r6, #4294967295
 800924a:	6123      	str	r3, [r4, #16]
 800924c:	d00c      	beq.n	8009268 <_scanf_float+0x34c>
 800924e:	2945      	cmp	r1, #69	; 0x45
 8009250:	d00a      	beq.n	8009268 <_scanf_float+0x34c>
 8009252:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009256:	463a      	mov	r2, r7
 8009258:	4640      	mov	r0, r8
 800925a:	4798      	blx	r3
 800925c:	6923      	ldr	r3, [r4, #16]
 800925e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009262:	3b01      	subs	r3, #1
 8009264:	1eb5      	subs	r5, r6, #2
 8009266:	6123      	str	r3, [r4, #16]
 8009268:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800926c:	463a      	mov	r2, r7
 800926e:	4640      	mov	r0, r8
 8009270:	4798      	blx	r3
 8009272:	462e      	mov	r6, r5
 8009274:	6825      	ldr	r5, [r4, #0]
 8009276:	f015 0510 	ands.w	r5, r5, #16
 800927a:	d159      	bne.n	8009330 <_scanf_float+0x414>
 800927c:	7035      	strb	r5, [r6, #0]
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009288:	d11b      	bne.n	80092c2 <_scanf_float+0x3a6>
 800928a:	9b01      	ldr	r3, [sp, #4]
 800928c:	454b      	cmp	r3, r9
 800928e:	eba3 0209 	sub.w	r2, r3, r9
 8009292:	d123      	bne.n	80092dc <_scanf_float+0x3c0>
 8009294:	2200      	movs	r2, #0
 8009296:	4659      	mov	r1, fp
 8009298:	4640      	mov	r0, r8
 800929a:	f000 ff0b 	bl	800a0b4 <_strtod_r>
 800929e:	6822      	ldr	r2, [r4, #0]
 80092a0:	9b03      	ldr	r3, [sp, #12]
 80092a2:	f012 0f02 	tst.w	r2, #2
 80092a6:	ec57 6b10 	vmov	r6, r7, d0
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	d021      	beq.n	80092f2 <_scanf_float+0x3d6>
 80092ae:	9903      	ldr	r1, [sp, #12]
 80092b0:	1d1a      	adds	r2, r3, #4
 80092b2:	600a      	str	r2, [r1, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	e9c3 6700 	strd	r6, r7, [r3]
 80092ba:	68e3      	ldr	r3, [r4, #12]
 80092bc:	3301      	adds	r3, #1
 80092be:	60e3      	str	r3, [r4, #12]
 80092c0:	e66d      	b.n	8008f9e <_scanf_float+0x82>
 80092c2:	9b04      	ldr	r3, [sp, #16]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d0e5      	beq.n	8009294 <_scanf_float+0x378>
 80092c8:	9905      	ldr	r1, [sp, #20]
 80092ca:	230a      	movs	r3, #10
 80092cc:	462a      	mov	r2, r5
 80092ce:	3101      	adds	r1, #1
 80092d0:	4640      	mov	r0, r8
 80092d2:	f000 ff83 	bl	800a1dc <_strtol_r>
 80092d6:	9b04      	ldr	r3, [sp, #16]
 80092d8:	9e05      	ldr	r6, [sp, #20]
 80092da:	1ac2      	subs	r2, r0, r3
 80092dc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80092e0:	429e      	cmp	r6, r3
 80092e2:	bf28      	it	cs
 80092e4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80092e8:	4912      	ldr	r1, [pc, #72]	; (8009334 <_scanf_float+0x418>)
 80092ea:	4630      	mov	r0, r6
 80092ec:	f000 f82c 	bl	8009348 <siprintf>
 80092f0:	e7d0      	b.n	8009294 <_scanf_float+0x378>
 80092f2:	9903      	ldr	r1, [sp, #12]
 80092f4:	f012 0f04 	tst.w	r2, #4
 80092f8:	f103 0204 	add.w	r2, r3, #4
 80092fc:	600a      	str	r2, [r1, #0]
 80092fe:	d1d9      	bne.n	80092b4 <_scanf_float+0x398>
 8009300:	f8d3 8000 	ldr.w	r8, [r3]
 8009304:	ee10 2a10 	vmov	r2, s0
 8009308:	ee10 0a10 	vmov	r0, s0
 800930c:	463b      	mov	r3, r7
 800930e:	4639      	mov	r1, r7
 8009310:	f7f7 fc24 	bl	8000b5c <__aeabi_dcmpun>
 8009314:	b128      	cbz	r0, 8009322 <_scanf_float+0x406>
 8009316:	4808      	ldr	r0, [pc, #32]	; (8009338 <_scanf_float+0x41c>)
 8009318:	f000 f810 	bl	800933c <nanf>
 800931c:	ed88 0a00 	vstr	s0, [r8]
 8009320:	e7cb      	b.n	80092ba <_scanf_float+0x39e>
 8009322:	4630      	mov	r0, r6
 8009324:	4639      	mov	r1, r7
 8009326:	f7f7 fc77 	bl	8000c18 <__aeabi_d2f>
 800932a:	f8c8 0000 	str.w	r0, [r8]
 800932e:	e7c4      	b.n	80092ba <_scanf_float+0x39e>
 8009330:	2500      	movs	r5, #0
 8009332:	e634      	b.n	8008f9e <_scanf_float+0x82>
 8009334:	08010506 	.word	0x08010506
 8009338:	0801092b 	.word	0x0801092b

0800933c <nanf>:
 800933c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009344 <nanf+0x8>
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	7fc00000 	.word	0x7fc00000

08009348 <siprintf>:
 8009348:	b40e      	push	{r1, r2, r3}
 800934a:	b500      	push	{lr}
 800934c:	b09c      	sub	sp, #112	; 0x70
 800934e:	ab1d      	add	r3, sp, #116	; 0x74
 8009350:	9002      	str	r0, [sp, #8]
 8009352:	9006      	str	r0, [sp, #24]
 8009354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009358:	4809      	ldr	r0, [pc, #36]	; (8009380 <siprintf+0x38>)
 800935a:	9107      	str	r1, [sp, #28]
 800935c:	9104      	str	r1, [sp, #16]
 800935e:	4909      	ldr	r1, [pc, #36]	; (8009384 <siprintf+0x3c>)
 8009360:	f853 2b04 	ldr.w	r2, [r3], #4
 8009364:	9105      	str	r1, [sp, #20]
 8009366:	6800      	ldr	r0, [r0, #0]
 8009368:	9301      	str	r3, [sp, #4]
 800936a:	a902      	add	r1, sp, #8
 800936c:	f002 ffa0 	bl	800c2b0 <_svfiprintf_r>
 8009370:	9b02      	ldr	r3, [sp, #8]
 8009372:	2200      	movs	r2, #0
 8009374:	701a      	strb	r2, [r3, #0]
 8009376:	b01c      	add	sp, #112	; 0x70
 8009378:	f85d eb04 	ldr.w	lr, [sp], #4
 800937c:	b003      	add	sp, #12
 800937e:	4770      	bx	lr
 8009380:	2000001c 	.word	0x2000001c
 8009384:	ffff0208 	.word	0xffff0208

08009388 <siscanf>:
 8009388:	b40e      	push	{r1, r2, r3}
 800938a:	b510      	push	{r4, lr}
 800938c:	b09f      	sub	sp, #124	; 0x7c
 800938e:	ac21      	add	r4, sp, #132	; 0x84
 8009390:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009394:	f854 2b04 	ldr.w	r2, [r4], #4
 8009398:	9201      	str	r2, [sp, #4]
 800939a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800939e:	9004      	str	r0, [sp, #16]
 80093a0:	9008      	str	r0, [sp, #32]
 80093a2:	f7f6 ff27 	bl	80001f4 <strlen>
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <siscanf+0x50>)
 80093a8:	9005      	str	r0, [sp, #20]
 80093aa:	9009      	str	r0, [sp, #36]	; 0x24
 80093ac:	930d      	str	r3, [sp, #52]	; 0x34
 80093ae:	480b      	ldr	r0, [pc, #44]	; (80093dc <siscanf+0x54>)
 80093b0:	9a01      	ldr	r2, [sp, #4]
 80093b2:	6800      	ldr	r0, [r0, #0]
 80093b4:	9403      	str	r4, [sp, #12]
 80093b6:	2300      	movs	r3, #0
 80093b8:	9311      	str	r3, [sp, #68]	; 0x44
 80093ba:	9316      	str	r3, [sp, #88]	; 0x58
 80093bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80093c4:	a904      	add	r1, sp, #16
 80093c6:	4623      	mov	r3, r4
 80093c8:	f003 f8cc 	bl	800c564 <__ssvfiscanf_r>
 80093cc:	b01f      	add	sp, #124	; 0x7c
 80093ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093d2:	b003      	add	sp, #12
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	08009403 	.word	0x08009403
 80093dc:	2000001c 	.word	0x2000001c

080093e0 <__sread>:
 80093e0:	b510      	push	{r4, lr}
 80093e2:	460c      	mov	r4, r1
 80093e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e8:	f003 fb86 	bl	800caf8 <_read_r>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	bfab      	itete	ge
 80093f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80093f2:	89a3      	ldrhlt	r3, [r4, #12]
 80093f4:	181b      	addge	r3, r3, r0
 80093f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093fa:	bfac      	ite	ge
 80093fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80093fe:	81a3      	strhlt	r3, [r4, #12]
 8009400:	bd10      	pop	{r4, pc}

08009402 <__seofread>:
 8009402:	2000      	movs	r0, #0
 8009404:	4770      	bx	lr

08009406 <__swrite>:
 8009406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800940a:	461f      	mov	r7, r3
 800940c:	898b      	ldrh	r3, [r1, #12]
 800940e:	05db      	lsls	r3, r3, #23
 8009410:	4605      	mov	r5, r0
 8009412:	460c      	mov	r4, r1
 8009414:	4616      	mov	r6, r2
 8009416:	d505      	bpl.n	8009424 <__swrite+0x1e>
 8009418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800941c:	2302      	movs	r3, #2
 800941e:	2200      	movs	r2, #0
 8009420:	f002 f8f8 	bl	800b614 <_lseek_r>
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800942a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800942e:	81a3      	strh	r3, [r4, #12]
 8009430:	4632      	mov	r2, r6
 8009432:	463b      	mov	r3, r7
 8009434:	4628      	mov	r0, r5
 8009436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800943a:	f000 bedb 	b.w	800a1f4 <_write_r>

0800943e <__sseek>:
 800943e:	b510      	push	{r4, lr}
 8009440:	460c      	mov	r4, r1
 8009442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009446:	f002 f8e5 	bl	800b614 <_lseek_r>
 800944a:	1c43      	adds	r3, r0, #1
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	bf15      	itete	ne
 8009450:	6560      	strne	r0, [r4, #84]	; 0x54
 8009452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800945a:	81a3      	strheq	r3, [r4, #12]
 800945c:	bf18      	it	ne
 800945e:	81a3      	strhne	r3, [r4, #12]
 8009460:	bd10      	pop	{r4, pc}

08009462 <__sclose>:
 8009462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009466:	f000 bed7 	b.w	800a218 <_close_r>

0800946a <sulp>:
 800946a:	b570      	push	{r4, r5, r6, lr}
 800946c:	4604      	mov	r4, r0
 800946e:	460d      	mov	r5, r1
 8009470:	ec45 4b10 	vmov	d0, r4, r5
 8009474:	4616      	mov	r6, r2
 8009476:	f002 fc79 	bl	800bd6c <__ulp>
 800947a:	ec51 0b10 	vmov	r0, r1, d0
 800947e:	b17e      	cbz	r6, 80094a0 <sulp+0x36>
 8009480:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009484:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009488:	2b00      	cmp	r3, #0
 800948a:	dd09      	ble.n	80094a0 <sulp+0x36>
 800948c:	051b      	lsls	r3, r3, #20
 800948e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009492:	2400      	movs	r4, #0
 8009494:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009498:	4622      	mov	r2, r4
 800949a:	462b      	mov	r3, r5
 800949c:	f7f7 f8c4 	bl	8000628 <__aeabi_dmul>
 80094a0:	bd70      	pop	{r4, r5, r6, pc}
 80094a2:	0000      	movs	r0, r0
 80094a4:	0000      	movs	r0, r0
	...

080094a8 <_strtod_l>:
 80094a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ac:	ed2d 8b02 	vpush	{d8}
 80094b0:	b09d      	sub	sp, #116	; 0x74
 80094b2:	461f      	mov	r7, r3
 80094b4:	2300      	movs	r3, #0
 80094b6:	9318      	str	r3, [sp, #96]	; 0x60
 80094b8:	4ba2      	ldr	r3, [pc, #648]	; (8009744 <_strtod_l+0x29c>)
 80094ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	9305      	str	r3, [sp, #20]
 80094c0:	4604      	mov	r4, r0
 80094c2:	4618      	mov	r0, r3
 80094c4:	4688      	mov	r8, r1
 80094c6:	f7f6 fe95 	bl	80001f4 <strlen>
 80094ca:	f04f 0a00 	mov.w	sl, #0
 80094ce:	4605      	mov	r5, r0
 80094d0:	f04f 0b00 	mov.w	fp, #0
 80094d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80094d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094da:	781a      	ldrb	r2, [r3, #0]
 80094dc:	2a2b      	cmp	r2, #43	; 0x2b
 80094de:	d04e      	beq.n	800957e <_strtod_l+0xd6>
 80094e0:	d83b      	bhi.n	800955a <_strtod_l+0xb2>
 80094e2:	2a0d      	cmp	r2, #13
 80094e4:	d834      	bhi.n	8009550 <_strtod_l+0xa8>
 80094e6:	2a08      	cmp	r2, #8
 80094e8:	d834      	bhi.n	8009554 <_strtod_l+0xac>
 80094ea:	2a00      	cmp	r2, #0
 80094ec:	d03e      	beq.n	800956c <_strtod_l+0xc4>
 80094ee:	2300      	movs	r3, #0
 80094f0:	930a      	str	r3, [sp, #40]	; 0x28
 80094f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80094f4:	7833      	ldrb	r3, [r6, #0]
 80094f6:	2b30      	cmp	r3, #48	; 0x30
 80094f8:	f040 80b0 	bne.w	800965c <_strtod_l+0x1b4>
 80094fc:	7873      	ldrb	r3, [r6, #1]
 80094fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009502:	2b58      	cmp	r3, #88	; 0x58
 8009504:	d168      	bne.n	80095d8 <_strtod_l+0x130>
 8009506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	ab18      	add	r3, sp, #96	; 0x60
 800950c:	9702      	str	r7, [sp, #8]
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	4a8d      	ldr	r2, [pc, #564]	; (8009748 <_strtod_l+0x2a0>)
 8009512:	ab19      	add	r3, sp, #100	; 0x64
 8009514:	a917      	add	r1, sp, #92	; 0x5c
 8009516:	4620      	mov	r0, r4
 8009518:	f001 fd70 	bl	800affc <__gethex>
 800951c:	f010 0707 	ands.w	r7, r0, #7
 8009520:	4605      	mov	r5, r0
 8009522:	d005      	beq.n	8009530 <_strtod_l+0x88>
 8009524:	2f06      	cmp	r7, #6
 8009526:	d12c      	bne.n	8009582 <_strtod_l+0xda>
 8009528:	3601      	adds	r6, #1
 800952a:	2300      	movs	r3, #0
 800952c:	9617      	str	r6, [sp, #92]	; 0x5c
 800952e:	930a      	str	r3, [sp, #40]	; 0x28
 8009530:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009532:	2b00      	cmp	r3, #0
 8009534:	f040 8590 	bne.w	800a058 <_strtod_l+0xbb0>
 8009538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800953a:	b1eb      	cbz	r3, 8009578 <_strtod_l+0xd0>
 800953c:	4652      	mov	r2, sl
 800953e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009542:	ec43 2b10 	vmov	d0, r2, r3
 8009546:	b01d      	add	sp, #116	; 0x74
 8009548:	ecbd 8b02 	vpop	{d8}
 800954c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009550:	2a20      	cmp	r2, #32
 8009552:	d1cc      	bne.n	80094ee <_strtod_l+0x46>
 8009554:	3301      	adds	r3, #1
 8009556:	9317      	str	r3, [sp, #92]	; 0x5c
 8009558:	e7be      	b.n	80094d8 <_strtod_l+0x30>
 800955a:	2a2d      	cmp	r2, #45	; 0x2d
 800955c:	d1c7      	bne.n	80094ee <_strtod_l+0x46>
 800955e:	2201      	movs	r2, #1
 8009560:	920a      	str	r2, [sp, #40]	; 0x28
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	9217      	str	r2, [sp, #92]	; 0x5c
 8009566:	785b      	ldrb	r3, [r3, #1]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1c2      	bne.n	80094f2 <_strtod_l+0x4a>
 800956c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800956e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009572:	2b00      	cmp	r3, #0
 8009574:	f040 856e 	bne.w	800a054 <_strtod_l+0xbac>
 8009578:	4652      	mov	r2, sl
 800957a:	465b      	mov	r3, fp
 800957c:	e7e1      	b.n	8009542 <_strtod_l+0x9a>
 800957e:	2200      	movs	r2, #0
 8009580:	e7ee      	b.n	8009560 <_strtod_l+0xb8>
 8009582:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009584:	b13a      	cbz	r2, 8009596 <_strtod_l+0xee>
 8009586:	2135      	movs	r1, #53	; 0x35
 8009588:	a81a      	add	r0, sp, #104	; 0x68
 800958a:	f002 fcfa 	bl	800bf82 <__copybits>
 800958e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009590:	4620      	mov	r0, r4
 8009592:	f002 f8b9 	bl	800b708 <_Bfree>
 8009596:	3f01      	subs	r7, #1
 8009598:	2f04      	cmp	r7, #4
 800959a:	d806      	bhi.n	80095aa <_strtod_l+0x102>
 800959c:	e8df f007 	tbb	[pc, r7]
 80095a0:	1714030a 	.word	0x1714030a
 80095a4:	0a          	.byte	0x0a
 80095a5:	00          	.byte	0x00
 80095a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80095aa:	0728      	lsls	r0, r5, #28
 80095ac:	d5c0      	bpl.n	8009530 <_strtod_l+0x88>
 80095ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80095b2:	e7bd      	b.n	8009530 <_strtod_l+0x88>
 80095b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80095b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80095ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80095be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80095c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80095c6:	e7f0      	b.n	80095aa <_strtod_l+0x102>
 80095c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800974c <_strtod_l+0x2a4>
 80095cc:	e7ed      	b.n	80095aa <_strtod_l+0x102>
 80095ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80095d2:	f04f 3aff 	mov.w	sl, #4294967295
 80095d6:	e7e8      	b.n	80095aa <_strtod_l+0x102>
 80095d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80095de:	785b      	ldrb	r3, [r3, #1]
 80095e0:	2b30      	cmp	r3, #48	; 0x30
 80095e2:	d0f9      	beq.n	80095d8 <_strtod_l+0x130>
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0a3      	beq.n	8009530 <_strtod_l+0x88>
 80095e8:	2301      	movs	r3, #1
 80095ea:	f04f 0900 	mov.w	r9, #0
 80095ee:	9304      	str	r3, [sp, #16]
 80095f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095f2:	9308      	str	r3, [sp, #32]
 80095f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80095f8:	464f      	mov	r7, r9
 80095fa:	220a      	movs	r2, #10
 80095fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80095fe:	7806      	ldrb	r6, [r0, #0]
 8009600:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009604:	b2d9      	uxtb	r1, r3
 8009606:	2909      	cmp	r1, #9
 8009608:	d92a      	bls.n	8009660 <_strtod_l+0x1b8>
 800960a:	9905      	ldr	r1, [sp, #20]
 800960c:	462a      	mov	r2, r5
 800960e:	f003 fad7 	bl	800cbc0 <strncmp>
 8009612:	b398      	cbz	r0, 800967c <_strtod_l+0x1d4>
 8009614:	2000      	movs	r0, #0
 8009616:	4632      	mov	r2, r6
 8009618:	463d      	mov	r5, r7
 800961a:	9005      	str	r0, [sp, #20]
 800961c:	4603      	mov	r3, r0
 800961e:	2a65      	cmp	r2, #101	; 0x65
 8009620:	d001      	beq.n	8009626 <_strtod_l+0x17e>
 8009622:	2a45      	cmp	r2, #69	; 0x45
 8009624:	d118      	bne.n	8009658 <_strtod_l+0x1b0>
 8009626:	b91d      	cbnz	r5, 8009630 <_strtod_l+0x188>
 8009628:	9a04      	ldr	r2, [sp, #16]
 800962a:	4302      	orrs	r2, r0
 800962c:	d09e      	beq.n	800956c <_strtod_l+0xc4>
 800962e:	2500      	movs	r5, #0
 8009630:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009634:	f108 0201 	add.w	r2, r8, #1
 8009638:	9217      	str	r2, [sp, #92]	; 0x5c
 800963a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800963e:	2a2b      	cmp	r2, #43	; 0x2b
 8009640:	d075      	beq.n	800972e <_strtod_l+0x286>
 8009642:	2a2d      	cmp	r2, #45	; 0x2d
 8009644:	d07b      	beq.n	800973e <_strtod_l+0x296>
 8009646:	f04f 0c00 	mov.w	ip, #0
 800964a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800964e:	2909      	cmp	r1, #9
 8009650:	f240 8082 	bls.w	8009758 <_strtod_l+0x2b0>
 8009654:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009658:	2600      	movs	r6, #0
 800965a:	e09d      	b.n	8009798 <_strtod_l+0x2f0>
 800965c:	2300      	movs	r3, #0
 800965e:	e7c4      	b.n	80095ea <_strtod_l+0x142>
 8009660:	2f08      	cmp	r7, #8
 8009662:	bfd8      	it	le
 8009664:	9907      	ldrle	r1, [sp, #28]
 8009666:	f100 0001 	add.w	r0, r0, #1
 800966a:	bfda      	itte	le
 800966c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009670:	9307      	strle	r3, [sp, #28]
 8009672:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009676:	3701      	adds	r7, #1
 8009678:	9017      	str	r0, [sp, #92]	; 0x5c
 800967a:	e7bf      	b.n	80095fc <_strtod_l+0x154>
 800967c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800967e:	195a      	adds	r2, r3, r5
 8009680:	9217      	str	r2, [sp, #92]	; 0x5c
 8009682:	5d5a      	ldrb	r2, [r3, r5]
 8009684:	2f00      	cmp	r7, #0
 8009686:	d037      	beq.n	80096f8 <_strtod_l+0x250>
 8009688:	9005      	str	r0, [sp, #20]
 800968a:	463d      	mov	r5, r7
 800968c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009690:	2b09      	cmp	r3, #9
 8009692:	d912      	bls.n	80096ba <_strtod_l+0x212>
 8009694:	2301      	movs	r3, #1
 8009696:	e7c2      	b.n	800961e <_strtod_l+0x176>
 8009698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	9217      	str	r2, [sp, #92]	; 0x5c
 800969e:	785a      	ldrb	r2, [r3, #1]
 80096a0:	3001      	adds	r0, #1
 80096a2:	2a30      	cmp	r2, #48	; 0x30
 80096a4:	d0f8      	beq.n	8009698 <_strtod_l+0x1f0>
 80096a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80096aa:	2b08      	cmp	r3, #8
 80096ac:	f200 84d9 	bhi.w	800a062 <_strtod_l+0xbba>
 80096b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096b2:	9005      	str	r0, [sp, #20]
 80096b4:	2000      	movs	r0, #0
 80096b6:	9308      	str	r3, [sp, #32]
 80096b8:	4605      	mov	r5, r0
 80096ba:	3a30      	subs	r2, #48	; 0x30
 80096bc:	f100 0301 	add.w	r3, r0, #1
 80096c0:	d014      	beq.n	80096ec <_strtod_l+0x244>
 80096c2:	9905      	ldr	r1, [sp, #20]
 80096c4:	4419      	add	r1, r3
 80096c6:	9105      	str	r1, [sp, #20]
 80096c8:	462b      	mov	r3, r5
 80096ca:	eb00 0e05 	add.w	lr, r0, r5
 80096ce:	210a      	movs	r1, #10
 80096d0:	4573      	cmp	r3, lr
 80096d2:	d113      	bne.n	80096fc <_strtod_l+0x254>
 80096d4:	182b      	adds	r3, r5, r0
 80096d6:	2b08      	cmp	r3, #8
 80096d8:	f105 0501 	add.w	r5, r5, #1
 80096dc:	4405      	add	r5, r0
 80096de:	dc1c      	bgt.n	800971a <_strtod_l+0x272>
 80096e0:	9907      	ldr	r1, [sp, #28]
 80096e2:	230a      	movs	r3, #10
 80096e4:	fb03 2301 	mla	r3, r3, r1, r2
 80096e8:	9307      	str	r3, [sp, #28]
 80096ea:	2300      	movs	r3, #0
 80096ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80096ee:	1c51      	adds	r1, r2, #1
 80096f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80096f2:	7852      	ldrb	r2, [r2, #1]
 80096f4:	4618      	mov	r0, r3
 80096f6:	e7c9      	b.n	800968c <_strtod_l+0x1e4>
 80096f8:	4638      	mov	r0, r7
 80096fa:	e7d2      	b.n	80096a2 <_strtod_l+0x1fa>
 80096fc:	2b08      	cmp	r3, #8
 80096fe:	dc04      	bgt.n	800970a <_strtod_l+0x262>
 8009700:	9e07      	ldr	r6, [sp, #28]
 8009702:	434e      	muls	r6, r1
 8009704:	9607      	str	r6, [sp, #28]
 8009706:	3301      	adds	r3, #1
 8009708:	e7e2      	b.n	80096d0 <_strtod_l+0x228>
 800970a:	f103 0c01 	add.w	ip, r3, #1
 800970e:	f1bc 0f10 	cmp.w	ip, #16
 8009712:	bfd8      	it	le
 8009714:	fb01 f909 	mulle.w	r9, r1, r9
 8009718:	e7f5      	b.n	8009706 <_strtod_l+0x25e>
 800971a:	2d10      	cmp	r5, #16
 800971c:	bfdc      	itt	le
 800971e:	230a      	movle	r3, #10
 8009720:	fb03 2909 	mlale	r9, r3, r9, r2
 8009724:	e7e1      	b.n	80096ea <_strtod_l+0x242>
 8009726:	2300      	movs	r3, #0
 8009728:	9305      	str	r3, [sp, #20]
 800972a:	2301      	movs	r3, #1
 800972c:	e77c      	b.n	8009628 <_strtod_l+0x180>
 800972e:	f04f 0c00 	mov.w	ip, #0
 8009732:	f108 0202 	add.w	r2, r8, #2
 8009736:	9217      	str	r2, [sp, #92]	; 0x5c
 8009738:	f898 2002 	ldrb.w	r2, [r8, #2]
 800973c:	e785      	b.n	800964a <_strtod_l+0x1a2>
 800973e:	f04f 0c01 	mov.w	ip, #1
 8009742:	e7f6      	b.n	8009732 <_strtod_l+0x28a>
 8009744:	08010758 	.word	0x08010758
 8009748:	0801050c 	.word	0x0801050c
 800974c:	7ff00000 	.word	0x7ff00000
 8009750:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009752:	1c51      	adds	r1, r2, #1
 8009754:	9117      	str	r1, [sp, #92]	; 0x5c
 8009756:	7852      	ldrb	r2, [r2, #1]
 8009758:	2a30      	cmp	r2, #48	; 0x30
 800975a:	d0f9      	beq.n	8009750 <_strtod_l+0x2a8>
 800975c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009760:	2908      	cmp	r1, #8
 8009762:	f63f af79 	bhi.w	8009658 <_strtod_l+0x1b0>
 8009766:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800976a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800976c:	9206      	str	r2, [sp, #24]
 800976e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009770:	1c51      	adds	r1, r2, #1
 8009772:	9117      	str	r1, [sp, #92]	; 0x5c
 8009774:	7852      	ldrb	r2, [r2, #1]
 8009776:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800977a:	2e09      	cmp	r6, #9
 800977c:	d937      	bls.n	80097ee <_strtod_l+0x346>
 800977e:	9e06      	ldr	r6, [sp, #24]
 8009780:	1b89      	subs	r1, r1, r6
 8009782:	2908      	cmp	r1, #8
 8009784:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009788:	dc02      	bgt.n	8009790 <_strtod_l+0x2e8>
 800978a:	4576      	cmp	r6, lr
 800978c:	bfa8      	it	ge
 800978e:	4676      	movge	r6, lr
 8009790:	f1bc 0f00 	cmp.w	ip, #0
 8009794:	d000      	beq.n	8009798 <_strtod_l+0x2f0>
 8009796:	4276      	negs	r6, r6
 8009798:	2d00      	cmp	r5, #0
 800979a:	d14d      	bne.n	8009838 <_strtod_l+0x390>
 800979c:	9904      	ldr	r1, [sp, #16]
 800979e:	4301      	orrs	r1, r0
 80097a0:	f47f aec6 	bne.w	8009530 <_strtod_l+0x88>
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f47f aee1 	bne.w	800956c <_strtod_l+0xc4>
 80097aa:	2a69      	cmp	r2, #105	; 0x69
 80097ac:	d027      	beq.n	80097fe <_strtod_l+0x356>
 80097ae:	dc24      	bgt.n	80097fa <_strtod_l+0x352>
 80097b0:	2a49      	cmp	r2, #73	; 0x49
 80097b2:	d024      	beq.n	80097fe <_strtod_l+0x356>
 80097b4:	2a4e      	cmp	r2, #78	; 0x4e
 80097b6:	f47f aed9 	bne.w	800956c <_strtod_l+0xc4>
 80097ba:	499f      	ldr	r1, [pc, #636]	; (8009a38 <_strtod_l+0x590>)
 80097bc:	a817      	add	r0, sp, #92	; 0x5c
 80097be:	f001 fe75 	bl	800b4ac <__match>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	f43f aed2 	beq.w	800956c <_strtod_l+0xc4>
 80097c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	2b28      	cmp	r3, #40	; 0x28
 80097ce:	d12d      	bne.n	800982c <_strtod_l+0x384>
 80097d0:	499a      	ldr	r1, [pc, #616]	; (8009a3c <_strtod_l+0x594>)
 80097d2:	aa1a      	add	r2, sp, #104	; 0x68
 80097d4:	a817      	add	r0, sp, #92	; 0x5c
 80097d6:	f001 fe7d 	bl	800b4d4 <__hexnan>
 80097da:	2805      	cmp	r0, #5
 80097dc:	d126      	bne.n	800982c <_strtod_l+0x384>
 80097de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80097e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80097e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80097ec:	e6a0      	b.n	8009530 <_strtod_l+0x88>
 80097ee:	210a      	movs	r1, #10
 80097f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80097f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80097f8:	e7b9      	b.n	800976e <_strtod_l+0x2c6>
 80097fa:	2a6e      	cmp	r2, #110	; 0x6e
 80097fc:	e7db      	b.n	80097b6 <_strtod_l+0x30e>
 80097fe:	4990      	ldr	r1, [pc, #576]	; (8009a40 <_strtod_l+0x598>)
 8009800:	a817      	add	r0, sp, #92	; 0x5c
 8009802:	f001 fe53 	bl	800b4ac <__match>
 8009806:	2800      	cmp	r0, #0
 8009808:	f43f aeb0 	beq.w	800956c <_strtod_l+0xc4>
 800980c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800980e:	498d      	ldr	r1, [pc, #564]	; (8009a44 <_strtod_l+0x59c>)
 8009810:	3b01      	subs	r3, #1
 8009812:	a817      	add	r0, sp, #92	; 0x5c
 8009814:	9317      	str	r3, [sp, #92]	; 0x5c
 8009816:	f001 fe49 	bl	800b4ac <__match>
 800981a:	b910      	cbnz	r0, 8009822 <_strtod_l+0x37a>
 800981c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800981e:	3301      	adds	r3, #1
 8009820:	9317      	str	r3, [sp, #92]	; 0x5c
 8009822:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009a54 <_strtod_l+0x5ac>
 8009826:	f04f 0a00 	mov.w	sl, #0
 800982a:	e681      	b.n	8009530 <_strtod_l+0x88>
 800982c:	4886      	ldr	r0, [pc, #536]	; (8009a48 <_strtod_l+0x5a0>)
 800982e:	f003 f977 	bl	800cb20 <nan>
 8009832:	ec5b ab10 	vmov	sl, fp, d0
 8009836:	e67b      	b.n	8009530 <_strtod_l+0x88>
 8009838:	9b05      	ldr	r3, [sp, #20]
 800983a:	9807      	ldr	r0, [sp, #28]
 800983c:	1af3      	subs	r3, r6, r3
 800983e:	2f00      	cmp	r7, #0
 8009840:	bf08      	it	eq
 8009842:	462f      	moveq	r7, r5
 8009844:	2d10      	cmp	r5, #16
 8009846:	9306      	str	r3, [sp, #24]
 8009848:	46a8      	mov	r8, r5
 800984a:	bfa8      	it	ge
 800984c:	f04f 0810 	movge.w	r8, #16
 8009850:	f7f6 fe70 	bl	8000534 <__aeabi_ui2d>
 8009854:	2d09      	cmp	r5, #9
 8009856:	4682      	mov	sl, r0
 8009858:	468b      	mov	fp, r1
 800985a:	dd13      	ble.n	8009884 <_strtod_l+0x3dc>
 800985c:	4b7b      	ldr	r3, [pc, #492]	; (8009a4c <_strtod_l+0x5a4>)
 800985e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009862:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009866:	f7f6 fedf 	bl	8000628 <__aeabi_dmul>
 800986a:	4682      	mov	sl, r0
 800986c:	4648      	mov	r0, r9
 800986e:	468b      	mov	fp, r1
 8009870:	f7f6 fe60 	bl	8000534 <__aeabi_ui2d>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4650      	mov	r0, sl
 800987a:	4659      	mov	r1, fp
 800987c:	f7f6 fd1e 	bl	80002bc <__adddf3>
 8009880:	4682      	mov	sl, r0
 8009882:	468b      	mov	fp, r1
 8009884:	2d0f      	cmp	r5, #15
 8009886:	dc38      	bgt.n	80098fa <_strtod_l+0x452>
 8009888:	9b06      	ldr	r3, [sp, #24]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f43f ae50 	beq.w	8009530 <_strtod_l+0x88>
 8009890:	dd24      	ble.n	80098dc <_strtod_l+0x434>
 8009892:	2b16      	cmp	r3, #22
 8009894:	dc0b      	bgt.n	80098ae <_strtod_l+0x406>
 8009896:	496d      	ldr	r1, [pc, #436]	; (8009a4c <_strtod_l+0x5a4>)
 8009898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800989c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098a0:	4652      	mov	r2, sl
 80098a2:	465b      	mov	r3, fp
 80098a4:	f7f6 fec0 	bl	8000628 <__aeabi_dmul>
 80098a8:	4682      	mov	sl, r0
 80098aa:	468b      	mov	fp, r1
 80098ac:	e640      	b.n	8009530 <_strtod_l+0x88>
 80098ae:	9a06      	ldr	r2, [sp, #24]
 80098b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80098b4:	4293      	cmp	r3, r2
 80098b6:	db20      	blt.n	80098fa <_strtod_l+0x452>
 80098b8:	4c64      	ldr	r4, [pc, #400]	; (8009a4c <_strtod_l+0x5a4>)
 80098ba:	f1c5 050f 	rsb	r5, r5, #15
 80098be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80098c2:	4652      	mov	r2, sl
 80098c4:	465b      	mov	r3, fp
 80098c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ca:	f7f6 fead 	bl	8000628 <__aeabi_dmul>
 80098ce:	9b06      	ldr	r3, [sp, #24]
 80098d0:	1b5d      	subs	r5, r3, r5
 80098d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80098d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80098da:	e7e3      	b.n	80098a4 <_strtod_l+0x3fc>
 80098dc:	9b06      	ldr	r3, [sp, #24]
 80098de:	3316      	adds	r3, #22
 80098e0:	db0b      	blt.n	80098fa <_strtod_l+0x452>
 80098e2:	9b05      	ldr	r3, [sp, #20]
 80098e4:	1b9e      	subs	r6, r3, r6
 80098e6:	4b59      	ldr	r3, [pc, #356]	; (8009a4c <_strtod_l+0x5a4>)
 80098e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80098ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098f0:	4650      	mov	r0, sl
 80098f2:	4659      	mov	r1, fp
 80098f4:	f7f6 ffc2 	bl	800087c <__aeabi_ddiv>
 80098f8:	e7d6      	b.n	80098a8 <_strtod_l+0x400>
 80098fa:	9b06      	ldr	r3, [sp, #24]
 80098fc:	eba5 0808 	sub.w	r8, r5, r8
 8009900:	4498      	add	r8, r3
 8009902:	f1b8 0f00 	cmp.w	r8, #0
 8009906:	dd74      	ble.n	80099f2 <_strtod_l+0x54a>
 8009908:	f018 030f 	ands.w	r3, r8, #15
 800990c:	d00a      	beq.n	8009924 <_strtod_l+0x47c>
 800990e:	494f      	ldr	r1, [pc, #316]	; (8009a4c <_strtod_l+0x5a4>)
 8009910:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009914:	4652      	mov	r2, sl
 8009916:	465b      	mov	r3, fp
 8009918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800991c:	f7f6 fe84 	bl	8000628 <__aeabi_dmul>
 8009920:	4682      	mov	sl, r0
 8009922:	468b      	mov	fp, r1
 8009924:	f038 080f 	bics.w	r8, r8, #15
 8009928:	d04f      	beq.n	80099ca <_strtod_l+0x522>
 800992a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800992e:	dd22      	ble.n	8009976 <_strtod_l+0x4ce>
 8009930:	2500      	movs	r5, #0
 8009932:	462e      	mov	r6, r5
 8009934:	9507      	str	r5, [sp, #28]
 8009936:	9505      	str	r5, [sp, #20]
 8009938:	2322      	movs	r3, #34	; 0x22
 800993a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009a54 <_strtod_l+0x5ac>
 800993e:	6023      	str	r3, [r4, #0]
 8009940:	f04f 0a00 	mov.w	sl, #0
 8009944:	9b07      	ldr	r3, [sp, #28]
 8009946:	2b00      	cmp	r3, #0
 8009948:	f43f adf2 	beq.w	8009530 <_strtod_l+0x88>
 800994c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800994e:	4620      	mov	r0, r4
 8009950:	f001 feda 	bl	800b708 <_Bfree>
 8009954:	9905      	ldr	r1, [sp, #20]
 8009956:	4620      	mov	r0, r4
 8009958:	f001 fed6 	bl	800b708 <_Bfree>
 800995c:	4631      	mov	r1, r6
 800995e:	4620      	mov	r0, r4
 8009960:	f001 fed2 	bl	800b708 <_Bfree>
 8009964:	9907      	ldr	r1, [sp, #28]
 8009966:	4620      	mov	r0, r4
 8009968:	f001 fece 	bl	800b708 <_Bfree>
 800996c:	4629      	mov	r1, r5
 800996e:	4620      	mov	r0, r4
 8009970:	f001 feca 	bl	800b708 <_Bfree>
 8009974:	e5dc      	b.n	8009530 <_strtod_l+0x88>
 8009976:	4b36      	ldr	r3, [pc, #216]	; (8009a50 <_strtod_l+0x5a8>)
 8009978:	9304      	str	r3, [sp, #16]
 800997a:	2300      	movs	r3, #0
 800997c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009980:	4650      	mov	r0, sl
 8009982:	4659      	mov	r1, fp
 8009984:	4699      	mov	r9, r3
 8009986:	f1b8 0f01 	cmp.w	r8, #1
 800998a:	dc21      	bgt.n	80099d0 <_strtod_l+0x528>
 800998c:	b10b      	cbz	r3, 8009992 <_strtod_l+0x4ea>
 800998e:	4682      	mov	sl, r0
 8009990:	468b      	mov	fp, r1
 8009992:	4b2f      	ldr	r3, [pc, #188]	; (8009a50 <_strtod_l+0x5a8>)
 8009994:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009998:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800999c:	4652      	mov	r2, sl
 800999e:	465b      	mov	r3, fp
 80099a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80099a4:	f7f6 fe40 	bl	8000628 <__aeabi_dmul>
 80099a8:	4b2a      	ldr	r3, [pc, #168]	; (8009a54 <_strtod_l+0x5ac>)
 80099aa:	460a      	mov	r2, r1
 80099ac:	400b      	ands	r3, r1
 80099ae:	492a      	ldr	r1, [pc, #168]	; (8009a58 <_strtod_l+0x5b0>)
 80099b0:	428b      	cmp	r3, r1
 80099b2:	4682      	mov	sl, r0
 80099b4:	d8bc      	bhi.n	8009930 <_strtod_l+0x488>
 80099b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80099ba:	428b      	cmp	r3, r1
 80099bc:	bf86      	itte	hi
 80099be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009a5c <_strtod_l+0x5b4>
 80099c2:	f04f 3aff 	movhi.w	sl, #4294967295
 80099c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80099ca:	2300      	movs	r3, #0
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	e084      	b.n	8009ada <_strtod_l+0x632>
 80099d0:	f018 0f01 	tst.w	r8, #1
 80099d4:	d005      	beq.n	80099e2 <_strtod_l+0x53a>
 80099d6:	9b04      	ldr	r3, [sp, #16]
 80099d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099dc:	f7f6 fe24 	bl	8000628 <__aeabi_dmul>
 80099e0:	2301      	movs	r3, #1
 80099e2:	9a04      	ldr	r2, [sp, #16]
 80099e4:	3208      	adds	r2, #8
 80099e6:	f109 0901 	add.w	r9, r9, #1
 80099ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80099ee:	9204      	str	r2, [sp, #16]
 80099f0:	e7c9      	b.n	8009986 <_strtod_l+0x4de>
 80099f2:	d0ea      	beq.n	80099ca <_strtod_l+0x522>
 80099f4:	f1c8 0800 	rsb	r8, r8, #0
 80099f8:	f018 020f 	ands.w	r2, r8, #15
 80099fc:	d00a      	beq.n	8009a14 <_strtod_l+0x56c>
 80099fe:	4b13      	ldr	r3, [pc, #76]	; (8009a4c <_strtod_l+0x5a4>)
 8009a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a04:	4650      	mov	r0, sl
 8009a06:	4659      	mov	r1, fp
 8009a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0c:	f7f6 ff36 	bl	800087c <__aeabi_ddiv>
 8009a10:	4682      	mov	sl, r0
 8009a12:	468b      	mov	fp, r1
 8009a14:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009a18:	d0d7      	beq.n	80099ca <_strtod_l+0x522>
 8009a1a:	f1b8 0f1f 	cmp.w	r8, #31
 8009a1e:	dd1f      	ble.n	8009a60 <_strtod_l+0x5b8>
 8009a20:	2500      	movs	r5, #0
 8009a22:	462e      	mov	r6, r5
 8009a24:	9507      	str	r5, [sp, #28]
 8009a26:	9505      	str	r5, [sp, #20]
 8009a28:	2322      	movs	r3, #34	; 0x22
 8009a2a:	f04f 0a00 	mov.w	sl, #0
 8009a2e:	f04f 0b00 	mov.w	fp, #0
 8009a32:	6023      	str	r3, [r4, #0]
 8009a34:	e786      	b.n	8009944 <_strtod_l+0x49c>
 8009a36:	bf00      	nop
 8009a38:	080104e1 	.word	0x080104e1
 8009a3c:	08010520 	.word	0x08010520
 8009a40:	080104d9 	.word	0x080104d9
 8009a44:	08010664 	.word	0x08010664
 8009a48:	0801092b 	.word	0x0801092b
 8009a4c:	080107f0 	.word	0x080107f0
 8009a50:	080107c8 	.word	0x080107c8
 8009a54:	7ff00000 	.word	0x7ff00000
 8009a58:	7ca00000 	.word	0x7ca00000
 8009a5c:	7fefffff 	.word	0x7fefffff
 8009a60:	f018 0310 	ands.w	r3, r8, #16
 8009a64:	bf18      	it	ne
 8009a66:	236a      	movne	r3, #106	; 0x6a
 8009a68:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009e18 <_strtod_l+0x970>
 8009a6c:	9304      	str	r3, [sp, #16]
 8009a6e:	4650      	mov	r0, sl
 8009a70:	4659      	mov	r1, fp
 8009a72:	2300      	movs	r3, #0
 8009a74:	f018 0f01 	tst.w	r8, #1
 8009a78:	d004      	beq.n	8009a84 <_strtod_l+0x5dc>
 8009a7a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009a7e:	f7f6 fdd3 	bl	8000628 <__aeabi_dmul>
 8009a82:	2301      	movs	r3, #1
 8009a84:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009a88:	f109 0908 	add.w	r9, r9, #8
 8009a8c:	d1f2      	bne.n	8009a74 <_strtod_l+0x5cc>
 8009a8e:	b10b      	cbz	r3, 8009a94 <_strtod_l+0x5ec>
 8009a90:	4682      	mov	sl, r0
 8009a92:	468b      	mov	fp, r1
 8009a94:	9b04      	ldr	r3, [sp, #16]
 8009a96:	b1c3      	cbz	r3, 8009aca <_strtod_l+0x622>
 8009a98:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009a9c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	4659      	mov	r1, fp
 8009aa4:	dd11      	ble.n	8009aca <_strtod_l+0x622>
 8009aa6:	2b1f      	cmp	r3, #31
 8009aa8:	f340 8124 	ble.w	8009cf4 <_strtod_l+0x84c>
 8009aac:	2b34      	cmp	r3, #52	; 0x34
 8009aae:	bfde      	ittt	le
 8009ab0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009ab4:	f04f 33ff 	movle.w	r3, #4294967295
 8009ab8:	fa03 f202 	lslle.w	r2, r3, r2
 8009abc:	f04f 0a00 	mov.w	sl, #0
 8009ac0:	bfcc      	ite	gt
 8009ac2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009ac6:	ea02 0b01 	andle.w	fp, r2, r1
 8009aca:	2200      	movs	r2, #0
 8009acc:	2300      	movs	r3, #0
 8009ace:	4650      	mov	r0, sl
 8009ad0:	4659      	mov	r1, fp
 8009ad2:	f7f7 f811 	bl	8000af8 <__aeabi_dcmpeq>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d1a2      	bne.n	8009a20 <_strtod_l+0x578>
 8009ada:	9b07      	ldr	r3, [sp, #28]
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	9908      	ldr	r1, [sp, #32]
 8009ae0:	462b      	mov	r3, r5
 8009ae2:	463a      	mov	r2, r7
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f001 fe77 	bl	800b7d8 <__s2b>
 8009aea:	9007      	str	r0, [sp, #28]
 8009aec:	2800      	cmp	r0, #0
 8009aee:	f43f af1f 	beq.w	8009930 <_strtod_l+0x488>
 8009af2:	9b05      	ldr	r3, [sp, #20]
 8009af4:	1b9e      	subs	r6, r3, r6
 8009af6:	9b06      	ldr	r3, [sp, #24]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	bfb4      	ite	lt
 8009afc:	4633      	movlt	r3, r6
 8009afe:	2300      	movge	r3, #0
 8009b00:	930c      	str	r3, [sp, #48]	; 0x30
 8009b02:	9b06      	ldr	r3, [sp, #24]
 8009b04:	2500      	movs	r5, #0
 8009b06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009b0a:	9312      	str	r3, [sp, #72]	; 0x48
 8009b0c:	462e      	mov	r6, r5
 8009b0e:	9b07      	ldr	r3, [sp, #28]
 8009b10:	4620      	mov	r0, r4
 8009b12:	6859      	ldr	r1, [r3, #4]
 8009b14:	f001 fdb8 	bl	800b688 <_Balloc>
 8009b18:	9005      	str	r0, [sp, #20]
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	f43f af0c 	beq.w	8009938 <_strtod_l+0x490>
 8009b20:	9b07      	ldr	r3, [sp, #28]
 8009b22:	691a      	ldr	r2, [r3, #16]
 8009b24:	3202      	adds	r2, #2
 8009b26:	f103 010c 	add.w	r1, r3, #12
 8009b2a:	0092      	lsls	r2, r2, #2
 8009b2c:	300c      	adds	r0, #12
 8009b2e:	f001 fd9d 	bl	800b66c <memcpy>
 8009b32:	ec4b ab10 	vmov	d0, sl, fp
 8009b36:	aa1a      	add	r2, sp, #104	; 0x68
 8009b38:	a919      	add	r1, sp, #100	; 0x64
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f002 f992 	bl	800be64 <__d2b>
 8009b40:	ec4b ab18 	vmov	d8, sl, fp
 8009b44:	9018      	str	r0, [sp, #96]	; 0x60
 8009b46:	2800      	cmp	r0, #0
 8009b48:	f43f aef6 	beq.w	8009938 <_strtod_l+0x490>
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f001 fedc 	bl	800b90c <__i2b>
 8009b54:	4606      	mov	r6, r0
 8009b56:	2800      	cmp	r0, #0
 8009b58:	f43f aeee 	beq.w	8009938 <_strtod_l+0x490>
 8009b5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b5e:	9904      	ldr	r1, [sp, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	bfab      	itete	ge
 8009b64:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009b66:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009b68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009b6a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009b6e:	bfac      	ite	ge
 8009b70:	eb03 0902 	addge.w	r9, r3, r2
 8009b74:	1ad7      	sublt	r7, r2, r3
 8009b76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b78:	eba3 0801 	sub.w	r8, r3, r1
 8009b7c:	4490      	add	r8, r2
 8009b7e:	4ba1      	ldr	r3, [pc, #644]	; (8009e04 <_strtod_l+0x95c>)
 8009b80:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b84:	4598      	cmp	r8, r3
 8009b86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009b8a:	f280 80c7 	bge.w	8009d1c <_strtod_l+0x874>
 8009b8e:	eba3 0308 	sub.w	r3, r3, r8
 8009b92:	2b1f      	cmp	r3, #31
 8009b94:	eba2 0203 	sub.w	r2, r2, r3
 8009b98:	f04f 0101 	mov.w	r1, #1
 8009b9c:	f300 80b1 	bgt.w	8009d02 <_strtod_l+0x85a>
 8009ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ba4:	930d      	str	r3, [sp, #52]	; 0x34
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9308      	str	r3, [sp, #32]
 8009baa:	eb09 0802 	add.w	r8, r9, r2
 8009bae:	9b04      	ldr	r3, [sp, #16]
 8009bb0:	45c1      	cmp	r9, r8
 8009bb2:	4417      	add	r7, r2
 8009bb4:	441f      	add	r7, r3
 8009bb6:	464b      	mov	r3, r9
 8009bb8:	bfa8      	it	ge
 8009bba:	4643      	movge	r3, r8
 8009bbc:	42bb      	cmp	r3, r7
 8009bbe:	bfa8      	it	ge
 8009bc0:	463b      	movge	r3, r7
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	bfc2      	ittt	gt
 8009bc6:	eba8 0803 	subgt.w	r8, r8, r3
 8009bca:	1aff      	subgt	r7, r7, r3
 8009bcc:	eba9 0903 	subgt.w	r9, r9, r3
 8009bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	dd17      	ble.n	8009c06 <_strtod_l+0x75e>
 8009bd6:	4631      	mov	r1, r6
 8009bd8:	461a      	mov	r2, r3
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f001 ff56 	bl	800ba8c <__pow5mult>
 8009be0:	4606      	mov	r6, r0
 8009be2:	2800      	cmp	r0, #0
 8009be4:	f43f aea8 	beq.w	8009938 <_strtod_l+0x490>
 8009be8:	4601      	mov	r1, r0
 8009bea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009bec:	4620      	mov	r0, r4
 8009bee:	f001 fea3 	bl	800b938 <__multiply>
 8009bf2:	900b      	str	r0, [sp, #44]	; 0x2c
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	f43f ae9f 	beq.w	8009938 <_strtod_l+0x490>
 8009bfa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f001 fd83 	bl	800b708 <_Bfree>
 8009c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c04:	9318      	str	r3, [sp, #96]	; 0x60
 8009c06:	f1b8 0f00 	cmp.w	r8, #0
 8009c0a:	f300 808c 	bgt.w	8009d26 <_strtod_l+0x87e>
 8009c0e:	9b06      	ldr	r3, [sp, #24]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	dd08      	ble.n	8009c26 <_strtod_l+0x77e>
 8009c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c16:	9905      	ldr	r1, [sp, #20]
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f001 ff37 	bl	800ba8c <__pow5mult>
 8009c1e:	9005      	str	r0, [sp, #20]
 8009c20:	2800      	cmp	r0, #0
 8009c22:	f43f ae89 	beq.w	8009938 <_strtod_l+0x490>
 8009c26:	2f00      	cmp	r7, #0
 8009c28:	dd08      	ble.n	8009c3c <_strtod_l+0x794>
 8009c2a:	9905      	ldr	r1, [sp, #20]
 8009c2c:	463a      	mov	r2, r7
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f001 ff86 	bl	800bb40 <__lshift>
 8009c34:	9005      	str	r0, [sp, #20]
 8009c36:	2800      	cmp	r0, #0
 8009c38:	f43f ae7e 	beq.w	8009938 <_strtod_l+0x490>
 8009c3c:	f1b9 0f00 	cmp.w	r9, #0
 8009c40:	dd08      	ble.n	8009c54 <_strtod_l+0x7ac>
 8009c42:	4631      	mov	r1, r6
 8009c44:	464a      	mov	r2, r9
 8009c46:	4620      	mov	r0, r4
 8009c48:	f001 ff7a 	bl	800bb40 <__lshift>
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	f43f ae72 	beq.w	8009938 <_strtod_l+0x490>
 8009c54:	9a05      	ldr	r2, [sp, #20]
 8009c56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f001 fffd 	bl	800bc58 <__mdiff>
 8009c5e:	4605      	mov	r5, r0
 8009c60:	2800      	cmp	r0, #0
 8009c62:	f43f ae69 	beq.w	8009938 <_strtod_l+0x490>
 8009c66:	68c3      	ldr	r3, [r0, #12]
 8009c68:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60c3      	str	r3, [r0, #12]
 8009c6e:	4631      	mov	r1, r6
 8009c70:	f001 ffd6 	bl	800bc20 <__mcmp>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	da60      	bge.n	8009d3a <_strtod_l+0x892>
 8009c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c7a:	ea53 030a 	orrs.w	r3, r3, sl
 8009c7e:	f040 8082 	bne.w	8009d86 <_strtod_l+0x8de>
 8009c82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d17d      	bne.n	8009d86 <_strtod_l+0x8de>
 8009c8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c8e:	0d1b      	lsrs	r3, r3, #20
 8009c90:	051b      	lsls	r3, r3, #20
 8009c92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009c96:	d976      	bls.n	8009d86 <_strtod_l+0x8de>
 8009c98:	696b      	ldr	r3, [r5, #20]
 8009c9a:	b913      	cbnz	r3, 8009ca2 <_strtod_l+0x7fa>
 8009c9c:	692b      	ldr	r3, [r5, #16]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	dd71      	ble.n	8009d86 <_strtod_l+0x8de>
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f001 ff4a 	bl	800bb40 <__lshift>
 8009cac:	4631      	mov	r1, r6
 8009cae:	4605      	mov	r5, r0
 8009cb0:	f001 ffb6 	bl	800bc20 <__mcmp>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	dd66      	ble.n	8009d86 <_strtod_l+0x8de>
 8009cb8:	9904      	ldr	r1, [sp, #16]
 8009cba:	4a53      	ldr	r2, [pc, #332]	; (8009e08 <_strtod_l+0x960>)
 8009cbc:	465b      	mov	r3, fp
 8009cbe:	2900      	cmp	r1, #0
 8009cc0:	f000 8081 	beq.w	8009dc6 <_strtod_l+0x91e>
 8009cc4:	ea02 010b 	and.w	r1, r2, fp
 8009cc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009ccc:	dc7b      	bgt.n	8009dc6 <_strtod_l+0x91e>
 8009cce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009cd2:	f77f aea9 	ble.w	8009a28 <_strtod_l+0x580>
 8009cd6:	4b4d      	ldr	r3, [pc, #308]	; (8009e0c <_strtod_l+0x964>)
 8009cd8:	4650      	mov	r0, sl
 8009cda:	4659      	mov	r1, fp
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f7f6 fca3 	bl	8000628 <__aeabi_dmul>
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4303      	orrs	r3, r0
 8009ce6:	bf08      	it	eq
 8009ce8:	2322      	moveq	r3, #34	; 0x22
 8009cea:	4682      	mov	sl, r0
 8009cec:	468b      	mov	fp, r1
 8009cee:	bf08      	it	eq
 8009cf0:	6023      	streq	r3, [r4, #0]
 8009cf2:	e62b      	b.n	800994c <_strtod_l+0x4a4>
 8009cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cfc:	ea03 0a0a 	and.w	sl, r3, sl
 8009d00:	e6e3      	b.n	8009aca <_strtod_l+0x622>
 8009d02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009d06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009d0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009d0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009d12:	fa01 f308 	lsl.w	r3, r1, r8
 8009d16:	9308      	str	r3, [sp, #32]
 8009d18:	910d      	str	r1, [sp, #52]	; 0x34
 8009d1a:	e746      	b.n	8009baa <_strtod_l+0x702>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	9308      	str	r3, [sp, #32]
 8009d20:	2301      	movs	r3, #1
 8009d22:	930d      	str	r3, [sp, #52]	; 0x34
 8009d24:	e741      	b.n	8009baa <_strtod_l+0x702>
 8009d26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d28:	4642      	mov	r2, r8
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f001 ff08 	bl	800bb40 <__lshift>
 8009d30:	9018      	str	r0, [sp, #96]	; 0x60
 8009d32:	2800      	cmp	r0, #0
 8009d34:	f47f af6b 	bne.w	8009c0e <_strtod_l+0x766>
 8009d38:	e5fe      	b.n	8009938 <_strtod_l+0x490>
 8009d3a:	465f      	mov	r7, fp
 8009d3c:	d16e      	bne.n	8009e1c <_strtod_l+0x974>
 8009d3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d44:	b342      	cbz	r2, 8009d98 <_strtod_l+0x8f0>
 8009d46:	4a32      	ldr	r2, [pc, #200]	; (8009e10 <_strtod_l+0x968>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d128      	bne.n	8009d9e <_strtod_l+0x8f6>
 8009d4c:	9b04      	ldr	r3, [sp, #16]
 8009d4e:	4651      	mov	r1, sl
 8009d50:	b1eb      	cbz	r3, 8009d8e <_strtod_l+0x8e6>
 8009d52:	4b2d      	ldr	r3, [pc, #180]	; (8009e08 <_strtod_l+0x960>)
 8009d54:	403b      	ands	r3, r7
 8009d56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d5e:	d819      	bhi.n	8009d94 <_strtod_l+0x8ec>
 8009d60:	0d1b      	lsrs	r3, r3, #20
 8009d62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d66:	fa02 f303 	lsl.w	r3, r2, r3
 8009d6a:	4299      	cmp	r1, r3
 8009d6c:	d117      	bne.n	8009d9e <_strtod_l+0x8f6>
 8009d6e:	4b29      	ldr	r3, [pc, #164]	; (8009e14 <_strtod_l+0x96c>)
 8009d70:	429f      	cmp	r7, r3
 8009d72:	d102      	bne.n	8009d7a <_strtod_l+0x8d2>
 8009d74:	3101      	adds	r1, #1
 8009d76:	f43f addf 	beq.w	8009938 <_strtod_l+0x490>
 8009d7a:	4b23      	ldr	r3, [pc, #140]	; (8009e08 <_strtod_l+0x960>)
 8009d7c:	403b      	ands	r3, r7
 8009d7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009d82:	f04f 0a00 	mov.w	sl, #0
 8009d86:	9b04      	ldr	r3, [sp, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1a4      	bne.n	8009cd6 <_strtod_l+0x82e>
 8009d8c:	e5de      	b.n	800994c <_strtod_l+0x4a4>
 8009d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d92:	e7ea      	b.n	8009d6a <_strtod_l+0x8c2>
 8009d94:	4613      	mov	r3, r2
 8009d96:	e7e8      	b.n	8009d6a <_strtod_l+0x8c2>
 8009d98:	ea53 030a 	orrs.w	r3, r3, sl
 8009d9c:	d08c      	beq.n	8009cb8 <_strtod_l+0x810>
 8009d9e:	9b08      	ldr	r3, [sp, #32]
 8009da0:	b1db      	cbz	r3, 8009dda <_strtod_l+0x932>
 8009da2:	423b      	tst	r3, r7
 8009da4:	d0ef      	beq.n	8009d86 <_strtod_l+0x8de>
 8009da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da8:	9a04      	ldr	r2, [sp, #16]
 8009daa:	4650      	mov	r0, sl
 8009dac:	4659      	mov	r1, fp
 8009dae:	b1c3      	cbz	r3, 8009de2 <_strtod_l+0x93a>
 8009db0:	f7ff fb5b 	bl	800946a <sulp>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	ec51 0b18 	vmov	r0, r1, d8
 8009dbc:	f7f6 fa7e 	bl	80002bc <__adddf3>
 8009dc0:	4682      	mov	sl, r0
 8009dc2:	468b      	mov	fp, r1
 8009dc4:	e7df      	b.n	8009d86 <_strtod_l+0x8de>
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009dcc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009dd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009dd4:	f04f 3aff 	mov.w	sl, #4294967295
 8009dd8:	e7d5      	b.n	8009d86 <_strtod_l+0x8de>
 8009dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ddc:	ea13 0f0a 	tst.w	r3, sl
 8009de0:	e7e0      	b.n	8009da4 <_strtod_l+0x8fc>
 8009de2:	f7ff fb42 	bl	800946a <sulp>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	ec51 0b18 	vmov	r0, r1, d8
 8009dee:	f7f6 fa63 	bl	80002b8 <__aeabi_dsub>
 8009df2:	2200      	movs	r2, #0
 8009df4:	2300      	movs	r3, #0
 8009df6:	4682      	mov	sl, r0
 8009df8:	468b      	mov	fp, r1
 8009dfa:	f7f6 fe7d 	bl	8000af8 <__aeabi_dcmpeq>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d0c1      	beq.n	8009d86 <_strtod_l+0x8de>
 8009e02:	e611      	b.n	8009a28 <_strtod_l+0x580>
 8009e04:	fffffc02 	.word	0xfffffc02
 8009e08:	7ff00000 	.word	0x7ff00000
 8009e0c:	39500000 	.word	0x39500000
 8009e10:	000fffff 	.word	0x000fffff
 8009e14:	7fefffff 	.word	0x7fefffff
 8009e18:	08010538 	.word	0x08010538
 8009e1c:	4631      	mov	r1, r6
 8009e1e:	4628      	mov	r0, r5
 8009e20:	f002 f87c 	bl	800bf1c <__ratio>
 8009e24:	ec59 8b10 	vmov	r8, r9, d0
 8009e28:	ee10 0a10 	vmov	r0, s0
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e32:	4649      	mov	r1, r9
 8009e34:	f7f6 fe74 	bl	8000b20 <__aeabi_dcmple>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	d07a      	beq.n	8009f32 <_strtod_l+0xa8a>
 8009e3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d04a      	beq.n	8009ed8 <_strtod_l+0xa30>
 8009e42:	4b95      	ldr	r3, [pc, #596]	; (800a098 <_strtod_l+0xbf0>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a098 <_strtod_l+0xbf0>
 8009e4e:	f04f 0800 	mov.w	r8, #0
 8009e52:	4b92      	ldr	r3, [pc, #584]	; (800a09c <_strtod_l+0xbf4>)
 8009e54:	403b      	ands	r3, r7
 8009e56:	930d      	str	r3, [sp, #52]	; 0x34
 8009e58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e5a:	4b91      	ldr	r3, [pc, #580]	; (800a0a0 <_strtod_l+0xbf8>)
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	f040 80b0 	bne.w	8009fc2 <_strtod_l+0xb1a>
 8009e62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009e6a:	ec4b ab10 	vmov	d0, sl, fp
 8009e6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e72:	f001 ff7b 	bl	800bd6c <__ulp>
 8009e76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e7a:	ec53 2b10 	vmov	r2, r3, d0
 8009e7e:	f7f6 fbd3 	bl	8000628 <__aeabi_dmul>
 8009e82:	4652      	mov	r2, sl
 8009e84:	465b      	mov	r3, fp
 8009e86:	f7f6 fa19 	bl	80002bc <__adddf3>
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4983      	ldr	r1, [pc, #524]	; (800a09c <_strtod_l+0xbf4>)
 8009e8e:	4a85      	ldr	r2, [pc, #532]	; (800a0a4 <_strtod_l+0xbfc>)
 8009e90:	4019      	ands	r1, r3
 8009e92:	4291      	cmp	r1, r2
 8009e94:	4682      	mov	sl, r0
 8009e96:	d960      	bls.n	8009f5a <_strtod_l+0xab2>
 8009e98:	ee18 3a90 	vmov	r3, s17
 8009e9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d104      	bne.n	8009eae <_strtod_l+0xa06>
 8009ea4:	ee18 3a10 	vmov	r3, s16
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	f43f ad45 	beq.w	8009938 <_strtod_l+0x490>
 8009eae:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a0b0 <_strtod_l+0xc08>
 8009eb2:	f04f 3aff 	mov.w	sl, #4294967295
 8009eb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f001 fc25 	bl	800b708 <_Bfree>
 8009ebe:	9905      	ldr	r1, [sp, #20]
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f001 fc21 	bl	800b708 <_Bfree>
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f001 fc1d 	bl	800b708 <_Bfree>
 8009ece:	4629      	mov	r1, r5
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f001 fc19 	bl	800b708 <_Bfree>
 8009ed6:	e61a      	b.n	8009b0e <_strtod_l+0x666>
 8009ed8:	f1ba 0f00 	cmp.w	sl, #0
 8009edc:	d11b      	bne.n	8009f16 <_strtod_l+0xa6e>
 8009ede:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ee2:	b9f3      	cbnz	r3, 8009f22 <_strtod_l+0xa7a>
 8009ee4:	4b6c      	ldr	r3, [pc, #432]	; (800a098 <_strtod_l+0xbf0>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	4640      	mov	r0, r8
 8009eea:	4649      	mov	r1, r9
 8009eec:	f7f6 fe0e 	bl	8000b0c <__aeabi_dcmplt>
 8009ef0:	b9d0      	cbnz	r0, 8009f28 <_strtod_l+0xa80>
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	4b6c      	ldr	r3, [pc, #432]	; (800a0a8 <_strtod_l+0xc00>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f7f6 fb95 	bl	8000628 <__aeabi_dmul>
 8009efe:	4680      	mov	r8, r0
 8009f00:	4689      	mov	r9, r1
 8009f02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009f06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009f0a:	9315      	str	r3, [sp, #84]	; 0x54
 8009f0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009f10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009f14:	e79d      	b.n	8009e52 <_strtod_l+0x9aa>
 8009f16:	f1ba 0f01 	cmp.w	sl, #1
 8009f1a:	d102      	bne.n	8009f22 <_strtod_l+0xa7a>
 8009f1c:	2f00      	cmp	r7, #0
 8009f1e:	f43f ad83 	beq.w	8009a28 <_strtod_l+0x580>
 8009f22:	4b62      	ldr	r3, [pc, #392]	; (800a0ac <_strtod_l+0xc04>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	e78e      	b.n	8009e46 <_strtod_l+0x99e>
 8009f28:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a0a8 <_strtod_l+0xc00>
 8009f2c:	f04f 0800 	mov.w	r8, #0
 8009f30:	e7e7      	b.n	8009f02 <_strtod_l+0xa5a>
 8009f32:	4b5d      	ldr	r3, [pc, #372]	; (800a0a8 <_strtod_l+0xc00>)
 8009f34:	4640      	mov	r0, r8
 8009f36:	4649      	mov	r1, r9
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f7f6 fb75 	bl	8000628 <__aeabi_dmul>
 8009f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f40:	4680      	mov	r8, r0
 8009f42:	4689      	mov	r9, r1
 8009f44:	b933      	cbnz	r3, 8009f54 <_strtod_l+0xaac>
 8009f46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f4a:	900e      	str	r0, [sp, #56]	; 0x38
 8009f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009f52:	e7dd      	b.n	8009f10 <_strtod_l+0xa68>
 8009f54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009f58:	e7f9      	b.n	8009f4e <_strtod_l+0xaa6>
 8009f5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009f5e:	9b04      	ldr	r3, [sp, #16]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1a8      	bne.n	8009eb6 <_strtod_l+0xa0e>
 8009f64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f6a:	0d1b      	lsrs	r3, r3, #20
 8009f6c:	051b      	lsls	r3, r3, #20
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d1a1      	bne.n	8009eb6 <_strtod_l+0xa0e>
 8009f72:	4640      	mov	r0, r8
 8009f74:	4649      	mov	r1, r9
 8009f76:	f7f6 fffd 	bl	8000f74 <__aeabi_d2lz>
 8009f7a:	f7f6 fb27 	bl	80005cc <__aeabi_l2d>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	4640      	mov	r0, r8
 8009f84:	4649      	mov	r1, r9
 8009f86:	f7f6 f997 	bl	80002b8 <__aeabi_dsub>
 8009f8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f90:	ea43 030a 	orr.w	r3, r3, sl
 8009f94:	4313      	orrs	r3, r2
 8009f96:	4680      	mov	r8, r0
 8009f98:	4689      	mov	r9, r1
 8009f9a:	d055      	beq.n	800a048 <_strtod_l+0xba0>
 8009f9c:	a336      	add	r3, pc, #216	; (adr r3, 800a078 <_strtod_l+0xbd0>)
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	f7f6 fdb3 	bl	8000b0c <__aeabi_dcmplt>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	f47f acd0 	bne.w	800994c <_strtod_l+0x4a4>
 8009fac:	a334      	add	r3, pc, #208	; (adr r3, 800a080 <_strtod_l+0xbd8>)
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	4649      	mov	r1, r9
 8009fb6:	f7f6 fdc7 	bl	8000b48 <__aeabi_dcmpgt>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	f43f af7b 	beq.w	8009eb6 <_strtod_l+0xa0e>
 8009fc0:	e4c4      	b.n	800994c <_strtod_l+0x4a4>
 8009fc2:	9b04      	ldr	r3, [sp, #16]
 8009fc4:	b333      	cbz	r3, 800a014 <_strtod_l+0xb6c>
 8009fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fc8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009fcc:	d822      	bhi.n	800a014 <_strtod_l+0xb6c>
 8009fce:	a32e      	add	r3, pc, #184	; (adr r3, 800a088 <_strtod_l+0xbe0>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	4649      	mov	r1, r9
 8009fd8:	f7f6 fda2 	bl	8000b20 <__aeabi_dcmple>
 8009fdc:	b1a0      	cbz	r0, 800a008 <_strtod_l+0xb60>
 8009fde:	4649      	mov	r1, r9
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	f7f6 fdf9 	bl	8000bd8 <__aeabi_d2uiz>
 8009fe6:	2801      	cmp	r0, #1
 8009fe8:	bf38      	it	cc
 8009fea:	2001      	movcc	r0, #1
 8009fec:	f7f6 faa2 	bl	8000534 <__aeabi_ui2d>
 8009ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ff2:	4680      	mov	r8, r0
 8009ff4:	4689      	mov	r9, r1
 8009ff6:	bb23      	cbnz	r3, 800a042 <_strtod_l+0xb9a>
 8009ff8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ffc:	9010      	str	r0, [sp, #64]	; 0x40
 8009ffe:	9311      	str	r3, [sp, #68]	; 0x44
 800a000:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a004:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a00c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a010:	1a9b      	subs	r3, r3, r2
 800a012:	9309      	str	r3, [sp, #36]	; 0x24
 800a014:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a018:	eeb0 0a48 	vmov.f32	s0, s16
 800a01c:	eef0 0a68 	vmov.f32	s1, s17
 800a020:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a024:	f001 fea2 	bl	800bd6c <__ulp>
 800a028:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a02c:	ec53 2b10 	vmov	r2, r3, d0
 800a030:	f7f6 fafa 	bl	8000628 <__aeabi_dmul>
 800a034:	ec53 2b18 	vmov	r2, r3, d8
 800a038:	f7f6 f940 	bl	80002bc <__adddf3>
 800a03c:	4682      	mov	sl, r0
 800a03e:	468b      	mov	fp, r1
 800a040:	e78d      	b.n	8009f5e <_strtod_l+0xab6>
 800a042:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a046:	e7db      	b.n	800a000 <_strtod_l+0xb58>
 800a048:	a311      	add	r3, pc, #68	; (adr r3, 800a090 <_strtod_l+0xbe8>)
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	f7f6 fd5d 	bl	8000b0c <__aeabi_dcmplt>
 800a052:	e7b2      	b.n	8009fba <_strtod_l+0xb12>
 800a054:	2300      	movs	r3, #0
 800a056:	930a      	str	r3, [sp, #40]	; 0x28
 800a058:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a05a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a05c:	6013      	str	r3, [r2, #0]
 800a05e:	f7ff ba6b 	b.w	8009538 <_strtod_l+0x90>
 800a062:	2a65      	cmp	r2, #101	; 0x65
 800a064:	f43f ab5f 	beq.w	8009726 <_strtod_l+0x27e>
 800a068:	2a45      	cmp	r2, #69	; 0x45
 800a06a:	f43f ab5c 	beq.w	8009726 <_strtod_l+0x27e>
 800a06e:	2301      	movs	r3, #1
 800a070:	f7ff bb94 	b.w	800979c <_strtod_l+0x2f4>
 800a074:	f3af 8000 	nop.w
 800a078:	94a03595 	.word	0x94a03595
 800a07c:	3fdfffff 	.word	0x3fdfffff
 800a080:	35afe535 	.word	0x35afe535
 800a084:	3fe00000 	.word	0x3fe00000
 800a088:	ffc00000 	.word	0xffc00000
 800a08c:	41dfffff 	.word	0x41dfffff
 800a090:	94a03595 	.word	0x94a03595
 800a094:	3fcfffff 	.word	0x3fcfffff
 800a098:	3ff00000 	.word	0x3ff00000
 800a09c:	7ff00000 	.word	0x7ff00000
 800a0a0:	7fe00000 	.word	0x7fe00000
 800a0a4:	7c9fffff 	.word	0x7c9fffff
 800a0a8:	3fe00000 	.word	0x3fe00000
 800a0ac:	bff00000 	.word	0xbff00000
 800a0b0:	7fefffff 	.word	0x7fefffff

0800a0b4 <_strtod_r>:
 800a0b4:	4b01      	ldr	r3, [pc, #4]	; (800a0bc <_strtod_r+0x8>)
 800a0b6:	f7ff b9f7 	b.w	80094a8 <_strtod_l>
 800a0ba:	bf00      	nop
 800a0bc:	20000084 	.word	0x20000084

0800a0c0 <strtod>:
 800a0c0:	460a      	mov	r2, r1
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	4802      	ldr	r0, [pc, #8]	; (800a0d0 <strtod+0x10>)
 800a0c6:	4b03      	ldr	r3, [pc, #12]	; (800a0d4 <strtod+0x14>)
 800a0c8:	6800      	ldr	r0, [r0, #0]
 800a0ca:	f7ff b9ed 	b.w	80094a8 <_strtod_l>
 800a0ce:	bf00      	nop
 800a0d0:	2000001c 	.word	0x2000001c
 800a0d4:	20000084 	.word	0x20000084

0800a0d8 <_strtol_l.constprop.0>:
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0de:	d001      	beq.n	800a0e4 <_strtol_l.constprop.0+0xc>
 800a0e0:	2b24      	cmp	r3, #36	; 0x24
 800a0e2:	d906      	bls.n	800a0f2 <_strtol_l.constprop.0+0x1a>
 800a0e4:	f7fe fa7e 	bl	80085e4 <__errno>
 800a0e8:	2316      	movs	r3, #22
 800a0ea:	6003      	str	r3, [r0, #0]
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a1d8 <_strtol_l.constprop.0+0x100>
 800a0f6:	460d      	mov	r5, r1
 800a0f8:	462e      	mov	r6, r5
 800a0fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a102:	f017 0708 	ands.w	r7, r7, #8
 800a106:	d1f7      	bne.n	800a0f8 <_strtol_l.constprop.0+0x20>
 800a108:	2c2d      	cmp	r4, #45	; 0x2d
 800a10a:	d132      	bne.n	800a172 <_strtol_l.constprop.0+0x9a>
 800a10c:	782c      	ldrb	r4, [r5, #0]
 800a10e:	2701      	movs	r7, #1
 800a110:	1cb5      	adds	r5, r6, #2
 800a112:	2b00      	cmp	r3, #0
 800a114:	d05b      	beq.n	800a1ce <_strtol_l.constprop.0+0xf6>
 800a116:	2b10      	cmp	r3, #16
 800a118:	d109      	bne.n	800a12e <_strtol_l.constprop.0+0x56>
 800a11a:	2c30      	cmp	r4, #48	; 0x30
 800a11c:	d107      	bne.n	800a12e <_strtol_l.constprop.0+0x56>
 800a11e:	782c      	ldrb	r4, [r5, #0]
 800a120:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a124:	2c58      	cmp	r4, #88	; 0x58
 800a126:	d14d      	bne.n	800a1c4 <_strtol_l.constprop.0+0xec>
 800a128:	786c      	ldrb	r4, [r5, #1]
 800a12a:	2310      	movs	r3, #16
 800a12c:	3502      	adds	r5, #2
 800a12e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a132:	f108 38ff 	add.w	r8, r8, #4294967295
 800a136:	f04f 0c00 	mov.w	ip, #0
 800a13a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a13e:	4666      	mov	r6, ip
 800a140:	fb03 8a19 	mls	sl, r3, r9, r8
 800a144:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a148:	f1be 0f09 	cmp.w	lr, #9
 800a14c:	d816      	bhi.n	800a17c <_strtol_l.constprop.0+0xa4>
 800a14e:	4674      	mov	r4, lr
 800a150:	42a3      	cmp	r3, r4
 800a152:	dd24      	ble.n	800a19e <_strtol_l.constprop.0+0xc6>
 800a154:	f1bc 0f00 	cmp.w	ip, #0
 800a158:	db1e      	blt.n	800a198 <_strtol_l.constprop.0+0xc0>
 800a15a:	45b1      	cmp	r9, r6
 800a15c:	d31c      	bcc.n	800a198 <_strtol_l.constprop.0+0xc0>
 800a15e:	d101      	bne.n	800a164 <_strtol_l.constprop.0+0x8c>
 800a160:	45a2      	cmp	sl, r4
 800a162:	db19      	blt.n	800a198 <_strtol_l.constprop.0+0xc0>
 800a164:	fb06 4603 	mla	r6, r6, r3, r4
 800a168:	f04f 0c01 	mov.w	ip, #1
 800a16c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a170:	e7e8      	b.n	800a144 <_strtol_l.constprop.0+0x6c>
 800a172:	2c2b      	cmp	r4, #43	; 0x2b
 800a174:	bf04      	itt	eq
 800a176:	782c      	ldrbeq	r4, [r5, #0]
 800a178:	1cb5      	addeq	r5, r6, #2
 800a17a:	e7ca      	b.n	800a112 <_strtol_l.constprop.0+0x3a>
 800a17c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a180:	f1be 0f19 	cmp.w	lr, #25
 800a184:	d801      	bhi.n	800a18a <_strtol_l.constprop.0+0xb2>
 800a186:	3c37      	subs	r4, #55	; 0x37
 800a188:	e7e2      	b.n	800a150 <_strtol_l.constprop.0+0x78>
 800a18a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a18e:	f1be 0f19 	cmp.w	lr, #25
 800a192:	d804      	bhi.n	800a19e <_strtol_l.constprop.0+0xc6>
 800a194:	3c57      	subs	r4, #87	; 0x57
 800a196:	e7db      	b.n	800a150 <_strtol_l.constprop.0+0x78>
 800a198:	f04f 3cff 	mov.w	ip, #4294967295
 800a19c:	e7e6      	b.n	800a16c <_strtol_l.constprop.0+0x94>
 800a19e:	f1bc 0f00 	cmp.w	ip, #0
 800a1a2:	da05      	bge.n	800a1b0 <_strtol_l.constprop.0+0xd8>
 800a1a4:	2322      	movs	r3, #34	; 0x22
 800a1a6:	6003      	str	r3, [r0, #0]
 800a1a8:	4646      	mov	r6, r8
 800a1aa:	b942      	cbnz	r2, 800a1be <_strtol_l.constprop.0+0xe6>
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	e79e      	b.n	800a0ee <_strtol_l.constprop.0+0x16>
 800a1b0:	b107      	cbz	r7, 800a1b4 <_strtol_l.constprop.0+0xdc>
 800a1b2:	4276      	negs	r6, r6
 800a1b4:	2a00      	cmp	r2, #0
 800a1b6:	d0f9      	beq.n	800a1ac <_strtol_l.constprop.0+0xd4>
 800a1b8:	f1bc 0f00 	cmp.w	ip, #0
 800a1bc:	d000      	beq.n	800a1c0 <_strtol_l.constprop.0+0xe8>
 800a1be:	1e69      	subs	r1, r5, #1
 800a1c0:	6011      	str	r1, [r2, #0]
 800a1c2:	e7f3      	b.n	800a1ac <_strtol_l.constprop.0+0xd4>
 800a1c4:	2430      	movs	r4, #48	; 0x30
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1b1      	bne.n	800a12e <_strtol_l.constprop.0+0x56>
 800a1ca:	2308      	movs	r3, #8
 800a1cc:	e7af      	b.n	800a12e <_strtol_l.constprop.0+0x56>
 800a1ce:	2c30      	cmp	r4, #48	; 0x30
 800a1d0:	d0a5      	beq.n	800a11e <_strtol_l.constprop.0+0x46>
 800a1d2:	230a      	movs	r3, #10
 800a1d4:	e7ab      	b.n	800a12e <_strtol_l.constprop.0+0x56>
 800a1d6:	bf00      	nop
 800a1d8:	08010561 	.word	0x08010561

0800a1dc <_strtol_r>:
 800a1dc:	f7ff bf7c 	b.w	800a0d8 <_strtol_l.constprop.0>

0800a1e0 <strtol>:
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	460a      	mov	r2, r1
 800a1e4:	4601      	mov	r1, r0
 800a1e6:	4802      	ldr	r0, [pc, #8]	; (800a1f0 <strtol+0x10>)
 800a1e8:	6800      	ldr	r0, [r0, #0]
 800a1ea:	f7ff bf75 	b.w	800a0d8 <_strtol_l.constprop.0>
 800a1ee:	bf00      	nop
 800a1f0:	2000001c 	.word	0x2000001c

0800a1f4 <_write_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	4d07      	ldr	r5, [pc, #28]	; (800a214 <_write_r+0x20>)
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	4608      	mov	r0, r1
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	2200      	movs	r2, #0
 800a200:	602a      	str	r2, [r5, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	f7fb f9f6 	bl	80055f4 <_write>
 800a208:	1c43      	adds	r3, r0, #1
 800a20a:	d102      	bne.n	800a212 <_write_r+0x1e>
 800a20c:	682b      	ldr	r3, [r5, #0]
 800a20e:	b103      	cbz	r3, 800a212 <_write_r+0x1e>
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	bd38      	pop	{r3, r4, r5, pc}
 800a214:	20009d10 	.word	0x20009d10

0800a218 <_close_r>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	4d06      	ldr	r5, [pc, #24]	; (800a234 <_close_r+0x1c>)
 800a21c:	2300      	movs	r3, #0
 800a21e:	4604      	mov	r4, r0
 800a220:	4608      	mov	r0, r1
 800a222:	602b      	str	r3, [r5, #0]
 800a224:	f7fb fa02 	bl	800562c <_close>
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	d102      	bne.n	800a232 <_close_r+0x1a>
 800a22c:	682b      	ldr	r3, [r5, #0]
 800a22e:	b103      	cbz	r3, 800a232 <_close_r+0x1a>
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	20009d10 	.word	0x20009d10

0800a238 <quorem>:
 800a238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	6903      	ldr	r3, [r0, #16]
 800a23e:	690c      	ldr	r4, [r1, #16]
 800a240:	42a3      	cmp	r3, r4
 800a242:	4607      	mov	r7, r0
 800a244:	f2c0 8081 	blt.w	800a34a <quorem+0x112>
 800a248:	3c01      	subs	r4, #1
 800a24a:	f101 0814 	add.w	r8, r1, #20
 800a24e:	f100 0514 	add.w	r5, r0, #20
 800a252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a25c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a260:	3301      	adds	r3, #1
 800a262:	429a      	cmp	r2, r3
 800a264:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a268:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a26c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a270:	d331      	bcc.n	800a2d6 <quorem+0x9e>
 800a272:	f04f 0e00 	mov.w	lr, #0
 800a276:	4640      	mov	r0, r8
 800a278:	46ac      	mov	ip, r5
 800a27a:	46f2      	mov	sl, lr
 800a27c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a280:	b293      	uxth	r3, r2
 800a282:	fb06 e303 	mla	r3, r6, r3, lr
 800a286:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	ebaa 0303 	sub.w	r3, sl, r3
 800a290:	f8dc a000 	ldr.w	sl, [ip]
 800a294:	0c12      	lsrs	r2, r2, #16
 800a296:	fa13 f38a 	uxtah	r3, r3, sl
 800a29a:	fb06 e202 	mla	r2, r6, r2, lr
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	9b00      	ldr	r3, [sp, #0]
 800a2a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a2a6:	b292      	uxth	r2, r2
 800a2a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a2ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800a2b4:	4581      	cmp	r9, r0
 800a2b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2ba:	f84c 3b04 	str.w	r3, [ip], #4
 800a2be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a2c2:	d2db      	bcs.n	800a27c <quorem+0x44>
 800a2c4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a2c8:	b92b      	cbnz	r3, 800a2d6 <quorem+0x9e>
 800a2ca:	9b01      	ldr	r3, [sp, #4]
 800a2cc:	3b04      	subs	r3, #4
 800a2ce:	429d      	cmp	r5, r3
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	d32e      	bcc.n	800a332 <quorem+0xfa>
 800a2d4:	613c      	str	r4, [r7, #16]
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	f001 fca2 	bl	800bc20 <__mcmp>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	db24      	blt.n	800a32a <quorem+0xf2>
 800a2e0:	3601      	adds	r6, #1
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f04f 0c00 	mov.w	ip, #0
 800a2e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2ec:	f8d0 e000 	ldr.w	lr, [r0]
 800a2f0:	b293      	uxth	r3, r2
 800a2f2:	ebac 0303 	sub.w	r3, ip, r3
 800a2f6:	0c12      	lsrs	r2, r2, #16
 800a2f8:	fa13 f38e 	uxtah	r3, r3, lr
 800a2fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a304:	b29b      	uxth	r3, r3
 800a306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a30a:	45c1      	cmp	r9, r8
 800a30c:	f840 3b04 	str.w	r3, [r0], #4
 800a310:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a314:	d2e8      	bcs.n	800a2e8 <quorem+0xb0>
 800a316:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a31a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a31e:	b922      	cbnz	r2, 800a32a <quorem+0xf2>
 800a320:	3b04      	subs	r3, #4
 800a322:	429d      	cmp	r5, r3
 800a324:	461a      	mov	r2, r3
 800a326:	d30a      	bcc.n	800a33e <quorem+0x106>
 800a328:	613c      	str	r4, [r7, #16]
 800a32a:	4630      	mov	r0, r6
 800a32c:	b003      	add	sp, #12
 800a32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a332:	6812      	ldr	r2, [r2, #0]
 800a334:	3b04      	subs	r3, #4
 800a336:	2a00      	cmp	r2, #0
 800a338:	d1cc      	bne.n	800a2d4 <quorem+0x9c>
 800a33a:	3c01      	subs	r4, #1
 800a33c:	e7c7      	b.n	800a2ce <quorem+0x96>
 800a33e:	6812      	ldr	r2, [r2, #0]
 800a340:	3b04      	subs	r3, #4
 800a342:	2a00      	cmp	r2, #0
 800a344:	d1f0      	bne.n	800a328 <quorem+0xf0>
 800a346:	3c01      	subs	r4, #1
 800a348:	e7eb      	b.n	800a322 <quorem+0xea>
 800a34a:	2000      	movs	r0, #0
 800a34c:	e7ee      	b.n	800a32c <quorem+0xf4>
	...

0800a350 <_dtoa_r>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	ed2d 8b04 	vpush	{d8-d9}
 800a358:	ec57 6b10 	vmov	r6, r7, d0
 800a35c:	b093      	sub	sp, #76	; 0x4c
 800a35e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a360:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a364:	9106      	str	r1, [sp, #24]
 800a366:	ee10 aa10 	vmov	sl, s0
 800a36a:	4604      	mov	r4, r0
 800a36c:	9209      	str	r2, [sp, #36]	; 0x24
 800a36e:	930c      	str	r3, [sp, #48]	; 0x30
 800a370:	46bb      	mov	fp, r7
 800a372:	b975      	cbnz	r5, 800a392 <_dtoa_r+0x42>
 800a374:	2010      	movs	r0, #16
 800a376:	f001 f95f 	bl	800b638 <malloc>
 800a37a:	4602      	mov	r2, r0
 800a37c:	6260      	str	r0, [r4, #36]	; 0x24
 800a37e:	b920      	cbnz	r0, 800a38a <_dtoa_r+0x3a>
 800a380:	4ba7      	ldr	r3, [pc, #668]	; (800a620 <_dtoa_r+0x2d0>)
 800a382:	21ea      	movs	r1, #234	; 0xea
 800a384:	48a7      	ldr	r0, [pc, #668]	; (800a624 <_dtoa_r+0x2d4>)
 800a386:	f002 fceb 	bl	800cd60 <__assert_func>
 800a38a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a38e:	6005      	str	r5, [r0, #0]
 800a390:	60c5      	str	r5, [r0, #12]
 800a392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a394:	6819      	ldr	r1, [r3, #0]
 800a396:	b151      	cbz	r1, 800a3ae <_dtoa_r+0x5e>
 800a398:	685a      	ldr	r2, [r3, #4]
 800a39a:	604a      	str	r2, [r1, #4]
 800a39c:	2301      	movs	r3, #1
 800a39e:	4093      	lsls	r3, r2
 800a3a0:	608b      	str	r3, [r1, #8]
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f001 f9b0 	bl	800b708 <_Bfree>
 800a3a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	1e3b      	subs	r3, r7, #0
 800a3b0:	bfaa      	itet	ge
 800a3b2:	2300      	movge	r3, #0
 800a3b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a3b8:	f8c8 3000 	strge.w	r3, [r8]
 800a3bc:	4b9a      	ldr	r3, [pc, #616]	; (800a628 <_dtoa_r+0x2d8>)
 800a3be:	bfbc      	itt	lt
 800a3c0:	2201      	movlt	r2, #1
 800a3c2:	f8c8 2000 	strlt.w	r2, [r8]
 800a3c6:	ea33 030b 	bics.w	r3, r3, fp
 800a3ca:	d11b      	bne.n	800a404 <_dtoa_r+0xb4>
 800a3cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3d2:	6013      	str	r3, [r2, #0]
 800a3d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3d8:	4333      	orrs	r3, r6
 800a3da:	f000 8592 	beq.w	800af02 <_dtoa_r+0xbb2>
 800a3de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3e0:	b963      	cbnz	r3, 800a3fc <_dtoa_r+0xac>
 800a3e2:	4b92      	ldr	r3, [pc, #584]	; (800a62c <_dtoa_r+0x2dc>)
 800a3e4:	e022      	b.n	800a42c <_dtoa_r+0xdc>
 800a3e6:	4b92      	ldr	r3, [pc, #584]	; (800a630 <_dtoa_r+0x2e0>)
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	3308      	adds	r3, #8
 800a3ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3ee:	6013      	str	r3, [r2, #0]
 800a3f0:	9801      	ldr	r0, [sp, #4]
 800a3f2:	b013      	add	sp, #76	; 0x4c
 800a3f4:	ecbd 8b04 	vpop	{d8-d9}
 800a3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fc:	4b8b      	ldr	r3, [pc, #556]	; (800a62c <_dtoa_r+0x2dc>)
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	3303      	adds	r3, #3
 800a402:	e7f3      	b.n	800a3ec <_dtoa_r+0x9c>
 800a404:	2200      	movs	r2, #0
 800a406:	2300      	movs	r3, #0
 800a408:	4650      	mov	r0, sl
 800a40a:	4659      	mov	r1, fp
 800a40c:	f7f6 fb74 	bl	8000af8 <__aeabi_dcmpeq>
 800a410:	ec4b ab19 	vmov	d9, sl, fp
 800a414:	4680      	mov	r8, r0
 800a416:	b158      	cbz	r0, 800a430 <_dtoa_r+0xe0>
 800a418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a41a:	2301      	movs	r3, #1
 800a41c:	6013      	str	r3, [r2, #0]
 800a41e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 856b 	beq.w	800aefc <_dtoa_r+0xbac>
 800a426:	4883      	ldr	r0, [pc, #524]	; (800a634 <_dtoa_r+0x2e4>)
 800a428:	6018      	str	r0, [r3, #0]
 800a42a:	1e43      	subs	r3, r0, #1
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	e7df      	b.n	800a3f0 <_dtoa_r+0xa0>
 800a430:	ec4b ab10 	vmov	d0, sl, fp
 800a434:	aa10      	add	r2, sp, #64	; 0x40
 800a436:	a911      	add	r1, sp, #68	; 0x44
 800a438:	4620      	mov	r0, r4
 800a43a:	f001 fd13 	bl	800be64 <__d2b>
 800a43e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a442:	ee08 0a10 	vmov	s16, r0
 800a446:	2d00      	cmp	r5, #0
 800a448:	f000 8084 	beq.w	800a554 <_dtoa_r+0x204>
 800a44c:	ee19 3a90 	vmov	r3, s19
 800a450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a454:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a458:	4656      	mov	r6, sl
 800a45a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a45e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a462:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a466:	4b74      	ldr	r3, [pc, #464]	; (800a638 <_dtoa_r+0x2e8>)
 800a468:	2200      	movs	r2, #0
 800a46a:	4630      	mov	r0, r6
 800a46c:	4639      	mov	r1, r7
 800a46e:	f7f5 ff23 	bl	80002b8 <__aeabi_dsub>
 800a472:	a365      	add	r3, pc, #404	; (adr r3, 800a608 <_dtoa_r+0x2b8>)
 800a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a478:	f7f6 f8d6 	bl	8000628 <__aeabi_dmul>
 800a47c:	a364      	add	r3, pc, #400	; (adr r3, 800a610 <_dtoa_r+0x2c0>)
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	f7f5 ff1b 	bl	80002bc <__adddf3>
 800a486:	4606      	mov	r6, r0
 800a488:	4628      	mov	r0, r5
 800a48a:	460f      	mov	r7, r1
 800a48c:	f7f6 f862 	bl	8000554 <__aeabi_i2d>
 800a490:	a361      	add	r3, pc, #388	; (adr r3, 800a618 <_dtoa_r+0x2c8>)
 800a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a496:	f7f6 f8c7 	bl	8000628 <__aeabi_dmul>
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	4630      	mov	r0, r6
 800a4a0:	4639      	mov	r1, r7
 800a4a2:	f7f5 ff0b 	bl	80002bc <__adddf3>
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	460f      	mov	r7, r1
 800a4aa:	f7f6 fb6d 	bl	8000b88 <__aeabi_d2iz>
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	9000      	str	r0, [sp, #0]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	f7f6 fb28 	bl	8000b0c <__aeabi_dcmplt>
 800a4bc:	b150      	cbz	r0, 800a4d4 <_dtoa_r+0x184>
 800a4be:	9800      	ldr	r0, [sp, #0]
 800a4c0:	f7f6 f848 	bl	8000554 <__aeabi_i2d>
 800a4c4:	4632      	mov	r2, r6
 800a4c6:	463b      	mov	r3, r7
 800a4c8:	f7f6 fb16 	bl	8000af8 <__aeabi_dcmpeq>
 800a4cc:	b910      	cbnz	r0, 800a4d4 <_dtoa_r+0x184>
 800a4ce:	9b00      	ldr	r3, [sp, #0]
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	9b00      	ldr	r3, [sp, #0]
 800a4d6:	2b16      	cmp	r3, #22
 800a4d8:	d85a      	bhi.n	800a590 <_dtoa_r+0x240>
 800a4da:	9a00      	ldr	r2, [sp, #0]
 800a4dc:	4b57      	ldr	r3, [pc, #348]	; (800a63c <_dtoa_r+0x2ec>)
 800a4de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e6:	ec51 0b19 	vmov	r0, r1, d9
 800a4ea:	f7f6 fb0f 	bl	8000b0c <__aeabi_dcmplt>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d050      	beq.n	800a594 <_dtoa_r+0x244>
 800a4f2:	9b00      	ldr	r3, [sp, #0]
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4fe:	1b5d      	subs	r5, r3, r5
 800a500:	1e6b      	subs	r3, r5, #1
 800a502:	9305      	str	r3, [sp, #20]
 800a504:	bf45      	ittet	mi
 800a506:	f1c5 0301 	rsbmi	r3, r5, #1
 800a50a:	9304      	strmi	r3, [sp, #16]
 800a50c:	2300      	movpl	r3, #0
 800a50e:	2300      	movmi	r3, #0
 800a510:	bf4c      	ite	mi
 800a512:	9305      	strmi	r3, [sp, #20]
 800a514:	9304      	strpl	r3, [sp, #16]
 800a516:	9b00      	ldr	r3, [sp, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	db3d      	blt.n	800a598 <_dtoa_r+0x248>
 800a51c:	9b05      	ldr	r3, [sp, #20]
 800a51e:	9a00      	ldr	r2, [sp, #0]
 800a520:	920a      	str	r2, [sp, #40]	; 0x28
 800a522:	4413      	add	r3, r2
 800a524:	9305      	str	r3, [sp, #20]
 800a526:	2300      	movs	r3, #0
 800a528:	9307      	str	r3, [sp, #28]
 800a52a:	9b06      	ldr	r3, [sp, #24]
 800a52c:	2b09      	cmp	r3, #9
 800a52e:	f200 8089 	bhi.w	800a644 <_dtoa_r+0x2f4>
 800a532:	2b05      	cmp	r3, #5
 800a534:	bfc4      	itt	gt
 800a536:	3b04      	subgt	r3, #4
 800a538:	9306      	strgt	r3, [sp, #24]
 800a53a:	9b06      	ldr	r3, [sp, #24]
 800a53c:	f1a3 0302 	sub.w	r3, r3, #2
 800a540:	bfcc      	ite	gt
 800a542:	2500      	movgt	r5, #0
 800a544:	2501      	movle	r5, #1
 800a546:	2b03      	cmp	r3, #3
 800a548:	f200 8087 	bhi.w	800a65a <_dtoa_r+0x30a>
 800a54c:	e8df f003 	tbb	[pc, r3]
 800a550:	59383a2d 	.word	0x59383a2d
 800a554:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a558:	441d      	add	r5, r3
 800a55a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a55e:	2b20      	cmp	r3, #32
 800a560:	bfc1      	itttt	gt
 800a562:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a566:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a56a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a56e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a572:	bfda      	itte	le
 800a574:	f1c3 0320 	rsble	r3, r3, #32
 800a578:	fa06 f003 	lslle.w	r0, r6, r3
 800a57c:	4318      	orrgt	r0, r3
 800a57e:	f7f5 ffd9 	bl	8000534 <__aeabi_ui2d>
 800a582:	2301      	movs	r3, #1
 800a584:	4606      	mov	r6, r0
 800a586:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a58a:	3d01      	subs	r5, #1
 800a58c:	930e      	str	r3, [sp, #56]	; 0x38
 800a58e:	e76a      	b.n	800a466 <_dtoa_r+0x116>
 800a590:	2301      	movs	r3, #1
 800a592:	e7b2      	b.n	800a4fa <_dtoa_r+0x1aa>
 800a594:	900b      	str	r0, [sp, #44]	; 0x2c
 800a596:	e7b1      	b.n	800a4fc <_dtoa_r+0x1ac>
 800a598:	9b04      	ldr	r3, [sp, #16]
 800a59a:	9a00      	ldr	r2, [sp, #0]
 800a59c:	1a9b      	subs	r3, r3, r2
 800a59e:	9304      	str	r3, [sp, #16]
 800a5a0:	4253      	negs	r3, r2
 800a5a2:	9307      	str	r3, [sp, #28]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5a8:	e7bf      	b.n	800a52a <_dtoa_r+0x1da>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	9308      	str	r3, [sp, #32]
 800a5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	dc55      	bgt.n	800a660 <_dtoa_r+0x310>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a5be:	e00c      	b.n	800a5da <_dtoa_r+0x28a>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e7f3      	b.n	800a5ac <_dtoa_r+0x25c>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5c8:	9308      	str	r3, [sp, #32]
 800a5ca:	9b00      	ldr	r3, [sp, #0]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	9302      	str	r3, [sp, #8]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	9303      	str	r3, [sp, #12]
 800a5d6:	bfb8      	it	lt
 800a5d8:	2301      	movlt	r3, #1
 800a5da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a5dc:	2200      	movs	r2, #0
 800a5de:	6042      	str	r2, [r0, #4]
 800a5e0:	2204      	movs	r2, #4
 800a5e2:	f102 0614 	add.w	r6, r2, #20
 800a5e6:	429e      	cmp	r6, r3
 800a5e8:	6841      	ldr	r1, [r0, #4]
 800a5ea:	d93d      	bls.n	800a668 <_dtoa_r+0x318>
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f001 f84b 	bl	800b688 <_Balloc>
 800a5f2:	9001      	str	r0, [sp, #4]
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d13b      	bne.n	800a670 <_dtoa_r+0x320>
 800a5f8:	4b11      	ldr	r3, [pc, #68]	; (800a640 <_dtoa_r+0x2f0>)
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a600:	e6c0      	b.n	800a384 <_dtoa_r+0x34>
 800a602:	2301      	movs	r3, #1
 800a604:	e7df      	b.n	800a5c6 <_dtoa_r+0x276>
 800a606:	bf00      	nop
 800a608:	636f4361 	.word	0x636f4361
 800a60c:	3fd287a7 	.word	0x3fd287a7
 800a610:	8b60c8b3 	.word	0x8b60c8b3
 800a614:	3fc68a28 	.word	0x3fc68a28
 800a618:	509f79fb 	.word	0x509f79fb
 800a61c:	3fd34413 	.word	0x3fd34413
 800a620:	0801066e 	.word	0x0801066e
 800a624:	08010685 	.word	0x08010685
 800a628:	7ff00000 	.word	0x7ff00000
 800a62c:	0801066a 	.word	0x0801066a
 800a630:	08010661 	.word	0x08010661
 800a634:	080108da 	.word	0x080108da
 800a638:	3ff80000 	.word	0x3ff80000
 800a63c:	080107f0 	.word	0x080107f0
 800a640:	080106e0 	.word	0x080106e0
 800a644:	2501      	movs	r5, #1
 800a646:	2300      	movs	r3, #0
 800a648:	9306      	str	r3, [sp, #24]
 800a64a:	9508      	str	r5, [sp, #32]
 800a64c:	f04f 33ff 	mov.w	r3, #4294967295
 800a650:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a654:	2200      	movs	r2, #0
 800a656:	2312      	movs	r3, #18
 800a658:	e7b0      	b.n	800a5bc <_dtoa_r+0x26c>
 800a65a:	2301      	movs	r3, #1
 800a65c:	9308      	str	r3, [sp, #32]
 800a65e:	e7f5      	b.n	800a64c <_dtoa_r+0x2fc>
 800a660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a662:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a666:	e7b8      	b.n	800a5da <_dtoa_r+0x28a>
 800a668:	3101      	adds	r1, #1
 800a66a:	6041      	str	r1, [r0, #4]
 800a66c:	0052      	lsls	r2, r2, #1
 800a66e:	e7b8      	b.n	800a5e2 <_dtoa_r+0x292>
 800a670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a672:	9a01      	ldr	r2, [sp, #4]
 800a674:	601a      	str	r2, [r3, #0]
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	2b0e      	cmp	r3, #14
 800a67a:	f200 809d 	bhi.w	800a7b8 <_dtoa_r+0x468>
 800a67e:	2d00      	cmp	r5, #0
 800a680:	f000 809a 	beq.w	800a7b8 <_dtoa_r+0x468>
 800a684:	9b00      	ldr	r3, [sp, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	dd32      	ble.n	800a6f0 <_dtoa_r+0x3a0>
 800a68a:	4ab7      	ldr	r2, [pc, #732]	; (800a968 <_dtoa_r+0x618>)
 800a68c:	f003 030f 	and.w	r3, r3, #15
 800a690:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a694:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a698:	9b00      	ldr	r3, [sp, #0]
 800a69a:	05d8      	lsls	r0, r3, #23
 800a69c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a6a0:	d516      	bpl.n	800a6d0 <_dtoa_r+0x380>
 800a6a2:	4bb2      	ldr	r3, [pc, #712]	; (800a96c <_dtoa_r+0x61c>)
 800a6a4:	ec51 0b19 	vmov	r0, r1, d9
 800a6a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6ac:	f7f6 f8e6 	bl	800087c <__aeabi_ddiv>
 800a6b0:	f007 070f 	and.w	r7, r7, #15
 800a6b4:	4682      	mov	sl, r0
 800a6b6:	468b      	mov	fp, r1
 800a6b8:	2503      	movs	r5, #3
 800a6ba:	4eac      	ldr	r6, [pc, #688]	; (800a96c <_dtoa_r+0x61c>)
 800a6bc:	b957      	cbnz	r7, 800a6d4 <_dtoa_r+0x384>
 800a6be:	4642      	mov	r2, r8
 800a6c0:	464b      	mov	r3, r9
 800a6c2:	4650      	mov	r0, sl
 800a6c4:	4659      	mov	r1, fp
 800a6c6:	f7f6 f8d9 	bl	800087c <__aeabi_ddiv>
 800a6ca:	4682      	mov	sl, r0
 800a6cc:	468b      	mov	fp, r1
 800a6ce:	e028      	b.n	800a722 <_dtoa_r+0x3d2>
 800a6d0:	2502      	movs	r5, #2
 800a6d2:	e7f2      	b.n	800a6ba <_dtoa_r+0x36a>
 800a6d4:	07f9      	lsls	r1, r7, #31
 800a6d6:	d508      	bpl.n	800a6ea <_dtoa_r+0x39a>
 800a6d8:	4640      	mov	r0, r8
 800a6da:	4649      	mov	r1, r9
 800a6dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6e0:	f7f5 ffa2 	bl	8000628 <__aeabi_dmul>
 800a6e4:	3501      	adds	r5, #1
 800a6e6:	4680      	mov	r8, r0
 800a6e8:	4689      	mov	r9, r1
 800a6ea:	107f      	asrs	r7, r7, #1
 800a6ec:	3608      	adds	r6, #8
 800a6ee:	e7e5      	b.n	800a6bc <_dtoa_r+0x36c>
 800a6f0:	f000 809b 	beq.w	800a82a <_dtoa_r+0x4da>
 800a6f4:	9b00      	ldr	r3, [sp, #0]
 800a6f6:	4f9d      	ldr	r7, [pc, #628]	; (800a96c <_dtoa_r+0x61c>)
 800a6f8:	425e      	negs	r6, r3
 800a6fa:	4b9b      	ldr	r3, [pc, #620]	; (800a968 <_dtoa_r+0x618>)
 800a6fc:	f006 020f 	and.w	r2, r6, #15
 800a700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	ec51 0b19 	vmov	r0, r1, d9
 800a70c:	f7f5 ff8c 	bl	8000628 <__aeabi_dmul>
 800a710:	1136      	asrs	r6, r6, #4
 800a712:	4682      	mov	sl, r0
 800a714:	468b      	mov	fp, r1
 800a716:	2300      	movs	r3, #0
 800a718:	2502      	movs	r5, #2
 800a71a:	2e00      	cmp	r6, #0
 800a71c:	d17a      	bne.n	800a814 <_dtoa_r+0x4c4>
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1d3      	bne.n	800a6ca <_dtoa_r+0x37a>
 800a722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a724:	2b00      	cmp	r3, #0
 800a726:	f000 8082 	beq.w	800a82e <_dtoa_r+0x4de>
 800a72a:	4b91      	ldr	r3, [pc, #580]	; (800a970 <_dtoa_r+0x620>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	4650      	mov	r0, sl
 800a730:	4659      	mov	r1, fp
 800a732:	f7f6 f9eb 	bl	8000b0c <__aeabi_dcmplt>
 800a736:	2800      	cmp	r0, #0
 800a738:	d079      	beq.n	800a82e <_dtoa_r+0x4de>
 800a73a:	9b03      	ldr	r3, [sp, #12]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d076      	beq.n	800a82e <_dtoa_r+0x4de>
 800a740:	9b02      	ldr	r3, [sp, #8]
 800a742:	2b00      	cmp	r3, #0
 800a744:	dd36      	ble.n	800a7b4 <_dtoa_r+0x464>
 800a746:	9b00      	ldr	r3, [sp, #0]
 800a748:	4650      	mov	r0, sl
 800a74a:	4659      	mov	r1, fp
 800a74c:	1e5f      	subs	r7, r3, #1
 800a74e:	2200      	movs	r2, #0
 800a750:	4b88      	ldr	r3, [pc, #544]	; (800a974 <_dtoa_r+0x624>)
 800a752:	f7f5 ff69 	bl	8000628 <__aeabi_dmul>
 800a756:	9e02      	ldr	r6, [sp, #8]
 800a758:	4682      	mov	sl, r0
 800a75a:	468b      	mov	fp, r1
 800a75c:	3501      	adds	r5, #1
 800a75e:	4628      	mov	r0, r5
 800a760:	f7f5 fef8 	bl	8000554 <__aeabi_i2d>
 800a764:	4652      	mov	r2, sl
 800a766:	465b      	mov	r3, fp
 800a768:	f7f5 ff5e 	bl	8000628 <__aeabi_dmul>
 800a76c:	4b82      	ldr	r3, [pc, #520]	; (800a978 <_dtoa_r+0x628>)
 800a76e:	2200      	movs	r2, #0
 800a770:	f7f5 fda4 	bl	80002bc <__adddf3>
 800a774:	46d0      	mov	r8, sl
 800a776:	46d9      	mov	r9, fp
 800a778:	4682      	mov	sl, r0
 800a77a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a77e:	2e00      	cmp	r6, #0
 800a780:	d158      	bne.n	800a834 <_dtoa_r+0x4e4>
 800a782:	4b7e      	ldr	r3, [pc, #504]	; (800a97c <_dtoa_r+0x62c>)
 800a784:	2200      	movs	r2, #0
 800a786:	4640      	mov	r0, r8
 800a788:	4649      	mov	r1, r9
 800a78a:	f7f5 fd95 	bl	80002b8 <__aeabi_dsub>
 800a78e:	4652      	mov	r2, sl
 800a790:	465b      	mov	r3, fp
 800a792:	4680      	mov	r8, r0
 800a794:	4689      	mov	r9, r1
 800a796:	f7f6 f9d7 	bl	8000b48 <__aeabi_dcmpgt>
 800a79a:	2800      	cmp	r0, #0
 800a79c:	f040 8295 	bne.w	800acca <_dtoa_r+0x97a>
 800a7a0:	4652      	mov	r2, sl
 800a7a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a7a6:	4640      	mov	r0, r8
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	f7f6 f9af 	bl	8000b0c <__aeabi_dcmplt>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	f040 8289 	bne.w	800acc6 <_dtoa_r+0x976>
 800a7b4:	ec5b ab19 	vmov	sl, fp, d9
 800a7b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f2c0 8148 	blt.w	800aa50 <_dtoa_r+0x700>
 800a7c0:	9a00      	ldr	r2, [sp, #0]
 800a7c2:	2a0e      	cmp	r2, #14
 800a7c4:	f300 8144 	bgt.w	800aa50 <_dtoa_r+0x700>
 800a7c8:	4b67      	ldr	r3, [pc, #412]	; (800a968 <_dtoa_r+0x618>)
 800a7ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f280 80d5 	bge.w	800a984 <_dtoa_r+0x634>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f300 80d1 	bgt.w	800a984 <_dtoa_r+0x634>
 800a7e2:	f040 826f 	bne.w	800acc4 <_dtoa_r+0x974>
 800a7e6:	4b65      	ldr	r3, [pc, #404]	; (800a97c <_dtoa_r+0x62c>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	4640      	mov	r0, r8
 800a7ec:	4649      	mov	r1, r9
 800a7ee:	f7f5 ff1b 	bl	8000628 <__aeabi_dmul>
 800a7f2:	4652      	mov	r2, sl
 800a7f4:	465b      	mov	r3, fp
 800a7f6:	f7f6 f99d 	bl	8000b34 <__aeabi_dcmpge>
 800a7fa:	9e03      	ldr	r6, [sp, #12]
 800a7fc:	4637      	mov	r7, r6
 800a7fe:	2800      	cmp	r0, #0
 800a800:	f040 8245 	bne.w	800ac8e <_dtoa_r+0x93e>
 800a804:	9d01      	ldr	r5, [sp, #4]
 800a806:	2331      	movs	r3, #49	; 0x31
 800a808:	f805 3b01 	strb.w	r3, [r5], #1
 800a80c:	9b00      	ldr	r3, [sp, #0]
 800a80e:	3301      	adds	r3, #1
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	e240      	b.n	800ac96 <_dtoa_r+0x946>
 800a814:	07f2      	lsls	r2, r6, #31
 800a816:	d505      	bpl.n	800a824 <_dtoa_r+0x4d4>
 800a818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a81c:	f7f5 ff04 	bl	8000628 <__aeabi_dmul>
 800a820:	3501      	adds	r5, #1
 800a822:	2301      	movs	r3, #1
 800a824:	1076      	asrs	r6, r6, #1
 800a826:	3708      	adds	r7, #8
 800a828:	e777      	b.n	800a71a <_dtoa_r+0x3ca>
 800a82a:	2502      	movs	r5, #2
 800a82c:	e779      	b.n	800a722 <_dtoa_r+0x3d2>
 800a82e:	9f00      	ldr	r7, [sp, #0]
 800a830:	9e03      	ldr	r6, [sp, #12]
 800a832:	e794      	b.n	800a75e <_dtoa_r+0x40e>
 800a834:	9901      	ldr	r1, [sp, #4]
 800a836:	4b4c      	ldr	r3, [pc, #304]	; (800a968 <_dtoa_r+0x618>)
 800a838:	4431      	add	r1, r6
 800a83a:	910d      	str	r1, [sp, #52]	; 0x34
 800a83c:	9908      	ldr	r1, [sp, #32]
 800a83e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a846:	2900      	cmp	r1, #0
 800a848:	d043      	beq.n	800a8d2 <_dtoa_r+0x582>
 800a84a:	494d      	ldr	r1, [pc, #308]	; (800a980 <_dtoa_r+0x630>)
 800a84c:	2000      	movs	r0, #0
 800a84e:	f7f6 f815 	bl	800087c <__aeabi_ddiv>
 800a852:	4652      	mov	r2, sl
 800a854:	465b      	mov	r3, fp
 800a856:	f7f5 fd2f 	bl	80002b8 <__aeabi_dsub>
 800a85a:	9d01      	ldr	r5, [sp, #4]
 800a85c:	4682      	mov	sl, r0
 800a85e:	468b      	mov	fp, r1
 800a860:	4649      	mov	r1, r9
 800a862:	4640      	mov	r0, r8
 800a864:	f7f6 f990 	bl	8000b88 <__aeabi_d2iz>
 800a868:	4606      	mov	r6, r0
 800a86a:	f7f5 fe73 	bl	8000554 <__aeabi_i2d>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	4640      	mov	r0, r8
 800a874:	4649      	mov	r1, r9
 800a876:	f7f5 fd1f 	bl	80002b8 <__aeabi_dsub>
 800a87a:	3630      	adds	r6, #48	; 0x30
 800a87c:	f805 6b01 	strb.w	r6, [r5], #1
 800a880:	4652      	mov	r2, sl
 800a882:	465b      	mov	r3, fp
 800a884:	4680      	mov	r8, r0
 800a886:	4689      	mov	r9, r1
 800a888:	f7f6 f940 	bl	8000b0c <__aeabi_dcmplt>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d163      	bne.n	800a958 <_dtoa_r+0x608>
 800a890:	4642      	mov	r2, r8
 800a892:	464b      	mov	r3, r9
 800a894:	4936      	ldr	r1, [pc, #216]	; (800a970 <_dtoa_r+0x620>)
 800a896:	2000      	movs	r0, #0
 800a898:	f7f5 fd0e 	bl	80002b8 <__aeabi_dsub>
 800a89c:	4652      	mov	r2, sl
 800a89e:	465b      	mov	r3, fp
 800a8a0:	f7f6 f934 	bl	8000b0c <__aeabi_dcmplt>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	f040 80b5 	bne.w	800aa14 <_dtoa_r+0x6c4>
 800a8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ac:	429d      	cmp	r5, r3
 800a8ae:	d081      	beq.n	800a7b4 <_dtoa_r+0x464>
 800a8b0:	4b30      	ldr	r3, [pc, #192]	; (800a974 <_dtoa_r+0x624>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	4650      	mov	r0, sl
 800a8b6:	4659      	mov	r1, fp
 800a8b8:	f7f5 feb6 	bl	8000628 <__aeabi_dmul>
 800a8bc:	4b2d      	ldr	r3, [pc, #180]	; (800a974 <_dtoa_r+0x624>)
 800a8be:	4682      	mov	sl, r0
 800a8c0:	468b      	mov	fp, r1
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	4649      	mov	r1, r9
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f7f5 feae 	bl	8000628 <__aeabi_dmul>
 800a8cc:	4680      	mov	r8, r0
 800a8ce:	4689      	mov	r9, r1
 800a8d0:	e7c6      	b.n	800a860 <_dtoa_r+0x510>
 800a8d2:	4650      	mov	r0, sl
 800a8d4:	4659      	mov	r1, fp
 800a8d6:	f7f5 fea7 	bl	8000628 <__aeabi_dmul>
 800a8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8dc:	9d01      	ldr	r5, [sp, #4]
 800a8de:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8e0:	4682      	mov	sl, r0
 800a8e2:	468b      	mov	fp, r1
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	4640      	mov	r0, r8
 800a8e8:	f7f6 f94e 	bl	8000b88 <__aeabi_d2iz>
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	f7f5 fe31 	bl	8000554 <__aeabi_i2d>
 800a8f2:	3630      	adds	r6, #48	; 0x30
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4640      	mov	r0, r8
 800a8fa:	4649      	mov	r1, r9
 800a8fc:	f7f5 fcdc 	bl	80002b8 <__aeabi_dsub>
 800a900:	f805 6b01 	strb.w	r6, [r5], #1
 800a904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a906:	429d      	cmp	r5, r3
 800a908:	4680      	mov	r8, r0
 800a90a:	4689      	mov	r9, r1
 800a90c:	f04f 0200 	mov.w	r2, #0
 800a910:	d124      	bne.n	800a95c <_dtoa_r+0x60c>
 800a912:	4b1b      	ldr	r3, [pc, #108]	; (800a980 <_dtoa_r+0x630>)
 800a914:	4650      	mov	r0, sl
 800a916:	4659      	mov	r1, fp
 800a918:	f7f5 fcd0 	bl	80002bc <__adddf3>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4640      	mov	r0, r8
 800a922:	4649      	mov	r1, r9
 800a924:	f7f6 f910 	bl	8000b48 <__aeabi_dcmpgt>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d173      	bne.n	800aa14 <_dtoa_r+0x6c4>
 800a92c:	4652      	mov	r2, sl
 800a92e:	465b      	mov	r3, fp
 800a930:	4913      	ldr	r1, [pc, #76]	; (800a980 <_dtoa_r+0x630>)
 800a932:	2000      	movs	r0, #0
 800a934:	f7f5 fcc0 	bl	80002b8 <__aeabi_dsub>
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	4640      	mov	r0, r8
 800a93e:	4649      	mov	r1, r9
 800a940:	f7f6 f8e4 	bl	8000b0c <__aeabi_dcmplt>
 800a944:	2800      	cmp	r0, #0
 800a946:	f43f af35 	beq.w	800a7b4 <_dtoa_r+0x464>
 800a94a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a94c:	1e6b      	subs	r3, r5, #1
 800a94e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a950:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a954:	2b30      	cmp	r3, #48	; 0x30
 800a956:	d0f8      	beq.n	800a94a <_dtoa_r+0x5fa>
 800a958:	9700      	str	r7, [sp, #0]
 800a95a:	e049      	b.n	800a9f0 <_dtoa_r+0x6a0>
 800a95c:	4b05      	ldr	r3, [pc, #20]	; (800a974 <_dtoa_r+0x624>)
 800a95e:	f7f5 fe63 	bl	8000628 <__aeabi_dmul>
 800a962:	4680      	mov	r8, r0
 800a964:	4689      	mov	r9, r1
 800a966:	e7bd      	b.n	800a8e4 <_dtoa_r+0x594>
 800a968:	080107f0 	.word	0x080107f0
 800a96c:	080107c8 	.word	0x080107c8
 800a970:	3ff00000 	.word	0x3ff00000
 800a974:	40240000 	.word	0x40240000
 800a978:	401c0000 	.word	0x401c0000
 800a97c:	40140000 	.word	0x40140000
 800a980:	3fe00000 	.word	0x3fe00000
 800a984:	9d01      	ldr	r5, [sp, #4]
 800a986:	4656      	mov	r6, sl
 800a988:	465f      	mov	r7, fp
 800a98a:	4642      	mov	r2, r8
 800a98c:	464b      	mov	r3, r9
 800a98e:	4630      	mov	r0, r6
 800a990:	4639      	mov	r1, r7
 800a992:	f7f5 ff73 	bl	800087c <__aeabi_ddiv>
 800a996:	f7f6 f8f7 	bl	8000b88 <__aeabi_d2iz>
 800a99a:	4682      	mov	sl, r0
 800a99c:	f7f5 fdda 	bl	8000554 <__aeabi_i2d>
 800a9a0:	4642      	mov	r2, r8
 800a9a2:	464b      	mov	r3, r9
 800a9a4:	f7f5 fe40 	bl	8000628 <__aeabi_dmul>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	4639      	mov	r1, r7
 800a9b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a9b4:	f7f5 fc80 	bl	80002b8 <__aeabi_dsub>
 800a9b8:	f805 6b01 	strb.w	r6, [r5], #1
 800a9bc:	9e01      	ldr	r6, [sp, #4]
 800a9be:	9f03      	ldr	r7, [sp, #12]
 800a9c0:	1bae      	subs	r6, r5, r6
 800a9c2:	42b7      	cmp	r7, r6
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	d135      	bne.n	800aa36 <_dtoa_r+0x6e6>
 800a9ca:	f7f5 fc77 	bl	80002bc <__adddf3>
 800a9ce:	4642      	mov	r2, r8
 800a9d0:	464b      	mov	r3, r9
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	460f      	mov	r7, r1
 800a9d6:	f7f6 f8b7 	bl	8000b48 <__aeabi_dcmpgt>
 800a9da:	b9d0      	cbnz	r0, 800aa12 <_dtoa_r+0x6c2>
 800a9dc:	4642      	mov	r2, r8
 800a9de:	464b      	mov	r3, r9
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	4639      	mov	r1, r7
 800a9e4:	f7f6 f888 	bl	8000af8 <__aeabi_dcmpeq>
 800a9e8:	b110      	cbz	r0, 800a9f0 <_dtoa_r+0x6a0>
 800a9ea:	f01a 0f01 	tst.w	sl, #1
 800a9ee:	d110      	bne.n	800aa12 <_dtoa_r+0x6c2>
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	ee18 1a10 	vmov	r1, s16
 800a9f6:	f000 fe87 	bl	800b708 <_Bfree>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	9800      	ldr	r0, [sp, #0]
 800a9fe:	702b      	strb	r3, [r5, #0]
 800aa00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa02:	3001      	adds	r0, #1
 800aa04:	6018      	str	r0, [r3, #0]
 800aa06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f43f acf1 	beq.w	800a3f0 <_dtoa_r+0xa0>
 800aa0e:	601d      	str	r5, [r3, #0]
 800aa10:	e4ee      	b.n	800a3f0 <_dtoa_r+0xa0>
 800aa12:	9f00      	ldr	r7, [sp, #0]
 800aa14:	462b      	mov	r3, r5
 800aa16:	461d      	mov	r5, r3
 800aa18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa1c:	2a39      	cmp	r2, #57	; 0x39
 800aa1e:	d106      	bne.n	800aa2e <_dtoa_r+0x6de>
 800aa20:	9a01      	ldr	r2, [sp, #4]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d1f7      	bne.n	800aa16 <_dtoa_r+0x6c6>
 800aa26:	9901      	ldr	r1, [sp, #4]
 800aa28:	2230      	movs	r2, #48	; 0x30
 800aa2a:	3701      	adds	r7, #1
 800aa2c:	700a      	strb	r2, [r1, #0]
 800aa2e:	781a      	ldrb	r2, [r3, #0]
 800aa30:	3201      	adds	r2, #1
 800aa32:	701a      	strb	r2, [r3, #0]
 800aa34:	e790      	b.n	800a958 <_dtoa_r+0x608>
 800aa36:	4ba6      	ldr	r3, [pc, #664]	; (800acd0 <_dtoa_r+0x980>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f7f5 fdf5 	bl	8000628 <__aeabi_dmul>
 800aa3e:	2200      	movs	r2, #0
 800aa40:	2300      	movs	r3, #0
 800aa42:	4606      	mov	r6, r0
 800aa44:	460f      	mov	r7, r1
 800aa46:	f7f6 f857 	bl	8000af8 <__aeabi_dcmpeq>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d09d      	beq.n	800a98a <_dtoa_r+0x63a>
 800aa4e:	e7cf      	b.n	800a9f0 <_dtoa_r+0x6a0>
 800aa50:	9a08      	ldr	r2, [sp, #32]
 800aa52:	2a00      	cmp	r2, #0
 800aa54:	f000 80d7 	beq.w	800ac06 <_dtoa_r+0x8b6>
 800aa58:	9a06      	ldr	r2, [sp, #24]
 800aa5a:	2a01      	cmp	r2, #1
 800aa5c:	f300 80ba 	bgt.w	800abd4 <_dtoa_r+0x884>
 800aa60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa62:	2a00      	cmp	r2, #0
 800aa64:	f000 80b2 	beq.w	800abcc <_dtoa_r+0x87c>
 800aa68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa6c:	9e07      	ldr	r6, [sp, #28]
 800aa6e:	9d04      	ldr	r5, [sp, #16]
 800aa70:	9a04      	ldr	r2, [sp, #16]
 800aa72:	441a      	add	r2, r3
 800aa74:	9204      	str	r2, [sp, #16]
 800aa76:	9a05      	ldr	r2, [sp, #20]
 800aa78:	2101      	movs	r1, #1
 800aa7a:	441a      	add	r2, r3
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	9205      	str	r2, [sp, #20]
 800aa80:	f000 ff44 	bl	800b90c <__i2b>
 800aa84:	4607      	mov	r7, r0
 800aa86:	2d00      	cmp	r5, #0
 800aa88:	dd0c      	ble.n	800aaa4 <_dtoa_r+0x754>
 800aa8a:	9b05      	ldr	r3, [sp, #20]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	dd09      	ble.n	800aaa4 <_dtoa_r+0x754>
 800aa90:	42ab      	cmp	r3, r5
 800aa92:	9a04      	ldr	r2, [sp, #16]
 800aa94:	bfa8      	it	ge
 800aa96:	462b      	movge	r3, r5
 800aa98:	1ad2      	subs	r2, r2, r3
 800aa9a:	9204      	str	r2, [sp, #16]
 800aa9c:	9a05      	ldr	r2, [sp, #20]
 800aa9e:	1aed      	subs	r5, r5, r3
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	9305      	str	r3, [sp, #20]
 800aaa4:	9b07      	ldr	r3, [sp, #28]
 800aaa6:	b31b      	cbz	r3, 800aaf0 <_dtoa_r+0x7a0>
 800aaa8:	9b08      	ldr	r3, [sp, #32]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f000 80af 	beq.w	800ac0e <_dtoa_r+0x8be>
 800aab0:	2e00      	cmp	r6, #0
 800aab2:	dd13      	ble.n	800aadc <_dtoa_r+0x78c>
 800aab4:	4639      	mov	r1, r7
 800aab6:	4632      	mov	r2, r6
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 ffe7 	bl	800ba8c <__pow5mult>
 800aabe:	ee18 2a10 	vmov	r2, s16
 800aac2:	4601      	mov	r1, r0
 800aac4:	4607      	mov	r7, r0
 800aac6:	4620      	mov	r0, r4
 800aac8:	f000 ff36 	bl	800b938 <__multiply>
 800aacc:	ee18 1a10 	vmov	r1, s16
 800aad0:	4680      	mov	r8, r0
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 fe18 	bl	800b708 <_Bfree>
 800aad8:	ee08 8a10 	vmov	s16, r8
 800aadc:	9b07      	ldr	r3, [sp, #28]
 800aade:	1b9a      	subs	r2, r3, r6
 800aae0:	d006      	beq.n	800aaf0 <_dtoa_r+0x7a0>
 800aae2:	ee18 1a10 	vmov	r1, s16
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 ffd0 	bl	800ba8c <__pow5mult>
 800aaec:	ee08 0a10 	vmov	s16, r0
 800aaf0:	2101      	movs	r1, #1
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f000 ff0a 	bl	800b90c <__i2b>
 800aaf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	4606      	mov	r6, r0
 800aafe:	f340 8088 	ble.w	800ac12 <_dtoa_r+0x8c2>
 800ab02:	461a      	mov	r2, r3
 800ab04:	4601      	mov	r1, r0
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 ffc0 	bl	800ba8c <__pow5mult>
 800ab0c:	9b06      	ldr	r3, [sp, #24]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	4606      	mov	r6, r0
 800ab12:	f340 8081 	ble.w	800ac18 <_dtoa_r+0x8c8>
 800ab16:	f04f 0800 	mov.w	r8, #0
 800ab1a:	6933      	ldr	r3, [r6, #16]
 800ab1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab20:	6918      	ldr	r0, [r3, #16]
 800ab22:	f000 fea3 	bl	800b86c <__hi0bits>
 800ab26:	f1c0 0020 	rsb	r0, r0, #32
 800ab2a:	9b05      	ldr	r3, [sp, #20]
 800ab2c:	4418      	add	r0, r3
 800ab2e:	f010 001f 	ands.w	r0, r0, #31
 800ab32:	f000 8092 	beq.w	800ac5a <_dtoa_r+0x90a>
 800ab36:	f1c0 0320 	rsb	r3, r0, #32
 800ab3a:	2b04      	cmp	r3, #4
 800ab3c:	f340 808a 	ble.w	800ac54 <_dtoa_r+0x904>
 800ab40:	f1c0 001c 	rsb	r0, r0, #28
 800ab44:	9b04      	ldr	r3, [sp, #16]
 800ab46:	4403      	add	r3, r0
 800ab48:	9304      	str	r3, [sp, #16]
 800ab4a:	9b05      	ldr	r3, [sp, #20]
 800ab4c:	4403      	add	r3, r0
 800ab4e:	4405      	add	r5, r0
 800ab50:	9305      	str	r3, [sp, #20]
 800ab52:	9b04      	ldr	r3, [sp, #16]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	dd07      	ble.n	800ab68 <_dtoa_r+0x818>
 800ab58:	ee18 1a10 	vmov	r1, s16
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f000 ffee 	bl	800bb40 <__lshift>
 800ab64:	ee08 0a10 	vmov	s16, r0
 800ab68:	9b05      	ldr	r3, [sp, #20]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	dd05      	ble.n	800ab7a <_dtoa_r+0x82a>
 800ab6e:	4631      	mov	r1, r6
 800ab70:	461a      	mov	r2, r3
 800ab72:	4620      	mov	r0, r4
 800ab74:	f000 ffe4 	bl	800bb40 <__lshift>
 800ab78:	4606      	mov	r6, r0
 800ab7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d06e      	beq.n	800ac5e <_dtoa_r+0x90e>
 800ab80:	ee18 0a10 	vmov	r0, s16
 800ab84:	4631      	mov	r1, r6
 800ab86:	f001 f84b 	bl	800bc20 <__mcmp>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	da67      	bge.n	800ac5e <_dtoa_r+0x90e>
 800ab8e:	9b00      	ldr	r3, [sp, #0]
 800ab90:	3b01      	subs	r3, #1
 800ab92:	ee18 1a10 	vmov	r1, s16
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	220a      	movs	r2, #10
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 fdd5 	bl	800b74c <__multadd>
 800aba2:	9b08      	ldr	r3, [sp, #32]
 800aba4:	ee08 0a10 	vmov	s16, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f000 81b1 	beq.w	800af10 <_dtoa_r+0xbc0>
 800abae:	2300      	movs	r3, #0
 800abb0:	4639      	mov	r1, r7
 800abb2:	220a      	movs	r2, #10
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 fdc9 	bl	800b74c <__multadd>
 800abba:	9b02      	ldr	r3, [sp, #8]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	4607      	mov	r7, r0
 800abc0:	f300 808e 	bgt.w	800ace0 <_dtoa_r+0x990>
 800abc4:	9b06      	ldr	r3, [sp, #24]
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	dc51      	bgt.n	800ac6e <_dtoa_r+0x91e>
 800abca:	e089      	b.n	800ace0 <_dtoa_r+0x990>
 800abcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800abd2:	e74b      	b.n	800aa6c <_dtoa_r+0x71c>
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	1e5e      	subs	r6, r3, #1
 800abd8:	9b07      	ldr	r3, [sp, #28]
 800abda:	42b3      	cmp	r3, r6
 800abdc:	bfbf      	itttt	lt
 800abde:	9b07      	ldrlt	r3, [sp, #28]
 800abe0:	9607      	strlt	r6, [sp, #28]
 800abe2:	1af2      	sublt	r2, r6, r3
 800abe4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800abe6:	bfb6      	itet	lt
 800abe8:	189b      	addlt	r3, r3, r2
 800abea:	1b9e      	subge	r6, r3, r6
 800abec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800abee:	9b03      	ldr	r3, [sp, #12]
 800abf0:	bfb8      	it	lt
 800abf2:	2600      	movlt	r6, #0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	bfb7      	itett	lt
 800abf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800abfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ac00:	1a9d      	sublt	r5, r3, r2
 800ac02:	2300      	movlt	r3, #0
 800ac04:	e734      	b.n	800aa70 <_dtoa_r+0x720>
 800ac06:	9e07      	ldr	r6, [sp, #28]
 800ac08:	9d04      	ldr	r5, [sp, #16]
 800ac0a:	9f08      	ldr	r7, [sp, #32]
 800ac0c:	e73b      	b.n	800aa86 <_dtoa_r+0x736>
 800ac0e:	9a07      	ldr	r2, [sp, #28]
 800ac10:	e767      	b.n	800aae2 <_dtoa_r+0x792>
 800ac12:	9b06      	ldr	r3, [sp, #24]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	dc18      	bgt.n	800ac4a <_dtoa_r+0x8fa>
 800ac18:	f1ba 0f00 	cmp.w	sl, #0
 800ac1c:	d115      	bne.n	800ac4a <_dtoa_r+0x8fa>
 800ac1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac22:	b993      	cbnz	r3, 800ac4a <_dtoa_r+0x8fa>
 800ac24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac28:	0d1b      	lsrs	r3, r3, #20
 800ac2a:	051b      	lsls	r3, r3, #20
 800ac2c:	b183      	cbz	r3, 800ac50 <_dtoa_r+0x900>
 800ac2e:	9b04      	ldr	r3, [sp, #16]
 800ac30:	3301      	adds	r3, #1
 800ac32:	9304      	str	r3, [sp, #16]
 800ac34:	9b05      	ldr	r3, [sp, #20]
 800ac36:	3301      	adds	r3, #1
 800ac38:	9305      	str	r3, [sp, #20]
 800ac3a:	f04f 0801 	mov.w	r8, #1
 800ac3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f47f af6a 	bne.w	800ab1a <_dtoa_r+0x7ca>
 800ac46:	2001      	movs	r0, #1
 800ac48:	e76f      	b.n	800ab2a <_dtoa_r+0x7da>
 800ac4a:	f04f 0800 	mov.w	r8, #0
 800ac4e:	e7f6      	b.n	800ac3e <_dtoa_r+0x8ee>
 800ac50:	4698      	mov	r8, r3
 800ac52:	e7f4      	b.n	800ac3e <_dtoa_r+0x8ee>
 800ac54:	f43f af7d 	beq.w	800ab52 <_dtoa_r+0x802>
 800ac58:	4618      	mov	r0, r3
 800ac5a:	301c      	adds	r0, #28
 800ac5c:	e772      	b.n	800ab44 <_dtoa_r+0x7f4>
 800ac5e:	9b03      	ldr	r3, [sp, #12]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	dc37      	bgt.n	800acd4 <_dtoa_r+0x984>
 800ac64:	9b06      	ldr	r3, [sp, #24]
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	dd34      	ble.n	800acd4 <_dtoa_r+0x984>
 800ac6a:	9b03      	ldr	r3, [sp, #12]
 800ac6c:	9302      	str	r3, [sp, #8]
 800ac6e:	9b02      	ldr	r3, [sp, #8]
 800ac70:	b96b      	cbnz	r3, 800ac8e <_dtoa_r+0x93e>
 800ac72:	4631      	mov	r1, r6
 800ac74:	2205      	movs	r2, #5
 800ac76:	4620      	mov	r0, r4
 800ac78:	f000 fd68 	bl	800b74c <__multadd>
 800ac7c:	4601      	mov	r1, r0
 800ac7e:	4606      	mov	r6, r0
 800ac80:	ee18 0a10 	vmov	r0, s16
 800ac84:	f000 ffcc 	bl	800bc20 <__mcmp>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	f73f adbb 	bgt.w	800a804 <_dtoa_r+0x4b4>
 800ac8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac90:	9d01      	ldr	r5, [sp, #4]
 800ac92:	43db      	mvns	r3, r3
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	f04f 0800 	mov.w	r8, #0
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f000 fd33 	bl	800b708 <_Bfree>
 800aca2:	2f00      	cmp	r7, #0
 800aca4:	f43f aea4 	beq.w	800a9f0 <_dtoa_r+0x6a0>
 800aca8:	f1b8 0f00 	cmp.w	r8, #0
 800acac:	d005      	beq.n	800acba <_dtoa_r+0x96a>
 800acae:	45b8      	cmp	r8, r7
 800acb0:	d003      	beq.n	800acba <_dtoa_r+0x96a>
 800acb2:	4641      	mov	r1, r8
 800acb4:	4620      	mov	r0, r4
 800acb6:	f000 fd27 	bl	800b708 <_Bfree>
 800acba:	4639      	mov	r1, r7
 800acbc:	4620      	mov	r0, r4
 800acbe:	f000 fd23 	bl	800b708 <_Bfree>
 800acc2:	e695      	b.n	800a9f0 <_dtoa_r+0x6a0>
 800acc4:	2600      	movs	r6, #0
 800acc6:	4637      	mov	r7, r6
 800acc8:	e7e1      	b.n	800ac8e <_dtoa_r+0x93e>
 800acca:	9700      	str	r7, [sp, #0]
 800accc:	4637      	mov	r7, r6
 800acce:	e599      	b.n	800a804 <_dtoa_r+0x4b4>
 800acd0:	40240000 	.word	0x40240000
 800acd4:	9b08      	ldr	r3, [sp, #32]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 80ca 	beq.w	800ae70 <_dtoa_r+0xb20>
 800acdc:	9b03      	ldr	r3, [sp, #12]
 800acde:	9302      	str	r3, [sp, #8]
 800ace0:	2d00      	cmp	r5, #0
 800ace2:	dd05      	ble.n	800acf0 <_dtoa_r+0x9a0>
 800ace4:	4639      	mov	r1, r7
 800ace6:	462a      	mov	r2, r5
 800ace8:	4620      	mov	r0, r4
 800acea:	f000 ff29 	bl	800bb40 <__lshift>
 800acee:	4607      	mov	r7, r0
 800acf0:	f1b8 0f00 	cmp.w	r8, #0
 800acf4:	d05b      	beq.n	800adae <_dtoa_r+0xa5e>
 800acf6:	6879      	ldr	r1, [r7, #4]
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 fcc5 	bl	800b688 <_Balloc>
 800acfe:	4605      	mov	r5, r0
 800ad00:	b928      	cbnz	r0, 800ad0e <_dtoa_r+0x9be>
 800ad02:	4b87      	ldr	r3, [pc, #540]	; (800af20 <_dtoa_r+0xbd0>)
 800ad04:	4602      	mov	r2, r0
 800ad06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ad0a:	f7ff bb3b 	b.w	800a384 <_dtoa_r+0x34>
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	3202      	adds	r2, #2
 800ad12:	0092      	lsls	r2, r2, #2
 800ad14:	f107 010c 	add.w	r1, r7, #12
 800ad18:	300c      	adds	r0, #12
 800ad1a:	f000 fca7 	bl	800b66c <memcpy>
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4629      	mov	r1, r5
 800ad22:	4620      	mov	r0, r4
 800ad24:	f000 ff0c 	bl	800bb40 <__lshift>
 800ad28:	9b01      	ldr	r3, [sp, #4]
 800ad2a:	f103 0901 	add.w	r9, r3, #1
 800ad2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ad32:	4413      	add	r3, r2
 800ad34:	9305      	str	r3, [sp, #20]
 800ad36:	f00a 0301 	and.w	r3, sl, #1
 800ad3a:	46b8      	mov	r8, r7
 800ad3c:	9304      	str	r3, [sp, #16]
 800ad3e:	4607      	mov	r7, r0
 800ad40:	4631      	mov	r1, r6
 800ad42:	ee18 0a10 	vmov	r0, s16
 800ad46:	f7ff fa77 	bl	800a238 <quorem>
 800ad4a:	4641      	mov	r1, r8
 800ad4c:	9002      	str	r0, [sp, #8]
 800ad4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad52:	ee18 0a10 	vmov	r0, s16
 800ad56:	f000 ff63 	bl	800bc20 <__mcmp>
 800ad5a:	463a      	mov	r2, r7
 800ad5c:	9003      	str	r0, [sp, #12]
 800ad5e:	4631      	mov	r1, r6
 800ad60:	4620      	mov	r0, r4
 800ad62:	f000 ff79 	bl	800bc58 <__mdiff>
 800ad66:	68c2      	ldr	r2, [r0, #12]
 800ad68:	f109 3bff 	add.w	fp, r9, #4294967295
 800ad6c:	4605      	mov	r5, r0
 800ad6e:	bb02      	cbnz	r2, 800adb2 <_dtoa_r+0xa62>
 800ad70:	4601      	mov	r1, r0
 800ad72:	ee18 0a10 	vmov	r0, s16
 800ad76:	f000 ff53 	bl	800bc20 <__mcmp>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	4620      	mov	r0, r4
 800ad80:	9207      	str	r2, [sp, #28]
 800ad82:	f000 fcc1 	bl	800b708 <_Bfree>
 800ad86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ad8a:	ea43 0102 	orr.w	r1, r3, r2
 800ad8e:	9b04      	ldr	r3, [sp, #16]
 800ad90:	430b      	orrs	r3, r1
 800ad92:	464d      	mov	r5, r9
 800ad94:	d10f      	bne.n	800adb6 <_dtoa_r+0xa66>
 800ad96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad9a:	d02a      	beq.n	800adf2 <_dtoa_r+0xaa2>
 800ad9c:	9b03      	ldr	r3, [sp, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	dd02      	ble.n	800ada8 <_dtoa_r+0xa58>
 800ada2:	9b02      	ldr	r3, [sp, #8]
 800ada4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ada8:	f88b a000 	strb.w	sl, [fp]
 800adac:	e775      	b.n	800ac9a <_dtoa_r+0x94a>
 800adae:	4638      	mov	r0, r7
 800adb0:	e7ba      	b.n	800ad28 <_dtoa_r+0x9d8>
 800adb2:	2201      	movs	r2, #1
 800adb4:	e7e2      	b.n	800ad7c <_dtoa_r+0xa2c>
 800adb6:	9b03      	ldr	r3, [sp, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	db04      	blt.n	800adc6 <_dtoa_r+0xa76>
 800adbc:	9906      	ldr	r1, [sp, #24]
 800adbe:	430b      	orrs	r3, r1
 800adc0:	9904      	ldr	r1, [sp, #16]
 800adc2:	430b      	orrs	r3, r1
 800adc4:	d122      	bne.n	800ae0c <_dtoa_r+0xabc>
 800adc6:	2a00      	cmp	r2, #0
 800adc8:	ddee      	ble.n	800ada8 <_dtoa_r+0xa58>
 800adca:	ee18 1a10 	vmov	r1, s16
 800adce:	2201      	movs	r2, #1
 800add0:	4620      	mov	r0, r4
 800add2:	f000 feb5 	bl	800bb40 <__lshift>
 800add6:	4631      	mov	r1, r6
 800add8:	ee08 0a10 	vmov	s16, r0
 800addc:	f000 ff20 	bl	800bc20 <__mcmp>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	dc03      	bgt.n	800adec <_dtoa_r+0xa9c>
 800ade4:	d1e0      	bne.n	800ada8 <_dtoa_r+0xa58>
 800ade6:	f01a 0f01 	tst.w	sl, #1
 800adea:	d0dd      	beq.n	800ada8 <_dtoa_r+0xa58>
 800adec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800adf0:	d1d7      	bne.n	800ada2 <_dtoa_r+0xa52>
 800adf2:	2339      	movs	r3, #57	; 0x39
 800adf4:	f88b 3000 	strb.w	r3, [fp]
 800adf8:	462b      	mov	r3, r5
 800adfa:	461d      	mov	r5, r3
 800adfc:	3b01      	subs	r3, #1
 800adfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae02:	2a39      	cmp	r2, #57	; 0x39
 800ae04:	d071      	beq.n	800aeea <_dtoa_r+0xb9a>
 800ae06:	3201      	adds	r2, #1
 800ae08:	701a      	strb	r2, [r3, #0]
 800ae0a:	e746      	b.n	800ac9a <_dtoa_r+0x94a>
 800ae0c:	2a00      	cmp	r2, #0
 800ae0e:	dd07      	ble.n	800ae20 <_dtoa_r+0xad0>
 800ae10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae14:	d0ed      	beq.n	800adf2 <_dtoa_r+0xaa2>
 800ae16:	f10a 0301 	add.w	r3, sl, #1
 800ae1a:	f88b 3000 	strb.w	r3, [fp]
 800ae1e:	e73c      	b.n	800ac9a <_dtoa_r+0x94a>
 800ae20:	9b05      	ldr	r3, [sp, #20]
 800ae22:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ae26:	4599      	cmp	r9, r3
 800ae28:	d047      	beq.n	800aeba <_dtoa_r+0xb6a>
 800ae2a:	ee18 1a10 	vmov	r1, s16
 800ae2e:	2300      	movs	r3, #0
 800ae30:	220a      	movs	r2, #10
 800ae32:	4620      	mov	r0, r4
 800ae34:	f000 fc8a 	bl	800b74c <__multadd>
 800ae38:	45b8      	cmp	r8, r7
 800ae3a:	ee08 0a10 	vmov	s16, r0
 800ae3e:	f04f 0300 	mov.w	r3, #0
 800ae42:	f04f 020a 	mov.w	r2, #10
 800ae46:	4641      	mov	r1, r8
 800ae48:	4620      	mov	r0, r4
 800ae4a:	d106      	bne.n	800ae5a <_dtoa_r+0xb0a>
 800ae4c:	f000 fc7e 	bl	800b74c <__multadd>
 800ae50:	4680      	mov	r8, r0
 800ae52:	4607      	mov	r7, r0
 800ae54:	f109 0901 	add.w	r9, r9, #1
 800ae58:	e772      	b.n	800ad40 <_dtoa_r+0x9f0>
 800ae5a:	f000 fc77 	bl	800b74c <__multadd>
 800ae5e:	4639      	mov	r1, r7
 800ae60:	4680      	mov	r8, r0
 800ae62:	2300      	movs	r3, #0
 800ae64:	220a      	movs	r2, #10
 800ae66:	4620      	mov	r0, r4
 800ae68:	f000 fc70 	bl	800b74c <__multadd>
 800ae6c:	4607      	mov	r7, r0
 800ae6e:	e7f1      	b.n	800ae54 <_dtoa_r+0xb04>
 800ae70:	9b03      	ldr	r3, [sp, #12]
 800ae72:	9302      	str	r3, [sp, #8]
 800ae74:	9d01      	ldr	r5, [sp, #4]
 800ae76:	ee18 0a10 	vmov	r0, s16
 800ae7a:	4631      	mov	r1, r6
 800ae7c:	f7ff f9dc 	bl	800a238 <quorem>
 800ae80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae84:	9b01      	ldr	r3, [sp, #4]
 800ae86:	f805 ab01 	strb.w	sl, [r5], #1
 800ae8a:	1aea      	subs	r2, r5, r3
 800ae8c:	9b02      	ldr	r3, [sp, #8]
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	dd09      	ble.n	800aea6 <_dtoa_r+0xb56>
 800ae92:	ee18 1a10 	vmov	r1, s16
 800ae96:	2300      	movs	r3, #0
 800ae98:	220a      	movs	r2, #10
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f000 fc56 	bl	800b74c <__multadd>
 800aea0:	ee08 0a10 	vmov	s16, r0
 800aea4:	e7e7      	b.n	800ae76 <_dtoa_r+0xb26>
 800aea6:	9b02      	ldr	r3, [sp, #8]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	bfc8      	it	gt
 800aeac:	461d      	movgt	r5, r3
 800aeae:	9b01      	ldr	r3, [sp, #4]
 800aeb0:	bfd8      	it	le
 800aeb2:	2501      	movle	r5, #1
 800aeb4:	441d      	add	r5, r3
 800aeb6:	f04f 0800 	mov.w	r8, #0
 800aeba:	ee18 1a10 	vmov	r1, s16
 800aebe:	2201      	movs	r2, #1
 800aec0:	4620      	mov	r0, r4
 800aec2:	f000 fe3d 	bl	800bb40 <__lshift>
 800aec6:	4631      	mov	r1, r6
 800aec8:	ee08 0a10 	vmov	s16, r0
 800aecc:	f000 fea8 	bl	800bc20 <__mcmp>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	dc91      	bgt.n	800adf8 <_dtoa_r+0xaa8>
 800aed4:	d102      	bne.n	800aedc <_dtoa_r+0xb8c>
 800aed6:	f01a 0f01 	tst.w	sl, #1
 800aeda:	d18d      	bne.n	800adf8 <_dtoa_r+0xaa8>
 800aedc:	462b      	mov	r3, r5
 800aede:	461d      	mov	r5, r3
 800aee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aee4:	2a30      	cmp	r2, #48	; 0x30
 800aee6:	d0fa      	beq.n	800aede <_dtoa_r+0xb8e>
 800aee8:	e6d7      	b.n	800ac9a <_dtoa_r+0x94a>
 800aeea:	9a01      	ldr	r2, [sp, #4]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d184      	bne.n	800adfa <_dtoa_r+0xaaa>
 800aef0:	9b00      	ldr	r3, [sp, #0]
 800aef2:	3301      	adds	r3, #1
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	2331      	movs	r3, #49	; 0x31
 800aef8:	7013      	strb	r3, [r2, #0]
 800aefa:	e6ce      	b.n	800ac9a <_dtoa_r+0x94a>
 800aefc:	4b09      	ldr	r3, [pc, #36]	; (800af24 <_dtoa_r+0xbd4>)
 800aefe:	f7ff ba95 	b.w	800a42c <_dtoa_r+0xdc>
 800af02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af04:	2b00      	cmp	r3, #0
 800af06:	f47f aa6e 	bne.w	800a3e6 <_dtoa_r+0x96>
 800af0a:	4b07      	ldr	r3, [pc, #28]	; (800af28 <_dtoa_r+0xbd8>)
 800af0c:	f7ff ba8e 	b.w	800a42c <_dtoa_r+0xdc>
 800af10:	9b02      	ldr	r3, [sp, #8]
 800af12:	2b00      	cmp	r3, #0
 800af14:	dcae      	bgt.n	800ae74 <_dtoa_r+0xb24>
 800af16:	9b06      	ldr	r3, [sp, #24]
 800af18:	2b02      	cmp	r3, #2
 800af1a:	f73f aea8 	bgt.w	800ac6e <_dtoa_r+0x91e>
 800af1e:	e7a9      	b.n	800ae74 <_dtoa_r+0xb24>
 800af20:	080106e0 	.word	0x080106e0
 800af24:	080108d9 	.word	0x080108d9
 800af28:	08010661 	.word	0x08010661

0800af2c <rshift>:
 800af2c:	6903      	ldr	r3, [r0, #16]
 800af2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800af32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800af3a:	f100 0414 	add.w	r4, r0, #20
 800af3e:	dd45      	ble.n	800afcc <rshift+0xa0>
 800af40:	f011 011f 	ands.w	r1, r1, #31
 800af44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800af48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800af4c:	d10c      	bne.n	800af68 <rshift+0x3c>
 800af4e:	f100 0710 	add.w	r7, r0, #16
 800af52:	4629      	mov	r1, r5
 800af54:	42b1      	cmp	r1, r6
 800af56:	d334      	bcc.n	800afc2 <rshift+0x96>
 800af58:	1a9b      	subs	r3, r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	1eea      	subs	r2, r5, #3
 800af5e:	4296      	cmp	r6, r2
 800af60:	bf38      	it	cc
 800af62:	2300      	movcc	r3, #0
 800af64:	4423      	add	r3, r4
 800af66:	e015      	b.n	800af94 <rshift+0x68>
 800af68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800af6c:	f1c1 0820 	rsb	r8, r1, #32
 800af70:	40cf      	lsrs	r7, r1
 800af72:	f105 0e04 	add.w	lr, r5, #4
 800af76:	46a1      	mov	r9, r4
 800af78:	4576      	cmp	r6, lr
 800af7a:	46f4      	mov	ip, lr
 800af7c:	d815      	bhi.n	800afaa <rshift+0x7e>
 800af7e:	1a9a      	subs	r2, r3, r2
 800af80:	0092      	lsls	r2, r2, #2
 800af82:	3a04      	subs	r2, #4
 800af84:	3501      	adds	r5, #1
 800af86:	42ae      	cmp	r6, r5
 800af88:	bf38      	it	cc
 800af8a:	2200      	movcc	r2, #0
 800af8c:	18a3      	adds	r3, r4, r2
 800af8e:	50a7      	str	r7, [r4, r2]
 800af90:	b107      	cbz	r7, 800af94 <rshift+0x68>
 800af92:	3304      	adds	r3, #4
 800af94:	1b1a      	subs	r2, r3, r4
 800af96:	42a3      	cmp	r3, r4
 800af98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af9c:	bf08      	it	eq
 800af9e:	2300      	moveq	r3, #0
 800afa0:	6102      	str	r2, [r0, #16]
 800afa2:	bf08      	it	eq
 800afa4:	6143      	streq	r3, [r0, #20]
 800afa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afaa:	f8dc c000 	ldr.w	ip, [ip]
 800afae:	fa0c fc08 	lsl.w	ip, ip, r8
 800afb2:	ea4c 0707 	orr.w	r7, ip, r7
 800afb6:	f849 7b04 	str.w	r7, [r9], #4
 800afba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800afbe:	40cf      	lsrs	r7, r1
 800afc0:	e7da      	b.n	800af78 <rshift+0x4c>
 800afc2:	f851 cb04 	ldr.w	ip, [r1], #4
 800afc6:	f847 cf04 	str.w	ip, [r7, #4]!
 800afca:	e7c3      	b.n	800af54 <rshift+0x28>
 800afcc:	4623      	mov	r3, r4
 800afce:	e7e1      	b.n	800af94 <rshift+0x68>

0800afd0 <__hexdig_fun>:
 800afd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800afd4:	2b09      	cmp	r3, #9
 800afd6:	d802      	bhi.n	800afde <__hexdig_fun+0xe>
 800afd8:	3820      	subs	r0, #32
 800afda:	b2c0      	uxtb	r0, r0
 800afdc:	4770      	bx	lr
 800afde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800afe2:	2b05      	cmp	r3, #5
 800afe4:	d801      	bhi.n	800afea <__hexdig_fun+0x1a>
 800afe6:	3847      	subs	r0, #71	; 0x47
 800afe8:	e7f7      	b.n	800afda <__hexdig_fun+0xa>
 800afea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800afee:	2b05      	cmp	r3, #5
 800aff0:	d801      	bhi.n	800aff6 <__hexdig_fun+0x26>
 800aff2:	3827      	subs	r0, #39	; 0x27
 800aff4:	e7f1      	b.n	800afda <__hexdig_fun+0xa>
 800aff6:	2000      	movs	r0, #0
 800aff8:	4770      	bx	lr
	...

0800affc <__gethex>:
 800affc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b000:	ed2d 8b02 	vpush	{d8}
 800b004:	b089      	sub	sp, #36	; 0x24
 800b006:	ee08 0a10 	vmov	s16, r0
 800b00a:	9304      	str	r3, [sp, #16]
 800b00c:	4bb4      	ldr	r3, [pc, #720]	; (800b2e0 <__gethex+0x2e4>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	9301      	str	r3, [sp, #4]
 800b012:	4618      	mov	r0, r3
 800b014:	468b      	mov	fp, r1
 800b016:	4690      	mov	r8, r2
 800b018:	f7f5 f8ec 	bl	80001f4 <strlen>
 800b01c:	9b01      	ldr	r3, [sp, #4]
 800b01e:	f8db 2000 	ldr.w	r2, [fp]
 800b022:	4403      	add	r3, r0
 800b024:	4682      	mov	sl, r0
 800b026:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b02a:	9305      	str	r3, [sp, #20]
 800b02c:	1c93      	adds	r3, r2, #2
 800b02e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b032:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b036:	32fe      	adds	r2, #254	; 0xfe
 800b038:	18d1      	adds	r1, r2, r3
 800b03a:	461f      	mov	r7, r3
 800b03c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b040:	9100      	str	r1, [sp, #0]
 800b042:	2830      	cmp	r0, #48	; 0x30
 800b044:	d0f8      	beq.n	800b038 <__gethex+0x3c>
 800b046:	f7ff ffc3 	bl	800afd0 <__hexdig_fun>
 800b04a:	4604      	mov	r4, r0
 800b04c:	2800      	cmp	r0, #0
 800b04e:	d13a      	bne.n	800b0c6 <__gethex+0xca>
 800b050:	9901      	ldr	r1, [sp, #4]
 800b052:	4652      	mov	r2, sl
 800b054:	4638      	mov	r0, r7
 800b056:	f001 fdb3 	bl	800cbc0 <strncmp>
 800b05a:	4605      	mov	r5, r0
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d168      	bne.n	800b132 <__gethex+0x136>
 800b060:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b064:	eb07 060a 	add.w	r6, r7, sl
 800b068:	f7ff ffb2 	bl	800afd0 <__hexdig_fun>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d062      	beq.n	800b136 <__gethex+0x13a>
 800b070:	4633      	mov	r3, r6
 800b072:	7818      	ldrb	r0, [r3, #0]
 800b074:	2830      	cmp	r0, #48	; 0x30
 800b076:	461f      	mov	r7, r3
 800b078:	f103 0301 	add.w	r3, r3, #1
 800b07c:	d0f9      	beq.n	800b072 <__gethex+0x76>
 800b07e:	f7ff ffa7 	bl	800afd0 <__hexdig_fun>
 800b082:	2301      	movs	r3, #1
 800b084:	fab0 f480 	clz	r4, r0
 800b088:	0964      	lsrs	r4, r4, #5
 800b08a:	4635      	mov	r5, r6
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	463a      	mov	r2, r7
 800b090:	4616      	mov	r6, r2
 800b092:	3201      	adds	r2, #1
 800b094:	7830      	ldrb	r0, [r6, #0]
 800b096:	f7ff ff9b 	bl	800afd0 <__hexdig_fun>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d1f8      	bne.n	800b090 <__gethex+0x94>
 800b09e:	9901      	ldr	r1, [sp, #4]
 800b0a0:	4652      	mov	r2, sl
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	f001 fd8c 	bl	800cbc0 <strncmp>
 800b0a8:	b980      	cbnz	r0, 800b0cc <__gethex+0xd0>
 800b0aa:	b94d      	cbnz	r5, 800b0c0 <__gethex+0xc4>
 800b0ac:	eb06 050a 	add.w	r5, r6, sl
 800b0b0:	462a      	mov	r2, r5
 800b0b2:	4616      	mov	r6, r2
 800b0b4:	3201      	adds	r2, #1
 800b0b6:	7830      	ldrb	r0, [r6, #0]
 800b0b8:	f7ff ff8a 	bl	800afd0 <__hexdig_fun>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d1f8      	bne.n	800b0b2 <__gethex+0xb6>
 800b0c0:	1bad      	subs	r5, r5, r6
 800b0c2:	00ad      	lsls	r5, r5, #2
 800b0c4:	e004      	b.n	800b0d0 <__gethex+0xd4>
 800b0c6:	2400      	movs	r4, #0
 800b0c8:	4625      	mov	r5, r4
 800b0ca:	e7e0      	b.n	800b08e <__gethex+0x92>
 800b0cc:	2d00      	cmp	r5, #0
 800b0ce:	d1f7      	bne.n	800b0c0 <__gethex+0xc4>
 800b0d0:	7833      	ldrb	r3, [r6, #0]
 800b0d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b0d6:	2b50      	cmp	r3, #80	; 0x50
 800b0d8:	d13b      	bne.n	800b152 <__gethex+0x156>
 800b0da:	7873      	ldrb	r3, [r6, #1]
 800b0dc:	2b2b      	cmp	r3, #43	; 0x2b
 800b0de:	d02c      	beq.n	800b13a <__gethex+0x13e>
 800b0e0:	2b2d      	cmp	r3, #45	; 0x2d
 800b0e2:	d02e      	beq.n	800b142 <__gethex+0x146>
 800b0e4:	1c71      	adds	r1, r6, #1
 800b0e6:	f04f 0900 	mov.w	r9, #0
 800b0ea:	7808      	ldrb	r0, [r1, #0]
 800b0ec:	f7ff ff70 	bl	800afd0 <__hexdig_fun>
 800b0f0:	1e43      	subs	r3, r0, #1
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	2b18      	cmp	r3, #24
 800b0f6:	d82c      	bhi.n	800b152 <__gethex+0x156>
 800b0f8:	f1a0 0210 	sub.w	r2, r0, #16
 800b0fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b100:	f7ff ff66 	bl	800afd0 <__hexdig_fun>
 800b104:	1e43      	subs	r3, r0, #1
 800b106:	b2db      	uxtb	r3, r3
 800b108:	2b18      	cmp	r3, #24
 800b10a:	d91d      	bls.n	800b148 <__gethex+0x14c>
 800b10c:	f1b9 0f00 	cmp.w	r9, #0
 800b110:	d000      	beq.n	800b114 <__gethex+0x118>
 800b112:	4252      	negs	r2, r2
 800b114:	4415      	add	r5, r2
 800b116:	f8cb 1000 	str.w	r1, [fp]
 800b11a:	b1e4      	cbz	r4, 800b156 <__gethex+0x15a>
 800b11c:	9b00      	ldr	r3, [sp, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	bf14      	ite	ne
 800b122:	2700      	movne	r7, #0
 800b124:	2706      	moveq	r7, #6
 800b126:	4638      	mov	r0, r7
 800b128:	b009      	add	sp, #36	; 0x24
 800b12a:	ecbd 8b02 	vpop	{d8}
 800b12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b132:	463e      	mov	r6, r7
 800b134:	4625      	mov	r5, r4
 800b136:	2401      	movs	r4, #1
 800b138:	e7ca      	b.n	800b0d0 <__gethex+0xd4>
 800b13a:	f04f 0900 	mov.w	r9, #0
 800b13e:	1cb1      	adds	r1, r6, #2
 800b140:	e7d3      	b.n	800b0ea <__gethex+0xee>
 800b142:	f04f 0901 	mov.w	r9, #1
 800b146:	e7fa      	b.n	800b13e <__gethex+0x142>
 800b148:	230a      	movs	r3, #10
 800b14a:	fb03 0202 	mla	r2, r3, r2, r0
 800b14e:	3a10      	subs	r2, #16
 800b150:	e7d4      	b.n	800b0fc <__gethex+0x100>
 800b152:	4631      	mov	r1, r6
 800b154:	e7df      	b.n	800b116 <__gethex+0x11a>
 800b156:	1bf3      	subs	r3, r6, r7
 800b158:	3b01      	subs	r3, #1
 800b15a:	4621      	mov	r1, r4
 800b15c:	2b07      	cmp	r3, #7
 800b15e:	dc0b      	bgt.n	800b178 <__gethex+0x17c>
 800b160:	ee18 0a10 	vmov	r0, s16
 800b164:	f000 fa90 	bl	800b688 <_Balloc>
 800b168:	4604      	mov	r4, r0
 800b16a:	b940      	cbnz	r0, 800b17e <__gethex+0x182>
 800b16c:	4b5d      	ldr	r3, [pc, #372]	; (800b2e4 <__gethex+0x2e8>)
 800b16e:	4602      	mov	r2, r0
 800b170:	21de      	movs	r1, #222	; 0xde
 800b172:	485d      	ldr	r0, [pc, #372]	; (800b2e8 <__gethex+0x2ec>)
 800b174:	f001 fdf4 	bl	800cd60 <__assert_func>
 800b178:	3101      	adds	r1, #1
 800b17a:	105b      	asrs	r3, r3, #1
 800b17c:	e7ee      	b.n	800b15c <__gethex+0x160>
 800b17e:	f100 0914 	add.w	r9, r0, #20
 800b182:	f04f 0b00 	mov.w	fp, #0
 800b186:	f1ca 0301 	rsb	r3, sl, #1
 800b18a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b18e:	f8cd b000 	str.w	fp, [sp]
 800b192:	9306      	str	r3, [sp, #24]
 800b194:	42b7      	cmp	r7, r6
 800b196:	d340      	bcc.n	800b21a <__gethex+0x21e>
 800b198:	9802      	ldr	r0, [sp, #8]
 800b19a:	9b00      	ldr	r3, [sp, #0]
 800b19c:	f840 3b04 	str.w	r3, [r0], #4
 800b1a0:	eba0 0009 	sub.w	r0, r0, r9
 800b1a4:	1080      	asrs	r0, r0, #2
 800b1a6:	0146      	lsls	r6, r0, #5
 800b1a8:	6120      	str	r0, [r4, #16]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 fb5e 	bl	800b86c <__hi0bits>
 800b1b0:	1a30      	subs	r0, r6, r0
 800b1b2:	f8d8 6000 	ldr.w	r6, [r8]
 800b1b6:	42b0      	cmp	r0, r6
 800b1b8:	dd63      	ble.n	800b282 <__gethex+0x286>
 800b1ba:	1b87      	subs	r7, r0, r6
 800b1bc:	4639      	mov	r1, r7
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f000 ff02 	bl	800bfc8 <__any_on>
 800b1c4:	4682      	mov	sl, r0
 800b1c6:	b1a8      	cbz	r0, 800b1f4 <__gethex+0x1f8>
 800b1c8:	1e7b      	subs	r3, r7, #1
 800b1ca:	1159      	asrs	r1, r3, #5
 800b1cc:	f003 021f 	and.w	r2, r3, #31
 800b1d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b1d4:	f04f 0a01 	mov.w	sl, #1
 800b1d8:	fa0a f202 	lsl.w	r2, sl, r2
 800b1dc:	420a      	tst	r2, r1
 800b1de:	d009      	beq.n	800b1f4 <__gethex+0x1f8>
 800b1e0:	4553      	cmp	r3, sl
 800b1e2:	dd05      	ble.n	800b1f0 <__gethex+0x1f4>
 800b1e4:	1eb9      	subs	r1, r7, #2
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f000 feee 	bl	800bfc8 <__any_on>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d145      	bne.n	800b27c <__gethex+0x280>
 800b1f0:	f04f 0a02 	mov.w	sl, #2
 800b1f4:	4639      	mov	r1, r7
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f7ff fe98 	bl	800af2c <rshift>
 800b1fc:	443d      	add	r5, r7
 800b1fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b202:	42ab      	cmp	r3, r5
 800b204:	da4c      	bge.n	800b2a0 <__gethex+0x2a4>
 800b206:	ee18 0a10 	vmov	r0, s16
 800b20a:	4621      	mov	r1, r4
 800b20c:	f000 fa7c 	bl	800b708 <_Bfree>
 800b210:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b212:	2300      	movs	r3, #0
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	27a3      	movs	r7, #163	; 0xa3
 800b218:	e785      	b.n	800b126 <__gethex+0x12a>
 800b21a:	1e73      	subs	r3, r6, #1
 800b21c:	9a05      	ldr	r2, [sp, #20]
 800b21e:	9303      	str	r3, [sp, #12]
 800b220:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b224:	4293      	cmp	r3, r2
 800b226:	d019      	beq.n	800b25c <__gethex+0x260>
 800b228:	f1bb 0f20 	cmp.w	fp, #32
 800b22c:	d107      	bne.n	800b23e <__gethex+0x242>
 800b22e:	9b02      	ldr	r3, [sp, #8]
 800b230:	9a00      	ldr	r2, [sp, #0]
 800b232:	f843 2b04 	str.w	r2, [r3], #4
 800b236:	9302      	str	r3, [sp, #8]
 800b238:	2300      	movs	r3, #0
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	469b      	mov	fp, r3
 800b23e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b242:	f7ff fec5 	bl	800afd0 <__hexdig_fun>
 800b246:	9b00      	ldr	r3, [sp, #0]
 800b248:	f000 000f 	and.w	r0, r0, #15
 800b24c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b250:	4303      	orrs	r3, r0
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	f10b 0b04 	add.w	fp, fp, #4
 800b258:	9b03      	ldr	r3, [sp, #12]
 800b25a:	e00d      	b.n	800b278 <__gethex+0x27c>
 800b25c:	9b03      	ldr	r3, [sp, #12]
 800b25e:	9a06      	ldr	r2, [sp, #24]
 800b260:	4413      	add	r3, r2
 800b262:	42bb      	cmp	r3, r7
 800b264:	d3e0      	bcc.n	800b228 <__gethex+0x22c>
 800b266:	4618      	mov	r0, r3
 800b268:	9901      	ldr	r1, [sp, #4]
 800b26a:	9307      	str	r3, [sp, #28]
 800b26c:	4652      	mov	r2, sl
 800b26e:	f001 fca7 	bl	800cbc0 <strncmp>
 800b272:	9b07      	ldr	r3, [sp, #28]
 800b274:	2800      	cmp	r0, #0
 800b276:	d1d7      	bne.n	800b228 <__gethex+0x22c>
 800b278:	461e      	mov	r6, r3
 800b27a:	e78b      	b.n	800b194 <__gethex+0x198>
 800b27c:	f04f 0a03 	mov.w	sl, #3
 800b280:	e7b8      	b.n	800b1f4 <__gethex+0x1f8>
 800b282:	da0a      	bge.n	800b29a <__gethex+0x29e>
 800b284:	1a37      	subs	r7, r6, r0
 800b286:	4621      	mov	r1, r4
 800b288:	ee18 0a10 	vmov	r0, s16
 800b28c:	463a      	mov	r2, r7
 800b28e:	f000 fc57 	bl	800bb40 <__lshift>
 800b292:	1bed      	subs	r5, r5, r7
 800b294:	4604      	mov	r4, r0
 800b296:	f100 0914 	add.w	r9, r0, #20
 800b29a:	f04f 0a00 	mov.w	sl, #0
 800b29e:	e7ae      	b.n	800b1fe <__gethex+0x202>
 800b2a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b2a4:	42a8      	cmp	r0, r5
 800b2a6:	dd72      	ble.n	800b38e <__gethex+0x392>
 800b2a8:	1b45      	subs	r5, r0, r5
 800b2aa:	42ae      	cmp	r6, r5
 800b2ac:	dc36      	bgt.n	800b31c <__gethex+0x320>
 800b2ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2b2:	2b02      	cmp	r3, #2
 800b2b4:	d02a      	beq.n	800b30c <__gethex+0x310>
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d02c      	beq.n	800b314 <__gethex+0x318>
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d11c      	bne.n	800b2f8 <__gethex+0x2fc>
 800b2be:	42ae      	cmp	r6, r5
 800b2c0:	d11a      	bne.n	800b2f8 <__gethex+0x2fc>
 800b2c2:	2e01      	cmp	r6, #1
 800b2c4:	d112      	bne.n	800b2ec <__gethex+0x2f0>
 800b2c6:	9a04      	ldr	r2, [sp, #16]
 800b2c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b2cc:	6013      	str	r3, [r2, #0]
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	6123      	str	r3, [r4, #16]
 800b2d2:	f8c9 3000 	str.w	r3, [r9]
 800b2d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2d8:	2762      	movs	r7, #98	; 0x62
 800b2da:	601c      	str	r4, [r3, #0]
 800b2dc:	e723      	b.n	800b126 <__gethex+0x12a>
 800b2de:	bf00      	nop
 800b2e0:	08010758 	.word	0x08010758
 800b2e4:	080106e0 	.word	0x080106e0
 800b2e8:	080106f1 	.word	0x080106f1
 800b2ec:	1e71      	subs	r1, r6, #1
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f000 fe6a 	bl	800bfc8 <__any_on>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d1e6      	bne.n	800b2c6 <__gethex+0x2ca>
 800b2f8:	ee18 0a10 	vmov	r0, s16
 800b2fc:	4621      	mov	r1, r4
 800b2fe:	f000 fa03 	bl	800b708 <_Bfree>
 800b302:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b304:	2300      	movs	r3, #0
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	2750      	movs	r7, #80	; 0x50
 800b30a:	e70c      	b.n	800b126 <__gethex+0x12a>
 800b30c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1f2      	bne.n	800b2f8 <__gethex+0x2fc>
 800b312:	e7d8      	b.n	800b2c6 <__gethex+0x2ca>
 800b314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1d5      	bne.n	800b2c6 <__gethex+0x2ca>
 800b31a:	e7ed      	b.n	800b2f8 <__gethex+0x2fc>
 800b31c:	1e6f      	subs	r7, r5, #1
 800b31e:	f1ba 0f00 	cmp.w	sl, #0
 800b322:	d131      	bne.n	800b388 <__gethex+0x38c>
 800b324:	b127      	cbz	r7, 800b330 <__gethex+0x334>
 800b326:	4639      	mov	r1, r7
 800b328:	4620      	mov	r0, r4
 800b32a:	f000 fe4d 	bl	800bfc8 <__any_on>
 800b32e:	4682      	mov	sl, r0
 800b330:	117b      	asrs	r3, r7, #5
 800b332:	2101      	movs	r1, #1
 800b334:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b338:	f007 071f 	and.w	r7, r7, #31
 800b33c:	fa01 f707 	lsl.w	r7, r1, r7
 800b340:	421f      	tst	r7, r3
 800b342:	4629      	mov	r1, r5
 800b344:	4620      	mov	r0, r4
 800b346:	bf18      	it	ne
 800b348:	f04a 0a02 	orrne.w	sl, sl, #2
 800b34c:	1b76      	subs	r6, r6, r5
 800b34e:	f7ff fded 	bl	800af2c <rshift>
 800b352:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b356:	2702      	movs	r7, #2
 800b358:	f1ba 0f00 	cmp.w	sl, #0
 800b35c:	d048      	beq.n	800b3f0 <__gethex+0x3f4>
 800b35e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b362:	2b02      	cmp	r3, #2
 800b364:	d015      	beq.n	800b392 <__gethex+0x396>
 800b366:	2b03      	cmp	r3, #3
 800b368:	d017      	beq.n	800b39a <__gethex+0x39e>
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d109      	bne.n	800b382 <__gethex+0x386>
 800b36e:	f01a 0f02 	tst.w	sl, #2
 800b372:	d006      	beq.n	800b382 <__gethex+0x386>
 800b374:	f8d9 0000 	ldr.w	r0, [r9]
 800b378:	ea4a 0a00 	orr.w	sl, sl, r0
 800b37c:	f01a 0f01 	tst.w	sl, #1
 800b380:	d10e      	bne.n	800b3a0 <__gethex+0x3a4>
 800b382:	f047 0710 	orr.w	r7, r7, #16
 800b386:	e033      	b.n	800b3f0 <__gethex+0x3f4>
 800b388:	f04f 0a01 	mov.w	sl, #1
 800b38c:	e7d0      	b.n	800b330 <__gethex+0x334>
 800b38e:	2701      	movs	r7, #1
 800b390:	e7e2      	b.n	800b358 <__gethex+0x35c>
 800b392:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b394:	f1c3 0301 	rsb	r3, r3, #1
 800b398:	9315      	str	r3, [sp, #84]	; 0x54
 800b39a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d0f0      	beq.n	800b382 <__gethex+0x386>
 800b3a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b3a4:	f104 0314 	add.w	r3, r4, #20
 800b3a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b3ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b3b0:	f04f 0c00 	mov.w	ip, #0
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b3be:	d01c      	beq.n	800b3fa <__gethex+0x3fe>
 800b3c0:	3201      	adds	r2, #1
 800b3c2:	6002      	str	r2, [r0, #0]
 800b3c4:	2f02      	cmp	r7, #2
 800b3c6:	f104 0314 	add.w	r3, r4, #20
 800b3ca:	d13f      	bne.n	800b44c <__gethex+0x450>
 800b3cc:	f8d8 2000 	ldr.w	r2, [r8]
 800b3d0:	3a01      	subs	r2, #1
 800b3d2:	42b2      	cmp	r2, r6
 800b3d4:	d10a      	bne.n	800b3ec <__gethex+0x3f0>
 800b3d6:	1171      	asrs	r1, r6, #5
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b3de:	f006 061f 	and.w	r6, r6, #31
 800b3e2:	fa02 f606 	lsl.w	r6, r2, r6
 800b3e6:	421e      	tst	r6, r3
 800b3e8:	bf18      	it	ne
 800b3ea:	4617      	movne	r7, r2
 800b3ec:	f047 0720 	orr.w	r7, r7, #32
 800b3f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3f2:	601c      	str	r4, [r3, #0]
 800b3f4:	9b04      	ldr	r3, [sp, #16]
 800b3f6:	601d      	str	r5, [r3, #0]
 800b3f8:	e695      	b.n	800b126 <__gethex+0x12a>
 800b3fa:	4299      	cmp	r1, r3
 800b3fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b400:	d8d8      	bhi.n	800b3b4 <__gethex+0x3b8>
 800b402:	68a3      	ldr	r3, [r4, #8]
 800b404:	459b      	cmp	fp, r3
 800b406:	db19      	blt.n	800b43c <__gethex+0x440>
 800b408:	6861      	ldr	r1, [r4, #4]
 800b40a:	ee18 0a10 	vmov	r0, s16
 800b40e:	3101      	adds	r1, #1
 800b410:	f000 f93a 	bl	800b688 <_Balloc>
 800b414:	4681      	mov	r9, r0
 800b416:	b918      	cbnz	r0, 800b420 <__gethex+0x424>
 800b418:	4b1a      	ldr	r3, [pc, #104]	; (800b484 <__gethex+0x488>)
 800b41a:	4602      	mov	r2, r0
 800b41c:	2184      	movs	r1, #132	; 0x84
 800b41e:	e6a8      	b.n	800b172 <__gethex+0x176>
 800b420:	6922      	ldr	r2, [r4, #16]
 800b422:	3202      	adds	r2, #2
 800b424:	f104 010c 	add.w	r1, r4, #12
 800b428:	0092      	lsls	r2, r2, #2
 800b42a:	300c      	adds	r0, #12
 800b42c:	f000 f91e 	bl	800b66c <memcpy>
 800b430:	4621      	mov	r1, r4
 800b432:	ee18 0a10 	vmov	r0, s16
 800b436:	f000 f967 	bl	800b708 <_Bfree>
 800b43a:	464c      	mov	r4, r9
 800b43c:	6923      	ldr	r3, [r4, #16]
 800b43e:	1c5a      	adds	r2, r3, #1
 800b440:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b444:	6122      	str	r2, [r4, #16]
 800b446:	2201      	movs	r2, #1
 800b448:	615a      	str	r2, [r3, #20]
 800b44a:	e7bb      	b.n	800b3c4 <__gethex+0x3c8>
 800b44c:	6922      	ldr	r2, [r4, #16]
 800b44e:	455a      	cmp	r2, fp
 800b450:	dd0b      	ble.n	800b46a <__gethex+0x46e>
 800b452:	2101      	movs	r1, #1
 800b454:	4620      	mov	r0, r4
 800b456:	f7ff fd69 	bl	800af2c <rshift>
 800b45a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b45e:	3501      	adds	r5, #1
 800b460:	42ab      	cmp	r3, r5
 800b462:	f6ff aed0 	blt.w	800b206 <__gethex+0x20a>
 800b466:	2701      	movs	r7, #1
 800b468:	e7c0      	b.n	800b3ec <__gethex+0x3f0>
 800b46a:	f016 061f 	ands.w	r6, r6, #31
 800b46e:	d0fa      	beq.n	800b466 <__gethex+0x46a>
 800b470:	4453      	add	r3, sl
 800b472:	f1c6 0620 	rsb	r6, r6, #32
 800b476:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b47a:	f000 f9f7 	bl	800b86c <__hi0bits>
 800b47e:	42b0      	cmp	r0, r6
 800b480:	dbe7      	blt.n	800b452 <__gethex+0x456>
 800b482:	e7f0      	b.n	800b466 <__gethex+0x46a>
 800b484:	080106e0 	.word	0x080106e0

0800b488 <L_shift>:
 800b488:	f1c2 0208 	rsb	r2, r2, #8
 800b48c:	0092      	lsls	r2, r2, #2
 800b48e:	b570      	push	{r4, r5, r6, lr}
 800b490:	f1c2 0620 	rsb	r6, r2, #32
 800b494:	6843      	ldr	r3, [r0, #4]
 800b496:	6804      	ldr	r4, [r0, #0]
 800b498:	fa03 f506 	lsl.w	r5, r3, r6
 800b49c:	432c      	orrs	r4, r5
 800b49e:	40d3      	lsrs	r3, r2
 800b4a0:	6004      	str	r4, [r0, #0]
 800b4a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b4a6:	4288      	cmp	r0, r1
 800b4a8:	d3f4      	bcc.n	800b494 <L_shift+0xc>
 800b4aa:	bd70      	pop	{r4, r5, r6, pc}

0800b4ac <__match>:
 800b4ac:	b530      	push	{r4, r5, lr}
 800b4ae:	6803      	ldr	r3, [r0, #0]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4b6:	b914      	cbnz	r4, 800b4be <__match+0x12>
 800b4b8:	6003      	str	r3, [r0, #0]
 800b4ba:	2001      	movs	r0, #1
 800b4bc:	bd30      	pop	{r4, r5, pc}
 800b4be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b4c6:	2d19      	cmp	r5, #25
 800b4c8:	bf98      	it	ls
 800b4ca:	3220      	addls	r2, #32
 800b4cc:	42a2      	cmp	r2, r4
 800b4ce:	d0f0      	beq.n	800b4b2 <__match+0x6>
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	e7f3      	b.n	800b4bc <__match+0x10>

0800b4d4 <__hexnan>:
 800b4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d8:	680b      	ldr	r3, [r1, #0]
 800b4da:	115e      	asrs	r6, r3, #5
 800b4dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b4e0:	f013 031f 	ands.w	r3, r3, #31
 800b4e4:	b087      	sub	sp, #28
 800b4e6:	bf18      	it	ne
 800b4e8:	3604      	addne	r6, #4
 800b4ea:	2500      	movs	r5, #0
 800b4ec:	1f37      	subs	r7, r6, #4
 800b4ee:	4690      	mov	r8, r2
 800b4f0:	6802      	ldr	r2, [r0, #0]
 800b4f2:	9301      	str	r3, [sp, #4]
 800b4f4:	4682      	mov	sl, r0
 800b4f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800b4fa:	46b9      	mov	r9, r7
 800b4fc:	463c      	mov	r4, r7
 800b4fe:	9502      	str	r5, [sp, #8]
 800b500:	46ab      	mov	fp, r5
 800b502:	7851      	ldrb	r1, [r2, #1]
 800b504:	1c53      	adds	r3, r2, #1
 800b506:	9303      	str	r3, [sp, #12]
 800b508:	b341      	cbz	r1, 800b55c <__hexnan+0x88>
 800b50a:	4608      	mov	r0, r1
 800b50c:	9205      	str	r2, [sp, #20]
 800b50e:	9104      	str	r1, [sp, #16]
 800b510:	f7ff fd5e 	bl	800afd0 <__hexdig_fun>
 800b514:	2800      	cmp	r0, #0
 800b516:	d14f      	bne.n	800b5b8 <__hexnan+0xe4>
 800b518:	9904      	ldr	r1, [sp, #16]
 800b51a:	9a05      	ldr	r2, [sp, #20]
 800b51c:	2920      	cmp	r1, #32
 800b51e:	d818      	bhi.n	800b552 <__hexnan+0x7e>
 800b520:	9b02      	ldr	r3, [sp, #8]
 800b522:	459b      	cmp	fp, r3
 800b524:	dd13      	ble.n	800b54e <__hexnan+0x7a>
 800b526:	454c      	cmp	r4, r9
 800b528:	d206      	bcs.n	800b538 <__hexnan+0x64>
 800b52a:	2d07      	cmp	r5, #7
 800b52c:	dc04      	bgt.n	800b538 <__hexnan+0x64>
 800b52e:	462a      	mov	r2, r5
 800b530:	4649      	mov	r1, r9
 800b532:	4620      	mov	r0, r4
 800b534:	f7ff ffa8 	bl	800b488 <L_shift>
 800b538:	4544      	cmp	r4, r8
 800b53a:	d950      	bls.n	800b5de <__hexnan+0x10a>
 800b53c:	2300      	movs	r3, #0
 800b53e:	f1a4 0904 	sub.w	r9, r4, #4
 800b542:	f844 3c04 	str.w	r3, [r4, #-4]
 800b546:	f8cd b008 	str.w	fp, [sp, #8]
 800b54a:	464c      	mov	r4, r9
 800b54c:	461d      	mov	r5, r3
 800b54e:	9a03      	ldr	r2, [sp, #12]
 800b550:	e7d7      	b.n	800b502 <__hexnan+0x2e>
 800b552:	2929      	cmp	r1, #41	; 0x29
 800b554:	d156      	bne.n	800b604 <__hexnan+0x130>
 800b556:	3202      	adds	r2, #2
 800b558:	f8ca 2000 	str.w	r2, [sl]
 800b55c:	f1bb 0f00 	cmp.w	fp, #0
 800b560:	d050      	beq.n	800b604 <__hexnan+0x130>
 800b562:	454c      	cmp	r4, r9
 800b564:	d206      	bcs.n	800b574 <__hexnan+0xa0>
 800b566:	2d07      	cmp	r5, #7
 800b568:	dc04      	bgt.n	800b574 <__hexnan+0xa0>
 800b56a:	462a      	mov	r2, r5
 800b56c:	4649      	mov	r1, r9
 800b56e:	4620      	mov	r0, r4
 800b570:	f7ff ff8a 	bl	800b488 <L_shift>
 800b574:	4544      	cmp	r4, r8
 800b576:	d934      	bls.n	800b5e2 <__hexnan+0x10e>
 800b578:	f1a8 0204 	sub.w	r2, r8, #4
 800b57c:	4623      	mov	r3, r4
 800b57e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b582:	f842 1f04 	str.w	r1, [r2, #4]!
 800b586:	429f      	cmp	r7, r3
 800b588:	d2f9      	bcs.n	800b57e <__hexnan+0xaa>
 800b58a:	1b3b      	subs	r3, r7, r4
 800b58c:	f023 0303 	bic.w	r3, r3, #3
 800b590:	3304      	adds	r3, #4
 800b592:	3401      	adds	r4, #1
 800b594:	3e03      	subs	r6, #3
 800b596:	42b4      	cmp	r4, r6
 800b598:	bf88      	it	hi
 800b59a:	2304      	movhi	r3, #4
 800b59c:	4443      	add	r3, r8
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f843 2b04 	str.w	r2, [r3], #4
 800b5a4:	429f      	cmp	r7, r3
 800b5a6:	d2fb      	bcs.n	800b5a0 <__hexnan+0xcc>
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	b91b      	cbnz	r3, 800b5b4 <__hexnan+0xe0>
 800b5ac:	4547      	cmp	r7, r8
 800b5ae:	d127      	bne.n	800b600 <__hexnan+0x12c>
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	603b      	str	r3, [r7, #0]
 800b5b4:	2005      	movs	r0, #5
 800b5b6:	e026      	b.n	800b606 <__hexnan+0x132>
 800b5b8:	3501      	adds	r5, #1
 800b5ba:	2d08      	cmp	r5, #8
 800b5bc:	f10b 0b01 	add.w	fp, fp, #1
 800b5c0:	dd06      	ble.n	800b5d0 <__hexnan+0xfc>
 800b5c2:	4544      	cmp	r4, r8
 800b5c4:	d9c3      	bls.n	800b54e <__hexnan+0x7a>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5cc:	2501      	movs	r5, #1
 800b5ce:	3c04      	subs	r4, #4
 800b5d0:	6822      	ldr	r2, [r4, #0]
 800b5d2:	f000 000f 	and.w	r0, r0, #15
 800b5d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b5da:	6022      	str	r2, [r4, #0]
 800b5dc:	e7b7      	b.n	800b54e <__hexnan+0x7a>
 800b5de:	2508      	movs	r5, #8
 800b5e0:	e7b5      	b.n	800b54e <__hexnan+0x7a>
 800b5e2:	9b01      	ldr	r3, [sp, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d0df      	beq.n	800b5a8 <__hexnan+0xd4>
 800b5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ec:	f1c3 0320 	rsb	r3, r3, #32
 800b5f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b5f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b5f8:	401a      	ands	r2, r3
 800b5fa:	f846 2c04 	str.w	r2, [r6, #-4]
 800b5fe:	e7d3      	b.n	800b5a8 <__hexnan+0xd4>
 800b600:	3f04      	subs	r7, #4
 800b602:	e7d1      	b.n	800b5a8 <__hexnan+0xd4>
 800b604:	2004      	movs	r0, #4
 800b606:	b007      	add	sp, #28
 800b608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b60c <_localeconv_r>:
 800b60c:	4800      	ldr	r0, [pc, #0]	; (800b610 <_localeconv_r+0x4>)
 800b60e:	4770      	bx	lr
 800b610:	20000174 	.word	0x20000174

0800b614 <_lseek_r>:
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	4d07      	ldr	r5, [pc, #28]	; (800b634 <_lseek_r+0x20>)
 800b618:	4604      	mov	r4, r0
 800b61a:	4608      	mov	r0, r1
 800b61c:	4611      	mov	r1, r2
 800b61e:	2200      	movs	r2, #0
 800b620:	602a      	str	r2, [r5, #0]
 800b622:	461a      	mov	r2, r3
 800b624:	f7fa f829 	bl	800567a <_lseek>
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d102      	bne.n	800b632 <_lseek_r+0x1e>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	b103      	cbz	r3, 800b632 <_lseek_r+0x1e>
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	20009d10 	.word	0x20009d10

0800b638 <malloc>:
 800b638:	4b02      	ldr	r3, [pc, #8]	; (800b644 <malloc+0xc>)
 800b63a:	4601      	mov	r1, r0
 800b63c:	6818      	ldr	r0, [r3, #0]
 800b63e:	f000 bd67 	b.w	800c110 <_malloc_r>
 800b642:	bf00      	nop
 800b644:	2000001c 	.word	0x2000001c

0800b648 <__ascii_mbtowc>:
 800b648:	b082      	sub	sp, #8
 800b64a:	b901      	cbnz	r1, 800b64e <__ascii_mbtowc+0x6>
 800b64c:	a901      	add	r1, sp, #4
 800b64e:	b142      	cbz	r2, 800b662 <__ascii_mbtowc+0x1a>
 800b650:	b14b      	cbz	r3, 800b666 <__ascii_mbtowc+0x1e>
 800b652:	7813      	ldrb	r3, [r2, #0]
 800b654:	600b      	str	r3, [r1, #0]
 800b656:	7812      	ldrb	r2, [r2, #0]
 800b658:	1e10      	subs	r0, r2, #0
 800b65a:	bf18      	it	ne
 800b65c:	2001      	movne	r0, #1
 800b65e:	b002      	add	sp, #8
 800b660:	4770      	bx	lr
 800b662:	4610      	mov	r0, r2
 800b664:	e7fb      	b.n	800b65e <__ascii_mbtowc+0x16>
 800b666:	f06f 0001 	mvn.w	r0, #1
 800b66a:	e7f8      	b.n	800b65e <__ascii_mbtowc+0x16>

0800b66c <memcpy>:
 800b66c:	440a      	add	r2, r1
 800b66e:	4291      	cmp	r1, r2
 800b670:	f100 33ff 	add.w	r3, r0, #4294967295
 800b674:	d100      	bne.n	800b678 <memcpy+0xc>
 800b676:	4770      	bx	lr
 800b678:	b510      	push	{r4, lr}
 800b67a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b67e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b682:	4291      	cmp	r1, r2
 800b684:	d1f9      	bne.n	800b67a <memcpy+0xe>
 800b686:	bd10      	pop	{r4, pc}

0800b688 <_Balloc>:
 800b688:	b570      	push	{r4, r5, r6, lr}
 800b68a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b68c:	4604      	mov	r4, r0
 800b68e:	460d      	mov	r5, r1
 800b690:	b976      	cbnz	r6, 800b6b0 <_Balloc+0x28>
 800b692:	2010      	movs	r0, #16
 800b694:	f7ff ffd0 	bl	800b638 <malloc>
 800b698:	4602      	mov	r2, r0
 800b69a:	6260      	str	r0, [r4, #36]	; 0x24
 800b69c:	b920      	cbnz	r0, 800b6a8 <_Balloc+0x20>
 800b69e:	4b18      	ldr	r3, [pc, #96]	; (800b700 <_Balloc+0x78>)
 800b6a0:	4818      	ldr	r0, [pc, #96]	; (800b704 <_Balloc+0x7c>)
 800b6a2:	2166      	movs	r1, #102	; 0x66
 800b6a4:	f001 fb5c 	bl	800cd60 <__assert_func>
 800b6a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6ac:	6006      	str	r6, [r0, #0]
 800b6ae:	60c6      	str	r6, [r0, #12]
 800b6b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b6b2:	68f3      	ldr	r3, [r6, #12]
 800b6b4:	b183      	cbz	r3, 800b6d8 <_Balloc+0x50>
 800b6b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6be:	b9b8      	cbnz	r0, 800b6f0 <_Balloc+0x68>
 800b6c0:	2101      	movs	r1, #1
 800b6c2:	fa01 f605 	lsl.w	r6, r1, r5
 800b6c6:	1d72      	adds	r2, r6, #5
 800b6c8:	0092      	lsls	r2, r2, #2
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f000 fc9d 	bl	800c00a <_calloc_r>
 800b6d0:	b160      	cbz	r0, 800b6ec <_Balloc+0x64>
 800b6d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6d6:	e00e      	b.n	800b6f6 <_Balloc+0x6e>
 800b6d8:	2221      	movs	r2, #33	; 0x21
 800b6da:	2104      	movs	r1, #4
 800b6dc:	4620      	mov	r0, r4
 800b6de:	f000 fc94 	bl	800c00a <_calloc_r>
 800b6e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6e4:	60f0      	str	r0, [r6, #12]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1e4      	bne.n	800b6b6 <_Balloc+0x2e>
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	bd70      	pop	{r4, r5, r6, pc}
 800b6f0:	6802      	ldr	r2, [r0, #0]
 800b6f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6fc:	e7f7      	b.n	800b6ee <_Balloc+0x66>
 800b6fe:	bf00      	nop
 800b700:	0801066e 	.word	0x0801066e
 800b704:	0801076c 	.word	0x0801076c

0800b708 <_Bfree>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b70c:	4605      	mov	r5, r0
 800b70e:	460c      	mov	r4, r1
 800b710:	b976      	cbnz	r6, 800b730 <_Bfree+0x28>
 800b712:	2010      	movs	r0, #16
 800b714:	f7ff ff90 	bl	800b638 <malloc>
 800b718:	4602      	mov	r2, r0
 800b71a:	6268      	str	r0, [r5, #36]	; 0x24
 800b71c:	b920      	cbnz	r0, 800b728 <_Bfree+0x20>
 800b71e:	4b09      	ldr	r3, [pc, #36]	; (800b744 <_Bfree+0x3c>)
 800b720:	4809      	ldr	r0, [pc, #36]	; (800b748 <_Bfree+0x40>)
 800b722:	218a      	movs	r1, #138	; 0x8a
 800b724:	f001 fb1c 	bl	800cd60 <__assert_func>
 800b728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b72c:	6006      	str	r6, [r0, #0]
 800b72e:	60c6      	str	r6, [r0, #12]
 800b730:	b13c      	cbz	r4, 800b742 <_Bfree+0x3a>
 800b732:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b734:	6862      	ldr	r2, [r4, #4]
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b73c:	6021      	str	r1, [r4, #0]
 800b73e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b742:	bd70      	pop	{r4, r5, r6, pc}
 800b744:	0801066e 	.word	0x0801066e
 800b748:	0801076c 	.word	0x0801076c

0800b74c <__multadd>:
 800b74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b750:	690d      	ldr	r5, [r1, #16]
 800b752:	4607      	mov	r7, r0
 800b754:	460c      	mov	r4, r1
 800b756:	461e      	mov	r6, r3
 800b758:	f101 0c14 	add.w	ip, r1, #20
 800b75c:	2000      	movs	r0, #0
 800b75e:	f8dc 3000 	ldr.w	r3, [ip]
 800b762:	b299      	uxth	r1, r3
 800b764:	fb02 6101 	mla	r1, r2, r1, r6
 800b768:	0c1e      	lsrs	r6, r3, #16
 800b76a:	0c0b      	lsrs	r3, r1, #16
 800b76c:	fb02 3306 	mla	r3, r2, r6, r3
 800b770:	b289      	uxth	r1, r1
 800b772:	3001      	adds	r0, #1
 800b774:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b778:	4285      	cmp	r5, r0
 800b77a:	f84c 1b04 	str.w	r1, [ip], #4
 800b77e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b782:	dcec      	bgt.n	800b75e <__multadd+0x12>
 800b784:	b30e      	cbz	r6, 800b7ca <__multadd+0x7e>
 800b786:	68a3      	ldr	r3, [r4, #8]
 800b788:	42ab      	cmp	r3, r5
 800b78a:	dc19      	bgt.n	800b7c0 <__multadd+0x74>
 800b78c:	6861      	ldr	r1, [r4, #4]
 800b78e:	4638      	mov	r0, r7
 800b790:	3101      	adds	r1, #1
 800b792:	f7ff ff79 	bl	800b688 <_Balloc>
 800b796:	4680      	mov	r8, r0
 800b798:	b928      	cbnz	r0, 800b7a6 <__multadd+0x5a>
 800b79a:	4602      	mov	r2, r0
 800b79c:	4b0c      	ldr	r3, [pc, #48]	; (800b7d0 <__multadd+0x84>)
 800b79e:	480d      	ldr	r0, [pc, #52]	; (800b7d4 <__multadd+0x88>)
 800b7a0:	21b5      	movs	r1, #181	; 0xb5
 800b7a2:	f001 fadd 	bl	800cd60 <__assert_func>
 800b7a6:	6922      	ldr	r2, [r4, #16]
 800b7a8:	3202      	adds	r2, #2
 800b7aa:	f104 010c 	add.w	r1, r4, #12
 800b7ae:	0092      	lsls	r2, r2, #2
 800b7b0:	300c      	adds	r0, #12
 800b7b2:	f7ff ff5b 	bl	800b66c <memcpy>
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	f7ff ffa5 	bl	800b708 <_Bfree>
 800b7be:	4644      	mov	r4, r8
 800b7c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7c4:	3501      	adds	r5, #1
 800b7c6:	615e      	str	r6, [r3, #20]
 800b7c8:	6125      	str	r5, [r4, #16]
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d0:	080106e0 	.word	0x080106e0
 800b7d4:	0801076c 	.word	0x0801076c

0800b7d8 <__s2b>:
 800b7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7dc:	460c      	mov	r4, r1
 800b7de:	4615      	mov	r5, r2
 800b7e0:	461f      	mov	r7, r3
 800b7e2:	2209      	movs	r2, #9
 800b7e4:	3308      	adds	r3, #8
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	db09      	blt.n	800b808 <__s2b+0x30>
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	f7ff ff47 	bl	800b688 <_Balloc>
 800b7fa:	b940      	cbnz	r0, 800b80e <__s2b+0x36>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	4b19      	ldr	r3, [pc, #100]	; (800b864 <__s2b+0x8c>)
 800b800:	4819      	ldr	r0, [pc, #100]	; (800b868 <__s2b+0x90>)
 800b802:	21ce      	movs	r1, #206	; 0xce
 800b804:	f001 faac 	bl	800cd60 <__assert_func>
 800b808:	0052      	lsls	r2, r2, #1
 800b80a:	3101      	adds	r1, #1
 800b80c:	e7f0      	b.n	800b7f0 <__s2b+0x18>
 800b80e:	9b08      	ldr	r3, [sp, #32]
 800b810:	6143      	str	r3, [r0, #20]
 800b812:	2d09      	cmp	r5, #9
 800b814:	f04f 0301 	mov.w	r3, #1
 800b818:	6103      	str	r3, [r0, #16]
 800b81a:	dd16      	ble.n	800b84a <__s2b+0x72>
 800b81c:	f104 0909 	add.w	r9, r4, #9
 800b820:	46c8      	mov	r8, r9
 800b822:	442c      	add	r4, r5
 800b824:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b828:	4601      	mov	r1, r0
 800b82a:	3b30      	subs	r3, #48	; 0x30
 800b82c:	220a      	movs	r2, #10
 800b82e:	4630      	mov	r0, r6
 800b830:	f7ff ff8c 	bl	800b74c <__multadd>
 800b834:	45a0      	cmp	r8, r4
 800b836:	d1f5      	bne.n	800b824 <__s2b+0x4c>
 800b838:	f1a5 0408 	sub.w	r4, r5, #8
 800b83c:	444c      	add	r4, r9
 800b83e:	1b2d      	subs	r5, r5, r4
 800b840:	1963      	adds	r3, r4, r5
 800b842:	42bb      	cmp	r3, r7
 800b844:	db04      	blt.n	800b850 <__s2b+0x78>
 800b846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b84a:	340a      	adds	r4, #10
 800b84c:	2509      	movs	r5, #9
 800b84e:	e7f6      	b.n	800b83e <__s2b+0x66>
 800b850:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b854:	4601      	mov	r1, r0
 800b856:	3b30      	subs	r3, #48	; 0x30
 800b858:	220a      	movs	r2, #10
 800b85a:	4630      	mov	r0, r6
 800b85c:	f7ff ff76 	bl	800b74c <__multadd>
 800b860:	e7ee      	b.n	800b840 <__s2b+0x68>
 800b862:	bf00      	nop
 800b864:	080106e0 	.word	0x080106e0
 800b868:	0801076c 	.word	0x0801076c

0800b86c <__hi0bits>:
 800b86c:	0c03      	lsrs	r3, r0, #16
 800b86e:	041b      	lsls	r3, r3, #16
 800b870:	b9d3      	cbnz	r3, 800b8a8 <__hi0bits+0x3c>
 800b872:	0400      	lsls	r0, r0, #16
 800b874:	2310      	movs	r3, #16
 800b876:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b87a:	bf04      	itt	eq
 800b87c:	0200      	lsleq	r0, r0, #8
 800b87e:	3308      	addeq	r3, #8
 800b880:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b884:	bf04      	itt	eq
 800b886:	0100      	lsleq	r0, r0, #4
 800b888:	3304      	addeq	r3, #4
 800b88a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b88e:	bf04      	itt	eq
 800b890:	0080      	lsleq	r0, r0, #2
 800b892:	3302      	addeq	r3, #2
 800b894:	2800      	cmp	r0, #0
 800b896:	db05      	blt.n	800b8a4 <__hi0bits+0x38>
 800b898:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b89c:	f103 0301 	add.w	r3, r3, #1
 800b8a0:	bf08      	it	eq
 800b8a2:	2320      	moveq	r3, #32
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	4770      	bx	lr
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	e7e4      	b.n	800b876 <__hi0bits+0xa>

0800b8ac <__lo0bits>:
 800b8ac:	6803      	ldr	r3, [r0, #0]
 800b8ae:	f013 0207 	ands.w	r2, r3, #7
 800b8b2:	4601      	mov	r1, r0
 800b8b4:	d00b      	beq.n	800b8ce <__lo0bits+0x22>
 800b8b6:	07da      	lsls	r2, r3, #31
 800b8b8:	d423      	bmi.n	800b902 <__lo0bits+0x56>
 800b8ba:	0798      	lsls	r0, r3, #30
 800b8bc:	bf49      	itett	mi
 800b8be:	085b      	lsrmi	r3, r3, #1
 800b8c0:	089b      	lsrpl	r3, r3, #2
 800b8c2:	2001      	movmi	r0, #1
 800b8c4:	600b      	strmi	r3, [r1, #0]
 800b8c6:	bf5c      	itt	pl
 800b8c8:	600b      	strpl	r3, [r1, #0]
 800b8ca:	2002      	movpl	r0, #2
 800b8cc:	4770      	bx	lr
 800b8ce:	b298      	uxth	r0, r3
 800b8d0:	b9a8      	cbnz	r0, 800b8fe <__lo0bits+0x52>
 800b8d2:	0c1b      	lsrs	r3, r3, #16
 800b8d4:	2010      	movs	r0, #16
 800b8d6:	b2da      	uxtb	r2, r3
 800b8d8:	b90a      	cbnz	r2, 800b8de <__lo0bits+0x32>
 800b8da:	3008      	adds	r0, #8
 800b8dc:	0a1b      	lsrs	r3, r3, #8
 800b8de:	071a      	lsls	r2, r3, #28
 800b8e0:	bf04      	itt	eq
 800b8e2:	091b      	lsreq	r3, r3, #4
 800b8e4:	3004      	addeq	r0, #4
 800b8e6:	079a      	lsls	r2, r3, #30
 800b8e8:	bf04      	itt	eq
 800b8ea:	089b      	lsreq	r3, r3, #2
 800b8ec:	3002      	addeq	r0, #2
 800b8ee:	07da      	lsls	r2, r3, #31
 800b8f0:	d403      	bmi.n	800b8fa <__lo0bits+0x4e>
 800b8f2:	085b      	lsrs	r3, r3, #1
 800b8f4:	f100 0001 	add.w	r0, r0, #1
 800b8f8:	d005      	beq.n	800b906 <__lo0bits+0x5a>
 800b8fa:	600b      	str	r3, [r1, #0]
 800b8fc:	4770      	bx	lr
 800b8fe:	4610      	mov	r0, r2
 800b900:	e7e9      	b.n	800b8d6 <__lo0bits+0x2a>
 800b902:	2000      	movs	r0, #0
 800b904:	4770      	bx	lr
 800b906:	2020      	movs	r0, #32
 800b908:	4770      	bx	lr
	...

0800b90c <__i2b>:
 800b90c:	b510      	push	{r4, lr}
 800b90e:	460c      	mov	r4, r1
 800b910:	2101      	movs	r1, #1
 800b912:	f7ff feb9 	bl	800b688 <_Balloc>
 800b916:	4602      	mov	r2, r0
 800b918:	b928      	cbnz	r0, 800b926 <__i2b+0x1a>
 800b91a:	4b05      	ldr	r3, [pc, #20]	; (800b930 <__i2b+0x24>)
 800b91c:	4805      	ldr	r0, [pc, #20]	; (800b934 <__i2b+0x28>)
 800b91e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b922:	f001 fa1d 	bl	800cd60 <__assert_func>
 800b926:	2301      	movs	r3, #1
 800b928:	6144      	str	r4, [r0, #20]
 800b92a:	6103      	str	r3, [r0, #16]
 800b92c:	bd10      	pop	{r4, pc}
 800b92e:	bf00      	nop
 800b930:	080106e0 	.word	0x080106e0
 800b934:	0801076c 	.word	0x0801076c

0800b938 <__multiply>:
 800b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93c:	4691      	mov	r9, r2
 800b93e:	690a      	ldr	r2, [r1, #16]
 800b940:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b944:	429a      	cmp	r2, r3
 800b946:	bfb8      	it	lt
 800b948:	460b      	movlt	r3, r1
 800b94a:	460c      	mov	r4, r1
 800b94c:	bfbc      	itt	lt
 800b94e:	464c      	movlt	r4, r9
 800b950:	4699      	movlt	r9, r3
 800b952:	6927      	ldr	r7, [r4, #16]
 800b954:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b958:	68a3      	ldr	r3, [r4, #8]
 800b95a:	6861      	ldr	r1, [r4, #4]
 800b95c:	eb07 060a 	add.w	r6, r7, sl
 800b960:	42b3      	cmp	r3, r6
 800b962:	b085      	sub	sp, #20
 800b964:	bfb8      	it	lt
 800b966:	3101      	addlt	r1, #1
 800b968:	f7ff fe8e 	bl	800b688 <_Balloc>
 800b96c:	b930      	cbnz	r0, 800b97c <__multiply+0x44>
 800b96e:	4602      	mov	r2, r0
 800b970:	4b44      	ldr	r3, [pc, #272]	; (800ba84 <__multiply+0x14c>)
 800b972:	4845      	ldr	r0, [pc, #276]	; (800ba88 <__multiply+0x150>)
 800b974:	f240 115d 	movw	r1, #349	; 0x15d
 800b978:	f001 f9f2 	bl	800cd60 <__assert_func>
 800b97c:	f100 0514 	add.w	r5, r0, #20
 800b980:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b984:	462b      	mov	r3, r5
 800b986:	2200      	movs	r2, #0
 800b988:	4543      	cmp	r3, r8
 800b98a:	d321      	bcc.n	800b9d0 <__multiply+0x98>
 800b98c:	f104 0314 	add.w	r3, r4, #20
 800b990:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b994:	f109 0314 	add.w	r3, r9, #20
 800b998:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b99c:	9202      	str	r2, [sp, #8]
 800b99e:	1b3a      	subs	r2, r7, r4
 800b9a0:	3a15      	subs	r2, #21
 800b9a2:	f022 0203 	bic.w	r2, r2, #3
 800b9a6:	3204      	adds	r2, #4
 800b9a8:	f104 0115 	add.w	r1, r4, #21
 800b9ac:	428f      	cmp	r7, r1
 800b9ae:	bf38      	it	cc
 800b9b0:	2204      	movcc	r2, #4
 800b9b2:	9201      	str	r2, [sp, #4]
 800b9b4:	9a02      	ldr	r2, [sp, #8]
 800b9b6:	9303      	str	r3, [sp, #12]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d80c      	bhi.n	800b9d6 <__multiply+0x9e>
 800b9bc:	2e00      	cmp	r6, #0
 800b9be:	dd03      	ble.n	800b9c8 <__multiply+0x90>
 800b9c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d05a      	beq.n	800ba7e <__multiply+0x146>
 800b9c8:	6106      	str	r6, [r0, #16]
 800b9ca:	b005      	add	sp, #20
 800b9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d0:	f843 2b04 	str.w	r2, [r3], #4
 800b9d4:	e7d8      	b.n	800b988 <__multiply+0x50>
 800b9d6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b9da:	f1ba 0f00 	cmp.w	sl, #0
 800b9de:	d024      	beq.n	800ba2a <__multiply+0xf2>
 800b9e0:	f104 0e14 	add.w	lr, r4, #20
 800b9e4:	46a9      	mov	r9, r5
 800b9e6:	f04f 0c00 	mov.w	ip, #0
 800b9ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b9ee:	f8d9 1000 	ldr.w	r1, [r9]
 800b9f2:	fa1f fb82 	uxth.w	fp, r2
 800b9f6:	b289      	uxth	r1, r1
 800b9f8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b9fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ba00:	f8d9 2000 	ldr.w	r2, [r9]
 800ba04:	4461      	add	r1, ip
 800ba06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba0a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ba0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba12:	b289      	uxth	r1, r1
 800ba14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba18:	4577      	cmp	r7, lr
 800ba1a:	f849 1b04 	str.w	r1, [r9], #4
 800ba1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba22:	d8e2      	bhi.n	800b9ea <__multiply+0xb2>
 800ba24:	9a01      	ldr	r2, [sp, #4]
 800ba26:	f845 c002 	str.w	ip, [r5, r2]
 800ba2a:	9a03      	ldr	r2, [sp, #12]
 800ba2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba30:	3304      	adds	r3, #4
 800ba32:	f1b9 0f00 	cmp.w	r9, #0
 800ba36:	d020      	beq.n	800ba7a <__multiply+0x142>
 800ba38:	6829      	ldr	r1, [r5, #0]
 800ba3a:	f104 0c14 	add.w	ip, r4, #20
 800ba3e:	46ae      	mov	lr, r5
 800ba40:	f04f 0a00 	mov.w	sl, #0
 800ba44:	f8bc b000 	ldrh.w	fp, [ip]
 800ba48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ba4c:	fb09 220b 	mla	r2, r9, fp, r2
 800ba50:	4492      	add	sl, r2
 800ba52:	b289      	uxth	r1, r1
 800ba54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ba58:	f84e 1b04 	str.w	r1, [lr], #4
 800ba5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba60:	f8be 1000 	ldrh.w	r1, [lr]
 800ba64:	0c12      	lsrs	r2, r2, #16
 800ba66:	fb09 1102 	mla	r1, r9, r2, r1
 800ba6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ba6e:	4567      	cmp	r7, ip
 800ba70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba74:	d8e6      	bhi.n	800ba44 <__multiply+0x10c>
 800ba76:	9a01      	ldr	r2, [sp, #4]
 800ba78:	50a9      	str	r1, [r5, r2]
 800ba7a:	3504      	adds	r5, #4
 800ba7c:	e79a      	b.n	800b9b4 <__multiply+0x7c>
 800ba7e:	3e01      	subs	r6, #1
 800ba80:	e79c      	b.n	800b9bc <__multiply+0x84>
 800ba82:	bf00      	nop
 800ba84:	080106e0 	.word	0x080106e0
 800ba88:	0801076c 	.word	0x0801076c

0800ba8c <__pow5mult>:
 800ba8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba90:	4615      	mov	r5, r2
 800ba92:	f012 0203 	ands.w	r2, r2, #3
 800ba96:	4606      	mov	r6, r0
 800ba98:	460f      	mov	r7, r1
 800ba9a:	d007      	beq.n	800baac <__pow5mult+0x20>
 800ba9c:	4c25      	ldr	r4, [pc, #148]	; (800bb34 <__pow5mult+0xa8>)
 800ba9e:	3a01      	subs	r2, #1
 800baa0:	2300      	movs	r3, #0
 800baa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800baa6:	f7ff fe51 	bl	800b74c <__multadd>
 800baaa:	4607      	mov	r7, r0
 800baac:	10ad      	asrs	r5, r5, #2
 800baae:	d03d      	beq.n	800bb2c <__pow5mult+0xa0>
 800bab0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bab2:	b97c      	cbnz	r4, 800bad4 <__pow5mult+0x48>
 800bab4:	2010      	movs	r0, #16
 800bab6:	f7ff fdbf 	bl	800b638 <malloc>
 800baba:	4602      	mov	r2, r0
 800babc:	6270      	str	r0, [r6, #36]	; 0x24
 800babe:	b928      	cbnz	r0, 800bacc <__pow5mult+0x40>
 800bac0:	4b1d      	ldr	r3, [pc, #116]	; (800bb38 <__pow5mult+0xac>)
 800bac2:	481e      	ldr	r0, [pc, #120]	; (800bb3c <__pow5mult+0xb0>)
 800bac4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bac8:	f001 f94a 	bl	800cd60 <__assert_func>
 800bacc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bad0:	6004      	str	r4, [r0, #0]
 800bad2:	60c4      	str	r4, [r0, #12]
 800bad4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bad8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800badc:	b94c      	cbnz	r4, 800baf2 <__pow5mult+0x66>
 800bade:	f240 2171 	movw	r1, #625	; 0x271
 800bae2:	4630      	mov	r0, r6
 800bae4:	f7ff ff12 	bl	800b90c <__i2b>
 800bae8:	2300      	movs	r3, #0
 800baea:	f8c8 0008 	str.w	r0, [r8, #8]
 800baee:	4604      	mov	r4, r0
 800baf0:	6003      	str	r3, [r0, #0]
 800baf2:	f04f 0900 	mov.w	r9, #0
 800baf6:	07eb      	lsls	r3, r5, #31
 800baf8:	d50a      	bpl.n	800bb10 <__pow5mult+0x84>
 800bafa:	4639      	mov	r1, r7
 800bafc:	4622      	mov	r2, r4
 800bafe:	4630      	mov	r0, r6
 800bb00:	f7ff ff1a 	bl	800b938 <__multiply>
 800bb04:	4639      	mov	r1, r7
 800bb06:	4680      	mov	r8, r0
 800bb08:	4630      	mov	r0, r6
 800bb0a:	f7ff fdfd 	bl	800b708 <_Bfree>
 800bb0e:	4647      	mov	r7, r8
 800bb10:	106d      	asrs	r5, r5, #1
 800bb12:	d00b      	beq.n	800bb2c <__pow5mult+0xa0>
 800bb14:	6820      	ldr	r0, [r4, #0]
 800bb16:	b938      	cbnz	r0, 800bb28 <__pow5mult+0x9c>
 800bb18:	4622      	mov	r2, r4
 800bb1a:	4621      	mov	r1, r4
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f7ff ff0b 	bl	800b938 <__multiply>
 800bb22:	6020      	str	r0, [r4, #0]
 800bb24:	f8c0 9000 	str.w	r9, [r0]
 800bb28:	4604      	mov	r4, r0
 800bb2a:	e7e4      	b.n	800baf6 <__pow5mult+0x6a>
 800bb2c:	4638      	mov	r0, r7
 800bb2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb32:	bf00      	nop
 800bb34:	080108b8 	.word	0x080108b8
 800bb38:	0801066e 	.word	0x0801066e
 800bb3c:	0801076c 	.word	0x0801076c

0800bb40 <__lshift>:
 800bb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb44:	460c      	mov	r4, r1
 800bb46:	6849      	ldr	r1, [r1, #4]
 800bb48:	6923      	ldr	r3, [r4, #16]
 800bb4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb4e:	68a3      	ldr	r3, [r4, #8]
 800bb50:	4607      	mov	r7, r0
 800bb52:	4691      	mov	r9, r2
 800bb54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb58:	f108 0601 	add.w	r6, r8, #1
 800bb5c:	42b3      	cmp	r3, r6
 800bb5e:	db0b      	blt.n	800bb78 <__lshift+0x38>
 800bb60:	4638      	mov	r0, r7
 800bb62:	f7ff fd91 	bl	800b688 <_Balloc>
 800bb66:	4605      	mov	r5, r0
 800bb68:	b948      	cbnz	r0, 800bb7e <__lshift+0x3e>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	4b2a      	ldr	r3, [pc, #168]	; (800bc18 <__lshift+0xd8>)
 800bb6e:	482b      	ldr	r0, [pc, #172]	; (800bc1c <__lshift+0xdc>)
 800bb70:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bb74:	f001 f8f4 	bl	800cd60 <__assert_func>
 800bb78:	3101      	adds	r1, #1
 800bb7a:	005b      	lsls	r3, r3, #1
 800bb7c:	e7ee      	b.n	800bb5c <__lshift+0x1c>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f100 0114 	add.w	r1, r0, #20
 800bb84:	f100 0210 	add.w	r2, r0, #16
 800bb88:	4618      	mov	r0, r3
 800bb8a:	4553      	cmp	r3, sl
 800bb8c:	db37      	blt.n	800bbfe <__lshift+0xbe>
 800bb8e:	6920      	ldr	r0, [r4, #16]
 800bb90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb94:	f104 0314 	add.w	r3, r4, #20
 800bb98:	f019 091f 	ands.w	r9, r9, #31
 800bb9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bba0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bba4:	d02f      	beq.n	800bc06 <__lshift+0xc6>
 800bba6:	f1c9 0e20 	rsb	lr, r9, #32
 800bbaa:	468a      	mov	sl, r1
 800bbac:	f04f 0c00 	mov.w	ip, #0
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	fa02 f209 	lsl.w	r2, r2, r9
 800bbb6:	ea42 020c 	orr.w	r2, r2, ip
 800bbba:	f84a 2b04 	str.w	r2, [sl], #4
 800bbbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbc2:	4298      	cmp	r0, r3
 800bbc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bbc8:	d8f2      	bhi.n	800bbb0 <__lshift+0x70>
 800bbca:	1b03      	subs	r3, r0, r4
 800bbcc:	3b15      	subs	r3, #21
 800bbce:	f023 0303 	bic.w	r3, r3, #3
 800bbd2:	3304      	adds	r3, #4
 800bbd4:	f104 0215 	add.w	r2, r4, #21
 800bbd8:	4290      	cmp	r0, r2
 800bbda:	bf38      	it	cc
 800bbdc:	2304      	movcc	r3, #4
 800bbde:	f841 c003 	str.w	ip, [r1, r3]
 800bbe2:	f1bc 0f00 	cmp.w	ip, #0
 800bbe6:	d001      	beq.n	800bbec <__lshift+0xac>
 800bbe8:	f108 0602 	add.w	r6, r8, #2
 800bbec:	3e01      	subs	r6, #1
 800bbee:	4638      	mov	r0, r7
 800bbf0:	612e      	str	r6, [r5, #16]
 800bbf2:	4621      	mov	r1, r4
 800bbf4:	f7ff fd88 	bl	800b708 <_Bfree>
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbfe:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc02:	3301      	adds	r3, #1
 800bc04:	e7c1      	b.n	800bb8a <__lshift+0x4a>
 800bc06:	3904      	subs	r1, #4
 800bc08:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc10:	4298      	cmp	r0, r3
 800bc12:	d8f9      	bhi.n	800bc08 <__lshift+0xc8>
 800bc14:	e7ea      	b.n	800bbec <__lshift+0xac>
 800bc16:	bf00      	nop
 800bc18:	080106e0 	.word	0x080106e0
 800bc1c:	0801076c 	.word	0x0801076c

0800bc20 <__mcmp>:
 800bc20:	b530      	push	{r4, r5, lr}
 800bc22:	6902      	ldr	r2, [r0, #16]
 800bc24:	690c      	ldr	r4, [r1, #16]
 800bc26:	1b12      	subs	r2, r2, r4
 800bc28:	d10e      	bne.n	800bc48 <__mcmp+0x28>
 800bc2a:	f100 0314 	add.w	r3, r0, #20
 800bc2e:	3114      	adds	r1, #20
 800bc30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc40:	42a5      	cmp	r5, r4
 800bc42:	d003      	beq.n	800bc4c <__mcmp+0x2c>
 800bc44:	d305      	bcc.n	800bc52 <__mcmp+0x32>
 800bc46:	2201      	movs	r2, #1
 800bc48:	4610      	mov	r0, r2
 800bc4a:	bd30      	pop	{r4, r5, pc}
 800bc4c:	4283      	cmp	r3, r0
 800bc4e:	d3f3      	bcc.n	800bc38 <__mcmp+0x18>
 800bc50:	e7fa      	b.n	800bc48 <__mcmp+0x28>
 800bc52:	f04f 32ff 	mov.w	r2, #4294967295
 800bc56:	e7f7      	b.n	800bc48 <__mcmp+0x28>

0800bc58 <__mdiff>:
 800bc58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	460c      	mov	r4, r1
 800bc5e:	4606      	mov	r6, r0
 800bc60:	4611      	mov	r1, r2
 800bc62:	4620      	mov	r0, r4
 800bc64:	4690      	mov	r8, r2
 800bc66:	f7ff ffdb 	bl	800bc20 <__mcmp>
 800bc6a:	1e05      	subs	r5, r0, #0
 800bc6c:	d110      	bne.n	800bc90 <__mdiff+0x38>
 800bc6e:	4629      	mov	r1, r5
 800bc70:	4630      	mov	r0, r6
 800bc72:	f7ff fd09 	bl	800b688 <_Balloc>
 800bc76:	b930      	cbnz	r0, 800bc86 <__mdiff+0x2e>
 800bc78:	4b3a      	ldr	r3, [pc, #232]	; (800bd64 <__mdiff+0x10c>)
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	f240 2132 	movw	r1, #562	; 0x232
 800bc80:	4839      	ldr	r0, [pc, #228]	; (800bd68 <__mdiff+0x110>)
 800bc82:	f001 f86d 	bl	800cd60 <__assert_func>
 800bc86:	2301      	movs	r3, #1
 800bc88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc90:	bfa4      	itt	ge
 800bc92:	4643      	movge	r3, r8
 800bc94:	46a0      	movge	r8, r4
 800bc96:	4630      	mov	r0, r6
 800bc98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc9c:	bfa6      	itte	ge
 800bc9e:	461c      	movge	r4, r3
 800bca0:	2500      	movge	r5, #0
 800bca2:	2501      	movlt	r5, #1
 800bca4:	f7ff fcf0 	bl	800b688 <_Balloc>
 800bca8:	b920      	cbnz	r0, 800bcb4 <__mdiff+0x5c>
 800bcaa:	4b2e      	ldr	r3, [pc, #184]	; (800bd64 <__mdiff+0x10c>)
 800bcac:	4602      	mov	r2, r0
 800bcae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bcb2:	e7e5      	b.n	800bc80 <__mdiff+0x28>
 800bcb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bcb8:	6926      	ldr	r6, [r4, #16]
 800bcba:	60c5      	str	r5, [r0, #12]
 800bcbc:	f104 0914 	add.w	r9, r4, #20
 800bcc0:	f108 0514 	add.w	r5, r8, #20
 800bcc4:	f100 0e14 	add.w	lr, r0, #20
 800bcc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bccc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bcd0:	f108 0210 	add.w	r2, r8, #16
 800bcd4:	46f2      	mov	sl, lr
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bcdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bce0:	fa1f f883 	uxth.w	r8, r3
 800bce4:	fa11 f18b 	uxtah	r1, r1, fp
 800bce8:	0c1b      	lsrs	r3, r3, #16
 800bcea:	eba1 0808 	sub.w	r8, r1, r8
 800bcee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bcf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bcf6:	fa1f f888 	uxth.w	r8, r8
 800bcfa:	1419      	asrs	r1, r3, #16
 800bcfc:	454e      	cmp	r6, r9
 800bcfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd02:	f84a 3b04 	str.w	r3, [sl], #4
 800bd06:	d8e7      	bhi.n	800bcd8 <__mdiff+0x80>
 800bd08:	1b33      	subs	r3, r6, r4
 800bd0a:	3b15      	subs	r3, #21
 800bd0c:	f023 0303 	bic.w	r3, r3, #3
 800bd10:	3304      	adds	r3, #4
 800bd12:	3415      	adds	r4, #21
 800bd14:	42a6      	cmp	r6, r4
 800bd16:	bf38      	it	cc
 800bd18:	2304      	movcc	r3, #4
 800bd1a:	441d      	add	r5, r3
 800bd1c:	4473      	add	r3, lr
 800bd1e:	469e      	mov	lr, r3
 800bd20:	462e      	mov	r6, r5
 800bd22:	4566      	cmp	r6, ip
 800bd24:	d30e      	bcc.n	800bd44 <__mdiff+0xec>
 800bd26:	f10c 0203 	add.w	r2, ip, #3
 800bd2a:	1b52      	subs	r2, r2, r5
 800bd2c:	f022 0203 	bic.w	r2, r2, #3
 800bd30:	3d03      	subs	r5, #3
 800bd32:	45ac      	cmp	ip, r5
 800bd34:	bf38      	it	cc
 800bd36:	2200      	movcc	r2, #0
 800bd38:	441a      	add	r2, r3
 800bd3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bd3e:	b17b      	cbz	r3, 800bd60 <__mdiff+0x108>
 800bd40:	6107      	str	r7, [r0, #16]
 800bd42:	e7a3      	b.n	800bc8c <__mdiff+0x34>
 800bd44:	f856 8b04 	ldr.w	r8, [r6], #4
 800bd48:	fa11 f288 	uxtah	r2, r1, r8
 800bd4c:	1414      	asrs	r4, r2, #16
 800bd4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bd52:	b292      	uxth	r2, r2
 800bd54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd58:	f84e 2b04 	str.w	r2, [lr], #4
 800bd5c:	1421      	asrs	r1, r4, #16
 800bd5e:	e7e0      	b.n	800bd22 <__mdiff+0xca>
 800bd60:	3f01      	subs	r7, #1
 800bd62:	e7ea      	b.n	800bd3a <__mdiff+0xe2>
 800bd64:	080106e0 	.word	0x080106e0
 800bd68:	0801076c 	.word	0x0801076c

0800bd6c <__ulp>:
 800bd6c:	b082      	sub	sp, #8
 800bd6e:	ed8d 0b00 	vstr	d0, [sp]
 800bd72:	9b01      	ldr	r3, [sp, #4]
 800bd74:	4912      	ldr	r1, [pc, #72]	; (800bdc0 <__ulp+0x54>)
 800bd76:	4019      	ands	r1, r3
 800bd78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bd7c:	2900      	cmp	r1, #0
 800bd7e:	dd05      	ble.n	800bd8c <__ulp+0x20>
 800bd80:	2200      	movs	r2, #0
 800bd82:	460b      	mov	r3, r1
 800bd84:	ec43 2b10 	vmov	d0, r2, r3
 800bd88:	b002      	add	sp, #8
 800bd8a:	4770      	bx	lr
 800bd8c:	4249      	negs	r1, r1
 800bd8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bd92:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bd96:	f04f 0200 	mov.w	r2, #0
 800bd9a:	f04f 0300 	mov.w	r3, #0
 800bd9e:	da04      	bge.n	800bdaa <__ulp+0x3e>
 800bda0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bda4:	fa41 f300 	asr.w	r3, r1, r0
 800bda8:	e7ec      	b.n	800bd84 <__ulp+0x18>
 800bdaa:	f1a0 0114 	sub.w	r1, r0, #20
 800bdae:	291e      	cmp	r1, #30
 800bdb0:	bfda      	itte	le
 800bdb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bdb6:	fa20 f101 	lsrle.w	r1, r0, r1
 800bdba:	2101      	movgt	r1, #1
 800bdbc:	460a      	mov	r2, r1
 800bdbe:	e7e1      	b.n	800bd84 <__ulp+0x18>
 800bdc0:	7ff00000 	.word	0x7ff00000

0800bdc4 <__b2d>:
 800bdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc6:	6905      	ldr	r5, [r0, #16]
 800bdc8:	f100 0714 	add.w	r7, r0, #20
 800bdcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bdd0:	1f2e      	subs	r6, r5, #4
 800bdd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f7ff fd48 	bl	800b86c <__hi0bits>
 800bddc:	f1c0 0320 	rsb	r3, r0, #32
 800bde0:	280a      	cmp	r0, #10
 800bde2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800be60 <__b2d+0x9c>
 800bde6:	600b      	str	r3, [r1, #0]
 800bde8:	dc14      	bgt.n	800be14 <__b2d+0x50>
 800bdea:	f1c0 0e0b 	rsb	lr, r0, #11
 800bdee:	fa24 f10e 	lsr.w	r1, r4, lr
 800bdf2:	42b7      	cmp	r7, r6
 800bdf4:	ea41 030c 	orr.w	r3, r1, ip
 800bdf8:	bf34      	ite	cc
 800bdfa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bdfe:	2100      	movcs	r1, #0
 800be00:	3015      	adds	r0, #21
 800be02:	fa04 f000 	lsl.w	r0, r4, r0
 800be06:	fa21 f10e 	lsr.w	r1, r1, lr
 800be0a:	ea40 0201 	orr.w	r2, r0, r1
 800be0e:	ec43 2b10 	vmov	d0, r2, r3
 800be12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be14:	42b7      	cmp	r7, r6
 800be16:	bf3a      	itte	cc
 800be18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be1c:	f1a5 0608 	subcc.w	r6, r5, #8
 800be20:	2100      	movcs	r1, #0
 800be22:	380b      	subs	r0, #11
 800be24:	d017      	beq.n	800be56 <__b2d+0x92>
 800be26:	f1c0 0c20 	rsb	ip, r0, #32
 800be2a:	fa04 f500 	lsl.w	r5, r4, r0
 800be2e:	42be      	cmp	r6, r7
 800be30:	fa21 f40c 	lsr.w	r4, r1, ip
 800be34:	ea45 0504 	orr.w	r5, r5, r4
 800be38:	bf8c      	ite	hi
 800be3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800be3e:	2400      	movls	r4, #0
 800be40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800be44:	fa01 f000 	lsl.w	r0, r1, r0
 800be48:	fa24 f40c 	lsr.w	r4, r4, ip
 800be4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be50:	ea40 0204 	orr.w	r2, r0, r4
 800be54:	e7db      	b.n	800be0e <__b2d+0x4a>
 800be56:	ea44 030c 	orr.w	r3, r4, ip
 800be5a:	460a      	mov	r2, r1
 800be5c:	e7d7      	b.n	800be0e <__b2d+0x4a>
 800be5e:	bf00      	nop
 800be60:	3ff00000 	.word	0x3ff00000

0800be64 <__d2b>:
 800be64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be68:	4689      	mov	r9, r1
 800be6a:	2101      	movs	r1, #1
 800be6c:	ec57 6b10 	vmov	r6, r7, d0
 800be70:	4690      	mov	r8, r2
 800be72:	f7ff fc09 	bl	800b688 <_Balloc>
 800be76:	4604      	mov	r4, r0
 800be78:	b930      	cbnz	r0, 800be88 <__d2b+0x24>
 800be7a:	4602      	mov	r2, r0
 800be7c:	4b25      	ldr	r3, [pc, #148]	; (800bf14 <__d2b+0xb0>)
 800be7e:	4826      	ldr	r0, [pc, #152]	; (800bf18 <__d2b+0xb4>)
 800be80:	f240 310a 	movw	r1, #778	; 0x30a
 800be84:	f000 ff6c 	bl	800cd60 <__assert_func>
 800be88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be90:	bb35      	cbnz	r5, 800bee0 <__d2b+0x7c>
 800be92:	2e00      	cmp	r6, #0
 800be94:	9301      	str	r3, [sp, #4]
 800be96:	d028      	beq.n	800beea <__d2b+0x86>
 800be98:	4668      	mov	r0, sp
 800be9a:	9600      	str	r6, [sp, #0]
 800be9c:	f7ff fd06 	bl	800b8ac <__lo0bits>
 800bea0:	9900      	ldr	r1, [sp, #0]
 800bea2:	b300      	cbz	r0, 800bee6 <__d2b+0x82>
 800bea4:	9a01      	ldr	r2, [sp, #4]
 800bea6:	f1c0 0320 	rsb	r3, r0, #32
 800beaa:	fa02 f303 	lsl.w	r3, r2, r3
 800beae:	430b      	orrs	r3, r1
 800beb0:	40c2      	lsrs	r2, r0
 800beb2:	6163      	str	r3, [r4, #20]
 800beb4:	9201      	str	r2, [sp, #4]
 800beb6:	9b01      	ldr	r3, [sp, #4]
 800beb8:	61a3      	str	r3, [r4, #24]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	bf14      	ite	ne
 800bebe:	2202      	movne	r2, #2
 800bec0:	2201      	moveq	r2, #1
 800bec2:	6122      	str	r2, [r4, #16]
 800bec4:	b1d5      	cbz	r5, 800befc <__d2b+0x98>
 800bec6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800beca:	4405      	add	r5, r0
 800becc:	f8c9 5000 	str.w	r5, [r9]
 800bed0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bed4:	f8c8 0000 	str.w	r0, [r8]
 800bed8:	4620      	mov	r0, r4
 800beda:	b003      	add	sp, #12
 800bedc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bee4:	e7d5      	b.n	800be92 <__d2b+0x2e>
 800bee6:	6161      	str	r1, [r4, #20]
 800bee8:	e7e5      	b.n	800beb6 <__d2b+0x52>
 800beea:	a801      	add	r0, sp, #4
 800beec:	f7ff fcde 	bl	800b8ac <__lo0bits>
 800bef0:	9b01      	ldr	r3, [sp, #4]
 800bef2:	6163      	str	r3, [r4, #20]
 800bef4:	2201      	movs	r2, #1
 800bef6:	6122      	str	r2, [r4, #16]
 800bef8:	3020      	adds	r0, #32
 800befa:	e7e3      	b.n	800bec4 <__d2b+0x60>
 800befc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf04:	f8c9 0000 	str.w	r0, [r9]
 800bf08:	6918      	ldr	r0, [r3, #16]
 800bf0a:	f7ff fcaf 	bl	800b86c <__hi0bits>
 800bf0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf12:	e7df      	b.n	800bed4 <__d2b+0x70>
 800bf14:	080106e0 	.word	0x080106e0
 800bf18:	0801076c 	.word	0x0801076c

0800bf1c <__ratio>:
 800bf1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf20:	4688      	mov	r8, r1
 800bf22:	4669      	mov	r1, sp
 800bf24:	4681      	mov	r9, r0
 800bf26:	f7ff ff4d 	bl	800bdc4 <__b2d>
 800bf2a:	a901      	add	r1, sp, #4
 800bf2c:	4640      	mov	r0, r8
 800bf2e:	ec55 4b10 	vmov	r4, r5, d0
 800bf32:	f7ff ff47 	bl	800bdc4 <__b2d>
 800bf36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bf3e:	eba3 0c02 	sub.w	ip, r3, r2
 800bf42:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf46:	1a9b      	subs	r3, r3, r2
 800bf48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bf4c:	ec51 0b10 	vmov	r0, r1, d0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	bfd6      	itet	le
 800bf54:	460a      	movle	r2, r1
 800bf56:	462a      	movgt	r2, r5
 800bf58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf5c:	468b      	mov	fp, r1
 800bf5e:	462f      	mov	r7, r5
 800bf60:	bfd4      	ite	le
 800bf62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bf66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	ee10 2a10 	vmov	r2, s0
 800bf70:	465b      	mov	r3, fp
 800bf72:	4639      	mov	r1, r7
 800bf74:	f7f4 fc82 	bl	800087c <__aeabi_ddiv>
 800bf78:	ec41 0b10 	vmov	d0, r0, r1
 800bf7c:	b003      	add	sp, #12
 800bf7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf82 <__copybits>:
 800bf82:	3901      	subs	r1, #1
 800bf84:	b570      	push	{r4, r5, r6, lr}
 800bf86:	1149      	asrs	r1, r1, #5
 800bf88:	6914      	ldr	r4, [r2, #16]
 800bf8a:	3101      	adds	r1, #1
 800bf8c:	f102 0314 	add.w	r3, r2, #20
 800bf90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf98:	1f05      	subs	r5, r0, #4
 800bf9a:	42a3      	cmp	r3, r4
 800bf9c:	d30c      	bcc.n	800bfb8 <__copybits+0x36>
 800bf9e:	1aa3      	subs	r3, r4, r2
 800bfa0:	3b11      	subs	r3, #17
 800bfa2:	f023 0303 	bic.w	r3, r3, #3
 800bfa6:	3211      	adds	r2, #17
 800bfa8:	42a2      	cmp	r2, r4
 800bfaa:	bf88      	it	hi
 800bfac:	2300      	movhi	r3, #0
 800bfae:	4418      	add	r0, r3
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	4288      	cmp	r0, r1
 800bfb4:	d305      	bcc.n	800bfc2 <__copybits+0x40>
 800bfb6:	bd70      	pop	{r4, r5, r6, pc}
 800bfb8:	f853 6b04 	ldr.w	r6, [r3], #4
 800bfbc:	f845 6f04 	str.w	r6, [r5, #4]!
 800bfc0:	e7eb      	b.n	800bf9a <__copybits+0x18>
 800bfc2:	f840 3b04 	str.w	r3, [r0], #4
 800bfc6:	e7f4      	b.n	800bfb2 <__copybits+0x30>

0800bfc8 <__any_on>:
 800bfc8:	f100 0214 	add.w	r2, r0, #20
 800bfcc:	6900      	ldr	r0, [r0, #16]
 800bfce:	114b      	asrs	r3, r1, #5
 800bfd0:	4298      	cmp	r0, r3
 800bfd2:	b510      	push	{r4, lr}
 800bfd4:	db11      	blt.n	800bffa <__any_on+0x32>
 800bfd6:	dd0a      	ble.n	800bfee <__any_on+0x26>
 800bfd8:	f011 011f 	ands.w	r1, r1, #31
 800bfdc:	d007      	beq.n	800bfee <__any_on+0x26>
 800bfde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bfe2:	fa24 f001 	lsr.w	r0, r4, r1
 800bfe6:	fa00 f101 	lsl.w	r1, r0, r1
 800bfea:	428c      	cmp	r4, r1
 800bfec:	d10b      	bne.n	800c006 <__any_on+0x3e>
 800bfee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d803      	bhi.n	800bffe <__any_on+0x36>
 800bff6:	2000      	movs	r0, #0
 800bff8:	bd10      	pop	{r4, pc}
 800bffa:	4603      	mov	r3, r0
 800bffc:	e7f7      	b.n	800bfee <__any_on+0x26>
 800bffe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c002:	2900      	cmp	r1, #0
 800c004:	d0f5      	beq.n	800bff2 <__any_on+0x2a>
 800c006:	2001      	movs	r0, #1
 800c008:	e7f6      	b.n	800bff8 <__any_on+0x30>

0800c00a <_calloc_r>:
 800c00a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c00c:	fba1 2402 	umull	r2, r4, r1, r2
 800c010:	b94c      	cbnz	r4, 800c026 <_calloc_r+0x1c>
 800c012:	4611      	mov	r1, r2
 800c014:	9201      	str	r2, [sp, #4]
 800c016:	f000 f87b 	bl	800c110 <_malloc_r>
 800c01a:	9a01      	ldr	r2, [sp, #4]
 800c01c:	4605      	mov	r5, r0
 800c01e:	b930      	cbnz	r0, 800c02e <_calloc_r+0x24>
 800c020:	4628      	mov	r0, r5
 800c022:	b003      	add	sp, #12
 800c024:	bd30      	pop	{r4, r5, pc}
 800c026:	220c      	movs	r2, #12
 800c028:	6002      	str	r2, [r0, #0]
 800c02a:	2500      	movs	r5, #0
 800c02c:	e7f8      	b.n	800c020 <_calloc_r+0x16>
 800c02e:	4621      	mov	r1, r4
 800c030:	f7fc fb02 	bl	8008638 <memset>
 800c034:	e7f4      	b.n	800c020 <_calloc_r+0x16>
	...

0800c038 <_free_r>:
 800c038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c03a:	2900      	cmp	r1, #0
 800c03c:	d044      	beq.n	800c0c8 <_free_r+0x90>
 800c03e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c042:	9001      	str	r0, [sp, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	f1a1 0404 	sub.w	r4, r1, #4
 800c04a:	bfb8      	it	lt
 800c04c:	18e4      	addlt	r4, r4, r3
 800c04e:	f001 f88b 	bl	800d168 <__malloc_lock>
 800c052:	4a1e      	ldr	r2, [pc, #120]	; (800c0cc <_free_r+0x94>)
 800c054:	9801      	ldr	r0, [sp, #4]
 800c056:	6813      	ldr	r3, [r2, #0]
 800c058:	b933      	cbnz	r3, 800c068 <_free_r+0x30>
 800c05a:	6063      	str	r3, [r4, #4]
 800c05c:	6014      	str	r4, [r2, #0]
 800c05e:	b003      	add	sp, #12
 800c060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c064:	f001 b886 	b.w	800d174 <__malloc_unlock>
 800c068:	42a3      	cmp	r3, r4
 800c06a:	d908      	bls.n	800c07e <_free_r+0x46>
 800c06c:	6825      	ldr	r5, [r4, #0]
 800c06e:	1961      	adds	r1, r4, r5
 800c070:	428b      	cmp	r3, r1
 800c072:	bf01      	itttt	eq
 800c074:	6819      	ldreq	r1, [r3, #0]
 800c076:	685b      	ldreq	r3, [r3, #4]
 800c078:	1949      	addeq	r1, r1, r5
 800c07a:	6021      	streq	r1, [r4, #0]
 800c07c:	e7ed      	b.n	800c05a <_free_r+0x22>
 800c07e:	461a      	mov	r2, r3
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	b10b      	cbz	r3, 800c088 <_free_r+0x50>
 800c084:	42a3      	cmp	r3, r4
 800c086:	d9fa      	bls.n	800c07e <_free_r+0x46>
 800c088:	6811      	ldr	r1, [r2, #0]
 800c08a:	1855      	adds	r5, r2, r1
 800c08c:	42a5      	cmp	r5, r4
 800c08e:	d10b      	bne.n	800c0a8 <_free_r+0x70>
 800c090:	6824      	ldr	r4, [r4, #0]
 800c092:	4421      	add	r1, r4
 800c094:	1854      	adds	r4, r2, r1
 800c096:	42a3      	cmp	r3, r4
 800c098:	6011      	str	r1, [r2, #0]
 800c09a:	d1e0      	bne.n	800c05e <_free_r+0x26>
 800c09c:	681c      	ldr	r4, [r3, #0]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	6053      	str	r3, [r2, #4]
 800c0a2:	4421      	add	r1, r4
 800c0a4:	6011      	str	r1, [r2, #0]
 800c0a6:	e7da      	b.n	800c05e <_free_r+0x26>
 800c0a8:	d902      	bls.n	800c0b0 <_free_r+0x78>
 800c0aa:	230c      	movs	r3, #12
 800c0ac:	6003      	str	r3, [r0, #0]
 800c0ae:	e7d6      	b.n	800c05e <_free_r+0x26>
 800c0b0:	6825      	ldr	r5, [r4, #0]
 800c0b2:	1961      	adds	r1, r4, r5
 800c0b4:	428b      	cmp	r3, r1
 800c0b6:	bf04      	itt	eq
 800c0b8:	6819      	ldreq	r1, [r3, #0]
 800c0ba:	685b      	ldreq	r3, [r3, #4]
 800c0bc:	6063      	str	r3, [r4, #4]
 800c0be:	bf04      	itt	eq
 800c0c0:	1949      	addeq	r1, r1, r5
 800c0c2:	6021      	streq	r1, [r4, #0]
 800c0c4:	6054      	str	r4, [r2, #4]
 800c0c6:	e7ca      	b.n	800c05e <_free_r+0x26>
 800c0c8:	b003      	add	sp, #12
 800c0ca:	bd30      	pop	{r4, r5, pc}
 800c0cc:	20009d08 	.word	0x20009d08

0800c0d0 <sbrk_aligned>:
 800c0d0:	b570      	push	{r4, r5, r6, lr}
 800c0d2:	4e0e      	ldr	r6, [pc, #56]	; (800c10c <sbrk_aligned+0x3c>)
 800c0d4:	460c      	mov	r4, r1
 800c0d6:	6831      	ldr	r1, [r6, #0]
 800c0d8:	4605      	mov	r5, r0
 800c0da:	b911      	cbnz	r1, 800c0e2 <sbrk_aligned+0x12>
 800c0dc:	f000 fd28 	bl	800cb30 <_sbrk_r>
 800c0e0:	6030      	str	r0, [r6, #0]
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f000 fd23 	bl	800cb30 <_sbrk_r>
 800c0ea:	1c43      	adds	r3, r0, #1
 800c0ec:	d00a      	beq.n	800c104 <sbrk_aligned+0x34>
 800c0ee:	1cc4      	adds	r4, r0, #3
 800c0f0:	f024 0403 	bic.w	r4, r4, #3
 800c0f4:	42a0      	cmp	r0, r4
 800c0f6:	d007      	beq.n	800c108 <sbrk_aligned+0x38>
 800c0f8:	1a21      	subs	r1, r4, r0
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	f000 fd18 	bl	800cb30 <_sbrk_r>
 800c100:	3001      	adds	r0, #1
 800c102:	d101      	bne.n	800c108 <sbrk_aligned+0x38>
 800c104:	f04f 34ff 	mov.w	r4, #4294967295
 800c108:	4620      	mov	r0, r4
 800c10a:	bd70      	pop	{r4, r5, r6, pc}
 800c10c:	20009d0c 	.word	0x20009d0c

0800c110 <_malloc_r>:
 800c110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c114:	1ccd      	adds	r5, r1, #3
 800c116:	f025 0503 	bic.w	r5, r5, #3
 800c11a:	3508      	adds	r5, #8
 800c11c:	2d0c      	cmp	r5, #12
 800c11e:	bf38      	it	cc
 800c120:	250c      	movcc	r5, #12
 800c122:	2d00      	cmp	r5, #0
 800c124:	4607      	mov	r7, r0
 800c126:	db01      	blt.n	800c12c <_malloc_r+0x1c>
 800c128:	42a9      	cmp	r1, r5
 800c12a:	d905      	bls.n	800c138 <_malloc_r+0x28>
 800c12c:	230c      	movs	r3, #12
 800c12e:	603b      	str	r3, [r7, #0]
 800c130:	2600      	movs	r6, #0
 800c132:	4630      	mov	r0, r6
 800c134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c138:	4e2e      	ldr	r6, [pc, #184]	; (800c1f4 <_malloc_r+0xe4>)
 800c13a:	f001 f815 	bl	800d168 <__malloc_lock>
 800c13e:	6833      	ldr	r3, [r6, #0]
 800c140:	461c      	mov	r4, r3
 800c142:	bb34      	cbnz	r4, 800c192 <_malloc_r+0x82>
 800c144:	4629      	mov	r1, r5
 800c146:	4638      	mov	r0, r7
 800c148:	f7ff ffc2 	bl	800c0d0 <sbrk_aligned>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	4604      	mov	r4, r0
 800c150:	d14d      	bne.n	800c1ee <_malloc_r+0xde>
 800c152:	6834      	ldr	r4, [r6, #0]
 800c154:	4626      	mov	r6, r4
 800c156:	2e00      	cmp	r6, #0
 800c158:	d140      	bne.n	800c1dc <_malloc_r+0xcc>
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	4631      	mov	r1, r6
 800c15e:	4638      	mov	r0, r7
 800c160:	eb04 0803 	add.w	r8, r4, r3
 800c164:	f000 fce4 	bl	800cb30 <_sbrk_r>
 800c168:	4580      	cmp	r8, r0
 800c16a:	d13a      	bne.n	800c1e2 <_malloc_r+0xd2>
 800c16c:	6821      	ldr	r1, [r4, #0]
 800c16e:	3503      	adds	r5, #3
 800c170:	1a6d      	subs	r5, r5, r1
 800c172:	f025 0503 	bic.w	r5, r5, #3
 800c176:	3508      	adds	r5, #8
 800c178:	2d0c      	cmp	r5, #12
 800c17a:	bf38      	it	cc
 800c17c:	250c      	movcc	r5, #12
 800c17e:	4629      	mov	r1, r5
 800c180:	4638      	mov	r0, r7
 800c182:	f7ff ffa5 	bl	800c0d0 <sbrk_aligned>
 800c186:	3001      	adds	r0, #1
 800c188:	d02b      	beq.n	800c1e2 <_malloc_r+0xd2>
 800c18a:	6823      	ldr	r3, [r4, #0]
 800c18c:	442b      	add	r3, r5
 800c18e:	6023      	str	r3, [r4, #0]
 800c190:	e00e      	b.n	800c1b0 <_malloc_r+0xa0>
 800c192:	6822      	ldr	r2, [r4, #0]
 800c194:	1b52      	subs	r2, r2, r5
 800c196:	d41e      	bmi.n	800c1d6 <_malloc_r+0xc6>
 800c198:	2a0b      	cmp	r2, #11
 800c19a:	d916      	bls.n	800c1ca <_malloc_r+0xba>
 800c19c:	1961      	adds	r1, r4, r5
 800c19e:	42a3      	cmp	r3, r4
 800c1a0:	6025      	str	r5, [r4, #0]
 800c1a2:	bf18      	it	ne
 800c1a4:	6059      	strne	r1, [r3, #4]
 800c1a6:	6863      	ldr	r3, [r4, #4]
 800c1a8:	bf08      	it	eq
 800c1aa:	6031      	streq	r1, [r6, #0]
 800c1ac:	5162      	str	r2, [r4, r5]
 800c1ae:	604b      	str	r3, [r1, #4]
 800c1b0:	4638      	mov	r0, r7
 800c1b2:	f104 060b 	add.w	r6, r4, #11
 800c1b6:	f000 ffdd 	bl	800d174 <__malloc_unlock>
 800c1ba:	f026 0607 	bic.w	r6, r6, #7
 800c1be:	1d23      	adds	r3, r4, #4
 800c1c0:	1af2      	subs	r2, r6, r3
 800c1c2:	d0b6      	beq.n	800c132 <_malloc_r+0x22>
 800c1c4:	1b9b      	subs	r3, r3, r6
 800c1c6:	50a3      	str	r3, [r4, r2]
 800c1c8:	e7b3      	b.n	800c132 <_malloc_r+0x22>
 800c1ca:	6862      	ldr	r2, [r4, #4]
 800c1cc:	42a3      	cmp	r3, r4
 800c1ce:	bf0c      	ite	eq
 800c1d0:	6032      	streq	r2, [r6, #0]
 800c1d2:	605a      	strne	r2, [r3, #4]
 800c1d4:	e7ec      	b.n	800c1b0 <_malloc_r+0xa0>
 800c1d6:	4623      	mov	r3, r4
 800c1d8:	6864      	ldr	r4, [r4, #4]
 800c1da:	e7b2      	b.n	800c142 <_malloc_r+0x32>
 800c1dc:	4634      	mov	r4, r6
 800c1de:	6876      	ldr	r6, [r6, #4]
 800c1e0:	e7b9      	b.n	800c156 <_malloc_r+0x46>
 800c1e2:	230c      	movs	r3, #12
 800c1e4:	603b      	str	r3, [r7, #0]
 800c1e6:	4638      	mov	r0, r7
 800c1e8:	f000 ffc4 	bl	800d174 <__malloc_unlock>
 800c1ec:	e7a1      	b.n	800c132 <_malloc_r+0x22>
 800c1ee:	6025      	str	r5, [r4, #0]
 800c1f0:	e7de      	b.n	800c1b0 <_malloc_r+0xa0>
 800c1f2:	bf00      	nop
 800c1f4:	20009d08 	.word	0x20009d08

0800c1f8 <__ssputs_r>:
 800c1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1fc:	688e      	ldr	r6, [r1, #8]
 800c1fe:	429e      	cmp	r6, r3
 800c200:	4682      	mov	sl, r0
 800c202:	460c      	mov	r4, r1
 800c204:	4690      	mov	r8, r2
 800c206:	461f      	mov	r7, r3
 800c208:	d838      	bhi.n	800c27c <__ssputs_r+0x84>
 800c20a:	898a      	ldrh	r2, [r1, #12]
 800c20c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c210:	d032      	beq.n	800c278 <__ssputs_r+0x80>
 800c212:	6825      	ldr	r5, [r4, #0]
 800c214:	6909      	ldr	r1, [r1, #16]
 800c216:	eba5 0901 	sub.w	r9, r5, r1
 800c21a:	6965      	ldr	r5, [r4, #20]
 800c21c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c220:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c224:	3301      	adds	r3, #1
 800c226:	444b      	add	r3, r9
 800c228:	106d      	asrs	r5, r5, #1
 800c22a:	429d      	cmp	r5, r3
 800c22c:	bf38      	it	cc
 800c22e:	461d      	movcc	r5, r3
 800c230:	0553      	lsls	r3, r2, #21
 800c232:	d531      	bpl.n	800c298 <__ssputs_r+0xa0>
 800c234:	4629      	mov	r1, r5
 800c236:	f7ff ff6b 	bl	800c110 <_malloc_r>
 800c23a:	4606      	mov	r6, r0
 800c23c:	b950      	cbnz	r0, 800c254 <__ssputs_r+0x5c>
 800c23e:	230c      	movs	r3, #12
 800c240:	f8ca 3000 	str.w	r3, [sl]
 800c244:	89a3      	ldrh	r3, [r4, #12]
 800c246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c24a:	81a3      	strh	r3, [r4, #12]
 800c24c:	f04f 30ff 	mov.w	r0, #4294967295
 800c250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c254:	6921      	ldr	r1, [r4, #16]
 800c256:	464a      	mov	r2, r9
 800c258:	f7ff fa08 	bl	800b66c <memcpy>
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c266:	81a3      	strh	r3, [r4, #12]
 800c268:	6126      	str	r6, [r4, #16]
 800c26a:	6165      	str	r5, [r4, #20]
 800c26c:	444e      	add	r6, r9
 800c26e:	eba5 0509 	sub.w	r5, r5, r9
 800c272:	6026      	str	r6, [r4, #0]
 800c274:	60a5      	str	r5, [r4, #8]
 800c276:	463e      	mov	r6, r7
 800c278:	42be      	cmp	r6, r7
 800c27a:	d900      	bls.n	800c27e <__ssputs_r+0x86>
 800c27c:	463e      	mov	r6, r7
 800c27e:	6820      	ldr	r0, [r4, #0]
 800c280:	4632      	mov	r2, r6
 800c282:	4641      	mov	r1, r8
 800c284:	f000 ff56 	bl	800d134 <memmove>
 800c288:	68a3      	ldr	r3, [r4, #8]
 800c28a:	1b9b      	subs	r3, r3, r6
 800c28c:	60a3      	str	r3, [r4, #8]
 800c28e:	6823      	ldr	r3, [r4, #0]
 800c290:	4433      	add	r3, r6
 800c292:	6023      	str	r3, [r4, #0]
 800c294:	2000      	movs	r0, #0
 800c296:	e7db      	b.n	800c250 <__ssputs_r+0x58>
 800c298:	462a      	mov	r2, r5
 800c29a:	f000 ff71 	bl	800d180 <_realloc_r>
 800c29e:	4606      	mov	r6, r0
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d1e1      	bne.n	800c268 <__ssputs_r+0x70>
 800c2a4:	6921      	ldr	r1, [r4, #16]
 800c2a6:	4650      	mov	r0, sl
 800c2a8:	f7ff fec6 	bl	800c038 <_free_r>
 800c2ac:	e7c7      	b.n	800c23e <__ssputs_r+0x46>
	...

0800c2b0 <_svfiprintf_r>:
 800c2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b4:	4698      	mov	r8, r3
 800c2b6:	898b      	ldrh	r3, [r1, #12]
 800c2b8:	061b      	lsls	r3, r3, #24
 800c2ba:	b09d      	sub	sp, #116	; 0x74
 800c2bc:	4607      	mov	r7, r0
 800c2be:	460d      	mov	r5, r1
 800c2c0:	4614      	mov	r4, r2
 800c2c2:	d50e      	bpl.n	800c2e2 <_svfiprintf_r+0x32>
 800c2c4:	690b      	ldr	r3, [r1, #16]
 800c2c6:	b963      	cbnz	r3, 800c2e2 <_svfiprintf_r+0x32>
 800c2c8:	2140      	movs	r1, #64	; 0x40
 800c2ca:	f7ff ff21 	bl	800c110 <_malloc_r>
 800c2ce:	6028      	str	r0, [r5, #0]
 800c2d0:	6128      	str	r0, [r5, #16]
 800c2d2:	b920      	cbnz	r0, 800c2de <_svfiprintf_r+0x2e>
 800c2d4:	230c      	movs	r3, #12
 800c2d6:	603b      	str	r3, [r7, #0]
 800c2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2dc:	e0d1      	b.n	800c482 <_svfiprintf_r+0x1d2>
 800c2de:	2340      	movs	r3, #64	; 0x40
 800c2e0:	616b      	str	r3, [r5, #20]
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c2e6:	2320      	movs	r3, #32
 800c2e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2f0:	2330      	movs	r3, #48	; 0x30
 800c2f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c49c <_svfiprintf_r+0x1ec>
 800c2f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2fa:	f04f 0901 	mov.w	r9, #1
 800c2fe:	4623      	mov	r3, r4
 800c300:	469a      	mov	sl, r3
 800c302:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c306:	b10a      	cbz	r2, 800c30c <_svfiprintf_r+0x5c>
 800c308:	2a25      	cmp	r2, #37	; 0x25
 800c30a:	d1f9      	bne.n	800c300 <_svfiprintf_r+0x50>
 800c30c:	ebba 0b04 	subs.w	fp, sl, r4
 800c310:	d00b      	beq.n	800c32a <_svfiprintf_r+0x7a>
 800c312:	465b      	mov	r3, fp
 800c314:	4622      	mov	r2, r4
 800c316:	4629      	mov	r1, r5
 800c318:	4638      	mov	r0, r7
 800c31a:	f7ff ff6d 	bl	800c1f8 <__ssputs_r>
 800c31e:	3001      	adds	r0, #1
 800c320:	f000 80aa 	beq.w	800c478 <_svfiprintf_r+0x1c8>
 800c324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c326:	445a      	add	r2, fp
 800c328:	9209      	str	r2, [sp, #36]	; 0x24
 800c32a:	f89a 3000 	ldrb.w	r3, [sl]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f000 80a2 	beq.w	800c478 <_svfiprintf_r+0x1c8>
 800c334:	2300      	movs	r3, #0
 800c336:	f04f 32ff 	mov.w	r2, #4294967295
 800c33a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c33e:	f10a 0a01 	add.w	sl, sl, #1
 800c342:	9304      	str	r3, [sp, #16]
 800c344:	9307      	str	r3, [sp, #28]
 800c346:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c34a:	931a      	str	r3, [sp, #104]	; 0x68
 800c34c:	4654      	mov	r4, sl
 800c34e:	2205      	movs	r2, #5
 800c350:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c354:	4851      	ldr	r0, [pc, #324]	; (800c49c <_svfiprintf_r+0x1ec>)
 800c356:	f7f3 ff5b 	bl	8000210 <memchr>
 800c35a:	9a04      	ldr	r2, [sp, #16]
 800c35c:	b9d8      	cbnz	r0, 800c396 <_svfiprintf_r+0xe6>
 800c35e:	06d0      	lsls	r0, r2, #27
 800c360:	bf44      	itt	mi
 800c362:	2320      	movmi	r3, #32
 800c364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c368:	0711      	lsls	r1, r2, #28
 800c36a:	bf44      	itt	mi
 800c36c:	232b      	movmi	r3, #43	; 0x2b
 800c36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c372:	f89a 3000 	ldrb.w	r3, [sl]
 800c376:	2b2a      	cmp	r3, #42	; 0x2a
 800c378:	d015      	beq.n	800c3a6 <_svfiprintf_r+0xf6>
 800c37a:	9a07      	ldr	r2, [sp, #28]
 800c37c:	4654      	mov	r4, sl
 800c37e:	2000      	movs	r0, #0
 800c380:	f04f 0c0a 	mov.w	ip, #10
 800c384:	4621      	mov	r1, r4
 800c386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c38a:	3b30      	subs	r3, #48	; 0x30
 800c38c:	2b09      	cmp	r3, #9
 800c38e:	d94e      	bls.n	800c42e <_svfiprintf_r+0x17e>
 800c390:	b1b0      	cbz	r0, 800c3c0 <_svfiprintf_r+0x110>
 800c392:	9207      	str	r2, [sp, #28]
 800c394:	e014      	b.n	800c3c0 <_svfiprintf_r+0x110>
 800c396:	eba0 0308 	sub.w	r3, r0, r8
 800c39a:	fa09 f303 	lsl.w	r3, r9, r3
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	9304      	str	r3, [sp, #16]
 800c3a2:	46a2      	mov	sl, r4
 800c3a4:	e7d2      	b.n	800c34c <_svfiprintf_r+0x9c>
 800c3a6:	9b03      	ldr	r3, [sp, #12]
 800c3a8:	1d19      	adds	r1, r3, #4
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	9103      	str	r1, [sp, #12]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	bfbb      	ittet	lt
 800c3b2:	425b      	neglt	r3, r3
 800c3b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c3b8:	9307      	strge	r3, [sp, #28]
 800c3ba:	9307      	strlt	r3, [sp, #28]
 800c3bc:	bfb8      	it	lt
 800c3be:	9204      	strlt	r2, [sp, #16]
 800c3c0:	7823      	ldrb	r3, [r4, #0]
 800c3c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c3c4:	d10c      	bne.n	800c3e0 <_svfiprintf_r+0x130>
 800c3c6:	7863      	ldrb	r3, [r4, #1]
 800c3c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c3ca:	d135      	bne.n	800c438 <_svfiprintf_r+0x188>
 800c3cc:	9b03      	ldr	r3, [sp, #12]
 800c3ce:	1d1a      	adds	r2, r3, #4
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	9203      	str	r2, [sp, #12]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	bfb8      	it	lt
 800c3d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3dc:	3402      	adds	r4, #2
 800c3de:	9305      	str	r3, [sp, #20]
 800c3e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c4ac <_svfiprintf_r+0x1fc>
 800c3e4:	7821      	ldrb	r1, [r4, #0]
 800c3e6:	2203      	movs	r2, #3
 800c3e8:	4650      	mov	r0, sl
 800c3ea:	f7f3 ff11 	bl	8000210 <memchr>
 800c3ee:	b140      	cbz	r0, 800c402 <_svfiprintf_r+0x152>
 800c3f0:	2340      	movs	r3, #64	; 0x40
 800c3f2:	eba0 000a 	sub.w	r0, r0, sl
 800c3f6:	fa03 f000 	lsl.w	r0, r3, r0
 800c3fa:	9b04      	ldr	r3, [sp, #16]
 800c3fc:	4303      	orrs	r3, r0
 800c3fe:	3401      	adds	r4, #1
 800c400:	9304      	str	r3, [sp, #16]
 800c402:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c406:	4826      	ldr	r0, [pc, #152]	; (800c4a0 <_svfiprintf_r+0x1f0>)
 800c408:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c40c:	2206      	movs	r2, #6
 800c40e:	f7f3 feff 	bl	8000210 <memchr>
 800c412:	2800      	cmp	r0, #0
 800c414:	d038      	beq.n	800c488 <_svfiprintf_r+0x1d8>
 800c416:	4b23      	ldr	r3, [pc, #140]	; (800c4a4 <_svfiprintf_r+0x1f4>)
 800c418:	bb1b      	cbnz	r3, 800c462 <_svfiprintf_r+0x1b2>
 800c41a:	9b03      	ldr	r3, [sp, #12]
 800c41c:	3307      	adds	r3, #7
 800c41e:	f023 0307 	bic.w	r3, r3, #7
 800c422:	3308      	adds	r3, #8
 800c424:	9303      	str	r3, [sp, #12]
 800c426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c428:	4433      	add	r3, r6
 800c42a:	9309      	str	r3, [sp, #36]	; 0x24
 800c42c:	e767      	b.n	800c2fe <_svfiprintf_r+0x4e>
 800c42e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c432:	460c      	mov	r4, r1
 800c434:	2001      	movs	r0, #1
 800c436:	e7a5      	b.n	800c384 <_svfiprintf_r+0xd4>
 800c438:	2300      	movs	r3, #0
 800c43a:	3401      	adds	r4, #1
 800c43c:	9305      	str	r3, [sp, #20]
 800c43e:	4619      	mov	r1, r3
 800c440:	f04f 0c0a 	mov.w	ip, #10
 800c444:	4620      	mov	r0, r4
 800c446:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c44a:	3a30      	subs	r2, #48	; 0x30
 800c44c:	2a09      	cmp	r2, #9
 800c44e:	d903      	bls.n	800c458 <_svfiprintf_r+0x1a8>
 800c450:	2b00      	cmp	r3, #0
 800c452:	d0c5      	beq.n	800c3e0 <_svfiprintf_r+0x130>
 800c454:	9105      	str	r1, [sp, #20]
 800c456:	e7c3      	b.n	800c3e0 <_svfiprintf_r+0x130>
 800c458:	fb0c 2101 	mla	r1, ip, r1, r2
 800c45c:	4604      	mov	r4, r0
 800c45e:	2301      	movs	r3, #1
 800c460:	e7f0      	b.n	800c444 <_svfiprintf_r+0x194>
 800c462:	ab03      	add	r3, sp, #12
 800c464:	9300      	str	r3, [sp, #0]
 800c466:	462a      	mov	r2, r5
 800c468:	4b0f      	ldr	r3, [pc, #60]	; (800c4a8 <_svfiprintf_r+0x1f8>)
 800c46a:	a904      	add	r1, sp, #16
 800c46c:	4638      	mov	r0, r7
 800c46e:	f7fc f98b 	bl	8008788 <_printf_float>
 800c472:	1c42      	adds	r2, r0, #1
 800c474:	4606      	mov	r6, r0
 800c476:	d1d6      	bne.n	800c426 <_svfiprintf_r+0x176>
 800c478:	89ab      	ldrh	r3, [r5, #12]
 800c47a:	065b      	lsls	r3, r3, #25
 800c47c:	f53f af2c 	bmi.w	800c2d8 <_svfiprintf_r+0x28>
 800c480:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c482:	b01d      	add	sp, #116	; 0x74
 800c484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c488:	ab03      	add	r3, sp, #12
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	462a      	mov	r2, r5
 800c48e:	4b06      	ldr	r3, [pc, #24]	; (800c4a8 <_svfiprintf_r+0x1f8>)
 800c490:	a904      	add	r1, sp, #16
 800c492:	4638      	mov	r0, r7
 800c494:	f7fc fc1c 	bl	8008cd0 <_printf_i>
 800c498:	e7eb      	b.n	800c472 <_svfiprintf_r+0x1c2>
 800c49a:	bf00      	nop
 800c49c:	080108c4 	.word	0x080108c4
 800c4a0:	080108ce 	.word	0x080108ce
 800c4a4:	08008789 	.word	0x08008789
 800c4a8:	0800c1f9 	.word	0x0800c1f9
 800c4ac:	080108ca 	.word	0x080108ca

0800c4b0 <_sungetc_r>:
 800c4b0:	b538      	push	{r3, r4, r5, lr}
 800c4b2:	1c4b      	adds	r3, r1, #1
 800c4b4:	4614      	mov	r4, r2
 800c4b6:	d103      	bne.n	800c4c0 <_sungetc_r+0x10>
 800c4b8:	f04f 35ff 	mov.w	r5, #4294967295
 800c4bc:	4628      	mov	r0, r5
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	8993      	ldrh	r3, [r2, #12]
 800c4c2:	f023 0320 	bic.w	r3, r3, #32
 800c4c6:	8193      	strh	r3, [r2, #12]
 800c4c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4ca:	6852      	ldr	r2, [r2, #4]
 800c4cc:	b2cd      	uxtb	r5, r1
 800c4ce:	b18b      	cbz	r3, 800c4f4 <_sungetc_r+0x44>
 800c4d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	dd08      	ble.n	800c4e8 <_sungetc_r+0x38>
 800c4d6:	6823      	ldr	r3, [r4, #0]
 800c4d8:	1e5a      	subs	r2, r3, #1
 800c4da:	6022      	str	r2, [r4, #0]
 800c4dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c4e0:	6863      	ldr	r3, [r4, #4]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	6063      	str	r3, [r4, #4]
 800c4e6:	e7e9      	b.n	800c4bc <_sungetc_r+0xc>
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	f000 fbf1 	bl	800ccd0 <__submore>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d0f1      	beq.n	800c4d6 <_sungetc_r+0x26>
 800c4f2:	e7e1      	b.n	800c4b8 <_sungetc_r+0x8>
 800c4f4:	6921      	ldr	r1, [r4, #16]
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	b151      	cbz	r1, 800c510 <_sungetc_r+0x60>
 800c4fa:	4299      	cmp	r1, r3
 800c4fc:	d208      	bcs.n	800c510 <_sungetc_r+0x60>
 800c4fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c502:	42a9      	cmp	r1, r5
 800c504:	d104      	bne.n	800c510 <_sungetc_r+0x60>
 800c506:	3b01      	subs	r3, #1
 800c508:	3201      	adds	r2, #1
 800c50a:	6023      	str	r3, [r4, #0]
 800c50c:	6062      	str	r2, [r4, #4]
 800c50e:	e7d5      	b.n	800c4bc <_sungetc_r+0xc>
 800c510:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c518:	6363      	str	r3, [r4, #52]	; 0x34
 800c51a:	2303      	movs	r3, #3
 800c51c:	63a3      	str	r3, [r4, #56]	; 0x38
 800c51e:	4623      	mov	r3, r4
 800c520:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	2301      	movs	r3, #1
 800c528:	e7dc      	b.n	800c4e4 <_sungetc_r+0x34>

0800c52a <__ssrefill_r>:
 800c52a:	b510      	push	{r4, lr}
 800c52c:	460c      	mov	r4, r1
 800c52e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c530:	b169      	cbz	r1, 800c54e <__ssrefill_r+0x24>
 800c532:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c536:	4299      	cmp	r1, r3
 800c538:	d001      	beq.n	800c53e <__ssrefill_r+0x14>
 800c53a:	f7ff fd7d 	bl	800c038 <_free_r>
 800c53e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c540:	6063      	str	r3, [r4, #4]
 800c542:	2000      	movs	r0, #0
 800c544:	6360      	str	r0, [r4, #52]	; 0x34
 800c546:	b113      	cbz	r3, 800c54e <__ssrefill_r+0x24>
 800c548:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c54a:	6023      	str	r3, [r4, #0]
 800c54c:	bd10      	pop	{r4, pc}
 800c54e:	6923      	ldr	r3, [r4, #16]
 800c550:	6023      	str	r3, [r4, #0]
 800c552:	2300      	movs	r3, #0
 800c554:	6063      	str	r3, [r4, #4]
 800c556:	89a3      	ldrh	r3, [r4, #12]
 800c558:	f043 0320 	orr.w	r3, r3, #32
 800c55c:	81a3      	strh	r3, [r4, #12]
 800c55e:	f04f 30ff 	mov.w	r0, #4294967295
 800c562:	e7f3      	b.n	800c54c <__ssrefill_r+0x22>

0800c564 <__ssvfiscanf_r>:
 800c564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c568:	460c      	mov	r4, r1
 800c56a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c56e:	2100      	movs	r1, #0
 800c570:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c574:	49a6      	ldr	r1, [pc, #664]	; (800c810 <__ssvfiscanf_r+0x2ac>)
 800c576:	91a0      	str	r1, [sp, #640]	; 0x280
 800c578:	f10d 0804 	add.w	r8, sp, #4
 800c57c:	49a5      	ldr	r1, [pc, #660]	; (800c814 <__ssvfiscanf_r+0x2b0>)
 800c57e:	4fa6      	ldr	r7, [pc, #664]	; (800c818 <__ssvfiscanf_r+0x2b4>)
 800c580:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c81c <__ssvfiscanf_r+0x2b8>
 800c584:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c588:	4606      	mov	r6, r0
 800c58a:	91a1      	str	r1, [sp, #644]	; 0x284
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	7813      	ldrb	r3, [r2, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 815a 	beq.w	800c84a <__ssvfiscanf_r+0x2e6>
 800c596:	5dd9      	ldrb	r1, [r3, r7]
 800c598:	f011 0108 	ands.w	r1, r1, #8
 800c59c:	f102 0501 	add.w	r5, r2, #1
 800c5a0:	d019      	beq.n	800c5d6 <__ssvfiscanf_r+0x72>
 800c5a2:	6863      	ldr	r3, [r4, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	dd0f      	ble.n	800c5c8 <__ssvfiscanf_r+0x64>
 800c5a8:	6823      	ldr	r3, [r4, #0]
 800c5aa:	781a      	ldrb	r2, [r3, #0]
 800c5ac:	5cba      	ldrb	r2, [r7, r2]
 800c5ae:	0712      	lsls	r2, r2, #28
 800c5b0:	d401      	bmi.n	800c5b6 <__ssvfiscanf_r+0x52>
 800c5b2:	462a      	mov	r2, r5
 800c5b4:	e7eb      	b.n	800c58e <__ssvfiscanf_r+0x2a>
 800c5b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c5b8:	3201      	adds	r2, #1
 800c5ba:	9245      	str	r2, [sp, #276]	; 0x114
 800c5bc:	6862      	ldr	r2, [r4, #4]
 800c5be:	3301      	adds	r3, #1
 800c5c0:	3a01      	subs	r2, #1
 800c5c2:	6062      	str	r2, [r4, #4]
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	e7ec      	b.n	800c5a2 <__ssvfiscanf_r+0x3e>
 800c5c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c5ca:	4621      	mov	r1, r4
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	4798      	blx	r3
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d0e9      	beq.n	800c5a8 <__ssvfiscanf_r+0x44>
 800c5d4:	e7ed      	b.n	800c5b2 <__ssvfiscanf_r+0x4e>
 800c5d6:	2b25      	cmp	r3, #37	; 0x25
 800c5d8:	d012      	beq.n	800c600 <__ssvfiscanf_r+0x9c>
 800c5da:	469a      	mov	sl, r3
 800c5dc:	6863      	ldr	r3, [r4, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f340 8091 	ble.w	800c706 <__ssvfiscanf_r+0x1a2>
 800c5e4:	6822      	ldr	r2, [r4, #0]
 800c5e6:	7813      	ldrb	r3, [r2, #0]
 800c5e8:	4553      	cmp	r3, sl
 800c5ea:	f040 812e 	bne.w	800c84a <__ssvfiscanf_r+0x2e6>
 800c5ee:	6863      	ldr	r3, [r4, #4]
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	6063      	str	r3, [r4, #4]
 800c5f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c5f6:	3201      	adds	r2, #1
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	6022      	str	r2, [r4, #0]
 800c5fc:	9345      	str	r3, [sp, #276]	; 0x114
 800c5fe:	e7d8      	b.n	800c5b2 <__ssvfiscanf_r+0x4e>
 800c600:	9141      	str	r1, [sp, #260]	; 0x104
 800c602:	9143      	str	r1, [sp, #268]	; 0x10c
 800c604:	7853      	ldrb	r3, [r2, #1]
 800c606:	2b2a      	cmp	r3, #42	; 0x2a
 800c608:	bf02      	ittt	eq
 800c60a:	2310      	moveq	r3, #16
 800c60c:	1c95      	addeq	r5, r2, #2
 800c60e:	9341      	streq	r3, [sp, #260]	; 0x104
 800c610:	220a      	movs	r2, #10
 800c612:	46aa      	mov	sl, r5
 800c614:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c618:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c61c:	2b09      	cmp	r3, #9
 800c61e:	d91d      	bls.n	800c65c <__ssvfiscanf_r+0xf8>
 800c620:	487e      	ldr	r0, [pc, #504]	; (800c81c <__ssvfiscanf_r+0x2b8>)
 800c622:	2203      	movs	r2, #3
 800c624:	f7f3 fdf4 	bl	8000210 <memchr>
 800c628:	b140      	cbz	r0, 800c63c <__ssvfiscanf_r+0xd8>
 800c62a:	2301      	movs	r3, #1
 800c62c:	eba0 0009 	sub.w	r0, r0, r9
 800c630:	fa03 f000 	lsl.w	r0, r3, r0
 800c634:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c636:	4318      	orrs	r0, r3
 800c638:	9041      	str	r0, [sp, #260]	; 0x104
 800c63a:	4655      	mov	r5, sl
 800c63c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c640:	2b78      	cmp	r3, #120	; 0x78
 800c642:	d806      	bhi.n	800c652 <__ssvfiscanf_r+0xee>
 800c644:	2b57      	cmp	r3, #87	; 0x57
 800c646:	d810      	bhi.n	800c66a <__ssvfiscanf_r+0x106>
 800c648:	2b25      	cmp	r3, #37	; 0x25
 800c64a:	d0c6      	beq.n	800c5da <__ssvfiscanf_r+0x76>
 800c64c:	d856      	bhi.n	800c6fc <__ssvfiscanf_r+0x198>
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d064      	beq.n	800c71c <__ssvfiscanf_r+0x1b8>
 800c652:	2303      	movs	r3, #3
 800c654:	9347      	str	r3, [sp, #284]	; 0x11c
 800c656:	230a      	movs	r3, #10
 800c658:	9342      	str	r3, [sp, #264]	; 0x108
 800c65a:	e071      	b.n	800c740 <__ssvfiscanf_r+0x1dc>
 800c65c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c65e:	fb02 1103 	mla	r1, r2, r3, r1
 800c662:	3930      	subs	r1, #48	; 0x30
 800c664:	9143      	str	r1, [sp, #268]	; 0x10c
 800c666:	4655      	mov	r5, sl
 800c668:	e7d3      	b.n	800c612 <__ssvfiscanf_r+0xae>
 800c66a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c66e:	2a20      	cmp	r2, #32
 800c670:	d8ef      	bhi.n	800c652 <__ssvfiscanf_r+0xee>
 800c672:	a101      	add	r1, pc, #4	; (adr r1, 800c678 <__ssvfiscanf_r+0x114>)
 800c674:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c678:	0800c72b 	.word	0x0800c72b
 800c67c:	0800c653 	.word	0x0800c653
 800c680:	0800c653 	.word	0x0800c653
 800c684:	0800c789 	.word	0x0800c789
 800c688:	0800c653 	.word	0x0800c653
 800c68c:	0800c653 	.word	0x0800c653
 800c690:	0800c653 	.word	0x0800c653
 800c694:	0800c653 	.word	0x0800c653
 800c698:	0800c653 	.word	0x0800c653
 800c69c:	0800c653 	.word	0x0800c653
 800c6a0:	0800c653 	.word	0x0800c653
 800c6a4:	0800c79f 	.word	0x0800c79f
 800c6a8:	0800c775 	.word	0x0800c775
 800c6ac:	0800c703 	.word	0x0800c703
 800c6b0:	0800c703 	.word	0x0800c703
 800c6b4:	0800c703 	.word	0x0800c703
 800c6b8:	0800c653 	.word	0x0800c653
 800c6bc:	0800c779 	.word	0x0800c779
 800c6c0:	0800c653 	.word	0x0800c653
 800c6c4:	0800c653 	.word	0x0800c653
 800c6c8:	0800c653 	.word	0x0800c653
 800c6cc:	0800c653 	.word	0x0800c653
 800c6d0:	0800c7af 	.word	0x0800c7af
 800c6d4:	0800c781 	.word	0x0800c781
 800c6d8:	0800c723 	.word	0x0800c723
 800c6dc:	0800c653 	.word	0x0800c653
 800c6e0:	0800c653 	.word	0x0800c653
 800c6e4:	0800c7ab 	.word	0x0800c7ab
 800c6e8:	0800c653 	.word	0x0800c653
 800c6ec:	0800c775 	.word	0x0800c775
 800c6f0:	0800c653 	.word	0x0800c653
 800c6f4:	0800c653 	.word	0x0800c653
 800c6f8:	0800c72b 	.word	0x0800c72b
 800c6fc:	3b45      	subs	r3, #69	; 0x45
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	d8a7      	bhi.n	800c652 <__ssvfiscanf_r+0xee>
 800c702:	2305      	movs	r3, #5
 800c704:	e01b      	b.n	800c73e <__ssvfiscanf_r+0x1da>
 800c706:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c708:	4621      	mov	r1, r4
 800c70a:	4630      	mov	r0, r6
 800c70c:	4798      	blx	r3
 800c70e:	2800      	cmp	r0, #0
 800c710:	f43f af68 	beq.w	800c5e4 <__ssvfiscanf_r+0x80>
 800c714:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c716:	2800      	cmp	r0, #0
 800c718:	f040 808d 	bne.w	800c836 <__ssvfiscanf_r+0x2d2>
 800c71c:	f04f 30ff 	mov.w	r0, #4294967295
 800c720:	e08f      	b.n	800c842 <__ssvfiscanf_r+0x2de>
 800c722:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c724:	f042 0220 	orr.w	r2, r2, #32
 800c728:	9241      	str	r2, [sp, #260]	; 0x104
 800c72a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c72c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c730:	9241      	str	r2, [sp, #260]	; 0x104
 800c732:	2210      	movs	r2, #16
 800c734:	2b6f      	cmp	r3, #111	; 0x6f
 800c736:	9242      	str	r2, [sp, #264]	; 0x108
 800c738:	bf34      	ite	cc
 800c73a:	2303      	movcc	r3, #3
 800c73c:	2304      	movcs	r3, #4
 800c73e:	9347      	str	r3, [sp, #284]	; 0x11c
 800c740:	6863      	ldr	r3, [r4, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	dd42      	ble.n	800c7cc <__ssvfiscanf_r+0x268>
 800c746:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c748:	0659      	lsls	r1, r3, #25
 800c74a:	d404      	bmi.n	800c756 <__ssvfiscanf_r+0x1f2>
 800c74c:	6823      	ldr	r3, [r4, #0]
 800c74e:	781a      	ldrb	r2, [r3, #0]
 800c750:	5cba      	ldrb	r2, [r7, r2]
 800c752:	0712      	lsls	r2, r2, #28
 800c754:	d441      	bmi.n	800c7da <__ssvfiscanf_r+0x276>
 800c756:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c758:	2b02      	cmp	r3, #2
 800c75a:	dc50      	bgt.n	800c7fe <__ssvfiscanf_r+0x29a>
 800c75c:	466b      	mov	r3, sp
 800c75e:	4622      	mov	r2, r4
 800c760:	a941      	add	r1, sp, #260	; 0x104
 800c762:	4630      	mov	r0, r6
 800c764:	f000 f876 	bl	800c854 <_scanf_chars>
 800c768:	2801      	cmp	r0, #1
 800c76a:	d06e      	beq.n	800c84a <__ssvfiscanf_r+0x2e6>
 800c76c:	2802      	cmp	r0, #2
 800c76e:	f47f af20 	bne.w	800c5b2 <__ssvfiscanf_r+0x4e>
 800c772:	e7cf      	b.n	800c714 <__ssvfiscanf_r+0x1b0>
 800c774:	220a      	movs	r2, #10
 800c776:	e7dd      	b.n	800c734 <__ssvfiscanf_r+0x1d0>
 800c778:	2300      	movs	r3, #0
 800c77a:	9342      	str	r3, [sp, #264]	; 0x108
 800c77c:	2303      	movs	r3, #3
 800c77e:	e7de      	b.n	800c73e <__ssvfiscanf_r+0x1da>
 800c780:	2308      	movs	r3, #8
 800c782:	9342      	str	r3, [sp, #264]	; 0x108
 800c784:	2304      	movs	r3, #4
 800c786:	e7da      	b.n	800c73e <__ssvfiscanf_r+0x1da>
 800c788:	4629      	mov	r1, r5
 800c78a:	4640      	mov	r0, r8
 800c78c:	f000 f9e0 	bl	800cb50 <__sccl>
 800c790:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c796:	9341      	str	r3, [sp, #260]	; 0x104
 800c798:	4605      	mov	r5, r0
 800c79a:	2301      	movs	r3, #1
 800c79c:	e7cf      	b.n	800c73e <__ssvfiscanf_r+0x1da>
 800c79e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c7a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a4:	9341      	str	r3, [sp, #260]	; 0x104
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	e7c9      	b.n	800c73e <__ssvfiscanf_r+0x1da>
 800c7aa:	2302      	movs	r3, #2
 800c7ac:	e7c7      	b.n	800c73e <__ssvfiscanf_r+0x1da>
 800c7ae:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c7b0:	06c3      	lsls	r3, r0, #27
 800c7b2:	f53f aefe 	bmi.w	800c5b2 <__ssvfiscanf_r+0x4e>
 800c7b6:	9b00      	ldr	r3, [sp, #0]
 800c7b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c7ba:	1d19      	adds	r1, r3, #4
 800c7bc:	9100      	str	r1, [sp, #0]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f010 0f01 	tst.w	r0, #1
 800c7c4:	bf14      	ite	ne
 800c7c6:	801a      	strhne	r2, [r3, #0]
 800c7c8:	601a      	streq	r2, [r3, #0]
 800c7ca:	e6f2      	b.n	800c5b2 <__ssvfiscanf_r+0x4e>
 800c7cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	4798      	blx	r3
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	d0b6      	beq.n	800c746 <__ssvfiscanf_r+0x1e2>
 800c7d8:	e79c      	b.n	800c714 <__ssvfiscanf_r+0x1b0>
 800c7da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c7dc:	3201      	adds	r2, #1
 800c7de:	9245      	str	r2, [sp, #276]	; 0x114
 800c7e0:	6862      	ldr	r2, [r4, #4]
 800c7e2:	3a01      	subs	r2, #1
 800c7e4:	2a00      	cmp	r2, #0
 800c7e6:	6062      	str	r2, [r4, #4]
 800c7e8:	dd02      	ble.n	800c7f0 <__ssvfiscanf_r+0x28c>
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	e7ad      	b.n	800c74c <__ssvfiscanf_r+0x1e8>
 800c7f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c7f2:	4621      	mov	r1, r4
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	4798      	blx	r3
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	d0a7      	beq.n	800c74c <__ssvfiscanf_r+0x1e8>
 800c7fc:	e78a      	b.n	800c714 <__ssvfiscanf_r+0x1b0>
 800c7fe:	2b04      	cmp	r3, #4
 800c800:	dc0e      	bgt.n	800c820 <__ssvfiscanf_r+0x2bc>
 800c802:	466b      	mov	r3, sp
 800c804:	4622      	mov	r2, r4
 800c806:	a941      	add	r1, sp, #260	; 0x104
 800c808:	4630      	mov	r0, r6
 800c80a:	f000 f87d 	bl	800c908 <_scanf_i>
 800c80e:	e7ab      	b.n	800c768 <__ssvfiscanf_r+0x204>
 800c810:	0800c4b1 	.word	0x0800c4b1
 800c814:	0800c52b 	.word	0x0800c52b
 800c818:	08010561 	.word	0x08010561
 800c81c:	080108ca 	.word	0x080108ca
 800c820:	4b0b      	ldr	r3, [pc, #44]	; (800c850 <__ssvfiscanf_r+0x2ec>)
 800c822:	2b00      	cmp	r3, #0
 800c824:	f43f aec5 	beq.w	800c5b2 <__ssvfiscanf_r+0x4e>
 800c828:	466b      	mov	r3, sp
 800c82a:	4622      	mov	r2, r4
 800c82c:	a941      	add	r1, sp, #260	; 0x104
 800c82e:	4630      	mov	r0, r6
 800c830:	f7fc fb74 	bl	8008f1c <_scanf_float>
 800c834:	e798      	b.n	800c768 <__ssvfiscanf_r+0x204>
 800c836:	89a3      	ldrh	r3, [r4, #12]
 800c838:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c83c:	bf18      	it	ne
 800c83e:	f04f 30ff 	movne.w	r0, #4294967295
 800c842:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c84a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c84c:	e7f9      	b.n	800c842 <__ssvfiscanf_r+0x2de>
 800c84e:	bf00      	nop
 800c850:	08008f1d 	.word	0x08008f1d

0800c854 <_scanf_chars>:
 800c854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c858:	4615      	mov	r5, r2
 800c85a:	688a      	ldr	r2, [r1, #8]
 800c85c:	4680      	mov	r8, r0
 800c85e:	460c      	mov	r4, r1
 800c860:	b932      	cbnz	r2, 800c870 <_scanf_chars+0x1c>
 800c862:	698a      	ldr	r2, [r1, #24]
 800c864:	2a00      	cmp	r2, #0
 800c866:	bf0c      	ite	eq
 800c868:	2201      	moveq	r2, #1
 800c86a:	f04f 32ff 	movne.w	r2, #4294967295
 800c86e:	608a      	str	r2, [r1, #8]
 800c870:	6822      	ldr	r2, [r4, #0]
 800c872:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c904 <_scanf_chars+0xb0>
 800c876:	06d1      	lsls	r1, r2, #27
 800c878:	bf5f      	itttt	pl
 800c87a:	681a      	ldrpl	r2, [r3, #0]
 800c87c:	1d11      	addpl	r1, r2, #4
 800c87e:	6019      	strpl	r1, [r3, #0]
 800c880:	6816      	ldrpl	r6, [r2, #0]
 800c882:	2700      	movs	r7, #0
 800c884:	69a0      	ldr	r0, [r4, #24]
 800c886:	b188      	cbz	r0, 800c8ac <_scanf_chars+0x58>
 800c888:	2801      	cmp	r0, #1
 800c88a:	d107      	bne.n	800c89c <_scanf_chars+0x48>
 800c88c:	682a      	ldr	r2, [r5, #0]
 800c88e:	7811      	ldrb	r1, [r2, #0]
 800c890:	6962      	ldr	r2, [r4, #20]
 800c892:	5c52      	ldrb	r2, [r2, r1]
 800c894:	b952      	cbnz	r2, 800c8ac <_scanf_chars+0x58>
 800c896:	2f00      	cmp	r7, #0
 800c898:	d031      	beq.n	800c8fe <_scanf_chars+0xaa>
 800c89a:	e022      	b.n	800c8e2 <_scanf_chars+0x8e>
 800c89c:	2802      	cmp	r0, #2
 800c89e:	d120      	bne.n	800c8e2 <_scanf_chars+0x8e>
 800c8a0:	682b      	ldr	r3, [r5, #0]
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c8a8:	071b      	lsls	r3, r3, #28
 800c8aa:	d41a      	bmi.n	800c8e2 <_scanf_chars+0x8e>
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	06da      	lsls	r2, r3, #27
 800c8b0:	bf5e      	ittt	pl
 800c8b2:	682b      	ldrpl	r3, [r5, #0]
 800c8b4:	781b      	ldrbpl	r3, [r3, #0]
 800c8b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c8ba:	682a      	ldr	r2, [r5, #0]
 800c8bc:	686b      	ldr	r3, [r5, #4]
 800c8be:	3201      	adds	r2, #1
 800c8c0:	602a      	str	r2, [r5, #0]
 800c8c2:	68a2      	ldr	r2, [r4, #8]
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	3a01      	subs	r2, #1
 800c8c8:	606b      	str	r3, [r5, #4]
 800c8ca:	3701      	adds	r7, #1
 800c8cc:	60a2      	str	r2, [r4, #8]
 800c8ce:	b142      	cbz	r2, 800c8e2 <_scanf_chars+0x8e>
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	dcd7      	bgt.n	800c884 <_scanf_chars+0x30>
 800c8d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c8d8:	4629      	mov	r1, r5
 800c8da:	4640      	mov	r0, r8
 800c8dc:	4798      	blx	r3
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d0d0      	beq.n	800c884 <_scanf_chars+0x30>
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	f013 0310 	ands.w	r3, r3, #16
 800c8e8:	d105      	bne.n	800c8f6 <_scanf_chars+0xa2>
 800c8ea:	68e2      	ldr	r2, [r4, #12]
 800c8ec:	3201      	adds	r2, #1
 800c8ee:	60e2      	str	r2, [r4, #12]
 800c8f0:	69a2      	ldr	r2, [r4, #24]
 800c8f2:	b102      	cbz	r2, 800c8f6 <_scanf_chars+0xa2>
 800c8f4:	7033      	strb	r3, [r6, #0]
 800c8f6:	6923      	ldr	r3, [r4, #16]
 800c8f8:	443b      	add	r3, r7
 800c8fa:	6123      	str	r3, [r4, #16]
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c902:	bf00      	nop
 800c904:	08010561 	.word	0x08010561

0800c908 <_scanf_i>:
 800c908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c90c:	4698      	mov	r8, r3
 800c90e:	4b76      	ldr	r3, [pc, #472]	; (800cae8 <_scanf_i+0x1e0>)
 800c910:	460c      	mov	r4, r1
 800c912:	4682      	mov	sl, r0
 800c914:	4616      	mov	r6, r2
 800c916:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c91a:	b087      	sub	sp, #28
 800c91c:	ab03      	add	r3, sp, #12
 800c91e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c922:	4b72      	ldr	r3, [pc, #456]	; (800caec <_scanf_i+0x1e4>)
 800c924:	69a1      	ldr	r1, [r4, #24]
 800c926:	4a72      	ldr	r2, [pc, #456]	; (800caf0 <_scanf_i+0x1e8>)
 800c928:	2903      	cmp	r1, #3
 800c92a:	bf18      	it	ne
 800c92c:	461a      	movne	r2, r3
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	9201      	str	r2, [sp, #4]
 800c932:	1e5a      	subs	r2, r3, #1
 800c934:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c938:	bf88      	it	hi
 800c93a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c93e:	4627      	mov	r7, r4
 800c940:	bf82      	ittt	hi
 800c942:	eb03 0905 	addhi.w	r9, r3, r5
 800c946:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c94a:	60a3      	strhi	r3, [r4, #8]
 800c94c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c950:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c954:	bf98      	it	ls
 800c956:	f04f 0900 	movls.w	r9, #0
 800c95a:	6023      	str	r3, [r4, #0]
 800c95c:	463d      	mov	r5, r7
 800c95e:	f04f 0b00 	mov.w	fp, #0
 800c962:	6831      	ldr	r1, [r6, #0]
 800c964:	ab03      	add	r3, sp, #12
 800c966:	7809      	ldrb	r1, [r1, #0]
 800c968:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c96c:	2202      	movs	r2, #2
 800c96e:	f7f3 fc4f 	bl	8000210 <memchr>
 800c972:	b328      	cbz	r0, 800c9c0 <_scanf_i+0xb8>
 800c974:	f1bb 0f01 	cmp.w	fp, #1
 800c978:	d159      	bne.n	800ca2e <_scanf_i+0x126>
 800c97a:	6862      	ldr	r2, [r4, #4]
 800c97c:	b92a      	cbnz	r2, 800c98a <_scanf_i+0x82>
 800c97e:	6822      	ldr	r2, [r4, #0]
 800c980:	2308      	movs	r3, #8
 800c982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c986:	6063      	str	r3, [r4, #4]
 800c988:	6022      	str	r2, [r4, #0]
 800c98a:	6822      	ldr	r2, [r4, #0]
 800c98c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c990:	6022      	str	r2, [r4, #0]
 800c992:	68a2      	ldr	r2, [r4, #8]
 800c994:	1e51      	subs	r1, r2, #1
 800c996:	60a1      	str	r1, [r4, #8]
 800c998:	b192      	cbz	r2, 800c9c0 <_scanf_i+0xb8>
 800c99a:	6832      	ldr	r2, [r6, #0]
 800c99c:	1c51      	adds	r1, r2, #1
 800c99e:	6031      	str	r1, [r6, #0]
 800c9a0:	7812      	ldrb	r2, [r2, #0]
 800c9a2:	f805 2b01 	strb.w	r2, [r5], #1
 800c9a6:	6872      	ldr	r2, [r6, #4]
 800c9a8:	3a01      	subs	r2, #1
 800c9aa:	2a00      	cmp	r2, #0
 800c9ac:	6072      	str	r2, [r6, #4]
 800c9ae:	dc07      	bgt.n	800c9c0 <_scanf_i+0xb8>
 800c9b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c9b4:	4631      	mov	r1, r6
 800c9b6:	4650      	mov	r0, sl
 800c9b8:	4790      	blx	r2
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	f040 8085 	bne.w	800caca <_scanf_i+0x1c2>
 800c9c0:	f10b 0b01 	add.w	fp, fp, #1
 800c9c4:	f1bb 0f03 	cmp.w	fp, #3
 800c9c8:	d1cb      	bne.n	800c962 <_scanf_i+0x5a>
 800c9ca:	6863      	ldr	r3, [r4, #4]
 800c9cc:	b90b      	cbnz	r3, 800c9d2 <_scanf_i+0xca>
 800c9ce:	230a      	movs	r3, #10
 800c9d0:	6063      	str	r3, [r4, #4]
 800c9d2:	6863      	ldr	r3, [r4, #4]
 800c9d4:	4947      	ldr	r1, [pc, #284]	; (800caf4 <_scanf_i+0x1ec>)
 800c9d6:	6960      	ldr	r0, [r4, #20]
 800c9d8:	1ac9      	subs	r1, r1, r3
 800c9da:	f000 f8b9 	bl	800cb50 <__sccl>
 800c9de:	f04f 0b00 	mov.w	fp, #0
 800c9e2:	68a3      	ldr	r3, [r4, #8]
 800c9e4:	6822      	ldr	r2, [r4, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d03d      	beq.n	800ca66 <_scanf_i+0x15e>
 800c9ea:	6831      	ldr	r1, [r6, #0]
 800c9ec:	6960      	ldr	r0, [r4, #20]
 800c9ee:	f891 c000 	ldrb.w	ip, [r1]
 800c9f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	d035      	beq.n	800ca66 <_scanf_i+0x15e>
 800c9fa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c9fe:	d124      	bne.n	800ca4a <_scanf_i+0x142>
 800ca00:	0510      	lsls	r0, r2, #20
 800ca02:	d522      	bpl.n	800ca4a <_scanf_i+0x142>
 800ca04:	f10b 0b01 	add.w	fp, fp, #1
 800ca08:	f1b9 0f00 	cmp.w	r9, #0
 800ca0c:	d003      	beq.n	800ca16 <_scanf_i+0x10e>
 800ca0e:	3301      	adds	r3, #1
 800ca10:	f109 39ff 	add.w	r9, r9, #4294967295
 800ca14:	60a3      	str	r3, [r4, #8]
 800ca16:	6873      	ldr	r3, [r6, #4]
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	6073      	str	r3, [r6, #4]
 800ca1e:	dd1b      	ble.n	800ca58 <_scanf_i+0x150>
 800ca20:	6833      	ldr	r3, [r6, #0]
 800ca22:	3301      	adds	r3, #1
 800ca24:	6033      	str	r3, [r6, #0]
 800ca26:	68a3      	ldr	r3, [r4, #8]
 800ca28:	3b01      	subs	r3, #1
 800ca2a:	60a3      	str	r3, [r4, #8]
 800ca2c:	e7d9      	b.n	800c9e2 <_scanf_i+0xda>
 800ca2e:	f1bb 0f02 	cmp.w	fp, #2
 800ca32:	d1ae      	bne.n	800c992 <_scanf_i+0x8a>
 800ca34:	6822      	ldr	r2, [r4, #0]
 800ca36:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ca3a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ca3e:	d1bf      	bne.n	800c9c0 <_scanf_i+0xb8>
 800ca40:	2310      	movs	r3, #16
 800ca42:	6063      	str	r3, [r4, #4]
 800ca44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ca48:	e7a2      	b.n	800c990 <_scanf_i+0x88>
 800ca4a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ca4e:	6022      	str	r2, [r4, #0]
 800ca50:	780b      	ldrb	r3, [r1, #0]
 800ca52:	f805 3b01 	strb.w	r3, [r5], #1
 800ca56:	e7de      	b.n	800ca16 <_scanf_i+0x10e>
 800ca58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ca5c:	4631      	mov	r1, r6
 800ca5e:	4650      	mov	r0, sl
 800ca60:	4798      	blx	r3
 800ca62:	2800      	cmp	r0, #0
 800ca64:	d0df      	beq.n	800ca26 <_scanf_i+0x11e>
 800ca66:	6823      	ldr	r3, [r4, #0]
 800ca68:	05db      	lsls	r3, r3, #23
 800ca6a:	d50d      	bpl.n	800ca88 <_scanf_i+0x180>
 800ca6c:	42bd      	cmp	r5, r7
 800ca6e:	d909      	bls.n	800ca84 <_scanf_i+0x17c>
 800ca70:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ca74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca78:	4632      	mov	r2, r6
 800ca7a:	4650      	mov	r0, sl
 800ca7c:	4798      	blx	r3
 800ca7e:	f105 39ff 	add.w	r9, r5, #4294967295
 800ca82:	464d      	mov	r5, r9
 800ca84:	42bd      	cmp	r5, r7
 800ca86:	d02d      	beq.n	800cae4 <_scanf_i+0x1dc>
 800ca88:	6822      	ldr	r2, [r4, #0]
 800ca8a:	f012 0210 	ands.w	r2, r2, #16
 800ca8e:	d113      	bne.n	800cab8 <_scanf_i+0x1b0>
 800ca90:	702a      	strb	r2, [r5, #0]
 800ca92:	6863      	ldr	r3, [r4, #4]
 800ca94:	9e01      	ldr	r6, [sp, #4]
 800ca96:	4639      	mov	r1, r7
 800ca98:	4650      	mov	r0, sl
 800ca9a:	47b0      	blx	r6
 800ca9c:	6821      	ldr	r1, [r4, #0]
 800ca9e:	f8d8 3000 	ldr.w	r3, [r8]
 800caa2:	f011 0f20 	tst.w	r1, #32
 800caa6:	d013      	beq.n	800cad0 <_scanf_i+0x1c8>
 800caa8:	1d1a      	adds	r2, r3, #4
 800caaa:	f8c8 2000 	str.w	r2, [r8]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6018      	str	r0, [r3, #0]
 800cab2:	68e3      	ldr	r3, [r4, #12]
 800cab4:	3301      	adds	r3, #1
 800cab6:	60e3      	str	r3, [r4, #12]
 800cab8:	1bed      	subs	r5, r5, r7
 800caba:	44ab      	add	fp, r5
 800cabc:	6925      	ldr	r5, [r4, #16]
 800cabe:	445d      	add	r5, fp
 800cac0:	6125      	str	r5, [r4, #16]
 800cac2:	2000      	movs	r0, #0
 800cac4:	b007      	add	sp, #28
 800cac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caca:	f04f 0b00 	mov.w	fp, #0
 800cace:	e7ca      	b.n	800ca66 <_scanf_i+0x15e>
 800cad0:	1d1a      	adds	r2, r3, #4
 800cad2:	f8c8 2000 	str.w	r2, [r8]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f011 0f01 	tst.w	r1, #1
 800cadc:	bf14      	ite	ne
 800cade:	8018      	strhne	r0, [r3, #0]
 800cae0:	6018      	streq	r0, [r3, #0]
 800cae2:	e7e6      	b.n	800cab2 <_scanf_i+0x1aa>
 800cae4:	2001      	movs	r0, #1
 800cae6:	e7ed      	b.n	800cac4 <_scanf_i+0x1bc>
 800cae8:	080104c4 	.word	0x080104c4
 800caec:	0800cccd 	.word	0x0800cccd
 800caf0:	0800a1dd 	.word	0x0800a1dd
 800caf4:	080108ee 	.word	0x080108ee

0800caf8 <_read_r>:
 800caf8:	b538      	push	{r3, r4, r5, lr}
 800cafa:	4d07      	ldr	r5, [pc, #28]	; (800cb18 <_read_r+0x20>)
 800cafc:	4604      	mov	r4, r0
 800cafe:	4608      	mov	r0, r1
 800cb00:	4611      	mov	r1, r2
 800cb02:	2200      	movs	r2, #0
 800cb04:	602a      	str	r2, [r5, #0]
 800cb06:	461a      	mov	r2, r3
 800cb08:	f7f8 fd57 	bl	80055ba <_read>
 800cb0c:	1c43      	adds	r3, r0, #1
 800cb0e:	d102      	bne.n	800cb16 <_read_r+0x1e>
 800cb10:	682b      	ldr	r3, [r5, #0]
 800cb12:	b103      	cbz	r3, 800cb16 <_read_r+0x1e>
 800cb14:	6023      	str	r3, [r4, #0]
 800cb16:	bd38      	pop	{r3, r4, r5, pc}
 800cb18:	20009d10 	.word	0x20009d10
 800cb1c:	00000000 	.word	0x00000000

0800cb20 <nan>:
 800cb20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cb28 <nan+0x8>
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	00000000 	.word	0x00000000
 800cb2c:	7ff80000 	.word	0x7ff80000

0800cb30 <_sbrk_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4d06      	ldr	r5, [pc, #24]	; (800cb4c <_sbrk_r+0x1c>)
 800cb34:	2300      	movs	r3, #0
 800cb36:	4604      	mov	r4, r0
 800cb38:	4608      	mov	r0, r1
 800cb3a:	602b      	str	r3, [r5, #0]
 800cb3c:	f7f8 fdaa 	bl	8005694 <_sbrk>
 800cb40:	1c43      	adds	r3, r0, #1
 800cb42:	d102      	bne.n	800cb4a <_sbrk_r+0x1a>
 800cb44:	682b      	ldr	r3, [r5, #0]
 800cb46:	b103      	cbz	r3, 800cb4a <_sbrk_r+0x1a>
 800cb48:	6023      	str	r3, [r4, #0]
 800cb4a:	bd38      	pop	{r3, r4, r5, pc}
 800cb4c:	20009d10 	.word	0x20009d10

0800cb50 <__sccl>:
 800cb50:	b570      	push	{r4, r5, r6, lr}
 800cb52:	780b      	ldrb	r3, [r1, #0]
 800cb54:	4604      	mov	r4, r0
 800cb56:	2b5e      	cmp	r3, #94	; 0x5e
 800cb58:	bf0b      	itete	eq
 800cb5a:	784b      	ldrbeq	r3, [r1, #1]
 800cb5c:	1c48      	addne	r0, r1, #1
 800cb5e:	1c88      	addeq	r0, r1, #2
 800cb60:	2200      	movne	r2, #0
 800cb62:	bf08      	it	eq
 800cb64:	2201      	moveq	r2, #1
 800cb66:	1e61      	subs	r1, r4, #1
 800cb68:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cb6c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cb70:	42a9      	cmp	r1, r5
 800cb72:	d1fb      	bne.n	800cb6c <__sccl+0x1c>
 800cb74:	b90b      	cbnz	r3, 800cb7a <__sccl+0x2a>
 800cb76:	3801      	subs	r0, #1
 800cb78:	bd70      	pop	{r4, r5, r6, pc}
 800cb7a:	f082 0201 	eor.w	r2, r2, #1
 800cb7e:	54e2      	strb	r2, [r4, r3]
 800cb80:	4605      	mov	r5, r0
 800cb82:	4628      	mov	r0, r5
 800cb84:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cb88:	292d      	cmp	r1, #45	; 0x2d
 800cb8a:	d006      	beq.n	800cb9a <__sccl+0x4a>
 800cb8c:	295d      	cmp	r1, #93	; 0x5d
 800cb8e:	d0f3      	beq.n	800cb78 <__sccl+0x28>
 800cb90:	b909      	cbnz	r1, 800cb96 <__sccl+0x46>
 800cb92:	4628      	mov	r0, r5
 800cb94:	e7f0      	b.n	800cb78 <__sccl+0x28>
 800cb96:	460b      	mov	r3, r1
 800cb98:	e7f1      	b.n	800cb7e <__sccl+0x2e>
 800cb9a:	786e      	ldrb	r6, [r5, #1]
 800cb9c:	2e5d      	cmp	r6, #93	; 0x5d
 800cb9e:	d0fa      	beq.n	800cb96 <__sccl+0x46>
 800cba0:	42b3      	cmp	r3, r6
 800cba2:	dcf8      	bgt.n	800cb96 <__sccl+0x46>
 800cba4:	3502      	adds	r5, #2
 800cba6:	4619      	mov	r1, r3
 800cba8:	3101      	adds	r1, #1
 800cbaa:	428e      	cmp	r6, r1
 800cbac:	5462      	strb	r2, [r4, r1]
 800cbae:	dcfb      	bgt.n	800cba8 <__sccl+0x58>
 800cbb0:	1af1      	subs	r1, r6, r3
 800cbb2:	3901      	subs	r1, #1
 800cbb4:	1c58      	adds	r0, r3, #1
 800cbb6:	42b3      	cmp	r3, r6
 800cbb8:	bfa8      	it	ge
 800cbba:	2100      	movge	r1, #0
 800cbbc:	1843      	adds	r3, r0, r1
 800cbbe:	e7e0      	b.n	800cb82 <__sccl+0x32>

0800cbc0 <strncmp>:
 800cbc0:	b510      	push	{r4, lr}
 800cbc2:	b17a      	cbz	r2, 800cbe4 <strncmp+0x24>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	3901      	subs	r1, #1
 800cbc8:	1884      	adds	r4, r0, r2
 800cbca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cbce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cbd2:	4290      	cmp	r0, r2
 800cbd4:	d101      	bne.n	800cbda <strncmp+0x1a>
 800cbd6:	42a3      	cmp	r3, r4
 800cbd8:	d101      	bne.n	800cbde <strncmp+0x1e>
 800cbda:	1a80      	subs	r0, r0, r2
 800cbdc:	bd10      	pop	{r4, pc}
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	d1f3      	bne.n	800cbca <strncmp+0xa>
 800cbe2:	e7fa      	b.n	800cbda <strncmp+0x1a>
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	e7f9      	b.n	800cbdc <strncmp+0x1c>

0800cbe8 <_strtoul_l.constprop.0>:
 800cbe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbec:	4f36      	ldr	r7, [pc, #216]	; (800ccc8 <_strtoul_l.constprop.0+0xe0>)
 800cbee:	4686      	mov	lr, r0
 800cbf0:	460d      	mov	r5, r1
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbf8:	5de6      	ldrb	r6, [r4, r7]
 800cbfa:	f016 0608 	ands.w	r6, r6, #8
 800cbfe:	d1f8      	bne.n	800cbf2 <_strtoul_l.constprop.0+0xa>
 800cc00:	2c2d      	cmp	r4, #45	; 0x2d
 800cc02:	d12f      	bne.n	800cc64 <_strtoul_l.constprop.0+0x7c>
 800cc04:	782c      	ldrb	r4, [r5, #0]
 800cc06:	2601      	movs	r6, #1
 800cc08:	1c85      	adds	r5, r0, #2
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d057      	beq.n	800ccbe <_strtoul_l.constprop.0+0xd6>
 800cc0e:	2b10      	cmp	r3, #16
 800cc10:	d109      	bne.n	800cc26 <_strtoul_l.constprop.0+0x3e>
 800cc12:	2c30      	cmp	r4, #48	; 0x30
 800cc14:	d107      	bne.n	800cc26 <_strtoul_l.constprop.0+0x3e>
 800cc16:	7828      	ldrb	r0, [r5, #0]
 800cc18:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cc1c:	2858      	cmp	r0, #88	; 0x58
 800cc1e:	d149      	bne.n	800ccb4 <_strtoul_l.constprop.0+0xcc>
 800cc20:	786c      	ldrb	r4, [r5, #1]
 800cc22:	2310      	movs	r3, #16
 800cc24:	3502      	adds	r5, #2
 800cc26:	f04f 38ff 	mov.w	r8, #4294967295
 800cc2a:	2700      	movs	r7, #0
 800cc2c:	fbb8 f8f3 	udiv	r8, r8, r3
 800cc30:	fb03 f908 	mul.w	r9, r3, r8
 800cc34:	ea6f 0909 	mvn.w	r9, r9
 800cc38:	4638      	mov	r0, r7
 800cc3a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cc3e:	f1bc 0f09 	cmp.w	ip, #9
 800cc42:	d814      	bhi.n	800cc6e <_strtoul_l.constprop.0+0x86>
 800cc44:	4664      	mov	r4, ip
 800cc46:	42a3      	cmp	r3, r4
 800cc48:	dd22      	ble.n	800cc90 <_strtoul_l.constprop.0+0xa8>
 800cc4a:	2f00      	cmp	r7, #0
 800cc4c:	db1d      	blt.n	800cc8a <_strtoul_l.constprop.0+0xa2>
 800cc4e:	4580      	cmp	r8, r0
 800cc50:	d31b      	bcc.n	800cc8a <_strtoul_l.constprop.0+0xa2>
 800cc52:	d101      	bne.n	800cc58 <_strtoul_l.constprop.0+0x70>
 800cc54:	45a1      	cmp	r9, r4
 800cc56:	db18      	blt.n	800cc8a <_strtoul_l.constprop.0+0xa2>
 800cc58:	fb00 4003 	mla	r0, r0, r3, r4
 800cc5c:	2701      	movs	r7, #1
 800cc5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc62:	e7ea      	b.n	800cc3a <_strtoul_l.constprop.0+0x52>
 800cc64:	2c2b      	cmp	r4, #43	; 0x2b
 800cc66:	bf04      	itt	eq
 800cc68:	782c      	ldrbeq	r4, [r5, #0]
 800cc6a:	1c85      	addeq	r5, r0, #2
 800cc6c:	e7cd      	b.n	800cc0a <_strtoul_l.constprop.0+0x22>
 800cc6e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cc72:	f1bc 0f19 	cmp.w	ip, #25
 800cc76:	d801      	bhi.n	800cc7c <_strtoul_l.constprop.0+0x94>
 800cc78:	3c37      	subs	r4, #55	; 0x37
 800cc7a:	e7e4      	b.n	800cc46 <_strtoul_l.constprop.0+0x5e>
 800cc7c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cc80:	f1bc 0f19 	cmp.w	ip, #25
 800cc84:	d804      	bhi.n	800cc90 <_strtoul_l.constprop.0+0xa8>
 800cc86:	3c57      	subs	r4, #87	; 0x57
 800cc88:	e7dd      	b.n	800cc46 <_strtoul_l.constprop.0+0x5e>
 800cc8a:	f04f 37ff 	mov.w	r7, #4294967295
 800cc8e:	e7e6      	b.n	800cc5e <_strtoul_l.constprop.0+0x76>
 800cc90:	2f00      	cmp	r7, #0
 800cc92:	da07      	bge.n	800cca4 <_strtoul_l.constprop.0+0xbc>
 800cc94:	2322      	movs	r3, #34	; 0x22
 800cc96:	f8ce 3000 	str.w	r3, [lr]
 800cc9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc9e:	b932      	cbnz	r2, 800ccae <_strtoul_l.constprop.0+0xc6>
 800cca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cca4:	b106      	cbz	r6, 800cca8 <_strtoul_l.constprop.0+0xc0>
 800cca6:	4240      	negs	r0, r0
 800cca8:	2a00      	cmp	r2, #0
 800ccaa:	d0f9      	beq.n	800cca0 <_strtoul_l.constprop.0+0xb8>
 800ccac:	b107      	cbz	r7, 800ccb0 <_strtoul_l.constprop.0+0xc8>
 800ccae:	1e69      	subs	r1, r5, #1
 800ccb0:	6011      	str	r1, [r2, #0]
 800ccb2:	e7f5      	b.n	800cca0 <_strtoul_l.constprop.0+0xb8>
 800ccb4:	2430      	movs	r4, #48	; 0x30
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d1b5      	bne.n	800cc26 <_strtoul_l.constprop.0+0x3e>
 800ccba:	2308      	movs	r3, #8
 800ccbc:	e7b3      	b.n	800cc26 <_strtoul_l.constprop.0+0x3e>
 800ccbe:	2c30      	cmp	r4, #48	; 0x30
 800ccc0:	d0a9      	beq.n	800cc16 <_strtoul_l.constprop.0+0x2e>
 800ccc2:	230a      	movs	r3, #10
 800ccc4:	e7af      	b.n	800cc26 <_strtoul_l.constprop.0+0x3e>
 800ccc6:	bf00      	nop
 800ccc8:	08010561 	.word	0x08010561

0800cccc <_strtoul_r>:
 800cccc:	f7ff bf8c 	b.w	800cbe8 <_strtoul_l.constprop.0>

0800ccd0 <__submore>:
 800ccd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd4:	460c      	mov	r4, r1
 800ccd6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ccd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccdc:	4299      	cmp	r1, r3
 800ccde:	d11d      	bne.n	800cd1c <__submore+0x4c>
 800cce0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cce4:	f7ff fa14 	bl	800c110 <_malloc_r>
 800cce8:	b918      	cbnz	r0, 800ccf2 <__submore+0x22>
 800ccea:	f04f 30ff 	mov.w	r0, #4294967295
 800ccee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccf6:	63a3      	str	r3, [r4, #56]	; 0x38
 800ccf8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ccfc:	6360      	str	r0, [r4, #52]	; 0x34
 800ccfe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cd02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cd06:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cd0a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cd0e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cd12:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cd16:	6020      	str	r0, [r4, #0]
 800cd18:	2000      	movs	r0, #0
 800cd1a:	e7e8      	b.n	800ccee <__submore+0x1e>
 800cd1c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cd1e:	0077      	lsls	r7, r6, #1
 800cd20:	463a      	mov	r2, r7
 800cd22:	f000 fa2d 	bl	800d180 <_realloc_r>
 800cd26:	4605      	mov	r5, r0
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	d0de      	beq.n	800ccea <__submore+0x1a>
 800cd2c:	eb00 0806 	add.w	r8, r0, r6
 800cd30:	4601      	mov	r1, r0
 800cd32:	4632      	mov	r2, r6
 800cd34:	4640      	mov	r0, r8
 800cd36:	f7fe fc99 	bl	800b66c <memcpy>
 800cd3a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cd3e:	f8c4 8000 	str.w	r8, [r4]
 800cd42:	e7e9      	b.n	800cd18 <__submore+0x48>

0800cd44 <__ascii_wctomb>:
 800cd44:	b149      	cbz	r1, 800cd5a <__ascii_wctomb+0x16>
 800cd46:	2aff      	cmp	r2, #255	; 0xff
 800cd48:	bf85      	ittet	hi
 800cd4a:	238a      	movhi	r3, #138	; 0x8a
 800cd4c:	6003      	strhi	r3, [r0, #0]
 800cd4e:	700a      	strbls	r2, [r1, #0]
 800cd50:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd54:	bf98      	it	ls
 800cd56:	2001      	movls	r0, #1
 800cd58:	4770      	bx	lr
 800cd5a:	4608      	mov	r0, r1
 800cd5c:	4770      	bx	lr
	...

0800cd60 <__assert_func>:
 800cd60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd62:	4614      	mov	r4, r2
 800cd64:	461a      	mov	r2, r3
 800cd66:	4b09      	ldr	r3, [pc, #36]	; (800cd8c <__assert_func+0x2c>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4605      	mov	r5, r0
 800cd6c:	68d8      	ldr	r0, [r3, #12]
 800cd6e:	b14c      	cbz	r4, 800cd84 <__assert_func+0x24>
 800cd70:	4b07      	ldr	r3, [pc, #28]	; (800cd90 <__assert_func+0x30>)
 800cd72:	9100      	str	r1, [sp, #0]
 800cd74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd78:	4906      	ldr	r1, [pc, #24]	; (800cd94 <__assert_func+0x34>)
 800cd7a:	462b      	mov	r3, r5
 800cd7c:	f000 f9a6 	bl	800d0cc <fiprintf>
 800cd80:	f000 fc46 	bl	800d610 <abort>
 800cd84:	4b04      	ldr	r3, [pc, #16]	; (800cd98 <__assert_func+0x38>)
 800cd86:	461c      	mov	r4, r3
 800cd88:	e7f3      	b.n	800cd72 <__assert_func+0x12>
 800cd8a:	bf00      	nop
 800cd8c:	2000001c 	.word	0x2000001c
 800cd90:	080108f0 	.word	0x080108f0
 800cd94:	080108fd 	.word	0x080108fd
 800cd98:	0801092b 	.word	0x0801092b

0800cd9c <__sflush_r>:
 800cd9c:	898a      	ldrh	r2, [r1, #12]
 800cd9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda2:	4605      	mov	r5, r0
 800cda4:	0710      	lsls	r0, r2, #28
 800cda6:	460c      	mov	r4, r1
 800cda8:	d458      	bmi.n	800ce5c <__sflush_r+0xc0>
 800cdaa:	684b      	ldr	r3, [r1, #4]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	dc05      	bgt.n	800cdbc <__sflush_r+0x20>
 800cdb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	dc02      	bgt.n	800cdbc <__sflush_r+0x20>
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdbe:	2e00      	cmp	r6, #0
 800cdc0:	d0f9      	beq.n	800cdb6 <__sflush_r+0x1a>
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cdc8:	682f      	ldr	r7, [r5, #0]
 800cdca:	602b      	str	r3, [r5, #0]
 800cdcc:	d032      	beq.n	800ce34 <__sflush_r+0x98>
 800cdce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cdd0:	89a3      	ldrh	r3, [r4, #12]
 800cdd2:	075a      	lsls	r2, r3, #29
 800cdd4:	d505      	bpl.n	800cde2 <__sflush_r+0x46>
 800cdd6:	6863      	ldr	r3, [r4, #4]
 800cdd8:	1ac0      	subs	r0, r0, r3
 800cdda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cddc:	b10b      	cbz	r3, 800cde2 <__sflush_r+0x46>
 800cdde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cde0:	1ac0      	subs	r0, r0, r3
 800cde2:	2300      	movs	r3, #0
 800cde4:	4602      	mov	r2, r0
 800cde6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cde8:	6a21      	ldr	r1, [r4, #32]
 800cdea:	4628      	mov	r0, r5
 800cdec:	47b0      	blx	r6
 800cdee:	1c43      	adds	r3, r0, #1
 800cdf0:	89a3      	ldrh	r3, [r4, #12]
 800cdf2:	d106      	bne.n	800ce02 <__sflush_r+0x66>
 800cdf4:	6829      	ldr	r1, [r5, #0]
 800cdf6:	291d      	cmp	r1, #29
 800cdf8:	d82c      	bhi.n	800ce54 <__sflush_r+0xb8>
 800cdfa:	4a2a      	ldr	r2, [pc, #168]	; (800cea4 <__sflush_r+0x108>)
 800cdfc:	40ca      	lsrs	r2, r1
 800cdfe:	07d6      	lsls	r6, r2, #31
 800ce00:	d528      	bpl.n	800ce54 <__sflush_r+0xb8>
 800ce02:	2200      	movs	r2, #0
 800ce04:	6062      	str	r2, [r4, #4]
 800ce06:	04d9      	lsls	r1, r3, #19
 800ce08:	6922      	ldr	r2, [r4, #16]
 800ce0a:	6022      	str	r2, [r4, #0]
 800ce0c:	d504      	bpl.n	800ce18 <__sflush_r+0x7c>
 800ce0e:	1c42      	adds	r2, r0, #1
 800ce10:	d101      	bne.n	800ce16 <__sflush_r+0x7a>
 800ce12:	682b      	ldr	r3, [r5, #0]
 800ce14:	b903      	cbnz	r3, 800ce18 <__sflush_r+0x7c>
 800ce16:	6560      	str	r0, [r4, #84]	; 0x54
 800ce18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce1a:	602f      	str	r7, [r5, #0]
 800ce1c:	2900      	cmp	r1, #0
 800ce1e:	d0ca      	beq.n	800cdb6 <__sflush_r+0x1a>
 800ce20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce24:	4299      	cmp	r1, r3
 800ce26:	d002      	beq.n	800ce2e <__sflush_r+0x92>
 800ce28:	4628      	mov	r0, r5
 800ce2a:	f7ff f905 	bl	800c038 <_free_r>
 800ce2e:	2000      	movs	r0, #0
 800ce30:	6360      	str	r0, [r4, #52]	; 0x34
 800ce32:	e7c1      	b.n	800cdb8 <__sflush_r+0x1c>
 800ce34:	6a21      	ldr	r1, [r4, #32]
 800ce36:	2301      	movs	r3, #1
 800ce38:	4628      	mov	r0, r5
 800ce3a:	47b0      	blx	r6
 800ce3c:	1c41      	adds	r1, r0, #1
 800ce3e:	d1c7      	bne.n	800cdd0 <__sflush_r+0x34>
 800ce40:	682b      	ldr	r3, [r5, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d0c4      	beq.n	800cdd0 <__sflush_r+0x34>
 800ce46:	2b1d      	cmp	r3, #29
 800ce48:	d001      	beq.n	800ce4e <__sflush_r+0xb2>
 800ce4a:	2b16      	cmp	r3, #22
 800ce4c:	d101      	bne.n	800ce52 <__sflush_r+0xb6>
 800ce4e:	602f      	str	r7, [r5, #0]
 800ce50:	e7b1      	b.n	800cdb6 <__sflush_r+0x1a>
 800ce52:	89a3      	ldrh	r3, [r4, #12]
 800ce54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce58:	81a3      	strh	r3, [r4, #12]
 800ce5a:	e7ad      	b.n	800cdb8 <__sflush_r+0x1c>
 800ce5c:	690f      	ldr	r7, [r1, #16]
 800ce5e:	2f00      	cmp	r7, #0
 800ce60:	d0a9      	beq.n	800cdb6 <__sflush_r+0x1a>
 800ce62:	0793      	lsls	r3, r2, #30
 800ce64:	680e      	ldr	r6, [r1, #0]
 800ce66:	bf08      	it	eq
 800ce68:	694b      	ldreq	r3, [r1, #20]
 800ce6a:	600f      	str	r7, [r1, #0]
 800ce6c:	bf18      	it	ne
 800ce6e:	2300      	movne	r3, #0
 800ce70:	eba6 0807 	sub.w	r8, r6, r7
 800ce74:	608b      	str	r3, [r1, #8]
 800ce76:	f1b8 0f00 	cmp.w	r8, #0
 800ce7a:	dd9c      	ble.n	800cdb6 <__sflush_r+0x1a>
 800ce7c:	6a21      	ldr	r1, [r4, #32]
 800ce7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce80:	4643      	mov	r3, r8
 800ce82:	463a      	mov	r2, r7
 800ce84:	4628      	mov	r0, r5
 800ce86:	47b0      	blx	r6
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	dc06      	bgt.n	800ce9a <__sflush_r+0xfe>
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce92:	81a3      	strh	r3, [r4, #12]
 800ce94:	f04f 30ff 	mov.w	r0, #4294967295
 800ce98:	e78e      	b.n	800cdb8 <__sflush_r+0x1c>
 800ce9a:	4407      	add	r7, r0
 800ce9c:	eba8 0800 	sub.w	r8, r8, r0
 800cea0:	e7e9      	b.n	800ce76 <__sflush_r+0xda>
 800cea2:	bf00      	nop
 800cea4:	20400001 	.word	0x20400001

0800cea8 <_fflush_r>:
 800cea8:	b538      	push	{r3, r4, r5, lr}
 800ceaa:	690b      	ldr	r3, [r1, #16]
 800ceac:	4605      	mov	r5, r0
 800ceae:	460c      	mov	r4, r1
 800ceb0:	b913      	cbnz	r3, 800ceb8 <_fflush_r+0x10>
 800ceb2:	2500      	movs	r5, #0
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	bd38      	pop	{r3, r4, r5, pc}
 800ceb8:	b118      	cbz	r0, 800cec2 <_fflush_r+0x1a>
 800ceba:	6983      	ldr	r3, [r0, #24]
 800cebc:	b90b      	cbnz	r3, 800cec2 <_fflush_r+0x1a>
 800cebe:	f000 f887 	bl	800cfd0 <__sinit>
 800cec2:	4b14      	ldr	r3, [pc, #80]	; (800cf14 <_fflush_r+0x6c>)
 800cec4:	429c      	cmp	r4, r3
 800cec6:	d11b      	bne.n	800cf00 <_fflush_r+0x58>
 800cec8:	686c      	ldr	r4, [r5, #4]
 800ceca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d0ef      	beq.n	800ceb2 <_fflush_r+0xa>
 800ced2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ced4:	07d0      	lsls	r0, r2, #31
 800ced6:	d404      	bmi.n	800cee2 <_fflush_r+0x3a>
 800ced8:	0599      	lsls	r1, r3, #22
 800ceda:	d402      	bmi.n	800cee2 <_fflush_r+0x3a>
 800cedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cede:	f000 f927 	bl	800d130 <__retarget_lock_acquire_recursive>
 800cee2:	4628      	mov	r0, r5
 800cee4:	4621      	mov	r1, r4
 800cee6:	f7ff ff59 	bl	800cd9c <__sflush_r>
 800ceea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ceec:	07da      	lsls	r2, r3, #31
 800ceee:	4605      	mov	r5, r0
 800cef0:	d4e0      	bmi.n	800ceb4 <_fflush_r+0xc>
 800cef2:	89a3      	ldrh	r3, [r4, #12]
 800cef4:	059b      	lsls	r3, r3, #22
 800cef6:	d4dd      	bmi.n	800ceb4 <_fflush_r+0xc>
 800cef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cefa:	f000 f91a 	bl	800d132 <__retarget_lock_release_recursive>
 800cefe:	e7d9      	b.n	800ceb4 <_fflush_r+0xc>
 800cf00:	4b05      	ldr	r3, [pc, #20]	; (800cf18 <_fflush_r+0x70>)
 800cf02:	429c      	cmp	r4, r3
 800cf04:	d101      	bne.n	800cf0a <_fflush_r+0x62>
 800cf06:	68ac      	ldr	r4, [r5, #8]
 800cf08:	e7df      	b.n	800ceca <_fflush_r+0x22>
 800cf0a:	4b04      	ldr	r3, [pc, #16]	; (800cf1c <_fflush_r+0x74>)
 800cf0c:	429c      	cmp	r4, r3
 800cf0e:	bf08      	it	eq
 800cf10:	68ec      	ldreq	r4, [r5, #12]
 800cf12:	e7da      	b.n	800ceca <_fflush_r+0x22>
 800cf14:	0801094c 	.word	0x0801094c
 800cf18:	0801096c 	.word	0x0801096c
 800cf1c:	0801092c 	.word	0x0801092c

0800cf20 <std>:
 800cf20:	2300      	movs	r3, #0
 800cf22:	b510      	push	{r4, lr}
 800cf24:	4604      	mov	r4, r0
 800cf26:	e9c0 3300 	strd	r3, r3, [r0]
 800cf2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf2e:	6083      	str	r3, [r0, #8]
 800cf30:	8181      	strh	r1, [r0, #12]
 800cf32:	6643      	str	r3, [r0, #100]	; 0x64
 800cf34:	81c2      	strh	r2, [r0, #14]
 800cf36:	6183      	str	r3, [r0, #24]
 800cf38:	4619      	mov	r1, r3
 800cf3a:	2208      	movs	r2, #8
 800cf3c:	305c      	adds	r0, #92	; 0x5c
 800cf3e:	f7fb fb7b 	bl	8008638 <memset>
 800cf42:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <std+0x38>)
 800cf44:	6263      	str	r3, [r4, #36]	; 0x24
 800cf46:	4b05      	ldr	r3, [pc, #20]	; (800cf5c <std+0x3c>)
 800cf48:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf4a:	4b05      	ldr	r3, [pc, #20]	; (800cf60 <std+0x40>)
 800cf4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf4e:	4b05      	ldr	r3, [pc, #20]	; (800cf64 <std+0x44>)
 800cf50:	6224      	str	r4, [r4, #32]
 800cf52:	6323      	str	r3, [r4, #48]	; 0x30
 800cf54:	bd10      	pop	{r4, pc}
 800cf56:	bf00      	nop
 800cf58:	080093e1 	.word	0x080093e1
 800cf5c:	08009407 	.word	0x08009407
 800cf60:	0800943f 	.word	0x0800943f
 800cf64:	08009463 	.word	0x08009463

0800cf68 <_cleanup_r>:
 800cf68:	4901      	ldr	r1, [pc, #4]	; (800cf70 <_cleanup_r+0x8>)
 800cf6a:	f000 b8c1 	b.w	800d0f0 <_fwalk_reent>
 800cf6e:	bf00      	nop
 800cf70:	0800cea9 	.word	0x0800cea9

0800cf74 <__sfmoreglue>:
 800cf74:	b570      	push	{r4, r5, r6, lr}
 800cf76:	2268      	movs	r2, #104	; 0x68
 800cf78:	1e4d      	subs	r5, r1, #1
 800cf7a:	4355      	muls	r5, r2
 800cf7c:	460e      	mov	r6, r1
 800cf7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf82:	f7ff f8c5 	bl	800c110 <_malloc_r>
 800cf86:	4604      	mov	r4, r0
 800cf88:	b140      	cbz	r0, 800cf9c <__sfmoreglue+0x28>
 800cf8a:	2100      	movs	r1, #0
 800cf8c:	e9c0 1600 	strd	r1, r6, [r0]
 800cf90:	300c      	adds	r0, #12
 800cf92:	60a0      	str	r0, [r4, #8]
 800cf94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf98:	f7fb fb4e 	bl	8008638 <memset>
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	bd70      	pop	{r4, r5, r6, pc}

0800cfa0 <__sfp_lock_acquire>:
 800cfa0:	4801      	ldr	r0, [pc, #4]	; (800cfa8 <__sfp_lock_acquire+0x8>)
 800cfa2:	f000 b8c5 	b.w	800d130 <__retarget_lock_acquire_recursive>
 800cfa6:	bf00      	nop
 800cfa8:	20009d15 	.word	0x20009d15

0800cfac <__sfp_lock_release>:
 800cfac:	4801      	ldr	r0, [pc, #4]	; (800cfb4 <__sfp_lock_release+0x8>)
 800cfae:	f000 b8c0 	b.w	800d132 <__retarget_lock_release_recursive>
 800cfb2:	bf00      	nop
 800cfb4:	20009d15 	.word	0x20009d15

0800cfb8 <__sinit_lock_acquire>:
 800cfb8:	4801      	ldr	r0, [pc, #4]	; (800cfc0 <__sinit_lock_acquire+0x8>)
 800cfba:	f000 b8b9 	b.w	800d130 <__retarget_lock_acquire_recursive>
 800cfbe:	bf00      	nop
 800cfc0:	20009d16 	.word	0x20009d16

0800cfc4 <__sinit_lock_release>:
 800cfc4:	4801      	ldr	r0, [pc, #4]	; (800cfcc <__sinit_lock_release+0x8>)
 800cfc6:	f000 b8b4 	b.w	800d132 <__retarget_lock_release_recursive>
 800cfca:	bf00      	nop
 800cfcc:	20009d16 	.word	0x20009d16

0800cfd0 <__sinit>:
 800cfd0:	b510      	push	{r4, lr}
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	f7ff fff0 	bl	800cfb8 <__sinit_lock_acquire>
 800cfd8:	69a3      	ldr	r3, [r4, #24]
 800cfda:	b11b      	cbz	r3, 800cfe4 <__sinit+0x14>
 800cfdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfe0:	f7ff bff0 	b.w	800cfc4 <__sinit_lock_release>
 800cfe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cfe8:	6523      	str	r3, [r4, #80]	; 0x50
 800cfea:	4b13      	ldr	r3, [pc, #76]	; (800d038 <__sinit+0x68>)
 800cfec:	4a13      	ldr	r2, [pc, #76]	; (800d03c <__sinit+0x6c>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	62a2      	str	r2, [r4, #40]	; 0x28
 800cff2:	42a3      	cmp	r3, r4
 800cff4:	bf04      	itt	eq
 800cff6:	2301      	moveq	r3, #1
 800cff8:	61a3      	streq	r3, [r4, #24]
 800cffa:	4620      	mov	r0, r4
 800cffc:	f000 f820 	bl	800d040 <__sfp>
 800d000:	6060      	str	r0, [r4, #4]
 800d002:	4620      	mov	r0, r4
 800d004:	f000 f81c 	bl	800d040 <__sfp>
 800d008:	60a0      	str	r0, [r4, #8]
 800d00a:	4620      	mov	r0, r4
 800d00c:	f000 f818 	bl	800d040 <__sfp>
 800d010:	2200      	movs	r2, #0
 800d012:	60e0      	str	r0, [r4, #12]
 800d014:	2104      	movs	r1, #4
 800d016:	6860      	ldr	r0, [r4, #4]
 800d018:	f7ff ff82 	bl	800cf20 <std>
 800d01c:	68a0      	ldr	r0, [r4, #8]
 800d01e:	2201      	movs	r2, #1
 800d020:	2109      	movs	r1, #9
 800d022:	f7ff ff7d 	bl	800cf20 <std>
 800d026:	68e0      	ldr	r0, [r4, #12]
 800d028:	2202      	movs	r2, #2
 800d02a:	2112      	movs	r1, #18
 800d02c:	f7ff ff78 	bl	800cf20 <std>
 800d030:	2301      	movs	r3, #1
 800d032:	61a3      	str	r3, [r4, #24]
 800d034:	e7d2      	b.n	800cfdc <__sinit+0xc>
 800d036:	bf00      	nop
 800d038:	080104d0 	.word	0x080104d0
 800d03c:	0800cf69 	.word	0x0800cf69

0800d040 <__sfp>:
 800d040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d042:	4607      	mov	r7, r0
 800d044:	f7ff ffac 	bl	800cfa0 <__sfp_lock_acquire>
 800d048:	4b1e      	ldr	r3, [pc, #120]	; (800d0c4 <__sfp+0x84>)
 800d04a:	681e      	ldr	r6, [r3, #0]
 800d04c:	69b3      	ldr	r3, [r6, #24]
 800d04e:	b913      	cbnz	r3, 800d056 <__sfp+0x16>
 800d050:	4630      	mov	r0, r6
 800d052:	f7ff ffbd 	bl	800cfd0 <__sinit>
 800d056:	3648      	adds	r6, #72	; 0x48
 800d058:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d05c:	3b01      	subs	r3, #1
 800d05e:	d503      	bpl.n	800d068 <__sfp+0x28>
 800d060:	6833      	ldr	r3, [r6, #0]
 800d062:	b30b      	cbz	r3, 800d0a8 <__sfp+0x68>
 800d064:	6836      	ldr	r6, [r6, #0]
 800d066:	e7f7      	b.n	800d058 <__sfp+0x18>
 800d068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d06c:	b9d5      	cbnz	r5, 800d0a4 <__sfp+0x64>
 800d06e:	4b16      	ldr	r3, [pc, #88]	; (800d0c8 <__sfp+0x88>)
 800d070:	60e3      	str	r3, [r4, #12]
 800d072:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d076:	6665      	str	r5, [r4, #100]	; 0x64
 800d078:	f000 f859 	bl	800d12e <__retarget_lock_init_recursive>
 800d07c:	f7ff ff96 	bl	800cfac <__sfp_lock_release>
 800d080:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d084:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d088:	6025      	str	r5, [r4, #0]
 800d08a:	61a5      	str	r5, [r4, #24]
 800d08c:	2208      	movs	r2, #8
 800d08e:	4629      	mov	r1, r5
 800d090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d094:	f7fb fad0 	bl	8008638 <memset>
 800d098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d09c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0a4:	3468      	adds	r4, #104	; 0x68
 800d0a6:	e7d9      	b.n	800d05c <__sfp+0x1c>
 800d0a8:	2104      	movs	r1, #4
 800d0aa:	4638      	mov	r0, r7
 800d0ac:	f7ff ff62 	bl	800cf74 <__sfmoreglue>
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	6030      	str	r0, [r6, #0]
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	d1d5      	bne.n	800d064 <__sfp+0x24>
 800d0b8:	f7ff ff78 	bl	800cfac <__sfp_lock_release>
 800d0bc:	230c      	movs	r3, #12
 800d0be:	603b      	str	r3, [r7, #0]
 800d0c0:	e7ee      	b.n	800d0a0 <__sfp+0x60>
 800d0c2:	bf00      	nop
 800d0c4:	080104d0 	.word	0x080104d0
 800d0c8:	ffff0001 	.word	0xffff0001

0800d0cc <fiprintf>:
 800d0cc:	b40e      	push	{r1, r2, r3}
 800d0ce:	b503      	push	{r0, r1, lr}
 800d0d0:	4601      	mov	r1, r0
 800d0d2:	ab03      	add	r3, sp, #12
 800d0d4:	4805      	ldr	r0, [pc, #20]	; (800d0ec <fiprintf+0x20>)
 800d0d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0da:	6800      	ldr	r0, [r0, #0]
 800d0dc:	9301      	str	r3, [sp, #4]
 800d0de:	f000 f8a7 	bl	800d230 <_vfiprintf_r>
 800d0e2:	b002      	add	sp, #8
 800d0e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0e8:	b003      	add	sp, #12
 800d0ea:	4770      	bx	lr
 800d0ec:	2000001c 	.word	0x2000001c

0800d0f0 <_fwalk_reent>:
 800d0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0f4:	4606      	mov	r6, r0
 800d0f6:	4688      	mov	r8, r1
 800d0f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d0fc:	2700      	movs	r7, #0
 800d0fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d102:	f1b9 0901 	subs.w	r9, r9, #1
 800d106:	d505      	bpl.n	800d114 <_fwalk_reent+0x24>
 800d108:	6824      	ldr	r4, [r4, #0]
 800d10a:	2c00      	cmp	r4, #0
 800d10c:	d1f7      	bne.n	800d0fe <_fwalk_reent+0xe>
 800d10e:	4638      	mov	r0, r7
 800d110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d114:	89ab      	ldrh	r3, [r5, #12]
 800d116:	2b01      	cmp	r3, #1
 800d118:	d907      	bls.n	800d12a <_fwalk_reent+0x3a>
 800d11a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d11e:	3301      	adds	r3, #1
 800d120:	d003      	beq.n	800d12a <_fwalk_reent+0x3a>
 800d122:	4629      	mov	r1, r5
 800d124:	4630      	mov	r0, r6
 800d126:	47c0      	blx	r8
 800d128:	4307      	orrs	r7, r0
 800d12a:	3568      	adds	r5, #104	; 0x68
 800d12c:	e7e9      	b.n	800d102 <_fwalk_reent+0x12>

0800d12e <__retarget_lock_init_recursive>:
 800d12e:	4770      	bx	lr

0800d130 <__retarget_lock_acquire_recursive>:
 800d130:	4770      	bx	lr

0800d132 <__retarget_lock_release_recursive>:
 800d132:	4770      	bx	lr

0800d134 <memmove>:
 800d134:	4288      	cmp	r0, r1
 800d136:	b510      	push	{r4, lr}
 800d138:	eb01 0402 	add.w	r4, r1, r2
 800d13c:	d902      	bls.n	800d144 <memmove+0x10>
 800d13e:	4284      	cmp	r4, r0
 800d140:	4623      	mov	r3, r4
 800d142:	d807      	bhi.n	800d154 <memmove+0x20>
 800d144:	1e43      	subs	r3, r0, #1
 800d146:	42a1      	cmp	r1, r4
 800d148:	d008      	beq.n	800d15c <memmove+0x28>
 800d14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d152:	e7f8      	b.n	800d146 <memmove+0x12>
 800d154:	4402      	add	r2, r0
 800d156:	4601      	mov	r1, r0
 800d158:	428a      	cmp	r2, r1
 800d15a:	d100      	bne.n	800d15e <memmove+0x2a>
 800d15c:	bd10      	pop	{r4, pc}
 800d15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d166:	e7f7      	b.n	800d158 <memmove+0x24>

0800d168 <__malloc_lock>:
 800d168:	4801      	ldr	r0, [pc, #4]	; (800d170 <__malloc_lock+0x8>)
 800d16a:	f7ff bfe1 	b.w	800d130 <__retarget_lock_acquire_recursive>
 800d16e:	bf00      	nop
 800d170:	20009d14 	.word	0x20009d14

0800d174 <__malloc_unlock>:
 800d174:	4801      	ldr	r0, [pc, #4]	; (800d17c <__malloc_unlock+0x8>)
 800d176:	f7ff bfdc 	b.w	800d132 <__retarget_lock_release_recursive>
 800d17a:	bf00      	nop
 800d17c:	20009d14 	.word	0x20009d14

0800d180 <_realloc_r>:
 800d180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d184:	4680      	mov	r8, r0
 800d186:	4614      	mov	r4, r2
 800d188:	460e      	mov	r6, r1
 800d18a:	b921      	cbnz	r1, 800d196 <_realloc_r+0x16>
 800d18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d190:	4611      	mov	r1, r2
 800d192:	f7fe bfbd 	b.w	800c110 <_malloc_r>
 800d196:	b92a      	cbnz	r2, 800d1a4 <_realloc_r+0x24>
 800d198:	f7fe ff4e 	bl	800c038 <_free_r>
 800d19c:	4625      	mov	r5, r4
 800d19e:	4628      	mov	r0, r5
 800d1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1a4:	f000 faa0 	bl	800d6e8 <_malloc_usable_size_r>
 800d1a8:	4284      	cmp	r4, r0
 800d1aa:	4607      	mov	r7, r0
 800d1ac:	d802      	bhi.n	800d1b4 <_realloc_r+0x34>
 800d1ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d1b2:	d812      	bhi.n	800d1da <_realloc_r+0x5a>
 800d1b4:	4621      	mov	r1, r4
 800d1b6:	4640      	mov	r0, r8
 800d1b8:	f7fe ffaa 	bl	800c110 <_malloc_r>
 800d1bc:	4605      	mov	r5, r0
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	d0ed      	beq.n	800d19e <_realloc_r+0x1e>
 800d1c2:	42bc      	cmp	r4, r7
 800d1c4:	4622      	mov	r2, r4
 800d1c6:	4631      	mov	r1, r6
 800d1c8:	bf28      	it	cs
 800d1ca:	463a      	movcs	r2, r7
 800d1cc:	f7fe fa4e 	bl	800b66c <memcpy>
 800d1d0:	4631      	mov	r1, r6
 800d1d2:	4640      	mov	r0, r8
 800d1d4:	f7fe ff30 	bl	800c038 <_free_r>
 800d1d8:	e7e1      	b.n	800d19e <_realloc_r+0x1e>
 800d1da:	4635      	mov	r5, r6
 800d1dc:	e7df      	b.n	800d19e <_realloc_r+0x1e>

0800d1de <__sfputc_r>:
 800d1de:	6893      	ldr	r3, [r2, #8]
 800d1e0:	3b01      	subs	r3, #1
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	b410      	push	{r4}
 800d1e6:	6093      	str	r3, [r2, #8]
 800d1e8:	da08      	bge.n	800d1fc <__sfputc_r+0x1e>
 800d1ea:	6994      	ldr	r4, [r2, #24]
 800d1ec:	42a3      	cmp	r3, r4
 800d1ee:	db01      	blt.n	800d1f4 <__sfputc_r+0x16>
 800d1f0:	290a      	cmp	r1, #10
 800d1f2:	d103      	bne.n	800d1fc <__sfputc_r+0x1e>
 800d1f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1f8:	f000 b94a 	b.w	800d490 <__swbuf_r>
 800d1fc:	6813      	ldr	r3, [r2, #0]
 800d1fe:	1c58      	adds	r0, r3, #1
 800d200:	6010      	str	r0, [r2, #0]
 800d202:	7019      	strb	r1, [r3, #0]
 800d204:	4608      	mov	r0, r1
 800d206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <__sfputs_r>:
 800d20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20e:	4606      	mov	r6, r0
 800d210:	460f      	mov	r7, r1
 800d212:	4614      	mov	r4, r2
 800d214:	18d5      	adds	r5, r2, r3
 800d216:	42ac      	cmp	r4, r5
 800d218:	d101      	bne.n	800d21e <__sfputs_r+0x12>
 800d21a:	2000      	movs	r0, #0
 800d21c:	e007      	b.n	800d22e <__sfputs_r+0x22>
 800d21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d222:	463a      	mov	r2, r7
 800d224:	4630      	mov	r0, r6
 800d226:	f7ff ffda 	bl	800d1de <__sfputc_r>
 800d22a:	1c43      	adds	r3, r0, #1
 800d22c:	d1f3      	bne.n	800d216 <__sfputs_r+0xa>
 800d22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d230 <_vfiprintf_r>:
 800d230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d234:	460d      	mov	r5, r1
 800d236:	b09d      	sub	sp, #116	; 0x74
 800d238:	4614      	mov	r4, r2
 800d23a:	4698      	mov	r8, r3
 800d23c:	4606      	mov	r6, r0
 800d23e:	b118      	cbz	r0, 800d248 <_vfiprintf_r+0x18>
 800d240:	6983      	ldr	r3, [r0, #24]
 800d242:	b90b      	cbnz	r3, 800d248 <_vfiprintf_r+0x18>
 800d244:	f7ff fec4 	bl	800cfd0 <__sinit>
 800d248:	4b89      	ldr	r3, [pc, #548]	; (800d470 <_vfiprintf_r+0x240>)
 800d24a:	429d      	cmp	r5, r3
 800d24c:	d11b      	bne.n	800d286 <_vfiprintf_r+0x56>
 800d24e:	6875      	ldr	r5, [r6, #4]
 800d250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d252:	07d9      	lsls	r1, r3, #31
 800d254:	d405      	bmi.n	800d262 <_vfiprintf_r+0x32>
 800d256:	89ab      	ldrh	r3, [r5, #12]
 800d258:	059a      	lsls	r2, r3, #22
 800d25a:	d402      	bmi.n	800d262 <_vfiprintf_r+0x32>
 800d25c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d25e:	f7ff ff67 	bl	800d130 <__retarget_lock_acquire_recursive>
 800d262:	89ab      	ldrh	r3, [r5, #12]
 800d264:	071b      	lsls	r3, r3, #28
 800d266:	d501      	bpl.n	800d26c <_vfiprintf_r+0x3c>
 800d268:	692b      	ldr	r3, [r5, #16]
 800d26a:	b9eb      	cbnz	r3, 800d2a8 <_vfiprintf_r+0x78>
 800d26c:	4629      	mov	r1, r5
 800d26e:	4630      	mov	r0, r6
 800d270:	f000 f960 	bl	800d534 <__swsetup_r>
 800d274:	b1c0      	cbz	r0, 800d2a8 <_vfiprintf_r+0x78>
 800d276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d278:	07dc      	lsls	r4, r3, #31
 800d27a:	d50e      	bpl.n	800d29a <_vfiprintf_r+0x6a>
 800d27c:	f04f 30ff 	mov.w	r0, #4294967295
 800d280:	b01d      	add	sp, #116	; 0x74
 800d282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d286:	4b7b      	ldr	r3, [pc, #492]	; (800d474 <_vfiprintf_r+0x244>)
 800d288:	429d      	cmp	r5, r3
 800d28a:	d101      	bne.n	800d290 <_vfiprintf_r+0x60>
 800d28c:	68b5      	ldr	r5, [r6, #8]
 800d28e:	e7df      	b.n	800d250 <_vfiprintf_r+0x20>
 800d290:	4b79      	ldr	r3, [pc, #484]	; (800d478 <_vfiprintf_r+0x248>)
 800d292:	429d      	cmp	r5, r3
 800d294:	bf08      	it	eq
 800d296:	68f5      	ldreq	r5, [r6, #12]
 800d298:	e7da      	b.n	800d250 <_vfiprintf_r+0x20>
 800d29a:	89ab      	ldrh	r3, [r5, #12]
 800d29c:	0598      	lsls	r0, r3, #22
 800d29e:	d4ed      	bmi.n	800d27c <_vfiprintf_r+0x4c>
 800d2a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2a2:	f7ff ff46 	bl	800d132 <__retarget_lock_release_recursive>
 800d2a6:	e7e9      	b.n	800d27c <_vfiprintf_r+0x4c>
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ac:	2320      	movs	r3, #32
 800d2ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2b6:	2330      	movs	r3, #48	; 0x30
 800d2b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d47c <_vfiprintf_r+0x24c>
 800d2bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2c0:	f04f 0901 	mov.w	r9, #1
 800d2c4:	4623      	mov	r3, r4
 800d2c6:	469a      	mov	sl, r3
 800d2c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2cc:	b10a      	cbz	r2, 800d2d2 <_vfiprintf_r+0xa2>
 800d2ce:	2a25      	cmp	r2, #37	; 0x25
 800d2d0:	d1f9      	bne.n	800d2c6 <_vfiprintf_r+0x96>
 800d2d2:	ebba 0b04 	subs.w	fp, sl, r4
 800d2d6:	d00b      	beq.n	800d2f0 <_vfiprintf_r+0xc0>
 800d2d8:	465b      	mov	r3, fp
 800d2da:	4622      	mov	r2, r4
 800d2dc:	4629      	mov	r1, r5
 800d2de:	4630      	mov	r0, r6
 800d2e0:	f7ff ff94 	bl	800d20c <__sfputs_r>
 800d2e4:	3001      	adds	r0, #1
 800d2e6:	f000 80aa 	beq.w	800d43e <_vfiprintf_r+0x20e>
 800d2ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2ec:	445a      	add	r2, fp
 800d2ee:	9209      	str	r2, [sp, #36]	; 0x24
 800d2f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f000 80a2 	beq.w	800d43e <_vfiprintf_r+0x20e>
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d304:	f10a 0a01 	add.w	sl, sl, #1
 800d308:	9304      	str	r3, [sp, #16]
 800d30a:	9307      	str	r3, [sp, #28]
 800d30c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d310:	931a      	str	r3, [sp, #104]	; 0x68
 800d312:	4654      	mov	r4, sl
 800d314:	2205      	movs	r2, #5
 800d316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d31a:	4858      	ldr	r0, [pc, #352]	; (800d47c <_vfiprintf_r+0x24c>)
 800d31c:	f7f2 ff78 	bl	8000210 <memchr>
 800d320:	9a04      	ldr	r2, [sp, #16]
 800d322:	b9d8      	cbnz	r0, 800d35c <_vfiprintf_r+0x12c>
 800d324:	06d1      	lsls	r1, r2, #27
 800d326:	bf44      	itt	mi
 800d328:	2320      	movmi	r3, #32
 800d32a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d32e:	0713      	lsls	r3, r2, #28
 800d330:	bf44      	itt	mi
 800d332:	232b      	movmi	r3, #43	; 0x2b
 800d334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d338:	f89a 3000 	ldrb.w	r3, [sl]
 800d33c:	2b2a      	cmp	r3, #42	; 0x2a
 800d33e:	d015      	beq.n	800d36c <_vfiprintf_r+0x13c>
 800d340:	9a07      	ldr	r2, [sp, #28]
 800d342:	4654      	mov	r4, sl
 800d344:	2000      	movs	r0, #0
 800d346:	f04f 0c0a 	mov.w	ip, #10
 800d34a:	4621      	mov	r1, r4
 800d34c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d350:	3b30      	subs	r3, #48	; 0x30
 800d352:	2b09      	cmp	r3, #9
 800d354:	d94e      	bls.n	800d3f4 <_vfiprintf_r+0x1c4>
 800d356:	b1b0      	cbz	r0, 800d386 <_vfiprintf_r+0x156>
 800d358:	9207      	str	r2, [sp, #28]
 800d35a:	e014      	b.n	800d386 <_vfiprintf_r+0x156>
 800d35c:	eba0 0308 	sub.w	r3, r0, r8
 800d360:	fa09 f303 	lsl.w	r3, r9, r3
 800d364:	4313      	orrs	r3, r2
 800d366:	9304      	str	r3, [sp, #16]
 800d368:	46a2      	mov	sl, r4
 800d36a:	e7d2      	b.n	800d312 <_vfiprintf_r+0xe2>
 800d36c:	9b03      	ldr	r3, [sp, #12]
 800d36e:	1d19      	adds	r1, r3, #4
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	9103      	str	r1, [sp, #12]
 800d374:	2b00      	cmp	r3, #0
 800d376:	bfbb      	ittet	lt
 800d378:	425b      	neglt	r3, r3
 800d37a:	f042 0202 	orrlt.w	r2, r2, #2
 800d37e:	9307      	strge	r3, [sp, #28]
 800d380:	9307      	strlt	r3, [sp, #28]
 800d382:	bfb8      	it	lt
 800d384:	9204      	strlt	r2, [sp, #16]
 800d386:	7823      	ldrb	r3, [r4, #0]
 800d388:	2b2e      	cmp	r3, #46	; 0x2e
 800d38a:	d10c      	bne.n	800d3a6 <_vfiprintf_r+0x176>
 800d38c:	7863      	ldrb	r3, [r4, #1]
 800d38e:	2b2a      	cmp	r3, #42	; 0x2a
 800d390:	d135      	bne.n	800d3fe <_vfiprintf_r+0x1ce>
 800d392:	9b03      	ldr	r3, [sp, #12]
 800d394:	1d1a      	adds	r2, r3, #4
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	9203      	str	r2, [sp, #12]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	bfb8      	it	lt
 800d39e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3a2:	3402      	adds	r4, #2
 800d3a4:	9305      	str	r3, [sp, #20]
 800d3a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d48c <_vfiprintf_r+0x25c>
 800d3aa:	7821      	ldrb	r1, [r4, #0]
 800d3ac:	2203      	movs	r2, #3
 800d3ae:	4650      	mov	r0, sl
 800d3b0:	f7f2 ff2e 	bl	8000210 <memchr>
 800d3b4:	b140      	cbz	r0, 800d3c8 <_vfiprintf_r+0x198>
 800d3b6:	2340      	movs	r3, #64	; 0x40
 800d3b8:	eba0 000a 	sub.w	r0, r0, sl
 800d3bc:	fa03 f000 	lsl.w	r0, r3, r0
 800d3c0:	9b04      	ldr	r3, [sp, #16]
 800d3c2:	4303      	orrs	r3, r0
 800d3c4:	3401      	adds	r4, #1
 800d3c6:	9304      	str	r3, [sp, #16]
 800d3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3cc:	482c      	ldr	r0, [pc, #176]	; (800d480 <_vfiprintf_r+0x250>)
 800d3ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3d2:	2206      	movs	r2, #6
 800d3d4:	f7f2 ff1c 	bl	8000210 <memchr>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d03f      	beq.n	800d45c <_vfiprintf_r+0x22c>
 800d3dc:	4b29      	ldr	r3, [pc, #164]	; (800d484 <_vfiprintf_r+0x254>)
 800d3de:	bb1b      	cbnz	r3, 800d428 <_vfiprintf_r+0x1f8>
 800d3e0:	9b03      	ldr	r3, [sp, #12]
 800d3e2:	3307      	adds	r3, #7
 800d3e4:	f023 0307 	bic.w	r3, r3, #7
 800d3e8:	3308      	adds	r3, #8
 800d3ea:	9303      	str	r3, [sp, #12]
 800d3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3ee:	443b      	add	r3, r7
 800d3f0:	9309      	str	r3, [sp, #36]	; 0x24
 800d3f2:	e767      	b.n	800d2c4 <_vfiprintf_r+0x94>
 800d3f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3f8:	460c      	mov	r4, r1
 800d3fa:	2001      	movs	r0, #1
 800d3fc:	e7a5      	b.n	800d34a <_vfiprintf_r+0x11a>
 800d3fe:	2300      	movs	r3, #0
 800d400:	3401      	adds	r4, #1
 800d402:	9305      	str	r3, [sp, #20]
 800d404:	4619      	mov	r1, r3
 800d406:	f04f 0c0a 	mov.w	ip, #10
 800d40a:	4620      	mov	r0, r4
 800d40c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d410:	3a30      	subs	r2, #48	; 0x30
 800d412:	2a09      	cmp	r2, #9
 800d414:	d903      	bls.n	800d41e <_vfiprintf_r+0x1ee>
 800d416:	2b00      	cmp	r3, #0
 800d418:	d0c5      	beq.n	800d3a6 <_vfiprintf_r+0x176>
 800d41a:	9105      	str	r1, [sp, #20]
 800d41c:	e7c3      	b.n	800d3a6 <_vfiprintf_r+0x176>
 800d41e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d422:	4604      	mov	r4, r0
 800d424:	2301      	movs	r3, #1
 800d426:	e7f0      	b.n	800d40a <_vfiprintf_r+0x1da>
 800d428:	ab03      	add	r3, sp, #12
 800d42a:	9300      	str	r3, [sp, #0]
 800d42c:	462a      	mov	r2, r5
 800d42e:	4b16      	ldr	r3, [pc, #88]	; (800d488 <_vfiprintf_r+0x258>)
 800d430:	a904      	add	r1, sp, #16
 800d432:	4630      	mov	r0, r6
 800d434:	f7fb f9a8 	bl	8008788 <_printf_float>
 800d438:	4607      	mov	r7, r0
 800d43a:	1c78      	adds	r0, r7, #1
 800d43c:	d1d6      	bne.n	800d3ec <_vfiprintf_r+0x1bc>
 800d43e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d440:	07d9      	lsls	r1, r3, #31
 800d442:	d405      	bmi.n	800d450 <_vfiprintf_r+0x220>
 800d444:	89ab      	ldrh	r3, [r5, #12]
 800d446:	059a      	lsls	r2, r3, #22
 800d448:	d402      	bmi.n	800d450 <_vfiprintf_r+0x220>
 800d44a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d44c:	f7ff fe71 	bl	800d132 <__retarget_lock_release_recursive>
 800d450:	89ab      	ldrh	r3, [r5, #12]
 800d452:	065b      	lsls	r3, r3, #25
 800d454:	f53f af12 	bmi.w	800d27c <_vfiprintf_r+0x4c>
 800d458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d45a:	e711      	b.n	800d280 <_vfiprintf_r+0x50>
 800d45c:	ab03      	add	r3, sp, #12
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	462a      	mov	r2, r5
 800d462:	4b09      	ldr	r3, [pc, #36]	; (800d488 <_vfiprintf_r+0x258>)
 800d464:	a904      	add	r1, sp, #16
 800d466:	4630      	mov	r0, r6
 800d468:	f7fb fc32 	bl	8008cd0 <_printf_i>
 800d46c:	e7e4      	b.n	800d438 <_vfiprintf_r+0x208>
 800d46e:	bf00      	nop
 800d470:	0801094c 	.word	0x0801094c
 800d474:	0801096c 	.word	0x0801096c
 800d478:	0801092c 	.word	0x0801092c
 800d47c:	080108c4 	.word	0x080108c4
 800d480:	080108ce 	.word	0x080108ce
 800d484:	08008789 	.word	0x08008789
 800d488:	0800d20d 	.word	0x0800d20d
 800d48c:	080108ca 	.word	0x080108ca

0800d490 <__swbuf_r>:
 800d490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d492:	460e      	mov	r6, r1
 800d494:	4614      	mov	r4, r2
 800d496:	4605      	mov	r5, r0
 800d498:	b118      	cbz	r0, 800d4a2 <__swbuf_r+0x12>
 800d49a:	6983      	ldr	r3, [r0, #24]
 800d49c:	b90b      	cbnz	r3, 800d4a2 <__swbuf_r+0x12>
 800d49e:	f7ff fd97 	bl	800cfd0 <__sinit>
 800d4a2:	4b21      	ldr	r3, [pc, #132]	; (800d528 <__swbuf_r+0x98>)
 800d4a4:	429c      	cmp	r4, r3
 800d4a6:	d12b      	bne.n	800d500 <__swbuf_r+0x70>
 800d4a8:	686c      	ldr	r4, [r5, #4]
 800d4aa:	69a3      	ldr	r3, [r4, #24]
 800d4ac:	60a3      	str	r3, [r4, #8]
 800d4ae:	89a3      	ldrh	r3, [r4, #12]
 800d4b0:	071a      	lsls	r2, r3, #28
 800d4b2:	d52f      	bpl.n	800d514 <__swbuf_r+0x84>
 800d4b4:	6923      	ldr	r3, [r4, #16]
 800d4b6:	b36b      	cbz	r3, 800d514 <__swbuf_r+0x84>
 800d4b8:	6923      	ldr	r3, [r4, #16]
 800d4ba:	6820      	ldr	r0, [r4, #0]
 800d4bc:	1ac0      	subs	r0, r0, r3
 800d4be:	6963      	ldr	r3, [r4, #20]
 800d4c0:	b2f6      	uxtb	r6, r6
 800d4c2:	4283      	cmp	r3, r0
 800d4c4:	4637      	mov	r7, r6
 800d4c6:	dc04      	bgt.n	800d4d2 <__swbuf_r+0x42>
 800d4c8:	4621      	mov	r1, r4
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	f7ff fcec 	bl	800cea8 <_fflush_r>
 800d4d0:	bb30      	cbnz	r0, 800d520 <__swbuf_r+0x90>
 800d4d2:	68a3      	ldr	r3, [r4, #8]
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	60a3      	str	r3, [r4, #8]
 800d4d8:	6823      	ldr	r3, [r4, #0]
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	6022      	str	r2, [r4, #0]
 800d4de:	701e      	strb	r6, [r3, #0]
 800d4e0:	6963      	ldr	r3, [r4, #20]
 800d4e2:	3001      	adds	r0, #1
 800d4e4:	4283      	cmp	r3, r0
 800d4e6:	d004      	beq.n	800d4f2 <__swbuf_r+0x62>
 800d4e8:	89a3      	ldrh	r3, [r4, #12]
 800d4ea:	07db      	lsls	r3, r3, #31
 800d4ec:	d506      	bpl.n	800d4fc <__swbuf_r+0x6c>
 800d4ee:	2e0a      	cmp	r6, #10
 800d4f0:	d104      	bne.n	800d4fc <__swbuf_r+0x6c>
 800d4f2:	4621      	mov	r1, r4
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f7ff fcd7 	bl	800cea8 <_fflush_r>
 800d4fa:	b988      	cbnz	r0, 800d520 <__swbuf_r+0x90>
 800d4fc:	4638      	mov	r0, r7
 800d4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d500:	4b0a      	ldr	r3, [pc, #40]	; (800d52c <__swbuf_r+0x9c>)
 800d502:	429c      	cmp	r4, r3
 800d504:	d101      	bne.n	800d50a <__swbuf_r+0x7a>
 800d506:	68ac      	ldr	r4, [r5, #8]
 800d508:	e7cf      	b.n	800d4aa <__swbuf_r+0x1a>
 800d50a:	4b09      	ldr	r3, [pc, #36]	; (800d530 <__swbuf_r+0xa0>)
 800d50c:	429c      	cmp	r4, r3
 800d50e:	bf08      	it	eq
 800d510:	68ec      	ldreq	r4, [r5, #12]
 800d512:	e7ca      	b.n	800d4aa <__swbuf_r+0x1a>
 800d514:	4621      	mov	r1, r4
 800d516:	4628      	mov	r0, r5
 800d518:	f000 f80c 	bl	800d534 <__swsetup_r>
 800d51c:	2800      	cmp	r0, #0
 800d51e:	d0cb      	beq.n	800d4b8 <__swbuf_r+0x28>
 800d520:	f04f 37ff 	mov.w	r7, #4294967295
 800d524:	e7ea      	b.n	800d4fc <__swbuf_r+0x6c>
 800d526:	bf00      	nop
 800d528:	0801094c 	.word	0x0801094c
 800d52c:	0801096c 	.word	0x0801096c
 800d530:	0801092c 	.word	0x0801092c

0800d534 <__swsetup_r>:
 800d534:	4b32      	ldr	r3, [pc, #200]	; (800d600 <__swsetup_r+0xcc>)
 800d536:	b570      	push	{r4, r5, r6, lr}
 800d538:	681d      	ldr	r5, [r3, #0]
 800d53a:	4606      	mov	r6, r0
 800d53c:	460c      	mov	r4, r1
 800d53e:	b125      	cbz	r5, 800d54a <__swsetup_r+0x16>
 800d540:	69ab      	ldr	r3, [r5, #24]
 800d542:	b913      	cbnz	r3, 800d54a <__swsetup_r+0x16>
 800d544:	4628      	mov	r0, r5
 800d546:	f7ff fd43 	bl	800cfd0 <__sinit>
 800d54a:	4b2e      	ldr	r3, [pc, #184]	; (800d604 <__swsetup_r+0xd0>)
 800d54c:	429c      	cmp	r4, r3
 800d54e:	d10f      	bne.n	800d570 <__swsetup_r+0x3c>
 800d550:	686c      	ldr	r4, [r5, #4]
 800d552:	89a3      	ldrh	r3, [r4, #12]
 800d554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d558:	0719      	lsls	r1, r3, #28
 800d55a:	d42c      	bmi.n	800d5b6 <__swsetup_r+0x82>
 800d55c:	06dd      	lsls	r5, r3, #27
 800d55e:	d411      	bmi.n	800d584 <__swsetup_r+0x50>
 800d560:	2309      	movs	r3, #9
 800d562:	6033      	str	r3, [r6, #0]
 800d564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d568:	81a3      	strh	r3, [r4, #12]
 800d56a:	f04f 30ff 	mov.w	r0, #4294967295
 800d56e:	e03e      	b.n	800d5ee <__swsetup_r+0xba>
 800d570:	4b25      	ldr	r3, [pc, #148]	; (800d608 <__swsetup_r+0xd4>)
 800d572:	429c      	cmp	r4, r3
 800d574:	d101      	bne.n	800d57a <__swsetup_r+0x46>
 800d576:	68ac      	ldr	r4, [r5, #8]
 800d578:	e7eb      	b.n	800d552 <__swsetup_r+0x1e>
 800d57a:	4b24      	ldr	r3, [pc, #144]	; (800d60c <__swsetup_r+0xd8>)
 800d57c:	429c      	cmp	r4, r3
 800d57e:	bf08      	it	eq
 800d580:	68ec      	ldreq	r4, [r5, #12]
 800d582:	e7e6      	b.n	800d552 <__swsetup_r+0x1e>
 800d584:	0758      	lsls	r0, r3, #29
 800d586:	d512      	bpl.n	800d5ae <__swsetup_r+0x7a>
 800d588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d58a:	b141      	cbz	r1, 800d59e <__swsetup_r+0x6a>
 800d58c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d590:	4299      	cmp	r1, r3
 800d592:	d002      	beq.n	800d59a <__swsetup_r+0x66>
 800d594:	4630      	mov	r0, r6
 800d596:	f7fe fd4f 	bl	800c038 <_free_r>
 800d59a:	2300      	movs	r3, #0
 800d59c:	6363      	str	r3, [r4, #52]	; 0x34
 800d59e:	89a3      	ldrh	r3, [r4, #12]
 800d5a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5a4:	81a3      	strh	r3, [r4, #12]
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	6063      	str	r3, [r4, #4]
 800d5aa:	6923      	ldr	r3, [r4, #16]
 800d5ac:	6023      	str	r3, [r4, #0]
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	f043 0308 	orr.w	r3, r3, #8
 800d5b4:	81a3      	strh	r3, [r4, #12]
 800d5b6:	6923      	ldr	r3, [r4, #16]
 800d5b8:	b94b      	cbnz	r3, 800d5ce <__swsetup_r+0x9a>
 800d5ba:	89a3      	ldrh	r3, [r4, #12]
 800d5bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5c4:	d003      	beq.n	800d5ce <__swsetup_r+0x9a>
 800d5c6:	4621      	mov	r1, r4
 800d5c8:	4630      	mov	r0, r6
 800d5ca:	f000 f84d 	bl	800d668 <__smakebuf_r>
 800d5ce:	89a0      	ldrh	r0, [r4, #12]
 800d5d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5d4:	f010 0301 	ands.w	r3, r0, #1
 800d5d8:	d00a      	beq.n	800d5f0 <__swsetup_r+0xbc>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	60a3      	str	r3, [r4, #8]
 800d5de:	6963      	ldr	r3, [r4, #20]
 800d5e0:	425b      	negs	r3, r3
 800d5e2:	61a3      	str	r3, [r4, #24]
 800d5e4:	6923      	ldr	r3, [r4, #16]
 800d5e6:	b943      	cbnz	r3, 800d5fa <__swsetup_r+0xc6>
 800d5e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5ec:	d1ba      	bne.n	800d564 <__swsetup_r+0x30>
 800d5ee:	bd70      	pop	{r4, r5, r6, pc}
 800d5f0:	0781      	lsls	r1, r0, #30
 800d5f2:	bf58      	it	pl
 800d5f4:	6963      	ldrpl	r3, [r4, #20]
 800d5f6:	60a3      	str	r3, [r4, #8]
 800d5f8:	e7f4      	b.n	800d5e4 <__swsetup_r+0xb0>
 800d5fa:	2000      	movs	r0, #0
 800d5fc:	e7f7      	b.n	800d5ee <__swsetup_r+0xba>
 800d5fe:	bf00      	nop
 800d600:	2000001c 	.word	0x2000001c
 800d604:	0801094c 	.word	0x0801094c
 800d608:	0801096c 	.word	0x0801096c
 800d60c:	0801092c 	.word	0x0801092c

0800d610 <abort>:
 800d610:	b508      	push	{r3, lr}
 800d612:	2006      	movs	r0, #6
 800d614:	f000 f898 	bl	800d748 <raise>
 800d618:	2001      	movs	r0, #1
 800d61a:	f7f7 ffc4 	bl	80055a6 <_exit>

0800d61e <__swhatbuf_r>:
 800d61e:	b570      	push	{r4, r5, r6, lr}
 800d620:	460e      	mov	r6, r1
 800d622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d626:	2900      	cmp	r1, #0
 800d628:	b096      	sub	sp, #88	; 0x58
 800d62a:	4614      	mov	r4, r2
 800d62c:	461d      	mov	r5, r3
 800d62e:	da08      	bge.n	800d642 <__swhatbuf_r+0x24>
 800d630:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d634:	2200      	movs	r2, #0
 800d636:	602a      	str	r2, [r5, #0]
 800d638:	061a      	lsls	r2, r3, #24
 800d63a:	d410      	bmi.n	800d65e <__swhatbuf_r+0x40>
 800d63c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d640:	e00e      	b.n	800d660 <__swhatbuf_r+0x42>
 800d642:	466a      	mov	r2, sp
 800d644:	f000 f89c 	bl	800d780 <_fstat_r>
 800d648:	2800      	cmp	r0, #0
 800d64a:	dbf1      	blt.n	800d630 <__swhatbuf_r+0x12>
 800d64c:	9a01      	ldr	r2, [sp, #4]
 800d64e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d652:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d656:	425a      	negs	r2, r3
 800d658:	415a      	adcs	r2, r3
 800d65a:	602a      	str	r2, [r5, #0]
 800d65c:	e7ee      	b.n	800d63c <__swhatbuf_r+0x1e>
 800d65e:	2340      	movs	r3, #64	; 0x40
 800d660:	2000      	movs	r0, #0
 800d662:	6023      	str	r3, [r4, #0]
 800d664:	b016      	add	sp, #88	; 0x58
 800d666:	bd70      	pop	{r4, r5, r6, pc}

0800d668 <__smakebuf_r>:
 800d668:	898b      	ldrh	r3, [r1, #12]
 800d66a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d66c:	079d      	lsls	r5, r3, #30
 800d66e:	4606      	mov	r6, r0
 800d670:	460c      	mov	r4, r1
 800d672:	d507      	bpl.n	800d684 <__smakebuf_r+0x1c>
 800d674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	6123      	str	r3, [r4, #16]
 800d67c:	2301      	movs	r3, #1
 800d67e:	6163      	str	r3, [r4, #20]
 800d680:	b002      	add	sp, #8
 800d682:	bd70      	pop	{r4, r5, r6, pc}
 800d684:	ab01      	add	r3, sp, #4
 800d686:	466a      	mov	r2, sp
 800d688:	f7ff ffc9 	bl	800d61e <__swhatbuf_r>
 800d68c:	9900      	ldr	r1, [sp, #0]
 800d68e:	4605      	mov	r5, r0
 800d690:	4630      	mov	r0, r6
 800d692:	f7fe fd3d 	bl	800c110 <_malloc_r>
 800d696:	b948      	cbnz	r0, 800d6ac <__smakebuf_r+0x44>
 800d698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d69c:	059a      	lsls	r2, r3, #22
 800d69e:	d4ef      	bmi.n	800d680 <__smakebuf_r+0x18>
 800d6a0:	f023 0303 	bic.w	r3, r3, #3
 800d6a4:	f043 0302 	orr.w	r3, r3, #2
 800d6a8:	81a3      	strh	r3, [r4, #12]
 800d6aa:	e7e3      	b.n	800d674 <__smakebuf_r+0xc>
 800d6ac:	4b0d      	ldr	r3, [pc, #52]	; (800d6e4 <__smakebuf_r+0x7c>)
 800d6ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800d6b0:	89a3      	ldrh	r3, [r4, #12]
 800d6b2:	6020      	str	r0, [r4, #0]
 800d6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6b8:	81a3      	strh	r3, [r4, #12]
 800d6ba:	9b00      	ldr	r3, [sp, #0]
 800d6bc:	6163      	str	r3, [r4, #20]
 800d6be:	9b01      	ldr	r3, [sp, #4]
 800d6c0:	6120      	str	r0, [r4, #16]
 800d6c2:	b15b      	cbz	r3, 800d6dc <__smakebuf_r+0x74>
 800d6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6c8:	4630      	mov	r0, r6
 800d6ca:	f000 f86b 	bl	800d7a4 <_isatty_r>
 800d6ce:	b128      	cbz	r0, 800d6dc <__smakebuf_r+0x74>
 800d6d0:	89a3      	ldrh	r3, [r4, #12]
 800d6d2:	f023 0303 	bic.w	r3, r3, #3
 800d6d6:	f043 0301 	orr.w	r3, r3, #1
 800d6da:	81a3      	strh	r3, [r4, #12]
 800d6dc:	89a0      	ldrh	r0, [r4, #12]
 800d6de:	4305      	orrs	r5, r0
 800d6e0:	81a5      	strh	r5, [r4, #12]
 800d6e2:	e7cd      	b.n	800d680 <__smakebuf_r+0x18>
 800d6e4:	0800cf69 	.word	0x0800cf69

0800d6e8 <_malloc_usable_size_r>:
 800d6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6ec:	1f18      	subs	r0, r3, #4
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	bfbc      	itt	lt
 800d6f2:	580b      	ldrlt	r3, [r1, r0]
 800d6f4:	18c0      	addlt	r0, r0, r3
 800d6f6:	4770      	bx	lr

0800d6f8 <_raise_r>:
 800d6f8:	291f      	cmp	r1, #31
 800d6fa:	b538      	push	{r3, r4, r5, lr}
 800d6fc:	4604      	mov	r4, r0
 800d6fe:	460d      	mov	r5, r1
 800d700:	d904      	bls.n	800d70c <_raise_r+0x14>
 800d702:	2316      	movs	r3, #22
 800d704:	6003      	str	r3, [r0, #0]
 800d706:	f04f 30ff 	mov.w	r0, #4294967295
 800d70a:	bd38      	pop	{r3, r4, r5, pc}
 800d70c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d70e:	b112      	cbz	r2, 800d716 <_raise_r+0x1e>
 800d710:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d714:	b94b      	cbnz	r3, 800d72a <_raise_r+0x32>
 800d716:	4620      	mov	r0, r4
 800d718:	f000 f830 	bl	800d77c <_getpid_r>
 800d71c:	462a      	mov	r2, r5
 800d71e:	4601      	mov	r1, r0
 800d720:	4620      	mov	r0, r4
 800d722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d726:	f000 b817 	b.w	800d758 <_kill_r>
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d00a      	beq.n	800d744 <_raise_r+0x4c>
 800d72e:	1c59      	adds	r1, r3, #1
 800d730:	d103      	bne.n	800d73a <_raise_r+0x42>
 800d732:	2316      	movs	r3, #22
 800d734:	6003      	str	r3, [r0, #0]
 800d736:	2001      	movs	r0, #1
 800d738:	e7e7      	b.n	800d70a <_raise_r+0x12>
 800d73a:	2400      	movs	r4, #0
 800d73c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d740:	4628      	mov	r0, r5
 800d742:	4798      	blx	r3
 800d744:	2000      	movs	r0, #0
 800d746:	e7e0      	b.n	800d70a <_raise_r+0x12>

0800d748 <raise>:
 800d748:	4b02      	ldr	r3, [pc, #8]	; (800d754 <raise+0xc>)
 800d74a:	4601      	mov	r1, r0
 800d74c:	6818      	ldr	r0, [r3, #0]
 800d74e:	f7ff bfd3 	b.w	800d6f8 <_raise_r>
 800d752:	bf00      	nop
 800d754:	2000001c 	.word	0x2000001c

0800d758 <_kill_r>:
 800d758:	b538      	push	{r3, r4, r5, lr}
 800d75a:	4d07      	ldr	r5, [pc, #28]	; (800d778 <_kill_r+0x20>)
 800d75c:	2300      	movs	r3, #0
 800d75e:	4604      	mov	r4, r0
 800d760:	4608      	mov	r0, r1
 800d762:	4611      	mov	r1, r2
 800d764:	602b      	str	r3, [r5, #0]
 800d766:	f7f7 ff0e 	bl	8005586 <_kill>
 800d76a:	1c43      	adds	r3, r0, #1
 800d76c:	d102      	bne.n	800d774 <_kill_r+0x1c>
 800d76e:	682b      	ldr	r3, [r5, #0]
 800d770:	b103      	cbz	r3, 800d774 <_kill_r+0x1c>
 800d772:	6023      	str	r3, [r4, #0]
 800d774:	bd38      	pop	{r3, r4, r5, pc}
 800d776:	bf00      	nop
 800d778:	20009d10 	.word	0x20009d10

0800d77c <_getpid_r>:
 800d77c:	f7f7 befb 	b.w	8005576 <_getpid>

0800d780 <_fstat_r>:
 800d780:	b538      	push	{r3, r4, r5, lr}
 800d782:	4d07      	ldr	r5, [pc, #28]	; (800d7a0 <_fstat_r+0x20>)
 800d784:	2300      	movs	r3, #0
 800d786:	4604      	mov	r4, r0
 800d788:	4608      	mov	r0, r1
 800d78a:	4611      	mov	r1, r2
 800d78c:	602b      	str	r3, [r5, #0]
 800d78e:	f7f7 ff59 	bl	8005644 <_fstat>
 800d792:	1c43      	adds	r3, r0, #1
 800d794:	d102      	bne.n	800d79c <_fstat_r+0x1c>
 800d796:	682b      	ldr	r3, [r5, #0]
 800d798:	b103      	cbz	r3, 800d79c <_fstat_r+0x1c>
 800d79a:	6023      	str	r3, [r4, #0]
 800d79c:	bd38      	pop	{r3, r4, r5, pc}
 800d79e:	bf00      	nop
 800d7a0:	20009d10 	.word	0x20009d10

0800d7a4 <_isatty_r>:
 800d7a4:	b538      	push	{r3, r4, r5, lr}
 800d7a6:	4d06      	ldr	r5, [pc, #24]	; (800d7c0 <_isatty_r+0x1c>)
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	4608      	mov	r0, r1
 800d7ae:	602b      	str	r3, [r5, #0]
 800d7b0:	f7f7 ff58 	bl	8005664 <_isatty>
 800d7b4:	1c43      	adds	r3, r0, #1
 800d7b6:	d102      	bne.n	800d7be <_isatty_r+0x1a>
 800d7b8:	682b      	ldr	r3, [r5, #0]
 800d7ba:	b103      	cbz	r3, 800d7be <_isatty_r+0x1a>
 800d7bc:	6023      	str	r3, [r4, #0]
 800d7be:	bd38      	pop	{r3, r4, r5, pc}
 800d7c0:	20009d10 	.word	0x20009d10
 800d7c4:	00000000 	.word	0x00000000

0800d7c8 <cos>:
 800d7c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7ca:	ec53 2b10 	vmov	r2, r3, d0
 800d7ce:	4826      	ldr	r0, [pc, #152]	; (800d868 <cos+0xa0>)
 800d7d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d7d4:	4281      	cmp	r1, r0
 800d7d6:	dc06      	bgt.n	800d7e6 <cos+0x1e>
 800d7d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d860 <cos+0x98>
 800d7dc:	b005      	add	sp, #20
 800d7de:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7e2:	f001 bcf5 	b.w	800f1d0 <__kernel_cos>
 800d7e6:	4821      	ldr	r0, [pc, #132]	; (800d86c <cos+0xa4>)
 800d7e8:	4281      	cmp	r1, r0
 800d7ea:	dd09      	ble.n	800d800 <cos+0x38>
 800d7ec:	ee10 0a10 	vmov	r0, s0
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	f7f2 fd61 	bl	80002b8 <__aeabi_dsub>
 800d7f6:	ec41 0b10 	vmov	d0, r0, r1
 800d7fa:	b005      	add	sp, #20
 800d7fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d800:	4668      	mov	r0, sp
 800d802:	f001 fa21 	bl	800ec48 <__ieee754_rem_pio2>
 800d806:	f000 0003 	and.w	r0, r0, #3
 800d80a:	2801      	cmp	r0, #1
 800d80c:	d00b      	beq.n	800d826 <cos+0x5e>
 800d80e:	2802      	cmp	r0, #2
 800d810:	d016      	beq.n	800d840 <cos+0x78>
 800d812:	b9e0      	cbnz	r0, 800d84e <cos+0x86>
 800d814:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d818:	ed9d 0b00 	vldr	d0, [sp]
 800d81c:	f001 fcd8 	bl	800f1d0 <__kernel_cos>
 800d820:	ec51 0b10 	vmov	r0, r1, d0
 800d824:	e7e7      	b.n	800d7f6 <cos+0x2e>
 800d826:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d82a:	ed9d 0b00 	vldr	d0, [sp]
 800d82e:	f002 f8e7 	bl	800fa00 <__kernel_sin>
 800d832:	ec53 2b10 	vmov	r2, r3, d0
 800d836:	ee10 0a10 	vmov	r0, s0
 800d83a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d83e:	e7da      	b.n	800d7f6 <cos+0x2e>
 800d840:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d844:	ed9d 0b00 	vldr	d0, [sp]
 800d848:	f001 fcc2 	bl	800f1d0 <__kernel_cos>
 800d84c:	e7f1      	b.n	800d832 <cos+0x6a>
 800d84e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d852:	ed9d 0b00 	vldr	d0, [sp]
 800d856:	2001      	movs	r0, #1
 800d858:	f002 f8d2 	bl	800fa00 <__kernel_sin>
 800d85c:	e7e0      	b.n	800d820 <cos+0x58>
 800d85e:	bf00      	nop
	...
 800d868:	3fe921fb 	.word	0x3fe921fb
 800d86c:	7fefffff 	.word	0x7fefffff

0800d870 <round>:
 800d870:	ec51 0b10 	vmov	r0, r1, d0
 800d874:	b570      	push	{r4, r5, r6, lr}
 800d876:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d87a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d87e:	2c13      	cmp	r4, #19
 800d880:	ee10 2a10 	vmov	r2, s0
 800d884:	460b      	mov	r3, r1
 800d886:	dc19      	bgt.n	800d8bc <round+0x4c>
 800d888:	2c00      	cmp	r4, #0
 800d88a:	da09      	bge.n	800d8a0 <round+0x30>
 800d88c:	3401      	adds	r4, #1
 800d88e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d892:	d103      	bne.n	800d89c <round+0x2c>
 800d894:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d898:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d89c:	2200      	movs	r2, #0
 800d89e:	e028      	b.n	800d8f2 <round+0x82>
 800d8a0:	4d15      	ldr	r5, [pc, #84]	; (800d8f8 <round+0x88>)
 800d8a2:	4125      	asrs	r5, r4
 800d8a4:	ea01 0605 	and.w	r6, r1, r5
 800d8a8:	4332      	orrs	r2, r6
 800d8aa:	d00e      	beq.n	800d8ca <round+0x5a>
 800d8ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d8b0:	fa42 f404 	asr.w	r4, r2, r4
 800d8b4:	4423      	add	r3, r4
 800d8b6:	ea23 0305 	bic.w	r3, r3, r5
 800d8ba:	e7ef      	b.n	800d89c <round+0x2c>
 800d8bc:	2c33      	cmp	r4, #51	; 0x33
 800d8be:	dd07      	ble.n	800d8d0 <round+0x60>
 800d8c0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d8c4:	d101      	bne.n	800d8ca <round+0x5a>
 800d8c6:	f7f2 fcf9 	bl	80002bc <__adddf3>
 800d8ca:	ec41 0b10 	vmov	d0, r0, r1
 800d8ce:	bd70      	pop	{r4, r5, r6, pc}
 800d8d0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d8d4:	f04f 35ff 	mov.w	r5, #4294967295
 800d8d8:	40f5      	lsrs	r5, r6
 800d8da:	4228      	tst	r0, r5
 800d8dc:	d0f5      	beq.n	800d8ca <round+0x5a>
 800d8de:	2101      	movs	r1, #1
 800d8e0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d8e4:	fa01 f404 	lsl.w	r4, r1, r4
 800d8e8:	1912      	adds	r2, r2, r4
 800d8ea:	bf28      	it	cs
 800d8ec:	185b      	addcs	r3, r3, r1
 800d8ee:	ea22 0205 	bic.w	r2, r2, r5
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	4610      	mov	r0, r2
 800d8f6:	e7e8      	b.n	800d8ca <round+0x5a>
 800d8f8:	000fffff 	.word	0x000fffff
 800d8fc:	00000000 	.word	0x00000000

0800d900 <sin>:
 800d900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d902:	ec53 2b10 	vmov	r2, r3, d0
 800d906:	4828      	ldr	r0, [pc, #160]	; (800d9a8 <sin+0xa8>)
 800d908:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d90c:	4281      	cmp	r1, r0
 800d90e:	dc07      	bgt.n	800d920 <sin+0x20>
 800d910:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d9a0 <sin+0xa0>
 800d914:	2000      	movs	r0, #0
 800d916:	b005      	add	sp, #20
 800d918:	f85d eb04 	ldr.w	lr, [sp], #4
 800d91c:	f002 b870 	b.w	800fa00 <__kernel_sin>
 800d920:	4822      	ldr	r0, [pc, #136]	; (800d9ac <sin+0xac>)
 800d922:	4281      	cmp	r1, r0
 800d924:	dd09      	ble.n	800d93a <sin+0x3a>
 800d926:	ee10 0a10 	vmov	r0, s0
 800d92a:	4619      	mov	r1, r3
 800d92c:	f7f2 fcc4 	bl	80002b8 <__aeabi_dsub>
 800d930:	ec41 0b10 	vmov	d0, r0, r1
 800d934:	b005      	add	sp, #20
 800d936:	f85d fb04 	ldr.w	pc, [sp], #4
 800d93a:	4668      	mov	r0, sp
 800d93c:	f001 f984 	bl	800ec48 <__ieee754_rem_pio2>
 800d940:	f000 0003 	and.w	r0, r0, #3
 800d944:	2801      	cmp	r0, #1
 800d946:	d00c      	beq.n	800d962 <sin+0x62>
 800d948:	2802      	cmp	r0, #2
 800d94a:	d011      	beq.n	800d970 <sin+0x70>
 800d94c:	b9f0      	cbnz	r0, 800d98c <sin+0x8c>
 800d94e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d952:	ed9d 0b00 	vldr	d0, [sp]
 800d956:	2001      	movs	r0, #1
 800d958:	f002 f852 	bl	800fa00 <__kernel_sin>
 800d95c:	ec51 0b10 	vmov	r0, r1, d0
 800d960:	e7e6      	b.n	800d930 <sin+0x30>
 800d962:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d966:	ed9d 0b00 	vldr	d0, [sp]
 800d96a:	f001 fc31 	bl	800f1d0 <__kernel_cos>
 800d96e:	e7f5      	b.n	800d95c <sin+0x5c>
 800d970:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d974:	ed9d 0b00 	vldr	d0, [sp]
 800d978:	2001      	movs	r0, #1
 800d97a:	f002 f841 	bl	800fa00 <__kernel_sin>
 800d97e:	ec53 2b10 	vmov	r2, r3, d0
 800d982:	ee10 0a10 	vmov	r0, s0
 800d986:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d98a:	e7d1      	b.n	800d930 <sin+0x30>
 800d98c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d990:	ed9d 0b00 	vldr	d0, [sp]
 800d994:	f001 fc1c 	bl	800f1d0 <__kernel_cos>
 800d998:	e7f1      	b.n	800d97e <sin+0x7e>
 800d99a:	bf00      	nop
 800d99c:	f3af 8000 	nop.w
	...
 800d9a8:	3fe921fb 	.word	0x3fe921fb
 800d9ac:	7fefffff 	.word	0x7fefffff

0800d9b0 <acos>:
 800d9b0:	b538      	push	{r3, r4, r5, lr}
 800d9b2:	ed2d 8b02 	vpush	{d8}
 800d9b6:	ec55 4b10 	vmov	r4, r5, d0
 800d9ba:	f000 f8e9 	bl	800db90 <__ieee754_acos>
 800d9be:	4622      	mov	r2, r4
 800d9c0:	462b      	mov	r3, r5
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	4629      	mov	r1, r5
 800d9c6:	eeb0 8a40 	vmov.f32	s16, s0
 800d9ca:	eef0 8a60 	vmov.f32	s17, s1
 800d9ce:	f7f3 f8c5 	bl	8000b5c <__aeabi_dcmpun>
 800d9d2:	b9a8      	cbnz	r0, 800da00 <acos+0x50>
 800d9d4:	ec45 4b10 	vmov	d0, r4, r5
 800d9d8:	f002 faa2 	bl	800ff20 <fabs>
 800d9dc:	4b0c      	ldr	r3, [pc, #48]	; (800da10 <acos+0x60>)
 800d9de:	ec51 0b10 	vmov	r0, r1, d0
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f7f3 f8b0 	bl	8000b48 <__aeabi_dcmpgt>
 800d9e8:	b150      	cbz	r0, 800da00 <acos+0x50>
 800d9ea:	f7fa fdfb 	bl	80085e4 <__errno>
 800d9ee:	ecbd 8b02 	vpop	{d8}
 800d9f2:	2321      	movs	r3, #33	; 0x21
 800d9f4:	6003      	str	r3, [r0, #0]
 800d9f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9fa:	4806      	ldr	r0, [pc, #24]	; (800da14 <acos+0x64>)
 800d9fc:	f7ff b890 	b.w	800cb20 <nan>
 800da00:	eeb0 0a48 	vmov.f32	s0, s16
 800da04:	eef0 0a68 	vmov.f32	s1, s17
 800da08:	ecbd 8b02 	vpop	{d8}
 800da0c:	bd38      	pop	{r3, r4, r5, pc}
 800da0e:	bf00      	nop
 800da10:	3ff00000 	.word	0x3ff00000
 800da14:	0801092b 	.word	0x0801092b

0800da18 <atan2>:
 800da18:	f000 bb1a 	b.w	800e050 <__ieee754_atan2>

0800da1c <pow>:
 800da1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da1e:	ed2d 8b02 	vpush	{d8}
 800da22:	eeb0 8a40 	vmov.f32	s16, s0
 800da26:	eef0 8a60 	vmov.f32	s17, s1
 800da2a:	ec55 4b11 	vmov	r4, r5, d1
 800da2e:	f000 fbdb 	bl	800e1e8 <__ieee754_pow>
 800da32:	4622      	mov	r2, r4
 800da34:	462b      	mov	r3, r5
 800da36:	4620      	mov	r0, r4
 800da38:	4629      	mov	r1, r5
 800da3a:	ec57 6b10 	vmov	r6, r7, d0
 800da3e:	f7f3 f88d 	bl	8000b5c <__aeabi_dcmpun>
 800da42:	2800      	cmp	r0, #0
 800da44:	d13b      	bne.n	800dabe <pow+0xa2>
 800da46:	ec51 0b18 	vmov	r0, r1, d8
 800da4a:	2200      	movs	r2, #0
 800da4c:	2300      	movs	r3, #0
 800da4e:	f7f3 f853 	bl	8000af8 <__aeabi_dcmpeq>
 800da52:	b1b8      	cbz	r0, 800da84 <pow+0x68>
 800da54:	2200      	movs	r2, #0
 800da56:	2300      	movs	r3, #0
 800da58:	4620      	mov	r0, r4
 800da5a:	4629      	mov	r1, r5
 800da5c:	f7f3 f84c 	bl	8000af8 <__aeabi_dcmpeq>
 800da60:	2800      	cmp	r0, #0
 800da62:	d146      	bne.n	800daf2 <pow+0xd6>
 800da64:	ec45 4b10 	vmov	d0, r4, r5
 800da68:	f002 fa63 	bl	800ff32 <finite>
 800da6c:	b338      	cbz	r0, 800dabe <pow+0xa2>
 800da6e:	2200      	movs	r2, #0
 800da70:	2300      	movs	r3, #0
 800da72:	4620      	mov	r0, r4
 800da74:	4629      	mov	r1, r5
 800da76:	f7f3 f849 	bl	8000b0c <__aeabi_dcmplt>
 800da7a:	b300      	cbz	r0, 800dabe <pow+0xa2>
 800da7c:	f7fa fdb2 	bl	80085e4 <__errno>
 800da80:	2322      	movs	r3, #34	; 0x22
 800da82:	e01b      	b.n	800dabc <pow+0xa0>
 800da84:	ec47 6b10 	vmov	d0, r6, r7
 800da88:	f002 fa53 	bl	800ff32 <finite>
 800da8c:	b9e0      	cbnz	r0, 800dac8 <pow+0xac>
 800da8e:	eeb0 0a48 	vmov.f32	s0, s16
 800da92:	eef0 0a68 	vmov.f32	s1, s17
 800da96:	f002 fa4c 	bl	800ff32 <finite>
 800da9a:	b1a8      	cbz	r0, 800dac8 <pow+0xac>
 800da9c:	ec45 4b10 	vmov	d0, r4, r5
 800daa0:	f002 fa47 	bl	800ff32 <finite>
 800daa4:	b180      	cbz	r0, 800dac8 <pow+0xac>
 800daa6:	4632      	mov	r2, r6
 800daa8:	463b      	mov	r3, r7
 800daaa:	4630      	mov	r0, r6
 800daac:	4639      	mov	r1, r7
 800daae:	f7f3 f855 	bl	8000b5c <__aeabi_dcmpun>
 800dab2:	2800      	cmp	r0, #0
 800dab4:	d0e2      	beq.n	800da7c <pow+0x60>
 800dab6:	f7fa fd95 	bl	80085e4 <__errno>
 800daba:	2321      	movs	r3, #33	; 0x21
 800dabc:	6003      	str	r3, [r0, #0]
 800dabe:	ecbd 8b02 	vpop	{d8}
 800dac2:	ec47 6b10 	vmov	d0, r6, r7
 800dac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dac8:	2200      	movs	r2, #0
 800daca:	2300      	movs	r3, #0
 800dacc:	4630      	mov	r0, r6
 800dace:	4639      	mov	r1, r7
 800dad0:	f7f3 f812 	bl	8000af8 <__aeabi_dcmpeq>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d0f2      	beq.n	800dabe <pow+0xa2>
 800dad8:	eeb0 0a48 	vmov.f32	s0, s16
 800dadc:	eef0 0a68 	vmov.f32	s1, s17
 800dae0:	f002 fa27 	bl	800ff32 <finite>
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d0ea      	beq.n	800dabe <pow+0xa2>
 800dae8:	ec45 4b10 	vmov	d0, r4, r5
 800daec:	f002 fa21 	bl	800ff32 <finite>
 800daf0:	e7c3      	b.n	800da7a <pow+0x5e>
 800daf2:	4f01      	ldr	r7, [pc, #4]	; (800daf8 <pow+0xdc>)
 800daf4:	2600      	movs	r6, #0
 800daf6:	e7e2      	b.n	800dabe <pow+0xa2>
 800daf8:	3ff00000 	.word	0x3ff00000

0800dafc <sqrt>:
 800dafc:	b538      	push	{r3, r4, r5, lr}
 800dafe:	ed2d 8b02 	vpush	{d8}
 800db02:	ec55 4b10 	vmov	r4, r5, d0
 800db06:	f001 faab 	bl	800f060 <__ieee754_sqrt>
 800db0a:	4622      	mov	r2, r4
 800db0c:	462b      	mov	r3, r5
 800db0e:	4620      	mov	r0, r4
 800db10:	4629      	mov	r1, r5
 800db12:	eeb0 8a40 	vmov.f32	s16, s0
 800db16:	eef0 8a60 	vmov.f32	s17, s1
 800db1a:	f7f3 f81f 	bl	8000b5c <__aeabi_dcmpun>
 800db1e:	b990      	cbnz	r0, 800db46 <sqrt+0x4a>
 800db20:	2200      	movs	r2, #0
 800db22:	2300      	movs	r3, #0
 800db24:	4620      	mov	r0, r4
 800db26:	4629      	mov	r1, r5
 800db28:	f7f2 fff0 	bl	8000b0c <__aeabi_dcmplt>
 800db2c:	b158      	cbz	r0, 800db46 <sqrt+0x4a>
 800db2e:	f7fa fd59 	bl	80085e4 <__errno>
 800db32:	2321      	movs	r3, #33	; 0x21
 800db34:	6003      	str	r3, [r0, #0]
 800db36:	2200      	movs	r2, #0
 800db38:	2300      	movs	r3, #0
 800db3a:	4610      	mov	r0, r2
 800db3c:	4619      	mov	r1, r3
 800db3e:	f7f2 fe9d 	bl	800087c <__aeabi_ddiv>
 800db42:	ec41 0b18 	vmov	d8, r0, r1
 800db46:	eeb0 0a48 	vmov.f32	s0, s16
 800db4a:	eef0 0a68 	vmov.f32	s1, s17
 800db4e:	ecbd 8b02 	vpop	{d8}
 800db52:	bd38      	pop	{r3, r4, r5, pc}

0800db54 <sqrtf>:
 800db54:	b508      	push	{r3, lr}
 800db56:	ed2d 8b02 	vpush	{d8}
 800db5a:	eeb0 8a40 	vmov.f32	s16, s0
 800db5e:	f001 fb31 	bl	800f1c4 <__ieee754_sqrtf>
 800db62:	eeb4 8a48 	vcmp.f32	s16, s16
 800db66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db6a:	d60c      	bvs.n	800db86 <sqrtf+0x32>
 800db6c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800db8c <sqrtf+0x38>
 800db70:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800db74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db78:	d505      	bpl.n	800db86 <sqrtf+0x32>
 800db7a:	f7fa fd33 	bl	80085e4 <__errno>
 800db7e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800db82:	2321      	movs	r3, #33	; 0x21
 800db84:	6003      	str	r3, [r0, #0]
 800db86:	ecbd 8b02 	vpop	{d8}
 800db8a:	bd08      	pop	{r3, pc}
 800db8c:	00000000 	.word	0x00000000

0800db90 <__ieee754_acos>:
 800db90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db94:	ec55 4b10 	vmov	r4, r5, d0
 800db98:	49b7      	ldr	r1, [pc, #732]	; (800de78 <__ieee754_acos+0x2e8>)
 800db9a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800db9e:	428b      	cmp	r3, r1
 800dba0:	dd1b      	ble.n	800dbda <__ieee754_acos+0x4a>
 800dba2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800dba6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dbaa:	4323      	orrs	r3, r4
 800dbac:	d106      	bne.n	800dbbc <__ieee754_acos+0x2c>
 800dbae:	2d00      	cmp	r5, #0
 800dbb0:	f300 8211 	bgt.w	800dfd6 <__ieee754_acos+0x446>
 800dbb4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800de10 <__ieee754_acos+0x280>
 800dbb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbbc:	ee10 2a10 	vmov	r2, s0
 800dbc0:	462b      	mov	r3, r5
 800dbc2:	ee10 0a10 	vmov	r0, s0
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	f7f2 fb76 	bl	80002b8 <__aeabi_dsub>
 800dbcc:	4602      	mov	r2, r0
 800dbce:	460b      	mov	r3, r1
 800dbd0:	f7f2 fe54 	bl	800087c <__aeabi_ddiv>
 800dbd4:	ec41 0b10 	vmov	d0, r0, r1
 800dbd8:	e7ee      	b.n	800dbb8 <__ieee754_acos+0x28>
 800dbda:	49a8      	ldr	r1, [pc, #672]	; (800de7c <__ieee754_acos+0x2ec>)
 800dbdc:	428b      	cmp	r3, r1
 800dbde:	f300 8087 	bgt.w	800dcf0 <__ieee754_acos+0x160>
 800dbe2:	4aa7      	ldr	r2, [pc, #668]	; (800de80 <__ieee754_acos+0x2f0>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	f340 81f9 	ble.w	800dfdc <__ieee754_acos+0x44c>
 800dbea:	ee10 2a10 	vmov	r2, s0
 800dbee:	ee10 0a10 	vmov	r0, s0
 800dbf2:	462b      	mov	r3, r5
 800dbf4:	4629      	mov	r1, r5
 800dbf6:	f7f2 fd17 	bl	8000628 <__aeabi_dmul>
 800dbfa:	a387      	add	r3, pc, #540	; (adr r3, 800de18 <__ieee754_acos+0x288>)
 800dbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc00:	4606      	mov	r6, r0
 800dc02:	460f      	mov	r7, r1
 800dc04:	f7f2 fd10 	bl	8000628 <__aeabi_dmul>
 800dc08:	a385      	add	r3, pc, #532	; (adr r3, 800de20 <__ieee754_acos+0x290>)
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	f7f2 fb55 	bl	80002bc <__adddf3>
 800dc12:	4632      	mov	r2, r6
 800dc14:	463b      	mov	r3, r7
 800dc16:	f7f2 fd07 	bl	8000628 <__aeabi_dmul>
 800dc1a:	a383      	add	r3, pc, #524	; (adr r3, 800de28 <__ieee754_acos+0x298>)
 800dc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc20:	f7f2 fb4a 	bl	80002b8 <__aeabi_dsub>
 800dc24:	4632      	mov	r2, r6
 800dc26:	463b      	mov	r3, r7
 800dc28:	f7f2 fcfe 	bl	8000628 <__aeabi_dmul>
 800dc2c:	a380      	add	r3, pc, #512	; (adr r3, 800de30 <__ieee754_acos+0x2a0>)
 800dc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc32:	f7f2 fb43 	bl	80002bc <__adddf3>
 800dc36:	4632      	mov	r2, r6
 800dc38:	463b      	mov	r3, r7
 800dc3a:	f7f2 fcf5 	bl	8000628 <__aeabi_dmul>
 800dc3e:	a37e      	add	r3, pc, #504	; (adr r3, 800de38 <__ieee754_acos+0x2a8>)
 800dc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc44:	f7f2 fb38 	bl	80002b8 <__aeabi_dsub>
 800dc48:	4632      	mov	r2, r6
 800dc4a:	463b      	mov	r3, r7
 800dc4c:	f7f2 fcec 	bl	8000628 <__aeabi_dmul>
 800dc50:	a37b      	add	r3, pc, #492	; (adr r3, 800de40 <__ieee754_acos+0x2b0>)
 800dc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc56:	f7f2 fb31 	bl	80002bc <__adddf3>
 800dc5a:	4632      	mov	r2, r6
 800dc5c:	463b      	mov	r3, r7
 800dc5e:	f7f2 fce3 	bl	8000628 <__aeabi_dmul>
 800dc62:	a379      	add	r3, pc, #484	; (adr r3, 800de48 <__ieee754_acos+0x2b8>)
 800dc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc68:	4680      	mov	r8, r0
 800dc6a:	4689      	mov	r9, r1
 800dc6c:	4630      	mov	r0, r6
 800dc6e:	4639      	mov	r1, r7
 800dc70:	f7f2 fcda 	bl	8000628 <__aeabi_dmul>
 800dc74:	a376      	add	r3, pc, #472	; (adr r3, 800de50 <__ieee754_acos+0x2c0>)
 800dc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7a:	f7f2 fb1d 	bl	80002b8 <__aeabi_dsub>
 800dc7e:	4632      	mov	r2, r6
 800dc80:	463b      	mov	r3, r7
 800dc82:	f7f2 fcd1 	bl	8000628 <__aeabi_dmul>
 800dc86:	a374      	add	r3, pc, #464	; (adr r3, 800de58 <__ieee754_acos+0x2c8>)
 800dc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8c:	f7f2 fb16 	bl	80002bc <__adddf3>
 800dc90:	4632      	mov	r2, r6
 800dc92:	463b      	mov	r3, r7
 800dc94:	f7f2 fcc8 	bl	8000628 <__aeabi_dmul>
 800dc98:	a371      	add	r3, pc, #452	; (adr r3, 800de60 <__ieee754_acos+0x2d0>)
 800dc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9e:	f7f2 fb0b 	bl	80002b8 <__aeabi_dsub>
 800dca2:	4632      	mov	r2, r6
 800dca4:	463b      	mov	r3, r7
 800dca6:	f7f2 fcbf 	bl	8000628 <__aeabi_dmul>
 800dcaa:	4b76      	ldr	r3, [pc, #472]	; (800de84 <__ieee754_acos+0x2f4>)
 800dcac:	2200      	movs	r2, #0
 800dcae:	f7f2 fb05 	bl	80002bc <__adddf3>
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	4640      	mov	r0, r8
 800dcb8:	4649      	mov	r1, r9
 800dcba:	f7f2 fddf 	bl	800087c <__aeabi_ddiv>
 800dcbe:	4622      	mov	r2, r4
 800dcc0:	462b      	mov	r3, r5
 800dcc2:	f7f2 fcb1 	bl	8000628 <__aeabi_dmul>
 800dcc6:	4602      	mov	r2, r0
 800dcc8:	460b      	mov	r3, r1
 800dcca:	a167      	add	r1, pc, #412	; (adr r1, 800de68 <__ieee754_acos+0x2d8>)
 800dccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcd0:	f7f2 faf2 	bl	80002b8 <__aeabi_dsub>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	4620      	mov	r0, r4
 800dcda:	4629      	mov	r1, r5
 800dcdc:	f7f2 faec 	bl	80002b8 <__aeabi_dsub>
 800dce0:	4602      	mov	r2, r0
 800dce2:	460b      	mov	r3, r1
 800dce4:	a162      	add	r1, pc, #392	; (adr r1, 800de70 <__ieee754_acos+0x2e0>)
 800dce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcea:	f7f2 fae5 	bl	80002b8 <__aeabi_dsub>
 800dcee:	e771      	b.n	800dbd4 <__ieee754_acos+0x44>
 800dcf0:	2d00      	cmp	r5, #0
 800dcf2:	f280 80cb 	bge.w	800de8c <__ieee754_acos+0x2fc>
 800dcf6:	ee10 0a10 	vmov	r0, s0
 800dcfa:	4b62      	ldr	r3, [pc, #392]	; (800de84 <__ieee754_acos+0x2f4>)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	4629      	mov	r1, r5
 800dd00:	f7f2 fadc 	bl	80002bc <__adddf3>
 800dd04:	4b60      	ldr	r3, [pc, #384]	; (800de88 <__ieee754_acos+0x2f8>)
 800dd06:	2200      	movs	r2, #0
 800dd08:	f7f2 fc8e 	bl	8000628 <__aeabi_dmul>
 800dd0c:	a342      	add	r3, pc, #264	; (adr r3, 800de18 <__ieee754_acos+0x288>)
 800dd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd12:	4604      	mov	r4, r0
 800dd14:	460d      	mov	r5, r1
 800dd16:	f7f2 fc87 	bl	8000628 <__aeabi_dmul>
 800dd1a:	a341      	add	r3, pc, #260	; (adr r3, 800de20 <__ieee754_acos+0x290>)
 800dd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd20:	f7f2 facc 	bl	80002bc <__adddf3>
 800dd24:	4622      	mov	r2, r4
 800dd26:	462b      	mov	r3, r5
 800dd28:	f7f2 fc7e 	bl	8000628 <__aeabi_dmul>
 800dd2c:	a33e      	add	r3, pc, #248	; (adr r3, 800de28 <__ieee754_acos+0x298>)
 800dd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd32:	f7f2 fac1 	bl	80002b8 <__aeabi_dsub>
 800dd36:	4622      	mov	r2, r4
 800dd38:	462b      	mov	r3, r5
 800dd3a:	f7f2 fc75 	bl	8000628 <__aeabi_dmul>
 800dd3e:	a33c      	add	r3, pc, #240	; (adr r3, 800de30 <__ieee754_acos+0x2a0>)
 800dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd44:	f7f2 faba 	bl	80002bc <__adddf3>
 800dd48:	4622      	mov	r2, r4
 800dd4a:	462b      	mov	r3, r5
 800dd4c:	f7f2 fc6c 	bl	8000628 <__aeabi_dmul>
 800dd50:	a339      	add	r3, pc, #228	; (adr r3, 800de38 <__ieee754_acos+0x2a8>)
 800dd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd56:	f7f2 faaf 	bl	80002b8 <__aeabi_dsub>
 800dd5a:	4622      	mov	r2, r4
 800dd5c:	462b      	mov	r3, r5
 800dd5e:	f7f2 fc63 	bl	8000628 <__aeabi_dmul>
 800dd62:	a337      	add	r3, pc, #220	; (adr r3, 800de40 <__ieee754_acos+0x2b0>)
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	f7f2 faa8 	bl	80002bc <__adddf3>
 800dd6c:	4622      	mov	r2, r4
 800dd6e:	462b      	mov	r3, r5
 800dd70:	f7f2 fc5a 	bl	8000628 <__aeabi_dmul>
 800dd74:	ec45 4b10 	vmov	d0, r4, r5
 800dd78:	4680      	mov	r8, r0
 800dd7a:	4689      	mov	r9, r1
 800dd7c:	f001 f970 	bl	800f060 <__ieee754_sqrt>
 800dd80:	a331      	add	r3, pc, #196	; (adr r3, 800de48 <__ieee754_acos+0x2b8>)
 800dd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd86:	4620      	mov	r0, r4
 800dd88:	4629      	mov	r1, r5
 800dd8a:	ec57 6b10 	vmov	r6, r7, d0
 800dd8e:	f7f2 fc4b 	bl	8000628 <__aeabi_dmul>
 800dd92:	a32f      	add	r3, pc, #188	; (adr r3, 800de50 <__ieee754_acos+0x2c0>)
 800dd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd98:	f7f2 fa8e 	bl	80002b8 <__aeabi_dsub>
 800dd9c:	4622      	mov	r2, r4
 800dd9e:	462b      	mov	r3, r5
 800dda0:	f7f2 fc42 	bl	8000628 <__aeabi_dmul>
 800dda4:	a32c      	add	r3, pc, #176	; (adr r3, 800de58 <__ieee754_acos+0x2c8>)
 800dda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddaa:	f7f2 fa87 	bl	80002bc <__adddf3>
 800ddae:	4622      	mov	r2, r4
 800ddb0:	462b      	mov	r3, r5
 800ddb2:	f7f2 fc39 	bl	8000628 <__aeabi_dmul>
 800ddb6:	a32a      	add	r3, pc, #168	; (adr r3, 800de60 <__ieee754_acos+0x2d0>)
 800ddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbc:	f7f2 fa7c 	bl	80002b8 <__aeabi_dsub>
 800ddc0:	4622      	mov	r2, r4
 800ddc2:	462b      	mov	r3, r5
 800ddc4:	f7f2 fc30 	bl	8000628 <__aeabi_dmul>
 800ddc8:	4b2e      	ldr	r3, [pc, #184]	; (800de84 <__ieee754_acos+0x2f4>)
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f7f2 fa76 	bl	80002bc <__adddf3>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	4640      	mov	r0, r8
 800ddd6:	4649      	mov	r1, r9
 800ddd8:	f7f2 fd50 	bl	800087c <__aeabi_ddiv>
 800dddc:	4632      	mov	r2, r6
 800ddde:	463b      	mov	r3, r7
 800dde0:	f7f2 fc22 	bl	8000628 <__aeabi_dmul>
 800dde4:	a320      	add	r3, pc, #128	; (adr r3, 800de68 <__ieee754_acos+0x2d8>)
 800dde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddea:	f7f2 fa65 	bl	80002b8 <__aeabi_dsub>
 800ddee:	4632      	mov	r2, r6
 800ddf0:	463b      	mov	r3, r7
 800ddf2:	f7f2 fa63 	bl	80002bc <__adddf3>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	f7f2 fa5f 	bl	80002bc <__adddf3>
 800ddfe:	4602      	mov	r2, r0
 800de00:	460b      	mov	r3, r1
 800de02:	a103      	add	r1, pc, #12	; (adr r1, 800de10 <__ieee754_acos+0x280>)
 800de04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de08:	e76f      	b.n	800dcea <__ieee754_acos+0x15a>
 800de0a:	bf00      	nop
 800de0c:	f3af 8000 	nop.w
 800de10:	54442d18 	.word	0x54442d18
 800de14:	400921fb 	.word	0x400921fb
 800de18:	0dfdf709 	.word	0x0dfdf709
 800de1c:	3f023de1 	.word	0x3f023de1
 800de20:	7501b288 	.word	0x7501b288
 800de24:	3f49efe0 	.word	0x3f49efe0
 800de28:	b5688f3b 	.word	0xb5688f3b
 800de2c:	3fa48228 	.word	0x3fa48228
 800de30:	0e884455 	.word	0x0e884455
 800de34:	3fc9c155 	.word	0x3fc9c155
 800de38:	03eb6f7d 	.word	0x03eb6f7d
 800de3c:	3fd4d612 	.word	0x3fd4d612
 800de40:	55555555 	.word	0x55555555
 800de44:	3fc55555 	.word	0x3fc55555
 800de48:	b12e9282 	.word	0xb12e9282
 800de4c:	3fb3b8c5 	.word	0x3fb3b8c5
 800de50:	1b8d0159 	.word	0x1b8d0159
 800de54:	3fe6066c 	.word	0x3fe6066c
 800de58:	9c598ac8 	.word	0x9c598ac8
 800de5c:	40002ae5 	.word	0x40002ae5
 800de60:	1c8a2d4b 	.word	0x1c8a2d4b
 800de64:	40033a27 	.word	0x40033a27
 800de68:	33145c07 	.word	0x33145c07
 800de6c:	3c91a626 	.word	0x3c91a626
 800de70:	54442d18 	.word	0x54442d18
 800de74:	3ff921fb 	.word	0x3ff921fb
 800de78:	3fefffff 	.word	0x3fefffff
 800de7c:	3fdfffff 	.word	0x3fdfffff
 800de80:	3c600000 	.word	0x3c600000
 800de84:	3ff00000 	.word	0x3ff00000
 800de88:	3fe00000 	.word	0x3fe00000
 800de8c:	ee10 2a10 	vmov	r2, s0
 800de90:	462b      	mov	r3, r5
 800de92:	496d      	ldr	r1, [pc, #436]	; (800e048 <__ieee754_acos+0x4b8>)
 800de94:	2000      	movs	r0, #0
 800de96:	f7f2 fa0f 	bl	80002b8 <__aeabi_dsub>
 800de9a:	4b6c      	ldr	r3, [pc, #432]	; (800e04c <__ieee754_acos+0x4bc>)
 800de9c:	2200      	movs	r2, #0
 800de9e:	f7f2 fbc3 	bl	8000628 <__aeabi_dmul>
 800dea2:	4604      	mov	r4, r0
 800dea4:	460d      	mov	r5, r1
 800dea6:	ec45 4b10 	vmov	d0, r4, r5
 800deaa:	f001 f8d9 	bl	800f060 <__ieee754_sqrt>
 800deae:	a34e      	add	r3, pc, #312	; (adr r3, 800dfe8 <__ieee754_acos+0x458>)
 800deb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb4:	4620      	mov	r0, r4
 800deb6:	4629      	mov	r1, r5
 800deb8:	ec59 8b10 	vmov	r8, r9, d0
 800debc:	f7f2 fbb4 	bl	8000628 <__aeabi_dmul>
 800dec0:	a34b      	add	r3, pc, #300	; (adr r3, 800dff0 <__ieee754_acos+0x460>)
 800dec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec6:	f7f2 f9f9 	bl	80002bc <__adddf3>
 800deca:	4622      	mov	r2, r4
 800decc:	462b      	mov	r3, r5
 800dece:	f7f2 fbab 	bl	8000628 <__aeabi_dmul>
 800ded2:	a349      	add	r3, pc, #292	; (adr r3, 800dff8 <__ieee754_acos+0x468>)
 800ded4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded8:	f7f2 f9ee 	bl	80002b8 <__aeabi_dsub>
 800dedc:	4622      	mov	r2, r4
 800dede:	462b      	mov	r3, r5
 800dee0:	f7f2 fba2 	bl	8000628 <__aeabi_dmul>
 800dee4:	a346      	add	r3, pc, #280	; (adr r3, 800e000 <__ieee754_acos+0x470>)
 800dee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deea:	f7f2 f9e7 	bl	80002bc <__adddf3>
 800deee:	4622      	mov	r2, r4
 800def0:	462b      	mov	r3, r5
 800def2:	f7f2 fb99 	bl	8000628 <__aeabi_dmul>
 800def6:	a344      	add	r3, pc, #272	; (adr r3, 800e008 <__ieee754_acos+0x478>)
 800def8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defc:	f7f2 f9dc 	bl	80002b8 <__aeabi_dsub>
 800df00:	4622      	mov	r2, r4
 800df02:	462b      	mov	r3, r5
 800df04:	f7f2 fb90 	bl	8000628 <__aeabi_dmul>
 800df08:	a341      	add	r3, pc, #260	; (adr r3, 800e010 <__ieee754_acos+0x480>)
 800df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0e:	f7f2 f9d5 	bl	80002bc <__adddf3>
 800df12:	4622      	mov	r2, r4
 800df14:	462b      	mov	r3, r5
 800df16:	f7f2 fb87 	bl	8000628 <__aeabi_dmul>
 800df1a:	a33f      	add	r3, pc, #252	; (adr r3, 800e018 <__ieee754_acos+0x488>)
 800df1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df20:	4682      	mov	sl, r0
 800df22:	468b      	mov	fp, r1
 800df24:	4620      	mov	r0, r4
 800df26:	4629      	mov	r1, r5
 800df28:	f7f2 fb7e 	bl	8000628 <__aeabi_dmul>
 800df2c:	a33c      	add	r3, pc, #240	; (adr r3, 800e020 <__ieee754_acos+0x490>)
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	f7f2 f9c1 	bl	80002b8 <__aeabi_dsub>
 800df36:	4622      	mov	r2, r4
 800df38:	462b      	mov	r3, r5
 800df3a:	f7f2 fb75 	bl	8000628 <__aeabi_dmul>
 800df3e:	a33a      	add	r3, pc, #232	; (adr r3, 800e028 <__ieee754_acos+0x498>)
 800df40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df44:	f7f2 f9ba 	bl	80002bc <__adddf3>
 800df48:	4622      	mov	r2, r4
 800df4a:	462b      	mov	r3, r5
 800df4c:	f7f2 fb6c 	bl	8000628 <__aeabi_dmul>
 800df50:	a337      	add	r3, pc, #220	; (adr r3, 800e030 <__ieee754_acos+0x4a0>)
 800df52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df56:	f7f2 f9af 	bl	80002b8 <__aeabi_dsub>
 800df5a:	4622      	mov	r2, r4
 800df5c:	462b      	mov	r3, r5
 800df5e:	f7f2 fb63 	bl	8000628 <__aeabi_dmul>
 800df62:	4b39      	ldr	r3, [pc, #228]	; (800e048 <__ieee754_acos+0x4b8>)
 800df64:	2200      	movs	r2, #0
 800df66:	f7f2 f9a9 	bl	80002bc <__adddf3>
 800df6a:	4602      	mov	r2, r0
 800df6c:	460b      	mov	r3, r1
 800df6e:	4650      	mov	r0, sl
 800df70:	4659      	mov	r1, fp
 800df72:	f7f2 fc83 	bl	800087c <__aeabi_ddiv>
 800df76:	4642      	mov	r2, r8
 800df78:	464b      	mov	r3, r9
 800df7a:	f7f2 fb55 	bl	8000628 <__aeabi_dmul>
 800df7e:	2600      	movs	r6, #0
 800df80:	4682      	mov	sl, r0
 800df82:	468b      	mov	fp, r1
 800df84:	4632      	mov	r2, r6
 800df86:	464b      	mov	r3, r9
 800df88:	4630      	mov	r0, r6
 800df8a:	4649      	mov	r1, r9
 800df8c:	f7f2 fb4c 	bl	8000628 <__aeabi_dmul>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4620      	mov	r0, r4
 800df96:	4629      	mov	r1, r5
 800df98:	f7f2 f98e 	bl	80002b8 <__aeabi_dsub>
 800df9c:	4632      	mov	r2, r6
 800df9e:	4604      	mov	r4, r0
 800dfa0:	460d      	mov	r5, r1
 800dfa2:	464b      	mov	r3, r9
 800dfa4:	4640      	mov	r0, r8
 800dfa6:	4649      	mov	r1, r9
 800dfa8:	f7f2 f988 	bl	80002bc <__adddf3>
 800dfac:	4602      	mov	r2, r0
 800dfae:	460b      	mov	r3, r1
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	f7f2 fc62 	bl	800087c <__aeabi_ddiv>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	460b      	mov	r3, r1
 800dfbc:	4650      	mov	r0, sl
 800dfbe:	4659      	mov	r1, fp
 800dfc0:	f7f2 f97c 	bl	80002bc <__adddf3>
 800dfc4:	4632      	mov	r2, r6
 800dfc6:	464b      	mov	r3, r9
 800dfc8:	f7f2 f978 	bl	80002bc <__adddf3>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	460b      	mov	r3, r1
 800dfd0:	f7f2 f974 	bl	80002bc <__adddf3>
 800dfd4:	e5fe      	b.n	800dbd4 <__ieee754_acos+0x44>
 800dfd6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800e038 <__ieee754_acos+0x4a8>
 800dfda:	e5ed      	b.n	800dbb8 <__ieee754_acos+0x28>
 800dfdc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800e040 <__ieee754_acos+0x4b0>
 800dfe0:	e5ea      	b.n	800dbb8 <__ieee754_acos+0x28>
 800dfe2:	bf00      	nop
 800dfe4:	f3af 8000 	nop.w
 800dfe8:	0dfdf709 	.word	0x0dfdf709
 800dfec:	3f023de1 	.word	0x3f023de1
 800dff0:	7501b288 	.word	0x7501b288
 800dff4:	3f49efe0 	.word	0x3f49efe0
 800dff8:	b5688f3b 	.word	0xb5688f3b
 800dffc:	3fa48228 	.word	0x3fa48228
 800e000:	0e884455 	.word	0x0e884455
 800e004:	3fc9c155 	.word	0x3fc9c155
 800e008:	03eb6f7d 	.word	0x03eb6f7d
 800e00c:	3fd4d612 	.word	0x3fd4d612
 800e010:	55555555 	.word	0x55555555
 800e014:	3fc55555 	.word	0x3fc55555
 800e018:	b12e9282 	.word	0xb12e9282
 800e01c:	3fb3b8c5 	.word	0x3fb3b8c5
 800e020:	1b8d0159 	.word	0x1b8d0159
 800e024:	3fe6066c 	.word	0x3fe6066c
 800e028:	9c598ac8 	.word	0x9c598ac8
 800e02c:	40002ae5 	.word	0x40002ae5
 800e030:	1c8a2d4b 	.word	0x1c8a2d4b
 800e034:	40033a27 	.word	0x40033a27
	...
 800e040:	54442d18 	.word	0x54442d18
 800e044:	3ff921fb 	.word	0x3ff921fb
 800e048:	3ff00000 	.word	0x3ff00000
 800e04c:	3fe00000 	.word	0x3fe00000

0800e050 <__ieee754_atan2>:
 800e050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e054:	ec57 6b11 	vmov	r6, r7, d1
 800e058:	4273      	negs	r3, r6
 800e05a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e1e0 <__ieee754_atan2+0x190>
 800e05e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e062:	4333      	orrs	r3, r6
 800e064:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e068:	4573      	cmp	r3, lr
 800e06a:	ec51 0b10 	vmov	r0, r1, d0
 800e06e:	ee11 8a10 	vmov	r8, s2
 800e072:	d80a      	bhi.n	800e08a <__ieee754_atan2+0x3a>
 800e074:	4244      	negs	r4, r0
 800e076:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e07a:	4304      	orrs	r4, r0
 800e07c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e080:	4574      	cmp	r4, lr
 800e082:	ee10 9a10 	vmov	r9, s0
 800e086:	468c      	mov	ip, r1
 800e088:	d907      	bls.n	800e09a <__ieee754_atan2+0x4a>
 800e08a:	4632      	mov	r2, r6
 800e08c:	463b      	mov	r3, r7
 800e08e:	f7f2 f915 	bl	80002bc <__adddf3>
 800e092:	ec41 0b10 	vmov	d0, r0, r1
 800e096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e09a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e09e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e0a2:	4334      	orrs	r4, r6
 800e0a4:	d103      	bne.n	800e0ae <__ieee754_atan2+0x5e>
 800e0a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0aa:	f001 bd99 	b.w	800fbe0 <atan>
 800e0ae:	17bc      	asrs	r4, r7, #30
 800e0b0:	f004 0402 	and.w	r4, r4, #2
 800e0b4:	ea53 0909 	orrs.w	r9, r3, r9
 800e0b8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e0bc:	d107      	bne.n	800e0ce <__ieee754_atan2+0x7e>
 800e0be:	2c02      	cmp	r4, #2
 800e0c0:	d060      	beq.n	800e184 <__ieee754_atan2+0x134>
 800e0c2:	2c03      	cmp	r4, #3
 800e0c4:	d1e5      	bne.n	800e092 <__ieee754_atan2+0x42>
 800e0c6:	a142      	add	r1, pc, #264	; (adr r1, 800e1d0 <__ieee754_atan2+0x180>)
 800e0c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0cc:	e7e1      	b.n	800e092 <__ieee754_atan2+0x42>
 800e0ce:	ea52 0808 	orrs.w	r8, r2, r8
 800e0d2:	d106      	bne.n	800e0e2 <__ieee754_atan2+0x92>
 800e0d4:	f1bc 0f00 	cmp.w	ip, #0
 800e0d8:	da5f      	bge.n	800e19a <__ieee754_atan2+0x14a>
 800e0da:	a13f      	add	r1, pc, #252	; (adr r1, 800e1d8 <__ieee754_atan2+0x188>)
 800e0dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0e0:	e7d7      	b.n	800e092 <__ieee754_atan2+0x42>
 800e0e2:	4572      	cmp	r2, lr
 800e0e4:	d10f      	bne.n	800e106 <__ieee754_atan2+0xb6>
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	f104 34ff 	add.w	r4, r4, #4294967295
 800e0ec:	d107      	bne.n	800e0fe <__ieee754_atan2+0xae>
 800e0ee:	2c02      	cmp	r4, #2
 800e0f0:	d84c      	bhi.n	800e18c <__ieee754_atan2+0x13c>
 800e0f2:	4b35      	ldr	r3, [pc, #212]	; (800e1c8 <__ieee754_atan2+0x178>)
 800e0f4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e0f8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e0fc:	e7c9      	b.n	800e092 <__ieee754_atan2+0x42>
 800e0fe:	2c02      	cmp	r4, #2
 800e100:	d848      	bhi.n	800e194 <__ieee754_atan2+0x144>
 800e102:	4b32      	ldr	r3, [pc, #200]	; (800e1cc <__ieee754_atan2+0x17c>)
 800e104:	e7f6      	b.n	800e0f4 <__ieee754_atan2+0xa4>
 800e106:	4573      	cmp	r3, lr
 800e108:	d0e4      	beq.n	800e0d4 <__ieee754_atan2+0x84>
 800e10a:	1a9b      	subs	r3, r3, r2
 800e10c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e110:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e114:	da1e      	bge.n	800e154 <__ieee754_atan2+0x104>
 800e116:	2f00      	cmp	r7, #0
 800e118:	da01      	bge.n	800e11e <__ieee754_atan2+0xce>
 800e11a:	323c      	adds	r2, #60	; 0x3c
 800e11c:	db1e      	blt.n	800e15c <__ieee754_atan2+0x10c>
 800e11e:	4632      	mov	r2, r6
 800e120:	463b      	mov	r3, r7
 800e122:	f7f2 fbab 	bl	800087c <__aeabi_ddiv>
 800e126:	ec41 0b10 	vmov	d0, r0, r1
 800e12a:	f001 fef9 	bl	800ff20 <fabs>
 800e12e:	f001 fd57 	bl	800fbe0 <atan>
 800e132:	ec51 0b10 	vmov	r0, r1, d0
 800e136:	2c01      	cmp	r4, #1
 800e138:	d013      	beq.n	800e162 <__ieee754_atan2+0x112>
 800e13a:	2c02      	cmp	r4, #2
 800e13c:	d015      	beq.n	800e16a <__ieee754_atan2+0x11a>
 800e13e:	2c00      	cmp	r4, #0
 800e140:	d0a7      	beq.n	800e092 <__ieee754_atan2+0x42>
 800e142:	a319      	add	r3, pc, #100	; (adr r3, 800e1a8 <__ieee754_atan2+0x158>)
 800e144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e148:	f7f2 f8b6 	bl	80002b8 <__aeabi_dsub>
 800e14c:	a318      	add	r3, pc, #96	; (adr r3, 800e1b0 <__ieee754_atan2+0x160>)
 800e14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e152:	e014      	b.n	800e17e <__ieee754_atan2+0x12e>
 800e154:	a118      	add	r1, pc, #96	; (adr r1, 800e1b8 <__ieee754_atan2+0x168>)
 800e156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e15a:	e7ec      	b.n	800e136 <__ieee754_atan2+0xe6>
 800e15c:	2000      	movs	r0, #0
 800e15e:	2100      	movs	r1, #0
 800e160:	e7e9      	b.n	800e136 <__ieee754_atan2+0xe6>
 800e162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e166:	4619      	mov	r1, r3
 800e168:	e793      	b.n	800e092 <__ieee754_atan2+0x42>
 800e16a:	a30f      	add	r3, pc, #60	; (adr r3, 800e1a8 <__ieee754_atan2+0x158>)
 800e16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e170:	f7f2 f8a2 	bl	80002b8 <__aeabi_dsub>
 800e174:	4602      	mov	r2, r0
 800e176:	460b      	mov	r3, r1
 800e178:	a10d      	add	r1, pc, #52	; (adr r1, 800e1b0 <__ieee754_atan2+0x160>)
 800e17a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e17e:	f7f2 f89b 	bl	80002b8 <__aeabi_dsub>
 800e182:	e786      	b.n	800e092 <__ieee754_atan2+0x42>
 800e184:	a10a      	add	r1, pc, #40	; (adr r1, 800e1b0 <__ieee754_atan2+0x160>)
 800e186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e18a:	e782      	b.n	800e092 <__ieee754_atan2+0x42>
 800e18c:	a10c      	add	r1, pc, #48	; (adr r1, 800e1c0 <__ieee754_atan2+0x170>)
 800e18e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e192:	e77e      	b.n	800e092 <__ieee754_atan2+0x42>
 800e194:	2000      	movs	r0, #0
 800e196:	2100      	movs	r1, #0
 800e198:	e77b      	b.n	800e092 <__ieee754_atan2+0x42>
 800e19a:	a107      	add	r1, pc, #28	; (adr r1, 800e1b8 <__ieee754_atan2+0x168>)
 800e19c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1a0:	e777      	b.n	800e092 <__ieee754_atan2+0x42>
 800e1a2:	bf00      	nop
 800e1a4:	f3af 8000 	nop.w
 800e1a8:	33145c07 	.word	0x33145c07
 800e1ac:	3ca1a626 	.word	0x3ca1a626
 800e1b0:	54442d18 	.word	0x54442d18
 800e1b4:	400921fb 	.word	0x400921fb
 800e1b8:	54442d18 	.word	0x54442d18
 800e1bc:	3ff921fb 	.word	0x3ff921fb
 800e1c0:	54442d18 	.word	0x54442d18
 800e1c4:	3fe921fb 	.word	0x3fe921fb
 800e1c8:	08010990 	.word	0x08010990
 800e1cc:	080109a8 	.word	0x080109a8
 800e1d0:	54442d18 	.word	0x54442d18
 800e1d4:	c00921fb 	.word	0xc00921fb
 800e1d8:	54442d18 	.word	0x54442d18
 800e1dc:	bff921fb 	.word	0xbff921fb
 800e1e0:	7ff00000 	.word	0x7ff00000
 800e1e4:	00000000 	.word	0x00000000

0800e1e8 <__ieee754_pow>:
 800e1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ec:	ed2d 8b06 	vpush	{d8-d10}
 800e1f0:	b089      	sub	sp, #36	; 0x24
 800e1f2:	ed8d 1b00 	vstr	d1, [sp]
 800e1f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e1fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e1fe:	ea58 0102 	orrs.w	r1, r8, r2
 800e202:	ec57 6b10 	vmov	r6, r7, d0
 800e206:	d115      	bne.n	800e234 <__ieee754_pow+0x4c>
 800e208:	19b3      	adds	r3, r6, r6
 800e20a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e20e:	4152      	adcs	r2, r2
 800e210:	4299      	cmp	r1, r3
 800e212:	4b89      	ldr	r3, [pc, #548]	; (800e438 <__ieee754_pow+0x250>)
 800e214:	4193      	sbcs	r3, r2
 800e216:	f080 84d2 	bcs.w	800ebbe <__ieee754_pow+0x9d6>
 800e21a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e21e:	4630      	mov	r0, r6
 800e220:	4639      	mov	r1, r7
 800e222:	f7f2 f84b 	bl	80002bc <__adddf3>
 800e226:	ec41 0b10 	vmov	d0, r0, r1
 800e22a:	b009      	add	sp, #36	; 0x24
 800e22c:	ecbd 8b06 	vpop	{d8-d10}
 800e230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e234:	4b81      	ldr	r3, [pc, #516]	; (800e43c <__ieee754_pow+0x254>)
 800e236:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e23a:	429c      	cmp	r4, r3
 800e23c:	ee10 aa10 	vmov	sl, s0
 800e240:	463d      	mov	r5, r7
 800e242:	dc06      	bgt.n	800e252 <__ieee754_pow+0x6a>
 800e244:	d101      	bne.n	800e24a <__ieee754_pow+0x62>
 800e246:	2e00      	cmp	r6, #0
 800e248:	d1e7      	bne.n	800e21a <__ieee754_pow+0x32>
 800e24a:	4598      	cmp	r8, r3
 800e24c:	dc01      	bgt.n	800e252 <__ieee754_pow+0x6a>
 800e24e:	d10f      	bne.n	800e270 <__ieee754_pow+0x88>
 800e250:	b172      	cbz	r2, 800e270 <__ieee754_pow+0x88>
 800e252:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e256:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e25a:	ea55 050a 	orrs.w	r5, r5, sl
 800e25e:	d1dc      	bne.n	800e21a <__ieee754_pow+0x32>
 800e260:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e264:	18db      	adds	r3, r3, r3
 800e266:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e26a:	4152      	adcs	r2, r2
 800e26c:	429d      	cmp	r5, r3
 800e26e:	e7d0      	b.n	800e212 <__ieee754_pow+0x2a>
 800e270:	2d00      	cmp	r5, #0
 800e272:	da3b      	bge.n	800e2ec <__ieee754_pow+0x104>
 800e274:	4b72      	ldr	r3, [pc, #456]	; (800e440 <__ieee754_pow+0x258>)
 800e276:	4598      	cmp	r8, r3
 800e278:	dc51      	bgt.n	800e31e <__ieee754_pow+0x136>
 800e27a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e27e:	4598      	cmp	r8, r3
 800e280:	f340 84ac 	ble.w	800ebdc <__ieee754_pow+0x9f4>
 800e284:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e288:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e28c:	2b14      	cmp	r3, #20
 800e28e:	dd0f      	ble.n	800e2b0 <__ieee754_pow+0xc8>
 800e290:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e294:	fa22 f103 	lsr.w	r1, r2, r3
 800e298:	fa01 f303 	lsl.w	r3, r1, r3
 800e29c:	4293      	cmp	r3, r2
 800e29e:	f040 849d 	bne.w	800ebdc <__ieee754_pow+0x9f4>
 800e2a2:	f001 0101 	and.w	r1, r1, #1
 800e2a6:	f1c1 0302 	rsb	r3, r1, #2
 800e2aa:	9304      	str	r3, [sp, #16]
 800e2ac:	b182      	cbz	r2, 800e2d0 <__ieee754_pow+0xe8>
 800e2ae:	e05f      	b.n	800e370 <__ieee754_pow+0x188>
 800e2b0:	2a00      	cmp	r2, #0
 800e2b2:	d15b      	bne.n	800e36c <__ieee754_pow+0x184>
 800e2b4:	f1c3 0314 	rsb	r3, r3, #20
 800e2b8:	fa48 f103 	asr.w	r1, r8, r3
 800e2bc:	fa01 f303 	lsl.w	r3, r1, r3
 800e2c0:	4543      	cmp	r3, r8
 800e2c2:	f040 8488 	bne.w	800ebd6 <__ieee754_pow+0x9ee>
 800e2c6:	f001 0101 	and.w	r1, r1, #1
 800e2ca:	f1c1 0302 	rsb	r3, r1, #2
 800e2ce:	9304      	str	r3, [sp, #16]
 800e2d0:	4b5c      	ldr	r3, [pc, #368]	; (800e444 <__ieee754_pow+0x25c>)
 800e2d2:	4598      	cmp	r8, r3
 800e2d4:	d132      	bne.n	800e33c <__ieee754_pow+0x154>
 800e2d6:	f1b9 0f00 	cmp.w	r9, #0
 800e2da:	f280 8478 	bge.w	800ebce <__ieee754_pow+0x9e6>
 800e2de:	4959      	ldr	r1, [pc, #356]	; (800e444 <__ieee754_pow+0x25c>)
 800e2e0:	4632      	mov	r2, r6
 800e2e2:	463b      	mov	r3, r7
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	f7f2 fac9 	bl	800087c <__aeabi_ddiv>
 800e2ea:	e79c      	b.n	800e226 <__ieee754_pow+0x3e>
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	9304      	str	r3, [sp, #16]
 800e2f0:	2a00      	cmp	r2, #0
 800e2f2:	d13d      	bne.n	800e370 <__ieee754_pow+0x188>
 800e2f4:	4b51      	ldr	r3, [pc, #324]	; (800e43c <__ieee754_pow+0x254>)
 800e2f6:	4598      	cmp	r8, r3
 800e2f8:	d1ea      	bne.n	800e2d0 <__ieee754_pow+0xe8>
 800e2fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e2fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e302:	ea53 030a 	orrs.w	r3, r3, sl
 800e306:	f000 845a 	beq.w	800ebbe <__ieee754_pow+0x9d6>
 800e30a:	4b4f      	ldr	r3, [pc, #316]	; (800e448 <__ieee754_pow+0x260>)
 800e30c:	429c      	cmp	r4, r3
 800e30e:	dd08      	ble.n	800e322 <__ieee754_pow+0x13a>
 800e310:	f1b9 0f00 	cmp.w	r9, #0
 800e314:	f2c0 8457 	blt.w	800ebc6 <__ieee754_pow+0x9de>
 800e318:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e31c:	e783      	b.n	800e226 <__ieee754_pow+0x3e>
 800e31e:	2302      	movs	r3, #2
 800e320:	e7e5      	b.n	800e2ee <__ieee754_pow+0x106>
 800e322:	f1b9 0f00 	cmp.w	r9, #0
 800e326:	f04f 0000 	mov.w	r0, #0
 800e32a:	f04f 0100 	mov.w	r1, #0
 800e32e:	f6bf af7a 	bge.w	800e226 <__ieee754_pow+0x3e>
 800e332:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e336:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e33a:	e774      	b.n	800e226 <__ieee754_pow+0x3e>
 800e33c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e340:	d106      	bne.n	800e350 <__ieee754_pow+0x168>
 800e342:	4632      	mov	r2, r6
 800e344:	463b      	mov	r3, r7
 800e346:	4630      	mov	r0, r6
 800e348:	4639      	mov	r1, r7
 800e34a:	f7f2 f96d 	bl	8000628 <__aeabi_dmul>
 800e34e:	e76a      	b.n	800e226 <__ieee754_pow+0x3e>
 800e350:	4b3e      	ldr	r3, [pc, #248]	; (800e44c <__ieee754_pow+0x264>)
 800e352:	4599      	cmp	r9, r3
 800e354:	d10c      	bne.n	800e370 <__ieee754_pow+0x188>
 800e356:	2d00      	cmp	r5, #0
 800e358:	db0a      	blt.n	800e370 <__ieee754_pow+0x188>
 800e35a:	ec47 6b10 	vmov	d0, r6, r7
 800e35e:	b009      	add	sp, #36	; 0x24
 800e360:	ecbd 8b06 	vpop	{d8-d10}
 800e364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e368:	f000 be7a 	b.w	800f060 <__ieee754_sqrt>
 800e36c:	2300      	movs	r3, #0
 800e36e:	9304      	str	r3, [sp, #16]
 800e370:	ec47 6b10 	vmov	d0, r6, r7
 800e374:	f001 fdd4 	bl	800ff20 <fabs>
 800e378:	ec51 0b10 	vmov	r0, r1, d0
 800e37c:	f1ba 0f00 	cmp.w	sl, #0
 800e380:	d129      	bne.n	800e3d6 <__ieee754_pow+0x1ee>
 800e382:	b124      	cbz	r4, 800e38e <__ieee754_pow+0x1a6>
 800e384:	4b2f      	ldr	r3, [pc, #188]	; (800e444 <__ieee754_pow+0x25c>)
 800e386:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d123      	bne.n	800e3d6 <__ieee754_pow+0x1ee>
 800e38e:	f1b9 0f00 	cmp.w	r9, #0
 800e392:	da05      	bge.n	800e3a0 <__ieee754_pow+0x1b8>
 800e394:	4602      	mov	r2, r0
 800e396:	460b      	mov	r3, r1
 800e398:	2000      	movs	r0, #0
 800e39a:	492a      	ldr	r1, [pc, #168]	; (800e444 <__ieee754_pow+0x25c>)
 800e39c:	f7f2 fa6e 	bl	800087c <__aeabi_ddiv>
 800e3a0:	2d00      	cmp	r5, #0
 800e3a2:	f6bf af40 	bge.w	800e226 <__ieee754_pow+0x3e>
 800e3a6:	9b04      	ldr	r3, [sp, #16]
 800e3a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e3ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e3b0:	4323      	orrs	r3, r4
 800e3b2:	d108      	bne.n	800e3c6 <__ieee754_pow+0x1de>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	460b      	mov	r3, r1
 800e3b8:	4610      	mov	r0, r2
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	f7f1 ff7c 	bl	80002b8 <__aeabi_dsub>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	e78f      	b.n	800e2e6 <__ieee754_pow+0xfe>
 800e3c6:	9b04      	ldr	r3, [sp, #16]
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	f47f af2c 	bne.w	800e226 <__ieee754_pow+0x3e>
 800e3ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	e727      	b.n	800e226 <__ieee754_pow+0x3e>
 800e3d6:	0feb      	lsrs	r3, r5, #31
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	9306      	str	r3, [sp, #24]
 800e3dc:	9a06      	ldr	r2, [sp, #24]
 800e3de:	9b04      	ldr	r3, [sp, #16]
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	d102      	bne.n	800e3ea <__ieee754_pow+0x202>
 800e3e4:	4632      	mov	r2, r6
 800e3e6:	463b      	mov	r3, r7
 800e3e8:	e7e6      	b.n	800e3b8 <__ieee754_pow+0x1d0>
 800e3ea:	4b19      	ldr	r3, [pc, #100]	; (800e450 <__ieee754_pow+0x268>)
 800e3ec:	4598      	cmp	r8, r3
 800e3ee:	f340 80fb 	ble.w	800e5e8 <__ieee754_pow+0x400>
 800e3f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e3f6:	4598      	cmp	r8, r3
 800e3f8:	4b13      	ldr	r3, [pc, #76]	; (800e448 <__ieee754_pow+0x260>)
 800e3fa:	dd0c      	ble.n	800e416 <__ieee754_pow+0x22e>
 800e3fc:	429c      	cmp	r4, r3
 800e3fe:	dc0f      	bgt.n	800e420 <__ieee754_pow+0x238>
 800e400:	f1b9 0f00 	cmp.w	r9, #0
 800e404:	da0f      	bge.n	800e426 <__ieee754_pow+0x23e>
 800e406:	2000      	movs	r0, #0
 800e408:	b009      	add	sp, #36	; 0x24
 800e40a:	ecbd 8b06 	vpop	{d8-d10}
 800e40e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e412:	f001 bbda 	b.w	800fbca <__math_oflow>
 800e416:	429c      	cmp	r4, r3
 800e418:	dbf2      	blt.n	800e400 <__ieee754_pow+0x218>
 800e41a:	4b0a      	ldr	r3, [pc, #40]	; (800e444 <__ieee754_pow+0x25c>)
 800e41c:	429c      	cmp	r4, r3
 800e41e:	dd19      	ble.n	800e454 <__ieee754_pow+0x26c>
 800e420:	f1b9 0f00 	cmp.w	r9, #0
 800e424:	dcef      	bgt.n	800e406 <__ieee754_pow+0x21e>
 800e426:	2000      	movs	r0, #0
 800e428:	b009      	add	sp, #36	; 0x24
 800e42a:	ecbd 8b06 	vpop	{d8-d10}
 800e42e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e432:	f001 bbc1 	b.w	800fbb8 <__math_uflow>
 800e436:	bf00      	nop
 800e438:	fff00000 	.word	0xfff00000
 800e43c:	7ff00000 	.word	0x7ff00000
 800e440:	433fffff 	.word	0x433fffff
 800e444:	3ff00000 	.word	0x3ff00000
 800e448:	3fefffff 	.word	0x3fefffff
 800e44c:	3fe00000 	.word	0x3fe00000
 800e450:	41e00000 	.word	0x41e00000
 800e454:	4b60      	ldr	r3, [pc, #384]	; (800e5d8 <__ieee754_pow+0x3f0>)
 800e456:	2200      	movs	r2, #0
 800e458:	f7f1 ff2e 	bl	80002b8 <__aeabi_dsub>
 800e45c:	a354      	add	r3, pc, #336	; (adr r3, 800e5b0 <__ieee754_pow+0x3c8>)
 800e45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e462:	4604      	mov	r4, r0
 800e464:	460d      	mov	r5, r1
 800e466:	f7f2 f8df 	bl	8000628 <__aeabi_dmul>
 800e46a:	a353      	add	r3, pc, #332	; (adr r3, 800e5b8 <__ieee754_pow+0x3d0>)
 800e46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e470:	4606      	mov	r6, r0
 800e472:	460f      	mov	r7, r1
 800e474:	4620      	mov	r0, r4
 800e476:	4629      	mov	r1, r5
 800e478:	f7f2 f8d6 	bl	8000628 <__aeabi_dmul>
 800e47c:	4b57      	ldr	r3, [pc, #348]	; (800e5dc <__ieee754_pow+0x3f4>)
 800e47e:	4682      	mov	sl, r0
 800e480:	468b      	mov	fp, r1
 800e482:	2200      	movs	r2, #0
 800e484:	4620      	mov	r0, r4
 800e486:	4629      	mov	r1, r5
 800e488:	f7f2 f8ce 	bl	8000628 <__aeabi_dmul>
 800e48c:	4602      	mov	r2, r0
 800e48e:	460b      	mov	r3, r1
 800e490:	a14b      	add	r1, pc, #300	; (adr r1, 800e5c0 <__ieee754_pow+0x3d8>)
 800e492:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e496:	f7f1 ff0f 	bl	80002b8 <__aeabi_dsub>
 800e49a:	4622      	mov	r2, r4
 800e49c:	462b      	mov	r3, r5
 800e49e:	f7f2 f8c3 	bl	8000628 <__aeabi_dmul>
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	494d      	ldr	r1, [pc, #308]	; (800e5e0 <__ieee754_pow+0x3f8>)
 800e4aa:	f7f1 ff05 	bl	80002b8 <__aeabi_dsub>
 800e4ae:	4622      	mov	r2, r4
 800e4b0:	4680      	mov	r8, r0
 800e4b2:	4689      	mov	r9, r1
 800e4b4:	462b      	mov	r3, r5
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	4629      	mov	r1, r5
 800e4ba:	f7f2 f8b5 	bl	8000628 <__aeabi_dmul>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	4640      	mov	r0, r8
 800e4c4:	4649      	mov	r1, r9
 800e4c6:	f7f2 f8af 	bl	8000628 <__aeabi_dmul>
 800e4ca:	a33f      	add	r3, pc, #252	; (adr r3, 800e5c8 <__ieee754_pow+0x3e0>)
 800e4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d0:	f7f2 f8aa 	bl	8000628 <__aeabi_dmul>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	4650      	mov	r0, sl
 800e4da:	4659      	mov	r1, fp
 800e4dc:	f7f1 feec 	bl	80002b8 <__aeabi_dsub>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	4680      	mov	r8, r0
 800e4e6:	4689      	mov	r9, r1
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	4639      	mov	r1, r7
 800e4ec:	f7f1 fee6 	bl	80002bc <__adddf3>
 800e4f0:	2000      	movs	r0, #0
 800e4f2:	4632      	mov	r2, r6
 800e4f4:	463b      	mov	r3, r7
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	460d      	mov	r5, r1
 800e4fa:	f7f1 fedd 	bl	80002b8 <__aeabi_dsub>
 800e4fe:	4602      	mov	r2, r0
 800e500:	460b      	mov	r3, r1
 800e502:	4640      	mov	r0, r8
 800e504:	4649      	mov	r1, r9
 800e506:	f7f1 fed7 	bl	80002b8 <__aeabi_dsub>
 800e50a:	9b04      	ldr	r3, [sp, #16]
 800e50c:	9a06      	ldr	r2, [sp, #24]
 800e50e:	3b01      	subs	r3, #1
 800e510:	4313      	orrs	r3, r2
 800e512:	4682      	mov	sl, r0
 800e514:	468b      	mov	fp, r1
 800e516:	f040 81e7 	bne.w	800e8e8 <__ieee754_pow+0x700>
 800e51a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e5d0 <__ieee754_pow+0x3e8>
 800e51e:	eeb0 8a47 	vmov.f32	s16, s14
 800e522:	eef0 8a67 	vmov.f32	s17, s15
 800e526:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e52a:	2600      	movs	r6, #0
 800e52c:	4632      	mov	r2, r6
 800e52e:	463b      	mov	r3, r7
 800e530:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e534:	f7f1 fec0 	bl	80002b8 <__aeabi_dsub>
 800e538:	4622      	mov	r2, r4
 800e53a:	462b      	mov	r3, r5
 800e53c:	f7f2 f874 	bl	8000628 <__aeabi_dmul>
 800e540:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e544:	4680      	mov	r8, r0
 800e546:	4689      	mov	r9, r1
 800e548:	4650      	mov	r0, sl
 800e54a:	4659      	mov	r1, fp
 800e54c:	f7f2 f86c 	bl	8000628 <__aeabi_dmul>
 800e550:	4602      	mov	r2, r0
 800e552:	460b      	mov	r3, r1
 800e554:	4640      	mov	r0, r8
 800e556:	4649      	mov	r1, r9
 800e558:	f7f1 feb0 	bl	80002bc <__adddf3>
 800e55c:	4632      	mov	r2, r6
 800e55e:	463b      	mov	r3, r7
 800e560:	4680      	mov	r8, r0
 800e562:	4689      	mov	r9, r1
 800e564:	4620      	mov	r0, r4
 800e566:	4629      	mov	r1, r5
 800e568:	f7f2 f85e 	bl	8000628 <__aeabi_dmul>
 800e56c:	460b      	mov	r3, r1
 800e56e:	4604      	mov	r4, r0
 800e570:	460d      	mov	r5, r1
 800e572:	4602      	mov	r2, r0
 800e574:	4649      	mov	r1, r9
 800e576:	4640      	mov	r0, r8
 800e578:	f7f1 fea0 	bl	80002bc <__adddf3>
 800e57c:	4b19      	ldr	r3, [pc, #100]	; (800e5e4 <__ieee754_pow+0x3fc>)
 800e57e:	4299      	cmp	r1, r3
 800e580:	ec45 4b19 	vmov	d9, r4, r5
 800e584:	4606      	mov	r6, r0
 800e586:	460f      	mov	r7, r1
 800e588:	468b      	mov	fp, r1
 800e58a:	f340 82f1 	ble.w	800eb70 <__ieee754_pow+0x988>
 800e58e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e592:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e596:	4303      	orrs	r3, r0
 800e598:	f000 81e4 	beq.w	800e964 <__ieee754_pow+0x77c>
 800e59c:	ec51 0b18 	vmov	r0, r1, d8
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	f7f2 fab2 	bl	8000b0c <__aeabi_dcmplt>
 800e5a8:	3800      	subs	r0, #0
 800e5aa:	bf18      	it	ne
 800e5ac:	2001      	movne	r0, #1
 800e5ae:	e72b      	b.n	800e408 <__ieee754_pow+0x220>
 800e5b0:	60000000 	.word	0x60000000
 800e5b4:	3ff71547 	.word	0x3ff71547
 800e5b8:	f85ddf44 	.word	0xf85ddf44
 800e5bc:	3e54ae0b 	.word	0x3e54ae0b
 800e5c0:	55555555 	.word	0x55555555
 800e5c4:	3fd55555 	.word	0x3fd55555
 800e5c8:	652b82fe 	.word	0x652b82fe
 800e5cc:	3ff71547 	.word	0x3ff71547
 800e5d0:	00000000 	.word	0x00000000
 800e5d4:	bff00000 	.word	0xbff00000
 800e5d8:	3ff00000 	.word	0x3ff00000
 800e5dc:	3fd00000 	.word	0x3fd00000
 800e5e0:	3fe00000 	.word	0x3fe00000
 800e5e4:	408fffff 	.word	0x408fffff
 800e5e8:	4bd5      	ldr	r3, [pc, #852]	; (800e940 <__ieee754_pow+0x758>)
 800e5ea:	402b      	ands	r3, r5
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	b92b      	cbnz	r3, 800e5fc <__ieee754_pow+0x414>
 800e5f0:	4bd4      	ldr	r3, [pc, #848]	; (800e944 <__ieee754_pow+0x75c>)
 800e5f2:	f7f2 f819 	bl	8000628 <__aeabi_dmul>
 800e5f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e5fa:	460c      	mov	r4, r1
 800e5fc:	1523      	asrs	r3, r4, #20
 800e5fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e602:	4413      	add	r3, r2
 800e604:	9305      	str	r3, [sp, #20]
 800e606:	4bd0      	ldr	r3, [pc, #832]	; (800e948 <__ieee754_pow+0x760>)
 800e608:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e60c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e610:	429c      	cmp	r4, r3
 800e612:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e616:	dd08      	ble.n	800e62a <__ieee754_pow+0x442>
 800e618:	4bcc      	ldr	r3, [pc, #816]	; (800e94c <__ieee754_pow+0x764>)
 800e61a:	429c      	cmp	r4, r3
 800e61c:	f340 8162 	ble.w	800e8e4 <__ieee754_pow+0x6fc>
 800e620:	9b05      	ldr	r3, [sp, #20]
 800e622:	3301      	adds	r3, #1
 800e624:	9305      	str	r3, [sp, #20]
 800e626:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e62a:	2400      	movs	r4, #0
 800e62c:	00e3      	lsls	r3, r4, #3
 800e62e:	9307      	str	r3, [sp, #28]
 800e630:	4bc7      	ldr	r3, [pc, #796]	; (800e950 <__ieee754_pow+0x768>)
 800e632:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e636:	ed93 7b00 	vldr	d7, [r3]
 800e63a:	4629      	mov	r1, r5
 800e63c:	ec53 2b17 	vmov	r2, r3, d7
 800e640:	eeb0 9a47 	vmov.f32	s18, s14
 800e644:	eef0 9a67 	vmov.f32	s19, s15
 800e648:	4682      	mov	sl, r0
 800e64a:	f7f1 fe35 	bl	80002b8 <__aeabi_dsub>
 800e64e:	4652      	mov	r2, sl
 800e650:	4606      	mov	r6, r0
 800e652:	460f      	mov	r7, r1
 800e654:	462b      	mov	r3, r5
 800e656:	ec51 0b19 	vmov	r0, r1, d9
 800e65a:	f7f1 fe2f 	bl	80002bc <__adddf3>
 800e65e:	4602      	mov	r2, r0
 800e660:	460b      	mov	r3, r1
 800e662:	2000      	movs	r0, #0
 800e664:	49bb      	ldr	r1, [pc, #748]	; (800e954 <__ieee754_pow+0x76c>)
 800e666:	f7f2 f909 	bl	800087c <__aeabi_ddiv>
 800e66a:	ec41 0b1a 	vmov	d10, r0, r1
 800e66e:	4602      	mov	r2, r0
 800e670:	460b      	mov	r3, r1
 800e672:	4630      	mov	r0, r6
 800e674:	4639      	mov	r1, r7
 800e676:	f7f1 ffd7 	bl	8000628 <__aeabi_dmul>
 800e67a:	2300      	movs	r3, #0
 800e67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e680:	9302      	str	r3, [sp, #8]
 800e682:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e686:	46ab      	mov	fp, r5
 800e688:	106d      	asrs	r5, r5, #1
 800e68a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e68e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e692:	ec41 0b18 	vmov	d8, r0, r1
 800e696:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e69a:	2200      	movs	r2, #0
 800e69c:	4640      	mov	r0, r8
 800e69e:	4649      	mov	r1, r9
 800e6a0:	4614      	mov	r4, r2
 800e6a2:	461d      	mov	r5, r3
 800e6a4:	f7f1 ffc0 	bl	8000628 <__aeabi_dmul>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	4630      	mov	r0, r6
 800e6ae:	4639      	mov	r1, r7
 800e6b0:	f7f1 fe02 	bl	80002b8 <__aeabi_dsub>
 800e6b4:	ec53 2b19 	vmov	r2, r3, d9
 800e6b8:	4606      	mov	r6, r0
 800e6ba:	460f      	mov	r7, r1
 800e6bc:	4620      	mov	r0, r4
 800e6be:	4629      	mov	r1, r5
 800e6c0:	f7f1 fdfa 	bl	80002b8 <__aeabi_dsub>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	4650      	mov	r0, sl
 800e6ca:	4659      	mov	r1, fp
 800e6cc:	f7f1 fdf4 	bl	80002b8 <__aeabi_dsub>
 800e6d0:	4642      	mov	r2, r8
 800e6d2:	464b      	mov	r3, r9
 800e6d4:	f7f1 ffa8 	bl	8000628 <__aeabi_dmul>
 800e6d8:	4602      	mov	r2, r0
 800e6da:	460b      	mov	r3, r1
 800e6dc:	4630      	mov	r0, r6
 800e6de:	4639      	mov	r1, r7
 800e6e0:	f7f1 fdea 	bl	80002b8 <__aeabi_dsub>
 800e6e4:	ec53 2b1a 	vmov	r2, r3, d10
 800e6e8:	f7f1 ff9e 	bl	8000628 <__aeabi_dmul>
 800e6ec:	ec53 2b18 	vmov	r2, r3, d8
 800e6f0:	ec41 0b19 	vmov	d9, r0, r1
 800e6f4:	ec51 0b18 	vmov	r0, r1, d8
 800e6f8:	f7f1 ff96 	bl	8000628 <__aeabi_dmul>
 800e6fc:	a37c      	add	r3, pc, #496	; (adr r3, 800e8f0 <__ieee754_pow+0x708>)
 800e6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e702:	4604      	mov	r4, r0
 800e704:	460d      	mov	r5, r1
 800e706:	f7f1 ff8f 	bl	8000628 <__aeabi_dmul>
 800e70a:	a37b      	add	r3, pc, #492	; (adr r3, 800e8f8 <__ieee754_pow+0x710>)
 800e70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e710:	f7f1 fdd4 	bl	80002bc <__adddf3>
 800e714:	4622      	mov	r2, r4
 800e716:	462b      	mov	r3, r5
 800e718:	f7f1 ff86 	bl	8000628 <__aeabi_dmul>
 800e71c:	a378      	add	r3, pc, #480	; (adr r3, 800e900 <__ieee754_pow+0x718>)
 800e71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e722:	f7f1 fdcb 	bl	80002bc <__adddf3>
 800e726:	4622      	mov	r2, r4
 800e728:	462b      	mov	r3, r5
 800e72a:	f7f1 ff7d 	bl	8000628 <__aeabi_dmul>
 800e72e:	a376      	add	r3, pc, #472	; (adr r3, 800e908 <__ieee754_pow+0x720>)
 800e730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e734:	f7f1 fdc2 	bl	80002bc <__adddf3>
 800e738:	4622      	mov	r2, r4
 800e73a:	462b      	mov	r3, r5
 800e73c:	f7f1 ff74 	bl	8000628 <__aeabi_dmul>
 800e740:	a373      	add	r3, pc, #460	; (adr r3, 800e910 <__ieee754_pow+0x728>)
 800e742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e746:	f7f1 fdb9 	bl	80002bc <__adddf3>
 800e74a:	4622      	mov	r2, r4
 800e74c:	462b      	mov	r3, r5
 800e74e:	f7f1 ff6b 	bl	8000628 <__aeabi_dmul>
 800e752:	a371      	add	r3, pc, #452	; (adr r3, 800e918 <__ieee754_pow+0x730>)
 800e754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e758:	f7f1 fdb0 	bl	80002bc <__adddf3>
 800e75c:	4622      	mov	r2, r4
 800e75e:	4606      	mov	r6, r0
 800e760:	460f      	mov	r7, r1
 800e762:	462b      	mov	r3, r5
 800e764:	4620      	mov	r0, r4
 800e766:	4629      	mov	r1, r5
 800e768:	f7f1 ff5e 	bl	8000628 <__aeabi_dmul>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	4630      	mov	r0, r6
 800e772:	4639      	mov	r1, r7
 800e774:	f7f1 ff58 	bl	8000628 <__aeabi_dmul>
 800e778:	4642      	mov	r2, r8
 800e77a:	4604      	mov	r4, r0
 800e77c:	460d      	mov	r5, r1
 800e77e:	464b      	mov	r3, r9
 800e780:	ec51 0b18 	vmov	r0, r1, d8
 800e784:	f7f1 fd9a 	bl	80002bc <__adddf3>
 800e788:	ec53 2b19 	vmov	r2, r3, d9
 800e78c:	f7f1 ff4c 	bl	8000628 <__aeabi_dmul>
 800e790:	4622      	mov	r2, r4
 800e792:	462b      	mov	r3, r5
 800e794:	f7f1 fd92 	bl	80002bc <__adddf3>
 800e798:	4642      	mov	r2, r8
 800e79a:	4682      	mov	sl, r0
 800e79c:	468b      	mov	fp, r1
 800e79e:	464b      	mov	r3, r9
 800e7a0:	4640      	mov	r0, r8
 800e7a2:	4649      	mov	r1, r9
 800e7a4:	f7f1 ff40 	bl	8000628 <__aeabi_dmul>
 800e7a8:	4b6b      	ldr	r3, [pc, #428]	; (800e958 <__ieee754_pow+0x770>)
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	4606      	mov	r6, r0
 800e7ae:	460f      	mov	r7, r1
 800e7b0:	f7f1 fd84 	bl	80002bc <__adddf3>
 800e7b4:	4652      	mov	r2, sl
 800e7b6:	465b      	mov	r3, fp
 800e7b8:	f7f1 fd80 	bl	80002bc <__adddf3>
 800e7bc:	2000      	movs	r0, #0
 800e7be:	4604      	mov	r4, r0
 800e7c0:	460d      	mov	r5, r1
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	4640      	mov	r0, r8
 800e7c8:	4649      	mov	r1, r9
 800e7ca:	f7f1 ff2d 	bl	8000628 <__aeabi_dmul>
 800e7ce:	4b62      	ldr	r3, [pc, #392]	; (800e958 <__ieee754_pow+0x770>)
 800e7d0:	4680      	mov	r8, r0
 800e7d2:	4689      	mov	r9, r1
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	4629      	mov	r1, r5
 800e7da:	f7f1 fd6d 	bl	80002b8 <__aeabi_dsub>
 800e7de:	4632      	mov	r2, r6
 800e7e0:	463b      	mov	r3, r7
 800e7e2:	f7f1 fd69 	bl	80002b8 <__aeabi_dsub>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	4650      	mov	r0, sl
 800e7ec:	4659      	mov	r1, fp
 800e7ee:	f7f1 fd63 	bl	80002b8 <__aeabi_dsub>
 800e7f2:	ec53 2b18 	vmov	r2, r3, d8
 800e7f6:	f7f1 ff17 	bl	8000628 <__aeabi_dmul>
 800e7fa:	4622      	mov	r2, r4
 800e7fc:	4606      	mov	r6, r0
 800e7fe:	460f      	mov	r7, r1
 800e800:	462b      	mov	r3, r5
 800e802:	ec51 0b19 	vmov	r0, r1, d9
 800e806:	f7f1 ff0f 	bl	8000628 <__aeabi_dmul>
 800e80a:	4602      	mov	r2, r0
 800e80c:	460b      	mov	r3, r1
 800e80e:	4630      	mov	r0, r6
 800e810:	4639      	mov	r1, r7
 800e812:	f7f1 fd53 	bl	80002bc <__adddf3>
 800e816:	4606      	mov	r6, r0
 800e818:	460f      	mov	r7, r1
 800e81a:	4602      	mov	r2, r0
 800e81c:	460b      	mov	r3, r1
 800e81e:	4640      	mov	r0, r8
 800e820:	4649      	mov	r1, r9
 800e822:	f7f1 fd4b 	bl	80002bc <__adddf3>
 800e826:	a33e      	add	r3, pc, #248	; (adr r3, 800e920 <__ieee754_pow+0x738>)
 800e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82c:	2000      	movs	r0, #0
 800e82e:	4604      	mov	r4, r0
 800e830:	460d      	mov	r5, r1
 800e832:	f7f1 fef9 	bl	8000628 <__aeabi_dmul>
 800e836:	4642      	mov	r2, r8
 800e838:	ec41 0b18 	vmov	d8, r0, r1
 800e83c:	464b      	mov	r3, r9
 800e83e:	4620      	mov	r0, r4
 800e840:	4629      	mov	r1, r5
 800e842:	f7f1 fd39 	bl	80002b8 <__aeabi_dsub>
 800e846:	4602      	mov	r2, r0
 800e848:	460b      	mov	r3, r1
 800e84a:	4630      	mov	r0, r6
 800e84c:	4639      	mov	r1, r7
 800e84e:	f7f1 fd33 	bl	80002b8 <__aeabi_dsub>
 800e852:	a335      	add	r3, pc, #212	; (adr r3, 800e928 <__ieee754_pow+0x740>)
 800e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e858:	f7f1 fee6 	bl	8000628 <__aeabi_dmul>
 800e85c:	a334      	add	r3, pc, #208	; (adr r3, 800e930 <__ieee754_pow+0x748>)
 800e85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e862:	4606      	mov	r6, r0
 800e864:	460f      	mov	r7, r1
 800e866:	4620      	mov	r0, r4
 800e868:	4629      	mov	r1, r5
 800e86a:	f7f1 fedd 	bl	8000628 <__aeabi_dmul>
 800e86e:	4602      	mov	r2, r0
 800e870:	460b      	mov	r3, r1
 800e872:	4630      	mov	r0, r6
 800e874:	4639      	mov	r1, r7
 800e876:	f7f1 fd21 	bl	80002bc <__adddf3>
 800e87a:	9a07      	ldr	r2, [sp, #28]
 800e87c:	4b37      	ldr	r3, [pc, #220]	; (800e95c <__ieee754_pow+0x774>)
 800e87e:	4413      	add	r3, r2
 800e880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e884:	f7f1 fd1a 	bl	80002bc <__adddf3>
 800e888:	4682      	mov	sl, r0
 800e88a:	9805      	ldr	r0, [sp, #20]
 800e88c:	468b      	mov	fp, r1
 800e88e:	f7f1 fe61 	bl	8000554 <__aeabi_i2d>
 800e892:	9a07      	ldr	r2, [sp, #28]
 800e894:	4b32      	ldr	r3, [pc, #200]	; (800e960 <__ieee754_pow+0x778>)
 800e896:	4413      	add	r3, r2
 800e898:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e89c:	4606      	mov	r6, r0
 800e89e:	460f      	mov	r7, r1
 800e8a0:	4652      	mov	r2, sl
 800e8a2:	465b      	mov	r3, fp
 800e8a4:	ec51 0b18 	vmov	r0, r1, d8
 800e8a8:	f7f1 fd08 	bl	80002bc <__adddf3>
 800e8ac:	4642      	mov	r2, r8
 800e8ae:	464b      	mov	r3, r9
 800e8b0:	f7f1 fd04 	bl	80002bc <__adddf3>
 800e8b4:	4632      	mov	r2, r6
 800e8b6:	463b      	mov	r3, r7
 800e8b8:	f7f1 fd00 	bl	80002bc <__adddf3>
 800e8bc:	2000      	movs	r0, #0
 800e8be:	4632      	mov	r2, r6
 800e8c0:	463b      	mov	r3, r7
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	460d      	mov	r5, r1
 800e8c6:	f7f1 fcf7 	bl	80002b8 <__aeabi_dsub>
 800e8ca:	4642      	mov	r2, r8
 800e8cc:	464b      	mov	r3, r9
 800e8ce:	f7f1 fcf3 	bl	80002b8 <__aeabi_dsub>
 800e8d2:	ec53 2b18 	vmov	r2, r3, d8
 800e8d6:	f7f1 fcef 	bl	80002b8 <__aeabi_dsub>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	460b      	mov	r3, r1
 800e8de:	4650      	mov	r0, sl
 800e8e0:	4659      	mov	r1, fp
 800e8e2:	e610      	b.n	800e506 <__ieee754_pow+0x31e>
 800e8e4:	2401      	movs	r4, #1
 800e8e6:	e6a1      	b.n	800e62c <__ieee754_pow+0x444>
 800e8e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e938 <__ieee754_pow+0x750>
 800e8ec:	e617      	b.n	800e51e <__ieee754_pow+0x336>
 800e8ee:	bf00      	nop
 800e8f0:	4a454eef 	.word	0x4a454eef
 800e8f4:	3fca7e28 	.word	0x3fca7e28
 800e8f8:	93c9db65 	.word	0x93c9db65
 800e8fc:	3fcd864a 	.word	0x3fcd864a
 800e900:	a91d4101 	.word	0xa91d4101
 800e904:	3fd17460 	.word	0x3fd17460
 800e908:	518f264d 	.word	0x518f264d
 800e90c:	3fd55555 	.word	0x3fd55555
 800e910:	db6fabff 	.word	0xdb6fabff
 800e914:	3fdb6db6 	.word	0x3fdb6db6
 800e918:	33333303 	.word	0x33333303
 800e91c:	3fe33333 	.word	0x3fe33333
 800e920:	e0000000 	.word	0xe0000000
 800e924:	3feec709 	.word	0x3feec709
 800e928:	dc3a03fd 	.word	0xdc3a03fd
 800e92c:	3feec709 	.word	0x3feec709
 800e930:	145b01f5 	.word	0x145b01f5
 800e934:	be3e2fe0 	.word	0xbe3e2fe0
 800e938:	00000000 	.word	0x00000000
 800e93c:	3ff00000 	.word	0x3ff00000
 800e940:	7ff00000 	.word	0x7ff00000
 800e944:	43400000 	.word	0x43400000
 800e948:	0003988e 	.word	0x0003988e
 800e94c:	000bb679 	.word	0x000bb679
 800e950:	080109c0 	.word	0x080109c0
 800e954:	3ff00000 	.word	0x3ff00000
 800e958:	40080000 	.word	0x40080000
 800e95c:	080109e0 	.word	0x080109e0
 800e960:	080109d0 	.word	0x080109d0
 800e964:	a3b5      	add	r3, pc, #724	; (adr r3, 800ec3c <__ieee754_pow+0xa54>)
 800e966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e96a:	4640      	mov	r0, r8
 800e96c:	4649      	mov	r1, r9
 800e96e:	f7f1 fca5 	bl	80002bc <__adddf3>
 800e972:	4622      	mov	r2, r4
 800e974:	ec41 0b1a 	vmov	d10, r0, r1
 800e978:	462b      	mov	r3, r5
 800e97a:	4630      	mov	r0, r6
 800e97c:	4639      	mov	r1, r7
 800e97e:	f7f1 fc9b 	bl	80002b8 <__aeabi_dsub>
 800e982:	4602      	mov	r2, r0
 800e984:	460b      	mov	r3, r1
 800e986:	ec51 0b1a 	vmov	r0, r1, d10
 800e98a:	f7f2 f8dd 	bl	8000b48 <__aeabi_dcmpgt>
 800e98e:	2800      	cmp	r0, #0
 800e990:	f47f ae04 	bne.w	800e59c <__ieee754_pow+0x3b4>
 800e994:	4aa4      	ldr	r2, [pc, #656]	; (800ec28 <__ieee754_pow+0xa40>)
 800e996:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e99a:	4293      	cmp	r3, r2
 800e99c:	f340 8108 	ble.w	800ebb0 <__ieee754_pow+0x9c8>
 800e9a0:	151b      	asrs	r3, r3, #20
 800e9a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e9a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e9aa:	fa4a f303 	asr.w	r3, sl, r3
 800e9ae:	445b      	add	r3, fp
 800e9b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e9b4:	4e9d      	ldr	r6, [pc, #628]	; (800ec2c <__ieee754_pow+0xa44>)
 800e9b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e9ba:	4116      	asrs	r6, r2
 800e9bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	ea23 0106 	bic.w	r1, r3, r6
 800e9c6:	f1c2 0214 	rsb	r2, r2, #20
 800e9ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e9ce:	fa4a fa02 	asr.w	sl, sl, r2
 800e9d2:	f1bb 0f00 	cmp.w	fp, #0
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	460b      	mov	r3, r1
 800e9da:	4620      	mov	r0, r4
 800e9dc:	4629      	mov	r1, r5
 800e9de:	bfb8      	it	lt
 800e9e0:	f1ca 0a00 	rsblt	sl, sl, #0
 800e9e4:	f7f1 fc68 	bl	80002b8 <__aeabi_dsub>
 800e9e8:	ec41 0b19 	vmov	d9, r0, r1
 800e9ec:	4642      	mov	r2, r8
 800e9ee:	464b      	mov	r3, r9
 800e9f0:	ec51 0b19 	vmov	r0, r1, d9
 800e9f4:	f7f1 fc62 	bl	80002bc <__adddf3>
 800e9f8:	a37b      	add	r3, pc, #492	; (adr r3, 800ebe8 <__ieee754_pow+0xa00>)
 800e9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fe:	2000      	movs	r0, #0
 800ea00:	4604      	mov	r4, r0
 800ea02:	460d      	mov	r5, r1
 800ea04:	f7f1 fe10 	bl	8000628 <__aeabi_dmul>
 800ea08:	ec53 2b19 	vmov	r2, r3, d9
 800ea0c:	4606      	mov	r6, r0
 800ea0e:	460f      	mov	r7, r1
 800ea10:	4620      	mov	r0, r4
 800ea12:	4629      	mov	r1, r5
 800ea14:	f7f1 fc50 	bl	80002b8 <__aeabi_dsub>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	4640      	mov	r0, r8
 800ea1e:	4649      	mov	r1, r9
 800ea20:	f7f1 fc4a 	bl	80002b8 <__aeabi_dsub>
 800ea24:	a372      	add	r3, pc, #456	; (adr r3, 800ebf0 <__ieee754_pow+0xa08>)
 800ea26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2a:	f7f1 fdfd 	bl	8000628 <__aeabi_dmul>
 800ea2e:	a372      	add	r3, pc, #456	; (adr r3, 800ebf8 <__ieee754_pow+0xa10>)
 800ea30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea34:	4680      	mov	r8, r0
 800ea36:	4689      	mov	r9, r1
 800ea38:	4620      	mov	r0, r4
 800ea3a:	4629      	mov	r1, r5
 800ea3c:	f7f1 fdf4 	bl	8000628 <__aeabi_dmul>
 800ea40:	4602      	mov	r2, r0
 800ea42:	460b      	mov	r3, r1
 800ea44:	4640      	mov	r0, r8
 800ea46:	4649      	mov	r1, r9
 800ea48:	f7f1 fc38 	bl	80002bc <__adddf3>
 800ea4c:	4604      	mov	r4, r0
 800ea4e:	460d      	mov	r5, r1
 800ea50:	4602      	mov	r2, r0
 800ea52:	460b      	mov	r3, r1
 800ea54:	4630      	mov	r0, r6
 800ea56:	4639      	mov	r1, r7
 800ea58:	f7f1 fc30 	bl	80002bc <__adddf3>
 800ea5c:	4632      	mov	r2, r6
 800ea5e:	463b      	mov	r3, r7
 800ea60:	4680      	mov	r8, r0
 800ea62:	4689      	mov	r9, r1
 800ea64:	f7f1 fc28 	bl	80002b8 <__aeabi_dsub>
 800ea68:	4602      	mov	r2, r0
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	4629      	mov	r1, r5
 800ea70:	f7f1 fc22 	bl	80002b8 <__aeabi_dsub>
 800ea74:	4642      	mov	r2, r8
 800ea76:	4606      	mov	r6, r0
 800ea78:	460f      	mov	r7, r1
 800ea7a:	464b      	mov	r3, r9
 800ea7c:	4640      	mov	r0, r8
 800ea7e:	4649      	mov	r1, r9
 800ea80:	f7f1 fdd2 	bl	8000628 <__aeabi_dmul>
 800ea84:	a35e      	add	r3, pc, #376	; (adr r3, 800ec00 <__ieee754_pow+0xa18>)
 800ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	460d      	mov	r5, r1
 800ea8e:	f7f1 fdcb 	bl	8000628 <__aeabi_dmul>
 800ea92:	a35d      	add	r3, pc, #372	; (adr r3, 800ec08 <__ieee754_pow+0xa20>)
 800ea94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea98:	f7f1 fc0e 	bl	80002b8 <__aeabi_dsub>
 800ea9c:	4622      	mov	r2, r4
 800ea9e:	462b      	mov	r3, r5
 800eaa0:	f7f1 fdc2 	bl	8000628 <__aeabi_dmul>
 800eaa4:	a35a      	add	r3, pc, #360	; (adr r3, 800ec10 <__ieee754_pow+0xa28>)
 800eaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaaa:	f7f1 fc07 	bl	80002bc <__adddf3>
 800eaae:	4622      	mov	r2, r4
 800eab0:	462b      	mov	r3, r5
 800eab2:	f7f1 fdb9 	bl	8000628 <__aeabi_dmul>
 800eab6:	a358      	add	r3, pc, #352	; (adr r3, 800ec18 <__ieee754_pow+0xa30>)
 800eab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eabc:	f7f1 fbfc 	bl	80002b8 <__aeabi_dsub>
 800eac0:	4622      	mov	r2, r4
 800eac2:	462b      	mov	r3, r5
 800eac4:	f7f1 fdb0 	bl	8000628 <__aeabi_dmul>
 800eac8:	a355      	add	r3, pc, #340	; (adr r3, 800ec20 <__ieee754_pow+0xa38>)
 800eaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eace:	f7f1 fbf5 	bl	80002bc <__adddf3>
 800ead2:	4622      	mov	r2, r4
 800ead4:	462b      	mov	r3, r5
 800ead6:	f7f1 fda7 	bl	8000628 <__aeabi_dmul>
 800eada:	4602      	mov	r2, r0
 800eadc:	460b      	mov	r3, r1
 800eade:	4640      	mov	r0, r8
 800eae0:	4649      	mov	r1, r9
 800eae2:	f7f1 fbe9 	bl	80002b8 <__aeabi_dsub>
 800eae6:	4604      	mov	r4, r0
 800eae8:	460d      	mov	r5, r1
 800eaea:	4602      	mov	r2, r0
 800eaec:	460b      	mov	r3, r1
 800eaee:	4640      	mov	r0, r8
 800eaf0:	4649      	mov	r1, r9
 800eaf2:	f7f1 fd99 	bl	8000628 <__aeabi_dmul>
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	ec41 0b19 	vmov	d9, r0, r1
 800eafc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eb00:	4620      	mov	r0, r4
 800eb02:	4629      	mov	r1, r5
 800eb04:	f7f1 fbd8 	bl	80002b8 <__aeabi_dsub>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	ec51 0b19 	vmov	r0, r1, d9
 800eb10:	f7f1 feb4 	bl	800087c <__aeabi_ddiv>
 800eb14:	4632      	mov	r2, r6
 800eb16:	4604      	mov	r4, r0
 800eb18:	460d      	mov	r5, r1
 800eb1a:	463b      	mov	r3, r7
 800eb1c:	4640      	mov	r0, r8
 800eb1e:	4649      	mov	r1, r9
 800eb20:	f7f1 fd82 	bl	8000628 <__aeabi_dmul>
 800eb24:	4632      	mov	r2, r6
 800eb26:	463b      	mov	r3, r7
 800eb28:	f7f1 fbc8 	bl	80002bc <__adddf3>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	460b      	mov	r3, r1
 800eb30:	4620      	mov	r0, r4
 800eb32:	4629      	mov	r1, r5
 800eb34:	f7f1 fbc0 	bl	80002b8 <__aeabi_dsub>
 800eb38:	4642      	mov	r2, r8
 800eb3a:	464b      	mov	r3, r9
 800eb3c:	f7f1 fbbc 	bl	80002b8 <__aeabi_dsub>
 800eb40:	460b      	mov	r3, r1
 800eb42:	4602      	mov	r2, r0
 800eb44:	493a      	ldr	r1, [pc, #232]	; (800ec30 <__ieee754_pow+0xa48>)
 800eb46:	2000      	movs	r0, #0
 800eb48:	f7f1 fbb6 	bl	80002b8 <__aeabi_dsub>
 800eb4c:	ec41 0b10 	vmov	d0, r0, r1
 800eb50:	ee10 3a90 	vmov	r3, s1
 800eb54:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800eb58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb5c:	da2b      	bge.n	800ebb6 <__ieee754_pow+0x9ce>
 800eb5e:	4650      	mov	r0, sl
 800eb60:	f001 fa72 	bl	8010048 <scalbn>
 800eb64:	ec51 0b10 	vmov	r0, r1, d0
 800eb68:	ec53 2b18 	vmov	r2, r3, d8
 800eb6c:	f7ff bbed 	b.w	800e34a <__ieee754_pow+0x162>
 800eb70:	4b30      	ldr	r3, [pc, #192]	; (800ec34 <__ieee754_pow+0xa4c>)
 800eb72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800eb76:	429e      	cmp	r6, r3
 800eb78:	f77f af0c 	ble.w	800e994 <__ieee754_pow+0x7ac>
 800eb7c:	4b2e      	ldr	r3, [pc, #184]	; (800ec38 <__ieee754_pow+0xa50>)
 800eb7e:	440b      	add	r3, r1
 800eb80:	4303      	orrs	r3, r0
 800eb82:	d009      	beq.n	800eb98 <__ieee754_pow+0x9b0>
 800eb84:	ec51 0b18 	vmov	r0, r1, d8
 800eb88:	2200      	movs	r2, #0
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	f7f1 ffbe 	bl	8000b0c <__aeabi_dcmplt>
 800eb90:	3800      	subs	r0, #0
 800eb92:	bf18      	it	ne
 800eb94:	2001      	movne	r0, #1
 800eb96:	e447      	b.n	800e428 <__ieee754_pow+0x240>
 800eb98:	4622      	mov	r2, r4
 800eb9a:	462b      	mov	r3, r5
 800eb9c:	f7f1 fb8c 	bl	80002b8 <__aeabi_dsub>
 800eba0:	4642      	mov	r2, r8
 800eba2:	464b      	mov	r3, r9
 800eba4:	f7f1 ffc6 	bl	8000b34 <__aeabi_dcmpge>
 800eba8:	2800      	cmp	r0, #0
 800ebaa:	f43f aef3 	beq.w	800e994 <__ieee754_pow+0x7ac>
 800ebae:	e7e9      	b.n	800eb84 <__ieee754_pow+0x99c>
 800ebb0:	f04f 0a00 	mov.w	sl, #0
 800ebb4:	e71a      	b.n	800e9ec <__ieee754_pow+0x804>
 800ebb6:	ec51 0b10 	vmov	r0, r1, d0
 800ebba:	4619      	mov	r1, r3
 800ebbc:	e7d4      	b.n	800eb68 <__ieee754_pow+0x980>
 800ebbe:	491c      	ldr	r1, [pc, #112]	; (800ec30 <__ieee754_pow+0xa48>)
 800ebc0:	2000      	movs	r0, #0
 800ebc2:	f7ff bb30 	b.w	800e226 <__ieee754_pow+0x3e>
 800ebc6:	2000      	movs	r0, #0
 800ebc8:	2100      	movs	r1, #0
 800ebca:	f7ff bb2c 	b.w	800e226 <__ieee754_pow+0x3e>
 800ebce:	4630      	mov	r0, r6
 800ebd0:	4639      	mov	r1, r7
 800ebd2:	f7ff bb28 	b.w	800e226 <__ieee754_pow+0x3e>
 800ebd6:	9204      	str	r2, [sp, #16]
 800ebd8:	f7ff bb7a 	b.w	800e2d0 <__ieee754_pow+0xe8>
 800ebdc:	2300      	movs	r3, #0
 800ebde:	f7ff bb64 	b.w	800e2aa <__ieee754_pow+0xc2>
 800ebe2:	bf00      	nop
 800ebe4:	f3af 8000 	nop.w
 800ebe8:	00000000 	.word	0x00000000
 800ebec:	3fe62e43 	.word	0x3fe62e43
 800ebf0:	fefa39ef 	.word	0xfefa39ef
 800ebf4:	3fe62e42 	.word	0x3fe62e42
 800ebf8:	0ca86c39 	.word	0x0ca86c39
 800ebfc:	be205c61 	.word	0xbe205c61
 800ec00:	72bea4d0 	.word	0x72bea4d0
 800ec04:	3e663769 	.word	0x3e663769
 800ec08:	c5d26bf1 	.word	0xc5d26bf1
 800ec0c:	3ebbbd41 	.word	0x3ebbbd41
 800ec10:	af25de2c 	.word	0xaf25de2c
 800ec14:	3f11566a 	.word	0x3f11566a
 800ec18:	16bebd93 	.word	0x16bebd93
 800ec1c:	3f66c16c 	.word	0x3f66c16c
 800ec20:	5555553e 	.word	0x5555553e
 800ec24:	3fc55555 	.word	0x3fc55555
 800ec28:	3fe00000 	.word	0x3fe00000
 800ec2c:	000fffff 	.word	0x000fffff
 800ec30:	3ff00000 	.word	0x3ff00000
 800ec34:	4090cbff 	.word	0x4090cbff
 800ec38:	3f6f3400 	.word	0x3f6f3400
 800ec3c:	652b82fe 	.word	0x652b82fe
 800ec40:	3c971547 	.word	0x3c971547
 800ec44:	00000000 	.word	0x00000000

0800ec48 <__ieee754_rem_pio2>:
 800ec48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec4c:	ed2d 8b02 	vpush	{d8}
 800ec50:	ec55 4b10 	vmov	r4, r5, d0
 800ec54:	4bca      	ldr	r3, [pc, #808]	; (800ef80 <__ieee754_rem_pio2+0x338>)
 800ec56:	b08b      	sub	sp, #44	; 0x2c
 800ec58:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ec5c:	4598      	cmp	r8, r3
 800ec5e:	4682      	mov	sl, r0
 800ec60:	9502      	str	r5, [sp, #8]
 800ec62:	dc08      	bgt.n	800ec76 <__ieee754_rem_pio2+0x2e>
 800ec64:	2200      	movs	r2, #0
 800ec66:	2300      	movs	r3, #0
 800ec68:	ed80 0b00 	vstr	d0, [r0]
 800ec6c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ec70:	f04f 0b00 	mov.w	fp, #0
 800ec74:	e028      	b.n	800ecc8 <__ieee754_rem_pio2+0x80>
 800ec76:	4bc3      	ldr	r3, [pc, #780]	; (800ef84 <__ieee754_rem_pio2+0x33c>)
 800ec78:	4598      	cmp	r8, r3
 800ec7a:	dc78      	bgt.n	800ed6e <__ieee754_rem_pio2+0x126>
 800ec7c:	9b02      	ldr	r3, [sp, #8]
 800ec7e:	4ec2      	ldr	r6, [pc, #776]	; (800ef88 <__ieee754_rem_pio2+0x340>)
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	ee10 0a10 	vmov	r0, s0
 800ec86:	a3b0      	add	r3, pc, #704	; (adr r3, 800ef48 <__ieee754_rem_pio2+0x300>)
 800ec88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8c:	4629      	mov	r1, r5
 800ec8e:	dd39      	ble.n	800ed04 <__ieee754_rem_pio2+0xbc>
 800ec90:	f7f1 fb12 	bl	80002b8 <__aeabi_dsub>
 800ec94:	45b0      	cmp	r8, r6
 800ec96:	4604      	mov	r4, r0
 800ec98:	460d      	mov	r5, r1
 800ec9a:	d01b      	beq.n	800ecd4 <__ieee754_rem_pio2+0x8c>
 800ec9c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ef50 <__ieee754_rem_pio2+0x308>)
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	f7f1 fb09 	bl	80002b8 <__aeabi_dsub>
 800eca6:	4602      	mov	r2, r0
 800eca8:	460b      	mov	r3, r1
 800ecaa:	e9ca 2300 	strd	r2, r3, [sl]
 800ecae:	4620      	mov	r0, r4
 800ecb0:	4629      	mov	r1, r5
 800ecb2:	f7f1 fb01 	bl	80002b8 <__aeabi_dsub>
 800ecb6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ef50 <__ieee754_rem_pio2+0x308>)
 800ecb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecbc:	f7f1 fafc 	bl	80002b8 <__aeabi_dsub>
 800ecc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ecc4:	f04f 0b01 	mov.w	fp, #1
 800ecc8:	4658      	mov	r0, fp
 800ecca:	b00b      	add	sp, #44	; 0x2c
 800eccc:	ecbd 8b02 	vpop	{d8}
 800ecd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecd4:	a3a0      	add	r3, pc, #640	; (adr r3, 800ef58 <__ieee754_rem_pio2+0x310>)
 800ecd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecda:	f7f1 faed 	bl	80002b8 <__aeabi_dsub>
 800ecde:	a3a0      	add	r3, pc, #640	; (adr r3, 800ef60 <__ieee754_rem_pio2+0x318>)
 800ece0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece4:	4604      	mov	r4, r0
 800ece6:	460d      	mov	r5, r1
 800ece8:	f7f1 fae6 	bl	80002b8 <__aeabi_dsub>
 800ecec:	4602      	mov	r2, r0
 800ecee:	460b      	mov	r3, r1
 800ecf0:	e9ca 2300 	strd	r2, r3, [sl]
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	4629      	mov	r1, r5
 800ecf8:	f7f1 fade 	bl	80002b8 <__aeabi_dsub>
 800ecfc:	a398      	add	r3, pc, #608	; (adr r3, 800ef60 <__ieee754_rem_pio2+0x318>)
 800ecfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed02:	e7db      	b.n	800ecbc <__ieee754_rem_pio2+0x74>
 800ed04:	f7f1 fada 	bl	80002bc <__adddf3>
 800ed08:	45b0      	cmp	r8, r6
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	460d      	mov	r5, r1
 800ed0e:	d016      	beq.n	800ed3e <__ieee754_rem_pio2+0xf6>
 800ed10:	a38f      	add	r3, pc, #572	; (adr r3, 800ef50 <__ieee754_rem_pio2+0x308>)
 800ed12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed16:	f7f1 fad1 	bl	80002bc <__adddf3>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	e9ca 2300 	strd	r2, r3, [sl]
 800ed22:	4620      	mov	r0, r4
 800ed24:	4629      	mov	r1, r5
 800ed26:	f7f1 fac7 	bl	80002b8 <__aeabi_dsub>
 800ed2a:	a389      	add	r3, pc, #548	; (adr r3, 800ef50 <__ieee754_rem_pio2+0x308>)
 800ed2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed30:	f7f1 fac4 	bl	80002bc <__adddf3>
 800ed34:	f04f 3bff 	mov.w	fp, #4294967295
 800ed38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed3c:	e7c4      	b.n	800ecc8 <__ieee754_rem_pio2+0x80>
 800ed3e:	a386      	add	r3, pc, #536	; (adr r3, 800ef58 <__ieee754_rem_pio2+0x310>)
 800ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed44:	f7f1 faba 	bl	80002bc <__adddf3>
 800ed48:	a385      	add	r3, pc, #532	; (adr r3, 800ef60 <__ieee754_rem_pio2+0x318>)
 800ed4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4e:	4604      	mov	r4, r0
 800ed50:	460d      	mov	r5, r1
 800ed52:	f7f1 fab3 	bl	80002bc <__adddf3>
 800ed56:	4602      	mov	r2, r0
 800ed58:	460b      	mov	r3, r1
 800ed5a:	e9ca 2300 	strd	r2, r3, [sl]
 800ed5e:	4620      	mov	r0, r4
 800ed60:	4629      	mov	r1, r5
 800ed62:	f7f1 faa9 	bl	80002b8 <__aeabi_dsub>
 800ed66:	a37e      	add	r3, pc, #504	; (adr r3, 800ef60 <__ieee754_rem_pio2+0x318>)
 800ed68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6c:	e7e0      	b.n	800ed30 <__ieee754_rem_pio2+0xe8>
 800ed6e:	4b87      	ldr	r3, [pc, #540]	; (800ef8c <__ieee754_rem_pio2+0x344>)
 800ed70:	4598      	cmp	r8, r3
 800ed72:	f300 80d9 	bgt.w	800ef28 <__ieee754_rem_pio2+0x2e0>
 800ed76:	f001 f8d3 	bl	800ff20 <fabs>
 800ed7a:	ec55 4b10 	vmov	r4, r5, d0
 800ed7e:	ee10 0a10 	vmov	r0, s0
 800ed82:	a379      	add	r3, pc, #484	; (adr r3, 800ef68 <__ieee754_rem_pio2+0x320>)
 800ed84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed88:	4629      	mov	r1, r5
 800ed8a:	f7f1 fc4d 	bl	8000628 <__aeabi_dmul>
 800ed8e:	4b80      	ldr	r3, [pc, #512]	; (800ef90 <__ieee754_rem_pio2+0x348>)
 800ed90:	2200      	movs	r2, #0
 800ed92:	f7f1 fa93 	bl	80002bc <__adddf3>
 800ed96:	f7f1 fef7 	bl	8000b88 <__aeabi_d2iz>
 800ed9a:	4683      	mov	fp, r0
 800ed9c:	f7f1 fbda 	bl	8000554 <__aeabi_i2d>
 800eda0:	4602      	mov	r2, r0
 800eda2:	460b      	mov	r3, r1
 800eda4:	ec43 2b18 	vmov	d8, r2, r3
 800eda8:	a367      	add	r3, pc, #412	; (adr r3, 800ef48 <__ieee754_rem_pio2+0x300>)
 800edaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edae:	f7f1 fc3b 	bl	8000628 <__aeabi_dmul>
 800edb2:	4602      	mov	r2, r0
 800edb4:	460b      	mov	r3, r1
 800edb6:	4620      	mov	r0, r4
 800edb8:	4629      	mov	r1, r5
 800edba:	f7f1 fa7d 	bl	80002b8 <__aeabi_dsub>
 800edbe:	a364      	add	r3, pc, #400	; (adr r3, 800ef50 <__ieee754_rem_pio2+0x308>)
 800edc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc4:	4606      	mov	r6, r0
 800edc6:	460f      	mov	r7, r1
 800edc8:	ec51 0b18 	vmov	r0, r1, d8
 800edcc:	f7f1 fc2c 	bl	8000628 <__aeabi_dmul>
 800edd0:	f1bb 0f1f 	cmp.w	fp, #31
 800edd4:	4604      	mov	r4, r0
 800edd6:	460d      	mov	r5, r1
 800edd8:	dc0d      	bgt.n	800edf6 <__ieee754_rem_pio2+0x1ae>
 800edda:	4b6e      	ldr	r3, [pc, #440]	; (800ef94 <__ieee754_rem_pio2+0x34c>)
 800eddc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ede0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ede4:	4543      	cmp	r3, r8
 800ede6:	d006      	beq.n	800edf6 <__ieee754_rem_pio2+0x1ae>
 800ede8:	4622      	mov	r2, r4
 800edea:	462b      	mov	r3, r5
 800edec:	4630      	mov	r0, r6
 800edee:	4639      	mov	r1, r7
 800edf0:	f7f1 fa62 	bl	80002b8 <__aeabi_dsub>
 800edf4:	e00f      	b.n	800ee16 <__ieee754_rem_pio2+0x1ce>
 800edf6:	462b      	mov	r3, r5
 800edf8:	4622      	mov	r2, r4
 800edfa:	4630      	mov	r0, r6
 800edfc:	4639      	mov	r1, r7
 800edfe:	f7f1 fa5b 	bl	80002b8 <__aeabi_dsub>
 800ee02:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ee06:	9303      	str	r3, [sp, #12]
 800ee08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ee0c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ee10:	f1b8 0f10 	cmp.w	r8, #16
 800ee14:	dc02      	bgt.n	800ee1c <__ieee754_rem_pio2+0x1d4>
 800ee16:	e9ca 0100 	strd	r0, r1, [sl]
 800ee1a:	e039      	b.n	800ee90 <__ieee754_rem_pio2+0x248>
 800ee1c:	a34e      	add	r3, pc, #312	; (adr r3, 800ef58 <__ieee754_rem_pio2+0x310>)
 800ee1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee22:	ec51 0b18 	vmov	r0, r1, d8
 800ee26:	f7f1 fbff 	bl	8000628 <__aeabi_dmul>
 800ee2a:	4604      	mov	r4, r0
 800ee2c:	460d      	mov	r5, r1
 800ee2e:	4602      	mov	r2, r0
 800ee30:	460b      	mov	r3, r1
 800ee32:	4630      	mov	r0, r6
 800ee34:	4639      	mov	r1, r7
 800ee36:	f7f1 fa3f 	bl	80002b8 <__aeabi_dsub>
 800ee3a:	4602      	mov	r2, r0
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	4680      	mov	r8, r0
 800ee40:	4689      	mov	r9, r1
 800ee42:	4630      	mov	r0, r6
 800ee44:	4639      	mov	r1, r7
 800ee46:	f7f1 fa37 	bl	80002b8 <__aeabi_dsub>
 800ee4a:	4622      	mov	r2, r4
 800ee4c:	462b      	mov	r3, r5
 800ee4e:	f7f1 fa33 	bl	80002b8 <__aeabi_dsub>
 800ee52:	a343      	add	r3, pc, #268	; (adr r3, 800ef60 <__ieee754_rem_pio2+0x318>)
 800ee54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee58:	4604      	mov	r4, r0
 800ee5a:	460d      	mov	r5, r1
 800ee5c:	ec51 0b18 	vmov	r0, r1, d8
 800ee60:	f7f1 fbe2 	bl	8000628 <__aeabi_dmul>
 800ee64:	4622      	mov	r2, r4
 800ee66:	462b      	mov	r3, r5
 800ee68:	f7f1 fa26 	bl	80002b8 <__aeabi_dsub>
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	460b      	mov	r3, r1
 800ee70:	4604      	mov	r4, r0
 800ee72:	460d      	mov	r5, r1
 800ee74:	4640      	mov	r0, r8
 800ee76:	4649      	mov	r1, r9
 800ee78:	f7f1 fa1e 	bl	80002b8 <__aeabi_dsub>
 800ee7c:	9a03      	ldr	r2, [sp, #12]
 800ee7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ee82:	1ad3      	subs	r3, r2, r3
 800ee84:	2b31      	cmp	r3, #49	; 0x31
 800ee86:	dc24      	bgt.n	800eed2 <__ieee754_rem_pio2+0x28a>
 800ee88:	e9ca 0100 	strd	r0, r1, [sl]
 800ee8c:	4646      	mov	r6, r8
 800ee8e:	464f      	mov	r7, r9
 800ee90:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee94:	4630      	mov	r0, r6
 800ee96:	4642      	mov	r2, r8
 800ee98:	464b      	mov	r3, r9
 800ee9a:	4639      	mov	r1, r7
 800ee9c:	f7f1 fa0c 	bl	80002b8 <__aeabi_dsub>
 800eea0:	462b      	mov	r3, r5
 800eea2:	4622      	mov	r2, r4
 800eea4:	f7f1 fa08 	bl	80002b8 <__aeabi_dsub>
 800eea8:	9b02      	ldr	r3, [sp, #8]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eeb0:	f6bf af0a 	bge.w	800ecc8 <__ieee754_rem_pio2+0x80>
 800eeb4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800eeb8:	f8ca 3004 	str.w	r3, [sl, #4]
 800eebc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eec0:	f8ca 8000 	str.w	r8, [sl]
 800eec4:	f8ca 0008 	str.w	r0, [sl, #8]
 800eec8:	f8ca 300c 	str.w	r3, [sl, #12]
 800eecc:	f1cb 0b00 	rsb	fp, fp, #0
 800eed0:	e6fa      	b.n	800ecc8 <__ieee754_rem_pio2+0x80>
 800eed2:	a327      	add	r3, pc, #156	; (adr r3, 800ef70 <__ieee754_rem_pio2+0x328>)
 800eed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed8:	ec51 0b18 	vmov	r0, r1, d8
 800eedc:	f7f1 fba4 	bl	8000628 <__aeabi_dmul>
 800eee0:	4604      	mov	r4, r0
 800eee2:	460d      	mov	r5, r1
 800eee4:	4602      	mov	r2, r0
 800eee6:	460b      	mov	r3, r1
 800eee8:	4640      	mov	r0, r8
 800eeea:	4649      	mov	r1, r9
 800eeec:	f7f1 f9e4 	bl	80002b8 <__aeabi_dsub>
 800eef0:	4602      	mov	r2, r0
 800eef2:	460b      	mov	r3, r1
 800eef4:	4606      	mov	r6, r0
 800eef6:	460f      	mov	r7, r1
 800eef8:	4640      	mov	r0, r8
 800eefa:	4649      	mov	r1, r9
 800eefc:	f7f1 f9dc 	bl	80002b8 <__aeabi_dsub>
 800ef00:	4622      	mov	r2, r4
 800ef02:	462b      	mov	r3, r5
 800ef04:	f7f1 f9d8 	bl	80002b8 <__aeabi_dsub>
 800ef08:	a31b      	add	r3, pc, #108	; (adr r3, 800ef78 <__ieee754_rem_pio2+0x330>)
 800ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0e:	4604      	mov	r4, r0
 800ef10:	460d      	mov	r5, r1
 800ef12:	ec51 0b18 	vmov	r0, r1, d8
 800ef16:	f7f1 fb87 	bl	8000628 <__aeabi_dmul>
 800ef1a:	4622      	mov	r2, r4
 800ef1c:	462b      	mov	r3, r5
 800ef1e:	f7f1 f9cb 	bl	80002b8 <__aeabi_dsub>
 800ef22:	4604      	mov	r4, r0
 800ef24:	460d      	mov	r5, r1
 800ef26:	e75f      	b.n	800ede8 <__ieee754_rem_pio2+0x1a0>
 800ef28:	4b1b      	ldr	r3, [pc, #108]	; (800ef98 <__ieee754_rem_pio2+0x350>)
 800ef2a:	4598      	cmp	r8, r3
 800ef2c:	dd36      	ble.n	800ef9c <__ieee754_rem_pio2+0x354>
 800ef2e:	ee10 2a10 	vmov	r2, s0
 800ef32:	462b      	mov	r3, r5
 800ef34:	4620      	mov	r0, r4
 800ef36:	4629      	mov	r1, r5
 800ef38:	f7f1 f9be 	bl	80002b8 <__aeabi_dsub>
 800ef3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef40:	e9ca 0100 	strd	r0, r1, [sl]
 800ef44:	e694      	b.n	800ec70 <__ieee754_rem_pio2+0x28>
 800ef46:	bf00      	nop
 800ef48:	54400000 	.word	0x54400000
 800ef4c:	3ff921fb 	.word	0x3ff921fb
 800ef50:	1a626331 	.word	0x1a626331
 800ef54:	3dd0b461 	.word	0x3dd0b461
 800ef58:	1a600000 	.word	0x1a600000
 800ef5c:	3dd0b461 	.word	0x3dd0b461
 800ef60:	2e037073 	.word	0x2e037073
 800ef64:	3ba3198a 	.word	0x3ba3198a
 800ef68:	6dc9c883 	.word	0x6dc9c883
 800ef6c:	3fe45f30 	.word	0x3fe45f30
 800ef70:	2e000000 	.word	0x2e000000
 800ef74:	3ba3198a 	.word	0x3ba3198a
 800ef78:	252049c1 	.word	0x252049c1
 800ef7c:	397b839a 	.word	0x397b839a
 800ef80:	3fe921fb 	.word	0x3fe921fb
 800ef84:	4002d97b 	.word	0x4002d97b
 800ef88:	3ff921fb 	.word	0x3ff921fb
 800ef8c:	413921fb 	.word	0x413921fb
 800ef90:	3fe00000 	.word	0x3fe00000
 800ef94:	080109f0 	.word	0x080109f0
 800ef98:	7fefffff 	.word	0x7fefffff
 800ef9c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800efa0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800efa4:	ee10 0a10 	vmov	r0, s0
 800efa8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800efac:	ee10 6a10 	vmov	r6, s0
 800efb0:	460f      	mov	r7, r1
 800efb2:	f7f1 fde9 	bl	8000b88 <__aeabi_d2iz>
 800efb6:	f7f1 facd 	bl	8000554 <__aeabi_i2d>
 800efba:	4602      	mov	r2, r0
 800efbc:	460b      	mov	r3, r1
 800efbe:	4630      	mov	r0, r6
 800efc0:	4639      	mov	r1, r7
 800efc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800efc6:	f7f1 f977 	bl	80002b8 <__aeabi_dsub>
 800efca:	4b23      	ldr	r3, [pc, #140]	; (800f058 <__ieee754_rem_pio2+0x410>)
 800efcc:	2200      	movs	r2, #0
 800efce:	f7f1 fb2b 	bl	8000628 <__aeabi_dmul>
 800efd2:	460f      	mov	r7, r1
 800efd4:	4606      	mov	r6, r0
 800efd6:	f7f1 fdd7 	bl	8000b88 <__aeabi_d2iz>
 800efda:	f7f1 fabb 	bl	8000554 <__aeabi_i2d>
 800efde:	4602      	mov	r2, r0
 800efe0:	460b      	mov	r3, r1
 800efe2:	4630      	mov	r0, r6
 800efe4:	4639      	mov	r1, r7
 800efe6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800efea:	f7f1 f965 	bl	80002b8 <__aeabi_dsub>
 800efee:	4b1a      	ldr	r3, [pc, #104]	; (800f058 <__ieee754_rem_pio2+0x410>)
 800eff0:	2200      	movs	r2, #0
 800eff2:	f7f1 fb19 	bl	8000628 <__aeabi_dmul>
 800eff6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800effa:	ad04      	add	r5, sp, #16
 800effc:	f04f 0803 	mov.w	r8, #3
 800f000:	46a9      	mov	r9, r5
 800f002:	2600      	movs	r6, #0
 800f004:	2700      	movs	r7, #0
 800f006:	4632      	mov	r2, r6
 800f008:	463b      	mov	r3, r7
 800f00a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f00e:	46c3      	mov	fp, r8
 800f010:	3d08      	subs	r5, #8
 800f012:	f108 38ff 	add.w	r8, r8, #4294967295
 800f016:	f7f1 fd6f 	bl	8000af8 <__aeabi_dcmpeq>
 800f01a:	2800      	cmp	r0, #0
 800f01c:	d1f3      	bne.n	800f006 <__ieee754_rem_pio2+0x3be>
 800f01e:	4b0f      	ldr	r3, [pc, #60]	; (800f05c <__ieee754_rem_pio2+0x414>)
 800f020:	9301      	str	r3, [sp, #4]
 800f022:	2302      	movs	r3, #2
 800f024:	9300      	str	r3, [sp, #0]
 800f026:	4622      	mov	r2, r4
 800f028:	465b      	mov	r3, fp
 800f02a:	4651      	mov	r1, sl
 800f02c:	4648      	mov	r0, r9
 800f02e:	f000 f997 	bl	800f360 <__kernel_rem_pio2>
 800f032:	9b02      	ldr	r3, [sp, #8]
 800f034:	2b00      	cmp	r3, #0
 800f036:	4683      	mov	fp, r0
 800f038:	f6bf ae46 	bge.w	800ecc8 <__ieee754_rem_pio2+0x80>
 800f03c:	e9da 2100 	ldrd	r2, r1, [sl]
 800f040:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f044:	e9ca 2300 	strd	r2, r3, [sl]
 800f048:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f04c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f050:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f054:	e73a      	b.n	800eecc <__ieee754_rem_pio2+0x284>
 800f056:	bf00      	nop
 800f058:	41700000 	.word	0x41700000
 800f05c:	08010a70 	.word	0x08010a70

0800f060 <__ieee754_sqrt>:
 800f060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f064:	ec55 4b10 	vmov	r4, r5, d0
 800f068:	4e55      	ldr	r6, [pc, #340]	; (800f1c0 <__ieee754_sqrt+0x160>)
 800f06a:	43ae      	bics	r6, r5
 800f06c:	ee10 0a10 	vmov	r0, s0
 800f070:	ee10 3a10 	vmov	r3, s0
 800f074:	462a      	mov	r2, r5
 800f076:	4629      	mov	r1, r5
 800f078:	d110      	bne.n	800f09c <__ieee754_sqrt+0x3c>
 800f07a:	ee10 2a10 	vmov	r2, s0
 800f07e:	462b      	mov	r3, r5
 800f080:	f7f1 fad2 	bl	8000628 <__aeabi_dmul>
 800f084:	4602      	mov	r2, r0
 800f086:	460b      	mov	r3, r1
 800f088:	4620      	mov	r0, r4
 800f08a:	4629      	mov	r1, r5
 800f08c:	f7f1 f916 	bl	80002bc <__adddf3>
 800f090:	4604      	mov	r4, r0
 800f092:	460d      	mov	r5, r1
 800f094:	ec45 4b10 	vmov	d0, r4, r5
 800f098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f09c:	2d00      	cmp	r5, #0
 800f09e:	dc10      	bgt.n	800f0c2 <__ieee754_sqrt+0x62>
 800f0a0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f0a4:	4330      	orrs	r0, r6
 800f0a6:	d0f5      	beq.n	800f094 <__ieee754_sqrt+0x34>
 800f0a8:	b15d      	cbz	r5, 800f0c2 <__ieee754_sqrt+0x62>
 800f0aa:	ee10 2a10 	vmov	r2, s0
 800f0ae:	462b      	mov	r3, r5
 800f0b0:	ee10 0a10 	vmov	r0, s0
 800f0b4:	f7f1 f900 	bl	80002b8 <__aeabi_dsub>
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	f7f1 fbde 	bl	800087c <__aeabi_ddiv>
 800f0c0:	e7e6      	b.n	800f090 <__ieee754_sqrt+0x30>
 800f0c2:	1512      	asrs	r2, r2, #20
 800f0c4:	d074      	beq.n	800f1b0 <__ieee754_sqrt+0x150>
 800f0c6:	07d4      	lsls	r4, r2, #31
 800f0c8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f0cc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f0d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f0d4:	bf5e      	ittt	pl
 800f0d6:	0fda      	lsrpl	r2, r3, #31
 800f0d8:	005b      	lslpl	r3, r3, #1
 800f0da:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f0de:	2400      	movs	r4, #0
 800f0e0:	0fda      	lsrs	r2, r3, #31
 800f0e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f0e6:	107f      	asrs	r7, r7, #1
 800f0e8:	005b      	lsls	r3, r3, #1
 800f0ea:	2516      	movs	r5, #22
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f0f2:	1886      	adds	r6, r0, r2
 800f0f4:	428e      	cmp	r6, r1
 800f0f6:	bfde      	ittt	le
 800f0f8:	1b89      	suble	r1, r1, r6
 800f0fa:	18b0      	addle	r0, r6, r2
 800f0fc:	18a4      	addle	r4, r4, r2
 800f0fe:	0049      	lsls	r1, r1, #1
 800f100:	3d01      	subs	r5, #1
 800f102:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f106:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f10a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f10e:	d1f0      	bne.n	800f0f2 <__ieee754_sqrt+0x92>
 800f110:	462a      	mov	r2, r5
 800f112:	f04f 0e20 	mov.w	lr, #32
 800f116:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f11a:	4281      	cmp	r1, r0
 800f11c:	eb06 0c05 	add.w	ip, r6, r5
 800f120:	dc02      	bgt.n	800f128 <__ieee754_sqrt+0xc8>
 800f122:	d113      	bne.n	800f14c <__ieee754_sqrt+0xec>
 800f124:	459c      	cmp	ip, r3
 800f126:	d811      	bhi.n	800f14c <__ieee754_sqrt+0xec>
 800f128:	f1bc 0f00 	cmp.w	ip, #0
 800f12c:	eb0c 0506 	add.w	r5, ip, r6
 800f130:	da43      	bge.n	800f1ba <__ieee754_sqrt+0x15a>
 800f132:	2d00      	cmp	r5, #0
 800f134:	db41      	blt.n	800f1ba <__ieee754_sqrt+0x15a>
 800f136:	f100 0801 	add.w	r8, r0, #1
 800f13a:	1a09      	subs	r1, r1, r0
 800f13c:	459c      	cmp	ip, r3
 800f13e:	bf88      	it	hi
 800f140:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f144:	eba3 030c 	sub.w	r3, r3, ip
 800f148:	4432      	add	r2, r6
 800f14a:	4640      	mov	r0, r8
 800f14c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f150:	f1be 0e01 	subs.w	lr, lr, #1
 800f154:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f158:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f15c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f160:	d1db      	bne.n	800f11a <__ieee754_sqrt+0xba>
 800f162:	430b      	orrs	r3, r1
 800f164:	d006      	beq.n	800f174 <__ieee754_sqrt+0x114>
 800f166:	1c50      	adds	r0, r2, #1
 800f168:	bf13      	iteet	ne
 800f16a:	3201      	addne	r2, #1
 800f16c:	3401      	addeq	r4, #1
 800f16e:	4672      	moveq	r2, lr
 800f170:	f022 0201 	bicne.w	r2, r2, #1
 800f174:	1063      	asrs	r3, r4, #1
 800f176:	0852      	lsrs	r2, r2, #1
 800f178:	07e1      	lsls	r1, r4, #31
 800f17a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f17e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f182:	bf48      	it	mi
 800f184:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f188:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f18c:	4614      	mov	r4, r2
 800f18e:	e781      	b.n	800f094 <__ieee754_sqrt+0x34>
 800f190:	0ad9      	lsrs	r1, r3, #11
 800f192:	3815      	subs	r0, #21
 800f194:	055b      	lsls	r3, r3, #21
 800f196:	2900      	cmp	r1, #0
 800f198:	d0fa      	beq.n	800f190 <__ieee754_sqrt+0x130>
 800f19a:	02cd      	lsls	r5, r1, #11
 800f19c:	d50a      	bpl.n	800f1b4 <__ieee754_sqrt+0x154>
 800f19e:	f1c2 0420 	rsb	r4, r2, #32
 800f1a2:	fa23 f404 	lsr.w	r4, r3, r4
 800f1a6:	1e55      	subs	r5, r2, #1
 800f1a8:	4093      	lsls	r3, r2
 800f1aa:	4321      	orrs	r1, r4
 800f1ac:	1b42      	subs	r2, r0, r5
 800f1ae:	e78a      	b.n	800f0c6 <__ieee754_sqrt+0x66>
 800f1b0:	4610      	mov	r0, r2
 800f1b2:	e7f0      	b.n	800f196 <__ieee754_sqrt+0x136>
 800f1b4:	0049      	lsls	r1, r1, #1
 800f1b6:	3201      	adds	r2, #1
 800f1b8:	e7ef      	b.n	800f19a <__ieee754_sqrt+0x13a>
 800f1ba:	4680      	mov	r8, r0
 800f1bc:	e7bd      	b.n	800f13a <__ieee754_sqrt+0xda>
 800f1be:	bf00      	nop
 800f1c0:	7ff00000 	.word	0x7ff00000

0800f1c4 <__ieee754_sqrtf>:
 800f1c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f1c8:	4770      	bx	lr
 800f1ca:	0000      	movs	r0, r0
 800f1cc:	0000      	movs	r0, r0
	...

0800f1d0 <__kernel_cos>:
 800f1d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d4:	ec57 6b10 	vmov	r6, r7, d0
 800f1d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f1dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f1e0:	ed8d 1b00 	vstr	d1, [sp]
 800f1e4:	da07      	bge.n	800f1f6 <__kernel_cos+0x26>
 800f1e6:	ee10 0a10 	vmov	r0, s0
 800f1ea:	4639      	mov	r1, r7
 800f1ec:	f7f1 fccc 	bl	8000b88 <__aeabi_d2iz>
 800f1f0:	2800      	cmp	r0, #0
 800f1f2:	f000 8088 	beq.w	800f306 <__kernel_cos+0x136>
 800f1f6:	4632      	mov	r2, r6
 800f1f8:	463b      	mov	r3, r7
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	4639      	mov	r1, r7
 800f1fe:	f7f1 fa13 	bl	8000628 <__aeabi_dmul>
 800f202:	4b51      	ldr	r3, [pc, #324]	; (800f348 <__kernel_cos+0x178>)
 800f204:	2200      	movs	r2, #0
 800f206:	4604      	mov	r4, r0
 800f208:	460d      	mov	r5, r1
 800f20a:	f7f1 fa0d 	bl	8000628 <__aeabi_dmul>
 800f20e:	a340      	add	r3, pc, #256	; (adr r3, 800f310 <__kernel_cos+0x140>)
 800f210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f214:	4682      	mov	sl, r0
 800f216:	468b      	mov	fp, r1
 800f218:	4620      	mov	r0, r4
 800f21a:	4629      	mov	r1, r5
 800f21c:	f7f1 fa04 	bl	8000628 <__aeabi_dmul>
 800f220:	a33d      	add	r3, pc, #244	; (adr r3, 800f318 <__kernel_cos+0x148>)
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	f7f1 f849 	bl	80002bc <__adddf3>
 800f22a:	4622      	mov	r2, r4
 800f22c:	462b      	mov	r3, r5
 800f22e:	f7f1 f9fb 	bl	8000628 <__aeabi_dmul>
 800f232:	a33b      	add	r3, pc, #236	; (adr r3, 800f320 <__kernel_cos+0x150>)
 800f234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f238:	f7f1 f83e 	bl	80002b8 <__aeabi_dsub>
 800f23c:	4622      	mov	r2, r4
 800f23e:	462b      	mov	r3, r5
 800f240:	f7f1 f9f2 	bl	8000628 <__aeabi_dmul>
 800f244:	a338      	add	r3, pc, #224	; (adr r3, 800f328 <__kernel_cos+0x158>)
 800f246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24a:	f7f1 f837 	bl	80002bc <__adddf3>
 800f24e:	4622      	mov	r2, r4
 800f250:	462b      	mov	r3, r5
 800f252:	f7f1 f9e9 	bl	8000628 <__aeabi_dmul>
 800f256:	a336      	add	r3, pc, #216	; (adr r3, 800f330 <__kernel_cos+0x160>)
 800f258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25c:	f7f1 f82c 	bl	80002b8 <__aeabi_dsub>
 800f260:	4622      	mov	r2, r4
 800f262:	462b      	mov	r3, r5
 800f264:	f7f1 f9e0 	bl	8000628 <__aeabi_dmul>
 800f268:	a333      	add	r3, pc, #204	; (adr r3, 800f338 <__kernel_cos+0x168>)
 800f26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26e:	f7f1 f825 	bl	80002bc <__adddf3>
 800f272:	4622      	mov	r2, r4
 800f274:	462b      	mov	r3, r5
 800f276:	f7f1 f9d7 	bl	8000628 <__aeabi_dmul>
 800f27a:	4622      	mov	r2, r4
 800f27c:	462b      	mov	r3, r5
 800f27e:	f7f1 f9d3 	bl	8000628 <__aeabi_dmul>
 800f282:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f286:	4604      	mov	r4, r0
 800f288:	460d      	mov	r5, r1
 800f28a:	4630      	mov	r0, r6
 800f28c:	4639      	mov	r1, r7
 800f28e:	f7f1 f9cb 	bl	8000628 <__aeabi_dmul>
 800f292:	460b      	mov	r3, r1
 800f294:	4602      	mov	r2, r0
 800f296:	4629      	mov	r1, r5
 800f298:	4620      	mov	r0, r4
 800f29a:	f7f1 f80d 	bl	80002b8 <__aeabi_dsub>
 800f29e:	4b2b      	ldr	r3, [pc, #172]	; (800f34c <__kernel_cos+0x17c>)
 800f2a0:	4598      	cmp	r8, r3
 800f2a2:	4606      	mov	r6, r0
 800f2a4:	460f      	mov	r7, r1
 800f2a6:	dc10      	bgt.n	800f2ca <__kernel_cos+0xfa>
 800f2a8:	4602      	mov	r2, r0
 800f2aa:	460b      	mov	r3, r1
 800f2ac:	4650      	mov	r0, sl
 800f2ae:	4659      	mov	r1, fp
 800f2b0:	f7f1 f802 	bl	80002b8 <__aeabi_dsub>
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	4926      	ldr	r1, [pc, #152]	; (800f350 <__kernel_cos+0x180>)
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	2000      	movs	r0, #0
 800f2bc:	f7f0 fffc 	bl	80002b8 <__aeabi_dsub>
 800f2c0:	ec41 0b10 	vmov	d0, r0, r1
 800f2c4:	b003      	add	sp, #12
 800f2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ca:	4b22      	ldr	r3, [pc, #136]	; (800f354 <__kernel_cos+0x184>)
 800f2cc:	4920      	ldr	r1, [pc, #128]	; (800f350 <__kernel_cos+0x180>)
 800f2ce:	4598      	cmp	r8, r3
 800f2d0:	bfcc      	ite	gt
 800f2d2:	4d21      	ldrgt	r5, [pc, #132]	; (800f358 <__kernel_cos+0x188>)
 800f2d4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f2d8:	2400      	movs	r4, #0
 800f2da:	4622      	mov	r2, r4
 800f2dc:	462b      	mov	r3, r5
 800f2de:	2000      	movs	r0, #0
 800f2e0:	f7f0 ffea 	bl	80002b8 <__aeabi_dsub>
 800f2e4:	4622      	mov	r2, r4
 800f2e6:	4680      	mov	r8, r0
 800f2e8:	4689      	mov	r9, r1
 800f2ea:	462b      	mov	r3, r5
 800f2ec:	4650      	mov	r0, sl
 800f2ee:	4659      	mov	r1, fp
 800f2f0:	f7f0 ffe2 	bl	80002b8 <__aeabi_dsub>
 800f2f4:	4632      	mov	r2, r6
 800f2f6:	463b      	mov	r3, r7
 800f2f8:	f7f0 ffde 	bl	80002b8 <__aeabi_dsub>
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	460b      	mov	r3, r1
 800f300:	4640      	mov	r0, r8
 800f302:	4649      	mov	r1, r9
 800f304:	e7da      	b.n	800f2bc <__kernel_cos+0xec>
 800f306:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f340 <__kernel_cos+0x170>
 800f30a:	e7db      	b.n	800f2c4 <__kernel_cos+0xf4>
 800f30c:	f3af 8000 	nop.w
 800f310:	be8838d4 	.word	0xbe8838d4
 800f314:	bda8fae9 	.word	0xbda8fae9
 800f318:	bdb4b1c4 	.word	0xbdb4b1c4
 800f31c:	3e21ee9e 	.word	0x3e21ee9e
 800f320:	809c52ad 	.word	0x809c52ad
 800f324:	3e927e4f 	.word	0x3e927e4f
 800f328:	19cb1590 	.word	0x19cb1590
 800f32c:	3efa01a0 	.word	0x3efa01a0
 800f330:	16c15177 	.word	0x16c15177
 800f334:	3f56c16c 	.word	0x3f56c16c
 800f338:	5555554c 	.word	0x5555554c
 800f33c:	3fa55555 	.word	0x3fa55555
 800f340:	00000000 	.word	0x00000000
 800f344:	3ff00000 	.word	0x3ff00000
 800f348:	3fe00000 	.word	0x3fe00000
 800f34c:	3fd33332 	.word	0x3fd33332
 800f350:	3ff00000 	.word	0x3ff00000
 800f354:	3fe90000 	.word	0x3fe90000
 800f358:	3fd20000 	.word	0x3fd20000
 800f35c:	00000000 	.word	0x00000000

0800f360 <__kernel_rem_pio2>:
 800f360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f364:	ed2d 8b02 	vpush	{d8}
 800f368:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f36c:	f112 0f14 	cmn.w	r2, #20
 800f370:	9308      	str	r3, [sp, #32]
 800f372:	9101      	str	r1, [sp, #4]
 800f374:	4bc4      	ldr	r3, [pc, #784]	; (800f688 <__kernel_rem_pio2+0x328>)
 800f376:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f378:	900b      	str	r0, [sp, #44]	; 0x2c
 800f37a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f37e:	9302      	str	r3, [sp, #8]
 800f380:	9b08      	ldr	r3, [sp, #32]
 800f382:	f103 33ff 	add.w	r3, r3, #4294967295
 800f386:	bfa8      	it	ge
 800f388:	1ed4      	subge	r4, r2, #3
 800f38a:	9306      	str	r3, [sp, #24]
 800f38c:	bfb2      	itee	lt
 800f38e:	2400      	movlt	r4, #0
 800f390:	2318      	movge	r3, #24
 800f392:	fb94 f4f3 	sdivge	r4, r4, r3
 800f396:	f06f 0317 	mvn.w	r3, #23
 800f39a:	fb04 3303 	mla	r3, r4, r3, r3
 800f39e:	eb03 0a02 	add.w	sl, r3, r2
 800f3a2:	9b02      	ldr	r3, [sp, #8]
 800f3a4:	9a06      	ldr	r2, [sp, #24]
 800f3a6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800f678 <__kernel_rem_pio2+0x318>
 800f3aa:	eb03 0802 	add.w	r8, r3, r2
 800f3ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f3b0:	1aa7      	subs	r7, r4, r2
 800f3b2:	ae22      	add	r6, sp, #136	; 0x88
 800f3b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f3b8:	2500      	movs	r5, #0
 800f3ba:	4545      	cmp	r5, r8
 800f3bc:	dd13      	ble.n	800f3e6 <__kernel_rem_pio2+0x86>
 800f3be:	9b08      	ldr	r3, [sp, #32]
 800f3c0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800f678 <__kernel_rem_pio2+0x318>
 800f3c4:	aa22      	add	r2, sp, #136	; 0x88
 800f3c6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f3ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f3ce:	f04f 0800 	mov.w	r8, #0
 800f3d2:	9b02      	ldr	r3, [sp, #8]
 800f3d4:	4598      	cmp	r8, r3
 800f3d6:	dc2f      	bgt.n	800f438 <__kernel_rem_pio2+0xd8>
 800f3d8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f3dc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f3e0:	462f      	mov	r7, r5
 800f3e2:	2600      	movs	r6, #0
 800f3e4:	e01b      	b.n	800f41e <__kernel_rem_pio2+0xbe>
 800f3e6:	42ef      	cmn	r7, r5
 800f3e8:	d407      	bmi.n	800f3fa <__kernel_rem_pio2+0x9a>
 800f3ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f3ee:	f7f1 f8b1 	bl	8000554 <__aeabi_i2d>
 800f3f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f3f6:	3501      	adds	r5, #1
 800f3f8:	e7df      	b.n	800f3ba <__kernel_rem_pio2+0x5a>
 800f3fa:	ec51 0b18 	vmov	r0, r1, d8
 800f3fe:	e7f8      	b.n	800f3f2 <__kernel_rem_pio2+0x92>
 800f400:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f404:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f408:	f7f1 f90e 	bl	8000628 <__aeabi_dmul>
 800f40c:	4602      	mov	r2, r0
 800f40e:	460b      	mov	r3, r1
 800f410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f414:	f7f0 ff52 	bl	80002bc <__adddf3>
 800f418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f41c:	3601      	adds	r6, #1
 800f41e:	9b06      	ldr	r3, [sp, #24]
 800f420:	429e      	cmp	r6, r3
 800f422:	f1a7 0708 	sub.w	r7, r7, #8
 800f426:	ddeb      	ble.n	800f400 <__kernel_rem_pio2+0xa0>
 800f428:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f42c:	f108 0801 	add.w	r8, r8, #1
 800f430:	ecab 7b02 	vstmia	fp!, {d7}
 800f434:	3508      	adds	r5, #8
 800f436:	e7cc      	b.n	800f3d2 <__kernel_rem_pio2+0x72>
 800f438:	9b02      	ldr	r3, [sp, #8]
 800f43a:	aa0e      	add	r2, sp, #56	; 0x38
 800f43c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f440:	930d      	str	r3, [sp, #52]	; 0x34
 800f442:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f444:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f448:	9c02      	ldr	r4, [sp, #8]
 800f44a:	930c      	str	r3, [sp, #48]	; 0x30
 800f44c:	00e3      	lsls	r3, r4, #3
 800f44e:	930a      	str	r3, [sp, #40]	; 0x28
 800f450:	ab9a      	add	r3, sp, #616	; 0x268
 800f452:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f456:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f45a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f45e:	ab72      	add	r3, sp, #456	; 0x1c8
 800f460:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f464:	46c3      	mov	fp, r8
 800f466:	46a1      	mov	r9, r4
 800f468:	f1b9 0f00 	cmp.w	r9, #0
 800f46c:	f1a5 0508 	sub.w	r5, r5, #8
 800f470:	dc77      	bgt.n	800f562 <__kernel_rem_pio2+0x202>
 800f472:	ec47 6b10 	vmov	d0, r6, r7
 800f476:	4650      	mov	r0, sl
 800f478:	f000 fde6 	bl	8010048 <scalbn>
 800f47c:	ec57 6b10 	vmov	r6, r7, d0
 800f480:	2200      	movs	r2, #0
 800f482:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f486:	ee10 0a10 	vmov	r0, s0
 800f48a:	4639      	mov	r1, r7
 800f48c:	f7f1 f8cc 	bl	8000628 <__aeabi_dmul>
 800f490:	ec41 0b10 	vmov	d0, r0, r1
 800f494:	f000 fd58 	bl	800ff48 <floor>
 800f498:	4b7c      	ldr	r3, [pc, #496]	; (800f68c <__kernel_rem_pio2+0x32c>)
 800f49a:	ec51 0b10 	vmov	r0, r1, d0
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f7f1 f8c2 	bl	8000628 <__aeabi_dmul>
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	460b      	mov	r3, r1
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	4639      	mov	r1, r7
 800f4ac:	f7f0 ff04 	bl	80002b8 <__aeabi_dsub>
 800f4b0:	460f      	mov	r7, r1
 800f4b2:	4606      	mov	r6, r0
 800f4b4:	f7f1 fb68 	bl	8000b88 <__aeabi_d2iz>
 800f4b8:	9004      	str	r0, [sp, #16]
 800f4ba:	f7f1 f84b 	bl	8000554 <__aeabi_i2d>
 800f4be:	4602      	mov	r2, r0
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	4630      	mov	r0, r6
 800f4c4:	4639      	mov	r1, r7
 800f4c6:	f7f0 fef7 	bl	80002b8 <__aeabi_dsub>
 800f4ca:	f1ba 0f00 	cmp.w	sl, #0
 800f4ce:	4606      	mov	r6, r0
 800f4d0:	460f      	mov	r7, r1
 800f4d2:	dd6d      	ble.n	800f5b0 <__kernel_rem_pio2+0x250>
 800f4d4:	1e62      	subs	r2, r4, #1
 800f4d6:	ab0e      	add	r3, sp, #56	; 0x38
 800f4d8:	9d04      	ldr	r5, [sp, #16]
 800f4da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f4de:	f1ca 0118 	rsb	r1, sl, #24
 800f4e2:	fa40 f301 	asr.w	r3, r0, r1
 800f4e6:	441d      	add	r5, r3
 800f4e8:	408b      	lsls	r3, r1
 800f4ea:	1ac0      	subs	r0, r0, r3
 800f4ec:	ab0e      	add	r3, sp, #56	; 0x38
 800f4ee:	9504      	str	r5, [sp, #16]
 800f4f0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f4f4:	f1ca 0317 	rsb	r3, sl, #23
 800f4f8:	fa40 fb03 	asr.w	fp, r0, r3
 800f4fc:	f1bb 0f00 	cmp.w	fp, #0
 800f500:	dd65      	ble.n	800f5ce <__kernel_rem_pio2+0x26e>
 800f502:	9b04      	ldr	r3, [sp, #16]
 800f504:	2200      	movs	r2, #0
 800f506:	3301      	adds	r3, #1
 800f508:	9304      	str	r3, [sp, #16]
 800f50a:	4615      	mov	r5, r2
 800f50c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f510:	4294      	cmp	r4, r2
 800f512:	f300 809c 	bgt.w	800f64e <__kernel_rem_pio2+0x2ee>
 800f516:	f1ba 0f00 	cmp.w	sl, #0
 800f51a:	dd07      	ble.n	800f52c <__kernel_rem_pio2+0x1cc>
 800f51c:	f1ba 0f01 	cmp.w	sl, #1
 800f520:	f000 80c0 	beq.w	800f6a4 <__kernel_rem_pio2+0x344>
 800f524:	f1ba 0f02 	cmp.w	sl, #2
 800f528:	f000 80c6 	beq.w	800f6b8 <__kernel_rem_pio2+0x358>
 800f52c:	f1bb 0f02 	cmp.w	fp, #2
 800f530:	d14d      	bne.n	800f5ce <__kernel_rem_pio2+0x26e>
 800f532:	4632      	mov	r2, r6
 800f534:	463b      	mov	r3, r7
 800f536:	4956      	ldr	r1, [pc, #344]	; (800f690 <__kernel_rem_pio2+0x330>)
 800f538:	2000      	movs	r0, #0
 800f53a:	f7f0 febd 	bl	80002b8 <__aeabi_dsub>
 800f53e:	4606      	mov	r6, r0
 800f540:	460f      	mov	r7, r1
 800f542:	2d00      	cmp	r5, #0
 800f544:	d043      	beq.n	800f5ce <__kernel_rem_pio2+0x26e>
 800f546:	4650      	mov	r0, sl
 800f548:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800f680 <__kernel_rem_pio2+0x320>
 800f54c:	f000 fd7c 	bl	8010048 <scalbn>
 800f550:	4630      	mov	r0, r6
 800f552:	4639      	mov	r1, r7
 800f554:	ec53 2b10 	vmov	r2, r3, d0
 800f558:	f7f0 feae 	bl	80002b8 <__aeabi_dsub>
 800f55c:	4606      	mov	r6, r0
 800f55e:	460f      	mov	r7, r1
 800f560:	e035      	b.n	800f5ce <__kernel_rem_pio2+0x26e>
 800f562:	4b4c      	ldr	r3, [pc, #304]	; (800f694 <__kernel_rem_pio2+0x334>)
 800f564:	2200      	movs	r2, #0
 800f566:	4630      	mov	r0, r6
 800f568:	4639      	mov	r1, r7
 800f56a:	f7f1 f85d 	bl	8000628 <__aeabi_dmul>
 800f56e:	f7f1 fb0b 	bl	8000b88 <__aeabi_d2iz>
 800f572:	f7f0 ffef 	bl	8000554 <__aeabi_i2d>
 800f576:	4602      	mov	r2, r0
 800f578:	460b      	mov	r3, r1
 800f57a:	ec43 2b18 	vmov	d8, r2, r3
 800f57e:	4b46      	ldr	r3, [pc, #280]	; (800f698 <__kernel_rem_pio2+0x338>)
 800f580:	2200      	movs	r2, #0
 800f582:	f7f1 f851 	bl	8000628 <__aeabi_dmul>
 800f586:	4602      	mov	r2, r0
 800f588:	460b      	mov	r3, r1
 800f58a:	4630      	mov	r0, r6
 800f58c:	4639      	mov	r1, r7
 800f58e:	f7f0 fe93 	bl	80002b8 <__aeabi_dsub>
 800f592:	f7f1 faf9 	bl	8000b88 <__aeabi_d2iz>
 800f596:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f59a:	f84b 0b04 	str.w	r0, [fp], #4
 800f59e:	ec51 0b18 	vmov	r0, r1, d8
 800f5a2:	f7f0 fe8b 	bl	80002bc <__adddf3>
 800f5a6:	f109 39ff 	add.w	r9, r9, #4294967295
 800f5aa:	4606      	mov	r6, r0
 800f5ac:	460f      	mov	r7, r1
 800f5ae:	e75b      	b.n	800f468 <__kernel_rem_pio2+0x108>
 800f5b0:	d106      	bne.n	800f5c0 <__kernel_rem_pio2+0x260>
 800f5b2:	1e63      	subs	r3, r4, #1
 800f5b4:	aa0e      	add	r2, sp, #56	; 0x38
 800f5b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f5ba:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f5be:	e79d      	b.n	800f4fc <__kernel_rem_pio2+0x19c>
 800f5c0:	4b36      	ldr	r3, [pc, #216]	; (800f69c <__kernel_rem_pio2+0x33c>)
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	f7f1 fab6 	bl	8000b34 <__aeabi_dcmpge>
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	d13d      	bne.n	800f648 <__kernel_rem_pio2+0x2e8>
 800f5cc:	4683      	mov	fp, r0
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	4639      	mov	r1, r7
 800f5d6:	f7f1 fa8f 	bl	8000af8 <__aeabi_dcmpeq>
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	f000 80c0 	beq.w	800f760 <__kernel_rem_pio2+0x400>
 800f5e0:	1e65      	subs	r5, r4, #1
 800f5e2:	462b      	mov	r3, r5
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	9902      	ldr	r1, [sp, #8]
 800f5e8:	428b      	cmp	r3, r1
 800f5ea:	da6c      	bge.n	800f6c6 <__kernel_rem_pio2+0x366>
 800f5ec:	2a00      	cmp	r2, #0
 800f5ee:	f000 8089 	beq.w	800f704 <__kernel_rem_pio2+0x3a4>
 800f5f2:	ab0e      	add	r3, sp, #56	; 0x38
 800f5f4:	f1aa 0a18 	sub.w	sl, sl, #24
 800f5f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	f000 80ad 	beq.w	800f75c <__kernel_rem_pio2+0x3fc>
 800f602:	4650      	mov	r0, sl
 800f604:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800f680 <__kernel_rem_pio2+0x320>
 800f608:	f000 fd1e 	bl	8010048 <scalbn>
 800f60c:	ab9a      	add	r3, sp, #616	; 0x268
 800f60e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f612:	ec57 6b10 	vmov	r6, r7, d0
 800f616:	00ec      	lsls	r4, r5, #3
 800f618:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f61c:	46aa      	mov	sl, r5
 800f61e:	f1ba 0f00 	cmp.w	sl, #0
 800f622:	f280 80d6 	bge.w	800f7d2 <__kernel_rem_pio2+0x472>
 800f626:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800f678 <__kernel_rem_pio2+0x318>
 800f62a:	462e      	mov	r6, r5
 800f62c:	2e00      	cmp	r6, #0
 800f62e:	f2c0 8104 	blt.w	800f83a <__kernel_rem_pio2+0x4da>
 800f632:	ab72      	add	r3, sp, #456	; 0x1c8
 800f634:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f638:	f8df a064 	ldr.w	sl, [pc, #100]	; 800f6a0 <__kernel_rem_pio2+0x340>
 800f63c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f640:	f04f 0800 	mov.w	r8, #0
 800f644:	1baf      	subs	r7, r5, r6
 800f646:	e0ea      	b.n	800f81e <__kernel_rem_pio2+0x4be>
 800f648:	f04f 0b02 	mov.w	fp, #2
 800f64c:	e759      	b.n	800f502 <__kernel_rem_pio2+0x1a2>
 800f64e:	f8d8 3000 	ldr.w	r3, [r8]
 800f652:	b955      	cbnz	r5, 800f66a <__kernel_rem_pio2+0x30a>
 800f654:	b123      	cbz	r3, 800f660 <__kernel_rem_pio2+0x300>
 800f656:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f65a:	f8c8 3000 	str.w	r3, [r8]
 800f65e:	2301      	movs	r3, #1
 800f660:	3201      	adds	r2, #1
 800f662:	f108 0804 	add.w	r8, r8, #4
 800f666:	461d      	mov	r5, r3
 800f668:	e752      	b.n	800f510 <__kernel_rem_pio2+0x1b0>
 800f66a:	1acb      	subs	r3, r1, r3
 800f66c:	f8c8 3000 	str.w	r3, [r8]
 800f670:	462b      	mov	r3, r5
 800f672:	e7f5      	b.n	800f660 <__kernel_rem_pio2+0x300>
 800f674:	f3af 8000 	nop.w
	...
 800f684:	3ff00000 	.word	0x3ff00000
 800f688:	08010bb8 	.word	0x08010bb8
 800f68c:	40200000 	.word	0x40200000
 800f690:	3ff00000 	.word	0x3ff00000
 800f694:	3e700000 	.word	0x3e700000
 800f698:	41700000 	.word	0x41700000
 800f69c:	3fe00000 	.word	0x3fe00000
 800f6a0:	08010b78 	.word	0x08010b78
 800f6a4:	1e62      	subs	r2, r4, #1
 800f6a6:	ab0e      	add	r3, sp, #56	; 0x38
 800f6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f6b0:	a90e      	add	r1, sp, #56	; 0x38
 800f6b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f6b6:	e739      	b.n	800f52c <__kernel_rem_pio2+0x1cc>
 800f6b8:	1e62      	subs	r2, r4, #1
 800f6ba:	ab0e      	add	r3, sp, #56	; 0x38
 800f6bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f6c4:	e7f4      	b.n	800f6b0 <__kernel_rem_pio2+0x350>
 800f6c6:	a90e      	add	r1, sp, #56	; 0x38
 800f6c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f6cc:	3b01      	subs	r3, #1
 800f6ce:	430a      	orrs	r2, r1
 800f6d0:	e789      	b.n	800f5e6 <__kernel_rem_pio2+0x286>
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f6d8:	2900      	cmp	r1, #0
 800f6da:	d0fa      	beq.n	800f6d2 <__kernel_rem_pio2+0x372>
 800f6dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6de:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800f6e2:	446a      	add	r2, sp
 800f6e4:	3a98      	subs	r2, #152	; 0x98
 800f6e6:	920a      	str	r2, [sp, #40]	; 0x28
 800f6e8:	9a08      	ldr	r2, [sp, #32]
 800f6ea:	18e3      	adds	r3, r4, r3
 800f6ec:	18a5      	adds	r5, r4, r2
 800f6ee:	aa22      	add	r2, sp, #136	; 0x88
 800f6f0:	f104 0801 	add.w	r8, r4, #1
 800f6f4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f6f8:	9304      	str	r3, [sp, #16]
 800f6fa:	9b04      	ldr	r3, [sp, #16]
 800f6fc:	4543      	cmp	r3, r8
 800f6fe:	da04      	bge.n	800f70a <__kernel_rem_pio2+0x3aa>
 800f700:	461c      	mov	r4, r3
 800f702:	e6a3      	b.n	800f44c <__kernel_rem_pio2+0xec>
 800f704:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f706:	2301      	movs	r3, #1
 800f708:	e7e4      	b.n	800f6d4 <__kernel_rem_pio2+0x374>
 800f70a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f70c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f710:	f7f0 ff20 	bl	8000554 <__aeabi_i2d>
 800f714:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f71a:	46ab      	mov	fp, r5
 800f71c:	461c      	mov	r4, r3
 800f71e:	f04f 0900 	mov.w	r9, #0
 800f722:	2600      	movs	r6, #0
 800f724:	2700      	movs	r7, #0
 800f726:	9b06      	ldr	r3, [sp, #24]
 800f728:	4599      	cmp	r9, r3
 800f72a:	dd06      	ble.n	800f73a <__kernel_rem_pio2+0x3da>
 800f72c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f72e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f732:	f108 0801 	add.w	r8, r8, #1
 800f736:	930a      	str	r3, [sp, #40]	; 0x28
 800f738:	e7df      	b.n	800f6fa <__kernel_rem_pio2+0x39a>
 800f73a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f73e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f742:	f7f0 ff71 	bl	8000628 <__aeabi_dmul>
 800f746:	4602      	mov	r2, r0
 800f748:	460b      	mov	r3, r1
 800f74a:	4630      	mov	r0, r6
 800f74c:	4639      	mov	r1, r7
 800f74e:	f7f0 fdb5 	bl	80002bc <__adddf3>
 800f752:	f109 0901 	add.w	r9, r9, #1
 800f756:	4606      	mov	r6, r0
 800f758:	460f      	mov	r7, r1
 800f75a:	e7e4      	b.n	800f726 <__kernel_rem_pio2+0x3c6>
 800f75c:	3d01      	subs	r5, #1
 800f75e:	e748      	b.n	800f5f2 <__kernel_rem_pio2+0x292>
 800f760:	ec47 6b10 	vmov	d0, r6, r7
 800f764:	f1ca 0000 	rsb	r0, sl, #0
 800f768:	f000 fc6e 	bl	8010048 <scalbn>
 800f76c:	ec57 6b10 	vmov	r6, r7, d0
 800f770:	4ba0      	ldr	r3, [pc, #640]	; (800f9f4 <__kernel_rem_pio2+0x694>)
 800f772:	ee10 0a10 	vmov	r0, s0
 800f776:	2200      	movs	r2, #0
 800f778:	4639      	mov	r1, r7
 800f77a:	f7f1 f9db 	bl	8000b34 <__aeabi_dcmpge>
 800f77e:	b1f8      	cbz	r0, 800f7c0 <__kernel_rem_pio2+0x460>
 800f780:	4b9d      	ldr	r3, [pc, #628]	; (800f9f8 <__kernel_rem_pio2+0x698>)
 800f782:	2200      	movs	r2, #0
 800f784:	4630      	mov	r0, r6
 800f786:	4639      	mov	r1, r7
 800f788:	f7f0 ff4e 	bl	8000628 <__aeabi_dmul>
 800f78c:	f7f1 f9fc 	bl	8000b88 <__aeabi_d2iz>
 800f790:	4680      	mov	r8, r0
 800f792:	f7f0 fedf 	bl	8000554 <__aeabi_i2d>
 800f796:	4b97      	ldr	r3, [pc, #604]	; (800f9f4 <__kernel_rem_pio2+0x694>)
 800f798:	2200      	movs	r2, #0
 800f79a:	f7f0 ff45 	bl	8000628 <__aeabi_dmul>
 800f79e:	460b      	mov	r3, r1
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	4639      	mov	r1, r7
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	f7f0 fd87 	bl	80002b8 <__aeabi_dsub>
 800f7aa:	f7f1 f9ed 	bl	8000b88 <__aeabi_d2iz>
 800f7ae:	1c65      	adds	r5, r4, #1
 800f7b0:	ab0e      	add	r3, sp, #56	; 0x38
 800f7b2:	f10a 0a18 	add.w	sl, sl, #24
 800f7b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f7ba:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f7be:	e720      	b.n	800f602 <__kernel_rem_pio2+0x2a2>
 800f7c0:	4630      	mov	r0, r6
 800f7c2:	4639      	mov	r1, r7
 800f7c4:	f7f1 f9e0 	bl	8000b88 <__aeabi_d2iz>
 800f7c8:	ab0e      	add	r3, sp, #56	; 0x38
 800f7ca:	4625      	mov	r5, r4
 800f7cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f7d0:	e717      	b.n	800f602 <__kernel_rem_pio2+0x2a2>
 800f7d2:	ab0e      	add	r3, sp, #56	; 0x38
 800f7d4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f7d8:	f7f0 febc 	bl	8000554 <__aeabi_i2d>
 800f7dc:	4632      	mov	r2, r6
 800f7de:	463b      	mov	r3, r7
 800f7e0:	f7f0 ff22 	bl	8000628 <__aeabi_dmul>
 800f7e4:	4b84      	ldr	r3, [pc, #528]	; (800f9f8 <__kernel_rem_pio2+0x698>)
 800f7e6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	4630      	mov	r0, r6
 800f7ee:	4639      	mov	r1, r7
 800f7f0:	f7f0 ff1a 	bl	8000628 <__aeabi_dmul>
 800f7f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7f8:	4606      	mov	r6, r0
 800f7fa:	460f      	mov	r7, r1
 800f7fc:	e70f      	b.n	800f61e <__kernel_rem_pio2+0x2be>
 800f7fe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f802:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f806:	f7f0 ff0f 	bl	8000628 <__aeabi_dmul>
 800f80a:	4602      	mov	r2, r0
 800f80c:	460b      	mov	r3, r1
 800f80e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f812:	f7f0 fd53 	bl	80002bc <__adddf3>
 800f816:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f81a:	f108 0801 	add.w	r8, r8, #1
 800f81e:	9b02      	ldr	r3, [sp, #8]
 800f820:	4598      	cmp	r8, r3
 800f822:	dc01      	bgt.n	800f828 <__kernel_rem_pio2+0x4c8>
 800f824:	45b8      	cmp	r8, r7
 800f826:	ddea      	ble.n	800f7fe <__kernel_rem_pio2+0x49e>
 800f828:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f82c:	ab4a      	add	r3, sp, #296	; 0x128
 800f82e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f832:	ed87 7b00 	vstr	d7, [r7]
 800f836:	3e01      	subs	r6, #1
 800f838:	e6f8      	b.n	800f62c <__kernel_rem_pio2+0x2cc>
 800f83a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f83c:	2b02      	cmp	r3, #2
 800f83e:	dc0b      	bgt.n	800f858 <__kernel_rem_pio2+0x4f8>
 800f840:	2b00      	cmp	r3, #0
 800f842:	dc35      	bgt.n	800f8b0 <__kernel_rem_pio2+0x550>
 800f844:	d059      	beq.n	800f8fa <__kernel_rem_pio2+0x59a>
 800f846:	9b04      	ldr	r3, [sp, #16]
 800f848:	f003 0007 	and.w	r0, r3, #7
 800f84c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f850:	ecbd 8b02 	vpop	{d8}
 800f854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f858:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f85a:	2b03      	cmp	r3, #3
 800f85c:	d1f3      	bne.n	800f846 <__kernel_rem_pio2+0x4e6>
 800f85e:	ab4a      	add	r3, sp, #296	; 0x128
 800f860:	4423      	add	r3, r4
 800f862:	9306      	str	r3, [sp, #24]
 800f864:	461c      	mov	r4, r3
 800f866:	469a      	mov	sl, r3
 800f868:	9502      	str	r5, [sp, #8]
 800f86a:	9b02      	ldr	r3, [sp, #8]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	f1aa 0a08 	sub.w	sl, sl, #8
 800f872:	dc6b      	bgt.n	800f94c <__kernel_rem_pio2+0x5ec>
 800f874:	46aa      	mov	sl, r5
 800f876:	f1ba 0f01 	cmp.w	sl, #1
 800f87a:	f1a4 0408 	sub.w	r4, r4, #8
 800f87e:	f300 8085 	bgt.w	800f98c <__kernel_rem_pio2+0x62c>
 800f882:	9c06      	ldr	r4, [sp, #24]
 800f884:	2000      	movs	r0, #0
 800f886:	3408      	adds	r4, #8
 800f888:	2100      	movs	r1, #0
 800f88a:	2d01      	cmp	r5, #1
 800f88c:	f300 809d 	bgt.w	800f9ca <__kernel_rem_pio2+0x66a>
 800f890:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f894:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f898:	f1bb 0f00 	cmp.w	fp, #0
 800f89c:	f040 809b 	bne.w	800f9d6 <__kernel_rem_pio2+0x676>
 800f8a0:	9b01      	ldr	r3, [sp, #4]
 800f8a2:	e9c3 5600 	strd	r5, r6, [r3]
 800f8a6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f8aa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f8ae:	e7ca      	b.n	800f846 <__kernel_rem_pio2+0x4e6>
 800f8b0:	3408      	adds	r4, #8
 800f8b2:	ab4a      	add	r3, sp, #296	; 0x128
 800f8b4:	441c      	add	r4, r3
 800f8b6:	462e      	mov	r6, r5
 800f8b8:	2000      	movs	r0, #0
 800f8ba:	2100      	movs	r1, #0
 800f8bc:	2e00      	cmp	r6, #0
 800f8be:	da36      	bge.n	800f92e <__kernel_rem_pio2+0x5ce>
 800f8c0:	f1bb 0f00 	cmp.w	fp, #0
 800f8c4:	d039      	beq.n	800f93a <__kernel_rem_pio2+0x5da>
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8cc:	9c01      	ldr	r4, [sp, #4]
 800f8ce:	e9c4 2300 	strd	r2, r3, [r4]
 800f8d2:	4602      	mov	r2, r0
 800f8d4:	460b      	mov	r3, r1
 800f8d6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f8da:	f7f0 fced 	bl	80002b8 <__aeabi_dsub>
 800f8de:	ae4c      	add	r6, sp, #304	; 0x130
 800f8e0:	2401      	movs	r4, #1
 800f8e2:	42a5      	cmp	r5, r4
 800f8e4:	da2c      	bge.n	800f940 <__kernel_rem_pio2+0x5e0>
 800f8e6:	f1bb 0f00 	cmp.w	fp, #0
 800f8ea:	d002      	beq.n	800f8f2 <__kernel_rem_pio2+0x592>
 800f8ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	9b01      	ldr	r3, [sp, #4]
 800f8f4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f8f8:	e7a5      	b.n	800f846 <__kernel_rem_pio2+0x4e6>
 800f8fa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f8fe:	eb0d 0403 	add.w	r4, sp, r3
 800f902:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f906:	2000      	movs	r0, #0
 800f908:	2100      	movs	r1, #0
 800f90a:	2d00      	cmp	r5, #0
 800f90c:	da09      	bge.n	800f922 <__kernel_rem_pio2+0x5c2>
 800f90e:	f1bb 0f00 	cmp.w	fp, #0
 800f912:	d002      	beq.n	800f91a <__kernel_rem_pio2+0x5ba>
 800f914:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f918:	4619      	mov	r1, r3
 800f91a:	9b01      	ldr	r3, [sp, #4]
 800f91c:	e9c3 0100 	strd	r0, r1, [r3]
 800f920:	e791      	b.n	800f846 <__kernel_rem_pio2+0x4e6>
 800f922:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f926:	f7f0 fcc9 	bl	80002bc <__adddf3>
 800f92a:	3d01      	subs	r5, #1
 800f92c:	e7ed      	b.n	800f90a <__kernel_rem_pio2+0x5aa>
 800f92e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f932:	f7f0 fcc3 	bl	80002bc <__adddf3>
 800f936:	3e01      	subs	r6, #1
 800f938:	e7c0      	b.n	800f8bc <__kernel_rem_pio2+0x55c>
 800f93a:	4602      	mov	r2, r0
 800f93c:	460b      	mov	r3, r1
 800f93e:	e7c5      	b.n	800f8cc <__kernel_rem_pio2+0x56c>
 800f940:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f944:	f7f0 fcba 	bl	80002bc <__adddf3>
 800f948:	3401      	adds	r4, #1
 800f94a:	e7ca      	b.n	800f8e2 <__kernel_rem_pio2+0x582>
 800f94c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f950:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f954:	9b02      	ldr	r3, [sp, #8]
 800f956:	3b01      	subs	r3, #1
 800f958:	9302      	str	r3, [sp, #8]
 800f95a:	4632      	mov	r2, r6
 800f95c:	463b      	mov	r3, r7
 800f95e:	4640      	mov	r0, r8
 800f960:	4649      	mov	r1, r9
 800f962:	f7f0 fcab 	bl	80002bc <__adddf3>
 800f966:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f96a:	4602      	mov	r2, r0
 800f96c:	460b      	mov	r3, r1
 800f96e:	4640      	mov	r0, r8
 800f970:	4649      	mov	r1, r9
 800f972:	f7f0 fca1 	bl	80002b8 <__aeabi_dsub>
 800f976:	4632      	mov	r2, r6
 800f978:	463b      	mov	r3, r7
 800f97a:	f7f0 fc9f 	bl	80002bc <__adddf3>
 800f97e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f982:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f986:	ed8a 7b00 	vstr	d7, [sl]
 800f98a:	e76e      	b.n	800f86a <__kernel_rem_pio2+0x50a>
 800f98c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f990:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f994:	4640      	mov	r0, r8
 800f996:	4632      	mov	r2, r6
 800f998:	463b      	mov	r3, r7
 800f99a:	4649      	mov	r1, r9
 800f99c:	f7f0 fc8e 	bl	80002bc <__adddf3>
 800f9a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	460b      	mov	r3, r1
 800f9a8:	4640      	mov	r0, r8
 800f9aa:	4649      	mov	r1, r9
 800f9ac:	f7f0 fc84 	bl	80002b8 <__aeabi_dsub>
 800f9b0:	4632      	mov	r2, r6
 800f9b2:	463b      	mov	r3, r7
 800f9b4:	f7f0 fc82 	bl	80002bc <__adddf3>
 800f9b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f9bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f9c0:	ed84 7b00 	vstr	d7, [r4]
 800f9c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f9c8:	e755      	b.n	800f876 <__kernel_rem_pio2+0x516>
 800f9ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f9ce:	f7f0 fc75 	bl	80002bc <__adddf3>
 800f9d2:	3d01      	subs	r5, #1
 800f9d4:	e759      	b.n	800f88a <__kernel_rem_pio2+0x52a>
 800f9d6:	9b01      	ldr	r3, [sp, #4]
 800f9d8:	9a01      	ldr	r2, [sp, #4]
 800f9da:	601d      	str	r5, [r3, #0]
 800f9dc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f9e0:	605c      	str	r4, [r3, #4]
 800f9e2:	609f      	str	r7, [r3, #8]
 800f9e4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f9e8:	60d3      	str	r3, [r2, #12]
 800f9ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9ee:	6110      	str	r0, [r2, #16]
 800f9f0:	6153      	str	r3, [r2, #20]
 800f9f2:	e728      	b.n	800f846 <__kernel_rem_pio2+0x4e6>
 800f9f4:	41700000 	.word	0x41700000
 800f9f8:	3e700000 	.word	0x3e700000
 800f9fc:	00000000 	.word	0x00000000

0800fa00 <__kernel_sin>:
 800fa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa04:	ed2d 8b04 	vpush	{d8-d9}
 800fa08:	eeb0 8a41 	vmov.f32	s16, s2
 800fa0c:	eef0 8a61 	vmov.f32	s17, s3
 800fa10:	ec55 4b10 	vmov	r4, r5, d0
 800fa14:	b083      	sub	sp, #12
 800fa16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fa1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fa1e:	9001      	str	r0, [sp, #4]
 800fa20:	da06      	bge.n	800fa30 <__kernel_sin+0x30>
 800fa22:	ee10 0a10 	vmov	r0, s0
 800fa26:	4629      	mov	r1, r5
 800fa28:	f7f1 f8ae 	bl	8000b88 <__aeabi_d2iz>
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d051      	beq.n	800fad4 <__kernel_sin+0xd4>
 800fa30:	4622      	mov	r2, r4
 800fa32:	462b      	mov	r3, r5
 800fa34:	4620      	mov	r0, r4
 800fa36:	4629      	mov	r1, r5
 800fa38:	f7f0 fdf6 	bl	8000628 <__aeabi_dmul>
 800fa3c:	4682      	mov	sl, r0
 800fa3e:	468b      	mov	fp, r1
 800fa40:	4602      	mov	r2, r0
 800fa42:	460b      	mov	r3, r1
 800fa44:	4620      	mov	r0, r4
 800fa46:	4629      	mov	r1, r5
 800fa48:	f7f0 fdee 	bl	8000628 <__aeabi_dmul>
 800fa4c:	a341      	add	r3, pc, #260	; (adr r3, 800fb54 <__kernel_sin+0x154>)
 800fa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa52:	4680      	mov	r8, r0
 800fa54:	4689      	mov	r9, r1
 800fa56:	4650      	mov	r0, sl
 800fa58:	4659      	mov	r1, fp
 800fa5a:	f7f0 fde5 	bl	8000628 <__aeabi_dmul>
 800fa5e:	a33f      	add	r3, pc, #252	; (adr r3, 800fb5c <__kernel_sin+0x15c>)
 800fa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa64:	f7f0 fc28 	bl	80002b8 <__aeabi_dsub>
 800fa68:	4652      	mov	r2, sl
 800fa6a:	465b      	mov	r3, fp
 800fa6c:	f7f0 fddc 	bl	8000628 <__aeabi_dmul>
 800fa70:	a33c      	add	r3, pc, #240	; (adr r3, 800fb64 <__kernel_sin+0x164>)
 800fa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa76:	f7f0 fc21 	bl	80002bc <__adddf3>
 800fa7a:	4652      	mov	r2, sl
 800fa7c:	465b      	mov	r3, fp
 800fa7e:	f7f0 fdd3 	bl	8000628 <__aeabi_dmul>
 800fa82:	a33a      	add	r3, pc, #232	; (adr r3, 800fb6c <__kernel_sin+0x16c>)
 800fa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa88:	f7f0 fc16 	bl	80002b8 <__aeabi_dsub>
 800fa8c:	4652      	mov	r2, sl
 800fa8e:	465b      	mov	r3, fp
 800fa90:	f7f0 fdca 	bl	8000628 <__aeabi_dmul>
 800fa94:	a337      	add	r3, pc, #220	; (adr r3, 800fb74 <__kernel_sin+0x174>)
 800fa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9a:	f7f0 fc0f 	bl	80002bc <__adddf3>
 800fa9e:	9b01      	ldr	r3, [sp, #4]
 800faa0:	4606      	mov	r6, r0
 800faa2:	460f      	mov	r7, r1
 800faa4:	b9eb      	cbnz	r3, 800fae2 <__kernel_sin+0xe2>
 800faa6:	4602      	mov	r2, r0
 800faa8:	460b      	mov	r3, r1
 800faaa:	4650      	mov	r0, sl
 800faac:	4659      	mov	r1, fp
 800faae:	f7f0 fdbb 	bl	8000628 <__aeabi_dmul>
 800fab2:	a325      	add	r3, pc, #148	; (adr r3, 800fb48 <__kernel_sin+0x148>)
 800fab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab8:	f7f0 fbfe 	bl	80002b8 <__aeabi_dsub>
 800fabc:	4642      	mov	r2, r8
 800fabe:	464b      	mov	r3, r9
 800fac0:	f7f0 fdb2 	bl	8000628 <__aeabi_dmul>
 800fac4:	4602      	mov	r2, r0
 800fac6:	460b      	mov	r3, r1
 800fac8:	4620      	mov	r0, r4
 800faca:	4629      	mov	r1, r5
 800facc:	f7f0 fbf6 	bl	80002bc <__adddf3>
 800fad0:	4604      	mov	r4, r0
 800fad2:	460d      	mov	r5, r1
 800fad4:	ec45 4b10 	vmov	d0, r4, r5
 800fad8:	b003      	add	sp, #12
 800fada:	ecbd 8b04 	vpop	{d8-d9}
 800fade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae2:	4b1b      	ldr	r3, [pc, #108]	; (800fb50 <__kernel_sin+0x150>)
 800fae4:	ec51 0b18 	vmov	r0, r1, d8
 800fae8:	2200      	movs	r2, #0
 800faea:	f7f0 fd9d 	bl	8000628 <__aeabi_dmul>
 800faee:	4632      	mov	r2, r6
 800faf0:	ec41 0b19 	vmov	d9, r0, r1
 800faf4:	463b      	mov	r3, r7
 800faf6:	4640      	mov	r0, r8
 800faf8:	4649      	mov	r1, r9
 800fafa:	f7f0 fd95 	bl	8000628 <__aeabi_dmul>
 800fafe:	4602      	mov	r2, r0
 800fb00:	460b      	mov	r3, r1
 800fb02:	ec51 0b19 	vmov	r0, r1, d9
 800fb06:	f7f0 fbd7 	bl	80002b8 <__aeabi_dsub>
 800fb0a:	4652      	mov	r2, sl
 800fb0c:	465b      	mov	r3, fp
 800fb0e:	f7f0 fd8b 	bl	8000628 <__aeabi_dmul>
 800fb12:	ec53 2b18 	vmov	r2, r3, d8
 800fb16:	f7f0 fbcf 	bl	80002b8 <__aeabi_dsub>
 800fb1a:	a30b      	add	r3, pc, #44	; (adr r3, 800fb48 <__kernel_sin+0x148>)
 800fb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb20:	4606      	mov	r6, r0
 800fb22:	460f      	mov	r7, r1
 800fb24:	4640      	mov	r0, r8
 800fb26:	4649      	mov	r1, r9
 800fb28:	f7f0 fd7e 	bl	8000628 <__aeabi_dmul>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	460b      	mov	r3, r1
 800fb30:	4630      	mov	r0, r6
 800fb32:	4639      	mov	r1, r7
 800fb34:	f7f0 fbc2 	bl	80002bc <__adddf3>
 800fb38:	4602      	mov	r2, r0
 800fb3a:	460b      	mov	r3, r1
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	4629      	mov	r1, r5
 800fb40:	f7f0 fbba 	bl	80002b8 <__aeabi_dsub>
 800fb44:	e7c4      	b.n	800fad0 <__kernel_sin+0xd0>
 800fb46:	bf00      	nop
 800fb48:	55555549 	.word	0x55555549
 800fb4c:	3fc55555 	.word	0x3fc55555
 800fb50:	3fe00000 	.word	0x3fe00000
 800fb54:	5acfd57c 	.word	0x5acfd57c
 800fb58:	3de5d93a 	.word	0x3de5d93a
 800fb5c:	8a2b9ceb 	.word	0x8a2b9ceb
 800fb60:	3e5ae5e6 	.word	0x3e5ae5e6
 800fb64:	57b1fe7d 	.word	0x57b1fe7d
 800fb68:	3ec71de3 	.word	0x3ec71de3
 800fb6c:	19c161d5 	.word	0x19c161d5
 800fb70:	3f2a01a0 	.word	0x3f2a01a0
 800fb74:	1110f8a6 	.word	0x1110f8a6
 800fb78:	3f811111 	.word	0x3f811111

0800fb7c <with_errno>:
 800fb7c:	b570      	push	{r4, r5, r6, lr}
 800fb7e:	4604      	mov	r4, r0
 800fb80:	460d      	mov	r5, r1
 800fb82:	4616      	mov	r6, r2
 800fb84:	f7f8 fd2e 	bl	80085e4 <__errno>
 800fb88:	4629      	mov	r1, r5
 800fb8a:	6006      	str	r6, [r0, #0]
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	bd70      	pop	{r4, r5, r6, pc}

0800fb90 <xflow>:
 800fb90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb92:	4614      	mov	r4, r2
 800fb94:	461d      	mov	r5, r3
 800fb96:	b108      	cbz	r0, 800fb9c <xflow+0xc>
 800fb98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fb9c:	e9cd 2300 	strd	r2, r3, [sp]
 800fba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fba4:	4620      	mov	r0, r4
 800fba6:	4629      	mov	r1, r5
 800fba8:	f7f0 fd3e 	bl	8000628 <__aeabi_dmul>
 800fbac:	2222      	movs	r2, #34	; 0x22
 800fbae:	b003      	add	sp, #12
 800fbb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbb4:	f7ff bfe2 	b.w	800fb7c <with_errno>

0800fbb8 <__math_uflow>:
 800fbb8:	b508      	push	{r3, lr}
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fbc0:	f7ff ffe6 	bl	800fb90 <xflow>
 800fbc4:	ec41 0b10 	vmov	d0, r0, r1
 800fbc8:	bd08      	pop	{r3, pc}

0800fbca <__math_oflow>:
 800fbca:	b508      	push	{r3, lr}
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800fbd2:	f7ff ffdd 	bl	800fb90 <xflow>
 800fbd6:	ec41 0b10 	vmov	d0, r0, r1
 800fbda:	bd08      	pop	{r3, pc}
 800fbdc:	0000      	movs	r0, r0
	...

0800fbe0 <atan>:
 800fbe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbe4:	ec55 4b10 	vmov	r4, r5, d0
 800fbe8:	4bc3      	ldr	r3, [pc, #780]	; (800fef8 <atan+0x318>)
 800fbea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fbee:	429e      	cmp	r6, r3
 800fbf0:	46ab      	mov	fp, r5
 800fbf2:	dd18      	ble.n	800fc26 <atan+0x46>
 800fbf4:	4bc1      	ldr	r3, [pc, #772]	; (800fefc <atan+0x31c>)
 800fbf6:	429e      	cmp	r6, r3
 800fbf8:	dc01      	bgt.n	800fbfe <atan+0x1e>
 800fbfa:	d109      	bne.n	800fc10 <atan+0x30>
 800fbfc:	b144      	cbz	r4, 800fc10 <atan+0x30>
 800fbfe:	4622      	mov	r2, r4
 800fc00:	462b      	mov	r3, r5
 800fc02:	4620      	mov	r0, r4
 800fc04:	4629      	mov	r1, r5
 800fc06:	f7f0 fb59 	bl	80002bc <__adddf3>
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	460d      	mov	r5, r1
 800fc0e:	e006      	b.n	800fc1e <atan+0x3e>
 800fc10:	f1bb 0f00 	cmp.w	fp, #0
 800fc14:	f300 8131 	bgt.w	800fe7a <atan+0x29a>
 800fc18:	a59b      	add	r5, pc, #620	; (adr r5, 800fe88 <atan+0x2a8>)
 800fc1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fc1e:	ec45 4b10 	vmov	d0, r4, r5
 800fc22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc26:	4bb6      	ldr	r3, [pc, #728]	; (800ff00 <atan+0x320>)
 800fc28:	429e      	cmp	r6, r3
 800fc2a:	dc14      	bgt.n	800fc56 <atan+0x76>
 800fc2c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fc30:	429e      	cmp	r6, r3
 800fc32:	dc0d      	bgt.n	800fc50 <atan+0x70>
 800fc34:	a396      	add	r3, pc, #600	; (adr r3, 800fe90 <atan+0x2b0>)
 800fc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3a:	ee10 0a10 	vmov	r0, s0
 800fc3e:	4629      	mov	r1, r5
 800fc40:	f7f0 fb3c 	bl	80002bc <__adddf3>
 800fc44:	4baf      	ldr	r3, [pc, #700]	; (800ff04 <atan+0x324>)
 800fc46:	2200      	movs	r2, #0
 800fc48:	f7f0 ff7e 	bl	8000b48 <__aeabi_dcmpgt>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d1e6      	bne.n	800fc1e <atan+0x3e>
 800fc50:	f04f 3aff 	mov.w	sl, #4294967295
 800fc54:	e02b      	b.n	800fcae <atan+0xce>
 800fc56:	f000 f963 	bl	800ff20 <fabs>
 800fc5a:	4bab      	ldr	r3, [pc, #684]	; (800ff08 <atan+0x328>)
 800fc5c:	429e      	cmp	r6, r3
 800fc5e:	ec55 4b10 	vmov	r4, r5, d0
 800fc62:	f300 80bf 	bgt.w	800fde4 <atan+0x204>
 800fc66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fc6a:	429e      	cmp	r6, r3
 800fc6c:	f300 80a0 	bgt.w	800fdb0 <atan+0x1d0>
 800fc70:	ee10 2a10 	vmov	r2, s0
 800fc74:	ee10 0a10 	vmov	r0, s0
 800fc78:	462b      	mov	r3, r5
 800fc7a:	4629      	mov	r1, r5
 800fc7c:	f7f0 fb1e 	bl	80002bc <__adddf3>
 800fc80:	4ba0      	ldr	r3, [pc, #640]	; (800ff04 <atan+0x324>)
 800fc82:	2200      	movs	r2, #0
 800fc84:	f7f0 fb18 	bl	80002b8 <__aeabi_dsub>
 800fc88:	2200      	movs	r2, #0
 800fc8a:	4606      	mov	r6, r0
 800fc8c:	460f      	mov	r7, r1
 800fc8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fc92:	4620      	mov	r0, r4
 800fc94:	4629      	mov	r1, r5
 800fc96:	f7f0 fb11 	bl	80002bc <__adddf3>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	4630      	mov	r0, r6
 800fca0:	4639      	mov	r1, r7
 800fca2:	f7f0 fdeb 	bl	800087c <__aeabi_ddiv>
 800fca6:	f04f 0a00 	mov.w	sl, #0
 800fcaa:	4604      	mov	r4, r0
 800fcac:	460d      	mov	r5, r1
 800fcae:	4622      	mov	r2, r4
 800fcb0:	462b      	mov	r3, r5
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	4629      	mov	r1, r5
 800fcb6:	f7f0 fcb7 	bl	8000628 <__aeabi_dmul>
 800fcba:	4602      	mov	r2, r0
 800fcbc:	460b      	mov	r3, r1
 800fcbe:	4680      	mov	r8, r0
 800fcc0:	4689      	mov	r9, r1
 800fcc2:	f7f0 fcb1 	bl	8000628 <__aeabi_dmul>
 800fcc6:	a374      	add	r3, pc, #464	; (adr r3, 800fe98 <atan+0x2b8>)
 800fcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fccc:	4606      	mov	r6, r0
 800fcce:	460f      	mov	r7, r1
 800fcd0:	f7f0 fcaa 	bl	8000628 <__aeabi_dmul>
 800fcd4:	a372      	add	r3, pc, #456	; (adr r3, 800fea0 <atan+0x2c0>)
 800fcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcda:	f7f0 faef 	bl	80002bc <__adddf3>
 800fcde:	4632      	mov	r2, r6
 800fce0:	463b      	mov	r3, r7
 800fce2:	f7f0 fca1 	bl	8000628 <__aeabi_dmul>
 800fce6:	a370      	add	r3, pc, #448	; (adr r3, 800fea8 <atan+0x2c8>)
 800fce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcec:	f7f0 fae6 	bl	80002bc <__adddf3>
 800fcf0:	4632      	mov	r2, r6
 800fcf2:	463b      	mov	r3, r7
 800fcf4:	f7f0 fc98 	bl	8000628 <__aeabi_dmul>
 800fcf8:	a36d      	add	r3, pc, #436	; (adr r3, 800feb0 <atan+0x2d0>)
 800fcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfe:	f7f0 fadd 	bl	80002bc <__adddf3>
 800fd02:	4632      	mov	r2, r6
 800fd04:	463b      	mov	r3, r7
 800fd06:	f7f0 fc8f 	bl	8000628 <__aeabi_dmul>
 800fd0a:	a36b      	add	r3, pc, #428	; (adr r3, 800feb8 <atan+0x2d8>)
 800fd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd10:	f7f0 fad4 	bl	80002bc <__adddf3>
 800fd14:	4632      	mov	r2, r6
 800fd16:	463b      	mov	r3, r7
 800fd18:	f7f0 fc86 	bl	8000628 <__aeabi_dmul>
 800fd1c:	a368      	add	r3, pc, #416	; (adr r3, 800fec0 <atan+0x2e0>)
 800fd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd22:	f7f0 facb 	bl	80002bc <__adddf3>
 800fd26:	4642      	mov	r2, r8
 800fd28:	464b      	mov	r3, r9
 800fd2a:	f7f0 fc7d 	bl	8000628 <__aeabi_dmul>
 800fd2e:	a366      	add	r3, pc, #408	; (adr r3, 800fec8 <atan+0x2e8>)
 800fd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd34:	4680      	mov	r8, r0
 800fd36:	4689      	mov	r9, r1
 800fd38:	4630      	mov	r0, r6
 800fd3a:	4639      	mov	r1, r7
 800fd3c:	f7f0 fc74 	bl	8000628 <__aeabi_dmul>
 800fd40:	a363      	add	r3, pc, #396	; (adr r3, 800fed0 <atan+0x2f0>)
 800fd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd46:	f7f0 fab7 	bl	80002b8 <__aeabi_dsub>
 800fd4a:	4632      	mov	r2, r6
 800fd4c:	463b      	mov	r3, r7
 800fd4e:	f7f0 fc6b 	bl	8000628 <__aeabi_dmul>
 800fd52:	a361      	add	r3, pc, #388	; (adr r3, 800fed8 <atan+0x2f8>)
 800fd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd58:	f7f0 faae 	bl	80002b8 <__aeabi_dsub>
 800fd5c:	4632      	mov	r2, r6
 800fd5e:	463b      	mov	r3, r7
 800fd60:	f7f0 fc62 	bl	8000628 <__aeabi_dmul>
 800fd64:	a35e      	add	r3, pc, #376	; (adr r3, 800fee0 <atan+0x300>)
 800fd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6a:	f7f0 faa5 	bl	80002b8 <__aeabi_dsub>
 800fd6e:	4632      	mov	r2, r6
 800fd70:	463b      	mov	r3, r7
 800fd72:	f7f0 fc59 	bl	8000628 <__aeabi_dmul>
 800fd76:	a35c      	add	r3, pc, #368	; (adr r3, 800fee8 <atan+0x308>)
 800fd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7c:	f7f0 fa9c 	bl	80002b8 <__aeabi_dsub>
 800fd80:	4632      	mov	r2, r6
 800fd82:	463b      	mov	r3, r7
 800fd84:	f7f0 fc50 	bl	8000628 <__aeabi_dmul>
 800fd88:	4602      	mov	r2, r0
 800fd8a:	460b      	mov	r3, r1
 800fd8c:	4640      	mov	r0, r8
 800fd8e:	4649      	mov	r1, r9
 800fd90:	f7f0 fa94 	bl	80002bc <__adddf3>
 800fd94:	4622      	mov	r2, r4
 800fd96:	462b      	mov	r3, r5
 800fd98:	f7f0 fc46 	bl	8000628 <__aeabi_dmul>
 800fd9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fda0:	4602      	mov	r2, r0
 800fda2:	460b      	mov	r3, r1
 800fda4:	d14b      	bne.n	800fe3e <atan+0x25e>
 800fda6:	4620      	mov	r0, r4
 800fda8:	4629      	mov	r1, r5
 800fdaa:	f7f0 fa85 	bl	80002b8 <__aeabi_dsub>
 800fdae:	e72c      	b.n	800fc0a <atan+0x2a>
 800fdb0:	ee10 0a10 	vmov	r0, s0
 800fdb4:	4b53      	ldr	r3, [pc, #332]	; (800ff04 <atan+0x324>)
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	4629      	mov	r1, r5
 800fdba:	f7f0 fa7d 	bl	80002b8 <__aeabi_dsub>
 800fdbe:	4b51      	ldr	r3, [pc, #324]	; (800ff04 <atan+0x324>)
 800fdc0:	4606      	mov	r6, r0
 800fdc2:	460f      	mov	r7, r1
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	4629      	mov	r1, r5
 800fdca:	f7f0 fa77 	bl	80002bc <__adddf3>
 800fdce:	4602      	mov	r2, r0
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	4639      	mov	r1, r7
 800fdd6:	f7f0 fd51 	bl	800087c <__aeabi_ddiv>
 800fdda:	f04f 0a01 	mov.w	sl, #1
 800fdde:	4604      	mov	r4, r0
 800fde0:	460d      	mov	r5, r1
 800fde2:	e764      	b.n	800fcae <atan+0xce>
 800fde4:	4b49      	ldr	r3, [pc, #292]	; (800ff0c <atan+0x32c>)
 800fde6:	429e      	cmp	r6, r3
 800fde8:	da1d      	bge.n	800fe26 <atan+0x246>
 800fdea:	ee10 0a10 	vmov	r0, s0
 800fdee:	4b48      	ldr	r3, [pc, #288]	; (800ff10 <atan+0x330>)
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	4629      	mov	r1, r5
 800fdf4:	f7f0 fa60 	bl	80002b8 <__aeabi_dsub>
 800fdf8:	4b45      	ldr	r3, [pc, #276]	; (800ff10 <atan+0x330>)
 800fdfa:	4606      	mov	r6, r0
 800fdfc:	460f      	mov	r7, r1
 800fdfe:	2200      	movs	r2, #0
 800fe00:	4620      	mov	r0, r4
 800fe02:	4629      	mov	r1, r5
 800fe04:	f7f0 fc10 	bl	8000628 <__aeabi_dmul>
 800fe08:	4b3e      	ldr	r3, [pc, #248]	; (800ff04 <atan+0x324>)
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	f7f0 fa56 	bl	80002bc <__adddf3>
 800fe10:	4602      	mov	r2, r0
 800fe12:	460b      	mov	r3, r1
 800fe14:	4630      	mov	r0, r6
 800fe16:	4639      	mov	r1, r7
 800fe18:	f7f0 fd30 	bl	800087c <__aeabi_ddiv>
 800fe1c:	f04f 0a02 	mov.w	sl, #2
 800fe20:	4604      	mov	r4, r0
 800fe22:	460d      	mov	r5, r1
 800fe24:	e743      	b.n	800fcae <atan+0xce>
 800fe26:	462b      	mov	r3, r5
 800fe28:	ee10 2a10 	vmov	r2, s0
 800fe2c:	4939      	ldr	r1, [pc, #228]	; (800ff14 <atan+0x334>)
 800fe2e:	2000      	movs	r0, #0
 800fe30:	f7f0 fd24 	bl	800087c <__aeabi_ddiv>
 800fe34:	f04f 0a03 	mov.w	sl, #3
 800fe38:	4604      	mov	r4, r0
 800fe3a:	460d      	mov	r5, r1
 800fe3c:	e737      	b.n	800fcae <atan+0xce>
 800fe3e:	4b36      	ldr	r3, [pc, #216]	; (800ff18 <atan+0x338>)
 800fe40:	4e36      	ldr	r6, [pc, #216]	; (800ff1c <atan+0x33c>)
 800fe42:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fe46:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800fe4a:	e9da 2300 	ldrd	r2, r3, [sl]
 800fe4e:	f7f0 fa33 	bl	80002b8 <__aeabi_dsub>
 800fe52:	4622      	mov	r2, r4
 800fe54:	462b      	mov	r3, r5
 800fe56:	f7f0 fa2f 	bl	80002b8 <__aeabi_dsub>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fe62:	f7f0 fa29 	bl	80002b8 <__aeabi_dsub>
 800fe66:	f1bb 0f00 	cmp.w	fp, #0
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	460d      	mov	r5, r1
 800fe6e:	f6bf aed6 	bge.w	800fc1e <atan+0x3e>
 800fe72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe76:	461d      	mov	r5, r3
 800fe78:	e6d1      	b.n	800fc1e <atan+0x3e>
 800fe7a:	a51d      	add	r5, pc, #116	; (adr r5, 800fef0 <atan+0x310>)
 800fe7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe80:	e6cd      	b.n	800fc1e <atan+0x3e>
 800fe82:	bf00      	nop
 800fe84:	f3af 8000 	nop.w
 800fe88:	54442d18 	.word	0x54442d18
 800fe8c:	bff921fb 	.word	0xbff921fb
 800fe90:	8800759c 	.word	0x8800759c
 800fe94:	7e37e43c 	.word	0x7e37e43c
 800fe98:	e322da11 	.word	0xe322da11
 800fe9c:	3f90ad3a 	.word	0x3f90ad3a
 800fea0:	24760deb 	.word	0x24760deb
 800fea4:	3fa97b4b 	.word	0x3fa97b4b
 800fea8:	a0d03d51 	.word	0xa0d03d51
 800feac:	3fb10d66 	.word	0x3fb10d66
 800feb0:	c54c206e 	.word	0xc54c206e
 800feb4:	3fb745cd 	.word	0x3fb745cd
 800feb8:	920083ff 	.word	0x920083ff
 800febc:	3fc24924 	.word	0x3fc24924
 800fec0:	5555550d 	.word	0x5555550d
 800fec4:	3fd55555 	.word	0x3fd55555
 800fec8:	2c6a6c2f 	.word	0x2c6a6c2f
 800fecc:	bfa2b444 	.word	0xbfa2b444
 800fed0:	52defd9a 	.word	0x52defd9a
 800fed4:	3fadde2d 	.word	0x3fadde2d
 800fed8:	af749a6d 	.word	0xaf749a6d
 800fedc:	3fb3b0f2 	.word	0x3fb3b0f2
 800fee0:	fe231671 	.word	0xfe231671
 800fee4:	3fbc71c6 	.word	0x3fbc71c6
 800fee8:	9998ebc4 	.word	0x9998ebc4
 800feec:	3fc99999 	.word	0x3fc99999
 800fef0:	54442d18 	.word	0x54442d18
 800fef4:	3ff921fb 	.word	0x3ff921fb
 800fef8:	440fffff 	.word	0x440fffff
 800fefc:	7ff00000 	.word	0x7ff00000
 800ff00:	3fdbffff 	.word	0x3fdbffff
 800ff04:	3ff00000 	.word	0x3ff00000
 800ff08:	3ff2ffff 	.word	0x3ff2ffff
 800ff0c:	40038000 	.word	0x40038000
 800ff10:	3ff80000 	.word	0x3ff80000
 800ff14:	bff00000 	.word	0xbff00000
 800ff18:	08010be8 	.word	0x08010be8
 800ff1c:	08010bc8 	.word	0x08010bc8

0800ff20 <fabs>:
 800ff20:	ec51 0b10 	vmov	r0, r1, d0
 800ff24:	ee10 2a10 	vmov	r2, s0
 800ff28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff2c:	ec43 2b10 	vmov	d0, r2, r3
 800ff30:	4770      	bx	lr

0800ff32 <finite>:
 800ff32:	b082      	sub	sp, #8
 800ff34:	ed8d 0b00 	vstr	d0, [sp]
 800ff38:	9801      	ldr	r0, [sp, #4]
 800ff3a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ff3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ff42:	0fc0      	lsrs	r0, r0, #31
 800ff44:	b002      	add	sp, #8
 800ff46:	4770      	bx	lr

0800ff48 <floor>:
 800ff48:	ec51 0b10 	vmov	r0, r1, d0
 800ff4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ff54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ff58:	2e13      	cmp	r6, #19
 800ff5a:	ee10 5a10 	vmov	r5, s0
 800ff5e:	ee10 8a10 	vmov	r8, s0
 800ff62:	460c      	mov	r4, r1
 800ff64:	dc32      	bgt.n	800ffcc <floor+0x84>
 800ff66:	2e00      	cmp	r6, #0
 800ff68:	da14      	bge.n	800ff94 <floor+0x4c>
 800ff6a:	a333      	add	r3, pc, #204	; (adr r3, 8010038 <floor+0xf0>)
 800ff6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff70:	f7f0 f9a4 	bl	80002bc <__adddf3>
 800ff74:	2200      	movs	r2, #0
 800ff76:	2300      	movs	r3, #0
 800ff78:	f7f0 fde6 	bl	8000b48 <__aeabi_dcmpgt>
 800ff7c:	b138      	cbz	r0, 800ff8e <floor+0x46>
 800ff7e:	2c00      	cmp	r4, #0
 800ff80:	da57      	bge.n	8010032 <floor+0xea>
 800ff82:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ff86:	431d      	orrs	r5, r3
 800ff88:	d001      	beq.n	800ff8e <floor+0x46>
 800ff8a:	4c2d      	ldr	r4, [pc, #180]	; (8010040 <floor+0xf8>)
 800ff8c:	2500      	movs	r5, #0
 800ff8e:	4621      	mov	r1, r4
 800ff90:	4628      	mov	r0, r5
 800ff92:	e025      	b.n	800ffe0 <floor+0x98>
 800ff94:	4f2b      	ldr	r7, [pc, #172]	; (8010044 <floor+0xfc>)
 800ff96:	4137      	asrs	r7, r6
 800ff98:	ea01 0307 	and.w	r3, r1, r7
 800ff9c:	4303      	orrs	r3, r0
 800ff9e:	d01f      	beq.n	800ffe0 <floor+0x98>
 800ffa0:	a325      	add	r3, pc, #148	; (adr r3, 8010038 <floor+0xf0>)
 800ffa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa6:	f7f0 f989 	bl	80002bc <__adddf3>
 800ffaa:	2200      	movs	r2, #0
 800ffac:	2300      	movs	r3, #0
 800ffae:	f7f0 fdcb 	bl	8000b48 <__aeabi_dcmpgt>
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	d0eb      	beq.n	800ff8e <floor+0x46>
 800ffb6:	2c00      	cmp	r4, #0
 800ffb8:	bfbe      	ittt	lt
 800ffba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ffbe:	fa43 f606 	asrlt.w	r6, r3, r6
 800ffc2:	19a4      	addlt	r4, r4, r6
 800ffc4:	ea24 0407 	bic.w	r4, r4, r7
 800ffc8:	2500      	movs	r5, #0
 800ffca:	e7e0      	b.n	800ff8e <floor+0x46>
 800ffcc:	2e33      	cmp	r6, #51	; 0x33
 800ffce:	dd0b      	ble.n	800ffe8 <floor+0xa0>
 800ffd0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ffd4:	d104      	bne.n	800ffe0 <floor+0x98>
 800ffd6:	ee10 2a10 	vmov	r2, s0
 800ffda:	460b      	mov	r3, r1
 800ffdc:	f7f0 f96e 	bl	80002bc <__adddf3>
 800ffe0:	ec41 0b10 	vmov	d0, r0, r1
 800ffe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffe8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ffec:	f04f 33ff 	mov.w	r3, #4294967295
 800fff0:	fa23 f707 	lsr.w	r7, r3, r7
 800fff4:	4207      	tst	r7, r0
 800fff6:	d0f3      	beq.n	800ffe0 <floor+0x98>
 800fff8:	a30f      	add	r3, pc, #60	; (adr r3, 8010038 <floor+0xf0>)
 800fffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffe:	f7f0 f95d 	bl	80002bc <__adddf3>
 8010002:	2200      	movs	r2, #0
 8010004:	2300      	movs	r3, #0
 8010006:	f7f0 fd9f 	bl	8000b48 <__aeabi_dcmpgt>
 801000a:	2800      	cmp	r0, #0
 801000c:	d0bf      	beq.n	800ff8e <floor+0x46>
 801000e:	2c00      	cmp	r4, #0
 8010010:	da02      	bge.n	8010018 <floor+0xd0>
 8010012:	2e14      	cmp	r6, #20
 8010014:	d103      	bne.n	801001e <floor+0xd6>
 8010016:	3401      	adds	r4, #1
 8010018:	ea25 0507 	bic.w	r5, r5, r7
 801001c:	e7b7      	b.n	800ff8e <floor+0x46>
 801001e:	2301      	movs	r3, #1
 8010020:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010024:	fa03 f606 	lsl.w	r6, r3, r6
 8010028:	4435      	add	r5, r6
 801002a:	4545      	cmp	r5, r8
 801002c:	bf38      	it	cc
 801002e:	18e4      	addcc	r4, r4, r3
 8010030:	e7f2      	b.n	8010018 <floor+0xd0>
 8010032:	2500      	movs	r5, #0
 8010034:	462c      	mov	r4, r5
 8010036:	e7aa      	b.n	800ff8e <floor+0x46>
 8010038:	8800759c 	.word	0x8800759c
 801003c:	7e37e43c 	.word	0x7e37e43c
 8010040:	bff00000 	.word	0xbff00000
 8010044:	000fffff 	.word	0x000fffff

08010048 <scalbn>:
 8010048:	b570      	push	{r4, r5, r6, lr}
 801004a:	ec55 4b10 	vmov	r4, r5, d0
 801004e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010052:	4606      	mov	r6, r0
 8010054:	462b      	mov	r3, r5
 8010056:	b99a      	cbnz	r2, 8010080 <scalbn+0x38>
 8010058:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801005c:	4323      	orrs	r3, r4
 801005e:	d036      	beq.n	80100ce <scalbn+0x86>
 8010060:	4b39      	ldr	r3, [pc, #228]	; (8010148 <scalbn+0x100>)
 8010062:	4629      	mov	r1, r5
 8010064:	ee10 0a10 	vmov	r0, s0
 8010068:	2200      	movs	r2, #0
 801006a:	f7f0 fadd 	bl	8000628 <__aeabi_dmul>
 801006e:	4b37      	ldr	r3, [pc, #220]	; (801014c <scalbn+0x104>)
 8010070:	429e      	cmp	r6, r3
 8010072:	4604      	mov	r4, r0
 8010074:	460d      	mov	r5, r1
 8010076:	da10      	bge.n	801009a <scalbn+0x52>
 8010078:	a32b      	add	r3, pc, #172	; (adr r3, 8010128 <scalbn+0xe0>)
 801007a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007e:	e03a      	b.n	80100f6 <scalbn+0xae>
 8010080:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010084:	428a      	cmp	r2, r1
 8010086:	d10c      	bne.n	80100a2 <scalbn+0x5a>
 8010088:	ee10 2a10 	vmov	r2, s0
 801008c:	4620      	mov	r0, r4
 801008e:	4629      	mov	r1, r5
 8010090:	f7f0 f914 	bl	80002bc <__adddf3>
 8010094:	4604      	mov	r4, r0
 8010096:	460d      	mov	r5, r1
 8010098:	e019      	b.n	80100ce <scalbn+0x86>
 801009a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801009e:	460b      	mov	r3, r1
 80100a0:	3a36      	subs	r2, #54	; 0x36
 80100a2:	4432      	add	r2, r6
 80100a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80100a8:	428a      	cmp	r2, r1
 80100aa:	dd08      	ble.n	80100be <scalbn+0x76>
 80100ac:	2d00      	cmp	r5, #0
 80100ae:	a120      	add	r1, pc, #128	; (adr r1, 8010130 <scalbn+0xe8>)
 80100b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100b4:	da1c      	bge.n	80100f0 <scalbn+0xa8>
 80100b6:	a120      	add	r1, pc, #128	; (adr r1, 8010138 <scalbn+0xf0>)
 80100b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100bc:	e018      	b.n	80100f0 <scalbn+0xa8>
 80100be:	2a00      	cmp	r2, #0
 80100c0:	dd08      	ble.n	80100d4 <scalbn+0x8c>
 80100c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80100c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80100ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80100ce:	ec45 4b10 	vmov	d0, r4, r5
 80100d2:	bd70      	pop	{r4, r5, r6, pc}
 80100d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80100d8:	da19      	bge.n	801010e <scalbn+0xc6>
 80100da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80100de:	429e      	cmp	r6, r3
 80100e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80100e4:	dd0a      	ble.n	80100fc <scalbn+0xb4>
 80100e6:	a112      	add	r1, pc, #72	; (adr r1, 8010130 <scalbn+0xe8>)
 80100e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d1e2      	bne.n	80100b6 <scalbn+0x6e>
 80100f0:	a30f      	add	r3, pc, #60	; (adr r3, 8010130 <scalbn+0xe8>)
 80100f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f6:	f7f0 fa97 	bl	8000628 <__aeabi_dmul>
 80100fa:	e7cb      	b.n	8010094 <scalbn+0x4c>
 80100fc:	a10a      	add	r1, pc, #40	; (adr r1, 8010128 <scalbn+0xe0>)
 80100fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d0b8      	beq.n	8010078 <scalbn+0x30>
 8010106:	a10e      	add	r1, pc, #56	; (adr r1, 8010140 <scalbn+0xf8>)
 8010108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801010c:	e7b4      	b.n	8010078 <scalbn+0x30>
 801010e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010112:	3236      	adds	r2, #54	; 0x36
 8010114:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010118:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801011c:	4620      	mov	r0, r4
 801011e:	4b0c      	ldr	r3, [pc, #48]	; (8010150 <scalbn+0x108>)
 8010120:	2200      	movs	r2, #0
 8010122:	e7e8      	b.n	80100f6 <scalbn+0xae>
 8010124:	f3af 8000 	nop.w
 8010128:	c2f8f359 	.word	0xc2f8f359
 801012c:	01a56e1f 	.word	0x01a56e1f
 8010130:	8800759c 	.word	0x8800759c
 8010134:	7e37e43c 	.word	0x7e37e43c
 8010138:	8800759c 	.word	0x8800759c
 801013c:	fe37e43c 	.word	0xfe37e43c
 8010140:	c2f8f359 	.word	0xc2f8f359
 8010144:	81a56e1f 	.word	0x81a56e1f
 8010148:	43500000 	.word	0x43500000
 801014c:	ffff3cb0 	.word	0xffff3cb0
 8010150:	3c900000 	.word	0x3c900000

08010154 <_init>:
 8010154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010156:	bf00      	nop
 8010158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801015a:	bc08      	pop	{r3}
 801015c:	469e      	mov	lr, r3
 801015e:	4770      	bx	lr

08010160 <_fini>:
 8010160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010162:	bf00      	nop
 8010164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010166:	bc08      	pop	{r3}
 8010168:	469e      	mov	lr, r3
 801016a:	4770      	bx	lr
