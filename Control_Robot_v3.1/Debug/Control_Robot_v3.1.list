
Control_Robot_v3.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  0800c770  0800c770  0001c770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d230  0800d230  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d230  0800d230  0001d230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d238  0800d238  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d238  0800d238  0001d238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d23c  0800d23c  0001d23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad8  200001e4  0800d424  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cbc  0800d424  00020cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ebb  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000117d  00000000  00000000  000250cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000478  00000000  00000000  00026250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d0  00000000  00000000  000266c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010f87  00000000  00000000  00026a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000069b1  00000000  00000000  00037a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058703  00000000  00000000  0003e3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00096ad3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db0  00000000  00000000  00096b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c754 	.word	0x0800c754

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800c754 	.word	0x0800c754

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9dd 	b.w	8001094 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f86b 	bl	8000dc4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f85e 	bl	8000dc4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f84d 	bl	8000dc4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f83f 	bl	8000dc4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff fed3 	bl	8000b0c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc49 	bl	8000628 <__aeabi_dmul>
 8000d96:	f7ff ff1f 	bl	8000bd8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbca 	bl	8000534 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc40 	bl	8000628 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa82 	bl	80002b8 <__aeabi_dsub>
 8000db4:	f7ff ff10 	bl	8000bd8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	4610      	mov	r0, r2
 80010ba:	f003 fc19 	bl	80048f0 <updateDuttyCyclePercentageFloat>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	4610      	mov	r0, r2
 80010fe:	f002 ffcf 	bl	80040a0 <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f003 fb25 	bl	8004764 <statusPolarityPWM>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <main>:
uint8_t commandComplete = 1;           //Bandera que indica si el comando esta completo
uint8_t counterRecepcion = 0;          //Variable para la posicion del arrelgo
char bufferRecepcion[64] = {0};        //Arreglo que almacena el comando ingresado

int main(void)
{
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af02      	add	r7, sp, #8
	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	71fb      	strb	r3, [r7, #7]
	configPLL(clock);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fff7 	bl	8004124 <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 8001136:	f000 f89b 	bl	8001270 <int_Hardware>
	//Activamos el SysTick
	//config_SysTick_us();
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 800113a:	4b38      	ldr	r3, [pc, #224]	; (800121c <main+0xf8>)
 800113c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001140:	4a36      	ldr	r2, [pc, #216]	; (800121c <main+0xf8>)
 8001142:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001146:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 800114a:	f000 fa1f 	bl	800158c <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 800114e:	2101      	movs	r1, #1
 8001150:	4833      	ldr	r0, [pc, #204]	; (8001220 <main+0xfc>)
 8001152:	f002 ffa5 	bl	80040a0 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8001156:	2101      	movs	r1, #1
 8001158:	4832      	ldr	r0, [pc, #200]	; (8001224 <main+0x100>)
 800115a:	f002 ffa1 	bl	80040a0 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 800115e:	2101      	movs	r1, #1
 8001160:	4831      	ldr	r0, [pc, #196]	; (8001228 <main+0x104>)
 8001162:	f002 ff9d 	bl	80040a0 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8001166:	2101      	movs	r1, #1
 8001168:	4830      	ldr	r0, [pc, #192]	; (800122c <main+0x108>)
 800116a:	f002 ff99 	bl	80040a0 <GPIO_writePin>
	int_Config_Motor();
 800116e:	f000 fa17 	bl	80015a0 <int_Config_Motor>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 8001172:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <main+0x10c>)
 8001174:	4a2f      	ldr	r2, [pc, #188]	; (8001234 <main+0x110>)
 8001176:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = ((PI*DL)/(100*Ce));  //[mm/cuentas]
 8001178:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <main+0x114>)
 800117a:	4a30      	ldr	r2, [pc, #192]	; (800123c <main+0x118>)
 800117c:	601a      	str	r2, [r3, #0]
	cm_R =	((PI*DR)/(100*Ce));  //[mm/cuentas]
 800117e:	4b30      	ldr	r3, [pc, #192]	; (8001240 <main+0x11c>)
 8001180:	4a30      	ldr	r2, [pc, #192]	; (8001244 <main+0x120>)
 8001182:	601a      	str	r2, [r3, #0]

	while(1)
	{
		if(flag_PID==1)
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <main+0x124>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d139      	bne.n	8001200 <main+0xdc>
		{
			//Convertimos el valor y imprimemos
			sprintf(bufferMsg,"%#.4f\t%#.4f\n", x_position , y_position);
 800118c:	4b2f      	ldr	r3, [pc, #188]	; (800124c <main+0x128>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9f1 	bl	8000578 <__aeabi_f2d>
 8001196:	4604      	mov	r4, r0
 8001198:	460d      	mov	r5, r1
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <main+0x12c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9ea 	bl	8000578 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	e9cd 2300 	strd	r2, r3, [sp]
 80011ac:	4622      	mov	r2, r4
 80011ae:	462b      	mov	r3, r5
 80011b0:	4928      	ldr	r1, [pc, #160]	; (8001254 <main+0x130>)
 80011b2:	4829      	ldr	r0, [pc, #164]	; (8001258 <main+0x134>)
 80011b4:	f004 ff06 	bl	8005fc4 <siprintf>
			writeMsgForTXE(&handler_USART_USB, bufferMsg);
 80011b8:	4927      	ldr	r1, [pc, #156]	; (8001258 <main+0x134>)
 80011ba:	4828      	ldr	r0, [pc, #160]	; (800125c <main+0x138>)
 80011bc:	f003 fe48 	bl	8004e50 <writeMsgForTXE>
			//Reiniciamos el numero de conteos
			handler_Motor_R.parametersMotor.count = 0;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <main+0x110>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	841a      	strh	r2, [r3, #32]
			handler_Motor_L.parametersMotor.count = 0;
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <main+0x13c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	841a      	strh	r2, [r3, #32]
			//Aplicamos el PID
			PID(&handler_Motor_L,phi);
 80011cc:	4b25      	ldr	r3, [pc, #148]	; (8001264 <main+0x140>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	eeb0 0a67 	vmov.f32	s0, s15
 80011d6:	4822      	ldr	r0, [pc, #136]	; (8001260 <main+0x13c>)
 80011d8:	f000 ff92 	bl	8002100 <PID>
			PID(&handler_Motor_R,phi);
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <main+0x140>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	eeb0 0a67 	vmov.f32	s0, s15
 80011e6:	4813      	ldr	r0, [pc, #76]	; (8001234 <main+0x110>)
 80011e8:	f000 ff8a 	bl	8002100 <PID>
			//Correccion del dutty
			correction(&handler_Motor_L);
 80011ec:	481c      	ldr	r0, [pc, #112]	; (8001260 <main+0x13c>)
 80011ee:	f000 ffdb 	bl	80021a8 <correction>
			correction(&handler_Motor_R);
 80011f2:	4810      	ldr	r0, [pc, #64]	; (8001234 <main+0x110>)
 80011f4:	f000 ffd8 	bl	80021a8 <correction>
			//Bajamos la bandera
			flag_PID = 0;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <main+0x124>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e000      	b.n	8001202 <main+0xde>
		}
		else
		{
			__NOP();
 8001200:	bf00      	nop
		}

		///Verificamos para ejecuta el comando ingresando
		if(commandComplete==1)
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <main+0x144>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d106      	bne.n	8001218 <main+0xf4>
		{
			runCommand(bufferRecepcion);
 800120a:	4818      	ldr	r0, [pc, #96]	; (800126c <main+0x148>)
 800120c:	f000 fd24 	bl	8001c58 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <main+0x144>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
 8001216:	e7b5      	b.n	8001184 <main+0x60>
		}
		else
		{
			__NOP();
 8001218:	bf00      	nop
		if(flag_PID==1)
 800121a:	e7b3      	b.n	8001184 <main+0x60>
 800121c:	e000ed00 	.word	0xe000ed00
 8001220:	200002c0 	.word	0x200002c0
 8001224:	2000033c 	.word	0x2000033c
 8001228:	200002cc 	.word	0x200002cc
 800122c:	20000348 	.word	0x20000348
 8001230:	200003f8 	.word	0x200003f8
 8001234:	200002e4 	.word	0x200002e4
 8001238:	200003d8 	.word	0x200003d8
 800123c:	40105fa7 	.word	0x40105fa7
 8001240:	200003dc 	.word	0x200003dc
 8001244:	400facee 	.word	0x400facee
 8001248:	200003d4 	.word	0x200003d4
 800124c:	200003f0 	.word	0x200003f0
 8001250:	200003f4 	.word	0x200003f4
 8001254:	0800c770 	.word	0x0800c770
 8001258:	20000274 	.word	0x20000274
 800125c:	20000268 	.word	0x20000268
 8001260:	20000360 	.word	0x20000360
 8001264:	200003e0 	.word	0x200003e0
 8001268:	2000000c 	.word	0x2000000c
 800126c:	2000040c 	.word	0x2000040c

08001270 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 8001276:	4bab      	ldr	r3, [pc, #684]	; (8001524 <int_Hardware+0x2b4>)
 8001278:	4aab      	ldr	r2, [pc, #684]	; (8001528 <int_Hardware+0x2b8>)
 800127a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 800127c:	4ba9      	ldr	r3, [pc, #676]	; (8001524 <int_Hardware+0x2b4>)
 800127e:	2209      	movs	r2, #9
 8001280:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001282:	2300      	movs	r3, #0
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2102      	movs	r1, #2
 8001290:	48a4      	ldr	r0, [pc, #656]	; (8001524 <int_Hardware+0x2b4>)
 8001292:	f002 fdb9 	bl	8003e08 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 8001296:	48a3      	ldr	r0, [pc, #652]	; (8001524 <int_Hardware+0x2b4>)
 8001298:	f002 fdd8 	bl	8003e4c <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 800129c:	4ba3      	ldr	r3, [pc, #652]	; (800152c <int_Hardware+0x2bc>)
 800129e:	4aa4      	ldr	r2, [pc, #656]	; (8001530 <int_Hardware+0x2c0>)
 80012a0:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 80012a2:	4ba2      	ldr	r3, [pc, #648]	; (800152c <int_Hardware+0x2bc>)
 80012a4:	2205      	movs	r2, #5
 80012a6:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012a8:	2300      	movs	r3, #0
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	2300      	movs	r3, #0
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	2101      	movs	r1, #1
 80012b6:	489d      	ldr	r0, [pc, #628]	; (800152c <int_Hardware+0x2bc>)
 80012b8:	f002 fda6 	bl	8003e08 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 80012bc:	489b      	ldr	r0, [pc, #620]	; (800152c <int_Hardware+0x2bc>)
 80012be:	f002 fdc5 	bl	8003e4c <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 80012c2:	4b9c      	ldr	r3, [pc, #624]	; (8001534 <int_Hardware+0x2c4>)
 80012c4:	4a9a      	ldr	r2, [pc, #616]	; (8001530 <int_Hardware+0x2c0>)
 80012c6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 80012c8:	4b9a      	ldr	r3, [pc, #616]	; (8001534 <int_Hardware+0x2c4>)
 80012ca:	2209      	movs	r2, #9
 80012cc:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80012ce:	2307      	movs	r3, #7
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	2300      	movs	r3, #0
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	2200      	movs	r2, #0
 80012da:	2102      	movs	r1, #2
 80012dc:	4895      	ldr	r0, [pc, #596]	; (8001534 <int_Hardware+0x2c4>)
 80012de:	f002 fd93 	bl	8003e08 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 80012e2:	4894      	ldr	r0, [pc, #592]	; (8001534 <int_Hardware+0x2c4>)
 80012e4:	f002 fdb2 	bl	8003e4c <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 80012e8:	4b93      	ldr	r3, [pc, #588]	; (8001538 <int_Hardware+0x2c8>)
 80012ea:	4a91      	ldr	r2, [pc, #580]	; (8001530 <int_Hardware+0x2c0>)
 80012ec:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80012ee:	4b92      	ldr	r3, [pc, #584]	; (8001538 <int_Hardware+0x2c8>)
 80012f0:	220a      	movs	r2, #10
 80012f2:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80012f4:	2307      	movs	r3, #7
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	2300      	movs	r3, #0
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2301      	movs	r3, #1
 80012fe:	2200      	movs	r2, #0
 8001300:	2102      	movs	r1, #2
 8001302:	488d      	ldr	r0, [pc, #564]	; (8001538 <int_Hardware+0x2c8>)
 8001304:	f002 fd80 	bl	8003e08 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 8001308:	488b      	ldr	r0, [pc, #556]	; (8001538 <int_Hardware+0x2c8>)
 800130a:	f002 fd9f 	bl	8003e4c <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 800130e:	4b8b      	ldr	r3, [pc, #556]	; (800153c <int_Hardware+0x2cc>)
 8001310:	4a87      	ldr	r2, [pc, #540]	; (8001530 <int_Hardware+0x2c0>)
 8001312:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8001314:	4b89      	ldr	r3, [pc, #548]	; (800153c <int_Hardware+0x2cc>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 800131a:	2302      	movs	r3, #2
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	2300      	movs	r3, #0
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	2200      	movs	r2, #0
 8001326:	2102      	movs	r1, #2
 8001328:	4884      	ldr	r0, [pc, #528]	; (800153c <int_Hardware+0x2cc>)
 800132a:	f002 fd6d 	bl	8003e08 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 800132e:	4883      	ldr	r0, [pc, #524]	; (800153c <int_Hardware+0x2cc>)
 8001330:	f002 fd8c 	bl	8003e4c <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8001334:	4b82      	ldr	r3, [pc, #520]	; (8001540 <int_Hardware+0x2d0>)
 8001336:	4a7c      	ldr	r2, [pc, #496]	; (8001528 <int_Hardware+0x2b8>)
 8001338:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 800133a:	4b81      	ldr	r3, [pc, #516]	; (8001540 <int_Hardware+0x2d0>)
 800133c:	220c      	movs	r2, #12
 800133e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001340:	2300      	movs	r3, #0
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	2300      	movs	r3, #0
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2301      	movs	r3, #1
 800134a:	2200      	movs	r2, #0
 800134c:	2101      	movs	r1, #1
 800134e:	487c      	ldr	r0, [pc, #496]	; (8001540 <int_Hardware+0x2d0>)
 8001350:	f002 fd5a 	bl	8003e08 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 8001354:	487a      	ldr	r0, [pc, #488]	; (8001540 <int_Hardware+0x2d0>)
 8001356:	f002 fd79 	bl	8003e4c <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 800135a:	4b7a      	ldr	r3, [pc, #488]	; (8001544 <int_Hardware+0x2d4>)
 800135c:	4a72      	ldr	r2, [pc, #456]	; (8001528 <int_Hardware+0x2b8>)
 800135e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8001360:	4b78      	ldr	r3, [pc, #480]	; (8001544 <int_Hardware+0x2d4>)
 8001362:	220a      	movs	r2, #10
 8001364:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001366:	2300      	movs	r3, #0
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	2300      	movs	r3, #0
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	2200      	movs	r2, #0
 8001372:	2101      	movs	r1, #1
 8001374:	4873      	ldr	r0, [pc, #460]	; (8001544 <int_Hardware+0x2d4>)
 8001376:	f002 fd47 	bl	8003e08 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 800137a:	4872      	ldr	r0, [pc, #456]	; (8001544 <int_Hardware+0x2d4>)
 800137c:	f002 fd66 	bl	8003e4c <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 8001380:	4b71      	ldr	r3, [pc, #452]	; (8001548 <int_Hardware+0x2d8>)
 8001382:	4a6b      	ldr	r2, [pc, #428]	; (8001530 <int_Hardware+0x2c0>)
 8001384:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 8001386:	4b70      	ldr	r3, [pc, #448]	; (8001548 <int_Hardware+0x2d8>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 800138c:	2302      	movs	r3, #2
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	2300      	movs	r3, #0
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2301      	movs	r3, #1
 8001396:	2200      	movs	r2, #0
 8001398:	2102      	movs	r1, #2
 800139a:	486b      	ldr	r0, [pc, #428]	; (8001548 <int_Hardware+0x2d8>)
 800139c:	f002 fd34 	bl	8003e08 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 80013a0:	4869      	ldr	r0, [pc, #420]	; (8001548 <int_Hardware+0x2d8>)
 80013a2:	f002 fd53 	bl	8003e4c <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 80013a6:	4b69      	ldr	r3, [pc, #420]	; (800154c <int_Hardware+0x2dc>)
 80013a8:	4a69      	ldr	r2, [pc, #420]	; (8001550 <int_Hardware+0x2e0>)
 80013aa:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 80013ac:	4b67      	ldr	r3, [pc, #412]	; (800154c <int_Hardware+0x2dc>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80013b2:	2300      	movs	r3, #0
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	2300      	movs	r3, #0
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2301      	movs	r3, #1
 80013bc:	2200      	movs	r2, #0
 80013be:	2101      	movs	r1, #1
 80013c0:	4862      	ldr	r0, [pc, #392]	; (800154c <int_Hardware+0x2dc>)
 80013c2:	f002 fd21 	bl	8003e08 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 80013c6:	4861      	ldr	r0, [pc, #388]	; (800154c <int_Hardware+0x2dc>)
 80013c8:	f002 fd40 	bl	8003e4c <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 80013cc:	4b61      	ldr	r3, [pc, #388]	; (8001554 <int_Hardware+0x2e4>)
 80013ce:	4a56      	ldr	r2, [pc, #344]	; (8001528 <int_Hardware+0x2b8>)
 80013d0:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 80013d2:	4b60      	ldr	r3, [pc, #384]	; (8001554 <int_Hardware+0x2e4>)
 80013d4:	220b      	movs	r2, #11
 80013d6:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80013d8:	2300      	movs	r3, #0
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	2300      	movs	r3, #0
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2301      	movs	r3, #1
 80013e2:	2200      	movs	r2, #0
 80013e4:	2101      	movs	r1, #1
 80013e6:	485b      	ldr	r0, [pc, #364]	; (8001554 <int_Hardware+0x2e4>)
 80013e8:	f002 fd0e 	bl	8003e08 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 80013ec:	4859      	ldr	r0, [pc, #356]	; (8001554 <int_Hardware+0x2e4>)
 80013ee:	f002 fd2d 	bl	8003e4c <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART1;
 80013f2:	4b59      	ldr	r3, [pc, #356]	; (8001558 <int_Hardware+0x2e8>)
 80013f4:	4a59      	ldr	r2, [pc, #356]	; (800155c <int_Hardware+0x2ec>)
 80013f6:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 80013f8:	4b57      	ldr	r3, [pc, #348]	; (8001558 <int_Hardware+0x2e8>)
 80013fa:	2202      	movs	r2, #2
 80013fc:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 80013fe:	4b56      	ldr	r3, [pc, #344]	; (8001558 <int_Hardware+0x2e8>)
 8001400:	2201      	movs	r2, #1
 8001402:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8001404:	4b54      	ldr	r3, [pc, #336]	; (8001558 <int_Hardware+0x2e8>)
 8001406:	2200      	movs	r2, #0
 8001408:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800140a:	4b53      	ldr	r3, [pc, #332]	; (8001558 <int_Hardware+0x2e8>)
 800140c:	2200      	movs	r2, #0
 800140e:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8001410:	4b51      	ldr	r3, [pc, #324]	; (8001558 <int_Hardware+0x2e8>)
 8001412:	2201      	movs	r2, #1
 8001414:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 8001416:	4b50      	ldr	r3, [pc, #320]	; (8001558 <int_Hardware+0x2e8>)
 8001418:	2201      	movs	r2, #1
 800141a:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 800141c:	484e      	ldr	r0, [pc, #312]	; (8001558 <int_Hardware+0x2e8>)
 800141e:	f003 faab 	bl	8004978 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8001422:	4b4f      	ldr	r3, [pc, #316]	; (8001560 <int_Hardware+0x2f0>)
 8001424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001428:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800142a:	4b4d      	ldr	r3, [pc, #308]	; (8001560 <int_Hardware+0x2f0>)
 800142c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001430:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001432:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <int_Hardware+0x2f0>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8001438:	4b49      	ldr	r3, [pc, #292]	; (8001560 <int_Hardware+0x2f0>)
 800143a:	22fa      	movs	r2, #250	; 0xfa
 800143c:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 800143e:	4b48      	ldr	r3, [pc, #288]	; (8001560 <int_Hardware+0x2f0>)
 8001440:	2201      	movs	r2, #1
 8001442:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 8001444:	4846      	ldr	r0, [pc, #280]	; (8001560 <int_Hardware+0x2f0>)
 8001446:	f001 fabb 	bl	80029c0 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Count.ptrTIMx = TIM3;
 800144a:	4b46      	ldr	r3, [pc, #280]	; (8001564 <int_Hardware+0x2f4>)
 800144c:	4a46      	ldr	r2, [pc, #280]	; (8001568 <int_Hardware+0x2f8>)
 800144e:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Count.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8001450:	4b44      	ldr	r3, [pc, #272]	; (8001564 <int_Hardware+0x2f4>)
 8001452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001456:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Count.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001458:	4b42      	ldr	r3, [pc, #264]	; (8001564 <int_Hardware+0x2f4>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Count.TIMx_Config.TIMX_period = 2000;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 800145e:	4b41      	ldr	r3, [pc, #260]	; (8001564 <int_Hardware+0x2f4>)
 8001460:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001464:	605a      	str	r2, [r3, #4]
	handler_TIMER_Count.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8001466:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <int_Hardware+0x2f4>)
 8001468:	2200      	movs	r2, #0
 800146a:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Count);
 800146c:	483d      	ldr	r0, [pc, #244]	; (8001564 <int_Hardware+0x2f4>)
 800146e:	f001 faa7 	bl	80029c0 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <int_Hardware+0x2fc>)
 8001474:	4a3e      	ldr	r2, [pc, #248]	; (8001570 <int_Hardware+0x300>)
 8001476:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8001478:	4b3c      	ldr	r3, [pc, #240]	; (800156c <int_Hardware+0x2fc>)
 800147a:	220a      	movs	r2, #10
 800147c:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <int_Hardware+0x2fc>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <int_Hardware+0x2fc>)
 8001486:	2264      	movs	r2, #100	; 0x64
 8001488:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <int_Hardware+0x2fc>)
 800148c:	2200      	movs	r2, #0
 800148e:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 8001490:	4836      	ldr	r0, [pc, #216]	; (800156c <int_Hardware+0x2fc>)
 8001492:	f001 fa95 	bl	80029c0 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 8001496:	4b37      	ldr	r3, [pc, #220]	; (8001574 <int_Hardware+0x304>)
 8001498:	4a23      	ldr	r2, [pc, #140]	; (8001528 <int_Hardware+0x2b8>)
 800149a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 800149c:	4b35      	ldr	r3, [pc, #212]	; (8001574 <int_Hardware+0x304>)
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 80014a2:	4b35      	ldr	r3, [pc, #212]	; (8001578 <int_Hardware+0x308>)
 80014a4:	4a33      	ldr	r2, [pc, #204]	; (8001574 <int_Hardware+0x304>)
 80014a6:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 80014a8:	4b33      	ldr	r3, [pc, #204]	; (8001578 <int_Hardware+0x308>)
 80014aa:	2202      	movs	r2, #2
 80014ac:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 80014ae:	4832      	ldr	r0, [pc, #200]	; (8001578 <int_Hardware+0x308>)
 80014b0:	f001 fc0a 	bl	8002cc8 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 80014b4:	4b31      	ldr	r3, [pc, #196]	; (800157c <int_Hardware+0x30c>)
 80014b6:	4a1c      	ldr	r2, [pc, #112]	; (8001528 <int_Hardware+0x2b8>)
 80014b8:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 80014ba:	4b30      	ldr	r3, [pc, #192]	; (800157c <int_Hardware+0x30c>)
 80014bc:	2203      	movs	r2, #3
 80014be:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 80014c0:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <int_Hardware+0x310>)
 80014c2:	4a2e      	ldr	r2, [pc, #184]	; (800157c <int_Hardware+0x30c>)
 80014c4:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <int_Hardware+0x310>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 80014cc:	482c      	ldr	r0, [pc, #176]	; (8001580 <int_Hardware+0x310>)
 80014ce:	f001 fbfb 	bl	8002cc8 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <int_Hardware+0x314>)
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <int_Hardware+0x300>)
 80014d6:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <int_Hardware+0x314>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 80014de:	4b29      	ldr	r3, [pc, #164]	; (8001584 <int_Hardware+0x314>)
 80014e0:	220a      	movs	r2, #10
 80014e2:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <int_Hardware+0x314>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 80014ea:	4826      	ldr	r0, [pc, #152]	; (8001584 <int_Hardware+0x314>)
 80014ec:	f002 ff48 	bl	8004380 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 80014f0:	2101      	movs	r1, #1
 80014f2:	4824      	ldr	r0, [pc, #144]	; (8001584 <int_Hardware+0x314>)
 80014f4:	f003 f8a4 	bl	8004640 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <int_Hardware+0x318>)
 80014fa:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <int_Hardware+0x300>)
 80014fc:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <int_Hardware+0x318>)
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <int_Hardware+0x318>)
 8001506:	220a      	movs	r2, #10
 8001508:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <int_Hardware+0x318>)
 800150c:	2201      	movs	r2, #1
 800150e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8001510:	481d      	ldr	r0, [pc, #116]	; (8001588 <int_Hardware+0x318>)
 8001512:	f002 ff35 	bl	8004380 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 8001516:	2101      	movs	r1, #1
 8001518:	481b      	ldr	r0, [pc, #108]	; (8001588 <int_Hardware+0x318>)
 800151a:	f003 f891 	bl	8004640 <statusInOutPWM>

	//---------------------Fin de Configuracion PWM_Channelx-----------------------


}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000021c 	.word	0x2000021c
 8001528:	40020800 	.word	0x40020800
 800152c:	20000200 	.word	0x20000200
 8001530:	40020000 	.word	0x40020000
 8001534:	20000250 	.word	0x20000250
 8001538:	2000025c 	.word	0x2000025c
 800153c:	200002b4 	.word	0x200002b4
 8001540:	200002c0 	.word	0x200002c0
 8001544:	200002cc 	.word	0x200002cc
 8001548:	20000330 	.word	0x20000330
 800154c:	2000033c 	.word	0x2000033c
 8001550:	40020c00 	.word	0x40020c00
 8001554:	20000348 	.word	0x20000348
 8001558:	20000268 	.word	0x20000268
 800155c:	40011000 	.word	0x40011000
 8001560:	2000020c 	.word	0x2000020c
 8001564:	200003bc 	.word	0x200003bc
 8001568:	40000400 	.word	0x40000400
 800156c:	200003ac 	.word	0x200003ac
 8001570:	40000c00 	.word	0x40000c00
 8001574:	20000228 	.word	0x20000228
 8001578:	20000234 	.word	0x20000234
 800157c:	2000023c 	.word	0x2000023c
 8001580:	20000248 	.word	0x20000248
 8001584:	200002d8 	.word	0x200002d8
 8001588:	20000354 	.word	0x20000354

0800158c <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 8001590:	2000      	movs	r0, #0
 8001592:	f002 fe79 	bl	8004288 <configMCO2>
	configMCO2PRE(4);
 8001596:	2004      	movs	r0, #4
 8001598:	f002 fe92 	bl	80042c0 <configMCO2PRE>
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <int_Config_Motor>:
//------------------------------Fin configuracion MCO1------------------------------------------


//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  20;
 80015a6:	4b38      	ldr	r3, [pc, #224]	; (8001688 <int_Config_Motor+0xe8>)
 80015a8:	4a38      	ldr	r2, [pc, #224]	; (800168c <int_Config_Motor+0xec>)
 80015aa:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.configMotor.frecuency = &value_period;
 80015ac:	4b36      	ldr	r3, [pc, #216]	; (8001688 <int_Config_Motor+0xe8>)
 80015ae:	4a38      	ldr	r2, [pc, #224]	; (8001690 <int_Config_Motor+0xf0>)
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_R.configMotor.dir = SET;
 80015b2:	4b35      	ldr	r3, [pc, #212]	; (8001688 <int_Config_Motor+0xe8>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 80015ba:	4b33      	ldr	r3, [pc, #204]	; (8001688 <int_Config_Motor+0xe8>)
 80015bc:	4a35      	ldr	r2, [pc, #212]	; (8001694 <int_Config_Motor+0xf4>)
 80015be:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 80015c0:	4b31      	ldr	r3, [pc, #196]	; (8001688 <int_Config_Motor+0xe8>)
 80015c2:	4a35      	ldr	r2, [pc, #212]	; (8001698 <int_Config_Motor+0xf8>)
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 80015c6:	4b30      	ldr	r3, [pc, #192]	; (8001688 <int_Config_Motor+0xe8>)
 80015c8:	4a34      	ldr	r2, [pc, #208]	; (800169c <int_Config_Motor+0xfc>)
 80015ca:	649a      	str	r2, [r3, #72]	; 0x48
	//definicion de parametros
	handler_Motor_R.parametersMotor.e = handler_Motor_R.parametersMotor.e_1 = handler_Motor_R.parametersMotor.e_2 = 0;
 80015cc:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <int_Config_Motor+0xe8>)
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
 80015d4:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <int_Config_Motor+0xe8>)
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	4a2b      	ldr	r2, [pc, #172]	; (8001688 <int_Config_Motor+0xe8>)
 80015da:	60d3      	str	r3, [r2, #12]
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <int_Config_Motor+0xe8>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	4a29      	ldr	r2, [pc, #164]	; (8001688 <int_Config_Motor+0xe8>)
 80015e2:	6093      	str	r3, [r2, #8]
	handler_Motor_R.parametersMotor.u = handler_Motor_R.parametersMotor.u_1 = 0;
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <int_Config_Motor+0xe8>)
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <int_Config_Motor+0xe8>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4a25      	ldr	r2, [pc, #148]	; (8001688 <int_Config_Motor+0xe8>)
 80015f2:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	float theta=25+Ts/2;
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <int_Config_Motor+0x100>)
 80015f6:	ed93 7a00 	vldr	s14, [r3]
 80015fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001602:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001606:	ee77 7a87 	vadd.f32	s15, s15, s14
 800160a:	edc7 7a01 	vstr	s15, [r7, #4]
	constains_calculator(&handler_Motor_R, 2.2, 50, theta);   //k,tau,theta
 800160e:	ed97 1a01 	vldr	s2, [r7, #4]
 8001612:	eddf 0a24 	vldr	s1, [pc, #144]	; 80016a4 <int_Config_Motor+0x104>
 8001616:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80016a8 <int_Config_Motor+0x108>
 800161a:	481b      	ldr	r0, [pc, #108]	; (8001688 <int_Config_Motor+0xe8>)
 800161c:	f000 ffd2 	bl	80025c4 <constains_calculator>

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  20;
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <int_Config_Motor+0x10c>)
 8001622:	4a1a      	ldr	r2, [pc, #104]	; (800168c <int_Config_Motor+0xec>)
 8001624:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.configMotor.frecuency = &value_period;
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <int_Config_Motor+0x10c>)
 8001628:	4a19      	ldr	r2, [pc, #100]	; (8001690 <int_Config_Motor+0xf0>)
 800162a:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_L.configMotor.dir = SET;
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <int_Config_Motor+0x10c>)
 800162e:	2201      	movs	r2, #1
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <int_Config_Motor+0x10c>)
 8001636:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <int_Config_Motor+0x110>)
 8001638:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <int_Config_Motor+0x10c>)
 800163c:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <int_Config_Motor+0x114>)
 800163e:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <int_Config_Motor+0x10c>)
 8001642:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <int_Config_Motor+0x118>)
 8001644:	649a      	str	r2, [r3, #72]	; 0x48
	//definicion de parametros
	handler_Motor_L.parametersMotor.e = handler_Motor_L.parametersMotor.e_1 = handler_Motor_L.parametersMotor.e_2 = 0;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <int_Config_Motor+0x10c>)
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <int_Config_Motor+0x10c>)
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	4a16      	ldr	r2, [pc, #88]	; (80016ac <int_Config_Motor+0x10c>)
 8001654:	60d3      	str	r3, [r2, #12]
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <int_Config_Motor+0x10c>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	4a14      	ldr	r2, [pc, #80]	; (80016ac <int_Config_Motor+0x10c>)
 800165c:	6093      	str	r3, [r2, #8]
	handler_Motor_L.parametersMotor.u = handler_Motor_L.parametersMotor.u_1 = 0;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <int_Config_Motor+0x10c>)
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <int_Config_Motor+0x10c>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4a10      	ldr	r2, [pc, #64]	; (80016ac <int_Config_Motor+0x10c>)
 800166c:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&handler_Motor_L, 2.2, 50, theta);   //k,tau,theta
 800166e:	ed97 1a01 	vldr	s2, [r7, #4]
 8001672:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80016a4 <int_Config_Motor+0x104>
 8001676:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80016a8 <int_Config_Motor+0x108>
 800167a:	480c      	ldr	r0, [pc, #48]	; (80016ac <int_Config_Motor+0x10c>)
 800167c:	f000 ffa2 	bl	80025c4 <constains_calculator>

};
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200002e4 	.word	0x200002e4
 800168c:	41a00000 	.word	0x41a00000
 8001690:	20000002 	.word	0x20000002
 8001694:	200002cc 	.word	0x200002cc
 8001698:	200002c0 	.word	0x200002c0
 800169c:	200002d8 	.word	0x200002d8
 80016a0:	20000004 	.word	0x20000004
 80016a4:	42480000 	.word	0x42480000
 80016a8:	400ccccd 	.word	0x400ccccd
 80016ac:	20000360 	.word	0x20000360
 80016b0:	20000348 	.word	0x20000348
 80016b4:	2000033c 	.word	0x2000033c
 80016b8:	20000354 	.word	0x20000354

080016bc <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <BasicTimer2_Callback+0x10>)
 80016c2:	f002 fd18 	bl	80040f6 <GPIOxTooglePin>
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000200 	.word	0x20000200

080016d0 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 80016d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016d4:	ed2d 8b02 	vpush	{d8}
 80016d8:	b085      	sub	sp, #20
 80016da:	af04      	add	r7, sp, #16
	if(flag_motor==1)
 80016dc:	4ba6      	ldr	r3, [pc, #664]	; (8001978 <BasicTimer3_Callback+0x2a8>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	f040 8124 	bne.w	800192e <BasicTimer3_Callback+0x25e>
	{
		//Calculamos la velocidad
		handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 80016e6:	4ba5      	ldr	r3, [pc, #660]	; (800197c <BasicTimer3_Callback+0x2ac>)
 80016e8:	8c1b      	ldrh	r3, [r3, #32]
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f2:	4ba3      	ldr	r3, [pc, #652]	; (8001980 <BasicTimer3_Callback+0x2b0>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fc:	4b9f      	ldr	r3, [pc, #636]	; (800197c <BasicTimer3_Callback+0x2ac>)
 80016fe:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 8001702:	4ba0      	ldr	r3, [pc, #640]	; (8001984 <BasicTimer3_Callback+0x2b4>)
 8001704:	8c1b      	ldrh	r3, [r3, #32]
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170e:	4b9e      	ldr	r3, [pc, #632]	; (8001988 <BasicTimer3_Callback+0x2b8>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001718:	4b9a      	ldr	r3, [pc, #616]	; (8001984 <BasicTimer3_Callback+0x2b4>)
 800171a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 800171e:	4b97      	ldr	r3, [pc, #604]	; (800197c <BasicTimer3_Callback+0x2ac>)
 8001720:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001724:	4b99      	ldr	r3, [pc, #612]	; (800198c <BasicTimer3_Callback+0x2bc>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001734:	4b91      	ldr	r3, [pc, #580]	; (800197c <BasicTimer3_Callback+0x2ac>)
 8001736:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 800173a:	4b92      	ldr	r3, [pc, #584]	; (8001984 <BasicTimer3_Callback+0x2b4>)
 800173c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001740:	4b92      	ldr	r3, [pc, #584]	; (800198c <BasicTimer3_Callback+0x2bc>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800174c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001750:	4b8c      	ldr	r3, [pc, #560]	; (8001984 <BasicTimer3_Callback+0x2b4>)
 8001752:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		//Calculo odometria
		phi = phi + ((handler_Motor_R.parametersMotor.distance-handler_Motor_L.parametersMotor.distance)*100)/b;   //[rad]
 8001756:	4b8b      	ldr	r3, [pc, #556]	; (8001984 <BasicTimer3_Callback+0x2b4>)
 8001758:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800175c:	4b87      	ldr	r3, [pc, #540]	; (800197c <BasicTimer3_Callback+0x2ac>)
 800175e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001766:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001990 <BasicTimer3_Callback+0x2c0>
 800176a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176e:	eddf 6a89 	vldr	s13, [pc, #548]	; 8001994 <BasicTimer3_Callback+0x2c4>
 8001772:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001776:	4b88      	ldr	r3, [pc, #544]	; (8001998 <BasicTimer3_Callback+0x2c8>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001780:	4b85      	ldr	r3, [pc, #532]	; (8001998 <BasicTimer3_Callback+0x2c8>)
 8001782:	edc3 7a00 	vstr	s15, [r3]
		phi = atan2(sin(phi),cos(phi));
 8001786:	4b84      	ldr	r3, [pc, #528]	; (8001998 <BasicTimer3_Callback+0x2c8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fef4 	bl	8000578 <__aeabi_f2d>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	ec43 2b10 	vmov	d0, r2, r3
 8001798:	f008 fe92 	bl	800a4c0 <sin>
 800179c:	eeb0 8a40 	vmov.f32	s16, s0
 80017a0:	eef0 8a60 	vmov.f32	s17, s1
 80017a4:	4b7c      	ldr	r3, [pc, #496]	; (8001998 <BasicTimer3_Callback+0x2c8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fee5 	bl	8000578 <__aeabi_f2d>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	ec43 2b10 	vmov	d0, r2, r3
 80017b6:	f008 fe2f 	bl	800a418 <cos>
 80017ba:	eeb0 7a40 	vmov.f32	s14, s0
 80017be:	eef0 7a60 	vmov.f32	s15, s1
 80017c2:	eeb0 1a47 	vmov.f32	s2, s14
 80017c6:	eef0 1a67 	vmov.f32	s3, s15
 80017ca:	eeb0 0a48 	vmov.f32	s0, s16
 80017ce:	eef0 0a68 	vmov.f32	s1, s17
 80017d2:	f008 fecd 	bl	800a570 <atan2>
 80017d6:	ec53 2b10 	vmov	r2, r3, d0
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff fa1b 	bl	8000c18 <__aeabi_d2f>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a6c      	ldr	r2, [pc, #432]	; (8001998 <BasicTimer3_Callback+0x2c8>)
 80017e6:	6013      	str	r3, [r2, #0]
		distance_c = (handler_Motor_R.parametersMotor.distance+handler_Motor_L.parametersMotor.distance)/2;  	   //[mm]
 80017e8:	4b66      	ldr	r3, [pc, #408]	; (8001984 <BasicTimer3_Callback+0x2b4>)
 80017ea:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80017ee:	4b63      	ldr	r3, [pc, #396]	; (800197c <BasicTimer3_Callback+0x2ac>)
 80017f0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80017f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80017fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001800:	4b66      	ldr	r3, [pc, #408]	; (800199c <BasicTimer3_Callback+0x2cc>)
 8001802:	edc3 7a00 	vstr	s15, [r3]
		velocity_c = (handler_Motor_R.parametersMotor.velocity+handler_Motor_L.parametersMotor.velocity)/2;        //[m/s]
 8001806:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <BasicTimer3_Callback+0x2b4>)
 8001808:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800180c:	4b5b      	ldr	r3, [pc, #364]	; (800197c <BasicTimer3_Callback+0x2ac>)
 800180e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001816:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800181a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800181e:	4b60      	ldr	r3, [pc, #384]	; (80019a0 <BasicTimer3_Callback+0x2d0>)
 8001820:	edc3 7a00 	vstr	s15, [r3]
		w_angular_c = ((handler_Motor_R.parametersMotor.velocity-handler_Motor_L.parametersMotor.velocity)*100000)/b; //[rad/s]
 8001824:	4b57      	ldr	r3, [pc, #348]	; (8001984 <BasicTimer3_Callback+0x2b4>)
 8001826:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800182a:	4b54      	ldr	r3, [pc, #336]	; (800197c <BasicTimer3_Callback+0x2ac>)
 800182c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001834:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80019a4 <BasicTimer3_Callback+0x2d4>
 8001838:	ee27 7a87 	vmul.f32	s14, s15, s14
 800183c:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001994 <BasicTimer3_Callback+0x2c4>
 8001840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001844:	4b58      	ldr	r3, [pc, #352]	; (80019a8 <BasicTimer3_Callback+0x2d8>)
 8001846:	edc3 7a00 	vstr	s15, [r3]
		x_position = x_position + (distance_c*(cos(phi)))/1000;        //[m]
 800184a:	4b58      	ldr	r3, [pc, #352]	; (80019ac <BasicTimer3_Callback+0x2dc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe92 	bl	8000578 <__aeabi_f2d>
 8001854:	4604      	mov	r4, r0
 8001856:	460d      	mov	r5, r1
 8001858:	4b50      	ldr	r3, [pc, #320]	; (800199c <BasicTimer3_Callback+0x2cc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe8b 	bl	8000578 <__aeabi_f2d>
 8001862:	4680      	mov	r8, r0
 8001864:	4689      	mov	r9, r1
 8001866:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <BasicTimer3_Callback+0x2c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe84 	bl	8000578 <__aeabi_f2d>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	ec43 2b10 	vmov	d0, r2, r3
 8001878:	f008 fdce 	bl	800a418 <cos>
 800187c:	ec53 2b10 	vmov	r2, r3, d0
 8001880:	4640      	mov	r0, r8
 8001882:	4649      	mov	r1, r9
 8001884:	f7fe fed0 	bl	8000628 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <BasicTimer3_Callback+0x2e0>)
 8001896:	f7fe fff1 	bl	800087c <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f7fe fd0b 	bl	80002bc <__adddf3>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	f7ff f9b3 	bl	8000c18 <__aeabi_d2f>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4a3d      	ldr	r2, [pc, #244]	; (80019ac <BasicTimer3_Callback+0x2dc>)
 80018b6:	6013      	str	r3, [r2, #0]
		y_position = y_position + (distance_c*(sin(phi)))/1000;        //[m]
 80018b8:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <BasicTimer3_Callback+0x2e4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe5b 	bl	8000578 <__aeabi_f2d>
 80018c2:	4604      	mov	r4, r0
 80018c4:	460d      	mov	r5, r1
 80018c6:	4b35      	ldr	r3, [pc, #212]	; (800199c <BasicTimer3_Callback+0x2cc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe54 	bl	8000578 <__aeabi_f2d>
 80018d0:	4680      	mov	r8, r0
 80018d2:	4689      	mov	r9, r1
 80018d4:	4b30      	ldr	r3, [pc, #192]	; (8001998 <BasicTimer3_Callback+0x2c8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe4d 	bl	8000578 <__aeabi_f2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	ec43 2b10 	vmov	d0, r2, r3
 80018e6:	f008 fdeb 	bl	800a4c0 <sin>
 80018ea:	ec53 2b10 	vmov	r2, r3, d0
 80018ee:	4640      	mov	r0, r8
 80018f0:	4649      	mov	r1, r9
 80018f2:	f7fe fe99 	bl	8000628 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <BasicTimer3_Callback+0x2e0>)
 8001904:	f7fe ffba 	bl	800087c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4620      	mov	r0, r4
 800190e:	4629      	mov	r1, r5
 8001910:	f7fe fcd4 	bl	80002bc <__adddf3>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f97c 	bl	8000c18 <__aeabi_d2f>
 8001920:	4603      	mov	r3, r0
 8001922:	4a24      	ldr	r2, [pc, #144]	; (80019b4 <BasicTimer3_Callback+0x2e4>)
 8001924:	6013      	str	r3, [r2, #0]
		//Subimos la bandera
		flag_PID = 1;
 8001926:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <BasicTimer3_Callback+0x2e8>)
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
		//Reiniciamos el numero de conteos
		handler_Motor_R.parametersMotor.count = 0;
		handler_Motor_L.parametersMotor.count = 0;
	}

}
 800192c:	e09a      	b.n	8001a64 <BasicTimer3_Callback+0x394>
	else if(flag_motor==3)
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <BasicTimer3_Callback+0x2a8>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d14a      	bne.n	80019cc <BasicTimer3_Callback+0x2fc>
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 8001936:	4b21      	ldr	r3, [pc, #132]	; (80019bc <BasicTimer3_Callback+0x2ec>)
 8001938:	881a      	ldrh	r2, [r3, #0]
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <BasicTimer3_Callback+0x2bc>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <BasicTimer3_Callback+0x2ec>)
 8001944:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%u\t%u\n", count_time,(handler_Motor_R.parametersMotor.count), (handler_Motor_L.parametersMotor.count));
 8001946:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <BasicTimer3_Callback+0x2ec>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <BasicTimer3_Callback+0x2b4>)
 800194e:	8c1b      	ldrh	r3, [r3, #32]
 8001950:	4619      	mov	r1, r3
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <BasicTimer3_Callback+0x2ac>)
 8001954:	8c1b      	ldrh	r3, [r3, #32]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	460b      	mov	r3, r1
 800195a:	4919      	ldr	r1, [pc, #100]	; (80019c0 <BasicTimer3_Callback+0x2f0>)
 800195c:	4819      	ldr	r0, [pc, #100]	; (80019c4 <BasicTimer3_Callback+0x2f4>)
 800195e:	f004 fb31 	bl	8005fc4 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001962:	4918      	ldr	r1, [pc, #96]	; (80019c4 <BasicTimer3_Callback+0x2f4>)
 8001964:	4818      	ldr	r0, [pc, #96]	; (80019c8 <BasicTimer3_Callback+0x2f8>)
 8001966:	f003 fa73 	bl	8004e50 <writeMsgForTXE>
		handler_Motor_R.parametersMotor.count = 0;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <BasicTimer3_Callback+0x2b4>)
 800196c:	2200      	movs	r2, #0
 800196e:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <BasicTimer3_Callback+0x2ac>)
 8001972:	2200      	movs	r2, #0
 8001974:	841a      	strh	r2, [r3, #32]
}
 8001976:	e075      	b.n	8001a64 <BasicTimer3_Callback+0x394>
 8001978:	200003fc 	.word	0x200003fc
 800197c:	20000360 	.word	0x20000360
 8001980:	200003d8 	.word	0x200003d8
 8001984:	200002e4 	.word	0x200002e4
 8001988:	200003dc 	.word	0x200003dc
 800198c:	20000008 	.word	0x20000008
 8001990:	42c80000 	.word	0x42c80000
 8001994:	4622f800 	.word	0x4622f800
 8001998:	200003e0 	.word	0x200003e0
 800199c:	200003e4 	.word	0x200003e4
 80019a0:	200003e8 	.word	0x200003e8
 80019a4:	47c35000 	.word	0x47c35000
 80019a8:	200003ec 	.word	0x200003ec
 80019ac:	200003f0 	.word	0x200003f0
 80019b0:	408f4000 	.word	0x408f4000
 80019b4:	200003f4 	.word	0x200003f4
 80019b8:	200003d4 	.word	0x200003d4
 80019bc:	200003fe 	.word	0x200003fe
 80019c0:	0800c780 	.word	0x0800c780
 80019c4:	20000274 	.word	0x20000274
 80019c8:	20000268 	.word	0x20000268
	else if(flag_motor==4)
 80019cc:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <BasicTimer3_Callback+0x3a4>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d147      	bne.n	8001a64 <BasicTimer3_Callback+0x394>
		handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <BasicTimer3_Callback+0x3a8>)
 80019d6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80019da:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <BasicTimer3_Callback+0x3ac>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ea:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <BasicTimer3_Callback+0x3a8>)
 80019ec:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <BasicTimer3_Callback+0x3b0>)
 80019f2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <BasicTimer3_Callback+0x3ac>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <BasicTimer3_Callback+0x3b0>)
 8001a08:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <BasicTimer3_Callback+0x3b4>)
 8001a0e:	881a      	ldrh	r2, [r3, #0]
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <BasicTimer3_Callback+0x3ac>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <BasicTimer3_Callback+0x3b4>)
 8001a1a:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%#.4f\t%#.4f\n", count_time, handler_Motor_L.parametersMotor.velocity , handler_Motor_R.parametersMotor.velocity);
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <BasicTimer3_Callback+0x3b4>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	461e      	mov	r6, r3
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <BasicTimer3_Callback+0x3a8>)
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fda6 	bl	8000578 <__aeabi_f2d>
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	460d      	mov	r5, r1
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <BasicTimer3_Callback+0x3b0>)
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd9f 	bl	8000578 <__aeabi_f2d>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a42:	e9cd 4500 	strd	r4, r5, [sp]
 8001a46:	4632      	mov	r2, r6
 8001a48:	490f      	ldr	r1, [pc, #60]	; (8001a88 <BasicTimer3_Callback+0x3b8>)
 8001a4a:	4810      	ldr	r0, [pc, #64]	; (8001a8c <BasicTimer3_Callback+0x3bc>)
 8001a4c:	f004 faba 	bl	8005fc4 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001a50:	490e      	ldr	r1, [pc, #56]	; (8001a8c <BasicTimer3_Callback+0x3bc>)
 8001a52:	480f      	ldr	r0, [pc, #60]	; (8001a90 <BasicTimer3_Callback+0x3c0>)
 8001a54:	f003 f9fc 	bl	8004e50 <writeMsgForTXE>
		handler_Motor_R.parametersMotor.count = 0;
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <BasicTimer3_Callback+0x3b0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <BasicTimer3_Callback+0x3a8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	841a      	strh	r2, [r3, #32]
}
 8001a64:	bf00      	nop
 8001a66:	3704      	adds	r7, #4
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	ecbd 8b02 	vpop	{d8}
 8001a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a72:	bf00      	nop
 8001a74:	200003fc 	.word	0x200003fc
 8001a78:	20000360 	.word	0x20000360
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	200002e4 	.word	0x200002e4
 8001a84:	200003fe 	.word	0x200003fe
 8001a88:	0800c78c 	.word	0x0800c78c
 8001a8c:	20000274 	.word	0x20000274
 8001a90:	20000268 	.word	0x20000268

08001a94 <BasicUSART1_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART1_Callback(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 8001a98:	f003 fa18 	bl	8004ecc <getRxData>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b02      	ldr	r3, [pc, #8]	; (8001aac <BasicUSART1_Callback+0x18>)
 8001aa2:	701a      	strb	r2, [r3, #0]
	//Funcion que almacena los caracteres del comando recibido
	recepcionCommand();
 8001aa4:	f000 f8a8 	bl	8001bf8 <recepcionCommand>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000000 	.word	0x20000000

08001ab0 <callback_extInt1>:


//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	handler_Motor_R.parametersMotor.count++;
 8001ab4:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <callback_extInt1+0x88>)
 8001ab6:	8c1b      	ldrh	r3, [r3, #32]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <callback_extInt1+0x88>)
 8001abe:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous++;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <callback_extInt1+0x88>)
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <callback_extInt1+0x88>)
 8001ac8:	6253      	str	r3, [r2, #36]	; 0x24
	//calculo del tiempo entre interrupcion
//	uint64_t timeNow = getTicksUs();
//	handler_Motor_R.parametersMotor.timeCount = timeNow-timeBackR;
//	timeBackR = timeNow;
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==1 && (limit_count_turn)<(handler_Motor_R.parametersMotor.count))
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <callback_extInt1+0x8c>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d112      	bne.n	8001af8 <callback_extInt1+0x48>
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <callback_extInt1+0x90>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10e      	bne.n	8001af8 <callback_extInt1+0x48>
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <callback_extInt1+0x88>)
 8001adc:	8c1a      	ldrh	r2, [r3, #32]
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <callback_extInt1+0x94>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d908      	bls.n	8001af8 <callback_extInt1+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f000 fc9e 	bl	8002428 <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <callback_extInt1+0x98>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fae8 	bl	80010c6 <updateDirMotor>
	{
		//Desactivamos los motores
		status_motor(RESET);
	}

}
 8001af6:	e01d      	b.n	8001b34 <callback_extInt1+0x84>
	else if(flag_motor==1 && distance<(cm_R*handler_Motor_R.parametersMotor.countCotinuous))
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <callback_extInt1+0x8c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d119      	bne.n	8001b34 <callback_extInt1+0x84>
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <callback_extInt1+0x9c>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <callback_extInt1+0x88>)
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	ee07 3a90 	vmov	s15, r3
 8001b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <callback_extInt1+0xa0>)
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	d400      	bmi.n	8001b2e <callback_extInt1+0x7e>
}
 8001b2c:	e002      	b.n	8001b34 <callback_extInt1+0x84>
		status_motor(RESET);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f000 fc7a 	bl	8002428 <status_motor>
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200002e4 	.word	0x200002e4
 8001b3c:	200003fc 	.word	0x200003fc
 8001b40:	200003fd 	.word	0x200003fd
 8001b44:	20000400 	.word	0x20000400
 8001b48:	200003f8 	.word	0x200003f8
 8001b4c:	200003cc 	.word	0x200003cc
 8001b50:	200003dc 	.word	0x200003dc

08001b54 <callback_extInt3>:
void callback_extInt3(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	handler_Motor_L.parametersMotor.count++;
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <callback_extInt3+0x88>)
 8001b5a:	8c1b      	ldrh	r3, [r3, #32]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <callback_extInt3+0x88>)
 8001b62:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.countCotinuous++;
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <callback_extInt3+0x88>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <callback_extInt3+0x88>)
 8001b6c:	6253      	str	r3, [r2, #36]	; 0x24
	//calculo del tiempo entre interrupcion
//	uint64_t timeNow = getTicksUs();
//	handler_Motor_L.parametersMotor.timeCount = timeNow-timeBackL;
//	timeBackL = timeNow;
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==2 && (limit_count_turn)<(handler_Motor_L.parametersMotor.count))
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <callback_extInt3+0x8c>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d112      	bne.n	8001b9c <callback_extInt3+0x48>
 8001b76:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <callback_extInt3+0x90>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d10e      	bne.n	8001b9c <callback_extInt3+0x48>
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <callback_extInt3+0x88>)
 8001b80:	8c1a      	ldrh	r2, [r3, #32]
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <callback_extInt3+0x94>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d908      	bls.n	8001b9c <callback_extInt3+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f000 fc4c 	bl	8002428 <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <callback_extInt3+0x98>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fa96 	bl	80010c6 <updateDirMotor>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
	{
		//Desactivamos los motores
		status_motor(RESET);
	}
}
 8001b9a:	e01d      	b.n	8001bd8 <callback_extInt3+0x84>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <callback_extInt3+0x8c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d119      	bne.n	8001bd8 <callback_extInt3+0x84>
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <callback_extInt3+0x9c>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <callback_extInt3+0x88>)
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <callback_extInt3+0xa0>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bce:	d400      	bmi.n	8001bd2 <callback_extInt3+0x7e>
}
 8001bd0:	e002      	b.n	8001bd8 <callback_extInt3+0x84>
		status_motor(RESET);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f000 fc28 	bl	8002428 <status_motor>
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000360 	.word	0x20000360
 8001be0:	200003fc 	.word	0x200003fc
 8001be4:	200003fd 	.word	0x200003fd
 8001be8:	20000400 	.word	0x20000400
 8001bec:	200003f8 	.word	0x200003f8
 8001bf0:	200003cc 	.word	0x200003cc
 8001bf4:	200003d8 	.word	0x200003d8

08001bf8 <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
	if(charRead == '@')
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <recepcionCommand+0x4c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b40      	cmp	r3, #64	; 0x40
 8001c02:	d10c      	bne.n	8001c1e <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <recepcionCommand+0x50>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <recepcionCommand+0x54>)
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <recepcionCommand+0x58>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <recepcionCommand+0x50>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 8001c1c:	e00c      	b.n	8001c38 <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <recepcionCommand+0x50>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <recepcionCommand+0x4c>)
 8001c26:	7819      	ldrb	r1, [r3, #0]
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <recepcionCommand+0x54>)
 8001c2a:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <recepcionCommand+0x50>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <recepcionCommand+0x50>)
 8001c36:	701a      	strb	r2, [r3, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000408 	.word	0x20000408
 8001c4c:	2000040c 	.word	0x2000040c
 8001c50:	2000000c 	.word	0x2000000c
 8001c54:	00000000 	.word	0x00000000

08001c58 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b09d      	sub	sp, #116	; 0x74
 8001c5c:	af04      	add	r7, sp, #16
 8001c5e:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	223c      	movs	r2, #60	; 0x3c
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 fb21 	bl	80052b4 <memset>
	int firtsParameter = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
	int secondParameter = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
	int thirdParameter = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
	int forthParameter = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 8001c82:	f107 0118 	add.w	r1, r7, #24
 8001c86:	f107 021c 	add.w	r2, r7, #28
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	49ae      	ldr	r1, [pc, #696]	; (8001f58 <runCommand+0x300>)
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f004 f9af 	bl	8006004 <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	49ac      	ldr	r1, [pc, #688]	; (8001f5c <runCommand+0x304>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fa97 	bl	80001e0 <strcmp>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d128      	bne.n	8001d0a <runCommand+0xb2>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 8001cb8:	49a9      	ldr	r1, [pc, #676]	; (8001f60 <runCommand+0x308>)
 8001cba:	48aa      	ldr	r0, [pc, #680]	; (8001f64 <runCommand+0x30c>)
 8001cbc:	f003 f8c8 	bl	8004e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 8001cc0:	49a9      	ldr	r1, [pc, #676]	; (8001f68 <runCommand+0x310>)
 8001cc2:	48a8      	ldr	r0, [pc, #672]	; (8001f64 <runCommand+0x30c>)
 8001cc4:	f003 f8c4 	bl	8004e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) frequency # --- Cambiar el valor de la frecuenencia de las pruebas, [HZ] \n");
 8001cc8:	49a8      	ldr	r1, [pc, #672]	; (8001f6c <runCommand+0x314>)
 8001cca:	48a6      	ldr	r0, [pc, #664]	; (8001f64 <runCommand+0x30c>)
 8001ccc:	f003 f8c0 	bl	8004e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) line # # #---Inicia Linea recta, #: dist [mm], #: dutty de estabilidad , #: ang. \n");
 8001cd0:	49a7      	ldr	r1, [pc, #668]	; (8001f70 <runCommand+0x318>)
 8001cd2:	48a4      	ldr	r0, [pc, #656]	; (8001f64 <runCommand+0x30c>)
 8001cd4:	f003 f8bc 	bl	8004e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) turn # # # # ---Iniciamos el giro del robot #: ang #:dir #:dutty_R \n");
 8001cd8:	49a6      	ldr	r1, [pc, #664]	; (8001f74 <runCommand+0x31c>)
 8001cda:	48a2      	ldr	r0, [pc, #648]	; (8001f64 <runCommand+0x30c>)
 8001cdc:	f003 f8b8 	bl	8004e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "5) start # # # # ---Inicia movimiento, #: perTC [ms], #: dutty_L, #dutty_R, #: freqTP [Hz] \n");
 8001ce0:	49a5      	ldr	r1, [pc, #660]	; (8001f78 <runCommand+0x320>)
 8001ce2:	48a0      	ldr	r0, [pc, #640]	; (8001f64 <runCommand+0x30c>)
 8001ce4:	f003 f8b4 	bl	8004e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) reaction # # # ---Inicia Curva de reaccion,#: perTC [ms], #: dutty_L y dutty_R, #: freqTP [Hz] \n");
 8001ce8:	49a4      	ldr	r1, [pc, #656]	; (8001f7c <runCommand+0x324>)
 8001cea:	489e      	ldr	r0, [pc, #632]	; (8001f64 <runCommand+0x30c>)
 8001cec:	f003 f8b0 	bl	8004e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "7) stop ---Para el estudio en medio de la ejecucion \n");
 8001cf0:	49a3      	ldr	r1, [pc, #652]	; (8001f80 <runCommand+0x328>)
 8001cf2:	489c      	ldr	r0, [pc, #624]	; (8001f64 <runCommand+0x30c>)
 8001cf4:	f003 f8ac 	bl	8004e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) const # # # ---Constantes del PID #: L,k,tau \n");
 8001cf8:	49a2      	ldr	r1, [pc, #648]	; (8001f84 <runCommand+0x32c>)
 8001cfa:	489a      	ldr	r0, [pc, #616]	; (8001f64 <runCommand+0x30c>)
 8001cfc:	f003 f8a8 	bl	8004e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) equation # #  ---Constantes de la ecuacion lineal #: m,b  591.91-->59191 \n");
 8001d00:	49a1      	ldr	r1, [pc, #644]	; (8001f88 <runCommand+0x330>)
 8001d02:	4898      	ldr	r0, [pc, #608]	; (8001f64 <runCommand+0x30c>)
 8001d04:	f003 f8a4 	bl	8004e50 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 8001d08:	e1e3      	b.n	80020d2 <runCommand+0x47a>
	else if (strcmp(cmd, "frequency") == 0)
 8001d0a:	f107 031c 	add.w	r3, r7, #28
 8001d0e:	499f      	ldr	r1, [pc, #636]	; (8001f8c <runCommand+0x334>)
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fa65 	bl	80001e0 <strcmp>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <runCommand+0xd4>
		frequency_PWM_Motor = 100000/firtsParameter;
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	4a9c      	ldr	r2, [pc, #624]	; (8001f90 <runCommand+0x338>)
 8001d20:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	4b9b      	ldr	r3, [pc, #620]	; (8001f94 <runCommand+0x33c>)
 8001d28:	801a      	strh	r2, [r3, #0]
}
 8001d2a:	e1d2      	b.n	80020d2 <runCommand+0x47a>
	else if (strcmp(cmd, "line") == 0)
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4999      	ldr	r1, [pc, #612]	; (8001f98 <runCommand+0x340>)
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fa54 	bl	80001e0 <strcmp>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d151      	bne.n	8001de2 <runCommand+0x18a>
		periodo_TIMER_Count = Ts;
 8001d3e:	4b97      	ldr	r3, [pc, #604]	; (8001f9c <runCommand+0x344>)
 8001d40:	edd3 7a00 	vldr	s15, [r3]
 8001d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d48:	ee17 3a90 	vmov	r3, s15
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	4b94      	ldr	r3, [pc, #592]	; (8001fa0 <runCommand+0x348>)
 8001d50:	801a      	strh	r2, [r3, #0]
		distance = firtsParameter;
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b93      	ldr	r3, [pc, #588]	; (8001fa4 <runCommand+0x34c>)
 8001d58:	801a      	strh	r2, [r3, #0]
		duttyInicial = secondParameter;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	ee07 3a90 	vmov	s15, r3
 8001d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d64:	4b90      	ldr	r3, [pc, #576]	; (8001fa8 <runCommand+0x350>)
 8001d66:	edc3 7a00 	vstr	s15, [r3]
		setpoint = thirdParameter;
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	ee07 3a90 	vmov	s15, r3
 8001d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d74:	4b8d      	ldr	r3, [pc, #564]	; (8001fac <runCommand+0x354>)
 8001d76:	edc3 7a00 	vstr	s15, [r3]
		handler_Motor_L.parametersMotor.u_1 = handler_Motor_R.parametersMotor.u_1 = setpoint;
 8001d7a:	4b8c      	ldr	r3, [pc, #560]	; (8001fac <runCommand+0x354>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a8c      	ldr	r2, [pc, #560]	; (8001fb0 <runCommand+0x358>)
 8001d80:	6053      	str	r3, [r2, #4]
 8001d82:	4b8b      	ldr	r3, [pc, #556]	; (8001fb0 <runCommand+0x358>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4a8b      	ldr	r2, [pc, #556]	; (8001fb4 <runCommand+0x35c>)
 8001d88:	6053      	str	r3, [r2, #4]
		handler_Motor_L.parametersMotor.e = handler_Motor_L.parametersMotor.e_1 = handler_Motor_L.parametersMotor.e_2 = 0;
 8001d8a:	4b8a      	ldr	r3, [pc, #552]	; (8001fb4 <runCommand+0x35c>)
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
 8001d92:	4b88      	ldr	r3, [pc, #544]	; (8001fb4 <runCommand+0x35c>)
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	4a87      	ldr	r2, [pc, #540]	; (8001fb4 <runCommand+0x35c>)
 8001d98:	60d3      	str	r3, [r2, #12]
 8001d9a:	4b86      	ldr	r3, [pc, #536]	; (8001fb4 <runCommand+0x35c>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	4a85      	ldr	r2, [pc, #532]	; (8001fb4 <runCommand+0x35c>)
 8001da0:	6093      	str	r3, [r2, #8]
		handler_Motor_R.parametersMotor.e = handler_Motor_R.parametersMotor.e_1 = handler_Motor_R.parametersMotor.e_2 = 0;
 8001da2:	4b83      	ldr	r3, [pc, #524]	; (8001fb0 <runCommand+0x358>)
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
 8001daa:	4b81      	ldr	r3, [pc, #516]	; (8001fb0 <runCommand+0x358>)
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	4a80      	ldr	r2, [pc, #512]	; (8001fb0 <runCommand+0x358>)
 8001db0:	60d3      	str	r3, [r2, #12]
 8001db2:	4b7f      	ldr	r3, [pc, #508]	; (8001fb0 <runCommand+0x358>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	4a7e      	ldr	r2, [pc, #504]	; (8001fb0 <runCommand+0x358>)
 8001db8:	6093      	str	r3, [r2, #8]
		config_motor(1, periodo_TIMER_Count,  duttyInicial, duttyInicial, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001dba:	4b79      	ldr	r3, [pc, #484]	; (8001fa0 <runCommand+0x348>)
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4b79      	ldr	r3, [pc, #484]	; (8001fa8 <runCommand+0x350>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	4b78      	ldr	r3, [pc, #480]	; (8001fa8 <runCommand+0x350>)
 8001dc8:	ed93 7a00 	vldr	s14, [r3]
 8001dcc:	4b71      	ldr	r3, [pc, #452]	; (8001f94 <runCommand+0x33c>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	eef0 0a47 	vmov.f32	s1, s14
 8001dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f000 fba0 	bl	8002520 <config_motor>
}
 8001de0:	e177      	b.n	80020d2 <runCommand+0x47a>
	else if (strcmp(cmd, "const") == 0)
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	4974      	ldr	r1, [pc, #464]	; (8001fb8 <runCommand+0x360>)
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe f9f9 	bl	80001e0 <strcmp>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d136      	bne.n	8001e62 <runCommand+0x20a>
			float theta=firtsParameter+Ts/2;
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dfe:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <runCommand+0x344>)
 8001e00:	edd3 6a00 	vldr	s13, [r3]
 8001e04:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e08:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e10:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			constains_calculator(&handler_Motor_L, secondParameter, thirdParameter, theta);   //k,tau,theta
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	ee07 3a10 	vmov	s14, r3
 8001e24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e28:	ed97 1a17 	vldr	s2, [r7, #92]	; 0x5c
 8001e2c:	eef0 0a47 	vmov.f32	s1, s14
 8001e30:	eeb0 0a67 	vmov.f32	s0, s15
 8001e34:	485f      	ldr	r0, [pc, #380]	; (8001fb4 <runCommand+0x35c>)
 8001e36:	f000 fbc5 	bl	80025c4 <constains_calculator>
			constains_calculator(&handler_Motor_R, secondParameter, thirdParameter, theta);   //k,tau,theta
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	ee07 3a10 	vmov	s14, r3
 8001e4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e4e:	ed97 1a17 	vldr	s2, [r7, #92]	; 0x5c
 8001e52:	eef0 0a47 	vmov.f32	s1, s14
 8001e56:	eeb0 0a67 	vmov.f32	s0, s15
 8001e5a:	4855      	ldr	r0, [pc, #340]	; (8001fb0 <runCommand+0x358>)
 8001e5c:	f000 fbb2 	bl	80025c4 <constains_calculator>
}
 8001e60:	e137      	b.n	80020d2 <runCommand+0x47a>
	else if (strcmp(cmd, "equation") == 0)
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4955      	ldr	r1, [pc, #340]	; (8001fbc <runCommand+0x364>)
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe f9b9 	bl	80001e0 <strcmp>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 812e 	beq.w	80020d2 <runCommand+0x47a>
	else if (strcmp(cmd, "turn") == 0)
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4951      	ldr	r1, [pc, #324]	; (8001fc0 <runCommand+0x368>)
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe f9af 	bl	80001e0 <strcmp>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f040 80a7 	bne.w	8001fd8 <runCommand+0x380>
		flag_turn = secondParameter;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <runCommand+0x36c>)
 8001e90:	701a      	strb	r2, [r3, #0]
		if(flag_turn==1)
 8001e92:	4b4c      	ldr	r3, [pc, #304]	; (8001fc4 <runCommand+0x36c>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d114      	bne.n	8001ec4 <runCommand+0x26c>
			limit_count_turn = (b/DR)*((Ce*firtsParameter)/(2*180));
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4a4a      	ldr	r2, [pc, #296]	; (8001fc8 <runCommand+0x370>)
 8001e9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001ea2:	1052      	asrs	r2, r2, #1
 8001ea4:	17db      	asrs	r3, r3, #31
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <runCommand+0x374>)
 8001eb0:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_R;
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <runCommand+0x378>)
 8001eb4:	4a3e      	ldr	r2, [pc, #248]	; (8001fb0 <runCommand+0x358>)
 8001eb6:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8001eb8:	4b45      	ldr	r3, [pc, #276]	; (8001fd0 <runCommand+0x378>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f902 	bl	80010c6 <updateDirMotor>
 8001ec2:	e013      	b.n	8001eec <runCommand+0x294>
			limit_count_turn = (b/DL)*((Ce*firtsParameter)/(2*180));
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	4a40      	ldr	r2, [pc, #256]	; (8001fc8 <runCommand+0x370>)
 8001ec8:	fb82 1203 	smull	r1, r2, r2, r3
 8001ecc:	1052      	asrs	r2, r2, #1
 8001ece:	17db      	asrs	r3, r3, #31
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <runCommand+0x374>)
 8001eda:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_L;
 8001edc:	4b3c      	ldr	r3, [pc, #240]	; (8001fd0 <runCommand+0x378>)
 8001ede:	4a35      	ldr	r2, [pc, #212]	; (8001fb4 <runCommand+0x35c>)
 8001ee0:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <runCommand+0x378>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f8ed 	bl	80010c6 <updateDirMotor>
		config_motor(2, periodo_TIMER_Count, 0.9234*((float) thirdParameter)-3, thirdParameter, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001eec:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <runCommand+0x348>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	461c      	mov	r4, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	ee07 3a90 	vmov	s15, r3
 8001ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efc:	ee17 0a90 	vmov	r0, s15
 8001f00:	f7fe fb3a 	bl	8000578 <__aeabi_f2d>
 8001f04:	a312      	add	r3, pc, #72	; (adr r3, 8001f50 <runCommand+0x2f8>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe fb8d 	bl	8000628 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <runCommand+0x37c>)
 8001f1c:	f7fe f9cc 	bl	80002b8 <__aeabi_dsub>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7fe fe76 	bl	8000c18 <__aeabi_d2f>
 8001f2c:	4601      	mov	r1, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <runCommand+0x33c>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	eef0 0a67 	vmov.f32	s1, s15
 8001f42:	ee00 1a10 	vmov	s0, r1
 8001f46:	4621      	mov	r1, r4
 8001f48:	2002      	movs	r0, #2
 8001f4a:	f000 fae9 	bl	8002520 <config_motor>
}
 8001f4e:	e0c0      	b.n	80020d2 <runCommand+0x47a>
 8001f50:	28240b78 	.word	0x28240b78
 8001f54:	3fed8c7e 	.word	0x3fed8c7e
 8001f58:	0800c79c 	.word	0x0800c79c
 8001f5c:	0800c7ac 	.word	0x0800c7ac
 8001f60:	0800c7b4 	.word	0x0800c7b4
 8001f64:	20000268 	.word	0x20000268
 8001f68:	0800c7c4 	.word	0x0800c7c4
 8001f6c:	0800c7f0 	.word	0x0800c7f0
 8001f70:	0800c840 	.word	0x0800c840
 8001f74:	0800c898 	.word	0x0800c898
 8001f78:	0800c8e0 	.word	0x0800c8e0
 8001f7c:	0800c940 	.word	0x0800c940
 8001f80:	0800c9a4 	.word	0x0800c9a4
 8001f84:	0800c9dc 	.word	0x0800c9dc
 8001f88:	0800ca10 	.word	0x0800ca10
 8001f8c:	0800ca60 	.word	0x0800ca60
 8001f90:	000186a0 	.word	0x000186a0
 8001f94:	2000000a 	.word	0x2000000a
 8001f98:	0800ca6c 	.word	0x0800ca6c
 8001f9c:	20000004 	.word	0x20000004
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	200003cc 	.word	0x200003cc
 8001fa8:	20000404 	.word	0x20000404
 8001fac:	200003d0 	.word	0x200003d0
 8001fb0:	200002e4 	.word	0x200002e4
 8001fb4:	20000360 	.word	0x20000360
 8001fb8:	0800ca74 	.word	0x0800ca74
 8001fbc:	0800ca7c 	.word	0x0800ca7c
 8001fc0:	0800ca88 	.word	0x0800ca88
 8001fc4:	200003fd 	.word	0x200003fd
 8001fc8:	66666667 	.word	0x66666667
 8001fcc:	20000400 	.word	0x20000400
 8001fd0:	200003f8 	.word	0x200003f8
 8001fd4:	40080000 	.word	0x40080000
	else if (strcmp(cmd, "start") == 0)
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	493f      	ldr	r1, [pc, #252]	; (80020dc <runCommand+0x484>)
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe f8fe 	bl	80001e0 <strcmp>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d12a      	bne.n	8002040 <runCommand+0x3e8>
		periodo_TIMER_Count = firtsParameter;
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b3c      	ldr	r3, [pc, #240]	; (80020e0 <runCommand+0x488>)
 8001ff0:	801a      	strh	r2, [r3, #0]
		config_motor(3, periodo_TIMER_Count,  (secondParameter/100), (thirdParameter/100), forthParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <runCommand+0x488>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	4a3a      	ldr	r2, [pc, #232]	; (80020e4 <runCommand+0x48c>)
 8001ffc:	fb82 0203 	smull	r0, r2, r2, r3
 8002000:	1152      	asrs	r2, r2, #5
 8002002:	17db      	asrs	r3, r3, #31
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4a34      	ldr	r2, [pc, #208]	; (80020e4 <runCommand+0x48c>)
 8002012:	fb82 0203 	smull	r0, r2, r2, r3
 8002016:	1152      	asrs	r2, r2, #5
 8002018:	17db      	asrs	r3, r3, #31
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	ee07 3a10 	vmov	s14, r3
 8002020:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	461a      	mov	r2, r3
 8002028:	eef0 0a47 	vmov.f32	s1, s14
 800202c:	eeb0 0a67 	vmov.f32	s0, s15
 8002030:	2003      	movs	r0, #3
 8002032:	f000 fa75 	bl	8002520 <config_motor>
		writeMsgForTXE(&handler_USART_USB, "Inicio conteo... \n");
 8002036:	492c      	ldr	r1, [pc, #176]	; (80020e8 <runCommand+0x490>)
 8002038:	482c      	ldr	r0, [pc, #176]	; (80020ec <runCommand+0x494>)
 800203a:	f002 ff09 	bl	8004e50 <writeMsgForTXE>
}
 800203e:	e048      	b.n	80020d2 <runCommand+0x47a>
	else if (strcmp(cmd, "reaction") == 0)
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	492a      	ldr	r1, [pc, #168]	; (80020f0 <runCommand+0x498>)
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe f8ca 	bl	80001e0 <strcmp>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d12a      	bne.n	80020a8 <runCommand+0x450>
		periodo_TIMER_Count = firtsParameter;
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	b29a      	uxth	r2, r3
 8002056:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <runCommand+0x488>)
 8002058:	801a      	strh	r2, [r3, #0]
		config_motor(4, periodo_TIMER_Count, (secondParameter/100), (secondParameter/100), thirdParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 800205a:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <runCommand+0x488>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	4619      	mov	r1, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	4a20      	ldr	r2, [pc, #128]	; (80020e4 <runCommand+0x48c>)
 8002064:	fb82 0203 	smull	r0, r2, r2, r3
 8002068:	1152      	asrs	r2, r2, #5
 800206a:	17db      	asrs	r3, r3, #31
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <runCommand+0x48c>)
 800207a:	fb82 0203 	smull	r0, r2, r2, r3
 800207e:	1152      	asrs	r2, r2, #5
 8002080:	17db      	asrs	r3, r3, #31
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	ee07 3a10 	vmov	s14, r3
 8002088:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	461a      	mov	r2, r3
 8002090:	eef0 0a47 	vmov.f32	s1, s14
 8002094:	eeb0 0a67 	vmov.f32	s0, s15
 8002098:	2004      	movs	r0, #4
 800209a:	f000 fa41 	bl	8002520 <config_motor>
		writeMsgForTXE(&handler_USART_USB, "Inicio conteo... \n");
 800209e:	4912      	ldr	r1, [pc, #72]	; (80020e8 <runCommand+0x490>)
 80020a0:	4812      	ldr	r0, [pc, #72]	; (80020ec <runCommand+0x494>)
 80020a2:	f002 fed5 	bl	8004e50 <writeMsgForTXE>
}
 80020a6:	e014      	b.n	80020d2 <runCommand+0x47a>
	else if (strcmp(cmd, "stop") == 0)
 80020a8:	f107 031c 	add.w	r3, r7, #28
 80020ac:	4911      	ldr	r1, [pc, #68]	; (80020f4 <runCommand+0x49c>)
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe f896 	bl	80001e0 <strcmp>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d107      	bne.n	80020ca <runCommand+0x472>
		status_motor(RESET);
 80020ba:	2000      	movs	r0, #0
 80020bc:	f000 f9b4 	bl	8002428 <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Estudio finalizado \n");
 80020c0:	490d      	ldr	r1, [pc, #52]	; (80020f8 <runCommand+0x4a0>)
 80020c2:	480a      	ldr	r0, [pc, #40]	; (80020ec <runCommand+0x494>)
 80020c4:	f002 fec4 	bl	8004e50 <writeMsgForTXE>
}
 80020c8:	e003      	b.n	80020d2 <runCommand+0x47a>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 80020ca:	490c      	ldr	r1, [pc, #48]	; (80020fc <runCommand+0x4a4>)
 80020cc:	4807      	ldr	r0, [pc, #28]	; (80020ec <runCommand+0x494>)
 80020ce:	f002 febf 	bl	8004e50 <writeMsgForTXE>
}
 80020d2:	bf00      	nop
 80020d4:	3764      	adds	r7, #100	; 0x64
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd90      	pop	{r4, r7, pc}
 80020da:	bf00      	nop
 80020dc:	0800ca90 	.word	0x0800ca90
 80020e0:	20000008 	.word	0x20000008
 80020e4:	51eb851f 	.word	0x51eb851f
 80020e8:	0800ca98 	.word	0x0800ca98
 80020ec:	20000268 	.word	0x20000268
 80020f0:	0800caac 	.word	0x0800caac
 80020f4:	0800cab8 	.word	0x0800cab8
 80020f8:	0800cac0 	.word	0x0800cac0
 80020fc:	0800cad8 	.word	0x0800cad8

08002100 <PID>:
//----------------------------Inicio de la definicion de las funciones-----------------------------------------


//--------------------PID----------------------
void PID(Motor_Handler_t *ptrMotorHandler, float measure)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	ed87 0a00 	vstr	s0, [r7]
	//Calculo del error
	ptrMotorHandler->parametersMotor.e = setpoint-measure;
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <PID+0xa4>)
 800210e:	ed93 7a00 	vldr	s14, [r3]
 8002112:	edd7 7a00 	vldr	s15, [r7]
 8002116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	edc3 7a02 	vstr	s15, [r3, #8]
    // Controle PID
	float p0 =  ptrMotorHandler->parametersMotor.q0*ptrMotorHandler->parametersMotor.e;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	ed93 7a05 	vldr	s14, [r3, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	edd3 7a02 	vldr	s15, [r3, #8]
 800212c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002130:	edc7 7a05 	vstr	s15, [r7, #20]
	float p1 =  ptrMotorHandler->parametersMotor.q1*ptrMotorHandler->parametersMotor.e_1;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	ed93 7a06 	vldr	s14, [r3, #24]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002144:	edc7 7a04 	vstr	s15, [r7, #16]
	float p2 =  ptrMotorHandler->parametersMotor.q2*ptrMotorHandler->parametersMotor.e_2;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	ed93 7a07 	vldr	s14, [r3, #28]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	edd3 7a04 	vldr	s15, [r3, #16]
 8002154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002158:	edc7 7a03 	vstr	s15, [r7, #12]
	ptrMotorHandler->parametersMotor.u = ptrMotorHandler->parametersMotor.u_1 + p0 + p1 + p2;        //Ley del controlador PID discreto
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002162:	edd7 7a05 	vldr	s15, [r7, #20]
 8002166:	ee37 7a27 	vadd.f32	s14, s14, s15
 800216a:	edd7 7a04 	vldr	s15, [r7, #16]
 800216e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002172:	edd7 7a03 	vldr	s15, [r7, #12]
 8002176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	edc3 7a00 	vstr	s15, [r3]

     //Retorno a los valores reales
    ptrMotorHandler->parametersMotor.e_2 = ptrMotorHandler->parametersMotor.e_1;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	611a      	str	r2, [r3, #16]
    ptrMotorHandler->parametersMotor.e_1 = ptrMotorHandler->parametersMotor.e;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]
    ptrMotorHandler->parametersMotor.u_1 = ptrMotorHandler->parametersMotor.u;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	605a      	str	r2, [r3, #4]
}
 8002198:	bf00      	nop
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	200003d0 	.word	0x200003d0

080021a8 <correction>:

void correction(Motor_Handler_t *ptrMotorHandler)
{
 80021a8:	b5b0      	push	{r4, r5, r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	//Definimos variables auxiliares
	float velocity_correction = 0;
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
	float port_dutty = 0;
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
	//Correction velocidad angular
	float correction_w_angular_c  = w_angular_c + ptrMotorHandler->parametersMotor.u;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	ed93 7a00 	vldr	s14, [r3]
 80021c2:	4b8f      	ldr	r3, [pc, #572]	; (8002400 <correction+0x258>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021cc:	edc7 7a03 	vstr	s15, [r7, #12]
	//Conversion ley de control->velocidad->valor dutty
	if(ptrMotorHandler == &handler_Motor_L)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a8c      	ldr	r2, [pc, #560]	; (8002404 <correction+0x25c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d162      	bne.n	800229e <correction+0xf6>
	{
		velocity_correction = velocity_c + (correction_w_angular_c*b)/200000;
 80021d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80021dc:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8002408 <correction+0x260>
 80021e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e4:	eddf 6a89 	vldr	s13, [pc, #548]	; 800240c <correction+0x264>
 80021e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021ec:	4b88      	ldr	r3, [pc, #544]	; (8002410 <correction+0x268>)
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f6:	edc7 7a04 	vstr	s15, [r7, #16]
		//Conversion a dutty
		//478*x + -18,7
		port_dutty = 17.6 - 177*(velocity_correction) + 3746*pow(velocity_correction,2) - 6866*pow(velocity_correction,3);
 80021fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80021fe:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8002414 <correction+0x26c>
 8002202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002206:	ee17 0a90 	vmov	r0, s15
 800220a:	f7fe f9b5 	bl	8000578 <__aeabi_f2d>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	a16b      	add	r1, pc, #428	; (adr r1, 80023c0 <correction+0x218>)
 8002214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002218:	f7fe f84e 	bl	80002b8 <__aeabi_dsub>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4614      	mov	r4, r2
 8002222:	461d      	mov	r5, r3
 8002224:	6938      	ldr	r0, [r7, #16]
 8002226:	f7fe f9a7 	bl	8000578 <__aeabi_f2d>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	ed9f 1b66 	vldr	d1, [pc, #408]	; 80023c8 <correction+0x220>
 8002232:	ec43 2b10 	vmov	d0, r2, r3
 8002236:	f008 f99d 	bl	800a574 <pow>
 800223a:	ec51 0b10 	vmov	r0, r1, d0
 800223e:	a364      	add	r3, pc, #400	; (adr r3, 80023d0 <correction+0x228>)
 8002240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002244:	f7fe f9f0 	bl	8000628 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4620      	mov	r0, r4
 800224e:	4629      	mov	r1, r5
 8002250:	f7fe f834 	bl	80002bc <__adddf3>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4614      	mov	r4, r2
 800225a:	461d      	mov	r5, r3
 800225c:	6938      	ldr	r0, [r7, #16]
 800225e:	f7fe f98b 	bl	8000578 <__aeabi_f2d>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 80023d8 <correction+0x230>
 800226a:	ec43 2b10 	vmov	d0, r2, r3
 800226e:	f008 f981 	bl	800a574 <pow>
 8002272:	ec51 0b10 	vmov	r0, r1, d0
 8002276:	a35a      	add	r3, pc, #360	; (adr r3, 80023e0 <correction+0x238>)
 8002278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227c:	f7fe f9d4 	bl	8000628 <__aeabi_dmul>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4620      	mov	r0, r4
 8002286:	4629      	mov	r1, r5
 8002288:	f7fe f816 	bl	80002b8 <__aeabi_dsub>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fcc0 	bl	8000c18 <__aeabi_d2f>
 8002298:	4603      	mov	r3, r0
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e061      	b.n	8002362 <correction+0x1ba>

	}
	else
	{
		velocity_correction = velocity_c - (correction_w_angular_c*b)/200000;
 800229e:	4b5c      	ldr	r3, [pc, #368]	; (8002410 <correction+0x268>)
 80022a0:	ed93 7a00 	vldr	s14, [r3]
 80022a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80022a8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002408 <correction+0x260>
 80022ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80022b0:	ed9f 6a56 	vldr	s12, [pc, #344]	; 800240c <correction+0x264>
 80022b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022bc:	edc7 7a04 	vstr	s15, [r7, #16]
		//Conversion a dutty
		//563*x + -26
		port_dutty = 17.8 - 185*(velocity_correction) + 3973*pow(velocity_correction,2) - 6556*pow(velocity_correction,3);
 80022c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80022c4:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002418 <correction+0x270>
 80022c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022cc:	ee17 0a90 	vmov	r0, s15
 80022d0:	f7fe f952 	bl	8000578 <__aeabi_f2d>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	a143      	add	r1, pc, #268	; (adr r1, 80023e8 <correction+0x240>)
 80022da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022de:	f7fd ffeb 	bl	80002b8 <__aeabi_dsub>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4614      	mov	r4, r2
 80022e8:	461d      	mov	r5, r3
 80022ea:	6938      	ldr	r0, [r7, #16]
 80022ec:	f7fe f944 	bl	8000578 <__aeabi_f2d>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	ed9f 1b34 	vldr	d1, [pc, #208]	; 80023c8 <correction+0x220>
 80022f8:	ec43 2b10 	vmov	d0, r2, r3
 80022fc:	f008 f93a 	bl	800a574 <pow>
 8002300:	ec51 0b10 	vmov	r0, r1, d0
 8002304:	a33a      	add	r3, pc, #232	; (adr r3, 80023f0 <correction+0x248>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f98d 	bl	8000628 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4620      	mov	r0, r4
 8002314:	4629      	mov	r1, r5
 8002316:	f7fd ffd1 	bl	80002bc <__adddf3>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4614      	mov	r4, r2
 8002320:	461d      	mov	r5, r3
 8002322:	6938      	ldr	r0, [r7, #16]
 8002324:	f7fe f928 	bl	8000578 <__aeabi_f2d>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 80023d8 <correction+0x230>
 8002330:	ec43 2b10 	vmov	d0, r2, r3
 8002334:	f008 f91e 	bl	800a574 <pow>
 8002338:	ec51 0b10 	vmov	r0, r1, d0
 800233c:	a32e      	add	r3, pc, #184	; (adr r3, 80023f8 <correction+0x250>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	f7fe f971 	bl	8000628 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4620      	mov	r0, r4
 800234c:	4629      	mov	r1, r5
 800234e:	f7fd ffb3 	bl	80002b8 <__aeabi_dsub>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	f7fe fc5d 	bl	8000c18 <__aeabi_d2f>
 800235e:	4603      	mov	r3, r0
 8002360:	617b      	str	r3, [r7, #20]
	}

    //Saturo el porcentaje de dutty en un tope maximo y minimo
    if (port_dutty >= 100.0)
 8002362:	edd7 7a05 	vldr	s15, [r7, #20]
 8002366:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800241c <correction+0x274>
 800236a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002372:	db02      	blt.n	800237a <correction+0x1d2>
    {
    	port_dutty = 100.0;
 8002374:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <correction+0x278>)
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	e018      	b.n	80023ac <correction+0x204>
    }
    else if(port_dutty <= duttyInicial-5)
 800237a:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <correction+0x27c>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002384:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002388:	ed97 7a05 	vldr	s14, [r7, #20]
 800238c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002394:	d809      	bhi.n	80023aa <correction+0x202>
    {
    	port_dutty = duttyInicial-5;
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <correction+0x27c>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80023a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023a4:	edc7 7a05 	vstr	s15, [r7, #20]
 80023a8:	e000      	b.n	80023ac <correction+0x204>
    }
    else
    {
    	__NOP();
 80023aa:	bf00      	nop
    }

    //Actualizamoe el valor del dutty
    updateDuttyMotor(ptrMotorHandler, port_dutty);
 80023ac:	ed97 0a05 	vldr	s0, [r7, #20]
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7fe fe71 	bl	8001098 <updateDuttyMotor>
}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bdb0      	pop	{r4, r5, r7, pc}
 80023be:	bf00      	nop
 80023c0:	9999999a 	.word	0x9999999a
 80023c4:	40319999 	.word	0x40319999
 80023c8:	00000000 	.word	0x00000000
 80023cc:	40000000 	.word	0x40000000
 80023d0:	00000000 	.word	0x00000000
 80023d4:	40ad4400 	.word	0x40ad4400
 80023d8:	00000000 	.word	0x00000000
 80023dc:	40080000 	.word	0x40080000
 80023e0:	00000000 	.word	0x00000000
 80023e4:	40bad200 	.word	0x40bad200
 80023e8:	cccccccd 	.word	0xcccccccd
 80023ec:	4031cccc 	.word	0x4031cccc
 80023f0:	00000000 	.word	0x00000000
 80023f4:	40af0a00 	.word	0x40af0a00
 80023f8:	00000000 	.word	0x00000000
 80023fc:	40b99c00 	.word	0x40b99c00
 8002400:	200003ec 	.word	0x200003ec
 8002404:	20000360 	.word	0x20000360
 8002408:	4622f800 	.word	0x4622f800
 800240c:	48435000 	.word	0x48435000
 8002410:	200003e8 	.word	0x200003e8
 8002414:	43310000 	.word	0x43310000
 8002418:	43390000 	.word	0x43390000
 800241c:	42c80000 	.word	0x42c80000
 8002420:	42c80000 	.word	0x42c80000
 8002424:	20000404 	.word	0x20000404

08002428 <status_motor>:

void status_motor(uint8_t status)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d138      	bne.n	80024aa <status_motor+0x82>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8002438:	4b35      	ldr	r3, [pc, #212]	; (8002510 <status_motor+0xe8>)
 800243a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243c:	2101      	movs	r1, #1
 800243e:	4618      	mov	r0, r3
 8002440:	f002 f8fe 	bl	8004640 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8002444:	4b33      	ldr	r3, [pc, #204]	; (8002514 <status_motor+0xec>)
 8002446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002448:	2101      	movs	r1, #1
 800244a:	4618      	mov	r0, r3
 800244c:	f002 f8f8 	bl	8004640 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 8002450:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <status_motor+0xe8>)
 8002452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002454:	4b2e      	ldr	r3, [pc, #184]	; (8002510 <status_motor+0xe8>)
 8002456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	b2db      	uxtb	r3, r3
 8002460:	4619      	mov	r1, r3
 8002462:	4610      	mov	r0, r2
 8002464:	f001 fe1c 	bl	80040a0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 8002468:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <status_motor+0xec>)
 800246a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800246c:	4b29      	ldr	r3, [pc, #164]	; (8002514 <status_motor+0xec>)
 800246e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f001 fe10 	bl	80040a0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <status_motor+0xe8>)
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f001 fe0a 	bl	80040a0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <status_motor+0xec>)
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f001 fe04 	bl	80040a0 <GPIO_writePin>
		//Activamos la interrupcion
		if(flag_motor!=2)
 8002498:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <status_motor+0xf0>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d033      	beq.n	8002508 <status_motor+0xe0>
		{
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_ENABLE);
 80024a0:	2101      	movs	r1, #1
 80024a2:	481e      	ldr	r0, [pc, #120]	; (800251c <status_motor+0xf4>)
 80024a4:	f000 fbba 	bl	8002c1c <statusiInterruptionTimer>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Reiniciamos Bandera
		flag_motor = 0;
	}
}
 80024a8:	e02e      	b.n	8002508 <status_motor+0xe0>
		if(flag_motor!=2)
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <status_motor+0xf0>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d003      	beq.n	80024ba <status_motor+0x92>
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_DISABLE);
 80024b2:	2100      	movs	r1, #0
 80024b4:	4819      	ldr	r0, [pc, #100]	; (800251c <status_motor+0xf4>)
 80024b6:	f000 fbb1 	bl	8002c1c <statusiInterruptionTimer>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <status_motor+0xe8>)
 80024bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f002 f8bd 	bl	8004640 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <status_motor+0xec>)
 80024c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f002 f8b7 	bl	8004640 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <status_motor+0xe8>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f001 fde1 	bl	80040a0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 80024de:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <status_motor+0xec>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 fddb 	bl	80040a0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <status_motor+0xe8>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	2101      	movs	r1, #1
 80024f0:	4618      	mov	r0, r3
 80024f2:	f001 fdd5 	bl	80040a0 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <status_motor+0xec>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	2101      	movs	r1, #1
 80024fc:	4618      	mov	r0, r3
 80024fe:	f001 fdcf 	bl	80040a0 <GPIO_writePin>
		flag_motor = 0;
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <status_motor+0xf0>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000360 	.word	0x20000360
 8002514:	200002e4 	.word	0x200002e4
 8002518:	200003fc 	.word	0x200003fc
 800251c:	200003bc 	.word	0x200003bc

08002520 <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third, int forth)  //Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6139      	str	r1, [r7, #16]
 800252a:	ed87 0a03 	vstr	s0, [r7, #12]
 800252e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	75fb      	strb	r3, [r7, #23]
	//Actualizacion de la frecuencia del timer
	updateFrequencyTimer(&handler_TIMER_Count, firth);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	b29b      	uxth	r3, r3
 800253a:	4619      	mov	r1, r3
 800253c:	4819      	ldr	r0, [pc, #100]	; (80025a4 <config_motor+0x84>)
 800253e:	f000 fb8d 	bl	8002c5c <updateFrequencyTimer>
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <config_motor+0x88>)
 8002544:	2200      	movs	r2, #0
 8002546:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.count = 0;
 8002548:	4b18      	ldr	r3, [pc, #96]	; (80025ac <config_motor+0x8c>)
 800254a:	2200      	movs	r2, #0
 800254c:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous = 0;
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <config_motor+0x88>)
 8002550:	2200      	movs	r2, #0
 8002552:	625a      	str	r2, [r3, #36]	; 0x24
	handler_Motor_L.parametersMotor.countCotinuous = 0;
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <config_motor+0x8c>)
 8002556:	2200      	movs	r2, #0
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
	//Establecemos valroes iniciales
	//timeBackR = timeBackL = getTicksUs();
	count_time = 0;
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <config_motor+0x90>)
 800255c:	2200      	movs	r2, #0
 800255e:	801a      	strh	r2, [r3, #0]
	//Actualizamos el valor del dutty y frecuencia
	value_period = 100000/forth;
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <config_motor+0x94>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	fb92 f3f3 	sdiv	r3, r2, r3
 8002568:	b29a      	uxth	r2, r3
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <config_motor+0x98>)
 800256c:	801a      	strh	r2, [r3, #0]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <config_motor+0x98>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	4619      	mov	r1, r3
 8002574:	4811      	ldr	r0, [pc, #68]	; (80025bc <config_motor+0x9c>)
 8002576:	f000 fb71 	bl	8002c5c <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, third);
 800257a:	ed97 0a02 	vldr	s0, [r7, #8]
 800257e:	480a      	ldr	r0, [pc, #40]	; (80025a8 <config_motor+0x88>)
 8002580:	f7fe fd8a 	bl	8001098 <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, second);
 8002584:	ed97 0a03 	vldr	s0, [r7, #12]
 8002588:	4808      	ldr	r0, [pc, #32]	; (80025ac <config_motor+0x8c>)
 800258a:	f7fe fd85 	bl	8001098 <updateDuttyMotor>
	//Cambio valor bandera
	flag_motor=status;
 800258e:	4a0c      	ldr	r2, [pc, #48]	; (80025c0 <config_motor+0xa0>)
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	7013      	strb	r3, [r2, #0]
	//Iniciamos el study
	status_motor(SET);
 8002594:	2001      	movs	r0, #1
 8002596:	f7ff ff47 	bl	8002428 <status_motor>
}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200003bc 	.word	0x200003bc
 80025a8:	200002e4 	.word	0x200002e4
 80025ac:	20000360 	.word	0x20000360
 80025b0:	200003fe 	.word	0x200003fe
 80025b4:	000186a0 	.word	0x000186a0
 80025b8:	20000002 	.word	0x20000002
 80025bc:	200003ac 	.word	0x200003ac
 80025c0:	200003fc 	.word	0x200003fc

080025c4 <constains_calculator>:


void constains_calculator(Motor_Handler_t *ptrMotorhandler,float k, float tau, float theta)   //k,tau,theta
{
 80025c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c8:	b088      	sub	sp, #32
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	ed87 0a02 	vstr	s0, [r7, #8]
 80025d2:	edc7 0a01 	vstr	s1, [r7, #4]
 80025d6:	ed87 1a00 	vstr	s2, [r7]
	   //Calculo de constantes de porcentaje, integracion y derivacion por metodo de Ziegler y Nichols
	   float kp=(1.2*tau)/(k*theta);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fd ffcc 	bl	8000578 <__aeabi_f2d>
 80025e0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80025e4:	4b6d      	ldr	r3, [pc, #436]	; (800279c <constains_calculator+0x1d8>)
 80025e6:	f7fe f81f 	bl	8000628 <__aeabi_dmul>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4614      	mov	r4, r2
 80025f0:	461d      	mov	r5, r3
 80025f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80025f6:	edd7 7a00 	vldr	s15, [r7]
 80025fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fe:	ee17 0a90 	vmov	r0, s15
 8002602:	f7fd ffb9 	bl	8000578 <__aeabi_f2d>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4620      	mov	r0, r4
 800260c:	4629      	mov	r1, r5
 800260e:	f7fe f935 	bl	800087c <__aeabi_ddiv>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4610      	mov	r0, r2
 8002618:	4619      	mov	r1, r3
 800261a:	f7fe fafd 	bl	8000c18 <__aeabi_d2f>
 800261e:	4603      	mov	r3, r0
 8002620:	61fb      	str	r3, [r7, #28]
	   float ti=2.0*theta;
 8002622:	edd7 7a00 	vldr	s15, [r7]
 8002626:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800262a:	edc7 7a06 	vstr	s15, [r7, #24]
	   float td=0.5*theta;
 800262e:	edd7 7a00 	vldr	s15, [r7]
 8002632:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800263a:	edc7 7a05 	vstr	s15, [r7, #20]
	  //Calculo do controle PID digital
	   ptrMotorhandler->parametersMotor.q0 = kp*(1+Ts/(2.0*ti)+td/Ts);
 800263e:	69f8      	ldr	r0, [r7, #28]
 8002640:	f7fd ff9a 	bl	8000578 <__aeabi_f2d>
 8002644:	4604      	mov	r4, r0
 8002646:	460d      	mov	r5, r1
 8002648:	4b55      	ldr	r3, [pc, #340]	; (80027a0 <constains_calculator+0x1dc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd ff93 	bl	8000578 <__aeabi_f2d>
 8002652:	4680      	mov	r8, r0
 8002654:	4689      	mov	r9, r1
 8002656:	69b8      	ldr	r0, [r7, #24]
 8002658:	f7fd ff8e 	bl	8000578 <__aeabi_f2d>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	f7fd fe2c 	bl	80002bc <__adddf3>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4640      	mov	r0, r8
 800266a:	4649      	mov	r1, r9
 800266c:	f7fe f906 	bl	800087c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	4b49      	ldr	r3, [pc, #292]	; (80027a4 <constains_calculator+0x1e0>)
 800267e:	f7fd fe1d 	bl	80002bc <__adddf3>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4690      	mov	r8, r2
 8002688:	4699      	mov	r9, r3
 800268a:	4b45      	ldr	r3, [pc, #276]	; (80027a0 <constains_calculator+0x1dc>)
 800268c:	edd3 7a00 	vldr	s15, [r3]
 8002690:	ed97 7a05 	vldr	s14, [r7, #20]
 8002694:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002698:	ee16 0a90 	vmov	r0, s13
 800269c:	f7fd ff6c 	bl	8000578 <__aeabi_f2d>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4640      	mov	r0, r8
 80026a6:	4649      	mov	r1, r9
 80026a8:	f7fd fe08 	bl	80002bc <__adddf3>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4620      	mov	r0, r4
 80026b2:	4629      	mov	r1, r5
 80026b4:	f7fd ffb8 	bl	8000628 <__aeabi_dmul>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	f7fe faaa 	bl	8000c18 <__aeabi_d2f>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	615a      	str	r2, [r3, #20]
	   ptrMotorhandler->parametersMotor.q1 = -kp*(1-Ts/(2.0*ti)+(2.0*td)/Ts);
 80026ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80026ce:	eef1 7a67 	vneg.f32	s15, s15
 80026d2:	ee17 3a90 	vmov	r3, s15
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd ff4e 	bl	8000578 <__aeabi_f2d>
 80026dc:	4604      	mov	r4, r0
 80026de:	460d      	mov	r5, r1
 80026e0:	4b2f      	ldr	r3, [pc, #188]	; (80027a0 <constains_calculator+0x1dc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd ff47 	bl	8000578 <__aeabi_f2d>
 80026ea:	4680      	mov	r8, r0
 80026ec:	4689      	mov	r9, r1
 80026ee:	69b8      	ldr	r0, [r7, #24]
 80026f0:	f7fd ff42 	bl	8000578 <__aeabi_f2d>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	f7fd fde0 	bl	80002bc <__adddf3>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4640      	mov	r0, r8
 8002702:	4649      	mov	r1, r9
 8002704:	f7fe f8ba 	bl	800087c <__aeabi_ddiv>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	f04f 0000 	mov.w	r0, #0
 8002710:	4924      	ldr	r1, [pc, #144]	; (80027a4 <constains_calculator+0x1e0>)
 8002712:	f7fd fdd1 	bl	80002b8 <__aeabi_dsub>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4690      	mov	r8, r2
 800271c:	4699      	mov	r9, r3
 800271e:	6978      	ldr	r0, [r7, #20]
 8002720:	f7fd ff2a 	bl	8000578 <__aeabi_f2d>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	f7fd fdc8 	bl	80002bc <__adddf3>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4692      	mov	sl, r2
 8002732:	469b      	mov	fp, r3
 8002734:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <constains_calculator+0x1dc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7fd ff1d 	bl	8000578 <__aeabi_f2d>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4650      	mov	r0, sl
 8002744:	4659      	mov	r1, fp
 8002746:	f7fe f899 	bl	800087c <__aeabi_ddiv>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4640      	mov	r0, r8
 8002750:	4649      	mov	r1, r9
 8002752:	f7fd fdb3 	bl	80002bc <__adddf3>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4620      	mov	r0, r4
 800275c:	4629      	mov	r1, r5
 800275e:	f7fd ff63 	bl	8000628 <__aeabi_dmul>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	f7fe fa55 	bl	8000c18 <__aeabi_d2f>
 800276e:	4602      	mov	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	619a      	str	r2, [r3, #24]
	   ptrMotorhandler->parametersMotor.q2 = (kp*td)/Ts;
 8002774:	ed97 7a07 	vldr	s14, [r7, #28]
 8002778:	edd7 7a05 	vldr	s15, [r7, #20]
 800277c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <constains_calculator+0x1dc>)
 8002782:	ed93 7a00 	vldr	s14, [r3]
 8002786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8002790:	bf00      	nop
 8002792:	3720      	adds	r7, #32
 8002794:	46bd      	mov	sp, r7
 8002796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800279a:	bf00      	nop
 800279c:	3ff33333 	.word	0x3ff33333
 80027a0:	20000004 	.word	0x20000004
 80027a4:	3ff00000 	.word	0x3ff00000

080027a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027a8:	480d      	ldr	r0, [pc, #52]	; (80027e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b0:	480c      	ldr	r0, [pc, #48]	; (80027e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80027b2:	490d      	ldr	r1, [pc, #52]	; (80027e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <LoopForever+0xe>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027c8:	4c0a      	ldr	r4, [pc, #40]	; (80027f4 <LoopForever+0x16>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027d6:	f002 fd49 	bl	800526c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027da:	f7fe fca3 	bl	8001124 <main>

080027de <LoopForever>:

LoopForever:
    b LoopForever
 80027de:	e7fe      	b.n	80027de <LoopForever>
  ldr   r0, =_estack
 80027e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80027ec:	0800d240 	.word	0x0800d240
  ldr r2, =_sbss
 80027f0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80027f4:	20000cbc 	.word	0x20000cbc

080027f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f8:	e7fe      	b.n	80027f8 <ADC_IRQHandler>

080027fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
	return 1;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <_kill>:

int _kill(int pid, int sig)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002814:	f002 fd24 	bl	8005260 <__errno>
 8002818:	4603      	mov	r3, r0
 800281a:	2216      	movs	r2, #22
 800281c:	601a      	str	r2, [r3, #0]
	return -1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <_exit>:

void _exit (int status)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002832:	f04f 31ff 	mov.w	r1, #4294967295
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ffe7 	bl	800280a <_kill>
	while (1) {}		/* Make sure we hang here */
 800283c:	e7fe      	b.n	800283c <_exit+0x12>

0800283e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	e00a      	b.n	8002866 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002850:	f3af 8000 	nop.w
 8002854:	4601      	mov	r1, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	60ba      	str	r2, [r7, #8]
 800285c:	b2ca      	uxtb	r2, r1
 800285e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3301      	adds	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	429a      	cmp	r2, r3
 800286c:	dbf0      	blt.n	8002850 <_read+0x12>
	}

return len;
 800286e:	687b      	ldr	r3, [r7, #4]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	e009      	b.n	800289e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	60ba      	str	r2, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3301      	adds	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	dbf1      	blt.n	800288a <_write+0x12>
	}
	return len;
 80028a6:	687b      	ldr	r3, [r7, #4]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <_close>:

int _close(int file)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	return -1;
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028d8:	605a      	str	r2, [r3, #4]
	return 0;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <_isatty>:

int _isatty(int file)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	return 1;
 80028f0:	2301      	movs	r3, #1
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	607a      	str	r2, [r7, #4]
	return 0;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002920:	4a14      	ldr	r2, [pc, #80]	; (8002974 <_sbrk+0x5c>)
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <_sbrk+0x60>)
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800292c:	4b13      	ldr	r3, [pc, #76]	; (800297c <_sbrk+0x64>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <_sbrk+0x64>)
 8002936:	4a12      	ldr	r2, [pc, #72]	; (8002980 <_sbrk+0x68>)
 8002938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <_sbrk+0x64>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	429a      	cmp	r2, r3
 8002946:	d207      	bcs.n	8002958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002948:	f002 fc8a 	bl	8005260 <__errno>
 800294c:	4603      	mov	r3, r0
 800294e:	220c      	movs	r2, #12
 8002950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002952:	f04f 33ff 	mov.w	r3, #4294967295
 8002956:	e009      	b.n	800296c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <_sbrk+0x64>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <_sbrk+0x64>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	4a05      	ldr	r2, [pc, #20]	; (800297c <_sbrk+0x64>)
 8002968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800296a:	68fb      	ldr	r3, [r7, #12]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20020000 	.word	0x20020000
 8002978:	00000400 	.word	0x00000400
 800297c:	2000044c 	.word	0x2000044c
 8002980:	20000cc0 	.word	0x20000cc0

08002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0b      	blt.n	80029ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4907      	ldr	r1, [pc, #28]	; (80029bc <__NVIC_EnableIRQ+0x38>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2001      	movs	r0, #1
 80029a6:	fa00 f202 	lsl.w	r2, r0, r2
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000e100 	.word	0xe000e100

080029c0 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d0:	d10a      	bne.n	80029e8 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80029d2:	4b62      	ldr	r3, [pc, #392]	; (8002b5c <BasicTimer_Config+0x19c>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	4a61      	ldr	r2, [pc, #388]	; (8002b5c <BasicTimer_Config+0x19c>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	4a5f      	ldr	r2, [pc, #380]	; (8002b60 <BasicTimer_Config+0x1a0>)
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e02e      	b.n	8002a46 <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a5d      	ldr	r2, [pc, #372]	; (8002b64 <BasicTimer_Config+0x1a4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10a      	bne.n	8002a08 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80029f2:	4b5a      	ldr	r3, [pc, #360]	; (8002b5c <BasicTimer_Config+0x19c>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	4a59      	ldr	r2, [pc, #356]	; (8002b5c <BasicTimer_Config+0x19c>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	4a59      	ldr	r2, [pc, #356]	; (8002b68 <BasicTimer_Config+0x1a8>)
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e01e      	b.n	8002a46 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4a57      	ldr	r2, [pc, #348]	; (8002b6c <BasicTimer_Config+0x1ac>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10a      	bne.n	8002a28 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002a12:	4b52      	ldr	r3, [pc, #328]	; (8002b5c <BasicTimer_Config+0x19c>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <BasicTimer_Config+0x19c>)
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	4a53      	ldr	r2, [pc, #332]	; (8002b70 <BasicTimer_Config+0x1b0>)
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e00e      	b.n	8002a46 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a51      	ldr	r2, [pc, #324]	; (8002b74 <BasicTimer_Config+0x1b4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d109      	bne.n	8002a46 <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002a32:	4b4a      	ldr	r3, [pc, #296]	; (8002b5c <BasicTimer_Config+0x19c>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a49      	ldr	r2, [pc, #292]	; (8002b5c <BasicTimer_Config+0x19c>)
 8002a38:	f043 0308 	orr.w	r3, r3, #8
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	4a4d      	ldr	r2, [pc, #308]	; (8002b78 <BasicTimer_Config+0x1b8>)
 8002a44:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002a46:	f001 fbeb 	bl	8004220 <getConfigPLL>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002a4e:	f001 fc03 	bl	8004258 <getClockAPB1>
 8002a52:	4603      	mov	r3, r0
 8002a54:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 8002a56:	7bbb      	ldrb	r3, [r7, #14]
 8002a58:	2b31      	cmp	r3, #49	; 0x31
 8002a5a:	d903      	bls.n	8002a64 <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	e000      	b.n	8002a66 <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 8002a64:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	8852      	ldrh	r2, [r2, #2]
 8002a6c:	fb02 f303 	mul.w	r3, r2, r3
 8002a70:	1e5a      	subs	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d112      	bne.n	8002aa6 <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f022 0210 	bic.w	r2, r2, #16
 8002a8e:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	3201      	adds	r2, #1
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24
 8002aa4:	e018      	b.n	8002ad8 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f022 0210 	bic.w	r2, r2, #16
 8002ab4:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f042 0210 	orr.w	r2, r2, #16
 8002ac4:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6852      	ldr	r2, [r2, #4]
 8002ad6:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad8:	b672      	cpsid	i
}
 8002ada:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d103      	bne.n	8002aee <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8002ae6:	201c      	movs	r0, #28
 8002ae8:	f7ff ff4c 	bl	8002984 <__NVIC_EnableIRQ>
 8002aec:	e019      	b.n	8002b22 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <BasicTimer_Config+0x1a4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d103      	bne.n	8002b00 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8002af8:	201d      	movs	r0, #29
 8002afa:	f7ff ff43 	bl	8002984 <__NVIC_EnableIRQ>
 8002afe:	e010      	b.n	8002b22 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <BasicTimer_Config+0x1ac>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d103      	bne.n	8002b12 <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8002b0a:	201e      	movs	r0, #30
 8002b0c:	f7ff ff3a 	bl	8002984 <__NVIC_EnableIRQ>
 8002b10:	e007      	b.n	8002b22 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <BasicTimer_Config+0x1b4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d102      	bne.n	8002b22 <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8002b1c:	2032      	movs	r0, #50	; 0x32
 8002b1e:	f7ff ff31 	bl	8002984 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b22:	b662      	cpsie	i
}
 8002b24:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7a1b      	ldrb	r3, [r3, #8]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f875 	bl	8002c1c <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f042 0201 	orr.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	20000450 	.word	0x20000450
 8002b64:	40000400 	.word	0x40000400
 8002b68:	20000454 	.word	0x20000454
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	20000458 	.word	0x20000458
 8002b74:	40000c00 	.word	0x40000c00
 8002b78:	2000045c 	.word	0x2000045c

08002b7c <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
	__NOP();
 8002b80:	bf00      	nop
}
 8002b82:	bf00      	nop
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
	__NOP();
 8002b90:	bf00      	nop
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <TIM2_IRQHandler+0x1c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <TIM2_IRQHandler+0x1c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8002bb0:	f7fe fd84 	bl	80016bc <BasicTimer2_Callback>

}
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20000450 	.word	0x20000450

08002bbc <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <TIM3_IRQHandler+0x1c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <TIM3_IRQHandler+0x1c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8002bd0:	f7fe fd7e 	bl	80016d0 <BasicTimer3_Callback>

}
 8002bd4:	bf00      	nop
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000454 	.word	0x20000454

08002bdc <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <TIM4_IRQHandler+0x1c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <TIM4_IRQHandler+0x1c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8002bf0:	f7ff ffc4 	bl	8002b7c <BasicTimer4_Callback>

}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000458 	.word	0x20000458

08002bfc <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <TIM5_IRQHandler+0x1c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <TIM5_IRQHandler+0x1c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8002c10:	f7ff ffbc 	bl	8002b8c <BasicTimer5_Callback>

}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	2000045c 	.word	0x2000045c

08002c1c <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d108      	bne.n	8002c40 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8002c3e:	e007      	b.n	8002c50 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	60da      	str	r2, [r3, #12]
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 8002c68:	887a      	ldrh	r2, [r7, #2]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6852      	ldr	r2, [r2, #4]
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <__NVIC_EnableIRQ>:
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	db0b      	blt.n	8002cb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	4907      	ldr	r1, [pc, #28]	; (8002cc4 <__NVIC_EnableIRQ+0x38>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2001      	movs	r0, #1
 8002cae:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000e100 	.word	0xe000e100

08002cc8 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2301      	movs	r3, #1
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	f001 f891 	bl	8003e08 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 f8ae 	bl	8003e4c <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002cf0:	4b97      	ldr	r3, [pc, #604]	; (8002f50 <extInt_Config+0x288>)
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	4a96      	ldr	r2, [pc, #600]	; (8002f50 <extInt_Config+0x288>)
 8002cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cfa:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b0f      	cmp	r3, #15
 8002d04:	f200 85cf 	bhi.w	80038a6 <extInt_Config+0xbde>
 8002d08:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <extInt_Config+0x48>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002d51 	.word	0x08002d51
 8002d14:	08002e07 	.word	0x08002e07
 8002d18:	08002ebd 	.word	0x08002ebd
 8002d1c:	08002f93 	.word	0x08002f93
 8002d20:	08003049 	.word	0x08003049
 8002d24:	080030f7 	.word	0x080030f7
 8002d28:	080031bd 	.word	0x080031bd
 8002d2c:	08003265 	.word	0x08003265
 8002d30:	0800330d 	.word	0x0800330d
 8002d34:	080033b5 	.word	0x080033b5
 8002d38:	0800347b 	.word	0x0800347b
 8002d3c:	08003523 	.word	0x08003523
 8002d40:	080035cb 	.word	0x080035cb
 8002d44:	08003691 	.word	0x08003691
 8002d48:	08003739 	.word	0x08003739
 8002d4c:	080037e1 	.word	0x080037e1
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 8002d50:	4b80      	ldr	r3, [pc, #512]	; (8002f54 <extInt_Config+0x28c>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a7f      	ldr	r2, [pc, #508]	; (8002f54 <extInt_Config+0x28c>)
 8002d56:	f023 030f 	bic.w	r3, r3, #15
 8002d5a:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	4a7d      	ldr	r2, [pc, #500]	; (8002f58 <extInt_Config+0x290>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d105      	bne.n	8002d74 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8002d68:	4b7a      	ldr	r3, [pc, #488]	; (8002f54 <extInt_Config+0x28c>)
 8002d6a:	4a7a      	ldr	r2, [pc, #488]	; (8002f54 <extInt_Config+0x28c>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002d70:	f000 bd9b 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	4a78      	ldr	r2, [pc, #480]	; (8002f5c <extInt_Config+0x294>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d107      	bne.n	8002d90 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8002d80:	4b74      	ldr	r3, [pc, #464]	; (8002f54 <extInt_Config+0x28c>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a73      	ldr	r2, [pc, #460]	; (8002f54 <extInt_Config+0x28c>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6093      	str	r3, [r2, #8]
		break;
 8002d8c:	f000 bd8d 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	4a72      	ldr	r2, [pc, #456]	; (8002f60 <extInt_Config+0x298>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d107      	bne.n	8002dac <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8002d9c:	4b6d      	ldr	r3, [pc, #436]	; (8002f54 <extInt_Config+0x28c>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a6c      	ldr	r2, [pc, #432]	; (8002f54 <extInt_Config+0x28c>)
 8002da2:	f043 0302 	orr.w	r3, r3, #2
 8002da6:	6093      	str	r3, [r2, #8]
		break;
 8002da8:	f000 bd7f 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	4a6c      	ldr	r2, [pc, #432]	; (8002f64 <extInt_Config+0x29c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d107      	bne.n	8002dc8 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8002db8:	4b66      	ldr	r3, [pc, #408]	; (8002f54 <extInt_Config+0x28c>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a65      	ldr	r2, [pc, #404]	; (8002f54 <extInt_Config+0x28c>)
 8002dbe:	f043 0303 	orr.w	r3, r3, #3
 8002dc2:	6093      	str	r3, [r2, #8]
		break;
 8002dc4:	f000 bd71 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	4a66      	ldr	r2, [pc, #408]	; (8002f68 <extInt_Config+0x2a0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d107      	bne.n	8002de4 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8002dd4:	4b5f      	ldr	r3, [pc, #380]	; (8002f54 <extInt_Config+0x28c>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a5e      	ldr	r2, [pc, #376]	; (8002f54 <extInt_Config+0x28c>)
 8002dda:	f043 0304 	orr.w	r3, r3, #4
 8002dde:	6093      	str	r3, [r2, #8]
		break;
 8002de0:	f000 bd63 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	4a60      	ldr	r2, [pc, #384]	; (8002f6c <extInt_Config+0x2a4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d107      	bne.n	8002e00 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8002df0:	4b58      	ldr	r3, [pc, #352]	; (8002f54 <extInt_Config+0x28c>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a57      	ldr	r2, [pc, #348]	; (8002f54 <extInt_Config+0x28c>)
 8002df6:	f043 0307 	orr.w	r3, r3, #7
 8002dfa:	6093      	str	r3, [r2, #8]
		break;
 8002dfc:	f000 bd55 	b.w	80038aa <extInt_Config+0xbe2>
			__NOP();
 8002e00:	bf00      	nop
		break;
 8002e02:	f000 bd52 	b.w	80038aa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8002e06:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <extInt_Config+0x28c>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	4a52      	ldr	r2, [pc, #328]	; (8002f54 <extInt_Config+0x28c>)
 8002e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e10:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a4f      	ldr	r2, [pc, #316]	; (8002f58 <extInt_Config+0x290>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d105      	bne.n	8002e2a <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8002e1e:	4b4d      	ldr	r3, [pc, #308]	; (8002f54 <extInt_Config+0x28c>)
 8002e20:	4a4c      	ldr	r2, [pc, #304]	; (8002f54 <extInt_Config+0x28c>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002e26:	f000 bd40 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a4a      	ldr	r2, [pc, #296]	; (8002f5c <extInt_Config+0x294>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d107      	bne.n	8002e46 <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8002e36:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <extInt_Config+0x28c>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	4a46      	ldr	r2, [pc, #280]	; (8002f54 <extInt_Config+0x28c>)
 8002e3c:	f043 0310 	orr.w	r3, r3, #16
 8002e40:	6093      	str	r3, [r2, #8]
		break;
 8002e42:	f000 bd32 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	4a44      	ldr	r2, [pc, #272]	; (8002f60 <extInt_Config+0x298>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d107      	bne.n	8002e62 <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8002e52:	4b40      	ldr	r3, [pc, #256]	; (8002f54 <extInt_Config+0x28c>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	4a3f      	ldr	r2, [pc, #252]	; (8002f54 <extInt_Config+0x28c>)
 8002e58:	f043 0320 	orr.w	r3, r3, #32
 8002e5c:	6093      	str	r3, [r2, #8]
		break;
 8002e5e:	f000 bd24 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a3e      	ldr	r2, [pc, #248]	; (8002f64 <extInt_Config+0x29c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d107      	bne.n	8002e7e <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8002e6e:	4b39      	ldr	r3, [pc, #228]	; (8002f54 <extInt_Config+0x28c>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	4a38      	ldr	r2, [pc, #224]	; (8002f54 <extInt_Config+0x28c>)
 8002e74:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002e78:	6093      	str	r3, [r2, #8]
		break;
 8002e7a:	f000 bd16 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4a38      	ldr	r2, [pc, #224]	; (8002f68 <extInt_Config+0x2a0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d107      	bne.n	8002e9a <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8002e8a:	4b32      	ldr	r3, [pc, #200]	; (8002f54 <extInt_Config+0x28c>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	4a31      	ldr	r2, [pc, #196]	; (8002f54 <extInt_Config+0x28c>)
 8002e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e94:	6093      	str	r3, [r2, #8]
		break;
 8002e96:	f000 bd08 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a32      	ldr	r2, [pc, #200]	; (8002f6c <extInt_Config+0x2a4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d107      	bne.n	8002eb6 <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <extInt_Config+0x28c>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <extInt_Config+0x28c>)
 8002eac:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002eb0:	6093      	str	r3, [r2, #8]
		break;
 8002eb2:	f000 bcfa 	b.w	80038aa <extInt_Config+0xbe2>
			__NOP();
 8002eb6:	bf00      	nop
		break;
 8002eb8:	f000 bcf7 	b.w	80038aa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8002ebc:	4b25      	ldr	r3, [pc, #148]	; (8002f54 <extInt_Config+0x28c>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a24      	ldr	r2, [pc, #144]	; (8002f54 <extInt_Config+0x28c>)
 8002ec2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ec6:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <extInt_Config+0x290>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d105      	bne.n	8002ee0 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8002ed4:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <extInt_Config+0x28c>)
 8002ed6:	4a1f      	ldr	r2, [pc, #124]	; (8002f54 <extInt_Config+0x28c>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002edc:	f000 bce5 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <extInt_Config+0x294>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d107      	bne.n	8002efc <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <extInt_Config+0x28c>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <extInt_Config+0x28c>)
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef6:	6093      	str	r3, [r2, #8]
		break;
 8002ef8:	f000 bcd7 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <extInt_Config+0x298>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d107      	bne.n	8002f18 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <extInt_Config+0x28c>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a11      	ldr	r2, [pc, #68]	; (8002f54 <extInt_Config+0x28c>)
 8002f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f12:	6093      	str	r3, [r2, #8]
		break;
 8002f14:	f000 bcc9 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	4a11      	ldr	r2, [pc, #68]	; (8002f64 <extInt_Config+0x29c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d107      	bne.n	8002f34 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <extInt_Config+0x28c>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <extInt_Config+0x28c>)
 8002f2a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002f2e:	6093      	str	r3, [r2, #8]
		break;
 8002f30:	f000 bcbb 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	4a0b      	ldr	r2, [pc, #44]	; (8002f68 <extInt_Config+0x2a0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d117      	bne.n	8002f70 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <extInt_Config+0x28c>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4a03      	ldr	r2, [pc, #12]	; (8002f54 <extInt_Config+0x28c>)
 8002f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f4a:	6093      	str	r3, [r2, #8]
		break;
 8002f4c:	f000 bcad 	b.w	80038aa <extInt_Config+0xbe2>
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40013800 	.word	0x40013800
 8002f58:	40020000 	.word	0x40020000
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	40020800 	.word	0x40020800
 8002f64:	40020c00 	.word	0x40020c00
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	4a8a      	ldr	r2, [pc, #552]	; (80031a0 <extInt_Config+0x4d8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d107      	bne.n	8002f8c <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8002f7c:	4b89      	ldr	r3, [pc, #548]	; (80031a4 <extInt_Config+0x4dc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a88      	ldr	r2, [pc, #544]	; (80031a4 <extInt_Config+0x4dc>)
 8002f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f86:	6093      	str	r3, [r2, #8]
		break;
 8002f88:	f000 bc8f 	b.w	80038aa <extInt_Config+0xbe2>
			__NOP();
 8002f8c:	bf00      	nop
		break;
 8002f8e:	f000 bc8c 	b.w	80038aa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8002f92:	4b84      	ldr	r3, [pc, #528]	; (80031a4 <extInt_Config+0x4dc>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	4a83      	ldr	r2, [pc, #524]	; (80031a4 <extInt_Config+0x4dc>)
 8002f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f9c:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a80      	ldr	r2, [pc, #512]	; (80031a8 <extInt_Config+0x4e0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d105      	bne.n	8002fb6 <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8002faa:	4b7e      	ldr	r3, [pc, #504]	; (80031a4 <extInt_Config+0x4dc>)
 8002fac:	4a7d      	ldr	r2, [pc, #500]	; (80031a4 <extInt_Config+0x4dc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002fb2:	f000 bc7a 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a7b      	ldr	r2, [pc, #492]	; (80031ac <extInt_Config+0x4e4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d107      	bne.n	8002fd2 <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8002fc2:	4b78      	ldr	r3, [pc, #480]	; (80031a4 <extInt_Config+0x4dc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	4a77      	ldr	r2, [pc, #476]	; (80031a4 <extInt_Config+0x4dc>)
 8002fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fcc:	6093      	str	r3, [r2, #8]
		break;
 8002fce:	f000 bc6c 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4a75      	ldr	r2, [pc, #468]	; (80031b0 <extInt_Config+0x4e8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d107      	bne.n	8002fee <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8002fde:	4b71      	ldr	r3, [pc, #452]	; (80031a4 <extInt_Config+0x4dc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	4a70      	ldr	r2, [pc, #448]	; (80031a4 <extInt_Config+0x4dc>)
 8002fe4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fe8:	6093      	str	r3, [r2, #8]
		break;
 8002fea:	f000 bc5e 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a6f      	ldr	r2, [pc, #444]	; (80031b4 <extInt_Config+0x4ec>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d107      	bne.n	800300a <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8002ffa:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <extInt_Config+0x4dc>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	4a69      	ldr	r2, [pc, #420]	; (80031a4 <extInt_Config+0x4dc>)
 8003000:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003004:	6093      	str	r3, [r2, #8]
		break;
 8003006:	f000 bc50 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a69      	ldr	r2, [pc, #420]	; (80031b8 <extInt_Config+0x4f0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d107      	bne.n	8003026 <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8003016:	4b63      	ldr	r3, [pc, #396]	; (80031a4 <extInt_Config+0x4dc>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4a62      	ldr	r2, [pc, #392]	; (80031a4 <extInt_Config+0x4dc>)
 800301c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003020:	6093      	str	r3, [r2, #8]
		break;
 8003022:	f000 bc42 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4a5c      	ldr	r2, [pc, #368]	; (80031a0 <extInt_Config+0x4d8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d107      	bne.n	8003042 <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8003032:	4b5c      	ldr	r3, [pc, #368]	; (80031a4 <extInt_Config+0x4dc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	4a5b      	ldr	r2, [pc, #364]	; (80031a4 <extInt_Config+0x4dc>)
 8003038:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800303c:	6093      	str	r3, [r2, #8]
		break;
 800303e:	f000 bc34 	b.w	80038aa <extInt_Config+0xbe2>
			__NOP();
 8003042:	bf00      	nop
		break;
 8003044:	f000 bc31 	b.w	80038aa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 8003048:	4b56      	ldr	r3, [pc, #344]	; (80031a4 <extInt_Config+0x4dc>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a55      	ldr	r2, [pc, #340]	; (80031a4 <extInt_Config+0x4dc>)
 800304e:	f023 030f 	bic.w	r3, r3, #15
 8003052:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	4a53      	ldr	r2, [pc, #332]	; (80031a8 <extInt_Config+0x4e0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d105      	bne.n	800306c <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <extInt_Config+0x4dc>)
 8003062:	4a50      	ldr	r2, [pc, #320]	; (80031a4 <extInt_Config+0x4dc>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003068:	f000 bc1f 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	4a4e      	ldr	r2, [pc, #312]	; (80031ac <extInt_Config+0x4e4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d107      	bne.n	8003088 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8003078:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <extInt_Config+0x4dc>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4a49      	ldr	r2, [pc, #292]	; (80031a4 <extInt_Config+0x4dc>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	60d3      	str	r3, [r2, #12]
		break;
 8003084:	f000 bc11 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	4a48      	ldr	r2, [pc, #288]	; (80031b0 <extInt_Config+0x4e8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d107      	bne.n	80030a4 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8003094:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <extInt_Config+0x4dc>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a42      	ldr	r2, [pc, #264]	; (80031a4 <extInt_Config+0x4dc>)
 800309a:	f043 0302 	orr.w	r3, r3, #2
 800309e:	60d3      	str	r3, [r2, #12]
		break;
 80030a0:	f000 bc03 	b.w	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	4a42      	ldr	r2, [pc, #264]	; (80031b4 <extInt_Config+0x4ec>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d106      	bne.n	80030be <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 80030b0:	4b3c      	ldr	r3, [pc, #240]	; (80031a4 <extInt_Config+0x4dc>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4a3b      	ldr	r2, [pc, #236]	; (80031a4 <extInt_Config+0x4dc>)
 80030b6:	f043 0303 	orr.w	r3, r3, #3
 80030ba:	60d3      	str	r3, [r2, #12]
		break;
 80030bc:	e3f5      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a3c      	ldr	r2, [pc, #240]	; (80031b8 <extInt_Config+0x4f0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d106      	bne.n	80030d8 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 80030ca:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <extInt_Config+0x4dc>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	4a35      	ldr	r2, [pc, #212]	; (80031a4 <extInt_Config+0x4dc>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	60d3      	str	r3, [r2, #12]
		break;
 80030d6:	e3e8      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	4a30      	ldr	r2, [pc, #192]	; (80031a0 <extInt_Config+0x4d8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d106      	bne.n	80030f2 <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 80030e4:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <extInt_Config+0x4dc>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4a2e      	ldr	r2, [pc, #184]	; (80031a4 <extInt_Config+0x4dc>)
 80030ea:	f043 0307 	orr.w	r3, r3, #7
 80030ee:	60d3      	str	r3, [r2, #12]
		break;
 80030f0:	e3db      	b.n	80038aa <extInt_Config+0xbe2>
			__NOP();
 80030f2:	bf00      	nop
		break;
 80030f4:	e3d9      	b.n	80038aa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 80030f6:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <extInt_Config+0x4dc>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	4a2a      	ldr	r2, [pc, #168]	; (80031a4 <extInt_Config+0x4dc>)
 80030fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003100:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	4a27      	ldr	r2, [pc, #156]	; (80031a8 <extInt_Config+0x4e0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d104      	bne.n	8003118 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 800310e:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <extInt_Config+0x4dc>)
 8003110:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <extInt_Config+0x4dc>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003116:	e3c8      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	4a23      	ldr	r2, [pc, #140]	; (80031ac <extInt_Config+0x4e4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d106      	bne.n	8003132 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8003124:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <extInt_Config+0x4dc>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a1e      	ldr	r2, [pc, #120]	; (80031a4 <extInt_Config+0x4dc>)
 800312a:	f043 0310 	orr.w	r3, r3, #16
 800312e:	60d3      	str	r3, [r2, #12]
		break;
 8003130:	e3bb      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a1d      	ldr	r2, [pc, #116]	; (80031b0 <extInt_Config+0x4e8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d106      	bne.n	800314c <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 800313e:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <extInt_Config+0x4dc>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <extInt_Config+0x4dc>)
 8003144:	f043 0320 	orr.w	r3, r3, #32
 8003148:	60d3      	str	r3, [r2, #12]
		break;
 800314a:	e3ae      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <extInt_Config+0x4ec>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d106      	bne.n	8003166 <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <extInt_Config+0x4dc>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4a11      	ldr	r2, [pc, #68]	; (80031a4 <extInt_Config+0x4dc>)
 800315e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003162:	60d3      	str	r3, [r2, #12]
		break;
 8003164:	e3a1      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a12      	ldr	r2, [pc, #72]	; (80031b8 <extInt_Config+0x4f0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d106      	bne.n	8003180 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <extInt_Config+0x4dc>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	4a0b      	ldr	r2, [pc, #44]	; (80031a4 <extInt_Config+0x4dc>)
 8003178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800317c:	60d3      	str	r3, [r2, #12]
		break;
 800317e:	e394      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	4a06      	ldr	r2, [pc, #24]	; (80031a0 <extInt_Config+0x4d8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d106      	bne.n	800319a <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <extInt_Config+0x4dc>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a04      	ldr	r2, [pc, #16]	; (80031a4 <extInt_Config+0x4dc>)
 8003192:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003196:	60d3      	str	r3, [r2, #12]
		break;
 8003198:	e387      	b.n	80038aa <extInt_Config+0xbe2>
			__NOP();
 800319a:	bf00      	nop
		break;
 800319c:	e385      	b.n	80038aa <extInt_Config+0xbe2>
 800319e:	bf00      	nop
 80031a0:	40021c00 	.word	0x40021c00
 80031a4:	40013800 	.word	0x40013800
 80031a8:	40020000 	.word	0x40020000
 80031ac:	40020400 	.word	0x40020400
 80031b0:	40020800 	.word	0x40020800
 80031b4:	40020c00 	.word	0x40020c00
 80031b8:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 80031bc:	4b86      	ldr	r3, [pc, #536]	; (80033d8 <extInt_Config+0x710>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4a85      	ldr	r2, [pc, #532]	; (80033d8 <extInt_Config+0x710>)
 80031c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031c6:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	4a83      	ldr	r2, [pc, #524]	; (80033dc <extInt_Config+0x714>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d104      	bne.n	80031de <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 80031d4:	4b80      	ldr	r3, [pc, #512]	; (80033d8 <extInt_Config+0x710>)
 80031d6:	4a80      	ldr	r2, [pc, #512]	; (80033d8 <extInt_Config+0x710>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80031dc:	e365      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a7e      	ldr	r2, [pc, #504]	; (80033e0 <extInt_Config+0x718>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d106      	bne.n	80031f8 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 80031ea:	4b7b      	ldr	r3, [pc, #492]	; (80033d8 <extInt_Config+0x710>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	4a7a      	ldr	r2, [pc, #488]	; (80033d8 <extInt_Config+0x710>)
 80031f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f4:	60d3      	str	r3, [r2, #12]
		break;
 80031f6:	e358      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	4a79      	ldr	r2, [pc, #484]	; (80033e4 <extInt_Config+0x71c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d106      	bne.n	8003212 <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8003204:	4b74      	ldr	r3, [pc, #464]	; (80033d8 <extInt_Config+0x710>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a73      	ldr	r2, [pc, #460]	; (80033d8 <extInt_Config+0x710>)
 800320a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800320e:	60d3      	str	r3, [r2, #12]
		break;
 8003210:	e34b      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a73      	ldr	r2, [pc, #460]	; (80033e8 <extInt_Config+0x720>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d106      	bne.n	800322c <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800321e:	4b6e      	ldr	r3, [pc, #440]	; (80033d8 <extInt_Config+0x710>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	4a6d      	ldr	r2, [pc, #436]	; (80033d8 <extInt_Config+0x710>)
 8003224:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003228:	60d3      	str	r3, [r2, #12]
		break;
 800322a:	e33e      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4a6e      	ldr	r2, [pc, #440]	; (80033ec <extInt_Config+0x724>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d106      	bne.n	8003246 <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8003238:	4b67      	ldr	r3, [pc, #412]	; (80033d8 <extInt_Config+0x710>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a66      	ldr	r2, [pc, #408]	; (80033d8 <extInt_Config+0x710>)
 800323e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003242:	60d3      	str	r3, [r2, #12]
		break;
 8003244:	e331      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a68      	ldr	r2, [pc, #416]	; (80033f0 <extInt_Config+0x728>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d106      	bne.n	8003260 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8003252:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <extInt_Config+0x710>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	4a60      	ldr	r2, [pc, #384]	; (80033d8 <extInt_Config+0x710>)
 8003258:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800325c:	60d3      	str	r3, [r2, #12]
		break;
 800325e:	e324      	b.n	80038aa <extInt_Config+0xbe2>
			__NOP();
 8003260:	bf00      	nop
		break;
 8003262:	e322      	b.n	80038aa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 8003264:	4b5c      	ldr	r3, [pc, #368]	; (80033d8 <extInt_Config+0x710>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a5b      	ldr	r2, [pc, #364]	; (80033d8 <extInt_Config+0x710>)
 800326a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800326e:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	4a59      	ldr	r2, [pc, #356]	; (80033dc <extInt_Config+0x714>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d104      	bne.n	8003286 <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 800327c:	4b56      	ldr	r3, [pc, #344]	; (80033d8 <extInt_Config+0x710>)
 800327e:	4a56      	ldr	r2, [pc, #344]	; (80033d8 <extInt_Config+0x710>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003284:	e311      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4a54      	ldr	r2, [pc, #336]	; (80033e0 <extInt_Config+0x718>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d106      	bne.n	80032a0 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8003292:	4b51      	ldr	r3, [pc, #324]	; (80033d8 <extInt_Config+0x710>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	4a50      	ldr	r2, [pc, #320]	; (80033d8 <extInt_Config+0x710>)
 8003298:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800329c:	60d3      	str	r3, [r2, #12]
		break;
 800329e:	e304      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	4a4f      	ldr	r2, [pc, #316]	; (80033e4 <extInt_Config+0x71c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d106      	bne.n	80032ba <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 80032ac:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <extInt_Config+0x710>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a49      	ldr	r2, [pc, #292]	; (80033d8 <extInt_Config+0x710>)
 80032b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032b6:	60d3      	str	r3, [r2, #12]
		break;
 80032b8:	e2f7      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a49      	ldr	r2, [pc, #292]	; (80033e8 <extInt_Config+0x720>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d106      	bne.n	80032d4 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 80032c6:	4b44      	ldr	r3, [pc, #272]	; (80033d8 <extInt_Config+0x710>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4a43      	ldr	r2, [pc, #268]	; (80033d8 <extInt_Config+0x710>)
 80032cc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80032d0:	60d3      	str	r3, [r2, #12]
		break;
 80032d2:	e2ea      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4a44      	ldr	r2, [pc, #272]	; (80033ec <extInt_Config+0x724>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d106      	bne.n	80032ee <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 80032e0:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <extInt_Config+0x710>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a3c      	ldr	r2, [pc, #240]	; (80033d8 <extInt_Config+0x710>)
 80032e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ea:	60d3      	str	r3, [r2, #12]
		break;
 80032ec:	e2dd      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a3e      	ldr	r2, [pc, #248]	; (80033f0 <extInt_Config+0x728>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d106      	bne.n	8003308 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 80032fa:	4b37      	ldr	r3, [pc, #220]	; (80033d8 <extInt_Config+0x710>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	4a36      	ldr	r2, [pc, #216]	; (80033d8 <extInt_Config+0x710>)
 8003300:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003304:	60d3      	str	r3, [r2, #12]
		break;
 8003306:	e2d0      	b.n	80038aa <extInt_Config+0xbe2>
			__NOP();
 8003308:	bf00      	nop
		break;
 800330a:	e2ce      	b.n	80038aa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 800330c:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <extInt_Config+0x710>)
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	4a31      	ldr	r2, [pc, #196]	; (80033d8 <extInt_Config+0x710>)
 8003312:	f023 030f 	bic.w	r3, r3, #15
 8003316:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	4a2f      	ldr	r2, [pc, #188]	; (80033dc <extInt_Config+0x714>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d104      	bne.n	800332e <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8003324:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <extInt_Config+0x710>)
 8003326:	4a2c      	ldr	r2, [pc, #176]	; (80033d8 <extInt_Config+0x710>)
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800332c:	e2bd      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <extInt_Config+0x718>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d106      	bne.n	8003348 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800333a:	4b27      	ldr	r3, [pc, #156]	; (80033d8 <extInt_Config+0x710>)
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	4a26      	ldr	r2, [pc, #152]	; (80033d8 <extInt_Config+0x710>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	6113      	str	r3, [r2, #16]
		break;
 8003346:	e2b0      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	4a25      	ldr	r2, [pc, #148]	; (80033e4 <extInt_Config+0x71c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d106      	bne.n	8003362 <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8003354:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <extInt_Config+0x710>)
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <extInt_Config+0x710>)
 800335a:	f043 0302 	orr.w	r3, r3, #2
 800335e:	6113      	str	r3, [r2, #16]
		break;
 8003360:	e2a3      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a1f      	ldr	r2, [pc, #124]	; (80033e8 <extInt_Config+0x720>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d106      	bne.n	800337c <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <extInt_Config+0x710>)
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <extInt_Config+0x710>)
 8003374:	f043 0303 	orr.w	r3, r3, #3
 8003378:	6113      	str	r3, [r2, #16]
		break;
 800337a:	e296      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	4a1a      	ldr	r2, [pc, #104]	; (80033ec <extInt_Config+0x724>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d106      	bne.n	8003396 <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <extInt_Config+0x710>)
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	4a12      	ldr	r2, [pc, #72]	; (80033d8 <extInt_Config+0x710>)
 800338e:	f043 0304 	orr.w	r3, r3, #4
 8003392:	6113      	str	r3, [r2, #16]
		break;
 8003394:	e289      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <extInt_Config+0x728>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d106      	bne.n	80033b0 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <extInt_Config+0x710>)
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <extInt_Config+0x710>)
 80033a8:	f043 0307 	orr.w	r3, r3, #7
 80033ac:	6113      	str	r3, [r2, #16]
		break;
 80033ae:	e27c      	b.n	80038aa <extInt_Config+0xbe2>
			__NOP();
 80033b0:	bf00      	nop
		break;
 80033b2:	e27a      	b.n	80038aa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <extInt_Config+0x710>)
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	4a07      	ldr	r2, [pc, #28]	; (80033d8 <extInt_Config+0x710>)
 80033ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033be:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	4a05      	ldr	r2, [pc, #20]	; (80033dc <extInt_Config+0x714>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d113      	bne.n	80033f4 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 80033cc:	4b02      	ldr	r3, [pc, #8]	; (80033d8 <extInt_Config+0x710>)
 80033ce:	4a02      	ldr	r2, [pc, #8]	; (80033d8 <extInt_Config+0x710>)
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80033d4:	e269      	b.n	80038aa <extInt_Config+0xbe2>
 80033d6:	bf00      	nop
 80033d8:	40013800 	.word	0x40013800
 80033dc:	40020000 	.word	0x40020000
 80033e0:	40020400 	.word	0x40020400
 80033e4:	40020800 	.word	0x40020800
 80033e8:	40020c00 	.word	0x40020c00
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	4a83      	ldr	r2, [pc, #524]	; (8003608 <extInt_Config+0x940>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d106      	bne.n	800340e <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8003400:	4b82      	ldr	r3, [pc, #520]	; (800360c <extInt_Config+0x944>)
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	4a81      	ldr	r2, [pc, #516]	; (800360c <extInt_Config+0x944>)
 8003406:	f043 0310 	orr.w	r3, r3, #16
 800340a:	6113      	str	r3, [r2, #16]
		break;
 800340c:	e24d      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a7e      	ldr	r2, [pc, #504]	; (8003610 <extInt_Config+0x948>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d106      	bne.n	8003428 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800341a:	4b7c      	ldr	r3, [pc, #496]	; (800360c <extInt_Config+0x944>)
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	4a7b      	ldr	r2, [pc, #492]	; (800360c <extInt_Config+0x944>)
 8003420:	f043 0320 	orr.w	r3, r3, #32
 8003424:	6113      	str	r3, [r2, #16]
		break;
 8003426:	e240      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	4a79      	ldr	r2, [pc, #484]	; (8003614 <extInt_Config+0x94c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d106      	bne.n	8003442 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8003434:	4b75      	ldr	r3, [pc, #468]	; (800360c <extInt_Config+0x944>)
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	4a74      	ldr	r2, [pc, #464]	; (800360c <extInt_Config+0x944>)
 800343a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800343e:	6113      	str	r3, [r2, #16]
		break;
 8003440:	e233      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a73      	ldr	r2, [pc, #460]	; (8003618 <extInt_Config+0x950>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d106      	bne.n	800345c <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800344e:	4b6f      	ldr	r3, [pc, #444]	; (800360c <extInt_Config+0x944>)
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	4a6e      	ldr	r2, [pc, #440]	; (800360c <extInt_Config+0x944>)
 8003454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003458:	6113      	str	r3, [r2, #16]
		break;
 800345a:	e226      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	4a6e      	ldr	r2, [pc, #440]	; (800361c <extInt_Config+0x954>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d106      	bne.n	8003476 <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8003468:	4b68      	ldr	r3, [pc, #416]	; (800360c <extInt_Config+0x944>)
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	4a67      	ldr	r2, [pc, #412]	; (800360c <extInt_Config+0x944>)
 800346e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003472:	6113      	str	r3, [r2, #16]
		break;
 8003474:	e219      	b.n	80038aa <extInt_Config+0xbe2>
			__NOP();
 8003476:	bf00      	nop
		break;
 8003478:	e217      	b.n	80038aa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 800347a:	4b64      	ldr	r3, [pc, #400]	; (800360c <extInt_Config+0x944>)
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	4a63      	ldr	r2, [pc, #396]	; (800360c <extInt_Config+0x944>)
 8003480:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003484:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a64      	ldr	r2, [pc, #400]	; (8003620 <extInt_Config+0x958>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d104      	bne.n	800349c <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8003492:	4b5e      	ldr	r3, [pc, #376]	; (800360c <extInt_Config+0x944>)
 8003494:	4a5d      	ldr	r2, [pc, #372]	; (800360c <extInt_Config+0x944>)
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800349a:	e206      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	4a59      	ldr	r2, [pc, #356]	; (8003608 <extInt_Config+0x940>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d106      	bne.n	80034b6 <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80034a8:	4b58      	ldr	r3, [pc, #352]	; (800360c <extInt_Config+0x944>)
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	4a57      	ldr	r2, [pc, #348]	; (800360c <extInt_Config+0x944>)
 80034ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b2:	6113      	str	r3, [r2, #16]
		break;
 80034b4:	e1f9      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4a54      	ldr	r2, [pc, #336]	; (8003610 <extInt_Config+0x948>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d106      	bne.n	80034d0 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 80034c2:	4b52      	ldr	r3, [pc, #328]	; (800360c <extInt_Config+0x944>)
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	4a51      	ldr	r2, [pc, #324]	; (800360c <extInt_Config+0x944>)
 80034c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034cc:	6113      	str	r3, [r2, #16]
		break;
 80034ce:	e1ec      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	4a4f      	ldr	r2, [pc, #316]	; (8003614 <extInt_Config+0x94c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d106      	bne.n	80034ea <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 80034dc:	4b4b      	ldr	r3, [pc, #300]	; (800360c <extInt_Config+0x944>)
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	4a4a      	ldr	r2, [pc, #296]	; (800360c <extInt_Config+0x944>)
 80034e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80034e6:	6113      	str	r3, [r2, #16]
		break;
 80034e8:	e1df      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4a49      	ldr	r2, [pc, #292]	; (8003618 <extInt_Config+0x950>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d106      	bne.n	8003504 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 80034f6:	4b45      	ldr	r3, [pc, #276]	; (800360c <extInt_Config+0x944>)
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	4a44      	ldr	r2, [pc, #272]	; (800360c <extInt_Config+0x944>)
 80034fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003500:	6113      	str	r3, [r2, #16]
		break;
 8003502:	e1d2      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4a44      	ldr	r2, [pc, #272]	; (800361c <extInt_Config+0x954>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d106      	bne.n	800351e <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8003510:	4b3e      	ldr	r3, [pc, #248]	; (800360c <extInt_Config+0x944>)
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	4a3d      	ldr	r2, [pc, #244]	; (800360c <extInt_Config+0x944>)
 8003516:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800351a:	6113      	str	r3, [r2, #16]
		break;
 800351c:	e1c5      	b.n	80038aa <extInt_Config+0xbe2>
			__NOP();
 800351e:	bf00      	nop
		break;
 8003520:	e1c3      	b.n	80038aa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8003522:	4b3a      	ldr	r3, [pc, #232]	; (800360c <extInt_Config+0x944>)
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	4a39      	ldr	r2, [pc, #228]	; (800360c <extInt_Config+0x944>)
 8003528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800352c:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a3a      	ldr	r2, [pc, #232]	; (8003620 <extInt_Config+0x958>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d104      	bne.n	8003544 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800353a:	4b34      	ldr	r3, [pc, #208]	; (800360c <extInt_Config+0x944>)
 800353c:	4a33      	ldr	r2, [pc, #204]	; (800360c <extInt_Config+0x944>)
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003542:	e1b2      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4a2f      	ldr	r2, [pc, #188]	; (8003608 <extInt_Config+0x940>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d106      	bne.n	800355e <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8003550:	4b2e      	ldr	r3, [pc, #184]	; (800360c <extInt_Config+0x944>)
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	4a2d      	ldr	r2, [pc, #180]	; (800360c <extInt_Config+0x944>)
 8003556:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800355a:	6113      	str	r3, [r2, #16]
		break;
 800355c:	e1a5      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4a2a      	ldr	r2, [pc, #168]	; (8003610 <extInt_Config+0x948>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d106      	bne.n	8003578 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 800356a:	4b28      	ldr	r3, [pc, #160]	; (800360c <extInt_Config+0x944>)
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	4a27      	ldr	r2, [pc, #156]	; (800360c <extInt_Config+0x944>)
 8003570:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003574:	6113      	str	r3, [r2, #16]
		break;
 8003576:	e198      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	4a25      	ldr	r2, [pc, #148]	; (8003614 <extInt_Config+0x94c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d106      	bne.n	8003592 <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8003584:	4b21      	ldr	r3, [pc, #132]	; (800360c <extInt_Config+0x944>)
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	4a20      	ldr	r2, [pc, #128]	; (800360c <extInt_Config+0x944>)
 800358a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800358e:	6113      	str	r3, [r2, #16]
		break;
 8003590:	e18b      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <extInt_Config+0x950>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d106      	bne.n	80035ac <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800359e:	4b1b      	ldr	r3, [pc, #108]	; (800360c <extInt_Config+0x944>)
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	4a1a      	ldr	r2, [pc, #104]	; (800360c <extInt_Config+0x944>)
 80035a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a8:	6113      	str	r3, [r2, #16]
		break;
 80035aa:	e17e      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	4a1a      	ldr	r2, [pc, #104]	; (800361c <extInt_Config+0x954>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d106      	bne.n	80035c6 <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 80035b8:	4b14      	ldr	r3, [pc, #80]	; (800360c <extInt_Config+0x944>)
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	4a13      	ldr	r2, [pc, #76]	; (800360c <extInt_Config+0x944>)
 80035be:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80035c2:	6113      	str	r3, [r2, #16]
		break;
 80035c4:	e171      	b.n	80038aa <extInt_Config+0xbe2>
			__NOP();
 80035c6:	bf00      	nop
		break;
 80035c8:	e16f      	b.n	80038aa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <extInt_Config+0x944>)
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	4a0f      	ldr	r2, [pc, #60]	; (800360c <extInt_Config+0x944>)
 80035d0:	f023 030f 	bic.w	r3, r3, #15
 80035d4:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4a10      	ldr	r2, [pc, #64]	; (8003620 <extInt_Config+0x958>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d104      	bne.n	80035ec <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <extInt_Config+0x944>)
 80035e4:	4a09      	ldr	r2, [pc, #36]	; (800360c <extInt_Config+0x944>)
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80035ea:	e15e      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	4a05      	ldr	r2, [pc, #20]	; (8003608 <extInt_Config+0x940>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d115      	bne.n	8003624 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <extInt_Config+0x944>)
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	4a03      	ldr	r2, [pc, #12]	; (800360c <extInt_Config+0x944>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	6153      	str	r3, [r2, #20]
		break;
 8003604:	e151      	b.n	80038aa <extInt_Config+0xbe2>
 8003606:	bf00      	nop
 8003608:	40020400 	.word	0x40020400
 800360c:	40013800 	.word	0x40013800
 8003610:	40020800 	.word	0x40020800
 8003614:	40020c00 	.word	0x40020c00
 8003618:	40021000 	.word	0x40021000
 800361c:	40021c00 	.word	0x40021c00
 8003620:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	4a83      	ldr	r2, [pc, #524]	; (8003838 <extInt_Config+0xb70>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d106      	bne.n	800363e <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8003630:	4b82      	ldr	r3, [pc, #520]	; (800383c <extInt_Config+0xb74>)
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	4a81      	ldr	r2, [pc, #516]	; (800383c <extInt_Config+0xb74>)
 8003636:	f043 0302 	orr.w	r3, r3, #2
 800363a:	6153      	str	r3, [r2, #20]
		break;
 800363c:	e135      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4a7e      	ldr	r2, [pc, #504]	; (8003840 <extInt_Config+0xb78>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d106      	bne.n	8003658 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800364a:	4b7c      	ldr	r3, [pc, #496]	; (800383c <extInt_Config+0xb74>)
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	4a7b      	ldr	r2, [pc, #492]	; (800383c <extInt_Config+0xb74>)
 8003650:	f043 0303 	orr.w	r3, r3, #3
 8003654:	6153      	str	r3, [r2, #20]
		break;
 8003656:	e128      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	4a79      	ldr	r2, [pc, #484]	; (8003844 <extInt_Config+0xb7c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d106      	bne.n	8003672 <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8003664:	4b75      	ldr	r3, [pc, #468]	; (800383c <extInt_Config+0xb74>)
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	4a74      	ldr	r2, [pc, #464]	; (800383c <extInt_Config+0xb74>)
 800366a:	f043 0304 	orr.w	r3, r3, #4
 800366e:	6153      	str	r3, [r2, #20]
		break;
 8003670:	e11b      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a73      	ldr	r2, [pc, #460]	; (8003848 <extInt_Config+0xb80>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d106      	bne.n	800368c <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 800367e:	4b6f      	ldr	r3, [pc, #444]	; (800383c <extInt_Config+0xb74>)
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	4a6e      	ldr	r2, [pc, #440]	; (800383c <extInt_Config+0xb74>)
 8003684:	f043 0307 	orr.w	r3, r3, #7
 8003688:	6153      	str	r3, [r2, #20]
		break;
 800368a:	e10e      	b.n	80038aa <extInt_Config+0xbe2>
			__NOP();
 800368c:	bf00      	nop
		break;
 800368e:	e10c      	b.n	80038aa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8003690:	4b6a      	ldr	r3, [pc, #424]	; (800383c <extInt_Config+0xb74>)
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	4a69      	ldr	r2, [pc, #420]	; (800383c <extInt_Config+0xb74>)
 8003696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800369a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	4a6a      	ldr	r2, [pc, #424]	; (800384c <extInt_Config+0xb84>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d104      	bne.n	80036b2 <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 80036a8:	4b64      	ldr	r3, [pc, #400]	; (800383c <extInt_Config+0xb74>)
 80036aa:	4a64      	ldr	r2, [pc, #400]	; (800383c <extInt_Config+0xb74>)
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80036b0:	e0fb      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a65      	ldr	r2, [pc, #404]	; (8003850 <extInt_Config+0xb88>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d106      	bne.n	80036cc <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 80036be:	4b5f      	ldr	r3, [pc, #380]	; (800383c <extInt_Config+0xb74>)
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	4a5e      	ldr	r2, [pc, #376]	; (800383c <extInt_Config+0xb74>)
 80036c4:	f043 0310 	orr.w	r3, r3, #16
 80036c8:	6153      	str	r3, [r2, #20]
		break;
 80036ca:	e0ee      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	4a59      	ldr	r2, [pc, #356]	; (8003838 <extInt_Config+0xb70>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d106      	bne.n	80036e6 <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 80036d8:	4b58      	ldr	r3, [pc, #352]	; (800383c <extInt_Config+0xb74>)
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4a57      	ldr	r2, [pc, #348]	; (800383c <extInt_Config+0xb74>)
 80036de:	f043 0320 	orr.w	r3, r3, #32
 80036e2:	6153      	str	r3, [r2, #20]
		break;
 80036e4:	e0e1      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4a54      	ldr	r2, [pc, #336]	; (8003840 <extInt_Config+0xb78>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d106      	bne.n	8003700 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 80036f2:	4b52      	ldr	r3, [pc, #328]	; (800383c <extInt_Config+0xb74>)
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	4a51      	ldr	r2, [pc, #324]	; (800383c <extInt_Config+0xb74>)
 80036f8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80036fc:	6153      	str	r3, [r2, #20]
		break;
 80036fe:	e0d4      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	4a4f      	ldr	r2, [pc, #316]	; (8003844 <extInt_Config+0xb7c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d106      	bne.n	800371a <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800370c:	4b4b      	ldr	r3, [pc, #300]	; (800383c <extInt_Config+0xb74>)
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	4a4a      	ldr	r2, [pc, #296]	; (800383c <extInt_Config+0xb74>)
 8003712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003716:	6153      	str	r3, [r2, #20]
		break;
 8003718:	e0c7      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4a49      	ldr	r2, [pc, #292]	; (8003848 <extInt_Config+0xb80>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d106      	bne.n	8003734 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8003726:	4b45      	ldr	r3, [pc, #276]	; (800383c <extInt_Config+0xb74>)
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	4a44      	ldr	r2, [pc, #272]	; (800383c <extInt_Config+0xb74>)
 800372c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003730:	6153      	str	r3, [r2, #20]
		break;
 8003732:	e0ba      	b.n	80038aa <extInt_Config+0xbe2>
			__NOP();
 8003734:	bf00      	nop
		break;
 8003736:	e0b8      	b.n	80038aa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8003738:	4b40      	ldr	r3, [pc, #256]	; (800383c <extInt_Config+0xb74>)
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	4a3f      	ldr	r2, [pc, #252]	; (800383c <extInt_Config+0xb74>)
 800373e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003742:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	4a40      	ldr	r2, [pc, #256]	; (800384c <extInt_Config+0xb84>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d104      	bne.n	800375a <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8003750:	4b3a      	ldr	r3, [pc, #232]	; (800383c <extInt_Config+0xb74>)
 8003752:	4a3a      	ldr	r2, [pc, #232]	; (800383c <extInt_Config+0xb74>)
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003758:	e0a7      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	4a3b      	ldr	r2, [pc, #236]	; (8003850 <extInt_Config+0xb88>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d106      	bne.n	8003774 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8003766:	4b35      	ldr	r3, [pc, #212]	; (800383c <extInt_Config+0xb74>)
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	4a34      	ldr	r2, [pc, #208]	; (800383c <extInt_Config+0xb74>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003770:	6153      	str	r3, [r2, #20]
		break;
 8003772:	e09a      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	4a2f      	ldr	r2, [pc, #188]	; (8003838 <extInt_Config+0xb70>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d106      	bne.n	800378e <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8003780:	4b2e      	ldr	r3, [pc, #184]	; (800383c <extInt_Config+0xb74>)
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	4a2d      	ldr	r2, [pc, #180]	; (800383c <extInt_Config+0xb74>)
 8003786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800378a:	6153      	str	r3, [r2, #20]
		break;
 800378c:	e08d      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a2a      	ldr	r2, [pc, #168]	; (8003840 <extInt_Config+0xb78>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d106      	bne.n	80037a8 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 800379a:	4b28      	ldr	r3, [pc, #160]	; (800383c <extInt_Config+0xb74>)
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	4a27      	ldr	r2, [pc, #156]	; (800383c <extInt_Config+0xb74>)
 80037a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80037a4:	6153      	str	r3, [r2, #20]
		break;
 80037a6:	e080      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	4a25      	ldr	r2, [pc, #148]	; (8003844 <extInt_Config+0xb7c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d106      	bne.n	80037c2 <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 80037b4:	4b21      	ldr	r3, [pc, #132]	; (800383c <extInt_Config+0xb74>)
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	4a20      	ldr	r2, [pc, #128]	; (800383c <extInt_Config+0xb74>)
 80037ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037be:	6153      	str	r3, [r2, #20]
		break;
 80037c0:	e073      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <extInt_Config+0xb80>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d106      	bne.n	80037dc <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 80037ce:	4b1b      	ldr	r3, [pc, #108]	; (800383c <extInt_Config+0xb74>)
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	4a1a      	ldr	r2, [pc, #104]	; (800383c <extInt_Config+0xb74>)
 80037d4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037d8:	6153      	str	r3, [r2, #20]
		break;
 80037da:	e066      	b.n	80038aa <extInt_Config+0xbe2>
			__NOP();
 80037dc:	bf00      	nop
		break;
 80037de:	e064      	b.n	80038aa <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 80037e0:	4b16      	ldr	r3, [pc, #88]	; (800383c <extInt_Config+0xb74>)
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	4a15      	ldr	r2, [pc, #84]	; (800383c <extInt_Config+0xb74>)
 80037e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037ea:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	4a16      	ldr	r2, [pc, #88]	; (800384c <extInt_Config+0xb84>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d104      	bne.n	8003802 <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 80037f8:	4b10      	ldr	r3, [pc, #64]	; (800383c <extInt_Config+0xb74>)
 80037fa:	4a10      	ldr	r2, [pc, #64]	; (800383c <extInt_Config+0xb74>)
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003800:	e053      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a11      	ldr	r2, [pc, #68]	; (8003850 <extInt_Config+0xb88>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d106      	bne.n	800381c <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <extInt_Config+0xb74>)
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <extInt_Config+0xb74>)
 8003814:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003818:	6153      	str	r3, [r2, #20]
		break;
 800381a:	e046      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	4a05      	ldr	r2, [pc, #20]	; (8003838 <extInt_Config+0xb70>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d115      	bne.n	8003854 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <extInt_Config+0xb74>)
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	4a03      	ldr	r2, [pc, #12]	; (800383c <extInt_Config+0xb74>)
 800382e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003832:	6153      	str	r3, [r2, #20]
		break;
 8003834:	e039      	b.n	80038aa <extInt_Config+0xbe2>
 8003836:	bf00      	nop
 8003838:	40020800 	.word	0x40020800
 800383c:	40013800 	.word	0x40013800
 8003840:	40020c00 	.word	0x40020c00
 8003844:	40021000 	.word	0x40021000
 8003848:	40021c00 	.word	0x40021c00
 800384c:	40020000 	.word	0x40020000
 8003850:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4a9d      	ldr	r2, [pc, #628]	; (8003ad0 <extInt_Config+0xe08>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d106      	bne.n	800386e <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8003860:	4b9c      	ldr	r3, [pc, #624]	; (8003ad4 <extInt_Config+0xe0c>)
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	4a9b      	ldr	r2, [pc, #620]	; (8003ad4 <extInt_Config+0xe0c>)
 8003866:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800386a:	6153      	str	r3, [r2, #20]
		break;
 800386c:	e01d      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a98      	ldr	r2, [pc, #608]	; (8003ad8 <extInt_Config+0xe10>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d106      	bne.n	8003888 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 800387a:	4b96      	ldr	r3, [pc, #600]	; (8003ad4 <extInt_Config+0xe0c>)
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	4a95      	ldr	r2, [pc, #596]	; (8003ad4 <extInt_Config+0xe0c>)
 8003880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003884:	6153      	str	r3, [r2, #20]
		break;
 8003886:	e010      	b.n	80038aa <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	4a93      	ldr	r2, [pc, #588]	; (8003adc <extInt_Config+0xe14>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d106      	bne.n	80038a2 <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8003894:	4b8f      	ldr	r3, [pc, #572]	; (8003ad4 <extInt_Config+0xe0c>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	4a8e      	ldr	r2, [pc, #568]	; (8003ad4 <extInt_Config+0xe0c>)
 800389a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800389e:	6153      	str	r3, [r2, #20]
		break;
 80038a0:	e003      	b.n	80038aa <extInt_Config+0xbe2>
			__NOP();
 80038a2:	bf00      	nop
		break;
 80038a4:	e001      	b.n	80038aa <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 80038a6:	bf00      	nop
		break;
 80038a8:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	791b      	ldrb	r3, [r3, #4]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d126      	bne.n	8003900 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80038b2:	4b8b      	ldr	r3, [pc, #556]	; (8003ae0 <extInt_Config+0xe18>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	7812      	ldrb	r2, [r2, #0]
 80038bc:	4611      	mov	r1, r2
 80038be:	2201      	movs	r2, #1
 80038c0:	408a      	lsls	r2, r1
 80038c2:	43d2      	mvns	r2, r2
 80038c4:	4611      	mov	r1, r2
 80038c6:	4a86      	ldr	r2, [pc, #536]	; (8003ae0 <extInt_Config+0xe18>)
 80038c8:	400b      	ands	r3, r1
 80038ca:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80038cc:	4b84      	ldr	r3, [pc, #528]	; (8003ae0 <extInt_Config+0xe18>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	7812      	ldrb	r2, [r2, #0]
 80038d6:	4611      	mov	r1, r2
 80038d8:	2201      	movs	r2, #1
 80038da:	408a      	lsls	r2, r1
 80038dc:	43d2      	mvns	r2, r2
 80038de:	4611      	mov	r1, r2
 80038e0:	4a7f      	ldr	r2, [pc, #508]	; (8003ae0 <extInt_Config+0xe18>)
 80038e2:	400b      	ands	r3, r1
 80038e4:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80038e6:	4b7e      	ldr	r3, [pc, #504]	; (8003ae0 <extInt_Config+0xe18>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	7812      	ldrb	r2, [r2, #0]
 80038f0:	4611      	mov	r1, r2
 80038f2:	2201      	movs	r2, #1
 80038f4:	408a      	lsls	r2, r1
 80038f6:	4611      	mov	r1, r2
 80038f8:	4a79      	ldr	r2, [pc, #484]	; (8003ae0 <extInt_Config+0xe18>)
 80038fa:	430b      	orrs	r3, r1
 80038fc:	6093      	str	r3, [r2, #8]
 80038fe:	e05c      	b.n	80039ba <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	791b      	ldrb	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d126      	bne.n	8003956 <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003908:	4b75      	ldr	r3, [pc, #468]	; (8003ae0 <extInt_Config+0xe18>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	7812      	ldrb	r2, [r2, #0]
 8003912:	4611      	mov	r1, r2
 8003914:	2201      	movs	r2, #1
 8003916:	408a      	lsls	r2, r1
 8003918:	43d2      	mvns	r2, r2
 800391a:	4611      	mov	r1, r2
 800391c:	4a70      	ldr	r2, [pc, #448]	; (8003ae0 <extInt_Config+0xe18>)
 800391e:	400b      	ands	r3, r1
 8003920:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003922:	4b6f      	ldr	r3, [pc, #444]	; (8003ae0 <extInt_Config+0xe18>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	7812      	ldrb	r2, [r2, #0]
 800392c:	4611      	mov	r1, r2
 800392e:	2201      	movs	r2, #1
 8003930:	408a      	lsls	r2, r1
 8003932:	43d2      	mvns	r2, r2
 8003934:	4611      	mov	r1, r2
 8003936:	4a6a      	ldr	r2, [pc, #424]	; (8003ae0 <extInt_Config+0xe18>)
 8003938:	400b      	ands	r3, r1
 800393a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800393c:	4b68      	ldr	r3, [pc, #416]	; (8003ae0 <extInt_Config+0xe18>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	7812      	ldrb	r2, [r2, #0]
 8003946:	4611      	mov	r1, r2
 8003948:	2201      	movs	r2, #1
 800394a:	408a      	lsls	r2, r1
 800394c:	4611      	mov	r1, r2
 800394e:	4a64      	ldr	r2, [pc, #400]	; (8003ae0 <extInt_Config+0xe18>)
 8003950:	430b      	orrs	r3, r1
 8003952:	60d3      	str	r3, [r2, #12]
 8003954:	e031      	b.n	80039ba <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003956:	4b62      	ldr	r3, [pc, #392]	; (8003ae0 <extInt_Config+0xe18>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	7812      	ldrb	r2, [r2, #0]
 8003960:	4611      	mov	r1, r2
 8003962:	2201      	movs	r2, #1
 8003964:	408a      	lsls	r2, r1
 8003966:	43d2      	mvns	r2, r2
 8003968:	4611      	mov	r1, r2
 800396a:	4a5d      	ldr	r2, [pc, #372]	; (8003ae0 <extInt_Config+0xe18>)
 800396c:	400b      	ands	r3, r1
 800396e:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003970:	4b5b      	ldr	r3, [pc, #364]	; (8003ae0 <extInt_Config+0xe18>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	7812      	ldrb	r2, [r2, #0]
 800397a:	4611      	mov	r1, r2
 800397c:	2201      	movs	r2, #1
 800397e:	408a      	lsls	r2, r1
 8003980:	43d2      	mvns	r2, r2
 8003982:	4611      	mov	r1, r2
 8003984:	4a56      	ldr	r2, [pc, #344]	; (8003ae0 <extInt_Config+0xe18>)
 8003986:	400b      	ands	r3, r1
 8003988:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800398a:	4b55      	ldr	r3, [pc, #340]	; (8003ae0 <extInt_Config+0xe18>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	7812      	ldrb	r2, [r2, #0]
 8003994:	4611      	mov	r1, r2
 8003996:	2201      	movs	r2, #1
 8003998:	408a      	lsls	r2, r1
 800399a:	4611      	mov	r1, r2
 800399c:	4a50      	ldr	r2, [pc, #320]	; (8003ae0 <extInt_Config+0xe18>)
 800399e:	430b      	orrs	r3, r1
 80039a0:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80039a2:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <extInt_Config+0xe18>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	7812      	ldrb	r2, [r2, #0]
 80039ac:	4611      	mov	r1, r2
 80039ae:	2201      	movs	r2, #1
 80039b0:	408a      	lsls	r2, r1
 80039b2:	4611      	mov	r1, r2
 80039b4:	4a4a      	ldr	r2, [pc, #296]	; (8003ae0 <extInt_Config+0xe18>)
 80039b6:	430b      	orrs	r3, r1
 80039b8:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80039ba:	4b49      	ldr	r3, [pc, #292]	; (8003ae0 <extInt_Config+0xe18>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	7812      	ldrb	r2, [r2, #0]
 80039c4:	4611      	mov	r1, r2
 80039c6:	2201      	movs	r2, #1
 80039c8:	408a      	lsls	r2, r1
 80039ca:	43d2      	mvns	r2, r2
 80039cc:	4611      	mov	r1, r2
 80039ce:	4a44      	ldr	r2, [pc, #272]	; (8003ae0 <extInt_Config+0xe18>)
 80039d0:	400b      	ands	r3, r1
 80039d2:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80039d4:	4b42      	ldr	r3, [pc, #264]	; (8003ae0 <extInt_Config+0xe18>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	7812      	ldrb	r2, [r2, #0]
 80039de:	4611      	mov	r1, r2
 80039e0:	2201      	movs	r2, #1
 80039e2:	408a      	lsls	r2, r1
 80039e4:	4611      	mov	r1, r2
 80039e6:	4a3e      	ldr	r2, [pc, #248]	; (8003ae0 <extInt_Config+0xe18>)
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039ec:	b672      	cpsid	i
}
 80039ee:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b0f      	cmp	r3, #15
 80039f8:	d862      	bhi.n	8003ac0 <extInt_Config+0xdf8>
 80039fa:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <extInt_Config+0xd38>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a41 	.word	0x08003a41
 8003a04:	08003a49 	.word	0x08003a49
 8003a08:	08003a51 	.word	0x08003a51
 8003a0c:	08003a59 	.word	0x08003a59
 8003a10:	08003a61 	.word	0x08003a61
 8003a14:	08003a69 	.word	0x08003a69
 8003a18:	08003a71 	.word	0x08003a71
 8003a1c:	08003a79 	.word	0x08003a79
 8003a20:	08003a81 	.word	0x08003a81
 8003a24:	08003a89 	.word	0x08003a89
 8003a28:	08003a91 	.word	0x08003a91
 8003a2c:	08003a99 	.word	0x08003a99
 8003a30:	08003aa1 	.word	0x08003aa1
 8003a34:	08003aa9 	.word	0x08003aa9
 8003a38:	08003ab1 	.word	0x08003ab1
 8003a3c:	08003ab9 	.word	0x08003ab9
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8003a40:	2006      	movs	r0, #6
 8003a42:	f7ff f923 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003a46:	e03c      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8003a48:	2007      	movs	r0, #7
 8003a4a:	f7ff f91f 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003a4e:	e038      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 8003a50:	2008      	movs	r0, #8
 8003a52:	f7ff f91b 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003a56:	e034      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 8003a58:	2009      	movs	r0, #9
 8003a5a:	f7ff f917 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003a5e:	e030      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 8003a60:	200a      	movs	r0, #10
 8003a62:	f7ff f913 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003a66:	e02c      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a68:	2017      	movs	r0, #23
 8003a6a:	f7ff f90f 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003a6e:	e028      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a70:	2017      	movs	r0, #23
 8003a72:	f7ff f90b 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003a76:	e024      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a78:	2017      	movs	r0, #23
 8003a7a:	f7ff f907 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003a7e:	e020      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a80:	2017      	movs	r0, #23
 8003a82:	f7ff f903 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003a86:	e01c      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a88:	2017      	movs	r0, #23
 8003a8a:	f7ff f8ff 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003a8e:	e018      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a90:	2028      	movs	r0, #40	; 0x28
 8003a92:	f7ff f8fb 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003a96:	e014      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a98:	2028      	movs	r0, #40	; 0x28
 8003a9a:	f7ff f8f7 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003a9e:	e010      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003aa0:	2028      	movs	r0, #40	; 0x28
 8003aa2:	f7ff f8f3 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003aa6:	e00c      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003aa8:	2028      	movs	r0, #40	; 0x28
 8003aaa:	f7ff f8ef 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003aae:	e008      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ab0:	2028      	movs	r0, #40	; 0x28
 8003ab2:	f7ff f8eb 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003ab6:	e004      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ab8:	2028      	movs	r0, #40	; 0x28
 8003aba:	f7ff f8e7 	bl	8002c8c <__NVIC_EnableIRQ>
		break;
 8003abe:	e000      	b.n	8003ac2 <extInt_Config+0xdfa>
	}

	default: {
		break;
 8003ac0:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003ac2:	b662      	cpsie	i
}
 8003ac4:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40020c00 	.word	0x40020c00
 8003ad4:	40013800 	.word	0x40013800
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40021c00 	.word	0x40021c00
 8003ae0:	40013c00 	.word	0x40013c00

08003ae4 <callback_extInt0>:



//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
	__NOP();
 8003ae8:	bf00      	nop
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
	__NOP();
 8003af8:	bf00      	nop
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
	__NOP();
 8003b08:	bf00      	nop
}
 8003b0a:	bf00      	nop
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
	__NOP();
 8003b18:	bf00      	nop
}
 8003b1a:	bf00      	nop
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
	__NOP();
 8003b28:	bf00      	nop
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
	__NOP();
 8003b38:	bf00      	nop
}
 8003b3a:	bf00      	nop
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
	__NOP();
 8003b48:	bf00      	nop
}
 8003b4a:	bf00      	nop
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
	__NOP();
 8003b58:	bf00      	nop
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
	__NOP();
 8003b68:	bf00      	nop
}
 8003b6a:	bf00      	nop
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
	__NOP();
 8003b78:	bf00      	nop
}
 8003b7a:	bf00      	nop
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
	__NOP();
 8003b88:	bf00      	nop
}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
	__NOP();
 8003b98:	bf00      	nop
}
 8003b9a:	bf00      	nop
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
	__NOP();
 8003ba8:	bf00      	nop
}
 8003baa:	bf00      	nop
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
	__NOP();
 8003bb8:	bf00      	nop
}
 8003bba:	bf00      	nop
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8003bc8:	4b08      	ldr	r3, [pc, #32]	; (8003bec <EXTI0_IRQHandler+0x28>)
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <EXTI0_IRQHandler+0x28>)
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	4a04      	ldr	r2, [pc, #16]	; (8003bec <EXTI0_IRQHandler+0x28>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8003be0:	f7ff ff80 	bl	8003ae4 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8003be4:	e000      	b.n	8003be8 <EXTI0_IRQHandler+0x24>
		__NOP();
 8003be6:	bf00      	nop
}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40013c00 	.word	0x40013c00

08003bf0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <EXTI1_IRQHandler+0x28>)
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <EXTI1_IRQHandler+0x28>)
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <EXTI1_IRQHandler+0x28>)
 8003c06:	f043 0302 	orr.w	r3, r3, #2
 8003c0a:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8003c0c:	f7fd ff50 	bl	8001ab0 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8003c10:	e000      	b.n	8003c14 <EXTI1_IRQHandler+0x24>
		__NOP();
 8003c12:	bf00      	nop
}
 8003c14:	bf00      	nop
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40013c00 	.word	0x40013c00

08003c1c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8003c20:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <EXTI2_IRQHandler+0x28>)
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <EXTI2_IRQHandler+0x28>)
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	4a04      	ldr	r2, [pc, #16]	; (8003c44 <EXTI2_IRQHandler+0x28>)
 8003c32:	f043 0304 	orr.w	r3, r3, #4
 8003c36:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8003c38:	f7ff ff5c 	bl	8003af4 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 8003c3c:	e000      	b.n	8003c40 <EXTI2_IRQHandler+0x24>
		__NOP();
 8003c3e:	bf00      	nop
}
 8003c40:	bf00      	nop
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40013c00 	.word	0x40013c00

08003c48 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <EXTI3_IRQHandler+0x28>)
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <EXTI3_IRQHandler+0x28>)
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <EXTI3_IRQHandler+0x28>)
 8003c5e:	f043 0308 	orr.w	r3, r3, #8
 8003c62:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 8003c64:	f7fd ff76 	bl	8001b54 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 8003c68:	e000      	b.n	8003c6c <EXTI3_IRQHandler+0x24>
		__NOP();
 8003c6a:	bf00      	nop
}
 8003c6c:	bf00      	nop
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40013c00 	.word	0x40013c00

08003c74 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 8003c78:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <EXTI4_IRQHandler+0x28>)
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <EXTI4_IRQHandler+0x28>)
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <EXTI4_IRQHandler+0x28>)
 8003c8a:	f043 0310 	orr.w	r3, r3, #16
 8003c8e:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8003c90:	f7ff ff38 	bl	8003b04 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 8003c94:	e000      	b.n	8003c98 <EXTI4_IRQHandler+0x24>
		__NOP();
 8003c96:	bf00      	nop
}
 8003c98:	bf00      	nop
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40013c00 	.word	0x40013c00

08003ca0 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8003ca4:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8003cb0:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	4a22      	ldr	r2, [pc, #136]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003cb6:	f043 0320 	orr.w	r3, r3, #32
 8003cba:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 8003cbc:	f7ff ff2a 	bl	8003b14 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8003cc0:	e03c      	b.n	8003d3c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8003cc2:	4b1f      	ldr	r3, [pc, #124]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 8003cce:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd8:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 8003cda:	f7ff ff23 	bl	8003b24 <callback_extInt6>
}
 8003cde:	e02d      	b.n	8003d3c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8003ce0:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 8003cec:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	4a13      	ldr	r2, [pc, #76]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf6:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8003cf8:	f7ff ff1c 	bl	8003b34 <callback_extInt7>
}
 8003cfc:	e01e      	b.n	8003d3c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 8003d0a:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	4a0c      	ldr	r2, [pc, #48]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d14:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 8003d16:	f7ff ff15 	bl	8003b44 <callback_extInt8>
}
 8003d1a:	e00f      	b.n	8003d3c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 8003d1c:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	4a04      	ldr	r2, [pc, #16]	; (8003d40 <EXTI9_5_IRQHandler+0xa0>)
 8003d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d32:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8003d34:	f7ff ff0e 	bl	8003b54 <callback_extInt9>
}
 8003d38:	e000      	b.n	8003d3c <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8003d3a:	bf00      	nop
}
 8003d3c:	bf00      	nop
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40013c00 	.word	0x40013c00

08003d44 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8003d48:	4b2e      	ldr	r3, [pc, #184]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 8003d54:	4b2b      	ldr	r3, [pc, #172]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	4a2a      	ldr	r2, [pc, #168]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d5e:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 8003d60:	f7ff ff00 	bl	8003b64 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 8003d64:	e04b      	b.n	8003dfe <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 8003d66:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 8003d72:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	4a23      	ldr	r2, [pc, #140]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d7c:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 8003d7e:	f7ff fef9 	bl	8003b74 <callback_extInt11>
}
 8003d82:	e03c      	b.n	8003dfe <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 8003d84:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8003d90:	4b1c      	ldr	r3, [pc, #112]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003d96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d9a:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 8003d9c:	f7ff fef2 	bl	8003b84 <callback_extInt12>
}
 8003da0:	e02d      	b.n	8003dfe <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 8003da2:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 8003dae:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	4a14      	ldr	r2, [pc, #80]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003db4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003db8:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 8003dba:	f7ff feeb 	bl	8003b94 <callback_extInt13>
}
 8003dbe:	e01e      	b.n	8003dfe <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8003dc0:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	4a0c      	ldr	r2, [pc, #48]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd6:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8003dd8:	f7ff fee4 	bl	8003ba4 <callback_extInt14>
}
 8003ddc:	e00f      	b.n	8003dfe <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <EXTI15_10_IRQHandler+0xc0>)
 8003df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df4:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8003df6:	f7ff fedd 	bl	8003bb4 <callback_extInt15>
}
 8003dfa:	e000      	b.n	8003dfe <EXTI15_10_IRQHandler+0xba>
		__NOP();
 8003dfc:	bf00      	nop
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40013c00 	.word	0x40013c00

08003e08 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	4608      	mov	r0, r1
 8003e12:	4611      	mov	r1, r2
 8003e14:	461a      	mov	r2, r3
 8003e16:	4603      	mov	r3, r0
 8003e18:	70fb      	strb	r3, [r7, #3]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	70bb      	strb	r3, [r7, #2]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	78ba      	ldrb	r2, [r7, #2]
 8003e2c:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	787a      	ldrb	r2, [r7, #1]
 8003e32:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	7c3a      	ldrb	r2, [r7, #16]
 8003e38:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	7d3a      	ldrb	r2, [r7, #20]
 8003e3e:	715a      	strb	r2, [r3, #5]
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4a88      	ldr	r2, [pc, #544]	; (8004084 <GPIO_Config+0x238>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d106      	bne.n	8003e74 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8003e66:	4b88      	ldr	r3, [pc, #544]	; (8004088 <GPIO_Config+0x23c>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	4a87      	ldr	r2, [pc, #540]	; (8004088 <GPIO_Config+0x23c>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6313      	str	r3, [r2, #48]	; 0x30
 8003e72:	e03a      	b.n	8003eea <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4a84      	ldr	r2, [pc, #528]	; (800408c <GPIO_Config+0x240>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d106      	bne.n	8003e8c <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8003e7e:	4b82      	ldr	r3, [pc, #520]	; (8004088 <GPIO_Config+0x23c>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	4a81      	ldr	r2, [pc, #516]	; (8004088 <GPIO_Config+0x23c>)
 8003e84:	f043 0302 	orr.w	r3, r3, #2
 8003e88:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8a:	e02e      	b.n	8003eea <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	4a7f      	ldr	r2, [pc, #508]	; (8004090 <GPIO_Config+0x244>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d106      	bne.n	8003ea4 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8003e96:	4b7c      	ldr	r3, [pc, #496]	; (8004088 <GPIO_Config+0x23c>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	4a7b      	ldr	r2, [pc, #492]	; (8004088 <GPIO_Config+0x23c>)
 8003e9c:	f043 0304 	orr.w	r3, r3, #4
 8003ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea2:	e022      	b.n	8003eea <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a7a      	ldr	r2, [pc, #488]	; (8004094 <GPIO_Config+0x248>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d106      	bne.n	8003ebc <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8003eae:	4b76      	ldr	r3, [pc, #472]	; (8004088 <GPIO_Config+0x23c>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	4a75      	ldr	r2, [pc, #468]	; (8004088 <GPIO_Config+0x23c>)
 8003eb4:	f043 0308 	orr.w	r3, r3, #8
 8003eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eba:	e016      	b.n	8003eea <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a75      	ldr	r2, [pc, #468]	; (8004098 <GPIO_Config+0x24c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d106      	bne.n	8003ed4 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8003ec6:	4b70      	ldr	r3, [pc, #448]	; (8004088 <GPIO_Config+0x23c>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a6f      	ldr	r2, [pc, #444]	; (8004088 <GPIO_Config+0x23c>)
 8003ecc:	f043 0310 	orr.w	r3, r3, #16
 8003ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed2:	e00a      	b.n	8003eea <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a70      	ldr	r2, [pc, #448]	; (800409c <GPIO_Config+0x250>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d105      	bne.n	8003eea <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8003ede:	4b6a      	ldr	r3, [pc, #424]	; (8004088 <GPIO_Config+0x23c>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	4a69      	ldr	r2, [pc, #420]	; (8004088 <GPIO_Config+0x23c>)
 8003ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee8:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	785b      	ldrb	r3, [r3, #1]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	2103      	movs	r1, #3
 8003f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	4619      	mov	r1, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	400a      	ands	r2, r1
 8003f18:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	6819      	ldr	r1, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	789b      	ldrb	r3, [r3, #2]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	4619      	mov	r1, r3
 8003f46:	2301      	movs	r3, #1
 8003f48:	408b      	lsls	r3, r1
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	400a      	ands	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	6859      	ldr	r1, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	78db      	ldrb	r3, [r3, #3]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	2103      	movs	r1, #3
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	400a      	ands	r2, r1
 8003f94:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	6899      	ldr	r1, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	791b      	ldrb	r3, [r3, #4]
 8003faa:	461a      	mov	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	2103      	movs	r1, #3
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	4619      	mov	r1, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	400a      	ands	r2, r1
 8003fd4:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	68d9      	ldr	r1, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	785b      	ldrb	r3, [r3, #1]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d143      	bne.n	8004076 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b07      	cmp	r3, #7
 8003ff4:	d81f      	bhi.n	8004036 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	6a1a      	ldr	r2, [r3, #32]
 8004004:	210f      	movs	r1, #15
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	4619      	mov	r1, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	400a      	ands	r2, r1
 8004016:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	795b      	ldrb	r3, [r3, #5]
 8004022:	4619      	mov	r1, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	fa01 f303 	lsl.w	r3, r1, r3
 800402a:	4619      	mov	r1, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	430a      	orrs	r2, r1
 8004032:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8004034:	e01f      	b.n	8004076 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	3b08      	subs	r3, #8
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004046:	210f      	movs	r1, #15
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	fa01 f303 	lsl.w	r3, r1, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	4619      	mov	r1, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	400a      	ands	r2, r1
 8004058:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	4619      	mov	r1, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	4619      	mov	r1, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	430a      	orrs	r2, r1
 8004074:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40020000 	.word	0x40020000
 8004088:	40023800 	.word	0x40023800
 800408c:	40020400 	.word	0x40020400
 8004090:	40020800 	.word	0x40020800
 8004094:	40020c00 	.word	0x40020c00
 8004098:	40021000 	.word	0x40021000
 800409c:	40021c00 	.word	0x40021c00

080040a0 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d10d      	bne.n	80040ce <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	699a      	ldr	r2, [r3, #24]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4619      	mov	r1, r3
 80040be:	2301      	movs	r3, #1
 80040c0:	408b      	lsls	r3, r1
 80040c2:	4619      	mov	r1, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 80040cc:	e00d      	b.n	80040ea <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	699a      	ldr	r2, [r3, #24]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	3310      	adds	r3, #16
 80040da:	2101      	movs	r1, #1
 80040dc:	fa01 f303 	lsl.w	r3, r1, r3
 80040e0:	4619      	mov	r1, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	619a      	str	r2, [r3, #24]
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	4619      	mov	r1, r3
 800410a:	2301      	movs	r3, #1
 800410c:	408b      	lsls	r3, r1
 800410e:	4619      	mov	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	404a      	eors	r2, r1
 8004116:	615a      	str	r2, [r3, #20]
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 800412e:	4a39      	ldr	r2, [pc, #228]	; (8004214 <configPLL+0xf0>)
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	2b31      	cmp	r3, #49	; 0x31
 8004138:	d804      	bhi.n	8004144 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800413a:	4b37      	ldr	r3, [pc, #220]	; (8004218 <configPLL+0xf4>)
 800413c:	4a36      	ldr	r2, [pc, #216]	; (8004218 <configPLL+0xf4>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	6093      	str	r3, [r2, #8]
 8004142:	e005      	b.n	8004150 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004144:	4b34      	ldr	r3, [pc, #208]	; (8004218 <configPLL+0xf4>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4a33      	ldr	r2, [pc, #204]	; (8004218 <configPLL+0xf4>)
 800414a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800414e:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8004150:	4b31      	ldr	r3, [pc, #196]	; (8004218 <configPLL+0xf4>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4a30      	ldr	r2, [pc, #192]	; (8004218 <configPLL+0xf4>)
 8004156:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800415a:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 800415c:	4b2e      	ldr	r3, [pc, #184]	; (8004218 <configPLL+0xf4>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	4a2d      	ldr	r2, [pc, #180]	; (8004218 <configPLL+0xf4>)
 8004162:	f043 0312 	orr.w	r3, r3, #18
 8004166:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8004168:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <configPLL+0xf4>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	79fa      	ldrb	r2, [r7, #7]
 800416e:	0092      	lsls	r2, r2, #2
 8004170:	3a0e      	subs	r2, #14
 8004172:	0192      	lsls	r2, r2, #6
 8004174:	4611      	mov	r1, r2
 8004176:	4a28      	ldr	r2, [pc, #160]	; (8004218 <configPLL+0xf4>)
 8004178:	430b      	orrs	r3, r1
 800417a:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 800417c:	4b26      	ldr	r3, [pc, #152]	; (8004218 <configPLL+0xf4>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4a25      	ldr	r2, [pc, #148]	; (8004218 <configPLL+0xf4>)
 8004182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004186:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8004188:	4b23      	ldr	r3, [pc, #140]	; (8004218 <configPLL+0xf4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a22      	ldr	r2, [pc, #136]	; (8004218 <configPLL+0xf4>)
 800418e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004192:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004194:	e000      	b.n	8004198 <configPLL+0x74>
	{
		__NOP();
 8004196:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004198:	4b1f      	ldr	r3, [pc, #124]	; (8004218 <configPLL+0xf4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f8      	beq.n	8004196 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	2b5a      	cmp	r3, #90	; 0x5a
 80041a8:	d909      	bls.n	80041be <configPLL+0x9a>
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	2b64      	cmp	r3, #100	; 0x64
 80041ae:	d806      	bhi.n	80041be <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 80041b0:	4b1a      	ldr	r3, [pc, #104]	; (800421c <configPLL+0xf8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a19      	ldr	r2, [pc, #100]	; (800421c <configPLL+0xf8>)
 80041b6:	f043 0303 	orr.w	r3, r3, #3
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	e01d      	b.n	80041fa <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d909      	bls.n	80041d8 <configPLL+0xb4>
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	2b5a      	cmp	r3, #90	; 0x5a
 80041c8:	d806      	bhi.n	80041d8 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 80041ca:	4b14      	ldr	r3, [pc, #80]	; (800421c <configPLL+0xf8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a13      	ldr	r2, [pc, #76]	; (800421c <configPLL+0xf8>)
 80041d0:	f043 0302 	orr.w	r3, r3, #2
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e010      	b.n	80041fa <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	2b1e      	cmp	r3, #30
 80041dc:	d909      	bls.n	80041f2 <configPLL+0xce>
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d806      	bhi.n	80041f2 <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 80041e4:	4b0d      	ldr	r3, [pc, #52]	; (800421c <configPLL+0xf8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a0c      	ldr	r2, [pc, #48]	; (800421c <configPLL+0xf8>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	e003      	b.n	80041fa <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <configPLL+0xf8>)
 80041f4:	4a09      	ldr	r2, [pc, #36]	; (800421c <configPLL+0xf8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 80041fa:	4b07      	ldr	r3, [pc, #28]	; (8004218 <configPLL+0xf4>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	4a06      	ldr	r2, [pc, #24]	; (8004218 <configPLL+0xf4>)
 8004200:	f043 0302 	orr.w	r3, r3, #2
 8004204:	6093      	str	r3, [r2, #8]

}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20000460 	.word	0x20000460
 8004218:	40023800 	.word	0x40023800
 800421c:	40023c00 	.word	0x40023c00

08004220 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <getConfigPLL+0x30>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d103      	bne.n	800423e <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8004236:	4b07      	ldr	r3, [pc, #28]	; (8004254 <getConfigPLL+0x34>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	71fb      	strb	r3, [r7, #7]
 800423c:	e001      	b.n	8004242 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 800423e:	2310      	movs	r3, #16
 8004240:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8004242:	79fb      	ldrb	r3, [r7, #7]
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40023800 	.word	0x40023800
 8004254:	20000460 	.word	0x20000460

08004258 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 800425e:	f7ff ffdf 	bl	8004220 <getConfigPLL>
 8004262:	4603      	mov	r3, r0
 8004264:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8004266:	2300      	movs	r3, #0
 8004268:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 800426a:	79bb      	ldrb	r3, [r7, #6]
 800426c:	2b31      	cmp	r3, #49	; 0x31
 800426e:	d802      	bhi.n	8004276 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8004270:	79bb      	ldrb	r3, [r7, #6]
 8004272:	71fb      	strb	r3, [r7, #7]
 8004274:	e002      	b.n	800427c <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8004276:	79bb      	ldrb	r3, [r7, #6]
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 800427c:	79fb      	ldrb	r3, [r7, #7]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <configMCO2+0x34>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4a09      	ldr	r2, [pc, #36]	; (80042bc <configMCO2+0x34>)
 8004298:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800429c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 800429e:	4b07      	ldr	r3, [pc, #28]	; (80042bc <configMCO2+0x34>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	79fa      	ldrb	r2, [r7, #7]
 80042a4:	0792      	lsls	r2, r2, #30
 80042a6:	4611      	mov	r1, r2
 80042a8:	4a04      	ldr	r2, [pc, #16]	; (80042bc <configMCO2+0x34>)
 80042aa:	430b      	orrs	r3, r1
 80042ac:	6093      	str	r3, [r2, #8]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800

080042c0 <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d84b      	bhi.n	800436a <configMCO2PRE+0xaa>
 80042d2:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <configMCO2PRE+0x18>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	080042ed 	.word	0x080042ed
 80042dc:	08004303 	.word	0x08004303
 80042e0:	0800431d 	.word	0x0800431d
 80042e4:	08004337 	.word	0x08004337
 80042e8:	08004351 	.word	0x08004351
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80042ec:	4b23      	ldr	r3, [pc, #140]	; (800437c <configMCO2PRE+0xbc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4a22      	ldr	r2, [pc, #136]	; (800437c <configMCO2PRE+0xbc>)
 80042f2:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80042f6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 80042f8:	4b20      	ldr	r3, [pc, #128]	; (800437c <configMCO2PRE+0xbc>)
 80042fa:	4a20      	ldr	r2, [pc, #128]	; (800437c <configMCO2PRE+0xbc>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	6093      	str	r3, [r2, #8]
			break;
 8004300:	e035      	b.n	800436e <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004302:	4b1e      	ldr	r3, [pc, #120]	; (800437c <configMCO2PRE+0xbc>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	4a1d      	ldr	r2, [pc, #116]	; (800437c <configMCO2PRE+0xbc>)
 8004308:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800430c:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 800430e:	4b1b      	ldr	r3, [pc, #108]	; (800437c <configMCO2PRE+0xbc>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	4a1a      	ldr	r2, [pc, #104]	; (800437c <configMCO2PRE+0xbc>)
 8004314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004318:	6093      	str	r3, [r2, #8]
			break;
 800431a:	e028      	b.n	800436e <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800431c:	4b17      	ldr	r3, [pc, #92]	; (800437c <configMCO2PRE+0xbc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a16      	ldr	r2, [pc, #88]	; (800437c <configMCO2PRE+0xbc>)
 8004322:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004326:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 8004328:	4b14      	ldr	r3, [pc, #80]	; (800437c <configMCO2PRE+0xbc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	4a13      	ldr	r2, [pc, #76]	; (800437c <configMCO2PRE+0xbc>)
 800432e:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 8004332:	6093      	str	r3, [r2, #8]
			break;
 8004334:	e01b      	b.n	800436e <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004336:	4b11      	ldr	r3, [pc, #68]	; (800437c <configMCO2PRE+0xbc>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	4a10      	ldr	r2, [pc, #64]	; (800437c <configMCO2PRE+0xbc>)
 800433c:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004340:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 8004342:	4b0e      	ldr	r3, [pc, #56]	; (800437c <configMCO2PRE+0xbc>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	4a0d      	ldr	r2, [pc, #52]	; (800437c <configMCO2PRE+0xbc>)
 8004348:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800434c:	6093      	str	r3, [r2, #8]
			break;
 800434e:	e00e      	b.n	800436e <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <configMCO2PRE+0xbc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a09      	ldr	r2, [pc, #36]	; (800437c <configMCO2PRE+0xbc>)
 8004356:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800435a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 800435c:	4b07      	ldr	r3, [pc, #28]	; (800437c <configMCO2PRE+0xbc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4a06      	ldr	r2, [pc, #24]	; (800437c <configMCO2PRE+0xbc>)
 8004362:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8004366:	6093      	str	r3, [r2, #8]
			break;
 8004368:	e001      	b.n	800436e <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 800436a:	bf00      	nop
			break;
 800436c:	bf00      	nop
		}
	}

}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800

08004380 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004390:	d106      	bne.n	80043a0 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004392:	4b81      	ldr	r3, [pc, #516]	; (8004598 <pwm_Config+0x218>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	4a80      	ldr	r2, [pc, #512]	; (8004598 <pwm_Config+0x218>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	6413      	str	r3, [r2, #64]	; 0x40
 800439e:	e024      	b.n	80043ea <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4a7d      	ldr	r2, [pc, #500]	; (800459c <pwm_Config+0x21c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d106      	bne.n	80043b8 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80043aa:	4b7b      	ldr	r3, [pc, #492]	; (8004598 <pwm_Config+0x218>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	4a7a      	ldr	r2, [pc, #488]	; (8004598 <pwm_Config+0x218>)
 80043b0:	f043 0302 	orr.w	r3, r3, #2
 80043b4:	6413      	str	r3, [r2, #64]	; 0x40
 80043b6:	e018      	b.n	80043ea <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4a78      	ldr	r2, [pc, #480]	; (80045a0 <pwm_Config+0x220>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d106      	bne.n	80043d0 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80043c2:	4b75      	ldr	r3, [pc, #468]	; (8004598 <pwm_Config+0x218>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	4a74      	ldr	r2, [pc, #464]	; (8004598 <pwm_Config+0x218>)
 80043c8:	f043 0304 	orr.w	r3, r3, #4
 80043cc:	6413      	str	r3, [r2, #64]	; 0x40
 80043ce:	e00c      	b.n	80043ea <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4a73      	ldr	r2, [pc, #460]	; (80045a4 <pwm_Config+0x224>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d106      	bne.n	80043e8 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80043da:	4b6f      	ldr	r3, [pc, #444]	; (8004598 <pwm_Config+0x218>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	4a6e      	ldr	r2, [pc, #440]	; (8004598 <pwm_Config+0x218>)
 80043e0:	f043 0308 	orr.w	r3, r3, #8
 80043e4:	6413      	str	r3, [r2, #64]	; 0x40
 80043e6:	e000      	b.n	80043ea <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 80043e8:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa4c 	bl	8004888 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	f200 8118 	bhi.w	800462a <pwm_Config+0x2aa>
 80043fa:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <pwm_Config+0x80>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	08004411 	.word	0x08004411
 8004404:	08004493 	.word	0x08004493
 8004408:	08004515 	.word	0x08004515
 800440c:	080045a9 	.word	0x080045a9
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f022 0203 	bic.w	r2, r2, #3
 800441e:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800442e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800443e:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f022 0208 	bic.w	r2, r2, #8
 800444e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f042 0208 	orr.w	r2, r2, #8
 800445e:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f022 0204 	bic.w	r2, r2, #4
 800446e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f042 0204 	orr.w	r2, r2, #4
 800447e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800448e:	619a      	str	r2, [r3, #24]

		break;
 8004490:	e0cc      	b.n	800462c <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	699a      	ldr	r2, [r3, #24]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f022 0203 	bic.w	r2, r2, #3
 80044a0:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	699a      	ldr	r2, [r3, #24]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80044b0:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	699a      	ldr	r2, [r3, #24]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80044c0:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	699a      	ldr	r2, [r3, #24]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d0:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e0:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	699a      	ldr	r2, [r3, #24]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f0:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004500:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004510:	619a      	str	r2, [r3, #24]

		break;
 8004512:	e08b      	b.n	800462c <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f022 0203 	bic.w	r2, r2, #3
 8004522:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	69da      	ldr	r2, [r3, #28]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004532:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004542:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f022 0208 	bic.w	r2, r2, #8
 8004552:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	69da      	ldr	r2, [r3, #28]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f042 0208 	orr.w	r2, r2, #8
 8004562:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	69da      	ldr	r2, [r3, #28]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f022 0204 	bic.w	r2, r2, #4
 8004572:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	69da      	ldr	r2, [r3, #28]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f042 0204 	orr.w	r2, r2, #4
 8004582:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	69da      	ldr	r2, [r3, #28]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004592:	61da      	str	r2, [r3, #28]

		break;
 8004594:	e04a      	b.n	800462c <pwm_Config+0x2ac>
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800
 800459c:	40000400 	.word	0x40000400
 80045a0:	40000800 	.word	0x40000800
 80045a4:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	69da      	ldr	r2, [r3, #28]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045b6:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	69da      	ldr	r2, [r3, #28]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80045c6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	69da      	ldr	r2, [r3, #28]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80045d6:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	69da      	ldr	r2, [r3, #28]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	69da      	ldr	r2, [r3, #28]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f6:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	69da      	ldr	r2, [r3, #28]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004606:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004616:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004626:	61da      	str	r2, [r3, #28]

		break;
 8004628:	e000      	b.n	800462c <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 800462a:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	791b      	ldrb	r3, [r3, #4]
 8004630:	4619      	mov	r1, r3
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f896 	bl	8004764 <statusPolarityPWM>

}
 8004638:	bf00      	nop
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d87f      	bhi.n	8004754 <statusInOutPWM+0x114>
 8004654:	a201      	add	r2, pc, #4	; (adr r2, 800465c <statusInOutPWM+0x1c>)
 8004656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465a:	bf00      	nop
 800465c:	0800466d 	.word	0x0800466d
 8004660:	080046a7 	.word	0x080046a7
 8004664:	080046e1 	.word	0x080046e1
 8004668:	0800471b 	.word	0x0800471b
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d110      	bne.n	8004694 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	6a1a      	ldr	r2, [r3, #32]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f022 0201 	bic.w	r2, r2, #1
 8004680:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	6a1a      	ldr	r2, [r3, #32]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8004692:	e060      	b.n	8004756 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	6a1a      	ldr	r2, [r3, #32]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f022 0201 	bic.w	r2, r2, #1
 80046a2:	621a      	str	r2, [r3, #32]
		break;
 80046a4:	e057      	b.n	8004756 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 80046a6:	78fb      	ldrb	r3, [r7, #3]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d110      	bne.n	80046ce <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	6a1a      	ldr	r2, [r3, #32]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f022 0210 	bic.w	r2, r2, #16
 80046ba:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	6a1a      	ldr	r2, [r3, #32]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f042 0210 	orr.w	r2, r2, #16
 80046ca:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 80046cc:	e043      	b.n	8004756 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	6a1a      	ldr	r2, [r3, #32]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f022 0210 	bic.w	r2, r2, #16
 80046dc:	621a      	str	r2, [r3, #32]
		break;
 80046de:	e03a      	b.n	8004756 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d110      	bne.n	8004708 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	6a1a      	ldr	r2, [r3, #32]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046f4:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	6a1a      	ldr	r2, [r3, #32]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004704:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 8004706:	e026      	b.n	8004756 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	6a1a      	ldr	r2, [r3, #32]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004716:	621a      	str	r2, [r3, #32]
		break;
 8004718:	e01d      	b.n	8004756 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d110      	bne.n	8004742 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	6a1a      	ldr	r2, [r3, #32]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800472e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	6a1a      	ldr	r2, [r3, #32]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800473e:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8004740:	e009      	b.n	8004756 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	6a1a      	ldr	r2, [r3, #32]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004750:	621a      	str	r2, [r3, #32]
		break;
 8004752:	e000      	b.n	8004756 <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 8004754:	bf00      	nop
	}
	}
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop

08004764 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b03      	cmp	r3, #3
 8004776:	d87f      	bhi.n	8004878 <statusPolarityPWM+0x114>
 8004778:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <statusPolarityPWM+0x1c>)
 800477a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477e:	bf00      	nop
 8004780:	08004791 	.word	0x08004791
 8004784:	080047cb 	.word	0x080047cb
 8004788:	08004805 	.word	0x08004805
 800478c:	0800483f 	.word	0x0800483f
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d110      	bne.n	80047b8 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	6a1a      	ldr	r2, [r3, #32]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f022 0202 	bic.w	r2, r2, #2
 80047a4:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	6a1a      	ldr	r2, [r3, #32]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f042 0202 	orr.w	r2, r2, #2
 80047b4:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 80047b6:	e060      	b.n	800487a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	6a1a      	ldr	r2, [r3, #32]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f022 0202 	bic.w	r2, r2, #2
 80047c6:	621a      	str	r2, [r3, #32]
		break;
 80047c8:	e057      	b.n	800487a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d110      	bne.n	80047f2 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	6a1a      	ldr	r2, [r3, #32]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f022 0220 	bic.w	r2, r2, #32
 80047de:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	6a1a      	ldr	r2, [r3, #32]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f042 0220 	orr.w	r2, r2, #32
 80047ee:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 80047f0:	e043      	b.n	800487a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	6a1a      	ldr	r2, [r3, #32]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f022 0220 	bic.w	r2, r2, #32
 8004800:	621a      	str	r2, [r3, #32]
		break;
 8004802:	e03a      	b.n	800487a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d110      	bne.n	800482c <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	6a1a      	ldr	r2, [r3, #32]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004818:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	6a1a      	ldr	r2, [r3, #32]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004828:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 800482a:	e026      	b.n	800487a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	6a1a      	ldr	r2, [r3, #32]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800483a:	621a      	str	r2, [r3, #32]
		break;
 800483c:	e01d      	b.n	800487a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d110      	bne.n	8004866 <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	6a1a      	ldr	r2, [r3, #32]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004852:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	6a1a      	ldr	r2, [r3, #32]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004862:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 8004864:	e009      	b.n	800487a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	6a1a      	ldr	r2, [r3, #32]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004874:	621a      	str	r2, [r3, #32]
		break;
 8004876:	e000      	b.n	800487a <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 8004878:	bf00      	nop
	}
	}

}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop

08004888 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b03      	cmp	r3, #3
 8004896:	d823      	bhi.n	80048e0 <setDuttyCycle+0x58>
 8004898:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <setDuttyCycle+0x18>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048b1 	.word	0x080048b1
 80048a4:	080048bd 	.word	0x080048bd
 80048a8:	080048c9 	.word	0x080048c9
 80048ac:	080048d5 	.word	0x080048d5
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	885a      	ldrh	r2, [r3, #2]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80048ba:	e012      	b.n	80048e2 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	885a      	ldrh	r2, [r3, #2]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80048c6:	e00c      	b.n	80048e2 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	885a      	ldrh	r2, [r3, #2]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80048d2:	e006      	b.n	80048e2 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	885a      	ldrh	r2, [r3, #2]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80048de:	e000      	b.n	80048e2 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 80048e0:	bf00      	nop
	}
	}

}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop

080048f0 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	4a0d      	ldr	r2, [pc, #52]	; (8004938 <updateDuttyCyclePercentageFloat+0x48>)
 8004904:	fba2 2303 	umull	r2, r3, r2, r3
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	b29b      	uxth	r3, r3
 800490c:	ee07 3a90 	vmov	s15, r3
 8004910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004914:	edd7 7a00 	vldr	s15, [r7]
 8004918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004920:	ee17 3a90 	vmov	r3, s15
 8004924:	b29a      	uxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff ffac 	bl	8004888 <setDuttyCycle>
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	51eb851f 	.word	0x51eb851f

0800493c <__NVIC_EnableIRQ>:
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494a:	2b00      	cmp	r3, #0
 800494c:	db0b      	blt.n	8004966 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	4907      	ldr	r1, [pc, #28]	; (8004974 <__NVIC_EnableIRQ+0x38>)
 8004956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	2001      	movs	r0, #1
 800495e:	fa00 f202 	lsl.w	r2, r0, r2
 8004962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	e000e100 	.word	0xe000e100

08004978 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4a8f      	ldr	r2, [pc, #572]	; (8004bc4 <USART_Config+0x24c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d107      	bne.n	800499a <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 800498a:	4b8f      	ldr	r3, [pc, #572]	; (8004bc8 <USART_Config+0x250>)
 800498c:	2210      	movs	r2, #16
 800498e:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4a8d      	ldr	r2, [pc, #564]	; (8004bcc <USART_Config+0x254>)
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	e019      	b.n	80049ce <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	4a8c      	ldr	r2, [pc, #560]	; (8004bd0 <USART_Config+0x258>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d108      	bne.n	80049b6 <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 80049a4:	4b88      	ldr	r3, [pc, #544]	; (8004bc8 <USART_Config+0x250>)
 80049a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049aa:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4a88      	ldr	r2, [pc, #544]	; (8004bd4 <USART_Config+0x25c>)
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e00b      	b.n	80049ce <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	4a87      	ldr	r2, [pc, #540]	; (8004bd8 <USART_Config+0x260>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d106      	bne.n	80049ce <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 80049c0:	4b81      	ldr	r3, [pc, #516]	; (8004bc8 <USART_Config+0x250>)
 80049c2:	2220      	movs	r2, #32
 80049c4:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	4a84      	ldr	r2, [pc, #528]	; (8004bdc <USART_Config+0x264>)
 80049cc:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2200      	movs	r2, #0
 80049d4:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2200      	movs	r2, #0
 80049dc:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	789b      	ldrb	r3, [r3, #2]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d03d      	beq.n	8004a62 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a04:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a14:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a24:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	789b      	ldrb	r3, [r3, #2]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d110      	bne.n	8004a50 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a3c:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	e018      	b.n	8004a82 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a5e:	60da      	str	r2, [r3, #12]
 8004a60:	e00f      	b.n	8004a82 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a70:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a80:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	78db      	ldrb	r3, [r3, #3]
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d84c      	bhi.n	8004b24 <USART_Config+0x1ac>
 8004a8a:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <USART_Config+0x118>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004aa1 	.word	0x08004aa1
 8004a94:	08004abf 	.word	0x08004abf
 8004a98:	08004ae1 	.word	0x08004ae1
 8004a9c:	08004b03 	.word	0x08004b03
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004aae:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	6912      	ldr	r2, [r2, #16]
 8004aba:	611a      	str	r2, [r3, #16]
		break;
 8004abc:	e041      	b.n	8004b42 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004acc:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004adc:	611a      	str	r2, [r3, #16]
		break;
 8004ade:	e030      	b.n	8004b42 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004aee:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004afe:	611a      	str	r2, [r3, #16]
		break;
 8004b00:	e01f      	b.n	8004b42 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004b10:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004b20:	611a      	str	r2, [r3, #16]
		break;
 8004b22:	e00e      	b.n	8004b42 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004b32:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	6912      	ldr	r2, [r2, #16]
 8004b3e:	611a      	str	r2, [r3, #16]
		break;
 8004b40:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	4a21      	ldr	r2, [pc, #132]	; (8004bd0 <USART_Config+0x258>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d104      	bne.n	8004b5a <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8004b50:	f7ff fb82 	bl	8004258 <getClockAPB1>
 8004b54:	4603      	mov	r3, r0
 8004b56:	73fb      	strb	r3, [r7, #15]
 8004b58:	e003      	b.n	8004b62 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8004b5a:	f7ff fb61 	bl	8004220 <getConfigPLL>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	785b      	ldrb	r3, [r3, #1]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 f91f 	bl	8004db4 <getValueBaudRate>
 8004b76:	4603      	mov	r3, r0
 8004b78:	461a      	mov	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	e02f      	b.n	8004be2 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10b      	bne.n	8004ba2 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 f90f 	bl	8004db4 <getValueBaudRate>
 8004b96:	4603      	mov	r3, r0
 8004b98:	461a      	mov	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	e01f      	b.n	8004be2 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	785b      	ldrb	r3, [r3, #1]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d11a      	bne.n	8004be0 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 f8ff 	bl	8004db4 <getValueBaudRate>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	461a      	mov	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	609a      	str	r2, [r3, #8]
 8004bc0:	e00f      	b.n	8004be2 <USART_Config+0x26a>
 8004bc2:	bf00      	nop
 8004bc4:	40011000 	.word	0x40011000
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	20000464 	.word	0x20000464
 8004bd0:	40004400 	.word	0x40004400
 8004bd4:	20000468 	.word	0x20000468
 8004bd8:	40011400 	.word	0x40011400
 8004bdc:	2000046c 	.word	0x2000046c
	}
	else
	{
		__NOP();
 8004be0:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d866      	bhi.n	8004cb8 <USART_Config+0x340>
 8004bea:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <USART_Config+0x278>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c01 	.word	0x08004c01
 8004bf4:	08004c23 	.word	0x08004c23
 8004bf8:	08004c45 	.word	0x08004c45
 8004bfc:	08004c87 	.word	0x08004c87
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f022 0208 	bic.w	r2, r2, #8
 8004c0e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f042 0208 	orr.w	r2, r2, #8
 8004c1e:	60da      	str	r2, [r3, #12]

		break;
 8004c20:	e063      	b.n	8004cea <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f022 0204 	bic.w	r2, r2, #4
 8004c30:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f042 0204 	orr.w	r2, r2, #4
 8004c40:	60da      	str	r2, [r3, #12]

		break;
 8004c42:	e052      	b.n	8004cea <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f022 0208 	bic.w	r2, r2, #8
 8004c52:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f042 0208 	orr.w	r2, r2, #8
 8004c62:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f022 0204 	bic.w	r2, r2, #4
 8004c72:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f042 0204 	orr.w	r2, r2, #4
 8004c82:	60da      	str	r2, [r3, #12]


		break;
 8004c84:	e031      	b.n	8004cea <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c94:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f022 0208 	bic.w	r2, r2, #8
 8004ca4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f022 0204 	bic.w	r2, r2, #4
 8004cb4:	60da      	str	r2, [r3, #12]
		break;
 8004cb6:	e018      	b.n	8004cea <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cc6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f022 0208 	bic.w	r2, r2, #8
 8004cd6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f022 0204 	bic.w	r2, r2, #4
 8004ce6:	60da      	str	r2, [r3, #12]
		break;
 8004ce8:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8004cea:	b672      	cpsid	i
}
 8004cec:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	791b      	ldrb	r3, [r3, #4]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d110      	bne.n	8004d18 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f022 0220 	bic.w	r2, r2, #32
 8004d04:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f042 0220 	orr.w	r2, r2, #32
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	e007      	b.n	8004d28 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f022 0220 	bic.w	r2, r2, #32
 8004d26:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	791b      	ldrb	r3, [r3, #4]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d003      	beq.n	8004d38 <USART_Config+0x3c0>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	795b      	ldrb	r3, [r3, #5]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d11a      	bne.n	8004d6e <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4a1a      	ldr	r2, [pc, #104]	; (8004da8 <USART_Config+0x430>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d103      	bne.n	8004d4a <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8004d42:	2025      	movs	r0, #37	; 0x25
 8004d44:	f7ff fdfa 	bl	800493c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004d48:	e013      	b.n	8004d72 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	4a17      	ldr	r2, [pc, #92]	; (8004dac <USART_Config+0x434>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d103      	bne.n	8004d5c <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8004d54:	2026      	movs	r0, #38	; 0x26
 8004d56:	f7ff fdf1 	bl	800493c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004d5a:	e00a      	b.n	8004d72 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <USART_Config+0x438>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d105      	bne.n	8004d72 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8004d66:	2047      	movs	r0, #71	; 0x47
 8004d68:	f7ff fde8 	bl	800493c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004d6c:	e001      	b.n	8004d72 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8004d6e:	bf00      	nop
 8004d70:	e000      	b.n	8004d74 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004d72:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004d74:	b662      	cpsie	i
}
 8004d76:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d00f      	beq.n	8004da0 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d8e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d9e:	60da      	str	r2, [r3, #12]
	}
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40011000 	.word	0x40011000
 8004dac:	40004400 	.word	0x40004400
 8004db0:	40011400 	.word	0x40011400

08004db4 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8004db4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004db8:	b086      	sub	sp, #24
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6039      	str	r1, [r7, #0]
 8004dbe:	4601      	mov	r1, r0
 8004dc0:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8004dc2:	79f9      	ldrb	r1, [r7, #7]
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	460a      	mov	r2, r1
 8004dc8:	4603      	mov	r3, r0
 8004dca:	491f      	ldr	r1, [pc, #124]	; (8004e48 <getValueBaudRate+0x94>)
 8004dcc:	fb01 f003 	mul.w	r0, r1, r3
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	fb02 f101 	mul.w	r1, r2, r1
 8004dd6:	4401      	add	r1, r0
 8004dd8:	481b      	ldr	r0, [pc, #108]	; (8004e48 <getValueBaudRate+0x94>)
 8004dda:	fba2 4500 	umull	r4, r5, r2, r0
 8004dde:	194b      	adds	r3, r1, r5
 8004de0:	461d      	mov	r5, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	2200      	movs	r2, #0
 8004de8:	4698      	mov	r8, r3
 8004dea:	4691      	mov	r9, r2
 8004dec:	4642      	mov	r2, r8
 8004dee:	464b      	mov	r3, r9
 8004df0:	4620      	mov	r0, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7fb ff60 	bl	8000cb8 <__aeabi_ldivmod>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	4a12      	ldr	r2, [pc, #72]	; (8004e4c <getValueBaudRate+0x98>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	0b5b      	lsrs	r3, r3, #13
 8004e0a:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8004e22:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <getValueBaudRate+0x98>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	0a5b      	lsrs	r3, r3, #9
 8004e2a:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	7afb      	ldrb	r3, [r7, #11]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	813b      	strh	r3, [r7, #8]

    return value;
 8004e3c:	893b      	ldrh	r3, [r7, #8]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e48:	540be400 	.word	0x540be400
 8004e4c:	d1b71759 	.word	0xd1b71759

08004e50 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 8004e5a:	4b16      	ldr	r3, [pc, #88]	; (8004eb4 <writeMsgForTXE+0x64>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d111      	bne.n	8004e86 <writeMsgForTXE+0x36>
 8004e62:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <writeMsgForTXE+0x68>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10d      	bne.n	8004e86 <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	4813      	ldr	r0, [pc, #76]	; (8004ebc <writeMsgForTXE+0x6c>)
 8004e6e:	f001 f8a9 	bl	8005fc4 <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 8004e72:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <writeMsgForTXE+0x70>)
 8004e74:	2201      	movs	r2, #1
 8004e76:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f830 	bl	8004ee4 <interruptionTX>
 8004e84:	e012      	b.n	8004eac <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 8004e86:	4b0f      	ldr	r3, [pc, #60]	; (8004ec4 <writeMsgForTXE+0x74>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	2364      	movs	r3, #100	; 0x64
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	4a0d      	ldr	r2, [pc, #52]	; (8004ec8 <writeMsgForTXE+0x78>)
 8004e94:	4413      	add	r3, r2
 8004e96:	6839      	ldr	r1, [r7, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f001 f893 	bl	8005fc4 <siprintf>
		inLine++;
 8004e9e:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <writeMsgForTXE+0x74>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <writeMsgForTXE+0x74>)
 8004ea8:	701a      	strb	r2, [r3, #0]
	}
}
 8004eaa:	bf00      	nop
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000caa 	.word	0x20000caa
 8004eb8:	20000ca9 	.word	0x20000ca9
 8004ebc:	20000474 	.word	0x20000474
 8004ec0:	20000cab 	.word	0x20000cab
 8004ec4:	20000ca8 	.word	0x20000ca8
 8004ec8:	200004d8 	.word	0x200004d8

08004ecc <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
	return auxRxData;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <getRxData+0x14>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000470 	.word	0x20000470

08004ee4 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d10c      	bne.n	8004f10 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8004f0e:	e005      	b.n	8004f1c <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60da      	str	r2, [r3, #12]
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <BasicUSART2_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART2_Callback()
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
	__NOP();
 8004f2c:	bf00      	nop
}
 8004f2e:	bf00      	nop
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <BasicUSART6_Callback>:


__attribute__((weak)) void BasicUSART6_Callback()
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
	__NOP();
 8004f3c:	bf00      	nop
}
 8004f3e:	bf00      	nop
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8004f4c:	4b37      	ldr	r3, [pc, #220]	; (800502c <USART1_IRQHandler+0xe4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d008      	beq.n	8004f6c <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 8004f5a:	4b34      	ldr	r3, [pc, #208]	; (800502c <USART1_IRQHandler+0xe4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	4b33      	ldr	r3, [pc, #204]	; (8005030 <USART1_IRQHandler+0xe8>)
 8004f64:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 8004f66:	f7fc fd95 	bl	8001a94 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004f6a:	e05d      	b.n	8005028 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8004f6c:	4b2f      	ldr	r3, [pc, #188]	; (800502c <USART1_IRQHandler+0xe4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d055      	beq.n	8005026 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004f7a:	4b2e      	ldr	r3, [pc, #184]	; (8005034 <USART1_IRQHandler+0xec>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10b      	bne.n	8004f9a <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8004f82:	4b2d      	ldr	r3, [pc, #180]	; (8005038 <USART1_IRQHandler+0xf0>)
 8004f84:	781a      	ldrb	r2, [r3, #0]
 8004f86:	4b29      	ldr	r3, [pc, #164]	; (800502c <USART1_IRQHandler+0xe4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8004f8c:	4b27      	ldr	r3, [pc, #156]	; (800502c <USART1_IRQHandler+0xe4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2100      	movs	r1, #0
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff ffa6 	bl	8004ee4 <interruptionTX>
}
 8004f98:	e046      	b.n	8005028 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004f9a:	4b26      	ldr	r3, [pc, #152]	; (8005034 <USART1_IRQHandler+0xec>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d142      	bne.n	8005028 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8004fa2:	4b26      	ldr	r3, [pc, #152]	; (800503c <USART1_IRQHandler+0xf4>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4b25      	ldr	r3, [pc, #148]	; (8005040 <USART1_IRQHandler+0xf8>)
 8004faa:	5c9b      	ldrb	r3, [r3, r2]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00e      	beq.n	8004fce <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8004fb0:	4b22      	ldr	r3, [pc, #136]	; (800503c <USART1_IRQHandler+0xf4>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4b22      	ldr	r3, [pc, #136]	; (8005040 <USART1_IRQHandler+0xf8>)
 8004fb8:	5c9a      	ldrb	r2, [r3, r2]
 8004fba:	4b1c      	ldr	r3, [pc, #112]	; (800502c <USART1_IRQHandler+0xe4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	605a      	str	r2, [r3, #4]
				posChar++;
 8004fc0:	4b1e      	ldr	r3, [pc, #120]	; (800503c <USART1_IRQHandler+0xf4>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	4b1c      	ldr	r3, [pc, #112]	; (800503c <USART1_IRQHandler+0xf4>)
 8004fca:	701a      	strb	r2, [r3, #0]
}
 8004fcc:	e02c      	b.n	8005028 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004fce:	4b1d      	ldr	r3, [pc, #116]	; (8005044 <USART1_IRQHandler+0xfc>)
 8004fd0:	781a      	ldrb	r2, [r3, #0]
 8004fd2:	4b1d      	ldr	r3, [pc, #116]	; (8005048 <USART1_IRQHandler+0x100>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d215      	bcs.n	8005006 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004fda:	4b1a      	ldr	r3, [pc, #104]	; (8005044 <USART1_IRQHandler+0xfc>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2364      	movs	r3, #100	; 0x64
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	4a19      	ldr	r2, [pc, #100]	; (800504c <USART1_IRQHandler+0x104>)
 8004fe8:	4413      	add	r3, r2
 8004fea:	4619      	mov	r1, r3
 8004fec:	4814      	ldr	r0, [pc, #80]	; (8005040 <USART1_IRQHandler+0xf8>)
 8004fee:	f000 ffe9 	bl	8005fc4 <siprintf>
					posChar = 0;
 8004ff2:	4b12      	ldr	r3, [pc, #72]	; (800503c <USART1_IRQHandler+0xf4>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004ff8:	4b12      	ldr	r3, [pc, #72]	; (8005044 <USART1_IRQHandler+0xfc>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	4b10      	ldr	r3, [pc, #64]	; (8005044 <USART1_IRQHandler+0xfc>)
 8005002:	701a      	strb	r2, [r3, #0]
}
 8005004:	e010      	b.n	8005028 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8005006:	4b09      	ldr	r3, [pc, #36]	; (800502c <USART1_IRQHandler+0xe4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff ff69 	bl	8004ee4 <interruptionTX>
					posChar = 0;
 8005012:	4b0a      	ldr	r3, [pc, #40]	; (800503c <USART1_IRQHandler+0xf4>)
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <USART1_IRQHandler+0xfc>)
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800501e:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <USART1_IRQHandler+0x100>)
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
}
 8005024:	e000      	b.n	8005028 <USART1_IRQHandler+0xe0>
		__NOP();
 8005026:	bf00      	nop
}
 8005028:	bf00      	nop
 800502a:	bd80      	pop	{r7, pc}
 800502c:	20000464 	.word	0x20000464
 8005030:	20000470 	.word	0x20000470
 8005034:	20000cab 	.word	0x20000cab
 8005038:	20000471 	.word	0x20000471
 800503c:	20000caa 	.word	0x20000caa
 8005040:	20000474 	.word	0x20000474
 8005044:	20000ca9 	.word	0x20000ca9
 8005048:	20000ca8 	.word	0x20000ca8
 800504c:	200004d8 	.word	0x200004d8

08005050 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8005054:	4b37      	ldr	r3, [pc, #220]	; (8005134 <USART2_IRQHandler+0xe4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b00      	cmp	r3, #0
 8005060:	d008      	beq.n	8005074 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8005062:	4b34      	ldr	r3, [pc, #208]	; (8005134 <USART2_IRQHandler+0xe4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	b2da      	uxtb	r2, r3
 800506a:	4b33      	ldr	r3, [pc, #204]	; (8005138 <USART2_IRQHandler+0xe8>)
 800506c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 800506e:	f7ff ff5b 	bl	8004f28 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8005072:	e05d      	b.n	8005130 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8005074:	4b2f      	ldr	r3, [pc, #188]	; (8005134 <USART2_IRQHandler+0xe4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507e:	2b00      	cmp	r3, #0
 8005080:	d055      	beq.n	800512e <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8005082:	4b2e      	ldr	r3, [pc, #184]	; (800513c <USART2_IRQHandler+0xec>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 800508a:	4b2d      	ldr	r3, [pc, #180]	; (8005140 <USART2_IRQHandler+0xf0>)
 800508c:	781a      	ldrb	r2, [r3, #0]
 800508e:	4b29      	ldr	r3, [pc, #164]	; (8005134 <USART2_IRQHandler+0xe4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8005094:	4b27      	ldr	r3, [pc, #156]	; (8005134 <USART2_IRQHandler+0xe4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2100      	movs	r1, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff ff22 	bl	8004ee4 <interruptionTX>
}
 80050a0:	e046      	b.n	8005130 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80050a2:	4b26      	ldr	r3, [pc, #152]	; (800513c <USART2_IRQHandler+0xec>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d142      	bne.n	8005130 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80050aa:	4b26      	ldr	r3, [pc, #152]	; (8005144 <USART2_IRQHandler+0xf4>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	4b25      	ldr	r3, [pc, #148]	; (8005148 <USART2_IRQHandler+0xf8>)
 80050b2:	5c9b      	ldrb	r3, [r3, r2]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00e      	beq.n	80050d6 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 80050b8:	4b22      	ldr	r3, [pc, #136]	; (8005144 <USART2_IRQHandler+0xf4>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	4b22      	ldr	r3, [pc, #136]	; (8005148 <USART2_IRQHandler+0xf8>)
 80050c0:	5c9a      	ldrb	r2, [r3, r2]
 80050c2:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <USART2_IRQHandler+0xe4>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	605a      	str	r2, [r3, #4]
				posChar++;
 80050c8:	4b1e      	ldr	r3, [pc, #120]	; (8005144 <USART2_IRQHandler+0xf4>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	3301      	adds	r3, #1
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	4b1c      	ldr	r3, [pc, #112]	; (8005144 <USART2_IRQHandler+0xf4>)
 80050d2:	701a      	strb	r2, [r3, #0]
}
 80050d4:	e02c      	b.n	8005130 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80050d6:	4b1d      	ldr	r3, [pc, #116]	; (800514c <USART2_IRQHandler+0xfc>)
 80050d8:	781a      	ldrb	r2, [r3, #0]
 80050da:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <USART2_IRQHandler+0x100>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d215      	bcs.n	800510e <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80050e2:	4b1a      	ldr	r3, [pc, #104]	; (800514c <USART2_IRQHandler+0xfc>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	2364      	movs	r3, #100	; 0x64
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	4a19      	ldr	r2, [pc, #100]	; (8005154 <USART2_IRQHandler+0x104>)
 80050f0:	4413      	add	r3, r2
 80050f2:	4619      	mov	r1, r3
 80050f4:	4814      	ldr	r0, [pc, #80]	; (8005148 <USART2_IRQHandler+0xf8>)
 80050f6:	f000 ff65 	bl	8005fc4 <siprintf>
					posChar = 0;
 80050fa:	4b12      	ldr	r3, [pc, #72]	; (8005144 <USART2_IRQHandler+0xf4>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8005100:	4b12      	ldr	r3, [pc, #72]	; (800514c <USART2_IRQHandler+0xfc>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	3301      	adds	r3, #1
 8005106:	b2da      	uxtb	r2, r3
 8005108:	4b10      	ldr	r3, [pc, #64]	; (800514c <USART2_IRQHandler+0xfc>)
 800510a:	701a      	strb	r2, [r3, #0]
}
 800510c:	e010      	b.n	8005130 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800510e:	4b09      	ldr	r3, [pc, #36]	; (8005134 <USART2_IRQHandler+0xe4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff fee5 	bl	8004ee4 <interruptionTX>
					posChar = 0;
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <USART2_IRQHandler+0xf4>)
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8005120:	4b0a      	ldr	r3, [pc, #40]	; (800514c <USART2_IRQHandler+0xfc>)
 8005122:	2200      	movs	r2, #0
 8005124:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8005126:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <USART2_IRQHandler+0x100>)
 8005128:	2200      	movs	r2, #0
 800512a:	701a      	strb	r2, [r3, #0]
}
 800512c:	e000      	b.n	8005130 <USART2_IRQHandler+0xe0>
		__NOP();
 800512e:	bf00      	nop
}
 8005130:	bf00      	nop
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000468 	.word	0x20000468
 8005138:	20000470 	.word	0x20000470
 800513c:	20000cab 	.word	0x20000cab
 8005140:	20000471 	.word	0x20000471
 8005144:	20000caa 	.word	0x20000caa
 8005148:	20000474 	.word	0x20000474
 800514c:	20000ca9 	.word	0x20000ca9
 8005150:	20000ca8 	.word	0x20000ca8
 8005154:	200004d8 	.word	0x200004d8

08005158 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 800515c:	4b37      	ldr	r3, [pc, #220]	; (800523c <USART6_IRQHandler+0xe4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 800516a:	4b34      	ldr	r3, [pc, #208]	; (800523c <USART6_IRQHandler+0xe4>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	b2da      	uxtb	r2, r3
 8005172:	4b33      	ldr	r3, [pc, #204]	; (8005240 <USART6_IRQHandler+0xe8>)
 8005174:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8005176:	f7ff fedf 	bl	8004f38 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 800517a:	e05d      	b.n	8005238 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 800517c:	4b2f      	ldr	r3, [pc, #188]	; (800523c <USART6_IRQHandler+0xe4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b00      	cmp	r3, #0
 8005188:	d055      	beq.n	8005236 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800518a:	4b2e      	ldr	r3, [pc, #184]	; (8005244 <USART6_IRQHandler+0xec>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10b      	bne.n	80051aa <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8005192:	4b2d      	ldr	r3, [pc, #180]	; (8005248 <USART6_IRQHandler+0xf0>)
 8005194:	781a      	ldrb	r2, [r3, #0]
 8005196:	4b29      	ldr	r3, [pc, #164]	; (800523c <USART6_IRQHandler+0xe4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800519c:	4b27      	ldr	r3, [pc, #156]	; (800523c <USART6_IRQHandler+0xe4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2100      	movs	r1, #0
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff fe9e 	bl	8004ee4 <interruptionTX>
}
 80051a8:	e046      	b.n	8005238 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80051aa:	4b26      	ldr	r3, [pc, #152]	; (8005244 <USART6_IRQHandler+0xec>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d142      	bne.n	8005238 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80051b2:	4b26      	ldr	r3, [pc, #152]	; (800524c <USART6_IRQHandler+0xf4>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <USART6_IRQHandler+0xf8>)
 80051ba:	5c9b      	ldrb	r3, [r3, r2]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00e      	beq.n	80051de <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 80051c0:	4b22      	ldr	r3, [pc, #136]	; (800524c <USART6_IRQHandler+0xf4>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	4b22      	ldr	r3, [pc, #136]	; (8005250 <USART6_IRQHandler+0xf8>)
 80051c8:	5c9a      	ldrb	r2, [r3, r2]
 80051ca:	4b1c      	ldr	r3, [pc, #112]	; (800523c <USART6_IRQHandler+0xe4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	605a      	str	r2, [r3, #4]
				posChar++;
 80051d0:	4b1e      	ldr	r3, [pc, #120]	; (800524c <USART6_IRQHandler+0xf4>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	3301      	adds	r3, #1
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	4b1c      	ldr	r3, [pc, #112]	; (800524c <USART6_IRQHandler+0xf4>)
 80051da:	701a      	strb	r2, [r3, #0]
}
 80051dc:	e02c      	b.n	8005238 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80051de:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <USART6_IRQHandler+0xfc>)
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <USART6_IRQHandler+0x100>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d215      	bcs.n	8005216 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80051ea:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <USART6_IRQHandler+0xfc>)
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	2364      	movs	r3, #100	; 0x64
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	4a19      	ldr	r2, [pc, #100]	; (800525c <USART6_IRQHandler+0x104>)
 80051f8:	4413      	add	r3, r2
 80051fa:	4619      	mov	r1, r3
 80051fc:	4814      	ldr	r0, [pc, #80]	; (8005250 <USART6_IRQHandler+0xf8>)
 80051fe:	f000 fee1 	bl	8005fc4 <siprintf>
					posChar = 0;
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <USART6_IRQHandler+0xf4>)
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8005208:	4b12      	ldr	r3, [pc, #72]	; (8005254 <USART6_IRQHandler+0xfc>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	b2da      	uxtb	r2, r3
 8005210:	4b10      	ldr	r3, [pc, #64]	; (8005254 <USART6_IRQHandler+0xfc>)
 8005212:	701a      	strb	r2, [r3, #0]
}
 8005214:	e010      	b.n	8005238 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8005216:	4b09      	ldr	r3, [pc, #36]	; (800523c <USART6_IRQHandler+0xe4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff fe61 	bl	8004ee4 <interruptionTX>
					posChar = 0;
 8005222:	4b0a      	ldr	r3, [pc, #40]	; (800524c <USART6_IRQHandler+0xf4>)
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <USART6_IRQHandler+0xfc>)
 800522a:	2200      	movs	r2, #0
 800522c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800522e:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <USART6_IRQHandler+0x100>)
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
}
 8005234:	e000      	b.n	8005238 <USART6_IRQHandler+0xe0>
		__NOP();
 8005236:	bf00      	nop
}
 8005238:	bf00      	nop
 800523a:	bd80      	pop	{r7, pc}
 800523c:	2000046c 	.word	0x2000046c
 8005240:	20000470 	.word	0x20000470
 8005244:	20000cab 	.word	0x20000cab
 8005248:	20000471 	.word	0x20000471
 800524c:	20000caa 	.word	0x20000caa
 8005250:	20000474 	.word	0x20000474
 8005254:	20000ca9 	.word	0x20000ca9
 8005258:	20000ca8 	.word	0x20000ca8
 800525c:	200004d8 	.word	0x200004d8

08005260 <__errno>:
 8005260:	4b01      	ldr	r3, [pc, #4]	; (8005268 <__errno+0x8>)
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000010 	.word	0x20000010

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4d0d      	ldr	r5, [pc, #52]	; (80052a4 <__libc_init_array+0x38>)
 8005270:	4c0d      	ldr	r4, [pc, #52]	; (80052a8 <__libc_init_array+0x3c>)
 8005272:	1b64      	subs	r4, r4, r5
 8005274:	10a4      	asrs	r4, r4, #2
 8005276:	2600      	movs	r6, #0
 8005278:	42a6      	cmp	r6, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	4d0b      	ldr	r5, [pc, #44]	; (80052ac <__libc_init_array+0x40>)
 800527e:	4c0c      	ldr	r4, [pc, #48]	; (80052b0 <__libc_init_array+0x44>)
 8005280:	f007 fa68 	bl	800c754 <_init>
 8005284:	1b64      	subs	r4, r4, r5
 8005286:	10a4      	asrs	r4, r4, #2
 8005288:	2600      	movs	r6, #0
 800528a:	42a6      	cmp	r6, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	f855 3b04 	ldr.w	r3, [r5], #4
 8005294:	4798      	blx	r3
 8005296:	3601      	adds	r6, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	f855 3b04 	ldr.w	r3, [r5], #4
 800529e:	4798      	blx	r3
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	0800d238 	.word	0x0800d238
 80052a8:	0800d238 	.word	0x0800d238
 80052ac:	0800d238 	.word	0x0800d238
 80052b0:	0800d23c 	.word	0x0800d23c

080052b4 <memset>:
 80052b4:	4402      	add	r2, r0
 80052b6:	4603      	mov	r3, r0
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d100      	bne.n	80052be <memset+0xa>
 80052bc:	4770      	bx	lr
 80052be:	f803 1b01 	strb.w	r1, [r3], #1
 80052c2:	e7f9      	b.n	80052b8 <memset+0x4>

080052c4 <__cvt>:
 80052c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c8:	ec55 4b10 	vmov	r4, r5, d0
 80052cc:	2d00      	cmp	r5, #0
 80052ce:	460e      	mov	r6, r1
 80052d0:	4619      	mov	r1, r3
 80052d2:	462b      	mov	r3, r5
 80052d4:	bfbb      	ittet	lt
 80052d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052da:	461d      	movlt	r5, r3
 80052dc:	2300      	movge	r3, #0
 80052de:	232d      	movlt	r3, #45	; 0x2d
 80052e0:	700b      	strb	r3, [r1, #0]
 80052e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052e8:	4691      	mov	r9, r2
 80052ea:	f023 0820 	bic.w	r8, r3, #32
 80052ee:	bfbc      	itt	lt
 80052f0:	4622      	movlt	r2, r4
 80052f2:	4614      	movlt	r4, r2
 80052f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052f8:	d005      	beq.n	8005306 <__cvt+0x42>
 80052fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052fe:	d100      	bne.n	8005302 <__cvt+0x3e>
 8005300:	3601      	adds	r6, #1
 8005302:	2102      	movs	r1, #2
 8005304:	e000      	b.n	8005308 <__cvt+0x44>
 8005306:	2103      	movs	r1, #3
 8005308:	ab03      	add	r3, sp, #12
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	ab02      	add	r3, sp, #8
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	ec45 4b10 	vmov	d0, r4, r5
 8005314:	4653      	mov	r3, sl
 8005316:	4632      	mov	r2, r6
 8005318:	f001 fe42 	bl	8006fa0 <_dtoa_r>
 800531c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005320:	4607      	mov	r7, r0
 8005322:	d102      	bne.n	800532a <__cvt+0x66>
 8005324:	f019 0f01 	tst.w	r9, #1
 8005328:	d022      	beq.n	8005370 <__cvt+0xac>
 800532a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800532e:	eb07 0906 	add.w	r9, r7, r6
 8005332:	d110      	bne.n	8005356 <__cvt+0x92>
 8005334:	783b      	ldrb	r3, [r7, #0]
 8005336:	2b30      	cmp	r3, #48	; 0x30
 8005338:	d10a      	bne.n	8005350 <__cvt+0x8c>
 800533a:	2200      	movs	r2, #0
 800533c:	2300      	movs	r3, #0
 800533e:	4620      	mov	r0, r4
 8005340:	4629      	mov	r1, r5
 8005342:	f7fb fbd9 	bl	8000af8 <__aeabi_dcmpeq>
 8005346:	b918      	cbnz	r0, 8005350 <__cvt+0x8c>
 8005348:	f1c6 0601 	rsb	r6, r6, #1
 800534c:	f8ca 6000 	str.w	r6, [sl]
 8005350:	f8da 3000 	ldr.w	r3, [sl]
 8005354:	4499      	add	r9, r3
 8005356:	2200      	movs	r2, #0
 8005358:	2300      	movs	r3, #0
 800535a:	4620      	mov	r0, r4
 800535c:	4629      	mov	r1, r5
 800535e:	f7fb fbcb 	bl	8000af8 <__aeabi_dcmpeq>
 8005362:	b108      	cbz	r0, 8005368 <__cvt+0xa4>
 8005364:	f8cd 900c 	str.w	r9, [sp, #12]
 8005368:	2230      	movs	r2, #48	; 0x30
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	454b      	cmp	r3, r9
 800536e:	d307      	bcc.n	8005380 <__cvt+0xbc>
 8005370:	9b03      	ldr	r3, [sp, #12]
 8005372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005374:	1bdb      	subs	r3, r3, r7
 8005376:	4638      	mov	r0, r7
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	b004      	add	sp, #16
 800537c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005380:	1c59      	adds	r1, r3, #1
 8005382:	9103      	str	r1, [sp, #12]
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	e7f0      	b.n	800536a <__cvt+0xa6>

08005388 <__exponent>:
 8005388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800538a:	4603      	mov	r3, r0
 800538c:	2900      	cmp	r1, #0
 800538e:	bfb8      	it	lt
 8005390:	4249      	neglt	r1, r1
 8005392:	f803 2b02 	strb.w	r2, [r3], #2
 8005396:	bfb4      	ite	lt
 8005398:	222d      	movlt	r2, #45	; 0x2d
 800539a:	222b      	movge	r2, #43	; 0x2b
 800539c:	2909      	cmp	r1, #9
 800539e:	7042      	strb	r2, [r0, #1]
 80053a0:	dd2a      	ble.n	80053f8 <__exponent+0x70>
 80053a2:	f10d 0407 	add.w	r4, sp, #7
 80053a6:	46a4      	mov	ip, r4
 80053a8:	270a      	movs	r7, #10
 80053aa:	46a6      	mov	lr, r4
 80053ac:	460a      	mov	r2, r1
 80053ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80053b2:	fb07 1516 	mls	r5, r7, r6, r1
 80053b6:	3530      	adds	r5, #48	; 0x30
 80053b8:	2a63      	cmp	r2, #99	; 0x63
 80053ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80053be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80053c2:	4631      	mov	r1, r6
 80053c4:	dcf1      	bgt.n	80053aa <__exponent+0x22>
 80053c6:	3130      	adds	r1, #48	; 0x30
 80053c8:	f1ae 0502 	sub.w	r5, lr, #2
 80053cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80053d0:	1c44      	adds	r4, r0, #1
 80053d2:	4629      	mov	r1, r5
 80053d4:	4561      	cmp	r1, ip
 80053d6:	d30a      	bcc.n	80053ee <__exponent+0x66>
 80053d8:	f10d 0209 	add.w	r2, sp, #9
 80053dc:	eba2 020e 	sub.w	r2, r2, lr
 80053e0:	4565      	cmp	r5, ip
 80053e2:	bf88      	it	hi
 80053e4:	2200      	movhi	r2, #0
 80053e6:	4413      	add	r3, r2
 80053e8:	1a18      	subs	r0, r3, r0
 80053ea:	b003      	add	sp, #12
 80053ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80053f6:	e7ed      	b.n	80053d4 <__exponent+0x4c>
 80053f8:	2330      	movs	r3, #48	; 0x30
 80053fa:	3130      	adds	r1, #48	; 0x30
 80053fc:	7083      	strb	r3, [r0, #2]
 80053fe:	70c1      	strb	r1, [r0, #3]
 8005400:	1d03      	adds	r3, r0, #4
 8005402:	e7f1      	b.n	80053e8 <__exponent+0x60>

08005404 <_printf_float>:
 8005404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005408:	ed2d 8b02 	vpush	{d8}
 800540c:	b08d      	sub	sp, #52	; 0x34
 800540e:	460c      	mov	r4, r1
 8005410:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005414:	4616      	mov	r6, r2
 8005416:	461f      	mov	r7, r3
 8005418:	4605      	mov	r5, r0
 800541a:	f002 ff1f 	bl	800825c <_localeconv_r>
 800541e:	f8d0 a000 	ldr.w	sl, [r0]
 8005422:	4650      	mov	r0, sl
 8005424:	f7fa fee6 	bl	80001f4 <strlen>
 8005428:	2300      	movs	r3, #0
 800542a:	930a      	str	r3, [sp, #40]	; 0x28
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	9305      	str	r3, [sp, #20]
 8005430:	f8d8 3000 	ldr.w	r3, [r8]
 8005434:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005438:	3307      	adds	r3, #7
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	f103 0208 	add.w	r2, r3, #8
 8005442:	f8c8 2000 	str.w	r2, [r8]
 8005446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800544e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005452:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005456:	9307      	str	r3, [sp, #28]
 8005458:	f8cd 8018 	str.w	r8, [sp, #24]
 800545c:	ee08 0a10 	vmov	s16, r0
 8005460:	4b9f      	ldr	r3, [pc, #636]	; (80056e0 <_printf_float+0x2dc>)
 8005462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005466:	f04f 32ff 	mov.w	r2, #4294967295
 800546a:	f7fb fb77 	bl	8000b5c <__aeabi_dcmpun>
 800546e:	bb88      	cbnz	r0, 80054d4 <_printf_float+0xd0>
 8005470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005474:	4b9a      	ldr	r3, [pc, #616]	; (80056e0 <_printf_float+0x2dc>)
 8005476:	f04f 32ff 	mov.w	r2, #4294967295
 800547a:	f7fb fb51 	bl	8000b20 <__aeabi_dcmple>
 800547e:	bb48      	cbnz	r0, 80054d4 <_printf_float+0xd0>
 8005480:	2200      	movs	r2, #0
 8005482:	2300      	movs	r3, #0
 8005484:	4640      	mov	r0, r8
 8005486:	4649      	mov	r1, r9
 8005488:	f7fb fb40 	bl	8000b0c <__aeabi_dcmplt>
 800548c:	b110      	cbz	r0, 8005494 <_printf_float+0x90>
 800548e:	232d      	movs	r3, #45	; 0x2d
 8005490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005494:	4b93      	ldr	r3, [pc, #588]	; (80056e4 <_printf_float+0x2e0>)
 8005496:	4894      	ldr	r0, [pc, #592]	; (80056e8 <_printf_float+0x2e4>)
 8005498:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800549c:	bf94      	ite	ls
 800549e:	4698      	movls	r8, r3
 80054a0:	4680      	movhi	r8, r0
 80054a2:	2303      	movs	r3, #3
 80054a4:	6123      	str	r3, [r4, #16]
 80054a6:	9b05      	ldr	r3, [sp, #20]
 80054a8:	f023 0204 	bic.w	r2, r3, #4
 80054ac:	6022      	str	r2, [r4, #0]
 80054ae:	f04f 0900 	mov.w	r9, #0
 80054b2:	9700      	str	r7, [sp, #0]
 80054b4:	4633      	mov	r3, r6
 80054b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80054b8:	4621      	mov	r1, r4
 80054ba:	4628      	mov	r0, r5
 80054bc:	f000 f9d8 	bl	8005870 <_printf_common>
 80054c0:	3001      	adds	r0, #1
 80054c2:	f040 8090 	bne.w	80055e6 <_printf_float+0x1e2>
 80054c6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ca:	b00d      	add	sp, #52	; 0x34
 80054cc:	ecbd 8b02 	vpop	{d8}
 80054d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d4:	4642      	mov	r2, r8
 80054d6:	464b      	mov	r3, r9
 80054d8:	4640      	mov	r0, r8
 80054da:	4649      	mov	r1, r9
 80054dc:	f7fb fb3e 	bl	8000b5c <__aeabi_dcmpun>
 80054e0:	b140      	cbz	r0, 80054f4 <_printf_float+0xf0>
 80054e2:	464b      	mov	r3, r9
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bfbc      	itt	lt
 80054e8:	232d      	movlt	r3, #45	; 0x2d
 80054ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054ee:	487f      	ldr	r0, [pc, #508]	; (80056ec <_printf_float+0x2e8>)
 80054f0:	4b7f      	ldr	r3, [pc, #508]	; (80056f0 <_printf_float+0x2ec>)
 80054f2:	e7d1      	b.n	8005498 <_printf_float+0x94>
 80054f4:	6863      	ldr	r3, [r4, #4]
 80054f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054fa:	9206      	str	r2, [sp, #24]
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	d13f      	bne.n	8005580 <_printf_float+0x17c>
 8005500:	2306      	movs	r3, #6
 8005502:	6063      	str	r3, [r4, #4]
 8005504:	9b05      	ldr	r3, [sp, #20]
 8005506:	6861      	ldr	r1, [r4, #4]
 8005508:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800550c:	2300      	movs	r3, #0
 800550e:	9303      	str	r3, [sp, #12]
 8005510:	ab0a      	add	r3, sp, #40	; 0x28
 8005512:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005516:	ab09      	add	r3, sp, #36	; 0x24
 8005518:	ec49 8b10 	vmov	d0, r8, r9
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	6022      	str	r2, [r4, #0]
 8005520:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005524:	4628      	mov	r0, r5
 8005526:	f7ff fecd 	bl	80052c4 <__cvt>
 800552a:	9b06      	ldr	r3, [sp, #24]
 800552c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800552e:	2b47      	cmp	r3, #71	; 0x47
 8005530:	4680      	mov	r8, r0
 8005532:	d108      	bne.n	8005546 <_printf_float+0x142>
 8005534:	1cc8      	adds	r0, r1, #3
 8005536:	db02      	blt.n	800553e <_printf_float+0x13a>
 8005538:	6863      	ldr	r3, [r4, #4]
 800553a:	4299      	cmp	r1, r3
 800553c:	dd41      	ble.n	80055c2 <_printf_float+0x1be>
 800553e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005542:	fa5f fb8b 	uxtb.w	fp, fp
 8005546:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800554a:	d820      	bhi.n	800558e <_printf_float+0x18a>
 800554c:	3901      	subs	r1, #1
 800554e:	465a      	mov	r2, fp
 8005550:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005554:	9109      	str	r1, [sp, #36]	; 0x24
 8005556:	f7ff ff17 	bl	8005388 <__exponent>
 800555a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800555c:	1813      	adds	r3, r2, r0
 800555e:	2a01      	cmp	r2, #1
 8005560:	4681      	mov	r9, r0
 8005562:	6123      	str	r3, [r4, #16]
 8005564:	dc02      	bgt.n	800556c <_printf_float+0x168>
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	07d2      	lsls	r2, r2, #31
 800556a:	d501      	bpl.n	8005570 <_printf_float+0x16c>
 800556c:	3301      	adds	r3, #1
 800556e:	6123      	str	r3, [r4, #16]
 8005570:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005574:	2b00      	cmp	r3, #0
 8005576:	d09c      	beq.n	80054b2 <_printf_float+0xae>
 8005578:	232d      	movs	r3, #45	; 0x2d
 800557a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800557e:	e798      	b.n	80054b2 <_printf_float+0xae>
 8005580:	9a06      	ldr	r2, [sp, #24]
 8005582:	2a47      	cmp	r2, #71	; 0x47
 8005584:	d1be      	bne.n	8005504 <_printf_float+0x100>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1bc      	bne.n	8005504 <_printf_float+0x100>
 800558a:	2301      	movs	r3, #1
 800558c:	e7b9      	b.n	8005502 <_printf_float+0xfe>
 800558e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005592:	d118      	bne.n	80055c6 <_printf_float+0x1c2>
 8005594:	2900      	cmp	r1, #0
 8005596:	6863      	ldr	r3, [r4, #4]
 8005598:	dd0b      	ble.n	80055b2 <_printf_float+0x1ae>
 800559a:	6121      	str	r1, [r4, #16]
 800559c:	b913      	cbnz	r3, 80055a4 <_printf_float+0x1a0>
 800559e:	6822      	ldr	r2, [r4, #0]
 80055a0:	07d0      	lsls	r0, r2, #31
 80055a2:	d502      	bpl.n	80055aa <_printf_float+0x1a6>
 80055a4:	3301      	adds	r3, #1
 80055a6:	440b      	add	r3, r1
 80055a8:	6123      	str	r3, [r4, #16]
 80055aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80055ac:	f04f 0900 	mov.w	r9, #0
 80055b0:	e7de      	b.n	8005570 <_printf_float+0x16c>
 80055b2:	b913      	cbnz	r3, 80055ba <_printf_float+0x1b6>
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	07d2      	lsls	r2, r2, #31
 80055b8:	d501      	bpl.n	80055be <_printf_float+0x1ba>
 80055ba:	3302      	adds	r3, #2
 80055bc:	e7f4      	b.n	80055a8 <_printf_float+0x1a4>
 80055be:	2301      	movs	r3, #1
 80055c0:	e7f2      	b.n	80055a8 <_printf_float+0x1a4>
 80055c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055c8:	4299      	cmp	r1, r3
 80055ca:	db05      	blt.n	80055d8 <_printf_float+0x1d4>
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	6121      	str	r1, [r4, #16]
 80055d0:	07d8      	lsls	r0, r3, #31
 80055d2:	d5ea      	bpl.n	80055aa <_printf_float+0x1a6>
 80055d4:	1c4b      	adds	r3, r1, #1
 80055d6:	e7e7      	b.n	80055a8 <_printf_float+0x1a4>
 80055d8:	2900      	cmp	r1, #0
 80055da:	bfd4      	ite	le
 80055dc:	f1c1 0202 	rsble	r2, r1, #2
 80055e0:	2201      	movgt	r2, #1
 80055e2:	4413      	add	r3, r2
 80055e4:	e7e0      	b.n	80055a8 <_printf_float+0x1a4>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	055a      	lsls	r2, r3, #21
 80055ea:	d407      	bmi.n	80055fc <_printf_float+0x1f8>
 80055ec:	6923      	ldr	r3, [r4, #16]
 80055ee:	4642      	mov	r2, r8
 80055f0:	4631      	mov	r1, r6
 80055f2:	4628      	mov	r0, r5
 80055f4:	47b8      	blx	r7
 80055f6:	3001      	adds	r0, #1
 80055f8:	d12c      	bne.n	8005654 <_printf_float+0x250>
 80055fa:	e764      	b.n	80054c6 <_printf_float+0xc2>
 80055fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005600:	f240 80e0 	bls.w	80057c4 <_printf_float+0x3c0>
 8005604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005608:	2200      	movs	r2, #0
 800560a:	2300      	movs	r3, #0
 800560c:	f7fb fa74 	bl	8000af8 <__aeabi_dcmpeq>
 8005610:	2800      	cmp	r0, #0
 8005612:	d034      	beq.n	800567e <_printf_float+0x27a>
 8005614:	4a37      	ldr	r2, [pc, #220]	; (80056f4 <_printf_float+0x2f0>)
 8005616:	2301      	movs	r3, #1
 8005618:	4631      	mov	r1, r6
 800561a:	4628      	mov	r0, r5
 800561c:	47b8      	blx	r7
 800561e:	3001      	adds	r0, #1
 8005620:	f43f af51 	beq.w	80054c6 <_printf_float+0xc2>
 8005624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005628:	429a      	cmp	r2, r3
 800562a:	db02      	blt.n	8005632 <_printf_float+0x22e>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	07d8      	lsls	r0, r3, #31
 8005630:	d510      	bpl.n	8005654 <_printf_float+0x250>
 8005632:	ee18 3a10 	vmov	r3, s16
 8005636:	4652      	mov	r2, sl
 8005638:	4631      	mov	r1, r6
 800563a:	4628      	mov	r0, r5
 800563c:	47b8      	blx	r7
 800563e:	3001      	adds	r0, #1
 8005640:	f43f af41 	beq.w	80054c6 <_printf_float+0xc2>
 8005644:	f04f 0800 	mov.w	r8, #0
 8005648:	f104 091a 	add.w	r9, r4, #26
 800564c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800564e:	3b01      	subs	r3, #1
 8005650:	4543      	cmp	r3, r8
 8005652:	dc09      	bgt.n	8005668 <_printf_float+0x264>
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	079b      	lsls	r3, r3, #30
 8005658:	f100 8105 	bmi.w	8005866 <_printf_float+0x462>
 800565c:	68e0      	ldr	r0, [r4, #12]
 800565e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005660:	4298      	cmp	r0, r3
 8005662:	bfb8      	it	lt
 8005664:	4618      	movlt	r0, r3
 8005666:	e730      	b.n	80054ca <_printf_float+0xc6>
 8005668:	2301      	movs	r3, #1
 800566a:	464a      	mov	r2, r9
 800566c:	4631      	mov	r1, r6
 800566e:	4628      	mov	r0, r5
 8005670:	47b8      	blx	r7
 8005672:	3001      	adds	r0, #1
 8005674:	f43f af27 	beq.w	80054c6 <_printf_float+0xc2>
 8005678:	f108 0801 	add.w	r8, r8, #1
 800567c:	e7e6      	b.n	800564c <_printf_float+0x248>
 800567e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005680:	2b00      	cmp	r3, #0
 8005682:	dc39      	bgt.n	80056f8 <_printf_float+0x2f4>
 8005684:	4a1b      	ldr	r2, [pc, #108]	; (80056f4 <_printf_float+0x2f0>)
 8005686:	2301      	movs	r3, #1
 8005688:	4631      	mov	r1, r6
 800568a:	4628      	mov	r0, r5
 800568c:	47b8      	blx	r7
 800568e:	3001      	adds	r0, #1
 8005690:	f43f af19 	beq.w	80054c6 <_printf_float+0xc2>
 8005694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005698:	4313      	orrs	r3, r2
 800569a:	d102      	bne.n	80056a2 <_printf_float+0x29e>
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	07d9      	lsls	r1, r3, #31
 80056a0:	d5d8      	bpl.n	8005654 <_printf_float+0x250>
 80056a2:	ee18 3a10 	vmov	r3, s16
 80056a6:	4652      	mov	r2, sl
 80056a8:	4631      	mov	r1, r6
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	f43f af09 	beq.w	80054c6 <_printf_float+0xc2>
 80056b4:	f04f 0900 	mov.w	r9, #0
 80056b8:	f104 0a1a 	add.w	sl, r4, #26
 80056bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056be:	425b      	negs	r3, r3
 80056c0:	454b      	cmp	r3, r9
 80056c2:	dc01      	bgt.n	80056c8 <_printf_float+0x2c4>
 80056c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c6:	e792      	b.n	80055ee <_printf_float+0x1ea>
 80056c8:	2301      	movs	r3, #1
 80056ca:	4652      	mov	r2, sl
 80056cc:	4631      	mov	r1, r6
 80056ce:	4628      	mov	r0, r5
 80056d0:	47b8      	blx	r7
 80056d2:	3001      	adds	r0, #1
 80056d4:	f43f aef7 	beq.w	80054c6 <_printf_float+0xc2>
 80056d8:	f109 0901 	add.w	r9, r9, #1
 80056dc:	e7ee      	b.n	80056bc <_printf_float+0x2b8>
 80056de:	bf00      	nop
 80056e0:	7fefffff 	.word	0x7fefffff
 80056e4:	0800cb00 	.word	0x0800cb00
 80056e8:	0800cb04 	.word	0x0800cb04
 80056ec:	0800cb0c 	.word	0x0800cb0c
 80056f0:	0800cb08 	.word	0x0800cb08
 80056f4:	0800cf01 	.word	0x0800cf01
 80056f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056fc:	429a      	cmp	r2, r3
 80056fe:	bfa8      	it	ge
 8005700:	461a      	movge	r2, r3
 8005702:	2a00      	cmp	r2, #0
 8005704:	4691      	mov	r9, r2
 8005706:	dc37      	bgt.n	8005778 <_printf_float+0x374>
 8005708:	f04f 0b00 	mov.w	fp, #0
 800570c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005710:	f104 021a 	add.w	r2, r4, #26
 8005714:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005716:	9305      	str	r3, [sp, #20]
 8005718:	eba3 0309 	sub.w	r3, r3, r9
 800571c:	455b      	cmp	r3, fp
 800571e:	dc33      	bgt.n	8005788 <_printf_float+0x384>
 8005720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005724:	429a      	cmp	r2, r3
 8005726:	db3b      	blt.n	80057a0 <_printf_float+0x39c>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	07da      	lsls	r2, r3, #31
 800572c:	d438      	bmi.n	80057a0 <_printf_float+0x39c>
 800572e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005730:	9a05      	ldr	r2, [sp, #20]
 8005732:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005734:	1a9a      	subs	r2, r3, r2
 8005736:	eba3 0901 	sub.w	r9, r3, r1
 800573a:	4591      	cmp	r9, r2
 800573c:	bfa8      	it	ge
 800573e:	4691      	movge	r9, r2
 8005740:	f1b9 0f00 	cmp.w	r9, #0
 8005744:	dc35      	bgt.n	80057b2 <_printf_float+0x3ae>
 8005746:	f04f 0800 	mov.w	r8, #0
 800574a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800574e:	f104 0a1a 	add.w	sl, r4, #26
 8005752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005756:	1a9b      	subs	r3, r3, r2
 8005758:	eba3 0309 	sub.w	r3, r3, r9
 800575c:	4543      	cmp	r3, r8
 800575e:	f77f af79 	ble.w	8005654 <_printf_float+0x250>
 8005762:	2301      	movs	r3, #1
 8005764:	4652      	mov	r2, sl
 8005766:	4631      	mov	r1, r6
 8005768:	4628      	mov	r0, r5
 800576a:	47b8      	blx	r7
 800576c:	3001      	adds	r0, #1
 800576e:	f43f aeaa 	beq.w	80054c6 <_printf_float+0xc2>
 8005772:	f108 0801 	add.w	r8, r8, #1
 8005776:	e7ec      	b.n	8005752 <_printf_float+0x34e>
 8005778:	4613      	mov	r3, r2
 800577a:	4631      	mov	r1, r6
 800577c:	4642      	mov	r2, r8
 800577e:	4628      	mov	r0, r5
 8005780:	47b8      	blx	r7
 8005782:	3001      	adds	r0, #1
 8005784:	d1c0      	bne.n	8005708 <_printf_float+0x304>
 8005786:	e69e      	b.n	80054c6 <_printf_float+0xc2>
 8005788:	2301      	movs	r3, #1
 800578a:	4631      	mov	r1, r6
 800578c:	4628      	mov	r0, r5
 800578e:	9205      	str	r2, [sp, #20]
 8005790:	47b8      	blx	r7
 8005792:	3001      	adds	r0, #1
 8005794:	f43f ae97 	beq.w	80054c6 <_printf_float+0xc2>
 8005798:	9a05      	ldr	r2, [sp, #20]
 800579a:	f10b 0b01 	add.w	fp, fp, #1
 800579e:	e7b9      	b.n	8005714 <_printf_float+0x310>
 80057a0:	ee18 3a10 	vmov	r3, s16
 80057a4:	4652      	mov	r2, sl
 80057a6:	4631      	mov	r1, r6
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b8      	blx	r7
 80057ac:	3001      	adds	r0, #1
 80057ae:	d1be      	bne.n	800572e <_printf_float+0x32a>
 80057b0:	e689      	b.n	80054c6 <_printf_float+0xc2>
 80057b2:	9a05      	ldr	r2, [sp, #20]
 80057b4:	464b      	mov	r3, r9
 80057b6:	4442      	add	r2, r8
 80057b8:	4631      	mov	r1, r6
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	d1c1      	bne.n	8005746 <_printf_float+0x342>
 80057c2:	e680      	b.n	80054c6 <_printf_float+0xc2>
 80057c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057c6:	2a01      	cmp	r2, #1
 80057c8:	dc01      	bgt.n	80057ce <_printf_float+0x3ca>
 80057ca:	07db      	lsls	r3, r3, #31
 80057cc:	d538      	bpl.n	8005840 <_printf_float+0x43c>
 80057ce:	2301      	movs	r3, #1
 80057d0:	4642      	mov	r2, r8
 80057d2:	4631      	mov	r1, r6
 80057d4:	4628      	mov	r0, r5
 80057d6:	47b8      	blx	r7
 80057d8:	3001      	adds	r0, #1
 80057da:	f43f ae74 	beq.w	80054c6 <_printf_float+0xc2>
 80057de:	ee18 3a10 	vmov	r3, s16
 80057e2:	4652      	mov	r2, sl
 80057e4:	4631      	mov	r1, r6
 80057e6:	4628      	mov	r0, r5
 80057e8:	47b8      	blx	r7
 80057ea:	3001      	adds	r0, #1
 80057ec:	f43f ae6b 	beq.w	80054c6 <_printf_float+0xc2>
 80057f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057f4:	2200      	movs	r2, #0
 80057f6:	2300      	movs	r3, #0
 80057f8:	f7fb f97e 	bl	8000af8 <__aeabi_dcmpeq>
 80057fc:	b9d8      	cbnz	r0, 8005836 <_printf_float+0x432>
 80057fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005800:	f108 0201 	add.w	r2, r8, #1
 8005804:	3b01      	subs	r3, #1
 8005806:	4631      	mov	r1, r6
 8005808:	4628      	mov	r0, r5
 800580a:	47b8      	blx	r7
 800580c:	3001      	adds	r0, #1
 800580e:	d10e      	bne.n	800582e <_printf_float+0x42a>
 8005810:	e659      	b.n	80054c6 <_printf_float+0xc2>
 8005812:	2301      	movs	r3, #1
 8005814:	4652      	mov	r2, sl
 8005816:	4631      	mov	r1, r6
 8005818:	4628      	mov	r0, r5
 800581a:	47b8      	blx	r7
 800581c:	3001      	adds	r0, #1
 800581e:	f43f ae52 	beq.w	80054c6 <_printf_float+0xc2>
 8005822:	f108 0801 	add.w	r8, r8, #1
 8005826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005828:	3b01      	subs	r3, #1
 800582a:	4543      	cmp	r3, r8
 800582c:	dcf1      	bgt.n	8005812 <_printf_float+0x40e>
 800582e:	464b      	mov	r3, r9
 8005830:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005834:	e6dc      	b.n	80055f0 <_printf_float+0x1ec>
 8005836:	f04f 0800 	mov.w	r8, #0
 800583a:	f104 0a1a 	add.w	sl, r4, #26
 800583e:	e7f2      	b.n	8005826 <_printf_float+0x422>
 8005840:	2301      	movs	r3, #1
 8005842:	4642      	mov	r2, r8
 8005844:	e7df      	b.n	8005806 <_printf_float+0x402>
 8005846:	2301      	movs	r3, #1
 8005848:	464a      	mov	r2, r9
 800584a:	4631      	mov	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	f43f ae38 	beq.w	80054c6 <_printf_float+0xc2>
 8005856:	f108 0801 	add.w	r8, r8, #1
 800585a:	68e3      	ldr	r3, [r4, #12]
 800585c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800585e:	1a5b      	subs	r3, r3, r1
 8005860:	4543      	cmp	r3, r8
 8005862:	dcf0      	bgt.n	8005846 <_printf_float+0x442>
 8005864:	e6fa      	b.n	800565c <_printf_float+0x258>
 8005866:	f04f 0800 	mov.w	r8, #0
 800586a:	f104 0919 	add.w	r9, r4, #25
 800586e:	e7f4      	b.n	800585a <_printf_float+0x456>

08005870 <_printf_common>:
 8005870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005874:	4616      	mov	r6, r2
 8005876:	4699      	mov	r9, r3
 8005878:	688a      	ldr	r2, [r1, #8]
 800587a:	690b      	ldr	r3, [r1, #16]
 800587c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005880:	4293      	cmp	r3, r2
 8005882:	bfb8      	it	lt
 8005884:	4613      	movlt	r3, r2
 8005886:	6033      	str	r3, [r6, #0]
 8005888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800588c:	4607      	mov	r7, r0
 800588e:	460c      	mov	r4, r1
 8005890:	b10a      	cbz	r2, 8005896 <_printf_common+0x26>
 8005892:	3301      	adds	r3, #1
 8005894:	6033      	str	r3, [r6, #0]
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	0699      	lsls	r1, r3, #26
 800589a:	bf42      	ittt	mi
 800589c:	6833      	ldrmi	r3, [r6, #0]
 800589e:	3302      	addmi	r3, #2
 80058a0:	6033      	strmi	r3, [r6, #0]
 80058a2:	6825      	ldr	r5, [r4, #0]
 80058a4:	f015 0506 	ands.w	r5, r5, #6
 80058a8:	d106      	bne.n	80058b8 <_printf_common+0x48>
 80058aa:	f104 0a19 	add.w	sl, r4, #25
 80058ae:	68e3      	ldr	r3, [r4, #12]
 80058b0:	6832      	ldr	r2, [r6, #0]
 80058b2:	1a9b      	subs	r3, r3, r2
 80058b4:	42ab      	cmp	r3, r5
 80058b6:	dc26      	bgt.n	8005906 <_printf_common+0x96>
 80058b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058bc:	1e13      	subs	r3, r2, #0
 80058be:	6822      	ldr	r2, [r4, #0]
 80058c0:	bf18      	it	ne
 80058c2:	2301      	movne	r3, #1
 80058c4:	0692      	lsls	r2, r2, #26
 80058c6:	d42b      	bmi.n	8005920 <_printf_common+0xb0>
 80058c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058cc:	4649      	mov	r1, r9
 80058ce:	4638      	mov	r0, r7
 80058d0:	47c0      	blx	r8
 80058d2:	3001      	adds	r0, #1
 80058d4:	d01e      	beq.n	8005914 <_printf_common+0xa4>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	68e5      	ldr	r5, [r4, #12]
 80058da:	6832      	ldr	r2, [r6, #0]
 80058dc:	f003 0306 	and.w	r3, r3, #6
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	bf08      	it	eq
 80058e4:	1aad      	subeq	r5, r5, r2
 80058e6:	68a3      	ldr	r3, [r4, #8]
 80058e8:	6922      	ldr	r2, [r4, #16]
 80058ea:	bf0c      	ite	eq
 80058ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058f0:	2500      	movne	r5, #0
 80058f2:	4293      	cmp	r3, r2
 80058f4:	bfc4      	itt	gt
 80058f6:	1a9b      	subgt	r3, r3, r2
 80058f8:	18ed      	addgt	r5, r5, r3
 80058fa:	2600      	movs	r6, #0
 80058fc:	341a      	adds	r4, #26
 80058fe:	42b5      	cmp	r5, r6
 8005900:	d11a      	bne.n	8005938 <_printf_common+0xc8>
 8005902:	2000      	movs	r0, #0
 8005904:	e008      	b.n	8005918 <_printf_common+0xa8>
 8005906:	2301      	movs	r3, #1
 8005908:	4652      	mov	r2, sl
 800590a:	4649      	mov	r1, r9
 800590c:	4638      	mov	r0, r7
 800590e:	47c0      	blx	r8
 8005910:	3001      	adds	r0, #1
 8005912:	d103      	bne.n	800591c <_printf_common+0xac>
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591c:	3501      	adds	r5, #1
 800591e:	e7c6      	b.n	80058ae <_printf_common+0x3e>
 8005920:	18e1      	adds	r1, r4, r3
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	2030      	movs	r0, #48	; 0x30
 8005926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800592a:	4422      	add	r2, r4
 800592c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005934:	3302      	adds	r3, #2
 8005936:	e7c7      	b.n	80058c8 <_printf_common+0x58>
 8005938:	2301      	movs	r3, #1
 800593a:	4622      	mov	r2, r4
 800593c:	4649      	mov	r1, r9
 800593e:	4638      	mov	r0, r7
 8005940:	47c0      	blx	r8
 8005942:	3001      	adds	r0, #1
 8005944:	d0e6      	beq.n	8005914 <_printf_common+0xa4>
 8005946:	3601      	adds	r6, #1
 8005948:	e7d9      	b.n	80058fe <_printf_common+0x8e>
	...

0800594c <_printf_i>:
 800594c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005950:	7e0f      	ldrb	r7, [r1, #24]
 8005952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005954:	2f78      	cmp	r7, #120	; 0x78
 8005956:	4691      	mov	r9, r2
 8005958:	4680      	mov	r8, r0
 800595a:	460c      	mov	r4, r1
 800595c:	469a      	mov	sl, r3
 800595e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005962:	d807      	bhi.n	8005974 <_printf_i+0x28>
 8005964:	2f62      	cmp	r7, #98	; 0x62
 8005966:	d80a      	bhi.n	800597e <_printf_i+0x32>
 8005968:	2f00      	cmp	r7, #0
 800596a:	f000 80d8 	beq.w	8005b1e <_printf_i+0x1d2>
 800596e:	2f58      	cmp	r7, #88	; 0x58
 8005970:	f000 80a3 	beq.w	8005aba <_printf_i+0x16e>
 8005974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800597c:	e03a      	b.n	80059f4 <_printf_i+0xa8>
 800597e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005982:	2b15      	cmp	r3, #21
 8005984:	d8f6      	bhi.n	8005974 <_printf_i+0x28>
 8005986:	a101      	add	r1, pc, #4	; (adr r1, 800598c <_printf_i+0x40>)
 8005988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800598c:	080059e5 	.word	0x080059e5
 8005990:	080059f9 	.word	0x080059f9
 8005994:	08005975 	.word	0x08005975
 8005998:	08005975 	.word	0x08005975
 800599c:	08005975 	.word	0x08005975
 80059a0:	08005975 	.word	0x08005975
 80059a4:	080059f9 	.word	0x080059f9
 80059a8:	08005975 	.word	0x08005975
 80059ac:	08005975 	.word	0x08005975
 80059b0:	08005975 	.word	0x08005975
 80059b4:	08005975 	.word	0x08005975
 80059b8:	08005b05 	.word	0x08005b05
 80059bc:	08005a29 	.word	0x08005a29
 80059c0:	08005ae7 	.word	0x08005ae7
 80059c4:	08005975 	.word	0x08005975
 80059c8:	08005975 	.word	0x08005975
 80059cc:	08005b27 	.word	0x08005b27
 80059d0:	08005975 	.word	0x08005975
 80059d4:	08005a29 	.word	0x08005a29
 80059d8:	08005975 	.word	0x08005975
 80059dc:	08005975 	.word	0x08005975
 80059e0:	08005aef 	.word	0x08005aef
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	1d1a      	adds	r2, r3, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	602a      	str	r2, [r5, #0]
 80059ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0a3      	b.n	8005b40 <_printf_i+0x1f4>
 80059f8:	6820      	ldr	r0, [r4, #0]
 80059fa:	6829      	ldr	r1, [r5, #0]
 80059fc:	0606      	lsls	r6, r0, #24
 80059fe:	f101 0304 	add.w	r3, r1, #4
 8005a02:	d50a      	bpl.n	8005a1a <_printf_i+0xce>
 8005a04:	680e      	ldr	r6, [r1, #0]
 8005a06:	602b      	str	r3, [r5, #0]
 8005a08:	2e00      	cmp	r6, #0
 8005a0a:	da03      	bge.n	8005a14 <_printf_i+0xc8>
 8005a0c:	232d      	movs	r3, #45	; 0x2d
 8005a0e:	4276      	negs	r6, r6
 8005a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a14:	485e      	ldr	r0, [pc, #376]	; (8005b90 <_printf_i+0x244>)
 8005a16:	230a      	movs	r3, #10
 8005a18:	e019      	b.n	8005a4e <_printf_i+0x102>
 8005a1a:	680e      	ldr	r6, [r1, #0]
 8005a1c:	602b      	str	r3, [r5, #0]
 8005a1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a22:	bf18      	it	ne
 8005a24:	b236      	sxthne	r6, r6
 8005a26:	e7ef      	b.n	8005a08 <_printf_i+0xbc>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	6820      	ldr	r0, [r4, #0]
 8005a2c:	1d19      	adds	r1, r3, #4
 8005a2e:	6029      	str	r1, [r5, #0]
 8005a30:	0601      	lsls	r1, r0, #24
 8005a32:	d501      	bpl.n	8005a38 <_printf_i+0xec>
 8005a34:	681e      	ldr	r6, [r3, #0]
 8005a36:	e002      	b.n	8005a3e <_printf_i+0xf2>
 8005a38:	0646      	lsls	r6, r0, #25
 8005a3a:	d5fb      	bpl.n	8005a34 <_printf_i+0xe8>
 8005a3c:	881e      	ldrh	r6, [r3, #0]
 8005a3e:	4854      	ldr	r0, [pc, #336]	; (8005b90 <_printf_i+0x244>)
 8005a40:	2f6f      	cmp	r7, #111	; 0x6f
 8005a42:	bf0c      	ite	eq
 8005a44:	2308      	moveq	r3, #8
 8005a46:	230a      	movne	r3, #10
 8005a48:	2100      	movs	r1, #0
 8005a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a4e:	6865      	ldr	r5, [r4, #4]
 8005a50:	60a5      	str	r5, [r4, #8]
 8005a52:	2d00      	cmp	r5, #0
 8005a54:	bfa2      	ittt	ge
 8005a56:	6821      	ldrge	r1, [r4, #0]
 8005a58:	f021 0104 	bicge.w	r1, r1, #4
 8005a5c:	6021      	strge	r1, [r4, #0]
 8005a5e:	b90e      	cbnz	r6, 8005a64 <_printf_i+0x118>
 8005a60:	2d00      	cmp	r5, #0
 8005a62:	d04d      	beq.n	8005b00 <_printf_i+0x1b4>
 8005a64:	4615      	mov	r5, r2
 8005a66:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a6a:	fb03 6711 	mls	r7, r3, r1, r6
 8005a6e:	5dc7      	ldrb	r7, [r0, r7]
 8005a70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a74:	4637      	mov	r7, r6
 8005a76:	42bb      	cmp	r3, r7
 8005a78:	460e      	mov	r6, r1
 8005a7a:	d9f4      	bls.n	8005a66 <_printf_i+0x11a>
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d10b      	bne.n	8005a98 <_printf_i+0x14c>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	07de      	lsls	r6, r3, #31
 8005a84:	d508      	bpl.n	8005a98 <_printf_i+0x14c>
 8005a86:	6923      	ldr	r3, [r4, #16]
 8005a88:	6861      	ldr	r1, [r4, #4]
 8005a8a:	4299      	cmp	r1, r3
 8005a8c:	bfde      	ittt	le
 8005a8e:	2330      	movle	r3, #48	; 0x30
 8005a90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a98:	1b52      	subs	r2, r2, r5
 8005a9a:	6122      	str	r2, [r4, #16]
 8005a9c:	f8cd a000 	str.w	sl, [sp]
 8005aa0:	464b      	mov	r3, r9
 8005aa2:	aa03      	add	r2, sp, #12
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	f7ff fee2 	bl	8005870 <_printf_common>
 8005aac:	3001      	adds	r0, #1
 8005aae:	d14c      	bne.n	8005b4a <_printf_i+0x1fe>
 8005ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab4:	b004      	add	sp, #16
 8005ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aba:	4835      	ldr	r0, [pc, #212]	; (8005b90 <_printf_i+0x244>)
 8005abc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ac0:	6829      	ldr	r1, [r5, #0]
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ac8:	6029      	str	r1, [r5, #0]
 8005aca:	061d      	lsls	r5, r3, #24
 8005acc:	d514      	bpl.n	8005af8 <_printf_i+0x1ac>
 8005ace:	07df      	lsls	r7, r3, #31
 8005ad0:	bf44      	itt	mi
 8005ad2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ad6:	6023      	strmi	r3, [r4, #0]
 8005ad8:	b91e      	cbnz	r6, 8005ae2 <_printf_i+0x196>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	f023 0320 	bic.w	r3, r3, #32
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	2310      	movs	r3, #16
 8005ae4:	e7b0      	b.n	8005a48 <_printf_i+0xfc>
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	f043 0320 	orr.w	r3, r3, #32
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	2378      	movs	r3, #120	; 0x78
 8005af0:	4828      	ldr	r0, [pc, #160]	; (8005b94 <_printf_i+0x248>)
 8005af2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005af6:	e7e3      	b.n	8005ac0 <_printf_i+0x174>
 8005af8:	0659      	lsls	r1, r3, #25
 8005afa:	bf48      	it	mi
 8005afc:	b2b6      	uxthmi	r6, r6
 8005afe:	e7e6      	b.n	8005ace <_printf_i+0x182>
 8005b00:	4615      	mov	r5, r2
 8005b02:	e7bb      	b.n	8005a7c <_printf_i+0x130>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	6826      	ldr	r6, [r4, #0]
 8005b08:	6961      	ldr	r1, [r4, #20]
 8005b0a:	1d18      	adds	r0, r3, #4
 8005b0c:	6028      	str	r0, [r5, #0]
 8005b0e:	0635      	lsls	r5, r6, #24
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	d501      	bpl.n	8005b18 <_printf_i+0x1cc>
 8005b14:	6019      	str	r1, [r3, #0]
 8005b16:	e002      	b.n	8005b1e <_printf_i+0x1d2>
 8005b18:	0670      	lsls	r0, r6, #25
 8005b1a:	d5fb      	bpl.n	8005b14 <_printf_i+0x1c8>
 8005b1c:	8019      	strh	r1, [r3, #0]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	6123      	str	r3, [r4, #16]
 8005b22:	4615      	mov	r5, r2
 8005b24:	e7ba      	b.n	8005a9c <_printf_i+0x150>
 8005b26:	682b      	ldr	r3, [r5, #0]
 8005b28:	1d1a      	adds	r2, r3, #4
 8005b2a:	602a      	str	r2, [r5, #0]
 8005b2c:	681d      	ldr	r5, [r3, #0]
 8005b2e:	6862      	ldr	r2, [r4, #4]
 8005b30:	2100      	movs	r1, #0
 8005b32:	4628      	mov	r0, r5
 8005b34:	f7fa fb6c 	bl	8000210 <memchr>
 8005b38:	b108      	cbz	r0, 8005b3e <_printf_i+0x1f2>
 8005b3a:	1b40      	subs	r0, r0, r5
 8005b3c:	6060      	str	r0, [r4, #4]
 8005b3e:	6863      	ldr	r3, [r4, #4]
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	2300      	movs	r3, #0
 8005b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b48:	e7a8      	b.n	8005a9c <_printf_i+0x150>
 8005b4a:	6923      	ldr	r3, [r4, #16]
 8005b4c:	462a      	mov	r2, r5
 8005b4e:	4649      	mov	r1, r9
 8005b50:	4640      	mov	r0, r8
 8005b52:	47d0      	blx	sl
 8005b54:	3001      	adds	r0, #1
 8005b56:	d0ab      	beq.n	8005ab0 <_printf_i+0x164>
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	079b      	lsls	r3, r3, #30
 8005b5c:	d413      	bmi.n	8005b86 <_printf_i+0x23a>
 8005b5e:	68e0      	ldr	r0, [r4, #12]
 8005b60:	9b03      	ldr	r3, [sp, #12]
 8005b62:	4298      	cmp	r0, r3
 8005b64:	bfb8      	it	lt
 8005b66:	4618      	movlt	r0, r3
 8005b68:	e7a4      	b.n	8005ab4 <_printf_i+0x168>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	4649      	mov	r1, r9
 8005b70:	4640      	mov	r0, r8
 8005b72:	47d0      	blx	sl
 8005b74:	3001      	adds	r0, #1
 8005b76:	d09b      	beq.n	8005ab0 <_printf_i+0x164>
 8005b78:	3501      	adds	r5, #1
 8005b7a:	68e3      	ldr	r3, [r4, #12]
 8005b7c:	9903      	ldr	r1, [sp, #12]
 8005b7e:	1a5b      	subs	r3, r3, r1
 8005b80:	42ab      	cmp	r3, r5
 8005b82:	dcf2      	bgt.n	8005b6a <_printf_i+0x21e>
 8005b84:	e7eb      	b.n	8005b5e <_printf_i+0x212>
 8005b86:	2500      	movs	r5, #0
 8005b88:	f104 0619 	add.w	r6, r4, #25
 8005b8c:	e7f5      	b.n	8005b7a <_printf_i+0x22e>
 8005b8e:	bf00      	nop
 8005b90:	0800cb10 	.word	0x0800cb10
 8005b94:	0800cb21 	.word	0x0800cb21

08005b98 <_scanf_float>:
 8005b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9c:	b087      	sub	sp, #28
 8005b9e:	4617      	mov	r7, r2
 8005ba0:	9303      	str	r3, [sp, #12]
 8005ba2:	688b      	ldr	r3, [r1, #8]
 8005ba4:	1e5a      	subs	r2, r3, #1
 8005ba6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005baa:	bf83      	ittte	hi
 8005bac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005bb0:	195b      	addhi	r3, r3, r5
 8005bb2:	9302      	strhi	r3, [sp, #8]
 8005bb4:	2300      	movls	r3, #0
 8005bb6:	bf86      	itte	hi
 8005bb8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005bbc:	608b      	strhi	r3, [r1, #8]
 8005bbe:	9302      	strls	r3, [sp, #8]
 8005bc0:	680b      	ldr	r3, [r1, #0]
 8005bc2:	468b      	mov	fp, r1
 8005bc4:	2500      	movs	r5, #0
 8005bc6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005bca:	f84b 3b1c 	str.w	r3, [fp], #28
 8005bce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005bd2:	4680      	mov	r8, r0
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	465e      	mov	r6, fp
 8005bd8:	46aa      	mov	sl, r5
 8005bda:	46a9      	mov	r9, r5
 8005bdc:	9501      	str	r5, [sp, #4]
 8005bde:	68a2      	ldr	r2, [r4, #8]
 8005be0:	b152      	cbz	r2, 8005bf8 <_scanf_float+0x60>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b4e      	cmp	r3, #78	; 0x4e
 8005be8:	d864      	bhi.n	8005cb4 <_scanf_float+0x11c>
 8005bea:	2b40      	cmp	r3, #64	; 0x40
 8005bec:	d83c      	bhi.n	8005c68 <_scanf_float+0xd0>
 8005bee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005bf2:	b2c8      	uxtb	r0, r1
 8005bf4:	280e      	cmp	r0, #14
 8005bf6:	d93a      	bls.n	8005c6e <_scanf_float+0xd6>
 8005bf8:	f1b9 0f00 	cmp.w	r9, #0
 8005bfc:	d003      	beq.n	8005c06 <_scanf_float+0x6e>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c0a:	f1ba 0f01 	cmp.w	sl, #1
 8005c0e:	f200 8113 	bhi.w	8005e38 <_scanf_float+0x2a0>
 8005c12:	455e      	cmp	r6, fp
 8005c14:	f200 8105 	bhi.w	8005e22 <_scanf_float+0x28a>
 8005c18:	2501      	movs	r5, #1
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	b007      	add	sp, #28
 8005c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005c26:	2a0d      	cmp	r2, #13
 8005c28:	d8e6      	bhi.n	8005bf8 <_scanf_float+0x60>
 8005c2a:	a101      	add	r1, pc, #4	; (adr r1, 8005c30 <_scanf_float+0x98>)
 8005c2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c30:	08005d6f 	.word	0x08005d6f
 8005c34:	08005bf9 	.word	0x08005bf9
 8005c38:	08005bf9 	.word	0x08005bf9
 8005c3c:	08005bf9 	.word	0x08005bf9
 8005c40:	08005dcf 	.word	0x08005dcf
 8005c44:	08005da7 	.word	0x08005da7
 8005c48:	08005bf9 	.word	0x08005bf9
 8005c4c:	08005bf9 	.word	0x08005bf9
 8005c50:	08005d7d 	.word	0x08005d7d
 8005c54:	08005bf9 	.word	0x08005bf9
 8005c58:	08005bf9 	.word	0x08005bf9
 8005c5c:	08005bf9 	.word	0x08005bf9
 8005c60:	08005bf9 	.word	0x08005bf9
 8005c64:	08005d35 	.word	0x08005d35
 8005c68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005c6c:	e7db      	b.n	8005c26 <_scanf_float+0x8e>
 8005c6e:	290e      	cmp	r1, #14
 8005c70:	d8c2      	bhi.n	8005bf8 <_scanf_float+0x60>
 8005c72:	a001      	add	r0, pc, #4	; (adr r0, 8005c78 <_scanf_float+0xe0>)
 8005c74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005c78:	08005d27 	.word	0x08005d27
 8005c7c:	08005bf9 	.word	0x08005bf9
 8005c80:	08005d27 	.word	0x08005d27
 8005c84:	08005dbb 	.word	0x08005dbb
 8005c88:	08005bf9 	.word	0x08005bf9
 8005c8c:	08005cd5 	.word	0x08005cd5
 8005c90:	08005d11 	.word	0x08005d11
 8005c94:	08005d11 	.word	0x08005d11
 8005c98:	08005d11 	.word	0x08005d11
 8005c9c:	08005d11 	.word	0x08005d11
 8005ca0:	08005d11 	.word	0x08005d11
 8005ca4:	08005d11 	.word	0x08005d11
 8005ca8:	08005d11 	.word	0x08005d11
 8005cac:	08005d11 	.word	0x08005d11
 8005cb0:	08005d11 	.word	0x08005d11
 8005cb4:	2b6e      	cmp	r3, #110	; 0x6e
 8005cb6:	d809      	bhi.n	8005ccc <_scanf_float+0x134>
 8005cb8:	2b60      	cmp	r3, #96	; 0x60
 8005cba:	d8b2      	bhi.n	8005c22 <_scanf_float+0x8a>
 8005cbc:	2b54      	cmp	r3, #84	; 0x54
 8005cbe:	d077      	beq.n	8005db0 <_scanf_float+0x218>
 8005cc0:	2b59      	cmp	r3, #89	; 0x59
 8005cc2:	d199      	bne.n	8005bf8 <_scanf_float+0x60>
 8005cc4:	2d07      	cmp	r5, #7
 8005cc6:	d197      	bne.n	8005bf8 <_scanf_float+0x60>
 8005cc8:	2508      	movs	r5, #8
 8005cca:	e029      	b.n	8005d20 <_scanf_float+0x188>
 8005ccc:	2b74      	cmp	r3, #116	; 0x74
 8005cce:	d06f      	beq.n	8005db0 <_scanf_float+0x218>
 8005cd0:	2b79      	cmp	r3, #121	; 0x79
 8005cd2:	e7f6      	b.n	8005cc2 <_scanf_float+0x12a>
 8005cd4:	6821      	ldr	r1, [r4, #0]
 8005cd6:	05c8      	lsls	r0, r1, #23
 8005cd8:	d51a      	bpl.n	8005d10 <_scanf_float+0x178>
 8005cda:	9b02      	ldr	r3, [sp, #8]
 8005cdc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005ce0:	6021      	str	r1, [r4, #0]
 8005ce2:	f109 0901 	add.w	r9, r9, #1
 8005ce6:	b11b      	cbz	r3, 8005cf0 <_scanf_float+0x158>
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	3201      	adds	r2, #1
 8005cec:	9302      	str	r3, [sp, #8]
 8005cee:	60a2      	str	r2, [r4, #8]
 8005cf0:	68a3      	ldr	r3, [r4, #8]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	60a3      	str	r3, [r4, #8]
 8005cf6:	6923      	ldr	r3, [r4, #16]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	6123      	str	r3, [r4, #16]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	607b      	str	r3, [r7, #4]
 8005d04:	f340 8084 	ble.w	8005e10 <_scanf_float+0x278>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	e766      	b.n	8005bde <_scanf_float+0x46>
 8005d10:	eb1a 0f05 	cmn.w	sl, r5
 8005d14:	f47f af70 	bne.w	8005bf8 <_scanf_float+0x60>
 8005d18:	6822      	ldr	r2, [r4, #0]
 8005d1a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005d1e:	6022      	str	r2, [r4, #0]
 8005d20:	f806 3b01 	strb.w	r3, [r6], #1
 8005d24:	e7e4      	b.n	8005cf0 <_scanf_float+0x158>
 8005d26:	6822      	ldr	r2, [r4, #0]
 8005d28:	0610      	lsls	r0, r2, #24
 8005d2a:	f57f af65 	bpl.w	8005bf8 <_scanf_float+0x60>
 8005d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d32:	e7f4      	b.n	8005d1e <_scanf_float+0x186>
 8005d34:	f1ba 0f00 	cmp.w	sl, #0
 8005d38:	d10e      	bne.n	8005d58 <_scanf_float+0x1c0>
 8005d3a:	f1b9 0f00 	cmp.w	r9, #0
 8005d3e:	d10e      	bne.n	8005d5e <_scanf_float+0x1c6>
 8005d40:	6822      	ldr	r2, [r4, #0]
 8005d42:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005d46:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005d4a:	d108      	bne.n	8005d5e <_scanf_float+0x1c6>
 8005d4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d50:	6022      	str	r2, [r4, #0]
 8005d52:	f04f 0a01 	mov.w	sl, #1
 8005d56:	e7e3      	b.n	8005d20 <_scanf_float+0x188>
 8005d58:	f1ba 0f02 	cmp.w	sl, #2
 8005d5c:	d055      	beq.n	8005e0a <_scanf_float+0x272>
 8005d5e:	2d01      	cmp	r5, #1
 8005d60:	d002      	beq.n	8005d68 <_scanf_float+0x1d0>
 8005d62:	2d04      	cmp	r5, #4
 8005d64:	f47f af48 	bne.w	8005bf8 <_scanf_float+0x60>
 8005d68:	3501      	adds	r5, #1
 8005d6a:	b2ed      	uxtb	r5, r5
 8005d6c:	e7d8      	b.n	8005d20 <_scanf_float+0x188>
 8005d6e:	f1ba 0f01 	cmp.w	sl, #1
 8005d72:	f47f af41 	bne.w	8005bf8 <_scanf_float+0x60>
 8005d76:	f04f 0a02 	mov.w	sl, #2
 8005d7a:	e7d1      	b.n	8005d20 <_scanf_float+0x188>
 8005d7c:	b97d      	cbnz	r5, 8005d9e <_scanf_float+0x206>
 8005d7e:	f1b9 0f00 	cmp.w	r9, #0
 8005d82:	f47f af3c 	bne.w	8005bfe <_scanf_float+0x66>
 8005d86:	6822      	ldr	r2, [r4, #0]
 8005d88:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005d8c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005d90:	f47f af39 	bne.w	8005c06 <_scanf_float+0x6e>
 8005d94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d98:	6022      	str	r2, [r4, #0]
 8005d9a:	2501      	movs	r5, #1
 8005d9c:	e7c0      	b.n	8005d20 <_scanf_float+0x188>
 8005d9e:	2d03      	cmp	r5, #3
 8005da0:	d0e2      	beq.n	8005d68 <_scanf_float+0x1d0>
 8005da2:	2d05      	cmp	r5, #5
 8005da4:	e7de      	b.n	8005d64 <_scanf_float+0x1cc>
 8005da6:	2d02      	cmp	r5, #2
 8005da8:	f47f af26 	bne.w	8005bf8 <_scanf_float+0x60>
 8005dac:	2503      	movs	r5, #3
 8005dae:	e7b7      	b.n	8005d20 <_scanf_float+0x188>
 8005db0:	2d06      	cmp	r5, #6
 8005db2:	f47f af21 	bne.w	8005bf8 <_scanf_float+0x60>
 8005db6:	2507      	movs	r5, #7
 8005db8:	e7b2      	b.n	8005d20 <_scanf_float+0x188>
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	0591      	lsls	r1, r2, #22
 8005dbe:	f57f af1b 	bpl.w	8005bf8 <_scanf_float+0x60>
 8005dc2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005dc6:	6022      	str	r2, [r4, #0]
 8005dc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005dcc:	e7a8      	b.n	8005d20 <_scanf_float+0x188>
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005dd4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005dd8:	d006      	beq.n	8005de8 <_scanf_float+0x250>
 8005dda:	0550      	lsls	r0, r2, #21
 8005ddc:	f57f af0c 	bpl.w	8005bf8 <_scanf_float+0x60>
 8005de0:	f1b9 0f00 	cmp.w	r9, #0
 8005de4:	f43f af0f 	beq.w	8005c06 <_scanf_float+0x6e>
 8005de8:	0591      	lsls	r1, r2, #22
 8005dea:	bf58      	it	pl
 8005dec:	9901      	ldrpl	r1, [sp, #4]
 8005dee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005df2:	bf58      	it	pl
 8005df4:	eba9 0101 	subpl.w	r1, r9, r1
 8005df8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005dfc:	bf58      	it	pl
 8005dfe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005e02:	6022      	str	r2, [r4, #0]
 8005e04:	f04f 0900 	mov.w	r9, #0
 8005e08:	e78a      	b.n	8005d20 <_scanf_float+0x188>
 8005e0a:	f04f 0a03 	mov.w	sl, #3
 8005e0e:	e787      	b.n	8005d20 <_scanf_float+0x188>
 8005e10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005e14:	4639      	mov	r1, r7
 8005e16:	4640      	mov	r0, r8
 8005e18:	4798      	blx	r3
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	f43f aedf 	beq.w	8005bde <_scanf_float+0x46>
 8005e20:	e6ea      	b.n	8005bf8 <_scanf_float+0x60>
 8005e22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e2a:	463a      	mov	r2, r7
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	4798      	blx	r3
 8005e30:	6923      	ldr	r3, [r4, #16]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	6123      	str	r3, [r4, #16]
 8005e36:	e6ec      	b.n	8005c12 <_scanf_float+0x7a>
 8005e38:	1e6b      	subs	r3, r5, #1
 8005e3a:	2b06      	cmp	r3, #6
 8005e3c:	d825      	bhi.n	8005e8a <_scanf_float+0x2f2>
 8005e3e:	2d02      	cmp	r5, #2
 8005e40:	d836      	bhi.n	8005eb0 <_scanf_float+0x318>
 8005e42:	455e      	cmp	r6, fp
 8005e44:	f67f aee8 	bls.w	8005c18 <_scanf_float+0x80>
 8005e48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e50:	463a      	mov	r2, r7
 8005e52:	4640      	mov	r0, r8
 8005e54:	4798      	blx	r3
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	6123      	str	r3, [r4, #16]
 8005e5c:	e7f1      	b.n	8005e42 <_scanf_float+0x2aa>
 8005e5e:	9802      	ldr	r0, [sp, #8]
 8005e60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e64:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005e68:	9002      	str	r0, [sp, #8]
 8005e6a:	463a      	mov	r2, r7
 8005e6c:	4640      	mov	r0, r8
 8005e6e:	4798      	blx	r3
 8005e70:	6923      	ldr	r3, [r4, #16]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	6123      	str	r3, [r4, #16]
 8005e76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e7a:	fa5f fa8a 	uxtb.w	sl, sl
 8005e7e:	f1ba 0f02 	cmp.w	sl, #2
 8005e82:	d1ec      	bne.n	8005e5e <_scanf_float+0x2c6>
 8005e84:	3d03      	subs	r5, #3
 8005e86:	b2ed      	uxtb	r5, r5
 8005e88:	1b76      	subs	r6, r6, r5
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	05da      	lsls	r2, r3, #23
 8005e8e:	d52f      	bpl.n	8005ef0 <_scanf_float+0x358>
 8005e90:	055b      	lsls	r3, r3, #21
 8005e92:	d510      	bpl.n	8005eb6 <_scanf_float+0x31e>
 8005e94:	455e      	cmp	r6, fp
 8005e96:	f67f aebf 	bls.w	8005c18 <_scanf_float+0x80>
 8005e9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ea2:	463a      	mov	r2, r7
 8005ea4:	4640      	mov	r0, r8
 8005ea6:	4798      	blx	r3
 8005ea8:	6923      	ldr	r3, [r4, #16]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	6123      	str	r3, [r4, #16]
 8005eae:	e7f1      	b.n	8005e94 <_scanf_float+0x2fc>
 8005eb0:	46aa      	mov	sl, r5
 8005eb2:	9602      	str	r6, [sp, #8]
 8005eb4:	e7df      	b.n	8005e76 <_scanf_float+0x2de>
 8005eb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005eba:	6923      	ldr	r3, [r4, #16]
 8005ebc:	2965      	cmp	r1, #101	; 0x65
 8005ebe:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ec2:	f106 35ff 	add.w	r5, r6, #4294967295
 8005ec6:	6123      	str	r3, [r4, #16]
 8005ec8:	d00c      	beq.n	8005ee4 <_scanf_float+0x34c>
 8005eca:	2945      	cmp	r1, #69	; 0x45
 8005ecc:	d00a      	beq.n	8005ee4 <_scanf_float+0x34c>
 8005ece:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ed2:	463a      	mov	r2, r7
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	4798      	blx	r3
 8005ed8:	6923      	ldr	r3, [r4, #16]
 8005eda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	1eb5      	subs	r5, r6, #2
 8005ee2:	6123      	str	r3, [r4, #16]
 8005ee4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ee8:	463a      	mov	r2, r7
 8005eea:	4640      	mov	r0, r8
 8005eec:	4798      	blx	r3
 8005eee:	462e      	mov	r6, r5
 8005ef0:	6825      	ldr	r5, [r4, #0]
 8005ef2:	f015 0510 	ands.w	r5, r5, #16
 8005ef6:	d159      	bne.n	8005fac <_scanf_float+0x414>
 8005ef8:	7035      	strb	r5, [r6, #0]
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f04:	d11b      	bne.n	8005f3e <_scanf_float+0x3a6>
 8005f06:	9b01      	ldr	r3, [sp, #4]
 8005f08:	454b      	cmp	r3, r9
 8005f0a:	eba3 0209 	sub.w	r2, r3, r9
 8005f0e:	d123      	bne.n	8005f58 <_scanf_float+0x3c0>
 8005f10:	2200      	movs	r2, #0
 8005f12:	4659      	mov	r1, fp
 8005f14:	4640      	mov	r0, r8
 8005f16:	f000 ff09 	bl	8006d2c <_strtod_r>
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	9b03      	ldr	r3, [sp, #12]
 8005f1e:	f012 0f02 	tst.w	r2, #2
 8005f22:	ec57 6b10 	vmov	r6, r7, d0
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	d021      	beq.n	8005f6e <_scanf_float+0x3d6>
 8005f2a:	9903      	ldr	r1, [sp, #12]
 8005f2c:	1d1a      	adds	r2, r3, #4
 8005f2e:	600a      	str	r2, [r1, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	e9c3 6700 	strd	r6, r7, [r3]
 8005f36:	68e3      	ldr	r3, [r4, #12]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	60e3      	str	r3, [r4, #12]
 8005f3c:	e66d      	b.n	8005c1a <_scanf_float+0x82>
 8005f3e:	9b04      	ldr	r3, [sp, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0e5      	beq.n	8005f10 <_scanf_float+0x378>
 8005f44:	9905      	ldr	r1, [sp, #20]
 8005f46:	230a      	movs	r3, #10
 8005f48:	462a      	mov	r2, r5
 8005f4a:	3101      	adds	r1, #1
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	f000 ff75 	bl	8006e3c <_strtol_r>
 8005f52:	9b04      	ldr	r3, [sp, #16]
 8005f54:	9e05      	ldr	r6, [sp, #20]
 8005f56:	1ac2      	subs	r2, r0, r3
 8005f58:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005f5c:	429e      	cmp	r6, r3
 8005f5e:	bf28      	it	cs
 8005f60:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005f64:	4912      	ldr	r1, [pc, #72]	; (8005fb0 <_scanf_float+0x418>)
 8005f66:	4630      	mov	r0, r6
 8005f68:	f000 f82c 	bl	8005fc4 <siprintf>
 8005f6c:	e7d0      	b.n	8005f10 <_scanf_float+0x378>
 8005f6e:	9903      	ldr	r1, [sp, #12]
 8005f70:	f012 0f04 	tst.w	r2, #4
 8005f74:	f103 0204 	add.w	r2, r3, #4
 8005f78:	600a      	str	r2, [r1, #0]
 8005f7a:	d1d9      	bne.n	8005f30 <_scanf_float+0x398>
 8005f7c:	f8d3 8000 	ldr.w	r8, [r3]
 8005f80:	ee10 2a10 	vmov	r2, s0
 8005f84:	ee10 0a10 	vmov	r0, s0
 8005f88:	463b      	mov	r3, r7
 8005f8a:	4639      	mov	r1, r7
 8005f8c:	f7fa fde6 	bl	8000b5c <__aeabi_dcmpun>
 8005f90:	b128      	cbz	r0, 8005f9e <_scanf_float+0x406>
 8005f92:	4808      	ldr	r0, [pc, #32]	; (8005fb4 <_scanf_float+0x41c>)
 8005f94:	f000 f810 	bl	8005fb8 <nanf>
 8005f98:	ed88 0a00 	vstr	s0, [r8]
 8005f9c:	e7cb      	b.n	8005f36 <_scanf_float+0x39e>
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	f7fa fe39 	bl	8000c18 <__aeabi_d2f>
 8005fa6:	f8c8 0000 	str.w	r0, [r8]
 8005faa:	e7c4      	b.n	8005f36 <_scanf_float+0x39e>
 8005fac:	2500      	movs	r5, #0
 8005fae:	e634      	b.n	8005c1a <_scanf_float+0x82>
 8005fb0:	0800cb32 	.word	0x0800cb32
 8005fb4:	0800cf53 	.word	0x0800cf53

08005fb8 <nanf>:
 8005fb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005fc0 <nanf+0x8>
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	7fc00000 	.word	0x7fc00000

08005fc4 <siprintf>:
 8005fc4:	b40e      	push	{r1, r2, r3}
 8005fc6:	b500      	push	{lr}
 8005fc8:	b09c      	sub	sp, #112	; 0x70
 8005fca:	ab1d      	add	r3, sp, #116	; 0x74
 8005fcc:	9002      	str	r0, [sp, #8]
 8005fce:	9006      	str	r0, [sp, #24]
 8005fd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fd4:	4809      	ldr	r0, [pc, #36]	; (8005ffc <siprintf+0x38>)
 8005fd6:	9107      	str	r1, [sp, #28]
 8005fd8:	9104      	str	r1, [sp, #16]
 8005fda:	4909      	ldr	r1, [pc, #36]	; (8006000 <siprintf+0x3c>)
 8005fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fe0:	9105      	str	r1, [sp, #20]
 8005fe2:	6800      	ldr	r0, [r0, #0]
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	a902      	add	r1, sp, #8
 8005fe8:	f002 ff8a 	bl	8008f00 <_svfiprintf_r>
 8005fec:	9b02      	ldr	r3, [sp, #8]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	b01c      	add	sp, #112	; 0x70
 8005ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ff8:	b003      	add	sp, #12
 8005ffa:	4770      	bx	lr
 8005ffc:	20000010 	.word	0x20000010
 8006000:	ffff0208 	.word	0xffff0208

08006004 <siscanf>:
 8006004:	b40e      	push	{r1, r2, r3}
 8006006:	b510      	push	{r4, lr}
 8006008:	b09f      	sub	sp, #124	; 0x7c
 800600a:	ac21      	add	r4, sp, #132	; 0x84
 800600c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006010:	f854 2b04 	ldr.w	r2, [r4], #4
 8006014:	9201      	str	r2, [sp, #4]
 8006016:	f8ad 101c 	strh.w	r1, [sp, #28]
 800601a:	9004      	str	r0, [sp, #16]
 800601c:	9008      	str	r0, [sp, #32]
 800601e:	f7fa f8e9 	bl	80001f4 <strlen>
 8006022:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <siscanf+0x50>)
 8006024:	9005      	str	r0, [sp, #20]
 8006026:	9009      	str	r0, [sp, #36]	; 0x24
 8006028:	930d      	str	r3, [sp, #52]	; 0x34
 800602a:	480b      	ldr	r0, [pc, #44]	; (8006058 <siscanf+0x54>)
 800602c:	9a01      	ldr	r2, [sp, #4]
 800602e:	6800      	ldr	r0, [r0, #0]
 8006030:	9403      	str	r4, [sp, #12]
 8006032:	2300      	movs	r3, #0
 8006034:	9311      	str	r3, [sp, #68]	; 0x44
 8006036:	9316      	str	r3, [sp, #88]	; 0x58
 8006038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800603c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006040:	a904      	add	r1, sp, #16
 8006042:	4623      	mov	r3, r4
 8006044:	f003 f8b6 	bl	80091b4 <__ssvfiscanf_r>
 8006048:	b01f      	add	sp, #124	; 0x7c
 800604a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800604e:	b003      	add	sp, #12
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	0800607f 	.word	0x0800607f
 8006058:	20000010 	.word	0x20000010

0800605c <__sread>:
 800605c:	b510      	push	{r4, lr}
 800605e:	460c      	mov	r4, r1
 8006060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006064:	f003 fb70 	bl	8009748 <_read_r>
 8006068:	2800      	cmp	r0, #0
 800606a:	bfab      	itete	ge
 800606c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800606e:	89a3      	ldrhlt	r3, [r4, #12]
 8006070:	181b      	addge	r3, r3, r0
 8006072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006076:	bfac      	ite	ge
 8006078:	6563      	strge	r3, [r4, #84]	; 0x54
 800607a:	81a3      	strhlt	r3, [r4, #12]
 800607c:	bd10      	pop	{r4, pc}

0800607e <__seofread>:
 800607e:	2000      	movs	r0, #0
 8006080:	4770      	bx	lr

08006082 <__swrite>:
 8006082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006086:	461f      	mov	r7, r3
 8006088:	898b      	ldrh	r3, [r1, #12]
 800608a:	05db      	lsls	r3, r3, #23
 800608c:	4605      	mov	r5, r0
 800608e:	460c      	mov	r4, r1
 8006090:	4616      	mov	r6, r2
 8006092:	d505      	bpl.n	80060a0 <__swrite+0x1e>
 8006094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006098:	2302      	movs	r3, #2
 800609a:	2200      	movs	r2, #0
 800609c:	f002 f8e2 	bl	8008264 <_lseek_r>
 80060a0:	89a3      	ldrh	r3, [r4, #12]
 80060a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060aa:	81a3      	strh	r3, [r4, #12]
 80060ac:	4632      	mov	r2, r6
 80060ae:	463b      	mov	r3, r7
 80060b0:	4628      	mov	r0, r5
 80060b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060b6:	f000 bec3 	b.w	8006e40 <_write_r>

080060ba <__sseek>:
 80060ba:	b510      	push	{r4, lr}
 80060bc:	460c      	mov	r4, r1
 80060be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c2:	f002 f8cf 	bl	8008264 <_lseek_r>
 80060c6:	1c43      	adds	r3, r0, #1
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	bf15      	itete	ne
 80060cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80060ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060d6:	81a3      	strheq	r3, [r4, #12]
 80060d8:	bf18      	it	ne
 80060da:	81a3      	strhne	r3, [r4, #12]
 80060dc:	bd10      	pop	{r4, pc}

080060de <__sclose>:
 80060de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e2:	f000 bebf 	b.w	8006e64 <_close_r>

080060e6 <sulp>:
 80060e6:	b570      	push	{r4, r5, r6, lr}
 80060e8:	4604      	mov	r4, r0
 80060ea:	460d      	mov	r5, r1
 80060ec:	ec45 4b10 	vmov	d0, r4, r5
 80060f0:	4616      	mov	r6, r2
 80060f2:	f002 fc63 	bl	80089bc <__ulp>
 80060f6:	ec51 0b10 	vmov	r0, r1, d0
 80060fa:	b17e      	cbz	r6, 800611c <sulp+0x36>
 80060fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006100:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006104:	2b00      	cmp	r3, #0
 8006106:	dd09      	ble.n	800611c <sulp+0x36>
 8006108:	051b      	lsls	r3, r3, #20
 800610a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800610e:	2400      	movs	r4, #0
 8006110:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006114:	4622      	mov	r2, r4
 8006116:	462b      	mov	r3, r5
 8006118:	f7fa fa86 	bl	8000628 <__aeabi_dmul>
 800611c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006120 <_strtod_l>:
 8006120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006124:	ed2d 8b02 	vpush	{d8}
 8006128:	b09d      	sub	sp, #116	; 0x74
 800612a:	461f      	mov	r7, r3
 800612c:	2300      	movs	r3, #0
 800612e:	9318      	str	r3, [sp, #96]	; 0x60
 8006130:	4ba2      	ldr	r3, [pc, #648]	; (80063bc <_strtod_l+0x29c>)
 8006132:	9213      	str	r2, [sp, #76]	; 0x4c
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	9305      	str	r3, [sp, #20]
 8006138:	4604      	mov	r4, r0
 800613a:	4618      	mov	r0, r3
 800613c:	4688      	mov	r8, r1
 800613e:	f7fa f859 	bl	80001f4 <strlen>
 8006142:	f04f 0a00 	mov.w	sl, #0
 8006146:	4605      	mov	r5, r0
 8006148:	f04f 0b00 	mov.w	fp, #0
 800614c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006152:	781a      	ldrb	r2, [r3, #0]
 8006154:	2a2b      	cmp	r2, #43	; 0x2b
 8006156:	d04e      	beq.n	80061f6 <_strtod_l+0xd6>
 8006158:	d83b      	bhi.n	80061d2 <_strtod_l+0xb2>
 800615a:	2a0d      	cmp	r2, #13
 800615c:	d834      	bhi.n	80061c8 <_strtod_l+0xa8>
 800615e:	2a08      	cmp	r2, #8
 8006160:	d834      	bhi.n	80061cc <_strtod_l+0xac>
 8006162:	2a00      	cmp	r2, #0
 8006164:	d03e      	beq.n	80061e4 <_strtod_l+0xc4>
 8006166:	2300      	movs	r3, #0
 8006168:	930a      	str	r3, [sp, #40]	; 0x28
 800616a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800616c:	7833      	ldrb	r3, [r6, #0]
 800616e:	2b30      	cmp	r3, #48	; 0x30
 8006170:	f040 80b0 	bne.w	80062d4 <_strtod_l+0x1b4>
 8006174:	7873      	ldrb	r3, [r6, #1]
 8006176:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800617a:	2b58      	cmp	r3, #88	; 0x58
 800617c:	d168      	bne.n	8006250 <_strtod_l+0x130>
 800617e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	ab18      	add	r3, sp, #96	; 0x60
 8006184:	9702      	str	r7, [sp, #8]
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	4a8d      	ldr	r2, [pc, #564]	; (80063c0 <_strtod_l+0x2a0>)
 800618a:	ab19      	add	r3, sp, #100	; 0x64
 800618c:	a917      	add	r1, sp, #92	; 0x5c
 800618e:	4620      	mov	r0, r4
 8006190:	f001 fd5c 	bl	8007c4c <__gethex>
 8006194:	f010 0707 	ands.w	r7, r0, #7
 8006198:	4605      	mov	r5, r0
 800619a:	d005      	beq.n	80061a8 <_strtod_l+0x88>
 800619c:	2f06      	cmp	r7, #6
 800619e:	d12c      	bne.n	80061fa <_strtod_l+0xda>
 80061a0:	3601      	adds	r6, #1
 80061a2:	2300      	movs	r3, #0
 80061a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80061a6:	930a      	str	r3, [sp, #40]	; 0x28
 80061a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f040 8590 	bne.w	8006cd0 <_strtod_l+0xbb0>
 80061b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061b2:	b1eb      	cbz	r3, 80061f0 <_strtod_l+0xd0>
 80061b4:	4652      	mov	r2, sl
 80061b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80061ba:	ec43 2b10 	vmov	d0, r2, r3
 80061be:	b01d      	add	sp, #116	; 0x74
 80061c0:	ecbd 8b02 	vpop	{d8}
 80061c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c8:	2a20      	cmp	r2, #32
 80061ca:	d1cc      	bne.n	8006166 <_strtod_l+0x46>
 80061cc:	3301      	adds	r3, #1
 80061ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80061d0:	e7be      	b.n	8006150 <_strtod_l+0x30>
 80061d2:	2a2d      	cmp	r2, #45	; 0x2d
 80061d4:	d1c7      	bne.n	8006166 <_strtod_l+0x46>
 80061d6:	2201      	movs	r2, #1
 80061d8:	920a      	str	r2, [sp, #40]	; 0x28
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80061de:	785b      	ldrb	r3, [r3, #1]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1c2      	bne.n	800616a <_strtod_l+0x4a>
 80061e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f040 856e 	bne.w	8006ccc <_strtod_l+0xbac>
 80061f0:	4652      	mov	r2, sl
 80061f2:	465b      	mov	r3, fp
 80061f4:	e7e1      	b.n	80061ba <_strtod_l+0x9a>
 80061f6:	2200      	movs	r2, #0
 80061f8:	e7ee      	b.n	80061d8 <_strtod_l+0xb8>
 80061fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80061fc:	b13a      	cbz	r2, 800620e <_strtod_l+0xee>
 80061fe:	2135      	movs	r1, #53	; 0x35
 8006200:	a81a      	add	r0, sp, #104	; 0x68
 8006202:	f002 fce6 	bl	8008bd2 <__copybits>
 8006206:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006208:	4620      	mov	r0, r4
 800620a:	f002 f8a5 	bl	8008358 <_Bfree>
 800620e:	3f01      	subs	r7, #1
 8006210:	2f04      	cmp	r7, #4
 8006212:	d806      	bhi.n	8006222 <_strtod_l+0x102>
 8006214:	e8df f007 	tbb	[pc, r7]
 8006218:	1714030a 	.word	0x1714030a
 800621c:	0a          	.byte	0x0a
 800621d:	00          	.byte	0x00
 800621e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006222:	0728      	lsls	r0, r5, #28
 8006224:	d5c0      	bpl.n	80061a8 <_strtod_l+0x88>
 8006226:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800622a:	e7bd      	b.n	80061a8 <_strtod_l+0x88>
 800622c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006230:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006232:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006236:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800623a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800623e:	e7f0      	b.n	8006222 <_strtod_l+0x102>
 8006240:	f8df b180 	ldr.w	fp, [pc, #384]	; 80063c4 <_strtod_l+0x2a4>
 8006244:	e7ed      	b.n	8006222 <_strtod_l+0x102>
 8006246:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800624a:	f04f 3aff 	mov.w	sl, #4294967295
 800624e:	e7e8      	b.n	8006222 <_strtod_l+0x102>
 8006250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	9217      	str	r2, [sp, #92]	; 0x5c
 8006256:	785b      	ldrb	r3, [r3, #1]
 8006258:	2b30      	cmp	r3, #48	; 0x30
 800625a:	d0f9      	beq.n	8006250 <_strtod_l+0x130>
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0a3      	beq.n	80061a8 <_strtod_l+0x88>
 8006260:	2301      	movs	r3, #1
 8006262:	f04f 0900 	mov.w	r9, #0
 8006266:	9304      	str	r3, [sp, #16]
 8006268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800626a:	9308      	str	r3, [sp, #32]
 800626c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006270:	464f      	mov	r7, r9
 8006272:	220a      	movs	r2, #10
 8006274:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006276:	7806      	ldrb	r6, [r0, #0]
 8006278:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800627c:	b2d9      	uxtb	r1, r3
 800627e:	2909      	cmp	r1, #9
 8006280:	d92a      	bls.n	80062d8 <_strtod_l+0x1b8>
 8006282:	9905      	ldr	r1, [sp, #20]
 8006284:	462a      	mov	r2, r5
 8006286:	f003 fac3 	bl	8009810 <strncmp>
 800628a:	b398      	cbz	r0, 80062f4 <_strtod_l+0x1d4>
 800628c:	2000      	movs	r0, #0
 800628e:	4632      	mov	r2, r6
 8006290:	463d      	mov	r5, r7
 8006292:	9005      	str	r0, [sp, #20]
 8006294:	4603      	mov	r3, r0
 8006296:	2a65      	cmp	r2, #101	; 0x65
 8006298:	d001      	beq.n	800629e <_strtod_l+0x17e>
 800629a:	2a45      	cmp	r2, #69	; 0x45
 800629c:	d118      	bne.n	80062d0 <_strtod_l+0x1b0>
 800629e:	b91d      	cbnz	r5, 80062a8 <_strtod_l+0x188>
 80062a0:	9a04      	ldr	r2, [sp, #16]
 80062a2:	4302      	orrs	r2, r0
 80062a4:	d09e      	beq.n	80061e4 <_strtod_l+0xc4>
 80062a6:	2500      	movs	r5, #0
 80062a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80062ac:	f108 0201 	add.w	r2, r8, #1
 80062b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80062b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80062b6:	2a2b      	cmp	r2, #43	; 0x2b
 80062b8:	d075      	beq.n	80063a6 <_strtod_l+0x286>
 80062ba:	2a2d      	cmp	r2, #45	; 0x2d
 80062bc:	d07b      	beq.n	80063b6 <_strtod_l+0x296>
 80062be:	f04f 0c00 	mov.w	ip, #0
 80062c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80062c6:	2909      	cmp	r1, #9
 80062c8:	f240 8082 	bls.w	80063d0 <_strtod_l+0x2b0>
 80062cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80062d0:	2600      	movs	r6, #0
 80062d2:	e09d      	b.n	8006410 <_strtod_l+0x2f0>
 80062d4:	2300      	movs	r3, #0
 80062d6:	e7c4      	b.n	8006262 <_strtod_l+0x142>
 80062d8:	2f08      	cmp	r7, #8
 80062da:	bfd8      	it	le
 80062dc:	9907      	ldrle	r1, [sp, #28]
 80062de:	f100 0001 	add.w	r0, r0, #1
 80062e2:	bfda      	itte	le
 80062e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80062e8:	9307      	strle	r3, [sp, #28]
 80062ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 80062ee:	3701      	adds	r7, #1
 80062f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80062f2:	e7bf      	b.n	8006274 <_strtod_l+0x154>
 80062f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062f6:	195a      	adds	r2, r3, r5
 80062f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80062fa:	5d5a      	ldrb	r2, [r3, r5]
 80062fc:	2f00      	cmp	r7, #0
 80062fe:	d037      	beq.n	8006370 <_strtod_l+0x250>
 8006300:	9005      	str	r0, [sp, #20]
 8006302:	463d      	mov	r5, r7
 8006304:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006308:	2b09      	cmp	r3, #9
 800630a:	d912      	bls.n	8006332 <_strtod_l+0x212>
 800630c:	2301      	movs	r3, #1
 800630e:	e7c2      	b.n	8006296 <_strtod_l+0x176>
 8006310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	9217      	str	r2, [sp, #92]	; 0x5c
 8006316:	785a      	ldrb	r2, [r3, #1]
 8006318:	3001      	adds	r0, #1
 800631a:	2a30      	cmp	r2, #48	; 0x30
 800631c:	d0f8      	beq.n	8006310 <_strtod_l+0x1f0>
 800631e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006322:	2b08      	cmp	r3, #8
 8006324:	f200 84d9 	bhi.w	8006cda <_strtod_l+0xbba>
 8006328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800632a:	9005      	str	r0, [sp, #20]
 800632c:	2000      	movs	r0, #0
 800632e:	9308      	str	r3, [sp, #32]
 8006330:	4605      	mov	r5, r0
 8006332:	3a30      	subs	r2, #48	; 0x30
 8006334:	f100 0301 	add.w	r3, r0, #1
 8006338:	d014      	beq.n	8006364 <_strtod_l+0x244>
 800633a:	9905      	ldr	r1, [sp, #20]
 800633c:	4419      	add	r1, r3
 800633e:	9105      	str	r1, [sp, #20]
 8006340:	462b      	mov	r3, r5
 8006342:	eb00 0e05 	add.w	lr, r0, r5
 8006346:	210a      	movs	r1, #10
 8006348:	4573      	cmp	r3, lr
 800634a:	d113      	bne.n	8006374 <_strtod_l+0x254>
 800634c:	182b      	adds	r3, r5, r0
 800634e:	2b08      	cmp	r3, #8
 8006350:	f105 0501 	add.w	r5, r5, #1
 8006354:	4405      	add	r5, r0
 8006356:	dc1c      	bgt.n	8006392 <_strtod_l+0x272>
 8006358:	9907      	ldr	r1, [sp, #28]
 800635a:	230a      	movs	r3, #10
 800635c:	fb03 2301 	mla	r3, r3, r1, r2
 8006360:	9307      	str	r3, [sp, #28]
 8006362:	2300      	movs	r3, #0
 8006364:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006366:	1c51      	adds	r1, r2, #1
 8006368:	9117      	str	r1, [sp, #92]	; 0x5c
 800636a:	7852      	ldrb	r2, [r2, #1]
 800636c:	4618      	mov	r0, r3
 800636e:	e7c9      	b.n	8006304 <_strtod_l+0x1e4>
 8006370:	4638      	mov	r0, r7
 8006372:	e7d2      	b.n	800631a <_strtod_l+0x1fa>
 8006374:	2b08      	cmp	r3, #8
 8006376:	dc04      	bgt.n	8006382 <_strtod_l+0x262>
 8006378:	9e07      	ldr	r6, [sp, #28]
 800637a:	434e      	muls	r6, r1
 800637c:	9607      	str	r6, [sp, #28]
 800637e:	3301      	adds	r3, #1
 8006380:	e7e2      	b.n	8006348 <_strtod_l+0x228>
 8006382:	f103 0c01 	add.w	ip, r3, #1
 8006386:	f1bc 0f10 	cmp.w	ip, #16
 800638a:	bfd8      	it	le
 800638c:	fb01 f909 	mulle.w	r9, r1, r9
 8006390:	e7f5      	b.n	800637e <_strtod_l+0x25e>
 8006392:	2d10      	cmp	r5, #16
 8006394:	bfdc      	itt	le
 8006396:	230a      	movle	r3, #10
 8006398:	fb03 2909 	mlale	r9, r3, r9, r2
 800639c:	e7e1      	b.n	8006362 <_strtod_l+0x242>
 800639e:	2300      	movs	r3, #0
 80063a0:	9305      	str	r3, [sp, #20]
 80063a2:	2301      	movs	r3, #1
 80063a4:	e77c      	b.n	80062a0 <_strtod_l+0x180>
 80063a6:	f04f 0c00 	mov.w	ip, #0
 80063aa:	f108 0202 	add.w	r2, r8, #2
 80063ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80063b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80063b4:	e785      	b.n	80062c2 <_strtod_l+0x1a2>
 80063b6:	f04f 0c01 	mov.w	ip, #1
 80063ba:	e7f6      	b.n	80063aa <_strtod_l+0x28a>
 80063bc:	0800cd80 	.word	0x0800cd80
 80063c0:	0800cb38 	.word	0x0800cb38
 80063c4:	7ff00000 	.word	0x7ff00000
 80063c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80063ca:	1c51      	adds	r1, r2, #1
 80063cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80063ce:	7852      	ldrb	r2, [r2, #1]
 80063d0:	2a30      	cmp	r2, #48	; 0x30
 80063d2:	d0f9      	beq.n	80063c8 <_strtod_l+0x2a8>
 80063d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80063d8:	2908      	cmp	r1, #8
 80063da:	f63f af79 	bhi.w	80062d0 <_strtod_l+0x1b0>
 80063de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80063e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80063e4:	9206      	str	r2, [sp, #24]
 80063e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80063e8:	1c51      	adds	r1, r2, #1
 80063ea:	9117      	str	r1, [sp, #92]	; 0x5c
 80063ec:	7852      	ldrb	r2, [r2, #1]
 80063ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80063f2:	2e09      	cmp	r6, #9
 80063f4:	d937      	bls.n	8006466 <_strtod_l+0x346>
 80063f6:	9e06      	ldr	r6, [sp, #24]
 80063f8:	1b89      	subs	r1, r1, r6
 80063fa:	2908      	cmp	r1, #8
 80063fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006400:	dc02      	bgt.n	8006408 <_strtod_l+0x2e8>
 8006402:	4576      	cmp	r6, lr
 8006404:	bfa8      	it	ge
 8006406:	4676      	movge	r6, lr
 8006408:	f1bc 0f00 	cmp.w	ip, #0
 800640c:	d000      	beq.n	8006410 <_strtod_l+0x2f0>
 800640e:	4276      	negs	r6, r6
 8006410:	2d00      	cmp	r5, #0
 8006412:	d14d      	bne.n	80064b0 <_strtod_l+0x390>
 8006414:	9904      	ldr	r1, [sp, #16]
 8006416:	4301      	orrs	r1, r0
 8006418:	f47f aec6 	bne.w	80061a8 <_strtod_l+0x88>
 800641c:	2b00      	cmp	r3, #0
 800641e:	f47f aee1 	bne.w	80061e4 <_strtod_l+0xc4>
 8006422:	2a69      	cmp	r2, #105	; 0x69
 8006424:	d027      	beq.n	8006476 <_strtod_l+0x356>
 8006426:	dc24      	bgt.n	8006472 <_strtod_l+0x352>
 8006428:	2a49      	cmp	r2, #73	; 0x49
 800642a:	d024      	beq.n	8006476 <_strtod_l+0x356>
 800642c:	2a4e      	cmp	r2, #78	; 0x4e
 800642e:	f47f aed9 	bne.w	80061e4 <_strtod_l+0xc4>
 8006432:	499f      	ldr	r1, [pc, #636]	; (80066b0 <_strtod_l+0x590>)
 8006434:	a817      	add	r0, sp, #92	; 0x5c
 8006436:	f001 fe61 	bl	80080fc <__match>
 800643a:	2800      	cmp	r0, #0
 800643c:	f43f aed2 	beq.w	80061e4 <_strtod_l+0xc4>
 8006440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b28      	cmp	r3, #40	; 0x28
 8006446:	d12d      	bne.n	80064a4 <_strtod_l+0x384>
 8006448:	499a      	ldr	r1, [pc, #616]	; (80066b4 <_strtod_l+0x594>)
 800644a:	aa1a      	add	r2, sp, #104	; 0x68
 800644c:	a817      	add	r0, sp, #92	; 0x5c
 800644e:	f001 fe69 	bl	8008124 <__hexnan>
 8006452:	2805      	cmp	r0, #5
 8006454:	d126      	bne.n	80064a4 <_strtod_l+0x384>
 8006456:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006458:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800645c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006460:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006464:	e6a0      	b.n	80061a8 <_strtod_l+0x88>
 8006466:	210a      	movs	r1, #10
 8006468:	fb01 2e0e 	mla	lr, r1, lr, r2
 800646c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006470:	e7b9      	b.n	80063e6 <_strtod_l+0x2c6>
 8006472:	2a6e      	cmp	r2, #110	; 0x6e
 8006474:	e7db      	b.n	800642e <_strtod_l+0x30e>
 8006476:	4990      	ldr	r1, [pc, #576]	; (80066b8 <_strtod_l+0x598>)
 8006478:	a817      	add	r0, sp, #92	; 0x5c
 800647a:	f001 fe3f 	bl	80080fc <__match>
 800647e:	2800      	cmp	r0, #0
 8006480:	f43f aeb0 	beq.w	80061e4 <_strtod_l+0xc4>
 8006484:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006486:	498d      	ldr	r1, [pc, #564]	; (80066bc <_strtod_l+0x59c>)
 8006488:	3b01      	subs	r3, #1
 800648a:	a817      	add	r0, sp, #92	; 0x5c
 800648c:	9317      	str	r3, [sp, #92]	; 0x5c
 800648e:	f001 fe35 	bl	80080fc <__match>
 8006492:	b910      	cbnz	r0, 800649a <_strtod_l+0x37a>
 8006494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006496:	3301      	adds	r3, #1
 8006498:	9317      	str	r3, [sp, #92]	; 0x5c
 800649a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80066cc <_strtod_l+0x5ac>
 800649e:	f04f 0a00 	mov.w	sl, #0
 80064a2:	e681      	b.n	80061a8 <_strtod_l+0x88>
 80064a4:	4886      	ldr	r0, [pc, #536]	; (80066c0 <_strtod_l+0x5a0>)
 80064a6:	f003 f963 	bl	8009770 <nan>
 80064aa:	ec5b ab10 	vmov	sl, fp, d0
 80064ae:	e67b      	b.n	80061a8 <_strtod_l+0x88>
 80064b0:	9b05      	ldr	r3, [sp, #20]
 80064b2:	9807      	ldr	r0, [sp, #28]
 80064b4:	1af3      	subs	r3, r6, r3
 80064b6:	2f00      	cmp	r7, #0
 80064b8:	bf08      	it	eq
 80064ba:	462f      	moveq	r7, r5
 80064bc:	2d10      	cmp	r5, #16
 80064be:	9306      	str	r3, [sp, #24]
 80064c0:	46a8      	mov	r8, r5
 80064c2:	bfa8      	it	ge
 80064c4:	f04f 0810 	movge.w	r8, #16
 80064c8:	f7fa f834 	bl	8000534 <__aeabi_ui2d>
 80064cc:	2d09      	cmp	r5, #9
 80064ce:	4682      	mov	sl, r0
 80064d0:	468b      	mov	fp, r1
 80064d2:	dd13      	ble.n	80064fc <_strtod_l+0x3dc>
 80064d4:	4b7b      	ldr	r3, [pc, #492]	; (80066c4 <_strtod_l+0x5a4>)
 80064d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80064da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80064de:	f7fa f8a3 	bl	8000628 <__aeabi_dmul>
 80064e2:	4682      	mov	sl, r0
 80064e4:	4648      	mov	r0, r9
 80064e6:	468b      	mov	fp, r1
 80064e8:	f7fa f824 	bl	8000534 <__aeabi_ui2d>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4650      	mov	r0, sl
 80064f2:	4659      	mov	r1, fp
 80064f4:	f7f9 fee2 	bl	80002bc <__adddf3>
 80064f8:	4682      	mov	sl, r0
 80064fa:	468b      	mov	fp, r1
 80064fc:	2d0f      	cmp	r5, #15
 80064fe:	dc38      	bgt.n	8006572 <_strtod_l+0x452>
 8006500:	9b06      	ldr	r3, [sp, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f43f ae50 	beq.w	80061a8 <_strtod_l+0x88>
 8006508:	dd24      	ble.n	8006554 <_strtod_l+0x434>
 800650a:	2b16      	cmp	r3, #22
 800650c:	dc0b      	bgt.n	8006526 <_strtod_l+0x406>
 800650e:	496d      	ldr	r1, [pc, #436]	; (80066c4 <_strtod_l+0x5a4>)
 8006510:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006518:	4652      	mov	r2, sl
 800651a:	465b      	mov	r3, fp
 800651c:	f7fa f884 	bl	8000628 <__aeabi_dmul>
 8006520:	4682      	mov	sl, r0
 8006522:	468b      	mov	fp, r1
 8006524:	e640      	b.n	80061a8 <_strtod_l+0x88>
 8006526:	9a06      	ldr	r2, [sp, #24]
 8006528:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800652c:	4293      	cmp	r3, r2
 800652e:	db20      	blt.n	8006572 <_strtod_l+0x452>
 8006530:	4c64      	ldr	r4, [pc, #400]	; (80066c4 <_strtod_l+0x5a4>)
 8006532:	f1c5 050f 	rsb	r5, r5, #15
 8006536:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800653a:	4652      	mov	r2, sl
 800653c:	465b      	mov	r3, fp
 800653e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006542:	f7fa f871 	bl	8000628 <__aeabi_dmul>
 8006546:	9b06      	ldr	r3, [sp, #24]
 8006548:	1b5d      	subs	r5, r3, r5
 800654a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800654e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006552:	e7e3      	b.n	800651c <_strtod_l+0x3fc>
 8006554:	9b06      	ldr	r3, [sp, #24]
 8006556:	3316      	adds	r3, #22
 8006558:	db0b      	blt.n	8006572 <_strtod_l+0x452>
 800655a:	9b05      	ldr	r3, [sp, #20]
 800655c:	1b9e      	subs	r6, r3, r6
 800655e:	4b59      	ldr	r3, [pc, #356]	; (80066c4 <_strtod_l+0x5a4>)
 8006560:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006564:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006568:	4650      	mov	r0, sl
 800656a:	4659      	mov	r1, fp
 800656c:	f7fa f986 	bl	800087c <__aeabi_ddiv>
 8006570:	e7d6      	b.n	8006520 <_strtod_l+0x400>
 8006572:	9b06      	ldr	r3, [sp, #24]
 8006574:	eba5 0808 	sub.w	r8, r5, r8
 8006578:	4498      	add	r8, r3
 800657a:	f1b8 0f00 	cmp.w	r8, #0
 800657e:	dd74      	ble.n	800666a <_strtod_l+0x54a>
 8006580:	f018 030f 	ands.w	r3, r8, #15
 8006584:	d00a      	beq.n	800659c <_strtod_l+0x47c>
 8006586:	494f      	ldr	r1, [pc, #316]	; (80066c4 <_strtod_l+0x5a4>)
 8006588:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800658c:	4652      	mov	r2, sl
 800658e:	465b      	mov	r3, fp
 8006590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006594:	f7fa f848 	bl	8000628 <__aeabi_dmul>
 8006598:	4682      	mov	sl, r0
 800659a:	468b      	mov	fp, r1
 800659c:	f038 080f 	bics.w	r8, r8, #15
 80065a0:	d04f      	beq.n	8006642 <_strtod_l+0x522>
 80065a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80065a6:	dd22      	ble.n	80065ee <_strtod_l+0x4ce>
 80065a8:	2500      	movs	r5, #0
 80065aa:	462e      	mov	r6, r5
 80065ac:	9507      	str	r5, [sp, #28]
 80065ae:	9505      	str	r5, [sp, #20]
 80065b0:	2322      	movs	r3, #34	; 0x22
 80065b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80066cc <_strtod_l+0x5ac>
 80065b6:	6023      	str	r3, [r4, #0]
 80065b8:	f04f 0a00 	mov.w	sl, #0
 80065bc:	9b07      	ldr	r3, [sp, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f43f adf2 	beq.w	80061a8 <_strtod_l+0x88>
 80065c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80065c6:	4620      	mov	r0, r4
 80065c8:	f001 fec6 	bl	8008358 <_Bfree>
 80065cc:	9905      	ldr	r1, [sp, #20]
 80065ce:	4620      	mov	r0, r4
 80065d0:	f001 fec2 	bl	8008358 <_Bfree>
 80065d4:	4631      	mov	r1, r6
 80065d6:	4620      	mov	r0, r4
 80065d8:	f001 febe 	bl	8008358 <_Bfree>
 80065dc:	9907      	ldr	r1, [sp, #28]
 80065de:	4620      	mov	r0, r4
 80065e0:	f001 feba 	bl	8008358 <_Bfree>
 80065e4:	4629      	mov	r1, r5
 80065e6:	4620      	mov	r0, r4
 80065e8:	f001 feb6 	bl	8008358 <_Bfree>
 80065ec:	e5dc      	b.n	80061a8 <_strtod_l+0x88>
 80065ee:	4b36      	ldr	r3, [pc, #216]	; (80066c8 <_strtod_l+0x5a8>)
 80065f0:	9304      	str	r3, [sp, #16]
 80065f2:	2300      	movs	r3, #0
 80065f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80065f8:	4650      	mov	r0, sl
 80065fa:	4659      	mov	r1, fp
 80065fc:	4699      	mov	r9, r3
 80065fe:	f1b8 0f01 	cmp.w	r8, #1
 8006602:	dc21      	bgt.n	8006648 <_strtod_l+0x528>
 8006604:	b10b      	cbz	r3, 800660a <_strtod_l+0x4ea>
 8006606:	4682      	mov	sl, r0
 8006608:	468b      	mov	fp, r1
 800660a:	4b2f      	ldr	r3, [pc, #188]	; (80066c8 <_strtod_l+0x5a8>)
 800660c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006610:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006614:	4652      	mov	r2, sl
 8006616:	465b      	mov	r3, fp
 8006618:	e9d9 0100 	ldrd	r0, r1, [r9]
 800661c:	f7fa f804 	bl	8000628 <__aeabi_dmul>
 8006620:	4b2a      	ldr	r3, [pc, #168]	; (80066cc <_strtod_l+0x5ac>)
 8006622:	460a      	mov	r2, r1
 8006624:	400b      	ands	r3, r1
 8006626:	492a      	ldr	r1, [pc, #168]	; (80066d0 <_strtod_l+0x5b0>)
 8006628:	428b      	cmp	r3, r1
 800662a:	4682      	mov	sl, r0
 800662c:	d8bc      	bhi.n	80065a8 <_strtod_l+0x488>
 800662e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006632:	428b      	cmp	r3, r1
 8006634:	bf86      	itte	hi
 8006636:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80066d4 <_strtod_l+0x5b4>
 800663a:	f04f 3aff 	movhi.w	sl, #4294967295
 800663e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006642:	2300      	movs	r3, #0
 8006644:	9304      	str	r3, [sp, #16]
 8006646:	e084      	b.n	8006752 <_strtod_l+0x632>
 8006648:	f018 0f01 	tst.w	r8, #1
 800664c:	d005      	beq.n	800665a <_strtod_l+0x53a>
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	f7f9 ffe8 	bl	8000628 <__aeabi_dmul>
 8006658:	2301      	movs	r3, #1
 800665a:	9a04      	ldr	r2, [sp, #16]
 800665c:	3208      	adds	r2, #8
 800665e:	f109 0901 	add.w	r9, r9, #1
 8006662:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006666:	9204      	str	r2, [sp, #16]
 8006668:	e7c9      	b.n	80065fe <_strtod_l+0x4de>
 800666a:	d0ea      	beq.n	8006642 <_strtod_l+0x522>
 800666c:	f1c8 0800 	rsb	r8, r8, #0
 8006670:	f018 020f 	ands.w	r2, r8, #15
 8006674:	d00a      	beq.n	800668c <_strtod_l+0x56c>
 8006676:	4b13      	ldr	r3, [pc, #76]	; (80066c4 <_strtod_l+0x5a4>)
 8006678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800667c:	4650      	mov	r0, sl
 800667e:	4659      	mov	r1, fp
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	f7fa f8fa 	bl	800087c <__aeabi_ddiv>
 8006688:	4682      	mov	sl, r0
 800668a:	468b      	mov	fp, r1
 800668c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006690:	d0d7      	beq.n	8006642 <_strtod_l+0x522>
 8006692:	f1b8 0f1f 	cmp.w	r8, #31
 8006696:	dd1f      	ble.n	80066d8 <_strtod_l+0x5b8>
 8006698:	2500      	movs	r5, #0
 800669a:	462e      	mov	r6, r5
 800669c:	9507      	str	r5, [sp, #28]
 800669e:	9505      	str	r5, [sp, #20]
 80066a0:	2322      	movs	r3, #34	; 0x22
 80066a2:	f04f 0a00 	mov.w	sl, #0
 80066a6:	f04f 0b00 	mov.w	fp, #0
 80066aa:	6023      	str	r3, [r4, #0]
 80066ac:	e786      	b.n	80065bc <_strtod_l+0x49c>
 80066ae:	bf00      	nop
 80066b0:	0800cb0d 	.word	0x0800cb0d
 80066b4:	0800cb4c 	.word	0x0800cb4c
 80066b8:	0800cb05 	.word	0x0800cb05
 80066bc:	0800cc8c 	.word	0x0800cc8c
 80066c0:	0800cf53 	.word	0x0800cf53
 80066c4:	0800ce18 	.word	0x0800ce18
 80066c8:	0800cdf0 	.word	0x0800cdf0
 80066cc:	7ff00000 	.word	0x7ff00000
 80066d0:	7ca00000 	.word	0x7ca00000
 80066d4:	7fefffff 	.word	0x7fefffff
 80066d8:	f018 0310 	ands.w	r3, r8, #16
 80066dc:	bf18      	it	ne
 80066de:	236a      	movne	r3, #106	; 0x6a
 80066e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006a90 <_strtod_l+0x970>
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	4650      	mov	r0, sl
 80066e8:	4659      	mov	r1, fp
 80066ea:	2300      	movs	r3, #0
 80066ec:	f018 0f01 	tst.w	r8, #1
 80066f0:	d004      	beq.n	80066fc <_strtod_l+0x5dc>
 80066f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80066f6:	f7f9 ff97 	bl	8000628 <__aeabi_dmul>
 80066fa:	2301      	movs	r3, #1
 80066fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006700:	f109 0908 	add.w	r9, r9, #8
 8006704:	d1f2      	bne.n	80066ec <_strtod_l+0x5cc>
 8006706:	b10b      	cbz	r3, 800670c <_strtod_l+0x5ec>
 8006708:	4682      	mov	sl, r0
 800670a:	468b      	mov	fp, r1
 800670c:	9b04      	ldr	r3, [sp, #16]
 800670e:	b1c3      	cbz	r3, 8006742 <_strtod_l+0x622>
 8006710:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006714:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006718:	2b00      	cmp	r3, #0
 800671a:	4659      	mov	r1, fp
 800671c:	dd11      	ble.n	8006742 <_strtod_l+0x622>
 800671e:	2b1f      	cmp	r3, #31
 8006720:	f340 8124 	ble.w	800696c <_strtod_l+0x84c>
 8006724:	2b34      	cmp	r3, #52	; 0x34
 8006726:	bfde      	ittt	le
 8006728:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800672c:	f04f 33ff 	movle.w	r3, #4294967295
 8006730:	fa03 f202 	lslle.w	r2, r3, r2
 8006734:	f04f 0a00 	mov.w	sl, #0
 8006738:	bfcc      	ite	gt
 800673a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800673e:	ea02 0b01 	andle.w	fp, r2, r1
 8006742:	2200      	movs	r2, #0
 8006744:	2300      	movs	r3, #0
 8006746:	4650      	mov	r0, sl
 8006748:	4659      	mov	r1, fp
 800674a:	f7fa f9d5 	bl	8000af8 <__aeabi_dcmpeq>
 800674e:	2800      	cmp	r0, #0
 8006750:	d1a2      	bne.n	8006698 <_strtod_l+0x578>
 8006752:	9b07      	ldr	r3, [sp, #28]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	9908      	ldr	r1, [sp, #32]
 8006758:	462b      	mov	r3, r5
 800675a:	463a      	mov	r2, r7
 800675c:	4620      	mov	r0, r4
 800675e:	f001 fe63 	bl	8008428 <__s2b>
 8006762:	9007      	str	r0, [sp, #28]
 8006764:	2800      	cmp	r0, #0
 8006766:	f43f af1f 	beq.w	80065a8 <_strtod_l+0x488>
 800676a:	9b05      	ldr	r3, [sp, #20]
 800676c:	1b9e      	subs	r6, r3, r6
 800676e:	9b06      	ldr	r3, [sp, #24]
 8006770:	2b00      	cmp	r3, #0
 8006772:	bfb4      	ite	lt
 8006774:	4633      	movlt	r3, r6
 8006776:	2300      	movge	r3, #0
 8006778:	930c      	str	r3, [sp, #48]	; 0x30
 800677a:	9b06      	ldr	r3, [sp, #24]
 800677c:	2500      	movs	r5, #0
 800677e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006782:	9312      	str	r3, [sp, #72]	; 0x48
 8006784:	462e      	mov	r6, r5
 8006786:	9b07      	ldr	r3, [sp, #28]
 8006788:	4620      	mov	r0, r4
 800678a:	6859      	ldr	r1, [r3, #4]
 800678c:	f001 fda4 	bl	80082d8 <_Balloc>
 8006790:	9005      	str	r0, [sp, #20]
 8006792:	2800      	cmp	r0, #0
 8006794:	f43f af0c 	beq.w	80065b0 <_strtod_l+0x490>
 8006798:	9b07      	ldr	r3, [sp, #28]
 800679a:	691a      	ldr	r2, [r3, #16]
 800679c:	3202      	adds	r2, #2
 800679e:	f103 010c 	add.w	r1, r3, #12
 80067a2:	0092      	lsls	r2, r2, #2
 80067a4:	300c      	adds	r0, #12
 80067a6:	f001 fd89 	bl	80082bc <memcpy>
 80067aa:	ec4b ab10 	vmov	d0, sl, fp
 80067ae:	aa1a      	add	r2, sp, #104	; 0x68
 80067b0:	a919      	add	r1, sp, #100	; 0x64
 80067b2:	4620      	mov	r0, r4
 80067b4:	f002 f97e 	bl	8008ab4 <__d2b>
 80067b8:	ec4b ab18 	vmov	d8, sl, fp
 80067bc:	9018      	str	r0, [sp, #96]	; 0x60
 80067be:	2800      	cmp	r0, #0
 80067c0:	f43f aef6 	beq.w	80065b0 <_strtod_l+0x490>
 80067c4:	2101      	movs	r1, #1
 80067c6:	4620      	mov	r0, r4
 80067c8:	f001 fec8 	bl	800855c <__i2b>
 80067cc:	4606      	mov	r6, r0
 80067ce:	2800      	cmp	r0, #0
 80067d0:	f43f aeee 	beq.w	80065b0 <_strtod_l+0x490>
 80067d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067d6:	9904      	ldr	r1, [sp, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	bfab      	itete	ge
 80067dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80067de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80067e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80067e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80067e6:	bfac      	ite	ge
 80067e8:	eb03 0902 	addge.w	r9, r3, r2
 80067ec:	1ad7      	sublt	r7, r2, r3
 80067ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80067f0:	eba3 0801 	sub.w	r8, r3, r1
 80067f4:	4490      	add	r8, r2
 80067f6:	4ba1      	ldr	r3, [pc, #644]	; (8006a7c <_strtod_l+0x95c>)
 80067f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80067fc:	4598      	cmp	r8, r3
 80067fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006802:	f280 80c7 	bge.w	8006994 <_strtod_l+0x874>
 8006806:	eba3 0308 	sub.w	r3, r3, r8
 800680a:	2b1f      	cmp	r3, #31
 800680c:	eba2 0203 	sub.w	r2, r2, r3
 8006810:	f04f 0101 	mov.w	r1, #1
 8006814:	f300 80b1 	bgt.w	800697a <_strtod_l+0x85a>
 8006818:	fa01 f303 	lsl.w	r3, r1, r3
 800681c:	930d      	str	r3, [sp, #52]	; 0x34
 800681e:	2300      	movs	r3, #0
 8006820:	9308      	str	r3, [sp, #32]
 8006822:	eb09 0802 	add.w	r8, r9, r2
 8006826:	9b04      	ldr	r3, [sp, #16]
 8006828:	45c1      	cmp	r9, r8
 800682a:	4417      	add	r7, r2
 800682c:	441f      	add	r7, r3
 800682e:	464b      	mov	r3, r9
 8006830:	bfa8      	it	ge
 8006832:	4643      	movge	r3, r8
 8006834:	42bb      	cmp	r3, r7
 8006836:	bfa8      	it	ge
 8006838:	463b      	movge	r3, r7
 800683a:	2b00      	cmp	r3, #0
 800683c:	bfc2      	ittt	gt
 800683e:	eba8 0803 	subgt.w	r8, r8, r3
 8006842:	1aff      	subgt	r7, r7, r3
 8006844:	eba9 0903 	subgt.w	r9, r9, r3
 8006848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800684a:	2b00      	cmp	r3, #0
 800684c:	dd17      	ble.n	800687e <_strtod_l+0x75e>
 800684e:	4631      	mov	r1, r6
 8006850:	461a      	mov	r2, r3
 8006852:	4620      	mov	r0, r4
 8006854:	f001 ff42 	bl	80086dc <__pow5mult>
 8006858:	4606      	mov	r6, r0
 800685a:	2800      	cmp	r0, #0
 800685c:	f43f aea8 	beq.w	80065b0 <_strtod_l+0x490>
 8006860:	4601      	mov	r1, r0
 8006862:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006864:	4620      	mov	r0, r4
 8006866:	f001 fe8f 	bl	8008588 <__multiply>
 800686a:	900b      	str	r0, [sp, #44]	; 0x2c
 800686c:	2800      	cmp	r0, #0
 800686e:	f43f ae9f 	beq.w	80065b0 <_strtod_l+0x490>
 8006872:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006874:	4620      	mov	r0, r4
 8006876:	f001 fd6f 	bl	8008358 <_Bfree>
 800687a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687c:	9318      	str	r3, [sp, #96]	; 0x60
 800687e:	f1b8 0f00 	cmp.w	r8, #0
 8006882:	f300 808c 	bgt.w	800699e <_strtod_l+0x87e>
 8006886:	9b06      	ldr	r3, [sp, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	dd08      	ble.n	800689e <_strtod_l+0x77e>
 800688c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800688e:	9905      	ldr	r1, [sp, #20]
 8006890:	4620      	mov	r0, r4
 8006892:	f001 ff23 	bl	80086dc <__pow5mult>
 8006896:	9005      	str	r0, [sp, #20]
 8006898:	2800      	cmp	r0, #0
 800689a:	f43f ae89 	beq.w	80065b0 <_strtod_l+0x490>
 800689e:	2f00      	cmp	r7, #0
 80068a0:	dd08      	ble.n	80068b4 <_strtod_l+0x794>
 80068a2:	9905      	ldr	r1, [sp, #20]
 80068a4:	463a      	mov	r2, r7
 80068a6:	4620      	mov	r0, r4
 80068a8:	f001 ff72 	bl	8008790 <__lshift>
 80068ac:	9005      	str	r0, [sp, #20]
 80068ae:	2800      	cmp	r0, #0
 80068b0:	f43f ae7e 	beq.w	80065b0 <_strtod_l+0x490>
 80068b4:	f1b9 0f00 	cmp.w	r9, #0
 80068b8:	dd08      	ble.n	80068cc <_strtod_l+0x7ac>
 80068ba:	4631      	mov	r1, r6
 80068bc:	464a      	mov	r2, r9
 80068be:	4620      	mov	r0, r4
 80068c0:	f001 ff66 	bl	8008790 <__lshift>
 80068c4:	4606      	mov	r6, r0
 80068c6:	2800      	cmp	r0, #0
 80068c8:	f43f ae72 	beq.w	80065b0 <_strtod_l+0x490>
 80068cc:	9a05      	ldr	r2, [sp, #20]
 80068ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80068d0:	4620      	mov	r0, r4
 80068d2:	f001 ffe9 	bl	80088a8 <__mdiff>
 80068d6:	4605      	mov	r5, r0
 80068d8:	2800      	cmp	r0, #0
 80068da:	f43f ae69 	beq.w	80065b0 <_strtod_l+0x490>
 80068de:	68c3      	ldr	r3, [r0, #12]
 80068e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80068e2:	2300      	movs	r3, #0
 80068e4:	60c3      	str	r3, [r0, #12]
 80068e6:	4631      	mov	r1, r6
 80068e8:	f001 ffc2 	bl	8008870 <__mcmp>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	da60      	bge.n	80069b2 <_strtod_l+0x892>
 80068f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068f2:	ea53 030a 	orrs.w	r3, r3, sl
 80068f6:	f040 8082 	bne.w	80069fe <_strtod_l+0x8de>
 80068fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d17d      	bne.n	80069fe <_strtod_l+0x8de>
 8006902:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006906:	0d1b      	lsrs	r3, r3, #20
 8006908:	051b      	lsls	r3, r3, #20
 800690a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800690e:	d976      	bls.n	80069fe <_strtod_l+0x8de>
 8006910:	696b      	ldr	r3, [r5, #20]
 8006912:	b913      	cbnz	r3, 800691a <_strtod_l+0x7fa>
 8006914:	692b      	ldr	r3, [r5, #16]
 8006916:	2b01      	cmp	r3, #1
 8006918:	dd71      	ble.n	80069fe <_strtod_l+0x8de>
 800691a:	4629      	mov	r1, r5
 800691c:	2201      	movs	r2, #1
 800691e:	4620      	mov	r0, r4
 8006920:	f001 ff36 	bl	8008790 <__lshift>
 8006924:	4631      	mov	r1, r6
 8006926:	4605      	mov	r5, r0
 8006928:	f001 ffa2 	bl	8008870 <__mcmp>
 800692c:	2800      	cmp	r0, #0
 800692e:	dd66      	ble.n	80069fe <_strtod_l+0x8de>
 8006930:	9904      	ldr	r1, [sp, #16]
 8006932:	4a53      	ldr	r2, [pc, #332]	; (8006a80 <_strtod_l+0x960>)
 8006934:	465b      	mov	r3, fp
 8006936:	2900      	cmp	r1, #0
 8006938:	f000 8081 	beq.w	8006a3e <_strtod_l+0x91e>
 800693c:	ea02 010b 	and.w	r1, r2, fp
 8006940:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006944:	dc7b      	bgt.n	8006a3e <_strtod_l+0x91e>
 8006946:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800694a:	f77f aea9 	ble.w	80066a0 <_strtod_l+0x580>
 800694e:	4b4d      	ldr	r3, [pc, #308]	; (8006a84 <_strtod_l+0x964>)
 8006950:	4650      	mov	r0, sl
 8006952:	4659      	mov	r1, fp
 8006954:	2200      	movs	r2, #0
 8006956:	f7f9 fe67 	bl	8000628 <__aeabi_dmul>
 800695a:	460b      	mov	r3, r1
 800695c:	4303      	orrs	r3, r0
 800695e:	bf08      	it	eq
 8006960:	2322      	moveq	r3, #34	; 0x22
 8006962:	4682      	mov	sl, r0
 8006964:	468b      	mov	fp, r1
 8006966:	bf08      	it	eq
 8006968:	6023      	streq	r3, [r4, #0]
 800696a:	e62b      	b.n	80065c4 <_strtod_l+0x4a4>
 800696c:	f04f 32ff 	mov.w	r2, #4294967295
 8006970:	fa02 f303 	lsl.w	r3, r2, r3
 8006974:	ea03 0a0a 	and.w	sl, r3, sl
 8006978:	e6e3      	b.n	8006742 <_strtod_l+0x622>
 800697a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800697e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006982:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006986:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800698a:	fa01 f308 	lsl.w	r3, r1, r8
 800698e:	9308      	str	r3, [sp, #32]
 8006990:	910d      	str	r1, [sp, #52]	; 0x34
 8006992:	e746      	b.n	8006822 <_strtod_l+0x702>
 8006994:	2300      	movs	r3, #0
 8006996:	9308      	str	r3, [sp, #32]
 8006998:	2301      	movs	r3, #1
 800699a:	930d      	str	r3, [sp, #52]	; 0x34
 800699c:	e741      	b.n	8006822 <_strtod_l+0x702>
 800699e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069a0:	4642      	mov	r2, r8
 80069a2:	4620      	mov	r0, r4
 80069a4:	f001 fef4 	bl	8008790 <__lshift>
 80069a8:	9018      	str	r0, [sp, #96]	; 0x60
 80069aa:	2800      	cmp	r0, #0
 80069ac:	f47f af6b 	bne.w	8006886 <_strtod_l+0x766>
 80069b0:	e5fe      	b.n	80065b0 <_strtod_l+0x490>
 80069b2:	465f      	mov	r7, fp
 80069b4:	d16e      	bne.n	8006a94 <_strtod_l+0x974>
 80069b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069bc:	b342      	cbz	r2, 8006a10 <_strtod_l+0x8f0>
 80069be:	4a32      	ldr	r2, [pc, #200]	; (8006a88 <_strtod_l+0x968>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d128      	bne.n	8006a16 <_strtod_l+0x8f6>
 80069c4:	9b04      	ldr	r3, [sp, #16]
 80069c6:	4651      	mov	r1, sl
 80069c8:	b1eb      	cbz	r3, 8006a06 <_strtod_l+0x8e6>
 80069ca:	4b2d      	ldr	r3, [pc, #180]	; (8006a80 <_strtod_l+0x960>)
 80069cc:	403b      	ands	r3, r7
 80069ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80069d2:	f04f 32ff 	mov.w	r2, #4294967295
 80069d6:	d819      	bhi.n	8006a0c <_strtod_l+0x8ec>
 80069d8:	0d1b      	lsrs	r3, r3, #20
 80069da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80069de:	fa02 f303 	lsl.w	r3, r2, r3
 80069e2:	4299      	cmp	r1, r3
 80069e4:	d117      	bne.n	8006a16 <_strtod_l+0x8f6>
 80069e6:	4b29      	ldr	r3, [pc, #164]	; (8006a8c <_strtod_l+0x96c>)
 80069e8:	429f      	cmp	r7, r3
 80069ea:	d102      	bne.n	80069f2 <_strtod_l+0x8d2>
 80069ec:	3101      	adds	r1, #1
 80069ee:	f43f addf 	beq.w	80065b0 <_strtod_l+0x490>
 80069f2:	4b23      	ldr	r3, [pc, #140]	; (8006a80 <_strtod_l+0x960>)
 80069f4:	403b      	ands	r3, r7
 80069f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80069fa:	f04f 0a00 	mov.w	sl, #0
 80069fe:	9b04      	ldr	r3, [sp, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1a4      	bne.n	800694e <_strtod_l+0x82e>
 8006a04:	e5de      	b.n	80065c4 <_strtod_l+0x4a4>
 8006a06:	f04f 33ff 	mov.w	r3, #4294967295
 8006a0a:	e7ea      	b.n	80069e2 <_strtod_l+0x8c2>
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	e7e8      	b.n	80069e2 <_strtod_l+0x8c2>
 8006a10:	ea53 030a 	orrs.w	r3, r3, sl
 8006a14:	d08c      	beq.n	8006930 <_strtod_l+0x810>
 8006a16:	9b08      	ldr	r3, [sp, #32]
 8006a18:	b1db      	cbz	r3, 8006a52 <_strtod_l+0x932>
 8006a1a:	423b      	tst	r3, r7
 8006a1c:	d0ef      	beq.n	80069fe <_strtod_l+0x8de>
 8006a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a20:	9a04      	ldr	r2, [sp, #16]
 8006a22:	4650      	mov	r0, sl
 8006a24:	4659      	mov	r1, fp
 8006a26:	b1c3      	cbz	r3, 8006a5a <_strtod_l+0x93a>
 8006a28:	f7ff fb5d 	bl	80060e6 <sulp>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	ec51 0b18 	vmov	r0, r1, d8
 8006a34:	f7f9 fc42 	bl	80002bc <__adddf3>
 8006a38:	4682      	mov	sl, r0
 8006a3a:	468b      	mov	fp, r1
 8006a3c:	e7df      	b.n	80069fe <_strtod_l+0x8de>
 8006a3e:	4013      	ands	r3, r2
 8006a40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006a44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006a48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006a4c:	f04f 3aff 	mov.w	sl, #4294967295
 8006a50:	e7d5      	b.n	80069fe <_strtod_l+0x8de>
 8006a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a54:	ea13 0f0a 	tst.w	r3, sl
 8006a58:	e7e0      	b.n	8006a1c <_strtod_l+0x8fc>
 8006a5a:	f7ff fb44 	bl	80060e6 <sulp>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	ec51 0b18 	vmov	r0, r1, d8
 8006a66:	f7f9 fc27 	bl	80002b8 <__aeabi_dsub>
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	4682      	mov	sl, r0
 8006a70:	468b      	mov	fp, r1
 8006a72:	f7fa f841 	bl	8000af8 <__aeabi_dcmpeq>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d0c1      	beq.n	80069fe <_strtod_l+0x8de>
 8006a7a:	e611      	b.n	80066a0 <_strtod_l+0x580>
 8006a7c:	fffffc02 	.word	0xfffffc02
 8006a80:	7ff00000 	.word	0x7ff00000
 8006a84:	39500000 	.word	0x39500000
 8006a88:	000fffff 	.word	0x000fffff
 8006a8c:	7fefffff 	.word	0x7fefffff
 8006a90:	0800cb60 	.word	0x0800cb60
 8006a94:	4631      	mov	r1, r6
 8006a96:	4628      	mov	r0, r5
 8006a98:	f002 f868 	bl	8008b6c <__ratio>
 8006a9c:	ec59 8b10 	vmov	r8, r9, d0
 8006aa0:	ee10 0a10 	vmov	r0, s0
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006aaa:	4649      	mov	r1, r9
 8006aac:	f7fa f838 	bl	8000b20 <__aeabi_dcmple>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d07a      	beq.n	8006baa <_strtod_l+0xa8a>
 8006ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d04a      	beq.n	8006b50 <_strtod_l+0xa30>
 8006aba:	4b95      	ldr	r3, [pc, #596]	; (8006d10 <_strtod_l+0xbf0>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ac2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006d10 <_strtod_l+0xbf0>
 8006ac6:	f04f 0800 	mov.w	r8, #0
 8006aca:	4b92      	ldr	r3, [pc, #584]	; (8006d14 <_strtod_l+0xbf4>)
 8006acc:	403b      	ands	r3, r7
 8006ace:	930d      	str	r3, [sp, #52]	; 0x34
 8006ad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ad2:	4b91      	ldr	r3, [pc, #580]	; (8006d18 <_strtod_l+0xbf8>)
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	f040 80b0 	bne.w	8006c3a <_strtod_l+0xb1a>
 8006ada:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ade:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006ae2:	ec4b ab10 	vmov	d0, sl, fp
 8006ae6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006aea:	f001 ff67 	bl	80089bc <__ulp>
 8006aee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006af2:	ec53 2b10 	vmov	r2, r3, d0
 8006af6:	f7f9 fd97 	bl	8000628 <__aeabi_dmul>
 8006afa:	4652      	mov	r2, sl
 8006afc:	465b      	mov	r3, fp
 8006afe:	f7f9 fbdd 	bl	80002bc <__adddf3>
 8006b02:	460b      	mov	r3, r1
 8006b04:	4983      	ldr	r1, [pc, #524]	; (8006d14 <_strtod_l+0xbf4>)
 8006b06:	4a85      	ldr	r2, [pc, #532]	; (8006d1c <_strtod_l+0xbfc>)
 8006b08:	4019      	ands	r1, r3
 8006b0a:	4291      	cmp	r1, r2
 8006b0c:	4682      	mov	sl, r0
 8006b0e:	d960      	bls.n	8006bd2 <_strtod_l+0xab2>
 8006b10:	ee18 3a90 	vmov	r3, s17
 8006b14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d104      	bne.n	8006b26 <_strtod_l+0xa06>
 8006b1c:	ee18 3a10 	vmov	r3, s16
 8006b20:	3301      	adds	r3, #1
 8006b22:	f43f ad45 	beq.w	80065b0 <_strtod_l+0x490>
 8006b26:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006d28 <_strtod_l+0xc08>
 8006b2a:	f04f 3aff 	mov.w	sl, #4294967295
 8006b2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006b30:	4620      	mov	r0, r4
 8006b32:	f001 fc11 	bl	8008358 <_Bfree>
 8006b36:	9905      	ldr	r1, [sp, #20]
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f001 fc0d 	bl	8008358 <_Bfree>
 8006b3e:	4631      	mov	r1, r6
 8006b40:	4620      	mov	r0, r4
 8006b42:	f001 fc09 	bl	8008358 <_Bfree>
 8006b46:	4629      	mov	r1, r5
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f001 fc05 	bl	8008358 <_Bfree>
 8006b4e:	e61a      	b.n	8006786 <_strtod_l+0x666>
 8006b50:	f1ba 0f00 	cmp.w	sl, #0
 8006b54:	d11b      	bne.n	8006b8e <_strtod_l+0xa6e>
 8006b56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b5a:	b9f3      	cbnz	r3, 8006b9a <_strtod_l+0xa7a>
 8006b5c:	4b6c      	ldr	r3, [pc, #432]	; (8006d10 <_strtod_l+0xbf0>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	4640      	mov	r0, r8
 8006b62:	4649      	mov	r1, r9
 8006b64:	f7f9 ffd2 	bl	8000b0c <__aeabi_dcmplt>
 8006b68:	b9d0      	cbnz	r0, 8006ba0 <_strtod_l+0xa80>
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	4649      	mov	r1, r9
 8006b6e:	4b6c      	ldr	r3, [pc, #432]	; (8006d20 <_strtod_l+0xc00>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	f7f9 fd59 	bl	8000628 <__aeabi_dmul>
 8006b76:	4680      	mov	r8, r0
 8006b78:	4689      	mov	r9, r1
 8006b7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006b7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006b82:	9315      	str	r3, [sp, #84]	; 0x54
 8006b84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006b88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b8c:	e79d      	b.n	8006aca <_strtod_l+0x9aa>
 8006b8e:	f1ba 0f01 	cmp.w	sl, #1
 8006b92:	d102      	bne.n	8006b9a <_strtod_l+0xa7a>
 8006b94:	2f00      	cmp	r7, #0
 8006b96:	f43f ad83 	beq.w	80066a0 <_strtod_l+0x580>
 8006b9a:	4b62      	ldr	r3, [pc, #392]	; (8006d24 <_strtod_l+0xc04>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	e78e      	b.n	8006abe <_strtod_l+0x99e>
 8006ba0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006d20 <_strtod_l+0xc00>
 8006ba4:	f04f 0800 	mov.w	r8, #0
 8006ba8:	e7e7      	b.n	8006b7a <_strtod_l+0xa5a>
 8006baa:	4b5d      	ldr	r3, [pc, #372]	; (8006d20 <_strtod_l+0xc00>)
 8006bac:	4640      	mov	r0, r8
 8006bae:	4649      	mov	r1, r9
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f7f9 fd39 	bl	8000628 <__aeabi_dmul>
 8006bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb8:	4680      	mov	r8, r0
 8006bba:	4689      	mov	r9, r1
 8006bbc:	b933      	cbnz	r3, 8006bcc <_strtod_l+0xaac>
 8006bbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bc2:	900e      	str	r0, [sp, #56]	; 0x38
 8006bc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006bca:	e7dd      	b.n	8006b88 <_strtod_l+0xa68>
 8006bcc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006bd0:	e7f9      	b.n	8006bc6 <_strtod_l+0xaa6>
 8006bd2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006bd6:	9b04      	ldr	r3, [sp, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1a8      	bne.n	8006b2e <_strtod_l+0xa0e>
 8006bdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006be0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006be2:	0d1b      	lsrs	r3, r3, #20
 8006be4:	051b      	lsls	r3, r3, #20
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d1a1      	bne.n	8006b2e <_strtod_l+0xa0e>
 8006bea:	4640      	mov	r0, r8
 8006bec:	4649      	mov	r1, r9
 8006bee:	f7fa f8b3 	bl	8000d58 <__aeabi_d2lz>
 8006bf2:	f7f9 fceb 	bl	80005cc <__aeabi_l2d>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4640      	mov	r0, r8
 8006bfc:	4649      	mov	r1, r9
 8006bfe:	f7f9 fb5b 	bl	80002b8 <__aeabi_dsub>
 8006c02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c08:	ea43 030a 	orr.w	r3, r3, sl
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	4680      	mov	r8, r0
 8006c10:	4689      	mov	r9, r1
 8006c12:	d055      	beq.n	8006cc0 <_strtod_l+0xba0>
 8006c14:	a336      	add	r3, pc, #216	; (adr r3, 8006cf0 <_strtod_l+0xbd0>)
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f7f9 ff77 	bl	8000b0c <__aeabi_dcmplt>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f47f acd0 	bne.w	80065c4 <_strtod_l+0x4a4>
 8006c24:	a334      	add	r3, pc, #208	; (adr r3, 8006cf8 <_strtod_l+0xbd8>)
 8006c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	f7f9 ff8b 	bl	8000b48 <__aeabi_dcmpgt>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	f43f af7b 	beq.w	8006b2e <_strtod_l+0xa0e>
 8006c38:	e4c4      	b.n	80065c4 <_strtod_l+0x4a4>
 8006c3a:	9b04      	ldr	r3, [sp, #16]
 8006c3c:	b333      	cbz	r3, 8006c8c <_strtod_l+0xb6c>
 8006c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006c44:	d822      	bhi.n	8006c8c <_strtod_l+0xb6c>
 8006c46:	a32e      	add	r3, pc, #184	; (adr r3, 8006d00 <_strtod_l+0xbe0>)
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	4649      	mov	r1, r9
 8006c50:	f7f9 ff66 	bl	8000b20 <__aeabi_dcmple>
 8006c54:	b1a0      	cbz	r0, 8006c80 <_strtod_l+0xb60>
 8006c56:	4649      	mov	r1, r9
 8006c58:	4640      	mov	r0, r8
 8006c5a:	f7f9 ffbd 	bl	8000bd8 <__aeabi_d2uiz>
 8006c5e:	2801      	cmp	r0, #1
 8006c60:	bf38      	it	cc
 8006c62:	2001      	movcc	r0, #1
 8006c64:	f7f9 fc66 	bl	8000534 <__aeabi_ui2d>
 8006c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c6a:	4680      	mov	r8, r0
 8006c6c:	4689      	mov	r9, r1
 8006c6e:	bb23      	cbnz	r3, 8006cba <_strtod_l+0xb9a>
 8006c70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c74:	9010      	str	r0, [sp, #64]	; 0x40
 8006c76:	9311      	str	r3, [sp, #68]	; 0x44
 8006c78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006c88:	1a9b      	subs	r3, r3, r2
 8006c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c90:	eeb0 0a48 	vmov.f32	s0, s16
 8006c94:	eef0 0a68 	vmov.f32	s1, s17
 8006c98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c9c:	f001 fe8e 	bl	80089bc <__ulp>
 8006ca0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ca4:	ec53 2b10 	vmov	r2, r3, d0
 8006ca8:	f7f9 fcbe 	bl	8000628 <__aeabi_dmul>
 8006cac:	ec53 2b18 	vmov	r2, r3, d8
 8006cb0:	f7f9 fb04 	bl	80002bc <__adddf3>
 8006cb4:	4682      	mov	sl, r0
 8006cb6:	468b      	mov	fp, r1
 8006cb8:	e78d      	b.n	8006bd6 <_strtod_l+0xab6>
 8006cba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006cbe:	e7db      	b.n	8006c78 <_strtod_l+0xb58>
 8006cc0:	a311      	add	r3, pc, #68	; (adr r3, 8006d08 <_strtod_l+0xbe8>)
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	f7f9 ff21 	bl	8000b0c <__aeabi_dcmplt>
 8006cca:	e7b2      	b.n	8006c32 <_strtod_l+0xb12>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	930a      	str	r3, [sp, #40]	; 0x28
 8006cd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006cd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	f7ff ba6b 	b.w	80061b0 <_strtod_l+0x90>
 8006cda:	2a65      	cmp	r2, #101	; 0x65
 8006cdc:	f43f ab5f 	beq.w	800639e <_strtod_l+0x27e>
 8006ce0:	2a45      	cmp	r2, #69	; 0x45
 8006ce2:	f43f ab5c 	beq.w	800639e <_strtod_l+0x27e>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f7ff bb94 	b.w	8006414 <_strtod_l+0x2f4>
 8006cec:	f3af 8000 	nop.w
 8006cf0:	94a03595 	.word	0x94a03595
 8006cf4:	3fdfffff 	.word	0x3fdfffff
 8006cf8:	35afe535 	.word	0x35afe535
 8006cfc:	3fe00000 	.word	0x3fe00000
 8006d00:	ffc00000 	.word	0xffc00000
 8006d04:	41dfffff 	.word	0x41dfffff
 8006d08:	94a03595 	.word	0x94a03595
 8006d0c:	3fcfffff 	.word	0x3fcfffff
 8006d10:	3ff00000 	.word	0x3ff00000
 8006d14:	7ff00000 	.word	0x7ff00000
 8006d18:	7fe00000 	.word	0x7fe00000
 8006d1c:	7c9fffff 	.word	0x7c9fffff
 8006d20:	3fe00000 	.word	0x3fe00000
 8006d24:	bff00000 	.word	0xbff00000
 8006d28:	7fefffff 	.word	0x7fefffff

08006d2c <_strtod_r>:
 8006d2c:	4b01      	ldr	r3, [pc, #4]	; (8006d34 <_strtod_r+0x8>)
 8006d2e:	f7ff b9f7 	b.w	8006120 <_strtod_l>
 8006d32:	bf00      	nop
 8006d34:	20000078 	.word	0x20000078

08006d38 <_strtol_l.constprop.0>:
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d3e:	d001      	beq.n	8006d44 <_strtol_l.constprop.0+0xc>
 8006d40:	2b24      	cmp	r3, #36	; 0x24
 8006d42:	d906      	bls.n	8006d52 <_strtol_l.constprop.0+0x1a>
 8006d44:	f7fe fa8c 	bl	8005260 <__errno>
 8006d48:	2316      	movs	r3, #22
 8006d4a:	6003      	str	r3, [r0, #0]
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006e38 <_strtol_l.constprop.0+0x100>
 8006d56:	460d      	mov	r5, r1
 8006d58:	462e      	mov	r6, r5
 8006d5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006d62:	f017 0708 	ands.w	r7, r7, #8
 8006d66:	d1f7      	bne.n	8006d58 <_strtol_l.constprop.0+0x20>
 8006d68:	2c2d      	cmp	r4, #45	; 0x2d
 8006d6a:	d132      	bne.n	8006dd2 <_strtol_l.constprop.0+0x9a>
 8006d6c:	782c      	ldrb	r4, [r5, #0]
 8006d6e:	2701      	movs	r7, #1
 8006d70:	1cb5      	adds	r5, r6, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d05b      	beq.n	8006e2e <_strtol_l.constprop.0+0xf6>
 8006d76:	2b10      	cmp	r3, #16
 8006d78:	d109      	bne.n	8006d8e <_strtol_l.constprop.0+0x56>
 8006d7a:	2c30      	cmp	r4, #48	; 0x30
 8006d7c:	d107      	bne.n	8006d8e <_strtol_l.constprop.0+0x56>
 8006d7e:	782c      	ldrb	r4, [r5, #0]
 8006d80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006d84:	2c58      	cmp	r4, #88	; 0x58
 8006d86:	d14d      	bne.n	8006e24 <_strtol_l.constprop.0+0xec>
 8006d88:	786c      	ldrb	r4, [r5, #1]
 8006d8a:	2310      	movs	r3, #16
 8006d8c:	3502      	adds	r5, #2
 8006d8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006d92:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d96:	f04f 0c00 	mov.w	ip, #0
 8006d9a:	fbb8 f9f3 	udiv	r9, r8, r3
 8006d9e:	4666      	mov	r6, ip
 8006da0:	fb03 8a19 	mls	sl, r3, r9, r8
 8006da4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006da8:	f1be 0f09 	cmp.w	lr, #9
 8006dac:	d816      	bhi.n	8006ddc <_strtol_l.constprop.0+0xa4>
 8006dae:	4674      	mov	r4, lr
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	dd24      	ble.n	8006dfe <_strtol_l.constprop.0+0xc6>
 8006db4:	f1bc 0f00 	cmp.w	ip, #0
 8006db8:	db1e      	blt.n	8006df8 <_strtol_l.constprop.0+0xc0>
 8006dba:	45b1      	cmp	r9, r6
 8006dbc:	d31c      	bcc.n	8006df8 <_strtol_l.constprop.0+0xc0>
 8006dbe:	d101      	bne.n	8006dc4 <_strtol_l.constprop.0+0x8c>
 8006dc0:	45a2      	cmp	sl, r4
 8006dc2:	db19      	blt.n	8006df8 <_strtol_l.constprop.0+0xc0>
 8006dc4:	fb06 4603 	mla	r6, r6, r3, r4
 8006dc8:	f04f 0c01 	mov.w	ip, #1
 8006dcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006dd0:	e7e8      	b.n	8006da4 <_strtol_l.constprop.0+0x6c>
 8006dd2:	2c2b      	cmp	r4, #43	; 0x2b
 8006dd4:	bf04      	itt	eq
 8006dd6:	782c      	ldrbeq	r4, [r5, #0]
 8006dd8:	1cb5      	addeq	r5, r6, #2
 8006dda:	e7ca      	b.n	8006d72 <_strtol_l.constprop.0+0x3a>
 8006ddc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006de0:	f1be 0f19 	cmp.w	lr, #25
 8006de4:	d801      	bhi.n	8006dea <_strtol_l.constprop.0+0xb2>
 8006de6:	3c37      	subs	r4, #55	; 0x37
 8006de8:	e7e2      	b.n	8006db0 <_strtol_l.constprop.0+0x78>
 8006dea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006dee:	f1be 0f19 	cmp.w	lr, #25
 8006df2:	d804      	bhi.n	8006dfe <_strtol_l.constprop.0+0xc6>
 8006df4:	3c57      	subs	r4, #87	; 0x57
 8006df6:	e7db      	b.n	8006db0 <_strtol_l.constprop.0+0x78>
 8006df8:	f04f 3cff 	mov.w	ip, #4294967295
 8006dfc:	e7e6      	b.n	8006dcc <_strtol_l.constprop.0+0x94>
 8006dfe:	f1bc 0f00 	cmp.w	ip, #0
 8006e02:	da05      	bge.n	8006e10 <_strtol_l.constprop.0+0xd8>
 8006e04:	2322      	movs	r3, #34	; 0x22
 8006e06:	6003      	str	r3, [r0, #0]
 8006e08:	4646      	mov	r6, r8
 8006e0a:	b942      	cbnz	r2, 8006e1e <_strtol_l.constprop.0+0xe6>
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	e79e      	b.n	8006d4e <_strtol_l.constprop.0+0x16>
 8006e10:	b107      	cbz	r7, 8006e14 <_strtol_l.constprop.0+0xdc>
 8006e12:	4276      	negs	r6, r6
 8006e14:	2a00      	cmp	r2, #0
 8006e16:	d0f9      	beq.n	8006e0c <_strtol_l.constprop.0+0xd4>
 8006e18:	f1bc 0f00 	cmp.w	ip, #0
 8006e1c:	d000      	beq.n	8006e20 <_strtol_l.constprop.0+0xe8>
 8006e1e:	1e69      	subs	r1, r5, #1
 8006e20:	6011      	str	r1, [r2, #0]
 8006e22:	e7f3      	b.n	8006e0c <_strtol_l.constprop.0+0xd4>
 8006e24:	2430      	movs	r4, #48	; 0x30
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1b1      	bne.n	8006d8e <_strtol_l.constprop.0+0x56>
 8006e2a:	2308      	movs	r3, #8
 8006e2c:	e7af      	b.n	8006d8e <_strtol_l.constprop.0+0x56>
 8006e2e:	2c30      	cmp	r4, #48	; 0x30
 8006e30:	d0a5      	beq.n	8006d7e <_strtol_l.constprop.0+0x46>
 8006e32:	230a      	movs	r3, #10
 8006e34:	e7ab      	b.n	8006d8e <_strtol_l.constprop.0+0x56>
 8006e36:	bf00      	nop
 8006e38:	0800cb89 	.word	0x0800cb89

08006e3c <_strtol_r>:
 8006e3c:	f7ff bf7c 	b.w	8006d38 <_strtol_l.constprop.0>

08006e40 <_write_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4d07      	ldr	r5, [pc, #28]	; (8006e60 <_write_r+0x20>)
 8006e44:	4604      	mov	r4, r0
 8006e46:	4608      	mov	r0, r1
 8006e48:	4611      	mov	r1, r2
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	602a      	str	r2, [r5, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f7fb fd12 	bl	8002878 <_write>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d102      	bne.n	8006e5e <_write_r+0x1e>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	b103      	cbz	r3, 8006e5e <_write_r+0x1e>
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}
 8006e60:	20000cb4 	.word	0x20000cb4

08006e64 <_close_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	4d06      	ldr	r5, [pc, #24]	; (8006e80 <_close_r+0x1c>)
 8006e68:	2300      	movs	r3, #0
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	4608      	mov	r0, r1
 8006e6e:	602b      	str	r3, [r5, #0]
 8006e70:	f7fb fd1e 	bl	80028b0 <_close>
 8006e74:	1c43      	adds	r3, r0, #1
 8006e76:	d102      	bne.n	8006e7e <_close_r+0x1a>
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	b103      	cbz	r3, 8006e7e <_close_r+0x1a>
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	bd38      	pop	{r3, r4, r5, pc}
 8006e80:	20000cb4 	.word	0x20000cb4

08006e84 <quorem>:
 8006e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	6903      	ldr	r3, [r0, #16]
 8006e8a:	690c      	ldr	r4, [r1, #16]
 8006e8c:	42a3      	cmp	r3, r4
 8006e8e:	4607      	mov	r7, r0
 8006e90:	f2c0 8081 	blt.w	8006f96 <quorem+0x112>
 8006e94:	3c01      	subs	r4, #1
 8006e96:	f101 0814 	add.w	r8, r1, #20
 8006e9a:	f100 0514 	add.w	r5, r0, #20
 8006e9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ea2:	9301      	str	r3, [sp, #4]
 8006ea4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eac:	3301      	adds	r3, #1
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006eb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006eb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ebc:	d331      	bcc.n	8006f22 <quorem+0x9e>
 8006ebe:	f04f 0e00 	mov.w	lr, #0
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	46ac      	mov	ip, r5
 8006ec6:	46f2      	mov	sl, lr
 8006ec8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ecc:	b293      	uxth	r3, r2
 8006ece:	fb06 e303 	mla	r3, r6, r3, lr
 8006ed2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	ebaa 0303 	sub.w	r3, sl, r3
 8006edc:	f8dc a000 	ldr.w	sl, [ip]
 8006ee0:	0c12      	lsrs	r2, r2, #16
 8006ee2:	fa13 f38a 	uxtah	r3, r3, sl
 8006ee6:	fb06 e202 	mla	r2, r6, r2, lr
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	9b00      	ldr	r3, [sp, #0]
 8006eee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ef2:	b292      	uxth	r2, r2
 8006ef4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006ef8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006efc:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f00:	4581      	cmp	r9, r0
 8006f02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f06:	f84c 3b04 	str.w	r3, [ip], #4
 8006f0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f0e:	d2db      	bcs.n	8006ec8 <quorem+0x44>
 8006f10:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f14:	b92b      	cbnz	r3, 8006f22 <quorem+0x9e>
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	3b04      	subs	r3, #4
 8006f1a:	429d      	cmp	r5, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	d32e      	bcc.n	8006f7e <quorem+0xfa>
 8006f20:	613c      	str	r4, [r7, #16]
 8006f22:	4638      	mov	r0, r7
 8006f24:	f001 fca4 	bl	8008870 <__mcmp>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	db24      	blt.n	8006f76 <quorem+0xf2>
 8006f2c:	3601      	adds	r6, #1
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f04f 0c00 	mov.w	ip, #0
 8006f34:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f38:	f8d0 e000 	ldr.w	lr, [r0]
 8006f3c:	b293      	uxth	r3, r2
 8006f3e:	ebac 0303 	sub.w	r3, ip, r3
 8006f42:	0c12      	lsrs	r2, r2, #16
 8006f44:	fa13 f38e 	uxtah	r3, r3, lr
 8006f48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f56:	45c1      	cmp	r9, r8
 8006f58:	f840 3b04 	str.w	r3, [r0], #4
 8006f5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f60:	d2e8      	bcs.n	8006f34 <quorem+0xb0>
 8006f62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f6a:	b922      	cbnz	r2, 8006f76 <quorem+0xf2>
 8006f6c:	3b04      	subs	r3, #4
 8006f6e:	429d      	cmp	r5, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	d30a      	bcc.n	8006f8a <quorem+0x106>
 8006f74:	613c      	str	r4, [r7, #16]
 8006f76:	4630      	mov	r0, r6
 8006f78:	b003      	add	sp, #12
 8006f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7e:	6812      	ldr	r2, [r2, #0]
 8006f80:	3b04      	subs	r3, #4
 8006f82:	2a00      	cmp	r2, #0
 8006f84:	d1cc      	bne.n	8006f20 <quorem+0x9c>
 8006f86:	3c01      	subs	r4, #1
 8006f88:	e7c7      	b.n	8006f1a <quorem+0x96>
 8006f8a:	6812      	ldr	r2, [r2, #0]
 8006f8c:	3b04      	subs	r3, #4
 8006f8e:	2a00      	cmp	r2, #0
 8006f90:	d1f0      	bne.n	8006f74 <quorem+0xf0>
 8006f92:	3c01      	subs	r4, #1
 8006f94:	e7eb      	b.n	8006f6e <quorem+0xea>
 8006f96:	2000      	movs	r0, #0
 8006f98:	e7ee      	b.n	8006f78 <quorem+0xf4>
 8006f9a:	0000      	movs	r0, r0
 8006f9c:	0000      	movs	r0, r0
	...

08006fa0 <_dtoa_r>:
 8006fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	ed2d 8b04 	vpush	{d8-d9}
 8006fa8:	ec57 6b10 	vmov	r6, r7, d0
 8006fac:	b093      	sub	sp, #76	; 0x4c
 8006fae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fb4:	9106      	str	r1, [sp, #24]
 8006fb6:	ee10 aa10 	vmov	sl, s0
 8006fba:	4604      	mov	r4, r0
 8006fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8006fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8006fc0:	46bb      	mov	fp, r7
 8006fc2:	b975      	cbnz	r5, 8006fe2 <_dtoa_r+0x42>
 8006fc4:	2010      	movs	r0, #16
 8006fc6:	f001 f95f 	bl	8008288 <malloc>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	6260      	str	r0, [r4, #36]	; 0x24
 8006fce:	b920      	cbnz	r0, 8006fda <_dtoa_r+0x3a>
 8006fd0:	4ba7      	ldr	r3, [pc, #668]	; (8007270 <_dtoa_r+0x2d0>)
 8006fd2:	21ea      	movs	r1, #234	; 0xea
 8006fd4:	48a7      	ldr	r0, [pc, #668]	; (8007274 <_dtoa_r+0x2d4>)
 8006fd6:	f002 fceb 	bl	80099b0 <__assert_func>
 8006fda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fde:	6005      	str	r5, [r0, #0]
 8006fe0:	60c5      	str	r5, [r0, #12]
 8006fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fe4:	6819      	ldr	r1, [r3, #0]
 8006fe6:	b151      	cbz	r1, 8006ffe <_dtoa_r+0x5e>
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	604a      	str	r2, [r1, #4]
 8006fec:	2301      	movs	r3, #1
 8006fee:	4093      	lsls	r3, r2
 8006ff0:	608b      	str	r3, [r1, #8]
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f001 f9b0 	bl	8008358 <_Bfree>
 8006ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	1e3b      	subs	r3, r7, #0
 8007000:	bfaa      	itet	ge
 8007002:	2300      	movge	r3, #0
 8007004:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007008:	f8c8 3000 	strge.w	r3, [r8]
 800700c:	4b9a      	ldr	r3, [pc, #616]	; (8007278 <_dtoa_r+0x2d8>)
 800700e:	bfbc      	itt	lt
 8007010:	2201      	movlt	r2, #1
 8007012:	f8c8 2000 	strlt.w	r2, [r8]
 8007016:	ea33 030b 	bics.w	r3, r3, fp
 800701a:	d11b      	bne.n	8007054 <_dtoa_r+0xb4>
 800701c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800701e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007028:	4333      	orrs	r3, r6
 800702a:	f000 8592 	beq.w	8007b52 <_dtoa_r+0xbb2>
 800702e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007030:	b963      	cbnz	r3, 800704c <_dtoa_r+0xac>
 8007032:	4b92      	ldr	r3, [pc, #584]	; (800727c <_dtoa_r+0x2dc>)
 8007034:	e022      	b.n	800707c <_dtoa_r+0xdc>
 8007036:	4b92      	ldr	r3, [pc, #584]	; (8007280 <_dtoa_r+0x2e0>)
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	3308      	adds	r3, #8
 800703c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	9801      	ldr	r0, [sp, #4]
 8007042:	b013      	add	sp, #76	; 0x4c
 8007044:	ecbd 8b04 	vpop	{d8-d9}
 8007048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704c:	4b8b      	ldr	r3, [pc, #556]	; (800727c <_dtoa_r+0x2dc>)
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	3303      	adds	r3, #3
 8007052:	e7f3      	b.n	800703c <_dtoa_r+0x9c>
 8007054:	2200      	movs	r2, #0
 8007056:	2300      	movs	r3, #0
 8007058:	4650      	mov	r0, sl
 800705a:	4659      	mov	r1, fp
 800705c:	f7f9 fd4c 	bl	8000af8 <__aeabi_dcmpeq>
 8007060:	ec4b ab19 	vmov	d9, sl, fp
 8007064:	4680      	mov	r8, r0
 8007066:	b158      	cbz	r0, 8007080 <_dtoa_r+0xe0>
 8007068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800706a:	2301      	movs	r3, #1
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 856b 	beq.w	8007b4c <_dtoa_r+0xbac>
 8007076:	4883      	ldr	r0, [pc, #524]	; (8007284 <_dtoa_r+0x2e4>)
 8007078:	6018      	str	r0, [r3, #0]
 800707a:	1e43      	subs	r3, r0, #1
 800707c:	9301      	str	r3, [sp, #4]
 800707e:	e7df      	b.n	8007040 <_dtoa_r+0xa0>
 8007080:	ec4b ab10 	vmov	d0, sl, fp
 8007084:	aa10      	add	r2, sp, #64	; 0x40
 8007086:	a911      	add	r1, sp, #68	; 0x44
 8007088:	4620      	mov	r0, r4
 800708a:	f001 fd13 	bl	8008ab4 <__d2b>
 800708e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007092:	ee08 0a10 	vmov	s16, r0
 8007096:	2d00      	cmp	r5, #0
 8007098:	f000 8084 	beq.w	80071a4 <_dtoa_r+0x204>
 800709c:	ee19 3a90 	vmov	r3, s19
 80070a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80070a8:	4656      	mov	r6, sl
 80070aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80070ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80070b6:	4b74      	ldr	r3, [pc, #464]	; (8007288 <_dtoa_r+0x2e8>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	4630      	mov	r0, r6
 80070bc:	4639      	mov	r1, r7
 80070be:	f7f9 f8fb 	bl	80002b8 <__aeabi_dsub>
 80070c2:	a365      	add	r3, pc, #404	; (adr r3, 8007258 <_dtoa_r+0x2b8>)
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	f7f9 faae 	bl	8000628 <__aeabi_dmul>
 80070cc:	a364      	add	r3, pc, #400	; (adr r3, 8007260 <_dtoa_r+0x2c0>)
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f7f9 f8f3 	bl	80002bc <__adddf3>
 80070d6:	4606      	mov	r6, r0
 80070d8:	4628      	mov	r0, r5
 80070da:	460f      	mov	r7, r1
 80070dc:	f7f9 fa3a 	bl	8000554 <__aeabi_i2d>
 80070e0:	a361      	add	r3, pc, #388	; (adr r3, 8007268 <_dtoa_r+0x2c8>)
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f7f9 fa9f 	bl	8000628 <__aeabi_dmul>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	4630      	mov	r0, r6
 80070f0:	4639      	mov	r1, r7
 80070f2:	f7f9 f8e3 	bl	80002bc <__adddf3>
 80070f6:	4606      	mov	r6, r0
 80070f8:	460f      	mov	r7, r1
 80070fa:	f7f9 fd45 	bl	8000b88 <__aeabi_d2iz>
 80070fe:	2200      	movs	r2, #0
 8007100:	9000      	str	r0, [sp, #0]
 8007102:	2300      	movs	r3, #0
 8007104:	4630      	mov	r0, r6
 8007106:	4639      	mov	r1, r7
 8007108:	f7f9 fd00 	bl	8000b0c <__aeabi_dcmplt>
 800710c:	b150      	cbz	r0, 8007124 <_dtoa_r+0x184>
 800710e:	9800      	ldr	r0, [sp, #0]
 8007110:	f7f9 fa20 	bl	8000554 <__aeabi_i2d>
 8007114:	4632      	mov	r2, r6
 8007116:	463b      	mov	r3, r7
 8007118:	f7f9 fcee 	bl	8000af8 <__aeabi_dcmpeq>
 800711c:	b910      	cbnz	r0, 8007124 <_dtoa_r+0x184>
 800711e:	9b00      	ldr	r3, [sp, #0]
 8007120:	3b01      	subs	r3, #1
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	9b00      	ldr	r3, [sp, #0]
 8007126:	2b16      	cmp	r3, #22
 8007128:	d85a      	bhi.n	80071e0 <_dtoa_r+0x240>
 800712a:	9a00      	ldr	r2, [sp, #0]
 800712c:	4b57      	ldr	r3, [pc, #348]	; (800728c <_dtoa_r+0x2ec>)
 800712e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	ec51 0b19 	vmov	r0, r1, d9
 800713a:	f7f9 fce7 	bl	8000b0c <__aeabi_dcmplt>
 800713e:	2800      	cmp	r0, #0
 8007140:	d050      	beq.n	80071e4 <_dtoa_r+0x244>
 8007142:	9b00      	ldr	r3, [sp, #0]
 8007144:	3b01      	subs	r3, #1
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	2300      	movs	r3, #0
 800714a:	930b      	str	r3, [sp, #44]	; 0x2c
 800714c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800714e:	1b5d      	subs	r5, r3, r5
 8007150:	1e6b      	subs	r3, r5, #1
 8007152:	9305      	str	r3, [sp, #20]
 8007154:	bf45      	ittet	mi
 8007156:	f1c5 0301 	rsbmi	r3, r5, #1
 800715a:	9304      	strmi	r3, [sp, #16]
 800715c:	2300      	movpl	r3, #0
 800715e:	2300      	movmi	r3, #0
 8007160:	bf4c      	ite	mi
 8007162:	9305      	strmi	r3, [sp, #20]
 8007164:	9304      	strpl	r3, [sp, #16]
 8007166:	9b00      	ldr	r3, [sp, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	db3d      	blt.n	80071e8 <_dtoa_r+0x248>
 800716c:	9b05      	ldr	r3, [sp, #20]
 800716e:	9a00      	ldr	r2, [sp, #0]
 8007170:	920a      	str	r2, [sp, #40]	; 0x28
 8007172:	4413      	add	r3, r2
 8007174:	9305      	str	r3, [sp, #20]
 8007176:	2300      	movs	r3, #0
 8007178:	9307      	str	r3, [sp, #28]
 800717a:	9b06      	ldr	r3, [sp, #24]
 800717c:	2b09      	cmp	r3, #9
 800717e:	f200 8089 	bhi.w	8007294 <_dtoa_r+0x2f4>
 8007182:	2b05      	cmp	r3, #5
 8007184:	bfc4      	itt	gt
 8007186:	3b04      	subgt	r3, #4
 8007188:	9306      	strgt	r3, [sp, #24]
 800718a:	9b06      	ldr	r3, [sp, #24]
 800718c:	f1a3 0302 	sub.w	r3, r3, #2
 8007190:	bfcc      	ite	gt
 8007192:	2500      	movgt	r5, #0
 8007194:	2501      	movle	r5, #1
 8007196:	2b03      	cmp	r3, #3
 8007198:	f200 8087 	bhi.w	80072aa <_dtoa_r+0x30a>
 800719c:	e8df f003 	tbb	[pc, r3]
 80071a0:	59383a2d 	.word	0x59383a2d
 80071a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80071a8:	441d      	add	r5, r3
 80071aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	bfc1      	itttt	gt
 80071b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80071ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80071be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071c2:	bfda      	itte	le
 80071c4:	f1c3 0320 	rsble	r3, r3, #32
 80071c8:	fa06 f003 	lslle.w	r0, r6, r3
 80071cc:	4318      	orrgt	r0, r3
 80071ce:	f7f9 f9b1 	bl	8000534 <__aeabi_ui2d>
 80071d2:	2301      	movs	r3, #1
 80071d4:	4606      	mov	r6, r0
 80071d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80071da:	3d01      	subs	r5, #1
 80071dc:	930e      	str	r3, [sp, #56]	; 0x38
 80071de:	e76a      	b.n	80070b6 <_dtoa_r+0x116>
 80071e0:	2301      	movs	r3, #1
 80071e2:	e7b2      	b.n	800714a <_dtoa_r+0x1aa>
 80071e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80071e6:	e7b1      	b.n	800714c <_dtoa_r+0x1ac>
 80071e8:	9b04      	ldr	r3, [sp, #16]
 80071ea:	9a00      	ldr	r2, [sp, #0]
 80071ec:	1a9b      	subs	r3, r3, r2
 80071ee:	9304      	str	r3, [sp, #16]
 80071f0:	4253      	negs	r3, r2
 80071f2:	9307      	str	r3, [sp, #28]
 80071f4:	2300      	movs	r3, #0
 80071f6:	930a      	str	r3, [sp, #40]	; 0x28
 80071f8:	e7bf      	b.n	800717a <_dtoa_r+0x1da>
 80071fa:	2300      	movs	r3, #0
 80071fc:	9308      	str	r3, [sp, #32]
 80071fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007200:	2b00      	cmp	r3, #0
 8007202:	dc55      	bgt.n	80072b0 <_dtoa_r+0x310>
 8007204:	2301      	movs	r3, #1
 8007206:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800720a:	461a      	mov	r2, r3
 800720c:	9209      	str	r2, [sp, #36]	; 0x24
 800720e:	e00c      	b.n	800722a <_dtoa_r+0x28a>
 8007210:	2301      	movs	r3, #1
 8007212:	e7f3      	b.n	80071fc <_dtoa_r+0x25c>
 8007214:	2300      	movs	r3, #0
 8007216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007218:	9308      	str	r3, [sp, #32]
 800721a:	9b00      	ldr	r3, [sp, #0]
 800721c:	4413      	add	r3, r2
 800721e:	9302      	str	r3, [sp, #8]
 8007220:	3301      	adds	r3, #1
 8007222:	2b01      	cmp	r3, #1
 8007224:	9303      	str	r3, [sp, #12]
 8007226:	bfb8      	it	lt
 8007228:	2301      	movlt	r3, #1
 800722a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800722c:	2200      	movs	r2, #0
 800722e:	6042      	str	r2, [r0, #4]
 8007230:	2204      	movs	r2, #4
 8007232:	f102 0614 	add.w	r6, r2, #20
 8007236:	429e      	cmp	r6, r3
 8007238:	6841      	ldr	r1, [r0, #4]
 800723a:	d93d      	bls.n	80072b8 <_dtoa_r+0x318>
 800723c:	4620      	mov	r0, r4
 800723e:	f001 f84b 	bl	80082d8 <_Balloc>
 8007242:	9001      	str	r0, [sp, #4]
 8007244:	2800      	cmp	r0, #0
 8007246:	d13b      	bne.n	80072c0 <_dtoa_r+0x320>
 8007248:	4b11      	ldr	r3, [pc, #68]	; (8007290 <_dtoa_r+0x2f0>)
 800724a:	4602      	mov	r2, r0
 800724c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007250:	e6c0      	b.n	8006fd4 <_dtoa_r+0x34>
 8007252:	2301      	movs	r3, #1
 8007254:	e7df      	b.n	8007216 <_dtoa_r+0x276>
 8007256:	bf00      	nop
 8007258:	636f4361 	.word	0x636f4361
 800725c:	3fd287a7 	.word	0x3fd287a7
 8007260:	8b60c8b3 	.word	0x8b60c8b3
 8007264:	3fc68a28 	.word	0x3fc68a28
 8007268:	509f79fb 	.word	0x509f79fb
 800726c:	3fd34413 	.word	0x3fd34413
 8007270:	0800cc96 	.word	0x0800cc96
 8007274:	0800ccad 	.word	0x0800ccad
 8007278:	7ff00000 	.word	0x7ff00000
 800727c:	0800cc92 	.word	0x0800cc92
 8007280:	0800cc89 	.word	0x0800cc89
 8007284:	0800cf02 	.word	0x0800cf02
 8007288:	3ff80000 	.word	0x3ff80000
 800728c:	0800ce18 	.word	0x0800ce18
 8007290:	0800cd08 	.word	0x0800cd08
 8007294:	2501      	movs	r5, #1
 8007296:	2300      	movs	r3, #0
 8007298:	9306      	str	r3, [sp, #24]
 800729a:	9508      	str	r5, [sp, #32]
 800729c:	f04f 33ff 	mov.w	r3, #4294967295
 80072a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80072a4:	2200      	movs	r2, #0
 80072a6:	2312      	movs	r3, #18
 80072a8:	e7b0      	b.n	800720c <_dtoa_r+0x26c>
 80072aa:	2301      	movs	r3, #1
 80072ac:	9308      	str	r3, [sp, #32]
 80072ae:	e7f5      	b.n	800729c <_dtoa_r+0x2fc>
 80072b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80072b6:	e7b8      	b.n	800722a <_dtoa_r+0x28a>
 80072b8:	3101      	adds	r1, #1
 80072ba:	6041      	str	r1, [r0, #4]
 80072bc:	0052      	lsls	r2, r2, #1
 80072be:	e7b8      	b.n	8007232 <_dtoa_r+0x292>
 80072c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072c2:	9a01      	ldr	r2, [sp, #4]
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	9b03      	ldr	r3, [sp, #12]
 80072c8:	2b0e      	cmp	r3, #14
 80072ca:	f200 809d 	bhi.w	8007408 <_dtoa_r+0x468>
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	f000 809a 	beq.w	8007408 <_dtoa_r+0x468>
 80072d4:	9b00      	ldr	r3, [sp, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	dd32      	ble.n	8007340 <_dtoa_r+0x3a0>
 80072da:	4ab7      	ldr	r2, [pc, #732]	; (80075b8 <_dtoa_r+0x618>)
 80072dc:	f003 030f 	and.w	r3, r3, #15
 80072e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072e8:	9b00      	ldr	r3, [sp, #0]
 80072ea:	05d8      	lsls	r0, r3, #23
 80072ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80072f0:	d516      	bpl.n	8007320 <_dtoa_r+0x380>
 80072f2:	4bb2      	ldr	r3, [pc, #712]	; (80075bc <_dtoa_r+0x61c>)
 80072f4:	ec51 0b19 	vmov	r0, r1, d9
 80072f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072fc:	f7f9 fabe 	bl	800087c <__aeabi_ddiv>
 8007300:	f007 070f 	and.w	r7, r7, #15
 8007304:	4682      	mov	sl, r0
 8007306:	468b      	mov	fp, r1
 8007308:	2503      	movs	r5, #3
 800730a:	4eac      	ldr	r6, [pc, #688]	; (80075bc <_dtoa_r+0x61c>)
 800730c:	b957      	cbnz	r7, 8007324 <_dtoa_r+0x384>
 800730e:	4642      	mov	r2, r8
 8007310:	464b      	mov	r3, r9
 8007312:	4650      	mov	r0, sl
 8007314:	4659      	mov	r1, fp
 8007316:	f7f9 fab1 	bl	800087c <__aeabi_ddiv>
 800731a:	4682      	mov	sl, r0
 800731c:	468b      	mov	fp, r1
 800731e:	e028      	b.n	8007372 <_dtoa_r+0x3d2>
 8007320:	2502      	movs	r5, #2
 8007322:	e7f2      	b.n	800730a <_dtoa_r+0x36a>
 8007324:	07f9      	lsls	r1, r7, #31
 8007326:	d508      	bpl.n	800733a <_dtoa_r+0x39a>
 8007328:	4640      	mov	r0, r8
 800732a:	4649      	mov	r1, r9
 800732c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007330:	f7f9 f97a 	bl	8000628 <__aeabi_dmul>
 8007334:	3501      	adds	r5, #1
 8007336:	4680      	mov	r8, r0
 8007338:	4689      	mov	r9, r1
 800733a:	107f      	asrs	r7, r7, #1
 800733c:	3608      	adds	r6, #8
 800733e:	e7e5      	b.n	800730c <_dtoa_r+0x36c>
 8007340:	f000 809b 	beq.w	800747a <_dtoa_r+0x4da>
 8007344:	9b00      	ldr	r3, [sp, #0]
 8007346:	4f9d      	ldr	r7, [pc, #628]	; (80075bc <_dtoa_r+0x61c>)
 8007348:	425e      	negs	r6, r3
 800734a:	4b9b      	ldr	r3, [pc, #620]	; (80075b8 <_dtoa_r+0x618>)
 800734c:	f006 020f 	and.w	r2, r6, #15
 8007350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	ec51 0b19 	vmov	r0, r1, d9
 800735c:	f7f9 f964 	bl	8000628 <__aeabi_dmul>
 8007360:	1136      	asrs	r6, r6, #4
 8007362:	4682      	mov	sl, r0
 8007364:	468b      	mov	fp, r1
 8007366:	2300      	movs	r3, #0
 8007368:	2502      	movs	r5, #2
 800736a:	2e00      	cmp	r6, #0
 800736c:	d17a      	bne.n	8007464 <_dtoa_r+0x4c4>
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1d3      	bne.n	800731a <_dtoa_r+0x37a>
 8007372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8082 	beq.w	800747e <_dtoa_r+0x4de>
 800737a:	4b91      	ldr	r3, [pc, #580]	; (80075c0 <_dtoa_r+0x620>)
 800737c:	2200      	movs	r2, #0
 800737e:	4650      	mov	r0, sl
 8007380:	4659      	mov	r1, fp
 8007382:	f7f9 fbc3 	bl	8000b0c <__aeabi_dcmplt>
 8007386:	2800      	cmp	r0, #0
 8007388:	d079      	beq.n	800747e <_dtoa_r+0x4de>
 800738a:	9b03      	ldr	r3, [sp, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d076      	beq.n	800747e <_dtoa_r+0x4de>
 8007390:	9b02      	ldr	r3, [sp, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	dd36      	ble.n	8007404 <_dtoa_r+0x464>
 8007396:	9b00      	ldr	r3, [sp, #0]
 8007398:	4650      	mov	r0, sl
 800739a:	4659      	mov	r1, fp
 800739c:	1e5f      	subs	r7, r3, #1
 800739e:	2200      	movs	r2, #0
 80073a0:	4b88      	ldr	r3, [pc, #544]	; (80075c4 <_dtoa_r+0x624>)
 80073a2:	f7f9 f941 	bl	8000628 <__aeabi_dmul>
 80073a6:	9e02      	ldr	r6, [sp, #8]
 80073a8:	4682      	mov	sl, r0
 80073aa:	468b      	mov	fp, r1
 80073ac:	3501      	adds	r5, #1
 80073ae:	4628      	mov	r0, r5
 80073b0:	f7f9 f8d0 	bl	8000554 <__aeabi_i2d>
 80073b4:	4652      	mov	r2, sl
 80073b6:	465b      	mov	r3, fp
 80073b8:	f7f9 f936 	bl	8000628 <__aeabi_dmul>
 80073bc:	4b82      	ldr	r3, [pc, #520]	; (80075c8 <_dtoa_r+0x628>)
 80073be:	2200      	movs	r2, #0
 80073c0:	f7f8 ff7c 	bl	80002bc <__adddf3>
 80073c4:	46d0      	mov	r8, sl
 80073c6:	46d9      	mov	r9, fp
 80073c8:	4682      	mov	sl, r0
 80073ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80073ce:	2e00      	cmp	r6, #0
 80073d0:	d158      	bne.n	8007484 <_dtoa_r+0x4e4>
 80073d2:	4b7e      	ldr	r3, [pc, #504]	; (80075cc <_dtoa_r+0x62c>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	4640      	mov	r0, r8
 80073d8:	4649      	mov	r1, r9
 80073da:	f7f8 ff6d 	bl	80002b8 <__aeabi_dsub>
 80073de:	4652      	mov	r2, sl
 80073e0:	465b      	mov	r3, fp
 80073e2:	4680      	mov	r8, r0
 80073e4:	4689      	mov	r9, r1
 80073e6:	f7f9 fbaf 	bl	8000b48 <__aeabi_dcmpgt>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	f040 8295 	bne.w	800791a <_dtoa_r+0x97a>
 80073f0:	4652      	mov	r2, sl
 80073f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80073f6:	4640      	mov	r0, r8
 80073f8:	4649      	mov	r1, r9
 80073fa:	f7f9 fb87 	bl	8000b0c <__aeabi_dcmplt>
 80073fe:	2800      	cmp	r0, #0
 8007400:	f040 8289 	bne.w	8007916 <_dtoa_r+0x976>
 8007404:	ec5b ab19 	vmov	sl, fp, d9
 8007408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800740a:	2b00      	cmp	r3, #0
 800740c:	f2c0 8148 	blt.w	80076a0 <_dtoa_r+0x700>
 8007410:	9a00      	ldr	r2, [sp, #0]
 8007412:	2a0e      	cmp	r2, #14
 8007414:	f300 8144 	bgt.w	80076a0 <_dtoa_r+0x700>
 8007418:	4b67      	ldr	r3, [pc, #412]	; (80075b8 <_dtoa_r+0x618>)
 800741a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800741e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	f280 80d5 	bge.w	80075d4 <_dtoa_r+0x634>
 800742a:	9b03      	ldr	r3, [sp, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f300 80d1 	bgt.w	80075d4 <_dtoa_r+0x634>
 8007432:	f040 826f 	bne.w	8007914 <_dtoa_r+0x974>
 8007436:	4b65      	ldr	r3, [pc, #404]	; (80075cc <_dtoa_r+0x62c>)
 8007438:	2200      	movs	r2, #0
 800743a:	4640      	mov	r0, r8
 800743c:	4649      	mov	r1, r9
 800743e:	f7f9 f8f3 	bl	8000628 <__aeabi_dmul>
 8007442:	4652      	mov	r2, sl
 8007444:	465b      	mov	r3, fp
 8007446:	f7f9 fb75 	bl	8000b34 <__aeabi_dcmpge>
 800744a:	9e03      	ldr	r6, [sp, #12]
 800744c:	4637      	mov	r7, r6
 800744e:	2800      	cmp	r0, #0
 8007450:	f040 8245 	bne.w	80078de <_dtoa_r+0x93e>
 8007454:	9d01      	ldr	r5, [sp, #4]
 8007456:	2331      	movs	r3, #49	; 0x31
 8007458:	f805 3b01 	strb.w	r3, [r5], #1
 800745c:	9b00      	ldr	r3, [sp, #0]
 800745e:	3301      	adds	r3, #1
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	e240      	b.n	80078e6 <_dtoa_r+0x946>
 8007464:	07f2      	lsls	r2, r6, #31
 8007466:	d505      	bpl.n	8007474 <_dtoa_r+0x4d4>
 8007468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800746c:	f7f9 f8dc 	bl	8000628 <__aeabi_dmul>
 8007470:	3501      	adds	r5, #1
 8007472:	2301      	movs	r3, #1
 8007474:	1076      	asrs	r6, r6, #1
 8007476:	3708      	adds	r7, #8
 8007478:	e777      	b.n	800736a <_dtoa_r+0x3ca>
 800747a:	2502      	movs	r5, #2
 800747c:	e779      	b.n	8007372 <_dtoa_r+0x3d2>
 800747e:	9f00      	ldr	r7, [sp, #0]
 8007480:	9e03      	ldr	r6, [sp, #12]
 8007482:	e794      	b.n	80073ae <_dtoa_r+0x40e>
 8007484:	9901      	ldr	r1, [sp, #4]
 8007486:	4b4c      	ldr	r3, [pc, #304]	; (80075b8 <_dtoa_r+0x618>)
 8007488:	4431      	add	r1, r6
 800748a:	910d      	str	r1, [sp, #52]	; 0x34
 800748c:	9908      	ldr	r1, [sp, #32]
 800748e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007492:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007496:	2900      	cmp	r1, #0
 8007498:	d043      	beq.n	8007522 <_dtoa_r+0x582>
 800749a:	494d      	ldr	r1, [pc, #308]	; (80075d0 <_dtoa_r+0x630>)
 800749c:	2000      	movs	r0, #0
 800749e:	f7f9 f9ed 	bl	800087c <__aeabi_ddiv>
 80074a2:	4652      	mov	r2, sl
 80074a4:	465b      	mov	r3, fp
 80074a6:	f7f8 ff07 	bl	80002b8 <__aeabi_dsub>
 80074aa:	9d01      	ldr	r5, [sp, #4]
 80074ac:	4682      	mov	sl, r0
 80074ae:	468b      	mov	fp, r1
 80074b0:	4649      	mov	r1, r9
 80074b2:	4640      	mov	r0, r8
 80074b4:	f7f9 fb68 	bl	8000b88 <__aeabi_d2iz>
 80074b8:	4606      	mov	r6, r0
 80074ba:	f7f9 f84b 	bl	8000554 <__aeabi_i2d>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4640      	mov	r0, r8
 80074c4:	4649      	mov	r1, r9
 80074c6:	f7f8 fef7 	bl	80002b8 <__aeabi_dsub>
 80074ca:	3630      	adds	r6, #48	; 0x30
 80074cc:	f805 6b01 	strb.w	r6, [r5], #1
 80074d0:	4652      	mov	r2, sl
 80074d2:	465b      	mov	r3, fp
 80074d4:	4680      	mov	r8, r0
 80074d6:	4689      	mov	r9, r1
 80074d8:	f7f9 fb18 	bl	8000b0c <__aeabi_dcmplt>
 80074dc:	2800      	cmp	r0, #0
 80074de:	d163      	bne.n	80075a8 <_dtoa_r+0x608>
 80074e0:	4642      	mov	r2, r8
 80074e2:	464b      	mov	r3, r9
 80074e4:	4936      	ldr	r1, [pc, #216]	; (80075c0 <_dtoa_r+0x620>)
 80074e6:	2000      	movs	r0, #0
 80074e8:	f7f8 fee6 	bl	80002b8 <__aeabi_dsub>
 80074ec:	4652      	mov	r2, sl
 80074ee:	465b      	mov	r3, fp
 80074f0:	f7f9 fb0c 	bl	8000b0c <__aeabi_dcmplt>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	f040 80b5 	bne.w	8007664 <_dtoa_r+0x6c4>
 80074fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074fc:	429d      	cmp	r5, r3
 80074fe:	d081      	beq.n	8007404 <_dtoa_r+0x464>
 8007500:	4b30      	ldr	r3, [pc, #192]	; (80075c4 <_dtoa_r+0x624>)
 8007502:	2200      	movs	r2, #0
 8007504:	4650      	mov	r0, sl
 8007506:	4659      	mov	r1, fp
 8007508:	f7f9 f88e 	bl	8000628 <__aeabi_dmul>
 800750c:	4b2d      	ldr	r3, [pc, #180]	; (80075c4 <_dtoa_r+0x624>)
 800750e:	4682      	mov	sl, r0
 8007510:	468b      	mov	fp, r1
 8007512:	4640      	mov	r0, r8
 8007514:	4649      	mov	r1, r9
 8007516:	2200      	movs	r2, #0
 8007518:	f7f9 f886 	bl	8000628 <__aeabi_dmul>
 800751c:	4680      	mov	r8, r0
 800751e:	4689      	mov	r9, r1
 8007520:	e7c6      	b.n	80074b0 <_dtoa_r+0x510>
 8007522:	4650      	mov	r0, sl
 8007524:	4659      	mov	r1, fp
 8007526:	f7f9 f87f 	bl	8000628 <__aeabi_dmul>
 800752a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800752c:	9d01      	ldr	r5, [sp, #4]
 800752e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007530:	4682      	mov	sl, r0
 8007532:	468b      	mov	fp, r1
 8007534:	4649      	mov	r1, r9
 8007536:	4640      	mov	r0, r8
 8007538:	f7f9 fb26 	bl	8000b88 <__aeabi_d2iz>
 800753c:	4606      	mov	r6, r0
 800753e:	f7f9 f809 	bl	8000554 <__aeabi_i2d>
 8007542:	3630      	adds	r6, #48	; 0x30
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4640      	mov	r0, r8
 800754a:	4649      	mov	r1, r9
 800754c:	f7f8 feb4 	bl	80002b8 <__aeabi_dsub>
 8007550:	f805 6b01 	strb.w	r6, [r5], #1
 8007554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007556:	429d      	cmp	r5, r3
 8007558:	4680      	mov	r8, r0
 800755a:	4689      	mov	r9, r1
 800755c:	f04f 0200 	mov.w	r2, #0
 8007560:	d124      	bne.n	80075ac <_dtoa_r+0x60c>
 8007562:	4b1b      	ldr	r3, [pc, #108]	; (80075d0 <_dtoa_r+0x630>)
 8007564:	4650      	mov	r0, sl
 8007566:	4659      	mov	r1, fp
 8007568:	f7f8 fea8 	bl	80002bc <__adddf3>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4640      	mov	r0, r8
 8007572:	4649      	mov	r1, r9
 8007574:	f7f9 fae8 	bl	8000b48 <__aeabi_dcmpgt>
 8007578:	2800      	cmp	r0, #0
 800757a:	d173      	bne.n	8007664 <_dtoa_r+0x6c4>
 800757c:	4652      	mov	r2, sl
 800757e:	465b      	mov	r3, fp
 8007580:	4913      	ldr	r1, [pc, #76]	; (80075d0 <_dtoa_r+0x630>)
 8007582:	2000      	movs	r0, #0
 8007584:	f7f8 fe98 	bl	80002b8 <__aeabi_dsub>
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	4640      	mov	r0, r8
 800758e:	4649      	mov	r1, r9
 8007590:	f7f9 fabc 	bl	8000b0c <__aeabi_dcmplt>
 8007594:	2800      	cmp	r0, #0
 8007596:	f43f af35 	beq.w	8007404 <_dtoa_r+0x464>
 800759a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800759c:	1e6b      	subs	r3, r5, #1
 800759e:	930f      	str	r3, [sp, #60]	; 0x3c
 80075a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075a4:	2b30      	cmp	r3, #48	; 0x30
 80075a6:	d0f8      	beq.n	800759a <_dtoa_r+0x5fa>
 80075a8:	9700      	str	r7, [sp, #0]
 80075aa:	e049      	b.n	8007640 <_dtoa_r+0x6a0>
 80075ac:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <_dtoa_r+0x624>)
 80075ae:	f7f9 f83b 	bl	8000628 <__aeabi_dmul>
 80075b2:	4680      	mov	r8, r0
 80075b4:	4689      	mov	r9, r1
 80075b6:	e7bd      	b.n	8007534 <_dtoa_r+0x594>
 80075b8:	0800ce18 	.word	0x0800ce18
 80075bc:	0800cdf0 	.word	0x0800cdf0
 80075c0:	3ff00000 	.word	0x3ff00000
 80075c4:	40240000 	.word	0x40240000
 80075c8:	401c0000 	.word	0x401c0000
 80075cc:	40140000 	.word	0x40140000
 80075d0:	3fe00000 	.word	0x3fe00000
 80075d4:	9d01      	ldr	r5, [sp, #4]
 80075d6:	4656      	mov	r6, sl
 80075d8:	465f      	mov	r7, fp
 80075da:	4642      	mov	r2, r8
 80075dc:	464b      	mov	r3, r9
 80075de:	4630      	mov	r0, r6
 80075e0:	4639      	mov	r1, r7
 80075e2:	f7f9 f94b 	bl	800087c <__aeabi_ddiv>
 80075e6:	f7f9 facf 	bl	8000b88 <__aeabi_d2iz>
 80075ea:	4682      	mov	sl, r0
 80075ec:	f7f8 ffb2 	bl	8000554 <__aeabi_i2d>
 80075f0:	4642      	mov	r2, r8
 80075f2:	464b      	mov	r3, r9
 80075f4:	f7f9 f818 	bl	8000628 <__aeabi_dmul>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4630      	mov	r0, r6
 80075fe:	4639      	mov	r1, r7
 8007600:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007604:	f7f8 fe58 	bl	80002b8 <__aeabi_dsub>
 8007608:	f805 6b01 	strb.w	r6, [r5], #1
 800760c:	9e01      	ldr	r6, [sp, #4]
 800760e:	9f03      	ldr	r7, [sp, #12]
 8007610:	1bae      	subs	r6, r5, r6
 8007612:	42b7      	cmp	r7, r6
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	d135      	bne.n	8007686 <_dtoa_r+0x6e6>
 800761a:	f7f8 fe4f 	bl	80002bc <__adddf3>
 800761e:	4642      	mov	r2, r8
 8007620:	464b      	mov	r3, r9
 8007622:	4606      	mov	r6, r0
 8007624:	460f      	mov	r7, r1
 8007626:	f7f9 fa8f 	bl	8000b48 <__aeabi_dcmpgt>
 800762a:	b9d0      	cbnz	r0, 8007662 <_dtoa_r+0x6c2>
 800762c:	4642      	mov	r2, r8
 800762e:	464b      	mov	r3, r9
 8007630:	4630      	mov	r0, r6
 8007632:	4639      	mov	r1, r7
 8007634:	f7f9 fa60 	bl	8000af8 <__aeabi_dcmpeq>
 8007638:	b110      	cbz	r0, 8007640 <_dtoa_r+0x6a0>
 800763a:	f01a 0f01 	tst.w	sl, #1
 800763e:	d110      	bne.n	8007662 <_dtoa_r+0x6c2>
 8007640:	4620      	mov	r0, r4
 8007642:	ee18 1a10 	vmov	r1, s16
 8007646:	f000 fe87 	bl	8008358 <_Bfree>
 800764a:	2300      	movs	r3, #0
 800764c:	9800      	ldr	r0, [sp, #0]
 800764e:	702b      	strb	r3, [r5, #0]
 8007650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007652:	3001      	adds	r0, #1
 8007654:	6018      	str	r0, [r3, #0]
 8007656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007658:	2b00      	cmp	r3, #0
 800765a:	f43f acf1 	beq.w	8007040 <_dtoa_r+0xa0>
 800765e:	601d      	str	r5, [r3, #0]
 8007660:	e4ee      	b.n	8007040 <_dtoa_r+0xa0>
 8007662:	9f00      	ldr	r7, [sp, #0]
 8007664:	462b      	mov	r3, r5
 8007666:	461d      	mov	r5, r3
 8007668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800766c:	2a39      	cmp	r2, #57	; 0x39
 800766e:	d106      	bne.n	800767e <_dtoa_r+0x6de>
 8007670:	9a01      	ldr	r2, [sp, #4]
 8007672:	429a      	cmp	r2, r3
 8007674:	d1f7      	bne.n	8007666 <_dtoa_r+0x6c6>
 8007676:	9901      	ldr	r1, [sp, #4]
 8007678:	2230      	movs	r2, #48	; 0x30
 800767a:	3701      	adds	r7, #1
 800767c:	700a      	strb	r2, [r1, #0]
 800767e:	781a      	ldrb	r2, [r3, #0]
 8007680:	3201      	adds	r2, #1
 8007682:	701a      	strb	r2, [r3, #0]
 8007684:	e790      	b.n	80075a8 <_dtoa_r+0x608>
 8007686:	4ba6      	ldr	r3, [pc, #664]	; (8007920 <_dtoa_r+0x980>)
 8007688:	2200      	movs	r2, #0
 800768a:	f7f8 ffcd 	bl	8000628 <__aeabi_dmul>
 800768e:	2200      	movs	r2, #0
 8007690:	2300      	movs	r3, #0
 8007692:	4606      	mov	r6, r0
 8007694:	460f      	mov	r7, r1
 8007696:	f7f9 fa2f 	bl	8000af8 <__aeabi_dcmpeq>
 800769a:	2800      	cmp	r0, #0
 800769c:	d09d      	beq.n	80075da <_dtoa_r+0x63a>
 800769e:	e7cf      	b.n	8007640 <_dtoa_r+0x6a0>
 80076a0:	9a08      	ldr	r2, [sp, #32]
 80076a2:	2a00      	cmp	r2, #0
 80076a4:	f000 80d7 	beq.w	8007856 <_dtoa_r+0x8b6>
 80076a8:	9a06      	ldr	r2, [sp, #24]
 80076aa:	2a01      	cmp	r2, #1
 80076ac:	f300 80ba 	bgt.w	8007824 <_dtoa_r+0x884>
 80076b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076b2:	2a00      	cmp	r2, #0
 80076b4:	f000 80b2 	beq.w	800781c <_dtoa_r+0x87c>
 80076b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076bc:	9e07      	ldr	r6, [sp, #28]
 80076be:	9d04      	ldr	r5, [sp, #16]
 80076c0:	9a04      	ldr	r2, [sp, #16]
 80076c2:	441a      	add	r2, r3
 80076c4:	9204      	str	r2, [sp, #16]
 80076c6:	9a05      	ldr	r2, [sp, #20]
 80076c8:	2101      	movs	r1, #1
 80076ca:	441a      	add	r2, r3
 80076cc:	4620      	mov	r0, r4
 80076ce:	9205      	str	r2, [sp, #20]
 80076d0:	f000 ff44 	bl	800855c <__i2b>
 80076d4:	4607      	mov	r7, r0
 80076d6:	2d00      	cmp	r5, #0
 80076d8:	dd0c      	ble.n	80076f4 <_dtoa_r+0x754>
 80076da:	9b05      	ldr	r3, [sp, #20]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	dd09      	ble.n	80076f4 <_dtoa_r+0x754>
 80076e0:	42ab      	cmp	r3, r5
 80076e2:	9a04      	ldr	r2, [sp, #16]
 80076e4:	bfa8      	it	ge
 80076e6:	462b      	movge	r3, r5
 80076e8:	1ad2      	subs	r2, r2, r3
 80076ea:	9204      	str	r2, [sp, #16]
 80076ec:	9a05      	ldr	r2, [sp, #20]
 80076ee:	1aed      	subs	r5, r5, r3
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	9305      	str	r3, [sp, #20]
 80076f4:	9b07      	ldr	r3, [sp, #28]
 80076f6:	b31b      	cbz	r3, 8007740 <_dtoa_r+0x7a0>
 80076f8:	9b08      	ldr	r3, [sp, #32]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 80af 	beq.w	800785e <_dtoa_r+0x8be>
 8007700:	2e00      	cmp	r6, #0
 8007702:	dd13      	ble.n	800772c <_dtoa_r+0x78c>
 8007704:	4639      	mov	r1, r7
 8007706:	4632      	mov	r2, r6
 8007708:	4620      	mov	r0, r4
 800770a:	f000 ffe7 	bl	80086dc <__pow5mult>
 800770e:	ee18 2a10 	vmov	r2, s16
 8007712:	4601      	mov	r1, r0
 8007714:	4607      	mov	r7, r0
 8007716:	4620      	mov	r0, r4
 8007718:	f000 ff36 	bl	8008588 <__multiply>
 800771c:	ee18 1a10 	vmov	r1, s16
 8007720:	4680      	mov	r8, r0
 8007722:	4620      	mov	r0, r4
 8007724:	f000 fe18 	bl	8008358 <_Bfree>
 8007728:	ee08 8a10 	vmov	s16, r8
 800772c:	9b07      	ldr	r3, [sp, #28]
 800772e:	1b9a      	subs	r2, r3, r6
 8007730:	d006      	beq.n	8007740 <_dtoa_r+0x7a0>
 8007732:	ee18 1a10 	vmov	r1, s16
 8007736:	4620      	mov	r0, r4
 8007738:	f000 ffd0 	bl	80086dc <__pow5mult>
 800773c:	ee08 0a10 	vmov	s16, r0
 8007740:	2101      	movs	r1, #1
 8007742:	4620      	mov	r0, r4
 8007744:	f000 ff0a 	bl	800855c <__i2b>
 8007748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800774a:	2b00      	cmp	r3, #0
 800774c:	4606      	mov	r6, r0
 800774e:	f340 8088 	ble.w	8007862 <_dtoa_r+0x8c2>
 8007752:	461a      	mov	r2, r3
 8007754:	4601      	mov	r1, r0
 8007756:	4620      	mov	r0, r4
 8007758:	f000 ffc0 	bl	80086dc <__pow5mult>
 800775c:	9b06      	ldr	r3, [sp, #24]
 800775e:	2b01      	cmp	r3, #1
 8007760:	4606      	mov	r6, r0
 8007762:	f340 8081 	ble.w	8007868 <_dtoa_r+0x8c8>
 8007766:	f04f 0800 	mov.w	r8, #0
 800776a:	6933      	ldr	r3, [r6, #16]
 800776c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007770:	6918      	ldr	r0, [r3, #16]
 8007772:	f000 fea3 	bl	80084bc <__hi0bits>
 8007776:	f1c0 0020 	rsb	r0, r0, #32
 800777a:	9b05      	ldr	r3, [sp, #20]
 800777c:	4418      	add	r0, r3
 800777e:	f010 001f 	ands.w	r0, r0, #31
 8007782:	f000 8092 	beq.w	80078aa <_dtoa_r+0x90a>
 8007786:	f1c0 0320 	rsb	r3, r0, #32
 800778a:	2b04      	cmp	r3, #4
 800778c:	f340 808a 	ble.w	80078a4 <_dtoa_r+0x904>
 8007790:	f1c0 001c 	rsb	r0, r0, #28
 8007794:	9b04      	ldr	r3, [sp, #16]
 8007796:	4403      	add	r3, r0
 8007798:	9304      	str	r3, [sp, #16]
 800779a:	9b05      	ldr	r3, [sp, #20]
 800779c:	4403      	add	r3, r0
 800779e:	4405      	add	r5, r0
 80077a0:	9305      	str	r3, [sp, #20]
 80077a2:	9b04      	ldr	r3, [sp, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	dd07      	ble.n	80077b8 <_dtoa_r+0x818>
 80077a8:	ee18 1a10 	vmov	r1, s16
 80077ac:	461a      	mov	r2, r3
 80077ae:	4620      	mov	r0, r4
 80077b0:	f000 ffee 	bl	8008790 <__lshift>
 80077b4:	ee08 0a10 	vmov	s16, r0
 80077b8:	9b05      	ldr	r3, [sp, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	dd05      	ble.n	80077ca <_dtoa_r+0x82a>
 80077be:	4631      	mov	r1, r6
 80077c0:	461a      	mov	r2, r3
 80077c2:	4620      	mov	r0, r4
 80077c4:	f000 ffe4 	bl	8008790 <__lshift>
 80077c8:	4606      	mov	r6, r0
 80077ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d06e      	beq.n	80078ae <_dtoa_r+0x90e>
 80077d0:	ee18 0a10 	vmov	r0, s16
 80077d4:	4631      	mov	r1, r6
 80077d6:	f001 f84b 	bl	8008870 <__mcmp>
 80077da:	2800      	cmp	r0, #0
 80077dc:	da67      	bge.n	80078ae <_dtoa_r+0x90e>
 80077de:	9b00      	ldr	r3, [sp, #0]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	ee18 1a10 	vmov	r1, s16
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	220a      	movs	r2, #10
 80077ea:	2300      	movs	r3, #0
 80077ec:	4620      	mov	r0, r4
 80077ee:	f000 fdd5 	bl	800839c <__multadd>
 80077f2:	9b08      	ldr	r3, [sp, #32]
 80077f4:	ee08 0a10 	vmov	s16, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 81b1 	beq.w	8007b60 <_dtoa_r+0xbc0>
 80077fe:	2300      	movs	r3, #0
 8007800:	4639      	mov	r1, r7
 8007802:	220a      	movs	r2, #10
 8007804:	4620      	mov	r0, r4
 8007806:	f000 fdc9 	bl	800839c <__multadd>
 800780a:	9b02      	ldr	r3, [sp, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	4607      	mov	r7, r0
 8007810:	f300 808e 	bgt.w	8007930 <_dtoa_r+0x990>
 8007814:	9b06      	ldr	r3, [sp, #24]
 8007816:	2b02      	cmp	r3, #2
 8007818:	dc51      	bgt.n	80078be <_dtoa_r+0x91e>
 800781a:	e089      	b.n	8007930 <_dtoa_r+0x990>
 800781c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800781e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007822:	e74b      	b.n	80076bc <_dtoa_r+0x71c>
 8007824:	9b03      	ldr	r3, [sp, #12]
 8007826:	1e5e      	subs	r6, r3, #1
 8007828:	9b07      	ldr	r3, [sp, #28]
 800782a:	42b3      	cmp	r3, r6
 800782c:	bfbf      	itttt	lt
 800782e:	9b07      	ldrlt	r3, [sp, #28]
 8007830:	9607      	strlt	r6, [sp, #28]
 8007832:	1af2      	sublt	r2, r6, r3
 8007834:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007836:	bfb6      	itet	lt
 8007838:	189b      	addlt	r3, r3, r2
 800783a:	1b9e      	subge	r6, r3, r6
 800783c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800783e:	9b03      	ldr	r3, [sp, #12]
 8007840:	bfb8      	it	lt
 8007842:	2600      	movlt	r6, #0
 8007844:	2b00      	cmp	r3, #0
 8007846:	bfb7      	itett	lt
 8007848:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800784c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007850:	1a9d      	sublt	r5, r3, r2
 8007852:	2300      	movlt	r3, #0
 8007854:	e734      	b.n	80076c0 <_dtoa_r+0x720>
 8007856:	9e07      	ldr	r6, [sp, #28]
 8007858:	9d04      	ldr	r5, [sp, #16]
 800785a:	9f08      	ldr	r7, [sp, #32]
 800785c:	e73b      	b.n	80076d6 <_dtoa_r+0x736>
 800785e:	9a07      	ldr	r2, [sp, #28]
 8007860:	e767      	b.n	8007732 <_dtoa_r+0x792>
 8007862:	9b06      	ldr	r3, [sp, #24]
 8007864:	2b01      	cmp	r3, #1
 8007866:	dc18      	bgt.n	800789a <_dtoa_r+0x8fa>
 8007868:	f1ba 0f00 	cmp.w	sl, #0
 800786c:	d115      	bne.n	800789a <_dtoa_r+0x8fa>
 800786e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007872:	b993      	cbnz	r3, 800789a <_dtoa_r+0x8fa>
 8007874:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007878:	0d1b      	lsrs	r3, r3, #20
 800787a:	051b      	lsls	r3, r3, #20
 800787c:	b183      	cbz	r3, 80078a0 <_dtoa_r+0x900>
 800787e:	9b04      	ldr	r3, [sp, #16]
 8007880:	3301      	adds	r3, #1
 8007882:	9304      	str	r3, [sp, #16]
 8007884:	9b05      	ldr	r3, [sp, #20]
 8007886:	3301      	adds	r3, #1
 8007888:	9305      	str	r3, [sp, #20]
 800788a:	f04f 0801 	mov.w	r8, #1
 800788e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007890:	2b00      	cmp	r3, #0
 8007892:	f47f af6a 	bne.w	800776a <_dtoa_r+0x7ca>
 8007896:	2001      	movs	r0, #1
 8007898:	e76f      	b.n	800777a <_dtoa_r+0x7da>
 800789a:	f04f 0800 	mov.w	r8, #0
 800789e:	e7f6      	b.n	800788e <_dtoa_r+0x8ee>
 80078a0:	4698      	mov	r8, r3
 80078a2:	e7f4      	b.n	800788e <_dtoa_r+0x8ee>
 80078a4:	f43f af7d 	beq.w	80077a2 <_dtoa_r+0x802>
 80078a8:	4618      	mov	r0, r3
 80078aa:	301c      	adds	r0, #28
 80078ac:	e772      	b.n	8007794 <_dtoa_r+0x7f4>
 80078ae:	9b03      	ldr	r3, [sp, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dc37      	bgt.n	8007924 <_dtoa_r+0x984>
 80078b4:	9b06      	ldr	r3, [sp, #24]
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	dd34      	ble.n	8007924 <_dtoa_r+0x984>
 80078ba:	9b03      	ldr	r3, [sp, #12]
 80078bc:	9302      	str	r3, [sp, #8]
 80078be:	9b02      	ldr	r3, [sp, #8]
 80078c0:	b96b      	cbnz	r3, 80078de <_dtoa_r+0x93e>
 80078c2:	4631      	mov	r1, r6
 80078c4:	2205      	movs	r2, #5
 80078c6:	4620      	mov	r0, r4
 80078c8:	f000 fd68 	bl	800839c <__multadd>
 80078cc:	4601      	mov	r1, r0
 80078ce:	4606      	mov	r6, r0
 80078d0:	ee18 0a10 	vmov	r0, s16
 80078d4:	f000 ffcc 	bl	8008870 <__mcmp>
 80078d8:	2800      	cmp	r0, #0
 80078da:	f73f adbb 	bgt.w	8007454 <_dtoa_r+0x4b4>
 80078de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e0:	9d01      	ldr	r5, [sp, #4]
 80078e2:	43db      	mvns	r3, r3
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	f04f 0800 	mov.w	r8, #0
 80078ea:	4631      	mov	r1, r6
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 fd33 	bl	8008358 <_Bfree>
 80078f2:	2f00      	cmp	r7, #0
 80078f4:	f43f aea4 	beq.w	8007640 <_dtoa_r+0x6a0>
 80078f8:	f1b8 0f00 	cmp.w	r8, #0
 80078fc:	d005      	beq.n	800790a <_dtoa_r+0x96a>
 80078fe:	45b8      	cmp	r8, r7
 8007900:	d003      	beq.n	800790a <_dtoa_r+0x96a>
 8007902:	4641      	mov	r1, r8
 8007904:	4620      	mov	r0, r4
 8007906:	f000 fd27 	bl	8008358 <_Bfree>
 800790a:	4639      	mov	r1, r7
 800790c:	4620      	mov	r0, r4
 800790e:	f000 fd23 	bl	8008358 <_Bfree>
 8007912:	e695      	b.n	8007640 <_dtoa_r+0x6a0>
 8007914:	2600      	movs	r6, #0
 8007916:	4637      	mov	r7, r6
 8007918:	e7e1      	b.n	80078de <_dtoa_r+0x93e>
 800791a:	9700      	str	r7, [sp, #0]
 800791c:	4637      	mov	r7, r6
 800791e:	e599      	b.n	8007454 <_dtoa_r+0x4b4>
 8007920:	40240000 	.word	0x40240000
 8007924:	9b08      	ldr	r3, [sp, #32]
 8007926:	2b00      	cmp	r3, #0
 8007928:	f000 80ca 	beq.w	8007ac0 <_dtoa_r+0xb20>
 800792c:	9b03      	ldr	r3, [sp, #12]
 800792e:	9302      	str	r3, [sp, #8]
 8007930:	2d00      	cmp	r5, #0
 8007932:	dd05      	ble.n	8007940 <_dtoa_r+0x9a0>
 8007934:	4639      	mov	r1, r7
 8007936:	462a      	mov	r2, r5
 8007938:	4620      	mov	r0, r4
 800793a:	f000 ff29 	bl	8008790 <__lshift>
 800793e:	4607      	mov	r7, r0
 8007940:	f1b8 0f00 	cmp.w	r8, #0
 8007944:	d05b      	beq.n	80079fe <_dtoa_r+0xa5e>
 8007946:	6879      	ldr	r1, [r7, #4]
 8007948:	4620      	mov	r0, r4
 800794a:	f000 fcc5 	bl	80082d8 <_Balloc>
 800794e:	4605      	mov	r5, r0
 8007950:	b928      	cbnz	r0, 800795e <_dtoa_r+0x9be>
 8007952:	4b87      	ldr	r3, [pc, #540]	; (8007b70 <_dtoa_r+0xbd0>)
 8007954:	4602      	mov	r2, r0
 8007956:	f240 21ea 	movw	r1, #746	; 0x2ea
 800795a:	f7ff bb3b 	b.w	8006fd4 <_dtoa_r+0x34>
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	3202      	adds	r2, #2
 8007962:	0092      	lsls	r2, r2, #2
 8007964:	f107 010c 	add.w	r1, r7, #12
 8007968:	300c      	adds	r0, #12
 800796a:	f000 fca7 	bl	80082bc <memcpy>
 800796e:	2201      	movs	r2, #1
 8007970:	4629      	mov	r1, r5
 8007972:	4620      	mov	r0, r4
 8007974:	f000 ff0c 	bl	8008790 <__lshift>
 8007978:	9b01      	ldr	r3, [sp, #4]
 800797a:	f103 0901 	add.w	r9, r3, #1
 800797e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007982:	4413      	add	r3, r2
 8007984:	9305      	str	r3, [sp, #20]
 8007986:	f00a 0301 	and.w	r3, sl, #1
 800798a:	46b8      	mov	r8, r7
 800798c:	9304      	str	r3, [sp, #16]
 800798e:	4607      	mov	r7, r0
 8007990:	4631      	mov	r1, r6
 8007992:	ee18 0a10 	vmov	r0, s16
 8007996:	f7ff fa75 	bl	8006e84 <quorem>
 800799a:	4641      	mov	r1, r8
 800799c:	9002      	str	r0, [sp, #8]
 800799e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80079a2:	ee18 0a10 	vmov	r0, s16
 80079a6:	f000 ff63 	bl	8008870 <__mcmp>
 80079aa:	463a      	mov	r2, r7
 80079ac:	9003      	str	r0, [sp, #12]
 80079ae:	4631      	mov	r1, r6
 80079b0:	4620      	mov	r0, r4
 80079b2:	f000 ff79 	bl	80088a8 <__mdiff>
 80079b6:	68c2      	ldr	r2, [r0, #12]
 80079b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80079bc:	4605      	mov	r5, r0
 80079be:	bb02      	cbnz	r2, 8007a02 <_dtoa_r+0xa62>
 80079c0:	4601      	mov	r1, r0
 80079c2:	ee18 0a10 	vmov	r0, s16
 80079c6:	f000 ff53 	bl	8008870 <__mcmp>
 80079ca:	4602      	mov	r2, r0
 80079cc:	4629      	mov	r1, r5
 80079ce:	4620      	mov	r0, r4
 80079d0:	9207      	str	r2, [sp, #28]
 80079d2:	f000 fcc1 	bl	8008358 <_Bfree>
 80079d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80079da:	ea43 0102 	orr.w	r1, r3, r2
 80079de:	9b04      	ldr	r3, [sp, #16]
 80079e0:	430b      	orrs	r3, r1
 80079e2:	464d      	mov	r5, r9
 80079e4:	d10f      	bne.n	8007a06 <_dtoa_r+0xa66>
 80079e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80079ea:	d02a      	beq.n	8007a42 <_dtoa_r+0xaa2>
 80079ec:	9b03      	ldr	r3, [sp, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dd02      	ble.n	80079f8 <_dtoa_r+0xa58>
 80079f2:	9b02      	ldr	r3, [sp, #8]
 80079f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80079f8:	f88b a000 	strb.w	sl, [fp]
 80079fc:	e775      	b.n	80078ea <_dtoa_r+0x94a>
 80079fe:	4638      	mov	r0, r7
 8007a00:	e7ba      	b.n	8007978 <_dtoa_r+0x9d8>
 8007a02:	2201      	movs	r2, #1
 8007a04:	e7e2      	b.n	80079cc <_dtoa_r+0xa2c>
 8007a06:	9b03      	ldr	r3, [sp, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	db04      	blt.n	8007a16 <_dtoa_r+0xa76>
 8007a0c:	9906      	ldr	r1, [sp, #24]
 8007a0e:	430b      	orrs	r3, r1
 8007a10:	9904      	ldr	r1, [sp, #16]
 8007a12:	430b      	orrs	r3, r1
 8007a14:	d122      	bne.n	8007a5c <_dtoa_r+0xabc>
 8007a16:	2a00      	cmp	r2, #0
 8007a18:	ddee      	ble.n	80079f8 <_dtoa_r+0xa58>
 8007a1a:	ee18 1a10 	vmov	r1, s16
 8007a1e:	2201      	movs	r2, #1
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 feb5 	bl	8008790 <__lshift>
 8007a26:	4631      	mov	r1, r6
 8007a28:	ee08 0a10 	vmov	s16, r0
 8007a2c:	f000 ff20 	bl	8008870 <__mcmp>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	dc03      	bgt.n	8007a3c <_dtoa_r+0xa9c>
 8007a34:	d1e0      	bne.n	80079f8 <_dtoa_r+0xa58>
 8007a36:	f01a 0f01 	tst.w	sl, #1
 8007a3a:	d0dd      	beq.n	80079f8 <_dtoa_r+0xa58>
 8007a3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a40:	d1d7      	bne.n	80079f2 <_dtoa_r+0xa52>
 8007a42:	2339      	movs	r3, #57	; 0x39
 8007a44:	f88b 3000 	strb.w	r3, [fp]
 8007a48:	462b      	mov	r3, r5
 8007a4a:	461d      	mov	r5, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a52:	2a39      	cmp	r2, #57	; 0x39
 8007a54:	d071      	beq.n	8007b3a <_dtoa_r+0xb9a>
 8007a56:	3201      	adds	r2, #1
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	e746      	b.n	80078ea <_dtoa_r+0x94a>
 8007a5c:	2a00      	cmp	r2, #0
 8007a5e:	dd07      	ble.n	8007a70 <_dtoa_r+0xad0>
 8007a60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a64:	d0ed      	beq.n	8007a42 <_dtoa_r+0xaa2>
 8007a66:	f10a 0301 	add.w	r3, sl, #1
 8007a6a:	f88b 3000 	strb.w	r3, [fp]
 8007a6e:	e73c      	b.n	80078ea <_dtoa_r+0x94a>
 8007a70:	9b05      	ldr	r3, [sp, #20]
 8007a72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007a76:	4599      	cmp	r9, r3
 8007a78:	d047      	beq.n	8007b0a <_dtoa_r+0xb6a>
 8007a7a:	ee18 1a10 	vmov	r1, s16
 8007a7e:	2300      	movs	r3, #0
 8007a80:	220a      	movs	r2, #10
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 fc8a 	bl	800839c <__multadd>
 8007a88:	45b8      	cmp	r8, r7
 8007a8a:	ee08 0a10 	vmov	s16, r0
 8007a8e:	f04f 0300 	mov.w	r3, #0
 8007a92:	f04f 020a 	mov.w	r2, #10
 8007a96:	4641      	mov	r1, r8
 8007a98:	4620      	mov	r0, r4
 8007a9a:	d106      	bne.n	8007aaa <_dtoa_r+0xb0a>
 8007a9c:	f000 fc7e 	bl	800839c <__multadd>
 8007aa0:	4680      	mov	r8, r0
 8007aa2:	4607      	mov	r7, r0
 8007aa4:	f109 0901 	add.w	r9, r9, #1
 8007aa8:	e772      	b.n	8007990 <_dtoa_r+0x9f0>
 8007aaa:	f000 fc77 	bl	800839c <__multadd>
 8007aae:	4639      	mov	r1, r7
 8007ab0:	4680      	mov	r8, r0
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	220a      	movs	r2, #10
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f000 fc70 	bl	800839c <__multadd>
 8007abc:	4607      	mov	r7, r0
 8007abe:	e7f1      	b.n	8007aa4 <_dtoa_r+0xb04>
 8007ac0:	9b03      	ldr	r3, [sp, #12]
 8007ac2:	9302      	str	r3, [sp, #8]
 8007ac4:	9d01      	ldr	r5, [sp, #4]
 8007ac6:	ee18 0a10 	vmov	r0, s16
 8007aca:	4631      	mov	r1, r6
 8007acc:	f7ff f9da 	bl	8006e84 <quorem>
 8007ad0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ad4:	9b01      	ldr	r3, [sp, #4]
 8007ad6:	f805 ab01 	strb.w	sl, [r5], #1
 8007ada:	1aea      	subs	r2, r5, r3
 8007adc:	9b02      	ldr	r3, [sp, #8]
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	dd09      	ble.n	8007af6 <_dtoa_r+0xb56>
 8007ae2:	ee18 1a10 	vmov	r1, s16
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	220a      	movs	r2, #10
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 fc56 	bl	800839c <__multadd>
 8007af0:	ee08 0a10 	vmov	s16, r0
 8007af4:	e7e7      	b.n	8007ac6 <_dtoa_r+0xb26>
 8007af6:	9b02      	ldr	r3, [sp, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	bfc8      	it	gt
 8007afc:	461d      	movgt	r5, r3
 8007afe:	9b01      	ldr	r3, [sp, #4]
 8007b00:	bfd8      	it	le
 8007b02:	2501      	movle	r5, #1
 8007b04:	441d      	add	r5, r3
 8007b06:	f04f 0800 	mov.w	r8, #0
 8007b0a:	ee18 1a10 	vmov	r1, s16
 8007b0e:	2201      	movs	r2, #1
 8007b10:	4620      	mov	r0, r4
 8007b12:	f000 fe3d 	bl	8008790 <__lshift>
 8007b16:	4631      	mov	r1, r6
 8007b18:	ee08 0a10 	vmov	s16, r0
 8007b1c:	f000 fea8 	bl	8008870 <__mcmp>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	dc91      	bgt.n	8007a48 <_dtoa_r+0xaa8>
 8007b24:	d102      	bne.n	8007b2c <_dtoa_r+0xb8c>
 8007b26:	f01a 0f01 	tst.w	sl, #1
 8007b2a:	d18d      	bne.n	8007a48 <_dtoa_r+0xaa8>
 8007b2c:	462b      	mov	r3, r5
 8007b2e:	461d      	mov	r5, r3
 8007b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b34:	2a30      	cmp	r2, #48	; 0x30
 8007b36:	d0fa      	beq.n	8007b2e <_dtoa_r+0xb8e>
 8007b38:	e6d7      	b.n	80078ea <_dtoa_r+0x94a>
 8007b3a:	9a01      	ldr	r2, [sp, #4]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d184      	bne.n	8007a4a <_dtoa_r+0xaaa>
 8007b40:	9b00      	ldr	r3, [sp, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	2331      	movs	r3, #49	; 0x31
 8007b48:	7013      	strb	r3, [r2, #0]
 8007b4a:	e6ce      	b.n	80078ea <_dtoa_r+0x94a>
 8007b4c:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <_dtoa_r+0xbd4>)
 8007b4e:	f7ff ba95 	b.w	800707c <_dtoa_r+0xdc>
 8007b52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f47f aa6e 	bne.w	8007036 <_dtoa_r+0x96>
 8007b5a:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <_dtoa_r+0xbd8>)
 8007b5c:	f7ff ba8e 	b.w	800707c <_dtoa_r+0xdc>
 8007b60:	9b02      	ldr	r3, [sp, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dcae      	bgt.n	8007ac4 <_dtoa_r+0xb24>
 8007b66:	9b06      	ldr	r3, [sp, #24]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	f73f aea8 	bgt.w	80078be <_dtoa_r+0x91e>
 8007b6e:	e7a9      	b.n	8007ac4 <_dtoa_r+0xb24>
 8007b70:	0800cd08 	.word	0x0800cd08
 8007b74:	0800cf01 	.word	0x0800cf01
 8007b78:	0800cc89 	.word	0x0800cc89

08007b7c <rshift>:
 8007b7c:	6903      	ldr	r3, [r0, #16]
 8007b7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b8a:	f100 0414 	add.w	r4, r0, #20
 8007b8e:	dd45      	ble.n	8007c1c <rshift+0xa0>
 8007b90:	f011 011f 	ands.w	r1, r1, #31
 8007b94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007b98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007b9c:	d10c      	bne.n	8007bb8 <rshift+0x3c>
 8007b9e:	f100 0710 	add.w	r7, r0, #16
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	42b1      	cmp	r1, r6
 8007ba6:	d334      	bcc.n	8007c12 <rshift+0x96>
 8007ba8:	1a9b      	subs	r3, r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	1eea      	subs	r2, r5, #3
 8007bae:	4296      	cmp	r6, r2
 8007bb0:	bf38      	it	cc
 8007bb2:	2300      	movcc	r3, #0
 8007bb4:	4423      	add	r3, r4
 8007bb6:	e015      	b.n	8007be4 <rshift+0x68>
 8007bb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007bbc:	f1c1 0820 	rsb	r8, r1, #32
 8007bc0:	40cf      	lsrs	r7, r1
 8007bc2:	f105 0e04 	add.w	lr, r5, #4
 8007bc6:	46a1      	mov	r9, r4
 8007bc8:	4576      	cmp	r6, lr
 8007bca:	46f4      	mov	ip, lr
 8007bcc:	d815      	bhi.n	8007bfa <rshift+0x7e>
 8007bce:	1a9a      	subs	r2, r3, r2
 8007bd0:	0092      	lsls	r2, r2, #2
 8007bd2:	3a04      	subs	r2, #4
 8007bd4:	3501      	adds	r5, #1
 8007bd6:	42ae      	cmp	r6, r5
 8007bd8:	bf38      	it	cc
 8007bda:	2200      	movcc	r2, #0
 8007bdc:	18a3      	adds	r3, r4, r2
 8007bde:	50a7      	str	r7, [r4, r2]
 8007be0:	b107      	cbz	r7, 8007be4 <rshift+0x68>
 8007be2:	3304      	adds	r3, #4
 8007be4:	1b1a      	subs	r2, r3, r4
 8007be6:	42a3      	cmp	r3, r4
 8007be8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007bec:	bf08      	it	eq
 8007bee:	2300      	moveq	r3, #0
 8007bf0:	6102      	str	r2, [r0, #16]
 8007bf2:	bf08      	it	eq
 8007bf4:	6143      	streq	r3, [r0, #20]
 8007bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bfa:	f8dc c000 	ldr.w	ip, [ip]
 8007bfe:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c02:	ea4c 0707 	orr.w	r7, ip, r7
 8007c06:	f849 7b04 	str.w	r7, [r9], #4
 8007c0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c0e:	40cf      	lsrs	r7, r1
 8007c10:	e7da      	b.n	8007bc8 <rshift+0x4c>
 8007c12:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c16:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c1a:	e7c3      	b.n	8007ba4 <rshift+0x28>
 8007c1c:	4623      	mov	r3, r4
 8007c1e:	e7e1      	b.n	8007be4 <rshift+0x68>

08007c20 <__hexdig_fun>:
 8007c20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007c24:	2b09      	cmp	r3, #9
 8007c26:	d802      	bhi.n	8007c2e <__hexdig_fun+0xe>
 8007c28:	3820      	subs	r0, #32
 8007c2a:	b2c0      	uxtb	r0, r0
 8007c2c:	4770      	bx	lr
 8007c2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007c32:	2b05      	cmp	r3, #5
 8007c34:	d801      	bhi.n	8007c3a <__hexdig_fun+0x1a>
 8007c36:	3847      	subs	r0, #71	; 0x47
 8007c38:	e7f7      	b.n	8007c2a <__hexdig_fun+0xa>
 8007c3a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007c3e:	2b05      	cmp	r3, #5
 8007c40:	d801      	bhi.n	8007c46 <__hexdig_fun+0x26>
 8007c42:	3827      	subs	r0, #39	; 0x27
 8007c44:	e7f1      	b.n	8007c2a <__hexdig_fun+0xa>
 8007c46:	2000      	movs	r0, #0
 8007c48:	4770      	bx	lr
	...

08007c4c <__gethex>:
 8007c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c50:	ed2d 8b02 	vpush	{d8}
 8007c54:	b089      	sub	sp, #36	; 0x24
 8007c56:	ee08 0a10 	vmov	s16, r0
 8007c5a:	9304      	str	r3, [sp, #16]
 8007c5c:	4bb4      	ldr	r3, [pc, #720]	; (8007f30 <__gethex+0x2e4>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	9301      	str	r3, [sp, #4]
 8007c62:	4618      	mov	r0, r3
 8007c64:	468b      	mov	fp, r1
 8007c66:	4690      	mov	r8, r2
 8007c68:	f7f8 fac4 	bl	80001f4 <strlen>
 8007c6c:	9b01      	ldr	r3, [sp, #4]
 8007c6e:	f8db 2000 	ldr.w	r2, [fp]
 8007c72:	4403      	add	r3, r0
 8007c74:	4682      	mov	sl, r0
 8007c76:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007c7a:	9305      	str	r3, [sp, #20]
 8007c7c:	1c93      	adds	r3, r2, #2
 8007c7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007c82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007c86:	32fe      	adds	r2, #254	; 0xfe
 8007c88:	18d1      	adds	r1, r2, r3
 8007c8a:	461f      	mov	r7, r3
 8007c8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007c90:	9100      	str	r1, [sp, #0]
 8007c92:	2830      	cmp	r0, #48	; 0x30
 8007c94:	d0f8      	beq.n	8007c88 <__gethex+0x3c>
 8007c96:	f7ff ffc3 	bl	8007c20 <__hexdig_fun>
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d13a      	bne.n	8007d16 <__gethex+0xca>
 8007ca0:	9901      	ldr	r1, [sp, #4]
 8007ca2:	4652      	mov	r2, sl
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	f001 fdb3 	bl	8009810 <strncmp>
 8007caa:	4605      	mov	r5, r0
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d168      	bne.n	8007d82 <__gethex+0x136>
 8007cb0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007cb4:	eb07 060a 	add.w	r6, r7, sl
 8007cb8:	f7ff ffb2 	bl	8007c20 <__hexdig_fun>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d062      	beq.n	8007d86 <__gethex+0x13a>
 8007cc0:	4633      	mov	r3, r6
 8007cc2:	7818      	ldrb	r0, [r3, #0]
 8007cc4:	2830      	cmp	r0, #48	; 0x30
 8007cc6:	461f      	mov	r7, r3
 8007cc8:	f103 0301 	add.w	r3, r3, #1
 8007ccc:	d0f9      	beq.n	8007cc2 <__gethex+0x76>
 8007cce:	f7ff ffa7 	bl	8007c20 <__hexdig_fun>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	fab0 f480 	clz	r4, r0
 8007cd8:	0964      	lsrs	r4, r4, #5
 8007cda:	4635      	mov	r5, r6
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	463a      	mov	r2, r7
 8007ce0:	4616      	mov	r6, r2
 8007ce2:	3201      	adds	r2, #1
 8007ce4:	7830      	ldrb	r0, [r6, #0]
 8007ce6:	f7ff ff9b 	bl	8007c20 <__hexdig_fun>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d1f8      	bne.n	8007ce0 <__gethex+0x94>
 8007cee:	9901      	ldr	r1, [sp, #4]
 8007cf0:	4652      	mov	r2, sl
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f001 fd8c 	bl	8009810 <strncmp>
 8007cf8:	b980      	cbnz	r0, 8007d1c <__gethex+0xd0>
 8007cfa:	b94d      	cbnz	r5, 8007d10 <__gethex+0xc4>
 8007cfc:	eb06 050a 	add.w	r5, r6, sl
 8007d00:	462a      	mov	r2, r5
 8007d02:	4616      	mov	r6, r2
 8007d04:	3201      	adds	r2, #1
 8007d06:	7830      	ldrb	r0, [r6, #0]
 8007d08:	f7ff ff8a 	bl	8007c20 <__hexdig_fun>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d1f8      	bne.n	8007d02 <__gethex+0xb6>
 8007d10:	1bad      	subs	r5, r5, r6
 8007d12:	00ad      	lsls	r5, r5, #2
 8007d14:	e004      	b.n	8007d20 <__gethex+0xd4>
 8007d16:	2400      	movs	r4, #0
 8007d18:	4625      	mov	r5, r4
 8007d1a:	e7e0      	b.n	8007cde <__gethex+0x92>
 8007d1c:	2d00      	cmp	r5, #0
 8007d1e:	d1f7      	bne.n	8007d10 <__gethex+0xc4>
 8007d20:	7833      	ldrb	r3, [r6, #0]
 8007d22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d26:	2b50      	cmp	r3, #80	; 0x50
 8007d28:	d13b      	bne.n	8007da2 <__gethex+0x156>
 8007d2a:	7873      	ldrb	r3, [r6, #1]
 8007d2c:	2b2b      	cmp	r3, #43	; 0x2b
 8007d2e:	d02c      	beq.n	8007d8a <__gethex+0x13e>
 8007d30:	2b2d      	cmp	r3, #45	; 0x2d
 8007d32:	d02e      	beq.n	8007d92 <__gethex+0x146>
 8007d34:	1c71      	adds	r1, r6, #1
 8007d36:	f04f 0900 	mov.w	r9, #0
 8007d3a:	7808      	ldrb	r0, [r1, #0]
 8007d3c:	f7ff ff70 	bl	8007c20 <__hexdig_fun>
 8007d40:	1e43      	subs	r3, r0, #1
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b18      	cmp	r3, #24
 8007d46:	d82c      	bhi.n	8007da2 <__gethex+0x156>
 8007d48:	f1a0 0210 	sub.w	r2, r0, #16
 8007d4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d50:	f7ff ff66 	bl	8007c20 <__hexdig_fun>
 8007d54:	1e43      	subs	r3, r0, #1
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b18      	cmp	r3, #24
 8007d5a:	d91d      	bls.n	8007d98 <__gethex+0x14c>
 8007d5c:	f1b9 0f00 	cmp.w	r9, #0
 8007d60:	d000      	beq.n	8007d64 <__gethex+0x118>
 8007d62:	4252      	negs	r2, r2
 8007d64:	4415      	add	r5, r2
 8007d66:	f8cb 1000 	str.w	r1, [fp]
 8007d6a:	b1e4      	cbz	r4, 8007da6 <__gethex+0x15a>
 8007d6c:	9b00      	ldr	r3, [sp, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	bf14      	ite	ne
 8007d72:	2700      	movne	r7, #0
 8007d74:	2706      	moveq	r7, #6
 8007d76:	4638      	mov	r0, r7
 8007d78:	b009      	add	sp, #36	; 0x24
 8007d7a:	ecbd 8b02 	vpop	{d8}
 8007d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d82:	463e      	mov	r6, r7
 8007d84:	4625      	mov	r5, r4
 8007d86:	2401      	movs	r4, #1
 8007d88:	e7ca      	b.n	8007d20 <__gethex+0xd4>
 8007d8a:	f04f 0900 	mov.w	r9, #0
 8007d8e:	1cb1      	adds	r1, r6, #2
 8007d90:	e7d3      	b.n	8007d3a <__gethex+0xee>
 8007d92:	f04f 0901 	mov.w	r9, #1
 8007d96:	e7fa      	b.n	8007d8e <__gethex+0x142>
 8007d98:	230a      	movs	r3, #10
 8007d9a:	fb03 0202 	mla	r2, r3, r2, r0
 8007d9e:	3a10      	subs	r2, #16
 8007da0:	e7d4      	b.n	8007d4c <__gethex+0x100>
 8007da2:	4631      	mov	r1, r6
 8007da4:	e7df      	b.n	8007d66 <__gethex+0x11a>
 8007da6:	1bf3      	subs	r3, r6, r7
 8007da8:	3b01      	subs	r3, #1
 8007daa:	4621      	mov	r1, r4
 8007dac:	2b07      	cmp	r3, #7
 8007dae:	dc0b      	bgt.n	8007dc8 <__gethex+0x17c>
 8007db0:	ee18 0a10 	vmov	r0, s16
 8007db4:	f000 fa90 	bl	80082d8 <_Balloc>
 8007db8:	4604      	mov	r4, r0
 8007dba:	b940      	cbnz	r0, 8007dce <__gethex+0x182>
 8007dbc:	4b5d      	ldr	r3, [pc, #372]	; (8007f34 <__gethex+0x2e8>)
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	21de      	movs	r1, #222	; 0xde
 8007dc2:	485d      	ldr	r0, [pc, #372]	; (8007f38 <__gethex+0x2ec>)
 8007dc4:	f001 fdf4 	bl	80099b0 <__assert_func>
 8007dc8:	3101      	adds	r1, #1
 8007dca:	105b      	asrs	r3, r3, #1
 8007dcc:	e7ee      	b.n	8007dac <__gethex+0x160>
 8007dce:	f100 0914 	add.w	r9, r0, #20
 8007dd2:	f04f 0b00 	mov.w	fp, #0
 8007dd6:	f1ca 0301 	rsb	r3, sl, #1
 8007dda:	f8cd 9008 	str.w	r9, [sp, #8]
 8007dde:	f8cd b000 	str.w	fp, [sp]
 8007de2:	9306      	str	r3, [sp, #24]
 8007de4:	42b7      	cmp	r7, r6
 8007de6:	d340      	bcc.n	8007e6a <__gethex+0x21e>
 8007de8:	9802      	ldr	r0, [sp, #8]
 8007dea:	9b00      	ldr	r3, [sp, #0]
 8007dec:	f840 3b04 	str.w	r3, [r0], #4
 8007df0:	eba0 0009 	sub.w	r0, r0, r9
 8007df4:	1080      	asrs	r0, r0, #2
 8007df6:	0146      	lsls	r6, r0, #5
 8007df8:	6120      	str	r0, [r4, #16]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 fb5e 	bl	80084bc <__hi0bits>
 8007e00:	1a30      	subs	r0, r6, r0
 8007e02:	f8d8 6000 	ldr.w	r6, [r8]
 8007e06:	42b0      	cmp	r0, r6
 8007e08:	dd63      	ble.n	8007ed2 <__gethex+0x286>
 8007e0a:	1b87      	subs	r7, r0, r6
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 ff02 	bl	8008c18 <__any_on>
 8007e14:	4682      	mov	sl, r0
 8007e16:	b1a8      	cbz	r0, 8007e44 <__gethex+0x1f8>
 8007e18:	1e7b      	subs	r3, r7, #1
 8007e1a:	1159      	asrs	r1, r3, #5
 8007e1c:	f003 021f 	and.w	r2, r3, #31
 8007e20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007e24:	f04f 0a01 	mov.w	sl, #1
 8007e28:	fa0a f202 	lsl.w	r2, sl, r2
 8007e2c:	420a      	tst	r2, r1
 8007e2e:	d009      	beq.n	8007e44 <__gethex+0x1f8>
 8007e30:	4553      	cmp	r3, sl
 8007e32:	dd05      	ble.n	8007e40 <__gethex+0x1f4>
 8007e34:	1eb9      	subs	r1, r7, #2
 8007e36:	4620      	mov	r0, r4
 8007e38:	f000 feee 	bl	8008c18 <__any_on>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d145      	bne.n	8007ecc <__gethex+0x280>
 8007e40:	f04f 0a02 	mov.w	sl, #2
 8007e44:	4639      	mov	r1, r7
 8007e46:	4620      	mov	r0, r4
 8007e48:	f7ff fe98 	bl	8007b7c <rshift>
 8007e4c:	443d      	add	r5, r7
 8007e4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e52:	42ab      	cmp	r3, r5
 8007e54:	da4c      	bge.n	8007ef0 <__gethex+0x2a4>
 8007e56:	ee18 0a10 	vmov	r0, s16
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	f000 fa7c 	bl	8008358 <_Bfree>
 8007e60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e62:	2300      	movs	r3, #0
 8007e64:	6013      	str	r3, [r2, #0]
 8007e66:	27a3      	movs	r7, #163	; 0xa3
 8007e68:	e785      	b.n	8007d76 <__gethex+0x12a>
 8007e6a:	1e73      	subs	r3, r6, #1
 8007e6c:	9a05      	ldr	r2, [sp, #20]
 8007e6e:	9303      	str	r3, [sp, #12]
 8007e70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d019      	beq.n	8007eac <__gethex+0x260>
 8007e78:	f1bb 0f20 	cmp.w	fp, #32
 8007e7c:	d107      	bne.n	8007e8e <__gethex+0x242>
 8007e7e:	9b02      	ldr	r3, [sp, #8]
 8007e80:	9a00      	ldr	r2, [sp, #0]
 8007e82:	f843 2b04 	str.w	r2, [r3], #4
 8007e86:	9302      	str	r3, [sp, #8]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	469b      	mov	fp, r3
 8007e8e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007e92:	f7ff fec5 	bl	8007c20 <__hexdig_fun>
 8007e96:	9b00      	ldr	r3, [sp, #0]
 8007e98:	f000 000f 	and.w	r0, r0, #15
 8007e9c:	fa00 f00b 	lsl.w	r0, r0, fp
 8007ea0:	4303      	orrs	r3, r0
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	f10b 0b04 	add.w	fp, fp, #4
 8007ea8:	9b03      	ldr	r3, [sp, #12]
 8007eaa:	e00d      	b.n	8007ec8 <__gethex+0x27c>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	9a06      	ldr	r2, [sp, #24]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	42bb      	cmp	r3, r7
 8007eb4:	d3e0      	bcc.n	8007e78 <__gethex+0x22c>
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	9901      	ldr	r1, [sp, #4]
 8007eba:	9307      	str	r3, [sp, #28]
 8007ebc:	4652      	mov	r2, sl
 8007ebe:	f001 fca7 	bl	8009810 <strncmp>
 8007ec2:	9b07      	ldr	r3, [sp, #28]
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d1d7      	bne.n	8007e78 <__gethex+0x22c>
 8007ec8:	461e      	mov	r6, r3
 8007eca:	e78b      	b.n	8007de4 <__gethex+0x198>
 8007ecc:	f04f 0a03 	mov.w	sl, #3
 8007ed0:	e7b8      	b.n	8007e44 <__gethex+0x1f8>
 8007ed2:	da0a      	bge.n	8007eea <__gethex+0x29e>
 8007ed4:	1a37      	subs	r7, r6, r0
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	ee18 0a10 	vmov	r0, s16
 8007edc:	463a      	mov	r2, r7
 8007ede:	f000 fc57 	bl	8008790 <__lshift>
 8007ee2:	1bed      	subs	r5, r5, r7
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	f100 0914 	add.w	r9, r0, #20
 8007eea:	f04f 0a00 	mov.w	sl, #0
 8007eee:	e7ae      	b.n	8007e4e <__gethex+0x202>
 8007ef0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007ef4:	42a8      	cmp	r0, r5
 8007ef6:	dd72      	ble.n	8007fde <__gethex+0x392>
 8007ef8:	1b45      	subs	r5, r0, r5
 8007efa:	42ae      	cmp	r6, r5
 8007efc:	dc36      	bgt.n	8007f6c <__gethex+0x320>
 8007efe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d02a      	beq.n	8007f5c <__gethex+0x310>
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d02c      	beq.n	8007f64 <__gethex+0x318>
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d11c      	bne.n	8007f48 <__gethex+0x2fc>
 8007f0e:	42ae      	cmp	r6, r5
 8007f10:	d11a      	bne.n	8007f48 <__gethex+0x2fc>
 8007f12:	2e01      	cmp	r6, #1
 8007f14:	d112      	bne.n	8007f3c <__gethex+0x2f0>
 8007f16:	9a04      	ldr	r2, [sp, #16]
 8007f18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007f1c:	6013      	str	r3, [r2, #0]
 8007f1e:	2301      	movs	r3, #1
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	f8c9 3000 	str.w	r3, [r9]
 8007f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f28:	2762      	movs	r7, #98	; 0x62
 8007f2a:	601c      	str	r4, [r3, #0]
 8007f2c:	e723      	b.n	8007d76 <__gethex+0x12a>
 8007f2e:	bf00      	nop
 8007f30:	0800cd80 	.word	0x0800cd80
 8007f34:	0800cd08 	.word	0x0800cd08
 8007f38:	0800cd19 	.word	0x0800cd19
 8007f3c:	1e71      	subs	r1, r6, #1
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f000 fe6a 	bl	8008c18 <__any_on>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d1e6      	bne.n	8007f16 <__gethex+0x2ca>
 8007f48:	ee18 0a10 	vmov	r0, s16
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	f000 fa03 	bl	8008358 <_Bfree>
 8007f52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f54:	2300      	movs	r3, #0
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	2750      	movs	r7, #80	; 0x50
 8007f5a:	e70c      	b.n	8007d76 <__gethex+0x12a>
 8007f5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1f2      	bne.n	8007f48 <__gethex+0x2fc>
 8007f62:	e7d8      	b.n	8007f16 <__gethex+0x2ca>
 8007f64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1d5      	bne.n	8007f16 <__gethex+0x2ca>
 8007f6a:	e7ed      	b.n	8007f48 <__gethex+0x2fc>
 8007f6c:	1e6f      	subs	r7, r5, #1
 8007f6e:	f1ba 0f00 	cmp.w	sl, #0
 8007f72:	d131      	bne.n	8007fd8 <__gethex+0x38c>
 8007f74:	b127      	cbz	r7, 8007f80 <__gethex+0x334>
 8007f76:	4639      	mov	r1, r7
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f000 fe4d 	bl	8008c18 <__any_on>
 8007f7e:	4682      	mov	sl, r0
 8007f80:	117b      	asrs	r3, r7, #5
 8007f82:	2101      	movs	r1, #1
 8007f84:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007f88:	f007 071f 	and.w	r7, r7, #31
 8007f8c:	fa01 f707 	lsl.w	r7, r1, r7
 8007f90:	421f      	tst	r7, r3
 8007f92:	4629      	mov	r1, r5
 8007f94:	4620      	mov	r0, r4
 8007f96:	bf18      	it	ne
 8007f98:	f04a 0a02 	orrne.w	sl, sl, #2
 8007f9c:	1b76      	subs	r6, r6, r5
 8007f9e:	f7ff fded 	bl	8007b7c <rshift>
 8007fa2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007fa6:	2702      	movs	r7, #2
 8007fa8:	f1ba 0f00 	cmp.w	sl, #0
 8007fac:	d048      	beq.n	8008040 <__gethex+0x3f4>
 8007fae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d015      	beq.n	8007fe2 <__gethex+0x396>
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d017      	beq.n	8007fea <__gethex+0x39e>
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d109      	bne.n	8007fd2 <__gethex+0x386>
 8007fbe:	f01a 0f02 	tst.w	sl, #2
 8007fc2:	d006      	beq.n	8007fd2 <__gethex+0x386>
 8007fc4:	f8d9 0000 	ldr.w	r0, [r9]
 8007fc8:	ea4a 0a00 	orr.w	sl, sl, r0
 8007fcc:	f01a 0f01 	tst.w	sl, #1
 8007fd0:	d10e      	bne.n	8007ff0 <__gethex+0x3a4>
 8007fd2:	f047 0710 	orr.w	r7, r7, #16
 8007fd6:	e033      	b.n	8008040 <__gethex+0x3f4>
 8007fd8:	f04f 0a01 	mov.w	sl, #1
 8007fdc:	e7d0      	b.n	8007f80 <__gethex+0x334>
 8007fde:	2701      	movs	r7, #1
 8007fe0:	e7e2      	b.n	8007fa8 <__gethex+0x35c>
 8007fe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fe4:	f1c3 0301 	rsb	r3, r3, #1
 8007fe8:	9315      	str	r3, [sp, #84]	; 0x54
 8007fea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d0f0      	beq.n	8007fd2 <__gethex+0x386>
 8007ff0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007ff4:	f104 0314 	add.w	r3, r4, #20
 8007ff8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007ffc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008000:	f04f 0c00 	mov.w	ip, #0
 8008004:	4618      	mov	r0, r3
 8008006:	f853 2b04 	ldr.w	r2, [r3], #4
 800800a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800800e:	d01c      	beq.n	800804a <__gethex+0x3fe>
 8008010:	3201      	adds	r2, #1
 8008012:	6002      	str	r2, [r0, #0]
 8008014:	2f02      	cmp	r7, #2
 8008016:	f104 0314 	add.w	r3, r4, #20
 800801a:	d13f      	bne.n	800809c <__gethex+0x450>
 800801c:	f8d8 2000 	ldr.w	r2, [r8]
 8008020:	3a01      	subs	r2, #1
 8008022:	42b2      	cmp	r2, r6
 8008024:	d10a      	bne.n	800803c <__gethex+0x3f0>
 8008026:	1171      	asrs	r1, r6, #5
 8008028:	2201      	movs	r2, #1
 800802a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800802e:	f006 061f 	and.w	r6, r6, #31
 8008032:	fa02 f606 	lsl.w	r6, r2, r6
 8008036:	421e      	tst	r6, r3
 8008038:	bf18      	it	ne
 800803a:	4617      	movne	r7, r2
 800803c:	f047 0720 	orr.w	r7, r7, #32
 8008040:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008042:	601c      	str	r4, [r3, #0]
 8008044:	9b04      	ldr	r3, [sp, #16]
 8008046:	601d      	str	r5, [r3, #0]
 8008048:	e695      	b.n	8007d76 <__gethex+0x12a>
 800804a:	4299      	cmp	r1, r3
 800804c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008050:	d8d8      	bhi.n	8008004 <__gethex+0x3b8>
 8008052:	68a3      	ldr	r3, [r4, #8]
 8008054:	459b      	cmp	fp, r3
 8008056:	db19      	blt.n	800808c <__gethex+0x440>
 8008058:	6861      	ldr	r1, [r4, #4]
 800805a:	ee18 0a10 	vmov	r0, s16
 800805e:	3101      	adds	r1, #1
 8008060:	f000 f93a 	bl	80082d8 <_Balloc>
 8008064:	4681      	mov	r9, r0
 8008066:	b918      	cbnz	r0, 8008070 <__gethex+0x424>
 8008068:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <__gethex+0x488>)
 800806a:	4602      	mov	r2, r0
 800806c:	2184      	movs	r1, #132	; 0x84
 800806e:	e6a8      	b.n	8007dc2 <__gethex+0x176>
 8008070:	6922      	ldr	r2, [r4, #16]
 8008072:	3202      	adds	r2, #2
 8008074:	f104 010c 	add.w	r1, r4, #12
 8008078:	0092      	lsls	r2, r2, #2
 800807a:	300c      	adds	r0, #12
 800807c:	f000 f91e 	bl	80082bc <memcpy>
 8008080:	4621      	mov	r1, r4
 8008082:	ee18 0a10 	vmov	r0, s16
 8008086:	f000 f967 	bl	8008358 <_Bfree>
 800808a:	464c      	mov	r4, r9
 800808c:	6923      	ldr	r3, [r4, #16]
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008094:	6122      	str	r2, [r4, #16]
 8008096:	2201      	movs	r2, #1
 8008098:	615a      	str	r2, [r3, #20]
 800809a:	e7bb      	b.n	8008014 <__gethex+0x3c8>
 800809c:	6922      	ldr	r2, [r4, #16]
 800809e:	455a      	cmp	r2, fp
 80080a0:	dd0b      	ble.n	80080ba <__gethex+0x46e>
 80080a2:	2101      	movs	r1, #1
 80080a4:	4620      	mov	r0, r4
 80080a6:	f7ff fd69 	bl	8007b7c <rshift>
 80080aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080ae:	3501      	adds	r5, #1
 80080b0:	42ab      	cmp	r3, r5
 80080b2:	f6ff aed0 	blt.w	8007e56 <__gethex+0x20a>
 80080b6:	2701      	movs	r7, #1
 80080b8:	e7c0      	b.n	800803c <__gethex+0x3f0>
 80080ba:	f016 061f 	ands.w	r6, r6, #31
 80080be:	d0fa      	beq.n	80080b6 <__gethex+0x46a>
 80080c0:	4453      	add	r3, sl
 80080c2:	f1c6 0620 	rsb	r6, r6, #32
 80080c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80080ca:	f000 f9f7 	bl	80084bc <__hi0bits>
 80080ce:	42b0      	cmp	r0, r6
 80080d0:	dbe7      	blt.n	80080a2 <__gethex+0x456>
 80080d2:	e7f0      	b.n	80080b6 <__gethex+0x46a>
 80080d4:	0800cd08 	.word	0x0800cd08

080080d8 <L_shift>:
 80080d8:	f1c2 0208 	rsb	r2, r2, #8
 80080dc:	0092      	lsls	r2, r2, #2
 80080de:	b570      	push	{r4, r5, r6, lr}
 80080e0:	f1c2 0620 	rsb	r6, r2, #32
 80080e4:	6843      	ldr	r3, [r0, #4]
 80080e6:	6804      	ldr	r4, [r0, #0]
 80080e8:	fa03 f506 	lsl.w	r5, r3, r6
 80080ec:	432c      	orrs	r4, r5
 80080ee:	40d3      	lsrs	r3, r2
 80080f0:	6004      	str	r4, [r0, #0]
 80080f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80080f6:	4288      	cmp	r0, r1
 80080f8:	d3f4      	bcc.n	80080e4 <L_shift+0xc>
 80080fa:	bd70      	pop	{r4, r5, r6, pc}

080080fc <__match>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	6803      	ldr	r3, [r0, #0]
 8008100:	3301      	adds	r3, #1
 8008102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008106:	b914      	cbnz	r4, 800810e <__match+0x12>
 8008108:	6003      	str	r3, [r0, #0]
 800810a:	2001      	movs	r0, #1
 800810c:	bd30      	pop	{r4, r5, pc}
 800810e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008112:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008116:	2d19      	cmp	r5, #25
 8008118:	bf98      	it	ls
 800811a:	3220      	addls	r2, #32
 800811c:	42a2      	cmp	r2, r4
 800811e:	d0f0      	beq.n	8008102 <__match+0x6>
 8008120:	2000      	movs	r0, #0
 8008122:	e7f3      	b.n	800810c <__match+0x10>

08008124 <__hexnan>:
 8008124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008128:	680b      	ldr	r3, [r1, #0]
 800812a:	115e      	asrs	r6, r3, #5
 800812c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008130:	f013 031f 	ands.w	r3, r3, #31
 8008134:	b087      	sub	sp, #28
 8008136:	bf18      	it	ne
 8008138:	3604      	addne	r6, #4
 800813a:	2500      	movs	r5, #0
 800813c:	1f37      	subs	r7, r6, #4
 800813e:	4690      	mov	r8, r2
 8008140:	6802      	ldr	r2, [r0, #0]
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	4682      	mov	sl, r0
 8008146:	f846 5c04 	str.w	r5, [r6, #-4]
 800814a:	46b9      	mov	r9, r7
 800814c:	463c      	mov	r4, r7
 800814e:	9502      	str	r5, [sp, #8]
 8008150:	46ab      	mov	fp, r5
 8008152:	7851      	ldrb	r1, [r2, #1]
 8008154:	1c53      	adds	r3, r2, #1
 8008156:	9303      	str	r3, [sp, #12]
 8008158:	b341      	cbz	r1, 80081ac <__hexnan+0x88>
 800815a:	4608      	mov	r0, r1
 800815c:	9205      	str	r2, [sp, #20]
 800815e:	9104      	str	r1, [sp, #16]
 8008160:	f7ff fd5e 	bl	8007c20 <__hexdig_fun>
 8008164:	2800      	cmp	r0, #0
 8008166:	d14f      	bne.n	8008208 <__hexnan+0xe4>
 8008168:	9904      	ldr	r1, [sp, #16]
 800816a:	9a05      	ldr	r2, [sp, #20]
 800816c:	2920      	cmp	r1, #32
 800816e:	d818      	bhi.n	80081a2 <__hexnan+0x7e>
 8008170:	9b02      	ldr	r3, [sp, #8]
 8008172:	459b      	cmp	fp, r3
 8008174:	dd13      	ble.n	800819e <__hexnan+0x7a>
 8008176:	454c      	cmp	r4, r9
 8008178:	d206      	bcs.n	8008188 <__hexnan+0x64>
 800817a:	2d07      	cmp	r5, #7
 800817c:	dc04      	bgt.n	8008188 <__hexnan+0x64>
 800817e:	462a      	mov	r2, r5
 8008180:	4649      	mov	r1, r9
 8008182:	4620      	mov	r0, r4
 8008184:	f7ff ffa8 	bl	80080d8 <L_shift>
 8008188:	4544      	cmp	r4, r8
 800818a:	d950      	bls.n	800822e <__hexnan+0x10a>
 800818c:	2300      	movs	r3, #0
 800818e:	f1a4 0904 	sub.w	r9, r4, #4
 8008192:	f844 3c04 	str.w	r3, [r4, #-4]
 8008196:	f8cd b008 	str.w	fp, [sp, #8]
 800819a:	464c      	mov	r4, r9
 800819c:	461d      	mov	r5, r3
 800819e:	9a03      	ldr	r2, [sp, #12]
 80081a0:	e7d7      	b.n	8008152 <__hexnan+0x2e>
 80081a2:	2929      	cmp	r1, #41	; 0x29
 80081a4:	d156      	bne.n	8008254 <__hexnan+0x130>
 80081a6:	3202      	adds	r2, #2
 80081a8:	f8ca 2000 	str.w	r2, [sl]
 80081ac:	f1bb 0f00 	cmp.w	fp, #0
 80081b0:	d050      	beq.n	8008254 <__hexnan+0x130>
 80081b2:	454c      	cmp	r4, r9
 80081b4:	d206      	bcs.n	80081c4 <__hexnan+0xa0>
 80081b6:	2d07      	cmp	r5, #7
 80081b8:	dc04      	bgt.n	80081c4 <__hexnan+0xa0>
 80081ba:	462a      	mov	r2, r5
 80081bc:	4649      	mov	r1, r9
 80081be:	4620      	mov	r0, r4
 80081c0:	f7ff ff8a 	bl	80080d8 <L_shift>
 80081c4:	4544      	cmp	r4, r8
 80081c6:	d934      	bls.n	8008232 <__hexnan+0x10e>
 80081c8:	f1a8 0204 	sub.w	r2, r8, #4
 80081cc:	4623      	mov	r3, r4
 80081ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80081d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80081d6:	429f      	cmp	r7, r3
 80081d8:	d2f9      	bcs.n	80081ce <__hexnan+0xaa>
 80081da:	1b3b      	subs	r3, r7, r4
 80081dc:	f023 0303 	bic.w	r3, r3, #3
 80081e0:	3304      	adds	r3, #4
 80081e2:	3401      	adds	r4, #1
 80081e4:	3e03      	subs	r6, #3
 80081e6:	42b4      	cmp	r4, r6
 80081e8:	bf88      	it	hi
 80081ea:	2304      	movhi	r3, #4
 80081ec:	4443      	add	r3, r8
 80081ee:	2200      	movs	r2, #0
 80081f0:	f843 2b04 	str.w	r2, [r3], #4
 80081f4:	429f      	cmp	r7, r3
 80081f6:	d2fb      	bcs.n	80081f0 <__hexnan+0xcc>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	b91b      	cbnz	r3, 8008204 <__hexnan+0xe0>
 80081fc:	4547      	cmp	r7, r8
 80081fe:	d127      	bne.n	8008250 <__hexnan+0x12c>
 8008200:	2301      	movs	r3, #1
 8008202:	603b      	str	r3, [r7, #0]
 8008204:	2005      	movs	r0, #5
 8008206:	e026      	b.n	8008256 <__hexnan+0x132>
 8008208:	3501      	adds	r5, #1
 800820a:	2d08      	cmp	r5, #8
 800820c:	f10b 0b01 	add.w	fp, fp, #1
 8008210:	dd06      	ble.n	8008220 <__hexnan+0xfc>
 8008212:	4544      	cmp	r4, r8
 8008214:	d9c3      	bls.n	800819e <__hexnan+0x7a>
 8008216:	2300      	movs	r3, #0
 8008218:	f844 3c04 	str.w	r3, [r4, #-4]
 800821c:	2501      	movs	r5, #1
 800821e:	3c04      	subs	r4, #4
 8008220:	6822      	ldr	r2, [r4, #0]
 8008222:	f000 000f 	and.w	r0, r0, #15
 8008226:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800822a:	6022      	str	r2, [r4, #0]
 800822c:	e7b7      	b.n	800819e <__hexnan+0x7a>
 800822e:	2508      	movs	r5, #8
 8008230:	e7b5      	b.n	800819e <__hexnan+0x7a>
 8008232:	9b01      	ldr	r3, [sp, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d0df      	beq.n	80081f8 <__hexnan+0xd4>
 8008238:	f04f 32ff 	mov.w	r2, #4294967295
 800823c:	f1c3 0320 	rsb	r3, r3, #32
 8008240:	fa22 f303 	lsr.w	r3, r2, r3
 8008244:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008248:	401a      	ands	r2, r3
 800824a:	f846 2c04 	str.w	r2, [r6, #-4]
 800824e:	e7d3      	b.n	80081f8 <__hexnan+0xd4>
 8008250:	3f04      	subs	r7, #4
 8008252:	e7d1      	b.n	80081f8 <__hexnan+0xd4>
 8008254:	2004      	movs	r0, #4
 8008256:	b007      	add	sp, #28
 8008258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800825c <_localeconv_r>:
 800825c:	4800      	ldr	r0, [pc, #0]	; (8008260 <_localeconv_r+0x4>)
 800825e:	4770      	bx	lr
 8008260:	20000168 	.word	0x20000168

08008264 <_lseek_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4d07      	ldr	r5, [pc, #28]	; (8008284 <_lseek_r+0x20>)
 8008268:	4604      	mov	r4, r0
 800826a:	4608      	mov	r0, r1
 800826c:	4611      	mov	r1, r2
 800826e:	2200      	movs	r2, #0
 8008270:	602a      	str	r2, [r5, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	f7fa fb43 	bl	80028fe <_lseek>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d102      	bne.n	8008282 <_lseek_r+0x1e>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	b103      	cbz	r3, 8008282 <_lseek_r+0x1e>
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	20000cb4 	.word	0x20000cb4

08008288 <malloc>:
 8008288:	4b02      	ldr	r3, [pc, #8]	; (8008294 <malloc+0xc>)
 800828a:	4601      	mov	r1, r0
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	f000 bd67 	b.w	8008d60 <_malloc_r>
 8008292:	bf00      	nop
 8008294:	20000010 	.word	0x20000010

08008298 <__ascii_mbtowc>:
 8008298:	b082      	sub	sp, #8
 800829a:	b901      	cbnz	r1, 800829e <__ascii_mbtowc+0x6>
 800829c:	a901      	add	r1, sp, #4
 800829e:	b142      	cbz	r2, 80082b2 <__ascii_mbtowc+0x1a>
 80082a0:	b14b      	cbz	r3, 80082b6 <__ascii_mbtowc+0x1e>
 80082a2:	7813      	ldrb	r3, [r2, #0]
 80082a4:	600b      	str	r3, [r1, #0]
 80082a6:	7812      	ldrb	r2, [r2, #0]
 80082a8:	1e10      	subs	r0, r2, #0
 80082aa:	bf18      	it	ne
 80082ac:	2001      	movne	r0, #1
 80082ae:	b002      	add	sp, #8
 80082b0:	4770      	bx	lr
 80082b2:	4610      	mov	r0, r2
 80082b4:	e7fb      	b.n	80082ae <__ascii_mbtowc+0x16>
 80082b6:	f06f 0001 	mvn.w	r0, #1
 80082ba:	e7f8      	b.n	80082ae <__ascii_mbtowc+0x16>

080082bc <memcpy>:
 80082bc:	440a      	add	r2, r1
 80082be:	4291      	cmp	r1, r2
 80082c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80082c4:	d100      	bne.n	80082c8 <memcpy+0xc>
 80082c6:	4770      	bx	lr
 80082c8:	b510      	push	{r4, lr}
 80082ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082d2:	4291      	cmp	r1, r2
 80082d4:	d1f9      	bne.n	80082ca <memcpy+0xe>
 80082d6:	bd10      	pop	{r4, pc}

080082d8 <_Balloc>:
 80082d8:	b570      	push	{r4, r5, r6, lr}
 80082da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082dc:	4604      	mov	r4, r0
 80082de:	460d      	mov	r5, r1
 80082e0:	b976      	cbnz	r6, 8008300 <_Balloc+0x28>
 80082e2:	2010      	movs	r0, #16
 80082e4:	f7ff ffd0 	bl	8008288 <malloc>
 80082e8:	4602      	mov	r2, r0
 80082ea:	6260      	str	r0, [r4, #36]	; 0x24
 80082ec:	b920      	cbnz	r0, 80082f8 <_Balloc+0x20>
 80082ee:	4b18      	ldr	r3, [pc, #96]	; (8008350 <_Balloc+0x78>)
 80082f0:	4818      	ldr	r0, [pc, #96]	; (8008354 <_Balloc+0x7c>)
 80082f2:	2166      	movs	r1, #102	; 0x66
 80082f4:	f001 fb5c 	bl	80099b0 <__assert_func>
 80082f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082fc:	6006      	str	r6, [r0, #0]
 80082fe:	60c6      	str	r6, [r0, #12]
 8008300:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008302:	68f3      	ldr	r3, [r6, #12]
 8008304:	b183      	cbz	r3, 8008328 <_Balloc+0x50>
 8008306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800830e:	b9b8      	cbnz	r0, 8008340 <_Balloc+0x68>
 8008310:	2101      	movs	r1, #1
 8008312:	fa01 f605 	lsl.w	r6, r1, r5
 8008316:	1d72      	adds	r2, r6, #5
 8008318:	0092      	lsls	r2, r2, #2
 800831a:	4620      	mov	r0, r4
 800831c:	f000 fc9d 	bl	8008c5a <_calloc_r>
 8008320:	b160      	cbz	r0, 800833c <_Balloc+0x64>
 8008322:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008326:	e00e      	b.n	8008346 <_Balloc+0x6e>
 8008328:	2221      	movs	r2, #33	; 0x21
 800832a:	2104      	movs	r1, #4
 800832c:	4620      	mov	r0, r4
 800832e:	f000 fc94 	bl	8008c5a <_calloc_r>
 8008332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008334:	60f0      	str	r0, [r6, #12]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e4      	bne.n	8008306 <_Balloc+0x2e>
 800833c:	2000      	movs	r0, #0
 800833e:	bd70      	pop	{r4, r5, r6, pc}
 8008340:	6802      	ldr	r2, [r0, #0]
 8008342:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008346:	2300      	movs	r3, #0
 8008348:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800834c:	e7f7      	b.n	800833e <_Balloc+0x66>
 800834e:	bf00      	nop
 8008350:	0800cc96 	.word	0x0800cc96
 8008354:	0800cd94 	.word	0x0800cd94

08008358 <_Bfree>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800835c:	4605      	mov	r5, r0
 800835e:	460c      	mov	r4, r1
 8008360:	b976      	cbnz	r6, 8008380 <_Bfree+0x28>
 8008362:	2010      	movs	r0, #16
 8008364:	f7ff ff90 	bl	8008288 <malloc>
 8008368:	4602      	mov	r2, r0
 800836a:	6268      	str	r0, [r5, #36]	; 0x24
 800836c:	b920      	cbnz	r0, 8008378 <_Bfree+0x20>
 800836e:	4b09      	ldr	r3, [pc, #36]	; (8008394 <_Bfree+0x3c>)
 8008370:	4809      	ldr	r0, [pc, #36]	; (8008398 <_Bfree+0x40>)
 8008372:	218a      	movs	r1, #138	; 0x8a
 8008374:	f001 fb1c 	bl	80099b0 <__assert_func>
 8008378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800837c:	6006      	str	r6, [r0, #0]
 800837e:	60c6      	str	r6, [r0, #12]
 8008380:	b13c      	cbz	r4, 8008392 <_Bfree+0x3a>
 8008382:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008384:	6862      	ldr	r2, [r4, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800838c:	6021      	str	r1, [r4, #0]
 800838e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	0800cc96 	.word	0x0800cc96
 8008398:	0800cd94 	.word	0x0800cd94

0800839c <__multadd>:
 800839c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a0:	690d      	ldr	r5, [r1, #16]
 80083a2:	4607      	mov	r7, r0
 80083a4:	460c      	mov	r4, r1
 80083a6:	461e      	mov	r6, r3
 80083a8:	f101 0c14 	add.w	ip, r1, #20
 80083ac:	2000      	movs	r0, #0
 80083ae:	f8dc 3000 	ldr.w	r3, [ip]
 80083b2:	b299      	uxth	r1, r3
 80083b4:	fb02 6101 	mla	r1, r2, r1, r6
 80083b8:	0c1e      	lsrs	r6, r3, #16
 80083ba:	0c0b      	lsrs	r3, r1, #16
 80083bc:	fb02 3306 	mla	r3, r2, r6, r3
 80083c0:	b289      	uxth	r1, r1
 80083c2:	3001      	adds	r0, #1
 80083c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083c8:	4285      	cmp	r5, r0
 80083ca:	f84c 1b04 	str.w	r1, [ip], #4
 80083ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083d2:	dcec      	bgt.n	80083ae <__multadd+0x12>
 80083d4:	b30e      	cbz	r6, 800841a <__multadd+0x7e>
 80083d6:	68a3      	ldr	r3, [r4, #8]
 80083d8:	42ab      	cmp	r3, r5
 80083da:	dc19      	bgt.n	8008410 <__multadd+0x74>
 80083dc:	6861      	ldr	r1, [r4, #4]
 80083de:	4638      	mov	r0, r7
 80083e0:	3101      	adds	r1, #1
 80083e2:	f7ff ff79 	bl	80082d8 <_Balloc>
 80083e6:	4680      	mov	r8, r0
 80083e8:	b928      	cbnz	r0, 80083f6 <__multadd+0x5a>
 80083ea:	4602      	mov	r2, r0
 80083ec:	4b0c      	ldr	r3, [pc, #48]	; (8008420 <__multadd+0x84>)
 80083ee:	480d      	ldr	r0, [pc, #52]	; (8008424 <__multadd+0x88>)
 80083f0:	21b5      	movs	r1, #181	; 0xb5
 80083f2:	f001 fadd 	bl	80099b0 <__assert_func>
 80083f6:	6922      	ldr	r2, [r4, #16]
 80083f8:	3202      	adds	r2, #2
 80083fa:	f104 010c 	add.w	r1, r4, #12
 80083fe:	0092      	lsls	r2, r2, #2
 8008400:	300c      	adds	r0, #12
 8008402:	f7ff ff5b 	bl	80082bc <memcpy>
 8008406:	4621      	mov	r1, r4
 8008408:	4638      	mov	r0, r7
 800840a:	f7ff ffa5 	bl	8008358 <_Bfree>
 800840e:	4644      	mov	r4, r8
 8008410:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008414:	3501      	adds	r5, #1
 8008416:	615e      	str	r6, [r3, #20]
 8008418:	6125      	str	r5, [r4, #16]
 800841a:	4620      	mov	r0, r4
 800841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008420:	0800cd08 	.word	0x0800cd08
 8008424:	0800cd94 	.word	0x0800cd94

08008428 <__s2b>:
 8008428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800842c:	460c      	mov	r4, r1
 800842e:	4615      	mov	r5, r2
 8008430:	461f      	mov	r7, r3
 8008432:	2209      	movs	r2, #9
 8008434:	3308      	adds	r3, #8
 8008436:	4606      	mov	r6, r0
 8008438:	fb93 f3f2 	sdiv	r3, r3, r2
 800843c:	2100      	movs	r1, #0
 800843e:	2201      	movs	r2, #1
 8008440:	429a      	cmp	r2, r3
 8008442:	db09      	blt.n	8008458 <__s2b+0x30>
 8008444:	4630      	mov	r0, r6
 8008446:	f7ff ff47 	bl	80082d8 <_Balloc>
 800844a:	b940      	cbnz	r0, 800845e <__s2b+0x36>
 800844c:	4602      	mov	r2, r0
 800844e:	4b19      	ldr	r3, [pc, #100]	; (80084b4 <__s2b+0x8c>)
 8008450:	4819      	ldr	r0, [pc, #100]	; (80084b8 <__s2b+0x90>)
 8008452:	21ce      	movs	r1, #206	; 0xce
 8008454:	f001 faac 	bl	80099b0 <__assert_func>
 8008458:	0052      	lsls	r2, r2, #1
 800845a:	3101      	adds	r1, #1
 800845c:	e7f0      	b.n	8008440 <__s2b+0x18>
 800845e:	9b08      	ldr	r3, [sp, #32]
 8008460:	6143      	str	r3, [r0, #20]
 8008462:	2d09      	cmp	r5, #9
 8008464:	f04f 0301 	mov.w	r3, #1
 8008468:	6103      	str	r3, [r0, #16]
 800846a:	dd16      	ble.n	800849a <__s2b+0x72>
 800846c:	f104 0909 	add.w	r9, r4, #9
 8008470:	46c8      	mov	r8, r9
 8008472:	442c      	add	r4, r5
 8008474:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008478:	4601      	mov	r1, r0
 800847a:	3b30      	subs	r3, #48	; 0x30
 800847c:	220a      	movs	r2, #10
 800847e:	4630      	mov	r0, r6
 8008480:	f7ff ff8c 	bl	800839c <__multadd>
 8008484:	45a0      	cmp	r8, r4
 8008486:	d1f5      	bne.n	8008474 <__s2b+0x4c>
 8008488:	f1a5 0408 	sub.w	r4, r5, #8
 800848c:	444c      	add	r4, r9
 800848e:	1b2d      	subs	r5, r5, r4
 8008490:	1963      	adds	r3, r4, r5
 8008492:	42bb      	cmp	r3, r7
 8008494:	db04      	blt.n	80084a0 <__s2b+0x78>
 8008496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800849a:	340a      	adds	r4, #10
 800849c:	2509      	movs	r5, #9
 800849e:	e7f6      	b.n	800848e <__s2b+0x66>
 80084a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80084a4:	4601      	mov	r1, r0
 80084a6:	3b30      	subs	r3, #48	; 0x30
 80084a8:	220a      	movs	r2, #10
 80084aa:	4630      	mov	r0, r6
 80084ac:	f7ff ff76 	bl	800839c <__multadd>
 80084b0:	e7ee      	b.n	8008490 <__s2b+0x68>
 80084b2:	bf00      	nop
 80084b4:	0800cd08 	.word	0x0800cd08
 80084b8:	0800cd94 	.word	0x0800cd94

080084bc <__hi0bits>:
 80084bc:	0c03      	lsrs	r3, r0, #16
 80084be:	041b      	lsls	r3, r3, #16
 80084c0:	b9d3      	cbnz	r3, 80084f8 <__hi0bits+0x3c>
 80084c2:	0400      	lsls	r0, r0, #16
 80084c4:	2310      	movs	r3, #16
 80084c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80084ca:	bf04      	itt	eq
 80084cc:	0200      	lsleq	r0, r0, #8
 80084ce:	3308      	addeq	r3, #8
 80084d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80084d4:	bf04      	itt	eq
 80084d6:	0100      	lsleq	r0, r0, #4
 80084d8:	3304      	addeq	r3, #4
 80084da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80084de:	bf04      	itt	eq
 80084e0:	0080      	lsleq	r0, r0, #2
 80084e2:	3302      	addeq	r3, #2
 80084e4:	2800      	cmp	r0, #0
 80084e6:	db05      	blt.n	80084f4 <__hi0bits+0x38>
 80084e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80084ec:	f103 0301 	add.w	r3, r3, #1
 80084f0:	bf08      	it	eq
 80084f2:	2320      	moveq	r3, #32
 80084f4:	4618      	mov	r0, r3
 80084f6:	4770      	bx	lr
 80084f8:	2300      	movs	r3, #0
 80084fa:	e7e4      	b.n	80084c6 <__hi0bits+0xa>

080084fc <__lo0bits>:
 80084fc:	6803      	ldr	r3, [r0, #0]
 80084fe:	f013 0207 	ands.w	r2, r3, #7
 8008502:	4601      	mov	r1, r0
 8008504:	d00b      	beq.n	800851e <__lo0bits+0x22>
 8008506:	07da      	lsls	r2, r3, #31
 8008508:	d423      	bmi.n	8008552 <__lo0bits+0x56>
 800850a:	0798      	lsls	r0, r3, #30
 800850c:	bf49      	itett	mi
 800850e:	085b      	lsrmi	r3, r3, #1
 8008510:	089b      	lsrpl	r3, r3, #2
 8008512:	2001      	movmi	r0, #1
 8008514:	600b      	strmi	r3, [r1, #0]
 8008516:	bf5c      	itt	pl
 8008518:	600b      	strpl	r3, [r1, #0]
 800851a:	2002      	movpl	r0, #2
 800851c:	4770      	bx	lr
 800851e:	b298      	uxth	r0, r3
 8008520:	b9a8      	cbnz	r0, 800854e <__lo0bits+0x52>
 8008522:	0c1b      	lsrs	r3, r3, #16
 8008524:	2010      	movs	r0, #16
 8008526:	b2da      	uxtb	r2, r3
 8008528:	b90a      	cbnz	r2, 800852e <__lo0bits+0x32>
 800852a:	3008      	adds	r0, #8
 800852c:	0a1b      	lsrs	r3, r3, #8
 800852e:	071a      	lsls	r2, r3, #28
 8008530:	bf04      	itt	eq
 8008532:	091b      	lsreq	r3, r3, #4
 8008534:	3004      	addeq	r0, #4
 8008536:	079a      	lsls	r2, r3, #30
 8008538:	bf04      	itt	eq
 800853a:	089b      	lsreq	r3, r3, #2
 800853c:	3002      	addeq	r0, #2
 800853e:	07da      	lsls	r2, r3, #31
 8008540:	d403      	bmi.n	800854a <__lo0bits+0x4e>
 8008542:	085b      	lsrs	r3, r3, #1
 8008544:	f100 0001 	add.w	r0, r0, #1
 8008548:	d005      	beq.n	8008556 <__lo0bits+0x5a>
 800854a:	600b      	str	r3, [r1, #0]
 800854c:	4770      	bx	lr
 800854e:	4610      	mov	r0, r2
 8008550:	e7e9      	b.n	8008526 <__lo0bits+0x2a>
 8008552:	2000      	movs	r0, #0
 8008554:	4770      	bx	lr
 8008556:	2020      	movs	r0, #32
 8008558:	4770      	bx	lr
	...

0800855c <__i2b>:
 800855c:	b510      	push	{r4, lr}
 800855e:	460c      	mov	r4, r1
 8008560:	2101      	movs	r1, #1
 8008562:	f7ff feb9 	bl	80082d8 <_Balloc>
 8008566:	4602      	mov	r2, r0
 8008568:	b928      	cbnz	r0, 8008576 <__i2b+0x1a>
 800856a:	4b05      	ldr	r3, [pc, #20]	; (8008580 <__i2b+0x24>)
 800856c:	4805      	ldr	r0, [pc, #20]	; (8008584 <__i2b+0x28>)
 800856e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008572:	f001 fa1d 	bl	80099b0 <__assert_func>
 8008576:	2301      	movs	r3, #1
 8008578:	6144      	str	r4, [r0, #20]
 800857a:	6103      	str	r3, [r0, #16]
 800857c:	bd10      	pop	{r4, pc}
 800857e:	bf00      	nop
 8008580:	0800cd08 	.word	0x0800cd08
 8008584:	0800cd94 	.word	0x0800cd94

08008588 <__multiply>:
 8008588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858c:	4691      	mov	r9, r2
 800858e:	690a      	ldr	r2, [r1, #16]
 8008590:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008594:	429a      	cmp	r2, r3
 8008596:	bfb8      	it	lt
 8008598:	460b      	movlt	r3, r1
 800859a:	460c      	mov	r4, r1
 800859c:	bfbc      	itt	lt
 800859e:	464c      	movlt	r4, r9
 80085a0:	4699      	movlt	r9, r3
 80085a2:	6927      	ldr	r7, [r4, #16]
 80085a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80085a8:	68a3      	ldr	r3, [r4, #8]
 80085aa:	6861      	ldr	r1, [r4, #4]
 80085ac:	eb07 060a 	add.w	r6, r7, sl
 80085b0:	42b3      	cmp	r3, r6
 80085b2:	b085      	sub	sp, #20
 80085b4:	bfb8      	it	lt
 80085b6:	3101      	addlt	r1, #1
 80085b8:	f7ff fe8e 	bl	80082d8 <_Balloc>
 80085bc:	b930      	cbnz	r0, 80085cc <__multiply+0x44>
 80085be:	4602      	mov	r2, r0
 80085c0:	4b44      	ldr	r3, [pc, #272]	; (80086d4 <__multiply+0x14c>)
 80085c2:	4845      	ldr	r0, [pc, #276]	; (80086d8 <__multiply+0x150>)
 80085c4:	f240 115d 	movw	r1, #349	; 0x15d
 80085c8:	f001 f9f2 	bl	80099b0 <__assert_func>
 80085cc:	f100 0514 	add.w	r5, r0, #20
 80085d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085d4:	462b      	mov	r3, r5
 80085d6:	2200      	movs	r2, #0
 80085d8:	4543      	cmp	r3, r8
 80085da:	d321      	bcc.n	8008620 <__multiply+0x98>
 80085dc:	f104 0314 	add.w	r3, r4, #20
 80085e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80085e4:	f109 0314 	add.w	r3, r9, #20
 80085e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80085ec:	9202      	str	r2, [sp, #8]
 80085ee:	1b3a      	subs	r2, r7, r4
 80085f0:	3a15      	subs	r2, #21
 80085f2:	f022 0203 	bic.w	r2, r2, #3
 80085f6:	3204      	adds	r2, #4
 80085f8:	f104 0115 	add.w	r1, r4, #21
 80085fc:	428f      	cmp	r7, r1
 80085fe:	bf38      	it	cc
 8008600:	2204      	movcc	r2, #4
 8008602:	9201      	str	r2, [sp, #4]
 8008604:	9a02      	ldr	r2, [sp, #8]
 8008606:	9303      	str	r3, [sp, #12]
 8008608:	429a      	cmp	r2, r3
 800860a:	d80c      	bhi.n	8008626 <__multiply+0x9e>
 800860c:	2e00      	cmp	r6, #0
 800860e:	dd03      	ble.n	8008618 <__multiply+0x90>
 8008610:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008614:	2b00      	cmp	r3, #0
 8008616:	d05a      	beq.n	80086ce <__multiply+0x146>
 8008618:	6106      	str	r6, [r0, #16]
 800861a:	b005      	add	sp, #20
 800861c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008620:	f843 2b04 	str.w	r2, [r3], #4
 8008624:	e7d8      	b.n	80085d8 <__multiply+0x50>
 8008626:	f8b3 a000 	ldrh.w	sl, [r3]
 800862a:	f1ba 0f00 	cmp.w	sl, #0
 800862e:	d024      	beq.n	800867a <__multiply+0xf2>
 8008630:	f104 0e14 	add.w	lr, r4, #20
 8008634:	46a9      	mov	r9, r5
 8008636:	f04f 0c00 	mov.w	ip, #0
 800863a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800863e:	f8d9 1000 	ldr.w	r1, [r9]
 8008642:	fa1f fb82 	uxth.w	fp, r2
 8008646:	b289      	uxth	r1, r1
 8008648:	fb0a 110b 	mla	r1, sl, fp, r1
 800864c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008650:	f8d9 2000 	ldr.w	r2, [r9]
 8008654:	4461      	add	r1, ip
 8008656:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800865a:	fb0a c20b 	mla	r2, sl, fp, ip
 800865e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008662:	b289      	uxth	r1, r1
 8008664:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008668:	4577      	cmp	r7, lr
 800866a:	f849 1b04 	str.w	r1, [r9], #4
 800866e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008672:	d8e2      	bhi.n	800863a <__multiply+0xb2>
 8008674:	9a01      	ldr	r2, [sp, #4]
 8008676:	f845 c002 	str.w	ip, [r5, r2]
 800867a:	9a03      	ldr	r2, [sp, #12]
 800867c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008680:	3304      	adds	r3, #4
 8008682:	f1b9 0f00 	cmp.w	r9, #0
 8008686:	d020      	beq.n	80086ca <__multiply+0x142>
 8008688:	6829      	ldr	r1, [r5, #0]
 800868a:	f104 0c14 	add.w	ip, r4, #20
 800868e:	46ae      	mov	lr, r5
 8008690:	f04f 0a00 	mov.w	sl, #0
 8008694:	f8bc b000 	ldrh.w	fp, [ip]
 8008698:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800869c:	fb09 220b 	mla	r2, r9, fp, r2
 80086a0:	4492      	add	sl, r2
 80086a2:	b289      	uxth	r1, r1
 80086a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80086a8:	f84e 1b04 	str.w	r1, [lr], #4
 80086ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80086b0:	f8be 1000 	ldrh.w	r1, [lr]
 80086b4:	0c12      	lsrs	r2, r2, #16
 80086b6:	fb09 1102 	mla	r1, r9, r2, r1
 80086ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80086be:	4567      	cmp	r7, ip
 80086c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80086c4:	d8e6      	bhi.n	8008694 <__multiply+0x10c>
 80086c6:	9a01      	ldr	r2, [sp, #4]
 80086c8:	50a9      	str	r1, [r5, r2]
 80086ca:	3504      	adds	r5, #4
 80086cc:	e79a      	b.n	8008604 <__multiply+0x7c>
 80086ce:	3e01      	subs	r6, #1
 80086d0:	e79c      	b.n	800860c <__multiply+0x84>
 80086d2:	bf00      	nop
 80086d4:	0800cd08 	.word	0x0800cd08
 80086d8:	0800cd94 	.word	0x0800cd94

080086dc <__pow5mult>:
 80086dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e0:	4615      	mov	r5, r2
 80086e2:	f012 0203 	ands.w	r2, r2, #3
 80086e6:	4606      	mov	r6, r0
 80086e8:	460f      	mov	r7, r1
 80086ea:	d007      	beq.n	80086fc <__pow5mult+0x20>
 80086ec:	4c25      	ldr	r4, [pc, #148]	; (8008784 <__pow5mult+0xa8>)
 80086ee:	3a01      	subs	r2, #1
 80086f0:	2300      	movs	r3, #0
 80086f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086f6:	f7ff fe51 	bl	800839c <__multadd>
 80086fa:	4607      	mov	r7, r0
 80086fc:	10ad      	asrs	r5, r5, #2
 80086fe:	d03d      	beq.n	800877c <__pow5mult+0xa0>
 8008700:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008702:	b97c      	cbnz	r4, 8008724 <__pow5mult+0x48>
 8008704:	2010      	movs	r0, #16
 8008706:	f7ff fdbf 	bl	8008288 <malloc>
 800870a:	4602      	mov	r2, r0
 800870c:	6270      	str	r0, [r6, #36]	; 0x24
 800870e:	b928      	cbnz	r0, 800871c <__pow5mult+0x40>
 8008710:	4b1d      	ldr	r3, [pc, #116]	; (8008788 <__pow5mult+0xac>)
 8008712:	481e      	ldr	r0, [pc, #120]	; (800878c <__pow5mult+0xb0>)
 8008714:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008718:	f001 f94a 	bl	80099b0 <__assert_func>
 800871c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008720:	6004      	str	r4, [r0, #0]
 8008722:	60c4      	str	r4, [r0, #12]
 8008724:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800872c:	b94c      	cbnz	r4, 8008742 <__pow5mult+0x66>
 800872e:	f240 2171 	movw	r1, #625	; 0x271
 8008732:	4630      	mov	r0, r6
 8008734:	f7ff ff12 	bl	800855c <__i2b>
 8008738:	2300      	movs	r3, #0
 800873a:	f8c8 0008 	str.w	r0, [r8, #8]
 800873e:	4604      	mov	r4, r0
 8008740:	6003      	str	r3, [r0, #0]
 8008742:	f04f 0900 	mov.w	r9, #0
 8008746:	07eb      	lsls	r3, r5, #31
 8008748:	d50a      	bpl.n	8008760 <__pow5mult+0x84>
 800874a:	4639      	mov	r1, r7
 800874c:	4622      	mov	r2, r4
 800874e:	4630      	mov	r0, r6
 8008750:	f7ff ff1a 	bl	8008588 <__multiply>
 8008754:	4639      	mov	r1, r7
 8008756:	4680      	mov	r8, r0
 8008758:	4630      	mov	r0, r6
 800875a:	f7ff fdfd 	bl	8008358 <_Bfree>
 800875e:	4647      	mov	r7, r8
 8008760:	106d      	asrs	r5, r5, #1
 8008762:	d00b      	beq.n	800877c <__pow5mult+0xa0>
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	b938      	cbnz	r0, 8008778 <__pow5mult+0x9c>
 8008768:	4622      	mov	r2, r4
 800876a:	4621      	mov	r1, r4
 800876c:	4630      	mov	r0, r6
 800876e:	f7ff ff0b 	bl	8008588 <__multiply>
 8008772:	6020      	str	r0, [r4, #0]
 8008774:	f8c0 9000 	str.w	r9, [r0]
 8008778:	4604      	mov	r4, r0
 800877a:	e7e4      	b.n	8008746 <__pow5mult+0x6a>
 800877c:	4638      	mov	r0, r7
 800877e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008782:	bf00      	nop
 8008784:	0800cee0 	.word	0x0800cee0
 8008788:	0800cc96 	.word	0x0800cc96
 800878c:	0800cd94 	.word	0x0800cd94

08008790 <__lshift>:
 8008790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008794:	460c      	mov	r4, r1
 8008796:	6849      	ldr	r1, [r1, #4]
 8008798:	6923      	ldr	r3, [r4, #16]
 800879a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800879e:	68a3      	ldr	r3, [r4, #8]
 80087a0:	4607      	mov	r7, r0
 80087a2:	4691      	mov	r9, r2
 80087a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087a8:	f108 0601 	add.w	r6, r8, #1
 80087ac:	42b3      	cmp	r3, r6
 80087ae:	db0b      	blt.n	80087c8 <__lshift+0x38>
 80087b0:	4638      	mov	r0, r7
 80087b2:	f7ff fd91 	bl	80082d8 <_Balloc>
 80087b6:	4605      	mov	r5, r0
 80087b8:	b948      	cbnz	r0, 80087ce <__lshift+0x3e>
 80087ba:	4602      	mov	r2, r0
 80087bc:	4b2a      	ldr	r3, [pc, #168]	; (8008868 <__lshift+0xd8>)
 80087be:	482b      	ldr	r0, [pc, #172]	; (800886c <__lshift+0xdc>)
 80087c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80087c4:	f001 f8f4 	bl	80099b0 <__assert_func>
 80087c8:	3101      	adds	r1, #1
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	e7ee      	b.n	80087ac <__lshift+0x1c>
 80087ce:	2300      	movs	r3, #0
 80087d0:	f100 0114 	add.w	r1, r0, #20
 80087d4:	f100 0210 	add.w	r2, r0, #16
 80087d8:	4618      	mov	r0, r3
 80087da:	4553      	cmp	r3, sl
 80087dc:	db37      	blt.n	800884e <__lshift+0xbe>
 80087de:	6920      	ldr	r0, [r4, #16]
 80087e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087e4:	f104 0314 	add.w	r3, r4, #20
 80087e8:	f019 091f 	ands.w	r9, r9, #31
 80087ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80087f4:	d02f      	beq.n	8008856 <__lshift+0xc6>
 80087f6:	f1c9 0e20 	rsb	lr, r9, #32
 80087fa:	468a      	mov	sl, r1
 80087fc:	f04f 0c00 	mov.w	ip, #0
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	fa02 f209 	lsl.w	r2, r2, r9
 8008806:	ea42 020c 	orr.w	r2, r2, ip
 800880a:	f84a 2b04 	str.w	r2, [sl], #4
 800880e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008812:	4298      	cmp	r0, r3
 8008814:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008818:	d8f2      	bhi.n	8008800 <__lshift+0x70>
 800881a:	1b03      	subs	r3, r0, r4
 800881c:	3b15      	subs	r3, #21
 800881e:	f023 0303 	bic.w	r3, r3, #3
 8008822:	3304      	adds	r3, #4
 8008824:	f104 0215 	add.w	r2, r4, #21
 8008828:	4290      	cmp	r0, r2
 800882a:	bf38      	it	cc
 800882c:	2304      	movcc	r3, #4
 800882e:	f841 c003 	str.w	ip, [r1, r3]
 8008832:	f1bc 0f00 	cmp.w	ip, #0
 8008836:	d001      	beq.n	800883c <__lshift+0xac>
 8008838:	f108 0602 	add.w	r6, r8, #2
 800883c:	3e01      	subs	r6, #1
 800883e:	4638      	mov	r0, r7
 8008840:	612e      	str	r6, [r5, #16]
 8008842:	4621      	mov	r1, r4
 8008844:	f7ff fd88 	bl	8008358 <_Bfree>
 8008848:	4628      	mov	r0, r5
 800884a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008852:	3301      	adds	r3, #1
 8008854:	e7c1      	b.n	80087da <__lshift+0x4a>
 8008856:	3904      	subs	r1, #4
 8008858:	f853 2b04 	ldr.w	r2, [r3], #4
 800885c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008860:	4298      	cmp	r0, r3
 8008862:	d8f9      	bhi.n	8008858 <__lshift+0xc8>
 8008864:	e7ea      	b.n	800883c <__lshift+0xac>
 8008866:	bf00      	nop
 8008868:	0800cd08 	.word	0x0800cd08
 800886c:	0800cd94 	.word	0x0800cd94

08008870 <__mcmp>:
 8008870:	b530      	push	{r4, r5, lr}
 8008872:	6902      	ldr	r2, [r0, #16]
 8008874:	690c      	ldr	r4, [r1, #16]
 8008876:	1b12      	subs	r2, r2, r4
 8008878:	d10e      	bne.n	8008898 <__mcmp+0x28>
 800887a:	f100 0314 	add.w	r3, r0, #20
 800887e:	3114      	adds	r1, #20
 8008880:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008884:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008888:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800888c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008890:	42a5      	cmp	r5, r4
 8008892:	d003      	beq.n	800889c <__mcmp+0x2c>
 8008894:	d305      	bcc.n	80088a2 <__mcmp+0x32>
 8008896:	2201      	movs	r2, #1
 8008898:	4610      	mov	r0, r2
 800889a:	bd30      	pop	{r4, r5, pc}
 800889c:	4283      	cmp	r3, r0
 800889e:	d3f3      	bcc.n	8008888 <__mcmp+0x18>
 80088a0:	e7fa      	b.n	8008898 <__mcmp+0x28>
 80088a2:	f04f 32ff 	mov.w	r2, #4294967295
 80088a6:	e7f7      	b.n	8008898 <__mcmp+0x28>

080088a8 <__mdiff>:
 80088a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	460c      	mov	r4, r1
 80088ae:	4606      	mov	r6, r0
 80088b0:	4611      	mov	r1, r2
 80088b2:	4620      	mov	r0, r4
 80088b4:	4690      	mov	r8, r2
 80088b6:	f7ff ffdb 	bl	8008870 <__mcmp>
 80088ba:	1e05      	subs	r5, r0, #0
 80088bc:	d110      	bne.n	80088e0 <__mdiff+0x38>
 80088be:	4629      	mov	r1, r5
 80088c0:	4630      	mov	r0, r6
 80088c2:	f7ff fd09 	bl	80082d8 <_Balloc>
 80088c6:	b930      	cbnz	r0, 80088d6 <__mdiff+0x2e>
 80088c8:	4b3a      	ldr	r3, [pc, #232]	; (80089b4 <__mdiff+0x10c>)
 80088ca:	4602      	mov	r2, r0
 80088cc:	f240 2132 	movw	r1, #562	; 0x232
 80088d0:	4839      	ldr	r0, [pc, #228]	; (80089b8 <__mdiff+0x110>)
 80088d2:	f001 f86d 	bl	80099b0 <__assert_func>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e0:	bfa4      	itt	ge
 80088e2:	4643      	movge	r3, r8
 80088e4:	46a0      	movge	r8, r4
 80088e6:	4630      	mov	r0, r6
 80088e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80088ec:	bfa6      	itte	ge
 80088ee:	461c      	movge	r4, r3
 80088f0:	2500      	movge	r5, #0
 80088f2:	2501      	movlt	r5, #1
 80088f4:	f7ff fcf0 	bl	80082d8 <_Balloc>
 80088f8:	b920      	cbnz	r0, 8008904 <__mdiff+0x5c>
 80088fa:	4b2e      	ldr	r3, [pc, #184]	; (80089b4 <__mdiff+0x10c>)
 80088fc:	4602      	mov	r2, r0
 80088fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008902:	e7e5      	b.n	80088d0 <__mdiff+0x28>
 8008904:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008908:	6926      	ldr	r6, [r4, #16]
 800890a:	60c5      	str	r5, [r0, #12]
 800890c:	f104 0914 	add.w	r9, r4, #20
 8008910:	f108 0514 	add.w	r5, r8, #20
 8008914:	f100 0e14 	add.w	lr, r0, #20
 8008918:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800891c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008920:	f108 0210 	add.w	r2, r8, #16
 8008924:	46f2      	mov	sl, lr
 8008926:	2100      	movs	r1, #0
 8008928:	f859 3b04 	ldr.w	r3, [r9], #4
 800892c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008930:	fa1f f883 	uxth.w	r8, r3
 8008934:	fa11 f18b 	uxtah	r1, r1, fp
 8008938:	0c1b      	lsrs	r3, r3, #16
 800893a:	eba1 0808 	sub.w	r8, r1, r8
 800893e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008942:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008946:	fa1f f888 	uxth.w	r8, r8
 800894a:	1419      	asrs	r1, r3, #16
 800894c:	454e      	cmp	r6, r9
 800894e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008952:	f84a 3b04 	str.w	r3, [sl], #4
 8008956:	d8e7      	bhi.n	8008928 <__mdiff+0x80>
 8008958:	1b33      	subs	r3, r6, r4
 800895a:	3b15      	subs	r3, #21
 800895c:	f023 0303 	bic.w	r3, r3, #3
 8008960:	3304      	adds	r3, #4
 8008962:	3415      	adds	r4, #21
 8008964:	42a6      	cmp	r6, r4
 8008966:	bf38      	it	cc
 8008968:	2304      	movcc	r3, #4
 800896a:	441d      	add	r5, r3
 800896c:	4473      	add	r3, lr
 800896e:	469e      	mov	lr, r3
 8008970:	462e      	mov	r6, r5
 8008972:	4566      	cmp	r6, ip
 8008974:	d30e      	bcc.n	8008994 <__mdiff+0xec>
 8008976:	f10c 0203 	add.w	r2, ip, #3
 800897a:	1b52      	subs	r2, r2, r5
 800897c:	f022 0203 	bic.w	r2, r2, #3
 8008980:	3d03      	subs	r5, #3
 8008982:	45ac      	cmp	ip, r5
 8008984:	bf38      	it	cc
 8008986:	2200      	movcc	r2, #0
 8008988:	441a      	add	r2, r3
 800898a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800898e:	b17b      	cbz	r3, 80089b0 <__mdiff+0x108>
 8008990:	6107      	str	r7, [r0, #16]
 8008992:	e7a3      	b.n	80088dc <__mdiff+0x34>
 8008994:	f856 8b04 	ldr.w	r8, [r6], #4
 8008998:	fa11 f288 	uxtah	r2, r1, r8
 800899c:	1414      	asrs	r4, r2, #16
 800899e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80089a2:	b292      	uxth	r2, r2
 80089a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80089a8:	f84e 2b04 	str.w	r2, [lr], #4
 80089ac:	1421      	asrs	r1, r4, #16
 80089ae:	e7e0      	b.n	8008972 <__mdiff+0xca>
 80089b0:	3f01      	subs	r7, #1
 80089b2:	e7ea      	b.n	800898a <__mdiff+0xe2>
 80089b4:	0800cd08 	.word	0x0800cd08
 80089b8:	0800cd94 	.word	0x0800cd94

080089bc <__ulp>:
 80089bc:	b082      	sub	sp, #8
 80089be:	ed8d 0b00 	vstr	d0, [sp]
 80089c2:	9b01      	ldr	r3, [sp, #4]
 80089c4:	4912      	ldr	r1, [pc, #72]	; (8008a10 <__ulp+0x54>)
 80089c6:	4019      	ands	r1, r3
 80089c8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80089cc:	2900      	cmp	r1, #0
 80089ce:	dd05      	ble.n	80089dc <__ulp+0x20>
 80089d0:	2200      	movs	r2, #0
 80089d2:	460b      	mov	r3, r1
 80089d4:	ec43 2b10 	vmov	d0, r2, r3
 80089d8:	b002      	add	sp, #8
 80089da:	4770      	bx	lr
 80089dc:	4249      	negs	r1, r1
 80089de:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80089e2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80089e6:	f04f 0200 	mov.w	r2, #0
 80089ea:	f04f 0300 	mov.w	r3, #0
 80089ee:	da04      	bge.n	80089fa <__ulp+0x3e>
 80089f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80089f4:	fa41 f300 	asr.w	r3, r1, r0
 80089f8:	e7ec      	b.n	80089d4 <__ulp+0x18>
 80089fa:	f1a0 0114 	sub.w	r1, r0, #20
 80089fe:	291e      	cmp	r1, #30
 8008a00:	bfda      	itte	le
 8008a02:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008a06:	fa20 f101 	lsrle.w	r1, r0, r1
 8008a0a:	2101      	movgt	r1, #1
 8008a0c:	460a      	mov	r2, r1
 8008a0e:	e7e1      	b.n	80089d4 <__ulp+0x18>
 8008a10:	7ff00000 	.word	0x7ff00000

08008a14 <__b2d>:
 8008a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a16:	6905      	ldr	r5, [r0, #16]
 8008a18:	f100 0714 	add.w	r7, r0, #20
 8008a1c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008a20:	1f2e      	subs	r6, r5, #4
 8008a22:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008a26:	4620      	mov	r0, r4
 8008a28:	f7ff fd48 	bl	80084bc <__hi0bits>
 8008a2c:	f1c0 0320 	rsb	r3, r0, #32
 8008a30:	280a      	cmp	r0, #10
 8008a32:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008ab0 <__b2d+0x9c>
 8008a36:	600b      	str	r3, [r1, #0]
 8008a38:	dc14      	bgt.n	8008a64 <__b2d+0x50>
 8008a3a:	f1c0 0e0b 	rsb	lr, r0, #11
 8008a3e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008a42:	42b7      	cmp	r7, r6
 8008a44:	ea41 030c 	orr.w	r3, r1, ip
 8008a48:	bf34      	ite	cc
 8008a4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008a4e:	2100      	movcs	r1, #0
 8008a50:	3015      	adds	r0, #21
 8008a52:	fa04 f000 	lsl.w	r0, r4, r0
 8008a56:	fa21 f10e 	lsr.w	r1, r1, lr
 8008a5a:	ea40 0201 	orr.w	r2, r0, r1
 8008a5e:	ec43 2b10 	vmov	d0, r2, r3
 8008a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a64:	42b7      	cmp	r7, r6
 8008a66:	bf3a      	itte	cc
 8008a68:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008a6c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008a70:	2100      	movcs	r1, #0
 8008a72:	380b      	subs	r0, #11
 8008a74:	d017      	beq.n	8008aa6 <__b2d+0x92>
 8008a76:	f1c0 0c20 	rsb	ip, r0, #32
 8008a7a:	fa04 f500 	lsl.w	r5, r4, r0
 8008a7e:	42be      	cmp	r6, r7
 8008a80:	fa21 f40c 	lsr.w	r4, r1, ip
 8008a84:	ea45 0504 	orr.w	r5, r5, r4
 8008a88:	bf8c      	ite	hi
 8008a8a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008a8e:	2400      	movls	r4, #0
 8008a90:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008a94:	fa01 f000 	lsl.w	r0, r1, r0
 8008a98:	fa24 f40c 	lsr.w	r4, r4, ip
 8008a9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008aa0:	ea40 0204 	orr.w	r2, r0, r4
 8008aa4:	e7db      	b.n	8008a5e <__b2d+0x4a>
 8008aa6:	ea44 030c 	orr.w	r3, r4, ip
 8008aaa:	460a      	mov	r2, r1
 8008aac:	e7d7      	b.n	8008a5e <__b2d+0x4a>
 8008aae:	bf00      	nop
 8008ab0:	3ff00000 	.word	0x3ff00000

08008ab4 <__d2b>:
 8008ab4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ab8:	4689      	mov	r9, r1
 8008aba:	2101      	movs	r1, #1
 8008abc:	ec57 6b10 	vmov	r6, r7, d0
 8008ac0:	4690      	mov	r8, r2
 8008ac2:	f7ff fc09 	bl	80082d8 <_Balloc>
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	b930      	cbnz	r0, 8008ad8 <__d2b+0x24>
 8008aca:	4602      	mov	r2, r0
 8008acc:	4b25      	ldr	r3, [pc, #148]	; (8008b64 <__d2b+0xb0>)
 8008ace:	4826      	ldr	r0, [pc, #152]	; (8008b68 <__d2b+0xb4>)
 8008ad0:	f240 310a 	movw	r1, #778	; 0x30a
 8008ad4:	f000 ff6c 	bl	80099b0 <__assert_func>
 8008ad8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008adc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ae0:	bb35      	cbnz	r5, 8008b30 <__d2b+0x7c>
 8008ae2:	2e00      	cmp	r6, #0
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	d028      	beq.n	8008b3a <__d2b+0x86>
 8008ae8:	4668      	mov	r0, sp
 8008aea:	9600      	str	r6, [sp, #0]
 8008aec:	f7ff fd06 	bl	80084fc <__lo0bits>
 8008af0:	9900      	ldr	r1, [sp, #0]
 8008af2:	b300      	cbz	r0, 8008b36 <__d2b+0x82>
 8008af4:	9a01      	ldr	r2, [sp, #4]
 8008af6:	f1c0 0320 	rsb	r3, r0, #32
 8008afa:	fa02 f303 	lsl.w	r3, r2, r3
 8008afe:	430b      	orrs	r3, r1
 8008b00:	40c2      	lsrs	r2, r0
 8008b02:	6163      	str	r3, [r4, #20]
 8008b04:	9201      	str	r2, [sp, #4]
 8008b06:	9b01      	ldr	r3, [sp, #4]
 8008b08:	61a3      	str	r3, [r4, #24]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	bf14      	ite	ne
 8008b0e:	2202      	movne	r2, #2
 8008b10:	2201      	moveq	r2, #1
 8008b12:	6122      	str	r2, [r4, #16]
 8008b14:	b1d5      	cbz	r5, 8008b4c <__d2b+0x98>
 8008b16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b1a:	4405      	add	r5, r0
 8008b1c:	f8c9 5000 	str.w	r5, [r9]
 8008b20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b24:	f8c8 0000 	str.w	r0, [r8]
 8008b28:	4620      	mov	r0, r4
 8008b2a:	b003      	add	sp, #12
 8008b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b34:	e7d5      	b.n	8008ae2 <__d2b+0x2e>
 8008b36:	6161      	str	r1, [r4, #20]
 8008b38:	e7e5      	b.n	8008b06 <__d2b+0x52>
 8008b3a:	a801      	add	r0, sp, #4
 8008b3c:	f7ff fcde 	bl	80084fc <__lo0bits>
 8008b40:	9b01      	ldr	r3, [sp, #4]
 8008b42:	6163      	str	r3, [r4, #20]
 8008b44:	2201      	movs	r2, #1
 8008b46:	6122      	str	r2, [r4, #16]
 8008b48:	3020      	adds	r0, #32
 8008b4a:	e7e3      	b.n	8008b14 <__d2b+0x60>
 8008b4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b54:	f8c9 0000 	str.w	r0, [r9]
 8008b58:	6918      	ldr	r0, [r3, #16]
 8008b5a:	f7ff fcaf 	bl	80084bc <__hi0bits>
 8008b5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b62:	e7df      	b.n	8008b24 <__d2b+0x70>
 8008b64:	0800cd08 	.word	0x0800cd08
 8008b68:	0800cd94 	.word	0x0800cd94

08008b6c <__ratio>:
 8008b6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b70:	4688      	mov	r8, r1
 8008b72:	4669      	mov	r1, sp
 8008b74:	4681      	mov	r9, r0
 8008b76:	f7ff ff4d 	bl	8008a14 <__b2d>
 8008b7a:	a901      	add	r1, sp, #4
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	ec55 4b10 	vmov	r4, r5, d0
 8008b82:	f7ff ff47 	bl	8008a14 <__b2d>
 8008b86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b8a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008b8e:	eba3 0c02 	sub.w	ip, r3, r2
 8008b92:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b96:	1a9b      	subs	r3, r3, r2
 8008b98:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008b9c:	ec51 0b10 	vmov	r0, r1, d0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bfd6      	itet	le
 8008ba4:	460a      	movle	r2, r1
 8008ba6:	462a      	movgt	r2, r5
 8008ba8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008bac:	468b      	mov	fp, r1
 8008bae:	462f      	mov	r7, r5
 8008bb0:	bfd4      	ite	le
 8008bb2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008bb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008bba:	4620      	mov	r0, r4
 8008bbc:	ee10 2a10 	vmov	r2, s0
 8008bc0:	465b      	mov	r3, fp
 8008bc2:	4639      	mov	r1, r7
 8008bc4:	f7f7 fe5a 	bl	800087c <__aeabi_ddiv>
 8008bc8:	ec41 0b10 	vmov	d0, r0, r1
 8008bcc:	b003      	add	sp, #12
 8008bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008bd2 <__copybits>:
 8008bd2:	3901      	subs	r1, #1
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	1149      	asrs	r1, r1, #5
 8008bd8:	6914      	ldr	r4, [r2, #16]
 8008bda:	3101      	adds	r1, #1
 8008bdc:	f102 0314 	add.w	r3, r2, #20
 8008be0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008be4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008be8:	1f05      	subs	r5, r0, #4
 8008bea:	42a3      	cmp	r3, r4
 8008bec:	d30c      	bcc.n	8008c08 <__copybits+0x36>
 8008bee:	1aa3      	subs	r3, r4, r2
 8008bf0:	3b11      	subs	r3, #17
 8008bf2:	f023 0303 	bic.w	r3, r3, #3
 8008bf6:	3211      	adds	r2, #17
 8008bf8:	42a2      	cmp	r2, r4
 8008bfa:	bf88      	it	hi
 8008bfc:	2300      	movhi	r3, #0
 8008bfe:	4418      	add	r0, r3
 8008c00:	2300      	movs	r3, #0
 8008c02:	4288      	cmp	r0, r1
 8008c04:	d305      	bcc.n	8008c12 <__copybits+0x40>
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c0c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008c10:	e7eb      	b.n	8008bea <__copybits+0x18>
 8008c12:	f840 3b04 	str.w	r3, [r0], #4
 8008c16:	e7f4      	b.n	8008c02 <__copybits+0x30>

08008c18 <__any_on>:
 8008c18:	f100 0214 	add.w	r2, r0, #20
 8008c1c:	6900      	ldr	r0, [r0, #16]
 8008c1e:	114b      	asrs	r3, r1, #5
 8008c20:	4298      	cmp	r0, r3
 8008c22:	b510      	push	{r4, lr}
 8008c24:	db11      	blt.n	8008c4a <__any_on+0x32>
 8008c26:	dd0a      	ble.n	8008c3e <__any_on+0x26>
 8008c28:	f011 011f 	ands.w	r1, r1, #31
 8008c2c:	d007      	beq.n	8008c3e <__any_on+0x26>
 8008c2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c32:	fa24 f001 	lsr.w	r0, r4, r1
 8008c36:	fa00 f101 	lsl.w	r1, r0, r1
 8008c3a:	428c      	cmp	r4, r1
 8008c3c:	d10b      	bne.n	8008c56 <__any_on+0x3e>
 8008c3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d803      	bhi.n	8008c4e <__any_on+0x36>
 8008c46:	2000      	movs	r0, #0
 8008c48:	bd10      	pop	{r4, pc}
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	e7f7      	b.n	8008c3e <__any_on+0x26>
 8008c4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c52:	2900      	cmp	r1, #0
 8008c54:	d0f5      	beq.n	8008c42 <__any_on+0x2a>
 8008c56:	2001      	movs	r0, #1
 8008c58:	e7f6      	b.n	8008c48 <__any_on+0x30>

08008c5a <_calloc_r>:
 8008c5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c5c:	fba1 2402 	umull	r2, r4, r1, r2
 8008c60:	b94c      	cbnz	r4, 8008c76 <_calloc_r+0x1c>
 8008c62:	4611      	mov	r1, r2
 8008c64:	9201      	str	r2, [sp, #4]
 8008c66:	f000 f87b 	bl	8008d60 <_malloc_r>
 8008c6a:	9a01      	ldr	r2, [sp, #4]
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	b930      	cbnz	r0, 8008c7e <_calloc_r+0x24>
 8008c70:	4628      	mov	r0, r5
 8008c72:	b003      	add	sp, #12
 8008c74:	bd30      	pop	{r4, r5, pc}
 8008c76:	220c      	movs	r2, #12
 8008c78:	6002      	str	r2, [r0, #0]
 8008c7a:	2500      	movs	r5, #0
 8008c7c:	e7f8      	b.n	8008c70 <_calloc_r+0x16>
 8008c7e:	4621      	mov	r1, r4
 8008c80:	f7fc fb18 	bl	80052b4 <memset>
 8008c84:	e7f4      	b.n	8008c70 <_calloc_r+0x16>
	...

08008c88 <_free_r>:
 8008c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c8a:	2900      	cmp	r1, #0
 8008c8c:	d044      	beq.n	8008d18 <_free_r+0x90>
 8008c8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c92:	9001      	str	r0, [sp, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f1a1 0404 	sub.w	r4, r1, #4
 8008c9a:	bfb8      	it	lt
 8008c9c:	18e4      	addlt	r4, r4, r3
 8008c9e:	f001 f88b 	bl	8009db8 <__malloc_lock>
 8008ca2:	4a1e      	ldr	r2, [pc, #120]	; (8008d1c <_free_r+0x94>)
 8008ca4:	9801      	ldr	r0, [sp, #4]
 8008ca6:	6813      	ldr	r3, [r2, #0]
 8008ca8:	b933      	cbnz	r3, 8008cb8 <_free_r+0x30>
 8008caa:	6063      	str	r3, [r4, #4]
 8008cac:	6014      	str	r4, [r2, #0]
 8008cae:	b003      	add	sp, #12
 8008cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cb4:	f001 b886 	b.w	8009dc4 <__malloc_unlock>
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	d908      	bls.n	8008cce <_free_r+0x46>
 8008cbc:	6825      	ldr	r5, [r4, #0]
 8008cbe:	1961      	adds	r1, r4, r5
 8008cc0:	428b      	cmp	r3, r1
 8008cc2:	bf01      	itttt	eq
 8008cc4:	6819      	ldreq	r1, [r3, #0]
 8008cc6:	685b      	ldreq	r3, [r3, #4]
 8008cc8:	1949      	addeq	r1, r1, r5
 8008cca:	6021      	streq	r1, [r4, #0]
 8008ccc:	e7ed      	b.n	8008caa <_free_r+0x22>
 8008cce:	461a      	mov	r2, r3
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	b10b      	cbz	r3, 8008cd8 <_free_r+0x50>
 8008cd4:	42a3      	cmp	r3, r4
 8008cd6:	d9fa      	bls.n	8008cce <_free_r+0x46>
 8008cd8:	6811      	ldr	r1, [r2, #0]
 8008cda:	1855      	adds	r5, r2, r1
 8008cdc:	42a5      	cmp	r5, r4
 8008cde:	d10b      	bne.n	8008cf8 <_free_r+0x70>
 8008ce0:	6824      	ldr	r4, [r4, #0]
 8008ce2:	4421      	add	r1, r4
 8008ce4:	1854      	adds	r4, r2, r1
 8008ce6:	42a3      	cmp	r3, r4
 8008ce8:	6011      	str	r1, [r2, #0]
 8008cea:	d1e0      	bne.n	8008cae <_free_r+0x26>
 8008cec:	681c      	ldr	r4, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	6053      	str	r3, [r2, #4]
 8008cf2:	4421      	add	r1, r4
 8008cf4:	6011      	str	r1, [r2, #0]
 8008cf6:	e7da      	b.n	8008cae <_free_r+0x26>
 8008cf8:	d902      	bls.n	8008d00 <_free_r+0x78>
 8008cfa:	230c      	movs	r3, #12
 8008cfc:	6003      	str	r3, [r0, #0]
 8008cfe:	e7d6      	b.n	8008cae <_free_r+0x26>
 8008d00:	6825      	ldr	r5, [r4, #0]
 8008d02:	1961      	adds	r1, r4, r5
 8008d04:	428b      	cmp	r3, r1
 8008d06:	bf04      	itt	eq
 8008d08:	6819      	ldreq	r1, [r3, #0]
 8008d0a:	685b      	ldreq	r3, [r3, #4]
 8008d0c:	6063      	str	r3, [r4, #4]
 8008d0e:	bf04      	itt	eq
 8008d10:	1949      	addeq	r1, r1, r5
 8008d12:	6021      	streq	r1, [r4, #0]
 8008d14:	6054      	str	r4, [r2, #4]
 8008d16:	e7ca      	b.n	8008cae <_free_r+0x26>
 8008d18:	b003      	add	sp, #12
 8008d1a:	bd30      	pop	{r4, r5, pc}
 8008d1c:	20000cac 	.word	0x20000cac

08008d20 <sbrk_aligned>:
 8008d20:	b570      	push	{r4, r5, r6, lr}
 8008d22:	4e0e      	ldr	r6, [pc, #56]	; (8008d5c <sbrk_aligned+0x3c>)
 8008d24:	460c      	mov	r4, r1
 8008d26:	6831      	ldr	r1, [r6, #0]
 8008d28:	4605      	mov	r5, r0
 8008d2a:	b911      	cbnz	r1, 8008d32 <sbrk_aligned+0x12>
 8008d2c:	f000 fd28 	bl	8009780 <_sbrk_r>
 8008d30:	6030      	str	r0, [r6, #0]
 8008d32:	4621      	mov	r1, r4
 8008d34:	4628      	mov	r0, r5
 8008d36:	f000 fd23 	bl	8009780 <_sbrk_r>
 8008d3a:	1c43      	adds	r3, r0, #1
 8008d3c:	d00a      	beq.n	8008d54 <sbrk_aligned+0x34>
 8008d3e:	1cc4      	adds	r4, r0, #3
 8008d40:	f024 0403 	bic.w	r4, r4, #3
 8008d44:	42a0      	cmp	r0, r4
 8008d46:	d007      	beq.n	8008d58 <sbrk_aligned+0x38>
 8008d48:	1a21      	subs	r1, r4, r0
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f000 fd18 	bl	8009780 <_sbrk_r>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d101      	bne.n	8008d58 <sbrk_aligned+0x38>
 8008d54:	f04f 34ff 	mov.w	r4, #4294967295
 8008d58:	4620      	mov	r0, r4
 8008d5a:	bd70      	pop	{r4, r5, r6, pc}
 8008d5c:	20000cb0 	.word	0x20000cb0

08008d60 <_malloc_r>:
 8008d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d64:	1ccd      	adds	r5, r1, #3
 8008d66:	f025 0503 	bic.w	r5, r5, #3
 8008d6a:	3508      	adds	r5, #8
 8008d6c:	2d0c      	cmp	r5, #12
 8008d6e:	bf38      	it	cc
 8008d70:	250c      	movcc	r5, #12
 8008d72:	2d00      	cmp	r5, #0
 8008d74:	4607      	mov	r7, r0
 8008d76:	db01      	blt.n	8008d7c <_malloc_r+0x1c>
 8008d78:	42a9      	cmp	r1, r5
 8008d7a:	d905      	bls.n	8008d88 <_malloc_r+0x28>
 8008d7c:	230c      	movs	r3, #12
 8008d7e:	603b      	str	r3, [r7, #0]
 8008d80:	2600      	movs	r6, #0
 8008d82:	4630      	mov	r0, r6
 8008d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d88:	4e2e      	ldr	r6, [pc, #184]	; (8008e44 <_malloc_r+0xe4>)
 8008d8a:	f001 f815 	bl	8009db8 <__malloc_lock>
 8008d8e:	6833      	ldr	r3, [r6, #0]
 8008d90:	461c      	mov	r4, r3
 8008d92:	bb34      	cbnz	r4, 8008de2 <_malloc_r+0x82>
 8008d94:	4629      	mov	r1, r5
 8008d96:	4638      	mov	r0, r7
 8008d98:	f7ff ffc2 	bl	8008d20 <sbrk_aligned>
 8008d9c:	1c43      	adds	r3, r0, #1
 8008d9e:	4604      	mov	r4, r0
 8008da0:	d14d      	bne.n	8008e3e <_malloc_r+0xde>
 8008da2:	6834      	ldr	r4, [r6, #0]
 8008da4:	4626      	mov	r6, r4
 8008da6:	2e00      	cmp	r6, #0
 8008da8:	d140      	bne.n	8008e2c <_malloc_r+0xcc>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	4631      	mov	r1, r6
 8008dae:	4638      	mov	r0, r7
 8008db0:	eb04 0803 	add.w	r8, r4, r3
 8008db4:	f000 fce4 	bl	8009780 <_sbrk_r>
 8008db8:	4580      	cmp	r8, r0
 8008dba:	d13a      	bne.n	8008e32 <_malloc_r+0xd2>
 8008dbc:	6821      	ldr	r1, [r4, #0]
 8008dbe:	3503      	adds	r5, #3
 8008dc0:	1a6d      	subs	r5, r5, r1
 8008dc2:	f025 0503 	bic.w	r5, r5, #3
 8008dc6:	3508      	adds	r5, #8
 8008dc8:	2d0c      	cmp	r5, #12
 8008dca:	bf38      	it	cc
 8008dcc:	250c      	movcc	r5, #12
 8008dce:	4629      	mov	r1, r5
 8008dd0:	4638      	mov	r0, r7
 8008dd2:	f7ff ffa5 	bl	8008d20 <sbrk_aligned>
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	d02b      	beq.n	8008e32 <_malloc_r+0xd2>
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	442b      	add	r3, r5
 8008dde:	6023      	str	r3, [r4, #0]
 8008de0:	e00e      	b.n	8008e00 <_malloc_r+0xa0>
 8008de2:	6822      	ldr	r2, [r4, #0]
 8008de4:	1b52      	subs	r2, r2, r5
 8008de6:	d41e      	bmi.n	8008e26 <_malloc_r+0xc6>
 8008de8:	2a0b      	cmp	r2, #11
 8008dea:	d916      	bls.n	8008e1a <_malloc_r+0xba>
 8008dec:	1961      	adds	r1, r4, r5
 8008dee:	42a3      	cmp	r3, r4
 8008df0:	6025      	str	r5, [r4, #0]
 8008df2:	bf18      	it	ne
 8008df4:	6059      	strne	r1, [r3, #4]
 8008df6:	6863      	ldr	r3, [r4, #4]
 8008df8:	bf08      	it	eq
 8008dfa:	6031      	streq	r1, [r6, #0]
 8008dfc:	5162      	str	r2, [r4, r5]
 8008dfe:	604b      	str	r3, [r1, #4]
 8008e00:	4638      	mov	r0, r7
 8008e02:	f104 060b 	add.w	r6, r4, #11
 8008e06:	f000 ffdd 	bl	8009dc4 <__malloc_unlock>
 8008e0a:	f026 0607 	bic.w	r6, r6, #7
 8008e0e:	1d23      	adds	r3, r4, #4
 8008e10:	1af2      	subs	r2, r6, r3
 8008e12:	d0b6      	beq.n	8008d82 <_malloc_r+0x22>
 8008e14:	1b9b      	subs	r3, r3, r6
 8008e16:	50a3      	str	r3, [r4, r2]
 8008e18:	e7b3      	b.n	8008d82 <_malloc_r+0x22>
 8008e1a:	6862      	ldr	r2, [r4, #4]
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	bf0c      	ite	eq
 8008e20:	6032      	streq	r2, [r6, #0]
 8008e22:	605a      	strne	r2, [r3, #4]
 8008e24:	e7ec      	b.n	8008e00 <_malloc_r+0xa0>
 8008e26:	4623      	mov	r3, r4
 8008e28:	6864      	ldr	r4, [r4, #4]
 8008e2a:	e7b2      	b.n	8008d92 <_malloc_r+0x32>
 8008e2c:	4634      	mov	r4, r6
 8008e2e:	6876      	ldr	r6, [r6, #4]
 8008e30:	e7b9      	b.n	8008da6 <_malloc_r+0x46>
 8008e32:	230c      	movs	r3, #12
 8008e34:	603b      	str	r3, [r7, #0]
 8008e36:	4638      	mov	r0, r7
 8008e38:	f000 ffc4 	bl	8009dc4 <__malloc_unlock>
 8008e3c:	e7a1      	b.n	8008d82 <_malloc_r+0x22>
 8008e3e:	6025      	str	r5, [r4, #0]
 8008e40:	e7de      	b.n	8008e00 <_malloc_r+0xa0>
 8008e42:	bf00      	nop
 8008e44:	20000cac 	.word	0x20000cac

08008e48 <__ssputs_r>:
 8008e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e4c:	688e      	ldr	r6, [r1, #8]
 8008e4e:	429e      	cmp	r6, r3
 8008e50:	4682      	mov	sl, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	4690      	mov	r8, r2
 8008e56:	461f      	mov	r7, r3
 8008e58:	d838      	bhi.n	8008ecc <__ssputs_r+0x84>
 8008e5a:	898a      	ldrh	r2, [r1, #12]
 8008e5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e60:	d032      	beq.n	8008ec8 <__ssputs_r+0x80>
 8008e62:	6825      	ldr	r5, [r4, #0]
 8008e64:	6909      	ldr	r1, [r1, #16]
 8008e66:	eba5 0901 	sub.w	r9, r5, r1
 8008e6a:	6965      	ldr	r5, [r4, #20]
 8008e6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e74:	3301      	adds	r3, #1
 8008e76:	444b      	add	r3, r9
 8008e78:	106d      	asrs	r5, r5, #1
 8008e7a:	429d      	cmp	r5, r3
 8008e7c:	bf38      	it	cc
 8008e7e:	461d      	movcc	r5, r3
 8008e80:	0553      	lsls	r3, r2, #21
 8008e82:	d531      	bpl.n	8008ee8 <__ssputs_r+0xa0>
 8008e84:	4629      	mov	r1, r5
 8008e86:	f7ff ff6b 	bl	8008d60 <_malloc_r>
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	b950      	cbnz	r0, 8008ea4 <__ssputs_r+0x5c>
 8008e8e:	230c      	movs	r3, #12
 8008e90:	f8ca 3000 	str.w	r3, [sl]
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e9a:	81a3      	strh	r3, [r4, #12]
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea4:	6921      	ldr	r1, [r4, #16]
 8008ea6:	464a      	mov	r2, r9
 8008ea8:	f7ff fa08 	bl	80082bc <memcpy>
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb6:	81a3      	strh	r3, [r4, #12]
 8008eb8:	6126      	str	r6, [r4, #16]
 8008eba:	6165      	str	r5, [r4, #20]
 8008ebc:	444e      	add	r6, r9
 8008ebe:	eba5 0509 	sub.w	r5, r5, r9
 8008ec2:	6026      	str	r6, [r4, #0]
 8008ec4:	60a5      	str	r5, [r4, #8]
 8008ec6:	463e      	mov	r6, r7
 8008ec8:	42be      	cmp	r6, r7
 8008eca:	d900      	bls.n	8008ece <__ssputs_r+0x86>
 8008ecc:	463e      	mov	r6, r7
 8008ece:	6820      	ldr	r0, [r4, #0]
 8008ed0:	4632      	mov	r2, r6
 8008ed2:	4641      	mov	r1, r8
 8008ed4:	f000 ff56 	bl	8009d84 <memmove>
 8008ed8:	68a3      	ldr	r3, [r4, #8]
 8008eda:	1b9b      	subs	r3, r3, r6
 8008edc:	60a3      	str	r3, [r4, #8]
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	4433      	add	r3, r6
 8008ee2:	6023      	str	r3, [r4, #0]
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	e7db      	b.n	8008ea0 <__ssputs_r+0x58>
 8008ee8:	462a      	mov	r2, r5
 8008eea:	f000 ff71 	bl	8009dd0 <_realloc_r>
 8008eee:	4606      	mov	r6, r0
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d1e1      	bne.n	8008eb8 <__ssputs_r+0x70>
 8008ef4:	6921      	ldr	r1, [r4, #16]
 8008ef6:	4650      	mov	r0, sl
 8008ef8:	f7ff fec6 	bl	8008c88 <_free_r>
 8008efc:	e7c7      	b.n	8008e8e <__ssputs_r+0x46>
	...

08008f00 <_svfiprintf_r>:
 8008f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	4698      	mov	r8, r3
 8008f06:	898b      	ldrh	r3, [r1, #12]
 8008f08:	061b      	lsls	r3, r3, #24
 8008f0a:	b09d      	sub	sp, #116	; 0x74
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	460d      	mov	r5, r1
 8008f10:	4614      	mov	r4, r2
 8008f12:	d50e      	bpl.n	8008f32 <_svfiprintf_r+0x32>
 8008f14:	690b      	ldr	r3, [r1, #16]
 8008f16:	b963      	cbnz	r3, 8008f32 <_svfiprintf_r+0x32>
 8008f18:	2140      	movs	r1, #64	; 0x40
 8008f1a:	f7ff ff21 	bl	8008d60 <_malloc_r>
 8008f1e:	6028      	str	r0, [r5, #0]
 8008f20:	6128      	str	r0, [r5, #16]
 8008f22:	b920      	cbnz	r0, 8008f2e <_svfiprintf_r+0x2e>
 8008f24:	230c      	movs	r3, #12
 8008f26:	603b      	str	r3, [r7, #0]
 8008f28:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2c:	e0d1      	b.n	80090d2 <_svfiprintf_r+0x1d2>
 8008f2e:	2340      	movs	r3, #64	; 0x40
 8008f30:	616b      	str	r3, [r5, #20]
 8008f32:	2300      	movs	r3, #0
 8008f34:	9309      	str	r3, [sp, #36]	; 0x24
 8008f36:	2320      	movs	r3, #32
 8008f38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f40:	2330      	movs	r3, #48	; 0x30
 8008f42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090ec <_svfiprintf_r+0x1ec>
 8008f46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f4a:	f04f 0901 	mov.w	r9, #1
 8008f4e:	4623      	mov	r3, r4
 8008f50:	469a      	mov	sl, r3
 8008f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f56:	b10a      	cbz	r2, 8008f5c <_svfiprintf_r+0x5c>
 8008f58:	2a25      	cmp	r2, #37	; 0x25
 8008f5a:	d1f9      	bne.n	8008f50 <_svfiprintf_r+0x50>
 8008f5c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f60:	d00b      	beq.n	8008f7a <_svfiprintf_r+0x7a>
 8008f62:	465b      	mov	r3, fp
 8008f64:	4622      	mov	r2, r4
 8008f66:	4629      	mov	r1, r5
 8008f68:	4638      	mov	r0, r7
 8008f6a:	f7ff ff6d 	bl	8008e48 <__ssputs_r>
 8008f6e:	3001      	adds	r0, #1
 8008f70:	f000 80aa 	beq.w	80090c8 <_svfiprintf_r+0x1c8>
 8008f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f76:	445a      	add	r2, fp
 8008f78:	9209      	str	r2, [sp, #36]	; 0x24
 8008f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 80a2 	beq.w	80090c8 <_svfiprintf_r+0x1c8>
 8008f84:	2300      	movs	r3, #0
 8008f86:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f8e:	f10a 0a01 	add.w	sl, sl, #1
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	9307      	str	r3, [sp, #28]
 8008f96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f9a:	931a      	str	r3, [sp, #104]	; 0x68
 8008f9c:	4654      	mov	r4, sl
 8008f9e:	2205      	movs	r2, #5
 8008fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa4:	4851      	ldr	r0, [pc, #324]	; (80090ec <_svfiprintf_r+0x1ec>)
 8008fa6:	f7f7 f933 	bl	8000210 <memchr>
 8008faa:	9a04      	ldr	r2, [sp, #16]
 8008fac:	b9d8      	cbnz	r0, 8008fe6 <_svfiprintf_r+0xe6>
 8008fae:	06d0      	lsls	r0, r2, #27
 8008fb0:	bf44      	itt	mi
 8008fb2:	2320      	movmi	r3, #32
 8008fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fb8:	0711      	lsls	r1, r2, #28
 8008fba:	bf44      	itt	mi
 8008fbc:	232b      	movmi	r3, #43	; 0x2b
 8008fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc8:	d015      	beq.n	8008ff6 <_svfiprintf_r+0xf6>
 8008fca:	9a07      	ldr	r2, [sp, #28]
 8008fcc:	4654      	mov	r4, sl
 8008fce:	2000      	movs	r0, #0
 8008fd0:	f04f 0c0a 	mov.w	ip, #10
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fda:	3b30      	subs	r3, #48	; 0x30
 8008fdc:	2b09      	cmp	r3, #9
 8008fde:	d94e      	bls.n	800907e <_svfiprintf_r+0x17e>
 8008fe0:	b1b0      	cbz	r0, 8009010 <_svfiprintf_r+0x110>
 8008fe2:	9207      	str	r2, [sp, #28]
 8008fe4:	e014      	b.n	8009010 <_svfiprintf_r+0x110>
 8008fe6:	eba0 0308 	sub.w	r3, r0, r8
 8008fea:	fa09 f303 	lsl.w	r3, r9, r3
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	9304      	str	r3, [sp, #16]
 8008ff2:	46a2      	mov	sl, r4
 8008ff4:	e7d2      	b.n	8008f9c <_svfiprintf_r+0x9c>
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	1d19      	adds	r1, r3, #4
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	9103      	str	r1, [sp, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bfbb      	ittet	lt
 8009002:	425b      	neglt	r3, r3
 8009004:	f042 0202 	orrlt.w	r2, r2, #2
 8009008:	9307      	strge	r3, [sp, #28]
 800900a:	9307      	strlt	r3, [sp, #28]
 800900c:	bfb8      	it	lt
 800900e:	9204      	strlt	r2, [sp, #16]
 8009010:	7823      	ldrb	r3, [r4, #0]
 8009012:	2b2e      	cmp	r3, #46	; 0x2e
 8009014:	d10c      	bne.n	8009030 <_svfiprintf_r+0x130>
 8009016:	7863      	ldrb	r3, [r4, #1]
 8009018:	2b2a      	cmp	r3, #42	; 0x2a
 800901a:	d135      	bne.n	8009088 <_svfiprintf_r+0x188>
 800901c:	9b03      	ldr	r3, [sp, #12]
 800901e:	1d1a      	adds	r2, r3, #4
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	9203      	str	r2, [sp, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	bfb8      	it	lt
 8009028:	f04f 33ff 	movlt.w	r3, #4294967295
 800902c:	3402      	adds	r4, #2
 800902e:	9305      	str	r3, [sp, #20]
 8009030:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090fc <_svfiprintf_r+0x1fc>
 8009034:	7821      	ldrb	r1, [r4, #0]
 8009036:	2203      	movs	r2, #3
 8009038:	4650      	mov	r0, sl
 800903a:	f7f7 f8e9 	bl	8000210 <memchr>
 800903e:	b140      	cbz	r0, 8009052 <_svfiprintf_r+0x152>
 8009040:	2340      	movs	r3, #64	; 0x40
 8009042:	eba0 000a 	sub.w	r0, r0, sl
 8009046:	fa03 f000 	lsl.w	r0, r3, r0
 800904a:	9b04      	ldr	r3, [sp, #16]
 800904c:	4303      	orrs	r3, r0
 800904e:	3401      	adds	r4, #1
 8009050:	9304      	str	r3, [sp, #16]
 8009052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009056:	4826      	ldr	r0, [pc, #152]	; (80090f0 <_svfiprintf_r+0x1f0>)
 8009058:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800905c:	2206      	movs	r2, #6
 800905e:	f7f7 f8d7 	bl	8000210 <memchr>
 8009062:	2800      	cmp	r0, #0
 8009064:	d038      	beq.n	80090d8 <_svfiprintf_r+0x1d8>
 8009066:	4b23      	ldr	r3, [pc, #140]	; (80090f4 <_svfiprintf_r+0x1f4>)
 8009068:	bb1b      	cbnz	r3, 80090b2 <_svfiprintf_r+0x1b2>
 800906a:	9b03      	ldr	r3, [sp, #12]
 800906c:	3307      	adds	r3, #7
 800906e:	f023 0307 	bic.w	r3, r3, #7
 8009072:	3308      	adds	r3, #8
 8009074:	9303      	str	r3, [sp, #12]
 8009076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009078:	4433      	add	r3, r6
 800907a:	9309      	str	r3, [sp, #36]	; 0x24
 800907c:	e767      	b.n	8008f4e <_svfiprintf_r+0x4e>
 800907e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009082:	460c      	mov	r4, r1
 8009084:	2001      	movs	r0, #1
 8009086:	e7a5      	b.n	8008fd4 <_svfiprintf_r+0xd4>
 8009088:	2300      	movs	r3, #0
 800908a:	3401      	adds	r4, #1
 800908c:	9305      	str	r3, [sp, #20]
 800908e:	4619      	mov	r1, r3
 8009090:	f04f 0c0a 	mov.w	ip, #10
 8009094:	4620      	mov	r0, r4
 8009096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800909a:	3a30      	subs	r2, #48	; 0x30
 800909c:	2a09      	cmp	r2, #9
 800909e:	d903      	bls.n	80090a8 <_svfiprintf_r+0x1a8>
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d0c5      	beq.n	8009030 <_svfiprintf_r+0x130>
 80090a4:	9105      	str	r1, [sp, #20]
 80090a6:	e7c3      	b.n	8009030 <_svfiprintf_r+0x130>
 80090a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80090ac:	4604      	mov	r4, r0
 80090ae:	2301      	movs	r3, #1
 80090b0:	e7f0      	b.n	8009094 <_svfiprintf_r+0x194>
 80090b2:	ab03      	add	r3, sp, #12
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	462a      	mov	r2, r5
 80090b8:	4b0f      	ldr	r3, [pc, #60]	; (80090f8 <_svfiprintf_r+0x1f8>)
 80090ba:	a904      	add	r1, sp, #16
 80090bc:	4638      	mov	r0, r7
 80090be:	f7fc f9a1 	bl	8005404 <_printf_float>
 80090c2:	1c42      	adds	r2, r0, #1
 80090c4:	4606      	mov	r6, r0
 80090c6:	d1d6      	bne.n	8009076 <_svfiprintf_r+0x176>
 80090c8:	89ab      	ldrh	r3, [r5, #12]
 80090ca:	065b      	lsls	r3, r3, #25
 80090cc:	f53f af2c 	bmi.w	8008f28 <_svfiprintf_r+0x28>
 80090d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090d2:	b01d      	add	sp, #116	; 0x74
 80090d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d8:	ab03      	add	r3, sp, #12
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	462a      	mov	r2, r5
 80090de:	4b06      	ldr	r3, [pc, #24]	; (80090f8 <_svfiprintf_r+0x1f8>)
 80090e0:	a904      	add	r1, sp, #16
 80090e2:	4638      	mov	r0, r7
 80090e4:	f7fc fc32 	bl	800594c <_printf_i>
 80090e8:	e7eb      	b.n	80090c2 <_svfiprintf_r+0x1c2>
 80090ea:	bf00      	nop
 80090ec:	0800ceec 	.word	0x0800ceec
 80090f0:	0800cef6 	.word	0x0800cef6
 80090f4:	08005405 	.word	0x08005405
 80090f8:	08008e49 	.word	0x08008e49
 80090fc:	0800cef2 	.word	0x0800cef2

08009100 <_sungetc_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	1c4b      	adds	r3, r1, #1
 8009104:	4614      	mov	r4, r2
 8009106:	d103      	bne.n	8009110 <_sungetc_r+0x10>
 8009108:	f04f 35ff 	mov.w	r5, #4294967295
 800910c:	4628      	mov	r0, r5
 800910e:	bd38      	pop	{r3, r4, r5, pc}
 8009110:	8993      	ldrh	r3, [r2, #12]
 8009112:	f023 0320 	bic.w	r3, r3, #32
 8009116:	8193      	strh	r3, [r2, #12]
 8009118:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800911a:	6852      	ldr	r2, [r2, #4]
 800911c:	b2cd      	uxtb	r5, r1
 800911e:	b18b      	cbz	r3, 8009144 <_sungetc_r+0x44>
 8009120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009122:	4293      	cmp	r3, r2
 8009124:	dd08      	ble.n	8009138 <_sungetc_r+0x38>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	1e5a      	subs	r2, r3, #1
 800912a:	6022      	str	r2, [r4, #0]
 800912c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009130:	6863      	ldr	r3, [r4, #4]
 8009132:	3301      	adds	r3, #1
 8009134:	6063      	str	r3, [r4, #4]
 8009136:	e7e9      	b.n	800910c <_sungetc_r+0xc>
 8009138:	4621      	mov	r1, r4
 800913a:	f000 fbf1 	bl	8009920 <__submore>
 800913e:	2800      	cmp	r0, #0
 8009140:	d0f1      	beq.n	8009126 <_sungetc_r+0x26>
 8009142:	e7e1      	b.n	8009108 <_sungetc_r+0x8>
 8009144:	6921      	ldr	r1, [r4, #16]
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	b151      	cbz	r1, 8009160 <_sungetc_r+0x60>
 800914a:	4299      	cmp	r1, r3
 800914c:	d208      	bcs.n	8009160 <_sungetc_r+0x60>
 800914e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009152:	42a9      	cmp	r1, r5
 8009154:	d104      	bne.n	8009160 <_sungetc_r+0x60>
 8009156:	3b01      	subs	r3, #1
 8009158:	3201      	adds	r2, #1
 800915a:	6023      	str	r3, [r4, #0]
 800915c:	6062      	str	r2, [r4, #4]
 800915e:	e7d5      	b.n	800910c <_sungetc_r+0xc>
 8009160:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009168:	6363      	str	r3, [r4, #52]	; 0x34
 800916a:	2303      	movs	r3, #3
 800916c:	63a3      	str	r3, [r4, #56]	; 0x38
 800916e:	4623      	mov	r3, r4
 8009170:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	2301      	movs	r3, #1
 8009178:	e7dc      	b.n	8009134 <_sungetc_r+0x34>

0800917a <__ssrefill_r>:
 800917a:	b510      	push	{r4, lr}
 800917c:	460c      	mov	r4, r1
 800917e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009180:	b169      	cbz	r1, 800919e <__ssrefill_r+0x24>
 8009182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009186:	4299      	cmp	r1, r3
 8009188:	d001      	beq.n	800918e <__ssrefill_r+0x14>
 800918a:	f7ff fd7d 	bl	8008c88 <_free_r>
 800918e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009190:	6063      	str	r3, [r4, #4]
 8009192:	2000      	movs	r0, #0
 8009194:	6360      	str	r0, [r4, #52]	; 0x34
 8009196:	b113      	cbz	r3, 800919e <__ssrefill_r+0x24>
 8009198:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800919a:	6023      	str	r3, [r4, #0]
 800919c:	bd10      	pop	{r4, pc}
 800919e:	6923      	ldr	r3, [r4, #16]
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	2300      	movs	r3, #0
 80091a4:	6063      	str	r3, [r4, #4]
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	f043 0320 	orr.w	r3, r3, #32
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	f04f 30ff 	mov.w	r0, #4294967295
 80091b2:	e7f3      	b.n	800919c <__ssrefill_r+0x22>

080091b4 <__ssvfiscanf_r>:
 80091b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b8:	460c      	mov	r4, r1
 80091ba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80091be:	2100      	movs	r1, #0
 80091c0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80091c4:	49a6      	ldr	r1, [pc, #664]	; (8009460 <__ssvfiscanf_r+0x2ac>)
 80091c6:	91a0      	str	r1, [sp, #640]	; 0x280
 80091c8:	f10d 0804 	add.w	r8, sp, #4
 80091cc:	49a5      	ldr	r1, [pc, #660]	; (8009464 <__ssvfiscanf_r+0x2b0>)
 80091ce:	4fa6      	ldr	r7, [pc, #664]	; (8009468 <__ssvfiscanf_r+0x2b4>)
 80091d0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800946c <__ssvfiscanf_r+0x2b8>
 80091d4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80091d8:	4606      	mov	r6, r0
 80091da:	91a1      	str	r1, [sp, #644]	; 0x284
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	7813      	ldrb	r3, [r2, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 815a 	beq.w	800949a <__ssvfiscanf_r+0x2e6>
 80091e6:	5dd9      	ldrb	r1, [r3, r7]
 80091e8:	f011 0108 	ands.w	r1, r1, #8
 80091ec:	f102 0501 	add.w	r5, r2, #1
 80091f0:	d019      	beq.n	8009226 <__ssvfiscanf_r+0x72>
 80091f2:	6863      	ldr	r3, [r4, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	dd0f      	ble.n	8009218 <__ssvfiscanf_r+0x64>
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	781a      	ldrb	r2, [r3, #0]
 80091fc:	5cba      	ldrb	r2, [r7, r2]
 80091fe:	0712      	lsls	r2, r2, #28
 8009200:	d401      	bmi.n	8009206 <__ssvfiscanf_r+0x52>
 8009202:	462a      	mov	r2, r5
 8009204:	e7eb      	b.n	80091de <__ssvfiscanf_r+0x2a>
 8009206:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009208:	3201      	adds	r2, #1
 800920a:	9245      	str	r2, [sp, #276]	; 0x114
 800920c:	6862      	ldr	r2, [r4, #4]
 800920e:	3301      	adds	r3, #1
 8009210:	3a01      	subs	r2, #1
 8009212:	6062      	str	r2, [r4, #4]
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	e7ec      	b.n	80091f2 <__ssvfiscanf_r+0x3e>
 8009218:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800921a:	4621      	mov	r1, r4
 800921c:	4630      	mov	r0, r6
 800921e:	4798      	blx	r3
 8009220:	2800      	cmp	r0, #0
 8009222:	d0e9      	beq.n	80091f8 <__ssvfiscanf_r+0x44>
 8009224:	e7ed      	b.n	8009202 <__ssvfiscanf_r+0x4e>
 8009226:	2b25      	cmp	r3, #37	; 0x25
 8009228:	d012      	beq.n	8009250 <__ssvfiscanf_r+0x9c>
 800922a:	469a      	mov	sl, r3
 800922c:	6863      	ldr	r3, [r4, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f340 8091 	ble.w	8009356 <__ssvfiscanf_r+0x1a2>
 8009234:	6822      	ldr	r2, [r4, #0]
 8009236:	7813      	ldrb	r3, [r2, #0]
 8009238:	4553      	cmp	r3, sl
 800923a:	f040 812e 	bne.w	800949a <__ssvfiscanf_r+0x2e6>
 800923e:	6863      	ldr	r3, [r4, #4]
 8009240:	3b01      	subs	r3, #1
 8009242:	6063      	str	r3, [r4, #4]
 8009244:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009246:	3201      	adds	r2, #1
 8009248:	3301      	adds	r3, #1
 800924a:	6022      	str	r2, [r4, #0]
 800924c:	9345      	str	r3, [sp, #276]	; 0x114
 800924e:	e7d8      	b.n	8009202 <__ssvfiscanf_r+0x4e>
 8009250:	9141      	str	r1, [sp, #260]	; 0x104
 8009252:	9143      	str	r1, [sp, #268]	; 0x10c
 8009254:	7853      	ldrb	r3, [r2, #1]
 8009256:	2b2a      	cmp	r3, #42	; 0x2a
 8009258:	bf02      	ittt	eq
 800925a:	2310      	moveq	r3, #16
 800925c:	1c95      	addeq	r5, r2, #2
 800925e:	9341      	streq	r3, [sp, #260]	; 0x104
 8009260:	220a      	movs	r2, #10
 8009262:	46aa      	mov	sl, r5
 8009264:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009268:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800926c:	2b09      	cmp	r3, #9
 800926e:	d91d      	bls.n	80092ac <__ssvfiscanf_r+0xf8>
 8009270:	487e      	ldr	r0, [pc, #504]	; (800946c <__ssvfiscanf_r+0x2b8>)
 8009272:	2203      	movs	r2, #3
 8009274:	f7f6 ffcc 	bl	8000210 <memchr>
 8009278:	b140      	cbz	r0, 800928c <__ssvfiscanf_r+0xd8>
 800927a:	2301      	movs	r3, #1
 800927c:	eba0 0009 	sub.w	r0, r0, r9
 8009280:	fa03 f000 	lsl.w	r0, r3, r0
 8009284:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009286:	4318      	orrs	r0, r3
 8009288:	9041      	str	r0, [sp, #260]	; 0x104
 800928a:	4655      	mov	r5, sl
 800928c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009290:	2b78      	cmp	r3, #120	; 0x78
 8009292:	d806      	bhi.n	80092a2 <__ssvfiscanf_r+0xee>
 8009294:	2b57      	cmp	r3, #87	; 0x57
 8009296:	d810      	bhi.n	80092ba <__ssvfiscanf_r+0x106>
 8009298:	2b25      	cmp	r3, #37	; 0x25
 800929a:	d0c6      	beq.n	800922a <__ssvfiscanf_r+0x76>
 800929c:	d856      	bhi.n	800934c <__ssvfiscanf_r+0x198>
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d064      	beq.n	800936c <__ssvfiscanf_r+0x1b8>
 80092a2:	2303      	movs	r3, #3
 80092a4:	9347      	str	r3, [sp, #284]	; 0x11c
 80092a6:	230a      	movs	r3, #10
 80092a8:	9342      	str	r3, [sp, #264]	; 0x108
 80092aa:	e071      	b.n	8009390 <__ssvfiscanf_r+0x1dc>
 80092ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80092ae:	fb02 1103 	mla	r1, r2, r3, r1
 80092b2:	3930      	subs	r1, #48	; 0x30
 80092b4:	9143      	str	r1, [sp, #268]	; 0x10c
 80092b6:	4655      	mov	r5, sl
 80092b8:	e7d3      	b.n	8009262 <__ssvfiscanf_r+0xae>
 80092ba:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80092be:	2a20      	cmp	r2, #32
 80092c0:	d8ef      	bhi.n	80092a2 <__ssvfiscanf_r+0xee>
 80092c2:	a101      	add	r1, pc, #4	; (adr r1, 80092c8 <__ssvfiscanf_r+0x114>)
 80092c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80092c8:	0800937b 	.word	0x0800937b
 80092cc:	080092a3 	.word	0x080092a3
 80092d0:	080092a3 	.word	0x080092a3
 80092d4:	080093d9 	.word	0x080093d9
 80092d8:	080092a3 	.word	0x080092a3
 80092dc:	080092a3 	.word	0x080092a3
 80092e0:	080092a3 	.word	0x080092a3
 80092e4:	080092a3 	.word	0x080092a3
 80092e8:	080092a3 	.word	0x080092a3
 80092ec:	080092a3 	.word	0x080092a3
 80092f0:	080092a3 	.word	0x080092a3
 80092f4:	080093ef 	.word	0x080093ef
 80092f8:	080093c5 	.word	0x080093c5
 80092fc:	08009353 	.word	0x08009353
 8009300:	08009353 	.word	0x08009353
 8009304:	08009353 	.word	0x08009353
 8009308:	080092a3 	.word	0x080092a3
 800930c:	080093c9 	.word	0x080093c9
 8009310:	080092a3 	.word	0x080092a3
 8009314:	080092a3 	.word	0x080092a3
 8009318:	080092a3 	.word	0x080092a3
 800931c:	080092a3 	.word	0x080092a3
 8009320:	080093ff 	.word	0x080093ff
 8009324:	080093d1 	.word	0x080093d1
 8009328:	08009373 	.word	0x08009373
 800932c:	080092a3 	.word	0x080092a3
 8009330:	080092a3 	.word	0x080092a3
 8009334:	080093fb 	.word	0x080093fb
 8009338:	080092a3 	.word	0x080092a3
 800933c:	080093c5 	.word	0x080093c5
 8009340:	080092a3 	.word	0x080092a3
 8009344:	080092a3 	.word	0x080092a3
 8009348:	0800937b 	.word	0x0800937b
 800934c:	3b45      	subs	r3, #69	; 0x45
 800934e:	2b02      	cmp	r3, #2
 8009350:	d8a7      	bhi.n	80092a2 <__ssvfiscanf_r+0xee>
 8009352:	2305      	movs	r3, #5
 8009354:	e01b      	b.n	800938e <__ssvfiscanf_r+0x1da>
 8009356:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009358:	4621      	mov	r1, r4
 800935a:	4630      	mov	r0, r6
 800935c:	4798      	blx	r3
 800935e:	2800      	cmp	r0, #0
 8009360:	f43f af68 	beq.w	8009234 <__ssvfiscanf_r+0x80>
 8009364:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009366:	2800      	cmp	r0, #0
 8009368:	f040 808d 	bne.w	8009486 <__ssvfiscanf_r+0x2d2>
 800936c:	f04f 30ff 	mov.w	r0, #4294967295
 8009370:	e08f      	b.n	8009492 <__ssvfiscanf_r+0x2de>
 8009372:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009374:	f042 0220 	orr.w	r2, r2, #32
 8009378:	9241      	str	r2, [sp, #260]	; 0x104
 800937a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800937c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009380:	9241      	str	r2, [sp, #260]	; 0x104
 8009382:	2210      	movs	r2, #16
 8009384:	2b6f      	cmp	r3, #111	; 0x6f
 8009386:	9242      	str	r2, [sp, #264]	; 0x108
 8009388:	bf34      	ite	cc
 800938a:	2303      	movcc	r3, #3
 800938c:	2304      	movcs	r3, #4
 800938e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009390:	6863      	ldr	r3, [r4, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	dd42      	ble.n	800941c <__ssvfiscanf_r+0x268>
 8009396:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009398:	0659      	lsls	r1, r3, #25
 800939a:	d404      	bmi.n	80093a6 <__ssvfiscanf_r+0x1f2>
 800939c:	6823      	ldr	r3, [r4, #0]
 800939e:	781a      	ldrb	r2, [r3, #0]
 80093a0:	5cba      	ldrb	r2, [r7, r2]
 80093a2:	0712      	lsls	r2, r2, #28
 80093a4:	d441      	bmi.n	800942a <__ssvfiscanf_r+0x276>
 80093a6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	dc50      	bgt.n	800944e <__ssvfiscanf_r+0x29a>
 80093ac:	466b      	mov	r3, sp
 80093ae:	4622      	mov	r2, r4
 80093b0:	a941      	add	r1, sp, #260	; 0x104
 80093b2:	4630      	mov	r0, r6
 80093b4:	f000 f876 	bl	80094a4 <_scanf_chars>
 80093b8:	2801      	cmp	r0, #1
 80093ba:	d06e      	beq.n	800949a <__ssvfiscanf_r+0x2e6>
 80093bc:	2802      	cmp	r0, #2
 80093be:	f47f af20 	bne.w	8009202 <__ssvfiscanf_r+0x4e>
 80093c2:	e7cf      	b.n	8009364 <__ssvfiscanf_r+0x1b0>
 80093c4:	220a      	movs	r2, #10
 80093c6:	e7dd      	b.n	8009384 <__ssvfiscanf_r+0x1d0>
 80093c8:	2300      	movs	r3, #0
 80093ca:	9342      	str	r3, [sp, #264]	; 0x108
 80093cc:	2303      	movs	r3, #3
 80093ce:	e7de      	b.n	800938e <__ssvfiscanf_r+0x1da>
 80093d0:	2308      	movs	r3, #8
 80093d2:	9342      	str	r3, [sp, #264]	; 0x108
 80093d4:	2304      	movs	r3, #4
 80093d6:	e7da      	b.n	800938e <__ssvfiscanf_r+0x1da>
 80093d8:	4629      	mov	r1, r5
 80093da:	4640      	mov	r0, r8
 80093dc:	f000 f9e0 	bl	80097a0 <__sccl>
 80093e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80093e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e6:	9341      	str	r3, [sp, #260]	; 0x104
 80093e8:	4605      	mov	r5, r0
 80093ea:	2301      	movs	r3, #1
 80093ec:	e7cf      	b.n	800938e <__ssvfiscanf_r+0x1da>
 80093ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80093f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093f4:	9341      	str	r3, [sp, #260]	; 0x104
 80093f6:	2300      	movs	r3, #0
 80093f8:	e7c9      	b.n	800938e <__ssvfiscanf_r+0x1da>
 80093fa:	2302      	movs	r3, #2
 80093fc:	e7c7      	b.n	800938e <__ssvfiscanf_r+0x1da>
 80093fe:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009400:	06c3      	lsls	r3, r0, #27
 8009402:	f53f aefe 	bmi.w	8009202 <__ssvfiscanf_r+0x4e>
 8009406:	9b00      	ldr	r3, [sp, #0]
 8009408:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800940a:	1d19      	adds	r1, r3, #4
 800940c:	9100      	str	r1, [sp, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f010 0f01 	tst.w	r0, #1
 8009414:	bf14      	ite	ne
 8009416:	801a      	strhne	r2, [r3, #0]
 8009418:	601a      	streq	r2, [r3, #0]
 800941a:	e6f2      	b.n	8009202 <__ssvfiscanf_r+0x4e>
 800941c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800941e:	4621      	mov	r1, r4
 8009420:	4630      	mov	r0, r6
 8009422:	4798      	blx	r3
 8009424:	2800      	cmp	r0, #0
 8009426:	d0b6      	beq.n	8009396 <__ssvfiscanf_r+0x1e2>
 8009428:	e79c      	b.n	8009364 <__ssvfiscanf_r+0x1b0>
 800942a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800942c:	3201      	adds	r2, #1
 800942e:	9245      	str	r2, [sp, #276]	; 0x114
 8009430:	6862      	ldr	r2, [r4, #4]
 8009432:	3a01      	subs	r2, #1
 8009434:	2a00      	cmp	r2, #0
 8009436:	6062      	str	r2, [r4, #4]
 8009438:	dd02      	ble.n	8009440 <__ssvfiscanf_r+0x28c>
 800943a:	3301      	adds	r3, #1
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	e7ad      	b.n	800939c <__ssvfiscanf_r+0x1e8>
 8009440:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009442:	4621      	mov	r1, r4
 8009444:	4630      	mov	r0, r6
 8009446:	4798      	blx	r3
 8009448:	2800      	cmp	r0, #0
 800944a:	d0a7      	beq.n	800939c <__ssvfiscanf_r+0x1e8>
 800944c:	e78a      	b.n	8009364 <__ssvfiscanf_r+0x1b0>
 800944e:	2b04      	cmp	r3, #4
 8009450:	dc0e      	bgt.n	8009470 <__ssvfiscanf_r+0x2bc>
 8009452:	466b      	mov	r3, sp
 8009454:	4622      	mov	r2, r4
 8009456:	a941      	add	r1, sp, #260	; 0x104
 8009458:	4630      	mov	r0, r6
 800945a:	f000 f87d 	bl	8009558 <_scanf_i>
 800945e:	e7ab      	b.n	80093b8 <__ssvfiscanf_r+0x204>
 8009460:	08009101 	.word	0x08009101
 8009464:	0800917b 	.word	0x0800917b
 8009468:	0800cb89 	.word	0x0800cb89
 800946c:	0800cef2 	.word	0x0800cef2
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <__ssvfiscanf_r+0x2ec>)
 8009472:	2b00      	cmp	r3, #0
 8009474:	f43f aec5 	beq.w	8009202 <__ssvfiscanf_r+0x4e>
 8009478:	466b      	mov	r3, sp
 800947a:	4622      	mov	r2, r4
 800947c:	a941      	add	r1, sp, #260	; 0x104
 800947e:	4630      	mov	r0, r6
 8009480:	f7fc fb8a 	bl	8005b98 <_scanf_float>
 8009484:	e798      	b.n	80093b8 <__ssvfiscanf_r+0x204>
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	f013 0f40 	tst.w	r3, #64	; 0x40
 800948c:	bf18      	it	ne
 800948e:	f04f 30ff 	movne.w	r0, #4294967295
 8009492:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800949a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800949c:	e7f9      	b.n	8009492 <__ssvfiscanf_r+0x2de>
 800949e:	bf00      	nop
 80094a0:	08005b99 	.word	0x08005b99

080094a4 <_scanf_chars>:
 80094a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a8:	4615      	mov	r5, r2
 80094aa:	688a      	ldr	r2, [r1, #8]
 80094ac:	4680      	mov	r8, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	b932      	cbnz	r2, 80094c0 <_scanf_chars+0x1c>
 80094b2:	698a      	ldr	r2, [r1, #24]
 80094b4:	2a00      	cmp	r2, #0
 80094b6:	bf0c      	ite	eq
 80094b8:	2201      	moveq	r2, #1
 80094ba:	f04f 32ff 	movne.w	r2, #4294967295
 80094be:	608a      	str	r2, [r1, #8]
 80094c0:	6822      	ldr	r2, [r4, #0]
 80094c2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009554 <_scanf_chars+0xb0>
 80094c6:	06d1      	lsls	r1, r2, #27
 80094c8:	bf5f      	itttt	pl
 80094ca:	681a      	ldrpl	r2, [r3, #0]
 80094cc:	1d11      	addpl	r1, r2, #4
 80094ce:	6019      	strpl	r1, [r3, #0]
 80094d0:	6816      	ldrpl	r6, [r2, #0]
 80094d2:	2700      	movs	r7, #0
 80094d4:	69a0      	ldr	r0, [r4, #24]
 80094d6:	b188      	cbz	r0, 80094fc <_scanf_chars+0x58>
 80094d8:	2801      	cmp	r0, #1
 80094da:	d107      	bne.n	80094ec <_scanf_chars+0x48>
 80094dc:	682a      	ldr	r2, [r5, #0]
 80094de:	7811      	ldrb	r1, [r2, #0]
 80094e0:	6962      	ldr	r2, [r4, #20]
 80094e2:	5c52      	ldrb	r2, [r2, r1]
 80094e4:	b952      	cbnz	r2, 80094fc <_scanf_chars+0x58>
 80094e6:	2f00      	cmp	r7, #0
 80094e8:	d031      	beq.n	800954e <_scanf_chars+0xaa>
 80094ea:	e022      	b.n	8009532 <_scanf_chars+0x8e>
 80094ec:	2802      	cmp	r0, #2
 80094ee:	d120      	bne.n	8009532 <_scanf_chars+0x8e>
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80094f8:	071b      	lsls	r3, r3, #28
 80094fa:	d41a      	bmi.n	8009532 <_scanf_chars+0x8e>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	06da      	lsls	r2, r3, #27
 8009500:	bf5e      	ittt	pl
 8009502:	682b      	ldrpl	r3, [r5, #0]
 8009504:	781b      	ldrbpl	r3, [r3, #0]
 8009506:	f806 3b01 	strbpl.w	r3, [r6], #1
 800950a:	682a      	ldr	r2, [r5, #0]
 800950c:	686b      	ldr	r3, [r5, #4]
 800950e:	3201      	adds	r2, #1
 8009510:	602a      	str	r2, [r5, #0]
 8009512:	68a2      	ldr	r2, [r4, #8]
 8009514:	3b01      	subs	r3, #1
 8009516:	3a01      	subs	r2, #1
 8009518:	606b      	str	r3, [r5, #4]
 800951a:	3701      	adds	r7, #1
 800951c:	60a2      	str	r2, [r4, #8]
 800951e:	b142      	cbz	r2, 8009532 <_scanf_chars+0x8e>
 8009520:	2b00      	cmp	r3, #0
 8009522:	dcd7      	bgt.n	80094d4 <_scanf_chars+0x30>
 8009524:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009528:	4629      	mov	r1, r5
 800952a:	4640      	mov	r0, r8
 800952c:	4798      	blx	r3
 800952e:	2800      	cmp	r0, #0
 8009530:	d0d0      	beq.n	80094d4 <_scanf_chars+0x30>
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	f013 0310 	ands.w	r3, r3, #16
 8009538:	d105      	bne.n	8009546 <_scanf_chars+0xa2>
 800953a:	68e2      	ldr	r2, [r4, #12]
 800953c:	3201      	adds	r2, #1
 800953e:	60e2      	str	r2, [r4, #12]
 8009540:	69a2      	ldr	r2, [r4, #24]
 8009542:	b102      	cbz	r2, 8009546 <_scanf_chars+0xa2>
 8009544:	7033      	strb	r3, [r6, #0]
 8009546:	6923      	ldr	r3, [r4, #16]
 8009548:	443b      	add	r3, r7
 800954a:	6123      	str	r3, [r4, #16]
 800954c:	2000      	movs	r0, #0
 800954e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009552:	bf00      	nop
 8009554:	0800cb89 	.word	0x0800cb89

08009558 <_scanf_i>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	4698      	mov	r8, r3
 800955e:	4b76      	ldr	r3, [pc, #472]	; (8009738 <_scanf_i+0x1e0>)
 8009560:	460c      	mov	r4, r1
 8009562:	4682      	mov	sl, r0
 8009564:	4616      	mov	r6, r2
 8009566:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800956a:	b087      	sub	sp, #28
 800956c:	ab03      	add	r3, sp, #12
 800956e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009572:	4b72      	ldr	r3, [pc, #456]	; (800973c <_scanf_i+0x1e4>)
 8009574:	69a1      	ldr	r1, [r4, #24]
 8009576:	4a72      	ldr	r2, [pc, #456]	; (8009740 <_scanf_i+0x1e8>)
 8009578:	2903      	cmp	r1, #3
 800957a:	bf18      	it	ne
 800957c:	461a      	movne	r2, r3
 800957e:	68a3      	ldr	r3, [r4, #8]
 8009580:	9201      	str	r2, [sp, #4]
 8009582:	1e5a      	subs	r2, r3, #1
 8009584:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009588:	bf88      	it	hi
 800958a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800958e:	4627      	mov	r7, r4
 8009590:	bf82      	ittt	hi
 8009592:	eb03 0905 	addhi.w	r9, r3, r5
 8009596:	f240 135d 	movwhi	r3, #349	; 0x15d
 800959a:	60a3      	strhi	r3, [r4, #8]
 800959c:	f857 3b1c 	ldr.w	r3, [r7], #28
 80095a0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80095a4:	bf98      	it	ls
 80095a6:	f04f 0900 	movls.w	r9, #0
 80095aa:	6023      	str	r3, [r4, #0]
 80095ac:	463d      	mov	r5, r7
 80095ae:	f04f 0b00 	mov.w	fp, #0
 80095b2:	6831      	ldr	r1, [r6, #0]
 80095b4:	ab03      	add	r3, sp, #12
 80095b6:	7809      	ldrb	r1, [r1, #0]
 80095b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80095bc:	2202      	movs	r2, #2
 80095be:	f7f6 fe27 	bl	8000210 <memchr>
 80095c2:	b328      	cbz	r0, 8009610 <_scanf_i+0xb8>
 80095c4:	f1bb 0f01 	cmp.w	fp, #1
 80095c8:	d159      	bne.n	800967e <_scanf_i+0x126>
 80095ca:	6862      	ldr	r2, [r4, #4]
 80095cc:	b92a      	cbnz	r2, 80095da <_scanf_i+0x82>
 80095ce:	6822      	ldr	r2, [r4, #0]
 80095d0:	2308      	movs	r3, #8
 80095d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095d6:	6063      	str	r3, [r4, #4]
 80095d8:	6022      	str	r2, [r4, #0]
 80095da:	6822      	ldr	r2, [r4, #0]
 80095dc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80095e0:	6022      	str	r2, [r4, #0]
 80095e2:	68a2      	ldr	r2, [r4, #8]
 80095e4:	1e51      	subs	r1, r2, #1
 80095e6:	60a1      	str	r1, [r4, #8]
 80095e8:	b192      	cbz	r2, 8009610 <_scanf_i+0xb8>
 80095ea:	6832      	ldr	r2, [r6, #0]
 80095ec:	1c51      	adds	r1, r2, #1
 80095ee:	6031      	str	r1, [r6, #0]
 80095f0:	7812      	ldrb	r2, [r2, #0]
 80095f2:	f805 2b01 	strb.w	r2, [r5], #1
 80095f6:	6872      	ldr	r2, [r6, #4]
 80095f8:	3a01      	subs	r2, #1
 80095fa:	2a00      	cmp	r2, #0
 80095fc:	6072      	str	r2, [r6, #4]
 80095fe:	dc07      	bgt.n	8009610 <_scanf_i+0xb8>
 8009600:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009604:	4631      	mov	r1, r6
 8009606:	4650      	mov	r0, sl
 8009608:	4790      	blx	r2
 800960a:	2800      	cmp	r0, #0
 800960c:	f040 8085 	bne.w	800971a <_scanf_i+0x1c2>
 8009610:	f10b 0b01 	add.w	fp, fp, #1
 8009614:	f1bb 0f03 	cmp.w	fp, #3
 8009618:	d1cb      	bne.n	80095b2 <_scanf_i+0x5a>
 800961a:	6863      	ldr	r3, [r4, #4]
 800961c:	b90b      	cbnz	r3, 8009622 <_scanf_i+0xca>
 800961e:	230a      	movs	r3, #10
 8009620:	6063      	str	r3, [r4, #4]
 8009622:	6863      	ldr	r3, [r4, #4]
 8009624:	4947      	ldr	r1, [pc, #284]	; (8009744 <_scanf_i+0x1ec>)
 8009626:	6960      	ldr	r0, [r4, #20]
 8009628:	1ac9      	subs	r1, r1, r3
 800962a:	f000 f8b9 	bl	80097a0 <__sccl>
 800962e:	f04f 0b00 	mov.w	fp, #0
 8009632:	68a3      	ldr	r3, [r4, #8]
 8009634:	6822      	ldr	r2, [r4, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d03d      	beq.n	80096b6 <_scanf_i+0x15e>
 800963a:	6831      	ldr	r1, [r6, #0]
 800963c:	6960      	ldr	r0, [r4, #20]
 800963e:	f891 c000 	ldrb.w	ip, [r1]
 8009642:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009646:	2800      	cmp	r0, #0
 8009648:	d035      	beq.n	80096b6 <_scanf_i+0x15e>
 800964a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800964e:	d124      	bne.n	800969a <_scanf_i+0x142>
 8009650:	0510      	lsls	r0, r2, #20
 8009652:	d522      	bpl.n	800969a <_scanf_i+0x142>
 8009654:	f10b 0b01 	add.w	fp, fp, #1
 8009658:	f1b9 0f00 	cmp.w	r9, #0
 800965c:	d003      	beq.n	8009666 <_scanf_i+0x10e>
 800965e:	3301      	adds	r3, #1
 8009660:	f109 39ff 	add.w	r9, r9, #4294967295
 8009664:	60a3      	str	r3, [r4, #8]
 8009666:	6873      	ldr	r3, [r6, #4]
 8009668:	3b01      	subs	r3, #1
 800966a:	2b00      	cmp	r3, #0
 800966c:	6073      	str	r3, [r6, #4]
 800966e:	dd1b      	ble.n	80096a8 <_scanf_i+0x150>
 8009670:	6833      	ldr	r3, [r6, #0]
 8009672:	3301      	adds	r3, #1
 8009674:	6033      	str	r3, [r6, #0]
 8009676:	68a3      	ldr	r3, [r4, #8]
 8009678:	3b01      	subs	r3, #1
 800967a:	60a3      	str	r3, [r4, #8]
 800967c:	e7d9      	b.n	8009632 <_scanf_i+0xda>
 800967e:	f1bb 0f02 	cmp.w	fp, #2
 8009682:	d1ae      	bne.n	80095e2 <_scanf_i+0x8a>
 8009684:	6822      	ldr	r2, [r4, #0]
 8009686:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800968a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800968e:	d1bf      	bne.n	8009610 <_scanf_i+0xb8>
 8009690:	2310      	movs	r3, #16
 8009692:	6063      	str	r3, [r4, #4]
 8009694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009698:	e7a2      	b.n	80095e0 <_scanf_i+0x88>
 800969a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800969e:	6022      	str	r2, [r4, #0]
 80096a0:	780b      	ldrb	r3, [r1, #0]
 80096a2:	f805 3b01 	strb.w	r3, [r5], #1
 80096a6:	e7de      	b.n	8009666 <_scanf_i+0x10e>
 80096a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80096ac:	4631      	mov	r1, r6
 80096ae:	4650      	mov	r0, sl
 80096b0:	4798      	blx	r3
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d0df      	beq.n	8009676 <_scanf_i+0x11e>
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	05db      	lsls	r3, r3, #23
 80096ba:	d50d      	bpl.n	80096d8 <_scanf_i+0x180>
 80096bc:	42bd      	cmp	r5, r7
 80096be:	d909      	bls.n	80096d4 <_scanf_i+0x17c>
 80096c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80096c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096c8:	4632      	mov	r2, r6
 80096ca:	4650      	mov	r0, sl
 80096cc:	4798      	blx	r3
 80096ce:	f105 39ff 	add.w	r9, r5, #4294967295
 80096d2:	464d      	mov	r5, r9
 80096d4:	42bd      	cmp	r5, r7
 80096d6:	d02d      	beq.n	8009734 <_scanf_i+0x1dc>
 80096d8:	6822      	ldr	r2, [r4, #0]
 80096da:	f012 0210 	ands.w	r2, r2, #16
 80096de:	d113      	bne.n	8009708 <_scanf_i+0x1b0>
 80096e0:	702a      	strb	r2, [r5, #0]
 80096e2:	6863      	ldr	r3, [r4, #4]
 80096e4:	9e01      	ldr	r6, [sp, #4]
 80096e6:	4639      	mov	r1, r7
 80096e8:	4650      	mov	r0, sl
 80096ea:	47b0      	blx	r6
 80096ec:	6821      	ldr	r1, [r4, #0]
 80096ee:	f8d8 3000 	ldr.w	r3, [r8]
 80096f2:	f011 0f20 	tst.w	r1, #32
 80096f6:	d013      	beq.n	8009720 <_scanf_i+0x1c8>
 80096f8:	1d1a      	adds	r2, r3, #4
 80096fa:	f8c8 2000 	str.w	r2, [r8]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6018      	str	r0, [r3, #0]
 8009702:	68e3      	ldr	r3, [r4, #12]
 8009704:	3301      	adds	r3, #1
 8009706:	60e3      	str	r3, [r4, #12]
 8009708:	1bed      	subs	r5, r5, r7
 800970a:	44ab      	add	fp, r5
 800970c:	6925      	ldr	r5, [r4, #16]
 800970e:	445d      	add	r5, fp
 8009710:	6125      	str	r5, [r4, #16]
 8009712:	2000      	movs	r0, #0
 8009714:	b007      	add	sp, #28
 8009716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971a:	f04f 0b00 	mov.w	fp, #0
 800971e:	e7ca      	b.n	80096b6 <_scanf_i+0x15e>
 8009720:	1d1a      	adds	r2, r3, #4
 8009722:	f8c8 2000 	str.w	r2, [r8]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f011 0f01 	tst.w	r1, #1
 800972c:	bf14      	ite	ne
 800972e:	8018      	strhne	r0, [r3, #0]
 8009730:	6018      	streq	r0, [r3, #0]
 8009732:	e7e6      	b.n	8009702 <_scanf_i+0x1aa>
 8009734:	2001      	movs	r0, #1
 8009736:	e7ed      	b.n	8009714 <_scanf_i+0x1bc>
 8009738:	0800caf0 	.word	0x0800caf0
 800973c:	0800991d 	.word	0x0800991d
 8009740:	08006e3d 	.word	0x08006e3d
 8009744:	0800cf16 	.word	0x0800cf16

08009748 <_read_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4d07      	ldr	r5, [pc, #28]	; (8009768 <_read_r+0x20>)
 800974c:	4604      	mov	r4, r0
 800974e:	4608      	mov	r0, r1
 8009750:	4611      	mov	r1, r2
 8009752:	2200      	movs	r2, #0
 8009754:	602a      	str	r2, [r5, #0]
 8009756:	461a      	mov	r2, r3
 8009758:	f7f9 f871 	bl	800283e <_read>
 800975c:	1c43      	adds	r3, r0, #1
 800975e:	d102      	bne.n	8009766 <_read_r+0x1e>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	b103      	cbz	r3, 8009766 <_read_r+0x1e>
 8009764:	6023      	str	r3, [r4, #0]
 8009766:	bd38      	pop	{r3, r4, r5, pc}
 8009768:	20000cb4 	.word	0x20000cb4
 800976c:	00000000 	.word	0x00000000

08009770 <nan>:
 8009770:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009778 <nan+0x8>
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	00000000 	.word	0x00000000
 800977c:	7ff80000 	.word	0x7ff80000

08009780 <_sbrk_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4d06      	ldr	r5, [pc, #24]	; (800979c <_sbrk_r+0x1c>)
 8009784:	2300      	movs	r3, #0
 8009786:	4604      	mov	r4, r0
 8009788:	4608      	mov	r0, r1
 800978a:	602b      	str	r3, [r5, #0]
 800978c:	f7f9 f8c4 	bl	8002918 <_sbrk>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_sbrk_r+0x1a>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	b103      	cbz	r3, 800979a <_sbrk_r+0x1a>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	20000cb4 	.word	0x20000cb4

080097a0 <__sccl>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	780b      	ldrb	r3, [r1, #0]
 80097a4:	4604      	mov	r4, r0
 80097a6:	2b5e      	cmp	r3, #94	; 0x5e
 80097a8:	bf0b      	itete	eq
 80097aa:	784b      	ldrbeq	r3, [r1, #1]
 80097ac:	1c48      	addne	r0, r1, #1
 80097ae:	1c88      	addeq	r0, r1, #2
 80097b0:	2200      	movne	r2, #0
 80097b2:	bf08      	it	eq
 80097b4:	2201      	moveq	r2, #1
 80097b6:	1e61      	subs	r1, r4, #1
 80097b8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80097bc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80097c0:	42a9      	cmp	r1, r5
 80097c2:	d1fb      	bne.n	80097bc <__sccl+0x1c>
 80097c4:	b90b      	cbnz	r3, 80097ca <__sccl+0x2a>
 80097c6:	3801      	subs	r0, #1
 80097c8:	bd70      	pop	{r4, r5, r6, pc}
 80097ca:	f082 0201 	eor.w	r2, r2, #1
 80097ce:	54e2      	strb	r2, [r4, r3]
 80097d0:	4605      	mov	r5, r0
 80097d2:	4628      	mov	r0, r5
 80097d4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80097d8:	292d      	cmp	r1, #45	; 0x2d
 80097da:	d006      	beq.n	80097ea <__sccl+0x4a>
 80097dc:	295d      	cmp	r1, #93	; 0x5d
 80097de:	d0f3      	beq.n	80097c8 <__sccl+0x28>
 80097e0:	b909      	cbnz	r1, 80097e6 <__sccl+0x46>
 80097e2:	4628      	mov	r0, r5
 80097e4:	e7f0      	b.n	80097c8 <__sccl+0x28>
 80097e6:	460b      	mov	r3, r1
 80097e8:	e7f1      	b.n	80097ce <__sccl+0x2e>
 80097ea:	786e      	ldrb	r6, [r5, #1]
 80097ec:	2e5d      	cmp	r6, #93	; 0x5d
 80097ee:	d0fa      	beq.n	80097e6 <__sccl+0x46>
 80097f0:	42b3      	cmp	r3, r6
 80097f2:	dcf8      	bgt.n	80097e6 <__sccl+0x46>
 80097f4:	3502      	adds	r5, #2
 80097f6:	4619      	mov	r1, r3
 80097f8:	3101      	adds	r1, #1
 80097fa:	428e      	cmp	r6, r1
 80097fc:	5462      	strb	r2, [r4, r1]
 80097fe:	dcfb      	bgt.n	80097f8 <__sccl+0x58>
 8009800:	1af1      	subs	r1, r6, r3
 8009802:	3901      	subs	r1, #1
 8009804:	1c58      	adds	r0, r3, #1
 8009806:	42b3      	cmp	r3, r6
 8009808:	bfa8      	it	ge
 800980a:	2100      	movge	r1, #0
 800980c:	1843      	adds	r3, r0, r1
 800980e:	e7e0      	b.n	80097d2 <__sccl+0x32>

08009810 <strncmp>:
 8009810:	b510      	push	{r4, lr}
 8009812:	b17a      	cbz	r2, 8009834 <strncmp+0x24>
 8009814:	4603      	mov	r3, r0
 8009816:	3901      	subs	r1, #1
 8009818:	1884      	adds	r4, r0, r2
 800981a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800981e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009822:	4290      	cmp	r0, r2
 8009824:	d101      	bne.n	800982a <strncmp+0x1a>
 8009826:	42a3      	cmp	r3, r4
 8009828:	d101      	bne.n	800982e <strncmp+0x1e>
 800982a:	1a80      	subs	r0, r0, r2
 800982c:	bd10      	pop	{r4, pc}
 800982e:	2800      	cmp	r0, #0
 8009830:	d1f3      	bne.n	800981a <strncmp+0xa>
 8009832:	e7fa      	b.n	800982a <strncmp+0x1a>
 8009834:	4610      	mov	r0, r2
 8009836:	e7f9      	b.n	800982c <strncmp+0x1c>

08009838 <_strtoul_l.constprop.0>:
 8009838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800983c:	4f36      	ldr	r7, [pc, #216]	; (8009918 <_strtoul_l.constprop.0+0xe0>)
 800983e:	4686      	mov	lr, r0
 8009840:	460d      	mov	r5, r1
 8009842:	4628      	mov	r0, r5
 8009844:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009848:	5de6      	ldrb	r6, [r4, r7]
 800984a:	f016 0608 	ands.w	r6, r6, #8
 800984e:	d1f8      	bne.n	8009842 <_strtoul_l.constprop.0+0xa>
 8009850:	2c2d      	cmp	r4, #45	; 0x2d
 8009852:	d12f      	bne.n	80098b4 <_strtoul_l.constprop.0+0x7c>
 8009854:	782c      	ldrb	r4, [r5, #0]
 8009856:	2601      	movs	r6, #1
 8009858:	1c85      	adds	r5, r0, #2
 800985a:	2b00      	cmp	r3, #0
 800985c:	d057      	beq.n	800990e <_strtoul_l.constprop.0+0xd6>
 800985e:	2b10      	cmp	r3, #16
 8009860:	d109      	bne.n	8009876 <_strtoul_l.constprop.0+0x3e>
 8009862:	2c30      	cmp	r4, #48	; 0x30
 8009864:	d107      	bne.n	8009876 <_strtoul_l.constprop.0+0x3e>
 8009866:	7828      	ldrb	r0, [r5, #0]
 8009868:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800986c:	2858      	cmp	r0, #88	; 0x58
 800986e:	d149      	bne.n	8009904 <_strtoul_l.constprop.0+0xcc>
 8009870:	786c      	ldrb	r4, [r5, #1]
 8009872:	2310      	movs	r3, #16
 8009874:	3502      	adds	r5, #2
 8009876:	f04f 38ff 	mov.w	r8, #4294967295
 800987a:	2700      	movs	r7, #0
 800987c:	fbb8 f8f3 	udiv	r8, r8, r3
 8009880:	fb03 f908 	mul.w	r9, r3, r8
 8009884:	ea6f 0909 	mvn.w	r9, r9
 8009888:	4638      	mov	r0, r7
 800988a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800988e:	f1bc 0f09 	cmp.w	ip, #9
 8009892:	d814      	bhi.n	80098be <_strtoul_l.constprop.0+0x86>
 8009894:	4664      	mov	r4, ip
 8009896:	42a3      	cmp	r3, r4
 8009898:	dd22      	ble.n	80098e0 <_strtoul_l.constprop.0+0xa8>
 800989a:	2f00      	cmp	r7, #0
 800989c:	db1d      	blt.n	80098da <_strtoul_l.constprop.0+0xa2>
 800989e:	4580      	cmp	r8, r0
 80098a0:	d31b      	bcc.n	80098da <_strtoul_l.constprop.0+0xa2>
 80098a2:	d101      	bne.n	80098a8 <_strtoul_l.constprop.0+0x70>
 80098a4:	45a1      	cmp	r9, r4
 80098a6:	db18      	blt.n	80098da <_strtoul_l.constprop.0+0xa2>
 80098a8:	fb00 4003 	mla	r0, r0, r3, r4
 80098ac:	2701      	movs	r7, #1
 80098ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098b2:	e7ea      	b.n	800988a <_strtoul_l.constprop.0+0x52>
 80098b4:	2c2b      	cmp	r4, #43	; 0x2b
 80098b6:	bf04      	itt	eq
 80098b8:	782c      	ldrbeq	r4, [r5, #0]
 80098ba:	1c85      	addeq	r5, r0, #2
 80098bc:	e7cd      	b.n	800985a <_strtoul_l.constprop.0+0x22>
 80098be:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80098c2:	f1bc 0f19 	cmp.w	ip, #25
 80098c6:	d801      	bhi.n	80098cc <_strtoul_l.constprop.0+0x94>
 80098c8:	3c37      	subs	r4, #55	; 0x37
 80098ca:	e7e4      	b.n	8009896 <_strtoul_l.constprop.0+0x5e>
 80098cc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80098d0:	f1bc 0f19 	cmp.w	ip, #25
 80098d4:	d804      	bhi.n	80098e0 <_strtoul_l.constprop.0+0xa8>
 80098d6:	3c57      	subs	r4, #87	; 0x57
 80098d8:	e7dd      	b.n	8009896 <_strtoul_l.constprop.0+0x5e>
 80098da:	f04f 37ff 	mov.w	r7, #4294967295
 80098de:	e7e6      	b.n	80098ae <_strtoul_l.constprop.0+0x76>
 80098e0:	2f00      	cmp	r7, #0
 80098e2:	da07      	bge.n	80098f4 <_strtoul_l.constprop.0+0xbc>
 80098e4:	2322      	movs	r3, #34	; 0x22
 80098e6:	f8ce 3000 	str.w	r3, [lr]
 80098ea:	f04f 30ff 	mov.w	r0, #4294967295
 80098ee:	b932      	cbnz	r2, 80098fe <_strtoul_l.constprop.0+0xc6>
 80098f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098f4:	b106      	cbz	r6, 80098f8 <_strtoul_l.constprop.0+0xc0>
 80098f6:	4240      	negs	r0, r0
 80098f8:	2a00      	cmp	r2, #0
 80098fa:	d0f9      	beq.n	80098f0 <_strtoul_l.constprop.0+0xb8>
 80098fc:	b107      	cbz	r7, 8009900 <_strtoul_l.constprop.0+0xc8>
 80098fe:	1e69      	subs	r1, r5, #1
 8009900:	6011      	str	r1, [r2, #0]
 8009902:	e7f5      	b.n	80098f0 <_strtoul_l.constprop.0+0xb8>
 8009904:	2430      	movs	r4, #48	; 0x30
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1b5      	bne.n	8009876 <_strtoul_l.constprop.0+0x3e>
 800990a:	2308      	movs	r3, #8
 800990c:	e7b3      	b.n	8009876 <_strtoul_l.constprop.0+0x3e>
 800990e:	2c30      	cmp	r4, #48	; 0x30
 8009910:	d0a9      	beq.n	8009866 <_strtoul_l.constprop.0+0x2e>
 8009912:	230a      	movs	r3, #10
 8009914:	e7af      	b.n	8009876 <_strtoul_l.constprop.0+0x3e>
 8009916:	bf00      	nop
 8009918:	0800cb89 	.word	0x0800cb89

0800991c <_strtoul_r>:
 800991c:	f7ff bf8c 	b.w	8009838 <_strtoul_l.constprop.0>

08009920 <__submore>:
 8009920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009924:	460c      	mov	r4, r1
 8009926:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800992c:	4299      	cmp	r1, r3
 800992e:	d11d      	bne.n	800996c <__submore+0x4c>
 8009930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009934:	f7ff fa14 	bl	8008d60 <_malloc_r>
 8009938:	b918      	cbnz	r0, 8009942 <__submore+0x22>
 800993a:	f04f 30ff 	mov.w	r0, #4294967295
 800993e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009946:	63a3      	str	r3, [r4, #56]	; 0x38
 8009948:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800994c:	6360      	str	r0, [r4, #52]	; 0x34
 800994e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009952:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009956:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800995a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800995e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009962:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009966:	6020      	str	r0, [r4, #0]
 8009968:	2000      	movs	r0, #0
 800996a:	e7e8      	b.n	800993e <__submore+0x1e>
 800996c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800996e:	0077      	lsls	r7, r6, #1
 8009970:	463a      	mov	r2, r7
 8009972:	f000 fa2d 	bl	8009dd0 <_realloc_r>
 8009976:	4605      	mov	r5, r0
 8009978:	2800      	cmp	r0, #0
 800997a:	d0de      	beq.n	800993a <__submore+0x1a>
 800997c:	eb00 0806 	add.w	r8, r0, r6
 8009980:	4601      	mov	r1, r0
 8009982:	4632      	mov	r2, r6
 8009984:	4640      	mov	r0, r8
 8009986:	f7fe fc99 	bl	80082bc <memcpy>
 800998a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800998e:	f8c4 8000 	str.w	r8, [r4]
 8009992:	e7e9      	b.n	8009968 <__submore+0x48>

08009994 <__ascii_wctomb>:
 8009994:	b149      	cbz	r1, 80099aa <__ascii_wctomb+0x16>
 8009996:	2aff      	cmp	r2, #255	; 0xff
 8009998:	bf85      	ittet	hi
 800999a:	238a      	movhi	r3, #138	; 0x8a
 800999c:	6003      	strhi	r3, [r0, #0]
 800999e:	700a      	strbls	r2, [r1, #0]
 80099a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80099a4:	bf98      	it	ls
 80099a6:	2001      	movls	r0, #1
 80099a8:	4770      	bx	lr
 80099aa:	4608      	mov	r0, r1
 80099ac:	4770      	bx	lr
	...

080099b0 <__assert_func>:
 80099b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099b2:	4614      	mov	r4, r2
 80099b4:	461a      	mov	r2, r3
 80099b6:	4b09      	ldr	r3, [pc, #36]	; (80099dc <__assert_func+0x2c>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4605      	mov	r5, r0
 80099bc:	68d8      	ldr	r0, [r3, #12]
 80099be:	b14c      	cbz	r4, 80099d4 <__assert_func+0x24>
 80099c0:	4b07      	ldr	r3, [pc, #28]	; (80099e0 <__assert_func+0x30>)
 80099c2:	9100      	str	r1, [sp, #0]
 80099c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099c8:	4906      	ldr	r1, [pc, #24]	; (80099e4 <__assert_func+0x34>)
 80099ca:	462b      	mov	r3, r5
 80099cc:	f000 f9a6 	bl	8009d1c <fiprintf>
 80099d0:	f000 fc46 	bl	800a260 <abort>
 80099d4:	4b04      	ldr	r3, [pc, #16]	; (80099e8 <__assert_func+0x38>)
 80099d6:	461c      	mov	r4, r3
 80099d8:	e7f3      	b.n	80099c2 <__assert_func+0x12>
 80099da:	bf00      	nop
 80099dc:	20000010 	.word	0x20000010
 80099e0:	0800cf18 	.word	0x0800cf18
 80099e4:	0800cf25 	.word	0x0800cf25
 80099e8:	0800cf53 	.word	0x0800cf53

080099ec <__sflush_r>:
 80099ec:	898a      	ldrh	r2, [r1, #12]
 80099ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f2:	4605      	mov	r5, r0
 80099f4:	0710      	lsls	r0, r2, #28
 80099f6:	460c      	mov	r4, r1
 80099f8:	d458      	bmi.n	8009aac <__sflush_r+0xc0>
 80099fa:	684b      	ldr	r3, [r1, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	dc05      	bgt.n	8009a0c <__sflush_r+0x20>
 8009a00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	dc02      	bgt.n	8009a0c <__sflush_r+0x20>
 8009a06:	2000      	movs	r0, #0
 8009a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a0e:	2e00      	cmp	r6, #0
 8009a10:	d0f9      	beq.n	8009a06 <__sflush_r+0x1a>
 8009a12:	2300      	movs	r3, #0
 8009a14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a18:	682f      	ldr	r7, [r5, #0]
 8009a1a:	602b      	str	r3, [r5, #0]
 8009a1c:	d032      	beq.n	8009a84 <__sflush_r+0x98>
 8009a1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	075a      	lsls	r2, r3, #29
 8009a24:	d505      	bpl.n	8009a32 <__sflush_r+0x46>
 8009a26:	6863      	ldr	r3, [r4, #4]
 8009a28:	1ac0      	subs	r0, r0, r3
 8009a2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a2c:	b10b      	cbz	r3, 8009a32 <__sflush_r+0x46>
 8009a2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a30:	1ac0      	subs	r0, r0, r3
 8009a32:	2300      	movs	r3, #0
 8009a34:	4602      	mov	r2, r0
 8009a36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a38:	6a21      	ldr	r1, [r4, #32]
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	47b0      	blx	r6
 8009a3e:	1c43      	adds	r3, r0, #1
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	d106      	bne.n	8009a52 <__sflush_r+0x66>
 8009a44:	6829      	ldr	r1, [r5, #0]
 8009a46:	291d      	cmp	r1, #29
 8009a48:	d82c      	bhi.n	8009aa4 <__sflush_r+0xb8>
 8009a4a:	4a2a      	ldr	r2, [pc, #168]	; (8009af4 <__sflush_r+0x108>)
 8009a4c:	40ca      	lsrs	r2, r1
 8009a4e:	07d6      	lsls	r6, r2, #31
 8009a50:	d528      	bpl.n	8009aa4 <__sflush_r+0xb8>
 8009a52:	2200      	movs	r2, #0
 8009a54:	6062      	str	r2, [r4, #4]
 8009a56:	04d9      	lsls	r1, r3, #19
 8009a58:	6922      	ldr	r2, [r4, #16]
 8009a5a:	6022      	str	r2, [r4, #0]
 8009a5c:	d504      	bpl.n	8009a68 <__sflush_r+0x7c>
 8009a5e:	1c42      	adds	r2, r0, #1
 8009a60:	d101      	bne.n	8009a66 <__sflush_r+0x7a>
 8009a62:	682b      	ldr	r3, [r5, #0]
 8009a64:	b903      	cbnz	r3, 8009a68 <__sflush_r+0x7c>
 8009a66:	6560      	str	r0, [r4, #84]	; 0x54
 8009a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a6a:	602f      	str	r7, [r5, #0]
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	d0ca      	beq.n	8009a06 <__sflush_r+0x1a>
 8009a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a74:	4299      	cmp	r1, r3
 8009a76:	d002      	beq.n	8009a7e <__sflush_r+0x92>
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f7ff f905 	bl	8008c88 <_free_r>
 8009a7e:	2000      	movs	r0, #0
 8009a80:	6360      	str	r0, [r4, #52]	; 0x34
 8009a82:	e7c1      	b.n	8009a08 <__sflush_r+0x1c>
 8009a84:	6a21      	ldr	r1, [r4, #32]
 8009a86:	2301      	movs	r3, #1
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b0      	blx	r6
 8009a8c:	1c41      	adds	r1, r0, #1
 8009a8e:	d1c7      	bne.n	8009a20 <__sflush_r+0x34>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d0c4      	beq.n	8009a20 <__sflush_r+0x34>
 8009a96:	2b1d      	cmp	r3, #29
 8009a98:	d001      	beq.n	8009a9e <__sflush_r+0xb2>
 8009a9a:	2b16      	cmp	r3, #22
 8009a9c:	d101      	bne.n	8009aa2 <__sflush_r+0xb6>
 8009a9e:	602f      	str	r7, [r5, #0]
 8009aa0:	e7b1      	b.n	8009a06 <__sflush_r+0x1a>
 8009aa2:	89a3      	ldrh	r3, [r4, #12]
 8009aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa8:	81a3      	strh	r3, [r4, #12]
 8009aaa:	e7ad      	b.n	8009a08 <__sflush_r+0x1c>
 8009aac:	690f      	ldr	r7, [r1, #16]
 8009aae:	2f00      	cmp	r7, #0
 8009ab0:	d0a9      	beq.n	8009a06 <__sflush_r+0x1a>
 8009ab2:	0793      	lsls	r3, r2, #30
 8009ab4:	680e      	ldr	r6, [r1, #0]
 8009ab6:	bf08      	it	eq
 8009ab8:	694b      	ldreq	r3, [r1, #20]
 8009aba:	600f      	str	r7, [r1, #0]
 8009abc:	bf18      	it	ne
 8009abe:	2300      	movne	r3, #0
 8009ac0:	eba6 0807 	sub.w	r8, r6, r7
 8009ac4:	608b      	str	r3, [r1, #8]
 8009ac6:	f1b8 0f00 	cmp.w	r8, #0
 8009aca:	dd9c      	ble.n	8009a06 <__sflush_r+0x1a>
 8009acc:	6a21      	ldr	r1, [r4, #32]
 8009ace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ad0:	4643      	mov	r3, r8
 8009ad2:	463a      	mov	r2, r7
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	47b0      	blx	r6
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	dc06      	bgt.n	8009aea <__sflush_r+0xfe>
 8009adc:	89a3      	ldrh	r3, [r4, #12]
 8009ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ae2:	81a3      	strh	r3, [r4, #12]
 8009ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae8:	e78e      	b.n	8009a08 <__sflush_r+0x1c>
 8009aea:	4407      	add	r7, r0
 8009aec:	eba8 0800 	sub.w	r8, r8, r0
 8009af0:	e7e9      	b.n	8009ac6 <__sflush_r+0xda>
 8009af2:	bf00      	nop
 8009af4:	20400001 	.word	0x20400001

08009af8 <_fflush_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	690b      	ldr	r3, [r1, #16]
 8009afc:	4605      	mov	r5, r0
 8009afe:	460c      	mov	r4, r1
 8009b00:	b913      	cbnz	r3, 8009b08 <_fflush_r+0x10>
 8009b02:	2500      	movs	r5, #0
 8009b04:	4628      	mov	r0, r5
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	b118      	cbz	r0, 8009b12 <_fflush_r+0x1a>
 8009b0a:	6983      	ldr	r3, [r0, #24]
 8009b0c:	b90b      	cbnz	r3, 8009b12 <_fflush_r+0x1a>
 8009b0e:	f000 f887 	bl	8009c20 <__sinit>
 8009b12:	4b14      	ldr	r3, [pc, #80]	; (8009b64 <_fflush_r+0x6c>)
 8009b14:	429c      	cmp	r4, r3
 8009b16:	d11b      	bne.n	8009b50 <_fflush_r+0x58>
 8009b18:	686c      	ldr	r4, [r5, #4]
 8009b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0ef      	beq.n	8009b02 <_fflush_r+0xa>
 8009b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b24:	07d0      	lsls	r0, r2, #31
 8009b26:	d404      	bmi.n	8009b32 <_fflush_r+0x3a>
 8009b28:	0599      	lsls	r1, r3, #22
 8009b2a:	d402      	bmi.n	8009b32 <_fflush_r+0x3a>
 8009b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b2e:	f000 f927 	bl	8009d80 <__retarget_lock_acquire_recursive>
 8009b32:	4628      	mov	r0, r5
 8009b34:	4621      	mov	r1, r4
 8009b36:	f7ff ff59 	bl	80099ec <__sflush_r>
 8009b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b3c:	07da      	lsls	r2, r3, #31
 8009b3e:	4605      	mov	r5, r0
 8009b40:	d4e0      	bmi.n	8009b04 <_fflush_r+0xc>
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	059b      	lsls	r3, r3, #22
 8009b46:	d4dd      	bmi.n	8009b04 <_fflush_r+0xc>
 8009b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b4a:	f000 f91a 	bl	8009d82 <__retarget_lock_release_recursive>
 8009b4e:	e7d9      	b.n	8009b04 <_fflush_r+0xc>
 8009b50:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <_fflush_r+0x70>)
 8009b52:	429c      	cmp	r4, r3
 8009b54:	d101      	bne.n	8009b5a <_fflush_r+0x62>
 8009b56:	68ac      	ldr	r4, [r5, #8]
 8009b58:	e7df      	b.n	8009b1a <_fflush_r+0x22>
 8009b5a:	4b04      	ldr	r3, [pc, #16]	; (8009b6c <_fflush_r+0x74>)
 8009b5c:	429c      	cmp	r4, r3
 8009b5e:	bf08      	it	eq
 8009b60:	68ec      	ldreq	r4, [r5, #12]
 8009b62:	e7da      	b.n	8009b1a <_fflush_r+0x22>
 8009b64:	0800cf74 	.word	0x0800cf74
 8009b68:	0800cf94 	.word	0x0800cf94
 8009b6c:	0800cf54 	.word	0x0800cf54

08009b70 <std>:
 8009b70:	2300      	movs	r3, #0
 8009b72:	b510      	push	{r4, lr}
 8009b74:	4604      	mov	r4, r0
 8009b76:	e9c0 3300 	strd	r3, r3, [r0]
 8009b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b7e:	6083      	str	r3, [r0, #8]
 8009b80:	8181      	strh	r1, [r0, #12]
 8009b82:	6643      	str	r3, [r0, #100]	; 0x64
 8009b84:	81c2      	strh	r2, [r0, #14]
 8009b86:	6183      	str	r3, [r0, #24]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	2208      	movs	r2, #8
 8009b8c:	305c      	adds	r0, #92	; 0x5c
 8009b8e:	f7fb fb91 	bl	80052b4 <memset>
 8009b92:	4b05      	ldr	r3, [pc, #20]	; (8009ba8 <std+0x38>)
 8009b94:	6263      	str	r3, [r4, #36]	; 0x24
 8009b96:	4b05      	ldr	r3, [pc, #20]	; (8009bac <std+0x3c>)
 8009b98:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b9a:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <std+0x40>)
 8009b9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b9e:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <std+0x44>)
 8009ba0:	6224      	str	r4, [r4, #32]
 8009ba2:	6323      	str	r3, [r4, #48]	; 0x30
 8009ba4:	bd10      	pop	{r4, pc}
 8009ba6:	bf00      	nop
 8009ba8:	0800605d 	.word	0x0800605d
 8009bac:	08006083 	.word	0x08006083
 8009bb0:	080060bb 	.word	0x080060bb
 8009bb4:	080060df 	.word	0x080060df

08009bb8 <_cleanup_r>:
 8009bb8:	4901      	ldr	r1, [pc, #4]	; (8009bc0 <_cleanup_r+0x8>)
 8009bba:	f000 b8c1 	b.w	8009d40 <_fwalk_reent>
 8009bbe:	bf00      	nop
 8009bc0:	08009af9 	.word	0x08009af9

08009bc4 <__sfmoreglue>:
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	2268      	movs	r2, #104	; 0x68
 8009bc8:	1e4d      	subs	r5, r1, #1
 8009bca:	4355      	muls	r5, r2
 8009bcc:	460e      	mov	r6, r1
 8009bce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bd2:	f7ff f8c5 	bl	8008d60 <_malloc_r>
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	b140      	cbz	r0, 8009bec <__sfmoreglue+0x28>
 8009bda:	2100      	movs	r1, #0
 8009bdc:	e9c0 1600 	strd	r1, r6, [r0]
 8009be0:	300c      	adds	r0, #12
 8009be2:	60a0      	str	r0, [r4, #8]
 8009be4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009be8:	f7fb fb64 	bl	80052b4 <memset>
 8009bec:	4620      	mov	r0, r4
 8009bee:	bd70      	pop	{r4, r5, r6, pc}

08009bf0 <__sfp_lock_acquire>:
 8009bf0:	4801      	ldr	r0, [pc, #4]	; (8009bf8 <__sfp_lock_acquire+0x8>)
 8009bf2:	f000 b8c5 	b.w	8009d80 <__retarget_lock_acquire_recursive>
 8009bf6:	bf00      	nop
 8009bf8:	20000cb9 	.word	0x20000cb9

08009bfc <__sfp_lock_release>:
 8009bfc:	4801      	ldr	r0, [pc, #4]	; (8009c04 <__sfp_lock_release+0x8>)
 8009bfe:	f000 b8c0 	b.w	8009d82 <__retarget_lock_release_recursive>
 8009c02:	bf00      	nop
 8009c04:	20000cb9 	.word	0x20000cb9

08009c08 <__sinit_lock_acquire>:
 8009c08:	4801      	ldr	r0, [pc, #4]	; (8009c10 <__sinit_lock_acquire+0x8>)
 8009c0a:	f000 b8b9 	b.w	8009d80 <__retarget_lock_acquire_recursive>
 8009c0e:	bf00      	nop
 8009c10:	20000cba 	.word	0x20000cba

08009c14 <__sinit_lock_release>:
 8009c14:	4801      	ldr	r0, [pc, #4]	; (8009c1c <__sinit_lock_release+0x8>)
 8009c16:	f000 b8b4 	b.w	8009d82 <__retarget_lock_release_recursive>
 8009c1a:	bf00      	nop
 8009c1c:	20000cba 	.word	0x20000cba

08009c20 <__sinit>:
 8009c20:	b510      	push	{r4, lr}
 8009c22:	4604      	mov	r4, r0
 8009c24:	f7ff fff0 	bl	8009c08 <__sinit_lock_acquire>
 8009c28:	69a3      	ldr	r3, [r4, #24]
 8009c2a:	b11b      	cbz	r3, 8009c34 <__sinit+0x14>
 8009c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c30:	f7ff bff0 	b.w	8009c14 <__sinit_lock_release>
 8009c34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c38:	6523      	str	r3, [r4, #80]	; 0x50
 8009c3a:	4b13      	ldr	r3, [pc, #76]	; (8009c88 <__sinit+0x68>)
 8009c3c:	4a13      	ldr	r2, [pc, #76]	; (8009c8c <__sinit+0x6c>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c42:	42a3      	cmp	r3, r4
 8009c44:	bf04      	itt	eq
 8009c46:	2301      	moveq	r3, #1
 8009c48:	61a3      	streq	r3, [r4, #24]
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f000 f820 	bl	8009c90 <__sfp>
 8009c50:	6060      	str	r0, [r4, #4]
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 f81c 	bl	8009c90 <__sfp>
 8009c58:	60a0      	str	r0, [r4, #8]
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f000 f818 	bl	8009c90 <__sfp>
 8009c60:	2200      	movs	r2, #0
 8009c62:	60e0      	str	r0, [r4, #12]
 8009c64:	2104      	movs	r1, #4
 8009c66:	6860      	ldr	r0, [r4, #4]
 8009c68:	f7ff ff82 	bl	8009b70 <std>
 8009c6c:	68a0      	ldr	r0, [r4, #8]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	2109      	movs	r1, #9
 8009c72:	f7ff ff7d 	bl	8009b70 <std>
 8009c76:	68e0      	ldr	r0, [r4, #12]
 8009c78:	2202      	movs	r2, #2
 8009c7a:	2112      	movs	r1, #18
 8009c7c:	f7ff ff78 	bl	8009b70 <std>
 8009c80:	2301      	movs	r3, #1
 8009c82:	61a3      	str	r3, [r4, #24]
 8009c84:	e7d2      	b.n	8009c2c <__sinit+0xc>
 8009c86:	bf00      	nop
 8009c88:	0800cafc 	.word	0x0800cafc
 8009c8c:	08009bb9 	.word	0x08009bb9

08009c90 <__sfp>:
 8009c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c92:	4607      	mov	r7, r0
 8009c94:	f7ff ffac 	bl	8009bf0 <__sfp_lock_acquire>
 8009c98:	4b1e      	ldr	r3, [pc, #120]	; (8009d14 <__sfp+0x84>)
 8009c9a:	681e      	ldr	r6, [r3, #0]
 8009c9c:	69b3      	ldr	r3, [r6, #24]
 8009c9e:	b913      	cbnz	r3, 8009ca6 <__sfp+0x16>
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	f7ff ffbd 	bl	8009c20 <__sinit>
 8009ca6:	3648      	adds	r6, #72	; 0x48
 8009ca8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cac:	3b01      	subs	r3, #1
 8009cae:	d503      	bpl.n	8009cb8 <__sfp+0x28>
 8009cb0:	6833      	ldr	r3, [r6, #0]
 8009cb2:	b30b      	cbz	r3, 8009cf8 <__sfp+0x68>
 8009cb4:	6836      	ldr	r6, [r6, #0]
 8009cb6:	e7f7      	b.n	8009ca8 <__sfp+0x18>
 8009cb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cbc:	b9d5      	cbnz	r5, 8009cf4 <__sfp+0x64>
 8009cbe:	4b16      	ldr	r3, [pc, #88]	; (8009d18 <__sfp+0x88>)
 8009cc0:	60e3      	str	r3, [r4, #12]
 8009cc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cc6:	6665      	str	r5, [r4, #100]	; 0x64
 8009cc8:	f000 f859 	bl	8009d7e <__retarget_lock_init_recursive>
 8009ccc:	f7ff ff96 	bl	8009bfc <__sfp_lock_release>
 8009cd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cd8:	6025      	str	r5, [r4, #0]
 8009cda:	61a5      	str	r5, [r4, #24]
 8009cdc:	2208      	movs	r2, #8
 8009cde:	4629      	mov	r1, r5
 8009ce0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ce4:	f7fb fae6 	bl	80052b4 <memset>
 8009ce8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf4:	3468      	adds	r4, #104	; 0x68
 8009cf6:	e7d9      	b.n	8009cac <__sfp+0x1c>
 8009cf8:	2104      	movs	r1, #4
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	f7ff ff62 	bl	8009bc4 <__sfmoreglue>
 8009d00:	4604      	mov	r4, r0
 8009d02:	6030      	str	r0, [r6, #0]
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d1d5      	bne.n	8009cb4 <__sfp+0x24>
 8009d08:	f7ff ff78 	bl	8009bfc <__sfp_lock_release>
 8009d0c:	230c      	movs	r3, #12
 8009d0e:	603b      	str	r3, [r7, #0]
 8009d10:	e7ee      	b.n	8009cf0 <__sfp+0x60>
 8009d12:	bf00      	nop
 8009d14:	0800cafc 	.word	0x0800cafc
 8009d18:	ffff0001 	.word	0xffff0001

08009d1c <fiprintf>:
 8009d1c:	b40e      	push	{r1, r2, r3}
 8009d1e:	b503      	push	{r0, r1, lr}
 8009d20:	4601      	mov	r1, r0
 8009d22:	ab03      	add	r3, sp, #12
 8009d24:	4805      	ldr	r0, [pc, #20]	; (8009d3c <fiprintf+0x20>)
 8009d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d2a:	6800      	ldr	r0, [r0, #0]
 8009d2c:	9301      	str	r3, [sp, #4]
 8009d2e:	f000 f8a7 	bl	8009e80 <_vfiprintf_r>
 8009d32:	b002      	add	sp, #8
 8009d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d38:	b003      	add	sp, #12
 8009d3a:	4770      	bx	lr
 8009d3c:	20000010 	.word	0x20000010

08009d40 <_fwalk_reent>:
 8009d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d44:	4606      	mov	r6, r0
 8009d46:	4688      	mov	r8, r1
 8009d48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d4c:	2700      	movs	r7, #0
 8009d4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d52:	f1b9 0901 	subs.w	r9, r9, #1
 8009d56:	d505      	bpl.n	8009d64 <_fwalk_reent+0x24>
 8009d58:	6824      	ldr	r4, [r4, #0]
 8009d5a:	2c00      	cmp	r4, #0
 8009d5c:	d1f7      	bne.n	8009d4e <_fwalk_reent+0xe>
 8009d5e:	4638      	mov	r0, r7
 8009d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d64:	89ab      	ldrh	r3, [r5, #12]
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d907      	bls.n	8009d7a <_fwalk_reent+0x3a>
 8009d6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	d003      	beq.n	8009d7a <_fwalk_reent+0x3a>
 8009d72:	4629      	mov	r1, r5
 8009d74:	4630      	mov	r0, r6
 8009d76:	47c0      	blx	r8
 8009d78:	4307      	orrs	r7, r0
 8009d7a:	3568      	adds	r5, #104	; 0x68
 8009d7c:	e7e9      	b.n	8009d52 <_fwalk_reent+0x12>

08009d7e <__retarget_lock_init_recursive>:
 8009d7e:	4770      	bx	lr

08009d80 <__retarget_lock_acquire_recursive>:
 8009d80:	4770      	bx	lr

08009d82 <__retarget_lock_release_recursive>:
 8009d82:	4770      	bx	lr

08009d84 <memmove>:
 8009d84:	4288      	cmp	r0, r1
 8009d86:	b510      	push	{r4, lr}
 8009d88:	eb01 0402 	add.w	r4, r1, r2
 8009d8c:	d902      	bls.n	8009d94 <memmove+0x10>
 8009d8e:	4284      	cmp	r4, r0
 8009d90:	4623      	mov	r3, r4
 8009d92:	d807      	bhi.n	8009da4 <memmove+0x20>
 8009d94:	1e43      	subs	r3, r0, #1
 8009d96:	42a1      	cmp	r1, r4
 8009d98:	d008      	beq.n	8009dac <memmove+0x28>
 8009d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009da2:	e7f8      	b.n	8009d96 <memmove+0x12>
 8009da4:	4402      	add	r2, r0
 8009da6:	4601      	mov	r1, r0
 8009da8:	428a      	cmp	r2, r1
 8009daa:	d100      	bne.n	8009dae <memmove+0x2a>
 8009dac:	bd10      	pop	{r4, pc}
 8009dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009db6:	e7f7      	b.n	8009da8 <memmove+0x24>

08009db8 <__malloc_lock>:
 8009db8:	4801      	ldr	r0, [pc, #4]	; (8009dc0 <__malloc_lock+0x8>)
 8009dba:	f7ff bfe1 	b.w	8009d80 <__retarget_lock_acquire_recursive>
 8009dbe:	bf00      	nop
 8009dc0:	20000cb8 	.word	0x20000cb8

08009dc4 <__malloc_unlock>:
 8009dc4:	4801      	ldr	r0, [pc, #4]	; (8009dcc <__malloc_unlock+0x8>)
 8009dc6:	f7ff bfdc 	b.w	8009d82 <__retarget_lock_release_recursive>
 8009dca:	bf00      	nop
 8009dcc:	20000cb8 	.word	0x20000cb8

08009dd0 <_realloc_r>:
 8009dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd4:	4680      	mov	r8, r0
 8009dd6:	4614      	mov	r4, r2
 8009dd8:	460e      	mov	r6, r1
 8009dda:	b921      	cbnz	r1, 8009de6 <_realloc_r+0x16>
 8009ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009de0:	4611      	mov	r1, r2
 8009de2:	f7fe bfbd 	b.w	8008d60 <_malloc_r>
 8009de6:	b92a      	cbnz	r2, 8009df4 <_realloc_r+0x24>
 8009de8:	f7fe ff4e 	bl	8008c88 <_free_r>
 8009dec:	4625      	mov	r5, r4
 8009dee:	4628      	mov	r0, r5
 8009df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df4:	f000 faa0 	bl	800a338 <_malloc_usable_size_r>
 8009df8:	4284      	cmp	r4, r0
 8009dfa:	4607      	mov	r7, r0
 8009dfc:	d802      	bhi.n	8009e04 <_realloc_r+0x34>
 8009dfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e02:	d812      	bhi.n	8009e2a <_realloc_r+0x5a>
 8009e04:	4621      	mov	r1, r4
 8009e06:	4640      	mov	r0, r8
 8009e08:	f7fe ffaa 	bl	8008d60 <_malloc_r>
 8009e0c:	4605      	mov	r5, r0
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d0ed      	beq.n	8009dee <_realloc_r+0x1e>
 8009e12:	42bc      	cmp	r4, r7
 8009e14:	4622      	mov	r2, r4
 8009e16:	4631      	mov	r1, r6
 8009e18:	bf28      	it	cs
 8009e1a:	463a      	movcs	r2, r7
 8009e1c:	f7fe fa4e 	bl	80082bc <memcpy>
 8009e20:	4631      	mov	r1, r6
 8009e22:	4640      	mov	r0, r8
 8009e24:	f7fe ff30 	bl	8008c88 <_free_r>
 8009e28:	e7e1      	b.n	8009dee <_realloc_r+0x1e>
 8009e2a:	4635      	mov	r5, r6
 8009e2c:	e7df      	b.n	8009dee <_realloc_r+0x1e>

08009e2e <__sfputc_r>:
 8009e2e:	6893      	ldr	r3, [r2, #8]
 8009e30:	3b01      	subs	r3, #1
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	b410      	push	{r4}
 8009e36:	6093      	str	r3, [r2, #8]
 8009e38:	da08      	bge.n	8009e4c <__sfputc_r+0x1e>
 8009e3a:	6994      	ldr	r4, [r2, #24]
 8009e3c:	42a3      	cmp	r3, r4
 8009e3e:	db01      	blt.n	8009e44 <__sfputc_r+0x16>
 8009e40:	290a      	cmp	r1, #10
 8009e42:	d103      	bne.n	8009e4c <__sfputc_r+0x1e>
 8009e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e48:	f000 b94a 	b.w	800a0e0 <__swbuf_r>
 8009e4c:	6813      	ldr	r3, [r2, #0]
 8009e4e:	1c58      	adds	r0, r3, #1
 8009e50:	6010      	str	r0, [r2, #0]
 8009e52:	7019      	strb	r1, [r3, #0]
 8009e54:	4608      	mov	r0, r1
 8009e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <__sfputs_r>:
 8009e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5e:	4606      	mov	r6, r0
 8009e60:	460f      	mov	r7, r1
 8009e62:	4614      	mov	r4, r2
 8009e64:	18d5      	adds	r5, r2, r3
 8009e66:	42ac      	cmp	r4, r5
 8009e68:	d101      	bne.n	8009e6e <__sfputs_r+0x12>
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	e007      	b.n	8009e7e <__sfputs_r+0x22>
 8009e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e72:	463a      	mov	r2, r7
 8009e74:	4630      	mov	r0, r6
 8009e76:	f7ff ffda 	bl	8009e2e <__sfputc_r>
 8009e7a:	1c43      	adds	r3, r0, #1
 8009e7c:	d1f3      	bne.n	8009e66 <__sfputs_r+0xa>
 8009e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e80 <_vfiprintf_r>:
 8009e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	460d      	mov	r5, r1
 8009e86:	b09d      	sub	sp, #116	; 0x74
 8009e88:	4614      	mov	r4, r2
 8009e8a:	4698      	mov	r8, r3
 8009e8c:	4606      	mov	r6, r0
 8009e8e:	b118      	cbz	r0, 8009e98 <_vfiprintf_r+0x18>
 8009e90:	6983      	ldr	r3, [r0, #24]
 8009e92:	b90b      	cbnz	r3, 8009e98 <_vfiprintf_r+0x18>
 8009e94:	f7ff fec4 	bl	8009c20 <__sinit>
 8009e98:	4b89      	ldr	r3, [pc, #548]	; (800a0c0 <_vfiprintf_r+0x240>)
 8009e9a:	429d      	cmp	r5, r3
 8009e9c:	d11b      	bne.n	8009ed6 <_vfiprintf_r+0x56>
 8009e9e:	6875      	ldr	r5, [r6, #4]
 8009ea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ea2:	07d9      	lsls	r1, r3, #31
 8009ea4:	d405      	bmi.n	8009eb2 <_vfiprintf_r+0x32>
 8009ea6:	89ab      	ldrh	r3, [r5, #12]
 8009ea8:	059a      	lsls	r2, r3, #22
 8009eaa:	d402      	bmi.n	8009eb2 <_vfiprintf_r+0x32>
 8009eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eae:	f7ff ff67 	bl	8009d80 <__retarget_lock_acquire_recursive>
 8009eb2:	89ab      	ldrh	r3, [r5, #12]
 8009eb4:	071b      	lsls	r3, r3, #28
 8009eb6:	d501      	bpl.n	8009ebc <_vfiprintf_r+0x3c>
 8009eb8:	692b      	ldr	r3, [r5, #16]
 8009eba:	b9eb      	cbnz	r3, 8009ef8 <_vfiprintf_r+0x78>
 8009ebc:	4629      	mov	r1, r5
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	f000 f960 	bl	800a184 <__swsetup_r>
 8009ec4:	b1c0      	cbz	r0, 8009ef8 <_vfiprintf_r+0x78>
 8009ec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ec8:	07dc      	lsls	r4, r3, #31
 8009eca:	d50e      	bpl.n	8009eea <_vfiprintf_r+0x6a>
 8009ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed0:	b01d      	add	sp, #116	; 0x74
 8009ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed6:	4b7b      	ldr	r3, [pc, #492]	; (800a0c4 <_vfiprintf_r+0x244>)
 8009ed8:	429d      	cmp	r5, r3
 8009eda:	d101      	bne.n	8009ee0 <_vfiprintf_r+0x60>
 8009edc:	68b5      	ldr	r5, [r6, #8]
 8009ede:	e7df      	b.n	8009ea0 <_vfiprintf_r+0x20>
 8009ee0:	4b79      	ldr	r3, [pc, #484]	; (800a0c8 <_vfiprintf_r+0x248>)
 8009ee2:	429d      	cmp	r5, r3
 8009ee4:	bf08      	it	eq
 8009ee6:	68f5      	ldreq	r5, [r6, #12]
 8009ee8:	e7da      	b.n	8009ea0 <_vfiprintf_r+0x20>
 8009eea:	89ab      	ldrh	r3, [r5, #12]
 8009eec:	0598      	lsls	r0, r3, #22
 8009eee:	d4ed      	bmi.n	8009ecc <_vfiprintf_r+0x4c>
 8009ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ef2:	f7ff ff46 	bl	8009d82 <__retarget_lock_release_recursive>
 8009ef6:	e7e9      	b.n	8009ecc <_vfiprintf_r+0x4c>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	9309      	str	r3, [sp, #36]	; 0x24
 8009efc:	2320      	movs	r3, #32
 8009efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f06:	2330      	movs	r3, #48	; 0x30
 8009f08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a0cc <_vfiprintf_r+0x24c>
 8009f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f10:	f04f 0901 	mov.w	r9, #1
 8009f14:	4623      	mov	r3, r4
 8009f16:	469a      	mov	sl, r3
 8009f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f1c:	b10a      	cbz	r2, 8009f22 <_vfiprintf_r+0xa2>
 8009f1e:	2a25      	cmp	r2, #37	; 0x25
 8009f20:	d1f9      	bne.n	8009f16 <_vfiprintf_r+0x96>
 8009f22:	ebba 0b04 	subs.w	fp, sl, r4
 8009f26:	d00b      	beq.n	8009f40 <_vfiprintf_r+0xc0>
 8009f28:	465b      	mov	r3, fp
 8009f2a:	4622      	mov	r2, r4
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f7ff ff94 	bl	8009e5c <__sfputs_r>
 8009f34:	3001      	adds	r0, #1
 8009f36:	f000 80aa 	beq.w	800a08e <_vfiprintf_r+0x20e>
 8009f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f3c:	445a      	add	r2, fp
 8009f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f40:	f89a 3000 	ldrb.w	r3, [sl]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 80a2 	beq.w	800a08e <_vfiprintf_r+0x20e>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f54:	f10a 0a01 	add.w	sl, sl, #1
 8009f58:	9304      	str	r3, [sp, #16]
 8009f5a:	9307      	str	r3, [sp, #28]
 8009f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f60:	931a      	str	r3, [sp, #104]	; 0x68
 8009f62:	4654      	mov	r4, sl
 8009f64:	2205      	movs	r2, #5
 8009f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f6a:	4858      	ldr	r0, [pc, #352]	; (800a0cc <_vfiprintf_r+0x24c>)
 8009f6c:	f7f6 f950 	bl	8000210 <memchr>
 8009f70:	9a04      	ldr	r2, [sp, #16]
 8009f72:	b9d8      	cbnz	r0, 8009fac <_vfiprintf_r+0x12c>
 8009f74:	06d1      	lsls	r1, r2, #27
 8009f76:	bf44      	itt	mi
 8009f78:	2320      	movmi	r3, #32
 8009f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f7e:	0713      	lsls	r3, r2, #28
 8009f80:	bf44      	itt	mi
 8009f82:	232b      	movmi	r3, #43	; 0x2b
 8009f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f88:	f89a 3000 	ldrb.w	r3, [sl]
 8009f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f8e:	d015      	beq.n	8009fbc <_vfiprintf_r+0x13c>
 8009f90:	9a07      	ldr	r2, [sp, #28]
 8009f92:	4654      	mov	r4, sl
 8009f94:	2000      	movs	r0, #0
 8009f96:	f04f 0c0a 	mov.w	ip, #10
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fa0:	3b30      	subs	r3, #48	; 0x30
 8009fa2:	2b09      	cmp	r3, #9
 8009fa4:	d94e      	bls.n	800a044 <_vfiprintf_r+0x1c4>
 8009fa6:	b1b0      	cbz	r0, 8009fd6 <_vfiprintf_r+0x156>
 8009fa8:	9207      	str	r2, [sp, #28]
 8009faa:	e014      	b.n	8009fd6 <_vfiprintf_r+0x156>
 8009fac:	eba0 0308 	sub.w	r3, r0, r8
 8009fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	9304      	str	r3, [sp, #16]
 8009fb8:	46a2      	mov	sl, r4
 8009fba:	e7d2      	b.n	8009f62 <_vfiprintf_r+0xe2>
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	1d19      	adds	r1, r3, #4
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	9103      	str	r1, [sp, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	bfbb      	ittet	lt
 8009fc8:	425b      	neglt	r3, r3
 8009fca:	f042 0202 	orrlt.w	r2, r2, #2
 8009fce:	9307      	strge	r3, [sp, #28]
 8009fd0:	9307      	strlt	r3, [sp, #28]
 8009fd2:	bfb8      	it	lt
 8009fd4:	9204      	strlt	r2, [sp, #16]
 8009fd6:	7823      	ldrb	r3, [r4, #0]
 8009fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8009fda:	d10c      	bne.n	8009ff6 <_vfiprintf_r+0x176>
 8009fdc:	7863      	ldrb	r3, [r4, #1]
 8009fde:	2b2a      	cmp	r3, #42	; 0x2a
 8009fe0:	d135      	bne.n	800a04e <_vfiprintf_r+0x1ce>
 8009fe2:	9b03      	ldr	r3, [sp, #12]
 8009fe4:	1d1a      	adds	r2, r3, #4
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	9203      	str	r2, [sp, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	bfb8      	it	lt
 8009fee:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ff2:	3402      	adds	r4, #2
 8009ff4:	9305      	str	r3, [sp, #20]
 8009ff6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0dc <_vfiprintf_r+0x25c>
 8009ffa:	7821      	ldrb	r1, [r4, #0]
 8009ffc:	2203      	movs	r2, #3
 8009ffe:	4650      	mov	r0, sl
 800a000:	f7f6 f906 	bl	8000210 <memchr>
 800a004:	b140      	cbz	r0, 800a018 <_vfiprintf_r+0x198>
 800a006:	2340      	movs	r3, #64	; 0x40
 800a008:	eba0 000a 	sub.w	r0, r0, sl
 800a00c:	fa03 f000 	lsl.w	r0, r3, r0
 800a010:	9b04      	ldr	r3, [sp, #16]
 800a012:	4303      	orrs	r3, r0
 800a014:	3401      	adds	r4, #1
 800a016:	9304      	str	r3, [sp, #16]
 800a018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01c:	482c      	ldr	r0, [pc, #176]	; (800a0d0 <_vfiprintf_r+0x250>)
 800a01e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a022:	2206      	movs	r2, #6
 800a024:	f7f6 f8f4 	bl	8000210 <memchr>
 800a028:	2800      	cmp	r0, #0
 800a02a:	d03f      	beq.n	800a0ac <_vfiprintf_r+0x22c>
 800a02c:	4b29      	ldr	r3, [pc, #164]	; (800a0d4 <_vfiprintf_r+0x254>)
 800a02e:	bb1b      	cbnz	r3, 800a078 <_vfiprintf_r+0x1f8>
 800a030:	9b03      	ldr	r3, [sp, #12]
 800a032:	3307      	adds	r3, #7
 800a034:	f023 0307 	bic.w	r3, r3, #7
 800a038:	3308      	adds	r3, #8
 800a03a:	9303      	str	r3, [sp, #12]
 800a03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a03e:	443b      	add	r3, r7
 800a040:	9309      	str	r3, [sp, #36]	; 0x24
 800a042:	e767      	b.n	8009f14 <_vfiprintf_r+0x94>
 800a044:	fb0c 3202 	mla	r2, ip, r2, r3
 800a048:	460c      	mov	r4, r1
 800a04a:	2001      	movs	r0, #1
 800a04c:	e7a5      	b.n	8009f9a <_vfiprintf_r+0x11a>
 800a04e:	2300      	movs	r3, #0
 800a050:	3401      	adds	r4, #1
 800a052:	9305      	str	r3, [sp, #20]
 800a054:	4619      	mov	r1, r3
 800a056:	f04f 0c0a 	mov.w	ip, #10
 800a05a:	4620      	mov	r0, r4
 800a05c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a060:	3a30      	subs	r2, #48	; 0x30
 800a062:	2a09      	cmp	r2, #9
 800a064:	d903      	bls.n	800a06e <_vfiprintf_r+0x1ee>
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0c5      	beq.n	8009ff6 <_vfiprintf_r+0x176>
 800a06a:	9105      	str	r1, [sp, #20]
 800a06c:	e7c3      	b.n	8009ff6 <_vfiprintf_r+0x176>
 800a06e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a072:	4604      	mov	r4, r0
 800a074:	2301      	movs	r3, #1
 800a076:	e7f0      	b.n	800a05a <_vfiprintf_r+0x1da>
 800a078:	ab03      	add	r3, sp, #12
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	462a      	mov	r2, r5
 800a07e:	4b16      	ldr	r3, [pc, #88]	; (800a0d8 <_vfiprintf_r+0x258>)
 800a080:	a904      	add	r1, sp, #16
 800a082:	4630      	mov	r0, r6
 800a084:	f7fb f9be 	bl	8005404 <_printf_float>
 800a088:	4607      	mov	r7, r0
 800a08a:	1c78      	adds	r0, r7, #1
 800a08c:	d1d6      	bne.n	800a03c <_vfiprintf_r+0x1bc>
 800a08e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a090:	07d9      	lsls	r1, r3, #31
 800a092:	d405      	bmi.n	800a0a0 <_vfiprintf_r+0x220>
 800a094:	89ab      	ldrh	r3, [r5, #12]
 800a096:	059a      	lsls	r2, r3, #22
 800a098:	d402      	bmi.n	800a0a0 <_vfiprintf_r+0x220>
 800a09a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a09c:	f7ff fe71 	bl	8009d82 <__retarget_lock_release_recursive>
 800a0a0:	89ab      	ldrh	r3, [r5, #12]
 800a0a2:	065b      	lsls	r3, r3, #25
 800a0a4:	f53f af12 	bmi.w	8009ecc <_vfiprintf_r+0x4c>
 800a0a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0aa:	e711      	b.n	8009ed0 <_vfiprintf_r+0x50>
 800a0ac:	ab03      	add	r3, sp, #12
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	462a      	mov	r2, r5
 800a0b2:	4b09      	ldr	r3, [pc, #36]	; (800a0d8 <_vfiprintf_r+0x258>)
 800a0b4:	a904      	add	r1, sp, #16
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	f7fb fc48 	bl	800594c <_printf_i>
 800a0bc:	e7e4      	b.n	800a088 <_vfiprintf_r+0x208>
 800a0be:	bf00      	nop
 800a0c0:	0800cf74 	.word	0x0800cf74
 800a0c4:	0800cf94 	.word	0x0800cf94
 800a0c8:	0800cf54 	.word	0x0800cf54
 800a0cc:	0800ceec 	.word	0x0800ceec
 800a0d0:	0800cef6 	.word	0x0800cef6
 800a0d4:	08005405 	.word	0x08005405
 800a0d8:	08009e5d 	.word	0x08009e5d
 800a0dc:	0800cef2 	.word	0x0800cef2

0800a0e0 <__swbuf_r>:
 800a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e2:	460e      	mov	r6, r1
 800a0e4:	4614      	mov	r4, r2
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	b118      	cbz	r0, 800a0f2 <__swbuf_r+0x12>
 800a0ea:	6983      	ldr	r3, [r0, #24]
 800a0ec:	b90b      	cbnz	r3, 800a0f2 <__swbuf_r+0x12>
 800a0ee:	f7ff fd97 	bl	8009c20 <__sinit>
 800a0f2:	4b21      	ldr	r3, [pc, #132]	; (800a178 <__swbuf_r+0x98>)
 800a0f4:	429c      	cmp	r4, r3
 800a0f6:	d12b      	bne.n	800a150 <__swbuf_r+0x70>
 800a0f8:	686c      	ldr	r4, [r5, #4]
 800a0fa:	69a3      	ldr	r3, [r4, #24]
 800a0fc:	60a3      	str	r3, [r4, #8]
 800a0fe:	89a3      	ldrh	r3, [r4, #12]
 800a100:	071a      	lsls	r2, r3, #28
 800a102:	d52f      	bpl.n	800a164 <__swbuf_r+0x84>
 800a104:	6923      	ldr	r3, [r4, #16]
 800a106:	b36b      	cbz	r3, 800a164 <__swbuf_r+0x84>
 800a108:	6923      	ldr	r3, [r4, #16]
 800a10a:	6820      	ldr	r0, [r4, #0]
 800a10c:	1ac0      	subs	r0, r0, r3
 800a10e:	6963      	ldr	r3, [r4, #20]
 800a110:	b2f6      	uxtb	r6, r6
 800a112:	4283      	cmp	r3, r0
 800a114:	4637      	mov	r7, r6
 800a116:	dc04      	bgt.n	800a122 <__swbuf_r+0x42>
 800a118:	4621      	mov	r1, r4
 800a11a:	4628      	mov	r0, r5
 800a11c:	f7ff fcec 	bl	8009af8 <_fflush_r>
 800a120:	bb30      	cbnz	r0, 800a170 <__swbuf_r+0x90>
 800a122:	68a3      	ldr	r3, [r4, #8]
 800a124:	3b01      	subs	r3, #1
 800a126:	60a3      	str	r3, [r4, #8]
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	1c5a      	adds	r2, r3, #1
 800a12c:	6022      	str	r2, [r4, #0]
 800a12e:	701e      	strb	r6, [r3, #0]
 800a130:	6963      	ldr	r3, [r4, #20]
 800a132:	3001      	adds	r0, #1
 800a134:	4283      	cmp	r3, r0
 800a136:	d004      	beq.n	800a142 <__swbuf_r+0x62>
 800a138:	89a3      	ldrh	r3, [r4, #12]
 800a13a:	07db      	lsls	r3, r3, #31
 800a13c:	d506      	bpl.n	800a14c <__swbuf_r+0x6c>
 800a13e:	2e0a      	cmp	r6, #10
 800a140:	d104      	bne.n	800a14c <__swbuf_r+0x6c>
 800a142:	4621      	mov	r1, r4
 800a144:	4628      	mov	r0, r5
 800a146:	f7ff fcd7 	bl	8009af8 <_fflush_r>
 800a14a:	b988      	cbnz	r0, 800a170 <__swbuf_r+0x90>
 800a14c:	4638      	mov	r0, r7
 800a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a150:	4b0a      	ldr	r3, [pc, #40]	; (800a17c <__swbuf_r+0x9c>)
 800a152:	429c      	cmp	r4, r3
 800a154:	d101      	bne.n	800a15a <__swbuf_r+0x7a>
 800a156:	68ac      	ldr	r4, [r5, #8]
 800a158:	e7cf      	b.n	800a0fa <__swbuf_r+0x1a>
 800a15a:	4b09      	ldr	r3, [pc, #36]	; (800a180 <__swbuf_r+0xa0>)
 800a15c:	429c      	cmp	r4, r3
 800a15e:	bf08      	it	eq
 800a160:	68ec      	ldreq	r4, [r5, #12]
 800a162:	e7ca      	b.n	800a0fa <__swbuf_r+0x1a>
 800a164:	4621      	mov	r1, r4
 800a166:	4628      	mov	r0, r5
 800a168:	f000 f80c 	bl	800a184 <__swsetup_r>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d0cb      	beq.n	800a108 <__swbuf_r+0x28>
 800a170:	f04f 37ff 	mov.w	r7, #4294967295
 800a174:	e7ea      	b.n	800a14c <__swbuf_r+0x6c>
 800a176:	bf00      	nop
 800a178:	0800cf74 	.word	0x0800cf74
 800a17c:	0800cf94 	.word	0x0800cf94
 800a180:	0800cf54 	.word	0x0800cf54

0800a184 <__swsetup_r>:
 800a184:	4b32      	ldr	r3, [pc, #200]	; (800a250 <__swsetup_r+0xcc>)
 800a186:	b570      	push	{r4, r5, r6, lr}
 800a188:	681d      	ldr	r5, [r3, #0]
 800a18a:	4606      	mov	r6, r0
 800a18c:	460c      	mov	r4, r1
 800a18e:	b125      	cbz	r5, 800a19a <__swsetup_r+0x16>
 800a190:	69ab      	ldr	r3, [r5, #24]
 800a192:	b913      	cbnz	r3, 800a19a <__swsetup_r+0x16>
 800a194:	4628      	mov	r0, r5
 800a196:	f7ff fd43 	bl	8009c20 <__sinit>
 800a19a:	4b2e      	ldr	r3, [pc, #184]	; (800a254 <__swsetup_r+0xd0>)
 800a19c:	429c      	cmp	r4, r3
 800a19e:	d10f      	bne.n	800a1c0 <__swsetup_r+0x3c>
 800a1a0:	686c      	ldr	r4, [r5, #4]
 800a1a2:	89a3      	ldrh	r3, [r4, #12]
 800a1a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1a8:	0719      	lsls	r1, r3, #28
 800a1aa:	d42c      	bmi.n	800a206 <__swsetup_r+0x82>
 800a1ac:	06dd      	lsls	r5, r3, #27
 800a1ae:	d411      	bmi.n	800a1d4 <__swsetup_r+0x50>
 800a1b0:	2309      	movs	r3, #9
 800a1b2:	6033      	str	r3, [r6, #0]
 800a1b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1b8:	81a3      	strh	r3, [r4, #12]
 800a1ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a1be:	e03e      	b.n	800a23e <__swsetup_r+0xba>
 800a1c0:	4b25      	ldr	r3, [pc, #148]	; (800a258 <__swsetup_r+0xd4>)
 800a1c2:	429c      	cmp	r4, r3
 800a1c4:	d101      	bne.n	800a1ca <__swsetup_r+0x46>
 800a1c6:	68ac      	ldr	r4, [r5, #8]
 800a1c8:	e7eb      	b.n	800a1a2 <__swsetup_r+0x1e>
 800a1ca:	4b24      	ldr	r3, [pc, #144]	; (800a25c <__swsetup_r+0xd8>)
 800a1cc:	429c      	cmp	r4, r3
 800a1ce:	bf08      	it	eq
 800a1d0:	68ec      	ldreq	r4, [r5, #12]
 800a1d2:	e7e6      	b.n	800a1a2 <__swsetup_r+0x1e>
 800a1d4:	0758      	lsls	r0, r3, #29
 800a1d6:	d512      	bpl.n	800a1fe <__swsetup_r+0x7a>
 800a1d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1da:	b141      	cbz	r1, 800a1ee <__swsetup_r+0x6a>
 800a1dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1e0:	4299      	cmp	r1, r3
 800a1e2:	d002      	beq.n	800a1ea <__swsetup_r+0x66>
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f7fe fd4f 	bl	8008c88 <_free_r>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	6363      	str	r3, [r4, #52]	; 0x34
 800a1ee:	89a3      	ldrh	r3, [r4, #12]
 800a1f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1f4:	81a3      	strh	r3, [r4, #12]
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	6063      	str	r3, [r4, #4]
 800a1fa:	6923      	ldr	r3, [r4, #16]
 800a1fc:	6023      	str	r3, [r4, #0]
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	f043 0308 	orr.w	r3, r3, #8
 800a204:	81a3      	strh	r3, [r4, #12]
 800a206:	6923      	ldr	r3, [r4, #16]
 800a208:	b94b      	cbnz	r3, 800a21e <__swsetup_r+0x9a>
 800a20a:	89a3      	ldrh	r3, [r4, #12]
 800a20c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a214:	d003      	beq.n	800a21e <__swsetup_r+0x9a>
 800a216:	4621      	mov	r1, r4
 800a218:	4630      	mov	r0, r6
 800a21a:	f000 f84d 	bl	800a2b8 <__smakebuf_r>
 800a21e:	89a0      	ldrh	r0, [r4, #12]
 800a220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a224:	f010 0301 	ands.w	r3, r0, #1
 800a228:	d00a      	beq.n	800a240 <__swsetup_r+0xbc>
 800a22a:	2300      	movs	r3, #0
 800a22c:	60a3      	str	r3, [r4, #8]
 800a22e:	6963      	ldr	r3, [r4, #20]
 800a230:	425b      	negs	r3, r3
 800a232:	61a3      	str	r3, [r4, #24]
 800a234:	6923      	ldr	r3, [r4, #16]
 800a236:	b943      	cbnz	r3, 800a24a <__swsetup_r+0xc6>
 800a238:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a23c:	d1ba      	bne.n	800a1b4 <__swsetup_r+0x30>
 800a23e:	bd70      	pop	{r4, r5, r6, pc}
 800a240:	0781      	lsls	r1, r0, #30
 800a242:	bf58      	it	pl
 800a244:	6963      	ldrpl	r3, [r4, #20]
 800a246:	60a3      	str	r3, [r4, #8]
 800a248:	e7f4      	b.n	800a234 <__swsetup_r+0xb0>
 800a24a:	2000      	movs	r0, #0
 800a24c:	e7f7      	b.n	800a23e <__swsetup_r+0xba>
 800a24e:	bf00      	nop
 800a250:	20000010 	.word	0x20000010
 800a254:	0800cf74 	.word	0x0800cf74
 800a258:	0800cf94 	.word	0x0800cf94
 800a25c:	0800cf54 	.word	0x0800cf54

0800a260 <abort>:
 800a260:	b508      	push	{r3, lr}
 800a262:	2006      	movs	r0, #6
 800a264:	f000 f898 	bl	800a398 <raise>
 800a268:	2001      	movs	r0, #1
 800a26a:	f7f8 fade 	bl	800282a <_exit>

0800a26e <__swhatbuf_r>:
 800a26e:	b570      	push	{r4, r5, r6, lr}
 800a270:	460e      	mov	r6, r1
 800a272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a276:	2900      	cmp	r1, #0
 800a278:	b096      	sub	sp, #88	; 0x58
 800a27a:	4614      	mov	r4, r2
 800a27c:	461d      	mov	r5, r3
 800a27e:	da08      	bge.n	800a292 <__swhatbuf_r+0x24>
 800a280:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	602a      	str	r2, [r5, #0]
 800a288:	061a      	lsls	r2, r3, #24
 800a28a:	d410      	bmi.n	800a2ae <__swhatbuf_r+0x40>
 800a28c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a290:	e00e      	b.n	800a2b0 <__swhatbuf_r+0x42>
 800a292:	466a      	mov	r2, sp
 800a294:	f000 f89c 	bl	800a3d0 <_fstat_r>
 800a298:	2800      	cmp	r0, #0
 800a29a:	dbf1      	blt.n	800a280 <__swhatbuf_r+0x12>
 800a29c:	9a01      	ldr	r2, [sp, #4]
 800a29e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a2a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a2a6:	425a      	negs	r2, r3
 800a2a8:	415a      	adcs	r2, r3
 800a2aa:	602a      	str	r2, [r5, #0]
 800a2ac:	e7ee      	b.n	800a28c <__swhatbuf_r+0x1e>
 800a2ae:	2340      	movs	r3, #64	; 0x40
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	6023      	str	r3, [r4, #0]
 800a2b4:	b016      	add	sp, #88	; 0x58
 800a2b6:	bd70      	pop	{r4, r5, r6, pc}

0800a2b8 <__smakebuf_r>:
 800a2b8:	898b      	ldrh	r3, [r1, #12]
 800a2ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2bc:	079d      	lsls	r5, r3, #30
 800a2be:	4606      	mov	r6, r0
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	d507      	bpl.n	800a2d4 <__smakebuf_r+0x1c>
 800a2c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	6123      	str	r3, [r4, #16]
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	6163      	str	r3, [r4, #20]
 800a2d0:	b002      	add	sp, #8
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
 800a2d4:	ab01      	add	r3, sp, #4
 800a2d6:	466a      	mov	r2, sp
 800a2d8:	f7ff ffc9 	bl	800a26e <__swhatbuf_r>
 800a2dc:	9900      	ldr	r1, [sp, #0]
 800a2de:	4605      	mov	r5, r0
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	f7fe fd3d 	bl	8008d60 <_malloc_r>
 800a2e6:	b948      	cbnz	r0, 800a2fc <__smakebuf_r+0x44>
 800a2e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ec:	059a      	lsls	r2, r3, #22
 800a2ee:	d4ef      	bmi.n	800a2d0 <__smakebuf_r+0x18>
 800a2f0:	f023 0303 	bic.w	r3, r3, #3
 800a2f4:	f043 0302 	orr.w	r3, r3, #2
 800a2f8:	81a3      	strh	r3, [r4, #12]
 800a2fa:	e7e3      	b.n	800a2c4 <__smakebuf_r+0xc>
 800a2fc:	4b0d      	ldr	r3, [pc, #52]	; (800a334 <__smakebuf_r+0x7c>)
 800a2fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	6020      	str	r0, [r4, #0]
 800a304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a308:	81a3      	strh	r3, [r4, #12]
 800a30a:	9b00      	ldr	r3, [sp, #0]
 800a30c:	6163      	str	r3, [r4, #20]
 800a30e:	9b01      	ldr	r3, [sp, #4]
 800a310:	6120      	str	r0, [r4, #16]
 800a312:	b15b      	cbz	r3, 800a32c <__smakebuf_r+0x74>
 800a314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a318:	4630      	mov	r0, r6
 800a31a:	f000 f86b 	bl	800a3f4 <_isatty_r>
 800a31e:	b128      	cbz	r0, 800a32c <__smakebuf_r+0x74>
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	f023 0303 	bic.w	r3, r3, #3
 800a326:	f043 0301 	orr.w	r3, r3, #1
 800a32a:	81a3      	strh	r3, [r4, #12]
 800a32c:	89a0      	ldrh	r0, [r4, #12]
 800a32e:	4305      	orrs	r5, r0
 800a330:	81a5      	strh	r5, [r4, #12]
 800a332:	e7cd      	b.n	800a2d0 <__smakebuf_r+0x18>
 800a334:	08009bb9 	.word	0x08009bb9

0800a338 <_malloc_usable_size_r>:
 800a338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a33c:	1f18      	subs	r0, r3, #4
 800a33e:	2b00      	cmp	r3, #0
 800a340:	bfbc      	itt	lt
 800a342:	580b      	ldrlt	r3, [r1, r0]
 800a344:	18c0      	addlt	r0, r0, r3
 800a346:	4770      	bx	lr

0800a348 <_raise_r>:
 800a348:	291f      	cmp	r1, #31
 800a34a:	b538      	push	{r3, r4, r5, lr}
 800a34c:	4604      	mov	r4, r0
 800a34e:	460d      	mov	r5, r1
 800a350:	d904      	bls.n	800a35c <_raise_r+0x14>
 800a352:	2316      	movs	r3, #22
 800a354:	6003      	str	r3, [r0, #0]
 800a356:	f04f 30ff 	mov.w	r0, #4294967295
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a35e:	b112      	cbz	r2, 800a366 <_raise_r+0x1e>
 800a360:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a364:	b94b      	cbnz	r3, 800a37a <_raise_r+0x32>
 800a366:	4620      	mov	r0, r4
 800a368:	f000 f830 	bl	800a3cc <_getpid_r>
 800a36c:	462a      	mov	r2, r5
 800a36e:	4601      	mov	r1, r0
 800a370:	4620      	mov	r0, r4
 800a372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a376:	f000 b817 	b.w	800a3a8 <_kill_r>
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d00a      	beq.n	800a394 <_raise_r+0x4c>
 800a37e:	1c59      	adds	r1, r3, #1
 800a380:	d103      	bne.n	800a38a <_raise_r+0x42>
 800a382:	2316      	movs	r3, #22
 800a384:	6003      	str	r3, [r0, #0]
 800a386:	2001      	movs	r0, #1
 800a388:	e7e7      	b.n	800a35a <_raise_r+0x12>
 800a38a:	2400      	movs	r4, #0
 800a38c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a390:	4628      	mov	r0, r5
 800a392:	4798      	blx	r3
 800a394:	2000      	movs	r0, #0
 800a396:	e7e0      	b.n	800a35a <_raise_r+0x12>

0800a398 <raise>:
 800a398:	4b02      	ldr	r3, [pc, #8]	; (800a3a4 <raise+0xc>)
 800a39a:	4601      	mov	r1, r0
 800a39c:	6818      	ldr	r0, [r3, #0]
 800a39e:	f7ff bfd3 	b.w	800a348 <_raise_r>
 800a3a2:	bf00      	nop
 800a3a4:	20000010 	.word	0x20000010

0800a3a8 <_kill_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4d07      	ldr	r5, [pc, #28]	; (800a3c8 <_kill_r+0x20>)
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	4608      	mov	r0, r1
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	602b      	str	r3, [r5, #0]
 800a3b6:	f7f8 fa28 	bl	800280a <_kill>
 800a3ba:	1c43      	adds	r3, r0, #1
 800a3bc:	d102      	bne.n	800a3c4 <_kill_r+0x1c>
 800a3be:	682b      	ldr	r3, [r5, #0]
 800a3c0:	b103      	cbz	r3, 800a3c4 <_kill_r+0x1c>
 800a3c2:	6023      	str	r3, [r4, #0]
 800a3c4:	bd38      	pop	{r3, r4, r5, pc}
 800a3c6:	bf00      	nop
 800a3c8:	20000cb4 	.word	0x20000cb4

0800a3cc <_getpid_r>:
 800a3cc:	f7f8 ba15 	b.w	80027fa <_getpid>

0800a3d0 <_fstat_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d07      	ldr	r5, [pc, #28]	; (800a3f0 <_fstat_r+0x20>)
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	4608      	mov	r0, r1
 800a3da:	4611      	mov	r1, r2
 800a3dc:	602b      	str	r3, [r5, #0]
 800a3de:	f7f8 fa73 	bl	80028c8 <_fstat>
 800a3e2:	1c43      	adds	r3, r0, #1
 800a3e4:	d102      	bne.n	800a3ec <_fstat_r+0x1c>
 800a3e6:	682b      	ldr	r3, [r5, #0]
 800a3e8:	b103      	cbz	r3, 800a3ec <_fstat_r+0x1c>
 800a3ea:	6023      	str	r3, [r4, #0]
 800a3ec:	bd38      	pop	{r3, r4, r5, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000cb4 	.word	0x20000cb4

0800a3f4 <_isatty_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4d06      	ldr	r5, [pc, #24]	; (800a410 <_isatty_r+0x1c>)
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	602b      	str	r3, [r5, #0]
 800a400:	f7f8 fa72 	bl	80028e8 <_isatty>
 800a404:	1c43      	adds	r3, r0, #1
 800a406:	d102      	bne.n	800a40e <_isatty_r+0x1a>
 800a408:	682b      	ldr	r3, [r5, #0]
 800a40a:	b103      	cbz	r3, 800a40e <_isatty_r+0x1a>
 800a40c:	6023      	str	r3, [r4, #0]
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	20000cb4 	.word	0x20000cb4
 800a414:	00000000 	.word	0x00000000

0800a418 <cos>:
 800a418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a41a:	ec53 2b10 	vmov	r2, r3, d0
 800a41e:	4826      	ldr	r0, [pc, #152]	; (800a4b8 <cos+0xa0>)
 800a420:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a424:	4281      	cmp	r1, r0
 800a426:	dc06      	bgt.n	800a436 <cos+0x1e>
 800a428:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a4b0 <cos+0x98>
 800a42c:	b005      	add	sp, #20
 800a42e:	f85d eb04 	ldr.w	lr, [sp], #4
 800a432:	f001 b9cd 	b.w	800b7d0 <__kernel_cos>
 800a436:	4821      	ldr	r0, [pc, #132]	; (800a4bc <cos+0xa4>)
 800a438:	4281      	cmp	r1, r0
 800a43a:	dd09      	ble.n	800a450 <cos+0x38>
 800a43c:	ee10 0a10 	vmov	r0, s0
 800a440:	4619      	mov	r1, r3
 800a442:	f7f5 ff39 	bl	80002b8 <__aeabi_dsub>
 800a446:	ec41 0b10 	vmov	d0, r0, r1
 800a44a:	b005      	add	sp, #20
 800a44c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a450:	4668      	mov	r0, sp
 800a452:	f000 fefd 	bl	800b250 <__ieee754_rem_pio2>
 800a456:	f000 0003 	and.w	r0, r0, #3
 800a45a:	2801      	cmp	r0, #1
 800a45c:	d00b      	beq.n	800a476 <cos+0x5e>
 800a45e:	2802      	cmp	r0, #2
 800a460:	d016      	beq.n	800a490 <cos+0x78>
 800a462:	b9e0      	cbnz	r0, 800a49e <cos+0x86>
 800a464:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a468:	ed9d 0b00 	vldr	d0, [sp]
 800a46c:	f001 f9b0 	bl	800b7d0 <__kernel_cos>
 800a470:	ec51 0b10 	vmov	r0, r1, d0
 800a474:	e7e7      	b.n	800a446 <cos+0x2e>
 800a476:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a47a:	ed9d 0b00 	vldr	d0, [sp]
 800a47e:	f001 fdbf 	bl	800c000 <__kernel_sin>
 800a482:	ec53 2b10 	vmov	r2, r3, d0
 800a486:	ee10 0a10 	vmov	r0, s0
 800a48a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a48e:	e7da      	b.n	800a446 <cos+0x2e>
 800a490:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a494:	ed9d 0b00 	vldr	d0, [sp]
 800a498:	f001 f99a 	bl	800b7d0 <__kernel_cos>
 800a49c:	e7f1      	b.n	800a482 <cos+0x6a>
 800a49e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4a2:	ed9d 0b00 	vldr	d0, [sp]
 800a4a6:	2001      	movs	r0, #1
 800a4a8:	f001 fdaa 	bl	800c000 <__kernel_sin>
 800a4ac:	e7e0      	b.n	800a470 <cos+0x58>
 800a4ae:	bf00      	nop
	...
 800a4b8:	3fe921fb 	.word	0x3fe921fb
 800a4bc:	7fefffff 	.word	0x7fefffff

0800a4c0 <sin>:
 800a4c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4c2:	ec53 2b10 	vmov	r2, r3, d0
 800a4c6:	4828      	ldr	r0, [pc, #160]	; (800a568 <sin+0xa8>)
 800a4c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a4cc:	4281      	cmp	r1, r0
 800a4ce:	dc07      	bgt.n	800a4e0 <sin+0x20>
 800a4d0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a560 <sin+0xa0>
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	b005      	add	sp, #20
 800a4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4dc:	f001 bd90 	b.w	800c000 <__kernel_sin>
 800a4e0:	4822      	ldr	r0, [pc, #136]	; (800a56c <sin+0xac>)
 800a4e2:	4281      	cmp	r1, r0
 800a4e4:	dd09      	ble.n	800a4fa <sin+0x3a>
 800a4e6:	ee10 0a10 	vmov	r0, s0
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	f7f5 fee4 	bl	80002b8 <__aeabi_dsub>
 800a4f0:	ec41 0b10 	vmov	d0, r0, r1
 800a4f4:	b005      	add	sp, #20
 800a4f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4fa:	4668      	mov	r0, sp
 800a4fc:	f000 fea8 	bl	800b250 <__ieee754_rem_pio2>
 800a500:	f000 0003 	and.w	r0, r0, #3
 800a504:	2801      	cmp	r0, #1
 800a506:	d00c      	beq.n	800a522 <sin+0x62>
 800a508:	2802      	cmp	r0, #2
 800a50a:	d011      	beq.n	800a530 <sin+0x70>
 800a50c:	b9f0      	cbnz	r0, 800a54c <sin+0x8c>
 800a50e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a512:	ed9d 0b00 	vldr	d0, [sp]
 800a516:	2001      	movs	r0, #1
 800a518:	f001 fd72 	bl	800c000 <__kernel_sin>
 800a51c:	ec51 0b10 	vmov	r0, r1, d0
 800a520:	e7e6      	b.n	800a4f0 <sin+0x30>
 800a522:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a526:	ed9d 0b00 	vldr	d0, [sp]
 800a52a:	f001 f951 	bl	800b7d0 <__kernel_cos>
 800a52e:	e7f5      	b.n	800a51c <sin+0x5c>
 800a530:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a534:	ed9d 0b00 	vldr	d0, [sp]
 800a538:	2001      	movs	r0, #1
 800a53a:	f001 fd61 	bl	800c000 <__kernel_sin>
 800a53e:	ec53 2b10 	vmov	r2, r3, d0
 800a542:	ee10 0a10 	vmov	r0, s0
 800a546:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a54a:	e7d1      	b.n	800a4f0 <sin+0x30>
 800a54c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a550:	ed9d 0b00 	vldr	d0, [sp]
 800a554:	f001 f93c 	bl	800b7d0 <__kernel_cos>
 800a558:	e7f1      	b.n	800a53e <sin+0x7e>
 800a55a:	bf00      	nop
 800a55c:	f3af 8000 	nop.w
	...
 800a568:	3fe921fb 	.word	0x3fe921fb
 800a56c:	7fefffff 	.word	0x7fefffff

0800a570 <atan2>:
 800a570:	f000 b872 	b.w	800a658 <__ieee754_atan2>

0800a574 <pow>:
 800a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a576:	ed2d 8b02 	vpush	{d8}
 800a57a:	eeb0 8a40 	vmov.f32	s16, s0
 800a57e:	eef0 8a60 	vmov.f32	s17, s1
 800a582:	ec55 4b11 	vmov	r4, r5, d1
 800a586:	f000 f933 	bl	800a7f0 <__ieee754_pow>
 800a58a:	4622      	mov	r2, r4
 800a58c:	462b      	mov	r3, r5
 800a58e:	4620      	mov	r0, r4
 800a590:	4629      	mov	r1, r5
 800a592:	ec57 6b10 	vmov	r6, r7, d0
 800a596:	f7f6 fae1 	bl	8000b5c <__aeabi_dcmpun>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d13b      	bne.n	800a616 <pow+0xa2>
 800a59e:	ec51 0b18 	vmov	r0, r1, d8
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	f7f6 faa7 	bl	8000af8 <__aeabi_dcmpeq>
 800a5aa:	b1b8      	cbz	r0, 800a5dc <pow+0x68>
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	f7f6 faa0 	bl	8000af8 <__aeabi_dcmpeq>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d146      	bne.n	800a64a <pow+0xd6>
 800a5bc:	ec45 4b10 	vmov	d0, r4, r5
 800a5c0:	f001 ffb7 	bl	800c532 <finite>
 800a5c4:	b338      	cbz	r0, 800a616 <pow+0xa2>
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	f7f6 fa9d 	bl	8000b0c <__aeabi_dcmplt>
 800a5d2:	b300      	cbz	r0, 800a616 <pow+0xa2>
 800a5d4:	f7fa fe44 	bl	8005260 <__errno>
 800a5d8:	2322      	movs	r3, #34	; 0x22
 800a5da:	e01b      	b.n	800a614 <pow+0xa0>
 800a5dc:	ec47 6b10 	vmov	d0, r6, r7
 800a5e0:	f001 ffa7 	bl	800c532 <finite>
 800a5e4:	b9e0      	cbnz	r0, 800a620 <pow+0xac>
 800a5e6:	eeb0 0a48 	vmov.f32	s0, s16
 800a5ea:	eef0 0a68 	vmov.f32	s1, s17
 800a5ee:	f001 ffa0 	bl	800c532 <finite>
 800a5f2:	b1a8      	cbz	r0, 800a620 <pow+0xac>
 800a5f4:	ec45 4b10 	vmov	d0, r4, r5
 800a5f8:	f001 ff9b 	bl	800c532 <finite>
 800a5fc:	b180      	cbz	r0, 800a620 <pow+0xac>
 800a5fe:	4632      	mov	r2, r6
 800a600:	463b      	mov	r3, r7
 800a602:	4630      	mov	r0, r6
 800a604:	4639      	mov	r1, r7
 800a606:	f7f6 faa9 	bl	8000b5c <__aeabi_dcmpun>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d0e2      	beq.n	800a5d4 <pow+0x60>
 800a60e:	f7fa fe27 	bl	8005260 <__errno>
 800a612:	2321      	movs	r3, #33	; 0x21
 800a614:	6003      	str	r3, [r0, #0]
 800a616:	ecbd 8b02 	vpop	{d8}
 800a61a:	ec47 6b10 	vmov	d0, r6, r7
 800a61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a620:	2200      	movs	r2, #0
 800a622:	2300      	movs	r3, #0
 800a624:	4630      	mov	r0, r6
 800a626:	4639      	mov	r1, r7
 800a628:	f7f6 fa66 	bl	8000af8 <__aeabi_dcmpeq>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d0f2      	beq.n	800a616 <pow+0xa2>
 800a630:	eeb0 0a48 	vmov.f32	s0, s16
 800a634:	eef0 0a68 	vmov.f32	s1, s17
 800a638:	f001 ff7b 	bl	800c532 <finite>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d0ea      	beq.n	800a616 <pow+0xa2>
 800a640:	ec45 4b10 	vmov	d0, r4, r5
 800a644:	f001 ff75 	bl	800c532 <finite>
 800a648:	e7c3      	b.n	800a5d2 <pow+0x5e>
 800a64a:	4f01      	ldr	r7, [pc, #4]	; (800a650 <pow+0xdc>)
 800a64c:	2600      	movs	r6, #0
 800a64e:	e7e2      	b.n	800a616 <pow+0xa2>
 800a650:	3ff00000 	.word	0x3ff00000
 800a654:	00000000 	.word	0x00000000

0800a658 <__ieee754_atan2>:
 800a658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a65c:	ec57 6b11 	vmov	r6, r7, d1
 800a660:	4273      	negs	r3, r6
 800a662:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a7e8 <__ieee754_atan2+0x190>
 800a666:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a66a:	4333      	orrs	r3, r6
 800a66c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a670:	4573      	cmp	r3, lr
 800a672:	ec51 0b10 	vmov	r0, r1, d0
 800a676:	ee11 8a10 	vmov	r8, s2
 800a67a:	d80a      	bhi.n	800a692 <__ieee754_atan2+0x3a>
 800a67c:	4244      	negs	r4, r0
 800a67e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a682:	4304      	orrs	r4, r0
 800a684:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a688:	4574      	cmp	r4, lr
 800a68a:	ee10 9a10 	vmov	r9, s0
 800a68e:	468c      	mov	ip, r1
 800a690:	d907      	bls.n	800a6a2 <__ieee754_atan2+0x4a>
 800a692:	4632      	mov	r2, r6
 800a694:	463b      	mov	r3, r7
 800a696:	f7f5 fe11 	bl	80002bc <__adddf3>
 800a69a:	ec41 0b10 	vmov	d0, r0, r1
 800a69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6a2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a6a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a6aa:	4334      	orrs	r4, r6
 800a6ac:	d103      	bne.n	800a6b6 <__ieee754_atan2+0x5e>
 800a6ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6b2:	f001 bd95 	b.w	800c1e0 <atan>
 800a6b6:	17bc      	asrs	r4, r7, #30
 800a6b8:	f004 0402 	and.w	r4, r4, #2
 800a6bc:	ea53 0909 	orrs.w	r9, r3, r9
 800a6c0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a6c4:	d107      	bne.n	800a6d6 <__ieee754_atan2+0x7e>
 800a6c6:	2c02      	cmp	r4, #2
 800a6c8:	d060      	beq.n	800a78c <__ieee754_atan2+0x134>
 800a6ca:	2c03      	cmp	r4, #3
 800a6cc:	d1e5      	bne.n	800a69a <__ieee754_atan2+0x42>
 800a6ce:	a142      	add	r1, pc, #264	; (adr r1, 800a7d8 <__ieee754_atan2+0x180>)
 800a6d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6d4:	e7e1      	b.n	800a69a <__ieee754_atan2+0x42>
 800a6d6:	ea52 0808 	orrs.w	r8, r2, r8
 800a6da:	d106      	bne.n	800a6ea <__ieee754_atan2+0x92>
 800a6dc:	f1bc 0f00 	cmp.w	ip, #0
 800a6e0:	da5f      	bge.n	800a7a2 <__ieee754_atan2+0x14a>
 800a6e2:	a13f      	add	r1, pc, #252	; (adr r1, 800a7e0 <__ieee754_atan2+0x188>)
 800a6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6e8:	e7d7      	b.n	800a69a <__ieee754_atan2+0x42>
 800a6ea:	4572      	cmp	r2, lr
 800a6ec:	d10f      	bne.n	800a70e <__ieee754_atan2+0xb6>
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	f104 34ff 	add.w	r4, r4, #4294967295
 800a6f4:	d107      	bne.n	800a706 <__ieee754_atan2+0xae>
 800a6f6:	2c02      	cmp	r4, #2
 800a6f8:	d84c      	bhi.n	800a794 <__ieee754_atan2+0x13c>
 800a6fa:	4b35      	ldr	r3, [pc, #212]	; (800a7d0 <__ieee754_atan2+0x178>)
 800a6fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a700:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a704:	e7c9      	b.n	800a69a <__ieee754_atan2+0x42>
 800a706:	2c02      	cmp	r4, #2
 800a708:	d848      	bhi.n	800a79c <__ieee754_atan2+0x144>
 800a70a:	4b32      	ldr	r3, [pc, #200]	; (800a7d4 <__ieee754_atan2+0x17c>)
 800a70c:	e7f6      	b.n	800a6fc <__ieee754_atan2+0xa4>
 800a70e:	4573      	cmp	r3, lr
 800a710:	d0e4      	beq.n	800a6dc <__ieee754_atan2+0x84>
 800a712:	1a9b      	subs	r3, r3, r2
 800a714:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a718:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a71c:	da1e      	bge.n	800a75c <__ieee754_atan2+0x104>
 800a71e:	2f00      	cmp	r7, #0
 800a720:	da01      	bge.n	800a726 <__ieee754_atan2+0xce>
 800a722:	323c      	adds	r2, #60	; 0x3c
 800a724:	db1e      	blt.n	800a764 <__ieee754_atan2+0x10c>
 800a726:	4632      	mov	r2, r6
 800a728:	463b      	mov	r3, r7
 800a72a:	f7f6 f8a7 	bl	800087c <__aeabi_ddiv>
 800a72e:	ec41 0b10 	vmov	d0, r0, r1
 800a732:	f001 fef5 	bl	800c520 <fabs>
 800a736:	f001 fd53 	bl	800c1e0 <atan>
 800a73a:	ec51 0b10 	vmov	r0, r1, d0
 800a73e:	2c01      	cmp	r4, #1
 800a740:	d013      	beq.n	800a76a <__ieee754_atan2+0x112>
 800a742:	2c02      	cmp	r4, #2
 800a744:	d015      	beq.n	800a772 <__ieee754_atan2+0x11a>
 800a746:	2c00      	cmp	r4, #0
 800a748:	d0a7      	beq.n	800a69a <__ieee754_atan2+0x42>
 800a74a:	a319      	add	r3, pc, #100	; (adr r3, 800a7b0 <__ieee754_atan2+0x158>)
 800a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a750:	f7f5 fdb2 	bl	80002b8 <__aeabi_dsub>
 800a754:	a318      	add	r3, pc, #96	; (adr r3, 800a7b8 <__ieee754_atan2+0x160>)
 800a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75a:	e014      	b.n	800a786 <__ieee754_atan2+0x12e>
 800a75c:	a118      	add	r1, pc, #96	; (adr r1, 800a7c0 <__ieee754_atan2+0x168>)
 800a75e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a762:	e7ec      	b.n	800a73e <__ieee754_atan2+0xe6>
 800a764:	2000      	movs	r0, #0
 800a766:	2100      	movs	r1, #0
 800a768:	e7e9      	b.n	800a73e <__ieee754_atan2+0xe6>
 800a76a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a76e:	4619      	mov	r1, r3
 800a770:	e793      	b.n	800a69a <__ieee754_atan2+0x42>
 800a772:	a30f      	add	r3, pc, #60	; (adr r3, 800a7b0 <__ieee754_atan2+0x158>)
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f7f5 fd9e 	bl	80002b8 <__aeabi_dsub>
 800a77c:	4602      	mov	r2, r0
 800a77e:	460b      	mov	r3, r1
 800a780:	a10d      	add	r1, pc, #52	; (adr r1, 800a7b8 <__ieee754_atan2+0x160>)
 800a782:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a786:	f7f5 fd97 	bl	80002b8 <__aeabi_dsub>
 800a78a:	e786      	b.n	800a69a <__ieee754_atan2+0x42>
 800a78c:	a10a      	add	r1, pc, #40	; (adr r1, 800a7b8 <__ieee754_atan2+0x160>)
 800a78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a792:	e782      	b.n	800a69a <__ieee754_atan2+0x42>
 800a794:	a10c      	add	r1, pc, #48	; (adr r1, 800a7c8 <__ieee754_atan2+0x170>)
 800a796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a79a:	e77e      	b.n	800a69a <__ieee754_atan2+0x42>
 800a79c:	2000      	movs	r0, #0
 800a79e:	2100      	movs	r1, #0
 800a7a0:	e77b      	b.n	800a69a <__ieee754_atan2+0x42>
 800a7a2:	a107      	add	r1, pc, #28	; (adr r1, 800a7c0 <__ieee754_atan2+0x168>)
 800a7a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7a8:	e777      	b.n	800a69a <__ieee754_atan2+0x42>
 800a7aa:	bf00      	nop
 800a7ac:	f3af 8000 	nop.w
 800a7b0:	33145c07 	.word	0x33145c07
 800a7b4:	3ca1a626 	.word	0x3ca1a626
 800a7b8:	54442d18 	.word	0x54442d18
 800a7bc:	400921fb 	.word	0x400921fb
 800a7c0:	54442d18 	.word	0x54442d18
 800a7c4:	3ff921fb 	.word	0x3ff921fb
 800a7c8:	54442d18 	.word	0x54442d18
 800a7cc:	3fe921fb 	.word	0x3fe921fb
 800a7d0:	0800cfb8 	.word	0x0800cfb8
 800a7d4:	0800cfd0 	.word	0x0800cfd0
 800a7d8:	54442d18 	.word	0x54442d18
 800a7dc:	c00921fb 	.word	0xc00921fb
 800a7e0:	54442d18 	.word	0x54442d18
 800a7e4:	bff921fb 	.word	0xbff921fb
 800a7e8:	7ff00000 	.word	0x7ff00000
 800a7ec:	00000000 	.word	0x00000000

0800a7f0 <__ieee754_pow>:
 800a7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f4:	ed2d 8b06 	vpush	{d8-d10}
 800a7f8:	b089      	sub	sp, #36	; 0x24
 800a7fa:	ed8d 1b00 	vstr	d1, [sp]
 800a7fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a802:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a806:	ea58 0102 	orrs.w	r1, r8, r2
 800a80a:	ec57 6b10 	vmov	r6, r7, d0
 800a80e:	d115      	bne.n	800a83c <__ieee754_pow+0x4c>
 800a810:	19b3      	adds	r3, r6, r6
 800a812:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a816:	4152      	adcs	r2, r2
 800a818:	4299      	cmp	r1, r3
 800a81a:	4b89      	ldr	r3, [pc, #548]	; (800aa40 <__ieee754_pow+0x250>)
 800a81c:	4193      	sbcs	r3, r2
 800a81e:	f080 84d2 	bcs.w	800b1c6 <__ieee754_pow+0x9d6>
 800a822:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a826:	4630      	mov	r0, r6
 800a828:	4639      	mov	r1, r7
 800a82a:	f7f5 fd47 	bl	80002bc <__adddf3>
 800a82e:	ec41 0b10 	vmov	d0, r0, r1
 800a832:	b009      	add	sp, #36	; 0x24
 800a834:	ecbd 8b06 	vpop	{d8-d10}
 800a838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83c:	4b81      	ldr	r3, [pc, #516]	; (800aa44 <__ieee754_pow+0x254>)
 800a83e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a842:	429c      	cmp	r4, r3
 800a844:	ee10 aa10 	vmov	sl, s0
 800a848:	463d      	mov	r5, r7
 800a84a:	dc06      	bgt.n	800a85a <__ieee754_pow+0x6a>
 800a84c:	d101      	bne.n	800a852 <__ieee754_pow+0x62>
 800a84e:	2e00      	cmp	r6, #0
 800a850:	d1e7      	bne.n	800a822 <__ieee754_pow+0x32>
 800a852:	4598      	cmp	r8, r3
 800a854:	dc01      	bgt.n	800a85a <__ieee754_pow+0x6a>
 800a856:	d10f      	bne.n	800a878 <__ieee754_pow+0x88>
 800a858:	b172      	cbz	r2, 800a878 <__ieee754_pow+0x88>
 800a85a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a85e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a862:	ea55 050a 	orrs.w	r5, r5, sl
 800a866:	d1dc      	bne.n	800a822 <__ieee754_pow+0x32>
 800a868:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a86c:	18db      	adds	r3, r3, r3
 800a86e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a872:	4152      	adcs	r2, r2
 800a874:	429d      	cmp	r5, r3
 800a876:	e7d0      	b.n	800a81a <__ieee754_pow+0x2a>
 800a878:	2d00      	cmp	r5, #0
 800a87a:	da3b      	bge.n	800a8f4 <__ieee754_pow+0x104>
 800a87c:	4b72      	ldr	r3, [pc, #456]	; (800aa48 <__ieee754_pow+0x258>)
 800a87e:	4598      	cmp	r8, r3
 800a880:	dc51      	bgt.n	800a926 <__ieee754_pow+0x136>
 800a882:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a886:	4598      	cmp	r8, r3
 800a888:	f340 84ac 	ble.w	800b1e4 <__ieee754_pow+0x9f4>
 800a88c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a890:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a894:	2b14      	cmp	r3, #20
 800a896:	dd0f      	ble.n	800a8b8 <__ieee754_pow+0xc8>
 800a898:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a89c:	fa22 f103 	lsr.w	r1, r2, r3
 800a8a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	f040 849d 	bne.w	800b1e4 <__ieee754_pow+0x9f4>
 800a8aa:	f001 0101 	and.w	r1, r1, #1
 800a8ae:	f1c1 0302 	rsb	r3, r1, #2
 800a8b2:	9304      	str	r3, [sp, #16]
 800a8b4:	b182      	cbz	r2, 800a8d8 <__ieee754_pow+0xe8>
 800a8b6:	e05f      	b.n	800a978 <__ieee754_pow+0x188>
 800a8b8:	2a00      	cmp	r2, #0
 800a8ba:	d15b      	bne.n	800a974 <__ieee754_pow+0x184>
 800a8bc:	f1c3 0314 	rsb	r3, r3, #20
 800a8c0:	fa48 f103 	asr.w	r1, r8, r3
 800a8c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a8c8:	4543      	cmp	r3, r8
 800a8ca:	f040 8488 	bne.w	800b1de <__ieee754_pow+0x9ee>
 800a8ce:	f001 0101 	and.w	r1, r1, #1
 800a8d2:	f1c1 0302 	rsb	r3, r1, #2
 800a8d6:	9304      	str	r3, [sp, #16]
 800a8d8:	4b5c      	ldr	r3, [pc, #368]	; (800aa4c <__ieee754_pow+0x25c>)
 800a8da:	4598      	cmp	r8, r3
 800a8dc:	d132      	bne.n	800a944 <__ieee754_pow+0x154>
 800a8de:	f1b9 0f00 	cmp.w	r9, #0
 800a8e2:	f280 8478 	bge.w	800b1d6 <__ieee754_pow+0x9e6>
 800a8e6:	4959      	ldr	r1, [pc, #356]	; (800aa4c <__ieee754_pow+0x25c>)
 800a8e8:	4632      	mov	r2, r6
 800a8ea:	463b      	mov	r3, r7
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	f7f5 ffc5 	bl	800087c <__aeabi_ddiv>
 800a8f2:	e79c      	b.n	800a82e <__ieee754_pow+0x3e>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	9304      	str	r3, [sp, #16]
 800a8f8:	2a00      	cmp	r2, #0
 800a8fa:	d13d      	bne.n	800a978 <__ieee754_pow+0x188>
 800a8fc:	4b51      	ldr	r3, [pc, #324]	; (800aa44 <__ieee754_pow+0x254>)
 800a8fe:	4598      	cmp	r8, r3
 800a900:	d1ea      	bne.n	800a8d8 <__ieee754_pow+0xe8>
 800a902:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a906:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a90a:	ea53 030a 	orrs.w	r3, r3, sl
 800a90e:	f000 845a 	beq.w	800b1c6 <__ieee754_pow+0x9d6>
 800a912:	4b4f      	ldr	r3, [pc, #316]	; (800aa50 <__ieee754_pow+0x260>)
 800a914:	429c      	cmp	r4, r3
 800a916:	dd08      	ble.n	800a92a <__ieee754_pow+0x13a>
 800a918:	f1b9 0f00 	cmp.w	r9, #0
 800a91c:	f2c0 8457 	blt.w	800b1ce <__ieee754_pow+0x9de>
 800a920:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a924:	e783      	b.n	800a82e <__ieee754_pow+0x3e>
 800a926:	2302      	movs	r3, #2
 800a928:	e7e5      	b.n	800a8f6 <__ieee754_pow+0x106>
 800a92a:	f1b9 0f00 	cmp.w	r9, #0
 800a92e:	f04f 0000 	mov.w	r0, #0
 800a932:	f04f 0100 	mov.w	r1, #0
 800a936:	f6bf af7a 	bge.w	800a82e <__ieee754_pow+0x3e>
 800a93a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a93e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a942:	e774      	b.n	800a82e <__ieee754_pow+0x3e>
 800a944:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a948:	d106      	bne.n	800a958 <__ieee754_pow+0x168>
 800a94a:	4632      	mov	r2, r6
 800a94c:	463b      	mov	r3, r7
 800a94e:	4630      	mov	r0, r6
 800a950:	4639      	mov	r1, r7
 800a952:	f7f5 fe69 	bl	8000628 <__aeabi_dmul>
 800a956:	e76a      	b.n	800a82e <__ieee754_pow+0x3e>
 800a958:	4b3e      	ldr	r3, [pc, #248]	; (800aa54 <__ieee754_pow+0x264>)
 800a95a:	4599      	cmp	r9, r3
 800a95c:	d10c      	bne.n	800a978 <__ieee754_pow+0x188>
 800a95e:	2d00      	cmp	r5, #0
 800a960:	db0a      	blt.n	800a978 <__ieee754_pow+0x188>
 800a962:	ec47 6b10 	vmov	d0, r6, r7
 800a966:	b009      	add	sp, #36	; 0x24
 800a968:	ecbd 8b06 	vpop	{d8-d10}
 800a96c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a970:	f000 be7a 	b.w	800b668 <__ieee754_sqrt>
 800a974:	2300      	movs	r3, #0
 800a976:	9304      	str	r3, [sp, #16]
 800a978:	ec47 6b10 	vmov	d0, r6, r7
 800a97c:	f001 fdd0 	bl	800c520 <fabs>
 800a980:	ec51 0b10 	vmov	r0, r1, d0
 800a984:	f1ba 0f00 	cmp.w	sl, #0
 800a988:	d129      	bne.n	800a9de <__ieee754_pow+0x1ee>
 800a98a:	b124      	cbz	r4, 800a996 <__ieee754_pow+0x1a6>
 800a98c:	4b2f      	ldr	r3, [pc, #188]	; (800aa4c <__ieee754_pow+0x25c>)
 800a98e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a992:	429a      	cmp	r2, r3
 800a994:	d123      	bne.n	800a9de <__ieee754_pow+0x1ee>
 800a996:	f1b9 0f00 	cmp.w	r9, #0
 800a99a:	da05      	bge.n	800a9a8 <__ieee754_pow+0x1b8>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	492a      	ldr	r1, [pc, #168]	; (800aa4c <__ieee754_pow+0x25c>)
 800a9a4:	f7f5 ff6a 	bl	800087c <__aeabi_ddiv>
 800a9a8:	2d00      	cmp	r5, #0
 800a9aa:	f6bf af40 	bge.w	800a82e <__ieee754_pow+0x3e>
 800a9ae:	9b04      	ldr	r3, [sp, #16]
 800a9b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a9b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a9b8:	4323      	orrs	r3, r4
 800a9ba:	d108      	bne.n	800a9ce <__ieee754_pow+0x1de>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	f7f5 fc78 	bl	80002b8 <__aeabi_dsub>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	e78f      	b.n	800a8ee <__ieee754_pow+0xfe>
 800a9ce:	9b04      	ldr	r3, [sp, #16]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	f47f af2c 	bne.w	800a82e <__ieee754_pow+0x3e>
 800a9d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9da:	4619      	mov	r1, r3
 800a9dc:	e727      	b.n	800a82e <__ieee754_pow+0x3e>
 800a9de:	0feb      	lsrs	r3, r5, #31
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	9306      	str	r3, [sp, #24]
 800a9e4:	9a06      	ldr	r2, [sp, #24]
 800a9e6:	9b04      	ldr	r3, [sp, #16]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	d102      	bne.n	800a9f2 <__ieee754_pow+0x202>
 800a9ec:	4632      	mov	r2, r6
 800a9ee:	463b      	mov	r3, r7
 800a9f0:	e7e6      	b.n	800a9c0 <__ieee754_pow+0x1d0>
 800a9f2:	4b19      	ldr	r3, [pc, #100]	; (800aa58 <__ieee754_pow+0x268>)
 800a9f4:	4598      	cmp	r8, r3
 800a9f6:	f340 80fb 	ble.w	800abf0 <__ieee754_pow+0x400>
 800a9fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a9fe:	4598      	cmp	r8, r3
 800aa00:	4b13      	ldr	r3, [pc, #76]	; (800aa50 <__ieee754_pow+0x260>)
 800aa02:	dd0c      	ble.n	800aa1e <__ieee754_pow+0x22e>
 800aa04:	429c      	cmp	r4, r3
 800aa06:	dc0f      	bgt.n	800aa28 <__ieee754_pow+0x238>
 800aa08:	f1b9 0f00 	cmp.w	r9, #0
 800aa0c:	da0f      	bge.n	800aa2e <__ieee754_pow+0x23e>
 800aa0e:	2000      	movs	r0, #0
 800aa10:	b009      	add	sp, #36	; 0x24
 800aa12:	ecbd 8b06 	vpop	{d8-d10}
 800aa16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1a:	f001 bbd6 	b.w	800c1ca <__math_oflow>
 800aa1e:	429c      	cmp	r4, r3
 800aa20:	dbf2      	blt.n	800aa08 <__ieee754_pow+0x218>
 800aa22:	4b0a      	ldr	r3, [pc, #40]	; (800aa4c <__ieee754_pow+0x25c>)
 800aa24:	429c      	cmp	r4, r3
 800aa26:	dd19      	ble.n	800aa5c <__ieee754_pow+0x26c>
 800aa28:	f1b9 0f00 	cmp.w	r9, #0
 800aa2c:	dcef      	bgt.n	800aa0e <__ieee754_pow+0x21e>
 800aa2e:	2000      	movs	r0, #0
 800aa30:	b009      	add	sp, #36	; 0x24
 800aa32:	ecbd 8b06 	vpop	{d8-d10}
 800aa36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3a:	f001 bbbd 	b.w	800c1b8 <__math_uflow>
 800aa3e:	bf00      	nop
 800aa40:	fff00000 	.word	0xfff00000
 800aa44:	7ff00000 	.word	0x7ff00000
 800aa48:	433fffff 	.word	0x433fffff
 800aa4c:	3ff00000 	.word	0x3ff00000
 800aa50:	3fefffff 	.word	0x3fefffff
 800aa54:	3fe00000 	.word	0x3fe00000
 800aa58:	41e00000 	.word	0x41e00000
 800aa5c:	4b60      	ldr	r3, [pc, #384]	; (800abe0 <__ieee754_pow+0x3f0>)
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f7f5 fc2a 	bl	80002b8 <__aeabi_dsub>
 800aa64:	a354      	add	r3, pc, #336	; (adr r3, 800abb8 <__ieee754_pow+0x3c8>)
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	460d      	mov	r5, r1
 800aa6e:	f7f5 fddb 	bl	8000628 <__aeabi_dmul>
 800aa72:	a353      	add	r3, pc, #332	; (adr r3, 800abc0 <__ieee754_pow+0x3d0>)
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	4606      	mov	r6, r0
 800aa7a:	460f      	mov	r7, r1
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	4629      	mov	r1, r5
 800aa80:	f7f5 fdd2 	bl	8000628 <__aeabi_dmul>
 800aa84:	4b57      	ldr	r3, [pc, #348]	; (800abe4 <__ieee754_pow+0x3f4>)
 800aa86:	4682      	mov	sl, r0
 800aa88:	468b      	mov	fp, r1
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	4629      	mov	r1, r5
 800aa90:	f7f5 fdca 	bl	8000628 <__aeabi_dmul>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	a14b      	add	r1, pc, #300	; (adr r1, 800abc8 <__ieee754_pow+0x3d8>)
 800aa9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa9e:	f7f5 fc0b 	bl	80002b8 <__aeabi_dsub>
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	462b      	mov	r3, r5
 800aaa6:	f7f5 fdbf 	bl	8000628 <__aeabi_dmul>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	460b      	mov	r3, r1
 800aaae:	2000      	movs	r0, #0
 800aab0:	494d      	ldr	r1, [pc, #308]	; (800abe8 <__ieee754_pow+0x3f8>)
 800aab2:	f7f5 fc01 	bl	80002b8 <__aeabi_dsub>
 800aab6:	4622      	mov	r2, r4
 800aab8:	4680      	mov	r8, r0
 800aaba:	4689      	mov	r9, r1
 800aabc:	462b      	mov	r3, r5
 800aabe:	4620      	mov	r0, r4
 800aac0:	4629      	mov	r1, r5
 800aac2:	f7f5 fdb1 	bl	8000628 <__aeabi_dmul>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4640      	mov	r0, r8
 800aacc:	4649      	mov	r1, r9
 800aace:	f7f5 fdab 	bl	8000628 <__aeabi_dmul>
 800aad2:	a33f      	add	r3, pc, #252	; (adr r3, 800abd0 <__ieee754_pow+0x3e0>)
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	f7f5 fda6 	bl	8000628 <__aeabi_dmul>
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	4650      	mov	r0, sl
 800aae2:	4659      	mov	r1, fp
 800aae4:	f7f5 fbe8 	bl	80002b8 <__aeabi_dsub>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	4680      	mov	r8, r0
 800aaee:	4689      	mov	r9, r1
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	4639      	mov	r1, r7
 800aaf4:	f7f5 fbe2 	bl	80002bc <__adddf3>
 800aaf8:	2000      	movs	r0, #0
 800aafa:	4632      	mov	r2, r6
 800aafc:	463b      	mov	r3, r7
 800aafe:	4604      	mov	r4, r0
 800ab00:	460d      	mov	r5, r1
 800ab02:	f7f5 fbd9 	bl	80002b8 <__aeabi_dsub>
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	f7f5 fbd3 	bl	80002b8 <__aeabi_dsub>
 800ab12:	9b04      	ldr	r3, [sp, #16]
 800ab14:	9a06      	ldr	r2, [sp, #24]
 800ab16:	3b01      	subs	r3, #1
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	4682      	mov	sl, r0
 800ab1c:	468b      	mov	fp, r1
 800ab1e:	f040 81e7 	bne.w	800aef0 <__ieee754_pow+0x700>
 800ab22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800abd8 <__ieee754_pow+0x3e8>
 800ab26:	eeb0 8a47 	vmov.f32	s16, s14
 800ab2a:	eef0 8a67 	vmov.f32	s17, s15
 800ab2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ab32:	2600      	movs	r6, #0
 800ab34:	4632      	mov	r2, r6
 800ab36:	463b      	mov	r3, r7
 800ab38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab3c:	f7f5 fbbc 	bl	80002b8 <__aeabi_dsub>
 800ab40:	4622      	mov	r2, r4
 800ab42:	462b      	mov	r3, r5
 800ab44:	f7f5 fd70 	bl	8000628 <__aeabi_dmul>
 800ab48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab4c:	4680      	mov	r8, r0
 800ab4e:	4689      	mov	r9, r1
 800ab50:	4650      	mov	r0, sl
 800ab52:	4659      	mov	r1, fp
 800ab54:	f7f5 fd68 	bl	8000628 <__aeabi_dmul>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4640      	mov	r0, r8
 800ab5e:	4649      	mov	r1, r9
 800ab60:	f7f5 fbac 	bl	80002bc <__adddf3>
 800ab64:	4632      	mov	r2, r6
 800ab66:	463b      	mov	r3, r7
 800ab68:	4680      	mov	r8, r0
 800ab6a:	4689      	mov	r9, r1
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f7f5 fd5a 	bl	8000628 <__aeabi_dmul>
 800ab74:	460b      	mov	r3, r1
 800ab76:	4604      	mov	r4, r0
 800ab78:	460d      	mov	r5, r1
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	4649      	mov	r1, r9
 800ab7e:	4640      	mov	r0, r8
 800ab80:	f7f5 fb9c 	bl	80002bc <__adddf3>
 800ab84:	4b19      	ldr	r3, [pc, #100]	; (800abec <__ieee754_pow+0x3fc>)
 800ab86:	4299      	cmp	r1, r3
 800ab88:	ec45 4b19 	vmov	d9, r4, r5
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	460f      	mov	r7, r1
 800ab90:	468b      	mov	fp, r1
 800ab92:	f340 82f1 	ble.w	800b178 <__ieee754_pow+0x988>
 800ab96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ab9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ab9e:	4303      	orrs	r3, r0
 800aba0:	f000 81e4 	beq.w	800af6c <__ieee754_pow+0x77c>
 800aba4:	ec51 0b18 	vmov	r0, r1, d8
 800aba8:	2200      	movs	r2, #0
 800abaa:	2300      	movs	r3, #0
 800abac:	f7f5 ffae 	bl	8000b0c <__aeabi_dcmplt>
 800abb0:	3800      	subs	r0, #0
 800abb2:	bf18      	it	ne
 800abb4:	2001      	movne	r0, #1
 800abb6:	e72b      	b.n	800aa10 <__ieee754_pow+0x220>
 800abb8:	60000000 	.word	0x60000000
 800abbc:	3ff71547 	.word	0x3ff71547
 800abc0:	f85ddf44 	.word	0xf85ddf44
 800abc4:	3e54ae0b 	.word	0x3e54ae0b
 800abc8:	55555555 	.word	0x55555555
 800abcc:	3fd55555 	.word	0x3fd55555
 800abd0:	652b82fe 	.word	0x652b82fe
 800abd4:	3ff71547 	.word	0x3ff71547
 800abd8:	00000000 	.word	0x00000000
 800abdc:	bff00000 	.word	0xbff00000
 800abe0:	3ff00000 	.word	0x3ff00000
 800abe4:	3fd00000 	.word	0x3fd00000
 800abe8:	3fe00000 	.word	0x3fe00000
 800abec:	408fffff 	.word	0x408fffff
 800abf0:	4bd5      	ldr	r3, [pc, #852]	; (800af48 <__ieee754_pow+0x758>)
 800abf2:	402b      	ands	r3, r5
 800abf4:	2200      	movs	r2, #0
 800abf6:	b92b      	cbnz	r3, 800ac04 <__ieee754_pow+0x414>
 800abf8:	4bd4      	ldr	r3, [pc, #848]	; (800af4c <__ieee754_pow+0x75c>)
 800abfa:	f7f5 fd15 	bl	8000628 <__aeabi_dmul>
 800abfe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ac02:	460c      	mov	r4, r1
 800ac04:	1523      	asrs	r3, r4, #20
 800ac06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ac0a:	4413      	add	r3, r2
 800ac0c:	9305      	str	r3, [sp, #20]
 800ac0e:	4bd0      	ldr	r3, [pc, #832]	; (800af50 <__ieee754_pow+0x760>)
 800ac10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ac14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ac18:	429c      	cmp	r4, r3
 800ac1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ac1e:	dd08      	ble.n	800ac32 <__ieee754_pow+0x442>
 800ac20:	4bcc      	ldr	r3, [pc, #816]	; (800af54 <__ieee754_pow+0x764>)
 800ac22:	429c      	cmp	r4, r3
 800ac24:	f340 8162 	ble.w	800aeec <__ieee754_pow+0x6fc>
 800ac28:	9b05      	ldr	r3, [sp, #20]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	9305      	str	r3, [sp, #20]
 800ac2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ac32:	2400      	movs	r4, #0
 800ac34:	00e3      	lsls	r3, r4, #3
 800ac36:	9307      	str	r3, [sp, #28]
 800ac38:	4bc7      	ldr	r3, [pc, #796]	; (800af58 <__ieee754_pow+0x768>)
 800ac3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac3e:	ed93 7b00 	vldr	d7, [r3]
 800ac42:	4629      	mov	r1, r5
 800ac44:	ec53 2b17 	vmov	r2, r3, d7
 800ac48:	eeb0 9a47 	vmov.f32	s18, s14
 800ac4c:	eef0 9a67 	vmov.f32	s19, s15
 800ac50:	4682      	mov	sl, r0
 800ac52:	f7f5 fb31 	bl	80002b8 <__aeabi_dsub>
 800ac56:	4652      	mov	r2, sl
 800ac58:	4606      	mov	r6, r0
 800ac5a:	460f      	mov	r7, r1
 800ac5c:	462b      	mov	r3, r5
 800ac5e:	ec51 0b19 	vmov	r0, r1, d9
 800ac62:	f7f5 fb2b 	bl	80002bc <__adddf3>
 800ac66:	4602      	mov	r2, r0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	49bb      	ldr	r1, [pc, #748]	; (800af5c <__ieee754_pow+0x76c>)
 800ac6e:	f7f5 fe05 	bl	800087c <__aeabi_ddiv>
 800ac72:	ec41 0b1a 	vmov	d10, r0, r1
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	4639      	mov	r1, r7
 800ac7e:	f7f5 fcd3 	bl	8000628 <__aeabi_dmul>
 800ac82:	2300      	movs	r3, #0
 800ac84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac88:	9302      	str	r3, [sp, #8]
 800ac8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac8e:	46ab      	mov	fp, r5
 800ac90:	106d      	asrs	r5, r5, #1
 800ac92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ac96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ac9a:	ec41 0b18 	vmov	d8, r0, r1
 800ac9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800aca2:	2200      	movs	r2, #0
 800aca4:	4640      	mov	r0, r8
 800aca6:	4649      	mov	r1, r9
 800aca8:	4614      	mov	r4, r2
 800acaa:	461d      	mov	r5, r3
 800acac:	f7f5 fcbc 	bl	8000628 <__aeabi_dmul>
 800acb0:	4602      	mov	r2, r0
 800acb2:	460b      	mov	r3, r1
 800acb4:	4630      	mov	r0, r6
 800acb6:	4639      	mov	r1, r7
 800acb8:	f7f5 fafe 	bl	80002b8 <__aeabi_dsub>
 800acbc:	ec53 2b19 	vmov	r2, r3, d9
 800acc0:	4606      	mov	r6, r0
 800acc2:	460f      	mov	r7, r1
 800acc4:	4620      	mov	r0, r4
 800acc6:	4629      	mov	r1, r5
 800acc8:	f7f5 faf6 	bl	80002b8 <__aeabi_dsub>
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	4650      	mov	r0, sl
 800acd2:	4659      	mov	r1, fp
 800acd4:	f7f5 faf0 	bl	80002b8 <__aeabi_dsub>
 800acd8:	4642      	mov	r2, r8
 800acda:	464b      	mov	r3, r9
 800acdc:	f7f5 fca4 	bl	8000628 <__aeabi_dmul>
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	4630      	mov	r0, r6
 800ace6:	4639      	mov	r1, r7
 800ace8:	f7f5 fae6 	bl	80002b8 <__aeabi_dsub>
 800acec:	ec53 2b1a 	vmov	r2, r3, d10
 800acf0:	f7f5 fc9a 	bl	8000628 <__aeabi_dmul>
 800acf4:	ec53 2b18 	vmov	r2, r3, d8
 800acf8:	ec41 0b19 	vmov	d9, r0, r1
 800acfc:	ec51 0b18 	vmov	r0, r1, d8
 800ad00:	f7f5 fc92 	bl	8000628 <__aeabi_dmul>
 800ad04:	a37c      	add	r3, pc, #496	; (adr r3, 800aef8 <__ieee754_pow+0x708>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	f7f5 fc8b 	bl	8000628 <__aeabi_dmul>
 800ad12:	a37b      	add	r3, pc, #492	; (adr r3, 800af00 <__ieee754_pow+0x710>)
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	f7f5 fad0 	bl	80002bc <__adddf3>
 800ad1c:	4622      	mov	r2, r4
 800ad1e:	462b      	mov	r3, r5
 800ad20:	f7f5 fc82 	bl	8000628 <__aeabi_dmul>
 800ad24:	a378      	add	r3, pc, #480	; (adr r3, 800af08 <__ieee754_pow+0x718>)
 800ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2a:	f7f5 fac7 	bl	80002bc <__adddf3>
 800ad2e:	4622      	mov	r2, r4
 800ad30:	462b      	mov	r3, r5
 800ad32:	f7f5 fc79 	bl	8000628 <__aeabi_dmul>
 800ad36:	a376      	add	r3, pc, #472	; (adr r3, 800af10 <__ieee754_pow+0x720>)
 800ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3c:	f7f5 fabe 	bl	80002bc <__adddf3>
 800ad40:	4622      	mov	r2, r4
 800ad42:	462b      	mov	r3, r5
 800ad44:	f7f5 fc70 	bl	8000628 <__aeabi_dmul>
 800ad48:	a373      	add	r3, pc, #460	; (adr r3, 800af18 <__ieee754_pow+0x728>)
 800ad4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4e:	f7f5 fab5 	bl	80002bc <__adddf3>
 800ad52:	4622      	mov	r2, r4
 800ad54:	462b      	mov	r3, r5
 800ad56:	f7f5 fc67 	bl	8000628 <__aeabi_dmul>
 800ad5a:	a371      	add	r3, pc, #452	; (adr r3, 800af20 <__ieee754_pow+0x730>)
 800ad5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad60:	f7f5 faac 	bl	80002bc <__adddf3>
 800ad64:	4622      	mov	r2, r4
 800ad66:	4606      	mov	r6, r0
 800ad68:	460f      	mov	r7, r1
 800ad6a:	462b      	mov	r3, r5
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	4629      	mov	r1, r5
 800ad70:	f7f5 fc5a 	bl	8000628 <__aeabi_dmul>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4630      	mov	r0, r6
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	f7f5 fc54 	bl	8000628 <__aeabi_dmul>
 800ad80:	4642      	mov	r2, r8
 800ad82:	4604      	mov	r4, r0
 800ad84:	460d      	mov	r5, r1
 800ad86:	464b      	mov	r3, r9
 800ad88:	ec51 0b18 	vmov	r0, r1, d8
 800ad8c:	f7f5 fa96 	bl	80002bc <__adddf3>
 800ad90:	ec53 2b19 	vmov	r2, r3, d9
 800ad94:	f7f5 fc48 	bl	8000628 <__aeabi_dmul>
 800ad98:	4622      	mov	r2, r4
 800ad9a:	462b      	mov	r3, r5
 800ad9c:	f7f5 fa8e 	bl	80002bc <__adddf3>
 800ada0:	4642      	mov	r2, r8
 800ada2:	4682      	mov	sl, r0
 800ada4:	468b      	mov	fp, r1
 800ada6:	464b      	mov	r3, r9
 800ada8:	4640      	mov	r0, r8
 800adaa:	4649      	mov	r1, r9
 800adac:	f7f5 fc3c 	bl	8000628 <__aeabi_dmul>
 800adb0:	4b6b      	ldr	r3, [pc, #428]	; (800af60 <__ieee754_pow+0x770>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	4606      	mov	r6, r0
 800adb6:	460f      	mov	r7, r1
 800adb8:	f7f5 fa80 	bl	80002bc <__adddf3>
 800adbc:	4652      	mov	r2, sl
 800adbe:	465b      	mov	r3, fp
 800adc0:	f7f5 fa7c 	bl	80002bc <__adddf3>
 800adc4:	2000      	movs	r0, #0
 800adc6:	4604      	mov	r4, r0
 800adc8:	460d      	mov	r5, r1
 800adca:	4602      	mov	r2, r0
 800adcc:	460b      	mov	r3, r1
 800adce:	4640      	mov	r0, r8
 800add0:	4649      	mov	r1, r9
 800add2:	f7f5 fc29 	bl	8000628 <__aeabi_dmul>
 800add6:	4b62      	ldr	r3, [pc, #392]	; (800af60 <__ieee754_pow+0x770>)
 800add8:	4680      	mov	r8, r0
 800adda:	4689      	mov	r9, r1
 800addc:	2200      	movs	r2, #0
 800adde:	4620      	mov	r0, r4
 800ade0:	4629      	mov	r1, r5
 800ade2:	f7f5 fa69 	bl	80002b8 <__aeabi_dsub>
 800ade6:	4632      	mov	r2, r6
 800ade8:	463b      	mov	r3, r7
 800adea:	f7f5 fa65 	bl	80002b8 <__aeabi_dsub>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	4650      	mov	r0, sl
 800adf4:	4659      	mov	r1, fp
 800adf6:	f7f5 fa5f 	bl	80002b8 <__aeabi_dsub>
 800adfa:	ec53 2b18 	vmov	r2, r3, d8
 800adfe:	f7f5 fc13 	bl	8000628 <__aeabi_dmul>
 800ae02:	4622      	mov	r2, r4
 800ae04:	4606      	mov	r6, r0
 800ae06:	460f      	mov	r7, r1
 800ae08:	462b      	mov	r3, r5
 800ae0a:	ec51 0b19 	vmov	r0, r1, d9
 800ae0e:	f7f5 fc0b 	bl	8000628 <__aeabi_dmul>
 800ae12:	4602      	mov	r2, r0
 800ae14:	460b      	mov	r3, r1
 800ae16:	4630      	mov	r0, r6
 800ae18:	4639      	mov	r1, r7
 800ae1a:	f7f5 fa4f 	bl	80002bc <__adddf3>
 800ae1e:	4606      	mov	r6, r0
 800ae20:	460f      	mov	r7, r1
 800ae22:	4602      	mov	r2, r0
 800ae24:	460b      	mov	r3, r1
 800ae26:	4640      	mov	r0, r8
 800ae28:	4649      	mov	r1, r9
 800ae2a:	f7f5 fa47 	bl	80002bc <__adddf3>
 800ae2e:	a33e      	add	r3, pc, #248	; (adr r3, 800af28 <__ieee754_pow+0x738>)
 800ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae34:	2000      	movs	r0, #0
 800ae36:	4604      	mov	r4, r0
 800ae38:	460d      	mov	r5, r1
 800ae3a:	f7f5 fbf5 	bl	8000628 <__aeabi_dmul>
 800ae3e:	4642      	mov	r2, r8
 800ae40:	ec41 0b18 	vmov	d8, r0, r1
 800ae44:	464b      	mov	r3, r9
 800ae46:	4620      	mov	r0, r4
 800ae48:	4629      	mov	r1, r5
 800ae4a:	f7f5 fa35 	bl	80002b8 <__aeabi_dsub>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4630      	mov	r0, r6
 800ae54:	4639      	mov	r1, r7
 800ae56:	f7f5 fa2f 	bl	80002b8 <__aeabi_dsub>
 800ae5a:	a335      	add	r3, pc, #212	; (adr r3, 800af30 <__ieee754_pow+0x740>)
 800ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae60:	f7f5 fbe2 	bl	8000628 <__aeabi_dmul>
 800ae64:	a334      	add	r3, pc, #208	; (adr r3, 800af38 <__ieee754_pow+0x748>)
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	460f      	mov	r7, r1
 800ae6e:	4620      	mov	r0, r4
 800ae70:	4629      	mov	r1, r5
 800ae72:	f7f5 fbd9 	bl	8000628 <__aeabi_dmul>
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	4639      	mov	r1, r7
 800ae7e:	f7f5 fa1d 	bl	80002bc <__adddf3>
 800ae82:	9a07      	ldr	r2, [sp, #28]
 800ae84:	4b37      	ldr	r3, [pc, #220]	; (800af64 <__ieee754_pow+0x774>)
 800ae86:	4413      	add	r3, r2
 800ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8c:	f7f5 fa16 	bl	80002bc <__adddf3>
 800ae90:	4682      	mov	sl, r0
 800ae92:	9805      	ldr	r0, [sp, #20]
 800ae94:	468b      	mov	fp, r1
 800ae96:	f7f5 fb5d 	bl	8000554 <__aeabi_i2d>
 800ae9a:	9a07      	ldr	r2, [sp, #28]
 800ae9c:	4b32      	ldr	r3, [pc, #200]	; (800af68 <__ieee754_pow+0x778>)
 800ae9e:	4413      	add	r3, r2
 800aea0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aea4:	4606      	mov	r6, r0
 800aea6:	460f      	mov	r7, r1
 800aea8:	4652      	mov	r2, sl
 800aeaa:	465b      	mov	r3, fp
 800aeac:	ec51 0b18 	vmov	r0, r1, d8
 800aeb0:	f7f5 fa04 	bl	80002bc <__adddf3>
 800aeb4:	4642      	mov	r2, r8
 800aeb6:	464b      	mov	r3, r9
 800aeb8:	f7f5 fa00 	bl	80002bc <__adddf3>
 800aebc:	4632      	mov	r2, r6
 800aebe:	463b      	mov	r3, r7
 800aec0:	f7f5 f9fc 	bl	80002bc <__adddf3>
 800aec4:	2000      	movs	r0, #0
 800aec6:	4632      	mov	r2, r6
 800aec8:	463b      	mov	r3, r7
 800aeca:	4604      	mov	r4, r0
 800aecc:	460d      	mov	r5, r1
 800aece:	f7f5 f9f3 	bl	80002b8 <__aeabi_dsub>
 800aed2:	4642      	mov	r2, r8
 800aed4:	464b      	mov	r3, r9
 800aed6:	f7f5 f9ef 	bl	80002b8 <__aeabi_dsub>
 800aeda:	ec53 2b18 	vmov	r2, r3, d8
 800aede:	f7f5 f9eb 	bl	80002b8 <__aeabi_dsub>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	4650      	mov	r0, sl
 800aee8:	4659      	mov	r1, fp
 800aeea:	e610      	b.n	800ab0e <__ieee754_pow+0x31e>
 800aeec:	2401      	movs	r4, #1
 800aeee:	e6a1      	b.n	800ac34 <__ieee754_pow+0x444>
 800aef0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800af40 <__ieee754_pow+0x750>
 800aef4:	e617      	b.n	800ab26 <__ieee754_pow+0x336>
 800aef6:	bf00      	nop
 800aef8:	4a454eef 	.word	0x4a454eef
 800aefc:	3fca7e28 	.word	0x3fca7e28
 800af00:	93c9db65 	.word	0x93c9db65
 800af04:	3fcd864a 	.word	0x3fcd864a
 800af08:	a91d4101 	.word	0xa91d4101
 800af0c:	3fd17460 	.word	0x3fd17460
 800af10:	518f264d 	.word	0x518f264d
 800af14:	3fd55555 	.word	0x3fd55555
 800af18:	db6fabff 	.word	0xdb6fabff
 800af1c:	3fdb6db6 	.word	0x3fdb6db6
 800af20:	33333303 	.word	0x33333303
 800af24:	3fe33333 	.word	0x3fe33333
 800af28:	e0000000 	.word	0xe0000000
 800af2c:	3feec709 	.word	0x3feec709
 800af30:	dc3a03fd 	.word	0xdc3a03fd
 800af34:	3feec709 	.word	0x3feec709
 800af38:	145b01f5 	.word	0x145b01f5
 800af3c:	be3e2fe0 	.word	0xbe3e2fe0
 800af40:	00000000 	.word	0x00000000
 800af44:	3ff00000 	.word	0x3ff00000
 800af48:	7ff00000 	.word	0x7ff00000
 800af4c:	43400000 	.word	0x43400000
 800af50:	0003988e 	.word	0x0003988e
 800af54:	000bb679 	.word	0x000bb679
 800af58:	0800cfe8 	.word	0x0800cfe8
 800af5c:	3ff00000 	.word	0x3ff00000
 800af60:	40080000 	.word	0x40080000
 800af64:	0800d008 	.word	0x0800d008
 800af68:	0800cff8 	.word	0x0800cff8
 800af6c:	a3b5      	add	r3, pc, #724	; (adr r3, 800b244 <__ieee754_pow+0xa54>)
 800af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af72:	4640      	mov	r0, r8
 800af74:	4649      	mov	r1, r9
 800af76:	f7f5 f9a1 	bl	80002bc <__adddf3>
 800af7a:	4622      	mov	r2, r4
 800af7c:	ec41 0b1a 	vmov	d10, r0, r1
 800af80:	462b      	mov	r3, r5
 800af82:	4630      	mov	r0, r6
 800af84:	4639      	mov	r1, r7
 800af86:	f7f5 f997 	bl	80002b8 <__aeabi_dsub>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	ec51 0b1a 	vmov	r0, r1, d10
 800af92:	f7f5 fdd9 	bl	8000b48 <__aeabi_dcmpgt>
 800af96:	2800      	cmp	r0, #0
 800af98:	f47f ae04 	bne.w	800aba4 <__ieee754_pow+0x3b4>
 800af9c:	4aa4      	ldr	r2, [pc, #656]	; (800b230 <__ieee754_pow+0xa40>)
 800af9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800afa2:	4293      	cmp	r3, r2
 800afa4:	f340 8108 	ble.w	800b1b8 <__ieee754_pow+0x9c8>
 800afa8:	151b      	asrs	r3, r3, #20
 800afaa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800afae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800afb2:	fa4a f303 	asr.w	r3, sl, r3
 800afb6:	445b      	add	r3, fp
 800afb8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800afbc:	4e9d      	ldr	r6, [pc, #628]	; (800b234 <__ieee754_pow+0xa44>)
 800afbe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800afc2:	4116      	asrs	r6, r2
 800afc4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800afc8:	2000      	movs	r0, #0
 800afca:	ea23 0106 	bic.w	r1, r3, r6
 800afce:	f1c2 0214 	rsb	r2, r2, #20
 800afd2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800afd6:	fa4a fa02 	asr.w	sl, sl, r2
 800afda:	f1bb 0f00 	cmp.w	fp, #0
 800afde:	4602      	mov	r2, r0
 800afe0:	460b      	mov	r3, r1
 800afe2:	4620      	mov	r0, r4
 800afe4:	4629      	mov	r1, r5
 800afe6:	bfb8      	it	lt
 800afe8:	f1ca 0a00 	rsblt	sl, sl, #0
 800afec:	f7f5 f964 	bl	80002b8 <__aeabi_dsub>
 800aff0:	ec41 0b19 	vmov	d9, r0, r1
 800aff4:	4642      	mov	r2, r8
 800aff6:	464b      	mov	r3, r9
 800aff8:	ec51 0b19 	vmov	r0, r1, d9
 800affc:	f7f5 f95e 	bl	80002bc <__adddf3>
 800b000:	a37b      	add	r3, pc, #492	; (adr r3, 800b1f0 <__ieee754_pow+0xa00>)
 800b002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b006:	2000      	movs	r0, #0
 800b008:	4604      	mov	r4, r0
 800b00a:	460d      	mov	r5, r1
 800b00c:	f7f5 fb0c 	bl	8000628 <__aeabi_dmul>
 800b010:	ec53 2b19 	vmov	r2, r3, d9
 800b014:	4606      	mov	r6, r0
 800b016:	460f      	mov	r7, r1
 800b018:	4620      	mov	r0, r4
 800b01a:	4629      	mov	r1, r5
 800b01c:	f7f5 f94c 	bl	80002b8 <__aeabi_dsub>
 800b020:	4602      	mov	r2, r0
 800b022:	460b      	mov	r3, r1
 800b024:	4640      	mov	r0, r8
 800b026:	4649      	mov	r1, r9
 800b028:	f7f5 f946 	bl	80002b8 <__aeabi_dsub>
 800b02c:	a372      	add	r3, pc, #456	; (adr r3, 800b1f8 <__ieee754_pow+0xa08>)
 800b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b032:	f7f5 faf9 	bl	8000628 <__aeabi_dmul>
 800b036:	a372      	add	r3, pc, #456	; (adr r3, 800b200 <__ieee754_pow+0xa10>)
 800b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03c:	4680      	mov	r8, r0
 800b03e:	4689      	mov	r9, r1
 800b040:	4620      	mov	r0, r4
 800b042:	4629      	mov	r1, r5
 800b044:	f7f5 faf0 	bl	8000628 <__aeabi_dmul>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4640      	mov	r0, r8
 800b04e:	4649      	mov	r1, r9
 800b050:	f7f5 f934 	bl	80002bc <__adddf3>
 800b054:	4604      	mov	r4, r0
 800b056:	460d      	mov	r5, r1
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	4630      	mov	r0, r6
 800b05e:	4639      	mov	r1, r7
 800b060:	f7f5 f92c 	bl	80002bc <__adddf3>
 800b064:	4632      	mov	r2, r6
 800b066:	463b      	mov	r3, r7
 800b068:	4680      	mov	r8, r0
 800b06a:	4689      	mov	r9, r1
 800b06c:	f7f5 f924 	bl	80002b8 <__aeabi_dsub>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4620      	mov	r0, r4
 800b076:	4629      	mov	r1, r5
 800b078:	f7f5 f91e 	bl	80002b8 <__aeabi_dsub>
 800b07c:	4642      	mov	r2, r8
 800b07e:	4606      	mov	r6, r0
 800b080:	460f      	mov	r7, r1
 800b082:	464b      	mov	r3, r9
 800b084:	4640      	mov	r0, r8
 800b086:	4649      	mov	r1, r9
 800b088:	f7f5 face 	bl	8000628 <__aeabi_dmul>
 800b08c:	a35e      	add	r3, pc, #376	; (adr r3, 800b208 <__ieee754_pow+0xa18>)
 800b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b092:	4604      	mov	r4, r0
 800b094:	460d      	mov	r5, r1
 800b096:	f7f5 fac7 	bl	8000628 <__aeabi_dmul>
 800b09a:	a35d      	add	r3, pc, #372	; (adr r3, 800b210 <__ieee754_pow+0xa20>)
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	f7f5 f90a 	bl	80002b8 <__aeabi_dsub>
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	462b      	mov	r3, r5
 800b0a8:	f7f5 fabe 	bl	8000628 <__aeabi_dmul>
 800b0ac:	a35a      	add	r3, pc, #360	; (adr r3, 800b218 <__ieee754_pow+0xa28>)
 800b0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b2:	f7f5 f903 	bl	80002bc <__adddf3>
 800b0b6:	4622      	mov	r2, r4
 800b0b8:	462b      	mov	r3, r5
 800b0ba:	f7f5 fab5 	bl	8000628 <__aeabi_dmul>
 800b0be:	a358      	add	r3, pc, #352	; (adr r3, 800b220 <__ieee754_pow+0xa30>)
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	f7f5 f8f8 	bl	80002b8 <__aeabi_dsub>
 800b0c8:	4622      	mov	r2, r4
 800b0ca:	462b      	mov	r3, r5
 800b0cc:	f7f5 faac 	bl	8000628 <__aeabi_dmul>
 800b0d0:	a355      	add	r3, pc, #340	; (adr r3, 800b228 <__ieee754_pow+0xa38>)
 800b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d6:	f7f5 f8f1 	bl	80002bc <__adddf3>
 800b0da:	4622      	mov	r2, r4
 800b0dc:	462b      	mov	r3, r5
 800b0de:	f7f5 faa3 	bl	8000628 <__aeabi_dmul>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	4640      	mov	r0, r8
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	f7f5 f8e5 	bl	80002b8 <__aeabi_dsub>
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	460d      	mov	r5, r1
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	4640      	mov	r0, r8
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	f7f5 fa95 	bl	8000628 <__aeabi_dmul>
 800b0fe:	2200      	movs	r2, #0
 800b100:	ec41 0b19 	vmov	d9, r0, r1
 800b104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b108:	4620      	mov	r0, r4
 800b10a:	4629      	mov	r1, r5
 800b10c:	f7f5 f8d4 	bl	80002b8 <__aeabi_dsub>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	ec51 0b19 	vmov	r0, r1, d9
 800b118:	f7f5 fbb0 	bl	800087c <__aeabi_ddiv>
 800b11c:	4632      	mov	r2, r6
 800b11e:	4604      	mov	r4, r0
 800b120:	460d      	mov	r5, r1
 800b122:	463b      	mov	r3, r7
 800b124:	4640      	mov	r0, r8
 800b126:	4649      	mov	r1, r9
 800b128:	f7f5 fa7e 	bl	8000628 <__aeabi_dmul>
 800b12c:	4632      	mov	r2, r6
 800b12e:	463b      	mov	r3, r7
 800b130:	f7f5 f8c4 	bl	80002bc <__adddf3>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	4620      	mov	r0, r4
 800b13a:	4629      	mov	r1, r5
 800b13c:	f7f5 f8bc 	bl	80002b8 <__aeabi_dsub>
 800b140:	4642      	mov	r2, r8
 800b142:	464b      	mov	r3, r9
 800b144:	f7f5 f8b8 	bl	80002b8 <__aeabi_dsub>
 800b148:	460b      	mov	r3, r1
 800b14a:	4602      	mov	r2, r0
 800b14c:	493a      	ldr	r1, [pc, #232]	; (800b238 <__ieee754_pow+0xa48>)
 800b14e:	2000      	movs	r0, #0
 800b150:	f7f5 f8b2 	bl	80002b8 <__aeabi_dsub>
 800b154:	ec41 0b10 	vmov	d0, r0, r1
 800b158:	ee10 3a90 	vmov	r3, s1
 800b15c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b164:	da2b      	bge.n	800b1be <__ieee754_pow+0x9ce>
 800b166:	4650      	mov	r0, sl
 800b168:	f001 fa6e 	bl	800c648 <scalbn>
 800b16c:	ec51 0b10 	vmov	r0, r1, d0
 800b170:	ec53 2b18 	vmov	r2, r3, d8
 800b174:	f7ff bbed 	b.w	800a952 <__ieee754_pow+0x162>
 800b178:	4b30      	ldr	r3, [pc, #192]	; (800b23c <__ieee754_pow+0xa4c>)
 800b17a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b17e:	429e      	cmp	r6, r3
 800b180:	f77f af0c 	ble.w	800af9c <__ieee754_pow+0x7ac>
 800b184:	4b2e      	ldr	r3, [pc, #184]	; (800b240 <__ieee754_pow+0xa50>)
 800b186:	440b      	add	r3, r1
 800b188:	4303      	orrs	r3, r0
 800b18a:	d009      	beq.n	800b1a0 <__ieee754_pow+0x9b0>
 800b18c:	ec51 0b18 	vmov	r0, r1, d8
 800b190:	2200      	movs	r2, #0
 800b192:	2300      	movs	r3, #0
 800b194:	f7f5 fcba 	bl	8000b0c <__aeabi_dcmplt>
 800b198:	3800      	subs	r0, #0
 800b19a:	bf18      	it	ne
 800b19c:	2001      	movne	r0, #1
 800b19e:	e447      	b.n	800aa30 <__ieee754_pow+0x240>
 800b1a0:	4622      	mov	r2, r4
 800b1a2:	462b      	mov	r3, r5
 800b1a4:	f7f5 f888 	bl	80002b8 <__aeabi_dsub>
 800b1a8:	4642      	mov	r2, r8
 800b1aa:	464b      	mov	r3, r9
 800b1ac:	f7f5 fcc2 	bl	8000b34 <__aeabi_dcmpge>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	f43f aef3 	beq.w	800af9c <__ieee754_pow+0x7ac>
 800b1b6:	e7e9      	b.n	800b18c <__ieee754_pow+0x99c>
 800b1b8:	f04f 0a00 	mov.w	sl, #0
 800b1bc:	e71a      	b.n	800aff4 <__ieee754_pow+0x804>
 800b1be:	ec51 0b10 	vmov	r0, r1, d0
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	e7d4      	b.n	800b170 <__ieee754_pow+0x980>
 800b1c6:	491c      	ldr	r1, [pc, #112]	; (800b238 <__ieee754_pow+0xa48>)
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	f7ff bb30 	b.w	800a82e <__ieee754_pow+0x3e>
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	f7ff bb2c 	b.w	800a82e <__ieee754_pow+0x3e>
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	4639      	mov	r1, r7
 800b1da:	f7ff bb28 	b.w	800a82e <__ieee754_pow+0x3e>
 800b1de:	9204      	str	r2, [sp, #16]
 800b1e0:	f7ff bb7a 	b.w	800a8d8 <__ieee754_pow+0xe8>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f7ff bb64 	b.w	800a8b2 <__ieee754_pow+0xc2>
 800b1ea:	bf00      	nop
 800b1ec:	f3af 8000 	nop.w
 800b1f0:	00000000 	.word	0x00000000
 800b1f4:	3fe62e43 	.word	0x3fe62e43
 800b1f8:	fefa39ef 	.word	0xfefa39ef
 800b1fc:	3fe62e42 	.word	0x3fe62e42
 800b200:	0ca86c39 	.word	0x0ca86c39
 800b204:	be205c61 	.word	0xbe205c61
 800b208:	72bea4d0 	.word	0x72bea4d0
 800b20c:	3e663769 	.word	0x3e663769
 800b210:	c5d26bf1 	.word	0xc5d26bf1
 800b214:	3ebbbd41 	.word	0x3ebbbd41
 800b218:	af25de2c 	.word	0xaf25de2c
 800b21c:	3f11566a 	.word	0x3f11566a
 800b220:	16bebd93 	.word	0x16bebd93
 800b224:	3f66c16c 	.word	0x3f66c16c
 800b228:	5555553e 	.word	0x5555553e
 800b22c:	3fc55555 	.word	0x3fc55555
 800b230:	3fe00000 	.word	0x3fe00000
 800b234:	000fffff 	.word	0x000fffff
 800b238:	3ff00000 	.word	0x3ff00000
 800b23c:	4090cbff 	.word	0x4090cbff
 800b240:	3f6f3400 	.word	0x3f6f3400
 800b244:	652b82fe 	.word	0x652b82fe
 800b248:	3c971547 	.word	0x3c971547
 800b24c:	00000000 	.word	0x00000000

0800b250 <__ieee754_rem_pio2>:
 800b250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b254:	ed2d 8b02 	vpush	{d8}
 800b258:	ec55 4b10 	vmov	r4, r5, d0
 800b25c:	4bca      	ldr	r3, [pc, #808]	; (800b588 <__ieee754_rem_pio2+0x338>)
 800b25e:	b08b      	sub	sp, #44	; 0x2c
 800b260:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b264:	4598      	cmp	r8, r3
 800b266:	4682      	mov	sl, r0
 800b268:	9502      	str	r5, [sp, #8]
 800b26a:	dc08      	bgt.n	800b27e <__ieee754_rem_pio2+0x2e>
 800b26c:	2200      	movs	r2, #0
 800b26e:	2300      	movs	r3, #0
 800b270:	ed80 0b00 	vstr	d0, [r0]
 800b274:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b278:	f04f 0b00 	mov.w	fp, #0
 800b27c:	e028      	b.n	800b2d0 <__ieee754_rem_pio2+0x80>
 800b27e:	4bc3      	ldr	r3, [pc, #780]	; (800b58c <__ieee754_rem_pio2+0x33c>)
 800b280:	4598      	cmp	r8, r3
 800b282:	dc78      	bgt.n	800b376 <__ieee754_rem_pio2+0x126>
 800b284:	9b02      	ldr	r3, [sp, #8]
 800b286:	4ec2      	ldr	r6, [pc, #776]	; (800b590 <__ieee754_rem_pio2+0x340>)
 800b288:	2b00      	cmp	r3, #0
 800b28a:	ee10 0a10 	vmov	r0, s0
 800b28e:	a3b0      	add	r3, pc, #704	; (adr r3, 800b550 <__ieee754_rem_pio2+0x300>)
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	4629      	mov	r1, r5
 800b296:	dd39      	ble.n	800b30c <__ieee754_rem_pio2+0xbc>
 800b298:	f7f5 f80e 	bl	80002b8 <__aeabi_dsub>
 800b29c:	45b0      	cmp	r8, r6
 800b29e:	4604      	mov	r4, r0
 800b2a0:	460d      	mov	r5, r1
 800b2a2:	d01b      	beq.n	800b2dc <__ieee754_rem_pio2+0x8c>
 800b2a4:	a3ac      	add	r3, pc, #688	; (adr r3, 800b558 <__ieee754_rem_pio2+0x308>)
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2aa:	f7f5 f805 	bl	80002b8 <__aeabi_dsub>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	e9ca 2300 	strd	r2, r3, [sl]
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	f7f4 fffd 	bl	80002b8 <__aeabi_dsub>
 800b2be:	a3a6      	add	r3, pc, #664	; (adr r3, 800b558 <__ieee754_rem_pio2+0x308>)
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	f7f4 fff8 	bl	80002b8 <__aeabi_dsub>
 800b2c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b2cc:	f04f 0b01 	mov.w	fp, #1
 800b2d0:	4658      	mov	r0, fp
 800b2d2:	b00b      	add	sp, #44	; 0x2c
 800b2d4:	ecbd 8b02 	vpop	{d8}
 800b2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2dc:	a3a0      	add	r3, pc, #640	; (adr r3, 800b560 <__ieee754_rem_pio2+0x310>)
 800b2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e2:	f7f4 ffe9 	bl	80002b8 <__aeabi_dsub>
 800b2e6:	a3a0      	add	r3, pc, #640	; (adr r3, 800b568 <__ieee754_rem_pio2+0x318>)
 800b2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	460d      	mov	r5, r1
 800b2f0:	f7f4 ffe2 	bl	80002b8 <__aeabi_dsub>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	e9ca 2300 	strd	r2, r3, [sl]
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	4629      	mov	r1, r5
 800b300:	f7f4 ffda 	bl	80002b8 <__aeabi_dsub>
 800b304:	a398      	add	r3, pc, #608	; (adr r3, 800b568 <__ieee754_rem_pio2+0x318>)
 800b306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30a:	e7db      	b.n	800b2c4 <__ieee754_rem_pio2+0x74>
 800b30c:	f7f4 ffd6 	bl	80002bc <__adddf3>
 800b310:	45b0      	cmp	r8, r6
 800b312:	4604      	mov	r4, r0
 800b314:	460d      	mov	r5, r1
 800b316:	d016      	beq.n	800b346 <__ieee754_rem_pio2+0xf6>
 800b318:	a38f      	add	r3, pc, #572	; (adr r3, 800b558 <__ieee754_rem_pio2+0x308>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	f7f4 ffcd 	bl	80002bc <__adddf3>
 800b322:	4602      	mov	r2, r0
 800b324:	460b      	mov	r3, r1
 800b326:	e9ca 2300 	strd	r2, r3, [sl]
 800b32a:	4620      	mov	r0, r4
 800b32c:	4629      	mov	r1, r5
 800b32e:	f7f4 ffc3 	bl	80002b8 <__aeabi_dsub>
 800b332:	a389      	add	r3, pc, #548	; (adr r3, 800b558 <__ieee754_rem_pio2+0x308>)
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	f7f4 ffc0 	bl	80002bc <__adddf3>
 800b33c:	f04f 3bff 	mov.w	fp, #4294967295
 800b340:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b344:	e7c4      	b.n	800b2d0 <__ieee754_rem_pio2+0x80>
 800b346:	a386      	add	r3, pc, #536	; (adr r3, 800b560 <__ieee754_rem_pio2+0x310>)
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	f7f4 ffb6 	bl	80002bc <__adddf3>
 800b350:	a385      	add	r3, pc, #532	; (adr r3, 800b568 <__ieee754_rem_pio2+0x318>)
 800b352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b356:	4604      	mov	r4, r0
 800b358:	460d      	mov	r5, r1
 800b35a:	f7f4 ffaf 	bl	80002bc <__adddf3>
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	e9ca 2300 	strd	r2, r3, [sl]
 800b366:	4620      	mov	r0, r4
 800b368:	4629      	mov	r1, r5
 800b36a:	f7f4 ffa5 	bl	80002b8 <__aeabi_dsub>
 800b36e:	a37e      	add	r3, pc, #504	; (adr r3, 800b568 <__ieee754_rem_pio2+0x318>)
 800b370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b374:	e7e0      	b.n	800b338 <__ieee754_rem_pio2+0xe8>
 800b376:	4b87      	ldr	r3, [pc, #540]	; (800b594 <__ieee754_rem_pio2+0x344>)
 800b378:	4598      	cmp	r8, r3
 800b37a:	f300 80d9 	bgt.w	800b530 <__ieee754_rem_pio2+0x2e0>
 800b37e:	f001 f8cf 	bl	800c520 <fabs>
 800b382:	ec55 4b10 	vmov	r4, r5, d0
 800b386:	ee10 0a10 	vmov	r0, s0
 800b38a:	a379      	add	r3, pc, #484	; (adr r3, 800b570 <__ieee754_rem_pio2+0x320>)
 800b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b390:	4629      	mov	r1, r5
 800b392:	f7f5 f949 	bl	8000628 <__aeabi_dmul>
 800b396:	4b80      	ldr	r3, [pc, #512]	; (800b598 <__ieee754_rem_pio2+0x348>)
 800b398:	2200      	movs	r2, #0
 800b39a:	f7f4 ff8f 	bl	80002bc <__adddf3>
 800b39e:	f7f5 fbf3 	bl	8000b88 <__aeabi_d2iz>
 800b3a2:	4683      	mov	fp, r0
 800b3a4:	f7f5 f8d6 	bl	8000554 <__aeabi_i2d>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	ec43 2b18 	vmov	d8, r2, r3
 800b3b0:	a367      	add	r3, pc, #412	; (adr r3, 800b550 <__ieee754_rem_pio2+0x300>)
 800b3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b6:	f7f5 f937 	bl	8000628 <__aeabi_dmul>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	460b      	mov	r3, r1
 800b3be:	4620      	mov	r0, r4
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	f7f4 ff79 	bl	80002b8 <__aeabi_dsub>
 800b3c6:	a364      	add	r3, pc, #400	; (adr r3, 800b558 <__ieee754_rem_pio2+0x308>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	4606      	mov	r6, r0
 800b3ce:	460f      	mov	r7, r1
 800b3d0:	ec51 0b18 	vmov	r0, r1, d8
 800b3d4:	f7f5 f928 	bl	8000628 <__aeabi_dmul>
 800b3d8:	f1bb 0f1f 	cmp.w	fp, #31
 800b3dc:	4604      	mov	r4, r0
 800b3de:	460d      	mov	r5, r1
 800b3e0:	dc0d      	bgt.n	800b3fe <__ieee754_rem_pio2+0x1ae>
 800b3e2:	4b6e      	ldr	r3, [pc, #440]	; (800b59c <__ieee754_rem_pio2+0x34c>)
 800b3e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ec:	4543      	cmp	r3, r8
 800b3ee:	d006      	beq.n	800b3fe <__ieee754_rem_pio2+0x1ae>
 800b3f0:	4622      	mov	r2, r4
 800b3f2:	462b      	mov	r3, r5
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	4639      	mov	r1, r7
 800b3f8:	f7f4 ff5e 	bl	80002b8 <__aeabi_dsub>
 800b3fc:	e00f      	b.n	800b41e <__ieee754_rem_pio2+0x1ce>
 800b3fe:	462b      	mov	r3, r5
 800b400:	4622      	mov	r2, r4
 800b402:	4630      	mov	r0, r6
 800b404:	4639      	mov	r1, r7
 800b406:	f7f4 ff57 	bl	80002b8 <__aeabi_dsub>
 800b40a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b40e:	9303      	str	r3, [sp, #12]
 800b410:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b414:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b418:	f1b8 0f10 	cmp.w	r8, #16
 800b41c:	dc02      	bgt.n	800b424 <__ieee754_rem_pio2+0x1d4>
 800b41e:	e9ca 0100 	strd	r0, r1, [sl]
 800b422:	e039      	b.n	800b498 <__ieee754_rem_pio2+0x248>
 800b424:	a34e      	add	r3, pc, #312	; (adr r3, 800b560 <__ieee754_rem_pio2+0x310>)
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	ec51 0b18 	vmov	r0, r1, d8
 800b42e:	f7f5 f8fb 	bl	8000628 <__aeabi_dmul>
 800b432:	4604      	mov	r4, r0
 800b434:	460d      	mov	r5, r1
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	4630      	mov	r0, r6
 800b43c:	4639      	mov	r1, r7
 800b43e:	f7f4 ff3b 	bl	80002b8 <__aeabi_dsub>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	4680      	mov	r8, r0
 800b448:	4689      	mov	r9, r1
 800b44a:	4630      	mov	r0, r6
 800b44c:	4639      	mov	r1, r7
 800b44e:	f7f4 ff33 	bl	80002b8 <__aeabi_dsub>
 800b452:	4622      	mov	r2, r4
 800b454:	462b      	mov	r3, r5
 800b456:	f7f4 ff2f 	bl	80002b8 <__aeabi_dsub>
 800b45a:	a343      	add	r3, pc, #268	; (adr r3, 800b568 <__ieee754_rem_pio2+0x318>)
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	4604      	mov	r4, r0
 800b462:	460d      	mov	r5, r1
 800b464:	ec51 0b18 	vmov	r0, r1, d8
 800b468:	f7f5 f8de 	bl	8000628 <__aeabi_dmul>
 800b46c:	4622      	mov	r2, r4
 800b46e:	462b      	mov	r3, r5
 800b470:	f7f4 ff22 	bl	80002b8 <__aeabi_dsub>
 800b474:	4602      	mov	r2, r0
 800b476:	460b      	mov	r3, r1
 800b478:	4604      	mov	r4, r0
 800b47a:	460d      	mov	r5, r1
 800b47c:	4640      	mov	r0, r8
 800b47e:	4649      	mov	r1, r9
 800b480:	f7f4 ff1a 	bl	80002b8 <__aeabi_dsub>
 800b484:	9a03      	ldr	r2, [sp, #12]
 800b486:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	2b31      	cmp	r3, #49	; 0x31
 800b48e:	dc24      	bgt.n	800b4da <__ieee754_rem_pio2+0x28a>
 800b490:	e9ca 0100 	strd	r0, r1, [sl]
 800b494:	4646      	mov	r6, r8
 800b496:	464f      	mov	r7, r9
 800b498:	e9da 8900 	ldrd	r8, r9, [sl]
 800b49c:	4630      	mov	r0, r6
 800b49e:	4642      	mov	r2, r8
 800b4a0:	464b      	mov	r3, r9
 800b4a2:	4639      	mov	r1, r7
 800b4a4:	f7f4 ff08 	bl	80002b8 <__aeabi_dsub>
 800b4a8:	462b      	mov	r3, r5
 800b4aa:	4622      	mov	r2, r4
 800b4ac:	f7f4 ff04 	bl	80002b8 <__aeabi_dsub>
 800b4b0:	9b02      	ldr	r3, [sp, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b4b8:	f6bf af0a 	bge.w	800b2d0 <__ieee754_rem_pio2+0x80>
 800b4bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b4c0:	f8ca 3004 	str.w	r3, [sl, #4]
 800b4c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4c8:	f8ca 8000 	str.w	r8, [sl]
 800b4cc:	f8ca 0008 	str.w	r0, [sl, #8]
 800b4d0:	f8ca 300c 	str.w	r3, [sl, #12]
 800b4d4:	f1cb 0b00 	rsb	fp, fp, #0
 800b4d8:	e6fa      	b.n	800b2d0 <__ieee754_rem_pio2+0x80>
 800b4da:	a327      	add	r3, pc, #156	; (adr r3, 800b578 <__ieee754_rem_pio2+0x328>)
 800b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e0:	ec51 0b18 	vmov	r0, r1, d8
 800b4e4:	f7f5 f8a0 	bl	8000628 <__aeabi_dmul>
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	460d      	mov	r5, r1
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	4649      	mov	r1, r9
 800b4f4:	f7f4 fee0 	bl	80002b8 <__aeabi_dsub>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	460f      	mov	r7, r1
 800b500:	4640      	mov	r0, r8
 800b502:	4649      	mov	r1, r9
 800b504:	f7f4 fed8 	bl	80002b8 <__aeabi_dsub>
 800b508:	4622      	mov	r2, r4
 800b50a:	462b      	mov	r3, r5
 800b50c:	f7f4 fed4 	bl	80002b8 <__aeabi_dsub>
 800b510:	a31b      	add	r3, pc, #108	; (adr r3, 800b580 <__ieee754_rem_pio2+0x330>)
 800b512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b516:	4604      	mov	r4, r0
 800b518:	460d      	mov	r5, r1
 800b51a:	ec51 0b18 	vmov	r0, r1, d8
 800b51e:	f7f5 f883 	bl	8000628 <__aeabi_dmul>
 800b522:	4622      	mov	r2, r4
 800b524:	462b      	mov	r3, r5
 800b526:	f7f4 fec7 	bl	80002b8 <__aeabi_dsub>
 800b52a:	4604      	mov	r4, r0
 800b52c:	460d      	mov	r5, r1
 800b52e:	e75f      	b.n	800b3f0 <__ieee754_rem_pio2+0x1a0>
 800b530:	4b1b      	ldr	r3, [pc, #108]	; (800b5a0 <__ieee754_rem_pio2+0x350>)
 800b532:	4598      	cmp	r8, r3
 800b534:	dd36      	ble.n	800b5a4 <__ieee754_rem_pio2+0x354>
 800b536:	ee10 2a10 	vmov	r2, s0
 800b53a:	462b      	mov	r3, r5
 800b53c:	4620      	mov	r0, r4
 800b53e:	4629      	mov	r1, r5
 800b540:	f7f4 feba 	bl	80002b8 <__aeabi_dsub>
 800b544:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b548:	e9ca 0100 	strd	r0, r1, [sl]
 800b54c:	e694      	b.n	800b278 <__ieee754_rem_pio2+0x28>
 800b54e:	bf00      	nop
 800b550:	54400000 	.word	0x54400000
 800b554:	3ff921fb 	.word	0x3ff921fb
 800b558:	1a626331 	.word	0x1a626331
 800b55c:	3dd0b461 	.word	0x3dd0b461
 800b560:	1a600000 	.word	0x1a600000
 800b564:	3dd0b461 	.word	0x3dd0b461
 800b568:	2e037073 	.word	0x2e037073
 800b56c:	3ba3198a 	.word	0x3ba3198a
 800b570:	6dc9c883 	.word	0x6dc9c883
 800b574:	3fe45f30 	.word	0x3fe45f30
 800b578:	2e000000 	.word	0x2e000000
 800b57c:	3ba3198a 	.word	0x3ba3198a
 800b580:	252049c1 	.word	0x252049c1
 800b584:	397b839a 	.word	0x397b839a
 800b588:	3fe921fb 	.word	0x3fe921fb
 800b58c:	4002d97b 	.word	0x4002d97b
 800b590:	3ff921fb 	.word	0x3ff921fb
 800b594:	413921fb 	.word	0x413921fb
 800b598:	3fe00000 	.word	0x3fe00000
 800b59c:	0800d018 	.word	0x0800d018
 800b5a0:	7fefffff 	.word	0x7fefffff
 800b5a4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b5a8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b5ac:	ee10 0a10 	vmov	r0, s0
 800b5b0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b5b4:	ee10 6a10 	vmov	r6, s0
 800b5b8:	460f      	mov	r7, r1
 800b5ba:	f7f5 fae5 	bl	8000b88 <__aeabi_d2iz>
 800b5be:	f7f4 ffc9 	bl	8000554 <__aeabi_i2d>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5ce:	f7f4 fe73 	bl	80002b8 <__aeabi_dsub>
 800b5d2:	4b23      	ldr	r3, [pc, #140]	; (800b660 <__ieee754_rem_pio2+0x410>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f7f5 f827 	bl	8000628 <__aeabi_dmul>
 800b5da:	460f      	mov	r7, r1
 800b5dc:	4606      	mov	r6, r0
 800b5de:	f7f5 fad3 	bl	8000b88 <__aeabi_d2iz>
 800b5e2:	f7f4 ffb7 	bl	8000554 <__aeabi_i2d>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	4639      	mov	r1, r7
 800b5ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5f2:	f7f4 fe61 	bl	80002b8 <__aeabi_dsub>
 800b5f6:	4b1a      	ldr	r3, [pc, #104]	; (800b660 <__ieee754_rem_pio2+0x410>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f7f5 f815 	bl	8000628 <__aeabi_dmul>
 800b5fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b602:	ad04      	add	r5, sp, #16
 800b604:	f04f 0803 	mov.w	r8, #3
 800b608:	46a9      	mov	r9, r5
 800b60a:	2600      	movs	r6, #0
 800b60c:	2700      	movs	r7, #0
 800b60e:	4632      	mov	r2, r6
 800b610:	463b      	mov	r3, r7
 800b612:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b616:	46c3      	mov	fp, r8
 800b618:	3d08      	subs	r5, #8
 800b61a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b61e:	f7f5 fa6b 	bl	8000af8 <__aeabi_dcmpeq>
 800b622:	2800      	cmp	r0, #0
 800b624:	d1f3      	bne.n	800b60e <__ieee754_rem_pio2+0x3be>
 800b626:	4b0f      	ldr	r3, [pc, #60]	; (800b664 <__ieee754_rem_pio2+0x414>)
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	2302      	movs	r3, #2
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	4622      	mov	r2, r4
 800b630:	465b      	mov	r3, fp
 800b632:	4651      	mov	r1, sl
 800b634:	4648      	mov	r0, r9
 800b636:	f000 f993 	bl	800b960 <__kernel_rem_pio2>
 800b63a:	9b02      	ldr	r3, [sp, #8]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	4683      	mov	fp, r0
 800b640:	f6bf ae46 	bge.w	800b2d0 <__ieee754_rem_pio2+0x80>
 800b644:	e9da 2100 	ldrd	r2, r1, [sl]
 800b648:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b64c:	e9ca 2300 	strd	r2, r3, [sl]
 800b650:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b654:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b658:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b65c:	e73a      	b.n	800b4d4 <__ieee754_rem_pio2+0x284>
 800b65e:	bf00      	nop
 800b660:	41700000 	.word	0x41700000
 800b664:	0800d098 	.word	0x0800d098

0800b668 <__ieee754_sqrt>:
 800b668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66c:	ec55 4b10 	vmov	r4, r5, d0
 800b670:	4e55      	ldr	r6, [pc, #340]	; (800b7c8 <__ieee754_sqrt+0x160>)
 800b672:	43ae      	bics	r6, r5
 800b674:	ee10 0a10 	vmov	r0, s0
 800b678:	ee10 3a10 	vmov	r3, s0
 800b67c:	462a      	mov	r2, r5
 800b67e:	4629      	mov	r1, r5
 800b680:	d110      	bne.n	800b6a4 <__ieee754_sqrt+0x3c>
 800b682:	ee10 2a10 	vmov	r2, s0
 800b686:	462b      	mov	r3, r5
 800b688:	f7f4 ffce 	bl	8000628 <__aeabi_dmul>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	4620      	mov	r0, r4
 800b692:	4629      	mov	r1, r5
 800b694:	f7f4 fe12 	bl	80002bc <__adddf3>
 800b698:	4604      	mov	r4, r0
 800b69a:	460d      	mov	r5, r1
 800b69c:	ec45 4b10 	vmov	d0, r4, r5
 800b6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a4:	2d00      	cmp	r5, #0
 800b6a6:	dc10      	bgt.n	800b6ca <__ieee754_sqrt+0x62>
 800b6a8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b6ac:	4330      	orrs	r0, r6
 800b6ae:	d0f5      	beq.n	800b69c <__ieee754_sqrt+0x34>
 800b6b0:	b15d      	cbz	r5, 800b6ca <__ieee754_sqrt+0x62>
 800b6b2:	ee10 2a10 	vmov	r2, s0
 800b6b6:	462b      	mov	r3, r5
 800b6b8:	ee10 0a10 	vmov	r0, s0
 800b6bc:	f7f4 fdfc 	bl	80002b8 <__aeabi_dsub>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	f7f5 f8da 	bl	800087c <__aeabi_ddiv>
 800b6c8:	e7e6      	b.n	800b698 <__ieee754_sqrt+0x30>
 800b6ca:	1512      	asrs	r2, r2, #20
 800b6cc:	d074      	beq.n	800b7b8 <__ieee754_sqrt+0x150>
 800b6ce:	07d4      	lsls	r4, r2, #31
 800b6d0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b6d4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b6d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b6dc:	bf5e      	ittt	pl
 800b6de:	0fda      	lsrpl	r2, r3, #31
 800b6e0:	005b      	lslpl	r3, r3, #1
 800b6e2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b6e6:	2400      	movs	r4, #0
 800b6e8:	0fda      	lsrs	r2, r3, #31
 800b6ea:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b6ee:	107f      	asrs	r7, r7, #1
 800b6f0:	005b      	lsls	r3, r3, #1
 800b6f2:	2516      	movs	r5, #22
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b6fa:	1886      	adds	r6, r0, r2
 800b6fc:	428e      	cmp	r6, r1
 800b6fe:	bfde      	ittt	le
 800b700:	1b89      	suble	r1, r1, r6
 800b702:	18b0      	addle	r0, r6, r2
 800b704:	18a4      	addle	r4, r4, r2
 800b706:	0049      	lsls	r1, r1, #1
 800b708:	3d01      	subs	r5, #1
 800b70a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b70e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b712:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b716:	d1f0      	bne.n	800b6fa <__ieee754_sqrt+0x92>
 800b718:	462a      	mov	r2, r5
 800b71a:	f04f 0e20 	mov.w	lr, #32
 800b71e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b722:	4281      	cmp	r1, r0
 800b724:	eb06 0c05 	add.w	ip, r6, r5
 800b728:	dc02      	bgt.n	800b730 <__ieee754_sqrt+0xc8>
 800b72a:	d113      	bne.n	800b754 <__ieee754_sqrt+0xec>
 800b72c:	459c      	cmp	ip, r3
 800b72e:	d811      	bhi.n	800b754 <__ieee754_sqrt+0xec>
 800b730:	f1bc 0f00 	cmp.w	ip, #0
 800b734:	eb0c 0506 	add.w	r5, ip, r6
 800b738:	da43      	bge.n	800b7c2 <__ieee754_sqrt+0x15a>
 800b73a:	2d00      	cmp	r5, #0
 800b73c:	db41      	blt.n	800b7c2 <__ieee754_sqrt+0x15a>
 800b73e:	f100 0801 	add.w	r8, r0, #1
 800b742:	1a09      	subs	r1, r1, r0
 800b744:	459c      	cmp	ip, r3
 800b746:	bf88      	it	hi
 800b748:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b74c:	eba3 030c 	sub.w	r3, r3, ip
 800b750:	4432      	add	r2, r6
 800b752:	4640      	mov	r0, r8
 800b754:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b758:	f1be 0e01 	subs.w	lr, lr, #1
 800b75c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b760:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b764:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b768:	d1db      	bne.n	800b722 <__ieee754_sqrt+0xba>
 800b76a:	430b      	orrs	r3, r1
 800b76c:	d006      	beq.n	800b77c <__ieee754_sqrt+0x114>
 800b76e:	1c50      	adds	r0, r2, #1
 800b770:	bf13      	iteet	ne
 800b772:	3201      	addne	r2, #1
 800b774:	3401      	addeq	r4, #1
 800b776:	4672      	moveq	r2, lr
 800b778:	f022 0201 	bicne.w	r2, r2, #1
 800b77c:	1063      	asrs	r3, r4, #1
 800b77e:	0852      	lsrs	r2, r2, #1
 800b780:	07e1      	lsls	r1, r4, #31
 800b782:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b786:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b78a:	bf48      	it	mi
 800b78c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b790:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b794:	4614      	mov	r4, r2
 800b796:	e781      	b.n	800b69c <__ieee754_sqrt+0x34>
 800b798:	0ad9      	lsrs	r1, r3, #11
 800b79a:	3815      	subs	r0, #21
 800b79c:	055b      	lsls	r3, r3, #21
 800b79e:	2900      	cmp	r1, #0
 800b7a0:	d0fa      	beq.n	800b798 <__ieee754_sqrt+0x130>
 800b7a2:	02cd      	lsls	r5, r1, #11
 800b7a4:	d50a      	bpl.n	800b7bc <__ieee754_sqrt+0x154>
 800b7a6:	f1c2 0420 	rsb	r4, r2, #32
 800b7aa:	fa23 f404 	lsr.w	r4, r3, r4
 800b7ae:	1e55      	subs	r5, r2, #1
 800b7b0:	4093      	lsls	r3, r2
 800b7b2:	4321      	orrs	r1, r4
 800b7b4:	1b42      	subs	r2, r0, r5
 800b7b6:	e78a      	b.n	800b6ce <__ieee754_sqrt+0x66>
 800b7b8:	4610      	mov	r0, r2
 800b7ba:	e7f0      	b.n	800b79e <__ieee754_sqrt+0x136>
 800b7bc:	0049      	lsls	r1, r1, #1
 800b7be:	3201      	adds	r2, #1
 800b7c0:	e7ef      	b.n	800b7a2 <__ieee754_sqrt+0x13a>
 800b7c2:	4680      	mov	r8, r0
 800b7c4:	e7bd      	b.n	800b742 <__ieee754_sqrt+0xda>
 800b7c6:	bf00      	nop
 800b7c8:	7ff00000 	.word	0x7ff00000
 800b7cc:	00000000 	.word	0x00000000

0800b7d0 <__kernel_cos>:
 800b7d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d4:	ec57 6b10 	vmov	r6, r7, d0
 800b7d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b7dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b7e0:	ed8d 1b00 	vstr	d1, [sp]
 800b7e4:	da07      	bge.n	800b7f6 <__kernel_cos+0x26>
 800b7e6:	ee10 0a10 	vmov	r0, s0
 800b7ea:	4639      	mov	r1, r7
 800b7ec:	f7f5 f9cc 	bl	8000b88 <__aeabi_d2iz>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	f000 8088 	beq.w	800b906 <__kernel_cos+0x136>
 800b7f6:	4632      	mov	r2, r6
 800b7f8:	463b      	mov	r3, r7
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	4639      	mov	r1, r7
 800b7fe:	f7f4 ff13 	bl	8000628 <__aeabi_dmul>
 800b802:	4b51      	ldr	r3, [pc, #324]	; (800b948 <__kernel_cos+0x178>)
 800b804:	2200      	movs	r2, #0
 800b806:	4604      	mov	r4, r0
 800b808:	460d      	mov	r5, r1
 800b80a:	f7f4 ff0d 	bl	8000628 <__aeabi_dmul>
 800b80e:	a340      	add	r3, pc, #256	; (adr r3, 800b910 <__kernel_cos+0x140>)
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	4682      	mov	sl, r0
 800b816:	468b      	mov	fp, r1
 800b818:	4620      	mov	r0, r4
 800b81a:	4629      	mov	r1, r5
 800b81c:	f7f4 ff04 	bl	8000628 <__aeabi_dmul>
 800b820:	a33d      	add	r3, pc, #244	; (adr r3, 800b918 <__kernel_cos+0x148>)
 800b822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b826:	f7f4 fd49 	bl	80002bc <__adddf3>
 800b82a:	4622      	mov	r2, r4
 800b82c:	462b      	mov	r3, r5
 800b82e:	f7f4 fefb 	bl	8000628 <__aeabi_dmul>
 800b832:	a33b      	add	r3, pc, #236	; (adr r3, 800b920 <__kernel_cos+0x150>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f7f4 fd3e 	bl	80002b8 <__aeabi_dsub>
 800b83c:	4622      	mov	r2, r4
 800b83e:	462b      	mov	r3, r5
 800b840:	f7f4 fef2 	bl	8000628 <__aeabi_dmul>
 800b844:	a338      	add	r3, pc, #224	; (adr r3, 800b928 <__kernel_cos+0x158>)
 800b846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84a:	f7f4 fd37 	bl	80002bc <__adddf3>
 800b84e:	4622      	mov	r2, r4
 800b850:	462b      	mov	r3, r5
 800b852:	f7f4 fee9 	bl	8000628 <__aeabi_dmul>
 800b856:	a336      	add	r3, pc, #216	; (adr r3, 800b930 <__kernel_cos+0x160>)
 800b858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85c:	f7f4 fd2c 	bl	80002b8 <__aeabi_dsub>
 800b860:	4622      	mov	r2, r4
 800b862:	462b      	mov	r3, r5
 800b864:	f7f4 fee0 	bl	8000628 <__aeabi_dmul>
 800b868:	a333      	add	r3, pc, #204	; (adr r3, 800b938 <__kernel_cos+0x168>)
 800b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86e:	f7f4 fd25 	bl	80002bc <__adddf3>
 800b872:	4622      	mov	r2, r4
 800b874:	462b      	mov	r3, r5
 800b876:	f7f4 fed7 	bl	8000628 <__aeabi_dmul>
 800b87a:	4622      	mov	r2, r4
 800b87c:	462b      	mov	r3, r5
 800b87e:	f7f4 fed3 	bl	8000628 <__aeabi_dmul>
 800b882:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b886:	4604      	mov	r4, r0
 800b888:	460d      	mov	r5, r1
 800b88a:	4630      	mov	r0, r6
 800b88c:	4639      	mov	r1, r7
 800b88e:	f7f4 fecb 	bl	8000628 <__aeabi_dmul>
 800b892:	460b      	mov	r3, r1
 800b894:	4602      	mov	r2, r0
 800b896:	4629      	mov	r1, r5
 800b898:	4620      	mov	r0, r4
 800b89a:	f7f4 fd0d 	bl	80002b8 <__aeabi_dsub>
 800b89e:	4b2b      	ldr	r3, [pc, #172]	; (800b94c <__kernel_cos+0x17c>)
 800b8a0:	4598      	cmp	r8, r3
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	460f      	mov	r7, r1
 800b8a6:	dc10      	bgt.n	800b8ca <__kernel_cos+0xfa>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	4650      	mov	r0, sl
 800b8ae:	4659      	mov	r1, fp
 800b8b0:	f7f4 fd02 	bl	80002b8 <__aeabi_dsub>
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4926      	ldr	r1, [pc, #152]	; (800b950 <__kernel_cos+0x180>)
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	f7f4 fcfc 	bl	80002b8 <__aeabi_dsub>
 800b8c0:	ec41 0b10 	vmov	d0, r0, r1
 800b8c4:	b003      	add	sp, #12
 800b8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ca:	4b22      	ldr	r3, [pc, #136]	; (800b954 <__kernel_cos+0x184>)
 800b8cc:	4920      	ldr	r1, [pc, #128]	; (800b950 <__kernel_cos+0x180>)
 800b8ce:	4598      	cmp	r8, r3
 800b8d0:	bfcc      	ite	gt
 800b8d2:	4d21      	ldrgt	r5, [pc, #132]	; (800b958 <__kernel_cos+0x188>)
 800b8d4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b8d8:	2400      	movs	r4, #0
 800b8da:	4622      	mov	r2, r4
 800b8dc:	462b      	mov	r3, r5
 800b8de:	2000      	movs	r0, #0
 800b8e0:	f7f4 fcea 	bl	80002b8 <__aeabi_dsub>
 800b8e4:	4622      	mov	r2, r4
 800b8e6:	4680      	mov	r8, r0
 800b8e8:	4689      	mov	r9, r1
 800b8ea:	462b      	mov	r3, r5
 800b8ec:	4650      	mov	r0, sl
 800b8ee:	4659      	mov	r1, fp
 800b8f0:	f7f4 fce2 	bl	80002b8 <__aeabi_dsub>
 800b8f4:	4632      	mov	r2, r6
 800b8f6:	463b      	mov	r3, r7
 800b8f8:	f7f4 fcde 	bl	80002b8 <__aeabi_dsub>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	460b      	mov	r3, r1
 800b900:	4640      	mov	r0, r8
 800b902:	4649      	mov	r1, r9
 800b904:	e7da      	b.n	800b8bc <__kernel_cos+0xec>
 800b906:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b940 <__kernel_cos+0x170>
 800b90a:	e7db      	b.n	800b8c4 <__kernel_cos+0xf4>
 800b90c:	f3af 8000 	nop.w
 800b910:	be8838d4 	.word	0xbe8838d4
 800b914:	bda8fae9 	.word	0xbda8fae9
 800b918:	bdb4b1c4 	.word	0xbdb4b1c4
 800b91c:	3e21ee9e 	.word	0x3e21ee9e
 800b920:	809c52ad 	.word	0x809c52ad
 800b924:	3e927e4f 	.word	0x3e927e4f
 800b928:	19cb1590 	.word	0x19cb1590
 800b92c:	3efa01a0 	.word	0x3efa01a0
 800b930:	16c15177 	.word	0x16c15177
 800b934:	3f56c16c 	.word	0x3f56c16c
 800b938:	5555554c 	.word	0x5555554c
 800b93c:	3fa55555 	.word	0x3fa55555
 800b940:	00000000 	.word	0x00000000
 800b944:	3ff00000 	.word	0x3ff00000
 800b948:	3fe00000 	.word	0x3fe00000
 800b94c:	3fd33332 	.word	0x3fd33332
 800b950:	3ff00000 	.word	0x3ff00000
 800b954:	3fe90000 	.word	0x3fe90000
 800b958:	3fd20000 	.word	0x3fd20000
 800b95c:	00000000 	.word	0x00000000

0800b960 <__kernel_rem_pio2>:
 800b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b964:	ed2d 8b02 	vpush	{d8}
 800b968:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b96c:	f112 0f14 	cmn.w	r2, #20
 800b970:	9308      	str	r3, [sp, #32]
 800b972:	9101      	str	r1, [sp, #4]
 800b974:	4bc4      	ldr	r3, [pc, #784]	; (800bc88 <__kernel_rem_pio2+0x328>)
 800b976:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b978:	900b      	str	r0, [sp, #44]	; 0x2c
 800b97a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b97e:	9302      	str	r3, [sp, #8]
 800b980:	9b08      	ldr	r3, [sp, #32]
 800b982:	f103 33ff 	add.w	r3, r3, #4294967295
 800b986:	bfa8      	it	ge
 800b988:	1ed4      	subge	r4, r2, #3
 800b98a:	9306      	str	r3, [sp, #24]
 800b98c:	bfb2      	itee	lt
 800b98e:	2400      	movlt	r4, #0
 800b990:	2318      	movge	r3, #24
 800b992:	fb94 f4f3 	sdivge	r4, r4, r3
 800b996:	f06f 0317 	mvn.w	r3, #23
 800b99a:	fb04 3303 	mla	r3, r4, r3, r3
 800b99e:	eb03 0a02 	add.w	sl, r3, r2
 800b9a2:	9b02      	ldr	r3, [sp, #8]
 800b9a4:	9a06      	ldr	r2, [sp, #24]
 800b9a6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800bc78 <__kernel_rem_pio2+0x318>
 800b9aa:	eb03 0802 	add.w	r8, r3, r2
 800b9ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b9b0:	1aa7      	subs	r7, r4, r2
 800b9b2:	ae22      	add	r6, sp, #136	; 0x88
 800b9b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b9b8:	2500      	movs	r5, #0
 800b9ba:	4545      	cmp	r5, r8
 800b9bc:	dd13      	ble.n	800b9e6 <__kernel_rem_pio2+0x86>
 800b9be:	9b08      	ldr	r3, [sp, #32]
 800b9c0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800bc78 <__kernel_rem_pio2+0x318>
 800b9c4:	aa22      	add	r2, sp, #136	; 0x88
 800b9c6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b9ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b9ce:	f04f 0800 	mov.w	r8, #0
 800b9d2:	9b02      	ldr	r3, [sp, #8]
 800b9d4:	4598      	cmp	r8, r3
 800b9d6:	dc2f      	bgt.n	800ba38 <__kernel_rem_pio2+0xd8>
 800b9d8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b9dc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b9e0:	462f      	mov	r7, r5
 800b9e2:	2600      	movs	r6, #0
 800b9e4:	e01b      	b.n	800ba1e <__kernel_rem_pio2+0xbe>
 800b9e6:	42ef      	cmn	r7, r5
 800b9e8:	d407      	bmi.n	800b9fa <__kernel_rem_pio2+0x9a>
 800b9ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b9ee:	f7f4 fdb1 	bl	8000554 <__aeabi_i2d>
 800b9f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b9f6:	3501      	adds	r5, #1
 800b9f8:	e7df      	b.n	800b9ba <__kernel_rem_pio2+0x5a>
 800b9fa:	ec51 0b18 	vmov	r0, r1, d8
 800b9fe:	e7f8      	b.n	800b9f2 <__kernel_rem_pio2+0x92>
 800ba00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ba08:	f7f4 fe0e 	bl	8000628 <__aeabi_dmul>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	460b      	mov	r3, r1
 800ba10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba14:	f7f4 fc52 	bl	80002bc <__adddf3>
 800ba18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba1c:	3601      	adds	r6, #1
 800ba1e:	9b06      	ldr	r3, [sp, #24]
 800ba20:	429e      	cmp	r6, r3
 800ba22:	f1a7 0708 	sub.w	r7, r7, #8
 800ba26:	ddeb      	ble.n	800ba00 <__kernel_rem_pio2+0xa0>
 800ba28:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ba2c:	f108 0801 	add.w	r8, r8, #1
 800ba30:	ecab 7b02 	vstmia	fp!, {d7}
 800ba34:	3508      	adds	r5, #8
 800ba36:	e7cc      	b.n	800b9d2 <__kernel_rem_pio2+0x72>
 800ba38:	9b02      	ldr	r3, [sp, #8]
 800ba3a:	aa0e      	add	r2, sp, #56	; 0x38
 800ba3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba40:	930d      	str	r3, [sp, #52]	; 0x34
 800ba42:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ba44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ba48:	9c02      	ldr	r4, [sp, #8]
 800ba4a:	930c      	str	r3, [sp, #48]	; 0x30
 800ba4c:	00e3      	lsls	r3, r4, #3
 800ba4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba50:	ab9a      	add	r3, sp, #616	; 0x268
 800ba52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba56:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ba5a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ba5e:	ab72      	add	r3, sp, #456	; 0x1c8
 800ba60:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ba64:	46c3      	mov	fp, r8
 800ba66:	46a1      	mov	r9, r4
 800ba68:	f1b9 0f00 	cmp.w	r9, #0
 800ba6c:	f1a5 0508 	sub.w	r5, r5, #8
 800ba70:	dc77      	bgt.n	800bb62 <__kernel_rem_pio2+0x202>
 800ba72:	ec47 6b10 	vmov	d0, r6, r7
 800ba76:	4650      	mov	r0, sl
 800ba78:	f000 fde6 	bl	800c648 <scalbn>
 800ba7c:	ec57 6b10 	vmov	r6, r7, d0
 800ba80:	2200      	movs	r2, #0
 800ba82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ba86:	ee10 0a10 	vmov	r0, s0
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	f7f4 fdcc 	bl	8000628 <__aeabi_dmul>
 800ba90:	ec41 0b10 	vmov	d0, r0, r1
 800ba94:	f000 fd58 	bl	800c548 <floor>
 800ba98:	4b7c      	ldr	r3, [pc, #496]	; (800bc8c <__kernel_rem_pio2+0x32c>)
 800ba9a:	ec51 0b10 	vmov	r0, r1, d0
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f7f4 fdc2 	bl	8000628 <__aeabi_dmul>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4630      	mov	r0, r6
 800baaa:	4639      	mov	r1, r7
 800baac:	f7f4 fc04 	bl	80002b8 <__aeabi_dsub>
 800bab0:	460f      	mov	r7, r1
 800bab2:	4606      	mov	r6, r0
 800bab4:	f7f5 f868 	bl	8000b88 <__aeabi_d2iz>
 800bab8:	9004      	str	r0, [sp, #16]
 800baba:	f7f4 fd4b 	bl	8000554 <__aeabi_i2d>
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	4630      	mov	r0, r6
 800bac4:	4639      	mov	r1, r7
 800bac6:	f7f4 fbf7 	bl	80002b8 <__aeabi_dsub>
 800baca:	f1ba 0f00 	cmp.w	sl, #0
 800bace:	4606      	mov	r6, r0
 800bad0:	460f      	mov	r7, r1
 800bad2:	dd6d      	ble.n	800bbb0 <__kernel_rem_pio2+0x250>
 800bad4:	1e62      	subs	r2, r4, #1
 800bad6:	ab0e      	add	r3, sp, #56	; 0x38
 800bad8:	9d04      	ldr	r5, [sp, #16]
 800bada:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bade:	f1ca 0118 	rsb	r1, sl, #24
 800bae2:	fa40 f301 	asr.w	r3, r0, r1
 800bae6:	441d      	add	r5, r3
 800bae8:	408b      	lsls	r3, r1
 800baea:	1ac0      	subs	r0, r0, r3
 800baec:	ab0e      	add	r3, sp, #56	; 0x38
 800baee:	9504      	str	r5, [sp, #16]
 800baf0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800baf4:	f1ca 0317 	rsb	r3, sl, #23
 800baf8:	fa40 fb03 	asr.w	fp, r0, r3
 800bafc:	f1bb 0f00 	cmp.w	fp, #0
 800bb00:	dd65      	ble.n	800bbce <__kernel_rem_pio2+0x26e>
 800bb02:	9b04      	ldr	r3, [sp, #16]
 800bb04:	2200      	movs	r2, #0
 800bb06:	3301      	adds	r3, #1
 800bb08:	9304      	str	r3, [sp, #16]
 800bb0a:	4615      	mov	r5, r2
 800bb0c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bb10:	4294      	cmp	r4, r2
 800bb12:	f300 809c 	bgt.w	800bc4e <__kernel_rem_pio2+0x2ee>
 800bb16:	f1ba 0f00 	cmp.w	sl, #0
 800bb1a:	dd07      	ble.n	800bb2c <__kernel_rem_pio2+0x1cc>
 800bb1c:	f1ba 0f01 	cmp.w	sl, #1
 800bb20:	f000 80c0 	beq.w	800bca4 <__kernel_rem_pio2+0x344>
 800bb24:	f1ba 0f02 	cmp.w	sl, #2
 800bb28:	f000 80c6 	beq.w	800bcb8 <__kernel_rem_pio2+0x358>
 800bb2c:	f1bb 0f02 	cmp.w	fp, #2
 800bb30:	d14d      	bne.n	800bbce <__kernel_rem_pio2+0x26e>
 800bb32:	4632      	mov	r2, r6
 800bb34:	463b      	mov	r3, r7
 800bb36:	4956      	ldr	r1, [pc, #344]	; (800bc90 <__kernel_rem_pio2+0x330>)
 800bb38:	2000      	movs	r0, #0
 800bb3a:	f7f4 fbbd 	bl	80002b8 <__aeabi_dsub>
 800bb3e:	4606      	mov	r6, r0
 800bb40:	460f      	mov	r7, r1
 800bb42:	2d00      	cmp	r5, #0
 800bb44:	d043      	beq.n	800bbce <__kernel_rem_pio2+0x26e>
 800bb46:	4650      	mov	r0, sl
 800bb48:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800bc80 <__kernel_rem_pio2+0x320>
 800bb4c:	f000 fd7c 	bl	800c648 <scalbn>
 800bb50:	4630      	mov	r0, r6
 800bb52:	4639      	mov	r1, r7
 800bb54:	ec53 2b10 	vmov	r2, r3, d0
 800bb58:	f7f4 fbae 	bl	80002b8 <__aeabi_dsub>
 800bb5c:	4606      	mov	r6, r0
 800bb5e:	460f      	mov	r7, r1
 800bb60:	e035      	b.n	800bbce <__kernel_rem_pio2+0x26e>
 800bb62:	4b4c      	ldr	r3, [pc, #304]	; (800bc94 <__kernel_rem_pio2+0x334>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	4630      	mov	r0, r6
 800bb68:	4639      	mov	r1, r7
 800bb6a:	f7f4 fd5d 	bl	8000628 <__aeabi_dmul>
 800bb6e:	f7f5 f80b 	bl	8000b88 <__aeabi_d2iz>
 800bb72:	f7f4 fcef 	bl	8000554 <__aeabi_i2d>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	ec43 2b18 	vmov	d8, r2, r3
 800bb7e:	4b46      	ldr	r3, [pc, #280]	; (800bc98 <__kernel_rem_pio2+0x338>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	f7f4 fd51 	bl	8000628 <__aeabi_dmul>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	4639      	mov	r1, r7
 800bb8e:	f7f4 fb93 	bl	80002b8 <__aeabi_dsub>
 800bb92:	f7f4 fff9 	bl	8000b88 <__aeabi_d2iz>
 800bb96:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb9a:	f84b 0b04 	str.w	r0, [fp], #4
 800bb9e:	ec51 0b18 	vmov	r0, r1, d8
 800bba2:	f7f4 fb8b 	bl	80002bc <__adddf3>
 800bba6:	f109 39ff 	add.w	r9, r9, #4294967295
 800bbaa:	4606      	mov	r6, r0
 800bbac:	460f      	mov	r7, r1
 800bbae:	e75b      	b.n	800ba68 <__kernel_rem_pio2+0x108>
 800bbb0:	d106      	bne.n	800bbc0 <__kernel_rem_pio2+0x260>
 800bbb2:	1e63      	subs	r3, r4, #1
 800bbb4:	aa0e      	add	r2, sp, #56	; 0x38
 800bbb6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bbba:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800bbbe:	e79d      	b.n	800bafc <__kernel_rem_pio2+0x19c>
 800bbc0:	4b36      	ldr	r3, [pc, #216]	; (800bc9c <__kernel_rem_pio2+0x33c>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f7f4 ffb6 	bl	8000b34 <__aeabi_dcmpge>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d13d      	bne.n	800bc48 <__kernel_rem_pio2+0x2e8>
 800bbcc:	4683      	mov	fp, r0
 800bbce:	2200      	movs	r2, #0
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	4639      	mov	r1, r7
 800bbd6:	f7f4 ff8f 	bl	8000af8 <__aeabi_dcmpeq>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	f000 80c0 	beq.w	800bd60 <__kernel_rem_pio2+0x400>
 800bbe0:	1e65      	subs	r5, r4, #1
 800bbe2:	462b      	mov	r3, r5
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	9902      	ldr	r1, [sp, #8]
 800bbe8:	428b      	cmp	r3, r1
 800bbea:	da6c      	bge.n	800bcc6 <__kernel_rem_pio2+0x366>
 800bbec:	2a00      	cmp	r2, #0
 800bbee:	f000 8089 	beq.w	800bd04 <__kernel_rem_pio2+0x3a4>
 800bbf2:	ab0e      	add	r3, sp, #56	; 0x38
 800bbf4:	f1aa 0a18 	sub.w	sl, sl, #24
 800bbf8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f000 80ad 	beq.w	800bd5c <__kernel_rem_pio2+0x3fc>
 800bc02:	4650      	mov	r0, sl
 800bc04:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800bc80 <__kernel_rem_pio2+0x320>
 800bc08:	f000 fd1e 	bl	800c648 <scalbn>
 800bc0c:	ab9a      	add	r3, sp, #616	; 0x268
 800bc0e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bc12:	ec57 6b10 	vmov	r6, r7, d0
 800bc16:	00ec      	lsls	r4, r5, #3
 800bc18:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800bc1c:	46aa      	mov	sl, r5
 800bc1e:	f1ba 0f00 	cmp.w	sl, #0
 800bc22:	f280 80d6 	bge.w	800bdd2 <__kernel_rem_pio2+0x472>
 800bc26:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800bc78 <__kernel_rem_pio2+0x318>
 800bc2a:	462e      	mov	r6, r5
 800bc2c:	2e00      	cmp	r6, #0
 800bc2e:	f2c0 8104 	blt.w	800be3a <__kernel_rem_pio2+0x4da>
 800bc32:	ab72      	add	r3, sp, #456	; 0x1c8
 800bc34:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bc38:	f8df a064 	ldr.w	sl, [pc, #100]	; 800bca0 <__kernel_rem_pio2+0x340>
 800bc3c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800bc40:	f04f 0800 	mov.w	r8, #0
 800bc44:	1baf      	subs	r7, r5, r6
 800bc46:	e0ea      	b.n	800be1e <__kernel_rem_pio2+0x4be>
 800bc48:	f04f 0b02 	mov.w	fp, #2
 800bc4c:	e759      	b.n	800bb02 <__kernel_rem_pio2+0x1a2>
 800bc4e:	f8d8 3000 	ldr.w	r3, [r8]
 800bc52:	b955      	cbnz	r5, 800bc6a <__kernel_rem_pio2+0x30a>
 800bc54:	b123      	cbz	r3, 800bc60 <__kernel_rem_pio2+0x300>
 800bc56:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bc5a:	f8c8 3000 	str.w	r3, [r8]
 800bc5e:	2301      	movs	r3, #1
 800bc60:	3201      	adds	r2, #1
 800bc62:	f108 0804 	add.w	r8, r8, #4
 800bc66:	461d      	mov	r5, r3
 800bc68:	e752      	b.n	800bb10 <__kernel_rem_pio2+0x1b0>
 800bc6a:	1acb      	subs	r3, r1, r3
 800bc6c:	f8c8 3000 	str.w	r3, [r8]
 800bc70:	462b      	mov	r3, r5
 800bc72:	e7f5      	b.n	800bc60 <__kernel_rem_pio2+0x300>
 800bc74:	f3af 8000 	nop.w
	...
 800bc84:	3ff00000 	.word	0x3ff00000
 800bc88:	0800d1e0 	.word	0x0800d1e0
 800bc8c:	40200000 	.word	0x40200000
 800bc90:	3ff00000 	.word	0x3ff00000
 800bc94:	3e700000 	.word	0x3e700000
 800bc98:	41700000 	.word	0x41700000
 800bc9c:	3fe00000 	.word	0x3fe00000
 800bca0:	0800d1a0 	.word	0x0800d1a0
 800bca4:	1e62      	subs	r2, r4, #1
 800bca6:	ab0e      	add	r3, sp, #56	; 0x38
 800bca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bcb0:	a90e      	add	r1, sp, #56	; 0x38
 800bcb2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bcb6:	e739      	b.n	800bb2c <__kernel_rem_pio2+0x1cc>
 800bcb8:	1e62      	subs	r2, r4, #1
 800bcba:	ab0e      	add	r3, sp, #56	; 0x38
 800bcbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bcc4:	e7f4      	b.n	800bcb0 <__kernel_rem_pio2+0x350>
 800bcc6:	a90e      	add	r1, sp, #56	; 0x38
 800bcc8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bccc:	3b01      	subs	r3, #1
 800bcce:	430a      	orrs	r2, r1
 800bcd0:	e789      	b.n	800bbe6 <__kernel_rem_pio2+0x286>
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bcd8:	2900      	cmp	r1, #0
 800bcda:	d0fa      	beq.n	800bcd2 <__kernel_rem_pio2+0x372>
 800bcdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcde:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800bce2:	446a      	add	r2, sp
 800bce4:	3a98      	subs	r2, #152	; 0x98
 800bce6:	920a      	str	r2, [sp, #40]	; 0x28
 800bce8:	9a08      	ldr	r2, [sp, #32]
 800bcea:	18e3      	adds	r3, r4, r3
 800bcec:	18a5      	adds	r5, r4, r2
 800bcee:	aa22      	add	r2, sp, #136	; 0x88
 800bcf0:	f104 0801 	add.w	r8, r4, #1
 800bcf4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800bcf8:	9304      	str	r3, [sp, #16]
 800bcfa:	9b04      	ldr	r3, [sp, #16]
 800bcfc:	4543      	cmp	r3, r8
 800bcfe:	da04      	bge.n	800bd0a <__kernel_rem_pio2+0x3aa>
 800bd00:	461c      	mov	r4, r3
 800bd02:	e6a3      	b.n	800ba4c <__kernel_rem_pio2+0xec>
 800bd04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd06:	2301      	movs	r3, #1
 800bd08:	e7e4      	b.n	800bcd4 <__kernel_rem_pio2+0x374>
 800bd0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd0c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bd10:	f7f4 fc20 	bl	8000554 <__aeabi_i2d>
 800bd14:	e8e5 0102 	strd	r0, r1, [r5], #8
 800bd18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd1a:	46ab      	mov	fp, r5
 800bd1c:	461c      	mov	r4, r3
 800bd1e:	f04f 0900 	mov.w	r9, #0
 800bd22:	2600      	movs	r6, #0
 800bd24:	2700      	movs	r7, #0
 800bd26:	9b06      	ldr	r3, [sp, #24]
 800bd28:	4599      	cmp	r9, r3
 800bd2a:	dd06      	ble.n	800bd3a <__kernel_rem_pio2+0x3da>
 800bd2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd2e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800bd32:	f108 0801 	add.w	r8, r8, #1
 800bd36:	930a      	str	r3, [sp, #40]	; 0x28
 800bd38:	e7df      	b.n	800bcfa <__kernel_rem_pio2+0x39a>
 800bd3a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bd3e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bd42:	f7f4 fc71 	bl	8000628 <__aeabi_dmul>
 800bd46:	4602      	mov	r2, r0
 800bd48:	460b      	mov	r3, r1
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	4639      	mov	r1, r7
 800bd4e:	f7f4 fab5 	bl	80002bc <__adddf3>
 800bd52:	f109 0901 	add.w	r9, r9, #1
 800bd56:	4606      	mov	r6, r0
 800bd58:	460f      	mov	r7, r1
 800bd5a:	e7e4      	b.n	800bd26 <__kernel_rem_pio2+0x3c6>
 800bd5c:	3d01      	subs	r5, #1
 800bd5e:	e748      	b.n	800bbf2 <__kernel_rem_pio2+0x292>
 800bd60:	ec47 6b10 	vmov	d0, r6, r7
 800bd64:	f1ca 0000 	rsb	r0, sl, #0
 800bd68:	f000 fc6e 	bl	800c648 <scalbn>
 800bd6c:	ec57 6b10 	vmov	r6, r7, d0
 800bd70:	4ba0      	ldr	r3, [pc, #640]	; (800bff4 <__kernel_rem_pio2+0x694>)
 800bd72:	ee10 0a10 	vmov	r0, s0
 800bd76:	2200      	movs	r2, #0
 800bd78:	4639      	mov	r1, r7
 800bd7a:	f7f4 fedb 	bl	8000b34 <__aeabi_dcmpge>
 800bd7e:	b1f8      	cbz	r0, 800bdc0 <__kernel_rem_pio2+0x460>
 800bd80:	4b9d      	ldr	r3, [pc, #628]	; (800bff8 <__kernel_rem_pio2+0x698>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	4630      	mov	r0, r6
 800bd86:	4639      	mov	r1, r7
 800bd88:	f7f4 fc4e 	bl	8000628 <__aeabi_dmul>
 800bd8c:	f7f4 fefc 	bl	8000b88 <__aeabi_d2iz>
 800bd90:	4680      	mov	r8, r0
 800bd92:	f7f4 fbdf 	bl	8000554 <__aeabi_i2d>
 800bd96:	4b97      	ldr	r3, [pc, #604]	; (800bff4 <__kernel_rem_pio2+0x694>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f7f4 fc45 	bl	8000628 <__aeabi_dmul>
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4602      	mov	r2, r0
 800bda2:	4639      	mov	r1, r7
 800bda4:	4630      	mov	r0, r6
 800bda6:	f7f4 fa87 	bl	80002b8 <__aeabi_dsub>
 800bdaa:	f7f4 feed 	bl	8000b88 <__aeabi_d2iz>
 800bdae:	1c65      	adds	r5, r4, #1
 800bdb0:	ab0e      	add	r3, sp, #56	; 0x38
 800bdb2:	f10a 0a18 	add.w	sl, sl, #24
 800bdb6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bdba:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bdbe:	e720      	b.n	800bc02 <__kernel_rem_pio2+0x2a2>
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	4639      	mov	r1, r7
 800bdc4:	f7f4 fee0 	bl	8000b88 <__aeabi_d2iz>
 800bdc8:	ab0e      	add	r3, sp, #56	; 0x38
 800bdca:	4625      	mov	r5, r4
 800bdcc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bdd0:	e717      	b.n	800bc02 <__kernel_rem_pio2+0x2a2>
 800bdd2:	ab0e      	add	r3, sp, #56	; 0x38
 800bdd4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800bdd8:	f7f4 fbbc 	bl	8000554 <__aeabi_i2d>
 800bddc:	4632      	mov	r2, r6
 800bdde:	463b      	mov	r3, r7
 800bde0:	f7f4 fc22 	bl	8000628 <__aeabi_dmul>
 800bde4:	4b84      	ldr	r3, [pc, #528]	; (800bff8 <__kernel_rem_pio2+0x698>)
 800bde6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800bdea:	2200      	movs	r2, #0
 800bdec:	4630      	mov	r0, r6
 800bdee:	4639      	mov	r1, r7
 800bdf0:	f7f4 fc1a 	bl	8000628 <__aeabi_dmul>
 800bdf4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdf8:	4606      	mov	r6, r0
 800bdfa:	460f      	mov	r7, r1
 800bdfc:	e70f      	b.n	800bc1e <__kernel_rem_pio2+0x2be>
 800bdfe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800be02:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800be06:	f7f4 fc0f 	bl	8000628 <__aeabi_dmul>
 800be0a:	4602      	mov	r2, r0
 800be0c:	460b      	mov	r3, r1
 800be0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be12:	f7f4 fa53 	bl	80002bc <__adddf3>
 800be16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be1a:	f108 0801 	add.w	r8, r8, #1
 800be1e:	9b02      	ldr	r3, [sp, #8]
 800be20:	4598      	cmp	r8, r3
 800be22:	dc01      	bgt.n	800be28 <__kernel_rem_pio2+0x4c8>
 800be24:	45b8      	cmp	r8, r7
 800be26:	ddea      	ble.n	800bdfe <__kernel_rem_pio2+0x49e>
 800be28:	ed9d 7b06 	vldr	d7, [sp, #24]
 800be2c:	ab4a      	add	r3, sp, #296	; 0x128
 800be2e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800be32:	ed87 7b00 	vstr	d7, [r7]
 800be36:	3e01      	subs	r6, #1
 800be38:	e6f8      	b.n	800bc2c <__kernel_rem_pio2+0x2cc>
 800be3a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	dc0b      	bgt.n	800be58 <__kernel_rem_pio2+0x4f8>
 800be40:	2b00      	cmp	r3, #0
 800be42:	dc35      	bgt.n	800beb0 <__kernel_rem_pio2+0x550>
 800be44:	d059      	beq.n	800befa <__kernel_rem_pio2+0x59a>
 800be46:	9b04      	ldr	r3, [sp, #16]
 800be48:	f003 0007 	and.w	r0, r3, #7
 800be4c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800be50:	ecbd 8b02 	vpop	{d8}
 800be54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be58:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800be5a:	2b03      	cmp	r3, #3
 800be5c:	d1f3      	bne.n	800be46 <__kernel_rem_pio2+0x4e6>
 800be5e:	ab4a      	add	r3, sp, #296	; 0x128
 800be60:	4423      	add	r3, r4
 800be62:	9306      	str	r3, [sp, #24]
 800be64:	461c      	mov	r4, r3
 800be66:	469a      	mov	sl, r3
 800be68:	9502      	str	r5, [sp, #8]
 800be6a:	9b02      	ldr	r3, [sp, #8]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f1aa 0a08 	sub.w	sl, sl, #8
 800be72:	dc6b      	bgt.n	800bf4c <__kernel_rem_pio2+0x5ec>
 800be74:	46aa      	mov	sl, r5
 800be76:	f1ba 0f01 	cmp.w	sl, #1
 800be7a:	f1a4 0408 	sub.w	r4, r4, #8
 800be7e:	f300 8085 	bgt.w	800bf8c <__kernel_rem_pio2+0x62c>
 800be82:	9c06      	ldr	r4, [sp, #24]
 800be84:	2000      	movs	r0, #0
 800be86:	3408      	adds	r4, #8
 800be88:	2100      	movs	r1, #0
 800be8a:	2d01      	cmp	r5, #1
 800be8c:	f300 809d 	bgt.w	800bfca <__kernel_rem_pio2+0x66a>
 800be90:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800be94:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800be98:	f1bb 0f00 	cmp.w	fp, #0
 800be9c:	f040 809b 	bne.w	800bfd6 <__kernel_rem_pio2+0x676>
 800bea0:	9b01      	ldr	r3, [sp, #4]
 800bea2:	e9c3 5600 	strd	r5, r6, [r3]
 800bea6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800beaa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800beae:	e7ca      	b.n	800be46 <__kernel_rem_pio2+0x4e6>
 800beb0:	3408      	adds	r4, #8
 800beb2:	ab4a      	add	r3, sp, #296	; 0x128
 800beb4:	441c      	add	r4, r3
 800beb6:	462e      	mov	r6, r5
 800beb8:	2000      	movs	r0, #0
 800beba:	2100      	movs	r1, #0
 800bebc:	2e00      	cmp	r6, #0
 800bebe:	da36      	bge.n	800bf2e <__kernel_rem_pio2+0x5ce>
 800bec0:	f1bb 0f00 	cmp.w	fp, #0
 800bec4:	d039      	beq.n	800bf3a <__kernel_rem_pio2+0x5da>
 800bec6:	4602      	mov	r2, r0
 800bec8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800becc:	9c01      	ldr	r4, [sp, #4]
 800bece:	e9c4 2300 	strd	r2, r3, [r4]
 800bed2:	4602      	mov	r2, r0
 800bed4:	460b      	mov	r3, r1
 800bed6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800beda:	f7f4 f9ed 	bl	80002b8 <__aeabi_dsub>
 800bede:	ae4c      	add	r6, sp, #304	; 0x130
 800bee0:	2401      	movs	r4, #1
 800bee2:	42a5      	cmp	r5, r4
 800bee4:	da2c      	bge.n	800bf40 <__kernel_rem_pio2+0x5e0>
 800bee6:	f1bb 0f00 	cmp.w	fp, #0
 800beea:	d002      	beq.n	800bef2 <__kernel_rem_pio2+0x592>
 800beec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bef0:	4619      	mov	r1, r3
 800bef2:	9b01      	ldr	r3, [sp, #4]
 800bef4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bef8:	e7a5      	b.n	800be46 <__kernel_rem_pio2+0x4e6>
 800befa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800befe:	eb0d 0403 	add.w	r4, sp, r3
 800bf02:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bf06:	2000      	movs	r0, #0
 800bf08:	2100      	movs	r1, #0
 800bf0a:	2d00      	cmp	r5, #0
 800bf0c:	da09      	bge.n	800bf22 <__kernel_rem_pio2+0x5c2>
 800bf0e:	f1bb 0f00 	cmp.w	fp, #0
 800bf12:	d002      	beq.n	800bf1a <__kernel_rem_pio2+0x5ba>
 800bf14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf18:	4619      	mov	r1, r3
 800bf1a:	9b01      	ldr	r3, [sp, #4]
 800bf1c:	e9c3 0100 	strd	r0, r1, [r3]
 800bf20:	e791      	b.n	800be46 <__kernel_rem_pio2+0x4e6>
 800bf22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bf26:	f7f4 f9c9 	bl	80002bc <__adddf3>
 800bf2a:	3d01      	subs	r5, #1
 800bf2c:	e7ed      	b.n	800bf0a <__kernel_rem_pio2+0x5aa>
 800bf2e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bf32:	f7f4 f9c3 	bl	80002bc <__adddf3>
 800bf36:	3e01      	subs	r6, #1
 800bf38:	e7c0      	b.n	800bebc <__kernel_rem_pio2+0x55c>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	e7c5      	b.n	800becc <__kernel_rem_pio2+0x56c>
 800bf40:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bf44:	f7f4 f9ba 	bl	80002bc <__adddf3>
 800bf48:	3401      	adds	r4, #1
 800bf4a:	e7ca      	b.n	800bee2 <__kernel_rem_pio2+0x582>
 800bf4c:	e9da 8900 	ldrd	r8, r9, [sl]
 800bf50:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800bf54:	9b02      	ldr	r3, [sp, #8]
 800bf56:	3b01      	subs	r3, #1
 800bf58:	9302      	str	r3, [sp, #8]
 800bf5a:	4632      	mov	r2, r6
 800bf5c:	463b      	mov	r3, r7
 800bf5e:	4640      	mov	r0, r8
 800bf60:	4649      	mov	r1, r9
 800bf62:	f7f4 f9ab 	bl	80002bc <__adddf3>
 800bf66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	4640      	mov	r0, r8
 800bf70:	4649      	mov	r1, r9
 800bf72:	f7f4 f9a1 	bl	80002b8 <__aeabi_dsub>
 800bf76:	4632      	mov	r2, r6
 800bf78:	463b      	mov	r3, r7
 800bf7a:	f7f4 f99f 	bl	80002bc <__adddf3>
 800bf7e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800bf82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bf86:	ed8a 7b00 	vstr	d7, [sl]
 800bf8a:	e76e      	b.n	800be6a <__kernel_rem_pio2+0x50a>
 800bf8c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bf90:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800bf94:	4640      	mov	r0, r8
 800bf96:	4632      	mov	r2, r6
 800bf98:	463b      	mov	r3, r7
 800bf9a:	4649      	mov	r1, r9
 800bf9c:	f7f4 f98e 	bl	80002bc <__adddf3>
 800bfa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4640      	mov	r0, r8
 800bfaa:	4649      	mov	r1, r9
 800bfac:	f7f4 f984 	bl	80002b8 <__aeabi_dsub>
 800bfb0:	4632      	mov	r2, r6
 800bfb2:	463b      	mov	r3, r7
 800bfb4:	f7f4 f982 	bl	80002bc <__adddf3>
 800bfb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bfbc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bfc0:	ed84 7b00 	vstr	d7, [r4]
 800bfc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bfc8:	e755      	b.n	800be76 <__kernel_rem_pio2+0x516>
 800bfca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bfce:	f7f4 f975 	bl	80002bc <__adddf3>
 800bfd2:	3d01      	subs	r5, #1
 800bfd4:	e759      	b.n	800be8a <__kernel_rem_pio2+0x52a>
 800bfd6:	9b01      	ldr	r3, [sp, #4]
 800bfd8:	9a01      	ldr	r2, [sp, #4]
 800bfda:	601d      	str	r5, [r3, #0]
 800bfdc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800bfe0:	605c      	str	r4, [r3, #4]
 800bfe2:	609f      	str	r7, [r3, #8]
 800bfe4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800bfe8:	60d3      	str	r3, [r2, #12]
 800bfea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfee:	6110      	str	r0, [r2, #16]
 800bff0:	6153      	str	r3, [r2, #20]
 800bff2:	e728      	b.n	800be46 <__kernel_rem_pio2+0x4e6>
 800bff4:	41700000 	.word	0x41700000
 800bff8:	3e700000 	.word	0x3e700000
 800bffc:	00000000 	.word	0x00000000

0800c000 <__kernel_sin>:
 800c000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c004:	ed2d 8b04 	vpush	{d8-d9}
 800c008:	eeb0 8a41 	vmov.f32	s16, s2
 800c00c:	eef0 8a61 	vmov.f32	s17, s3
 800c010:	ec55 4b10 	vmov	r4, r5, d0
 800c014:	b083      	sub	sp, #12
 800c016:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c01a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c01e:	9001      	str	r0, [sp, #4]
 800c020:	da06      	bge.n	800c030 <__kernel_sin+0x30>
 800c022:	ee10 0a10 	vmov	r0, s0
 800c026:	4629      	mov	r1, r5
 800c028:	f7f4 fdae 	bl	8000b88 <__aeabi_d2iz>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d051      	beq.n	800c0d4 <__kernel_sin+0xd4>
 800c030:	4622      	mov	r2, r4
 800c032:	462b      	mov	r3, r5
 800c034:	4620      	mov	r0, r4
 800c036:	4629      	mov	r1, r5
 800c038:	f7f4 faf6 	bl	8000628 <__aeabi_dmul>
 800c03c:	4682      	mov	sl, r0
 800c03e:	468b      	mov	fp, r1
 800c040:	4602      	mov	r2, r0
 800c042:	460b      	mov	r3, r1
 800c044:	4620      	mov	r0, r4
 800c046:	4629      	mov	r1, r5
 800c048:	f7f4 faee 	bl	8000628 <__aeabi_dmul>
 800c04c:	a341      	add	r3, pc, #260	; (adr r3, 800c154 <__kernel_sin+0x154>)
 800c04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c052:	4680      	mov	r8, r0
 800c054:	4689      	mov	r9, r1
 800c056:	4650      	mov	r0, sl
 800c058:	4659      	mov	r1, fp
 800c05a:	f7f4 fae5 	bl	8000628 <__aeabi_dmul>
 800c05e:	a33f      	add	r3, pc, #252	; (adr r3, 800c15c <__kernel_sin+0x15c>)
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	f7f4 f928 	bl	80002b8 <__aeabi_dsub>
 800c068:	4652      	mov	r2, sl
 800c06a:	465b      	mov	r3, fp
 800c06c:	f7f4 fadc 	bl	8000628 <__aeabi_dmul>
 800c070:	a33c      	add	r3, pc, #240	; (adr r3, 800c164 <__kernel_sin+0x164>)
 800c072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c076:	f7f4 f921 	bl	80002bc <__adddf3>
 800c07a:	4652      	mov	r2, sl
 800c07c:	465b      	mov	r3, fp
 800c07e:	f7f4 fad3 	bl	8000628 <__aeabi_dmul>
 800c082:	a33a      	add	r3, pc, #232	; (adr r3, 800c16c <__kernel_sin+0x16c>)
 800c084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c088:	f7f4 f916 	bl	80002b8 <__aeabi_dsub>
 800c08c:	4652      	mov	r2, sl
 800c08e:	465b      	mov	r3, fp
 800c090:	f7f4 faca 	bl	8000628 <__aeabi_dmul>
 800c094:	a337      	add	r3, pc, #220	; (adr r3, 800c174 <__kernel_sin+0x174>)
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	f7f4 f90f 	bl	80002bc <__adddf3>
 800c09e:	9b01      	ldr	r3, [sp, #4]
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	460f      	mov	r7, r1
 800c0a4:	b9eb      	cbnz	r3, 800c0e2 <__kernel_sin+0xe2>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	4650      	mov	r0, sl
 800c0ac:	4659      	mov	r1, fp
 800c0ae:	f7f4 fabb 	bl	8000628 <__aeabi_dmul>
 800c0b2:	a325      	add	r3, pc, #148	; (adr r3, 800c148 <__kernel_sin+0x148>)
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	f7f4 f8fe 	bl	80002b8 <__aeabi_dsub>
 800c0bc:	4642      	mov	r2, r8
 800c0be:	464b      	mov	r3, r9
 800c0c0:	f7f4 fab2 	bl	8000628 <__aeabi_dmul>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	f7f4 f8f6 	bl	80002bc <__adddf3>
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	460d      	mov	r5, r1
 800c0d4:	ec45 4b10 	vmov	d0, r4, r5
 800c0d8:	b003      	add	sp, #12
 800c0da:	ecbd 8b04 	vpop	{d8-d9}
 800c0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e2:	4b1b      	ldr	r3, [pc, #108]	; (800c150 <__kernel_sin+0x150>)
 800c0e4:	ec51 0b18 	vmov	r0, r1, d8
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f7f4 fa9d 	bl	8000628 <__aeabi_dmul>
 800c0ee:	4632      	mov	r2, r6
 800c0f0:	ec41 0b19 	vmov	d9, r0, r1
 800c0f4:	463b      	mov	r3, r7
 800c0f6:	4640      	mov	r0, r8
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	f7f4 fa95 	bl	8000628 <__aeabi_dmul>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	ec51 0b19 	vmov	r0, r1, d9
 800c106:	f7f4 f8d7 	bl	80002b8 <__aeabi_dsub>
 800c10a:	4652      	mov	r2, sl
 800c10c:	465b      	mov	r3, fp
 800c10e:	f7f4 fa8b 	bl	8000628 <__aeabi_dmul>
 800c112:	ec53 2b18 	vmov	r2, r3, d8
 800c116:	f7f4 f8cf 	bl	80002b8 <__aeabi_dsub>
 800c11a:	a30b      	add	r3, pc, #44	; (adr r3, 800c148 <__kernel_sin+0x148>)
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	4606      	mov	r6, r0
 800c122:	460f      	mov	r7, r1
 800c124:	4640      	mov	r0, r8
 800c126:	4649      	mov	r1, r9
 800c128:	f7f4 fa7e 	bl	8000628 <__aeabi_dmul>
 800c12c:	4602      	mov	r2, r0
 800c12e:	460b      	mov	r3, r1
 800c130:	4630      	mov	r0, r6
 800c132:	4639      	mov	r1, r7
 800c134:	f7f4 f8c2 	bl	80002bc <__adddf3>
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	4620      	mov	r0, r4
 800c13e:	4629      	mov	r1, r5
 800c140:	f7f4 f8ba 	bl	80002b8 <__aeabi_dsub>
 800c144:	e7c4      	b.n	800c0d0 <__kernel_sin+0xd0>
 800c146:	bf00      	nop
 800c148:	55555549 	.word	0x55555549
 800c14c:	3fc55555 	.word	0x3fc55555
 800c150:	3fe00000 	.word	0x3fe00000
 800c154:	5acfd57c 	.word	0x5acfd57c
 800c158:	3de5d93a 	.word	0x3de5d93a
 800c15c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c160:	3e5ae5e6 	.word	0x3e5ae5e6
 800c164:	57b1fe7d 	.word	0x57b1fe7d
 800c168:	3ec71de3 	.word	0x3ec71de3
 800c16c:	19c161d5 	.word	0x19c161d5
 800c170:	3f2a01a0 	.word	0x3f2a01a0
 800c174:	1110f8a6 	.word	0x1110f8a6
 800c178:	3f811111 	.word	0x3f811111

0800c17c <with_errno>:
 800c17c:	b570      	push	{r4, r5, r6, lr}
 800c17e:	4604      	mov	r4, r0
 800c180:	460d      	mov	r5, r1
 800c182:	4616      	mov	r6, r2
 800c184:	f7f9 f86c 	bl	8005260 <__errno>
 800c188:	4629      	mov	r1, r5
 800c18a:	6006      	str	r6, [r0, #0]
 800c18c:	4620      	mov	r0, r4
 800c18e:	bd70      	pop	{r4, r5, r6, pc}

0800c190 <xflow>:
 800c190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c192:	4614      	mov	r4, r2
 800c194:	461d      	mov	r5, r3
 800c196:	b108      	cbz	r0, 800c19c <xflow+0xc>
 800c198:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c19c:	e9cd 2300 	strd	r2, r3, [sp]
 800c1a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	f7f4 fa3e 	bl	8000628 <__aeabi_dmul>
 800c1ac:	2222      	movs	r2, #34	; 0x22
 800c1ae:	b003      	add	sp, #12
 800c1b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1b4:	f7ff bfe2 	b.w	800c17c <with_errno>

0800c1b8 <__math_uflow>:
 800c1b8:	b508      	push	{r3, lr}
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c1c0:	f7ff ffe6 	bl	800c190 <xflow>
 800c1c4:	ec41 0b10 	vmov	d0, r0, r1
 800c1c8:	bd08      	pop	{r3, pc}

0800c1ca <__math_oflow>:
 800c1ca:	b508      	push	{r3, lr}
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c1d2:	f7ff ffdd 	bl	800c190 <xflow>
 800c1d6:	ec41 0b10 	vmov	d0, r0, r1
 800c1da:	bd08      	pop	{r3, pc}
 800c1dc:	0000      	movs	r0, r0
	...

0800c1e0 <atan>:
 800c1e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e4:	ec55 4b10 	vmov	r4, r5, d0
 800c1e8:	4bc3      	ldr	r3, [pc, #780]	; (800c4f8 <atan+0x318>)
 800c1ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c1ee:	429e      	cmp	r6, r3
 800c1f0:	46ab      	mov	fp, r5
 800c1f2:	dd18      	ble.n	800c226 <atan+0x46>
 800c1f4:	4bc1      	ldr	r3, [pc, #772]	; (800c4fc <atan+0x31c>)
 800c1f6:	429e      	cmp	r6, r3
 800c1f8:	dc01      	bgt.n	800c1fe <atan+0x1e>
 800c1fa:	d109      	bne.n	800c210 <atan+0x30>
 800c1fc:	b144      	cbz	r4, 800c210 <atan+0x30>
 800c1fe:	4622      	mov	r2, r4
 800c200:	462b      	mov	r3, r5
 800c202:	4620      	mov	r0, r4
 800c204:	4629      	mov	r1, r5
 800c206:	f7f4 f859 	bl	80002bc <__adddf3>
 800c20a:	4604      	mov	r4, r0
 800c20c:	460d      	mov	r5, r1
 800c20e:	e006      	b.n	800c21e <atan+0x3e>
 800c210:	f1bb 0f00 	cmp.w	fp, #0
 800c214:	f300 8131 	bgt.w	800c47a <atan+0x29a>
 800c218:	a59b      	add	r5, pc, #620	; (adr r5, 800c488 <atan+0x2a8>)
 800c21a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c21e:	ec45 4b10 	vmov	d0, r4, r5
 800c222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c226:	4bb6      	ldr	r3, [pc, #728]	; (800c500 <atan+0x320>)
 800c228:	429e      	cmp	r6, r3
 800c22a:	dc14      	bgt.n	800c256 <atan+0x76>
 800c22c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c230:	429e      	cmp	r6, r3
 800c232:	dc0d      	bgt.n	800c250 <atan+0x70>
 800c234:	a396      	add	r3, pc, #600	; (adr r3, 800c490 <atan+0x2b0>)
 800c236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23a:	ee10 0a10 	vmov	r0, s0
 800c23e:	4629      	mov	r1, r5
 800c240:	f7f4 f83c 	bl	80002bc <__adddf3>
 800c244:	4baf      	ldr	r3, [pc, #700]	; (800c504 <atan+0x324>)
 800c246:	2200      	movs	r2, #0
 800c248:	f7f4 fc7e 	bl	8000b48 <__aeabi_dcmpgt>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d1e6      	bne.n	800c21e <atan+0x3e>
 800c250:	f04f 3aff 	mov.w	sl, #4294967295
 800c254:	e02b      	b.n	800c2ae <atan+0xce>
 800c256:	f000 f963 	bl	800c520 <fabs>
 800c25a:	4bab      	ldr	r3, [pc, #684]	; (800c508 <atan+0x328>)
 800c25c:	429e      	cmp	r6, r3
 800c25e:	ec55 4b10 	vmov	r4, r5, d0
 800c262:	f300 80bf 	bgt.w	800c3e4 <atan+0x204>
 800c266:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c26a:	429e      	cmp	r6, r3
 800c26c:	f300 80a0 	bgt.w	800c3b0 <atan+0x1d0>
 800c270:	ee10 2a10 	vmov	r2, s0
 800c274:	ee10 0a10 	vmov	r0, s0
 800c278:	462b      	mov	r3, r5
 800c27a:	4629      	mov	r1, r5
 800c27c:	f7f4 f81e 	bl	80002bc <__adddf3>
 800c280:	4ba0      	ldr	r3, [pc, #640]	; (800c504 <atan+0x324>)
 800c282:	2200      	movs	r2, #0
 800c284:	f7f4 f818 	bl	80002b8 <__aeabi_dsub>
 800c288:	2200      	movs	r2, #0
 800c28a:	4606      	mov	r6, r0
 800c28c:	460f      	mov	r7, r1
 800c28e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c292:	4620      	mov	r0, r4
 800c294:	4629      	mov	r1, r5
 800c296:	f7f4 f811 	bl	80002bc <__adddf3>
 800c29a:	4602      	mov	r2, r0
 800c29c:	460b      	mov	r3, r1
 800c29e:	4630      	mov	r0, r6
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	f7f4 faeb 	bl	800087c <__aeabi_ddiv>
 800c2a6:	f04f 0a00 	mov.w	sl, #0
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	460d      	mov	r5, r1
 800c2ae:	4622      	mov	r2, r4
 800c2b0:	462b      	mov	r3, r5
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	f7f4 f9b7 	bl	8000628 <__aeabi_dmul>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	460b      	mov	r3, r1
 800c2be:	4680      	mov	r8, r0
 800c2c0:	4689      	mov	r9, r1
 800c2c2:	f7f4 f9b1 	bl	8000628 <__aeabi_dmul>
 800c2c6:	a374      	add	r3, pc, #464	; (adr r3, 800c498 <atan+0x2b8>)
 800c2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	460f      	mov	r7, r1
 800c2d0:	f7f4 f9aa 	bl	8000628 <__aeabi_dmul>
 800c2d4:	a372      	add	r3, pc, #456	; (adr r3, 800c4a0 <atan+0x2c0>)
 800c2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2da:	f7f3 ffef 	bl	80002bc <__adddf3>
 800c2de:	4632      	mov	r2, r6
 800c2e0:	463b      	mov	r3, r7
 800c2e2:	f7f4 f9a1 	bl	8000628 <__aeabi_dmul>
 800c2e6:	a370      	add	r3, pc, #448	; (adr r3, 800c4a8 <atan+0x2c8>)
 800c2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ec:	f7f3 ffe6 	bl	80002bc <__adddf3>
 800c2f0:	4632      	mov	r2, r6
 800c2f2:	463b      	mov	r3, r7
 800c2f4:	f7f4 f998 	bl	8000628 <__aeabi_dmul>
 800c2f8:	a36d      	add	r3, pc, #436	; (adr r3, 800c4b0 <atan+0x2d0>)
 800c2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fe:	f7f3 ffdd 	bl	80002bc <__adddf3>
 800c302:	4632      	mov	r2, r6
 800c304:	463b      	mov	r3, r7
 800c306:	f7f4 f98f 	bl	8000628 <__aeabi_dmul>
 800c30a:	a36b      	add	r3, pc, #428	; (adr r3, 800c4b8 <atan+0x2d8>)
 800c30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c310:	f7f3 ffd4 	bl	80002bc <__adddf3>
 800c314:	4632      	mov	r2, r6
 800c316:	463b      	mov	r3, r7
 800c318:	f7f4 f986 	bl	8000628 <__aeabi_dmul>
 800c31c:	a368      	add	r3, pc, #416	; (adr r3, 800c4c0 <atan+0x2e0>)
 800c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c322:	f7f3 ffcb 	bl	80002bc <__adddf3>
 800c326:	4642      	mov	r2, r8
 800c328:	464b      	mov	r3, r9
 800c32a:	f7f4 f97d 	bl	8000628 <__aeabi_dmul>
 800c32e:	a366      	add	r3, pc, #408	; (adr r3, 800c4c8 <atan+0x2e8>)
 800c330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c334:	4680      	mov	r8, r0
 800c336:	4689      	mov	r9, r1
 800c338:	4630      	mov	r0, r6
 800c33a:	4639      	mov	r1, r7
 800c33c:	f7f4 f974 	bl	8000628 <__aeabi_dmul>
 800c340:	a363      	add	r3, pc, #396	; (adr r3, 800c4d0 <atan+0x2f0>)
 800c342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c346:	f7f3 ffb7 	bl	80002b8 <__aeabi_dsub>
 800c34a:	4632      	mov	r2, r6
 800c34c:	463b      	mov	r3, r7
 800c34e:	f7f4 f96b 	bl	8000628 <__aeabi_dmul>
 800c352:	a361      	add	r3, pc, #388	; (adr r3, 800c4d8 <atan+0x2f8>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f7f3 ffae 	bl	80002b8 <__aeabi_dsub>
 800c35c:	4632      	mov	r2, r6
 800c35e:	463b      	mov	r3, r7
 800c360:	f7f4 f962 	bl	8000628 <__aeabi_dmul>
 800c364:	a35e      	add	r3, pc, #376	; (adr r3, 800c4e0 <atan+0x300>)
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	f7f3 ffa5 	bl	80002b8 <__aeabi_dsub>
 800c36e:	4632      	mov	r2, r6
 800c370:	463b      	mov	r3, r7
 800c372:	f7f4 f959 	bl	8000628 <__aeabi_dmul>
 800c376:	a35c      	add	r3, pc, #368	; (adr r3, 800c4e8 <atan+0x308>)
 800c378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37c:	f7f3 ff9c 	bl	80002b8 <__aeabi_dsub>
 800c380:	4632      	mov	r2, r6
 800c382:	463b      	mov	r3, r7
 800c384:	f7f4 f950 	bl	8000628 <__aeabi_dmul>
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	4640      	mov	r0, r8
 800c38e:	4649      	mov	r1, r9
 800c390:	f7f3 ff94 	bl	80002bc <__adddf3>
 800c394:	4622      	mov	r2, r4
 800c396:	462b      	mov	r3, r5
 800c398:	f7f4 f946 	bl	8000628 <__aeabi_dmul>
 800c39c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	d14b      	bne.n	800c43e <atan+0x25e>
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	f7f3 ff85 	bl	80002b8 <__aeabi_dsub>
 800c3ae:	e72c      	b.n	800c20a <atan+0x2a>
 800c3b0:	ee10 0a10 	vmov	r0, s0
 800c3b4:	4b53      	ldr	r3, [pc, #332]	; (800c504 <atan+0x324>)
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	4629      	mov	r1, r5
 800c3ba:	f7f3 ff7d 	bl	80002b8 <__aeabi_dsub>
 800c3be:	4b51      	ldr	r3, [pc, #324]	; (800c504 <atan+0x324>)
 800c3c0:	4606      	mov	r6, r0
 800c3c2:	460f      	mov	r7, r1
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	f7f3 ff77 	bl	80002bc <__adddf3>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	4639      	mov	r1, r7
 800c3d6:	f7f4 fa51 	bl	800087c <__aeabi_ddiv>
 800c3da:	f04f 0a01 	mov.w	sl, #1
 800c3de:	4604      	mov	r4, r0
 800c3e0:	460d      	mov	r5, r1
 800c3e2:	e764      	b.n	800c2ae <atan+0xce>
 800c3e4:	4b49      	ldr	r3, [pc, #292]	; (800c50c <atan+0x32c>)
 800c3e6:	429e      	cmp	r6, r3
 800c3e8:	da1d      	bge.n	800c426 <atan+0x246>
 800c3ea:	ee10 0a10 	vmov	r0, s0
 800c3ee:	4b48      	ldr	r3, [pc, #288]	; (800c510 <atan+0x330>)
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	f7f3 ff60 	bl	80002b8 <__aeabi_dsub>
 800c3f8:	4b45      	ldr	r3, [pc, #276]	; (800c510 <atan+0x330>)
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	460f      	mov	r7, r1
 800c3fe:	2200      	movs	r2, #0
 800c400:	4620      	mov	r0, r4
 800c402:	4629      	mov	r1, r5
 800c404:	f7f4 f910 	bl	8000628 <__aeabi_dmul>
 800c408:	4b3e      	ldr	r3, [pc, #248]	; (800c504 <atan+0x324>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	f7f3 ff56 	bl	80002bc <__adddf3>
 800c410:	4602      	mov	r2, r0
 800c412:	460b      	mov	r3, r1
 800c414:	4630      	mov	r0, r6
 800c416:	4639      	mov	r1, r7
 800c418:	f7f4 fa30 	bl	800087c <__aeabi_ddiv>
 800c41c:	f04f 0a02 	mov.w	sl, #2
 800c420:	4604      	mov	r4, r0
 800c422:	460d      	mov	r5, r1
 800c424:	e743      	b.n	800c2ae <atan+0xce>
 800c426:	462b      	mov	r3, r5
 800c428:	ee10 2a10 	vmov	r2, s0
 800c42c:	4939      	ldr	r1, [pc, #228]	; (800c514 <atan+0x334>)
 800c42e:	2000      	movs	r0, #0
 800c430:	f7f4 fa24 	bl	800087c <__aeabi_ddiv>
 800c434:	f04f 0a03 	mov.w	sl, #3
 800c438:	4604      	mov	r4, r0
 800c43a:	460d      	mov	r5, r1
 800c43c:	e737      	b.n	800c2ae <atan+0xce>
 800c43e:	4b36      	ldr	r3, [pc, #216]	; (800c518 <atan+0x338>)
 800c440:	4e36      	ldr	r6, [pc, #216]	; (800c51c <atan+0x33c>)
 800c442:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c446:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c44a:	e9da 2300 	ldrd	r2, r3, [sl]
 800c44e:	f7f3 ff33 	bl	80002b8 <__aeabi_dsub>
 800c452:	4622      	mov	r2, r4
 800c454:	462b      	mov	r3, r5
 800c456:	f7f3 ff2f 	bl	80002b8 <__aeabi_dsub>
 800c45a:	4602      	mov	r2, r0
 800c45c:	460b      	mov	r3, r1
 800c45e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c462:	f7f3 ff29 	bl	80002b8 <__aeabi_dsub>
 800c466:	f1bb 0f00 	cmp.w	fp, #0
 800c46a:	4604      	mov	r4, r0
 800c46c:	460d      	mov	r5, r1
 800c46e:	f6bf aed6 	bge.w	800c21e <atan+0x3e>
 800c472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c476:	461d      	mov	r5, r3
 800c478:	e6d1      	b.n	800c21e <atan+0x3e>
 800c47a:	a51d      	add	r5, pc, #116	; (adr r5, 800c4f0 <atan+0x310>)
 800c47c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c480:	e6cd      	b.n	800c21e <atan+0x3e>
 800c482:	bf00      	nop
 800c484:	f3af 8000 	nop.w
 800c488:	54442d18 	.word	0x54442d18
 800c48c:	bff921fb 	.word	0xbff921fb
 800c490:	8800759c 	.word	0x8800759c
 800c494:	7e37e43c 	.word	0x7e37e43c
 800c498:	e322da11 	.word	0xe322da11
 800c49c:	3f90ad3a 	.word	0x3f90ad3a
 800c4a0:	24760deb 	.word	0x24760deb
 800c4a4:	3fa97b4b 	.word	0x3fa97b4b
 800c4a8:	a0d03d51 	.word	0xa0d03d51
 800c4ac:	3fb10d66 	.word	0x3fb10d66
 800c4b0:	c54c206e 	.word	0xc54c206e
 800c4b4:	3fb745cd 	.word	0x3fb745cd
 800c4b8:	920083ff 	.word	0x920083ff
 800c4bc:	3fc24924 	.word	0x3fc24924
 800c4c0:	5555550d 	.word	0x5555550d
 800c4c4:	3fd55555 	.word	0x3fd55555
 800c4c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c4cc:	bfa2b444 	.word	0xbfa2b444
 800c4d0:	52defd9a 	.word	0x52defd9a
 800c4d4:	3fadde2d 	.word	0x3fadde2d
 800c4d8:	af749a6d 	.word	0xaf749a6d
 800c4dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800c4e0:	fe231671 	.word	0xfe231671
 800c4e4:	3fbc71c6 	.word	0x3fbc71c6
 800c4e8:	9998ebc4 	.word	0x9998ebc4
 800c4ec:	3fc99999 	.word	0x3fc99999
 800c4f0:	54442d18 	.word	0x54442d18
 800c4f4:	3ff921fb 	.word	0x3ff921fb
 800c4f8:	440fffff 	.word	0x440fffff
 800c4fc:	7ff00000 	.word	0x7ff00000
 800c500:	3fdbffff 	.word	0x3fdbffff
 800c504:	3ff00000 	.word	0x3ff00000
 800c508:	3ff2ffff 	.word	0x3ff2ffff
 800c50c:	40038000 	.word	0x40038000
 800c510:	3ff80000 	.word	0x3ff80000
 800c514:	bff00000 	.word	0xbff00000
 800c518:	0800d210 	.word	0x0800d210
 800c51c:	0800d1f0 	.word	0x0800d1f0

0800c520 <fabs>:
 800c520:	ec51 0b10 	vmov	r0, r1, d0
 800c524:	ee10 2a10 	vmov	r2, s0
 800c528:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c52c:	ec43 2b10 	vmov	d0, r2, r3
 800c530:	4770      	bx	lr

0800c532 <finite>:
 800c532:	b082      	sub	sp, #8
 800c534:	ed8d 0b00 	vstr	d0, [sp]
 800c538:	9801      	ldr	r0, [sp, #4]
 800c53a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c53e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c542:	0fc0      	lsrs	r0, r0, #31
 800c544:	b002      	add	sp, #8
 800c546:	4770      	bx	lr

0800c548 <floor>:
 800c548:	ec51 0b10 	vmov	r0, r1, d0
 800c54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c550:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c554:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c558:	2e13      	cmp	r6, #19
 800c55a:	ee10 5a10 	vmov	r5, s0
 800c55e:	ee10 8a10 	vmov	r8, s0
 800c562:	460c      	mov	r4, r1
 800c564:	dc32      	bgt.n	800c5cc <floor+0x84>
 800c566:	2e00      	cmp	r6, #0
 800c568:	da14      	bge.n	800c594 <floor+0x4c>
 800c56a:	a333      	add	r3, pc, #204	; (adr r3, 800c638 <floor+0xf0>)
 800c56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c570:	f7f3 fea4 	bl	80002bc <__adddf3>
 800c574:	2200      	movs	r2, #0
 800c576:	2300      	movs	r3, #0
 800c578:	f7f4 fae6 	bl	8000b48 <__aeabi_dcmpgt>
 800c57c:	b138      	cbz	r0, 800c58e <floor+0x46>
 800c57e:	2c00      	cmp	r4, #0
 800c580:	da57      	bge.n	800c632 <floor+0xea>
 800c582:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c586:	431d      	orrs	r5, r3
 800c588:	d001      	beq.n	800c58e <floor+0x46>
 800c58a:	4c2d      	ldr	r4, [pc, #180]	; (800c640 <floor+0xf8>)
 800c58c:	2500      	movs	r5, #0
 800c58e:	4621      	mov	r1, r4
 800c590:	4628      	mov	r0, r5
 800c592:	e025      	b.n	800c5e0 <floor+0x98>
 800c594:	4f2b      	ldr	r7, [pc, #172]	; (800c644 <floor+0xfc>)
 800c596:	4137      	asrs	r7, r6
 800c598:	ea01 0307 	and.w	r3, r1, r7
 800c59c:	4303      	orrs	r3, r0
 800c59e:	d01f      	beq.n	800c5e0 <floor+0x98>
 800c5a0:	a325      	add	r3, pc, #148	; (adr r3, 800c638 <floor+0xf0>)
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	f7f3 fe89 	bl	80002bc <__adddf3>
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f7f4 facb 	bl	8000b48 <__aeabi_dcmpgt>
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d0eb      	beq.n	800c58e <floor+0x46>
 800c5b6:	2c00      	cmp	r4, #0
 800c5b8:	bfbe      	ittt	lt
 800c5ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c5be:	fa43 f606 	asrlt.w	r6, r3, r6
 800c5c2:	19a4      	addlt	r4, r4, r6
 800c5c4:	ea24 0407 	bic.w	r4, r4, r7
 800c5c8:	2500      	movs	r5, #0
 800c5ca:	e7e0      	b.n	800c58e <floor+0x46>
 800c5cc:	2e33      	cmp	r6, #51	; 0x33
 800c5ce:	dd0b      	ble.n	800c5e8 <floor+0xa0>
 800c5d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c5d4:	d104      	bne.n	800c5e0 <floor+0x98>
 800c5d6:	ee10 2a10 	vmov	r2, s0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	f7f3 fe6e 	bl	80002bc <__adddf3>
 800c5e0:	ec41 0b10 	vmov	d0, r0, r1
 800c5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c5ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f0:	fa23 f707 	lsr.w	r7, r3, r7
 800c5f4:	4207      	tst	r7, r0
 800c5f6:	d0f3      	beq.n	800c5e0 <floor+0x98>
 800c5f8:	a30f      	add	r3, pc, #60	; (adr r3, 800c638 <floor+0xf0>)
 800c5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fe:	f7f3 fe5d 	bl	80002bc <__adddf3>
 800c602:	2200      	movs	r2, #0
 800c604:	2300      	movs	r3, #0
 800c606:	f7f4 fa9f 	bl	8000b48 <__aeabi_dcmpgt>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d0bf      	beq.n	800c58e <floor+0x46>
 800c60e:	2c00      	cmp	r4, #0
 800c610:	da02      	bge.n	800c618 <floor+0xd0>
 800c612:	2e14      	cmp	r6, #20
 800c614:	d103      	bne.n	800c61e <floor+0xd6>
 800c616:	3401      	adds	r4, #1
 800c618:	ea25 0507 	bic.w	r5, r5, r7
 800c61c:	e7b7      	b.n	800c58e <floor+0x46>
 800c61e:	2301      	movs	r3, #1
 800c620:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c624:	fa03 f606 	lsl.w	r6, r3, r6
 800c628:	4435      	add	r5, r6
 800c62a:	4545      	cmp	r5, r8
 800c62c:	bf38      	it	cc
 800c62e:	18e4      	addcc	r4, r4, r3
 800c630:	e7f2      	b.n	800c618 <floor+0xd0>
 800c632:	2500      	movs	r5, #0
 800c634:	462c      	mov	r4, r5
 800c636:	e7aa      	b.n	800c58e <floor+0x46>
 800c638:	8800759c 	.word	0x8800759c
 800c63c:	7e37e43c 	.word	0x7e37e43c
 800c640:	bff00000 	.word	0xbff00000
 800c644:	000fffff 	.word	0x000fffff

0800c648 <scalbn>:
 800c648:	b570      	push	{r4, r5, r6, lr}
 800c64a:	ec55 4b10 	vmov	r4, r5, d0
 800c64e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c652:	4606      	mov	r6, r0
 800c654:	462b      	mov	r3, r5
 800c656:	b99a      	cbnz	r2, 800c680 <scalbn+0x38>
 800c658:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c65c:	4323      	orrs	r3, r4
 800c65e:	d036      	beq.n	800c6ce <scalbn+0x86>
 800c660:	4b39      	ldr	r3, [pc, #228]	; (800c748 <scalbn+0x100>)
 800c662:	4629      	mov	r1, r5
 800c664:	ee10 0a10 	vmov	r0, s0
 800c668:	2200      	movs	r2, #0
 800c66a:	f7f3 ffdd 	bl	8000628 <__aeabi_dmul>
 800c66e:	4b37      	ldr	r3, [pc, #220]	; (800c74c <scalbn+0x104>)
 800c670:	429e      	cmp	r6, r3
 800c672:	4604      	mov	r4, r0
 800c674:	460d      	mov	r5, r1
 800c676:	da10      	bge.n	800c69a <scalbn+0x52>
 800c678:	a32b      	add	r3, pc, #172	; (adr r3, 800c728 <scalbn+0xe0>)
 800c67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67e:	e03a      	b.n	800c6f6 <scalbn+0xae>
 800c680:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c684:	428a      	cmp	r2, r1
 800c686:	d10c      	bne.n	800c6a2 <scalbn+0x5a>
 800c688:	ee10 2a10 	vmov	r2, s0
 800c68c:	4620      	mov	r0, r4
 800c68e:	4629      	mov	r1, r5
 800c690:	f7f3 fe14 	bl	80002bc <__adddf3>
 800c694:	4604      	mov	r4, r0
 800c696:	460d      	mov	r5, r1
 800c698:	e019      	b.n	800c6ce <scalbn+0x86>
 800c69a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c69e:	460b      	mov	r3, r1
 800c6a0:	3a36      	subs	r2, #54	; 0x36
 800c6a2:	4432      	add	r2, r6
 800c6a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c6a8:	428a      	cmp	r2, r1
 800c6aa:	dd08      	ble.n	800c6be <scalbn+0x76>
 800c6ac:	2d00      	cmp	r5, #0
 800c6ae:	a120      	add	r1, pc, #128	; (adr r1, 800c730 <scalbn+0xe8>)
 800c6b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6b4:	da1c      	bge.n	800c6f0 <scalbn+0xa8>
 800c6b6:	a120      	add	r1, pc, #128	; (adr r1, 800c738 <scalbn+0xf0>)
 800c6b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6bc:	e018      	b.n	800c6f0 <scalbn+0xa8>
 800c6be:	2a00      	cmp	r2, #0
 800c6c0:	dd08      	ble.n	800c6d4 <scalbn+0x8c>
 800c6c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c6ce:	ec45 4b10 	vmov	d0, r4, r5
 800c6d2:	bd70      	pop	{r4, r5, r6, pc}
 800c6d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c6d8:	da19      	bge.n	800c70e <scalbn+0xc6>
 800c6da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c6de:	429e      	cmp	r6, r3
 800c6e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c6e4:	dd0a      	ble.n	800c6fc <scalbn+0xb4>
 800c6e6:	a112      	add	r1, pc, #72	; (adr r1, 800c730 <scalbn+0xe8>)
 800c6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d1e2      	bne.n	800c6b6 <scalbn+0x6e>
 800c6f0:	a30f      	add	r3, pc, #60	; (adr r3, 800c730 <scalbn+0xe8>)
 800c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f6:	f7f3 ff97 	bl	8000628 <__aeabi_dmul>
 800c6fa:	e7cb      	b.n	800c694 <scalbn+0x4c>
 800c6fc:	a10a      	add	r1, pc, #40	; (adr r1, 800c728 <scalbn+0xe0>)
 800c6fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d0b8      	beq.n	800c678 <scalbn+0x30>
 800c706:	a10e      	add	r1, pc, #56	; (adr r1, 800c740 <scalbn+0xf8>)
 800c708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c70c:	e7b4      	b.n	800c678 <scalbn+0x30>
 800c70e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c712:	3236      	adds	r2, #54	; 0x36
 800c714:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c718:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c71c:	4620      	mov	r0, r4
 800c71e:	4b0c      	ldr	r3, [pc, #48]	; (800c750 <scalbn+0x108>)
 800c720:	2200      	movs	r2, #0
 800c722:	e7e8      	b.n	800c6f6 <scalbn+0xae>
 800c724:	f3af 8000 	nop.w
 800c728:	c2f8f359 	.word	0xc2f8f359
 800c72c:	01a56e1f 	.word	0x01a56e1f
 800c730:	8800759c 	.word	0x8800759c
 800c734:	7e37e43c 	.word	0x7e37e43c
 800c738:	8800759c 	.word	0x8800759c
 800c73c:	fe37e43c 	.word	0xfe37e43c
 800c740:	c2f8f359 	.word	0xc2f8f359
 800c744:	81a56e1f 	.word	0x81a56e1f
 800c748:	43500000 	.word	0x43500000
 800c74c:	ffff3cb0 	.word	0xffff3cb0
 800c750:	3c900000 	.word	0x3c900000

0800c754 <_init>:
 800c754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c756:	bf00      	nop
 800c758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75a:	bc08      	pop	{r3}
 800c75c:	469e      	mov	lr, r3
 800c75e:	4770      	bx	lr

0800c760 <_fini>:
 800c760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c762:	bf00      	nop
 800c764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c766:	bc08      	pop	{r3}
 800c768:	469e      	mov	lr, r3
 800c76a:	4770      	bx	lr
